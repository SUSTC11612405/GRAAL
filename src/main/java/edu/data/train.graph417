class C{  @Override protected void onPause(){  super.onPause();  LOG.d(TAG,"Paused the activity.");  if (this.appView != null) {    this.appView.handlePause(this.keepRunning);  }}  }
class C{  public String globalInfo(){  return "Reads a file that is C45 format. Can take a filestem or filestem " + "with .names or .data appended. Assumes that path/<filestem>.names and " + "path/<filestem>.data exist and contain the names and data "+ "respectively.";}  }
class C{  public boolean isSecure(){  return false;}  }
class C{  public GeomagneticField(float gdLatitudeDeg,float gdLongitudeDeg,float altitudeMeters,long timeMillis){  final int MAX_N=G_COEFF.length;  gdLatitudeDeg=Math.min(90.0f - 1e-5f,Math.max(-90.0f + 1e-5f,gdLatitudeDeg));  computeGeocentricCoordinates(gdLatitudeDeg,gdLongitudeDeg,altitudeMeters);  assert G_COEFF.length == H_COEFF.length;  LegendreTable legendre=new LegendreTable(MAX_N - 1,(float)(Math.PI / 2.0 - mGcLatitudeRad));  float[] relativeRadiusPower=new float[MAX_N + 2];  relativeRadiusPower[0]=1.0f;  relativeRadiusPower[1]=EARTH_REFERENCE_RADIUS_KM / mGcRadiusKm;  for (int i=2; i < relativeRadiusPower.length; ++i) {    relativeRadiusPower[i]=relativeRadiusPower[i - 1] * relativeRadiusPower[1];  }  float[] sinMLon=new float[MAX_N];  float[] cosMLon=new float[MAX_N];  sinMLon[0]=0.0f;  cosMLon[0]=1.0f;  sinMLon[1]=(float)Math.sin(mGcLongitudeRad);  cosMLon[1]=(float)Math.cos(mGcLongitudeRad);  for (int m=2; m < MAX_N; ++m) {    int x=m >> 1;    sinMLon[m]=sinMLon[m - x] * cosMLon[x] + cosMLon[m - x] * sinMLon[x];    cosMLon[m]=cosMLon[m - x] * cosMLon[x] - sinMLon[m - x] * sinMLon[x];  }  float inverseCosLatitude=1.0f / (float)Math.cos(mGcLatitudeRad);  float yearsSinceBase=(timeMillis - BASE_TIME) / (365f * 24f * 60f* 60f* 1000f);  float gcX=0.0f;  float gcY=0.0f;  float gcZ=0.0f;  for (int n=1; n < MAX_N; n++) {    for (int m=0; m <= n; m++) {      float g=G_COEFF[n][m] + yearsSinceBase * DELTA_G[n][m];      float h=H_COEFF[n][m] + yearsSinceBase * DELTA_H[n][m];      gcX+=relativeRadiusPower[n + 2] * (g * cosMLon[m] + h * sinMLon[m]) * legendre.mPDeriv[n][m]* SCHMIDT_QUASI_NORM_FACTORS[n][m];      gcY+=relativeRadiusPower[n + 2] * m * (g * sinMLon[m] - h * cosMLon[m])* legendre.mP[n][m]* SCHMIDT_QUASI_NORM_FACTORS[n][m]* inverseCosLatitude;      gcZ-=(n + 1) * relativeRadiusPower[n + 2] * (g * cosMLon[m] + h * sinMLon[m])* legendre.mP[n][m]* SCHMIDT_QUASI_NORM_FACTORS[n][m];    }  }  double latDiffRad=Math.toRadians(gdLatitudeDeg) - mGcLatitudeRad;  mX=(float)(gcX * Math.cos(latDiffRad) + gcZ * Math.sin(latDiffRad));  mY=gcY;  mZ=(float)(-gcX * Math.sin(latDiffRad) + gcZ * Math.cos(latDiffRad));}  }
class C{  public double optimize(double x,UnivariateFunction f,double tol){  return optimize(x,f,tol,f.getLowerBound(),f.getUpperBound());}  }
class C{  public boolean isBoundTo(final @NonNull AligningRecyclerView target,final @AlignOrientation int alignmentMode){  return mOSLManager.bindingExists(new Binding(this,target,alignmentMode));}  }
class C{  @Override public void moveToCurrentRow() throws SQLException {  try {    debugCodeCall("moveToCurrentRow");    checkUpdatable();    insertRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Keyboard(Context context,int defaultHeight,int xmlLayoutResId){  this(context,defaultHeight,xmlLayoutResId,0);}  }
class C{  private String parseFrom(){  return parseTableName();}  }
class C{  CoverageChecker(RandoopOptions options){  this(options.getClassnames());}  }
class C{  protected LayerList createLayerList(Element[] layerElements,AVList params){  LayerList layerList=new LayerList();  for (  Element element : layerElements) {    try {      layerList.add(this.createFromLayerDocument(element,params));    } catch (    Exception e) {      Logging.logger().log(java.util.logging.Level.WARNING,e.getMessage(),e);    }  }  return layerList;}  }
class C{  public static void main(String args[]){  try {    FtpLoader loader=new FtpLoader(args[0]);    loader.connect();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void addToOperatorPopupMenu(JPopupMenu menu,Action renameAction,Action... furtherActions){  final Operator op=getFirstSelectedOperator();  final boolean singleSelection=getSelectedOperators().size() == 1;  if (op != null && !singleSelection) {    if (!(op instanceof ProcessRootOperator) && op.getParent() != null) {      menu.add(TOGGLE_ACTIVATION_ITEM.createMultipleActivationItem());    }  }  if (op != null && singleSelection) {    if (mainFrame.getProcessPanel().getProcessRenderer().getModel().getDisplayedChain() != op) {      menu.add(INFO_OPERATOR_ACTION);      menu.add(TOGGLE_ACTIVATION_ITEM.createMenuItem());      if (renameAction != null) {        menu.add(renameAction);      } else {        menu.add(RENAME_OPERATOR_ACTION);      }      if (!op.getErrorList().isEmpty()) {        menu.add(SHOW_PROBLEM_ACTION);      }      menu.addSeparator();      if (op instanceof OperatorChain && ((OperatorChain)op).getAllInnerOperators().size() > 0) {        menu.add(OperatorMenu.REPLACE_OPERATORCHAIN_MENU);      } else {        menu.add(OperatorMenu.REPLACE_OPERATOR_MENU);      }    }  }  if (mainFrame.getProcessPanel().getProcessRenderer().getModel().getDisplayedChain() == op) {    menu.add(OperatorMenu.NEW_OPERATOR_MENU);  }synchronized (factories) {    for (    OperatorActionFactory factory : factories) {      List<ResourceEntry> entries=factory.create(context);      if (!entries.isEmpty()) {        menu.addSeparator();      }      for (      ResourceEntry entry : entries) {        if (entry.isMenu()) {          menu.add(entry.getMenu());        } else {          menu.add(entry.getAction());        }      }    }  }  menu.addSeparator();  boolean enableCutCopy=mainFrame.getProcessPanel().getProcessRenderer().getModel().getDisplayedChain() != op;  OperatorTransferHandler.installMenuItems(menu,enableCutCopy);  if (furtherActions.length > 0) {    menu.addSeparator();    for (    Action a : furtherActions) {      if (a == null) {        continue;      }      if (a instanceof ToggleAction) {        menu.add(((ToggleAction)a).createMenuItem());      } else {        menu.add(a);      }    }  }  if (op != null && !(op instanceof ProcessRootOperator) && singleSelection) {    menu.addSeparator();    for (int i=0; i < TOGGLE_BREAKPOINT.length; i++) {      JMenuItem item=TOGGLE_BREAKPOINT[i].createMenuItem();      menu.add(item);    }  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static String tan(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function tan : " + params.length);  return "tan(" + params[0] + ")";}  }
class C{  public boolean isDone(){  return done;}  }
class C{  public Bundler putParcelableArray(String key,Parcelable[] value){  bundle.putParcelableArray(key,value);  return this;}  }
class C{  private static InputStream render(final Node dom,final XeSource src) throws IOException {  final Node copy=cloneNode(dom);  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final Node node=new Xembler(src.toXembly()).applyQuietly(copy);  try {    TransformerFactory.newInstance().newTransformer().transform(new DOMSource(node),new StreamResult(new Utf8OutputStreamWriter(baos)));  } catch (  final TransformerException ex) {    throw new IllegalStateException(ex);  }  return new ByteArrayInputStream(baos.toByteArray());}  }
class C{  private void writeDictionaryFile(CarbonDictionaryWriterImpl writer,List<String> list) throws IOException {  try {    for (    String value : list) {      writer.write(value);    }  }  finally {    writer.close();    writer.commit();  }}  }
class C{  public void removeConnectionListener(ConnectionListener l){  m_ConnectionPanel.removeConnectionListener(l);}  }
class C{  @Deprecated public int connectionPoolSize(){  return maxIdleConnectionPoolSize;}  }
class C{  public void append(CharSequence text,int start,int end){  mInputView.append(text,start,end);}  }
class C{  static public boolean isInnerCause(final Throwable t,final Class<? extends Throwable> cls){  return getInnerCause(t,cls) != null;}  }
class C{  public AsynchInputStream(InputStream input){  this(input,DEFAULT_PIPE_SIZE,DEFAULT_INPUT_BUFFER_SIZE);}  }
class C{  public static <K extends Comparable<?>,V>Builder<K,V> builder(){  return new Builder<K,V>();}  }
class C{  public V put(K key,V value){  expire();  m_justReset=false;  return super.put(key,value);}  }
class C{  public void injectMonitor(FileStoreMonitor storeMonitor) throws Exception {  this.fileStoreMonitor=storeMonitor;  pagingManager.injectMonitor(storeMonitor);  storageManager.injectMonitor(storeMonitor);  fileStoreMonitor.start();}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.IDENTIFIER_REF_IM__REWIRED_TARGET:    if (rewiredTarget != null)     msgs=((InternalEObject)rewiredTarget).eInverseRemove(this,ImPackage.SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS,SymbolTableEntry.class,msgs);  return basicSetRewiredTarget((SymbolTableEntry)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tThe JDBC URL to connect to.\n" + "\t(default: from DatabaseUtils.props file)","url",1,"-url <JDBC URL>"));  newVector.addElement(new Option("\tThe user to connect with to the database.\n" + "\t(default: none)","user",1,"-user <name>"));  newVector.addElement(new Option("\tThe password to connect with to the database.\n" + "\t(default: none)","password",1,"-password <password>"));  newVector.addElement(new Option("\tThe name of the table.\n" + "\t(default: the relation name)","T",1,"-T <table name>"));  newVector.addElement(new Option("\tTruncate (i.e. delete any data) in table before inserting","truncate",0,"-truncate"));  newVector.addElement(new Option("\tAdd an ID column as primary key. The name is specified\n" + "\tin the DatabaseUtils file ('idColumn'). The DatabaseLoader\n" + "\twon't load this column.","P",0,"-P"));  newVector.add(new Option("\tThe custom properties file to use instead of default ones,\n" + "\tcontaining the database parameters.\n" + "\t(default: none)","custom-props",1,"-custom-props <file>"));  newVector.addElement(new Option("\tInput file in arff format that should be saved in database.","i",1,"-i <input file name>"));  return newVector.elements();}  }
class C{  public String invertSelectionTipText(){  return "Set attribute selection mode. If false, only selected" + " (numeric) attributes in the range will be discretized; if" + " true, only non-selected attributes will be discretized.";}  }
class C{  public String toHydratedString(){  NavigableMap<String,Object> sortedFields=new TreeMap<>();  for (  Entry<Field,Object> entry : ModelUtils.getFieldValues(this).entrySet()) {    Field field=entry.getKey();    Object value=entry.getValue();    sortedFields.put(field.getName(),field.isAnnotationPresent(DoNotHydrate.class) ? value : HYDRATOR.apply(value));  }  return toStringHelper(sortedFields);}  }
class C{  public static boolean storeOnApplicationPrivateDir(Context context,Bitmap bitmap,String filename,Bitmap.CompressFormat format,int quality){  OutputStream out=null;  try {    out=new BufferedOutputStream(context.openFileOutput(filename,Context.MODE_PRIVATE));    return bitmap.compress(format,quality,out);  } catch (  FileNotFoundException e) {    Log.e(TAG,"no such file for saving bitmap: ",e);    return false;  } finally {    CloseableUtils.close(out);  }}  }
class C{  public TimeSeries(String title){  super(title);}  }
class C{  public void paintMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public String toString(){  String out="Treehash    : ";  for (int i=0; i < 6 + tailLength; i++) {    out=out + this.getStatInt()[i] + " ";  }  for (int i=0; i < 3 + tailLength; i++) {    if (this.getStatByte()[i] != null) {      out=out + new String(Hex.encode((this.getStatByte()[i]))) + " ";    } else {      out=out + "null ";    }  }  out=out + "  " + this.messDigestTree.getDigestSize();  return out;}  }
class C{  public final boolean isModifiedNow(){  if (_lifecycle.isDestroyed())   return true;  DependencyContainer dependencies=_dependencies;  if (dependencies == null)   return true;  return dependencies.isModifiedNow();}  }
class C{  public Matrix4f(Matrix3d m1,Vec3D t1,float s){  this.m00=(float)(m1.m00 * s);  this.m01=(float)(m1.m01 * s);  this.m02=(float)(m1.m02 * s);  this.m03=t1.x;  this.m10=(float)(m1.m10 * s);  this.m11=(float)(m1.m11 * s);  this.m12=(float)(m1.m12 * s);  this.m13=t1.y;  this.m20=(float)(m1.m20 * s);  this.m21=(float)(m1.m21 * s);  this.m22=(float)(m1.m22 * s);  this.m23=t1.z;  this.m30=0.0f;  this.m31=0.0f;  this.m32=0.0f;  this.m33=1.0f;}  }
class C{  public MonthDateFormat(TimeZone zone,int chars){  this(zone,Locale.getDefault(),chars,true,false);}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  public RangeQueryBuilder gt(double from){  this.from=from;  this.includeLower=false;  return this;}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public void addDatasource(String name,String file,String dsName,ConsolFun consolFunc,String backend){  Def def=new Def(name,file,dsName,consolFunc,backend);  sources.put(name,def);}  }
class C{  public XString(String val){  super(val);}  }
class C{  public static void cleanDatabases(Context context,String dbName){  context.deleteDatabase(dbName);}  }
class C{  protected void initSidebar(){  FindPanel findPane=new FindPanel(view);  getMap().addMapDataEventListener(findPane);  sidebar.addTab("Find",findPane);}  }
class C{  public boolean apply(int C_Invoice_ID){  MInvoice invoice=new MInvoice(getCtx(),C_Invoice_ID,get_TrxName());  if (invoice == null || invoice.get_ID() == 0) {    log.log(Level.SEVERE,"apply - Not valid C_Invoice_ID=" + C_Invoice_ID);    return false;  }  return apply(invoice);}  }
class C{  public boolean empty(){  return isEmpty();}  }
class C{  public ImportConfiguration(CsvFile csvFile){  try {    StringBuilder sb=new StringBuilder();    List<String> lineList=IOUtils.readLines(new ByteArrayInputStream(csvFile.getFileContent()));    boolean sepComma=true, sepSemicolon=true, sepTab=true, sepSpace=true;    int nComma=0, nSemicolon=0, nTab=0, nSpace=0;    if (lineList == null || lineList.size() == 0) {      setEmpty(true);    } else {      String line=null;      int notEmptyLineNumber=0;      while ((line == null || line.length() == 0) && notEmptyLineNumber < lineList.size()) {        line=lineList.get(notEmptyLineNumber);        notEmptyLineNumber++;      }      if (line != null && line.length() > 0) {        sb.append(line).append('\n');        nComma=line.replaceAll("[^,]","").length();        nSemicolon=line.replaceAll("[^;]","").length();        nTab=line.replaceAll("[^\t]","").length();        nSpace=line.replaceAll("[^ ]","").length();      }      if (lineList.size() > notEmptyLineNumber + 1) {        for (int i=notEmptyLineNumber; i < lineList.size(); i++) {          line=lineList.get(i);          if (line != null && line.length() > 0) {            sb.append(line).append('\n');            if (sepComma) {              sepComma=(nComma == line.replaceAll("[^,]","").length() && nComma > 0);            }            if (sepSemicolon) {              sepSemicolon=(nSemicolon == line.replaceAll("[^;]","").length() && nSemicolon > 0);            }            if (sepTab) {              sepTab=(nTab == line.replaceAll("[^\t]","").length() && nTab > 0);            }            if (sepSpace) {              sepSpace=(nSpace == line.replaceAll("[^ ]","").length() && nSpace > 0);            }          }        }        csvFile.setFileContent(sb.toString().getBytes());      } else {        sepComma=(nComma == ImportConfiguration.NUMBER_OF_COLUMNS - 1);        sepSemicolon=(nSemicolon == ImportConfiguration.NUMBER_OF_COLUMNS - 1);        sepTab=(nTab == ImportConfiguration.NUMBER_OF_COLUMNS - 1);        sepSpace=(nSpace == ImportConfiguration.NUMBER_OF_COLUMNS - 1);      }      if (sepComma && (!sepSemicolon && !sepTab && !sepSpace)) {        setSeperator(ImportConfiguration.COMMA);      } else       if (sepSemicolon && (!sepComma && !sepTab && !sepSpace)) {        setSeperator(ImportConfiguration.SEMICOLON);      } else       if (sepTab && (!sepSemicolon && !sepComma && !sepSpace)) {        setSeperator(ImportConfiguration.TAB);      } else       if (sepSpace && (!sepSemicolon && !sepTab && !sepComma)) {        setSeperator(ImportConfiguration.SPACE);      }      if (getLog().isInfoEnabled()) {        if (getSeperator() == ImportConfiguration.SPACE) {          getLog().info("Seperartor char is: space");        } else         if (getSeperator() == ImportConfiguration.TAB) {          getLog().info("Seperartor char is: tab");        } else {          getLog().info("Seperartor char is: " + getSeperator());        }      }    }  } catch (  Exception e) {    getLog().error("Error while creating configurtation",e);  }}  }
class C{  public CCachedExpressionTree createCachedTree(){  final CCachedExpressionTree newTree=new CCachedExpressionTree();  createCachedTree(m_rootNode,newTree.getRoot());  return newTree;}  }
class C{  public void addMember(String playerName){  openInvites.remove(playerName);  membersAndLastSeen.put(playerName,Long.valueOf(System.currentTimeMillis()));  if (leader == null) {    leader=playerName;  }  sendGroupChangeEvent();}  }
class C{  public Mat dctRows(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dctRows(scale);  return new Mat(dm.toArray());}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  public UPSCoord(Angle latitude,Angle longitude,String hemisphere,double easting,double northing){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.latitude=latitude;  this.longitude=longitude;  this.hemisphere=hemisphere;  this.easting=easting;  this.northing=northing;}  }
class C{  public void test_getNextSibling() throws Exception {  ByteArrayInputStream bis=new ByteArrayInputStream("<root/>".getBytes());  Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(bis);  Node root=document.getDocumentElement();  assertNull(root.getNextSibling());}  }
class C{  public static String plus(String left,CharSequence value){  return left + value;}  }
class C{  public List<SelectionSpec> buildFullTraversal(){  TraversalSpec rpToRp=new TraversalSpec();  rpToRp.setName("rpToRp");  rpToRp.setType("ResourcePool");  rpToRp.setPath("resourcePool");  rpToRp.setSkip(Boolean.FALSE);  SelectionSpec selSpec=new SelectionSpec();  selSpec.setName("rpToRp");  rpToRp.getSelectSet().add(selSpec);  selSpec=new SelectionSpec();  selSpec.setName("rpToVm");  rpToRp.getSelectSet().add(selSpec);  TraversalSpec rpToVm=new TraversalSpec();  rpToVm.setName("rpToVm");  rpToVm.setType("ResourcePool");  rpToVm.setPath("vm");  rpToVm.setSkip(Boolean.FALSE);  TraversalSpec crToRp=new TraversalSpec();  crToRp.setName("crToRp");  crToRp.setType("ComputeResource");  crToRp.setPath("resourcePool");  crToRp.setSkip(Boolean.FALSE);  selSpec=new SelectionSpec();  selSpec.setName("rpToRp");  crToRp.getSelectSet().add(selSpec);  selSpec=new SelectionSpec();  selSpec.setName("rpToVm");  crToRp.getSelectSet().add(selSpec);  TraversalSpec crToH=new TraversalSpec();  crToH.setName("crToH");  crToH.setType("ComputeResource");  crToH.setPath("host");  crToH.setSkip(Boolean.FALSE);  TraversalSpec dcToHf=new TraversalSpec();  dcToHf.setName("dcToHf");  dcToHf.setType("Datacenter");  dcToHf.setPath("hostFolder");  dcToHf.setSkip(Boolean.FALSE);  selSpec=new SelectionSpec();  selSpec.setName("visitFolders");  dcToHf.getSelectSet().add(selSpec);  TraversalSpec dcToDs=new TraversalSpec();  dcToDs.setName("dcToDs");  dcToDs.setType("Datacenter");  dcToDs.setPath("datastore");  dcToDs.setSkip(Boolean.FALSE);  selSpec=new SelectionSpec();  selSpec.setName("visitFolders");  dcToDs.getSelectSet().add(selSpec);  TraversalSpec HToVm=new TraversalSpec();  HToVm.setName("HToVm");  HToVm.setType("HostSystem");  HToVm.setPath("vm");  HToVm.setSkip(Boolean.FALSE);  selSpec=new SelectionSpec();  selSpec.setName("visitFolders");  HToVm.getSelectSet().add(selSpec);  TraversalSpec visitFolders=new TraversalSpec();  visitFolders.setName("visitFolders");  visitFolders.setType("Folder");  visitFolders.setPath("childEntity");  visitFolders.setSkip(Boolean.FALSE);  selSpec=new SelectionSpec();  selSpec.setName("visitFolders");  visitFolders.getSelectSet().add(selSpec);  selSpec=new SelectionSpec();  selSpec.setName("dcToHf");  visitFolders.getSelectSet().add(selSpec);  selSpec=new SelectionSpec();  selSpec.setName("dcToDs");  visitFolders.getSelectSet().add(selSpec);  selSpec=new SelectionSpec();  selSpec.setName("crToH");  visitFolders.getSelectSet().add(selSpec);  selSpec=new SelectionSpec();  selSpec.setName("crToRp");  visitFolders.getSelectSet().add(selSpec);  selSpec=new SelectionSpec();  selSpec.setName("HToVm");  visitFolders.getSelectSet().add(selSpec);  selSpec=new SelectionSpec();  selSpec.setName("rpToVm");  ArrayList<SelectionSpec> result=new ArrayList<SelectionSpec>();  result.add(visitFolders);  result.add(dcToDs);  result.add(dcToHf);  result.add(crToH);  result.add(crToRp);  result.add(rpToRp);  result.add(HToVm);  result.add(rpToVm);  return result;}  }
class C{  public u removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject left=m_left.execute(xctxt,true);  XObject right=m_right.execute(xctxt,true);  XObject result=operate(left,right);  left.detach();  right.detach();  return result;}  }
class C{  public void zoneMemberAlias(String alias,boolean remove) throws NetworkDeviceControllerException {  zoneAddRemoveMember(alias,true,remove);}  }
class C{  public double nextDouble(){  return nextDouble(this.my_p);}  }
class C{  public <T>T write(Supplier<T> operation){  try {    lock.writeLock().lock();    return operation.get();  }  finally {    lock.writeLock().unlock();  }}  }
class C{  @Deprecated public static InetAddress myPublicLocalIP(){  if (publicIPv4HostAddresses.size() > 0)   return publicIPv4HostAddresses.iterator().next();  if (publicIPv6HostAddresses.size() > 0)   return publicIPv6HostAddresses.iterator().next();  return null;}  }
class C{  public static boolean verifyVolumesInCG(List<Volume> volumes,List<Volume> cgVolumes,DbClient dbClient){  boolean result=true;  Map<String,List<String>> cgBackendSystemToVolumesMap=new HashMap<>();  for (  Volume cgVolume : cgVolumes) {    Volume srcVolume=VPlexUtil.getVPLEXBackendVolume(cgVolume,true,dbClient);    List<String> vols=cgBackendSystemToVolumesMap.get(srcVolume.getStorageController().toString());    if (vols == null) {      vols=new ArrayList<>();      cgBackendSystemToVolumesMap.put(srcVolume.getStorageController().toString(),vols);    }    vols.add(cgVolume.getId().toString());  }  Map<String,List<String>> backendSystemToVolumesMap=new HashMap<>();  for (  Volume volume : volumes) {    Volume srcVolume=VPlexUtil.getVPLEXBackendVolume(volume,true,dbClient);    List<String> vols=backendSystemToVolumesMap.get(srcVolume.getStorageController().toString());    if (vols == null) {      vols=new ArrayList<>();      backendSystemToVolumesMap.put(srcVolume.getStorageController().toString(),vols);    }    vols.add(volume.getId().toString());    boolean found=false;    for (    Volume cgVolume : cgVolumes) {      if (volume.getId().equals(cgVolume.getId())) {        found=true;        break;      }    }    if (!found) {      return false;    }  }  for (  Entry<String,List<String>> entry : backendSystemToVolumesMap.entrySet()) {    String systemId=entry.getKey();    List<String> selectedVols=entry.getValue();    List<String> cgVols=cgBackendSystemToVolumesMap.get(systemId);    if (selectedVols.size() < cgVols.size()) {      result=false;      break;    }  }  return result;}  }
class C{  public static _ConditionEnum fromString(final String value) throws SOAPSerializationException {  return (_ConditionEnum)Enumeration.fromString(value,_ConditionEnum.VALUES_TO_INSTANCES);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("unchecked") public PlotActionManager(GuiComponent component){  openPlotAction=new OpenPlotAction(component);  savePlotAction=new SavePlotAction(component);  savePlotAsAction=new SavePlotAsAction(component);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public ExampleRenderer(Context context,SurfaceTexture previewSurface,int width,int height){  super(context,previewSurface,width,height,"touchcolor.frag.glsl","touchcolor.vert.glsl");}  }
class C{  @Override public String toString(){  return new StringBuilder("Characters: ").append(this.text).toString();}  }
class C{  public ResponseOnSingeRequest(){  this.responseBody=null;  this.failObtainResponse=true;  this.errorMessage=null;  this.stackTrace=null;  this.statusCode=null;  this.setStatusCodeInt(PcConstants.NA_INT);  this.setReceiveTime(null);}  }
class C{  public synchronized RVMField resolve(){  if (resolvedMember != null)   return resolvedMember;  return resolveInternal((RVMClass)type.resolve());}  }
class C{  public void onStopped(){  mStopped=false;}  }
class C{  @Override public void onWebSocketConnect(Session session){  super.onWebSocketConnect(session);  log.info("Connection from peer {}",peerID);}  }
class C{  public void replace(StructuredGraph graph,Node replacement){  assert graph == graph();  replaceAtUsagesAndDelete(replacement);}  }
class C{  @Deprecated public static Integer Integer(int i){  return Integer.valueOf(i);}  }
class C{  @Deprecated public void angularUnbindGlobal(String name){  angularUnbind(name,null);}  }
class C{  private boolean isLineTooShort(IDocument document,int line) throws BadLocationException {  if (!isCommentLine(document,line + 1)) {    return false;  }  String nextLine=getLineContents(document,line + 1);  return nextLine.trim().length() != 0;}  }
class C{  public static boolean isValidFolderName(String name){  return VALID_FOLDER_NAME_PATTERN.matcher(name).matches() && NO_BACKSLASH_PATTERN.matcher(name).matches();}  }
class C{  public BluetoothLEPeerNetwork(){}  }
class C{  @Override public void onPlaybackStop(){  mDelayedStopHandler.removeCallbacksAndMessages(null);  mDelayedStopHandler.sendEmptyMessageDelayed(0,STOP_DELAY);  stopForeground(true);}  }
class C{  public void section(String sectionName){  end();  this.sectionName=sectionName;  this.sectionStart=ActorTime.currentTime();}  }
class C{  public static String toBase64(Bitmap bitmap){  if (bitmap == null) {    throw new NullPointerException("Bitmap cannot be null");  }  String base64Bitmap=null;  ByteArrayOutputStream stream=new ByteArrayOutputStream();  bitmap.compress(Bitmap.CompressFormat.PNG,100,stream);  byte[] imageBitmap=stream.toByteArray();  base64Bitmap=Base64.encodeToString(imageBitmap,Base64.DEFAULT);  return base64Bitmap;}  }
class C{  public void invalidSizes(int index,int count){  if (!valid()) {    return;  }  invalidateLineMapAfter(index);  int actualCount=actualCount(index,count);  for (int i=0; i < actualCount; i++) {    sizeMap.remove(index + i);  }  refreshLineMap();}  }
class C{  public byte[] readBytes(){  try {    return Files.readAllBytes(Paths.get(this.toString()));  } catch (  IOException e) {  }  return new byte[]{};}  }
class C{  void print(PrintStream ps){  DecimalFormat F=new DecimalFormat("0.000000");  DecimalFormat I=new DecimalFormat("000");  int extremum=0;  int bandEdgeCount=0;  for (int i=0; i < gridSize; i++) {    double Omega=grid[i];    String line=I.format(i) + "  " + F.format(Omega)+ "  "+ F.format(X[i])+ "  "+ F.format(H[i])+ "  "+ F.format(W[i]);    if (bandEdgeIndices[bandEdgeCount] == i) {      line=line + "  band edge";      bandEdgeCount++;    }    if (Omega == grid[extremaIndices[extremum]]) {      line=line + "  extremum";      extremum++;    }    ps.println(line);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetentities.class,args);}  }
class C{  public boolean isCrc(){  return isFlags(FLAG_CACHED_VALUES_CHECKED & FLAG_CRC_CALCED);}  }
class C{  @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:08.496 -0500",hash_original_method="66DFFFB44E1DF2E53F71A8A0807BF75D",hash_generated_method="E5AF027701615F992BC2C9EB4DE84A43") public void sendMsgParamsDecoded(ResultCode resCode,CommandParams cmdParams){  Message msg=obtainMessage(RilMessageDecoder.CMD_PARAMS_READY);  msg.arg1=resCode.value();  msg.obj=cmdParams;  sendMessage(msg);}  }
class C{  private Color calculateColor(final float val){  final Color col;  final float[] colValues=ShadingFactory.applyFunctions(function,new float[]{val});  shadingColorSpace.setColor(colValues,colValues.length);  col=(Color)shadingColorSpace.getColor();  return col;}  }
class C{  public void next(){  pos++;}  }
class C{  public static String format(Object value){  if (value instanceof Byte)   return formatByte((Byte)value);  if (value instanceof Short)   return formatShort((Short)value);  if (value instanceof Long)   return formatLong((Long)value);  if (value instanceof Float)   return formatFloat((Float)value);  if (value instanceof Double)   return formatDouble((Double)value);  if (value instanceof Character)   return formatChar((Character)value);  if (value instanceof String)   return formatString((String)value);  if (value instanceof Integer || value instanceof Boolean)   return value.toString(); else   throw new IllegalArgumentException("Argument is not a primitive type or a string; it " + ((value == null) ? "is a null value." : "has class " + value.getClass().getName()) + ".");}  }
class C{  @Override public RegularTimePeriod next(){  Second result=null;  if (this.second != LAST_SECOND_IN_MINUTE) {    result=new Second(this.second + 1,getMinute());  } else {    Minute next=(Minute)getMinute().next();    if (next != null) {      result=new Second(FIRST_SECOND_IN_MINUTE,next);    }  }  return result;}  }
class C{  @Override public long addWithoutBreaking(long bytes){  long u=used.addAndGet(bytes);  if (logger.isTraceEnabled()) {    logger.trace("[{}] Adjusted breaker by [{}] bytes, now [{}]",this.name,bytes,u);  }  assert u >= 0 : "Used bytes: [" + u + "] must be >= 0";  return u;}  }
class C{  public static MoveParticipant[] loadMoveParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,MoveArguments arguments,IParticipantDescriptorFilter filter,String[] affectedNatures,SharableParticipants shared){  RefactoringParticipant[] participants=fgMoveExtensions.getParticipants(status,processor,element,arguments,filter,affectedNatures,shared);  MoveParticipant[] result=new MoveParticipant[participants.length];  System.arraycopy(participants,0,result,0,participants.length);  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean hasSourceRetention(){  if (!runtimeRetention && !classRetention)   return true;  return this.sourceRetention;}  }
class C{  public double calculate(double input){  m_lastInput=input;  m_lastError=m_error;  m_error=m_desired - input;  m_totalError+=m_error;  m_result=NerdyMath.threshold((m_kP * m_error) + (m_kI * m_totalError) - (m_kD * (m_error - m_lastError)),m_minimumOutput,m_maximumOutput);  return m_result;}  }
class C{  @Override public XMLEventReader createXMLEventReader(InputStream in) throws XMLStreamException {  try {    return new WbXmlEventReader(in,(WbXmlDefinition)props.get(DEFINITION_PROPERTY));  } catch (  IOException e) {    throw new XMLStreamException(e);  }}  }
class C{  public synchronized boolean matches(CharSequence path){  if (_matcher == null) {    _matcher=_pattern.matcher(path);  } else {    _matcher.reset(path);  }  return _matcher.matches();}  }
class C{  public GFciRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public BaseSpringSystem(SpringLooper springLooper){  if (springLooper == null) {    throw new IllegalArgumentException("springLooper is required");  }  mSpringLooper=springLooper;  mSpringLooper.setSpringSystem(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.652 -0400",hash_original_method="21FDE1E7DBC4A0A5AEE7F5845398B503",hash_generated_method="B740A096E1BAF578B1B2C46C2B2FC316") public Grammar(String g2gFileName) throws IOException {  mGrammar=SR_GrammarLoad(g2gFileName);  SR_GrammarSetupVocabulary(mGrammar,mVocabulary);}  }
class C{  public void offset(final double delta_x,final double delta_y){  setX(getX() + delta_x);  setY(getY() + delta_y);}  }
class C{  public CompoundIcon(Icon icon1,Icon icon2){  m_icon1=icon1;  m_icon2=icon2;}  }
class C{  public static <T>List<T> toList(T obj1,T obj2,T obj3){  List<T> list=new LinkedList<T>();  list.add(obj1);  list.add(obj2);  list.add(obj3);  return list;}  }
class C{  @DSComment("no security concern") @DSSpec(DSCat.DATA_GENERAL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.722 -0500",hash_original_method="600681B39DE4E67D9402AFEDAC93A2DE",hash_generated_method="C95AD86C921BF59FC64E8F9566591A20") public final void confirm(){  mResult=true;  wakeUp();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.DATABASE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.444 -0500",hash_original_method="76F2FAC154909632438A49671F5D33A8",hash_generated_method="9398ED4569F070ECF144AEEF7742700F") public void bind(int index,long value){  mPreparedStatement.bindLong(index,value);}  }
class C{  protected void updatePeProvisioning(){  getPeMap().clear();  for (  ContainerVmPe pe : getPeList()) {    pe.getContainerVmPeProvisioner().deallocateMipsForAllContainerVms();  }  Iterator<ContainerVmPe> peIterator=getPeList().iterator();  ContainerVmPe pe=peIterator.next();  ContainerVmPeProvisioner containerVmPeProvisioner=pe.getContainerVmPeProvisioner();  double availableMips=containerVmPeProvisioner.getAvailableMips();  for (  Map.Entry<String,List<Double>> entry : getMipsMap().entrySet()) {    String vmUid=entry.getKey();    getPeMap().put(vmUid,new LinkedList<ContainerVmPe>());    for (    double mips : entry.getValue()) {      while (mips >= 0.1) {        if (availableMips >= mips) {          containerVmPeProvisioner.allocateMipsForContainerVm(vmUid,mips);          getPeMap().get(vmUid).add(pe);          availableMips-=mips;          break;        } else {          containerVmPeProvisioner.allocateMipsForContainerVm(vmUid,availableMips);          if (availableMips != 0) {            getPeMap().get(vmUid).add(pe);          }          mips-=availableMips;          if (mips <= 0.1) {            break;          }          if (!peIterator.hasNext()) {            Log.printConcatLine("There is no enough MIPS (",mips,") to accommodate VM ",vmUid);          }          pe=peIterator.next();          containerVmPeProvisioner=pe.getContainerVmPeProvisioner();          availableMips=containerVmPeProvisioner.getAvailableMips();        }      }    }  }}  }
class C{  public int value(){  return _map._values[_index];}  }
class C{  protected void executePhase(){  while (true) {    int minSlackWorker=-1, minSlackJob=-1;    double minSlackValue=Double.POSITIVE_INFINITY;    for (int j=0; j < dim; j++) {      if (parentWorkerByCommittedJob[j] == -1) {        if (minSlackValueByJob[j] < minSlackValue) {          minSlackValue=minSlackValueByJob[j];          minSlackWorker=minSlackWorkerByJob[j];          minSlackJob=j;        }      }    }    if (minSlackValue > 0) {      updateLabeling(minSlackValue);    }    parentWorkerByCommittedJob[minSlackJob]=minSlackWorker;    if (matchWorkerByJob[minSlackJob] == -1) {      int committedJob=minSlackJob;      int parentWorker=parentWorkerByCommittedJob[committedJob];      while (true) {        int temp=matchJobByWorker[parentWorker];        match(parentWorker,committedJob);        committedJob=temp;        if (committedJob == -1) {          break;        }        parentWorker=parentWorkerByCommittedJob[committedJob];      }      return;    } else {      int worker=matchWorkerByJob[minSlackJob];      committedWorkers[worker]=true;      for (int j=0; j < dim; j++) {        if (parentWorkerByCommittedJob[j] == -1) {          double slack=costMatrix[worker][j] - labelByWorker[worker] - labelByJob[j];          if (minSlackValueByJob[j] > slack) {            minSlackValueByJob[j]=slack;            minSlackWorkerByJob[j]=worker;          }        }      }    }  }}  }
class C{  protected AbstractPrimitive(final TValue value,final Class<TDerived> derivedClass){  this.value=value;  this.derivedClass=derivedClass;}  }
class C{  public void onCreate(Activity activity,boolean asLanding){synchronized (activities) {    activities.add(new ActivityHolder(activity,asLanding));  }}  }
class C{  static public void validateSubdirectories(TestSuite suite,String name){  TestSuite subsuite=new TestSuite("Subdirectories of " + name + " validation");  suite.addTest(subsuite);  if (System.getProperty("jmri.skipschematests","false").equals("true"))   return;  java.io.File dir=new java.io.File(name);  java.io.File[] files=dir.listFiles();  if (files == null) {    return;  }  for (int i=0; i < files.length; i++) {    if (files[i].isDirectory()) {      validateDirectory(subsuite,files[i].toString());    }  }}  }
class C{  void appendWhereEscapeString(String inWhere){}  }
class C{  private void checkCurrentMap(HashMap<String,NamedIcon> iconMap){  if (log.isDebugEnabled()) {    log.debug("checkCurrentMap: for type \"" + _itemType + "\", family \""+ _family+ "\"");  }  String family=findFamilyOfMap(iconMap,ItemPalette.getFamilyMaps(_itemType));  if (family != null) {    _family=family;    return;  } else {    if (ItemPalette.getIconMap(_itemType,_family) != null) {      _family=null;    }  }  if (!_suppressNamePrompts) {    if (_family == null || _family.trim().length() == 0) {      _family=JOptionPane.showInputDialog(_paletteFrame,Bundle.getMessage("NoFamilyName"),Bundle.getMessage("questionTitle"),JOptionPane.QUESTION_MESSAGE);      if (_family == null || _family.trim().length() == 0) {        _family=null;        return;      }    }    int result=JOptionPane.showConfirmDialog(_paletteFrame,Bundle.getMessage("UnkownFamilyName",_family),Bundle.getMessage("questionTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);    if (result == JOptionPane.YES_OPTION) {      ItemPalette.addFamily(_paletteFrame,_itemType,_family,iconMap);    } else     if (result == JOptionPane.NO_OPTION) {      _suppressNamePrompts=true;    }  }}  }
class C{  public Builder name(String name){  this.name=name;  return this;}  }
class C{  public void close(){  double dx=lastMoveTo.x - pen.x;  double dy=lastMoveTo.y - pen.y;  if (convertToTwips) {    dx*=SwfConstants.TWIPS_PER_PIXEL;    dy*=SwfConstants.TWIPS_PER_PIXEL;  }  pen.x=lastMoveTo.x;  pen.y=lastMoveTo.y;  if (dx == 0 && dy == 0) {    return;  } else {    int intdx=(int)Math.rint(dx);    int intdy=(int)Math.rint(dy);    addLineSubdivideAware(intdx,intdy);    dxSumTwips+=intdx;    dySumTwips+=intdy;  }}  }
class C{  public int next() throws XMLException {  return next(context);}  }
class C{  public DefaultDependencyManager(Pattern... ignoredPatterns){  ignorePatterns=Stream.of(ignoredPatterns).collect(collectingAndThen(toSet(),null));}  }
class C{  @ExceptionHandler(Exception.class) public ModelAndView handleAllException(Exception exception){  return new JsonError(exception).asModelAndView();}  }
class C{  public void back(){  if (this.usePrevious || this.index <= 0) {    throw new RuntimeException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  private boolean isLockingSuspendedByCurrentThread(){  try {    return getLockService().isLockingSuspendedByCurrentThread();  } catch (  IllegalStateException e) {    lockCheckReadiness();    throw e;  }}  }
class C{  static int testCosh(){  int failures=0;  double[][] testCases={{0.0625,1.001953760865667607841550709632597376},{0.1250,1.007822677825710859846949685520422223},{0.1875,1.017629683800690526835115759894757615},{0.2500,1.031413099879573176159295417520378622},{0.3125,1.049226785060219076999158096606305793},{0.3750,1.071140346704586767299498015567016002},{0.4375,1.097239412531012567673453832328262160},{0.5000,1.127625965206380785226225161402672030},{0.5625,1.162418740845610783505338363214045218},{0.6250,1.201753692975606324229229064105075301},{0.6875,1.245784523776616395403056980542275175},{0.7500,1.294683284676844687841708185390181730},{0.8125,1.348641048647144208352285714214372703},{0.8750,1.407868656822803158638471458026344506},{0.9375,1.472597542369862933336886403008640891},{1.0000,1.543080634815243778477905620757061497},{1.0625,1.619593348374367728682469968448090763},{1.1250,1.702434658138190487400868008124755757},{1.1875,1.791928268324866464246665745956119612},{1.2500,1.888423877161015738227715728160051696},{1.3125,1.992298543335143985091891077551921106},{1.3750,2.103958159362661802010972984204389619},{1.4375,2.223839037619709260803023946704272699},{1.5000,2.352409615243247325767667965441644201},{1.5625,2.490172284559350293104864895029231913},{1.6250,2.637665356192137582275019088061812951},{1.6875,2.795465162524235691253423614360562624},{1.7500,2.964188309728087781773608481754531801},{1.8125,3.144494087167972176411236052303565201},{1.8750,3.337087043587520514308832278928116525},{1.9375,3.542719740149244276729383650503145346},{2.0000,3.762195691083631459562213477773746099},{2.0625,3.996372503438463642260225717607554880},{2.1250,4.246165228196992140600291052990934410},{2.1875,4.512549935859540340856119781585096760},{2.2500,4.796567530460195028666793366876218854},{2.3125,5.099327816921939817643745917141739051},{2.3750,5.422013837643509250646323138888569746},{2.4375,5.765886495263270945949271410819116399},{2.5000,6.132289479663686116619852312817562517},{2.5625,6.522654518468725462969589397439224177},{2.6250,6.938506971550673190999796241172117288},{2.6875,7.381471791406976069645686221095397137},{2.7500,7.853279872697439591457564035857305647},{2.8125,8.355774815752725814638234943192709129},{2.8750,8.890920130482709321824793617157134961},{2.9375,9.460806908834119747071078865866737196},{3.0000,10.067661995777765841953936035115890343},{3.0625,10.713856690753651225304006562698007312},{3.1250,11.401916013575067700373788969458446177},{3.1875,12.134528570998387744547733730974713055},{3.2500,12.914557062512392049483503752322408761},{3.3125,13.745049466398732213877084541992751273},{3.3750,14.629250949773302934853381428660210721},{3.4375,15.570616549147269180921654324879141947},{3.5000,16.572824671057316125696517821376119469},{3.5625,17.639791465519127930722105721028711044},{3.6250,18.775686128468677200079039891415789429},{3.6875,19.984947192985946987799359614758598457},{3.7500,21.272299872959396081877161903352144126},{3.8125,22.642774526961913363958587775566619798},{3.8750,24.101726314486257781049388094955970560},{3.9375,25.654856121347151067170940701379544221},{4.0000,27.308232836016486629201989612067059978},{4.0625,29.068317063936918520135334110824828950},{4.1250,30.941986372478026192360480044849306606},{4.1875,32.936562165180269851350626768308756303},{4.2500,35.059838290298428678502583470475012235},{4.3125,37.320111495433027109832850313172338419},{4.3750,39.726213847251883288518263854094284091},{4.4375,42.287547242982546165696077854963452084},{4.5000,45.014120148530027928305799939930642658},{4.5625,47.916586706774825161786212701923307169},{4.6250,51.006288368867753140854830589583165950},{4.6875,54.295298211196782516984520211780624960},{4.7500,57.796468111195389383795669320243166117},{4.8125,61.523478966332915041549750463563672435},{4.8750,65.490894152518731617237739112888213645},{4.9375,69.714216430810089539924900313140922323},{5.0000,74.209948524787844444106108044487704798},{5.0625,78.995657605307475581204965926043112946},{5.1250,84.090043934600961683400343038519519678},{5.1875,89.513013937957834087706670952561002466},{5.2500,95.285757988514588780586084642381131013},{5.3125,101.430833209098212357990123684449846912},{5.3750,107.972251614673824873137995865940755392},{5.4375,114.935573939814969189535554289886848550},{5.5000,122.348009517829425991091207107262038316},{5.5625,130.238522601820409078244923165746295574},{5.6250,138.637945543134998069351279801575968875},{5.6875,147.579099269447055276899288971207106581},{5.7500,157.096921533245353905868840194264636395},{5.8125,167.228603431860671946045256541679445836},{5.8750,178.013734732486824390148614309727161925},{5.9375,189.494458570056311567917444025807275896},{6.0000,201.715636122455894483405112855409538488},{6.0625,214.725021906554080628430756558271312513},{6.1250,228.573450380013557089736092321068279231},{6.1875,243.315034578039208138752165587134488645},{6.2500,259.007377561239126824465367865430519592},{6.3125,275.711797500835732516530131577254654076},{6.3750,293.493567280752348242602902925987643443},{6.4375,312.422169552825597994104814531010579387},{6.5000,332.571568241777409133204438572983297292},{6.5625,354.020497560858198165985214519757890505},{6.6250,376.852769667496146326030849450983914197},{6.6875,401.157602161123700280816957271992998156},{6.7500,427.029966702886171977469256622451185850},{6.8125,454.570960119471524953536004647195906721},{6.8750,483.888199441157626584508920036981010995},{6.9375,515.096242417696720610477570797503766179},{7.0000,548.317035155212076889964120712102928484},{7.0625,583.680388623257719787307547662358502345},{7.1250,621.324485894002926216918634755431456031},{7.1875,661.396422095589629755266517362992812037},{7.2500,704.052779189542208784574955807004218856},{7.3125,749.460237818184878095966335081928645934},{7.3750,797.796228612873763671070863694973560629},{7.4375,849.249625508044731271830060572510241864},{7.5000,904.021483770216677368692292389446994987},{7.5625,962.325825625814651122171697031114091993},{7.6250,1024.390476557670599008492465853663578558},{7.6875,1090.457955538048482588540574008226583335},{7.7500,1160.786422676798661020094043586456606003},{7.8125,1235.650687987597295222707689125107720568},{7.8750,1315.343285214046776004329388551335841550},{7.9375,1400.175614911635999247504386054087931958},{8.0000,1490.479161252178088627715460421007179728},{8.0625,1586.606787305415349050508956232945539108},{8.1250,1688.934113859132470361718199038326340668},{8.1875,1797.860987165547537276364148450577336075},{8.2500,1913.813041349231764486365114317586148767},{8.3125,2037.243361581700856522236313401822532385},{8.3750,2168.634254521568851112005905503069409349},{8.4375,2308.499132938297821208734949028296170563},{8.5000,2457.384521883751693037774022640629666294},{8.5625,2615.872194250713123494312356053193077854},{8.6250,2784.581444063104750127653362960649823247},{8.6875,2964.171506380845754878370650565756538203},{8.7500,3155.344133275174556354775488913749659006},{8.8125,3358.846335940117183452010789979584950102},{8.8750,3575.473303654961482727206202358956274888},{8.9375,3806.071511003646460448021740303914939059},{9.0000,4051.542025492594047194773093534725371440},{9.0625,4312.844028491571841588188869958240355518},{9.1250,4590.998563255739769060078863130940205710},{9.1875,4887.092524674358252509551443117048351290},{9.2500,5202.282906336187674588222835339193136030},{9.3125,5537.801321507079474415176386655744387251},{9.3750,5894.958815685577062811620236195525504885},{9.4375,6275.150989541692149890530417987358096221},{9.5000,6679.863452256851081801173722051940058824},{9.5625,7110.677626574055535297758456126491707647},{9.6250,7569.276928241617224537226019600213961572},{9.6875,8057.453343996777301036241026375049070162},{9.7500,8577.114433792824387959788368429252257664},{9.8125,9130.290784631065880205118262838330689429},{9.8750,9719.143945123662919857326995631317996715},{9.9375,10345.974871791805753327922796701684092861},{10.0000,11013.232920103323139721376090437880844591}};  for (int i=0; i < testCases.length; i++) {    double[] testCase=testCases[i];    failures+=testCoshCaseWithUlpDiff(testCase[0],testCase[1],3.0);  }  double[][] specialTestCases={{0.0,1.0},{NaNd,NaNd},{Double.longBitsToDouble(0x7FF0000000000001L),NaNd},{Double.longBitsToDouble(0xFFF0000000000001L),NaNd},{Double.longBitsToDouble(0x7FF8555555555555L),NaNd},{Double.longBitsToDouble(0xFFF8555555555555L),NaNd},{Double.longBitsToDouble(0x7FFFFFFFFFFFFFFFL),NaNd},{Double.longBitsToDouble(0xFFFFFFFFFFFFFFFFL),NaNd},{Double.longBitsToDouble(0x7FFDeadBeef00000L),NaNd},{Double.longBitsToDouble(0xFFFDeadBeef00000L),NaNd},{Double.longBitsToDouble(0x7FFCafeBabe00000L),NaNd},{Double.longBitsToDouble(0xFFFCafeBabe00000L),NaNd},{Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY}};  for (int i=0; i < specialTestCases.length; i++) {    failures+=testCoshCaseWithUlpDiff(specialTestCases[i][0],specialTestCases[i][1],0.0);  }  for (int i=DoubleConsts.MIN_SUB_EXPONENT; i < -27; i++) {    double d=Math.scalb(2.0,i);    failures+=testCoshCaseWithUlpDiff(d,1.0,2.5);  }  long trans22=Double.doubleToLongBits(22.0);  long transExpOvfl=Double.doubleToLongBits(Math.nextDown(709.7827128933841));  for (long i=trans22; i < transExpOvfl; i+=(transExpOvfl - trans22) / 10000) {    double d=Double.longBitsToDouble(i);    failures+=testCoshCaseWithUlpDiff(d,StrictMath.exp(d) * 0.5,3.5);  }  long transCoshOvfl=Double.doubleToLongBits(710.4758600739439);  double offset=StrictMath.log(0.5);  for (long i=transExpOvfl + 1; i < transCoshOvfl; i+=(transCoshOvfl - transExpOvfl) / 1000) {    double input=Double.longBitsToDouble(i);    double expected=StrictMath.exp(input + offset) * StrictMath.exp(offset - ((input + offset) - input));    failures+=testCoshCaseWithUlpDiff(input,expected,4.0);  }  for (int i=10; i <= DoubleConsts.MAX_EXPONENT; i++) {    double d=Math.scalb(2.0,i);    failures+=testCoshCaseWithUlpDiff(d,Double.POSITIVE_INFINITY,0.0);  }  return failures;}  }
class C{  public boolean isCreditMemo(){  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID() == 0 ? getC_DocTypeTarget_ID() : getC_DocType_ID());  return MDocType.DOCBASETYPE_APCreditMemo.equals(dt.getDocBaseType()) || MDocType.DOCBASETYPE_ARCreditMemo.equals(dt.getDocBaseType());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.927 -0500",hash_original_method="F85866CCC5D845B1D53CAF0C5BA97CF5",hash_generated_method="B40243DEA0D5F5AC565137554CC28EF5") public final int ordinal(){  return ordinal;}  }
class C{  public boolean equals(Object a){  if (a == null) {    return false;  }  if (a instanceof CanFrame) {    CanFrame m=(CanFrame)a;    if ((_header != m.getHeader()) || (_isRtr != m.isRtr()) || (_isExtended != m.isExtended())) {      return false;    }    if (_nDataChars != m.getNumDataElements()) {      return false;    }    for (int i=0; i < _nDataChars; i++) {      if (_dataChars[i] != m.getElement(i)) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  public TempCluster grow(double dist,DBIDRef id){  this.dist=dist;  this.members.add(id);  this.aggregate+=1. / dist;  return this;}  }
class C{  public static double mean(double[] vector){  double sum=0;  if (vector.length == 0) {    return 0;  }  for (int i=0; i < vector.length; i++) {    sum+=vector[i];  }  return sum / (double)vector.length;}  }
class C{  private void paintZoomIndicator(Graphics2D graphics){  if (mZoom != 0) {    int width=getWidth() / 4;    int x=(getWidth() / 2) - (width / 2);    graphics.drawRect(x,getHeight() - 12,width,10);    int zoomWidth=width / getZoomMultiplier();    int windowOffset=0;    if (mDFTZoomWindowOffset != 0) {      windowOffset=(int)(((double)mDFTZoomWindowOffset / (double)mDFTSize) * width);    }    graphics.fillRect(x + windowOffset,getHeight() - 12,zoomWidth,10);    graphics.drawString("Zoom: " + getZoomMultiplier() + "x",x + width + 3,getHeight() - 2);  }}  }
class C{  public void closeEntry() throws IOException {  checkClosed();  if (currentEntry == null) {    return;  }  if (currentEntry instanceof java.util.jar.JarEntry) {    Attributes temp=((JarEntry)currentEntry).getAttributes();    if (temp != null && temp.containsKey("hidden")) {      return;    }  }  Exception failure=null;  try {    Streams.skipAll(this);  } catch (  Exception e) {    failure=e;  }  int inB, out;  if (currentEntry.compressionMethod == ZipEntry.DEFLATED) {    inB=inf.getTotalIn();    out=inf.getTotalOut();  } else {    inB=inRead;    out=inRead;  }  int diff=entryIn - inB;  if (diff != 0) {    ((PushbackInputStream)in).unread(buf,len - diff,diff);  }  try {    readAndVerifyDataDescriptor(inB,out);  } catch (  Exception e) {    if (failure == null) {      failure=e;    }  }  inf.reset();  lastRead=inRead=entryIn=len=0;  crc.reset();  currentEntry=null;  if (failure != null) {    if (failure instanceof IOException) {      throw (IOException)failure;    } else     if (failure instanceof RuntimeException) {      throw (RuntimeException)failure;    }    AssertionError error=new AssertionError();    error.initCause(failure);    throw error;  }}  }
class C{  public ICalFloatFormatter(int decimals){  setMaximumFractionDigits(decimals);  if (decimals > 0) {    setMinimumFractionDigits(1);  }  DecimalFormatSymbols symbols=new DecimalFormatSymbols();  symbols.setDecimalSeparator('.');  symbols.setMinusSign('-');  setDecimalFormatSymbols(symbols);}  }
class C{  public final int countDataAuthorities(){  return mDataAuthorities != null ? mDataAuthorities.size() : 0;}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  drawCenteredString(fontRendererObj,"Clean Up",width / 2,20,16777215);  drawCenteredString(fontRendererObj,"Please select the servers you want to remove:",width / 2,36,10526880);  super.drawScreen(par1,par2,par3);  for (int i=0; i < buttonList.size(); i++) {    GuiButton button=(GuiButton)buttonList.get(i);    if (button.isMouseOver() && !toolTips[button.id].isEmpty()) {      ArrayList toolTip=Lists.newArrayList(toolTips[button.id].split("\n"));      drawHoveringText(toolTip,par1,par2);      break;    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public <U>SimpleReactStream<U> fromIterableAsync(final Iterable<? extends Supplier<U>> actions){  return new SimpleReactStreamImpl<U>(this,StreamSupport.stream(Spliterators.spliteratorUnknownSize(actions.iterator(),Spliterator.ORDERED),false).map(null));}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMStopElement(prefix,(AbstractDocument)doc);}  }
class C{  public boolean isConnected(){  return sink != Sink.BLACKHOLE;}  }
class C{  public Item peek(){  if (isEmpty())   throw new NoSuchElementException("Stack underflow");  return first.item;}  }
class C{  @Override public RegularTimePeriod previous(){  RegularTimePeriod result=null;  if (this.millisecond != FIRST_MILLISECOND_IN_SECOND) {    result=new Millisecond(this.millisecond - 1,getSecond());  } else {    Second previous=(Second)getSecond().previous();    if (previous != null) {      result=new Millisecond(LAST_MILLISECOND_IN_SECOND,previous);    }  }  return result;}  }
class C{  public static File[] toFiles(SourceFile... sourceFiles){  File[] dest=new File[sourceFiles.length];  for (int i=0; i < sourceFiles.length; i++) {    dest[i]=sourceFiles[i].javaFile;  }  return dest;}  }
class C{  private static void checkCapacity(final int capacity){  if (capacity <= 1 || (capacity & -capacity) != capacity)   throw new IllegalArgumentException();}  }
class C{  public PortUnreachableException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public static void print(double x){  out.print(x);  out.flush();}  }
class C{  public boolean isSubtypeWildcard(){  return getSubtype().equals("*");}  }
class C{  public OnLocationForward(Object sender,NavLocation lastValue,NavLocation currentValue,boolean clearHistory,NavLocation locationWhereHistoryClearedUpTo,Navigator navigator){  super(lastValue,currentValue);  this.sender=sender;  this.clearHistory=clearHistory;  this.locationWhereHistoryClearedUpTo=locationWhereHistoryClearedUpTo;  this.navigator=navigator;}  }
class C{  public Matrix4(float[] values){  this.set(values);}  }
class C{  public static <T>T buildComponent(Class<T> componentClass,Object... dependencies){  buildMethodsCache(componentClass);  String fqn=componentClass.getName();  String packageName=componentClass.getPackage().getName();  String simpleName=fqn.substring(packageName.length() + 1);  String generatedName=(packageName + ".Dagger" + simpleName).replace('$','_');  try {    Class<?> generatedClass=Class.forName(generatedName);    Object builder=generatedClass.getMethod("builder").invoke(null);    for (    Method method : builder.getClass().getMethods()) {      Class<?>[] params=method.getParameterTypes();      if (params.length == 1) {        Class<?> dependencyClass=params[0];        for (        Object dependency : dependencies) {          if (dependencyClass.isAssignableFrom(dependency.getClass())) {            method.invoke(builder,dependency);            break;          }        }      }    }    return (T)builder.getClass().getMethod("build").invoke(builder);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void checkLaunchCoordinator(DiscoveryEvent discoEvt){  rw.readLock();  try {    if (stopping)     return;    if (timeCoord == null) {      long minNodeOrder=Long.MAX_VALUE;      Collection<ClusterNode> nodes=discoEvt.topologyNodes();      for (      ClusterNode node : nodes) {        if (node.order() < minNodeOrder)         minNodeOrder=node.order();      }      ClusterNode locNode=ctx.discovery().localNode();      if (locNode.order() == minNodeOrder) {        if (log.isDebugEnabled())         log.debug("Detected local node to be the eldest node in topology, starting time " + "coordinator thread [discoEvt=" + discoEvt + ", locNode="+ locNode+ ']');synchronized (this) {          if (timeCoord == null && !stopping) {            timeCoord=new TimeCoordinator(discoEvt);            IgniteThread th=new IgniteThread(timeCoord);            th.setPriority(Thread.MAX_PRIORITY);            th.start();          }        }      }    }  }  finally {    rw.readUnlock();  }}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + this.category1.hashCode();  long temp=Double.doubleToLongBits(this.value1);  result=37 * result + (int)(temp ^ (temp >>> 32));  result=37 * result + this.category2.hashCode();  temp=Double.doubleToLongBits(this.value2);  result=37 * result + (int)(temp ^ (temp >>> 32));  result=37 * result + HashUtilities.hashCodeForPaint(this.paint);  result=37 * result + this.stroke.hashCode();  return result;}  }
class C{  protected Float wrapValue(float k){  return new Float(k);}  }
class C{  public void write(final byte[] bText) throws EncodingException {  writeFillBits();  int l=bText.length;  for (int i=0; i < l; i++) {    write(0xFF & bText[i]);  }}  }
class C{  public static AffineTransformation createFromControlVectors(Coordinate[] src,Coordinate[] dest){  if (src.length != dest.length)   throw new IllegalArgumentException("Src and Dest arrays are not the same length");  if (src.length <= 0)   throw new IllegalArgumentException("Too few control points");  if (src.length > 3)   throw new IllegalArgumentException("Too many control points");  if (src.length == 1)   return createFromControlVectors(src[0],dest[0]);  if (src.length == 2)   return createFromControlVectors(src[0],src[1],dest[0],dest[1]);  return createFromControlVectors(src[0],src[1],src[2],dest[0],dest[1],dest[2]);}  }
class C{  public static String addAsterisk(String s,int index){  if (s != null) {    index=Math.min(index,s.length());    s=s.substring(0,index) + "[*]" + s.substring(index);  }  return s;}  }
class C{  public static int loadShader(int type,String shaderCode){  int shaderHandle=GLES20.glCreateShader(type);  GLES20.glShaderSource(shaderHandle,shaderCode);  GLES20.glCompileShader(shaderHandle);  int[] compileStatus=new int[1];  GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compileStatus,0);  if (compileStatus[0] != GLES20.GL_TRUE) {    String msg=GLES20.glGetShaderInfoLog(shaderHandle);    GLES20.glDeleteProgram(shaderHandle);    Log.e(TAG,"glCompileShader: " + msg);    throw new RuntimeException("glCompileShader failed");  }  return shaderHandle;}  }
class C{  protected void allocate(){  dispose();  boolean enabledTex=false;  if (!pgl.texturingIsEnabled(glTarget)) {    pgl.enableTexturing(glTarget);    enabledTex=true;  }  context=pgl.getCurrentContext();  glres=new GLResourceTexture(this);  pgl.bindTexture(glTarget,glName);  pgl.texParameteri(glTarget,PGL.TEXTURE_MIN_FILTER,glMinFilter);  pgl.texParameteri(glTarget,PGL.TEXTURE_MAG_FILTER,glMagFilter);  pgl.texParameteri(glTarget,PGL.TEXTURE_WRAP_S,glWrapS);  pgl.texParameteri(glTarget,PGL.TEXTURE_WRAP_T,glWrapT);  if (PGraphicsOpenGL.anisoSamplingSupported) {    pgl.texParameterf(glTarget,PGL.TEXTURE_MAX_ANISOTROPY,PGraphicsOpenGL.maxAnisoAmount);  }  pgl.texImage2D(glTarget,0,glFormat,glWidth,glHeight,0,PGL.RGBA,PGL.UNSIGNED_BYTE,null);  pgl.initTexture(glTarget,PGL.RGBA,width,height);  pgl.bindTexture(glTarget,0);  if (enabledTex) {    pgl.disableTexturing(glTarget);  }  bound=false;}  }
class C{  public StorageGroupPolicyLimitsParam createStorageGroupPolicyLimitsParam(StorageSystem storage,CIMInstance groupInstance) throws WBEMException {  StorageGroupPolicyLimitsParam storageGroupPolicyLimitsParam=null;  String hostIOLimitBandwidth=CIMPropertyFactory.getPropertyValue(groupInstance,EMC_MAX_BANDWIDTH);  String hostIOLimitIOPs=CIMPropertyFactory.getPropertyValue(groupInstance,EMC_MAX_IO);  if (storage.checkIfVmax3()) {    storageGroupPolicyLimitsParam=new StorageGroupPolicyLimitsParam(CIMPropertyFactory.getPropertyValue(groupInstance,CP_FAST_SETTING),hostIOLimitBandwidth,hostIOLimitIOPs,storage);    storageGroupPolicyLimitsParam.setCompression(SmisUtils.getEMCCompressionForStorageGroup(groupInstance));  } else {    storageGroupPolicyLimitsParam=new StorageGroupPolicyLimitsParam(getAutoTieringPolicyNameAssociatedWithVolumeGroup(storage,groupInstance.getObjectPath()),hostIOLimitBandwidth,hostIOLimitIOPs,storage);  }  return storageGroupPolicyLimitsParam;}  }
class C{  public JsonWriter endObject() throws IOException {  return close(JsonScope.EMPTY_OBJECT,JsonScope.NONEMPTY_OBJECT,"}");}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  private void dragBlockToTarget(){  dragTouch();  dragMove();  dragRelease();}  }
class C{  public static boolean validateAnonHashSuffix(PsiBuilder b,int l){  IElementType tokenType=b.getTokenType();  if (tokenType == null || ((PerlBuilder)b).getPerlParser().getAnonHashSuffixTokens().contains(tokenType)) {    return true;  } else {    PsiBuilder.Marker m=b.mark();    boolean r=PerlParserImpl.statement_modifier(b,l);    r=r && (b.getTokenType() != LEFT_BRACE);    m.rollbackTo();    return r;  }}  }
class C{  @Override public void zoomRangeAxes(double lowerPercent,double upperPercent,PlotRenderingInfo state,Point2D source){  for (  ValueAxis yAxis : this.rangeAxes.values()) {    if (yAxis != null) {      yAxis.zoomRange(lowerPercent,upperPercent);    }  }}  }
class C{  protected void notifyWaitingThread(RouteSpecificPool rospl){  WaitingThread waitingThread=null;  poolLock.lock();  try {    if ((rospl != null) && rospl.hasThread()) {      if (log.isDebugEnabled()) {        log.debug("Notifying thread waiting on pool" + " [" + rospl.getRoute() + "]");      }      waitingThread=rospl.nextThread();    } else     if (!waitingThreads.isEmpty()) {      if (log.isDebugEnabled()) {        log.debug("Notifying thread waiting on any pool");      }      waitingThread=waitingThreads.remove();    } else     if (log.isDebugEnabled()) {      log.debug("Notifying no-one, there are no waiting threads");    }    if (waitingThread != null) {      waitingThread.wakeup();    }  }  finally {    poolLock.unlock();  }}  }
class C{  public LoginFailedException(){  super("Login failed.");}  }
class C{  public static boolean isGzipContent(String contentEncoding){  return contentEncoding != null && contentEncoding.contains("gzip");}  }
class C{  public SGDNetworkTrainer(){  setDropoutInput(0.2);  setDropoutHidden(0.5);}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7){  return construct(e1,e2,e3,e4,e5,e6,e7);}  }
class C{  private boolean addNodesInDocOrder(int start,int end,int testIndex,NodeList nodelist,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  boolean foundit=false;  int i;  Node node=nodelist.item(testIndex);  for (i=end; i >= start; i--) {    Node child=(Node)elementAt(i);    if (child == node) {      i=-2;      break;    }    if (!DOM2Helper.isNodeAfter(node,child)) {      insertElementAt(node,i + 1);      testIndex--;      if (testIndex > 0) {        boolean foundPrev=addNodesInDocOrder(0,i,testIndex,nodelist,support);        if (!foundPrev) {          addNodesInDocOrder(i,size() - 1,testIndex,nodelist,support);        }      }      break;    }  }  if (i == -1) {    insertElementAt(node,0);  }  return foundit;}  }
class C{  ECHOSmallCore(){}  }
class C{  public static TriplePattern createTriplePattern(Model model,RDFNode subject,Resource predicate,RDFNode object){  TriplePattern triplePattern=model.createResource().as(TriplePattern.class);  triplePattern.addProperty(SP.subject,subject);  triplePattern.addProperty(SP.predicate,predicate);  triplePattern.addProperty(SP.object,object);  return triplePattern;}  }
class C{  public final long fingerPrint(){  int sz=this.values.length;  Value[] minVals=this.values;  if (perms != null) {    Value[] vals=new Value[sz];    NEXT_PERM:     for (int i=0; i < perms.length; i++) {      int cmp=0;      for (int j=0; j < sz; j++) {        vals[j]=this.values[j].permute(perms[i]);        if (cmp == 0) {          cmp=vals[j].compareTo(minVals[j]);          if (cmp > 0) {            continue NEXT_PERM;          }        }      }      if (cmp < 0) {        if (minVals == this.values) {          minVals=vals;          vals=new Value[sz];        } else {          Value[] temp=minVals;          minVals=vals;          vals=temp;        }      }    }  }  long fp=FP64.New();  if (viewMap == null) {    for (int i=0; i < sz; i++) {      fp=minVals[i].fingerPrint(fp);    }    if (this.values != minVals) {      for (int i=0; i < sz; i++) {        this.values[i].deepNormalize();      }    }  } else {    for (int i=0; i < sz; i++) {      this.values[i].deepNormalize();    }    TLCStateMut state=this;    if (minVals != this.values) {      state=new TLCStateMut(minVals);    }    Value val=mytool.eval(viewMap,Context.Empty,state);    fp=val.fingerPrint(fp);  }  return fp;}  }
class C{  private final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void remove(int pos){  if (pos < 0) {    throw new IllegalArgumentException("index less than zero.");  }  if (pos > getComponentCount() - 1) {    throw new IllegalArgumentException("index greater than the number of items.");  }  super.remove(pos);}  }
class C{  private static SkinSpecification parseBorderTag(Element border){  SkinSpecification skinSpec=new SkinSpecification();  skinSpec.tr_corner=border.getElementsByTagName(TR_CORNER).item(0).getTextContent();  skinSpec.tl_corner=border.getElementsByTagName(TL_CORNER).item(0).getTextContent();  skinSpec.br_corner=border.getElementsByTagName(BR_CORNER).item(0).getTextContent();  skinSpec.bl_corner=border.getElementsByTagName(BL_CORNER).item(0).getTextContent();  NodeList edgeNodes=border.getElementsByTagName(EDGE);  for (int i=0; i < edgeNodes.getLength(); i++) {    ArrayList<String> icons=new ArrayList<String>();    ArrayList<Boolean> shouldTile=new ArrayList<Boolean>();    NodeList edgeIcons=((Element)edgeNodes.item(i)).getElementsByTagName(EDGE_ICON);    for (int j=0; j < edgeIcons.getLength(); j++) {      String icon=((Element)edgeIcons.item(j)).getElementsByTagName(ICON).item(0).getTextContent();      String tiled=((Element)edgeIcons.item(j)).getElementsByTagName(TILED).item(0).getTextContent();      if (icon == null) {        System.err.println("Missing <" + ICON + "> tag");        continue;      }      if (tiled == null) {        System.err.println("Missing <" + TILED + "> tag");        continue;      }      icons.add(icon);      shouldTile.add(tiled.equalsIgnoreCase("true"));    }    String edgeName=((Element)edgeNodes.item(i)).getElementsByTagName(EDGE_NAME).item(0).getTextContent();    if (edgeName == null) {      System.err.println("Missing <" + EDGE_NAME + "> tag");      continue;    }    if (edgeName.equals("top")) {      skinSpec.topEdge=icons;      skinSpec.topShouldTile=shouldTile;    } else     if (edgeName.equals("bottom")) {      skinSpec.bottomEdge=icons;      skinSpec.bottomShouldTile=shouldTile;    } else     if (edgeName.equals("left")) {      skinSpec.leftEdge=icons;      skinSpec.leftShouldTile=shouldTile;    } else     if (edgeName.equals("right")) {      skinSpec.rightEdge=icons;      skinSpec.rightShouldTile=shouldTile;    }  }  return skinSpec;}  }
class C{  public void initTask(final Lesson lesson,boolean isRestarted){  setLesson(lesson);  for (  TaskFile taskFile : getTaskFiles().values()) {    taskFile.initTaskFile(this,isRestarted);  }}  }
class C{  public final void writeByte(int v) throws IOException {  write(v);}  }
class C{  @Override protected IgniteInternalFuture currentFuture() throws IgniteCheckedException {  return ((IgniteFutureImpl)services.future()).internalFuture();}  }
class C{  public void trainTree(Tree<StateSet> trainTree,double randomness,Lexicon oldLexicon,boolean secondHalf,boolean noSmoothing,int threshold){  double sentenceScore=0;  if (randomness == -1) {    sentenceScore=trainTree.getLabel().getIScore(0);    if (sentenceScore == 0) {      System.out.println("Something is wrong with this tree. I will skip it.");      return;    }  }  int sentenceScale=trainTree.getLabel().getIScale();  List<StateSet> words=trainTree.getYield();  List<StateSet> tags=trainTree.getPreTerminalYield();  if (words.size() != tags.size()) {    System.out.println("Yield an preterminal yield do not match!");    System.out.println(words.toString());    System.out.println(tags.toString());  }  Counter<String> oldWordCounter=null;  if (oldLexicon != null) {    oldWordCounter=oldLexicon.getWordCounter();  }  for (int position=0; position < words.size(); position++) {    totalWords++;    String word=words.get(position).getWord();    int nSubStates=tags.get(position).numSubStates();    short tag=tags.get(position).getState();    String sig=getCachedSignature(word,position);    wordCounter.incrementCount(sig,0);    if (unseenWordToTagCounters[tag] == null) {      unseenWordToTagCounters[tag]=new HashMap<String,double[]>();    }    double[] substateCounter2=unseenWordToTagCounters[tag].get(sig);    if (substateCounter2 == null) {      substateCounter2=new double[numSubStates[tag]];      unseenWordToTagCounters[tag].put(sig,substateCounter2);    }    if (wordToTagCounters[tag] == null) {      wordToTagCounters[tag]=new HashMap<String,double[]>();    }    double[] substateCounter=wordToTagCounters[tag].get(word);    if (substateCounter == null) {      substateCounter=new double[numSubStates[tag]];      wordToTagCounters[tag].put(word,substateCounter);    }    double[] oldLexiconScores=null;    if (randomness == -1) {      oldLexiconScores=oldLexicon.score(word,tag,position,noSmoothing,false);    }    StateSet currentState=tags.get(position);    double scale=ScalingTools.calcScaleFactor(currentState.getOScale() - sentenceScale) / sentenceScore;    for (short substate=0; substate < nSubStates; substate++) {      double weight=1;      if (randomness == -1) {        if (!Double.isInfinite(scale)) {          weight=currentState.getOScore(substate) * oldLexiconScores[substate] * scale;        } else {          weight=Math.exp(Math.log(ScalingTools.SCALE) * (currentState.getOScale() - sentenceScale) - Math.log(sentenceScore) + Math.log(currentState.getOScore(substate)) + Math.log(oldLexiconScores[substate]));        }      } else       if (randomness == 0) {        weight=1;      } else {        weight=GrammarTrainer.RANDOM.nextDouble() * randomness / 100.0 + 1.0;      }      if (weight == 0) {        continue;      }      substateCounter[substate]+=weight;      tagCounter[tag][substate]+=weight;      wordCounter.incrementCount(word,weight);      totalTokens+=weight;      if (Double.isNaN(totalTokens)) {        throw new Error("totalTokens is NaN: this would fail if we let it continue!");      }      if (oldLexicon != null && oldWordCounter.getCount(word) < threshold + 0.5) {        wordCounter.incrementCount(sig,weight);        substateCounter2[substate]+=weight;        unseenTagCounter[tag][substate]+=weight;        totalUnseenTokens+=weight;      }    }  }}  }
class C{  final public int loadUnsigned8(int addr){  return loadUnsigned8(addr,AccessSource.CODE);}  }
class C{  public void resyncOffsets(){  mOffsetTop=mView.getTop() - mLayoutTop;  mOffsetLeft=mView.getLeft() - mLayoutLeft;}  }
class C{  public Constant(double value){  this(Double.class,value);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.EXECUTION__STATEMENT:    setStatement((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void sumWithCompensation(double value){  double tmp=value - sumCompensation;  double velvel=sum + tmp;  sumCompensation=(velvel - sum) - tmp;  sum=velvel;}  }
class C{  public VcfRecord addInfo(String key,String... values){  ArrayList<String> val=mInfo.get(key);  if (val == null) {    val=new ArrayList<>();    mInfo.put(key,val);  }  if (values != null) {    Collections.addAll(val,values);  }  return this;}  }
class C{  public boolean unlockIt(){  log.info("unlockIt - " + toString());  setProcessing(false);  return true;}  }
class C{  public void fillColorBackground(){  Graphics2D g2D=m_backImage.createGraphics();  if (isGradient()) {    Point start=null;    Point end=null;    int r=1;switch (m_startPoint) {case SwingConstants.NORTH_WEST:      start=new Point(0,0);    if (m_repeatDistance > 0)     end=new Point(m_repeatDistance,m_repeatDistance); else     end=new Point(m_width / r,m_height / r);  break;case SwingConstants.WEST:start=new Point(0,m_height / 2);if (m_repeatDistance > 0) end=new Point(m_repeatDistance,m_height / 2); else end=new Point(m_width / r,m_height / 2);break;case SwingConstants.SOUTH_WEST:start=new Point(0,m_height);if (m_repeatDistance > 0) end=new Point(m_repeatDistance,m_height - m_repeatDistance); else end=new Point(m_width / r,m_height - (m_height / r));break;case SwingConstants.SOUTH:start=new Point(0,m_height);if (m_repeatDistance > 0) end=new Point(0,m_height - m_repeatDistance); else end=new Point(0,m_height - (m_height / r));break;case SwingConstants.SOUTH_EAST:start=new Point(m_width,m_height);if (m_repeatDistance > 0) end=new Point(m_width - m_repeatDistance,m_height - m_repeatDistance); else end=new Point(m_width - (m_width / r),m_height - (m_height / r));break;case SwingConstants.EAST:start=new Point(m_width,m_height / 2);if (m_repeatDistance > 0) end=new Point(m_width - m_repeatDistance,m_height / 2); else end=new Point(m_width - (m_width / r),m_height / 2);break;case SwingConstants.NORTH_EAST:start=new Point(m_width,0);if (m_repeatDistance > 0) end=new Point(m_width - m_repeatDistance,m_repeatDistance); else end=new Point(m_width - (m_width / r),m_height / r);break;default :case SwingConstants.NORTH:start=new Point(0,0);if (m_repeatDistance > 0) end=new Point(0,m_repeatDistance); else end=new Point(0,m_height / r);}GradientPaint paint=new GradientPaint(start,ColorBlind.getDichromatColor(getGradientUpperColor()),end,ColorBlind.getDichromatColor(getGradientLowerColor()),true);g2D.setPaint(paint);g2D.fillRect(0,0,m_width,m_height);} else if (isTexture()) {BufferedImage image=getTextureImage();if (image == null) {g2D.setPaint(ColorBlind.getDichromatColor(getFlatColor()));g2D.fillRect(0,0,m_width,m_height);} else {Rectangle anchor=new Rectangle(0,0,image.getWidth(),image.getHeight());TexturePaint texture=new TexturePaint(image,anchor);g2D.setPaint(texture);g2D.fillRect(0,0,m_width,m_height);g2D.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getTextureCompositeAlpha()));g2D.setPaint(ColorBlind.getDichromatColor(getTextureTaintColor()));g2D.fillRect(0,0,m_width,m_height);}} else if (isLine()) {g2D.setPaint(ColorBlind.getDichromatColor(getLineBackColor()));g2D.fillRect(0,0,m_width,m_height);g2D.setPaint(ColorBlind.getDichromatColor(getLineColor()));g2D.setStroke(new BasicStroke(getLineWidth()));for (int y=0; y < m_height; y+=getLineDistance()) g2D.drawLine(0,y,m_width,y);} else {g2D.setPaint(ColorBlind.getDichromatColor(getFlatColor()));g2D.fillRect(0,0,m_width,m_height);}setDirty(false);}  }
class C{  public ConnectionMap(){  super(mapTransform(AccessValve.getAccessInformationMap()));}  }
class C{  public String pad(String value,int places,String padCharacter){  StringBuilder sb=new StringBuilder();  sb.append(value);  while (sb.length() < places) {    sb.append(padCharacter);  }  return sb.toString();}  }
class C{  public static int hash(short value){  return (int)value;}  }
class C{  public void onDestroy(Fragment fragment){  onDestroy(fragment.getActivity());}  }
class C{  @Deprecated private SpoutConstants(){}  }
class C{  @SuppressWarnings("deprecation") protected void processStyledAttributes(@NonNull TypedArray a){  mOvalDimmedLayer=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_oval_dimmed_layer,DEFAULT_OVAL_DIMMED_LAYER);  mDimmedColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_dimmed_color,getResources().getColor(R.color.ucrop_color_default_dimmed));  initCropFrameStyle(a);  mShowCropFrame=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_show_frame,DEFAULT_SHOW_CROP_FRAME);  initCropGridStyle(a);  mShowCropGrid=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_show_grid,DEFAULT_SHOW_CROP_GRID);}  }
class C{  public boolean isLotMandatory(){  Object oo=get_Value(COLUMNNAME_IsLotMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int compareTo(final Money other){  return CoreUtils.nullSafeComparator(this.getBigDecimalValue(),other.getBigDecimalValue());}  }
class C{  public void update(StreamInfo streamInfo){  if (streamInfo == currentStreamInfo) {    set(streamInfo);  }}  }
class C{  protected final void fireVetoableChange(String propertyName,double oldValue,double newValue) throws PropertyVetoException {  fireVetoableChange(propertyName,Double.valueOf(oldValue),Double.valueOf(newValue));}  }
class C{  public GPUImageCrosshatchFilter(){  this(0.03f,0.003f);}  }
class C{  public void readLinkTypes(final int[] columnsIndices,final BufferedReader reader) throws IOException {  String line=reader.readLine();  while (line != null && line.length() > 0) {    line=reader.readLine();  }}  }
class C{  private static BigInteger evaluateRegister(final INaviOperandTreeNode node,final ImmutableList<RegisterValue> registers) throws CExpressionEvaluationException {  for (  final RegisterValue registerValue : registers) {    if (registerValue.getName().equalsIgnoreCase(node.getValue())) {      return registerValue.getValue();    }  }  throw new CExpressionEvaluationException(String.format("Value of register %s could not be determined",node.getValue()));}  }
class C{  private void reset(){  mTransmittedConstellations.clear();  mNewPaths.clear();  mPathMetrics.reset();  mSurvivorPaths.clear();  mSurvivorPaths.add(new Path(new Node(0,Tribit.T0,Con.C0)));}  }
class C{  @SuppressWarnings("unused") private SolRSynchroniser(){}  }
class C{  public void addRegistry(HeliumRegistry registry){synchronized (this.registry) {    this.registry.add(registry);  }}  }
class C{  protected void renderHeaderViews(){  removeAllViews();  for (int columnIndex=0; columnIndex < adapter.getColumnCount(); columnIndex++) {    View headerView=adapter.getHeaderView(columnIndex,this);    if (headerView == null) {      headerView=new TextView(getContext());    }    headerView.setOnClickListener(new InternalHeaderClickListener(columnIndex,getHeaderClickListeners()));    final int width=0;    final int height=LayoutParams.WRAP_CONTENT;    final int weight=adapter.getColumnWeight(columnIndex);    final LayoutParams headerLayoutParams=new LayoutParams(width,height,weight);    addView(headerView,headerLayoutParams);  }}  }
class C{  public Vector4i div(Vector4i v){  x/=v.x;  y/=v.y;  z/=v.z;  w/=v.w;  return this;}  }
class C{  protected Member[][][] array(Member[][][] arrayMember){  boolean resetIndexSaved=_resetIndex;  if (_resetIndex) {    _bitIndex=0;    _resetIndex=false;  }  for (int i=0; i < arrayMember.length; i++) {    array(arrayMember[i]);  }  _resetIndex=resetIndexSaved;  return (Member[][][])arrayMember;}  }
class C{  public static boolean[] randomBitVector(int n,int k){  if (n <= 0 || k > n)   throw new IllegalArgumentException(String.format("Can't generate bit vector [ n = %d , k = %d ]",n,k));  boolean[] vect=new boolean[n];  if (k == 0) {  } else   if (k == n) {    Arrays.fill(vect,true);  } else {    vect[0]=true;    for (int i=n - 1; i > 0; i--) {      int j=ThreadLocalRandom.current().nextInt(i + 1);      vect[i]=vect[j];      vect[j]=(i < k);    }  }  return vect;}  }
class C{  public CodedException(String faultCode,Throwable cause,String format,Object... args){  super(String.format(format,args),cause);  this.faultCode=faultCode;  faultDetail=ExceptionUtils.getStackTrace(this);  faultString=String.format(format,args);  setArguments(args);}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString=null;    String idrisiHeaderFile=null;    String idrisiDataFile=null;    String whiteboxHeaderFile=null;    String whiteboxDataFile=null;    WhiteboxRaster output=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    double noData=-32768;    int progress=0;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      idrisiHeaderFile=whiteboxHeaderFile.replace(".dep",".rdc");      idrisiDataFile=whiteboxHeaderFile.replace(".dep",".rst");      (new File(idrisiHeaderFile)).delete();      (new File(idrisiDataFile)).delete();      WhiteboxRaster.DataType dataType;      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else {        dataType=WhiteboxRaster.DataType.INTEGER;      }      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,dataType,-9999);      output.setNoDataValue(-9999);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,-9999);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File idrisiFile=new File(idrisiDataFile);      dataFile.renameTo(idrisiFile);      boolean success=createHeaderFile(wbr,idrisiHeaderFile);      if (!success) {        showFeedback("IDRISI header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  @Override public void close() throws IOException {  br.close();}  }
class C{  public synchronized void add(double x,double y){  add(x,y,0d);}  }
class C{  @Override public MessageProducer createProducer(final Destination destination) throws JMSException {  lock();  try {    Session session=getSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createProducer " + session + " dest="+ destination);    }    MessageProducer result=session.createProducer(destination);    result=new ActiveMQRAMessageProducer(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdProducer " + session + " producer="+ result);    }    addProducer(result);    return result;  }  finally {    unlock();  }}  }
class C{  public String removeMetadataOption(String name){  ReplOption existingOption=null;  for (  ReplOption replOption : metadata) {    if (name.equals(replOption.getOptionName()))     existingOption=replOption;  }  if (existingOption != null) {    metadata.remove(existingOption);    return existingOption.getOptionValue();  }  return null;}  }
class C{  public void dispose(){  for (int i=0; i < mbBuf.length; ++i) {    mbBuf[i]=null;  }  try {    if (raf != null) {      raf.close();    }    raf=null;    file.delete();  } catch (  Exception e) {  }}  }
class C{  public static int moveOnlySelected(Resource from,Resource to,String[] selectedFileIds){  if (selectedFileIds.length == 0) {    return NOTHING_TO_ATTACH;  }  List<Attachment> attachments=Attachment.find.where().idIn(Arrays.asList(selectedFileIds)).findList();  for (  Attachment attachment : attachments) {    if (attachment.containerId.equals(from.getId()) && attachment.containerType == from.getType()) {      attachment.moveTo(to);    }  }  return attachments.size();}  }
class C{  protected void displayImageFromDrawable(String imageUri,ImageView imageView){  String drawableIdString=Scheme.DRAWABLE.crop(imageUri);  int resID=context.getResources().getIdentifier(drawableIdString,"mipmap",context.getPackageName());  if (resID <= 0) {    resID=context.getResources().getIdentifier(drawableIdString,"drawable",context.getPackageName());  }  if (resID > 0 && imageView != null) {    imageView.setImageResource(resID);  }}  }
class C{  public boolean gt(DD y){  return (hi > y.hi) || (hi == y.hi && lo > y.lo);}  }
class C{  public int countLines(String fileName) throws IOException {  DataInputStream in=null;  BufferedReader br=null;  int count=0;  try {    FileInputStream fstream=new FileInputStream(fileName);    in=new DataInputStream(fstream);    br=new BufferedReader(new InputStreamReader(in));    String line=null;    while ((line=br.readLine().trim()) != null) {      count++;    }    fstream.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    try {      if (in != null || br != null) {        in.close();        br.close();      }    } catch (    java.io.IOException ex) {    }    return count;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.TYPE_REF__NULL_MODIFIER:    return nullModifier != NULL_MODIFIER_EDEFAULT;case TypeRefsPackage.TYPE_REF__UNDEF_MODIFIER:  return undefModifier != UNDEF_MODIFIER_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private void select(String name){  Generator<E> gen=map.get(name);  String[] params=gen.parameters();  int i;  for (i=0; i < labels.length; i++) {    labels[i].setText("Parameter " + (i + 1) + ":");    labels[i].setVisible(true);    fields[i].setText("");    fields[i].setVisible(true);  }  for (i=0; i < params.length; i++) {    labels[i].setText(params[i]);    fields[i].setEditable(true);  }  while (i < labels.length) {    fields[i].setEditable(false);    i++;  }}  }
class C{  @Deprecated public void put(Collection<Integer> data){  for (  Integer value : data) {    final int val=value.intValue();    min=val < min ? val : min;    max=val > max ? val : max;  }}  }
class C{  public boolean isEmpty(){  return this.size == 0;}  }
class C{  public static short[] values(Short[] array){  short[] dest=new short[array.length];  for (int i=0; i < array.length; i++) {    Short v=array[i];    if (v != null) {      dest[i]=v.shortValue();    }  }  return dest;}  }
class C{  public boolean isSetFullSyncRequest(){  return this.fullSyncRequest != null;}  }
class C{  public static Angle average(Angle a,Angle b,Angle c){  if (a == null || b == null || c == null) {    throw new IllegalArgumentException("Angle Is Null");  }  return Angle.fromDegrees((a.degrees + b.degrees + c.degrees) / 3);}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  return new Size2D(calculateTotalWidth(getWidth()),calculateTotalHeight(getHeight()));}  }
class C{  private void loginButtonActionPerformed(){  if (!isEnabled()) {    return;  }  setEnabled(false);  Profile profile;  profile=new Profile();  profile.setHost((serverField.getText()).trim());  try {    profile.setPort(Integer.parseInt(serverPortField.getText().trim()));  } catch (  final NumberFormatException ex) {    JOptionPane.showMessageDialog(this,"That is not a valid port number. Please try again.","Invalid port",JOptionPane.WARNING_MESSAGE);    return;  }  profile.setUser(usernameField.getText().trim());  profile.setPassword(new String(passwordField.getPassword()));  if (saveLoginBox.isSelected()) {    profiles.add(profile);    populateProfiles(profiles);    if (savePasswordBox.isSelected()) {      saveProfiles(profiles);    } else {      final String pw=profile.getPassword();      profile.setPassword("");      saveProfiles(profiles);      profile.setPassword(pw);    }  }  final Thread t=new Thread(new ConnectRunnable(profile),"Login");  t.start();}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public Hour(int hour,int day,int month,int year){  this(hour,new Day(day,month,year));}  }
class C{  VOMarketplace toVOMarketplace(NewMarketplace nmp){  if (nmp == null) {    return null;  }  VOMarketplace vmp=new VOMarketplace();  vmp.setName(nmp.getName());  vmp.setOpen(!nmp.isClosed());  vmp.setOwningOrganizationId(nmp.getOwningOrganizationId());  vmp.setTaggingEnabled(nmp.isTaggingEnabled());  vmp.setReviewEnabled(nmp.isReviewEnabled());  vmp.setSocialBookmarkEnabled(nmp.isSocialBookmarkEnabled());  vmp.setCategoriesEnabled(nmp.isCategoriesEnabled());  vmp.setTenantId(nmp.getTenantId());  return vmp;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.STRICT_MODE_RELEVANT__STRICT_MODE:    setStrictMode(STRICT_MODE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  protected void createNormals(ShapeData shapeData){  shapeData.coordBuffer.position(shapeData.normalBufferPosition);  shapeData.normalBuffer=shapeData.coordBuffer.slice();  for (  BoundaryInfo boundary : shapeData) {    this.computeBoundaryNormals(boundary,shapeData.normalBuffer);  }}  }
class C{  public int compareTo(DTNHost h){  return this.getAddress() - h.getAddress();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:14.493 -0500",hash_original_method="060018D8556E7858267AA04DC5F84FE8",hash_generated_method="9916908355C4748CA46EEB0C3F3491C9") public String toGenericString(){  StringBuilder sb=new StringBuilder(80);  initGenericTypes();  int modifier=getModifiers();  if (modifier != 0) {    sb.append(Modifier.toString(modifier & ~(Modifier.BRIDGE + Modifier.VARARGS))).append(' ');  }  if (formalTypeParameters != null && formalTypeParameters.length > 0) {    sb.append('<');    for (int i=0; i < formalTypeParameters.length; i++) {      appendGenericType(sb,formalTypeParameters[i]);      if (i < formalTypeParameters.length - 1) {        sb.append(",");      }    }    sb.append("> ");  }  appendGenericType(sb,Types.getType(genericReturnType));  sb.append(' ');  appendArrayType(sb,getDeclaringClass());  sb.append(".").append(getName());  sb.append('(');  appendArrayGenericType(sb,Types.getClonedTypeArray(genericParameterTypes));  sb.append(')');  Type[] genericExceptionTypeArray=Types.getClonedTypeArray(genericExceptionTypes);  if (genericExceptionTypeArray.length > 0) {    sb.append(" throws ");    appendArrayGenericType(sb,genericExceptionTypeArray);  }  return sb.toString();}  }
class C{  public boolean isPrepareError(){  return false;}  }
class C{  public Description(String helpText){  annotations=Maps.newLinkedHashMapWithExpectedSize(4);  annotations.put(DESCRIPTION,helpText);}  }
class C{  public ProcessingInstruction createProcessingInstruction(String target,String data) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  protected int AxisName() throws javax.xml.transform.TransformerException {  Object val=Keywords.getAxisName(m_token);  if (null == val) {    error(XPATHErrorResources.ER_ILLEGAL_AXIS_NAME,new Object[]{m_token});  }  int axesType=((Integer)val).intValue();  appendOp(2,axesType);  return axesType;}  }
class C{  private void cleanupAfterEditing(){  if (editingComponent != null) {    editingContainer.remove(editingComponent);  }  editingComponent=null;}  }
class C{  public String format(int number,int decimalPlaces){  StringBuilder sb=new StringBuilder();  int paddingRequired=decimalPlaces - (String.valueOf(number).length());  for (int x=0; x < paddingRequired; x++) {    sb.append("0");  }  sb.append(number);  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.631 -0500",hash_original_method="8B3D064358571DB7A73FB86148106DC9",hash_generated_method="E9C8CD1A2CE20039CC4E15154E6F786F") public static String cdmaCheckAndProcessPlusCodeByNumberFormat(String dialStr,int currFormat,int defaultFormat){  String retStr=dialStr;  if (dialStr != null && dialStr.lastIndexOf(PLUS_SIGN_STRING) != -1) {    if ((currFormat == defaultFormat) && (currFormat == FORMAT_NANP)) {      String postDialStr=null;      String tempDialStr=dialStr;      retStr=null;      if (DBG)       log("checkAndProcessPlusCode,dialStr=" + dialStr);      do {        String networkDialStr;        networkDialStr=extractNetworkPortion(tempDialStr);        networkDialStr=processPlusCodeWithinNanp(networkDialStr);        if (!TextUtils.isEmpty(networkDialStr)) {          if (retStr == null) {            retStr=networkDialStr;          } else {            retStr=retStr.concat(networkDialStr);          }        } else {          Log.e("checkAndProcessPlusCode: null newDialStr",networkDialStr);          return dialStr;        }        postDialStr=extractPostDialPortion(tempDialStr);        if (!TextUtils.isEmpty(postDialStr)) {          int dialableIndex=findDialableIndexFromPostDialStr(postDialStr);          if (dialableIndex >= 1) {            retStr=appendPwCharBackToOrigDialStr(dialableIndex,retStr,postDialStr);            tempDialStr=postDialStr.substring(dialableIndex);          } else {            if (dialableIndex < 0) {              postDialStr="";            }            Log.e("wrong postDialStr=",postDialStr);          }        }        if (DBG)         log("checkAndProcessPlusCode,postDialStr=" + postDialStr);      } while (!TextUtils.isEmpty(postDialStr) && !TextUtils.isEmpty(tempDialStr));    } else {      Log.e("checkAndProcessPlusCode:non-NANP not supported",dialStr);    }  }  return retStr;}  }
class C{  public QArtTest(String testName){  super(testName);}  }
class C{  public CompositeMigrationResolver(ClassLoader classLoader,ScriptsLocations locations,String encoding,MigrationResolver... customMigrationResolvers){  for (  ScriptsLocation location : locations.getLocations()) {    migrationResolvers.add(new CqlMigrationResolver(classLoader,location,encoding));    migrationResolvers.add(new JavaMigrationResolver(classLoader,location));  }  migrationResolvers.addAll(Arrays.asList(customMigrationResolvers));}  }
class C{  public final boolean post(@NonNull Runnable r){  return mExec.post(wrapRunnable(r));}  }
class C{  @Override public void BALOAD(Object conc_array,int conc_index){  IntegerValue symb_index=env.topFrame().operandStack.popBv32();  ReferenceExpression array_ref=env.topFrame().operandStack.popRef();  env.heap.initializeReference(conc_array,array_ref);  if (nullReferenceViolation(array_ref,conc_array)) {    return;  }  if (negativeIndexViolation(conc_index,symb_index)) {    return;  }  ReferenceExpression symb_array=array_ref;  int conc_array_length=Array.getLength(conc_array);  IntegerValue symb_array_length=env.heap.getField("",ARRAY_LENGTH,conc_array,symb_array,conc_array_length);  if (indexTooBigViolation(conc_index,symb_index,conc_array_length,symb_array_length))   return;  Object object=Array.get(conc_array,conc_index);  int intValue;  if (object instanceof Boolean) {    boolean booleanValue=((Boolean)object).booleanValue();    intValue=booleanValue ? 1 : 0;  } else {    assert object instanceof Byte;    intValue=((Byte)object).shortValue();  }  IntegerValue c=env.heap.array_load(symb_array,conc_index,(long)intValue);  env.topFrame().operandStack.pushBv32(c);}  }
class C{  protected Properties createProperties(URL location) throws IOException {  InputStream is=null;  if (location != null) {    is=location.openStream();  }  Properties tmpProperties=new Properties();  if (is != null) {    tmpProperties.load(is);  }  return tmpProperties;}  }
class C{  protected FileObject unwrap(FileObject fileObject){  return fileObject;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tSpecify list of columns to delete. First and last are valid\n" + "\tindexes. (default none)","R",1,"-R <index1,index2-index4,...>"));  newVector.addElement(new Option("\tInvert matching sense (i.e. only keep specified columns)","V",0,"-V"));  return newVector.elements();}  }
class C{  public GenerationContext createChildContext(ExceptionHandlerBasicBlockBag ebag,NormalMethod callee,Instruction callSite){  GenerationContext child=new GenerationContext();  child.method=callee;  if (this.options.frequencyCounters() || this.options.inverseFrequencyCounters()) {    child.branchProfiles=EdgeCounts.getBranchProfiles(callee);  }  child.parent=this;  child.original_cm=this.original_cm;  child.options=this.options;  child.temps=this.temps;  child._ncGuards=this._ncGuards;  child.exit=this.exit;  child.inlinePlan=this.inlinePlan;  child.inlineSequence=new InlineSequence(child.method,callSite.position(),callSite);  child.enclosingHandlers=ebag;  child.arguments=new Operand[Call.getNumberOfParams(callSite)];  for (int i=0; i < child.arguments.length; i++) {    child.arguments[i]=Call.getParam(callSite,i).copy();  }  if (Call.hasResult(callSite)) {    child.resultReg=Call.getResult(callSite).copyD2D().getRegister();    child.resultReg.setSpansBasicBlock();  }  child.cfg=new ControlFlowGraph(this.cfg.numberOfNodes());  child.prologue=new BasicBlock(PROLOGUE_BCI,child.inlineSequence,child.cfg);  child.prologue.setExceptionHandlers(ebag);  child.epilogue=new BasicBlock(EPILOGUE_BCI,child.inlineSequence,child.cfg);  child.epilogue.setExceptionHandlers(ebag);  child.cfg.addLastInCodeOrder(child.prologue);  child.cfg.addLastInCodeOrder(child.epilogue);  child.initLocalPool();  TypeReference[] params=child.method.getParameterTypes();  int numParams=params.length;  int argIdx=0;  int localNum=0;  if (!child.method.isStatic()) {    Operand receiver=child.arguments[argIdx];    argIdx++;    RegisterOperand local=null;    if (receiver.isRegister()) {      RegisterOperand objPtr=receiver.asRegister();      if (ClassLoaderProxy.includesType(child.method.getDeclaringClass().getTypeRef(),objPtr.getType()) != YES) {        objPtr.clearPreciseType();        objPtr.setDeclaredType();        objPtr.setType(child.method.getDeclaringClass().getTypeRef());      }      local=child.makeLocal(localNum,objPtr);      localNum++;      child.arguments[0]=local;    } else     if (receiver.isConstant()) {      local=child.makeLocal(localNum,receiver.getType());      localNum++;      local.setPreciseType();      RegisterOperand guard=child.makeNullCheckGuard(local.getRegister());      BC2IR.setGuardForRegOp(local,guard);      child.prologue.appendInstruction(Move.create(GUARD_MOVE,guard.copyRO(),new TrueGuardOperand()));    } else {      OptimizingCompilerException.UNREACHABLE("Unexpected receiver operand");    }    Instruction s=Move.create(REF_MOVE,local,receiver);    s.setSourcePosition(PROLOGUE_BCI,callSite.position());    child.prologue.appendInstruction(s);  }  for (int paramIdx=0; paramIdx < numParams; paramIdx++, argIdx++) {    TypeReference argType=params[paramIdx];    RegisterOperand formal;    Operand actual=child.arguments[argIdx];    if (actual.isRegister()) {      RegisterOperand rActual=actual.asRegister();      if (ClassLoaderProxy.includesType(argType,rActual.getType()) != YES) {        rActual.clearPreciseType();        rActual.setDeclaredType();        rActual.setType(argType);      }      formal=child.makeLocal(localNum,rActual);      localNum++;      child.arguments[argIdx]=formal;    } else {      formal=child.makeLocal(localNum,argType);      localNum++;    }    Instruction s=Move.create(IRTools.getMoveOp(argType),formal,actual);    s.setSourcePosition(PROLOGUE_BCI,callSite.position());    child.prologue.appendInstruction(s);    if (argType.isLongType() || argType.isDoubleType()) {      localNum++;    }  }  child.completePrologue(false);  child.completeEpilogue(false);  child.completeExceptionHandlers(false);  return child;}  }
class C{  protected void handleParseException(ParseException ex) throws MessagingException {  if (!isLeaveUndeliverable())   setMessageDeleted();  if (isMarkUndeliverableSeen())   setMessageSeen();  logStatusWarn("Message could not be delivered due to an error parsing a mail address.");  if (getLogger().isDebugEnabled()) {    StringBuilder messageBuffer=new StringBuilder("UNDELIVERABLE Message ID: ");    messageBuffer.append(getMessageIn().getMessageID());    getLogger().debug(messageBuffer.toString(),ex);  }}  }
class C{  public void splitRoot(LayoutContext c,Document doc){  CalculatedStyle style=c.getSharedContext().getStyle(doc.getDocumentElement());  IdentValue direction=style.getDirection();  Paragraph parent=new Paragraph(direction);  splitParagraphs(c,doc,parent);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  public ServiceStateException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public Entry(int hash,Object key,Object value,Entry next){  this.hash=hash;  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public synchronized OMGraphicList prepare(){  Projection p=getProjection();  TemporalOMGraphicList scenarioGraphics=null;  OMGraphicList list=getList();  if (p != null) {    boolean DEBUG=logger.isLoggable(Level.FINE);    if (list == null || !(list instanceof TemporalOMGraphicList)) {      scenarioGraphics=createData();      if (scenarioGraphics == null) {        return null;      }    } else {      scenarioGraphics=new TemporalOMGraphicList(list);    }    long currentTime=getTime();    if (DEBUG) {      logger.fine("EventLayer (" + getName() + ") snapshot at "+ currentTime);    }    scenarioGraphics.generate(p,currentTime);    if (DEBUG) {      logger.fine("EventLayer (" + getName() + ") setting list of "+ scenarioGraphics.size()+ " scenario graphics");    }  }  return scenarioGraphics;}  }
class C{  public void actionPerformed(ActionEvent e){  Object o=e.getSource();  if (o == exitJMenuItem) {    closeGUI();  }}  }
class C{  private ScreenOverlayType createBoxPlotErrorGraph(){  CountsGraph ep;  try {    ep=new BoxPlotErrorGraph(this.countComparisonFilter.getCountsForHour(null),this.iterationNumber,null,"error graph");    ep.createChart(0);  } catch (  IllegalArgumentException e) {    log.error("Could not create BoxPlot-ErrorGraph.",e);    return null;  }  String filename="errorGraphBoxPlot.png";  try {    writeChartToKmz(filename,ep.getChart());    return createOverlayBottomRight(filename,"Error Graph [Box-Plot]");  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  @Deprecated public Handle(int tag,String owner,String name,String desc){  this(tag,owner,name,desc,tag == Opcodes.H_INVOKEINTERFACE);}  }
class C{  public TFloatObjectHashMap(){  _hashingStrategy=this;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mItems=OutlineActivityData.get().items;  setListAdapter(new OutlineAdapter(getLayoutInflater(),mItems));  getListView().setSelection(OutlineActivityData.get().position);  getListView().setDividerHeight(0);  setResult(-1);}  }
class C{  public final void clearSelection(){  getSelection().clear();}  }
class C{  private List<CopycatServer> createServers(int nodes) throws Throwable {  List<CopycatServer> servers=new ArrayList<>();  for (int i=0; i < nodes; i++) {    members.add(nextMember(Member.Type.ACTIVE));  }  for (int i=0; i < nodes; i++) {    CopycatServer server=createServer(members.get(i));    server.bootstrap(members.stream().map(null).collect(Collectors.toList())).thenRun(null);    servers.add(server);  }  await(30000 * nodes,nodes);  return servers;}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    out.write(data);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public void destroyAds(){  adFetcher.destroyAllAds();}  }
class C{  protected JPAEntity(){  this(null);}  }
class C{  public AddOnChangesResult calculateInstallChanges(Set<AddOn> selectedAddOns){  return calculateChanges(selectedAddOns,false);}  }
class C{  public UmpleSwitch(){  if (modelPackage == null) {    modelPackage=UmplePackage.eINSTANCE;  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.PRECONDITION___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.PRECONDITION___CONSTRAINT_1:getConstraint_1().clear();getConstraint_1().addAll((Collection<? extends Constraint_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private Base64(){}  }
class C{  private boolean confirmPattern(int request,CharSequence message,CharSequence details){  if (!mLockPatternUtils.isLockPatternEnabled() || !mLockPatternUtils.savedPatternExists()) {    return false;  }  final Intent intent=new Intent();  intent.putExtra(ConfirmLockPattern.HEADER_TEXT,message);  intent.putExtra(ConfirmLockPattern.FOOTER_TEXT,details);  intent.setClassName("com.android.settings","com.android.settings.ConfirmLockPattern");  if (mFragment != null) {    mFragment.startActivityForResult(intent,request);  } else {    mActivity.startActivityForResult(intent,request);  }  return true;}  }
class C{  public void deployRar(String id,File planFile){  File tranql=new File(getInstalledContainer().getHome(),"repository/org/tranql/tranql-connector-ra");  File[] tranqlFiles=tranql.listFiles();  if (tranqlFiles == null || tranqlFiles.length == 0) {    throw new ContainerException("Directory " + tranql + " does not exist or is empty");  }  tranql=tranqlFiles[0];  tranqlFiles=tranql.listFiles();  if (tranqlFiles == null || tranqlFiles.length == 0) {    throw new ContainerException("Directory " + tranql + " does not exist or is empty");  }  JvmLauncher java=createAdminDeployerJava("undeploy");  java.addAppArguments(id);  java.execute();  java=createAdminDeployerJava("deploy");  java.addAppArgument(planFile);  java.addAppArgument(tranqlFiles[0]);  try {    int retval=java.execute();    if (retval != 0) {      throw new ContainerException("Failed to deploy [" + planFile + "]");    }  } catch (  JvmLauncherException e) {    throw new ContainerException("Failed to deploy [" + planFile + "]",e);  }}  }
class C{  public boolean readBoundary() throws MalformedStreamException {  byte[] marker=new byte[2];  boolean nextChunk=false;  head+=boundaryLength;  try {    marker[0]=readByte();    marker[1]=readByte();    if (arrayequals(marker,STREAM_TERMINATOR,2)) {      nextChunk=false;    } else     if (arrayequals(marker,FIELD_SEPARATOR,2)) {      nextChunk=true;    } else {      throw new MalformedStreamException("Unexpected characters follow a boundary");    }  } catch (  IOException e) {    throw new MalformedStreamException("Stream ended unexpectedly");  }  return nextChunk;}  }
class C{  public void rotateCounterClockwise(){  rotate(-90,true);}  }
class C{  public static void appendColumns(StringBuilder s,String[] columns){  int n=columns.length;  for (int i=0; i < n; i++) {    String column=columns[i];    if (column != null) {      if (i > 0) {        s.append(", ");      }      s.append(column);    }  }  s.append(' ');}  }
class C{  public boolean isExceptionML(){  return (flags & EXCEPTION_ML) != 0;}  }
class C{  public JCalendarItemRenderer(){  super();  if (noFocusBorder == null) {    noFocusBorder=new EmptyBorder(1,1,1,1);  }  initComponents();  m_jTime.setFont(new Font("SansSerif",Font.BOLD,11));  m_jTitle.setFont(new Font("SansSerif",Font.BOLD,11));  m_jDescription.setFont(new Font("SansSerif",Font.ITALIC,11));  setOpaque(true);  setBorder(noFocusBorder);}  }
class C{  @Override protected void draw(Canvas canvas){  if (hasAxis)   canvas.drawLine(chartView.getInnerChartLeft(),getAxisVerticalPosition(),getInnerChartRight(),getAxisVerticalPosition(),chartView.style.chartPaint);  if (labelsPositioning != LabelPosition.NONE) {    chartView.style.labelsPaint.setTextAlign(Align.CENTER);    final float labelsVerticalCoord=getLabelsVerticalPosition();    for (int i=0; i < nLabels; i++) {      float y=labelsVerticalCoord + (ChartView.LABELTEXTMAXLINE - labels.get(i).split("\n").length) * (chartView.style.labelsPaint.descent() - chartView.style.labelsPaint.ascent()) / 2;      for (      String line : labels.get(i).split("\n")) {        canvas.drawText(line,labelsPos.get(i),y,chartView.style.labelsPaint);        y+=chartView.style.labelsPaint.descent() - chartView.style.labelsPaint.ascent();      }    }  }}  }
class C{  private void processTSBKPage(TSBKMessage message){switch (message.getOpcode()) {case CALL_ALERT:    CallAlert ca=(CallAlert)message;  broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).from(ca.getSourceID()).to(ca.getTargetAddress()).build());break;case UNIT_TO_UNIT_ANSWER_REQUEST:UnitToUnitAnswerRequest utuar=(UnitToUnitAnswerRequest)message;if (mLastPageEventID == null || !mLastPageEventID.contentEquals(utuar.getTargetAddress())) {broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).details((utuar.isEmergency() ? "EMERGENCY" : "")).from(utuar.getSourceAddress()).to(utuar.getTargetAddress()).build());mLastPageEventID=utuar.getTargetAddress();}break;case SNDCP_DATA_PAGE_REQUEST:SNDCPDataPageRequest sdpr=(SNDCPDataPageRequest)message;if (mLastPageEventID == null || !mLastPageEventID.contentEquals(sdpr.getTargetAddress())) {broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).details("SNDCP DATA DAC: " + sdpr.getDataAccessControl() + " NSAPI:"+ sdpr.getNSAPI()).to(sdpr.getTargetAddress()).build());mLastPageEventID=sdpr.getTargetAddress();}break;case TELEPHONE_INTERCONNECT_ANSWER_REQUEST:TelephoneInterconnectAnswerRequest tiar=(TelephoneInterconnectAnswerRequest)message;if (mLastPageEventID == null || !mLastPageEventID.contentEquals(tiar.getTargetAddress())) {broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).details(("TELEPHONE INTERCONNECT")).from(tiar.getTelephoneNumber()).to(tiar.getTargetAddress()).build());mLastPageEventID=tiar.getTargetAddress();}break;default :break;}}  }
class C{  public int countNumRegElements(){  int count=0;  for (  RegSpillListElement elem : regSpillList) {    if (!elem.isSpill()) {      count++;    }  }  return count;}  }
class C{  public SQLTableModel(DataField[] df){  m_aRows=new ArrayList();  m_df=df;  m_classes=new Datas[df.length];  for (int i=0; i < df.length; i++) {switch (df[i].Type) {case Types.INTEGER:case Types.BIGINT:case Types.SMALLINT:case Types.TINYINT:      m_classes[i]=Datas.INT;    break;case Types.BIT:case Types.BOOLEAN:  m_classes[i]=Datas.BOOLEAN;break;case Types.DECIMAL:case Types.DOUBLE:case Types.FLOAT:case Types.REAL:case Types.NUMERIC:m_classes[i]=Datas.DOUBLE;break;case Types.CHAR:case Types.VARCHAR:case Types.LONGVARCHAR:case Types.CLOB:m_classes[i]=Datas.STRING;break;case Types.DATE:case Types.TIME:case Types.TIMESTAMP:m_classes[i]=Datas.TIMESTAMP;break;case Types.BINARY:case Types.VARBINARY:case Types.LONGVARBINARY:case Types.BLOB:m_classes[i]=Datas.BYTES;break;case Types.ARRAY:case Types.DATALINK:case Types.DISTINCT:case Types.JAVA_OBJECT:case Types.NULL:case Types.OTHER:case Types.REF:case Types.STRUCT:default :m_classes[i]=Datas.OBJECT;break;}}}  }
class C{  private Object readResolve(){  return object;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.880 -0500",hash_original_method="E70811FE9C0865EEAC6AAF5133BC7797",hash_generated_method="F1D1B2B444EC9B708082A424DEC06B8C") public static int HSBtoColor(float h,float s,float b){  h=MathUtils.constrain(h,0.0f,1.0f);  s=MathUtils.constrain(s,0.0f,1.0f);  b=MathUtils.constrain(b,0.0f,1.0f);  float red=0.0f;  float green=0.0f;  float blue=0.0f;  final float hf=(h - (int)h) * 6.0f;  final int ihf=(int)hf;  final float f=hf - ihf;  final float pv=b * (1.0f - s);  final float qv=b * (1.0f - s * f);  final float tv=b * (1.0f - s * (1.0f - f));switch (ihf) {case 0:    red=b;  green=tv;blue=pv;break;case 1:red=qv;green=b;blue=pv;break;case 2:red=pv;green=b;blue=tv;break;case 3:red=pv;green=qv;blue=b;break;case 4:red=tv;green=pv;blue=b;break;case 5:red=b;green=pv;blue=qv;break;}return 0xFF000000 | (((int)(red * 255.0f)) << 16) | (((int)(green * 255.0f)) << 8)| ((int)(blue * 255.0f));}  }
class C{  private void startUp() throws Exception {  assert dataNodes() > 0;  assert cacheMode() != null;  assert atomicityMode() != null;  for (int i=0; i < dataNodes(); i++)   G.start(configuration(i));}  }
class C{  public int next(){  if (_currentNode == _startNodeID || _currentNode == DTM.NULL) {    return NULL;  } else {    final int node=_currentNode;    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  private static long dosToJavaTime(long dtime){  @SuppressWarnings("deprecation") Date d=new Date((int)(((dtime >> 25) & 0x7f) + 80),(int)(((dtime >> 21) & 0x0f) - 1),(int)((dtime >> 16) & 0x1f),(int)((dtime >> 11) & 0x1f),(int)((dtime >> 5) & 0x3f),(int)((dtime << 1) & 0x3e));  return d.getTime();}  }
class C{  public void clear(){  toPropagate.clear();}  }
class C{  GridConnectionIdleClosedException(String msg){  super(msg);}  }
class C{  public void basicRun(String[] args) throws Exception {  System.getProperties().put("eclipse.startTime",Long.toString(System.currentTimeMillis()));  commands=args;  String[] passThruArgs=processCommandLine(args);  if (!debug)   debug=System.getProperty(PROP_DEBUG) != null;  setupVMProperties();  processConfiguration();  if (protectBase && (System.getProperty(PROP_SHARED_CONFIG_AREA) == null)) {    System.err.println("This application is configured to run in a cascaded mode only.");    System.setProperty(PROP_EXITCODE,"" + 14);    return;  }  getInstallLocation();  URL[] bootPath=getBootPath(bootLocation);  setupJNI(bootPath);  if (!checkVersion(System.getProperty("java.version"),System.getProperty(PROP_REQUIRED_JAVA_VERSION)))   return;  if (!checkConfigurationLocation(configurationLocation))   return;  setSecurityPolicy(bootPath);  handleSplash(bootPath);  beforeFwkInvocation();  invokeFramework(passThruArgs,bootPath);}  }
class C{  public void reset(){  length=0;  position=0;}  }
class C{  public static boolean isShowErrorDetails(){  return showErrorDetails;}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof PropertyHolder : "Assertion Error: Expected PropertyHolder to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[PropertyRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  PropertyBean pb=(PropertyBean)clazz.newInstance();  digester.push(pb);}  }
class C{  public MinLengthConstraint(final int minLength){  setMinLength(minLength);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void changeBufferData(BufferInfo bufferInfo,Buffer newData,int index,int size,boolean resizeBuffer){  newData.rewind();  GLES20.glBindBuffer(bufferInfo.target,bufferInfo.bufferHandle);  if (resizeBuffer) {    bufferInfo.buffer=newData;    GLES20.glBufferData(bufferInfo.target,size * bufferInfo.byteSize,newData,bufferInfo.usage);  } else {    GLES20.glBufferSubData(bufferInfo.target,index * bufferInfo.byteSize,size * bufferInfo.byteSize,newData);  }  GLES20.glBindBuffer(bufferInfo.target,0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void checkCast(final Type type){  if (!type.equals(OBJECT_TYPE)) {    typeInsn(Opcodes.CHECKCAST,type);  }}  }
class C{  @Override public void close() throws IOException {  try {    this.reader.close();  } catch (  IOException oldError) {    throw wrapIOException(oldError);  }}  }
class C{  public void reseed(byte[] additionalInput){  byte[] entropy=_entropySource.getEntropy();  byte[] seedMaterial=Arrays.concatenate(ONE,_V,entropy,additionalInput);  byte[] seed=Utils.hash_df(_digest,seedMaterial,_seedLength);  _V=seed;  byte[] subV=new byte[_V.length + 1];  subV[0]=0x00;  System.arraycopy(_V,0,subV,1,_V.length);  _C=Utils.hash_df(_digest,subV,_seedLength);  _reseedCounter=1;}  }
class C{  public void duplicate() throws IOException {  writeCode(DUPLICATE);}  }
class C{  @Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value={"UW_UNCOND_WAIT","WA_NOT_IN_LOOP"},justification="The unconditional wait outside of a loop is used to allow the hardware to react to a reset request.") public void connectPort(AbstractPortController p){  try {    if (p instanceof XBeeAdapter) {      XBeeAdapter xbp=(XBeeAdapter)p;      xbee=new XBeeDevice(xbp);      xbee.open();      xbee.reset();      try {synchronized (this) {          wait(2000);        }      } catch (      java.lang.InterruptedException e) {      }      xbee.addPacketListener(this);      xbee.addModemStatusListener(this);      xbee.addDataListener(this);    } else {      throw new java.lang.IllegalArgumentException("Wrong adapter type specified when connecting to the port.");    }  } catch (  TimeoutException te) {    log.error("Timeout durring communication with Local XBee on communication start up. Error was {} cause {} ",te,te.getCause());  }catch (  XBeeException xbe) {    log.error("Exception durring XBee communication start up. Error was {} cause {} ",xbe,xbe.getCause());  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("GenerateModel[").append("]");  return sb.toString();}  }
class C{  public XMLValidationException(int errorType,String systemID,int lineNr,String elementName,String attributeName,String attributeValue,String msg){  super(systemID,lineNr,null,msg + ((elementName == null) ? "" : (", element=" + elementName)) + ((attributeName == null) ? "" : (", attribute=" + attributeName))+ ((attributeValue == null) ? "" : (", value='" + attributeValue + "'")),false);  this.elementName=elementName;  this.attributeName=attributeName;  this.attributeValue=attributeValue;}  }
class C{  @Deprecated public ContentItem reply(boolean reply){  this.reply=reply;  return this;}  }
class C{  public RemoteFileChannel(String hostname,String name) throws IOException {  this.hostname=hostname;  remoteFilename=name;  this.readonly=true;  this.uploadId=-1;  connect();}  }
class C{  public static void main(String[] argv){  runClusterer(new Cobweb(),argv);}  }
class C{  public void clear(int capacity){  _data=new int[capacity];  _pos=0;}  }
class C{  @Override public void reset() throws IOException {  m_structure=null;  setRetrieval(NONE);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int frameSize(){switch (layerDescription) {case 3:    return (12 * getBitRate() / getSampleRate() + (paddingBit ? 1 : 0)) * 4;case 2:case 1:  if (audioVersionId == 3) {    return 144 * getBitRate() / getSampleRate() + (paddingBit ? 1 : 0);  } else {    return 72 * getBitRate() / getSampleRate() + (paddingBit ? 1 : 0);  }default :return -1;}}  }
class C{  public static final void showGUIMessage(final String user_message,final BufferedImage image,final String title){  if (image == null) {    return;  }  final ImagePanel display=new ImagePanel(image);  display.setLayout(new BorderLayout());  if (user_message != null) {    display.add(new JLabel(user_message),BorderLayout.SOUTH);  }  final int width=image.getWidth();  final int height=image.getHeight();  display.setSize(new Dimension(width + 10,height + 10));  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);}  }
class C{  public void apply(List<Record> records) throws YuGongException {  if (YuGongUtils.isEmpty(records)) {    return;  }  doApply(records);}  }
class C{  public void onDrawFrame(GL10 gl){  gl.glClear(GL10.GL_COLOR_BUFFER_BIT);  gl.glMatrixMode(GL10.GL_MODELVIEW);  gl.glLoadIdentity();  if (showCubeInsideOut) {    float dist=3;    gl.glTranslatef(0,0,-dist);    if (orientationProvider != null) {      Quaternion q=orientationProvider.getQuaternion();      gl.glRotatef((float)(2.0f * Math.acos(q.getW()) * 180.0f / Math.PI),q.getX(),q.getY(),q.getZ());    }    gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);    gl.glEnableClientState(GL10.GL_COLOR_ARRAY);    mCube.draw(gl);  } else {    if (orientationProvider != null) {      Quaternion q=orientationProvider.getQuaternion();      gl.glRotatef((float)(2.0f * Math.acos(q.getW()) * 180.0f / Math.PI),q.getX(),q.getY(),q.getZ());    }    float dist=3;    drawTranslatedCube(gl,0,0,-dist);    drawTranslatedCube(gl,0,0,dist);    drawTranslatedCube(gl,0,-dist,0);    drawTranslatedCube(gl,0,dist,0);    drawTranslatedCube(gl,-dist,0,0);    drawTranslatedCube(gl,dist,0,0);  }  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);  gl.glEnableClientState(GL10.GL_COLOR_ARRAY);  mCube.draw(gl);}  }
class C{  public static boolean isPublic(String id){  return (Character.isUpperCase(id.charAt(1)));}  }
class C{  private void saveFloatingPointState(Instruction inst){  if (SSE2_FULL) {    GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();    for (int i=0; i < 8; i++) {      inst.insertBefore(MIR_Move.create(IA32_MOVQ,new StackLocationOperand(true,-fsaveLocation + (i * BYTES_IN_DOUBLE),BYTES_IN_DOUBLE),new RegisterOperand(phys.getFPR(i),TypeReference.Double)));    }  } else {    Operand M=new StackLocationOperand(true,-fsaveLocation,4);    inst.insertBefore(MIR_FSave.create(IA32_FNSAVE,M));  }}  }
class C{  public String nextToken(String nontokenDelims,String tokenDelims){  setDelims(nontokenDelims,tokenDelims);  return nextToken();}  }
class C{  protected void initInfo(){  initInfo(0,"",true);}  }
class C{  private void enqueue(Node<E> node){  last=last.next=node;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public QueryEntry(final String query,final int timezoneOffset,final long message_period,final SourceType source_type,final boolean byUserQuery){  this.query=query;  this.query_length=query.length();  this.timezoneOffset=timezoneOffset;  this.source_type=source_type;  this.retrieval_count=0;  this.message_period=0;  this.messages_per_day=0;  this.score_retrieval=0;  this.score_suggest=0;  update(message_period,byUserQuery);  this.query_first=retrieval_last;}  }
class C{  public Map<URI,List<IAtomicChange>> organize(Collection<? extends IChange> changes){  final List<IAtomicChange> flatChanges=flatten(changes);  final Map<URI,List<IAtomicChange>> result=new HashMap<>();  for (  IAtomicChange currChange : flatChanges) {    final URI currURI=currChange.getURI().trimFragment();    List<IAtomicChange> currL=result.get(currURI);    if (currL == null) {      currL=new ArrayList<>();      result.put(currURI,currL);    }    currL.add(currChange);  }  for (  List<IAtomicChange> currL : result.values())   Collections.sort(currL,Collections.reverseOrder());  return result;}  }
class C{  public static boolean isIpAddress(String ipAddress){  Matcher m1=validIPV4Pattern.matcher(ipAddress);  if (m1.matches()) {    return true;  }  Matcher m2=validIPV6Pattern.matcher(ipAddress);  return m2.matches();}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this);}  }
class C{  protected void createFullGeometry(DrawContext dc,Terrain terrain,ShapeData shapeData,boolean skipOuterBoundary){  this.createVertices(terrain,shapeData,skipOuterBoundary);  this.createGeometry(dc,shapeData);  if (this.mustApplyLighting(dc,null))   this.createNormals(shapeData); else   shapeData.normalBuffer=null;}  }
class C{  public float parseFloat(){  int mant=0;  int mantDig=0;  boolean mantPos=true;  boolean mantRead=false;  int exp=0;  int expDig=0;  int expAdj=0;  boolean expPos=true;switch (current) {case '-':    mantPos=false;case '+':  current=read();}m1: switch (current) {default :return Float.NaN;case '.':break;case '0':mantRead=true;l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;case '.':case 'e':case 'E':break m1;default :return 0.0f;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':mantRead=true;l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');} else {expAdj++;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}if (current == '.') {current=read();m2: switch (current) {default :case 'e':case 'E':if (!mantRead) {reportUnexpectedCharacterError(current);return 0.0f;}break;case '0':if (mantDig == 0) {l: for (; ; ) {current=read();expAdj--;switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :if (!mantRead) {return 0.0f;}break m2;case '0':}}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');expAdj--;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}}switch (current) {case 'e':case 'E':current=read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '-':expPos=false;case '+':current=read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}en: switch (current) {case '0':l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :break en;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (expDig < 3) {expDig++;exp=exp * 10 + (current - '0');}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}default :}if (!expPos) {exp=-exp;}exp+=expAdj;if (!mantPos) {mant=-mant;}return buildFloat(mant,exp);}  }
class C{  private void addConversations(){  TPP_Phase myphase=AWAITING;  mainNPC.add(ConversationStates.ATTENDING,Arrays.asList("rats","rats!"),new TPPQuestInPhaseCondition(myphase),ConversationStates.ATTENDING,"Well, we tried to clean up the city. " + "You can get a #reward for your help now, ask about #details " + "if you want to know more.",null);  mainNPC.add(ConversationStates.ATTENDING,"details",new TPPQuestInPhaseCondition(myphase),ConversationStates.ATTENDING,null,new DetailsKillingsAction());  mainNPC.add(ConversationStates.ATTENDING,"reward",new TPPQuestInPhaseCondition(myphase),ConversationStates.ATTENDING,null,new RewardPlayerAction());}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public static SequencesReader createMemorySequencesReader(final File dir,final boolean loadNames,LongRange region) throws IOException {  return createMemorySequencesReader(dir,loadNames,false,region);}  }
class C{  public CloseSecureChannelResponse CloseSecureChannel(CloseSecureChannelRequest req) throws ServiceFaultException, ServiceResultException {  return (CloseSecureChannelResponse)channel.serviceRequest(req);}  }
class C{  public SafeCloseDatagramSocket(int port,InetAddress laddr) throws SocketException {  super(port,laddr);}  }
class C{  static void readAndHandleBinderCallViolations(Parcel p){  StringWriter sw=new StringWriter();  new LogStackTrace().printStackTrace(new PrintWriter(sw));  String ourStack=sw.toString();  int policyMask=getThreadPolicyMask();  boolean currentlyGathering=(policyMask & PENALTY_GATHER) != 0;  int numViolations=p.readInt();  for (int i=0; i < numViolations; ++i) {    if (LOG_V)     Log.d(TAG,"strict mode violation stacks read from binder call.  i=" + i);    ViolationInfo info=new ViolationInfo(p,!currentlyGathering);    info.crashInfo.stackTrace+="# via Binder call with stack:\n" + ourStack;    BlockGuard.Policy policy=BlockGuard.getThreadPolicy();    if (policy instanceof AndroidBlockGuardPolicy) {      ((AndroidBlockGuardPolicy)policy).handleViolationWithTimingAttempt(info);    }  }}  }
class C{  public void close(){  try {    writer.close();    JNAOpus.INSTANCE.opus_encoder_destroy(this.opusEncoder);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public String toString(){  return " cols=" + imgInfo.cols + " bpc="+ imgInfo.bitDepth+ " size="+ scanline.length;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.597 -0500",hash_original_method="96612C398F49F406D66C3575CAB886FB",hash_generated_method="3009211BA40AE2579361B1980C938E79") private static boolean isLocalEmergencyNumberInternal(String number,Context context,boolean useExactMatch){  String countryIso;  CountryDetector detector=(CountryDetector)context.getSystemService(Context.COUNTRY_DETECTOR);  if (detector != null) {    countryIso=detector.detectCountry().getCountryIso();  } else {    Locale locale=context.getResources().getConfiguration().locale;    countryIso=locale.getCountry();    Log.w(LOG_TAG,"No CountryDetector; falling back to countryIso based on locale: " + countryIso);  }  return isEmergencyNumberInternal(number,countryIso,useExactMatch);}  }
class C{  private boolean acquireReadLockPermission(DLockRequestMessage request){  boolean permitLockRequest=false;  final RemoteThread rThread=request.getRemoteThread();  Assert.assertTrue(rThread != null);synchronized (suspendLock) {    checkDestroyed();    if (!dm.isCurrentMember(request.getSender())) {      logger.info(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.DLockGrantor_IGNORING_LOCK_REQUEST_FROM_NONMEMBER_0,request));      return false;    }    Integer integer=(Integer)readLockCountMap.get(rThread);    int readLockCount=integer == null ? 0 : integer.intValue();    boolean threadHoldsLock=readLockCount > 0 || isLockingSuspendedBy(rThread);    final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);    if (!threadHoldsLock && (isLockingSuspended() || writeLockWaiters > 0)) {      suspendQueue.addLast(request);      this.thread.checkTimeToWait(calcWaitMillisFromNow(request),false);      if (isDebugEnabled_DLS) {        logger.trace(LogMarker.DLS,"[DLockGrantor.acquireReadLockPermission] added {} to end of suspendQueue.",request);      }    } else {      readLockCount++;      readLockCountMap.put(rThread,Integer.valueOf(readLockCount));      totalReadLockCount++;      permitLockRequest=true;      if (isDebugEnabled_DLS) {        logger.trace(LogMarker.DLS,"[DLockGrantor.acquireReadLockPermission] permitted {}",request);      }    }    if (isDebugEnabled_DLS) {      logger.trace(LogMarker.DLS,"[DLockGrantor.acquireReadLockPermission] new status  threadHoldsLock = {} permitLockRequest = {}{}",threadHoldsLock,permitLockRequest,displayStatus(rThread,null));    }    checkTotalReadLockCount();  }  return permitLockRequest;}  }
class C{  public static void writeVarLong(long n,ByteBuffer buff){  while ((n & 0xFFFF_FFFF_FFFF_FF80l) != 0) {    byte data=(byte)(n | 0x80);    buff.put(data);    n>>>=7;  }  buff.put((byte)n);}  }
class C{  public List<Exception> validateAnnotatedField(FrameworkField field){  return NO_VALIDATION_ERRORS;}  }
class C{  protected static RootGraphicsNode extractLocalPatternContent(Element e,BridgeContext ctx){  GVTBuilder builder=ctx.getGVTBuilder();  RootGraphicsNode content=null;  for (Node n=e.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    GraphicsNode gn=builder.build(ctx,(Element)n);    if (gn != null) {      if (content == null) {        content=new RootGraphicsNode();      }      content.getChildren().add(gn);    }  }  return content;}  }
class C{  public RelNode convertValues(SqlCall values,RelDataType targetRowType){  final SqlValidatorScope scope=validator.getOverScope(values);  assert scope != null;  final Blackboard bb=createBlackboard(scope,null,false);  convertValuesImpl(bb,values,targetRowType);  return bb.root;}  }
class C{  public MWFActivity(MWFProcess process,int AD_WF_Node_ID){  super(process.getCtx(),0,process.get_TrxName());  setAD_WF_Process_ID(process.getAD_WF_Process_ID());  setPriority(process.getPriority());  setAD_Table_ID(process.getAD_Table_ID());  setRecord_ID(process.getRecord_ID());  setAD_Client_ID(process.getAD_Client_ID());  setAD_Org_ID(process.getAD_Org_ID());  super.setWFState(WFSTATE_NotStarted);  m_state=new StateEngine(getWFState());  setProcessed(false);  setAD_Workflow_ID(process.getAD_Workflow_ID());  setAD_WF_Node_ID(AD_WF_Node_ID);  MWFNode node=MWFNode.get(getCtx(),AD_WF_Node_ID);  int priority=node.getPriority();  if (priority != 0 && priority != getPriority())   setPriority(priority);  long limitMS=node.getLimitMS();  if (limitMS != 0)   setEndWaitTime(new Timestamp(limitMS + System.currentTimeMillis()));  setResponsible(process);  save();  m_audit=new MWFEventAudit(this);  m_audit.saveEx();  m_process=process;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  if (Consts.DEBUG) {    Log.i(TAG,"signature: " + signature);  }  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public void stop() throws PayloadException, NetworkException, ContactManagerException {  if (sLogger.isActivated()) {    sLogger.info("Stop the IMS module");  }  mCallManager.stop();  mCnxManager.terminate();  mServiceDispatcher.terminate();  mExtensionManager.stop();  if (sLogger.isActivated()) {    sLogger.info("IMS module has been stopped");  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.TYPE_VARIABLE_MAPPING;}  }
class C{  public Assignment(Assignment ass,String var,boolean val){  this();  addAssignment(ass);  addPair(var,val);}  }
class C{  public static int stringToBooleanValueEL(String str){  if (str.length() < 2)   return -1;switch (str.charAt(0)) {case 't':case 'T':    return str.equalsIgnoreCase("true") ? 1 : -1;case 'f':case 'F':  return str.equalsIgnoreCase("false") ? 0 : -1;case 'y':case 'Y':return str.equalsIgnoreCase("yes") ? 1 : -1;case 'n':case 'N':return str.equalsIgnoreCase("no") ? 0 : -1;}return -1;}  }
class C{  public static void drawString(JComponent c,Graphics g,String text,int x,int y){  if (drawStringMethod != null) {    try {      drawStringMethod.invoke(null,c,g,text,Integer.valueOf(x),Integer.valueOf(y));      return;    } catch (    IllegalArgumentException e) {    }catch (    IllegalAccessException e) {    }catch (    InvocationTargetException e) {    }  }  Graphics2D g2=(Graphics2D)g;  Map<?,?> oldRenderingHints=installDesktopHints(g2);  BasicGraphicsUtils.drawStringUnderlineCharAt(g,text,-1,x,y);  if (oldRenderingHints != null) {    g2.addRenderingHints(oldRenderingHints);  }}  }
class C{  protected TemplateLiteralImpl(){  super();}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  Node<E> h=null, t=null;  Object item;  while ((item=s.readObject()) != null) {    @SuppressWarnings("unchecked") Node<E> newNode=new Node<E>((E)item);    if (h == null)     h=t=newNode; else {      t.lazySetNext(newNode);      t=newNode;    }  }  if (h == null)   h=t=new Node<E>(null);  head=h;  tail=t;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String inputHeaderAlpha=null;  String outputHeader=null;  boolean alphaChannelSpecified=true;  boolean performContrastEnhancement=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderRed=args[0];  inputHeaderGreen=args[1];  inputHeaderBlue=args[2];  inputHeaderAlpha=args[3];  if (inputHeaderAlpha.toLowerCase().contains("not specified")) {    alphaChannelSpecified=false;  }  outputHeader=args[4];  String doEnhancement=args[5];  if (doEnhancement.toLowerCase().contains("not specified") || doEnhancement.toLowerCase().contains("f")) {    performContrastEnhancement=false;  }  if ((inputHeaderRed == null) || (inputHeaderGreen == null) || (inputHeaderBlue == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal, alphaVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    int r, g, b, a;    double z;    int progress=0;    int oldProgress=-1;    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    if ((green.getNumberRows() != rows) || (green.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);    if ((blue.getNumberRows() != rows) || (blue.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    double noData=red.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeaderRed,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("rgb.pal");    outputFile.setDataScale(WhiteboxRaster.DataScale.RGB);    redMin=red.getDisplayMinimum();    greenMin=green.getDisplayMinimum();    blueMin=blue.getDisplayMinimum();    redRange=red.getDisplayMaximum() - redMin;    greenRange=green.getDisplayMaximum() - greenMin;    blueRange=blue.getDisplayMaximum() - blueMin;    if (!alphaChannelSpecified) {      double[] dataRed, dataGreen, dataBlue;      oldProgress=-1;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      WhiteboxRaster alpha=new WhiteboxRaster(inputHeaderAlpha,"r");      if ((alpha.getNumberRows() != rows) || (alpha.getNumberColumns() != cols)) {        showFeedback("All input images must have the same dimensions.");        return;      }      double[] dataRed, dataGreen, dataBlue, dataAlpha;      double alphaMin, alphaRange;      alphaMin=alpha.getDisplayMinimum();      alphaRange=alpha.getDisplayMaximum() - alphaMin;      oldProgress=-1;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        dataAlpha=alpha.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          alphaVal=dataAlpha[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            a=(int)((alphaVal - alphaMin) / alphaRange * 255);            if (a < 0) {              a=0;            }            if (a > 255) {              a=255;            }            z=(a << 24) | (b << 16) | (g << 8)| r;            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      alpha.close();    }    red.close();    green.close();    blue.close();    if (performContrastEnhancement) {      outputFile.flush();      int rOut, gOut, bOut;      int E=100;      double[] data;      long numPixels=0;      int r_l=Integer.MAX_VALUE;      int r_h=Integer.MIN_VALUE;      long r_e=0;      long rSqrTotal=0;      int g_l=Integer.MAX_VALUE;      int g_h=Integer.MIN_VALUE;      long g_e=0;      long gSqrTotal=0;      int b_l=Integer.MAX_VALUE;      int b_h=Integer.MIN_VALUE;      long b_e=0;      long bSqrTotal=0;      int L=0;      int H=255;      oldProgress=-1;      for (row=0; row < rows; row++) {        data=outputFile.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            numPixels++;            r=((int)z & 0xFF);            g=(((int)z >> 8) & 0xFF);            b=(((int)z >> 16) & 0xFF);            if (r < r_l) {              r_l=r;            }            if (r > r_h) {              r_h=r;            }            r_e+=r;            rSqrTotal+=r * r;            if (g < g_l) {              g_l=g;            }            if (g > g_h) {              g_h=g;            }            g_e+=g;            gSqrTotal+=g * g;            if (b < b_l) {              b_l=b;            }            if (b > b_h) {              b_h=b;            }            b_e+=b;            bSqrTotal+=b * b;          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Performing Enhancement (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      r_e=r_e / numPixels;      g_e=g_e / numPixels;      b_e=b_e / numPixels;      double r_s=(double)rSqrTotal / numPixels;      double g_s=(double)gSqrTotal / numPixels;      double b_s=(double)bSqrTotal / numPixels;      double r_b=(r_h * r_h * (E - L) - r_s * (H - L) + r_l * r_l * (H - E)) / (2 * (r_h * (E - L) - r_e * (H - L) + r_l * (H - E)));      double r_a=(H - L) / ((r_h - r_l) * (r_h + r_l - 2 * r_b));      double r_c=L - r_a * ((r_l - r_b) * (r_l - r_b));      double g_b=(g_h * g_h * (E - L) - g_s * (H - L) + g_l * g_l * (H - E)) / (2 * (g_h * (E - L) - g_e * (H - L) + g_l * (H - E)));      double g_a=(H - L) / ((g_h - g_l) * (g_h + g_l - 2 * g_b));      double g_c=L - g_a * ((g_l - g_b) * (g_l - g_b));      double b_b=(b_h * b_h * (E - L) - b_s * (H - L) + b_l * b_l * (H - E)) / (2 * (b_h * (E - L) - b_e * (H - L) + b_l * (H - E)));      double b_a=(H - L) / ((b_h - b_l) * (b_h + b_l - 2 * b_b));      double b_c=L - b_a * ((b_l - b_b) * (b_l - b_b));      oldProgress=-1;      for (row=0; row < rows; row++) {        data=outputFile.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            numPixels++;            r=((int)z & 0xFF);            g=(((int)z >> 8) & 0xFF);            b=(((int)z >> 16) & 0xFF);            a=(((int)z >> 24) & 0xFF);            rOut=(int)(r_a * ((r - r_b) * (r - r_b)) + r_c);            gOut=(int)(g_a * ((g - g_b) * (g - g_b)) + g_c);            bOut=(int)(b_a * ((b - b_b) * (b - b_b)) + b_c);            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            z=(double)((a << 24) | (bOut << 16) | (gOut << 8)| rOut);            outputFile.setValue(row,col,z);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Performing Enhancement (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void test_setCertificateEntryLjava_lang_StringLjava_security_cert_Certificate() throws Exception {  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert=(X509Certificate)cf.generateCertificate(certArray);  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  try {    keyTest.setCertificateEntry("alias",cert);    fail();  } catch (  KeyStoreException expected) {  }  keyTest.load(null,null);  PublicKey pub=cert.getPublicKey();  keyTest.setCertificateEntry("alias1",cert);  assertTrue("the entry specified by the alias alias1 is not a certificate",keyTest.isCertificateEntry("alias1"));  Certificate resultCert=keyTest.getCertificate("alias1");  assertEquals("the public key of the certificate from getCertificate() " + "did not equal the original certificate",pub,resultCert.getPublicKey());}  }
class C{  public void insertTests(List<TestCase> tests){  for (  TestCase test : tests)   insertTest(test);}  }
class C{  public ModifierQueryNode(QueryNode query,Modifier mod){  if (query == null) {    throw new QueryNodeError(new MessageImpl(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED,"query","null"));  }  allocate();  setLeaf(false);  add(query);  this.modifier=mod;}  }
class C{  public static String stringArrayToString(String[] A){  if (A.length == 0) {    return A[0];  }  String result=A[0];  for (int i=1; i < A.length; i++) {    result=result + "\n" + A[i];  }  return result;}  }
class C{  public String mapInvokeDynamicMethodName(String name,String desc){  return name;}  }
class C{  public void dumpCompressedValues(DataOutputStream dos,long values) throws IOException {  final long whichLong=values / mPerLong + 1;  for (long i=0; i < whichLong; i++) {    dos.writeLong(mData.get(i));  }}  }
class C{  private void testTokenMayBeDrawnLocked(){  final ArrayList<AppWindowToken> appTokens=mService.mAnimatingAppTokens;  final int NT=appTokens.size();  for (int i=0; i < NT; i++) {    AppWindowToken wtoken=appTokens.get(i);    AppWindowAnimator appAnimator=wtoken.mAppAnimator;    final boolean allDrawn=wtoken.allDrawn;    if (allDrawn != appAnimator.allDrawn) {      appAnimator.allDrawn=allDrawn;      if (allDrawn) {        if (appAnimator.freezingScreen) {          appAnimator.showAllWindowsLocked();          mService.unsetAppFreezingScreenLocked(wtoken,false,true);          if (WindowManagerService.DEBUG_ORIENTATION)           Slog.i(TAG,"Setting mOrientationChangeComplete=true because wtoken " + wtoken + " numInteresting="+ wtoken.numInterestingWindows+ " numDrawn="+ wtoken.numDrawnWindows);          setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,"testTokenMayBeDrawnLocked: freezingScreen");        } else {          setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM,"testTokenMayBeDrawnLocked");          if (!mService.mOpeningApps.contains(wtoken)) {            mAnimating|=appAnimator.showAllWindowsLocked();          }        }      }    }  }}  }
class C{  public boolean isSetParamCode(){  return this.paramCode != null;}  }
class C{  public void testOldClass(){  final Collection<PyPresenterTestMemberEntry> members=launchAndGetMembers("OldClass");  final Matcher<Iterable<? extends PyPresenterTestMemberEntry>> matcher=Matchers.containsInAnyOrder(new PyPresenterTestMemberEntry("foo(self)",true,false,true));  compareMembers(members,matcher);}  }
class C{  public static boolean f2b(float inp){  return inp > 0 ? true : false;}  }
class C{  public static String stripNonDigits(String str){  StringBuffer result=new StringBuffer(str.length());  for (  char candidate : str.toCharArray()) {    if (Character.isDigit(candidate)) {      result.append(candidate);    }  }  return result.toString();}  }
class C{  public static Border createHorizonalImageBorder(Image left,Image right,Image center){  Border b=new Border();  b.type=TYPE_IMAGE_HORIZONTAL;  b.images=new Image[]{left,right,center};  return b;}  }
class C{  public boolean removeChildEdge(Edge e){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public String minRangeTipText(){  return "The lower boundary for the range x is drawn from randomly.";}  }
class C{  public static void initOutputDirLogging(final String outputDirectory,final List<LoggingEvent> logEvents) throws IOException {  Logger root=Logger.getRootLogger();  FileAppender appender=new FileAppender(Controler.DEFAULTLOG4JLAYOUT,outputDirectory + System.getProperty("file.separator") + LOGFILE);  appender.setName(LOGFILE);  root.addAppender(appender);  FileAppender warnErrorAppender=new FileAppender(Controler.DEFAULTLOG4JLAYOUT,outputDirectory + System.getProperty("file.separator") + WARNLOGFILE);  warnErrorAppender.setName(WARNLOGFILE);  warnErrorAppender.setThreshold(Level.WARN);  root.addAppender(warnErrorAppender);  if (logEvents != null) {    for (    LoggingEvent e : logEvents) {      appender.append(e);      if (e.getLevel().isGreaterOrEqual(Level.WARN)) {        warnErrorAppender.append(e);      }    }  }}  }
class C{  protected boolean isBillingEnabled(){  return false;}  }
class C{  public URIPropertyMatcherBuilder(IssueMatcher issueMatcher,String propertyName,Function<Issue,URI> getActualValue){  super(issueMatcher,propertyName);  this.getActualValue=Objects.requireNonNull(getActualValue);}  }
class C{  public void changeConnectionStatus(ConnectionStatus connectionStatus){  status=connectionStatus;  notifyListeners((new PropertyChangeEvent(this,Constants.ConnectionStatusProperty,null,null)));}  }
class C{  public void processFEAdaptMetrics(Double percentBusy,Long iops,StorageHADomain haDomain,String statisticTime){  processFEAdaptMetrics(percentBusy,iops,haDomain,statisticTime,true);}  }
class C{  public ConstantPopulationModel(String name,Parameter N0Parameter,Type units){  super(name);  constantPopulation=new ConstantPopulation(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  setUnits(units);}  }
class C{  @SuppressWarnings("unchecked") @Override public synchronized void doPut(BaseSolrResource endpoint,Representation entity,Object json){  if (json instanceof Map) {    String resourceId=ManagedEndpoint.resolveResourceId(endpoint.getRequest());    Map<String,String> info=(Map<String,String>)json;    info.put("resourceId",resourceId);    storeManagedData(applyUpdatesToManagedData(json));  } else {    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,"Expected Map to create a new ManagedResource but received a " + json.getClass().getName());  }}  }
class C{  private int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  for (int i=0; i < blockSize; i++) {    cbcV[i]^=in[inOff + i];  }  int length=cipher.processBlock(cbcV,0,out,outOff);  System.arraycopy(out,outOff,cbcV,0,cbcV.length);  return length;}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);}  }
class C{  protected void sequence_DecimalEscapeSequence(ISerializationContext context,DecimalEscapeSequence semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.DECIMAL_ESCAPE_SEQUENCE__SEQUENCE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.DECIMAL_ESCAPE_SEQUENCE__SEQUENCE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getDecimalEscapeSequenceAccess().getSequenceDECIMAL_ESCAPETerminalRuleCall_0(),semanticObject.getSequence());  feeder.finish();}  }
class C{  public static boolean start(RootDoc root) throws Exception {  ClassDoc[] classes=root.classes();  for (int i=0; i < classes.length; i++) {    checkHolders(classes[i].fields());    checkHolders(classes[i].constructors());    checkHolders(classes[i].methods());    checkHolders(classes[i].innerClasses());  }  return true;}  }
class C{  public static boolean isSameLength(final long[] array1,final long[] array2){  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {    return false;  }  return true;}  }
class C{  public List<ActionHistory> searchActionHistoryByDossierId(long groupId,long dossierId){  return _searchActionHistoryByDossierId(groupId,dossierId);}  }
class C{  public InspectBrush(){  super("worldedit.tool.inspect");}  }
class C{  public Properties asProperties(){  Properties properties=new Properties();  for (  Setting entry : settings) {    properties.setProperty(entry.getKey(),entry.getValue());  }  return properties;}  }
class C{  @Action(value="/receipts/collectionsWorkflow-listWorkflow") public String listWorkflow(){  if (wfAction != null && wfAction.equals(CollectionConstants.WF_ACTION_APPROVE))   fetchReceipts(CollectionConstants.WF_ACTION_APPROVE); else   fetchReceipts(CollectionConstants.WF_ACTION_SUBMIT);  return INDEX;}  }
class C{  public static String dateToString(Date date){  SimpleDateFormat formatter=new SimpleDateFormat(ISO_DATE_FORMAT);  formatter.setTimeZone(TimeZone.getTimeZone("GMT"));  return formatter.format(date);}  }
class C{  private static void add_group_to_tenants(String groupName,String description,Collection<String> tenants) throws Exception {  CasIdmClient client=new CasIdmClient(HOSTNAME);  if (tenants.isEmpty()) {    tenants=client.getAllTenants();  }  GroupDetail detail=new GroupDetail(description);  for (  String tenantName : tenants) {    try {      client.addGroup(tenantName,groupName,detail);    } catch (    InvalidPrincipalException e) {    }  }}  }
class C{  public boolean isCaseSensitive(){  return fCaseSensitive;}  }
class C{  public static RosterEntrySelection createRosterEntrySelection(ArrayList<RosterEntry> rosterEntries){  ArrayList<String> Ids=new ArrayList<>(rosterEntries.size());  rosterEntries.stream().forEach(null);  return new RosterEntrySelection(Ids);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public DefaultMapEntry(final KeyValue pair){  super(pair.getKey(),pair.getValue());}  }
class C{  public Vector3i add(Vector3i v,Vector3i dest){  dest.x=x + v.x;  dest.y=y + v.y;  dest.z=z + v.z;  return dest;}  }
class C{  @Override public Iterator<Database> iterator(){  return m_databases.iterator();}  }
class C{  public static PutRepositoryRequest putRepositoryRequest(String name){  return new PutRepositoryRequest(name);}  }
class C{  boolean checkClosed(){  if (conn == null) {    throw DbException.get(ErrorCode.OBJECT_CLOSED);  }  conn.checkClosed();  SessionInterface s=conn.getSession();  if (s != session) {    session=s;    trace=session.getTrace();    return true;  }  return false;}  }
class C{  public Checkpoint(Lop input,DataType dt,ValueType vt,String level) throws LopsException {  super(Lop.Type.Checkpoint,dt,vt);  this.addInput(input);  input.addOutput(this);  _storageLevel=StorageLevel.fromString(level);  boolean breaksAlignment=false;  boolean aligner=false;  boolean definesMRJob=false;  lps.addCompatibility(JobType.INVALID);  lps.setProperties(inputs,ExecType.SPARK,ExecLocation.ControlProgram,breaksAlignment,aligner,definesMRJob);}  }
class C{  private void drawSpot(Graphics g,int c,int r,char m){  if (m == TicTacToeBoard.EMPTY) {    g.setColor(Color.lightGray);    g.fillRect(30 + CELLSIZE * c,30 + CELLSIZE * r,40,40);    return;  }  g.setColor(Color.black);  g.drawString("" + m,40 + CELLSIZE * c,60 + CELLSIZE * r);}  }
class C{  public void parseGroupObjects(String Object,String url,String username,String password,JSONBuilder jsonString){  ConfigurationController con=new ConfigurationController(true);  try {    HTTPController api=new HTTPController(username,password);    SAXBuilder sb=new SAXBuilder();    String result=api.doGet(url + "/JSSResource/" + Object);    Document doc=sb.build(new ByteArrayInputStream(result.getBytes("UTF-8")));    List<Element> groups=doc.getRootElement().getChildren();    ArrayList<String> group_ids=parseMultipleObjects(groups);    jsonString.addArrayObject(Object);    int problems_added=0;    for (int c=0; c < group_ids.size(); c++) {      String group_info=api.doGet(url + "/JSSResource/" + Object+ "/id/"+ group_ids.get(c));      Document account_as_xml=sb.build(new ByteArrayInputStream(group_info.getBytes("UTF-8")));      List<Element> group=account_as_xml.getRootElement().getChildren();      String name=group.get(1).getContent().get(0).getValue();      int nested_groups_count=0;      int crit_count=0;      if (Object.equals("computergroups")) {        crit_count=Integer.parseInt(group.get(4).getContent().get(0).getValue());      } else       if (Object.equals("mobiledevicegroups")) {        crit_count=Integer.parseInt(group.get(3).getContent().get(0).getValue());      } else {        crit_count=Integer.parseInt(group.get(5).getContent().get(0).getValue());      }      for (int cri=1; cri < group.get(4).getContent().size(); cri++) {        String value=group.get(4).getContent().get(1).getValue();        if (value.contains("Computer Group") || value.contains("Mobile Device Group") || value.contains("User Group")) {          nested_groups_count++;        }      }      if (nested_groups_count != 0 || crit_count > Integer.parseInt(con.getValue("configurations,smart_groups","criteria_count")[0])) {        jsonString.openArrayObject();        jsonString.addElement("id",group.get(0).getContent().get(0).getValue());        jsonString.addElement("name",name);        jsonString.addElement("nested_groups_count",Integer.toString(nested_groups_count));        jsonString.addFinalElement("criteria_count",Integer.toString(crit_count));        jsonString.closeObject();        problems_added++;      }    }    if (problems_added > 0) {      jsonString.removeComma();    }    jsonString.closeArrayObject();  } catch (  Exception e) {    jsonString.closeArrayObject();    e.printStackTrace();    System.out.println("Error with group: " + e);  }}  }
class C{  public static <T>String encodeToBase64(Coder<T> coder,T value) throws CoderException {  byte[] rawValue=encodeToByteArray(coder,value);  return Base64.encodeBase64URLSafeString(rawValue);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Deprecated public RegionFactory(Properties distributedSystemProperties,RegionAttributes<K,V> regionAttributes) throws CacheWriterException, RegionExistsException, TimeoutException {  this((GemFireCacheImpl)new CacheFactory(distributedSystemProperties).create(),regionAttributes);}  }
class C{  public final byte readByte() throws IOException {  int ch=in.read();  if (ch < 0)   throw new EOFException();  return (byte)(ch);}  }
class C{  @Override @Unpreemptible("Unwind stack possibly from unpreemptible code") public void unwindStackFrame(CompiledMethod compiledMethod,AbstractRegisters registers){  NormalMethod method=(NormalMethod)compiledMethod.getMethod();  BaselineCompiledMethod bcm=(BaselineCompiledMethod)compiledMethod;  if (method.isSynchronized()) {    Address ip=registers.getInnermostInstructionAddress();    Offset instr=compiledMethod.getInstructionOffset(ip);    Offset lockOffset=((BaselineCompiledMethod)compiledMethod).getLockAcquisitionOffset();    if (instr.sGT(lockOffset)) {      Object lock;      if (method.isStatic()) {        lock=method.getDeclaringClass().getResolvedClassForType();      } else {        Address fp=registers.getInnermostFramePointer();        short location=bcm.getGeneralLocalLocation(0);        Address addr;        if (BaselineCompilerImpl.isRegister(location)) {          lock=Magic.addressAsObject(registers.getGPRs().get(location).toAddress());        } else {          addr=fp.plus(BaselineCompilerImpl.locationToOffset(location) - BYTES_IN_ADDRESS);          lock=Magic.addressAsObject(addr.loadAddress());        }      }      if (ObjectModel.holdsLock(lock,RVMThread.getCurrentThread())) {        ObjectModel.genericUnlock(lock);      }    }  }  Address fp=registers.getInnermostFramePointer();  Offset frameOffset=Offset.fromIntSignExtend(BaselineCompilerImpl.getFrameSize(bcm));  for (int i=bcm.getLastFloatStackRegister(); i >= FIRST_FLOAT_LOCAL_REGISTER.value(); --i) {    frameOffset=frameOffset.minus(BYTES_IN_DOUBLE);    long temp=Magic.getLongAtOffset(Magic.addressAsObject(fp),frameOffset);    registers.getFPRs()[i]=Magic.longBitsAsDouble(temp);  }  for (int i=bcm.getLastFixedStackRegister(); i >= FIRST_FIXED_LOCAL_REGISTER.value(); --i) {    frameOffset=frameOffset.minus(BYTES_IN_ADDRESS);    registers.getGPRs().set(i,fp.loadWord(frameOffset));  }  registers.unwindStackFrame();}  }
class C{  public boolean isHidden(){  return hidden;}  }
class C{  public PageAttributes(){  setColor(ColorType.MONOCHROME);  setMediaToDefault();  setOrientationRequestedToDefault();  setOrigin(OriginType.PHYSICAL);  setPrintQualityToDefault();  setPrinterResolutionToDefault();}  }
class C{  private static void readOptions(String[][] options){  for (int i=0; i < options.length; i++) {    if (options[i][0].equals("-t")) {      templateDir=options[i][1];    } else     if (options[i][0].equals("-d")) {      fileDir=options[i][1];    } else     if (options[i][0].equals("-x")) {      if (options[i][1].equals("true"))       DEBUG=true; else       DEBUG=false;    }  }}  }
class C{  public TerminalPosition(int column,int row){  this.row=row;  this.column=column;}  }
class C{  public FunctionTypeRef createFunctionTypeRef(){  FunctionTypeRefImpl functionTypeRef=new FunctionTypeRefImpl();  return functionTypeRef;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.103 -0500",hash_original_method="F28F727E5F413064904114AD04815D92",hash_generated_method="09DA7215CDE229B39D8436EBEC11F48F") @DSSafe(DSCat.SAFE_OTHERS) public static String shaHex(byte[] data){  return Hex.encodeHexString(sha(data));}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  int sourceNode=xctxt.getCurrentNode();  String piName=m_name_atv == null ? null : m_name_atv.evaluate(xctxt,sourceNode,this);  if (piName == null)   return;  if (piName.equalsIgnoreCase("xml")) {    transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_PROCESSINGINSTRUCTION_NAME_CANT_BE_XML,new Object[]{Constants.ATTRNAME_NAME,piName});    return;  } else   if ((!m_name_atv.isSimple()) && (!XML11Char.isXML11ValidNCName(piName))) {    transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_PROCESSINGINSTRUCTION_NOTVALID_NCNAME,new Object[]{Constants.ATTRNAME_NAME,piName});    return;  }  String data=transformer.transformToString(this);  try {    transformer.getResultTreeHandler().processingInstruction(piName,data);  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  private String dive(int depth,int iteration){  String str0;  String str1;  String str2;  String str3;  String str4;  String str5;  String str6;  String str7;  String funStr;  funStr="";switch (iteration % 8) {case 0:    funStr=str0=makeString(iteration);  break;case 1:funStr=str1=makeString(iteration);break;case 2:funStr=str2=makeString(iteration);break;case 3:funStr=str3=makeString(iteration);break;case 4:funStr=str4=makeString(iteration);break;case 5:funStr=str5=makeString(iteration);break;case 6:funStr=str6=makeString(iteration);break;case 7:funStr=str7=makeString(iteration);break;}strong[depth]=funStr;weak[depth]=new WeakReference(funStr);if (depth + 1 < MAX_DEPTH) dive(depth + 1,iteration + 1); else Main.sleep(100);return funStr;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  COUNTER=new AtomicInteger();  serializers=new HashMap<Class,SerializerWrapper>();  serializersArray=new Serializer[0];  deserialize(in,this);}  }
class C{  private int decryptBlockWithIV(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  if (count == 0) {    for (int n=0; n < blockSize; n++) {      FR[n]=in[inOff + n];    }    cipher.processBlock(FR,0,FRE,0);    count+=blockSize;    return 0;  } else   if (count == blockSize) {    System.arraycopy(in,inOff,tmp,0,blockSize);    System.arraycopy(FR,2,FR,0,blockSize - 2);    FR[blockSize - 2]=tmp[0];    FR[blockSize - 1]=tmp[1];    cipher.processBlock(FR,0,FRE,0);    for (int n=0; n < blockSize - 2; n++) {      out[outOff + n]=encryptByte(tmp[n + 2],n);    }    System.arraycopy(tmp,2,FR,0,blockSize - 2);    count+=2;    return blockSize - 2;  } else   if (count >= blockSize + 2) {    System.arraycopy(in,inOff,tmp,0,blockSize);    out[outOff + 0]=encryptByte(tmp[0],blockSize - 2);    out[outOff + 1]=encryptByte(tmp[1],blockSize - 1);    System.arraycopy(tmp,0,FR,blockSize - 2,2);    cipher.processBlock(FR,0,FRE,0);    for (int n=0; n < blockSize - 2; n++) {      out[outOff + n + 2]=encryptByte(tmp[n + 2],n);    }    System.arraycopy(tmp,2,FR,0,blockSize - 2);  }  return blockSize;}  }
class C{  public void removeElementAt(int i){  if (null == m_map)   return;  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else   m_map[i]=DTM.NULL;}  }
class C{  protected AlgorithmParameters(AlgorithmParametersSpi paramSpi,Provider provider,String algorithm){  this.paramSpi=paramSpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  private static void replaceAltStackInstructions(){  fillInstructionMap(0x0700,0xFFF0,new FrInstruction(InstructionFormat.E,0,0,"POP","i","",Instruction.FlowType.NONE,false,false,ldR15RiSimulationCode));  fillInstructionMap(0x0780,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"POP","g","",Instruction.FlowType.NONE,false,false,ldR15RsSimulationCode));  fillInstructionMap(0x0781,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"POP","g","",Instruction.FlowType.NONE,false,false,ldR15RsSimulationCode));  fillInstructionMap(0x0782,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"POP","g","",Instruction.FlowType.NONE,false,false,ldR15RsSimulationCode));  fillInstructionMap(0x0783,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"POP","g","",Instruction.FlowType.NONE,false,false,ldR15RsSimulationCode));  fillInstructionMap(0x0784,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"POP","g","",Instruction.FlowType.NONE,false,false,ldR15RsSimulationCode));  fillInstructionMap(0x0785,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"POP","g","",Instruction.FlowType.NONE,false,false,ldR15RsSimulationCode));  fillInstructionMap(0x0790,0xFFFF,new FrInstruction(InstructionFormat.Z,0,0,"POP","P","",Instruction.FlowType.NONE,false,false,ldR15PSSimulationCode));  fillInstructionMap(0x0B00,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"PUSH","@4u","",Instruction.FlowType.NONE,false,false,dmovDir10R15SimulationCode));  fillInstructionMap(0x1700,0xFFF0,new FrInstruction(InstructionFormat.E,0,0,"PUSH","i","",Instruction.FlowType.NONE,false,false,stRiR15SimulationCode));  fillInstructionMap(0x1780,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"PUSH","g","",Instruction.FlowType.NONE,false,false,stRsR15SimulationCode));  fillInstructionMap(0x1781,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"PUSH","g","",Instruction.FlowType.NONE,false,false,stRsR15SimulationCode));  fillInstructionMap(0x1782,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"PUSH","g","",Instruction.FlowType.NONE,false,false,stRsR15SimulationCode));  fillInstructionMap(0x1783,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"PUSH","g","",Instruction.FlowType.NONE,false,false,stRsR15SimulationCode));  fillInstructionMap(0x1784,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"PUSH","g","",Instruction.FlowType.NONE,false,false,stRsR15SimulationCode));  fillInstructionMap(0x1785,0xFFFF,new FrInstruction(InstructionFormat.E,0,0,"PUSH","g","",Instruction.FlowType.NONE,false,false,stRsR15SimulationCode));  fillInstructionMap(0x1790,0xFFFF,new FrInstruction(InstructionFormat.Z,0,0,"PUSH","P","",Instruction.FlowType.NONE,false,false,stPsR15SimulationCode));  fillInstructionMap(0x1B00,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"POP","@u","",Instruction.FlowType.NONE,false,false,dmovR15Dir10SimulationCode));  fillInstructionMap(0x8C00,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"POP","z","",Instruction.FlowType.NONE,false,false,ldm0SimulationCode));  fillInstructionMap(0x8D00,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"POP","y","",Instruction.FlowType.NONE,false,false,ldm1SimulationCode));  fillInstructionMap(0x8E00,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"PUSH","xz","",Instruction.FlowType.NONE,false,false,stm0SimulationCode));  fillInstructionMap(0x8F00,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"PUSH","xy","",Instruction.FlowType.NONE,false,false,stm1SimulationCode));}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  boolean reset(RWWriteCacheService cache,final int nextAllocation){  boolean isolatedWrites=false;  for (  AllocBlock ab : m_allocBlocks) {    if (ab.m_addr == 0)     break;    ab.reset(cache);    isolatedWrites=isolatedWrites || ab.m_saveCommit != null;    if (ab.m_addr <= nextAllocation && ab.m_saveCommit == null) {      assert ab.freeBits() == ab.totalBits();      ab.m_addr=0;    }  }  m_freeTransients=transientbits();  m_freeBits=calcFreeBits();  m_allocIndex=-1;  assert calcSessionFrees();  if (s_islogDebug)   checkBits();  return isolatedWrites;}  }
class C{  StreamRedirectThread(String name,InputStream in,OutputStream out){  super(name);  this.in=new InputStreamReader(in);  this.out=new OutputStreamWriter(out);  setPriority(Thread.MAX_PRIORITY - 1);}  }
class C{  protected MockResponse buildResponse(int status,byte[] body){  return buildResponse(status).setBody(body);}  }
class C{  public static void main(String args[]){  int address=0x01;  String device="/dev/ttyUSB0";  if (args.length > 0) {    device=args[0];  }  if (args.length > 1) {    address=Integer.parseInt(args[1],16);  }  KLHandlerGeneric hdlr=new KLHandlerGeneric(device);  hdlr.init5Baud(address);  while (hdlr.getProtStat() != ProtStatus.CONNECTING && hdlr.getProtStat() != ProtStatus.OFFLINE) {    try {      Thread.sleep(1000);    } catch (    Exception e) {    }  }  hdlr.close();}  }
class C{  private void removeMalformedAttributes(Node node){  int i=0;  while (i < node.childNodes().size()) {    Node child=node.childNode(i);    for (    Attribute attr : child.attributes()) {      if (attr.getKey().startsWith("\"") && attr.getKey().endsWith("\"")) {        child.removeAttr(attr.getKey());      }    }    removeMalformedAttributes(child);    i++;  }}  }
class C{  private static LSException createLSException(short code,Throwable cause){  LSException lse=new LSException(code,cause != null ? cause.getMessage() : null);  if (cause != null && ThrowableMethods.fgThrowableMethodsAvailable) {    try {      ThrowableMethods.fgThrowableInitCauseMethod.invoke(lse,new Object[]{cause});    } catch (    Exception e) {    }  }  return lse;}  }
class C{  public void executeHttpPostedCommands(){  final ShoppingCart cart=ApplicationDirector.getShoppingCart();  final PageParameters params=getPageParameters();  final Map<String,String> paramsMap=wicketUtil.pageParametesAsMap(params);  try {    getShoppingCartCommandFactory().execute(cart,(Map)paramsMap);    if (paramsMap.containsKey(ShoppingCartCommand.CMD_RESET_PASSWORD)) {      info(getLocalizer().getString("newPasswordEmailSent",this));    }  } catch (  BadCredentialsException bce) {    if (Constants.PASSWORD_RESET_AUTH_TOKEN_INVALID.equals(bce.getMessage())) {      error(getLocalizer().getString("newPasswordInvalidToken",this));    }  }catch (  Exception exp) {    ShopCodeContext.getLog(this).error("Could not execute shopping cart command",exp);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weights;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigma=0;  double recipRoot2PiTimesSigma;  double twoSigmaSqr;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigma=Double.parseDouble(args[i]);    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigma < 0.5) {    sigma=0.5;  } else   if (sigma > 20) {    sigma=20;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    recipRoot2PiTimesSigma=1 / (Math.sqrt(2 * Math.PI) * sigma);    twoSigmaSqr=2 * sigma * sigma;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma * Math.exp(-1 * (i * i) / twoSigmaSqr);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weights=new double[numPixelsInFilter];    int cellsOnEitherSide=(int)Math.floor((double)filterSize / 2);    double term1=-1 / (Math.PI * sigma * sigma* sigma* sigma);    double term2=0;    double term3=0;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - cellsOnEitherSide;        y=row - cellsOnEitherSide;        term2=1 - ((x * x + y * y) / twoSigmaSqr);        term3=Math.exp(-(x * x + y * y) / twoSigmaSqr);        weight=term1 * term2 * term3;        weights[a]=weight;        dX[a]=x;        dY[a]=y;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights[a];              zFinal+=weights[a] * zN;            }          }          outputFile.setValue(row,col,zFinal / sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,z1 / z2);            } else {              outputFile.setValue(row,col,noData1);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,z1 / constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,constant1 / z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void generateCode(BlockScope currentScope){  if ((this.bits & ASTNode.IsReachable) == 0) {    return;  }  this.exception.generateCode(currentScope,true);}  }
class C{  public Builder addVarint(final long value){  if (result.varint == null) {    result.varint=new ArrayList<Long>();  }  result.varint.add(value);  return this;}  }
class C{  private static <T>T createProxy(MBeanServerConnection connection,ObjectName objectName,Class<T> interfaceClass,boolean notificationEmitter,boolean isMXBean){  try {    if (isMXBean) {      Introspector.testComplianceMXBeanInterface(interfaceClass);    } else {      Introspector.testComplianceMBeanInterface(interfaceClass);    }  } catch (  NotCompliantMBeanException e) {    throw new IllegalArgumentException(e);  }  InvocationHandler handler=new MBeanServerInvocationHandler(connection,objectName,isMXBean);  final Class<?>[] interfaces;  if (notificationEmitter) {    interfaces=new Class<?>[]{interfaceClass,NotificationEmitter.class};  } else   interfaces=new Class<?>[]{interfaceClass};  Object proxy=Proxy.newProxyInstance(interfaceClass.getClassLoader(),interfaces,handler);  return interfaceClass.cast(proxy);}  }
class C{  public void testClose() throws SQLException {  Statement st=null;  ResultSet res=null;  try {    String[] queries={"update zoo set name='Masha', family='cat' where id=2;","insert into zoo (id, name, family) values (3, 'Vorobey', 'sparrow');","insert into zoo (id, name, family) values (4, 'Slon', 'elephant');","select * from zoo"};    st=conn.createStatement();    for (int i=0; i < queries.length; i++) {      st.execute(queries[i]);    }    res=st.getResultSet();    assertNotNull(res);    assertTrue(res.next());    st.close();  }  finally {    try {      st.close();    } catch (    SQLException ee) {    }  }  try {    res.next();    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  public void reset(){  calls=new HashMap();}  }
class C{  private void processPhiInsn(PhiInsn insn){  RegisterSpec result=insn.getResult();  int resultReg=result.getReg();  int category=result.getCategory();  RegisterSpecList sources=insn.getSources();  int sourcesSize=sources.size();  ArrayList<RegisterSpec> ssaRegs=new ArrayList<RegisterSpec>();  Multiset mapSet=new Multiset(sourcesSize + 1);  if (ssaRegsMapped.get(resultReg)) {    mapSet.add(mapper.oldToNew(resultReg));  } else {    ssaRegs.add(result);  }  for (int i=0; i < sourcesSize; i++) {    RegisterSpec source=sources.get(i);    SsaInsn def=ssaMeth.getDefinitionForRegister(source.getReg());    RegisterSpec sourceDef=def.getResult();    int sourceReg=sourceDef.getReg();    if (ssaRegsMapped.get(sourceReg)) {      mapSet.add(mapper.oldToNew(sourceReg));    } else {      ssaRegs.add(sourceDef);    }  }  for (int i=0; i < mapSet.getSize(); i++) {    int maxReg=mapSet.getAndRemoveHighestCount();    tryMapRegs(ssaRegs,maxReg,category,false);  }  int mapReg=findNextUnreservedRopReg(paramRangeEnd,category);  while (!tryMapRegs(ssaRegs,mapReg,category,false)) {    mapReg=findNextUnreservedRopReg(mapReg + 1,category);  }}  }
class C{  public sun.net.ftp.FtpClient removeDirectory(String name) throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("RMD " + name);  return this;}  }
class C{  public UUID failedNodeId(){  return failedNodeId;}  }
class C{  public HolderLong(long value){  this.value=value;}  }
class C{  public static String string(int type){  return services.getText(type);}  }
class C{  public static String formatMillis(int millis){  String result="";  int hr=millis / 3600000;  millis%=3600000;  int min=millis / 60000;  millis%=60000;  int sec=millis / 1000;  if (hr > 0) {    result+=hr + ":";  }  if (min >= 0) {    if (min > 9) {      result+=min + ":";    } else {      result+="0" + min + ":";    }  }  if (sec > 9) {    result+=sec;  } else {    result+="0" + sec;  }  return result;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9);}  }
class C{  public static String classNameOf(TypeElement type){  String name=type.getQualifiedName().toString();  String pkgName=packageNameOf(type);  return pkgName.isEmpty() ? name : name.substring(pkgName.length() + 1);}  }
class C{  public boolean isTransitionFrom(Transition other){  if (other == null) {    return true;  }  return iMillis > other.iMillis && (iWallOffset != other.iWallOffset || !(iNameKey.equals(other.iNameKey)));}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryStorageFileSystemsResponse queryStorageFileSystems(com.emc.storageos.vasa.VasaServiceStub.QueryStorageFileSystems queryStorageFileSystems23) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[11].getName());    _operationClient.getOptions().setAction("urn:queryStorageFileSystems");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryStorageFileSystems23,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryStorageFileSystems")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryStorageFileSystemsResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryStorageFileSystemsResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  boolean sawVariableUse(){  return this.sawVariableUse;}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  protected char peek(int offset){  int next=current + offset;  if (next < 0 || next >= text.length)   return '\000'; else   return text[next];}  }
class C{  public boolean isSqlCommentsSupported(){  return sqlCommentsSupported;}  }
class C{  public Obscure(String clearValue){  setClearValue(clearValue);}  }
class C{  public JspWriterImpl(ServletResponse response){  this(response,Constants.DEFAULT_BUFFER_SIZE,true);}  }
class C{  public void testInitString(){  Em18RfidProtocol instance=new Em18RfidProtocol();  assertEquals("",instance.initString());}  }
class C{  public static String encode(char[] chars){  StringBuffer sbuf=new StringBuffer();  int len=chars.length;  for (int i=0; i < len; i++) {    int ch=chars[i];    append(sbuf,ch);  }  return sbuf.toString();}  }
class C{  public IndentPrinter(){  this(new PrintWriter(System.out),"  ");}  }
class C{  private byte[] receivedClientKeyExchange(ECDHClientKeyExchange message){  clientKeyExchange=message;  byte[] premasterSecret=ecdhe.getSecret(message.getEncodedPoint()).getEncoded();  return premasterSecret;}  }
class C{  public String randomPositive(Object length){  return numericFunctions.randomPositiveFloat(length,2);}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (null == m_category) {    m_category="";  }  if (null == m_message) {    m_message="";  }  String priorityName="";  if (null != m_priority) {    priorityName=m_priority.getName();  }  m_priority=Priority.getPriorityForName(priorityName);  return this;}  }
class C{  private void readV3Record(InputStream s,OutputStream o) throws IOException {  ProtocolVersion recordVersion=ProtocolVersion.valueOf(buf[1],buf[2]);  checkRecordVersion(recordVersion,false);  int contentLen=((buf[3] & 0x0ff) << 8) + (buf[4] & 0xff);  if (contentLen < 0 || contentLen > maxLargeRecordSize - headerSize) {    throw new SSLProtocolException("Bad InputRecord size" + ", count = " + contentLen + ", buf.length = "+ buf.length);  }  if (contentLen > buf.length - headerSize) {    byte[] newbuf=new byte[contentLen + headerSize];    System.arraycopy(buf,0,newbuf,0,headerSize);    buf=newbuf;  }  if (exlen < contentLen + headerSize) {    int really=readFully(s,buf,exlen,contentLen + headerSize - exlen);    if (really < 0) {      throw new SSLException("SSL peer shut down incorrectly");    }  }  count=contentLen + headerSize;  exlen=0;  if (debug != null && Debug.isOn("record")) {    if (count < 0 || count > (maxRecordSize - headerSize)) {      System.out.println(Thread.currentThread().getName() + ", Bad InputRecord size" + ", count = "+ count);    }    System.out.println(Thread.currentThread().getName() + ", READ: " + recordVersion+ " "+ contentName(contentType())+ ", length = "+ available());  }}  }
class C{  private AutoPlaylist(long playlistId,String playlistName,int maximumEntries,int sortMethod,int truncateMethod,boolean truncateAscending,boolean sortAscending,boolean matchAllRules,List<AutoPlaylistRule> rules){  super(playlistId,playlistName);  mMaximumEntries=maximumEntries;  mMatchAllRules=matchAllRules;  mRules=Collections.unmodifiableList(rules);  mTruncateMethod=truncateMethod;  mTruncateAscending=truncateAscending;  mSortMethod=sortMethod;  mSortAscending=sortAscending;}  }
class C{  public void union(Rect r){  union(r.left,r.top,r.right,r.bottom);}  }
class C{  public static void maxpooling_backward(MatrixObject image,MatrixObject dout,MatrixObject outputBlock,int N,int C,int H,int W,int K,int R,int S,int pad_h,int pad_w,int stride_h,int stride_w,int P,int Q) throws DMLRuntimeException {  Pointer alpha=null;  Pointer beta=null;  cudnnTensorDescriptor xDesc=null;  cudnnTensorDescriptor yDesc=null;  cudnnTensorDescriptor dyDesc=null;  cudnnTensorDescriptor dxDesc=null;  cudnnPoolingDescriptor poolingDesc=null;  try {    xDesc=allocateTensorDescriptor(N,C,H,W);    yDesc=allocateTensorDescriptor(N,C,P,Q);    dxDesc=allocateTensorDescriptor(N,C,H,W);    dyDesc=allocateTensorDescriptor(N,C,P,Q);    poolingDesc=allocatePoolingDescriptor(R,S,pad_h,pad_w,stride_h,stride_w);    Pointer y=new Pointer();    long numBytes=N * C * P* Q* Sizeof.DOUBLE;    cudaMalloc(y,numBytes);    Pointer x=((JCudaObject)image.getGPUObject()).jcudaDenseMatrixPtr;    Pointer dx=((JCudaObject)outputBlock.getGPUObject()).jcudaDenseMatrixPtr;    Pointer dy=((JCudaObject)dout.getGPUObject()).jcudaDenseMatrixPtr;    alpha=pointerTo(1.0);    beta=pointerTo(0.0f);    int status=cudnnPoolingForward(cudnnHandle,poolingDesc,alpha,xDesc,x,beta,yDesc,y);    if (status != jcuda.jcudnn.cudnnStatus.CUDNN_STATUS_SUCCESS) {      throw new DMLRuntimeException("Could not executed cudnnPoolingForward before cudnnPoolingBackward: " + jcuda.jcudnn.cudnnStatus.stringFor(status));    }    status=cudnnPoolingBackward(cudnnHandle,poolingDesc,alpha,yDesc,y,dyDesc,dy,xDesc,x,beta,dxDesc,dx);    if (status != jcuda.jcudnn.cudnnStatus.CUDNN_STATUS_SUCCESS) {      throw new DMLRuntimeException("Could not executed cudnnPoolingBackward: " + jcuda.jcudnn.cudnnStatus.stringFor(status));    }    cudaFree(y);  }  finally {    if (alpha != null)     cudaFree(alpha);    if (beta != null)     cudaFree(beta);    if (yDesc != null)     cudnnDestroyTensorDescriptor(yDesc);    if (xDesc != null)     cudnnDestroyTensorDescriptor(xDesc);    if (dyDesc != null)     cudnnDestroyTensorDescriptor(dyDesc);    if (dxDesc != null)     cudnnDestroyTensorDescriptor(dxDesc);    if (poolingDesc != null)     cudnnDestroyPoolingDescriptor(poolingDesc);  }}  }
class C{  public okhttp3.Response raw(){  return rawResponse;}  }
class C{  @Override protected void cleanup(){  super.cleanup();  this.cachedSeries.clear();}  }
class C{  static public void printSummary(PrintStream out,String measure){  if (measure == null) {    out.println("Profiling statistics: (hh:mm:ss)");  }  for (  Measure m : getSortedMeasures()) {    if (measure == null || m.mName.equals(measure)) {      out.printf("  %-25s: %s",m.mName,getMeasures().get(m.mName).toString());      out.println();    }  }}  }
class C{  public Builder fieldName(String fieldname){  this.fieldname=fieldname;  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateUDPPacketIn(){  this.testUDPPacketSrld=this.testUDPPacket.serialize();  this.testUDPPacketIn=((OFPacketIn)mockFloodlightProvider.getOFMessageFactory().getMessage(OFType.PACKET_IN)).setBufferId(-1).setInPort((short)3).setPacketData(this.testUDPPacketSrld).setReason(OFPacketInReason.NO_MATCH).setTotalLength((short)this.testUDPPacketSrld.length);}  }
class C{  public boolean unbanChatMember(String chatId,int userId){  HttpResponse<String> response;  JSONObject jsonResponse;  try {    MultipartBody request=Unirest.post(getBotAPIUrl() + "unbanChatMember").field("chat_id",chatId,"application/json; charset=utf8;").field("user_id",userId);    response=request.asString();    jsonResponse=Utils.processResponse(response);    if (jsonResponse != null) {      if (jsonResponse.getBoolean("result"))       return true;    }  } catch (  UnirestException e) {    e.printStackTrace();  }  return false;}  }
class C{  public ReplEvent take() throws InterruptedException {  ReplEvent event=null;  while (event == null) {    event=take(1000,TimeUnit.MILLISECONDS);  }  return event;}  }
class C{  protected void drawLabel(Canvas c,float x,float y,String label){  c.drawText(label,x,y,mLegendLabelPaint);}  }
class C{  public boolean isSetConfigItemCode(){  return this.configItemCode != null;}  }
class C{  public static DoubleMatrix2D equals(DoubleMatrix2D A,double s){  return A.assign(F.equals(s));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void logSevere(Throwable t){  ByteArrayOutputStream bs=new ByteArrayOutputStream();  t.printStackTrace(new PrintStream(bs));  logger.severe(logPrefix + bs.toString());}  }
class C{  public AuthList(int lifespan){  this.lifespan=lifespan;  entries=new LinkedList<>();}  }
class C{  public T caseFinallyBlock(FinallyBlock object){  return null;}  }
class C{  @PUT @Path("interpreter/bind/{noteId}") @ZeppelinApi public Response bind(@PathParam("noteId") String noteId,String req) throws IOException {  List<String> settingIdList=gson.fromJson(req,new TypeToken<List<String>>(){  }.getType());  notebook.bindInterpretersToNote(SecurityUtils.getPrincipal(),noteId,settingIdList);  return new JsonResponse<>(Status.OK).build();}  }
class C{  public void addIdentity(Identity identity){synchronized (identities) {    identities.add(identity);  }}  }
class C{  public void deleteCIFSShare(String shareName){  if (log.isDebugEnabled()) {    log.debug("Delete CIFS share with params[shareName]" + shareName);  }  FlexFileShare share=new FlexFileShare(server.getNaServer(),"");  share.deleteCIFSShare(shareName);}  }
class C{  public void disableEventHistory(){  this.eventHistory=null;}  }
class C{  protected TinkerGraph.DefaultIdManager selectIdMakerFromGraphData(final LoadGraphWith.GraphData loadGraphWith){  if (null == loadGraphWith)   return TinkerGraph.DefaultIdManager.ANY;  if (loadGraphWith.equals(LoadGraphWith.GraphData.CLASSIC))   return TinkerGraph.DefaultIdManager.INTEGER; else   if (loadGraphWith.equals(LoadGraphWith.GraphData.MODERN))   return TinkerGraph.DefaultIdManager.INTEGER; else   if (loadGraphWith.equals(LoadGraphWith.GraphData.CREW))   return TinkerGraph.DefaultIdManager.INTEGER; else   if (loadGraphWith.equals(LoadGraphWith.GraphData.GRATEFUL))   return TinkerGraph.DefaultIdManager.INTEGER; else   throw new IllegalStateException(String.format("Need to define a new %s for %s",TinkerGraph.IdManager.class.getName(),loadGraphWith.name()));}  }
class C{  private Parsed currentParsed(){  return parsed.get(parsed.size() - 1);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public VCardReader(Reader reader,VCardVersion defaultVersion){  SyntaxRules rules=SyntaxRules.vcard();  rules.setDefaultSyntaxStyle(defaultVersion.getSyntaxStyle());  this.reader=new VObjectReader(reader,rules);  this.defaultVersion=defaultVersion;}  }
class C{  public Joiner pushList(String alias){  if (mapBuilder == null) {    mapBuilder=new MapBuilder(this);  }  mapBuilder.addTerm(MapBuilderTermType.LIST,lookupAlias(alias),alias);  return this;}  }
class C{  public VerletPhysics2D update(){  updateParticles();  updateSprings();  applyConstaints();  updateIndex();  return this;}  }
class C{  private void parseSQLConfig(final Node node,final ConfigSettings config){  String name, value;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_HOST)) {      value=nnode.getChildNodes().item(0).getNodeValue();      config.setConfigParameter(ConfigurationKeys.SQL_HOST,value);    } else     if (name.equals(KEY_DATABASE)) {      value=nnode.getChildNodes().item(0).getNodeValue();      config.setConfigParameter(ConfigurationKeys.SQL_DATABASE,value);    } else     if (name.equals(KEY_USER)) {      value=nnode.getChildNodes().item(0).getNodeValue();      config.setConfigParameter(ConfigurationKeys.SQL_USERNAME,value);    } else     if (name.equals(KEY_PASSWORD)) {      value=nnode.getChildNodes().item(0).getNodeValue();      config.setConfigParameter(ConfigurationKeys.SQL_PASSWORD,value);    }  }}  }
class C{  public Query appendIf(final String name,final Boolean value) throws UnsupportedEncodingException {  if (value != null) {    append(name,value.toString());  }  return this;}  }
class C{  public static File downloadBitmapToFile(Context context,String urlString,String uniqueName){  final File cacheDir=ImageCache.getDiskCacheDir(context,uniqueName);  if (!cacheDir.exists()) {    cacheDir.mkdir();  }  if (BuildConfig.DEBUG) {    Log.d(TAG,"downloadBitmap - downloading - " + urlString);  }  HttpURLConnection urlConnection=null;  BufferedOutputStream out=null;  try {    final File tempFile=File.createTempFile("bitmap",null,cacheDir);    final URL url=new URL(urlString);    urlConnection=(HttpURLConnection)url.openConnection();    if (urlConnection.getResponseCode() != HttpURLConnection.HTTP_OK) {      return null;    }    final InputStream in=new BufferedInputStream(urlConnection.getInputStream(),IO_BUFFER_SIZE_BYTES);    out=new BufferedOutputStream(new FileOutputStream(tempFile),IO_BUFFER_SIZE_BYTES);    int b;    while ((b=in.read()) != -1) {      out.write(b);    }    return tempFile;  } catch (  final IOException e) {    Log.e(TAG,"Error in downloadBitmap - " + e);  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    if (out != null) {      try {        out.close();      } catch (      final IOException e) {        Log.e(TAG,"Error in downloadBitmap - " + e);      }    }  }  return null;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  int addFlattenedColumn(Object o,int[] dims,boolean allocated) throws FitsException {  ColumnDesc added;  if (!allocated) {    added=new ColumnDesc();    added.dimens=dims;  } else {    added=this.columnList.get(this.columnList.size() - 1);  }  added.base=ArrayFuncs.getBaseClass(o);  added.isBoolean=added.base == boolean.class;  added.isString=added.base == String.class;  o=arrayToColumn(added,o);  int size=1;  for (  int dim2 : dims) {    size*=dim2;  }  added.size=size;  if (size != 0 && this.columnList.size() > 1) {    int xRow=Array.getLength(o) / size;    if (xRow > 0 && xRow != this.nRow) {      throw new FitsException("Added column does not have correct row count");    }  }  if (!added.isVarying) {    added.model=ArrayFuncs.newInstance(ArrayFuncs.getBaseClass(o),dims);    this.rowLen+=size * ArrayFuncs.getBaseLength(o);  } else {    if (added.isLongVary) {      added.model=new long[2];      this.rowLen+=FitsIO.BYTES_IN_LONG * 2;    } else {      added.model=new int[2];      this.rowLen+=FitsIO.BYTES_IN_INTEGER * 2;    }  }  added.column=o;  if (this.table != null) {    this.table.addColumn(o,added.size);  }  if (!this.columnList.contains(added)) {    this.columnList.add(added);  }  return this.columnList.size();}  }
class C{  public static Date parseDate(String dateValue,Collection dateFormats) throws DateParseException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_PATTERNS;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  SimpleDateFormat dateParser=null;  final Iterator formatIter=dateFormats.iterator();  while (formatIter.hasNext()) {    final String format=(String)formatIter.next();    if (dateParser == null) {      dateParser=new SimpleDateFormat(format,Locale.US);      dateParser.setTimeZone(TimeZone.getTimeZone("GMT"));    } else {      dateParser.applyPattern(format);    }    try {      return dateParser.parse(dateValue);    } catch (    final ParseException pe) {    }  }  throw new DateParseException("Unable to parse the date " + dateValue);}  }
class C{  @Override public void forEachOrdered(Consumer<? super Map.Entry<K,V>> action){  inner.forEachOrdered(action);}  }
class C{  private void updateHighlighting(){  if (!getEnabled()) {    unhighlightAll();  } else {    int accumulatedOffset=0;    for (    ContentBlock block : contentBlocks) {      if (!block.highlighted) {        StyleRange range=new StyleRange(accumulatedOffset,block.content.length(),inactiveColor,null);        sourceViewer.getTextWidget().setStyleRange(range);      }      accumulatedOffset+=block.content.length();    }  }}  }
class C{  public static DBIDs randomSample(DBIDs ids,double rate,Random random){  if (rate <= 0) {    return ids;  }  if (rate < 1.1) {    int size=Math.min((int)(rate * ids.size()),ids.size());    return randomSample(ids,size,random);  }  int size=Math.min((int)rate,ids.size());  return randomSample(ids,size,random);}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  if (mCameraSource != null) {    mCameraSource.release();  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof MapBasedCorrelationContext)) {    return false;  }  MapBasedCorrelationContext other=(MapBasedCorrelationContext)obj;  if (entries == null) {    if (other.entries != null) {      return false;    }  } else   if (!entries.equals(other.entries)) {    return false;  }  return true;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  @LayoutlibDelegate static void rInflate(LayoutInflater thisInflater,XmlPullParser parser,View parent,final AttributeSet attrs,boolean finishInflate) throws XmlPullParserException, IOException {  if (finishInflate == false) {    if (thisInflater instanceof BridgeInflater) {      ((BridgeInflater)thisInflater).setIsInMerge(true);    }  }  thisInflater.rInflate_Original(parser,parent,attrs,finishInflate);  if (finishInflate == false) {    if (thisInflater instanceof BridgeInflater) {      ((BridgeInflater)thisInflater).setIsInMerge(false);    }  }}  }
class C{  private void init(SSLContextImpl ctx){  if (debug != null && Debug.isOn("ssl")) {    System.out.println("Using SSLEngineImpl.");  }  sslContext=ctx;  sess=SSLSessionImpl.nullSession;  handshakeSession=null;  roleIsServer=true;  connectionState=cs_START;  receivedCCS=false;  serverNames=Utilities.addToSNIServerNameList(serverNames,getPeerHost());  readCipher=CipherBox.NULL;  readAuthenticator=MAC.NULL;  writeCipher=CipherBox.NULL;  writeAuthenticator=MAC.NULL;  secureRenegotiation=false;  clientVerifyData=new byte[0];  serverVerifyData=new byte[0];  enabledCipherSuites=sslContext.getDefaultCipherSuiteList(roleIsServer);  enabledProtocols=sslContext.getDefaultProtocolList(roleIsServer);  wrapLock=new Object();  unwrapLock=new Object();  writeLock=new Object();  acc=AccessController.getContext();  outputRecord=new EngineOutputRecord(Record.ct_application_data,this);  inputRecord=new EngineInputRecord(this);  inputRecord.enableFormatChecks();  writer=new EngineWriter();}  }
class C{  @Override public void onApplicationEvent(TransportServiceEvent event){  if (event.getType() == TransportServiceEvent.TYPE.TRANSPORT_CREATED) {    TransportOrder to=repository.findOne((Long)event.getSource());    List<TransportOrder> transportOrders=repository.findByTransportUnitBKAndStates(to.getTransportUnitBK(),TransportOrderState.CREATED);    Collections.sort(transportOrders,new TransportStartComparator());    for (    TransportOrder transportOrder : transportOrders) {      try {        transportOrder.changeState(TransportOrderState.INITIALIZED).setSourceLocation(commonGateway.getTransportUnit(transportOrder.getTransportUnitBK()).orElseThrow(null).getActualLocation().toString());        transportOrder=repository.save(transportOrder);        LOGGER.debug("TransportOrder with PK [{}] INITIALIZED",transportOrder.getPk());      } catch (      StateChangeException sce) {        LOGGER.warn("Could not initialize TransportOrder with PK [{}]. Message: [{}]",transportOrder.getPk(),sce.getMessage());        continue;      }      try {        ctx.publishEvent(new TransportServiceEvent(transportOrder.getPk(),TransportServiceEvent.TYPE.INITIALIZED));      } catch (      StateChangeException sce) {        LOGGER.warn("Post-processing of TransportOrder with PK [{}] failed with message: [{}]",transportOrder.getPk(),sce.getMessage());      }    }  }}  }
class C{  public static String convertBracketsToPTBFormat(String sentence){  sentence=sentence.replaceAll("\\(","-LRB-");  sentence=sentence.replaceAll("\\)","-RRB-");  sentence=sentence.replaceAll("\\[","-LSB-");  sentence=sentence.replaceAll("\\]","-RSB-");  sentence=sentence.replaceAll("\\{","-LCB-");  sentence=sentence.replaceAll("\\}","-RCB-");  return sentence;}  }
class C{  @Override X509Certificate[] engineValidate(X509Certificate[] chain,Collection<X509Certificate> otherCerts,AlgorithmConstraints constraints,Object parameter) throws CertificateException {  if ((chain == null) || (chain.length == 0)) {    throw new CertificateException("null or zero-length certificate chain");  }  chain=buildTrustedChain(chain);  @SuppressWarnings("deprecation") Date date=validationDate;  if (date == null) {    date=new Date();  }  UntrustedChecker untrustedChecker=new UntrustedChecker();  X509Certificate anchorCert=chain[chain.length - 1];  try {    untrustedChecker.check(anchorCert);  } catch (  CertPathValidatorException cpve) {    throw new ValidatorException("Untrusted certificate: " + anchorCert.getSubjectX500Principal(),ValidatorException.T_UNTRUSTED_CERT,anchorCert,cpve);  }  TrustAnchor anchor=new TrustAnchor(anchorCert,null);  AlgorithmChecker defaultAlgChecker=new AlgorithmChecker(anchor);  AlgorithmChecker appAlgChecker=null;  if (constraints != null) {    appAlgChecker=new AlgorithmChecker(anchor,constraints);  }  int maxPathLength=chain.length - 1;  for (int i=chain.length - 2; i >= 0; i--) {    X509Certificate issuerCert=chain[i + 1];    X509Certificate cert=chain[i];    try {      untrustedChecker.check(cert,Collections.<String>emptySet());    } catch (    CertPathValidatorException cpve) {      throw new ValidatorException("Untrusted certificate: " + cert.getSubjectX500Principal(),ValidatorException.T_UNTRUSTED_CERT,cert,cpve);    }    try {      defaultAlgChecker.check(cert,Collections.<String>emptySet());      if (appAlgChecker != null) {        appAlgChecker.check(cert,Collections.<String>emptySet());      }    } catch (    CertPathValidatorException cpve) {      throw new ValidatorException(ValidatorException.T_ALGORITHM_DISABLED,cert,cpve);    }    if ((variant.equals(VAR_CODE_SIGNING) == false) && (variant.equals(VAR_JCE_SIGNING) == false)) {      cert.checkValidity(date);    }    if (cert.getIssuerX500Principal().equals(issuerCert.getSubjectX500Principal()) == false) {      throw new ValidatorException(ValidatorException.T_NAME_CHAINING,cert);    }    try {      cert.verify(issuerCert.getPublicKey());    } catch (    GeneralSecurityException e) {      throw new ValidatorException(ValidatorException.T_SIGNATURE_ERROR,cert,e);    }    if (i != 0) {      maxPathLength=checkExtensions(cert,maxPathLength);    }  }  return chain;}  }
class C{  public static Dictionary decodeRelaxationFactorsForGUI(Model model,Dictionary relaxationFactorsDict){  if (relaxationFactorsDict.found(FIELDS_KEY)) {    Dictionary fieldsDict=relaxationFactorsDict.subDict(FIELDS_KEY);    Dictionary equationsDict=relaxationFactorsDict.subDict(EQUATIONS_KEY);    Dictionary relFactorsDictionaryForGUI=new Dictionary(RELAXATION_FACTORS_KEY);    for (    FieldElement field : fieldsDict.getFields()) {      String name=field.getName();      relFactorsDictionaryForGUI.add(name,fieldsDict.lookup(name));    }    for (    FieldElement field : equationsDict.getFields()) {      String name=field.getName();      relFactorsDictionaryForGUI.add(name,equationsDict.lookup(name));    }    fixAlphas(model,relFactorsDictionaryForGUI);    return relFactorsDictionaryForGUI;  } else {    return new Dictionary(relaxationFactorsDict);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String profile=getString(stack);  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return Boolean.FALSE;  return uiMgr.setActiveSecurityProfile(profile) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static void main(String[] a){  double x=1.23456789012;  double y=123;  double z=1.2345e30;  double w=1.02;  double u=1.234e-5;  double v=10.0;  int d=0xCAFE;  Format.printf("x = |%f|\n",x);  Format.printf("u = |%20f|\n",u);  Format.printf("x = |% .5f|\n",x);  Format.printf("w = |%20.5f|\n",w);  Format.printf("x = |%020.5f|\n",x);  Format.printf("x = |%+20.5f|\n",x);  Format.printf("x = |%+020.5f|\n",x);  Format.printf("x = |% 020.5f|\n",x);  Format.printf("y = |%#+20.5f|\n",y);  Format.printf("y = |%-+20.5f|\n",y);  Format.printf("z = |%20.5f|\n",z);  Format.printf("x = |%e|\n",x);  Format.printf("u = |%20e|\n",u);  Format.printf("x = |% .5e|\n",x);  Format.printf("w = |%20.5e|\n",w);  Format.printf("x = |%020.5e|\n",x);  Format.printf("x = |%+20.5e|\n",x);  Format.printf("x = |%+020.5e|\n",x);  Format.printf("x = |% 020.5e|\n",x);  Format.printf("y = |%#+20.5e|\n",y);  Format.printf("y = |%-+20.5e|\n",y);  Format.printf("v = |%12.5e|\n",v);  Format.printf("x = |%g|\n",x);  Format.printf("z = |%g|\n",z);  Format.printf("w = |%g|\n",w);  Format.printf("u = |%g|\n",u);  Format.printf("y = |%.2g|\n",y);  Format.printf("y = |%#.2g|\n",y);  Format.printf("d = |%d|\n",d);  Format.printf("d = |%20d|\n",d);  Format.printf("d = |%020d|\n",d);  Format.printf("d = |%+20d|\n",d);  Format.printf("d = |% 020d|\n",d);  Format.printf("d = |%-20d|\n",d);  Format.printf("d = |%20.8d|\n",d);  Format.printf("d = |%x|\n",d);  Format.printf("d = |%20X|\n",d);  Format.printf("d = |%#20x|\n",d);  Format.printf("d = |%020X|\n",d);  Format.printf("d = |%20.8x|\n",d);  Format.printf("d = |%o|\n",d);  Format.printf("d = |%020o|\n",d);  Format.printf("d = |%#20o|\n",d);  Format.printf("d = |%#020o|\n",d);  Format.printf("d = |%20.12o|\n",d);  Format.printf("s = |%-20s|\n","Hello");  Format.printf("s = |%-20c|\n",'!');  Format.printf("|%i|\n",Long.MIN_VALUE);  Format.printf("|%6.2e|\n",0.0);  Format.printf("|%6.2g|\n",0.0);  Format.printf("|%6.2f|\n",9.99);  Format.printf("|%6.2f|\n",9.999);  Format.printf("|%.2f|\n",1.999);  Format.printf("|%6.0f|\n",9.999);  Format.printf("|%20.10s|\n","Hello");  d=-1;  Format.printf("-1 = |%X|\n",d);  Format.printf("100 = |%e|\n",100.0);  Format.printf("1/0 = |%f|\n",1.0 / 0.0);  Format.printf("-1/0 = |%e|\n",-1.0 / 0.0);  Format.printf("0/0 = |%g|\n",0.0 / 0.0);}  }
class C{  public void applyLinearImpulse(Point2D impulse,Point2D point,boolean wake){  applyBodyLinearImpulse(physicsWorld.toVector(impulse),physicsWorld.toPoint(point),wake);}  }
class C{  public String substring(String subject,int start,int stop){  if (stop == -1 || stop >= subject.length()) {    return subject.substring(start);  }  return subject.substring(start,stop);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,TXCommitMessage val,ReplySender replySender) throws RemoteOperationException {  Assert.assertTrue(recipient != null,"DistTXCommitPhaseTwoReplyMessage NULL reply message");  DistTXCommitReplyMessage m=new DistTXCommitReplyMessage(processorId,val);  m.setRecipient(recipient);  replySender.putOutgoing(m);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:04.570 -0500",hash_original_method="9C2B0A9C4AD9BDB94288AB167718CCA9",hash_generated_method="687A5BB14315A707BFCD8AF3214F564F") public boolean forceUserScalable(){  return mForceUserScalable;}  }
class C{  private void enqueue(E x){  final Object[] items=this.items;  items[putIndex]=x;  if (++putIndex == items.length)   putIndex=0;  count++;  notEmpty.signal();}  }
class C{  public static boolean isEnglish(String word){  if (word.length() == 0) {    return false;  }  for (int index=0; index < word.length(); index++) {    char next=word.charAt(index);    if (!((next >= 'a' && next <= 'z') || (next >= 'A' && next <= 'Z') || (next == ' ')|| (next == '-')|| (next == '\''))) {      return false;    }  }  return true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void fireEndElem(String name) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDELEMENT,name,(Attributes)null);  }}  }
class C{  protected void firstRow(double[] buf,int band,NumberVector v1,NumberVector v2,int dim2){  final double val1=v1.doubleValue(0);  buf[0]=delta(val1,v2.doubleValue(0));  final int w=(band >= dim2) ? dim2 - 1 : band;  for (int j=1; j <= w; j++) {    buf[j]=buf[j - 1] + delta(val1,v2.doubleValue(j));  }}  }
class C{  private static int searchSomeElements(BloomIndex<Integer> bfi,int[] values,int nbSearchesToDo){  int minSearchSteps=10000000;  int maxSearchSteps=0;  long sumSearchSteps=0;  int nbSearches=0;  int nbFound=0;  int nbResults=0;  int elem;  SearchStatistics stat=new SearchStatistics();  long sumSearchTime=0;  for (int i=0; i < nbSearchesToDo; i++) {    int index=(int)Math.floor(Math.random() * values.length);    elem=values[index];    stat.clear();    long startTime=System.currentTimeMillis();    List<Integer> results=bfi.search(elem,stat);    long endTime=System.currentTimeMillis();    long diffTime=endTime - startTime;    sumSearchTime+=diffTime;    if (results.size() > 0) {      nbFound++;    }    nbResults+=results.size();    nbSearches++;    if (stat.nbBFChecks < minSearchSteps) {      minSearchSteps=stat.nbBFChecks;    }    if (stat.nbBFChecks > maxSearchSteps) {      maxSearchSteps=stat.nbBFChecks;    }    sumSearchSteps+=stat.nbBFChecks;  }  System.out.print(" |Min steps| " + minSearchSteps + "| Max steps | "+ maxSearchSteps+ "| Avg steps | "+ (double)sumSearchSteps / nbSearches + "| Avg time millis | " + (double)sumSearchTime / nbSearches + "| Total time millis | " + sumSearchTime + "| Nb searches | " + nbSearches + "| Nb results | " + nbResults);  return nbFound;}  }
class C{  public Tokenizer(){  this(null,4096);}  }
class C{  public void run(){  AnnotationJob job;  long start;  try {    while ((job=jobqueue.take()) != null) {      start=System.currentTimeMillis();      job.getData();      readtime+=System.currentTimeMillis() - start;      start=System.currentTimeMillis();      job.labelData();      computetime+=System.currentTimeMillis() - start;      start=System.currentTimeMillis();      job.publishResults();      writetime+=System.currentTimeMillis() - start;      count++;    }  } catch (  InterruptedException e) {    return;  }}  }
class C{  public Executor checkpointEveryIteration(){  return withCheckpointFrequency(1);}  }
class C{  public static Complex subtract(Complex c,double a){  return new Complex(c.real - a,c.imag);}  }
class C{  public void multiplyMatrix(Matrix m){  if (m == null) {    String msg=Logging.getMessage("nullValue.MatrixIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Matrix top=this.popMatrix();  this.pushMatrix(top.multiply(m));}  }
class C{  protected synchronized void dropTmpFiles(){  if (writerInstances != null) {    for (    Entry<String,EventWriterWrapper> entry : writerInstances.entrySet()) {      dropTmpFile(entry.getValue());    }  }  if (defaultWriterInstance != null) {    dropTmpFile(defaultWriterInstance);  }  try {    for (    BatchListener listener : listeners) {      listener.onFilesDropped(partitionKey,currentFolder);    }  } catch (  Exception e) {    LOGGER.log(Level.SEVERE,e.toString(),e);  }  cleanup();}  }
class C{  private void generateIndexMap(int size){  mMapHeight=size / 2 + 1;  int mapWidth=mMapHeight + 1;  mIndexMap=new int[mMapHeight][mapWidth];  for (int x=0; x < mapWidth - 1; x+=2) {    mIndexMap[0][x]=size - 1 - x;    mIndexMap[0][x + 1]=x;  }  mCenterTapIndex=mapWidth - 1;  mIndexMap[0][mCenterTapIndex]=size / 2;  for (int x=1; x < mMapHeight; x++) {    for (int y=0; y < mapWidth; y++) {      mIndexMap[x][y]=mIndexMap[x - 1][y] + 2;      if (mIndexMap[x][y] >= size) {        mIndexMap[x][y]-=size + 1;        if (y == mCenterTapIndex && mIndexMap[x][y] < 0) {          mIndexMap[x][y]=size;        }      }    }  }}  }
class C{  private static void reset(float[] mtx){  for (int i=0, k=0; i < 3; i++) {    for (int j=0; j < 3; j++, k++) {      mtx[k]=((i == j) ? 1 : 0);    }  }}  }
class C{  private void splittingLines(){  String aString="I am a beautiful string";}  }
class C{  public void readFile() throws IOException {  readHeader();  readTags();}  }
class C{  void registerNode(long[] oid,int cursor,SnmpMibNode node) throws IllegalAccessException {  if (cursor >= oid.length)   throw new IllegalAccessException();  long var=oid[cursor];  int pos=retrieveIndex(var);  if (pos == nbChildren) {    nbChildren++;    varList=new int[nbChildren];    varList[0]=(int)var;    pos=0;    if ((cursor + 1) == oid.length) {      children.insertElementAt(node,pos);      return;    }    SnmpMibOid child=new SnmpMibOid();    children.insertElementAt(child,pos);    child.registerNode(oid,cursor + 1,node);    return;  }  if (pos == -1) {    int[] tmp=new int[nbChildren + 1];    tmp[nbChildren]=(int)var;    System.arraycopy(varList,0,tmp,0,nbChildren);    varList=tmp;    nbChildren++;    SnmpMibNode.sort(varList);    int newPos=retrieveIndex(var);    varList[newPos]=(int)var;    if ((cursor + 1) == oid.length) {      children.insertElementAt(node,newPos);      return;    }    SnmpMibOid child=new SnmpMibOid();    children.insertElementAt(child,newPos);    child.registerNode(oid,cursor + 1,node);  } else {    SnmpMibNode child=children.elementAt(pos);    if ((cursor + 1) == oid.length) {      if (child == node)       return;      if (child != null && node != null) {        if (node instanceof SnmpMibGroup) {          ((SnmpMibOid)child).exportChildren((SnmpMibOid)node);          children.setElementAt(node,pos);          return;        } else         if ((node instanceof SnmpMibOid) && (child instanceof SnmpMibGroup)) {          ((SnmpMibOid)node).exportChildren((SnmpMibOid)child);          return;        } else         if (node instanceof SnmpMibOid) {          ((SnmpMibOid)child).exportChildren((SnmpMibOid)node);          children.setElementAt(node,pos);          return;        }      }      children.setElementAt(node,pos);    } else {      if (child == null)       throw new IllegalAccessException();      ((SnmpMibOid)child).registerNode(oid,cursor + 1,node);    }  }}  }
class C{  public SVGFilterDescriptor toSVG(BufferedImageOp filter,Rectangle filterRect){  if (filter instanceof LookupOp)   return toSVG((LookupOp)filter); else   return null;}  }
class C{  @Deprecated public static String join(String delimiter,String... parts){  if (delimiter == null) {    throw new IllegalArgumentException("First argument can't be null.");  }  StringBuilder sb=new StringBuilder();  for (  String alias : parts) {    if (sb.length() != 0) {      sb.append(delimiter);    }    sb.append(alias);  }  return sb.toString();}  }
class C{  public static boolean isUnlikelyToBeRenamed(String pkg){  return pkg.startsWith("java.");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(getInterfaceName());  dest.writeInt(mLinkAddresses.size());  for (  LinkAddress linkAddress : mLinkAddresses) {    dest.writeParcelable(linkAddress,flags);  }  dest.writeInt(mDnses.size());  for (  InetAddress d : mDnses) {    dest.writeByteArray(d.getAddress());  }  dest.writeInt(mRoutes.size());  for (  RouteInfo route : mRoutes) {    dest.writeParcelable(route,flags);  }  if (mHttpProxy != null) {    dest.writeByte((byte)1);    dest.writeParcelable(mHttpProxy,flags);  } else {    dest.writeByte((byte)0);  }}  }
class C{  public void rotate(float xRotAngle,float zRotAngle){  if (mapMode)   return;  setAzAndEl(azimuth + (zRotAngle * 0.5 * Math.PI / 360),elevation + (xRotAngle * 0.5 * Math.PI / 360));  if (hikeMode)   rotateCamera(); else   rotateTurntable(camera.getDistanceToCoR());  updateStatus();}  }
class C{  private boolean isOneOf(char ch,final char[] charray){  boolean result=false;  for (  char element : charray) {    if (ch == element) {      result=true;      break;    }  }  return result;}  }
class C{  public void pack(){  if (popup != null) {    Dimension pref=getPreferredSize();    if (pref == null || pref.width != getWidth() || pref.height != getHeight()) {      showPopup();    } else {      validate();    }  }}  }
class C{  public static short[] shorts(short... elements){  return elements;}  }
class C{  public void testClose1(){  try {    target.close();    target.next();    fail("Should get SQLException");  } catch (  SQLException e) {  }}  }
class C{  public void displayState(){  PrintWriter xout=context.get(Log.outKey);  xout.println("File Object History : " + fileObjectHistory);  xout.println("Open Type Names     : " + openTypeNames);  xout.println("Gen. Src Names      : " + generatedSourceNames);  xout.println("Gen. Cls Names      : " + generatedClasses.keySet());  xout.println("Agg. Gen. Src Names : " + aggregateGeneratedSourceNames);  xout.println("Agg. Gen. Cls Names : " + aggregateGeneratedClassNames);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.664 -0500",hash_original_method="D0A4CF23F1E9AE32CFAA8649387F142B",hash_generated_method="79BF9843443FC370A29F536A14E6646B") public boolean retainAll(Collection<?> c){  return al.retainAll(c);}  }
class C{  public double num(){  return m_val ? 1.0 : 0.0;}  }
class C{  public static int lowestOneBit(int i){  return i & -i;}  }
class C{  public static boolean hasDefaultImplementation(final Method method){  return method.getAnnotation(Implemented.class) != null;}  }
class C{  public static boolean isURIRewritten(Node node){  return node.hasProperty(APM_ORIGINAL_URI);}  }
class C{  public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){  return mGraphics.drawImage(img,xform,obs);}  }
class C{  private void deleteMessage(){  Intent intent=new Intent(SmsPopupActivity.this.getApplicationContext(),SmsPopupUtilsService.class);  intent.setAction(SmsPopupUtilsService.ACTION_DELETE_MESSAGE);  intent.putExtras(smsPopupPager.getActiveMessage().toBundle());  WakefulBroadcastReceiver.startWakefulService(getApplicationContext(),intent);  removeActiveMessage();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static JSONObject toJSONObject(XMLTokener x) throws JSONException {  return (JSONObject)parse(x,false,null);}  }
class C{  public void testWithFail(Instances data) throws Exception {  if (!test(data)) {    throw m_FailReason;  }}  }
class C{  public static void main(final String[] args){  final CacheServerLauncher launcher=new CacheServerLauncher("CacheServer");  boolean inServer=false;  try {    if (args.length > 0) {      if (args[0].equalsIgnoreCase("start")) {        launcher.start(args);      } else       if (args[0].equalsIgnoreCase("server")) {        inServer=true;        launcher.server(args);      } else       if (args[0].equalsIgnoreCase("stop")) {        launcher.stop(args);      } else       if (args[0].equalsIgnoreCase("status")) {        launcher.status(args);      } else {        launcher.usage();        System.exit(1);      }    } else {      launcher.usage();      System.exit(1);    }    throw new Exception(LocalizedStrings.CacheServerLauncher_INTERNAL_ERROR_SHOULDNT_REACH_HERE.toLocalizedString());  } catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable t) {    SystemFailure.checkFailure();    t.printStackTrace();    if (inServer) {      launcher.setServerError(LocalizedStrings.CacheServerLauncher_ERROR_STARTING_SERVER_PROCESS.toLocalizedString(),t);    }    launcher.restoreStdOut();    if (launcher.logger != null) {      launcher.logger.severe(LocalizedStrings.CacheServerLauncher_CACHE_SERVER_ERROR,t);    } else {      System.out.println(LocalizedStrings.CacheServerLauncher_ERROR_0.toLocalizedString(t.getMessage()));    }    System.exit(1);  }}  }
class C{  public static <T>list<list<T>> divise(Iterable<T> iterable,int numberOfPieces){  return XUtils.divise(iterable,numberOfPieces);}  }
class C{  public static <T>Middleware<AsyncHandler<Response<T>>,AsyncHandler<Response<ByteString>>> htmlSerializeResponse(final String templateName){  return null;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.FOR_STATEMENT__STATEMENT:    setStatement((Statement)newValue);  return;case N4JSPackage.FOR_STATEMENT__EXPRESSION:setExpression((Expression)newValue);return;case N4JSPackage.FOR_STATEMENT__INIT_EXPR:setInitExpr((Expression)newValue);return;case N4JSPackage.FOR_STATEMENT__UPDATE_EXPR:setUpdateExpr((Expression)newValue);return;case N4JSPackage.FOR_STATEMENT__FOR_IN:setForIn((Boolean)newValue);return;case N4JSPackage.FOR_STATEMENT__FOR_OF:setForOf((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static int compare(Object left,String right) throws PageException {  if (left instanceof String)   return compare((String)left,right); else   if (left instanceof Number)   return compare(((Number)left).doubleValue(),right); else   if (left instanceof Boolean)   return compare(((Boolean)left).booleanValue(),right); else   if (left instanceof Date)   return compare((Date)left,right); else   if (left instanceof Castable) {    if (isComparableComponent((Castable)left))     return compareComponent((Castable)left,right);    return ((Castable)left).compareTo(right);  } else   if (left instanceof Locale)   return compare((Locale)left,right); else   if (left == null)   return "".compareToIgnoreCase(right); else   if (left instanceof Character)   return compare(((Character)left).toString(),right); else   if (left instanceof Calendar)   return compare(((Calendar)left).getTime(),right); else   if (left instanceof TimeZone)   return compare((TimeZone)left,right); else   return error(false,true);}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  String parse(String cellStr,int layoutConstant){  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutConstant];}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"xadd");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a add instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  if (sourceResult.getSize() != targetResult.getSize()) {    throw new InternalTranslationException("Error: The operands of ADD instructions must have equal size");  }  final OperandSize size=sourceResult.getSize();  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));  final String carryMask=String.valueOf(Helpers.getCarryMask(size));  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(size));  final String shiftValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));  final String shiftCarry=String.valueOf(-size.getBitSize());  final OperandSize resultSize=TranslationHelpers.getNextSize(size);  final String msb1=environment.getNextVariableString();  final String msb2=environment.getNextVariableString();  final String addResult=environment.getNextVariableString();  final String msbResult=environment.getNextVariableString();  final String msbSameBefore=environment.getNextVariableString();  final String msbSameBeforeNeg=environment.getNextVariableString();  final String msbChanged=environment.getNextVariableString();  final String tempOf=environment.getNextVariableString();  final String tempCf=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,size,sourceRegister,size,msbMask,size,msb1));  instructions.add(ReilHelpers.createAnd(offset + 1,size,targetRegister,size,msbMask,size,msb2));  instructions.add(ReilHelpers.createAdd(offset + 2,size,sourceRegister,size,targetRegister,resultSize,addResult));  instructions.add(ReilHelpers.createAnd(offset + 3,resultSize,addResult,resultSize,msbMask,size,msbResult));  instructions.add(ReilHelpers.createBsh(offset + 4,size,msbResult,size,shiftValue,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createXor(offset + 5,size,msb1,size,msb2,size,msbSameBefore));  instructions.add(ReilHelpers.createXor(offset + 6,size,msbSameBefore,size,msbMask,size,msbSameBeforeNeg));  instructions.add(ReilHelpers.createXor(offset + 7,size,msb1,size,msbResult,size,msbChanged));  instructions.add(ReilHelpers.createAnd(offset + 8,size,msbSameBeforeNeg,size,msbChanged,size,tempOf));  instructions.add(ReilHelpers.createBsh(offset + 9,size,tempOf,size,shiftValue,size,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 10,resultSize,addResult,resultSize,carryMask,resultSize,tempCf));  instructions.add(ReilHelpers.createBsh(offset + 11,resultSize,tempCf,resultSize,shiftCarry,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 12,resultSize,addResult,resultSize,truncateMask,size,truncatedResult));  instructions.add(ReilHelpers.createBisz(offset + 13,size,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  Helpers.writeBack(environment,offset + 14,sourceOperand,targetRegister,size,sourceResult.getAddress(),sourceResult.getType(),instructions);  Helpers.writeBack(environment,baseOffset + instructions.size(),targetOperand,truncatedResult,size,targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  public WriteFuture stopSsl(IoSession session) throws SSLException {  SslHandler sslHandler=getSslSessionHandler(session);  NextFilter nextFilter=(NextFilter)session.getAttribute(NEXT_FILTER);  WriteFuture future;  try {synchronized (sslHandler) {      future=initiateClosure(nextFilter,session);    }    sslHandler.flushScheduledEvents();  } catch (  SSLException se) {    sslHandler.release();    throw se;  }  return future;}  }
class C{  public static List<ServiceDetailDescriptor> findModuleAPI(ModuleDetailDescriptor descriptor){  return new APIFinder().findModuleAPI(descriptor);}  }
class C{  public static void assertEquals(boolean expected,boolean actual){  Assert.assertEquals(expected,actual);}  }
class C{  public void updateText(float latPoint,float lonPoint,String stuff,int justify,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkText.write(latPoint,lonPoint,stuff,LinkText.DEFAULT_FONT,justify,properties,link.dos);}  }
class C{  @Override public boolean removeAll(Collection<?> keys){  if (keys == null)   return false;  Iterator<?> iter=keys.iterator();  while (iter.hasNext()) {    Object key=iter.next();    _map.remove(key);  }  return true;}  }
class C{  public EipAllTests(String name){  super(name);}  }
class C{  AStarNodeWrapper findMin(ArrayList<AStarNodeWrapper> set){  double min=100000;  AStarNodeWrapper minNode=null;  for (  AStarNodeWrapper n : set) {    if (n.fx < min) {      min=n.fx;      minNode=n;    }  }  return minNode;}  }
class C{  protected synchronized void destroy(Long position){  if (this.counters != null) {    this.counters.remove(position);  }}  }
class C{  public static Pattern createPattern(String[] patterns,boolean isCaseSensitive,boolean isRegexSearch) throws PatternSyntaxException {  StringBuffer pattern=new StringBuffer();  for (int i=0; i < patterns.length; i++) {    if (i > 0) {      pattern.append('|');    }    if (isRegexSearch) {      pattern.append(patterns[i]);    } else {      asRegEx(patterns[i],pattern);    }  }  return createPattern(pattern.toString(),isCaseSensitive,true);}  }
class C{  public MinimizeAwareProcessorDecorator(final Object processor){  this(processor,true);}  }
class C{  @Override public Codebase inverseEdit(Codebase input,Codebase referenceFrom,Codebase referenceTo,Map<String,String> options){  CodebaseMerger merger=new CodebaseMerger(ui,filesystem,cmd,differ,referenceFrom,input,referenceTo);  return merger.merge();}  }
class C{  public static ArrayList partitionIntoRanks(Individual[] inds){  Individual[] dummy=new Individual[0];  ArrayList frontsByRank=new ArrayList();  while (inds.length > 0) {    ArrayList front=new ArrayList();    ArrayList nonFront=new ArrayList();    MultiObjectiveFitness.partitionIntoParetoFront(inds,front,nonFront);    inds=(Individual[])nonFront.toArray(dummy);    frontsByRank.add(front);  }  return frontsByRank;}  }
class C{  public static void main(String[] args){  runClassifier(new SMOreg(),args);}  }
class C{  public static FragmentSearch newInstance(String param1,String param2){  FragmentSearch fragment=new FragmentSearch();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public void navigateToMainActivity(Context context){  Intent intent=new Intent(context,LessonCatalogActivity.class);  context.startActivity(intent);}  }
class C{  private boolean isMimeTypeEqual(MimeType mtype){  if (this.mimeType == null) {    return (mtype == null);  }  return mimeType.match(mtype);}  }
class C{  public static boolean isValidName(String name){  if (name == null) {    return false;  }  return name.length() > 3;}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.379 -0500",hash_original_method="8101547A28FD0D2F472FF84F23BAF09C",hash_generated_method="18ED4617EA25B83EFFD8CC7F38560051") protected ConnAdapter(PoolEntry entry,HttpRoute route){  super(SingleClientConnManager.this,entry);  markReusable();  entry.route=route;}  }
class C{  @Override public void focusOn(final IShape geometry){  renderer.camera.zoomFocus(geometry);}  }
class C{  @SafeVarargs public ConjunctiveValidator(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Validator<Type>... validators){  super(context,resourceId);  setValidators(validators);}  }
class C{  public Attributes2Impl(){  declared=EmptyArray.BOOLEAN;  specified=EmptyArray.BOOLEAN;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:43.398 -0500",hash_original_method="9CEB13EDEDC086BFEC8BA1088EE97A14",hash_generated_method="656413B9044418C61B8D0EFF05138943") public static void main(String[] argv) throws IOException, SAXException {  Scanner s=new HTMLScanner();  Reader r=new InputStreamReader(System.in,"UTF-8");  Writer w=new OutputStreamWriter(System.out,"UTF-8");  PYXWriter pw=new PYXWriter(w);  s.scan(r,pw);  w.close();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void createComputeProgram() throws IOException {  int program=glCreateProgram();  int cshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/hybridSsbo.glsl",GL_COMPUTE_SHADER);  int random=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/random.glsl",GL_COMPUTE_SHADER);  int randomCommon=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_COMPUTE_SHADER,"330");  glAttachShader(program,cshader);  glAttachShader(program,random);  glAttachShader(program,randomCommon);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.computeProgram=program;}  }
class C{  public void startUpload(String key,File file,boolean willBePublic) throws AmazonClientException, AmazonServiceException {  super.startUpload(awsS3BucketName,key,file,willBePublic);}  }
class C{  public boolean dump_types(){  return soot.PhaseOptions.getBoolean(options,"dump-types");}  }
class C{  public boolean isPanYEnabled(){  return mPanYEnabled;}  }
class C{  public static boolean isCompatibleURLStatic(ParsedURL url){  return url.getProtocol().equals(INTERNAL_PROTOCOL);}  }
class C{  private boolean checkPortal(PortalIcon icon){  Portal portal=icon.getPortal();  if (portal == null) {    deletePortalIcon(icon);  } else {    boolean home=false;    OBlock block=portal.getToBlock();    if (block == null) {      _parent._editor.highlight(icon);      JOptionPane.showMessageDialog(this,Bundle.getMessage("portalNeedsBlock",portal.getDisplayName()),Bundle.getMessage("makePortal"),JOptionPane.INFORMATION_MESSAGE);      return false;    }    home=_homeBlock.equals(block);    block=portal.getFromBlock();    if (block == null) {      _parent._editor.highlight(icon);      JOptionPane.showMessageDialog(this,Bundle.getMessage("portalNeedsBlock",portal.getDisplayName()),Bundle.getMessage("makePortal"),JOptionPane.INFORMATION_MESSAGE);      return false;    } else     if (!home) {      home=_homeBlock.equals(block);    }    if (!home) {      _parent._editor.highlight(icon);      JOptionPane.showMessageDialog(this,Bundle.getMessage("portalNotInCircuit",_homeBlock.getDisplayName()),Bundle.getMessage("makePortal"),JOptionPane.INFORMATION_MESSAGE);      return false;    }  }  return true;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSComment("IO movement methodName") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.551 -0500",hash_original_method="1B10CD3CDAEEB6B80C16851B9025C53B",hash_generated_method="06DB7B3814A8BF1C5F5E3702E706FE88") public void print(double dnum){  print(String.valueOf(dnum));}  }
class C{  public static BinaryType typeProxy(BinaryContext ctx,BinaryObjectEx obj){  if (ctx == null)   throw new BinaryObjectException("BinaryContext is not set for the object.");  return new BinaryTypeProxy(ctx,obj.typeId());}  }
class C{  public static byte[] uintTo2Bytes(int value){  return new byte[]{uintToByte(value & 0xff),uintToByte(value >> 8)};}  }
class C{  public SinusoidalGeneratorPanel(){  super();  this.add(tabbedPanel);  JTextField tfPhase=createTextField(null,null);  JTextField tfFrequency=createTextField(null,null);  mainPanel.addItem("Phase",tfPhase);  mainPanel.addItem("Frequency",tfFrequency);  mainPanel.addItem("Add noise",getAddNoise());  tabbedPanel.add(mainPanel,"Main");  tabbedPanel.add(getNoisePanel(),"Noise");}  }
class C{  protected Expression parseExpression() throws SyntaxError, IOException {  for (Expression e=parseTerm(); e != null; e=e.order()) {    Expression more=parseBinaryExpression(e);    if (more == null)     return e;    e=more;  }  return null;}  }
class C{  private String encodeUri(String uri){  String newUri="";  StringTokenizer st=new StringTokenizer(uri,"/ ",true);  while (st.hasMoreTokens()) {    String tok=st.nextToken();    if (tok.equals("/"))     newUri+="/"; else     if (tok.equals(" "))     newUri+="%20"; else {      newUri+=URLEncoder.encode(tok);    }  }  return newUri;}  }
class C{  public ProtocolEncoderException(){}  }
class C{  public static void main(String[] args){  Matrix I;  Matrix A;  Matrix B;  try {    System.out.println("\nIdentity\n");    I=Matrix.identity(3,5);    System.out.println("I(3,5)\n" + I);    System.out.println("\nbasic operations - square\n");    A=Matrix.random(3,3);    B=Matrix.random(3,3);    System.out.println("A\n" + A);    System.out.println("B\n" + B);    System.out.println("A'\n" + A.inverse());    System.out.println("A^T\n" + A.transpose());    System.out.println("A+B\n" + A.plus(B));    System.out.println("A*B\n" + A.times(B));    System.out.println("X from A*X=B\n" + A.solve(B));    System.out.println("\nbasic operations - non square\n");    A=Matrix.random(2,3);    B=Matrix.random(3,4);    System.out.println("A\n" + A);    System.out.println("B\n" + B);    System.out.println("A*B\n" + A.times(B));    System.out.println("\nsqrt (1)\n");    A=new Matrix(new double[][]{{5,-4,1,0,0},{-4,6,-4,1,0},{1,-4,6,-4,1},{0,1,-4,6,-4},{0,0,1,-4,5}});    System.out.println("A\n" + A);    System.out.println("sqrt(A)\n" + A.sqrt());    System.out.println("\nsqrt (2)\n");    A=new Matrix(new double[][]{{7,10},{15,22}});    System.out.println("A\n" + A);    System.out.println("sqrt(A)\n" + A.sqrt());    System.out.println("det(A)\n" + A.det() + "\n");    System.out.println("\nEigenvalue Decomposition\n");    EigenvalueDecomposition evd=A.eig();    System.out.println("[V,D] = eig(A)");    System.out.println("- V\n" + evd.getV());    System.out.println("- D\n" + evd.getD());    System.out.println("\nLU Decomposition\n");    LUDecomposition lud=A.lu();    System.out.println("[L,U,P] = lu(A)");    System.out.println("- L\n" + lud.getL());    System.out.println("- U\n" + lud.getU());    System.out.println("- P\n" + Utils.arrayToString(lud.getPivot()) + "\n");    System.out.println("\nRegression\n");    B=new Matrix(new double[][]{{3},{2}});    double ridge=0.5;    double[] weights=new double[]{0.3,0.7};    System.out.println("A\n" + A);    System.out.println("B\n" + B);    System.out.println("ridge = " + ridge + "\n");    System.out.println("weights = " + Utils.arrayToString(weights) + "\n");    System.out.println("A.regression(B, ridge)\n" + A.regression(B,ridge) + "\n");    System.out.println("A.regression(B, weights, ridge)\n" + A.regression(B,weights,ridge) + "\n");    System.out.println("\nWriter/Reader\n");    StringWriter writer=new StringWriter();    A.write(writer);    System.out.println("A.write(Writer)\n" + writer);    A=new Matrix(new StringReader(writer.toString()));    System.out.println("A = new Matrix.read(Reader)\n" + A);    System.out.println("\nMatlab-Format\n");    String matlab="[ 1   2;3 4 ]";    System.out.println("Matlab: " + matlab);    System.out.println("from Matlab:\n" + Matrix.parseMatlab(matlab));    System.out.println("to Matlab:\n" + Matrix.parseMatlab(matlab).toMatlab());    matlab="[1 2 3 4;3 4 5 6;7 8 9 10]";    System.out.println("Matlab: " + matlab);    System.out.println("from Matlab:\n" + Matrix.parseMatlab(matlab));    System.out.println("to Matlab:\n" + Matrix.parseMatlab(matlab).toMatlab() + "\n");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean matches(Object e,AttributeResolver attRes,TreeResolver treeRes){  if (siblingSelector != null) {    Object sib=siblingSelector.getAppropriateSibling(e,treeRes);    if (sib == null) {      return false;    }    if (!siblingSelector.matches(sib,attRes,treeRes)) {      return false;    }  }  if (_name == null || treeRes.matchesElement(e,_namespaceURI,_name)) {    if (conditions != null) {      for (java.util.Iterator i=conditions.iterator(); i.hasNext(); ) {        Condition c=(Condition)i.next();        if (!c.matches(e,attRes,treeRes)) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  private int alloc(MemoryChunk memoryChunk,int addr,int size){  if (addr < memoryChunk.addr || memoryChunk.addr + memoryChunk.size < addr + size) {    return 0;  } else   if (memoryChunk.size == size) {    remove(memoryChunk);  } else   if (memoryChunk.addr == addr) {    memoryChunk.size-=size;    memoryChunk.addr+=size;  } else   if (memoryChunk.addr + memoryChunk.size == addr + size) {    memoryChunk.size-=size;  } else {    int lowSize=addr - memoryChunk.addr;    int highSize=memoryChunk.size - lowSize - size;    MemoryChunk highMemoryChunk=new MemoryChunk(addr + size,highSize);    memoryChunk.size=lowSize;    addAfter(highMemoryChunk,memoryChunk);  }  return addr;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.445 -0400",hash_original_method="CE9467A20F4CACD32CB333CB576C654A",hash_generated_method="7264E26D2B721ACBFD19AC987E94B0CA") public boolean isDoubleMetaphoneEqual(String value1,String value2,boolean alternate){  return doubleMetaphone(value1,alternate).equals(doubleMetaphone(value2,alternate));}  }
class C{  final Attribute stringifySyntaxDesc(Attributes syntaxDefAttrs) throws NamingException {  Attribute syntaxDescAttr=new BasicAttribute(SYNTAXDESC_ATTR_ID);  syntaxDescAttr.add(syntaxDef2SyntaxDesc(syntaxDefAttrs));  return syntaxDescAttr;}  }
class C{  Date toDate(Calendar calendar){  return calendar.getTime();}  }
class C{  public static String showInputDialog(Component parentComponent,Object message,Object initialSelectionValue){  return (String)showInputDialog(parentComponent,message,UIManager.getString("OptionPane.inputDialogTitle",parentComponent),QUESTION_MESSAGE,null,null,initialSelectionValue);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public JSONObject(boolean ordered){  this.map=ordered ? new LinkedHashMap<String,Object>() : new HashMap<String,Object>();}  }
class C{  public void reverseLayout(boolean reverseLayout){  if (mReverseLayout == reverseLayout) {    return;  }  mReverseLayout=reverseLayout;  invalidate();}  }
class C{  @Deprecated public void listLinkedNotebooks(OnClientCallback<List<LinkedNotebook>> callback){  AsyncReflector.execute(mClient,callback,"listLinkedNotebooks",mAuthenticationToken);}  }
class C{  @Override public void updateClob(int columnIndex,Reader x) throws SQLException {  updateClob(columnIndex,x,-1);}  }
class C{  public void init(String propsFilename) throws Exception {  ri.init(propsFilename);}  }
class C{  public static ImageSource asset(String assetName){  if (assetName == null) {    throw new NullPointerException("Asset name must not be null");  }  return uri(ASSET_SCHEME + assetName);}  }
class C{  public static int bin2Dec(String binaryString,int index,int n,int result){  result+=(Integer.parseInt(binaryString.charAt(index) + "") * (int)Math.pow(2,n));  if (n == 0)   return result; else   return bin2Dec(binaryString,index + 1,n - 1,result);}  }
class C{  public void play(String musicName){  if (musicMap.containsKey(musicName)) {    soundPool.play(musicMap.get(musicName),UIdefaultData.defaultMusicVolume,UIdefaultData.defaultMusicVolume,0,0,1);  }}  }
class C{  private boolean isValidURL(String url){  try {    HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();    conn.setRequestMethod("HEAD");    conn.connect();    return conn.getResponseCode() == HttpURLConnection.HTTP_OK;  } catch (  MalformedURLException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return false;}  }
class C{  public DTMException(String message){  super(message);  this.containedException=null;  this.locator=null;}  }
class C{  private void checkServiceRunning(){  if (mApp.isServiceRunning() && mApp.getService().getCursor() != null) {    initMiniPlayer();    setPlayPauseButton();    initListViewAdapter(mInitListViewParams);  } else {    showEmptyTextView();  }}  }
class C{  public GuessProtocolStruct(GuessProtocolStruct other){  if (other.isSetMap_field()) {    Map<String,String> __this__map_field=new HashMap<String,String>(other.map_field);    this.map_field=__this__map_field;  }}  }
class C{  public EncoderException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public void merge(Label lbl){  for (int i=0; i < 2; i++) {    if (elt[i] == null && lbl.elt[i] != null) {      elt[i]=new TopologyLocation(lbl.elt[i]);    } else {      elt[i].merge(lbl.elt[i]);    }  }}  }
class C{  @Override public void create(SOAPBody soapBodyNode) throws Exception {  getMarshaller().marshal(bodyJaxbElement,soapBodyNode);}  }
class C{  public synchronized void loadClassesAndRegisterFunctions() throws ClassNotFoundException {  final boolean isDebugEnabled=logger.isDebugEnabled();  if (isDebugEnabled) {    logger.debug("Registering functions with JarClassLoader: {}",this);  }  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(this.jarByteContent);  JarInputStream jarInputStream=null;  try {    jarInputStream=new JarInputStream(byteArrayInputStream);    JarEntry jarEntry=jarInputStream.getNextJarEntry();    while (jarEntry != null) {      if (jarEntry.getName().endsWith(".class")) {        if (isDebugEnabled) {          logger.debug("Attempting to load class: {}, from JAR file: {}",jarEntry.getName(),this.file.getAbsolutePath());        }        final String className=jarEntry.getName().replaceAll("/","\\.").substring(0,(jarEntry.getName().length() - 6));        try {          Class<?> clazz=loadClass(className,true,false);          Collection<Function> registerableFunctions=getRegisterableFunctionsFromClass(clazz);          for (          Function function : registerableFunctions) {            FunctionService.registerFunction(function);            if (isDebugEnabled) {              logger.debug("Registering function class: {}, from JAR file: {}",className,this.file.getAbsolutePath());            }            this.registeredFunctions.add(function);          }        } catch (        ClassNotFoundException cnfex) {          logger.error("Unable to load all classes from JAR file: {}",this.file.getAbsolutePath(),cnfex);          throw cnfex;        }catch (        NoClassDefFoundError ncdfex) {          logger.error("Unable to load all classes from JAR file: {}",this.file.getAbsolutePath(),ncdfex);          throw ncdfex;        }      }      jarEntry=jarInputStream.getNextJarEntry();    }  } catch (  IOException ioex) {    logger.error("Exception when trying to read class from ByteArrayInputStream",ioex);  } finally {    if (jarInputStream != null) {      try {        jarInputStream.close();      } catch (      IOException ioex) {        logger.error("Exception attempting to close JAR input stream",ioex);      }    }  }  this.jarByteContent=new byte[0];}  }
class C{  public T caseLookAhead(LookAhead object){  return null;}  }
class C{  public static boolean validateBucketName(String bucketName){  if (bucketName == null) {    return false;  }  return bucketName.matches(BUCKET_NAMING_REGEX);}  }
class C{  public static boolean checkEquals(final double a,final double b,final double tolerance){  assertIsNumber(a);  assertIsNumber(b);  return a >= (b - tolerance) && a <= (b + tolerance);}  }
class C{  public Set<SolutionUser> findSolutionUsersInGroup(String tenantName,String groupName,String searchString,int limit) throws Exception {  return getService().findSolutionUsersInGroup(tenantName,groupName,searchString,limit,this.getServiceContext());}  }
class C{  public SystemClassLoader(ClassLoader parent){  super(parent,"system",true);  String preScan=System.getProperty("caucho.jar.prescan");  String osArch=System.getProperty("os.arch");  if (!"false".equals(preScan) && !"arm".equals(osArch)) {    DynamicClassLoader.setJarCacheEnabled(true);  }  String smallmem=System.getProperty("caucho.smallmem");  if (smallmem != null && !"false".equals(smallmem)) {    DynamicClassLoader.setJarCacheEnabled(false);  }}  }
class C{  @Deprecated protected String escapeXmlName(final String name){  return encodeNode(name);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.923 -0500",hash_original_method="7636A1ABF3E5D698C7B1F582C19267F0",hash_generated_method="9F2716432E7B0E6F949B4DA4024FDAFA") public boolean intersects(float left,float top,float right,float bottom){  return (((left + top + right+ bottom+ getTaintInt())) == 1);}  }
class C{  public void capture(){  BufferedImage oldImage=this.image;  try {    Rectangle rect=new Rectangle(originX,originY,getWidth(),getHeight());    this.image=new Robot().createScreenCapture(rect);    propertyChangeSupport.firePropertyChange("image",oldImage,this.image);  } catch (  AWTException e) {    e.printStackTrace();  }}  }
class C{  public ESRILinkPointRecord(byte b[],int off) throws IOException {  super(b,off);}  }
class C{  public static GraphDocument importGraphDocument(IFile file){  return INSTANCE.provideGraphDocument(file);}  }
class C{  @NonNull public static Animator sequence(@NonNull Animator... animators){  AnimatorSet set=new AnimatorSet();  set.playSequentially(animators);  return set;}  }
class C{  private void measureSleep(){  System.out.printf("                                 measured\n");  System.out.printf("sleep time   iterations   total time   per-sleep\n");  for (int sleepTime=0; sleepTime <= 20; ++sleepTime) {    int iterations=(sleepTime == 0) ? 10000 : (1000 / sleepTime);    long startTime=System.nanoTime();    for (int i=0; i < iterations; ++i) {      try {        Thread.sleep(sleepTime);      } catch (      Exception e) {      }    }    long endTime=System.nanoTime();    long totalTime=(endTime - startTime) / 1000000;    float calculatedSleepTime=totalTime / (float)iterations;    System.out.printf("   %2d          %5d         %4d       %5.2f\n",sleepTime,iterations,totalTime,calculatedSleepTime);  }}  }
class C{  public static long memoryUsage(int precision){  return 1L << precision;}  }
class C{  public void ensureCapacity(int minCapacity){  this.elements.ensureCapacity(minCapacity);}  }
class C{  public Template findTemplate(String name){  return findTemplate(name,null);}  }
class C{  protected void appendHTML(final StringBuilder sbuf,final char ch){switch (ch) {case '<':    sbuf.append("&lt;");  break;case '>':sbuf.append("&gt;");break;case '&':sbuf.append("&amp;");break;default :sbuf.append(ch);break;}}  }
class C{  public static final Criterion headerContains(String headerName,String value){  if (value == null || value.length() == 0) {    return headerExists(headerName);  } else {    return new HeaderCriterion(headerName,new ContainsOperator(value));  }}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  protected void initialise(){  pathLength=0f;  PathIterator pi=path.getPathIterator(new AffineTransform());  SingleSegmentPathIterator sspi=new SingleSegmentPathIterator();  segments=new ArrayList(20);  List indexes=new ArrayList(20);  int index=0;  int origIndex=-1;  float lastMoveX=0f;  float lastMoveY=0f;  float currentX=0f;  float currentY=0f;  float[] seg=new float[6];  int segType;  segments.add(new PathSegment(PathIterator.SEG_MOVETO,0f,0f,0f,origIndex));  while (!pi.isDone()) {    origIndex++;    indexes.add(new Integer(index));    segType=pi.currentSegment(seg);switch (segType) {case PathIterator.SEG_MOVETO:      segments.add(new PathSegment(segType,seg[0],seg[1],pathLength,origIndex));    currentX=seg[0];  currentY=seg[1];lastMoveX=currentX;lastMoveY=currentY;index++;pi.next();break;case PathIterator.SEG_LINETO:pathLength+=Point2D.distance(currentX,currentY,seg[0],seg[1]);segments.add(new PathSegment(segType,seg[0],seg[1],pathLength,origIndex));currentX=seg[0];currentY=seg[1];index++;pi.next();break;case PathIterator.SEG_CLOSE:pathLength+=Point2D.distance(currentX,currentY,lastMoveX,lastMoveY);segments.add(new PathSegment(PathIterator.SEG_LINETO,lastMoveX,lastMoveY,pathLength,origIndex));currentX=lastMoveX;currentY=lastMoveY;index++;pi.next();break;default :sspi.setPathIterator(pi,currentX,currentY);FlatteningPathIterator fpi=new FlatteningPathIterator(sspi,0.01f);while (!fpi.isDone()) {segType=fpi.currentSegment(seg);if (segType == PathIterator.SEG_LINETO) {pathLength+=Point2D.distance(currentX,currentY,seg[0],seg[1]);segments.add(new PathSegment(segType,seg[0],seg[1],pathLength,origIndex));currentX=seg[0];currentY=seg[1];index++;}fpi.next();}}}segmentIndexes=new int[indexes.size()];for (int i=0; i < segmentIndexes.length; i++) {segmentIndexes[i]=((Integer)indexes.get(i)).intValue();}initialised=true;}  }
class C{  public VNXeCommandJob restoreFileSystemSnap(String snapId,VNXeSnapRestoreParam restoreParam,String softwareVersion) throws VNXeException {  StringBuilder urlBuilder;  if (!VNXeUtils.isHigherVersion(softwareVersion,VNXeConstants.VNXE_BASE_SOFT_VER)) {    urlBuilder=new StringBuilder(URL_INSTANCE);  } else {    urlBuilder=new StringBuilder(URL_INSTANCE_V31);  }  urlBuilder.append(snapId);  urlBuilder.append(URL_RESTORE);  _url=urlBuilder.toString();  return postRequestAsync(restoreParam);}  }
class C{  public static void validateSteppedPrice(List<VOSteppedPrice> steppedPriceList) throws ValidationException {  if (steppedPriceList != null) {    Set<Long> limitSet=new HashSet<Long>();    for (    VOSteppedPrice step : steppedPriceList) {      validateSteppedPrice(step);      Long limit=step.getLimit();      if (limitSet.contains(limit)) {        String param="";        if (step.getLimit() != null) {          param=String.valueOf(step.getLimit().longValue());        }        throw new ValidationException(ReasonEnum.STEPPED_PRICING_DUPLICATE_LIMIT,FIELD_NAME_LIMIT,new Object[]{param});      }      limitSet.add(limit);    }  }}  }
class C{  public boolean isEmpty(){  return head == null;}  }
class C{  public void visitErrorNode(ErrorNode node){  ProgressIndicatorProvider.checkCanceled();  Token badToken=node.getSymbol();  boolean isConjuredToken=badToken.getTokenIndex() < 0;  int nodeStartIndex=badToken.getStartIndex();  SyntaxError error=tokenToErrorMap.get(nodeStartIndex);  if (error != null) {    PsiBuilder.Marker errorMarker=builder.mark();    if (badToken.getStartIndex() >= 0 && badToken.getType() != Token.EOF && !isConjuredToken) {      builder.advanceLexer();    }    String message=String.format("%s%n",error.getMessage());    errorMarker.error(message);  } else {    if (isConjuredToken) {      PsiBuilder.Marker errorMarker=builder.mark();      errorMarker.error(badToken.getText());    } else {      builder.advanceLexer();    }  }}  }
class C{  public synchronized void releaseCommitPoint(Long indexCommitGen){  AtomicInteger reserveCount=savedCommits.get(indexCommitGen);  if (reserveCount == null)   return;  if (reserveCount.decrementAndGet() <= 0) {    savedCommits.remove(indexCommitGen);  }}  }
class C{  @SuppressWarnings("unchecked") public MinimumSpanningForest(Graph<V,E> graph,Forest<V,E> forest,V root){  if (forest.getVertexCount() != 0) {    throw new IllegalArgumentException("Supplied Forest must be empty");  }  this.graph=graph;  this.forest=forest;  this.weights=(Function<E,Double>)Functions.constant(1.0);  Set<E> unfinishedEdges=new HashSet<E>(graph.getEdges());  if (graph.getVertices().contains(root)) {    this.forest.addVertex(root);  }  updateForest(forest.getVertices(),unfinishedEdges);}  }
class C{  private void loadPluginInternalPreferences(){  if (pluginInternalPrefs != null) {    return;  }  pluginInternalPrefsStorage=new PluginInternalPreferencesStorage(cordova.getActivity());  PluginInternalPreferences config=pluginInternalPrefsStorage.loadFromPreference();  if (config == null || TextUtils.isEmpty(config.getCurrentReleaseVersionName())) {    config=PluginInternalPreferences.createDefault(cordova.getActivity());    pluginInternalPrefsStorage.storeInPreference(config);  }  pluginInternalPrefs=config;}  }
class C{  private void followScrollToolbarLayout(float yOffset){  if (mHeader.toolbar.getBottom() == 0) {    return;  }  if (toolbarJoinsTabs()) {    if (firstScrollValue == Float.MIN_VALUE) {      firstScrollValue=yOffset;    }    float translationY=firstScrollValue - yOffset;    if (translationY > 0) {      translationY=0;    }    if (ENABLE_LOG) {      Log.d(TAG,"translationY " + translationY);    }    ViewCompat.setTranslationY(mHeader.toolbarLayout,translationY);  } else {    ViewCompat.setTranslationY(mHeader.toolbarLayout,0);    justToolbarAnimated=false;  }  followScrollToolbarIsVisible=(ViewCompat.getY(mHeader.toolbarLayout) >= 0);}  }
class C{  private TextEditor escapeSpecialCharsWithinTagAttributes(TextEditor text){  Collection<HTMLToken> tokens=text.tokenizeHTML();  TextEditor newText=new TextEditor("");  for (  HTMLToken token : tokens) {    String value="";    value=token.getText();    if (token.isTag()) {      value=value.replaceAll("\\\\",CHAR_PROTECTOR.encode("\\"));      value=value.replaceAll("`",CHAR_PROTECTOR.encode("`"));      value=value.replaceAll("\\*",CHAR_PROTECTOR.encode("*"));      value=value.replaceAll("_",CHAR_PROTECTOR.encode("_"));    }    newText.append(value);  }  return newText;}  }
class C{  private SimpleClassTypeSignature parsePackageNameAndSimpleClassTypeSignature(){  String id=parseIdentifier();  if (current() == '/') {    StringBuilder idBuild=new StringBuilder(id);    while (current() == '/') {      advance();      idBuild.append(".");      idBuild.append(parseIdentifier());    }    id=idBuild.toString();  }switch (current()) {case ';':    return SimpleClassTypeSignature.make(id,false,new TypeArgument[0]);case '<':  if (DEBUG)   System.out.println("\t remainder: " + remainder());return SimpleClassTypeSignature.make(id,false,parseTypeArguments());default :throw error("expected '<' or ';' but got " + current());}}  }
class C{  private void selectGraphicRendition(){  for (int i=0; i <= mArgIndex; i++) {    int code=mArgs[i];    if (code < 0) {      if (mArgIndex > 0) {        continue;      } else {        code=0;      }    }    if (code == 0) {      mForeColor=TextStyle.COLOR_INDEX_FOREGROUND;      mBackColor=TextStyle.COLOR_INDEX_BACKGROUND;      mEffect=0;    } else     if (code == 1) {      mEffect|=TextStyle.CHARACTER_ATTRIBUTE_BOLD;    } else     if (code == 2) {      mEffect|=TextStyle.CHARACTER_ATTRIBUTE_DIM;    } else     if (code == 3) {      mEffect|=TextStyle.CHARACTER_ATTRIBUTE_ITALIC;    } else     if (code == 4) {      mEffect|=TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE;    } else     if (code == 5) {      mEffect|=TextStyle.CHARACTER_ATTRIBUTE_BLINK;    } else     if (code == 7) {      mEffect|=TextStyle.CHARACTER_ATTRIBUTE_INVERSE;    } else     if (code == 8) {      mEffect|=TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE;    } else     if (code == 9) {      mEffect|=TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH;    } else     if (code == 10) {    } else     if (code == 11) {    } else     if (code == 22) {      mEffect&=~(TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_DIM);    } else     if (code == 23) {      mEffect&=~TextStyle.CHARACTER_ATTRIBUTE_ITALIC;    } else     if (code == 24) {      mEffect&=~TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE;    } else     if (code == 25) {      mEffect&=~TextStyle.CHARACTER_ATTRIBUTE_BLINK;    } else     if (code == 27) {      mEffect&=~TextStyle.CHARACTER_ATTRIBUTE_INVERSE;    } else     if (code == 28) {      mEffect&=~TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE;    } else     if (code == 29) {      mEffect&=~TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH;    } else     if (code >= 30 && code <= 37) {      mForeColor=code - 30;    } else     if (code == 38 || code == 48) {      if (i + 2 > mArgIndex)       continue;      int firstArg=mArgs[i + 1];      if (firstArg == 2) {        if (i + 4 > mArgIndex) {          Log.w(EmulatorDebug.LOG_TAG,"Too few CSI" + code + ";2 RGB arguments");        } else {          int red=mArgs[i + 2], green=mArgs[i + 3], blue=mArgs[i + 4];          if (red < 0 || green < 0 || blue < 0 || red > 255 || green > 255 || blue > 255) {            finishSequenceAndLogError("Invalid RGB: " + red + ","+ green+ ","+ blue);          } else {            int argbColor=0xff000000 | (red << 16) | (green << 8)| blue;            if (code == 38) {              mForeColor=argbColor;            } else {              mBackColor=argbColor;            }          }          i+=4;        }      } else       if (firstArg == 5) {        int color=mArgs[i + 2];        i+=2;        if (color >= 0 && color < TextStyle.NUM_INDEXED_COLORS) {          if (code == 38) {            mForeColor=color;          } else {            mBackColor=color;          }        } else {          if (LOG_ESCAPE_SEQUENCES)           Log.w(EmulatorDebug.LOG_TAG,"Invalid color index: " + color);        }      } else {        finishSequenceAndLogError("Invalid ISO-8613-3 SGR first argument: " + firstArg);      }    } else     if (code == 39) {      mForeColor=TextStyle.COLOR_INDEX_FOREGROUND;    } else     if (code >= 40 && code <= 47) {      mBackColor=code - 40;    } else     if (code == 49) {      mBackColor=TextStyle.COLOR_INDEX_BACKGROUND;    } else     if (code >= 90 && code <= 97) {      mForeColor=code - 90 + 8;    } else     if (code >= 100 && code <= 107) {      mBackColor=code - 100 + 8;    } else {      if (LOG_ESCAPE_SEQUENCES)       Log.w(EmulatorDebug.LOG_TAG,String.format("SGR unknown code %d",code));    }  }}  }
class C{  @Override public void end(String stackId,long beginTime,long endTime,long consumeTime,Object returnValue,Exception e){  TransManager manager=TransManager.getInstance();  try {    boolean printFlag=PropertyHolder.getBooleanProperty("log.trans.db.print");    if (manager.isError() || manager.isTimeout() || printFlag) {      saveData(manager,beginTime,endTime,consumeTime,returnValue,e);    }  } catch (  Exception ex) {    logger.error(ex);  }}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(getChildCount() - 1,-1,true,false);  return child == null ? NO_POSITION : getPosition(child);}  }
class C{  private void fireRosterChangedEvent(Collection<String> addedEntries,Collection<String> updatedEntries,Collection<String> deletedEntries){  for (  RosterListener listener : rosterListeners) {    if (!addedEntries.isEmpty()) {      listener.entriesAdded(addedEntries);    }    if (!updatedEntries.isEmpty()) {      listener.entriesUpdated(updatedEntries);    }    if (!deletedEntries.isEmpty()) {      listener.entriesDeleted(deletedEntries);    }  }}  }
class C{  public void parse(InputStream in) throws IOException, SAXException {  try {    _xmlReader.setInput(in);    parseAll();  } catch (  XMLStreamException e) {    if (e.getNestedException() instanceof IOException)     throw (IOException)e.getNestedException();    throw new SAXException(e.getMessage());  } finally {    _xmlReader.reset();  }}  }
class C{  public void testBasicParallelStage() throws Exception {  TungstenProperties conf=this.getConfig(3,3,3,3);  ReplicatorRuntime runtime=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  ParallelQueueStore inputPqs=(ParallelQueueStore)pipeline.getStore("input");  assertEquals("3 input partitions defined",3,inputPqs.getPartitions());  for (int i=0; i < 3 * 3; i++) {    ReplDBMSEvent event=createEvent(i);    inputPqs.put(i % 3,event);  }  pipeline.start(new MockEventDispatcher());  ParallelQueueStore outputPqs=(ParallelQueueStore)pipeline.getStore("output");  assertEquals("3 output partitions defined",3,outputPqs.getPartitions());  for (int i=0; i < 3 * 3; i++) {    int partId=i % 3;    ReplDBMSEvent event=(ReplDBMSEvent)outputPqs.get(partId);    assertEquals("Event event has expected seqno",i,event.getSeqno());  }  pipeline.shutdown(true);  pipeline.release(runtime);}  }
class C{  public static void writeLines(final Collection<?> lines,String lineEnding,final Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=IOUtils.LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  protected static void appendSerializableType(StringBuilder sb){  sb.append("BLOB");}  }
class C{  protected String formatXML(String unformattedXml){  final StringBuilder s=new StringBuilder(unformattedXml);  replace(s,"<","&lt;");  replace(s,">","></div>");  replace(s,"&lt;","<div style=\"color:#777;\">&lt;");  return s.toString();}  }
class C{  public boolean containsNode(Node node){  return nodes.contains(node);}  }
class C{  protected boolean shouldSkipContent(int len,String id){  return false;}  }
class C{  public void rotateToDirection(float xRot,float yRot,float zRot){  renderer.rotateToDirection(xRot,yRot,zRot);}  }
class C{  void layout(int delta,boolean animate){  System.out.println("The layout is: before");  if (mDataChanged) {    handleDataChanged();  }  if (getCount() == 0) {    resetList();    return;  }  if (mNextSelectedPosition >= 0) {    System.out.println("The layout is:" + mNextSelectedPosition);    setSelectedPositionInt(mNextSelectedPosition);  }  recycleAllViews();  detachAllViewsFromParent();  int count=getAdapter().getCount();  float angleUnit=(Math.round(360.0f / count) * 1000000) / 1000000;  float angleOffset=mSelectedPosition * angleUnit;  for (int i=0; i < count; i++) {    float angle;    angle=angleUnit * i - angleOffset;    if (angle < 0.0f)     angle=360.0f + angle;    makeAndAddView(i,angle);  }  mRecycler.clear();  invalidate();  setNextSelectedPositionInt(mSelectedPosition);  checkSelectionChanged();  mNeedSync=false;  updateSelectedItemMetadata();}  }
class C{  public static void updatePortAssociations(Collection<StoragePort> ports,DbClient dbClient) throws IOException {  Map<NetworkLite,List<StoragePort>> networkPorts=getNetworksMap(ports,dbClient);  if (networkPorts.isEmpty()) {    _log.info("The storage ports are not in any network.");    return;  }  for (  Map.Entry<NetworkLite,List<StoragePort>> portsForNetwork : networkPorts.entrySet()) {    NetworkAssociationHelper.updatePortAssociations(portsForNetwork.getKey(),portsForNetwork.getValue(),dbClient);  }  StoragePoolAssociationHelper.updateVArrayRelations(ports,null,dbClient,null);}  }
class C{  @Override public void onWorldReset(){  log.debug("Resetting physics world");  entities.clear();  collisions.clear();  collisionHandlers.clear();}  }
class C{  public void success(){  successCallback.invoke("Success");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.222 -0500",hash_original_method="7D1410F2491A2101D94AEDEF5E6D4821",hash_generated_method="D10714ADA056C5D26243F877D5109431") protected boolean isReadAllowed() throws IOException {  if (selfClosed) {    throw new IOException("Attempted read on closed stream.");  }  return (wrappedStream != null);}  }
class C{  private static void main(String[] args){  try {    File f=new File("test.txt");    if (f.exists()) {      throw new IOException(f + " already exists.  I don't want to overwrite it.");    }    StraightStreamReader in;    char[] cbuf=new char[0x1000];    int read;    int totRead;    FileOutputStream out=new FileOutputStream(f);    for (int i=0x00; i < 0x100; i++) {      out.write(i);    }    out.close();    in=new StraightStreamReader(new FileInputStream(f));    for (int i=0x00; i < 0x100; i++) {      read=in.read();      if (read != i) {        System.err.println("Error: " + i + " read as "+ read);      }    }    in.close();    in=new StraightStreamReader(new FileInputStream(f));    totRead=in.read(cbuf);    if (totRead != 0x100) {      System.err.println("Simple buffered read did not read the full amount: 0x" + Integer.toHexString(totRead));    }    for (int i=0x00; i < totRead; i++) {      if (cbuf[i] != i) {        System.err.println("Error: 0x" + i + " read as 0x"+ cbuf[i]);      }    }    in.close();    in=new StraightStreamReader(new FileInputStream(f));    totRead=0;    while (totRead <= 0x100 && (read=in.read(cbuf,totRead,0x100 - totRead)) > 0) {      totRead+=read;    }    if (totRead != 0x100) {      System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));    }    for (int i=0x00; i < totRead; i++) {      if (cbuf[i] != i) {        System.err.println("Error: 0x" + i + " read as 0x"+ cbuf[i]);      }    }    in.close();    in=new StraightStreamReader(new FileInputStream(f));    totRead=0;    while (totRead <= 0x100 && (read=in.read(cbuf,totRead + 0x123,0x100 - totRead)) > 0) {      totRead+=read;    }    if (totRead != 0x100) {      System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));    }    for (int i=0x00; i < totRead; i++) {      if (cbuf[i + 0x123] != i) {        System.err.println("Error: 0x" + i + " read as 0x"+ cbuf[i + 0x123]);      }    }    in.close();    in=new StraightStreamReader(new FileInputStream(f));    totRead=0;    while (totRead <= 0x100 && (read=in.read(cbuf,totRead + 0x123,7)) > 0) {      totRead+=read;    }    if (totRead != 0x100) {      System.err.println("Not enough read. Bytes read: " + Integer.toHexString(totRead));    }    for (int i=0x00; i < totRead; i++) {      if (cbuf[i + 0x123] != i) {        System.err.println("Error: 0x" + i + " read as 0x"+ cbuf[i + 0x123]);      }    }    in.close();    f.delete();  } catch (  IOException x) {    System.err.println(x.getMessage());  }}  }
class C{  public DefaultContourDataset(Comparable seriesKey,Object[] xData,Object[] yData,Object[] zData){  this.seriesKey=seriesKey;  initialize(xData,yData,zData);}  }
class C{  public TColor desaturate(float step){  return setSaturation(hsv[1] - step);}  }
class C{  private Uri insertForUser(int userId,Uri uri,ContentValues values){  if (uri == null) {    throw new IllegalArgumentException("Uri cannot be null");  }  if (values == null) {    throw new IllegalArgumentException("ContentValues cannot be null");  }  String tableName=getTableNameFromUri(uri);  checkWritePermissions(tableName);  CMDatabaseHelper dbHelper=getOrEstablishDatabase(getUserIdForTable(tableName,userId));  final String name=values.getAsString(Settings.NameValueTable.NAME);  final String value=values.getAsString(Settings.NameValueTable.VALUE);  if (CMDatabaseHelper.CMTableNames.TABLE_SYSTEM.equals(tableName)) {    validateSystemSettingNameValue(name,value);  } else   if (CMDatabaseHelper.CMTableNames.TABLE_SECURE.equals(tableName)) {    validateSecureSettingValue(name,value);  }  SQLiteDatabase db=dbHelper.getWritableDatabase();  long rowId=db.insert(tableName,null,values);  Uri returnUri=null;  if (rowId > -1) {    returnUri=Uri.withAppendedPath(uri,name);    notifyChange(returnUri,tableName,userId);    if (LOCAL_LOGV)     Log.d(TAG,"Inserted row id: " + rowId + " into tableName: "+ tableName);  }  return returnUri;}  }
class C{  public Word plus(Extent w2){  return new Word(value.plus(w2.toLong()));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){}  }
class C{  public void close(){  if (this.closed) {    return;  }  if (logger.isDebugEnabled()) {    logger.debug("Oplog::close: Store name ={} Oplog ID = {}",parent.getName(),oplogId);  }  basicClose();}  }
class C{  @Override public boolean isWithoutReply(){  return false;}  }
class C{  public InfoModelPropertySource createInfoModelPropertySource(){  InfoModelPropertySourceImpl infoModelPropertySource=new InfoModelPropertySourceImpl();  return infoModelPropertySource;}  }
class C{  public Node createNode(int i){  Node node=new Node(new InternalDistributedMember("host" + i,3033),i);  node.setPRType(Node.DATASTORE);  return node;}  }
class C{  private static Map<Token,Matcher> createMatchers(Map<Token,Pattern> patterns,CharSequence charSequence){  Map<Token,Matcher> matchers=new HashMap<>();  for (  Token token : patterns.keySet()) {    Pattern pattern=patterns.get(token);    Matcher matcher=pattern.matcher(charSequence);    matchers.put(token,matcher);  }  return matchers;}  }
class C{  @Override public void accept(Object source,Throwable t){  if (job == null)   throw new IllegalStateException("A job has not been instantiated");  if (t != null) {    Executable.this.setLastError(t);    job.updateHealth(t);    cleanup();  } else   if (job.getCurrentState() == Job.State.RUNNING && (source == userScheduler || source == userThreads) && !hasActiveTasks()) {    logger.info("No more active user tasks");  }  notifyCompleter();}  }
class C{  public void fillArc(int x,int y,int width,int height,int startAngle,int arcAngle){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling arc: " + new Rectangle(x,y,width,height)+ " startAngle: "+ startAngle+ " arcAngle: "+ arcAngle);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fillArc(x,y,width,height,startAngle,arcAngle);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fillArc(x,y,width,height,startAngle,arcAngle);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fillArc(x,y,width,height,startAngle,arcAngle);}  }
class C{  public MemberCollector fromContext(Resource contextResource){  if (contextResource == null) {    throw new NullPointerException("Context resource used to collect members must not be null.");  }  if (!(contextResource instanceof N4JSResource)) {    throw new IllegalArgumentException("polyfills etc are only supported by n4js");  }  return new MemberCollector(contextResource);}  }
class C{  public boolean isRemoveAll(){  return (this.opDetails & OP_DETAILS_REMOVEALL) != 0;}  }
class C{  public StemmedString(CharSequence orig,CharSequence stemmed){  strOrig=orig.toString();  strStemmed=stemmed.toString();}  }
class C{  public boolean removeSatallite(SatelliteBase satallite){  if (satallite.canTick())   tickingSatallites.remove(satallite);  return satallites.remove(satallite);}  }
class C{  public X509CertImpl(InputStream in) throws CertificateException {  try {    this.certificate=(Certificate)Certificate.ASN1.decode(in);    this.tbsCert=certificate.getTbsCertificate();    this.extensions=tbsCert.getExtensions();  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  @SuppressWarnings("unused") public int actionProc(int id,int sel,int arg0){  return (int)actionProc((long)id,(long)sel,(long)arg0);}  }
class C{  private void executeMutatorWithRetry(MutationBatch mutator) throws ConnectionException {  if (!mutator.isEmpty()) {    try {      mutator.execute();    } catch (    TimeoutException|TokenRangeOfflineException|OperationTimeoutException ex) {      ConsistencyLevel currentConsistencyLevel=keyspace.getConfig().getDefaultWriteConsistencyLevel();      if (retryFailedWriteWithLocalQuorum && currentConsistencyLevel.equals(ConsistencyLevel.CL_EACH_QUORUM)) {        mutator.setConsistencyLevel(ConsistencyLevel.CL_LOCAL_QUORUM);        mutator.execute();        log.info("Reduce write consistency level to CL_LOCAL_QUORUM");        ((AstyanaxConfigurationImpl)keyspace.getConfig()).setDefaultWriteConsistencyLevel(ConsistencyLevel.CL_LOCAL_QUORUM);        _indexMutator.setConsistencyLevel(ConsistencyLevel.CL_LOCAL_QUORUM);        _recordMutator.setConsistencyLevel(ConsistencyLevel.CL_LOCAL_QUORUM);      } else {        throw ex;      }    }  }}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  public BinaryAnnotation(BinaryAnnotation other){  if (other.isSetKey()) {    this.key=other.key;  }  if (other.isSetValue()) {    this.value=org.apache.thrift.TBaseHelper.copyBinary(other.value);    ;  }  if (other.isSetAnnotation_type()) {    this.annotation_type=other.annotation_type;  }  if (other.isSetHost()) {    this.host=new Endpoint(other.host);  }}  }
class C{  public TDoubleArrayList grep(TDoubleProcedure condition){  TDoubleArrayList list=new TDoubleArrayList();  for (int i=0; i < _pos; i++) {    if (condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  public double[] probabilityForInstance(Instance x,double path[]) throws Exception {  int L=x.classIndex();  double p[]=new double[L];  for (  int j : m_Chain) {    double d[]=nodes[j].distribution((Instance)x.copy(),path);    int k=(int)Math.round(path[j]);    p[j]=d[k];  }  return p;}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT + "/tests");}  }
class C{  protected static List primitiveArrayGet(Object self,Collection indices){  List answer=new ArrayList();  for (  Object value : indices) {    if (value instanceof Range) {      answer.addAll(primitiveArrayGet(self,(Range)value));    } else     if (value instanceof List) {      answer.addAll(primitiveArrayGet(self,(List)value));    } else {      int idx=DefaultTypeTransformation.intUnbox(value);      answer.add(primitiveArrayGet(self,idx));    }  }  return answer;}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {}  }
class C{  final TreeNode<K,V> root(){  for (TreeNode<K,V> r=this, p; ; ) {    if ((p=r.parent) == null)     return r;    r=p;  }}  }
class C{  public List<Integer> postorderTraversal(TreeNode root){  List<Integer> res=new ArrayList<Integer>();  if (root == null)   return res;  TreeNode prev=null;  TreeNode cur=root;  Stack<TreeNode> s=new Stack<TreeNode>();  s.push(root);  while (!s.isEmpty()) {    cur=s.peek();    if (prev == null || prev.left == cur || prev.right == cur) {      if (cur.left != null)       s.push(cur.left); else       if (cur.right != null)       s.push(cur.right);    } else     if (cur.left == prev) {      if (cur.right != null)       s.push(cur.right);    } else {      res.add(cur.val);      s.pop();    }    prev=cur;  }  return res;}  }
class C{  public static String formatCurrency(double value,Currency currency){  NumberFormat f=getCurrencyFormatter();  f.setCurrency(currency);  return postFormatCurrency(f.format(value));}  }
class C{  private boolean matchesEthernet(NetworkIdentity ident){  return ident.mType == TYPE_ETHERNET;}  }
class C{  public int compareTo(MutableInteger anotherMutableInteger){  int thisVal=this.i;  int anotherVal=anotherMutableInteger.i;  return (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));}  }
class C{  public void addLoader(EditToolLoader loader){  String[] classnames=loader.getEditableClasses();  rawLoaders.add(loader);  if (classnames != null) {    for (int i=0; i < classnames.length; i++) {      loaders.put(classnames[i].intern(),loader);    }    possibleEditableClasses=null;  }  firePropertyChange(LoadersProperty,null,rawLoaders);}  }
class C{  public static JobDefinition retryableCronJobDefinition(final String jobType,final String jobName,final String description,final String cron,final int restarts,final int retries,final Duration retryDelay,final Optional<Duration> maxAge){  return new DefaultJobDefinition(jobType,jobName,description,maxAge,Optional.empty(),Optional.of(cron),restarts,retries,Optional.of(retryDelay));}  }
class C{  @Override public int read() throws IOException {  byte[] buff=new byte[1];  int readCount=read(buff,0,1);  return readCount == 1 ? (buff[0] & 0xFF) : -1;}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "AttributeSummarizer.gif",BeanVisual.ICON_PATH + "AttributeSummarizer_animated.gif");}  }
class C{  public T casePackageMember(PackageMember object){  return null;}  }
class C{  public static void selectionSort(int[] array){  for (int i=0; i < array.length - 1; i++) {    int min=array[i];    int minIndex=i;    for (int j=i + 1; j < array.length; j++) {      if (array[j] < min) {        min=array[j];        minIndex=j;      }    }    if (i != minIndex) {      array[minIndex]=array[i];      array[i]=min;    }  }}  }
class C{  public DigestURL(final String url,final byte[] hash) throws MalformedURLException {  super(url);  this.hash=hash;}  }
class C{  public void writeBinary(final PacketOutputStream os) throws IOException {  if (length == Long.MAX_VALUE) {    os.sendStream(reader);  } else {    os.sendStream(reader,length);  }}  }
class C{  private void onWifiP2pConnectionChanged(Context context,Intent intent){  NetworkInfo info=(NetworkInfo)intent.getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);  if (info.isConnected()) {    log.info("Wifi P2P connected");    Log.d("peerDebug","Wifi P2P connected");  } else {    log.info("Wifi P2P disconnected");    Log.d("peerDebug","Wifi P2P disconnected");  }}  }
class C{  public void deleteLeaves(String name){  for (int i=0; i < _leaves.size(); i++) {    CatalogTreeLeaf leaf=_leaves.get(i);    if (name.equals(leaf.getName())) {      _leaves.remove(i);    }  }}  }
class C{  public TApplicationException exception(){  if (!isException()) {    throw new IllegalStateException("not an exception but a reply");  }  return exception;}  }
class C{  static public boolean lteq(double v1,double v2){  return (v2 - v1) > -VERY_SMALL_VALUE;}  }
class C{  public CompositeAction(Visualization vis){  super(vis,0);}  }
class C{  public ODGRectFigure(){  this(0,0,0,0);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("id=");  sb.append(installationId);  sb.append("&ev=");  sb.append(eclipseVersion);  sb.append("&v=");  sb.append(featureVersion);  if (maxSdkVersions != null && !maxSdkVersions.isEmpty()) {    for (    Entry<String,String> entry : maxSdkVersions.entrySet()) {      sb.append("&");      String key=entry.getKey();      assert (key != null);      sb.append(key);      sb.append("=");      String value=entry.getValue();      assert (value != null);      sb.append(value);    }  }  sb.append("&p=");  sb.append(productId);  if (action != null) {    sb.append(ACTION_PARAM);    sb.append(action);  }  if (apiName != null) {    sb.append("&apiName=");    sb.append(apiName);    sb.append("&apiPlatform=");    sb.append(apiPlatform);  }  if (facetsEnabled != null) {    sb.append("&facets=");    sb.append(facetsEnabled);  }  if (extensionContribs != null) {    sb.append(extensionContribs);  }  return sb.toString();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.FIELD_ACCESSOR__DECLARED_NAME:    return declaredName != null;}return super.eIsSet(featureID);}  }
class C{  private static boolean inputOperandsAreLiterals(final ReilInstruction instruction){  final OperandType firstOperandType=instruction.getFirstOperand().getType();  final OperandType secondOperandType=instruction.getSecondOperand().getType();  return (firstOperandType == OperandType.INTEGER_LITERAL) && (secondOperandType == OperandType.INTEGER_LITERAL);}  }
class C{  public void writeDouble(double v) throws IOException {  long bits=Double.doubleToLongBits(v);  _os.write((int)(bits >> 56));  _os.write((int)(bits >> 48));  _os.write((int)(bits >> 40));  _os.write((int)(bits >> 32));  _os.write((int)(bits >> 24));  _os.write((int)(bits >> 16));  _os.write((int)(bits >> 8));  _os.write((int)bits);}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Certificacion";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("IdFichero",idFichero);  bdr.addSimpleElement("IdUsuario",idUsuario);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  boolean[] extractBits(BitMatrix matrix){  boolean compact=ddata.isCompact();  int layers=ddata.getNbLayers();  int baseMatrixSize=compact ? 11 + layers * 4 : 14 + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  boolean[] rawbits=new boolean[totalBitsInLayer(layers,compact)];  if (compact) {    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    int matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=compact ? (layers - i) * 4 + 9 : (layers - i) * 4 + 12;    int low=i * 2;    int high=baseMatrixSize - 1 - low;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        rawbits[rowOffset + columnOffset + k]=matrix.get(alignmentMap[low + k],alignmentMap[low + j]);        rawbits[rowOffset + 2 * rowSize + columnOffset + k]=matrix.get(alignmentMap[low + j],alignmentMap[high - k]);        rawbits[rowOffset + 4 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - k],alignmentMap[high - j]);        rawbits[rowOffset + 6 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - j],alignmentMap[low + k]);      }    }    rowOffset+=rowSize * 8;  }  return rawbits;}  }
class C{  public T caseChoice(Choice object){  return null;}  }
class C{  private void throwOnCommonError(Response response) throws IOException {  int status=response.code();switch (status) {case HttpStatus.SC_BAD_REQUEST:    throw new MalformedRequestException();case HttpStatus.SC_UNSUPPORTED_MEDIA_TYPE:  throw new UnsupportedMediaTypeException();case HttpStatus.SC_NOT_FOUND:throw new NotFoundException();case HttpStatus.SC_UNAUTHORIZED:throw new UnauthorizedException();case HttpStatus.SC_FORBIDDEN:throw new ForbiddenException();case HttpStatus.SC_CONFLICT:throw new ConflictException();case HttpStatus.SC_UNPROCESSABLE_ENTITY:throw new ValidationException();}if (status >= 400) {throw new IOException("Unexpected status code on response: " + status);}}  }
class C{  public StateSetEnumerator(){}  }
class C{  public void overrideButton(String button,boolean override){  LOG.i("App","WARNING: Volume Button Default Behavior will be overridden.  The volume event will be fired!");  if (button.equals("volumeup")) {    webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_UP,override);  } else   if (button.equals("volumedown")) {    webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_DOWN,override);  }}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel selectedDataModel=getDataEditor().getSelectedDataModel();  if (!(selectedDataModel instanceof DataSet)) {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Requires a tabular data set.");  }  List<Node> selectedVariables=new LinkedList<>();  DataSet dataSet=(DataSet)selectedDataModel;  int numColumns=dataSet.getNumColumns();  for (int i=0; i < numColumns; i++) {    Node variable=dataSet.getVariable(i);    if (dataSet.isSelected(variable)) {      selectedVariables.add(variable);    }  }  if (dataSet.getNumRows() == 0) {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Data set is empty.");    return;  }  if (selectedVariables.isEmpty()) {    selectedVariables.addAll(dataSet.getVariables());  }}  }
class C{  public void createSubUsageScenario08() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.hoursToMillis(3.2);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO08_PERUNIT_DAY",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO08_PERUNIT_DAY",serviceDetails,null,role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.hoursToMillis(4.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO08_PERUNIT_DAY",subDetails);}  }
class C{  public void dock(JComponent outter,JComponent inner,int idx){  dock(getWrapper(outter),getWrapper(inner),idx);}  }
class C{  private void updateBlockletFileChannel() throws CarbonDataWriterException {  if (currentFileSize >= fileSizeInBytes) {    writeBlockletMetaDataToFile();    this.currentFileSize=0;    CarbonUtil.closeStreams(fileDataOutStream);    initChannel();  }}  }
class C{  public static final double[] threshold(double v[],double t){  double u[]=new double[v.length];  for (int j=0; j < v.length; j++) {    u[j]=(v[j] > t) ? 1. : 0.;  }  return u;}  }
class C{  public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarDragWindowBackground(context,g,x,y,w,h);}  }
class C{  public void startProcess(){}  }
class C{  public void skipChar(char c) throws ParseException {  if (index < orig.length) {    if (orig[index] == c) {      index++;    } else {      throw new ParseException("Wrong char",index);    }  } else {    throw new ParseException("No more characters",index);  }}  }
class C{  protected void addUnitPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TimeEventSpec_unit_feature"),getString("_UI_PropertyDescriptor_description","_UI_TimeEventSpec_unit_feature","_UI_TimeEventSpec_type"),StextPackage.Literals.TIME_EVENT_SPEC__UNIT,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static double calculateTimeDecayPenalty(long eventTimestamp,long nowTimestamp){  if (nowTimestamp == 0) {    return 1.0;  }  if (eventTimestamp == 0) {    return 0.3;  }  double days=(nowTimestamp - eventTimestamp) / 86400.0;  return calculateTimeDecayPenalty(0.3,0.7,0.9,days);}  }
class C{  public UpdateRequest doc(byte[] source){  safeDoc().source(source);  return this;}  }
class C{  public final void removeCallbacksAndMessages(Object token){  mExec.removeCallbacksAndMessages(token);}  }
class C{  public CSelectionHistoryChooser(final ZyGraph graph,final CSelectionHistory selectionHistory){  super(new GridLayout(1,0));  m_graph=graph;  m_selectionHistory=selectionHistory;  selectionHistory.addHistoryListener(m_selectionHistoryListener);  m_tree=createUndoTree();  add(new JScrollPane(m_tree));  m_graph.addListener(m_graphSelectionListener);  m_tree.addTreeSelectionListener(m_treeSelectionListener);  m_tree.addMouseListener(m_treeMouseListener);  ToolTipManager.sharedInstance().registerComponent(m_tree);  setBorder(new TitledBorder(new LineBorder(Color.LIGHT_GRAY,1,true),"Selection History"));}  }
class C{  void writePriorLikelihood(PartitionTreeModel model,XMLWriter writer){  setModelPrefix(model.getPrefix());  PartitionTreePrior prior=model.getPartitionTreePrior();  TreePriorType treePrior=prior.getNodeHeightPrior();switch (treePrior) {case YULE:case BIRTH_DEATH:case BIRTH_DEATH_INCOMPLETE_SAMPLING:case BIRTH_DEATH_SERIAL_SAMPLING:case BIRTH_DEATH_BASIC_REPRODUCTIVE_NUMBER:case YULE_CALIBRATION:    writer.writeComment("Generate a speciation likelihood for Yule or Birth Death");  writer.writeOpenTag(SpeciationLikelihoodParser.SPECIATION_LIKELIHOOD,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "speciation")});writer.writeOpenTag(SpeciationLikelihoodParser.MODEL);writeNodeHeightPriorModelRef(prior,writer);writer.writeCloseTag(SpeciationLikelihoodParser.MODEL);writer.writeOpenTag(SpeciationLikelihoodParser.TREE);writer.writeIDref(TreeModel.TREE_MODEL,modelPrefix + TreeModel.TREE_MODEL);writer.writeCloseTag(SpeciationLikelihoodParser.TREE);if (treePrior == TreePriorType.YULE_CALIBRATION) {if (options.treeModelOptions.isNodeCalibrated(model) == 0) {writer.writeOpenTag(SpeciationLikelihoodParser.CALIBRATION,new Attribute[]{new Attribute.Default<String>(SpeciationLikelihoodParser.CORRECTION,prior.getCalibCorrectionType().toString())});writer.writeOpenTag(SpeciationLikelihoodParser.POINT);String taxaId;if (options.hasIdenticalTaxa()) {taxaId=TaxaParser.TAXA;} else {taxaId=options.getDataPartitions(model).get(0).getPrefix() + TaxaParser.TAXA;}writer.writeIDref(TaxaParser.TAXA,taxaId);writeDistribution(model.getParameter("treeModel.rootHeight"),true,writer);writer.writeCloseTag(SpeciationLikelihoodParser.POINT);writer.writeCloseTag(SpeciationLikelihoodParser.CALIBRATION);} else if (options.treeModelOptions.isNodeCalibrated(model) == 1) {Taxa t=(Taxa)options.getKeysFromValue(options.taxonSetsTreeModel,model).get(0);Parameter nodeCalib=options.getStatistic(t);writer.writeOpenTag(SpeciationLikelihoodParser.CALIBRATION,new Attribute[]{new Attribute.Default<String>(SpeciationLikelihoodParser.CORRECTION,prior.getCalibCorrectionType().toString())});writer.writeOpenTag(SpeciationLikelihoodParser.POINT);writer.writeIDref(TaxaParser.TAXA,t.getId());writeDistribution(nodeCalib,true,writer);writer.writeCloseTag(SpeciationLikelihoodParser.POINT);writer.writeCloseTag(SpeciationLikelihoodParser.CALIBRATION);if (!options.treeModelOptions.isNodeCalibrated(nodeCalib)) {throw new IllegalArgumentException("Calibrated Yule model requires a calibration to be specified for node, " + nodeCalib.getName() + ".");}}}writer.writeCloseTag(SpeciationLikelihoodParser.SPECIATION_LIKELIHOOD);break;case SKYLINE:writer.writeComment("Generate a generalizedSkyLineLikelihood for Bayesian Skyline");writer.writeOpenTag(BayesianSkylineLikelihoodParser.SKYLINE_LIKELIHOOD,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "skyline"),new Attribute.Default<String>("linear",prior.getSkylineModel() == TreePriorParameterizationType.LINEAR_SKYLINE ? "true" : "false")});writer.writeOpenTag(BayesianSkylineLikelihoodParser.POPULATION_SIZES);if (prior.getSkylineModel() == TreePriorParameterizationType.LINEAR_SKYLINE) {writeParameter(prior.getParameter("skyline.popSize"),prior.getSkylineGroupCount() + 1,writer);} else {writeParameter(prior.getParameter("skyline.popSize"),prior.getSkylineGroupCount(),writer);}writer.writeCloseTag(BayesianSkylineLikelihoodParser.POPULATION_SIZES);writer.writeOpenTag(BayesianSkylineLikelihoodParser.GROUP_SIZES);writeParameter(prior.getParameter("skyline.groupSize"),prior.getSkylineGroupCount(),writer);writer.writeCloseTag(BayesianSkylineLikelihoodParser.GROUP_SIZES);writer.writeOpenTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeIDref(TreeModel.TREE_MODEL,modelPrefix + TreeModel.TREE_MODEL);writer.writeCloseTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeCloseTag(BayesianSkylineLikelihoodParser.SKYLINE_LIKELIHOOD);writer.writeText("");writeExponentialMarkovLikelihood(prior,writer);break;case EXTENDED_SKYLINE:break;case GMRF_SKYRIDE:writer.writeComment("Generate a gmrfSkyrideLikelihood for GMRF Bayesian Skyride process");writer.writeOpenTag(GMRFSkyrideLikelihoodParser.SKYLINE_LIKELIHOOD,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "skyride"),new Attribute.Default<String>(GMRFSkyrideLikelihoodParser.TIME_AWARE_SMOOTHING,prior.getSkyrideSmoothing() == TreePriorParameterizationType.TIME_AWARE_SKYRIDE ? "true" : "false"),new Attribute.Default<String>(GMRFSkyrideLikelihoodParser.RANDOMIZE_TREE,options.getPartitionTreeModels(prior).get(0).getStartingTreeType() == StartingTreeType.UPGMA ? "true" : "false")});int skyrideIntervalCount=options.taxonList.getTaxonCount() - 1;writer.writeOpenTag(GMRFSkyrideLikelihoodParser.POPULATION_PARAMETER);writer.writeComment("skyride.logPopSize is in log units unlike other popSize");writeParameter(prior.getParameter("skyride.logPopSize"),skyrideIntervalCount,writer);writer.writeCloseTag(GMRFSkyrideLikelihoodParser.POPULATION_PARAMETER);writer.writeOpenTag(GMRFSkyrideLikelihoodParser.GROUP_SIZES);writeParameter(prior.getParameter("skyride.groupSize"),skyrideIntervalCount,writer);writer.writeCloseTag(GMRFSkyrideLikelihoodParser.GROUP_SIZES);writer.writeOpenTag(GMRFSkyrideLikelihoodParser.PRECISION_PARAMETER);writeParameter(prior.getParameter("skyride.precision"),1,writer);writer.writeCloseTag(GMRFSkyrideLikelihoodParser.PRECISION_PARAMETER);writer.writeOpenTag(GMRFSkyrideLikelihoodParser.POPULATION_TREE);writer.writeIDref(TreeModel.TREE_MODEL,modelPrefix + TreeModel.TREE_MODEL);writer.writeCloseTag(GMRFSkyrideLikelihoodParser.POPULATION_TREE);writer.writeCloseTag(GMRFSkyrideLikelihoodParser.SKYLINE_LIKELIHOOD);break;case SKYGRID:break;case SPECIES_YULE:case SPECIES_YULE_CALIBRATION:case SPECIES_BIRTH_DEATH:break;default :writer.writeComment("Generate a coalescent likelihood");writer.writeOpenTag(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + COALESCENT)});writer.writeOpenTag(CoalescentLikelihoodParser.MODEL);writeNodeHeightPriorModelRef(prior,writer);writer.writeCloseTag(CoalescentLikelihoodParser.MODEL);writer.writeOpenTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeIDref(TreeModel.TREE_MODEL,modelPrefix + TreeModel.TREE_MODEL);writer.writeCloseTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeCloseTag(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD);}}  }
class C{  void sendAsync(DistributionMessage msg){  msg.setRecipient(id);  if (msg instanceof AdminRequest) {    ((AdminRequest)msg).setModifiedClasspath(inspectionClasspath);  }  agent.sendAsync(msg);}  }
class C{  protected void fireTupleEvent(Tuple t,int type){  if (m_tupleListeners != null && m_tupleListeners.size() > 0) {    Object[] lstnrs=m_tupleListeners.getArray();    Tuple[] ts=new Tuple[]{t};    for (int i=0; i < lstnrs.length; ++i) {      TupleSetListener tsl=(TupleSetListener)lstnrs[i];      if (type == EventConstants.INSERT) {        tsl.tupleSetChanged(this,ts,EMPTY_ARRAY);      } else {        tsl.tupleSetChanged(this,EMPTY_ARRAY,ts);      }    }  }}  }
class C{  public AddressSpace(final Database database,final Project project,final INaviAddressSpace addressSpace){  Preconditions.checkNotNull(database,"Error: Database argument can't be null");  Preconditions.checkNotNull(addressSpace,"Error: Address space argument can't be null");  m_database=database;  m_project=project;  m_addressSpace=addressSpace;  m_debugger=m_addressSpace.getConfiguration().getDebugger() == null ? null : new Debugger(m_addressSpace.getConfiguration().getDebugger());  if (addressSpace.isLoaded()) {    convertData();  }  addressSpace.addListener(m_listener);  addressSpace.getConfiguration().addListener(m_configurationListener);}  }
class C{  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    boolean zzR=false;    for (zzCurrentPosL=zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {switch (zzBufferL[zzCurrentPosL]) {case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        yyline++;      yycolumn=0;    zzR=false;  break;case '\r':yyline++;yycolumn=0;zzR=true;break;case '\n':if (zzR) zzR=false; else {yyline++;yycolumn=0;}break;default :zzR=false;yycolumn++;}}if (zzR) {boolean zzPeek;if (zzMarkedPosL < zzEndReadL) zzPeek=zzBufferL[zzMarkedPosL] == '\n'; else if (zzAtEOF) zzPeek=false; else {boolean eof=zzRefill();zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;if (eof) zzPeek=false; else zzPeek=zzBufferL[zzMarkedPosL] == '\n';}if (zzPeek) yyline--;}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;zzState=zzLexicalState;zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {zzInput=YYEOF;break zzForAction;} else {zzInput=zzBufferL[zzCurrentPosL++];}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 49:{return sym(Terminals.LTEQ);}case 135:break;case 39:{return sym(Terminals.DOUBLE_LITERAL,str().substring(0,len() - 1));}case 136:break;case 75:{return sym(Terminals.INT);}case 137:break;case 70:{return sym(Terminals.LONG_LITERAL,str().substring(0,len() - 1));}case 138:break;case 43:{error("unterminated character literal at end of line");}case 139:break;case 99:{return sym(Terminals.VOID);}case 140:break;case 77:{return sym(Terminals.RSHIFTEQ);}case 141:break;case 25:{return sym(Terminals.AND);}case 142:break;case 119:{return sym(Terminals.EXTENDS);}case 143:break;case 114:{return sym(Terminals.THROWS);}case 144:break;case 83:{return sym(Terminals.CHARACTER_LITERAL,"\\");}case 145:break;case 52:{return sym(Terminals.ANDEQ);}case 146:break;case 59:{return sym(Terminals.MODEQ);}case 147:break;case 118:{return sym(Terminals.PUBLIC);}case 148:break;case 4:{return sym(Terminals.MULT);}case 149:break;case 55:{return sym(Terminals.OROR);}case 150:break;case 110:{return sym(Terminals.ASSERT);}case 151:break;case 80:{int val=Integer.parseInt(str().substring(2,len() - 1),8);return sym(Terminals.CHARACTER_LITERAL,new Character((char)val).toString());}case 152:break;case 21:{return sym(Terminals.NOT);}case 153:break;case 38:{return sym(Terminals.LONG_LITERAL,str().substring(0,len() - 1));}case 154:break;case 103:{return sym(Terminals.THROW);}case 155:break;case 19:{return sym(Terminals.GT);}case 156:break;case 33:{error("unterminated string at end of line");}case 157:break;case 89:{return sym(Terminals.ELSE);}case 158:break;case 18:{return sym(Terminals.EQ);}case 159:break;case 66:{strbuf.append('\t');}case 160:break;case 86:{return sym(Terminals.CHARACTER_LITERAL,"\b");}case 161:break;case 32:{strbuf.append(str());}case 162:break;case 11:{return sym(Terminals.RPAREN);}case 163:break;case 45:{return sym(Terminals.DO);}case 164:break;case 120:{return sym(Terminals.BOOLEAN);}case 165:break;case 47:{return sym(Terminals.GTEQ);}case 166:break;case 106:{return sym(Terminals.CLASS);}case 167:break;case 97:{return sym(Terminals.NULL_LITERAL);}case 168:break;case 98:{return sym(Terminals.EOF);}case 169:break;case 35:{return sym(Terminals.DIVEQ);}case 170:break;case 36:{return sym(Terminals.MULTEQ);}case 171:break;case 124:{return sym(Terminals.PRIVATE);}case 172:break;case 93:{return sym(Terminals.BYTE);}case 173:break;case 20:{return sym(Terminals.LT);}case 174:break;case 100:{return sym(Terminals.URSHIFTEQ);}case 175:break;case 28:{return sym(Terminals.XOR);}case 176:break;case 122:{return sym(Terminals.FINALLY);}case 177:break;case 126:{return sym(Terminals.STRICTFP);}case 178:break;case 88:{return sym(Terminals.CHARACTER_LITERAL,"\f");}case 179:break;case 91:{return sym(Terminals.BOOLEAN_LITERAL);}case 180:break;case 104:{return sym(Terminals.BREAK);}case 181:break;case 68:{strbuf.append('\n');}case 182:break;case 132:{return sym(Terminals.INSTANCEOF);}case 183:break;case 48:{return sym(Terminals.RSHIFT);}case 184:break;case 34:{yybegin(YYINITIAL);return sym(Terminals.STRING_LITERAL,strbuf.toString());}case 185:break;case 115:{return sym(Terminals.NATIVE);}case 186:break;case 78:{return sym(Terminals.URSHIFT);}case 187:break;case 61:{strbuf.append((char)Integer.parseInt(str().substring(1),8));}case 188:break;case 57:{return sym(Terminals.PLUSPLUS);}case 189:break;case 121:{return sym(Terminals.DEFAULT);}case 190:break;case 117:{return sym(Terminals.DOUBLE);}case 191:break;case 128:{return sym(Terminals.VOLATILE);}case 192:break;case 58:{return sym(Terminals.XOREQ);}case 193:break;case 26:{return sym(Terminals.OR);}case 194:break;case 123:{return sym(Terminals.PACKAGE);}case 195:break;case 112:{return sym(Terminals.SWITCH);}case 196:break;case 10:{return sym(Terminals.LPAREN);}case 197:break;case 50:{return sym(Terminals.LSHIFT);}case 198:break;case 37:{return sym(Terminals.DOUBLE_LITERAL);}case 199:break;case 71:{return sym(Terminals.ELLIPSIS);}case 200:break;case 46:{return sym(Terminals.EQEQ);}case 201:break;case 42:{return sym(Terminals.MINUSEQ);}case 202:break;case 127:{return sym(Terminals.CONTINUE);}case 203:break;case 125:{return sym(Terminals.ABSTRACT);}case 204:break;case 96:{return sym(Terminals.LONG);}case 205:break;case 27:{return sym(Terminals.PLUS);}case 206:break;case 9:{yybegin(STRING);strbuf.setLength(0);}case 207:break;case 87:{return sym(Terminals.CHARACTER_LITERAL,"\n");}case 208:break;case 82:{return sym(Terminals.CHARACTER_LITERAL,"\"");}case 209:break;case 16:{return sym(Terminals.SEMICOLON);}case 210:break;case 15:{return sym(Terminals.RBRACK);}case 211:break;case 108:{return sym(Terminals.FINAL);}case 212:break;case 60:{error("illegal escape sequence \"" + str() + "\"");}case 213:break;case 116:{return sym(Terminals.IMPORT);}case 214:break;case 92:{return sym(Terminals.THIS);}case 215:break;case 65:{strbuf.append('\r');}case 216:break;case 107:{return sym(Terminals.FLOAT);}case 217:break;case 102:{return sym(Terminals.SUPER);}case 218:break;case 90:{return sym(Terminals.ENUM);}case 219:break;case 8:{return sym(Terminals.MINUS);}case 220:break;case 67:{strbuf.append('\b');}case 221:break;case 6:{return sym(Terminals.INTEGER_LITERAL);}case 222:break;case 1:{error("illegal character \"" + str() + "\"");}case 223:break;case 84:{return sym(Terminals.CHARACTER_LITERAL,"\r");}case 224:break;case 44:{return sym(Terminals.IF);}case 225:break;case 41:{return sym(Terminals.MINUSMINUS);}case 226:break;case 131:{return sym(Terminals.PROTECTED);}case 227:break;case 63:{strbuf.append('\"');}case 228:break;case 81:{return sym(Terminals.CHARACTER_LITERAL,"\'");}case 229:break;case 85:{return sym(Terminals.CHARACTER_LITERAL,"\t");}case 230:break;case 24:{return sym(Terminals.COLON);}case 231:break;case 76:{return sym(Terminals.FOR);}case 232:break;case 62:{strbuf.append('\'');}case 233:break;case 95:{return sym(Terminals.CHAR);}case 234:break;case 64:{strbuf.append('\\');}case 235:break;case 13:{return sym(Terminals.RBRACE);}case 236:break;case 74:{return sym(Terminals.NEW);}case 237:break;case 72:{return sym(Terminals.CHARACTER_LITERAL,str().substring(1,len() - 1));}case 238:break;case 14:{return sym(Terminals.LBRACK);}case 239:break;case 22:{return sym(Terminals.COMP);}case 240:break;case 3:{return sym(Terminals.DIV);}case 241:break;case 130:{return sym(Terminals.INTERFACE);}case 242:break;case 23:{return sym(Terminals.QUESTION);}case 243:break;case 129:{return sym(Terminals.TRANSIENT);}case 244:break;case 53:{return sym(Terminals.ANDAND);}case 245:break;case 51:{return sym(Terminals.NOTEQ);}case 246:break;case 29:{return sym(Terminals.MOD);}case 247:break;case 109:{return sym(Terminals.WHILE);}case 248:break;case 79:{return sym(Terminals.LSHIFTEQ);}case 249:break;case 31:{if (sub_line == 0 && sub_column == 0) {sub_line=yyline;sub_column=yycolumn;}}case 250:break;case 56:{return sym(Terminals.PLUSEQ);}case 251:break;case 69:{strbuf.append('\f');}case 252:break;case 105:{return sym(Terminals.CATCH);}case 253:break;case 17:{return sym(Terminals.COMMA);}case 254:break;case 134:{return sym(Terminals.SYNCHRONIZED);}case 255:break;case 54:{return sym(Terminals.OREQ);}case 256:break;case 113:{return sym(Terminals.RETURN);}case 257:break;case 73:{return sym(Terminals.TRY);}case 258:break;case 5:{return sym(Terminals.IDENTIFIER);}case 259:break;case 94:{return sym(Terminals.CASE);}case 260:break;case 12:{return sym(Terminals.LBRACE);}case 261:break;case 133:{return sym(Terminals.IMPLEMENTS);}case 262:break;case 111:{return sym(Terminals.STATIC);}case 263:break;case 30:{return sym(Terminals.AT);}case 264:break;case 40:{return sym(Terminals.FLOATING_POINT_LITERAL,str().substring(0,len() - 1));}case 265:break;case 7:{return sym(Terminals.DOT);}case 266:break;case 101:{return sym(Terminals.SHORT);}case 267:break;case 2:{}case 268:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{if (!(sub_line == 0 && sub_column == 0) && (sub_line != yyline || sub_column != yycolumn - 1)) {sub_line=0;sub_column=0;error("error");}return sym(Terminals.EOF);}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(getAccessFlags());}  }
class C{  @Override public void onPause(boolean multitasking){  lastPausedTimeMs=new Date().getTime();}  }
class C{  public static SumProjectionExpression sumDistinct(Expression expression){  return new SumProjectionExpression(expression,true);}  }
class C{  public void initialize(){  if (mAct == null)   throw new NullPointerException();  if (!Controller.getInstance().isValidInstallation()) {    Log.i(TAG,"Error reporting disabled, invalid installation.");    return;  }  if (Controller.getInstance().isNoCrashreports()) {    Log.i(TAG,"User has disabled error reporting.");    return;  }  int latest=Controller.getInstance().appLatestVersion();  int current=Utils.getAppVersionCode(mAct);  if (latest > current) {    Log.i(TAG,"App is not updated, error reports are disabled.");    return;  }  sendDebugReportToAuthor();  Thread.setDefaultUncaughtExceptionHandler(this);}  }
class C{  @Override public boolean isSelfCaptured(){  return (flags & SELF_CAPTURED) != 0;}  }
class C{  JCNewClass makeNewClass(Type ctype,List<JCExpression> args,Symbol cons){  JCNewClass tree=make.NewClass(null,null,make.QualIdent(ctype.tsym),args,null);  tree.constructor=cons;  tree.type=ctype;  return tree;}  }
class C{  public void normalizeDocument(){}  }
class C{  private static Integer b2i(boolean b){  return b ? one : zero;}  }
class C{  public boolean isNativeScrollingEnabled(){  return nativeScrolling;}  }
class C{  public void unpublish(String id,Handler<AsyncResult<Void>> resultHandler){  delegate.unpublish(id,resultHandler);}  }
class C{  private void initializePasswordRepetitionEditText(){  passwordRepetitionEditText=(EditText)findViewById(R.id.password_repetition_edit_text);  passwordRepetitionEditText.addValidator(Validators.equal(this,R.string.equal_validator_error_message,passwordEditText));}  }
class C{  @RequestMapping(value="/api/greetings/{id}",method=RequestMethod.DELETE) public ResponseEntity<Greeting> deleteGreeting(@PathVariable("id") Long id){  logger.info("> deleteGreeting id:{}",id);  greetingService.delete(id);  logger.info("< deleteGreeting id:{}",id);  return new ResponseEntity<Greeting>(HttpStatus.NO_CONTENT);}  }
class C{  private Dimension layoutSize(Container target,boolean preferred){synchronized (target.getTreeLock()) {    int targetWidth=target.getSize().width;    Container container=target;    while (container.getSize().width == 0 && container.getParent() != null) {      container=container.getParent();    }    targetWidth=container.getSize().width;    if (targetWidth == 0) {      targetWidth=Integer.MAX_VALUE;    }    int hgap=getHgap();    int vgap=getVgap();    Insets insets=target.getInsets();    int horizontalInsetsAndGap=insets.left + insets.right + (hgap * 2);    int maxWidth=targetWidth - horizontalInsetsAndGap;    Dimension dim=new Dimension(0,0);    int rowWidth=0;    int rowHeight=0;    int nmembers=target.getComponentCount();    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.isVisible()) {        Dimension d=preferred ? m.getPreferredSize() : m.getMinimumSize();        if (rowWidth + d.width > maxWidth) {          addRow(dim,rowWidth,rowHeight);          rowWidth=0;          rowHeight=0;        }        if (rowWidth != 0) {          rowWidth+=hgap;        }        rowWidth+=d.width;        rowHeight=Math.max(rowHeight,d.height);      }    }    addRow(dim,rowWidth,rowHeight);    dim.width+=horizontalInsetsAndGap;    dim.height+=insets.top + insets.bottom + vgap * 2;    Container scrollPane=SwingUtilities.getAncestorOfClass(JScrollPane.class,target);    if (scrollPane != null && target.isValid()) {      dim.width-=(hgap + 1);    }    return dim;  }}  }
class C{  public final void println(int i) throws IOException {  print(i);  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline) {    flush();  }}  }
class C{  public int toIndex(char c){  if (c >= inverse.length || inverse[c] == -1) {    throw new IllegalArgumentException("Character " + c + " not in alphabet");  }  return inverse[c];}  }
class C{  public boolean hasDescription(){  return hasExtension(SidewikiUserDescription.class);}  }
class C{  public DoubleMatrix3D random(int slices,int rows,int columns){  return make(slices,rows,columns).assign(cern.jet.math.Functions.random());}  }
class C{  public DESedeWrapCipher(){  cipher=new CipherBlockChaining(new DESedeCrypt());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.STRICTNESS___ANONYMOUS_STRICTNESS_11:    getAnonymous_strictness_1_1().clear();  getAnonymous_strictness_1_1().addAll((Collection<? extends Anonymous_strictness_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public MotionAnimation(TimedElement timedElement,AnimatableElement animatableElement,int calcMode,float[] keyTimes,float[] keySplines,boolean additive,boolean cumulative,AnimatableValue[] values,AnimatableValue from,AnimatableValue to,AnimatableValue by,ExtendedGeneralPath path,float[] keyPoints,boolean rotateAuto,boolean rotateAutoReverse,float rotateAngle,short rotateAngleUnit){  super(timedElement,animatableElement,calcMode,keyTimes,keySplines,additive,cumulative);  this.rotateAuto=rotateAuto;  this.rotateAutoReverse=rotateAutoReverse;  this.rotateAngle=AnimatableAngleValue.rad(rotateAngle,rotateAngleUnit);  if (path == null) {    path=new ExtendedGeneralPath();    if (values == null || values.length == 0) {      if (from != null) {        AnimatableMotionPointValue fromPt=(AnimatableMotionPointValue)from;        float x=fromPt.getX();        float y=fromPt.getY();        path.moveTo(x,y);        if (to != null) {          AnimatableMotionPointValue toPt=(AnimatableMotionPointValue)to;          path.lineTo(toPt.getX(),toPt.getY());        } else         if (by != null) {          AnimatableMotionPointValue byPt=(AnimatableMotionPointValue)by;          path.lineTo(x + byPt.getX(),y + byPt.getY());        } else {          throw timedElement.createException("values.to.by.path.missing",new Object[]{null});        }      } else {        if (to != null) {          AnimatableMotionPointValue unPt=(AnimatableMotionPointValue)animatableElement.getUnderlyingValue();          AnimatableMotionPointValue toPt=(AnimatableMotionPointValue)to;          path.moveTo(unPt.getX(),unPt.getY());          path.lineTo(toPt.getX(),toPt.getY());          this.cumulative=false;        } else         if (by != null) {          AnimatableMotionPointValue byPt=(AnimatableMotionPointValue)by;          path.moveTo(0,0);          path.lineTo(byPt.getX(),byPt.getY());          this.additive=true;        } else {          throw timedElement.createException("values.to.by.path.missing",new Object[]{null});        }      }    } else {      AnimatableMotionPointValue pt=(AnimatableMotionPointValue)values[0];      path.moveTo(pt.getX(),pt.getY());      for (int i=1; i < values.length; i++) {        pt=(AnimatableMotionPointValue)values[i];        path.lineTo(pt.getX(),pt.getY());      }    }  }  this.path=path;  pathLength=new PathLength(path);  int segments=0;  ExtendedPathIterator epi=path.getExtendedPathIterator();  while (!epi.isDone()) {    int type=epi.currentSegment();    if (type != ExtendedPathIterator.SEG_MOVETO) {      segments++;    }    epi.next();  }  int count=keyPoints == null ? segments + 1 : keyPoints.length;  float totalLength=pathLength.lengthOfPath();  if (this.keyTimes != null && calcMode != CALC_MODE_PACED) {    if (this.keyTimes.length != count) {      throw timedElement.createException("attribute.malformed",new Object[]{null,SMILConstants.SMIL_KEY_TIMES_ATTRIBUTE});    }  } else {    if (calcMode == CALC_MODE_LINEAR || calcMode == CALC_MODE_SPLINE) {      this.keyTimes=new float[count];      for (int i=0; i < count; i++) {        this.keyTimes[i]=(float)i / (count - 1);      }    } else     if (calcMode == CALC_MODE_DISCRETE) {      this.keyTimes=new float[count];      for (int i=0; i < count; i++) {        this.keyTimes[i]=(float)i / count;      }    } else {      epi=path.getExtendedPathIterator();      this.keyTimes=new float[count];      int j=0;      for (int i=0; i < count - 1; i++) {        while (epi.currentSegment() == ExtendedPathIterator.SEG_MOVETO) {          j++;          epi.next();        }        this.keyTimes[i]=pathLength.getLengthAtSegment(j) / totalLength;        j++;        epi.next();      }      this.keyTimes[count - 1]=1f;    }  }  if (keyPoints != null) {    if (keyPoints.length != this.keyTimes.length) {      throw timedElement.createException("attribute.malformed",new Object[]{null,SMILConstants.SMIL_KEY_POINTS_ATTRIBUTE});    }  } else {    epi=path.getExtendedPathIterator();    keyPoints=new float[count];    int j=0;    for (int i=0; i < count - 1; i++) {      while (epi.currentSegment() == ExtendedPathIterator.SEG_MOVETO) {        j++;        epi.next();      }      keyPoints[i]=pathLength.getLengthAtSegment(j) / totalLength;      j++;      epi.next();    }    keyPoints[count - 1]=1f;  }  this.keyPoints=keyPoints;}  }
class C{  protected LinesToCharsResult diff_linesToChars(String text1,String text2){  List<String> lineArray=new ArrayList<String>();  Map<String,Integer> lineHash=new HashMap<String,Integer>();  lineArray.add("");  String chars1=diff_linesToCharsMunge(text1,lineArray,lineHash);  String chars2=diff_linesToCharsMunge(text2,lineArray,lineHash);  return new LinesToCharsResult(chars1,chars2,lineArray);}  }
class C{  public MacroException(String message){  super(message);}  }
class C{  public DatabaseInfo(){  this.typesWithNullDefault.add(new Integer(Types.CHAR));  this.typesWithNullDefault.add(new Integer(Types.VARCHAR));  this.typesWithNullDefault.add(new Integer(Types.LONGVARCHAR));  this.typesWithNullDefault.add(new Integer(Types.CLOB));  this.typesWithNullDefault.add(new Integer(Types.BINARY));  this.typesWithNullDefault.add(new Integer(Types.VARBINARY));  this.typesWithNullDefault.add(new Integer(Types.LONGVARBINARY));  this.typesWithNullDefault.add(new Integer(Types.BLOB));  this.typesWithSize.add(new Integer(Types.CHAR));  this.typesWithSize.add(new Integer(Types.VARCHAR));  this.typesWithSize.add(new Integer(Types.BINARY));  this.typesWithSize.add(new Integer(Types.VARBINARY));  this.typesWithSize.add(new Integer(ColumnTypes.NCHAR));  this.typesWithSize.add(new Integer(ColumnTypes.NVARCHAR));  this.typesWithPrecisionAndScale.add(new Integer(Types.DECIMAL));  this.typesWithPrecisionAndScale.add(new Integer(Types.NUMERIC));}  }
class C{  public void buildTable(String home) throws Exception {  if (IOUtils.isFile(home))   this.buildTableHelper(home); else   if (IOUtils.isDirectory(home)) {    String[] files=IOUtils.lsFiles(home);    for (    String file : files) {      this.buildTableHelper(home + "\\" + file);    }  }}  }
class C{  public static float min(float x,float y){  return (x < y) ? x : y;}  }
class C{  static protected boolean isNormalShutdown(final ResourceManager resourceManager,final Throwable t){  if (Thread.interrupted()) {    return true;  }  if (!resourceManager.isRunning() || !resourceManager.getConcurrencyManager().isOpen() || InnerCause.isInnerCause(t,InterruptedException.class)|| InnerCause.isInnerCause(t,ClosedByInterruptException.class)|| InnerCause.isInnerCause(t,ClosedChannelException.class)|| InnerCause.isInnerCause(t,AsynchronousCloseException.class)) {    return true;  }  return false;}  }
class C{  public ImageException(Reason reason,Throwable e){  super(e);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.name());}  }
class C{  public QuestSmallerThanCondition(final String questname,final int index,final int state){  this.questname=checkNotNull(questname);  this.index=index;  this.state=state;}  }
class C{  public DtlsHandshakeException(String message,AlertDescription description,AlertLevel level,InetSocketAddress peer,Throwable cause){  super(message,peer,cause);  if (description == null) {    throw new NullPointerException("Description must not be null");  } else   if (level == null) {    throw new NullPointerException("Level must not be null");  } else {    this.description=description;    this.level=level;  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void initializeMBean() throws org.apache.geode.admin.AdminException {  this.mbeanName=new StringBuffer("GemFire.Cache:").append("name=").append(MBeanUtil.makeCompliantMBeanNameProperty(getName())).append(",id=").append(getId()).append(",owner=").append(MBeanUtil.makeCompliantMBeanNameProperty(vm.getId().toString())).append(",type=Cache").toString();  this.objectName=MBeanUtil.createMBean(this,addDynamicAttributes(MBeanUtil.lookupManagedBean(this)));}  }
class C{  public static Rectangle2D calcAlignedStringBounds(String text,Graphics2D g2,float x,float y,TextAnchor anchor){  Rectangle2D textBounds=new Rectangle2D.Double();  float[] adjust=deriveTextBoundsAnchorOffsets(g2,text,anchor,textBounds);  textBounds.setRect(x + adjust[0],y + adjust[1] + adjust[2],textBounds.getWidth(),textBounds.getHeight());  return textBounds;}  }
class C{  public static boolean isLikelyChannel(String word){  boolean result=false;  if (word != null) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(word,CHANNEL_STRIP_CHARS,true);    if (tok.hasMoreTokens()) {      String current=tok.nextToken();      try {        int channel=Integer.parseInt(current);        return channel >= 0 && channel <= 255;      } catch (      NumberFormatException nfe) {        if (tok.hasMoreTokens()) {          try {            current=tok.nextToken();            int channel=Integer.parseInt(current);            return channel >= 0 && channel <= 255;          } catch (          NumberFormatException nfe2) {            if (tok.hasMoreTokens()) {              try {                current=tok.nextToken();                int channel=Integer.parseInt(current);                return channel >= 0 && channel <= 255;              } catch (              NumberFormatException nfe3) {                if (tok.hasMoreTokens()) {                  try {                    current=tok.nextToken();                    int channel=Integer.parseInt(current);                    return channel >= 0 && channel <= 255;                  } catch (                  NumberFormatException nfe4) {                  }                }              }            }          }        }      }    }  }  return result;}  }
class C{  public void startFresh(){  output.message("Initializing Generation 0");  statistics.preInitializationStatistics(this);  population=initializer.initialPopulation(this,0);  statistics.postInitializationStatistics(this);  exchanger.initializeContacts(this);  evaluator.initializeContacts(this);}  }
class C{  public AdaptableHeuristicFunction adaptToGoal(Object goal,Map map){  this.goal=goal;  this.map=map;  return this;}  }
class C{  private static String[] extractHostports(SrvRecord[] srvRecords){  String[] hostports=null;  int head=0;  int tail=0;  int sublistLength=0;  int k=0;  for (int i=0; i < srvRecords.length; i++) {    if (hostports == null) {      hostports=new String[srvRecords.length];    }    head=i;    while (i < srvRecords.length - 1 && srvRecords[i].priority == srvRecords[i + 1].priority) {      i++;    }    tail=i;    sublistLength=(tail - head) + 1;    for (int j=0; j < sublistLength; j++) {      hostports[k++]=selectHostport(srvRecords,head,tail);    }  }  return hostports;}  }
class C{  private static int jdiffModifierToReflectionFormat(String name,XmlPullParser parser){  int modifier=0;  for (int i=0; i < parser.getAttributeCount(); i++) {    modifier|=modifierDescriptionToReflectedType(name,parser.getAttributeName(i),parser.getAttributeValue(i));  }  return modifier;}  }
class C{  public boolean relative(int rows) throws SQLException {  return crsInternal.relative(rows);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public static Relationship createRelationship(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return relationshipConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  private static void swap(char x[],int a,int b){  char t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public Spider addRequest(Request... requests){  for (  Request request : requests) {    addRequest(request);  }  signalNewUrl();  return this;}  }
class C{  protected Tasks<T> doGetTasks(URI id){  TaskList response=client.get(TaskList.class,getIdUrl() + "/tasks",id);  return new Tasks<T>(client,response.getTaskList(),resourceClass);}  }
class C{  public synchronized boolean in(Object x){  return contains(x);}  }
class C{  private void doScrollY(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      smoothScrollBy(0,delta);    } else {      scrollBy(0,delta);    }  }}  }
class C{  public void testDocumentSerialization(TextAnnotation ta){  try {    String jsonRepr=SerializationHelper.serializeToJson(ta);    Assert.assertNotNull(jsonRepr);    TextAnnotation taRepr=SerializationHelper.deserializeFromJson(jsonRepr);    Assert.assertNotNull(taRepr);    Assert.assertEquals(ta.getAvailableViews(),taRepr.getAvailableViews());    for (    String view : ta.getAvailableViews()) {      Assert.assertEquals(ta.getView(view).getNumberOfConstituents(),taRepr.getView(view).getNumberOfConstituents());    }  } catch (  Exception ex) {    Assert.fail("Should not throw an exception");  }}  }
class C{  @Override public boolean supportsCatalogsInProcedureCalls(){  debugCodeCall("supportsCatalogsInProcedureCalls");  return false;}  }
class C{  public static void main(String[] args){  In in=new In(args[0]);  int[] whitelist=in.readAllInts();  Arrays.sort(whitelist);  while (!StdIn.isEmpty()) {    int key=StdIn.readInt();    if (BinarySearch.indexOf(whitelist,key) == -1)     StdOut.println(key);  }}  }
class C{  public static IntStream takeWhile(IntStream stream,IntPredicate predicate){  Objects.requireNonNull(stream);  Objects.requireNonNull(predicate);  return StreamSupport.intStream(new WhileOps.UnorderedWhileSpliterator.OfInt.Taking(stream.spliterator(),true,predicate),stream.isParallel()).onClose(null);}  }
class C{  public Matrix zoomIn(float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(1.4f,1.4f,x,y);  return save;}  }
class C{  public StubNotFoundException(String s,Exception ex){  super(s,ex);}  }
class C{  public void beginAccept1(WebRequest theRequest){  theRequest.addHeader("Accept","text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c");}  }
class C{  private long convertUTMToMGRS(long Zone,double Latitude,double Easting,double Northing,long Precision){  double grid_easting;  double grid_northing;  long[] letters=new long[MGRS_LETTERS];  double divisor;  long error_code;  divisor=Math.pow(10.0,(5 - Precision));  Easting=roundMGRS(Easting / divisor) * divisor;  Northing=roundMGRS(Northing / divisor) * divisor;  getGridValues(Zone);  error_code=getLatitudeLetter(Latitude);  letters[0]=getLastLetter();  if (error_code == MGRS_NO_ERROR) {    grid_northing=Northing;    if (grid_northing == 1.e7)     grid_northing=grid_northing - 1.0;    while (grid_northing >= TWOMIL) {      grid_northing=grid_northing - TWOMIL;    }    grid_northing=grid_northing + false_northing;    if (grid_northing >= TWOMIL)     grid_northing=grid_northing - TWOMIL;    letters[2]=(long)(grid_northing / ONEHT);    if (letters[2] > LETTER_H)     letters[2]=letters[2] + 1;    if (letters[2] > LETTER_N)     letters[2]=letters[2] + 1;    grid_easting=Easting;    if (((letters[0] == LETTER_V) && (Zone == 31)) && (grid_easting == 500000.0))     grid_easting=grid_easting - 1.0;    letters[1]=ltr2_low_value + ((long)(grid_easting / ONEHT) - 1);    if ((ltr2_low_value == LETTER_J) && (letters[1] > LETTER_N))     letters[1]=letters[1] + 1;    makeMGRSString(Zone,letters,Easting,Northing,Precision);  }  return error_code;}  }
class C{  public static boolean isReferenceType(NodeId referenceTypeId){  if (referenceTypeId.equals(Identifiers.References) || referenceTypeId.equals(Identifiers.NonHierarchicalReferences) || referenceTypeId.equals(Identifiers.HierarchicalReferences)|| referenceTypeId.equals(Identifiers.HasEventSource)|| referenceTypeId.equals(Identifiers.HasNotifier)|| referenceTypeId.equals(Identifiers.Organizes)|| referenceTypeId.equals(Identifiers.HasChild)|| referenceTypeId.equals(Identifiers.HasSubtype)|| referenceTypeId.equals(Identifiers.Aggregates)|| referenceTypeId.equals(Identifiers.HasProperty)|| referenceTypeId.equals(Identifiers.HasComponent)|| referenceTypeId.equals(Identifiers.HasOrderedComponent)|| referenceTypeId.equals(Identifiers.GeneratesEvent)|| referenceTypeId.equals(Identifiers.AlwaysGeneratesEvent)|| referenceTypeId.equals(Identifiers.HasEncoding)|| referenceTypeId.equals(Identifiers.HasModellingRule)|| referenceTypeId.equals(Identifiers.HasDescription)|| referenceTypeId.equals(Identifiers.HasTypeDefinition)) {    return true;  }  return false;}  }
class C{  public boolean instructionIsExit(){  return isExit;}  }
class C{  public synchronized void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  public static void paint(Geometry geometry,Viewport viewport,Graphics2D g,Color lineColor,Color fillColor){  paint(geometry,viewport,g,lineColor,fillColor,null);}  }
class C{  public boolean generate(float tries,Function<BiomeDecoratorBetweenlands,Boolean> generator){  boolean generated=false;  if (tries < 1.0F) {    if (this.rand.nextFloat() <= tries)     generated=generator.apply(this);  } else {    float remainder=tries % 1.0F;    if (this.rand.nextFloat() <= remainder)     tries++;    for (int i=0; i < tries; i++) {      if (generator.apply(this))       generated=true;    }  }  return generated;}  }
class C{  public final boolean isTerminated(){  return done.getCount() == 0;}  }
class C{  public static void main(String[] args){  if (args.length == 0) {    System.out.println("Jython present: " + isPresent());  } else {    Jython jython=new Jython();    if (jython.getInterpreter() == null) {      System.err.println("Cannot instantiate Python Interpreter!");    } else {      jython.invoke("execfile",new Class[]{String.class},new Object[]{args[0]});    }  }}  }
class C{  public WindowsFS(FileSystem delegate){  super("windows://",delegate);}  }
class C{  protected final void putOidValue(final long[] s){  final int end=start;  final int slength=s.length;  if ((slength < 2) || (s[0] > 2) || (s[1] >= 40)) {    throw new IllegalArgumentException();  }  for (int i=slength - 1; i >= 2; i--) {    long c=s[i];    if (c < 0) {      throw new IllegalArgumentException();    } else     if (c < 128) {      bytes[--start]=(byte)c;    } else {      bytes[--start]=(byte)(c & 127);      c=c >> 7;      while (c != 0) {        bytes[--start]=(byte)(c | 128);        c=c >> 7;      }    }  }  bytes[--start]=(byte)(s[0] * 40 + s[1]);  putLength(end - start);}  }
class C{  public static String geFileFromAssets(Context context,String fileName){  if (context == null || TextUtils.isEmpty(fileName)) {    return null;  }  StringBuilder s=new StringBuilder("");  try {    InputStreamReader in=new InputStreamReader(context.getResources().getAssets().open(fileName));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  @Deprecated public Date(int year,int month,int date,int hrs,int min){  this(year,month,date,hrs,min,0);}  }
class C{  public void incEts(){  ets++;}  }
class C{  protected int numberOfBitsInPartialUnit(){  return QuickBitVector.offset(nbits);}  }
class C{  public ActionLocation locateSourceLineEnd(ActionLocation l){  return locateSourceLineEnd(l,-1);}  }
class C{  public ResourceList<VirtualSubnet> nextList(String pageLink) throws ExternalException {  ServiceDocumentQueryResult queryResult;  try {    queryResult=cloudStoreClient.queryDocumentPage(pageLink);  } catch (  DocumentNotFoundException e) {    throw new PageExpiredException(pageLink);  }  return PaginationUtils.xenonQueryResultToResourceList(VirtualNetworkService.State.class,queryResult,null);}  }
class C{  public void println(String value) throws IOException {  response.getWriter().println(value);}  }
class C{  public static void print(char x){  out.print(x);  out.flush();}  }
class C{  public void addCell(groovy.swing.impl.TableLayoutCell tag){  int gridx=0;  for (Iterator iter=cells.iterator(); iter.hasNext(); ) {    groovy.swing.impl.TableLayoutCell cell=(groovy.swing.impl.TableLayoutCell)iter.next();    gridx+=cell.getColspan();  }  tag.getConstraints().gridx=gridx;  cells.add(tag);}  }
class C{  @NotNull public static PsiMethod[] filterAvailableMethods(PsiClass clazz,@NotNull FilterPattern pattern){  if (log.isDebugEnabled())   log.debug("Filtering methods using the pattern: " + pattern);  List<PsiMethod> availableMethods=new ArrayList<PsiMethod>();  PsiMethod[] methods=clazz.getMethods();  for (  PsiMethod method : methods) {    if (!PsiAdapter.isGetterMethod(method)) {      continue;    }    final PsiType returnType=method.getReturnType();    if (returnType == null || PsiType.VOID.equals(returnType)) {      continue;    }    if (!method.hasModifierProperty(PsiModifier.PUBLIC) || method.hasModifierProperty(PsiModifier.STATIC) || method.hasModifierProperty(PsiModifier.ABSTRACT)) {      continue;    }    String fieldName=PsiAdapter.getGetterFieldName(method);    if (clazz.findFieldByName(fieldName,false) != null) {      continue;    }    final String methodName=method.getName();    if ("toString".equals(methodName) || "getClass".equals(methodName) || "hashCode".equals(methodName)) {      continue;    }    if (pattern.methodMatches(method)) {      continue;    }    if (log.isDebugEnabled())     log.debug("Adding the method " + methodName + " as there is not a field for this getter");    availableMethods.add(method);  }  return availableMethods.toArray(new PsiMethod[availableMethods.size()]);}  }
class C{  public synchronized void updateProgress(final int value){  final Thread t=Thread.currentThread();  final MyInteger v=mIndividualThreadProgress.get(t);  if (v == null) {    mIndividualThreadProgress.put(t,new MyInteger(value));  } else {    v.setValue(value);  }  if (value > mLastReportedProgress) {    int min=Integer.MAX_VALUE;    for (    final MyInteger m : mIndividualThreadProgress.values()) {      if (m.getValue() < min) {        min=m.getValue();      }    }    if (min > mLastReportedProgress) {      mLastReportedProgress=min;      Diagnostic.progress("Processed " + min + "% of "+ mName);    }  }}  }
class C{  public WindowBuilder cancelButtonClickListener(final ClickListener cancelButtonClickListener){  this.cancelButtonClickListener=cancelButtonClickListener;  return this;}  }
class C{  public E first(){  return backingMap.firstKey();}  }
class C{  public EaseIn(){}  }
class C{  public static Operator createFromXML(Element element,Process process,List<UnknownParameterInformation> unknownParameterInformation,ProgressListener l) throws XMLException {  XMLImporter importer=new XMLImporter(l);  return importer.parseOperator(element,XMLImporter.CURRENT_VERSION,process,unknownParameterInformation);}  }
class C{  public boolean await(long timeout,TimeUnit timeUnit) throws InterruptedException {  boolean awaitResult=false;  lock.lock();  boolean localIsDone;  try {    awaitResult=done.await(timeout,timeUnit);  }  finally {    localIsDone=isDone;    isDone=false;    lock.unlock();  }  return awaitResult && localIsDone;}  }
class C{  protected static void close(Openable element){  try {    element.close();  } catch (  JavaModelException e) {  }}  }
class C{  public static void flatten(File dirToRemove) throws IOException {  final File parent=dirToRemove.getParentFile();  for (  File child : FileMisc.list(dirToRemove)) {    boolean createDestDir=false;    if (child.isFile()) {      FileUtils.moveFileToDirectory(child,parent,createDestDir);    } else     if (child.isDirectory()) {      FileUtils.moveDirectoryToDirectory(child,parent,createDestDir);    } else {      throw new IllegalArgumentException("Unknown filetype: " + child);    }  }  FileMisc.forceDelete(dirToRemove);}  }
class C{  private static RPClass createRPClass(){  final RPClass rpclass=new RPClass("active_entity");  rpclass.isA("entity");  rpclass.addAttribute("dir",Type.BYTE,Definition.VOLATILE);  rpclass.addAttribute("speed",Type.FLOAT,Definition.VOLATILE);  return rpclass;}  }
class C{  public boolean isCancelVisible(){  return m_ButtonCancel.isVisible();}  }
class C{  public T casePrimitiveValueExpression(PrimitiveValueExpression object){  return null;}  }
class C{  public void initializeOutput(NeuronGroup neuronGroup){  if (outputLayer != null) {    throw new IllegalStateException("The output layer has already" + " been set.");  }  this.outputLayer=neuronGroup;  numOutputs=outputLayer.size();  outputLayer.setLabel("Output");  this.addNeuronGroup(neuronGroup);}  }
class C{  public Type refreshBinderType(final TypeScope scope){  if (this.annotation != null) {    this.inferenceType=this.annotation.getFresh(scope);  } else {    this.inferenceType=scope.getVar(this.name);  }  return this.inferenceType;}  }
class C{  public SequenceTypeTuple buildSequenceTypeTuple(UUID id,UUID trackId,org.smpte_ra.schemas.st2067_2_2016.SequenceType.ResourceList resourceList,Composition.SequenceTypeEnum sequenceType){  org.smpte_ra.schemas.st2067_2_2016.SequenceType sequence=new org.smpte_ra.schemas.st2067_2_2016.SequenceType();  sequence.setId(UUIDHelper.fromUUID(id));  sequence.setTrackId(UUIDHelper.fromUUID(trackId));  sequence.setResourceList(resourceList);  return new SequenceTypeTuple(sequence,sequenceType);}  }
class C{  public Min(){  super(Number.class,Number.class,Number.class);}  }
class C{  @Timed @ExceptionMetered @GET @Path("{name}") @Produces(APPLICATION_JSON) public ClientDetailResponseV2 clientInfo(@Auth AutomationClient automationClient,@PathParam("name") String name){  Client client=clientDAO.getClient(name).orElseThrow(null);  return ClientDetailResponseV2.fromClient(client);}  }
class C{  public dl removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void testCopyWithTokens() throws Exception {  String fileName="simpleCopyWT1";  String fileContents="@token1@ ";  File file1=createFile(configFileDirectory,fileName,fileContents);  FileConfig configFile=new FileConfig();  configFile.setFile(getAbsolutePath(file1));  configuration.setProperty("token1","value1");  testCopy(configFile,fileName,"@token1@ ");  configFile.setConfigfile("true");  testCopy(configFile,fileName,"value1 ");}  }
class C{  default B effect(final FireworkEffect effect){  this.meta().setEffect(effect);  return this.getBuilder();}  }
class C{  public String toString(){  StringBuilder profile=new StringBuilder();  profile.append(" IpAddress : ");  profile.append(getIpAddress());  profile.append(" UserName : ");  profile.append(getUserName());  profile.append(" Password : ");  profile.append("*******");  profile.append(" InteropNamespace : ");  profile.append(getInteropNamespace());  profile.append(" Protocol : ");  profile.append(getProtocol());  String port=getProviderPort();  if (port != null) {    profile.append(" ProviderPort : ");    profile.append(getProviderPort());  } else {    profile.append(" Port : ");    profile.append(getPortNumber());  }  return profile.toString();}  }
class C{  public Vector3(float x,float y,float z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public static void main(String[] argv){  runFilter(new AllFilter(),argv);}  }
class C{  @Override public void addBatch() throws SQLException {  try {    debugCodeCall("addBatch");    checkClosed();    try {      ArrayList<? extends ParameterInterface> parameters=command.getParameters();      int size=parameters.size();      Value[] set=new Value[size];      for (int i=0; i < size; i++) {        ParameterInterface param=parameters.get(i);        Value value=param.getParamValue();        set[i]=value;      }      if (batchParameters == null) {        batchParameters=New.arrayList();      }      batchParameters.add(set);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public HessianException(String message,Throwable rootCause){  super(message,rootCause);}  }
class C{  public boolean supportsInnerJoin(){  return supportedJOINs[JoinRowSet.INNER_JOIN];}  }
class C{  public String writeLongToString(){  StringBuilder builder=new StringBuilder();  for (int i=0; i < (bitSet.getBits().length); ++i) {    builder.append(Long.toString(bitSet.getBits()[i]) + "|");  }  return builder.toString();}  }
class C{  private void checkForClusterHardwareChange(List<String> clusterAssembyIds,String systemNativeGUID,String systemSerialNumber,VPlexApiClient client,Map<String,StorageSystemViewObject> scanCache,StorageProvider mgmntServer) throws Exception {  s_logger.info("clusterAssembyIds is " + clusterAssembyIds);  if (VPlexApiConstants.VPLEX_METRO_ASSEMBLY_COUNT == clusterAssembyIds.size()) {    List<StorageSystem> vplexLocalStorageSystems=VPlexControllerUtils.getAllVplexLocalStorageSystems(_dbClient);    for (    StorageSystem vplex : vplexLocalStorageSystems) {      if (null != vplex && null != vplex.getVplexAssemblyIdtoClusterId()) {        String assemblyId=vplex.getVplexAssemblyIdtoClusterId().keySet().iterator().next();        if (systemNativeGUID.contains(assemblyId)) {          String message=String.format("The VPLEX storage system serial number unexpectedly changed. " + "Existing VPLEX local assembly id %s is a substring of the newly-discoverd system GUID %s, " + "which indicates a change in VPLEX hardware configuration from local to metro. "+ "Scanning of this Storage Provider cannot continue. Recommended course of action is "+ "to contact EMC Customer Support.",assemblyId,systemNativeGUID);          boolean allowAutoUpgrade=Boolean.valueOf(ControllerUtils.getPropertyValueFromCoordinator(_coordinator,ALLOW_LOCAL_TO_METRO_AUTO_UPGRADE));          if (!allowAutoUpgrade) {            if (null != vplex && systemNativeGUID.contains(vplex.getNativeGuid())) {              s_logger.error(message);              vplex.setDiscoveryStatus(DataCollectionJobStatus.ERROR.name());              vplex.setLastDiscoveryStatusMessage(message);              vplex.setLastDiscoveryRunTime(System.currentTimeMillis());              _dbClient.updateObject(vplex);              throw VPlexApiException.exceptions.vplexClusterConfigurationChangedFromLocalToMetro(assemblyId,systemNativeGUID);            }          } else {            s_logger.warn(message);            s_logger.warn("Auto upgrade is allowed, will attempt to automatically upgrade to Metro");            String oldSerialNumber=vplex.getSerialNumber();            vplex.setSerialNumber(systemSerialNumber);            _dbClient.updateObject(vplex);            if (null == vplex.getSmisProviderIP()) {              s_logger.info("The provider information was nulled out by a previous upgrade attempt, resetting");              vplex.setActiveProviderURI(mgmntServer.getId());              StringSet providers=new StringSet();              providers.add(mgmntServer.getId().toString());              vplex.setProviders(providers);              vplex.setSmisProviderIP(mgmntServer.getIPAddress());              vplex.setSmisPortNumber(mgmntServer.getPortNumber());              vplex.setSmisUserName(mgmntServer.getUserName());              vplex.setSmisPassword(mgmntServer.getPassword());            }            StorageSystemViewObject systemViewObject=scanCache.get(vplex.getNativeGuid());            if (null == systemViewObject) {              systemViewObject=new StorageSystemViewObject();            } else {              throw VPlexApiException.exceptions.vplexClusterConfigurationChangedFromLocalToMetro(assemblyId,systemNativeGUID);            }            s_logger.info("adding systemNativeGuid {} storage view object {} to scan cache",systemNativeGUID,systemViewObject);            scanCache.put(systemNativeGUID,systemViewObject);            if (vplex.getLabel().equals(vplex.getNativeGuid())) {              vplex.setLabel(systemNativeGUID);            }            vplex.setNativeGuid(systemNativeGUID);            vplex.setVplexAssemblyIdtoClusterId(new StringMap());            discoverClusterIdentification(vplex,client);            Map<String,StoragePort> autoUpgradePortsMap=new HashMap<String,StoragePort>();            List<StoragePort> storagePorts=ControllerUtils.getSystemPortsOfSystem(_dbClient,vplex.getId());            for (            StoragePort storagePort : storagePorts) {              String nativeGuid=NativeGUIDGenerator.generateNativeGuid(_dbClient,storagePort);              s_logger.info("autoUpgradePortsMap: setting native guid {} on storage port {}",nativeGuid,storagePort.forDisplay());              storagePort.setNativeGuid(nativeGuid);              storagePort.setLabel(nativeGuid);              autoUpgradePortsMap.put(storagePort.getPortNetworkId(),storagePort);            }            boolean doPersist=false;            try {              discoverPorts(client,vplex,new ArrayList<StoragePort>(),autoUpgradePortsMap);              doPersist=true;            } catch (            Exception ex) {              s_logger.error("Failed to discover ports. ",ex);              throw VPlexApiException.exceptions.vplexClusterConfigurationChangedFromLocalToMetro(assemblyId,systemNativeGUID);            } finally {              if (doPersist) {                _dbClient.updateObject(vplex);              } else {                StorageSystem databaseVplex=_dbClient.queryObject(StorageSystem.class,vplex.getId());                databaseVplex.setSerialNumber(oldSerialNumber);                _dbClient.updateObject(databaseVplex);              }            }          }        }      }    }  } else   if (VPlexApiConstants.VPLEX_LOCAL_ASSEMBLY_COUNT == clusterAssembyIds.size()) {    List<StorageSystem> vplexMetroStorageSystems=VPlexControllerUtils.getAllVplexMetroStorageSystems(_dbClient);    for (    StorageSystem vplex : vplexMetroStorageSystems) {      if (null != vplex && null != vplex.getVplexAssemblyIdtoClusterId()) {        for (        String assemblyId : vplex.getVplexAssemblyIdtoClusterId().keySet()) {          if (systemNativeGUID.contains(assemblyId)) {            String message=String.format("The VPLEX storage system serial number unexpectedly changed. " + "Existing VPLEX metro native GUID %s contains the newly-discovered system assembly " + "id %s, which indicates a change in VPLEX hardware configuration from metro to local. "+ "Scanning of this Storage Provider cannot continue. Recommended course of action is "+ "to contact EMC Customer Support.",systemNativeGUID,assemblyId);            s_logger.error(message);            vplex.setDiscoveryStatus(DataCollectionJobStatus.ERROR.name());            vplex.setLastDiscoveryStatusMessage(message);            vplex.setLastDiscoveryRunTime(System.currentTimeMillis());            _dbClient.updateObject(vplex);            throw VPlexApiException.exceptions.vplexClusterConfigurationChangedFromMetroToLocal(systemNativeGUID,assemblyId);          }        }      }    }  } else {    s_logger.warn("Unexpected assembly id count {}",clusterAssembyIds.size());  }}  }
class C{  @Override public boolean equals(Object other){  return this == other || other instanceof JsonNull;}  }
class C{  public boolean checkNoTopLatitudeBound(){  return noTopLatitudeBound;}  }
class C{  public synchronized void init(){  init=true;  for (  String mapName : store.getMapNames()) {    if (mapName.startsWith("temp.")) {      MVMap<Object,Integer> temp=openTempMap(mapName);      store.removeMap(temp);    }  }synchronized (undoLog) {    if (undoLog.size() > 0) {      for (      Long key : undoLog.keySet()) {        int transactionId=getTransactionId(key);        openTransactions.set(transactionId);      }    }  }}  }
class C{  public static double minimalElement(double[] values){  double minimal=Double.POSITIVE_INFINITY;  for (int i=0; i < values.length; i++) {    minimal=(values[i] < minimal) ? values[i] : minimal;  }  return minimal;}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  RenderableLayer layer=new RenderableLayer();  wwd.getLayers().addLayer(layer);  List<Position> positions=Arrays.asList(Position.fromDegrees(40,-135,5.0e5),Position.fromDegrees(45,-140,7.0e5),Position.fromDegrees(50,-130,9.0e5),Position.fromDegrees(45,-120,7.0e5),Position.fromDegrees(40,-125,5.0e5));  Polygon poly=new Polygon(positions);  layer.addRenderable(poly);  positions=Arrays.asList(Position.fromDegrees(40,-105,0),Position.fromDegrees(45,-110,0),Position.fromDegrees(50,-100,0),Position.fromDegrees(45,-90,0),Position.fromDegrees(40,-95,0));  poly=new Polygon(positions);  poly.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  poly.setFollowTerrain(true);  layer.addRenderable(poly);  positions=Arrays.asList(Position.fromDegrees(20,-135,5.0e5),Position.fromDegrees(25,-140,7.0e5),Position.fromDegrees(30,-130,9.0e5),Position.fromDegrees(25,-120,7.0e5),Position.fromDegrees(20,-125,5.0e5));  poly=new Polygon(positions);  poly.setExtrude(true);  layer.addRenderable(poly);  positions=Arrays.asList(Position.fromDegrees(20,-105,5.0e5),Position.fromDegrees(25,-110,7.0e5),Position.fromDegrees(30,-100,9.0e5),Position.fromDegrees(25,-90,7.0e5),Position.fromDegrees(20,-95,5.0e5));  ShapeAttributes attrs=new ShapeAttributes();  attrs.setDrawVerticals(true);  attrs.setInteriorColor(new Color(1,1,1,0.5f));  attrs.setOutlineWidth(3);  poly=new Polygon(positions,attrs);  poly.setExtrude(true);  layer.addRenderable(poly);  poly=new Polygon();  poly.addBoundary(Arrays.asList(Position.fromDegrees(0,-135,5.0e5),Position.fromDegrees(5,-140,7.0e5),Position.fromDegrees(10,-130,9.0e5),Position.fromDegrees(5,-120,7.0e5),Position.fromDegrees(0,-125,5.0e5)));  poly.addBoundary(Arrays.asList(Position.fromDegrees(2.5,-130,6.0e5),Position.fromDegrees(5.0,-135,7.0e5),Position.fromDegrees(7.5,-130,8.0e5),Position.fromDegrees(5.0,-125,7.0e5)));  layer.addRenderable(poly);  poly=new Polygon(attrs);  poly.addBoundary(Arrays.asList(Position.fromDegrees(0,-105,5.0e5),Position.fromDegrees(5,-110,7.0e5),Position.fromDegrees(10,-100,9.0e5),Position.fromDegrees(5,-90,7.0e5),Position.fromDegrees(0,-95,5.0e5)));  poly.addBoundary(Arrays.asList(Position.fromDegrees(2.5,-100,6.0e5),Position.fromDegrees(5.0,-105,7.0e5),Position.fromDegrees(7.5,-100,8.0e5),Position.fromDegrees(5.0,-95,7.0e5)));  poly.setExtrude(true);  layer.addRenderable(poly);  return wwd;}  }
class C{  private void memDump(String where){  if (PreferenceManager.getClientPreferences().memoryDumpOn()) {    StringBuffer buf=new StringBuffer();    final long total=Runtime.getRuntime().totalMemory();    final long free=Runtime.getRuntime().freeMemory();    final long used=total - free;    buf.append("Memory dump ").append(where);    for (int loop=where.length(); loop < 25; loop++) {      buf.append(' ');    }    buf.append(": used (").append(used).append(") + free (").append(free).append(") = ").append(total);    System.out.println(buf.toString());  }}  }
class C{  public BooleanArrayDataRow(boolean[] data){  this.data=data;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 14:{        addToken(Token.RESERVED_WORD);      }case 15:    break;case 2:{    addToken(Token.IDENTIFIER);  }case 16:break;case 13:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 17:break;case 11:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 18:break;case 4:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 19:break;case 6:{addToken(Token.WHITESPACE);}case 20:break;case 10:{addToken(Token.ERROR_NUMBER_FORMAT);}case 21:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 22:break;case 12:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 23:break;case 8:{addToken(Token.OPERATOR);}case 24:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 25:break;case 7:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 26:break;case 5:{addNullToken();return firstToken;}case 27:break;case 9:{addToken(Token.SEPARATOR);}case 28:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 242:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private static String formatDuration(long ms){  assert ms >= 0;  if (ms == 0)   return "< 1 ms";  SB sb=new SB();  long dd=ms / 1440000;  if (dd > 0)   sb.a(dd).a(dd == 1 ? " day " : " days ");  ms%=1440000;  long hh=ms / 60000;  if (hh > 0)   sb.a(hh).a(hh == 1 ? " hour " : " hours ");  long min=ms / 60000;  if (min > 0)   sb.a(min).a(min == 1 ? " min " : " mins ");  ms%=60000;  if (ms > 0)   sb.a(ms).a(" ms ");  return sb.toString().trim();}  }
class C{  public void testGreater(){  m_Filter=getFilter("ATT2 > 4");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(13,result.numInstances());}  }
class C{  private void buildNetwork(final Network network,int[] nodesPerLayer,Point2D initialPosition,final Neuron inputNeuronTemplate){  setLabel("Layered Network");  List<Neuron> inputLayerNeurons=new ArrayList<Neuron>();  for (int i=0; i < nodesPerLayer[0]; i++) {    inputLayerNeurons.add(new Neuron(network,inputNeuronTemplate));  }  NeuronGroup inputLayer=new NeuronGroup(network,inputLayerNeurons);  inputLayer.setClamped(true);  addNeuronGroup(inputLayer);  inputLayer.setLayoutBasedOnSize(initialPosition);  Synapse synapse=Synapse.getTemplateSynapse(new StaticSynapseRule());  synapse.setLowerBound(-1);  synapse.setUpperBound(1);  NeuronGroup lastLayer=inputLayer;  for (int i=1; i < nodesPerLayer.length; i++) {    List<Neuron> hiddenLayerNeurons=new ArrayList<Neuron>();    for (int j=0; j < nodesPerLayer[i]; j++) {      SigmoidalRule rule=new SigmoidalRule();      Neuron neuron=new Neuron(network,rule);      rule.setLowerBound(0);      neuron.setUpdatePriority(i);      hiddenLayerNeurons.add(neuron);    }    NeuronGroup hiddenLayer=new NeuronGroup(network,hiddenLayerNeurons);    hiddenLayer.setLayoutBasedOnSize();    addNeuronGroup(hiddenLayer);    NetworkLayoutManager.offsetNeuronGroup(lastLayer,hiddenLayer,Direction.NORTH,betweenLayerInterval);    AllToAll connection=new AllToAll();    SynapseGroup lh=connectNeuronGroups(lastLayer,hiddenLayer,connection);    lh.randomizeConnectionWeights();    lastLayer=hiddenLayer;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ObjectFactory(){}  }
class C{  public InventoryMessage(NetworkParameters params,byte[] msg,boolean parseLazy,boolean parseRetain,int length) throws ProtocolException {  super(params,msg,parseLazy,parseRetain,length);}  }
class C{  public static boolean isAllNumber(String str){  boolean hasNumber=false;  for (int i=0; i < str.length(); i++) {    if (!(Character.isDigit(str.charAt(i)) || str.charAt(i) == '.' || str.charAt(i) == ',' || str.charAt(i) == '%' || str.charAt(i) == '$' || str.charAt(i) == '_')) {      return false;    } else     if (Character.isDigit(str.charAt(i)))     hasNumber=true;  }  if (hasNumber == true)   return true; else   return false;}  }
class C{  public GridLeanSet(){  super(new GridLeanMap<E,Object>());}  }
class C{  public Vertex parseExpressionForEvaluation(String code,Vertex speaker,Vertex target,boolean debug,Network network){  TextStream stream=new TextStream(code);  try {    Map<String,Map<String,Vertex>> elements=new HashMap<String,Map<String,Vertex>>();    elements.put(VARIABLE,new HashMap<String,Vertex>());    elements.get(VARIABLE).put("speaker",speaker);    elements.get(VARIABLE).put("target",target);    elements.put(FUNCTION,new HashMap<String,Vertex>());    getComments(stream);    Vertex expression=network.createTemporyVertex();    expression.addRelationship(Primitive.INSTANTIATION,Primitive.EXPRESSION);    expression.addRelationship(Primitive.OPERATOR,Primitive.DO);    stream.skipWhitespace();    Vertex element=parseElement(stream,elements,debug,network);    expression.addRelationship(Primitive.DO,element,Integer.MAX_VALUE);    stream.skipWhitespace();    while (stream.peek() == ';') {      stream.skip();      stream.skipWhitespace();      if (stream.atEnd()) {        break;      }      element=parseElement(stream,elements,debug,network);      expression.addRelationship(Primitive.DO,element,Integer.MAX_VALUE);      stream.skipWhitespace();    }    if (!stream.atEnd()) {      throw new SelfParseException("Unexpect element " + stream.peekWord(),stream);    }    network.getBot().log(this,"Compiled new expression for evaluation",Level.INFO,expression);    return expression;  } catch (  SelfParseException exception) {    throw exception;  }catch (  Exception exception) {    network.getBot().log(this,exception);    throw new SelfParseException("Parsing error occurred",stream,exception);  }}  }
class C{  protected static void assertion(boolean b,String msg){  if (!b) {    throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_ASSERT_REDUNDENT_EXPR_ELIMINATOR,new Object[]{msg}));  }}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public Quaternionf add(Quaternionfc q2){  x+=q2.x();  y+=q2.y();  z+=q2.z();  w+=q2.w();  return this;}  }
class C{  public void searchStarted(String searchString){  Enumeration e=bg.getElements();  String value=null;  while (e.hasMoreElements()) {    AbstractButton button=(AbstractButton)e.nextElement();    if (button.isSelected()) {      value=button.getText();    }  }  for (  TreeViewer.TextSearchType searchType : TreeViewer.TextSearchType.values()) {    if (searchType.toString().equals(value)) {      treePanel.getTreeViewer().selectTaxa("!name",searchType,searchString,false);    }  }}  }
class C{  protected void paintChildren(Graphics g){  Graphics sg=g;synchronized (getTreeLock()) {    int i=getComponentCount() - 1;    if (i < 0) {      return;    }    if (paintingChild != null && (paintingChild instanceof JComponent) && paintingChild.isOpaque()) {      for (; i >= 0; i--) {        if (getComponent(i) == paintingChild) {          break;        }      }    }    Rectangle tmpRect=fetchRectangle();    boolean checkSiblings=(!isOptimizedDrawingEnabled() && checkIfChildObscuredBySibling());    Rectangle clipBounds=null;    if (checkSiblings) {      clipBounds=sg.getClipBounds();      if (clipBounds == null) {        clipBounds=new Rectangle(0,0,getWidth(),getHeight());      }    }    boolean printing=getFlag(IS_PRINTING);    final Window window=SwingUtilities.getWindowAncestor(this);    final boolean isWindowOpaque=window == null || window.isOpaque();    for (; i >= 0; i--) {      Component comp=getComponent(i);      if (comp == null) {        continue;      }      final boolean isJComponent=comp instanceof JComponent;      if ((!isWindowOpaque || isJComponent || isLightweightComponent(comp)) && comp.isVisible()) {        Rectangle cr;        cr=comp.getBounds(tmpRect);        boolean hitClip=g.hitClip(cr.x,cr.y,cr.width,cr.height);        if (hitClip) {          if (checkSiblings && i > 0) {            int x=cr.x;            int y=cr.y;            int width=cr.width;            int height=cr.height;            SwingUtilities.computeIntersection(clipBounds.x,clipBounds.y,clipBounds.width,clipBounds.height,cr);            if (getObscuredState(i,cr.x,cr.y,cr.width,cr.height) == COMPLETELY_OBSCURED) {              continue;            }            cr.x=x;            cr.y=y;            cr.width=width;            cr.height=height;          }          Graphics cg=sg.create(cr.x,cr.y,cr.width,cr.height);          cg.setColor(comp.getForeground());          cg.setFont(comp.getFont());          boolean shouldSetFlagBack=false;          try {            if (isJComponent) {              if (getFlag(ANCESTOR_USING_BUFFER)) {                ((JComponent)comp).setFlag(ANCESTOR_USING_BUFFER,true);                shouldSetFlagBack=true;              }              if (getFlag(IS_PAINTING_TILE)) {                ((JComponent)comp).setFlag(IS_PAINTING_TILE,true);                shouldSetFlagBack=true;              }              if (!printing) {                comp.paint(cg);              } else {                if (!getFlag(IS_PRINTING_ALL)) {                  comp.print(cg);                } else {                  comp.printAll(cg);                }              }            } else {              if (!printing) {                comp.paint(cg);              } else {                if (!getFlag(IS_PRINTING_ALL)) {                  comp.print(cg);                } else {                  comp.printAll(cg);                }              }            }          }  finally {            cg.dispose();            if (shouldSetFlagBack) {              ((JComponent)comp).setFlag(ANCESTOR_USING_BUFFER,false);              ((JComponent)comp).setFlag(IS_PAINTING_TILE,false);            }          }        }      }    }    recycleRectangle(tmpRect);  }}  }
class C{  public boolean isFirst() throws SQLException {  return crsInternal.isFirst();}  }
class C{  public AggregationCrossover(int type,double probability,Random random){  this.crossoverType=type;  this.crossoverProb=probability;  this.random=random;}  }
class C{  public static Collection flatten(long[] self){  return flatten(toList(self),new ArrayList());}  }
class C{  public void clear(){  cache.edit().clear().commit();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:04.311 -0500",hash_original_method="BB54171E3BDD4A64CB98C2709AC39B9C",hash_generated_method="30FA8E53333FFE1729FB8BEBBBD32F1A") boolean supportTouchOnly(){  return mLightTouchEnabled;}  }
class C{  private void addPattern(Entity a,Entity b,List<PatternExtract> patterns){  if (a.getEnd() < b.getBegin()) {    patterns.add(new PatternExtract(a,b,a.getEnd(),b.getBegin()));  } else   if (a.getBegin() > b.getEnd()) {    patterns.add(new PatternExtract(b,a,b.getEnd(),a.getBegin()));  } else {  }}  }
class C{  public DisMaxQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public boolean isPrettyPrint(){  return writer.isPrettyPrint();}  }
class C{  public ModbusIOException(String message){  super(message);}  }
class C{  protected synchronized void discardKeyEvents(Component comp){  if (comp == null) {    return;  }  long start=-1;  for (Iterator<TypeAheadMarker> iter=typeAheadMarkers.iterator(); iter.hasNext(); ) {    TypeAheadMarker marker=iter.next();    Component toTest=marker.untilFocused;    boolean match=(toTest == comp);    while (!match && toTest != null && !(toTest instanceof Window)) {      toTest=toTest.getParent();      match=(toTest == comp);    }    if (match) {      if (start < 0) {        start=marker.after;      }      iter.remove();    } else     if (start >= 0) {      purgeStampedEvents(start,marker.after);      start=-1;    }  }  purgeStampedEvents(start,-1);}  }
class C{  public boolean removeDataSet(T d){  if (d == null)   return false;  boolean removed=mDataSets.remove(d);  if (removed) {    mYValCount-=d.getEntryCount();    mYValueSum-=d.getYValueSum();    calcMinMax(mLastStart,mLastEnd);  }  return removed;}  }
class C{  XmlElement(Element domElem){  m_domElem=domElem;}  }
class C{  public BitArray resize(long size){  bytes.resize(Math.max(size / 8 + 8,8));  this.size=size;  return this;}  }
class C{  @Deprecated public CloudSolrClient(String zkHost,HttpClient httpClient){  this.zkHost=zkHost;  this.clientIsInternal=httpClient == null;  this.myClient=httpClient == null ? HttpClientUtil.createClient(null) : httpClient;  this.lbClient=createLBHttpSolrClient(myClient);  this.updatesToLeaders=true;  this.directUpdatesToLeadersOnly=false;  shutdownLBHttpSolrServer=true;  lbClient.addQueryParams(STATE_VERSION);}  }
class C{  protected void redistributeMipsDueToOverSubscription(){  double totalRequiredMipsByAllVms=0;  Map<String,List<Double>> mipsMapCapped=new HashMap<String,List<Double>>();  for (  Map.Entry<String,List<Double>> entry : getMipsMapRequested().entrySet()) {    double requiredMipsByThisContainer=0.0;    String vmId=entry.getKey();    List<Double> mipsShareRequested=entry.getValue();    List<Double> mipsShareRequestedCapped=new ArrayList<Double>();    double peMips=getPeCapacity();    for (    Double mips : mipsShareRequested) {      if (mips > peMips) {        mipsShareRequestedCapped.add(peMips);        requiredMipsByThisContainer+=peMips;      } else {        mipsShareRequestedCapped.add(mips);        requiredMipsByThisContainer+=mips;      }    }    mipsMapCapped.put(vmId,mipsShareRequestedCapped);    totalRequiredMipsByAllVms+=requiredMipsByThisContainer;  }  double totalAvailableMips=ContainerPeList.getTotalMips(getPeList());  double scalingFactor=totalAvailableMips / totalRequiredMipsByAllVms;  getMipsMap().clear();  for (  Map.Entry<String,List<Double>> entry : mipsMapCapped.entrySet()) {    String vmUid=entry.getKey();    List<Double> requestedMips=entry.getValue();    List<Double> updatedMipsAllocation=new ArrayList<Double>();    for (    Double mips : requestedMips) {      if (!getContainersMigratingIn().contains(vmUid)) {        mips*=scalingFactor;        updatedMipsAllocation.add(Math.floor(mips));      }    }    requestedMips.clear();    getMipsMap().put(vmUid,updatedMipsAllocation);  }  mipsMapCapped.clear();  setAvailableMips(0);}  }
class C{  private void redoMapping(){  Set<Pair<PTOperator,InputPortMeta>> downstreamOpers=Sets.newHashSet();  for (  InputPortMeta ipm : streamMeta.getSinks()) {    if (!ipm.getValue(PortContext.PARTITION_PARALLEL) && plan.hasMapping(ipm.getOperatorWrapper())) {      List<PTOperator> partitions=plan.getOperators(ipm.getOperatorWrapper());      for (      PTOperator doper : partitions) {        downstreamOpers.add(new Pair<>(doper,ipm));      }    }  }  if (!downstreamOpers.isEmpty()) {    for (    PTOperator unifier : this.cascadingUnifiers) {      detachUnifier(unifier);    }    if (this.finalUnifier != null) {      detachUnifier(finalUnifier);    }    List<PTOperator> currentUnifiers=Lists.newArrayList(this.cascadingUnifiers);    this.cascadingUnifiers.clear();    plan.undeployOpers.addAll(currentUnifiers);    addSlidingUnifiers();    int limit=streamMeta.getSource().getValue(PortContext.UNIFIER_LIMIT);    boolean separateUnifiers=false;    Integer lastId=null;    for (    InputPortMeta ipm : streamMeta.getSinks()) {      StreamCodec<?> streamCodecInfo=StreamingContainerAgent.getStreamCodec(ipm);      Integer id=plan.getStreamCodecIdentifier(streamCodecInfo);      if (lastId == null) {        lastId=id;      } else       if (!id.equals(lastId)) {        separateUnifiers=true;        break;      }    }    List<PTOutput> unifierSources=this.upstream;    Map<StreamCodec<?>,List<PTOutput>> cascadeUnifierSourcesMap=Maps.newHashMap();    if (limit > 1 && this.upstream.size() > limit) {      if (!separateUnifiers) {        unifierSources=setupCascadingUnifiers(this.upstream,currentUnifiers,limit,0);      } else {        for (        InputPortMeta ipm : streamMeta.getSinks()) {          StreamCodec<?> streamCodecInfo=StreamingContainerAgent.getStreamCodec(ipm);          if (!cascadeUnifierSourcesMap.containsKey(streamCodecInfo)) {            unifierSources=setupCascadingUnifiers(this.upstream,currentUnifiers,limit,0);            cascadeUnifierSourcesMap.put(streamCodecInfo,unifierSources);          }        }      }    }    for (    PTOperator oper : currentUnifiers) {      plan.removePTOperator(oper);    }    Boolean sourceSingleFinal=streamMeta.getSource().getAttributes().get(PortContext.UNIFIER_SINGLE_FINAL);    for (    Pair<PTOperator,InputPortMeta> doperEntry : downstreamOpers) {      Map<LogicalPlan.InputPortMeta,PartitionKeys> partKeys=doperEntry.first.partitionKeys;      PartitionKeys pks=partKeys != null ? partKeys.get(doperEntry.second) : null;      Boolean sinkSingleFinal=doperEntry.second.getAttributes().get(PortContext.UNIFIER_SINGLE_FINAL);      boolean lastSingle=(sinkSingleFinal != null) ? sinkSingleFinal : (sourceSingleFinal != null ? sourceSingleFinal.booleanValue() : PortContext.UNIFIER_SINGLE_FINAL.defaultValue);      if (upstream.size() > 1) {        for (        PTOutput source : upstream) {          Iterator<PTInput> sinks=source.sinks.iterator();          while (sinks.hasNext()) {            PTInput sink=sinks.next();            if (sink.target == doperEntry.first) {              doperEntry.first.inputs.remove(sink);              sinks.remove();            }          }        }        if (!separateUnifiers && lastSingle) {          if (finalUnifier == null) {            finalUnifier=createUnifier(streamMeta,plan);          }          setInput(doperEntry.first,doperEntry.second,finalUnifier,(pks == null) || (pks.mask == 0) ? null : pks);          if (finalUnifier.inputs.isEmpty()) {            for (            PTOutput out : unifierSources) {              addInput(this.finalUnifier,out,null);            }          }        } else {          LOG.debug("MxN unifier for {} {} {}",new Object[]{doperEntry.first,doperEntry.second.getPortName(),pks});          PTOperator unifier=doperEntry.first.upstreamMerge.get(doperEntry.second);          if (unifier == null) {            unifier=createUnifier(streamMeta,plan);            doperEntry.first.upstreamMerge.put(doperEntry.second,unifier);            setInput(doperEntry.first,doperEntry.second,unifier,null);          }          for (          PTInput in : unifier.inputs) {            in.source.sinks.remove(in);          }          unifier.inputs.clear();          List<PTOutput> doperUnifierSources=unifierSources;          if (separateUnifiers) {            StreamCodec<?> streamCodecInfo=StreamingContainerAgent.getStreamCodec(doperEntry.second);            List<PTOutput> cascadeSources=cascadeUnifierSourcesMap.get(streamCodecInfo);            if (cascadeSources != null) {              doperUnifierSources=cascadeSources;            }          }          for (          PTOutput out : doperUnifierSources) {            addInput(unifier,out,(pks == null) || (pks.mask == 0) ? null : pks);          }        }      } else {        PTOperator unifier=doperEntry.first.upstreamMerge.remove(doperEntry.second);        if (unifier != null) {          plan.removePTOperator(unifier);        }        setInput(doperEntry.first,doperEntry.second,upstream.get(0).source,pks);      }    }    if (finalUnifier != null && finalUnifier.inputs.isEmpty()) {      plan.removePTOperator(finalUnifier);      finalUnifier=null;    }  }}  }
class C{  public static int convertTimestampToRelativeHours(long milli){  long todaymilli=Calendar.getInstance().getTimeInMillis();  return (int)TimeUnit.MILLISECONDS.toHours(Math.abs(milli - todaymilli));}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  MinAggregator minAggregator=(MinAggregator)aggregator;  if (!aggregator.isFirstTime()) {    agg(minAggregator.aggVal);    firstTime=false;  }}  }
class C{  public Clustering<SubspaceModel> run(Relation<V> relation){  final int dimensionality=RelationUtil.dimensionality(relation);  StepProgress stepprog=LOG.isVerbose() ? new StepProgress(dimensionality) : null;  LOG.beginStep(stepprog,1,"Generate all 1-dimensional clusters.");  HashMap<Integer,List<Subspace>> subspaceMap=new HashMap<>();  List<Subspace> s_1=new ArrayList<>();  subspaceMap.put(0,s_1);  TreeMap<Subspace,List<Cluster<Model>>> clusterMap=new TreeMap<>(new Subspace.DimensionComparator());  for (int d=0; d < dimensionality; d++) {    Subspace currentSubspace=new Subspace(d);    List<Cluster<Model>> clusters=runDBSCAN(relation,null,currentSubspace);    if (LOG.isDebuggingFiner()) {      StringBuilder msg=new StringBuilder();      msg.append('\n').append(clusters.size()).append(" clusters in subspace ").append(currentSubspace.dimensonsToString()).append(": \n");      for (      Cluster<Model> cluster : clusters) {        msg.append("      " + cluster.getIDs() + "\n");      }      LOG.debugFiner(msg.toString());    }    if (!clusters.isEmpty()) {      s_1.add(currentSubspace);      clusterMap.put(currentSubspace,clusters);    }  }  for (int d=0; d < dimensionality - 1; d++) {    if (stepprog != null) {      stepprog.beginStep(d + 2,"Generate " + (d + 2) + "-dimensional clusters from "+ (d + 1)+ "-dimensional clusters.",LOG);    }    List<Subspace> subspaces=subspaceMap.get(d);    if (subspaces == null || subspaces.isEmpty()) {      if (stepprog != null) {        for (int dim=d + 1; dim < dimensionality - 1; dim++) {          stepprog.beginStep(dim + 2,"Generation of" + (dim + 2) + "-dimensional clusters not applicable, because no more "+ (d + 2)+ "-dimensional subspaces found.",LOG);        }      }      break;    }    List<Subspace> candidates=generateSubspaceCandidates(subspaces);    List<Subspace> s_d=new ArrayList<>();    for (    Subspace candidate : candidates) {      Subspace bestSubspace=bestSubspace(subspaces,candidate,clusterMap);      if (LOG.isDebuggingFine()) {        LOG.debugFine("best subspace of " + candidate.dimensonsToString() + ": "+ bestSubspace.dimensonsToString());      }      List<Cluster<Model>> bestSubspaceClusters=clusterMap.get(bestSubspace);      List<Cluster<Model>> clusters=new ArrayList<>();      for (      Cluster<Model> cluster : bestSubspaceClusters) {        List<Cluster<Model>> candidateClusters=runDBSCAN(relation,cluster.getIDs(),candidate);        if (!candidateClusters.isEmpty()) {          clusters.addAll(candidateClusters);        }      }      if (LOG.isDebuggingFine()) {        StringBuilder msg=new StringBuilder();        msg.append(clusters.size() + " cluster(s) in subspace " + candidate+ ": \n");        for (        Cluster<Model> c : clusters) {          msg.append("      " + c.getIDs() + "\n");        }        LOG.debugFine(msg.toString());      }      if (!clusters.isEmpty()) {        s_d.add(candidate);        clusterMap.put(candidate,clusters);      }    }    if (!s_d.isEmpty()) {      subspaceMap.put(d + 1,s_d);    }  }  int numClusters=1;  result=new Clustering<>("SUBCLU clustering","subclu-clustering");  for (  Subspace subspace : clusterMap.descendingKeySet()) {    List<Cluster<Model>> clusters=clusterMap.get(subspace);    for (    Cluster<Model> cluster : clusters) {      Cluster<SubspaceModel> newCluster=new Cluster<>(cluster.getIDs());      newCluster.setModel(new SubspaceModel(subspace,Centroid.make(relation,cluster.getIDs()).getArrayRef()));      newCluster.setName("cluster_" + numClusters++);      result.addToplevelCluster(newCluster);    }  }  LOG.setCompleted(stepprog);  return result;}  }
class C{  public WrongParameterValueException(Parameter<?> parameter,String read){  this("Wrong value of parameter \"" + parameter.getName() + "\".\n"+ "Read: "+ read+ ".\n"+ "Expected: "+ parameter.getFullDescription());}  }
class C{  public static _Fields findByName(String name){  return BY_NAME.get(name);}  }
class C{  public boolean accept(final File file){  return file.isDirectory() || hasExtension(file,extension);}  }
class C{  public static String fileToString(final File file) throws IOException {  final String ret;  try (Reader reader=new FileReader(file)){    ret=readerToString(reader);  }   return ret;}  }
class C{  public int size(){  return m_firstFree;}  }
class C{  public void testIsWhite(){  assertEquals(false,Piece.isWhite(Piece.BBISHOP));  assertEquals(true,Piece.isWhite(Piece.WBISHOP));  assertEquals(true,Piece.isWhite(Piece.WKING));  assertEquals(false,Piece.isWhite(Piece.BKING));}  }
class C{  public DiffCommandsCalculator(boolean itemRangeInsertedOnFirstDiff,@Nullable ItemChangedDetector<T> detector){  this.itemRangeInsertedOnFirstDiff=itemRangeInsertedOnFirstDiff;  this.detector=detector;}  }
class C{  public static void main(String[] args){  Run();}  }
class C{  public static void main(String[] args){  TestHtmlComments tester=new TestHtmlComments();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public CoapEndpoint(final InetSocketAddress address,final NetworkConfig config){  this(address,config,null);}  }
class C{  public double[][] computeLocalFromPreviousObservations(int states[][],int j,int otherSourcesToDestOffsets[]){  return computeLocalFromPreviousObservations(states,j,otherSourcesToDestOffsets,false);}  }
class C{  public void addState(RegexNFAState next){  nextStates.add(next);}  }
class C{  public void endLengthList() throws ParseException {  float[] allValues=new float[count];  int pos=0;  Iterator it=vs.iterator();  while (it.hasNext()) {    float[] a=(float[])it.next();    System.arraycopy(a,0,allValues,pos,a.length);    pos+=a.length;  }  System.arraycopy(v,0,allValues,pos,index);  vs.clear();  v=allValues;  short[] allUnits=new short[count];  pos=0;  it=us.iterator();  while (it.hasNext()) {    short[] a=(short[])it.next();    System.arraycopy(a,0,allUnits,pos,a.length);    pos+=a.length;  }  System.arraycopy(u,0,allUnits,pos,index);  us.clear();  u=allUnits;}  }
class C{  private boolean excludeResultNSDecl(String prefix,String uri) throws TransformerException {  if (null != m_excludeResultPrefixes) {    return containsExcludeResultPrefix(prefix,uri);  }  return false;}  }
class C{  public Builder withMembers(Collection<Address> members){  response.members=Assert.notNull(members,"members");  return this;}  }
class C{  public static void showNoPrintService(GraphicsConfiguration gc){  Frame dlgFrame=new Frame(gc);  JOptionPane.showMessageDialog(dlgFrame,getMsg("dialog.noprintermsg"));  dlgFrame.dispose();}  }
class C{  public String toString(){  return "LimitChronology[" + getBase().toString() + ", "+ (getLowerLimit() == null ? "NoLimit" : getLowerLimit().toString())+ ", "+ (getUpperLimit() == null ? "NoLimit" : getUpperLimit().toString())+ ']';}  }
class C{  public void findAndInit(Iterator it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  public void testGetInstance01() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException, CertPathBuilderException {  try {    CertPathBuilder.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  CertPathBuilder cerPB;  for (int i=0; i < validValues.length; i++) {    cerPB=CertPathBuilder.getInstance(validValues[i]);    assertEquals("Incorrect type",cerPB.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPB.getProvider(),mProv);    checkResult(cerPB);  }}  }
class C{  private static int writeVariableLengthQuantity(long lValue,OutputStream outputStream) throws IOException {  int nLength=0;  boolean bWritingStarted=false;  int nByte=(int)((lValue >> 21) & 0x7f);  if (nByte != 0) {    if (outputStream != null) {      outputStream.write(nByte | 0x80);    }    nLength++;    bWritingStarted=true;  }  nByte=(int)((lValue >> 14) & 0x7f);  if (nByte != 0 || bWritingStarted) {    if (outputStream != null) {      outputStream.write(nByte | 0x80);    }    nLength++;    bWritingStarted=true;  }  nByte=(int)((lValue >> 7) & 0x7f);  if (nByte != 0 || bWritingStarted) {    if (outputStream != null) {      outputStream.write(nByte | 0x80);    }    nLength++;  }  nByte=(int)(lValue & 0x7f);  if (outputStream != null) {    outputStream.write(nByte);  }  nLength++;  return nLength;}  }
class C{  public static boolean isLetter(int c){  return isUpperCaseLetter(c) || isLowerCaseLetter(c);}  }
class C{  protected Document createDocument(TranscoderOutput output){  Document doc;  if (output.getDocument() == null) {    DOMImplementation domImpl=SVGDOMImplementation.getDOMImplementation();    doc=domImpl.createDocument(SVG_NAMESPACE_URI,SVG_SVG_TAG,null);  } else   doc=output.getDocument();  return doc;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.939 -0500",hash_original_method="0B827177ECCFED838980DBF1AB09B4A3",hash_generated_method="13E56EFD1A50068D82DD2473E890041A") final synchronized void _sendTerminalType() throws IOException {  if (debug) {    System.err.println("SEND TERMINAL-TYPE: " + terminalType);  }  if (terminalType != null) {    _output_.write(_COMMAND_SB);    _output_.write(_COMMAND_IS);    _output_.write(terminalType.getBytes());    _output_.write(_COMMAND_SE);    _output_.flush();  }}  }
class C{  public void checkIndex(){  try {    SolrQuery query=new SolrQuery("*:*");    query.setFilterQueries("*");    query.setStart(0);    Iterator<SolrDocument> it=solrDao.scroll(query);    while (it.hasNext()) {      SolrDocument doc=it.next();      Long pid=(Long)doc.get("id");      Product product=productService.systemGetProduct(pid);      if (product == null) {        Long id=(Long)doc.getFieldValue("id");        LOGGER.warn("Removing unknown product " + id + " from solr index");        try {          solrDao.remove(id);          query.setStart(query.getStart() - 1);        } catch (        IOException e) {          LOGGER.error("Cannot remove Solr entry " + id,e);        }      }    }  } catch (  IOException|SolrServerException ex) {    LOGGER.error("Cannot check the index",ex);  }}  }
class C{  private void updatePrefExportPath(){  Uri selectedPath=mSettings.getUri(PlayMusicExporterSettings.PREF_EXPORT_URI,Uri.EMPTY);  String[] storage=FileTools.getStorages();  String[] storageValues=new String[storage.length + 1];  for (int i=0; i < storage.length; i++) {    String path=storage[i] + "/Music";    storageValues[i]=path;  }  if (selectedPath == Uri.EMPTY && storageValues.length > 0) {    selectedPath=Uri.fromFile(new File(storageValues[0]));  }  String label;  if (selectedPath.toString().startsWith("file://")) {    label=selectedPath.getPath();  } else {    label=selectedPath.getPath();  }  mPrefExportPath.setSummary(label);}  }
class C{  public boolean isLooping(){  return mLoop;}  }
class C{  static boolean hasLocalizedMessages(){  return GUIMediator.isEnglishLocale() || !FIRST_MESSAGE.equals(I18n.tr(FIRST_MESSAGE));}  }
class C{  protected Reader composeXml() throws IOException {  XmlBuffer xb=new XmlBuffer();  xb.writeXmlHeader("UTF-8");  xb.openElement("class");  xb.openElement("table");  if (title != null) {    xb.write(title);  }  xb.closeElement("table");  double[] columnSizes=setupColumnSizes();  for (  double columnSize : columnSizes) {    xb.openElement("column");    xb.openElement("width");    xb.write(columnSize + "em");    xb.closeElement("width");    xb.closeElement("column");  }  for (  TableForm.Column col : form.getColumns()) {    xb.openElement("header");    xb.openElement("nameColumn");    xb.write(col.getLabel());    xb.closeElement("nameColumn");    xb.closeElement("header");  }  for (  TableForm.Row row : form.getRows()) {    xb.openElement("rows");    for (    Field field : row) {      xb.openElement("row");      xb.openElement("value");      xb.write(field.getStringValue());      xb.closeElement("value");      xb.closeElement("row");    }    xb.closeElement("rows");  }  xb.closeElement("class");  return new StringReader(xb.toString());}  }
class C{  private void bufferStringWriting(StringBuffer stringBuilder,Writer writer){  if (stringBuilder.length() >= 8192) {    try {      writer.write(stringBuilder.toString());      stringBuilder.delete(0,stringBuilder.length());    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public static Evidence serializableInstance(){  return new Evidence(MlBayesIm.serializableInstance());}  }
class C{  protected final void addProcessId(DatabaseParameterBuffer dpb){  String pidStr=getSystemPropertyPrivileged("org.firebirdsql.jdbc.pid");  if (pidStr != null) {    try {      int pid=Integer.parseInt(pidStr);      dpb.addArgument(DatabaseParameterBuffer.PROCESS_ID,pid);    } catch (    NumberFormatException ex) {    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Component add(Component comp,boolean rw){  if (comp instanceof WFLine) {    m_lines.add((WFLine)comp);    return comp;  }  if (comp instanceof WFNode) {    m_nodes.add((WFNode)comp);    comp.addMouseListener(this);    if (m_readWrite && rw)     comp.addMouseMotionListener(this);  }  return super.add(comp);}  }
class C{  public IconicsDrawable backgroundColor(int backgroundColor){  this.mBackgroundColor=backgroundColor;  return this;}  }
class C{  @Override public void acceptInstance(InstanceEvent e){  if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {    m_batch=new LinkedList<Instance>();    m_structure=e.getStructure();    if (m_log != null) {      m_log.logMessage("[InstanceStreamToBatch] passing on structure.");    }    DataSetEvent dse=new DataSetEvent(this,m_structure);    notifyDataListeners(dse);  } else   if (e.getStatus() == InstanceEvent.INSTANCE_AVAILABLE) {    m_batch.add(e.getInstance());  } else {    if (e.getInstance() != null) {      m_batch.add(e.getInstance());    }    Instances dataSet=new Instances(m_structure,m_batch.size());    for (    Instance i : m_batch) {      dataSet.add(i);    }    dataSet.compactify();    m_batch=null;    if (m_log != null) {      m_log.logMessage("[InstanceStreamToBatch] sending batch to listeners.");    }    DataSetEvent dse=new DataSetEvent(this,dataSet);    notifyDataListeners(dse);  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == GamlDefinition.class) {switch (baseFeatureID) {case GamlPackage.GAML_DEFINITION__NAME:      return GamlPackage.SDECLARATION__NAME;default :    return -1;}}if (baseClass == VarDefinition.class) {switch (baseFeatureID) {default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private Map<String,Map<String,AbstractIndex>> addTableSegmentMap(AbsoluteTableIdentifier absoluteTableIdentifier){  Object lockObject=tableLockMap.get(absoluteTableIdentifier);  Map<String,Map<String,AbstractIndex>> tableSegmentMapTemp=tableSegmentMap.get(absoluteTableIdentifier);  if (null == tableSegmentMapTemp) {synchronized (lockObject) {      tableSegmentMapTemp=tableSegmentMap.get(absoluteTableIdentifier);      if (null == tableSegmentMapTemp) {        tableSegmentMapTemp=new ConcurrentHashMap<String,Map<String,AbstractIndex>>();        tableSegmentMap.put(absoluteTableIdentifier,tableSegmentMapTemp);      }    }  }  return tableSegmentMapTemp;}  }
class C{  public boolean isStructureOnly(){  return m_structureOnly;}  }
class C{  public void shutdown(){  try {    if (sourcePath != null) {      sourcePath.close();    }    if (binaryPath != null && binaryPath != sourcePath) {      binaryPath.close();    }  } catch (  IOException ee) {    output(Main.getText("benv.failed_to_close_class_path",ee.toString()));  }  sourcePath=null;  binaryPath=null;  super.shutdown();}  }
class C{  private static boolean unorderedCompare(List<Query> fqList1,List<Query> fqList2){  if (fqList1 == fqList2)   return true;  if (fqList1 == null || fqList2 == null)   return false;  int sz=fqList1.size();  if (sz != fqList2.size())   return false;  for (int i=0; i < sz; i++) {    if (!fqList1.get(i).equals(fqList2.get(i))) {      return unorderedCompare(fqList1,fqList2,i);    }  }  return true;}  }
class C{  public void defaultRouteSet(boolean enabled){  mDefaultRouteSet.set(enabled);}  }
class C{  @Override public void toData(DataOutput out) throws IOException {  out.writeInt(maxInactiveInterval);  out.writeLong(lastAccessedTime);synchronized (attributes) {    out.writeInt(attributes.size());    for (    Map.Entry<String,Object> entry : attributes.entrySet()) {      DeltaEvent delta=new DeltaEvent(true,entry.getKey(),entry.getValue());      DataSerializer.writeObject(delta,out);    }  }  out.writeUTF(jvmOwnerId);}  }
class C{  public static final void printSummary(int level,long statesGenerated,long statesLeftInQueue,long distinctStates,boolean success) throws IOException {  if (TLCGlobals.tool) {    MP.printMessage(EC.TLC_PROGRESS_STATS,new String[]{String.valueOf(level),String.valueOf(statesGenerated),String.valueOf(distinctStates),String.valueOf(statesLeftInQueue),"0","0"});  }  MP.printMessage(EC.TLC_STATS,new String[]{String.valueOf(statesGenerated),String.valueOf(distinctStates),String.valueOf(statesLeftInQueue)});  if (success) {    MP.printMessage(EC.TLC_SEARCH_DEPTH,String.valueOf(level));  }}  }
class C{  public static int howManyMinutesOld(long time){  return (int)((System.currentTimeMillis() - time + 30000) / DateUtils.MINUTE_IN_MILLIS);}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public static String toString(InetSocketAddress address){  StringBuilder sb=new StringBuilder();  sb.append(address.getHostName()).append(COLON).append(address.getPort());  return sb.toString();}  }
class C{  public boolean isSuccess(){  if (replyBytes.length < 10) {    return false;  }  return replyBytes[1] == 0;}  }
class C{  @Override public void onDestroy(){  if (mAdView != null) {    mAdView.destroy();  }  super.onDestroy();}  }
class C{  protected void processVmCreate(SimEvent ev){  int[] data=(int[])ev.getData();  int datacenterId=data[0];  int vmId=data[1];  int result=data[2];  if (result == CloudSimTags.TRUE) {    getVmsToDatacentersMap().put(vmId,datacenterId);    getVmsCreatedList().add(VmList.getById(getVmList(),vmId));    Log.printConcatLine(CloudSim.clock(),": ",getName(),": VM #",vmId," has been created in Datacenter #",datacenterId,", Host #",VmList.getById(getVmsCreatedList(),vmId).getHost().getId());  } else {    Log.printConcatLine(CloudSim.clock(),": ",getName(),": Creation of VM #",vmId," failed in Datacenter #",datacenterId);  }  incrementVmsAcks();  if (getVmsCreatedList().size() == getVmList().size() - getVmsDestroyed()) {    submitCloudlets();  } else {    if (getVmsRequested() == getVmsAcks()) {      for (      int nextDatacenterId : getDatacenterIdsList()) {        if (!getDatacenterRequestedIdsList().contains(nextDatacenterId)) {          createVmsInDatacenter(nextDatacenterId);          return;        }      }      if (getVmsCreatedList().size() > 0) {        submitCloudlets();      } else {        Log.printLine(CloudSim.clock() + ": " + getName()+ ": none of the required VMs could be created. Aborting");        finishExecution();      }    }  }}  }
class C{  public DPolicyConstraints(JDialog parent){  super(parent);  setTitle(res.getString("DPolicyConstraints.Title"));  initComponents();}  }
class C{  public void init(){  if (Config.v().APP_PATH == null) {    logger.error("Project not configured properly. Missing option -apppath.");    System.exit(1);  } else {    appPath=new File(Config.v().APP_PATH);    logger.info("Setting application path to {}.",appPath.toString());    if (!appPath.exists()) {      logger.error("Project not configured properly. Application path {} does not exist: ",appPath);      System.exit(1);    }  }  setSrcClasses();  if (Config.v().LIB_PATH != null) {    appLibPath=new File(Config.v().LIB_PATH);    setLibClasses();  }}  }
class C{  private static void sqlFieldsQuery(){  IgniteCache<AffinityKey<Long>,Person> cache=Ignition.ignite().cache(PERSON_CACHE);  QueryCursor<List<?>> cursor=cache.query(new SqlFieldsQuery("select concat(firstName, ' ', lastName) from Person"));  List<List<?>> res=cursor.getAll();  print("Names of all employees:",res);}  }
class C{  public boolean isChartAvailable(String filename){  return (this.chartNames.contains(filename));}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.276 -0500",hash_original_method="629F9E9D083C69E26E5C0357350415B2",hash_generated_method="291727BD3F0B05D608031EFD37FB6747") public static void initServiceInfo(Provider p){  for (  Provider.Service serv : p.getServices()) {    String type=serv.getType();    if (secureRandom == null && type.equals("SecureRandom")) {      secureRandom=serv;    }    String key=type + "." + serv.getAlgorithm().toUpperCase(Locale.US);    if (!services.containsKey(key)) {      services.put(key,serv);    }    for (    String alias : Engine.door.getAliases(serv)) {      key=type + "." + alias.toUpperCase(Locale.US);      if (!services.containsKey(key)) {        services.put(key,serv);      }    }  }}  }
class C{  public void enableSrcPosCalculation(){  calculateSrcPositions=true;  final int len=sb.length();  ib=new ArrayList<Integer>(len);  for (int i=0; i < len; i++)   ib.add(i);}  }
class C{  private static void delete_alt_ocsp(CommandLine cmdLine) throws Exception {  String tenant=getTenantName(cmdLine);  CasIdmClient client=new CasIdmClient(HOSTNAME);  if (tenant.isEmpty()) {    tenant=client.getDefaultTenant().toString();  }  System.out.println("Deleting alternative OCSP responder for tenant :" + tenant);  AuthnPolicy authnPolicy=client.getAuthnPolicy(tenant);  ClientCertPolicy certPolicy=new ClientCertPolicy();  if (authnPolicy.getClientCertPolicy() != null) {    certPolicy=authnPolicy.getClientCertPolicy();  }  String inputVal=getValueByOption(cmdLine,OPTION_ALL_SITES);  if (inputVal != null) {    System.out.println("Deleting alternative OCSP responder configurations for all sites!");    certPolicy.set_siteOCSPMap(new HashMap<String,AlternativeOCSPList>());  } else {    String siteID=cmdLine.getOptionValue(OPTION_SITE_ID,null);    if (siteID == null) {      siteID=client.getClusterId();    }    System.out.println("Deleting alternative OCSP responder configurations for site: " + siteID);    HashMap<String,AlternativeOCSPList> ocspSiteMap=certPolicy.get_siteOCSPList();    if (null != ocspSiteMap) {      ocspSiteMap.remove(siteID);    }  }  client.setAuthnPolicy(tenant,new AuthnPolicy(authnPolicy.IsPasswordAuthEnabled(),authnPolicy.IsWindowsAuthEnabled(),authnPolicy.IsTLSClientCertAuthnEnabled(),authnPolicy.IsRsaSecureIDAuthnEnabled(),certPolicy,authnPolicy.get_rsaAgentConfig()));  displayAltOcsp(certPolicy);}  }
class C{  List<OrganizedTaxonomicCoverage> constructOrganizedTaxonomicCoverages(List<TaxonomicCoverage> coverages){  List<OrganizedTaxonomicCoverage> organizedTaxonomicCoverages=new ArrayList<OrganizedTaxonomicCoverage>();  for (  TaxonomicCoverage coverage : coverages) {    OrganizedTaxonomicCoverage organizedCoverage=new OrganizedTaxonomicCoverage();    organizedCoverage.setDescription(coverage.getDescription());    organizedCoverage.setKeywords(setOrganizedTaxonomicKeywords(coverage.getTaxonKeywords()));    organizedTaxonomicCoverages.add(organizedCoverage);  }  return organizedTaxonomicCoverages;}  }
class C{  public static void i(String tag,String msg,Throwable tr){  println(INFO,tag,msg,tr);}  }
class C{  public void onManualVerificationAttempt(){  if (ENABLED) {    trackOpt("Manual Verification Attempt",null);  }}  }
class C{  public static BrowserDescriptor standaloneBrowser(@NonNull String version){  return new BrowserDescriptor(PACKAGE_NAME,SIGNATURE_SET,version,false);}  }
class C{  static public void removeComments(Node node){  NodeList children=node.getChildNodes();  int i=0;  int len=children.getLength();  while (i < len) {    Node child=children.item(i);    if (child.hasChildNodes()) {      removeComments(child);      i++;    } else {      if (child.getNodeType() == Node.COMMENT_NODE) {        node.removeChild(child);        len--;      } else {        i++;      }    }  }}  }
class C{  public static void printState(TLCStateInfo currentStateInfo,TLCState lastState,int num){  String stateString;  if (lastState != null && TLCGlobals.printDiffsOnly) {    stateString=currentStateInfo.state.toString(lastState);  } else {    stateString=currentStateInfo.state.toString();  }  if (currentStateInfo.state.allAssigned()) {    MP.printState(EC.TLC_STATE_PRINT2,new String[]{String.valueOf(num),currentStateInfo.info.toString(),stateString,String.valueOf(currentStateInfo.fingerPrint())},currentStateInfo,num);  } else {    MP.printState(EC.TLC_STATE_PRINT2,new String[]{String.valueOf(num),currentStateInfo.info.toString(),stateString,"-1"},currentStateInfo,num);  }}  }
class C{  public static void clearDnsCache(){  addressCache.clear();}  }
class C{  private static void loadAdobeMap(){  BufferedReader input_stream=null;  if (adobeMap == null) {    try {      adobeMap=new HashMap<String,Integer>();      input_stream=new BufferedReader(new InputStreamReader(loader.getResourceAsStream("org/jpedal/res/pdf/glyphlist.cfg"),enc));      if (input_stream == null) {        LogWriter.writeLog("Unable to open glyphlist.cfg from jar");      }      while (true) {        final String line=input_stream.readLine();        if (line == null) {          break;        }        if ((!line.startsWith("#")) && (line.indexOf(';') != -1)) {          final StringTokenizer vals=new StringTokenizer(line,";");          final String key=vals.nextToken();          String operand=vals.nextToken();          final int space=operand.indexOf(' ');          if (space != -1) {            operand=operand.substring(0,space);          }          final int opVal=Integer.parseInt(operand,16);          adobeMap.put(key,opVal);          unicode_name_mapping_table.put(key,Character.toString((char)opVal));        }      }    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " reading lookup table for pdf  for abobe map");    }  }  if (input_stream != null) {    try {      input_stream.close();    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " reading lookup table for pdf  for abobe map");    }  }}  }
class C{  public Source findSourceByQName(String namespaceURI,String localPart){  return qNameTable.get(namespaceURI,localPart);}  }
class C{  public String sprintf(String format,Object... args){  return String.format(format,args);}  }
class C{  public Iterator<K1> iterator(){  return new KeyIterator<K1,V1>(_map);}  }
class C{  public static int token_sort_ratio(String s1,String s2,Boolean force_ascii){  if (force_ascii == null) {    force_ascii=true;  }  return _token_sort(s1,s2,false,force_ascii);}  }
class C{  protected Total calculateItemTotal(final List<CartItem> items){  final CartItemPrices prices=new CartItemPrices();  if (items != null) {    for (    final CartItem item : items) {      prices.add(new CartItemPrices(item));    }  }  return new TotalImpl(prices.listPrice,prices.salePrice,prices.nonSalePrice,prices.finalPrice,false,null,prices.finalPrice,prices.finalTax,prices.grossFinalPrice,Total.ZERO,Total.ZERO,false,null,Total.ZERO,Total.ZERO,prices.finalPrice,prices.finalTax,prices.grossListPrice,prices.grossFinalPrice);}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  @Override void updateForDecoderTypeID(List<DecoderFile> pModelList){  mDecoderList.setModel(DecoderIndexFile.jComboBoxModelFromList(pModelList));  mDecoderList.setSelectedIndex(0);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(5);  newVector.addElement(new Option("\tThe number of dimensions (attributes) the data should be reduced to\n" + "\t(default 10; exclusive of the class attribute, if it is set).","N",1,"-N <number>"));  newVector.addElement(new Option("\tThe distribution to use for calculating the random matrix.\n" + "\tSparse1 is:\n" + "\t  sqrt(3)*{-1 with prob(1/6), 0 with prob(2/3), +1 with prob(1/6)}\n"+ "\tSparse2 is:\n"+ "\t  {-1 with prob(1/2), +1 with prob(1/2)}\n","D",1,"-D [SPARSE1|SPARSE2|GAUSSIAN]"));  newVector.addElement(new Option("\tThe percentage of dimensions (attributes) the data should\n" + "\tbe reduced to (exclusive of the class attribute, if it is set). The -N\n" + "\toption is ignored if this option is present and is greater\n"+ "\tthan zero.","P",1,"-P <percent>"));  newVector.addElement(new Option("\tReplace missing values using the ReplaceMissingValues filter","M",0,"-M"));  newVector.addElement(new Option("\tThe random seed for the random number generator used for\n" + "\tcalculating the random matrix (default 42).","R",0,"-R <num>"));  return newVector.elements();}  }
class C{  public static BlockPair createFakeBlock(BlockStore blockStore,Transaction... transactions){  return createFakeBlock(blockStore,Block.BLOCK_VERSION_GENESIS,Utils.currentTimeSeconds(),0,transactions);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.253 -0500",hash_original_method="EE95B522B106FAE9E2BC75AC9A53C7A8",hash_generated_method="7C589C8FAA2EC286F4CCE935FE295ADA") private static ObjectStreamClass createClassDesc(Class<?> cl){  ObjectStreamClass result=new ObjectStreamClass();  boolean isArray=cl.isArray();  boolean serializable=isSerializable(cl);  boolean externalizable=isExternalizable(cl);  result.isSerializable=serializable;  result.isExternalizable=externalizable;  result.setName(cl.getName());  result.setClass(cl);  Class<?> superclass=cl.getSuperclass();  if (superclass != null) {    result.setSuperclass(lookup(superclass));  }  Field[] declaredFields=null;  if (serializable || externalizable) {    if (result.isEnum() || result.isProxy()) {      result.setSerialVersionUID(0L);    } else {      declaredFields=cl.getDeclaredFields();      result.setSerialVersionUID(computeSerialVersionUID(cl,declaredFields));    }  }  if (serializable && !isArray) {    if (declaredFields == null) {      declaredFields=cl.getDeclaredFields();    }    result.buildFieldDescriptors(declaredFields);  } else {    result.setFields(NO_FIELDS);  }  ObjectStreamField[] fields=result.getFields();  if (fields != null) {    ObjectStreamField[] loadFields=new ObjectStreamField[fields.length];    for (int i=0; i < fields.length; ++i) {      loadFields[i]=new ObjectStreamField(fields[i].getName(),fields[i].getType(),fields[i].isUnshared());      loadFields[i].getTypeString();    }    result.setLoadFields(loadFields);  }  byte flags=0;  if (externalizable) {    flags|=ObjectStreamConstants.SC_EXTERNALIZABLE;    flags|=ObjectStreamConstants.SC_BLOCK_DATA;  } else   if (serializable) {    flags|=ObjectStreamConstants.SC_SERIALIZABLE;  }  result.methodWriteReplace=findMethod(cl,"writeReplace");  result.methodReadResolve=findMethod(cl,"readResolve");  result.methodWriteObject=findPrivateMethod(cl,"writeObject",WRITE_PARAM_TYPES);  result.methodReadObject=findPrivateMethod(cl,"readObject",READ_PARAM_TYPES);  result.methodReadObjectNoData=findPrivateMethod(cl,"readObjectNoData",EmptyArray.CLASS);  if (result.hasMethodWriteObject()) {    flags|=ObjectStreamConstants.SC_WRITE_METHOD;  }  result.setFlags(flags);  return result;}  }
class C{  public boolean toggleBookmark(int line) throws BadLocationException {  if (!isBookmarkingEnabled() || getBookmarkIcon() == null) {    return false;  }  GutterIconImpl[] icons=getTrackingIcons(line);  if (icons.length == 0) {    int offs=textArea.getLineStartOffset(line);    addOffsetTrackingIcon(offs,bookmarkIcon);    return true;  }  boolean found=false;  for (int i=0; i < icons.length; i++) {    if (icons[i].getIcon() == bookmarkIcon) {      removeTrackingIcon(icons[i]);      found=true;    }  }  if (!found) {    int offs=textArea.getLineStartOffset(line);    addOffsetTrackingIcon(offs,bookmarkIcon);  }  return !found;}  }
class C{  public static void addHandler(final Handler handler){  log.addHandler(handler);}  }
class C{  public static void showNodes(final JFrame parent,final ZyGraph graph,final Collection<NaviNode> toShow,final Collection<NaviNode> toHide){  Preconditions.checkNotNull(graph,"IE02120: Graph argument can not be null");  Preconditions.checkNotNull(toShow,"IE02121: toShow argument can not be null");  Preconditions.checkNotNull(toHide,"IE02122: toHide argument can not be null");  final ZyGraphViewSettings settings=graph.getSettings();  final Set<NaviNode> neighbours=ProximityRangeCalculator.getNeighbors(graph,toShow,settings.getProximitySettings().getProximityBrowsingChildren(),settings.getProximitySettings().getProximityBrowsingParents());  neighbours.addAll(toShow);  final int invisibleNodes=countInvisibleNodes(neighbours);  if (userCancelsMakingVisible(parent,graph,invisibleNodes)) {    return;  }  graph.showNodes(toShow,toHide);}  }
class C{  private static double remainderTwoPi(double angle){  if (USE_JDK_MATH) {    double y=STRICT_MATH ? StrictMath.sin(angle) : Math.sin(angle);    double x=STRICT_MATH ? StrictMath.cos(angle) : Math.cos(angle);    return STRICT_MATH ? StrictMath.atan2(y,x) : Math.atan2(y,x);  }  boolean negateResult;  if (angle < 0.0) {    negateResult=true;    angle=-angle;  } else {    negateResult=false;  }  if (angle <= NORMALIZE_ANGLE_MAX_MEDIUM_DOUBLE) {    double fn=(double)(int)(angle * INVTWOPI + 0.5);    double result=(angle - fn * TWOPI_HI) - fn * TWOPI_LO;    return negateResult ? -result : result;  } else   if (angle < Double.POSITIVE_INFINITY) {    long lx=Double.doubleToRawLongBits(angle);    long exp=((lx >> 52) & 0x7FF) - 1046;    double z=Double.longBitsToDouble(lx - (exp << 52));    double x0=(double)((int)z);    z=(z - x0) * TWO_POW_24;    double x1=(double)((int)z);    double x2=(z - x1) * TWO_POW_24;    double result=subRemainderTwoPi(x0,x1,x2,(int)exp,(x2 == 0) ? 2 : 3);    return negateResult ? -result : result;  } else {    return Double.NaN;  }}  }
class C{  public static void main(String[] args){  int[] deck=new int[52];  int[] picks=new int[4];  for (int i=0; i < deck.length; i++)   deck[i]=i;  shuffleCards(deck);  int count=0;  do {    pickCards(deck,picks);    count++;  } while (!isOneOFEachSuit(picks));  print(picks);  System.out.println("Number of picks: " + count);}  }
class C{  private static String deleteQuotes(String quotedString){  int indexOfQuote=quotedString.indexOf('\'');  if (indexOfQuote < 0) {    int newLength=quotedString.length();    while (newLength > 0 && AsciiFuncs.isWhitespace(quotedString.charAt(newLength - 1))) {      newLength--;    }    return quotedString.substring(0,newLength);  } else {    int lastIndexOfQuote=0;    StringBuffer sb=new StringBuffer(quotedString.length());    while (indexOfQuote >= 0) {      sb.append(quotedString,lastIndexOfQuote,indexOfQuote);      lastIndexOfQuote=indexOfQuote + 1;      indexOfQuote=quotedString.indexOf('\'',lastIndexOfQuote + 1);    }    sb.append(quotedString,lastIndexOfQuote,quotedString.length());    int newLength=sb.length();    while (newLength > 0 && AsciiFuncs.isWhitespace(sb.charAt(newLength - 1))) {      newLength--;    }    sb.setLength(newLength);    return sb.toString();  }}  }
class C{  public RequestHandle head(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params)),null,responseHandler,context);}  }
class C{  public void readItem(AttributeSet attrs){  TypedArray a=mContext.getApplicationContext().obtainStyledAttributes(attrs,net.steamcrafted.materialiconlib.R.styleable.MaterialIconViewFormat);  itemIconResId=a.getInt(net.steamcrafted.materialiconlib.R.styleable.MaterialIconViewFormat_materialIcon,-1);  itemIconColor=a.getColor(net.steamcrafted.materialiconlib.R.styleable.MaterialIconViewFormat_materialIconColor,-1);  a.recycle();  a=mContext.obtainStyledAttributes(attrs,net.steamcrafted.materialiconlib.R.styleable.MaterialMenuItem);  final int category=a.getInt(net.steamcrafted.materialiconlib.R.styleable.MaterialMenuGroup_android_menuCategory,groupCategory);  final int order=a.getInt(net.steamcrafted.materialiconlib.R.styleable.MaterialMenuGroup_android_orderInCategory,groupOrder);  categoryOrder=(category & CATEGORY_MASK) | (order & USER_MASK);  a.recycle();  itemAdded=false;}  }
class C{  public void close(){  setVisible(false);}  }
class C{  public WinnerTakeAll(final Network root,final int numNeurons){  super(root);  for (int i=0; i < numNeurons; i++) {    this.addNeuron(new Neuron(root,new LinearRule()));  }  setLabel("Winner take all network");}  }
class C{  private void reachablePathFind(Node a,Node b,Node c,LinkedList<Node> reachable,Graph graph){  Set<Node> cParents=new HashSet<Node>(graph.getParents(c));  Set<Node> visited=new HashSet<Node>();  visited.add(b);  visited.add(c);  Node e=reachable.getFirst();  int distance=0;  while (reachable.size() > 0) {    Node x=reachable.removeFirst();    visited.add(x);    if (e == x) {      e=x;      distance++;      final int _maxPathLength=maxPathLength == -1 ? 1000 : maxPathLength;      if (distance > 0 && distance > _maxPathLength) {        continue;      }    }    List<Node> pathExtensions=graph.getNodesInTo(x,Endpoint.ARROW);    pathExtensions.removeAll(visited);    for (    Node d : pathExtensions) {      if (!graph.isAdjacentTo(d,c)) {        doDdpOrientation(d,a,b,c,graph);        return;      } else       if (cParents.contains(d)) {        if (graph.getEndpoint(x,d) == Endpoint.ARROW) {          reachable.add(d);        }      }    }  }}  }
class C{  void assertAwareCompatibility(Class aware,Object obj){  Class[] valid=awareCompatibility.get(aware);  if (valid == null) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown Aware interface: " + aware);  }  for (  Class v : valid) {    if (v.isInstance(obj)) {      return;    }  }  StringBuilder builder=new StringBuilder();  builder.append("Invalid 'Aware' object: ").append(obj);  builder.append(" -- ").append(aware.getName());  builder.append(" must be an instance of: ");  for (  Class v : valid) {    builder.append("[").append(v.getName()).append("] ");  }  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,builder.toString());}  }
class C{  public static FetchSysCfgRequest create(){  FetchSysCfgRequest m=new FetchSysCfgRequest();  return m;}  }
class C{  public boolean writeToNode(Short nodeId,SyncMessage bsm) throws InterruptedException {  if (nodeId == null)   return false;  NodeConnection nc=connections.get(nodeId);  if (nc != null && nc.state == NodeConnectionState.CONNECTED) {    waitForMessageWindow(bsm.getType(),nodeId,0);    nc.nodeChannel.writeAndFlush(bsm);    return true;  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public List<NamedList<Object>> convertToListOfNamedLists(){  List<NamedList<Object>> convertedPivotList=null;  if (valueCollection.size() > 0) {    convertedPivotList=new LinkedList<>();    for (    PivotFacetValue pivot : valueCollection)     convertedPivotList.add(pivot.convertToNamedList());  }  return convertedPivotList;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  double gridRes;  double bufferSize=1;  boolean bufferInGridCells=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      bufferSize=Double.parseDouble(args[i]);    } else     if (i == 3) {      if (args[i].toLowerCase().contains("cells")) {        bufferInGridCells=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    gridRes=(image.getCellSizeX() + image.getCellSizeY()) / 2;    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.setPreferredPalette(image.getPreferredPalette());    WhiteboxRaster allocation=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    allocation.isTemporaryFile=true;    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);          allocation.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}if (bufferInGridCells) {bufferSize=bufferSize * bufferSize;} else {bufferSize=(bufferSize / gridRes) * (bufferSize / gridRes);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (image.getValue(row,col) != noData) {z=outputImage.getValue(row,col);if (z <= bufferSize) {outputImage.setValue(row,col,allocation.getValue(row,col));} else {outputImage.setValue(row,col,0);}} else {outputImage.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}outputImage.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputImage.addMetadataEntry("Created on " + new Date());image.close();allocation.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean unload(Entity unit){  if (isDamaged()) {    return false;  }  boolean retval=troops.removeElement(unit.getId());  if (retval) {    currentSpace+=1;  }  return retval;}  }
class C{  private static boolean doesMarkerStartSegment(int markerSecondByte){  if (markerSecondByte == JfifUtil.MARKER_TEM) {    return false;  }  if (markerSecondByte >= JfifUtil.MARKER_RST0 && markerSecondByte <= JfifUtil.MARKER_RST7) {    return false;  }  return markerSecondByte != JfifUtil.MARKER_EOI && markerSecondByte != JfifUtil.MARKER_SOI;}  }
class C{  public float screenY(float x,float y,float z){  showMissingWarning("screenY");  return 0;}  }
class C{  private static OFActionSetVlanVid decode_set_vlan_id(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        VlanVid vlanid=VlanVid.ofVlan(get_short(n.group(1)));        OFActionSetVlanVid.Builder ab=OFFactories.getFactory(version).actions().buildSetVlanVid();        ab.setVlanVid(vlanid);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid VLAN in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.COMPOSED_CONTENT__OWNER:    if (resolve)     return getOwner();  return basicGetOwner();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  public GVTFont deriveFont(float size){  return new SVGGVTFont(size,fontFace,glyphUnicodes,glyphNames,glyphLangs,glyphOrientations,glyphForms,ctx,glyphElements,missingGlyphElement,hkernElements,vkernElements,textElement);}  }
class C{  public void clearBatch() throws SQLException {  if (batchQueries != null)   batchQueries.clear();}  }
class C{  public TypeDefs createTypeDefs(){  TypeDefsImpl typeDefs=new TypeDefsImpl();  return typeDefs;}  }
class C{  void applyWindowScaleOption(short scale_factor){  m_swnd_scale=scale_factor;}  }
class C{  public void buildGraphicsNode(BridgeContext ctx,Element e,GraphicsNode node){  CompositeGraphicsNode cgn=(CompositeGraphicsNode)node;  boolean isStatic=!ctx.isDynamic();  if (isStatic) {    flowRegionNodes=new HashMap();  } else {    regionChangeListener=new RegionChangeListener();  }  CompositeGraphicsNode cgn2=(CompositeGraphicsNode)cgn.get(0);  GVTBuilder builder=ctx.getGVTBuilder();  for (Node n=getFirstChild(e); n != null; n=getNextSibling(n)) {    if (n instanceof SVGOMFlowRegionElement) {      for (Node m=getFirstChild(n); m != null; m=getNextSibling(m)) {        if (m.getNodeType() != Node.ELEMENT_NODE) {          continue;        }        GraphicsNode gn=builder.build(ctx,(Element)m);        if (gn != null) {          cgn2.add(gn);          if (isStatic) {            flowRegionNodes.put(m,gn);          }        }      }      if (!isStatic) {        AbstractNode an=(AbstractNode)n;        XBLEventSupport es=(XBLEventSupport)an.initializeEventSupport();        es.addImplementationEventListenerNS(SVG_NAMESPACE_URI,"shapechange",regionChangeListener,false);      }    }  }  GraphicsNode tn=(GraphicsNode)cgn.get(1);  super.buildGraphicsNode(ctx,e,tn);  flowRegionNodes=null;}  }
class C{  public static void textRight(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(s);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)(xs - ws),(float)(ys + hs));  draw();}  }
class C{  public LinkSocket(LinkSocketNotifier notifier,Proxy proxy){  if (DBG)   log("LinkSocket(notifier, proxy) EX");}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer,Locale locale,boolean designTime){  super(peer,locale,designTime);}  }
class C{  @Override public synchronized void putAll(Map<?,?> t){  check("putProviderProperty." + name);  if (debug != null) {    debug.println("Put all " + name + " provider properties");  }  implPutAll(t);}  }
class C{  @Override public int hashCode(){  int result=41;  result=37 * result + this.category.hashCode();  result=37 * result + this.label.hashCode();  result=37 * result + this.labelAnchor.hashCode();  return result;}  }
class C{  public IotfConnector(Properties options){  this.options=options;}  }
class C{  public static void evolve(Permutation permutation){  int i=PRNG.nextInt(permutation.size());  int j=PRNG.nextInt(permutation.size() - 1);  if (i == j) {    j=permutation.size() - 1;  }  permutation.insert(i,j);}  }
class C{  private void createGui(){  final JPanel basePanel=new JPanel(new BorderLayout());  final JPanel titledBorderHelperPanel=new JPanel(new BorderLayout());  titledBorderHelperPanel.setBorder(new TitledBorder("Debugger"));  final JPanel containerPanel=new JPanel(new GridLayout(3,1,5,5));  containerPanel.setBorder(new EmptyBorder(0,0,5,0));  final JPanel buttonPanel=new JPanel(new GridLayout(1,2));  buttonPanel.setBorder(new EmptyBorder(5,0,5,2));  buttonPanel.add(new JPanel());  buttonPanel.add(m_saveButton);  containerPanel.add(new CLabeledComponent("Name" + ":",new CNameHelp(),m_nameTextField));  containerPanel.add(new CLabeledComponent("Host" + ":",new CHostHelp(),m_hostTextField));  containerPanel.add(new CLabeledComponent("Port" + ":",new CPortHelp(),m_portTextField));  titledBorderHelperPanel.add(containerPanel,BorderLayout.NORTH);  basePanel.add(titledBorderHelperPanel,BorderLayout.NORTH);  basePanel.add(buttonPanel,BorderLayout.CENTER);  add(basePanel,BorderLayout.NORTH);}  }
class C{  public void reset(){  mTapToRetryAttempts=0;}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case SGraphPackage.ENTRY_KIND:    return convertEntryKindToString(eDataType,instanceValue);case SGraphPackage.CHOICE_KIND:  return convertChoiceKindToString(eDataType,instanceValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public CorruptedInputException(String s){  super(s);}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  public Builder textButton(@NotNull String... text){  if (text.length > 2) {    Log.e("TextColorButton","Impossible to set Text Button value more than 2! Please Check it");    throw new IllegalArgumentException("Impossible to set Text Button value more than 2! Please Check it");  }  if (text.length > 0) {    if (text[0] == null) {      Log.e("TextButton","Impossible to set Text to null! Please Check it");    } else {      mTextBtn1=text[0];      isTextBtn1=true;    }  }  if (text.length > 1) {    if (text[1] == null) {      Log.e("TextButton","Impossible to set Text to null! Please Check it");    } else {      mTextBtn2=text[1];      isTextBtn2=true;    }  }  return this;}  }
class C{  HTMLTable(HTMLTableModel model){  super(model,false);  setCollapseBorder(false);}  }
class C{  public KeyCrypterScrypt(){  byte[] salt=new byte[SALT_LENGTH];  secureRandom.nextBytes(salt);  Protos.ScryptParameters.Builder scryptParametersBuilder=Protos.ScryptParameters.newBuilder().setSalt(ByteString.copyFrom(salt));  this.scryptParameters=scryptParametersBuilder.build();}  }
class C{  public CActionSearchCaseSensitive(final ZyGraph graph){  super("Case Sensitive Search");  m_graph=graph;}  }
class C{  private void drawYTickMarks(Graphics g){  Rectangle plotRect=getPlotRect();  int xPos=plotRect.x;  NumberFormat nf=NumberFormat.getInstance();  nf.setMinimumFractionDigits(1);  nf.setMaximumFractionDigits(1);  for (double d=0.0; d <= 1.0; d+=0.1) {    int yPos=getYPos(d);    g.setColor(boundaryColor);    g.drawLine(xPos,yPos,xPos + 10,yPos);    String str=nf.format(d);    int strWid=fm.stringWidth(str);    int strHgt=fm.getAscent();    g.drawString(str,xPos - strWid - 5,yPos + strHgt / 2);  }}  }
class C{  @Override public void receive(DatagramPacket p) throws IOException {synchronized (inReceiveSyncRoot) {    inReceive++;  }  try {    super.receive(p);  }  finally {synchronized (inReceiveSyncRoot) {      inReceive--;      inReceiveSyncRoot.notifyAll();    }  }}  }
class C{  public void destroy(){  TempBuffer ptr=_head;  _head=null;  _tail=null;  TempBuffer.freeAll(ptr);}  }
class C{  public FieldValue(){  this(null,false);}  }
class C{  @Override public void updateAsciiStream(int columnIndex,InputStream x) throws SQLException {  updateAsciiStream(columnIndex,x,-1);}  }
class C{  @SuppressWarnings({"regex","purity.not.deterministic.call"}) public static boolean isRegex(final char c){  return isRegex(Character.toString(c));}  }
class C{  public void testDrainToNullN(){  LinkedBlockingQueue q=populatedQueue(SIZE);  try {    q.drainTo(null,0);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public Pose toOpenGLPointCloudPose(TangoPoseData tangoPose){  if (mDeviceTDepthCamera == null) {    throw new RuntimeException("You must call setupExtrinsics first.");  }  Matrix4 invertYandZMatrix=new Matrix4(new double[]{1.0f,0.0f,0.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,0.0f,0.0f,-1.0f,0.0f,0.0f,0.0f,0.0f,1.0f});  Matrix4 startServiceTdevice=tangoPoseToMatrix(tangoPose);  Matrix4 openglTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTdevice);  Matrix4 openglWorldTOpenglCamera=openglTDevice.multiply(mDeviceTDepthCamera).multiply(DEPTH_CAMERA_T_OPENGL_CAMERA).multiply(invertYandZMatrix);  return matrixToPose(openglWorldTOpenglCamera);}  }
