class C{  @Override public void writeTo(ChannelBuffer data){  super.writeTo(data);}  }
class C{  public SetccTranslator(final IConditionGenerator conditionGenerator){  Preconditions.checkNotNull(conditionGenerator,"Error: Argument conditionGenerator can't be null");  this.conditionGenerator=conditionGenerator;}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static Object addressAsObject(Address address){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }  if (objectAddressRemapper == null) {    return null;  }  return objectAddressRemapper.addressAsObject(address);}  }
class C{  public void rerouteViaLink(TransitRoute transitRoute,Id<Link> oldLinkId,Id<Link> newLinkId){  List<TransitRouteStop> stopSequence=transitRoute.getStops();  List<Id<Link>> linkSequence=transitRoute.getRoute().getLinkIds();  List<Id<Link>> refLinkIds=stopSequence.stream().map(null).collect(Collectors.toList());  if (refLinkIds.contains(oldLinkId)) {    throw new IllegalArgumentException("Link is referenced to a stop facility, rerouteViaLink cannot be performed. Use changeRefLink instead.");  } else {    int i=0;    TransitRouteStop fromRouteStop=stopSequence.get(i);    for (    Id<Link> linkId : linkSequence) {      if (linkId.equals(oldLinkId)) {        rerouteFromStop(transitRoute,fromRouteStop,newLinkId);        break;      }      if (linkId.equals(refLinkIds.get(i))) {        fromRouteStop=stopSequence.get(i++);        i++;      }    }  }}  }
class C{  public static final List<Geo> polyNearPoly(GeoArray s,GeoArray r,double near){  int rlen=r.getSize();  int slen=s.getSize();  Geo pl0=r.get(rlen - 1);  Geo pl1=new Geo();  Geo sl0=s.get(slen - 1);  Geo sl1=new Geo();  List<Geo> list=null;  for (int j=0; j < rlen; j++) {    pl1=r.get(j,pl1);    for (int i=0; i < slen; i++) {      sl1=s.get(i,sl1);      Geo ret=segmentsIntersectOrNear(sl0,sl1,pl0,pl1,near);      if (ret != null) {        if (list == null) {          list=new LinkedList<Geo>();        }        list.add(ret);      }      sl0=sl1;    }    pl0=pl1;  }  return list;}  }
class C{  public String globalInfo(){  return "Produces a random subsample of a dataset using the reservoir sampling " + "Algorithm \"R\" by Vitter. The original data set does not have to fit " + "into main memory, but the reservoir does. ";}  }
class C{  public static byte[] asUnsignedByteArray(BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes[0] == 0) {    byte[] tmp=new byte[bytes.length - 1];    System.arraycopy(bytes,1,tmp,0,tmp.length);    return tmp;  }  return bytes;}  }
class C{  public void testTxLocalPessimisticSerializable() throws Exception {  checkTx(LOCAL,PESSIMISTIC,SERIALIZABLE);}  }
class C{  public SVGPath ellipticalArc(double rx,double ry,double ar,double la,double sp,double x,double y){  append(SVGConstants.PATH_ARC,rx,ry,ar,la,sp,x,y);  return this;}  }
class C{  @Override public final void sample(){  _value=_acquireCount.get() - _releaseCount.get();}  }
class C{  protected boolean display(File helpFile) throws HelpException {  if (helpFile.exists()) {    loadAndWrite(helpFile);    return true;  } else {    File notFound=new File(helpDir,NOT_FOUND);    if (notFound.exists())     loadAndWrite(notFound); else     throw new HelpException("Topic not found, try 'help' for more information");    return false;  }}  }
class C{  private void connectBtDevice(String address,boolean secure){  BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);  mCommService=new BtCommService(this,mHandler);  mCommService.connect(device,secure);}  }
class C{  public MessageArea addProgressBar(final int mininum,final int maximum,final int value){  setInitialised(true);  this.progressBarMinimumValue=mininum;  this.progressBarMaximumValue=maximum;  this.progressBarValue=value;  return this;}  }
class C{  public boolean match(ContinueStatement node,Object other){  if (!(other instanceof ContinueStatement)) {    return false;  }  ContinueStatement o=(ContinueStatement)other;  return safeSubtreeMatch(node.getLabel(),o.getLabel());}  }
class C{  public static <T>Seq<T> newSeq(Collection<T> values){  return new SeqImpl<>(values);}  }
class C{  public int compareTo(Object o){  BoundablePair nd=(BoundablePair)o;  if (distance < nd.distance)   return -1;  if (distance > nd.distance)   return 1;  return 0;}  }
class C{  public File downloadConfigDir(SolrZkClient zkClient,String configName) throws IOException, InterruptedException, KeeperException {  File dir=Files.createTempDir();  dir.deleteOnExit();  ZkController.downloadConfigDir(zkClient,configName,dir);  File confDir=new File(dir,"conf");  if (!confDir.isDirectory()) {    confDir=new File(Files.createTempDir().getAbsolutePath(),"conf");    confDir.getParentFile().deleteOnExit();    Files.move(dir,confDir);    dir=confDir.getParentFile();  }  FileUtils.writeStringToFile(new File(dir,"solr.xml"),"<solr><cores><core name=\"collection1\" instanceDir=\".\" /></cores></solr>","UTF-8");  verifyConfigDir(confDir);  return dir;}  }
class C{  protected WinListener createWinListener(JPopupMenu p){  return new WinListener(p);}  }
class C{  public char[] toCharArray(){  char[] newValue=new char[count];  System.arraycopy(buf,0,newValue,0,count);  return newValue;}  }
class C{  public static boolean isReferenceType(String signature){  return signature.startsWith("L") || signature.startsWith("[");}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_right.num(xctxt);}  }
class C{  @Override public BigdataURI rdfId(){  return uri;}  }
class C{  public Dimension preferredLayoutSize(Container parent){  GridBagLayoutInfo info=getLayoutInfo(parent,PREFERREDSIZE);  return getMinSize(parent,info);}  }
class C{  private void writeTgrepBinary(String aFilename) throws IOException {  List<String> cmd=new ArrayList<String>();  cmd.add(tgrep2File.getAbsolutePath());  if (writeComments) {    cmd.add("-C");  }  cmd.add("-p");  cmd.add(new File(outputPath,aFilename + EXT_CORPUS).getAbsolutePath());  cmd.add(new File(outputPath,aFilename + EXT_BINARY + compression.getExtension()).getAbsolutePath());  getLogger().info("Running tgrep2 command: [" + StringUtils.join(cmd," ") + "].");  Process tgrepProcess=null;  try {    tgrepProcess=new ProcessBuilder(cmd).start();    tgrepProcess.waitFor();  } catch (  InterruptedException e) {    throw new IOException();  } finally {    if (tgrepProcess != null) {      InputStream stderr=tgrepProcess.getErrorStream();      if (stderr.available() > 0) {        byte[] data=new byte[stderr.available()];        stderr.read(data);        String error=new String(data,"UTF-8");        getLogger().error(error);        throw new IOException(error);      }    }  }}  }
class C{  public void addAll(Collection<? extends T> collection){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.addAll(collection);    } else {      mObjects.addAll(collection);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public R proceed1(final T1 param){  return fn.apply(param,param2,param3);}  }
class C{  public void addEvent(final ITraceEvent event){  Preconditions.checkNotNull(event,"IE00781: Trace event can not be null");  if (traceEvents.contains(event)) {    throw new IllegalStateException("IE00782: Trace event already belongs to the trace list");  }  traceEvents.add(event);  for (  final ITraceListListener listener : listeners) {    try {      listener.eventAdded(this,event);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  public void testTimedInvokeAll2() throws InterruptedException {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Future<String>> r=e.invokeAll(new ArrayList<Callable<String>>(),MEDIUM_DELAY_MS,MILLISECONDS);    assertTrue(r.isEmpty());  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply r){  ((MarklinListener)client).reply((MarklinReply)r);}  }
class C{  public static void makeBucket_test1() throws Exception {  println("Test: makeBucket(String bucketName)");  String name=getRandomName();  client.makeBucket(name);  client.removeBucket(name);}  }
class C{  public static Collection flatten(Object[] self){  return flatten(toList(self),new ArrayList());}  }
class C{  public X509Attribute(String oid,ASN1Encodable value){  this.attr=new Attribute(new ASN1ObjectIdentifier(oid),new DERSet(value));}  }
class C{  public TransferEntropyCalculatorMultiVariateViaCondMutualInfo(String condMiCalculatorClassName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(condMiCalculatorClassName);}  }
class C{  void closeSession() throws JMSException {  if (mc != null) {    ActiveMQRALogger.LOGGER.trace("Closing session");    try {      mc.stop();    } catch (    Throwable t) {      ActiveMQRALogger.LOGGER.trace("Error stopping managed connection",t);    }synchronized (consumers) {      for (Iterator<MessageConsumer> i=consumers.iterator(); i.hasNext(); ) {        ActiveMQRAMessageConsumer consumer=(ActiveMQRAMessageConsumer)i.next();        try {          consumer.closeConsumer();        } catch (        Throwable t) {          ActiveMQRALogger.LOGGER.trace("Error closing consumer",t);        }        i.remove();      }    }synchronized (producers) {      for (Iterator<MessageProducer> i=producers.iterator(); i.hasNext(); ) {        ActiveMQRAMessageProducer producer=(ActiveMQRAMessageProducer)i.next();        try {          producer.closeProducer();        } catch (        Throwable t) {          ActiveMQRALogger.LOGGER.trace("Error closing producer",t);        }        i.remove();      }    }    mc.removeHandle(this);    ConnectionEvent ev=new ConnectionEvent(mc,ConnectionEvent.CONNECTION_CLOSED);    ev.setConnectionHandle(this);    mc.sendEvent(ev);    mc=null;  }}  }
class C{  void selectOperator(final Operator op,final boolean clear,final boolean range){  boolean changed=false;  LinkedList<Operator> selectedOperators=new LinkedList<>(model.getSelectedOperators());  if (clear || op == null) {    if (!selectedOperators.isEmpty()) {      changed=true;      if (!range) {        selectedOperators.clear();      } else {        Operator last=null;        if (!selectedOperators.isEmpty()) {          last=selectedOperators.getLast();        }        selectedOperators.clear();        if (last != null && last != model.getDisplayedChain()) {          selectedOperators.add(last);        }      }    }  } else {    if (selectedOperators.contains(model.getDisplayedChain())) {      selectedOperators.remove(model.getDisplayedChain());    }  }  if (range) {    int lastIndex=-1;    boolean sameUnit=true;    if (!selectedOperators.isEmpty()) {      Operator lastSelected=selectedOperators.getLast();      if (lastSelected.getExecutionUnit() == null) {        sameUnit=false;      } else {        lastIndex=lastSelected.getExecutionUnit().getOperators().indexOf(lastSelected);        if (lastSelected.getExecutionUnit() != op.getExecutionUnit()) {          sameUnit=false;        }      }    }    if (sameUnit) {      int index=op.getExecutionUnit().getOperators().indexOf(op);      if (lastIndex < index) {        for (int i=lastIndex + 1; i <= index; i++) {          selectedOperators.add(op.getExecutionUnit().getOperators().get(i));        }      } else       if (lastIndex > index) {        for (int i=lastIndex - 1; i >= index; i--) {          selectedOperators.add(op.getExecutionUnit().getOperators().get(i));        }      }    }  } else {    boolean contains=selectedOperators.contains(op);    if (op != null) {      if (!contains) {        selectedOperators.add(op);        changed=true;      } else       if (!clear) {        selectedOperators.remove(op);        changed=true;      }    }  }  if (changed) {    RapidMinerGUI.getMainFrame().selectOperators(selectedOperators);  }}  }
class C{  @Pure Atom arrayDescriptorFromElementDescriptor(){  if (VM.VerifyAssertions) {    VM._assert(val.length > 0);  }  byte[] sig=new byte[1 + val.length];  sig[0]=(byte)'[';  for (int i=0, n=val.length; i < n; ++i) {    sig[i + 1]=val[i];  }  return findOrCreate(sig,true,null);}  }
class C{  public void update(EventBean[] newData,EventBean[] oldData){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".update Received update, " + "  newData.length==" + ((newData == null) ? 0 : newData.length) + "  oldData.length=="+ ((oldData == null) ? 0 : oldData.length));  }  boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();  boolean isGenerateNatural=parent.getStatementResultService().isMakeNatural();  UniformPair<EventBean[]> newOldEvents=resultSetProcessor.processViewResult(newData,oldData,isGenerateSynthetic);  if (!super.checkAfterCondition(newOldEvents,parent.getStatementContext())) {    return;  }  if (parent.isDistinct() && newOldEvents != null) {    newOldEvents.setFirst(EventBeanUtility.getDistinctByProp(newOldEvents.getFirst(),parent.getEventBeanReader()));    newOldEvents.setSecond(EventBeanUtility.getDistinctByProp(newOldEvents.getSecond(),parent.getEventBeanReader()));  }  if ((!isGenerateSynthetic) && (!isGenerateNatural)) {    if (AuditPath.isAuditEnabled) {      OutputStrategyUtil.indicateEarlyReturn(parent.getStatementContext(),newOldEvents);    }    return;  }  boolean forceOutput=false;  if ((newData == null) && (oldData == null) && ((newOldEvents == null) || (newOldEvents.getFirst() == null && newOldEvents.getSecond() == null))) {    forceOutput=true;  }  if (childView != null) {    postProcess(forceOutput,newOldEvents,childView);  }}  }
class C{  public DefaultComboBoxModel(){  objects=new Vector<E>();}  }
class C{  public void addDistrib(Assignment condition,IndependentDistribution distrib){  table.put(condition,distrib);  if (!distrib.getVariable().equals(this.headVar)) {    throw new RuntimeException("Variable is " + this.headVar + ", not "+ distrib.getVariable());  }  conditionalVars.addAll(condition.getVariables());}  }
class C{  private void emitUntil(@Nonnegative int taskCountAllowed) throws IOException {  try {    while (emitQueue.size() > taskCountAllowed) {      Future<byte[]> future=emitQueue.remove();      byte[] toWrite=future.get();      blockSizes.add(toWrite.length);      out.write(toWrite);    }    tryEmit();  } catch (  ExecutionException e) {    throw new IOException(e);  }catch (  InterruptedException e) {    throw new InterruptedIOException();  }}  }
class C{  public CTagsTreeModel(final JTree tree){  super(null);  m_tree=tree;}  }
class C{  public void close() throws IOException {  if (mSocket != null) {    mSocket.close();    mSocket=null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.222 -0400",hash_original_method="5304D5C5F98F936C59A15960318DA98F",hash_generated_method="C6E6BF2DAFEBC6FB6A6DE5127AC7C2D1") private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  public boolean isPassthruEnabled(){  return passthruEnabled;}  }
class C{  public CreateIndexRequest mapping(String type,XContentBuilder source){  if (mappings.containsKey(type)) {    throw new IllegalStateException("mappings for type \"" + type + "\" were already defined");  }  try {    mappings.put(type,source.string());  } catch (  IOException e) {    throw new IllegalArgumentException("Failed to build json for mapping request",e);  }  return this;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public Advice lookup(int lookupId){  return active.get().lookup(lookupId);}  }
class C{  public void enableRowScaling(boolean enable){  mRowScaleEnabled=enable;  if (mRowsSupportFragment != null) {    mRowsSupportFragment.enableRowScaling(mRowScaleEnabled);  }}  }
class C{  @Override public void run(){  mExecutor.execute(mListener);}  }
class C{  public void unblockContact(ContactId contact) throws RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.unblockContact(contact);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static int extractQuality(String url){{    Pattern u=Pattern.compile("youtube.com/watch?.*fmt=([^&]*)");    Matcher um=u.matcher(url.toString());    if (um.find()) {      try {        return Integer.parseInt(um.group(1));      } catch (      NumberFormatException e) {      }    }  }{    Pattern u=Pattern.compile("youtube.com/v/.*fmt=([^&]*)");    Matcher um=u.matcher(url.toString());    if (um.find()) {      try {        return Integer.parseInt(um.group(1));      } catch (      NumberFormatException e) {      }    }  }  return 0;}  }
class C{  public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY,boolean flywheel){  this(context,interpolator,flywheel);}  }
class C{  private String formatBooleanValue(boolean val){  return String.valueOf(val ? 1 : 0);}  }
class C{  public static void normalize(float[] input){  double normSq=0;  for (int i=0; i < input.length; ++i) {    normSq+=input[i] * input[i];  }  float norm=(float)Math.sqrt(normSq);  for (int i=0; i < input.length; ++i) {    input[i]=input[i] / norm;  }}  }
class C{  @Override public void clear(){}  }
class C{  @RequestMapping(value="/businessObjectData/generateDdlCollection",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_GENERATE_DDL_COLLECTION_POST) public BusinessObjectDataDdlCollectionResponse generateBusinessObjectDataDdlCollection(@RequestBody BusinessObjectDataDdlCollectionRequest businessObjectDataDdlCollectionRequest){  return businessObjectDataService.generateBusinessObjectDataDdlCollection(businessObjectDataDdlCollectionRequest);}  }
class C{  public SmsSender(String transport,Properties props) throws SmsException {  transport_=SmsTransportManager.getTransport(transport,props);}  }
class C{  @Override public boolean isSendfileEnabled(){  return getDelegate().isSendfileEnabled();}  }
class C{  public static int expectedSizeOfProbabilityTable(RandomVariable... vars){  int expectedSizeOfDistribution=1;  if (null != vars) {    for (    RandomVariable rv : vars) {      if (!(rv.getDomain() instanceof FiniteDomain)) {        throw new IllegalArgumentException("Cannot have an infinite domain for a variable in this calculation:" + rv);      }      FiniteDomain d=(FiniteDomain)rv.getDomain();      expectedSizeOfDistribution*=d.size();    }  }  return expectedSizeOfDistribution;}  }
class C{  static private String readFromStdin() throws IOException {  final LineNumberReader r=new LineNumberReader(new InputStreamReader(System.in));  try {    final StringBuilder sb=new StringBuilder();    String s;    while ((s=r.readLine()) != null) {      if (r.getLineNumber() > 1)       sb.append("\n");      sb.append(s);    }    return sb.toString();  }  finally {    r.close();  }}  }
class C{  @SuppressWarnings("unchecked") @Override protected Object convertToString(Class type,Object value){  DateFormat df=new SimpleDateFormat(TS_FORMAT);  if (value instanceof Date) {    try {      return df.format(value);    } catch (    Exception e) {      throw new ConversionException("Error converting Timestamp to String");    }  }  return value.toString();}  }
class C{  public Weeks toStandardWeeks(){  return Weeks.weeks(getValue() / DateTimeConstants.MINUTES_PER_WEEK);}  }
class C{  public void prepareSession(MediaInput player,String remoteAddress,int remotePort,RtpInputStream rtpStream,RtpStreamListener rtpStreamListener) throws RtpException {  try {    inputStream=new MediaCaptureStream(format,player);    inputStream.open();    outputStream=new RtpOutputStream(remoteAddress,remotePort,rtpStream);    outputStream.addRtpStreamListener(rtpStreamListener);    outputStream.open();    Codec[] codecChain=MediaRegistry.generateEncodingCodecChain(format.getCodec());    processor=new Processor(inputStream,outputStream,codecChain);  } catch (  Exception e) {    throw new RtpException("Can't prepare resources");  }}  }
class C{  public static void clearStorage(){synchronized (LOCK) {    instance=null;  }}  }
class C{  public Builder inDistribution(final Distribution distribution){  this.inDistribution=distribution;  return this;}  }
class C{  public ZipInputStream(InputStream in,Charset charset){  super(new PushbackInputStream(in,512),new Inflater(true),512);  usesDefaultInflater=true;  if (in == null) {    throw new NullPointerException("in is null");  }  if (charset == null)   throw new NullPointerException("charset is null");  this.zc=ZipCoder.get(charset);}  }
class C{  public CyclicPermissionsException(PermissionPattern permissionPattern){  super("Detected cyclic permissions structure for " + permissionPattern.getValue());}  }
class C{  public AccountHeaderBuilder withPaddingBelowHeader(boolean paddingBelowHeader){  this.mPaddingBelowHeader=paddingBelowHeader;  return this;}  }
class C{  public static NameMatcher<JobKey> jobNameStartsWith(String compareTo){  return NameMatcher.nameStartsWith(compareTo);}  }
class C{  public void restorePercentageCurrent(double value){  restore(value / 100 * getValue());}  }
class C{  public Workflow.Method rollbackMethodNullMethod(){  return new Workflow.Method(ROLLBACK_METHOD_NULL);}  }
class C{  public static boolean isLiveStreamingAvailable(){  return true;}  }
class C{  public static boolean isSorted(short[] array){  if (array == null || array.length < 2) {    return true;  }  short previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final short current=array[i];    if (NumberUtils.compare(previous,current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  protected int slotNum(int row){  int slotNum;  int n=-1;  int nMin=1;  int nMax=120;  if (_systemSlots) {    nMin=0;    nMax=128;  }  for (slotNum=nMin; slotNum < nMax; slotNum++) {    LocoNetSlot s=memo.getSlotManager().slot(slotNum);    if (_allSlots || s.slotStatus() != LnConstants.LOCO_FREE || slotNum == 0 || slotNum >= 120) {      n++;    }    if (n == row) {      break;    }  }  return slotNum;}  }
class C{  private static boolean isBmpHeader(final byte[] imageHeaderBytes,final int headerSize){  if (headerSize < BMP_HEADER.length) {    return false;  }  return matchBytePattern(imageHeaderBytes,0,BMP_HEADER);}  }
class C{  public void invokeStatic(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKESTATIC,owner,method,false);}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes){  this(separator,quotechar,escape,strictQuotes,DEFAULT_IGNORE_LEADING_WHITESPACE);}  }
class C{  public button addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  protected byte[] engineDoFinal(){  if (first == true) {    md.update(k_ipad);  } else {    first=true;  }  try {    byte[] tmp=md.digest();    md.update(k_opad);    md.update(tmp);    md.digest(tmp,0,tmp.length);    return tmp;  } catch (  DigestException e) {    throw new ProviderException(e);  }}  }
class C{  public void initPolys(){  AffineTransform FacingRotate=new AffineTransform();  Polygon facingPoly_tmp=new Polygon();  facingPoly_tmp.addPoint(41,3);  facingPoly_tmp.addPoint(35,9);  facingPoly_tmp.addPoint(41,7);  facingPoly_tmp.addPoint(42,7);  facingPoly_tmp.addPoint(48,9);  facingPoly_tmp.addPoint(42,3);  facingPolys=new Shape[8];  for (  int dir : allDirections) {    facingPolys[dir]=FacingRotate.createTransformedShape(facingPoly_tmp);    FacingRotate.rotate(Math.toRadians(60),HEX_W / 2,HEX_H / 2);  }  Polygon movementPoly_tmp=new Polygon();  movementPoly_tmp.addPoint(47,67);  movementPoly_tmp.addPoint(48,66);  movementPoly_tmp.addPoint(42,62);  movementPoly_tmp.addPoint(41,62);  movementPoly_tmp.addPoint(35,66);  movementPoly_tmp.addPoint(36,67);  movementPoly_tmp.addPoint(47,67);  movementPoly_tmp.addPoint(45,68);  movementPoly_tmp.addPoint(38,68);  movementPoly_tmp.addPoint(38,69);  movementPoly_tmp.addPoint(45,69);  movementPoly_tmp.addPoint(45,68);  movementPoly_tmp.addPoint(45,70);  movementPoly_tmp.addPoint(38,70);  movementPoly_tmp.addPoint(38,71);  movementPoly_tmp.addPoint(45,71);  movementPoly_tmp.addPoint(45,68);  FacingRotate.setToIdentity();  movementPolys=new Shape[8];  for (  int dir : allDirections) {    movementPolys[dir]=FacingRotate.createTransformedShape(movementPoly_tmp);    FacingRotate.rotate(Math.toRadians(60),HEX_W / 2,HEX_H / 2);  }  FacingRotate.setToIdentity();  FacingRotate.translate(0,-31);  upArrow=FacingRotate.createTransformedShape(movementPoly_tmp);  FacingRotate.setToIdentity();  FacingRotate.rotate(Math.toRadians(180),HEX_W / 2,HEX_H / 2);  FacingRotate.translate(0,-31);  downArrow=FacingRotate.createTransformedShape(movementPoly_tmp);}  }
class C{  private List<String> replaceDotInMustacheKeys(final List<String> mustacheKeys){  final List<String> fixedMustacheKeys=new ArrayList<>();  for (  String mustacheKey : mustacheKeys) {    fixedMustacheKeys.add(mustacheKey.replace('.','#'));  }  return fixedMustacheKeys;}  }
class C{  protected final void fireChildrenAdded(BeanContextMembershipEvent bcme){  Object[] copy;synchronized (bcmListeners) {    copy=bcmListeners.toArray();  }  for (int i=0; i < copy.length; i++)   ((BeanContextMembershipListener)copy[i]).childrenAdded(bcme);}  }
class C{  private void removePageExcedent(WebResource wr,Audit audit){  int maxNumberOfCrawlPage=getMaxNumberOfCrawlPageFromAuditParameter(audit);  int httpStatusCode=-1;  Long nbOfContent=contentDataService.getNumberOfSSPFromWebResource(wr,httpStatusCode);  if (maxNumberOfCrawlPage == -1 || nbOfContent < maxNumberOfCrawlPage) {    return;  }  Long i=(long)maxNumberOfCrawlPage + 1;  Long fromValue=(long)maxNumberOfCrawlPage;  LOGGER.info("Deleting " + (nbOfContent - maxNumberOfCrawlPage) + " content excedent regarding user limit");  while (i.compareTo(nbOfContent) < 0) {    Collection<Long> contentIdList=contentDataService.getSSPIdsFromWebResource(wr.getId(),httpStatusCode,fromValue.intValue(),PROCESS_WINDOW);    LOGGER.info("Delete excedent content from " + i + " to "+ (i + PROCESS_WINDOW));    for (    Long contentId : contentIdList) {      Content content=contentDataService.read(contentId);      if (content instanceof SSP) {        webResourceDataService.delete(((SSP)content).getPage().getId());      }      contentDataService.delete(contentId);    }    i=i + PROCESS_WINDOW;  }}  }
class C{  protected void configureColladaRoot(ColladaRoot root){  root.setResourceResolver(this);  Position refPosition=this.model.getLocation().getPosition();  root.setPosition(refPosition);  root.setAltitudeMode(KMLUtil.convertAltitudeMode(this.model.getAltitudeMode(),WorldWind.CLAMP_TO_GROUND));  KMLOrientation orientation=this.model.getOrientation();  if (orientation != null) {    Double d=orientation.getHeading();    if (d != null)     root.setHeading(Angle.fromDegrees(d));    d=orientation.getTilt();    if (d != null)     root.setPitch(Angle.fromDegrees(-d));    d=orientation.getRoll();    if (d != null)     root.setRoll(Angle.fromDegrees(-d));  }  KMLScale scale=this.model.getScale();  if (scale != null) {    Double x=scale.getX();    Double y=scale.getY();    Double z=scale.getZ();    Vec4 modelScale=new Vec4(x != null ? x : 1.0,y != null ? y : 1.0,z != null ? z : 1.0);    root.setModelScale(modelScale);  }}  }
class C{  public ProtocolVersion(){  this.major=254;  this.minor=253;}  }
class C{  public static GDSException createWithXAErrorCode(String message,int xaErrorCode){  GDSException gdse=new GDSException(message);  gdse.setXAErrorCode(xaErrorCode);  return gdse;}  }
class C{  public SearchRequestBuilder addFieldDataField(String name){  sourceBuilder().fieldDataField(name);  return this;}  }
class C{  private byte[] encodeData() throws IOException {  String type=((_type != null) ? _type.toLowerCase() : "");  boolean shouldCompress=!COMPRESSED_FORMATS.contains(type);  type+='\0';  ByteBuffer typeBytes=ColumnImpl.encodeUncompressedText(type,JetFormat.VERSION_12.CHARSET);  int headerLen=typeBytes.remaining() + CONTENT_HEADER_SIZE;  int dataLen=_data.length;  ByteUtil.ByteStream dataStream=new ByteUtil.ByteStream(WRAPPER_HEADER_SIZE + headerLen + dataLen);  ByteBuffer bb=PageChannel.wrap(dataStream.getBytes());  bb.putInt(shouldCompress ? DATA_TYPE_COMPRESSED : DATA_TYPE_RAW);  bb.putInt(dataLen + headerLen);  dataStream.skip(WRAPPER_HEADER_SIZE);  OutputStream contentStream=dataStream;  Deflater deflater=null;  try {    if (shouldCompress) {      contentStream=new DeflaterOutputStream(contentStream,deflater=new Deflater(3));    }    byte[] tmpBytes=new byte[CONTENT_HEADER_SIZE];    PageChannel.wrap(tmpBytes).putInt(headerLen).putInt(UNKNOWN_HEADER_VAL).putInt(type.length());    contentStream.write(tmpBytes);    contentStream.write(typeBytes.array(),0,typeBytes.remaining());    contentStream.write(_data);    contentStream.close();    contentStream=null;    return dataStream.toByteArray();  }  finally {    ByteUtil.closeQuietly(contentStream);    if (deflater != null) {      deflater.end();    }  }}  }
class C{  public DViewAsymmetricKeyFields(JDialog parent,String title,DSAPrivateKey dsaPrivateKey){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  key=dsaPrivateKey;  initFields();}  }
class C{  public synchronized void removePanListener(PanListener listener){  mPanListeners.remove(listener);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public void prepReadPane(boolean onlyChanges){  if (log.isDebugEnabled()) {    log.debug("start prepReadPane with onlyChanges={}",onlyChanges);  }  justChanges=onlyChanges;  if (isCvTablePane) {    setCvListFromTable();  }  enableButtons(false);  if (justChanges == true) {    readChangesButton.setEnabled(true);    readChangesButton.setSelected(true);  } else {    readAllButton.setSelected(true);    readAllButton.setEnabled(true);  }  if (container.isBusy() == false) {    container.enableButtons(false);  }  setToRead(justChanges,true);  varListIndex=0;  cvListIterator=cvList.iterator();  indexedCvListIndex=0;}  }
class C{  String readAmPmMarker(String source,int ofs){  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=source.substring(ofs,i).toLowerCase();  String markers[]=getDateFormatSymbols().getAmPmStrings();  for (  String marker : markers) {    if (fragment.startsWith(marker)) {      return source.substring(ofs,ofs + marker.length());    }  }  for (  String marker : markers) {    if (fragment.charAt(0) == marker.charAt(0)) {      return source.substring(ofs,ofs + 1);    }  }  return null;}  }
class C{  public void connectionClosed(){  onCancelAllRealtimeData();  this.fireConnectionClosed(true);  error(0,1101,"Error Connection was closed! ");}  }
class C{  public int[] f2e(int i){  int srcIndex=srcStartInclusive + i;  if (srcIndex < 0 || srcIndex >= srcEndExclusive)   throw new ArrayIndexOutOfBoundsException();  return sentencePair.isSourceUnaligned(srcIndex) ? new int[0] : sentencePair.f2e(srcIndex);}  }
class C{  public void testDoCheckWithEmptyElements(){  LOGGER.debug("doCheckWithEmptyElements");  mockTestSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);  expectLastCall().once();  AttributePresenceChecker instance=new AttributePresenceChecker(AttributeStore.ALT_ATTR,TestSolution.PASSED,TestSolution.FAILED,ATTR_PRESENT_MSG,ATTR_ABSENT_MSG);  replay(mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockSSPHandler,mockTestSolutionHandler);}  }
class C{  public void paintSplitPaneDragDivider(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static File unzipAndSaveToTempFile(String path,String suffix){  if (WWUtil.isEmpty(path)) {    String message=Logging.getMessage("nullValue.PathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  InputStream stream=null;  try {    stream=WWIO.openStream(path);    ByteBuffer buffer=WWIO.readStreamToBuffer(stream);    File file=WWIO.saveBufferToTempFile(buffer,WWIO.getFilename(path));    buffer=WWIO.readZipEntryToBuffer(file,null);    return WWIO.saveBufferToTempFile(buffer,suffix);  } catch (  Exception e) {    e.printStackTrace();  } finally {    WWIO.closeStream(stream,path);  }  return null;}  }
class C{  public static void remap(List<MissingMapping> missingMappings){  for (  MissingMapping missingMapping : missingMappings) {    Logger.info(MARKER,"Trying to remap %s",missingMapping.resourceLocation);    for (    Predicate<MissingMapping> remappingFunction : remappingFunctions) {      if (remappingFunction.test(missingMapping)) {        break;      }    }    if (missingMapping.getAction() == FMLMissingMappingsEvent.Action.DEFAULT) {      Logger.info(MARKER,"Couldn't remap %s",missingMapping.resourceLocation);    }  }}  }
class C{  public void emitStackMap(){  int pc=curCP();  if (!needStackMap)   return;switch (stackMap) {case CLDC:    emitCLDCStackMap(pc,getLocalsSize());  break;case JSR202:emitStackMapFrame(pc,getLocalsSize());break;default :throw new AssertionError("Should have chosen a stackmap format");}if (debugCode) state.dump(pc);}  }
class C{  private MercatorUtils(){}  }
class C{  public T anonymizeIp(Boolean value){  setBoolean(ANONYMIZE_IP,value);  return (T)this;}  }
class C{  public void release(){  reset();  releaseKeepSessionIdAudioTrack();}  }
class C{  @Override public Object retrieve(String uuid,RequestContext context) throws ResponseException {  try {    logger.request(context,this,"retrieve",uuid);    Object result=retrieveInner(uuid);    logger.reply(context,this,"retrieve",result);    return result;  } catch (  Exception e) {    logger.error(context,this,"retrieve",e);    throw e;  }}  }
class C{  public static int readFully(InputStream in,byte[] buffer,int max) throws IOException {  try {    int result=0, len=Math.min(max,buffer.length);    while (len > 0) {      int l=in.read(buffer,result,len);      if (l < 0) {        break;      }      result+=l;      len-=l;    }    return result;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  public LinearMovement(Settings s){  super(s);  int coords[];  coords=s.getCsvInts(LINEAR_MOVEMENT_NS + START_LOCATION_S,2);  this.startLoc=new Coord(coords[0],coords[1]);  coords=s.getCsvInts(LINEAR_MOVEMENT_NS + END_LOCATION_S,2);  this.endLoc=new Coord(coords[0],coords[1]);  this.initLocType=s.getInt(LINEAR_MOVEMENT_NS + INIT_LOC_S);  this.targetType=s.getInt(LINEAR_MOVEMENT_NS + TARGET_S);  this.nodeCount=s.getInt(core.SimScenario.NROF_HOSTS_S);  this.lastIndex=0;}  }
class C{  protected ImportImpl(){  super();}  }
class C{  public DrawerSubmenuRecyclerAdapter(DrawerSubmenuRecyclerInterface drawerSubmenuRecyclerInterface){  this.drawerSubmenuRecyclerInterface=drawerSubmenuRecyclerInterface;}  }
class C{  @Inline @Uninterruptible public static void scanStatics(TraceLocal trace){  final Address slots=Magic.getJTOC();  final CollectorContext cc=RVMThread.getCurrentThread().getCollectorContext();  final int numberOfCollectors=cc.parallelWorkerCount();  final int numberOfReferences=Statics.getNumberOfReferenceSlots();  final int chunkSize=(numberOfReferences / numberOfCollectors) & chunkSizeMask;  final int threadOrdinal=cc.parallelWorkerOrdinal();  final int start=(threadOrdinal == 0) ? refSlotSize : threadOrdinal * chunkSize;  final int end=(threadOrdinal + 1 == numberOfCollectors) ? numberOfReferences : (threadOrdinal + 1) * chunkSize;  for (int slot=start; slot < end; slot+=refSlotSize) {    Offset slotOffset=Offset.fromIntSignExtend(slot << LOG_BYTES_IN_INT);    if (ScanThread.VALIDATE_REFS)     checkReference(slots.plus(slotOffset),slot);    trace.processRootEdge(slots.plus(slotOffset),true);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double minVal=Double.MAX_VALUE;  double maxVal=-Double.MAX_VALUE;  int progress=0;  double z=0;  int row, col;  int rows=0;  int cols=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    image.isReflectedAtEdges=true;    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    minVal=image.getMinimumValue();    maxVal=image.getMaximumValue();    double range=maxVal - minVal;    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          z=(data[col] - minVal) / range * 100;          outputFile.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2",progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    image.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int[] numVerticesSampled(Set<? extends SampledVertex> vertices){  int it=-1;  TIntIntHashMap map=new TIntIntHashMap();  for (  SampledVertex v : vertices) {    if (v.isSampled()) {      map.adjustOrPutValue(v.getIterationSampled(),1,1);      it=Math.max(it,v.getIterationSampled());    }  }  int[] list=new int[it + 1];  for (int i=0; i <= it; i++) {    list[i]=map.get(i);  }  return list;}  }
class C{  public static void create(){  try {    afkCheckInterval=Configuration.getConfiguration().getInt("afk_check_interval",2 * 60 * 60);    afkDisconnect=Configuration.getConfiguration().getInt("afk_disconnect",3 * 60 * 60);    TurnNotifier.get().notifyInSeconds(afkCheckInterval,new AfkTimeouter());  } catch (  IOException e) {    logger.error(e,e);  }}  }
class C{  public static void addPart(World world,BlockPos pos,IMultipart part){  addPart(world,pos,part,null);}  }
class C{  public static Day parseDay(String s){  try {    return new Day(Day.DATE_FORMAT.parse(s));  } catch (  ParseException e1) {    try {      return new Day(Day.DATE_FORMAT_SHORT.parse(s));    } catch (    ParseException e2) {    }  }  return null;}  }
class C{  public FileWriteStream(FileOutputStream fos,PathImpl path){  super(null,fos);  _os=fos;}  }
class C{  public void updateProgress(long latestProgress,long expectedProgress){  lastProgress=progress;  progress=latestProgress;  expected=expectedProgress;  if (connected() == false)   state=State.CONNECTED; else   state=State.UPDATE;  if (lastProgress / threshold != progress / threshold) {    progressMonitor.updateProgress(this);  }  if (expected != -1) {    if (progress >= expected && progress != 0)     close();  }}  }
class C{  @Override public boolean supportsUnionAll(){  debugCodeCall("supportsUnionAll");  return true;}  }
class C{  public void openWrite(){  TempCharBuffer ptr=_head;  _head=null;  _tail=null;  TempCharBuffer.freeAll(ptr);}  }
class C{  public synchronized void postGcCleanup(){  copiedObjects.clear();}  }
class C{  protected void drawHorizontalItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column){  Number dataValue=dataset.getValue(row,column);  if (dataValue == null) {    return;  }  double value=dataValue.doubleValue();  double base=0.0;  double lclip=getLowerClip();  double uclip=getUpperClip();  if (uclip <= 0.0) {    if (value >= uclip) {      return;    }    base=uclip;    if (value <= lclip) {      value=lclip;    }  } else   if (lclip <= 0.0) {    if (value >= uclip) {      value=uclip;    } else {      if (value <= lclip) {        value=lclip;      }    }  } else {    if (value <= lclip) {      return;    }    base=lclip;    if (value >= uclip) {      value=uclip;    }  }  RectangleEdge edge=plot.getRangeAxisEdge();  double transX1=rangeAxis.valueToJava2D(base,dataArea,edge);  double transX2=rangeAxis.valueToJava2D(value,dataArea,edge);  double rectX=Math.min(transX1,transX2);  double rectWidth=Math.abs(transX2 - transX1);  double rectY=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;  int seriesCount=getRowCount();  double shift=0.0;  double rectHeight;  double widthFactor=1.0;  double seriesBarWidth=getSeriesBarWidth(row);  if (!Double.isNaN(seriesBarWidth)) {    widthFactor=seriesBarWidth;  }  rectHeight=widthFactor * state.getBarWidth();  rectY=rectY + (1 - widthFactor) * state.getBarWidth() / 2.0;  if (seriesCount > 1) {    shift=rectHeight * 0.20 / (seriesCount - 1);  }  Rectangle2D bar=new Rectangle2D.Double(rectX,(rectY + ((seriesCount - 1 - row) * shift)),rectWidth,(rectHeight - (seriesCount - 1 - row) * shift * 2));  if (state.getElementHinting()) {    beginElementGroup(g2,dataset.getRowKey(row),dataset.getColumnKey(column));  }  Paint itemPaint=getItemPaint(row,column);  GradientPaintTransformer t=getGradientPaintTransformer();  if (t != null && itemPaint instanceof GradientPaint) {    itemPaint=t.transform((GradientPaint)itemPaint,bar);  }  g2.setPaint(itemPaint);  g2.fill(bar);  if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {    Stroke stroke=getItemOutlineStroke(row,column);    Paint paint=getItemOutlinePaint(row,column);    if (stroke != null && paint != null) {      g2.setStroke(stroke);      g2.setPaint(paint);      g2.draw(bar);    }  }  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(transX1 > transX2));  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,bar);  }}  }
class C{  public boolean loadAllFromConfig(){  boolean changed=false;  Set<ConfigManager> managersToLoad=new HashSet<ConfigManager>(managers.values());  for (  ConfigManager manager : managersToLoad) {    changed|=manager.loadFromConfig();  }  return changed;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.421 -0400",hash_original_method="D21560F654817031C7E92ABFF69D8B08",hash_generated_method="8FF32A06A9E656804B8A2BD50378219C") public static double readSwappedDouble(InputStream input) throws IOException {  return Double.longBitsToDouble(readSwappedLong(input));}  }
class C{  void pushElemTemplateElement(ElemTemplateElement elem){  if (elem.getUid() == -1)   elem.setUid(nextUid());  m_elems.push(elem);}  }
class C{  public boolean isDeprecateDelegate(){  return fDeprecateDelegate;}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  public ColorRange(ReadonlyTColor c){  this(new FloatRange(c.hue(),c.hue()),null,null,null,null,null,null);}  }
class C{  static private boolean advanceOtherSources(final Bucket[][] sortedSourceBuckets,final int[] sourceIndex,final Bucket[] currentBucket,final boolean optional){  final Bucket firstBucket=sortedSourceBuckets[0][sourceIndex[0]];  final int hashCode=firstBucket.hashCode();  currentBucket[0]=firstBucket;  for (int i=1; i < sourceIndex.length; i++) {    while (true) {      final int j=sourceIndex[i];      final Bucket otherBucket;      if (j >= sortedSourceBuckets[i].length) {        if (!optional) {          return false;        }        otherBucket=null;      } else {        otherBucket=sortedSourceBuckets[i][j];      }      if (otherBucket == null) {        assert optional;        currentBucket[i]=null;        break;      }      if (otherBucket.hashCode() < hashCode) {        sourceIndex[i]++;        continue;      }      if (otherBucket.hashCode() > hashCode) {        if (!optional) {          return false;        } else {          currentBucket[i]=null;          break;        }      }      currentBucket[i]=otherBucket;      break;    }  }  return true;}  }
class C{  public SimpleOrderedMap(){  super();}  }
class C{  @SuppressWarnings("unchecked") public final void testIsSatisfiedWhenAllConstraintsAreSatisfied(){  Constraint<Object> constraint1=new ConstraintImplementation(true);  Constraint<Object> constraint2=new ConstraintImplementation(true);  Constraint<Object>[] constraints=new Constraint[2];  constraints[0]=constraint1;  constraints[1]=constraint2;  ConjunctiveConstraint<Object> conjunctiveConstraint=new ConjunctiveConstraint<>(constraints);  assertTrue(conjunctiveConstraint.isSatisfied(new Object()));}  }
class C{  public UrlResource(URI uri) throws MalformedURLException {  Assert.notNull(uri,"URI must not be null");  this.uri=uri;  this.url=uri.toURL();  this.cleanedUrl=getCleanedUrl(this.url,uri.toString());}  }
class C{  public boolean match(TypeDeclaration node,Object other){  if (!(other instanceof TypeDeclaration)) {    return false;  }  TypeDeclaration o=(TypeDeclaration)other;  int level=node.getAST().apiLevel;  if (level == AST.JLS2_INTERNAL) {    if (node.getModifiers() != o.getModifiers()) {      return false;    }    if (!safeSubtreeMatch(node.internalGetSuperclass(),o.internalGetSuperclass())) {      return false;    }    if (!safeSubtreeListMatch(node.internalSuperInterfaces(),o.internalSuperInterfaces())) {      return false;    }  }  if (level >= AST.JLS3) {    if (!safeSubtreeListMatch(node.modifiers(),o.modifiers())) {      return false;    }    if (!safeSubtreeListMatch(node.typeParameters(),o.typeParameters())) {      return false;    }    if (!safeSubtreeMatch(node.getSuperclassType(),o.getSuperclassType())) {      return false;    }    if (!safeSubtreeListMatch(node.superInterfaceTypes(),o.superInterfaceTypes())) {      return false;    }  }  return ((node.isInterface() == o.isInterface()) && safeSubtreeMatch(node.getJavadoc(),o.getJavadoc()) && safeSubtreeMatch(node.getName(),o.getName())&& safeSubtreeListMatch(node.bodyDeclarations(),o.bodyDeclarations()));}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class<?> c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public ShadowFactory(){  this(5,0.5f,Color.BLACK);}  }
class C{  public static final Criterion sizeEquals(long value){  return new SizeCriterion(new NumericOperator(value,NumericComparator.EQUALS));}  }
class C{  private void findViews(){  this.etUsername=(EditText)findViewById(R.id.etUsername);  this.etPassword=(EditText)findViewById(R.id.etPassword);  this.chkRemember=(CheckBox)findViewById(R.id.chkRemember);  this.btnLogin=(Button)findViewById(R.id.btnLogin);}  }
class C{  public void printStackTrace(Throwable e,OutputStream os){  CharArrayWriter writer=new CharArrayWriter();  PrintWriter pw=new PrintWriter(writer);  e.printStackTrace(pw);  pw.close();  char[] array=writer.toCharArray();  CharBuffer cb=filter(array);  if (os != null) {    byte[] b=cb.toString().getBytes();    try {      os.write(b,0,b.length);    } catch (    IOException e1) {    }  } else   System.out.println(cb);}  }
class C{  public boolean isUserNameValid(String userName){  return this.userNamePattern == null || this.userNamePattern.matcher(userName).matches();}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public List<NamedEntityTask1Data> generateTask1Data(List<JCas> documentsJCas,int goldOffset,boolean generateGold,int limit) throws CrowdException {  Log LOG=LogFactory.getLog(getClass());  List<NamedEntityTask1Data> data=new ArrayList<NamedEntityTask1Data>();  int i=goldOffset;  StringBuilder textBuilder=new StringBuilder();  int docNo=0;  jcasloop:   for (  JCas documentJCas : documentsJCas) {    int offset=i;    int sentenceNo=0;    LOG.info("Generating data for document: " + docNo + "/"+ documentsJCas.size());    for (    Sentence sentence : select(documentJCas,Sentence.class)) {      if (limit != -1 && sentenceNo >= limit) {        break jcasloop;      }      textBuilder.setLength(0);      Map<Integer,Integer> charOffsetStartMapping=new HashMap<Integer,Integer>();      Map<Integer,Integer> charOffsetEndMapping=new HashMap<Integer,Integer>();      for (      Token token : selectCovered(Token.class,sentence)) {        textBuilder.append(HTML_SPAN_TOKEN_START);        textBuilder.append(String.valueOf(i));        textBuilder.append(HTML_SPAN_TOKEN_CLOSE);        textBuilder.append(escapeHtml(token.getCoveredText()));        textBuilder.append(" ");        textBuilder.append(HTML_SPAN_CLOSE);        charOffsetStartMapping.put(token.getBegin(),i);        charOffsetEndMapping.put(token.getEnd(),i);        i++;      }      String text=textBuilder.toString();      textBuilder.setLength(0);      NamedEntityTask1Data task1Data=new NamedEntityTask1Data(text);      task1Data.setOffset(offset);      task1Data.setDocument(JSON_SOURCEDOC_SHORTFORM + String.valueOf(docNo));      if (generateGold) {        List<String> goldElems=new ArrayList<String>();        List<String> goldTokens=new ArrayList<String>();        List<String> goldTypes=new ArrayList<String>();        int lastNeBegin=-1;        int lastNeEnd=-1;        for (        NamedEntity namedEntity : selectCovered(NamedEntity.class,sentence)) {          List<Token> tokens=selectCovered(documentJCas,Token.class,namedEntity.getBegin(),namedEntity.getEnd());          List<String> strTokens=new ArrayList<String>();          for (          Token t : tokens) {            strTokens.add(new String(t.getCoveredText()));          }          String strToken=concatWithSeparator(strTokens," ");          String type=namedEntity.getValue();          int neBegin=namedEntity.getBegin();          int neEnd=namedEntity.getEnd();          String strElem=buildTask1TokenJSON(textBuilder,namedEntity,charOffsetStartMapping,charOffsetEndMapping);          if (lastNeEnd != -1 && neBegin <= lastNeEnd) {            if ((neEnd - neBegin) > (lastNeEnd - lastNeBegin)) {              goldElems.remove(goldElems.size() - 1);              goldTokens.remove(goldElems.size() - 1);              goldTypes.remove(goldElems.size() - 1);              goldElems.add(strElem);              goldTokens.add(strToken);              goldTypes.add(type);              lastNeBegin=neBegin;              lastNeEnd=neEnd;            }          } else {            goldElems.add(strElem);            goldTokens.add(strToken);            goldTypes.add(type);            lastNeBegin=neBegin;            lastNeEnd=neEnd;          }        }        String strTypes=JSON_VALUE_EMPTY_ARRAY;        String strGold=JSON_VALUE_NONE_MARKER;        String strGoldReason=noGoldNER1Reason;        int difficulty=1;        if (goldElems.size() > 0) {          strGold=buildTask1GoldElem(textBuilder,goldElems);          difficulty=goldElems.size();          strTypes=buildTask1GoldElem(textBuilder,goldTypes);          strGoldReason=buildTask1GoldElemReason(textBuilder,goldTokens);        }        task1Data.set_difficulty(difficulty);        task1Data.setMarkertext_gold(strGold);        task1Data.setMarkertext_gold_reason(strGoldReason);        task1Data.setTypes(strTypes);        task1Data.setDocument(JSON_GOLDDOC_SHORTFORM + String.valueOf(docNo));        task1Data.set_golden(JSON_TRUE);      }      data.add(task1Data);      sentenceNo++;    }    docNo++;  }  if (generateGold) {    lastGoldOffset=i;  }  return data;}  }
class C{  private static int decodeWeight(long encoded){  return (int)(Integer.MAX_VALUE - encoded);}  }
class C{  int calcSelectorSpecificity(){  int spec=0;  if (attributeSelections != null) {    spec+=attributeSelections.size();  }  String nameStr=getTagName();  if (nameStr.startsWith("*")) {    nameStr=nameStr.substring(1);  }  int index=nameStr.lastIndexOf(':');  while (index != -1) {    String property=nameStr.substring(index + 1);    nameStr=nameStr.substring(0,index);    int propNum=HTMLUtils.getStringVal(property,PSEUDO_CLASSES_STRINGS,PSEUDO_CLASSES_VALS);    if (propNum != -1) {      selectorPseudoClass+=propNum;      spec++;    } else     if ((!HTMLComponent.PROCESS_HTML_MP1_ONLY) && (property.startsWith("lang("))) {      String lang=property.substring(5,property.length() - 1);      if (attributeSelections == null) {        attributeSelections=new Vector();      }      attributeSelections.addElement(new AttString(null,AttString.LANG,lang));      spec++;    }    index=nameStr.lastIndexOf(':');  }  if (((selectorPseudoClass & (PC_FOCUS | PC_ACTIVE | PC_LINK| PC_VISITED)) != 0) && (nameStr.length() == 0)) {    nameStr="a";  }  setTagName(nameStr);  index=nameStr.indexOf('#');  if (index != -1) {    spec+=100;    selectorId=nameStr.substring(index + 1);    if (index != 0) {      spec+=1;      selectorTag=nameStr.substring(0,index);    }  } else {    index=nameStr.indexOf('.');    if (index != -1) {      spec+=10;      selectorClass=nameStr.substring(index + 1);      if (index != 0) {        spec+=1;        selectorTag=nameStr.substring(0,index);      }    } else {      if (nameStr.length() > 0) {        spec+=1;        selectorTag=nameStr;      }    }  }  for (int i=0; i < getNumChildren(); i++) {    spec+=(getCSSChildAt(i)).getSelectorSpecificity();  }  return spec;}  }
class C{  final public boolean isMatch(ISPO spo){  return ((p.isVar() || IVUtility.equals(p.get(),spo.p())) && (o.isVar() || IVUtility.equals(o.get(),spo.o())));}  }
class C{  private void parseMatches(){  if (matchStrings != null) {    String sql=getParsedSQL();    List matchesList=new ArrayList();    Iterator iter=matchStrings.iterator();    while (iter.hasNext()) {      Object matchObj=iter.next();      String matchStr=(matchObj == null) ? null : matchObj.toString();      if (sql.indexOf(matchStr) > 0)       matchesList.add(matchStr);    }    matches=(String[])matchesList.toArray(new String[0]);  }}  }
class C{  static public void assertEquals(Object expected,Object actual){  assertEquals(null,expected,actual);}  }
class C{  private void updateSubscription(Subscription sub,SubscriptionStatus targetState,long modTime,BigDecimal oneTimeFee,PricingPeriod period,BigDecimal pricePerUser,BigDecimal evtPrice,BigDecimal param1Price,BigDecimal param2Price,DataService dm){  sub.setStatus(targetState);  sub.setHistoryModificationTime(Long.valueOf(modTime));  PriceModel priceModel=sub.getPriceModel();  if (priceModel != null) {    priceModel.setOneTimeFee(oneTimeFee);    priceModel.setPeriod(period);    priceModel.setPricePerPeriod(pricePerUser);    priceModel.setPricePerUserAssignment(pricePerUser);    List<PricedEvent> consideredEvents=priceModel.getConsideredEvents();    if (!consideredEvents.isEmpty()) {      consideredEvents.get(0).setEventPrice(evtPrice);    }    List<PricedParameter> params=priceModel.getSelectedParameters();    if (!params.isEmpty()) {      params.get(0).setPricePerSubscription(param1Price);      if (params.size() > 1) {        params.get(1).setPricePerSubscription(param2Price);      }    }  }  Subscriptions.setHistoryCreationTime(modTime,sub.getProduct());  dm.flush();}  }
class C{  public static DeletePlatformSession parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeletePlatformSession object=new DeletePlatformSession();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deletePlatformSession".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeletePlatformSession)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","sessionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSessionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) private byte skipTagForward(){  int initialCharIndex=charIndex;  while (charIndex < length) {    lastChar=text.charAt(charIndex++);    if (lastChar == '>') {      return Character.DIRECTIONALITY_WHITESPACE;    }    if (lastChar == '"' || lastChar == '\'') {      char quote=lastChar;      while (charIndex < length && (lastChar=text.charAt(charIndex++)) != quote) {      }    }  }  charIndex=initialCharIndex;  lastChar='<';  return Character.DIRECTIONALITY_OTHER_NEUTRALS;}  }
class C{  private void close(){  mPath.closePath();}  }
class C{  public void buildClassifier(Instances D) throws Exception {  int L=D.classIndex();  int featlength=(D.numAttributes() - L) * 2;  int numSamples=D.numInstances();  int classlength=L * 2;  if (this.order == null) {    order=new ArrayList<Integer>();    for (int j=0; j < D.numInstances(); j++) {      order.add(j);    }  }  if (numFeatures == -1) {    initARAM(featlength,classlength,roa,threshold);  } else {    if (featlength != numFeatures) {      return;    }    if (classlength != numClasses) {      return;    }  }  for (int i=0; i < D.numInstances(); i++) {    Instance instance=D.get(order.get(i));    updateClassifier(instance);  }  System.out.println("Training done, used " + numCategories + " neurons with rho ="+ roa+ ".");}  }
class C{  public Graph search(){  this.logger.log("info","Starting Fast Adjacency Search.");  sepset=new SepsetMap();  sepset.setReturnEmptyIfNotSet(sepsetsReturnEmptyIfNotFixed);  int _depth=depth;  if (_depth == -1) {    _depth=1000;  }  Map<Node,Set<Node>> adjacencies=new HashMap<>();  for (  Node node : nodes) {    adjacencies.put(node,new TreeSet<Node>());  }  for (int d=0; d <= _depth; d++) {    boolean more;    if (d == 0) {      more=searchAtDepth0(nodes,test,adjacencies);    } else {      more=searchAtDepth(nodes,test,adjacencies,d);    }    if (!more) {      break;    }  }  graph=new EdgeListGraph(nodes);  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      Node x=nodes.get(i);      Node y=nodes.get(j);      if (adjacencies.get(x).contains(y)) {        graph.addUndirectedEdge(x,y);      }    }  }  this.logger.log("info","Finishing Fast Adjacency Search.");  return graph;}  }
class C{  public synchronized boolean stateEquals(MersenneTwister other){  if (other == this)   return true;  if (other == null)   return false;synchronized (other) {    if (mti != other.mti)     return false;    for (int x=0; x < mag01.length; x++)     if (mag01[x] != other.mag01[x])     return false;    for (int x=0; x < mt.length; x++)     if (mt[x] != other.mt[x])     return false;    return true;  }}  }
class C{  static void removeGlobalMetadataForFailedNode(Node failedNode,String regionIdentifier,GemFireCacheImpl cache,final boolean lock){  Region root=PartitionedRegionHelper.getPRRoot(cache,false);  if (root == null) {    return;  }  PartitionRegionConfig prConfig=(PartitionRegionConfig)root.get(regionIdentifier);  if (null == prConfig || !prConfig.containsNode(failedNode)) {    return;  }  final PartitionedRegion.RegionLock rl=PartitionedRegion.getRegionLock(regionIdentifier,cache);  try {    if (lock) {      rl.lock();    }    prConfig=(PartitionRegionConfig)root.get(regionIdentifier);    if (prConfig != null && prConfig.containsNode(failedNode)) {      if (logger.isDebugEnabled()) {        logger.debug("Cleaning up config for pr {} node {}",regionIdentifier,failedNode);      }      if ((prConfig.getNumberOfNodes() - 1) <= 0) {        if (logger.isDebugEnabled()) {          logger.debug("No nodes left but failed node {} destroying entry {} nodes {}",failedNode,regionIdentifier,prConfig.getNodes());        }        try {          root.destroy(regionIdentifier);        } catch (        EntryNotFoundException e) {          logger.warn(LocalizedMessage.create(LocalizedStrings.PartitionedRegionHelper_GOT_ENTRYNOTFOUNDEXCEPTION_IN_DESTROY_OP_FOR_ALLPRREGION_KEY_0,regionIdentifier),e);        }      } else {        prConfig.removeNode(failedNode);        if (prConfig.getNumberOfNodes() == 0) {          root.destroy(regionIdentifier);        } else {          root.put(regionIdentifier,prConfig);        }      }    }  }  finally {    if (lock) {      rl.unlock();    }  }}  }
class C{  public static final boolean isComposedMember(TMember member){  return member.eContainer() instanceof ComposedTypeRef && member.eContainingFeature() == TypeRefsPackage.eINSTANCE.getComposedTypeRef_CachedComposedMembers();}  }
class C{  private List<Mutation> mutations(){  return (List<Mutation>)storeSes.properties().get(TRANSACTION_BUFFER);}  }
class C{  public static boolean checkProjectName(String name){  return PROJECT_NAME.test(name);}  }
class C{  @Override public void filter(ClientRequestContext requestContext) throws IOException {  HttpClientRequest httpClientRequest=new TraceableHttpClientRequest(requestContext);  ClientRequestAdapter adapter=new HttpClientRequestAdapter(httpClientRequest,new DefaultSpanNameProvider());  requestInterceptor.handle(adapter);}  }
class C{  public static void selectReveal(Object element,String viewId){  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();  IViewPart view=page.findView(viewId);  if (view instanceof ISetSelectionTarget) {    ((ISetSelectionTarget)view).selectReveal(new StructuredSelection(element));  }}  }
class C{  public void showAbout(){  view.showDialog();  view.setRevision(buildInfo.revision());  view.setVersion(buildInfo.version());  view.setTime(buildInfo.buildTime());}  }
class C{  public static StextFactory init(){  try {    StextFactory theStextFactory=(StextFactory)EPackage.Registry.INSTANCE.getEFactory(StextPackage.eNS_URI);    if (theStextFactory != null) {      return theStextFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new StextFactoryImpl();}  }
class C{  private void processHheaTable(Font font){  HheaTable hhea=font.getHheaTable();  if (hhea != null) {    ascent=(short)Math.rint(hhea.getAscender() * emScale * (useTwips ? SwfConstants.TWIPS_PER_PIXEL : 1));    descent=(short)Math.rint(hhea.getDescender() * emScale * (useTwips ? SwfConstants.TWIPS_PER_PIXEL : 1));    lineGap=(short)Math.rint(hhea.getLineGap() * emScale * (useTwips ? SwfConstants.TWIPS_PER_PIXEL : 1));  } else {    if (Trace.font)     Trace.trace("Font " + fontFamily + " did not have an HHEA Table.");  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.POSITION___ASSOCIATION_POSITION_1:    getAssociationPosition_1().clear();  return;case UmplePackage.POSITION___ELEMENT_POSITION_1:getElementPosition_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static int length(final long x){  return x == 0 ? 1 : mostSignificantBit(x) + 1;}  }
class C{  public void addEvent(final int tid,final Module module,final Address address,final TraceEventType type){  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  trace.addEvent(new com.google.security.zynamics.binnavi.debug.models.trace.TraceEvent(tid,new BreakpointAddress(module == null ? null : module.getNative(),new UnrelocatedAddress(new CAddress(address.toLong()))),type.getNative(),new ArrayList<com.google.security.zynamics.binnavi.debug.models.trace.TraceRegister>()));}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  Object val=evt.getNewValue();  if ("status".equals(evt.getPropertyName())) {    log.debug("Com status:" + val.toString());    if (val != null)     lblStatus.setText(val.toString());    lblStatus.setBackground(KLHandlerGeneric.statColor[((KLHandlerGeneric.ProtStatus)val).ordinal()]);    if (prt.getService() != Kw1281Prot.SVC_FINISHED) {      if (KLHandlerGeneric.ProtStatus.ERROR.equals(val))       prt.setService(Kw1281Prot.SVC_FINISHED);      if (KLHandlerGeneric.ProtStatus.TIMEOUT.equals(val))       connectEcu(null);    }  } else   if ("baud".equals(evt.getPropertyName())) {    if (val != null)     lblBaud.setText(val.toString());  } else   if ("preset".equals(evt.getPropertyName())) {    if (evt.getOldValue() == null || !evt.getNewValue().equals(evt.getOldValue())) {      updateGroupSelector();    }  }}  }
class C{  public static IntIterator rows(Table t,Predicate p){  IntIterator iter=null;  iter=getOptimizedIterator(t,p);  if (iter == null) {    iter=new FilterRowIterator(t.rows(),t,p);  }  return iter;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  IpInfoDao.createTable(db,ifNotExists);  PlaceDao.createTable(db,ifNotExists);}  }
class C{  public BST(E[] objects){  for (int i=0; i < objects.length; i++)   insert(objects[i]);}  }
class C{  @Override public void close() throws IOException {  iis.close();}  }
class C{  public boolean hasCreateTargetPermission(){  return hasTargetReadPermission() && permissionService.hasPermission(SpPermission.CREATE_TARGET);}  }
class C{  public FileReaderSource(File file,CompilerConfiguration configuration){  super(configuration);  this.file=file;}  }
class C{  public void generateOozieWorkflows(String outputBase,List<Workflow> workflows,boolean generateGraphviz,String graphvizFormat) throws IOException, ParserConfigurationException, TransformerException {  File outputBaseFile=new File(outputBase);  FileUtils.forceMkdir(outputBaseFile);  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  TransformerFactory transformerFactory=TransformerFactory.newInstance();  Transformer transformer=transformerFactory.newTransformer();  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");  Date currentDate=new Date();  String currentDateString=DATE_FORMAT.format(currentDate);  for (  Workflow workflow : workflows) {    String outputDir=outputBase + "/" + workflow.getName();    File outputDirFile=new File(outputDir);    FileUtils.forceMkdir(outputDirFile);    DirectedAcyclicGraph<Action,DefaultEdge> workflowGraph=null;    try {      workflowGraph=WorkflowGraphBuilder.buildWorkflowGraph(workflow,config,outputDir,generateGraphviz,graphvizFormat);    } catch (    WorkflowGraphException w) {      LOG.error("Unable to generate workflow",w);      System.exit(1);    }    if (generateGraphviz) {      GraphvizGenerator.generateGraphviz(workflowGraph,outputDir + "/" + workflow.getName()+ ".dot",graphvizFormat);    }    Document xmlDoc=builder.newDocument();    Directives directives=new Directives();    createRootElement(workflow.getName(),directives);    Action kill=getActionByType(workflowGraph,"kill");    Action end=getActionByType(workflowGraph,"end");    Action start=getActionByType(workflowGraph,"start");    Action errorHandler=workflow.getErrorHandler();    Action finalTransition=kill == null ? end : kill;    Action errorTransition=errorHandler == null ? (kill == null ? end : kill) : errorHandler;    DepthFirstIterator<Action,DefaultEdge> iterator=new DepthFirstIterator<>(workflowGraph,start);    while (iterator.hasNext()) {      Action a=iterator.next();      Action transition=getTransition(workflowGraph,a);switch (a.getType()) {case "start":        if (transition == null) {          throw new RuntimeException("No transition found for start action");        }      directives.add("start").attr("to",transition.getName()).up();    break;case "end":  break;case "fork":directives.add("fork").attr("name",a.getName());for (DefaultEdge edge : workflowGraph.outgoingEdgesOf(a)) {Action target=workflowGraph.getEdgeTarget(edge);directives.add("path").attr("start",target.getName()).up();}directives.up();break;case "join":if (transition == null) {throw new RuntimeException(String.format("No transition found for join action %s",a.getName()));}directives.add("join").attr("name",a.getName()).attr("to",transition.getName()).up();break;default :createActionElement(a,workflowGraph,transition,a.equals(errorHandler) ? finalTransition : errorTransition,directives);directives.up();break;}}if (kill != null) {directives.add("kill").attr("name",kill.getName()).add("message").set(kill.getNamedArgs().get("message")).up().up();}if (end != null) {directives.add("end").attr("name",end.getName()).up();}try {new Xembler(directives).apply(xmlDoc);} catch (ImpossibleModificationException e) {throw new RuntimeException(e);}writeDocument(outputDirFile,xmlDoc,transformer,workflow.getName(),currentDateString);}}  }
class C{  private VisorAckJob(String arg,boolean debug){  super(arg,debug);}  }
class C{  private int[] generateUnreadDataFieldIndexes(){  PdxType blobType=this.pdxReader.getPdxType();  List<Integer> unreadFields=blobType.getUnreadFieldIndexes(this.readFields);  int[] unreadFieldIndexes=new int[unreadFields.size()];  if (!unreadFields.isEmpty()) {    int i=0;    for (    int fieldIndex : unreadFields) {      unreadFieldIndexes[i]=fieldIndex;      i++;    }  }  return unreadFieldIndexes;}  }
class C{  public boolean diskCheckSync(final CacheKey key){  if (containsSync(key)) {    return true;  }  return checkInStagingAreaAndFileCache(key);}  }
class C{  LocalTagEntryBatch(ByteProvider byteProvider) throws IOException {  this.header=new CompoundDataTypes.MXFCollections.Header(byteProvider);  if (this.header.getSizeOfElement() != LocalTagEntryBatch.LOCAL_TAG_ENTRY_SIZE) {    throw new MXFException(String.format("Element size = %d in LocalTagEntryBatch header is different from expected size = %d",this.header.getSizeOfElement(),LocalTagEntryBatch.LOCAL_TAG_ENTRY_SIZE));  }  this.localTagToUID=new HashMap<>();  for (long i=0; i < this.header.getNumberOfElements(); i++) {    int localTag=MXFPropertyPopulator.getUnsignedShortAsInt(byteProvider.getBytes(2),KLVPacket.BYTE_ORDER);    if (localTag == 0) {      throw new MXFException(String.format("localTag = 0x%04x(%d) is not permitted",localTag,localTag));    }    if (localTagToUID.get(localTag) != null) {      throw new MXFException(String.format("localTag = 0x%04x(%d) has already been observed",localTag,localTag));    }    MXFUID mxfUL=new MXFUID(byteProvider.getBytes(16));    localTagToUID.put(localTag,mxfUL);  }}  }
class C{  public void configureManagers(){}  }
class C{  private static Project createInternalProject(){  Project project=new Project();  project.setId(FileShare.INTERNAL_OBJECT_PROJECT_URN);  return project;}  }
class C{  private static Vector3[] createVertexVectors(Mesh mesh,short[] indices){  FloatBuffer verticesBuffer=mesh.getVerticesBuffer();  int positionOffset=mesh.getVertexAttributes().findByUsage(VertexAttributes.Usage.Position).offset / 4;  int vertexSize=mesh.getVertexSize() / 4;  Vector3[] vertexVectors=new Vector3[mesh.getNumIndices()];  for (int i=0; i < indices.length; i++) {    short index=indices[i];    int a=index * vertexSize + positionOffset;    float x=verticesBuffer.get(a++);    float y=verticesBuffer.get(a++);    float z=verticesBuffer.get(a);    vertexVectors[index]=new Vector3(x,y,z);  }  return vertexVectors;}  }
class C{  public static CGPoint ccpCompMult(CGPoint a,CGPoint b){  return ccp(a.x * b.x,a.y * b.y);}  }
class C{  public boolean requiresMREnumeration(){  boolean ret=(_hop.getDataType() == DataType.MATRIX);  for (  Hop c : _hop.getInput())   ret|=(c.getDataType() == DataType.MATRIX);  if (_hop instanceof UnaryOp && ((UnaryOp)_hop).getOp() == OpOp1.CAST_AS_SCALAR)   ret=false;  if (_hop instanceof DataGenOp && ((DataGenOp)_hop).getOp() == DataGenMethod.SINIT)   ret=false;  if (_hop instanceof UnaryOp && ((UnaryOp)_hop).getOp() == OpOp1.NROW)   ret=false;  if (_hop instanceof UnaryOp && ((UnaryOp)_hop).getOp() == OpOp1.NCOL)   ret=false;  return ret;}  }
class C{  public boolean hasSystemGroup(){  return hasExtension(SystemGroup.class);}  }
class C{  private static String subProcess(int[] n1,int[] n2){  if (n1.length < n2.length) {    return "+" + toString(n1);  }  int off=0;  int length=n2.length;  while (compareTo(n2,0,length,n1,off) > 0) {    n2=expand(n2);    length=n2.length;    if (length > n1.length) {      return "+" + toString(n1);    }  }  int[] innerSum=new int[n1.length + 1];  int[] result=new int[length];  int start;  if (n2[0] == 0) {    start=9;  } else {    start=n1[0] / n2[0];  }  multiply(n2,start,innerSum);  innerSum=reduce(innerSum);  if (innerSum.length < n2.length) {    innerSum=expand(innerSum);  } else {    while (n2.length < innerSum.length) {      start--;      innerSum=new int[n1.length + 1];      multiply(n2,start,innerSum);      innerSum=reduce(innerSum);    }  }  boolean subtractDown=compareTo(innerSum,n1,innerSum.length) > 0;  while (true) {    if (subtractDown) {      start--;      subtract(innerSum,n2,result,subProcessSign);      assign(innerSum,result);      subtractDown=compareTo(innerSum,n1,innerSum.length) > 0;    } else {      int[] newTop=new int[innerSum.length];      extract(newTop,0,n1,0,innerSum.length);      result=new int[innerSum.length];      subtract(newTop,innerSum,result,subProcessSign);      extract(n1,0,result,0,result.length);      int[] normalized_n1=reduce(n1);      int[] normalized_n2=reduce(n2);      String s=start + subProcess(normalized_n1,normalized_n2);      return s;    }  }}  }
class C{  public EventTimeInputBuilder<T> repeatAll(int times){  repeatAll(new Instant(),times);  return this;}  }
class C{  private void kNNsChanged(KNNChangeEvent e1,KNNChangeEvent e2){  if (!e1.getType().equals(e2.getType())) {    throw new UnsupportedOperationException("Event types do not fit: " + e1.getType() + " != "+ e2.getType());  }  if (!e1.getObjects().equals(e2.getObjects())) {    throw new UnsupportedOperationException("Objects do not fit: " + e1.getObjects() + " != "+ e2.getObjects());  }  if (e1.getType().equals(KNNChangeEvent.Type.DELETE)) {    kNNsRemoved(e1.getObjects(),e1.getUpdates(),e2.getUpdates(),lofResult);  } else   if (e1.getType().equals(KNNChangeEvent.Type.INSERT)) {    kNNsInserted(e1.getObjects(),e1.getUpdates(),e2.getUpdates(),lofResult);  } else {    throw new UnsupportedOperationException("Unsupported event type: " + e1.getType());  }}  }
class C{  public static boolean containsExecutablePermission(Set<PosixFilePermission> permissions){  return permissions.contains(PosixFilePermission.OWNER_EXECUTE) && permissions.contains(PosixFilePermission.GROUP_EXECUTE) && permissions.contains(PosixFilePermission.OTHERS_EXECUTE);}  }
class C{  public Number product(){  return this.bigIntegerProduct();}  }
class C{  public static ReilGraph createReilGraph(final com.google.security.zynamics.reil.ReilGraph graph){  Preconditions.checkNotNull(graph,"IE01049: Graph argument can not be null");  final List<ReilBlock> blocks=new ArrayList<ReilBlock>();  final List<ReilEdge> edges=new ArrayList<ReilEdge>();  final HashMap<com.google.security.zynamics.reil.ReilBlock,ReilBlock> blockMap=new HashMap<com.google.security.zynamics.reil.ReilBlock,ReilBlock>();  for (  final com.google.security.zynamics.reil.ReilBlock block : graph.getNodes()) {    final ReilBlock newBlock=new ReilBlock(block);    blockMap.put(block,newBlock);    blocks.add(newBlock);  }  for (  final com.google.security.zynamics.reil.ReilEdge edge : graph.getEdges()) {    final ReilBlock source=blockMap.get(edge.getSource());    final ReilBlock target=blockMap.get(edge.getTarget());    edges.add(new ReilEdge(source,target,EdgeType.convert(edge.getType())));  }  return new ReilGraph(blocks,edges);}  }
class C{  public ImageServer(String prefix,Properties props,Map<String,Layer> instantiatedLayers){  setProperties(prefix,props,instantiatedLayers);}  }
class C{  public boolean hasReturn5y(){  return getReturn5y() != null;}  }
class C{  public boolean isMany(){  return many;}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  public void ready(){}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  flushPending();  if (target.equals(Result.PI_DISABLE_OUTPUT_ESCAPING)) {    startNonEscaping();  } else   if (target.equals(Result.PI_ENABLE_OUTPUT_ESCAPING)) {    endNonEscaping();  } else {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      } else       if (m_needToCallStartDocument)       startDocumentInternal();      if (shouldIndent())       indent();      final java.io.Writer writer=m_writer;      writer.write("<?");      writer.write(target);      if (data.length() > 0 && !Character.isSpaceChar(data.charAt(0)))       writer.write(' ');      int indexOfQLT=data.indexOf("?>");      if (indexOfQLT >= 0) {        if (indexOfQLT > 0) {          writer.write(data.substring(0,indexOfQLT));        }        writer.write("? >");        if ((indexOfQLT + 2) < data.length()) {          writer.write(data.substring(indexOfQLT + 2));        }      } else {        writer.write(data);      }      writer.write('?');      writer.write('>');      m_startNewLine=true;    } catch (    IOException e) {      throw new SAXException(e);    }  }  if (m_tracer != null)   super.fireEscapingEvent(target,data);}  }
class C{  private int findPLV(int M_PriceList_ID){  Timestamp priceDate=null;  String dateStr=Env.getContext(Env.getCtx(),p_WindowNo,"DateOrdered");  if (dateStr != null && dateStr.length() > 0)   priceDate=Env.getContextAsDate(Env.getCtx(),p_WindowNo,"DateOrdered"); else {    dateStr=Env.getContext(Env.getCtx(),p_WindowNo,"DateInvoiced");    if (dateStr != null && dateStr.length() > 0)     priceDate=Env.getContextAsDate(Env.getCtx(),p_WindowNo,"DateInvoiced");  }  if (priceDate == null)   priceDate=new Timestamp(System.currentTimeMillis());  log.config("M_PriceList_ID=" + M_PriceList_ID + " - "+ priceDate);  int retValue=0;  String sql="SELECT plv.M_PriceList_Version_ID, plv.ValidFrom " + "FROM M_PriceList pl, M_PriceList_Version plv " + "WHERE pl.M_PriceList_ID=plv.M_PriceList_ID"+ " AND plv.IsActive='Y'"+ " AND pl.M_PriceList_ID=? "+ "ORDER BY plv.ValidFrom DESC";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,M_PriceList_ID);    rs=pstmt.executeQuery();    while (rs.next() && retValue == 0) {      Timestamp plDate=rs.getTimestamp(2);      if (!priceDate.before(plDate))       retValue=rs.getInt(1);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return retValue;}  }
class C{  public static long Extend(long fp,char c){  long[] mod=ByteModTable_7;  fp=((fp >>> 8) ^ (mod[(((int)c) ^ ((int)fp)) & 0xFF]));  return fp;}  }
class C{  private void takePicture(){  lockFocus();}  }
class C{  Impl(File directory) throws IOException {  boolean exists=directory.exists();  if (exists && !directory.isDirectory()) {    throw new IOException(directory + " exists but is not a directory.");  }  if (exists) {    initialFiles=directory.list();    if (initialFiles == null) {      throw new IOException(directory + " exists but cannot list contents.");    }    Arrays.sort(initialFiles);    size=initialFiles.length;  } else {    if (!directory.mkdirs()) {      throw new IOException("Creation of " + directory + " directory failed.");    }    size=0;  }  this.directory=directory;}  }
class C{  private void validateJournalSizes(VirtualPool virtualPool,BlockVirtualPoolUpdateParam updateParam,DbClient dbClient){  Map<String,Object> protection=getProtectionUpdateParameters(updateParam);  Map<String,Object> enabledProtections=filterEntries(protection,and(paramEntryValueNotNull(),paramEntryValueNotNone()));  _logger.info("Requested VirtualPool protections: {}",enabledProtections);  if (enabledProtections.get(PROTECTION_RP) != null) {    VirtualPoolProtectionRPChanges rp=(VirtualPoolProtectionRPChanges)enabledProtections.get(PROTECTION_RP);    if (rp != null) {      if (VirtualPool.vPoolSpecifiesProtection(virtualPool) || (rp.getAdd() != null && !rp.getAdd().isEmpty())) {        validateSourcePolicy(rp.getSourcePolicy());        if (rp.getAdd() != null) {          validateProtectionCopies(rp.getAdd(),dbClient);        }      } else       if (rp.getSourcePolicy() != null && rp.getSourcePolicy().getJournalSize() != null) {        throwServicePolicyNoProtectionException();      }    }  }}  }
class C{  private HashSet<String> scanMailForDomains(MimePart part,SMTPSession session) throws MessagingException, IOException {  HashSet<String> domains=new HashSet<String>();  session.getLogger().debug("mime type is: \"" + part.getContentType() + "\"");  if (part.isMimeType("text/plain") || part.isMimeType("text/html")) {    session.getLogger().debug("scanning: \"" + part.getContent().toString() + "\"");    HashSet<String> newDom=URIScanner.scanContentForDomains(domains,part.getContent().toString());    if (newDom != null && newDom.size() > 0) {      domains.addAll(newDom);    }  } else   if (part.isMimeType("multipart/*")) {    MimeMultipart multipart=(MimeMultipart)part.getContent();    int count=multipart.getCount();    session.getLogger().debug("multipart count is: " + count);    for (int index=0; index < count; index++) {      session.getLogger().debug("recursing index: " + index);      MimeBodyPart mimeBodyPart=(MimeBodyPart)multipart.getBodyPart(index);      HashSet<String> newDomains=scanMailForDomains(mimeBodyPart,session);      if (newDomains != null && newDomains.size() > 0) {        domains.addAll(newDomains);      }    }  }  return domains;}  }
class C{  public void updateHealthMap(Map<String,Boolean> shardNamesToChanged){  ImmutableMap.Builder<String,ShardState> builder=new ImmutableMap.Builder<String,ShardState>();  for (  String shard : shardNamesToChanged.keySet()) {    if (!shardNamesToChanged.get(shard)) {      builder.put(shard,shardHealthMapRef.get().get(shard));    } else {      builder.put(shard,new ShardState(windowSize));    }  }  shardHealthMapRef.set(builder.build());}  }
class C{  public static boolean testFileExists(String name){  boolean status;  if ((testSaveLocationExists()) && (!name.equals(""))) {    File path=Environment.getExternalStorageDirectory();    File newPath=constructFilePaths(path.toString(),name);    status=newPath.exists();  } else {    status=false;  }  return status;}  }
class C{  private Type enterClass(String s){  return reader.enterClass(names.fromString(s)).type;}  }
class C{  public int limit(){  return limit;}  }
class C{  protected void preorder(TreeNode<E> root){  if (root == null)   return;  System.out.print(root.element + " ");  preorder(root.left);  preorder(root.right);}  }
class C{  public BackwardsLineReader(InputStream is,String encoding){  this.bis=new BufferedInputStream(is,8192);  this.encoding=encoding;}  }
class C{  public void registerSkippedElements(String URI,Set<String> skippedElements){  init();  if (skippedElementsByURI == null) {    skippedElementsByURI=new HashMap<String,Set<String>>(1);    skippedElementsByURI.put(URI,skippedElements);  } else {    if (skippedElementsByURI.containsKey(URI)) {      Set<String> value=skippedElementsByURI.get(URI);      value.addAll(skippedElements);      skippedElementsByURI.put(URI,value);    } else {      skippedElementsByURI.put(URI,skippedElements);    }  }}  }
class C{  public void arrayStore(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IASTORE));}  }
class C{  protected Expression lte(int opPos) throws TransformerException {  return compileOperation(new Lte(),opPos);}  }
class C{  public KeyValueTableView(ObservableList<Pair<K,V>> items,ObservableList<K> skipKeys,Double keyMaxWidth,Double valueMaxWidth){  super(items);  initTable();  initCells();  this.allItems=items;  this.skippedKeys=skipKeys;  setKeyMaxWidth(keyMaxWidth == null ? Double.MIN_VALUE : keyMaxWidth);  setValueMaxWidth(valueMaxWidth == null ? Double.MIN_VALUE : valueMaxWidth);  filterItems();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 160) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public BufferedChecksumIndexInput(IndexInput main){  super("BufferedChecksumIndexInput(" + main + ")");  this.main=main;  this.digest=new BufferedChecksum(new CRC32());}  }
class C{  private void forwardPass(){  chart[0][0]=new ForwardSearchState(0,0,0,null);  for (int srcIndex=0; srcIndex < params.src.length() + 1; srcIndex++) {    if (params.src.length() > 10000 && srcIndex != 0 && srcIndex % 500 == 0) {      System.out.println("Edit distance working...on srcIndex " + srcIndex + " / "+ params.src.length());    }    for (int trgIndex=0; trgIndex < params.trg.length() + 1; trgIndex++) {      ForwardSearchState prevState=chart[srcIndex][trgIndex];      if (prevState == null) {        continue;      }      for (int opIndex=0; opIndex < Operation.values().length; opIndex++) {        Operation currOp=Operation.values()[opIndex];        ForwardSearchState result=apply(currOp,prevState);        if (result != null) {          ForwardSearchState currEntry=chart[result.srcIndex][result.trgIndex];          if (currEntry == null || result.viterbiBackwardCost < currEntry.viterbiBackwardCost) {            chart[result.srcIndex][result.trgIndex]=result;          }        }      }    }  }}  }
class C{  @Override public void apply(HGNode node,int nodeIndex){  features.add(computeTransitionFeatures(featureFunctions,node.bestHyperedge,node.i,node.j,sourceSentence));}  }
class C{  protected final void resolveClass(Class<?> clazz){}  }
class C{  public static boolean hasLollipop(){  return Build.VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP;}  }
class C{  private boolean shouldContinue(long timeout){  if (timeout <= 0) {    return true;  }  return timeout > System.currentTimeMillis();}  }
class C{  public PMCCTest(String name){  super(name);}  }
class C{  public void insertContacts(){  mCommands[ContactsCommandType.INSERT_COMMAND.ordinal()].execute(mContacts.iterator());}  }
class C{  public void clearStackChangedListeners(){  listeners.clear();}  }
class C{  private boolean findFirstSorted(RowCursor minCursor,RowCursor resultCursor,boolean isMatch){  int rowOffset=_rowSortHead;  int rowLength=resultCursor.length();  int cmp=resultCursor.compareKey(_keyMinSort,0);  if (cmp < 0 || cmp == 0 && isMatch) {    return isMatch;  }  int minCmp=minCursor.compareKey(_keyMaxSort,0);  if (minCmp > 0) {    return isMatch;  }  minCmp=minCursor.compareKey(_keyMinSort,0);  if (minCmp <= 0) {    fillMatch(BLOCK_SIZE - rowLength,resultCursor);    return true;  }  int length=(BLOCK_SIZE - rowOffset) / rowLength - 1;  while (length > 0) {    int pivot=length / 2;    int pivotOffset=rowOffset + pivot * rowLength;    minCmp=minCursor.compareKeyRow(_buffer,pivotOffset);    if (minCmp == 0) {      return fillMatch(pivotOffset,resultCursor);    } else     if (minCmp > 0) {      length=pivot;      continue;    }    cmp=resultCursor.compareKeyRow(_buffer,pivotOffset);    if (cmp > 0) {      isMatch=true;      fillMatch(pivotOffset,resultCursor);    }    rowOffset=pivotOffset + rowLength;    length=length - pivot - 1;  }  return isMatch;}  }
class C{  public int addLinePlot(String name,Color color,double[][] XY){  return ((Plot2DCanvas)plotCanvas).addLinePlot(name,color,XY);}  }
class C{  protected void deactivateSnapshot(StorageSystem storage,BlockSnapshot snapshot,CIMObjectPath syncObjectPath) throws Exception {  CIMInstance syncObject=_helper.getInstance(storage,syncObjectPath,false,false,new String[]{SmisConstants.EMC_COPY_STATE_DESC});  String value=syncObject.getProperty(SmisConstants.EMC_COPY_STATE_DESC).getValue().toString();  _log.info(String.format("Attempting to deactivate snapshot %s, EMCCopyStateDesc = %s",syncObjectPath.toString(),value));  if (value.equalsIgnoreCase(SmisConstants.ACTIVE)) {    CIMArgument[] outArgs=new CIMArgument[5];    _helper.callModifyReplica(storage,_helper.getDeactivateSnapshotSynchronousInputArguments(syncObjectPath),outArgs);    CIMProperty<CIMObjectPath> settingsData=(CIMProperty<CIMObjectPath>)_cimPath.getCimObjectPathFromOutputArgs(outArgs,SmisConstants.CP_SETTINGS_STATE).getKey(SmisConstants.CP_SETTING_DATA);    String settingsInstance=settingsData.getValue().getKey(SmisConstants.CP_INSTANCE_ID).getValue().toString();    snapshot.setSettingsInstance(settingsInstance);    _dbClient.persistObject(snapshot);  }}  }
class C{  public void paintToolTipBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void ignorableWhitespace(char[] ch,int start,int length) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.ignorableWhitespace(ch,start,length);}  }
class C{  public void updateDomain(Domain domain){  xmlFiles.clear();  super.removeAllElements();  if (!domain.isEmpty()) {    File srcFile=domain.getSourceFile();    xmlFiles.put(srcFile.getName(),srcFile);    for (    File importedFile : domain.getImportedFiles()) {      xmlFiles.put(importedFile.getName(),importedFile);    }    xmlFiles.keySet().stream().forEach(null);  }}  }
class C{  public static int startsWithOneIgnoreCase(String src,String[] dest){  for (int i=0; i < dest.length; i++) {    String m=dest[i];    if (m == null) {      continue;    }    if (startsWithIgnoreCase(src,m)) {      return i;    }  }  return -1;}  }
class C{  public SetCarrierSlaCartCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  public SnapshotShardFailure(@Nullable String nodeId,String index,int shardId,String reason){  this.nodeId=nodeId;  this.index=index;  this.shardId=shardId;  this.reason=reason;  status=RestStatus.INTERNAL_SERVER_ERROR;}  }
class C{  public int rankByHashrate(User user){  List<UserStat> rankedByHashrate=rankByHashrate();  int rank=1;  for (  UserStat stat : rankedByHashrate) {    if (stat.user.equals(user)) {      return rank;    }    rank++;  }  throw new DogePoolException("Cannot rank " + user.nickname + " by hashrate",Error.RANK_HASH,HttpStatus.NO_CONTENT);}  }
class C{  public ParameterDatabaseEvent(Object source,Parameter parameter,String value,int type){  super(source);  this.parameter=parameter;  this.value=value;  this.type=type;}  }
class C{  private String detectLanguage(WebPage page,DocumentFragment doc){  String lang=null;  ByteBuffer blang=getLanguageFromMetadata(page.getMetadata());  if (blang == null) {    LanguageParser parser=new LanguageParser(doc);    lang=parser.getLanguage();  } else   lang=Bytes.toString(blang);  if (lang != null) {    return lang;  }  CharSequence ulang=page.getHeaders().get(new Utf8(Response.CONTENT_LANGUAGE));  if (ulang != null) {    lang=ulang.toString();  }  return lang;}  }
class C{  @Override public boolean checkDistance(final Entity other,final double distance){  final SlotOwner parent=item.getContainerBaseOwner();  if (parent instanceof Entity) {    final Entity checker=(Entity)item.getContainerBaseOwner();    if (other.nextTo(checker,distance)) {      return true;    } else {      logger.debug("distance check failed " + other.squaredDistance(checker));      player.sendPrivateText("You cannot reach that far.");    }  }  return false;}  }
class C{  public void removeDocument(int docId) throws Exception {  m_documents.removeNode(docId);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node refChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node insertedNode;  doc=(Document)load("staff",true);  newChild=doc.createElement("newChild");  refChild=doc.createElement("refChild");  elementList=doc.getElementsByTagName("employee");  elementNode=elementList.item(1);{    boolean success=false;    try {      insertedNode=elementNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  protected void extendElement(Element e){  SerialNode node=(SerialNode)SerialTrafficController.instance().getNode(0);  int index=1;  while (node != null) {    Element n=new Element("node");    n.setAttribute("name","" + node.getNodeAddress());    e.addContent(n);    n.addContent(makeParameter("nodetype","" + node.getNodeType()));    node=(SerialNode)SerialTrafficController.instance().getNode(index);    index++;  }}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Reference(authors="M. A. Stephens",title="EDF Statistics for Goodness of Fit and Some Comparisons",booktitle="Journal of the American Statistical Association, Volume 69, Issue 347",url="http://dx.doi.org/10.1080/01621459.1974.10480196") public static double removeBiasNormalDistribution(double A2,int n){  return A2 * (1 + 4. / n - 25. / (n * n));}  }
class C{  public static String gotoTableToString(OFInstructionGotoTable inst,Logger log){  return Short.toString(inst.getTableId().getValue());}  }
class C{  public void put(String url,String response) throws IOException {  final File transcriptDir=getTranscriptDir();  if (transcriptDir == null)   throw new IOException("Transcript directory not found");  String hash=Sha1Util.SHA1(url);  File file=new File(transcriptDir,hash);  FileOutputStream out=new FileOutputStream(file);  out.write(response.getBytes());  out.close();}  }
class C{  static void testLongFloorDiv(long x,long y,Object expected){  Object result=doFloorDiv(x,y);  if (!resultEquals(result,expected)) {    fail("FAIL: long Math.floorDiv(%d, %d) = %s; expected %s%n",x,y,result,expected);  }  Object strict_result=doStrictFloorDiv(x,y);  if (!resultEquals(strict_result,expected)) {    fail("FAIL: long StrictMath.floorDiv(%d, %d) = %s; expected %s%n",x,y,strict_result,expected);  }}  }
class C{  @Override protected IgniteInternalFuture currentFuture() throws IgniteCheckedException {  return ((IgniteFutureImpl)messaging.future()).internalFuture();}  }
class C{  public OpenArrowhead(){  setupControlPoints(3);}  }
class C{  public boolean canWrite(Permission p){  if (permissions != null) {    return permissions[p.value][1];  }  return false;}  }
class C{  public static boolean isXML11ValidLiteral(int c){  return ((c < 0x10000 && ((XML11CHARS[c] & MASK_XML11_VALID) != 0 && (XML11CHARS[c] & MASK_XML11_CONTROL) == 0)) || (0x10000 <= c && c <= 0x10FFFF));}  }
class C{  public ObjectFactory(){}  }
class C{  private UnManagedVolume createUnmanagedVolume(VPlexVirtualVolumeInfo info,StorageSystem vplex,Map<String,String> volumesToCgs,Map<String,String> clusterIdToNameMap,Map<String,String> varrayToClusterIdMap,Map<String,String> distributedDevicePathToClusterMap,Map<String,String> backendVolumeGuidToVvolGuidMap,Map<String,Set<VPlexStorageViewInfo>> volumeToStorageViewMap,Collection<VirtualPool> allVpools){  s_logger.info("Creating new UnManagedVolume from VPLEX volume {}",info.getName());  UnManagedVolume volume=new UnManagedVolume();  volume.setId(URIUtil.createId(UnManagedVolume.class));  updateUnmanagedVolume(info,vplex,volume,volumesToCgs,clusterIdToNameMap,varrayToClusterIdMap,distributedDevicePathToClusterMap,backendVolumeGuidToVvolGuidMap,volumeToStorageViewMap,allVpools);  return volume;}  }
class C{  public static int println(int priority,String tag,String msg){  return android.util.Log.println(priority,tag,msg);}  }
class C{  public FunctionInput(Category category,String categoryName,String name,int type,String additionalInformation,boolean customIcon,boolean invisible){  this(category,categoryName,name,type,additionalInformation,customIcon);  this.invisible=invisible;}  }
class C{  protected void sequence_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public ProtocolException(String detailMessage){  super(detailMessage);}  }
class C{  @Override public void free(){  debugCodeCall("free");  value=null;}  }
class C{  protected void generatePseudoPawnEPCaptures(int fromSquare,long fromBB,int oppositeColor,PriorityMoveList moves){  if (epSquare != EMPTY) {    long toBB=pawnEpCapture(colorToMove,fromBB,getPieceBB(oppositeColor,PAWN),getBitboard(epSquare));    if (toBB != 0) {      int toSquare=bitscanForward(toBB);      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,PAWN,EMPTY,EMPTY_SQUARE,Move.EN_PASSANT_CHARACTERISTIC),moves);    }  }}  }
class C{  @RequestMapping(value="",method={RequestMethod.POST}) @ResponseBody public CubeRequest saveCubeDesc(@RequestBody CubeRequest cubeRequest){  CubeDesc desc=deserializeCubeDesc(cubeRequest);  if (desc == null) {    cubeRequest.setMessage("CubeDesc is null.");    return cubeRequest;  }  String name=CubeService.getCubeNameFromDesc(desc.getName());  if (StringUtils.isEmpty(name)) {    logger.info("Cube name should not be empty.");    throw new BadRequestException("Cube name should not be empty.");  }  try {    desc.setUuid(UUID.randomUUID().toString());    String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();    cubeService.createCubeAndDesc(name,projectName,desc);  } catch (  Exception e) {    logger.error("Failed to deal with the request.",e);    throw new InternalErrorException(e.getLocalizedMessage(),e);  }  cubeRequest.setUuid(desc.getUuid());  cubeRequest.setSuccessful(true);  return cubeRequest;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:16.271 -0500",hash_original_method="D4E6F2D9338FE775902AE34CF280ED17",hash_generated_method="4D4883972AC36241D37B12A13AB18E38") @Override public String toString(){  return name + ": " + cipherSuiteCode[0]+ " "+ cipherSuiteCode[1];}  }
class C{  private String nextLiteral(boolean assignOffsetsOnly) throws IOException {  StringBuilder builder=null;  valuePos=-1;  valueLength=0;  int i=0;  findNonLiteralCharacter:   while (true) {    for (; pos + i < limit; i++) {switch (buffer[pos + i]) {case '/':case '\\':case ';':case '#':case '=':        checkLenient();case '{':case '}':case '[':case ']':case ':':case ',':case ' ':case '\t':case '\f':case '\r':case '\n':      break findNonLiteralCharacter;  }}if (i < buffer.length) {  if (fillBuffer(i + 1)) {    continue;  } else {    buffer[limit]='\0';    break;  }}if (builder == null) {  builder=new StringBuilder();}builder.append(buffer,pos,i);valueLength+=i;pos+=i;i=0;if (!fillBuffer(1)) {  break;}}String result;if (assignOffsetsOnly && builder == null) {valuePos=pos;result=null;} else if (skipping) {result="skipped!";} else if (builder == null) {result=stringPool.get(buffer,pos,i);} else {builder.append(buffer,pos,i);result=builder.toString();}valueLength+=i;pos+=i;return result;}  }
class C{  private void handleJsonShowEntryParent(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  final String id=requestAndResponse.request.getParameter(DbLogic.Constants.id);  if (!dbLogic.getIdGenerator().isIdWellFormed(id)) {    returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());    return;  }  try {    final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));    final Entry entry=dbLogic.getEntryById(id);    if (entry == null) {      returnJson400(requestAndResponse,servletText.errorEntryCouldNotBeFound());      return;    }    final StringBuilder result=new StringBuilder();    if (!dbLogic.canUserSeeEntry(user,entry,isUserAnAdmin(requestAndResponse))) {      if (user == null) {        returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));      } else {        returnJson400(requestAndResponse,servletText.errorMayNotSeeEntry());      }    } else {      final String parentId=entry.getParentId();      if (parentId == null) {        returnJson400(requestAndResponse,servletText.errorHasNoParent());      } else {        final Entry parentEntry=dbLogic.getEntryById(parentId);        if (parentEntry == null) {          returnJson400(requestAndResponse,servletText.errorParentCouldNotBeFound());        } else         if (!dbLogic.canUserSeeEntry(user,parentEntry,isUserAnAdmin(requestAndResponse))) {          returnJson400(requestAndResponse,servletText.errorMayNotSeeEntry());        } else {          final ArrayList<EntryInfo> entryInfoList=new ArrayList<EntryInfo>();          final StringBuilder innerResult=new StringBuilder();          final int skippedIndex=addEntryHtmlToTree(parentEntry,innerResult,entryInfoList,defaultNoteDisplayDepth,false,id,true,!entry.isNotebook());          result.append("{ \"subtreeHtml\": " + JsonBuilder.quote(innerResult.toString()));          result.append(",\n\"id\": \"" + parentEntry.getId() + "\"");          result.append(",\n\"skippedIndex\": " + skippedIndex);          result.append(",\n\"entryInfoDict\":");          addJsonForEntryInfos(result,entryInfoList,null);          result.append("}");        }      }    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  public TimestampSpeechletRequestVerifier(long tolerance,TimeUnit unit){  if (tolerance < 0) {    throw new IllegalArgumentException("A negative tolerance is not supported");  }  toleranceInMilliseconds=unit.toMillis(tolerance);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public DTMAxisIterator reset(){  _sp=_oldsp;  return resetPosition();}  }
class C{  public String text(){  return text;}  }
class C{  void addDependent(InstanceTime dependent,boolean forBegin){  if (forBegin) {    beginDependents.add(dependent);  } else {    endDependents.add(dependent);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  public DataFormatDetector withOptimalMatch(MatchStrength optMatch){  if (optMatch == _optimalMatch) {    return this;  }  return new DataFormatDetector(_detectors,optMatch,_minimalMatch,_maxInputLookahead);}  }
class C{  public AttachmentNoSoap(){  requestFileName="attachm-no-soap.query";  requestContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  public NoSuchMethodError(String s){  super(s);}  }
class C{  public static String mkTmpDir(String prefix) throws IOException {  File tmpDir=File.createTempFile(prefix,"");  if (!tmpDir.delete())   throw new IOException();  if (!tmpDir.mkdir())   throw new IOException();  return tmpDir.getCanonicalPath();}  }
class C{  public IcyInputStream(InputStream in,int period,PlayerCallback playerCallback){  this(in,period,playerCallback,null);}  }
class C{  @Override public T readNotNull(AppContext ctx,PK id){  return ds.readNotNull(ctx,type,id);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TEXPORTABLE_ELEMENT__EXPORTED_NAME:    setExportedName(EXPORTED_NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public boolean instructionIsThrow(){  return isThrow;}  }
class C{  public boolean isShowGridY(){  return mShowGridY;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  transformer.pushCurrentTemplateRuleIsNull(false);  boolean pushMode=false;  try {    QName mode=transformer.getMode();    if (!m_isDefaultTemplate) {      if (((null == mode) && (null != m_mode)) || ((null != mode) && !mode.equals(m_mode))) {        pushMode=true;        transformer.pushMode(m_mode);      }    }    transformSelectedNodes(transformer);  }  finally {    if (pushMode)     transformer.popMode();    transformer.popCurrentTemplateRuleIsNull();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.308 -0500",hash_original_method="5AF5477506B1C1EE3856DD0F624B5874",hash_generated_method="A9F3EEEB2A8415737D8887B2A209059C") public void drawText(String text,float x,float y,Paint paint){  native_drawText(mNativeCanvas,text,0,text.length(),x,y,paint.mBidiFlags,paint.mNativePaint);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected ArgsWeb(){}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (XYDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  public static double ksDistance(double[] d1,double[] d2){  assert (d1.length == d2.length);  double max=0d;  double m1=0, m2=0;  for (int i=0; i < d1.length; i++) {    m1+=d1[i];    m2+=d2[i];    max=Math.max(Math.abs(m1 - m2),max);  }  return max;}  }
class C{  public void initEditText(String text){  mEditText.setText("");  mEditText.append(text);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputFile=null;  int minClass;  int maxClass;  int numClasses;  int i1, i2;  int[][] contingency;  double[] data1, data2;  double z1, z2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  outputFile=args[2];  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    minClass=(int)(Math.min(image1.getMinimumValue(),image2.getMinimumValue()));    maxClass=(int)(Math.max(image1.getMaximumValue(),image2.getMaximumValue()));    numClasses=maxClass - minClass + 1;    contingency=new int[numClasses][numClasses];    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if (z1 != noData1 && z2 != noData2) {          i1=(int)(z1 - minClass);          i2=(int)(z2 - minClass);          contingency[i1][i2]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    image1.close();    image2.close();    double agreements=0;    double expectedFrequency=0;    double N=0;    double rowTotal=0;    double colTotal=0;    double kappa=0;    double overallAccuracy=0;    for (int a=0; a <= numClasses - 1; a++) {      agreements+=contingency[a][a];      for (int b=0; b <= numClasses - 1; b++) {        N+=contingency[a][b];      }    }    for (int a=0; a <= numClasses - 1; a++) {      rowTotal=0;      colTotal=0;      for (int b=0; b <= numClasses - 1; b++) {        colTotal+=contingency[a][b];        rowTotal+=contingency[b][a];      }      expectedFrequency+=(colTotal * rowTotal) / N;    }    kappa=(agreements - expectedFrequency) / (N - expectedFrequency);    overallAccuracy=agreements / N;    File file=new File(outputFile);    FileWriter fw=null;    BufferedWriter bw=null;    PrintWriter out=null;    try {      fw=new FileWriter(file,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      String str;      str="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";      out.println(str);      str="<head>";      out.println(str);      str="<meta content=\"text/html; charset=iso-8859-1\" http-equiv=\"content-type\"><title>Kappa Index of Agreement Output</title>";      out.println(str);      str="</head>";      out.println(str);      str="<body><h1>Kappa Index of Agreement</h1>";      out.println(str);      str="<b>Input Images:</b> <br><br><b>Classification Image:</b> " + inputHeader1 + "<br><b>Reference Image:</b> "+ inputHeader2+ "<br>";      out.println(str);      str="<br><b>Contingency Table:</b><br>";      out.println(str);      str="<br><table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">";      out.println(str);      str="<tr>";      out.println(str);      str="<th colspan=\"2\" rowspan=\"2\"></th><th colspan=\"" + numClasses + "\">Class Image</th><th rowspan=\"2\">Row<br>Totals</th>";      out.println(str);      str="</tr>";      out.println(str);      str="<tr>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        str="<th>" + (minClass + a) + "</th>";        out.println(str);      }      str="</tr>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        if (a == 0) {          str="<tr><th rowspan=\"" + numClasses + "\">Ref<br>Image</th> <th>"+ (minClass + a)+ "</th>";          out.println(str);        } else {          str="<tr><th>" + (minClass + a) + "</th>";          out.println(str);        }        rowTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          rowTotal+=contingency[a][b];          str="<td>" + contingency[a][b] + "</td>";          out.println(str);        }        str="<td>" + rowTotal + "</td>";        out.println(str);        str="</tr>";        out.println(str);      }      str="<tr>";      out.println(str);      str="<th colspan=\"2\">Col<br>Totals</th>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        colTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          colTotal+=contingency[b][a];        }        str="<td>" + colTotal + "</td>";        out.println(str);      }      str="<td><b>N</b>=" + N + "</td></tr>";      out.println(str);      str="</table>";      out.println(str);      str="<br><b>Class Accuracy Statistics:</b><br><br>";      out.println(str);      str="<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">";      out.println(str);      str="<tr><td><b>Class</b></td><td><b>User's<br>Accuracy</b></td><td><b>Producer's<br>Accuracy</b></td></tr>";      out.println(str);      DecimalFormat df=new DecimalFormat("0.00%");      DecimalFormat df2=new DecimalFormat("0.000");      for (int a=0; a <= numClasses - 1; a++) {        rowTotal=0;        colTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          colTotal+=contingency[a][b];          rowTotal+=contingency[b][a];        }        str="<tr><td>" + a + "</td><td>"+ df.format(contingency[a][a] / colTotal)+ "</td><td>"+ df.format(contingency[a][a] / rowTotal)+ "</td></tr>";        out.println(str);      }      str="</table>";      out.println(str);      str="<br>Note: User's accuracy refers to the proportion of cells correctly assigned to a class (i.e. the number of cells correctly classified for a category divided by the row total in the contingency table). " + "Producer's accuracy is a measure of how much of the land in each category was classified correctly (i.e. the number of cells correctly classified for a category divided by the column total in the contingency table).<br>";      out.println(str);      str="<br><b>Overall Accuracy</b> = " + df.format(overallAccuracy);      out.println(str);      str="<br><br><b>Kappa</b> = " + df2.format(kappa);      out.println(str);      str="</body>";      out.println(str);    } catch (    java.io.IOException e) {      System.err.println("Error: " + e.getMessage());    } finally {      if (out != null || bw != null) {        out.flush();        out.close();      }    }    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected Anonymous_codeLangs_1_Impl(){  super();}  }
class C{  private void deleteFilesInDir(File dir){  for (  File child : dir.listFiles()) {    child.delete();  }}  }
class C{  @SuppressWarnings("unused") public void pingSession(){  UserSession session=anonymousSession;  if (session != null) {    pingSession(session);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.NUM_EXPR___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_11:  return anonymous_numExpr_1_1 != null && !anonymous_numExpr_1_1.isEmpty();case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_21:return anonymous_numExpr_2_1 != null && !anonymous_numExpr_2_1.isEmpty();case UmplePackage.NUM_EXPR___ORDINAL_OP_1:return ordinalOp_1 != null && !ordinalOp_1.isEmpty();case UmplePackage.NUM_EXPR___NAME_2:return NAME_2_EDEFAULT == null ? name_2 != null : !NAME_2_EDEFAULT.equals(name_2);case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_31:return anonymous_numExpr_3_1 != null && !anonymous_numExpr_3_1.isEmpty();case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_41:return anonymous_numExpr_4_1 != null && !anonymous_numExpr_4_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public PairwiseMatrix2DataTableRowWrapper(NumericalMatrix matrix,int firstIndex,int secondIndex){  this.matrix=matrix;  this.firstIndex=firstIndex;  this.secondIndex=secondIndex;}  }
class C{  public HashCode append(final int[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final int element : array) {      append(element);    }  }  return this;}  }
class C{  public XMLString xstr(){  return XMLStringFactoryImpl.getFactory().newstr(str());}  }
class C{  public TextTitle(String text,Font font,Paint paint,RectangleEdge position,HorizontalAlignment horizontalAlignment,VerticalAlignment verticalAlignment,RectangleInsets padding){  super(position,horizontalAlignment,verticalAlignment,padding);  if (text == null) {    throw new NullPointerException("Null 'text' argument.");  }  if (font == null) {    throw new NullPointerException("Null 'font' argument.");  }  if (paint == null) {    throw new NullPointerException("Null 'paint' argument.");  }  this.text=text;  this.font=font;  this.paint=paint;  this.textAlignment=horizontalAlignment;  this.backgroundPaint=null;  this.content=null;  this.toolTipText=null;  this.urlText=null;}  }
class C{  public TeXFormula addStrut(int unit,float width,float height,float depth) throws InvalidUnitException {  return add(new SpaceAtom(unit,width,height,depth));}  }
class C{  public final void insertElementAt(int value,int at){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  public DictItem addDictItem(long userId,long dictCollectionId,String itemCode,Map<Locale,String> itemNameMap,Map<Locale,String> itemDescriptionMap,long parentId,ServiceContext serviceContext) throws SystemException, NoSuchDictItemException {  long dictItemId=CounterLocalServiceUtil.increment(DictItem.class.getName());  DictItem dictItem=dictItemPersistence.create(dictItemId);  Date now=new Date();  String treeIndex=getTreeIndex(dictItemId,parentId);  dictItem.setCompanyId(serviceContext.getCompanyId());  dictItem.setCreateDate(now);  dictItem.setDictCollectionId(dictCollectionId);  dictItem.setGroupId(serviceContext.getScopeGroupId());  dictItem.setIssueStatus(PortletConstants.INUSE);  dictItem.setItemCode(itemCode);  dictItem.setItemNameMap(itemNameMap);  dictItem.setItemDescriptionMap(itemDescriptionMap);  dictItem.setModifiedDate(now);  dictItem.setParentItemId(parentId);  dictItem.setTreeIndex(treeIndex);  dictItem.setUserId(userId);  return dictItemPersistence.update(dictItem);}  }
class C{  private static boolean focusCenter(){  return (!CropOverlayView.showGuidelines());}  }
class C{  public static void createStopsFile(Map<? extends Id,? extends Facility> locationFacilitiesMap,String outputFileStops,String separator){  final CSVFileWriter stopsWriter=new CSVFileWriter(outputFileStops,separator);  stopsWriter.writeField("id");  stopsWriter.writeField("x");  stopsWriter.writeField("y");  stopsWriter.writeNewLine();  for (  Facility fac : locationFacilitiesMap.values()) {    stopsWriter.writeField(fac.getId());    stopsWriter.writeField(fac.getCoord().getX());    stopsWriter.writeField(fac.getCoord().getY());    stopsWriter.writeNewLine();  }  stopsWriter.close();  log.info("Stops file based on schedule written.");}  }
class C{  public void registerSessionThread(SessionThread newSession){synchronized (this) {    List<SessionThread> toBeRemoved=new ArrayList<SessionThread>();    for (    SessionThread sessionThread : sessionThreads) {      if (!sessionThread.isAlive()) {        Log.d(TAG,"Cleaning up finished session...");        try {          sessionThread.join();          Log.d(TAG,"Thread joined");          toBeRemoved.add(sessionThread);          sessionThread.closeSocket();        } catch (        InterruptedException e) {          Log.d(TAG,"Interrupted while joining");        }      }    }    for (    SessionThread removeThread : toBeRemoved) {      sessionThreads.remove(removeThread);    }    sessionThreads.add(newSession);  }  Log.d(TAG,"Registered session thread");}  }
class C{  public void parseForClass(GenericDeclaration genericDecl,SignatureTag signature){  setInput(genericDecl,signature);  if (!eof) {    parseClassSignature();  } else {    if (genericDecl instanceof SootClassType) {      SootClassType c=(SootClassType)genericDecl;      this.formalTypeParameters=ListOfVariables.EMPTY;      this.superclassType=c.getSuperclass();      this.interfaceTypes=new ListOfTypes(c.getInterfaces());    } else {      this.formalTypeParameters=ListOfVariables.EMPTY;      this.superclassType=new SootClassType("java.lang.Object");      this.interfaceTypes=ListOfTypes.EMPTY;    }  }}  }
class C{  public static double[] nextPointNear(Polygon polygon){  double polyLats[]=polygon.getPolyLats();  double polyLons[]=polygon.getPolyLons();  Polygon holes[]=polygon.getHoles();  if (holes.length > 0 && random().nextInt(3) == 0) {    return nextPointNear(holes[random().nextInt(holes.length)]);  }  int surpriseMe=random().nextInt(97);  if (surpriseMe == 0) {    return new double[]{nextLatitude(),nextLongitude()};  } else   if (surpriseMe < 5) {    return new double[]{nextLatitudeBetween(polygon.minLat,polygon.maxLat),nextLongitudeBetween(polygon.minLon,polygon.maxLon)};  } else   if (surpriseMe < 20) {    int vertex=random().nextInt(polyLats.length - 1);    return new double[]{nextLatitudeNear(polyLats[vertex],polyLats[vertex + 1] - polyLats[vertex]),nextLongitudeNear(polyLons[vertex],polyLons[vertex + 1] - polyLons[vertex])};  } else   if (surpriseMe < 30) {    Polygon container=boxPolygon(new Rectangle(polygon.minLat,polygon.maxLat,polygon.minLon,polygon.maxLon));    double containerLats[]=container.getPolyLats();    double containerLons[]=container.getPolyLons();    int startVertex=random().nextInt(containerLats.length - 1);    return nextPointAroundLine(containerLats[startVertex],containerLons[startVertex],containerLats[startVertex + 1],containerLons[startVertex + 1]);  } else {    int startVertex=random().nextInt(polyLats.length - 1);    int endVertex=random().nextBoolean() ? startVertex + 1 : random().nextInt(polyLats.length - 1);    return nextPointAroundLine(polyLats[startVertex],polyLons[startVertex],polyLats[endVertex],polyLons[endVertex]);  }}  }
class C{  @Override public double[] distributionForInstance(Instance inst) throws Exception {  if (m_Classifiers.length == 1) {    return m_Classifiers[0].distributionForInstance(inst);  }  double[] probs=new double[inst.numClasses()];  if (m_Method == METHOD_1_AGAINST_1) {    double[][] r=new double[inst.numClasses()][inst.numClasses()];    double[][] n=new double[inst.numClasses()][inst.numClasses()];    for (int i=0; i < m_ClassFilters.length; i++) {      if (m_Classifiers[i] != null && m_SumOfWeights[i] > 0) {        Instance tempInst=(Instance)inst.copy();        tempInst.setDataset(m_TwoClassDataset);        double[] current=m_Classifiers[i].distributionForInstance(tempInst);        Range range=new Range(((RemoveWithValues)m_ClassFilters[i]).getNominalIndices());        range.setUpper(m_ClassAttribute.numValues());        int[] pair=range.getSelection();        if (m_pairwiseCoupling && inst.numClasses() > 2) {          r[pair[0]][pair[1]]=current[0];          n[pair[0]][pair[1]]=m_SumOfWeights[i];        } else {          if (current[0] > current[1]) {            probs[pair[0]]+=1.0;          } else {            probs[pair[1]]+=1.0;          }        }      }    }    if (m_pairwiseCoupling && inst.numClasses() > 2) {      try {        return pairwiseCoupling(n,r);      } catch (      IllegalArgumentException ex) {      }    }    if (Utils.gr(Utils.sum(probs),0)) {      Utils.normalize(probs);    }    return probs;  } else {    probs=super.distributionForInstance(inst);  }  return probs;}  }
class C{  public boolean isInteractiveSession(){  return interactiveSession;}  }
class C{  protected void reconcileCollForRcptCancel(final EgDemand demand,final BillReceiptInfo billRcptInfo){  cancelBill(Long.valueOf(billRcptInfo.getBillReferenceNum()));  demand.setAmtCollected(demand.getAmtCollected().subtract(billRcptInfo.getTotalAmount()));  updateDmdDetForRcptCancel(demand,billRcptInfo);}  }
class C{  public void skipMessage() throws IOException {  while (true) {    final int tag=readTag();    if (tag == 0 || !skipField(tag)) {      return;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.848 -0500",hash_original_method="0E07F05FFE6C1C2F83533D7132328ECC",hash_generated_method="EE89FF9318EFC8DB217D86D0CC0488F3") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("SubscriptionStateParser.parse");  SubscriptionState subscriptionState=new SubscriptionState();  try {    headerName(TokenTypes.SUBSCRIPTION_STATE);    subscriptionState.setHeaderName(SIPHeaderNames.SUBSCRIPTION_STATE);    lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    subscriptionState.setState(token.getTokenValue());    while (lexer.lookAhead(0) == ';') {      this.lexer.match(';');      this.lexer.SPorHT();      lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      String value=token.getTokenValue();      if (value.equalsIgnoreCase("reason")) {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        value=token.getTokenValue();        subscriptionState.setReasonCode(value);      } else       if (value.equalsIgnoreCase("expires")) {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        value=token.getTokenValue();        try {          int expires=Integer.parseInt(value);          subscriptionState.setExpires(expires);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }      } else       if (value.equalsIgnoreCase("retry-after")) {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        value=token.getTokenValue();        try {          int retryAfter=Integer.parseInt(value);          subscriptionState.setRetryAfter(retryAfter);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }      } else {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        Token secondToken=lexer.getNextToken();        String secondValue=secondToken.getTokenValue();        subscriptionState.setParameter(value,secondValue);      }      this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("SubscriptionStateParser.parse");  }  return subscriptionState;}  }
class C{  public static List<Instance<Boolean>> generateBooleanInstances(int n){  List<Instance<Boolean>> instances=new ArrayList<Instance<Boolean>>();  for (int i=0; i < n; i++) {    Instance<Boolean> instance=new Instance<Boolean>();    if (ClassifierTestUtil.random.nextInt(2) == 0) {      instance.setOutcome(true);      instance.add(new Feature("hello",ClassifierTestUtil.random.nextInt(1000) + 1000));    } else {      instance.setOutcome(false);      instance.add(new Feature("hello",ClassifierTestUtil.random.nextInt(100)));    }    instances.add(instance);  }  return instances;}  }
class C{  public boolean acquireLock(String lockName,long waitInSeconds){  if (lockName == null || lockName.isEmpty()) {    s_logger.info("No lock name specified.");    return false;  }  try {    InterProcessLock lock=_coordinator.getLock(lockName);    if (lock != null) {      if (waitInSeconds >= 0) {        s_logger.info("Attempting to acquire lock: " + lockName + " for a maximum of "+ waitInSeconds+ " seconds.");        if (!lock.acquire(waitInSeconds,TimeUnit.SECONDS)) {          s_logger.info("Failed to acquire lock: " + lockName);          return false;        }      } else {        s_logger.info("Attempting to acquire lock: " + lockName + " for as long as it takes.");        lock.acquire();      }      s_acquiredLocks.put(lockName,lock);    } else {      return false;    }    s_logger.info("Acquired lock: " + lockName);    return true;  } catch (  Exception e) {    s_logger.error("Acquisition of lock: {} failed with Exception: ",lockName,e);    return false;  }}  }
class C{  static void allowVisibility(){  _allowVisible=true;}  }
class C{  @SuppressWarnings("incomplete-switch") protected final StringBuilder addMappingTypeControl(StringBuilder content){  StringBuilder sb=new StringBuilder();  int openBracket=0;  boolean isDPrimitive=destinationType().isPrimitive();  boolean isSPrimitive=sourceType().isPrimitive();  if (!isDPrimitive && isNullSetting())   content=avoidSet ? write(newLine) : write(setDestination("null"),newLine);  if (((isDPrimitive || isSPrimitive) && isNullSetting()) || ((isDPrimitive && mtd == ONLY_NULL_FIELDS)))   return write(newLine);  if (!isDPrimitive) switch (mtd) {case ONLY_VALUED_FIELDS:    write(sb,"   if(",getDestination(),"!=null){",newLine);  openBracket++;break;case ONLY_NULL_FIELDS:write(sb,"   if(",getDestination(),"==null){",newLine);openBracket++;break;}if (!isSPrimitive) if (!isDPrimitive) switch (mts) {case ONLY_VALUED_FIELDS:write(sb,"   if(",getSource(),"!=null){",newLine);openBracket++;break;case ONLY_NULL_FIELDS:write(sb,"   if(",getSource(),"==null){",newLine);openBracket++;break;} else switch (mts) {case ONLY_VALUED_FIELDS:write(sb,"   if(",getSource(),"!=null){",newLine);openBracket++;break;}sb.append(content);while (openBracket-- > 0) write(sb,"   }",newLine);return sb;}  }
class C{  public static boolean isApiOverridenMethod(SootMethod method){  return (getApiOverridenMethod(method) != null);}  }
class C{  private void addUnbuffered(T elem){  unbufferedElements.add(elem);  if (unbufferedElements.size() == bufferSize) {    Collections.sort(unbufferedElements,compareFn);    buffers.add(new QuantileBuffer<T>(unbufferedElements));    unbufferedElements=Lists.newArrayListWithCapacity(bufferSize);    collapseIfNeeded();  }}  }
class C{  protected void makeRigid(){  if (this.type != null) {    throw new IllegalStateException("Type instance already set");  }  this.isRigid=true;}  }
class C{  public boolean nextSpan(int spanbox[]){  if (done) {    return false;  }  if (isrect) {    getPathBox(spanbox);    done=true;    return true;  }  int curlox, curhix;  int curloy=this.curloy;  int curhiy=this.curhiy;  while (true) {    if (!ri.nextXBand(spanbox)) {      if (!ri.nextYRange(spanbox)) {        done=true;        return false;      }      curloy=spanbox[1];      curhiy=spanbox[3];      if (curloy < loy) {        curloy=loy;      }      if (curhiy > hiy) {        curhiy=hiy;      }      if (curloy >= hiy) {        done=true;        return false;      }      continue;    }    curlox=spanbox[0];    curhix=spanbox[2];    if (curlox < lox) {      curlox=lox;    }    if (curhix > hix) {      curhix=hix;    }    if (curlox < curhix && curloy < curhiy) {      break;    }  }  spanbox[0]=curlox;  spanbox[1]=this.curloy=curloy;  spanbox[2]=curhix;  spanbox[3]=this.curhiy=curhiy;  return true;}  }
class C{  public static Configuration convertProperties(Properties p){  Configuration c=new Configuration();  for (Enumeration e=p.keys(); e.hasMoreElements(); ) {    String s=(String)e.nextElement();    c.setProperty(s,p.getProperty(s));  }  return c;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.230 -0500",hash_original_method="37F9F64824FAF4D2E17AC94C2167510B",hash_generated_method="08F133E83B9B1B64AA4CE7E30D669FA8") public static long parseLong(String string,int radix) throws NumberFormatException {  return (string.length() + radix);}  }
class C{  private String logFailedRowChangeSQL(StringBuffer stmt,OneRowChange oneRowChange){  try {    ArrayList<OneRowChange.ColumnSpec> keys=oneRowChange.getKeySpec();    ArrayList<OneRowChange.ColumnSpec> columns=oneRowChange.getColumnSpec();    ArrayList<ArrayList<OneRowChange.ColumnVal>> keyValues=oneRowChange.getKeyValues();    ArrayList<ArrayList<OneRowChange.ColumnVal>> columnValues=oneRowChange.getColumnValues();    String log="Failing statement : " + stmt.toString() + "\nArguments:";    for (int row=0; row < columnValues.size() || row < keyValues.size(); row++) {      log+="\n - ROW# = " + row;      for (int c=0; c < columns.size(); c++) {        if (columnValues.size() > 0) {          OneRowChange.ColumnSpec colSpec=columns.get(c);          ArrayList<OneRowChange.ColumnVal> values=columnValues.get(row);          OneRowChange.ColumnVal value=values.get(c);          log+="\n" + THLManagerCtrl.formatColumn(colSpec,value,"COL",null,false,true,null);        }      }      for (int k=0; k < keys.size(); k++) {        if (keyValues.size() > 0) {          OneRowChange.ColumnSpec colSpec=keys.get(k);          ArrayList<OneRowChange.ColumnVal> values=keyValues.get(row);          OneRowChange.ColumnVal value=values.get(k);          log+="\n" + THLManagerCtrl.formatColumn(colSpec,value,"KEY",null,false,true,null);        }      }    }    if (log.length() > maxSQLLogLength)     log=log.substring(0,maxSQLLogLength);    return log;  } catch (  Exception e) {    if (logger.isDebugEnabled())     logger.debug("logFailedRowChangeSQL failed to log, because: " + e.getMessage());  }  return null;}  }
class C{  protected boolean isLocalReference(URL url){  return url.getProtocol() == null || "file".equals(url.getProtocol()) || "jar".equals(url.getProtocol());}  }
class C{  public boolean canNext(){  return m_next;}  }
class C{  public boolean isEnableResizeControl(){  return this.enableResize;}  }
class C{  private void enablePahoLogging(){  try {    InputStream logPropStream=context.getResources().openRawResource(R.raw.jsr47android);    LogManager.getLogManager().readConfiguration(logPropStream);    logging=true;    HashMap<String,Connection> connections=(HashMap<String,Connection>)Connections.getInstance(context).getConnections();    if (!connections.isEmpty()) {      Entry<String,Connection> entry=connections.entrySet().iterator().next();      Connection connection=(Connection)entry.getValue();      connection.getClient().setTraceEnabled(true);      clientConnections.invalidateOptionsMenu();    } else {      Log.i("SampleListener","No connection to enable log in service");    }  } catch (  IOException e) {    Log.e("MqttAndroidClient","Error reading logging parameters",e);  }}  }
class C{  static public Formatter percDiffFormatter(){  return percDiffFormatter;}  }
class C{  public TitlePaneIconifyButtonPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);}  }
class C{  protected void registerWithTouchDispatcher(){  CCTouchDispatcher.sharedDispatcher().addDelegate(this,0);}  }
class C{  protected Uri doInBackground(Uri... url){  Log.d(TAG,"doInBackground() downloading image");  return DownloadUtils.downloadImage(DownloadImageActivity.this,url[0]);}  }
class C{  public NodeSet(NodeList nodelist){  this(32);  addNodes(nodelist);}  }
class C{  public String invertSelectionTipText(){  return "Whether to invert the selection.";}  }
class C{  public Variable[] findLocalArrays(){  List<Variable> arrays=new ArrayList<Variable>();  for (ListIterator<Variable> iterator=fLocalVariables.listIterator(fLocalVariables.size()); iterator.hasPrevious(); ) {    Variable localVariable=iterator.previous();    if (localVariable.isArray())     arrays.add(localVariable);  }  return arrays.toArray(new Variable[arrays.size()]);}  }
class C{  protected Node newNode(){  return new SVGOMSubImageElement();}  }
class C{  @Override public boolean figureContains(Point2D.Double p){  Rectangle2D.Double r=(Rectangle2D.Double)rectangle.clone();  double grow=AttributeKeys.getPerpendicularHitGrowth(this) + 1d;  Geom.grow(r,grow,grow);  return r.contains(p);}  }
class C{  public void put(Writable key,Writable value){  partitionMap.put(key,value);}  }
class C{  public AlgorithmTerminationException(Algorithm algorithm){  super(algorithm);}  }
class C{  public boolean zoneExportAddInitiators(URI exportGroupURI,Map<URI,List<URI>> exportMasksToInitiators,String token) throws ControllerException {  NetworkFCContext context=new NetworkFCContext();  boolean status=false;  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);  _log.info(String.format("Entering zoneExportAddInitiators for ExportGroup: %s (%s)",exportGroup.getLabel(),exportGroup.getId()));  try {    if (!checkZoningRequired(token,exportGroup.getVirtualArray())) {      return true;    }    Map<String,List<Zone>> zonesMap=getExistingZonesMap(exportMasksToInitiators.keySet(),token);    List<NetworkFCZoneInfo> zoneInfos=_networkScheduler.getZoningTargetsForInitiators(exportGroup,exportMasksToInitiators,zonesMap,_dbClient);    context.getZoneInfos().addAll(zoneInfos);    logZones(zoneInfos);    if (context.getZoneInfos().isEmpty()) {      WorkflowStepCompleter.stepSucceded(token);      return true;    }    BiosCommandResult result=addRemoveZones(exportGroup.getId(),context.getZoneInfos(),false);    status=result.isCommandSuccess();    WorkflowService.getInstance().storeStepData(token,context);    completeWorkflowState(token,"zoneExportAddInitiators",result);    return status;  } catch (  Exception ex) {    _log.error("Exception zoning add initiators",ex);    ServiceError svcError=NetworkDeviceControllerException.errors.zoneExportAddInitiatorsFailed(ex.getMessage(),ex);    WorkflowStepCompleter.stepFailed(token,svcError);    return status;  }}  }
class C{  public void write(long fileOffset,byte[] buffer,int offset,int length) throws IOException {  _file.seek(fileOffset);  _file.write(buffer,offset,length);}  }
class C{  public static void drawImage(Graphics2D g2d,RenderableImage filter,RenderContext rc){  AffineTransform origDev=g2d.getTransform();  Shape origClip=g2d.getClip();  RenderingHints origRH=g2d.getRenderingHints();  Shape clip=rc.getAreaOfInterest();  if (clip != null)   g2d.clip(clip);  g2d.transform(rc.getTransform());  g2d.setRenderingHints(rc.getRenderingHints());  drawImage(g2d,filter);  g2d.setTransform(origDev);  g2d.setClip(origClip);  g2d.setRenderingHints(origRH);}  }
class C{  private static boolean synchronizesOn(Register r){  for (RegisterOperand use=r.useList; use != null; use=use.getNext()) {    Instruction s=use.instruction;    if (s.operator() == MONITORENTER) {      return true;    }    if (s.operator() == MONITOREXIT) {      return true;    }    if (Call.conforms(s)) {      MethodOperand mo=Call.getMethod(s);      if (!mo.isStatic()) {        Operand invokee=Call.getParam(s,0);        if (invokee == use) {          if (!mo.hasPreciseTarget())           return true;          if (mo.getTarget().isSynchronized()) {            return true;          }        }      }    }  }  return false;}  }
class C{  public void initialiseDoubleValues(int size){  if (size < 1) {    throw new IllegalArgumentException("Invalid array size");  }  doubleValues=new double[size];}  }
class C{  public static Version valueOf(@NotNull String version) throws IllegalVersionException {  Matcher matcher=VERSION.matcher(version);  if (!matcher.find()) {    throw new IllegalVersionException(version);  }  int hotFix=0;  int milestone=0;  int beta=0;  int rc=0;  String hotFixGroup=matcher.group(4);  if (!hotFixGroup.isEmpty()) {    hotFix=parseInt(hotFixGroup.substring(1));  }  String milestoneGroup=matcher.group(5);  if (!milestoneGroup.isEmpty()) {    milestone=parseInt(milestoneGroup.substring(MILESTONE_VERSION_PREFIX.length()));  }  String betaGroup=matcher.group(6);  if (!betaGroup.isEmpty()) {    beta=parseInt(betaGroup.substring(BETA_VERSION_PREFIX.length()));  }  String rcGroup=matcher.group(7);  if (!rcGroup.isEmpty()) {    rc=parseInt(rcGroup.substring(RC_VERSION_PREFIX.length()));  }  boolean isGa=!matcher.group(8).isEmpty();  boolean isSnapshot=!matcher.group(9).isEmpty();  return new Version(parseInt(matcher.group(1)),parseInt(matcher.group(2)),parseInt(matcher.group(3)),hotFix,milestone,beta,rc,isGa,isSnapshot);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshots") @CheckPermission(roles={Role.SYSTEM_ADMIN},acls={ACL.ANY}) public TaskList createConsistencyGroupSnapshot(@PathParam("id") final URI consistencyGroupId,final BlockConsistencyGroupSnapshotCreate param){  ArgValidator.checkFieldUriType(consistencyGroupId,BlockConsistencyGroup.class,"id");  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(consistencyGroupId);  if (!consistencyGroup.created()) {    throw APIException.badRequests.consistencyGroupNotCreated();  }  validateVolumesInReplicationGroups(consistencyGroup,param.getVolumes(),_dbClient);  BlockServiceApi blockServiceApiImpl=getBlockServiceImpl(consistencyGroup);  Table<URI,String,List<Volume>> storageRgToVolumes=null;  if (!param.getVolumes().isEmpty()) {    storageRgToVolumes=BlockServiceUtils.getReplicationGroupVolumes(param.getVolumes(),consistencyGroupId,_dbClient,uriInfo);  } else {    storageRgToVolumes=BlockServiceUtils.getReplicationGroupVolumes(blockServiceApiImpl.getActiveCGVolumes(consistencyGroup),_dbClient);  }  validateReplicationGroupDevices(storageRgToVolumes);  TaskList taskList=new TaskList();  for (  Cell<URI,String,List<Volume>> cell : storageRgToVolumes.cellSet()) {    List<Volume> volumeList=cell.getValue();    if (volumeList == null || volumeList.isEmpty()) {      _log.warn(String.format("No volume in replication group %s",cell.getColumnKey()));      continue;    }    String taskId=UUID.randomUUID().toString();    String snapshotType=BlockSnapshot.TechnologyType.NATIVE.toString();    String snapshotName=TimeUtils.formatDateForCurrent(param.getName());    blockServiceApiImpl.validateCreateSnapshot(volumeList.get(0),volumeList,snapshotType,snapshotName,getFullCopyManager());    final Boolean createInactive=param.getCreateInactive() == null ? Boolean.FALSE : param.getCreateInactive();    final Boolean readOnly=param.getReadOnly() == null ? Boolean.FALSE : param.getReadOnly();    List<URI> snapIdList=new ArrayList<URI>();    List<BlockSnapshot> snapshotList=new ArrayList<BlockSnapshot>();    snapshotList.addAll(blockServiceApiImpl.prepareSnapshots(volumeList,snapshotType,snapshotName,snapIdList,taskId));    for (    BlockSnapshot snapshot : snapshotList) {      taskList.getTaskList().add(toTask(snapshot,taskId));    }    addConsistencyGroupTask(consistencyGroup,taskList,taskId,ResourceOperationTypeEnum.CREATE_CONSISTENCY_GROUP_SNAPSHOT);    try {      blockServiceApiImpl.createSnapshot(volumeList.get(0),snapIdList,snapshotType,createInactive,readOnly,taskId);      auditBlockConsistencyGroup(OperationTypeEnum.CREATE_CONSISTENCY_GROUP_SNAPSHOT,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,param.getName(),consistencyGroup.getId().toString());    } catch (    Exception ex) {      _log.error("Unexpected Exception occurred when creating snapshot for replication group {}",cell.getColumnKey(),ex);    }  }  return taskList;}  }
class C{  public PutIndexTemplateRequest aliases(BytesReference source){  try {    XContentParser parser=XContentHelper.createParser(source);    parser.nextToken();    while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {      alias(Alias.fromXContent(parser));    }    return this;  } catch (  IOException e) {    throw new ElasticsearchParseException("Failed to parse aliases",e);  }}  }
class C{  private static Bitmap createAvatarThumbnail(Context context,int backgroundColor,String text){  float densityScale=context.getResources().getDisplayMetrics().density;  return createAvatar(backgroundColor,text,(int)(42 * densityScale));}  }
class C{  protected void OrExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  AndExpr();  if ((null != m_token) && tokenIs("or")) {    nextToken();    insertOp(opPos,2,OpCodes.OP_OR);    OrExpr();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);  }}  }
class C{  public void deselect(){  main.removeStyleName(resources.getCss().selectNode());}  }
class C{  public void finish(int result){  super.finish(result);  for (int i=0; i < slaves.size(); i++)   fireMessage((Address)slaves.get(i),MasterAgent.M_END_EXPERIMENT,null);}  }
class C{  private void editFixtureAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof BodyFixture) {      DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();      SandboxBody body=(SandboxBody)parent.getUserObject();      BodyFixture fixture=(BodyFixture)node.getUserObject();synchronized (Simulation.LOCK) {        Convex convex=fixture.getShape();        Image icon;        if (convex instanceof Circle) {          icon=Icons.EDIT_CIRCLE.getImage();        } else         if (convex instanceof Rectangle) {          icon=Icons.EDIT_RECTANGLE.getImage();        } else         if (convex instanceof Segment) {          icon=Icons.EDIT_SEGMENT.getImage();        } else {          icon=Icons.EDIT_POLYGON.getImage();        }        EditFixtureDialog.show(ControlUtilities.getParentWindow(this),icon,body,fixture);      }    }  }}  }
class C{  private String toString(TreePath path){  String checkString="n";  String greyString="n";  String enableString="n";  if (isPathChecked(path)) {    checkString="y";  }  if (isPathEnabled(path)) {    enableString="y";  }  if (isPathGreyed(path)) {    greyString="y";  }  String description="Path checked: " + checkString + " greyed: "+ greyString+ " enabled: "+ enableString+ " Name: "+ path.toString()+ "\n";  for (  TreePath childPath : getChildrenPath(path)) {    description+=toString(childPath);  }  return description;}  }
class C{  protected JvmMemManagerEntryMeta createJvmMemManagerEntryMetaNode(String snmpEntryName,String tableName,SnmpMib mib,MBeanServer server){  return new JvmMemManagerEntryMeta(mib,objectserver);}  }
class C{  public void discardEntries(){  workspace.discardEntries();}  }
class C{  public static boolean isNormalized(CharSequence src,Form form){  return NativeNormalizer.isNormalized(src,form);}  }
class C{  public static <T>void forEachWithIndex(T[] objectArray,int from,int to,ObjectIntProcedure<? super T> objectIntProcedure){  if (objectArray == null) {    throw new IllegalArgumentException("Cannot perform a forEachWithIndex on null");  }  ListIterate.rangeCheck(from,to,objectArray.length);  InternalArrayIterate.forEachWithIndexWithoutChecks(objectArray,from,to,objectIntProcedure);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.810 -0500",hash_original_method="FB20EF55F35D3226A9AFDA2331141C8C",hash_generated_method="39EDA9F6C146B141AAA6BF5C48BD6E7A") public boolean selectArticle(int articleNumber,ArticlePointer pointer) throws IOException {  if (!NNTPReply.isPositiveCompletion(stat(articleNumber)))   return false;  if (pointer != null)   __parseArticlePointer(getReplyString(),pointer);  return true;}  }
class C{  public int hashCode(){  return value.hashCode();}  }
class C{  public boolean hasSubstitutedParameters(){  return this.parameters != this.originalMethod.parameters;}  }
class C{  @Override public void operate(Population population){  super.operate(population);  this.temperature-=delta;}  }
class C{  public boolean isLocallyInitiated(){  boolean streamIsClient=((id & 1) == 1);  return connection.client == streamIsClient;}  }
class C{  private boolean checkLine(ThreadInfo ti,String contains,char beginChar,char endChar){  int beginFrom=ti.getContent().indexOf(contains);  int beginIndex=ti.getContent().indexOf(beginChar,beginFrom);  int endIndex=ti.getContent().indexOf(endChar,beginIndex);  String matchLine=ti.getContent().substring(beginIndex,endIndex);  return getFilterExpressionPattern().matcher(matchLine).matches();}  }
class C{  public static boolean compareLen(byte[] array1,byte[] array2,int len){  for (int i=0; i < len; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @Override public boolean containsKey(@NotNull Object key){  K kKey=(K)key;  int hash=getHashingStrategy().computeHashCode(kKey);  return containsKey(kKey,hash);}  }
class C{  @Override public void execute(){  ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine(event.get("text")));}  }
class C{  public boolean isFinal(){  if (_final == null) {    return false;  } else {    return _final;  }}  }
class C{  protected Tag(String id,boolean causesBreak,boolean isBlock){  name=id;  this.breakTag=causesBreak;  this.blockTag=isBlock;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public TimeConstraintImpl(Class<? extends DataObject> clazz,Boolean value,ColumnFamily<String,IndexColumnName> cf,Date startTime,Date endTime){  this(clazz,cf,value,startTime == null ? -1 : startTime.getTime(),endTime == null ? -1 : endTime.getTime());}  }
class C{  public Holder(ObjectDigestInfo objectDigestInfo){  this.objectDigestInfo=objectDigestInfo;}  }
class C{  @DSSink({DSSinkKind.SYNCHRONIZATION_DATA}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.187 -0500",hash_original_method="EAB0936DFBB6258C56105993043121F1",hash_generated_method="9C2BED586BE6C8197B38E42163E685FD") public void sendKeyDownUpSync(int key){  sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,key));  sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,key));}  }
class C{  public ZipShort(int value){  this.value=value;}  }
class C{  public boolean isPopupMenuEnabled(){  return popupMenuEnabled;}  }
class C{  public VisionWorldDesktopComponent(GenericFrame frame,final VisionWorldComponent component){  super(frame,component);  this.setPreferredSize(new Dimension(400,400));  component.getVisionWorld().setVisionWorldDesktopComponent(this);  JMenuBar menuBar=new JMenuBar();  JToolBar toolBar=new JToolBar();  JMenu file=new JMenu("File");  for (  Action action : component.getVisionWorld().getFileMenuActions()) {    file.add(action);    toolBar.add(action);  }  toolBar.addSeparator();  JMenu edit=new JMenu("Edit");  for (  Action action : component.getVisionWorld().getEditMenuActions()) {    edit.add(action);  }  JMenu view=new JMenu("View");  for (  Action action : component.getVisionWorld().getViewMenuActions()) {    view.add(action);    toolBar.add(action);  }  menuBar.add(file);  menuBar.add(edit);  menuBar.add(view);  getParentFrame().setJMenuBar(menuBar);  setLayout(new BorderLayout());  add("North",toolBar);  add("Center",component.getVisionWorld());}  }
class C{  @Override public QueueSender createSender(final Queue queue) throws JMSException {  lock();  try {    QueueSession session=getQueueSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createSender " + session + " queue="+ queue);    }    QueueSender result=session.createSender(queue);    result=new ActiveMQRAQueueSender(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdSender " + session + " sender="+ result);    }    addProducer(result);    return result;  }  finally {    unlock();  }}  }
class C{  public boolean isNegative(){  assertDefined();  boolean negative=false;  if (m_value.compareTo(new BigDecimal(0)) < 0) {    negative=true;  }  return negative;}  }
class C{  protected String methodIdentification(Method method,Class targetClass){  String simpleMethodId=methodIdentification(method);  if (simpleMethodId != null) {    return simpleMethodId;  }  Method specificMethod=ClassUtils.getMostSpecificMethod(method,targetClass);  return ClassUtils.getQualifiedMethodName(specificMethod);}  }
class C{  public String[] peek(){  return nextLine;}  }
class C{  public static void replaceKey(Address entry,Word key){  entry.store(key,KEY_OFFSET);}  }
class C{  private void postProcessing(Map<String,Integer> names,final ReferenceParse parse){  mReferences=new LinkedHashMap<>();  for (  final Map.Entry<String,Integer> entry : names.entrySet()) {    final String name=entry.getKey();    if (parse.mReferences.containsKey(name)) {      mReferences.put(name,parse.mReferences.get(name));      continue;    }    if (parse.mPloidyDefault == null) {      parse.error("No default specified but required for sequence:" + name);      return;    }    try {      mReferences.put(name,new ReferenceSequence(false,parse.mLinearDefault,parse.mPloidyDefault,name,null,entry.getValue()));    } catch (    final IllegalArgumentException e) {      throw new NoTalkbackSlimException("Invalid reference file. " + e.getMessage());    }  }  for (  final Pair<RegionRestriction,RegionRestriction> duplicate : parse.mDuplicates) {    final RegionRestriction r1=duplicate.getA();    if (!mReferences.containsKey(r1.getSequenceName())) {      continue;    }    final RegionRestriction r2=duplicate.getB();    if (!mReferences.containsKey(r2.getSequenceName())) {      continue;    }    try {      mReferences.get(r1.getSequenceName()).addDuplicate(duplicate);      mReferences.get(r2.getSequenceName()).addDuplicate(duplicate);    } catch (    final IllegalArgumentException e) {      throw new NoTalkbackSlimException("Invalid reference file. " + e.getMessage());    }  }}  }
class C{  private void drawLauncher(){  if (!this.needRedraw) {    return;  }  disposePreviousContent();  createButtons();  pack();  this.needRedraw=false;}  }
class C{  public void checkLastTagWas(final int value) throws InvalidProtocolBufferNanoException {  if (lastTag != value) {    throw InvalidProtocolBufferNanoException.invalidEndTag();  }}  }
class C{  public static boolean isSameInstant(final Date date1,final Date date2){  if (date1 == null || date2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  return date1.getTime() == date2.getTime();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private float normalize(float error,float maximum){  if (Float.isNaN(error)) {    return 0.0f;  } else {    return clip(error,maximum);  }}  }
class C{  public static <T,D>Flux<T> using(Callable<? extends D> resourceSupplier,Function<? super D,? extends Publisher<? extends T>> sourceSupplier,Consumer<? super D> resourceCleanup,boolean eager){  return onAssembly(new FluxUsing<>(resourceSupplier,sourceSupplier,resourceCleanup,eager));}  }
class C{  public void updateByte(String columnName,byte x) throws SQLException {  updateByte(findColumn(columnName),x);}  }
class C{  public boolean isQueued_1(){  return queued_1;}  }
class C{  public ProgressBar(int min,int max){  this(min,max,0);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshot-sessions/{sid}/link-targets") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList linkTargetVolumes(@PathParam("id") URI id,@PathParam("sid") URI sessionId,SnapshotSessionLinkTargetsParam param){  validateSessionPartOfConsistencyGroup(id,sessionId);  return getSnapshotSessionManager().linkTargetVolumesToSnapshotSession(sessionId,param);}  }
class C{  public MenuInflater(Context context,Object realOwner){  mContext=context;  mRealOwner=realOwner;  mActionViewConstructorArguments=new Object[]{context};  mActionProviderConstructorArguments=mActionViewConstructorArguments;}  }
class C{  @Override public Object elementAt(int index){  return ((CheckBoxListItem)super.elementAt(index)).getContent();}  }
class C{  private boolean verifyDeveloperPayload(Purchase p){  if (customVerifyPayloadHandler != null)   return customVerifyPayloadHandler.callback(p);  String payload=p.getDeveloperPayload();  return true;}  }
class C{  public static String convertUPCEtoUPCA(String upce){  char[] upceChars=new char[6];  upce.getChars(1,7,upceChars,0);  StringBuilder result=new StringBuilder(12);  result.append(upce.charAt(0));  char lastChar=upceChars[5];switch (lastChar) {case '0':case '1':case '2':    result.append(upceChars,0,2);  result.append(lastChar);result.append("0000");result.append(upceChars,2,3);break;case '3':result.append(upceChars,0,3);result.append("00000");result.append(upceChars,3,2);break;case '4':result.append(upceChars,0,4);result.append("00000");result.append(upceChars[4]);break;default :result.append(upceChars,0,5);result.append("0000");result.append(lastChar);break;}result.append(upce.charAt(7));return result.toString();}  }
class C{  public static boolean isEmpty(StringBuilder str){  return isNull(str) || str.length() <= 0;}  }
class C{  public void addRepaintNotify(Component c){  m_Repainters.add(c);}  }
class C{  public Grid(int N){  this.N=N;  population=0;  occupants=new Occupant[N][N];  for (int y=0; y < N; y++) {    for (int x=0; x < N; x++) {      occupants[y][x]=new Empty();    }  }  moveQueue=new ArrayDeque<Position>();  moveQueue.add(sentinel);}  }
class C{  @Override @CanIgnoreReturnValue public boolean offer(E e){  return add(e);}  }
class C{  private long parseDate(String dateQueryTerm) throws ParseException {  return new DateMathParser().parseMath(dateQueryTerm).getTime();}  }
class C{  @Override public void endContact(Contact contact){  if (contact.getFixtureA().getBody().getUserData() != null && !(contact.getFixtureA().getBody().getUserData() instanceof Gumball) && (contact.getFixtureA().getBody().getUserData().equals(TiltGameView.PIPE_BOTTOM) || contact.getFixtureA().getBody().getUserData().equals(TiltGameView.PIPE_SIDES))) {    mWorld.mBodiesToBeRemoved.add(contact.getFixtureB().getBody());    mSoundPoolId.remove(((Gumball)contact.getFixtureB().getBody().getUserData()).mSoundPoolId);    onBallInPipe();  } else   if (contact.getFixtureB().getBody().getUserData() != null && !(contact.getFixtureB().getBody().getUserData() instanceof Gumball) && (contact.getFixtureA().getBody().getUserData().equals(TiltGameView.PIPE_BOTTOM) || contact.getFixtureA().getBody().getUserData().equals(TiltGameView.PIPE_SIDES))) {    mWorld.mBodiesToBeRemoved.add(contact.getFixtureA().getBody());    mSoundPoolId.remove(((Gumball)contact.getFixtureA().getBody().getUserData()).mSoundPoolId);    onBallInPipe();  } else   if (contact.getFixtureA().getBody().getUserData() != null && !(contact.getFixtureA().getBody().getUserData() instanceof Gumball) && contact.getFixtureA().getBody().getUserData().equals(TiltGameView.GAME_FLOOR)) {    Gumball gumball=((Gumball)contact.getFixtureB().getBody().getUserData());    mWorld.mBodiesToBeRemoved.add(contact.getFixtureB().getBody());    mSoundPoolId.remove(gumball.mSoundPoolId);    mSoundPool.play(mSoundBallFail,1,1,0,0,1.0f);    mWorld.getWorld().step(1.0f / 60.0f,10,10);    moveOutlet((mCurrentGumball.mXInitPos));    mCountLevelBallRespawns++;  } else   if (contact.getFixtureB().getBody().getUserData() != null && !(contact.getFixtureB().getBody().getUserData() instanceof Gumball) && contact.getFixtureB().getBody().getUserData().equals(TiltGameView.GAME_FLOOR)) {    Gumball gumball=((Gumball)contact.getFixtureB().getBody().getUserData());    mWorld.mBodiesToBeRemoved.add(contact.getFixtureA().getBody());    mSoundPoolId.remove(gumball.mSoundPoolId);    mSoundPool.play(mSoundBallFail,1,1,0,0,1.0f);    mWorld.getWorld().step(1.0f / 60.0f,10,10);    moveOutlet((mCurrentGumball.mXInitPos));    mCountLevelBallRespawns++;  }}  }
class C{  public MySQLHealthMonitor(Set<String> shardNames){  this(shardNames,100,75,TimeUnit.SECONDS.toMillis(60));}  }
class C{  static private WbXmlContent[] createContentsArrayFromString(String[] strings){  if (strings == null) {    return null;  }  WbXmlContent[] contents=new WbXmlContent[strings.length];  for (int i=0; i < strings.length; i++) {    contents[i]=new WbXmlContent(strings[i]);  }  return contents;}  }
class C{  private void storeSendDetails(final String topic,final MqttMessage msg,final IMqttDeliveryToken messageToken,final String invocationContext,final String activityToken){  savedTopics.put(messageToken,topic);  savedSentMessages.put(messageToken,msg);  savedActivityTokens.put(messageToken,activityToken);  savedInvocationContexts.put(messageToken,invocationContext);}  }
class C{  protected int retrieveEndOfRightParenthesisPosition(int start,int end){  this.scanner.resetTo(start,end);  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameRPAREN:        return this.scanner.currentPosition;    }  }} catch (InvalidInputException e) {}return -1;}  }
class C{  private List<IChange> prepareRealInsertion(final IXtextDocument document,XtextResource xtextResource,InsertionPoint insertionPoint,final String NL,final String organizedImportSection) throws BadLocationException {  if (organizedImportSection.isEmpty()) {    return Collections.emptyList();  }  int offset=insertionPoint.offset;  if (offset != 0 && !insertionPoint.isBeforeJsdocDocumentation) {    offset+=NL.length();  }  IRegion lineRegion=document.getLineInformationOfOffset(offset);  ILeafNode leafNodeAtBeginOfLine=NodeModelUtils.findLeafNodeAtOffset(xtextResource.getParseResult().getRootNode(),lineRegion.getOffset());  if (leafNodeAtBeginOfLine.getGrammarElement() == typeExpressionsGrammarAccess.getML_COMMENTRule()) {    int insertOffset=insertionPoint.offset;    boolean atStartOfLine=insertionPoint.offset == lineRegion.getOffset();    String finalText=(atStartOfLine ? "" : NL) + organizedImportSection + NL;    return Lists.newArrayList(new Replacement(xtextResource.getURI().trimFragment(),insertOffset,0,finalText));  } else   if (UtilN4.isIgnoredSyntaxErrorNode(leafNodeAtBeginOfLine,InternalSemicolonInjectingParser.SEMICOLON_INSERTED) && (leafNodeAtBeginOfLine.getTotalOffset() < lineRegion.getOffset())) {    int insertOffset=insertionPoint.offset;    if ((!insertionPoint.isBeforeJsdocDocumentation) && n4JSDocumentationProvider.isDocumentationStyle(NodeModelUtils.getTokenText(leafNodeAtBeginOfLine))) {      insertOffset=leafNodeAtBeginOfLine.getTotalOffset();    }    String finalText=NL + organizedImportSection + NL;    return Lists.newArrayList(new Replacement(xtextResource.getURI().trimFragment(),insertOffset,0,finalText));  } else {    return Lists.newArrayList(ChangeProvider.insertLineAbove(document,offset,organizedImportSection,false));  }}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  protected void storeRefreshToken(final URI targetUri,final Token refreshToken){  Debug.Assert(targetUri != null,"The targetUri parameter is null");  Debug.Assert(refreshToken != null,"The refreshToken parameter is null");  Trace.writeLine("BaseVsoAuthentication::storeRefreshToken");  this.AdaRefreshTokenStore.writeToken(targetUri,refreshToken);}  }
class C{  public int size(){  if (size == 0)   return 0;  expungeStaleEntries();  return size;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.962 -0500",hash_original_method="C0A81B9ED58B964194A74C6FBD15C07F",hash_generated_method="513F3F75E0B8462A5939A4F0E901A89D") public boolean consumeRights(int permission){  int res=nativeConsumeRights(permission);  if (JNI_DRM_FAILURE == res)   return false;  return true;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == GamlDefinition.class) {switch (derivedFeatureID) {case GamlPackage.SSPECIES__NAME:      return GamlPackage.GAML_DEFINITION__NAME;default :    return -1;}}if (baseClass == VarDefinition.class) {switch (derivedFeatureID) {default :  return -1;}}if (baseClass == S_Declaration.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == ActionDefinition.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == TypeDefinition.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void testTicket571b() throws RepositoryException, MalformedQueryException, UpdateExecutionException, QueryEvaluationException {  con.prepareUpdate(QueryLanguage.SPARQL,"DROP ALL").execute();  con.prepareUpdate(QueryLanguage.SPARQL,"PREFIX graphA:  <http://example/graphA> \n" + "INSERT DATA { \n" + " GRAPH graphA: { \n"+ "   <http://nobnode> <http://example/p> 2 . \n"+ "   <http://nobnode> a <http://example/Foo> . \n"+ "   <http://example/s> <http://example/p> 2 . \n"+ "}}\n").execute();{    final String query="SELECT * WHERE { GRAPH <http://example/graphA> { ?s ?p ?v . } }";    assertEquals("graphA",3L,countSolutions(query));  }  con.prepareUpdate(QueryLanguage.SPARQL,"PREFIX graphA:  <http://example/graphA> \n" + "PREFIX tempGraph:  <http://example/temp> \n" + "DELETE { GRAPH graphA:    { ?s ?p ?v . } } \n"+ "INSERT { GRAPH tempGraph: { ?s ?p ?v . } } \n"+ "WHERE { GRAPH graphA: { \n"+ "    ?s a <http://example/Foo> . \n"+ "    ?s ?p ?v . } }\n").execute();{    final String query="SELECT * WHERE { GRAPH <http://example/graphA> { ?s ?p ?v . } }";    assertEquals("graphA",1L,countSolutions(query));  }{    final String query="SELECT * WHERE { GRAPH <http://example/temp> { ?s ?p ?v . } }";    assertEquals("tempGraph",2L,countSolutions(query));  }}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("spider.options.title"));  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(314,245);  }  this.add(getPanelSpider(),getPanelSpider().getName());}  }
class C{  private void startBackgroundTasks(){  if (!_schemaUtil.isStandby()) {    if (!disableScheduledDbRepair) {      startBackgroundNodeRepairTask();    }    if (_gcExecutor != null) {      _gcExecutor.setDbServiceId(_serviceInfo.getId());      _gcExecutor.start();    }    if (_taskScrubber != null) {      _taskScrubber.start();    }    if (_eventScrubber != null) {      _eventScrubber.start();    }  }  startBackgroundDetectorTask();  startBackgroundCompactTask();}  }
class C{  public void showTextOnFeed(String message,boolean showOnArena){  if (showOnArena) {    showTextOnFeed(message);  } else {    super.showTextOnFeed(message);  }}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  static public byte encodeByte(final int v){  int i=v;  if (i < 0) {    i=i - 0x80;  } else {    i=i + 0x80;  }  return (byte)(i & 0xff);}  }
class C{  public String toString(boolean inverse){  return toString(inverse ? e2f : f2e);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.261 -0400",hash_original_method="2B1757BB83768A507629744C75B61CCF",hash_generated_method="809F87E71C146CA59AD758D8D6626C52") public PriorityQueue(SortedSet<? extends E> c){  getFromSortedSet(c);}  }
class C{  protected boolean accept(Component aComponent){  if (!super.accept(aComponent))   return false;  if (aComponent instanceof JTabbedPane)   return false;  if (aComponent instanceof CEditor) {    CEditor ed=(CEditor)aComponent;    if (!ed.isReadWrite())     return false;    if (m_default && ("AD_Client_ID".equals(aComponent.getName()) || "AD_Org_ID".equals(aComponent.getName())))     return false;  }  if (aComponent.getParent() instanceof JToolBar)   return false;  return true;}  }
class C{  private void cbCnvSystemItemStateChanged(java.awt.event.ItemEvent evt){  EcuDataItem.cnvSystem=cbCnvSystem.getSelectedIndex();switch (tabMain.getSelectedIndex()) {case 2:    panObdData.updateAllTableRows(EcuDataPv.FID_UNITS);  break;default :}}  }
class C{  private boolean containsIgnoreCase(List<String> stringlist,String match){  for (  String s : stringlist) {    if (s.equalsIgnoreCase(match)) {      return true;    }  }  return false;}  }
class C{  public static boolean openIntent(Context context,Intent intent,boolean allowSelfOpen){  boolean activityResolved=ExternalNavigationDelegateImpl.resolveIntent(context,intent,allowSelfOpen);  if (activityResolved) {    try {      context.startActivity(intent);      return true;    } catch (    ActivityNotFoundException ex) {      Log.d(TAG,"activity not found for " + intent.getType() + " over "+ intent.getData().getScheme(),ex);    }  }  return false;}  }
class C{  public static void closeQuietly(Socket socket){  if (socket != null) {    try {      socket.close();    } catch (    Exception ignored) {    }  }}  }
class C{  public String outputWordCountsTipText(){  return "Output word counts rather than boolean 0 or 1" + "(indicating presence or absence of a word).";}  }
class C{  public static boolean isInvalid(int c){  return !isValid(c);}  }
class C{  private static void removeDataEventListenerFromPeer(Peer peer,PeerDataEventListener listener){  peer.removeBlocksDownloadedEventListener(listener);  peer.removeChainDownloadStartedEventListener(listener);  peer.removeGetDataEventListener(listener);  peer.removePreMessageReceivedEventListener(listener);}  }
class C{  public void postMerge(String ColumnName,int to_ID){  if (ColumnName.equals(AD_ORG_ID)) {  } else   if (ColumnName.equals(AD_USER_ID)) {  } else   if (ColumnName.equals(C_BPARTNER_ID)) {    MBPartner bp=new MBPartner(Env.getCtx(),to_ID,null);    if (bp.get_ID() != 0) {      MPayment[] payments=MPayment.getOfBPartner(Env.getCtx(),bp.getC_BPartner_ID(),null);      for (int i=0; i < payments.length; i++) {        MPayment payment=payments[i];        if (payment.testAllocation())         payment.saveEx();      }      MInvoice[] invoices=MInvoice.getOfBPartner(Env.getCtx(),bp.getC_BPartner_ID(),null);      for (int i=0; i < invoices.length; i++) {        MInvoice invoice=invoices[i];        if (invoice.testAllocation())         invoice.saveEx();      }      bp.setTotalOpenBalance();      bp.setActualLifeTimeValue();      bp.saveEx();    }  } else   if (ColumnName.equals(M_PRODUCT_ID)) {  }}  }
class C{  public boolean isSolution(CSP csp){  return isConsistent(csp.getConstraints()) && isComplete(csp.getVariables());}  }
class C{  protected void checkChildType(Node n,boolean replace){switch (n.getNodeType()) {case ELEMENT_NODE:case PROCESSING_INSTRUCTION_NODE:case COMMENT_NODE:case TEXT_NODE:case CDATA_SECTION_NODE:case ENTITY_REFERENCE_NODE:case DOCUMENT_FRAGMENT_NODE:    break;default :  throw createDOMException(DOMException.HIERARCHY_REQUEST_ERR,"child.type",new Object[]{new Integer(getNodeType()),getNodeName(),new Integer(n.getNodeType()),n.getNodeName()});}}  }
class C{  public static X509Certificate loadCertificate(InputStream input) throws CertificateParsingException {  try {    return Iterables.getOnlyElement(FluentIterable.from(CertificateFactory.getInstance("X.509").generateCertificates(input)).filter(X509Certificate.class));  } catch (  CertificateException e) {    propagateIfInstanceOf(e,CertificateParsingException.class);    throw new CertificateParsingException(e);  }catch (  NoSuchElementException e) {    throw new CertificateParsingException("No X509Certificate found.");  }catch (  IllegalArgumentException e) {    throw new CertificateParsingException("Multiple X509Certificate found.");  }}  }
class C{  public ImageFetcher(Context context,ImageFetcherParams params){  super(context);  setParams(params);}  }
class C{  public int size(){  return counter;}  }
class C{  public void load(Element element,Object o){  log.error("load(Element, Object) called unexpectedly");}  }
class C{  @Override public void stopVisualization(Object objId){}  }
class C{  @SuppressWarnings("rawtypes") public Collection toCollection() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private boolean parseBoolean(String[] ss,int ix){  return ix < ss.length && "1".equals(ss[ix]);}  }
class C{  @Override public void partVisible(final IWorkbenchPartReference partRef){}  }
class C{  EmulatedFields emulatedFields(){  return emulatedFields;}  }
class C{  public void incLootForItem(String item,int count){  itemCounter.incLootForItem(item,count);}  }
class C{  public ApnsFuture send(byte[] deviceTokenBytes,ApnsPayload apnsPayload){  checkClosed();  return this.send(deviceTokenBytes,apnsPayload,tryTimes);}  }
class C{  protected synchronized void createDbIfNotExists(){  if (mOpenHelper == null) {    mOpenHelper=new DatabaseHelper(getContext());  }}  }
class C{  public static final Vec3D randomVector(Random rnd){  Vec3D v=new Vec3D(rnd.nextFloat() * 2 - 1,rnd.nextFloat() * 2 - 1,rnd.nextFloat() * 2 - 1);  return v.normalize();}  }
class C{  private TopologyUpdaterThread(){  super(id + "-topology-update");}  }
class C{  public static <T extends Throwable>T writeStackTraces(T throwable,StreamOutput out) throws IOException {  StackTraceElement[] stackTrace=throwable.getStackTrace();  out.writeVInt(stackTrace.length);  for (  StackTraceElement element : stackTrace) {    out.writeString(element.getClassName());    out.writeOptionalString(element.getFileName());    out.writeString(element.getMethodName());    out.writeVInt(element.getLineNumber());  }  Throwable[] suppressed=throwable.getSuppressed();  out.writeVInt(suppressed.length);  for (  Throwable t : suppressed) {    out.writeThrowable(t);  }  return throwable;}  }
class C{  public double distance(Vector4i v){  return Math.sqrt(distanceSquared(v));}  }
class C{  public SolrIndexConfig(SolrConfig solrConfig,String prefix,SolrIndexConfig def){  if (prefix == null) {    prefix="indexConfig";    log.debug("Defaulting to prefix \"" + prefix + "\" for index configuration");  }  if (def == null) {    def=new SolrIndexConfig(solrConfig);  }  Object unused=solrConfig.getNode(prefix,false);  luceneVersion=solrConfig.luceneMatchVersion;  assertWarnOrFail("The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\"myclass\"/> instead.",!((solrConfig.getNode(prefix + "/mergeScheduler",false) != null) && (solrConfig.get(prefix + "/mergeScheduler/@class",null) == null)),true);  assertWarnOrFail("The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\"myclass\"/> instead.",!((solrConfig.getNode(prefix + "/mergePolicy",false) != null) && (solrConfig.get(prefix + "/mergePolicy/@class",null) == null)),true);  assertWarnOrFail("The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.",solrConfig.get(prefix + "/luceneAutoCommit",null) == null,true);  effectiveUseCompoundFileSetting=solrConfig.getBool(prefix + "/useCompoundFile",def.getUseCompoundFile());  maxBufferedDocs=solrConfig.getInt(prefix + "/maxBufferedDocs",def.maxBufferedDocs);  maxMergeDocs=solrConfig.getInt(prefix + "/maxMergeDocs",def.maxMergeDocs);  mergeFactor=solrConfig.getInt(prefix + "/mergeFactor",def.mergeFactor);  ramBufferSizeMB=solrConfig.getDouble(prefix + "/ramBufferSizeMB",def.ramBufferSizeMB);  writeLockTimeout=solrConfig.getInt(prefix + "/writeLockTimeout",def.writeLockTimeout);  lockType=solrConfig.get(prefix + "/lockType",def.lockType);  mergeSchedulerInfo=getPluginInfo(prefix + "/mergeScheduler",solrConfig,def.mergeSchedulerInfo);  mergePolicyInfo=getPluginInfo(prefix + "/mergePolicy",solrConfig,def.mergePolicyInfo);  mergePolicyFactoryInfo=getPluginInfo(prefix + "/mergePolicyFactory",solrConfig,def.mergePolicyFactoryInfo);  if (mergePolicyInfo != null && mergePolicyFactoryInfo != null) {    throw new IllegalArgumentException("<mergePolicy> and <mergePolicyFactory> are mutually exclusive.");  }  if (maxMergeDocs != def.maxMergeDocs && mergePolicyFactoryInfo != null) {    throw new IllegalArgumentException("<maxMergeDocs> and <mergePolicyFactory> are mutually exclusive.");  }  if (mergeFactor != def.mergeFactor && mergePolicyFactoryInfo != null) {    throw new IllegalArgumentException("<mergeFactor> and <mergePolicyFactory> are mutually exclusive.");  }  assertWarnOrFail("Beginning with Solr 5.5, <mergePolicy> is deprecated, use <mergePolicyFactory> instead.",(mergePolicyInfo == null),false);  assertWarnOrFail("Beginning with Solr 5.5, <maxMergeDocs> is deprecated, configure it on the relevant <mergePolicyFactory> instead.",(maxMergeDocs == def.maxMergeDocs),false);  assertWarnOrFail("Beginning with Solr 5.5, <mergeFactor> is deprecated, configure it on the relevant <mergePolicyFactory> instead.",(mergeFactor == def.mergeFactor),false);  String val=solrConfig.get(prefix + "/termIndexInterval",null);  if (val != null) {    throw new IllegalArgumentException("Illegal parameter 'termIndexInterval'");  }  boolean infoStreamEnabled=solrConfig.getBool(prefix + "/infoStream",false);  if (infoStreamEnabled) {    String infoStreamFile=solrConfig.get(prefix + "/infoStream/@file",null);    if (infoStreamFile == null) {      log.info("IndexWriter infoStream solr logging is enabled");      infoStream=new LoggingInfoStream();    } else {      throw new IllegalArgumentException("Remove @file from <infoStream> to output messages to solr's logfile");    }  }  mergedSegmentWarmerInfo=getPluginInfo(prefix + "/mergedSegmentWarmer",solrConfig,def.mergedSegmentWarmerInfo);  assertWarnOrFail("Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)",(null == solrConfig.getNode(prefix + "/checkIntegrityAtMerge",false)),true);}  }
class C{  public GenericEntry updateSsoSigningKey(String base64EncodedKey) throws IOException, AppsForYourDomainException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty(AdminSettingsConstants.KEY_PROPERTY,base64EncodedKey);  return update(new URL(ssoSigningKeyUrl),entry);}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  String typeName=pool.getUtf8Info(typeIndex);  if (members == null) {    writer.annotation(typeName,0);    return;  }  writer.annotation(typeName,members.size());  Iterator it=members.values().iterator();  while (it.hasNext()) {    Pair pair=(Pair)it.next();    writer.memberValuePair(pair.name);    pair.value.write(writer);  }}  }
class C{  @SuppressWarnings("unchecked") static public void dumpElement(Element name){  List<Element> l=name.getChildren();  for (  Element l1 : l) {    System.out.println(" Element: " + l1.getName() + " ns: "+ l1.getNamespace());  }}  }
class C{  public void receiveResultdeletePlatformSession(org.oscm.example.client.SessionServiceStub.DeletePlatformSessionResponseE result){}  }
class C{  protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers){}  }
class C{  public DimensionMismatchException(Localizable specific,int wrong,int expected){  super(specific,Integer.valueOf(wrong),Integer.valueOf(expected));  dimension=expected;}  }
class C{  public Node buildTreeFull(Node node,int depth){  if (depth == 0) {    return node.copyNode();  } else {    Node copy=node.copyNode();    for (int i=0; i < node.getNumberOfArguments(); i++) {      if (node.getArgument(i) == null) {        copy.setArgument(i,buildTreeFull(node.getArgumentType(i),depth - 1));      } else {        copy.setArgument(i,buildTreeFull(node.getArgument(i),depth - 1));      }    }    return copy;  }}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public Map<Integer,? extends Table> tableMap(){  return Collections.unmodifiableMap(this.tables);}  }
class C{  public void resetAndLog(String label){  logger.fine(label + ": " + reset()+ "ms");}  }
class C{  public XmlTransformer(){  m_transformer=null;  m_source=null;}  }
class C{  public static ClassInfo[] findOrCreateClass(String[] dalvikNames){  ClassInfo[] ci=new ClassInfo[dalvikNames.length];  for (int i=0; i < dalvikNames.length; ++i) {    ci[i]=findOrCreateClass(dalvikNames[i]);  }  return ci;}  }
class C{  public AjaxBehaviorEvent(UIComponent component,Behavior behavior){  super(component,behavior);}  }
class C{  public GenericProxyFactory group(String group){  this.group=group;  return this;}  }
class C{  private void removeMoney(String slot,RPObject obj){  HashMap<String,RPObject> set=money.get(slot);  if ((set != null) && (set.remove(obj.get("id")) != null)) {    updateMoney();  }}  }
class C{  public static String buildPKSig(GenericEntity pk,String suffix){  StringBuilder sig=new StringBuilder("");  Collection<String> keyColl=pk.getPrimaryKey().getAllKeys();  List<String> keyList=UtilMisc.makeListWritable(keyColl);  Collections.sort(keyList);  for (  String ky : keyList) {    String val=(String)pk.get(ky);    if (UtilValidate.isNotEmpty(val)) {      if (sig.length() > 0)       sig.append("_");      sig.append(val);    }  }  if (UtilValidate.isNotEmpty(suffix)) {    if (sig.length() > 0)     sig.append("_");    sig.append(suffix);  }  return sig.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected double distance(int doc,FunctionValues dv1,FunctionValues dv2) throws IOException {  double[] vals1=new double[source1.dimension()];  double[] vals2=new double[source1.dimension()];  dv1.doubleVal(doc,vals1);  dv2.doubleVal(doc,vals2);  return vectorDistance(vals1,vals2,power,oneOverPower);}  }
class C{  public static List<LrcRow> createRows(String standardLrcLine){  try {    if (standardLrcLine.indexOf("[") != 0 || standardLrcLine.indexOf("]") != 9) {      return null;    }    int lastIndexOfRightBracket=standardLrcLine.lastIndexOf("]");    String content=standardLrcLine.substring(lastIndexOfRightBracket + 1,standardLrcLine.length());    String times=standardLrcLine.substring(0,lastIndexOfRightBracket + 1).replace("[","-").replace("]","-");    String arrTimes[]=times.split("-");    List<LrcRow> listTimes=new ArrayList<LrcRow>();    for (    String temp : arrTimes) {      if (temp.trim().length() == 0) {        continue;      }      LrcRow lrcRow=new LrcRow(temp,timeConvert(temp),content);      listTimes.add(lrcRow);    }    return listTimes;  } catch (  Exception e) {    Log.e(TAG,"createRows exception:" + e.getMessage());    return null;  }}  }
class C{  public StreamTimestamp subStream(String substreamName){  return new StreamTimestamp(streamId + ":" + substreamName,timestamp);}  }
class C{  private static String normalizedOverrideKey(String origKey){  String fixedKey=CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,origKey);  return fixedKey.replace('_','.');}  }
class C{  private boolean isNoun(String word){  if (nouns == null)   return false;  return nouns.contains(word.toLowerCase());}  }
class C{  public RegexValidator(String[] regexs,boolean caseSensitive){  if (regexs == null || regexs.length == 0) {    throw new IllegalArgumentException("Regular expressions are missing");  }  patterns=new Pattern[regexs.length];  int flags=(caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);  for (int i=0; i < regexs.length; i++) {    if (regexs[i] == null || regexs[i].length() == 0) {      throw new IllegalArgumentException("Regular expression[" + i + "] is missing");    }    patterns[i]=Pattern.compile(regexs[i],flags);  }}  }
class C{  protected static ValueTrackerElement transform(final ReilInstruction instruction,final ValueTrackerElement incomingState,final IElementGenerator generator){  Preconditions.checkNotNull(instruction,"Error: instruction argument can not be null");  Preconditions.checkNotNull(incomingState,"Error: incomingState argument can not be null");  if (inputOperandsAreLiterals(instruction)) {    return transformLiterals(instruction,incomingState,generator);  } else   if (inputOperandsAreRegisters(instruction)) {    return transformRegisters(instruction,incomingState,generator);  } else   if (inputOperandsAreRegisterLiteral(instruction) || inputOperandsAreLiteralRegister(instruction)) {    return transformRegisterLiteral(instruction,incomingState,generator);  }  throw new IllegalStateException("Not yet implemented");}  }
class C{  @Override protected void processMouseEvent(MouseEvent evt){  super.processMouseEvent(evt);  if (evt.getID() == MouseEvent.MOUSE_CLICKED)   fireActionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,getNormalText()));}  }
class C{  public void resetCvsCommand(){  super.resetCvsCommand();  setRecursive(true);  setWatch(null);}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (AcelaAddress.validSystemNameFormat(systemName,'T',getSystemPrefix()));}  }
class C{  public void broadcast(ModelQuery query,boolean withoutMe){  Map<String,Object> paramsToSend=prepareData(query);  broadcast(query.getTargetServiceClass(),withoutMe,paramsToSend);}  }
class C{  private String removeHtmlTagsAndSpaces(final String strValue){  String returnValue=null;  if (strValue != null) {    final Reader strReader=new StringReader(strValue);    final MyHtmlParser parser=new MyHtmlParser();    returnValue=parser.parseMyHtml(strReader,true);  }  return returnValue;}  }
class C{  @Nullable public static <T>T callMethod17(Object object,String methodName,@Nullable Class<T> resultType,@Nullable Class[] paramTypes,Object... paramValues) throws SQLException {  try {    Object result=object.getClass().getMethod(methodName,paramTypes).invoke(object,paramValues);    if (result == null || resultType == null) {      return null;    } else {      return resultType.cast(result);    }  } catch (  InvocationTargetException e) {    if (e.getTargetException() instanceof SQLException) {      throw (SQLException)e.getTargetException();    } else {      throw new SQLException(e.getTargetException());    }  }catch (  Throwable e) {    throw new SQLFeatureNotSupportedException(JDBCConstants.ERROR_API_NOT_SUPPORTED_17,e);  }}  }
class C{  boolean isGenOp(SyntaxTreeNode tn){  int kind=tn.getKind();  if (kind == N_GenPrefixOp || kind == N_GenNonExpPrefixOp || kind == N_GenInfixOp || kind == N_GenPostfixOp || kind == N_FcnAppl)   return true; else   return false;}  }
class C{  @Override public void shutdown(){  subscription.unsubscribe();  LOGGER.info("Shutting down clients");  registrationClient.shutdown();  interestClient.shutdown();}  }
class C{  public ConfigurationException(String message){  super(message);}  }
class C{  public static double[] toDoubleArray(Byte[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].doubleValue();  }  return result;}  }
class C{  private void zApplyIndependentCalendarPanelButtonVisibilityIfNeeded(){  if (parentCalendarPanel != null) {    parentCalendarPanel.zApplyVisibilityOfButtons();  }}  }
class C{  public static int gluProject(float objX,float objY,float objZ,float[] model,int modelOffset,float[] project,int projectOffset,int[] view,int viewOffset,float[] win,int winOffset){  float[] scratch=sScratch;synchronized (scratch) {    final int M_OFFSET=0;    final int V_OFFSET=16;    final int V2_OFFSET=20;    Matrix.multiplyMM(scratch,M_OFFSET,project,projectOffset,model,modelOffset);    scratch[V_OFFSET + 0]=objX;    scratch[V_OFFSET + 1]=objY;    scratch[V_OFFSET + 2]=objZ;    scratch[V_OFFSET + 3]=1.0f;    Matrix.multiplyMV(scratch,V2_OFFSET,scratch,M_OFFSET,scratch,V_OFFSET);    float w=scratch[V2_OFFSET + 3];    if (w == 0.0f) {      return GL10.GL_FALSE;    }    float rw=1.0f / w;    win[winOffset]=view[viewOffset] + view[viewOffset + 2] * (scratch[V2_OFFSET + 0] * rw + 1.0f) * 0.5f;    win[winOffset + 1]=view[viewOffset + 1] + view[viewOffset + 3] * (scratch[V2_OFFSET + 1] * rw + 1.0f) * 0.5f;    win[winOffset + 2]=(scratch[V2_OFFSET + 2] * rw + 1.0f) * 0.5f;  }  return GL10.GL_TRUE;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void play(){  mSoundPool.play(mHandle,mVolume,mVolume,1,0,1.0f);}  }
class C{  public final boolean readBoolean() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return temp != 0;}  }
class C{  public boolean isNull(){  return isNull;}  }
class C{  private void verifyAuthorizedInTenantOrg(List<ACLEntry> aclEntries){  boolean isUserAuthorized=false;  StorageOSUser user=getUserFromContext();  Iterator<ACLEntry> aclEntriesIterator=aclEntries.iterator();  while (aclEntriesIterator.hasNext()) {    ACLEntry aclEntry=aclEntriesIterator.next();    if (aclEntry == null) {      continue;    }    if (user.getTenantId().toString().equals(aclEntry.getTenant()) || isSystemAdminOrMonitorUser() || _permissionsHelper.userHasGivenRole(user,URI.create(aclEntry.getTenant()),Role.TENANT_ADMIN)) {      isUserAuthorized=true;      break;    }  }  if (!isUserAuthorized) {    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }}  }
class C{  public void testConvenienceMethods() throws Exception {  StringWriter sw=new StringWriter();  JsonGenerator gen=new JsonFactory().createJsonGenerator(sw);  gen.writeStartObject();  final BigDecimal dec=new BigDecimal("0.1");  final String TEXT="\"some\nString!\"";  gen.writeNullField("null");  gen.writeBooleanField("bt",true);  gen.writeBooleanField("bf",false);  gen.writeNumberField("int",-1289);  gen.writeNumberField("dec",dec);  gen.writeObjectFieldStart("ob");  gen.writeStringField("str",TEXT);  gen.writeEndObject();  gen.writeArrayFieldStart("arr");  gen.writeEndArray();  gen.writeEndObject();  gen.close();  String docStr=sw.toString();  JsonParser jp=createParserUsingReader(docStr);  assertEquals(JsonToken.START_OBJECT,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("null",jp.getText());  assertEquals(JsonToken.VALUE_NULL,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("bt",jp.getText());  assertEquals(JsonToken.VALUE_TRUE,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("bf",jp.getText());  assertEquals(JsonToken.VALUE_FALSE,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("int",jp.getText());  assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("dec",jp.getText());  assertEquals(JsonToken.VALUE_NUMBER_FLOAT,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("ob",jp.getText());  assertEquals(JsonToken.START_OBJECT,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("str",jp.getText());  assertEquals(JsonToken.VALUE_STRING,jp.nextToken());  assertEquals(TEXT,getAndVerifyText(jp));  assertEquals(JsonToken.END_OBJECT,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("arr",jp.getText());  assertEquals(JsonToken.START_ARRAY,jp.nextToken());  assertEquals(JsonToken.END_ARRAY,jp.nextToken());  assertEquals(JsonToken.END_OBJECT,jp.nextToken());  assertEquals(null,jp.nextToken());  jp.close();}  }
class C{  public void trimToSize(){  if (size != data.length) {    E[] newData=(E[])(new Object[size]);    System.arraycopy(data,0,newData,0,size);    data=newData;  }}  }
class C{  public DirectedGraph(){}  }
class C{  public void addSeries(final String title,final double[] values){  int cnt=1;  for (  double value : values) {    String category=(cnt > this.categories.length ? Integer.toString(cnt) : this.categories[cnt - 1]);    this.dataset.addValue(value,title,category);    cnt++;  }}  }
class C{  private String resolve(VariableReference var,boolean reportUndefinedVariables,boolean resolveVariables,IStringVariableManager manager) throws CoreException {  String text=var.getText();  int pos=text.indexOf(VARIABLE_ARG);  String name=null;  String arg=null;  if (pos > 0) {    name=text.substring(0,pos);    pos++;    if (pos < text.length()) {      arg=text.substring(pos);    }  } else {    name=text;  }  IValueVariable valueVariable=manager.getValueVariable(name);  if (valueVariable == null) {    IDynamicVariable dynamicVariable=manager.getDynamicVariable(name);    if (dynamicVariable == null) {      if (reportUndefinedVariables) {        throw new CoreException(new Status(IStatus.ERROR,VariablesPlugin.getUniqueIdentifier(),VariablesPlugin.INTERNAL_ERROR,NLS.bind(VariablesMessages.StringSubstitutionEngine_3,new String[]{name}),null));      }      return getOriginalVarText(var);    }    if (resolveVariables) {      fSubs=true;      return dynamicVariable.getValue(arg);    }    return getOriginalVarText(var);  }  if (arg == null) {    if (resolveVariables) {      fSubs=true;      return valueVariable.getValue();    }    return getOriginalVarText(var);  }  throw new CoreException(new Status(IStatus.ERROR,VariablesPlugin.getUniqueIdentifier(),VariablesPlugin.INTERNAL_ERROR,NLS.bind(VariablesMessages.StringSubstitutionEngine_4,new String[]{valueVariable.getName()}),null));}  }
class C{  public void removeAllZeros(){  for (  K key : map.keySet()) {    AtomicLong atomic=map.get(key);    if (atomic != null && atomic.get() == 0L) {      map.remove(key,atomic);    }  }}  }
class C{  protected void changeToolbarColor(String color){  toolbar.setBackgroundColor(Color.parseColor(color));}  }
class C{  private static LiveExprNode astToLive(Tool tool,ExprNode expr,Context con){switch (expr.getKind()) {case OpApplKind:{      OpApplNode expr1=(OpApplNode)expr;      return astToLiveAppl(tool,expr1,con);    }case LetInKind:{    LetInNode expr1=(LetInNode)expr;    return astToLive(tool,expr1.getBody(),con);  }case SubstInKind:{  SubstInNode expr1=(SubstInNode)expr;  Subst[] subs=expr1.getSubsts();  int slen=subs.length;  Context con1=con;  for (int i=0; i < slen; i++) {    Subst sub=subs[i];    con1=con1.cons(sub.getOp(),tool.getVal(sub.getExpr(),con,false));  }  return astToLive(tool,expr1.getBody(),con1);}default :{int level=Spec.getLevel(expr,con);if (level > 2) {  Assert.fail(EC.TLC_LIVE_CANNOT_HANDLE_FORMULA,expr.toString());}return astToLive(tool,expr,con,level);}}}  }
class C{  public FileDictionary(Reader reader,String fieldDelimiter){  in=new BufferedReader(reader);  this.fieldDelimiter=fieldDelimiter;}  }
class C{  public void doneWithParameters(){  if (info.parameterCount == VAR_ARGS) {    int len=varArgs.size();    checkParameterCount(len);    args=new Expression[len];    varArgs.toArray(args);    varArgs=null;  } else {    int len=args.length;    if (len > 0 && args[len - 1] == null) {      throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2,info.name,"" + len);    }  }}  }
class C{  public void clearStack(){  top=0;}  }
class C{  private String createDetailMessage(ProceedingJoinPoint proceedingJoinPoint,String baseMessage,boolean useArgsInDetails){  if (useArgsInDetails) {    StringBuilder sb=new StringBuilder().append(baseMessage);    appendArgs(sb,proceedingJoinPoint.getArgs());    return sb.toString();  } else {    return baseMessage;  }}  }
class C{  private Expression parseEvaluation(VariableExpression variable) throws ParseException {  expect(Token.EQUATION);  if (token != Token.STRING) {    throw new ParseException("Evaluations must be of the form Var = String",lexer.getCurrentOffset());  }  String s=lexer.getTokenString();  nextToken();  return new EvaluationExpression(variable,s.replace("\"",""));}  }
class C{  public void cut(){  if (editable) {    copy();    setSelectedText("");  }}  }
class C{  public static SystemCfg createSystem(){  return new SystemCfgImpl();}  }
class C{  @Inject protected OpenProjectViewImpl(org.eclipse.che.ide.Resources resources,CoreLocalizationConstant localization){  this.res=resources;  this.localization=localization;  Widget widget=uiBinder.createAndBindUi(this);  TableElement tableElement=Elements.createTableElement();  tableElement.setAttribute("style","width: 100%");  list=SimpleList.create((SimpleList.View)tableElement,res.defaultSimpleListCss(),listItemRenderer,listDelegate);  this.listPanel.add(list);  this.setTitle("Open Project");  this.setWidget(widget);  createButtons();}  }
class C{  public MemoryChunk(final long address,final int size){  this(address,new byte[size]);}  }
class C{  private void createMigrationTaskPage(){  MigrationTaskEditor migrationTaskEditor=new MigrationTaskEditor(migrationTask,getContainer());  int index=addPage(migrationTaskEditor.getControl());  setPageText(index,"Task");  taskListeners.add(migrationTaskEditor);}  }
class C{  public ShadowFactory(){  this(5,0.5f,Color.BLACK);}  }
class C{  @Override protected void readEntityFromNBT(NBTTagCompound nbt){  try {    NBTTagCompound blastSave=nbt.getCompoundTag("blast");    if (this.blast == null) {      Class clazz=Class.forName(blastSave.getString("class"));      Constructor constructor=clazz.getConstructor(World.class,Entity.class,double.class,double.class,double.class,float.class);      this.blast=(Blast)constructor.newInstance(this.worldObj,null,this.posX,this.posY,this.posZ,0);    }    this.blast.readFromNBT(blastSave);  } catch (  Exception e) {    DefenseTech.LOGGER.severe("Error in loading an explosion!");    e.printStackTrace();  }}  }
class C{  private void checkForObserveOption(final Exchange exchange,final Resource resource){  Request request=exchange.getRequest();  if (request.getCode() != Code.GET) {    return;  }  InetSocketAddress source=new InetSocketAddress(request.getSource(),request.getSourcePort());  if (request.getOptions().hasObserve() && resource.isObservable()) {    if (request.getOptions().getObserve() == 0) {      LOGGER.log(Level.FINER,"Initiate an observe relation between {0}:{1} and resource {2}",new Object[]{request.getSource(),request.getSourcePort(),resource.getURI()});      ObservingEndpoint remote=observeManager.findObservingEndpoint(source);      ObserveRelation relation=new ObserveRelation(remote,resource,exchange);      remote.addObserveRelation(relation);      exchange.setRelation(relation);    } else     if (request.getOptions().getObserve() == 1) {      ObserveRelation relation=observeManager.getRelation(source,request.getToken());      if (relation != null) {        relation.cancel();      }    }  }}  }
class C{  public ParserConfig(){  super();}  }
class C{  public void print(IndentWriter writer){  writer.println("LookupInstructionPlan" + " fromStream=" + fromStream + " fromStreamName="+ fromStreamName+ " toStreams="+ Arrays.toString(toStreams));  writer.incrIndent();  for (int i=0; i < lookupPlans.length; i++) {    if (lookupPlans[i] != null) {      writer.println("plan " + i + " :"+ lookupPlans[i].toString());    } else {      writer.println("plan " + i + " : no lookup plan");    }  }  writer.decrIndent();}  }
class C{  public WrongClassTypeException(Throwable cause){  super(cause);}  }
class C{  public Builder writeGraph(final Configuration configuration){  configuration.getKeys().forEachRemaining(null);  return this;}  }
class C{  private State applyPatch(State current,State patch){  PatchUtils.patchState(current,patch);  return current;}  }
class C{  public void refresh(FormatProcessor formatter){}  }
class C{  public static void showNetworkUnavailableMessage(Context context){  AlertDialog.Builder builder=CommonDialogUtils.getAlertDialogWithOneButton(context,context.getResources().getString(R.string.error_network_unavailable),context.getResources().getString(R.string.button_ok),null);  builder.show();}  }
class C{  @Override protected String convertToString(final Object value) throws Throwable {  if (this.useLocaleFormat && value instanceof Number) {    NumberFormat format=this.getFormat();    format.setGroupingUsed(false);    return format.format(value);  } else {    return value.toString();  }}  }
class C{  public final String createMessage(String msgKey,Object args[]){  if (m_resourceBundle == null)   m_resourceBundle=loadResourceBundle(m_resourceBundleName);  if (m_resourceBundle != null) {    return createMsg(m_resourceBundle,msgKey,args);  } else   return "Could not load the resource bundles: " + m_resourceBundleName;}  }
class C{  public void testCallableStatement() throws Exception {  if (versionMeetsMinimum(5,0)) {    CallableStatement cStmt=null;    String stringVal="abcdefg";    int intVal=42;    try {      try {        this.stmt.executeUpdate("DROP PROCEDURE testCallStmt");      } catch (      SQLException sqlEx) {        if (sqlEx.getMessage().indexOf("does not exist") == -1) {          throw sqlEx;        }      }      this.stmt.executeUpdate("DROP TABLE IF EXISTS callStmtTbl");      this.stmt.executeUpdate("CREATE TABLE callStmtTbl (x CHAR(16), y INT)");      this.stmt.executeUpdate("CREATE PROCEDURE testCallStmt(n INT, x CHAR(16), y INT) WHILE n DO SET n = n - 1;" + " INSERT INTO callStmtTbl VALUES (x, y); END WHILE;");      int rowsToCheck=15;      cStmt=this.conn.prepareCall("{call testCallStmt(?,?,?)}");      cStmt.setInt(1,rowsToCheck);      cStmt.setString(2,stringVal);      cStmt.setInt(3,intVal);      cStmt.execute();      this.rs=this.stmt.executeQuery("SELECT x,y FROM callStmtTbl");      int numRows=0;      while (this.rs.next()) {        assertTrue(this.rs.getString(1).equals(stringVal) && (this.rs.getInt(2) == intVal));        numRows++;      }      this.rs.close();      this.rs=null;      cStmt.close();      cStmt=null;      System.out.println(rowsToCheck + " rows returned");      assertTrue(numRows == rowsToCheck);    }  finally {      try {        this.stmt.executeUpdate("DROP PROCEDURE testCallStmt");      } catch (      SQLException sqlEx) {        if (sqlEx.getMessage().indexOf("does not exist") == -1) {          throw sqlEx;        }      }      this.stmt.executeUpdate("DROP TABLE IF EXISTS callStmtTbl");      if (cStmt != null) {        cStmt.close();      }    }  }}  }
class C{  public static final int[] readThisIntArrayXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, IOException {  int num;  try {    num=Integer.parseInt(parser.getAttributeValue(null,"num"));  } catch (  NullPointerException e) {    throw new XmlPullParserException("Need num attribute in byte-array");  }catch (  NumberFormatException e) {    throw new XmlPullParserException("Not a number in num attribute in byte-array");  }  int[] array=new int[num];  int i=0;  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      if (parser.getName().equals("item")) {        try {          array[i]=Integer.parseInt(parser.getAttributeValue(null,"value"));        } catch (        NullPointerException e) {          throw new XmlPullParserException("Need value attribute in item");        }catch (        NumberFormatException e) {          throw new XmlPullParserException("Not a number in value attribute in item");        }      } else {        throw new XmlPullParserException("Expected item tag at: " + parser.getName());      }    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return array;      } else       if (parser.getName().equals("item")) {        i++;      } else {        throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());      }    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public static float[] toFloatArray(byte[] data){  float[] result=new float[data.length / 4];  byte[] tmp=new byte[4];  for (int i=0; i < result.length; i++) {    System.arraycopy(data,i * 4,tmp,0,4);    result[i]=toFloat(tmp);  }  return result;}  }
class C{  public static CharSequence parseMarkDown(String s){  StringBuilder sb=new StringBuilder();  for (  String line : s.split("\n")) {    sb.append(line);    if (!line.trim().matches("^([\\-*]|[0-9]+\\.)(.)*")) {      sb.append("  ");    }    sb.append("\n");  }  return bypass.markdownToSpannable(sb.toString());}  }
class C{  private StringBuffer createUpdateAccountSql(MCharge charge,MAccount account){  StringBuffer sql=new StringBuffer("UPDATE C_Charge_Acct ");  sql.append("SET CH_Expense_Acct=").append(account.getC_ValidCombination_ID());  sql.append(", CH_Revenue_Acct=").append(account.getC_ValidCombination_ID());  sql.append(" WHERE C_Charge_ID=").append(charge.getC_Charge_ID());  sql.append(" AND C_AcctSchema_ID=").append(m_C_AcctSchema_ID);  return sql;}  }
class C{  public void mouseMoved(java.awt.event.MouseEvent e){}  }
class C{  public Chronology withUTC(){  return INSTANCE_UTC;}  }
class C{  public int registerRemoteControlClient(PendingIntent mediaIntent,IRemoteControlClient rcClient,String callingPackageName){  if (DEBUG_RC)   Log.i(TAG,"Register remote control client rcClient=" + rcClient);  int rccId=RemoteControlClient.RCSE_ID_UNREGISTERED;synchronized (mAudioFocusLock) {synchronized (mRCStack) {      try {        for (int index=mRCStack.size() - 1; index >= 0; index--) {          final RemoteControlStackEntry rcse=mRCStack.elementAt(index);          if (rcse.mMediaIntent.equals(mediaIntent)) {            if (rcse.mRcClientDeathHandler != null) {              rcse.unlinkToRcClientDeath();            }            rcse.mRcClient=rcClient;            rcse.mCallingPackageName=callingPackageName;            rcse.mCallingUid=Binder.getCallingUid();            if (rcClient == null) {              rcse.resetPlaybackInfo();              break;            }            rccId=rcse.mRccId;            if (mRcDisplays.size() > 0) {              plugRemoteControlDisplaysIntoClient_syncRcStack(rcse.mRcClient);            }            IBinder b=rcse.mRcClient.asBinder();            RcClientDeathHandler rcdh=new RcClientDeathHandler(b,rcse.mMediaIntent);            try {              b.linkToDeath(rcdh,0);            } catch (            RemoteException e) {              Log.w(TAG,"registerRemoteControlClient() has a dead client " + b);              rcse.mRcClient=null;            }            rcse.mRcClientDeathHandler=rcdh;            break;          }        }      } catch (      ArrayIndexOutOfBoundsException e) {        Log.e(TAG,"Wrong index accessing RC stack, lock error? ",e);      }      if (isCurrentRcController(mediaIntent)) {        checkUpdateRemoteControlDisplay_syncAfRcs(RC_INFO_ALL);      }    }  }  return rccId;}  }
class C{  @Override public Long smove(final byte[] srckey,final byte[] dstkey,final byte[] member){  checkIsInMultiOrPipeline();  client.smove(srckey,dstkey,member);  return client.getIntegerReply();}  }
class C{  public void encode(RenderedImage im) throws IOException {  writeFileHeader();  TIFFEncodeParam encodeParam=(TIFFEncodeParam)param;  Iterator iter=encodeParam.getExtraImages();  if (iter != null) {    int ifdOffset=8;    RenderedImage nextImage=im;    TIFFEncodeParam nextParam=encodeParam;    boolean hasNext;    do {      hasNext=iter.hasNext();      ifdOffset=encode(nextImage,nextParam,ifdOffset,!hasNext);      if (hasNext) {        Object obj=iter.next();        if (obj instanceof RenderedImage) {          nextImage=(RenderedImage)obj;          nextParam=encodeParam;        } else         if (obj instanceof Object[]) {          Object[] o=(Object[])obj;          nextImage=(RenderedImage)o[0];          nextParam=(TIFFEncodeParam)o[1];        }      }    } while (hasNext);  } else {    encode(im,encodeParam,8,true);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.840 -0500",hash_original_method="4C9F904F92E3B879A03EABDC82FBCB21",hash_generated_method="4C7948DBDD2398F11C16F716F301458A") public static AlteredCharSequence make(CharSequence source,char[] sub,int substart,int subend){  if (source instanceof Spanned)   return new AlteredSpanned(source,sub,substart,subend); else   return new AlteredCharSequence(source,sub,substart,subend);}  }
class C{  protected boolean elementDepthIsZeroHook() throws IOException, XNIException {  setScannerState(SCANNER_STATE_TRAILING_MISC);  setDispatcher(fTrailingMiscDispatcher);  return true;}  }
class C{  public double cdf(int k){  return Probability.binomial(k,n,p);}  }
class C{  @Override public boolean canBePushed(){  return true;}  }
class C{  @Field(5) public __VARIANT_NAME_3_union dblVal(double dblVal){  this.io.setDoubleField(this,5,dblVal);  return this;}  }
class C{  public NamedObject(String objectName,DynamicMBean object) throws MalformedObjectNameException {  ObjectName objName=new ObjectName(objectName);  if (objName.isPattern()) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid name->" + objName.toString()));  }  this.name=objName;  this.object=object;}  }
class C{  @Nullable public static Bitmap createImageThumbnail(@NonNull final String filePath,final int size){  int targetSize=getTargetSize(size);  int maxPixels=getMaxPixels(targetSize);  final SizedThumbnailBitmap sizedThumbnailBitmap=new SizedThumbnailBitmap();  Bitmap bitmap=null;  final String fileType=getFileType(filePath);  if ("JPG".equals(fileType) || "JPEG".equals(fileType)) {    createThumbnailFromEXIF(filePath,targetSize,maxPixels,sizedThumbnailBitmap);    bitmap=sizedThumbnailBitmap.mBitmap;  }  if (bitmap == null) {    FileInputStream stream=null;    try {      stream=new FileInputStream(filePath);      final FileDescriptor fd=stream.getFD();      final BitmapFactory.Options options=new BitmapFactory.Options();      options.inSampleSize=1;      options.inJustDecodeBounds=true;      BitmapFactory.decodeFileDescriptor(fd,null,options);      if (options.mCancel || options.outWidth == -1 || options.outHeight == -1) {        return null;      }      options.inSampleSize=computeSampleSize(options,targetSize,maxPixels);      options.inJustDecodeBounds=false;      options.inDither=false;      options.inPreferredConfig=Bitmap.Config.ARGB_8888;      bitmap=BitmapFactory.decodeFileDescriptor(fd,null,options);    } catch (    IOException ex) {      Log.e(TAG,"",ex);    }catch (    OutOfMemoryError oom) {      Log.e(TAG,"Unable to decode file " + filePath + ". OutOfMemoryError.",oom);    } finally {      try {        if (stream != null) {          stream.close();        }      } catch (      IOException ex) {        Log.e(TAG,"",ex);      }    }  }  if (targetSize == TARGET_SIZE_MICRO) {    bitmap=extractThumbnail(bitmap,TARGET_SIZE_MICRO,TARGET_SIZE_MICRO,OPTIONS_RECYCLE_INPUT);  }  return bitmap;}  }
class C{  protected void inPatientListClickPatientWithId(String id){  click(dataThat(isPatientWithId(id)).inAdapterView(hasId(R.id.fragment_patient_list)).atPosition(0));}  }
class C{  private void initAggregatedFolderPath(final HttpServletRequest request,final ResourceType type){  if (ResourceType.CSS == type && context.getAggregatedFolderPath() == null) {    final String requestUri=request.getRequestURI();    final String cssFolder=StringUtils.removeEnd(requestUri,FilenameUtils.getName(requestUri));    final String aggregatedFolder=StringUtils.removeStart(cssFolder,request.getContextPath());    LOG.debug("set aggregatedFolderPath: {}",aggregatedFolder);    Context.get().setAggregatedFolderPath(aggregatedFolder);  }}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.EVENT_VALUE_REFERENCE_EXPRESSION;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public Entry readBkp(final String key){  return read(key,this.bkpbase);}  }
class C{  private void decorateUpdatesForRPSource(RecoverPointVolumeIngestionContext volumeContext,Volume volume,UnManagedVolume unManagedVolume){  StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();  volume.setPersonality(PersonalityTypes.SOURCE.toString());  volume.setAccessState(Volume.VolumeAccessState.READWRITE.toString());  volume.setLinkStatus(Volume.LinkStatus.IN_SYNC.toString());  boolean isVPlexDistributedVolume=false;  if (volumeContext.getVolumeContext() instanceof RpVplexVolumeIngestionContext) {    VplexVolumeIngestionContext vplexVolumeContext=((RpVplexVolumeIngestionContext)volumeContext.getVolumeContext()).getVplexVolumeIngestionContext();    isVPlexDistributedVolume=vplexVolumeContext.getAssociatedVolumeIds(volume).size() > 1;  }  if (isVPlexDistributedVolume) {    String rpInternalSiteName=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_INTERNAL_SITENAME.toString(),unManagedVolumeInformation);    String rpCopyName=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_COPY_NAME.toString(),unManagedVolumeInformation);    String rpStandbyInternalSiteName=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_STANDBY_INTERNAL_SITENAME.toString(),unManagedVolumeInformation);    String rpStandbyCopyName=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_STANDBY_COPY_NAME.toString(),unManagedVolumeInformation);    VplexVolumeIngestionContext vplexVolumeContext=((RpVplexVolumeIngestionContext)volumeContext.getVolumeContext()).getVplexVolumeIngestionContext();    for (    String associatedVolumeIdStr : vplexVolumeContext.getAssociatedVolumeIds(volume)) {      Volume associatedVolume=VolumeIngestionUtil.findVolume(_dbClient,vplexVolumeContext.getBlockObjectsToBeCreatedMap(),vplexVolumeContext.getDataObjectsToBeUpdatedMap(),associatedVolumeIdStr);      if (associatedVolume == null) {        _logger.error("Could not find associated volume: " + associatedVolumeIdStr + " in DB.  Ingestion failed.");        throw IngestionException.exceptions.generalVolumeException(unManagedVolume.getNativeGuid(),"Could not find associated volume: " + associatedVolumeIdStr + ", for VPLEX volume: "+ volume.getLabel());      }      if (associatedVolume.getVirtualArray().equals(volume.getVirtualArray())) {        associatedVolume.setInternalSiteName(rpInternalSiteName);        associatedVolume.setRpCopyName(rpCopyName);      } else {        associatedVolume.setInternalSiteName(rpStandbyInternalSiteName);        associatedVolume.setRpCopyName(rpStandbyCopyName);      }    }  }  StringSet rpManagedTargetVolumeIdStrs=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.RP_MANAGED_TARGET_VOLUMES.toString(),unManagedVolumeInformation);  _logger.info("adding managed RecoverPoint targets volumes: " + rpManagedTargetVolumeIdStrs);  for (  String rpManagedTargetVolumeIdStr : rpManagedTargetVolumeIdStrs) {    Volume managedTargetVolume=null;    BlockObject bo=volumeContext.getRootIngestionRequestContext().findCreatedBlockObject(URI.create(rpManagedTargetVolumeIdStr));    if (bo != null && bo instanceof Volume) {      managedTargetVolume=(Volume)bo;    }    if (managedTargetVolume == null) {      _logger.error("Could not find managed target volume: " + rpManagedTargetVolumeIdStr + " in DB.  Ingestion failed.");      throw IngestionException.exceptions.noManagedTargetVolumeFound(unManagedVolume.getNativeGuid(),rpManagedTargetVolumeIdStr);    }    _logger.info("\tadding RecoverPoint target volume {}",managedTargetVolume.forDisplay());    if (volume.getRpTargets() == null) {      volume.setRpTargets(new StringSet());    }    volume.getRpTargets().add(managedTargetVolume.getId().toString());  }  StringSet rpUnManagedTargetVolumeIdStrs=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.RP_UNMANAGED_TARGET_VOLUMES.toString(),unManagedVolumeInformation);  _logger.info("updating unmanaged RecoverPoint targets volumes: " + rpUnManagedTargetVolumeIdStrs);  for (  String rpUnManagedTargetVolumeIdStr : rpUnManagedTargetVolumeIdStrs) {    UnManagedVolume unManagedTargetVolume=_dbClient.queryObject(UnManagedVolume.class,URI.create(rpUnManagedTargetVolumeIdStr));    if (unManagedTargetVolume == null) {      _logger.error("Could not find unmanaged target volume: " + rpUnManagedTargetVolumeIdStr + " in DB.  Ingestion failed.");      throw IngestionException.exceptions.noUnManagedTargetVolumeFound(unManagedVolume.getNativeGuid(),rpUnManagedTargetVolumeIdStr);    }    StringSet rpManagedSourceVolumeId=new StringSet();    rpManagedSourceVolumeId.add(volume.getId().toString());    unManagedTargetVolume.putVolumeInfo(SupportedVolumeInformation.RP_MANAGED_SOURCE_VOLUME.toString(),rpManagedSourceVolumeId);    StringSet rpUnManagedSourceVolumeId=new StringSet();    unManagedTargetVolume.putVolumeInfo(SupportedVolumeInformation.RP_UNMANAGED_SOURCE_VOLUME.toString(),rpUnManagedSourceVolumeId);    volumeContext.addUnmanagedTargetVolumeToUpdate(unManagedTargetVolume);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public ReferenceQueue(){}  }
class C{  protected List<Intersection> intersectBoundarySides(Line line,ExtrudedBoundaryInfo boundary) throws InterruptedException {  List<Intersection> intersections=new ArrayList<Intersection>();  Vec4[] topVertices=boundary.capVertices;  Vec4[] bottomVertices=boundary.baseVertices;  for (int i=0; i < boundary.baseVertices.length - 1; i++) {    Vec4 va=bottomVertices[i];    Vec4 vb=topVertices[i + 1];    Vec4 vc=topVertices[i];    Intersection intersection=Triangle.intersect(line,va,vb,vc);    if (intersection != null)     intersections.add(intersection);    vc=bottomVertices[i + 1];    intersection=Triangle.intersect(line,va,vb,vc);    if (intersection != null)     intersections.add(intersection);  }  return intersections.size() > 0 ? intersections : null;}  }
class C{  private void compute(){  tryDist(pts[0],pts[2],pts[3]);  tryDist(pts[1],pts[2],pts[3]);  tryDist(pts[2],pts[0],pts[1]);  tryDist(pts[3],pts[0],pts[1]);}  }
class C{  public static int realignToGridRoundToNearest(boolean logRealign,double val){  boolean roundUp;  if (Math.abs(val % SharedConstants.DEFAULT_GRID_SIZE) < SharedConstants.DEFAULT_GRID_SIZE / 2) {    roundUp=val < 0;  } else {    roundUp=val >= 0;  }  return realignTo(logRealign,val,roundUp,SharedConstants.DEFAULT_GRID_SIZE);}  }
class C{  @SuppressWarnings({"SuspiciousNameCombination"}) public static double normalCdf(double y){  double f, h;  int j;  double dcphi, x, z, f1, f2, f3, f4, f5;  x=y;  if (Math.abs(x) > 15.) {    dcphi=0.;  } else {    j=(int)Math.floor(Math.abs(x) * 16. + .5);    z=j * .0625;    h=Math.abs(x) - z;    f=r[j];    f1=f * z - 1;    f2=f + z * f1;    f3=f1 * 2. + z * f2;    f4=f2 * 3 + z * f3;    f5=f3 * 4 + z * f4;    dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;    dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x);  }  if (x < 0.) {    return dcphi;  } else {    return (1.0 - dcphi);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.591 -0500",hash_original_method="84D213429BEB1496C8F56DF85FD23E87",hash_generated_method="4A51426B49B23A339C74B0353EE11C7F") private boolean isCandidateSelection(int childIndex,int direction){  final int count=getChildCount();  final int invertedIndex=count - 1 - childIndex;  int rowStart;  int rowEnd;  if (!mStackFromBottom) {    rowStart=childIndex - (childIndex % mNumColumns);    rowEnd=Math.max(rowStart + mNumColumns - 1,count);  } else {    rowEnd=count - 1 - (invertedIndex - (invertedIndex % mNumColumns));    rowStart=Math.max(0,rowEnd - mNumColumns + 1);  }switch (direction) {case View.FOCUS_RIGHT:    return childIndex == rowStart;case View.FOCUS_DOWN:  return rowStart == 0;case View.FOCUS_LEFT:return childIndex == rowEnd;case View.FOCUS_UP:return rowEnd == count - 1;case View.FOCUS_FORWARD:return childIndex == rowStart && rowStart == 0;case View.FOCUS_BACKWARD:return childIndex == rowEnd && rowEnd == count - 1;default :throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT, " + "FOCUS_FORWARD, FOCUS_BACKWARD}.");}}  }
class C{  public List<File> generateScenario(Path destination){  List<File> result=new LinkedList<>();  ScenarioResult scenario=createScenario();  Classifier<?> supplier=scenario.supplier;  Classifier<?> client=scenario.client;  Class factory=scenario.factory;  Class implementer=scenario.implementer;switch (specification.getSupplierType()) {case CLASS:case DEFAULT_INTERFACE:    supplier.addMember(createMember("member",specification.getMemberVisibility()));  break;case ABSTRACT_CLASS:case INTERFACE:supplier.addMember(createMember("member",specification.getMemberVisibility()).makeAbstract());break;}switch (specification.getScenario()) {case EXTENDS:case IMPLEMENTS:{switch (specification.getUsageType()) {case ACCESS:switch (specification.getMemberStatic()) {case YES:  client.addMember(createAccess("member","S"));break;case NO:client.addMember(createAccess("member","this"));break;}if (specification.getSupplierType() != ClassifierType.INTERFACE && specification.getSupplierType() != ClassifierType.ABSTRACT_CLASS) break;if (memberType == MemberType.FIELD) break;case OVERRIDE:client.addMember(createMember("member",specification.getMemberVisibility()).makeOverride());break;default :throw new IllegalArgumentException("Unexpected usage type: " + specification.getUsageType());}break;}case REFERENCES:{if (specification.getUsageType() == UsageType.OVERRIDE) throw new IllegalArgumentException("Cannot override in reference scenario");switch (specification.getSupplierType()) {case CLASS:case DEFAULT_INTERFACE:break;case ABSTRACT_CLASS:case INTERFACE:implementer.addMember(createMember("member",specification.getMemberVisibility()).makeOverride());break;}client.addMember(createAccess("member","new GetS().getS()"));break;}}switch (specification.getClientLocation()) {case SAME_TYPE:case SAME_MODULE:{Module module=new Module("SameModule");module.addClassifier(supplier);if (implementer != null) module.addClassifier(implementer);if (factory != null) module.addClassifier(factory);module.addClassifier(client);Project project=new Project("SameModule","sameVendor","SameVendor");project.createSourceFolder("src").addModule(module);result.add(project.create(destination));break;}case SAME_PROJECT:{Module supplierModule=createSupplierModule(supplier,factory,implementer);Module clientModule=createClientModule(client,supplier,factory,supplierModule);Project project=new Project("SameProject","sameVendor","SameVendor");project.createSourceFolder("src").addModule(supplierModule).addModule(clientModule);result.add(project.create(destination));break;}case SAME_VENDOR:{Module supplierModule=createSupplierModule(supplier,factory,implementer);Module clientModule=createClientModule(client,supplier,factory,supplierModule);Project supplierProject=createSupplierProject(supplierModule,"sameVendor");Project clientProject=createClientProject(clientModule,"sameVendor",supplierProject);result.add(supplierProject.create(destination));result.add(clientProject.create(destination));break;}case OTHER:{Module supplierModule=createSupplierModule(supplier,factory,implementer);Module clientModule=createClientModule(client,supplier,factory,supplierModule);Project supplierProject=createSupplierProject(supplierModule,"vendorA");Project clientProject=createClientProject(clientModule,"vendorB",supplierProject);result.add(supplierProject.create(destination));result.add(clientProject.create(destination));break;}default :break;}return result;}  }
class C{  void startShutdown(){  _isShutdown=true;  LockSupport.unpark(this);}  }
class C{  public static synchronized void addPropertyChangeListener(PropertyChangeListener l){  if (!listeners.contains(l)) {    listeners.add(l);  }}  }
class C{  public EaseInOut(float overshoot){  this.overshoot=overshoot;}  }
class C{  public ArrayList simulateGeoAttr(){  double[][] locations=simulateLocations();  ArrayList<Parameter> locationList=new ArrayList<Parameter>();  for (int i=0; i < m_tree.getExternalNodeCount(); i++) {    NodeRef node=m_tree.getNode(i);    String taxaName=m_tree.getTaxon(node.getNumber()).getId();    Parameter location=new Parameter.Default(locations[i]);    System.out.println("taxon: " + taxaName + ", lat: "+ locations[i][0]+ ", long: "+ locations[i][1]);    locationList.add(location);  }  return locationList;}  }
class C{  private void addToOperationHistory(UndoableRichTextChange edit){  if (!fFoldingIntoCompoundChange || edit instanceof UndoableCompoundRichTextChange) {    fHistory.add(edit);    fLastAddedTextEdit=edit;  }}  }
class C{  @Override public void prefetchSong(String ref) throws RemoteException {}  }
class C{  public void initProcessAnnotations(Iterable<? extends Processor> processors){  if (options.isSet(PROC,"none")) {    processAnnotations=false;  } else   if (procEnvImpl == null) {    procEnvImpl=JavacProcessingEnvironment.instance(context);    procEnvImpl.setProcessors(processors);    processAnnotations=procEnvImpl.atLeastOneProcessor();    if (processAnnotations) {      options.put("save-parameter-names","save-parameter-names");      reader.saveParameterNames=true;      keepComments=true;      genEndPos=true;      if (!taskListener.isEmpty())       taskListener.started(new TaskEvent(TaskEvent.Kind.ANNOTATION_PROCESSING));      deferredDiagnosticHandler=new Log.DeferredDiagnosticHandler(log);    } else {      procEnvImpl.close();    }  }}  }
class C{  public boolean isAtLeastAndroidLollipop(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;}  }
class C{  private static String memberValueToString(Object value){  Class<?> type=value.getClass();  if (!type.isArray())   return value.toString();  if (type == byte[].class)   return Arrays.toString((byte[])value);  if (type == char[].class)   return Arrays.toString((char[])value);  if (type == double[].class)   return Arrays.toString((double[])value);  if (type == float[].class)   return Arrays.toString((float[])value);  if (type == int[].class)   return Arrays.toString((int[])value);  if (type == long[].class)   return Arrays.toString((long[])value);  if (type == short[].class)   return Arrays.toString((short[])value);  if (type == boolean[].class)   return Arrays.toString((boolean[])value);  return Arrays.toString((Object[])value);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  final double radToDeg=180 / Math.PI;  final double degToRad=Math.PI / 180;  double azimuth=315 * degToRad;  double altitude=45 * degToRad;  double zFactor=1;  double z;  int progress;  int[] Dy={-1,0,1,1,1,0,-1,-1};  int[] Dx={1,1,1,0,-1,-1,-1,0};  double sinTheta;  double cosTheta;  double tanSlope;  int row, col;  double fx, fy, aspect;  double gridRes, eightGridRes;  double[] N=new double[8];  double term1, term2, term3;  double outNoData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=(Double.parseDouble(args[2]) - 90) * degToRad;  altitude=Double.parseDouble(args[3]) * degToRad;  zFactor=Double.parseDouble(args[4]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    sinTheta=Math.sin(altitude);    cosTheta=Math.cos(altitude);    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    gridRes=inputFile.getCellSizeX();    eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        midLat=Math.toRadians(midLat);        zFactor=1.0 / (113200 * Math.cos(midLat));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,outNoData);    outputFile.setNoDataValue(outNoData);    outputFile.setPreferredPalette("grey.pal");    long[] histo=new long[256];    long numCells=0;    int index;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (int c=0; c < 8; c++) {            N[c]=inputFile.getValue(row + Dy[c],col + Dx[c]);            if (N[c] != noData) {              N[c]=N[c] * zFactor;            } else {              N[c]=z;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            tanSlope=Math.sqrt(fx * fx + fy * fy);            aspect=(180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx))) * degToRad;            term1=tanSlope / Math.sqrt(1 + tanSlope * tanSlope);            term2=sinTheta / tanSlope;            term3=cosTheta * Math.sin(azimuth - aspect);            z=term1 * (term2 - term3);          } else {            z=0.5;          }          z=(int)(z * 255);          if (z < 0) {            z=0;          }          histo[(int)z]++;          numCells++;          outputFile.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    double clipPercent=0.01;    if (args.length >= 6) {      clipPercent=Double.parseDouble(args[5]) / 100.0;    }    int newMin=0;    int newMax=0;    double targetCellNum=numCells * clipPercent;    long sum=0;    for (int c=0; c < 256; c++) {      sum+=histo[c];      if (sum >= targetCellNum) {        newMin=c;        break;      }    }    sum=0;    for (int c=255; c >= 0; c--) {      sum+=histo[c];      if (sum >= targetCellNum) {        newMax=c;        break;      }    }    if (newMax > newMin) {      outputFile.setDisplayMinimum((double)newMin);      outputFile.setDisplayMaximum((double)newMax);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public StrBuilder replace(final StrMatcher matcher,final String replaceStr,final int startIndex,int endIndex,final int replaceCount){  endIndex=validateRange(startIndex,endIndex);  return replaceImpl(matcher,replaceStr,startIndex,endIndex,replaceCount);}  }
class C{  public void keyReleased(KeyEvent e){  int code=e.getKeyCode();  if (code == KeyEvent.VK_F1 || code == KeyEvent.VK_HELP) {    ActionListener al=getDisplayHelpFromFocus();    al.actionPerformed(new ActionEvent(e.getComponent(),ActionEvent.ACTION_PERFORMED,null));  }}  }
class C{  public static Integer toIntegerObject(Object obj){  if (obj == null) {    return null;  }  if (obj instanceof Integer) {    return (Integer)obj;  }  if (obj instanceof Number) {    return ((Number)obj).intValue();  }  Integer result=null;  try {    result=Integer.parseInt(obj.toString());  } catch (  Exception e) {  }  return result;}  }
class C{  @Override public void addStatement(UpdateContext op,Resource subj,URI pred,Value obj,Resource... contexts) throws SailException {  throw new SailException(ERR_OPENRDF_QUERY_MODEL);}  }
class C{  public SpacesItemDecoration(RecyclerView recyclerView,int space){  this(space);  int halfSpace=space / 2;  recyclerView.setPadding(halfSpace,halfSpace,halfSpace,halfSpace);}  }
class C{  public boolean match(PsiElement patternNode,PsiElement matchedNode,MatchContext context){  if (patternNode == null) {    return matchedNode == null;  }  return canMatch(patternNode,matchedNode);}  }
class C{  public static String plnounCreature(final int quantity,final String noun){  if (noun.equals("chicken")) {    if (quantity == 1) {      return "chicken";    } else {      return "chickens";    }  }  return plnoun(quantity,noun);}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public ModeledConnectionGroup(){}  }
class C{  public static CCRepeat action(CCFiniteTimeAction action,int t){  return new CCRepeat(action,t);}  }
class C{  public static final void writeMapXml(Map val,OutputStream out) throws XmlPullParserException, IOException {  XmlSerializer serializer=new FastXmlSerializer();  serializer.setOutput(out,"utf-8");  serializer.startDocument(null,true);  serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);  writeMapXml(val,null,serializer);  serializer.endDocument();}  }
class C{  public void updateLatitudeExtremities(double latitude){  latitudeExtremities.update(latitude);}  }
class C{  public void encodeBuffer(byte aBuffer[],OutputStream aStream) throws IOException {  ByteArrayInputStream inStream=new ByteArrayInputStream(aBuffer);  encodeBuffer(inStream,aStream);}  }
class C{  public static <B>ImmutableTypeToInstanceMap<B> of(){  return new ImmutableTypeToInstanceMap<B>(ImmutableMap.<TypeToken<? extends B>,B>of());}  }
class C{  public static byte[] toHex(int i){  StringBuilder buf=new StringBuilder(2);  if ((i & 0xff) < 0x10) {    buf.append("0");  }  buf.append(Long.toString(i & 0xff,16).toUpperCase());  try {    return buf.toString().getBytes("US-ASCII");  } catch (  Exception e) {    logger.debug("Problem converting bytes to string - {}",e.getMessage());  }  return null;}  }
class C{  public void testMinShingleSizeAndTokenSeparatorNoUnigrams() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","minShingleSize","3","maxShingleSize","4","tokenSeparator","=BLAH=","outputUnigrams","false").create(stream);  assertTokenStreamContents(stream,new String[]{"this=BLAH=is=BLAH=a","this=BLAH=is=BLAH=a=BLAH=test","is=BLAH=a=BLAH=test"});}  }
class C{  private Class[] loadMethodParameter(final String parametertype[]) throws ApplicationRuntimeException {  Class[] class_name=null;  try {    if (!parametertype[0].trim().equalsIgnoreCase(EMPTY)) {      class_name=new Class[parametertype.length];      for (int i=0; i < parametertype.length; i++)       class_name[i]=Class.forName(parametertype[i]);    }  } catch (  final Exception e) {    LOGGER.error("Error occurred in EgovMasterDataCaching loadMethodParameter",e);    throw new ApplicationRuntimeException("Error occurred in EgovMasterDataCaching loadMethodParameter",e);  }  return class_name;}  }
class C{  private void discoverProtectionSet(ProtectionSystem protectionSystem,URI protectionSetId) throws RecoverPointException {  ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,protectionSetId);  if (protectionSet == null || protectionSet.getInactive()) {    return;  }  StringSet protectionVolumes=protectionSet.getVolumes();  RecoverPointVolumeProtectionInfo protectionVolume=null;  RecoverPointClient rp=RPHelper.getRecoverPointClient(protectionSystem);  boolean changed=false;  _log.info("ProtectionSet discover in the RPDeviceController called for protection set: " + protectionSet.getLabel());  for (  String volume : protectionVolumes) {    Volume protectionVolumeWWN=_dbClient.queryObject(Volume.class,URI.create(volume));    if (protectionVolumeWWN == null || protectionVolumeWWN.getInactive()) {      continue;    }    try {      protectionVolume=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(protectionVolumeWWN.getId(),_dbClient));    } catch (    RecoverPointException re) {      StringBuffer errMsgBuilder=new StringBuffer();      String msg="Discovery of protection set failed. Protection system: " + protectionSystem.getId() + ", ";      errMsgBuilder.append(msg);      errMsgBuilder.append(re.getMessage());      _log.warn(errMsgBuilder.toString());    }    if (protectionVolume == null) {      continue;    }    if ((!changed) && (((protectionVolume.getRpVolumeCurrentProtectionStatus() == RecoverPointVolumeProtectionInfo.volumeProtectionStatus.PROTECTED_SOURCE) && (protectionVolumeWWN.getPersonality().equalsIgnoreCase(Volume.PersonalityTypes.TARGET.toString())))) || ((protectionVolume.getRpVolumeCurrentProtectionStatus() == RecoverPointVolumeProtectionInfo.volumeProtectionStatus.PROTECTED_TARGET) && (protectionVolumeWWN.getPersonality().equalsIgnoreCase(Volume.PersonalityTypes.SOURCE.toString())))) {      _log.info("Changing personality of volume {} due to RP condition on consistency group",protectionVolumeWWN.getLabel());      updatePostFailoverPersonalities(protectionVolumeWWN);      changed=true;    }    if (protectionVolume.getRpVolumeCurrentProtectionStatus() == RecoverPointVolumeProtectionInfo.volumeProtectionStatus.PROTECTED_SOURCE) {switch (rp.getCGState(protectionVolume)) {case DELETED:        protectionSet.setProtectionStatus(ProtectionStatus.DELETED.toString());      break;case STOPPED:    protectionSet.setProtectionStatus(ProtectionStatus.DISABLED.toString());  break;case PAUSED:protectionSet.setProtectionStatus(ProtectionStatus.PAUSED.toString());break;case MIXED:protectionSet.setProtectionStatus(ProtectionStatus.MIXED.toString());break;case READY:protectionSet.setProtectionStatus(ProtectionStatus.ENABLED.toString());break;}_dbClient.persistObject(protectionSet);break;}}}  }
class C{  public BasicEntity(final OdorWorld world){  super(DEFAULT_IMAGE,world);}  }
class C{  public void addGraphMouseListener(GraphMouseListener<V> gel){  addMouseListener(new MouseListenerTranslator<V,E>(gel,this));}  }
class C{  public static double variance(double n){  return 2.0 * n;}  }
class C{  public void addViewPopUpMenu(JMenuItem menu){  if (!viewAdditionalMenu.contains(menu)) {    viewAdditionalMenu.add(menu);  }}  }
class C{  @Override public void createControl(final Composite parent){  final Composite container=new Composite(parent,SWT.NULL);  final FormLayout formLayout=new FormLayout();  formLayout.spacing=FormHelper.Spacing();  formLayout.marginHeight=FormHelper.MarginHeight();  formLayout.marginWidth=FormHelper.MarginWidth();  container.setLayout(formLayout);  setControl(container);  createMergeSourceControls(container);  createMergeSelectionControls(container);  createMergeTargeControls(container);  calculateTargetPaths(true,sourcePath);}  }
class C{  private HostExportInfo verifyHostExports(List<HostExportInfo> hostExportInfoList){  HostExportInfo exportInfo=hostExportInfoList.get(0);  String hostName=exportInfo.getHostName();  Set<String> volumeNativeIds=new HashSet<>();  Set<String> masterInitiatorNetworkIds=new HashSet<>();  Set<String> masterTargetNativeIds=new HashSet<>();  List<Initiator> initiators=exportInfo.getInitiators();  List<StoragePort> targets=exportInfo.getTargets();  for (  Initiator initiator : initiators) {    masterInitiatorNetworkIds.add(initiator.getPort());  }  for (  StoragePort port : targets) {    masterTargetNativeIds.add(port.getNativeId());  }  for (  HostExportInfo hostExportInfo : hostExportInfoList) {    boolean isValid=verifyHostExports(masterInitiatorNetworkIds,masterTargetNativeIds,hostExportInfo);    if (!isValid) {      return null;    }    volumeNativeIds.addAll(hostExportInfo.getStorageObjectNativeIds());  }  HostExportInfo hostExportInfo=new HostExportInfo(hostName,new ArrayList<>(volumeNativeIds),initiators,targets);  return hostExportInfo;}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T[] toArray(T[] vec){  int i=0;  List<A> l=this;  Object[] dest=vec;  while (l.nonEmpty() && i < vec.length) {    dest[i]=l.head;    l=l.tail;    i++;  }  if (l.isEmpty()) {    if (i < vec.length)     vec[i]=null;    return vec;  }  vec=(T[])Array.newInstance(vec.getClass().getComponentType(),size());  return toArray(vec);}  }
class C{  public Object addLineHighlight(int line,Color color) throws BadLocationException {  int offs=textArea.getLineStartOffset(line);  LineHighlightInfo lhi=new LineHighlightInfo(textArea.getDocument().createPosition(offs),color);  if (lineHighlights == null) {    lineHighlights=new ArrayList(1);  }  int index=Collections.binarySearch(lineHighlights,lhi);  if (index < 0) {    index=-(index + 1);  }  lineHighlights.add(index,lhi);  repaintLine(lhi);  return lhi;}  }
class C{  public PainterScrollBar(Color c){  this.cor=c;}  }
class C{  public void testInCheck(){  Position pos=new Position();  pos.setPiece(Position.getSquare(4,2),Piece.WKING);  pos.setPiece(Position.getSquare(4,7),Piece.BKING);  assertEquals(false,MoveGen.inCheck(pos));  pos.setPiece(Position.getSquare(3,3),Piece.BQUEEN);  assertEquals(true,MoveGen.inCheck(pos));  pos.setPiece(Position.getSquare(3,3),Piece.BROOK);  assertEquals(false,MoveGen.inCheck(pos));  pos.setPiece(Position.getSquare(3,3),Piece.BPAWN);  assertEquals(true,MoveGen.inCheck(pos));  pos.setPiece(Position.getSquare(3,3),Piece.EMPTY);  pos.setPiece(Position.getSquare(5,3),Piece.WQUEEN);  assertEquals(false,MoveGen.inCheck(pos));  pos.setPiece(Position.getSquare(4,6),Piece.BROOK);  assertEquals(true,MoveGen.inCheck(pos));  pos.setPiece(Position.getSquare(4,4),Piece.WPAWN);  assertEquals(false,MoveGen.inCheck(pos));  pos.setPiece(Position.getSquare(2,3),Piece.BKNIGHT);  assertEquals(true,MoveGen.inCheck(pos));  pos.setPiece(Position.getSquare(2,3),Piece.EMPTY);  pos.setPiece(Position.getSquare(0,4),Piece.BKNIGHT);  assertEquals(false,MoveGen.inCheck(pos));}  }
class C{  public void addEventListener(FileUploadListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (listener == null) {    throw new RcsIllegalArgumentException("listener must not be null!");  }  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IFileUploadListener fileUploadListener=new FileUploadListenerImpl(listener);    mFileUploadListeners.put(listener,new WeakReference<>(fileUploadListener));    mApi.addEventListener(fileUploadListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static SootMethod resolve(SootMethodRef ref) throws CannotFindMethodException {  SootClass cl=ref.declaringClass();  while (true) {    if (cl.declaresMethod(ref.getSubSignature())) {      SootMethod possibleTarget=cl.getMethod(ref.getSubSignature());      if (ref.isStatic() == possibleTarget.isStatic())       return possibleTarget;    }    if (cl.hasSuperclass())     cl=cl.getSuperclass(); else     break;  }  cl=ref.declaringClass();  while (true) {    LinkedList<SootClass> queue=new LinkedList<SootClass>();    queue.addAll(cl.getInterfaces());    while (!queue.isEmpty()) {      SootClass iface=queue.removeFirst();      if (iface.declaresMethod(ref.getSubSignature())) {        SootMethod possibleTarget=iface.getMethod(ref.getSubSignature());        if (ref.isStatic() == possibleTarget.isStatic())         return possibleTarget;      }      queue.addAll(iface.getInterfaces());    }    if (cl.hasSuperclass())     cl=cl.getSuperclass(); else     break;  }  throw new CannotFindMethodException(cl,ref);}  }
class C{  @Override public void onResume(){  mWebView.onResume();  super.onResume();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.975 -0400",hash_original_method="02DF7858712779AF42E2C656508DDF5D",hash_generated_method="F7B23F63F4E29E693FDDE5E24F5F24A7") public FileAlterationObserver(File directory,FileFilter fileFilter){  this(directory,fileFilter,(IOCase)null);}  }
class C{  public boolean containsKey(int key){  return indexOfKey(key) >= 0;}  }
class C{  private EmrCluster createEmrCluster(String namespace,String emrClusterDefinitionName,String amiVersion){  EmrCluster emrCluster;  try {    NamespaceEntity namespaceEntity=namespaceDaoTestHelper.createNamespaceEntity(namespace);    String configXml=IOUtils.toString(resourceLoader.getResource(EMR_CLUSTER_DEFINITION_XML_FILE_MINIMAL_CLASSPATH).getInputStream());    EmrClusterDefinition emrClusterDefinition=xmlHelper.unmarshallXmlToObject(EmrClusterDefinition.class,configXml);    if (amiVersion != null) {      emrClusterDefinition.setAmiVersion(amiVersion);    }    configXml=xmlHelper.objectToXml(emrClusterDefinition);    emrClusterDefinitionDaoTestHelper.createEmrClusterDefinitionEntity(namespaceEntity,emrClusterDefinitionName,configXml);    EmrClusterCreateRequest request=getNewEmrClusterCreateRequest();    emrCluster=emrService.createCluster(request);  } catch (  Exception e) {    throw new IllegalArgumentException("Error staging data",e);  }  return emrCluster;}  }
class C{  @Override public IMqttToken subscribe(String topic,int qos) throws MqttException, MqttSecurityException {  return subscribe(topic,qos,null,null);}  }
class C{  protected void sequence_TypeRef_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  protected ThrowStatementImpl(){  super();}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  public void close(){  this.connection.close();}  }
class C{  public JSONObject put(String key,Collection<?> value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object rv=stack.pop();  String varName=getString(stack);  if (stack.getUIMgrSafe() != null)   stack.getUIMgrSafe().getGlobalContext().put(varName,rv);  return rv;}  }
class C{  public void ensureFileCopyIsDeletedIfExisting(String sharingId){  if (Direction.INCOMING == mRichCallLog.getImageSharingDirection(sharingId)) {    return;  }  Uri file=mRichCallLog.getFile(sharingId);  if (file != null) {    new File(file.getPath()).delete();  }}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  private Iterable<String> distinctNames(Iterable<InetSocketAddress> addresses){  Set<String> result=new HashSet<>();  for (  InetSocketAddress address : addresses) {    result.add(name(address));  }  return result;}  }
class C{  protected boolean assignToNearestCluster(Relation<? extends V> relation,double[][] means,List<? extends ModifiableDoubleDBIDList> clusters,WritableIntegerDataStore assignment,double[] varsum,DoubleMinHeap minHeap,int heapsize){  assert (k == means.length);  boolean changed=false;  Arrays.fill(varsum,0.);  final NumberVectorDistanceFunction<?> df=getDistanceFunction();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double mindist=Double.POSITIVE_INFINITY;    V fv=relation.get(iditer);    int minIndex=0;    for (int i=0; i < k; i++) {      double dist=df.distance(fv,DoubleVector.wrap(means[i]));      if (dist < mindist) {        minIndex=i;        mindist=dist;      }    }    if (heapsize > 0) {      minHeap.add(mindist,heapsize);    }    varsum[minIndex]+=mindist;    clusters.get(minIndex).add(mindist,iditer);    changed|=assignment.putInt(iditer,minIndex) != minIndex;  }  return changed;}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public void draw(Graphics2D g2,DialPlot plot,Rectangle2D frame,Rectangle2D view){  g2.setPaint(Color.blue);  g2.setStroke(new BasicStroke(1.0f));  Rectangle2D lengthRect=DialPlot.rectangleByRadius(frame,this.radius,this.radius);  Rectangle2D widthRect=DialPlot.rectangleByRadius(frame,this.widthRadius,this.widthRadius);  double value=plot.getValue(this.datasetIndex);  DialScale scale=plot.getScaleForDataset(this.datasetIndex);  double angle=scale.valueToAngle(value);  Arc2D arc1=new Arc2D.Double(lengthRect,angle,0,Arc2D.OPEN);  Point2D pt1=arc1.getEndPoint();  Arc2D arc2=new Arc2D.Double(widthRect,angle - 90.0,180.0,Arc2D.OPEN);  Point2D pt2=arc2.getStartPoint();  Point2D pt3=arc2.getEndPoint();  Arc2D arc3=new Arc2D.Double(widthRect,angle - 180.0,0.0,Arc2D.OPEN);  Point2D pt4=arc3.getStartPoint();  GeneralPath gp=new GeneralPath();  gp.moveTo((float)pt1.getX(),(float)pt1.getY());  gp.lineTo((float)pt2.getX(),(float)pt2.getY());  gp.lineTo((float)pt4.getX(),(float)pt4.getY());  gp.lineTo((float)pt3.getX(),(float)pt3.getY());  gp.closePath();  g2.setPaint(this.fillPaint);  g2.fill(gp);  g2.setPaint(this.outlinePaint);  Line2D line=new Line2D.Double(frame.getCenterX(),frame.getCenterY(),pt1.getX(),pt1.getY());  g2.draw(line);  line.setLine(pt2,pt3);  g2.draw(line);  line.setLine(pt3,pt1);  g2.draw(line);  line.setLine(pt2,pt1);  g2.draw(line);  line.setLine(pt2,pt4);  g2.draw(line);  line.setLine(pt3,pt4);  g2.draw(line);}  }
class C{  protected JMenu createMenu(String key){  JMenu menu=new JMenu(getResourceString(key + labelSuffix));  for (  String itemKey : getItemKeys(key)) {    if (itemKey.equals("-")) {      menu.addSeparator();    } else {      JMenuItem mi=createMenuItem(itemKey);      menu.add(mi);    }  }  return menu;}  }
class C{  protected boolean isFieldSeparatorAtEnd(){  return fieldSeparatorAtEnd;}  }
class C{  public void loading(){  if (footerProgressBarEnabled)   mProgressBar.setVisibility(View.VISIBLE);  mHintView.setText(R.string.pulltorefresh_listview_header_hint_loading);}  }
class C{  public boolean isPrimitive(){  return _rawClass.isPrimitive();}  }
class C{  protected GenericDocumentFragment(){}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  public void addExtensionProvider(String elementName,String namespace,Object provider){  if (!(provider instanceof PacketExtensionProvider || provider instanceof Class)) {    throw new IllegalArgumentException("Provider must be a PacketExtensionProvider " + "or a Class instance.");  }  String key=getProviderKey(elementName,namespace);  extensionProviders.put(key,provider);}  }
class C{  public static Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  Logger.TAG=tag;  return settings;}  }
class C{  public static void load(Properties properties,ExtendedTheme theme){  Map<String,Object> p=new HashMap<String,Object>();  p.put(P_Primary1,parseColor(properties.getProperty(P_Primary1),null));  p.put(P_Primary2,parseColor(properties.getProperty(P_Primary2),null));  p.put(P_Primary3,parseColor(properties.getProperty(P_Primary3),null));  p.put(P_Secondary1,parseColor(properties.getProperty(P_Secondary1),null));  p.put(P_Secondary2,parseColor(properties.getProperty(P_Secondary2),null));  p.put(P_Secondary3,parseColor(properties.getProperty(P_Secondary3),null));  p.put(P_Error,parseColor(properties.getProperty(P_Error),null));  p.put(P_Info,parseColor(properties.getProperty(P_Info),null));  p.put(P_Mandatory,parseColor(properties.getProperty(P_Mandatory),null));  p.put(P_Inactive,parseColor(properties.getProperty(P_Inactive),null));  p.put(P_White,parseColor(properties.getProperty(P_White),null));  p.put(P_Black,parseColor(properties.getProperty(P_Black),null));  p.put(P_Txt_OK,parseColor(properties.getProperty(P_Txt_OK),null));  p.put(P_Txt_Error,parseColor(properties.getProperty(P_Txt_Error),null));  p.put(P_Control,parseFont(properties.getProperty(P_Control),null));  p.put(P_System,parseFont(properties.getProperty(P_System),null));  p.put(P_User,parseFont(properties.getProperty(P_User),null));  p.put(P_Small,parseFont(properties.getProperty(P_Small),null));  p.put(P_Window,parseFont(properties.getProperty(P_Window),null));  p.put(P_Menu,parseFont(properties.getProperty(P_Menu),null));  theme.setUIProperties(p);}  }
class C{  @Override public int compare(NewSplitEmittedTerm term1,NewSplitEmittedTerm term2){  return term1.compareTo(term2);}  }
class C{  @Override public void addOtherFileItems(JMenu m,Application app,@Nullable View v){}  }
class C{  protected void initializeOutputType(SimpleTypeInformation<O> type){  factory=FilterUtil.guessFactory(type);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:01.584 -0500",hash_original_method="C02A6B069CD8C9360FEC8CA407C14B4A",hash_generated_method="16AFC75FFEF1B596CE842ACE5B0194B4") public ColorStateList withAlpha(int alpha){  int[] colors=new int[mColors.length];  int len=colors.length;  for (int i=0; i < len; i++) {    colors[i]=(mColors[i] & 0xFFFFFF) | (alpha << 24);  }  return new ColorStateList(mStateSpecs,colors);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_STATE_1__STATE_INTERNAL_1:    getStateInternal_1().clear();  getStateInternal_1().addAll((Collection<? extends StateInternal_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  static PollMessage createLosingTransferPollMessage(String targetId,TransferData transferData,HistoryEntry historyEntry){  return new PollMessage.OneTime.Builder().setClientId(transferData.getLosingClientId()).setEventTime(transferData.getPendingTransferExpirationTime()).setMsg(transferData.getTransferStatus().getMessage()).setResponseData(ImmutableList.of(createTransferResponse(targetId,transferData))).setParent(historyEntry).build();}  }
class C{  protected Anonymous_traceOptions_1_Impl(){  super();}  }
class C{  public int addTaxon(Taxon taxon){  int index=getTaxonIndex(taxon);  if (index == -1) {    taxa.add(taxon);    fireTaxonAdded(taxon);    index=taxa.size() - 1;  }  return index;}  }
class C{  static String generateSaveFile(String url,String hint,String contentDisposition,String contentLocation,String mimeType,int destination,long contentLength,StorageManager storageManager) throws StopRequestException {  if (contentLength < 0) {    contentLength=0;  }  String path;  File base=null;  if (destination == DownloadsDestination.DESTINATION_FILE_URI) {    path=Uri.parse(hint).getPath();  } else {    base=storageManager.locateDestinationDirectory(mimeType,destination,contentLength);    path=chooseFilename(url,hint,contentDisposition,contentLocation);  }  storageManager.verifySpace(destination,path,contentLength);  if (DownloadDrmHelper.isDrmConvertNeeded(mimeType)) {    path=DownloadDrmHelper.modifyDrmFwLockFileExtension(path);  }  path=getFullPath(path,mimeType,destination,base);  return path;}  }
class C{  public BatchRemove(){}  }
class C{  public static String format(double[] d,NumberFormat nf){  return format(d," ",nf);}  }
class C{  public static void clearProperty(String key){  RuntimeSingleton.clearProperty(key);}  }
class C{  public BusinessObjectDefinitionColumnEntity createBusinessObjectDefinitionColumnEntity(BusinessObjectDefinitionEntity businessObjectDefinitionEntity,String businessObjectDefinitionColumnName,String businessObjectDefinitionColumnDescription){  BusinessObjectDefinitionColumnEntity businessObjectDefinitionColumnEntity=new BusinessObjectDefinitionColumnEntity();  businessObjectDefinitionColumnEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  businessObjectDefinitionColumnEntity.setName(businessObjectDefinitionColumnName);  businessObjectDefinitionColumnEntity.setDescription(businessObjectDefinitionColumnDescription);  return businessObjectDefinitionColumnDao.saveAndRefresh(businessObjectDefinitionColumnEntity);}  }
class C{  int local2Global(long id){  Integer g=m_local2Global.get(id);  if (g != null)   id=g.intValue();  return (int)id;}  }
class C{  public NBTTagCompound write(NBTTagCompound nbtTags){  nbtTags.setInteger("x",xCoord);  nbtTags.setInteger("y",yCoord);  nbtTags.setInteger("z",zCoord);  nbtTags.setInteger("dimensionId",dimensionId);  return nbtTags;}  }
class C{  public boolean isWarnIfPropertyNotFound(){  return warnIfNotFound;}  }
class C{  public static float invokeF(String signature,boolean isNative,Object caller){  MethodListener i=sMethods.get(signature);  if (i != null) {    return i.onInvokeF(signature,isNative,caller);  } else   if (sDefaultListener != null) {    return sDefaultListener.onInvokeF(signature,isNative,caller);  }  return 0;}  }
class C{  public static X509Certificate[] convertCertificates(Certificate[] certsIn) throws CryptoException {  if (certsIn == null) {    return new X509Certificate[0];  }  X509Certificate[] certsOut=new X509Certificate[certsIn.length];  for (int i=0; i < certsIn.length; i++) {    certsOut[i]=convertCertificate(certsIn[i]);  }  return certsOut;}  }
class C{  public ResourceFilter filesAndFolders(){  return addKind(Kind.FILES,Kind.FOLDERS);}  }
class C{  public Matrix4x3d assumeNothing(){  properties=0;  return this;}  }
class C{  public void left(){  if (this.stereoType == StereoType.SIDE_BY_SIDE) {    pgl.viewport(0,0,this.width / 2,this.height);  } else {    pgl.viewport(0,0,this.width,this.height);  }  float top=widthdiv2;  float bottom=-widthdiv2;  float left=(-aspectRatio * widthdiv2 + 0.5f * eyeSeparation * nearPlane / convPlane);  float right=(aspectRatio * widthdiv2 + 0.5f * eyeSeparation * nearPlane / convPlane);  app.frustum(left,right,bottom,top,nearPlane,farPlane);  app.camera(posx - rightx,posy - righty,posz - rightz,posx - rightx + dirx,posy - righty + diry,posz - rightz + dirz,upx,upy,upz);}  }
class C{  public PictureScaler(){  try {    URL url=getClass().getResource("images/BB.jpg");    picture=ImageIO.read(url);    scaleW=(int)(SCALE_FACTOR * picture.getWidth());    scaleH=(int)(SCALE_FACTOR * picture.getHeight());    System.out.println("w, h = " + picture.getWidth() + ", "+ picture.getHeight());    setPreferredSize(new Dimension(PADDING + (5 * (scaleW + PADDING)),scaleH + (4 * PADDING)));  } catch (  Exception e) {    System.out.println("Problem reading image file: " + e);    System.exit(0);  }}  }
class C{  private Point2D transform(Point2D point){  return transform(point.getX(),point.getY());}  }
class C{  public void push(final V value) throws IndexOutOfBoundsException {  if (top + locals >= values.length) {    throw new IndexOutOfBoundsException("Insufficient maximum stack size.");  }  values[top++ + locals]=value;}  }
class C{  public static <T>ByteString serialize(final String templateName,T object){  StringWriter templateResults=new StringWriter();  try {    final Template template=configuration.getTemplate(templateName);    template.process(object,templateResults);  } catch (  Exception e) {    throw Throwables.propagate(e);  }  return ByteString.encodeUtf8(templateResults.toString());}  }
class C{  protected FinalizablePhantomReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  JokeCacheDao.dropTable(db,ifExists);  FreshNewsCacheDao.dropTable(db,ifExists);  PictureCacheDao.dropTable(db,ifExists);  SisterCacheDao.dropTable(db,ifExists);  VideoCacheDao.dropTable(db,ifExists);}  }
class C{  public CModuleContainerNodeMenuBuilder(final JTree projectTree,final IDatabase database){  super(projectTree);  Preconditions.checkNotNull(database,"IE01975: Database argument can't be null");  m_database=database;}  }
class C{  public int cellToOffset(int row,int col){  if (row < 0 || row >= getRowCount() || col < 0 || col > 15) {    return -1;  }  int offs=row * 16 + col;  return (offs >= 0 && offs < model.getByteCount()) ? offs : -1;}  }
class C{  public static String addPropertiesToURI(String uri,Map<String,String> properties) throws Exception {  String result=uri;  if (uri != null && properties != null) {    StringBuilder base=new StringBuilder(stripBefore(uri,'?'));    Map<String,String> map=parseParameters(uri);    if (!map.isEmpty()) {      map.putAll(properties);    } else {      map=properties;    }    if (!map.isEmpty()) {      base.append('?');      boolean first=true;      for (      Map.Entry<String,String> entry : map.entrySet()) {        if (!first) {          base.append('&');        }        first=false;        base.append(entry.getKey()).append("=").append(entry.getValue());      }      result=base.toString();    }  }  return result;}  }
class C{  private boolean isAccessibleUserToKibana(Set<String> filters){  if (filters.contains("/.kibana")) {    return true;  }  return false;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,int nbatches,int ncycles) throws Exception {  for (int i=0; i < nbatches; i++) {    sbuf.reset();    for (int j=0; j < ncycles; j++) {      oout.writeFloat((float)0.0);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readFloat();    }  }}  }
class C{  public void trimToSize(){  this.elements.trimToSize();}  }
class C{  public ConfigureXmlAttributeCountDialog_NB(XmlAttributeCount xmlAttributeCount){  this.xmlAttributeCount=xmlAttributeCount;  initComponents();  final IterateModel numberOfTagsIterator=xmlAttributeCount.getNumberOfAttributesIterator();  configureIterateModel_NB2.setStartAt(String.valueOf(numberOfTagsIterator.getStartAt()));  configureIterateModel_NB2.setStopAt(String.valueOf(numberOfTagsIterator.getStopAt()));  configureIterateModel_NB2.setIncrement(String.valueOf(numberOfTagsIterator.getIncrement()));  configureIterateModel_NB2.setIterateStrategie(numberOfTagsIterator.getIterateStrategie());  List<String> names=Arrays.asList(xmlAttributeCount.getNames());  configureStringList_NB1.setStringList(names);}  }
class C{  @Override protected Position determineMainLabelPosition(DrawContext dc){  Iterable<? extends LatLon> locations=this.polygon.getLocations();  if (locations == null)   return null;  Sector sector=Sector.boundingSector(locations);  Angle minLat=sector.getMinLatitude();  Angle avgLon=sector.getCentroid().longitude;  return new Position(minLat,avgLon,0);}  }
class C{  public static GeoTimeSerie timeclip(GeoTimeSerie gts,long start,long end){  GeoTimeSerie clipped=gts.cloneEmpty();  for (int idx=0; idx < gts.values; idx++) {    long ts=GTSHelper.tickAtIndex(gts,idx);    if (ts < start || ts > end) {      continue;    }    GTSHelper.setValue(clipped,ts,GTSHelper.locationAtIndex(gts,idx),GTSHelper.elevationAtIndex(gts,idx),GTSHelper.valueAtIndex(gts,idx),false);  }  return clipped;}  }
class C{  public MoveAction(){  super(MOVE_CMD);}  }
class C{  public void pulse(){  List<GlowEntity> allEntities=new ArrayList<>(entities.getAll());  List<GlowPlayer> players=new LinkedList<>();  activeChunksSet.clear();  pulseTickMap();  for (  GlowEntity entity : allEntities) {    if (entity instanceof GlowPlayer) {      players.add((GlowPlayer)entity);      updateActiveChunkCollection(entity);    } else {      entity.pulse();    }  }  updateBlocksInActiveChunks();  pulsePlayers(players);  resetEntities(allEntities);  updateWorldTime();  informPlayersOfTime();  updateOverworldWeather();  handleSleepAndWake(players);  saveWorld();}  }
class C{  public static void resetUsersAndGroupsCache(){  staticCache.clear();}  }
class C{  public Property dayOfMonth(){  return new Property(this,DAY_OF_MONTH);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.642 -0500",hash_original_method="BCAEEC1C0FA5608D92211F34DF6950F5",hash_generated_method="6364BAAC0F12484FDB7B269BE39D5FD2") public javax.sip.address.Address createAddress(){  return new AddressImpl();}  }
class C{  @POST @Path("pull/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response pullBackup(@QueryParam("file") String backupName,@QueryParam("force") @DefaultValue("false") boolean force){  log.info("To pull the backup file {} force={}",backupName,force);  checkExternalServer();  if (backupOps.hasStandbySites()) {    String errmsg="Please remove all standby sites before downloading";    backupOps.setRestoreStatus(backupName,false,BackupRestoreStatus.Status.DOWNLOAD_FAILED,errmsg,false,false);  } else   if (!force && backupOps.isDownloadComplete(backupName)) {    log.info("The backup file {} has already been downloaded",backupName);  } else   if (backupOps.isDownloadInProgress()) {    String curBackupName=backupOps.getCurrentBackupName();    if (!backupName.equals(curBackupName)) {      String errmsg=curBackupName + " is downloading";      backupOps.setRestoreStatus(backupName,false,BackupRestoreStatus.Status.DOWNLOAD_FAILED,errmsg,false,false);      backupOps.persistCurrentBackupInfo(curBackupName,false);    } else {      log.info("The backup {} is downloading, no need to trigger again",backupName);    }  } else {    initDownload(backupName);    downloadTask=new DownloadExecutor(getExternalServerClient(backupScheduler.getCfg()),backupName,backupOps);    Thread downloadThread=new Thread(downloadTask);    downloadThread.setDaemon(true);    downloadThread.setName("PullBackupFromRemoteServer");    downloadThread.start();    auditBackup(OperationTypeEnum.PULL_BACKUP,AuditLogManager.AUDITLOG_SUCCESS,null,backupName);  }  return Response.status(ASYNC_STATUS).build();}  }
class C{  public void destroy(){  for (  EnhancedBookmarkUIObserver observer : mUIObservers) {    observer.onDestroy();  }  assert mUIObservers.size() == 0;  if (mUndoController != null) {    mUndoController.destroy();    mUndoController=null;  }  mEnhancedBookmarksModel.removeObserver(mBookmarkModelObserver);  mEnhancedBookmarksModel.destroy();  mEnhancedBookmarksModel=null;  mLargeIconBridge.destroy();  mLargeIconBridge=null;}  }
class C{  protected N4FieldDeclarationImpl(){  super();}  }
class C{  public Enumeration elements(){  return perms.elements();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public int currentProgram(){  return this.programId;}  }
class C{  @Override public final void readFully(byte ba[],int off,int len) throws IOException {  dis.readFully(ba,off,len);}  }
class C{  String parseAttributeValue(boolean lower) throws IOException {  int delim=-1;switch (ch) {case '\'':case '"':    delim=ch;  ch=readCh();break;}while (true) {int c=ch;switch (c) {case '\n':ln++;ch=readCh();lfCount++;if (delim < 0) {return getString(0);}break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}if (delim < 0) {return getString(0);}break;case '\t':if (delim < 0) c=' ';case ' ':ch=readCh();if (delim < 0) {return getString(0);}break;case '>':case '<':if (delim < 0) {return getString(0);}ch=readCh();break;case '\'':case '"':ch=readCh();if (c == delim) {return getString(0);} else if (delim == -1) {error("attvalerr");if (strict || ch == ' ') {return getString(0);} else {continue;}}break;case '=':if (delim < 0) {error("attvalerr");if (strict) {return getString(0);}}ch=readCh();break;case '&':if (strict && delim < 0) {ch=readCh();break;}char data[]=parseEntityReference();for (int i=0; i < data.length; i++) {c=data[i];addString((lower && (c >= 'A') && (c <= 'Z')) ? 'a' + c - 'A' : c);}continue;case -1:return getString(0);default :if (lower && (c >= 'A') && (c <= 'Z')) {c='a' + c - 'A';}ch=readCh();break;}addString(c);}}  }
class C{  public MemoryMap(final com.google.security.zynamics.binnavi.debug.models.processmanager.MemoryMap memoryMap){  this.memoryMap=memoryMap;}  }
class C{  public Present(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);  setContent(ITEMS[Rand.rand(ITEMS.length)]);}  }
class C{  public static void revokePolicy(Context context) throws AndroidAgentException {  String payload=Preference.getString(context,Constants.PreferenceFlag.APPLIED_POLICY);  PolicyOperationsMapper operationsMapper=new PolicyOperationsMapper();  ObjectMapper mapper=new ObjectMapper();  mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);  mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);  PolicyRevokeHandler revokeHandler=new PolicyRevokeHandler(context);  try {    if (payload != null) {      List<org.wso2.emm.agent.beans.Operation> operations=mapper.readValue(payload,mapper.getTypeFactory().constructCollectionType(List.class,org.wso2.emm.agent.beans.Operation.class));      for (      org.wso2.emm.agent.beans.Operation op : operations) {        op=operationsMapper.getOperation(op);        revokeHandler.revokeExistingPolicy(op);      }      Preference.putString(context,Constants.PreferenceFlag.APPLIED_POLICY,null);    }  } catch (  IOException e) {    throw new AndroidAgentException("Error occurred while parsing stream",e);  }}  }
class C{  public void fireQueueSimulationInitializedEvent(){  MobsimInitializedEvent<Mobsim> event=new MobsimInitializedEvent<Mobsim>(sim);  MobsimInitializedListener[] listener=this.listenerList.getListeners(MobsimInitializedListener.class);  for (int i=0; i < listener.length; i++) {    listener[i].notifyMobsimInitialized(event);  }}  }
class C{  public void configure(){  XNetTrafficController packets=new LI100XNetPacketizer(new LenzCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setXNetTrafficController(packets);  new LI100XNetInitializationManager(this.getSystemConnectionMemo());}  }
class C{  public String expressionTipText(){  return "The expression for generating y out of x.";}  }
class C{  public void addHole(LinearRing hole){  if (holes == null)   holes=new ArrayList();  holes.add(hole);}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  public final Object methodException(Class claz,String methodName,Exception e) throws Exception {  ThreadLocalToolkit.log(new InvocationError(claz.getName(),methodName,e.getLocalizedMessage()));  return null;}  }
class C{  public void addRowSetListener(RowSetListener listener){  crsInternal.addRowSetListener(listener);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || this.getClass() != o.getClass()) {    return false;  }  Fact other=(Fact)o;  if (this.triple == null) {    if (other.triple == null) {      return this.getDerivation().equals(other.getDerivation());    } else {      return false;    }  } else {    return this.triple.equals(other.triple);  }}  }
class C{  private void readJokerExpressions(final String text,final ConversationContext ctx,final Sentence sentence){  final StringTokenizer tok=new StringTokenizer(text);  while (tok.hasMoreTokens()) {    final String str=tok.nextToken();    final Expression expr=new Expression(str);    if (ExpressionType.isTypeString(str)) {      expr.setType(new ExpressionType(str));      expr.setNormalized(Expression.JOKER);    } else {      expr.setNormalized(str);    }    expr.setMatcher(this);    sentence.expressions.add(expr);  }}  }
class C{  public int size(){  return cardinality;}  }
class C{  private static void initTestFile(File blah) throws Exception {  try (BufferedWriter writer=Files.newBufferedWriter(blah.toPath(),ISO_8859_1)){    for (int i=0; i < 4000; i++) {      String number=new Integer(i).toString();      for (int h=0; h < 4 - number.length(); h++)       writer.write("0");      writer.write("" + i);      writer.newLine();    }  } }  }
class C{  public static <T>LazyPSetX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  void checkFrameValue(final Object value){  if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) {    return;  }  if (value instanceof String) {    checkInternalName((String)value,"Invalid stack frame value");    return;  }  if (!(value instanceof Label)) {    throw new IllegalArgumentException("Invalid stack frame value: " + value);  } else {    usedLabels.add((Label)value);  }}  }
class C{  public ClusterSearchShardsRequest routing(String routing){  this.routing=routing;  return this;}  }
class C{  public static Boolean isTopActivity(Context context,String packageName){  if (context == null || TextUtils.isEmpty(packageName)) {    return null;  }  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningTaskInfo> tasksInfo=activityManager.getRunningTasks(1);  if (tasksInfo == null || tasksInfo.size() < 1) {    return null;  }  try {    return packageName.equals(tasksInfo.get(0).topActivity.getPackageName());  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  protected void renderImage(int width,int height,int hint){  Image master=getMasterImage();  if (master != null) {    do {      Image i=master.getScaledInstance(width,height,hint);      tracker.addImage(i,1);      try {        tracker.waitForID(1);      } catch (      InterruptedException e) {        e.printStackTrace();        bgImage=null;        return;      } finally {        tracker.removeImage(i,1);      }      bgImage.getGraphics().drawImage(i,0,0,null);      tracker.addImage(bgImage,0);      try {        tracker.waitForID(0);      } catch (      InterruptedException e) {        e.printStackTrace();        bgImage=null;        return;      } finally {        tracker.removeImage(bgImage,0);      }    } while (bgImage.contentsLost());  } else {    bgImage=null;  }}  }
class C{  POSLabeledUnknownWordParser(String file){  super(file);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.714 -0400",hash_original_method="1E598B71C72945526CFEDACCA9070A7B",hash_generated_method="322F56CD5683A844E3322F033D9B5163") public String encode(String pString){  return soundex(pString);}  }
class C{  private void openCamera(CameraOptions cameraId){  Method method=getCameraOpenMethod();  if (mNbfCameras > 1 && method != null) {    try {      int hCamId=0;      if (cameraId == CameraOptions.FRONT) {        Camera.CameraInfo cameraInfo=new Camera.CameraInfo();        for (int id=0; id < mNbfCameras; id++) {          Camera.getCameraInfo(id,cameraInfo);          if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {            hCamId=id;            break;          }        }      }      mCamera=(Camera)method.invoke(mCamera,new Object[]{hCamId});      mOpenedCameraId=cameraId;    } catch (    Exception e) {      mCamera=Camera.open();      mOpenedCameraId=CameraOptions.BACK;    }  } else {    mCamera=Camera.open();    mOpenedCameraId=CameraOptions.BACK;  }  if (mVideoPlayer != null) {    mVideoPlayer.setCameraId(mOpenedCameraId.getValue());  }  if (LogUtils.isActive) {    Log.d(LOGTAG,"Open camera ".concat(mOpenedCameraId.toString()));  }}  }
class C{  public boolean refineColors(int color){  boolean ok=refine(color);  while (ok && !colorsToRecheck.isEmpty()) {    int colorToCheck=colorsToRecheck.iterator().next();    ok=refine(colorToCheck);    colorsToRecheck.remove((Integer)colorToCheck);  }  return ok;}  }
class C{  public MonitorException(String message,Throwable cause){  super(message,cause);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Override @Transactional public File exportAnnotationDocument(SourceDocument aDocument,String aUser,Class aWriter,String aFileName,Mode aMode) throws UIMAException, IOException, ClassNotFoundException {  return exportAnnotationDocument(aDocument,aUser,aWriter,aFileName,aMode,true);}  }
class C{  public static boolean isString(TypeMirror type){  return isDeclaredOfName(type,"java.lang.String");}  }
class C{  public AdditiveModel generateWeightVector(){  for (  Map.Entry<String,Map<String,Integer>> family : featureIndexer.entrySet()) {    String familyName=family.getKey();    for (    Map.Entry<String,Integer> feature : family.getValue().entrySet()) {      weightVector[feature.getValue()]=weights.get(familyName).get(feature.getKey());    }  }  return this;}  }
class C{  @Override public boolean onCreate(){  mOpenHelper=new DatabaseHelper(getContext());  return true;}  }
class C{  public static boolean reachable(InetAddress addr,int reachTimeout){  try {    return addr.isReachable(reachTimeout);  } catch (  IOException ignore) {    return false;  }}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public void addNode(String sName,int nCardinality,int nPosX,int nPosY) throws Exception {  if (getNode2(sName) >= 0) {    addNode(sName + "x",nCardinality);    return;  }  ArrayList<String> values=new ArrayList<String>(nCardinality);  for (int iValue=0; iValue < nCardinality; iValue++) {    values.add("Value" + (iValue + 1));  }  Attribute att=new Attribute(sName,values);  m_Instances.insertAttributeAt(att,m_Instances.numAttributes());  int nAtts=m_Instances.numAttributes();  ParentSet[] parentSets=new ParentSet[nAtts];  for (int iParentSet=0; iParentSet < nAtts - 1; iParentSet++) {    parentSets[iParentSet]=m_ParentSets[iParentSet];  }  parentSets[nAtts - 1]=new ParentSet();  m_ParentSets=parentSets;  Estimator[][] distributions=new Estimator[nAtts][];  for (int iNode=0; iNode < nAtts - 1; iNode++) {    distributions[iNode]=m_Distributions[iNode];  }  distributions[nAtts - 1]=new Estimator[1];  distributions[nAtts - 1][0]=new DiscreteEstimatorBayes(nCardinality,0.5);  m_Distributions=distributions;  m_nPositionX.add(nPosX);  m_nPositionY.add(nPosY);  m_nEvidence.add(-1);  double[] fMarginP=new double[nCardinality];  for (int iValue=0; iValue < nCardinality; iValue++) {    fMarginP[iValue]=1.0 / nCardinality;  }  m_fMarginP.add(fMarginP);  if (m_bNeedsUndoAction) {    addUndoAction(new AddNodeAction(sName,nCardinality,nPosX,nPosY));  }}  }
class C{  public void pop(){  StackFrame frame=stack.pop();  top=top.minus(frame.sizeInBytes());  assert top.GE(stackBase);}  }
class C{  public boolean inExceptionSegments(){  return binarySearchExceptionSegments(this) >= 0;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.422 -0400",hash_original_method="CBA24EA576157137E32DA1145EF01444",hash_generated_method="82753090EFFFF124CE51E97E6B51903C") private static int read(InputStream input) throws IOException {  int value=input.read();  if (-1 == value) {    throw new EOFException("Unexpected EOF reached");  }  return value;}  }
class C{  protected IntegerLiteral(BigInteger value){  this(value,XMLSchema.INTEGER);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.800 -0400",hash_original_method="376D3C3326DC6A43D167BD03D83369CA",hash_generated_method="51F45D1FE4BD43E553A1C8ADFD0246B5") private void onRequestPinCode(String objectPath,int nativeData){  String address=checkPairingRequestAndGetAddress(objectPath,nativeData);  if (address == null)   return;  String pendingOutgoingAddress=mBluetoothService.getPendingOutgoingBonding();  BluetoothClass btClass=new BluetoothClass(mBluetoothService.getRemoteClass(address));  int btDeviceClass=btClass.getDeviceClass();  if (address.equals(pendingOutgoingAddress)) {    if (mBluetoothService.isBluetoothDock(address)) {      String pin=mBluetoothService.getDockPin();      mBluetoothService.setPin(address,BluetoothDevice.convertPinToBytes(pin));      return;    }switch (btDeviceClass) {case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET:case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE:case BluetoothClass.Device.AUDIO_VIDEO_HEADPHONES:case BluetoothClass.Device.AUDIO_VIDEO_PORTABLE_AUDIO:case BluetoothClass.Device.AUDIO_VIDEO_HIFI_AUDIO:      if (mBluetoothService.attemptAutoPair(address))       return;  }}if (btDeviceClass == BluetoothClass.Device.PERIPHERAL_KEYBOARD || btDeviceClass == BluetoothClass.Device.PERIPHERAL_KEYBOARD_POINTING) {  if (mBluetoothService.isFixedPinZerosAutoPairKeyboard(address)) {    mBluetoothService.setPin(address,BluetoothDevice.convertPinToBytes("0000"));    return;  }  int pin=(int)Math.floor(Math.random() * 10000);  sendDisplayPinIntent(address,pin);  return;}mWakeLock.acquire();Intent intent=new Intent(BluetoothDevice.ACTION_PAIRING_REQUEST);intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mAdapter.getRemoteDevice(address));intent.putExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,BluetoothDevice.PAIRING_VARIANT_PIN);mContext.sendBroadcast(intent,BLUETOOTH_ADMIN_PERM);mWakeLock.release();return;}  }
class C{  private static boolean areEqual(int fromIndex,CharSequence left,CharSequence right){  if (left == right)   return true;  if ((left == null) || (right == null))   return false;  int n=left.length();  if (right.length() != n)   return false;  for (int i=n; i > fromIndex; ) {    if (left.charAt(--i) != right.charAt(i))     return false;  }  return true;}  }
class C{  public boolean isFilled(){  return filled;}  }
class C{  private static String cleanODataPath(String path,HandleParametersOption handleParameters){  String cleanedPath=path;  if (HandleParametersOption.USE_ALL.equals(handleParameters)) {    cleanedPath=path;  } else {    Matcher matcher=patternResourceIdentifierUnquoted.matcher(path);    if (matcher.find()) {      String resourceName=matcher.group(1);      String resourceID=matcher.group(2);      String subString=resourceName + "(" + resourceID+ ")";      int begin=path.indexOf(subString);      int end=begin + subString.length();      String beforeSubstring=path.substring(0,begin);      String afterSubstring=path.substring(end);      if (HandleParametersOption.IGNORE_COMPLETELY.equals(handleParameters) || HandleParametersOption.IGNORE_VALUE.equals(handleParameters)) {        StringBuilder sb=new StringBuilder(beforeSubstring);        sb.append(resourceName).append("()").append(afterSubstring);        cleanedPath=sb.toString();      }    } else {      matcher=patternResourceMultipleIdentifier.matcher(path);      if (matcher.find()) {        String multipleIdentifierSection=matcher.group(1);        int begin=path.indexOf(multipleIdentifierSection);        int end=begin + multipleIdentifierSection.length();        String beforeSubstring=path.substring(0,begin);        String afterSubstring=path.substring(end);        if (HandleParametersOption.IGNORE_COMPLETELY.equals(handleParameters)) {          cleanedPath=beforeSubstring + afterSubstring;        } else {          StringBuilder sb=new StringBuilder(beforeSubstring);          matcher=patternResourceMultipleIdentifierDetail.matcher(multipleIdentifierSection);          int i=1;          while (matcher.find()) {            if (i > 1) {              sb.append(',');            }            String paramName=matcher.group(1);            sb.append(paramName);            i++;          }          sb.append(afterSubstring);          cleanedPath=sb.toString();        }      }    }  }  return cleanedPath;}  }
class C{  public Object[] toArray(){  Object[] result=new Object[size];  int i=0;  for (Entry e=header.next; e != header; e=e.next)   result[i++]=e.element;  return result;}  }
class C{  public static java.sql.Timestamp toTimestamp(String date,String time){  java.util.Date newDate=toDate(date,time);  if (newDate != null) {    return new java.sql.Timestamp(newDate.getTime());  } else {    return null;  }}  }
class C{  public boolean hasEngagement(){  return hasExtension(Engagement.class);}  }
class C{  private static void usage(){  System.out.println("Usage: java Tester --serviceName [service] " + "--appName [app] --feedUrl [feed] --username [user] " + "--password [pass] --update");  System.out.println("\nA generic client for querying a GData feed and optionally\n" + "inserting/updating/deleting entries.\n\n" + "It uses the specified Google Account username and password to\n"+ "query the specified feed URL and displays the title and content\n"+ "of each entry returned. If --update is specified, it will insert\n"+ "an entry, update it, and then delete it.\n");}  }
class C{  public void pause(){  videoViewImpl.pause();  setKeepScreenOn(false);  if (videoControls != null) {    videoControls.updatePlaybackState(false);  }}  }
class C{  public big addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static <T>void writeNullableCollection(BinaryRawWriterEx writer,@Nullable Collection<T> col,@Nullable PlatformWriterClosure<T> writeClo,@Nullable IgnitePredicate<T> filter){  if (col != null) {    writer.writeBoolean(true);    writeCollection(writer,col,writeClo,filter);  } else   writer.writeBoolean(false);}  }
class C{  private static String dl(HttpsURLConnection con) throws IOException {  StringBuilder response=new StringBuilder();  BufferedReader in=null;  try {    con.setRequestMethod("GET");    con.setRequestProperty("User-Agent",USER_AGENT);    in=new BufferedReader(new InputStreamReader(con.getInputStream()));    String inputLine;    while ((inputLine=in.readLine()) != null) {      response.append(inputLine);    }  } catch (  UnknownHostException uhe) {    throw new IOException("unknown host or no network",uhe);  }catch (  Exception e) {    throw new IOException(e);  } finally {    if (in != null) {      in.close();    }  }  return response.toString();}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatusUsers createUsers(String instanceId,ProvisioningSettings settings,List<ServiceUser> users) throws APPlatformException {  return null;}  }
class C{  private void doClose(){  open=false;  connections.remove(this);  for (  Map.Entry<Long,ContextualFuture> entry : futures.entrySet()) {    ContextualFuture future=entry.getValue();    try {      future.context.executor().execute(null);    } catch (    RejectedExecutionException e) {    }  }  futures.clear();  for (  Consumer<Connection> closeListener : closeListeners) {    try {      context.executor().execute(null);    } catch (    RejectedExecutionException e) {    }  }}  }
class C{  @Override public String popupLoaderBackgroundColor(){  return "white";}  }
class C{  public ProjectScope(IProject context){  super();  if (context == null)   throw new IllegalArgumentException();  this.context=context;}  }
class C{  public CategoryGraph() throws WikiApiException {  logger.warn("Attention. You created an empty category graph. Intentionally?");}  }
class C{  public String missingValueTipText(){  return "The placeholder for missing values, default is '?'.";}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj == null) {    return false;  }  if (!(getClass() == obj.getClass())) {    return false;  }  OPath path=(OPath)obj;  if (_fromPortal != null && !_fromPortal.equals(path.getFromPortal())) {    return false;  }  if (_toPortal != null && !_toPortal.equals(path.getToPortal())) {    return false;  }  Iterator<BeanSetting> iter=path.getSettings().iterator();  while (iter.hasNext()) {    BeanSetting beanSetting=iter.next();    Iterator<BeanSetting> it=getSettings().iterator();    while (it.hasNext()) {      BeanSetting bs=it.next();      if (!bs.getBeanName().equals(beanSetting.getBeanName())) {        return false;      }      if (bs.getSetting() != beanSetting.getSetting()) {        return false;      }    }  }  return true;}  }
class C{  public static void addRow(final FluoClient fluoClient,final String row,final Column col,final String val){  checkNotNull(fluoClient);  try (Transaction tx=fluoClient.newTransaction()){    addRow(tx,row,col,val);    tx.commit();  } }  }
class C{  public Configurator errorButton(int textRes,int backgroundRes){  if (textRes > 0) {    viewErrorTryAgainButtonText=textRes;  }  if (backgroundRes > 0) {    viewErrorTryAgainButtonBackgroundResource=backgroundRes;  }  return this;}  }
class C{  public static int decodeYear(char milleniumChar,char centuryChar,char decadeChar,char yearChar) throws DecodingException {  return (decodeDigit(milleniumChar) * 1000) + (decodeDigit(centuryChar) * 100) + (decodeDigit(decadeChar) * 10)+ decodeDigit(yearChar);}  }
class C{  public ReflectiveConfigGroup(final String name,final boolean storeUnknownParametersAsStrings){  super(name);  this.storeUnknownParameters=storeUnknownParametersAsStrings;  setters=getSetters();  stringGetters=getStringGetters();  if (!setters.keySet().equals(stringGetters.keySet())) {    throw new InconsistentModuleException("setters and getters inconsistent");  }  checkConvertNullAnnotations();}  }
class C{  public void printJobCompleted(PrintJobEvent pje){}  }
class C{  public void lastUpdateTime(long lastUpdateTime){  assert lastUpdateTime > 0;  this.lastUpdateTime=lastUpdateTime;}  }
class C{  public void downloadIFrameExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DocumentoVitalPO documentoVital=(DocumentoVitalPO)getFromTemporalSession(request,DocumentosVitalesConstants.DOCUMENTO_VITAL_KEY);  if (documentoVital != null) {    try {      downloadIFrame(response,documentoVital.getNombreCompletoFichero(),documentoVital.getContenido());    } catch (    Exception e) {      obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.GLOBAL_ARCHIGEST_EXCEPTION,e.toString()));      goLastClientExecuteLogic(mappings,form,request,response);    }  } else {    obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DocumentosVitalesConstants.ERRORS_DOCVITALES_DOC_NO_ENCONTRADO));    goLastClientExecuteLogic(mappings,form,request,response);  }}  }
class C{  public ExceptionBehaviorPredicate(BehaviorType behavior){  this.behavior=behavior;}  }
class C{  public T caseExitPointSpec(ExitPointSpec object){  return null;}  }
class C{  public void isTranspose(int genome[][],MersenneTwisterFast srt,int headsize,int genesize){  try {    int index=srt.nextInt(genome.length);    int gf[]=genome[index];    int gfStart=srt.nextInt(genesize);    if (headsize <= 1)     return;    int gfSize=srt.nextInt(headsize - 1 < gf.length - gfStart ? headsize - 1 : gf.length - gfStart) + 1;    index=srt.nextInt(genome.length);    int gt[]=genome[index];    int gtStart=srt.nextInt(headsize - gfSize);    int temp[]=new int[gfSize];    int i;    for (i=0; i < gfSize; i++)     temp[i]=gf[gfStart + i];    for (i=headsize - gfSize - 1; i > gtStart; i--)     gt[i + gfSize]=gt[i];    for (i=0; i < gfSize; i++)     gt[i + gtStart + 1]=temp[i];  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public char readWithCast() throws IOException {  read();  return this.readChar;}  }
class C{  public static int orientationIndex(Coordinate p1,Coordinate p2,Coordinate q){  double dx1=p2.x - p1.x;  double dy1=p2.y - p1.y;  double dx2=q.x - p2.x;  double dy2=q.y - p2.y;  double det=dx1 * dy2 - dx2 * dy1;  if (det > 0.0)   return 1;  if (det < 0.0)   return -1;  return 0;}  }
class C{  public boolean isLogicalFunction(){  return true;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  updateEntry();  return success;}  }
class C{  public boolean services(Car car){  return services(null,car);}  }
class C{  public static DocList doSimpleQuery(String sreq,SolrQueryRequest req,int start,int limit) throws IOException {  List<String> commands=StrUtils.splitSmart(sreq,';');  String qs=commands.size() >= 1 ? commands.get(0) : "";  try {    Query query=QParser.getParser(qs,null,req).getQuery();    Sort sort=null;    if (commands.size() >= 2) {      sort=QueryParsing.parseSortSpec(commands.get(1),req).getSort();    }    DocList results=req.getSearcher().getDocList(query,(DocSet)null,sort,start,limit);    return results;  } catch (  SyntaxError e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Error parsing query: " + qs);  }}  }
class C{  @Override protected String replaceImageUrl(final String cssUri,final String imageUrl){  final String contextPath=context.getRequest() != null ? context.getRequest().getContextPath() : null;  final RewriterContext rewriterContext=new RewriterContext().setAggregatedFolderPath(context.getAggregatedFolderPath()).setProxyPrefix(getUrlPrefix()).setContextPath(contextPath);  return new ImageUrlRewriter(rewriterContext).rewrite(cssUri,imageUrl);}  }
class C{  protected void rememberAttribute(String name,String value){  if (textAttributes == null)   textAttributes=new HashMap<String,String>(4);  textAttributes.put(name,value);}  }
class C{  @VisibleForTesting void invokeSubscriberMethod(Object event) throws InvocationTargetException {  try {    method.invoke(target,checkNotNull(event));  } catch (  IllegalArgumentException e) {    throw new Error("Method rejected target/argument: " + event,e);  }catch (  IllegalAccessException e) {    throw new Error("Method became inaccessible: " + event,e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof Error) {      throw (Error)e.getCause();    }    throw e;  }}  }
class C{  public JCheckBoxMenuItem(String text){  this(text,null,false);}  }
class C{  public G1Message parse(String message){  G1Message result=null;  if (message.startsWith(G1)) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(message," =,",true);    result=new G1Message();    tok.nextToken();    result.gameId=tok.nextToken();    tok.nextToken();    result.isPrivate=tok.nextToken().equals("1");    tok.nextToken();    result.gameTypeDescription=tok.nextToken();    tok.nextToken();    result.isRated=tok.nextToken().equals("1");    tok.nextToken();    result.isWhtieRegistered=!tok.nextToken().equals("1");    result.isBlackRegistered=!tok.nextToken().equals("1");    tok.nextToken();    result.initialWhiteTimeMillis=Long.parseLong(tok.nextToken()) * 1000;    result.initialWhiteIncMillis=Long.parseLong(tok.nextToken()) * 1000;    tok.nextToken();    result.initialBlackTimeMillis=Long.parseLong(tok.nextToken()) * 1000;    result.initialBlackIncMillis=Long.parseLong(tok.nextToken()) * 1000;    tok.nextToken();    result.parterGameId=tok.nextToken();    tok.nextToken();    result.whiteRating=tok.nextToken();    result.blackRating=tok.nextToken();    tok.nextToken();    result.isWhiteUsingTimeseal=tok.nextToken().equals("1");    result.isBlackUsingTimeseal=tok.nextToken().equals("1");    if (!result.isBlackRegistered) {      result.blackRating="++++";    }    if (!result.isWhtieRegistered) {      result.whiteRating="++++";    }    return result;  }  return result;}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  if ((func instanceof FuncCurrent) || (func instanceof FuncExtFunction))   m_isAbs=false;  return true;}  }
class C{  public boolean isTriggered(DialogueState state,Collection<String> updatedVars){  if (rules.isEmpty()) {    return false;  }  for (  Template trigger : triggers) {    for (    String updatedVar : updatedVars) {      if (trigger.match(updatedVar).isMatching()) {        return true;      }    }  }  return false;}  }
class C{  public void addAll(int... values){  for (  int value : values) {    add(value);  }}  }
class C{  public InvalidExporterDatabaseFormatException(final String msg){  super(msg);}  }
class C{  private void disconnectFromRoomInternal(){  roomState=ConnectionState.CLOSED;  if (tcpClient != null) {    tcpClient.disconnect();    tcpClient=null;  }  executor.shutdown();}  }
class C{  @LogicallyUninterruptible @NoInline public static void traceAlloc(boolean isImmortal,ObjectReference ref,ObjectReference typeRef,int bytes){  boolean gcAllowed=VM.traceInterface.gcEnabled() && Plan.isInitialized() && VM.activePlan.isMutator();  Word oid=VM.traceInterface.getOID(ref);  Word allocType;  if (gcAllowed && (oid.GE(lastGC.plus(Word.fromIntZeroExtend(Options.traceRate.getValue())))))   allocType=TRACE_EXACT_ALLOC; else {    allocType=TRACE_ALLOC;  }  traceBusy=true;  if (MERLIN_ANALYSIS) {    Address fp=(TraceBuffer.OMIT_ALLOCS) ? Address.zero() : VM.traceInterface.skipOwnFramesAndDump(typeRef);    if (isImmortal && allocType.EQ(TRACE_EXACT_ALLOC))     trace.push(TRACE_EXACT_IMMORTAL_ALLOC); else     if (isImmortal)     trace.push(TRACE_IMMORTAL_ALLOC); else     trace.push(allocType);    trace.push(VM.traceInterface.getOID(ref));    trace.push(Word.fromIntZeroExtend(bytes - VM.traceInterface.getHeaderSize()));    trace.push(fp.toWord());    trace.push(Word.zero());    trace.push(TRACE_TIB_SET);    trace.push(VM.traceInterface.getOID(ref));    trace.push(VM.traceInterface.getOID(typeRef));  }  if (allocType.EQ(TRACE_EXACT_ALLOC)) {    if (MERLIN_ANALYSIS) {      lastGC=VM.traceInterface.getOID(ref);      VM.traceInterface.updateTime(lastGC);    } else {      lastGC=VM.traceInterface.getOID(ref);    }  }  if (!MERLIN_ANALYSIS) {    Address fp=(TraceBuffer.OMIT_ALLOCS) ? Address.zero() : VM.traceInterface.skipOwnFramesAndDump(typeRef);    if (isImmortal && allocType.EQ(TRACE_EXACT_ALLOC))     trace.push(TRACE_EXACT_IMMORTAL_ALLOC); else     if (isImmortal)     trace.push(TRACE_IMMORTAL_ALLOC); else     trace.push(allocType);    trace.push(VM.traceInterface.getOID(ref));    trace.push(Word.fromIntZeroExtend(bytes - VM.traceInterface.getHeaderSize()));    trace.push(fp.toWord());    trace.push(Word.zero());    trace.push(TRACE_TIB_SET);    trace.push(VM.traceInterface.getOID(ref));    trace.push(VM.traceInterface.getOID(typeRef));  }  trace.process();  traceBusy=false;}  }
class C{  public Rotate3dAnimation(float fromDegrees,float toDegrees,float centerX,float centerY,float depthZ,boolean reverse){  mFromDegrees=fromDegrees;  mToDegrees=toDegrees;  mCenterX=centerX;  mCenterY=centerY;  mDepthZ=depthZ;  mReverse=reverse;}  }
class C{  protected boolean sentenceBeginner(Word word){  return word.form.equals("The");}  }
class C{  public void unregisterDataSetObserver(DataSetObserver observer){  listAdapterObservable.unregisterObserver(observer);}  }
class C{  private static float determineEnemyBlitzStrength(final Territory blitzHere,final List<Route> blitzTerrRoutes,final List<Territory> blockTerr,final GameData data,final PlayerID ePlayer){  final HashSet<Integer> ignore=new HashSet<>();  ignore.add(1);  final CompositeMatch<Unit> blitzUnit=new CompositeMatchAnd<>(Matches.unitIsOwnedBy(ePlayer),Matches.UnitCanBlitz,Matches.UnitCanMove);  final CompositeMatch<Territory> validBlitzRoute=new CompositeMatchAnd<>(Matches.territoryHasNoEnemyUnits(ePlayer,data),Matches.TerritoryIsNotImpassableToLandUnits(ePlayer,data));  final List<Route> routes=new ArrayList<>();  final List<Unit> blitzUnits=findAttackers(blitzHere,2,ignore,ePlayer,data,blitzUnit,validBlitzRoute,blockTerr,routes,false);  for (  final Route r : routes) {    if (r.numberOfSteps() == 2) {      blitzTerrRoutes.add(r);    }  }  return strength(blitzUnits,true,false,true);}  }
class C{  public NamedElementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void externalFrame(JComponent child){  externalFrame(getWrapper(child));}  }
class C{  private void cleanUpOnSuccess(){  FilesUtility.delete(newReleaseFS.getDownloadFolder());}  }
class C{  public void testEqualsDoesNotDoHostnameResolution() throws Exception {  for (  InetAddress inetAddress : InetAddress.getAllByName("localhost")) {    String address=inetAddress.getHostAddress();    if (inetAddress instanceof Inet6Address) {      address="[" + address + "]";    }    URL urlByHostName=new URL("http://localhost/foo?bar=baz#quux");    URL urlByAddress=new URL("http://" + address + "/foo?bar=baz#quux");    assertFalse("Expected " + urlByHostName + " to not equal "+ urlByAddress,urlByHostName.equals(urlByAddress));  }}  }
class C{  public static Pair<String,String> checkSpecialSearch(String filter,char[] binarySortedPrefixes){  if (filter.length() > 1 && Arrays.binarySearch(binarySortedPrefixes,filter.charAt(0)) >= 0) {    return new Pair<>(filter.substring(0,1),filter.substring(1));  }  return null;}  }
class C{  protected static BigInteger createRandomBigIntegerInRange(final BigInteger min,final BigInteger max,final SecureRandom random){  final int cmp=min.compareTo(max);  if (cmp >= 0) {    if (cmp > 0)     throw new IllegalArgumentException("'min' may not be greater than 'max'");    return min;  }  if (min.bitLength() > max.bitLength() / 2)   return createRandomBigIntegerInRange(BigInteger.ZERO,max.subtract(min),random).add(min);  final int MAX_ITERATIONS=1000;  for (int i=0; i < MAX_ITERATIONS; ++i) {    BigInteger x=new BigInteger(max.bitLength(),random);    if (x.compareTo(min) >= 0 && x.compareTo(max) <= 0)     return x;  }  return new BigInteger(max.subtract(min).bitLength() - 1,random).add(min);}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  if (!HandlerUtil.matchesRadioState(event)) {    IWorkbenchPart part=HandlerUtil.getActivePart(event);    if (part instanceof SecuritySpecOutlineViewPart) {      SecuritySpecOutlineViewPart droidsafeView=(SecuritySpecOutlineViewPart)part;      String currentState=event.getParameter(RadioState.PARAMETER_ID);      droidsafeView.setTopLevelNodeForView(currentState);      HandlerUtil.updateRadioState(event.getCommand(),currentState);    }  }  return null;}  }
class C{  public static void interpreterOnly(Runnable runnable){  runnable.run();}  }
class C{  public static LayerList collapseLists(LayerList[] lists){  if (lists == null || lists.length == 0) {    String message=Logging.getMessage("nullValue.LayersListArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  LayerList list=lists[0];  for (int i=1; i < lists.length; i++) {    LayerList ll=lists[i];    for (    Layer layer : ll) {      list.add(layer);    }    for (    Layer layer : ll) {      ll.remove(layer);    }  }  return list;}  }
class C{  public SmallArrayBasedLongToDoubleMap(){  this.capacity=4;  this.size=0;  this.keys=new long[capacity];  this.values=new double[capacity];  this.keySet=null;}  }
class C{  public void addListener(EnvLoaderListener listener){  super.addListener(listener);synchronized (_listeners) {    for (int i=_listeners.size() - 1; i >= 0; i--) {      EnvLoaderListener oldListener=_listeners.get(i);      if (listener == oldListener) {        return;      } else       if (oldListener == null)       _listeners.remove(i);    }    _listeners.add(listener);  }  if (getLifecycle().isStarting()) {    listener.environmentBind(this);  }  if (getLifecycle().isStarting() && _isConfigComplete) {    listener.environmentStart(this);  }}  }
class C{  private boolean remoteDeletePoi(final Poi poi,String changeSetId){  Backend.ModificationStatus modificationStatus=backend.deletePoi(poi,changeSetId);  poiManager.deleteOldPoiAssociated(poi);switch (modificationStatus) {case SUCCESS:case FAILURE_NOT_EXISTING:    poiManager.deletePoi(poi);  return true;case FAILURE_CONFLICT:bus.post(new SyncConflictingNodeErrorEvent(poi.getName(),poi.getId()));Timber.e("Couldn't update poi %s: conflict, redownloading last version of poi",poi);deleteAndRetrieveUnmodifiedPoi(poi);return false;case FAILURE_UNKNOWN:default :Timber.e("Couldn't delete poi %s",poi);bus.post(new SyncUploadRetrofitErrorEvent(poi.getId()));return false;}}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.921 -0500",hash_original_method="05D11288A97D40A10A9E1FF4BB412446",hash_generated_method="E7183459344DDC1F8F41F20C87AC3E8F") public ServerRequestInterface newSIPServerRequest(SIPRequest sipRequest,MessageChannel messageChannel){  if (messageChannel == null || sipRequest == null) {    throw new IllegalArgumentException("Null Arg!");  }  SipStackImpl theStack=(SipStackImpl)messageChannel.getSIPStack();  DialogFilter retval=new DialogFilter(theStack);  if (messageChannel instanceof SIPTransaction) {    retval.transactionChannel=(SIPTransaction)messageChannel;  }  retval.listeningPoint=messageChannel.getMessageProcessor().getListeningPoint();  if (retval.listeningPoint == null)   return null;  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("Returning request interface for " + sipRequest.getFirstLine() + " "+ retval+ " messageChannel = "+ messageChannel);  return retval;}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  public static int testIfRead3Snippet(int a){  if (a < 0) {    container.a=10;  }  int res=container.a;  container.a=20;  return res;}  }
class C{  public static void addCrystallization(Block input,ItemStack output1,ItemStack output2,float xp){  CrystallizerRecipes.instance().crystallize(input,output1,output2,xp);}  }
class C{  @Override public void putAll(Map<? extends Float,? extends Long> map){  Iterator<? extends Entry<? extends Float,? extends Long>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Float,? extends Long> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public void run(){  Properties.getInstance();  setupRuntimeProperties();  handleShadingSpecialCases();  JDKClassResetter.init();  Sandbox.setCheckForInitialization(Properties.SANDBOX);  MockFramework.enable();  if (TestSuiteWriterUtils.needToUseAgent() && Properties.JUNIT_CHECK) {    initializeToolJar();  }  MSecurityManager.setupMasterNodeRemoteHandling(MasterNodeRemote.class);  LoggingUtils.getEvoLogger().info("* Connecting to master process on port " + Properties.PROCESS_COMMUNICATION_PORT);  boolean registered=ClientServices.getInstance().registerServices();  if (!registered) {    result=TestGenerationResultBuilder.buildErrorResult("Could not connect to master process on port " + Properties.PROCESS_COMMUNICATION_PORT);    throw new RuntimeException("Could not connect to master process on port " + Properties.PROCESS_COMMUNICATION_PORT);  }  if (Properties.SPAWN_PROCESS_MANAGER_PORT != null) {    SpawnProcessKeepAliveChecker.getInstance().registerToRemoteServerAndDieIfFails(Properties.SPAWN_PROCESS_MANAGER_PORT);  }  ClientServices.getInstance().getClientNode().waitUntilDone();  ClientServices.getInstance().stopServices();  SpawnProcessKeepAliveChecker.getInstance().unRegister();}  }
class C{  public void write(byte[] b,int off,int len) throws java.io.IOException {  return;}  }
class C{  public static File extractResource(String resource) throws IOException {  InputStream input=null;  OutputStream output=null;  byte[] buffer=new byte[Settings.BUFFER_SIZE];  int len=-1;  File file=null;  int position=resource.indexOf('.',resource.lastIndexOf('/'));  if (position < 0) {    file=TestUtils.createTempFile();  } else {    file=File.createTempFile("test",resource.substring(position));    file.deleteOnExit();  }  try {    input=TestUtils.class.getResourceAsStream(resource);    if (input == null) {      throw new IOException("resource not found: " + resource);    }    try {      output=new FileOutputStream(file);      while ((len=input.read(buffer)) != -1) {        output.write(buffer,0,len);      }    }  finally {      if (output != null) {        output.close();      }    }  }  finally {    if (input != null) {      input.close();    }  }  return file;}  }
class C{  public ImageResizer(Context context,int imageSize){  super(context);  setImageSize(imageSize);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    final double log2=0.301029995663981;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log(z) / log2);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Listener<T> add(Consumer<T> listener){  Assert.notNull(listener,"listener");  ListenerHolder holder=new ListenerHolder(listener,ThreadContext.currentContext());  listeners.add(holder);  return holder;}  }
class C{  public void rename(String oldName,String newName) throws NamingException {  rename(new CompositeName(oldName),new CompositeName(newName));}  }
class C{  public AreaChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,float smoothness){  super(dataset,renderer);  firstMultiplier=smoothness;  secondMultiplier=1 - firstMultiplier;}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,true);}  }
class C{  public void openPetSelector(Player player){  this.openPetSelector(player,false);}  }
class C{  public void defaultMutate(EvolutionState state,int thread){  GeneVectorSpecies s=(GeneVectorSpecies)species;  for (int x=0; x < genome.length; x++) {    if (state.random[thread].nextBoolean(s.mutationProbability(x))) {      if (s.duplicateRetries(x) <= 0) {        genome[x].mutate(state,thread);      } else {        Gene old=(Gene)(genome[x].clone());        for (int retries=0; retries < s.duplicateRetries(x) + 1; retries++) {          genome[x].mutate(state,thread);          if (!genome[x].equals(old))           break; else           genome[x]=old;        }      }    }  }}  }
class C{  private void dumpAll(Map map,int lvmid){  if (DEBUG) {    Set keys=map.keySet();    System.err.println("Dump for " + lvmid);    int j=0;    for (Iterator i=keys.iterator(); i.hasNext(); j++) {      Monitor monitor=(Monitor)map.get(i.next());      System.err.println(j + "\t" + monitor.getName()+ "="+ monitor.getValue());    }    System.err.println("nextEntry = " + nextEntry + " pollForEntry = "+ pollForEntry);    System.err.println("Buffer info:");    System.err.println("buffer = " + buffer);  }}  }
class C{  public static boolean isNodeTheSame(Node node1,Node node2){  if (node1 instanceof DTMNodeProxy && node2 instanceof DTMNodeProxy)   return ((DTMNodeProxy)node1).equals((DTMNodeProxy)node2); else   return (node1 == node2);}  }
class C{  public boolean isException(){  return hasFlag(EXCEPTION);}  }
class C{  private QueryBuilderKraken parseSelect(){  SelectQueryBuilder selectBuilder=new SelectQueryBuilder(_tableManager,_sql);  return parseSelect(selectBuilder);}  }
class C{  public byte[] pack(){  if (entries.size() == 0)   return null;  int entryLength=owner.getType().NODES_ENTRY_LENGTH;  byte[] buffer=new byte[entries.size() * entryLength];  int max_items=buffer.length / 26;  int j=0;  for (  KBucketEntry e : entries) {    if (j >= max_items) {      break;    }    PackUtil.PackBucketEntry(e,buffer,j * entryLength,owner.getType());    j++;  }  return buffer;}  }
class C{  public RhinoInterpreterFactory(){}  }
class C{  public ChunkSize(int size){  this();  this.size=size;}  }
class C{  private void createAdvanceBillDetails(final List<EgBillDetails> billDetails,final BigDecimal currentInstallmentDemand,final HashMap<String,Integer> orderMap,final EgDemand demand,final Billable billable,final List<Installment> advanceInstallments,final Installment dmdDetInstallment){  BigDecimal advanceCollection=demandGenericDAO.getBalanceByDmdMasterCodeInst(demand,WaterTaxConstants.DEMANDRSN_CODE_ADVANCE,moduleService.getModuleByName(WaterTaxConstants.EGMODULE_NAME),dmdDetInstallment);  final CFinancialYear finYear=financialYearDAO.getFinancialYearByDate(new Date());  if (advanceCollection.compareTo(BigDecimal.ZERO) < 0)   advanceCollection=advanceCollection.abs();  BigDecimal partiallyCollectedAmount=BigDecimal.ZERO;  if (currentInstallmentDemand.compareTo(BigDecimal.ZERO) > 0)   partiallyCollectedAmount=advanceCollection.remainder(currentInstallmentDemand);  if (currentInstallmentDemand.compareTo(BigDecimal.ZERO) > 0) {    final Integer noOfAdvancesPaid=advanceCollection.subtract(partiallyCollectedAmount).divide(currentInstallmentDemand).intValue();    LOGGER.debug("getBilldetails - advanceCollection = " + advanceCollection + ", noOfAdvancesPaid="+ noOfAdvancesPaid);    Installment installment=null;    int j=billDetails.size() + 1;    if (noOfAdvancesPaid < WaterTaxConstants.MAX_ADVANCES_ALLOWED)     for (int i=noOfAdvancesPaid; i < advanceInstallments.size(); i++) {      installment=advanceInstallments.get(i);      final EgDemandReason reasonmaster=connectionDemandService.getDemandReasonByCodeAndInstallment(WaterTaxConstants.DEMANDRSN_CODE_ADVANCE,installment);      if (reasonmaster != null) {        final EgBillDetails billdetail=new EgBillDetails();        billdetail.setDrAmount(BigDecimal.ZERO);        billdetail.setCrAmount(currentInstallmentDemand);        billdetail.setGlcode(WaterTaxConstants.GLCODE_FOR_ADVANCE);        billdetail.setEgDemandReason(reasonmaster);        billdetail.setCreateDate(new Date());        billdetail.setModifiedDate(new Date());        j=billDetails.size() + 1;        billdetail.setOrderNo(j);        billdetail.setDescription(reasonmaster.getEgDemandReasonMaster().getReasonMaster() + " - " + installment.getDescription());        if (billdetail.getDescription().contains(WaterTaxConstants.DEMANDRSN_REASON_ADVANCE))         billdetail.setPurpose(PURPOSE.ADVANCE_AMOUNT.toString()); else         if (billdetail.getEgDemandReason().getEgInstallmentMaster().getToDate().compareTo(finYear.getStartingDate()) < 0)         billdetail.setPurpose(PURPOSE.ARREAR_AMOUNT.toString()); else         if (billdetail.getEgDemandReason().getEgInstallmentMaster().getFromDate().compareTo(finYear.getStartingDate()) >= 0 && billdetail.getEgDemandReason().getEgInstallmentMaster().getToDate().compareTo(finYear.getEndingDate()) >= 0)         billdetail.setPurpose(PURPOSE.CURRENT_AMOUNT.toString()); else         billdetail.setPurpose(PURPOSE.OTHERS.toString());        billdetail.setFunctionCode(STRING_WCMS_FUCNTION_CODE);        billdetail.setAdditionalFlag(0);        billDetails.add(billdetail);      }    }  } else   LOGGER.debug("getBillDetails - All advances are paid...");}  }
class C{  public ArraySpliterator(Object[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addNoise(Instances instances,int seed,int percent,int attIndex,boolean useMissing){  int indexList[];  int partition_count[];  int partition_max[];  double splitPercent=percent;  indexList=new int[instances.numInstances()];  for (int i=0; i < instances.numInstances(); i++) {    indexList[i]=i;  }  Random random=new Random(seed);  for (int i=instances.numInstances() - 1; i >= 0; i--) {    int hValue=indexList[i];    int hIndex=(int)(random.nextDouble() * i);    indexList[i]=indexList[hIndex];    indexList[hIndex]=hValue;  }  int numValues=instances.attribute(attIndex).numValues();  partition_count=new int[numValues];  partition_max=new int[numValues];  int missing_count=0;  ;  int missing_max=0;  ;  for (int i=0; i < numValues; i++) {    partition_count[i]=0;    partition_max[i]=0;  }  for (  Object element : instances) {    Instance instance=(Instance)element;    if (instance.isMissing(attIndex)) {      missing_max++;    } else {      instance.value(attIndex);      partition_max[(int)instance.value(attIndex)]++;    }  }  if (!useMissing) {    missing_max=missing_count;  } else {    missing_max=(int)(((double)missing_max / 100) * splitPercent + 0.5);  }  int sum_max=missing_max;  for (int i=0; i < numValues; i++) {    partition_max[i]=(int)(((double)partition_max[i] / 100) * splitPercent + 0.5);    sum_max=sum_max + partition_max[i];  }  int sum_count=0;  Random randomValue=new Random(seed);  int numOfValues=instances.attribute(attIndex).numValues();  for (int i=0; i < instances.numInstances(); i++) {    if (sum_count >= sum_max) {      break;    }    Instance currInstance=instances.instance(indexList[i]);    if (currInstance.isMissing(attIndex)) {      if (missing_count < missing_max) {        changeValueRandomly(randomValue,numOfValues,attIndex,currInstance,useMissing);        missing_count++;        sum_count++;      }    } else {      int vIndex=(int)currInstance.value(attIndex);      if (partition_count[vIndex] < partition_max[vIndex]) {        changeValueRandomly(randomValue,numOfValues,attIndex,currInstance,useMissing);        partition_count[vIndex]++;        sum_count++;      }    }  }}  }
class C{  private void addDefaultChannel(){  defaultChannel=createChannel("",Channel.Type.NONE);  tabs.addTab(defaultChannel);}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  java.io.ObjectOutputStream.PutField fields=s.putFields();  fields.put("value",value);  fields.put("count",count);  fields.put("shared",false);  s.writeFields();}  }
class C{  public final boolean isEmpty(){  return left == 0 && right == 0 && top == 0 && bottom == 0;}  }
class C{  public static FieldNode findField(ClassNode classNode,String name){  Validate.notNull(classNode);  Validate.notNull(name);  Validate.notEmpty(name);  return classNode.fields.stream().filter(null).findAny().orElse(null);}  }
class C{  public void installHarness(Harness harness){  this.harness=harness;  harness.install(this);}  }
class C{  public boolean executeFile(File f){  LineSweep dba=new LineSweep();  ArrayList<ILineSegment> als=new ArrayList<ILineSegment>();  try {    Scanner sc=new Scanner(f);    while (sc.hasNext()) {      double[] vals=new double[4];      for (int i=0; i < vals.length; i++) {        vals[i]=sc.nextDouble();      }      als.add(new TwoDLineSegment(new TwoDPoint(vals[0],vals[1]),new TwoDPoint(vals[2],vals[3])));    }    sc.close();  } catch (  FileNotFoundException fnfe) {    System.err.println("Unable to locate file:" + f);    return false;  }  Hashtable<IPoint,List<ILineSegment>> res=dba.intersections(als.iterator());  for (  IPoint ip : res.keySet()) {    List<ILineSegment> ilss=res.get(ip);    System.out.println(ip);    for (    ILineSegment ils : ilss) {      System.out.println("  " + ils);    }    System.out.println();  }  return true;}  }
class C{  public DijkstraShortestPath(Graph<V,E> g,Function<E,? extends Number> nev){  super(g,nev);}  }
class C{  public TextEditor replaceAll(String regex,String replacement){  if (text.length() > 0) {    final String r=replacement;    Pattern p=Pattern.compile(regex,Pattern.MULTILINE);    Matcher m=p.matcher(text);    StringBuffer sb=new StringBuffer();    while (m.find()) {      m.appendReplacement(sb,r);    }    m.appendTail(sb);    text=new StringBuilder(sb.toString());  }  return this;}  }
class C{  public long available() throws IOException {  return inputReader.available();}  }
class C{  public void addStaticText(Sprite sprite,int textLength,int priority){  addStaticSprite(sprite,Math.max(RemovableSprite.STANDARD_PERSISTENCE_TIME,textLength * RemovableSprite.STANDARD_PERSISTENCE_TIME / 50),priority);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgr() == null ? null : stack.getUIMgr().getModuleGroup().defaultModule.description();}  }
class C{  @Override public boolean canFlipArms(){  return false;}  }
class C{  public void testTransformDestination() throws Exception {  assertTrue("Transforming a TempQueue destination to an ActiveMQTempQueue",ActiveMQMessageTransformation.transformDestination(new ActiveMQTempQueue()) instanceof ActiveMQTempQueue);  assertTrue("Transforming a TempTopic destination to an ActiveMQTempTopic",ActiveMQMessageTransformation.transformDestination(new ActiveMQTempTopic()) instanceof ActiveMQTempTopic);  assertTrue("Transforming a Queue destination to an ActiveMQQueue",ActiveMQMessageTransformation.transformDestination(new ActiveMQQueue()) instanceof ActiveMQQueue);  assertTrue("Transforming a Topic destination to an ActiveMQTopic",ActiveMQMessageTransformation.transformDestination(new ActiveMQTopic()) instanceof ActiveMQTopic);  assertTrue("Transforming a Destination to an ActiveMQDestination",ActiveMQMessageTransformation.transformDestination(new ActiveMQTopic()) instanceof ActiveMQDestination);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addListener(final IBookmarkManagerListener listener){  m_listeners.addListener(listener);}  }
class C{  @Override public int compare(Solution solution1,Solution solution2){  setSameBox(false);  boolean dominate1=false;  boolean dominate2=false;  for (int i=0; i < solution1.getNumberOfObjectives(); i++) {    double epsilon=getEpsilon(i);    double index1=Math.floor(solution1.getObjective(i) / epsilon);    double index2=Math.floor(solution2.getObjective(i) / epsilon);    if (index1 < index2) {      dominate1=true;      if (dominate2) {        return 0;      }    } else     if (index1 > index2) {      dominate2=true;      if (dominate1) {        return 0;      }    }  }  if (!dominate1 && !dominate2) {    setSameBox(true);    double dist1=0.0;    double dist2=0.0;    for (int i=0; i < solution1.getNumberOfObjectives(); i++) {      double epsilon=getEpsilon(i);      double index1=Math.floor(solution1.getObjective(i) / epsilon);      double index2=Math.floor(solution2.getObjective(i) / epsilon);      dist1+=Math.pow(solution1.getObjective(i) - index1 * epsilon,2.0);      dist2+=Math.pow(solution2.getObjective(i) - index2 * epsilon,2.0);    }    if (dist1 < dist2) {      return -1;    } else {      return 1;    }  } else   if (dominate1) {    return -1;  } else {    return 1;  }}  }
class C{  public MWMSection(Properties ctx,int WM_Section_ID){  this(ctx,WM_Section_ID,null);}  }
class C{  @Override @Intrinsic @Uninterruptible public int length(){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  return data.length;}  }
class C{  public static void checkSearchMenuCollapsed(){  onView(isAssignableFrom(AutoCompleteTextView.class)).check(doesNotExist());}  }
class C{  public synchronized boolean isDone(ParsedURL purl){  return super.isDoneImpl(purl);}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    Map<?,?> map=(Map<?,?>)value;    return new JSONObject(map).toString();  }  if (value instanceof Collection) {    Collection<?> coll=(Collection<?>)value;    return new JSONArray(coll).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  public static boolean isLeftTurn(PolarAnglePoint p1,PolarAnglePoint p2,PolarAnglePoint p3){  return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;}  }
class C{  private static int findClosest(int desiredFactor,Set<Integer> factors){  int bestFactor=1;  int bestDelta=desiredFactor;  for (  Integer factor : factors) {    int testDelta=Math.abs(desiredFactor - factor);    if (testDelta < bestDelta) {      bestDelta=testDelta;      bestFactor=factor;    }  }  return bestFactor;}  }
class C{  public IterationAttachObject(IterationAttachObject parent){  this.id=parent.getId();  this.iterationId=parent.getIterationId();  this.objectType=parent.getObjectType();  this.objectId=parent.getObjectId();  this.completed=parent.getCompleted();  this.completedTime=parent.getCompletedTime();}  }
class C{  public static String ExpandEnvironmentStrings(String cmdString){  return WinRegistryWrapper.WinExpandEnvironmentStrings(cmdString);}  }
class C{  protected void addRow(Object[] carbonTuple) throws SliceMergerException {  Object[] rowInWritableFormat;  rowInWritableFormat=tupleConvertor.getObjectArray(carbonTuple);  try {    this.dataHandler.addDataToStore(rowInWritableFormat);  } catch (  CarbonDataWriterException e) {    throw new SliceMergerException("Problem in merging the slice",e);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean hasMoreElements(){  return hasMoreTokens();}  }
class C{  public boolean isRaised(){  return raised;}  }
class C{  public CharSequence loadLabel(PackageManager pm){  return mService.loadLabel(pm);}  }
class C{  public void addPlural(String match,String rule){  addPlural(match,rule,true);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFESpecularLightingElement(prefix,(AbstractDocument)doc);}  }
class C{  public static boolean checkIfEvoSuitePackage(String className){  for (  String s : BytecodeInstrumentation.getEvoSuitePackages()) {    if (className.startsWith(s)) {      return true;    }  }  return false;}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  public CoapResource(String name,boolean visible){  this.name=name;  this.path="";  this.visible=visible;  this.attributes=new ResourceAttributes();  this.children=new ConcurrentHashMap<String,Resource>();  this.observers=new CopyOnWriteArrayList<ResourceObserver>();  this.observeRelations=new ObserveRelationContainer();  this.notificationOrderer=new ObserveNotificationOrderer();}  }
class C{  public boolean isNameValid(String name){  if (name.length() == 0) {    return false;  }  if (name.contains(",") || name.contains(">") || name.contains("%")|| name.contains("\\")) {    return false;  }  for (int i=0; i < teamList.size(); i++) {    if (teamList.get(i).name.toLowerCase().equals(name.toLowerCase()) && !teamList.get(i).userControlled) {      return false;    }  }  return true;}  }
class C{  public void resolveSuperclass(Snapshot snapshot){  if (superclass == null) {  } else {    totalNumFields=fields.length;    superclass=superclass.dereference(snapshot,null);    if (superclass == snapshot.getNullThing()) {      superclass=null;    } else {      try {        JavaClass sc=(JavaClass)superclass;        sc.resolveSuperclass(snapshot);        totalNumFields+=sc.totalNumFields;      } catch (      ClassCastException ex) {        System.out.println("Warning!  Superclass of " + name + " is "+ superclass);        superclass=null;      }    }  }}  }
class C{  @OnError public void onError(final Session session,final Throwable error){  removeSession(session);}  }
class C{  protected void addMultipart(NokiaItemType theItemType,byte[] data){  parts_.add(new NokiaPart(theItemType,data));}  }
class C{  public String toString(){  return "file '" + m_systemId + "', line #"+ m_lineNumber+ ", column #"+ m_columnNumber;}  }
class C{  public static Point2D screenToWorldPointTransform(final AffineTransform worldToScreen,double x,double y){  AffineTransform screenToWorld=null;  try {    screenToWorld=worldToScreen.createInverse();  } catch (  Exception e) {    System.out.println(e);    System.exit(-1);  }  Point2D p=new Point2D.Double();  screenToWorld.transform(new Point2D.Double(x,y),p);  return p;}  }
class C{  public IgniteException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public static String stringFor(int m){switch (m) {case cudaBoundaryModeZero:    return "cudaBoundaryModeZero";case cudaBoundaryModeClamp:  return "cudaBoundaryModeClamp";case cudaBoundaryModeTrap:return "cudaBoundaryModeTrap";}return "INVALID cudaSurfaceBoundaryMode: " + m;}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  if (log.isInfoEnabled()) {    log.info("|-Global Data Access Service active...");  }}  }
class C{  public static <O>KNNQuery<O> precomputedKNNQuery(Database database,Relation<O> relation,DistanceQuery<O> dq,int k){  KNNQuery<O> knnq=database.getKNNQuery(dq,k,DatabaseQuery.HINT_HEAVY_USE,DatabaseQuery.HINT_OPTIMIZED_ONLY,DatabaseQuery.HINT_NO_CACHE);  if (knnq instanceof PreprocessorKNNQuery) {    return knnq;  }  MaterializeKNNPreprocessor<O> preproc=new MaterializeKNNPreprocessor<>(relation,dq.getDistanceFunction(),k);  preproc.initialize();  return preproc.getKNNQuery(dq,k);}  }
class C{  public boolean isChecked(){  return mChecked;}  }
class C{  protected String engineGetJCEAlgorithmString(){  return this.signatureAlgorithm.getAlgorithm();}  }
class C{  public void testTextLabelSearch(){  Canvas canvas=new Canvas();{    Text text=canvas.createText(100,20,"");    Label label=text.createLabel("foobar",50,10);    label.setVisible(true);  }  assertTrue(canvas.getPrimitive(120,15) instanceof Text);  assertNull(canvas.getPrimitive(120,30));  assertNull(canvas.getPrimitive(151,15));  assertNull(canvas.getPrimitive(99,15));{    Text text=canvas.createText(200,20,"");    text.createLabel("foobar",50,10);  }  assertNull(canvas.getPrimitive(220,15));}  }
class C{  public void addComponent(VirtualLocalFile includeSource){  sources.add(includeSource);}  }
class C{  private void addClasses(Class<?>[] classes,HashSet<Class<?>> result){  if (isNull(classes) || classes.length == 0)   Error.globalClassesAbsent(configuredClass);  for (  Class<?> classe : classes)   result.add(classe);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  @Override public String logString(){  StringBuilder buf=new StringBuilder(100);  buf.append("fix ").append(asRegister(operand).number).append(':').append(operand).append(' ');  buf.append(" ranges{");  FixedRange cur=first;  while (cur != FixedRange.EndMarker) {    if (cur != first) {      buf.append(", ");    }    buf.append(cur);    cur=cur.next;    assert cur != null : "range list not closed with range sentinel";  }  buf.append("}");  return buf.toString();}  }
class C{  public boolean expandsearchspace(){  return expandsearchspace;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public void semanticFlowTags(TagInfo tagInfo){  tagInfo=new TagInfo("math",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags("math," + CLOSE_BEFORE_TAGS);  this.put("math",tagInfo);  tagInfo=new TagInfo("section",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("section",tagInfo);  tagInfo=new TagInfo("nav",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("nav",tagInfo);  tagInfo=new TagInfo("article",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineForbiddenTags("menu");  this.put("article",tagInfo);  tagInfo=new TagInfo("aside",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineForbiddenTags("menu");  tagInfo.defineForbiddenTags("address");  this.put("aside",tagInfo);  tagInfo=new TagInfo("h1",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS + ",h1,h2,h3,h4,h5,h6");  this.put("h1",tagInfo);  tagInfo=new TagInfo("h2",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS + ",h1,h2,h3,h4,h5,h6");  this.put("h2",tagInfo);  tagInfo=new TagInfo("h3",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS + ",h1,h2,h3,h4,h5,h6");  this.put("h3",tagInfo);  tagInfo=new TagInfo("h4",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS + ",h1,h2,h3,h4,h5,h6");  this.put("h4",tagInfo);  tagInfo=new TagInfo("h5",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS + ",h1,h2,h3,h4,h5,h6");  this.put("h5",tagInfo);  tagInfo=new TagInfo("h6",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS + ",h1,h2,h3,h4,h5,h6");  this.put("h6",tagInfo);  tagInfo=new TagInfo("hgroup",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineAllowedChildrenTags("h1,h2,h3,h4,h5,h6");  this.put("hgroup",tagInfo);  tagInfo=new TagInfo("header",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineForbiddenTags("menu,header,footer");  this.put("header",tagInfo);  tagInfo=new TagInfo("footer",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineForbiddenTags("menu,header,footer");  this.put("footer",tagInfo);  tagInfo=new TagInfo("main",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("main",tagInfo);  tagInfo=new TagInfo("address",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineForbiddenTags("address");  this.put("address",tagInfo);}  }
class C{  public Builder color(int color){  this.color=color;  return this;}  }
class C{  public Iterator iterOfFilters(){  return filters != null ? filters.values().iterator() : null;}  }
class C{  public boolean isWord(ValueNode node){  return isWord(StampTool.typeOrNull(node));}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public final synchronized void insert(SignalProcessor processor,boolean before){  assert processor != this;  if (mNext != null) {    mNext.mPrev=mPrev;  }  if (mPrev != null) {    mPrev.mNext=mNext;  }  if (processor != null) {    if (before) {      mNext=processor;      mPrev=processor.mPrev;      if (processor.mPrev != null)       processor.mPrev.mNext=this;      processor.mPrev=this;    } else {      mNext=processor.mNext;      mPrev=processor;      if (processor.mNext != null)       processor.mNext.mPrev=this;      processor.mNext=this;    }  } else {    mNext=null;    mPrev=null;  }}  }
class C{  public void validate(Aggregator root){  Aggregator aggregator=root;  for (int i=0; i < pathElements.size(); i++) {    aggregator=aggregator.subAggregator(pathElements.get(i).name);    if (aggregator == null) {      throw new AggregationExecutionException("Invalid term-aggregator order path [" + this + "]. Unknown aggregation ["+ pathElements.get(i).name+ "]");    }    if (i < pathElements.size() - 1) {      if (!(aggregator instanceof SingleBucketAggregator)) {        throw new AggregationExecutionException("Invalid terms aggregation order path [" + this + "]. Terms buckets can only be sorted on a sub-aggregator path "+ "that is built out of zero or more single-bucket aggregations within the path and a final "+ "single-bucket or a metrics aggregation at the path end. Sub-path ["+ subPath(0,i + 1)+ "] points to non single-bucket aggregation");      }      if (pathElements.get(i).key != null) {        throw new AggregationExecutionException("Invalid terms aggregation order path [" + this + "]. Terms buckets can only be sorted on a sub-aggregator path "+ "that is built out of zero or more single-bucket aggregations within the path and a "+ "final single-bucket or a metrics aggregation at the path end. Sub-path ["+ subPath(0,i + 1)+ "] points to non single-bucket aggregation");      }    }  }  boolean singleBucket=aggregator instanceof SingleBucketAggregator;  if (!singleBucket && !(aggregator instanceof NumericMetricsAggregator)) {    throw new AggregationExecutionException("Invalid terms aggregation order path [" + this + "]. Terms buckets can only be sorted on a sub-aggregator path "+ "that is built out of zero or more single-bucket aggregations within the path and a final "+ "single-bucket or a metrics aggregation at the path end.");  }  AggregationPath.PathElement lastToken=lastPathElement();  if (singleBucket) {    if (lastToken.key != null && !"doc_count".equals(lastToken.key)) {      throw new AggregationExecutionException("Invalid terms aggregation order path [" + this + "]. Ordering on a single-bucket aggregation can only be done on its doc_count. "+ "Either drop the key (a la \""+ lastToken.name+ "\") or change it to \"doc_count\" (a la \""+ lastToken.name+ ".doc_count\")");    }    return;  }  if (aggregator instanceof NumericMetricsAggregator.SingleValue) {    if (lastToken.key != null && !"value".equals(lastToken.key)) {      throw new AggregationExecutionException("Invalid terms aggregation order path [" + this + "]. Ordering on a single-value metrics aggregation can only be done on its value. "+ "Either drop the key (a la \""+ lastToken.name+ "\") or change it to \"value\" (a la \""+ lastToken.name+ ".value\")");    }    return;  }  if (lastToken.key == null) {    throw new AggregationExecutionException("Invalid terms aggregation order path [" + this + "]. When ordering on a multi-value metrics aggregation a metric name must be specified");  }  if (!((NumericMetricsAggregator.MultiValue)aggregator).hasMetric(lastToken.key)) {    throw new AggregationExecutionException("Invalid terms aggregation order path [" + this + "]. Unknown metric name ["+ lastToken.key+ "] on multi-value metrics aggregation ["+ lastToken.name+ "]");  }}  }
class C{  public boolean add(AccessibleRelation relation){  if (relations == null) {    relations=new Vector();  }  AccessibleRelation existingRelation=get(relation.getKey());  if (existingRelation == null) {    relations.addElement(relation);    return true;  } else {    Object[] existingTarget=existingRelation.getTarget();    Object[] newTarget=relation.getTarget();    int mergedLength=existingTarget.length + newTarget.length;    Object[] mergedTarget=new Object[mergedLength];    for (int i=0; i < existingTarget.length; i++) {      mergedTarget[i]=existingTarget[i];    }    for (int i=existingTarget.length, j=0; i < mergedLength; i++, j++) {      mergedTarget[i]=newTarget[j];    }    existingRelation.setTarget(mergedTarget);  }  return true;}  }
class C{  protected final int readerBase(int readerIndex){  if (readerIndex < 0 || readerIndex >= subReaders.length) {    throw new IllegalArgumentException("readerIndex must be >= 0 and < getSequentialSubReaders().size()");  }  return this.starts[readerIndex];}  }
class C{  @Override public void updateInferredParameterType(LocalVariableNode lhs,Node rhs,ClassTree classTree,MethodTree methodTree,AnnotatedTypeFactory atf){  ClassSymbol classSymbol=getEnclosingClassSymbol(classTree,lhs);  if (classSymbol == null)   return;  String className=classSymbol.flatname.toString();  String jaifPath=helper.getJaifPath(className);  AClass clazz=helper.getAClass(className,jaifPath);  String methodName=JVMNames.getJVMMethodName(methodTree);  AMethod method=clazz.methods.vivify(methodName);  List<? extends VariableTree> params=methodTree.getParameters();  for (int i=0; i < params.size(); i++) {    VariableTree vt=params.get(i);    if (vt.getName().toString().equals(lhs.getName())) {      Tree treeNode=rhs.getTree();      if (treeNode == null) {        continue;      }      AnnotatedTypeMirror paramATM=atf.getAnnotatedType(vt);      AnnotatedTypeMirror argATM=atf.getAnnotatedType(treeNode);      AField param=method.parameters.vivify(i);      helper.updateAnnotationSetInScene(param.type,atf,jaifPath,argATM,paramATM,TypeUseLocation.PARAMETER);      break;    }  }}  }
class C{  private void sendVoteRequests(){  context.checkThread();  if (isClosed())   return;  if (currentTimer != null) {    currentTimer.cancel();  }  context.setTerm(context.getTerm() + 1).setLastVotedFor(context.getCluster().member().id());  Duration delay=context.getElectionTimeout().plus(Duration.ofMillis(random.nextInt((int)context.getElectionTimeout().toMillis())));  currentTimer=context.getThreadContext().schedule(delay,null);  final AtomicBoolean complete=new AtomicBoolean();  final Set<ServerMember> votingMembers=new HashSet<>(context.getClusterState().getActiveMemberStates().stream().map(null).collect(Collectors.toList()));  if (votingMembers.isEmpty()) {    LOGGER.debug("{} - Single member cluster. Transitioning directly to leader.",context.getCluster().member().address());    context.transition(CopycatServer.State.LEADER);    return;  }  final Quorum quorum=new Quorum(context.getClusterState().getQuorum(),null);  long lastIndex=context.getLog().lastIndex();  Entry lastEntry=lastIndex != 0 ? context.getLog().get(lastIndex) : null;  final long lastTerm;  if (lastEntry != null) {    lastTerm=lastEntry.getTerm();    lastEntry.close();  } else {    lastTerm=0;  }  LOGGER.info("{} - Requesting votes from {}",context.getCluster().member().address(),votingMembers);  for (  ServerMember member : votingMembers) {    LOGGER.debug("{} - Requesting vote from {} for term {}",context.getCluster().member().address(),member,context.getTerm());    VoteRequest request=VoteRequest.builder().withTerm(context.getTerm()).withCandidate(context.getCluster().member().id()).withLogIndex(lastIndex).withLogTerm(lastTerm).build();    context.getConnections().getConnection(member.serverAddress()).thenAccept(null);  }}  }
class C{  public static Writer leftShift(Process self,Object value) throws IOException {  return IOGroovyMethods.leftShift(self.getOutputStream(),value);}  }
class C{  protected void add(FolderTokenDocTreeNode node){  m_nodes.add(node);}  }
class C{  protected ObjectMatrix2D viewSelectionLike(int[] rowOffsets,int[] columnOffsets){  return new SelectedSparseObjectMatrix2D(this.elements,rowOffsets,columnOffsets,this.offset);}  }
class C{  private void generateUniformIntegerExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){  Instance example=null;  int numAtts=m_NumAttributes;  if (getClassFlag()) {    numAtts++;  }  example=new DenseInstance(numAtts);  example.setDataset(format);  boolean[] attributes=cl.getAttributes();  double[] minValue=cl.getMinValue();  double[] maxValue=cl.getMaxValue();  int[] minInt=new int[minValue.length];  int[] maxInt=new int[maxValue.length];  int[] intValue=new int[maxValue.length];  int[] numInt=new int[minValue.length];  int num=1;  for (int i=0; i < minValue.length; i++) {    minInt[i]=(int)Math.ceil(minValue[i]);    maxInt[i]=(int)Math.floor(maxValue[i]);    numInt[i]=(maxInt[i] - minInt[i] + 1);    num=num * numInt[i];  }  int numEach=numInstances / num;  int rest=numInstances - numEach * num;  for (int i=0; i < m_NumAttributes; i++) {    if (attributes[i]) {      example.setValue(i,minInt[i]);      intValue[i]=minInt[i];    } else {      example.setMissing(i);    }  }  if (getClassFlag()) {    example.setClassValue(cName);  }  int added=0;  int attr=0;  do {    for (int k=0; k < numEach; k++) {      format.add(example);      example=(Instance)example.copy();      added++;    }    if (rest > 0) {      format.add(example);      example=(Instance)example.copy();      added++;      rest--;    }    if (added >= numInstances) {      break;    }    boolean done=false;    do {      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {        intValue[attr]++;        done=true;      } else {        attr++;      }    } while (!done);    example.setValue(attr,intValue[attr]);  } while (added < numInstances);}  }
class C{  public static void i(String tag,String msg){  i(tag,msg,null);}  }
class C{  public boolean equals(Block other){  return Block.isEqualTo(getBlock(),other);}  }
class C{  private Shape decodeMarkBorder(int width,int height){  double left=width / 2.0 - 4;  double top=height / 2.0 - 4;  path.reset();  path.moveTo(left + 0,top + 0);  path.lineTo(left + 8,top);  path.lineTo(left + 4,top + 6);  path.closePath();  return path;}  }
class C{  protected void drawHorizontalItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,StatisticalCategoryDataset dataset,int visibleRow,int row,int column){  double rectY=calculateBarW0(plot,PlotOrientation.HORIZONTAL,dataArea,domainAxis,state,visibleRow,column);  Number meanValue=dataset.getMeanValue(row,column);  if (meanValue == null) {    return;  }  double value=meanValue.doubleValue();  double base=0.0;  double lclip=getLowerClip();  double uclip=getUpperClip();  if (uclip <= 0.0) {    if (value >= uclip) {      return;    }    base=uclip;    if (value <= lclip) {      value=lclip;    }  } else   if (lclip <= 0.0) {    if (value >= uclip) {      value=uclip;    } else {      if (value <= lclip) {        value=lclip;      }    }  } else {    if (value <= lclip) {      return;    }    base=getLowerClip();    if (value >= uclip) {      value=uclip;    }  }  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();  double transY1=rangeAxis.valueToJava2D(base,dataArea,yAxisLocation);  double transY2=rangeAxis.valueToJava2D(value,dataArea,yAxisLocation);  double rectX=Math.min(transY2,transY1);  double rectHeight=state.getBarWidth();  double rectWidth=Math.abs(transY2 - transY1);  Rectangle2D bar=new Rectangle2D.Double(rectX,rectY,rectWidth,rectHeight);  Paint itemPaint=getItemPaint(row,column);  GradientPaintTransformer t=getGradientPaintTransformer();  if (t != null && itemPaint instanceof GradientPaint) {    itemPaint=t.transform((GradientPaint)itemPaint,bar);  }  g2.setPaint(itemPaint);  g2.fill(bar);  if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {    Stroke stroke=getItemOutlineStroke(row,column);    Paint paint=getItemOutlinePaint(row,column);    if (stroke != null && paint != null) {      g2.setStroke(stroke);      g2.setPaint(paint);      g2.draw(bar);    }  }  Number n=dataset.getStdDevValue(row,column);  if (n != null) {    double valueDelta=n.doubleValue();    double highVal=rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta,dataArea,yAxisLocation);    double lowVal=rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta,dataArea,yAxisLocation);    if (this.errorIndicatorPaint != null) {      g2.setPaint(this.errorIndicatorPaint);    } else {      g2.setPaint(getItemOutlinePaint(row,column));    }    if (this.errorIndicatorStroke != null) {      g2.setStroke(this.errorIndicatorStroke);    } else {      g2.setStroke(getItemOutlineStroke(row,column));    }    Line2D line;    line=new Line2D.Double(lowVal,rectY + rectHeight / 2.0d,highVal,rectY + rectHeight / 2.0d);    g2.draw(line);    line=new Line2D.Double(highVal,rectY + rectHeight * 0.25,highVal,rectY + rectHeight * 0.75);    g2.draw(line);    line=new Line2D.Double(lowVal,rectY + rectHeight * 0.25,lowVal,rectY + rectHeight * 0.75);    g2.draw(line);  }  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(value < 0.0));  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,bar);  }}  }
class C{  public h1 addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private Object invokeObjectMethod(Object proxy,Method method,Object[] args){  String name=method.getName();  if (name.equals("hashCode")) {    return hashCode();  } else   if (name.equals("equals")) {    Object obj=args[0];    InvocationHandler hdlr;    return proxy == obj || (obj != null && Proxy.isProxyClass(obj.getClass()) && (hdlr=Proxy.getInvocationHandler(obj)) instanceof RemoteObjectInvocationHandler && this.equals(hdlr));  } else   if (name.equals("toString")) {    return proxyToString(proxy);  } else {    throw new IllegalArgumentException("unexpected Object method: " + method);  }}  }
class C{  public void registerOutParameter(int parameterIndex,SQLType sqlType,String typeName) throws SQLException {  super.registerOutParameter(parameterIndex,translateAndCheckSqlType(sqlType),typeName);}  }
class C{  public boolean isClosed(){  return this._stats.isClosed();}  }
class C{  public static BigInteger nextProbablePrime(BigInteger n,int certainty){  if (n.signum() < 0 || n.signum() == 0 || n.equals(ONE)) {    return TWO;  }  BigInteger result=n.add(ONE);  if (!result.testBit(0)) {    result=result.add(ONE);  }  while (true) {    if (result.bitLength() > 6) {      long r=result.remainder(BigInteger.valueOf(SMALL_PRIME_PRODUCT)).longValue();      if ((r % 3 == 0) || (r % 5 == 0) || (r % 7 == 0)|| (r % 11 == 0)|| (r % 13 == 0)|| (r % 17 == 0)|| (r % 19 == 0)|| (r % 23 == 0)|| (r % 29 == 0)|| (r % 31 == 0)|| (r % 37 == 0)|| (r % 41 == 0)) {        result=result.add(TWO);        continue;      }    }    if (result.bitLength() < 4) {      return result;    }    if (result.isProbablePrime(certainty)) {      return result;    }    result=result.add(TWO);  }}  }
class C{  public static double mercatorToLat(final double mer){  return _180_PI * (2d * Math.atan(Math.exp(mer * PI_180)) - PI_2);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public SingleFilterEffect(EffectContext context,String name,Class filterClass,String inputName,String outputName,Object... finalParameters){  super(context,name);  mInputName=inputName;  mOutputName=outputName;  String filterName=filterClass.getSimpleName();  FilterFactory factory=FilterFactory.sharedFactory();  Filter filter=factory.createFilterByClass(filterClass,filterName);  filter.initWithAssignmentList(finalParameters);  mFunction=new FilterFunction(getFilterContext(),filter);}  }
class C{  public PowerPCConditionOperand flipCode(){switch (value) {case EQUAL:    value=NOT_EQUAL;  break;case NOT_EQUAL:value=EQUAL;break;case LESS:value=GREATER_EQUAL;break;case LESS_EQUAL:value=GREATER;break;case GREATER:value=LESS_EQUAL;break;case GREATER_EQUAL:value=LESS;break;case OVERFLOW:value=NOT_OVERFLOW;break;case NOT_OVERFLOW:value=OVERFLOW;break;case CTRZ:value=CTRNZ;break;case CTRNZ:value=CTRZ;break;default :throw new org.jikesrvm.compilers.opt.OptimizingCompilerException("Unhandled case in flipCode");}return this;}  }
class C{  private int fill() throws IOException {  int actual=readFully(lenBuf,4);  if (actual != 4) {    return -1;  }  int len=networkByteOrderToInt(lenBuf,0,4);  if (len > recvMaxBufSize) {    throw new IOException(len + "exceeds the negotiated receive buffer size limit:" + recvMaxBufSize);  }  if (debug) {    System.err.println("reading " + len + " bytes from network");  }  actual=readFully(saslBuffer,len);  if (actual != len) {    throw new EOFException("Expecting to read " + len + " bytes but got "+ actual+ " bytes before EOF");  }  buf=sc.unwrap(saslBuffer,0,len);  bufPos=0;  return buf.length;}  }
class C{  public boolean addAgent(IMovingAgent agent){  if (!agents.contains(agent)) {    agents.add(agent);    if (agent instanceof Hive) {      hives.add((Hive)agent);    }    if (agent instanceof FoodSource) {      foodSources.add((FoodSource)agent);    }    if (agent instanceof Obstacle)     obstacles.add((Obstacle)agent);    double r=agent.getSphereRadius();    if (r > maxAgentSphereRadius)     maxAgentSphereRadius=r;    return true;  }  return false;}  }
class C{  public static File createTempFile(){  try {    return File.createTempFile("triplea","tmp");  } catch (  final IOException e) {    throw new IllegalStateException("Failed to create a temporary file",e);  }}  }
class C{  public void append(Rule r){  if (size == rules.length) {    Rule[] t=new Rule[size * 2];    System.arraycopy(rules,0,t,0,size);    rules=t;  }  rules[size++]=r;}  }
class C{  public com.lynden.gmapsfx.javascript.object.Marker convert(){  return marker;}  }
class C{  public synchronized boolean authenticateWithDSA(String user,String pem,String password) throws IOException {  if (tm == null)   throw new IllegalStateException("Connection is not established!");  if (authenticated)   throw new IllegalStateException("Connection is already authenticated!");  if (am == null)   am=new AuthenticationManager(tm);  if (cm == null)   cm=new ChannelManager(tm);  if (user == null)   throw new IllegalArgumentException("user argument is null");  if (pem == null)   throw new IllegalArgumentException("pem argument is null");  authenticated=am.authenticatePublicKey(user,pem.toCharArray(),password,getOrCreateSecureRND());  return authenticated;}  }
class C{  @Override public void addCharacterToOutput(final Entry<Character,GrayscaleMatrix> characterEntry,final int[] sourceImagePixels,final int tileX,final int tileY,final int imageWidth){  int startCoordinateX=tileX * this.characterCache.getCharacterImageSize().width;  int startCoordinateY=tileY * this.characterCache.getCharacterImageSize().height;  for (int i=0; i < characterEntry.getValue().getData().length; i++) {    int xOffset=i % this.characterCache.getCharacterImageSize().width;    int yOffset=i / this.characterCache.getCharacterImageSize().width;    int component=(int)characterEntry.getValue().getData()[i];    sourceImagePixels[ArrayUtils.convert2DTo1D(startCoordinateX + xOffset,startCoordinateY + yOffset,imageWidth)]=new Color(component,component,component).getRGB();  }}  }
class C{  public DefaultMetaData(final Deserializer deserializer){  this.id=deserializer.readLong("id");}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    int offs=target.getCaretPosition();    Element elem=Utilities.getParagraphElement(target,offs);    offs=Math.min(target.getDocument().getLength(),elem.getEndOffset());    if (select) {      target.moveCaretPosition(offs);    } else {      target.setCaretPosition(offs);    }  }}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public GameStep(final String name,final String displayName,final PlayerID player,final IDelegate delegate,final GameData data,final Properties stepProperties){  super(data);  m_name=name;  m_displayName=displayName;  m_player=player;  m_delegate=delegate.getName();  m_properties=stepProperties;}  }
class C{  private static void reformatJavaFiles(File outDir) throws CoreException {  JavaRuntime.getDefaultVMInstall();  List<File> javaFiles=ProjectResources.findFilesInDir(outDir,javaSourceFilter);  for (  File file : javaFiles) {    ProjectResources.reformatJavaSource(file);  }}  }
class C{  public void addCircle(float latPoint,float lonPoint,int offset_x1,int offset_y1,int w,int h,LinkProperties properties) throws IOException {  LinkCircle.write(latPoint,lonPoint,offset_x1,offset_y1,w,h,properties,link.dos);}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  public NodeSet(int blocksize){  m_blocksize=blocksize;  m_mapSize=0;}  }
class C{  public boolean hasNext(){  return iterator.hasNext();}  }
class C{  @Override public String toString(){  return getType();}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public static int findLastCompletelyVisibleItemPosition(RecyclerView.LayoutManager layoutManager){  if (layoutManager instanceof StaggeredGridLayoutManager) {    return ((StaggeredGridLayoutManager)layoutManager).findLastCompletelyVisibleItemPositions(null)[0];  } else {    return ((LinearLayoutManager)layoutManager).findLastCompletelyVisibleItemPosition();  }}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public SamlTokenImpl(Element tokenRoot,JAXBContext jaxbContext) throws InvalidTokenException {  this("Element",createStandaloneCopy(tokenRoot),jaxbContext,false);}  }
class C{  public MemberScopeRequest enforceStatic(){  if (staticAccess) {    return this;  }  return new MemberScopeRequest(originalReceiverTypeRef,context,checkVisibility,true);}  }
class C{  public PDFNativeTextCmd(String text,Matrix mat){  this.text=text;  this.mat=mat;  float[] values=new float[9];  mat.getValues(values);  this.x=values[2];  this.y=values[5];  this.w=values[0];  this.h=values[4];  bounds=new RectF(x,y,x + w,y + h);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:30.645 -0500",hash_original_method="09F077C80C4F986B6C39E3E7ABC587EB",hash_generated_method="03B9FE54B5BE01FBC71903D5E97ADE9C") public int findIndexHinted(String iface,int uid,int set,int tag,int hintIndex){  for (int offset=0; offset < size; offset++) {    final int halfOffset=offset / 2;    final int i;    if (offset % 2 == 0) {      i=(hintIndex + halfOffset) % size;    } else {      i=(size + hintIndex - halfOffset - 1) % size;    }    if (uid == this.uid[i] && set == this.set[i] && tag == this.tag[i] && Objects.equal(iface,this.iface[i])) {      return i;    }  }  return -1;}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  try {    String ns=alav.getNamespaceURI();    String ln=alav.getLocalName();    if (ns == null) {      if (ln.equals(SVG_X_ATTRIBUTE) || ln.equals(SVG_Y_ATTRIBUTE)) {        updateImageBounds();        return;      } else       if (ln.equals(SVG_WIDTH_ATTRIBUTE) || ln.equals(SVG_HEIGHT_ATTRIBUTE)) {        SVGImageElement ie=(SVGImageElement)e;        ImageNode imageNode=(ImageNode)node;        AbstractSVGAnimatedLength _attr;        if (ln.charAt(0) == 'w') {          _attr=(AbstractSVGAnimatedLength)ie.getWidth();        } else {          _attr=(AbstractSVGAnimatedLength)ie.getHeight();        }        float val=_attr.getCheckedValue();        if (val == 0 || imageNode.getImage() instanceof ShapeNode) {          rebuildImageNode();        } else {          updateImageBounds();        }        return;      } else       if (ln.equals(SVG_PRESERVE_ASPECT_RATIO_ATTRIBUTE)) {        updateImageBounds();        return;      }    } else     if (ns.equals(XLINK_NAMESPACE_URI) && ln.equals(XLINK_HREF_ATTRIBUTE)) {      rebuildImageNode();      return;    }  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  public static MethodAnnotation fromForeignMethod(String className,String methodName,String methodSig,boolean isStatic){  className=ClassName.toDottedClassName(className);  MethodAnnotation methodAnnotation=new MethodAnnotation(className,methodName,methodSig,isStatic);  if (AnalysisContext.currentAnalysisContext() != null) {    SourceLineAnnotation sourceLines=SourceLineAnnotation.getSourceAnnotationForMethod(className,methodName,methodSig);    methodAnnotation.setSourceLines(sourceLines);  }  return methodAnnotation;}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    bufOff=0;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  public VerletParticle3D(VerletParticle3D p){  this(p.x,p.y,p.z,p.weight);  isLocked=p.isLocked;}  }
class C{  public static double[] toDoubleArray(int[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(double)array[i];  }  return result;}  }
class C{  public StringEvaluator createStringEvaluator(){  StringEvaluatorImpl stringEvaluator=new StringEvaluatorImpl();  return stringEvaluator;}  }
class C{  public boolean isRtl(String str){  return mDefaultTextDirectionHeuristic.isRtl(str,0,str.length());}  }
class C{  public boolean isUnderflow(){  return this.type == TYPE_UNDERFLOW;}  }
class C{  public void removeEntry(RosterEntry entry) throws XMPPException {  PacketCollector collector=null;synchronized (entries) {    if (entries.contains(entry)) {      RosterPacket packet=new RosterPacket();      packet.setType(IQ.Type.SET);      RosterPacket.Item item=RosterEntry.toRosterItem(entry);      item.removeGroupName(this.getName());      packet.addRosterItem(item);      collector=connection.createPacketCollector(new PacketIDFilter(packet.getPacketID()));      connection.sendPacket(packet);    }  }  if (collector != null) {    IQ response=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());    collector.cancel();    if (response == null) {      throw new XMPPException("No response from the server.");    } else     if (response.getType() == IQ.Type.ERROR) {      throw new XMPPException(response.getError());    }  }}  }
class C{  protected OMGraphicList constructTensLabels(float up,float down,float left,float right,boolean doLats){  OMGraphicList labels=new OMGraphicList();  int north=(int)Math.ceil(up);  if (north > 80)   north=80;  int south=(int)Math.floor(down);  south-=(south % 10);  if ((south < 0 && south > -70) || south == 0) {    south-=10;  }  int west=(int)Math.floor(left);  west-=(west % 10);  if ((west < 0 && west > -170) || west == 0) {    west-=10;  }  int east=(int)Math.ceil(right);  if (east > 180)   east=180;  int stepSize=10;  int stepSum;  double point_x, point_y;  OMText currentText;  Point point=new Point();  LatLonPoint llpoint;  Projection projection=getProjection();  if (doLats) {    for (int i=south; i < north; i+=stepSize) {      float lat=(float)i;      if ((lat % 2) == 0) {        if (boxy) {          projection.forward(lat,west,point);          point.x=0;          llpoint=projection.inverse(point.x,point.y,new LatLonPoint.Double());        } else {          llpoint=new LatLonPoint.Double(lat,west);          stepSum=0;          while (stepSum < 360) {            point_x=projection.forward(llpoint).getX();            if (point_x > 0 && point_x < projection.getWidth())             break;            stepSum+=stepSize;            llpoint.setLongitude(llpoint.getX() + stepSize);          }        }        currentText=new OMText(llpoint.getY(),llpoint.getX(),(int)2,(int)-2,Integer.toString((int)lat),font,OMText.JUSTIFY_LEFT);        currentText.setLinePaint(textColor);        labels.add(currentText);      }    }  }  for (int i=west; i < east; i+=stepSize) {    float lon=(float)i;    if ((lon % 2) == 0) {      if (boxy) {        projection.forward(south,lon,point);        point.y=projection.getHeight();        llpoint=projection.inverse(point.x,point.y,new LatLonPoint.Double());      } else {        llpoint=new LatLonPoint.Double(south,lon);        stepSum=0;        while (stepSum < 360) {          point_y=projection.forward(llpoint).getY();          if (point_y > 0 && point_y < projection.getHeight())           break;          stepSum+=stepSize;          llpoint.setLatitude(llpoint.getY() + stepSize);        }      }      currentText=new OMText(llpoint.getY(),llpoint.getX(),(int)2,(int)-5,Integer.toString((int)lon),font,OMText.JUSTIFY_CENTER);      currentText.setLinePaint(textColor);      labels.add(currentText);    }  }  if (Debug.debugging("graticule")) {    Debug.output("GraticuleLayer.constructTensLabels(): " + "constructed " + labels.size() + " graticule labels");  }  labels.generate(projection);  return labels;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T classForName(final String preferredClassName,final Class<? extends T> defaultClass,final Class<T> sharedClassOrInterface,final ClassLoader classLoader){  final ClassPathUtilRequestConfig requestConfig=new ClassPathUtilRequestConfig(preferredClassName,defaultClass,sharedClassOrInterface,classLoader);  try {    if (cache.containsKey(requestConfig)) {      final Class<?> cls=cache.get(requestConfig);      return cls == null ? null : (T)cls.newInstance();    }    if (defaultClass != null && !sharedClassOrInterface.isAssignableFrom(defaultClass)) {      throw new IllegalArgumentException();    }    final boolean initialize=false;    final Class<?> cls=Class.forName(preferredClassName,initialize,classLoader);    if (sharedClassOrInterface.isAssignableFrom(cls)) {      if (log.isInfoEnabled()) {        log.info("Found " + cls.getCanonicalName());      }      cache.put(requestConfig,cls);      return (T)cls.newInstance();    }    log.warn(cls.getCanonicalName() + " does not extend " + sharedClassOrInterface.getCanonicalName());  } catch (  ClassNotFoundException|InstantiationException|IllegalAccessException e) {    if (DEBUG) {      log.debug("Not found: " + preferredClassName);    }  }  if (defaultClass == null) {    cache.put(requestConfig,null);    return null;  }  try {    if (DEBUG) {      log.debug("Using defaultClass: " + defaultClass.getCanonicalName());    }    cache.put(requestConfig,defaultClass);    return (T)defaultClass.newInstance();  } catch (  InstantiationException|IllegalAccessException e) {    throw new RuntimeException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:45.118 -0500",hash_original_method="F77740880648C3886F14C74FD023BD3A",hash_generated_method="F77740880648C3886F14C74FD023BD3A") FormatToken parseFormatToken(int offset){  this.startIndex=offset;  this.i=offset;  return parseArgumentIndexAndFlags(new FormatToken());}  }
class C{  public void ifPresent(DoubleConsumer action){  if (isPresent) {    action.accept(value);  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == implosion) {    action_loadBOM();  }  if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    action_loadBOM();  }  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();  }}  }
class C{  private void handleServiceUnavailable(State state,HttpResponse response) throws StopRequest {  if (Constants.LOGVV) {    Log.v(Constants.TAG,"got HTTP response code 503");  }  state.mCountRetry=true;  Header header=response.getFirstHeader("Retry-After");  if (header != null) {    try {      if (Constants.LOGVV) {        Log.v(Constants.TAG,"Retry-After :" + header.getValue());      }      state.mRetryAfter=Integer.parseInt(header.getValue());      if (state.mRetryAfter < 0) {        state.mRetryAfter=0;      } else {        if (state.mRetryAfter < Constants.MIN_RETRY_AFTER) {          state.mRetryAfter=Constants.MIN_RETRY_AFTER;        } else         if (state.mRetryAfter > Constants.MAX_RETRY_AFTER) {          state.mRetryAfter=Constants.MAX_RETRY_AFTER;        }        state.mRetryAfter+=Helpers.sRandom.nextInt(Constants.MIN_RETRY_AFTER + 1);        state.mRetryAfter*=1000;      }    } catch (    NumberFormatException ex) {    }  }  throw new StopRequest(DownloaderService.STATUS_WAITING_TO_RETRY,"got 503 Service Unavailable, will retry later");}  }
class C{  public void rollOver(){  File target;  File file=new File(fileName);  String fileStartName=file.getName();  int dotIndex=fileStartName.indexOf('.');  if (dotIndex != -1) {    fileStartName=fileStartName.substring(0,dotIndex);  }  final String startName=fileStartName;  final String folderPath=file.getParent();  if (qw != null) {    long size=((CountingQuietWriter)qw).getCount();    LogLog.debug("rolling over count=" + size);    nextRollover=size + maxFileSize;  }  LogLog.debug("maxBackupIndex=" + maxBackupIndex);  boolean renameSucceeded=true;  if (maxBackupIndex > 0) {    DateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_FOR_TRANSFER);    StringBuffer buffer=new StringBuffer();    String extension="";    if (fileName.contains(".")) {      extension=fileName.substring(fileName.lastIndexOf("."));      buffer.append(fileName.substring(0,fileName.lastIndexOf(".")));    } else {      buffer.append(fileName);    }    buffer.append("_").append(dateFormat.format(new Date())).append(extension);    target=new File(buffer.toString());    this.closeFile();    LogLog.debug("Renaming file " + file + " to "+ target);    renameSucceeded=file.renameTo(target);    if (!renameSucceeded) {      try {        this.setFile(fileName,true,bufferedIO,bufferSize);      } catch (      InterruptedIOException e) {        Thread.currentThread().interrupt();      }catch (      IOException e) {        LogLog.error("setFile(" + fileName + ", true) call failed.",e);      }    }  }  if (renameSucceeded) {    try {      this.setFile(fileName,false,bufferedIO,bufferSize);      nextRollover=0;    } catch (    InterruptedIOException e) {      Thread.currentThread().interrupt();    }catch (    IOException e) {      LogLog.error("setFile(" + fileName + ", false) call failed.",e);    }  }  cleanUpLogs(startName,folderPath);}  }
class C{  public Loader<Cursor> onCreateLoader(int id,Bundle args){  final String columnsToQuery[]=new String[]{ContactsContract.Contacts._ID,ContactsContract.Contacts.DISPLAY_NAME,ContactsContract.Contacts.STARRED};  final String selection="((" + Contacts.DISPLAY_NAME + " NOTNULL) AND ("+ Contacts.DISPLAY_NAME+ " != '' ) AND ("+ Contacts.STARRED+ "== 1))";  return new CursorLoader(mOps.getActivityContext(),ContactsContract.Contacts.CONTENT_URI,columnsToQuery,selection,null,Contacts._ID + " ASC");}  }
class C{  public static void main(String[] args) throws Exception {  new ResultFileInfo().start(args);}  }
class C{  public MmsException(String message,Throwable cause){  super(message,cause);}  }
class C{  public CasCopier(CAS aSrcCas,CAS aDestCas){  mSrcCas=aSrcCas;  mDestCas=aDestCas;  mLowLevelDestCas=aDestCas.getLowLevelCAS();  mDestSofaFeature=aDestCas.getTypeSystem().getFeatureByFullName(CAS.FEATURE_FULL_NAME_SOFA);}  }
class C{  public int length(){  return this.size();}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() + right.num());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:    setAstElement((EObject)null);  return;}super.eUnset(featureID);}  }
class C{  public static GridSslContextFactory sslContextFactory(){  GridSslBasicContextFactory factory=new GridSslBasicContextFactory();  factory.setKeyStoreFilePath(U.resolveIgnitePath(GridTestProperties.getProperty("ssl.keystore.path")).getAbsolutePath());  factory.setKeyStorePassword(GridTestProperties.getProperty("ssl.keystore.password").toCharArray());  factory.setTrustManagers(GridSslBasicContextFactory.getDisabledTrustManager());  return factory;}  }
class C{  public static void openEmailIntent(Context context,String emailAddress,String emailSubject,String dialogMessage){  try {    context.startActivity(Intent.createChooser(getnEmailIntent(emailAddress,emailSubject),dialogMessage));  } catch (  Exception e) {    logThis(TAG,"openEmailIntent Exception",e);  }}  }
class C{  public void enableShadow(boolean enable){  layerEffects.shadowEnabled=enable;}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  protected List<String> buildWords(String aWord,char[] aFlags){  List<String> words=new ArrayList<String>();  for (  char c : aFlags) {    List<Affix> aff=affixes.get(c);    if (aff == null) {      continue;    }    for (    Affix affix : aff) {      String w=affix.handleWord(aWord);      if (w != null && w.length() > 2) {        words.add(w);      }    }  }  return words;}  }
class C{  public void fillRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  impl.fillRoundRect(nativeGraphics,xTranslate + x,yTranslate + y,width,height,arcWidth,arcHeight);}  }
class C{  public int length(){  return lastBitNum - firstBitNum;}  }
class C{  public static void nukeSharedPreferences(){  for (  String prefName : Pref.getAll()) {    MainApplication.application.getSharedPreferences(prefName,Context.MODE_PRIVATE).edit().clear().apply();  }}  }
class C{  ArrayList<Node> selectElements(Node item,String sElement) throws Exception {  NodeList children=item.getChildNodes();  ArrayList<Node> nodelist=new ArrayList<Node>();  for (int iNode=0; iNode < children.getLength(); iNode++) {    Node node=children.item(iNode);    if ((node.getNodeType() == Node.ELEMENT_NODE) && node.getNodeName().equals(sElement)) {      nodelist.add(node);    }  }  return nodelist;}  }
class C{  CaseParseResult parsePatternList(BashPsiBuilder builder){  builder.eatOptionalNewlines();  final PsiBuilder.Marker casePattern=builder.mark();  if (builder.getTokenType() == LEFT_PAREN) {    builder.advanceLexer();  }  if (!readCasePattern(builder)) {    ParserUtil.error(builder,"parser.unexpected.token");    casePattern.drop();    return CaseParseResult.Faulty;  }  final IElementType closingBracket=ParserUtil.getTokenAndAdvance(builder);  if (closingBracket != RIGHT_PAREN) {    ParserUtil.error(builder,"parser.unexpected.token");    casePattern.drop();    return CaseParseResult.Faulty;  }  builder.eatOptionalNewlines();  if (builder.getTokenType() != CASE_END && builder.getTokenType() != ESAC_KEYWORD) {    boolean parsed=Parsing.list.parseCompoundList(builder,true,true);    if (!parsed) {      casePattern.drop();      return CaseParseResult.Faulty;    }  }  boolean hasEndMarker=builder.getTokenType() == CASE_END;  if (hasEndMarker) {    builder.advanceLexer();    IElementType nextToken=builder.rawLookup(0);    if (builder.isBash4() && nextToken == AMP) {      builder.advanceLexer();    }  }  casePattern.done(CASE_PATTERN_LIST_ELEMENT);  return hasEndMarker ? CaseParseResult.ElementWithEndMarker : CaseParseResult.SingleElement;}  }
class C{  public static void checkJavaOpts(String jvmOpts,String jvmMemory,String jvmRelease) throws CheckException {  if (jvmOpts != null) {    if (jvmOpts.toLowerCase().contains("xms") || jvmOpts.toLowerCase().contains("xmx")) {      throw new CheckException("You are not allowed to change memory with java opts");    }  }  if (!listJvmMemoriesAllowed.contains(jvmMemory)) {    throw new CheckException("You are not allowed to set this jvm memory size : [" + jvmMemory + "]");  }}  }
class C{  private boolean isBlack(final Point p){  return isBlack(p.x,p.y);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void doImportIdentityDatabase(InputStream in) throws Exception {  System.err.println(rb.getString("No.entries.from.identity.database.added"));}  }
class C{  @Override protected T doRequestSync(){  T data=RequestCacheManager.getInstance().requestCacheSync(this);  if (data == null) {    data=RequestManager.getInstance().getRequestProxy(this).requestSync(this);  }  return data;}  }
class C{  public static byte[] parseAsHexOrBase58(String data){  try {    return HEX.decode(data);  } catch (  Exception e) {    try {      return Base58.decodeChecked(data);    } catch (    AddressFormatException e1) {      return null;    }  }}  }
class C{  protected void onRemove(){}  }
class C{  @Override public String toString(){  if (string != null) {    return string;  }  StringBuilder result=new StringBuilder();  if (scheme != null) {    result.append(scheme);    result.append(':');  }  if (opaque) {    result.append(schemeSpecificPart);  } else {    if (authority != null) {      result.append("//");      result.append(authority);    }    if (path != null) {      result.append(path);    }    if (query != null) {      result.append('?');      result.append(query);    }  }  if (fragment != null) {    result.append('#');    result.append(fragment);  }  string=result.toString();  return string;}  }
class C{  public SVGOMFEComponentTransferElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public void sendChunkImmediately(byte chunk[]) throws NetworkException {  if (MsrpConnection.isMsrpTraceEnabled()) {    System.out.println(">>> Send MSRP message:\n" + new String(chunk,UTF8));  }  writeData(chunk);}  }
class C{  public boolean hasProperty(String key) throws AdeInternalException {  return getRawPropertyValue(key) != null;}  }
class C{  public static byte[] decode(byte[] in,int len){  int length=len / 4 * 3;  if (length == 0) {    return new byte[0];  }  byte[] out=new byte[length];  int pad=0;  byte chr;  for (; ; len--) {    chr=in[len - 1];    if ((chr == '\n') || (chr == '\r') || (chr == ' ')|| (chr == '\t')) {      continue;    }    if (chr == '=') {      pad++;    } else {      break;    }  }  int out_index=0;  int in_index=0;  int bits=0;  int quantum=0;  for (int i=0; i < len; i++) {    chr=in[i];    if ((chr == '\n') || (chr == '\r') || (chr == ' ')|| (chr == '\t')) {      continue;    }    if ((chr >= 'A') && (chr <= 'Z')) {      bits=chr - 65;    } else     if ((chr >= 'a') && (chr <= 'z')) {      bits=chr - 71;    } else     if ((chr >= '0') && (chr <= '9')) {      bits=chr + 4;    } else     if (chr == '+') {      bits=62;    } else     if (chr == '/') {      bits=63;    } else {      return null;    }    quantum=(quantum << 6) | (byte)bits;    if (in_index % 4 == 3) {      out[out_index++]=(byte)((quantum & 0x00FF0000) >> 16);      out[out_index++]=(byte)((quantum & 0x0000FF00) >> 8);      out[out_index++]=(byte)(quantum & 0x000000FF);    }    in_index++;  }  if (pad > 0) {    quantum=quantum << (6 * pad);    out[out_index++]=(byte)((quantum & 0x00FF0000) >> 16);    if (pad == 1) {      out[out_index++]=(byte)((quantum & 0x0000FF00) >> 8);    }  }  byte[] result=new byte[out_index];  System.arraycopy(out,0,result,0,out_index);  return result;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  set(s.readDouble());}  }
class C{  public EntropyCalculatorDiscrete(int base){  super(base);  stateCount=new int[base];}  }
class C{  public Entry createEntry(){  EntryImpl entry=new EntryImpl();  return entry;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_INVARIANT_2__CONSTRAINT_1:    return getConstraint_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public int hashCode(){  int h=0;  final int length=this.length();  for (int i=0; i < length; ) {    h=31 * h + charAt(i++);  }  return h;}  }
class C{  public RepresentationCollection(){  super(null);}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  @Override protected void finalize(){  try {    jsFunction_close();  } catch (  IOException e) {  }}  }
class C{  public XmlSource<T> withRootElement(String rootElement){  return new XmlSource<>(getFileOrPatternSpec(),getMinBundleSize(),rootElement,recordElement,recordClass);}  }
class C{  public static String calcEtag(final SolrQueryRequest solrReq){  final SolrCore core=solrReq.getCore();  final long currentIndexVersion=solrReq.getSearcher().getIndexReader().getVersion();  EtagCacheVal etagCache=etagCoreCache.get(core);  if (null == etagCache) {    final String etagSeed=core.getSolrConfig().getHttpCachingConfig().getEtagSeed();    etagCache=new EtagCacheVal(etagSeed);    etagCoreCache.put(core,etagCache);  }  return etagCache.calcEtag(currentIndexVersion);}  }
class C{  protected void convertHomingShotToEntityTarget(){  ArtilleryAttackAction aaa=(ArtilleryAttackAction)waa;  final Coords tc=target.getPosition();  Targetable newTarget=null;  Vector<TagInfo> v=game.getTagInfo();  Vector<TagInfo> allowed=new Vector<TagInfo>();  for (  TagInfo ti : v) {switch (ti.targetType) {case Targetable.TYPE_BLDG_TAG:case Targetable.TYPE_HEX_TAG:      allowed.add(ti);    break;case Targetable.TYPE_ENTITY:  if (ae.isEnemyOf((Entity)ti.target) || game.getOptions().booleanOption("friendly_fire")) {    allowed.add(ti);  }break;}}if (allowed.size() == 0) {toHit=new ToHitData(TargetRoll.IMPOSSIBLE,"no targets tagged this turn");return;}v=new Vector<TagInfo>();for (TagInfo ti : allowed) {newTarget=ti.target;if (!ti.missed && (newTarget != null)) {v.add(ti);}}assert (newTarget != null);if (v.size() == 0) {aaa.setTargetId(newTarget.getTargetId());aaa.setTargetType(newTarget.getTargetType());target=newTarget;toHit=new ToHitData(TargetRoll.IMPOSSIBLE,"tag missed the target");return;}allowed=new Vector<TagInfo>();for (TagInfo ti : v) {newTarget=ti.target;if (tc.distance(newTarget.getPosition()) <= 8) {allowed.add(ti);}}if (allowed.size() == 0) {aaa.setTargetId(newTarget.getTargetId());aaa.setTargetType(newTarget.getTargetType());target=newTarget;toHit=new ToHitData(TargetRoll.IMPOSSIBLE,"no tag in 8 hex radius of target hex");} else {int bestDistance=Integer.MAX_VALUE;TagInfo targetTag=allowed.firstElement();for (TagInfo ti : allowed) {int distance=tc.distance(newTarget.getPosition());if (ti.shots > targetTag.shots) {bestDistance=distance;targetTag=ti;continue;}if (ti.shots == targetTag.shots) {if (ti.priority > targetTag.priority) {  bestDistance=distance;  targetTag=ti;  continue;}if ((ti.priority == targetTag.priority) && (bestDistance > distance)) {  bestDistance=distance;  targetTag=ti;}}}if (targetTag.shots == 0) {game.clearTagInfoShots(ae,tc);}targetTag.shots--;target=targetTag.target;aaa.setTargetId(target.getTargetId());aaa.setTargetType(target.getTargetType());}}  }
class C{  public R paramsToJsonEntity(){  try {    mHttpEntity=createJsonStreamerEntity(null);  } catch (  IOException e) {    e.printStackTrace();  }  return (R)this;}  }
class C{  public void validationText(int valid,int invalid,int empty){  this.valid=context.getResources().getString(valid);  this.invalid=context.getResources().getString(invalid);  this.empty=context.getResources().getString(empty);}  }
class C{  public void targetRemote(String host,int port) throws IOException, InterruptedException, DebuggerException {  String command="target remote " + (host != null ? host : "") + ":"+ port;  GdbOutput gdbOutput=sendCommand(command);  GdbTargetRemote.parse(gdbOutput);}  }
class C{  protected void deregister(Iterable<String> channelIds){  for (  String channelId : channelIds) {    Collection<Session> sessions=socketSessions.get(channelId);    if (sessions != null) {      for (      Session session : sessions) {        if (session.isOpen()) {          try {            session.close(REASON_EXPIRED);          } catch (          IOException ignore) {            continue;          }        }      }    }  }}  }
class C{  public void addShutdownHook(Runnable shutdownHook,int priority){  if (shutdownHook == null)   throw new IllegalArgumentException("shutdownHook cannot be NULL");  hooks.add(shutdownHook);}  }
class C{  public void dispose(){  removeActionListener(comboBoxListener);}  }
class C{  private static String scanToXml(final long timestamp){  return String.format(SCAN_XML,timestamp);}  }
class C{  void generateWeights(){  if (divisionsInner > 0) {    if (divisionsOuter >= problem.getNumberOfObjectives()) {      System.err.println("The specified number of outer divisions produces intermediate reference points, recommend setting divisionsOuter < numberOfObjectives.");    }    weights=generateWeights(divisionsOuter);    List<double[]> inner=generateWeights(divisionsInner);    for (int i=0; i < inner.size(); i++) {      double[] weight=inner.get(i);      for (int j=0; j < weight.length; j++) {        weight[j]=(1.0 / problem.getNumberOfObjectives() + weight[j]) / 2;      }    }    weights.addAll(inner);  } else {    if (divisionsOuter < problem.getNumberOfObjectives()) {      System.err.println("No intermediate reference points will be generated for the specified number of divisions, recommend increasing divisions");    }    weights=generateWeights(divisionsOuter);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_RECORD___RECORD_ENTITY_1:    getRecordEntity_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public boolean isActive(KMLTraversalContext tc,DrawContext dc){  if (tc == null) {    String message=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.makeRegionData(dc);  if (dc.getFrameTimeStamp() != this.getCurrentData().getActiveFrameNumber()) {    this.getCurrentData().setActive(this.isRegionActive(tc,dc));    this.getCurrentData().setActiveFrameNumber(dc.getFrameTimeStamp());  }  return this.getCurrentData().isActive();}  }
class C{  public static void main(String[] args) throws Exception {  Properties config=new Properties();  config.put(StreamsConfig.APPLICATION_ID_CONFIG,"hopping-window-kafka-streams");  config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  config.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG,"localhost:2181");  config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG,Serdes.ByteArray().getClass().getName());  config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());  KStreamBuilder builder=new KStreamBuilder();  KStream<byte[],Long> longs=builder.stream(Serdes.ByteArray(),Serdes.Long(),"longs");  KTable<Windowed<byte[]>,Long> longCounts=longs.countByKey(TimeWindows.of("longCounts",10000L).advanceBy(1000L),Serdes.ByteArray());  longCounts.toStream(null).map(null).to(Serdes.ByteArray(),Serdes.Long(),"long-counts-all");  KafkaStreams streams=new KafkaStreams(builder,config);  streams.start();  Properties producerConfig=new Properties();  producerConfig.put("bootstrap.servers","localhost:9092");  producerConfig.put("key.serializer","org.apache.kafka.common" + ".serialization.ByteArraySerializer");  producerConfig.put("value.serializer","org.apache.kafka.common" + ".serialization.LongSerializer");  KafkaProducer producer=new KafkaProducer<byte[],Long>(producerConfig);  Random rng=new Random(12345L);  while (true) {    producer.send(new ProducerRecord<byte[],Long>("longs","A".getBytes(),rng.nextLong() % 10));    Thread.sleep(500L);  }}  }
class C{  public Topology buildAppTopology(){  Topology t=tp.newTopology("kafkaClientSubscriber");  Map<String,Object> config=newConfig(t);  KafkaConsumer kafka=new KafkaConsumer(t,null);  System.out.println("Using Kafka consumer group.id " + config.get(OPT_GROUP_ID));  TStream<String> msgs=kafka.subscribe(null,(String)options.get(OPT_TOPIC));  msgs.sink(null);  return t;}  }
class C{  public int next(){  _currentNode=(_currentNode == DTM.NULL) ? DTM.NULL : _nextsib2(_currentNode);  return returnNode(makeNodeHandle(_currentNode));}  }
class C{  private static void protectPasswords(){  String[] fields={"setup.rootPassword","setup.systemPasswords"};  for (  String field : fields) {    protectPassword(field);  }  protectField("setup.smtpPassword");}  }
class C{  @Override public String toString(){  return repositoryLocations.toString();}  }
class C{  public MatrixStackf pushMatrix(){  if (curr == mats.length) {    throw new IllegalStateException("max stack size of " + (curr + 1) + " reached");  }  mats[curr++].set(this);  return this;}  }
class C{  public DCCppReply(DCCppMessage message){  super();  setBinary(false);  for (int i=0; i < message.getNumDataElements(); i++) {    setElement(i,message.getElement(i));  }}  }
class C{  public void registerEntityProvider(EntityProvider provider){}  }
class C{  public APIException(APIError.Type type,String message,Collection<Field> expected){  this(new APIError(type,message,expected));}  }
class C{  public SearchResult(String name,Object obj,Attributes attrs,boolean isRelative){  super(name,obj,isRelative);  this.attrs=attrs;}  }
class C{  public void offset(int dx,int dy){  left+=dx;  top+=dy;  right+=dx;  bottom+=dy;}  }
class C{  public static void put(String id,Object o){  if (o == null) {    String msg="Object for id '" + id + "' must not be null!";    LOG.error(msg);    throw new IllegalArgumentException(msg);  }  Map<String,Object> map=instance().threadLocal.get();  if (map.put(id,o) != null) {    String msg="Requested object '" + id + "' was displaced. This is not allowed because it breaks the singleton contract.";    LOG.error(msg);    throw new IllegalStateException(msg);  }}  }
class C{  @Override public void receive(float sample){  mCounter++;  if (mCounter >= mDecimationRate) {    mListener.receive(sample);    mCounter=0;  }}  }
class C{  public void cancel(){  mNotificationManager.cancel(NOTIFICATION_ID);}  }
class C{  private void confirmNotCommitted(long seqno,int waitMillis) throws InterruptedException, ExecutionException {  Future<ReplDBMSHeader> committed=pipeline.watchForCommittedSequenceNumber(seqno,false);  boolean reached=false;  try {    committed.get(waitMillis,TimeUnit.MILLISECONDS);    reached=true;    logger.error("Pipeline has unexpectedly committed base events through seqno=" + seqno);  } catch (  TimeoutException e) {    logger.info("As expected, timed out waiting for seqno: " + seqno);  }catch (  ExecutionException e) {    throw e;  }  Assert.assertFalse("Did not expect to commit through seqno=" + seqno,reached);}  }
class C{  public String remove(String id) throws ApiException {  Object postBody=null;  String path="/todo-service/todo".replaceAll("\\{format\\}","json");  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,String> formParams=new HashMap<String,String>();  queryParams.addAll(apiClient.parameterToPairs("","id",id));  final String[] accepts={};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  if (contentType.startsWith("multipart/form-data")) {    boolean hasFields=false;    FormDataMultiPart mp=new FormDataMultiPart();    if (hasFields)     postBody=mp;  } else {  }  try {    String[] authNames=new String[]{};    String response=apiClient.invokeAPI(path,"DELETE",queryParams,postBody,headerParams,formParams,accept,contentType,authNames);    if (response != null) {      return (String)apiClient.deserialize(response,"",String.class);    } else {      return null;    }  } catch (  ApiException ex) {    throw ex;  }}  }
class C{  public static ToolboxCategory loadToolboxFromXml(InputStream is,BlockFactory blockFactory) throws BlocklyParserException {  try {    XmlPullParser parser=mParserFactory.newPullParser();    parser.setInput(is,null);    return ToolboxCategory.fromXml(parser,blockFactory);  } catch (  XmlPullParserException|IOException e) {    throw new BlocklyParserException(e);  }}  }
class C{  public static String ftlQuote(String s){  char quotation;  if (s.indexOf('"') != -1 && s.indexOf('\'') == -1) {    quotation='\'';  } else {    quotation='\"';  }  return FTLStringLiteralEnc(s,quotation,true);}  }
class C{  public AmqpMessage(){  receiver=null;  delivery=null;  message=Proton.message();}  }
class C{  @Override protected Control createContents(Composite parent){  getShell().setText(Raptor.getInstance().getPreferences().getString(PreferenceKeys.APP_NAME));  getShell().setImage(Raptor.getInstance().getImage(Raptor.RESOURCES_DIR + "images/raptorIcon.gif"));  parent.setLayout(SWTUtils.createMarginlessGridLayout(1,true));  windowComposite=new Composite(parent,SWT.NONE);  windowComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));  windowComposite.setLayout(SWTUtils.createMarginlessGridLayout(2,false));  createLeftCoolbar();  createFolderAndSashControls();  return windowComposite;}  }
class C{  public ByteBuffer readFully(long pos,int len){  ByteBuffer dst=ByteBuffer.allocate(len);  DataUtils.readFully(file,pos,dst);  readCount++;  readBytes+=len;  return dst;}  }
class C{  protected double computeAzimuthLabelOffset(double radius,double maxRadius){  return Math.asin(AZIMUTH_LABEL_OFFSET * maxRadius / radius);}  }
class C{  private static boolean isCaptureConvertedTypeVar(final Element element){  final Element enclosure=element.getEnclosingElement();  return (((Symbol)enclosure).kind == com.sun.tools.javac.code.Kinds.NIL);}  }
class C{  public void endVisit(ImportDeclaration node){}  }
class C{  public int cancelQueuedBuildByPrNumber(final int id){  int canceled=0;  SecurityContext old=impersonate(ACL.SYSTEM);  try {    final Queue queue=getJenkinsInstance().getQueue();    final Queue.Item[] items=queue.getItems();    for (    Queue.Item item : items) {      if (!(item.task instanceof Job)) {        LOGGER.debug("Item {} not instanceof job",item);        continue;      }      final Job<?,?> jobTask=(Job<?,?>)item.task;      if (!jobTask.getFullName().equals(job.getFullName())) {        LOGGER.debug("{} != {}",jobTask.getFullName(),job.getFullName());        continue;      }      final CauseAction action=item.getAction(CauseAction.class);      if (isNull(action)) {        LOGGER.debug("Cause action is null for {}",jobTask.getFullName());        continue;      }      Optional<Cause> cause=from(action.getCauses()).filter(instanceOf(GitHubPRCause.class)).firstMatch(new CauseHasPRNum(id));      if (cause.isPresent()) {        LOGGER.debug("Cancelling {}",item);        queue.cancel(item);        canceled++;      }    }  }  finally {    SecurityContextHolder.setContext(old);  }  return canceled;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public StateMachineException(String message){  super(message);}  }
class C{  public static void init(String configurationFile) throws Exception {  RuntimeSingleton.init(configurationFile);}  }
class C{  private int fastRead(byte[] b,int off,int len) throws IOException {  int remaining=chunkSize - chunkRead;  int cnt=(remaining < len) ? remaining : len;  if (cnt > 0) {    int nread;    try {      nread=in.read(b,off,cnt);    } catch (    IOException e) {      error=true;      throw e;    }    if (nread > 0) {      chunkRead+=nread;      if (chunkRead >= chunkSize) {        state=STATE_AWAITING_CHUNK_EOL;      }      return nread;    }    error=true;    throw new IOException("Premature EOF");  } else {    return 0;  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssFileInfo[");  buffer.append("m_ext = ").append(m_ext);  buffer.append(", m_extId1 = ").append(m_extId1);  buffer.append(", m_extId2 = ").append(m_extId2);  buffer.append(", m_extId3 = ").append(m_extId3);  buffer.append(", m_extId4 = ").append(m_extId4);  buffer.append(", m_flags = ").append(m_flags);  buffer.append("]");  return buffer.toString();}  }
class C{  protected static void writeComment(XMLWriter writer,String comment){  XmlWriterUtil.writeCommentLineBreak(writer);  XmlWriterUtil.writeComment(writer," ");  XmlWriterUtil.writeComment(writer,comment);  XmlWriterUtil.writeComment(writer," ");  XmlWriterUtil.writeCommentLineBreak(writer);  XmlWriterUtil.writeLineBreak(writer);}  }
class C{  Calendar toCalendar(String value,String pattern,Locale locale){  Calendar calendar=null;  try {    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);    format.setLenient(false);    format.parse(value);    calendar=format.getCalendar();  } catch (  Exception e) {    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());  }  return calendar;}  }
class C{  public void reset(){  mBytes.reset();}  }
class C{  public static void createInstance(String path,Properties properties){  instance=new Ephemeris(path,properties);}  }
class C{  public void addKeyInfo(X509Certificate cert) throws XMLSecurityException {  X509Data x509data=new X509Data(this.doc);  x509data.addCertificate(cert);  this.getKeyInfo().add(x509data);}  }
class C{  private boolean isTouchCandidate(int x,int y,Rect destRect,int direction){switch (direction) {case View.FOCUS_LEFT:    return destRect.left <= x && destRect.top <= y && y <= destRect.bottom;case View.FOCUS_RIGHT:  return destRect.left >= x && destRect.top <= y && y <= destRect.bottom;case View.FOCUS_UP:return destRect.top <= y && destRect.left <= x && x <= destRect.right;case View.FOCUS_DOWN:return destRect.top >= y && destRect.left <= x && x <= destRect.right;}throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");}  }
class C{  public static UUID nameUUIDFromBytes(byte[] name){  if (name == null) {    throw new NullPointerException("name == null");  }  try {    MessageDigest md=MessageDigest.getInstance("MD5");    return makeUuid(md.digest(name),3);  } catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean b=evalBool(stack.pop());  Agent a=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Carny.getInstance().setAgentFlags(a,Agent.DONT_AUTODELETE_FLAG,b ? Agent.DONT_AUTODELETE_FLAG : 0);    Carny.getInstance().kick();  }  return null;}  }
