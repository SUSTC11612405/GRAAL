class C{  public SimpleBag(){  this(10,2);}  }
class C{  public final int dimensionality(){  return dimensionality;}  }
class C{  @Override public Graphics2D paintLink(Graphics2D g2dd){  Graphics2D g2d=super.paintLink(g2dd);  if (isAnimated()) {    int ax=this.origin.getPoint().x;    int ay=this.origin.getPoint().y - 3;    Shape circle=new Ellipse2D.Float(ax + this.offset,ay,10,10);    g2d.setStroke(new BasicStroke(1));    g2d.setPaint(Color.yellow);    g2d.fill(circle);    g2d.setPaint(Color.black);    g2d.draw(circle);  }  return g2d;}  }
class C{  public static String[] toArray(List<String> options){  return options.toArray(new String[options.size()]);}  }
class C{  public BasicStroke(int cap,int join,float miter,float[] intervals,float phase){  mCap=cap;  mJoin=join;  mMiter=miter;  mIntervals=intervals;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static boolean connectToConfiguredNetwork(final Context ctx,final WifiManager wifiMgr,WifiConfiguration config,boolean reassociate){  final String security=ConfigSec.getWifiConfigurationSecurity(config);  int oldPri=config.priority;  int newPri=getMaxPriority(wifiMgr) + 1;  if (newPri > MAX_PRIORITY) {    newPri=shiftPriorityAndSave(wifiMgr);    config=getWifiConfiguration(wifiMgr,config,security);    if (config == null) {      return false;    }  }  config.priority=newPri;  int networkId=wifiMgr.updateNetwork(config);  if (networkId == -1) {    return false;  }  if (!wifiMgr.enableNetwork(networkId,false)) {    config.priority=oldPri;    return false;  }  if (!wifiMgr.saveConfiguration()) {    config.priority=oldPri;    return false;  }  config=getWifiConfiguration(wifiMgr,config,security);  if (config == null) {    return false;  }  ReenableAllApsWhenNetworkStateChanged.schedule(ctx);  if (!wifiMgr.enableNetwork(config.networkId,true)) {    return false;  }  final boolean connect=reassociate ? wifiMgr.reassociate() : wifiMgr.reconnect();  if (!connect) {    return false;  }  return true;}  }
class C{  public static Time valueOf(String s){  int hour;  int minute;  int second;  int firstColon;  int secondColon;  if (s == null)   throw new java.lang.IllegalArgumentException();  firstColon=s.indexOf(':');  secondColon=s.indexOf(':',firstColon + 1);  if ((firstColon > 0) & (secondColon > 0) & (secondColon < s.length() - 1)) {    hour=Integer.parseInt(s.substring(0,firstColon));    minute=Integer.parseInt(s.substring(firstColon + 1,secondColon));    second=Integer.parseInt(s.substring(secondColon + 1));  } else {    throw new java.lang.IllegalArgumentException();  }  return new Time(hour,minute,second);}  }
class C{  private boolean isCompletedPortal(GlowBlock center){  for (int i=0; i < 4; i++) {    for (int j=-1; j <= 1; j++) {      GlowBlock block=center.getRelative(DIRECTION[i],2).getRelative(DIRECTION[(i + 1) % 4],j);      if (block.getType() != Material.ENDER_PORTAL_FRAME || (block.getData() & 0x4) == 0) {        return false;      }    }  }  return true;}  }
class C{  private void append(final StringBuffer sb,final int minSize,final int maxSize,final boolean rightJustify,final String output){  final int size=output.length();  if (size < minSize) {    if (rightJustify) {      appendWhiteSpace(sb,minSize - size);      sb.append(output);    } else {      sb.append(output);      appendWhiteSpace(sb,minSize - size);    }  } else   if (maxSize > 0 && maxSize < size) {    if (rightJustify) {      sb.append(output.substring(size - maxSize));    } else {      sb.append(output.substring(0,maxSize));    }  } else {    sb.append(output);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) final public IVariableOrConstant<IV> p(){  return (IVariableOrConstant<IV>)get(1);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (attribute: ");  result.append(attribute);  result.append(')');  return result.toString();}  }
class C{  public void addAttribute(String rawName,String value){  if (m_firstTagNotEmitted) {    flush();  }  m_handler.addAttribute(rawName,value);}  }
class C{  @NotNull public static PsiElement addElementToStatementList(@NotNull PsiElement element,@NotNull PyStatementList statementList,boolean toTheBeginning){  final boolean statementListWasEmpty=statementList.getStatements().length == 0;  final PsiElement firstChild=statementList.getFirstChild();  if (firstChild == statementList.getLastChild() && firstChild instanceof PyPassStatement) {    element=firstChild.replace(element);  } else {    final PyStatement[] statements=statementList.getStatements();    if (toTheBeginning && statements.length > 0) {      final PyDocStringOwner docStringOwner=PsiTreeUtil.getParentOfType(statementList,PyDocStringOwner.class);      PyStatement anchor=statements[0];      if (docStringOwner != null && anchor instanceof PyExpressionStatement && ((PyExpressionStatement)anchor).getExpression() == docStringOwner.getDocStringExpression()) {        final PyStatement next=PsiTreeUtil.getNextSiblingOfType(anchor,PyStatement.class);        if (next == null) {          return statementList.addAfter(element,anchor);        }        anchor=next;      }      while (anchor instanceof PyExpressionStatement) {        final PyExpression expression=((PyExpressionStatement)anchor).getExpression();        if (expression instanceof PyCallExpression) {          final PyExpression callee=((PyCallExpression)expression).getCallee();          if ((isSuperCall((PyCallExpression)expression) || (callee != null && PyNames.INIT.equals(callee.getName())))) {            final PyStatement next=PsiTreeUtil.getNextSiblingOfType(anchor,PyStatement.class);            if (next == null) {              return statementList.addAfter(element,anchor);            }            anchor=next;            continue;          }        }        break;      }      element=statementList.addBefore(element,anchor);    } else {      element=statementList.add(element);    }  }  if (statementListWasEmpty) {    final PsiElement parent=statementList.getParent();    if (parent instanceof PyStatementListContainer) {      final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(parent.getProject());      final PsiFile pyFile=parent.getContainingFile();      final Document document=documentManager.getDocument(pyFile);      if (document != null && document.getLineNumber(parent.getTextOffset()) == document.getLineNumber(statementList.getTextOffset())) {        final CodeStyleSettings codeStyleManager=CodeStyleSettingsManager.getSettings(parent.getProject());        final IndentOptions indentOptions=codeStyleManager.getCommonSettings(pyFile.getLanguage()).getIndentOptions();        final int indentSize=indentOptions.INDENT_SIZE;        final String indentation=StringUtil.repeatSymbol(' ',PyPsiUtils.getElementIndentation(parent) + indentSize);        documentManager.doPostponedOperationsAndUnblockDocument(document);        document.insertString(statementList.getTextOffset(),"\n" + indentation);        documentManager.commitDocument(document);      }    }  }  return element;}  }
class C{  private void writeImport(SymbolTable symTab){  assert symTab.isSharedTable();  final int originalOffset=myBuffer.length - myOffset;  int maxId=symTab.getMaxId();  if (maxId == 0) {    writeByte((byte)TYPE_POS_INT);  } else {    writeUInt(maxId);    writePrefix(TYPE_POS_INT,myBuffer.length - myOffset - originalOffset);  }  writeByte((byte)(0x80 | MAX_ID_SID));  final int maxIdOffset=myBuffer.length - myOffset;  int version=symTab.getVersion();  writeUInt(version);  writePrefix(TYPE_POS_INT,myBuffer.length - myOffset - maxIdOffset);  writeByte((byte)(0x80 | VERSION_SID));  String name=symTab.getName();  writeIonStringContent(name);  writeByte((byte)(0x80 | NAME_SID));  writePrefix(TYPE_STRUCT,myBuffer.length - myOffset - originalOffset);}  }
class C{  Element createApiMap(TreeSet<String> packageNames,Document outputObject){  ArrayList<String> alreadyAdded=new ArrayList<String>();  Element apiMap=outputObject.createElement("apiMap");  String addedPackage=null;  String currentPackage=null;  Iterator<String> packages=packageNames.iterator();  if (packages == null) {    return apiMap;  }  while (packages.hasNext()) {    currentPackage=packages.next();    boolean found=false;    for (int ix=0; ix < alreadyAdded.size(); ix++) {      addedPackage=alreadyAdded.get(ix);      if (currentPackage.indexOf(addedPackage) == 0 && currentPackage.charAt(addedPackage.length()) == '.') {        Element apiItemRef=getPackageNode(apiMap,addedPackage);        Element newApiItemRef=outputObject.createElement("apiItemRef");        newApiItemRef.setAttribute("href",currentPackage + ".xml");        apiItemRef.appendChild(newApiItemRef);        alreadyAdded.add(currentPackage);        found=true;        break;      }    }    if (!found) {      Element apiItemRef=outputObject.createElement("apiItemRef");      apiItemRef.setAttribute("href",currentPackage + ".xml");      apiMap.appendChild(apiItemRef);      alreadyAdded.add(currentPackage);    }  }  return apiMap;}  }
class C{  public Map<String,String> parse(final String str,char[] separators){  if (separators == null || separators.length == 0) {    return new HashMap<>();  }  char separator=separators[0];  if (str != null) {    int idx=str.length();    for (    char separator2 : separators) {      int tmp=str.indexOf(separator2);      if (tmp != -1 && tmp < idx) {        idx=tmp;        separator=separator2;      }    }  }  return parse(str,separator);}  }
class C{  protected boolean createNewInstance(String reason){  Set<NodePortTuple> blockedPorts=new HashSet<NodePortTuple>();  if (!linksUpdated)   return false;  Map<NodePortTuple,Set<Link>> openflowLinks;  openflowLinks=new HashMap<NodePortTuple,Set<Link>>();  Set<NodePortTuple> nptList=switchPortLinks.keySet();  if (nptList != null) {    for (    NodePortTuple npt : nptList) {      Set<Link> linkSet=switchPortLinks.get(npt);      if (linkSet == null)       continue;      openflowLinks.put(npt,new HashSet<Link>(linkSet));    }  }  Set<NodePortTuple> broadcastDomainPorts=identifyBroadcastDomainPorts();  for (  NodePortTuple npt : broadcastDomainPorts) {    if (switchPortLinks.get(npt) == null)     continue;    for (    Link link : switchPortLinks.get(npt)) {      removeLinkFromStructure(openflowLinks,link);    }  }  for (  NodePortTuple npt : tunnelPorts) {    if (switchPortLinks.get(npt) == null)     continue;    for (    Link link : switchPortLinks.get(npt)) {      removeLinkFromStructure(openflowLinks,link);    }  }  TopologyInstance nt=new TopologyInstance(switchPorts,blockedPorts,openflowLinks,broadcastDomainPorts,tunnelPorts);  nt.compute();  currentInstance=nt;  currentInstanceWithoutTunnels=nt;  TopologyEventInfo topologyInfo=new TopologyEventInfo(0,nt.getClusters().size(),new HashMap<DatapathId,List<NodePortTuple>>(),0);  eventCategory.newEventWithFlush(new TopologyEvent(reason,topologyInfo));  return true;}  }
class C{  public void removeAlgorithm(String key){  this.algorithms.remove(key);}  }
class C{  GeneralRange<T> intersect(GeneralRange<T> other){  checkNotNull(other);  checkArgument(comparator.equals(other.comparator));  boolean hasLowBound=this.hasLowerBound;  @Nullable T lowEnd=getLowerEndpoint();  BoundType lowType=getLowerBoundType();  if (!hasLowerBound()) {    hasLowBound=other.hasLowerBound;    lowEnd=other.getLowerEndpoint();    lowType=other.getLowerBoundType();  } else   if (other.hasLowerBound()) {    int cmp=comparator.compare(getLowerEndpoint(),other.getLowerEndpoint());    if (cmp < 0 || (cmp == 0 && other.getLowerBoundType() == OPEN)) {      lowEnd=other.getLowerEndpoint();      lowType=other.getLowerBoundType();    }  }  boolean hasUpBound=this.hasUpperBound;  @Nullable T upEnd=getUpperEndpoint();  BoundType upType=getUpperBoundType();  if (!hasUpperBound()) {    hasUpBound=other.hasUpperBound;    upEnd=other.getUpperEndpoint();    upType=other.getUpperBoundType();  } else   if (other.hasUpperBound()) {    int cmp=comparator.compare(getUpperEndpoint(),other.getUpperEndpoint());    if (cmp > 0 || (cmp == 0 && other.getUpperBoundType() == OPEN)) {      upEnd=other.getUpperEndpoint();      upType=other.getUpperBoundType();    }  }  if (hasLowBound && hasUpBound) {    int cmp=comparator.compare(lowEnd,upEnd);    if (cmp > 0 || (cmp == 0 && lowType == OPEN && upType == OPEN)) {      lowEnd=upEnd;      lowType=OPEN;      upType=CLOSED;    }  }  return new GeneralRange<T>(comparator,hasLowBound,lowEnd,lowType,hasUpBound,upEnd,upType);}  }
class C{  @Override public void acceptTrainingSet(final TrainingSetEvent e){  if (e.isStructureOnly()) {    BatchClassifierEvent ce=new BatchClassifierEvent(this,m_Classifier,new DataSetEvent(this,e.getTrainingSet()),new DataSetEvent(this,e.getTrainingSet()),e.getSetNumber(),e.getMaxSetNumber());    notifyBatchClassifierListeners(ce);    return;  }  if (m_reject) {    if (m_log != null) {      m_log.statusMessage(statusMessagePrefix() + "BUSY. Can't accept data " + "at this time.");      m_log.logMessage("[Classifier] " + statusMessagePrefix() + " BUSY. Can't accept data at this time.");    }    return;  }  if (e.getRunNumber() == 1 && e.getSetNumber() == 1) {    m_trainingSet=new Instances(e.getTrainingSet(),0);    m_state=BUILDING_MODEL;    String msg="[Classifier] " + statusMessagePrefix() + " starting executor pool ("+ getExecutionSlots()+ " slots)...";    if (m_log != null) {      m_log.logMessage(msg);    } else {      System.err.println(msg);    }    startExecutorPool();    msg="[Classifier] " + statusMessagePrefix() + " setup output queues.";    if (m_log != null) {      m_log.logMessage(msg);    } else {      System.err.println(msg);    }    if (!m_batchStarted) {      m_outputQueues=new BatchClassifierEvent[e.getMaxRunNumber()][e.getMaxSetNumber()];      m_completedSets=new boolean[e.getMaxRunNumber()][e.getMaxSetNumber()];      m_currentBatchIdentifier=new Date();      m_batchStarted=true;    }  }  TrainingTask newTask=new TrainingTask(e.getRunNumber(),e.getMaxRunNumber(),e.getSetNumber(),e.getMaxSetNumber(),e.getTrainingSet());  String msg="[Classifier] " + statusMessagePrefix() + " scheduling run "+ e.getRunNumber()+ " fold "+ e.getSetNumber()+ " for execution...";  if (m_log != null) {    m_log.logMessage(msg);  } else {    System.err.println(msg);  }  m_executorPool.execute(newTask);}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  private void checkActiveJobsForImageServer(URI imageServerURI){  log.info("Check if any active ComputeImageJobs are present for imageServer id {} ",imageServerURI);  URIQueryResultList computeImageJobsUriList=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getComputeImageJobsByComputeImageServerConstraint(imageServerURI),computeImageJobsUriList);  Iterator<URI> iterator=computeImageJobsUriList.iterator();  while (iterator.hasNext()) {    ComputeImageJob job=_dbClient.queryObject(ComputeImageJob.class,iterator.next());    if (job.getJobStatus().equals(ComputeImageJob.JobStatus.CREATED.name())) {      throw APIException.badRequests.cannotDeleteOrUpdateImageServerWhileInUse();    }  }}  }
class C{  public ResourceNotFoundException(){  super();}  }
class C{  public void handleClosure(){  List<Integer> pendingCallIds=new ArrayList<Integer>();  do {    pendingCallIds.addAll(pendingServerCallMap.keySet());    for (    Integer correlationId : pendingCallIds) {      PendingServerCallState state=pendingServerCallMap.remove(correlationId);      if (state != null) {        callExecutor.cancel(state.getExecutor());        RpcCancel rpcCancel=RpcCancel.newBuilder().setCorrelationId(correlationId).build();        if (log.isDebugEnabled()) {          log.debug("Cancel on close [" + rpcCancel.getCorrelationId() + "]RpcCancel.");        }        doLog(state,rpcCancel,"Cancelled on Close");      }    }  } while (pendingServerCallMap.size() > 0);}  }
class C{  public static void CheckLabeledStmtSeq(Vector stmtseq) throws ParseAlgorithmException {  int i=0;  while (i < stmtseq.size()) {    AST.LabeledStmt stmt=(AST.LabeledStmt)stmtseq.elementAt(i);    int ignore=ClassifyStmtSeq(stmt.stmts);    i=i + 1;  }  ;}  }
class C{  public Activity_ createActivity_(){  Activity_Impl activity_=new Activity_Impl();  return activity_;}  }
class C{  public boolean isSelected(){  Object oo=get_Value(COLUMNNAME_IsSelected);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public StringWriter(int initialSize){  if (initialSize < 0) {    throw new IllegalArgumentException("Negative buffer size");  }  buf=new StringBuffer(initialSize);  lock=buf;}  }
class C{  public CompareResult<RouteInfo> compareRoutes(LinkProperties target){  CompareResult<RouteInfo> result=new CompareResult<RouteInfo>();  result.removed=getAllRoutes();  result.added.clear();  if (target != null) {    for (    RouteInfo r : target.getAllRoutes()) {      if (!result.removed.remove(r)) {        result.added.add(r);      }    }  }  return result;}  }
class C{  public NotificationChain basicSetValue(BindingElement newValue,NotificationChain msgs){  BindingElement oldValue=value;  value=newValue;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.BINDING_PROPERTY__VALUE,oldValue,newValue);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public DataTable(Class<? extends Comparable<?>>... types){  super(types);  rows=new ArrayList<Record>();}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getDateDoc() == null) {    if (getDateAcct() == null)     setDateDoc(new Timestamp(System.currentTimeMillis())); else     setDateDoc(getDateAcct());  }  if (getDateAcct() == null)   setDateAcct(getDateDoc());  if (is_ValueChanged(COLUMNNAME_DateAcct)) {    int no=DB.executeUpdate("UPDATE GL_JournalLine SET " + MJournalLine.COLUMNNAME_DateAcct + "=? WHERE GL_Journal_ID=?",new Object[]{getDateAcct(),getGL_Journal_ID()},false,get_TrxName());    log.finest("Updated GL_JournalLine.DateAcct #" + no);  }  return true;}  }
class C{  protected void propertyChange(PropertyChangeEvent evt){  if (SeaGlassLookAndFeel.shouldUpdateStyle(evt)) {    updateStyle((JTextComponent)evt.getSource());  }  super.propertyChange(evt);}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(byte0);  buffer.setAtIndexAndInc(arg1);  buffer.setAtIndexAndInc(arg2);  buffer.setAtIndexAndInc(arg3);  super.loadByteArray(buffer);}  }
class C{  public static Writer newWriter(OutputStream stream,String charset) throws UnsupportedEncodingException {  return new OutputStreamWriter(stream,charset);}  }
class C{  public List<ResultSet> query(String table,String[] columns,String selection,String[] selectionArgs){  return query(table,columns,selection,selectionArgs,null,null,null);}  }
class C{  public Quaternion(Vector3f axis,float angle){  double s=Math.sin(angle / 2);  x=(float)(axis.x * s);  y=(float)(axis.y * s);  z=(float)(axis.z * s);  w=(float)Math.cos(angle / 2);}  }
class C{  private void unload(SourceDir src){synchronized (loadedClasses) {    for (Iterator<LoadedClass> iter=loadedClasses.values().iterator(); iter.hasNext(); ) {      LoadedClass loadedClass=iter.next();      if (loadedClass.srcDir == src) {        iter.remove();      }    }  }  src.recreateClassLoader();}  }
class C{  @Override public void addMeasure(CarbonMeasure measure,List<CarbonMeasureFilter> filters,SortType sortType){  sortType=sortType == null ? SortType.NONE : sortType;  axises[AxisType.COLUMN.getIndex()].add(measure,sortType,filters,null);}  }
class C{  public static Population createTestPtPopulation(int nPersons,Coord homeCoord,Coord workCoord){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Population population=scenario.getPopulation();  for (int i=0; i < nPersons; i++) {    Person person=population.getFactory().createPerson(Id.create(i,Person.class));    PersonUtils.setAge(person,30);    Plan plan=population.getFactory().createPlan();    Activity home=population.getFactory().createActivityFromCoord("home",homeCoord);    home.setEndTime(8. * 3600);    Activity work=population.getFactory().createActivityFromCoord("work",workCoord);    work.setEndTime(17. * 3600);    Activity home2=population.getFactory().createActivityFromCoord("home",homeCoord);    home2.setEndTime(24. * 3600);    Leg leg=population.getFactory().createLeg(TransportMode.pt);    plan.addActivity(home);    plan.addLeg(leg);    plan.addActivity(work);    plan.addLeg(leg);    plan.addActivity(home2);    person.addPlan(plan);    population.addPerson(person);  }  return population;}  }
class C{  private void labelTrees(){  for (int i=0; i < numTreeRoots; i++) {    AbstractBURS_TreeNode n=treeRoots[i];    label(n);    mark(n,(byte)1);  }}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  private static int generatePushParam(ClassFileWriter cfw,int paramOffset,Class<?> paramType){  if (!paramType.isPrimitive()) {    cfw.addALoad(paramOffset);    return 1;  }  String typeName=paramType.getName();switch (typeName.charAt(0)) {case 'z':case 'b':case 'c':case 's':case 'i':    cfw.addILoad(paramOffset);  return 1;case 'l':cfw.addLLoad(paramOffset);return 2;case 'f':cfw.addFLoad(paramOffset);return 1;case 'd':cfw.addDLoad(paramOffset);return 2;}throw Kit.codeBug();}  }
class C{  public static boolean cs_dupl(Scs A){  int i, j, p, q, nz=0, n, m, Ap[], Ai[], w[];  float Ax[];  if (!Scs_util.CS_CSC(A))   return (false);  m=A.m;  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  w=new int[m];  for (i=0; i < m; i++)   w[i]=-1;  for (j=0; j < n; j++) {    q=nz;    for (p=Ap[j]; p < Ap[j + 1]; p++) {      i=Ai[p];      if (w[i] >= q) {        Ax[w[i]]+=Ax[p];      } else {        w[i]=nz;        Ai[nz]=i;        Ax[nz++]=Ax[p];      }    }    Ap[j]=q;  }  Ap[n]=nz;  return Scs_util.cs_sprealloc(A,0);}  }
class C{  protected V alternative(K key,L level){  return null;}  }
class C{  public DataGen(DataGenMethod mthd,DataIdentifier id,HashMap<String,Lop> inputParametersLops,String baseDir,DataType dt,ValueType vt,ExecType et) throws LopsException {  super(Type.DataGen,dt,vt);  method=mthd;  for (  Lop lop : inputParametersLops.values()) {    this.addInput(lop);    lop.addOutput(this);  }  _inputParams=inputParametersLops;  init(id,baseDir,et);}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  if ((this.thickness > 0) && (g instanceof Graphics2D)) {    Graphics2D g2d=(Graphics2D)g;    Color oldColor=g2d.getColor();    g2d.setColor(this.lineColor);    Shape outer;    Shape inner;    int offs=this.thickness;    int size=offs + offs;    if (this.roundedCorners) {      float arc=.2f * offs;      outer=new RoundRectangle2D.Float(x,y,width,height,offs,offs);      inner=new RoundRectangle2D.Float(x + offs,y + offs,width - size,height - size,arc,arc);    } else {      outer=new Rectangle2D.Float(x,y,width,height);      inner=new Rectangle2D.Float(x + offs,y + offs,width - size,height - size);    }    Path2D path=new Path2D.Float(Path2D.WIND_EVEN_ODD);    path.append(outer,false);    path.append(inner,false);    g2d.fill(path);    g2d.setColor(oldColor);  }}  }
class C{  public int dataPointToCord(DataPointPair<Integer> dataPoint,int targetClass,int[] cord){  if (cord.length != getDimensionSize())   throw new ArithmeticException("Storage space and CPT dimension miss match");  DataPoint dp=dataPoint.getDataPoint();  int skipVal=-1;  for (int i=0; i < dimSize.length; i++) {    if (realIndexToCatIndex[i] == targetClass) {      if (targetClass == dp.numCategoricalValues())       skipVal=dataPoint.getPair(); else       skipVal=dp.getCategoricalValue(realIndexToCatIndex[i]);    }    if (realIndexToCatIndex[i] == predictingIndex)     cord[i]=dataPoint.getPair(); else     cord[i]=dp.getCategoricalValue(realIndexToCatIndex[i]);  }  return skipVal;}  }
class C{  private void tabMainStateChanged(javax.swing.event.ChangeEvent evt){  requestServiceForSelectedTab();  updateColumnWidths();}  }
class C{  private static void checkOffset(String value,int offset,char expected) throws IndexOutOfBoundsException {  char found=value.charAt(offset);  if (found != expected) {    throw new IndexOutOfBoundsException("Expected '" + expected + "' character but found '"+ found+ "'");  }}  }
class C{  public final void recalculateVisibleLines(){  if (painter == null)   return;  int height=painter.getHeight();  int lineHeight=painter.getFontMetrics().getHeight();  visibleLines=height / lineHeight;  updateScrollBars();}  }
class C{  private void prep(){  while ((subMapValues == null || !subMapValues.hasMoreElements()) && subMaps.hasMoreElements())   subMapValues=((ContextMap)subMaps.nextElement()).values();}  }
class C{  public VNXeCommandResult removeLunsFromLunGroup(String lunGroupId,List<String> luns){  LunGroupModifyParam param=new LunGroupModifyParam();  List<LunAddParam> lunRemoves=new ArrayList<LunAddParam>();  for (  String lunId : luns) {    VNXeBase lun=new VNXeBase(lunId);    LunAddParam lunAdd=new LunAddParam();    lunAdd.setLun(lun);    lunRemoves.add(lunAdd);  }  param.setLunRemove(lunRemoves);  LunGroupRequests req=new LunGroupRequests(_khClient);  return req.modifyLunGroupSync(lunGroupId,param);}  }
class C{  public VelocityWriter(Writer writer){  this(writer,defaultCharBufferSize,true);}  }
class C{  public final boolean hasOnValidationSuccessBeenCalled(){  return onValidationSuccess;}  }
class C{  @Deprecated public static void deleteFilesInDir(final File directory,final FilenameFilter filter,final Logger logger){  FileUtils.deleteFilesInDir(directory,filter,logger,false);}  }
class C{  @Override public void abuseWeakness(int index,SignedElement signedElement,PayloadElement payloadElement) throws InvalidWeaknessException {  boolean before=(index % 2) == 0;  index/=2;  int useMatch=index % matches;  index/=matches;  int abuseIndex=index % postProcess.getNumberOfPossibilities();  List<Element> signedPostPartMatches=XPathWeaknessTools.getSignedPostPart(step,signedElement.getSignedElement());  if (useMatch > signedPostPartMatches.size()) {    throw new InvalidWeaknessException("Could not find index " + useMatch + " in attribute XPath matches.");  }  Element signedPostPart=signedPostPartMatches.get(useMatch);  Element payloadPostPart=XPathWeaknessTools.createPayloadPostPart(signedPostPart,signedElement.getSignedElement(),payloadElement.getPayloadElement());  if (before) {    WeaknessLog.append("Inserted Payload just before " + signedPostPart.getNodeName());    signedPostPart.getParentNode().insertBefore(payloadPostPart,signedPostPart);  } else {    WeaknessLog.append("Inserted Payload after " + signedPostPart.getNodeName());    signedPostPart.getParentNode().appendChild(payloadPostPart);  }  postProcess.abuseWeakness(abuseIndex,signedElement,payloadElement);}  }
class C{  public String checkParamsNonNegative(){  String ret="";  if (param1 < 0) {    ret=ret.concat(pdf.getParam1Name() + " is negative. \n");  }  if (param2 < 0) {    ret=ret.concat(pdf.getParam2Name() + " is negative. \n");  }  if (upperBound < 0) {    ret=ret.concat("Upper boundary is negative. \n");  }  if (lowerBound < 0) {    ret=ret.concat("Lower boundary is negative. \n");  }  return ret;}  }
class C{  protected int engineDoFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws IllegalBlockSizeException, ShortBufferException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public void removeListener(final ITagListener listener){  m_listeners.removeListener(listener);}  }
class C{  public RequestedContentTypeResolverBuilder defaultContentType(MediaType contentType){  this.contentTypeResolver=new FixedContentTypeResolver(contentType);  return this;}  }
class C{  private boolean isInTheCenterOfTheParent(){  return ((SubPanelViewImpl)parentPanel).splitLayoutPanel.getWidgetDirection(this) == CENTER;}  }
class C{  public DtoCustomerOrderDeliveryDetailServiceImpl(final DtoFactory dtoFactory,final GenericService<CustomerOrderDeliveryDet> customerOrderDeliveryDetGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,customerOrderDeliveryDetGenericService,adaptersRepository);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CONCRETE_METHOD_DECLARATION___TYPE_1:    setType_1((String)newValue);  return;case UmplePackage.CONCRETE_METHOD_DECLARATION___METHOD_DECLARATOR_1:getMethodDeclarator_1().clear();getMethodDeclarator_1().addAll((Collection<? extends MethodDeclarator_>)newValue);return;case UmplePackage.CONCRETE_METHOD_DECLARATION___ANONYMOUS_CONCRETE_METHOD_DECLARATION_11:getAnonymous_concreteMethodDeclaration_1_1().clear();getAnonymous_concreteMethodDeclaration_1_1().addAll((Collection<? extends Anonymous_concreteMethodDeclaration_1_>)newValue);return;case UmplePackage.CONCRETE_METHOD_DECLARATION___METHOD_BODY_1:getMethodBody_1().clear();getMethodBody_1().addAll((Collection<? extends MethodBody_>)newValue);return;case UmplePackage.CONCRETE_METHOD_DECLARATION___ANONYMOUS_CONCRETE_METHOD_DECLARATION_21:getAnonymous_concreteMethodDeclaration_2_1().clear();getAnonymous_concreteMethodDeclaration_2_1().addAll((Collection<? extends Anonymous_concreteMethodDeclaration_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void incrementVolume(double delta) throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  double vol=getVolume() + delta;  if (vol > 1) {    vol=1;  } else   if (vol < 0) {    vol=0;  }  setVolume(vol);}  }
class C{  public static boolean validate(String ldapURL,String domain,String userName,String password){  Hashtable<String,String> env=new Hashtable<String,String>();  env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");  env.put(Context.PROVIDER_URL,ldapURL);  env.put(Context.SECURITY_AUTHENTICATION,"simple");  StringBuffer principal=new StringBuffer(userName).append("@").append(domain);  env.put(Context.SECURITY_PRINCIPAL,principal.toString());  env.put(Context.SECURITY_CREDENTIALS,password);  try {    InitialLdapContext ctx=new InitialLdapContext(env,null);    Attributes answer=ctx.getAttributes("");    if (false)     dump(answer);  } catch (  AuthenticationException e) {    log.info("Error: " + principal + " - "+ e.getLocalizedMessage());    return false;  }catch (  Exception e) {    log.log(Level.SEVERE,ldapURL + " - " + principal,e);    return false;  }  log.info("OK: " + principal);  return true;}  }
class C{  public void startExpiringIfNotStarted(){  stateLock.readLock().lock();  try {    if (running) {      return;    }  }  finally {    stateLock.readLock().unlock();  }  stateLock.writeLock().lock();  try {    if (!running) {      running=true;      expirerThread.start();    }  }  finally {    stateLock.writeLock().unlock();  }}  }
class C{  protected ExitImpl(){  super();}  }
class C{  static TerminalBindingCondition forHTTPResponseCode(final int httpRespCode){  return CODE_TO_INSTANCE.get(Integer.valueOf(httpRespCode));}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public RTextArea(int textMode){  init(textMode);}  }
class C{  public void dropTables(Database database,StringBuilder ddl){  for (int idx=database.getTableCount() - 1; idx >= 0; idx--) {    Table table=database.getTable(idx);    if ((table.getName() != null) && (table.getName().length() > 0)) {      dropExternalForeignKeys(table,ddl);    }  }  for (int idx=database.getTableCount() - 1; idx >= 0; idx--) {    Table table=database.getTable(idx);    if ((table.getName() != null) && (table.getName().length() > 0)) {      writeTableComment(table,ddl);      dropTable(table,ddl,false,false);    }  }}  }
class C{  private static StorageOSLdapAuthenticationHandler createLdapAuthenticationHandler(final AuthnProvider authenticationConfiguration,LdapServerList servers){  StorageOSLdapAuthenticationHandler authHandler=new StorageOSLdapAuthenticationHandler();  if (null == authenticationConfiguration.getSearchFilter()) {    throw APIException.badRequests.failedToCreateAuthenticationHandlerSearchFilterCannotBeNull(authenticationConfiguration.getId());  } else {    authHandler.setFilter(authenticationConfiguration.getSearchFilter());  }  if (null == authenticationConfiguration.getSearchBase()) {    throw APIException.badRequests.failedToCreateAuthenticationHandlerSearchBaseCannotBeNull(authenticationConfiguration.getId());  } else {    authHandler.setSearchBase(authenticationConfiguration.getSearchBase());  }  if (null == authenticationConfiguration.getDomains()) {    throw APIException.badRequests.failedToCreateAuthenticationHandlerDomainsCannotBeNull(authenticationConfiguration.getId());  } else {    authHandler.setDomains(authenticationConfiguration.getDomains());  }  authHandler.setLdapServers(servers);  return authHandler;}  }
class C{  public void slerp(Quaternion input,Quaternion output,float t){  Quaternion bufferQuat=null;  float cosHalftheta=this.dotProduct(input);  if (cosHalftheta < 0) {    bufferQuat=new Quaternion();    cosHalftheta=-cosHalftheta;    bufferQuat.points[0]=(-input.points[0]);    bufferQuat.points[1]=(-input.points[1]);    bufferQuat.points[2]=(-input.points[2]);    bufferQuat.points[3]=(-input.points[3]);  } else {    bufferQuat=input;  }  if (Math.abs(cosHalftheta) >= 1.0) {    output.points[0]=(this.points[0]);    output.points[1]=(this.points[1]);    output.points[2]=(this.points[2]);    output.points[3]=(this.points[3]);  } else {    double sinHalfTheta=Math.sqrt(1.0 - cosHalftheta * cosHalftheta);    double halfTheta=Math.acos(cosHalftheta);    double ratioA=Math.sin((1 - t) * halfTheta) / sinHalfTheta;    double ratioB=Math.sin(t * halfTheta) / sinHalfTheta;    output.points[3]=((float)(points[3] * ratioA + bufferQuat.points[3] * ratioB));    output.points[0]=((float)(this.points[0] * ratioA + bufferQuat.points[0] * ratioB));    output.points[1]=((float)(this.points[1] * ratioA + bufferQuat.points[1] * ratioB));    output.points[2]=((float)(this.points[2] * ratioA + bufferQuat.points[2] * ratioB));  }}  }
class C{  public void valueChanged(TreeSelectionEvent e){  DefaultMutableTreeNode node=(DefaultMutableTreeNode)tree.getLastSelectedPathComponent();  if (node == null) {    return;  }  SdfMacroEditor nodeInfo=(SdfMacroEditor)node.getUserObject();  instruction.setText(nodeInfo.oneInstructionString());  explanation.setText(exp.getString(nodeInfo.getMacro().name()));  if (lastEditor != null) {    lastEditor.setVisible(false);  }  lastEditor=nodeInfo;  nodeInfo.update();  nodeInfo.setVisible(true);}  }
class C{  public void testGetCheckSum(){  CoreIdRfidProtocol instance=new CoreIdRfidProtocol();  assertEquals("F6",instance.getCheckSum(msgStandalone));  instance=new CoreIdRfidProtocol('A','H',1);  assertEquals("F6",instance.getCheckSum(msgConcentrator));}  }
class C{  public static Object generateExample(Property property,MarkupDocBuilder markupDocBuilder){switch (property.getType()) {case "integer":    return 0;case "number":  return 0.0;case "boolean":return true;case "string":return "string";case "ref":if (property instanceof RefProperty) {return markupDocBuilder.copy(false).crossReference(((RefProperty)property).getSimpleRef()).toString();}default :return property.getType();}}  }
class C{  public boolean hasUniformPartitioner(){  return uniformPartitioner != null;}  }
class C{  public CTableSearcher(final Window frame,final String windowTitle,final JTable table,final int startRow){  Preconditions.checkNotNull(frame,"Internal Error: Parent window can't be null");  Preconditions.checkNotNull(windowTitle,"Internal Error: Window title can't be null");  Preconditions.checkNotNull(table,"Internal Error: Table can't be null");  m_Table=table;  m_Frame=frame;  m_title=windowTitle;  m_StartRow=startRow;}  }
class C{  private static boolean shouldSwapControlDesending(final FormObject arg1,final FormObject arg2){  if (arg1 == null) {    return arg2 != null;  } else {    if (arg2 == null) {      return false;    } else {      final Rectangle first=arg1.getBoundingRectangle();      final Rectangle second=arg2.getBoundingRectangle();      return (first.width * first.height) < (second.width * second.height);    }  }}  }
class C{  public VirtualFile resolve(String relativeStr){  VirtualFile f=getVirtualFile();  return f == null ? null : f.resolve(relativeStr);}  }
class C{  public EigenvectorCentrality(Hypergraph<V,E> graph){  super(graph,0);  acceptDisconnectedGraph(false);}  }
class C{  public Statement copy(){  Statement stmt=new Statement();  stmt.statement.append(statement);  return stmt;}  }
class C{  public static boolean checkPoolMaximumResourcesApproached(StoragePool pool,DbClient dbClient,Integer resourceCount){  if (pool.getIsResourceLimitSet()) {    Integer poolResources=getNumResources(pool,dbClient);    if (pool.getMaxResources() < (poolResources + resourceCount)) {      _log.info("Ignoring Storage pool {} since it's approaching Resource limit: {}. ",pool.getNativeGuid(),pool.getMaxResources());      return true;    }  }  URI systemId=pool.getStorageDevice();  StorageSystem system=dbClient.queryObject(StorageSystem.class,systemId);  if (system.getIsResourceLimitSet()) {    Integer systemResources=getNumResources(system,dbClient);    if (system.getMaxResources() < (systemResources + resourceCount)) {      _log.info("Ignoring Storage system {} pools since it's approaching Resource limit: {}. ",system.getNativeGuid(),system.getMaxResources());      return true;    }  }  return false;}  }
class C{  ResourceThreadQueue(HTMLComponent htmlC){  this.htmlC=htmlC;}  }
class C{  protected void readContents(){  boolean done=false;  while (!(done || err())) {    int code=read();switch (code) {case 0x2C:      readImage();    break;case 0x21:  code=read();switch (code) {case 0xf9:  readGraphicControlExt();break;case 0xff:readBlock();String app="";for (int i=0; i < 11; i++) {app+=(char)block[i];}if (app.equals("NETSCAPE2.0")) {readNetscapeExt();} else skip();break;default :skip();}break;case 0x3b:done=true;break;case 0x00:break;default :status=STATUS_FORMAT_ERROR;}}}  }
class C{  public boolean isRequiresMapkey(){  return isRequiresMapkey;}  }
class C{  public IvParameterSpec(byte[] iv,int offset,int byteCount){  if ((iv == null) || (iv.length - offset < byteCount)) {    throw new IllegalArgumentException();  }  Arrays.checkOffsetAndCount(iv.length,offset,byteCount);  this.iv=new byte[byteCount];  System.arraycopy(iv,offset,this.iv,0,byteCount);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private void resolutionFinished(final ConflictResolution resolution,final ConflictResolutionStatus status){  if (status == ConflictResolutionStatus.SUCCESS || status == ConflictResolutionStatus.SUCCEEDED_WITH_CONFLICTS) {    resolveCount++;  }  ConflictHelpers.showConflictError(getShell(),resolution,status);  refresh();}  }
class C{  public Organization(int id,String name){  this.id=id;  this.name=name;}  }
class C{  public Automaton<LR1Item,LR1State> createAutomaton(LRGenerator<LR1Item,LR1State> generator,GrammarInfo grammarInfo) throws GeneratorException {  this.generator=generator;  this.grammarInfo=grammarInfo;  initCreation();  HashMap<LR0State,LR1State> newDFAStates=new HashMap<LR0State,LR1State>();  HashMap<Integer,LR1State> numberedStates=new HashMap<Integer,LR1State>();  HashMap<LR1State,Integer> statesNumbered=new HashMap<LR1State,Integer>();  HashSet<NumberedEdge> numberedEdges=new HashSet<NumberedEdge>();  LinkedList<Integer> newQueue=new LinkedList<Integer>();  LR1State state=queue.remove(0);  numberedStates.put(0,state);  statesNumbered.put(state,0);  newQueue.add(0);  HashSet<Integer> queuedStateNumbers=new HashSet<Integer>();  queuedStateNumbers.add(0);  while (!newQueue.isEmpty()) {    Integer stateNumber=newQueue.removeFirst();    queuedStateNumbers.remove(stateNumber);    stateKernel=numberedStates.get(stateNumber);    printDebugMessages();    state=stateKernel.closure(grammarInfo);    Set<Symbol> shiftedSymbols=new HashSet<Symbol>();    for (    LR1Item item : state.getItems()) {      if (item.isShiftable()) {        Symbol symbol=item.getNextSymbol();        if (symbol == EndOfInputStream) {          numberedEdges.add(new NumberedEdge(stateNumber,null,symbol,item));        } else         if (!shiftedSymbols.contains(symbol)) {          shiftedSymbols.add(symbol);          LR1State shiftedState=(LR1State)state.goTo(symbol);          LR0State shiftedStateKernel=shiftedState.getLR0Kernel();          Integer shiftedStateNumber;          LR1State equalStateLR0=newDFAStates.get(shiftedStateKernel);          boolean foundEqualState=(equalStateLR0 != null);          boolean addShiftedStateToQueue=false;          if (foundEqualState) {            LR1State mergedState=equalStateLR0.merge(shiftedState);            shiftedStateNumber=statesNumbered.get(equalStateLR0);            if (!mergedState.equals(equalStateLR0)) {              statesNumbered.remove(equalStateLR0);              numberedStates.put(shiftedStateNumber,mergedState);              statesNumbered.put(mergedState,shiftedStateNumber);              newDFAStates.put(mergedState.getLR0Kernel(),mergedState);              addShiftedStateToQueue=true;            }          } else {            LR1State newState=shiftedState;            shiftedStateNumber=numberedStates.size();            newDFAStates.put(newState.getLR0Kernel(),newState);            numberedStates.put(shiftedStateNumber,newState);            statesNumbered.put(newState,shiftedStateNumber);            addShiftedStateToQueue=true;          }          numberedEdges.add(new NumberedEdge(stateNumber,shiftedStateNumber,symbol,item));          if (addShiftedStateToQueue && !queuedStateNumbers.contains(shiftedStateNumber)) {            newQueue.add(shiftedStateNumber);            queuedStateNumbers.add(shiftedStateNumber);          }        }      }    }  }  for (  LR1State s : numberedStates.values()) {    dfaStates.add(s);  }  for (  NumberedEdge e : numberedEdges) {    dfaEdges.add(new Edge(numberedStates.get(e.srcState),e.symbol,numberedStates.get(e.destState),e.srcItem.getLR0Kernel()));  }  printDebugResult();  return ret;}  }
class C{  public final static boolean pickupImages(Activity activity,int requestCode){  if (activity == null) {    return false;  }  Intent intent=new Intent(Intent.ACTION_PICK);  intent.setType("image/*");  intent.setAction(Intent.ACTION_GET_CONTENT);  boolean available=isIntentAvailable(activity,intent);  if (available) {    activity.startActivityForResult(intent,requestCode);  }  return available;}  }
class C{  public SeparatorLineFigure(){}  }
class C{  public void validateUploadSingleInitiationResponse(String expectedSourceNamespaceCode,String expectedSourceBusinessObjectDefinitionName,String expectedSourceBusinessObjectFormatUsage,String expectedSourceBusinessObjectFormatFileType,Integer expectedSourceBusinessObjectFormatVersion,String expectedTargetNamespaceCode,String expectedTargetBusinessObjectDefinitionName,String expectedTargetBusinessObjectFormatUsage,String expectedTargetBusinessObjectFormatFileType,Integer expectedTargetBusinessObjectFormatVersion,List<Attribute> expectedAttributes,String expectedFileName,Long expectedFileSizeBytes,String expectedTargetStorageName,UploadSingleInitiationResponse actualUploadSingleInitiationResponse){  if (expectedTargetStorageName == null) {    expectedTargetStorageName=configurationHelper.getProperty(ConfigurationValue.S3_EXTERNAL_STORAGE_NAME_DEFAULT);  }  assertNotNull(actualUploadSingleInitiationResponse);  businessObjectDataServiceTestHelper.validateBusinessObjectData(expectedSourceNamespaceCode,expectedSourceBusinessObjectDefinitionName,expectedSourceBusinessObjectFormatUsage,expectedSourceBusinessObjectFormatFileType,expectedSourceBusinessObjectFormatVersion,BusinessObjectDataStatusEntity.UPLOADING,expectedAttributes,StorageEntity.MANAGED_LOADING_DOCK_STORAGE,expectedFileName,expectedFileSizeBytes,actualUploadSingleInitiationResponse.getSourceBusinessObjectData());  businessObjectDataServiceTestHelper.validateBusinessObjectData(expectedTargetNamespaceCode,expectedTargetBusinessObjectDefinitionName,expectedTargetBusinessObjectFormatUsage,expectedTargetBusinessObjectFormatFileType,expectedTargetBusinessObjectFormatVersion,BusinessObjectDataStatusEntity.UPLOADING,expectedAttributes,expectedTargetStorageName,expectedFileName,expectedFileSizeBytes,actualUploadSingleInitiationResponse.getTargetBusinessObjectData());  assertNotNull(actualUploadSingleInitiationResponse.getFile());  assertEquals(expectedFileName,actualUploadSingleInitiationResponse.getFile().getFileName());  assertEquals(expectedFileSizeBytes,actualUploadSingleInitiationResponse.getFile().getFileSizeBytes());  assertEquals(actualUploadSingleInitiationResponse.getSourceBusinessObjectData().getPartitionValue(),actualUploadSingleInitiationResponse.getUuid());  assertEquals(actualUploadSingleInitiationResponse.getTargetBusinessObjectData().getPartitionValue(),actualUploadSingleInitiationResponse.getUuid());  assertEquals(MockStsOperationsImpl.MOCK_AWS_ASSUMED_ROLE_ACCESS_KEY,actualUploadSingleInitiationResponse.getAwsAccessKey());  assertEquals(MockStsOperationsImpl.MOCK_AWS_ASSUMED_ROLE_SECRET_KEY,actualUploadSingleInitiationResponse.getAwsSecretKey());  assertEquals(MockStsOperationsImpl.MOCK_AWS_ASSUMED_ROLE_SESSION_TOKEN,actualUploadSingleInitiationResponse.getAwsSessionToken());  assertEquals(expectedTargetStorageName,actualUploadSingleInitiationResponse.getTargetStorageName());  assertEquals(storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KMS_KEY_ID),storageDaoHelper.getStorageEntity(expectedTargetStorageName),true),actualUploadSingleInitiationResponse.getAwsKmsKeyId());}  }
class C{  void addLineFunctionInfo(int offset,int firstLine,int lastLine,String funcName){  int line;  if (funcName == null || funcName.length() == 0) {    funcName="<anonymous$" + (++m_anonymousFunctionCounter) + ">";  } else {    int colon=funcName.lastIndexOf(':');    int slash=funcName.lastIndexOf('/');    if (colon > -1 || slash > -1) {      int greater=Math.max(colon,slash);      funcName=funcName.substring(greater + 1);    } else {      int dot=funcName.lastIndexOf('.');      if (dot > -1) {        String pkg=funcName.substring(0,dot);        funcName=funcName.substring(dot + 1);        setPackageName(pkg);      }    }  }  m_line2Offset.ensureCapacity(firstLine + 1);  while (firstLine >= m_line2Offset.size())   m_line2Offset.add(null);  m_line2Offset.set(firstLine,new Integer(offset));  m_line2Func.ensureCapacity(lastLine + 1);  while (lastLine >= m_line2Func.size())   m_line2Func.add(null);  for (line=firstLine; line <= lastLine; ++line) {    Object funcs=m_line2Func.get(line);    if (funcs == null) {      m_line2Func.set(line,funcName);    } else     if (funcs instanceof String) {      String oldFunc=(String)funcs;      m_line2Func.set(line,new String[]{oldFunc,funcName});    } else     if (funcs instanceof String[]) {      String[] oldFuncs=(String[])funcs;      String[] newFuncs=new String[oldFuncs.length + 1];      System.arraycopy(oldFuncs,0,newFuncs,0,oldFuncs.length);      newFuncs[newFuncs.length - 1]=funcName;      m_line2Func.set(line,newFuncs);    }  }  if (m_func2FirstLine.get(funcName) == null) {    m_func2FirstLine.put(funcName,new Integer(firstLine));    m_func2LastLine.put(funcName,new Integer(lastLine));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public TFloatLongHashMap(int initialCapacity,TFloatHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public ObjectFactory(){}  }
class C{  public Set<Resource> allValuesFrom(){  Set<Resource> targets=new HashSet<>();  for (  OwlClass c : avfClasses) {    targets.add(c.getURI());  }  return targets;}  }
class C{  public static boolean isWindows7(){  return osName.indexOf("Windows") > -1 && osVersion.equals("6.1");}  }
class C{  public CompanyPrivilegeExample(CompanyPrivilegeObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getUserId() != null) {    criteria.andUserIdEqualTo(sample.getUserId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getIsAdmin() != null) {    criteria.andIsAdminEqualTo(sample.getIsAdmin());  }  if (sample.getCanCreateProject() != null) {    criteria.andCanCreateProjectEqualTo(sample.getCanCreateProject());  }}  }
class C{  public boolean isWarnEnabled(){  return isLoggable(Log.WARN);}  }
class C{  private void approve(){  if (m_chooser.getCurrentDirectory() == null) {    return;  }  final ConfigManager configFile=ConfigManager.instance();  if (InstallationState.Installed.equals(CBinExportInstallationChecker.getState(m_chooser.getCurrentDirectory())) && configFile.getGeneralSettings().getIdaDirectory().equals(m_chooser.getCurrentDirectory())) {    CMessageBox.showInformation(this,"Settings unchanged.");    dispose();    return;  }  final InstallationState cppState=CBinExportInstallationChecker.getState(m_chooser.getSelectedFile());  if (cppState != InstallationState.Installed) {    CMessageBox.showError(this,"Please install the BinExport IDA plugin.");    return;  }  m_selectedFile=m_chooser.getSelectedFile();  dispose();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:36.253 -0500",hash_original_method="76B4A35CDD087589FE1D86D8EB63F14C",hash_generated_method="0E8AE9B05A74B6F7DE6780CF3FACE534") public boolean verify() throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  return verify(BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  private void resequenceIds(){  List<ScheduleItem> scheduleItems=getItemsBySequenceList();  for (int i=0; i < scheduleItems.size(); i++) {    scheduleItems.get(i).setSequenceId(i + 1);    _sequenceNum=i;  }}  }
class C{  public void removeAllButtonsFromToolBar(){  buttonPanel.removeAll();}  }
class C{  public XOR96(long seed){  super(seed);}  }
class C{  @Override public boolean isResetted(){  return (x == 0 && y == 0 && width == 0 && height == 0);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success || newRecord)   return success;  if (is_ValueChanged("Description") || is_ValueChanged("POReference")) {    String sql="UPDATE C_Invoice i" + " SET (Description,POReference)=" + "(SELECT Description,POReference "+ "FROM C_Order o WHERE i.C_Order_ID=o.C_Order_ID) "+ "WHERE DocStatus NOT IN ('RE','CL') AND C_Order_ID="+ getC_Order_ID();    int no=DB.executeUpdateEx(sql,get_TrxName());    log.fine("Description -> #" + no);  }  if (is_ValueChanged("PaymentRule") || is_ValueChanged("C_PaymentTerm_ID") || is_ValueChanged("C_Payment_ID")|| is_ValueChanged("C_CashLine_ID")) {    String sql="UPDATE C_Invoice i " + "SET (PaymentRule,C_PaymentTerm_ID,C_Payment_ID,C_CashLine_ID)=" + "(SELECT PaymentRule,C_PaymentTerm_ID,C_Payment_ID,C_CashLine_ID "+ "FROM C_Order o WHERE i.C_Order_ID=o.C_Order_ID)"+ "WHERE DocStatus NOT IN ('RE','CL') AND C_Order_ID="+ getC_Order_ID();    int no=DB.executeUpdate(sql,get_TrxName());    log.fine("Payment -> #" + no);  }  if (is_ValueChanged("DateAcct")) {    String sql="UPDATE C_Invoice i " + "SET (DateAcct)=" + "(SELECT DateAcct "+ "FROM C_Order o WHERE i.C_Order_ID=o.C_Order_ID)"+ "WHERE DocStatus NOT IN ('CO','RE','CL') AND Processed='N' AND C_Order_ID="+ getC_Order_ID();    int no=DB.executeUpdate(sql,get_TrxName());    log.fine("DateAcct -> #" + no);  }  if (is_ValueChanged("AD_Org_ID") || is_ValueChanged(MOrder.COLUMNNAME_C_BPartner_ID) || is_ValueChanged(MOrder.COLUMNNAME_C_BPartner_Location_ID)|| is_ValueChanged(MOrder.COLUMNNAME_DateOrdered)|| is_ValueChanged(MOrder.COLUMNNAME_DatePromised)|| is_ValueChanged(MOrder.COLUMNNAME_M_Warehouse_ID)|| is_ValueChanged(MOrder.COLUMNNAME_M_Shipper_ID)|| is_ValueChanged(MOrder.COLUMNNAME_C_Currency_ID)) {    MOrderLine[] lines=getLines();    for (    MOrderLine line : lines) {      if (is_ValueChanged("AD_Org_ID"))       line.setAD_Org_ID(getAD_Org_ID());      if (is_ValueChanged(MOrder.COLUMNNAME_C_BPartner_ID))       line.setC_BPartner_ID(getC_BPartner_ID());      if (is_ValueChanged(MOrder.COLUMNNAME_C_BPartner_Location_ID))       line.setC_BPartner_Location_ID(getC_BPartner_Location_ID());      if (is_ValueChanged(MOrder.COLUMNNAME_DateOrdered))       line.setDateOrdered(getDateOrdered());      if (is_ValueChanged(MOrder.COLUMNNAME_DatePromised))       line.setDatePromised(getDatePromised());      if (is_ValueChanged(MOrder.COLUMNNAME_M_Warehouse_ID))       line.setM_Warehouse_ID(getM_Warehouse_ID());      if (is_ValueChanged(MOrder.COLUMNNAME_M_Shipper_ID))       line.setM_Shipper_ID(getM_Shipper_ID());      if (is_ValueChanged(MOrder.COLUMNNAME_C_Currency_ID))       line.setC_Currency_ID(getC_Currency_ID());      line.saveEx();    }  }  return true;}  }
class C{  public boolean isMixedIn(TClassifier classifier,TMember member){  if (member == null || !(member.eContainer() instanceof TInterface)) {    return false;  }  TMember actualMember=findMember(classifier,member.getName(),member.isWriteable(),member.isStatic(),true,true);  return actualMember == member;}  }
class C{  public static void isLabelled(ExampleSet es) throws OperatorException {  if (es.getAttributes().getLabel() == null) {    throw new UserError(null,105);  }}  }
class C{  public static void main(String[] args) throws IgniteException {  System.out.println(">>> Start demo node...");  Ignition.start("examples/config/example-ignite.xml");}  }
class C{  public Simulation(Camera camera,List<SandboxRay> rays,World world){  this.camera=camera;  this.rays=rays;  this.world=world;  this.contactCounter=new ContactCounter();  this.world.addListener(this.contactCounter);}  }
class C{  public void removeGameKeyListener(int keyCode,ActionListener listener){  if (gameKeyListeners == null) {    return;  }  removeKeyListener(keyCode,listener,gameKeyListeners);}  }
class C{  private StringUtils(){}  }
class C{  public MainLayoutPanel(Layout initialLayout,boolean revealOption,Window parent){  this.revealOption=revealOption;  this.parent=parent;  layoutParameterReveal=new DropDownTriangle(UpDirection.LEFT,false,"Settings","Settings",parent);  layoutCb.setSelectedItem(initialLayout.getDescription());  layoutPanel=panelMap.get(initialLayout.getDescription());  layoutPanel.setNeuronLayout(initialLayout);  initializeLayout();  addListeners();}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  public Geocoder(Context context,Locale locale){  if (locale == null) {    throw new NullPointerException("locale == null");  }  mParams=new GeocoderParams(context,locale);  IBinder b=ServiceManager.getService(Context.LOCATION_SERVICE);  mService=ILocationManager.Stub.asInterface(b);}  }
class C{  public void freeObject(int id){  if (cacheId == id) {    cacheId=-1;    cache=null;  }  map.remove(id);}  }
class C{  public EclipseProjectReader(File workspace){  this.workspace=workspace;  this.cache=new HashMap<File,IEclipseProject>();}  }
class C{  public UIComponent createComponent(){  UIComponent component=null;  try {    Class clazz=Util.loadClass(className,this);    component=((UIComponent)clazz.newInstance());  } catch (  Exception e) {    Object params[]={className};    throw new FacesException(MessageUtils.getExceptionMessageString(MessageUtils.MISSING_CLASS_ERROR_MESSAGE_ID,params));  }  assert (component != null);  component.setId(id);  return component;}  }
class C{  public void removeSessionListener(SessionListener l){  getSessionSupport().removeSessionListener(l);}  }
class C{  public EncodedStringValue[] split(String pattern){  String[] temp=getString().split(pattern);  EncodedStringValue[] ret=new EncodedStringValue[temp.length];  for (int i=0; i < ret.length; ++i) {    try {      ret[i]=new EncodedStringValue(mCharacterSet,temp[i].getBytes());    } catch (    NullPointerException _) {      return null;    }  }  return ret;}  }
class C{  public static String composePamData(OTPUserRecord otp){  if (otp == null) {    return "";  }  String secret=otp.getSecret();  OTPUserRecord.Type type=otp.getType();  List<OTPUserRecord.RecoveryCode> recoveryCodes=otp.getRecoveryCodes();  String pamData=secret + "\n";  if (OTPUserRecord.Type.HOTP.equals(type)) {    pamData+=String.format("\" HOTP_COUNTER %d\n",otp.getAttemptCount());  } else {    pamData+="\" TOTP_AUTH\n";  }  if (recoveryCodes != null && recoveryCodes.size() > 0) {    for (    OTPUserRecord.RecoveryCode code : recoveryCodes) {      if (!code.isUsed()) {        pamData+=code.getHashCode() + "\n";      }    }  }  return pamData;}  }
class C{  static void testToFile(Path dir) throws IOException {  File d=dir.toFile();  assertTrue(d.toString().equals(dir.toString()));  assertTrue(d.toPath().equals(dir));}  }
class C{  @Override public synchronized List findServersForQueue(Set excludedServers,int numServers,ClientProxyMembershipID proxyId,boolean findDurableQueue){  if (PoolImpl.TEST_DURABLE_IS_NET_DOWN) {    return new ArrayList();  }  if (numServers == -1) {    numServers=Integer.MAX_VALUE;  }  if (findDurableQueue && proxyId.isDurable()) {    return findDurableQueues(excludedServers,numServers);  } else {    return pickQueueServers(excludedServers,numServers);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NODE_ID:  return isSetNodeId();case AUTH_SCHEME:return isSetAuthScheme();case AUTH_CHALLENGE_RESPONSE:return isSetAuthChallengeResponse();}throw new IllegalStateException();}  }
class C{  public static void saveChangedForm(final GUIFactory currentGUI,final PdfDecoderInt decode_pdf,final Values commonValues){  final org.jpedal.objects.acroforms.AcroRenderer formRenderer=decode_pdf.getFormRenderer();  if (formRenderer == null) {    return;  }  final Object[] names=formRenderer.getFormComponents(null,ReturnValues.FORM_NAMES,-1);  if (names == null) {    currentGUI.showMessageDialog(Messages.getMessage("PdfViewer.NoFields"));  } else {    File file;    String fileToSave="";    boolean finished=false;    while (!finished) {      final JFileChooser chooser=new JFileChooser(commonValues.getInputDir());      chooser.setSelectedFile(new File(commonValues.getInputDir() + '/' + commonValues.getSelectedFile()));      chooser.addChoosableFileFilter(new FileFilterer(new String[]{"pdf"},"Pdf (*.pdf)"));      chooser.addChoosableFileFilter(new FileFilterer(new String[]{"fdf"},"fdf (*.fdf)"));      chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);      final int approved=chooser.showSaveDialog(null);      if (approved == JFileChooser.APPROVE_OPTION) {        file=chooser.getSelectedFile();        fileToSave=file.getAbsolutePath();        if (!fileToSave.endsWith(".pdf")) {          fileToSave+=".pdf";          file=new File(fileToSave);        }        if (fileToSave.equals(commonValues.getSelectedFile())) {          currentGUI.showMessageDialog(Messages.getMessage("PdfViewerMessage.SaveError"));          continue;        }        if (file.exists()) {          final int n=currentGUI.showConfirmDialog(fileToSave + '\n' + Messages.getMessage("PdfViewerMessage.FileAlreadyExists")+ ".\n"+ Messages.getMessage("PdfViewerMessage.ConfirmResave"),Messages.getMessage("PdfViewerMessage.Resave"),JOptionPane.YES_NO_OPTION);          if (n == 1) {            continue;          }        }        finished=true;      } else {        return;      }    }    if (currentGUI.getAnnotationPanel().annotationAdded()) {      currentGUI.getAnnotationPanel().saveAnnotations(commonValues.getSelectedFile(),fileToSave);    }    if (ExternalHandlers.isITextPresent()) {      ItextFunctions.saveFormsData(fileToSave);    }    commonValues.setFormsChanged(false);    currentGUI.setViewerTitle(null);  }}  }
class C{  public Bundler putCharArray(String key,char[] value){  bundle.putCharArray(key,value);  return this;}  }
class C{  public boolean isPaintable(){  return false;}  }
class C{  public BST(){}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.461 -0500",hash_original_method="CB190561C8A3BAECAF3D6E789BEEE6E0",hash_generated_method="E931700C85A5C713A2383C3DAB6619FE") public Set<Map.Entry<String,Object>> valueSet(){  return mValues.entrySet();}  }
class C{  public void clear(){  if (!this.buffer.isDone())   return;  ByteBuffer buffer=Futures.getUnchecked(this.buffer);synchronized (lock) {    logger.info("Removing all the items");    for (int idx=0; idx < buffer.limit(); idx++) {      buffer.put(idx,(byte)0);    }  }}  }
class C{  public static _SeverityType fromString(final String value) throws SOAPSerializationException {  return (_SeverityType)Enumeration.fromString(value,_SeverityType.VALUES_TO_INSTANCES);}  }
class C{  @Deprecated public void addFolder(Person owner,String folderName){  String scheme=FOLDERS_NAMESPACE + "/" + owner.getEmail();  Category folderCategory=new Category(scheme,folderName,folderName);  this.getCategories().add(folderCategory);}  }
class C{  private void validateDueDateOnWorkingDay(final ClientCharge clientCharge,final DateTimeFormatter fmt){  validateActivityDateFallOnAWorkingDay(clientCharge.getDueLocalDate(),clientCharge.getOfficeId(),ClientApiConstants.dueAsOfDateParamName,"charge.due.date.is.on.holiday","charge.due.date.is.a.non.workingday",fmt);}  }
class C{  public boolean hasFluid(){  return fluid != null;}  }
class C{  protected SVGOMTextPositioningElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  @Override public void finalizeAggregation() throws Exception {  if (m_numModels == Integer.MIN_VALUE) {    throw new Exception("Aggregation has already been finalized");  }  if (m_numModels == 0) {    throw new Exception("Unable to finalize aggregation - " + "haven't seen any models to aggregate");  }  for (int i=0; i < m_Par.length; i++) {    for (int j=0; j < m_Par[i].length; j++) {      m_Par[i][j]/=(m_numModels + 1);    }  }  m_numModels=Integer.MIN_VALUE;}  }
class C{  public static void saveStringValue(String name,String value,boolean isDefault){  if (isDefault) {    preferenceStore.setDefault(name,value);  } else {    preferenceStore.setValue(name,value);  }  try {    preferenceStore.save();  } catch (  IOException e) {    InspectIT.getDefault().createErrorDialog("Error occurred trying to save setting with name '" + name + "' to preference store.",e,-1);  }}  }
class C{  private void detachHorizontalOffScreenChildren(boolean toLeft){  int numChildren=getChildCount();  int firstPosition=mFirstPosition;  int start=0;  int count=0;  if (toLeft) {    final int galleryLeft=getPaddingLeft();    for (int i=0; i < numChildren; i++) {      int n=i;      final View child=getChildAt(n);      if (child.getRight() >= galleryLeft) {        break;      } else {        count++;        mRecycler.put(firstPosition + n,child);      }    }  } else {    final int galleryRight=getWidth() - getPaddingRight();    for (int i=numChildren - 1; i >= 0; i--) {      int n=i;      final View child=getChildAt(n);      if (child.getLeft() <= galleryRight) {        break;      } else {        start=n;        count++;        mRecycler.put(firstPosition + n,child);      }    }  }  detachViewsFromParent(start,count);  if (toLeft) {    mFirstPosition+=count;    if (isScrollCycle()) {      mFirstPosition%=mItemCount;    }  }}  }
class C{  public Builder addInCollectionItemClause(String collectionFieldName,Collection<String> itemNames){  String collectionItemFieldName=QuerySpecification.buildCollectionItemName(collectionFieldName);  return addInClause(collectionItemFieldName,itemNames);}  }
class C{  public static RecoverableResource removeResource(String name){  RecoverableResource ret=null;  if (name != null) {    ret=(RecoverableResource)resources_.remove(name);    if (ret != null)     resourceList_.remove(ret);  }  return ret;}  }
class C{  private void testCache() throws Exception {  deleteDb("fileLockSerialized");  String urlShared="jdbc:h2:" + getBaseDir() + "/fileLockSerialized;FILE_LOCK=SERIALIZED";  Connection connShared1=getConnection(urlShared);  Statement statement1=connShared1.createStatement();  Connection connShared2=getConnection(urlShared);  Statement statement2=connShared2.createStatement();  statement1.execute("create table test1(id int)");  statement1.execute("insert into test1 values(1)");  ResultSet rs=statement1.executeQuery("select id from test1");  rs.close();  rs=statement2.executeQuery("select id from test1");  rs.close();  statement1.execute("update test1 set id=2");  Thread.sleep(500);  rs=statement2.executeQuery("select id from test1");  assertTrue(rs.next());  assertEquals(2,rs.getInt(1));  rs.close();  connShared1.close();  connShared2.close();  deleteDb("fileLockSerialized");}  }
class C{  public static boolean isOpenStackBackend(BlockObject fcObject,DbClient dbClient){  String systemType=getBackendStorageSystemType(fcObject,dbClient);  if (DiscoveredDataObject.Type.openstack.name().equals(systemType)) {    return true;  }  return false;}  }
class C{  public static FileTransferHttpInfoDocument parseFileTransferHttpDocument(byte[] xml,RcsSettings rcsSettings) throws PayloadException {  try {    FileTransferXmlParser ftHttpParser=new FileTransferXmlParser(xml,rcsSettings);    ftHttpParser.parse();    return ftHttpParser.getFileTransferInfo();  } catch (  ParserConfigurationException|ParseFailureException|SAXException e) {    throw new PayloadException("Can't parse FT HTTP document!",e);  }}  }
class C{  public boolean save(IMiniTable miniTable,String trxName){  int M_Locator_ID=defaultLocator_ID;  if (M_Locator_ID == 0) {    return false;  }  int M_InOut_ID=((Integer)getGridTab().getValue("M_InOut_ID")).intValue();  MInOut inout=new MInOut(Env.getCtx(),M_InOut_ID,trxName);  log.config(inout + ", C_Locator_ID=" + M_Locator_ID);  for (int i=0; i < miniTable.getRowCount(); i++) {    if (((Boolean)miniTable.getValueAt(i,0)).booleanValue()) {      BigDecimal QtyEntered=(BigDecimal)miniTable.getValueAt(i,1);      KeyNamePair pp=(KeyNamePair)miniTable.getValueAt(i,2);      int C_UOM_ID=pp.getKey();      pp=(KeyNamePair)miniTable.getValueAt(i,3);      M_Locator_ID=pp != null && pp.getKey() != 0 ? pp.getKey() : defaultLocator_ID;      pp=(KeyNamePair)miniTable.getValueAt(i,4);      int M_Product_ID=pp.getKey();      int C_OrderLine_ID=0;      pp=(KeyNamePair)miniTable.getValueAt(i,6);      if (pp != null)       C_OrderLine_ID=pp.getKey();      int M_RMALine_ID=0;      pp=(KeyNamePair)miniTable.getValueAt(i,7);      if (pp != null)       M_RMALine_ID=pp.getKey();      int C_InvoiceLine_ID=0;      MInvoiceLine il=null;      pp=(KeyNamePair)miniTable.getValueAt(i,8);      if (pp != null)       C_InvoiceLine_ID=pp.getKey();      if (C_InvoiceLine_ID != 0)       il=new MInvoiceLine(Env.getCtx(),C_InvoiceLine_ID,trxName);      int precision=2;      if (M_Product_ID != 0) {        MProduct product=MProduct.get(Env.getCtx(),M_Product_ID);        precision=product.getUOMPrecision();      }      QtyEntered=QtyEntered.setScale(precision,BigDecimal.ROUND_HALF_DOWN);      log.fine("Line QtyEntered=" + QtyEntered + ", Product="+ M_Product_ID+ ", OrderLine="+ C_OrderLine_ID+ ", InvoiceLine="+ C_InvoiceLine_ID);      if (m_invoice != null && m_invoice.isCreditMemo())       QtyEntered=QtyEntered.negate();      MInOutLine iol=new MInOutLine(inout);      iol.setM_Product_ID(M_Product_ID,C_UOM_ID);      iol.setQty(QtyEntered);      MOrderLine ol=null;      MRMALine rmal=null;      if (C_OrderLine_ID != 0) {        iol.setC_OrderLine_ID(C_OrderLine_ID);        ol=new MOrderLine(Env.getCtx(),C_OrderLine_ID,trxName);        if (ol.getQtyEntered().compareTo(ol.getQtyOrdered()) != 0) {          iol.setMovementQty(QtyEntered.multiply(ol.getQtyOrdered()).divide(ol.getQtyEntered(),12,BigDecimal.ROUND_HALF_UP));          iol.setC_UOM_ID(ol.getC_UOM_ID());        }        iol.setM_AttributeSetInstance_ID(ol.getM_AttributeSetInstance_ID());        iol.setDescription(ol.getDescription());        iol.setC_Project_ID(ol.getC_Project_ID());        iol.setC_ProjectPhase_ID(ol.getC_ProjectPhase_ID());        iol.setC_ProjectTask_ID(ol.getC_ProjectTask_ID());        iol.setC_Activity_ID(ol.getC_Activity_ID());        iol.setC_Campaign_ID(ol.getC_Campaign_ID());        iol.setAD_OrgTrx_ID(ol.getAD_OrgTrx_ID());        iol.setUser1_ID(ol.getUser1_ID());        iol.setUser2_ID(ol.getUser2_ID());      } else       if (il != null) {        if (il.getQtyEntered().compareTo(il.getQtyInvoiced()) != 0) {          iol.setQtyEntered(QtyEntered.multiply(il.getQtyInvoiced()).divide(il.getQtyEntered(),12,BigDecimal.ROUND_HALF_UP));          iol.setC_UOM_ID(il.getC_UOM_ID());        }        iol.setDescription(il.getDescription());        iol.setC_Project_ID(il.getC_Project_ID());        iol.setC_ProjectPhase_ID(il.getC_ProjectPhase_ID());        iol.setC_ProjectTask_ID(il.getC_ProjectTask_ID());        iol.setC_Activity_ID(il.getC_Activity_ID());        iol.setC_Campaign_ID(il.getC_Campaign_ID());        iol.setAD_OrgTrx_ID(il.getAD_OrgTrx_ID());        iol.setUser1_ID(il.getUser1_ID());        iol.setUser2_ID(il.getUser2_ID());      } else       if (M_RMALine_ID != 0) {        rmal=new MRMALine(Env.getCtx(),M_RMALine_ID,trxName);        iol.setM_RMALine_ID(M_RMALine_ID);        iol.setQtyEntered(QtyEntered);        iol.setDescription(rmal.getDescription());        iol.setM_AttributeSetInstance_ID(rmal.getM_AttributeSetInstance_ID());        iol.setC_Project_ID(rmal.getC_Project_ID());        iol.setC_ProjectPhase_ID(rmal.getC_ProjectPhase_ID());        iol.setC_ProjectTask_ID(rmal.getC_ProjectTask_ID());        iol.setC_Activity_ID(rmal.getC_Activity_ID());        iol.setAD_OrgTrx_ID(rmal.getAD_OrgTrx_ID());        iol.setUser1_ID(rmal.getUser1_ID());        iol.setUser2_ID(rmal.getUser2_ID());      }      if (M_Product_ID == 0) {        if (ol != null && ol.getC_Charge_ID() != 0)         iol.setC_Charge_ID(ol.getC_Charge_ID()); else         if (il != null && il.getC_Charge_ID() != 0)         iol.setC_Charge_ID(il.getC_Charge_ID()); else         if (rmal != null && rmal.getC_Charge_ID() != 0)         iol.setC_Charge_ID(rmal.getC_Charge_ID());      }      iol.setM_Locator_ID(M_Locator_ID);      if (!iol.save())       log.log(Level.SEVERE,"Line NOT created #" + i); else       if (il != null) {        il.setM_InOutLine_ID(iol.getM_InOutLine_ID());        il.saveEx();      }    }  }  if (p_order != null && p_order.getC_Order_ID() != 0) {    inout.setC_Order_ID(p_order.getC_Order_ID());    inout.setAD_OrgTrx_ID(p_order.getAD_OrgTrx_ID());    inout.setC_Project_ID(p_order.getC_Project_ID());    inout.setC_Campaign_ID(p_order.getC_Campaign_ID());    inout.setC_Activity_ID(p_order.getC_Activity_ID());    inout.setUser1_ID(p_order.getUser1_ID());    inout.setUser2_ID(p_order.getUser2_ID());    if (p_order.isDropShip()) {      inout.setM_Warehouse_ID(p_order.getM_Warehouse_ID());      inout.setIsDropShip(p_order.isDropShip());      inout.setDropShip_BPartner_ID(p_order.getDropShip_BPartner_ID());      inout.setDropShip_Location_ID(p_order.getDropShip_Location_ID());      inout.setDropShip_User_ID(p_order.getDropShip_User_ID());    }  }  if (m_invoice != null && m_invoice.getC_Invoice_ID() != 0) {    if (inout.getC_Order_ID() == 0)     inout.setC_Order_ID(m_invoice.getC_Order_ID());    inout.setC_Invoice_ID(m_invoice.getC_Invoice_ID());    inout.setAD_OrgTrx_ID(m_invoice.getAD_OrgTrx_ID());    inout.setC_Project_ID(m_invoice.getC_Project_ID());    inout.setC_Campaign_ID(m_invoice.getC_Campaign_ID());    inout.setC_Activity_ID(m_invoice.getC_Activity_ID());    inout.setUser1_ID(m_invoice.getUser1_ID());    inout.setUser2_ID(m_invoice.getUser2_ID());  }  if (m_rma != null && m_rma.getM_RMA_ID() != 0) {    MInOut originalIO=m_rma.getShipment();    inout.setIsSOTrx(m_rma.isSOTrx());    inout.setC_Order_ID(0);    inout.setC_Invoice_ID(0);    inout.setM_RMA_ID(m_rma.getM_RMA_ID());    inout.setAD_OrgTrx_ID(originalIO.getAD_OrgTrx_ID());    inout.setC_Project_ID(originalIO.getC_Project_ID());    inout.setC_Campaign_ID(originalIO.getC_Campaign_ID());    inout.setC_Activity_ID(originalIO.getC_Activity_ID());    inout.setUser1_ID(originalIO.getUser1_ID());    inout.setUser2_ID(originalIO.getUser2_ID());  }  inout.saveEx();  return true;}  }
class C{  public String unquotedString(){  return toString().replaceAll("\"","");}  }
class C{  private void addControl(Control control){  childControls.add(control);}  }
class C{  private static void fail(Throwable e,NormalMethod method){  OptimizingCompilerException optExn=new OptimizingCompilerException("Compiler","failure during compilation of",method.toString());  if (e instanceof OutOfMemoryError) {    VM.sysWriteln("Compiler ran out of memory during compilation of ",method.toString());    optExn.isFatal=false;  } else {    VM.sysWriteln("Compiler failure during compilation of ",method.toString());    e.printStackTrace();  }  throw optExn;}  }
class C{  private static void registerCommonClasses(Class<?>... commonClasses){  for (  Class<?> clazz : commonClasses) {    commonClassCache.put(clazz.getName(),clazz);  }}  }
class C{  private boolean dynInit(){  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),m_C_BPartner_ID == 0 ? "C_BPartner_ID" : "M_Product_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"PriceActual"));  columnNames.add(Msg.translate(Env.getCtx(),"QtyInvoiced"));  columnNames.add(Msg.translate(Env.getCtx(),"Discount"));  columnNames.add(Msg.translate(Env.getCtx(),"DocumentNo"));  columnNames.add(Msg.translate(Env.getCtx(),"DateInvoiced"));  columnNames.add(Msg.translate(Env.getCtx(),"AD_Org_ID"));  Vector<Vector<Object>> data=null;  if (m_C_BPartner_ID == 0)   data=queryBPartner(); else   data=queryProduct();  m_modelPrice=new ListModelTable(data);  m_tablePrice.setData(m_modelPrice,columnNames);  m_tablePrice.setColumnClass(0,String.class,true);  m_tablePrice.setColumnClass(1,Double.class,true);  m_tablePrice.setColumnClass(2,Double.class,true);  m_tablePrice.setColumnClass(3,BigDecimal.class,true);  m_tablePrice.setColumnClass(4,String.class,true);  m_tablePrice.setColumnClass(5,Timestamp.class,true);  m_tablePrice.setColumnClass(6,String.class,true);  m_tablePrice.autoSize();  return data.size() != 0;}  }
class C{  public void writeDouble(double d) throws IOException {  this.writeLong(Double.doubleToLongBits(d));}  }
class C{  public boolean reverseCorrectIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  boolean retValue=reverseIt();  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  return retValue;}  }
class C{  public AccountHeaderBuilder withHeaderBackground(Drawable headerBackground){  this.mHeaderBackground=new ImageHolder(headerBackground);  return this;}  }
class C{  public int formatResourceId(String value){  if (value != null && value.matches("^@[0-9]+$")) {    int resId=Integer.parseInt(value.substring(1,value.length()),10);    if (Integer.toHexString(resId).length() != 8 || resId >> 24 != 0x01 || resId >> 24 != 0x7f) {      return resId;    }  }  return -1;}  }
class C{  public void resetCounter(){  counter=0;}  }
class C{  @Override public int currentSegment(float[] coords){  int numCoords=0;  int type=0;  if (index == path.size()) {    if (path.size() > 1) {      BezierPath.Node previous=path.get(path.size() - 1);      BezierPath.Node current=path.get(0);      if ((previous.mask & BezierPath.C2_MASK) == 0) {        if ((current.mask & BezierPath.C1_MASK) == 0) {          numCoords=1;          type=SEG_LINETO;          coords[0]=(float)current.x[0];          coords[1]=(float)current.y[0];        } else {          numCoords=2;          type=SEG_QUADTO;          coords[0]=(float)current.x[1];          coords[1]=(float)current.y[1];          coords[2]=(float)current.x[0];          coords[3]=(float)current.y[0];        }      } else {        if ((current.mask & BezierPath.C1_MASK) == 0) {          numCoords=2;          type=SEG_QUADTO;          coords[0]=(float)previous.x[2];          coords[1]=(float)previous.y[2];          coords[2]=(float)current.x[0];          coords[3]=(float)current.y[0];        } else {          numCoords=3;          type=SEG_CUBICTO;          coords[0]=(float)previous.x[2];          coords[1]=(float)previous.y[2];          coords[2]=(float)current.x[1];          coords[3]=(float)current.y[1];          coords[4]=(float)current.x[0];          coords[5]=(float)current.y[0];        }      }    }  } else   if (index > path.size()) {    return SEG_CLOSE;  } else   if (index == 0) {    BezierPath.Node current=path.get(index);    coords[0]=(float)current.x[0];    coords[1]=(float)current.y[0];    numCoords=1;    type=SEG_MOVETO;  } else   if (index < path.size()) {    BezierPath.Node current=path.get(index);    BezierPath.Node previous=path.get(index - 1);    if ((previous.mask & BezierPath.C2_MASK) == 0) {      if ((current.mask & BezierPath.C1_MASK) == 0) {        numCoords=1;        type=SEG_LINETO;        coords[0]=(float)current.x[0];        coords[1]=(float)current.y[0];      } else {        numCoords=2;        type=SEG_QUADTO;        coords[0]=(float)current.x[1];        coords[1]=(float)current.y[1];        coords[2]=(float)current.x[0];        coords[3]=(float)current.y[0];      }    } else {      if ((current.mask & BezierPath.C1_MASK) == 0) {        numCoords=2;        type=SEG_QUADTO;        coords[0]=(float)previous.x[2];        coords[1]=(float)previous.y[2];        coords[2]=(float)current.x[0];        coords[3]=(float)current.y[0];      } else {        numCoords=3;        type=SEG_CUBICTO;        coords[0]=(float)previous.x[2];        coords[1]=(float)previous.y[2];        coords[2]=(float)current.x[1];        coords[3]=(float)current.y[1];        coords[4]=(float)current.x[0];        coords[5]=(float)current.y[0];      }    }  }  if (affine != null) {    affine.transform(coords,0,coords,0,numCoords);  }  return type;}  }
class C{  public static boolean isInRange(String ip,String ipRange){  if (ip == null || ipRange == null)   return false;  String[] cidrString=ipRange.split("/");  if (cidrString.length == 0)   return false;  String network=cidrString[0];  String cidrMask="24";  if (cidrString.length > 1) {    cidrMask=cidrString[1];  }  String netMask=cidrMaskToNetMask(cidrMask);  InetAddress maskedIP=applyMask(ip,netMask);  InetAddress maskedNetwork=applyMask(network,netMask);  if (maskedIP == null || maskedNetwork == null)   return false;  return maskedIP.equals(maskedNetwork);}  }
class C{  private boolean isFinalStage(State s){  return s.taskState.stage == TaskState.TaskStage.FINISHED || s.taskState.stage == TaskState.TaskStage.FAILED || s.taskState.stage == TaskState.TaskStage.CANCELLED;}  }
class C{  public void push(final double value){  long bits=Double.doubleToLongBits(value);  if (bits == 0L || bits == 0x3ff0000000000000L) {    mv.visitInsn(Opcodes.DCONST_0 + (int)value);  } else {    mv.visitLdcInsn(new Double(value));  }}  }
class C{  private final static long countNonzeroPairs(final long start,final long end,final long[] array){  int block=(int)(start / 32);  final int endBlock=(int)(end / 32);  final int startOffset=(int)(start % 32);  final int endOffset=(int)(end % 32);  if (block == endBlock)   return countNonzeroPairs((array[block] & (1L << endOffset * 2) - 1) >>> startOffset * 2);  long pairs=0;  if (startOffset != 0)   pairs+=countNonzeroPairs(array[block++] >>> startOffset * 2);  while (block < endBlock)   pairs+=countNonzeroPairs(array[block++]);  if (endOffset != 0)   pairs+=countNonzeroPairs(array[block] & (1L << endOffset * 2) - 1);  return pairs;}  }
class C{  private void digestReset(){  for (int i=1; (i < digests.length) && (digests[i] != null); i++) {    digests[i].reset();  }}  }
class C{  public int alloc(int size){  int index=n;  int len=array.length;  if (n + size >= len) {    byte[] aux=new byte[len + blockSize];    System.arraycopy(array,0,aux,0,len);    array=aux;  }  n+=size;  return index;}  }
class C{  @Override public void process(Map<K,V> tuple){  addTuple(tuple,numerators);}  }
class C{  public boolean hasMoreJumpshipElements(){  return this.getTurnJSEnum().hasMoreElements();}  }
class C{  public void changeAzimuthAndElevation(double az,double el){  azimuth=az;  elevation=el;  rotateTurntable(camera.getDistanceToCoR());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public CorrectedUtility<N> createCorrectedUtility(final NestedLogitModel<N> model){  final Demand<N> demand=new Demand<>(model,scenario);  final IterationInformation iterationInformation=new IterationInformation(demand);  int iteration=0;  for (int lastSize=-1, newSize=iterationInformation.constrainedExPost.size(); lastSize != newSize; ) {    log.info("Iteration " + (iteration++) + ": constrained set has size "+ newSize);    iterationInformation.updateIndividualOmegas(demand);    iterationInformation.updateConstrained(demand);    lastSize=newSize;    newSize=iterationInformation.constrainedExPost.size();  }  return new CorrectedUtility<>(demand,iterationInformation.individualOmegas,iterationInformation.constrainedExPost,model.getUtility(),activityType,configGroup);}  }
class C{  private void parseHeader(){  adtsScratch.setPosition(0);  if (!hasOutputFormat) {    int audioObjectType=adtsScratch.readBits(2) + 1;    int sampleRateIndex=adtsScratch.readBits(4);    adtsScratch.skipBits(1);    int channelConfig=adtsScratch.readBits(3);    byte[] audioSpecificConfig=CodecSpecificDataUtil.buildAacAudioSpecificConfig(audioObjectType,sampleRateIndex,channelConfig);    Pair<Integer,Integer> audioParams=CodecSpecificDataUtil.parseAacAudioSpecificConfig(audioSpecificConfig);    MediaFormat mediaFormat=MediaFormat.createAudioFormat(MimeTypes.AUDIO_AAC,MediaFormat.NO_VALUE,MediaFormat.NO_VALUE,audioParams.second,audioParams.first,Collections.singletonList(audioSpecificConfig));    frameDurationUs=(C.MICROS_PER_SECOND * 1024L) / mediaFormat.sampleRate;    output.format(mediaFormat);    hasOutputFormat=true;  } else {    adtsScratch.skipBits(10);  }  adtsScratch.skipBits(4);  sampleSize=adtsScratch.readBits(13) - 2 - HEADER_SIZE;  if (hasCrc) {    sampleSize-=CRC_SIZE;  }}  }
class C{  private void updateKnownAlerts(){  for (  Alert knownAlert : cmrRepositoryDefinition.getAlertAccessService().getAlerts()) {    availableAlerts.put(knownAlert.getId(),knownAlert);  }}  }
class C{  public void addTightSourceNode(ASTNode reference){  fTightSourceRangeNodes.add(reference);  List<StructuralPropertyDescriptor> properties=reference.structuralPropertiesForType();  for (Iterator<StructuralPropertyDescriptor> iterator=properties.iterator(); iterator.hasNext(); ) {    StructuralPropertyDescriptor descriptor=iterator.next();    if (descriptor.isChildProperty()) {      ASTNode child=(ASTNode)reference.getStructuralProperty(descriptor);      if (child != null && isExtending(child,reference)) {        addTightSourceNode(child);      }    } else     if (descriptor.isChildListProperty()) {      List<? extends ASTNode> children=(List<? extends ASTNode>)reference.getStructuralProperty(descriptor);      for (Iterator<? extends ASTNode> iterator2=children.iterator(); iterator2.hasNext(); ) {        ASTNode child=iterator2.next();        if (isExtending(child,reference)) {          addTightSourceNode(child);        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.553 -0500",hash_original_method="25EDC565C62A5EB92B68AF9D2AE96AEA",hash_generated_method="51200390BBF441DEE63E131BE870C15B") public MimeVersionParser(String mimeVersion){  super(mimeVersion);}  }
class C{  public Boolean isVirtualSMCPresent(){  return virtualSMCPresent;}  }
class C{  public Collection<String> supportedOptions(){  Set<String> set=new HashSet<String>();  set.add("-AsaveRulesTo");  set.add("-AshowPositions");  set.add("-Adebug");  return set;}  }
class C{  private ArrayList<FoodModel> prepareListToReturn(List<FoodModel> passedFoods){  ArrayList<FoodModel> toReturn=new ArrayList<>(passedFoods.size());  toReturn.addAll(passedFoods);  return toReturn;}  }
class C{  public static FieldAnnotation fromBCELField(@DottedClassName String className,Field field){  return new FieldAnnotation(className,field.getName(),field.getSignature(),field.isStatic());}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, IOException, RealmException {  DerValue der, subDer;  nonce=null;  timeStamp=null;  usec=null;  sAddress=null;  rAddress=null;  if (((encoding.getTag() & (byte)0x1F) != (byte)0x1D) || (encoding.isApplication() != true) || (encoding.isConstructed() != true)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) == (byte)0x00) {    DerValue derValues[]=subDer.getData().getSequence(1);    ticketInfo=new KrbCredInfo[derValues.length];    for (int i=0; i < derValues.length; i++) {      ticketInfo[i]=new KrbCredInfo(derValues[i]);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if (der.getData().available() > 0) {    if (((byte)(der.getData().peekByte()) & (byte)0x1F) == (byte)0x01) {      subDer=der.getData().getDerValue();      nonce=new Integer(subDer.getData().getBigInteger().intValue());    }  }  if (der.getData().available() > 0) {    timeStamp=KerberosTime.parse(der.getData(),(byte)0x02,true);  }  if (der.getData().available() > 0) {    if (((byte)(der.getData().peekByte()) & (byte)0x1F) == (byte)0x03) {      subDer=der.getData().getDerValue();      usec=new Integer(subDer.getData().getBigInteger().intValue());    }  }  if (der.getData().available() > 0) {    sAddress=HostAddress.parse(der.getData(),(byte)0x04,true);  }  if (der.getData().available() > 0) {    rAddress=HostAddresses.parse(der.getData(),(byte)0x05,true);  }  if (der.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void missingElement(String systemID,int lineNr,String parentElementName,String missingElementName) throws XMLValidationException {  XMLUtil.errorMissingElement(systemID,lineNr,parentElementName,missingElementName);}  }
class C{  private void marshallStructuralProperty(Object object,StructuralProperty property) throws ODataRenderException, XMLStreamException {  String propertyName=property.getName();  Object propertyValue;  Field field=property.getJavaField();  try {    field.setAccessible(true);    propertyValue=field.get(object);  } catch (  IllegalAccessException e) {    throw new ODataRenderException("Error getting field value of field: " + field.toGenericString());  }  if (propertyValue == null) {    if (property.isCollection()) {      throw new ODataRenderException("Collection property has null value: " + property);    } else     if (!property.isNullable()) {      throw new ODataRenderException("Non-nullable property has null value: " + property);    }  }  final String odataDataNS=nsConfigurationProvider.getOdataDataNs();  final String odataMetadataNs=nsConfigurationProvider.getOdataMetadataNs();  if (property.isCollection()) {    Iterator<?> iterator;    if (propertyValue.getClass().isArray()) {      iterator=Arrays.asList((Object[])propertyValue).iterator();    } else     if (Collection.class.isAssignableFrom(propertyValue.getClass())) {      iterator=((Collection<?>)propertyValue).iterator();    } else {      throw new UnsupportedOperationException("Unsupported collection type: " + propertyValue.getClass().getName() + " for property: "+ propertyName);    }    Type elementType=entityDataModel.getType(property.getElementTypeName());    if (elementType == null) {      throw new ODataRenderException("OData type not found for elements of property: " + property);    }    LOG.debug("Start collection property: {}",propertyName);    xmlWriter.writeStartElement(ODATA_DATA,propertyName,odataDataNS);    if (elementType.getMetaType().equals(MetaType.PRIMITIVE)) {      xmlWriter.writeAttribute(METADATA,odataMetadataNs,TYPE,HASH + COLLECTION + "("+ elementType.getName()+ ")");    } else {      xmlWriter.writeAttribute(METADATA,odataMetadataNs,TYPE,HASH + COLLECTION + "("+ elementType.getFullyQualifiedName()+ ")");    }    while (iterator.hasNext()) {      Object element=iterator.next();      xmlWriter.writeStartElement(METADATA,ELEMENT,odataMetadataNs);      marshall(element,elementType);      xmlWriter.writeEndElement();    }    xmlWriter.writeEndElement();    LOG.debug("End collection property: {}",propertyName);  } else {    LOG.debug("Start property: {}",propertyName);    Type propertyType=entityDataModel.getType(property.getTypeName());    if (propertyType == null) {      throw new ODataRenderException("OData type not found for property: " + property);    }    xmlWriter.writeStartElement(ODATA_DATA,propertyName,odataDataNS);    if (propertyValue == null) {      xmlWriter.writeAttribute(METADATA,odataMetadataNs,NULL,"true");    }switch (propertyType.getMetaType()) {case PRIMITIVE:      PrimitiveType primitiveType=(PrimitiveType)propertyType;    if (!primitiveType.equals(PrimitiveType.STRING)) {      xmlWriter.writeAttribute(METADATA,odataMetadataNs,TYPE,primitiveType.getName());    }  break;case COMPLEX:case ENTITY:case ENUM:xmlWriter.writeAttribute(METADATA,odataMetadataNs,TYPE,HASH + propertyType.getFullyQualifiedName());break;default :throw new UnsupportedOperationException("Unsupported meta type: " + propertyType.getMetaType());}marshall(propertyValue,propertyType);xmlWriter.writeEndElement();LOG.debug("End property: {}",propertyName);}}  }
class C{  public static float parse(String[] options,String option,float defValue) throws Exception {  String value=Utils.getOption(option,options);  if (value.isEmpty())   return defValue; else   return Float.parseFloat(value);}  }
class C{  static public void addScaleMoveTransformHandles(Figure f,Collection<Handle> handles){  if (f.isTransformable()) {    addCornerTransformHandles(f,handles);    addEdgeTransformHandles(f,handles);  }}  }
class C{  public static S2LatLngRect fromPoint(S2LatLng p){  return new S2LatLngRect(p,p);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setUseDscaler(evalBool(stack.pop()));  return null;}  }
class C{  private URI resolveRelative(String link){  assertConnectionIsOpen();  try {    return new URL(conn.getURL(),link).toURI();  } catch (  MalformedURLException|URISyntaxException ex) {    throw new AcmeProtocolException("Cannot resolve relative link: " + link,ex);  }}  }
class C{  private void executeSearch(){  String searchString=searchText.getText();  if (StringUtils.isNotBlank(searchString)) {    ICommandService commandService=(ICommandService)PlatformUI.getWorkbench().getService(ICommandService.class);    IEvaluationService evaluationService=(IEvaluationService)PlatformUI.getWorkbench().getService(IEvaluationService.class);    try {      Command searchCommand=commandService.getCommand("rocks.inspectit.ui.rcp.commands.searchDocumentation");      Map<String,String> params=new HashMap<>();      params.put(SearchDocumentationHandler.SEARCH_DOCUMENTATION_PARAMETER,searchString);      searchCommand.executeWithChecks(new ExecutionEvent(searchCommand,params,searchText,evaluationService.getCurrentState()));    } catch (    Exception e) {      InspectIT.getDefault().createErrorDialog("There was an exception executing the wiki search.",e,-1);    }  }}  }
class C{  @Override public boolean supportsOpenStatementsAcrossCommit(){  debugCodeCall("supportsOpenStatementsAcrossCommit");  return true;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  boolean beep=true;  if ((target != null) && (target.isEditable())) {    try {      Document doc=target.getDocument();      Caret caret=target.getCaret();      int dot=caret.getDot();      int mark=caret.getMark();      if (dot != mark) {        doc.remove(Math.min(dot,mark),Math.abs(dot - mark));        beep=false;      } else       if (dot > 0) {        int delChars=1;        if (dot > 1) {          String dotChars=doc.getText(dot - 2,2);          char c0=dotChars.charAt(0);          char c1=dotChars.charAt(1);          if (c0 >= '\uD800' && c0 <= '\uDBFF' && c1 >= '\uDC00' && c1 <= '\uDFFF') {            delChars=2;          }        }        doc.remove(dot - delChars,delChars);        beep=false;      }    } catch (    BadLocationException bl) {    }  }  if (beep) {    UIManager.getLookAndFeel().provideErrorFeedback(target);  }}  }
class C{  public final void popCurrentExpressionNode(){  m_currentExpressionNodes.quickPop(1);}  }
class C{  public static void reloadInstance(CFMLEngine engine,ConfigServerImpl configServer) throws SAXException, ClassException, PageException, IOException, TagLibException, FunctionLibException, BundleException {  Resource configFile=configServer.getConfigFile();  if (configFile == null)   return;  if (second(configServer.getLoadTime()) > second(configFile.lastModified()))   return;  int iDoNew=doNew(engine,configServer.getConfigDir(),false);  boolean doNew=iDoNew != NEW_NONE;  load(configServer,loadDocument(configFile),true,doNew);  ((CFMLEngineImpl)ConfigWebUtil.getEngine(configServer)).onStart(configServer,true);}  }
class C{  public static MarketBar newInstance(String value){  final MarketBar returnInstance=new MarketBar();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public NotFoundException(String message,Response response){  super(HttpStatus.NOT_FOUND,message,response);}  }
class C{  public PEPEvent(PEPItem item){  super();  this.item=item;}  }
class C{  public ClassWriter(Writer writer,String className){  super(writer);  this.className=className;}  }
class C{  public PDFGlyph(char src,String name,PDFPage page,PointF advance){  this.page=page;  this.advance=advance;  this.src=src;  this.name=name;}  }
class C{  public boolean checkAllVPlexVolsInRequest(Volume backendVol,Set<URI> allVolumes,Map<String,Boolean> checkedRGMap){  String rgName=backendVol.getReplicationGroupInstance();  URI storageSystemUri=backendVol.getStorageController();  String key=storageSystemUri.toString() + rgName;  if (checkedRGMap.containsKey(key)) {    return checkedRGMap.get(key);  } else {    boolean containAll=true;    Volume firstVolume=_dbClient.queryObject(Volume.class,allVolumes.iterator().next());    List<Volume> rgVolumes=VPlexUtil.getVolumesInSameReplicationGroup(rgName,storageSystemUri,firstVolume.getPersonality(),_dbClient);    for (    Volume vol : rgVolumes) {      if (vol != null && !vol.getInactive()) {        if (!allVolumes.contains(vol.getId())) {          containAll=false;          break;        }      }    }    checkedRGMap.put(key,containAll);    return containAll;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.444 -0400",hash_original_method="19CB45ABF7C0C1D656700921E322A527",hash_generated_method="380899F3E1EB67D55FF8A375DB8A9EC3") private int doEndOfFile() throws EOFException {  eof=true;  if (throwEofException) {    throw new EOFException();  }  return -1;}  }
class C{  public void addTrackedEntry(GridCacheMapEntry entry){  assert Thread.holdsLock(entry);  EntryWrapper e=new EntryWrapper(entry);  pendingEntries.add(e);}  }
class C{  public HtmlSanitizer.Policy build(HtmlStreamEventReceiver out){  return toFactory().apply(out);}  }
class C{  protected static SampleModel fixSampleModel(CachableRed src){  SampleModel sm=src.getSampleModel();  ColorModel cm=src.getColorModel();  boolean alpha=false;  if (cm != null)   alpha=cm.hasAlpha(); else {switch (sm.getNumBands()) {case 1:case 3:      alpha=false;    break;default :  alpha=true;break;}}if (alpha) return new SinglePixelPackedSampleModel(DataBuffer.TYPE_INT,sm.getWidth(),sm.getHeight(),new int[]{0xFF0000,0xFF00,0xFF,0xFF000000}); else return new SinglePixelPackedSampleModel(DataBuffer.TYPE_INT,sm.getWidth(),sm.getHeight(),new int[]{0xFF0000,0xFF00,0xFF});}  }
class C{  public static void unzip(File zippedFile,File outputDirectory) throws IOException {  Set<String> added=new HashSet<String>();  ZipInputStream inStream=null;  try {    inStream=new ZipInputStream(new FileInputStream(zippedFile));    ZipEntry entry;    byte[] buffer=new byte[1024];    while ((entry=inStream.getNextEntry()) != null) {      String name=entry.getName();      if (name != null && name.length() > 0 && !added.contains(name)) {        File outputFile=new File(outputDirectory,name);        if (entry.isDirectory()) {          outputFile.mkdirs();        } else {          extractFileFromZip(inStream,buffer,outputFile);        }        added.add(name);      }    }    inStream.close();  }  finally {    if (inStream != null) {      inStream.close();    }  }}  }
class C{  private static String toUnicodeLowerCase(String s){  int n=s.length();  char[] result=new char[n];  for (int i=0; i < n; ++i) {    result[i]=Character.toLowerCase(s.charAt(i));  }  return new String(result);}  }
class C{  public AuthTime(String client,String server,int ctime,int cusec){  this.ctime=ctime;  this.cusec=cusec;  this.client=client;  this.server=server;}  }
class C{  public static boolean isConnected(boolean createNew){  if (s_cc == null)   return false;  boolean success=false;  CLogErrorBuffer eb=CLogErrorBuffer.get(false);  if (eb != null && eb.isIssueError())   eb.setIssueError(false); else   eb=null;  try {    Connection conn=getConnectionRW(createNew);    if (conn != null) {      conn.close();    }    success=(conn != null);  } catch (  Exception e) {    success=false;  }  if (eb != null)   eb.setIssueError(true);  return success;}  }
class C{  @Override public void mouseExited(MouseEvent e){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static ValueAnimator loadAnimator(Context context,AttributeSet attrs,ValueAnimator anim) throws NotFoundException {  TypedArray a=context.obtainStyledAttributes(attrs,Animator);  long duration=a.getInt(Animator_duration,0);  long startDelay=a.getInt(Animator_startOffset,0);  int valueType=a.getInt(Animator_valueType,VALUE_TYPE_FLOAT);  if (anim == null) {    anim=new ValueAnimator();  }  int valueFromIndex=Animator_valueFrom;  int valueToIndex=Animator_valueTo;  boolean getFloats=(valueType == VALUE_TYPE_FLOAT);  TypedValue tvFrom=a.peekValue(valueFromIndex);  boolean hasFrom=(tvFrom != null);  int fromType=hasFrom ? tvFrom.type : 0;  TypedValue tvTo=a.peekValue(valueToIndex);  boolean hasTo=(tvTo != null);  int toType=hasTo ? tvTo.type : 0;  if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) || (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {    getFloats=false;    anim.setEvaluator(new ArgbEvaluator());  }  if (getFloats) {    float valueFrom;    float valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=a.getDimension(valueFromIndex,0f);      } else {        valueFrom=a.getFloat(valueFromIndex,0f);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=a.getDimension(valueToIndex,0f);        } else {          valueTo=a.getFloat(valueToIndex,0f);        }        anim.setFloatValues(valueFrom,valueTo);      } else {        anim.setFloatValues(valueFrom);      }    } else {      if (toType == TypedValue.TYPE_DIMENSION) {        valueTo=a.getDimension(valueToIndex,0f);      } else {        valueTo=a.getFloat(valueToIndex,0f);      }      anim.setFloatValues(valueTo);    }  } else {    int valueFrom;    int valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=(int)a.getDimension(valueFromIndex,0f);      } else       if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {        valueFrom=a.getColor(valueFromIndex,0);      } else {        valueFrom=a.getInt(valueFromIndex,0);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueFrom,valueTo);      } else {        anim.setIntValues(valueFrom);      }    } else {      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueTo);      }    }  }  anim.setDuration(duration);  anim.setStartDelay(startDelay);  if (a.hasValue(Animator_repeatCount)) {    anim.setRepeatCount(a.getInt(Animator_repeatCount,0));  }  if (a.hasValue(Animator_repeatMode)) {    anim.setRepeatMode(a.getInt(Animator_repeatMode,ValueAnimator.RESTART));  }  final int resID=a.getResourceId(Animator_interpolator,0);  if (resID > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(context,resID));  }  a.recycle();  return anim;}  }
class C{  private void validateExplicitHashKey(final String explicitHashKey){  if (explicitHashKey == null) {    return;  }  BigInteger b=null;  try {    b=new BigInteger(explicitHashKey);    if (b.compareTo(UINT_128_MAX) > 0 || b.compareTo(BigInteger.ZERO) < 0) {      throw new IllegalArgumentException("Invalid explicitHashKey, must be greater or equal to zero and less than or equal to (2^128 - 1), got " + explicitHashKey);    }  } catch (  NumberFormatException e) {    throw new IllegalArgumentException("Invalid explicitHashKey, must be an integer, got " + explicitHashKey);  }}  }
class C{  public void stopDozing(){  mHandler.removeCallbacks(mDozeRunnable);  mIsDozing=false;}  }
class C{  public static boolean isUserEntryPoint(MethodOrMethodContext method){  CallGraph cg=Scene.v().getCallGraph();  if (API.v().isSystemMethod(method.method()))   return false;  if (API.v().isAIDLCallback(method.method()))   return true;  if (method instanceof SootMethod) {    for (    MethodOrMethodContext mc : PTABridge.v().getMethodContexts((SootMethod)method)) {      Iterator<Edge> incomings=cg.edgesInto(mc);      while (incomings.hasNext()) {        Edge incoming=incomings.next();        if (API.v().isSystemMethod(incoming.src()))         return true;      }    }  } else   if (method instanceof MethodContext) {    Iterator<Edge> incomings=cg.edgesInto(method);    while (incomings.hasNext()) {      Edge incoming=incomings.next();      if (API.v().isSystemMethod(incoming.src()))       return true;    }  }  return false;}  }
class C{  public SparseBitmap andNot(final SparseBitmap rhs){  return new SparseBitmap(this.bitmap.andNot(rhs.bitmap));}  }
class C{  private void notifyAdditionalOnScrollListener(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){  if (mAdditionalOnScrollListener != null) {    mAdditionalOnScrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);  }}  }
class C{  private void addSetTerrain(){  ITerrain toAdd=enteredTerrain();  if (((toAdd.getType() == Terrains.BLDG_ELEV) || (toAdd.getType() == Terrains.BRIDGE_ELEV)) && toAdd.getLevel() < 0) {    JOptionPane.showMessageDialog(frame,Messages.getString("BoardEditor.BridgeBuildingElevError"),Messages.getString("BoardEditor.invalidTerrainTitle"),JOptionPane.ERROR_MESSAGE);    return;  }  curHex.addTerrain(toAdd);  refreshTerrainList();  repaintWorkingHex();}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public boolean isFunctionExecution(){  return this.opType == OP_TYPE_FUNCTION_EXECUTION;}  }
class C{  public td addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public boolean isAttackedBy(final IEntity attacker){  return attackers.contains(attacker);}  }
class C{  @Field(6) public int boolVal(){  return this.io.getIntField(this,6);}  }
class C{  public void removeTvShow(TvShow tvShow){  int oldValue=tvShowList.size();  tvShow.removeAllEpisodes();  tvShowList.remove(tvShow);  try {    TvShowModuleManager.getInstance().removeTvShowFromDb(tvShow);  } catch (  Exception e) {    LOGGER.error("problem removing TV show from DB: " + e.getMessage());  }  firePropertyChange(TV_SHOWS,null,tvShowList);  firePropertyChange(REMOVED_TV_SHOW,null,tvShow);  firePropertyChange(TV_SHOW_COUNT,oldValue,tvShowList.size());}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private String escapeXmlValue(String value,boolean isAttrValue){  if (value == null)   throw new IllegalArgumentException();  return StringGroovyMethods.collectReplacements(value,new ReplacingClosure(isAttrValue,useDoubleQuotes));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("NUM: ").append(actual()).append(' ').append(predicted());  sb.append(' ').append(weight());  return sb.toString();}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public void testTckStyleCreateDestroyClose(){  CacheManager mgr=Caching.getCachingProvider().getCacheManager();  String cacheName="cache";  mgr.createCache(cacheName,new MutableConfiguration<Integer,String>().setTypes(Integer.class,String.class));  mgr.destroyCache(cacheName);  Cache<Integer,String> cache=mgr.createCache(cacheName,new MutableConfiguration<Integer,String>().setTypes(Integer.class,String.class));  cache.close();  cache.close();  try {    cache.get(1);    fail();  } catch (  IllegalStateException e) {  }}  }
class C{  public IncrementalClassifierEvent(Object source,Classifier scheme,Instance currentI,int status){  super(source);  m_classifier=scheme;  m_currentInstance=currentI;  m_status=status;}  }
class C{  public static synchronized void loadPackages(boolean verbose,boolean avoidTriggeringFullClassDiscovery,boolean refreshGOEProperties){  List<File> goePropsFiles=new ArrayList<File>();  if (!m_loadPackages) {    return;  }  if (m_packagesLoaded) {    return;  }  m_packagesLoaded=true;  m_initialPackageLoadingInProcess=true;  if (establishWekaHome()) {    File[] contents=PACKAGES_DIR.listFiles();    if (contents.length > 0) {      establishCacheIfNeeded(System.out);    }    for (    File content : contents) {      if (content.isDirectory()) {        try {          Package toLoad=getInstalledPackageInfo(content.getName());          boolean load;          if (toLoad != null) {            load=loadCheck(toLoad,content,System.err);            if (load) {              if (verbose) {                System.out.println("[Weka] loading package " + content.getName());              }              loadPackageDirectory(content,verbose,goePropsFiles,avoidTriggeringFullClassDiscovery);            }          }        } catch (        Exception ex) {          ex.printStackTrace();          System.err.println("[Weka] Problem loading package " + content.getName() + " skipping...");        }      }    }  }  m_initialPackageLoadingInProcess=false;  if (!avoidTriggeringFullClassDiscovery) {    for (    File f : goePropsFiles) {      processGenericPropertiesCreatorProps(f);    }  }  if (refreshGOEProperties) {    if (verbose) {      System.err.println("Refreshing GOE props...");    }    refreshGOEProperties();  }}  }
class C{  public static <T>TSink<T> publish(TStream<T> stream,String topic,Class<? super T> streamType){  return stream.sink(new Publish<>(topic,streamType));}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public static void registerEventListener(EventListener listener){  listeners.add(listener);}  }
class C{  public static double[] softmax(double[] input){  double min=min(input).getSecond();  double denominator=0d;  for (  double a : input) {    denominator+=exp(a - min);  }  double[] output=new double[input.length];  int i=0;  for (  double a : input) {    output[i++]=exp(a - min) / denominator;  }  return output;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public BroadcastTileIntentBuilder(@NonNull Context context,@NonNull String action){  if (!isValidAction(action)) {    throw new IllegalArgumentException("Action can only contain alphanumeric characters and periods.");  }  mIconPackage=context.getPackageName();  mAction=action;}  }
class C{  public void testFactoryReflection() throws IOException {  Map<String,String> args=new HashMap<>();  args.put(PhoneticFilterFactory.ENCODER,"org.apache.commons.codec.language.Metaphone");  PhoneticFilterFactory factory=new PhoneticFilterFactory(args);  factory.inform(new ClasspathResourceLoader(factory.getClass()));  assertTrue(factory.getEncoder() instanceof Metaphone);  assertTrue(factory.inject);}  }
class C{  static void resetSelectedUI(){  AppContext.getAppContext().remove(SELECTED_UI_KEY);}  }
class C{  public void doMoveToWaitInitialRole(MockStorageSourceConfig cfg) throws Exception {  moveToWaitDescriptionStatReply();  resetChannel();  replay(channel);  OFStatisticsReply sr=createDescriptionStatsReply();  OFDescriptionStatistics desc=(OFDescriptionStatistics)sr.getFirstStatistics();  setupMessageEvent(Collections.<OFMessage>singletonList(sr));  setupMockStorageSource(cfg);  setupSwitchForInstantiationWithReset(cfg.dpid);  sw.startDriverHandshake();  expectLastCall().once();  sw.isDriverHandshakeComplete();  expectLastCall().andReturn(true).once();  if (cfg.isPresent)   sw.setAttribute(IOFSwitch.SWITCH_IS_CORE_SWITCH,cfg.isCoreSwitch);  replay(sw);  reset(controller);  expect(controller.getDebugCounter()).andReturn(debugCounterService).once();  controller.flushAll();  expectLastCall().once();  expect(controller.getThreadPoolService()).andReturn(threadPool).once();  expect(controller.getOFSwitchInstance(eq(desc))).andReturn(sw).once();  expect(controller.getCoreFlowPriority()).andReturn(CORE_PRIORITY).once();  expect(controller.getAccessFlowPriority()).andReturn(ACCESS_PRIORITY).once();  controller.addSwitchChannelAndSendInitialRole(handler);  expectLastCall().once();  expect(controller.getStorageSourceService()).andReturn(storageSource).atLeastOnce();  replay(controller);  handler.messageReceived(ctx,messageEvent);  assertEquals(OFChannelHandler.ChannelState.WAIT_INITIAL_ROLE,handler.getStateForTesting());  verifyStorageSource();}  }
class C{  public Tile tile(IRectangle region){  return tile(region.x(),region.y(),region.width(),region.height());}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == AnnotatableElement.class) {switch (derivedFeatureID) {case TypesPackage.PACKAGE_MEMBER__ANNOTATIONS:      return TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void lock(){  c.lock();}  }
class C{  @Override final public boolean isMinus(){  return false;}  }
class C{  public String readUntilEither(String s){  int ix=Integer.MAX_VALUE;  for (  char c : s.toCharArray()) {    int ixx=data.indexOf(c,pos);    if (ixx >= 0 && ixx < ix)     ix=ixx;  }  if (ix == -1)   throw new RuntimeException("readUntilEither did not find any character in '" + s + "'");  return readN(ix - pos);}  }
class C{  public int invalidate(SqlOperation sqlOperation,String defaultSchema){  if (sqlOperation.getOperation() == SqlOperation.DROP && sqlOperation.getObjectType() == SqlOperation.SCHEMA) {    return cache.invalidateByPrefix(sqlOperation.getSchema());  } else   if (sqlOperation.getOperation() == SqlOperation.DROP && sqlOperation.getObjectType() == SqlOperation.TABLE) {    return invalidateTable(sqlOperation.getSchema(),defaultSchema,sqlOperation.getName());  } else   if (sqlOperation.getOperation() == SqlOperation.ALTER) {    return invalidateTable(sqlOperation.getSchema(),defaultSchema,sqlOperation.getName());  } else   if (sqlOperation.getOperation() == SqlOperation.RENAME) {    int count=invalidateTable(sqlOperation.getSchema(),defaultSchema,sqlOperation.getName());    if (sqlOperation.hasMoreDatabaseObjects()) {      for (      SqlObject sqlObject : sqlOperation.getMoreDatabaseObjects()) {        count+=invalidateTable(sqlObject.getSchema(),defaultSchema,sqlObject.getName());      }    }    return count;  }  return 0;}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public static TProtocol newProtocol(ChannelBuffer input,ChannelBuffer output){  return new TBinaryProtocol(new ThriftTransport(input,output));}  }
class C{  public OrganizationAlreadyBannedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.116 -0500",hash_original_method="54F8942E4EAEA6A93BE827863701CD23",hash_generated_method="24C1FB443391771714C3EF0404DD3E41") public void addContentView(View view,ViewGroup.LayoutParams params){  mWindow.addContentView(view,params);}  }
class C{  public void testResourcesAvailable(){  new SoraniAnalyzer().close();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static public CommitRecordIndex create(final IRawStore store){  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setBTreeClassName(CommitRecordIndex.class.getName());  metadata.setTupleSerializer(new CommitRecordIndexTupleSerializer(new ASCIIKeyBuilderFactory(Bytes.SIZEOF_LONG)));  return (CommitRecordIndex)BTree.create(store,metadata);}  }
class C{  public void cancel(){  mHandler.post(mHide);}  }
class C{  public static void showMessage(String msg,char icon){  showMessage(msg,icon,3500);}  }
class C{  public static DataStorage newDataStorage(Configuration configuration) throws IllegalDataStorageTypeException {  String storageType=configuration.getString(EAGLE_STORAGE_TYPE);  if (storageType == null) {    throw new IllegalDataStorageTypeException(EAGLE_STORAGE_TYPE + " is null");  }  return newDataStorage(storageType);}  }
class C{  public static DetachedBaggage transferContents(DetachedBaggage from){  if (from == null || from.impl == null) {    return EMPTY;  } else {    DetachedBaggage transferred=wrap(from.impl);    from.impl=null;    return transferred;  }}  }
class C{  protected int fillColumnNames(OneRowChange data) throws SQLException {  Table t=tableMetadataCache.retrieve(data.getSchemaName(),data.getTableName());  if (t == null) {    t=new Table(data.getSchemaName(),data.getTableName());    DatabaseMetaData meta=conn.getDatabaseMetaData();    ResultSet rs=null;    try {      rs=conn.getColumnsResultSet(meta,data.getSchemaName(),data.getTableName());      while (rs.next()) {        String columnName=rs.getString("COLUMN_NAME");        int columnIdx=rs.getInt("ORDINAL_POSITION");        Column column=addColumn(rs,columnName);        column.setPosition(columnIdx);        t.AddColumn(column);      }      tableMetadataCache.store(t);    }  finally {      if (rs != null) {        rs.close();      }    }  }  for (  Column column : t.getAllColumns()) {    ListIterator<OneRowChange.ColumnSpec> litr=data.getColumnSpec().listIterator();    for (; litr.hasNext(); ) {      OneRowChange.ColumnSpec cv=litr.next();      if (cv.getIndex() == column.getPosition()) {        cv.setName(column.getName());        cv.setSigned(column.isSigned());        cv.setTypeDescription(column.getTypeDescription());        if (cv.getType() == Types.BLOB)         cv.setBlob(column.isBlob());        break;      }    }    litr=data.getKeySpec().listIterator();    for (; litr.hasNext(); ) {      OneRowChange.ColumnSpec cv=litr.next();      if (cv.getIndex() == column.getPosition()) {        cv.setName(column.getName());        cv.setSigned(column.isSigned());        cv.setTypeDescription(column.getTypeDescription());        if (cv.getType() == Types.BLOB)         cv.setBlob(column.isBlob());        break;      }    }  }  return t.getColumnCount();}  }
class C{  @Override public Response listTemplates(){  Set<Template> templates=templateManager.getTemplates().stream().filter(null).filter(null).collect(Collectors.toSet());  return Response.ok().entity(gson.toJson(templates)).build();}  }
class C{  public DMLFrame popFrame(){  if (callStack.isEmpty())   return null;  return callStack.pop();}  }
class C{  public final void writeToStream(DataOutputStream dos) throws IOException {  dos.writeUTF(event);  dos.writeUTF(site);  dos.writeUTF(date);  dos.writeUTF(round);  dos.writeUTF(white);  dos.writeUTF(black);  dos.writeUTF(TextIO.toFEN(startPos));  dos.writeUTF(timeControl);  dos.writeUTF(whiteTimeControl);  dos.writeUTF(blackTimeControl);  int nTags=tagPairs.size();  dos.writeInt(nTags);  for (int i=0; i < nTags; i++) {    dos.writeUTF(tagPairs.get(i).tagName);    dos.writeUTF(tagPairs.get(i).tagValue);  }  Node.writeToStream(dos,rootNode);  ArrayList<Integer> pathFromRoot=currentNode.getPathFromRoot();  int pathLen=pathFromRoot.size();  dos.writeInt(pathLen);  for (int i=0; i < pathLen; i++)   dos.writeInt(pathFromRoot.get(i));}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  protected void fillPostingType(JComboBox cb){  int AD_Reference_ID=125;  ValueNamePair[] pt=MRefList.getList(Env.getCtx(),AD_Reference_ID,true);  for (int i=0; i < pt.length; i++)   cb.addItem(pt[i]);}  }
class C{  public void closeViewport(Element e){  viewportStack.remove(0);  if (viewportStack.size() == 0) {    viewportStack=null;  }}  }
class C{  public static boolean checkForUpdates(EntityPlayer entityplayer){  try {    if (general.updateNotifications && Mekanism.latestVersionNumber != null && Mekanism.recentNews != null) {      if (!Mekanism.latestVersionNumber.equals("null")) {        ArrayList<IModule> list=new ArrayList<IModule>();        for (        IModule module : Mekanism.modulesLoaded) {          if (Version.get(Mekanism.latestVersionNumber).comparedState(module.getVersion()) == 1) {            list.add(module);          }        }        if (Version.get(Mekanism.latestVersionNumber).comparedState(Mekanism.versionNumber) == 1 || !list.isEmpty()) {          entityplayer.addChatMessage(new ChatComponentText(EnumColor.GREY + "------------- " + EnumColor.DARK_BLUE+ "[Mekanism]"+ EnumColor.GREY+ " -------------"));          entityplayer.addChatMessage(new ChatComponentText(EnumColor.GREY + " " + MekanismUtils.localize("update.outdated")+ "."));          if (Version.get(Mekanism.latestVersionNumber).comparedState(Mekanism.versionNumber) == 1) {            entityplayer.addChatMessage(new ChatComponentText(EnumColor.INDIGO + " Mekanism: " + EnumColor.DARK_RED+ Mekanism.versionNumber));          }          for (          IModule module : list) {            entityplayer.addChatMessage(new ChatComponentText(EnumColor.INDIGO + " Mekanism" + module.getName()+ ": "+ EnumColor.DARK_RED+ module.getVersion()));          }          entityplayer.addChatMessage(new ChatComponentText(EnumColor.GREY + " " + MekanismUtils.localize("update.consider")+ " "+ EnumColor.DARK_GREY+ Mekanism.latestVersionNumber));          entityplayer.addChatMessage(new ChatComponentText(EnumColor.GREY + " " + MekanismUtils.localize("update.newFeatures")+ ": "+ EnumColor.INDIGO+ Mekanism.recentNews));          entityplayer.addChatMessage(new ChatComponentText(EnumColor.GREY + " " + MekanismUtils.localize("update.visit")+ " "+ EnumColor.DARK_GREY+ "aidancbrady.com/mekanism"+ EnumColor.GREY+ " "+ MekanismUtils.localize("update.toDownload")+ "."));          entityplayer.addChatMessage(new ChatComponentText(EnumColor.GREY + "------------- " + EnumColor.DARK_BLUE+ "[=======]"+ EnumColor.GREY+ " -------------"));          return true;        } else         if (Version.get(Mekanism.latestVersionNumber).comparedState(Mekanism.versionNumber) == -1) {          entityplayer.addChatMessage(new ChatComponentText(EnumColor.DARK_BLUE + "[Mekanism] " + EnumColor.GREY+ MekanismUtils.localize("update.devBuild")+ " "+ EnumColor.DARK_GREY+ Mekanism.versionNumber));          return true;        }      } else {        Mekanism.logger.info("Minecraft is in offline mode, could not check for updates.");      }    }  } catch (  Exception e) {  }  return false;}  }
class C{  @Override public TreeNode nextElement(){  return iterator.next();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case STORE_NAME:    return isSetStoreName();case SCOPE:  return isSetScope();case PERSIST:return isSetPersist();}throw new IllegalStateException();}  }
class C{  public static ToolTipManager sharedInstance(){  Object value=SwingUtilities.appContextGet(TOOL_TIP_MANAGER_KEY);  if (value instanceof ToolTipManager) {    return (ToolTipManager)value;  }  ToolTipManager manager=new ToolTipManager();  SwingUtilities.appContextPut(TOOL_TIP_MANAGER_KEY,manager);  return manager;}  }
class C{  public void fireEventOnNode(final String instanceId,final String ref,final String type,final Map<String,Object> data,final Map<String,Object> domChanges){  if (TextUtils.isEmpty(instanceId) || TextUtils.isEmpty(ref) || TextUtils.isEmpty(type)|| mJSHandler == null) {    return;  }  if (!checkMainThread()) {    throw new WXRuntimeException("fireEvent must be called by main thread");  }  addJSTask(METHOD_FIRE_EVENT,instanceId,ref,type,data,domChanges);  sendMessage(instanceId,WXJSBridgeMsgType.CALL_JS_BATCH);}  }
class C{  public void addCone(float x,float y,float z,float radius,float length,int segments,float baseScale){  addCone(x,y,z,radius,length,segments,baseScale,MR_TOP);}  }
class C{  private static void translateCompatibilityToPaths(RPAction action){  if (action.has(EquipActionConsts.BASE_OBJECT)) {    List<String> path=Arrays.asList(action.get(EquipActionConsts.BASE_OBJECT),action.get(EquipActionConsts.BASE_SLOT),action.get(EquipActionConsts.BASE_ITEM));    action.put(EquipActionConsts.SOURCE_PATH,path);  } else {    List<String> path=Arrays.asList(action.get(EquipActionConsts.BASE_ITEM));    action.put(EquipActionConsts.SOURCE_PATH,path);  }}  }
class C{  public void removeAllButtonsFromToolBar(){  buttonPanel.removeAll();}  }
class C{  public static Number count(int[] self,Object value){  return count(InvokerHelper.asIterator(self),value);}  }
class C{  public DtoStateServiceImpl(final DtoFactory dtoFactory,final GenericService<State> stateGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,stateGenericService,adaptersRepository);}  }
class C{  public int size(){  return count;}  }
class C{  public StatefulWriter(final HierarchicalStreamWriter wrapped){  super(wrapped);  attributes=new FastStack<>(16);}  }
class C{  private static final Resource tryNewResource(String userInput,String type){  if (null == userInput) {    return null;  }  Resource result;  try {    result=Resource.newResource(userInput);  } catch (  MalformedURLException e) {    throw new IllegalArgumentException("Can't build " + type + " Resource: "+ e.getMessage(),e);  }  if (!result.exists()) {    throw new IllegalArgumentException(type + " Resource does not exist " + result.getName());  }  return result;}  }
class C{  public V put(long key,V value,int memory){  int hash=getHash(key);  int segmentIndex=getSegmentIndex(hash);  Segment<V> s=segments[segmentIndex];synchronized (s) {    s=resizeIfNeeded(s,segmentIndex);    return s.put(key,hash,value,memory);  }}  }
class C{  public void test_PreparedPropertiesContainNewValues() throws Exception {  String namespace="newNamespace";  Properties properties=new Properties();  properties.put(RemoteRepository.OPTION_CREATE_KB_NAMESPACE,namespace);  properties.put("com.bigdata.namespace." + RemoteRepository.DEFAULT_NAMESPACE + ".spo.com.bigdata.btree.BTree.branchingFactor","1024");  properties.put("com.bigdata.namespace." + RemoteRepository.DEFAULT_NAMESPACE + ".lex.com.bigdata.btree.BTree.branchingFactor","400");  final Properties p=m_mgr.getPreparedProperties(namespace,properties);  assertTrue(p.containsKey("com.bigdata.namespace." + namespace + ".spo.com.bigdata.btree.BTree.branchingFactor"));  assertTrue(p.containsKey("com.bigdata.namespace." + namespace + ".lex.com.bigdata.btree.BTree.branchingFactor"));}  }
class C{  public static void ccDrawLine(GL10 gl,CGPoint origin,CGPoint destination){  FloatBuffer vertices=getVertices(2 * 2);  vertices.put(origin.x);  vertices.put(origin.y);  vertices.put(destination.x);  vertices.put(destination.y);  vertices.position(0);  gl.glDisable(GL_TEXTURE_2D);  gl.glDisableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glDisableClientState(GL_COLOR_ARRAY);  gl.glVertexPointer(2,GL_FLOAT,0,vertices);  gl.glDrawArrays(GL_LINES,0,2);  gl.glEnableClientState(GL_COLOR_ARRAY);  gl.glEnableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glEnable(GL_TEXTURE_2D);}  }
class C{  public void copy(Hashtable props){  super.copy(props);  init(props);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public TweetMetadataRecommendationInfo(int recommendation,RecommendationType type,double weight,Map<Byte,Map<Long,LongList>> socialProof){  this.recommendation=recommendation;  this.recommendationType=type;  this.weight=weight;  this.socialProof=socialProof;}  }
class C{  public static URL urlFromString(String location,Class referrer,boolean includeFileSystem){  URL url=null;  if (isUrlString(location)) {    try {      url=new URL(location);    } catch (    Exception e) {      e.printStackTrace();    }  } else {    if (referrer != null)     url=referrer.getResource(location); else     url=IOLib.class.getResource(location);    if (url == null && !location.startsWith("/"))     url=IOLib.class.getResource("/" + location);    if (includeFileSystem && url == null) {      File f=new File(location);      if (f.exists()) {        try {          url=f.toURI().toURL();        } catch (        Exception e) {        }      }    }  }  return url;}  }
class C{  public static ProfileEditFragment newInstance(@SuppressWarnings("TypeMayBeWeakened") User user){  ProfileEditFragment profileEditFragment=new ProfileEditFragment();  Bundle args=new Bundle();  args.putSerializable(KEY_USER,user);  profileEditFragment.setArguments(args);  return profileEditFragment;}  }
class C{  static public void assertSameSolutionsAnyOrder(final IBindingSet[] expected,final IRunningQuery runningQuery){  assertSameSolutionsAnyOrder("",expected,runningQuery);}  }
class C{  public static String addZeros(long i,int size){  String rtn=Caster.toString(i);  if (rtn.length() < size)   return repeatString("0",size - rtn.length()) + rtn;  return rtn;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof RegularFileObject))   return false;  RegularFileObject o=(RegularFileObject)other;  return getAbsoluteFile().equals(o.getAbsoluteFile());}  }
class C{  private static boolean checkMultipleSeriesItems(MultipleCategorySeries dataset,int value){  int count=dataset.getCategoriesCount();  boolean equal=true;  for (int k=0; k < count && equal; k++) {    equal=dataset.getValues(k).length == dataset.getTitles(k).length;  }  return equal;}  }
class C{  public static void loadX509Cert(File certFile,KeyStore keyStore) throws GeneralSecurityException, IOException {  BufferedInputStream inputStream=new BufferedInputStream(new FileInputStream(certFile));  CertificateFactory certFactory=CertificateFactory.getInstance("X.509");  int certCount=0;  while (inputStream.available() > 0) {    try {      Certificate cert=certFactory.generateCertificate(inputStream);      certCount++;      loadX509Cert(cert,"neo4j.javadriver.trustedcert." + certCount,keyStore);    } catch (    CertificateException e) {      if (e.getCause() != null && e.getCause().getMessage().equals("Empty input")) {        return;      }      throw new IOException("Failed to load certificate from `" + certFile.getAbsolutePath() + "`: "+ certCount+ " : "+ e.getMessage(),e);    }  }}  }
class C{  public boolean containsValue(long val){  byte[] states=_states;  long[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.YEAR_TYPE,this);}  }
class C{  private void processKeyboardKeyEvent(AccessibilityEvent event){  final CharSequence text=AccessibilityEventUtils.getEventTextOrDescription(event);  if (TextUtils.isEmpty(text)) {    return;  }  String localeString=FALLBACK_LOCALE;  InputMethodManager inputMethodManager=(InputMethodManager)mService.getSystemService(Context.INPUT_METHOD_SERVICE);  InputMethodSubtype inputMethod=inputMethodManager.getCurrentInputMethodSubtype();  if (inputMethod != null) {    localeString=inputMethod.getLocale();  }  String phoneticLetter=getPhoneticLetter(localeString,text.toString());  if (phoneticLetter != null) {    postPhoneticLetterRunnable(phoneticLetter);  }}  }
class C{  public void addTranslator(ClassPool cp,Translator t) throws NotFoundException, CannotCompileException {  source=cp;  translator=t;  t.start(cp);}  }
class C{  public void uninstallUI(JComponent c){  super.uninstallUI(c);  MetalToolBarUI.unregister(c);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS__NEGATED:    setNegated((Boolean)newValue);  return;case RegularExpressionPackage.CHARACTER_CLASS__ELEMENTS:getElements().clear();getElements().addAll((Collection<? extends CharacterClassElement>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void beginUpdatingPersistentView(){synchronized (lock) {    if (!shouldUpdatePersistentView) {      shouldUpdatePersistentView=true;      Map<InternalDistributedMember,PersistentMemberID> onlineMembers=advisor.adviseInitializedPersistentMembers();      for (      Map.Entry<InternalDistributedMember,PersistentMemberID> entry : onlineMembers.entrySet()) {        memberOnline(entry.getKey(),entry.getValue());      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:57.399 -0500",hash_original_method="78D31C459A561793AE549A78D34651C2",hash_generated_method="0CA05712F4F8666F897C8205AE2CDFF4") public void start(){  mDuration=mAnimation.getDuration();  mMaxDelay=Long.MIN_VALUE;  mAnimation.setStartTime(-1);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.448 -0500",hash_original_method="77C6D00CEFBA51FBEDF42525D5CAF8B4",hash_generated_method="0017863403E4329B16521F9204F2257A") public WifiLock createWifiLock(int lockType,String tag){  return new WifiLock(lockType,tag);}  }
class C{  public static boolean sm(double a,double b){  return (b - a > SMALL);}  }
class C{  public boolean isEmpty(){  return (left == 0 && right == 0 && top == 0 && bottom == 0);}  }
class C{  public boolean isValid(){  return StringUtils.isNotBlank(name) && StringUtils.isNotBlank(value) && name.length() < 127 && value.length() < 255;}  }
class C{  public final boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Edge))   return false;  Edge edge=(Edge)o;  if (NodeEqualityMode.getEqualityType() == NodeEqualityMode.Type.OBJECT) {    Node node1=getNode1();    Node node2=getNode2();    Node node1b=edge.getNode1();    Node node2b=edge.getNode2();    Endpoint end1=getEndpoint1();    Endpoint end2=getEndpoint2();    Endpoint end1b=edge.getEndpoint1();    Endpoint end2b=edge.getEndpoint2();    boolean equal;    if (node1 == node1b && node2 == node2b) {      equal=end1 == end1b && end2 == end2b;    } else     equal=node1 == node2b && node2 == node1b && end1 == end2b && end2 == end1b;    return equal;  } else   if (NodeEqualityMode.getEqualityType() == NodeEqualityMode.Type.NAME) {    String name1=getNode1().getName();    String name2=getNode2().getName();    String name1b=edge.getNode1().getName();    String name2b=edge.getNode2().getName();    Endpoint end1=getEndpoint1();    Endpoint end2=getEndpoint2();    Endpoint end1b=edge.getEndpoint1();    Endpoint end2b=edge.getEndpoint2();    if (name1.equals(name1b) && name2.equals(name2b)) {      return end1 == end1b && end2 == end2b;    } else     return name1.equals(name2b) && name2.equals(name1b) && end1 == end2b && end2 == end1b;  } else {    throw new IllegalStateException();  }}  }
class C{  private ILogicalOperator visitAggregateOperator(ILogicalOperator op) throws AlgebricksException {  visitSingleInputOperator(op);  if (correlatedKeyVars.isEmpty()) {    return op;  }  GroupByOperator gbyOp=new GroupByOperator();  List<LogicalVariable> copyOfCorrelatedKeyVars=new ArrayList<>(correlatedKeyVars);  for (  LogicalVariable keyVar : copyOfCorrelatedKeyVars) {    LogicalVariable newVar=context.newVar();    gbyOp.getGroupByList().add(new Pair<>(newVar,new MutableObject<>(new VariableReferenceExpression(keyVar))));    updateInputToOutputVarMapping(keyVar,newVar,false);  }  ILogicalOperator inputOp=op.getInputs().get(0).getValue();  gbyOp.getInputs().add(new MutableObject<>(inputOp));  NestedTupleSourceOperator nts=new NestedTupleSourceOperator(new MutableObject<ILogicalOperator>(gbyOp));  op.getInputs().clear();  op.getInputs().add(new MutableObject<>(nts));  ILogicalPlan nestedPlan=new ALogicalPlanImpl();  nestedPlan.getRoots().add(new MutableObject<>(op));  gbyOp.getNestedPlans().add(nestedPlan);  OperatorManipulationUtil.computeTypeEnvironmentBottomUp(gbyOp,context);  return op;}  }
class C{  public static int[] oidStrToInts(String oid) throws IOException {  int length=oid.length();  if (oid.charAt(length - 1) == '.') {    throw new IOException("Bad OID: " + oid);  }  int[] result=new int[length / 2 + 1];  int number=0;  for (int i=0; i < length; i++) {    int value=0;    int pos=i;    for (; i < length; i++) {      char ch=oid.charAt(i);      if ((ch < '0') || (ch > '9')) {        break;      }      value=10 * value + (ch - '0');    }    if (i == pos) {      throw new IOException("Bad OID: " + oid);    }    result[number++]=value;    if (i == length) {      break;    }    char ch=oid.charAt(i);    if (ch != '.') {      throw new IOException("Bad OID: " + oid);    }  }  if (number < 2) {    throw new IOException("OID should consist of no less than 2 components: " + oid);  }  return Arrays.copyOfRange(result,0,number);}  }
class C{  void signal(){  lock.lock();  try {    force=true;    cond.signalAll();  }  finally {    lock.unlock();  }}  }
class C{  public void ensureCapacity(int minCapacity){  if (table.length < minCapacity) {    int newCapacity=nextPrime(minCapacity);    rehash(newCapacity);  }}  }
class C{  public XblChildNodes(XBLRecord rec){  record=rec;  nodes=new ArrayList();  size=-1;}  }
class C{  public MimeMultipartReport(DataSource aDataSource) throws MessagingException {  super(aDataSource);}  }
class C{  private PhoneUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public void selectFileToLoad(){  File file=new File(FileHelper.getPath(this));  Intent intent=new Intent(Intent.ACTION_GET_CONTENT);  intent.addCategory(Intent.CATEGORY_OPENABLE);  Uri data=Uri.fromFile(file);  String type="*/*";  intent.setDataAndType(data,type);  startActivityForResult(intent,REQUEST_SELECT_FILE);}  }
class C{  private static void isPlacement(final Collection<Polygon> countryPolygons,final Collection<Polygon> containedCountryPolygons,final List<Rectangle2D> placementRects,final List<Point> placementPoints,final Rectangle2D place,final int x,final int y){  place.setFrame(x,y,PLACEWIDTH,PLACEHEIGHT);  if (containedIn(place,countryPolygons) && !intersectsOneOf(place,placementRects) && (!containedIn(place,containedCountryPolygons) && !intersectsOneOf(place,containedCountryPolygons))) {    placementPoints.add(new Point((int)place.getX(),(int)place.getY()));    final Rectangle2D newRect=new Rectangle2D.Double();    newRect.setFrame(place);    placementRects.add(newRect);  }}  }
class C{  public GeneralizeTypeDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.GENERALIZE_TYPE,project,description,comment,arguments,flags);}  }
class C{  protected Document createConfigDoc(AVList params){  AVList configParams=params.copy();  if (configParams.getValue(AVKey.DISPLAY_NAME) == null) {    configParams.setValue(AVKey.DISPLAY_NAME,params.getValue(AVKey.DATASET_NAME));  }  if (configParams.getValue(AVKey.SERVICE_NAME) == null) {    configParams.setValue(AVKey.SERVICE_NAME,AVKey.SERVICE_NAME_OFFLINE);  }  configParams.setValue(AVKey.NETWORK_RETRIEVAL_ENABLED,Boolean.FALSE);  configParams.removeKey(AVKey.MISSING_DATA_REPLACEMENT);  configParams.setValue(AVKey.MISSING_DATA_SIGNAL,params.getValue(AVKey.MISSING_DATA_REPLACEMENT));  if (this.extremes != null && this.extremes.length >= 2) {    configParams.setValue(AVKey.ELEVATION_MIN,this.extremes[0]);    configParams.setValue(AVKey.ELEVATION_MAX,this.extremes[1]);  }  return BasicElevationModel.createBasicElevationModelConfigDocument(configParams);}  }
class C{  public Task<BlockConsistencyGroupRestRep> restoreSnapshot(URI consistencyGroupId,URI snapshotId){  final String url=getIdUrl() + "/protection/snapshots/{fcid}/restore";  return postTask(url,consistencyGroupId,snapshotId);}  }
class C{  public static ConstantNode forShort(short i,StructuredGraph graph){  return unique(graph,createPrimitive(JavaConstant.forInt(i)));}  }
class C{  public void testTruncateMissing(){  OffsetIndex index=new DelegatingOffsetIndex(HeapBuffer.allocate(1024 * 8));  index.index(0,0);  index.index(1,10);  index.index(3,30);  index.index(4,40);  assertEquals(index.truncate(2),30);}  }
class C{  public static final String sub(String line,String oldString,String newString){  int i=0;  if ((i=line.indexOf(oldString,i)) >= 0) {    char[] line2=line.toCharArray();    char[] newString2=newString.toCharArray();    int oLength=oldString.length();    StringBuffer buf=new StringBuffer(line2.length);    buf.append(line2,0,i).append(newString2);    i+=oLength;    int j=i;    while ((i=line.indexOf(oldString,i)) > 0) {      buf.append(line2,j,i - j).append(newString2);      i+=oLength;      j=i;    }    buf.append(line2,j,line2.length - j);    return buf.toString();  }  return line;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){}  }
class C{  public PatternFilenameFilter(Pattern pattern){  this.pattern=Preconditions.checkNotNull(pattern);}  }
class C{  public ServiceChannel createServiceChannel(TransportChannelSettings settings) throws ServiceResultException {  return new ServiceChannel(createSecureChannel(settings));}  }
class C{  public void addTextIfAboveThreshold(final double value,final String string){  if (value > displayThreshold) {    addText(string + " ");  }}  }
class C{  public static int rand(final int n){  return rand.nextInt(n);}  }
class C{  public static boolean isRecognizedEncoding(String encoding){  EncodingInfo ei;  String normalizedEncoding=encoding.toUpperCase();  ei=(EncodingInfo)_encodingTableKeyJava.get(normalizedEncoding);  if (ei == null)   ei=(EncodingInfo)_encodingTableKeyMime.get(normalizedEncoding);  if (ei != null)   return true;  return false;}  }
class C{  private void startTracking(final int sessionId){  Log.d(TAG,"Start tracking on session " + sessionId);  mIsTracking=true;  mSessionId=sessionId;  mMostCurrentLocation=new Location("dummy");}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(3 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  private void clear(){  mCurrentNodeIndex=0;  mSupportedGranularities.clear();  AccessibilityNodeInfoUtils.recycleNodes(mNavigableNodes);  mNavigableNodes.clear();  AccessibilityNodeInfoUtils.recycleNodes(mLockedNode);  mLockedNode=null;  setSelectionModeActive(false);}  }
class C{  public static IPath computeContainerPath(String containerId,Sdk sdk,Type containerType){  if (containerType == Type.DEFAULT) {    return computeDefaultContainerPath(containerId);  } else {    return computeQualifiedContainerPath(containerId,sdk);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String toString(){  return m_currentPattern;}  }
class C{  private void dialogChanged(){  errorMsg=validateInputs();  updateStatus(errorMsg);}  }
class C{  public CostMatrix(int numOfClasses){  m_size=numOfClasses;  initialize();}  }
class C{  public void dispose(){  mSamples=null;}  }
class C{  public long readUTCDate() throws IOException {  expectStartTag("date");  if (utcCalendar == null)   utcCalendar=Calendar.getInstance(TimeZone.getTimeZone("UTC"));  long value=parseDate(utcCalendar);  expectEndTag("date");  return value;}  }
class C{  public ConfigProperties(Properties props){  super(props);}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  protected int engineDoFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws IllegalBlockSizeException, ShortBufferException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public static boolean isTagEnabled(String tag){  if (enableAllTags) {    return true;  }  String[] tags=enabledTags;  if (tags == null || tags.length == 0) {    return false;  }  for (int i=0; i < tags.length; i++) {    if (tags[i].equals(tag)) {      return true;    }  }  return false;}  }
class C{  public void testSyncFailed_ignoredWhenDataModelAvailable(){  mController.init();  LocationTree locationTree=FakeAppLocationTreeFactory.build();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  mFakeEventBus.post(new SyncFailedEvent());  verify(mMockUi,times(0)).showSyncFailedDialog(true);}  }
class C{  public static ApexStream<byte[]> fromKafka09(String brokers,String topic,PartitionStrategy strategy,int partitionNumber,Option... opts){  KafkaSinglePortInputOperator kafkaInput=new KafkaSinglePortInputOperator();  kafkaInput.setClusters(brokers);  kafkaInput.setTopics(topic);  kafkaInput.setStrategy(strategy.name());  kafkaInput.setInitialPartitionCount(partitionNumber);  ApexStreamImpl<String> newStream=new ApexStreamImpl<>();  return newStream.addOperator(kafkaInput,null,kafkaInput.outputPort,opts);}  }
class C{  @NonNull public ActivityType stop(){  ActivityType stoppingForType=activityTypeStorage.get();  if (stoppingForType.isBreak()) {    pomodorosDoneStorage.set(pomodorosDoneStorage.get() + 1);    lastPomodoroStorage.set(DateTime.now());  }  activityTypeStorage.set(ActivityType.NONE);  isOngoingStorage.set(false);  return stoppingForType;}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  Object[] oldSet=_set;  _set=new Object[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldSet[i] != null && oldSet[i] != REMOVED) {      E o=(E)oldSet[i];      int index=insertionIndex(o);      if (index < 0) {        throwObjectContractViolation(_set[(-index - 1)],o);      }      _set[index]=o;    }  }}  }
class C{  public static boolean createOrder(MAcctSchema as,int AD_Org_ID,int M_Product_ID,int M_AttributeSetInstance_ID,int C_OrderLine_ID,int M_CostElement_ID,BigDecimal Amt,BigDecimal Qty,String Description,String trxName){  String sql="DELETE M_CostDetail " + "WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0" + " AND C_OrderLine_ID=" + C_OrderLine_ID + " AND C_AcctSchema_ID ="+ as.getC_AcctSchema_ID()+ " AND M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID;  int no=DB.executeUpdate(sql,trxName);  if (no != 0)   s_log.config("Deleted #" + no);  MCostDetail cd=get(as.getCtx(),"C_OrderLine_ID=?",C_OrderLine_ID,M_AttributeSetInstance_ID,as.getC_AcctSchema_ID(),trxName);  if (cd == null) {    cd=new MCostDetail(as,AD_Org_ID,M_Product_ID,M_AttributeSetInstance_ID,M_CostElement_ID,Amt,Qty,Description,trxName);    cd.setC_OrderLine_ID(C_OrderLine_ID);  } else {    cd.setDeltaAmt(Amt.subtract(cd.getAmt()));    cd.setDeltaQty(Qty.subtract(cd.getQty()));    if (cd.isDelta()) {      cd.setProcessed(false);      cd.setAmt(Amt);      cd.setQty(Qty);    } else     return true;  }  boolean ok=cd.save();  if (ok && !cd.isProcessed()) {    MClient client=MClient.get(as.getCtx(),as.getAD_Client_ID());    if (client.isCostImmediate())     cd.process();  }  s_log.config("(" + ok + ") "+ cd);  return ok;}  }
class C{  public static Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  Logger.TAG=tag;  return settings;}  }
class C{  public ColumnBuilder toColumn(){  return this;}  }
class C{  public void addProjectionVar(final VarNode var){  addExpr(new AssignmentNode(var,var));}  }
class C{  public boolean isRangeZeroBaselineVisible(){  return this.rangeZeroBaselineVisible;}  }
class C{  public boolean isPublic(){  Object oo=get_Value(COLUMNNAME_IsPublic);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static <T extends Annotation>FSIterator<T> seekByAddress(JCas aJcas,Class<T> aType,int aAddr){  AnnotationIndex<T> idx=(AnnotationIndex)aJcas.getAnnotationIndex(JCasUtil.getAnnotationType(aJcas,aType));  return idx.iterator(selectByAddr(aJcas,aAddr));}  }
class C{  public static String parse(final BluetoothGattCharacteristic characteristic){  return parse(characteristic,0);}  }
class C{  public boolean useTrailingSlashMatch(){  return this.useTrailingSlashMatch;}  }
class C{  public boolean isLogged(){  Object oo=get_Value(COLUMNNAME_IsLogged);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void dispatchOnDateSelected(final CalendarDay day,final boolean selected){  OnDateSelectedListener l=listener;  if (l != null) {    l.onDateSelected(MaterialCalendarView.this,day,selected);  }}  }
class C{  protected String paramString(){  String defaultCloseOperationString;  if (defaultCloseOperation == HIDE_ON_CLOSE) {    defaultCloseOperationString="HIDE_ON_CLOSE";  } else   if (defaultCloseOperation == DISPOSE_ON_CLOSE) {    defaultCloseOperationString="DISPOSE_ON_CLOSE";  } else   if (defaultCloseOperation == DO_NOTHING_ON_CLOSE) {    defaultCloseOperationString="DO_NOTHING_ON_CLOSE";  } else   if (defaultCloseOperation == 3) {    defaultCloseOperationString="EXIT_ON_CLOSE";  } else   defaultCloseOperationString="";  String rootPaneString=(rootPane != null ? rootPane.toString() : "");  String rootPaneCheckingEnabledString=(rootPaneCheckingEnabled ? "true" : "false");  return super.paramString() + ",defaultCloseOperation=" + defaultCloseOperationString+ ",rootPane="+ rootPaneString+ ",rootPaneCheckingEnabled="+ rootPaneCheckingEnabledString;}  }
class C{  public DrawerBuilder inflateMenu(@MenuRes int menuRes){  MenuInflater menuInflater=new SupportMenuInflater(mActivity);  MenuBuilder mMenu=new MenuBuilder(mActivity);  menuInflater.inflate(menuRes,mMenu);  addMenuItems(mMenu,false);  return this;}  }
class C{  @SuppressWarnings("unchecked") public static <T>IBaseDao<T> createGenericDao(DbSqlite db,Class<?> modelClazz){  return new GenericDao<T>(db,modelClazz);}  }
class C{  public RunTearDownHqlStatement(Statement wrappedStatement,TestHiveServer testingHiveServer,HqlScript tearDownHql){  this.wrappedStatement=wrappedStatement;  this.testingHiveServer=testingHiveServer;  this.tearDownHql=tearDownHql;}  }
class C{  private static int applyPredictorFunction2(final int mainPred,final BufferedInputStream bis,final byte[] bos,final int colors,final int bitsPerComponent,final int columns) throws Exception {  int count=0;  int predictor;  final int bytesAvailable=bis.available();  final int bpp=(colors * bitsPerComponent + 7) / 8;  final int rowLength=(columns * colors * bitsPerComponent + 7) / 8 + bpp;  final byte[] thisLine=new byte[rowLength];  final byte[] lastLine=new byte[rowLength];  int curPred;  try {    int byteCount=0;    while (true) {      if (bytesAvailable <= byteCount) {        break;      }      predictor=mainPred;      int i=0;      int offset=bpp;      if (predictor >= 10) {        curPred=bis.read();        if (curPred == -1) {          break;        }        curPred+=10;      } else {        curPred=predictor;      }      while (offset < rowLength) {        i=bis.read(thisLine,offset,rowLength - offset);        if (i == -1) {          break;        }        offset+=i;        byteCount+=i;      }      if (i == -1) {        break;      }switch (curPred) {case 2:        for (int i1=bpp; i1 < rowLength; i1++) {          final int sub=thisLine[i1] & 0xff;          final int raw=thisLine[i1 - bpp] & 0xff;          thisLine[i1]=(byte)((sub + raw) & 0xff);          if (bos != null) {            bos[count]=thisLine[i1];          }          count++;        }      break;case 10:    for (int i1=bpp; i1 < rowLength; i1++) {      if (bos != null) {        bos[count]=thisLine[i1];      }      count++;    }  break;case 11:for (int i1=bpp; i1 < rowLength; i1++) {  final int sub=thisLine[i1] & 0xff;  final int raw=thisLine[i1 - bpp] & 0xff;  thisLine[i1]=(byte)((sub + raw));  if (bos != null) {    bos[count]=thisLine[i1];  }  count++;}break;case 12:for (int i1=bpp; i1 < rowLength; i1++) {final int sub=(lastLine[i1] & 0xff) + (thisLine[i1] & 0xff);thisLine[i1]=(byte)(sub);if (bos != null) {bos[count]=thisLine[i1];}count++;}break;case 13:for (int i1=bpp; i1 < rowLength; i1++) {final int av=thisLine[i1] & 0xff;final int floor=((thisLine[i1 - bpp] & 0xff) + (lastLine[i1] & 0xff) >> 1);thisLine[i1]=(byte)(av + floor);if (bos != null) {bos[count]=thisLine[i1];}count++;}break;case 14:for (int i1=bpp; i1 < rowLength; i1++) {final int a=thisLine[i1 - bpp] & 0xff;final int b=lastLine[i1] & 0xff;final int c=lastLine[i1 - bpp] & 0xff;final int p=a + b - c;int pa=p - a, pb=p - b, pc=p - c;if (pa < 0) {pa=-pa;}if (pb < 0) {pb=-pb;}if (pc < 0) {pc=-pc;}if (pa <= pb && pa <= pc) {thisLine[i1]=(byte)(thisLine[i1] + a);} else if (pb <= pc) {thisLine[i1]=(byte)(thisLine[i1] + b);} else {thisLine[i1]=(byte)(thisLine[i1] + c);}if (bos != null) {bos[count]=thisLine[i1];}count++;}break;case 15:break;}System.arraycopy(thisLine,0,lastLine,0,lastLine.length);}} catch (final Exception e) {LogWriter.writeLog("Exception " + e + " accessing Predictor");}return count;}  }
class C{  public JSONObject(){  this.map=new HashMap<String,Object>();}  }
class C{  public static final boolean isWidening(int left,int right){  int right2left=right + (left << 4);  return right2left >= 0 && right2left < MAX_CONVERSIONS && (CONVERSIONS[right2left] & (IDENTITY | WIDENING)) != 0;}  }
class C{  static String buildQueryString(boolean distinct,String tables,String[] columns,String where,String groupBy,String having,String orderBy,String limit){  StringBuilder s=new StringBuilder();  s.append("select ");  if (distinct) {    s.append("distinct ");  }  appendColumns(s,columns);  s.append(" from ").append(tables);  if (where != null) {    s.append(" where ").append(where);  }  if (groupBy != null) {    s.append(" group by ").append(groupBy);  }  if (having != null) {    s.append(" having ").append(having);  }  if (orderBy != null) {    s.append(" order by ").append(groupBy);  }  if (limit != null) {    s.append(" limit ").append(limit);  }  return s.toString();}  }
class C{  public static boolean isCdiAvailable(ServletContext servletContext){  boolean result;  Object value=servletContext.getAttribute(RIConstants.CDI_AVAILABLE);  if (value != null) {    result=(Boolean)value;  } else {    result=getCdiBeanManager(null) != null;    if (result) {      servletContext.setAttribute(RIConstants.CDI_AVAILABLE,result);    }  }  return result;}  }
class C{  private boolean addIndicatorTradestrategyToTradingday(Tradingday tradingday,Tradestrategy tradestrategy) throws BrokerModelException, PersistentModelException, CloneNotSupportedException {  boolean addedIndicator=false;  CandleDataset candleDataset=(CandleDataset)tradestrategy.getStrategyData().getIndicatorByType(IndicatorSeries.CandleSeries);  if (null != candleDataset) {    for (int seriesIndex=0; seriesIndex < candleDataset.getSeriesCount(); seriesIndex++) {      CandleSeries series=candleDataset.getSeries(seriesIndex);      Tradestrategy indicatorTradestrategy=getIndicatorTradestrategy(tradestrategy,series);      candleDataset.setSeries(seriesIndex,indicatorTradestrategy.getStrategyData().getBaseCandleSeries());      if (!indicatorRequests.containsKey(indicatorTradestrategy.getIdTradeStrategy())) {        if (this.brokerModel.isConnected() || this.brokerModel.isBrokerDataOnly()) {          indicatorRequests.put(indicatorTradestrategy.getIdTradeStrategy(),indicatorTradestrategy);          tradingday.addTradestrategy(indicatorTradestrategy);          addedIndicator=true;        }      }    }  }  return addedIndicator;}  }
class C{  private int toDegrees(boolean isShowingBackArrow){  final int degrees;  if (isShowingBackArrow) {switch (this) {case TOP:case BOTTOM_FULL:      degrees=-180;    break;default :  degrees=180;break;}} else {switch (this) {case TOP:case TOP_FULL:degrees=-180;break;default :degrees=180;break;}}return degrees;}  }
class C{  public <X extends Throwable>long orElseThrow(Supplier<X> exceptionSupplier) throws X {  if (isPresent) {    return value;  } else {    throw exceptionSupplier.get();  }}  }
class C{  @Override public void reset() throws IOException {  if (cache == null) {    input.reset();  } else {    iterator=cache.iterator();  }}  }
class C{  public void normalizeAllIncomingWeights(){  double normFactor=getSummedIncomingWeights();  for (  Neuron n : getNeuronList()) {    for (    Synapse s : n.getFanIn()) {      s.setStrength(s.getStrength() / normFactor);    }  }}  }
class C{  public static String osVersion(){  return osVer;}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  private void manageLabelTypeSlection(){  if (!labelTypeTableViewer.getSelection().isEmpty()) {    AbstractStorageLabelType<?> labelType=(AbstractStorageLabelType<?>)((StructuredSelection)labelTypeTableViewer.getSelection()).getFirstElement();    List<AbstractStorageLabel<?>> inputForLabelTable=new ArrayList<>();    for (    AbstractStorageLabel<?> label : labelList) {      if (ObjectUtils.equals(label.getStorageLabelType(),labelType)) {        inputForLabelTable.add(label);      }    }    if (labelType.isValueReusable()) {      createLabel.setEnabled(true);      labelsTableViewer.getTable().setEnabled(true);    } else {      createLabel.setEnabled(false);      labelsTableViewer.getTable().setEnabled(false);    }    removeLabelType.setEnabled(AbstractCustomStorageLabelType.class.isAssignableFrom(labelType.getClass()));    labelsTableViewer.setInput(inputForLabelTable);    labelsTableViewer.refresh();  } else {    removeLabelType.setEnabled(false);    createLabel.setEnabled(true);    labelsTableViewer.getTable().setEnabled(true);    labelsTableViewer.setInput(null);    labelsTableViewer.refresh();  }}  }
class C{  public Stats snapshot(){  return new Stats(count,mean,sumOfSquaresOfDeltas,min,max);}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public static ProductConfigWrapper loadProductConfigWrapper(Delegator delegator,LocalDispatcher dispatcher,String configId,String productId,String productStoreId,String catalogId,String webSiteId,String currencyUomId,Locale locale,GenericValue autoUserLogin){  ProductConfigWrapper configWrapper=null;  try {    configWrapper=new ProductConfigWrapper(delegator,dispatcher,productId,productStoreId,catalogId,webSiteId,currencyUomId,locale,autoUserLogin);    if (configWrapper != null && UtilValidate.isNotEmpty(configId)) {      configWrapper.loadConfig(delegator,configId);    }  } catch (  Exception e) {    Debug.logWarning(e.getMessage(),module);    configWrapper=null;  }  return configWrapper;}  }
class C{  public void update(byte[] in,int inOff,int len){  while ((mOff != 0) && (len > 0)) {    update(in[inOff]);    inOff++;    len--;  }  while (len > 16) {    System.arraycopy(in,inOff,M,0,16);    processCheckSum(M);    processBlock(M);    len-=16;    inOff+=16;  }  while (len > 0) {    update(in[inOff]);    inOff++;    len--;  }}  }
class C{  public boolean hasAccessorPair(){  return hasGetter() && hasSetter();}  }
class C{  public void generateAtom(XmlWriter w,ExtensionProfile extProfile) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(3);  List<XmlNamespace> nsDecls=new ArrayList<XmlNamespace>();  if (rel != null) {    attrs.add(new XmlWriter.Attribute("rel",rel));  }  if (type != null) {    attrs.add(new XmlWriter.Attribute("type",type));  }  if (href != null) {    attrs.add(new XmlWriter.Attribute("href",href));  }  if (hrefLang != null) {    attrs.add(new XmlWriter.Attribute("hreflang",hrefLang));  }  if (title != null) {    attrs.add(new XmlWriter.Attribute("title",title));  }  if (titleLang != null) {    attrs.add(new XmlWriter.Attribute("xml:lang",titleLang));  }  if (length != -1) {    attrs.add(new XmlWriter.Attribute("length",String.valueOf(length)));  }  if (etag != null) {    nsDecls.add(Namespaces.gNs);    attrs.add(new XmlWriter.Attribute(Namespaces.gAlias,"etag",etag));  }  generateStartElement(w,Namespaces.atomNs,"link",attrs,nsDecls);  if (content != null) {    content.generateAtom(w,extProfile);  }  generateExtensions(w,extProfile);  w.endElement(Namespaces.atomNs,"link");}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (newRecord) {    StringBuffer sb=new StringBuffer("INSERT INTO AD_TreeNodeCMM " + "(AD_Client_ID,AD_Org_ID, IsActive,Created,CreatedBy,Updated,UpdatedBy, " + "AD_Tree_ID, Node_ID, Parent_ID, SeqNo) "+ "VALUES (").append(getAD_Client_ID()).append(",0, 'Y', SysDate, 0, SysDate, 0,").append(getAD_Tree_ID()).append(",").append(get_ID()).append(", 0, 999)");    int no=DB.executeUpdate(sb.toString(),get_TrxName());    if (no > 0)     log.fine("#" + no + " - TreeType=CMM"); else     log.warning("#" + no + " - TreeType=CMM");    return no > 0;  }  return success;}  }
class C{  public boolean isLicenseExpired(LicenseInfoExt licenseInfo){  LicenseFeature licenseFeature=createLicenseFeatureFromLicenseInfoExt(licenseInfo);  if (licenseFeature != null) {    return licenseFeature.isExpired();  }  return false;}  }
class C{  public Option(String key,String name){  super();  this.key=key;  this.name=name;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:10.615 -0400",hash_original_method="ECD12CC4BADF47D1D8366DBA2900D232",hash_generated_method="3FB2B72032A3F3E152773D9A88A56A2A") private void readObject(ObjectInputStream in) throws IOException {  throw new NotSerializableException();}  }
class C{  public static void editTypeInstanceComment(final SQLProvider provider,final int moduleId,final Integer commentId,final Integer userId,final String commentText) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"Error: provider argument can not be null");  Preconditions.checkArgument(moduleId > 0,"Error: module id must be greater then zero");  Preconditions.checkNotNull(commentId,"Error: commentId argument can not be null");  Preconditions.checkNotNull(userId,"Error: userId argument can not be null");  Preconditions.checkNotNull(commentText,"Error: commentText argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,commentText);}  }
class C{  private void helpTestHashIndexNotUsedInRangeQuery() throws Exception {  SelectResults results=(SelectResults)qs.newQuery("Select * FROM /portfolios p where p.ID < 2").execute();  assertFalse(observer.indexUsed);}  }
class C{  public void addColumn(String name,Class type){  addColumn(name,type,null);}  }
class C{  public boolean isReportingDetector(){  return !isDetectorClassSubtypeOf(TrainingDetector.class) && !isDetectorClassSubtypeOf(FirstPassDetector.class);}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  public void apply(){  if (mChart instanceof XYChart) {    if (((XYChart)mChart).getDataset() == null) {      return;    }    int scales=mRenderer.getScalesCount();    if (mRenderer.isInitialRangeSet()) {      for (int i=0; i < scales; i++) {        if (mRenderer.isInitialRangeSet(i)) {          mRenderer.setRange(mRenderer.getInitialRange(i),i);        }      }    } else {      XYSeries[] series=((XYChart)mChart).getDataset().getSeries();      double[] range=null;      int length=series.length;      if (length > 0) {        for (int i=0; i < scales; i++) {          range=new double[]{MathHelper.NULL_VALUE,-MathHelper.NULL_VALUE,MathHelper.NULL_VALUE,-MathHelper.NULL_VALUE};          for (int j=0; j < length; j++) {            if (i == series[j].getScaleNumber()) {              range[0]=Math.min(range[0],series[j].getMinX());              range[1]=Math.max(range[1],series[j].getMaxX());              range[2]=Math.min(range[2],series[j].getMinY());              range[3]=Math.max(range[3],series[j].getMaxY());            }          }          double marginX=Math.abs(range[1] - range[0]) / 40;          double marginY=Math.abs(range[3] - range[2]) / 40;          mRenderer.setRange(new double[]{range[0] - marginX,range[1] + marginX,range[2] - marginY,range[3] + marginY},i);        }      }    }  } else {    DefaultRenderer renderer=((RoundChart)mChart).getRenderer();    renderer.setScale(renderer.getOriginalScale());  }}  }
class C{  public void createTmpUser(User user){  TmpUserLockedAccessRestriction tuar=new TmpUserLockedAccessRestriction();  user.addRestriction(tuar);  create(user);}  }
class C{  private void reconfigureChartCanvas(){  for (  final Chart<?> chart : chartsCanvas.getChartList()) {    if (chart instanceof TimeChart) {      final TimeChart<?> tc=(TimeChart<?>)chart;      tc.setInSeconds(inSecondsCheckBox.isSelected());      tc.setRange(rangeMin,rangeMax);    }  }  chartTypeFactoryMap.get(chartComboBox.getSelectedItem()).reconfigureChartCanvas();}  }
class C{  public boolean enableUserAccount(String tenantName,PrincipalId userId) throws Exception {  return getService().enableUserAccount(tenantName,userId,this.getServiceContext());}  }
class C{  public static float max(float x,float y){  return (x >= y) ? x : y;}  }
class C{  public static void saveAsASCII(NSArray root,File out) throws IOException {  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toASCIIPropertyList());  w.close();}  }
class C{  private static InsnNode processNewArray(MethodNode mth,List<InsnNode> instructions,int i,InstructionRemover remover){  NewArrayNode newArrayInsn=(NewArrayNode)instructions.get(i);  InsnArg arg=newArrayInsn.getArg(0);  if (!arg.isLiteral()) {    return null;  }  int len=(int)((LiteralArg)arg).getLiteral();  int size=instructions.size();  if (len <= 0 || i + len >= size || instructions.get(i + len).getType() != InsnType.APUT) {    return null;  }  ArgType arrType=newArrayInsn.getArrayType();  InsnNode filledArr=new FilledNewArrayNode(arrType.getArrayElement(),len);  filledArr.setResult(newArrayInsn.getResult());  for (int j=0; j < len; j++) {    InsnNode put=instructions.get(i + 1 + j);    if (put.getType() != InsnType.APUT) {      LOG.debug("Not a APUT in expected new filled array: {}, method: {}",put,mth);      return null;    }    filledArr.addArg(put.getArg(2));    remover.add(put);  }  return filledArr;}  }
class C{  protected String constructJqGridResponse(final String jsonData){  return new StringBuilder().append("{\"page\":").append(page).append(",\"total\":").append(getTotalPages()).append(",\"records\":").append(totalRecords).append(",\"rows\":").append(jsonData).append("}").toString();}  }
class C{  public static VTimezone vtimezoneNewYork(){  ICalReader reader=new ICalReader(TestUtils.class.getResourceAsStream("New_York.ics"));  ICalendar ical;  try {    ical=reader.readNext();  } catch (  IOException e) {    throw new RuntimeException(e);  } finally {    try {      reader.close();    } catch (    IOException e) {      throw new RuntimeException(e);    }  }  return ical.getTimezoneInfo().getComponents().iterator().next();}  }
class C{  public double gaussianDownsideDeviation(){  return Math.sqrt(gaussianDownsideVariance());}  }
class C{  @Override public boolean isInitOverriden(){  return isInitOverriden;}  }
class C{  public Rect guaranteedSafeCrop(ImageProxy image,@Nullable Rect crop){  return guaranteedSafeCrop(image.getWidth(),image.getHeight(),crop);}  }
class C{  public static int compute1(int x){  int lo=16807 * (x & 0xFFFF);  int hi=16807 * (x >>> 16);  lo+=(hi & 0x7FFF) << 16;  if ((lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  lo+=hi >>> 15;  if (lo == 0 || (lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  return lo;}  }
class C{  public boolean areNonWorldReadableExtensionsVisible(){  return mNonWorldReadableExtensionsVisible;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  @Override public int compareTo(ReminderEntry re){  if (re.mMinutes != mMinutes) {    return re.mMinutes - mMinutes;  }  if (re.mMethod != mMethod) {    return mMethod - re.mMethod;  }  return 0;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static int countMatches(String str,String sub){  if (sub.equals("")) {    return 0;  }  if (str == null) {    return 0;  }  int count=0;  int idx=0;  while ((idx=str.indexOf(sub,idx)) != -1) {    count++;    idx+=sub.length();  }  return count;}  }
class C{  public void testRoundingError(){  S2Point a=new S2Point(-0.9190364081111774,0.17231932652084575,0.35451111445694833);  S2Point b=new S2Point(-0.92130667053206,0.17274500072476123,0.3483578383756171);  S2Point c=new S2Point(-0.9257244057938284,0.17357332608634282,0.3360158106235289);  S2Point d=new S2Point(-0.9278712595449962,0.17397586116468677,0.32982923679138537);  assertTrue(S2Loop.isValid(Lists.newArrayList(a,b,c,d)));}  }
class C{  private String instancesAndWeights(){  StringBuffer text=new StringBuffer();  for (int i=0; i < numInstances(); i++) {    text.append(instance(i) + " " + instance(i).weight());    if (i < numInstances() - 1) {      text.append("\n");    }  }  return text.toString();}  }
class C{  public static Test suite(){  return (new TestSuite(ViewRootPhaseListenerITCase.class));}  }
class C{  @Override public void add(Object item){  addElement(item);}  }
class C{  public Map<String,Object> transformSourceAsMap(Map<String,Object> sourceAsMap){  return DocumentParser.transformSourceAsMap(mapping,sourceAsMap);}  }
class C{  public void xorOn(){  offscreen.setXORMode(DEFAULT_CLEAR_COLOR);}  }
class C{  public TLAFastPartitioner(IPartitionTokenScanner scanner,String[] legalContentTypes){  fScanner=(TLAPartitionScanner)scanner;  fLegalContentTypes=TextUtilities.copy(legalContentTypes);  fPositionCategory=CONTENT_TYPES_CATEGORY + hashCode();  fPositionUpdater=new DefaultPositionUpdater(fPositionCategory);}  }
class C{  public Bitmap generateIconForText(String text){  Bitmap icon=Bitmap.createBitmap(mIconWidthPx,mIconHeightPx,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(icon);  canvas.drawRoundRect(mBackgroundRect,mCornerRadiusPx,mCornerRadiusPx,mBackgroundPaint);  String displayText=text.substring(0,1).toUpperCase(Locale.getDefault());  float textWidth=mTextPaint.measureText(displayText);  canvas.drawText(displayText,(mIconWidthPx - textWidth) / 2f,Math.round((Math.max(mIconHeightPx,mTextHeight) - mTextHeight) / 2.0f + mTextYOffset),mTextPaint);  return icon;}  }
class C{  public List<Graph> search(){  long start=System.currentTimeMillis();  TetradLogger.getInstance().log("info","Starting ION Search.");  logGraphs("\nInitial Pags: ",this.input);  TetradLogger.getInstance().log("info","Transfering local information.");  long steps=System.currentTimeMillis();  List<Node> varNodes=new ArrayList<>();  for (  String varName : variables) {    varNodes.add(new GraphNode(varName));  }  Graph graph=new EdgeListGraph(varNodes);  transferLocal(graph);  for (  NodePair pair : nonIntersection(graph)) {    graph.addEdge(new Edge(pair.getFirst(),pair.getSecond(),Endpoint.CIRCLE,Endpoint.CIRCLE));  }  TetradLogger.getInstance().log("info","Steps 1-2: " + (System.currentTimeMillis() - steps) / 1000. + "s");  System.out.println("step2");  System.out.println(graph);  steps=System.currentTimeMillis();  Queue<Graph> searchPags=new LinkedList<>();  searchPags.offer(graph);  List<Set<IonIndependenceFacts>> sepAndAssoc=findSepAndAssoc(graph);  this.separations=sepAndAssoc.get(0);  this.associations=sepAndAssoc.get(1);  Map<Collection<Node>,List<PossibleDConnectingPath>> paths;  HashSet<Graph> step3PagsSet=new HashSet<>();  Set<Graph> reject=new HashSet<>();  if (separations.isEmpty()) {    step3PagsSet.add(graph);  }  int numNodes=graph.getNumNodes();  int pl=numNodes - 1;  if (pathLengthSearch) {    pl=2;  }  for (int l=pl; l < numNodes; l++) {    if (pathLengthSearch) {      TetradLogger.getInstance().log("info","Braching over path lengths: " + l + " of "+ (numNodes - 1));    }    int seps=separations.size();    int currentSep=1;    int numAdjacencies=separations.size();    for (    IonIndependenceFacts fact : separations) {      if (adjacencySearch) {        TetradLogger.getInstance().log("info","Braching over path nonadjacencies: " + currentSep + " of "+ numAdjacencies);      }      seps--;      searchPags.addAll(step3PagsSet);      recGraphs.add(searchPags.size());      step3PagsSet.clear();      while (!searchPags.isEmpty()) {        System.out.println("ION Step 3 size: " + searchPags.size());        double currentUsage=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();        if (currentUsage > maxMemory)         maxMemory=currentUsage;        Graph pag=searchPags.poll();        List<PossibleDConnectingPath> dConnections=new ArrayList<>();        if (adjacencySearch) {          for (          Collection<Node> conditions : fact.getZ()) {            if (pathLengthSearch) {              dConnections.addAll(PossibleDConnectingPath.findDConnectingPathsOfLength(pag,fact.getX(),fact.getY(),conditions,l));            } else {              dConnections.addAll(PossibleDConnectingPath.findDConnectingPaths(pag,fact.getX(),fact.getY(),conditions));            }          }        } else {          for (          IonIndependenceFacts allfact : separations) {            for (            Collection<Node> conditions : allfact.getZ()) {              if (pathLengthSearch) {                dConnections.addAll(PossibleDConnectingPath.findDConnectingPathsOfLength(pag,allfact.getX(),allfact.getY(),conditions,l));              } else {                dConnections.addAll(PossibleDConnectingPath.findDConnectingPaths(pag,allfact.getX(),allfact.getY(),conditions));              }            }          }        }        if (dConnections.isEmpty()) {          step3PagsSet.add(pag);          continue;        }        paths=new HashMap<>();        for (        PossibleDConnectingPath path : dConnections) {          List<PossibleDConnectingPath> p=paths.get(path.getConditions());          if (p == null) {            p=new LinkedList<>();          }          p.add(path);          paths.put(path.getConditions(),p);        }        List<Set<GraphChange>> possibleChanges=new ArrayList<>();        for (        Set<GraphChange> changes : findChanges(paths)) {          Set<GraphChange> newChanges=new HashSet<>();          for (          GraphChange gc : changes) {            boolean okay=true;            for (            Triple collider : gc.getColliders()) {              if (pag.isUnderlineTriple(collider.getX(),collider.getY(),collider.getZ())) {                okay=false;                break;              }            }            if (!okay) {              continue;            }            for (            Triple collider : gc.getNoncolliders()) {              if (pag.isDefCollider(collider.getX(),collider.getY(),collider.getZ())) {                okay=false;                break;              }            }            if (okay) {              newChanges.add(gc);            }          }          if (!newChanges.isEmpty()) {            possibleChanges.add(newChanges);          } else {            possibleChanges.clear();            break;          }        }        float starthitset=System.currentTimeMillis();        Collection<GraphChange> hittingSets=IonHittingSet.findHittingSet(possibleChanges);        recHitTimes.add((System.currentTimeMillis() - starthitset) / 1000.);        for (        GraphChange gc : hittingSets) {          boolean badhittingset=false;          for (          Edge edge : gc.getRemoves()) {            Node node1=edge.getNode1();            Node node2=edge.getNode2();            Set<Triple> triples=new HashSet<>();            triples.addAll(gc.getColliders());            triples.addAll(gc.getNoncolliders());            if (triples.size() != (gc.getColliders().size() + gc.getNoncolliders().size())) {              badhittingset=true;              break;            }            for (            Triple triple : triples) {              if (node1.equals(triple.getY())) {                if (node2.equals(triple.getX()) || node2.equals(triple.getZ())) {                  badhittingset=true;                  break;                }              }              if (node2.equals(triple.getY())) {                if (node1.equals(triple.getX()) || node1.equals(triple.getZ())) {                  badhittingset=true;                  break;                }              }            }            if (badhittingset) {              break;            }            for (            NodePair pair : gc.getOrients()) {              if ((node1.equals(pair.getFirst()) && node2.equals(pair.getSecond())) || (node2.equals(pair.getFirst()) && node1.equals(pair.getSecond()))) {                badhittingset=true;                break;              }            }            if (badhittingset) {              break;            }          }          if (!badhittingset) {            for (            NodePair pair : gc.getOrients()) {              for (              Triple triple : gc.getNoncolliders()) {                if (pair.getSecond().equals(triple.getY())) {                  if (pair.getFirst().equals(triple.getX()) && pag.getEndpoint(triple.getZ(),triple.getY()).equals(Endpoint.ARROW)) {                    badhittingset=true;                    break;                  }                  if (pair.getFirst().equals(triple.getZ()) && pag.getEndpoint(triple.getX(),triple.getY()).equals(Endpoint.ARROW)) {                    badhittingset=true;                    break;                  }                }                if (badhittingset) {                  break;                }              }              if (badhittingset) {                break;              }            }          }          if (badhittingset) {            continue;          }          Graph changed=gc.applyTo(pag);          if (reject.contains(changed)) {            continue;          }          if (step3PagsSet.contains(changed)) {            continue;          }          if (predictsFalseIndependence(associations,changed) || changed.existsDirectedCycle()) {            reject.add(changed);          }          step3PagsSet.add(changed);        }      }      if (!adjacencySearch) {        break;      }    }  }  TetradLogger.getInstance().log("info","Step 3: " + (System.currentTimeMillis() - steps) / 1000. + "s");  Queue<Graph> step3Pags=new LinkedList<>(step3PagsSet);  steps=System.currentTimeMillis();  Map<Edge,Boolean> necEdges;  Set<Graph> outputPags=new HashSet<>();  while (!step3Pags.isEmpty()) {    Graph pag=step3Pags.poll();    necEdges=new HashMap<>();    for (    Edge edge : pag.getEdges()) {      necEdges.put(edge,false);    }    for (    IonIndependenceFacts fact : associations) {      for (      List<Node> nodes : fact.getZ()) {        if (nodes.isEmpty()) {          List<List<Node>> treks=treks(pag,fact.x,fact.y);          if (treks.size() == 1) {            List<Node> trek=treks.get(0);            List<Triple> triples=new ArrayList<>();            for (int i=1; i < trek.size(); i++) {              necEdges.put(pag.getEdge(trek.get(i - 1),trek.get(i)),true);              if (i == 1) {                continue;              }              pag.addUnderlineTriple(trek.get(i - 2),trek.get(i - 1),trek.get(i));            }          }          break;        }      }    }    boolean elimTreks;    List<Graph> possRemovePags=possRemove(pag,necEdges);    double currentUsage=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();    if (currentUsage > maxMemory)     maxMemory=currentUsage;    for (    Graph newPag : possRemovePags) {      elimTreks=false;      for (      IonIndependenceFacts fact : associations) {        for (        List<Node> nodes : fact.getZ()) {          if (nodes.isEmpty()) {            if (treks(newPag,fact.x,fact.y).isEmpty()) {              elimTreks=true;            }            break;          }        }      }      if (!elimTreks) {        outputPags.add(newPag);      }    }  }  outputPags=removeMoreSpecific(outputPags);  TetradLogger.getInstance().log("info","Step 4: " + (System.currentTimeMillis() - steps) / 1000. + "s");  steps=System.currentTimeMillis();  Set<Graph> outputSet=new HashSet<>();  for (  Graph pag : outputPags) {    Set<Triple> unshieldedPossibleColliders=new HashSet<>();    for (    Triple triple : getPossibleTriples(pag)) {      if (!pag.isAdjacentTo(triple.getX(),triple.getZ())) {        unshieldedPossibleColliders.add(triple);      }    }    PowerSet<Triple> pset=new PowerSet<>(unshieldedPossibleColliders);    for (    Set<Triple> set : pset) {      Graph newGraph=new EdgeListGraph(pag);      for (      Triple triple : set) {        newGraph.setEndpoint(triple.getX(),triple.getY(),Endpoint.ARROW);        newGraph.setEndpoint(triple.getZ(),triple.getY(),Endpoint.ARROW);      }      doFinalOrientation(newGraph);    }    for (    Graph outputPag : finalResult) {      if (!predictsFalseIndependence(associations,outputPag)) {        Set<Triple> underlineTriples=new HashSet<>(outputPag.getUnderLines());        for (        Triple triple : underlineTriples) {          outputPag.removeUnderlineTriple(triple.getX(),triple.getY(),triple.getZ());        }        outputSet.add(outputPag);      }    }  }  outputSet=checkPaths(outputSet);  output.addAll(outputSet);  TetradLogger.getInstance().log("info","Step 5: " + (System.currentTimeMillis() - steps) / 1000. + "s");  runtime=((System.currentTimeMillis() - start) / 1000.);  logGraphs("\nReturning output (" + output.size() + " Graphs):",output);  double currentUsage=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();  if (currentUsage > maxMemory)   maxMemory=currentUsage;  return output;}  }
class C{  public PrintItemImage(BufferedImage image,double scale){  this.image=image;  this.scale=scale;}  }
class C{  public WrappedIndentingWriter(Writer out,int width){  this(out,width,"");}  }
class C{  public T peek(){  if (size() > 0) {    return get(size() - 1);  }  return null;}  }
class C{  public ViewSettings templateEngine(TemplateEngine templateEngine){  Assert.notNull(templateEngine);  LOGGER.debug("Switch TemplateEngine With [{}]",templateEngine);  this.templateEngine=templateEngine;  return this;}  }
class C{  public PublicationException(TYPE type,String message){  super(message);  this.type=type;}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.REACTION_PROPERTY;}  }
class C{  public List<DBNote> searchNotes(String query){  return getNotesCustom(key_status + " != ? AND " + key_content+ " LIKE ?",new String[]{DBStatus.LOCAL_DELETED.getTitle(),"%" + query + "%"},key_modified + " DESC");}  }
class C{  private void checkVolExists(String entidad) throws Exception {  int count;  VolumesTable table=new VolumesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (_id == ISicresAdminDefsKeys.NULL_ID)     count=DbSelectFns.selectCount(dbConn,table.getVolumeTableName(),table.getCountVolNameQual(_name)); else     count=DbSelectFns.selectCount(dbConn,table.getVolumeTableName(),table.getCountVolNameIdQual(_id,_name));    if (count > 0)     ISicresAdminBasicException.throwException(ISicresAdminVolumeKeys.EC_VOL_EXIST_NAME);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public static float[] clampBounds(float[] target){  return clampBounds(target,NORMALIZED_CLAMP);}  }
class C{  public int childPosition(int level){  return (int)(id >>> (2 * (MAX_LEVEL - level) + 1)) & 3;}  }
class C{  void openOutput(){  String file=getFileName();  if (file == null) {    return;  }  if (isEncrypted()) {    initStore();    out=new FileStoreOutputStream(store,this,compressionAlgorithm);    out=new BufferedOutputStream(out,Constants.IO_BUFFER_SIZE_COMPRESS);  } else {    OutputStream o;    try {      o=FileUtils.newOutputStream(file,false);    } catch (    IOException e) {      throw DbException.convertIOException(e,null);    }    out=new BufferedOutputStream(o,Constants.IO_BUFFER_SIZE);    out=CompressTool.wrapOutputStream(out,compressionAlgorithm,SCRIPT_SQL);  }}  }
class C{  public void addExtension(String extension){  if (!extension.startsWith("."))   extension="." + extension;  extensions.add(extension.toLowerCase());}  }
class C{  public BusinessObjectDataAttributeDefinitionEntity createBusinessObjectDataAttributeDefinitionEntity(BusinessObjectFormatEntity businessObjectFormatEntity,String businessObjectDataAttributeName,boolean publishBusinessObjectDataAttribute){  BusinessObjectDataAttributeDefinitionEntity businessObjectDataAttributeDefinitionEntity=new BusinessObjectDataAttributeDefinitionEntity();  businessObjectDataAttributeDefinitionEntity.setBusinessObjectFormat(businessObjectFormatEntity);  businessObjectDataAttributeDefinitionEntity.setName(businessObjectDataAttributeName);  businessObjectDataAttributeDefinitionEntity.setPublish(publishBusinessObjectDataAttribute);  businessObjectFormatEntity.getAttributeDefinitions().add(businessObjectDataAttributeDefinitionEntity);  businessObjectFormatDao.saveAndRefresh(businessObjectFormatEntity);  return businessObjectDataAttributeDefinitionEntity;}  }
class C{  public synchronized int lastIndexOf(Object elem){  return lastIndexOf(elem,elementCount - 1);}  }
class C{  public ContainerTag with(Iterable<? extends DomContent> children){  if (children != null) {    for (    DomContent child : children) {      this.with(child);    }  }  return this;}  }
class C{  public Negater(){  super();}  }
class C{  public static Bitmap decodeByteArraySubsampled(byte[] bytes,int width,int height){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeByteArray(bytes,0,bytes.length,options);  if (width > 0 && height > 0) {    options.inSampleSize=calculateSampleSize(options,width,height);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeByteArray(bytes,0,bytes.length,options);}  }
class C{  private void startTimer(){  SingletonRepository.getTurnNotifier().notifyInSeconds(TIME_BETWEEN_SOUNDS,this);}  }
class C{  @Override public boolean mayRemoveInstanceAfterFirstBatchDone(){  boolean result=false;  for (  Filter f : m_Filters) {    result=(result || f.mayRemoveInstanceAfterFirstBatchDone());  }  return result;}  }
class C{  public boolean isExpandStrings(){  return expandStrings;}  }
class C{  public void fadeOutAllLayers(){  mTransitionState=TRANSITION_STARTING;  Arrays.fill(mIsLayerOn,false);  invalidateSelf();}  }
class C{  public AsyncResult FindServersAsync(FindServersRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public boolean isAim(){  return isProtocol(AIM);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean isVisible(Entity entity){  return this.visible;}  }
class C{  public DefaultActivityModel(Object owner,String title,final String note,final int min,final int max,final boolean isIndeterminate){  super(min,0,min,max);  this.owner=owner;  this.title=title;  this.note=note;  this.isIndeterminate=isIndeterminate;  ActivityManager.getInstance().add(this);}  }
class C{  public BicomponentClusterer(){}  }
class C{  public Command(String command,Image icon){  this.command=command;  this.icon=icon;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  private void loadWall(){  getLoaderManager().restartLoader(AppConstants.Loaders.LOAD_WALL,null,this);}  }
class C{  public MLet(URL[] urls,ClassLoader parent,boolean delegateToCLR){  super(urls,parent);  init(delegateToCLR);}  }
class C{  public String exportProfileToString(RulesProfile profile){  StringWriter writer=new StringWriter();  exportProfile(profile,writer);  return writer.toString();}  }
class C{  public void copyAutomation(Automation automation){  if (automation != null) {    setComment(automation.getComment());    for (    AutomationItem item : automation.getItemsBySequenceList()) {      addItem().copyItem(item);    }    for (    AutomationItem item : getItemsBySequenceList()) {      if (item.getGotoAutomationItem() != null) {        item.setGotoAutomationItem(getItemBySequenceId(item.getGotoAutomationItem().getSequenceId()));      }    }  }}  }
class C{  public String toString(){  return String.format("SerializableLocation[%s %f, %f acc(%b)=%f alt(%b)=%f bear(%b)=%f speed(%b)=%f time=%d]",provider,latitude,longitude,hasAccuracy,accuracy,hasAltitude,altitude,hasBearing,bearing,hasSpeed,speed,time);}  }
class C{  @Override public void run(){  try {    if (outputSpeech == null) {      return;    }    if (speechPanel != null) {      speechPanel.setSystemTalking(true);    }    Mixer.Info outputMixer=system.getSettings().outputMixer;    AudioFormat format=outputSpeech.getFormat();    SourceDataLine line=AudioSystem.getSourceDataLine(format,outputMixer);    line.open(format);    line.start();    int nBytesRead=0;    byte[] abData=new byte[512 * 16];    while (!outputSpeech.isFinal() && outputSpeech.length() < 500) {      Thread.sleep(100);    }    while (nBytesRead != -1) {      nBytesRead=outputSpeech.read(abData,0,abData.length);      if (inputSpeech != null || isPaused) {        break;      }      if (nBytesRead >= 0) {        line.write(abData,0,nBytesRead);      }    }    if (speechPanel != null) {      speechPanel.setSystemTalking(false);    }    outputSpeech=null;    line.drain();    if (line.isOpen()) {      line.close();    }  } catch (  LineUnavailableException|InterruptedException e) {    log.warning("Audio line is unavailable: " + e);  }  if (inputSpeech == null) {    system.addContent(system.getSettings().floor,"free");  }}  }
class C{  public boolean matchWithRegEx(String aRegEx){  if (TextUtils.isEmpty(aRegEx)) {    return false;  }  boolean matched=false;  if (!TextUtils.isEmpty(mDisplayName)) {    matched=mDisplayName.matches(aRegEx);  }  if (!matched) {    for (    String email : mEmails) {      matched|=email.matches(aRegEx);    }  }  return matched;}  }
class C{  public LongArray toArray(){  LongArray array=new LongArray(true,map.size);  while (hasNext)   array.add(next());  return array;}  }
class C{  public void testBug51704() throws Exception {  createTable("testBug51704","(field1 TIMESTAMP)");  Connection rewriteConn=getConnectionWithProps("rewriteBatchedStatements=true");  Statement rewriteStmt=rewriteConn.createStatement();  try {    rewriteStmt.setEscapeProcessing(false);    for (int i=0; i < 20; i++) {      rewriteStmt.addBatch("INSERT INTO testBug51704 VALUES ({tsp '2002-11-12 10:00:00'})");    }    rewriteStmt.executeBatch();    Statement batchStmt=this.conn.createStatement();    batchStmt.setEscapeProcessing(false);    batchStmt.addBatch("INSERT INTO testBug51704 VALUES ({tsp '2002-11-12 10:00:00'})");    batchStmt.executeBatch();  }  finally {    rewriteConn.close();  }}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public void proposeReceived(Epoch epoch,ConsensusMessage msg){  int cid=epoch.getConsensus().getId();  int ts=epoch.getConsensus().getEts();  int ets=executionManager.getConsensus(msg.getNumber()).getEts();  Logger.println("(Acceptor.proposeReceived) PROPOSE for consensus " + cid);  if (msg.getSender() == executionManager.getCurrentLeader() && epoch.getTimestamp() == 0 && ts == ets && ets == 0) {    executePropose(epoch,msg.getValue());  } else {    Logger.println("Propose received is not from the expected leader");  }}  }
class C{  @SuppressWarnings({"JavaDoc"}) static <T>Iterator<T> nullSafeIterator(Iterable<T> iterable){  return iterable == null ? Collections.<T>emptyList().iterator() : iterable.iterator();}  }
class C{  @DSComment("movement of Intent is spec") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.784 -0500",hash_original_method="FFF5B803FCB58F324812D605B6C9CE62",hash_generated_method="3CBB35A7E6A8533169E7E4AFDAFF741D") public final void addAction(String action){  mActions=action;}  }
class C{  public final int verticalDHTPosition(final byte[] urlHash){  int vdp=(int)(Distribution.horizontalDHTPosition(urlHash) >> this.shiftLength);  assert vdp >= 0;  assert vdp < this.partitionCount;  return vdp;}  }
class C{  public synchronized int totalRecoverFiles(){  int total=0;  for (  File file : fileDetails.values()) {    if (file.reused() == false) {      total++;    }  }  return total;}  }
class C{  public void removeParamPanel(AbstractParamPanel panel){  if (currentShownPanel == panel) {    currentShownPanel=null;    nameLastSelectedPanel=null;    if (isShowing()) {      if (tablePanel.isEmpty()) {        getTxtHeadline().setText("");        getHelpButton().setVisible(false);      } else {        getTreeParam().setSelectionPath(new TreePath(getFirstAvailableNode().getPath()));      }    }  }  DefaultMutableTreeNode node=this.getTreeNodeFromPanelName(panel.getName(),true);  if (node != null) {    getTreeModel().removeNodeFromParent(node);  }  getPanelParam().remove(panel);  tablePanel.remove(panel.getName());}  }
class C{  @SuppressWarnings("static-access") private void resetVendor(boolean isSource,String newName){  String vendor=null;  if (isSource) {    if (newName == null) {      vendor=s_parameters.getSourceVendor().toLowerCase();    } else     if (newName.length() == 0) {      if (m_sourceVendor.getSelectedItem() != null)       vendor=m_sourceVendor.getSelectedItem().toString();    } else {      vendor=newName;    }    m_sourceVendor.setSelectedItem(vendor);    m_sourceVendorOld=vendor;  } else {    if (newName == null) {      vendor=s_parameters.getTargetVendor().toLowerCase();    } else     if (newName.length() == 0) {      if (m_targetVendor.getSelectedItem() != null)       vendor=m_targetVendor.getSelectedItem().toString();    } else {      vendor=newName;    }    m_targetVendor.setSelectedItem(vendor);    m_targetVendorOld=vendor;  }  resetModeStatus();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  static String makeScrambledPassword(String password) throws NoSuchAlgorithmException {  long[] passwordHash=Util.hashPre41Password(password);  StringBuilder scramble=new StringBuilder();  scramble.append(longToHex(passwordHash[0]));  scramble.append(longToHex(passwordHash[1]));  return scramble.toString();}  }
class C{  public static final float fastPow(float a,float b){  float x=Float.floatToRawIntBits(a);  x*=INV_SHIFT23;  x-=127;  float y=x - (x >= 0 ? (int)x : (int)x - 1);  b*=x + (y - y * y) * 0.346607f;  y=b - (b >= 0 ? (int)b : (int)b - 1);  y=(y - y * y) * 0.33971f;  return Float.intBitsToFloat((int)((b + 127 - y) * SHIFT23));}  }
class C{  public static void moveToAndClick(RemoteWebDriver parent,By moveTo,By click,int waitInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(moveTo);  Preconditions.checkNotNull(click);  moveTo(parent,moveTo,waitInSeconds);  findElementClickableAfter(parent,click,waitInSeconds).click();}  }
class C{  protected void waitForImage(Image image){  int id=++nextTrackerID;  tracker.addImage(image,id);  try {    tracker.waitForID(id,0);  } catch (  InterruptedException e) {    e.printStackTrace();  }  tracker.removeImage(image,id);}  }
class C{  void splitZone(int index,int offs0,int offs1){  Element elem=getElement();  Document doc=elem.getDocument();  Vector<View> zones=new Vector<View>();  int offs=offs0;  do {    offs0=offs;    offs=Math.min(getDesiredZoneEnd(offs0),offs1);    zones.addElement(createZone(offs0,offs));  } while (offs < offs1);  View oldZone=getView(index);  View[] newZones=new View[zones.size()];  zones.copyInto(newZones);  replace(index,1,newZones);}  }
class C{  @Override public void executeInstruction(ExecutionContext ec,ExternalFunctionInvocationInstruction inst) throws DMLRuntimeException {  super.executeInstruction(ec,inst);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public final void sendMessage(int what,Object obj){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessage(obtainMessage(what,obj));}  }
class C{  private void consumeNonExecutePrefix(){  nextNonWhitespace(true);  position--;  if (position + NON_EXECUTE_PREFIX.length > limit) {    return;  }  for (int i=0; i < NON_EXECUTE_PREFIX.length; i++) {    if (in.charAt(position + i) != NON_EXECUTE_PREFIX[i]) {      return;    }  }  position+=NON_EXECUTE_PREFIX.length;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.587 -0500",hash_original_method="19036A7D1DADA943DC912DAB6396B9AD",hash_generated_method="6C0E3EFDD2ACA49FF7AF90314964240F") private boolean regCodeIsRoaming(int code){  return 5 == code;}  }
class C{  public boolean startSsl(IoSession session) throws SSLException {  SslHandler sslHandler=getSslSessionHandler(session);  boolean started;  try {synchronized (sslHandler) {      if (sslHandler.isOutboundDone()) {        NextFilter nextFilter=(NextFilter)session.getAttribute(NEXT_FILTER);        sslHandler.destroy();        sslHandler.init();        sslHandler.handshake(nextFilter);        started=true;      } else {        started=false;      }    }    sslHandler.flushScheduledEvents();  } catch (  SSLException se) {    sslHandler.release();    throw se;  }  return started;}  }
class C{  public boolean isCentrallyMaintained(){  Object oo=get_Value(COLUMNNAME_IsCentrallyMaintained);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void removeAllDataCallbacks(){  dataCallbacks.clear();}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(uri,localName,DTM.ELEMENT_NODE);  int prefixIndex=(qName.length() != localName.length()) ? m_valuesOrPrefixes.stringToIndex(qName) : 0;  int elemNode=addNode(DTM.ELEMENT_NODE,exName,m_parents.peek(),m_previous,prefixIndex,true);  if (m_indexing)   indexNode(exName,elemNode);  m_parents.push(elemNode);  int startDecls=m_contextIndexes.peek();  int nDecls=m_prefixMappings.size();  String prefix;  if (!m_pastFirstElement) {    prefix="xml";    String declURL="http://www.w3.org/XML/1998/namespace";    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    m_values.addElement(declURL);    int val=m_valueIndex++;    addNode(DTM.NAMESPACE_NODE,exName,elemNode,DTM.NULL,val,false);    m_pastFirstElement=true;  }  for (int i=startDecls; i < nDecls; i+=2) {    prefix=(String)m_prefixMappings.elementAt(i);    if (prefix == null)     continue;    String declURL=(String)m_prefixMappings.elementAt(i + 1);    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    m_values.addElement(declURL);    int val=m_valueIndex++;    addNode(DTM.NAMESPACE_NODE,exName,elemNode,DTM.NULL,val,false);  }  int n=attributes.getLength();  for (int i=0; i < n; i++) {    String attrUri=attributes.getURI(i);    String attrQName=attributes.getQName(i);    String valString=attributes.getValue(i);    int nodeType;    String attrLocalName=attributes.getLocalName(i);    if ((null != attrQName) && (attrQName.equals("xmlns") || attrQName.startsWith("xmlns:"))) {      prefix=getPrefix(attrQName,attrUri);      if (declAlreadyDeclared(prefix))       continue;      nodeType=DTM.NAMESPACE_NODE;    } else {      nodeType=DTM.ATTRIBUTE_NODE;      if (m_buildIdIndex && attributes.getType(i).equalsIgnoreCase("ID"))       setIDAttribute(valString,elemNode);    }    if (null == valString)     valString="";    m_values.addElement(valString);    int val=m_valueIndex++;    if (attrLocalName.length() != attrQName.length()) {      prefixIndex=m_valuesOrPrefixes.stringToIndex(attrQName);      int dataIndex=m_data.size();      m_data.addElement(prefixIndex);      m_data.addElement(val);      val=-dataIndex;    }    exName=m_expandedNameTable.getExpandedTypeID(attrUri,attrLocalName,nodeType);    addNode(nodeType,exName,elemNode,DTM.NULL,val,false);  }  if (null != m_wsfilter) {    short wsv=m_wsfilter.getShouldStripSpace(makeNodeHandle(elemNode),this);    boolean shouldStrip=(DTMWSFilter.INHERIT == wsv) ? getShouldStripWhitespace() : (DTMWSFilter.STRIP == wsv);    pushShouldStripWhitespace(shouldStrip);  }  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  protected void postNamedBean(NamedBean bean,@Nonnull JsonNode data,@Nonnull String name,@Nonnull String type,@Nonnull Locale locale) throws JsonException {  if (bean == null) {    throw new JsonException(404,Bundle.getMessage(locale,"ErrorObject",type,name));  }  if (data.path(JSON.USERNAME).isTextual()) {    bean.setUserName(data.path(JSON.USERNAME).asText());  }  if (data.path(JSON.COMMENT).isTextual()) {    bean.setComment(data.path(JSON.COMMENT).asText());  }}  }
class C{  @Override void createEntry(int hash,K key,V value,int bucketIndex){  HashMapPro.Entry<K,V> old=table[bucketIndex];  Entry<K,V> e=new Entry<K,V>(hash,key,value,old);  table[bucketIndex]=e;  e.addBefore(header);  size++;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public InterruptedIOException(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int read() throws IOException {  if (stream != null) {    return stream.read();  } else {    return reader.read();  }}  }
class C{  public ScriptedProblem(File file) throws ScriptException, IOException {  super();  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    engine=newScriptEngine(file);    internalProblem=createInvocableInstance(reader);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public DatabaseResultListener() throws Exception {  super();}  }
class C{  public void testFiveNodeSubmitQueryWithSequentialConsistency() throws Throwable {  testSubmitQuery(5,Query.ConsistencyLevel.SEQUENTIAL);}  }
class C{  public ModuleFolderFilter(IPath prefix){  this.prefix=prefix;}  }
class C{  @Override public void shutdown(ShutdownModeAmp mode){  for (int i=_serviceCloseList.size() - 1; i >= 0; i--) {    ServiceRefAmp service=_serviceCloseList.get(i);    service.shutdown(mode);  }}  }
class C{  public TomcatRuntimeConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.TRUE);  this.propertySupportMap.put(ServletPropertySet.PORT,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.URI,Boolean.TRUE);}  }
class C{  public void writeRawLittleEndian64(final long value) throws IOException {  writeRawByte((int)(value) & 0xFF);  writeRawByte((int)(value >> 8) & 0xFF);  writeRawByte((int)(value >> 16) & 0xFF);  writeRawByte((int)(value >> 24) & 0xFF);  writeRawByte((int)(value >> 32) & 0xFF);  writeRawByte((int)(value >> 40) & 0xFF);  writeRawByte((int)(value >> 48) & 0xFF);  writeRawByte((int)(value >> 56) & 0xFF);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean hasString(){  return (null != m_strCache);}  }
class C{  public TopologyLocation(int on,int left,int right){  init(3);  location[Position.ON]=on;  location[Position.LEFT]=left;  location[Position.RIGHT]=right;}  }
class C{  public void notifyHorizontalEdgeReached(int startX,int finalX,int overX){  mScrollerX.notifyEdgeReached(startX,finalX,overX);}  }
class C{  public CanvasContainerBuilder position(Function<CanvasComponent,Position2D> mapper){  this.mapper=mapper;  return this;}  }
class C{  protected String resolvePrefix(SerializationHandler rhandler,String prefix,String nodeNamespace) throws TransformerException {  return prefix;}  }
class C{  public CtClass makeInterface(String name) throws RuntimeException {  return makeInterface(name,null);}  }
class C{  public static <L,M,R>MutableTriple<L,M,R> of(final L left,final M middle,final R right){  return new MutableTriple<L,M,R>(left,middle,right);}  }
class C{  public OutlierListCollection(){  this.outlierLists=new ArrayList();}  }
class C{  boolean save(){  createHandler();  String title=mTitle.getText().toString().trim();  String unfilteredUrl=UrlUtils.fixUpUrl(mAddress.getText().toString());  boolean emptyTitle=title.length() == 0;  boolean emptyUrl=unfilteredUrl.trim().length() == 0;  Resources r=getResources();  if (emptyTitle || (emptyUrl && !mEditingFolder)) {    if (emptyTitle) {      mTitle.setError(r.getText(R.string.bookmark_needs_title));    }    if (emptyUrl) {      mAddress.setError(r.getText(R.string.bookmark_needs_url));    }    return false;  }  String url=unfilteredUrl.trim();  if (!mEditingFolder) {    try {      if (!url.toLowerCase().startsWith("javascript:")) {        URI uriObj=new URI(url);        String scheme=uriObj.getScheme();        if (scheme == null) {          WebAddress address;          try {            address=new WebAddress(unfilteredUrl);          } catch (          ParseException e) {            throw new URISyntaxException("","");          }          if (address.getHost().length() == 0) {            throw new URISyntaxException("","");          }          url=address.toString();        }      }    } catch (    URISyntaxException e) {      mAddress.setError(r.getText(R.string.bookmark_url_not_valid));      return false;    }  }  if (mSaveToHomeScreen) {    mEditingExisting=false;  }  boolean urlUnmodified=url.equals(mUrl);  if (mEditingExisting) {    Long id=mMap.getLong(BrowserContract.Bookmarks._ID);    ContentValues values=new ContentValues();    values.put(BrowserContract.Bookmarks.TITLE,title);    values.put(BrowserContract.Bookmarks.PARENT,mCurrentFolder);    if (!mEditingFolder) {      values.put(BrowserContract.Bookmarks.URL,url);      if (!urlUnmodified) {        values.putNull(BrowserContract.Bookmarks.THUMBNAIL);      }    }    if (values.size() > 0) {      new UpdateBookmarkTask(getApplicationContext(),id).execute(values);    }    setResult(RESULT_OK);  } else {    Bitmap thumbnail;    Bitmap favicon;    if (urlUnmodified) {      thumbnail=(Bitmap)mMap.getParcelable(BrowserContract.Bookmarks.THUMBNAIL);      favicon=(Bitmap)mMap.getParcelable(BrowserContract.Bookmarks.FAVICON);    } else {      thumbnail=null;      favicon=null;    }    Bundle bundle=new Bundle();    bundle.putString(BrowserContract.Bookmarks.TITLE,title);    bundle.putString(BrowserContract.Bookmarks.URL,url);    bundle.putParcelable(BrowserContract.Bookmarks.FAVICON,favicon);    if (mSaveToHomeScreen) {      if (mTouchIconUrl != null && urlUnmodified) {        Message msg=Message.obtain(mHandler,TOUCH_ICON_DOWNLOADED);        msg.setData(bundle);        DownloadTouchIcon icon=new DownloadTouchIcon(this,msg,mMap.getString(USER_AGENT));        icon.execute(mTouchIconUrl);      } else {        sendBroadcast(BookmarkUtils.createAddToHomeIntent(this,url,title,null,favicon));      }    } else {      bundle.putParcelable(BrowserContract.Bookmarks.THUMBNAIL,thumbnail);      bundle.putBoolean(REMOVE_THUMBNAIL,!urlUnmodified);      if (mTouchIconUrl != null) {        bundle.putString(TOUCH_ICON_URL,mTouchIconUrl);      }      Message msg=Message.obtain(mHandler,SAVE_BOOKMARK);      msg.setData(bundle);      Thread t=new Thread(new SaveBookmarkRunnable(getApplicationContext(),msg));      t.start();    }    setResult(RESULT_OK);    LogTag.logBookmarkAdded(url,"bookmarkview");  }  finish();  return true;}  }
class C{  public void gatherMediaInformation(boolean force){  if (!isValidMediainfoFormat()) {    if (StringUtils.isBlank(getContainerFormat())) {      setContainerFormat(getExtension());    }    return;  }  if (!force && !getContainerFormat().isEmpty()) {    return;  }  if (getType() == MediaFileType.SUBTITLE) {    gatherSubtitleInformation();  }  try {    BasicFileAttributes attrs=Files.readAttributes(getFileAsPath(),BasicFileAttributes.class);    filedate=attrs.lastModifiedTime().toMillis();    setFilesize(attrs.size());  } catch (  IOException e) {    if (miSnapshot == null) {      LOGGER.warn("could not get file information (size/date): " + e.getMessage());    }  }  if (getFilesize() == 0) {    LOGGER.warn("0 Byte file detected: " + this.filename);    setContainerFormat(getExtension());    return;  }  if (type == MediaFileType.SUBTITLE || type == MediaFileType.NFO) {    setContainerFormat(getExtension());    return;  }  LOGGER.debug("start MediaInfo for " + this.getFileAsPath());  long discFilesSizes=0L;  if (isISO) {    discFilesSizes=getMediaInfoSnapshotFromISO();  } else {    getMediaInfoSnapshot();  }  if (miSnapshot == null) {    LOGGER.error("error getting MediaInfo for " + this.filename);    setContainerFormat(getExtension());    closeMediaInfo();    return;  }  LOGGER.trace("got MI");  String height="";  String scanType="";  String width="";  String videoCodec="";switch (type) {case VIDEO:case VIDEO_EXTRA:case SAMPLE:case TRAILER:    height=getMediaInfo(StreamKind.Video,0,"Height");  scanType=getMediaInfo(StreamKind.Video,0,"ScanType");width=getMediaInfo(StreamKind.Video,0,"Width");videoCodec=getMediaInfo(StreamKind.Video,0,"CodecID/Hint","Format");if (StringUtils.containsIgnoreCase(videoCodec,"Microsoft")) {videoCodec=getMediaInfo(StreamKind.Video,0,"Format");}int streams=0;if (streams == 0) {String cnt=getMediaInfo(StreamKind.General,0,"AudioCount");try {streams=Integer.parseInt(cnt);} catch (Exception e) {streams=0;}}if (streams == 0) {String cnt=getMediaInfo(StreamKind.Audio,0,"StreamCount");try {streams=Integer.parseInt(cnt);} catch (Exception e) {streams=0;}}audioStreams.clear();for (int i=0; i < streams; i++) {MediaFileAudioStream stream=new MediaFileAudioStream();String audioCodec=getMediaInfo(StreamKind.Audio,i,"CodecID/Hint","Format");audioCodec=audioCodec.replaceAll("\\p{Punct}","");String audioAddition=getMediaInfo(StreamKind.Audio,i,"Format_Profile");if ("dts".equalsIgnoreCase(audioCodec) && StringUtils.isNotBlank(audioAddition)) {if (audioAddition.contains("ES")) {audioCodec="DTSHD-ES";}if (audioAddition.contains("HRA")) {audioCodec="DTSHD-HRA";}if (audioAddition.contains("MA")) {audioCodec="DTSHD-MA";}}stream.setCodec(audioCodec);String channels=getMediaInfo(StreamKind.Audio,i,"Channel(s)_Original","Channel(s)");stream.setChannels(StringUtils.isEmpty(channels) ? "" : channels + "ch");try {String br=getMediaInfo(StreamKind.Audio,i,"BitRate");stream.setBitrate(Integer.parseInt(br) / 1024);} catch (Exception ignored) {}String language=getMediaInfo(StreamKind.Audio,i,"Language/String","Language");if (language.isEmpty()) {if (!isDiscFile()) {String shortname=getBasename().toLowerCase();stream.setLanguage(parseLanguageFromString(shortname));}} else {stream.setLanguage(parseLanguageFromString(language));}audioStreams.add(stream);}streams=0;if (streams == 0) {String cnt=getMediaInfo(StreamKind.General,0,"TextCount");try {streams=Integer.parseInt(cnt);} catch (Exception e) {streams=0;}}if (streams == 0) {String cnt=getMediaInfo(StreamKind.Text,0,"StreamCount");try {streams=Integer.parseInt(cnt);} catch (Exception e) {streams=0;}}subtitles.clear();for (int i=0; i < streams; i++) {MediaFileSubtitle stream=new MediaFileSubtitle();String codec=getMediaInfo(StreamKind.Text,i,"CodecID/Hint","Format");stream.setCodec(codec.replaceAll("\\p{Punct}",""));String lang=getMediaInfo(StreamKind.Text,i,"Language/String","Language");stream.setLanguage(parseLanguageFromString(lang));String forced=getMediaInfo(StreamKind.Text,i,"Forced");boolean b=forced.equalsIgnoreCase("true") || forced.equalsIgnoreCase("yes");stream.setForced(b);subtitles.add(stream);}String mvc=getMediaInfo(StreamKind.Video,0,"MultiView_Count");if (!StringUtils.isEmpty(mvc) && mvc.equals("2")) {video3DFormat=VIDEO_3D;String mvl=getMediaInfo(StreamKind.Video,0,"MultiView_Layout").toLowerCase();LOGGER.debug("3D detected :) " + mvl);if (!StringUtils.isEmpty(mvl) && mvl.contains("top") && mvl.contains("bottom")) {video3DFormat=VIDEO_3D_TAB;}if (!StringUtils.isEmpty(mvl) && mvl.contains("side")) {video3DFormat=VIDEO_3D_SBS;}}break;case AUDIO:MediaFileAudioStream stream=new MediaFileAudioStream();String audioCodec=getMediaInfo(StreamKind.Audio,0,"CodecID/Hint","Format");stream.setCodec(audioCodec.replaceAll("\\p{Punct}",""));String channels=getMediaInfo(StreamKind.Audio,0,"Channel(s)");stream.setChannels(StringUtils.isEmpty(channels) ? "" : channels + "ch");try {String br=getMediaInfo(StreamKind.Audio,0,"BitRate");stream.setBitrate(Integer.parseInt(br) / 1024);} catch (Exception e) {}String language=getMediaInfo(StreamKind.Audio,0,"Language/String","Language");if (language.isEmpty()) {String shortname=getBasename().toLowerCase();stream.setLanguage(parseLanguageFromString(shortname));} else {stream.setLanguage(parseLanguageFromString(language));}audioStreams.clear();audioStreams.add(stream);break;case POSTER:case BANNER:case FANART:case THUMB:case EXTRAFANART:case GRAPHIC:case SEASON_POSTER:case LOGO:case CLEARLOGO:case CLEARART:case DISCART:case EXTRATHUMB:height=getMediaInfo(StreamKind.Image,0,"Height");width=getMediaInfo(StreamKind.Image,0,"Width");videoCodec=getMediaInfo(StreamKind.Image,0,"CodecID/Hint","Format");break;case NFO:break;default :LOGGER.warn("no mediainformation handling for MediaFile type " + getType() + " yet.");break;}setVideoCodec(StringUtils.isEmpty(videoCodec) ? "" : new Scanner(videoCodec).next());if (type == MediaFileType.SUBTITLE) {setContainerFormat(getExtension());} else {String extensions=getMediaInfo(StreamKind.General,0,"Codec/Extensions","Format");setContainerFormat(StringUtils.isBlank(extensions) ? "" : new Scanner(extensions).next().toLowerCase());if (StringUtils.isBlank(containerFormat)) {setContainerFormat(getExtension());}}if (height.isEmpty() || scanType.isEmpty()) {setExactVideoFormat("");} else {setExactVideoFormat(height + Character.toLowerCase(scanType.charAt(0)));}if (!width.isEmpty()) {try {setVideoWidth(Integer.parseInt(width));} catch (NumberFormatException e) {setVideoWidth(0);}}if (!height.isEmpty()) {try {setVideoHeight(Integer.parseInt(height));} catch (NumberFormatException e) {setVideoHeight(0);}}switch (type) {case VIDEO:case VIDEO_EXTRA:case SAMPLE:case TRAILER:case AUDIO:String br=getMediaInfo(StreamKind.General,0,"OverallBitRate");if (!br.isEmpty()) {try {setOverallBitRate(Integer.parseInt(br) / 1024);} catch (NumberFormatException e) {setOverallBitRate(0);}}if (!isISO) {String dur=getMediaInfo(StreamKind.General,0,"Duration");if (!dur.isEmpty()) {try {Double d=Double.parseDouble(dur);setDuration(d.intValue() / 1000);} catch (NumberFormatException e) {setDuration(0);}}} else {LOGGER.trace("ISO size:" + filesize + "  dataSize:"+ discFilesSizes+ "  = diff:"+ Math.abs(discFilesSizes - filesize));if (discFilesSizes > 0 && filesize > 0) {long gig=1024 * 1024 * 1024;if (Math.abs(discFilesSizes - filesize) > gig) {LOGGER.error("ISO file seems to have an invalid structure - ignore duration");setDuration(0);}}}default :break;}LOGGER.trace("extracted MI");closeMediaInfo();LOGGER.trace("closed MI");}  }
class C{  private void create(){  DocumentBuilderFactory docBFac;  DocumentBuilder docBuild;  try {    docBFac=DocumentBuilderFactory.newInstance();    docBuild=docBFac.newDocumentBuilder();    doc=docBuild.newDocument();  } catch (  Exception ex) {    ex.printStackTrace();    return;  }  rootElement=doc.createElement("jplag-users");  doc.appendChild(rootElement);  writeXMLFile();}  }
class C{  private void addComposedChars() throws ParseException {  ComposedCharIter iter=new ComposedCharIter();  int c;  while ((c=iter.next()) != ComposedCharIter.DONE) {    if (getCharOrder(c) == RBCollationTables.UNMAPPED) {      String s=iter.decomposition();      if (s.length() == 1) {        int order=getCharOrder(s.charAt(0));        if (order != RBCollationTables.UNMAPPED) {          addOrder(c,order);        }        continue;      } else       if (s.length() == 2) {        char ch0=s.charAt(0);        if (Character.isHighSurrogate(ch0)) {          int order=getCharOrder(s.codePointAt(0));          if (order != RBCollationTables.UNMAPPED) {            addOrder(c,order);          }          continue;        }      }      int contractOrder=getContractOrder(s);      if (contractOrder != RBCollationTables.UNMAPPED) {        addOrder(c,contractOrder);      } else {        boolean allThere=true;        for (int i=0; i < s.length(); i++) {          if (getCharOrder(s.charAt(i)) == RBCollationTables.UNMAPPED) {            allThere=false;            break;          }        }        if (allThere) {          addExpandOrder(c,s,RBCollationTables.UNMAPPED);        }      }    }  }}  }
class C{  public TransferEntropyCalculatorMultiVariateViaCondMutualInfo(ConditionalMutualInfoCalculatorMultiVariate condMiCalc) throws Exception {  super(condMiCalc);}  }
class C{  public byte loadByte(Offset offset){  return this.plus(offset).loadByte();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.837 -0500",hash_original_method="4600019E789700BB681DB9CDCB53078A",hash_generated_method="DB4BEEDC695F7A1D0A1EFB737C359D83") private void parsePduFromEfRecord(byte[] pdu){  ByteArrayInputStream bais=new ByteArrayInputStream(pdu);  DataInputStream dis=new DataInputStream(bais);  SmsEnvelope env=new SmsEnvelope();  CdmaSmsAddress addr=new CdmaSmsAddress();  CdmaSmsSubaddress subAddr=new CdmaSmsSubaddress();  try {    env.messageType=dis.readByte();    while (dis.available() > 0) {      int parameterId=dis.readByte();      int parameterLen=dis.readByte();      byte[] parameterData=new byte[parameterLen];switch (parameterId) {case TELESERVICE_IDENTIFIER:        env.teleService=dis.readUnsignedShort();      Log.i(LOG_TAG,"teleservice = " + env.teleService);    break;case SERVICE_CATEGORY:  env.serviceCategory=dis.readUnsignedShort();break;case ORIGINATING_ADDRESS:case DESTINATION_ADDRESS:dis.read(parameterData,0,parameterLen);BitwiseInputStream addrBis=new BitwiseInputStream(parameterData);addr.digitMode=addrBis.read(1);addr.numberMode=addrBis.read(1);int numberType=0;if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_8BIT_CHAR) {numberType=addrBis.read(3);addr.ton=numberType;if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK) addr.numberPlan=addrBis.read(4);}addr.numberOfDigits=addrBis.read(8);byte[] data=new byte[addr.numberOfDigits];byte b=0x00;if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_4BIT_DTMF) {for (int index=0; index < addr.numberOfDigits; index++) {b=(byte)(0xF & addrBis.read(4));data[index]=convertDtmfToAscii(b);}} else if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_8BIT_CHAR) {if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK) {for (int index=0; index < addr.numberOfDigits; index++) {b=(byte)(0xFF & addrBis.read(8));data[index]=b;}} else if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_DATA_NETWORK) {if (numberType == 2) Log.e(LOG_TAG,"TODO: Originating Addr is email id"); else Log.e(LOG_TAG,"TODO: Originating Addr is data network address");} else {Log.e(LOG_TAG,"Originating Addr is of incorrect type");}} else {Log.e(LOG_TAG,"Incorrect Digit mode");}addr.origBytes=data;Log.i(LOG_TAG,"Originating Addr=" + addr.toString());break;case ORIGINATING_SUB_ADDRESS:case DESTINATION_SUB_ADDRESS:dis.read(parameterData,0,parameterLen);BitwiseInputStream subAddrBis=new BitwiseInputStream(parameterData);subAddr.type=subAddrBis.read(3);subAddr.odd=subAddrBis.readByteArray(1)[0];int subAddrLen=subAddrBis.read(8);byte[] subdata=new byte[subAddrLen];for (int index=0; index < subAddrLen; index++) {b=(byte)(0xFF & subAddrBis.read(4));subdata[index]=convertDtmfToAscii(b);}subAddr.origBytes=subdata;break;case BEARER_REPLY_OPTION:dis.read(parameterData,0,parameterLen);BitwiseInputStream replyOptBis=new BitwiseInputStream(parameterData);env.bearerReply=replyOptBis.read(6);break;case CAUSE_CODES:dis.read(parameterData,0,parameterLen);BitwiseInputStream ccBis=new BitwiseInputStream(parameterData);env.replySeqNo=ccBis.readByteArray(6)[0];env.errorClass=ccBis.readByteArray(2)[0];if (env.errorClass != 0x00) env.causeCode=ccBis.readByteArray(8)[0];break;case BEARER_DATA:dis.read(parameterData,0,parameterLen);env.bearerData=parameterData;break;default :throw new Exception("unsupported parameterId (" + parameterId + ")");}}bais.close();dis.close();} catch (Exception ex) {Log.e(LOG_TAG,"parsePduFromEfRecord: conversion from pdu to SmsMessage failed" + ex);}originatingAddress=addr;env.origAddress=addr;env.origSubaddress=subAddr;mEnvelope=env;mPdu=pdu;parseSms();}  }
class C{  public static void attributeAbsent(Class<?> aClass,Attribute aField){  throw new XmlMappingAttributeDoesNotExistException(MSG.INSTANCE.message(xmlMappingAttributeDoesNotExistException2,aClass.getSimpleName(),aField.getName()));}  }
class C{  protected void waitForShutdown(){  while (!m_shutdown.get()) {    System.out.println("waiting for shutdown");synchronized (m_monitor) {      try {        m_monitor.wait(10000);      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public static org.oscm.vo.VOOrganizationVatRate convertToApi(org.oscm.internal.vo.VOOrganizationVatRate oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOOrganizationVatRate newVO=new org.oscm.vo.VOOrganizationVatRate();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setRate(oldVO.getRate());  newVO.setOrganization(convertToApi(oldVO.getOrganization()));  return newVO;}  }
class C{  private void replaceBranches(){  for (  SsaInsn insn : branchWorklist) {    int oldSuccessor=-1;    SsaBasicBlock block=insn.getBlock();    int successorSize=block.getSuccessorList().size();    for (int i=0; i < successorSize; i++) {      int successorBlock=block.getSuccessorList().get(i);      if (!executableBlocks.get(successorBlock)) {        oldSuccessor=successorBlock;      }    }    if (successorSize != 2 || oldSuccessor == -1)     continue;    Insn originalRopInsn=insn.getOriginalRopInsn();    block.replaceLastInsn(new PlainInsn(Rops.GOTO,originalRopInsn.getPosition(),null,RegisterSpecList.EMPTY));    block.removeSuccessor(oldSuccessor);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (spread: ");  result.append(spread);  result.append(')');  return result.toString();}  }
class C{  public static DeactivateInstance parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeactivateInstance object=new DeactivateInstance();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deactivateInstance".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeactivateInstance)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public void run(){  amIActive=true;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  try {    String inputFilesString=null;    String grassFile=null;    String whiteboxHeaderFile=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    int progress=0;    double cellsize=0;    double north=0;    double east=0;    double west=0;    double south=0;    double arcNoData=-9999;    double whiteboxNoData=-32768d;    double z=0;    String delimiter=" ";    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      grassFile=imageFiles[i];      if (!((new File(grassFile)).exists())) {        showFeedback("GRASS raster file does not exist.");        return;      }      if (grassFile.lastIndexOf(".") >= 0) {        String extension=grassFile.substring(grassFile.lastIndexOf("."));        whiteboxHeaderFile=grassFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=grassFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(grassFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (grassFile != null) {        String line;        String[] str;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("north")) {            north=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("south")) {            south=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("east")) {            east=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("west")) {            west=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("rows")) {            rows=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("cols")) {            cols=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("nodata")) {            arcNoData=Double.parseDouble(str[str.length - 1]);          } else {            break;          }        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t" + whiteboxNoData;        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        wbr.reinitialize(whiteboxNoData);        delimiter=" ";        row=0;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("north")) {          } else           if (str[0].toLowerCase().contains("south")) {          } else           if (str[0].toLowerCase().contains("east")) {          } else           if (str[0].toLowerCase().contains("west")) {          } else           if (str[0].toLowerCase().contains("rows")) {          } else           if (str[0].toLowerCase().contains("cols")) {          } else           if (str[0].toLowerCase().contains("nodata")) {          } else {            for (i=0; i < str.length; i++) {              if (StringUtilities.isNumeric(str[i])) {                z=Double.parseDouble(str[i]);                if (z != arcNoData) {                  wbr.setValue(row,col,z);                } else {                  wbr.setValue(row,col,whiteboxNoData);                }              } else {                wbr.setValue(row,col,whiteboxNoData);              }              col++;              if (col == cols) {                col=0;                row++;                progress=(int)(100f * row / (rows - 1));                updateProgress(progress);              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.flush();        wbr.findMinAndMaxVals();        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ZoneOffset) {    return totalSeconds == ((ZoneOffset)obj).totalSeconds;  }  return false;}  }
class C{  public SVGPath relativeCubicTo(double[] c1xy,double[] c2xy,double[] xy){  append(PATH_CUBIC_TO_RELATIVE,c1xy[0],c1xy[1],c2xy[0],c2xy[1],xy[0],xy[1]);  return this;}  }
class C{  public <T>GridCloseableIterator<T> iterator(@Nullable String spaceName,CX2<T2<Long,Integer>,T2<Long,Integer>,T> c){  assert c != null;  GridOffHeapPartitionedMap m=offheap(spaceName);  return m == null ? new GridEmptyCloseableIterator<T>() : m.iterator(c);}  }
class C{  public double selectivity(double total){  return ids.size() / total;}  }
class C{  public static void main(String[] args) throws IOException {  String experimentName="planetlab_npa";  String outputFolder="output";  String inputFolder=NonPowerAware.class.getClassLoader().getResource("workload/planetlab/20110303").getPath();  Log.setDisabled(!Constants.ENABLE_OUTPUT);  Log.printLine("Starting " + experimentName);  try {    CloudSim.init(1,Calendar.getInstance(),false);    DatacenterBroker broker=Helper.createBroker();    int brokerId=broker.getId();    List<Cloudlet> cloudletList=PlanetLabHelper.createCloudletListPlanetLab(brokerId,inputFolder);    List<Vm> vmList=Helper.createVmList(brokerId,cloudletList.size());    List<PowerHost> hostList=Helper.createHostList(PlanetLabConstants.NUMBER_OF_HOSTS);    PowerDatacenterNonPowerAware datacenter=(PowerDatacenterNonPowerAware)Helper.createDatacenter("Datacenter",PowerDatacenterNonPowerAware.class,hostList,new PowerVmAllocationPolicySimple(hostList));    datacenter.setDisableMigrations(true);    broker.submitVmList(vmList);    broker.submitCloudletList(cloudletList);    CloudSim.terminateSimulation(Constants.SIMULATION_LIMIT);    double lastClock=CloudSim.startSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    Log.printLine("Received " + newList.size() + " cloudlets");    CloudSim.stopSimulation();    Helper.printResults(datacenter,vmList,lastClock,experimentName,Constants.OUTPUT_CSV,outputFolder);  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");    System.exit(0);  }  Log.printLine("Finished " + experimentName);}  }
class C{  public void testJSFImplCase() throws Exception {  Object factory=null;  Class clazz=null;  FactoryFinder.releaseFactories();  int len, i=0;  for (i=0, len=FactoryFinderTestCase2.FACTORIES.length; i < len; i++) {    FactoryFinder.setFactory(FactoryFinderTestCase2.FACTORIES[i][0],FactoryFinderTestCase2.FACTORIES[i][1]);  }  for (i=0, len=FactoryFinderTestCase2.FACTORIES.length; i < len; i++) {    clazz=Class.forName(FactoryFinderTestCase2.FACTORIES[i][0]);    factory=FactoryFinder.getFactory(FactoryFinderTestCase2.FACTORIES[i][0]);    assertTrue("Factory for " + clazz.getName() + " not of expected type.",clazz.isAssignableFrom(factory.getClass()));    clazz=Class.forName(FactoryFinderTestCase2.FACTORIES[i][1]);    assertTrue("Factory " + FactoryFinderTestCase2.FACTORIES[i][1] + " not of expected type",clazz.isAssignableFrom(factory.getClass()));  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static boolean isViewHit(View view,View origin,int x,int y){  int[] viewLocation=new int[2];  view.getLocationOnScreen(viewLocation);  int[] parentLocation=new int[2];  origin.getLocationOnScreen(parentLocation);  int screenX=parentLocation[0] + x;  int screenY=parentLocation[1] + y;  return screenX >= viewLocation[0] && screenX < viewLocation[0] + view.getWidth() && screenY >= viewLocation[1] && screenY < viewLocation[1] + view.getHeight();}  }
class C{  public static ByteList Methods(ByteList bytes,ObjectList<ByteList> methods){  for (  ByteList list : methods) {    bytes.addAll(list);  }  return bytes;}  }
class C{  private static TilesetGroupAnimationMap createAnimationMap(){  final TilesetGroupAnimationMap map=new TilesetGroupAnimationMap();  final URL url=DataLoader.getResource(baseFolder + "tileset/animation.seq");  if (url != null) {    try {      final InputStream in=url.openStream();      try {        map.load(in);      }  finally {        in.close();      }    } catch (    final IOException ex) {      logger.error("Error loading tileset animation map",ex);    }  }  return map;}  }
class C{  public Folder(Context context,AttributeSet attrs){  super(context,attrs);  setAlwaysDrawnWithCacheEnabled(false);  mInputMethodManager=(InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE);  Resources res=getResources();  mExpandDuration=res.getInteger(R.integer.config_folderExpandDuration);  mMaterialExpandDuration=res.getInteger(R.integer.config_materialFolderExpandDuration);  mMaterialExpandStagger=res.getInteger(R.integer.config_materialFolderExpandStagger);  if (sDefaultFolderName == null) {    sDefaultFolderName=res.getString(R.string.folder_name);  }  if (sHintText == null) {    sHintText=res.getString(R.string.folder_hint_text);  }  mLauncher=(Launcher)context;  setFocusableInTouchMode(true);}  }
class C{  public static void registerAspect(IAspectType aspect,int tier,int type,float baseAmount){  REGISTERED_ASPECTS.add(new AspectEntry(aspect,tier,type,baseAmount));}  }
class C{  @Nullable private static <T>Vector<T> adjustNull(final Vector<T> s){  return s.size() == 0 ? null : s;}  }
class C{  public final void sendMessageDelayed(int what,int arg1,int arg2,Object obj,long delayMillis){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageDelayed(obtainMessage(what,arg1,arg2,obj),delayMillis);}  }
class C{  private void dispatch(PartitionedEvent partitionedEvent){  boolean handled=false;  for (  Map.Entry<String,CompositePolicyHandler> policyStreamHandler : policyStreamHandlerMap.entrySet()) {    if (isAcceptedByPolicy(partitionedEvent,policyDefinitionMap.get(policyStreamHandler.getKey()))) {      try {        handled=true;        this.context.counter().scope("eval_count").incr();        policyStreamHandler.getValue().send(partitionedEvent.getEvent());      } catch (      Exception e) {        this.context.counter().scope("fail_count").incr();        LOG.error("{} failed to handle {}",policyStreamHandler.getValue(),partitionedEvent.getEvent(),e);      }    }  }  if (!handled) {    this.context.counter().scope("drop_count").incr();    LOG.warn("Drop stream non-matched event {}, which should not be sent to evaluator",partitionedEvent);  } else {    this.context.counter().scope("accept_count").incr();  }}  }
class C{  void clear(){  _lastServerTime=0;  _lastHubTime=0;}  }
class C{  @NonNull public static Bitmap toBitmap(@NonNull Drawable source,@NonNull DisplayMetrics metrics,float widthDp,float heightDp){  return toBitmapWithExactSize(source,metrics,toPx(metrics,widthDp),toPx(metrics,heightDp),1,1);}  }
class C{  public static boolean isEmptyEditText(EditText edText){  return edText.getText().toString().trim().length() <= 0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ServiceCompatibilityException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public ResponseOnSingeRequest(String responseBody,boolean failObtainResponse,String errorMessage,String stackTrace,String statusCode,int statusCodeInt,String receiveTime,Map<String,List<String>> responseHeaders){  super();  this.responseBody=responseBody;  this.failObtainResponse=failObtainResponse;  this.errorMessage=errorMessage;  this.stackTrace=stackTrace;  this.statusCode=statusCode;  this.setStatusCodeInt(statusCodeInt);  this.setReceiveTime(receiveTime);  this.responseHeaders=responseHeaders;}  }
class C{  public ReplicatorCapabilities(){}  }
class C{  public static double girardArea(S2Point a,S2Point b,S2Point c){  S2Point ab=S2Point.crossProd(a,b);  S2Point bc=S2Point.crossProd(b,c);  S2Point ac=S2Point.crossProd(a,c);  return Math.max(0.0,ab.angle(ac) - ab.angle(bc) + bc.angle(ac));}  }
class C{  @PatchMethod(override=true) public static boolean confirm(String msg){  return true;}  }
class C{  public boolean equals(Object thatObject){  if (!(thatObject instanceof MimeTypeParameterList)) {    return false;  }  MimeTypeParameterList that=(MimeTypeParameterList)thatObject;  if (this.size() != that.size()) {    return false;  }  String name=null;  String thisValue=null;  String thatValue=null;  Set<Map.Entry<String,String>> entries=parameters.entrySet();  Iterator<Map.Entry<String,String>> iterator=entries.iterator();  Map.Entry<String,String> entry=null;  while (iterator.hasNext()) {    entry=iterator.next();    name=entry.getKey();    thisValue=entry.getValue();    thatValue=that.parameters.get(name);    if ((thisValue == null) || (thatValue == null)) {      if (thisValue != thatValue) {        return false;      }    } else     if (!thisValue.equals(thatValue)) {      return false;    }  }  return true;}  }
class C{  public void testSyncFlushDeflater() throws Exception {  Deflater def=new Deflater();  Field f=def.getClass().getDeclaredField("flushParm");  f.setAccessible(true);  f.setInt(def,Deflater.SYNC_FLUSH);  final int deflaterBufferSize=512;  ByteArrayOutputStream baos=new ByteArrayOutputStream();  DeflaterOutputStream dos=new DeflaterOutputStream(baos,def,deflaterBufferSize);  final int outputBufferSize=128 * deflaterBufferSize;  byte[] output=new byte[outputBufferSize];  for (int i=0; i < output.length; i++) {    output[i]=(byte)i;  }  dos.write(output);  byte[] compressed=baos.toByteArray();  assertTrue("compressed=" + compressed.length + " but deflaterBufferSize="+ deflaterBufferSize,compressed.length > deflaterBufferSize);  ByteArrayInputStream bais=new ByteArrayInputStream(compressed);  InflaterInputStream iis=new InflaterInputStream(bais);  byte[] input=new byte[output.length];  int total=0;  while (true) {    int n=iis.read(input,total,input.length - total);    if (n == -1) {      break;    }    total+=n;    if (total == input.length) {      try {        iis.read();        fail();      } catch (      EOFException expected) {        break;      }    }  }  assertEquals(output.length,total);  assertTrue(Arrays.equals(input,output));  assertFalse(def.finished());  def.end();  iis.close();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XMLString s1=m_arg0.execute(xctxt).xstr();  XMLString s2=m_arg1.execute(xctxt).xstr();  int index=s1.indexOf(s2);  return (-1 == index) ? XString.EMPTYSTRING : (XString)s1.substring(index + s2.length());}  }
class C{  public void bail(String message,boolean printUsageStatement){  Debug.output(message);  if (printUsageStatement)   printUsage();  System.exit(0);}  }
class C{  public static int booleanToInt(boolean b){  if (b)   return TRUE; else   return FALSE;}  }
class C{  public void sphere(float r){  g.sphere(r);}  }
class C{  public void remove(String entry){  remove(new JarEntry(entry));}  }
class C{  @Override @Deprecated public void write(ObjectOutput output) throws IOException {  if (!output.equals(oos)) {    throw new IllegalArgumentException("Attempting to write to a different stream than the one that created this PutField");  }  for (  EmulatedFields.ObjectSlot slot : emulatedFields.slots()) {    Object fieldValue=slot.getFieldValue();    Class<?> type=slot.getField().getType();    if (type == int.class) {      output.writeInt(fieldValue != null ? ((Integer)fieldValue).intValue() : 0);    } else     if (type == byte.class) {      output.writeByte(fieldValue != null ? ((Byte)fieldValue).byteValue() : 0);    } else     if (type == char.class) {      output.writeChar(fieldValue != null ? ((Character)fieldValue).charValue() : 0);    } else     if (type == short.class) {      output.writeShort(fieldValue != null ? ((Short)fieldValue).shortValue() : 0);    } else     if (type == boolean.class) {      output.writeBoolean(fieldValue != null ? ((Boolean)fieldValue).booleanValue() : false);    } else     if (type == long.class) {      output.writeLong(fieldValue != null ? ((Long)fieldValue).longValue() : 0);    } else     if (type == float.class) {      output.writeFloat(fieldValue != null ? ((Float)fieldValue).floatValue() : 0);    } else     if (type == double.class) {      output.writeDouble(fieldValue != null ? ((Double)fieldValue).doubleValue() : 0);    } else {      output.writeObject(fieldValue);    }  }}  }
class C{  public void dispose(){  Arrays.fill(pw1,(byte)0);  Arrays.fill(pw2,(byte)0);}  }
class C{  public double meanOrMode(int attIndex){  double result, found;  int[] counts;  if (attribute(attIndex).isNumeric()) {    result=found=0;    for (int j=0; j < numInstances(); j++) {      if (!instance(j).isMissing(attIndex)) {        found+=instance(j).weight();        result+=instance(j).weight() * instance(j).value(attIndex);      }    }    if (found <= 0) {      return 0;    } else {      return result / found;    }  } else   if (attribute(attIndex).isNominal()) {    counts=new int[attribute(attIndex).numValues()];    for (int j=0; j < numInstances(); j++) {      if (!instance(j).isMissing(attIndex)) {        counts[(int)instance(j).value(attIndex)]+=instance(j).weight();      }    }    return Utils.maxIndex(counts);  } else {    return 0;  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static boolean isArrayType(final Type type){  return type instanceof GenericArrayType || type instanceof Class<?> && ((Class<?>)type).isArray();}  }
class C{  public static String convertPreDial(String phoneNumber){  if (phoneNumber == null) {    return null;  }  int len=phoneNumber.length();  StringBuilder ret=new StringBuilder(len);  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    if (isPause(c)) {      c=PAUSE;    } else     if (isToneWait(c)) {      c=WAIT;    }    ret.append(c);  }  return ret.toString();}  }
class C{  public static void addProperty(String key,Object value){  ri.addProperty(key,value);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  @Override public void clear(){  Arrays.fill(elements,null);  size=0;}  }
class C{  public void test_getCurrencyCode(){  final Collection<Locale> locVal=Arrays.asList(Locale.CANADA,Locale.CANADA_FRENCH,Locale.CHINA,Locale.FRANCE,Locale.GERMANY,Locale.ITALY,Locale.JAPAN,Locale.KOREA,Locale.PRC,Locale.SIMPLIFIED_CHINESE,Locale.TAIWAN,Locale.TRADITIONAL_CHINESE,Locale.UK,Locale.US);  final Collection<String> locDat=Arrays.asList("CAD","CAD","CNY","EUR","EUR","EUR","JPY","KRW","CNY","CNY","TWD","TWD","GBP","USD");  Iterator<String> dat=locDat.iterator();  for (  Locale l : locVal) {    String d=dat.next().trim();    assertEquals("For locale " + l + " currency code wrong",Currency.getInstance(l).getCurrencyCode(),d);  }}  }
class C{  public final boolean isAlive(){  return false;}  }
class C{  public static LocalFileFilter from(Snapshot snapshot,FileConfig config){  return new LocalFileFilter(SnapshotDirectory.from(snapshot,config),config.setLastModifiedTimestamp(),config.isCombined());}  }
class C{  public int consume(){  int consumedAmount;  if (Math.abs(left) < Math.abs(getRegen())) {    consumedAmount=left;    left=0;  } else {    consumedAmount=getRegen();    left-=getRegen();  }  return consumedAmount;}  }
class C{  public FileVirtualPoolRestRep update(URI id,FileVirtualPoolUpdateParam input){  return client.put(FileVirtualPoolRestRep.class,input,getIdUrl(),id);}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg,Object param1){  throw new RuntimeException();}  }
class C{  protected final void _mergeProperties(Properties implementationSpecificProperties){  for (  Entry<Object,Object> entry : implementationSpecificProperties.entrySet()) {    _configuration.putIfAbsent(entry.getKey(),entry.getValue());  }}  }
class C{  public static String doubleQuote(String s){  return '"' + s + '"';}  }
class C{  protected void restoreState(){}  }
class C{  public synchronized void cancel(){  cancelled=true;  tasks.reset();  this.notify();}  }
class C{  private void saveState(){  savedStartOffset=offsetAttribute.startOffset();  savedEndOffset=offsetAttribute.endOffset();  hasIllegalOffsets=(savedEndOffset - savedStartOffset != termAttribute.length());  savedType=typeAttribute.type();  if (savedBuffer.length < termAttribute.length()) {    savedBuffer=new char[ArrayUtil.oversize(termAttribute.length(),Character.BYTES)];  }  System.arraycopy(termAttribute.buffer(),0,savedBuffer,0,termAttribute.length());  iterator.text=savedBuffer;  hasSavedState=true;}  }
class C{  private boolean invalidated(int index,int prevTakeIndex,long dequeues,int length){  if (index < 0)   return false;  int distance=index - prevTakeIndex;  if (distance < 0)   distance+=length;  return dequeues > distance;}  }
class C{  public TypeReference(TypeTable table,String name){  this.table=table;  this.name=name;  assert name != "int" && name != "boolean" && name != "string" && name != "void" && name != "weakref";}  }
class C{  public boolean updateSelectedSeatCount(Seat seat){  if (seat.status() == SeatStatus.FREE) {    if (maxSelectedSeats == -1 || selectedSeats + 1 <= maxSelectedSeats) {      selectedSeats++;    } else     if (selectedSeats + 1 > maxSelectedSeats) {      return false;    }    return true;  }  selectedSeats--;  return true;}  }
class C{  public boolean isDebugging(){  return debugging;}  }
class C{  public QueryTask waitForQuery(QueryTask query,Predicate<QueryTask> predicate) throws Throwable {  return ServiceHostUtils.waitForQuery(this,REFERRER,query,predicate,this.waitIterationCount,this.waitIterationSleep);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private void restoreMissingKeygens(){  boolean foundMissingKeygen=false;  for (  Keygen keygen : wifiNetwork.getKeygens()) {    if (keygen == null) {      foundMissingKeygen=true;      break;    }  }  if (foundMissingKeygen) {    wifiNetwork.setKeygens(null);  }}  }
class C{  void pushAngularObjectRegistryToRemote(Client client) throws TException {  final AngularObjectRegistry angularObjectRegistry=this.getInterpreterGroup().getAngularObjectRegistry();  if (angularObjectRegistry != null && angularObjectRegistry.getRegistry() != null) {    final Map<String,Map<String,AngularObject>> registry=angularObjectRegistry.getRegistry();    logger.info("Push local angular object registry from ZeppelinServer to" + " remote interpreter group {}",this.getInterpreterGroup().getId());    final java.lang.reflect.Type registryType=new TypeToken<Map<String,Map<String,AngularObject>>>(){    }.getType();    Gson gson=new Gson();    client.angularRegistryPush(gson.toJson(registry,registryType));  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public String marshal(String plaintext) throws Exception {  return aesUtil.encrypt(encryptSalt,encryptVector,encryptVector,plaintext);}  }
class C{  public static int modulo(long[] hash,int divisor){  return modulo(hash[0],hash[1],divisor);}  }
class C{  @Override public void run(){  assert (monitors != null);  boolean reloaded=false;  for (Iterator<Monitor> i=monitors.iterator(); i.hasNext(); ) {    Monitor m=i.next();    try {      if (m.hasBeenModified()) {        if (!reloaded) {          reloaded=true;        }      }    } catch (    IOException ioe) {      if (LOGGER.isLoggable(Level.SEVERE)) {        LOGGER.severe("Unable to access url " + m.uri.toString() + ".  Monitoring for this resource will no longer occur.");      }      if (LOGGER.isLoggable(Level.FINE)) {        LOGGER.log(Level.FINE,ioe.toString(),ioe);      }      i.remove();    }  }  if (reloaded) {    reload(sc);  }}  }
class C{  public static final TColor newCMYKA(float c,float m,float y,float k,float a){  TColor col=new TColor();  col.setCMYK(new float[]{c,m,y,k});  col.alpha=MathUtils.clip(a,0,1);  return col;}  }
class C{  public boolean containsDigital(){  return this.getDigitalChannelMaskMsb() > 0 || this.getDigitalChannelMaskLsb() > 0;}  }
class C{  private MethodSpec generateContentValuesMethod(ObjectMappableAnnotatedClass clazz,String mapperClassName,String className){  ClassName typeName=ClassName.get(getPackageName(clazz),mapperClassName,className);  return MethodSpec.methodBuilder("contentValues").addJavadoc("Get a typesafe ContentValues Builder \n").addJavadoc("@return The ContentValues Builder \n").addModifiers(Modifier.PUBLIC,Modifier.STATIC).returns(typeName).addStatement("return new $T()",typeName).build();}  }
class C{  public Future<Integer> server(PhpModule phpModule){  return runCommand(phpModule,Arrays.asList(SERVER_COMMAND),null);}  }
class C{  public void start(@NonNull Context context,@NonNull Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ContentNode.class) {switch (baseFeatureID) {case DomPackage.CONTENT_NODE__OWNER:      return DomPackage.SIMPLE_TYPE_REFERENCE__OWNER;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TCLASS__EXTERNAL:    return external != EXTERNAL_EDEFAULT;case TypesPackage.TCLASS__DECLARED_ABSTRACT:  return declaredAbstract != DECLARED_ABSTRACT_EDEFAULT;case TypesPackage.TCLASS__DECLARED_N4JS:return declaredN4JS != DECLARED_N4JS_EDEFAULT;case TypesPackage.TCLASS__DECLARED_FINAL:return declaredFinal != DECLARED_FINAL_EDEFAULT;case TypesPackage.TCLASS__DECLARED_POLYFILL:return declaredPolyfill != DECLARED_POLYFILL_EDEFAULT;case TypesPackage.TCLASS__DECLARED_STATIC_POLYFILL:return declaredStaticPolyfill != DECLARED_STATIC_POLYFILL_EDEFAULT;case TypesPackage.TCLASS__OBSERVABLE:return observable != OBSERVABLE_EDEFAULT;case TypesPackage.TCLASS__SUPER_CLASS_REF:return superClassRef != null;case TypesPackage.TCLASS__IMPLEMENTED_INTERFACE_REFS:return implementedInterfaceRefs != null && !implementedInterfaceRefs.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected ExifTag addTag(ExifTag tag){  if (tag != null) {    int ifd=tag.getIfd();    return addTag(tag,ifd);  }  return null;}  }
class C{  private void mergeHi(int base1,int len1,int base2,int len2){  assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len2);  int tmpBase=this.tmpBase;  System.arraycopy(a,base2,tmp,tmpBase,len2);  int cursor1=base1 + len1 - 1;  int cursor2=tmpBase + len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,tmpBase,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      assert len1 > 0 && len2 > 1;      if (c.compare(tmp[cursor2],a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight(tmp[cursor2],a,base1,len1,len1 - 1,c);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft(a[cursor1],tmp,tmpBase,len2,len2 - 1,c);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    assert len1 == 0;    assert len2 > 0;    System.arraycopy(tmp,tmpBase,a,dest - (len2 - 1),len2);  }}  }
class C{  public short nextShort(){  return (short)(next(16));}  }
class C{  static void appendBytes(String content,Mode mode,BitArray bits,String encoding) throws WriterException {switch (mode) {case NUMERIC:    appendNumericBytes(content,bits);  break;case ALPHANUMERIC:appendAlphanumericBytes(content,bits);break;case BYTE:append8BitBytes(content,bits,encoding);break;case KANJI:appendKanjiBytes(content,bits);break;default :throw new WriterException("Invalid mode: " + mode);}}  }
class C{  private Object consumeNextObjectField(CallStack callstack,Interpreter interpreter,boolean forceClass,boolean autoAllocateThis) throws UtilEvalError {  if ((evalBaseObject == null && !isCompound(evalName)) && !forceClass) {    Object obj=resolveThisFieldReference(callstack,namespace,interpreter,evalName,false);    if (obj != Primitive.VOID)     return completeRound(evalName,FINISHED,obj);  }  String varName=prefix(evalName,1);  if ((evalBaseObject == null || evalBaseObject instanceof This) && !forceClass) {    if (Interpreter.DEBUG)     Interpreter.debug("trying to resolve variable: " + varName);    Object obj;    if (evalBaseObject == null) {      obj=resolveThisFieldReference(callstack,namespace,interpreter,varName,false);    } else {      obj=resolveThisFieldReference(callstack,((This)evalBaseObject).namespace,interpreter,varName,true);    }    if (obj != Primitive.VOID) {      if (Interpreter.DEBUG)       Interpreter.debug("resolved variable: " + varName + " in namespace: "+ namespace);      return completeRound(varName,suffix(evalName),obj);    }  }  if (evalBaseObject == null) {    if (Interpreter.DEBUG)     Interpreter.debug("trying class: " + evalName);    Class clas=null;    int i=1;    String className=null;    for (; i <= countParts(evalName); i++) {      className=prefix(evalName,i);      if ((clas=namespace.getClass(className)) != null)       break;    }    if (clas != null) {      return completeRound(className,suffix(evalName,countParts(evalName) - i),new ClassIdentifier(clas));    }    if (Interpreter.DEBUG)     Interpreter.debug("not a class, trying var prefix " + evalName);  }  if ((evalBaseObject == null || evalBaseObject instanceof This) && !forceClass && autoAllocateThis) {    NameSpace targetNameSpace=(evalBaseObject == null) ? namespace : ((This)evalBaseObject).namespace;    Object obj=new NameSpace(targetNameSpace,"auto: " + varName).getThis(interpreter);    targetNameSpace.setVariable(varName,obj,false,evalBaseObject == null);    return completeRound(varName,suffix(evalName),obj);  }  if (evalBaseObject == null) {    if (!isCompound(evalName)) {      return completeRound(evalName,FINISHED,Primitive.VOID);    } else     throw new UtilEvalError("Class or variable not found: " + evalName);  }  if (evalBaseObject == Primitive.NULL)   throw new UtilTargetError(new NullPointerException("Null Pointer while evaluating: " + value));  if (evalBaseObject == Primitive.VOID)   throw new UtilEvalError("Undefined variable or class name while evaluating: " + value);  if (evalBaseObject instanceof Primitive)   throw new UtilEvalError("Can't treat primitive like an object. " + "Error while evaluating: " + value);  if (evalBaseObject instanceof ClassIdentifier) {    Class clas=((ClassIdentifier)evalBaseObject).getTargetClass();    String field=prefix(evalName,1);    if (field.equals("this")) {      NameSpace ns=namespace;      while (ns != null) {        if (ns.classInstance != null && ns.classInstance.getClass() == clas)         return completeRound(field,suffix(evalName),ns.classInstance);        ns=ns.getParent();      }      throw new UtilEvalError("Can't find enclosing 'this' instance of class: " + clas);    }    Object obj=null;    try {      if (Interpreter.DEBUG)       Interpreter.debug("Name call to getStaticFieldValue, class: " + clas + ", field:"+ field);      obj=Reflect.getStaticFieldValue(clas,field);    } catch (    ReflectError e) {      if (Interpreter.DEBUG)       Interpreter.debug("field reflect error: " + e);    }    if (obj == null) {      String iclass=clas.getName() + "$" + field;      Class c=namespace.getClass(iclass);      if (c != null)       obj=new ClassIdentifier(c);    }    if (obj == null)     throw new UtilEvalError("No static field or inner class: " + field + " of "+ clas);    return completeRound(field,suffix(evalName),obj);  }  if (forceClass)   throw new UtilEvalError(value + " does not resolve to a class name.");  String field=prefix(evalName,1);  if (field.equals("length") && evalBaseObject.getClass().isArray()) {    Object obj=new Primitive(Array.getLength(evalBaseObject));    return completeRound(field,suffix(evalName),obj);  }  try {    Object obj=Reflect.getObjectFieldValue(evalBaseObject,field);    return completeRound(field,suffix(evalName),obj);  } catch (  ReflectError e) {  }  throw new UtilEvalError("Cannot access field: " + field + ", on object: "+ evalBaseObject);}  }
class C{  public CropTransformation(float aspectRatio,GravityHorizontal gravityHorizontal,GravityVertical gravityVertical){  mAspectRatio=aspectRatio;  mGravityHorizontal=gravityHorizontal;  mGravityVertical=gravityVertical;}  }
class C{  public void addHeader(String name,String value){  headers.put(name,value);}  }
class C{  public void doColor(Color color){}  }
class C{  public boolean isEmpty(){synchronized (children) {    return children.isEmpty();  }}  }
class C{  protected boolean isReaderActive(){  return activeReaders.isActiveLock();}  }
class C{  public static NodeId parseNodeId(String nodeIdRef) throws IllegalArgumentException {  if (nodeIdRef == null)   throw new IllegalArgumentException("null arg");  Matcher m;  m=NONE_STRING.matcher(nodeIdRef);  if (m.matches()) {    String obj=m.group(1);    return new NodeId(0,obj);  }  m=NONE_INT.matcher(nodeIdRef);  if (m.matches()) {    Integer obj=Integer.valueOf(m.group(1));    return new NodeId(0,obj);  }  m=NONE_GUID.matcher(nodeIdRef);  if (m.matches()) {    UUID obj=UUID.fromString(m.group(1));    return new NodeId(0,obj);  }  m=NONE_OPAQUE.matcher(nodeIdRef);  if (m.matches()) {    byte[] obj=CryptoUtil.base64Decode(m.group(1));    return new NodeId(0,obj);  }  m=INT_INT.matcher(nodeIdRef);  if (m.matches()) {    Integer nsi=Integer.valueOf(m.group(1));    Integer obj=Integer.valueOf(m.group(2));    return new NodeId(nsi,obj);  }  m=INT_STRING.matcher(nodeIdRef);  if (m.matches()) {    Integer nsi=Integer.valueOf(m.group(1));    String obj=m.group(2);    return new NodeId(nsi,obj);  }  m=INT_GUID.matcher(nodeIdRef);  if (m.matches()) {    Integer nsi=Integer.valueOf(m.group(1));    UUID obj=UUID.fromString(m.group(2));    return new NodeId(nsi,obj);  }  m=INT_OPAQUE.matcher(nodeIdRef);  if (m.matches()) {    Integer nsi=Integer.valueOf(m.group(1));    byte[] obj=CryptoUtil.base64Decode(m.group(2));    return new NodeId(nsi,obj);  }  throw new IllegalArgumentException("Invalid string representation of a nodeId: " + nodeIdRef);}  }
class C{  protected void sendMomentaryFunctionGroup5(){  DCCppMessage msg=DCCppMessage.makeFunctionGroup5SetMomMsg(this.getDccAddress(),f21Momentary,f22Momentary,f23Momentary,f24Momentary,f25Momentary,f26Momentary,f27Momentary,f28Momentary);  queueMessage(msg,THROTTLEIDLE);}  }
class C{  private void updateStats(String tblName){  Connection conn=ses.attachment();  assert conn != null;  Statement stmt=null;  try {    stmt=conn.createStatement();    stmt.executeUpdate("insert into " + tblName + " default values");  } catch (  SQLException e) {    throw new IgniteException("Failed to update H2 store usage stats",e);  } finally {    U.closeQuiet(stmt);  }}  }
class C{  private void addGrantEntry(GrantEntry ge,KeyStore keyStore){  if (debug != null) {    debug.println("Adding policy entry: ");    debug.println("  signedBy " + ge.signedBy);    debug.println("  codeBase " + ge.codeBase);    if (ge.principals != null) {      for (      PrincipalEntry pppe : ge.principals) {        debug.println("  " + pppe.getPrincipalClass() + " "+ pppe.getPrincipalName());      }    }    debug.println();  }  try {    CodeSource codesource=getCodeSource(ge,keyStore);    if (codesource == null)     return;    PolicyEntry entry=new PolicyEntry(codesource);    Enumeration<PermissionEntry> enum_=ge.permissionElements();    while (enum_.hasMoreElements()) {      PermissionEntry pe=enum_.nextElement();      try {        Permission perm;        if (pe.permission.equals("javax.security.auth.PrivateCredentialPermission") && pe.name.endsWith(" self")) {          perm=getInstance(pe.permission,pe.name + " \"self\"",pe.action);        } else {          perm=getInstance(pe.permission,pe.name,pe.action);        }        entry.add(perm);        if (debug != null) {          debug.println("  " + perm);        }      } catch (      ClassNotFoundException cnfe) {        Certificate certs[];        if (pe.signedBy != null) {          certs=getCertificates(keyStore,pe.signedBy);        } else {          certs=null;        }        if (certs != null || pe.signedBy == null) {          Permission perm=new UnresolvedPermission(pe.permission,pe.name,pe.action,certs);          entry.add(perm);          if (debug != null) {            debug.println("  " + perm);          }        }      }catch (      java.lang.reflect.InvocationTargetException ite) {        System.err.println(AUTH_POLICY + rb.getString(".error.adding.Permission.") + pe.permission+ rb.getString("SPACE")+ ite.getTargetException());      }catch (      Exception e) {        System.err.println(AUTH_POLICY + rb.getString(".error.adding.Permission.") + pe.permission+ rb.getString("SPACE")+ e);      }    }    policyEntries.addElement(entry);  } catch (  Exception e) {    System.err.println(AUTH_POLICY + rb.getString(".error.adding.Entry.") + ge+ rb.getString("SPACE")+ e);  }  if (debug != null) {    debug.println();  }}  }
class C{  public MaterialCard(){  super(Document.get().createDivElement(),"card");}  }
class C{  public GemfireRestException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Light provideLight(String name) throws IllegalArgumentException {  return (Light)super.provideNamedBean(name);}  }
class C{  public static ASN1Primitive convertValueToObject(X509Extension ext) throws IllegalArgumentException {  try {    return ASN1Primitive.fromByteArray(ext.getValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  private static void restoreLibraryInfo(){  fgLibraryInfoMap=new HashMap<String,LibraryInfo>(10);  IPath libPath=getDefault().getStateLocation();  libPath=libPath.append("libraryInfos.xml");  File file=libPath.toFile();  if (file.exists()) {    try {      InputStream stream=new BufferedInputStream(new FileInputStream(file));      DocumentBuilder parser=DocumentBuilderFactory.newInstance().newDocumentBuilder();      parser.setErrorHandler(new DefaultHandler());      Element root=parser.parse(new InputSource(stream)).getDocumentElement();      if (!root.getNodeName().equals("libraryInfos")) {        return;      }      NodeList list=root.getChildNodes();      int length=list.getLength();      for (int i=0; i < length; ++i) {        Node node=list.item(i);        short type=node.getNodeType();        if (type == Node.ELEMENT_NODE) {          Element element=(Element)node;          String nodeName=element.getNodeName();          if (nodeName.equalsIgnoreCase("libraryInfo")) {            String version=element.getAttribute("version");            String location=element.getAttribute("home");            String[] bootpath=getPathsFromXML(element,"bootpath");            String[] extDirs=getPathsFromXML(element,"extensionDirs");            String[] endDirs=getPathsFromXML(element,"endorsedDirs");            if (location != null) {              LibraryInfo info=new LibraryInfo(version,bootpath,extDirs,endDirs);              fgLibraryInfoMap.put(location,info);            }          }        }      }    } catch (    IOException|SAXException|ParserConfigurationException e) {      log(e);    }  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT___GET_ANNOTATIONS:    return getAnnotations();}return super.eInvoke(operationID,arguments);}  }
class C{  public void incEventsConflated(){  this._stats.incLong(_eventsConflatedId,1);}  }
class C{  public static boolean isImmutable(Object function){  return isImmutableClass(function.getClass());}  }
class C{  protected CMapFormat6(short language){  super((short)6,language);}  }
class C{  protected Token createInternalUseOnlyToken(){  return new DefaultToken();}  }
class C{  public void addURLSeries(List urls){  List listToAdd=null;  if (urls != null) {    listToAdd=new java.util.ArrayList(urls);  }  this.urlSeries.add(listToAdd);}  }
class C{  public void sanityCheck(){}  }
class C{  public ClientConfig withPortalPort(int portalPort){  setPortalPort(port);  return this;}  }
class C{  public boolean containsKey(Object key){  return getEntry(key) != null;}  }
class C{  public static void list(){  renderArgs.put("dataTable",new ComputeVirtualPoolsDataTable());  render();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.createProcessingInstruction("TARGET","DATA");  newValue=newNode.getNodeValue();  assertEquals("initial","DATA",newValue);  newNode.setNodeValue("This should have an effect");  newValue=newNode.getNodeValue();  assertEquals("after","This should have an effect",newValue);}  }
class C{  public void reset() throws Exception {  if (m_File != null) {    ((AbstractFileLoader)m_Loader).setFile(m_File);  } else   if (m_URL != null) {    ((URLSourcedLoader)m_Loader).setURL(m_URL.toString());  } else   if (m_Loader != null) {    m_Loader.reset();  }  m_BatchCounter=0;  m_IncrementalBuffer=null;  if (m_Loader != null) {    if (!isIncremental()) {      m_BatchBuffer=m_Loader.getDataSet();    } else {      m_BatchBuffer=null;    }  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ID:    return is_set_id();case PROPERTY:  return is_set_property();}throw new IllegalStateException();}  }
class C{  public static final long transfer(Reader reader,File file) throws IOException {  FileWriter writer=new FileWriter(file);  try {    return transfer(reader,writer);  }  finally {    writer.close();  }}  }
class C{  public RepositoryManagerBuilder buildManagerBuilder(){  if (log == null) {    log=new CMRJULLogger();  }  actualCwd=new File(".");  if (config == null) {    if (cwd == null || actualCwd.equals(cwd)) {      cwd=actualCwd;      config=CeylonConfig.get();    } else {      config=CeylonConfig.createFromLocalDir(cwd);    }  } else   if (cwd == null) {    cwd=actualCwd;  }  Repositories repositories=Repositories.withConfig(config);  File root;  if (cacheRepo == null) {    Repositories.Repository cr=repositories.getCacheRepository();    root=new File(absolute(cr.getUrl()));  } else {    root=new File(absolute(resolveRepoUrl(repositories,cacheRepo)));  }  if (noCacheRepo || avoidRepository(root.getAbsolutePath())) {    root=null;    skipRemoteRepositories=true;  }  final RepositoryManagerBuilder builder=new RepositoryManagerBuilder(root,log,isOffline(config),getTimeout(config),getProxy(config),getOverrides(config),upgradeDist);  if (systemRepo == null) {    if (!noSystemRepo) {      addRepo(builder,repositories.getSystemRepository());    }  } else {    addRepo(builder,repositories,systemRepo);  }  if (!noOutRepo) {    if (outRepo == null) {      if (!noDefRepos) {        addRepo(builder,repositories.getOutputRepository());      }    } else {      addRepo(builder,repositories,outRepo);    }  }  if (jdkIncluded) {    addRepo(builder,repositories,"jdk");  }  if (userRepos != null && !userRepos.isEmpty()) {    for (    String repo : userRepos) {      addRepo(builder,repositories,repo);    }  } else {    if (!noDefRepos) {      Repositories.Repository[] repos=repositories.getLocalLookupRepositories();      for (      Repositories.Repository lookup : repos) {        addRepo(builder,lookup);      }    }  }  if (extraUserRepos != null && !extraUserRepos.isEmpty()) {    for (    String repo : extraUserRepos) {      addRepo(builder,repositories,repo);    }  }  if (!noDefRepos) {    Repositories.Repository[] globals=repositories.getGlobalLookupRepositories();    for (    Repositories.Repository lookup : globals) {      addRepo(builder,lookup);    }  }  if (remoteRepos != null && !remoteRepos.isEmpty()) {    for (    String repo : remoteRepos) {      addRepo(builder,repositories,repo);    }  } else {    if (!noDefRepos) {      Repositories.Repository[] repos=repositories.getRemoteLookupRepositories();      for (      Repositories.Repository lookup : repos) {        addRepo(builder,lookup);      }    }  }  if (!noDefRepos) {    Repositories.Repository[] others=repositories.getOtherLookupRepositories();    for (    Repositories.Repository lookup : others) {      addRepo(builder,lookup);    }  }  log.debug("Repository lookup order:");  for (  String rds : builder.getRepositoriesDisplayString()) {    log.debug(" - " + rds);  }  return builder;}  }
class C{  public static boolean isImageCached(Path path){  if (!Globals.settings.isImageCache()) {    return false;  }  Path cachedFile=CACHE_DIR.resolve(ImageCache.getMD5(path.toString()) + "." + Utils.getExtension(path));  if (Files.exists(cachedFile)) {    return true;  }  return false;}  }
class C{  private String validateDatasetExists(String guid) throws AtlasException {  Iterator<AtlasVertex> results=graph.query().has(Constants.GUID_PROPERTY_KEY,guid).has(Constants.SUPER_TYPES_PROPERTY_KEY,AtlasClient.DATA_SET_SUPER_TYPE).vertices().iterator();  while (results.hasNext()) {    AtlasVertex vertex=results.next();    return GraphHelper.getTypeName(vertex);  }  throw new EntityNotFoundException("Dataset with guid = " + guid + " does not exist");}  }
class C{  public static String dumpCursorToString(Cursor cursor){  StringBuilder sb=new StringBuilder();  dumpCursor(cursor,sb);  return sb.toString();}  }
class C{  private void placeRelevantAdb() throws ADBManagerException, IOException {  if (OS.contains("windows")) {    String windowsPath="/adb/windows/";    adbPath=copyAssets(windowsPath,"adb.exe");    copyAssets(windowsPath,"AdbWinApi.dll");    copyAssets(windowsPath,"AdbWinUsbApi.dll");  } else   if (OS.contains("linux")) {    String linuxPath="/adb/linux/";    adbPath=copyAssets(linuxPath,"adb");  } else   if (OS.contains("mac")) {    String macPath="/adb/mac/";    adbPath=copyAssets(macPath,"adb");  } else {    throw new ADBManagerException("Unsupproted operation system.");  }}  }
class C{  public BytesRef(int capacity){  this.bytes=new byte[capacity];}  }
class C{  public T caseGenericReference(GenericReference object){  return null;}  }
class C{  public String toString(){  return Byte.toString(getValue());}  }
class C{  @Override public Collection<? extends java.security.cert.CRL> engineGenerateCRLs(InputStream is) throws CRLException {  if (is == null) {    throw new CRLException("Missing input stream");  }  try {    return parseX509orPKCS7CRL(is);  } catch (  IOException ioe) {    throw new CRLException(ioe.getMessage());  }}  }
class C{  public SocksSocket(SocksProxy proxy) throws IOException {  this(proxy,proxy.createProxySocket());}  }
class C{  public StandardXYItemLabelGenerator(String formatString,NumberFormat xFormat,DateFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  private void drawCircle(Canvas canvas,float cx,float cy,int color,float pct){  mPaint.setColor(color);  canvas.save();  canvas.translate(cx,cy);  float radiusScale=INTERPOLATOR.getInterpolation(pct);  canvas.scale(radiusScale,radiusScale);  canvas.drawCircle(0,0,cx,mPaint);  canvas.restore();}  }
class C{  @SuppressWarnings("synthetic-access") public void recordEventState(InternalDistributedMember sender,Map eventState){  StringBuffer sb=null;  final boolean isDebugEnabled_BS=logger.isTraceEnabled(LogMarker.BRIDGE_SERVER);  if (isDebugEnabled_BS) {    sb=new StringBuffer(500);    sb.append("Recording initial event state for ").append(this.regionName).append(" from ").append(sender);  }  for (Iterator it=eventState.entrySet().iterator(); it.hasNext(); ) {    Map.Entry entry=(Map.Entry)it.next();    DispatchedAndCurrentEvents giiDace=(DispatchedAndCurrentEvents)entry.getValue();    if (giiDace != null) {      giiDace.owningQueue=this;      giiDace.isGIIDace=true;      if (giiDace.QRM_LOCK == null) {        giiDace.QRM_LOCK=new Object();      }      if (isDebugEnabled_BS) {        sb.append("\n  ").append(((ThreadIdentifier)entry.getKey()).expensiveToString()).append("; sequenceID=").append(giiDace.lastSequenceIDPut);      }      Object o=this.eventsMap.putIfAbsent(entry.getKey(),giiDace);      if (o != null && isDebugEnabled_BS) {        sb.append(" -- could not store.  found " + o);      }    }  }  if (isDebugEnabled_BS) {    logger.trace(LogMarker.BRIDGE_SERVER,sb.toString());  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(getSeriesInfo(stack).getNumberOfCharacters());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void moveCaretToLineStart(@NotNull Editor editor,boolean isWithSelection){  Document document=editor.getDocument();  SelectionModel selectionModel=editor.getSelectionModel();  int selectionStart=selectionModel.getLeadSelectionOffset();  CaretModel caretModel=editor.getCaretModel();  LogicalPosition blockSelectionStart=caretModel.getLogicalPosition();  EditorSettings editorSettings=editor.getSettings();  int logCaretLine=caretModel.getLogicalPosition().line;  VisualPosition currentVisCaret=caretModel.getVisualPosition();  VisualPosition caretLogLineStartVis=editor.offsetToVisualPosition(document.getLineStartOffset(logCaretLine));  if (currentVisCaret.line > caretLogLineStartVis.line) {    if (editorSettings.isSmartHome()) {      moveCaretToStartOfSoftWrappedLine(editor,currentVisCaret,currentVisCaret.line - caretLogLineStartVis.line);    } else {      caretModel.moveToVisualPosition(new VisualPosition(currentVisCaret.line,0));    }    setupSelection(editor,isWithSelection,selectionStart,blockSelectionStart);    EditorModificationUtil.scrollToCaret(editor);    return;  }  int logLineToUse=logCaretLine - 1;  while (logLineToUse >= 0 && editor.offsetToVisualPosition(document.getLineEndOffset(logLineToUse)).line == currentVisCaret.line) {    logLineToUse--;  }  logLineToUse++;  if (logLineToUse >= document.getLineCount() || !editorSettings.isSmartHome()) {    editor.getCaretModel().moveToLogicalPosition(new LogicalPosition(logLineToUse,0));  } else   if (logLineToUse == logCaretLine) {    int line=currentVisCaret.line;    int column;    if (currentVisCaret.column == 0) {      column=findSmartIndentColumn(editor,currentVisCaret.line);    } else {      column=findFirstNonSpaceColumnOnTheLine(editor,currentVisCaret.line);      if (column >= currentVisCaret.column) {        column=0;      }    }    caretModel.moveToVisualPosition(new VisualPosition(line,Math.max(column,0)));  } else {    LogicalPosition logLineEndLog=editor.offsetToLogicalPosition(document.getLineEndOffset(logLineToUse));    VisualPosition logLineEndVis=editor.logicalToVisualPosition(logLineEndLog);    if (logLineEndLog.softWrapLinesOnCurrentLogicalLine > 0) {      moveCaretToStartOfSoftWrappedLine(editor,logLineEndVis,logLineEndLog.softWrapLinesOnCurrentLogicalLine);    } else {      int line=logLineEndVis.line;      if (currentVisCaret.column == 0 && editorSettings.isSmartHome()) {        findSmartIndentColumn(editor,line);      }      int column=0;      caretModel.moveToVisualPosition(new VisualPosition(line,column));    }  }  setupSelection(editor,isWithSelection,selectionStart,blockSelectionStart);  EditorModificationUtil.scrollToCaret(editor);}  }
class C{  public static void error(Element e,String message){  messager.printMessage(Diagnostic.Kind.ERROR,message,e);}  }
class C{  protected <R extends Representation,P extends RequestParameters>Response post(Request request,RestBackend.Post<R,P> backend,R content,P params){  int version=getVersion(request);  prepareData(version,params,false,content,true);  Object newId=backend.post(content,params);  ContainerRequest cr=(ContainerRequest)request;  UriBuilder builder=cr.getAbsolutePathBuilder();  URI uri=builder.path(newId.toString()).build();  return Response.created(uri).build();}  }
class C{  public NamedThreadFactory(String namePrefix){  this.namePrefix=Objects.requireNonNull(namePrefix);  group=getThreadGroup();  daemon=true;}  }
class C{  public void parseDTD(String publicID,IXMLReader reader,IXMLEntityResolver entityResolver,boolean external) throws Exception {  XMLUtil.skipWhitespace(reader,null);  int origLevel=reader.getStreamLevel();  for (; ; ) {    String str=XMLUtil.read(reader,'%');    char ch=str.charAt(0);    if (ch == '%') {      XMLUtil.processEntity(str,reader,this.parameterEntityResolver);      continue;    } else     if (ch == '<') {      this.processElement(reader,entityResolver);    } else     if (ch == ']') {      return;    } else {      XMLUtil.errorInvalidInput(reader.getSystemID(),reader.getLineNr(),str);    }    do {      ch=reader.read();      if (external && (reader.getStreamLevel() < origLevel)) {        reader.unread(ch);        return;      }    } while ((ch == ' ') || (ch == '\t') || (ch == '\n')|| (ch == '\r'));    reader.unread(ch);  }}  }
class C{  public int constrain(int size,float refValue,ContainerWrapper parent){  if (max != null)   size=Math.min(size,max.getPixels(refValue,parent,parent));  if (min != null)   size=Math.max(size,min.getPixels(refValue,parent,parent));  return size;}  }
class C{  public static int toInt(byte[] bytes,int offset){  if (littleEndian) {    return Integer.reverseBytes(theUnsafe.getInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET));  } else {    return theUnsafe.getInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET);  }}  }
class C{  public int[] toSortedModelIndices(int[] unsortedModelIndices){  int[] sortedModelIndices=new int[unsortedModelIndices.length];  int x=0;  for (  int unsortedIndex : unsortedModelIndices) {    sortedModelIndices[x++]=toSortedModelIndex(unsortedIndex);  }  Arrays.sort(sortedModelIndices);  return sortedModelIndices;}  }
class C{  protected boolean consumeArgumentDelimiter() throws SyntaxError {  if (hasMoreArguments()) {    sp.expect(",");    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.945 -0500",hash_original_method="BEBCC50C9D4D6D2EEDEE155B4F15D792",hash_generated_method="0BB8E31B2DB76EE59D88CA669423161E") public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  @JsonCreator public VectorClock(@JsonProperty("entries") List<ClockEntry> versions,@JsonProperty("timestamp") long timestamp){  this.versions=versions;  this.timestamp=timestamp;}  }
class C{  public GrabPoint removeGrabPoint(GrabPoint rgp){  if (offsetPoints != null) {    Offset offset=offsetPoints.remove(rgp);    if (offset != null) {      return offset.gp;    }  }  return null;}  }
class C{  @SuppressWarnings({"raw","unchecked"}) public static <T>NePredicate<T> ne(Property<T> property,Variable variable){  return new NePredicate(property(property),variable);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element elementNode;  String elementName;  doc=(Document)load("hc_staff",false);  elementNode=doc.getDocumentElement();  elementName=elementNode.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgNodeName","svg",elementName);  } else {    assertEqualsAutoCase("element","nodeName","html",elementName);  }}  }
class C{  public static void main(String[] args) throws AdeException {  AdeExtRequestType requestType=AdeExtRequestType.UPDATE_GROUPS;  UpdateGroups groups=new UpdateGroups(requestType);  AdeExtMessageHandler messageHandler=new AdeExtMessageHandler();  try {    groups.run(args);  } catch (  AdeUsageException e) {    messageHandler.handleUserException(e);  }catch (  AdeInternalException e) {    messageHandler.handleAdeInternalException(e);  }catch (  AdeException e) {    messageHandler.handleAdeException(e);  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.DURATION_TYPE,this);}  }
class C{  public Text toUpperCase(){  if (_data == null)   return newComposite(_head.toUpperCase(),_tail.toUpperCase());  Text text=Text.newPrimitive(_count);  for (int i=0; i < _count; ) {    text._data[i]=Character.toUpperCase(_data[i++]);  }  return text;}  }
class C{  protected void handleMesosStatusUpdate(String taskId,Protos.TaskStatus status){switch (status.getState()) {case TASK_STAGING:    LOG.info(String.format("Task with id '%s' STAGING",status.getTaskId().getValue()));  LOG.severe("Framework status updates should not use");break;case TASK_STARTING:LOG.info(String.format("Task with id '%s' STARTING",status.getTaskId().getValue()));break;case TASK_RUNNING:LOG.info(String.format("Task with id '%s' RUNNING",status.getTaskId().getValue()));break;case TASK_FINISHED:LOG.info(String.format("Task with id '%s' FINISHED",status.getTaskId().getValue()));LOG.severe("Heron job should not finish!");break;case TASK_FAILED:LOG.info(String.format("Task with id '%s' FAILED",status.getTaskId().getValue()));handleMesosFailure(taskId);break;case TASK_KILLED:LOG.info("Task killed which is supported running. " + "It could be triggered by manual restart command");handleMesosFailure(taskId);break;case TASK_LOST:LOG.info(String.format("Task with id '%s' LOST",status.getTaskId().getValue()));handleMesosFailure(taskId);break;case TASK_ERROR:LOG.info(String.format("Task with id '%s' ERROR",status.getTaskId().getValue()));handleMesosFailure(taskId);break;default :LOG.severe("Unknown TaskState:" + status.getState() + " for taskId: "+ status.getTaskId().getValue());break;}}  }
class C{  private void initiateSharedPreferences(){  if (mSharedPreferences == null) {    mSharedPreferences=PreferenceManager.getDefaultSharedPreferences(mContext);  }}  }
class C{  @Override public void println(int priority,String tag,String msg,Throwable tr){  String useMsg=msg;  if (useMsg == null) {    useMsg="";  }  if (tr != null) {    msg+="\n" + Log.getStackTraceString(tr);  }  Log.println(priority,tag,useMsg);  if (mNext != null) {    mNext.println(priority,tag,msg,tr);  }}  }
class C{  private boolean isImplicitTemporaryTable(){  return this.isImplicitTempTable;}  }
class C{  default B removeColor(){  this.meta().removeColor();  return this.getBuilder();}  }
class C{  public static Boolean isJwtExpired(String jwtString) throws ParseException {  JWT jwt=JWTParser.parse(jwtString);  if (jwt.getJWTClaimsSet() != null && jwt.getJWTClaimsSet().getExpirationTime() != null) {    DateTime expirationDate=new DateTime(jwt.getJWTClaimsSet().getExpirationTime());    return expirationDate.isBefore(DateTime.now());  }  return false;}  }
class C{  public static double parseDoubleArg(CommandLine line,String argName,double variable){  if (line.hasOption(argName)) {    double num=0.0;    try {      num=Double.parseDouble(line.getOptionValue(argName));    } catch (    NumberFormatException e) {      System.err.println("Parsing failed.  Reason: " + e.getMessage());    }    if (num > 0.0) {      variable=num;    }    System.err.println("set " + argName + " to "+ variable);  }  return variable;}  }
class C{  static boolean deleteCascade(int AD_Table_ID,int Record_ID,String trxName){  for (int i=0; i < s_cascades.length; i++) {    if (s_cascades[i] != AD_Table_ID) {      Object[] params=new Object[]{new Integer(AD_Table_ID),new Integer(Record_ID)};      StringBuffer sql=new StringBuffer("DELETE FROM ").append(s_cascadeNames[i]).append(" WHERE AD_Table_ID=? AND Record_ID=?");      int no=DB.executeUpdate(sql.toString(),params,false,trxName);      if (no > 0)       log.config(s_cascadeNames[i] + " (" + AD_Table_ID+ "/"+ Record_ID+ ") #"+ no); else       if (no < 0) {        log.severe(s_cascadeNames[i] + " (" + AD_Table_ID+ "/"+ Record_ID+ ") #"+ no);        return false;      }    }  }  for (int j=0; j < s_parents.length; j++) {    if (s_parents[j] == AD_Table_ID) {      int AD_Table_IDchild=s_parentChilds[j];      Object[] params=new Object[]{new Integer(AD_Table_IDchild),new Integer(Record_ID)};      for (int i=0; i < s_cascades.length; i++) {        StringBuffer sql=new StringBuffer("DELETE FROM ").append(s_cascadeNames[i]).append(" WHERE AD_Table_ID=? AND Record_ID IN (SELECT ").append(s_parentChildNames[j]).append("_ID FROM ").append(s_parentChildNames[j]).append(" WHERE ").append(s_parentNames[j]).append("_ID=?)");        int no=DB.executeUpdate(sql.toString(),params,false,trxName);        if (no > 0)         log.config(s_cascadeNames[i] + " " + s_parentNames[j]+ " ("+ AD_Table_ID+ "/"+ Record_ID+ ") #"+ no); else         if (no < 0) {          log.severe(s_cascadeNames[i] + " " + s_parentNames[j]+ " ("+ AD_Table_ID+ "/"+ Record_ID+ ") #"+ no);          return false;        }      }    }  }  return true;}  }
class C{  final boolean isMatched(){  Object x=item;  return (x == this) || ((x == null) == isData);}  }
class C{  public static Response createBindingErrorResponse(char errorCode,String reasonPhrase){  return createBindingErrorResponse(errorCode,reasonPhrase,null);}  }
class C{  public MosaicIdSupplyPair(final MosaicId mosaicId,final Supply supply){  this.mosaicId=mosaicId;  this.supply=supply;  this.validate();}  }
class C{  public PickledGraphite(String hostname,int port,SocketFactory socketFactory,Charset charset,int batchSize){  this.address=null;  this.hostname=hostname;  this.port=port;  this.socketFactory=socketFactory;  this.charset=charset;  this.batchSize=batchSize;}  }
class C{  public static String trimLineSeparator(String line){  int n=line.length();  if (n == 0) {    return line;  }  char ch=line.charAt(n - 1);  if (ch == '\n' || ch == '\r') {    n--;  } else {    return line;  }  if (n > 0) {    char ch2=line.charAt(n - 1);    if ((ch2 == '\n' || ch2 == '\r') && ch2 != ch) {      n--;    }  }  return line.substring(0,n);}  }
class C{  @Override public void buildEvaluator(Instances data) throws Exception {  getCapabilities().testWithFail(data);  buildAttributeConstructor(data);}  }
class C{  public List<?> extractData(byte[] stegoData,String stegoFileName) throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.DATA_HIDING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_DH);  }  byte[] msg=null;  List<Object> output=new ArrayList<Object>();  try {    output.add(this.plugin.extractMsgFileName(stegoData,stegoFileName));    msg=this.plugin.extractData(stegoData,stegoFileName,null);    if (this.config.isUseEncryption()) {      OpenStegoCrypto crypto=new OpenStegoCrypto(this.config.getPassword());      msg=crypto.decrypt(msg);    }    if (this.config.isUseCompression()) {      try {        ByteArrayInputStream bis=new ByteArrayInputStream(msg);        GZIPInputStream zis=new GZIPInputStream(bis);        msg=CommonUtil.getStreamBytes(zis);        zis.close();        bis.close();      } catch (      IOException ioEx) {        throw new OpenStegoException(ioEx,OpenStego.NAMESPACE,OpenStegoException.CORRUPT_DATA);      }    }    output.add(msg);  } catch (  OpenStegoException osEx) {    throw osEx;  }catch (  Exception ex) {    throw new OpenStegoException(ex);  }  return output;}  }
class C{  private static void initBlueMap(){  for (int luma=0; luma <= 0xFF; luma++) {    for (int cb=0; cb <= 0xFF; cb++) {      int c=luma - 16;      int d=cb - 128;      int blue=(298 * c + 516 * d + 128) >> 8;      blue=clamp[blue + CLAMP_BASE];      blueMap[luma][cb]=blue << 16;    }  }}  }
class C{  public UpdateAttributesProcessor(DistributionAdvisee da){  this(da,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistreturnfirstitem.class,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.189 -0400",hash_original_method="473EAA9BFD3853985435EE444206468A",hash_generated_method="B56D8C13B12B0628537BFAE0579EBA98") String calculateHttpEncoding(String httpContentType,String bomEnc,String xmlGuessEnc,String xmlEnc,boolean lenient) throws IOException {  if (lenient && xmlEnc != null) {    return xmlEnc;  }  String cTMime=getContentTypeMime(httpContentType);  String cTEnc=getContentTypeEncoding(httpContentType);  boolean appXml=isAppXml(cTMime);  boolean textXml=isTextXml(cTMime);  if (!appXml && !textXml) {    String msg=MessageFormat.format(HTTP_EX_3,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);  }  if (cTEnc == null) {    if (appXml) {      return calculateRawEncoding(bomEnc,xmlGuessEnc,xmlEnc);    } else {      return defaultEncoding == null ? US_ASCII : defaultEncoding;    }  }  if (cTEnc.equals(UTF_16BE) || cTEnc.equals(UTF_16LE)) {    if (bomEnc != null) {      String msg=MessageFormat.format(HTTP_EX_1,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);      throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    }    return cTEnc;  }  if (cTEnc.equals(UTF_16)) {    if (bomEnc != null && bomEnc.startsWith(UTF_16)) {      return bomEnc;    }    String msg=MessageFormat.format(HTTP_EX_2,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);  }  if (cTEnc.equals(UTF_32BE) || cTEnc.equals(UTF_32LE)) {    if (bomEnc != null) {      String msg=MessageFormat.format(HTTP_EX_1,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);      throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    }    return cTEnc;  }  if (cTEnc.equals(UTF_32)) {    if (bomEnc != null && bomEnc.startsWith(UTF_32)) {      return bomEnc;    }    String msg=MessageFormat.format(HTTP_EX_2,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);  }  return cTEnc;}  }
class C{  public void addLongSelectionListener(SelectionListener listener){  if (listener == null)   throw new IllegalArgumentException();  if (!longSelectionListeners.contains(listener))   longSelectionListeners.add(listener);}  }
class C{  public SVGOMFlowRootElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset){  if (dataset == null) {    return null;  }  if (this.renderAsPercentages) {    return new Range(0.0,1.0);  } else {    return DatasetUtilities.findStackedRangeBounds(dataset,getBase());  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiScrollPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiScrollPaneUI)mui).uis,a);}  }
class C{  public static <T>Box<T> create(){  return new Box<T>();}  }
class C{  public void testClear(){  LinkedBlockingQueue q=populatedQueue(SIZE);  q.clear();  assertTrue(q.isEmpty());  assertEquals(0,q.size());  assertEquals(SIZE,q.remainingCapacity());  q.add(one);  assertFalse(q.isEmpty());  assertTrue(q.contains(one));  q.clear();  assertTrue(q.isEmpty());}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","gwng");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public boolean isSystemIndicesReturned(){  return systemIndicesReturned;}  }
class C{  public final Vec3D maxSelf(ReadonlyVec3D b){  x=MathUtils.max(x,b.x());  y=MathUtils.max(y,b.y());  z=MathUtils.max(z,b.z());  return this;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MRRC");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  @CheckForNull private static String resolvePluginClassesDir(String bundleName,File sourceDir){  if (sourceDir.listFiles() == null) {    FindbugsPlugin.getDefault().logException(new IllegalStateException("No files in the bundle!"),"Failed to create temporary detector package for bundle " + sourceDir);    return null;  }  String outputDir=getBuildDirectory(bundleName,sourceDir);  if (outputDir.length() == 0) {    FindbugsPlugin.getDefault().logException(new IllegalStateException("No output directory in build.properties"),"No output directory in build.properties " + sourceDir);    return null;  }  File classDir=new File(sourceDir,outputDir);  if (classDir.listFiles() == null) {    FindbugsPlugin.getDefault().logException(new IllegalStateException("No files in the bundle output dir!"),"Failed to create temporary detector package for bundle " + sourceDir);    return null;  }  File etcDir=new File(sourceDir,"etc");  if (etcDir.listFiles() == null) {    FindbugsPlugin.getDefault().logException(new IllegalStateException("No files in the bundle etc dir!"),"Failed to create temporary detector package for bundle " + sourceDir);    return null;  }  return classDir.getAbsolutePath();}  }
class C{  public void init(float startX,float startY,float endX,float endY){  setStart(new PointF(startX,startY));  setEnd(new PointF(endX,endY));}  }
class C{  public String code(){  return this.code;}  }
class C{  public static void println(short x){  out.println(x);}  }
class C{  public boolean hasValue(){  return super.hasAttribute(VALUE);}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  String prefix="", ns="", localName=target;  int colon=target.indexOf(':');  if (colon >= 0) {    ns=getNamespaceForPrefix(prefix=target.substring(0,colon));    localName=target.substring(colon + 1);  }  try {    if ("xalan-doc-cache-off".equals(target) || "xalan:doc-cache-off".equals(target) || ("doc-cache-off".equals(localName) && ns.equals("org.apache.xalan.xslt.extensions.Redirect"))) {      if (!(m_elems.peek() instanceof ElemForEach))       throw new TransformerException("xalan:doc-cache-off not allowed here!",getLocator());      ElemForEach elem=(ElemForEach)m_elems.peek();      elem.m_doc_cache_off=true;    }  } catch (  Exception e) {  }  flushCharacters();  getCurrentProcessor().processingInstruction(this,target,data);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return sage.plugin.CorePluginManager.getInstance().isRestartNeeded() ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.721 -0400",hash_original_method="A52AC32E391B7F84AF3674F051432B93",hash_generated_method="852A0A5625B2CC7105AC40FA77658177") public FileWriterWithEncoding(String filename,String encoding) throws IOException {  this(new File(filename),encoding,false);}  }
class C{  public static void main(final String[] args){  try {    if (args.length > 0 && "-u".equals(args[0])) {      openBrowser(args[1]);    } else {      System.out.println("Usage java " + Browser.class.getCanonicalName() + " -u [URL]");    }  }  finally {    ConcurrentLog.shutdown();  }  System.out.println("The End!");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final void receiveReadonlyMessage(TOMMessage message,MessageContext msgCtx){  byte[] response=null;  if (executor instanceof FIFOExecutable) {    response=((FIFOExecutable)executor).executeUnorderedFIFO(message.getContent(),msgCtx,message.getSender(),message.getOperationId());  } else {    response=executor.executeUnordered(message.getContent(),msgCtx);  }  if (message.getReqType() == TOMMessageType.UNORDERED_HASHED_REQUEST && message.getReplyServer() != this.id) {    response=TOMUtil.computeHash(response);  }  message.reply=new TOMMessage(id,message.getSession(),message.getSequence(),response,SVController.getCurrentViewId(),message.getReqType());  if (SVController.getStaticConf().getNumRepliers() > 0) {    repMan.send(message);  } else {    cs.send(new int[]{message.getSender()},message.reply);  }}  }
class C{  public void createMainCatalog() throws IOException {  long countMetadata;  CatalogManager.callback.startInitializeMainCatalog();  CatalogManager.recordRamUsage("Initial");  CatalogManager.reset();  CatalogManager.initialize();  CatalogManager.thumbnailManager.reset();  CatalogManager.coverManager.reset();  CachedFileManager.reset();  Localization.Main.setProfileLanguage(currentProfile.getLanguage());  Localization.Enum.setProfileLanguage(currentProfile.getLanguage());  Localization.Main.reloadLocalizations();  Localization.Enum.reloadLocalizations();  String textYES=Localization.Main.getText("boolean.yes");  String textNO=Localization.Main.getText("boolean.no");  currentProfile=ConfigurationManager.getCurrentProfile();  if (!currentProfile.getGenerateAllbooks())   CatalogManager.callback.disableCreateAllBooks();  if (!currentProfile.getGenerateAuthors())   CatalogManager.callback.disableCreateAuthors();  if (!currentProfile.getGenerateSeries())   CatalogManager.callback.disableCreateSeries();  if (!currentProfile.getGenerateTags())   CatalogManager.callback.disableCreateTags();  if (!currentProfile.getGenerateRatings())   CatalogManager.callback.disableCreateRated();  if (!currentProfile.getGenerateRecent())   CatalogManager.callback.disableCreateRecent();  if (Helper.isNullOrEmpty(currentProfile.getFeaturedCatalogSavedSearchName()))   CatalogManager.callback.disableCreateFeaturedBooks();  if (Helper.isNullOrEmpty(currentProfile.getCustomCatalogs()))   CatalogManager.callback.disableCreateCustomCatalogs();  if (!currentProfile.getReprocessEpubMetadata())   CatalogManager.callback.disableReprocessingEpubMetadata();  if (!currentProfile.getGenerateIndex())   CatalogManager.callback.disableCreateJavascriptDatabase();  if ((currentProfile.getDeviceMode() == DeviceMode.Default) || (currentProfile.getOnlyCatalogAtTarget()))   CatalogManager.callback.disableCopyLibToTarget();  if (!currentProfile.getZipCatalog())   CatalogManager.callback.disableZipCatalog();  String where=null;  boolean generationStopped=false;  boolean generationCrashed=false;  logger.info(Localization.Main.getText("config.profile.label",ConfigurationManager.getCurrentProfileName()));  CatalogManager.callback.dumpOptions();  if (logger.isTraceEnabled())   logger.trace("Start sanity checks against user errors that might cause data loss");  if ((!currentProfile.getGenerateOpds()) && (!currentProfile.getGenerateHtml())) {    CatalogManager.callback.errorOccured(Localization.Main.getText("error.nogeneratetype"),null);    return;  }  if (!currentProfile.getGenerateAuthors() && !currentProfile.getGenerateTags() && !currentProfile.getGenerateSeries()&& !currentProfile.getGenerateRecent()&& !currentProfile.getGenerateRatings()&& !currentProfile.getGenerateAllbooks()) {    CatalogManager.callback.errorOccured(Localization.Main.getText("error.noSubcatalog"),null);    return;  }  if (Helper.isNullOrEmpty(CatalogManager.getLibraryFolder())) {    CatalogManager.callback.errorOccured(Localization.Main.getText("error.databasenotset"),null);    return;  }  assert CatalogManager.getLibraryFolder() != null : "LibraryFolder must be set to continue with generation";  if (!Database.databaseExists()) {    CatalogManager.callback.errorOccured(Localization.Main.getText("error.nodatabase",CatalogManager.getLibraryFolder()),null);    return;  }  catalogFolderName=currentProfile.getCatalogFolderName();  if (Helper.isNullOrEmpty(catalogFolderName)) {    CatalogManager.callback.errorOccured(Localization.Main.getText("error.nocatalog"),null);    return;  }  if (catalogFolderName.startsWith("/") || catalogFolderName.startsWith("\\") || catalogFolderName.startsWith("../")|| catalogFolderName.startsWith("..\\")) {    CatalogManager.callback.errorOccured(Localization.Main.getText("error.badcatalog"),null);    return;  }  if (Helper.isNullOrEmpty(CatalogManager.getTargetFolder())) {switch (currentProfile.getDeviceMode()) {case Nook:      CatalogManager.callback.errorOccured(Localization.Main.getText("error.nooktargetnotset"),null);    return;case Nas:  CatalogManager.callback.errorOccured(Localization.Main.getText("error.targetnotset"),null);return;case Default:assert currentProfile.getCopyToDatabaseFolder() : "Copy to database folder MUST be set in Default mode";break;default :assert false : "Unknown DeviceMode " + currentProfile.getDeviceMode();}} else {switch (currentProfile.getDeviceMode()) {case Nook:if (!CatalogManager.getTargetFolder().exists()) {if (1 == CatalogManager.callback.askUser(Localization.Main.getText("error.nooktargetdoesnotexist"),textYES,textNO)) return;CatalogManager.getTargetFolder().mkdirs();}CatalogManager.setTargetFolder(new File(CatalogManager.getTargetFolder().getAbsolutePath() + "/" + currentProfile.getCatalogFolderName()+ Constants.TROOK_FOLDER_EXTENSION));break;case Nas:if (!CatalogManager.getTargetFolder().exists()) {if (1 == CatalogManager.callback.askUser(Localization.Main.getText("error.targetdoesnotexist"),textYES,textNO)) return;CatalogManager.getTargetFolder().mkdirs();}break;case Default:assert false : "Setting Target folder should be disabled in Default mode";break;default :assert false : "Unknown DeviceMode " + currentProfile.getDeviceMode();break;}}logger.trace("targetFolder set to " + CatalogManager.getTargetFolder());boolean errors=false;List<String> customColumnsWanted=currentProfile.getCustomColumnsWanted();if (customColumnsWanted != null && customColumnsWanted.size() > 0) {testcol: for (String customLabel : customColumnsWanted) {if (customLabel.startsWith("#")) {customLabel=customLabel.substring(1);}for (CustomColumnType type : DataModel.getListOfCustomColumnTypes()) {if (type.getLabel().toUpperCase().equals(customLabel.toUpperCase())) {if (Constants.CUSTOM_COLUMN_TYPES_SUPPORTED.contains(type.getDatatype())) {continue testcol;}if (Constants.CUSTOM_COLUMN_TYPES_UNSUPPORTED.contains(type.getDatatype())) {CatalogManager.callback.errorOccured(Localization.Main.getText("gui.error.customColumnNotSupported",customLabel),null);errors=true;continue testcol;}CatalogManager.callback.errorOccured(Localization.Main.getText("gui.error.customColumnNotRecognized",customLabel),null);errors=true;continue testcol;}}CatalogManager.callback.errorOccured(Localization.Main.getText("gui.error.customColumnNotFound",customLabel),null);errors=true;}if (errors == true) {if (1 == CatalogManager.callback.askUser(Localization.Main.getText("gui.confirm.continueGenerating",CatalogManager.getTargetFolder()),textYES,textNO)) {return;}}}if (CatalogManager.getTargetFolder() != null) {if (currentProfile.getOnlyCatalogAtTarget()) {File f=new File(CatalogManager.getTargetFolder(),Constants.CALIBRE_METADATA_DB_);if (f.exists()) {CatalogManager.callback.errorOccured(Localization.Main.getText("error.targetislibrary"),null);return;}}if (CatalogManager.getLibraryFolder().getAbsolutePath().equals(CatalogManager.getTargetFolder().getAbsolutePath())) {CatalogManager.callback.errorOccured(Localization.Main.getText("error.targetsame"),null);return;}if (CatalogManager.getLibraryFolder().getAbsolutePath().startsWith(CatalogManager.getTargetFolder().getAbsolutePath())) {CatalogManager.callback.errorOccured(Localization.Main.getText("error.targetparent"),null);return;}if (!checkCatalogExistence(CatalogManager.getTargetFolder(),false)) {if (1 == CatalogManager.callback.askUser(Localization.Main.getText("gui.confirm.clear",CatalogManager.getTargetFolder()),textYES,textNO)) {return;}}}File catalogParentFolder=CatalogManager.getTargetFolder();if (catalogParentFolder == null || catalogParentFolder.getName().length() == 0) {if (!checkCatalogExistence(CatalogManager.getLibraryFolder(),true)) {if (!CatalogManager.getLibraryFolder().equals(CatalogManager.getTargetFolder())) {if (1 == CatalogManager.callback.askUser(Localization.Main.getText("gui.confirm.clear",CatalogManager.getLibraryFolder() + File.separator + currentProfile.getCatalogFolderName()),textYES,textNO)) {return;}}}catalogParentFolder=CatalogManager.getLibraryFolder();}logger.trace("catalogParentFolder set to " + catalogParentFolder);CatalogManager.setCatalogFolder(new File(catalogParentFolder,CatalogManager.getCatalogFolderName()));if (logger.isTraceEnabled()) logger.trace("New catalog to be generated at " + CatalogManager.getCatalogFolder().getPath());if (true == currentProfile.getCopyToDatabaseFolder()) {File databaseFolder=currentProfile.getDatabaseFolder();if (!checkCatalogExistence(databaseFolder,true)) {if (!databaseFolder.equals(catalogParentFolder) && !databaseFolder.equals(CatalogManager.getLibraryFolder())) {if (1 == CatalogManager.callback.askUser(Localization.Main.getText("gui.confirm.clear",databaseFolder + File.separator + currentProfile.getCatalogFolderName()),textYES,textNO)) {return;}}}}logger.trace("Passed sanity checks, so proceed with generation");try {CatalogManager.recordRamUsage("Start of Generation");switch (currentProfile.getDeviceMode()) {case Nook:CachedFileManager.setCacheFolder(CatalogManager.getTargetFolder());break;default :CachedFileManager.setCacheFolder(CatalogManager.getCatalogFolder());break;}long loadCacheStart=System.currentTimeMillis();if (logger.isTraceEnabled()) logger.trace("Loading Cache");CatalogManager.callback.showMessage(Localization.Main.getText("info.step.loadingcache"));CachedFileManager.loadCache();CatalogManager.callback.showMessage("");logger.info(Localization.Main.getText("info.step.loadedcache",CachedFileManager.getCacheSize()));logger.info(Localization.Main.getText("info.step.donein",System.currentTimeMillis() - loadCacheStart));CatalogManager.recordRamUsage("After loading (and deleting cache");logger.debug("STARTED: Copying Resource files");for (String resource : Constants.FILE_RESOURCES) {CatalogManager.callback.checkIfContinueGenerating();InputStream resourceStream=ConfigurationManager.getResourceAsStream(resource);File resourceFile=new File(CatalogManager.getGenerateFolder(),resource);Helper.copy(resourceStream,resourceFile);if (logger.isTraceEnabled()) logger.trace("Copying Resource " + resource);}logger.debug("COMPLETED: Copying Resource files");CatalogManager.callback.endInitializeMainCatalog();CatalogManager.callback.startReadDatabase();CatalogManager.callback.showMessage(Localization.Main.getText("info.step.loadingdatabase"));DataModel.reset();DataModel.setUseLanguagesAsTags(ConfigurationManager.getCurrentProfile().getLanguageAsTag());DataModel.setLibrarySortAuthor(ConfigurationManager.getCurrentProfile().getSortUsingAuthor());DataModel.setLibrarySortTitle(ConfigurationManager.getCurrentProfile().getSortUsingTitle());DataModel.setLibrarySortSeries(ConfigurationManager.getCurrentProfile().getSortSeriesUsingLibrarySort());DataModel.preloadDataModel();logger.trace("COMPLETED preloading Datamodel");CatalogManager.callback.showMessage("");CatalogManager.recordRamUsage("After loading DataModel");List<Book> books=DataModel.getListOfBooks();CatalogManager.callback.setDatabaseCount(Summarizer.getBookWord(books.size()));CatalogManager.callback.showMessage(Localization.Main.getText("info.step.loadingcustom"));List<CustomColumnType> customColumns=DataModel.getListOfCustomColumnTypes();customColumnsWanted=currentProfile.getCustomColumnsWanted();checktype: for (int i=0; i < customColumns.size(); i++) {CustomColumnType type=customColumns.get(i);if (customColumnsWanted == null || customColumnsWanted.size() == 0) {customColumns.remove(type);i--;} else {for (String label : customColumnsWanted) {if (label.startsWith("#")) {label=label.substring(1);}if (type.getLabel().toUpperCase().equals(label.toUpperCase())) {continue checktype;}}customColumns.remove(type);i--;}}DataModel.getMapOfCustomColumnValuesByBookId();CatalogManager.callback.showMessage("");CatalogManager.callback.checkIfContinueGenerating();BookFilter featuredBookFilter=null;String featuredCatalogTitle=ConfigurationManager.getCurrentProfile().getFeaturedCatalogTitle();String featuredCatalogSearch=ConfigurationManager.getCurrentProfile().getFeaturedCatalogSavedSearchName();if (Helper.isNotNullOrEmpty(featuredCatalogSearch)) {try {featuredBookFilter=CalibreQueryInterpreter.interpret(featuredCatalogSearch);} catch (CalibreSavedSearchInterpretException e) {CatalogManager.callback.errorOccured(Localization.Main.getText("gui.error.calibreQuery.interpret",featuredCatalogTitle,featuredBookFilter),e);}catch (CalibreSavedSearchNotFoundException e) {CatalogManager.callback.errorOccured(Localization.Main.getText("gui.error.calibreQuery.noSuchSavedSearch",featuredCatalogTitle,featuredCatalogSearch),null);}if (featuredBookFilter == null) {if (1 == CatalogManager.callback.askUser(Localization.Main.getText("gui.confirm.continueGenerating"),textYES,textNO)) {CatalogManager.callback.endFinalizeMainCatalog(null,CatalogManager.htmlManager.getTimeInHtml());return;}}}CatalogManager.featuredBooksFilter=featuredBookFilter;CatalogManager.callback.checkIfContinueGenerating();List<CustomCatalogEntry> customCatalogs=ConfigurationManager.getCurrentProfile().getCustomCatalogs();if (Helper.isNotNullOrEmpty(customCatalogs)) {nextCC: for (CustomCatalogEntry customCatalog : customCatalogs) {CatalogManager.callback.checkIfContinueGenerating();String customCatalogTitle=customCatalog.getLabel();String customCatalogSearch=customCatalog.getValue();if (Helper.isNotNullOrEmpty(customCatalogTitle) && Helper.isNotNullOrEmpty(customCatalogSearch)) {for (String urlPrefix : Constants.CUSTOMCATALOG_SEARCH_FIELD_URLS) {if (customCatalogSearch.toUpperCase().startsWith(urlPrefix.toUpperCase())) {continue nextCC;}}if (customCatalogTitle.equals(Constants.CUSTOMCATALOG_DEFAULT_TITLE) && customCatalogSearch.equals(Constants.CUSTOMCATALOG_DEFAULT_SEARCH)) {continue nextCC;}BookFilter customCatalogFilter=null;try {customCatalogFilter=CalibreQueryInterpreter.interpret(customCatalogSearch);} catch (CalibreSavedSearchInterpretException e) {CatalogManager.callback.errorOccured(Localization.Main.getText("gui.error.calibreQuery.interpret",customCatalogTitle,customCatalogSearch),e);}catch (CalibreSavedSearchNotFoundException e) {CatalogManager.callback.errorOccured(Localization.Main.getText("gui.error.calibreQuery.noSuchSavedSearch",customCatalogTitle,customCatalogSearch),null);}if (customCatalogFilter == null) {if (1 == CatalogManager.callback.askUser(Localization.Main.getText("gui.confirm.continueGenerating"),textYES,textNO)) {CatalogManager.callback.endFinalizeMainCatalog(null,CatalogManager.htmlManager.getTimeInHtml());return;}} else {CatalogManager.customCatalogsFilters.put(customCatalogTitle,customCatalogFilter);}}}}CatalogManager.callback.checkIfContinueGenerating();try {BooleanAndFilter andFilter=new BooleanAndFilter();andFilter.setLeftFilter(new SelectedEbookFormatsFilter(ConfigurationManager.getCurrentProfile().getIncludedFormatsList(),ConfigurationManager.getCurrentProfile().getIncludeBooksWithNoFile()));BookFilter mainCatalogFilter=null;String mainCatalogFilterOption=ConfigurationManager.getCurrentProfile().getCatalogFilter();if (Helper.isNotNullOrEmpty(mainCatalogFilterOption)) {mainCatalogFilter=CalibreQueryInterpreter.interpret(mainCatalogFilterOption);}if (mainCatalogFilter != null) {andFilter.setRightFilter(mainCatalogFilter);}DataModel.filterDataModel(andFilter);} catch (CalibreSavedSearchInterpretException e) {CatalogManager.callback.errorOccured(Localization.Main.getText("gui.error.calibreQuery.interpret",e.getQuery()),e);}catch (CalibreSavedSearchNotFoundException e) {CatalogManager.callback.errorOccured(Localization.Main.getText("gui.error.calibreQuery.noSuchSavedSearch",e.getSavedSearchName()),null);}books=DataModel.getListOfBooks();if (Helper.isNullOrEmpty(books)) {if (Database.wasSqlEsception() == 0) {CatalogManager.callback.errorOccured(Localization.Main.getText("error.nobooks"),null);} else CatalogManager.callback.errorOccured("Error accessing database: code=" + Database.wasSqlEsception(),null);return;} else {logger.info("Database loaded: " + books.size() + " books");}CatalogManager.callback.endReadDatabase();CatalogManager.recordRamUsage("After loading database");CatalogManager.callback.setAuthorCount("" + DataModel.getListOfAuthors().size() + " "+ Localization.Main.getText("authorword.title"));CatalogManager.callback.setTagCount("" + DataModel.getListOfTags().size() + " "+ Localization.Main.getText("tagword.title"));CatalogManager.callback.setSeriesCount("" + DataModel.getListOfSeries().size() + " "+ Localization.Main.getText("seriesword.title"));int recentSize=DataModel.getListOfBooks().size();if (recentSize > currentProfile.getBooksInRecentAdditions()) recentSize=currentProfile.getBooksInRecentAdditions();CatalogManager.callback.setRecentCount("" + recentSize + " "+ Localization.Main.getText("bookword.title"));CatalogManager.callback.setAllBooksCount(Summarizer.getBookWord(books.size()));if (currentProfile.getDeviceMode() == DeviceMode.Nook) {TrookSpecificSearchDatabaseManager.setDatabaseFile(new File(CatalogManager.getGenerateFolder(),Constants.TROOK_SEARCH_DATABASE_FILENAME));TrookSpecificSearchDatabaseManager.getConnection();}logger.debug("Starter generating top level catalog");SubCatalog.reset();LevelSubCatalog levelSubCatalog=new LevelSubCatalog(books,currentProfile.getCatalogTitle());levelSubCatalog.setCatalogLevel("");levelSubCatalog.setCatalogType("");levelSubCatalog.setCatalogFolder("");levelSubCatalog.setCatalogBaseFilename(CatalogManager.getInitialUr());Breadcrumbs breadcrumbs=Breadcrumbs.newBreadcrumbs(currentProfile.getCatalogTitle(),"dummy.xml");levelSubCatalog.getCatalog(breadcrumbs,null,false,"","",null,"");levelSubCatalog=null;if (currentProfile.getCoverResize()) CatalogManager.coverManager.writeImageHeightFile();if (currentProfile.getThumbnailGenerate()) CatalogManager.thumbnailManager.writeImageHeightFile();logger.debug("STARTING: Generating Javascript database");long nbKeywords=IndexManager.size();CatalogManager.callback.startCreateJavascriptDatabase(nbKeywords);if (currentProfile.getGenerateIndex()) IndexManager.exportToJavascriptArrays();CatalogManager.callback.endCreateJavascriptDatabase();logger.debug("COMPLETED: Generating Javascript database");CatalogManager.callback.checkIfContinueGenerating();logger.debug("STARTING: Processing ePub Metadata");CatalogManager.callback.startReprocessingEpubMetadata(DataModel.getListOfBooks().size());countMetadata=0;if (currentProfile.getReprocessEpubMetadata()) {for (Book book : DataModel.getListOfBooks()) {CatalogManager.callback.checkIfContinueGenerating();CatalogManager.callback.incStepProgressIndicatorPosition();if (shouldReprocessEpubMetadata(book)) {try {CatalogManager.callback.showMessage(book.getAuthors() + ": " + book.getTitle());new OpfOutput(book).processEPubFile();} catch (IOException e) {String message=Localization.Main.getText("gui.error.tools.processEpubMetadataOfAllBooks",book.getTitle(),e.getMessage());logger.error(message,e);}countMetadata++;}}}CatalogManager.callback.endReprocessingEpubMetadata();logger.debug("COMPLETED: Processing ePub Metadata");CatalogManager.callback.checkIfContinueGenerating();CatalogManager.deleteoptimizerFile();int nbFilesToCopyToTarget=CatalogManager.getListOfFilesPathsToCopy().size();CatalogManager.callback.startCopyLibToTarget(nbFilesToCopyToTarget);if ((currentProfile.getDeviceMode() != DeviceMode.Default) && (!currentProfile.getOnlyCatalogAtTarget())) {logger.debug("STARTING: syncFiles eBook files to target");for (String pathToCopy : CatalogManager.getListOfFilesPathsToCopy()) {CatalogManager.callback.checkIfContinueGenerating();CachedFile sourceFile=CachedFileManager.addCachedFile(currentProfile.getDatabaseFolder(),pathToCopy);CachedFile targetFile=CachedFileManager.addCachedFile(CatalogManager.getTargetFolder(),pathToCopy);syncFiles(sourceFile,targetFile);}logger.debug("COMPLETED: syncFiles eBook files to target");CatalogManager.callback.checkIfContinueGenerating();CatalogManager.callback.showMessage(Localization.Main.getText("info.step.tidyingtarget"));logger.debug("STARTING: Build list of files to delete from target");Set<File> usefulTargetFiles=new TreeSet<File>();List<String> sourceFiles=new LinkedList<String>(CatalogManager.getListOfFilesPathsToCopy());for (String sourceFile : sourceFiles) {CatalogManager.callback.checkIfContinueGenerating();File targetFile=new File(CatalogManager.getTargetFolder(),sourceFile);while (targetFile != null) {usefulTargetFiles.add(targetFile);targetFile=targetFile.getParentFile();}}logger.debug("COMPLETED: Build list of files to delete from target");CatalogManager.callback.checkIfContinueGenerating();logger.debug("STARTED: Creating list of files on target");List<File> existingTargetFiles=Helper.listFilesIn(CatalogManager.getTargetFolder());logger.debug("COMPLETED: Creating list of files on target");String targetCatalogFolderPath=new File(CatalogManager.getTargetFolder(),CatalogManager.getCatalogFolderName()).getAbsolutePath();String calibreFolderPath=currentProfile.getDatabaseFolder().getAbsolutePath();logger.debug("STARTING: Delete superfluous files from target");String catalogfolder=currentProfile.getCatalogFolderName();for (File existingTargetFile : existingTargetFiles) {CatalogManager.callback.checkIfContinueGenerating();if (!existingTargetFile.getName().endsWith(catalogFolderName)) {if (!usefulTargetFiles.contains(existingTargetFile)) {if (!existingTargetFile.getAbsolutePath().startsWith(targetCatalogFolderPath)) {if (!existingTargetFile.getAbsolutePath().startsWith(calibreFolderPath)) {CachedFile cf=CachedFileManager.inCache(existingTargetFile);if (cf != null && cf.isChanged() == false) {if (logger.isTraceEnabled()) logger.trace("Not deleted as marked unchanged");} else {if (logger.isTraceEnabled()) logger.trace("deleting " + existingTargetFile.getPath());CatalogManager.callback.showMessage(Localization.Main.getText("info.deleting") + " " + existingTargetFile);Helper.delete(existingTargetFile,true);CatalogManager.syncLogPrintln("DELETED: %s",existingTargetFile);CachedFileManager.removeCachedFile(existingTargetFile);}}}}}}logger.debug("COMPLETED: Delete superfluous files from target");}CatalogManager.callback.endCopyLibToTarget();CatalogManager.callback.checkIfContinueGenerating();long nbCatalogFilesToCopyToTarget=Helper.count(CatalogManager.getGenerateFolder());if (!currentProfile.getDeviceMode().equals(DeviceMode.Default) && currentProfile.getCopyToDatabaseFolder()) {nbCatalogFilesToCopyToTarget+=nbCatalogFilesToCopyToTarget;}nbCatalogFilesToCopyToTarget+=CatalogManager.getMapOfCatalogImages().size();CatalogManager.callback.startCopyCatToTarget(nbCatalogFilesToCopyToTarget);logger.debug("STARTING: syncFiles Catalog Folder");switch (currentProfile.getDeviceMode()) {case Nook:if (TrookSpecificSearchDatabaseManager.getDatabaseFile() != null) {TrookSpecificSearchDatabaseManager.closeConnection();CachedFile destinationFile=CachedFileManager.addCachedFile(CatalogManager.getTargetFolder(),Constants.TROOK_SEARCH_DATABASE_FILENAME);CachedFile trookDatabaseFile=CachedFileManager.addCachedFile(TrookSpecificSearchDatabaseManager.getDatabaseFile());syncFiles(trookDatabaseFile,destinationFile);}File indexFile=new File(CatalogManager.getGenerateFolder(),"/" + CatalogManager.getCatalogFolderName() + "/index.xml");File catalogFile=new File(CatalogManager.getGenerateFolder(),"/" + CatalogManager.getCatalogFolderName() + "/catalog.xml");if (logger.isTraceEnabled()) logger.trace("copy '" + indexFile + "' to '"+ catalogFile+ "'");syncFiles(new CachedFile(indexFile.getAbsolutePath()),new CachedFile(catalogFile.getAbsolutePath()));File targetCatalogZipFile=new File(CatalogManager.getTargetFolder(),Constants.TROOK_CATALOG_FILENAME);if (targetCatalogZipFile.exists()) {targetCatalogZipFile.delete();}if (currentProfile.getZipTrookCatalog()) {recursivelyZipFiles(CatalogManager.getGenerateFolder(),true,targetCatalogZipFile,false);File targetCatalogFolder=new File(CatalogManager.getTargetFolder(),CatalogManager.getCatalogFolderName());CatalogManager.callback.showMessage(Localization.Main.getText("info.deleting") + " " + targetCatalogFolder.getName());Helper.delete(targetCatalogFolder,true);break;}case Nas:File targetCatalogFolder;if (currentProfile.getOnlyCatalogAtTarget()) {targetCatalogFolder=CatalogManager.getTargetFolder();} else {targetCatalogFolder=new File(CatalogManager.getTargetFolder(),CatalogManager.getCatalogFolderName());}syncFiles(new CachedFile(CatalogManager.getGenerateFolder().getAbsolutePath()),new CachedFile(targetCatalogFolder.getAbsolutePath()));logger.debug("START: Copy images to Destination catalog folder");syncImages(new CachedFile(targetCatalogFolder.getAbsolutePath()));logger.debug("COMPLETED: Copy images to Destination catalog folder");break;case Default:break;}logger.debug("COMPLETED: syncFiles Catalog Folder");CatalogManager.callback.checkIfContinueGenerating();if (currentProfile.getCopyToDatabaseFolder()) {logger.debug("STARTING: Copy Catalog Folder to Database Folder");File libraryCatalogFolder=new File(CatalogManager.getLibraryFolder(),CatalogManager.getCatalogFolderName());syncFiles(new CachedFile(CatalogManager.getGenerateFolder().getAbsolutePath()),new CachedFile(libraryCatalogFolder.getAbsolutePath()));logger.debug("COMPLETED: Copy Catalog Folder to Database Folder");logger.debug("START: Copy images to Database catalog folder");syncImages(new CachedFile(libraryCatalogFolder.getAbsolutePath()));logger.debug("COMPLETED: Copy images to Database catalog folder");}CatalogManager.callback.endCopyCatToTarget();CatalogManager.callback.checkIfContinueGenerating();CatalogManager.callback.startZipCatalog(nbCatalogFilesToCopyToTarget);String zipFilename=ConfigurationManager.getCurrentProfile().getCatalogTitle() + ".zip";File zipFolder=(CatalogManager.getTargetFolder() == null) ? currentProfile.getDatabaseFolder() : CatalogManager.getTargetFolder();File zipFile=new File(zipFolder,zipFilename);zipFile.delete();if (currentProfile.getZipCatalog()) {logger.debug("STARTING: ZIP Catalog");recursivelyZipFiles(CatalogManager.getGenerateFolder(),false,zipFile,currentProfile.getZipOmitXml());if (CatalogManager.getTargetFolder() != null && currentProfile.getCopyToDatabaseFolder()) {Helper.copy(zipFile,new File(currentProfile.getDatabaseFolder(),zipFilename));}logger.debug("COMPLETED: ZIP Catalog");}zipFilename=null;zipFolder=null;zipFile=null;CatalogManager.callback.endZipCatalog();CatalogManager.callback.checkIfContinueGenerating();CatalogManager.callback.startFinalizeMainCatalog();if (CatalogManager.getSyncLog()) logger.info("Sync Log: " + ConfigurationManager.getConfigurationDirectory() + "/"+ Constants.LOGFILE_FOLDER+ "/"+ Constants.SYNCFILE_NAME);long saveCacheStart=System.currentTimeMillis();logger.info(Localization.Main.getText("info.step.savingcache") + " " + CachedFileManager.getCacheSize());CatalogManager.callback.showMessage(Localization.Main.getText("info.step.savingcache"));CachedFileManager.saveCache(CatalogManager.getGenerateFolder().getPath(),CatalogManager.callback);logger.info(Localization.Main.getText("info.step.savedcache",CachedFileManager.getSaveCount(),CachedFileManager.getIgnoredCount()));logger.info(Localization.Main.getText("info.step.donein",System.currentTimeMillis() - saveCacheStart));CatalogManager.callback.checkIfContinueGenerating();CatalogManager.saveOptimizerData();CatalogManager.syncLogPrintln("");CatalogManager.syncLogPrintln(Localization.Main.getText("stats.copy.header"));if (logger.isDebugEnabled()) CatalogManager.syncLogPrintln(String.format("%8d  ",CatalogManager.statsCopyUnchanged) + " " + Localization.Main.getText("stats.copy.unchanged"));CatalogManager.syncLogPrintln(String.format("%8d  ",CatalogManager.statsCopyExistHits) + Localization.Main.getText("stats.copy.notexist"));CatalogManager.syncLogPrintln(String.format("%8d  ",CatalogManager.statsCopyLengthHits) + Localization.Main.getText("stats.copy.lengthdiffer"));CatalogManager.syncLogPrintln(String.format("%8d  ",CatalogManager.statsCopyCrcHits) + Localization.Main.getText("stats.copy.crcdiffer"));CatalogManager.syncLogPrintln(String.format("%8d  ",CatalogManager.statsCopyCrcMisses) + Localization.Main.getText("stats.copy.crcsame"));CatalogManager.syncLogPrintln(String.format("%8d  ",CatalogManager.statsCopyDateMisses) + Localization.Main.getText("stats.copy.older"));CatalogManager.syncLogPrintln(String.format("%8d  ",CatalogManager.statsCopyDeleted) + " " + Localization.Main.getText("stats.copy.deleted"));CatalogManager.syncLogClose();logger.info("");logger.info(Localization.Main.getText("stats.library.header"));logger.info(String.format("%8d  ",DataModel.getListOfBooks().size()) + Localization.Main.getText("bookword.title"));logger.info(String.format("%8d  ",DataModel.getListOfAuthors().size()) + Localization.Main.getText("authorword.title"));logger.info(String.format("%8d  ",DataModel.getListOfSeries().size()) + Localization.Main.getText("seriesword.title"));logger.info(String.format("%8d  ",DataModel.getListOfTags().size()) + Localization.Main.getText("tagword.title"));logger.info(String.format("%8d  ",DataModel.getListOfTags().size()) + Localization.Main.getText("tagword.title"));logger.info("");logger.info(Localization.Main.getText("stats.run.header"));logger.info(String.format("%8d  ",countMetadata) + Localization.Main.getText("stats.run.metadata"));logger.info(String.format("%8d  ",CatalogManager.thumbnailManager.getCountOfImagesGenerated()) + Localization.Main.getText("stats.run.thumbnails"));logger.info(String.format("%8d  ",CatalogManager.coverManager.getCountOfImagesGenerated()) + Localization.Main.getText("stats.run.covers"));logger.info(String.format("%8d  ",CatalogManager.statsXmlChanged) + Localization.Main.getText("stats.xmlChanged"));logger.info(String.format("%8d  ",CatalogManager.statsXmlUnchanged) + Localization.Main.getText("stats.xmlUnchanged"));if (CatalogManager.statsXmlDiscarded != 0) logger.info(String.format("%8d  ",CatalogManager.statsXmlDiscarded) + Localization.Main.getText("stats.xmlDiscarded"));logger.info(String.format("%8d  ",CatalogManager.statsHtmlChanged) + Localization.Main.getText("stats.htmlChanged"));logger.info(String.format("%8d  ",CatalogManager.statsHtmlUnchanged) + Localization.Main.getText("stats.htmlUnchanged"));logger.info("");logger.info(Localization.Main.getText("stats.copy.header"));if (logger.isDebugEnabled()) logger.info(String.format("%8d  ",CatalogManager.statsCopyUnchanged) + Localization.Main.getText("stats.copy.unchanged"));logger.info(String.format("%8d  ",CatalogManager.statsCopyExistHits) + Localization.Main.getText("stats.copy.notexist"));logger.info(String.format("%8d  ",CatalogManager.statsCopyLengthHits) + Localization.Main.getText("stats.copy.lengthdiffer"));logger.info(String.format("%8d  ",CatalogManager.statsCopyCrcHits) + Localization.Main.getText("stats.copy.crcdiffer"));logger.info(String.format("%8d  ",CatalogManager.statsCopyCrcMisses) + Localization.Main.getText("stats.copy.crcsame"));logger.info(String.format("%8d  ",CatalogManager.statsCopyDateMisses) + Localization.Main.getText("stats.copy.older"));logger.info(String.format("%8d  ",CatalogManager.statsCopyDeleted) + Localization.Main.getText("stats.copy.deleted"));logger.info("");if (CatalogManager.statsCopyToSelf != 0) logger.warn(String.format("%8d  ",CatalogManager.statsCopyToSelf) + Localization.Main.getText("stats.copy.toself"));if (logger.isTraceEnabled()) logger.trace("try to determine where the results have been put");switch (currentProfile.getDeviceMode()) {case Nook:where=Localization.Main.getText("info.step.done.nook");break;case Nas:where=currentProfile.getTargetFolder().getPath();break;case Default:File libraryCatalogFolder=new File(CatalogManager.getLibraryFolder(),currentProfile.getCatalogFolderName());where=libraryCatalogFolder.getPath();break;}if (CatalogManager.getTargetFolder() != null && currentProfile.getCopyToDatabaseFolder()) {where=where + " " + Localization.Main.getText("info.step.done.andYourDb");}if (logger.isTraceEnabled()) logger.trace("where=" + where);} catch (GenerationStoppedException gse) {generationStopped=true;}catch (Throwable t) {generationCrashed=true;logger.error(" ");logger.error("*************************************************");logger.error(Localization.Main.getText("error.unexpectedFatal").toUpperCase());logger.error(Localization.Main.getText("error.cause").toUpperCase() + ": " + t+ ": "+ t.getCause());logger.error(Localization.Main.getText("error.message").toUpperCase() + ": " + t.getMessage());logger.error(Localization.Main.getText("error.stackTrace").toUpperCase() + ":");for (StackTraceElement element : t.getStackTrace()) logger.error(element.toString());logger.error("*************************************************");logger.error(" ");} finally {long deleteFilesStart=System.currentTimeMillis();logger.info(Localization.Main.getText("info.step.deletingfiles"));if (CatalogManager.getGenerateFolder() != null) {CatalogManager.callback.showMessage(Localization.Main.getText("info.step.deletingfiles"));CatalogManager.callback.clearStopGenerating();Helper.delete(CatalogManager.getGenerateFolder(),false);}CatalogManager.callback.showMessage("");logger.info(Localization.Main.getText("info.step.donein",System.currentTimeMillis() - deleteFilesStart));if (generationStopped) CatalogManager.callback.errorOccured(Localization.Main.getText("error.userAbort"),null); else if (generationCrashed) CatalogManager.callback.errorOccured(Localization.Main.getText("error.unexpectedFatal"),null); else CatalogManager.callback.endFinalizeMainCatalog(where,CatalogManager.htmlManager.getTimeInHtml());CatalogManager.recordRamUsage("End of Generate Run");CatalogManager.reportRamUsage("Summary");}}  }
class C{  public static void print(float x){  out.print(x);  out.flush();}  }
class C{  public ActivityExample(ActivityObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getSubject() != null) {    criteria.andSubjectEqualTo(sample.getSubject());  }  if (sample.getTarget() != null) {    criteria.andTargetEqualTo(sample.getTarget());  }  if (sample.getContent() != null) {    criteria.andContentEqualTo(sample.getContent());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getAction() != null) {    criteria.andActionEqualTo(sample.getAction());  }  if (sample.getAttachId() != null) {    criteria.andAttachIdEqualTo(sample.getAttachId());  }  if (sample.getAttachType() != null) {    criteria.andAttachTypeEqualTo(sample.getAttachType());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getProjectName() != null) {    criteria.andProjectNameEqualTo(sample.getProjectName());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }  if (sample.getTrash() != null) {    criteria.andTrashEqualTo(sample.getTrash());  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public static boolean nonstaticSelect(JCTree tree){  tree=skipParens(tree);  if (!tree.hasTag(SELECT))   return false;  JCFieldAccess s=(JCFieldAccess)tree;  Symbol e=symbol(s.selected);  return e == null || (e.kind != Kinds.PCK && e.kind != Kinds.TYP);}  }
class C{  public static String idealNotify(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  Map<String,Object> parametersMap=UtilHttp.getParameterMap(request);  String transactionId=request.getParameter("trxid");  for (  String name : parametersMap.keySet()) {    String value=request.getParameter(name);    Debug.logError("### Param: " + name + " => "+ value,module);  }  String orderId=null;  String paymentStatus=null;  try {    IdealConnector connector=new IdealConnector("payment");    Transaction transaction=connector.requestTransactionStatus(transactionId);    orderId=transaction.getPurchaseID();    if (orderId == null) {      orderId=(String)request.getSession().getAttribute("purchaseID");    }    String payAmount=transaction.getAmount();    if (payAmount == null) {      payAmount=(String)request.getSession().getAttribute("payAmount");    }    paymentStatus=transaction.getStatus();    request.setAttribute("transactionId",transactionId);    request.setAttribute("paymentStatus",paymentStatus);    request.setAttribute("paymentAmount",payAmount);  } catch (  IdealException ex) {    Debug.logError(ex.getMessage(),module);    request.setAttribute("_ERROR_MESSAGE_",ex.getConsumerMessage());    return "error";  }  if (userLogin == null) {    String userLoginId="system";    try {      userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get UserLogin for: " + userLoginId + "; cannot continue",module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingAuthenticationUser",locale));      return "error";    }  }  GenericValue orderHeader=null;  if (UtilValidate.isNotEmpty(orderId)) {    try {      orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get the order header for order: " + orderId,module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingOrderHeader",locale));      return "error";    }  } else {    Debug.logError("iDEAL did not callback with a valid orderId!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.noValidOrderIdReturned",locale));    return "error";  }  if (orderHeader == null) {    Debug.logError("Cannot get the order header for order: " + orderId,module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingOrderHeader",locale));    return "error";  }  boolean okay=true;  boolean beganTransaction=false;  try {    beganTransaction=TransactionUtil.begin();    if ("Success".equals(paymentStatus)) {      okay=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);    } else     if ("Cancelled".equals(paymentStatus)) {      okay=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);    }    if (okay) {      okay=setPaymentPreferences(delegator,dispatcher,userLogin,orderId,request);    }  } catch (  Exception e) {    String errMsg="Error handling iDEAL notification";    Debug.logError(e,errMsg,module);    try {      TransactionUtil.rollback(beganTransaction,errMsg,e);    } catch (    GenericTransactionException gte2) {      Debug.logError(gte2,"Unable to rollback transaction",module);    }  } finally {    if (!okay) {      try {        TransactionUtil.rollback(beganTransaction,"Failure in processing iDEAL callback",null);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to rollback transaction",module);      }    } else {      try {        TransactionUtil.commit(beganTransaction);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to commit transaction",module);      }    }  }  if (okay) {    request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource,"IdealSuccessful",locale));    OrderChangeHelper.releaseInitialOrderHold(dispatcher,orderId);    Map<String,String> emailContext=UtilMisc.toMap("orderId",orderId,"userLogin",userLogin);    try {      dispatcher.runSync("sendOrderConfirmation",emailContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problems sending email confirmation",module);    }  }  return "success";}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2){  return construct(e1,e2);}  }
class C{  private JMenu createSearchAgainMenu(SearchResultDataLine line){  JMenu menu=new SkinMenu(I18n.tr("Search More"));  menu.add(new SkinMenuItem(new RepeatSearchAction()));  if (line == null) {    menu.setEnabled(isRepeatSearchEnabled());    return menu;  }  menu.addSeparator();  String keywords=QueryUtils.createQueryString(line.getFilename());  SearchInformation info=SearchInformation.createKeywordSearch(keywords,null,MediaType.getAnyTypeMediaType());  if (SearchMediator.validateInfo(info) == SearchMediator.QUERY_VALID) {    SeasonalContentSearchSuggestion.attemptToAddSeasonalContentSearchSuggestion(menu,null,searchTokens);    menu.add(new SkinMenuItem(new SearchAction(info,I18n.tr("Search for Keywords: {0}"))));  }  return menu;}  }
class C{  private boolean isValidQuery(String query){  if (query == null) {    return true;  }  return QUERY_PATTERN.matcher(query).matches();}  }
class C{  public void open() throws IOException {  writer=new PrintWriter(new BufferedWriter(new FileWriter(filename)));  writer.println(columnNames);}  }
class C{  public synchronized int hashCode(){  return super.hashCode();}  }
class C{  public float[][] derivBasisFunctions(int span,float u,int grade){  float[][] ders=new float[grade + 1][degree + 1];  float[][] ndu=new float[degree + 1][degree + 1];  ndu[0][0]=1.0f;  float[] left=new float[degree + 1];  float[] right=new float[degree + 1];  int j1, j2;  for (int j=1; j <= degree; j++) {    left[j]=u - knots[span + 1 - j];    right[j]=knots[span + j] - u;    float saved=0.0f;    for (int r=0; r < j; r++) {      ndu[j][r]=right[r + 1] + left[j - r];      float temp=ndu[r][j - 1] / ndu[j][r];      ndu[r][j]=saved + right[r + 1] * temp;      saved=left[j - r] * temp;    }    ndu[j][j]=saved;  }  for (int j=0; j <= degree; j++) {    ders[0][j]=ndu[j][degree];  }  for (int r=0; r <= degree; r++) {    int s1=0;    int s2=1;    float[][] a=new float[2][degree + 1];    a[0][0]=1.0f;    for (int k=1; k <= grade; k++) {      float d=0.0f;      final int rk=r - k;      final int pk=degree - k;      final float[] as1=a[s1];      final float[] as2=a[s2];      if (r >= k) {        as2[0]=d=as1[0] / ndu[pk + 1][rk];        d*=ndu[rk][pk];      }      if (rk >= -1) {        j1=1;      } else {        j1=-rk;      }      if (r - 1 <= pk) {        j2=k - 1;      } else {        j2=degree - r;      }      for (int j=j1; j <= j2; j++) {        as2[j]=(as1[j] - as1[j - 1]) / ndu[pk + 1][rk + j];        d+=as2[j] * ndu[rk + j][pk];      }      if (r <= pk) {        as2[k]=-as1[k - 1] / ndu[pk + 1][r];        d+=as2[k] * ndu[r][pk];      }      ders[k][r]=d;      int j=s1;      s1=s2;      s2=j;    }  }  int r=degree;  for (int k=1; k <= grade; k++) {    for (int j=0; j <= degree; j++) {      ders[k][j]*=r;    }    r*=(degree - k);  }  return ders;}  }
class C{  public LinkedList<Dependency> findDeadlock(){  return graph.findCycle();}  }
class C{  public void fireSynapsesUpdated(){  for (  NetworkListener listener : networkListeners) {    listener.updateSynapses();  }}  }
class C{  protected void encode(ByteSequencesWriter writer,ByteArrayDataOutput output,byte[] buffer,BytesRef spare,BytesRef payload,Set<BytesRef> contexts,long weight) throws IOException {  int requiredLength=spare.length + 8 + ((hasPayloads) ? 2 + payload.length : 0);  if (hasContexts) {    for (    BytesRef ctx : contexts) {      requiredLength+=2 + ctx.length;    }    requiredLength+=2;  }  if (requiredLength >= buffer.length) {    buffer=ArrayUtil.grow(buffer,requiredLength);  }  output.reset(buffer);  output.writeBytes(spare.bytes,spare.offset,spare.length);  if (hasContexts) {    for (    BytesRef ctx : contexts) {      output.writeBytes(ctx.bytes,ctx.offset,ctx.length);      output.writeShort((short)ctx.length);    }    output.writeShort((short)contexts.size());  }  if (hasPayloads) {    output.writeBytes(payload.bytes,payload.offset,payload.length);    output.writeShort((short)payload.length);  }  output.writeLong(weight);  writer.write(buffer,0,output.getPosition());}  }
class C{  public static <T>T staticField(Class<?> cls,String fieldName) throws IgniteCheckedException {  assert cls != null;  assert fieldName != null;  try {    for (    Field field : cls.getDeclaredFields())     if (field.getName().equals(fieldName)) {      boolean accessible=field.isAccessible();      if (!accessible)       field.setAccessible(true);      T val=(T)field.get(null);      if (!accessible)       field.setAccessible(false);      return val;    }  } catch (  Exception e) {    throw new IgniteCheckedException("Failed to get field value [fieldName=" + fieldName + ", cls="+ cls+ ']',e);  }  throw new IgniteCheckedException("Failed to get field value [fieldName=" + fieldName + ", cls="+ cls+ ']');}  }
class C{  private static int between(Automaton.Builder builder,String x,String y,int n,Collection<Integer> initials,boolean zeros){  int s=builder.createState();  if (x.length() == n) {    builder.setAccept(s,true);  } else {    if (zeros) {      initials.add(s);    }    char cx=x.charAt(n);    char cy=y.charAt(n);    if (cx == cy) {      builder.addTransition(s,between(builder,x,y,n + 1,initials,zeros && cx == '0'),cx);    } else {      builder.addTransition(s,atLeast(builder,x,n + 1,initials,zeros && cx == '0'),cx);      builder.addTransition(s,atMost(builder,y,n + 1),cy);      if (cx + 1 < cy) {        builder.addTransition(s,anyOfRightLength(builder,x,n + 1),(char)(cx + 1),(char)(cy - 1));      }    }  }  return s;}  }
class C{  public CharSequence subSequence(int start,int end){  System.err.println("CharSequence subSequence(int start, int end)\nSorry, not Implemented");  sb.charAt(-1);  return null;}  }
class C{  public void irvineHash(byte[] buff,int offset,int length){  for (int i=offset; i < offset + length; i++) {    irvineHash(buff[i]);  }}  }
class C{  public ConversionException(Throwable cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  private TransitStopFacility[] multiplyStop(TransitStopFacility stopFacility,int numberOfCopies){  TransitStopFacility[] facilities=new TransitStopFacility[numberOfCopies + 1];  facilities[0]=stopFacility;  for (int i=1; i <= numberOfCopies; i++) {    Id<TransitStopFacility> idNewFacility=Id.create(stopFacility.getId().toString() + "_" + i,TransitStopFacility.class);    TransitStopFacility newFacility=this.scheduleFactory.createTransitStopFacility(idNewFacility,stopFacility.getCoord(),stopFacility.getIsBlockingLane());    newFacility.setName(stopFacility.getName());    facilities[i]=newFacility;  }  return facilities;}  }
class C{  public List ensureCustomViews(){  if (customViews == null) {    customViews=createCustomViews();  }  return customViews;}  }
class C{  private void retrieveRefreshToken() throws ValidationException, ConfigurationLoadException {  logger.info("Retrieving a new refresh token");  GoogleClientSecrets clientSecrets=null;  try {    clientSecrets=new GoogleClientSecretsBuilder().forApi(com.google.api.ads.common.lib.auth.GoogleClientSecretsBuilder.Api.ADWORDS).fromFile(configPath).build();  } catch (  ValidationException e) {    logger.error("Please input your client ID and secret into your ads.properties file. If you do not " + "have a client ID or secret, please create one in " + "the API console: https://code.google.com/apis/console#access",e);    throw e;  }  try {    Credential credential=getOAuth2Credential(clientSecrets);    System.out.printf("Your refresh token is: %s\n",credential.getRefreshToken());    System.out.printf("In your properties file, modify:\n\napi.adwords.refreshToken=%s\n",credential.getRefreshToken());  } catch (  IOException e) {    logger.error("Exception retrieving the credential",e);  }}  }
class C{  public static void clearOldFiles(Path path){  clearOldFiles(path,DELETE_FILES_OLDER_THAN);}  }
class C{  public void update(Graphics g,JComponent c){  if (c.isOpaque()) {    g.setColor(c.getParent().getBackground());    g.fillRect(0,0,c.getWidth(),c.getHeight());    g.setColor(c.getBackground());    g.fillRect(0,ROUND_HEIGHT,c.getWidth(),c.getHeight() - ROUND_HEIGHT);  }  paint(g,c);}  }
class C{  public View createRestrictedView(View view){  if (!isAuthorizationRequired()) {    return view;  }  Preconditions.checkNotNullArgument(view,"view is null");  View restrictedView=new View(view.getEntityClass(),StringUtils.isEmpty(view.getName()) ? "" : view.getName() + "_restricted",false);  copyViewConsideringPermissions(view,restrictedView);  return restrictedView;}  }
class C{  private void yy_ScanError(int errorCode){  String message;  try {    message=YY_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=YY_ERROR_MSG[YY_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public StorageException(){  super();}  }
class C{  public Vector2D vec(Point2D target){  return new Vector2D(target.getX() - this.x,target.getY() - this.y);}  }
class C{  public String description(){  return m_Description;}  }
class C{  protected void runTests() throws Exception {  startToMain("HelloWorld");  deathRequest=eventRequestManager().createVMDeathRequest();  deathRequest.enable();  List reqs=eventRequestManager().vmDeathRequests();  if (reqs.size() != 1 || reqs.get(0) != deathRequest) {    failure("failure: vmDeathRequests()");  }  if (!vm().canRequestVMDeathEvent()) {    failure("failure: canRequestVMDeathEvent() returned false");  }  addListener(this);synchronized (syncer) {    vm().resume();    while (!disconnected) {      try {        syncer.wait();      } catch (      InterruptedException e) {      }    }  }  if (!requestedVMDeathOccurred) {    failure("failure: didn't get requested VMDeathEvent");  }  if (!defaultVMDeathOccurred) {    failure("failure: didn't get default VMDeathEvent");  }  if (!testFailed) {    println("VMDeathRequestTest: passed");  } else {    throw new Exception("VMDeathRequestTest: failed");  }}  }
class C{  private static void extract(String s,int start,ExtractFloatResult result){  int currentIndex=start;  boolean foundSeparator=false;  result.mEndWithNegSign=false;  for (; currentIndex < s.length(); currentIndex++) {    char currentChar=s.charAt(currentIndex);switch (currentChar) {case ' ':case ',':      foundSeparator=true;    break;case '-':  if (currentIndex != start) {    foundSeparator=true;    result.mEndWithNegSign=true;  }break;}if (foundSeparator) {break;}}result.mEndPosition=currentIndex;}  }
class C{  public String attr(String name){  String result=root.getAttribute(name);  return result;}  }
class C{  public void testPutStringNoNull(){  byte[] expectedResult={3,0,0,1,'a','b','c'};  String string="abc";  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putStringNoNull(string);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public static Complex add(Complex c,double a){  return add(a,c);}  }
class C{  public static void fill(long baseAddress){  long startAddress=baseAddress + MIN_CHUNK_SIZE;  int size=getSize(baseAddress) - MIN_CHUNK_SIZE;  AddressableMemoryManager.fill(startAddress,size,FILL_BYTE);}  }
class C{  void throwIfCurrentThreadHadExpiredLease() throws LeaseExpiredException {  if (this.expiredLeases == null) {    return;  }  if (this.expiredLeases.containsKey(Thread.currentThread())) {    this.expiredLeases.remove(Thread.currentThread());    throw new LeaseExpiredException(LocalizedStrings.DLockToken_THIS_THREADS_LEASE_EXPIRED_FOR_THIS_LOCK.toLocalizedString());  }}  }
class C{  public boolean isSetCursorId(){  return EncodingUtils.testBit(__isset_bitfield,__CURSORID_ISSET_ID);}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void onToggleCustomDuration(View view){  updateEnabledState();}  }
class C{  public ArtistView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  if (!isInEditMode()) {    init(context);  }}  }
class C{  @Override protected String defaultErrorMessage(AnnotatedTypeMirror type1,AnnotatedTypeMirror type2,VisitHistory visited){  return "AnnotatedTypeMirror classes aren't equal.\n" + "type1 = " + type1.getClass().getSimpleName() + "( "+ type1+ " )\n"+ "type2 = "+ type2.getClass().getSimpleName()+ "( "+ type2+ " )\n"+ "visitHistory = "+ visited;}  }
class C{  protected AbstractPoolEntry(ClientConnectionOperator connOperator,HttpRoute route){  super();  if (connOperator == null) {    throw new IllegalArgumentException("Connection operator may not be null");  }  this.connOperator=connOperator;  this.connection=connOperator.createConnection();  this.route=route;  this.tracker=null;}  }
class C{  public void testBug35653() throws Exception {  createTable("testBug35653","(f1 int)");  try {    this.rs=this.stmt.executeQuery("TRUNCATE testBug35653");    fail("executeQuery() shouldn't allow TRUNCATE");  } catch (  SQLException e) {    assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT == e.getSQLState());  }  try {    this.rs=this.stmt.executeQuery("RENAME TABLE testBug35653 TO testBug35653_new");    fail("executeQuery() shouldn't allow RENAME");  } catch (  SQLException e) {    assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT == e.getSQLState());  } finally {    dropTable("testBug35653_new");  }}  }
class C{  public boolean removeRevokedContact(ContactId contact) throws PayloadException, NetworkException {  HttpResponse response=mXdm.removeContactFromRevokedList(contact);  if ((response != null) && (response.isSuccessfullResponse() || response.isNotFoundResponse())) {    return true;  }  return false;}  }
class C{  private List<Constraint<?>> reduce(List<Constraint<?>> constraints){  Constraint<?> target=constraints.get(constraints.size() - 1);  Set<Variable<?>> dependencies=getVariables(target);  LinkedList<Constraint<?>> coi=new LinkedList<Constraint<?>>();  if (dependencies.size() <= 0)   return coi;  coi.add(target);  for (int i=constraints.size() - 2; i >= 0; i--) {    Constraint<?> constraint=constraints.get(i);    Set<Variable<?>> variables=getVariables(constraint);    for (    Variable<?> var : dependencies) {      if (variables.contains(var)) {        dependencies.addAll(variables);        coi.addFirst(constraint);        break;      }    }  }  return coi;}  }
class C{  public InvalidPropertyException(final String msg,final Throwable throwable){  super(msg,throwable);}  }
class C{  public void clear(){  size=0;  offset=0;  currentBufferIndex=-1;  currentBuffer=null;  buffersCount=0;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.IMPORT_DECLARATION__DECLARATION:    if (resolve)     return getDeclaration();  return basicGetDeclaration();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void oneShot(View emiter,int numParticles,Interpolator interpolator){  configureEmiter(emiter,Gravity.CENTER);  mActivatedParticles=0;  mEmitingTime=mTimeToLive;  for (int i=0; i < numParticles && i < mMaxParticles; i++) {    activateParticle(0);  }  mDrawingView=new ParticleField(mParentView.getContext());  mParentView.addView(mDrawingView);  mDrawingView.setParticles(mActiveParticles);  startAnimator(interpolator,mTimeToLive);}  }
class C{  public static Double toDoubleObject(Object obj){  if (obj == null) {    return null;  }  if (obj instanceof Double) {    return (Double)obj;  }  if (obj instanceof Number) {    return new Double(((Number)obj).doubleValue());  }  Double result=null;  try {    result=Double.parseDouble(obj.toString());  } catch (  Exception e) {  }  return result;}  }
class C{  public double[] computeLocal(int timeSeries[]){  initialise();  addObservations(timeSeries);  return computeLocalFromPreviousObservations(timeSeries);}  }
class C{  private void createGrid(){  if (attributeCombo1 == null || m_setting)   return;  int indexAttr1=attributeCombo1.getSelectedIndex();  int indexAttr2=attributeCombo2.getSelectedIndex();  if (indexAttr1 == indexAttr2) {    log.warning("Same Attribute Selected");    tabbedPane.setSelectedIndex(0);    return;  }  m_setting=true;  m_M_PriceList_Version_ID=0;  KeyNamePair pl=(KeyNamePair)pickPriceList.getSelectedItem();  if (pl != null)   m_M_PriceList_Version_ID=pl.getKey();  m_M_Warehouse_ID=0;  KeyNamePair wh=(KeyNamePair)pickWarehouse.getSelectedItem();  if (wh != null)   m_M_Warehouse_ID=wh.getKey();  int cols=2;  MAttributeValue[] xValues=null;  if (indexAttr1 > 0)   xValues=m_attributes[indexAttr1 - 1].getMAttributeValues();  if (xValues != null) {    cols=xValues.length;    log.info("X - " + m_attributes[indexAttr1 - 1].getName() + " #"+ xValues.length);  }  int rows=2;  MAttributeValue[] yValues=null;  if (indexAttr2 > 0)   yValues=m_attributes[indexAttr2 - 1].getMAttributeValues();  if (yValues != null) {    rows=yValues.length;    log.info("Y - " + m_attributes[indexAttr2 - 1].getName() + " #"+ yValues.length);  }  gridPanel.removeAll();  CPanel grid=new CPanel(new GridLayout(rows,cols,5,5));  gridPanel.add(modePanel,BorderLayout.NORTH);  gridPanel.add(new CScrollPane(grid),BorderLayout.CENTER);  log.info("Rows=" + rows + " - Cols="+ cols);  for (int row=0; row < rows; row++) {    for (int col=0; col < cols; col++) {      MAttributeValue xValue=null;      if (xValues != null)       xValue=xValues[col];      MAttributeValue yValue=null;      if (yValues != null)       yValue=yValues[row];      if (row == 0 && col == 0) {        CPanel descr=new CPanel(new GridLayout(2,1,0,0));        if (xValues != null)         descr.add(new JLabel(m_attributes[indexAttr1 - 1].getName(),JLabel.TRAILING));        if (yValues != null)         descr.add(new JLabel(m_attributes[indexAttr2 - 1].getName()));        grid.add(descr);      } else       if (row == 0) {        if (xValue != null) {          grid.add(new JLabel(xValue.getName(),JLabel.TRAILING));        } else         grid.add(new JLabel());      } else       if (col == 0) {        if (yValue != null)         grid.add(new JLabel(yValue.getName())); else         grid.add(new JLabel());      } else {        grid.add(getGridElement(xValue,yValue));      }    }  }  tabbedPane.setSelectedIndex(1);  m_setting=false;  m_frame.pack();}  }
class C{  @SuppressWarnings("unchecked") public static <T extends BitVector>TransformationStrategy<T> prefixFree(){  return (TransformationStrategy<T>)PREFIX_FREE;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8){  return construct(e1,e2,e3,e4,e5,e6,e7,e8);}  }
class C{  protected void unregisterListener(){  MetaDataProvider mdp=attributeType.getMetaDataProvider();  if (mdp != null) {    mdp.removeMetaDataChangeListener(this);  }}  }
class C{  public void writeProlog() throws Exception {  if (prolog != null) {    write(prolog);    write("\n");  }}  }
class C{  protected final void replenishUpstreamSender(final String linkId,final int credit){  sendMessage(linkId,getCreditReplenishmentMsg(linkId,credit));}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  private InputStream createAutoDetectedStream(final String defaultFileName) throws IOException {  try {    Validate.notNull(wroFile,"Cannot call this method if wroFile is null!");    if (autoDetectWroFile) {      final File file=new File(wroFile.getParentFile(),defaultFileName);      LOG.debug("\tloading autodetected wro file: " + file);      return new FileInputStream(file);    }    LOG.debug("loading wroFile: " + wroFile);    return new FileInputStream(wroFile);  } catch (  final FileNotFoundException e) {    if (autoDetectWroFile) {      throw e;    }    throw new WroRuntimeException("The wroFile doesn't exist. Skip trying with other wro model factories",e);  }}  }
class C{  private void createVplexMirrorObjects(){  if (!getUnmanagedVplexMirrors().isEmpty()) {    Volume virtualVolume=(Volume)_parentRequestContext.getProcessedBlockObject(getUnmanagedVirtualVolume().getNativeGuid());    _logger.info("creating VplexMirror object for virtual volume " + virtualVolume.getLabel());    for (    Entry<UnManagedVolume,String> entry : getUnmanagedVplexMirrors().entrySet()) {      BlockObject mirror=getBlockObjectsToBeCreatedMap().get(entry.getKey().getNativeGuid().replace(VolumeIngestionUtil.UNMANAGEDVOLUME,VolumeIngestionUtil.VOLUME));      if (null != mirror) {        _logger.info("processing mirror " + mirror.getLabel());        if (mirror instanceof Volume) {          Volume mirrorVolume=(Volume)mirror;          VplexMirror vplexMirror=new VplexMirror();          vplexMirror.setId(URIUtil.createId(VplexMirror.class));          vplexMirror.setCapacity(mirrorVolume.getCapacity());          vplexMirror.setLabel(mirrorVolume.getLabel());          vplexMirror.setNativeId(entry.getValue());          vplexMirror.setAllocatedCapacity(0L);          vplexMirror.setProvisionedCapacity(mirrorVolume.getProvisionedCapacity());          vplexMirror.setSource(new NamedURI(virtualVolume.getId(),virtualVolume.getLabel()));          vplexMirror.setStorageController(virtualVolume.getStorageController());          vplexMirror.setTenant(mirrorVolume.getTenant());          vplexMirror.setThinPreAllocationSize(mirrorVolume.getThinVolumePreAllocationSize());          vplexMirror.setThinlyProvisioned(mirrorVolume.getThinlyProvisioned());          vplexMirror.setVirtualArray(mirrorVolume.getVirtualArray());          vplexMirror.setVirtualPool(mirrorVolume.getVirtualPool());          StringSet associatedVolumes=new StringSet();          associatedVolumes.add(mirrorVolume.getId().toString());          vplexMirror.setAssociatedVolumes(associatedVolumes);          vplexMirror.setProject(new NamedURI(getFrontendProject().getId(),mirrorVolume.getLabel()));          mirrorVolume.setProject(new NamedURI(getBackendProject().getId(),mirrorVolume.getLabel()));          Set<DataObject> updatedObjects=getDataObjectsToBeUpdatedMap().get(mirrorVolume.getNativeGuid());          if (updatedObjects == null) {            updatedObjects=new HashSet<DataObject>();            getDataObjectsToBeUpdatedMap().put(mirrorVolume.getNativeGuid(),updatedObjects);          }          VolumeIngestionUtil.clearInternalFlags(this,mirrorVolume,updatedObjects,_dbClient);          mirrorVolume.addInternalFlags(Flag.INTERNAL_OBJECT);          String[] devicePathParts=entry.getValue().split("/");          String deviceName=devicePathParts[devicePathParts.length - 1];          vplexMirror.setDeviceLabel(deviceName);          getCreatedVplexMirrors().add(vplexMirror);          StringSet mirrors=virtualVolume.getMirrors();          if (mirrors == null) {            mirrors=new StringSet();          }          mirrors.add(vplexMirror.getId().toString());          virtualVolume.setMirrors(mirrors);        }      }    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  list.add(root.element);  inorder(root.right);}  }
class C{  private boolean startProcess(){  log.fine(m_pi.toString());  boolean started=false;  if (DB.isRemoteProcess()) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        m_pi=server.process(m_wscctx,m_pi);        log.finest("server => " + m_pi);        started=true;      }    } catch (    UndeclaredThrowableException ex) {      Throwable cause=ex.getCause();      if (cause != null) {        if (cause instanceof InvalidClassException)         log.log(Level.SEVERE,"Version Server <> Client: " + cause.toString() + " - "+ m_pi,ex); else         log.log(Level.SEVERE,"AppsServer error(1b): " + cause.toString() + " - "+ m_pi,ex);      } else       log.log(Level.SEVERE," AppsServer error(1) - " + m_pi,ex);      started=false;    }catch (    Exception ex) {      Throwable cause=ex.getCause();      if (cause == null)       cause=ex;      log.log(Level.SEVERE,"AppsServer error - " + m_pi,cause);      started=false;    }  }  if (!started && !m_IsServerProcess) {    ProcessCall myObject=null;    try {      Class myClass=Class.forName(m_pi.getClassName());      myObject=(ProcessCall)myClass.newInstance();      if (myObject == null)       m_pi.setSummary("No Instance for " + m_pi.getClassName(),true); else       myObject.startProcess(m_wscctx,m_pi,m_trx);      if (m_trx != null) {        m_trx.commit();        m_trx.close();      }    } catch (    Exception e) {      if (m_trx != null) {        m_trx.rollback();        m_trx.close();      }      m_pi.setSummary("Error starting Class " + m_pi.getClassName(),true);      log.log(Level.SEVERE,m_pi.getClassName(),e);    }  }  return !m_pi.isError();}  }
class C{  private boolean is(int flags){  return (m_flags & flags) != 0;}  }
class C{  private void consumeReceivedVersions(){  int idx=(int)(this.previousVersion - this.receivedBaseVersion + 1);  while (this.previousVersion < this.nextVersion && this.received.get(idx)) {    idx++;    this.previousVersion++;  }  if (this.previousVersion < this.nextVersion) {    idx=(int)(this.nextVersion - this.receivedBaseVersion) - 1;    while (this.previousVersion < this.nextVersion && this.received.get(idx)) {      idx--;      this.nextVersion--;    }  }}  }
class C{  public boolean isRTPTCP(){  return rtptcp;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  ChartRenderingInfo clone=(ChartRenderingInfo)super.clone();  if (this.chartArea != null) {    clone.chartArea=(Rectangle2D)this.chartArea.clone();  }  if (this.entities instanceof PublicCloneable) {    PublicCloneable pc=(PublicCloneable)this.entities;    clone.entities=(EntityCollection)pc.clone();  }  return clone;}  }
class C{  @Override public void paint(Graphics g,JComponent c){  super.paint(g,c);  Rectangle clipRect=g.getClipBounds();  if (upperThumbSelected) {    if (clipRect.intersects(thumbRect)) {      paintLowerThumb(g);    }    if (clipRect.intersects(upperThumbRect)) {      paintUpperThumb(g);    }  } else {    if (clipRect.intersects(upperThumbRect)) {      paintUpperThumb(g);    }    if (clipRect.intersects(thumbRect)) {      paintLowerThumb(g);    }  }}  }
class C{  public static Date stringToDate(String strdate,@SuppressWarnings("SameParameterValue") String format){  Date date=null;  SimpleDateFormat formatter=new SimpleDateFormat(format);  try {    date=formatter.parse(strdate);  } catch (  ParseException e) {    e.printStackTrace();  }  return date;}  }
class C{  @Override public void handleMessage(Message msg){  DownloadImageToGalleryActivity activity=this.mActivity.get();  if (activity != null) {switch (msg.what) {case HANDLER_LOADING:{        int progressValue=(int)msg.obj;        activity.dialog.setLoadPrompt(progressValue + "%");        activity.dialog.show();        break;      }  }}}  }
class C{  @Deprecated public void defineField(long where,ClassDefinition c,String doc,int mod,Type t,IdentifierToken nm,IdentifierToken args[],IdentifierToken exp[],Node val){  Identifier argIds[]=null;  Identifier expIds[]=null;  if (args != null) {    argIds=new Identifier[args.length];    for (int i=0; i < args.length; i++) {      argIds[i]=args[i].id;    }  }  if (exp != null) {    expIds=new Identifier[exp.length];    for (int i=0; i < exp.length; i++) {      expIds[i]=exp[i].id;    }  }  defineField(where,doc,mod,t,nm.id,argIds,expIds,val);}  }
class C{  void calculate(){  int offset=0;  Point3d[] points=new Point3d[NREADINGS];  for (int i=0; i < NREADINGS; i++) {    points[i]=lines[i].getPoint();  }{    Reading r=getReading(NREADINGS,0);    Calculator c=Algorithms.newCalculator(points,getVSound(),offset,(String)algorithm.getSelectedItem());    Measurement m=c.convert(r);    x1l.setText(nf.format(m.getX()));    y1l.setText(nf.format(m.getY()));    z1l.setText(nf.format(-m.getZ()));    stat1.setText(m.textCode());  }{    Reading r=getReading(NREADINGS,1);    Calculator c=Algorithms.newCalculator(points,getVSound(),offset,(String)algorithm.getSelectedItem());    Measurement m=c.convert(r);    x2l.setText(nf.format(m.getX()));    y2l.setText(nf.format(m.getY()));    z2l.setText(nf.format(-m.getZ()));    stat2.setText(m.textCode());  }{    Reading r=getReading(NREADINGS,2);    Calculator c=Algorithms.newCalculator(points,getVSound(),offset,(String)algorithm.getSelectedItem());    Measurement m=c.convert(r);    x3l.setText(nf.format(m.getX()));    y3l.setText(nf.format(m.getY()));    z3l.setText(nf.format(-m.getZ()));    stat3.setText(m.textCode());  }{    Reading r=getReading(NREADINGS,3);    Calculator c=Algorithms.newCalculator(points,getVSound(),offset,(String)algorithm.getSelectedItem());    Measurement m=c.convert(r);    x4l.setText(nf.format(m.getX()));    y4l.setText(nf.format(m.getY()));    z4l.setText(nf.format(-m.getZ()));    stat4.setText(m.textCode());  }}  }
class C{  public void removeAll(){  layouts.clear();}  }
class C{  @Override public void run(){  amIActive=true;  double x, y;  double z=0;  int a, intensity;  PointRecord point;  double[] entry;  int lowestPointIndex=-1;  double lowestPointZ=Double.POSITIVE_INFINITY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFile=args[0];  String outputFile=args[1];  threshold=Double.parseDouble(args[2]);  searchDist=Double.parseDouble(args[3]);  if ((inputFile.length() <= 0 || outputFile.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (inputFile.endsWith(".las")) {      LASReader las=new LASReader(inputFile);      numPoints=(int)las.getNumPointRecords();      data=new LidarData[numPoints];      done=new BooleanBitArray1D(numPoints);      pointsTree=new KdTree.SqrEuclid<>(2,numPoints);      for (a=0; a < numPoints; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          entry=new double[]{x,y};          pointsTree.addPoint(entry,a);          data[a]=new LidarData(x,y,z,intensity,a);          if (z < lowestPointZ) {            lowestPointZ=z;            lowestPointIndex=a;          }        }        progress=(int)(100f * (a + 1) / numPoints);        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Reading point data:",progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else     if (inputFile.endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputFile);      if (input.getShapeType().getDimension() != ShapeTypeDimension.Z) {        return;      }      MultiPointZ mpz=(MultiPointZ)(input.getRecord(0).getGeometry());      numPoints=mpz.getNumPoints();      data=new LidarData[numPoints];      done=new BooleanBitArray1D(numPoints);      double[][] points=mpz.getPoints();      double[] zArray=mpz.getzArray();      pointsTree=new KdTree.SqrEuclid<>(2,numPoints);      for (a=0; a < numPoints; a++) {        entry=new double[]{points[a][0],points[a][1]};        pointsTree.addPoint(entry,a);        data[a]=new LidarData(points[a][0],points[a][1],zArray[a],0,a);        if (zArray[a] < lowestPointZ) {          lowestPointZ=zArray[a];          lowestPointIndex=a;        }        progress=(int)(100f * (a + 1) / numPoints);        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Reading point data:",progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    threshold=searchDist * Math.tan(Math.toRadians(65.0));    for (a=0; a < numPoints; a++) {      z=data[a].z;      entry=new double[]{data[a].x,data[a].y};      List<KdTree.Entry<Integer>> results=pointsTree.neighborsWithinRange(entry,searchDist);      double minSlope=z;      for (int i=0; i < results.size(); i++) {        int pointNum=results.get(i).value;        if (pointNum != a) {          if (data[pointNum].z < minSlope) {            minSlope=data[pointNum].z;          }        }      }      data[a].maxDownwardAngle=(z - minSlope);      if (data[a].maxDownwardAngle > threshold) {        data[a].w=0;      } else {        data[a].w=1 - data[a].maxDownwardAngle / threshold;      }      progress=(int)(100f * a / numPoints);      if (progress != oldProgress) {        oldProgress=progress;        updateProgress("Calculating elev. diff.:",progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    DBFField fields[]=new DBFField[5];    fields[0]=new DBFField();    fields[0].setName("Z");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(3);    fields[1]=new DBFField();    fields[1].setName("I");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(8);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("CLASS");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(8);    fields[2].setDecimalCount(0);    fields[3]=new DBFField();    fields[3].setName("MAXDNANGLE");    fields[3].setDataType(DBFField.DBFDataType.NUMERIC);    fields[3].setFieldLength(8);    fields[3].setDecimalCount(4);    fields[4]=new DBFField();    fields[4].setName("WEIGHT");    fields[4].setDataType(DBFField.DBFDataType.NUMERIC);    fields[4].setFieldLength(8);    fields[4].setDecimalCount(4);    File outFile=new File(outputFile);    if (outFile.exists()) {      outFile.delete();    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);    for (a=0; a < numPoints; a++) {      whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(data[a].x,data[a].y);      Object[] rowData=new Object[5];      rowData[0]=data[a].z;      rowData[1]=(double)data[a].intensity;      rowData[2]=(double)data[a].classValue;      rowData[3]=data[a].maxDownwardAngle;      rowData[4]=data[a].w;      output.addRecord(wbGeometry,rowData);      progress=(int)(100f * (a + 1) / numPoints);      if (progress != oldProgress) {        oldProgress=progress;        updateProgress("Outputting point data:",progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    output.write();    System.out.println("Done!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public synchronized void logResponseTime(String type,long tsSend,long tsReceived,long duration,int threadNumber,boolean faultFlag,boolean errorflag,String responseString){  if (!this.attackAborted && !this.attackFinished) {    LogEntryRequest logEntry=new LogEntryRequest(type,tsSend,tsReceived,duration,threadNumber,faultFlag,errorflag,responseString);    logList.add(logEntry);    if (type.equals("untampered")) {      this.logListUntamperedRequests.add(logEntry);    } else     if (type.equals("tampered")) {      this.logListTamperedRequests.add(logEntry);    } else     if (type.equals("testProbe")) {      this.logListTestProbeRequests.add(logEntry);    } else     if (type.equals("networkTest")) {      this.logListNetworktestRequests.add(logEntry);    } else {      return;    }  } else {  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public Vertex processCompoundRelationship(JSONObject json,int cascade,Network network,Map<String,Vertex> processed){  if (cascade < 100) {    return null;  }  if (json.isNullObject()) {    return null;  }  Object id=json.get("id");  Vertex object=processed.get(id);  if (object != null) {    return object;  }  JSONObject properties=(JSONObject)json.get("property");  log("Processing compound relationship",Bot.FINE,id);  try {    object=network.createVertex();    object.addRelationship(Primitive.INSTANTIATION,Primitive.RELATIONSHIP);    object.addRelationship(Primitive.INSTANTIATION,Primitive.COMPOUND_RELATIONSHIP);    List<String> keys=new ArrayList<String>(properties.keySet());    List<String> filteredKeys=new ArrayList<String>();    for (    String key : keys) {      String domain=extractDomain(key);      if (!getTypeFilters().contains(domain)) {        filteredKeys.add(key);      }    }    for (    String key : filteredKeys) {      List values=extractPropertyValues(properties.get(key),Collections.EMPTY_LIST,cascade,network,processed);      for (      Object value : values) {        String relationship=key;        if (key instanceof String) {          TextStream stream=new TextStream(key);          while (!stream.atEnd()) {            stream.next();            relationship=stream.upTo('/');          }          relationship=relationship.replace('_',' ');        }        Vertex valueVertex=null;        if (value instanceof String) {          valueVertex=network.createObject((String)value);          valueVertex.addRelationship(Primitive.INSTANTIATION,Primitive.THING);        } else         if (value instanceof Vertex) {          valueVertex=(Vertex)value;        } else {          valueVertex=network.createVertex(value);          valueVertex.addRelationship(Primitive.INSTANTIATION,Primitive.THING);        }        Vertex relationshipVertex=network.createPrimitive(relationship);        relationshipVertex.addRelationship(Primitive.INSTANTIATION,Primitive.THING);        relationshipVertex.addRelationship(Primitive.INSTANTIATION,Primitive.ACTION);        relationshipVertex.addRelationship(Primitive.INSTANTIATION,Primitive.RELATIONSHIP);        object.addRelationship(relationshipVertex,valueVertex);        log("Processing relationship:",Bot.FINE,object,relationshipVertex,valueVertex);      }    }  } catch (  Exception ioException) {    log(ioException);  }  return object;}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public V put(K key,V value){  final int hash;  int index;  if (key == null) {    hash=0;    index=indexOfNull();  } else {    hash=key.hashCode();    index=indexOf(key,hash);  }  if (index >= 0) {    index=(index << 1) + 1;    final V old=(V)mArray[index];    mArray[index]=value;    return old;  }  index=~index;  if (mSize >= mHashes.length) {    final int n=mSize >= (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (mSize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE);    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(n);    if (mHashes.length > 0) {      System.arraycopy(ohashes,0,mHashes,0,ohashes.length);      System.arraycopy(oarray,0,mArray,0,oarray.length);    }    freeArrays(ohashes,oarray,mSize);  }  if (index < mSize) {    System.arraycopy(mHashes,index,mHashes,index + 1,mSize - index);    System.arraycopy(mArray,index << 1,mArray,(index + 1) << 1,(mSize - index) << 1);  }  mHashes[index]=hash;  mArray[index << 1]=key;  mArray[(index << 1) + 1]=value;  mSize++;  return null;}  }
class C{  public final String toString(){  int length=(m_lastChunk << m_chunkBits) + m_firstFree;  return getString(new StringBuffer(length),0,0,length).toString();}  }
class C{  private SimpleHashSetEntry<T>[] makeTable(int newCapacity){  @SuppressWarnings("unchecked") SimpleHashSetEntry<T>[] newTable=(SimpleHashSetEntry<T>[])new SimpleHashSetEntry[newCapacity];  mTable=newTable;  threshold=(newCapacity >> 1) + (newCapacity >> 2);  return newTable;}  }
class C{  private Source(Generator<T> prngToValue,Shrink<T> shrinker,AsString<T> asString){  this.prngToValue=prngToValue;  this.shrink=shrinker;  this.asString=asString;}  }
class C{  public Quaternionf rotateLocalX(float angle){  return rotateLocalX(angle,this);}  }
class C{  protected ExecutionChoiceImpl(){  super();}  }
class C{  private ComparableTimSort(Object[] a){  this.a=a;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public void invertOrder(){  for (  InvertibleComparator<T> comparator : this.comparators) {    comparator.invertOrder();  }}  }
class C{  private CBCVectorGenerator(){}  }
class C{  @Override public Graphics create(){  if (DEBUG) {    m_printstream.println("%create");  }  PostscriptGraphics psg=new PostscriptGraphics(this);  return (psg);}  }
class C{  public synchronized Integer saveMessage(InviteMessage message){  SQLiteDatabase db=dbHelper.getWritableDatabase();  int id=-1;  if (db.isOpen()) {    ContentValues values=new ContentValues();    values.put(InviteMessgeDao.COLUMN_NAME_FROM,message.getFrom());    values.put(InviteMessgeDao.COLUMN_NAME_GROUP_ID,message.getGroupId());    values.put(InviteMessgeDao.COLUMN_NAME_GROUP_Name,message.getGroupName());    values.put(InviteMessgeDao.COLUMN_NAME_REASON,message.getReason());    values.put(InviteMessgeDao.COLUMN_NAME_TIME,message.getTime());    values.put(InviteMessgeDao.COLUMN_NAME_STATUS,message.getStatus().ordinal());    values.put(InviteMessgeDao.COLUMN_NAME_GROUPINVITER,message.getGroupInviter());    db.insert(InviteMessgeDao.TABLE_NAME,null,values);    Cursor cursor=db.rawQuery("select last_insert_rowid() from " + InviteMessgeDao.TABLE_NAME,null);    if (cursor.moveToFirst()) {      id=cursor.getInt(0);    }    cursor.close();  }  return id;}  }
class C{  public static List<String> makeProductFeatureCategoryIdListFromPrefixed(Map<String,Object> parameters){  List<String> prodFeatureCategoryIdList=FastList.newInstance();  if (parameters == null)   return prodFeatureCategoryIdList;  for (  Map.Entry<String,Object> entry : parameters.entrySet()) {    String parameterName=entry.getKey();    if (parameterName.startsWith("SEARCH_PROD_FEAT_CAT")) {      String productFeatureCategoryId=(String)entry.getValue();      if (UtilValidate.isNotEmpty(productFeatureCategoryId)) {        prodFeatureCategoryIdList.add(productFeatureCategoryId);      }    }  }  return prodFeatureCategoryIdList;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_METHOD_BODY_2__POSTCONDITION_1:    return ((InternalEList<?>)getPostcondition_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected BasicUserImpl(int id,String name){  _id=id;  _name=name;}  }
class C{  public final QuadEdge dNext(){  return this.sym().oNext().sym();}  }
class C{  static boolean doesPlayerHaveCape(AbstractClientPlayer player){  return player.getUniqueID().equals(UUID_CHOONSTER);}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  public boolean allEvents(){  return this.subscriptionAttributes.getInterestPolicy().isAll();}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  protected void selectVerticalAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  double tickLabelHeight=estimateMaximumTickLabelHeight(g2);  TickUnitSource tickUnits=getStandardTickUnits();  TickUnit unit1=tickUnits.getCeilingTickUnit(getTickUnit());  double unitHeight=lengthToJava2D(unit1.getSize(),dataArea,edge);  double guess;  if (unitHeight > 0) {    guess=(tickLabelHeight / unitHeight) * unit1.getSize();  } else {    guess=getRange().getLength() / 20.0;  }  NumberTickUnit unit2=(NumberTickUnit)tickUnits.getCeilingTickUnit(guess);  double unit2Height=lengthToJava2D(unit2.getSize(),dataArea,edge);  tickLabelHeight=estimateMaximumTickLabelHeight(g2);  if (tickLabelHeight > unit2Height) {    unit2=(NumberTickUnit)tickUnits.getLargerTickUnit(unit2);  }  setTickUnit(unit2,false,false);}  }
class C{  public void jobResponseProcessed(){  responseQueueListenerBusy=false;}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof FilePermission))   return false;  FilePermission that=(FilePermission)obj;  return (this.mask == that.mask) && this.cpath.equals(that.cpath) && (this.directory == that.directory)&& (this.recursive == that.recursive);}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.INLINE_TAG;}  }
class C{  @Override public boolean removeAll(Collection<?> that){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public NameResolutionException(String msg){  super(msg);}  }
class C{  public LibraryLoader(ClassLoader loader,PathImpl path){  this(loader);  _path=path;  try {    init();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  void purge(int n,int ll,double[] r,double[] q,double[] ra,double[] qa,double[] wrk,double[] eta,double[] oldeta,int step,double[] rnmp,double tol){  double t, tq, tr, reps1;  double rnm=rnmp[0];  int k, iteration, i;  boolean flag;  if (step < ll + 2)   return;  k=svd_idamax(step - (ll + 1),eta,ll,1) + ll;  if (Math.abs(eta[k]) > reps) {    reps1=eps1 / reps;    iteration=0;    flag=true;    while (iteration < 2 && flag) {      if (rnm > tol) {        tq=0.0;        tr=0.0;        for (i=ll; i < step; i++) {          store(n,RETRQ,i,wrk);          t=-svd_ddot(n,qa,1,wrk,1);          tq+=Math.abs(t);          svd_daxpy(n,t,wrk,1,q,1);          t=-svd_ddot(n,ra,1,wrk,1);          tr+=Math.abs(t);          svd_daxpy(n,t,wrk,1,r,1);        }        svd_dcopy(n,q,1,qa,1);        t=-svd_ddot(n,r,1,qa,1);        tr+=Math.abs(t);        svd_daxpy(n,t,q,1,r,1);        svd_dcopy(n,r,1,ra,1);        rnm=Math.sqrt(svd_ddot(n,ra,1,r,1));        if (tq <= reps1 && tr <= reps1 * rnm)         flag=false;      }      iteration++;    }    for (i=ll; i <= step; i++) {      eta[i]=eps1;      oldeta[i]=eps1;    }  }  rnmp[0]=rnm;  return;}  }
class C{  public static RefactoringStatus createFatalErrorStatus(String msg,RefactoringStatusContext context){  return createStatus(FATAL,msg,context,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  public void addTableBlockInfoList(String task,List<TableBlockInfo> tableBlockInfoList){  taskBlockInfoMapping.put(task,tableBlockInfoList);}  }
class C{  public void complete(Document document,int completionPosition,CompilationUnit compilationUnit){  if (!(fContextType instanceof CompilationUnitContextType))   return;  Region selection=new RegionImpl(0,0);  Position position=new Position(completionPosition,selection.getLength());  String selectedText=null;  if (selection.getLength() != 0) {    try {      selectedText=document.get(selection.getOffset(),selection.getLength());      document.addPosition(position);      fPositions.put(document,position);    } catch (    BadLocationException e) {    }  }  CompilationUnitContext context=((CompilationUnitContextType)fContextType).createContext(document,position,compilationUnit);  context.setVariable("selection",selectedText);  int start=context.getStart();  int end=context.getEnd();  Region region=new RegionImpl(start,end - start);  Template[] templates=WorkerMessageHandler.get().getTemplateStore().getTemplates();  if (selection.getLength() == 0) {    for (int i=0; i != templates.length; i++) {      Template template=templates[i];      if (context.canEvaluate(template)) {        fProposals.add(new TemplateProposal(template,context,region,getImage()));      }    }  } else {    if (context.getKey().length() == 0)     context.setForceEvaluation(true);    boolean multipleLinesSelected=false;    for (int i=0; i != templates.length; i++) {      Template template=templates[i];      if (context.canEvaluate(template) && (!multipleLinesSelected && template.getPattern().indexOf($_WORD_SELECTION) != -1 || (multipleLinesSelected && template.getPattern().indexOf($_LINE_SELECTION) != -1))) {        fProposals.add(new TemplateProposal(templates[i],context,region,getImage()));      }    }  }}  }
class C{  public PlantDrop(ItemStack drop,float chance){  this.drop=drop;  this.chance=chance;  this.dropKind=DropKind.chance;}  }
class C{  public boolean recordLocalVariables(CodeAttribute ca,int pc) throws CompileError {  LocalVariableAttribute va=(LocalVariableAttribute)ca.getAttribute(LocalVariableAttribute.tag);  if (va == null)   return false;  int n=va.tableLength();  for (int i=0; i < n; ++i) {    int start=va.startPc(i);    int len=va.codeLength(i);    if (start <= pc && pc < start + len)     gen.recordVariable(va.descriptor(i),va.variableName(i),va.index(i),stable);  }  return true;}  }
class C{  public void addSequence(final double[] datum){  for (int i=0; i < datum.length; i++) {    add(datum[i]);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Text text;  Node aNode;  Document ownerDocument;  DocumentType docType;  String system;  String value;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  text=aNewDoc.createTextNode("this is text data");  aNode=doc.importNode(text,false);  ownerDocument=aNode.getOwnerDocument();  assertNotNull("ownerDocumentNotNull",ownerDocument);  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  value=aNode.getNodeValue();  assertEquals("nodeValue","this is text data",value);}  }
class C{  public double errorRate(){  return incorrect() / total();}  }
class C{  private static long xlongBinomial(long n,long k){  return Math.round(binomial(n,k));}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  boolean convexHullAroundEachFeature=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  convexHullAroundEachFeature=Boolean.parseBoolean(args[2]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numRecs=input.getNumberOfRecords();    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON,fields);    output.setProjectionStringFromOtherShapefile(input);    if (convexHullAroundEachFeature && (shapeType.getBaseType() == ShapeType.POLYLINE || shapeType.getBaseType() == ShapeType.POLYGON)) {      FID=0;      n=0;      oneHundredthTotal=numRecs / 100;      progress=0;      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      for (      ShapeFileRecord record : input.records) {        FID++;        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            com.vividsolutions.jts.geom.Geometry ch=recJTSPoly[a].convexHull();            if (ch instanceof com.vividsolutions.jts.geom.Polygon) {              com.vividsolutions.jts.geom.Polygon chPoly=(com.vividsolutions.jts.geom.Polygon)ch;              ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();              int[] parts=new int[chPoly.getNumInteriorRing() + 1];              Coordinate[] buffCoords=chPoly.getExteriorRing().getCoordinates();              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }              for (int b=0; b < chPoly.getNumInteriorRing(); b++) {                parts[b + 1]=pnts.size();                buffCoords=chPoly.getInteriorRingN(b).getCoordinates();                for (i=buffCoords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              }              PointsList pl=new PointsList(pnts);              whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());              Object[] rowData=new Object[1];              rowData[0]=new Double(FID);              output.addRecord(wbPoly,rowData);            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress(progress);        }      }    } else {      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      ArrayList<Coordinate> coordsList=new ArrayList<>();      n=0;      oneHundredthTotal=numRecs / 100;      progress=0;      FID=0;      for (      ShapeFileRecord record : input.records) {        FID++;        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (i=0; i < recJTSPoly.length; i++) {            Coordinate[] coords=recJTSPoly[i].getCoordinates();            for (int a=0; a < coords.length; a++) {              coordsList.add(coords[a]);            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      int numPoints=coordsList.size();      Coordinate[] coords=new Coordinate[numPoints];      for (i=0; i < numPoints; i++) {        coords[i]=coordsList.get(i);      }      GeometryFactory factory=new GeometryFactory();      com.vividsolutions.jts.geom.MultiPoint mp=factory.createMultiPoint(coords);      updateProgress("Calculating convex hull:",-1);      com.vividsolutions.jts.geom.Geometry ch=mp.convexHull();      if (ch instanceof com.vividsolutions.jts.geom.Polygon) {        com.vividsolutions.jts.geom.Polygon chPoly=(com.vividsolutions.jts.geom.Polygon)ch;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[chPoly.getNumInteriorRing() + 1];        Coordinate[] buffCoords=chPoly.getExteriorRing().getCoordinates();        if (!Topology.isClockwisePolygon(buffCoords)) {          for (i=buffCoords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        } else {          for (i=0; i < buffCoords.length; i++) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        }        for (int b=0; b < chPoly.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          buffCoords=chPoly.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        Object[] rowData=new Object[1];        rowData[0]=new Double(FID);        output.addRecord(wbPoly,rowData);      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String calculateFromStream(InputStream data) throws Exception {  String algoId=getAlgorithmId(algoURI);  byte[] hashBytes=calculateDigest(algoId,data);  return encodeBase64(hashBytes);}  }
class C{  public JDirectoryChooser(String currentDirectoryPath){  super(currentDirectoryPath);  setShowingCreateDirectory(true);}  }
class C{  public OrderInfo orderByPath(String path,MultivaluedMap<String,String> parameters) throws ValidationException {  return doOrder(catalogPath(path),parameters);}  }
class C{  public Matrix[] compute(Matrix loghyper,Matrix X,Matrix Xstar){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  double ell=Math.exp(loghyper.get(0,0));  double sf2=Math.exp(2 * loghyper.get(1,0));  double[] a=new double[Xstar.getRowDimension()];  Arrays.fill(a,sf2);  Matrix A=new Matrix(a,a.length);  Matrix B=exp(squareDist(X.transpose().times(1 / ell),Xstar.transpose().times(1 / ell)).times(-0.5)).times(sf2);  return new Matrix[]{A,B};}  }
class C{  @Override public void performSelection(List<AggregationIndividual> population){  List<List<AggregationIndividual>> ranks=new ArrayList<List<AggregationIndividual>>();  while (population.size() > 0) {    List<AggregationIndividual> rank=getNextRank(population);    ranks.add(rank);    Iterator<AggregationIndividual> i=rank.iterator();    while (i.hasNext()) {      population.remove(i.next());    }  }  population.clear();  int index=0;  while ((index < ranks.size()) && ((population.size() + ranks.get(index).size()) <= popSize)) {    population.addAll(ranks.get(index));    index++;  }  if (population.size() < popSize) {    List<AggregationIndividual> rank=ranks.get(index);    sortByCrowdingDistance(rank);    while (population.size() < popSize) {      population.add(rank.remove(0));    }  }}  }
class C{  public void disable() throws IOException {  if (!isOptOut()) {    configuration.getCategory(Configuration.CATEGORY_GENERAL).get("opt-out").set("true");    configuration.save();  }  FMLCommonHandler.instance().bus().unregister(this);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 80) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  JarVerifier(URL jarURL,boolean savePerms){  this.jarURL=jarURL;  this.savePerms=savePerms;}  }
class C{  public boolean hasRepeatingRGChannels(){  return true;}  }
class C{  public Hour(Date time,TimeZone zone){  this(time,zone,Locale.getDefault());}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void textSize(float size){  if (size <= 0) {    System.err.println("textSize(" + size + ") ignored: "+ "the text size must be larger than zero");    return;  }  if (textFont == null) {    defaultFontOrDeath("textSize",size);  }  textSizeImpl(size);}  }
class C{  private static Object createInstance(Class cls,int val){  if (cls.equals(EntityPlain.class))   return new EntityPlain(val); else   if (cls.equals(EntitySerializable.class))   return new EntitySerializable(val); else   if (cls.equals(EntityExternalizable.class))   return new EntityExternalizable(val); else   if (cls.equals(EntityBinarylizable.class))   return new EntityBinarylizable(val); else   return new EntityWriteReadObject(val);}  }
class C{  private Hop simplifyBinaryToUnaryOperation(Hop parent,Hop hi,int pos) throws HopsException {  if (hi instanceof BinaryOp) {    BinaryOp bop=(BinaryOp)hi;    Hop left=hi.getInput().get(0);    Hop right=hi.getInput().get(1);    if (left == right && left.getDataType() == DataType.MATRIX) {      if (bop.getOp() == OpOp2.PLUS) {        bop.setOp(OpOp2.MULT);        LiteralOp tmp=new LiteralOp(2);        bop.getInput().remove(1);        right.getParent().remove(bop);        HopRewriteUtils.addChildReference(hi,tmp,1);        LOG.debug("Applied simplifyBinaryToUnaryOperation1");      } else       if (bop.getOp() == OpOp2.MULT) {        bop.setOp(OpOp2.POW);        LiteralOp tmp=new LiteralOp(2);        bop.getInput().remove(1);        right.getParent().remove(bop);        HopRewriteUtils.addChildReference(hi,tmp,1);        LOG.debug("Applied simplifyBinaryToUnaryOperation2");      }    } else     if (bop.getOp() == OpOp2.MINUS && left instanceof BinaryOp && right instanceof BinaryOp && ((BinaryOp)left).getOp() == OpOp2.GREATER && ((BinaryOp)right).getOp() == OpOp2.LESS && left.getInput().get(0) == right.getInput().get(0) && left.getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)left.getInput().get(1)) == 0 && right.getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)right.getInput().get(1)) == 0) {      UnaryOp uop=HopRewriteUtils.createUnary(left.getInput().get(0),OpOp1.SIGN);      HopRewriteUtils.removeChildReferenceByPos(parent,hi,pos);      HopRewriteUtils.removeAllChildReferences(hi);      HopRewriteUtils.addChildReference(parent,uop,pos);      if (left.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(left);      if (right.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(right);      hi=uop;      LOG.debug("Applied simplifyBinaryToUnaryOperation3");    }  }  return hi;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  @SuppressWarnings("unchecked") private static void mergeSort(Object[] in,Object[] out,int start,int end,Comparator c){  int len=end - start;  if (len <= SIMPLE_LENGTH) {    for (int i=start + 1; i < end; i++) {      Object current=out[i];      Object prev=out[i - 1];      if (c.compare(prev,current) > 0) {        int j=i;        do {          out[j--]=prev;        } while (j > start && (c.compare(prev=out[j - 1],current) > 0));        out[j]=current;      }    }    return;  }  int med=(end + start) >>> 1;  mergeSort(out,in,start,med,c);  mergeSort(out,in,med,end,c);  if (c.compare(in[med - 1],in[med]) <= 0) {    System.arraycopy(in,start,out,start,len);    return;  }  int r=med, i=start;  do {    Object fromVal=in[start];    Object rVal=in[r];    if (c.compare(fromVal,rVal) <= 0) {      int l_1=find(in,rVal,-1,start + 1,med - 1,c);      int toCopy=l_1 - start + 1;      System.arraycopy(in,start,out,i,toCopy);      i+=toCopy;      out[i++]=rVal;      r++;      start=l_1 + 1;    } else {      int r_1=find(in,fromVal,0,r + 1,end - 1,c);      int toCopy=r_1 - r + 1;      System.arraycopy(in,r,out,i,toCopy);      i+=toCopy;      out[i++]=fromVal;      start++;      r=r_1 + 1;    }  } while ((end - r) > 0 && (med - start) > 0);  if ((end - r) <= 0) {    System.arraycopy(in,start,out,i,med - start);  } else {    System.arraycopy(in,r,out,i,end - r);  }}  }
class C{  public void addSubToken(String stok,ArrayList<String> svals){  otuple.put(stok,svals);}  }
class C{  public void addImageLink(String link){  addUrlAttribute(IMAGE_LINK_ATTRIBUTE,link);}  }
class C{  final void nextStream() throws IOException {  if (in != null) {    in.close();  }  if (e.hasMoreElements()) {    in=(InputStream)e.nextElement();    if (in == null)     throw new NullPointerException();  } else   in=null;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){  final DBIDs ids=clus.getIDs();  double weight=ids.size();  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));    if (projP[0] != projP[0] || projP[1] != projP[1]) {      continue;    }    hull.add(projP);  }  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {    weight+=.5 * addRecursively(hull,hier,iter.get());  }  return weight;}  }
class C{  public void putField(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTFIELD,owner,name,type);}  }
class C{  public boolean hasNullInput(){  return hasNullInput;}  }
class C{  public static <ET extends Enum<ET>>EnumResolver<ET> constructFor(Class<ET> enumCls,AnnotationIntrospector ai){  ET[] enumValues=enumCls.getEnumConstants();  if (enumValues == null) {    throw new IllegalArgumentException("No enum constants for class " + enumCls.getName());  }  HashMap<String,ET> map=new HashMap<String,ET>();  for (  ET e : enumValues) {    map.put(ai.findEnumValue(e),e);  }  return new EnumResolver<ET>(enumCls,enumValues,map);}  }
class C{  @SuppressWarnings("unchecked") public final void testAddAllValidatorsFromArray(){  Validator<CharSequence> validator1=Validators.notEmpty("foo");  Validator<CharSequence> validator2=Validators.noWhitespace("bar");  Validator<CharSequence>[] validators1=new Validator[2];  validators1[0]=validator1;  validators1[1]=validator2;  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addAllValidators(validators1);  abstractValidateableView.addAllValidators(validators1);  Collection<Validator<CharSequence>> validators2=abstractValidateableView.getValidators();  assertEquals(validators1.length,validators2.size());  Iterator<Validator<CharSequence>> iterator=validators2.iterator();  assertEquals(validator1,iterator.next());  assertEquals(validator2,iterator.next());}  }
class C{  public final void testEqualsObject02(){  CertPath cp1=new MyCertPath(testEncoding);  CertPath cp2=new MyCertPath(testEncoding);  assertTrue(cp1.equals(cp2) && cp2.equals(cp1));}  }
class C{  public final void addDivider(@Nullable final CharSequence title){  Divider divider=new Divider();  divider.setTitle(title);  adapter.add(divider);  adaptGridViewHeight();}  }
class C{  public OptionChoiceGUI_NB(){  initComponents();}  }
class C{  public void write(Writer writer,Integer indent) throws TransformerException {  write(writer,indent,null);}  }
class C{  @Field(0) public Pointer platformInfo(){  return this.io.getPointerField(this,0);}  }
class C{  @Override public void start(){  super.start();  final GameData data=getData();  if (m_needToInitialize) {    HashMap<ICondition,Boolean> testedConditions=null;    final Match<TriggerAttachment> moveCombatDelegateBeforeBonusTriggerMatch=new CompositeMatchAnd<>(AbstractTriggerAttachment.availableUses,AbstractTriggerAttachment.whenOrDefaultMatch(null,null),new CompositeMatchOr<TriggerAttachment>(AbstractTriggerAttachment.notificationMatch(),TriggerAttachment.playerPropertyMatch(),TriggerAttachment.relationshipTypePropertyMatch(),TriggerAttachment.territoryPropertyMatch(),TriggerAttachment.territoryEffectPropertyMatch(),TriggerAttachment.removeUnitsMatch(),TriggerAttachment.changeOwnershipMatch()));    final Match<TriggerAttachment> moveCombatDelegateAfterBonusTriggerMatch=new CompositeMatchAnd<>(AbstractTriggerAttachment.availableUses,AbstractTriggerAttachment.whenOrDefaultMatch(null,null),new CompositeMatchOr<TriggerAttachment>(TriggerAttachment.placeMatch()));    final Match<TriggerAttachment> moveCombatDelegateAllTriggerMatch=new CompositeMatchOr<>(moveCombatDelegateBeforeBonusTriggerMatch,moveCombatDelegateAfterBonusTriggerMatch);    if (GameStepPropertiesHelper.isCombatMove(data,false) && games.strategy.triplea.Properties.getTriggers(data)) {      final HashSet<TriggerAttachment> toFirePossible=TriggerAttachment.collectForAllTriggersMatching(new HashSet<>(Collections.singleton(m_player)),moveCombatDelegateAllTriggerMatch,m_bridge);      if (!toFirePossible.isEmpty()) {        testedConditions=TriggerAttachment.collectTestsForAllTriggers(toFirePossible,m_bridge);        final HashSet<TriggerAttachment> toFireBeforeBonus=TriggerAttachment.collectForAllTriggersMatching(new HashSet<>(Collections.singleton(m_player)),moveCombatDelegateBeforeBonusTriggerMatch,m_bridge);        if (!toFireBeforeBonus.isEmpty()) {          final Set<TriggerAttachment> toFireTestedAndSatisfied=new HashSet<>(Match.getMatches(toFireBeforeBonus,AbstractTriggerAttachment.isSatisfiedMatch(testedConditions)));          TriggerAttachment.triggerNotifications(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);          TriggerAttachment.triggerPlayerPropertyChange(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);          TriggerAttachment.triggerRelationshipTypePropertyChange(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);          TriggerAttachment.triggerTerritoryPropertyChange(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);          TriggerAttachment.triggerTerritoryEffectPropertyChange(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);          TriggerAttachment.triggerChangeOwnership(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);          TriggerAttachment.triggerUnitRemoval(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);        }      }    }    if (GameStepPropertiesHelper.isRepairUnits(data)) {      MoveDelegate.repairMultipleHitPointUnits(m_bridge,m_player);    }    if (GameStepPropertiesHelper.isGiveBonusMovement(data)) {      resetAndGiveBonusMovement();    }    removeMovementFromAirOnDamagedAlliedCarriers(m_bridge,m_player);    if (GameStepPropertiesHelper.isCombatMove(data,false) && games.strategy.triplea.Properties.getTriggers(data)) {      final HashSet<TriggerAttachment> toFireAfterBonus=TriggerAttachment.collectForAllTriggersMatching(new HashSet<>(Collections.singleton(m_player)),moveCombatDelegateAfterBonusTriggerMatch,m_bridge);      if (!toFireAfterBonus.isEmpty()) {        final Set<TriggerAttachment> toFireTestedAndSatisfied=new HashSet<>(Match.getMatches(toFireAfterBonus,AbstractTriggerAttachment.isSatisfiedMatch(testedConditions)));        TriggerAttachment.triggerUnitPlacement(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);      }    }    if (GameStepPropertiesHelper.isResetUnitStateAtStart(data)) {      resetUnitStateAndDelegateState();    }    m_needToInitialize=false;  }}  }
class C{  public LinearBatch(){  this(new SoftmaxLoss(),1e-6);}  }
class C{  protected StatechartImpl(){  super();}  }
class C{  private HttpURLConnection connectImage(URL url) throws RemoteRepositoryException {  try {    _log.info("Connecting to URL: {}",url.toString());    HttpURLConnection httpCon=prepareConnection(url);    httpCon.setInstanceFollowRedirects(false);    String cookie="CTSESSION=" + _ctsession;    httpCon.setRequestProperty("Cookie",cookie);    httpCon.setRequestMethod("GET");    httpCon.connect();    if (httpCon.getResponseCode() != HttpURLConnection.HTTP_OK) {      _log.info("connect image request return {}",httpCon.getResponseCode());      throw new IllegalArgumentException("Http error code:" + httpCon.getResponseCode());    }    _log.info("Image is located successfully and its size is " + httpCon.getContentLength());    return httpCon;  } catch (  Exception e) {    throw SyssvcException.syssvcExceptions.remoteRepoError(MessageFormat.format("User {0} failed to connect with remote image {1}: {2}",_username,url.toString(),e));  }}  }
class C{  public int match(ASTNode node,MatchingNodeSet nodeSet){  return IMPOSSIBLE_MATCH;}  }
class C{  @Override public WbXmlNamespaceContext clone(){  WbXmlNamespaceContext nsctx=new WbXmlNamespaceContext();  nsctx.defaultNamespace=this.defaultNamespace;  nsctx.namespaceToPrefix.putAll(this.namespaceToPrefix);  nsctx.prefixToNamespace.putAll(this.prefixToNamespace);  return nsctx;}  }
class C{  @Nullable private GridClientMessage parseMemcachePacket(GridNioSession ses,ByteBuffer buf,ParserState state) throws IOException, IgniteCheckedException {  assert state.packetType() == GridClientPacketType.MEMCACHE;  assert state.packet() != null;  assert state.packet() instanceof GridMemcachedMessage;  GridMemcachedMessage req=(GridMemcachedMessage)state.packet();  ByteArrayOutputStream tmp=state.buffer();  int i=state.index();  while (buf.remaining() > 0) {    byte b=buf.get();    if (i == 0)     req.requestFlag(b); else     if (i == 1)     req.operationCode(b); else     if (i == 2 || i == 3) {      tmp.write(b);      if (i == 3) {        req.keyLength(U.bytesToShort(tmp.toByteArray(),0));        tmp.reset();      }    } else     if (i == 4)     req.extrasLength(b); else     if (i >= 8 && i <= 11) {      tmp.write(b);      if (i == 11) {        req.totalLength(U.bytesToInt(tmp.toByteArray(),0));        tmp.reset();      }    } else     if (i >= 12 && i <= 15) {      tmp.write(b);      if (i == 15) {        req.opaque(tmp.toByteArray());        tmp.reset();      }    } else     if (i >= HDR_LEN && i < HDR_LEN + req.extrasLength()) {      tmp.write(b);      if (i == HDR_LEN + req.extrasLength() - 1) {        req.extras(tmp.toByteArray());        tmp.reset();      }    } else     if (i >= HDR_LEN + req.extrasLength() && i < HDR_LEN + req.extrasLength() + req.keyLength()) {      tmp.write(b);      if (i == HDR_LEN + req.extrasLength() + req.keyLength() - 1) {        req.key(tmp.toByteArray());        tmp.reset();      }    } else     if (i >= HDR_LEN + req.extrasLength() + req.keyLength() && i < HDR_LEN + req.totalLength()) {      tmp.write(b);      if (i == HDR_LEN + req.totalLength() - 1) {        req.value(tmp.toByteArray());        tmp.reset();      }    }    if (i == HDR_LEN + req.totalLength() - 1)     return assemble(ses,req);    i++;  }  state.index(i);  return null;}  }
class C{  @Override public synchronized boolean prev() throws SQLException {  return super.prev();}  }
class C{  public void startElement(String ns,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  Element elem;  if ((null == ns) || (ns.length() == 0))   elem=m_doc.createElementNS(null,name); else   elem=m_doc.createElementNS(ns,name);  append(elem);  try {    int nAtts=atts.getLength();    if (0 != nAtts) {      for (int i=0; i < nAtts; i++) {        if (atts.getType(i).equalsIgnoreCase("ID"))         setIDAttribute(atts.getValue(i),elem);        String attrNS=atts.getURI(i);        if ("".equals(attrNS))         attrNS=null;        String attrQName=atts.getQName(i);        if (attrQName.startsWith("xmlns:"))         attrNS="http://www.w3.org/2000/xmlns/";        elem.setAttributeNS(attrNS,attrQName,atts.getValue(i));      }    }    m_elemStack.push(elem);    m_currentNode=elem;  } catch (  java.lang.Exception de) {    throw new org.xml.sax.SAXException(de);  }}  }
class C{  public boolean equals(CoordinateDMS o){  return degreesNorth == o.degreesNorth && minutesNorth == o.minutesNorth && tenthsOfSecondsNorth == o.tenthsOfSecondsNorth && degreesEast == o.degreesEast && minutesEast == o.minutesEast && tenthsOfSecondsEast == o.tenthsOfSecondsEast;}  }
class C{  public CbusAddress(String s){  aString=s;  match=hCode.reset(aString).matches();  if (match) {    if (hCode.group(1) != null) {      aFrame=new int[5];      int n=Integer.parseInt(aString.substring(1,aString.length()));      int node=n / NODEFACTOR;      int event=n % NODEFACTOR;      aFrame[4]=event & 0xff;      aFrame[3]=(event >> 8) & 0xff;      aFrame[2]=node & 0xff;      aFrame[1]=(node >> 8) & 0xff;      if (aString.substring(0,1).equals("+")) {        if (node > 0) {          aFrame[0]=CbusConstants.CBUS_ACON;        } else {          aFrame[0]=CbusConstants.CBUS_ASON;        }      } else       if (aString.substring(0,1).equals("-")) {        if (node > 0) {          aFrame[0]=CbusConstants.CBUS_ACOF;        } else {          aFrame[0]=CbusConstants.CBUS_ASOF;        }      } else {        if (node > 0) {          aFrame[0]=CbusConstants.CBUS_ACON;        } else {          aFrame[0]=CbusConstants.CBUS_ASON;        }      }    } else     if (hCode.group(3) != null) {      String l=hCode.group(3);      int len=(l.length() - 1) / 2;      aFrame=new int[len];      for (int i=0; i < len; i++) {        String two=l.substring(1 + 2 * i,1 + 2 * i + 2);        aFrame[i]=Integer.parseInt(two,16);      }    } else     if (hCode.group(5) != null) {      aFrame=new int[5];      int node=Integer.parseInt(hCode.group(8));      int event=Integer.parseInt(hCode.group(9));      aFrame[4]=event & 0xff;      aFrame[3]=(event >> 8) & 0xff;      aFrame[2]=node & 0xff;      aFrame[1]=(node >> 8) & 0xff;      if (hCode.group(6) == null) {        aFrame[0]=CbusConstants.CBUS_ACON;      } else       if (hCode.group(6).equals("+")) {        aFrame[0]=CbusConstants.CBUS_ACON;      } else       if (hCode.group(6).equals("-")) {        aFrame[0]=CbusConstants.CBUS_ACOF;      } else {        aFrame[0]=CbusConstants.CBUS_ACON;      }    }  } else {  }}  }
class C{  public SafeAsyncTask(){  this.executor=DEFAULT_EXECUTOR;}  }
class C{  public final synchronized char readCharacter(){  char c=' ';  try {    c=(char)in.read();  } catch (  IOException e) {  }  return c;}  }
class C{  private void updateRange(double value){  mMinValue=Math.min(mMinValue,value);  mMaxValue=Math.max(mMaxValue,value);}  }
class C{  public double eval(double[] x){  return kernel.eval(x,y);}  }
class C{  public static void main(String[] args){  TestStylesheet tester=new TestStylesheet();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  private static cudnnPoolingDescriptor allocatePoolingDescriptor(int R,int S,int pad_h,int pad_w,int stride_h,int stride_w){  cudnnPoolingDescriptor poolingDesc=new cudnnPoolingDescriptor();  cudnnCreatePoolingDescriptor(poolingDesc);  cudnnSetPooling2dDescriptor(poolingDesc,CUDNN_POOLING_MAX,R,S,pad_h,pad_w,stride_h,stride_w);  return poolingDesc;}  }
class C{  public NTLMAuthentication(boolean isProxy,URL url,PasswordAuthentication pw){  super(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,AuthScheme.NTLM,url,"");  init(pw);}  }
class C{  public static Action<String,String> resolveTransitionAction(Transition transition,StateMachineComponentResolver<String,String> resolver){  Action<String,String> action=null;  if (transition.getEffect() instanceof OpaqueBehavior) {    String beanId=UmlUtils.resolveBodyByLanguage(UmlModelParser.LANGUAGE_BEAN,(OpaqueBehavior)transition.getEffect());    Action<String,String> bean=resolver.resolveAction(beanId);    if (bean != null) {      action=bean;    }  }  return action;}  }
class C{  public MultiOutputStream(final OutputStream[] streams){  super();  this.streams=new OutputStream[streams.length];  System.arraycopy(streams,0,this.streams,0,streams.length);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void init(){  setLayout(new BorderLayout());  JPanel pane2a=layoutRosterSelection();  if (pane2a != null) {    add(pane2a,BorderLayout.NORTH);  }  add(layoutDecoderSelection(),BorderLayout.CENTER);  add(createProgrammerSelection(),BorderLayout.SOUTH);  setBorder(new EmptyBorder(6,6,6,6));}  }
class C{  private boolean inBlockAdvance(RawComparable key,boolean greater) throws IOException {  int curBid=currentLocation.getBlockIndex();  long entryInBlock=reader.getBlockEntryCount(curBid);  if (curBid == endLocation.getBlockIndex()) {    entryInBlock=endLocation.getRecordIndex();  }  while (currentLocation.getRecordIndex() < entryInBlock) {    int cmp=compareCursorKeyTo(key);    if (cmp > 0)     return false;    if (cmp == 0 && !greater)     return true;    if (!valueBufferInputStream.isClosed()) {      valueBufferInputStream.close();    }    klen=-1;    currentLocation.incRecordIndex();  }  throw new RuntimeException("Cannot find matching key in block.");}  }
class C{  public void testBootstrapWithSourceCluster() throws Exception {  MiniSolrCloudCluster target=new MiniSolrCloudCluster(1,createTempDir("cdcr-target"),buildJettyConfig("/solr"));  try {    target.waitForAllNodes(30);    System.out.println("Target zkHost = " + target.getZkServer().getZkAddress());    System.setProperty("cdcr.target.zkHost",target.getZkServer().getZkAddress());    MiniSolrCloudCluster source=new MiniSolrCloudCluster(1,createTempDir("cdcr-source"),buildJettyConfig("/solr"));    try {      source.waitForAllNodes(30);      source.uploadConfigSet(configset("cdcr-source"),"cdcr-source");      CollectionAdminRequest.createCollection("cdcr-source","cdcr-source",1,1).withProperty("solr.directoryFactory","solr.StandardDirectoryFactory").process(source.getSolrClient());      CloudSolrClient sourceSolrClient=source.getSolrClient();      sourceSolrClient.setDefaultCollection("cdcr-source");      int numDocs=0;      for (int k=0; k < 100; k++) {        UpdateRequest req=new UpdateRequest();        for (; numDocs < (k + 1) * 100; numDocs++) {          SolrInputDocument doc=new SolrInputDocument();          doc.addField("id","source_" + numDocs);          doc.addField("xyz",numDocs);          req.add(doc);        }        req.setAction(AbstractUpdateRequest.ACTION.COMMIT,true,true);        System.out.println("Adding 100 docs with commit=true, numDocs=" + numDocs);        req.process(sourceSolrClient);      }      QueryResponse response=sourceSolrClient.query(new SolrQuery("*:*"));      assertEquals("",numDocs,response.getResults().getNumFound());      target.uploadConfigSet(configset("cdcr-target"),"cdcr-target");      CollectionAdminRequest.createCollection("cdcr-target","cdcr-target",1,1).process(target.getSolrClient());      CloudSolrClient targetSolrClient=target.getSolrClient();      targetSolrClient.setDefaultCollection("cdcr-target");      cdcrStart(targetSolrClient);      cdcrStart(sourceSolrClient);      response=getCdcrQueue(sourceSolrClient);      System.out.println("Cdcr queue response: " + response.getResponse());      long foundDocs=waitForTargetToSync(numDocs,targetSolrClient);      assertEquals("Document mismatch on target after sync",numDocs,foundDocs);      cdcrStop(sourceSolrClient);      cdcrDisableBuffer(sourceSolrClient);      int c=0;      for (int k=0; k < 100; k++) {        UpdateRequest req=new UpdateRequest();        for (; c < (k + 1) * 100; c++, numDocs++) {          SolrInputDocument doc=new SolrInputDocument();          doc.addField("id","source_" + numDocs);          doc.addField("xyz",numDocs);          req.add(doc);        }        req.setAction(AbstractUpdateRequest.ACTION.COMMIT,true,true);        System.out.println("Adding 100 docs with commit=true, numDocs=" + numDocs);        req.process(sourceSolrClient);      }      response=sourceSolrClient.query(new SolrQuery("*:*"));      assertEquals("",numDocs,response.getResults().getNumFound());      cdcrStart(sourceSolrClient);      cdcrEnableBuffer(sourceSolrClient);      foundDocs=waitForTargetToSync(numDocs,targetSolrClient);      assertEquals("Document mismatch on target after sync",numDocs,foundDocs);    }  finally {      source.shutdown();    }  }  finally {    target.shutdown();  }}  }
class C{  public void unregisterAllDimensions(){  for (  Entry<Integer,DimensionProperties> dimSet : dimensionList.entrySet()) {    if (dimSet.getValue().isNativeDimension && !dimSet.getValue().isGasGiant()) {      net.minecraftforge.common.DimensionManager.unregisterProviderType(dimSet.getKey());      net.minecraftforge.common.DimensionManager.unregisterDimension(dimSet.getKey());    }  }  dimensionList.clear();}  }
class C{  public Time toTime(Config config,Element el,String attributeName){  DateTime dt=toDateTime(config,el,attributeName);  if (dt == null)   return null;  return new TimeImpl(dt);}  }
class C{  public void removeReservedNamespaceURI(String namespaceURI){  if (namespaceURI == null) {    namespaceURI="";  }  if (reservedNamespaceSet != null) {    reservedNamespaceSet.remove(namespaceURI);    if (reservedNamespaceSet.isEmpty()) {      reservedNamespaceSet=null;    }  }}  }
class C{  public void init(boolean forWrapping,CipherParameters param){  this.forWrapping=forWrapping;  this.engine=new CBCBlockCipher(new DESedeEngine());  SecureRandom sr;  if (param instanceof ParametersWithRandom) {    ParametersWithRandom pr=(ParametersWithRandom)param;    param=pr.getParameters();    sr=pr.getRandom();  } else {    sr=new SecureRandom();  }  if (param instanceof KeyParameter) {    this.param=(KeyParameter)param;    if (this.forWrapping) {      this.iv=new byte[8];      sr.nextBytes(iv);      this.paramPlusIV=new ParametersWithIV(this.param,this.iv);    }  } else   if (param instanceof ParametersWithIV) {    this.paramPlusIV=(ParametersWithIV)param;    this.iv=this.paramPlusIV.getIV();    this.param=(KeyParameter)this.paramPlusIV.getParameters();    if (this.forWrapping) {      if ((this.iv == null) || (this.iv.length != 8)) {        throw new IllegalArgumentException("IV is not 8 octets");      }    } else {      throw new IllegalArgumentException("You should not supply an IV for unwrapping");    }  }}  }
class C{  public static String checkWorkspaceDirectory(final String workspaceLocation,final boolean askCreate,final boolean fromDialog,final boolean cloning){  final File f=new File(workspaceLocation);  if (!f.exists()) {    if (askCreate) {      final boolean create=MessageDialog.openQuestion(Display.getDefault().getActiveShell(),"New Directory",workspaceLocation + " does not exist. Would you like to create a new workspace here" + (cloning ? ", copy the projects and preferences of an existing workspace into it, " : "")+ " and restart the application ?");      if (create) {        try {          f.mkdirs();          final File wsDot=new File(workspaceLocation + File.separator + WS_IDENTIFIER);          wsDot.createNewFile();          final File dotFile=new File(workspaceLocation + File.separator + MODEL_IDENTIFIER);          dotFile.createNewFile();        } catch (        final RuntimeException err) {          err.printStackTrace();          return "Error creating directories, please check folder permissions";        }catch (        final IOException er) {          er.printStackTrace();          return "Error creating directories, please check folder permissions";        }      }      if (!f.exists()) {        return "The selected directory does not exist";      } else {        return null;      }    }  }  if (!f.canRead()) {    return "The selected directory is not readable";  }  if (!f.isDirectory()) {    return "The selected path is not a directory";  }  final File wsTest=new File(workspaceLocation + File.separator + WS_IDENTIFIER);  if (fromDialog) {    if (!wsTest.exists()) {      final boolean create=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),"New Workspace","The directory '" + wsTest.getAbsolutePath() + "' exists but is not identified as a GAMA workspace. \n\nWould you like to use it anyway ?");      if (create) {        try {          f.mkdirs();          final File wsDot=new File(workspaceLocation + File.separator + WS_IDENTIFIER);          wsDot.createNewFile();        } catch (        final Exception err) {          return "Error creating directories, please check folder permissions";        }      } else {        return "Please select a directory for your workspace";      }      if (!wsTest.exists()) {        return "The selected directory does not exist";      }      return null;    }  } else {    if (!wsTest.exists()) {      return "The selected directory is not a workspace directory";    }  }  final File dotFile=new File(workspaceLocation + File.separator + MODEL_IDENTIFIER);  if (!dotFile.exists()) {    if (fromDialog) {      final boolean create=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),"Outdated version of the models library","The workspace contains an old version of the models library. Do you want to proceed anyway ?");      if (create) {        try {          dotFile.createNewFile();        } catch (        final IOException e) {          return "Error updating the models library";        }        return null;      }    }    return "models";  } else   if (cloning) {    final boolean b=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),"Existing workspace","The path entered is a path to an existing workspace. All its contents will be erased and replaced by the current workspace contents. Proceed anyway ?");    if (!b) {      return "";    }  }  return null;}  }
class C{  private void finishEdit(){  this.setVisible(false);}  }
class C{  @Override protected void drawAdditional(){  if (mDrawCircles) {    ArrayList<DataSet> dataSets=mData.getDataSets();    for (int i=0; i < mData.getDataSetCount(); i++) {      DataSet dataSet=dataSets.get(i);      ArrayList<Entry> entries=dataSet.getYVals();      ArrayList<Integer> colors=mCt.getDataSetColors(i % mCt.getColors().size());      float[] positions=generateTransformedValues(entries,0f);      for (int j=0; j < positions.length; j+=2) {        mRenderPaint.setColor(colors.get(j % colors.size()));        if (isOffContentRight(positions[j]))         break;        if (isOffContentLeft(positions[j]))         continue;        mDrawCanvas.drawCircle(positions[j],positions[j + 1],mCircleSize,mRenderPaint);        mDrawCanvas.drawCircle(positions[j],positions[j + 1],mCircleSize / 2,mCirclePaintInner);      }    }  }}  }
class C{  @Override protected void prepareBuilders(@Nullable String cacheName,Collection<JdbcType> types) throws CacheException {  Map<String,PojoPropertiesCache> pojoProps=U.newHashMap(types.size() * 2);  for (  JdbcType type : types) {    String keyTypeName=type.getKeyType();    TypeKind keyKind=kindForName(keyTypeName);    if (keyKind == TypeKind.POJO) {      if (pojoProps.containsKey(keyTypeName))       throw new CacheException("Found duplicate key type [cache=" + U.maskName(cacheName) + ", keyType="+ keyTypeName+ "]");      pojoProps.put(keyTypeName,new PojoPropertiesCache(keyTypeName,type.getKeyFields()));    }    String valTypeName=type.getValueType();    TypeKind valKind=kindForName(valTypeName);    if (valKind == TypeKind.POJO)     pojoProps.put(valTypeName,new PojoPropertiesCache(valTypeName,type.getValueFields()));  }  if (!pojoProps.isEmpty()) {    Map<String,Map<String,PojoPropertiesCache>> newPojosProps=new HashMap<>(pojosProps);    newPojosProps.put(cacheName,pojoProps);    pojosProps=newPojosProps;  }}  }
class C{  public void doDeferredDelete(){  if (sipStack.getTimer() == null)   this.setState(TERMINATED_STATE); else {    this.dialogDeleteTask=new DialogDeleteTask();    sipStack.getTimer().schedule(this.dialogDeleteTask,SIPTransaction.TIMER_H * SIPTransactionStack.BASE_TIMER_INTERVAL);  }}  }
class C{  public static void putSessionAttribute(final HttpServletRequest request,final String parameter,final Object value){  final HttpSession session=request.getSession();  session.setAttribute(parameter,value);}  }
class C{  public boolean isIssue(){  Object oo=get_Value(COLUMNNAME_IsIssue);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void fillHeldItem(EntityPlayer player,INetworkCache cache,StoredFluidStack toFill){}  }
class C{  public static boolean isDestructuringAssignment(AssignmentExpression expr){  return isLeftHandSideDestructuringPattern(expr.getLhs());}  }
class C{  public static input createClosePopupButton(Properties ctx){  String text="Close";  if (ctx != null)   text=Msg.getMsg(ctx,"Close");  input close=new input("button",text,"  " + text);  close.setID(text);  close.setClass("closebtn");  close.setTitle("Close PopUp");  close.setOnClick("self.close();return false;");  return close;}  }
class C{  public Sequence(Class<?> type){  this(Object.class,type);}  }
class C{  public static CCRepeatForever action(CCIntervalAction action){  return new CCRepeatForever(action);}  }
class C{  public static void load(){  try {    URL appPropertiesUrl=ApplicationProperties.class.getClassLoader().getResource("application.properties");    if (appPropertiesUrl != null) {      Debug.info("Reading " + URLDecoder.decode(appPropertiesUrl.getPath(),"UTF-8") + " ...");      props.load(appPropertiesUrl.openStream());    }    try {      try {        appPropertiesLastModified=new File(appPropertiesUrl.toURI()).lastModified();      } catch (      URISyntaxException e) {        appPropertiesLastModified=new File(appPropertiesUrl.getPath()).lastModified();      }    } catch (    Exception e) {    }    String customProperties=System.getProperty("tmtbl.custom.properties");    if (customProperties == null)     customProperties=props.getProperty("tmtbl.custom.properties","custom.properties");    URL custPropertiesUrl=ApplicationProperties.class.getClassLoader().getResource(customProperties);    if (custPropertiesUrl != null) {      Debug.info("Reading " + URLDecoder.decode(custPropertiesUrl.getPath(),"UTF-8") + " ...");      props.load(custPropertiesUrl.openStream());      try {        try {          custPropertiesLastModified=new File(custPropertiesUrl.toURI()).lastModified();        } catch (        URISyntaxException e) {          custPropertiesLastModified=new File(custPropertiesUrl.getPath()).lastModified();        }      } catch (      Exception e) {      }    } else     if (new File(customProperties).exists()) {      Debug.info("Reading " + customProperties + " ...");      FileInputStream fis=null;      try {        fis=new FileInputStream(customProperties);        props.load(fis);        custPropertiesLastModified=new File(customProperties).lastModified();      }  finally {        if (fis != null)         fis.close();      }    }    props.putAll(System.getProperties());  } catch (  Exception e) {    Debug.error(e);  }}  }
class C{  protected void checkJdbcAttributesSupport(DatabaseMetaData dbMetaData) throws SQLException {  String attributesColumnName="message_attributes";  boolean hasUpdateMessageAttributesSQL=false;  boolean hasRetrieveMessageAttributesSQL=false;  boolean hasMessageAttributesColumn=theJDBCUtil.columnExists(dbMetaData,tableName,attributesColumnName);  StringBuilder logBuffer=new StringBuilder(64).append("JdbcMailRepository '").append(repositoryName).append(", table '").append(tableName).append("': ");  String updateMessageAttrSql=sqlQueries.getSqlString("updateMessageAttributesSQL",false);  if (updateMessageAttrSql != null) {    hasUpdateMessageAttributesSQL=true;  }  String retrieveMessageAttrSql=sqlQueries.getSqlString("retrieveMessageAttributesSQL",false);  if (retrieveMessageAttrSql != null) {    hasRetrieveMessageAttributesSQL=true;  }  if (hasUpdateMessageAttributesSQL && !hasRetrieveMessageAttributesSQL) {    logBuffer.append("JDBC Mail Attributes support was activated for update but not for retrieval" + "(found 'updateMessageAttributesSQL' but not 'retrieveMessageAttributesSQL'" + "in table '").append(tableName).append("').");    getLogger().error(logBuffer.toString());    throw new SQLException(logBuffer.toString());  }  if (!hasUpdateMessageAttributesSQL && hasRetrieveMessageAttributesSQL) {    logBuffer.append("JDBC Mail Attributes support was activated for retrieval but not for update" + "(found 'retrieveMessageAttributesSQL' but not 'updateMessageAttributesSQL'" + "in table '").append(tableName).append("'.");    getLogger().error(logBuffer.toString());    throw new SQLException(logBuffer.toString());  }  if (!hasMessageAttributesColumn && (hasUpdateMessageAttributesSQL || hasRetrieveMessageAttributesSQL)) {    logBuffer.append("JDBC Mail Attributes support was activated but column '").append(attributesColumnName).append("' is missing in table '").append(tableName).append("'.");    getLogger().error(logBuffer.toString());    throw new SQLException(logBuffer.toString());  }  if (hasUpdateMessageAttributesSQL && hasRetrieveMessageAttributesSQL) {    jdbcMailAttributesReady=true;    if (getLogger().isInfoEnabled()) {      logBuffer.append("JDBC Mail Attributes support ready.");      getLogger().info(logBuffer.toString());    }  } else {    jdbcMailAttributesReady=false;    logBuffer.append("JDBC Mail Attributes support not activated. " + "Missing both 'updateMessageAttributesSQL' " + "and 'retrieveMessageAttributesSQL' "+ "statements for table '").append(tableName).append("' in sqlResources.xml. ").append("Will not persist in the repository '").append(repositoryName).append("'.");    getLogger().warn(logBuffer.toString());  }}  }
class C{  public static DragSourceListener add(DragSourceListener a,DragSourceListener b){  return (DragSourceListener)addInternal(a,b);}  }
class C{  private void cmd_ok_Simple(){  m_query=new MQuery(m_tableName);  m_query.addRestriction(Env.parseContext(Env.getCtx(),m_targetWindowNo,m_whereExtended,false));  if (hasValue && !valueField.getText().equals("%") && valueField.getText().length() != 0) {    String value=valueField.getText().toUpperCase();    if (!value.endsWith("%"))     value+="%";    m_query.addRestriction("UPPER(Value)",MQuery.LIKE,value,valueLabel.getText(),value);  }  if (hasDocNo && !docNoField.getText().equals("%") && docNoField.getText().length() != 0) {    String value=docNoField.getText().toUpperCase();    if (!value.endsWith("%"))     value+="%";    m_query.addRestriction("UPPER(DocumentNo)",MQuery.LIKE,value,docNoLabel.getText(),value);  }  if ((hasName) && !nameField.getText().equals("%") && nameField.getText().length() != 0) {    String value=nameField.getText().toUpperCase();    if (!value.endsWith("%"))     value+="%";    m_query.addRestriction("UPPER(Name)",MQuery.LIKE,value,nameLabel.getText(),value);  }  if (hasDescription && !descriptionField.getText().equals("%") && descriptionField.getText().length() != 0) {    String value=descriptionField.getText().toUpperCase();    if (!value.endsWith("%"))     value+="%";    m_query.addRestriction("UPPER(Description)",MQuery.LIKE,value,descriptionLabel.getText(),value);  }  for (int i=0; i < m_sEditors.size(); i++) {    VEditor ved=(VEditor)m_sEditors.get(i);    Object value=ved.getValue();    Object modifiedvalue=null;    String ColumnSQL=null;    String ColumnName=((Component)ved).getName();    GridField field=getTargetMField(ColumnName);    if (value != null && value.toString().length() > 0) {      ColumnName=((Component)ved).getName();      log.fine(ColumnName + "=" + value);      field=getTargetMField(ColumnName);      boolean isProductCategoryField=isProductCategoryField(field.getAD_Column_ID());      ColumnSQL=field.getColumnSQL(false);      if (isSearchLike(field)) {        String valueStr=value.toString().toUpperCase();        if (!valueStr.endsWith("%"))         valueStr+="%";        ColumnSQL="UPPER(" + ColumnSQL + ")";        modifiedvalue=valueStr;      } else       modifiedvalue=value;      if (modifiedvalue.toString().indexOf('%') != -1 && !field.isRange())       m_query.addRestriction(ColumnSQL,MQuery.LIKE,modifiedvalue,ColumnName,ved.getDisplay()); else       if (isProductCategoryField && value instanceof Integer)       m_query.addRestriction(getSubCategoryWhereClause(((Integer)value).intValue())); else       if (!field.isRange())       m_query.addRestriction(ColumnSQL,MQuery.EQUAL,value,ColumnName,ved.getDisplay());    }    if (field.isRange()) {      VEditor editor2=(VEditor)m_sEditors2.get(i);      Object value2=null;      Object parsedValue=null;      Object parsedValue2=null;      String infoDisplay_to=null;      String infoDisplay=null;      if (editor2 != null)       value2=editor2.getValue();      if ((value != null && !value.toString().isEmpty()) && (value2 != null && !value2.toString().isEmpty()) && value2.toString().length() > 0) {        ColumnName=((Component)ved).getName();        log.fine(ColumnName + "=" + value2);        field=getTargetMField(ColumnName);        infoDisplay=value.toString();        parsedValue=parseValue(field,value);        parsedValue2=parseValue(field,value2);        infoDisplay_to=value2.toString();        if (parsedValue2 == null)         continue;        m_query.addRangeRestriction(ColumnSQL,parsedValue,parsedValue2,ColumnSQL,infoDisplay,infoDisplay_to);      } else       if (value != null && !value.toString().isEmpty() && (value2 == null || value2.toString().isEmpty())) {        ColumnName=((Component)ved).getName();        m_query.addRestriction(ColumnSQL,MQuery.GREATER_EQUAL,value,ColumnName,ved.getDisplay());      } else       if ((value == null || value.toString().isEmpty()) && value2 != null && !value2.toString().isEmpty()) {        ColumnName=((Component)ved).getName();        field=getTargetMField(ColumnName);        ColumnSQL=field.getColumnSQL(false);        m_query.addRestriction(ColumnSQL,MQuery.LESS_EQUAL,value2,ColumnName,editor2.getDisplay());      }    }  }  m_isCancel=false;  if (getNoOfRecords(m_query,true) != 0)   dispose();}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  protected void sequence_AssignmentExpressionStatement(ISerializationContext context,ExpressionStatement semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.EXPRESSION_STATEMENT__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.EXPRESSION_STATEMENT__EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0(),semanticObject.getExpression());  feeder.finish();}  }
class C{  public SpdyStream newStream(List<String> requestHeaders,boolean out,boolean in) throws IOException {  boolean outFinished=!out;  boolean inFinished=!in;  int associatedStreamId=0;  int priority=0;  int slot=0;  SpdyStream stream;  int streamId;synchronized (frameWriter) {synchronized (this) {      if (shutdown) {        throw new IOException("shutdown");      }      streamId=nextStreamId;      nextStreamId+=2;      stream=new SpdyStream(streamId,this,outFinished,inFinished,priority,requestHeaders,settings);      if (stream.isOpen()) {        streams.put(streamId,stream);        setIdle(false);      }    }    frameWriter.synStream(outFinished,inFinished,streamId,associatedStreamId,priority,slot,requestHeaders);  }  return stream;}  }
class C{  private void removeSynapseGroupNodes(SynapseGroup group){  SynapseNode node;  for (  Synapse synapse : group.getExcitatorySynapses()) {    node=(SynapseNode)objectNodeMap.get(synapse);    if (node != null) {      selectionModel.remove(node);      objectNodeMap.remove(synapse);      node.removeFromParent();    }  }  for (  Synapse synapse : group.getInhibitorySynapses()) {    node=(SynapseNode)objectNodeMap.get(synapse);    if (node != null) {      selectionModel.remove(node);      objectNodeMap.remove(synapse);      node.removeFromParent();    }  }  repaint();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenFld[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_name = ").append(m_name);  buffer.append(", m_type = ").append(m_type);  buffer.append(", m_len = ").append(m_len);  buffer.append(", m_isNullable = ").append(m_isNullable);  buffer.append(", m_colName = ").append(m_colName);  buffer.append(", m_isDoc = ").append(m_isDoc);  buffer.append(", m_isMult = ").append(m_isMult);  buffer.append("]");  return buffer.toString();}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void pushScene(CCScene CCScene){  assert CCScene != null : "Argument must be non-null";  sendCleanupToCCScene_=false;  CCScenesStack_.add(CCScene);  nextCCScene_=CCScene;}  }
class C{  private ArrayList<String> loadSystemLanguages(){  s_logger.log(Level.FINE,"loadSystemLanguages",getDirection());  ArrayList<String> systemClients=new ArrayList<String>();  String sql=s_dbEngine.sqlAD_getSystemLanguages(getVendor(),getCatalog(),getSchema());  ResultSet rs=null;  Statement stmt=null;  if (isObjectExists("ad_language",m_tables)) {    stmt=setStatement();    rs=executeQuery(stmt,sql);    while (getResultSetNext(rs)) {      String s=getResultSetString(rs,"AD_Language");      systemClients.add(s);    }    releaseResultSet(rs);    releaseStatement(stmt);  }  StringBuffer result=new StringBuffer();  for (Iterator<String> it=systemClients.iterator(); it.hasNext(); ) {    String s=it.next();    if (result.length() > 0)     result.append(", ");    result.append(s);  }  s_logger.log(Level.FINE,"systemLanguagesLoaded",new Object[]{getDirection(),result});  s_logger.flush();  return systemClients;}  }
class C{  public boolean isValid(){  if (this.protocol == Protocol.HTTP11) {    throw new IllegalStateException("Internal error: checked for stream exhaustion on HTTP/1.1 connection");  } else {    boolean isExhausted;synchronized (this.streamIdMap) {      isExhausted=this.largestStreamId >= NettyChannelContext.maxStreamId;    }    return !isExhausted;  }}  }
class C{  public KeepAliveFilter(KeepAliveMessageFactory messageFactory,IdleStatus interestedIdleStatus,KeepAliveRequestTimeoutHandler policy,int keepAliveRequestInterval,int keepAliveRequestTimeout){  if (messageFactory == null) {    throw new IllegalArgumentException("messageFactory");  }  if (interestedIdleStatus == null) {    throw new IllegalArgumentException("interestedIdleStatus");  }  if (policy == null) {    throw new IllegalArgumentException("policy");  }  this.messageFactory=messageFactory;  this.interestedIdleStatus=interestedIdleStatus;  requestTimeoutHandler=policy;  setRequestInterval(keepAliveRequestInterval);  setRequestTimeout(keepAliveRequestTimeout);}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public MultiSimilarity(Similarity sims[]){  this.sims=sims;}  }
class C{  public static void println(long x){  out.println(x);}  }
class C{  public PemAttribute(String name,String value){  this.name=name;  this.value=value;}  }
class C{  @Override public synchronized void stop(){  log.debug("stop");  elm.removeTelegramWriter(ser);  if (mBtConnectThread != null) {    mBtConnectThread.cancel();    mBtConnectThread=null;  }  if (mBtWorkerThread != null) {    mBtWorkerThread.cancel();    mBtWorkerThread=null;  }  setState(STATE.OFFLINE);}  }
class C{  public void writeStream(InputStream source,int totalLength) throws IOException {  if (source == null)   return;  int length=_writeBuffer.length;  if (length <= _writeLength) {    int tmplen=_writeLength;    _writeLength=0;    _source.write(_writeBuffer,0,tmplen,false);    _position+=tmplen;    _isFlushRequired=true;  }  while (totalLength > 0) {    int sublen=Math.min(totalLength,length - _writeLength);    sublen=source.read(_writeBuffer,_writeLength,sublen);    if (sublen < 0)     break;    _writeLength+=sublen;    totalLength-=sublen;    if (length <= _writeLength) {      int tmplen=_writeLength;      _writeLength=0;      _source.write(_writeBuffer,0,tmplen,false);      _position+=tmplen;      _isFlushRequired=true;    }  }  if (_isFlushOnNewline || _implicitFlush) {    flush();  }}  }
class C{  public boolean isPropertyAdditive(String pn){  AbstractStylableDocument doc=(AbstractStylableDocument)ownerDocument;  CSSEngine eng=doc.getCSSEngine();  int idx=eng.getPropertyIndex(pn);  if (idx != -1) {    ValueManager[] vms=eng.getValueManagers();    return vms[idx].isAdditiveProperty();  }  idx=eng.getShorthandIndex(pn);  if (idx != -1) {    ShorthandManager[] sms=eng.getShorthandManagers();    return sms[idx].isAdditiveProperty();  }  return false;}  }
class C{  public void printTable(HardcopyWriter w,int colWidth[]){  int[] columnSize=new int[4];  int charPerLine=w.getCharactersPerLine();  int tableLineWidth=0;  int totalColWidth=0;  for (int j=0; j < 4; j++) {    totalColWidth+=colWidth[j];  }  float ratio=((float)charPerLine) / ((float)totalColWidth);  for (int j=0; j < 4; j++) {    columnSize[j]=(int)Math.round(colWidth[j] * ratio - 1.);    tableLineWidth+=(columnSize[j] + 1);  }  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  String[] columnStrings=new String[4];  for (int i=0; i < 4; i++) {    columnStrings[i]=this.getColumnName(i);  }  w.setFontStyle(Font.BOLD);  printColumns(w,columnStrings,columnSize);  w.setFontStyle(0);  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  String[] spaces=new String[4];  for (int k=0; k < 4; k++) {    spaces[k]="";    for (int i=0; i < columnSize[k]; i++) {      spaces[k]=spaces[k] + " ";    }  }  for (int i=0; i < this.getRowCount(); i++) {    for (int j=0; j < 4; j++) {      if (this.getValueAt(i,j) == null) {        columnStrings[j]=spaces[j];      } else {        columnStrings[j]=(String)this.getValueAt(i,j);      }    }    printColumns(w,columnStrings,columnSize);    w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  }  w.close();}  }
class C{  public VectorSwitchPreference(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  private boolean canIgnoreClientId(String clientId){  return clientId == null || IDS_TO_IGNORE.contains(clientId);}  }
class C{  private void addKeywords(Document doc,String keys) throws DocumentException {  if (keys != null && !(keys.length() == 0)) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    p.add(new Phrase(getText("rtf.keywords") + ": ",fontTitle));    p.add(keys);    p.add(Chunk.NEWLINE);    doc.add(p);    p.clear();  }}  }
class C{  protected boolean isReceiveBufferSizeChanged(){  return true;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.fab=findView(R.id.show_fb);}  }
class C{  private void cmd_reloadFile(){  if (m_file_istream == null)   return;  m_data.clear();  rawData.setText("");  try {    ListItem listitem=fCharset.getSelectedItem();    Charset charset=null;    if (listitem == null)     return;    charset=(Charset)listitem.getValue();    BufferedReader in=new BufferedReader(new InputStreamReader(m_file_istream,charset),10240);    String s=null;    String concat="";    while ((s=in.readLine()) != null) {      m_data.add(s);      concat+=s;      concat+="\n";      if (m_data.size() < MAX_LOADED_LINES) {        rawData.setValue(concat);      }    }    in.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);    bFile.setLabel(Msg.getMsg(Env.getCtx(),"FileImportFile"));  }  int index=1;  if (m_data.size() == 1)   index=0;  int length=0;  if (m_data.size() > 0)   length=m_data.get(index).toString().length();  info.setValue(Msg.getMsg(Env.getCtx(),"Records") + "=" + m_data.size()+ ", "+ Msg.getMsg(Env.getCtx(),"Length")+ "="+ length+ "   ");  log.config("Records=" + m_data.size() + ", Length="+ length);}  }
class C{  @Nullable @Override public IBinder onBind(Intent intent){  return sSyncAdapter.getSyncAdapterBinder();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.385 -0500",hash_original_method="F5E87BA491C8F9D5AD5FD041B46AF87F",hash_generated_method="DCAEB9ADE838E5674B56B22DABAFC4F3") public BufferIterator bigEndianIterator(){  return new NioBufferIterator((int)address,(int)size,ByteOrder.nativeOrder() != ByteOrder.BIG_ENDIAN);}  }
class C{  protected SVGOMUseElement(){}  }
class C{  public int minMeetingRooms(Interval[] intervals){  if (intervals == null || intervals.length == 0) {    return 0;  }  Arrays.sort(intervals,null);  PriorityQueue<Interval> minHeap=new PriorityQueue<>(intervals.length,null);  for (  Interval i : intervals) {    if (!minHeap.isEmpty() && i.start >= minHeap.peek().end) {      minHeap.poll();    }    minHeap.add(i);  }  return minHeap.size();}  }
class C{  public static String extractServiceId(String featureTag){  String[] values=featureTag.split("=");  String value=StringUtils.removeQuotes(values[1]);  if (featureTag.contains(FeatureTags.FEATURE_RCSE_IARI_EXTENSION)) {    return value.substring(FeatureTags.FEATURE_RCSE_IARI_EXTENSION.length() + 1,value.length());  } else {    return value.substring(FeatureTags.FEATURE_RCSE_ICSI_EXTENSION.length() + 1,value.length());  }}  }
class C{  public void writeDouble(double d,boolean append){  writeDoubleArray(new double[]{d},append);}  }
class C{  public BinaryClipboard(Display aDisplay){  clipboard=new Clipboard(aDisplay);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static final void drawMouseJoint(GL2 gl,PinJoint joint,double invdt){  gl.glColor4f(0.0f,0.0f,0.0f,0.8f);  Vector2 anchor=joint.getAnchor2();  RenderUtilities.fillRectangleFromCenter(gl,anchor.x,anchor.y,0.05,0.05);  Vector2 target=joint.getTarget();  RenderUtilities.fillRectangleFromCenter(gl,target.x,target.y,0.05,0.05);  double maxForce=joint.getMaximumForce();  double force=joint.getReactionForce(invdt).getMagnitude();  double red=force / maxForce;  red*=1.10;  red=Interval.clamp(red,0.0,1.0);  gl.glColor4f((float)red,0.0f,0.0f,0.8f);  gl.glBegin(GL.GL_LINES);  gl.glVertex2d(anchor.x,anchor.y);  gl.glVertex2d(target.x,target.y);  gl.glEnd();}  }
class C{  @Override public Graph search(){  return search(independenceTest.getVariables());}  }
class C{  protected OffHeapStoredObject(){  this.memoryAddress=0L;}  }
class C{  public Quaternion normalizeLocal(){  float n=FastMath.invSqrt(norm());  x*=n;  y*=n;  z*=n;  w*=n;  return this;}  }
class C{  static BitArray interleaveWithECBytes(BitArray bits,int numTotalBytes,int numDataBytes,int numRSBlocks) throws WriterException {  if (bits.getSizeInBytes() != numDataBytes) {    throw new WriterException("Number of bits and data bytes does not match");  }  int dataBytesOffset=0;  int maxNumDataBytes=0;  int maxNumEcBytes=0;  Collection<BlockPair> blocks=new ArrayList<>(numRSBlocks);  for (int i=0; i < numRSBlocks; ++i) {    int[] numDataBytesInBlock=new int[1];    int[] numEcBytesInBlock=new int[1];    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);    int size=numDataBytesInBlock[0];    byte[] dataBytes=new byte[size];    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);    blocks.add(new BlockPair(dataBytes,ecBytes));    maxNumDataBytes=Math.max(maxNumDataBytes,size);    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);    dataBytesOffset+=numDataBytesInBlock[0];  }  if (numDataBytes != dataBytesOffset) {    throw new WriterException("Data bytes does not match offset");  }  BitArray result=new BitArray();  for (int i=0; i < maxNumDataBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] dataBytes=block.getDataBytes();      if (i < dataBytes.length) {        result.appendBits(dataBytes[i],8);      }    }  }  for (int i=0; i < maxNumEcBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] ecBytes=block.getErrorCorrectionBytes();      if (i < ecBytes.length) {        result.appendBits(ecBytes[i],8);      }    }  }  if (numTotalBytes != result.getSizeInBytes()) {    throw new WriterException("Interleaving error: " + numTotalBytes + " and "+ result.getSizeInBytes()+ " differ.");  }  return result;}  }
class C{  public boolean contains(Rectangle2D r){  return contains(r.getX(),r.getY(),r.getWidth(),r.getHeight());}  }
class C{  public void incNumVoidRemovals(){  this._stats.incLong(_numVoidRemovals,1);}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  public Element store(Object o){  ReporterIcon p=(ReporterIcon)o;  Element element=new Element("reportericon");  element.setAttribute("reporter",p.getReporter().getSystemName());  storeCommonAttributes(p,element);  storeTextInfo(p,element);  element.setAttribute("class","jmri.jmrit.display.configurexml.ReporterIconXml");  return element;}  }
class C{  public static void copyBytesToStream(InputStream inputStream,OutputStream outputStream,int length) throws IOException {  final int BUFFER_SIZE=1024;  byte[] buffer=new byte[BUFFER_SIZE];  int totalRead=0;  do {    int readReqLen=(length == -1) ? BUFFER_SIZE : Math.min(BUFFER_SIZE,length - totalRead);    int read=inputStream.read(buffer,0,readReqLen);    if (read == -1) {      if (length != -1) {        throw createFailedToReadExpected(length,totalRead);      } else {        return;      }    }    totalRead+=read;    outputStream.write(buffer,0,read);  } while (totalRead != length);}  }
class C{  private UniversalDataSource createDataSource(String name) throws ReplicatorException, InterruptedException {  TungstenProperties datasourceProps=new TungstenProperties();  datasourceProps.setString("serviceName",name);  datasourceProps.setLong("channels",10);  datasourceProps.setString("directory",name);  datasourceProps.setString("csvType","default");  mgr=new DataSourceManager();  mgr.addAndPrepare(name,FileDataSource.class.getName(),datasourceProps);  UniversalDataSource ds=mgr.find(name);  Assert.assertNotNull("Data source must exist in manager",ds);  return ds;}  }
class C{  public final boolean canMoveVariation(int delta){  int nBack=0;  boolean found=false;  while (tree.currentNode != tree.rootNode) {    tree.goBack();    nBack++;    if (((delta < 0) && tree.currentNode.defaultChild > 0) || ((delta > 0) && tree.currentNode.defaultChild < tree.variations().size() - 1)) {      found=true;      break;    }  }  while (nBack > 0) {    tree.goForward(-1);    nBack--;  }  return found;}  }
class C{  protected void mapClass(Class clazz,List<String> ids){  for (  String sidc : ids) {    this.classMap.put(sidc,clazz);  }}  }
class C{  private void interruptWorkers(){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers)     w.interruptIfStarted();  }  finally {    mainLock.unlock();  }}  }
class C{  public String toString(){  return new String(toArray());}  }
class C{  public void testSystemCacheTx() throws Exception {  final Ignite ignite=grid(0);  final IgniteInternalCache<Object,Object> utilCache=getSystemCache(ignite,CU.UTILITY_CACHE_NAME);  checkImplicitTxSuccess(utilCache);  checkStartTxSuccess(utilCache);  final IgniteInternalCache<Object,Object> atomicsCache=getSystemCache(ignite,CU.ATOMICS_CACHE_NAME);  checkImplicitTxSuccess(atomicsCache);  checkStartTxSuccess(atomicsCache);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.217 -0400",hash_original_method="E4779B97B7B6580D9606A600914DFEFD",hash_generated_method="1E534746B10F4070E1DE8FE6469F054B") public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public TaskResourceRep hostDatacenterChange(URI hostId,URI clusterId,URI datacenterId,boolean isVcenter,URI eventId){  return hostClusterChange(hostId,clusterId,datacenterId,isVcenter,eventId);}  }
class C{  public InputStream put(final URLConnection connection,final boolean flushCacheOnClose){  final String key=getKey(connection);  if (key == null)   return null;  if (!isCacheable((HttpURLConnection)connection))   try {    cache.remove(key);    return null;  } catch (  IOException e) {    return null;  }  String etag=connection.getHeaderField(HEADER_ETAG);  if (etag == null || etag.length() == 0)   return null;  Editor editor;  try {    editor=cache.edit(key);  } catch (  IOException e) {    return null;  }  if (editor == null)   return null;  try {    editor.set(ETAG,etag);  } catch (  IOException e) {    try {      editor.abort();    } catch (    IOException ignored) {    }    return null;  }  InputStream input;  try {    input=connection.getInputStream();    if (!(input instanceof InflaterInputStream) && ENCODING_GZIP.equals(connection.getHeaderField(HEADER_CONTENT_ENCODING)))     input=new GZIPInputStream(input);  } catch (  IOException e) {    return null;  }  OutputStream output;  try {    output=editor.newOutputStream(BODY);  } catch (  IOException e) {    return null;  }  if (output != null)   return new CacheStream(input,output,editor,this,flushCacheOnClose); else   return null;}  }
class C{  public DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat){  this(defaultFormat,null);}  }
class C{  private static DataSet loadG(Reader reader,double sparseRatio,int vectorLength,boolean classification) throws IOException {  StringBuilder processBuffer=new StringBuilder(20);  StringBuilder charBuffer=new StringBuilder(1024);  char[] buffer=new char[1024];  List<SparseVector> sparceVecs=new ArrayList<SparseVector>();  List<Double> labelVals=new DoubleList();  Map<Double,Integer> possibleCats=new HashMap<Double,Integer>();  int maxLen=1;  STATE state=STATE.INITIAL;  int position=0;  SparseVector tempVec=new SparseVector(1,1);  int indexProcessing=-1;  while (true) {    while (charBuffer.length() - position <= 1) {      charBuffer.delete(0,position);      position=0;      int read=reader.read(buffer);      if (read < 0)       break;      charBuffer.append(buffer,0,read);    }    if (charBuffer.length() - position == 0) {      if (state == STATE.LABEL) {        double label=Double.parseDouble(processBuffer.toString());        if (!possibleCats.containsKey(label) && classification)         possibleCats.put(label,possibleCats.size());        labelVals.add(label);        sparceVecs.add(new SparseVector(maxLen,0));      } else       if (state == STATE.WHITESPACE_AFTER_LABEL) {        sparceVecs.add(new SparseVector(maxLen,0));      } else       if (state == STATE.FEATURE_VALUE || state == STATE.WHITESPACE_AFTER_FEATURE) {        double value=StringUtils.parseDouble(processBuffer,0,processBuffer.length());        processBuffer.delete(0,processBuffer.length());        maxLen=Math.max(maxLen,indexProcessing + 1);        tempVec.setLength(maxLen);        if (value != 0)         tempVec.set(indexProcessing,value);        sparceVecs.add(tempVec.clone());      } else       if (state == STATE.NEWLINE) {        break;      } else       throw new RuntimeException();      break;    }    char ch=charBuffer.charAt(position);switch (state) {case INITIAL:      state=STATE.LABEL;    break;case LABEL:  if (Character.isDigit(ch) || ch == '.' || ch == 'E' || ch == 'e' || ch == '-' || ch == '+') {    processBuffer.append(ch);    position++;  } else   if (Character.isWhitespace(ch)) {    double label=Double.parseDouble(processBuffer.toString());    if (!possibleCats.containsKey(label) && classification)     possibleCats.put(label,possibleCats.size());    labelVals.add(label);    processBuffer.delete(0,processBuffer.length());    if (ch == '\n' || ch == '\r') {      tempVec.zeroOut();      sparceVecs.add(new SparseVector(maxLen,0));      state=STATE.NEWLINE;    } else {      tempVec.zeroOut();      state=STATE.WHITESPACE_AFTER_LABEL;    }  } else   throw new RuntimeException("Invalid LIBSVM file");break;case WHITESPACE_AFTER_LABEL:if (Character.isDigit(ch)) {state=STATE.FEATURE_INDEX;} else if (Character.isWhitespace(ch)) {if (ch == '\n' || ch == '\r') {  tempVec.zeroOut();  sparceVecs.add(new SparseVector(maxLen,0));  state=STATE.NEWLINE;} else position++;} else throw new RuntimeException();break;case FEATURE_INDEX:if (Character.isDigit(ch)) {processBuffer.append(ch);position++;} else if (ch == ':') {indexProcessing=StringUtils.parseInt(processBuffer,0,processBuffer.length()) - 1;processBuffer.delete(0,processBuffer.length());state=STATE.FEATURE_VALUE;position++;} else throw new RuntimeException();break;case FEATURE_VALUE:if (Character.isDigit(ch) || ch == '.' || ch == 'E' || ch == 'e' || ch == '-' || ch == '+') {processBuffer.append(ch);position++;} else {double value=StringUtils.parseDouble(processBuffer,0,processBuffer.length());processBuffer.delete(0,processBuffer.length());maxLen=Math.max(maxLen,indexProcessing + 1);tempVec.setLength(maxLen);if (value != 0) tempVec.set(indexProcessing,value);if (Character.isWhitespace(ch)) state=STATE.WHITESPACE_AFTER_FEATURE; else throw new RuntimeException();}break;case WHITESPACE_AFTER_FEATURE:if (Character.isDigit(ch)) state=STATE.FEATURE_INDEX; else if (Character.isWhitespace(ch)) {if (ch == '\n' || ch == '\r') {sparceVecs.add(tempVec.clone());tempVec.zeroOut();state=STATE.NEWLINE;} else position++;}break;case NEWLINE:if (ch == '\n' || ch == '\r') position++; else {state=STATE.LABEL;}break;}}if (vectorLength > 0) if (maxLen > vectorLength) throw new RuntimeException("Length given was " + vectorLength + ", but observed length was "+ maxLen); else maxLen=vectorLength;if (classification) {CategoricalData predicting=new CategoricalData(possibleCats.size());List<Double> allCatKeys=new DoubleList(possibleCats.keySet());Collections.sort(allCatKeys);for (int i=0; i < allCatKeys.size(); i++) possibleCats.put(allCatKeys.get(i),i);ClassificationDataSet cds=new ClassificationDataSet(maxLen,new CategoricalData[0],predicting);for (int i=0; i < labelVals.size(); i++) {SparseVector vec=sparceVecs.get(i);vec.setLength(maxLen);cds.addDataPoint(vec,new int[0],possibleCats.get(labelVals.get(i)));}cds.applyTransform(new DenseSparceTransform(sparseRatio));return cds;} else {RegressionDataSet rds=new RegressionDataSet(maxLen,new CategoricalData[0]);for (int i=0; i < sparceVecs.size(); i++) {SparseVector sv=sparceVecs.get(i);sv.setLength(maxLen);rds.addDataPoint(sv,new int[0],labelVals.get(i));}rds.applyTransform(new DenseSparceTransform(sparseRatio));return rds;}}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  public TriangleMesh computeVertexNormals(){  for (  Vertex v : vertices.values()) {    v.clearNormal();  }  for (  Face f : faces) {    f.a.addFaceNormal(f.normal);    f.b.addFaceNormal(f.normal);    f.c.addFaceNormal(f.normal);  }  for (  Vertex v : vertices.values()) {    v.computeNormal();  }  return this;}  }
class C{  public static Instruction findInstruction(final Function function,final IInstruction searchInstruction){  Preconditions.checkNotNull(function,"IE02034: Function argument can not be null");  Preconditions.checkNotNull(searchInstruction,"IE02052: Instruction argument can not be null");  for (  final BasicBlock block : function.getGraph().getNodes()) {    for (    final Instruction instruction : block.getInstructions()) {      if (instruction.getNative() == searchInstruction) {        return instruction;      }    }  }  throw new IllegalStateException("IE01274: Could not determine what instruction could not be translated");}  }
class C{  public void execute(){  if (prepared.isQuery()) {    prepared.query(0);  } else {    prepared.update();  }}  }
class C{  public void testDivideBigDecimalScaleRoundingModeHALF_UP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=-51;  String b="74723342238476237823787879183470";  int bScale=45;  int newScale=3;  RoundingMode rm=RoundingMode.HALF_UP;  String c="50000260373164286401361913262100972218038099522752460421" + "05959924024355721031761947728703598332749334086415670525" + "3761096961.670";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public final List<Integer> executeIntListQuery(String sql) throws AdeException {  return SpecialSqlQueries.executeIntListQuery(sql,m_connection);}  }
class C{  protected boolean internalPrevious() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public UnsignedByte subtract(int decrement){  return valueOf(getValue() - decrement);}  }
class C{  private void logMissingRegions(PartitionedRegion region){  String namesOfMissing="";  if (!missingChildren.isEmpty()) {    namesOfMissing=String.join("\n\t",missingChildren);  }  String multipleChildren;  String singular="";  String plural="s";  multipleChildren=missingChildren.size() > 1 ? plural : singular;  namesOfMissing=String.join("\n\t",multipleChildren,namesOfMissing);  logger.warn(LocalizedMessage.create(LocalizedStrings.ColocationLogger_PERSISTENT_DATA_RECOVERY_OF_REGION_PREVENTED_BY_OFFLINE_COLOCATED_CHILDREN,new Object[]{region.getFullPath(),namesOfMissing}));}  }
class C{  final public WritableRaster createCompatibleWritableRaster(int w,int h){  if ((w <= 0) || (h <= 0)) {    throw new IllegalArgumentException("Width (" + w + ") and height ("+ h+ ") cannot be <= 0");  }  int[] bandmasks;  if (supportsAlpha) {    bandmasks=new int[4];    bandmasks[3]=alpha_mask;  } else {    bandmasks=new int[3];  }  bandmasks[0]=red_mask;  bandmasks[1]=green_mask;  bandmasks[2]=blue_mask;  if (pixel_bits > 16) {    return Raster.createPackedRaster(DataBuffer.TYPE_INT,w,h,bandmasks,null);  } else   if (pixel_bits > 8) {    return Raster.createPackedRaster(DataBuffer.TYPE_USHORT,w,h,bandmasks,null);  } else {    return Raster.createPackedRaster(DataBuffer.TYPE_BYTE,w,h,bandmasks,null);  }}  }
class C{  protected boolean considerEdit(TextEdit edit){  return true;}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean isDefault(){  return isDefault;}  }
class C{  public Point2D forward(double lat,double lon,Point2D p,boolean isRadian){  if (p == null) {    p=new Point2D.Double();  }  _forward(lat,lon,p,isRadian);  return p;}  }
class C{  public static int charToGsmExtended(char c){  int ret;  ret=sCharsToShiftTables[0].get(c,-1);  if (ret == -1) {    return sCharsToGsmTables[0].get(' ',' ');  }  return ret;}  }
class C{  static Pointer allocate(int capacity){  return getPointerFromAddress(SysCall.sysCall.sysCalloc(capacity));}  }
class C{  public Ceil(){  super(Number.class,Number.class);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  SerializationHandler rhandler=transformer.getSerializationHandler();  XPathContext xctxt=transformer.getXPathContext();  int sourceNode=xctxt.getCurrentNode();  String nodeName=m_name_avt == null ? null : m_name_avt.evaluate(xctxt,sourceNode,this);  String prefix=null;  String nodeNamespace="";  if ((nodeName != null) && (!m_name_avt.isSimple()) && (!XML11Char.isXML11ValidQName(nodeName))) {    transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_NAME,nodeName});    nodeName=null;  } else   if (nodeName != null) {    prefix=QName.getPrefixPart(nodeName);    if (null != m_namespace_avt) {      nodeNamespace=m_namespace_avt.evaluate(xctxt,sourceNode,this);      if (null == nodeNamespace || (prefix != null && prefix.length() > 0 && nodeNamespace.length() == 0))       transformer.getMsgMgr().error(this,XSLTErrorResources.ER_NULL_URI_NAMESPACE); else {        prefix=resolvePrefix(rhandler,prefix,nodeNamespace);        if (null == prefix)         prefix="";        if (prefix.length() > 0)         nodeName=(prefix + ":" + QName.getLocalPart(nodeName)); else         nodeName=QName.getLocalPart(nodeName);      }    } else {      try {        nodeNamespace=getNamespaceForPrefix(prefix);        if ((null == nodeNamespace) && (prefix.length() == 0))         nodeNamespace=""; else         if (null == nodeNamespace) {          transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_COULD_NOT_RESOLVE_PREFIX,new Object[]{prefix});          nodeName=null;        }      } catch (      Exception ex) {        transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_COULD_NOT_RESOLVE_PREFIX,new Object[]{prefix});        nodeName=null;      }    }  }  constructNode(nodeName,prefix,nodeNamespace,transformer);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.LOGICAL_OR_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)newValue);  return;case ExpressionsPackage.LOGICAL_OR_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void unificarDescriptorUnidadDocRe(DescriptorVO descriptor,String[] idsDescriptores){  List listaUdocs=unidadDocumentalREDBEntity.getUdocsByInfoDescriptor(idsDescriptores);  if (!ListUtils.isEmpty(listaUdocs)) {    Iterator it=listaUdocs.listIterator();    while (it.hasNext()) {      transferencias.vos.UnidadDocumentalVO unidadDocumentalVO=(transferencias.vos.UnidadDocumentalVO)it.next();      ValoresFicha valoresFicha=ValoresFicha.getInstance(getServiceSession(),unidadDocumentalVO.getId(),TipoFicha.FICHA_UDOCRE,unidadDocumentalVO);      Map mapValoresDescripcion=valoresFicha.getListaValores();      boolean conCambios=false;      if (unidadDocumentalVO != null && unidadDocumentalVO.getExtraInfo() != null) {        if (unidadDocumentalVO.getExtraInfo().getProductor() != null && unidadDocumentalVO.getExtraInfo().getProductor().getId() != null) {          String id=unidadDocumentalVO.getExtraInfo().getProductor().getId();          if (ArrayUtils.contains(idsDescriptores,id)) {            conCambios=true;            unidadDocumentalVO.getExtraInfo().getProductor().setId(descriptor.getId());            unidadDocumentalVO.getExtraInfo().getProductor().setNombre(descriptor.getNombre());          }        }        conCambios=modificarValores(conCambios,mapValoresDescripcion,descriptor,idsDescriptores);        if (conCambios) {          unidadDocumentalREDBEntity.updateXmlInfo(unidadDocumentalVO,unidadDocumentalVO.asXMLWithValores(valoresFicha,null));        }      }    }  }}  }
class C{  public JDBFileFilter(String[] filters){  this(filters,null);}  }
class C{  @Override public void run(){  System.out.printf("\nthread started (%d): %s\n",startingPoints.size(),this);  while (true) {    Counter<String> wts;    int sz;synchronized (startingPoints) {      sz=startingPoints.size();      wts=startingPoints.poll();    }    if (wts == null)     break;    int ptI=nInitialStartingPoints - sz;    List<Double> v=new ArrayList<Double>(wts.values());    Collections.sort(v);    v.add(SEED * 1.0);    long threadSeed=Arrays.hashCode(v.toArray());    this.random=new Random(threadSeed);    System.out.printf("\npoint %d - initial wts: %s",ptI,wts.toString());    System.out.printf("\npoint %d - seed: %d\n",ptI,threadSeed);    BatchOptimizer opt=BatchOptimizerFactory.factory(optStr,ptI,this);    System.err.println("using: " + opt.toString());    removeWts(wts,fixedWts);    Counter<String> optWts=opt.optimize(wts);    if (fixedWts != null)     optWts.addAll(fixedWts);    Counter<String> newWts;    if (opt.doNormalization()) {      System.err.printf("Normalizing weights\n");      newWts=normalize(optWts);    } else {      System.err.printf("Saving unnormalized weights\n");      newWts=optWts;    }    removeWts(newWts,fixedWts);    double evalAt=evalAtPoint(nbest,newWts,emetric);    double mcmcEval=mcmcTightExpectedEval(nbest,newWts,emetric);    double mcmcEval2=mcmcTightExpectedEval(nbest,bestWts,emetric,false);    double obj=(mcmcObj ? mcmcEval : -evalAt);    updateBest(newWts,-evalAt);    System.out.printf("\npoint %d - final wts: %s",ptI,newWts.toString());    System.out.printf("\npoint %d - apply: %e E(apply): %e obj: %e best obj: %e (l1: %f)\n\n",ptI,evalAt,mcmcEval2,obj,bestObj,l1norm(newWts));  }}  }
class C{  private PKLAssetTypeEnum(String pklAssetType){  this.assetType=pklAssetType;}  }
class C{  public int recordLength(){  return (name.length() + 10 + alg.length()+ 8+ 18+ 4+ 8);}  }
class C{  public LibertyStandaloneLocalConfigurationCapability(){  super();  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(GeneralPropertySet.RUNTIME_ARGS,Boolean.FALSE);}  }
class C{  protected void addButtonListener(){  ApplicationInsightsAddDialog dialog=new ApplicationInsightsAddDialog(getShell());  dialog.open();  tableViewer.refresh();}  }
class C{  @UiThreadTest @SmallTest public void testCancel() throws Exception {  mAnimator.cancel();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.935 -0500",hash_original_method="7A09CE165EA90677044F14874DA9275F",hash_generated_method="90769E5544110EF09B509FA6D9318E52") public void sendDtmf(int code,Message result){synchronized (this) {    AudioGroup audioGroup=getAudioGroup();    if ((audioGroup != null) && (mSipSession != null) && (SipSession.State.IN_CALL == getState())) {      Log.v(TAG,"send DTMF: " + code);      audioGroup.sendDtmf(code);    }    if (result != null)     result.sendToTarget();  }}  }
class C{  public static void main(String[] args) throws Exception {  Options options=new Options();  Option helpOpts=OptionBuilder.withArgName("help").withDescription("show this help message").create("help");  Option webGraphOpts=OptionBuilder.withArgName("webgraphdb").hasArg().withDescription("the webgraphdb to use").create("webgraphdb");  Option urlOpts=OptionBuilder.withArgName("url").hasOptionalArg().withDescription("the url to dump").create("url");  options.addOption(helpOpts);  options.addOption(webGraphOpts);  options.addOption(urlOpts);  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("help") || !line.hasOption("webgraphdb") || !line.hasOption("url")) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("WebGraphReader",options);      return;    }    String webGraphDb=line.getOptionValue("webgraphdb");    String url=line.getOptionValue("url");    LoopReader reader=new LoopReader(NutchConfiguration.create());    reader.dumpUrl(new Path(webGraphDb),url);    return;  } catch (  Exception e) {    e.printStackTrace();    return;  }}  }
class C{  public Property hourOfDay(){  return new Property(this,getChronology().hourOfDay());}  }
class C{  public void addHistory(HistoryElement element){  final String expression=element.expression;  if (history.containsKey(expression)) {    history.remove(expression);  }  history.put(expression,element);}  }
class C{  public Builder deleteAddresses(){  deleteFields.add("addresses");  return this;}  }
class C{  protected final void SET_EXCEPTION_OBJECT(Instruction s){  burs.ir.stackManager.forceFrameAllocation();  int offset=burs.ir.stackManager.allocateSpaceForCaughtException();  Register FP=regpool.getPhysicalRegisterSet().asPPC().getFP();  LocationOperand loc=new LocationOperand(-offset);  RegisterOperand obj=(RegisterOperand)CacheOp.getRef(s);  EMIT(MIR_Store.mutate(s,PPC_STAddr,obj,A(FP),IC(offset),loc,TG()));}  }
class C{  public GreaterThan(){  super(Boolean.class,Number.class,Number.class);}  }
class C{  public boolean isReceiving(){  return receiving;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:12.571 -0500",hash_original_method="A869E13906426823448DC988F0CB5F8A",hash_generated_method="9FF66943C1E5D28AD3C9FEE56CFCB6BF") public CertificateMessage(X509Certificate[] certs){  if (certs == null) {    this.certs=new X509Certificate[0];    encoded_certs=new byte[0][0];    length=3;    return;  }  this.certs=certs;  if (encoded_certs == null) {    encoded_certs=new byte[certs.length][];    for (int i=0; i < certs.length; i++) {      try {        encoded_certs[i]=certs[i].getEncoded();      } catch (      CertificateEncodingException e) {        fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);      }    }  }  length=3 + 3 * encoded_certs.length;  for (int i=0; i < encoded_certs.length; i++) {    length+=encoded_certs[i].length;  }}  }
class C{  public Element(){  lbCntFidxes=new HashMap();  cpFeatures=new ArrayList();}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mYAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[2];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    pts[1]=l.getLimit();    mTrans.pointValuesToPixel(pts);    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setTypeface(l.getTypeface());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);      float xOffset=Utils.convertDpToPixel(4f) + l.getXOffset();      float yOffset=l.getLineWidth() + labelLineHeight + l.getYOffset();      final LimitLine.LimitLabelPosition position=l.getLabelPosition();      if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] + yOffset,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.contentLeft() + xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] + yOffset,mLimitLinePaint);      }    }  }}  }
class C{  private void increaseMultiprocessCounterInOtherProcess(){  MultiProcessService.write(this);}  }
class C{  @Override public synchronized String toString(){  StringBuilder result;  result=new StringBuilder();  result.append("[");  for (  Date date : m_Ordered) {    if (result.length() > 1)     result.append(", ");    result.append(date);    result.append(":");    result.append(m_Suffixes.get(date));    result.append("=");    result.append(m_Results.get(date));  }  result.append("]");  return result.toString();}  }
class C{  private DBMSEvent buildDBMSEvent(ArrayList<DBMSData> dataArray){  DBMSEvent ev;  if (connection instanceof OracleDatabase) {    OracleEventId evId=new OracleEventId(eventId);    if (evId.isValid())     ev=new DBMSEvent(evId.toString(),dataArray,new Timestamp(System.currentTimeMillis())); else     ev=new DBMSEvent("ora:" + eventId,dataArray,new Timestamp(System.currentTimeMillis()));  } else   ev=new DBMSEvent(eventId,dataArray,new Timestamp(System.currentTimeMillis()));  return ev;}  }
class C{  public void inc(T sample){  addSample(sample,1);}  }
class C{  @SuppressWarnings("unchecked") public boolean containsKey(Object key){  Segment<K,V> s;  HashEntry<K,V>[] tab;  int h=hash(key.hashCode());  long u=(((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;  if ((s=(Segment<K,V>)UNSAFE.getObjectVolatile(segments,u)) != null && (tab=s.table) != null) {    for (HashEntry<K,V> e=(HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE); e != null; e=e.next) {      K k;      if ((k=e.key) == key || (e.hash == h && key.equals(k)))       return true;    }  }  return false;}  }
class C{  public void testSetBitTopPositive(){  byte aBytes[]={1,-128,56,100,-15,35,26};  int aSign=1;  int number=63;  byte rBytes[]={0,-128,1,-128,56,100,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static double chiSquare2by2(int k,int n,int r,int m){  int[][] cg={{k,r - k},{m - k,n - (k + (r - k) + (m - k))}};  int[] cgr={r,n - r};  int[] cgc={m,n - m};  double total=0.0;  for (int i=0; i < 2; i++) {    for (int j=0; j < 2; j++) {      double exp=(double)cgr[i] * cgc[j] / n;      total+=(cg[i][j] - exp) * (cg[i][j] - exp) / exp;    }  }  return total;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Timestamp toTimestamp(LocalDateTime data){  return Timestamp.valueOf(data);}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  private void testLoading(boolean isImmediate,int outcome,int dhInteraction){  FakeDraweeController controller=new FakeDraweeController(mDeferredReleaser,mUiThreadExecutor,mDataSourceSupplier,"id2",mCallerContext);  FakeImage image=FakeImage.create(mock(Drawable.class),mock(FakeImageInfo.class));  SimpleDataSource<FakeImage> dataSource=SimpleDataSource.create();  when(mDataSourceSupplier.get()).thenReturn(dataSource);  if (isImmediate) {    finish(dataSource,image,outcome);  }  controller.setHierarchy(mDraweeHierarchy);  controller.onAttach();  if (!isImmediate) {    finish(dataSource,image,outcome);  }  verify(mDataSourceSupplier).get();  verifyDhInteraction(dhInteraction,image.getDrawable(),isImmediate);  assertTrue(dataSource.isClosed());  controller.onDetach();  assertTrue(image.isOpened() == image.isClosed());  verifyNoMoreInteractions(mDataSourceSupplier);}  }
class C{  public void testExportImportOne_kml(){  testExportImportOne(TrackFileFormat.KML);}  }
class C{  public static void bindTabWithData(BottomNavigationItem bottomNavigationItem,BottomNavigationTab bottomNavigationTab,BottomNavigationBar bottomNavigationBar){  Context context=bottomNavigationBar.getContext();  bottomNavigationTab.setLabel(bottomNavigationItem.getTitle(context));  bottomNavigationTab.setIcon(bottomNavigationItem.getIcon(context));  int activeColor=bottomNavigationItem.getActiveColor(context);  int inActiveColor=bottomNavigationItem.getInActiveColor(context);  if (activeColor != -1) {    bottomNavigationTab.setActiveColor(activeColor);  } else {    bottomNavigationTab.setActiveColor(bottomNavigationBar.getActiveColor());  }  if (inActiveColor != -1) {    bottomNavigationTab.setInactiveColor(inActiveColor);  } else {    bottomNavigationTab.setInactiveColor(bottomNavigationBar.getInActiveColor());  }  if (bottomNavigationItem.isInActiveIconAvailable()) {    Drawable inactiveDrawable=bottomNavigationItem.getInactiveIcon(context);    if (inactiveDrawable != null) {      bottomNavigationTab.setInactiveIcon(inactiveDrawable);    }  }  bottomNavigationTab.setItemBackgroundColor(bottomNavigationBar.getBackgroundColor());  setBadgeForTab(bottomNavigationItem.getBadgeItem(),bottomNavigationTab);}  }
class C{  public SerialParameters(Properties props,String prefix){  if (prefix == null) {    prefix="";  }  setPortName(props.getProperty(prefix + "portName",""));  setBaudRate(props.getProperty(prefix + "baudRate","" + 9600));  setFlowControlIn(props.getProperty(prefix + "flowControlIn","" + AbstractSerialConnection.FLOW_CONTROL_DISABLED));  setFlowControlOut(props.getProperty(prefix + "flowControlOut","" + AbstractSerialConnection.FLOW_CONTROL_DISABLED));  setParity(props.getProperty(prefix + "parity","" + AbstractSerialConnection.NO_PARITY));  setDatabits(props.getProperty(prefix + "databits","8"));  setStopbits(props.getProperty(prefix + "stopbits","" + AbstractSerialConnection.ONE_STOP_BIT));  setEncoding(props.getProperty(prefix + "encoding",Modbus.DEFAULT_SERIAL_ENCODING));  setEcho("true".equals(props.getProperty(prefix + "echo")));}  }
class C{  public InputStream openInputStream(){  return new TempFileInputStream();}  }
class C{  public Matrix2f(){  mMat=new float[4];  loadIdentity();}  }
class C{  public void test_CreateDestroy_ticket_948_00() throws Exception {  final String namespace=getName();  final Properties properties1=new Properties(getProperties());  properties1.setProperty(AbstractTripleStore.Options.VOCABULARY_CLASS,BSBMVocabulary.class.getName());  Journal jnl=null;  try {    jnl=new Journal(getProperties());    assertKBNotFound(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new CreateKBTask(namespace,properties1)).get();    assertKBExists(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new DestroyKBTask(namespace)).get();    assertKBNotFound(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new CreateKBTask(namespace,properties1)).get();    assertKBExists(jnl,namespace);  }  finally {    if (jnl != null)     jnl.destroy();  }}  }
class C{  public static void closeTag(boolean close,boolean endLine){  if (close)   Log.write("/");  Log.write(">");  if (endLine)   Log.writeln();}  }
class C{  public void addNotification(final Notification notification){  this.notifications.add(notification);}  }
class C{  @Override public SSLEngineResult unwrap(ByteBuffer src,ByteBuffer[] dsts,int offset,int length) throws SSLException {  if (engine_was_shutteddown) {    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);  }  if ((src == null) || (dsts == null)) {    throw new IllegalStateException("Some of the input parameters are null");  }  if (!handshake_started) {    beginHandshake();  }  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);  }  if (src.remaining() < recordProtocol.getMinRecordSize()) {    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_UNDERFLOW,getHandshakeStatus(),0,0);  }  try {    src.mark();    int capacity=0;    for (int i=offset; i < offset + length; i++) {      if (dsts[i] == null) {        throw new IllegalStateException("Some of the input parameters are null");      }      if (dsts[i].isReadOnly()) {        throw new ReadOnlyBufferException();      }      capacity+=dsts[i].remaining();    }    if (capacity < recordProtocol.getDataSize(src.remaining())) {      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,getHandshakeStatus(),0,0);    }    recProtIS.setSourceBuffer(src);    int type=recordProtocol.unwrap();switch (type) {case ContentType.HANDSHAKE:case ContentType.CHANGE_CIPHER_SPEC:      if (handshakeProtocol.getStatus().equals(SSLEngineResult.HandshakeStatus.FINISHED)) {        session=recordProtocol.getSession();      }    break;case ContentType.APPLICATION_DATA:  break;case ContentType.ALERT:if (alertProtocol.isFatalAlert()) {  alertProtocol.setProcessed();  if (session != null) {    session.invalidate();  }  String description="Fatal alert received " + alertProtocol.getAlertDescription();  shutdown();  throw new SSLException(description);} else {  if (logger != null) {    logger.println("Warning allert has been received: " + alertProtocol.getAlertDescription());  }switch (alertProtocol.getDescriptionCode()) {case AlertProtocol.CLOSE_NOTIFY:    alertProtocol.setProcessed();  close_notify_was_received=true;if (!close_notify_was_sent) {  closeOutbound();  closeInbound();} else {  closeInbound();  shutdown();}break;case AlertProtocol.NO_RENEGOTIATION:alertProtocol.setProcessed();if (session == null) {throw new AlertException(AlertProtocol.HANDSHAKE_FAILURE,new SSLHandshakeException("Received no_renegotiation " + "during the initial handshake"));} else {handshakeProtocol.stop();}break;default :alertProtocol.setProcessed();}}break;}return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),recProtIS.consumed(),appData.placeTo(dsts,offset,length));} catch (BufferUnderflowException e) {src.reset();return new SSLEngineResult(SSLEngineResult.Status.BUFFER_UNDERFLOW,getHandshakeStatus(),0,0);}catch (AlertException e) {alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());engine_was_closed=true;src.reset();if (session != null) {session.invalidate();}throw e.getReason();}catch (SSLException e) {throw e;}catch (IOException e) {alertProtocol.alert(AlertProtocol.FATAL,AlertProtocol.INTERNAL_ERROR);engine_was_closed=true;throw new SSLException(e.getMessage());}}  }
class C{  @SuppressWarnings("unchecked") private void launchActivity(){  if (activity != null && ActivityRunMode.SPECIFICATION.equals(activityRunMode))   return;  String targetPackage=instrumentation.getTargetContext().getPackageName();  Intent intent=getLaunchIntent(targetPackage,activityClass,bundleCreator);  activity=instrumentation.startActivitySync(intent);  instrumentation.waitForIdleSync();}  }
class C{  public static <T>boolean noneSatisfy(Iterable<T> iterable,Predicate<? super T> predicate){  if (iterable instanceof RichIterable) {    return ((RichIterable<T>)iterable).noneSatisfy(predicate);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.noneSatisfy((ArrayList<T>)iterable,predicate);  }  if (iterable instanceof RandomAccess) {    return RandomAccessListIterate.noneSatisfy((List<T>)iterable,predicate);  }  if (iterable != null) {    return IterableIterate.noneSatisfy(iterable,predicate);  }  throw new IllegalArgumentException("Cannot perform an allSatisfy on null");}  }
class C{  private void paintDecreaseButtonApart(Graphics2D g,int width,int height){  paintArrowButton(g,width / 2.0 - 4,height / 2.0 - 3);}  }
class C{  public static String convertFilePathToName(Path file){  return Files.getNameWithoutExtension(file.getFileName().toString());}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  DTMIterator nl=m_arg0.asIterator(xctxt,xctxt.getCurrentNode());  int i=nl.getLength();  nl.detach();  return new XNumber((double)i);}  }
class C{  @Override protected void validate(){  failIf(this.value <= 0,"Unreasonable gcspy tilesize");}  }
class C{  public OMArc(double latPoint,double lonPoint,int w,int h,double s,double e){  this(latPoint,lonPoint,0,0,w,h,s,e);}  }
