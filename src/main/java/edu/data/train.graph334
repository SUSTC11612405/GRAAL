class C{  public NoLoadScriptSecurity(String scriptType){  se=new SecurityException(Messages.formatMessage(ERROR_NO_SCRIPT_OF_TYPE_ALLOWED,new Object[]{scriptType}));}  }
class C{  public boolean isPinRequiredForGC(Delegator delegator){  try {    GenericValue giftCertSettings=getGiftCertSettingFromStore(delegator);    if (giftCertSettings != null) {      if ("Y".equals(giftCertSettings.getString("requirePinCode"))) {        return true;      } else {        return false;      }    } else {      Debug.logWarning("No product store gift certificate settings found for store [" + getProductStoreId() + "]",module);      return true;    }  } catch (  GenericEntityException ex) {    Debug.logError("Error checking if store requires pin number for GC: " + ex.getMessage(),module);    return true;  }}  }
class C{  void start(){  this.running=true;  Thread thread=new Thread(this,"IceConnector@" + hashCode());  thread.setDaemon(true);  thread.start();}  }
class C{  protected Table(int nrows,int ncols,Class tupleType){  m_listeners=new CopyOnWriteArrayList();  m_columns=new ArrayList(ncols);  m_names=new ArrayList(ncols);  m_rows=new RowManager(this);  m_entries=new HashMap(ncols + 5);  m_tuples=new TupleManager(this,null,tupleType);  if (nrows > 0)   addRows(nrows);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final boolean isPackagePrivate(){  return !isPrivate() && !isPublic() && !isProtected();}  }
class C{  public static boolean isCharCJK(final char c){  Character.UnicodeBlock unicodeBlock=Character.UnicodeBlock.of(c);  return (unicodeBlock == Character.UnicodeBlock.HIRAGANA) || (unicodeBlock == Character.UnicodeBlock.KATAKANA) || (unicodeBlock == Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS)|| (unicodeBlock == Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO)|| (unicodeBlock == Character.UnicodeBlock.HANGUL_JAMO)|| (unicodeBlock == Character.UnicodeBlock.HANGUL_SYLLABLES)|| (unicodeBlock == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS)|| (unicodeBlock == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A)|| (unicodeBlock == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B)|| (unicodeBlock == Character.UnicodeBlock.CJK_COMPATIBILITY_FORMS)|| (unicodeBlock == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS)|| (unicodeBlock == Character.UnicodeBlock.CJK_RADICALS_SUPPLEMENT)|| (unicodeBlock == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION)|| (unicodeBlock == Character.UnicodeBlock.ENCLOSED_CJK_LETTERS_AND_MONTHS)|| (unicodeBlock == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS && c < 0xFF61);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  @Override protected final boolean canCompact(){  return rw;}  }
class C{  public List<TokenRange> describeRing(String keyspace) throws InvalidRequestException {  return describeRing(keyspace,false);}  }
class C{  private ByteBuffer ensureBuffer(int size,ByteBuffer buffer,WritableByteChannel output) throws IOException {  if (buffer.remaining() >= size) {    return buffer;  }  flushBuffer(buffer,output);  if (buffer.remaining() >= size) {    return buffer;  }  return ByteBuffer.allocateDirect(Math.max(buffer.capacity() << 1,buffer.capacity() + size));}  }
class C{  protected double computeDetailThreshold(){  double detailThreshold=20;  double rangeDetailThreshold=40;  detailThreshold+=this.getDetailHint() * rangeDetailThreshold;  return detailThreshold;}  }
class C{  public void transform(Source source,Result outputTarget) throws TransformerException {  createResultContentHandler(outputTarget);  if ((source instanceof StreamSource && source.getSystemId() == null && ((StreamSource)source).getInputStream() == null && ((StreamSource)source).getReader() == null) || (source instanceof SAXSource && ((SAXSource)source).getInputSource() == null && ((SAXSource)source).getXMLReader() == null) || (source instanceof DOMSource && ((DOMSource)source).getNode() == null)) {    try {      DocumentBuilderFactory builderF=DocumentBuilderFactory.newInstance();      DocumentBuilder builder=builderF.newDocumentBuilder();      String systemID=source.getSystemId();      source=new DOMSource(builder.newDocument());      if (systemID != null) {        source.setSystemId(systemID);      }    } catch (    ParserConfigurationException e) {      throw new TransformerException(e.getMessage());    }  }  try {    if (source instanceof DOMSource) {      DOMSource dsource=(DOMSource)source;      m_systemID=dsource.getSystemId();      Node dNode=dsource.getNode();      if (null != dNode) {        try {          if (dNode.getNodeType() == Node.ATTRIBUTE_NODE)           this.startDocument();          try {            if (dNode.getNodeType() == Node.ATTRIBUTE_NODE) {              String data=dNode.getNodeValue();              char[] chars=data.toCharArray();              characters(chars,0,chars.length);            } else {              org.apache.xml.serializer.TreeWalker walker;              walker=new org.apache.xml.serializer.TreeWalker(this,m_systemID);              walker.traverse(dNode);            }          }  finally {            if (dNode.getNodeType() == Node.ATTRIBUTE_NODE)             this.endDocument();          }        } catch (        SAXException se) {          throw new TransformerException(se);        }        return;      } else {        String messageStr=XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_DOMSOURCE_INPUT,null);        throw new IllegalArgumentException(messageStr);      }    }    InputSource xmlSource=SAXSource.sourceToInputSource(source);    if (null == xmlSource) {      throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_TRANSFORM_SOURCE_TYPE,new Object[]{source.getClass().getName()}));    }    if (null != xmlSource.getSystemId())     m_systemID=xmlSource.getSystemId();    XMLReader reader=null;    boolean managedReader=false;    try {      if (source instanceof SAXSource) {        reader=((SAXSource)source).getXMLReader();      }      if (null == reader) {        try {          reader=XMLReaderManager.getInstance().getXMLReader();          managedReader=true;        } catch (        SAXException se) {          throw new TransformerException(se);        }      } else {        try {          reader.setFeature("http://xml.org/sax/features/namespace-prefixes",true);        } catch (        org.xml.sax.SAXException se) {        }      }      ContentHandler inputHandler=this;      reader.setContentHandler(inputHandler);      if (inputHandler instanceof org.xml.sax.DTDHandler)       reader.setDTDHandler((org.xml.sax.DTDHandler)inputHandler);      try {        if (inputHandler instanceof org.xml.sax.ext.LexicalHandler)         reader.setProperty("http://xml.org/sax/properties/lexical-handler",inputHandler);        if (inputHandler instanceof org.xml.sax.ext.DeclHandler)         reader.setProperty("http://xml.org/sax/properties/declaration-handler",inputHandler);      } catch (      org.xml.sax.SAXException se) {      }      try {        if (inputHandler instanceof org.xml.sax.ext.LexicalHandler)         reader.setProperty("http://xml.org/sax/handlers/LexicalHandler",inputHandler);        if (inputHandler instanceof org.xml.sax.ext.DeclHandler)         reader.setProperty("http://xml.org/sax/handlers/DeclHandler",inputHandler);      } catch (      org.xml.sax.SAXNotRecognizedException snre) {      }      reader.parse(xmlSource);    } catch (    org.apache.xml.utils.WrappedRuntimeException wre) {      Throwable throwable=wre.getException();      while (throwable instanceof org.apache.xml.utils.WrappedRuntimeException) {        throwable=((org.apache.xml.utils.WrappedRuntimeException)throwable).getException();      }      throw new TransformerException(wre.getException());    }catch (    org.xml.sax.SAXException se) {      throw new TransformerException(se);    }catch (    IOException ioe) {      throw new TransformerException(ioe);    } finally {      if (managedReader) {        XMLReaderManager.getInstance().releaseXMLReader(reader);      }    }  }  finally {    if (null != m_outputStream) {      try {        m_outputStream.close();      } catch (      IOException ioe) {      }      m_outputStream=null;    }  }}  }
class C{  private RuntimeState(int state,String stateName){  this.state=state;  this.stateName=stateName;}  }
class C{  private boolean containsDelimiter(String s){  return s.contains(MAIL_FIELD_DELIM) || s.contains(MAIL_RECORD_DELIM);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void status(final String[] args) throws Exception {  this.workingDirectory=IOUtils.tryGetCanonicalFileElseGetAbsoluteFile((File)getStopOptions(args).get(DIR));  System.out.println(getStatus());  System.exit(0);}  }
class C{  private InetSocketAddress nextInetSocketAddress() throws UnknownHostException {  InetSocketAddress result=new InetSocketAddress(socketAddresses[nextSocketAddressIndex++],socketPort);  if (nextSocketAddressIndex == socketAddresses.length) {    socketAddresses=null;    nextSocketAddressIndex=0;  }  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void onPut(){  cnt.incrementAndGet();  IgniteBiInClosure<K,V> lsnr=this.lsnr;  int delta=cnt.get() - max;  for (int i=0; i < delta && cnt.get() > max; i++) {    Entry<K,V> e=pollFirstEntry();    if (e == null)     return;    cnt.decrementAndGet();    if (lsnr != null)     lsnr.apply(e.getKey(),e.getValue());  }}  }
class C{  public PagedResultsControl(int pageSize,boolean criticality) throws IOException {  super(OID,criticality,null);  value=setEncodedValue(pageSize,EMPTY_COOKIE);}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  Assert.assertTrue(this.identity.length <= BYTES_32KB);  out.writeShort(this.identity.length);  out.write(this.identity);  out.writeInt(this.uniqueId);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.handlerTV=(TextView)this.findViewById(R.id.refresh_ui_handler_tv);  this.asyncTaskTV=(TextView)this.findViewById(R.id.refresh_ui_asynctask_tv);  this.runOnUiThreadTV=(TextView)this.findViewById(R.id.refresh_ui_run_on_ui_thread_tv);  this.postHandlerTV=(TextView)this.findViewById(R.id.refresh_ui_post_tv);}  }
class C{  public void warn(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg) throws TransformerException {  warn(srcLctr,styleNode,sourceNode,msg,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.667 -0500",hash_original_method="3200AD1B535820580583A49AC076B7CA",hash_generated_method="091B4BCA24C4E6AD35584E292DBA491D") public void removeHeader(String name){  if (qheaders != null)   qheaders.delete(name);}  }
class C{  protected void pushElements(ByteArrayWrapper key,List<byte[]> commandElems,int startIndex,int endIndex,Region keyRegion,ListDirection pushType,ExecutionHandlerContext context){  String indexKey=pushType == ListDirection.LEFT ? "head" : "tail";  String oppositeKey=pushType == ListDirection.RIGHT ? "head" : "tail";  Integer index=(Integer)keyRegion.get(indexKey);  Integer opp=(Integer)keyRegion.get(oppositeKey);  if (index != opp)   index+=pushType == ListDirection.LEFT ? -1 : 1;  for (int i=startIndex; i < endIndex; i++) {    byte[] value=commandElems.get(i);    ByteArrayWrapper wrapper=new ByteArrayWrapper(value);    Object oldValue;    do {      oldValue=keyRegion.putIfAbsent(index,wrapper);      if (oldValue != null) {        index+=pushType == ListDirection.LEFT ? -1 : 1;      }    } while (oldValue != null);    boolean indexSet=false;    do {      Integer existingIndex=(Integer)keyRegion.get(indexKey);      if ((pushType == ListDirection.RIGHT && existingIndex < index) || (pushType == ListDirection.LEFT && existingIndex > index))       indexSet=keyRegion.replace(indexKey,existingIndex,index); else       break;    } while (!indexSet);  }}  }
class C{  public CharSeq replaceFirst(String regex,String replacement){  return CharSeq.of(str.replaceFirst(regex,replacement));}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  public static Funnel<Long> longFunnel(){  return LongFunnel.INSTANCE;}  }
class C{  public void resetDocumentLocator(String publicid,String systemid){  thePublicid=publicid;  theSystemid=systemid;  theLastLine=theLastColumn=theCurrentLine=theCurrentColumn=0;}  }
class C{  public String fetchWeatherAlert(int cityId,int userId,String language,String units){  String cityFound;  String responseToUser;  try {    String completURL=BASEURL + FORECASTPATH + "?"+ getCityQuery(cityId + "")+ ALERTPARAMS.replace("@language@",language).replace("@units@",units)+ APIIDEND;    CloseableHttpClient client=HttpClientBuilder.create().setSSLHostnameVerifier(new NoopHostnameVerifier()).build();    HttpGet request=new HttpGet(completURL);    CloseableHttpResponse response=client.execute(request);    HttpEntity ht=response.getEntity();    BufferedHttpEntity buf=new BufferedHttpEntity(ht);    String responseString=EntityUtils.toString(buf,"UTF-8");    JSONObject jsonObject=new JSONObject(responseString);    BotLogger.info(LOGTAG,jsonObject.toString());    if (jsonObject.getInt("cod") == 200) {      cityFound=jsonObject.getJSONObject("city").getString("name") + " (" + jsonObject.getJSONObject("city").getString("country")+ ")";      saveRecentWeather(userId,cityFound,jsonObject.getJSONObject("city").getInt("id"));      responseToUser=String.format(LocalisationService.getInstance().getString("weatherAlert",language),cityFound,convertListOfForecastToString(jsonObject,language,units,false));    } else {      BotLogger.warn(LOGTAG,jsonObject.toString());      responseToUser=LocalisationService.getInstance().getString("cityNotFound",language);    }  } catch (  Exception e) {    BotLogger.error(LOGTAG,e);    responseToUser=LocalisationService.getInstance().getString("errorFetchingWeather",language);  }  return responseToUser;}  }
class C{  @ObjectiveCName("isConversationTonesEnabled") public boolean isConversationTonesEnabled(){  return modules.getSettingsModule().isConversationTonesEnabled();}  }
class C{  @Override protected void clearRequestBody(){  LOG.trace("enter PostMethod.clearRequestBody()");  params.clear();  super.clearRequestBody();}  }
class C{  public AlignmentTemplate(String fStr,String eStr,String aStr,boolean lazy) throws IOException {  init(fStr,eStr,aStr,lazy);}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeSequence clone=(NodeSequence)super.clone();  if (null != m_iter)   clone.m_iter=(DTMIterator)m_iter.clone();  if (m_cache != null) {    m_cache.increaseUseCount();  }  return clone;}  }
class C{  public DateHistogramBuilder interval(DateHistogramInterval interval){  this.interval=interval;  return this;}  }
class C{  public void addAnnotation(Annotation annotation){  String type=annotation.getTypeName();  Annotation[] annotations=getAnnotations();  for (int i=0; i < annotations.length; i++) {    if (annotations[i].getTypeName().equals(type)) {      annotations[i]=annotation;      setAnnotations(annotations);      return;    }  }  Annotation[] newlist=new Annotation[annotations.length + 1];  System.arraycopy(annotations,0,newlist,0,annotations.length);  newlist[annotations.length]=annotation;  setAnnotations(newlist);}  }
class C{  @Override public void onCreate(){  super.onCreate();  mInputMethodManager=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);  mWordSeparators=getResources().getString(R.string.word_separators);  final TextServicesManager tsm=(TextServicesManager)getSystemService(Context.TEXT_SERVICES_MANAGER_SERVICE);  mScs=tsm.newSpellCheckerSession(null,null,this,true);}  }
class C{  @Override public int size(){  return mapping.size();}  }
class C{  public void resetThreadVersion(){  if (threadVersions != null) {    threadVersions.remove();  }}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  @Nullable public ProblemDescriptor[] checkField(@NotNull PsiField field,@NotNull InspectionManager manager,boolean isOnTheFly){  return null;}  }
class C{  void firePropertyChange(PropertyChangeEvent evt){  for (  PropertyChangeListener l : listenerList.getListeners(PropertyChangeListener.class)) {    l.propertyChange(evt);  }}  }
class C{  protected AbstractStylableDocument(DocumentType dt,DOMImplementation impl){  super(dt,impl);}  }
class C{  public String globalInfo(){  return "General purpose text display.";}  }
class C{  public final void sample(){  long totalCount=_totalCount.get();  _delta=totalCount - _lastTotal;  _lastTotal=totalCount;}  }
class C{  public int readAvailable(ByteBuffer dest) throws IOException {  int totalBytesRead=0;  int bytesRead=this.socketChannel.read(dest);  while (bytesRead > 0 && dest.hasRemaining()) {    totalBytesRead+=bytesRead;    bytesRead=this.socketChannel.read(dest);  }  return totalBytesRead;}  }
class C{  private void startNonECOCProcess(ExampleSet originalExampleSet,int classificationStrategy) throws OperatorException {  ExampleSet exampleSet=(ExampleSet)originalExampleSet.clone();  int numberOfClasses=getLabel().getMapping().getValues().size();  int currentNumber=0;  HashMap<Integer,Integer> classIndexMap=new HashMap<Integer,Integer>(numberOfClasses);  for (  String currentClass : getLabel().getMapping().getValues()) {    classIndexMap.put(currentNumber,getLabel().getMapping().mapString(currentClass));    currentNumber++;  }  double[][] confidenceMatrix=new double[exampleSet.size()][getNumberOfModels()];  for (int k=0; k < confidenceMatrix[0].length; k++) {    Model model=getModel(k);    exampleSet=model.apply(exampleSet);    Iterator<Example> reader=exampleSet.iterator();    int counter=0;    while (reader.hasNext()) {      Example example=reader.next();      if (classificationStrategy == ONE_AGAINST_ONE) {        for (        String className : exampleSet.getAttributes().getPredictedLabel().getMapping().getValues()) {          confidenceMatrix[counter][getLabel().getMapping().mapString(className)]+=example.getConfidence(className);        }      } else {        Integer index=classIndexMap.get(k);        confidenceMatrix[counter][k]=example.getConfidence(getLabel().getMapping().mapIndex(index));      }      counter++;    }    PredictionModel.removePredictedLabel(exampleSet);  }  Iterator<Example> reader=originalExampleSet.iterator();  int counter=0;  while (reader.hasNext()) {    Example example=reader.next();    double confidenceSum=0.0, currentConfidence=0.0, bestConfidence=Double.NEGATIVE_INFINITY;    int bestIndex=-1;    for (int i=0; i < confidenceMatrix[counter].length; i++) {      currentConfidence=confidenceMatrix[counter][i];      if (currentConfidence > bestConfidence) {        bestConfidence=currentConfidence;        bestIndex=i;      }      confidenceSum+=currentConfidence;    }    example.setPredictedLabel(classIndexMap.get(bestIndex));    for (int i=0; i < numberOfClasses; i++) {      example.setConfidence(getLabel().getMapping().mapIndex(classIndexMap.get(i)),confidenceMatrix[counter][i] / confidenceSum);    }    counter++;  }}  }
class C{  protected void addSample(){  long newBytes=TrafficStats.getTotalRxBytes();  long byteDiff=newBytes - sPreviousBytes;  if (sPreviousBytes >= 0) {synchronized (this) {      long curTimeReading=SystemClock.elapsedRealtime();      mConnectionClassManager.addBandwidth(byteDiff,curTimeReading - mLastTimeReading);      mLastTimeReading=curTimeReading;    }  }  sPreviousBytes=newBytes;}  }
class C{  public FilterPred(BoolOp boolOp,List<FilterPredClause> clauses){  this.boolOp=boolOp;  this.clauses=clauses;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private void pauseVideo(){  if (mMediaPlayer.isPlaying()) {    mMediaPlayer.pause();  }}  }
class C{  public void initialise(){  configurationLoad();  try {    if (databaseType == SQLITE)     Class.forName("org.sqlite.JDBC"); else     if (databaseType == MYSQL)     Class.forName("com.mysql.jdbc.Driver"); else     Class.forName("org.postgresql.Driver");  } catch (  ClassNotFoundException e) {    plugin.getLogger().severe("The JBDC library for your database type was not found. Please read the plugin's support for more information.");    plugin.setSuccessfulLoad(false);  }  Connection conn=getSQLConnection();  if (conn == null) {    plugin.getLogger().severe("Could not establish SQL connection, disabling plugin.");    plugin.getLogger().severe("Please verify your settings in the configuration file.");    plugin.setOverrideDisable(true);    plugin.getServer().getPluginManager().disablePlugin(plugin);    return;  }  if (!"".equals(tablePrefix)) {    try (Statement st=conn.createStatement()){      ResultSet rs;      if (databaseType == SQLITE) {        rs=st.executeQuery("SELECT name FROM sqlite_master WHERE type='table' AND name='achievements'");      } else       if (databaseType == MYSQL) {        rs=st.executeQuery("SELECT table_name FROM information_schema.tables WHERE table_schema='" + databaseAddress.substring(databaseAddress.lastIndexOf('/') + 1) + "' AND table_name ='achievements'");      } else {        rs=st.executeQuery("SELECT 1 FROM pg_catalog.pg_class c JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'public' AND c.relname = 'achievements' AND c.relkind = 'r'");      }      if (rs.next())       renameTables();    } catch (    SQLException e) {      plugin.getLogger().log(Level.SEVERE,"Error while attempting to set prefix of database tables: ",e);      plugin.setSuccessfulLoad(false);    }  }  try {    initialiseTables();  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"Error while initialising database tables: ",e);    plugin.setSuccessfulLoad(false);  }  String type="";  try (Statement st=conn.createStatement()){    ResultSet rs=st.executeQuery("SELECT blockid FROM " + tablePrefix + "breaks LIMIT 1");    type=rs.getMetaData().getColumnTypeName(1);  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"SQL error while trying to update old DB: ",e);  }  if ("integer".equalsIgnoreCase(type) || "smallint unsigned".equalsIgnoreCase(type)) {    plugin.getLogger().warning("Updating database tables, please wait...");    updateOldDBToMaterial(tablePrefix + "breaks");    updateOldDBToMaterial(tablePrefix + "crafts");    updateOldDBToMaterial(tablePrefix + "places");  }  try (Statement st=conn.createStatement()){    ResultSet rs=st.executeQuery("SELECT date FROM " + tablePrefix + "achievements LIMIT 1");    type=rs.getMetaData().getColumnTypeName(1);  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"SQL error while trying to update old DB: ",e);  }  if ("text".equalsIgnoreCase(type) || "char".equalsIgnoreCase(type) || "varchar".equalsIgnoreCase(type)) {    plugin.getLogger().warning("Updating database tables, please wait...");    updateOldDBToDates();  }}  }
class C{  public void actionPerformed(final ActionEvent e){  String cmd=e.getActionCommand();  if (rbAddNoise.isSelected()) {    jsNoiseLevel.setEnabled(true);  } else {    jsNoiseLevel.setEnabled(false);  }  if (cmd.equals("addStimulus")) {    changeStimulusDimension(Integer.parseInt(tfStimulusNum.getText()));    refreshStimulusPanel();  } else   if (cmd.equals("randomize")) {    randomUpper=Double.parseDouble(tfRandomUpper.getText());    randomLower=Double.parseDouble(tfRandomLower.getText());    randomizeStimulus();  }}  }
class C{  public MaterialEditText errorColor(int color){  mErrorColor=color;  mError.setTextColor(mErrorColor);  return this;}  }
class C{  static double incompleteBetaFraction1(double a,double b,double x) throws ArithmeticException {  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;  double k1, k2, k3, k4, k5, k6, k7, k8;  double r, t, ans, thresh;  int n;  k1=a;  k2=a + b;  k3=a;  k4=a + 1.0;  k5=1.0;  k6=b - 1.0;  k7=k4;  k8=a + 2.0;  pkm2=0.0;  qkm2=1.0;  pkm1=1.0;  qkm1=1.0;  ans=1.0;  r=1.0;  n=0;  thresh=3.0 * MACHEP;  do {    xk=-(x * k1 * k2) / (k3 * k4);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    xk=(x * k5 * k6) / (k7 * k8);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (qk != 0)     r=pk / qk;    if (r != 0) {      t=Math.abs((ans - r) / r);      ans=r;    } else     t=1.0;    if (t < thresh)     return ans;    k1+=1.0;    k2+=1.0;    k3+=2.0;    k4+=2.0;    k5+=1.0;    k6-=1.0;    k7+=2.0;    k8+=2.0;    if ((Math.abs(qk) + Math.abs(pk)) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {      pkm2*=big;      pkm1*=big;      qkm2*=big;      qkm1*=big;    }  } while (++n < 300);  return ans;}  }
class C{  private void preInit(){  treeField=new Listbox(getTreeData());  treeField.setMold("select");  treeField.addActionListener(this);  treeField.setSelectedIndex(0);  centerTree=new Tree();  centerTree.addEventListener(Events.ON_SELECT,this);}  }
class C{  public static String compress(String input){  try {    int k, j, n;    char curr;    BufferedReader br=new BufferedReader(new StringReader(input));    StringBuilder sb=new StringBuilder();    if (debugLogging) {      LOG.info("Reading file into StringBuffer...");    }    String s;    while ((s=br.readLine()) != null) {      if (s.trim().equals(""))       continue;      sb.append(s);    }    if (debugLogging) {      LOG.info("Removing comments...");    }    n=0;    while ((n=sb.indexOf("/*",n)) != -1) {      if (sb.charAt(n + 2) == '*') {        n+=2;        continue;      }      k=sb.indexOf("*/",n + 2);      if (k == -1) {        throw new UnterminatedCommentException();      }      sb.delete(n,k + 2);    }    if (debugLogging) {      LOG.info(sb.toString());      LOG.info("\n\n");    }    if (debugLogging) {      LOG.info("Parsing and processing selectors...");    }    Vector<Selector> selectors=new Vector<>();    n=0;    j=0;    for (int i=0; i < sb.length(); i++) {      curr=sb.charAt(i);      if (j < 0) {        throw new UnbalancedBracesException();      }      if (curr == '{') {        j++;      } else       if (curr == '}') {        j--;        if (j == 0) {          try {            selectors.addElement(new Selector(sb.substring(n,i + 1)));          } catch (          UnterminatedSelectorException usex) {            LOG.warning("Unterminated selector: " + usex.getMessage());          }catch (          EmptySelectorBodyException ebex) {            if (debugLogging) {              LOG.warning("Empty selector body: " + ebex.getMessage());            }          }          n=i + 1;        }      }    }    StringBuilder result=new StringBuilder();    for (    Selector selector : selectors) {      result.append(selector);    }    if (debugLogging) {      LOG.info("Process completed successfully.");    }    return result.toString();  } catch (  UnterminatedCommentException ucex) {    LOG.warning("Unterminated comment.");  }catch (  UnbalancedBracesException ubex) {    LOG.warning("Unbalanced braces.");  }catch (  Exception ex) {    LOG.warning(ex.getMessage());  }  return null;}  }
class C{  public static List<AnnotatedTypeMirror> treesToTypes(final List<? extends ExpressionTree> argTrees,final AnnotatedTypeFactory typeFactory){  final List<AnnotatedTypeMirror> argTypes=new ArrayList<>(argTrees.size());  for (  Tree arg : argTrees) {    argTypes.add(typeFactory.getAnnotatedType(arg));  }  return argTypes;}  }
class C{  public BigDecimal balanceForGLCode(String glCode){  BigDecimal balance=BigDecimal.ZERO;  for (  EgBillDetails bd : getEgBillDetails()) {    if (bd.getGlcode().equals(glCode)) {      balance=bd.balance();      break;    }  }  return balance;}  }
class C{  public LsServer createServiceProfileFromTemplate(String ucsmURL,String username,String password,String serviceProfileTemplateDn,String serviceProfileName) throws ClientGeneralException {  if (serviceProfileTemplateDn == null || serviceProfileTemplateDn.isEmpty()) {    throw new ClientGeneralException(ClientMessageKeys.EXPECTED_PARAMETER_WAS_NULL,new String[]{"serviceProfileTemplateDn"});  }  LsServer createdServiceProfile=null;  List<LsServer> existingLsServers=getAllLsServers(ucsmURL,username,password);  if (StringUtils.isNotBlank(serviceProfileName)) {    String serviceProfileNameToUse=serviceProfileName;    int index=0;    boolean serviceProfileNameIsDuplicate=isServiceProfileDuplicate(existingLsServers,serviceProfileNameToUse);    if (!serviceProfileNameIsDuplicate) {      if (serviceProfileNameToUse.length() > 32) {        serviceProfileNameToUse=StringUtils.substringBefore(serviceProfileName,".");        if (serviceProfileNameToUse.length() > 32) {          serviceProfileNameToUse=StringUtils.substring(serviceProfileNameToUse,0,32);        }        serviceProfileNameIsDuplicate=isServiceProfileDuplicate(existingLsServers,serviceProfileNameToUse);      }    }    while (serviceProfileNameIsDuplicate) {      index++;      serviceProfileNameToUse=serviceProfileName + "_" + Integer.toString(index);      if (serviceProfileNameToUse.length() > 32) {        serviceProfileNameToUse=StringUtils.substringBefore(serviceProfileName,".") + "_" + Integer.toString(index);        if (serviceProfileNameToUse.length() > 32) {          serviceProfileNameToUse=StringUtils.substring(serviceProfileNameToUse,0,32 - (Integer.toString(index).length() + 1));        }      }      serviceProfileNameIsDuplicate=isServiceProfileDuplicate(existingLsServers,serviceProfileNameToUse);    }    try {      ComputeSession computeSession=sessionManager.getSession(ucsmURL,username,password);      LsInstantiateNNamedTemplate namedTemplate=new LsInstantiateNNamedTemplate();      namedTemplate.setDn(serviceProfileTemplateDn);      namedTemplate.setInHierarchical(Boolean.toString(false));      String orgName=serviceProfileTemplateDn.substring(0,serviceProfileTemplateDn.lastIndexOf("/"));      namedTemplate.setInTargetOrg(orgName);      Dn dn=new Dn();      dn.setValue(serviceProfileNameToUse);      DnSet dnSet=new DnSet();      dnSet.getDn().add(dn);      namedTemplate.getContent().add(factory.createLsInstantiateNNamedTemplateInNameSet(dnSet));      com.emc.cloud.platform.ucs.out.model.LsInstantiateNNamedTemplate namedTemplateOut=computeSession.execute(factory.createLsInstantiateNNamedTemplate(namedTemplate),com.emc.cloud.platform.ucs.out.model.LsInstantiateNNamedTemplate.class);      if (namedTemplateOut != null && namedTemplateOut.getContent() != null) {        if (!namedTemplateOut.getContent().isEmpty()) {          for (          Serializable contentElement : namedTemplateOut.getContent()) {            if (contentElement instanceof JAXBElement<?> && ((JAXBElement<?>)contentElement).getValue() != null) {              if (((JAXBElement<?>)contentElement).getValue() instanceof ConfigSet) {                ConfigSet configSet=(ConfigSet)((JAXBElement<?>)contentElement).getValue();                for (                JAXBElement<?> contentElement2 : configSet.getManagedObject()) {                  if (contentElement2.getValue() != null && contentElement2.getValue() instanceof LsServer) {                    return (LsServer)contentElement2.getValue();                  }                }              }            }          }        }      }    } catch (    ClientGeneralException e) {      log.error("Unable to create service profile : " + serviceProfileName + " From SPT : "+ serviceProfileTemplateDn,e);      throw e;    }  } else {    throw new ClientGeneralException(ClientMessageKeys.EXPECTED_PARAMETER_WAS_NULL,new String[]{"serviceProfileName"});  }  return createdServiceProfile;}  }
class C{  private static WriterBolt createErrorBolt(String brokerUrl,String sensorType,ParserConfigurations configs,SensorParserConfig parserConfig){  AbstractWriter writer=parserConfig.getErrorWriterClassName() == null ? new KafkaWriter(brokerUrl).withTopic(Constants.DEFAULT_PARSER_ERROR_TOPIC).withConfigPrefix("error") : ReflectionUtils.createInstance(parserConfig.getWriterClassName());  writer.configure(sensorType,new ParserWriterConfiguration(configs));  WriterHandler writerHandler=createWriterHandler(writer);  return new WriterBolt(writerHandler,configs,sensorType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:10.477 -0500",hash_original_method="94FF10F23CAC1DAA4FE15530650F9ABB",hash_generated_method="6077B41364B1F42147C038DAED378094") public static Metrics isBoring(CharSequence text,TextPaint paint,Metrics metrics){  return isBoring(text,paint,TextDirectionHeuristics.FIRSTSTRONG_LTR,metrics);}  }
class C{  public void containerDestroyAll(){  containerDeallocateAll();  for (  Container container : getContainerList()) {    container.setVm(null);    setSize(getSize() + container.getSize());  }  getContainerList().clear();}  }
class C{  public long numInserts(){  return this.cqQuery.getVsdStats().getNumInserts();}  }
class C{  public ODGInputFormat(){}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public synchronized void initializeCommands(){  if (ignoredPlugins.contains("All")) {    return;  }  Collection<Command> commands=server.getCommandMap().getCommands();  outer:   for (  Command command : commands) {    if (commandInIgnoredPlugin(command)) {      continue;    }    for (    Class<?> c : topicFactoryMap.keySet()) {      if (c.isAssignableFrom(command.getClass())) {        HelpTopic t=topicFactoryMap.get(c).createTopic(command);        if (t != null)         addCommandTopic(t);        continue outer;      }      if (command instanceof PluginCommand && c.isAssignableFrom(((PluginCommand)command).getExecutor().getClass())) {        HelpTopic t=topicFactoryMap.get(c).createTopic(command);        if (t != null)         addCommandTopic(t);        continue outer;      }    }    addCommandTopic(new GenericCommandHelpTopic(command));  }  Set<HelpTopic> aliases=new TreeSet<>(TOPIC_COMPARE);  for (  Command command : commands) {    if (commandInIgnoredPlugin(command)) {      continue;    }    HelpTopic original=getHelpTopic("/" + command.getLabel());    if (original != null) {      for (      String alias : command.getAliases()) {        HelpTopic aliasTopic=new AliasTopic("/" + alias,original);        if (!helpTopics.containsKey(aliasTopic.getName())) {          aliases.add(aliasTopic);          addPrivateTopic(aliasTopic);        }      }    }  }  if (!aliases.isEmpty()) {    addTopic(new IndexHelpTopic("Aliases","Lists command aliases",null,aliases,null));  }  Map<String,Set<HelpTopic>> pluginIndexes=new HashMap<>();  for (  Command command : commands) {    String pluginName=getCommandPluginName(command);    if (pluginName != null) {      HelpTopic topic=getHelpTopic("/" + command.getLabel());      if (topic != null) {        if (!pluginIndexes.containsKey(pluginName)) {          pluginIndexes.put(pluginName,new TreeSet<>(TOPIC_COMPARE));        }        pluginIndexes.get(pluginName).add(topic);      }    }  }  for (  Entry<String,Set<HelpTopic>> entry : pluginIndexes.entrySet()) {    String key=entry.getKey();    addTopic(new IndexHelpTopic(key,"All commands for " + key,null,entry.getValue(),"Below is a list of all " + key + " commands:"));  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void refreshOnlineStatus(){  this.changeOnlineStatus(OnlineStatus.CHECKING);  boolean isOnline=isOnline();  if (isOnline) {    this.changeOnlineStatus(OnlineStatus.ONLINE);  } else {    this.changeOnlineStatus(OnlineStatus.OFFLINE);  }}  }
class C{  public void testGetPrivateKey(){  createParams(false,false);  KeyStore.PrivateKeyEntry ksPKE=new KeyStore.PrivateKeyEntry(testPrivateKey,testChain);  assertEquals("Incorrect PrivateKey",testPrivateKey,ksPKE.getPrivateKey());}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:16.015 -0500",hash_original_method="D66D1C4C5928E000A465F2B26896B637",hash_generated_method="67462F58C9225E1872E2A6EC78A7CCD4") public BindException(){}  }
class C{  public static void loadLibrary(String name) throws UnsatisfiedLinkError {  String libName=System.getProperty(name + ".lib.name",System.mapLibraryName(name).replaceAll("\\.jnilib$","\\.dylib")), libPath=System.getProperty(name + ".lib.path");  try {    if (libPath == null)     System.loadLibrary(libName); else     System.load(new File(libPath,libName).getAbsolutePath());    return;  } catch (  UnsatisfiedLinkError e) {  }  libName=System.mapLibraryName(name + '-' + getOperatingSystemName()+ '-'+ getOperatingSystemArchitecture()).replaceAll("\\.jnilib$","\\.dylib");  String libNameExtension=libName.substring(libName.lastIndexOf('.')), libResourcePath=LibraryLoader.class.getPackage().getName().replace('.','/') + "/lib/" + libName;  InputStream inputStream=null;  OutputStream outputStream=null;  try {    if ((inputStream=LibraryLoader.class.getClassLoader().getResourceAsStream(libResourcePath)) == null)     throw new FileNotFoundException("lib: " + libName + " not found in lib directory");    File tempFile=File.createTempFile(name + "-",libNameExtension);    Checksum checksum=new CRC32();    outputStream=new FileOutputStream(tempFile);    int read;    byte[] buffer=new byte[1024];    while ((read=inputStream.read(buffer)) != -1) {      outputStream.write(buffer,0,read);      checksum.update(buffer,0,read);    }    outputStream.close();    File libFile=new File(tempFile.getParentFile(),name + "+" + checksum.getValue()+ libNameExtension);    if (!libFile.exists())     tempFile.renameTo(libFile); else     tempFile.delete();    System.load(libFile.getAbsolutePath());  } catch (  IOException e) {    throw new UnsatisfiedLinkError(e.getMessage());  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {      }    }    if (outputStream != null) {      try {        outputStream.close();      } catch (      IOException e) {      }    }  }}  }
class C{  @Inject public CassandraExecutor(final ScheduledExecutorService executor,final ExecutorService clusterJobExecutorService){  this.executor=executor;  this.clusterJobExecutorService=clusterJobExecutorService;}  }
class C{  public static void testConcurrentReadWrites(IntToIntPairHashMap map,IntToIntPairMapTestHelper.KeyTestInfo keyTestInfo){  int numReaders=keyTestInfo.keysAndValues.length / 3;  ExecutorService executor=Executors.newFixedThreadPool(numReaders + 1);  List<CountDownLatch> readerStartLatches=Lists.newArrayListWithCapacity(numReaders);  List<CountDownLatch> readerDoneLatches=Lists.newArrayListWithCapacity(numReaders);  List<IntToIntPairHashMapReader> readers=Lists.newArrayListWithCapacity(numReaders);  for (int i=0; i < numReaders; i++) {    CountDownLatch startLatch=new CountDownLatch(1);    CountDownLatch doneLatch=new CountDownLatch(1);    IntToIntPairHashMapReader mapReader=new IntToIntPairHashMapReader(map,startLatch,doneLatch,keyTestInfo.keysAndValues[i * 3],0);    readers.add(mapReader);    executor.submit(mapReader);    readerStartLatches.add(startLatch);    readerDoneLatches.add(doneLatch);  }  for (int i=0; i < numReaders; i++) {    CountDownLatch startLatch=(i > 0) ? readerDoneLatches.get(i - 1) : new CountDownLatch(0);    CountDownLatch doneLatch=readerStartLatches.get(i);    int[] keyList=new int[]{keyTestInfo.keysAndValues[i * 3],keyTestInfo.keysAndValues[i * 3 + 1],keyTestInfo.keysAndValues[i * 3] + 2};    executor.submit(new IntToIntPairHashMapWriter(map,new MapWriterInfo(keyList,startLatch,doneLatch)));  }  try {    readerDoneLatches.get(numReaders - 1).await();  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for last reader was interrupted: ",e);  }  for (  IntToIntPairHashMapReader reader : readers) {    long value=map.getBothValues(reader.key);    assertTrue(reader.getBothValues() == value);  }}  }
class C{  public void removeActiveLineRangeListener(ActiveLineRangeListener l){  listenerList.remove(ActiveLineRangeListener.class,l);}  }
class C{  public AreaVO createArea(AreaVO areaVO){  DbConnection conn=getConnection();  try {    areaVO.setId(getGuid(areaVO.getId()));    DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(COL_DEFS),new SigiaDbInputRecord(COL_DEFS,areaVO));    return areaVO;  } catch (  Exception e) {    logger.error(e.getMessage());    throw new DBException(e.getMessage());  }}  }
class C{  private TestSolution checkSourceCode(SSPHandler sspHandler){  TestSolution testSolution=TestSolution.PASSED;  if (sspHandler.getSSP().getAdaptedContent().toLowerCase().contains(SWF_EXT)) {    testSolution=TestSolution.NEED_MORE_INFO;    sspHandler.getProcessRemarkService().addProcessRemark(TestSolution.NEED_MORE_INFO,SUSPECTED_FLASH_CONTENT_DETECTED_MSG);  }  return testSolution;}  }
class C{  private UniqueString create(String str){  if (this.internSource == null) {    return new UniqueString(str,++tokenCnt);  }  try {    return this.internSource.intern(str);  } catch (  Exception e) {    Assert.fail("Failed to intern " + str + ".");  }  return null;}  }
class C{  public void runScript(Reader reader) throws IOException, SQLException {  try {    boolean originalAutoCommit=connection.getAutoCommit();    try {      if (originalAutoCommit != this.autoCommit) {        connection.setAutoCommit(this.autoCommit);      }      runScript(connection,reader);    }  finally {      connection.setAutoCommit(originalAutoCommit);    }  } catch (  IOException e) {    throw e;  }catch (  SQLException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException("Error running script.  Cause: " + e,e);  }}  }
class C{  private boolean _hasNext(){  while (!exhausted) {    if (tupleItr != null) {      if (tupleItr.hasNext()) {        return true;      }      tupleItr=null;      if (log.isTraceEnabled())       log.trace("Current leaf is exhausted.");    }    if ((currentLeaf=nextLeaf()) != null) {      tupleItr=new LeafTupleIterator<E>(currentLeaf,tuple,fromKey,toKey);    } else {      exhausted=true;    }  }  if (log.isTraceEnabled())   log.trace("Exhausted.");  releaseBuffer();  return false;}  }
class C{  private static void uaRIMinLe(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uariminLe(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uariminLe(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  public NumberFormatStringTokenizer(String str){  this.str=str;  maxPosition=str.length();}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue((V)val));}  }
class C{  public void sleep(Long millis){  try {    Thread.sleep(millis);  } catch (  Exception e) {    LOGGER.warn("Couldn't sleep for " + millis + " milliseconds.",e);  }}  }
class C{  private static int sbrMapping(Context ac,SpectralBandReplication sbr,SBRData chData,int eA[]){  for (int i=1; i < 8; i++) {    Arrays.fill(chData.sIndexmapped[i],0);  }  for (int e=0; e < chData.bsNumEnv; e++) {    final int ilim=sbr.n[chData.bsFreqRes[e + 1]];    int table[]=chData.bsFreqRes[e + 1] != 0 ? sbr.fTablehigh : sbr.fTablelow;    if (sbr.kx[1] != table[0]) {      log.error(String.format("kx != f_table{high,low}[0]. Derived frequency tables were not regenerated."));      sbrTurnoff(sbr);      return AAC_ERROR;    }    for (int i=0; i < ilim; i++) {      for (int m=table[i]; m < table[i + 1]; m++) {        sbr.eOrigmapped[e][m - sbr.kx[1]]=chData.envFacs[e + 1][i];      }    }    int k=(chData.bsNumNoise > 1) && (chData.tEnv[e] >= chData.tQ[1]) ? 1 : 0;    for (int i=0; i < sbr.nQ; i++) {      for (int m=sbr.fTablenoise[i]; m < sbr.fTablenoise[i + 1]; m++) {        sbr.qMapped[e][m - sbr.kx[1]]=chData.noiseFacs[k + 1][i];      }    }    for (int i=0; i < sbr.n[1]; i++) {      if (chData.bsAddHarmonicFlag) {        final int m_midpoint=(sbr.fTablehigh[i] + sbr.fTablehigh[i + 1]) >> 1;        chData.sIndexmapped[e + 1][m_midpoint - sbr.kx[1]]=chData.bsAddHarmonic[i] * (e >= eA[1] || (chData.sIndexmapped[0][m_midpoint - sbr.kx[1]] == 1) ? 1 : 0);      }    }    for (int i=0; i < ilim; i++) {      int additional_sinusoid_present=0;      for (int m=table[i]; m < table[i + 1]; m++) {        if (chData.sIndexmapped[e + 1][m - sbr.kx[1]] != 0) {          additional_sinusoid_present=1;          break;        }      }      Arrays.fill(sbr.sMapped[e],table[i] - sbr.kx[1],table[i + 1] - sbr.kx[1],additional_sinusoid_present);    }  }  System.arraycopy(chData.sIndexmapped[chData.bsNumEnv],0,chData.sIndexmapped[0],0,chData.sIndexmapped[0].length);  return 0;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.316 -0500",hash_original_method="084F70F38BAFAA7D7D5DCCB7F82C794B",hash_generated_method="1C03C37486F31D9697FC7EBA06712FA0") public static boolean isTitleCase(char c){  return isTitleCaseImpl(c);}  }
class C{  @Override protected int computeHorizontalScrollRange(){  final int count=getChildCount();  final int contentWidth=getWidth() - getPaddingLeft() - getPaddingRight();  if (count == 0) {    return contentWidth;  }  int scrollRange=getChildAt(0).getRight();  final int scrollX=getScrollX();  final int overscrollRight=Math.max(0,scrollRange - contentWidth);  if (scrollX < 0) {    scrollRange-=scrollX;  } else   if (scrollX > overscrollRight) {    scrollRange+=scrollX - overscrollRight;  }  return scrollRange;}  }
class C{  public boolean isMyTurn(){  if (game.isPhaseSimultaneous()) {    return game.getTurnForPlayer(localPlayerNumber) != null;  }  return (game.getTurn() != null) && game.getTurn().isValid(localPlayerNumber,game);}  }
class C{  @Transactional public void createVoucherfromPreApprovedVoucher(final long vouhcerheaderid) throws ApplicationRuntimeException {  String voucherStatus=null;  try {    final List vStatusList=appConfigValuesService.getConfigValuesByModuleAndKey("EGF","APPROVEDVOUCHERSTATUS");    if (!vStatusList.isEmpty() && vStatusList.size() == 1) {      final AppConfigValues appVal=(AppConfigValues)vStatusList.get(0);      voucherStatus=appVal.getValue();    } else     throw new ApplicationRuntimeException("APPROVEDVOUCHERSTATUS" + MISSINGMSG);    createVoucher.createVoucherFromPreApprovedVoucher(vouhcerheaderid,voucherStatus);  } catch (  final ApplicationRuntimeException e) {    LOGGER.error(e.getMessage());    throw new ApplicationRuntimeException(e.getMessage());  }}  }
class C{  protected void closeAllSession(){  for (  long key : sessions.keySet()) {    sessions.get(key).close();  }}  }
class C{  public void writeExif(String jpegFileName,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegFileName == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=new FileInputStream(jpegFileName);    writeExif(is,exifOutFileName);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  public static byte[] readFromFileChannel(FileChannel channel,long position,int length) throws IOException {  byte[] res=new byte[length];  readFromFileChannelWithEofException(channel,position,res,0,length);  return res;}  }
class C{  LambdaFormBuffer replaceParameterByNewExpression(int pos,Name binding){  assert (!binding.isParam());  assert (lastIndexOf(binding) < 0);  replaceName(pos,binding);  return this;}  }
class C{  public static Label createWrapLabel(Composite parent,String text,int hspan,int wrapwidth){  Label l=new Label(parent,SWT.NONE | SWT.WRAP);  l.setFont(parent.getFont());  l.setText(text);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  gd.widthHint=wrapwidth;  l.setLayoutData(gd);  return l;}  }
class C{  private void createConstraintToast(FormIndex index,int saveStatus){  FormController formController=Collect.getInstance().getFormController();  String constraintText;switch (saveStatus) {case FormEntryController.ANSWER_CONSTRAINT_VIOLATED:    Collect.getInstance().getActivityLogger().logInstanceAction(this,"createConstraintToast.ANSWER_CONSTRAINT_VIOLATED","show",index);  constraintText=formController.getQuestionPromptConstraintText(index);if (constraintText == null) {  constraintText=formController.getQuestionPrompt(index).getSpecialFormQuestionText("constraintMsg");  if (constraintText == null) {    constraintText=formController.getQuestionPrompt(index).getQuestionText() + " " + "is invalid.";  }}break;case FormEntryController.ANSWER_REQUIRED_BUT_EMPTY:Collect.getInstance().getActivityLogger().logInstanceAction(this,"createConstraintToast.ANSWER_REQUIRED_BUT_EMPTY","show",index);constraintText=formController.getQuestionPromptRequiredText(index);if (constraintText == null) {constraintText=formController.getQuestionPrompt(index).getSpecialFormQuestionText("requiredMsg");if (constraintText == null) {constraintText=formController.getQuestionPrompt(index).getQuestionText() + " " + " is required.";}}break;default :return;}showCustomToast(constraintText,Toast.LENGTH_SHORT);}  }
class C{  public void testTruncateEndFile() throws Exception {  File logDir=prepareLogDir("testTruncateEndFile");  DiskLog log=openLog(logDir,false,3000);  writeEventsToLog(log,200);  log.validate();  log.release();  String[] logFiles=log.getLogFileNames();  String lastLogName=logFiles[logFiles.length - 1];  File lastLog=new File(logDir,lastLogName);  logger.info("Deleting last log: " + lastLog.getAbsolutePath());  assertTrue("Delete last log: " + lastLogName,lastLog.delete());  DiskLog log2=openLog(logDir,false,3000);  LogConnection conn1=log2.connect(true);  conn1.seek(0);  long maxSeqnoNonBlocking=-1;  THLEvent e;  while ((e=conn1.next(false)) != null) {    maxSeqnoNonBlocking=e.getSeqno();  }  logger.info("Non-blocking reads find " + maxSeqnoNonBlocking + " events");  assertTrue("Found more than 0 events",maxSeqnoNonBlocking > 0);  conn1.release();  LogConnection conn2=log2.connect(true);  conn2.setTimeoutMillis(500);  conn2.seek(0);  long maxSeqnoBlocking=-1;  try {    while (maxSeqnoBlocking <= maxSeqnoNonBlocking) {      e=conn2.next(true);      maxSeqnoBlocking=e.getSeqno();    }    throw new Exception("Read failed to time out on missing log file after rotation");  } catch (  LogTimeoutException ex) {    logger.info("Read timed out as expected: " + ex.getMessage());  }  logger.info("Blocking reads find " + maxSeqnoBlocking + " events");  assertEquals("Blocking and non-blocking find same number of reads",maxSeqnoNonBlocking,maxSeqnoBlocking);  conn2.release();  long startSeqno=maxSeqnoNonBlocking + 1;  writeEventsToLog(log2,startSeqno,300);  log2.validate();  readBackStoredEvents(log2,0,300);  log2.release();}  }
class C{  public void moveCursor(double units,RectangleEdge edge){  if (edge == RectangleEdge.TOP) {    cursorUp(units);  } else   if (edge == RectangleEdge.BOTTOM) {    cursorDown(units);  } else   if (edge == RectangleEdge.LEFT) {    cursorLeft(units);  } else   if (edge == RectangleEdge.RIGHT) {    cursorRight(units);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void clear(){  m_Model.clear();  setButtons(null);}  }
class C{  public void abort() throws IOException {synchronized (DiskLruCache.this) {    completeEdit(this,false);  }}  }
class C{  private void invalidateVisualState(){  this.anchor.invalidateVisualState();  boolean validConnection=this.anchor.hasValidConnection();  this.setTranslateY(validConnection ? -9 : -18);  this.inputType.setText(validConnection ? "zyxwv" : this.anchor.getStringType());  this.inputType.setVisible(!validConnection);}  }
class C{  private void checkExcludedIP(Set excluded,byte[] ip) throws PKIXNameConstraintValidatorException {  if (excluded.isEmpty()) {    return;  }  Iterator it=excluded.iterator();  while (it.hasNext()) {    byte[] ipWithSubnet=(byte[])it.next();    if (isIPConstrained(ip,ipWithSubnet)) {      throw new PKIXNameConstraintValidatorException("IP is from an excluded subtree.");    }  }}  }
class C{  public boolean every(Func1<? super T,Boolean> predicate){  for (  T item : this) {    if (!predicate.call(item))     return false;  }  return true;}  }
class C{  public static Column createColumn(String name,Operation op,QueryState state,String prefix,String suffix){  if (!name.equals("*")) {    name=Heading.findOriginal(state.originalSql(),name,prefix,suffix);  }  if (name.contains(".")) {    String head=name.split("\\.")[0];    for (    QuerySource tr : state.getSources()) {      if (tr.getAlias() != null && head.equals(tr.getAlias())) {        if (op != null)         return new Column(name.substring(name.indexOf('.') + 1),op).setTable(tr.getSource(),tr.getAlias());        return new Column(name.substring(name.indexOf('.') + 1)).setTable(tr.getSource(),tr.getAlias());      } else       if (head.equals(tr.getSource())) {        if (op != null)         return new Column(name.substring(name.indexOf('.') + 1),op).setTable(tr.getSource(),tr.getAlias());        return new Column(name.substring(name.indexOf('.') + 1)).setTable(tr.getSource(),tr.getAlias());      }    }  }  if (op != null)   return new Column(name,op);  return new Column(name);}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  if (!LibsChecker.checkVitamioLibs(this))   return;  setContentView(R.layout.mediaplayer_3);  mTextureView=(TextureView)findViewById(R.id.surface);  mTextureView.setSurfaceTextureListener(this);}  }
class C{  public static double isLeftOfLine(Coordinate c0,Coordinate c1,Coordinate c2){  return (c2.x - c1.x) * (c0.y - c1.y) - (c0.x - c1.x) * (c2.y - c1.y);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.306 -0500",hash_original_method="5EA1910DE691C0C494DA1CD65B8AD3FB",hash_generated_method="5AC456F721A8B07CFE0D43C462B3D7D7") public static boolean isSpaceChar(char c){  return isSpaceChar((int)c);}  }
class C{  public BehaviorConfigWrapper(TagConfig parent,String behaviorId){  this.parent=parent;  this.behaviorId=behaviorId;}  }
class C{  public static boolean isNewLineChar(char c){  return (c == '\n' || c == '\r');}  }
class C{  public ConditionalExpression createConditionalExpression(){  ConditionalExpressionImpl conditionalExpression=new ConditionalExpressionImpl();  return conditionalExpression;}  }
class C{  public Casino(){  super();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getVariables() == null) {    throw new NullPointerException();  }  if (matrixC != null) {    matrix=new TetradMatrix(matrixC.toArray());    matrixC=null;  }  if (knowledge == null) {    throw new NullPointerException();  }  if (sampleSize < -1) {    throw new IllegalStateException();  }  if (selectedVariables == null) {    selectedVariables=new HashSet<>();  }}  }
class C{  public PrivateKey engineLookupAndResolvePrivateKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.507 -0500",hash_original_method="9F2931F68825A4578F9E89212BCAE059",hash_generated_method="2E75DF42A48FEC873AC09333063133CF") public boolean isAbsolute(){  return 1 == (path.length() + path.charAt(0) + separatorChar);}  }
class C{  public boolean hasAttendeeStatus(){  return super.hasElement(AttendeeStatus.KEY);}  }
class C{  public boolean validate(InputNode node) throws Exception {  String name=node.getName();  String element=path.getElement(name);  Label label=elements.get(element);  Converter converter=label.getConverter(context);  return converter.validate(node);}  }
class C{  public KeySet(){  this.keys=new LinkedList<>();  this.lookup=new TreeMap<>();}  }
class C{  public void insertChar(AttributedCharacterIterator newParagraph,int insertPos){  measurer.insertChar(newParagraph,insertPos);  limit=newParagraph.getEndIndex();  pos=start=newParagraph.getBeginIndex();  charIter.reset(measurer.getChars(),newParagraph.getBeginIndex());  breakIter.setText(charIter);}  }
class C{  protected boolean isTemporal(MetadataClass referenceClass,boolean isForMapKey){  return hasTemporal(isForMapKey) || TemporalMetadata.isValidTemporalType(referenceClass);}  }
class C{  private ArchivedUpdateAction(UpdateAction action,String componentId,String couplingId){  this.updateAction=action;  this.componentId=componentId;  this.couplingId=couplingId;}  }
class C{  public static IDownloaderClient CreateProxy(Messenger msg){  return new Proxy(msg);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public Sorting(double[] array,boolean copyArray){  if (copyArray) {    A=new double[array.length];    System.arraycopy(array,0,A,0,array.length);  } else {    A=array;  }  order=new int[A.length];  for (int i=0; i < A.length; i++) {    order[i]=i;  }  sort(A);}  }
class C{  public void addSeriesRenderer(SimpleSeriesRenderer renderer){  mRenderers.add(renderer);}  }
class C{  public SPOStarJoin(final SPOPredicate pred){  super(pred.arity() == 3 ? new BOp[]{pred.s(),Var.var(),Var.var()} : new BOp[]{pred.s(),Var.var(),Var.var(),pred.c()},deepCopy(pred.annotations()));}  }
class C{  @Override public MarkupDocument build(){  Map<String,SecuritySchemeDefinition> definitions=globalContext.getSwagger().getSecurityDefinitions();  if (MapUtils.isNotEmpty(definitions)) {    applySecurityDocumentExtension(new Context(Position.DOCUMENT_BEFORE,this.markupDocBuilder));    buildSecurityTitle(SECURITY);    applySecurityDocumentExtension(new Context(Position.DOCUMENT_BEGIN,this.markupDocBuilder));    buildSecuritySchemeDefinitionsSection(definitions);    applySecurityDocumentExtension(new Context(Position.DOCUMENT_END,this.markupDocBuilder));    applySecurityDocumentExtension(new Context(Position.DOCUMENT_AFTER,this.markupDocBuilder));  }  return new MarkupDocument(markupDocBuilder);}  }
class C{  private int movePos(){  int avail=movePos(4,4);  if (avail != 0) {    if (++lzPos == Integer.MAX_VALUE) {      int normalizationOffset=Integer.MAX_VALUE - cyclicSize;      hash.normalize(normalizationOffset);      normalize(chain,normalizationOffset);      lzPos-=normalizationOffset;    }    if (++cyclicPos == cyclicSize)     cyclicPos=0;  }  return avail;}  }
class C{  private Node(){  super();  previous=this;  next=this;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void test_ConstructorLjava_io_FileZI(){  try {    JarFile jarFile=new JarFile(new File("Wrong.file"),true,ZipFile.OPEN_READ);    fail("Should throw IOException");  } catch (  IOException e) {  }  try {    Support_Resources.copyFile(resources,null,jarName);    JarFile jarFile=new JarFile(new File(resources,jarName),false,ZipFile.OPEN_READ);  } catch (  IOException e) {    fail("Should not throw IOException");  }  try {    Support_Resources.copyFile(resources,null,jarName);    JarFile jarFile=new JarFile(new File(resources,jarName),false,ZipFile.OPEN_READ | ZipFile.OPEN_DELETE + 33);    fail("Should throw IllegalArgumentException");  } catch (  IOException e) {    fail("Should not throw IOException");  }catch (  IllegalArgumentException e) {  }}  }
class C{  public static void cleanLuceneIndex(Directory directory) throws IOException {  try (Lock writeLock=directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)){    for (    final String file : directory.listAll()) {      if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {        directory.deleteFile(file);      }    }  }   try (IndexWriter writer=new IndexWriter(directory,new IndexWriterConfig(Lucene.STANDARD_ANALYZER).setMergePolicy(NoMergePolicy.INSTANCE).setCommitOnClose(false).setOpenMode(IndexWriterConfig.OpenMode.CREATE))){  } }  }
class C{  private void initToolTip(JComponent c,int row,int column){  String toolTipText=null;  if (c.getPreferredSize().width > getCellRect(row,column,false).width) {    toolTipText=getValueAt(row,column).toString();  }  c.setToolTipText(toolTipText);}  }
class C{  public void clearParameters(){  if (null == m_params)   return;  m_params.clear();}  }
class C{  private void firstTuple(Object inputEvent){  if (firstTupleProcessed) {    return;  }  firstTupleProcessed=true;  Class<?> clazz=inputEvent.getClass();  getters=GPOUtils.buildGPOGetters(fieldToGetter,schema.getValuesDescriptor(),clazz);}  }
class C{  public StempelFilter(TokenStream in,StempelStemmer stemmer){  this(in,stemmer,DEFAULT_MIN_LENGTH);}  }
class C{  public Url(){}  }
class C{  private void performHighlight(MotionEvent e){  Highlight h=mChart.getHighlightByTouchPoint(e.getX(),e.getY());  if (h == null || h.equalTo(mLastHighlighted)) {    mChart.highlightTouch(null);    mLastHighlighted=null;  } else {    mLastHighlighted=h;    mChart.highlightTouch(h);  }}  }
class C{  public ColumnArrangement(HorizontalAlignment hAlign,VerticalAlignment vAlign,double hGap,double vGap){  this.horizontalAlignment=hAlign;  this.verticalAlignment=vAlign;  this.horizontalGap=hGap;  this.verticalGap=vGap;}  }
class C{  protected void runUpload(Integer numOfThreads,HashMap<String,String> attributes) throws Exception {  runUpload(numOfThreads,attributes,false,false);}  }
class C{  public Enumeration<Permission> elements(){  return permissions.elements();}  }
class C{  public CharBuffer insert(int offset,double d){  return insert(offset,String.valueOf(d));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE__CHARACTER:    return CHARACTER_EDEFAULT == null ? character != null : !CHARACTER_EDEFAULT.equals(character);case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE__SEQUENCE:  return SEQUENCE_EDEFAULT == null ? sequence != null : !SEQUENCE_EDEFAULT.equals(sequence);}return super.eIsSet(featureID);}  }
class C{  boolean changeMasterPassword(String oldPassword,String newPassword,boolean encrypt){  if (!setMasterPassword(oldPassword)) {    return false;  }  byte[] oldKey=(byte[])myKey.get().get();  byte[] newKey=EncryptionUtil.genPasswordKey(newPassword);  ByteArrayWrapper testKey=new ByteArrayWrapper(EncryptionUtil.dbKey(oldKey,MasterKeyPasswordSafe.class,testKey(oldPassword)));  HashMap<ByteArrayWrapper,byte[]> oldDb=new HashMap<ByteArrayWrapper,byte[]>();  myDatabase.copyTo(oldDb);  HashMap<ByteArrayWrapper,byte[]> newDb=new HashMap<ByteArrayWrapper,byte[]>();  for (  Map.Entry<ByteArrayWrapper,byte[]> e : oldDb.entrySet()) {    if (testKey.equals(e.getKey())) {      continue;    }    byte[] decryptedKey=EncryptionUtil.decryptKey(oldKey,e.getKey().unwrap());    String decryptedText=EncryptionUtil.decryptText(oldKey,e.getValue());    newDb.put(new ByteArrayWrapper(EncryptionUtil.encryptKey(newKey,decryptedKey)),EncryptionUtil.encryptText(newKey,decryptedText));  }synchronized (myDatabase.getDbLock()) {    resetMasterPassword(newPassword,encrypt);    myDatabase.putAll(newDb);  }  return true;}  }
class C{  @Override protected Repository createRepository(String id) throws RepositoryConfigException, RepositoryException {  HTTPRepository result=null;  if (RepositoryConfigUtil.hasRepositoryConfig(getSystemRepository(),id)) {    result=new HTTPRepository(serverURL,id);    result.setSesameClient(getSesameClient());    result.setUsernameAndPassword(username,password);    result.initialize();  }  return result;}  }
class C{  @Override ObservedObject createObservedObject(ObjectName object){  final GaugeMonitorObservedObject gmo=new GaugeMonitorObservedObject(object);  gmo.setStatus(RISING_OR_FALLING);  gmo.setPreviousScanGauge(null);  return gmo;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Element elementNode;  String name;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  elementNode=domesticAttr.getOwnerElement();  name=elementNode.getNodeName();  assertEquals("throw_Equals","address",name);}  }
class C{  public DividerItemDecoration(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);}  }
class C{  public boolean isSetFullSyncRequest(){  return this.fullSyncRequest != null;}  }
class C{  public void open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  protected void push(Instance instance){  if (instance != null) {    if (instance.dataset() != null) {      instance=(Instance)instance.copy();      copyValues(instance,false);    }    instance.setDataset(m_OutputFormat);    m_OutputQueue.push(instance);  }}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  public void onPlayerResized(int width,int height){  if (LogUtils.isActive) {    Log.d(LOGTAG,"onPlayerResized");  }}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public final Iterator<KnowledgeEdge> explicitlyRequiredEdgesIterator(){  return requiredEdgesIterator();}  }
class C{  public static NumericJavaFXBidirectionaBinder<Long> bind(LongProperty property){  requireNonNull(property,"property");  return new LongJavaFXBidirectionalBinder(property);}  }
class C{  @RequestMapping(value="/account/sessions/{series}",method=RequestMethod.DELETE) @Timed public void invalidateSession(@PathVariable String series) throws UnsupportedEncodingException {  String decodedSeries=URLDecoder.decode(series,"UTF-8");  userRepository.findOneByLogin(SecurityUtils.getCurrentUser().getUsername()).ifPresent(null);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  private void copyStage(MTreeNode node,String path){  org.compiere.cm.CacheHandler thisHandler=new org.compiere.cm.CacheHandler(org.compiere.cm.CacheHandler.convertJNPURLToCacheURL(getCtx().getProperty("java.naming.provider.url")),log,getCtx(),get_TrxName());  Integer ID=new Integer(node.getNode_ID());  MCStage stage=m_map.get(ID);  int size=node.getChildCount();  for (int i=0; i < size; i++) {    MTreeNode child=(MTreeNode)node.getChildAt(i);    ID=new Integer(child.getNode_ID());    stage=m_map.get(ID);    if (stage == null) {      log.warning("Not Found ID=" + ID);      continue;    }    if (!stage.isActive())     continue;    if (stage != null && stage.isModified()) {      MContainer cc=MContainer.copy(m_project,stage,path);      if (cc != null) {        addLog(0,null,null,"@Copied@: " + cc.getName());        m_idList.add(ID);      }      thisHandler.cleanContainer(cc.get_ID());      stage.setIsModified(false);      stage.save(stage.get_TrxName());    }    if (child.isSummary())     copyStage(child,path + stage.getRelativeURL() + "/");  }}  }
class C{  public void dispose(){  m_module.removeListener(m_listener);}  }
class C{  public void validateBusinesObjectDataSearchRequest(BusinessObjectDataSearchRequest request) throws IllegalArgumentException {  Assert.notNull(request,"A Business Object Data SearchRequest must be specified");  List<BusinessObjectDataSearchFilter> businessObjectDataSearchFilters=request.getBusinessObjectDataSearchFilters();  Assert.isTrue(businessObjectDataSearchFilters != null,"Business Object Data Search Filters must be specified");  Assert.isTrue(businessObjectDataSearchFilters.size() == 1,"Business Object Data Search Filters can only have one filter");  List<BusinessObjectDataSearchKey> businessObjectDataSearchKeys=request.getBusinessObjectDataSearchFilters().get(0).getBusinessObjectDataSearchKeys();  Assert.isTrue(businessObjectDataSearchKeys != null,"A BusinessObject Search Key must be specified");  Assert.isTrue(businessObjectDataSearchKeys.size() == 1,"A BusinessObject Search Key can only have one");  for (  BusinessObjectDataSearchKey key : businessObjectDataSearchKeys) {    validateBusinessObjectDataKey(key);  }}  }
class C{  private String compileToCss(LessSource source,long lastModified) throws Exception {  cacheRelatedFiles(source);  String cacheKey="CompiledCss:" + source.getAbsolutePath();  CompiledCss compiledCss=getCached(cacheKey);  if ((compiledCss != null) && (compiledCss.lastModified == lastModified)) {    return compiledCss.content;  }  Logger.info("Compiling LESS: %s, lastModified: %s",source.getAbsolutePath(),lastModified);  String content=compiler.compile(source);  setCached(cacheKey,new CompiledCss(content,lastModified));  return content;}  }
class C{  private String writeNumber(double d){  return formatter.format(d);}  }
class C{  public double readDouble() throws TException {  byte[] longBits=new byte[8];  trans_.readAll(longBits,0,8);  return Double.longBitsToDouble(bytesToLong(longBits));}  }
class C{  protected Value parseValue() throws IOException, RDFParseException, RDFHandlerException {  int c=peekCodePoint();  if (c == '<') {    return parseURI();  } else   if (c == ':' || TurtleUtil.isPrefixStartChar(c)) {    return parseQNameOrBoolean();  } else   if (c == '_') {    return parseNodeID();  } else   if (c == '"' || c == '\'') {    return parseQuotedLiteral();  } else   if (ASCIIUtil.isNumber(c) || c == '.' || c == '+' || c == '-') {    return parseNumber();  } else   if (c == -1) {    throwEOFException();    return null;  } else {    reportFatalError("Expected an RDF value here, found '" + new String(Character.toChars(c)) + "'");    return null;  }}  }
class C{  public void warning(SAXParseException e) throws SAXException {}  }
class C{  public SignatureException(){  super();}  }
class C{  @ResponseBody @RequestMapping(value="/images/imageName/{imageName}/disable",method=RequestMethod.POST) public Image disableImage(@PathVariable String imageName) throws ServiceException {  return this.imageService.disableImage(imageName);}  }
class C{  @PatchMethod(override=true) public static String prompt(String msg,String initialValue){  return RETURNED_MESSAGE;}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isOutputFormatDefined()) {    setOutputFormat();    for (int i=0; i < getInputFormat().numInstances(); i++) {      Instance temp=(Instance)getInputFormat().instance(i).copy();      for (int j=0; j < temp.numAttributes(); j++) {        if (temp.attribute(j).isString() && !temp.isMissing(j) && m_AttIndices.isInRange(j)) {          temp.setValue(j,temp.value(j) - 1);        }      }      push(temp);    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof CGSize) {    if (this == o)     return true;    CGSize size=(CGSize)o;    return (width == size.width && height == size.height);  }  return false;}  }
class C{  public void close() throws IOException {  writer.close();}  }
class C{  public static byte[] save(Bitmap src) throws ImageSaveException {  return save(src,Bitmap.CompressFormat.JPEG,JPEG_QUALITY);}  }
class C{  public MatFileReader(String fileName,MatFileFilter filter) throws IOException {  this(new File(fileName),filter);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private static int compateOids(ObjectIdentifier oid1,ObjectIdentifier oid2){  if (oid1 == oid2) {    return 0;  }  int[] ioid1=oid1.getOid();  int[] ioid2=oid2.getOid();  int min=ioid1.length < ioid2.length ? ioid1.length : ioid2.length;  for (int i=0; i < min; ++i) {    if (ioid1[i] < ioid2[i]) {      return -1;    }    if (ioid1[i] > ioid2[i]) {      return 1;    }    if ((i + 1) == ioid1.length && (i + 1) < ioid2.length) {      return -1;    }    if ((i + 1) < ioid1.length && (i + 1) == ioid2.length) {      return 1;    }  }  return 0;}  }
class C{  public boolean registerUpnSuffix(String tenantName,String domainName,String upnSuffix) throws Exception {  return getService().registerUpnSuffix(tenantName,domainName,upnSuffix,this.getServiceContext());}  }
class C{  private void feedbackToByInSync(final Long actionId){  final Action action=deploymentManagement.findAction(actionId);  final ActionStatus actionStatus=entityFactory.generateActionStatus(action,Status.FINISHED,0L);  controllerManagement.addUpdateActionStatus(actionStatus);}  }
class C{  public boolean is_set_state(){  return this.state != null;}  }
class C{  public Boolean isVirtualICH7MPresent(){  return virtualICH7MPresent;}  }
class C{  public byte[] toByteArray(){  return data;}  }
class C{  @Override public void sessionCreated(NextFilter nextFilter,IoSession session) throws Exception {  for (  Map.Entry<String,Object> e : attributes.entrySet()) {    session.setAttribute(e.getKey(),e.getValue());  }  nextFilter.sessionCreated(session);}  }
class C{  public Iterator availableTailOp(){  final boolean avail=Striterator.class == this.getClass();  if (avail) {    return (m_src instanceof ITailOp) ? ((ITailOp)m_src).availableTailOp() : m_src;  } else {    return this;  }}  }
class C{  public void toggleSelection(int position){  if (selectedItems.get(position,false)) {    selectedItems.delete(position);  } else {    selectedItems.put(position,true);  }  notifyItemChanged(position);}  }
class C{  private void logToast(String str){  log(str);  Toast.makeText(activity,str,Toast.LENGTH_SHORT).show();}  }
class C{  private boolean hasKeyAttributes(){  Boolean b=hasKeyAttributes;  if (b == null) {synchronized (this) {      String s;      s=getAttribute("SupportedKeyFormats");      if (s != null) {        supportedFormats=s.split("\\|");      }      s=getAttribute("SupportedKeyClasses");      if (s != null) {        String[] classNames=s.split("\\|");        List<Class<?>> classList=new ArrayList<>(classNames.length);        for (        String className : classNames) {          Class<?> clazz=getKeyClass(className);          if (clazz != null) {            classList.add(clazz);          }        }        supportedClasses=classList.toArray(CLASS0);      }      boolean bool=(supportedFormats != null) || (supportedClasses != null);      b=Boolean.valueOf(bool);      hasKeyAttributes=b;    }  }  return b.booleanValue();}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  protected boolean nearCapacity(){  if (super.nearCapacity())   return true;  if (numJustifications + 1 > capacity) {    return true;  }  return false;}  }
class C{  public void dragFrame(JComponent f,int newX,int newY){  if (dragMode == OUTLINE_DRAG_MODE) {    JDesktopPane desktopPane=getDesktopPane(f);    if (desktopPane != null) {      Graphics g=JComponent.safelyGetGraphics(desktopPane);      g.setXORMode(Color.white);      if (currentLoc != null) {        g.drawRect(currentLoc.x,currentLoc.y,f.getWidth() - 1,f.getHeight() - 1);      }      g.drawRect(newX,newY,f.getWidth() - 1,f.getHeight() - 1);      sun.java2d.SurfaceData sData=((sun.java2d.SunGraphics2D)g).getSurfaceData();      if (!sData.isSurfaceLost()) {        currentLoc=new Point(newX,newY);      }      ;      g.dispose();    }  } else   if (dragMode == FASTER_DRAG_MODE) {    dragFrameFaster(f,newX,newY);  } else {    setBoundsForFrame(f,newX,newY,f.getWidth(),f.getHeight());  }}  }
class C{  public void newInstance(final Type type){  typeInsn(Opcodes.NEW,type);}  }
class C{  @Override public void run(int connId,String[] args){  try {    IPlayer player=server.getPlayer(connId);    int numEntities=server.getGame().getEntitiesOwnedBy(player);    if (args.length != 2) {      server.sendServerChat(connId,"Incorrect number of arguments " + "for joinTeam command!  Expected 1, received, " + (args.length - 1) + ".");      server.sendServerChat(connId,getHelp());      return;    }    int teamId=Integer.parseInt(args[1]);    if (IPlayer.TEAM_UNASSIGNED == teamId && numEntities != 0) {      server.sendServerChat(connId,"Player must have no more " + "units to join the unassigned team!");      return;    }    String teamString="join Team " + teamId + ".  ";    if (teamId == IPlayer.TEAM_UNASSIGNED) {      teamString=" leave their team and go unassigned.  ";    } else     if (teamId == IPlayer.TEAM_NONE) {      teamString=" go lone wolf!  ";    }    for (    IPlayer p : server.getGame().getPlayersVector()) {      if (p.getId() != player.getId()) {        server.sendServerChat(p.getId(),player.getName() + " wants to " + teamString+ SERVER_VOTE_PROMPT_MSG);      }    }    server.requestTeamChange(teamId,player);    for (    IPlayer p : server.getGame().getPlayersVector()) {      p.setAllowTeamChange(false);    }    player.setAllowTeamChange(true);  } catch (  NumberFormatException nfe) {    server.sendServerChat(connId,"Failed to parse team number!");  }}  }
class C{  public static void removeMarkers(IResource res) throws CoreException {  res.deleteMarkers(FindBugsMarker.NAME,true,IResource.DEPTH_INFINITE);  if (res instanceof IProject) {    IProject project=(IProject)res;    FindbugsPlugin.clearBugCollection(project);  }}  }
class C{  public File mergeMount(final File f1,final File f2,final ReferenceFactory<? extends Reference> factory,final File newFile,final int writeBuffer){  if (f2 == null) {    ConcurrentLog.info("BLOBArray","rewrite of " + f1.getName());    final File resultFile=rewriteWorker(factory,this.keylength,this.ordering,f1,newFile,writeBuffer);    if (resultFile == null) {      ConcurrentLog.warn("BLOBArray","rewrite of file " + f1 + " returned null. newFile = "+ newFile);      return null;    }    try {      mountBLOB(resultFile,false);    } catch (    final IOException e) {      ConcurrentLog.warn("BLOBArray","rewrite of file " + f1 + " successfull, but read failed. resultFile = "+ resultFile);      return null;    }    ConcurrentLog.info("BLOBArray","rewrite of " + f1.getName() + " into "+ resultFile);    return resultFile;  }  ConcurrentLog.info("BLOBArray","merging " + f1.getName() + " with "+ f2.getName());  final File resultFile=mergeWorker(factory,this.keylength,this.ordering,f1,f2,newFile,writeBuffer);  if (resultFile == null) {    ConcurrentLog.warn("BLOBArray","merge of files " + f1 + ", "+ f2+ " returned null. newFile = "+ newFile);    return null;  }  try {    mountBLOB(resultFile,false);  } catch (  final IOException e) {    ConcurrentLog.warn("BLOBArray","merge of files " + f1 + ", "+ f2+ " successfull, but read failed. resultFile = "+ resultFile);    return null;  }  ConcurrentLog.info("BLOBArray","merged " + f1.getName() + " with "+ f2.getName()+ " into "+ resultFile);  return resultFile;}  }
class C{  public static Object deserialize(String str) throws IOException, ClassNotFoundException, CoderException {  ByteArrayInputStream bais=new ByteArrayInputStream(Base64Coder.decode(str));  return deserialize(bais);}  }
class C{  private void initialize(Versioned<byte[]> allocationData){  setVersion((ZkVersion)allocationData.getVersion());  byte[] data=allocationData.getValue();  if (null != data && data.length > 0) {    try {      ledgerIdLeftFromPrevAllocation=DLUtils.bytes2LedgerId(data);    } catch (    NumberFormatException nfe) {      LOG.warn("Invalid data found in allocator path {} : ",allocatePath,nfe);    }  }}  }
class C{  private final boolean isBluetoothPersistedStateOnBluetooth(){  return Settings.Global.getInt(mContentResolver,Settings.Global.BLUETOOTH_ON,0) == BLUETOOTH_ON_BLUETOOTH;}  }
class C{  public static int color8888to565(int color8888){  return ((color8888 >> 3) & 0x0000001F) | ((color8888 >> 5) & 0x000007E0) | ((color8888 >> 8) & 0x0000F800);}  }
class C{  public TrieNode(Character c){  super(c);  m_Children=new Hashtable<Character,TrieNode>(100);}  }
class C{  default B forceAddCustomEffects(final PotionMeta src){  final List<StatusEffect> effects=src.getCustomEffects();  if ((effects == null) || effects.isEmpty()) {    return this.getBuilder();  }  final M meta=this.meta();  effects.forEach(null);  return this.getBuilder();}  }
class C{  public LocalLogWriter(int level,PrintWriter logWriter,String connectionName){  super(level,logWriter,connectionName);}  }
class C{  public int put(int key,int value){  int previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  PositionMarker mark(){  PositionMarker m=new PositionMarker();  m.c_pos=mPosition;  m.currentStackSize=stackSize;  return m;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public static byte[] readBytes(InputStream in,int maxBytes) throws IOException {  byte[] result=new byte[maxBytes];  int bytesRead=readBytes(in,result);  if (bytesRead < maxBytes) {    byte[] tmp=new byte[bytesRead];    System.arraycopy(result,0,tmp,0,bytesRead);    result=tmp;  }  return result;}  }
class C{  public ScriptGenerator addInternal(String... parameters){  ContainerUtil.addAll(myInternalParameters,parameters);  return this;}  }
class C{  public boolean isUpdateReferences(){  return fUpdateReferences;}  }
class C{  public void addTileset(final TileSetDefinition set){  tilesets.add(set);}  }
class C{  public Future<Boolean> shutdownAwaiting(long timeoutForEach){  ExecutorService executor=Executors.newScheduledThreadPool(0);  return executor.submit(createShutdown(timeoutForEach));}  }
class C{  public NamedMapConverter(@SuppressWarnings("rawtypes") final Class<? extends Map> type,final Mapper mapper,final String entryName,final String keyName,final Class<?> keyType,final String valueName,final Class<?> valueType){  this(type,mapper,entryName,keyName,keyType,valueName,valueType,false,false,null);}  }
class C{  public void addListener(final IVisualCoverageListener listener){  listeners.add(listener);}  }
class C{  public static SetExpression notIn(String propertyName,Collection<? extends Object> values){  return notIn(propertyName,values.toArray());}  }
class C{  public void start(long interval,TimeUnit unit){  if (!isValid()) {    return;  }  long period=unit.toMillis(interval);  if (period < 0) {    return;  }  _profileTask.stop();  _profileTask.setPeriod(period);  _profileTask.start();  _state=StateProfile.ACTIVE;}  }
class C{  @Override public synchronized void close() throws IOException {  if (!this.closed) {    try {      if (!this.eof) {        exhaustInputStream(this);      }    }  finally {      this.eof=true;      this.closed=true;    }  }}  }
class C{  public static boolean asBoolean(Iterator iterator){  return iterator.hasNext();}  }
class C{  private void initMap(AccessProfile accessProfile){  _keyMap.put(Constants._computerSystem,CimObjectPathCreator.createInstance(Constants._cimSystem,accessProfile.getInteropNamespace()));  _keyMap.put(Constants._cimClient,wbemClient);  _keyMap.put(Constants._serialID,accessProfile.getserialID());  _keyMap.put(Constants.dbClient,_dbClient);  _keyMap.put(Constants._TimeCollected,System.currentTimeMillis());  _keyMap.put(Constants._Stats,new LinkedList<Stat>());  _keyMap.put(Constants._InteropNamespace,accessProfile.getInteropNamespace());  _keyMap.put(Constants.ACCESSPROFILE,accessProfile);  _keyMap.put(Constants.PROPS,accessProfile.getProps());  _keyMap.put(Constants.STORAGEPROCESSORS,new LinkedList<CIMObjectPath>());  _keyMap.put(Constants.STORAGEPORTS,new LinkedList<CIMObjectPath>());}  }
class C{  PositionMarker mark(){  PositionMarker m=new PositionMarker();  m.c_pos=mPosition;  m.currentStackSize=stackSize;  return m;}  }
class C{  public void moveLocationUp(RouteLocation rl){  int sequenceId=rl.getSequenceId();  if (sequenceId - 1 <= 0) {    rl.setSequenceId(_sequenceNum + 1);    resequenceIds();  } else {    RouteLocation replaceRl=getItemBySequenceId(sequenceId - 1);    if (replaceRl != null) {      replaceRl.setSequenceId(sequenceId);      rl.setSequenceId(sequenceId - 1);    } else {      resequenceIds();    }  }  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,null,Integer.toString(sequenceId));}  }
class C{  public void testPosNegFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=1;  int bSign=-1;  byte rBytes[]={-1,127,-10,-57,-101,-1,-1,-2,-2,-91,-2,31,-1,-11,125,-22,-83,30,95};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public MAVLinkMessage(MAVLinkSchema schema,int msgID,int systemID,int componentID){  this.schema=schema;  this.definition=schema.getMessageDefinition(msgID);  if (definition == null) {    throw new RuntimeException("Unknown mavlink message ID: " + msgID);  }  this.payload=new byte[definition.payloadLength];  this.payloadBB=ByteBuffer.wrap(payload);  payloadBB.order(schema.getByteOrder());  this.systemID=systemID;  this.componentID=componentID;  this.msgID=msgID;}  }
class C{  @Override protected boolean usePortal(final Player player){  if (!nextTo(player)) {    return false;  }  if (player.teleport(spot.getZone(),spot.getX(),spot.getY(),null,null)) {    player.stop();  }  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.801 -0500",hash_original_method="C737E8C6932B9A7F9D7E9BE338A74764",hash_generated_method="764BD918E60B6F85278690B0F168DBDB") private static boolean isEmptyOrNull(CharSequence s){  return s == null || (s.length() == 0);}  }
class C{  public void removeMethod(CtMethod m) throws NotFoundException {  checkModify();}  }
class C{  public boolean isExpiredDelivery() throws RcsPersistentStorageException, RcsGenericException {  try {    return mChatMessageInf.isExpiredDelivery();  } catch (  Exception e) {    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public SearchSourceBuilder postFilter(BytesReference postFilterBinary){  this.filterBinary=postFilterBinary;  return this;}  }
class C{  public static void main(String args[]){  Main jartool=new Main(System.out,System.err,"jar");  System.exit(jartool.run(args) ? 0 : 1);}  }
class C{  public void removeRelation(Relation relation){  relations.remove(relation);}  }
class C{  public void addAlTemp(int f1,int f2,int e1,int e2){  alGridCells[f1][e1].setTopLeft(true);  alGridCells[f2][e1].setTopRight(true);  alGridCells[f1][e2].setBottomLeft(true);  alGridCells[f2][e2].setBottomRight(true);}  }
class C{  static private void mauCanonical(Tree tree,NodeRef[] order,boolean[] wasSwapped){  mauCanonicalSub(tree,tree.getRoot(),0,order,wasSwapped);}  }
class C{  private VirtualFile[] expandLocaleToken(String[] pathlist,String[] locales,ConfigurationValue cv) throws ConfigurationException {  ArrayList<VirtualFile> list=new ArrayList<VirtualFile>(pathlist.length);  for (int i=0; i < pathlist.length; i++) {    String pathElement=pathlist[i];    int localeTokenIndex=pathElement.indexOf(LOCALE_TOKEN);    if (localeTokenIndex != -1) {      for (int j=0; j < locales.length; j++) {        String pathElementWithSubstitution=StringUtils.substitute(pathElement,LOCALE_TOKEN,locales[j]);        addPathElementToListAsVirtualFile(pathElementWithSubstitution,list,cv);      }    } else {      addPathElementToListAsVirtualFile(pathElement,list,cv);    }  }  VirtualFile[] vfa=new VirtualFile[list.size()];  list.toArray(vfa);  return vfa;}  }
class C{  public static boolean inVisualRange(IGame game,LosEffects los,Entity ae,Targetable target){  boolean teIlluminated=false;  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    Entity te=(Entity)target;    teIlluminated=te.isIlluminated();    if (te.isOffBoard()) {      return false;    }  }  if (!teIlluminated) {    int lightLvl=game.isPositionIlluminated(target.getPosition());    teIlluminated=lightLvl != Game.ILLUMINATED_NONE;  }  if ((ae.getPosition() == null) || (target.getPosition() == null)) {    return false;  }  if (los == null) {    los=LosEffects.calculateLos(game,ae.getId(),target);  }  int visualRange=getVisualRange(game,ae,los,teIlluminated);  Coords targetPos=target.getPosition();  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    Entity te=(Entity)target;    if (te.isVoidSigActive()) {      visualRange=visualRange / 4;    } else     if (te.hasWorkingMisc(MiscType.F_VISUAL_CAMO,-1)) {      visualRange=visualRange / 2;    } else     if (te.isChameleonShieldActive()) {      visualRange=visualRange / 2;    } else     if ((te instanceof Infantry) && !(te instanceof BattleArmor) && ((Infantry)te).hasSneakCamo()) {      visualRange=visualRange / 2;    }    if ((te instanceof Aero) && isGroundToAir(ae,target)) {      targetPos=Compute.getClosestFlightPath(ae.getId(),ae.getPosition(),te);    }  }  visualRange=Math.max(visualRange,1);  int distance;  distance=ae.getPosition().distance(targetPos);  distance+=2 * target.getAltitude();  return distance <= visualRange;}  }
class C{  protected void doStateDead(){  setColor(Color.red);  setState(State.terminated);}  }
class C{  public Boolean isNotifySwitches(){  return notifySwitches;}  }
class C{  @Override public String toString(){  return set.toString();}  }
class C{  public TypeProposalInfo(CompletionProposal proposal,String projectId,String docContext,String vfsId){  super(proposal,projectId,docContext,vfsId);}  }
class C{  @Override public IndexInput openInput(String name,IOContext context) throws IOException {  ensureOpen();  RAMFile file=fileMap.get(name);  if (file == null) {    throw new FileNotFoundException(name);  }  return new RAMInputStream(name,file);}  }
class C{  public static void close(OutputStream out){  try {    if (out != null) {      out.close();    }  } catch (  IOException ioE) {  }}  }
class C{  public static void seal(Context cx,Scriptable thisObj,Object[] args,Function funObj){  for (int i=0; i != args.length; ++i) {    Object arg=args[i];    if (!(arg instanceof ScriptableObject) || arg == Undefined.instance) {      if (!(arg instanceof Scriptable) || arg == Undefined.instance) {        throw reportRuntimeError("msg.shell.seal.not.object");      } else {        throw reportRuntimeError("msg.shell.seal.not.scriptable");      }    }  }  for (int i=0; i != args.length; ++i) {    Object arg=args[i];    ((ScriptableObject)arg).sealObject();  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  DistinctMap<String,Number> oper=new DistinctMap<String,Number>();  CollectorTestSink sortSink=new CollectorTestSink();  oper.distinct.setSink(sortSink);  oper.beginWindow(0);  HashMap<String,Number> input=new HashMap<String,Number>();  input.put("a",2);  oper.data.process(input);  input.clear();  input.put("a",2);  oper.data.process(input);  input.clear();  input.put("a",1000);  oper.data.process(input);  input.clear();  input.put("a",5);  oper.data.process(input);  input.clear();  input.put("a",2);  input.put("b",33);  oper.data.process(input);  input.clear();  input.put("a",33);  input.put("b",34);  oper.data.process(input);  input.clear();  input.put("b",34);  oper.data.process(input);  input.clear();  input.put("b",6);  input.put("a",2);  oper.data.process(input);  input.clear();  input.put("c",9);  oper.data.process(input);  oper.endWindow();  Assert.assertEquals("number emitted tuples",8,sortSink.collectedTuples.size());  int aval=0;  int bval=0;  int cval=0;  for (  Object o : sortSink.collectedTuples) {    for (    Map.Entry<String,Integer> e : ((HashMap<String,Integer>)o).entrySet()) {      String key=e.getKey();      if (key.equals("a")) {        aval+=e.getValue();      } else       if (key.equals("b")) {        bval+=e.getValue();      } else       if (key.equals("c")) {        cval+=e.getValue();      }    }  }  Assert.assertEquals("Total for key \"a\" ",1040,aval);  Assert.assertEquals("Total for key \"a\" ",73,bval);  Assert.assertEquals("Total for key \"a\" ",9,cval);}  }
class C{  public GaussianBlurRed8Bit(CachableRed src,double stdDevX,double stdDevY,RenderingHints rh){  super();  this.stdDevX=stdDevX;  this.stdDevY=stdDevY;  this.hints=rh;  xinset=surroundPixels(stdDevX,rh);  yinset=surroundPixels(stdDevY,rh);  Rectangle myBounds=src.getBounds();  myBounds.x+=xinset;  myBounds.y+=yinset;  myBounds.width-=2 * xinset;  myBounds.height-=2 * yinset;  if ((myBounds.width <= 0) || (myBounds.height <= 0)) {    myBounds.width=0;    myBounds.height=0;  }  ColorModel cm=fixColorModel(src);  SampleModel sm=src.getSampleModel();  int tw=sm.getWidth();  int th=sm.getHeight();  if (tw > myBounds.width)   tw=myBounds.width;  if (th > myBounds.height)   th=myBounds.height;  sm=cm.createCompatibleSampleModel(tw,th);  init(src,myBounds,cm,sm,src.getTileGridXOffset() + xinset,src.getTileGridYOffset() + yinset,null);  boolean highQuality=((hints != null) && RenderingHints.VALUE_RENDER_QUALITY.equals(hints.get(RenderingHints.KEY_RENDERING)));  if ((xinset != 0) && ((stdDevX < 2) || highQuality))   convOp[0]=new ConvolveOp(makeQualityKernelX(xinset * 2 + 1)); else   dX=(int)Math.floor(DSQRT2PI * stdDevX + 0.5f);  if ((yinset != 0) && ((stdDevY < 2) || highQuality))   convOp[1]=new ConvolveOp(makeQualityKernelY(yinset * 2 + 1)); else   dY=(int)Math.floor(DSQRT2PI * stdDevY + 0.5f);}  }
class C{  @Override public Object visit(Call call){  fmt.out("%s(",call.getMethod().getName());  boolean first=true;  for (  Expression param : call.getParams()) {    if (!first) {      fmt.out(",");    } else {      first=false;    }    param.accept(this);  }  fmt.out(")");  return null;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  private void readWrappedStream() throws IOException {  lastBytes[0]=lastBytes[1];  lastBytes[1]=(byte)nextBytes[0];  nextBytes[0]=nextBytes[1];  nextBytes[1]=nextBytes[2];  nextBytes[2]=in.read();}  }
class C{  private boolean advanceToEligibleSample(){  boolean haveNext=rollingBuffer.peekSample(sampleInfoHolder);  if (needKeyframe) {    while (haveNext && (sampleInfoHolder.flags & C.SAMPLE_FLAG_SYNC) == 0) {      rollingBuffer.skipSample();      haveNext=rollingBuffer.peekSample(sampleInfoHolder);    }  }  if (!haveNext) {    return false;  }  if (spliceOutTimeUs != Long.MIN_VALUE && sampleInfoHolder.timeUs >= spliceOutTimeUs) {    return false;  }  return true;}  }
class C{  public static boolean isAnimated(InputStream source){  final byte[] buffer=new byte[FRAME_HEADER_SIZE];  try {    source.read(buffer,0,FRAME_HEADER_SIZE);    int offset=0;    int frameHeaders=0;    while (source.read(buffer,offset,1) > 0) {      if (circularBufferMatchesBytePattern(buffer,offset + 1,FRAME_HEADER_START) && (circularBufferMatchesBytePattern(buffer,offset + 9,FRAME_HEADER_END_1) || circularBufferMatchesBytePattern(buffer,offset + 9,FRAME_HEADER_END_2))) {        frameHeaders++;        if (frameHeaders > 1) {          return true;        }      }      offset=(offset + 1) % buffer.length;    }  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }  return false;}  }
class C{  public void reconnect(){  openConnection(true);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  getDeclaredModifiers().addAll((Collection<? extends N4Modifier>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static WorkflowId randomUniqueWorkflowId(Workflow<?,?> workflow){  Name name=workflow.name().replaceUnsafeNameChars();  String randomize=format(".%010d",ThreadLocalRandom.current().nextInt(0,Integer.MAX_VALUE));  String nameAsString=trimToMaxLength(name.value(),MAX_ID_LENGTH - randomize.length());  return WorkflowId.of(assertValidSwfValue(nameAsString + randomize));}  }
class C{  private GraphElements(){}  }
class C{  @Override synchronized boolean isThresholdTypeValid(ObjectName object,String attribute,Comparable<?> value){  final GaugeMonitorObservedObject o=(GaugeMonitorObservedObject)getObservedObject(object);  if (o == null)   return false;  Class<? extends Number> c=classForType(o.getType());  return (isValidForType(highThreshold,c) && isValidForType(lowThreshold,c));}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,Math.exp(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return NODE_ID;case 2:  return VERSION;default :return null;}}  }
class C{  @Override public boolean equals(Object obj){  return (compareTo((SortContainer)obj) == 0);}  }
class C{  @DSSink({DSSinkKind.DATABASE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.462 -0500",hash_original_method="C80CA050416DA84901D4F7B0B2F41300",hash_generated_method="DD7ECBBE06923C0BEC652FE851DDA82B") public long execute(){  if (mPreparedStatement == null) {    throw new IllegalStateException("you must prepare this inserter before calling " + "execute");  }  try {    if (LOCAL_LOGV)     Log.v(TAG,"--- doing insert or replace in table " + mTableName);    return mPreparedStatement.executeInsert();  } catch (  SQLException e) {    Log.e(TAG,"Error executing InsertHelper with table " + mTableName,e);    return -1;  } finally {    mPreparedStatement=null;  }}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  private UnManagedVolume createUnManagedVolume(UnManagedVolume unManagedVolume,CIMInstance volumeInstance,String unManagedVolumeNativeGuid,StoragePool pool,StorageSystem system,String volumeNativeGuid,Map<String,VolHostIOObject> exportedVolumes,Set<String> existingVolumesInCG,Map<String,RemoteMirrorObject> volumeToRAGroupMap,Map<String,LocalReplicaObject> volumeToLocalReplicaMap,Map<String,Map<String,String>> volumeToSyncAspectMap,Set<String> poolSupportedSLONames,Map<String,Object> keyMap,Set<URI> srdfEnabledTargetVPools,Map<String,Set<String>> duplicateSyncAspectElementNameMap){  _logger.info("Create UnManagedVolume {}",unManagedVolumeNativeGuid);  try {    String volumeType=Types.REGULAR.toString();    Map<String,StringSet> unManagedVolumeInformation=null;    Map<String,String> unManagedVolumeCharacteristics=null;    boolean created=false;    if (null == unManagedVolume) {      unManagedVolume=new UnManagedVolume();      unManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));      unManagedVolume.setNativeGuid(unManagedVolumeNativeGuid);      unManagedVolume.setStorageSystemUri(system.getId());      created=true;      unManagedVolumeInformation=new HashMap<String,StringSet>();      unManagedVolumeCharacteristics=new HashMap<String,String>();    }    if (!created) {      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.AUTO_TIERING_POLICIES.toString(),"");      unManagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_AUTO_TIERING_ENABLED.toString(),"false");      unManagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_FULL_COPY.name(),FALSE);      unManagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_LOCAL_MIRROR.name(),FALSE);      unManagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_SNAP_SHOT.name(),FALSE);      unManagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.HAS_REPLICAS.name(),FALSE);      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.REPLICA_STATE.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.SYNC_STATE.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.SYNC_TYPE.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.SYNCHRONIZED_INSTANCE.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.IS_SYNC_ACTIVE.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.NEEDS_COPY_TO_TARGET.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.TECHNOLOGY_TYPE.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.SETTINGS_INSTANCE.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.FULL_COPIES.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.MIRRORS.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.SNAPSHOTS.name(),new StringSet());      unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.SNAPSHOT_SESSIONS.name(),new StringSet());      unManagedVolumeInformation=new HashMap<String,StringSet>();      StringSetMap volumeInfo=unManagedVolume.getVolumeInformation();      for (      String key : volumeInfo.keySet()) {        unManagedVolumeInformation.put(key,volumeInfo.get(key));      }      unManagedVolumeCharacteristics=unManagedVolume.getVolumeCharacterstics();    }    if (null != system) {      StringSet systemTypes=new StringSet();      systemTypes.add(system.getSystemType());      unManagedVolumeInformation.put(SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);    }    if (exportedVolumes != null && exportedVolumes.containsKey(volumeNativeGuid)) {      VolHostIOObject obj=exportedVolumes.get(volumeNativeGuid);      if (null != obj) {        StringSet bwValues=new StringSet();        bwValues.add(obj.getHostIoBw());        if (unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString()) == null) {          unManagedVolumeInformation.put(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString(),bwValues);        } else {          unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString()).replace(bwValues);        }        StringSet iopsVal=new StringSet();        iopsVal.add(obj.getHostIops());        if (unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString()) == null) {          unManagedVolumeInformation.put(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString(),iopsVal);        } else {          unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString()).replace(iopsVal);        }      }      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),TRUE);    } else {      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),FALSE);      StringSet bwValues=new StringSet();      bwValues.add("0");      if (unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString()) == null) {        unManagedVolumeInformation.put(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString(),bwValues);      } else {        unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString()).replace(bwValues);      }      StringSet iopsVal=new StringSet();      iopsVal.add("0");      if (unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString()) == null) {        unManagedVolumeInformation.put(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString(),iopsVal);      } else {        unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString()).replace(iopsVal);      }    }    if (system.checkIfVmax3()) {      if (poolSupportedSLONames.isEmpty() || !keyMap.containsKey(Constants.VOLUMES_WITH_SLOS)) {        unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_AUTO_TIERING_ENABLED.toString(),Boolean.FALSE.toString());      } else {        Map<String,String> volumesWithSLO=(Map<String,String>)keyMap.get(Constants.VOLUMES_WITH_SLOS);        if (volumesWithSLO.containsKey(volumeNativeGuid)) {          String sloName=volumesWithSLO.get(volumeNativeGuid);          _logger.debug("formattedSLOName: {}",sloName);          updateSLOPolicies(poolSupportedSLONames,unManagedVolumeInformation,unManagedVolumeCharacteristics,sloName);        } else {          unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_AUTO_TIERING_ENABLED.toString(),Boolean.FALSE.toString());        }      }    }    if (existingVolumesInCG != null && existingVolumesInCG.contains(volumeNativeGuid)) {      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),TRUE);    } else {      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),FALSE);    }    Object raidLevelObj;    String isNotIngestableReason;    String isBound;    String isThinlyProvisioned;    String isMetaVolume;    String allocCapacity;    if (keyMap.containsKey(Constants.IS_NEW_SMIS_PROVIDER) && Boolean.valueOf(keyMap.get(Constants.IS_NEW_SMIS_PROVIDER).toString())) {      unManagedVolume.setLabel(getCIMPropertyValue(volumeInstance,"ElementName"));      raidLevelObj=volumeInstance.getPropertyValue(SupportedVolumeInformation.RAID_LEVEL.getAlternateKey());      isBound=getCIMPropertyValue(volumeInstance,SupportedVolumeCharacterstics.IS_BOUND.getAlterCharacterstic());      isNotIngestableReason=isVolumeIngestable(volumeInstance,isBound,USAGE,unManagedVolumeNativeGuid,duplicateSyncAspectElementNameMap);      isThinlyProvisioned=getCIMPropertyValue(volumeInstance,THINLY_PROVISIONED);      isMetaVolume=getCIMPropertyValue(volumeInstance,SupportedVolumeCharacterstics.IS_METAVOLUME.getAlterCharacterstic());      allocCapacity=getAllocatedCapacity(volumeInstance,_volumeToSpaceConsumedMap,system.checkIfVmax3());    } else {      unManagedVolume.setLabel(getCIMPropertyValue(volumeInstance,SVELEMENT_NAME));      isBound=getCIMPropertyValue(volumeInstance,SupportedVolumeCharacterstics.IS_BOUND.getCharacterstic());      raidLevelObj=volumeInstance.getPropertyValue(SupportedVolumeInformation.RAID_LEVEL.getInfoKey());      isNotIngestableReason=isVolumeIngestable(volumeInstance,isBound,SVUSAGE,unManagedVolumeNativeGuid,duplicateSyncAspectElementNameMap);      isThinlyProvisioned=getCIMPropertyValue(volumeInstance,EMC_THINLY_PROVISIONED);      isMetaVolume=getCIMPropertyValue(volumeInstance,SupportedVolumeCharacterstics.IS_METAVOLUME.getCharacterstic());      allocCapacity=getCIMPropertyValue(volumeInstance,EMC_ALLOCATED_CAPACITY);    }    if (null != raidLevelObj) {      StringSet raidLevels=new StringSet();      raidLevels.add(raidLevelObj.toString());      unManagedVolumeInformation.put(SupportedVolumeInformation.RAID_LEVEL.toString(),raidLevels);    }    if (null != isBound) {      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_BOUND.toString(),isBound);    }    if (null != isThinlyProvisioned) {      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),isThinlyProvisioned);    }    if (null != isMetaVolume) {      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_METAVOLUME.toString(),isMetaVolume);    }    if (isNotIngestableReason == null) {      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),TRUE);    } else {      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),FALSE);      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_NOT_INGESTABLE_REASON.toString(),isNotIngestableReason);    }    if (volumeToRAGroupMap.containsKey(unManagedVolume.getNativeGuid())) {      RemoteMirrorObject rmObj=volumeToRAGroupMap.get(unManagedVolume.getNativeGuid());      _logger.info("Found RA Object {}",rmObj.toString());      if (RemoteMirrorObject.Types.SOURCE.toString().equalsIgnoreCase(rmObj.getType())) {        _logger.info("Found Source, updating targets {}",rmObj.getTargetVolumenativeGuids());        if (unManagedVolumeInformation.get(SupportedVolumeInformation.REMOTE_MIRRORS.toString()) == null) {          unManagedVolumeInformation.put(SupportedVolumeInformation.REMOTE_MIRRORS.toString(),rmObj.getTargetVolumenativeGuids());        } else {          if (null == rmObj.getTargetVolumenativeGuids() || rmObj.getTargetVolumenativeGuids().isEmpty()) {            unManagedVolumeInformation.get(SupportedVolumeInformation.REMOTE_MIRRORS.toString()).clear();          } else {            unManagedVolumeInformation.get(SupportedVolumeInformation.REMOTE_MIRRORS.toString()).replace(rmObj.getTargetVolumenativeGuids());          }        }        volumeType=Types.SOURCE.toString();      } else       if (RemoteMirrorObject.Types.TARGET.toString().equalsIgnoreCase(rmObj.getType())) {        _logger.info("Found Target {}, updating copyMode {}, RA Group",unManagedVolume.getNativeGuid(),rmObj.getCopyMode());        StringSet parentVolume=new StringSet();        parentVolume.add(rmObj.getSourceVolumeNativeGuid());        unManagedVolumeInformation.put(SupportedVolumeInformation.REMOTE_MIRROR_SOURCE_VOLUME.toString(),parentVolume);        StringSet raGroup=new StringSet();        if (rmObj.getTargetRaGroupUri() != null) {          raGroup.add(rmObj.getTargetRaGroupUri().toString());        } else {          _logger.warn("Source Array's RA Group is not populated. Check if Source array is discovered." + " Target: {}",unManagedVolume.getNativeGuid());        }        volumeType=Types.TARGET.toString();        unManagedVolumeInformation.put(SupportedVolumeInformation.REMOTE_MIRROR_RDF_GROUP.toString(),raGroup);      }      StringSet copyModes=new StringSet();      copyModes.add(rmObj.getCopyMode());      if (unManagedVolumeInformation.get(SupportedVolumeInformation.REMOTE_COPY_MODE.toString()) == null) {        unManagedVolumeInformation.put(SupportedVolumeInformation.REMOTE_COPY_MODE.toString(),copyModes);      } else {        unManagedVolumeInformation.get(SupportedVolumeInformation.REMOTE_COPY_MODE.toString()).replace(copyModes);      }      StringSet remoteVolumeType=new StringSet();      remoteVolumeType.add(rmObj.getType());      unManagedVolumeInformation.put(SupportedVolumeInformation.REMOTE_VOLUME_TYPE.toString(),remoteVolumeType);      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.REMOTE_MIRRORING.toString(),TRUE);    } else {      unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.REMOTE_MIRRORING.toString(),FALSE);    }    boolean isLocalReplica=false;    if (volumeToLocalReplicaMap.containsKey(unManagedVolume.getNativeGuid())) {      _logger.info("Found in localReplicaMap {}",unManagedVolume.getNativeGuid());      LocalReplicaObject lrObj=volumeToLocalReplicaMap.get(unManagedVolume.getNativeGuid());      isLocalReplica=lrObj.isReplica();      StringSet fullCopies=lrObj.getFullCopies();      if (fullCopies != null && !fullCopies.isEmpty()) {        unManagedVolumeInformation.put(SupportedVolumeInformation.FULL_COPIES.name(),fullCopies);      }      StringSet mirrors=lrObj.getMirrors();      if (mirrors != null && !mirrors.isEmpty()) {        unManagedVolumeInformation.put(SupportedVolumeInformation.MIRRORS.name(),mirrors);      }      StringSet snapshots=lrObj.getSnapshots();      if (snapshots != null && !snapshots.isEmpty()) {        unManagedVolumeInformation.put(SupportedVolumeInformation.SNAPSHOTS.name(),snapshots);      }      if (lrObj.hasReplica()) {        unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.HAS_REPLICAS.name(),TRUE);      }      if (LocalReplicaObject.Types.FullCopy.equals(lrObj.getType())) {        _logger.info("Found Clone {}",unManagedVolume.getNativeGuid());        unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_FULL_COPY.name(),TRUE);        StringSet sourceVolume=new StringSet();        sourceVolume.add(lrObj.getSourceNativeGuid());        unManagedVolumeInformation.put(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.name(),sourceVolume);        StringSet isSyncActive=new StringSet();        isSyncActive.add(new Boolean(lrObj.isSyncActive()).toString());        unManagedVolumeInformation.put(SupportedVolumeInformation.IS_SYNC_ACTIVE.name(),isSyncActive);        StringSet replicaState=new StringSet();        replicaState.add(lrObj.getReplicaState());        unManagedVolumeInformation.put(SupportedVolumeInformation.REPLICA_STATE.name(),replicaState);      } else       if (LocalReplicaObject.Types.BlockMirror.equals(lrObj.getType())) {        _logger.info("Found Local Mirror {}",unManagedVolume.getNativeGuid());        unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_LOCAL_MIRROR.name(),TRUE);        StringSet sourceVolume=new StringSet();        sourceVolume.add(lrObj.getSourceNativeGuid());        unManagedVolumeInformation.put(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.name(),sourceVolume);        StringSet syncState=new StringSet();        syncState.add(lrObj.getSyncState());        unManagedVolumeInformation.put(SupportedVolumeInformation.SYNC_STATE.name(),syncState);        StringSet syncType=new StringSet();        syncType.add(lrObj.getSyncType());        unManagedVolumeInformation.put(SupportedVolumeInformation.SYNC_TYPE.name(),syncType);        String syncedInst=lrObj.getSynchronizedInstance();        if (syncedInst != null) {          StringSet synchronizedInstance=new StringSet();          synchronizedInstance.add(syncedInst);          unManagedVolumeInformation.put(SupportedVolumeInformation.SYNCHRONIZED_INSTANCE.name(),synchronizedInstance);        }      } else       if (LocalReplicaObject.Types.BlockSnapshot.equals(lrObj.getType())) {        _logger.info("Found Snapshot {}",unManagedVolume.getNativeGuid());        unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_SNAP_SHOT.name(),TRUE);        StringSet sourceVolume=new StringSet();        sourceVolume.add(lrObj.getSourceNativeGuid());        unManagedVolumeInformation.put(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.name(),sourceVolume);        StringSet isSyncActive=new StringSet();        isSyncActive.add(new Boolean(lrObj.isSyncActive()).toString());        unManagedVolumeInformation.put(SupportedVolumeInformation.IS_SYNC_ACTIVE.name(),isSyncActive);        StringSet needsCopyToTarget=new StringSet();        needsCopyToTarget.add(new Boolean(lrObj.isNeedsCopyToTarget()).toString());        unManagedVolumeInformation.put(SupportedVolumeInformation.NEEDS_COPY_TO_TARGET.name(),needsCopyToTarget);        StringSet technologyType=new StringSet();        technologyType.add(lrObj.getTechnologyType());        unManagedVolumeInformation.put(SupportedVolumeInformation.TECHNOLOGY_TYPE.name(),technologyType);        String settingsInst=lrObj.getSettingsInstance();        if (settingsInst != null) {          StringSet settingsInstance=new StringSet();          settingsInstance.add(settingsInst);          unManagedVolumeInformation.put(SupportedVolumeInformation.SETTINGS_INSTANCE.name(),settingsInstance);        }      }    }    if (volumeToSyncAspectMap.containsKey(unManagedVolume.getNativeGuid())) {      _logger.info("Found in SyncAspectMap {}",unManagedVolume.getNativeGuid());      StringSet syncAspectInfoForForVolume=new StringSet();      Map<String,String> syncAspectMap=volumeToSyncAspectMap.get(unManagedVolume.getNativeGuid());      for (      String syncAspectKey : syncAspectMap.keySet()) {        String syncAspectName=syncAspectKey.split(Constants.COLON)[1];        String syncAspectObjPath=syncAspectMap.get(syncAspectKey);        String syncAspectInfo=syncAspectName + Constants.COLON + syncAspectObjPath;        syncAspectInfoForForVolume.add(syncAspectInfo);      }      unManagedVolumeInformation.put(SupportedVolumeInformation.SNAPSHOT_SESSIONS.name(),syncAspectInfoForForVolume);    }    if (!isLocalReplica) {      StringSet isSyncActive=new StringSet();      isSyncActive.add(TRUE);      unManagedVolumeInformation.put(SupportedVolumeInformation.IS_SYNC_ACTIVE.name(),isSyncActive);    }    if (null != pool) {      unManagedVolume.setStoragePoolUri(pool.getId());      StringSet pools=new StringSet();      pools.add(pool.getId().toString());      unManagedVolumeInformation.put(SupportedVolumeInformation.STORAGE_POOL.toString(),pools);      StringSet driveTypes=pool.getSupportedDriveTypes();      if (null != driveTypes) {        unManagedVolumeInformation.put(SupportedVolumeInformation.DISK_TECHNOLOGY.toString(),driveTypes);      }      StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(_dbClient,pool.getId(),unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString()),srdfEnabledTargetVPools,null,volumeType);      _logger.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));      if (null == matchedVPools || matchedVPools.isEmpty()) {        unManagedVolume.getSupportedVpoolUris().clear();      } else {        unManagedVolume.getSupportedVpoolUris().replace(matchedVPools);        _logger.info("Replaced Pools :" + Joiner.on("\t").join(unManagedVolume.getSupportedVpoolUris()));      }    }    if (allocCapacity != null) {      StringSet allocCapacitySet=new StringSet();      allocCapacitySet.add(allocCapacity);      unManagedVolumeInformation.put(SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocCapacitySet);    }    StringSet provCapacity=new StringSet();    provCapacity.add(String.valueOf(returnProvisionedCapacity(volumeInstance,keyMap)));    unManagedVolumeInformation.put(SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);    injectVolumeInformation(unManagedVolume,volumeInstance,unManagedVolumeInformation);    injectVolumeCharacterstics(unManagedVolume,volumeInstance,unManagedVolumeCharacteristics);    unManagedVolume.getUnmanagedExportMasks().clear();    unManagedVolume.getInitiatorUris().clear();    unManagedVolume.getInitiatorNetworkIds().clear();    Object wwn=getCIMPropertyValue(volumeInstance,SmisConstants.CP_WWN_NAME_ALT);    if (null == wwn) {      wwn=getCIMPropertyValue(volumeInstance,SmisConstants.CP_WWN_NAME);    }    unManagedVolume.setWwn(String.valueOf(wwn));    if (created) {      _unManagedVolumesInsert.add(unManagedVolume);    } else {      _unManagedVolumesUpdate.add(unManagedVolume);    }  } catch (  Exception e) {    _logger.error("Exception: ",e);  }  return unManagedVolume;}  }
class C{  public static <S>S fromSpec(String spec,final Class<S> type) throws IllegalArgumentException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {  return fromSpec(NO_CONTEXT,spec,type,null,null);}  }
class C{  public ArrayMemberValue(ConstPool cp){  super('[',cp);  type=null;  values=null;}  }
class C{  public boolean verify(){  return this.verify;}  }
class C{  protected void calcFormats(){  if (mValueDigitsToUse == -1)   mValueFormatDigits=Utils.getPieFormatDigits(mDeltaY); else   mValueFormatDigits=mValueDigitsToUse;  StringBuffer b=new StringBuffer();  for (int i=0; i < mValueFormatDigits; i++) {    if (i == 0)     b.append(".");    b.append("0");  }  mFormatValue=new DecimalFormat("###,###,###,##0" + b.toString());}  }
class C{  public static boolean sameDocumentURI(String uri){  return (uri != null && (uri.length() == 0 || uri.charAt(0) == '#'));}  }
class C{  public static String stripSignatureToFQN(String signature) throws IllegalArgumentException {  signature=Signature.getTypeErasure(signature);  signature=Signature.getElementType(signature);  return Signature.toString(signature);}  }
class C{  static public boolean startStandardReport(ProcessInfo pi,boolean IsDirectPrint){  pi.setPrintPreview(!IsDirectPrint);  return startStandardReport(pi);}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  public final AC shrink(float w,int... indexes){  Float sw=new Float(w);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setShrink(sw);  }  return this;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public LinearGrowthModel(Parameter slopeParameter,Type units){  this(LinearGrowthModelParser.LINEAR_GROWTH_MODEL,slopeParameter,units);}  }
class C{  public SqlConnectionManager(){}  }
class C{  private int compareURIs(final URI leftURI,final URI rightURI){  return leftURI.stringValue().compareTo(rightURI.stringValue());}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.586 -0500",hash_original_method="71FF02CB37AAD9FA42E430343744C95D",hash_generated_method="6A4D437F0A4E6015B235F63BCD713402") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onServiceStateChanged(ServiceState serviceState){}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();  } else   if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    insert();    dispose();  } else   if (e.getSource() == bDelete) {    int no=delete();    if (no == 0)     ADialog.warn(m_WindowNo,this,"ValuePreferenceNotFound"); else     ADialog.info(m_WindowNo,this,"ValuePreferenceDeleted",String.valueOf(no));    dispose();  } else   setExplanation();}  }
class C{  @DSSpec(DSCat.ANDROID_ACTIVITY_STARTING) @DSSink({DSSinkKind.IPC}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.349 -0400",hash_original_method="5BE63D387764C79BADD7265D6253130D",hash_generated_method="228971E4038BBD75957201B044AA9C5F") @Override public void startActivityForResult(Intent intent,int requestCode){  if (requestCode != -1 && (requestCode & 0xffff0000) != 0) {    throw new IllegalArgumentException("Can only use lower 16 bits for requestCode");  }  super.startActivityForResult(intent,requestCode);}  }
class C{  public static <T>OneDriveServiceException createFromConnection(final IHttpRequest request,final T serializable,final ISerializer serializer,final IConnection connection) throws IOException {  final String method=connection.getRequestMethod();  final String url=request.getRequestUrl().toString();  final List<String> requestHeaders=new LinkedList<>();  for (  final HeaderOption option : request.getHeaders()) {    requestHeaders.add(option.getName() + " : " + option.getValue());  }  final String requestBody;  if (serializable instanceof byte[]) {    final byte[] bytes=(byte[])serializable;    StringBuilder sb=new StringBuilder();    sb.append("byte[").append(bytes.length).append("]");    sb.append(" {");    for (int i=0; i < MAX_BYTE_COUNT_BEFORE_TRUNCATION && i < bytes.length; i++) {      sb.append(bytes[i]).append(", ");    }    if (bytes.length > MAX_BYTE_COUNT_BEFORE_TRUNCATION) {      sb.append(TRUNCATION_MARKER).append("}");    }    requestBody=sb.toString();  } else   if (serializable != null) {    requestBody=serializer.serializeObject(serializable);  } else {    requestBody=null;  }  final int responseCode=connection.getResponseCode();  final List<String> responseHeaders=new LinkedList<>();  final Map<String,String> headers=connection.getHeaders();  for (  final String key : headers.keySet()) {    final String fieldPrefix;    if (key == null) {      fieldPrefix="";    } else {      fieldPrefix=key + " : ";    }    responseHeaders.add(fieldPrefix + headers.get(key));  }  final String responseMessage=connection.getResponseMessage();  final String rawOutput=DefaultHttpProvider.streamToString(connection.getInputStream());  OneDriveErrorResponse error=null;  Exception parsingException=null;  final String contentType=headers.get(DefaultHttpProvider.CONTENT_TYPE_HEADER_NAME);  if (contentType != null && contentType.contains(DefaultHttpProvider.JSON_CONTENT_TYPE)) {    try {      error=serializer.deserializeObject(rawOutput,OneDriveErrorResponse.class);    } catch (    final Exception ex) {      parsingException=ex;    }  }  if (error == null) {    error=new OneDriveErrorResponse();    error.error=new OneDriveError();    error.error.code="Unable to parse error response message";    error.error.message="Raw error: " + rawOutput;    if (parsingException != null) {      error.error.innererror=new OneDriveInnerError();      error.error.innererror.code=parsingException.getMessage();    }  }  if (responseCode == INTERNAL_SERVER_ERROR) {    return new OneDriveFatalServiceException(method,url,requestHeaders,requestBody,responseCode,responseMessage,responseHeaders,error);  }  return new OneDriveServiceException(method,url,requestHeaders,requestBody,responseCode,responseMessage,responseHeaders,error);}  }
class C{  protected boolean hasAggregateFunctionA(Collection<? extends AnnotatedExpression> c){  for (  AnnotatedExpression aexpr : c) {    if (hasAggregateFunction(aexpr.getExpression()))     return true;  }  return false;}  }
class C{  public T caseAbstract_(Abstract_ object){  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.STRING_EVALUATOR__TOTO:    return getToto();case GamlPackage.STRING_EVALUATOR__EXPR:  return getExpr();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isSetVersionedValue(){  return this.versionedValue != null;}  }
class C{  public boolean isIncidenceSetMember(HGPersistentHandle link,HGPersistentHandle target){  IncidenceSet is=null;  if (forceCache || (!ignoreCache && graph.isIncidenceSetLoaded(target))) {    is=graph.getIncidenceSet(target);    HGSearchResult<HGHandle> rs=is.getSearchResult();    try {      while (rs.hasNext())       if (rs.next().equals(link))       return true;    }  finally {      rs.close();    }  } else {    HGSearchResult<HGPersistentHandle> rs=graph.getStore().getIncidenceResultSet(target);    try {      while (rs.hasNext())       if (rs.next().equals(link))       return true;    }  finally {      rs.close();    }  }  return false;}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  protected final boolean executePredicates(XPathContext xctxt,DTM dtm,int currentNode) throws javax.xml.transform.TransformerException {  boolean result=true;  boolean positionAlreadySeen=false;  int n=getPredicateCount();  try {    xctxt.pushSubContextList(this);    for (int i=0; i < n; i++) {      xctxt.pushPredicatePos(i);      try {        XObject pred=m_predicates[i].execute(xctxt);        try {          if (XObject.CLASS_NUMBER == pred.getType()) {            int pos=(int)pred.num();            if (positionAlreadySeen) {              result=(pos == 1);              break;            } else {              positionAlreadySeen=true;              if (!checkProximityPosition(xctxt,i,dtm,currentNode,pos)) {                result=false;                break;              }            }          } else           if (!pred.boolWithSideEffects()) {            result=false;            break;          }        }  finally {          pred.detach();        }      }  finally {        xctxt.popPredicatePos();      }    }  }  finally {    xctxt.popSubContextList();  }  return result;}  }
class C{  public HistogramBuilder interval(long interval){  this.interval=interval;  return this;}  }
class C{  public final boolean isBlankFinal(){  return isFinal() && !isSynthetic() && getValue() == null;}  }
class C{  public void search(final List<NaviNode> nodes,final List<NaviEdge> edges,final String searchString){  m_lastSearchString=searchString;  clearResults();  final List<NaviNode> filteredNodes=CResultFilter.filteredNodes(nodes,m_settings.isOnlySelected(),m_settings.isOnlyVisible());  final List<NaviEdge> filteredEdges=CResultFilter.filteredEdges(edges,m_settings.isOnlySelected(),m_settings.isOnlyVisible());  searchAll(filteredNodes,filteredEdges,searchString);  Collections.sort(m_results,new CSearchResultComparator());  m_cursor.setResults(m_results);}  }
class C{  public void testFailedOnInvalidTimestampSequence(){  checkFail("{ts '2016-08-26 13:15:08,12345'}");  checkFail("{ts'2016-08-26 13:15:08'}");  checkFail("{ts 2016-08-26 13:15:08'}");  checkFail("{ts '2016-08-26 13:15:08}");  checkFail("{ts '16-08-26 13:15:08'}");  checkFail("{ts '2016-08-26 3:25:08'}");  checkFail("{ts '2016-08 26 03:25:08'}");  checkFail("{ts '2016-08-26 03 25:08'}");  checkFail("{t s '2016-08-26 13:15:08''}");  checkFail("select {ts '2016-08-26 13:15:08' from table;");  checkFail("select {}ts '2016-08-26 13:15:08'} from table;");}  }
class C{  @Description(summary="Switch the source code to match the current JDK.") public void switchSource(){  switchSource(true);}  }
class C{  private Connections(Context context){  connections=new HashMap<String,Connection>();  persistence=new Persistence(context);  try {    List<Connection> l=persistence.restoreConnections(context);    for (    Connection c : l) {      connections.put(c.handle(),c);    }  } catch (  PersistenceException e) {    e.printStackTrace();  }}  }
class C{  public Pair(V lh,W rh){  lhSide=lh;  rhSide=rh;}  }
class C{  public void write(Buffer buffer) throws NetworkException {  mRtpTransmitter.sendRtpPacket(buffer);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public static Float convertLetterSpacing(Element e){  Value v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.LETTER_SPACING_INDEX);  if (v.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT) {    return null;  }  return new Float(v.getFloatValue());}  }
class C{  public static void copyValues(AVList srcList,AVList destList,String[] keys,boolean forceOverwrite){  if (WWUtil.isEmpty(srcList) || WWUtil.isEmpty(destList) || WWUtil.isEmpty(keys)|| keys.length == 0) {    return;  }  for (  String key : keys) {    if (WWUtil.isEmpty(key) || !srcList.hasKey(key)) {      continue;    }    Object o=srcList.getValue(key);    if (!destList.hasKey(key) || forceOverwrite) {      destList.setValue(key,o);    }  }}  }
class C{  private void doLoad(CrossListsModifyForm frm,String courseOfferingId) throws Exception {  if (courseOfferingId == null || courseOfferingId.trim().length() == 0)   throw new Exception(MSG.errorUniqueIdNeeded());  CourseOfferingDAO coDao=new CourseOfferingDAO();  CourseOffering co=coDao.get(Long.valueOf(courseOfferingId));  InstructionalOffering io=co.getInstructionalOffering();  sessionContext.checkPermission(io,Right.InstructionalOfferingCrossLists);  ArrayList offerings=new ArrayList(io.getCourseOfferings());  Collections.sort(offerings,new CourseOfferingComparator(CourseOfferingComparator.COMPARE_BY_CTRL_CRS));  frm.setInstrOfferingId(io.getUniqueId());  frm.setCtrlCrsOfferingId(io.getControllingCourseOffering().getUniqueId());  frm.setReadOnlyCrsOfferingId(null);  frm.setSubjectAreaId(co.getSubjectArea().getUniqueId());  frm.setInstrOfferingName(io.getCourseNameWithTitle());  frm.setOwnedInstrOffr(true);  frm.setIoLimit(io.getLimit());  frm.setUnlimited(io.hasUnlimitedEnrollment());  for (Iterator i=offerings.iterator(); i.hasNext(); ) {    CourseOffering co1=((CourseOffering)i.next());    frm.addToCourseOfferings(co1,sessionContext.getUser().getCurrentAuthority().hasRight(Right.DepartmentIndependent) || sessionContext.getUser().getCurrentAuthority().hasQualifier(co1.getDepartment()),sessionContext.hasPermission(co1,Right.CourseOfferingDeleteFromCrossList));    frm.addToOriginalCourseOfferings(co1);  }}  }
class C{  public DropTargetDropEvent(DropTargetContext dtc,Point cursorLocn,int dropAction,int srcActions,boolean isLocal){  this(dtc,cursorLocn,dropAction,srcActions);  isLocalTx=isLocal;}  }
class C{  protected void addPartPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Aggregator_part_feature"),getString("_UI_PropertyDescriptor_description","_UI_Aggregator_part_feature","_UI_Aggregator_type"),EipPackage.Literals.AGGREGATOR__PART,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public Matrix3f zero(){  MemUtil.INSTANCE.zero(this);  return this;}  }
class C{  public static boolean isDate(String year,String month,String day){  if (!(isYear(year) && isMonth(month) && isDay(day)))   return false;  int intYear=Integer.parseInt(year);  int intMonth=Integer.parseInt(month);  int intDay=Integer.parseInt(day);  if (intDay > daysInMonth[intMonth - 1])   return false;  if ((intMonth == 2) && (intDay > daysInFebruary(intYear)))   return false;  return true;}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    return result;  }  return false;}  }
class C{  @Override public int read(){  return (pos < count) ? (buf[pos++] & 0xff) : -1;}  }
class C{  public static Attaching attach(Constraint... constraints){  return new Attaching(Arrays.asList(constraints),null);}  }
class C{  protected void drawDomainCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){  if (!axis.getRange().contains(value)) {    return;  }  Line2D line;  if (orientation == PlotOrientation.VERTICAL) {    double xx=axis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);    line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());  } else {    double yy=axis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);    line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);  }  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  g2.setStroke(stroke);  g2.setPaint(paint);  g2.draw(line);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);}  }
class C{  public boolean displayNotification(){  return true;}  }
class C{  public boolean isTag(String field){  return (qualifierNameMap.get(field) == null && displayNameMap.get(field) == null);}  }
class C{  public static PrivateKey loadPrivateKeyFromPemFile(final String keyFile) throws IOException, InvalidKeySpecException, NoSuchAlgorithmException {  final PKCS8EncodedKeySpec privateKeySpec=new PKCS8EncodedKeySpec(loadPemFileAsBytes(keyFile));  final PrivateKey privateKey=KeyFactory.getInstance(ALGORITHM).generatePrivate(privateKeySpec);  return privateKey;}  }
class C{  @Override public synchronized boolean containsAll(Collection<?> collection){  return super.containsAll(collection);}  }
class C{  public void testSequenceResponses() throws Throwable {  ClientSequencer sequencer=new ClientSequencer(new ClientSessionState(UUID.randomUUID()));  long sequence1=sequencer.nextRequest();  long sequence2=sequencer.nextRequest();  assertTrue(sequence2 == sequence1 + 1);  CommandResponse commandResponse=CommandResponse.builder().withStatus(Response.Status.OK).withIndex(2).withEventIndex(0).build();  QueryResponse queryResponse=QueryResponse.builder().withStatus(Response.Status.OK).withIndex(2).withEventIndex(0).build();  AtomicBoolean run=new AtomicBoolean();  sequencer.sequenceResponse(sequence2,queryResponse,null);  sequencer.sequenceResponse(sequence1,commandResponse,null);  assertTrue(run.get());}  }
class C{  public void reset(){}  }
class C{  public IgfsMode mode(Path path){  return modeRslvr.resolveMode(convert(path));}  }
class C{  public void dropDefaultTables(){  boolean shouldLogExceptionStackTrace=getSession().getSessionLog().shouldLogExceptionStackTrace();  getSession().getSessionLog().setShouldLogExceptionStackTrace(false);  try {    JPAMTableCreator tableCreator=getDefaultTableCreator(true);    tableCreator.dropTables(this.session,this);    dropSequences();    dropDatabaseSchemas();  } catch (  DatabaseException ex) {  } finally {    getSession().getSessionLog().setShouldLogExceptionStackTrace(shouldLogExceptionStackTrace);  }  if (this.session.getDatabaseEventListener() != null) {    this.session.getDatabaseEventListener().remove(this.session);    this.session.getDatabaseEventListener().register(this.session);  }}  }
class C{  protected void update(boolean first){  HashSet previouslySelectedNodes=new HashSet();  Iterator i=selectedNodes.entrySet().iterator();  while (i.hasNext()) {    Map.Entry e=(Map.Entry)i.next();    NodeList nl=(NodeList)e.getValue();    for (int j=0; j < nl.getLength(); j++) {      Node n=nl.item(j);      xblManager.getRecord(n).contentElement=null;      previouslySelectedNodes.add(n);    }  }  i=contentElementList.iterator();  while (i.hasNext()) {    NodeEventTarget n=(NodeEventTarget)i.next();    n.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",contentElementDomAttrModifiedEventListener,false);  }  contentElementList.clear();  selectedNodes.clear();  boolean updated=false;  for (Node n=shadowTree.getFirstChild(); n != null; n=n.getNextSibling()) {    if (update(first,n)) {      updated=true;    }  }  if (updated) {    HashSet newlySelectedNodes=new HashSet();    i=selectedNodes.entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      NodeList nl=(NodeList)e.getValue();      for (int j=0; j < nl.getLength(); j++) {        Node n=nl.item(j);        newlySelectedNodes.add(n);      }    }    HashSet removed=new HashSet();    removed.addAll(previouslySelectedNodes);    removed.removeAll(newlySelectedNodes);    HashSet added=new HashSet();    added.addAll(newlySelectedNodes);    added.removeAll(previouslySelectedNodes);    if (!first) {      xblManager.shadowTreeSelectedContentChanged(removed,added);    }  }}  }
class C{  public ReceivedPointerTracker(Context context){  mThresholdActivePointer=ViewConfiguration.get(context).getScaledTouchSlop() * COEFFICIENT_ACTIVE_POINTER;}  }
class C{  public JoinGroupNode(final IGroupMemberNode child){  super();  addChild(child);}  }
class C{  public static void init() throws Exception {  try {    TokenConf.getInstance().load();  } catch (  Exception e) {    log.error("Failed to load token conf",e);  }  currentTokens=new ArrayList<>(TokenConf.getInstance().getTokens());  initialized=true;}  }
class C{  public UrbanSimZoneCSVWriterV2(String matsim4opusTempDirectory,String matsimOutputDirectory){  this.matsim4opusTempDirectory=matsim4opusTempDirectory;  this.matsimOutputDirectory=matsimOutputDirectory;  try {    log.info("Initializing UrbanSimZoneCSVWriterV2 ...");    zoneWriter=IOUtils.getBufferedWriter(matsim4opusTempDirectory + FILE_NAME);    log.info("Writing data into " + matsim4opusTempDirectory + FILE_NAME+ " ...");    zoneWriter.write(Labels.ZONE_ID + "," + Labels.ACCESSIBILITY_BY_FREESPEED+ ","+ Labels.ACCESSIBILITY_BY_CAR+ ","+ Labels.ACCESSIBILITY_BY_BIKE+ ","+ Labels.ACCESSIBILITY_BY_WALK+ ","+ Labels.ACCESSIBILITY_BY_PT);    zoneWriter.newLine();    log.info("... done!");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static void serializeGroupReply(List<OFGroupStatsReply> groupReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFGroupStatsReply groupReply=groupReplies.get(0);  jGen.writeStringField("version",groupReply.getVersion().toString());  jGen.writeFieldName("group");  jGen.writeStartArray();  for (  OFGroupStatsEntry entry : groupReply.getEntries()) {    jGen.writeStartObject();    jGen.writeStringField("groupNumber",entry.getGroup().toString());    jGen.writeNumberField("refCount",entry.getRefCount());    jGen.writeNumberField("packetCount",entry.getPacketCount().getValue());    jGen.writeNumberField("byteCount",entry.getByteCount().getValue());    jGen.writeFieldName("bucketCounters");    jGen.writeStartArray();    for (    OFBucketCounter bCounter : entry.getBucketStats()) {      jGen.writeStartObject();      jGen.writeNumberField("packetCount",bCounter.getPacketCount().getValue());      jGen.writeNumberField("byteCount",bCounter.getByteCount().getValue());      jGen.writeEndObject();    }    jGen.writeEndArray();    if (OFVersion.OF_13 == entry.getVersion()) {      jGen.writeNumberField("durationSec",entry.getDurationSec());      jGen.writeNumberField("durationNsec",entry.getDurationNsec());    }    jGen.writeEndObject();  }  jGen.writeEndArray();}  }
class C{  @Override public String toString(){  return value;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public Transaction(Context context){  this(context,new Settings());}  }
class C{  public JFXDecorator(Stage stage,Node node){  this(stage,node,true,true,true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private SSLConfig configureLegacyClusterSSL(SSLConfig sslConfig){  sslConfig.setCiphers(getDistributionConfig().getClusterSSLCiphers());  sslConfig.setEnabled(getDistributionConfig().getClusterSSLEnabled());  sslConfig.setKeystore(getDistributionConfig().getClusterSSLKeyStore());  sslConfig.setKeystorePassword(getDistributionConfig().getClusterSSLKeyStorePassword());  sslConfig.setKeystoreType(getDistributionConfig().getClusterSSLKeyStoreType());  sslConfig.setTruststore(getDistributionConfig().getClusterSSLTrustStore());  sslConfig.setTruststorePassword(getDistributionConfig().getClusterSSLTrustStorePassword());  sslConfig.setProtocols(getDistributionConfig().getClusterSSLProtocols());  sslConfig.setRequireAuth(getDistributionConfig().getClusterSSLRequireAuthentication());  return sslConfig;}  }
class C{  public final void initialize(int low,int high,int attr){  m_number=high - low + 1;  m_position=-1;  m_maxImpurity=-Double.MAX_VALUE;  m_splitAttr=attr;  m_splitValue=0.0;}  }
class C{  public static void assignColorsToLocals(Body unitBody,Map<Local,Object> localToGroup,Map<Local,Integer> localToColor,Map<Object,Integer> groupToColorCount){  ExceptionalUnitGraph unitGraph=new ExceptionalUnitGraph(unitBody);  LiveLocals liveLocals;  liveLocals=new SimpleLiveLocals(unitGraph);  UnitInterferenceGraph intGraph=new UnitInterferenceGraph(unitBody,localToGroup,liveLocals);{    int[] freeColors=new int[10];    Iterator localIt=intGraph.getLocals().iterator();    while (localIt.hasNext()) {      Local local=(Local)localIt.next();      if (localToColor.containsKey(local)) {        continue;      }      Object group=localToGroup.get(local);      int colorCount=groupToColorCount.get(group).intValue();      if (freeColors.length < colorCount)       freeColors=new int[Math.max(freeColors.length * 2,colorCount)];{        for (int i=0; i < colorCount; i++)         freeColors[i]=1;      }{        Local[] interferences=intGraph.getInterferencesOf(local);        for (        Local element : interferences) {          if (localToColor.containsKey(element)) {            int usedColor=localToColor.get(element).intValue();            freeColors[usedColor]=0;          }        }      }{        boolean found=false;        int assignedColor=0;        for (int i=0; i < colorCount; i++)         if (freeColors[i] == 1) {          found=true;          assignedColor=i;        }        if (!found) {          assignedColor=colorCount++;          groupToColorCount.put(group,new Integer(colorCount));        }        localToColor.put(local,new Integer(assignedColor));      }    }  }}  }
class C{  public boolean needsUpgrading(ShardId shard){  final Path[] paths=nodeEnvironment.availableShardPaths(shard);  if (paths.length > 1) {    int numPathsExist=0;    for (    Path path : paths) {      if (Files.exists(path.resolve(MetaDataStateFormat.STATE_DIR_NAME))) {        numPathsExist++;        if (numPathsExist > 1) {          return true;        }      }    }  }  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.THIS_LITERAL__STRICT_MODE:    return isStrictMode();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public BitVector[] buildCodes(){  final BitVector[] codeWord=new BitVector[n];  buildCodes(codeWord,root,LongArrayBitVector.getInstance());  return codeWord;}  }
class C{  private static Class<?> classForParam(String param){  Class<?> r;  if (param.equals("int")) {    r=int.class;  } else   if (param.equals("long")) {    r=long.class;  } else   if (param.equals("byte")) {    r=byte.class;  } else   if (param.equals("short")) {    r=short.class;  } else   if (param.equals("char")) {    r=char.class;  } else   if (param.equals("boolean")) {    r=boolean.class;  } else   try {    r=Class.forName(param);  } catch (  ClassNotFoundException e) {    try {      r=Class.forName("java.lang." + param);    } catch (    ClassNotFoundException f) {      throw new RuntimeException(e);    }  }  return r;}  }
class C{  public static final HashMap<LabelSet,Integer> countCombinationsSparse(Instances D,int L){  return PSUtils.countCombinationsSparse(D,L);}  }
class C{  private boolean isTarFile(InputStream inputStream) throws IOException {  inputStream.mark(TarFileStreamReader.TAR_FILE_GRANULARITY);  TarFileStreamReader tar=new TarFileStreamReader(inputStream);  boolean isTar=tar.iterator().hasNext();  inputStream.reset();  return isTar;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.TAG_TITLE__TAG:    return basicGetTag() != null;case DomPackage.TAG_TITLE__TITLE:  return TITLE_EDEFAULT == null ? title != null : !TITLE_EDEFAULT.equals(title);case DomPackage.TAG_TITLE__ACTUAL_TITLE:return ACTUAL_TITLE_EDEFAULT == null ? actualTitle != null : !ACTUAL_TITLE_EDEFAULT.equals(actualTitle);}return super.eIsSet(featureID);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.078 -0500",hash_original_method="39939000D7522F3E727F0E3243089AE5",hash_generated_method="ED2F276848683C97A8A50C78CD7E7CD6") public void close() throws IOException {synchronized (this) {    if (mClosed)     return;    mClosed=true;  }  if (mParcelDescriptor != null) {    mParcelDescriptor.close();  } else {    Parcel.closeFileDescriptor(mFileDescriptor);  }}  }
class C{  public static Range expand(Range range,double lowerMargin,double upperMargin){  ParamChecks.nullNotPermitted(range,"range");  double length=range.getLength();  double lower=range.getLowerBound() - length * lowerMargin;  double upper=range.getUpperBound() + length * upperMargin;  if (lower > upper) {    lower=lower / 2.0 + upper / 2.0;    upper=lower;  }  return new Range(lower,upper);}  }
class C{  public static void assertEquals(String message,double expected,double actual,double delta){  Assert.assertEquals(message,expected,actual,delta);}  }
class C{  public void testOutputStream() throws Exception {  int[] flagses={Base64.DEFAULT,Base64.NO_PADDING,Base64.NO_WRAP,Base64.NO_PADDING | Base64.NO_WRAP,Base64.CRLF,Base64.URL_SAFE};  int[] writeLengths={-10,-5,-1,0,1,1,2,2,3,10,100};  Random rng=new Random(32176L);  byte[] plain=(lipsum + lipsum).getBytes();  for (  int flags : flagses) {    byte[] encoded=Base64.encode(plain,flags);    ByteArrayOutputStream baos;    Base64OutputStream b64os;    byte[] actual;    int p;    baos=new ByteArrayOutputStream();    b64os=new Base64OutputStream(baos,flags);    b64os.write(plain);    b64os.close();    actual=baos.toByteArray();    assertEquals(encoded,actual);    baos=new ByteArrayOutputStream();    b64os=new Base64OutputStream(baos,flags);    for (int i=0; i < plain.length; ++i) {      b64os.write(plain[i]);    }    b64os.close();    actual=baos.toByteArray();    assertEquals(encoded,actual);    baos=new ByteArrayOutputStream();    b64os=new Base64OutputStream(baos,flags);    p=0;    while (p < plain.length) {      int l=writeLengths[rng.nextInt(writeLengths.length)];      l=Math.min(l,plain.length - p);      if (l >= 0) {        b64os.write(plain,p,l);        p+=l;      } else {        l=Math.min(-l,plain.length - p);        for (int i=0; i < l; ++i) {          b64os.write(plain[p + i]);        }        p+=l;      }    }    b64os.close();    actual=baos.toByteArray();    assertEquals(encoded,actual);    baos=new ByteArrayOutputStream();    b64os=new Base64OutputStream(baos,flags,false);    b64os.write(encoded);    b64os.close();    actual=baos.toByteArray();    assertEquals(plain,actual);    baos=new ByteArrayOutputStream();    b64os=new Base64OutputStream(baos,flags,false);    for (int i=0; i < encoded.length; ++i) {      b64os.write(encoded[i]);    }    b64os.close();    actual=baos.toByteArray();    assertEquals(plain,actual);    baos=new ByteArrayOutputStream();    b64os=new Base64OutputStream(baos,flags,false);    p=0;    while (p < encoded.length) {      int l=writeLengths[rng.nextInt(writeLengths.length)];      l=Math.min(l,encoded.length - p);      if (l >= 0) {        b64os.write(encoded,p,l);        p+=l;      } else {        l=Math.min(-l,encoded.length - p);        for (int i=0; i < l; ++i) {          b64os.write(encoded[p + i]);        }        p+=l;      }    }    b64os.close();    actual=baos.toByteArray();    assertEquals(plain,actual);  }}  }
class C{  public static void main(final String[] args){  handleCommandLineArgs(args);  JOptionPane.showMessageDialog(null,new JLabel("<html>" + "This is the PlacementPicker, it will create a place.txt file for you. " + "<br>In order to run this, you must already have created a centers.txt file and a polygons.txt file. "+ "<br><br>The program will ask for unit scale (unit zoom) level [normally between 0.5 and 1.0], "+ "<br>Then it will ask for the unit image size when not zoomed [normally 48x48]. "+ "<br><br>If you want to have less, or more, room around the edges of your units, you can change the unit size. "+ "<br><br>After it starts, you may Load an existing place.txt file, that way you can make changes to it then save it. "+ "<br><br>LEFT CLICK = Select a new territory. "+ "<br><br>Holding CTRL/SHIFT + LEFT CLICK = Create a new placement for that territory. "+ "<br><br>RIGHT CLICK = Remove last placement for that territory. "+ "<br><br>Holding CTRL/SHIFT + RIGHT CLICK = Save all placements for that territory. "+ "<br><br>It is a very good idea to check each territory using the PlacementPicker after running the AutoPlacementFinder "+ "<br>to make sure there are enough placements for each territory. If not, you can always add more then save it. "+ "<br><br>IF there are not enough placements, the units will Overflow to the RIGHT of the very LAST placement made, "+ "<br>so be sure that the last placement is on the right side of the territory "+ "<br>or that it does not overflow directly on top of other placements. "+ "<br><br>To show all placements, or see the overflow direction, or see which territories you have not yet completed enough, "+ "<br>placements for, turn on the mode options in the 'edit' menu. "+ "</html>"));  System.out.println("Select the map");  final FileOpen mapSelection=new FileOpen("Select The Map",s_mapFolderLocation,".gif",".png");  final String mapName=mapSelection.getPathString();  if (s_mapFolderLocation == null && mapSelection.getFile() != null) {    s_mapFolderLocation=mapSelection.getFile().getParentFile();  }  if (mapName != null) {    final PlacementPicker picker=new PlacementPicker(mapName);    picker.setSize(800,600);    picker.setLocationRelativeTo(null);    picker.setVisible(true);  } else {    System.out.println("No Image Map Selected. Shutting down.");    System.exit(0);  }}  }
class C{  protected void recomputeMeans(){  int length=features.get(0).length;  Cluster cluster;  double[] mean;  for (int i=0; i < clusters.length; i++) {    cluster=clusters[i];    if (cluster.getSize() == 1) {      System.err.println("** There is just one member in cluster " + i);    } else     if (cluster.getSize() < 1) {      System.err.println("** There is NO member in cluster " + i);      int index=(int)Math.floor(Math.random() * features.size());      clusters[i].assignMember(features.get(index));    }    cluster.move();  }}  }
class C{  @DSComment("Character encoder/decoder") @DSSafe(DSCat.UTIL_FUNCTION) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.576 -0500",hash_original_method="BBA6EC87D4C3AA6AD9F0D4B623871AE8",hash_generated_method="D790B3ABAD493C64B831394CF1B5AB81") public static synchronized CoderResult unmappableForLength(int length) throws IllegalArgumentException {  if (length > 0) {    Integer key=Integer.valueOf(length);synchronized (_unmappableErrors) {      CoderResult r=_unmappableErrors.get(key);      if (r == null) {        r=new CoderResult(TYPE_UNMAPPABLE_CHAR,length);        _unmappableErrors.put(key,r);      }      return r;    }  }  throw new IllegalArgumentException("Length must be greater than 0; was " + length);}  }
class C{  public void deleteReference(){  if (decreaseRefCount() == 0) {    T deleted;synchronized (this) {      deleted=mValue;      mValue=null;    }    mResourceReleaser.release(deleted);    removeLiveReference(deleted);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.TRANSFORMER__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.TRANSFORMER__TO_CHANNELS:  return toChannels != null && !toChannels.isEmpty();case EipPackage.TRANSFORMER__FROM_CHANNELS:return fromChannels != null && !fromChannels.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public CRegisterFilterExpression(final String register,final FilterRelation predicate,final long value){  m_register=register;  m_predicate=predicate;  m_value=value;}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public void copy(PImage src,int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh){  blend(src,sx,sy,sw,sh,dx,dy,dw,dh,REPLACE);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isServiceRunning(Class<? extends Service> service,Context context){  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  for (  ActivityManager.RunningServiceInfo runningServiceInfo : manager.getRunningServices(Integer.MAX_VALUE)) {    if (service.getName().equals(runningServiceInfo.service.getClassName())) {      return true;    }  }  return false;}  }
class C{  public static boolean isMobileNum(String mobiles){  Pattern p=Pattern.compile("^((13[0-9])|(15[^4,\\D])|(17[^4,\\D])|(18[0-9]))\\d{8}$");  Matcher m=p.matcher(mobiles);  return m.matches();}  }
class C{  protected void fireCaretUpdate(CaretEvent e){  super.fireCaretUpdate(e);  if (isBracketMatchingEnabled()) {    doBracketMatching();  }}  }
class C{  public boolean verify(String hostname,String session){  return (true);}  }
class C{  public static boolean isKanji(char chr){  String[] pinyinStr=null;  try {    pinyinStr=PinyinHelper.toHanyuPinyinStringArray(chr,format);  } catch (  BadHanyuPinyinOutputFormatCombination e) {    e.printStackTrace();  }  return (null == pinyinStr) ? (false) : (true);}  }
class C{  public static ResultList expandSqlResultSet(Sql sql,ResultSet rs) throws SQLException {  ResultList resList=new ResultList();  if (rs == null)   return resList;  ColumnDescriptor desc=new ColumnDescriptor();  desc.addColumn("NAME",false,1);  desc.addColumn("VALUE",false,2);  resList.setColumnDescriptor(desc);  java.sql.ResultSetMetaData meta=rs.getMetaData();  int colCnt=meta.getColumnCount();  int rowCnt=0;  while (rs.next()) {    if (rowCnt > 0) {      ResultRow row=new ResultRow();      row.addColumn("--- ROW " + (rowCnt + 1) + "---");      row.addColumn("");      resList.addRow(row);    }    for (int i=1; i <= colCnt; i++) {      ResultRow row=new ResultRow();      if (rowCnt > 0)       row.addColumn(meta.getColumnName(i) + "(" + (rowCnt + 1)+ ")"); else       row.addColumn(meta.getColumnName(i));      row.addColumn(rs.getString(i));      resList.addRow(row);    }    rowCnt++;  }  return resList;}  }
class C{  private String inputStringFromStdin(String prompt) throws Exception {  System.err.print(prompt);  return (new BufferedReader(new InputStreamReader(System.in))).readLine();}  }
class C{  public List<BakedQuad> build(){  return this.build(null);}  }
class C{  public DAbout(JFrame parent,String title,String licenseNotice,Image aboutImg,Object[] tickerItems){  super(parent,title,ModalityType.DOCUMENT_MODAL);  initComponents(aboutImg,licenseNotice,tickerItems);}  }
class C{  public void popValidatorInfo(){  if (validatorStack.size() > 0) {    validatorStack.removeLast();  }}  }
class C{  public synchronized void fatal(String s){  StringBuilder error=new StringBuilder();  println(a("FATAL ERROR:\n" + s),ALL_MESSAGE_LOGS,true);  exitWithError(this,error.toString(),throwsErrors);}  }
class C{  public MapViewFrame constructApplicationFrame(){  if (frame.getMap().isEmpty())   frame.readMap(DataResource.getULMFileResource());  return frame;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Node createMaterialNode(Node control,int level){  Node container=new Pane(control);  container.getStyleClass().add("depth-container");  level=level < 0 ? 0 : level;  level=level > 5 ? 5 : level;  container.setEffect(new DropShadow(BlurType.GAUSSIAN,depth[level].getColor(),depth[level].getRadius(),depth[level].getSpread(),depth[level].getOffsetX(),depth[level].getOffsetY()));  return container;}  }
class C{  private static boolean contains(String value,int start,int length,String criteria){  return contains(value,start,length,new String[]{criteria});}  }
class C{  public void testFromDate() throws Exception {  TimeZone.setDefault(TimeZone.getTimeZone("PST"));  final Calendar date=Calendar.getInstance();  date.setTime(new Date(123456789012345L));  Assert.assertEquals("5882-03-11T00:30:12.345Z",CalendarSerializer.serialize(date));  final Calendar dateNoMillis=Calendar.getInstance();  dateNoMillis.setTime(new Date(123456789012000L));  Assert.assertEquals("5882-03-11T00:30:12.000Z",CalendarSerializer.serialize(dateNoMillis));}  }
class C{  private boolean scrollAndFocus(int direction,int top,int bottom){  boolean handled=true;  int height=getHeight();  int containerTop=getScrollY();  int containerBottom=containerTop + height;  boolean up=direction == View.FOCUS_UP;  View newFocused=findFocusableViewInBounds(up,top,bottom);  if (newFocused == null) {    newFocused=this;  }  if (top >= containerTop && bottom <= containerBottom) {    handled=false;  } else {    int delta=up ? (top - containerTop) : (bottom - containerBottom);    doScrollY(delta);  }  if (newFocused != findFocus())   newFocused.requestFocus(direction);  return handled;}  }
class C{  public SubsetByExpressionTest(String name){  super(name);}  }
class C{  public AddressConstantOperand(Word v){  this(v.toAddress());}  }
class C{  @SuppressWarnings("rawtypes") private static final PipelineOp addKnownInConditional(PipelineOp left,final FilterNode filter,final AST2BOpContext ctx){  final InBOp bop=(InBOp)filter.getValueExpression();  final IConstant<IV>[] set=bop.getSet();  final LinkedHashSet<IV> ivs=new LinkedHashSet<IV>();  for (  IConstant<IV> iv : set) {    ivs.add(iv.get());  }  final IVariable var=(IVariable)bop.getValueExpression();  left=new DataSetJoin(leftOrEmpty(left),NV.asMap(new NV[]{new NV(DataSetJoin.Annotations.VAR,var),new NV(DataSetJoin.Annotations.BOP_ID,ctx.nextId()),new NV(DataSetJoin.Annotations.GRAPHS,ivs)}));  return left;}  }
class C{  private void initialize(){  frame=new JFrame();  frame.setBounds(100,100,450,300);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().setLayout(null);  frame.getContentPane().add(getTable());}  }
class C{  public static double newPriority(double remote,double stored,int commonFriends,int myFriends){  return Math.max(fractionOfFriendsPriority(remote,commonFriends,myFriends),stored);}  }
class C{  private boolean hasBottomRight(SentencePair sentencePair,int ei,int fj){  int i_p, j_p;  for (i_p=ei; i_p >= 0; --i_p) {    if (!sentencePair.isTargetUnaligned(i_p))     break;  }  for (j_p=fj; j_p >= 0; --j_p) {    if (!sentencePair.isSourceUnaligned(j_p))     break;  }  if (i_p < 0 && j_p < 0)   return false;  int[] a_i_p=e2f(sentencePair,i_p);  int[] a_j_p=f2e(sentencePair,j_p);  if (max(a_j_p) > ei || max(a_i_p) > fj)   return false;  int min_j=Math.min(j_p,min(a_i_p));  int min_i=Math.min(i_p,min(a_j_p));  while (min_i <= i_p || min_j <= j_p) {    for (; j_p >= min_j; --j_p) {      if (sentencePair.isSourceUnaligned(j_p))       continue;      a_j_p=f2e(sentencePair,j_p);      if (max(a_j_p) > ei)       return false;      min_i=Math.min(min_i,min(a_j_p));    }    for (; i_p >= min_i; --i_p) {      if (sentencePair.isTargetUnaligned(i_p))       continue;      a_i_p=e2f(sentencePair,i_p);      if (max(a_i_p) > fj)       return false;      min_j=Math.min(min_j,min(a_i_p));    }  }  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException {  _file.seek(fileOffset);  return _file.read(buffer,offset,length);}  }
class C{  public Annotation(String source,String id,String type,String scope,String metric,Long timestamp){  this();  setSource(source);  setId(id);  setTimestamp(timestamp);  setMetric(metric);  setScope(scope);  setType(type);}  }
class C{  public void testDecoder7(){  boolean res;  String originalAppIdName=mAppIdName;  int originalContentTypeValue=mContentTypeValue;  Random rd=new Random();  for (int i=0; i < OMA_CONTENT_TYPE_NAMES.length; i++) {    mContentTypeName=OMA_CONTENT_TYPE_NAMES[i];    byte[] pdu=createPDU(7);    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);    res=pduDecoder.decodeContentType(mWspContentTypeStart);    assertTrue(res);    Log.d(LOG_TAG,"mContentTypeName: [" + mContentTypeName + "], val: ["+ pduDecoder.getValueString()+ "]");    assertTrue(mContentTypeName.equals(pduDecoder.getValueString()));  }  mAppIdName=originalAppIdName;  mContentTypeValue=originalContentTypeValue;}  }
class C{  private final static synchronized void logProxyAccess(final HashMap<String,Object> conProp){  logMessage.setLength(0);  final String currentTimestamp=Long.toString(System.currentTimeMillis());  final int offset=currentTimestamp.length() - 3;  logMessage.append(currentTimestamp.substring(0,offset));  logMessage.append('.');  logMessage.append(currentTimestamp.substring(offset));  logMessage.append(' ');  final Long requestStart=(Long)conProp.get(HeaderFramework.CONNECTION_PROP_REQUEST_START);  final Long requestEnd=(Long)conProp.get(HeaderFramework.CONNECTION_PROP_REQUEST_END);  final String elapsed=Long.toString(requestEnd.longValue() - requestStart.longValue());  for (int i=0; i < 6 - elapsed.length(); i++)   logMessage.append(' ');  logMessage.append(elapsed);  logMessage.append(' ');  final String clientIP=(String)conProp.get(HeaderFramework.CONNECTION_PROP_CLIENTIP);  logMessage.append(clientIP);  logMessage.append(' ');  final String respondStatus=(String)conProp.get(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_STATUS);  String respondCode=(String)conProp.get(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_CODE);  if (respondCode == null)   respondCode="UNKNOWN";  logMessage.append(respondCode);  logMessage.append("/");  logMessage.append(respondStatus);  logMessage.append(' ');  final String bytes=(String)conProp.get(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_SIZE);  logMessage.append(bytes.toString());  logMessage.append(' ');  final String requestMethod=(String)conProp.get(HeaderFramework.CONNECTION_PROP_METHOD);  logMessage.append(requestMethod);  logMessage.append(' ');  final String requestURL=(String)conProp.get(HeaderFramework.CONNECTION_PROP_URL);  final String requestArgs=(String)conProp.get(HeaderFramework.CONNECTION_PROP_ARGS);  logMessage.append(requestURL);  if (requestArgs != null) {    logMessage.append("?").append(requestArgs);  }  logMessage.append(' ');  logMessage.append("-");  logMessage.append(' ');  final String host=(String)conProp.get(HeaderFramework.CONNECTION_PROP_HOST);  logMessage.append("DIRECT/");  logMessage.append(host);  logMessage.append(' ');  String mime="-";  if (conProp.containsKey(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_HEADER)) {    final HeaderFramework proxyRespondHeader=(HeaderFramework)conProp.get(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_HEADER);    mime=proxyRespondHeader.mime();  }  logMessage.append(mime);  if (proxyLog.isFine())   proxyLog.fine(logMessage.toString());}  }
class C{  public static double logGamma(double x) throws ArithmeticException {  double p, q, w, z;  double A[]={8.11614167470508450300E-4,-5.95061904284301438324E-4,7.93650340457716943945E-4,-2.77777777730099687205E-3,8.33333333333331927722E-2};  double B[]={-1.37825152569120859100E3,-3.88016315134637840924E4,-3.31612992738871184744E5,-1.16237097492762307383E6,-1.72173700820839662146E6,-8.53555664245765465627E5};  double C[]={-3.51815701436523470549E2,-1.70642106651881159223E4,-2.20528590553854454839E5,-1.13933444367982507207E6,-2.53252307177582951285E6,-2.01889141433532773231E6};  if (x < -34.0) {    q=-x;    w=logGamma(q);    p=Math.floor(q);    if (p == q)     throw new ArithmeticException("lgam: Overflow");    z=q - p;    if (z > 0.5) {      p+=1.0;      z=p - q;    }    z=q * Math.sin(Math.PI * z);    if (z == 0.0)     throw new ArithmeticException("lgamma: Overflow");    z=LOGPI - Math.log(z) - w;    return z;  }  if (x < 13.0) {    z=1.0;    while (x >= 3.0) {      x-=1.0;      z*=x;    }    while (x < 2.0) {      if (x == 0.0)       throw new ArithmeticException("lgamma: Overflow");      z/=x;      x+=1.0;    }    if (z < 0.0)     z=-z;    if (x == 2.0)     return Math.log(z);    x-=2.0;    p=x * Polynomial.polevl(x,B,5) / Polynomial.p1evl(x,C,6);    return (Math.log(z) + p);  }  if (x > 2.556348e305)   throw new ArithmeticException("lgamma: Overflow");  q=(x - 0.5) * Math.log(x) - x + 0.91893853320467274178;  if (x > 1.0e8)   return (q);  p=1.0 / (x * x);  if (x >= 1000.0)   q+=((7.9365079365079365079365e-4 * p - 2.7777777777777777777778e-3) * p + 0.0833333333333333333333) / x; else   q+=Polynomial.polevl(p,A,4) / x;  return q;}  }
class C{  public static String format(Date time){  DateFormat timeFormat=new SimpleDateFormat(TimeField.FORMAT);  return time == null ? null : timeFormat.format(time);}  }
class C{  public void loadFile(File file,String resourcePath) throws IOException {  loadFile(ResourceUtil.toResource(file),resourcePath);}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public static RuleId defaultRuleId(){  return RuleIdImpl.defaultInstance();}  }
class C{  public final void addCategory(String category){  if (mCategories == null)   mCategories=new ArrayList<String>();  if (!mCategories.contains(category)) {    mCategories.add(category.intern());  }}  }
class C{  private static OFActionEnqueue decode_enqueue(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:((?:0x)?\\d+)\\:((?:0x)?\\d+))").matcher(actionToDecode);  if (n.matches()) {    OFPort port=OFPort.of(0);    if (n.group(1) != null) {      try {        port=OFPort.of(get_short(n.group(1)));      } catch (      NumberFormatException e) {        log.debug("Invalid port-num in: '{}' (error ignored)",actionToDecode);        return null;      }    }    int queueid=0;    if (n.group(2) != null) {      try {        queueid=get_int(n.group(2));      } catch (      NumberFormatException e) {        log.debug("Invalid queue-id in: '{}' (error ignored)",actionToDecode);        return null;      }    }    OFActionEnqueue.Builder ab=OFFactories.getFactory(version).actions().buildEnqueue();    ab.setPort(port);    ab.setQueueId(queueid);    log.debug("action {}",ab.build());    return ab.build();  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:10.331 -0500",hash_original_method="6E7CAC1BD9D34894D7DD6DF3025860CE",hash_generated_method="8A91176A490D98661F6D58AC2D3125BA") public void addDistribution(String distribution){  if (__distributions != null)   __distributions.append(','); else   __distributions=new StringBuffer();  __distributions.append(distribution);}  }
class C{  private static boolean isClose(float value,float targetValue){  return Math.abs(value - targetValue) < 0.001f;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.570 -0500",hash_original_method="8AE00F6D12874A3382D28F364D43BAC6",hash_generated_method="D7EF4C8D4676CF4464A0EC53BF75F826") public ComponentName(Context pkg,Class<?> cls){  mPackage=pkg.getPackageName();  mClass=cls.getName();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.767 -0400",hash_original_method="78167C09373DD6928792D289D7DC6BD6",hash_generated_method="6A8AAA15A216A30859ED1E5340541FA8") @Override public boolean accept(File file){  String name=file.getName();  for (  String prefix : this.prefixes) {    if (caseSensitivity.checkStartsWith(name,prefix)) {      return true;    }  }  return false;}  }
class C{  private CViewOpener(){}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  private static void paintBreakpoints(final BreakpointManager manager,final NaviNode node){  if (node.getRawNode() instanceof INaviCodeNode) {    paintBreakpoints(manager,node,(INaviCodeNode)node.getRawNode());  } else   if (node.getRawNode() instanceof INaviFunctionNode) {    paintBreakpoints(manager,node,(INaviFunctionNode)node.getRawNode());  }}  }
class C{  public static void readBytes(InputStream is,byte[] b,int offset,int len){  if (len == 0)   return;  try {    int read=0;    while (read < len) {      int n=is.read(b,offset + read,len - read);      if (n < 1)       throw new PngjInputException("error reading bytes, " + n + " !="+ len);      read+=n;    }  } catch (  IOException e) {    throw new PngjInputException("error reading",e);  }}  }
class C{  private synchronized void sendNotificationsIfSwitchDiffers(IOFSwitch oldSw,IOFSwitch newSw){}  }
class C{  public static String convertKeypadLettersToDigits(String input){  if (input == null) {    return input;  }  int len=input.length();  if (len == 0) {    return input;  }  char[] out=input.toCharArray();  for (int i=0; i < len; i++) {    char c=out[i];    out[i]=(char)KEYPAD_MAP.get(c,c);  }  return new String(out);}  }
class C{  private static String formatTimeSpan(final double seconds){  for (  final AgoFormatSpec step : AGO_FORMAT_SPECS) {    double timeDelta=seconds;    double limit=step.limit;    if (step.divisibleArgument > 0) {      timeDelta=Math.round(timeDelta / step.divisibleArgument);      limit=Math.round(limit / step.divisibleArgument);    }    if (timeDelta < limit) {      if (step.divisibleArgument > 0) {        return MessageFormat.format(step.format,timeDelta);      } else {        return step.format;      }    }  }  throw new IllegalArgumentException("seconds");}  }
class C{  public AutomationItem(Element e){  org.jdom2.Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in Automation Item element when reading operations");  }  if ((a=e.getAttribute(Xml.SEQUENCE_ID)) != null) {    _sequenceId=Integer.parseInt(a.getValue());  }  if ((a=e.getAttribute(Xml.ACTION_CODE)) != null) {    setAction(getActionByCode(Integer.decode(a.getValue())));  }  if ((a=e.getAttribute(Xml.HALT_FAIL)) != null) {    _haltFail=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.ACTION_RAN)) != null) {    _actionRan=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.ACTION_SUCCESSFUL)) != null) {    _actionSuccessful=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.TRAIN_ID)) != null) {    _train=TrainManager.instance().getTrainById(a.getValue());  }  if ((a=e.getAttribute(Xml.ROUTE_LOCATION_ID)) != null && getTrain() != null) {    _routeLocation=getTrain().getRoute().getLocationById(a.getValue());  }  if ((a=e.getAttribute(Xml.AUTOMATION_ID)) != null) {    _automationIdToRun=a.getValue();  }  if ((a=e.getAttribute(Xml.GOTO_AUTOMATION_ID)) != null) {    _gotoAutomationItemId=a.getValue();  }  if ((a=e.getAttribute(Xml.TRAIN_SCHEDULE_ID)) != null) {    _trainScheduleId=a.getValue();  }  Element eMessages=e.getChild(Xml.MESSAGES);  if (eMessages != null) {    Element eMessageOk=eMessages.getChild(Xml.MESSAGE_OK);    if (eMessageOk != null && (a=eMessageOk.getAttribute(Xml.MESSAGE)) != null) {      _message=a.getValue();    }    Element eMessageFail=eMessages.getChild(Xml.MESSAGE_FAIL);    if (eMessageFail != null && (a=eMessageFail.getAttribute(Xml.MESSAGE)) != null) {      _messageFail=a.getValue();    }  }}  }
class C{  public boolean addPartiallyOrientedEdge(Node node1,Node node2){  throw new UnsupportedOperationException();}  }
class C{  public boolean isUseOSAuth(){  return m_useOSAuth;}  }
class C{  public static void alert(Context cx,Scriptable thisObj,Object[] args,Function funObj){  int len=args.length;  WindowWrapper ww=(WindowWrapper)thisObj;  Window window=ww.window;  if (len >= 1) {    String message=(String)Context.jsToJava(args[0],String.class);    window.alert(message);  }}  }
class C{  private JPanel createQQPlotDialog(Node selected){  String dialogTitle="Q-Q Plots";  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  DataSet dataSet=(DataSet)dataEditor.getSelectedDataModel();  QQPlot qqPlot=new QQPlot(dataSet,selected);  QQPlotEditorPanel editorPanel=new QQPlotEditorPanel(qqPlot,dataSet);  QQPlotDisplayPanel display=new QQPlotDisplayPanel(qqPlot);  editorPanel.addPropertyChangeListener(new QQPlotListener(display));  JMenuBar bar=new JMenuBar();  JMenu menu=new JMenu("File");  menu.add(new JMenuItem(new SaveComponentImage(display,"Save Q-Q Plot")));  bar.add(menu);  Box box=Box.createHorizontalBox();  box.add(display);  box.add(Box.createHorizontalStrut(3));  box.add(editorPanel);  box.add(Box.createHorizontalStrut(5));  box.add(Box.createHorizontalGlue());  Box vBox=Box.createVerticalBox();  vBox.add(Box.createVerticalStrut(15));  vBox.add(box);  vBox.add(Box.createVerticalStrut(5));  panel.add(bar,BorderLayout.NORTH);  panel.add(vBox,BorderLayout.CENTER);  return panel;}  }
class C{  public void testGetPathContextWhenContextAlreadySetupAndTomcatContextXml() throws Exception {  TomcatWAR war=new TomcatWAR(getResourcePath(PACKAGE_PATH + "tomcat-context.war"));  war.setContext("context");  assertEquals("testcontext",war.getContext());}  }
class C{  protected void initGUI(){  if (GUIHelper.getLogoIcon() != null)   setIconImage(GUIHelper.getLogoIcon().getImage());  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  addWindowStateListener(m_MaximizationFixWindowListener);}  }
class C{  public static void p(String txt,int level){  p(txt,level,false);}  }
class C{  public QueryExecutionCanceledException(){}  }
class C{  public CAddressSpaceWrapper(final INaviAddressSpace addressSpace){  m_addressSpace=addressSpace;}  }
class C{  protected void performEffect(EntityLivingBase entity,int strength){}  }
class C{  void adjustSelection(int selectionStartAdjust,int selectionEndAdjust){  if (ContextualSearchFieldTrial.isSelectionExpansionDisabled())   return;  if (selectionStartAdjust == 0 && selectionEndAdjust == 0)   return;  ContentViewCore basePageContentView=getBaseContentView();  if (basePageContentView != null && basePageContentView.getWebContents() != null) {    mDidExpandSelection=true;    basePageContentView.getWebContents().adjustSelectionByCharacterOffset(selectionStartAdjust,selectionEndAdjust);  }}  }
class C{  public String toString(){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  PrintStream p=new PrintStream(baos);  p.print(algorithm + " Message Digest from " + provider.getName()+ ", ");switch (state) {case INITIAL:    p.print("<initialized>");  break;case IN_PROGRESS:p.print("<in progress>");break;}p.println();return (baos.toString());}  }
class C{  private void removeRefEntry(RefEntry refEntry){  assert Thread.holdsLock(this);  assert !removed;  assert refTable.containsKey(refEntry.getRef());  refTable.remove(refEntry.getRef());  invalidRefs.remove(refEntry);  if (refTable.isEmpty()) {synchronized (endpointTable) {      endpointTable.remove(endpoint);      Transport transport=endpoint.getOutboundTransport();      transport.free(endpoint);      if (endpointTable.isEmpty()) {        assert gcLatencyRequest != null;        gcLatencyRequest.cancel();        gcLatencyRequest=null;      }      removed=true;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.071 -0500",hash_original_method="B2636DC4FA80F4D909AE07B0C60C2BBA",hash_generated_method="E82A8FDB08BA4347DA20CDD2BE0740E7") public static void main(String[] args){  try {    int fdNum=Integer.parseInt(args[0],10);    int targetSdkVersion=Integer.parseInt(args[1],10);    if (fdNum != 0) {      try {        FileDescriptor fd=ZygoteInit.createFileDescriptor(fdNum);        DataOutputStream os=new DataOutputStream(new FileOutputStream(fd));        os.writeInt(Process.myPid());        os.close();        IoUtils.closeQuietly(fd);      } catch (      IOException ex) {        Slog.d(TAG,"Could not write pid of wrapped process to Zygote pipe.",ex);      }    }    ZygoteInit.preload();    String[] runtimeArgs=new String[args.length - 2];    System.arraycopy(args,2,runtimeArgs,0,runtimeArgs.length);    RuntimeInit.wrapperInit(targetSdkVersion,runtimeArgs);  } catch (  ZygoteInit.MethodAndArgsCaller caller) {    caller.run();  }}  }
class C{  public static void main(String... args) throws Exception {  new AliasMapTest().test();}  }
class C{  public void pause(){  mediaPlayerImpl.pause();}  }
class C{  public static String toString(String str){  return str;}  }
class C{  public byte[] remove(final String stack,final long handle) throws IOException, SpaceExceededException {  Stack s=getStack(stack);  if (s == null)   return null;  return s.remove(handle);}  }
class C{  public TopDocs search(Query query,int n) throws IOException {  return searchAfter(null,query,n);}  }
class C{  @Override public void repaint(Rectangle r){}  }
class C{  public boolean initTree(int AD_Tree_ID){  log.config("AD_Tree_ID=" + AD_Tree_ID);  m_AD_Tree_ID=AD_Tree_ID;  MTree vTree=new MTree(Env.getCtx(),AD_Tree_ID,m_editable,true,null);  m_root=vTree.getRoot();  m_root.setName(Msg.getMsg(Env.getCtx(),vTree.getName()));  log.config("root=" + m_root);  m_nodeTableName=vTree.getNodeTableName();  treeModel=new AdempiereTreeModel(m_root,true);  treeModel.setMTree(vTree);  tree.setModel(treeModel);  if (m_hasBar) {    for (    JToolBar jt : toolbar)     jt.removeAll();    toolbarMap=new HashMap<Integer,JToolBar>();    Enumeration<?> enTop=m_root.children();    JToolBar jt=null;    Map<JToolBar,String> titleMap=new HashMap<JToolBar,String>();    while (enTop.hasMoreElements()) {      MTreeNode ndTop=(MTreeNode)enTop.nextElement();      Enumeration<?> en=ndTop.preorderEnumeration();      boolean labelDrawn=false;      while (en.hasMoreElements()) {        MTreeNode nd=(MTreeNode)en.nextElement();        if (nd.isOnBar()) {          if (!labelDrawn) {            jt=new JToolBar(JToolBar.VERTICAL);            titleMap.put(jt,ndTop.toString().trim());            labelDrawn=true;            toolbarMap.put(ndTop.getNode_ID(),jt);          }          addToBar(nd,jt,false);        }      }      if (jt != null)       toolbar.add(jt);      jt=null;    }    for (    JToolBar jt2 : toolbar) {      jt2.setOpaque(false);      jt2.setFloatable(false);      jt2.setRollover(true);      jt2.setBorder(BorderFactory.createEmptyBorder());      JXTaskPane barPart=new JXTaskPane();      barPart.setUI(new AdempiereTaskPaneUI());      barPart.getContentPane().setBackground(AdempierePLAF.getFormBackground());      barPart.setAnimated(true);      barPart.setLayout(new BorderLayout());      barPart.add(jt2,BorderLayout.NORTH);      barPart.setTitle(titleMap.get(jt2));      bar.add(barPart);      bar.setBackground(AdempierePLAF.getFormBackground());    }  }  return true;}  }
class C{  public ClientBuilderForConnector forConnector(DockerConnector connector) throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {  LOG.debug("Building connection to docker host '{}'",connector.getServerUrl());  withCredentials(connector.getCredentialsId());  withConnectorType(connector.getConnectorType());  withConnectTimeout(connector.getConnectTimeout());  return forServer(connector.getServerUrl(),connector.getApiVersion());}  }
class C{  public T caseTExportableElement(TExportableElement object){  return null;}  }
class C{  public void testDynamicMergeFrom() throws Exception {  DynamicMessage result=DynamicMessage.newBuilder(MERGE_DEST).mergeFrom(DynamicMessage.newBuilder(MERGE_SOURCE).build()).build();  assertEquals(MERGE_RESULT_TEXT,result.toString());}  }
class C{  @Override public void registerOutParameter(String parameterName,int sqlType) throws SQLException {  registerOutParameter(getIndexForName(parameterName),sqlType);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SHADD16");  translateAll(environment,instruction,"SHADD16",instructions);}  }
class C{  public ConnectionPanel(JFrame parent){  super();  m_Parent=parent;  m_ConnectionListeners=new HashSet<ConnectionListener>();  m_HistoryChangedListeners=new HashSet<HistoryChangedListener>();  m_SetupFileChooser=new JFileChooser();  m_SetupFileChooser.setDialogTitle("Switch database setup");  m_SetupFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);  m_SetupFileChooser.setMultiSelectionEnabled(false);  m_SetupFileChooser.setAcceptAllFileFilterUsed(true);  ExtensionFileFilter filter=new ExtensionFileFilter(".props","Properties file");  m_SetupFileChooser.addChoosableFileFilter(filter);  m_SetupFileChooser.setFileFilter(filter);  try {    m_DbUtils=new DbUtils();    m_URL=m_DbUtils.getDatabaseURL();    m_User=m_DbUtils.getUsername();    m_Password=m_DbUtils.getPassword();  } catch (  Exception e) {    e.printStackTrace();    m_URL="";    m_User="";    m_Password="";  }  createPanel();}  }
class C{  public DownloadSnapshot(ExecutorDriver driver,DownloadSnapshotTask task,BackupStorageDriver backupStorageDriver){  this.driver=driver;  this.backupStorageDriver=backupStorageDriver;  this.cassandraTask=task;  this.context=task.getBackupRestoreContext();}  }
class C{  public boolean isIncludeInLuceneIndex(final Product entity,final boolean checkInventory){  if (entity != null) {    if (entity.getProductCategory().isEmpty()) {      return false;    }    final int availability=entity.getAvailability();switch (availability) {case Product.AVAILABILITY_ALWAYS:case Product.AVAILABILITY_BACKORDER:case Product.AVAILABILITY_SHOWROOM:      return DomainApiUtils.isObjectAvailableNow(true,entity.getAvailablefrom(),entity.getAvailableto(),new Date());case Product.AVAILABILITY_PREORDER:    return DomainApiUtils.isObjectAvailableNow(true,null,entity.getAvailableto(),new Date());case Product.AVAILABILITY_STANDARD:default :  return DomainApiUtils.isObjectAvailableNow(true,entity.getAvailablefrom(),entity.getAvailableto(),new Date());}}return false;}  }
class C{  public static String formatTemperature(Context context,double temperature,boolean isFarhenheit){  if (isFarhenheit)   temperature=1.8 * (temperature - 273) + 32; else   temperature=temperature - 273;  return String.format(context.getString(R.string.format_temperature),temperature);}  }
class C{  public Photo(byte[] data,ImageType type){  super(data,type);}  }
class C{  public StrBuilder appendFixedWidthPadRight(final int value,final int width,final char padChar){  return appendFixedWidthPadRight(String.valueOf(value),width,padChar);}  }
class C{  public void appendOperator(Variation variation){  operators.add(variation);}  }
class C{  @Override public Candidates reduce(Candidates c1,Candidates c2) throws Exception {  return c1.merge(c2);}  }
class C{  private int dp2px(int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,this.mMetrics);}  }
class C{  @GET @Path("/{id}") @Description("Returns the audit trail for a given Id.") @Produces(MediaType.APPLICATION_JSON) public AuditDto findById(@PathParam("id") BigInteger id){  if (id == null || id.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("ID cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  Audit audit=_auditService.findAuditByPrimaryKey(id);  if (audit != null) {    return AuditDto.transformToDto(_auditService.findAuditByPrimaryKey(id));  } else {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }}  }
class C{  @Override public boolean isEmpty(){  return findFirst() == null;}  }
class C{  public static boolean isConnectionFast(int type,int subType){  if (type == ConnectivityManager.TYPE_WIFI) {    return true;  } else   if (type == ConnectivityManager.TYPE_MOBILE) {switch (subType) {case TelephonyManager.NETWORK_TYPE_1xRTT:      return false;case TelephonyManager.NETWORK_TYPE_CDMA:    return false;case TelephonyManager.NETWORK_TYPE_EDGE:  return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :return false;}} else {return false;}}  }
class C{  public static InputStream reWriteWaveHeader(InputStream is) throws IOException {  byte[] audioBytes=toByteArray(is);  int filesize=audioBytes.length - WAVE_HEADER_SIZE;  writeInt(filesize,audioBytes,WAVE_SIZE_POS);  writeInt(filesize - WAVE_HEADER_SIZE,audioBytes,WAVE_METADATA_POS);  return new ByteArrayInputStream(audioBytes);}  }
class C{  @SuppressFBWarnings(value="OBL_UNSATISFIED_OBLIGATION",justification="stream stays open, and will be read when nessesary.") protected void fileInit(File myFile,boolean compressed) throws FitsException {  try {    if (compressed) {      streamInit(new FileInputStream(myFile));    } else {      randomInit(myFile);    }  } catch (  IOException e) {    throw new FitsException("Unable to create Input Stream from File: " + myFile,e);  }}  }
class C{  public void individualsEvaluatedStatistics(SteadyStateEvolutionState state,Individual[] newIndividuals,Individual[] oldIndividuals,int[] subpopulations,int[] indices){  for (int x=0; x < children.length; x++)   if (children[x] instanceof SteadyStateStatisticsForm)   ((SteadyStateStatisticsForm)children[x]).individualsEvaluatedStatistics(state,newIndividuals,oldIndividuals,subpopulations,indices);}  }
class C{  @Override public void cleanUp(){  m_lCBCIV=0;  super.cleanUp();}  }
class C{  protected AbstractMapEntry(final K key,final V value){  super(key,value);}  }
class C{  public static void addDefaultInputMode(String mode,String[][] inputChars){  if (defaultInputModes == null) {    defaultInputModes=new Hashtable();  }  defaultInputModes.put(mode,inputChars);}  }
class C{  public boolean categoryDesignatorIsWrappersAndContainers(){  return (this.key[4] == 0x03);}  }
class C{  public void deleteAlias(String aliasEmail) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  service.delete(new URL("https://apps-apis.google.com/a/feeds/alias/2.0/" + domain + "/"+ aliasEmail));}  }
class C{  public static String serveObjectData(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession();  Locale locale=UtilHttp.getLocale(request);  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  String userAgent=request.getHeader("User-Agent");  Map<String,Object> httpParams=UtilHttp.getParameterMap(request);  String contentId=(String)httpParams.get("contentId");  if (UtilValidate.isEmpty(contentId)) {    String errorMsg="Required parameter contentId not found!";    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  String permissionService=EntityUtilProperties.getPropertyValue("content.properties","stream.permission.service","genericContentPermission",delegator);  GenericValue content;  try {    content=EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());    return "error";  }  if (content == null) {    String errorMsg="No content found for Content ID: " + contentId;    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  String dataResourceId=content.getString("dataResourceId");  if (UtilValidate.isEmpty(dataResourceId)) {    String errorMsg="No Data Resource found for Content ID: " + contentId;    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  GenericValue dataResource;  try {    dataResource=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",dataResourceId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());    return "error";  }  if (dataResource == null) {    String errorMsg="No Data Resource found for ID: " + dataResourceId;    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  String isPublic=dataResource.getString("isPublic");  if (UtilValidate.isEmpty(isPublic)) {    isPublic="N";  }  if (!"Y".equalsIgnoreCase(isPublic)) {    Map<String,? extends Object> permSvcCtx=UtilMisc.toMap("userLogin",userLogin,"locale",locale,"mainAction","VIEW","contentId",contentId);    Map<String,Object> permSvcResp;    try {      permSvcResp=dispatcher.runSync(permissionService,permSvcCtx);    } catch (    GenericServiceException e) {      Debug.logError(e,module);      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());      return "error";    }    if (ServiceUtil.isError(permSvcResp)) {      String errorMsg=ServiceUtil.getErrorMessage(permSvcResp);      Debug.logError(errorMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errorMsg);      return "error";    }    Boolean hasPermission=(Boolean)permSvcResp.get("hasPermission");    if (!hasPermission.booleanValue()) {      String errorMsg=(String)permSvcResp.get("failMessage");      Debug.logError(errorMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errorMsg);      return "error";    }  }  String contextRoot=(String)request.getAttribute("_CONTEXT_ROOT_");  String webSiteId=(String)session.getAttribute("webSiteId");  String dataName=dataResource.getString("dataResourceName");  String mimeType=DataResourceWorker.getMimeType(dataResource);  if (userAgent.indexOf("MSIE") > -1) {    Debug.logInfo("Found MSIE changing mime type from - " + mimeType,module);    mimeType="application/octet-stream";  }  String https="false";  String protocol=request.getProtocol();  if ("https".equalsIgnoreCase(protocol)) {    https="true";  }  Map<String,Object> resourceData;  try {    resourceData=DataResourceWorker.getDataResourceStream(dataResource,https,webSiteId,locale,contextRoot,false);  } catch (  IOException e) {    Debug.logError(e,"Error getting DataResource stream",module);    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());    return "error";  }catch (  GeneralException e) {    Debug.logError(e,"Error getting DataResource stream",module);    request.setAttribute("_ERROR_MESSAGE_",e.getMessage());    return "error";  }  InputStream stream=null;  Long length=null;  if (resourceData != null) {    stream=(InputStream)resourceData.get("stream");    length=(Long)resourceData.get("length");  }  Debug.logInfo("Got resource data stream: " + length + " bytes",module);  if (stream != null && length != null) {    try {      UtilHttp.streamContentToBrowser(response,stream,length.intValue(),mimeType,dataName);    } catch (    IOException e) {      Debug.logError(e,"Unable to write content to browser",module);      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());      return "io-error";    }  } else {    String errorMsg="No data is available.";    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  return "success";}  }
class C{  public DrawingEditorProxy(){  forwarder=new Forwarder();}  }
class C{  public int size(){  return count;}  }
class C{  public static Map<String,String> createFoldersForVolumeAndSnaps(XtremIOClient client,String rootVolumeFolderName) throws Exception {  List<String> folderNames=client.getVolumeFolderNames();  _log.info("Volume folder Names found on Array : {}",Joiner.on("; ").join(folderNames));  Map<String,String> folderNamesMap=new HashMap<String,String>();  String rootFolderName=XtremIOConstants.V1_ROOT_FOLDER.concat(rootVolumeFolderName);  _log.info("rootVolumeFolderName: {}",rootFolderName);  String volumesFolderName=rootFolderName.concat(XtremIOConstants.VOLUMES_SUBFOLDER);  String snapshotsFolderName=rootFolderName.concat(XtremIOConstants.SNAPSHOTS_SUBFOLDER);  folderNamesMap.put(XtremIOConstants.VOLUME_KEY,volumesFolderName);  folderNamesMap.put(XtremIOConstants.SNAPSHOT_KEY,snapshotsFolderName);  if (!folderNames.contains(rootFolderName)) {    _log.info("Sending create root folder request {}",rootFolderName);    client.createTag(rootVolumeFolderName,"/",XtremIOConstants.XTREMIO_ENTITY_TYPE.Volume.name(),null);  } else {    _log.info("Found {} folder on the Array.",rootFolderName);  }  long waitTime=30000;  int count=0;  while (waitTime > 0) {    count++;    _log.debug("Retrying {} time to find the volume folders",count);    if (!folderNames.contains(volumesFolderName)) {      _log.debug("sleeping time {} remaining time: {}",SLEEP_TIME,(waitTime - SLEEP_TIME));      Thread.sleep(SLEEP_TIME);      waitTime=waitTime - SLEEP_TIME;      folderNames=client.getVolumeFolderNames();    } else {      _log.info("Found {} folder on the Array.",volumesFolderName);      break;    }  }  if (!folderNames.contains(volumesFolderName)) {    _log.info("Sending create volume folder request {}",volumesFolderName);    client.createTag("volumes",rootFolderName,XtremIOConstants.XTREMIO_ENTITY_TYPE.Volume.name(),null);  }  if (!folderNames.contains(snapshotsFolderName)) {    _log.info("Sending create snapshot folder request {}",snapshotsFolderName);    client.createTag("snapshots",rootFolderName,XtremIOConstants.XTREMIO_ENTITY_TYPE.Volume.name(),null);  } else {    _log.info("Found {} folder on the Array.",snapshotsFolderName);  }  return folderNamesMap;}  }
class C{  protected void newLine(PrintWriter file){  file.println(BLANK_LINE);}  }
class C{  public boolean isValidRow(int row){  return m_rows.isValidRow(row);}  }
class C{  public static Dog maxDog(Dog d1,Dog d2){  if (d1.size >= d2.size)   return d1;  return d2;}  }
class C{  public static void print(ByteBuffer bytes,PrintStream out){  print(bytes,out,0,bytes.limit());}  }
class C{  public boolean more(){  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  public MinPQ(int initCapacity){  pq=(Key[])new Object[initCapacity + 1];  n=0;}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "CU_GRAPHICS_REGISTER_FLAGS_NONE";  }  String result="";  if ((n & CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY) != 0)   result+="CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY ";  if ((n & CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD) != 0)   result+="CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD ";  if ((n & CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST) != 0)   result+="CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST ";  if ((n & CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER) != 0)   result+="CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER ";  return result;}  }
class C{  public synchronized void add(double value){  add(mCategories.size() + "",value);}  }
class C{  @After public void tearDown() throws Exception {  dictionaryChunksWrapper=null;  expectedData=null;  dictionaryChuncks=null;}  }
class C{  protected String localGlobalSummary(Object local,Object global){  return getString(R.string.status_local_global,local,global);}  }
class C{  public final void readFully(byte b[],int off,int len) throws IOException {  if (len < 0)   throw new IndexOutOfBoundsException();  int n=0;  while (n < len) {    int count=in.read(b,off + n,len - n);    if (count < 0)     throw new EOFException();    n+=count;  }}  }
class C{  void updateInputAttributes(int dot,int mark,JTextComponent c){  Document aDoc=c.getDocument();  if (!(aDoc instanceof StyledDocument)) {    return;  }  int start=Math.min(dot,mark);  StyledDocument doc=(StyledDocument)aDoc;  Element run;  currentParagraph=doc.getParagraphElement(start);  if (currentParagraph.getStartOffset() == start || dot != mark) {    run=doc.getCharacterElement(start);  } else {    run=doc.getCharacterElement(Math.max(start - 1,0));  }  if (run != currentRun) {    currentRun=run;    createInputAttributes(currentRun,getInputAttributes());  }}  }
class C{  public void flashBacklight(int duration){  impl.flashBacklight(duration);}  }
class C{  private void storeAndSendStats(GCPStatsDataHolder statsData,String[] metricInfo,GCPMetricResponse response,StatsCollectionStage nextStage){  ServiceStat stat=new ServiceStat();  List<ServiceStat> datapoint=new ArrayList<ServiceStat>();  if (response.timeSeries != null) {    TimeSeries ts=response.timeSeries[0];    stat.latestValue=ts.points[0].value.int64Value == null ? Double.parseDouble(ts.points[0].value.doubleValue) : Double.parseDouble(ts.points[0].value.int64Value);    stat.unit=GCPStatsNormalizer.getNormalizedUnitValue(metricInfo[1]);    try {      stat.sourceTimeMicrosUtc=getTimestampInMicros(ts.points[0].interval.startTime);    } catch (    ParseException e) {      handleError(statsData,e);      return;    }    datapoint=Collections.singletonList(stat);  }  statsData.statsResponse.statValues.put(GCPStatsNormalizer.getNormalizedStatKeyValue(metricInfo[0]),datapoint);  if (statsData.numResponses.incrementAndGet() == METRIC_NAMES_UNITS.length) {    SingleResourceStatsCollectionTaskState respBody=new SingleResourceStatsCollectionTaskState();    statsData.statsResponse.computeLink=statsData.computeDesc.documentSelfLink;    respBody.taskStage=(SingleResourceTaskCollectionStage)statsData.statsRequest.nextStage;    respBody.statsList=Collections.singletonList(statsData.statsResponse);    setOperationDurationStat(statsData.gcpStatsCollectionOperation);    statsData.gcpStatsCollectionOperation.complete();    respBody.statsAdapterReference=UriUtils.buildUri(getHost(),SELF_LINK);    this.sendRequest(Operation.createPatch(statsData.statsRequest.taskReference).setBody(respBody));  }}  }
class C{  @SuppressFBWarnings("JLM_JSR166_UTILCONCURRENT_MONITORENTER") private Map<String,List<String>> map() throws IOException {synchronized (this.saved) {    if (this.saved.isEmpty()) {      this.saved.add(this.freshMap());    }    return this.saved.get(0);  }}  }
class C{  public void drawString(AttributedCharacterIterator iterator,float x,float y){  if (iterator == null) {    throw new NullPointerException("AttributedCharacterIterator is null");  }  TextLayout layout=new TextLayout(iterator,getFontRenderContext());  layout.draw(this,x,y);}  }
class C{  @PreAuthorize("hasRole('ROLE_USER_MANAGER')") @Transactional(readOnly=false,propagation=Propagation.REQUIRED) public void createUser(User user) throws RequiredFieldMissingException, RootNotModifiableException, EmailNotSentException {  systemCreateUser(user);}  }
class C{  public void testGetObject2() throws Exception {  try {    new SealedObject("secret string",new NullCipher()).getObject((Cipher)null);    fail("NullPointerException should be thrown in the case of " + "null cipher.");  } catch (  NullPointerException e) {  }  KeyGenerator kg=KeyGenerator.getInstance("DES");  Key key=kg.generateKey();  IvParameterSpec ips=new IvParameterSpec(new byte[]{1,2,3,4,5,6,7,8});  Cipher cipher=Cipher.getInstance("DES/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,key,ips);  String secret="secret string";  SealedObject so=new SealedObject(secret,cipher);  cipher.init(Cipher.DECRYPT_MODE,key,ips);  assertEquals("The returned object does not equals to the " + "original object.",secret,so.getObject(cipher));  try {    so.getObject((Cipher)null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public void deactivate(){  in=null;}  }
class C{  @Override protected void refreshVisuals(){  NoteFigure notefigure=(NoteFigure)getFigure();  Point location=notefigure.getLocation();  DiagramPart parent=(DiagramPart)getParent();  Rectangle constraint=new Rectangle(location.x,location.y,-1,-1);  parent.setLayoutConstraint(this,notefigure,constraint);}  }
class C{  public void addDataPoint(Vec v,int[] classes,int classification,double weight){  if (v.length() != numNumerVals)   throw new RuntimeException("Data point does not contain enough numerical data points");  if (classes.length != categories.length)   throw new RuntimeException("Data point does not contain enough categorical data points");  for (int i=0; i < classes.length; i++)   if (!categories[i].isValidCategory(classes[i]) && classes[i] >= 0)   throw new IllegalArgumentException("Categoriy value given is invalid");  datapoints.add(new DataPoint(v,classes,categories,weight));  category.add(classification);  columnVecCache.clear();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hljp");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void handleStateMoving(InetAddress endpoint,String[] pieces){  assert pieces.length >= 2;  Token token=getPartitioner().getTokenFactory().fromString(pieces[1]);  if (logger.isDebugEnabled())   logger.debug("Node {} state moving, new token {}",endpoint,token);  tokenMetadata.addMovingEndpoint(token,endpoint);  PendingRangeCalculatorService.instance.update();}  }
class C{  public HessianProxyResolver(HessianProxyFactory factory){  _factory=factory;}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int ENAMETOOLONG(){  return Errno.ENAMETOOLONG.intValue();}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  @OnSave void updateCache(){  CACHE.invalidate(tldStr);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public boolean isObject(){  return this.isObject;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___GET_PROPERTY_IM:    return getProperty_IM();case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___SET_PROPERTY_IM__SYMBOLTABLEENTRY:  setProperty_IM((SymbolTableEntry)arguments.get(0));return null;case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___GET_PROPERTY_NAME:return getPropertyName();case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___GET_PROPERTY:return getProperty();case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___SET_PROPERTY__IDENTIFIABLEELEMENT:setProperty((IdentifiableElement)arguments.get(0));return null;case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET:return getOriginalTargetOfRewiredTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateInverse(){  inv=inverse(trans);}  }
class C{  private void doIndex(Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  baseRequest.setHandled(true);  String token=request.getParameter(Constants.HTTP_PARAM_TOKEN);  String[] selectors=request.getParameterValues(Constants.HTTP_PARAM_SELECTOR);  if (null == selectors) {    throw new IOException("Missing selector.");  }  if (selectors.length != 1) {    throw new IOException("Can only specify a single selector per request.");  }  if (null == token) {    throw new IOException("Missing token.");  }  if (!this.subscriptions.containsKey(token)) {    throw new IOException("The provided token does not have any current subscriptions in this index.");  }  URL url=new URL(this.fetchEndpoint);  HttpURLConnection conn=(HttpURLConnection)url.openConnection();  conn.setDoOutput(false);  conn.setDoInput(true);  conn.setChunkedStreamingMode(8192);  conn.setRequestMethod("POST");  conn.setRequestProperty("Content-Type","application/x-www-form-urlencoded");  long now=System.currentTimeMillis();  StringBuilder sb=new StringBuilder(Long.toHexString(now));  sb.append(":");  byte[] content=(Long.toString(now) + ":" + token).getBytes(Charsets.ISO_8859_1);  long hash=SipHashInline.hash24(this.SIPHASH_FETCH_PSK[0],this.SIPHASH_FETCH_PSK[1],content,0,content.length);  sb.append(Long.toHexString(hash));  conn.setRequestProperty(Constants.getHeader(Configuration.HTTP_HEADER_FETCH_SIGNATURE),sb.toString());  sb=new StringBuilder();  sb.append(WarpURLEncoder.encode(Constants.HTTP_PARAM_TOKEN,"UTF-8"));  sb.append("=");  sb.append(WarpURLEncoder.encode(token,"UTF-8"));  sb.append("&");  sb.append(WarpURLEncoder.encode(Constants.HTTP_PARAM_SELECTOR,"UTF-8"));  sb.append("=");  sb.append(WarpURLEncoder.encode(selectors[0],"UTF-8"));  sb.append("&");  sb.append(WarpURLEncoder.encode(Constants.HTTP_PARAM_FORMAT,"UTF-8"));  sb.append("=");  sb.append(WarpURLEncoder.encode("wrapper","UTF-8"));  if (null != request.getParameter(Constants.HTTP_PARAM_NOW) && null != request.getParameter(Constants.HTTP_PARAM_TIMESPAN)) {    sb.append("&");    sb.append(WarpURLEncoder.encode(Constants.HTTP_PARAM_NOW,"UTF-8"));    sb.append("=");    sb.append(WarpURLEncoder.encode(request.getParameter(Constants.HTTP_PARAM_NOW),"UTF-8"));    sb.append("&");    sb.append(WarpURLEncoder.encode(Constants.HTTP_PARAM_TIMESPAN,"UTF-8"));    sb.append("=");    sb.append(WarpURLEncoder.encode(request.getParameter(Constants.HTTP_PARAM_TIMESPAN),"UTF-8"));  } else   if (null != request.getParameter(Constants.HTTP_PARAM_START) && null != request.getParameter(Constants.HTTP_PARAM_STOP)) {    sb.append("&");    sb.append(WarpURLEncoder.encode(Constants.HTTP_PARAM_START,"UTF-8"));    sb.append("=");    sb.append(WarpURLEncoder.encode(request.getParameter(Constants.HTTP_PARAM_START),"UTF-8"));    sb.append("&");    sb.append(WarpURLEncoder.encode(Constants.HTTP_PARAM_STOP,"UTF-8"));    sb.append("=");    sb.append(WarpURLEncoder.encode(request.getParameter(Constants.HTTP_PARAM_STOP),"UTF-8"));  } else {    throw new IOException("Missing parameters " + Constants.HTTP_PARAM_START + "/"+ Constants.HTTP_PARAM_STOP+ " or "+ Constants.HTTP_PARAM_NOW+ "/"+ Constants.HTTP_PARAM_TIMESPAN);  }  byte[] postDataBytes=sb.toString().getBytes(Charsets.UTF_8);  conn.setRequestProperty("Content-Length",Long.toString(postDataBytes.length));  conn.getOutputStream().write(postDataBytes);  InputStream in=conn.getInputStream();  BufferedReader br=new BufferedReader(new InputStreamReader(in));  TDeserializer deserializer=new TDeserializer(new TCompactProtocol.Factory());  long total=0L;  while (true) {    String line=br.readLine();    if (null == line) {      break;    }    byte[] data=line.getBytes(Charsets.US_ASCII);    long mac=Longs.fromByteArray(Hex.decode(new String(data,0,16,Charsets.US_ASCII)));    data=OrderPreservingBase64.decode(data,16,data.length - 16);    hash=SipHashInline.hash24(this.SIPHASH_FETCH_PSK[0],this.SIPHASH_FETCH_PSK[1],data,0,data.length);    if (hash != mac) {      Map<String,String> labels=new HashMap<String,String>();      labels.put(SensisionConstants.SENSISION_LABEL_GEODIR,this.name);      Sensision.update(SensisionConstants.SENSISION_CLASS_GEODIR_FETCH_INVALIDMACS,labels,1);      continue;    }    GTSWrapper wrapper=new GTSWrapper();    try {      deserializer.deserialize(wrapper,Arrays.copyOfRange(data,16,data.length));      total+=wrapper.getCount();    } catch (    TException te) {      Map<String,String> labels=new HashMap<String,String>();      labels.put(SensisionConstants.SENSISION_LABEL_GEODIR,this.name);      Sensision.update(SensisionConstants.SENSISION_CLASS_GEODIR_FETCH_FAILEDDESER,labels,1);      continue;    }    if (0L != wrapper.getBase()) {      Map<String,String> labels=new HashMap<String,String>();      labels.put(SensisionConstants.SENSISION_LABEL_GEODIR,this.name);      Sensision.update(SensisionConstants.SENSISION_CLASS_GEODIR_FETCH_INVALIDBASE,labels,1);      continue;    }    pushData(wrapper);  }  br.close();  conn.disconnect();  pushData(null);  response.setContentType("text/plain");  response.setStatus(HttpServletResponse.SC_OK);  response.getWriter().println(total);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.ls.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new BatikTestDocumentBuilderFactory(new DocumentBuilderSetting[0]);  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  @DELETE @Path("downloads/{artifact}/{version}") @ApiOperation(value="Deletes downloaded artifact") @ApiResponses(value={@ApiResponse(code=204,message="Successfully removed"),@ApiResponse(code=400,message="Illegal version format or artifact name"),@ApiResponse(code=500,message="Server error")}) public Response deleteDownloadedArtifact(@PathParam("artifact") @ApiParam(value="Artifact name") final String artifactName,@PathParam("version") @ApiParam(value="Artifact version") final String artifactVersion){  try {    Artifact artifact=createArtifact(artifactName);    Version version=Version.valueOf(artifactVersion);    facade.deleteDownloadedArtifact(artifact,version);    return Response.status(Response.Status.NO_CONTENT).build();  } catch (  Exception e) {    return handleException(e);  }}  }
class C{  public void notifyTouchMode(){switch (mTouchMode) {case TOUCH_MODE_SCROLLING:    reportScrollStateChange(OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);  break;case TOUCH_MODE_FLINGING:reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);break;case TOUCH_MODE_IDLE:reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);break;}}  }
class C{  private void deleteSelectedForms(){  if (mBackgroundTasks.mDeleteFormsTask == null) {    mBackgroundTasks.mDeleteFormsTask=new DeleteFormsTask();    mBackgroundTasks.mDeleteFormsTask.setContentResolver(getContentResolver());    mBackgroundTasks.mDeleteFormsTask.setDeleteListener(this);    mBackgroundTasks.mDeleteFormsTask.execute(mSelected.toArray(new Long[mSelected.size()]));  } else {    Toast.makeText(this,getString(R.string.file_delete_in_progress),Toast.LENGTH_LONG).show();  }}  }
class C{  protected Misc(){}  }
class C{  public static Set<String> keySet(){  return map.keySet();}  }
class C{  public static Spannable filterAsyncFromFile(Spannable spannable,int fontSize,String filePath,EmojiAsyncLoadTextView emojiAsyncLoadTextView){  if (spannable == null) {    return null;  }  Matcher m=getMatcher(spannable.toString());  if (m != null) {    while (m.find()) {      String emojiHex=Integer.toHexString(Character.codePointAt(m.group(),0));      EmojiDrawable emojiDrawable=new EmojiDrawable();      emojiDrawable.setBounds(0,0,fontSize,fontSize);      spannable.setSpan(new EmojiSpan(emojiDrawable,emojiAsyncLoadTextView),m.start(),m.end(),Spannable.SPAN_INCLUSIVE_EXCLUSIVE);      emojiAsyncLoadTextView.addAsyncLoadTask(emojiDrawable,filePath + emojiHex + ".png");    }  }  return spannable;}  }
class C{  public void quickSortFromTo(int from,int to,java.util.Comparator c){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  cern.colt.Sorting.quickSort(elements,from,to + 1,c);}  }
class C{  public void cancel(){  if (mAnimatorMap.size() > 0) {    HashMap<Animator,PropertyBundle> mAnimatorMapCopy=(HashMap<Animator,PropertyBundle>)mAnimatorMap.clone();    Set<Animator> animatorSet=mAnimatorMapCopy.keySet();    for (    Animator runningAnim : animatorSet) {      runningAnim.cancel();    }  }  mPendingAnimations.clear();  mView.removeCallbacks(mAnimationStarter);}  }
class C{  public void updateString(int columnIndex,String x) throws SQLException {  checkUpdatable();  getField(columnIndex).setString(x);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == GenericDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.METHOD_DECLARATION__TYPE_VARS:      return N4JSPackage.GENERIC_DECLARATION__TYPE_VARS;default :    return -1;}}if (baseClass == TypeProvidingElement.class) {switch (derivedFeatureID) {default :  return -1;}}if (baseClass == TypedElement.class) {switch (derivedFeatureID) {case N4JSPackage.METHOD_DECLARATION__DECLARED_TYPE_REF:return N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF;case N4JSPackage.METHOD_DECLARATION__BOGUS_TYPE_REF:return N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF;default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (derivedFeatureID) {case N4JSPackage.METHOD_DECLARATION__DECLARED_NAME:return N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void writeOperationsArray(IndentingWriter p) throws IOException {  p.plnI("private static final " + OPERATION + "[] operations = {");  for (int i=0; i < remoteMethods.length; i++) {    if (i > 0)     p.pln(",");    p.p("new " + OPERATION + "(\""+ remoteMethods[i].operationString()+ "\")");  }  p.pln();  p.pOln("};");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.865 -0500",hash_original_method="1DFB0A727BF9534907B350DDA9E1A15B",hash_generated_method="92AFDADAC888175B664EA1D35DE74759") public void readOID() throws IOException {  if (tag != ASN1Constants.TAG_OID) {    throw expected("OID");  }  if (length < 1) {    throw new ASN1Exception("Wrong length for ASN.1 object identifier at [" + tagOffset + "]");  }  readContent();  if ((buffer[offset - 1] & 0x80) != 0) {    throw new ASN1Exception("Wrong encoding at [" + (offset - 1) + "]");  }  oidElement=1;  for (int i=0; i < length; i++, ++oidElement) {    while ((buffer[contentOffset + i] & 0x80) == 0x80) {      i++;    }  }}  }
class C{  public FixedRateBond(final int settlementDays,final double faceAmount,final Schedule schedule,final double[] coupons,final DayCounter accrualDayCounter,final BusinessDayConvention paymentConvention,final double redemption){  this(settlementDays,faceAmount,schedule,coupons,accrualDayCounter,paymentConvention,redemption,new Date());}  }
class C{  public SubpopulationFilteringEventsManager(final ObjectAttributes personAtts,final String attName,final String subpop){  this(new SubpopulationFilter(personAtts,attName,subpop));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildFourthFloor(zone);}  }
class C{  public Set waitForRequiredRoles(long timeout) throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();  checkReadiness();  if (!getMembershipAttributes().hasRequiredRoles()) {    throw new IllegalStateException(LocalizedStrings.DistributedRegion_REGION_HAS_NOT_BEEN_CONFIGURED_WITH_REQUIRED_ROLES.toLocalizedString());  }  if (!this.isMissingRequiredRoles) {    if (logger.isDebugEnabled()) {      logger.debug("No missing required roles to wait for.");    }    return Collections.EMPTY_SET;  }  if (timeout != 0) {    if (timeout == -1) {      while (this.isMissingRequiredRoles) {        checkReadiness();        this.cache.getCancelCriterion().checkCancelInProgress(null);synchronized (this.missingRequiredRoles) {          if (this.isMissingRequiredRoles) {            if (logger.isDebugEnabled()) {              logger.debug("About to wait for missing required roles.");            }            this.missingRequiredRoles.wait();          }        }      }    } else {      long endTime=System.currentTimeMillis() + timeout;      while (this.isMissingRequiredRoles) {        checkReadiness();        this.cache.getCancelCriterion().checkCancelInProgress(null);synchronized (this.missingRequiredRoles) {          if (this.isMissingRequiredRoles) {            long timeToWait=endTime - System.currentTimeMillis();            if (timeToWait > 0) {              if (logger.isDebugEnabled()) {                logger.debug("About to wait up to {} milliseconds for missing required roles.",timeToWait);              }              this.missingRequiredRoles.wait(timeToWait);            } else {              break;            }          }        }      }    }  }  checkReadiness();  if (this.isMissingRequiredRoles) {synchronized (this.missingRequiredRoles) {      return Collections.unmodifiableSet(new HashSet(this.missingRequiredRoles));    }  } else {    return Collections.EMPTY_SET;  }}  }
class C{  protected boolean formatText(char[] text,String margin,boolean preceedingSpace) throws IOException {  int i=0;  boolean startsWithSpace=preceedingSpace;  loop:   while (i < text.length) {    for (; ; ) {      if (i >= text.length) {        break loop;      }      if (!XMLUtilities.isXMLSpace(text[i])) {        break;      }      startsWithSpace=true;      i++;    }    StringBuffer sb=new StringBuffer();    for (; ; ) {      if (i >= text.length || XMLUtilities.isXMLSpace(text[i])) {        break;      }      sb.append(text[i++]);    }    if (sb.length() == 0) {      return startsWithSpace;    }    if (startsWithSpace) {      int endCol=column + sb.length();      if ((endCol >= prettyPrinter.getDocumentWidth() - 1) && ((margin.length() + sb.length() < prettyPrinter.getDocumentWidth() - 1) || (margin.length() < column))) {        printNewline();        printString(margin);      } else       if (column > margin.length()) {        printCharacter(' ');      }    }    printString(sb.toString());    startsWithSpace=false;  }  return startsWithSpace;}  }
class C{  private static String usage(){  StringBuilder sb=new StringBuilder();  String nl=System.getProperty("line.separator");  sb.append(String.format("Usage: java %s [OPTS] phrasal_ini%n%n",PhrasalService.class.getName()));  sb.append("Options:").append(nl);  sb.append(" -p       : Port (default: ").append(DEFAULT_HTTP_PORT).append(")").append(nl);  sb.append(" -l       : Run on localhost").append(nl);  sb.append(" -m       : Load mock servlet").append(nl);  sb.append(" -u file  : UI to load (html file)").append(nl);  sb.append(" -r path  : Static resource base path").append(nl);  return sb.toString();}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  root=(JRootPane)c;  int style=root.getWindowDecorationStyle();  if (style != JRootPane.NONE) {    installClientDecorations(root);  }}  }
class C{  protected int findClosest(Color c){  if (colorTab == null)   return -1;  int r=c.getRed();  int g=c.getGreen();  int b=c.getBlue();  int minpos=0;  int dmin=256 * 256 * 256;  int len=colorTab.length;  for (int i=0; i < len; ) {    int dr=r - (colorTab[i++] & 0xff);    int dg=g - (colorTab[i++] & 0xff);    int db=b - (colorTab[i] & 0xff);    int d=dr * dr + dg * dg + db * db;    int index=i / 3;    if (usedEntry[index] && (d < dmin)) {      dmin=d;      minpos=index;    }    i++;  }  return minpos;}  }
class C{  public MissingHeader(){  requestFileName="no-header.query";}  }
class C{  public static BlockingDataflowRunner fromOptions(PipelineOptions options){  BlockingDataflowPipelineOptions dataflowOptions=PipelineOptionsValidator.validate(BlockingDataflowPipelineOptions.class,options);  DataflowRunner dataflowRunner=DataflowRunner.fromOptions(dataflowOptions);  return new BlockingDataflowRunner(dataflowRunner,dataflowOptions);}  }
class C{  private void triggerCheck(CandidatePair triggerPair){  CandidatePair knownPair=findCandidatePair(triggerPair.getLocalCandidate().getTransportAddress(),triggerPair.getRemoteCandidate().getTransportAddress());  IceMediaStream parentStream=triggerPair.getLocalCandidate().getParentComponent().getParentStream();  if (knownPair != null) {    boolean useCand=triggerPair.useCandidateReceived();    if (useCand)     knownPair.setUseCandidateReceived();    triggerPair=knownPair;    if (knownPair.getState() == CandidatePairState.SUCCEEDED) {      if (!isControlling() && useCand) {        logger.fine("update nominated flag");        nominationConfirmed(triggerPair);        checkListStatesUpdated();      }      return;    }    if (knownPair.getState() == CandidatePairState.IN_PROGRESS) {      TransactionID checkTransaction=knownPair.getConnectivityCheckTransaction();      getStunStack().cancelTransaction(checkTransaction);    }  } else {    if (triggerPair.getParentComponent().getSelectedPair() == null)     logger.info("Add peer CandidatePair with new reflexive " + "address to checkList: " + triggerPair);    parentStream.addToCheckList(triggerPair);  }  CheckList checkList=parentStream.getCheckList();  boolean wasFrozen=checkList.isFrozen();  checkList.scheduleTriggeredCheck(triggerPair);  if (wasFrozen && !checkList.isFrozen())   connCheckClient.startChecks(checkList);}  }
class C{  public boolean add(OMGeometry g){  setNeedToRegenerate(true);  return super.add(g);}  }
class C{  private void adjustRowCountBy(int changeAmount){  rowCount+=changeAmount;}  }
class C{  @Nullable public static File findInPath(@NotNull String fileBaseName){  return findInPath(fileBaseName,false);}  }
class C{  public static Map<String,Collection<ClusterNode>> neighborhood(Iterable<ClusterNode> nodes){  Map<String,Collection<ClusterNode>> map=new HashMap<>();  for (  ClusterNode n : nodes) {    String macs=n.attribute(ATTR_MACS);    assert macs != null : "Missing MACs attribute: " + n;    Collection<ClusterNode> neighbors=map.get(macs);    if (neighbors == null)     map.put(macs,neighbors=new ArrayList<>(2));    neighbors.add(n);  }  return map;}  }
class C{  public static CharSequence downloadViaHttp(String uri,ContentType type) throws IOException {  return downloadViaHttp(uri,type,Integer.MAX_VALUE);}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  PerformanceVector expected=(PerformanceVector)expectedObj;  PerformanceVector actual=(PerformanceVector)actualObj;  message=message + "Performance vectors are not equal";  int expSize=expected.getSize();  int actSize=actual.getSize();  Assert.assertEquals(message + " (size of the performance vector is not equal)",expSize,actSize);  int size=expSize;  RapidAssert.assertArrayEquals(message,expected.getCriteriaNames(),actual.getCriteriaNames());  RapidAssert.assertEquals(message,expected.getMainCriterion(),actual.getMainCriterion());  for (int i=0; i < size; i++) {    RapidAssert.assertEquals(message,expected.getCriterion(i),actual.getCriterion(i));  }}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  public void executeQuery(Connection con,String query) throws SQLException {  if (con == null) {    throw new SQLException("There is no database to execute the query.");  }  ResultSet resultSet=null;  Statement statement=null;  try {    statement=con.createStatement();    resultSet=statement.executeQuery(query);    ResultSetMetaData metaData=resultSet.getMetaData();    int numberOfColumns=metaData.getColumnCount();    int numberOfValidColumns=0;    int[] columnTypes=new int[numberOfColumns];    for (int column=0; column < numberOfColumns; column++) {      try {        int type=metaData.getColumnType(column + 1);switch (type) {case Types.NUMERIC:case Types.REAL:case Types.INTEGER:case Types.DOUBLE:case Types.FLOAT:case Types.DECIMAL:case Types.BIT:case Types.DATE:case Types.TIME:case Types.TIMESTAMP:case Types.BIGINT:case Types.SMALLINT:          ++numberOfValidColumns;        columnTypes[column]=type;      break;default :    Log.warn("Unable to load column " + column + " ("+ type+ ","+ metaData.getColumnClassName(column + 1)+ ")");  columnTypes[column]=Types.NULL;break;}} catch (SQLException e) {columnTypes[column]=Types.NULL;throw e;}}if (numberOfValidColumns <= 1) {throw new SQLException("Not enough valid columns where generated by query.");}this.columnNames=new String[numberOfValidColumns - 1];int currentColumn=0;for (int column=1; column < numberOfColumns; column++) {if (columnTypes[column] != Types.NULL) {this.columnNames[currentColumn]=metaData.getColumnLabel(column + 1);++currentColumn;}}if (this.rows != null) {for (int column=0; column < this.rows.size(); column++) {ArrayList row=(ArrayList)this.rows.get(column);row.clear();}this.rows.clear();}switch (columnTypes[0]) {case Types.DATE:case Types.TIME:case Types.TIMESTAMP:this.isTimeSeries=true;break;default :this.isTimeSeries=false;break;}while (resultSet.next()) {ArrayList newRow=new ArrayList();for (int column=0; column < numberOfColumns; column++) {Object xObject=resultSet.getObject(column + 1);switch (columnTypes[column]) {case Types.NUMERIC:case Types.REAL:case Types.INTEGER:case Types.DOUBLE:case Types.FLOAT:case Types.DECIMAL:case Types.BIGINT:case Types.SMALLINT:newRow.add(xObject);break;case Types.DATE:case Types.TIME:case Types.TIMESTAMP:newRow.add(new Long(((Date)xObject).getTime()));break;case Types.NULL:break;default :System.err.println("Unknown data");columnTypes[column]=Types.NULL;break;}}this.rows.add(newRow);}if (this.rows.isEmpty()) {ArrayList newRow=new ArrayList();for (int column=0; column < numberOfColumns; column++) {if (columnTypes[column] != Types.NULL) {newRow.add(new Integer(0));}}this.rows.add(newRow);}if (this.rows.size() < 1) {this.maxValue=0.0;this.minValue=0.0;} else {this.maxValue=Double.NEGATIVE_INFINITY;this.minValue=Double.POSITIVE_INFINITY;for (int rowNum=0; rowNum < this.rows.size(); ++rowNum) {ArrayList row=(ArrayList)this.rows.get(rowNum);for (int column=1; column < numberOfColumns; column++) {Object testValue=row.get(column);if (testValue != null) {double test=((Number)testValue).doubleValue();if (test < this.minValue) {this.minValue=test;}if (test > this.maxValue) {this.maxValue=test;}}}}}fireDatasetChanged();}  finally {if (resultSet != null) {try {resultSet.close();} catch (Exception e) {}}if (statement != null) {try {statement.close();} catch (Exception e) {}}}}  }
class C{  public static <T1,T2,T3,T4,T5,R>TriFunction<T3,T4,T5,R> partial5(final T1 t1,final T2 t2,final QuintFunction<T1,T2,T3,T4,T5,R> quintFunc){  return null;}  }
class C{  public static String pathFor(final World world,final BlockPos pos){  if (API.manualAPI != null)   return API.manualAPI.pathFor(world,pos);  return null;}  }
class C{  @SuppressWarnings("unchecked") private Map<String,Object> convertToMap(Object yamlDocument){  Map<String,Object> yamlMap=new LinkedHashMap<>();  if (!(yamlDocument instanceof Map)) {    yamlMap.put("content",yamlDocument);    return yamlMap;  }  for (  Map.Entry<Object,Object> entry : ((Map<Object,Object>)yamlDocument).entrySet()) {    Object value=entry.getValue();    if (value instanceof Map) {      value=convertToMap(value);    } else     if (value instanceof Collection) {      ArrayList<Map<String,Object>> collection=new ArrayList<>();      for (      Object element : ((Collection)value)) {        collection.add(convertToMap(element));      }      value=collection;    }    yamlMap.put(entry.getKey().toString(),value);  }  return yamlMap;}  }
class C{  public static void main(String args[]) throws IOException {  String name=args[0];  ShapeIndex si=new ShapeIndex(name);  si.dumpIndex();}  }
class C{  @SuppressWarnings("unused") private void mergeMethod(MethodNode methodNode,LinkedList<String> renamedMethods){  InsnList instructions=methodNode.instructions;  Iterator<AbstractInsnNode> instructionIterator=instructions.iterator();  while (instructionIterator.hasNext()) {    AbstractInsnNode abstractInstruction=instructionIterator.next();    if (abstractInstruction instanceof FieldInsnNode) {      FieldInsnNode instruction=(FieldInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof FrameNode) {      FrameNode instruction=(FrameNode)abstractInstruction;    } else     if (abstractInstruction instanceof IincInsnNode) {      IincInsnNode instruction=(IincInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof InsnNode) {      InsnNode instruction=(InsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof IntInsnNode) {      IntInsnNode instruction=(IntInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof InvokeDynamicInsnNode) {      InvokeDynamicInsnNode instruction=(InvokeDynamicInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof JumpInsnNode) {      JumpInsnNode instruction=(JumpInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof LabelNode) {      LabelNode instruction=(LabelNode)abstractInstruction;    } else     if (abstractInstruction instanceof LdcInsnNode) {      LdcInsnNode instruction=(LdcInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof LineNumberNode) {      LineNumberNode instruction=(LineNumberNode)abstractInstruction;    } else     if (abstractInstruction instanceof LookupSwitchInsnNode) {      LookupSwitchInsnNode instruction=(LookupSwitchInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof MethodInsnNode) {      MethodInsnNode instruction=(MethodInsnNode)abstractInstruction;      for (      String renamedMethod : renamedMethods) {        if (instruction.name.equals(renamedMethod)) {          instruction.name=mergeRenamePrefix + instruction.name;          if (instruction.getOpcode() == Opcodes.INVOKESPECIAL) {            instruction.setOpcode(Opcodes.INVOKEVIRTUAL);          }        }      }    } else     if (abstractInstruction instanceof MultiANewArrayInsnNode) {      MultiANewArrayInsnNode instruction=(MultiANewArrayInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof TableSwitchInsnNode) {      TableSwitchInsnNode instruction=(TableSwitchInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof TypeInsnNode) {      TypeInsnNode instruction=(TypeInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof VarInsnNode) {      VarInsnNode instruction=(VarInsnNode)abstractInstruction;    }  }  addMethod(methodNode);}  }
class C{  public void updateRaster(float lt,float ln,int w,int h,int[] pix,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(lt,ln,w,h,pix,properties,link.dos);}  }
class C{  public static void apply(int gravity,int w,int h,Rect container,Rect outRect,int layoutDirection){  int absGravity=getAbsoluteGravity(gravity,layoutDirection);  apply(absGravity,w,h,container,0,0,outRect);}  }
class C{  private long readXmlLength(GcsFilename xmlLengthFilename) throws IOException {  try (InputStream input=gcsUtils.openInputStream(xmlLengthFilename)){    return Long.parseLong(new String(ByteStreams.toByteArray(input),UTF_8).trim());  } }  }
class C{  public void doSelectAll(){  if (hexEditControl == null)   return;  hexEditControl.selectAll();}  }
class C{  public LayoutAnimationController(Animation animation,float delay){  mDelay=delay;  setAnimation(animation);}  }
class C{  public static String right(String str,int len){  if (len < 0) {    throw new IllegalArgumentException("Requested String length " + len + " is less than zero");  }  if ((str == null) || (str.length() <= len)) {    return str;  } else {    return str.substring(str.length() - len);  }}  }
class C{  public static int count(char[] chars,char ch,int high){  if (high < 0)   return 0; else   if (chars[high] == ch)   return 1 + count(chars,ch,high - 1); else   return count(chars,ch,high - 1);}  }
class C{  public CPFCNPJTextWatcher(){}  }
class C{  public Timeline push(Timeline timeline){  if (isBuilt)   throw new RuntimeException("You can't push anything to a timeline once it is started");  if (timeline.current != timeline)   throw new RuntimeException("You forgot to call a few 'end()' statements in your pushed timeline");  timeline.parent=current;  current.children.add(timeline);  return this;}  }
class C{  void endPaint(){  if (isPaintingThread()) {    PaintManager paintManager=null;synchronized (this) {      if (--paintDepth == 0) {        paintManager=getPaintManager();      }    }    if (paintManager != null) {      paintManager.endPaint();synchronized (this) {        paintThread=null;      }    }  }}  }
class C{  Properties toProperties(Collection<LdapSetting> modelSettings,boolean keepValueForPlatformDefault){  Properties properties=new Properties();  for (  LdapSetting ldapSetting : modelSettings) {    if (ldapSetting.isPlatformDefault() && !keepValueForPlatformDefault) {      properties.setProperty(ldapSetting.getSettingKey(),"");    } else {      properties.setProperty(ldapSetting.getSettingKey(),ldapSetting.getSettingValue());    }  }  return properties;}  }
class C{  public boolean isTransactionFinished(long totalSize){  if (isNotified) {    if (!receivedByteRangeHeader) {      return true;    }    if (reportedSize == totalSize) {      return true;    }  }  return false;}  }
class C{  public void load(Reader reader,String baseURI,RDFFormat dataFormat,RDFHandler rdfHandler) throws IOException, RDFParseException, RDFHandlerException {  loadInputStreamOrReader(reader,baseURI,dataFormat,rdfHandler);}  }
class C{  public Vector2D sub(Vector2D op2){  return new Vector2D(this.x - op2.x,this.y - op2.y);}  }
class C{  public void openSequence(int tag) throws BerException {  final int backup=next;  try {    if (fetchTag() != tag) {      throw new BerException();    }    final int l=fetchLength();    if (l < 0)     throw new BerException();    if (l > (bytes.length - next))     throw new BerException();    stackBuf[stackTop++]=next + l;  } catch (  BerException e) {    next=backup;    throw e;  }}  }
class C{  public void run(){  TLCGlobals.incNumWorkers();  TLCStateVec[] newStates=null;  LongVec[] newFps=null;  final IStateQueue stateQueue=this.tlcServer.stateQueue;  try {    START:     while (true) {      states=selector.getBlocks(stateQueue,worker);      if (states == null) {synchronized (this.tlcServer) {          this.tlcServer.setDone();          this.tlcServer.notify();        }        stateQueue.finishAll();        return;      }      if (states.length == 0) {        continue;      }      sentStates+=states.length;      boolean workDone=false;      while (!workDone) {        try {          final NextStateResult res=this.worker.getNextStates(states);          newStates=res.getNextStates();          receivedStates+=newStates[0].size();          newFps=res.getNextFingerprints();          workDone=true;          task.setLastInvocation(System.currentTimeMillis());          tlcServer.addStatesGeneratedDelta(res.getStatesComputedDelta());        } catch (        RemoteException e) {          if (isRecoverable(e) && states.length > 1) {            MP.printMessage(EC.TLC_DISTRIBUTED_EXCEED_BLOCKSIZE,Integer.toString(states.length / 2));            stateQueue.sEnqueue(states);            selector.setMaxTXSize(states.length / 2);            continue START;          } else {            MP.printMessage(EC.TLC_DISTRIBUTED_WORKER_LOST,getUri().toString());            handleRemoteWorkerLost(stateQueue);            return;          }        }catch (        NullPointerException e) {          MP.printMessage(EC.TLC_DISTRIBUTED_WORKER_LOST,"\n" + throwableToString(e));          handleRemoteWorkerLost(stateQueue);          return;        }      }      BitVector[] visited=this.tlcServer.fpSetManager.putBlock(newFps,executorService);      for (int i=0; i < visited.length; i++) {        BitVector.Iter iter=new BitVector.Iter(visited[i]);        int index;        while ((index=iter.next()) != -1) {          TLCState state=newStates[i].elementAt(index);          long fp=newFps[i].elementAt(index);          state.uid=this.tlcServer.trace.writeState(state,fp);          stateQueue.sEnqueue(state);        }      }    }  } catch (  Throwable e) {    TLCState state1=null, state2=null;    if (e instanceof WorkerException) {      state1=((WorkerException)e).state1;      state2=((WorkerException)e).state2;    }    if (this.tlcServer.setErrState(state1,true)) {      if (state1 != null) {        try {          this.tlcServer.trace.printTrace(state1,state2);        } catch (        Exception e1) {          MP.printError(EC.GENERAL,e1);        }      } else {        MP.printError(EC.GENERAL,e);      }      stateQueue.finishAll();synchronized (this.tlcServer) {        this.tlcServer.notify();      }    }  } finally {    try {      cacheRateHitRatio=worker.getCacheRateRatio();    } catch (    RemoteException e) {      MP.printWarning(EC.GENERAL,"Failed to read remote worker cache statistic (Expect to see a negative chache hit rate. Does not invalidate model checking results)");    }    keepAliveTimer.cancel();    states=new TLCState[0];  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (stack.getUIComponent() != null)   stack.getUIComponent().setNextTransitionListen();  if (uiComp != null && uiComp.getUIMgr().areEffectsEnabled()) {    ZDataTable tabParent=uiComp.getTableParent();    if (tabParent != null) {      return tabParent.isDoingNextTransition() ? Boolean.TRUE : Boolean.FALSE;    }  }  return Boolean.FALSE;}  }
class C{  private SendPacket takePacket(){  mSending.set(!mQueue.isEmpty());  if (mSending.get()) {    SendPacket packet=mQueue.poll();    if (packet.isCanceled()) {      return takePacket();    } else {      mPacket=packet;    }  } else {    mPacket=null;  }  return mPacket;}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public void testBug5133() throws Exception {  String query="SELECT 1";  String output=this.conn.prepareStatement(query).toString();  System.out.println(output);  assertTrue(output.indexOf(query) != -1);}  }
class C{  public XBeeNode(){  Identifier="";  pinObjects=new HashMap<Integer,NamedBean>();  isPolled=false;}  }
class C{  private void insertLine(int line){  log.info("" + m_lines[line]);  if (m_lines[line] == null || m_lines[line].getSources().length == 0) {    log.warning("No Source lines: " + m_lines[line]);    return;  }  StringBuffer update=new StringBuffer();  for (int col=0; col < m_columns.length; col++) {    if (m_columns[col].isColumnTypeCalculation())     continue;    StringBuffer info=new StringBuffer();    info.append("Line=").append(line).append(",Col=").append(col);    StringBuffer select=new StringBuffer("SELECT ");    if (m_lines[line].getPAAmountType() != null) {      String sql=m_lines[line].getSelectClause(true);      select.append(sql);      info.append(": LineAmtType=").append(m_lines[line].getPAAmountType());    } else     if (m_columns[col].getPAAmountType() != null) {      String sql=m_columns[col].getSelectClause(true);      select.append(sql);      info.append(": ColumnAmtType=").append(m_columns[col].getPAAmountType());    } else {      log.warning("No Amount Type in line: " + m_lines[line] + " or column: "+ m_columns[col]);      continue;    }    if (p_PA_ReportCube_ID > 0)     select.append(" FROM Fact_Acct_Summary fa WHERE DateAcct "); else {      select.append(" FROM Fact_Acct fa WHERE TRUNC(DateAcct, 'DD') ");    }    BigDecimal relativeOffset=null;    if (m_columns[col].isColumnTypeRelativePeriod())     relativeOffset=m_columns[col].getRelativePeriod();    FinReportPeriod frp=getPeriod(relativeOffset);    if (m_lines[line].getPAPeriodType() != null) {      info.append(" - LineDateAcct=");      if (m_lines[line].isPeriod()) {        String sql=frp.getPeriodWhere();        info.append("Period");        select.append(sql);      } else       if (m_lines[line].isYear()) {        String sql=frp.getYearWhere();        info.append("Year");        select.append(sql);      } else       if (m_lines[line].isTotal()) {        String sql=frp.getTotalWhere();        info.append("Total");        select.append(sql);      } else       if (m_lines[line].isNatural()) {        select.append(frp.getNaturalWhere("fa"));      } else {        log.log(Level.SEVERE,"No valid Line PAPeriodType");        select.append("=0");      }    } else     if (m_columns[col].getPAPeriodType() != null) {      info.append(" - ColumnDateAcct=");      if (m_columns[col].isPeriod()) {        String sql=frp.getPeriodWhere();        info.append("Period");        select.append(sql);      } else       if (m_columns[col].isYear()) {        String sql=frp.getYearWhere();        info.append("Year");        select.append(sql);      } else       if (m_columns[col].isTotal()) {        String sql=frp.getTotalWhere();        info.append("Total");        select.append(sql);      } else       if (m_columns[col].isNatural()) {        select.append(frp.getNaturalWhere("fa"));      } else {        log.log(Level.SEVERE,"No valid Column PAPeriodType");        select.append("=0");      }    }    String s=m_lines[line].getWhereClause(p_PA_Hierarchy_ID);    if (s != null && s.length() > 0)     select.append(" AND ").append(s);    s=m_report.getWhereClause();    if (s != null && s.length() > 0)     select.append(" AND ").append(s);    if (!m_lines[line].isPostingType()) {      String PostingType=m_columns[col].getPostingType();      if (PostingType != null && PostingType.length() > 0)       select.append(" AND PostingType='").append(PostingType).append("'");      if (PostingType.equals(MReportColumn.POSTINGTYPE_Budget)) {        if (m_columns[col].getGL_Budget_ID() > 0)         select.append(" AND GL_Budget_ID=" + m_columns[col].getGL_Budget_ID());      }    }    if (m_columns[col].isColumnTypeSegmentValue())     select.append(m_columns[col].getWhereClause(p_PA_Hierarchy_ID));    select.append(m_parameterWhere);    log.finest("Line=" + line + ",Col="+ line+ ": "+ select);    if (update.length() > 0)     update.append(", ");    update.append("Col_").append(col).append(" = (").append(select).append(")");    log.finest(info.toString());  }  if (update.length() > 0) {    update.insert(0,"UPDATE T_Report SET ");    update.append(" WHERE AD_PInstance_ID=").append(getAD_PInstance_ID()).append(" AND PA_ReportLine_ID=").append(m_lines[line].getPA_ReportLine_ID()).append(" AND ABS(LevelNo)<2");    int no=DB.executeUpdate(update.toString(),get_TrxName());    if (no != 1)     log.log(Level.SEVERE,"#=" + no + " for "+ update);    log.finest(update.toString());  }  MReportSource[] mrs=m_lines[line].getSources();  for (int j=0; j < mrs.length; j++) {    StringBuffer sql1=new StringBuffer("UPDATE t_report SET accounttype=accounttype1 ,ax_case=ax_case1 " + "from (SELECT ev.accounttype as accounttype1 ," + "CASE ev.accounttype "+ " WHEN 'A'::bpchar THEN 'B'::text "+ " WHEN 'C'::bpchar THEN 'P'::text "+ " WHEN 'E'::bpchar THEN 'P'::text "+ " WHEN 'F'::bpchar THEN 'P'::text "+ " WHEN 'L'::bpchar THEN 'B'::text "+ " WHEN 'M'::bpchar THEN 'B'::text "+ " WHEN 'O'::bpchar THEN 'B'::text "+ " WHEN 'P'::bpchar THEN 'P'::text "+ " WHEN 'R'::bpchar THEN 'P'::text "+ " WHEN 'T'::bpchar THEN 'P'::text "+ " ELSE '9. Unknown'::text  END   "+ "as ax_case1 FROM fact_acct f "+ "RIGHT  JOIN c_elementvalue ev  ON  f.account_id = ev.c_elementvalue_id WHERE ev.c_elementvalue_id= ").append(mrs[j].getC_ElementValue_ID()).append(") t  ").append(" where AD_PInstance_ID = ").append(getAD_PInstance_ID()).append(" AND PA_ReportLine_ID= ").append(m_lines[line].getPA_ReportLine_ID());    int no=DB.executeUpdate(sql1.toString(),get_TrxName());    log.log(Level.SEVERE,"#=" + no + " for "+ update);  }}  }
class C{  public StatementTree buildAssignment(VariableTree variable,ExpressionTree expr){  return maker.Assignment(TreeInfo.symbolFor((JCTree)variable),(JCTree.JCExpression)expr);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.098 -0400",hash_original_method="48C97AA3045E7A9B2226A2F0245D0AFE",hash_generated_method="3B6F987AE93FE3888F8771127EE2B773") private DeferredFileOutputStream(int threshold,File outputFile,String prefix,String suffix,File directory){  super(threshold);  this.outputFile=outputFile;  memoryOutputStream=new ByteArrayOutputStream();  currentOutputStream=memoryOutputStream;  this.prefix=prefix;  this.suffix=suffix;  this.directory=directory;}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));    }  }}  }
class C{  public CircularRedirectException(){  super();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SRuntimePackage.COMPOSITE_SLOT__SLOTS:    getSlots().clear();  getSlots().addAll((Collection<? extends ExecutionSlot>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override protected void createAccs(int docCount,int slotCount) throws IOException {  if (accMap == null) {    accMap=new LinkedHashMap<>();  }  if (countAcc == null) {    countAcc=new CountSlotArrAcc(fcontext,slotCount);    countAcc.key="count";  }  if (accs != null) {    for (    SlotAcc acc : accs) {      acc.reset();    }    return;  } else {    accs=new SlotAcc[freq.getFacetStats().size()];  }  int accIdx=0;  for (  Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {    SlotAcc acc=null;    if (slotCount == 1) {      acc=accMap.get(entry.getKey());      if (acc != null) {        acc.reset();      }    }    if (acc == null) {      acc=entry.getValue().createSlotAcc(fcontext,docCount,slotCount);      acc.key=entry.getKey();      accMap.put(acc.key,acc);    }    accs[accIdx++]=acc;  }}  }
class C{  private void test() throws Exception {  bSave.setEnabled(false);  if (!m_data.test())   return;  m_statusBar.setText(res.getString("Ok"));  bSave.setEnabled(true);  m_errorString=null;}  }
class C{  public boolean containsKey(String key){  return propMap.containsKey(key);}  }
class C{  @Override public int compareTo(AttributeWeight o){  double w1=weight;  double w2=o.weight;  assert (weights == o.weights);  if (weights.getWeightType() == AttributeWeights.ABSOLUTE_WEIGHTS) {    w1=Math.abs(w1);    w2=Math.abs(w2);  }  return Double.compare(w1,w2) * weights.getSortingType();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 182) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public int read() throws IOException {  final int i=super.read();  if (i >= 0)   out.write(i);  return i;}  }
class C{  public static final float cos(final float theta){  return sin(theta + HALF_PI);}  }
class C{  public void visitFormalTypeParameter(String name){}  }
class C{  public synchronized int syncMessageToCurrentScope(String remoteMethodName,Object newMessage,boolean sendSelf){  try {    IConnection current=Red5.getConnectionLocal();    Collection<Set<IConnection>> conCollection=current.getScope().getConnections();    for (    Set<IConnection> conset : conCollection) {      for (      IConnection conn : conset) {        if (conn != null) {          if (conn instanceof IServiceCapableConnection) {            RoomClient rcl=this.clientListManager.getClientByStreamId(conn.getClient().getId());            if (rcl == null) {              continue;            } else             if (rcl.getIsScreenClient() != null && rcl.getIsScreenClient()) {              continue;            } else             if (rcl.getIsAVClient()) {              continue;            } else             if (current.getClient().getId().equals(conn.getClient().getId()) && !sendSelf) {              continue;            }            ((IServiceCapableConnection)conn).invoke(remoteMethodName,new Object[]{newMessage},this);          }        }      }    }  } catch (  Exception err) {    log.error("[syncMessageToCurrentScope]",err);  }  return 1;}  }
class C{  private boolean addManeuver(int type){  cmd.addManeuver(type);switch (type) {case (ManeuverType.MAN_HAMMERHEAD):    cmd.addStep(MoveStepType.YAW,true,true);  return true;case (ManeuverType.MAN_HALF_ROLL):cmd.addStep(MoveStepType.ROLL,true,true);return true;case (ManeuverType.MAN_BARREL_ROLL):cmd.addStep(MoveStepType.DEC,true,true);return true;case (ManeuverType.MAN_IMMELMAN):gear=MovementDisplay.GEAR_IMMEL;return false;case (ManeuverType.MAN_SPLIT_S):gear=MovementDisplay.GEAR_SPLIT_S;return false;case (ManeuverType.MAN_VIFF):if (!(ce() instanceof Aero)) {return false;}Aero a=(Aero)ce();MoveStep last=cmd.getLastStep();int vel=a.getCurrentVelocity();if (null != last) {vel=last.getVelocityLeft();}while (vel > 0) {cmd.addStep(MoveStepType.DEC,true,true);vel--;}cmd.addStep(MoveStepType.UP);return true;case (ManeuverType.MAN_SIDE_SLIP_LEFT):if (clientgui.getClient().getGame().getBoard().getType() == Board.T_GROUND) {for (int i=0; i < 8; i++) {cmd.addStep(MoveStepType.LATERAL_LEFT,true,true);}for (int i=0; i < 8; i++) {cmd.addStep(MoveStepType.FORWARDS,true,true);}} else {cmd.addStep(MoveStepType.LATERAL_LEFT,true,true);}return true;case (ManeuverType.MAN_SIDE_SLIP_RIGHT):if (clientgui.getClient().getGame().getBoard().getType() == Board.T_GROUND) {for (int i=0; i < 8; i++) {cmd.addStep(MoveStepType.LATERAL_RIGHT,true,true);}for (int i=0; i < 8; i++) {cmd.addStep(MoveStepType.FORWARDS,true,true);}} else {cmd.addStep(MoveStepType.LATERAL_RIGHT,true,true);}return true;case (ManeuverType.MAN_LOOP):cmd.addStep(MoveStepType.LOOP,true,true);return true;default :return false;}}  }
class C{  public static List<ErrorLogger.ErrorObject> validateAssetMap(PayloadRecord assetMapPayload) throws IOException {  if (assetMapPayload.getPayloadAssetType() != PayloadRecord.PayloadAssetType.AssetMap) {    throw new IMFException(String.format("Payload asset type is %s, expected asset type %s",assetMapPayload.getPayloadAssetType(),PayloadRecord.PayloadAssetType.AssetMap.toString()));  }  try {    AssetMap assetMap=new AssetMap(new ByteArrayByteRangeProvider(assetMapPayload.getPayload()));    return assetMap.getErrors();  } catch (  IMFException e) {    return e.getErrors();  }}  }
class C{  public void writeTextFile(final String filename){  try {    BufferedWriter writer=IOUtils.getBufferedWriter(filename + ".txt");    writer.write("Iteration");    for (    String identifier : this.identifiers) {      writer.write('\t');      writer.write(identifier);    }    writer.write('\t');    for (    String identifier : this.operations) {      writer.write('\t');      writer.write(identifier);    }    writer.newLine();    for (    Map.Entry<Integer,Map<String,Long>> entry : this.iterations.entrySet()) {      Integer iteration=entry.getKey();      Map<String,Long> data=entry.getValue();      writer.write(iteration.toString());      for (      String identifier : this.identifiers) {        Long time=data.get(identifier);        writer.write('\t');        writer.write(formatMilliTime(time));      }      writer.write('\t');      for (      String identifier : this.operations) {        Long startTime=data.get("BEGIN " + identifier);        Long endTime=data.get("END " + identifier);        writer.write('\t');        if (startTime != null && endTime != null) {          double diff=(endTime.longValue() - startTime.longValue()) / 1000.0;          writer.write(Time.writeTime(diff));        }      }      writer.newLine();    }    writer.flush();    writer.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void receiveResultrecordEventForSubscription(org.oscm.example.client.EventServiceStub.RecordEventForSubscriptionResponseE result){}  }
class C{  public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  log.info("VMerge.init - WinNo=" + m_WindowNo);  try {    preInit();    jbInit();    frame.getContentPane().add(this,BorderLayout.CENTER);  } catch (  Exception ex) {    log.log(Level.SEVERE,"VTreeMaintenance.init",ex);  }}  }
class C{  public Bundler putIntegerArrayList(String key,ArrayList<Integer> value){  bundle.putIntegerArrayList(key,value);  return this;}  }
class C{  public ICUVersionRecord(){}  }
class C{  public StatsResource(CacheResource cacheResource){  super("stats");  getAttributes().setTitle("Keeps track of the requests served by the proxy.");  add(new CacheStatResource("cache",cacheResource));  add(new ProxyStatResource("proxy"));}  }
class C{  public long allocate(long size,boolean init,boolean reserved) throws GridOffHeapOutOfMemoryException {  return allocate0(size,init,reserved,allocated);}  }
class C{  public float lengthOfPath(){  if (!initialised) {    initialise();  }  return pathLength;}  }
class C{  @Override public final void preTearDown() throws Exception {  StringBuffer problems=new StringBuffer();  if (cache != null) {    try {      if (remoteCloseCache()) {        problems.append("An exception occurred trying to close the cache.");      }      assertTrue(cache == null);    } catch (    Exception ex) {      String s="While closing the cache in this VM";      throw new InternalGemFireException(s,ex);    }  }  for (int h=0; h < Host.getHostCount(); h++) {    Host host=Host.getHost(h);    for (int v=0; v < host.getVMCount(); v++) {      VM vm=host.getVM(v);      boolean exceptionInThreads=vm.invoke(null);      if (exceptionInThreads) {        String s="An exception occurred in GemFire system";        problems.append(s);      }    }  }  assertEquals("Problems while tearing down","",problems.toString().trim());}  }
class C{  private Cipher createAESCipher() throws NoSuchAlgorithmException, NoSuchPaddingException {  return Cipher.getInstance(CIPHER_AES);}  }
class C{  protected void addGuaranteedPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Channel_guaranteed_feature"),getString("_UI_PropertyDescriptor_description","_UI_Channel_guaranteed_feature","_UI_Channel_type"),EipPackage.Literals.CHANNEL__GUARANTEED,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public RegexpQuery(Term term){  this(term,RegExp.ALL);}  }
class C{  public boolean isAborted(){  return mAborted;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public JSONObject sendHarbormasterUri(String phid,String buildUri) throws ConduitAPIException, IOException {  JSONObject artifactData=new JSONObject();  artifactData=artifactData.element("uri",buildUri).element("name","Jenkins").element("ui.external",true);  JSONObject params=new JSONObject();  params.element("buildTargetPHID",phid).element("artifactKey","jenkins.uri").element("artifactType","uri").element("artifactData",artifactData);  return conduit.perform("harbormaster.createartifact",params);}  }
class C{  public static void dumpCallerPaths(){  dumpCallerPaths(System.out);}  }
class C{  public void actionPerformed(ActionEvent e){  log.info(e.getActionCommand());  if ("Refresh".equals(e.getActionCommand()) || e.getSource() == f_value || e.getSource() == f_name) {    setResults(MBPartnerInfo.find(p_ctx,f_value.getText(),f_name.getText(),null,f_email.getText(),f_phone.getText(),f_city.getText()));    return;  } else   if ("Reset".equals(e.getActionCommand())) {    reset();    return;  } else   if ("Previous".equalsIgnoreCase(e.getActionCommand())) {    int rows=m_table.getRowCount();    if (rows == 0)     return;    int row=m_table.getSelectedRow();    row--;    if (row < 0)     row=0;    m_table.getSelectionModel().setSelectionInterval(row,row);    return;  } else   if ("Next".equalsIgnoreCase(e.getActionCommand())) {    int rows=m_table.getRowCount();    if (rows == 0)     return;    int row=m_table.getSelectedRow();    row++;    if (row >= rows)     row=rows - 1;    m_table.getSelectionModel().setSelectionInterval(row,row);    return;  }  close();}  }
class C{  @Override public boolean isTransient(){  return false;}  }
class C{  @Nonnull public static String colorToString(@Nullable Color color){  if (color == null) {    return "track";  }  String colorName=colorToName(color);  if (colorName != null) {    return colorName;  }  log.error("unknown color sent to colorToString");  return "black";}  }
class C{  public CEventListTableMenu(final JFrame parent,final CEventListTable table,final ZyGraph graph,final ITraceListProvider traceProvider,final CTagsTree tree){  Preconditions.checkNotNull(parent,"IE01371: Parent argument can not be null");  Preconditions.checkNotNull(table,"IE01372: Table argument can not be null");  Preconditions.checkNotNull(graph,"IE01373: Graph argument can not be null");  Preconditions.checkNotNull(traceProvider,"IE01374: Trace provider argument can not be null");  final int[] selectedRows=table.getConvertedSelectedRows();  if (selectedRows.length == 1) {    final TraceList entry=traceProvider.getList(selectedRows[0]);    add(CActionProxy.proxy(new CActionSelect(graph,entry)));  }  add(CActionProxy.proxy(new CActionDelete(parent,traceProvider,selectedRows)));  addSeparator();  add(CActionProxy.proxy(new CSearchTableAction(parent,table)));  new CTableSearcher(parent,"Search",table,0);  if (selectedRows.length == 1) {    try {      final CTag selectedTag=CTaggingFunctions.getSelectedTag(tree);      addSeparator();      final TraceList entry=traceProvider.getList(selectedRows[0]);      add(CActionProxy.proxy(new CTagEventNodes(parent,graph,entry,selectedTag)));    } catch (    final MaybeNullException exception) {    }  } else {    addCombineMenu(parent,traceProvider,selectedRows);  }}  }
class C{  public CSVReader(Reader reader,int line,CSVParser csvParser){  this(reader,line,csvParser,DEFAULT_KEEP_CR,DEFAULT_VERIFY_READER);}  }
class C{  private void uninstall(String identifier){  if (vocabulariesById.containsKey(identifier)) {    Vocabulary toUninstall=vocabulariesById.get(identifier);    File f=getVocabFile(toUninstall.getUriResolvable());    if (f.exists()) {      f.delete();      log.debug("Successfully deleted (uninstalled) vocabulary file: " + f.getAbsolutePath());    } else {      log.warn("Vocabulary file doesn't exist locally - can't delete: " + f.getAbsolutePath());    }    vocabulariesById.remove(identifier);  } else {    log.warn("Vocabulary not installed locally, can't uninstall: " + identifier);  }}  }
class C{  public final boolean isRegistered(String functionId){  if (functionId == null) {    throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("functionId instance "));  }  return idToFunctionMap.containsKey(functionId);}  }
class C{  public boolean hasData(){  if (singleEvent != null) {    return true;  }  return false;}  }
class C{  public static DividerBuilder fromEmpty(){  return from(Divider.ERASER);}  }
class C{  public GLGlyphMetric(int w,int h,int a,int u,int v){  width=w;  height=h;  ascent=a;  ux=u;  vy=v;}  }
class C{  public static boolean hasTablePrivilege(String table,String privilege){  return true;}  }
class C{  @Override public boolean isShowing(){  return trayIsShowing;}  }
class C{  @Deprecated public NondominatedPopulation(DominanceComparator comparator,boolean allowDuplicates){  this(comparator,allowDuplicates ? DuplicateMode.ALLOW_DUPLICATES : DuplicateMode.NO_DUPLICATE_OBJECTIVES);}  }
class C{  @Nullable public V first(){  return vals.isEmpty() ? null : vals.getFirst();}  }
class C{  static public final float sinDeg(float degrees){  return Sin.table[(int)(degrees * degToIndex) & SIN_MASK];}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static boolean createForOrg(MOrg org){  int counter=0;  MRole[] roles=MRole.getOfClient(org.getCtx());  for (int i=0; i < roles.length; i++) {    if (!roles[i].isManual()) {      MRoleOrgAccess orgAccess=new MRoleOrgAccess(org,roles[i].getAD_Role_ID());      if (orgAccess.save())       counter++;    }  }  s_log.info(org + " - created #" + counter);  return counter != 0;}  }
class C{  public boolean isCoalescentOnly(){  return false;}  }
class C{  public String[] toVTT(){  return new FormatVTT().toFile(this);}  }
class C{  public final void scalarMultiply(double s){  if (m_Elements != null) {    int n=m_Elements.length;    for (int i=0; i < n; i++) {      m_Elements[i]=s * m_Elements[i];    }  }}  }
class C{  public void beSick(){  TCPConduit tc=this.conduit;  if (tc != null) {    tc.beSick();  }}  }
class C{  public void exportMaskAddVolumes(URI vplexURI,URI exportGroupURI,URI exportMaskURI,Map<URI,Integer> volumeMap,String opId) throws ControllerException {  String volListStr=Joiner.on(',').join(volumeMap.keySet());  ExportMaskAddVolumeCompleter completer=new ExportMaskAddVolumeCompleter(exportGroupURI,exportMaskURI,volumeMap,opId);  try {    WorkflowStepCompleter.stepExecuting(opId);    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    ExportMask exportMask=getDataObject(ExportMask.class,exportMaskURI,_dbClient);    _log.info("attempting to fail if failure_001_early_in_add_volume_to_mask is set");    InvokeTestFailure.internalOnlyInvokeTestFailure(InvokeTestFailure.ARTIFICIAL_FAILURE_001);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    List<BlockObject> volumes=new ArrayList<BlockObject>();    Map<String,Integer> deviceLabelToHLU=new HashMap<String,Integer>();    Map<URI,Integer> volumesToAdd=new HashMap<URI,Integer>();    boolean duplicateHLU=false;    for (    Map.Entry<URI,Integer> entry : volumeMap.entrySet()) {      if (exportMask.hasVolume(entry.getKey())) {        _log.info(String.format("Volume %s is already in Exportmask %s %s hence skipping adding volume again. This must be shared exportmask. ",entry.getKey(),exportMask.getMaskName(),exportMask.getId()));        continue;      }      Integer requestedHLU=entry.getValue();      if (requestedHLU.intValue() != VPlexApiConstants.LUN_UNASSIGNED && exportMask.anyVolumeHasHLU(requestedHLU.toString())) {        String message=String.format("Failed to add Volumes %s to ExportMask %s",volListStr,exportMaskURI);        _log.error(message);        String opName=ResourceOperationTypeEnum.ADD_EXPORT_VOLUME.getName();        ServiceError serviceError=VPlexApiException.errors.exportHasExistingVolumeWithRequestedHLU(entry.getKey().toString(),requestedHLU.toString(),opName);        completer.error(_dbClient,serviceError);        duplicateHLU=true;        break;      }      BlockObject vol=Volume.fetchExportMaskBlockObject(_dbClient,entry.getKey());      volumes.add(vol);      deviceLabelToHLU.put(vol.getDeviceLabel(),requestedHLU);      volumesToAdd.put(entry.getKey(),entry.getValue());    }    exportMask.addVolumes(volumesToAdd);    _dbClient.updateObject(exportMask);    if (duplicateHLU) {      return;    }    if (deviceLabelToHLU.isEmpty()) {      completer.ready(_dbClient);      return;    }    String vplexClusterName=VPlexUtil.getVplexClusterName(exportMask,vplexURI,client,_dbClient);    VPlexStorageViewInfo svInfo=client.addVirtualVolumesToStorageView(exportMask.getMaskName(),vplexClusterName,deviceLabelToHLU);    Map<URI,Integer> updatedVolumeMap=new HashMap<URI,Integer>();    for (    BlockObject volume : volumes) {      String deviceLabel=volume.getDeviceLabel();      String wwn=svInfo.getWWNForStorageViewVolume(volume.getDeviceLabel());      volume.setWWN(wwn);      _dbClient.updateObject(volume);      updatedVolumeMap.put(volume.getId(),svInfo.getHLUForStorageViewVolume(deviceLabel));      if (exportMask.hasExistingVolume(wwn)) {        _log.info("wwn {} has been added to the storage view {} by the user, but it " + "was already in existing volumes, removing from existing volumes.",wwn,exportMask.forDisplay());        exportMask.removeFromExistingVolumes(wwn);      }    }    _log.info("Updating volume/lun map in export mask {}",exportMask.getId());    exportMask.addVolumes(updatedVolumeMap);    _dbClient.updateObject(exportMask);    _log.info("attempting to fail if failure_002_late_in_add_volume_to_mask is set");    InvokeTestFailure.internalOnlyInvokeTestFailure(InvokeTestFailure.ARTIFICIAL_FAILURE_002);    completer.ready(_dbClient);  } catch (  VPlexApiException vae) {    String message=String.format("Failed to add Volumes %s to ExportMask %s",volListStr,exportMaskURI);    _log.error(message,vae);    completer.error(_dbClient,vae);  }catch (  Exception ex) {    String message=String.format("Failed to add Volumes %s to ExportMask %s",volListStr,exportMaskURI);    _log.error(message,ex);    String opName=ResourceOperationTypeEnum.ADD_EXPORT_VOLUME.getName();    ServiceError serviceError=VPlexApiException.errors.exportGroupAddVolumesFailed(volListStr,exportGroupURI.toString(),opName,ex);    completer.error(_dbClient,serviceError);  }}  }
class C{  public RemoteGfManagerAgent(GfManagerAgentConfig cfg){  if (!(cfg.getTransport() instanceof RemoteTransportConfig)) {    throw new IllegalArgumentException(LocalizedStrings.RemoteGfManagerAgent_EXPECTED_0_TO_BE_A_REMOTETRANSPORTCONFIG.toLocalizedString(cfg.getTransport()));  }  this.transport=(RemoteTransportConfig)cfg.getTransport();  this.displayName=cfg.getDisplayName();  this.alertListener=cfg.getAlertListener();  if (this.alertListener != null) {    if (this.alertListener instanceof JoinLeaveListener) {      addJoinLeaveListener((JoinLeaveListener)this.alertListener);    }  }  int tmp=cfg.getAlertLevel();  if (this.alertListener == null) {    tmp=Alert.OFF;  }  alertLevel=tmp;  InternalLogWriter logWriter=cfg.getLogWriter();  if (logWriter == null) {    throw new NullPointerException("LogWriter must not be null");  }  if (logWriter.isSecure()) {    this.securityLogWriter=logWriter;  } else {    this.securityLogWriter=LogWriterFactory.toSecurityLogWriter(logWriter);  }  this.disconnectListener=cfg.getDisconnectListener();  this.threadGroup=LoggingThreadGroup.createThreadGroup("ConsoleDMDaemon",logger);  this.joinProcessor=new JoinProcessor();  this.joinProcessor.start();  join();  snapshotDispatcher=new SnapshotResultDispatcher();  snapshotDispatcher.start();  addAgent(this);}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public Population(){}  }
class C{  CaseInsensitiveMapImpl(String[] k,V[] v,float f){  super(k,v,f,CaseInsensitiveHashingStrategy.INSTANCE);}  }
class C{  private CharSequence buildHomeContentDescription(){  final CharSequence homeDesc;  if (mHomeDescription != null) {    homeDesc=mHomeDescription;  } else {    if ((mDisplayOptions & ActionBar.DISPLAY_HOME_AS_UP) != 0) {      homeDesc=mContext.getResources().getText(R.string.action_bar_up_description);    } else {      homeDesc=mContext.getResources().getText(R.string.action_bar_home_description);    }  }  final CharSequence title=getTitle();  final CharSequence subtitle=getSubtitle();  if (!TextUtils.isEmpty(title)) {    final String result;    if (!TextUtils.isEmpty(subtitle)) {      result=getResources().getString(R.string.action_bar_home_subtitle_description_format,title,subtitle,homeDesc);    } else {      result=getResources().getString(R.string.action_bar_home_description_format,title,homeDesc);    }    return result;  }  return homeDesc;}  }
class C{  @Override public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){  menu.setHeaderTitle(R.string.lbl_options);  menu.add(Menu.NONE,R.id.actionEdit,Menu.NONE,R.string.lbl_edit);}  }
class C{  protected Object buildValue(String symbol,Closure body){  Class describable=lookup(symbol);  if (describable != null) {    DescribableFactory f=new DescribableFactory(describable);    if (body != null) {      body.setDelegate(f);      body.setResolveStrategy(Closure.DELEGATE_FIRST);      body.call(f);    }    return f.instantiate();  }  return null;}  }
class C{  protected ByteBuffer __vector_as_bytebuffer(int vector_offset,int elem_size){  int o=__offset(vector_offset);  if (o == 0)   return null;  ByteBuffer bb=this.bb.duplicate().order(ByteOrder.LITTLE_ENDIAN);  int vectorstart=__vector(o);  bb.position(vectorstart);  bb.limit(vectorstart + __vector_len(o) * elem_size);  return bb;}  }
class C{  private void drawArrowEndpoint(Point from,Point to,Graphics g){  double a=to.x - from.x;  double b=from.y - to.y;  double theta=Math.atan2(b,a);  int itheta=(int)((theta * 360.0) / (2.0 * Math.PI) + 180);  g.fillArc(to.x - 18,to.y - 18,36,36,itheta - 14 - 3 * (int)getStrokeWidth(),29 + 6 * (int)getStrokeWidth());}  }
class C{  public StreamNegotiator selectStreamNegotiator(FileTransferRequest request) throws XMPPException {  StreamInitiation si=request.getStreamInitiation();  FormField streamMethodField=getStreamMethodField(si.getFeatureNegotiationForm());  if (streamMethodField == null) {    String errorMessage="No stream methods contained in packet.";    XMPPError error=new XMPPError(XMPPError.Condition.bad_request,errorMessage);    IQ iqPacket=createIQ(si.getPacketID(),si.getFrom(),si.getTo(),IQ.Type.ERROR);    iqPacket.setError(error);    connection.sendPacket(iqPacket);    throw new XMPPException(errorMessage,error);  }  StreamNegotiator selectedStreamNegotiator;  try {    selectedStreamNegotiator=getNegotiator(streamMethodField);  } catch (  XMPPException e) {    IQ iqPacket=createIQ(si.getPacketID(),si.getFrom(),si.getTo(),IQ.Type.ERROR);    iqPacket.setError(e.getXMPPError());    connection.sendPacket(iqPacket);    throw e;  }  return selectedStreamNegotiator;}  }
class C{  public NewtonianBouncer(OdorWorldEntity parentEntity){  this.parentEntity=parentEntity;}  }
class C{  public void paintFormattedTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  private boolean isIntersect(){  return (getDistance(table.getRectangle2X(),table.getRectangle1X() + table.getRectangle1Width()) < table.getRectangle1Width() + table.getRectangle2Width() && (getDistance(table.getRectangle2Y(),table.getRectangle1Y() + table.getRectangle1Height()) < table.getRectangle1Height() + table.getRectangle2Height())) && (getDistance(table.getRectangle1X(),table.getRectangle2X() + table.getRectangle2Width()) < table.getRectangle1Width() + table.getRectangle2Width() && (getDistance(table.getRectangle1Y(),table.getRectangle2Y() + table.getRectangle2Height()) < table.getRectangle1Height() + table.getRectangle2Height()));}  }
class C{  public void fixFrameDurations(int[] frameDurationMs){  for (int i=0; i < frameDurationMs.length; i++) {    if (frameDurationMs[i] < MIN_FRAME_DURATION_MS) {      frameDurationMs[i]=FRAME_DURATION_MS_FOR_MIN;    }  }}  }
class C{  public static int executeUpdateMultiple(String sql,boolean ignoreError,String trxName){  if (sql == null || sql.length() == 0)   throw new IllegalArgumentException("Required parameter missing - " + sql);  int index=sql.indexOf(SQLSTATEMENT_SEPARATOR);  if (index == -1)   return executeUpdate(sql,null,ignoreError,trxName);  int no=0;  String statements[]=sql.split(SQLSTATEMENT_SEPARATOR);  for (int i=0; i < statements.length; i++) {    log.fine(statements[i]);    no+=executeUpdate(statements[i],null,ignoreError,trxName);  }  return no;}  }
class C{  private static float computeModuleWidth(ResultPoint[] vertices){  float pixels1=ResultPoint.distance(vertices[0],vertices[4]);  float pixels2=ResultPoint.distance(vertices[1],vertices[5]);  float moduleWidth1=(pixels1 + pixels2) / (17 * 2.0f);  float pixels3=ResultPoint.distance(vertices[6],vertices[2]);  float pixels4=ResultPoint.distance(vertices[7],vertices[3]);  float moduleWidth2=(pixels3 + pixels4) / (18 * 2.0f);  return (moduleWidth1 + moduleWidth2) / 2.0f;}  }
class C{  protected static String quoteSQL(Object data,int type) throws SQLException {  if (data == null) {    return "NULL";  }switch (type) {case Types.BIT:case Types.BOOLEAN:case Types.INTEGER:case Types.BIGINT:case Types.DECIMAL:case Types.DOUBLE:case Types.FLOAT:case Types.NUMERIC:case Types.REAL:case Types.SMALLINT:case Types.TINYINT:    return data.toString();case Types.DATE:case Types.TIME:case Types.TIMESTAMP:case Types.LONGVARCHAR:case Types.CHAR:case Types.VARCHAR:  return quoteString(data.toString());case Types.VARBINARY:case Types.LONGVARBINARY:case Types.BINARY:if (data instanceof UUID) {  return "'" + data.toString() + "'";}return "'" + StringUtils.convertBytesToHex((byte[])data) + "'";case Types.CLOB:case Types.JAVA_OBJECT:case Types.OTHER:case Types.BLOB:case Types.STRUCT:case Types.REF:case Types.NULL:case Types.ARRAY:case Types.DATALINK:case Types.DISTINCT:throw throwException("Unsupported key data type: " + type);default :return "";}}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/pause") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep pauseMigration(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,Migration.class,"id");  Migration migration=queryResource(id);  if (!BulkList.MigrationFilter.isUserAuthorizedForMigration(migration,getUserFromContext(),_permissionsHelper)) {    StorageOSUser user=getUserFromContext();    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }  String status=migration.getMigrationStatus();  String migrationName=migration.getLabel();  if (status == null || status.isEmpty() || migrationName == null || migrationName.isEmpty()) {    throw APIException.badRequests.migrationHasntStarted(id.toString());  }  if (status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.COMPLETE.getStatusValue()) || status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.ERROR.getStatusValue()) || status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.COMMITTED.getStatusValue())|| status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.CANCELLED.getStatusValue())) {    throw APIException.badRequests.migrationCantBePaused(migrationName,status);  }  URI volId=migration.getVolume();  Volume vplexVol=_dbClient.queryObject(Volume.class,volId);  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Volume.class,volId,taskId,ResourceOperationTypeEnum.PAUSE_MIGRATION);  TaskResourceRep task=toTask(vplexVol,taskId,op);  if (status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.PAUSED.getStatusValue())) {    s_logger.info("Migration {} has been paused",id);    op.ready();    vplexVol.getOpStatus().createTaskStatus(taskId,op);    _dbClient.persistObject(vplexVol);    return task;  }  try {    VPlexController controller=_vplexBlockServiceApi.getController();    controller.pauseMigration(vplexVol.getStorageController(),id,taskId);  } catch (  InternalException e) {    s_logger.error("Error",e);    String errMsg=String.format("Error: %s",e.getMessage());    task.setState(Operation.Status.error.name());    task.setMessage(errMsg);    op.error(e);    vplexVol.getOpStatus().updateTaskStatus(taskId,op);    _dbClient.persistObject(vplexVol);  }  return task;}  }
class C{  private void heapify(){  Object[] array=queue;  int n=size;  int half=(n >>> 1) - 1;  Comparator<? super E> cmp=comparator;  if (cmp == null) {    for (int i=half; i >= 0; i--)     siftDownComparable(i,(E)array[i],array,n);  } else {    for (int i=half; i >= 0; i--)     siftDownUsingComparator(i,(E)array[i],array,n,cmp);  }}  }
class C{  private void checkAnonymousType(String name){  if (name.contains("$")) {    String superClass=name.substring(0,name.lastIndexOf('$'));    checkAnonymousType(superClass);    if (Character.isDigit(name.charAt(name.lastIndexOf('$') + 1))) {      TypeElement superType=TypeNameUtil.fromInternalName(superClass);      dl.newDep(superType,mainClass,JavaRelation.ANONYMOUS_TYPE);    }  }}  }
class C{  public long count(){  return xStats.count();}  }
class C{  public WriteException(Collection<WriteRequest> requests,Throwable cause){  initCause(cause);  this.requests=asRequestList(requests);}  }
class C{  public List<String> queryTokenGroups(final String ldapQuery,final StorageOSUserDAO storageOSUser){  List<String> groups=new ArrayList<String>();  SearchControls dnSearchControls;  String dn=storageOSUser.getDistinguishedName();  dnSearchControls=new SearchControls(SearchControls.OBJECT_SCOPE,1,_searchControls.getTimeLimit(),new String[]{TOKEN_GROUPS},_searchControls.getReturningObjFlag(),_searchControls.getDerefLinkFlag());  @SuppressWarnings("unchecked") List<List<String>> tokenGroupSids=safeLdapSearch(dn,ldapQuery,dnSearchControls,new TokenGroupsMapper());  if (null == tokenGroupSids) {    _log.debug("No groups found for user: ",storageOSUser.getUserName());    return groups;  }  List<String> unFilteredGroups=resolveGroups(tokenGroupSids.get(0));  for (  String groupName : unFilteredGroups) {    String groupNameWithoutDomain=groupName.substring(0,groupName.lastIndexOf("@"));    if (isGroupOnWhiteList(groupNameWithoutDomain)) {      groups.add(groupName);    }  }  return groups;}  }
class C{  private void doubleCapacity(){  assert head == tail;  int p=head;  int n=elements.length;  int r=n - p;  int newCapacity=n << 1;  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");  Object[] a=new Object[newCapacity];  System.arraycopy(elements,p,a,0,r);  System.arraycopy(elements,0,a,r,p);  elements=a;  head=0;  tail=n;}  }
class C{  protected void addConnection(Connection connection){  this.connections.add(connection);  this.openWire.setVisible(false);  this.guardMarker.setVisible(false);}  }
class C{  private void swapRows(int p,int q){  if (p != q) {    double temp;    int m=rows[p].length;    for (int j=0; j < m; j++) {      temp=rows[p][j];      rows[p][j]=rows[q][j];      rows[q][j]=temp;    }  }  return;}  }
class C{  void draw(Graphics g,int x,int y){  if (image == null) {    image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  }  if (needsRedraw) {    needsRedraw=false;    Graphics gr=image.createGraphics();    drawImage(gr);    gr.dispose();  }  g.drawImage(image,x,y,null);}  }
class C{  public JLBHOptions recordJitterGreaterThanNs(int recordJitterGreaterThanNs){  this.recordJitterGreaterThanNs=recordJitterGreaterThanNs;  return this;}  }
class C{  public static NbtOutputStream write(NbtTag tag,File file) throws IOException {  createFile(file);  NbtOutputStream out=new NbtOutputStream(new FileOutputStream(file,false));  out.write(tag);  return out;}  }
class C{  public void delete(int start,int end){  delete(start,end,true);}  }
class C{  public boolean validate(Aspect transientInstance) throws Exception {  Set<ConstraintViolation<Aspect>> constraintViolations=EntityManagerHelper.getValidator().validate(transientInstance);  if (!constraintViolations.isEmpty()) {    String errorMsg="";    for (    ConstraintViolation<Aspect> error : constraintViolations) {      Path path=error.getPropertyPath();      for (      Node node : path) {        errorMsg=errorMsg + " Column: " + node.getName()+ " Value: "+ error.getInvalidValue();      }      errorMsg=errorMsg + " " + error.getMessage();    }    throw new Exception(errorMsg);  }  return true;}  }
class C{  private void createPubSubChannels(Route route,Node channelNode){  Element channelElement=(Element)channelNode;  Channel channel=EipFactory.eINSTANCE.createChannel();  channel.setName(channelElement.getAttribute("id"));  channelsMap.put(channel.getName(),channel);  route.getOwnedChannels().add(channel);}  }
class C{  public Queue(final BlockingQueue<T> queue){  this(queue,new DirectWaitStrategy<T>(),new DirectWaitStrategy<T>());}  }
class C{  public boolean hasIndex(){  return getIndex() != null;}  }
class C{  private void sendFile() throws IOException {  int reply;  write("STOR " + url.getFile().substring(url.getFile().lastIndexOf('/') + 1,url.getFile().length()) + "\r\n");  reply=getReply();  if (!(reply == FTP_OPENDATA || reply == FTP_OK || reply == FTP_DATAOPEN)) {    throw new IOException("Unable to store file");  }}  }
class C{  public void dismissNetworkDialog(){  if (isOffline) {    isOffline=false;    mDialog.dismiss();    if (mManager != null) {      byte[] ipAddress=BigInteger.valueOf(mManager.getDhcpInfo().gateway).toByteArray();      reverse(ipAddress);    }    InetAddress myaddr;    if (mPrinter != null) {      OctoprintNetwork.getNetworkList(this,mPrinter);    } else {      mController.waitServiceDialog();    }  }}  }
class C{  @Override public void onAutoHide(){  DatePicker datePicker=(DatePicker)getControl();  JFXDatePickerSkin cpSkin=(JFXDatePickerSkin)datePicker.getSkin();  cpSkin.syncWithAutoUpdate();  if (!datePicker.isShowing())   super.onAutoHide();}  }
class C{  public Builder authProperties(final AuthProperties authProps){  this.authProps=authProps;  return this;}  }
class C{  public void addAll(NTree other){  for (  DataPoint d : other) {    add(d);  }}  }
class C{  static PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetCurrency) throws SQLException {  if (s_conn == null)   s_conn=getConnection();  try {    return s_conn.prepareStatement(sql,resultSetType,resultSetCurrency);  } catch (  Exception e) {  }  s_conn=getConnection();  return s_conn.prepareStatement(sql);}  }
class C{  public void namingExceptionThrown(NamingExceptionEvent namingExceptionEvent){  context=null;  ActiveMQServerLogger.LOGGER.error("Caught unexpected exception.",namingExceptionEvent.getException());}  }
class C{  public boolean validNeighbor(TicTacToeBoard board,Player player,int col,int row){  boolean allTaken=true;  boolean isNeighbor=false;  for (int dc=-1; dc <= 1; dc++) {    for (int dr=-1; dr <= 1; dr++) {      if ((dc == 0) && (dr == 0)) {        continue;      }      Cell lastOne=getLastMove(player);      if (lastOne == null) {        return false;      }      int tcol=lastOne.col + dc;      int trow=lastOne.row + dr;      if ((0 <= tcol) && (tcol < board.numColumns()) && (0 <= trow)&& (trow < board.numRows())) {        if (board.isClear(tcol,trow)) {          allTaken=false;        }      }      if ((col == tcol) && (row == trow)) {        isNeighbor=true;      }    }  }  return (allTaken || isNeighbor);}  }
class C{  public ImmutableMap<Service,Long> startupTimes(){  return state.startupTimes();}  }
class C{  public GifAnimationMetaData(@NonNull FileDescriptor fd) throws IOException {  this(GifInfoHandle.openFd(fd,0,true));}  }
class C{  private void updateTransitRoutedNetworks(NetworkSystem networkSystem) throws Exception {  List<Network> allNetworks=getCurrentTransportZones();  Set<String> transitNetworks=this.getTransitNetworks(networkSystem,allNetworks);  if (transitNetworks.isEmpty()) {    _log.info("No transit network is found and return directly.");    return;  }  for (  String transitNetwork : transitNetworks) {    Set<String> connectedNetworkSystems=getConnectedNetworkSystems(transitNetwork,allNetworks);    for (    String connectedNetworkSystem : connectedNetworkSystems) {      NetworkSystem currentNetworkSystem=getDeviceObject(new URI(connectedNetworkSystem));      this.updateRoutedNetworksForTransitNetwork(currentNetworkSystem,connectedNetworkSystems,allNetworks);    }  }}  }
class C{  protected static String[] parseHostPortPair(String hostPortPair) throws SQLException {  String[] splitValues=new String[2];  if (StringUtils.startsWithIgnoreCaseAndWs(hostPortPair,"address=")) {    splitValues[HOST_NAME_INDEX]=hostPortPair.trim();    splitValues[PORT_NUMBER_INDEX]=null;    return splitValues;  }  int portIndex=hostPortPair.indexOf(":");  String hostname=null;  if (portIndex != -1) {    if ((portIndex + 1) < hostPortPair.length()) {      String portAsString=hostPortPair.substring(portIndex + 1);      hostname=hostPortPair.substring(0,portIndex);      splitValues[HOST_NAME_INDEX]=hostname;      splitValues[PORT_NUMBER_INDEX]=portAsString;    } else {      throw SQLError.createSQLException(Messages.getString("NonRegisteringDriver.37"),SQLError.SQL_STATE_INVALID_CONNECTION_ATTRIBUTE,null);    }  } else {    splitValues[HOST_NAME_INDEX]=hostPortPair;    splitValues[PORT_NUMBER_INDEX]=null;  }  return splitValues;}  }
class C{  private static String toString(double[] arr,NumberFormat nf){  String result;  if (nf == null) {    throw new NullPointerException("NumberFormat must not be null.");  }  if (arr == null) {    result=nullMessage();  } else {    StringBuilder buf=new StringBuilder();    buf.append("\n");    buf.append("\t");    for (    double anArr : arr) {      buf.append(nf.format(anArr)).append("\t");    }    result=buf.toString();  }  return result;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeStroke(this.stroke,stream);  SerialUtilities.writePaint(this.outlinePaint,stream);  SerialUtilities.writePaint(this.fillPaint,stream);}  }
class C{  public final boolean removeElement(Object s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s) {      if ((i + 1) < m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else       m_map[i]=null;      m_firstFree--;      return true;    }  }  return false;}  }
class C{  public List<Vertex> findAllQuery(String query,int max){  return new ArrayList<Vertex>();}  }
class C{  public ClusterGroupEmptyException(){  super("Cluster group is empty.");}  }
class C{  private Region<String,String> createRegion(String name,DataPolicy dataPolicy,Compressor compressor){  return getCache().<String,String>createRegionFactory().setDataPolicy(dataPolicy).setCloningEnabled(true).setCompressor(compressor).create(name);}  }
class C{  public Connection(Address to,String group,byte type,ClassLoader cl,int tout) throws IOException, SocketException {  boolean success=false;  try {    SOTIMEOUT=(tout >= 0 ? tout : 0);    ConnectSocket cs=new ConnectSocket(to.getHost(),to.port);    cs.start();    try {      cs.join(SOTIMEOUT);    } catch (    Exception e) {    }    if (!cs.success()) {      if (cs.exc != null)       throw cs.exc; else {        cs.interrupt();        throw new IOException("Socket creation to " + to + " timed out.");      }    }    socket=cs.s;    oos=new ObjectOutputStream(socket.getOutputStream());    oos.writeInt(Base.PROTOCOL_VERSION);    oos.writeObject(group);    oos.writeByte(type);    oos.flush();    socket.setSoTimeout(SOTIMEOUT);    ois=new AgentInputStream(socket.getInputStream(),cl);    peer_version=ois.readInt();    if (peer_version == Base.GROUP_MISMATCH)     throw new IOException("Group mismatch with peer");    if (peer_version == Base.PROTOCOL_MISMATCH)     throw new IOException("Version mismatch with peer");    success=true;  }  finally {    if (!success)     try {      close();    } catch (    Exception e) {    }  }}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public CartPaymentInfo makePaymentInfo(String id,String refNum,String authCode,BigDecimal amount){  CartPaymentInfo inf=new CartPaymentInfo();  inf.refNum[0]=refNum;  inf.refNum[1]=authCode;  inf.amount=amount;  if (!isPaymentMethodType(id)) {    inf.paymentMethodTypeId=this.getPaymentMethodTypeId(id);    inf.paymentMethodId=id;  } else {    inf.paymentMethodTypeId=id;  }  return inf;}  }
class C{  protected boolean compareValues(Object previous,Object value){  boolean result=true;  if (previous == null) {    result=(value != null);  } else   if (value == null) {    result=true;  } else {    boolean previousEqualsValue=previous.equals(value);    if (!previousEqualsValue && previous instanceof Comparable && value instanceof Comparable) {      try {        result=!(0 == ((Comparable)previous).compareTo((Comparable)value));      } catch (      ClassCastException cce) {        result=true;      }    } else {      result=!previousEqualsValue;    }  }  return result;}  }
class C{  public static double blackFormulaStdDevDerivative(@Real final double strike,@Real final double forward,@StdDev final double stddev){  return blackFormulaStdDevDerivative(strike,forward,stddev,1.0,0.0);}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  while ((mByteToSkip > 0 || mByteToCopy > 0 || mState != STATE_JPEG_DATA) && length > 0) {    if (mByteToSkip > 0) {      int byteToProcess=length > mByteToSkip ? mByteToSkip : length;      length-=byteToProcess;      mByteToSkip-=byteToProcess;      offset+=byteToProcess;    }    if (mByteToCopy > 0) {      int byteToProcess=length > mByteToCopy ? mByteToCopy : length;      out.write(buffer,offset,byteToProcess);      length-=byteToProcess;      mByteToCopy-=byteToProcess;      offset+=byteToProcess;    }    if (length == 0) {      return;    }switch (mState) {case STATE_SOI:      int byteRead=requestByteToBuffer(2,buffer,offset,length);    offset+=byteRead;  length-=byteRead;if (mBuffer.position() < 2) {  return;}mBuffer.rewind();if (mBuffer.getShort() != JpegHeader.SOI) {throw new IOException("Not a valid jpeg image, cannot write exif");}out.write(mBuffer.array(),0,2);mState=STATE_FRAME_HEADER;mBuffer.rewind();writeExifData();break;case STATE_FRAME_HEADER:byteRead=requestByteToBuffer(4,buffer,offset,length);offset+=byteRead;length-=byteRead;if (mBuffer.position() == 2) {short tag=mBuffer.getShort();if (tag == JpegHeader.EOI) {out.write(mBuffer.array(),0,2);mBuffer.rewind();}}if (mBuffer.position() < 4) {return;}mBuffer.rewind();short marker=mBuffer.getShort();if (marker == JpegHeader.APP1) {mByteToSkip=(mBuffer.getShort() & 0x0000ffff) - 2;mState=STATE_JPEG_DATA;} else if (!JpegHeader.isSofMarker(marker)) {out.write(mBuffer.array(),0,4);mByteToCopy=(mBuffer.getShort() & 0x0000ffff) - 2;} else {out.write(mBuffer.array(),0,4);mState=STATE_JPEG_DATA;}mBuffer.rewind();}}if (length > 0) {out.write(buffer,offset,length);}}  }
class C{  public java.lang.String toUpperCase(){  return null;}  }
class C{  public static boolean inProfile(File path){  if (path.getParentFile() != null) {    if (Profile.isProfile(path.getParentFile())) {      return true;    }    return Profile.inProfile(path.getParentFile());  }  return false;}  }
class C{  public static void removeSerializable(Context context,String filename){  try {    context.deleteFile(filename);  } catch (  Exception ex) {  }}  }
class C{  public static Integer computeOR(ArrayList<Integer> inputs){  for (  Integer i : inputs) {    if (i == 1) {      return 1;    }  }  return 0;}  }
class C{  public ImageFileFilter(String description){  desc=description;}  }
class C{  private boolean disconnect(){  if (!done) {    debug("Comms::SocketThread: 'disconnect' executed, but 'done' is not true.");  }  boolean clean=true;  debug("Shutting down...");  debug("Waiting for sendqueue to drain");  put(new Event(EType.KILLSENDER));  while (sendingThread != null && sendingThread.isAlive()) {    try {      sendingThread.join();    } catch (    InterruptedException e) {    }  }  try {    pclient.shutdownInput();    pclient.shutdownOutput();    debug("Streams shutdown.");  } catch (  Exception e) {    clean=false;  }  try {    oos.close();    ois.close();    debug("Streams closed.");  } catch (  Exception e) {    clean=false;  }  try {    pclient.close();    debug("Socket closed.");  } catch (  Exception e) {    clean=false;  }  if (isServer) {    try {      pserver.close();      debug("Server stopped");    } catch (    Exception e) {      clean=false;    }  }  ois=null;  oos=null;  pclient=null;  pserver=null;  debug(clean ? "Disconnected cleanly" : "No clean disconnect. Apparently was already partially disconnected.");  return clean;}  }
class C{  public DriveCollectionPage(final BaseDriveCollectionResponse response,final IDriveCollectionRequestBuilder builder){  super(response,builder);}  }
class C{  public void defineFrames(int frameWidth,int frameHeight,int frameDelay){  this.frameWidth=frameWidth;  this.frameHeight=frameHeight;  this.frameDelay=frameDelay;  framesInitialized=false;}  }
class C{  protected boolean stringEquals(Object o1,Object o2){  if (o1 == null && o2 == null) {    return true;  }  if (o1 != null && o2 != null) {    return o1.toString().equals(o2.toString());  }  return false;}  }
class C{  private void createTestDatabaseEntities(String storageName,String storagePlatform,String directoryPath,List<String> localFiles) throws Exception {  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(NAMESPACE,BDEF_NAME,FORMAT_USAGE_CODE,FORMAT_FILE_TYPE_CODE,INITIAL_FORMAT_VERSION,PARTITION_VALUE,NO_SUBPARTITION_VALUES,INITIAL_DATA_VERSION,true,BDATA_STATUS);  StorageEntity storageEntity=storageDao.getStorageByName(storageName);  if (storageEntity == null) {    storageEntity=storageDaoTestHelper.createStorageEntity(storageName,storagePlatform,configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),storageDaoTestHelper.getS3ManagedBucketName());  }  StorageUnitEntity storageUnitEntity=storageUnitDaoTestHelper.createStorageUnitEntity(storageEntity,businessObjectDataEntity,StorageUnitStatusEntity.ENABLED,directoryPath);  for (  String fileLocalPath : localFiles) {    storageFileDaoTestHelper.createStorageFileEntity(storageUnitEntity,String.format("%s/%s",directoryPath,fileLocalPath),FILE_SIZE_1_KB,ROW_COUNT_1000);  }  herdDao.saveAndRefresh(businessObjectDataEntity);}  }
class C{  public void close() throws AdeException {}  }
class C{  public Wine runBackground(File workingDirectory,String executableToRun,List<String> arguments) throws ScriptFailureException {  runBackground(workingDirectory,executableToRun,arguments,null);  return this;}  }
class C{  @EventHandler(priority=EventPriority.LOWEST) public void onPlayerJoin(PlayerInitialSpawnEvent event){  MatchThread thread=Cardinal.getInstance().getMatchThreads().get(0);  PlayerContainerData newData=new PlayerContainerData(thread,null,null);  PlayerContainerData oldData=PlayerContainerData.empty();  Containers.handleStateChangeEvent(event.getPlayer(),oldData,newData);}  }
class C{  public FolderTokenDivider findById(int id) throws Exception {  int idx;  FolderTokenDivider div=null;  idx=super.findIndexById(id);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  div=get(idx);  return div;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  protected Rectangle2D trimMargin(Rectangle2D area){  this.margin.trim(area);  return area;}  }
class C{  @Override public int hashCode(){  int result;  result=(this.data != null ? this.data.hashCode() : 0);  result=29 * result + (this.xPoints != null ? this.xPoints.hashCode() : 0);  result=29 * result + (this.propagateEvents ? 1 : 0);  result=29 * result + (this.autoPrune ? 1 : 0);  return result;}  }
class C{  public PathImpl fsWalk(String userPath,Map<String,Object> attributes,String path){  return new FilePath(_root,userPath,path);}  }
class C{  public Boolean isRetained(){  return retained;}  }
class C{  public static Geo[] LLaToGa(float[] lla,boolean isDegrees){  Geo[] r=new Geo[lla.length / 2];  for (int i=0; i < lla.length / 2; i++) {    if (isDegrees) {      r[i]=Geo.makeGeoDegrees(lla[i * 2],lla[i * 2 + 1]);    } else {      r[i]=Geo.makeGeoRadians(lla[i * 2],lla[i * 2 + 1]);    }  }  return r;}  }
class C{  public void gotoFrame(boolean play) throws IOException {  print("gotoFrame",new String[]{play ? "and play" : "and stop"});}  }
class C{  public static String cleanForJavadoc(String input){  return cleanLeadingAndTrailingNewLineAndChars(input);}  }
class C{  private void applyJunctionCriterion(final Junction junction,final Criteria criteria,final MultipleSearchFilter multipleSearchFilter){  for (  final Rule rule : multipleSearchFilter.getRules()) {    searchOper=rule.getOp();    searchField=rule.getField();    searchString=rule.getData();    junction.add(applyRestriction());  }  criteria.add(junction);}  }
class C{  protected AnnotationQuery(String scope,String metric,Map<String,String> tags,Long startTimestamp,Long endTimestamp){  this();  requireArgument(startTimestamp != null,"Start Timestamp cannot be null.");  requireArgument(scope != null,"Scope cannot be null");  requireArgument(metric == null || !metric.isEmpty(),"Metric can be null, but if specified, cannot be empty");  _startTimestamp=startTimestamp;  _endTimestamp=endTimestamp;  _scope=scope;  _metric=metric;  if (tags != null) {    setTags(tags);  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TFIELD___IS_OPTIONAL:    return isOptional();case TypesPackage.TFIELD___IS_STATIC:  return isStatic();case TypesPackage.TFIELD___IS_READABLE:return isReadable();case TypesPackage.TFIELD___IS_WRITEABLE:return isWriteable();case TypesPackage.TFIELD___GET_MEMBER_TYPE:return getMemberType();case TypesPackage.TFIELD___GET_MEMBER_AS_STRING:return getMemberAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  private boolean unLoadHiveTable(String tableName,String project){  boolean rtn=false;  int tableType=0;  String[] dbTableName=HadoopUtil.parseHiveTableName(tableName);  tableName=dbTableName[0] + "." + dbTableName[1];  TableDesc desc=cubeMgmtService.getMetadataManager().getTableDesc(tableName);  if (desc == null)   return false;  tableType=desc.getSourceType();  try {    if (!modelService.isTableInModel(tableName,project)) {      cubeMgmtService.removeTableFromProject(tableName,project);      rtn=true;    } else {      List<String> models=modelService.getModelsUsingTable(tableName,project);      throw new InternalErrorException("Table is already in use by models " + models);    }  } catch (  IOException e) {    logger.error(e.getMessage(),e);  }  if (!projectService.isTableInAnyProject(tableName) && !modelService.isTableInAnyModel(tableName)) {    try {      cubeMgmtService.unLoadHiveTable(tableName);      rtn=true;    } catch (    IOException e) {      logger.error(e.getMessage(),e);      rtn=false;    }  }  if (tableType == 1 && !projectService.isTableInAnyProject(tableName) && !modelService.isTableInAnyModel(tableName)) {    StreamingConfig config=null;    KafkaConfig kafkaConfig=null;    try {      config=streamingService.getStreamingManager().getStreamingConfig(tableName);      kafkaConfig=kafkaConfigService.getKafkaConfig(tableName);      streamingService.dropStreamingConfig(config);      kafkaConfigService.dropKafkaConfig(kafkaConfig);      rtn=true;    } catch (    Exception e) {      rtn=false;      logger.error(e.getLocalizedMessage(),e);    }  }  return rtn;}  }
class C{  public GlowLivingEntity(Location location){  this(location,20);}  }
class C{  public static boolean contains(String name){  return get(name) != null;}  }
class C{  public void testDeployEar() throws Exception {  WebSphere85xInstalledLocalDeployerWithNoWsAdminExecution deployer=new WebSphere85xInstalledLocalDeployerWithNoWsAdminExecution();  EAR ear=new EAR("target/test-artifacts/simple-ear.ear");  deployer.deploy(ear);  assertContains(deployer.getCommands(),"'-appname','simple-ear'");  assertContains(deployer.getCommands(),"filename = 'target/test-artifacts/simple-ear.ear'");}  }
class C{  protected String[][] loadFieldValues(IndexSearcher searcher,String[] fields,int[] docids,int maxLength) throws IOException {  String contents[][]=new String[fields.length][docids.length];  char valueSeparators[]=new char[fields.length];  for (int i=0; i < fields.length; i++) {    valueSeparators[i]=getMultiValuedSeparator(fields[i]);  }  LimitedStoredFieldVisitor visitor=new LimitedStoredFieldVisitor(fields,valueSeparators,maxLength);  for (int i=0; i < docids.length; i++) {    searcher.doc(docids[i],visitor);    for (int j=0; j < fields.length; j++) {      contents[j][i]=visitor.getValue(j).toString();    }    visitor.reset();  }  return contents;}  }
class C{  public String globalInfo(){  return "The class that splits a node into two based on the midpoint value of " + "the dimension in which the node's rectangle is widest. If after " + "splitting one side is empty then it is slided towards the non-empty "+ "side until there is at least one point on the empty side.\n\n"+ "For more information see also:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public static boolean isUTCDay(long dateLong){  return dateLong == getUTCDayFloor(dateLong);}  }
class C{  public void resetAmount(){  stillNeededAmount=requiredAmount;}  }
class C{  protected boolean isDeviceCompatibility(){  return mDeviceCompatibility;}  }
class C{  public boolean isCopied(final String name){  if (name == null)   throw new IllegalArgumentException();  final ViewMetadata vmd=views.get(name);  if (vmd == null)   throw new IllegalArgumentException();  return OverflowActionEnum.Copy.equals(vmd.getAction());}  }
class C{  public MonetaryFormat digits(char zeroDigit){  if (zeroDigit == this.zeroDigit)   return this; else   return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,codePrefixed);}  }
class C{  @Override public boolean containsValue(final Object value){  if (value == null) {    for (    final HashEntry<K,V> element : data) {      HashEntry<K,V> entry=element;      while (entry != null) {        if (entry.getValue() == null) {          return true;        }        entry=entry.next;      }    }  } else {    for (    final HashEntry<K,V> element : data) {      HashEntry<K,V> entry=element;      while (entry != null) {        if (isEqualValue(value,entry.getValue())) {          return true;        }        entry=entry.next;      }    }  }  return false;}  }
class C{  public boolean isNotGood(){  return (value & SEVERITY_MASK) != SEVERITY_GOOD;}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  public void addAll(T... items){  int start;synchronized (mLock) {    start=getItemCount();    Collections.addAll(mObjects,items);  }  if (mNotifyOnChange)   notifyItemRangeInserted(start,items.length);}  }
class C{  public static String buildCpimMessage(String from,String to,String content,String contentType,long timestampSent){  return CpimMessage.HEADER_FROM + ": " + formatCpimSipUri(from)+ CRLF+ CpimMessage.HEADER_TO+ ": "+ formatCpimSipUri(to)+ CRLF+ CpimMessage.HEADER_DATETIME+ ": "+ DateUtils.encodeDate(timestampSent)+ CRLF+ CRLF+ CpimMessage.HEADER_CONTENT_TYPE+ ": "+ contentType+ ";charset="+ UTF8_STR+ CRLF+ CRLF+ content;}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(KEY_MATERIAL,keySize);  byte[] iv=generateDerivedKey(IV_MATERIAL,ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),iv,0,ivSize);}  }
class C{  public EnhancedTextField(){  this(null,null);}  }
class C{  public boolean isExpired(final Date date){  if (date == null) {    throw new IllegalArgumentException("Date may not be null");  }  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= date.getTime());}  }
class C{  public void list(final Player player){  final StringBuilder sb=new StringBuilder();  sb.append("Listing signs:");  int i=1;  while (i <= signcounter) {    final Sign sign=storage.get(Integer.valueOf(i));    if (sign != null) {      sb.append("\r\n");      sb.append(i);      sb.append(". ");      signToString(sb,sign);    }    i++;  }  sandbox.privateText(player,sb.toString());}  }
class C{  public void delete(int no){  for (int i=0; i < m_lines.size(); i++) {    WebBasketLine wbl=(WebBasketLine)m_lines.get(i);    if (wbl.getLine() == no) {      m_lines.remove(i);      getTotal(true);      break;    }  }}  }
class C{  public boolean isOverline(){  return ((textDecoration & TEXT_DECORATION_OVERLINE) != 0);}  }
class C{  public SearchableEnvironment(JavaProject project,org.eclipse.jdt.core.ICompilationUnit[] workingCopies) throws JavaModelException {  this.project=project;  this.checkAccessRestrictions=!JavaCore.IGNORE.equals(project.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE,true)) || !JavaCore.IGNORE.equals(project.getOption(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE,true));  this.workingCopies=workingCopies;  this.nameLookup=project.newNameLookup(workingCopies);}  }
class C{  private int moveGap(int offset,int remove,int oldGapSize,int newGapSize,int newGapStart){  final int newGapEnd=newGapStart + newGapSize;  if (offset < fGapStart) {    int afterRemove=offset + remove;    if (afterRemove < fGapStart) {      final int betweenSize=fGapStart - afterRemove;      arrayCopy(afterRemove,fContent,newGapEnd,betweenSize);    }  } else {    final int offsetShifted=offset + oldGapSize;    final int betweenSize=offsetShifted - fGapEnd;    arrayCopy(fGapEnd,fContent,fGapStart,betweenSize);  }  return newGapEnd;}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_inCData=true;  append(m_doc.createCDATASection(""));}  }
class C{  @Deprecated public ExtendedErrorDialog(String key,Throwable error,boolean displayExceptionMessage,Object... arguments){  this(ApplicationFrame.getApplicationFrame(),key,error,displayExceptionMessage,arguments);}  }
class C{  public LeafNode createNode() throws XMPPException {  PubSub reply=(PubSub)sendPubsubPacket(Type.SET,new NodeExtension(PubSubElementType.CREATE));  NodeExtension elem=(NodeExtension)reply.getExtension("create",PubSubNamespace.BASIC.getXmlns());  LeafNode newNode=new LeafNode(con,elem.getNode());  newNode.setTo(to);  nodeMap.put(newNode.getId(),newNode);  return newNode;}  }
class C{  public static void writeXMLBIF03(String filename,String graphName,ArrayList<GraphNode> nodes,ArrayList<GraphEdge> edges){  try {    FileWriter outfile=new FileWriter(filename);    StringBuffer text=new StringBuffer();    text.append("<?xml version=\"1.0\"?>\n");    text.append("<!-- DTD for the XMLBIF 0.3 format -->\n");    text.append("<!DOCTYPE BIF [\n");    text.append("	<!ELEMENT BIF ( NETWORK )*>\n");    text.append("	      <!ATTLIST BIF VERSION CDATA #REQUIRED>\n");    text.append("	<!ELEMENT NETWORK ( NAME, ( PROPERTY | VARIABLE | DEFI" + "NITION )* )>\n");    text.append("	<!ELEMENT NAME (#PCDATA)>\n");    text.append("	<!ELEMENT VARIABLE ( NAME, ( OUTCOME |  PROPERTY )* )" + " >\n");    text.append("	      <!ATTLIST VARIABLE TYPE (nature|decision|utility" + ") \"nature\">\n");    text.append("	<!ELEMENT OUTCOME (#PCDATA)>\n");    text.append("	<!ELEMENT DEFINITION ( FOR | GIVEN | TABLE | PROPERTY" + " )* >\n");    text.append("	<!ELEMENT FOR (#PCDATA)>\n");    text.append("	<!ELEMENT GIVEN (#PCDATA)>\n");    text.append("	<!ELEMENT TABLE (#PCDATA)>\n");    text.append("	<!ELEMENT PROPERTY (#PCDATA)>\n");    text.append("]>\n");    text.append("\n");    text.append("\n");    text.append("<BIF VERSION=\"0.3\">\n");    text.append("<NETWORK>\n");    text.append("<NAME>" + XMLNormalize(graphName) + "</NAME>\n");    for (int nodeidx=0; nodeidx < nodes.size(); nodeidx++) {      GraphNode n=nodes.get(nodeidx);      if (n.nodeType != GraphNode.NORMAL) {        continue;      }      text.append("<VARIABLE TYPE=\"nature\">\n");      text.append("\t<NAME>" + XMLNormalize(n.ID) + "</NAME>\n");      if (n.outcomes != null) {        for (        String outcome : n.outcomes) {          text.append("\t<OUTCOME>" + XMLNormalize(outcome) + "</OUTCOME>\n");        }      } else {        text.append("\t<OUTCOME>true</OUTCOME>\n");      }      text.append("\t<PROPERTY>position = (" + n.x + ","+ n.y+ ")</PROPERTY>\n");      text.append("</VARIABLE>\n");    }    for (int nodeidx=0; nodeidx < nodes.size(); nodeidx++) {      GraphNode n=nodes.get(nodeidx);      if (n.nodeType != GraphNode.NORMAL) {        continue;      }      text.append("<DEFINITION>\n");      text.append("<FOR>" + XMLNormalize(n.ID) + "</FOR>\n");      int parntOutcomes=1;      if (n.prnts != null) {        for (        int prnt2 : n.prnts) {          GraphNode prnt=nodes.get(prnt2);          text.append("\t<GIVEN>" + XMLNormalize(prnt.ID) + "</GIVEN>\n");          if (prnt.outcomes != null) {            parntOutcomes*=prnt.outcomes.length;          }        }      }      text.append("<TABLE>\n");      for (int i=0; i < parntOutcomes; i++) {        if (n.outcomes != null) {          for (int outidx=0; outidx < n.outcomes.length; outidx++) {            text.append(n.probs[i][outidx] + " ");          }        } else {          text.append("1");        }        text.append('\n');      }      text.append("</TABLE>\n");      text.append("</DEFINITION>\n");    }    text.append("</NETWORK>\n");    text.append("</BIF>\n");    outfile.write(text.toString());    outfile.close();  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  private OrderedCollection<PortChangeEvent> compareAndUpdatePorts(Collection<OFPortDesc> newPorts,boolean doUpdate){  if (newPorts == null) {    throw new NullPointerException("newPortsList must not be null");  }  lock.writeLock().lock();  try {    OrderedCollection<PortChangeEvent> events=new LinkedHashSetWrapper<PortChangeEvent>();    Map<OFPort,OFPortDesc> newPortsByNumber=new HashMap<OFPort,OFPortDesc>();    Map<String,OFPortDesc> newPortsByName=new HashMap<String,OFPortDesc>();    List<OFPortDesc> newEnabledPortList=new ArrayList<OFPortDesc>();    List<OFPort> newEnabledPortNumbers=new ArrayList<OFPort>();    List<OFPortDesc> newPortsList=new ArrayList<OFPortDesc>(newPorts);    for (    OFPortDesc p : newPortsList) {      if (p == null) {        throw new NullPointerException("portList must not " + "contain null values");      }      OFPortDesc duplicatePort;      duplicatePort=newPortsByNumber.put(p.getPortNo(),p);      if (duplicatePort != null) {        String msg=String.format("Cannot have two ports " + "with the same number: %s <-> %s",String.format("%s (%d)",p.getName(),p.getPortNo().getPortNumber()),String.format("%s (%d)",duplicatePort.getName(),duplicatePort.getPortNo().getPortNumber()));        throw new IllegalArgumentException(msg);      }      duplicatePort=newPortsByName.put(p.getName().toLowerCase(),p);      if (duplicatePort != null) {        String msg=String.format("Cannot have two ports " + "with the same name: %s <-> %s",String.format("%s (%d)",p.getName(),p.getPortNo().getPortNumber()),String.format("%s (%d)",duplicatePort.getName(),duplicatePort.getPortNo().getPortNumber()));        throw new IllegalArgumentException(msg);      }      if (!p.getConfig().contains(OFPortConfig.PORT_DOWN) && !p.getState().contains(OFPortState.LINK_DOWN)) {        newEnabledPortList.add(p);        newEnabledPortNumbers.add(p.getPortNo());      }      events.addAll(getSinglePortChanges(p));    }    for (    OFPortDesc oldPort : this.portList) {      if (!newPortsByNumber.containsKey(oldPort.getPortNo())) {        PortChangeEvent ev=new PortChangeEvent(oldPort,PortChangeType.DELETE);        events.add(ev);      }    }    if (doUpdate) {      portsByName=Collections.unmodifiableMap(newPortsByName);      portsByNumber=Collections.unmodifiableMap(newPortsByNumber);      enabledPortList=Collections.unmodifiableList(newEnabledPortList);      enabledPortNumbers=Collections.unmodifiableList(newEnabledPortNumbers);      portList=Collections.unmodifiableList(newPortsList);    }    return events;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public void testFillDataPoint_pace_nonZeroSpeed(){  chartFragment.setReportSpeed(false);  MyTracksLocation myTracksLocation1=TrackStubUtils.createMyTracksLocation();  myTracksLocation1.setSpeed(100.0f);  double[] point=fillDataPointTestHelper(myTracksLocation1);  assertEquals(0.0,point[ChartView.SPEED_SERIES + 1]);  MyTracksLocation myTracksLocation2=TrackStubUtils.createMyTracksLocation();  myTracksLocation2.setTime(myTracksLocation2.getTime() + 222);  myTracksLocation2.setSpeed(102);  point=fillDataPointTestHelper(myTracksLocation2);  assertEquals(HOURS_PER_UNIT / (102.0 * UnitConversions.MS_TO_KMH),point[ChartView.PACE_SERIES + 1]);}  }
class C{  public Map<String,RawProtein<T>> process(Map<String,RawProtein<T>> proteinIdToRawMatchMap){  if (hitTypes == null) {    throw new IllegalStateException("The RPSBlastProcessing class has not been correctly initialised. " + "A List of acceptable hitTypes must be passed in.");  }  if (hitTypes.size() == 0) {    LOGGER.warn("The RPSBlastProcessing class has been initialised such that NO matches will pass. " + "(The list of acceptable hit types is empty).");  }  Map<String,RawProtein<T>> filteredMatches=new HashMap<String,RawProtein<T>>();  for (  String candidateProteinId : proteinIdToRawMatchMap.keySet()) {    RawProtein<T> candidateRawProtein=proteinIdToRawMatchMap.get(candidateProteinId);    RawProtein<T> filteredProtein=new RawProtein<T>(candidateRawProtein.getProteinIdentifier());    for (    T rawMatch : candidateRawProtein.getMatches()) {      if (hitTypes.contains(rawMatch.getHitType())) {        filteredProtein.addMatch(rawMatch);      }    }    if (filteredProtein.getMatches() != null && filteredProtein.getMatches().size() > 0) {      filteredMatches.put(candidateProteinId,filteredProtein);    }  }  return filteredMatches;}  }
class C{  public void doNextOp(DhcpStateMachine machine){  machine.onDeclineReceived(mClientMac,mRequestedIp);}  }
class C{  public static String readTextFromUri(Context context,Uri uri){  InputStream inputStream=null;  BufferedReader reader=null;  StringBuilder data=new StringBuilder(1_024);  try {    inputStream=context.getContentResolver().openInputStream(uri);    if (inputStream != null) {      reader=new BufferedReader(new InputStreamReader(inputStream));      String line;      while ((line=reader.readLine()) != null) {        data.append(line);      }    }  } catch (  IOException e) {    Log.e(TAG,"Error opening uri: " + uri,e);  } finally {    ResourceHelper.closeResources(new Object[]{inputStream,reader});  }  return data.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:11.982 -0400",hash_original_method="7CD50638E3A6C827E205E4831BBA3EC2",hash_generated_method="3C35CFBB2706F52557662120CAEE67C5") public void privateDnsRouteSet(boolean enabled){  mPrivateDnsRouteSet.set(enabled);}  }
class C{  @Override public ClusterSearchBuilder search(){  return new ClusterSearchBuilder(this);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return (mf != null && mf.isThumbnailLoaded(stack.getUIMgr())) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static void launch(IWorkbenchWindow window,String path,String fileName){  File file=new File(path);  if (!file.exists()) {    if (Display.getCurrent() != null) {      if (!MessageDialog.openConfirm(window.getShell(),DialogMessages.InfoFileNotExists_title,NLS.bind(DialogMessages.InfoFileNotExists_message,path))) {        return;      }    }  }  String extension=FileUtils.getExtension(path);  if (MindMapUI.FILE_EXT_TEMPLATE.equalsIgnoreCase(extension)) {    if (window != null && Display.getCurrent() != null) {      if (openTemplate(window,path,fileName))       return;    }  } else   if (MindMapUI.FILE_EXT_XMIND.equalsIgnoreCase(extension)) {    if (window != null && Display.getCurrent() != null) {      if (openMindMap(window,path,fileName))       return;    }  } else   if (MindMapUI.FILE_EXT_MARKER_PACKAGE.equalsIgnoreCase(extension)) {    if (importMarkers(path))     return;  }  org.xmind.ui.viewers.FileUtils.launch(file.getAbsolutePath());}  }
class C{  public Map buildMap(Map other){  return new HashMap(other);}  }
class C{  public SQLException(String reason,Throwable cause){  super(reason,cause);  if (!(this instanceof SQLWarning)) {    if (DriverManager.getLogWriter() != null) {      printStackTrace(DriverManager.getLogWriter());    }  }}  }
class C{  public Builder add(int docId){  if (docId <= lastDocId) {    throw new IllegalArgumentException("Doc ids must be added in-order, got " + docId + " which is <= lastDocID="+ lastDocId);  }  final int block=docId >>> 16;  if (block != currentBlock) {    flush();    currentBlock=block;  }  if (currentBlockCardinality < MAX_ARRAY_LENGTH) {    buffer[currentBlockCardinality]=(short)docId;  } else {    if (denseBuffer == null) {      final int numBits=Math.min(1 << 16,maxDoc - (block << 16));      denseBuffer=new FixedBitSet(numBits);      for (      short doc : buffer) {        denseBuffer.set(doc & 0xFFFF);      }    }    denseBuffer.set(docId & 0xFFFF);  }  lastDocId=docId;  currentBlockCardinality+=1;  return this;}  }
class C{  void expire(long index){  setState(State.EXPIRED);  cleanState(index);}  }
class C{  public AttributeWeight(AttributeWeights weights,String name,double weight){  this.weights=weights;  this.name=name;  this.weight=weight;}  }
class C{  public long dec(){  lock.lock();  try {    if (this.counter.get() <= 0) {      throw new IllegalStateException(toString());    }    final long c=this.counter.decrementAndGet();    if (log.isDebugEnabled())     log.debug(toString());    if (c == 0) {      _signal();    }    return c;  }  finally {    lock.unlock();  }}  }
class C{  public static <A>List<A> of(A x1,A x2){  return new List<A>(x1,of(x2));}  }
class C{  private void processUse(RegisterSpec def,SsaInsn use,EscapeSet escSet,ArrayList<RegisterSpec> regWorklist){  int useOpcode=use.getOpcode().getOpcode();switch (useOpcode) {case RegOps.MOVE:    escSet.regSet.set(use.getResult().getReg());  regWorklist.add(use.getResult());break;case RegOps.IF_EQ:case RegOps.IF_NE:case RegOps.CHECK_CAST:if (escSet.escape.compareTo(EscapeState.METHOD) < 0) {escSet.escape=EscapeState.METHOD;}break;case RegOps.APUT:RegisterSpec putIndex=use.getSources().get(2);if (!putIndex.getTypeBearer().isConstant()) {escSet.replaceableArray=false;}case RegOps.PUT_FIELD:RegisterSpec putValue=use.getSources().get(0);if (putValue.getTypeBearer().getBasicType() != Type.BT_OBJECT) {break;}escSet.replaceableArray=false;RegisterSpecList sources=use.getSources();if (sources.get(0).getReg() == def.getReg()) {int setIndex=findSetIndex(sources.get(1));if (setIndex != latticeValues.size()) {EscapeSet parentSet=latticeValues.get(setIndex);addEdge(parentSet,escSet);if (escSet.escape.compareTo(parentSet.escape) < 0) {escSet.escape=parentSet.escape;}}} else {int setIndex=findSetIndex(sources.get(0));if (setIndex != latticeValues.size()) {EscapeSet childSet=latticeValues.get(setIndex);addEdge(escSet,childSet);if (childSet.escape.compareTo(escSet.escape) < 0) {childSet.escape=escSet.escape;}}}break;case RegOps.AGET:RegisterSpec getIndex=use.getSources().get(1);if (!getIndex.getTypeBearer().isConstant()) {escSet.replaceableArray=false;}break;case RegOps.PUT_STATIC:escSet.escape=EscapeState.GLOBAL;break;case RegOps.INVOKE_STATIC:case RegOps.INVOKE_VIRTUAL:case RegOps.INVOKE_SUPER:case RegOps.INVOKE_DIRECT:case RegOps.INVOKE_INTERFACE:case RegOps.RETURN:case RegOps.THROW:escSet.escape=EscapeState.INTER;break;default :break;}}  }
class C{  public static void refuse(OutputStream out,String message,byte exception) throws IOException {  HeapDataOutputStream hdos=new HeapDataOutputStream(32,Version.CURRENT);  DataOutputStream dos=new DataOutputStream(hdos);  dos.writeByte(exception);  dos.writeByte(0);  dos.writeInt(0);  DistributedMember member=InternalDistributedSystem.getAnyInstance().getDistributedMember();  writeServerMember(member,dos);  if (message == null) {    message="";  }  dos.writeUTF(message);  dos.writeBoolean(Boolean.TRUE);  out.write(hdos.toByteArray());  out.flush();}  }
class C{  public CMissingOptionsTableModel(final DebuggerOptions options){  Preconditions.checkNotNull(options,"IE01465: Options argument can not be null");  m_entries=new String[16][2];  int index=0;  index=setRow(index,true,"Step Into");  index=setRow(index,true,"Step Over");  index=setRow(index,true,"Step to next block");  index=setRow(index,true,"Trace mode");  index=setRow(index,true,"Modify registers");  index=setRow(index,options.canDetach(),"Detach from target");  index=setRow(index,options.canMemmap(),"Show map of allocated memory");  index=setRow(index,options.canValidMemory(),"Automatically find memory ranges");  index=setRow(index,options.canMultithread(),"Multithreading support");  index=setRow(index,options.canTerminate(),"Terminate target");  index=setRow(index,options.canHalt(),"Halt target");  index=setRow(index,options.mustHaltBeforeCommunicating(),"Halt before communicating");  index=setRow(index,options.canSoftwareBreakpoint(),"Use software breakpoints");  index=setRow(index,options.isStackAvailable(),"Stack view available");  index=setRow(index,options.getBreakpointCounter(),"Maximum number of active breakpoints");  setRow(index,options.getPageSize(),"Page size");}  }
class C{  public void synthesize(int addr,int samples){  int[] mixedSamples=new int[samples * 2];  Arrays.fill(mixedSamples,0);  mix(mixedSamples,addr,samples,MAX_VOLUME,MAX_VOLUME,true);}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int sLength=mDataset.getItemCount();  double total=0;  String[] titles=new String[sLength];  for (int i=0; i < sLength; i++) {    total+=mDataset.getValue(i);    titles[i]=mDataset.getCategory(i);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  float currentAngle=mRenderer.getStartAngle();  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  int radius=(int)(mRadius * 0.35 * mRenderer.getScale());  if (mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  mPieMapper.setDimensions(radius,mCenterX,mCenterY);  boolean loadPieCfg=!mPieMapper.areAllSegmentPresent(sLength);  if (loadPieCfg) {    mPieMapper.clearPieSegments();  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  RectF oval=new RectF(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);  List<RectF> prevLabelsBounds=new ArrayList<RectF>();  for (int i=0; i < sLength; i++) {    SimpleSeriesRenderer seriesRenderer=mRenderer.getSeriesRendererAt(i);    if (seriesRenderer.isGradientEnabled()) {      RadialGradient grad=new RadialGradient(mCenterX,mCenterY,longRadius,seriesRenderer.getGradientStartColor(),seriesRenderer.getGradientStopColor(),TileMode.MIRROR);      paint.setShader(grad);    } else {      paint.setColor(seriesRenderer.getColor());    }    float value=(float)mDataset.getValue(i);    float angle=(float)(value / total * 360);    if (seriesRenderer.isHighlighted()) {      double rAngle=Math.toRadians(90 - (currentAngle + angle / 2));      float translateX=(float)(radius * 0.1 * Math.sin(rAngle));      float translateY=(float)(radius * 0.1 * Math.cos(rAngle));      oval.offset(translateX,translateY);      canvas.drawArc(oval,currentAngle,angle,true,paint);      oval.offset(-translateX,-translateY);    } else {      canvas.drawArc(oval,currentAngle,angle,true,paint);    }    paint.setColor(seriesRenderer.getColor());    paint.setShader(null);    drawLabel(canvas,mDataset.getCategory(i),mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius,longRadius,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,true,false);    if (mRenderer.isDisplayValues()) {      drawLabel(canvas,getLabel(mRenderer.getSeriesRendererAt(i).getChartValuesFormat(),mDataset.getValue(i)),mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius / 2,longRadius / 2,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,false,true);    }    if (loadPieCfg) {      mPieMapper.addPieSegment(i,value,currentAngle,angle);    }    currentAngle+=angle;  }  prevLabelsBounds.clear();  drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  @Override public String type(final String key){  checkIsInMultiOrPipeline();  client.type(key);  return client.getStatusCodeReply();}  }
class C{  public static <T,D>Mono<T> using(Callable<? extends D> resourceSupplier,Function<? super D,? extends Mono<? extends T>> sourceSupplier,Consumer<? super D> resourceCleanup){  return using(resourceSupplier,sourceSupplier,resourceCleanup,true);}  }
class C{  public void sleep(long milliSeconds){  lock.lock();  try {    if (t != 0) {      t=System.currentTimeMillis() + milliSeconds;      while (true) {        final long dt=t - System.currentTimeMillis();        if (dt <= 0) {          break;        } else {          wakeup.await(dt,TimeUnit.MILLISECONDS);        }      }    }    t=System.currentTimeMillis();  } catch (  InterruptedException e) {    logger.error(e.getMessage(),e);  } finally {    lock.unlock();  }}  }
class C{  void pack(){  final Point preferredSize=this.shell.computeSize(SWT.DEFAULT,SWT.DEFAULT);  if (preferredSize.x < this.minimumWidth) {    preferredSize.x=this.minimumWidth;  }  if (preferredSize.y < this.minimumHeight) {    preferredSize.y=this.minimumHeight;  }  final int centerX;  final int centerY;  if (this.centerPolicy == CenterOption.CENTER_ON_SCREEN || this.shell.getParent() == null) {    final Rectangle monitorBounds=SWTGraphicUtil.getBoundsOfMonitorOnWhichShellIsDisplayed(this.shell);    centerX=monitorBounds.x + (monitorBounds.width - preferredSize.x) / 2;    centerY=monitorBounds.y + (monitorBounds.height - preferredSize.y) / 2;  } else {    final Shell parent=(Shell)this.shell.getParent();    centerX=parent.getLocation().x + (parent.getSize().x - preferredSize.x) / 2;    centerY=parent.getLocation().y + (parent.getSize().y - preferredSize.y) / 2;  }  this.shell.setBounds(centerX,centerY,preferredSize.x,preferredSize.y);}  }
class C{  public static UniformPair<EventBean[]> flattenBatchStream(List<UniformPair<EventBean[]>> updateVector){  if (updateVector.isEmpty()) {    return new UniformPair<EventBean[]>(null,null);  }  if (updateVector.size() == 1) {    return new UniformPair<EventBean[]>(updateVector.get(0).getFirst(),updateVector.get(0).getSecond());  }  int totalNewEvents=0;  int totalOldEvents=0;  for (  UniformPair<EventBean[]> pair : updateVector) {    if (pair.getFirst() != null) {      totalNewEvents+=pair.getFirst().length;    }    if (pair.getSecond() != null) {      totalOldEvents+=pair.getSecond().length;    }  }  if ((totalNewEvents == 0) && (totalOldEvents == 0)) {    return new UniformPair<EventBean[]>(null,null);  }  EventBean[] newEvents=null;  EventBean[] oldEvents=null;  if (totalNewEvents != 0) {    newEvents=new EventBean[totalNewEvents];  }  if (totalOldEvents != 0) {    oldEvents=new EventBean[totalOldEvents];  }  int destPosNew=0;  int destPosOld=0;  for (  UniformPair<EventBean[]> pair : updateVector) {    EventBean[] newData=pair.getFirst();    EventBean[] oldData=pair.getSecond();    if (newData != null) {      int newDataLen=newData.length;      System.arraycopy(newData,0,newEvents,destPosNew,newDataLen);      destPosNew+=newDataLen;    }    if (oldData != null) {      int oldDataLen=oldData.length;      System.arraycopy(oldData,0,oldEvents,destPosOld,oldDataLen);      destPosOld+=oldDataLen;    }  }  return new UniformPair<EventBean[]>(newEvents,oldEvents);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void calculatePartialsPartialsPruning(double[] partials1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3){  double sum1, sum2;  int u=0;  int v=0;  for (int l=0; l < matrixCount; l++) {    for (int k=0; k < patternCount; k++) {      int w=l * matrixSize;      for (int i=0; i < stateCount; i++) {        sum1=sum2=0.0;        for (int j=0; j < stateCount; j++) {          sum1+=matrices1[w] * partials1[v + j];          sum2+=matrices2[w] * partials2[v + j];          w++;        }        partials3[u]=sum1 * sum2;        u++;      }      v+=stateCount;    }  }}  }
class C{  @Override public Boolean isSelected(){  return checked;}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder(getClass().getName());  String message=getLocalizedMessage();  if (publicId != null)   buf.append("publicId: ").append(publicId);  if (systemId != null)   buf.append("; systemId: ").append(systemId);  if (lineNumber != -1)   buf.append("; lineNumber: ").append(lineNumber);  if (columnNumber != -1)   buf.append("; columnNumber: ").append(columnNumber);  if (message != null)   buf.append("; ").append(message);  return buf.toString();}  }
class C{  public Button(Command cmd){  this(cmd.getCommandName(),cmd.getIcon());  addActionListener(cmd);  this.cmd=cmd;  setEnabled(cmd.isEnabled());  updateCommand();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AbstractXYItemRenderer)) {    return false;  }  AbstractXYItemRenderer that=(AbstractXYItemRenderer)obj;  if (!ObjectUtilities.equal(this.itemLabelGenerator,that.itemLabelGenerator)) {    return false;  }  if (!this.itemLabelGeneratorMap.equals(that.itemLabelGeneratorMap)) {    return false;  }  if (!ObjectUtilities.equal(this.baseItemLabelGenerator,that.baseItemLabelGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.toolTipGenerator,that.toolTipGenerator)) {    return false;  }  if (!this.toolTipGeneratorMap.equals(that.toolTipGeneratorMap)) {    return false;  }  if (!ObjectUtilities.equal(this.baseToolTipGenerator,that.baseToolTipGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.urlGenerator,that.urlGenerator)) {    return false;  }  if (!this.foregroundAnnotations.equals(that.foregroundAnnotations)) {    return false;  }  if (!this.backgroundAnnotations.equals(that.backgroundAnnotations)) {    return false;  }  if (!ObjectUtilities.equal(this.legendItemLabelGenerator,that.legendItemLabelGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,that.legendItemToolTipGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.legendItemURLGenerator,that.legendItemURLGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  public static XContentType guessBodyContentType(final RestRequest request){  final BytesReference restContent=RestActions.getRestContent(request);  if (restContent == null) {    return null;  }  return XContentFactory.xContentType(restContent);}  }
class C{  public void testComputeClasspathForDependentProject() throws CoreException {  addAndCreateSourceEntry(javaProjectA,SRC_DIR_NAME,null);  addAndCreateSourceEntry(javaProjectB,SRC_DIR_NAME,null);  JavaProjectUtilities.addRawClassPathEntry(javaProjectA,JavaCore.newProjectEntry(javaProjectB.getProject().getFullPath(),true));  List<File> actualCp=getListOfFiles(GWTCompileRunner.computeClasspath(javaProjectA));  List<File> expectedCp=new ArrayList<File>();  expectedCp.add(getFile(javaProjectA.getProject(),SRC_DIR_NAME));  expectedCp.add(getFile(javaProjectB.getProject(),SRC_DIR_NAME));  expectedCp.add(getOutputOfProject(javaProjectA));  expectedCp.add(getOutputOfProject(javaProjectB));  assertEquals(expectedCp,actualCp);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.571 -0500",hash_original_method="B07DBFC1814EC442DAADA17506313119",hash_generated_method="9E1C9BE76DFF7E78A3DC9474715D9513") public String encode(){  String retval;  if (statusLine != null)   retval=statusLine.encode() + super.encode(); else   retval=super.encode();  return retval;}  }
class C{  public boolean startCall(MuxInputStream in,MuxOutputStream out) throws IOException {  int channel=isClient ? 2 : 3;  return startCall(channel,in,out);}  }
class C{  public void checkLastTagWas(final int value) throws InvalidProtocolBufferException {  if (lastTag != value) {    throw InvalidProtocolBufferException.invalidEndTag();  }}  }
class C{  private static void usage(){  System.err.println("Usage: AnalyticsClient --username <username> --password <password>");  System.err.println();  System.err.println("Fetches and displays various pieces of " + "information from the Google Analytics " + "Data Export API.");}  }
class C{  @Override public boolean scrollForward(Selector obj,boolean isVertical,int steps) throws UiObjectNotFoundException {  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());  if (isVertical)   scrollable.setAsVerticalList(); else   scrollable.setAsHorizontalList();  return scrollable.scrollForward(steps);}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  public static final void saveBookmark(Context c,String title,String url){  Intent i=new Intent(Intent.ACTION_INSERT,Browser.BOOKMARKS_URI);  i.putExtra("title",title);  i.putExtra("url",url);  c.startActivity(i);}  }
class C{  public NodesInfoRequest jvm(boolean jvm){  this.jvm=jvm;  return this;}  }
class C{  private void verificarCodigosCamposDato(GestionDescripcionBI descripcionService,HashMap camposDato,String idFicha){  List listaCamposDato=descripcionService.getCamposFicha(idFicha);  logger.debug("Campos Dato:" + camposDato.toString());  if (!ListUtils.isEmpty(listaCamposDato)) {    ListIterator it=listaCamposDato.listIterator();    while (it.hasNext()) {      CampoDatoVO campoDatoVO=(CampoDatoVO)it.next();      camposDato.remove(campoDatoVO.getId());    }  }  String[] listaEspeciales=DefTipos.CAMPOS_ESPECIALES;  for (int i=0; i < listaEspeciales.length; i++) {    String idEspecial=listaEspeciales[i];    camposDato.remove(idEspecial);  }}  }
class C{  protected Metric(){  super(null,null);  _datapoints=new TreeMap<>();}  }
class C{  protected long calcLeaseExpireTime(long leaseTime){  if (leaseTime == Long.MAX_VALUE || leaseTime == -1) {    return Long.MAX_VALUE;  }  long currentTime=getCurrentTime();  long newLeaseExpireTime=currentTime + leaseTime;  if (newLeaseExpireTime < leaseTime) {    newLeaseExpireTime=Long.MAX_VALUE;  }  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockGrantToken.calcLeaseExpireTime] currentTime={} newLeaseExpireTime={}",currentTime,newLeaseExpireTime);  }  return newLeaseExpireTime;}  }
class C{  @Override public void writeToNBT(NBTTagCompound tag){  try {    super.writeToNBT(tag);  } catch (  RuntimeException e) {  }  NBTTagCompound data=new NBTTagCompound();  data.setDouble("energy",energyStored);  tag.setTag("IC2BasicSource",data);}  }
class C{  public GroovyPrintStream(String fileName) throws FileNotFoundException {  super(fileName);}  }
class C{  private void tuneVerticalSplitter(Element el){  el.getParentElement().getStyle().setProperty("zIndex","1000");  el.getParentElement().getStyle().setProperty("overflow","visible");  el.getStyle().setProperty("boxSizing","border-box");  el.getStyle().setProperty("width","5px");  el.getStyle().setProperty("overflow","hidden");  el.getStyle().setProperty("marginLeft","-3px");  el.getStyle().setProperty("backgroundColor","transparent");  DivElement smallBorder=Document.get().createDivElement();  smallBorder.getStyle().setProperty("position","absolute");  smallBorder.getStyle().setProperty("width","1px");  smallBorder.getStyle().setProperty("height","100%");  smallBorder.getStyle().setProperty("left","3px");  smallBorder.getStyle().setProperty("top","0px");  smallBorder.getStyle().setProperty("backgroundColor",Style.getSplitterSmallBorderColor());  el.appendChild(smallBorder);}  }
class C{  final public boolean startsWith(final CharSequence prefix){  final int l=prefix.length();  if (l > length())   return false;  int i=l;  final char[] a=array;  while (i-- != 0)   if (prefix.charAt(i) != a[i])   return false;  return true;}  }
class C{  public void remove(T object){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.remove(object);    }  } else {    mObjects.remove(object);  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public static boolean verifyDownloadPossible(BaseFragmentActivity activity){  if (new PrefManager(activity,PrefManager.Pref.WIFI).getBoolean(PrefManager.Key.DOWNLOAD_ONLY_ON_WIFI,true)) {    if (!isConnectedWifi(activity)) {      activity.showInfoMessage(activity.getString(R.string.wifi_off_message));      return false;    }  } else {    if (!isConnected(activity)) {      activity.showInfoMessage(activity.getString(R.string.network_not_connected));      return false;    }  }  return true;}  }
class C{  public DateType_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  private static CK_ATTRIBUTE[] combine(CK_ATTRIBUTE[] attrs1,CK_ATTRIBUTE[] attrs2){  List<CK_ATTRIBUTE> attrs=new ArrayList<CK_ATTRIBUTE>();  for (  CK_ATTRIBUTE attr : attrs1) {    if (attr.pValue != null) {      attrs.add(attr);    }  }  for (  CK_ATTRIBUTE attr2 : attrs2) {    long type=attr2.type;    for (    CK_ATTRIBUTE attr1 : attrs1) {      if (attr1.type == type) {        attrs.remove(attr1);      }    }    if (attr2.pValue != null) {      attrs.add(attr2);    }  }  return attrs.toArray(A0);}  }
class C{  public void dispose(){  m_template.removeListener(m_internalListener);}  }
class C{  public String resolveConfigurationPath(String handleId,String relativePath){  return fileHandler.append(getConfigurationDirectory(handleId),relativePath);}  }
class C{  public Level levelForResolution(double radiansPerPixel){  if (radiansPerPixel <= 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSetConfig","levelForResolution","invalidResolution"));  }  if (this.levels.length == 0) {    return null;  }  double degreesPerPixel=Math.toDegrees(radiansPerPixel);  double firstLevelDegreesPerPixel=this.firstLevelDelta / Math.min(this.tileWidth,this.tileHeight);  double level=Math.log(firstLevelDegreesPerPixel / degreesPerPixel) / Math.log(2);  int levelNumber=(int)Math.round(level);  if (levelNumber < this.levels.length) {    return this.levels[levelNumber];  } else {    return this.levels[this.levels.length - 1];  }}  }
class C{  protected ArrayList<FirewallRule> readRulesFromStorage(){  ArrayList<FirewallRule> l=new ArrayList<FirewallRule>();  try {    Map<String,Object> row;    IResultSet resultSet=storageSource.executeQuery(TABLE_NAME,ColumnNames,null,null);    for (Iterator<IResultSet> it=resultSet.iterator(); it.hasNext(); ) {      row=it.next().getRow();      FirewallRule r=new FirewallRule();      if (!row.containsKey(COLUMN_RULEID) || !row.containsKey(COLUMN_DPID)) {        logger.error("skipping entry with missing required 'ruleid' or 'switchid' entry: {}",row);        return l;      }      try {        r.ruleid=Integer.parseInt((String)row.get(COLUMN_RULEID));        r.dpid=Long.parseLong((String)row.get(COLUMN_DPID));        for (        String key : row.keySet()) {          if (row.get(key) == null)           continue;          if (key.equals(COLUMN_RULEID) || key.equals(COLUMN_DPID) || key.equals("id")) {            continue;          } else           if (key.equals(COLUMN_IN_PORT)) {            r.in_port=Short.parseShort((String)row.get(COLUMN_IN_PORT));          } else           if (key.equals(COLUMN_DL_SRC)) {            r.dl_src=Long.parseLong((String)row.get(COLUMN_DL_SRC));          } else           if (key.equals(COLUMN_DL_DST)) {            r.dl_dst=Long.parseLong((String)row.get(COLUMN_DL_DST));          } else           if (key.equals(COLUMN_DL_TYPE)) {            r.dl_type=Short.parseShort((String)row.get(COLUMN_DL_TYPE));          } else           if (key.equals(COLUMN_NW_SRC_PREFIX)) {            r.nw_src_prefix=Integer.parseInt((String)row.get(COLUMN_NW_SRC_PREFIX));          } else           if (key.equals(COLUMN_NW_SRC_MASKBITS)) {            r.nw_src_maskbits=Integer.parseInt((String)row.get(COLUMN_NW_SRC_MASKBITS));          } else           if (key.equals(COLUMN_NW_DST_PREFIX)) {            r.nw_dst_prefix=Integer.parseInt((String)row.get(COLUMN_NW_DST_PREFIX));          } else           if (key.equals(COLUMN_NW_DST_MASKBITS)) {            r.nw_dst_maskbits=Integer.parseInt((String)row.get(COLUMN_NW_DST_MASKBITS));          } else           if (key.equals(COLUMN_NW_PROTO)) {            r.nw_proto=Short.parseShort((String)row.get(COLUMN_NW_PROTO));          } else           if (key.equals(COLUMN_TP_SRC)) {            r.tp_src=Short.parseShort((String)row.get(COLUMN_TP_SRC));          } else           if (key.equals(COLUMN_TP_DST)) {            r.tp_dst=Short.parseShort((String)row.get(COLUMN_TP_DST));          } else           if (key.equals(COLUMN_WILDCARD_DPID)) {            r.wildcard_dpid=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DPID));          } else           if (key.equals(COLUMN_WILDCARD_IN_PORT)) {            r.wildcard_in_port=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_IN_PORT));          } else           if (key.equals(COLUMN_WILDCARD_DL_SRC)) {            r.wildcard_dl_src=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_SRC));          } else           if (key.equals(COLUMN_WILDCARD_DL_DST)) {            r.wildcard_dl_dst=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_DST));          } else           if (key.equals(COLUMN_WILDCARD_DL_TYPE)) {            r.wildcard_dl_type=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_TYPE));          } else           if (key.equals(COLUMN_WILDCARD_NW_SRC)) {            r.wildcard_nw_src=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_SRC));          } else           if (key.equals(COLUMN_WILDCARD_NW_DST)) {            r.wildcard_nw_dst=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_DST));          } else           if (key.equals(COLUMN_WILDCARD_NW_PROTO)) {            r.wildcard_nw_proto=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_PROTO));          } else           if (key.equals(COLUMN_PRIORITY)) {            r.priority=Integer.parseInt((String)row.get(COLUMN_PRIORITY));          } else           if (key.equals(COLUMN_ACTION)) {            int tmp=Integer.parseInt((String)row.get(COLUMN_ACTION));            if (tmp == FirewallRule.FirewallAction.DENY.ordinal())             r.action=FirewallRule.FirewallAction.DENY; else             if (tmp == FirewallRule.FirewallAction.ALLOW.ordinal())             r.action=FirewallRule.FirewallAction.ALLOW; else {              r.action=null;              logger.error("action not recognized");            }          }        }      } catch (      ClassCastException e) {        logger.error("skipping rule {} with bad data : " + e.getMessage(),r.ruleid);      }      if (r.action != null)       l.add(r);    }  } catch (  StorageException e) {    logger.error("failed to access storage: {}",e.getMessage());  }  Collections.sort(l);  return l;}  }
class C{  public static boolean addGetterSetterProposal(InvocationContext context,ASTNode coveringNode,IProblemLocation[] locations,ArrayList<ICommandAccess> resultingCollections){  if (locations != null) {    for (int i=0; i < locations.length; i++) {      int problemId=locations[i].getProblemId();      if (problemId == IProblem.UnusedPrivateField)       return false;      if (problemId == IProblem.UnqualifiedFieldAccess)       return false;    }  }  return addGetterSetterProposal(context,coveringNode,resultingCollections,7);}  }
class C{  private static boolean eq(int v1,int v2){  return v1 == v2;}  }
class C{  public DateTimeFormatterBuilder appendDayOfMonth(int minDigits){  return appendDecimal(DateTimeFieldType.dayOfMonth(),minDigits,2);}  }
class C{  public boolean isDocumentCopy(){  return m_isDocumentCopy;}  }
class C{  public Base64InputStream(InputStream in,int flags,boolean encode){  super(in);  eof=false;  inputBuffer=new byte[BUFFER_SIZE];  if (encode) {    coder=new Base64.Encoder(flags,null);  } else {    coder=new Base64.Decoder(flags,null);  }  coder.output=new byte[coder.maxOutputSize(BUFFER_SIZE)];  outputStart=0;  outputEnd=0;}  }
class C{  @Override public void preProcess(ResultProducer rp) throws Exception {  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  m_ResultListener.preProcess(this);}  }
class C{  public double nextDouble(){  return nextDouble(mean,gamma,cut);}  }
class C{  public String toString(){  return ":" + getValue();}  }
class C{  public Matrix dctColumns(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dctColumns(scale);  return new Matrix(dm.toArray());}  }
class C{  protected int _rowOffset(int absRank){  return rowOffsets[absRank];}  }
class C{  public MosaicDefinition(final Account creator,final MosaicId id,final MosaicDescriptor descriptor,final MosaicProperties properties,final MosaicLevy levy){  this.creator=creator;  this.id=id;  this.descriptor=descriptor;  this.properties=properties;  this.levy=levy;  this.validateFields();}  }
class C{  private boolean hasNextInetSocketAddress(){  return nextInetSocketAddressIndex < inetSocketAddresses.size();}  }
class C{  private void verifyAllVolumesInCGRequirement(List<Volume> volumes,VirtualPool targetVPool){  StringBuilder errorMsg=new StringBuilder();  boolean failure=false;  Collection<URI> volIds=transform(volumes,fctnDataObjectToID());  Map<URI,Volume> cgId2Volume=new HashMap<>();  try {    for (    Volume volume : volumes) {      URI cgId=volume.getConsistencyGroup();      if (!isNullURI(cgId) && !cgId2Volume.containsKey(cgId)) {        cgId2Volume.put(cgId,volume);      }    }    for (    Map.Entry<URI,Volume> entry : cgId2Volume.entrySet()) {      if (!isAddingSRDFProtection(entry.getValue(),targetVPool)) {        continue;      }      List<URI> memberIds=_dbClient.queryByConstraint(getVolumesByConsistencyGroup(entry.getKey()));      memberIds.removeAll(volIds);      if (!memberIds.isEmpty()) {        failure=true;        errorMsg.append(entry.getValue().getLabel()).append(" is missing other consistency group members.\n");      }    }  }  finally {    if (failure) {      throw APIException.badRequests.cannotAddSRDFProtectionToPartialCG(errorMsg.toString());    }  }}  }
class C{  private static void parsePatternTo(DateTimeFormatterBuilder builder,String pattern){  int length=pattern.length();  int[] indexRef=new int[1];  for (int i=0; i < length; i++) {    indexRef[0]=i;    String token=parseToken(pattern,indexRef);    i=indexRef[0];    int tokenLen=token.length();    if (tokenLen == 0) {      break;    }    char c=token.charAt(0);switch (c) {case 'G':      builder.appendEraText();    break;case 'C':  builder.appendCenturyOfEra(tokenLen,tokenLen);break;case 'x':case 'y':case 'Y':if (tokenLen == 2) {boolean lenientParse=true;if (i + 1 < length) {  indexRef[0]++;  if (isNumericToken(parseToken(pattern,indexRef))) {    lenientParse=false;  }  indexRef[0]--;}switch (c) {case 'x':  builder.appendTwoDigitWeekyear(new DateTime().getWeekyear() - 30,lenientParse);break;case 'y':case 'Y':default :builder.appendTwoDigitYear(new DateTime().getYear() - 30,lenientParse);break;}} else {int maxDigits=9;if (i + 1 < length) {indexRef[0]++;if (isNumericToken(parseToken(pattern,indexRef))) {maxDigits=tokenLen;}indexRef[0]--;}switch (c) {case 'x':builder.appendWeekyear(tokenLen,maxDigits);break;case 'y':builder.appendYear(tokenLen,maxDigits);break;case 'Y':builder.appendYearOfEra(tokenLen,maxDigits);break;}}break;case 'M':if (tokenLen >= 3) {if (tokenLen >= 4) {builder.appendMonthOfYearText();} else {builder.appendMonthOfYearShortText();}} else {builder.appendMonthOfYear(tokenLen);}break;case 'd':builder.appendDayOfMonth(tokenLen);break;case 'a':builder.appendHalfdayOfDayText();break;case 'h':builder.appendClockhourOfHalfday(tokenLen);break;case 'H':builder.appendHourOfDay(tokenLen);break;case 'k':builder.appendClockhourOfDay(tokenLen);break;case 'K':builder.appendHourOfHalfday(tokenLen);break;case 'm':builder.appendMinuteOfHour(tokenLen);break;case 's':builder.appendSecondOfMinute(tokenLen);break;case 'S':builder.appendFractionOfSecond(tokenLen,tokenLen);break;case 'e':builder.appendDayOfWeek(tokenLen);break;case 'E':if (tokenLen >= 4) {builder.appendDayOfWeekText();} else {builder.appendDayOfWeekShortText();}break;case 'D':builder.appendDayOfYear(tokenLen);break;case 'w':builder.appendWeekOfWeekyear(tokenLen);break;case 'z':if (tokenLen >= 4) {builder.appendTimeZoneName();} else {builder.appendTimeZoneShortName();}break;case 'Z':if (tokenLen == 1) {builder.appendTimeZoneOffset(null,"Z",false,2,2);} else if (tokenLen == 2) {builder.appendTimeZoneOffset(null,"Z",true,2,2);} else {builder.appendTimeZoneId();}break;case '\'':String sub=token.substring(1);if (sub.length() == 1) {builder.appendLiteral(sub.charAt(0));} else {builder.appendLiteral(new String(sub));}break;default :throw new IllegalArgumentException("Illegal pattern component: " + token);}}}  }
class C{  public void copyTo(@NonNull Calendar calendar){  calendar.clear();  calendar.set(year,month,day);}  }
class C{  public MinecraftDirectory(File rootDir){  Objects.requireNonNull(rootDir);  this.rootDir=rootDir.getAbsoluteFile();}  }
class C{  public CRemoveAction(final CCriteriumTree tree,final ICriteriumTreeNode node){  super("Remove");  m_tree=tree;  m_node=node;}  }
class C{  synchronized final void operationStarted(final int id,@NonNull final ChronosOperation<?> operation,@NonNull final Future<?> future){  mRunningOperations.put(id,new RunningOperation(operation,future));}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo state,Point2D source){  this.rangeAxis.resizeRange(factor);}  }
class C{  public static String left(String s,int width){  return left(s,width,' ');}  }
class C{  @Override public void reset() throws IOException {  m_structure=null;  setRetrieval(NONE);  if (m_File != null) {    setFile(new File(m_File));  }}  }
class C{  public String readLine(){  if (bytesLeft() == 0) {    return null;  }  int lineLimit=position;  while (lineLimit < limit && data[lineLimit] != '\n' && data[lineLimit] != '\r') {    lineLimit++;  }  if (lineLimit - position >= 3 && data[position] == (byte)0xEF && data[position + 1] == (byte)0xBB && data[position + 2] == (byte)0xBF) {    position+=3;  }  String line=new String(data,position,lineLimit - position);  position=lineLimit;  if (position == limit) {    return line;  }  if (data[position] == '\r') {    position++;    if (position == limit) {      return line;    }  }  if (data[position] == '\n') {    position++;  }  return line;}  }
class C{  public static int ipToInt(String addr){  String[] addrArray=addr.split("\\.");  int num=0;  for (int i=0; i < addrArray.length; i++) {    int power=3 - i;    num+=((Integer.parseInt(addrArray[i]) % 256 * Math.pow(256,power)));  }  return num;}  }
class C{  public Thread(java.lang.Runnable target){}  }
class C{  public void test_getInnerCause02_reject_superclass(){  Throwable cause=new Exception();  Throwable t=new RuntimeException(cause);  assertNull(getInnerCause(t,IOException.class));}  }
class C{  static boolean mayInvokeDirect(GroupAndInvokeCount myGroupAndInvokeCount,AsynchronousChannelGroupImpl group){  if ((myGroupAndInvokeCount != null) && (myGroupAndInvokeCount.group() == group) && (myGroupAndInvokeCount.invokeCount() < maxHandlerInvokeCount)) {    return true;  }  return false;}  }
class C{  public boolean canContain(Element other){  return theType.canContain(other.theType);}  }
class C{  public static String prettyPrintEntityDeepDiff(Map<?,?> a,Map<?,?> b){  return prettyPrintDiffedMap(deepDiff(a,b,true),null);}  }
class C{  public DeleteResult(Position logPosition){  this.logPosition=logPosition;}  }
class C{  public GeoDistanceBuilder unit(DistanceUnit unit){  this.unit=unit;  return this;}  }
class C{  private void gramToken(){  buffer.append(termAttribute.buffer(),0,termAttribute.length());  int endOffset=offsetAttribute.endOffset();  clearAttributes();  int length=buffer.length();  char termText[]=termAttribute.buffer();  if (length > termText.length) {    termText=termAttribute.resizeBuffer(length);  }  buffer.getChars(0,length,termText,0);  termAttribute.setLength(length);  posIncAttribute.setPositionIncrement(0);  posLenAttribute.setPositionLength(2);  offsetAttribute.setOffset(lastStartOffset,endOffset);  typeAttribute.setType(GRAM_TYPE);  buffer.setLength(0);}  }
class C{  public Statement(String text,Map<String,Object> parameters){  this(text,Values.value(parameters));}  }
class C{  public void put(byte[] data,String remoteFileName,String remoteTargetDirectory) throws IOException {  put(data,remoteFileName,remoteTargetDirectory,"0600");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected static DataCiteMetadata.Subjects convertEmlKeywords(List<KeywordSet> keywordSets,String language) throws InvalidMetadataException {  DataCiteMetadata.Subjects subjects=FACTORY.createDataCiteMetadataSubjects();  for (  KeywordSet keywordSet : keywordSets) {    for (    String keyword : keywordSet.getKeywords()) {      DataCiteMetadata.Subjects.Subject subject=FACTORY.createDataCiteMetadataSubjectsSubject();      subject.setValue(keyword);      if (!Strings.isNullOrEmpty(language)) {        subject.setLang(language);      }      subject.setLang(language);      String thesaurus=keywordSet.getKeywordThesaurus();      if (!Strings.isNullOrEmpty(thesaurus)) {        if (thesaurus.startsWith(HTTP_PROTOCOL)) {          try {            URI schemeUri=new URI(keywordSet.getKeywordThesaurus());            subject.setSchemeURI(schemeUri.toString());          } catch (          URISyntaxException e) {            LOG.debug("Could not convert keyword thesaurus to URI: " + keywordSet.getKeywordThesaurus());          }        } else {          subject.setSubjectScheme(thesaurus);        }      }      subjects.getSubject().add(subject);    }  }  return subjects;}  }
class C{  @Override protected boolean hasDisallowedEOL(){  return SemicolonInjectionHelper.hasDisallowedEOL(this);}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  private static int[] makePositive(byte a[]){  int keep, k;  int byteLength=a.length;  for (keep=0; keep < byteLength && a[keep] == -1; keep++)   ;  for (k=keep; k < byteLength && a[k] == 0; k++)   ;  int extraByte=(k == byteLength) ? 1 : 0;  int intLength=((byteLength - keep + extraByte) + 3) >>> 2;  int result[]=new int[intLength];  int b=byteLength - 1;  for (int i=intLength - 1; i >= 0; i--) {    result[i]=a[b--] & 0xff;    int numBytesToTransfer=Math.min(3,b - keep + 1);    if (numBytesToTransfer < 0)     numBytesToTransfer=0;    for (int j=8; j <= 8 * numBytesToTransfer; j+=8)     result[i]|=((a[b--] & 0xff) << j);    int mask=-1 >>> (8 * (3 - numBytesToTransfer));    result[i]=~result[i] & mask;  }  for (int i=result.length - 1; i >= 0; i--) {    result[i]=(int)((result[i] & LONG_MASK) + 1);    if (result[i] != 0)     break;  }  return result;}  }
class C{  void feMessage(Throwable ex){  log.printRawLines(ex.getMessage());  if (ex.getCause() != null && options.isSet("dev")) {    ex.getCause().printStackTrace(log.getWriter(WriterKind.NOTICE));  }}  }
class C{  public Analyzer includeSpacing(){  includeSpacing=true;  return this;}  }
class C{  private void moveToNotificationListenerSettings(){  Intent intent=new Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS);  startActivity(intent);}  }
class C{  public void deleteReference(final Reference reference) throws CouldntDeleteException {  Preconditions.checkNotNull(reference,"Error: Reference argument can not be null");  try {    m_node.deleteReference(reference.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  public GVTGlyphVector createGlyphVector(FontRenderContext frc,CharacterIterator ci){  if (ci instanceof AttributedCharacterIterator) {    AttributedCharacterIterator aci=(AttributedCharacterIterator)ci;    if (ArabicTextHandler.containsArabic(aci)) {      String str=ArabicTextHandler.createSubstituteString(aci);      return createGlyphVector(frc,str);    }  }  GlyphVector gv=awtFont.createGlyphVector(frc,ci);  return new AWTGVTGlyphVector(gv,this,scale,ci);}  }
class C{  public LZ6(){  super(10,3,31,32,1);}  }
class C{  public void addListener(TrackingListener listener){  listeners.add(listener);}  }
class C{  public static CGAffineTransform makeShear(double shx,double shy){  CGAffineTransform m=new CGAffineTransform();  m.setToShear(shx,shy);  return m;}  }
class C{  static void error(String msg){  printMessage("error",msg);}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked,final boolean urlSafe){  return encodeBase64(binaryData,isChunked,urlSafe,Integer.MAX_VALUE);}  }
class C{  public void showSelectedNeuronProperties(){  NeuronDialog dialog=NeuronDialog.createNeuronDialog(getSelectedNeurons());  dialog.setModalityType(Dialog.ModalityType.MODELESS);  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);}  }
class C{  public static void closeCustomShell() throws IOException {  Shell.closeCustomShell();}  }
class C{  public ComposedCallbackBuilder(){}  }
class C{  public DataBaseAdmin(File file) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException {  Properties properties=new Properties();  properties.load(new FileInputStream(file));  Class.forName(properties.getProperty("driver")).newInstance();  connection=DriverManager.getConnection(properties.getProperty("url"),properties.getProperty("userName"),properties.getProperty("password"));}  }
class C{  @Override protected void addToFrontier(Node node){  if (!explored.contains(node.getState())) {    Node frontierNode=frontierNodeLookup.get(node.getState());    if (frontierNode == null) {      frontier.add(node);      frontierNodeLookup.put(node.getState(),node);      updateMetrics(frontier.size());    } else     if (nodeComparator != null && nodeComparator.compare(node,frontierNode) < 0) {      if (frontier.remove(frontierNode))       frontierNodeLookup.remove(frontierNode.getState());      frontier.add(node);      frontierNodeLookup.put(node.getState(),node);    }  }}  }
class C{  @Override public Object multiLineText(final FormObject form){  final boolean[] flags=form.getFieldFlags();  final boolean[] characteristics=form.getCharacteristics();  final TextArea comp=new TextArea(form.getTextString());  final JavaFXControlListener controlListener=new JavaFXControlListener(comp);  final StringBuilder styleBuilder=new StringBuilder(200);  if (((flags != null) && (flags[FormObject.READONLY_ID])) || (characteristics != null && characteristics[9])) {    if (form.isXFAObject()) {      setToolTip(form,comp);      comp.setEditable(false);    } else {      setToolTip(form,comp);      comp.setEditable(false);    }  } else {    setToolTip(form,comp);  }  comp.setWrapText(true);  setupUniversalFeatures(comp,form,styleBuilder,controlListener);  setBorder(form,styleBuilder);  addFont(form,true,true,styleBuilder);  comp.getStyleClass().add("formsMultiLine");  comp.setStyle(styleBuilder.toString());  return comp;}  }
class C{  public RegistrationResponseParameterTest(String missingParameter){  mMissingParameter=missingParameter;}  }
class C{  public static String asString(Date date){  return new SimpleDateFormat(CommConstants.DATE_FORMAT_PATTERN).format(date);}  }
class C{  public static void nextImage(final IdocScanInterface ui){  ElementVO ele=(ElementVO)ui.getFileVO().getListImage().get(ui.getFileVO().getImageSelectIndex());  if (ele.getImageSelectIndex() + 2 > ele.getImages().size()) {    ele.setImageSelectIndex(0);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() + 1);  }}  }
class C{  public static String quantityplnoun(final int quantity,final String noun){  final String end=plnoun(quantity,noun);  return Integer.toString(quantity) + " " + end;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("SaveOrigDocDatasInput[");  buffer.append("docsNumber = ").append(docsNumber);  buffer.append(", docs = ").append(docs);  buffer.append(", source = ").append(source);  buffer.append("]");  return buffer.toString();}  }
class C{  final boolean link(Index<K,V> succ,Index<K,V> newSucc){  Node<K,V> n=node;  newSucc.right=succ;  return n.value != null && casRight(succ,newSucc);}  }
class C{  public String xmlToCsv(UpdateInventoryInput input){  return input.getSupplierId() + "," + input.getPartId()+ ","+ input.getName()+ ","+ input.getAmount();}  }
class C{  public void createPair(SshPairImpl sshPair) throws ServerException, ConflictException {  sshDao.create(sshPair);}  }
class C{  public static void main(String[] argv){  runFilter(new NumericTransform(),argv);}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  public MembershipAttributes(){  this.requiredRoles=Collections.emptySet();  this.lossAction=LossAction.FULL_ACCESS;  this.resumptionAction=ResumptionAction.NONE;}  }
class C{  public static boolean endsWithStop(String str){  if (str.endsWith(".") || str.endsWith("?") || str.endsWith("!")) {    return true;  }  return false;}  }
class C{  public NearestNeighbour(int k,boolean weighted,DistanceMetric distanceMetric){  this(k,weighted,distanceMetric,new DefaultVectorCollectionFactory<VecPaired<Vec,Double>>());}  }
class C{  protected final byte[] loadClassFromProvider(final String nameClass) throws ClassNotFoundException, IOException {  return m_provider.loadClass(nameClass);}  }
class C{  private void updateQDisplay(){  boolean reports=reportField.isChecked();  log.config("Reports=" + reports);  processLabel.setVisible(reports);  processField.setVisible(reports);  bPartnerLabel.setVisible(!reports);  bPartnerField.setVisible(!reports);}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  H5=0xc3d2e1f0;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public NoResponseException(Request request){  this();  this.request=request;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public boolean saveAs(){  boolean retSaveAs=false;  ExampleFileFilter filter=new ExampleFileFilter(new String[]{"*"},"All Files");  m_fileChooser.addChoosableFileFilter(filter);  if (null != getDirName()) {    m_fileChooser.setSelectedFile(new File(getDirName() + "//" + getFileName()));  } else {    m_fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));  }  int returnVal=m_fileChooser.showSaveDialog(this.getRootPane());  if (returnVal == JFileChooser.APPROVE_OPTION) {    if (m_fileChooser.getSelectedFile().exists()) {      int result=JOptionPane.showConfirmDialog(this.getRootPane(),"File Exists. Do you want to over write ? ","Warning",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);      if (result == JOptionPane.YES_OPTION) {        setFileName(m_fileChooser.getSelectedFile().getPath());        setCurrentDirectory(m_fileChooser.getCurrentDirectory().toString());        retSaveAs=saveFileWriter(getFileName());      } else       if (result == JOptionPane.NO_OPTION) {        retSaveAs=true;      } else       if (result == JOptionPane.CANCEL_OPTION) {        retSaveAs=false;      } else {        retSaveAs=false;      }    } else {      setFileName(m_fileChooser.getSelectedFile().getPath());      setCurrentDirectory(m_fileChooser.getCurrentDirectory().toString());      retSaveAs=saveFileWriter(getFileName());    }  } else {    retSaveAs=false;  }  return retSaveAs;}  }
class C{  public static String format(Date date,boolean millis,TimeZone tz){  Calendar calendar=new GregorianCalendar(tz,Locale.US);  calendar.setTime(date);  int capacity="yyyy-MM-ddThh:mm:ss".length();  capacity+=millis ? ".sss".length() : 0;  capacity+=tz.getRawOffset() == 0 ? "Z".length() : "+hh:mm".length();  StringBuilder formatted=new StringBuilder(capacity);  padInt(formatted,calendar.get(Calendar.YEAR),"yyyy".length());  formatted.append('-');  padInt(formatted,calendar.get(Calendar.MONTH) + 1,"MM".length());  formatted.append('-');  padInt(formatted,calendar.get(Calendar.DAY_OF_MONTH),"dd".length());  formatted.append('T');  padInt(formatted,calendar.get(Calendar.HOUR_OF_DAY),"hh".length());  formatted.append(':');  padInt(formatted,calendar.get(Calendar.MINUTE),"mm".length());  formatted.append(':');  padInt(formatted,calendar.get(Calendar.SECOND),"ss".length());  if (millis) {    formatted.append('.');    padInt(formatted,calendar.get(Calendar.MILLISECOND),"sss".length());  }  int offset=tz.getOffset(calendar.getTimeInMillis());  if (offset != 0) {    int hours=Math.abs((offset / (60 * 1000)) / 60);    int minutes=Math.abs((offset / (60 * 1000)) % 60);    formatted.append(offset < 0 ? '-' : '+');    padInt(formatted,hours,"hh".length());    formatted.append(':');    padInt(formatted,minutes,"mm".length());  } else {    formatted.append('Z');  }  return formatted.toString();}  }
class C{  protected boolean isDefaultSenderDomainPart(){  return fieldDefaultSenderDomainPart;}  }
class C{  public static JavacProcessingEnvironment instance(Context context){  JavacProcessingEnvironment instance=context.get(JavacProcessingEnvironment.class);  if (instance == null)   instance=new JavacProcessingEnvironment(context);  return instance;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public boolean isGeneric(){  EList<TypeVariable> _typeVars=this.getTypeVars();  boolean _isEmpty=_typeVars.isEmpty();  return (!_isEmpty);}  }
class C{  public boolean isFullKeyboard(){  return (mSources & SOURCE_KEYBOARD) == SOURCE_KEYBOARD && mKeyboardType == KEYBOARD_TYPE_ALPHABETIC;}  }
class C{  public boolean isData(){  return data;}  }
class C{  private static boolean isNodeInString(ASTNode node){  if (node.getElementType() == STRING_CONTENT || node.getElementType() == STRING_DATA) {    return true;  }  PsiElement psiElement=node.getPsi();  PsiElement parent=psiElement != null ? psiElement.getParent() : null;  while (parent != null) {    if (parent instanceof BashString) {      return true;    }    parent=parent.getParent();  }  return false;}  }
class C{  public static SerializedProxy makeSerializedProxy(Object proxy) throws java.io.InvalidClassException {  Class clazz=proxy.getClass();  MethodHandler methodHandler=null;  if (proxy instanceof ProxyObject)   methodHandler=((ProxyObject)proxy).getHandler(); else   if (proxy instanceof Proxy)   methodHandler=ProxyFactory.getHandler((Proxy)proxy);  return new SerializedProxy(clazz,ProxyFactory.getFilterSignature(clazz),methodHandler);}  }
class C{  public boolean isSetTimes(){  return EncodingUtils.testBit(issetBitfield,TIMES_ISSET_ID);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:46.002 -0500",hash_original_method="C6100D6542DA0DEE21E22A63B7A19544",hash_generated_method="55FA424116E7841B7C28D4B140F935FD") private int nextRandomizationTime(int index){  int randomTime=mRetryArray.get(index).mRandomizationTime;  if (randomTime == 0) {    return 0;  } else {    return rng.nextInt(randomTime);  }}  }
class C{  protected boolean isValidAuthority(String authority){  if (authority == null) {    return false;  }  if (authorityValidator != null && authorityValidator.isValid(authority)) {    return true;  }  final String authorityASCII=DomainValidator.unicodeToASCII(authority);  Matcher authorityMatcher=AUTHORITY_PATTERN.matcher(authorityASCII);  if (!authorityMatcher.matches()) {    return false;  }  String hostLocation=authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);  DomainValidator domainValidator=DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));  if (!domainValidator.isValid(hostLocation)) {    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();    if (!inetAddressValidator.isValid(hostLocation)) {      return false;    }  }  String port=authorityMatcher.group(PARSE_AUTHORITY_PORT);  if (port != null && !PORT_PATTERN.matcher(port).matches()) {    return false;  }  String extra=authorityMatcher.group(PARSE_AUTHORITY_EXTRA);  if (extra != null && extra.trim().length() > 0) {    return false;  }  return true;}  }
class C{  public boolean isMethodCallOfField(){  if (!this.isMethodCall())   return false;  if (this.isInvokeStatic())   return false;  if (this.methodName.contains("<clinit>"))   return false;  BytecodeInstruction srcInstruction=getSourceOfMethodInvocationInstruction();  if (srcInstruction == null)   return false;  if (srcInstruction.isFieldNodeUse()) {    if (srcInstruction.isStaticDefUse()) {      if (srcInstruction.asmNode instanceof FieldInsnNode) {        String classNameField=((FieldInsnNode)srcInstruction.asmNode).owner;        classNameField=classNameField.replace('/','.');        if (classNameField.equals(className)) {          return true;        }      }    } else {      return true;    }  }  return false;}  }
class C{  private void consolidateStore(){  if (!isMaster)   return;  cntConsolidateStoreRuns.updateCounterWithFlush();  if (logger.isDebugEnabled()) {    logger.debug("Running consolidateStore.");  }  IClosableIterator<Map.Entry<String,Versioned<DeviceSyncRepresentation>>> iter=null;  try {    iter=storeClient.entries();  } catch (  SyncException e) {    cntSyncException.updateCounterWithFlush();    logger.error("Failed to read devices from sync store",e);    return;  }  try {    while (iter.hasNext()) {      boolean found=false;      Versioned<DeviceSyncRepresentation> versionedDevice=iter.next().getValue();      DeviceSyncRepresentation storedDevice=versionedDevice.getValue();      if (storedDevice == null)       continue;      for (      SyncEntity se : storedDevice.getEntities()) {        try {          IDevice d=findDevice(se.macAddress,se.vlan,se.ipv4Address,se.switchDPID,se.switchPort);          if (d != null) {            found=true;            break;          }        } catch (        IllegalArgumentException e) {        }      }      if (!found) {        if (logger.isDebugEnabled()) {          logger.debug("Removing device {} from store. No " + "corresponding live device",storedDevice.getKey());        }        cntConsolidateStoreDevicesRemoved.updateCounterWithFlush();        removeDevice(versionedDevice);      }    }  }  finally {    if (iter != null)     iter.close();  }}  }
class C{  private void makeDirtyCall(Set<RefEntry> refEntries,long sequenceNum){  assert !Thread.holdsLock(this);  ObjID[] ids;  if (refEntries != null) {    ids=createObjIDArray(refEntries);  } else {    ids=emptyObjIDArray;  }  long startTime=System.currentTimeMillis();  try {    Lease lease=dgc.dirty(ids,sequenceNum,new Lease(vmid,leaseValue));    long duration=lease.getValue();    long newRenewTime=computeRenewTime(startTime,duration);    long newExpirationTime=startTime + duration;synchronized (this) {      dirtyFailures=0;      setRenewTime(newRenewTime);      expirationTime=newExpirationTime;    }  } catch (  Exception e) {    long endTime=System.currentTimeMillis();synchronized (this) {      dirtyFailures++;      if (dirtyFailures == 1) {        dirtyFailureStartTime=startTime;        dirtyFailureDuration=endTime - startTime;        setRenewTime(endTime);      } else {        int n=dirtyFailures - 2;        if (n == 0) {          dirtyFailureDuration=Math.max((dirtyFailureDuration + (endTime - startTime)) >> 1,1000);        }        long newRenewTime=endTime + (dirtyFailureDuration << n);        if (newRenewTime < expirationTime || dirtyFailures < dirtyFailureRetries || newRenewTime < dirtyFailureStartTime + leaseValue) {          setRenewTime(newRenewTime);        } else {          setRenewTime(Long.MAX_VALUE);        }      }      if (refEntries != null) {        invalidRefs.addAll(refEntries);        Iterator<RefEntry> iter=refEntries.iterator();        while (iter.hasNext()) {          RefEntry refEntry=iter.next();          refEntry.markDirtyFailed();        }      }      if (renewTime >= expirationTime) {        invalidRefs.addAll(refTable.values());      }    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public <V extends Vertex>TObjectDoubleHashMap<V> localClusteringCoefficients(Collection<V> vertices){  if (enableCache && vertices.size() == cachedSize) {    return (TObjectDoubleHashMap<V>)cachedValues;  }  Set<SampledVertex> sampledVertices=SnowballPartitions.<SampledVertex>createSampledPartition((Collection<SampledVertex>)vertices);  TObjectDoubleHashMap<SampledVertex> coefficients=new TObjectDoubleHashMap<SampledVertex>();  for (  SampledVertex vertex : sampledVertices) {    int k=vertex.getEdges().size();    if (k == 0 || k == 1) {      coefficients.put(vertex,0.0);    } else {      double c=0;      int n_edge=countAdjacentEdges(vertex);      if (estimEdges) {        c=2 * estimateAdjacentEdges(vertex,n_edge) / (double)(k * (k - 1));      } else {        c=2 * n_edge / (double)(k * (k - 1));      }      coefficients.put(vertex,c);    }  }  cachedSize=vertices.size();  cachedValues=coefficients;  return (TObjectDoubleHashMap<V>)coefficients;}  }
class C{  public long success(){  return success;}  }
class C{  public static ObjectAcl parseGetObjectAcl(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    ObjectAcl acl=new ObjectAcl();    String id=root.getChild("Owner").getChildText("ID");    String displayName=root.getChild("Owner").getChildText("DisplayName");    Owner owner=new Owner(id,displayName);    acl.setOwner(owner);    String grantString=root.getChild("AccessControlList").getChildText("Grant");    acl.setPermission(ObjectPermission.parsePermission(grantString));    return acl;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public void updateServer(Server server){  servers.put(server.getId(),server);}  }
class C{  public static Capitalization toCapitalization(Boolean up1,Boolean up2){  if (up1 == null) {    return Capitalization.CAPITALIZE;  } else   if (up2 == null) {    return up1 ? Capitalization.UPPERCASE : Capitalization.LOWERCASE;  } else   if (up1) {    return up2 ? Capitalization.UPPERCASE : Capitalization.CAPITALIZE;  } else {    return Capitalization.LOWERCASE;  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getValidFrom() == null)   setValidFrom(TimeUtil.getDay(null));  return true;}  }
class C{  private int convertSurrogate(int secondPart) throws IOException {  int firstPart=_surrogate;  _surrogate=0;  if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {    throw new IOException("Broken surrogate pair: first char 0x" + Integer.toHexString(firstPart) + ", second 0x"+ Integer.toHexString(secondPart)+ "; illegal combination");  }  return 0x10000 + ((firstPart - SURR1_FIRST) << 10) + (secondPart - SURR2_FIRST);}  }
class C{  private void ensureCapacity(int desiredLongCount){  if (desiredLongCount <= bits.length) {    return;  }  int newLength=Math.max(desiredLongCount,bits.length * 2);  long[] newBits=new long[newLength];  System.arraycopy(bits,0,newBits,0,longCount);  this.bits=newBits;}  }
class C{  public void testTransformer(final View v){  final Intent testActivity=new Intent(this,TestTransformer.class);  startActivity(testActivity);}  }
class C{  public static <From,To>To convert(From object,Class<From> from,Class<To> to,DataService ds){  ConversionStrategy<From,To> converter=ConversionFactory.getConverter(from,to,ds);  converter.setDataService(ds);  return converter.convert(object);}  }
class C{  private void registerStendhalDAOs(){  DAORegister.get().register(CharacterDAO.class,new StendhalCharacterDAO());  DAORegister.get().register(PostmanDAO.class,new PostmanDAO());  DAORegister.get().register(StendhalBuddyDAO.class,new StendhalBuddyDAO());  DAORegister.get().register(StendhalHallOfFameDAO.class,new StendhalHallOfFameDAO());  DAORegister.get().register(StendhalKillLogDAO.class,new StendhalKillLogDAO());  DAORegister.get().register(StendhalNPCDAO.class,new StendhalNPCDAO());  DAORegister.get().register(StendhalWebsiteDAO.class,new StendhalWebsiteDAO());  DAORegister.get().register(AchievementDAO.class,new AchievementDAO());  DAORegister.get().register(PendingAchievementDAO.class,new PendingAchievementDAO());  DAORegister.get().register(StendhalItemDAO.class,new StendhalItemDAO());  DAORegister.get().register(StendhalRPZoneDAO.class,new StendhalRPZoneDAO());  DAORegister.get().register(StendhalSearchIndexDAO.class,new StendhalSearchIndexDAO());}  }
class C{  public static Stats of(double... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  private void $$$setupUI$$$(){  myContentPane=new JPanel();  myContentPane.setLayout(new GridLayoutManager(5,3,new Insets(0,0,0,0),-1,-1));  serverLabel=new JPanel();  serverLabel.setLayout(new GridLayoutManager(2,2,new Insets(0,0,0,0),-1,-1));  myContentPane.add(serverLabel,new GridConstraints(1,0,1,3,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  serverLabel.setBorder(BorderFactory.createTitledBorder("Servers and workspaces"));  myManageButton=new JButton();  myManageButton.setText("Manage...");  myManageButton.setMnemonic('M');  myManageButton.setDisplayedMnemonicIndex(0);  serverLabel.add(myManageButton,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer1=new Spacer();  serverLabel.add(spacer1,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,1,null,null,null,0,false));  myUseIdeaHttpProxyCheckBox=new JCheckBox();  myUseIdeaHttpProxyCheckBox.setEnabled(true);  myUseIdeaHttpProxyCheckBox.setSelected(false);  myUseIdeaHttpProxyCheckBox.setText("Use HTTP Proxy settings");  myUseIdeaHttpProxyCheckBox.setMnemonic('U');  myUseIdeaHttpProxyCheckBox.setDisplayedMnemonicIndex(0);  serverLabel.add(myUseIdeaHttpProxyCheckBox,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  passwordLabel=new JPanel();  passwordLabel.setLayout(new GridLayoutManager(1,2,new Insets(0,0,0,0),-1,-1));  myContentPane.add(passwordLabel,new GridConstraints(2,0,1,3,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  passwordLabel.setBorder(BorderFactory.createTitledBorder("Passwords"));  final Spacer spacer2=new Spacer();  passwordLabel.add(spacer2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,1,null,null,null,0,false));  myResetPasswordsButton=new JButton();  myResetPasswordsButton.setText("Reset Saved Passwords");  myResetPasswordsButton.setMnemonic('R');  myResetPasswordsButton.setDisplayedMnemonicIndex(0);  passwordLabel.add(myResetPasswordsButton,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  checkinPolicyLabel=new JPanel();  checkinPolicyLabel.setLayout(new GridLayoutManager(5,1,new Insets(0,0,0,0),-1,-1));  myContentPane.add(checkinPolicyLabel,new GridConstraints(3,0,1,3,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  checkinPolicyLabel.setBorder(BorderFactory.createTitledBorder("Checkin policies compatibility"));  myReportNotInstalledPoliciesCheckBox=new JCheckBox();  myReportNotInstalledPoliciesCheckBox.setText("Warn about not installed policies");  myReportNotInstalledPoliciesCheckBox.setMnemonic('W');  myReportNotInstalledPoliciesCheckBox.setDisplayedMnemonicIndex(0);  checkinPolicyLabel.add(myReportNotInstalledPoliciesCheckBox,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  noteLabel=new JLabel();  noteLabel.setText("(Note: these settings may be overridden for individual team project)");  checkinPolicyLabel.add(noteLabel,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  myTFSCheckBox=new JCheckBox();  myTFSCheckBox.setText("Evaluate Team Explorer policies");  myTFSCheckBox.setMnemonic('T');  myTFSCheckBox.setDisplayedMnemonicIndex(9);  checkinPolicyLabel.add(myTFSCheckBox,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  myStatefulCheckBox=new JCheckBox();  myStatefulCheckBox.setText("Evaluate Teamprise policies");  myStatefulCheckBox.setMnemonic('E');  myStatefulCheckBox.setDisplayedMnemonicIndex(10);  checkinPolicyLabel.add(myStatefulCheckBox,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  pathLabel=new JLabel();  pathLabel.setText("Path to tf executable:");  myContentPane.add(pathLabel,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  tfExeField=new TextFieldWithBrowseButton();  myContentPane.add(tfExeField,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  testExeButton=new JButton();  testExeButton.setText("Test");  myContentPane.add(testExeButton,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_EAST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  final Spacer spacer3=new Spacer();  myContentPane.add(spacer3,new GridConstraints(4,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));}  }
class C{  private File createMultiBitRuntime() throws IOException {  File multiBitDirectory=FileHandler.createTempDirectory("multibit");  String multiBitDirectoryPath=multiBitDirectory.getAbsolutePath();  System.out.println("Building MultiBit runtime in : " + multiBitDirectory.getAbsolutePath());  File multibitProperties=new File(multiBitDirectoryPath + File.separator + "multibit.properties");  multibitProperties.createNewFile();  multibitProperties.deleteOnExit();  File multibitCheckpoints=new File(multiBitDirectoryPath + File.separator + "multibit.checkpoints");  FileHandler.copyFile(new File("./src/main/resources/multibit.checkpoints"),multibitCheckpoints);  multibitCheckpoints.deleteOnExit();  return multiBitDirectory;}  }
class C{  public void removeAssignment(HumanResource resource){  new ResourceAssignmentImpl(resource).delete();}  }
class C{  public static void main(String[] args){  runFilter(new RandomSubset(),args);}  }
class C{  protected Map<String,Object> configField(String displayName,String defaultValue,String displayOrder,boolean required,boolean secure){  Map<String,Object> serverUrlParams=new HashMap<>();  serverUrlParams.put("display-name",displayName);  serverUrlParams.put("display-value",defaultValue);  serverUrlParams.put("display-order",displayOrder);  serverUrlParams.put("required",required);  serverUrlParams.put("secure",secure);  return serverUrlParams;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == TypeProvidingElement.class) {switch (baseFeatureID) {default :    return -1;}}if (baseClass == TypedElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:  return N4JSPackage.VARIABLE_DECLARATION__DECLARED_TYPE_REF;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:return N4JSPackage.VARIABLE_DECLARATION__BOGUS_TYPE_REF;default :return -1;}}if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == IdentifiableElement.class) {switch (baseFeatureID) {case TypesPackage.IDENTIFIABLE_ELEMENT__NAME:return N4JSPackage.VARIABLE_DECLARATION__NAME;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == Variable.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public TextToSpeech(String username,String password){  this();  setUsernameAndPassword(username,password);}  }
class C{  public Vertex parseStateMachine(String code,boolean debug,Network network){  TextStream stream=new TextStream(code);  try {    Map<String,Map<String,Vertex>> elements=buildElementsMap(network);    List<String> comments=getComments(stream);    Vertex state=parseState(stream,elements,debug,network);    if (debug) {      for (      String comment : comments) {        state.addRelationship(Primitive.COMMENT,network.createVertex(comment),Integer.MAX_VALUE);      }    }    TextData text=new TextData();    text.setText(code);    state.addRelationship(Primitive.SOURCECODE,network.createVertex(text));    Vertex sourceCode=state.getRelationship(Primitive.SOURCECODE);    if (sourceCode != null) {      sourceCode.setPinned(true);    }    network.getBot().log(this,"Compiled new state machine",Level.INFO,state);    return state;  } catch (  SelfParseException exception) {    throw exception;  }catch (  Exception exception) {    network.getBot().log(this,exception);    throw new SelfParseException("Parsing error occurred",stream,exception);  }}  }
class C{  public final int columnNumber(){  return columnNumber;}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  if (z == null) {    throw new NullPointerException();  }  for (  Node node : z) {    if (node == null) {      throw new NullPointerException();    }  }  if (!observedVars.contains(x)) {    throw new IllegalArgumentException("Not an observed variable: " + x);  }  if (!observedVars.contains(y)) {    throw new IllegalArgumentException("Not an observed variable: " + y);  }  for (  Node _z : z) {    if (!observedVars.contains(_z)) {      throw new IllegalArgumentException("Not an observed variable: " + _z);    }  }  boolean dSeparated=!getGraph().isDConnectedTo(x,y,z);  if (verbose) {    if (dSeparated) {      double pValue=1.0;      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(x,y,z,pValue));      System.out.println(SearchLogUtils.independenceFactMsg(x,y,z,pValue));    } else {      double pValue=0.0;      TetradLogger.getInstance().log("dependencies",SearchLogUtils.dependenceFactMsg(x,y,z,pValue));      System.out.println(SearchLogUtils.dependenceFactMsg(x,y,z,pValue));    }  }  if (dSeparated) {    if (this.facts != null) {      this.facts.add(new IndependenceFact(x,y,z));    }    pvalue=1.0;  } else {    pvalue=0.0;  }  return dSeparated;}  }
class C{  public Phaser(Phaser parent,int parties){  if (parties >>> PARTIES_SHIFT != 0)   throw new IllegalArgumentException("Illegal number of parties");  int phase=0;  this.parent=parent;  if (parent != null) {    final Phaser root=parent.root;    this.root=root;    this.evenQ=root.evenQ;    this.oddQ=root.oddQ;    if (parties != 0)     phase=parent.doRegister(1);  } else {    this.root=this;    this.evenQ=new AtomicReference<QNode>();    this.oddQ=new AtomicReference<QNode>();  }  this.state=(parties == 0) ? (long)EMPTY : ((long)phase << PHASE_SHIFT) | ((long)parties << PARTIES_SHIFT) | ((long)parties);}  }
class C{  public PKCS10(PublicKey publicKey){  subjectPublicKeyInfo=publicKey;  attributeSet=new PKCS10Attributes();}  }
class C{  public static void applyImageResource(Element elem,ImageResource image,String hPos,String vPos){  CSSStyleDeclaration style=elem.getStyle();  style.setBackgroundImage("url(" + image.getSafeUri().asString() + ")");  style.setProperty("background-repeat","no-repeat");  style.setProperty("background-position",hPos + " " + vPos);  style.setOverflow("hidden");}  }
class C{  public int compareTo(final TP o){  if (this == o)   return 0;  int ret=timestamp < o.timestamp ? -1 : timestamp > o.timestamp ? 1 : 0;  if (ret == 0) {    ret=name.compareTo(o.name);  }  return ret;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.510 -0500",hash_original_method="BEFF27391F370909F03A02FD6CE5C8E1",hash_generated_method="EA0067382F4D2FDC5CE426FB5E7D1E58") public void registerForEcmTimerReset(Handler h,int what,Object obj){  mEcmTimerResetRegistrants.addUnique(h,what,obj);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public VNXeCommandResult addLunsToConsistencyGroup(String cgId,List<String> luns){  LunGroupModifyParam param=new LunGroupModifyParam();  List<LunAddParam> lunAdds=new ArrayList<LunAddParam>();  for (  String lunId : luns) {    VNXeBase lun=new VNXeBase(lunId);    LunAddParam lunAdd=new LunAddParam();    lunAdd.setLun(lun);    lunAdds.add(lunAdd);  }  param.setLunAdd(lunAdds);  ConsistencyGroupRequests req=new ConsistencyGroupRequests(_khClient);  return req.modifyConsistencyGroupSync(cgId,param);}  }
class C{  @Override public void putAll(Map<? extends Float,? extends Float> map){  Iterator<? extends Entry<? extends Float,? extends Float>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Float,? extends Float> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public int authenticate(String login,String password){  if (!useSSL || passwordManager == null) {    throw new UnsupportedOperationException("Attempt to authenticate unencrypted connection");  }  try {    String expectedPassword=passwordManager.getClearTextPasswordForUser(login);    if (expectedPassword == null)     return AUTH_FAILED_NO_SUCH_USER; else     if (expectedPassword.equals(password))     return AUTH_OK; else     return AUTH_FAILED_BAD_PASSWORD;  } catch (  ConfigurationException e) {    logger.warn("Unable to retrieve password for THL login: login=" + login,e);    return AUTH_FAILED_UNKNOWN;  }}  }
class C{  private void installWwwFolder(){  isPluginReadyForWork=false;  if (pluginInternalPrefs.isWwwFolderInstalled()) {    pluginInternalPrefs.setWwwFolderInstalled(false);    pluginInternalPrefs.setReadyForInstallationReleaseVersionName("");    pluginInternalPrefs.setPreviousReleaseVersionName("");    final ApplicationConfig appConfig=ApplicationConfig.configFromAssets(cordova.getActivity(),PluginFilesStructure.CONFIG_FILE_NAME);    pluginInternalPrefs.setCurrentReleaseVersionName(appConfig.getContentConfig().getReleaseVersion());    pluginInternalPrefsStorage.storeInPreference(pluginInternalPrefs);  }  AssetsHelper.copyAssetDirectoryToAppDirectory(cordova.getActivity().getApplicationContext(),WWW_FOLDER,fileStructure.getWwwFolder());}  }
class C{  public static boolean isXML11NCNameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public boolean isDelivered(){  return delivered;}  }
class C{  public static <T>ObjectAccessor<T> of(T object){  @SuppressWarnings("unchecked") Class<T> type=(Class<T>)object.getClass();  return new ObjectAccessor<>(object,type);}  }
class C{  public WeakHashMapPro(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR);  putAll(m);}  }
class C{  public static boolean isUnix(){  return isSolaris() || isAix() || isFreeBsd()|| isHpUx()|| isIrix()|| isDigitalUnix();}  }
class C{  public AWTSplashWindow(Frame owner,Image splashImage){  super(owner);  this.splashImage=splashImage;  int imgWidth=splashImage.getWidth(this);  if (imgWidth < 1)   imgWidth=1;  int imgHeight=splashImage.getHeight(this);  if (imgHeight < 1)   imgHeight=1;  setSize(imgWidth,imgHeight);  Dimension screenDim=Toolkit.getDefaultToolkit().getScreenSize();  setLocation((screenDim.width - imgWidth) / 2,(screenDim.height - imgHeight) / 2);}  }
class C{  public MatrixStackf popMatrix(){  if (curr == 0) {    throw new IllegalStateException("already at the buttom of the stack");  }  set(mats[--curr]);  return this;}  }
class C{  public JavaContentAssistInvocationContext(Document document,int offset){  super(document,offset);}  }
class C{  public boolean hasMoreTokens(){  newPosition=skipDelimiters(currentPosition);  return (newPosition < maxPosition);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null)   return sage.plugin.CorePluginManager.getInstance().getPluginIncompatibleReason(pluggy,stack.getUIMgr());  return "";}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break; else     offer(item);  }}  }
class C{  public Enumeration oids(){  return ordering.elements();}  }
class C{  public static void refreshAccessToken() throws Exception {  if (StringUtils.isBlank(Globals.settings.getTraktRefreshToken())) {    throw new Exception("not trakt.tv refresh token found");  }  OAuthAccessTokenResponse response=TraktV2.refreshAccessToken(CLIENT_ID,ApiKey.decryptApikey("VD2h4jmnrrYWnP1Nk49UtTNRILiWsuelJKdza7DAw+ROh1wtVf2U6PQScm7QWCOTsxN0K3QluIykKs2ZT1af1GcPz1401005bDBDss1Pz2c="),"urn:ietf:wg:oauth:2.0:oob",Globals.settings.getTraktRefreshToken());  if (StringUtils.isNoneBlank(response.getAccessToken(),response.getRefreshToken())) {    Globals.settings.setTraktAccessToken(response.getAccessToken());    Globals.settings.setTraktRefreshToken(response.getRefreshToken());    TRAKT.setAccessToken(Globals.settings.getTraktAccessToken());  }}  }
class C{  private void initializeNoxViewConfig(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  noxConfig=new NoxConfig();  TypedArray attributes=context.getTheme().obtainStyledAttributes(attrs,R.styleable.nox,defStyleAttr,defStyleRes);  initializeNoxItemSize(attributes);  initializeNoxItemMargin(attributes);  initializeNoxItemPlaceholder(attributes);  initializeShapeConfig(attributes);  initializeTransformationConfig(attributes);  attributes.recycle();}  }
class C{  public void createCashBasedJournalEntriesAndReversalsForSavingsCharges(final Office office,final String currencyCode,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeDebited,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeCredited,final Long savingsProductId,final Long paymentTypeId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal totalAmount,final Boolean isReversal,final List<ChargePaymentDTO> chargePaymentDTOs){  if (chargePaymentDTOs.size() != 1) {    throw new PlatformDataIntegrityException("Recent Portfolio changes w.r.t Charges for Savings have Broken the accounting code","Recent Portfolio changes w.r.t Charges for Savings have Broken the accounting code");  }  ChargePaymentDTO chargePaymentDTO=chargePaymentDTOs.get(0);  final GLAccount chargeSpecificAccount=getLinkedGLAccountForSavingsCharges(savingsProductId,accountTypeToBeCredited.getValue(),chargePaymentDTO.getChargeId());  final GLAccount savingsControlAccount=getLinkedGLAccountForSavingsProduct(savingsProductId,accountTypeToBeDebited.getValue(),paymentTypeId);  if (isReversal) {    createDebitJournalEntryForSavings(office,currencyCode,chargeSpecificAccount,loanId,transactionId,transactionDate,totalAmount);    createCreditJournalEntryForSavings(office,currencyCode,savingsControlAccount,loanId,transactionId,transactionDate,totalAmount);  } else {    createDebitJournalEntryForSavings(office,currencyCode,savingsControlAccount,loanId,transactionId,transactionDate,totalAmount);    createCreditJournalEntryForSavings(office,currencyCode,chargeSpecificAccount,loanId,transactionId,transactionDate,totalAmount);  }}  }
class C{  public static <T>void insertionSort(T[] d,int left,int right,Comparator<T> comp){  for (int i=left + 1, j; i <= right; i++) {    T t=d[i];    for (j=i - 1; j >= left && comp.compare(d[j],t) > 0; j--) {      d[j + 1]=d[j];    }    d[j + 1]=t;  }}  }
class C{  protected Sector[] computeSector(DrawContext dc){  Globe globe=dc.getGlobe();  double widthInPixels=this.textBounds.getWidth();  double heightInPixels=this.textBounds.getHeight();  double heightInMeters=this.textSizeInMeters;  double widthInMeters=heightInMeters * (widthInPixels / heightInPixels);  double radius=globe.getRadius();  double heightInRadians=heightInMeters / radius;  double widthInRadians=widthInMeters / radius;  Point2D point=this.getOffset().computeOffset(widthInPixels,heightInPixels,null,null);  double metersPerPixel=heightInMeters / heightInPixels;  double dxRadians=(point.getX() * metersPerPixel) / radius;  double dyRadians=(point.getY() * metersPerPixel) / radius;  double minLat=this.location.latitude.addRadians(dyRadians).degrees;  double maxLat=this.location.latitude.addRadians(dyRadians + heightInRadians).degrees;  double minLon=this.location.longitude.addRadians(dxRadians).degrees;  double maxLon=this.location.longitude.addRadians(dxRadians + widthInRadians).degrees;  this.drawLocation=LatLon.fromDegrees(minLat,minLon);  if (maxLon > 180) {    Sector[] sectors=new Sector[2];    sectors[0]=Sector.fromDegrees(minLat,maxLat,minLon,180);    sectors[1]=Sector.fromDegrees(minLat,maxLat,-180,maxLon - 360);    this.spansAntimeridian=true;    return sectors;  } else {    this.spansAntimeridian=false;    return new Sector[]{Sector.fromDegrees(minLat,maxLat,minLon,maxLon)};  }}  }
class C{  final boolean isOwnedBy(AbstractQueuedLongSynchronizer sync){  return sync == AbstractQueuedLongSynchronizer.this;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void openSession(String fileName) throws SQLException, SAXException, IOException, Exception {  getSession().open(fileName);}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  private void checkSetup(){  txmgr_=TransactionManagerImp.getTransactionManager();  if (txmgr_ == null)   throw new RuntimeException("Transaction Service Not Running?");}  }
class C{  protected void fireReady(){  if (listener != null) {    listener.actionPerformed(null);  }}  }
class C{  public static byte[] consistControl(int address,boolean longAddr,int consist,boolean directionNormal){  if (!addressCheck(address,longAddr)) {    return null;  } else   if (!addressCheck(consist,false)) {    return null;  }  byte[] retVal;  int arg1=0x10;  if (directionNormal) {    arg1|=0x02;  } else {    arg1|=0x03;  }  if (longAddr) {    retVal=new byte[5];    retVal[0]=(byte)(192 + ((address / 256) & 0x3F));    retVal[1]=(byte)(address & 0xFF);    retVal[2]=(byte)arg1;    retVal[3]=(byte)(consist & 0xFF);    retVal[4]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]);  } else {    retVal=new byte[4];    retVal[0]=(byte)(address & 0xFF);    retVal[1]=(byte)arg1;    retVal[2]=(byte)(consist & 0xFF);    retVal[3]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]);  }  return retVal;}  }
class C{  private void release(RealConnection connection){  for (int i=0, size=connection.allocations.size(); i < size; i++) {    Reference<StreamAllocation> reference=connection.allocations.get(i);    if (reference.get() == this) {      connection.allocations.remove(i);      return;    }  }  throw new IllegalStateException();}  }
class C{  public GrowingPassiveEntityRespawnPoint(final String type,final String itemName,final String actionName,final int maxRipeness,final int width,final int height){  super(itemName,GROWING_RATE);  init(type,actionName,maxRipeness,width,height);}  }
class C{  public boolean indexIsInFieldList(){  return indexIsInFieldList(getFormIndex());}  }
class C{  private AnimatedDrawableBackend createAnimatedDrawableBackendMock(final int frameCount){  final AnimatedDrawableBackend mockAnimatedDrawableBackend=mock(AnimatedDrawableBackend.class);  when(mockAnimatedDrawableBackend.getFrameCount()).thenReturn(frameCount);  when(mockAnimatedDrawableBackend.getWidth()).thenReturn(50);  when(mockAnimatedDrawableBackend.getHeight()).thenReturn(50);  return mockAnimatedDrawableBackend;}  }
class C{  public int next(){  int node=_currentNode;  final int nodeType=_nodeType;  final int startNodeID=_startNodeID;  if (nodeType != DTM.ELEMENT_NODE) {    while (node != NULL && node != startNodeID && _exptype2(node) != nodeType) {      node=_nextsib2(node);    }  } else {    while (node != NULL && node != startNodeID && _exptype2(node) < DTM.NTYPES) {      node=_nextsib2(node);    }  }  if (node == DTM.NULL || node == startNodeID) {    _currentNode=NULL;    return NULL;  } else {    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public boolean isProtected(){  return isProtected;}  }
class C{  public int[] keys(){  int[] keys=new int[size()];  int[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  protected void addTask(String map,TaskObject o,boolean limit){synchronized (getMap(map)) {    if (limit && getMap(map).size() == MAX_TRACKED_REQUESTS) {      String key=getMap(map).entrySet().iterator().next().getKey();      getMap(map).remove(key);    }    addTask(map,o);  }}  }
class C{  public VSELP2Message(BinaryMessage message,DataUnitID duid,AliasList aliasList){  super(message,duid,aliasList);}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  public void incClientsWithCqs(){  this._stats.incLong(_numClientsWithCqsId,1);}  }
class C{  public static java.sql.Date toSqlDate(String monthStr,String dayStr,String yearStr){  java.util.Date newDate=toDate(monthStr,dayStr,yearStr,"0","0","0");  if (newDate != null) {    return new java.sql.Date(newDate.getTime());  } else {    return null;  }}  }
class C{  public List<VariableDeclarationFragment> fragments(){  return this.variableDeclarationFragments;}  }
class C{  private boolean isFinalStage(State s){  return s.taskState.stage == TaskState.TaskStage.FINISHED || s.taskState.stage == TaskState.TaskStage.FAILED || s.taskState.stage == TaskState.TaskStage.CANCELLED;}  }
class C{  public boolean addChild(SessionNode child){  if (!this.children.contains(child)) {    child.addParent(this);    if (child.containsParent(this)) {      this.children.add(child);      return true;    }  }  return false;}  }
class C{  @Override public boolean nextKeyValue() throws IOException, InterruptedException {  if (noMoreStatements) {    return false;  }  nextStatement=statementCache.poll(timeoutSeconds,TimeUnit.SECONDS);  if (nextStatement == null) {    throw new IOException("Parser neither sending results nor signaling end of data after " + timeoutSeconds + " seconds.");  } else   if (nextStatement == DONE) {    logger.info("Reached end of parsed RDF; read " + statementCount + " statements in total.");    nextStatement=null;    noMoreStatements=true;    return false;  } else   if (nextStatement == ERROR) {    nextStatement=null;    noMoreStatements=true;    throw new IOException("Error detected processing input.",threadException);  }  statementCount++;  return true;}  }
class C{  public boolean isCollapsed(){  return m_node.isCollapsed();}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public StoredValue(){  key=this;}  }
class C{  public boolean isPaymentInfoAvailable(){  lookupConfigurationService();  return configurationService.isPaymentInfoAvailable();}  }
class C{  public boolean isRedirect(){  return isRedirect;}  }
class C{  public SortingParams desc(){  params.add(DESC.raw);  return this;}  }
class C{  public void finishSpecifying(){  if (finishedSpecifying) {    return;  }  finishedSpecifying=true;  for (  TransformTreeNode input : inputs.values()) {    if (input != null) {      input.finishSpecifying();    }  }  if (output != null) {    output.finishSpecifyingOutput();  }}  }
class C{  private void testBuildBusinessObjectDataStatusChangeMessage(List<String> subPartitionValues,String triggeredByUsername){  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataServiceTestHelper.createTestValidBusinessObjectData(subPartitionValues,NO_ATTRIBUTE_DEFINITIONS,NO_ATTRIBUTES);  BusinessObjectDataKey businessObjectDataKey=businessObjectDataHelper.getBusinessObjectDataKey(businessObjectDataEntity);  String newBusinessObjectDataStatus="testNewBusinessObjectDataStatus";  String oldBusinessObjectDataStatus="testOldBusinessObjectDataStatus";  String message=defaultSqsMessageBuilder.buildBusinessObjectDataStatusChangeMessage(businessObjectDataKey,newBusinessObjectDataStatus,oldBusinessObjectDataStatus);  businessObjectDataServiceTestHelper.validateBusinessObjectDataStatusChangeMessage(message,businessObjectDataKey,businessObjectDataEntity.getId(),triggeredByUsername,newBusinessObjectDataStatus,oldBusinessObjectDataStatus,NO_ATTRIBUTES);}  }
class C{  public int next(int nbits){  long x=seed;  x^=(x << 21);  x^=(x >>> 35);  x^=(x << 4);  seed=x;  x&=((1L << nbits) - 1);  return (int)x;}  }
class C{  public static void main(String[] args){  if (args.length != 2) {    System.out.println("Usage: ZipCat zipfile fileToPrint");  }  try (FileSystem zipFileSystem=FileSystems.newFileSystem(Paths.get(args[0]),null);InputStream input=Files.newInputStream(zipFileSystem.getPath(args[1]))){    byte[] buffer=new byte[1024];    int len;    while ((len=input.read(buffer)) != -1) {      System.out.write(buffer,0,len);    }  } catch (  IOException e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public ReadSerialDiagnosticsResponse(){  super();  setFunctionCode(Modbus.READ_SERIAL_DIAGNOSTICS);  setDataLength(4);}  }
class C{  private void commitChanges(){  try {    double floorVal=Double.parseDouble(floor.getText());    double ceilingVal=Double.parseDouble(ceiling.getText());    double decAmount=Double.parseDouble(decrementAmount.getText());    double incAmount=Double.parseDouble(incrementAmount.getText());    if (!betweenZeroAndOne("Floor",floorVal)) {      return;    }    if (!betweenZeroAndOne("Ceiling",ceilingVal)) {      return;    }    if (!betweenZeroAndOne("Decrement Amount",decAmount)) {      return;    }    if (!betweenZeroAndOne("Increment Amount",incAmount)) {      return;    }    if (hotPointCheckBox.isSelected()) {      colorManager.setHotPointMode(true);      colorManager.setHotColor(hotColor);    } else {      colorManager.setHotPointMode(false);    }    if (coloringMethod.getSelectedItem() == "None") {      colorManager.setColoringMethod("None");      colorManager.setBaseColor(baseColor);    }    if (coloringMethod.getSelectedItem() == "DecayTrail") {      colorManager.setColoringMethod("DecayTrail");      colorManager.setBaseColor(baseColor);      colorManager.setDecrementAmount(decAmount);      colorManager.setCeiling(ceilingVal);      colorManager.setFloor(floorVal);    }    if (coloringMethod.getSelectedItem() == "Frequency") {      colorManager.setColoringMethod("Frequency");      colorManager.setBaseColor(baseColor);      colorManager.setIncrementAmount(incAmount);      colorManager.setCeiling(ceilingVal);    }  } catch (  NumberFormatException nfe) {    JOptionPane.showMessageDialog(null,"Non-numeric field values:" + "\nNetwork construction failed.","Error",JOptionPane.ERROR_MESSAGE);    nfe.printStackTrace();  }}  }
class C{  public boolean isXPathPropertyExpr(){  return isXPathPropertyExpr;}  }
class C{  protected String elapsedTimeAsString(long runTime){  return NumberFormat.getInstance().format((double)runTime / 1000);}  }
class C{  public final ArrayList<Object>[] generateRules(double minConfidence,boolean noPrune){  ArrayList<Object> premises=new ArrayList<Object>();  ArrayList<Object> consequences=new ArrayList<Object>();  ArrayList<Object> conf=new ArrayList<Object>();  @SuppressWarnings("unchecked") ArrayList<Object>[] rules=new ArrayList[3];  ItemSet premise, consequence;  premise=new ItemSet(m_totalTransactions);  consequence=new ItemSet(m_totalTransactions);  int[] premiseItems=new int[m_items.length];  int[] consequenceItems=new int[1];  System.arraycopy(m_items,0,premiseItems,0,m_items.length);  consequence.setItem(consequenceItems);  premise.setItem(premiseItems);  consequence.setItemAt(m_classLabel,0);  consequence.setCounter(this.m_ruleSupCounter);  premise.setCounter(this.m_counter);  premises.add(premise);  consequences.add(consequence);  conf.add(new Double((double)this.m_ruleSupCounter / (double)this.m_counter));  rules[0]=premises;  rules[1]=consequences;  rules[2]=conf;  if (!noPrune) {    pruneRules(rules,minConfidence);  }  return rules;}  }
class C{  public boolean isForce(){  return force;}  }
class C{  public AccesskeyTimingSpecifier(TimedElement owner,boolean isBegin,float offset,String keyName){  super(owner,isBegin,offset);  this.isSVG12AccessKey=true;  this.keyName=keyName;}  }
class C{  protected void clear(){  groupList.clear();  groupPool.freeAll(usedGroups);  usedGroups.clear();}  }
class C{  public InputStream put(final URLConnection connection){  return put(connection,false);}  }
class C{  public boolean isSprog(){  if (sprogType < SPROGV4) {    return false;  }  return true;}  }
class C{  public static String[] commaDelimitedListToStringArray(String str){  return delimitedListToStringArray(str,",");}  }
class C{  public static CloseableHttpClient noAuthentication(){  return HttpClientBuilder.create().build();}  }
class C{  public boolean remove(K key,V value){  key=sanitizeKey(key);  List<V> values=map.get(key);  if (values == null) {    return false;  }  boolean success=values.remove(value);  if (values.isEmpty()) {    map.remove(key);  }  return success;}  }
class C{  public String toString(){  return "AvailableUpdateInfo(isValid=" + isValid + ", "+ "currentVersion="+ currentVersion+ ", "+ "availableVersion="+ availableVersion+ ", "+ "updateUri="+ updateUri+ ")";}  }
class C{  public boolean remove(long val){  int index=index(val);  if (index >= 0) {    removeAt(index);    return true;  }  return false;}  }
class C{  @Override public Long zrem(final byte[] key,final byte[]... members){  checkIsInMultiOrPipeline();  client.zrem(key,members);  return client.getIntegerReply();}  }
class C{  public void removeChild(Context context){  invoke(hostRemoveChild,context);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.RESEQUENCER__STREAM_SEQUENCES:    return isStreamSequences();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void removeSignalMastLogic(SignalMastLogic sml,SignalMast dest){  if (sml.removeDestination(dest)) {    removeSignalMastLogic(sml);  }}  }
class C{  @Override protected String decode(String textToDecode){  if (textToDecode == null)   return null;  this.isUnresolved=false;  Pattern p=Pattern.compile("\\$\\[(.*?)\\]");  Matcher m=p.matcher(textToDecode);  StringBuffer sb=new StringBuffer();  while (m.find()) {    String entity=m.group(1);    String r=this.entityCache.get(entity);    if (r == null) {      r=this.resolveEntityReference(entity);      if (r != null) {        this.entityCache.put(entity,r);        this.lastUpdateTime=System.currentTimeMillis();      }    }    m.appendReplacement(sb,Matcher.quoteReplacement(r != null ? r : ""));  }  m.appendTail(sb);  return sb.toString();}  }
class C{  protected synchronized void releaseConnectionHandler(PooledConnectionHandler pch){  if (handler == pch) {    handler=null;  }}  }
class C{  public static boolean isUrlString(String s){  return s.startsWith("http:/") || s.startsWith("ftp:/") || s.startsWith("file:/");}  }
class C{  public Collection<String> listTables() throws DatabaseException {  ArrayList<String> list=new ArrayList<String>();  list.add("MB_BAUST");  list.add("MB_DRINGLICHKEIT");  list.add("MB_DRINGLICHKEIT_TXT");  list.add("MB_MASSN");  list.add("MB_ROLLE_TXT");  list.add("MB_SCHICHT");  list.add("MB_STATUS");  list.add("M_BSTN_STATUS");  list.add("MB_ZEITEINHEITEN_TXT");  list.add("MB_ZIELOBJ_SUBTYP");  list.add("MB_ZIELOBJ_SUBTYP_TXT");  list.add("MB_ZIELOBJ_TYP");  list.add("MB_ZIELOBJ_TYP_TXT");  list.add("M_GSIEGEL");  list.add("M_METASTATUS");  list.add("M_METATYP");  list.add("MOD_ZOBJ_BST");  list.add("MOD_ZOBJ_BST_MASS");  list.add("MOD_ZOBJ_BST_MASS_MITARB");  list.add("MOD_ZOBJ_BST_MITARB");  list.add("M_SCHUTZBEDARFKATEG_TXT");  list.add("MS_CM_STATE");  list.add("M_UMSETZ_STAT");  list.add("M_UMSETZ_STAT_TXT");  list.add("M_YESNO");  list.add("NMB_NOTIZ");  list.add("N_ZIELOBJEKT");  list.add("N_ZIELOBJEKT_ROLLEN");  list.add("N_ZIELOBJ_ZIELOBJ");  list.add("N_ZOB_SB");  list.add("SYS_IMPORT");  return list;}  }
class C{  protected StdSerializerProvider createInstance(SerializationConfig config,SerializerFactory jsf){  return new StdSerializerProvider(config,this,jsf);}  }
class C{  public void close() throws IOException {  if (connection != null) {    connection.disconnect();  }}  }
class C{  private boolean hasLoop(int parentCategoryId,Vector<SimpleTreeNode> categories,int loopIndicatorId){  final Iterator<SimpleTreeNode> iter=categories.iterator();  boolean ret=false;  while (iter.hasNext()) {    SimpleTreeNode node=(SimpleTreeNode)iter.next();    if (node.getNodeId() == parentCategoryId) {      if (node.getParentId() == 0) {        return false;      }      if (node.getNodeId() == loopIndicatorId) {        return true;      }      ret=hasLoop(node.getParentId(),categories,loopIndicatorId);    }  }  return ret;}  }
class C{  private void enforceCheckConstraints(){  resetDBObjects(DBObject_Check.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"enforceCheckConstraints",new Object[]{m_objectTypes,m_direction});  m_counterUpd=new Integer(0);  m_totalUpd=new Integer(0);  String vendorName=m_target.getVendor();  String catalogName=m_target.getCatalog();  String schemaName=m_target.getSchema();  if (m_sourceMap != null && m_sourceMap.size() > 0) {    for (Iterator<String> it=m_sourceMap.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      DBObject sourceObj=m_sourceMap.get(key);      HashMap<Integer,DBObjectDefinition> sourceRules=sourceObj.getContents();      for (Iterator<Integer> itr=sourceRules.keySet().iterator(); itr.hasNext(); ) {        Integer rule=itr.next();        DBObject_Check_Rule sourceRule=(DBObject_Check_Rule)sourceRules.get(rule);        String tableName=sourceRule.getTable();        String checkExpression=sourceRule.getCheckClause();        String sqlCommand=s_dbEngine.sqlAction_enforceCheckConstraints(vendorName,catalogName,schemaName,tableName,checkExpression);        if (sqlCommand != null) {          Statement stmt=m_target.setStatement();          Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,true,false);          if (sqlResult != null) {            logUpdateDetail(sqlResult,null);            m_counterUpd=new Integer(m_counterUpd.intValue() + 1);            if (sqlResult > 0) {              s_logger.log(Level.WARNING,"checkEnforced",new Object[]{sqlResult,tableName,checkExpression});            }          }          m_target.releaseStatement(stmt);          m_totalUpd=new Integer(m_totalUpd.intValue() + 1);        }      }    }  }  if (m_targetMap != null && m_targetMap.size() > 0) {    for (Iterator<String> it=m_targetMap.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      DBObject targetObj=m_targetMap.get(key);      if (targetObj.getCustomizationLevel() > s_parameters.CUSTOMNONE) {        HashMap<Integer,DBObjectDefinition> targetRules=targetObj.getContents();        for (Iterator<Integer> itr=targetRules.keySet().iterator(); itr.hasNext(); ) {          Integer rule=itr.next();          DBObject_Check_Rule targetRule=(DBObject_Check_Rule)targetRules.get(rule);          String tableName=targetRule.getTable();          String checkExpression=targetRule.getCheckClause();          String sqlCommand=s_dbEngine.sqlAction_enforceCheckConstraints(vendorName,catalogName,schemaName,tableName,checkExpression);          if (sqlCommand != null) {            Statement stmt=m_target.setStatement();            Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,true,false);            if (sqlResult != null) {              logUpdateDetail(sqlResult,null);              m_counterUpd=new Integer(m_counterUpd.intValue() + 1);              if (sqlResult > 0) {                s_logger.log(Level.WARNING,"checkEnforced",new Object[]{sqlResult,tableName,checkExpression});              }            }            m_target.releaseStatement(stmt);            m_totalUpd=new Integer(m_totalUpd.intValue() + 1);          }        }      }    }  }  logResults();}  }
class C{  public void updateBackgroundWithDelay(){  mBackgroundURI=null;  startBackgroundTimer();}  }
class C{  public boolean isAutounique_1(){  return autounique_1;}  }
class C{  private synchronized void log(int logType,String msg,Object... args){  if (settings.getLogLevel() == LogLevel.NONE) {    return;  }  String tag=getTag();  String message=createMessage(msg,args);  int methodCount=getMethodCount();  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes(StandardCharsets.UTF_8);  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count,StandardCharsets.UTF_8));  }  logBottomBorder(logType,tag);}  }
class C{  public BlockArrayClipboard(Region region,UUID clipboardId){  checkNotNull(region);  this.region=region.clone();  this.size=getDimensions();  this.IMP=Settings.CLIPBOARD.USE_DISK ? new DiskOptimizedClipboard(size.getBlockX(),size.getBlockY(),size.getBlockZ(),clipboardId) : new MemoryOptimizedClipboard(size.getBlockX(),size.getBlockY(),size.getBlockZ());  this.origin=region.getMinimumPoint();  this.mx=origin.getBlockX();  this.my=origin.getBlockY();  this.mz=origin.getBlockZ();}  }
class C{  @SuppressWarnings("unused") @Test public void testParentExitExclusionForSiblingTransitions(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);{        _createExitAssignment(v1,s1,1);        Region r_s1=_createRegion("r",s1);{          State s3=_createState("s3",r_s1);{            _createExitAssignment(v1,s3,2);            Region r_s3=_createRegion("r",s3);{              State s4=_createState("s4",r_s3);              _createExitAssignment(v1,s4,3);              State s5=_createState("s5",r_s3);            }          }        }      }      State s2=_createState("s2",r);{        Region r_s1=_createRegion("r",s2);{          _createState("s6",r_s1);        }      }    }  }  _createTransition(findState(sc,"s4"),findState(sc,"s5"));  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  assertNotNull(_s1.getExitAction());  ExecutionState _s3=flow.getStates().get(1);  assertEquals("sc.r.s1.r.s3",_s3.getName());  assertNotNull(_s3.getExitAction());  ExecutionState _s4=flow.getStates().get(2);  assertEquals("sc.r.s1.r.s3.r.s4",_s4.getName());  assertNotNull(_s4.getExitAction());  Reaction _t=_s4.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertSequenceSize(2,_effect);  assertCall(_effect,0,_s4.getExitSequence());}  }
class C{  protected void createActions(){  super.createActions();  IAction a=new TextOperationAction(TLAEditorMessages.getResourceBundle(),"ContentAssistProposal.",this,ISourceViewer.CONTENTASSIST_PROPOSALS);  a.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);  setAction("ContentAssistProposal",a);  a=new TextOperationAction(TLAEditorMessages.getResourceBundle(),"ContentAssistTip.",this,ISourceViewer.CONTENTASSIST_CONTEXT_INFORMATION);  a.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_CONTEXT_INFORMATION);  setAction("ContentAssistTip",a);  a=new ToggleCommentAction(TLAEditorMessages.getResourceBundle(),"ToggleComment.",this);  a.setActionDefinitionId(TLAEditorActivator.PLUGIN_ID + ".ToggleCommentAction");  setAction("ToggleComment",a);  markAsStateDependentAction("ToggleComment",true);  markAsSelectionDependentAction("ToggleComment",true);  ((ToggleCommentAction)a).configure(getSourceViewer(),getSourceViewerConfiguration());  if (getSourceViewerConfiguration().getContentFormatter(getSourceViewer()) != null) {    a=new TextOperationAction(TLAEditorMessages.getResourceBundle(),"Format.",this,ISourceViewer.FORMAT);    a.setActionDefinitionId(TLAEditorActivator.PLUGIN_ID + ".FormatAction");    setAction("Format",a);    markAsStateDependentAction("Format",true);    markAsSelectionDependentAction("Format",true);  }}  }
class C{  public XMLString fixWhiteSpace(boolean trimHead,boolean trimTail,boolean doublePunctuationSpaces){  int len=this.length();  char[] buf=new char[len];  this.getChars(0,len,buf,0);  boolean edit=false;  int s;  for (s=0; s < len; s++) {    if (isSpace(buf[s])) {      break;    }  }  int d=s;  boolean pres=false;  for (; s < len; s++) {    char c=buf[s];    if (isSpace(c)) {      if (!pres) {        if (' ' != c) {          edit=true;        }        buf[d++]=' ';        if (doublePunctuationSpaces && (s != 0)) {          char prevChar=buf[s - 1];          if (!((prevChar == '.') || (prevChar == '!') || (prevChar == '?'))) {            pres=true;          }        } else {          pres=true;        }      } else {        edit=true;        pres=true;      }    } else {      buf[d++]=c;      pres=false;    }  }  if (trimTail && 1 <= d && ' ' == buf[d - 1]) {    edit=true;    d--;  }  int start=0;  if (trimHead && 0 < d && ' ' == buf[0]) {    edit=true;    start++;  }  XMLStringFactory xsf=XMLStringFactoryImpl.getFactory();  return edit ? xsf.newstr(new String(buf,start,d - start)) : this;}  }
class C{  public boolean isDhcpConfigurationEnabled(){  return dhcpConfigurationEnabled;}  }
class C{  public void checkConsistency() throws SailException, IOException {  int maxID=dataStore.getMaxID();  for (int id=1; id <= maxID; id++) {    byte[] data=dataStore.getData(id);    if (isNamespaceData(data)) {      String namespace=data2namespace(data);      try {        if (id == getNamespaceID(namespace,false) && java.net.URI.create(namespace + "part").isAbsolute()) {          continue;        }      } catch (      IllegalArgumentException e) {      }      throw new SailException("Store must be manually exported and imported to fix namespaces like " + namespace);    } else {      Value value=this.data2value(id,data);      if (id != this.getID(copy(value))) {        throw new SailException("Store must be manually exported and imported to merge values like " + value);      }    }  }}  }
class C{  public Object next() throws IOException, InterruptedException {  long pos=fis.position();synchronized (HdfsTransactionLog.this) {    if (trace) {      log.trace("Reading log record.  pos=" + pos + " currentSize="+ getLogSize());    }    if (pos >= getLogSize()) {      return null;    }  }  if (pos >= sz) {    log.info("Read available inputstream data, opening new inputstream pos={} sz={}",pos,sz);    fis.close();    initStream(pos);  }  if (pos == 0) {    readHeader(fis);synchronized (HdfsTransactionLog.this) {      if (fis.position() >= getLogSize()) {        return null;      }      pos=fis.position();    }  }  Object o=codec.readVal(fis);  int size=fis.readInt();  assert size == fis.position() - pos - 4;  return o;}  }
class C{  public static CompiledMethod baselineCompile(ExecutionState state){  NormalMethod method=state.getMethod();  if (VM.TraceOnStackReplacement) {    VM.sysWriteln("BASE : starts compiling " + method);  }  byte[] prologue=state.generatePrologue();  if (VM.TraceOnStackReplacement) {    VM.sysWriteln("prologue length " + prologue.length);  }  method.setForOsrSpecialization(prologue,state.getMaxStackHeight());  CompiledMethod newCompiledMethod;  if (VM.BuildForIA32) {    newCompiledMethod=org.jikesrvm.compilers.baseline.ia32.BaselineCompilerImpl.compile(method);  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerPC);    newCompiledMethod=org.jikesrvm.compilers.baseline.ppc.BaselineCompilerImpl.compile(method);  }  newCompiledMethod.setSpecialForOSR();  if (VM.TraceOnStackReplacement) {    VM.sysWriteln("BASE : done, CMID 0x" + Integer.toHexString(newCompiledMethod.getId()) + "("+ newCompiledMethod.getId()+ ") JTOC offset "+ Services.addressAsHexString(newCompiledMethod.getOsrJTOCoffset().toWord().toAddress()));  }  return newCompiledMethod;}  }
class C{  protected LiteralAnnotationArgumentImpl(){  super();}  }
class C{  public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){  Random random=new Random();  Cache.Entry entry=new Cache.Entry();  if (data != null) {    entry.data=data;  } else {    entry.data=new byte[random.nextInt(1024)];  }  entry.etag=String.valueOf(random.nextLong());  entry.lastModified=random.nextLong();  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;  return entry;}  }
class C{  public DeviceAutomator checkForegroundAppIs(String packageName,long timeout){  mDevice.wait(Until.hasObject(By.pkg(packageName).depth(0)),5000);  assertTrue(mDevice.hasObject(By.pkg(packageName).depth(0)));  return this;}  }
class C{  public void onCollideWithPlayer(EntityPlayer p_70100_1_){}  }
class C{  public XMLString trim(){  return fixWhiteSpace(true,true,false);}  }
class C{  protected LiteralImpl(){  super();}  }
class C{  public AttributeModifierBuilder copy(final AttributeModifier modifier){  this.uuid=modifier.getUuid();  this.name=modifier.getName().orElse(null);  this.value=modifier.getValue();  this.operation=modifier.getOperation();  this.slot=modifier.getModifierSlot();  this.type=modifier.getType().orElse(null);  return this;}  }
class C{  private void refreshMetadata() throws Exception {  IdmAccessor accessor=this.factory.getIdmAccessor();  Collection<String> tenants=accessor.getAllTenants();  metadataSettings.StartRebuilding();  try {    metadataSettings.clear();    for (    String tenant : tenants) {      accessor.setTenant(tenant);      Collection<IDPConfig> IdpConfigs=accessor.getExternalIdps();      if (null == IdpConfigs || IdpConfigs.isEmpty()) {        break;      }      for (      IDPConfig idpConfig : IdpConfigs) {        IDPConfiguration clientLibIdpConfiguration=SamlServiceImpl.generateIDPConfiguration(idpConfig);        metadataSettings.addIDPConfiguration(clientLibIdpConfiguration);      }      SPConfiguration spConfig=SamlServiceImpl.generateSPConfiguration(accessor);      metadataSettings.addSPConfiguration(spConfig);    }  }  finally {    metadataSettings.EndRebuilding();  }}  }
class C{  private synchronized void updateResults(){  if (mDatabaseUpdated) {    return;  }  final SQLiteDatabase database=mMusicDatabase.getWritableDatabase();  database.beginTransaction();  int oldestWeekWeCareAbout=mNumberOfWeeksSinceEpoch - NUM_WEEKS + 1;  database.delete(SongPlayCountColumns.NAME,SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX + " < " + oldestWeekWeCareAbout,null);  Cursor cursor=database.query(SongPlayCountColumns.NAME,new String[]{SongPlayCountColumns.ID},null,null,null,null,null);  if (cursor != null && cursor.moveToFirst()) {    do {      updateExistingRow(database,cursor.getLong(0),false);    } while (cursor.moveToNext());    cursor.close();    cursor=null;  }  mDatabaseUpdated=true;  database.setTransactionSuccessful();  database.endTransaction();}  }
class C{  public static BufferedImage convertToARGB(BufferedImage image){  if (image.getType() != BufferedImage.TYPE_INT_ARGB) {    try {      final BufferedImage raw_image=image;      image=new BufferedImage(raw_image.getWidth(),raw_image.getHeight(),BufferedImage.TYPE_INT_ARGB);      final ColorConvertOp xformOp=new ColorConvertOp(null);      xformOp.filter(raw_image,image);    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " creating argb image");    }  }  isUsingARGB=true;  return image;}  }
class C{  public static int len(String list,String delimiter,boolean ignoreEmpty){  if (delimiter.length() == 1)   return len(list,delimiter.charAt(0),ignoreEmpty);  char[] del=delimiter.toCharArray();  int len=StringUtil.length(list);  if (len == 0)   return 0;  int count=0;  int last=0;  char c;  for (int i=0; i < len; i++) {    c=list.charAt(i);    for (int y=0; y < del.length; y++) {      if (c == del[y]) {        if (!ignoreEmpty || last < i)         count++;        last=i + 1;        break;      }    }  }  if (!ignoreEmpty || last < len)   count++;  return count;}  }
class C{  public void readMessage(final MessageLite.Builder builder,final ExtensionRegistryLite extensionRegistry) throws IOException {  final int length=readRawVarint32();  if (recursionDepth >= recursionLimit) {    throw InvalidProtocolBufferException.recursionLimitExceeded();  }  final int oldLimit=pushLimit(length);  ++recursionDepth;  builder.mergeFrom(this,extensionRegistry);  checkLastTagWas(0);  --recursionDepth;  popLimit(oldLimit);}  }
class C{  public void start(ClassPool pool) throws NotFoundException {  classPool=pool;  final String msg="javassist.tools.reflect.Sample is not found or broken.";  try {    CtClass c=classPool.get("javassist.tools.reflect.Sample");    rebuildClassFile(c.getClassFile());    trapMethod=c.getDeclaredMethod("trap");    trapStaticMethod=c.getDeclaredMethod("trapStatic");    trapRead=c.getDeclaredMethod("trapRead");    trapWrite=c.getDeclaredMethod("trapWrite");    readParam=new CtClass[]{classPool.get("java.lang.Object")};  } catch (  NotFoundException e) {    throw new RuntimeException(msg);  }catch (  BadBytecode e) {    throw new RuntimeException(msg);  }}  }
class C{  public PackedColorModel(ColorSpace space,int bits,int[] colorMaskArray,int alphaMask,boolean isAlphaPremultiplied,int trans,int transferType){  super(bits,PackedColorModel.createBitsArray(colorMaskArray,alphaMask),space,(alphaMask == 0 ? false : true),isAlphaPremultiplied,trans,transferType);  if (bits < 1 || bits > 32) {    throw new IllegalArgumentException("Number of bits must be between" + " 1 and 32.");  }  maskArray=new int[numComponents];  maskOffsets=new int[numComponents];  scaleFactors=new float[numComponents];  for (int i=0; i < numColorComponents; i++) {    DecomposeMask(colorMaskArray[i],i,space.getName(i));  }  if (alphaMask != 0) {    DecomposeMask(alphaMask,numColorComponents,"alpha");    if (nBits[numComponents - 1] == 1) {      transparency=Transparency.BITMASK;    }  }}  }
class C{  public void addRS(RollingStock rs){  setNumberRS(getNumberRS() + 1);  if (rs.getClass() == Car.class) {    setNumberCars(getNumberCars() + 1);  } else   if (rs.getClass() == Engine.class) {    setNumberEngines(getNumberEngines() + 1);  }  setUsedLength(getUsedLength() + rs.getTotalLength());}  }
class C{  public ViewXmlITCase(String name){  super(name);}  }
class C{  public static IStatus validateMethodName(String name,String sourceLevel,String complianceLevel){  return validateIdentifier(name,sourceLevel,complianceLevel);}  }
class C{  public void draw(Object object,Graphics2D graphics,DrawInfo2D info){  hitOrDraw(graphics,info,null);}  }
class C{  public static void d(String tag,String msg){  log(LEVEL.DEBUG,tag,msg,null);}  }
class C{  private static XLabel createTitleLabel(final String text,final Icon icon){  return new XLabel(text,icon).boldFont().leftBorder(15);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void tearDown(){}  }
class C{  public XBeeConfiguration withNoRequestResponseQueueFilter(){  this.responseQueueFilter=this.noRequestResponseQueueFilter;  return this;}  }
class C{  @Override public String toString(){  StringBuffer buff=new StringBuffer("StunMessageEvent:\n\tMessage=");  buff.append(getMessage());  buff.append(" remoteAddr=").append(getRemoteAddress());  buff.append(" localAddr=").append(getLocalAddress());  return buff.toString();}  }
class C{  public LeaseExpiredException(String s){  super(s);}  }
class C{  public ServiceHost startFactory(Class<? extends Service> instServiceClass,Supplier<FactoryService> factoryCreator){  URI factoryUri=UriUtils.buildFactoryUri(this,instServiceClass);  return startFactory(factoryCreator,factoryUri.getPath());}  }
class C{  public SymmetricDoubleMatrix(int n){  mNumRows=n;  mValues=new double[n][];  for (int i=0; i < n; i++) {    mValues[i]=new double[i + 1];  }}  }
class C{  static private byte[] toBytes(ASN1OctetString[] octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.length; i++) {    try {      DEROctetString o=(DEROctetString)octs[i];      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs[i].getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  static VirtualElementHolder of(Path path){  if (path == null) {    return null;  }  ElementAdapter adapter=PathAdapter.elementAdapter(path);  return new VirtualElementHolder(adapter,adapter);}  }
