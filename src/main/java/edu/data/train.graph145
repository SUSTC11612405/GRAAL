class C{  public void debug(){  System.out.println("neuron " + id);  System.out.println("fan in");  for (int i=0; i < fanIn.size(); i++) {    Synapse tempRef=fanIn.get(i);    System.out.println("fanIn [" + i + "]:"+ tempRef);  }  System.out.println("fan out");  for (int i=0; i < fanOut.size(); i++) {    Synapse tempRef=fanOut.get(i);    System.out.println("fanOut [" + i + "]:"+ tempRef);  }}  }
class C{  public Cursor query(Query query){  Cursor underlyingCursor=query.runQuery(mResolver,UNDERLYING_COLUMNS,mBaseUri);  if (underlyingCursor == null) {    return null;  }  return new CursorTranslator(underlyingCursor,mBaseUri);}  }
class C{  public void add(IconPartCollectionEntry entry){  if (entry != null) {    String entryName=entry.getName();    if (entryName != null) {      getEntryMap().put(entryName.intern(),entry);    }    if (entry instanceof IconPartCollection) {      getCollections().add((IconPartCollection)entry);    }  }}  }
class C{  public boolean checkServiceAvailable(String servicePath){  Service s=this.findService(servicePath,true);  if (s == null) {    return false;  }  return s.getProcessingStage() == ProcessingStage.AVAILABLE;}  }
class C{  ByteToCharWriter(){}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    Key privKey=keyStore.getKey(alias,password.toCharArray());    X509Certificate[] certChain=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(keyStore.getCertificateChain(alias)));    if (certChain.length == 1) {      JOptionPane.showMessageDialog(frame,res.getString("RemoveFromCertificateChainAction.CannotRemoveOnlyCert.message"),res.getString("RemoveFromCertificateChainAction.RemoveFromCertificateChain.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    X509Certificate[] newCertChain=new X509Certificate[certChain.length - 1];    System.arraycopy(certChain,0,newCertChain,0,newCertChain.length);    keyStore.deleteEntry(alias);    keyStore.setKeyEntry(alias,privKey,password.toCharArray(),newCertChain);    currentState.append(newState);    kseFrame.updateControls(true);    JOptionPane.showMessageDialog(frame,res.getString("RemoveFromCertificateChainAction.RemoveFromCertificateChainSuccessful.message"),res.getString("RemoveFromCertificateChainAction.RemoveFromCertificateChain.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  @Override public void draw(GL2 gl){  super.fill(gl);}  }
class C{  @Override protected void onRemoveChannelLimit(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_remove_channel_limit,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public static byte combine2bytesToOne(byte high,byte low){  if (high < 0 || high > 0xf || low < 0 || low > 0xf) {    throw new RuntimeException("Out of Boundary");  }  return (byte)(high << 4 | low);}  }
class C{  public void openTutorialGuide(){  workspaceAgent.openPart(guidePage,PartStackType.EDITING);}  }
class C{  public void testSearchablesListReal(){  MyMockPackageManager mockPM=new MyMockPackageManager(mContext.getPackageManager());  MyMockContext mockContext=new MyMockContext(mContext,mockPM);  mockPM.setSearchablesMode(MyMockPackageManager.SEARCHABLES_PASSTHROUGH);  Searchables searchables=new Searchables(mockContext,0);  searchables.buildSearchableList();  ArrayList<SearchableInfo> searchablesList=searchables.getSearchablesList();  int count=searchablesList.size();  assertTrue(count >= 1);  checkSearchables(searchablesList);  ArrayList<SearchableInfo> global=searchables.getSearchablesInGlobalSearchList();  checkSearchables(global);}  }
class C{  protected FunctionBlockAttributeSourceImpl(){  super();}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty())   retval.append(COMMA + this.parameters.encode());  return retval.toString();}  }
class C{  public static void populateTradeOrderfill(com.ib.client.Execution execution,TradeOrderfill tradeOrderfill) throws ParseException, IOException {  ZonedDateTime date=TradingCalendar.getZonedDateTimeFromDateTimeString(execution.m_time.replaceAll("\\s",""),"yyyyMMddHH:mm:ss",TradingCalendar.LOCAL_TIMEZONE);  tradeOrderfill.setTime(date);  tradeOrderfill.setExchange(execution.m_exchange);  tradeOrderfill.setSide(execution.m_side);  tradeOrderfill.setQuantity(execution.m_shares);  tradeOrderfill.setPrice(new BigDecimal(execution.m_price));  tradeOrderfill.setAveragePrice(new BigDecimal(execution.m_avgPrice));  tradeOrderfill.setAccountNumber(execution.m_acctNumber);  tradeOrderfill.setCumulativeQuantity(execution.m_cumQty);  tradeOrderfill.setExecId(execution.m_execId);  tradeOrderfill.setOrderReference(execution.m_orderRef);  tradeOrderfill.setPermId(execution.m_permId);}  }
class C{  public Double convertWalkDistanceToWalkTime(double walkDistance){  Double walkTime=null;switch (studyAreaCode) {case 1:    double a=5.858772e-01;  double b=1.070014e-02;double c=-1.464301e-06;double d=2.694900e-09;double wt=a + b * walkDistance + c * Math.pow(walkDistance,2) + d * Math.pow(walkDistance,3);walkTime=wt * 60;break;default :break;}return walkTime;}  }
class C{  public long update(long eventLogicalTime,long eventLogicalCounter){  long physicalTime=physicalTimeProvider.getPhysicalTime();  if (compare(physicalTime,eventLogicalTime) > 0 && compare(physicalTime,logicalTime) > 0) {    logicalTime=physicalTime;    logicalCounter=0;  } else   if (compare(eventLogicalTime,logicalTime) > 0) {    logicalTime=eventLogicalTime;    logicalCounter++;  } else   if (compare(logicalTime,eventLogicalTime) > 0) {    logicalCounter++;  } else {    if (eventLogicalCounter > logicalCounter) {      logicalCounter=eventLogicalCounter;    }    logicalCounter++;  }  return timestamp();}  }
class C{  public void addListener(final IDebuggerChooserPanelListener listener){  m_listeners.addListener(listener);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.rxMapOneTV=(TextView)this.findViewById(R.id.rx_map_one_tv);  this.rxMapTwoTV=(TextView)this.findViewById(R.id.rx_map_two_tv);  this.rxFlatMapThrTV=(TextView)this.findViewById(R.id.rx_map_thr_tv);  this.rxLiftFouTV=(TextView)this.findViewById(R.id.rx_map_fou_tv);}  }
class C{  public void createMonthScenarioParAndUserAssignChange2() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-04 12:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHARGE_PU_MONTH_ASSIGN2",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"USER");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PARCHARGE_PU_MONTH_ASSIGN2",serviceDetails,basicSetup.getCustomerUser1(),role);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-11 12:00:00"),"MAX_FOLDER_NUMBER","4");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-13 06:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getCustomerUser1(),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-22 00:00:00"),"MAX_FOLDER_NUMBER","88");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-23 18:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"GUEST"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-25 12:00:00");  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHARGE_PU_MONTH_ASSIGN2",subDetails);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private VideoStorageUtils(){  throw new AssertionError();}  }
class C{  private static boolean parse(XMLTokener x,JSONObject context,String name) throws JSONException {  char c;  int i;  JSONObject jsonobject=null;  String string;  String tagName;  Object token;  token=x.nextToken();  if (token == BANG) {    c=x.next();    if (c == '-') {      if (x.next() == '-') {        x.skipPast("-->");        return false;      }      x.back();    } else     if (c == '[') {      token=x.nextToken();      if ("CDATA".equals(token)) {        if (x.next() == '[') {          string=x.nextCDATA();          if (string.length() > 0) {            context.accumulate("content",string);          }          return false;        }      }      throw x.syntaxError("Expected 'CDATA['");    }    i=1;    do {      token=x.nextMeta();      if (token == null) {        throw x.syntaxError("Missing '>' after '<!'.");      } else       if (token == LT) {        i+=1;      } else       if (token == GT) {        i-=1;      }    } while (i > 0);    return false;  } else   if (token == QUEST) {    x.skipPast("?>");    return false;  } else   if (token == SLASH) {    token=x.nextToken();    if (name == null) {      throw x.syntaxError("Mismatched close tag " + token);    }    if (!token.equals(name)) {      throw x.syntaxError("Mismatched " + name + " and "+ token);    }    if (x.nextToken() != GT) {      throw x.syntaxError("Misshaped close tag");    }    return true;  } else   if (token instanceof Character) {    throw x.syntaxError("Misshaped tag");  } else {    tagName=(String)token;    token=null;    jsonobject=new JSONObject();    for (; ; ) {      if (token == null) {        token=x.nextToken();      }      if (token instanceof String) {        string=(String)token;        token=x.nextToken();        if (token == EQ) {          token=x.nextToken();          if (!(token instanceof String)) {            throw x.syntaxError("Missing value");          }          jsonobject.accumulate(string,XML.stringToValue((String)token));          token=null;        } else {          jsonobject.accumulate(string,"");        }      } else       if (token == SLASH) {        if (x.nextToken() != GT) {          throw x.syntaxError("Misshaped tag");        }        if (jsonobject.length() > 0) {          context.accumulate(tagName,jsonobject);        } else {          context.accumulate(tagName,"");        }        return false;      } else       if (token == GT) {        for (; ; ) {          token=x.nextContent();          if (token == null) {            if (tagName != null) {              throw x.syntaxError("Unclosed tag " + tagName);            }            return false;          } else           if (token instanceof String) {            string=(String)token;            if (string.length() > 0) {              jsonobject.accumulate("content",XML.stringToValue(string));            }          } else           if (token == LT) {            if (parse(x,jsonobject,tagName)) {              if (jsonobject.length() == 0) {                context.accumulate(tagName,"");              } else               if (jsonobject.length() == 1 && jsonobject.opt("content") != null) {                context.accumulate(tagName,jsonobject.opt("content"));              } else {                context.accumulate(tagName,jsonobject);              }              return false;            }          }        }      } else {        throw x.syntaxError("Misshaped tag");      }    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.TRACE;}  }
class C{  protected final void doBracketMatching(){  if (match != null) {    repaint(match);  }  int pos=RSyntaxUtilities.getMatchingBracketPosition(this);  if (pos > -1 && pos != lastBracketMatchPos) {    try {      match=modelToView(pos);      if (match != null) {        if (getAnimateBracketMatching()) {          bracketRepaintTimer.restart();        }        repaint(match);      }    } catch (    BadLocationException ble) {      ble.printStackTrace();    }  } else   if (pos == -1) {    match=null;    bracketRepaintTimer.stop();  }  lastBracketMatchPos=pos;}  }
class C{  public int size(){  return 0;}  }
class C{  public static int validateCompilationUnits(FileSpec fileSpec,SourceList sourceList,SourcePath sourcePath,ResourceBundlePath bundlePath,ResourceContainer resources,CompilerSwcContext swcContext,ContextStatics perCompileData,Configuration configuration){  return validateCompilationUnits(fileSpec,sourceList,sourcePath,bundlePath,resources,swcContext,null,perCompileData,configuration);}  }
class C{  void readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {  XmlFile xf=new XmlFile(){  };  xf.rootFromFile(file);}  }
class C{  public T multiple(String value){  return attr("multiple",value);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected void createLabels(){  String text=this.getGraphicLabel();  this.addLabel(text);  this.addLabel(text);}  }
class C{  public TIFFDirectory(SeekableStream stream,long ifd_offset,int directory) throws IOException {  long global_save_offset=stream.getFilePointer();  stream.seek(0L);  int endian=stream.readUnsignedShort();  if (!isValidEndianTag(endian)) {    throw new IllegalArgumentException("TIFFDirectory1");  }  isBigEndian=(endian == 0x4d4d);  stream.seek(ifd_offset);  int dirNum=0;  while (dirNum < directory) {    long numEntries=readUnsignedShort(stream);    stream.seek(ifd_offset + 12 * numEntries);    ifd_offset=readUnsignedInt(stream);    stream.seek(ifd_offset);    dirNum++;  }  initialize(stream);  stream.seek(global_save_offset);}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  private void handleExceptionalStatus(State state,InnerState innerState,HttpResponse response) throws StopRequest, RetryDownload {  int statusCode=response.getStatusLine().getStatusCode();  if (statusCode == 503 && mInfo.mNumFailed < Constants.MAX_RETRIES) {    handleServiceUnavailable(state,response);  }  if (statusCode == 301 || statusCode == 302 || statusCode == 303 || statusCode == 307) {    handleRedirect(state,response,statusCode);  }  int expectedStatus=innerState.mContinuingDownload ? 206 : DownloaderService.STATUS_SUCCESS;  if (statusCode != expectedStatus) {    handleOtherStatus(state,innerState,statusCode);  } else {    state.mRedirectCount=0;  }}  }
class C{  public int connectTimeoutMillis(){  return connectTimeout;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.DOCLET__LINE_TAGS:    return getLineTags();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String toXML(final Object obj){  final Writer writer=new StringWriter();  toXML(obj,writer);  return writer.toString();}  }
class C{  public Object nextElement(){  return nextToken();}  }
class C{  public JCExpression QualIdent(Symbol sym){  return isUnqualifiable(sym) ? Ident(sym) : Select(QualIdent(sym.owner),sym);}  }
class C{  private void fillScrollBarButtonInteriorColors(Graphics2D g,Shape s,boolean isIncrease,boolean buttonsTogether){  g.setPaint(getScrollBarButtonBackgroundPaint(s,isIncrease,buttonsTogether));  g.fill(s);  int width=s.getBounds().width;  g.setPaint(getScrollBarButtonLinePaint());  g.drawLine(0,0,width - 1,0);  if (state != Which.FOREGROUND_CAP && buttonsTogether) {    int height=s.getBounds().height;    g.setPaint(getScrollBarButtonDividerPaint(isIncrease));    g.drawLine(width - 1,1,width - 1,height - 1);  }}  }
class C{  @VisibleForTesting boolean isVisibleOnRepository(PrnfbButton button,Repository repository){  boolean projectOk=false;  boolean repoOk=false;  do {    if (button.getProjectKey().isPresent()) {      projectOk|=button.getProjectKey().get().equals(repository.getProject().getKey());    } else {      projectOk=true;    }    if (button.getRepositorySlug().isPresent()) {      repoOk|=button.getRepositorySlug().get().equals(repository.getSlug());    } else {      repoOk=true;    }  } while (!(projectOk && repoOk) && (repository=repository.getOrigin()) != null);  return projectOk && repoOk;}  }
class C{  public void testMultivariateMIforDependentVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4ColsPairedDirectDependence-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA_2={5.00322122,4.29011291,3.91312749,3.69192886,3.52807488,3.39865354,3.05327646,2.79951639};  System.out.println("Kraskov comparison 6 - multivariate dependent data 1");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1}),MatrixUtils.selectColumns(data,new int[]{2,3}),kNNs,expectedFromMILCA_2);}  }
class C{  protected static final int selectColorFormat(final MediaCodecInfo codecInfo,final String mimeType){  if (DEBUG)   Log.i(TAG,"selectColorFormat: ");  int result=0;  final MediaCodecInfo.CodecCapabilities caps;  try {    Thread.currentThread().setPriority(Thread.MAX_PRIORITY);    caps=codecInfo.getCapabilitiesForType(mimeType);  }  finally {    Thread.currentThread().setPriority(Thread.NORM_PRIORITY);  }  int colorFormat;  for (int i=0; i < caps.colorFormats.length; i++) {    colorFormat=caps.colorFormats[i];    if (isRecognizedViewoFormat(colorFormat)) {      if (result == 0)       result=colorFormat;      break;    }  }  if (result == 0)   Log.e(TAG,"couldn't find a good color format for " + codecInfo.getName() + " / "+ mimeType);  return result;}  }
class C{  public boolean isCustomization(){  Object oo=get_Value(COLUMNNAME_IsCustomization);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void dumpFont(Font font){  int addr=MemoryMap.START_VRAM;  int fontPixelFormat=PSP_FONT_PIXELFORMAT_32;  int bufferStorage=GeCommands.TPSM_PIXEL_STORAGE_MODE_32BIT_ABGR8888;  int bufferWidth=800;  int fontBufWidth=bufferWidth;  int fontBpl=bufferWidth * sceDisplay.getPixelFormatBytes(bufferStorage);  int fontBufHeight=MemoryMap.SIZE_VRAM / fontBpl;  SceFontInfo fontInfo=font.fontInfo;  PGF pgf=font.pgf;  int memoryLength=fontBpl * fontBufHeight * sceDisplay.getPixelFormatBytes(bufferStorage);  Memory mem=Memory.getInstance();  mem.memset(addr,(byte)0,memoryLength);  Buffer memoryBuffer=Memory.getInstance().getBuffer(addr,memoryLength);  String fileNamePrefix=String.format("Font-%s-",pgf.getFileNamez());  int maxGlyphWidth=pgf.getMaxSize()[0] >> 6;  int maxGlyphHeight=pgf.getMaxSize()[1] >> 6;  int level=0;  int x=0;  int y=0;  int firstCharCode=pgf.getFirstGlyphInCharMap();  int lastCharCode=pgf.getLastGlyphInCharMap();  for (int charCode=firstCharCode; charCode <= lastCharCode; charCode++) {    if (x == 0) {      String linePrefix=String.format("0x%04X: ",charCode);      Debug.printFramebuffer(addr,fontBufWidth,x,y,0xFFFFFFFF,0x00000000,bufferStorage,linePrefix);      x+=linePrefix.length() * jpcsp.util.Debug.Font.charWidth;    }    fontInfo.printFont(addr,fontBpl,fontBufWidth,fontBufHeight,x,y,0,0,0,0,fontBufWidth,fontBufHeight,fontPixelFormat,charCode,' ',SceFontInfo.FONT_PGF_GLYPH_TYPE_CHAR,true);    x+=maxGlyphWidth;    if (x + maxGlyphWidth > fontBufWidth) {      x=0;      y+=maxGlyphHeight;      if (y + maxGlyphHeight > fontBufHeight) {        CaptureImage image=new CaptureImage(addr,level,memoryBuffer,fontBufWidth,fontBufHeight,bufferWidth,bufferStorage,false,0,false,true,fileNamePrefix);        log.info(String.format("Dumping font %s from charCode 0x%04X to file %s",pgf.getFontName(),firstCharCode,image.getFileName()));        try {          image.write();        } catch (        IOException e) {          log.error(e);        }        mem.memset(addr,(byte)0,memoryLength);        level++;        firstCharCode=charCode + 1;        x=0;        y=0;      }    }  }  CaptureImage image=new CaptureImage(addr,level,memoryBuffer,fontBufWidth,fontBufHeight,bufferWidth,bufferStorage,false,0,false,true,fileNamePrefix);  log.info(String.format("Dumping font %s from charCode 0x%04X to file %s",pgf.getFontName(),firstCharCode,image.getFileName()));  try {    image.write();  } catch (  IOException e) {    log.error(e);  }}  }
class C{  public HessianDebugOutputStream(Logger log,Level level){  this(null,new PrintWriter(new LogWriter(log,level)));}  }
class C{  static public String executeFunction(String[] values,Variables variables){  try {    if (values[2].equalsIgnoreCase("getssn"))     return TaxFunctions.getSsn(Long.valueOf(variables.getVariable(SSN_VAR)));    return "";  } catch (  Exception ex) {    return "";  }}  }
class C{  public OkHttpUtils debug(String tag,boolean showResponse){  mOkHttpClient=getOkHttpClient().newBuilder().addInterceptor(new LoggerInterceptor(tag,showResponse)).build();  return this;}  }
class C{  private void readDoctype(boolean saveDtdText) throws IOException, XmlPullParserException {  read(START_DOCTYPE);  int startPosition=-1;  if (saveDtdText) {    bufferCapture=new StringBuilder();    startPosition=position;  }  try {    skip();    rootElementName=readName();    readExternalId(true,true);    skip();    if (peekCharacter() == '[') {      readInternalSubset();    }    skip();  }  finally {    if (saveDtdText) {      bufferCapture.append(buffer,0,position);      bufferCapture.delete(0,startPosition);      text=bufferCapture.toString();      bufferCapture=null;    }  }  read('>');}  }
class C{  public void updateString(String columnName,String x) throws SQLException {  checkUpdatable();  getField(columnName).setString(x);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrremovechild2.class,args);}  }
class C{  public byte[] serialize(){  int length;  if (dataOffset == 0)   dataOffset=5;  length=dataOffset << 2;  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();    length+=payloadData.length;  }  byte[] data=new byte[length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.putShort((short)this.sourcePort.getPort());  bb.putShort((short)this.destinationPort.getPort());  bb.putInt(this.sequence);  bb.putInt(this.acknowledge);  bb.putShort((short)(this.flags | (dataOffset << 12)));  bb.putShort(this.windowSize);  bb.putShort(this.checksum);  bb.putShort(this.urgentPointer);  if (dataOffset > 5) {    int padding;    bb.put(options);    padding=(dataOffset << 2) - 20 - options.length;    for (int i=0; i < padding; i++)     bb.put((byte)0);  }  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IpProtocol.TCP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    if (this.parent != null && this.parent instanceof IPv4) {      IPv4 ipv4=(IPv4)this.parent;      accumulation+=((ipv4.getSourceAddress().getInt() >> 16) & 0xffff) + (ipv4.getSourceAddress().getInt() & 0xffff);      accumulation+=((ipv4.getDestinationAddress().getInt() >> 16) & 0xffff) + (ipv4.getDestinationAddress().getInt() & 0xffff);      accumulation+=ipv4.getProtocol().getIpProtocolNumber() & 0xff;      accumulation+=length & 0xffff;    }    for (int i=0; i < length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(16,this.checksum);  }  return data;}  }
class C{  protected void assertExpectation(String name,TraceCorrelation stats,double v){  double mean=stats.getMean();  double stderr=stats.getStdErrorOfMean();  double upper=mean + 2 * stderr;  double lower=mean - 2 * stderr;  assertTrue("Expected " + name + " is "+ v+ " but got "+ mean+ " +/- "+ stderr,upper > v && lower < v);}  }
class C{  public boolean remove(Object o){  ObjectConnection conn=getObjectConnection();  try {    Value value=getValue(o);    remove(conn,getResource(),value);    if (value instanceof Resource) {      refreshEntity();    }  } catch (  RepositoryException e) {    throw new ObjectPersistException(e);  }  refresh(o);  refresh();  return true;}  }
class C{  public static void main(String[] args) throws Exception {  Main main=new Main();  main.run();}  }
class C{  @Override public boolean queueRequest(Operation op){  if (checkServiceStopped(op,false)) {    return true;  }  if (op.getAction() != Action.DELETE && this.context.processingStage != ProcessingStage.AVAILABLE) {    if (this.context.processingStage == ProcessingStage.PAUSED) {      logWarning("Service in stage %s, retrying request",this.context.processingStage);      getHost().handleRequest(this,op);      return true;    }    logWarning("Service in %s stage, cancelling operation",this.context.processingStage);    op.fail(new CancellationException());    return true;  }  if (hasOption(Service.ServiceOption.INSTRUMENTATION)) {    op.setEnqueueTime(System.nanoTime() / 1000);  }  if (!op.hasReferer()) {    op.fail(new IllegalArgumentException("Referer is required"));    return true;  }  if (!hasOption(ServiceOption.CONCURRENT_UPDATE_HANDLING) && queueRequestInternal(op)) {    return true;  }  return false;}  }
class C{  private void resolveFire(){  IBoard board=game.getBoard();  int width=board.getWidth();  int height=board.getHeight();  int windDirection=game.getPlanetaryConditions().getWindDirection();  int windStrength=game.getPlanetaryConditions().getWindStrength();  Report r;  Hashtable<Coords,Vector<Entity>> positionMap=game.getPositionMap();  resolveSmoke();  Enumeration<Building> buildings=game.getBoard().getBuildings();  while (buildings.hasMoreElements()) {    Building bldg=buildings.nextElement();    Enumeration<Coords> bldgCoords=bldg.getCoords();    while (bldgCoords.hasMoreElements()) {      Coords coords=bldgCoords.nextElement();      if (bldg.isBurning(coords)) {        int cf=Math.max(bldg.getCurrentCF(coords) - 2,0);        bldg.setCurrentCF(cf,coords);        if (cf == 0) {          r=new Report(5120,Report.PUBLIC);          r.add(bldg.getName());          vPhaseReport.addElement(r);        } else         if (!server.checkForCollapse(bldg,positionMap,coords,false,vPhaseReport)) {          bldg.setPhaseCF(cf,coords);        }      }    }  }  debugTime("resolve fire 1",true);  for (int currentXCoord=0; currentXCoord < width; currentXCoord++) {    for (int currentYCoord=0; currentYCoord < height; currentYCoord++) {      Coords currentCoords=new Coords(currentXCoord,currentYCoord);      IHex currentHex=board.getHex(currentXCoord,currentYCoord);      if (currentHex.containsTerrain(Terrains.FIRE)) {        if ((currentHex.terrainLevel(Terrains.FIRE) == Terrains.FIRE_LVL_NORMAL) && !currentHex.isIgnitable()) {          server.removeFire(currentCoords,"lack of fuel");          continue;        }        if (currentHex.getFireTurn() > 0) {          Vector<Report> burnReports=null;          if ((currentHex.containsTerrain(Terrains.WOODS) || currentHex.containsTerrain(Terrains.JUNGLE)) && game.getOptions().booleanOption("woods_burn_down")) {            burnReports=burnDownWoods(currentCoords);          }          r=new Report(5125,Report.PUBLIC);          if ((currentHex.terrainLevel(Terrains.FIRE) == Terrains.FIRE_LVL_INFERNO) || (currentHex.terrainLevel(Terrains.FIRE) == Terrains.FIRE_LVL_INFERNO_BOMB) || (currentHex.terrainLevel(Terrains.FIRE) == Terrains.FIRE_LVL_INFERNO_IV)) {            r.messageId=5130;          }          r.add(currentCoords.getBoardNum());          vPhaseReport.addElement(r);          if (burnReports != null) {            vPhaseReport.addAll(burnReports);          }          spreadFire(currentXCoord,currentYCoord,windDirection,windStrength);        }      }    }  }  for (int currentXCoord=0; currentXCoord < width; currentXCoord++) {    for (int currentYCoord=0; currentYCoord < height; currentYCoord++) {      Coords currentCoords=new Coords(currentXCoord,currentYCoord);      IHex currentHex=board.getHex(currentXCoord,currentYCoord);      if (currentHex.containsTerrain(Terrains.FIRE)) {        Building bldg=game.getBoard().getBuildingAt(currentCoords);        if (currentHex.getFireTurn() == 0) {          r=new Report(5135,Report.PUBLIC);          r.add(currentCoords.getBoardNum());          vPhaseReport.addElement(r);          if (bldg != null) {            bldg.setBurning(true,currentCoords);          }        }        server.checkExplodeIndustrialZone(currentCoords,vPhaseReport);        boolean containsForest=(currentHex.containsTerrain(Terrains.WOODS) || currentHex.containsTerrain(Terrains.JUNGLE));        boolean bInferno=currentHex.terrainLevel(Terrains.FIRE) == 2;        if ((game.getPlanetaryConditions().getWindStrength() < PlanetaryConditions.WI_TORNADO_F13) && !(game.getOptions().booleanOption("forest_fires_no_smoke") && containsForest && (bldg == null))) {          ArrayList<Coords> smokeList=new ArrayList<Coords>();          smokeList.add(new Coords(Coords.xInDir(currentXCoord,currentYCoord,windDirection),Coords.yInDir(currentXCoord,currentYCoord,windDirection)));          smokeList.add(new Coords(Coords.xInDir(currentXCoord,currentYCoord,(windDirection + 1) % 6),Coords.yInDir(currentXCoord,currentYCoord,(windDirection + 1) % 6)));          smokeList.add(new Coords(Coords.xInDir(currentXCoord,currentYCoord,(windDirection + 5) % 6),Coords.yInDir(currentXCoord,currentYCoord,(windDirection + 5) % 6)));          server.addSmoke(smokeList,windDirection,bInferno);          board.initializeAround(currentXCoord,currentYCoord);        }        currentHex.incrementFireTurn();        server.getHexUpdateSet().add(currentCoords);      }    }  }}  }
class C{  protected SelectableMultiPoint[] transform(SelectableMultiPoint[] points,int width,int height){  double minX=0;  double minY=0;  double maxX=0;  double maxY=0;  for (  SelectableMultiPoint mp : points) {    double x1=mp.getCoordinate(1);    double y1=mp.getCoordinate(2);    if (x1 < minX) {      minX=x1;    }    if (y1 < minY) {      minY=y1;    }    if (x1 > maxX) {      maxX=x1;    }    if (y1 > maxY) {      maxY=y1;    }  }  double xFactor=1.0 * width / (maxX - minX);  double yFactor=1.0 * height / (maxY - minY);  if (!shouldScale()) {    SelectableMultiPoint[] copy=new SelectableMultiPoint[points.length];    for (int i=0; i < copy.length; i++) {      copy[i]=points[i];    }    return copy;  }  SelectableMultiPoint[] retVal=new SelectableMultiPoint[points.length];  int idx=0;  for (  IMultiPoint mp : points) {    double px=(mp.getCoordinate(1) - minX) * xFactor;    double py=(mp.getCoordinate(2) - minY) * yFactor;    retVal[idx++]=new SelectableMultiPoint((int)px,(int)py);  }  return retVal;}  }
class C{  public ReasonFlags(DerInputStream in) throws IOException {  DerValue derVal=in.getDerValue();  this.bitString=derVal.getUnalignedBitString(true).toBooleanArray();}  }
class C{  public NumericalUnaryExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static <T>T[] reallocateBuffer(Class<T> klass,T[] buffer,int userSuppliedCapacity,int oldCapacity,int newCapacity,boolean deferred){  assert (newCapacity > oldCapacity);  assert (userSuppliedCapacity == 0 || newCapacity <= userSuppliedCapacity);  if ((!deferred || buffer != null) && userSuppliedCapacity == 0) {    buffer=reallocateBuffer(klass,buffer,oldCapacity,newCapacity);  }  return buffer;}  }
class C{  private static void implMulAddCheck(int[] out,int[] in,int offset,int len,int k){  if (len > in.length) {    throw new IllegalArgumentException("input length is out of bound: " + len + " > "+ in.length);  }  if (offset < 0) {    throw new IllegalArgumentException("input offset is invalid: " + offset);  }  if (offset > (out.length - 1)) {    throw new IllegalArgumentException("input offset is out of bound: " + offset + " > "+ (out.length - 1));  }  if (len > (out.length - offset)) {    throw new IllegalArgumentException("input len is out of bound: " + len + " > "+ (out.length - offset));  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.746 -0500",hash_original_method="92C0302C214CF8B39DC3046063D57663",hash_generated_method="72463FCEC06525819F43BD0A022D2598") static void invokeStaticMain(ClassLoader loader,String className,String[] argv) throws ZygoteInit.MethodAndArgsCaller {  Class<?> cl;  try {    cl=loader.loadClass(className);  } catch (  ClassNotFoundException ex) {    throw new RuntimeException("Missing class when invoking static main " + className,ex);  }  Method m;  try {    m=cl.getMethod("main",new Class[]{String[].class});  } catch (  NoSuchMethodException ex) {    throw new RuntimeException("Missing static main on " + className,ex);  }catch (  SecurityException ex) {    throw new RuntimeException("Problem getting static main on " + className,ex);  }  int modifiers=m.getModifiers();  if (!(Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers))) {    throw new RuntimeException("Main method is not public and static on " + className);  }  throw new ZygoteInit.MethodAndArgsCaller(m,argv);}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus modifyInstance(String instanceId,ProvisioningSettings currentSettings,ProvisioningSettings newSettings) throws APPlatformException {  PropertyHandler paramHandler=new PropertyHandler(newSettings);  validateParameters(paramHandler);  paramHandler.setState(Status.MODIFICATION_REQUESTED);  InstanceStatus result=new InstanceStatus();  result.setChangedParameters(newSettings.getParameters());  return result;}  }
class C{  public void check(){}  }
class C{  public static void disableDoubleBuffering(Component c){  RepaintManager currentManager=RepaintManager.currentManager(c);  currentManager.setDoubleBufferingEnabled(false);}  }
class C{  public static Document createDocument(boolean isSecureProcessing){  try {    DocumentBuilderFactory dfactory=DocumentBuilderFactory.newInstance();    dfactory.setNamespaceAware(true);    DocumentBuilder docBuilder=dfactory.newDocumentBuilder();    Document outNode=docBuilder.newDocument();    return outNode;  } catch (  ParserConfigurationException pce) {    throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CREATEDOCUMENT_NOT_SUPPORTED,null));  }}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (conversation.getType() != Conversation.TYPE_CHANNEL) {    throw new CommandException(service.getString(R.string.only_usable_from_channel));  }  if (params.length == 2) {    service.getConnection(server.getId()).deVoice(conversation.getName(),params[1]);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  public void autoSize(){  if (!autoResize)   return;  long start=System.currentTimeMillis();  final int SLACK=8;  final int MAXSIZE=300;  TableModel model=this.getModel();  int size=model.getColumnCount();  for (int col=0; col < size; col++) {    TableColumn tc=this.getColumnModel().getColumn(col);    int width=0;    if (m_minWidth.size() > col)     width=((Integer)m_minWidth.get(col)).intValue();    TableCellRenderer renderer=tc.getHeaderRenderer();    if (renderer == null)     renderer=new DefaultTableCellRenderer();    Component comp=renderer.getTableCellRendererComponent(this,tc.getHeaderValue(),false,false,0,0);    width=Math.max(width,comp.getPreferredSize().width + SLACK);    int maxRow=Math.min(30,getRowCount());    for (int row=0; row < maxRow; row++) {      renderer=getCellRenderer(row,col);      comp=renderer.getTableCellRendererComponent(this,getValueAt(row,col),false,false,row,col);      if (comp != null) {        int rowWidth=comp.getPreferredSize().width + SLACK;        width=Math.max(width,rowWidth);      }    }    width=Math.min(MAXSIZE,width);    tc.setPreferredWidth(width);  }  log.finer("Cols=" + size + " - "+ (System.currentTimeMillis() - start)+ "ms");}  }
class C{  @Override public void actionPerformed(ActionEvent event){switch (event.getActionCommand()) {case NEW_CHANNEL:    addChannel(new Channel("New Channel"));  break;case COPY_CHANNEL:Channel selected=getSelectedChannel();if (selected != null) {addChannel(selected.copyOf());}break;case DELETE_CHANNEL:Channel toDelete=getSelectedChannel();if (toDelete != null) {int choice=JOptionPane.showConfirmDialog(ChannelController.this,"Do you want to delete this channel?","Delete Channel?",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);if (choice == JOptionPane.YES_OPTION) {mChannelModel.removeChannel(toDelete);}}break;default :break;}}  }
class C{  public NaiveASTFlattener(){  this.buffer=new StringBuffer();}  }
class C{  public String explain(boolean withDetails){  StringBuilder sb=new StringBuilder();  sb.append("\n");  sb.append("----------------------------\n");  sb.append(" EXPLAIN OPT TREE (type=");  sb.append(_type);  sb.append(", size=");  sb.append(_root.size());  sb.append(")\n");  sb.append("----------------------------\n");  sb.append(_root.explain(1,withDetails));  sb.append("----------------------------\n");  return sb.toString();}  }
class C{  protected void addCompositePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_State_composite_feature"),getString("_UI_PropertyDescriptor_description","_UI_State_composite_feature","_UI_State_type"),SGraphPackage.Literals.STATE__COMPOSITE,false,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public void downloadContents(Progress progress) throws IOException {  String tmpPath=getContentPath();  File f=new File(tmpPath);  if (!f.exists())   f.mkdir();  ForkJoinPool pool=ForkJoinPool.commonPool();  List<ContentDownloader> dlList=new ArrayList<>();  for (  Content c : contents) {    dlList.add(new ContentDownloader(c,progress));  }  pool.invokeAll(dlList);  Logger.log("Done!");}  }
class C{  public void switchEntitiesAndThrow(EntityContext entityContext) throws OptimisticLockMismatchException {  Entity switched=getCorrespondingEntity(entityContext,entity);  if (switched == null) {    throw this;  } else {    OptimisticLockMismatchException x=new OptimisticLockMismatchException(switched,databaseEntity);    x.setStackTrace(getStackTrace());    throw x;  }}  }
class C{  public void rotateZ(float angle){  showMethodWarning("rotateZ");}  }
class C{  public boolean isSpecified(String uri,String localName){  int index=getIndex(uri,localName);  if (index < 0)   throw new IllegalArgumentException("No such attribute: local=" + localName + ", namespace="+ uri);  return specified[index];}  }
class C{  public static byte[] decode(byte[] data){  byte[] bytes;  byte b1, b2, b3, b4;  data=discardNonBase64Bytes(data);  if (data[data.length - 2] == '=') {    bytes=new byte[(((data.length / 4) - 1) * 3) + 1];  } else   if (data[data.length - 1] == '=') {    bytes=new byte[(((data.length / 4) - 1) * 3) + 2];  } else {    bytes=new byte[((data.length / 4) * 3)];  }  for (int i=0, j=0; i < data.length - 4; i+=4, j+=3) {    b1=decodingTable[data[i]];    b2=decodingTable[data[i + 1]];    b3=decodingTable[data[i + 2]];    b4=decodingTable[data[i + 3]];    bytes[j]=(byte)((b1 << 2) | (b2 >> 4));    bytes[j + 1]=(byte)((b2 << 4) | (b3 >> 2));    bytes[j + 2]=(byte)((b3 << 6) | b4);  }  if (data[data.length - 2] == '=') {    b1=decodingTable[data[data.length - 4]];    b2=decodingTable[data[data.length - 3]];    bytes[bytes.length - 1]=(byte)((b1 << 2) | (b2 >> 4));  } else   if (data[data.length - 1] == '=') {    b1=decodingTable[data[data.length - 4]];    b2=decodingTable[data[data.length - 3]];    b3=decodingTable[data[data.length - 2]];    bytes[bytes.length - 2]=(byte)((b1 << 2) | (b2 >> 4));    bytes[bytes.length - 1]=(byte)((b2 << 4) | (b3 >> 2));  } else {    b1=decodingTable[data[data.length - 4]];    b2=decodingTable[data[data.length - 3]];    b3=decodingTable[data[data.length - 2]];    b4=decodingTable[data[data.length - 1]];    bytes[bytes.length - 3]=(byte)((b1 << 2) | (b2 >> 4));    bytes[bytes.length - 2]=(byte)((b2 << 4) | (b3 >> 2));    bytes[bytes.length - 1]=(byte)((b3 << 6) | b4);  }  return bytes;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.REACTION_FIRED__REACTION:    setReaction((Reaction)null);  return;}super.eUnset(featureID);}  }
class C{  public boolean render(InternalContextAdapter context,Writer writer,Node node) throws IOException, MethodInvocationException, ResourceNotFoundException {  int argCount=node.jjtGetNumChildren();  for (int i=0; i < argCount; i++) {    Node n=node.jjtGetChild(i);    if (n.getType() == ParserTreeConstants.JJTSTRINGLITERAL || n.getType() == ParserTreeConstants.JJTREFERENCE) {      if (!renderOutput(n,context,writer))       outputErrorToStream(writer,"error with arg " + i + " please see log.");    } else {      rsvc.error("#include() error : invalid argument type : " + n.toString());      outputErrorToStream(writer,"error with arg " + i + " please see log.");    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public synchronized void putAll(Map map,int action,boolean allowChildEvents){  boolean oldAllowEvents=allowEvents;  allowEvents=allowChildEvents;  int oldAction=defaultAction;  defaultAction=action;  super.putAll(map);  defaultAction=oldAction;  allowEvents=oldAllowEvents;  firePvChanged(new PvChangeEvent(this,getKeyAttribute(),map.values().toArray(),action));}  }
class C{  public void flush(){}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_linkingOp_3_();}  }
class C{  @Override protected StatisticResource createStatisticResource(StatResource stat) throws org.apache.geode.admin.AdminException {  StatisticResourceJmxImpl managedStatisticResource=null;synchronized (this.managedStatisticsResourcesMap) {    StatisticResourceJmxImpl statisticResourceJmxImpl=managedStatisticsResourcesMap.get(stat);    if (statisticResourceJmxImpl != null) {      managedStatisticResource=statisticResourceJmxImpl;    } else {      managedStatisticResource=new StatisticResourceJmxImpl(stat,this);      managedStatisticResource.getStatistics();      managedStatisticsResourcesMap.put(stat,managedStatisticResource);    }  }  return managedStatisticResource;}  }
class C{  public String toString(ObjectMatrix3D matrix){  StringBuffer buf=new StringBuffer();  boolean oldPrintShape=this.printShape;  this.printShape=false;  for (int slice=0; slice < matrix.slices(); slice++) {    if (slice != 0)     buf.append(sliceSeparator);    buf.append(toString(matrix.viewSlice(slice)));  }  this.printShape=oldPrintShape;  if (printShape)   buf.insert(0,shape(matrix) + "\n");  return buf.toString();}  }
class C{  public static int[] cs_post(int[] parent,int n){  int j, k=0, post[], w[], head[], next[], stack[];  if (parent == null)   return (null);  post=new int[n];  w=new int[3 * n];  head=w;  next=w;  int next_offset=n;  stack=w;  int stack_offset=2 * n;  for (j=0; j < n; j++)   head[j]=-1;  for (j=n - 1; j >= 0; j--) {    if (parent[j] == -1)     continue;    next[next_offset + j]=head[parent[j]];    head[parent[j]]=j;  }  for (j=0; j < n; j++) {    if (parent[j] != -1)     continue;    k=Dcs_tdfs.cs_tdfs(j,k,head,0,next,next_offset,post,0,stack,stack_offset);  }  return post;}  }
class C{  void replaceFindFragmentById(StmtBody stmtBody,Stmt stmt){  if (stmt.getInvokeExpr() instanceof InstanceInvokeExpr) {    InstanceInvokeExpr iInvokeExpr=(InstanceInvokeExpr)stmt.getInvokeExpr();    Chain<Unit> units=stmtBody.getUnits();    List<ValueBox> defBoxList=stmt.getDefBoxes();    ValueBox callerObjectBox=iInvokeExpr.getBaseBox();    ValueBox idValueBox=iInvokeExpr.getArgBox(0);    ValueBox assignToBox=null;    if (defBoxList != null && defBoxList.size() > 0)     assignToBox=defBoxList.get(0);    logger.debug("DefBoxes: {} ",stmt.getDefBoxes());    if (callerObjectBox == null || idValueBox == null) {      logger.warn("Couldnot get boxes for replacement ");      AnalysisReport.v().addEntry("Could not replace findViewById because called with non-constant argument.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    Integer intId;    try {      intId=new Integer(idValueBox.getValue().toString());    } catch (    Exception ex) {      logger.info("Couldn't replace {} ",stmt);      AnalysisReport.v().addEntry("Could not replace findViewById because could not find resource.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    if (ResourcesSoot.isAndroidId(intId)) {      logger.info("android builtin IDs, ignored ");      AnalysisReport.v().addEntry("Could not replace findViewById because could not find resource.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    SootMethod getViewMethod=ResourcesSoot.v().lookupGetUi_ID(intId);    if (getViewMethod == null) {      logger.warn("NOT replacing {}, id={} ",stmt,String.format("0x%x",intId));      AnalysisReport.v().addEntry("Could not replace findViewById because called with non-constant argument.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    Expr invokeExpr=Jimple.v().newStaticInvokeExpr(getViewMethod.makeRef(),callerObjectBox.getValue());    Stmt lookupStmt;    if (assignToBox != null)     lookupStmt=Jimple.v().newAssignStmt(assignToBox.getValue(),invokeExpr); else     lookupStmt=Jimple.v().newInvokeStmt(invokeExpr);    try {      units.swapWith(stmt,lookupStmt);      logger.info("replacing {} ",stmt);      logger.info("with {}, OK ",lookupStmt);    } catch (    Exception ex) {      logger.warn("replacing {} ",stmt);      logger.warn("with {} => NOT OK",lookupStmt);      AnalysisReport.v().addEntry("Could not replace findViewById because unknown error.",stmt,AnalysisReport.Level.ELEVATED);    }  } else {    logger.warn("InvokeExpr in {} is not an InstanceInvokeExpr",stmt);    AnalysisReport.v().addEntry("Could not replace findViewById because unknown error.",stmt,AnalysisReport.Level.ELEVATED);  }}  }
class C{  public static <I,A>Parser<I,A> choice(Parser<I,? extends A> p1,Parser<I,? extends A> p2,Parser<I,? extends A> p3,Parser<I,? extends A> p4,Parser<I,? extends A> p5,Parser<I,? extends A> p6){  return or(p1,or(p2,or(p3,or(p4,or(p5,p6)))));}  }
class C{  public static Builder from(Swagger swagger){  Validate.notNull(swagger,"swagger must not be null");  return new Builder(swagger);}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public boolean onTrackballEvent(MotionEvent event){  return false;}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  protected void assertBusinessObjectData(Integer expectedDataVersion,BusinessObjectData actualBusinessObjectData){  assertBusinessObjectData(expectedDataVersion,getTestAttributes(),getTestBusinessObjectDataParents(),actualBusinessObjectData);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.240 -0500",hash_original_method="AF5E7921B4B2187E0041EFA801E04DA5",hash_generated_method="E10289AF1D5496D17669A60BBBE2F9E9") public final int readUnsignedByte() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return temp;}  }
class C{  public PajekNetWriter(){}  }
class C{  public int indexOf(int elem,int index){  if (null == m_map)   return -1;  for (int i=index; i < m_firstFree; i++) {    int node=m_map[i];    if (node == elem)     return i;  }  return -1;}  }
class C{  public void fillFieldValues(Collection<Synapse> synapseCollection){  Synapse synapseRef=synapseCollection.iterator().next();  if (!NetworkUtils.isConsistent(synapseCollection,Synapse.class,"getUpperBound")) {    tfUpBound.setText(SimbrainConstants.NULL_STRING);  } else {    tfUpBound.setText(Double.toString(synapseRef.getUpperBound()));  }  if (!NetworkUtils.isConsistent(synapseCollection,Synapse.class,"getLowerBound")) {    tfLowBound.setText(SimbrainConstants.NULL_STRING);  } else {    tfLowBound.setText(Double.toString(synapseRef.getLowerBound()));  }  if (!NetworkUtils.isConsistent(synapseCollection,Synapse.class,"getIncrement")) {    tfIncrement.setText(SimbrainConstants.NULL_STRING);  } else {    tfIncrement.setText(Double.toString(synapseRef.getIncrement()));  }  if (synapseRef.getDelay() < 0 || !NetworkUtils.isConsistent(synapseCollection,Synapse.class,"getDelay")) {    tfDelay.setText(SimbrainConstants.NULL_STRING);  } else {    tfDelay.setText(Integer.toString(synapseRef.getDelay()));  }  if (!NetworkUtils.isConsistent(synapseCollection,Synapse.class,"isFrozen")) {    frozenDD.setNull();  } else {    frozenDD.setSelectedIndex(synapseRef.isFrozen() ? 0 : 1);  }}  }
class C{  public GlobalMincut(EdgeWeightedGraph G){  validate(G);  minCut(G,0);  assert check(G);}  }
class C{  public Block(final Account harvester,final Hash prevBlockHash,final Hash generationHash,final TimeInstant timeStamp,final BlockHeight height){  super(BlockHeight.ONE.equals(height) ? BlockTypes.NEMESIS : BlockTypes.REGULAR,BLOCK_VERSION,timeStamp,harvester);  this.transactions=new ArrayList<>();  this.prevBlockHash=prevBlockHash;  this.generationHash=generationHash;  this.height=height;  this.difficulty=BlockDifficulty.INITIAL_DIFFICULTY;}  }
class C{  public boolean checkCommunity(String community){  return acl.checkCommunity(community);}  }
class C{  protected void makeOrderedRenderable(DrawContext dc){  if (this.mustRegenerateGeometry(dc)) {    this.extent=this.computeExtentAndEyeDistance(dc);    if (!this.intersectsFrustum(dc))     return;    this.currentPoints=this.computeGridPoints(dc,this.currentPoints);    if (this.currentPoints == null || this.currentPoints.limit() == 0)     return;    this.determineActiveAttributes();    this.visGeomRegenFrame=dc.getFrameTimeStamp();    this.previousExaggeration=dc.getVerticalExaggeration();  }  if (this.intersectsFrustum(dc)) {    if (dc.isPickingMode())     this.pickLayer=dc.getCurrentLayer();    dc.addOrderedRenderable(this);  }}  }
class C{  public void clearShots(){  camerasSupervisor.clearShots();}  }
class C{  public static void main(String[] args){  ToolIO.out.println("TLC CheckImpl" + TLCGlobals.versionOfTLC);  String mainFile=null;  String configFile=null;  String traceFile=null;  boolean deadlock=true;  int depth=20;  String fromChkpt=null;  int index=0;  while (index < args.length) {    if (args[index].equals("-config")) {      index++;      if (index < args.length) {        configFile=args[index++];        int len=configFile.length();        if (configFile.startsWith(".cfg",len - 4)) {          configFile=configFile.substring(0,len - 4);        }      } else {        printErrorMsg(MP.getMessage(EC.CHECK_PARAM_EXPECT_CONFIG_FILENAME));        return;      }    } else     if (args[index].equals("-deadlock")) {      index++;      deadlock=false;    } else     if (args[index].equals("-recover")) {      index++;      if (index < args.length) {        fromChkpt=args[index++] + FileUtil.separator;      } else {        printErrorMsg(MP.getMessage(EC.CHECK_PARAM_NEED_TO_SPECIFY_CONFIG_DIR));        return;      }    } else     if (args[index].equals("-workers")) {      index++;      if (index < args.length) {        try {          TLCGlobals.setNumWorkers(Integer.parseInt(args[index]));          index++;        } catch (        NumberFormatException e) {          printErrorMsg(MP.getMessage(EC.CHECK_PARAM_WORKER_NUMBER_REQUIRED,args[index]));          return;        }        if (TLCGlobals.getNumWorkers() < 1) {          printErrorMsg(MP.getMessage(EC.CHECK_PARAM_WORKER_NUMBER_TOO_SMALL));          return;        }      } else {        printErrorMsg(MP.getMessage(EC.CHECK_PARAM_WORKER_NUMBER_REQUIRED2));        return;      }    } else     if (args[index].equals("-depth")) {      index++;      if (index < args.length) {        try {          depth=Integer.parseInt(args[index]);          index++;        } catch (        NumberFormatException e) {          printErrorMsg(MP.getMessage(EC.CHECK_PARAM_DEPTH_REQUIRED,args[index]));          return;        }      } else {        printErrorMsg(MP.getMessage(EC.CHECK_PARAM_DEPTH_REQUIRED2));        return;      }    } else     if (args[index].equals("-trace")) {      index++;      if (index < args.length) {        traceFile=args[index++];      } else {        printErrorMsg(MP.getMessage(EC.CHECK_PARAM_TRACE_REQUIRED));        return;      }    } else     if (args[index].equals("-coverage")) {      index++;      if (index < args.length) {        try {          TLCGlobals.coverageInterval=Integer.parseInt(args[index]) * 1000 * 60;          if (TLCGlobals.coverageInterval < 0) {            printErrorMsg(MP.getMessage(EC.CHECK_PARAM_COVREAGE_TOO_SMALL));            return;          }          index++;        } catch (        NumberFormatException e) {          printErrorMsg(MP.getError(EC.CHECK_PARAM_COVREAGE_REQUIRED,args[index]));          return;        }      } else {        printErrorMsg(MP.getError(EC.CHECK_PARAM_COVREAGE_REQUIRED));        return;      }    } else {      if (args[index].charAt(0) == '-') {        printErrorMsg(MP.getError(EC.CHECK_PARAM_UNRECOGNIZED,args[index]));        return;      }      if (mainFile != null) {        printErrorMsg(MP.getError(EC.CHECK_PARAM_UNRECOGNIZED,new String[]{mainFile,args[index]}));        return;      }      mainFile=args[index++];      int len=mainFile.length();      if (mainFile.startsWith(".tla",len - 4)) {        mainFile=mainFile.substring(0,len - 4);      }    }  }  if (mainFile == null) {    printErrorMsg(MP.getMessage(EC.CHECK_PARAM_MISSING_TLA_MODULE));    return;  }  if (configFile == null)   configFile=mainFile;  if (traceFile == null)   traceFile=mainFile + "_trace";  try {    if (fromChkpt != null) {      UniqueString.internTbl.recover(fromChkpt);    }    FP64.Init(0);    CheckImplFile checker=new CheckImplFile(mainFile,configFile,deadlock,depth,fromChkpt,traceFile,new FPSetConfiguration());    checker.init();    while (true) {      checker.export();      boolean ok=checker.getTrace();      if (ok) {        checker.checkTrace();      } else {synchronized (checker) {          checker.wait(WaitForTrace);        }      }    }  } catch (  Throwable e) {    MP.printError(EC.CHECK_FAILED_TO_CHECK,e);  }  System.exit(0);}  }
class C{  private void removeITLsFromVolume(Volume volume){  StringMap extensions=volume.getExtensions();  Set<Map.Entry<String,String>> mapEntries=extensions.entrySet();  for (Iterator<Map.Entry<String,String>> it=mapEntries.iterator(); it.hasNext(); ) {    Map.Entry<String,String> entry=it.next();    if (entry.getKey().startsWith(CinderConstants.PREFIX_ITL)) {      it.remove();    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static ProgressDialog createHorizontalProgressDialog(Context context,int messageId,DialogInterface.OnCancelListener onCancelListener,Object... formatArgs){  return createProgressDialog(false,context,messageId,onCancelListener,formatArgs);}  }
class C{  @Override public boolean isAtomicOperation(){  return false;}  }
class C{  public MSF4JSecurityException(SecurityErrorCode errorCode,String message,Throwable cause){  super(message,cause);  this.errorCode=errorCode;}  }
class C{  public IndTestConditionalCorrelation(DataSet dataSet,double alpha){  if (!(dataSet.isContinuous())) {    throw new IllegalArgumentException("Data set must be continuous.");  }  if (!(alpha >= 0 && alpha <= 1)) {    throw new IllegalArgumentException("Alpha mut be in [0, 1]");  }  List<Node> nodes=dataSet.getVariables();  this.variables=Collections.unmodifiableList(nodes);  setAlpha(alpha);  this.dataSet=dataSet;  data=this.dataSet.getDoubleData().getRealMatrix();  List<String> varNames=new ArrayList<>();  for (int i=0; i < variables.size(); i++)   varNames.add(variables.get(i).getName());  this.cci=new Cci(data,varNames,alpha);  indices=new HashMap<>();  for (int i=0; i < nodes.size(); i++) {    indices.put(nodes.get(i),i);  }}  }
class C{  public ServerKeyExchange(HandshakeIODataStream in,int length,int keyExchange) throws IOException {  int size=in.readUint16();  bytes1=in.read(size);  par1=new BigInteger(1,bytes1);  this.length=2 + bytes1.length;  size=in.readUint16();  bytes2=in.read(size);  par2=new BigInteger(1,bytes2);  this.length+=2 + bytes2.length;  if (keyExchange != CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {    size=in.readUint16();    bytes3=in.read(size);    par3=new BigInteger(1,bytes3);    this.length+=2 + bytes3.length;  } else {    par3=null;    bytes3=null;  }  if (keyExchange != CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT && keyExchange != CipherSuite.KEY_EXCHANGE_DH_anon) {    size=in.readUint16();    hash=in.read(size);    this.length+=2 + hash.length;  } else {    hash=null;  }  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerKeyExchange");  }}  }
class C{  public void showPath(Path path){  field.addPath(path);}  }
class C{  public PrinterName(String printerName,Locale locale){  super(printerName,locale);}  }
class C{  public void testEdgeNGramFilter2() throws Exception {  Reader reader=new StringReader("test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("EdgeNGram","minGramSize","1","maxGramSize","2").create(stream);  assertTokenStreamContents(stream,new String[]{"t","te"});}  }
class C{  public void clear(){  reads.set(0);  writes.set(0);  rmCnt.set(0);  hits.set(0);  misses.set(0);  evictCnt.set(0);  txCommits.set(0);  txRollbacks.set(0);  putTimeNanos.set(0);  rmvTimeNanos.set(0);  getTimeNanos.set(0);  commitTimeNanos.set(0);  rollbackTimeNanos.set(0);  offHeapGets.set(0);  offHeapPuts.set(0);  offHeapRemoves.set(0);  offHeapHits.set(0);  offHeapMisses.set(0);  offHeapEvicts.set(0);  swapGets.set(0);  swapPuts.set(0);  swapRemoves.set(0);  swapHits.set(0);  swapMisses.set(0);  if (delegate != null)   delegate.clear();}  }
class C{  public boolean removeWho(Who who){  return super.removeElement(who);}  }
class C{  @Override public Object clone(){  try {    IdentityHashMap<K,V> cloneHashMap=(IdentityHashMap<K,V>)super.clone();    cloneHashMap.elementData=newElementArray(elementData.length);    System.arraycopy(elementData,0,cloneHashMap.elementData,0,elementData.length);    return cloneHashMap;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  protected void buildExceptionalEdges(Map unitToSuccs,Map unitToPreds){  super.buildExceptionalEdges(unitToSuccs,unitToPreds);  for (Iterator trapIt=body.getTraps().iterator(); trapIt.hasNext(); ) {    Trap trap=(Trap)trapIt.next();    Unit firstTrapped=trap.getBeginUnit();    Unit catcher=trap.getHandlerUnit();    List origPredsOfTrapped=new ArrayList(getPredsOf(firstTrapped));    for (Iterator unitIt=origPredsOfTrapped.iterator(); unitIt.hasNext(); ) {      Unit pred=(Unit)unitIt.next();      addEdge(unitToSuccs,unitToPreds,pred,catcher);    }  }}  }
class C{  public LimitTokenCountFilter(TokenStream in,int maxTokenCount,boolean consumeAllTokens){  super(in);  if (maxTokenCount < 1) {    throw new IllegalArgumentException("maxTokenCount must be greater than zero");  }  this.maxTokenCount=maxTokenCount;  this.consumeAllTokens=consumeAllTokens;}  }
class C{  public char charAt(int index){  return fsb().charAt(m_start + index);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.352 -0500",hash_original_method="AC2D0644B70FE8C5B0B7836FC70F62E4",hash_generated_method="9E8A2CC6A73F339F1823EB99E6F99432") public static int compareSignalLevel(int rssiA,int rssiB){  return rssiA - rssiB;}  }
class C{  public StrokeAction(){  super();}  }
class C{  public static void generate(File inputFile){  Out.resetCounters();  Timer totalTime=new Timer();  Timer time=new Timer();  LexScan scanner=null;  LexParse parser=null;  FileReader inputReader=null;  totalTime.start();  try {    Out.println(ErrorMessages.READING,inputFile.toString());    inputReader=new FileReader(inputFile);    scanner=new LexScan(inputReader);    scanner.setFile(inputFile);    parser=new LexParse(scanner);  } catch (  FileNotFoundException e) {    Out.error(ErrorMessages.CANNOT_OPEN,inputFile.toString());    throw new GeneratorException();  }  try {    NFA nfa=(NFA)parser.parse().value;    Out.checkErrors();    if (Options.dump)     Out.dump(ErrorMessages.get(ErrorMessages.NFA_IS) + Out.NL + nfa+ Out.NL);    if (Options.dot)     nfa.writeDot(Emitter.normalize("nfa.dot",null));    Out.println(ErrorMessages.NFA_STATES,nfa.numStates);    time.start();    DFA dfa=nfa.getDFA();    time.stop();    Out.time(ErrorMessages.DFA_TOOK,time);    dfa.checkActions(scanner,parser);    nfa=null;    if (Options.dump)     Out.dump(ErrorMessages.get(ErrorMessages.DFA_IS) + Out.NL + dfa+ Out.NL);    if (Options.dot)     dfa.writeDot(Emitter.normalize("dfa-big.dot",null));    Out.checkErrors();    time.start();    dfa.minimize();    time.stop();    Out.time(ErrorMessages.MIN_TOOK,time);    if (Options.dump)     Out.dump(ErrorMessages.get(ErrorMessages.MIN_DFA_IS) + Out.NL + dfa);    if (Options.dot)     dfa.writeDot(Emitter.normalize("dfa-min.dot",null));    time.start();    Emitter e=new Emitter(inputFile,parser,dfa);    e.emit();    time.stop();    Out.time(ErrorMessages.WRITE_TOOK,time);    totalTime.stop();    Out.time(ErrorMessages.TOTAL_TIME,totalTime);  } catch (  ScannerException e) {    Out.error(e.file,e.message,e.line,e.column);    throw new GeneratorException();  }catch (  MacroException e) {    Out.error(e.getMessage());    throw new GeneratorException();  }catch (  IOException e) {    Out.error(ErrorMessages.IO_ERROR,e.toString());    throw new GeneratorException();  }catch (  OutOfMemoryError e) {    Out.error(ErrorMessages.OUT_OF_MEMORY);    throw new GeneratorException();  }catch (  GeneratorException e) {    throw new GeneratorException();  }catch (  Exception e) {    e.printStackTrace();    throw new GeneratorException();  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UXTAB16");  translateAll(environment,instruction,"UXTAB16",instructions);}  }
class C{  public Node addNode(){  int nrow=addNodeRow();  return (Node)m_nodeTuples.getTuple(nrow);}  }
class C{  public void run(){  java.awt.MediaTracker mt=new java.awt.MediaTracker(peer);  CardImages ci=new CardImages();  CardEnumeration ce=new CardEnumeration();  int idx=1;  while (ce.hasMoreElements()) {    Card c=(Card)ce.nextElement();    String key=c.getName();    try {      File f=new File(imageDirectory + deckType + "/"+ key+ ".gif");      java.net.URL url=f.toURI().toURL();      Image img=java.awt.Toolkit.getDefaultToolkit().getImage(url);      mt.addImage(img,idx++);      ci.setCardImage(c,img);    } catch (    MalformedURLException mue) {      return;    }  }  try {    File f=new File(imageDirectory + deckType + "/"+ backResourceName+ ".gif");    java.net.URL url=f.toURI().toURL();    Image img=java.awt.Toolkit.getDefaultToolkit().getImage(url);    mt.addImage(img,idx++);    ci.setCardReverse(img);  } catch (  MalformedURLException mue) {    return;  }  try {    mt.waitForAll();  } catch (  InterruptedException ie) {  }  loadedImages=ci;  readyStatus=true;}  }
class C{  public void checkScaling(){}  }
class C{  protected boolean emitCompare(PlatformKind cmpKind,Value a,Value b,Condition condition,boolean unorderedIsTrue){  Value left;  Value right;  boolean mirrored;  AArch64Kind kind=(AArch64Kind)cmpKind;  if (kind.isInteger()) {    if (LIRValueUtil.isVariable(b)) {      left=load(b);      right=loadNonConst(a);      mirrored=true;    } else {      left=load(a);      right=loadNonConst(b);      mirrored=false;    }    append(new AArch64Compare.CompareOp(left,loadNonCompareConst(right)));  } else   if (kind.isSIMD()) {    if (AArch64Compare.FloatCompareOp.isFloatCmpConstant(a,condition,unorderedIsTrue)) {      left=load(b);      right=a;      mirrored=true;    } else     if (AArch64Compare.FloatCompareOp.isFloatCmpConstant(b,condition,unorderedIsTrue)) {      left=load(a);      right=b;      mirrored=false;    } else {      left=load(a);      right=loadReg(b);      mirrored=false;    }    append(new AArch64Compare.FloatCompareOp(left,asAllocatable(right),condition,unorderedIsTrue));  } else {    throw GraalError.shouldNotReachHere();  }  return mirrored;}  }
class C{  public void testSimpleArrayNotRegistered() throws Exception {  checkSimpleArray(false);}  }
class C{  public static void addTab(JTabbedPane tabPane,String text,Component comp){  int tabPlacement=tabPane.getTabPlacement();switch (tabPlacement) {case JTabbedPane.LEFT:case JTabbedPane.RIGHT:    tabPane.addTab(null,new VerticalTextIcon(text,tabPlacement == JTabbedPane.RIGHT),comp);  return;default :tabPane.addTab(text,null,comp);}}  }
class C{  public static void logSQLConsumerException(final Logger logger,final SQLConsumerException e){  logger.logException(Level.SEVERE,"SQLConsumerException",e);}  }
class C{  public void fireOperatorsMoved(Collection<Operator> operators){  fireOperatorsChanged(OperatorEvent.OPERATORS_MOVED,operators);}  }
class C{  public void flushBuffer(ByteBuffer bb){  final long start=DistributionStats.getStatTime();  try {synchronized (this) {synchronized (batchLock) {        if (bb != fillBatchBuffer) {          return;        }      }      this.flushNeeded=true;      this.notify();    }synchronized (batchLock) {      while (bb == fillBatchBuffer) {        Connection.this.owner.getConduit().getCancelCriterion().checkCancelInProgress(null);        boolean interrupted=Thread.interrupted();        try {          batchLock.wait();        } catch (        InterruptedException ex) {          interrupted=true;        } finally {          if (interrupted) {            Thread.currentThread().interrupt();          }        }      }    }  }  finally {    owner.getConduit().stats.incBatchWaitTime(start);  }}  }
class C{  public long length(){  return length;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.927 -0500",hash_original_method="56E707F93CF845AF5D37EDA14CF36C80",hash_generated_method="AE6C007A3124252793CA1C6BDF1DECC7") protected void onInsertComplete(int token,Object cookie,Uri uri){}  }
class C{  private void clearViewMapIfNecessary(FacesContext facesContext,String newId){  UIViewRoot root=facesContext.getViewRoot();  if (root != null && !root.getViewId().equals(newId)) {    Map<String,Object> viewMap=root.getViewMap(false);    if (viewMap != null) {      viewMap.clear();    }  }}  }
class C{  private void commitZones(MDSDialog dialog,Integer vsanId,Zoneset activeZoneset){  if (activeZoneset != null) {    dialog.zonesetActivate(activeZoneset.getName(),vsanId,false);  }  if (dialog.isInSession()) {    dialog.zoneCommit(vsanId);    dialog.waitForZoneCommit(vsanId);  }}  }
class C{  private void processCommentContent(final JSONObject comment){  final JSONObject commenter=comment.optJSONObject(Comment.COMMENT_T_COMMENTER);  if (Comment.COMMENT_STATUS_C_INVALID == comment.optInt(Comment.COMMENT_STATUS) || UserExt.USER_STATUS_C_INVALID == commenter.optInt(UserExt.USER_STATUS)) {    comment.put(Comment.COMMENT_CONTENT,langPropsService.get("commentContentBlockLabel"));    return;  }  genCommentContentUserName(comment);  String commentContent=comment.optString(Comment.COMMENT_CONTENT);  commentContent=shortLinkQueryService.linkArticle(commentContent);  commentContent=shortLinkQueryService.linkTag(commentContent);  commentContent=Emotions.convert(commentContent);  commentContent=Markdowns.toHTML(commentContent);  commentContent=Markdowns.clean(commentContent,"");  comment.put(Comment.COMMENT_CONTENT,commentContent);}  }
class C{  public void start(){  start(null);}  }
class C{  public double[] responseRateTotal(Set<? extends SampledVertex> vertices){  int[] sampled=numVerticesSampledTotal(vertices);  int[] detected=numVerticesDetectedTotal(vertices);  double[] rates=new double[sampled.length];  rates[0]=1.0;  for (int i=1; i < sampled.length; i++) {    rates[i]=sampled[i] / (double)detected[i - 1];  }  return rates;}  }
class C{  public static boolean containsTraceExplorerModuleConflict(String rootModuleName){  String rootModuleFileName=rootModuleName;  if (!rootModuleName.endsWith(ResourceHelper.TLA_EXTENSION)) {    rootModuleFileName=ResourceHelper.getModuleFileName(rootModuleName);  }  List<String> extendedModuleNames=ToolboxHandle.getExtendedModules(rootModuleFileName);  Iterator<String> it=extendedModuleNames.iterator();  while (it.hasNext()) {    String moduleName=it.next();    if (moduleName.equals(TE_FILE_TLA)) {      return true;    }  }  return false;}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (!(params instanceof KeyParameter)) {    throw new IllegalArgumentException("invalid parameter passed to SKIPJACK init - " + params.getClass().getName());  }  byte[] keyBytes=((KeyParameter)params).getKey();  this.encrypting=encrypting;  this.key0=new int[32];  this.key1=new int[32];  this.key2=new int[32];  this.key3=new int[32];  for (int i=0; i < 32; i++) {    key0[i]=keyBytes[(i * 4) % 10] & 0xff;    key1[i]=keyBytes[(i * 4 + 1) % 10] & 0xff;    key2[i]=keyBytes[(i * 4 + 2) % 10] & 0xff;    key3[i]=keyBytes[(i * 4 + 3) % 10] & 0xff;  }}  }
class C{  public EqualsResult append(final long lhs,final long rhs){  if (!isEqual) {    return this;  }  isEqual=lhs == rhs;  return this;}  }
class C{  public void testRemove(){  Metadata meta=new Metadata();  meta.remove("name-one");  assertEquals(0,meta.size());  meta.add("name-one","value-1.1");  meta.add("name-one","value-1.2");  meta.add("name-two","value-2.2");  assertEquals(2,meta.size());  assertNotNull(meta.get("name-one"));  assertNotNull(meta.get("name-two"));  meta.remove("name-one");  assertEquals(1,meta.size());  assertNull(meta.get("name-one"));  assertNotNull(meta.get("name-two"));  meta.remove("name-two");  assertEquals(0,meta.size());  assertNull(meta.get("name-one"));  assertNull(meta.get("name-two"));}  }
class C{  protected void saveBuffer(){  StringBuffer sb=m_History.getSelectedBuffer();  if (sb != null) {    if (m_SaveOut.save(sb)) {      JOptionPane.showMessageDialog(this,"File saved","Results",JOptionPane.INFORMATION_MESSAGE);    }  } else {    m_SaveOutBut.setEnabled(false);  }}  }
class C{  public Challenge httpChallenge(Authorization auth,String domain) throws AcmeException {  Http01Challenge challenge=auth.findChallenge(Http01Challenge.TYPE);  if (challenge == null) {    LOG.error("Found no " + Http01Challenge.TYPE + " challenge, don't know what to do...");    return null;  }  LOG.info("Please create a file in your web server's base directory.");  LOG.info("It must be reachable at: http://" + domain + "/.well-known/acme-challenge/"+ challenge.getToken());  LOG.info("File name: " + challenge.getToken());  LOG.info("Content: " + challenge.getAuthorization());  LOG.info("The file must not contain any leading or trailing whitespaces or line breaks!");  LOG.info("If you're ready, dismiss the dialog...");  StringBuilder message=new StringBuilder();  message.append("Please create a file in your web server's base directory.\n\n");  message.append("http://").append(domain).append("/.well-known/acme-challenge/").append(challenge.getToken()).append("\n\n");  message.append("Content:\n\n");  message.append(challenge.getAuthorization());  int option=JOptionPane.showConfirmDialog(null,message.toString(),"Prepare Challenge",JOptionPane.OK_CANCEL_OPTION);  if (option == JOptionPane.CANCEL_OPTION) {    LOG.error("User cancelled challenge");    return null;  }  return challenge;}  }
class C{  protected PrincipalUser(){  super(null);}  }
class C{  public Vector3 normalize(){  float length=this.length();  x*=1 / length;  y*=1 / length;  z*=1 / length;  return this;}  }
class C{  @Override public boolean isParseRetainMode(){  return parseRetain;}  }
class C{  public AbLevelSeries(){  super();}  }
class C{  private ScalesResult run(Relation<? extends NumberVector> rel){  final int dim=RelationUtil.dimensionality(rel);  LinearScale[] scales=new LinearScale[dim];  if (minmax == null) {    DoubleMinMax mm=new DoubleMinMax();    for (DBIDIter iditer=rel.iterDBIDs(); iditer.valid(); iditer.advance()) {      NumberVector vec=rel.get(iditer);      for (int d=0; d < dim; d++) {        final double val=vec.doubleValue(d);        if (val != val) {          continue;        }        mm.put(val);      }    }    LinearScale scale=new LinearScale(mm.getMin(),mm.getMax());    for (int i=0; i < dim; i++) {      scales[i]=scale;    }  } else {    LinearScale scale=new LinearScale(minmax[0],minmax[1]);    for (int i=0; i < dim; i++) {      scales[i]=scale;    }  }  ScalesResult res=new ScalesResult(scales);  return res;}  }
class C{  public void storeLocal(int i,JavaKind slotKind,ValueNode x){  assert verifyKind(slotKind,x);  if (locals[i] == TWO_SLOT_MARKER) {    locals[i - 1]=null;  }  locals[i]=x;  if (slotKind.needsTwoSlots()) {    locals[i + 1]=TWO_SLOT_MARKER;  } else   if (i < locals.length - 1 && locals[i + 1] == TWO_SLOT_MARKER) {    locals[i + 1]=null;  }}  }
class C{  private void checkInvariants(){  assert (wordsInUse == 0 || words[wordsInUse - 1] != 0);  assert (wordsInUse >= 0 && wordsInUse <= words.length);  assert (wordsInUse == words.length || words[wordsInUse] == 0);}  }
class C{  public BlockEncryptionHandler(final SecretKey encryptionKey,final int nonceLen,final CryptoAlgorithm cryptoAlgo,final byte[] messageId){  encryptionKey_=encryptionKey;  cryptoAlgo_=cryptoAlgo;  nonceLen_=nonceLen;  messageId_=messageId.clone();  tagLenBytes_=cryptoAlgo_.getTagLen();}  }
class C{  public void incDestroyRequest(){  this.stats.incInt(destroyRequestId,1);}  }
class C{  private static void recalcFontSize(final float scale,final int rotate,final FormObject formObject,final Component curComp){  final int size=GUIData.getFontSize(formObject,rotate,scale);  final Font resetFont=curComp.getFont();  final Font newFont=new Font(resetFont.getFontName(),resetFont.getStyle(),size);  curComp.setFont(newFont);}  }
class C{  public void clear(){  m_map.clear();}  }
class C{  public void addChild(FXGNode child){  if (child == null) {    throw new FXGException("InvalidChildNode",null,getNodeName());  } else {    throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidChildNode",child.getNodeName(),getNodeName());  }}  }
class C{  public GT_MetaGenerated_Tool(String aUnlocalized){  super(aUnlocalized);  GT_ModHandler.registerBoxableItemToToolBox(this);  setCreativeTab(GregTech_API.TAB_GREGTECH);  setMaxStackSize(1);  sInstances.put(getUnlocalizedName(),this);}  }
class C{  public mat4 scale(float x,float y,float z){  float[] m=this.m;  m[0]*=x;  m[4]*=y;  m[8]*=z;  m[1]*=x;  m[5]*=y;  m[9]*=z;  m[2]*=x;  m[6]*=y;  m[10]*=z;  m[3]*=x;  m[7]*=y;  m[11]*=z;  return this;}  }
class C{  private NamedIcon makeTextIcon(String text){  if (text == null || text.equals("")) {    text=" ";  }  int width=getFontMetrics(getFont()).stringWidth(text);  int height=getFontMetrics(getFont()).getHeight();  int hOffset=0;  int vOffset=getFontMetrics(getFont()).getAscent();  if (_popupUtil != null) {    if (_popupUtil.getFixedWidth() != 0) {switch (_popupUtil.getJustification()) {case PositionablePopupUtil.LEFT:        hOffset=_popupUtil.getBorderSize();      break;case PositionablePopupUtil.RIGHT:    hOffset=_popupUtil.getFixedWidth() - width;  hOffset+=_popupUtil.getBorderSize();break;default :hOffset=Math.max((_popupUtil.getFixedWidth() - width) / 2,0);hOffset+=_popupUtil.getBorderSize();break;}width=_popupUtil.getFixedWidth() + 2 * _popupUtil.getBorderSize();} else {width+=2 * (_popupUtil.getMargin() + _popupUtil.getBorderSize());hOffset+=_popupUtil.getMargin() + _popupUtil.getBorderSize();}if (_popupUtil.getFixedHeight() != 0) {vOffset=Math.max(vOffset + (_popupUtil.getFixedHeight() - height) / 2,0);vOffset+=_popupUtil.getBorderSize();height=_popupUtil.getFixedHeight() + 2 * _popupUtil.getBorderSize();} else {height+=2 * (_popupUtil.getMargin() + _popupUtil.getBorderSize());vOffset+=_popupUtil.getMargin() + _popupUtil.getBorderSize();}}BufferedImage bufIm=new BufferedImage(width + 2,height + 2,BufferedImage.TYPE_INT_ARGB);Graphics2D g2d=bufIm.createGraphics();g2d.setFont(getFont());g2d.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);g2d.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);if (_popupUtil != null) {if (_popupUtil.hasBackground()) {g2d.setColor(_popupUtil.getBackground());g2d.fillRect(0,0,width,height);}if (_popupUtil.getBorderSize() != 0) {g2d.setColor(_popupUtil.getBorderColor());g2d.setStroke(new java.awt.BasicStroke(2 * _popupUtil.getBorderSize()));g2d.drawRect(0,0,width,height);}}g2d.setColor(getForeground());g2d.drawString(text,hOffset,vOffset);NamedIcon icon=new NamedIcon(bufIm);g2d.dispose();return icon;}  }
class C{  public byte loadByte(){  return SimulatedMemory.getByte(this);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String generatePassword(int length){  SecureRandom random=new SecureRandom();  StringBuilder pass=new StringBuilder(length);  for (int i=0; i < length; i++) {    pass.append(PASSWORD_ALPHABET[random.nextInt(PASSWORD_ALPHABET.length)]);  }  return (pass.toString());}  }
class C{  public Hashtable(Map<? extends K,? extends V> t){  this(Math.max(2 * t.size(),11),0.75f);  putAll(t);}  }
class C{  @SuppressWarnings("rawtypes") public <T extends SimpleProperty>SimplePropertyAsserter<T> simpleProperty(Class<T> clazz){  return new SimplePropertyAsserter<T>(vcard.getProperties(clazz),this);}  }
class C{  private boolean syncMediaSelectedAsOptions(){switch (mMediaType) {case MediaItem.PHOTO:    if (!mMediaOptions.canSelectMultiPhoto()) {      mMediaListSelected.clear();      return true;    }  break;case MediaItem.VIDEO:if (!mMediaOptions.canSelectMultiVideo()) {  mMediaListSelected.clear();  return true;}break;default :break;}return false;}  }
class C{  public short readShort() throws IOException {  short v=dataInput.readShort();  offset+=2;  available-=2;  return v;}  }
class C{  public void sendNoRetry(ClusterNode node,GridCacheMessage msg,byte plc) throws IgniteCheckedException {  assert node != null;  assert msg != null;  if (!onSend(msg,null))   return;  try {    cctx.gridIO().send(node,TOPIC_CACHE,msg,plc);    if (log.isDebugEnabled())     log.debug("Sent cache message [msg=" + msg + ", node="+ U.toShortString(node)+ ']');  } catch (  IgniteCheckedException e) {    if (!cctx.discovery().alive(node.id()))     throw new ClusterTopologyCheckedException("Node left grid while sending message to: " + node.id(),e); else     throw e;  }}  }
class C{  public void handleEvent(ResourceEvent event,Object resource){  if (!shouldProceed(event)) {    return;  }switch (event) {case CACHE_CREATE:    GemFireCacheImpl createdCache=(GemFireCacheImpl)resource;  adapter.handleCacheCreation(createdCache);break;case CACHE_REMOVE:GemFireCacheImpl removedCache=(GemFireCacheImpl)resource;adapter.handleCacheRemoval(removedCache);break;case REGION_CREATE:Region createdRegion=(Region)resource;adapter.handleRegionCreation(createdRegion);break;case REGION_REMOVE:Region removedRegion=(Region)resource;adapter.handleRegionRemoval(removedRegion);break;case DISKSTORE_CREATE:DiskStore createdDisk=(DiskStore)resource;adapter.handleDiskCreation(createdDisk);break;case DISKSTORE_REMOVE:DiskStore removedDisk=(DiskStore)resource;adapter.handleDiskRemoval(removedDisk);break;case GATEWAYRECEIVER_CREATE:GatewayReceiver createdRecv=(GatewayReceiver)resource;adapter.handleGatewayReceiverCreate(createdRecv);break;case GATEWAYRECEIVER_START:GatewayReceiver startedRecv=(GatewayReceiver)resource;adapter.handleGatewayReceiverStart(startedRecv);break;case GATEWAYRECEIVER_STOP:GatewayReceiver stoppededRecv=(GatewayReceiver)resource;adapter.handleGatewayReceiverStop(stoppededRecv);break;case GATEWAYSENDER_CREATE:GatewaySender sender=(GatewaySender)resource;adapter.handleGatewaySenderCreation(sender);break;case GATEWAYSENDER_START:GatewaySender startedSender=(GatewaySender)resource;adapter.handleGatewaySenderStart(startedSender);break;case GATEWAYSENDER_STOP:GatewaySender stoppedSender=(GatewaySender)resource;adapter.handleGatewaySenderStop(stoppedSender);break;case GATEWAYSENDER_PAUSE:GatewaySender pausedSender=(GatewaySender)resource;adapter.handleGatewaySenderPaused(pausedSender);break;case GATEWAYSENDER_RESUME:GatewaySender resumedSender=(GatewaySender)resource;adapter.handleGatewaySenderResumed(resumedSender);break;case LOCKSERVICE_CREATE:DLockService createdLockService=(DLockService)resource;adapter.handleLockServiceCreation(createdLockService);break;case LOCKSERVICE_REMOVE:DLockService removedLockService=(DLockService)resource;adapter.handleLockServiceRemoval(removedLockService);break;case MANAGER_CREATE:adapter.handleManagerCreation();break;case MANAGER_START:adapter.handleManagerStart();break;case MANAGER_STOP:adapter.handleManagerStop();break;case ASYNCEVENTQUEUE_CREATE:AsyncEventQueue queue=(AsyncEventQueue)resource;adapter.handleAsyncEventQueueCreation(queue);break;case SYSTEM_ALERT:AlertDetails details=(AlertDetails)resource;adapter.handleSystemNotification(details);break;case CACHE_SERVER_START:CacheServer startedServer=(CacheServer)resource;adapter.handleCacheServerStart(startedServer);break;case CACHE_SERVER_STOP:CacheServer stoppedServer=(CacheServer)resource;adapter.handleCacheServerStop(stoppedServer);break;case LOCATOR_START:Locator loc=(Locator)resource;adapter.handleLocatorStart(loc);break;case CACHE_SERVICE_CREATE:CacheService service=(CacheService)resource;adapter.handleCacheServiceCreation(service);break;default :break;}}  }
class C{  public static IndexType createNonUnique(boolean hash,boolean spatial){  IndexType type=new IndexType();  type.hash=hash;  type.spatial=spatial;  return type;}  }
class C{  public static Sha256Hash createFrom(InputStream is) throws IOException {  try {    MessageDigest digest=getMessageDigest();    DigestInputStream digestInputStream=new DigestInputStream(is,digest);    ByteStreams.copy(digestInputStream,ByteStreams.nullOutputStream());    digestInputStream.close();    return createFrom(digest);  }  finally {    try {      is.close();    } catch (    IOException e) {    }  }}  }
class C{  public static void addArchive(String sourcePath,String destPath,ArcDef newArchive) throws IOException {  if (Util.sameFilePath(sourcePath,destPath)) {    throw new IllegalArgumentException(SOURCE_AND_DESTINATION_PATHS_ARE_THE_SAME);  }  RrdDb rrdSource=new RrdDb(sourcePath);  try {    RrdDef rrdDef=rrdSource.getRrdDef();    rrdDef.setPath(destPath);    rrdDef.addArchive(newArchive);    RrdDb rrdDest=new RrdDb(rrdDef);    try {      rrdSource.copyStateTo(rrdDest);    }  finally {      rrdDest.close();    }  }  finally {    rrdSource.close();  }}  }
class C{  public VcpcRunner(Graph graph,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graph,params,knowledgeBoxModel);}  }
class C{  private Base64(){}  }
class C{  public Train(){}  }
class C{  static Object parseValue(StreamTokenizer st,final int type) throws IOException {  final int token=st.nextToken();  if (type == TYPE_BOOLEAN) {    if (token != StreamTokenizer.TT_WORD) {      throw new ParseException(st,"boolean constant");    }    if ("true".equals(st.sval)) {      return Boolean.TRUE;    } else     if ("false".equals(st.sval)) {      return Boolean.FALSE;    }    throw new ParseException(st,"boolean constant");  } else   if ((type & 0xff) == 'I') {    if (token != StreamTokenizer.TT_WORD) {      throw new ParseException(st,"integer constant");    }    long value;    try {      value=Long.decode(st.sval);    } catch (    NumberFormatException ex) {      throw new ParseException(st,"integer constant");    }    int width=(type >> 8) & 0xff;switch (width) {case 1:      if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {        throw new ParseException(st,"8-bit integer constant");      }    return new Byte((byte)value);case 2:  if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {    throw new ParseException(st,"16-bit integer constant");  }return new Short((short)value);case 4:if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {throw new ParseException(st,"32-bit integer constant");}return new Integer((int)value);case 8:if (value < Long.MIN_VALUE || value > Long.MAX_VALUE) {throw new ParseException(st,"64-bit integer constant");}return new Long(value);default :throw new IllegalStateException("Internal error; unexpected integer type width " + width);}} else if ((type & 0xff) == 'F') {if (token != StreamTokenizer.TT_WORD) {throw new ParseException(st,"float constant");}double value;try {value=Double.parseDouble(st.sval);} catch (NumberFormatException ex) {throw new ParseException(st,"float constant");}if (((type >> 8) & 0xff) == 4) {double absValue=Math.abs(value);if (absValue != 0.0 && !Double.isInfinite(value) && !Double.isNaN(value)) {if (absValue < Float.MIN_VALUE || absValue > Float.MAX_VALUE) {throw new ParseException(st,"32-bit float constant");}}return new Float((float)value);} else {return new Double(value);}} else if (type == TYPE_STRING) {if (token == '"') {return st.sval;} else if (token == StreamTokenizer.TT_WORD && "null".equals(st.sval)) {return NULL_STRING;}throw new ParseException(st,"double-quoted string or 'null'");}throw new IllegalStateException("Internal error; unknown type " + type);}  }
class C{  public FieldLister(final Object object){  this.object=object;}  }
class C{  @Override public boolean contains(Object object){  return indexOf(object,0) != -1;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void create(@Nullable String spaceName,int parts,long init,long max,@Nullable GridOffHeapEvictListener lsnr){  spaceName=maskNull(spaceName);  GridOffHeapPartitionedMap m=GridOffHeapMapFactory.unsafePartitionedMap(parts,1024,0.75f,init,max,(short)512,lsnr);  GridOffHeapPartitionedMap old=offheap.put(spaceName,m);  if (old != null)   old.destruct();}  }
class C{  public void connect(){  for (  DeviceService service : services.values()) {    if (!service.isConnected()) {      service.connect();    }  }}  }
class C{  @HLEFunction(nid=0x94523E09,version=150) public int sceNetResolverDelete(@CheckArgument("checkRid") int rid){  RIDs.remove(rid);  SceUidManager.releaseUid(rid,uidPurpose);  return 0;}  }
class C{  @Override protected void initListeners(){}  }
class C{  public boolean isSealed(){  return mSealed;}  }
class C{  private static void addUserInfoToSignature(PGPPublicKey publicKey,PGPSignatureGenerator signer){  @SuppressWarnings("unchecked") Iterator<String> uidIter=publicKey.getUserIDs();  if (uidIter.hasNext()) {    PGPSignatureSubpacketGenerator spg=new PGPSignatureSubpacketGenerator();    spg.setSignerUserID(false,uidIter.next());    signer.setHashedSubpackets(spg.generate());  }}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  classInfos=(ClassInfo[])in.readObject();  doubles=(double[])in.readObject();  instanceInfos=(InstanceInfo[])in.readObject();  ints=(int[])in.readObject();  raw_metadata=(Metadata[])in.readObject();  semantic_metadata=new MetaData[raw_metadata.length];  methods=(Method[])in.readObject();  namespaces=(Namespace[])in.readObject();  namespaceSets=(NamespaceSet[])in.readObject();  nameData=(NameData[])in.readObject();  scriptInfos=(ScriptInfo[])in.readObject();  scriptName=(String)in.readObject();  strings=(String[])in.readObject();  uints=(long[])in.readObject();  dirty=false;}  }
class C{  public FSTCompletion(FST<Object> automaton){  this(automaton,true,true);}  }
class C{  public static Map<String,Object> returnError(String errorMessage,List<? extends Object> errorMessageList){  return returnProblem(ModelService.RESPOND_ERROR,errorMessage,errorMessageList,null,null);}  }
class C{  private void unify(UnifyElement source,UnifyElement destination) throws CommandException {  if (source == null || destination == null) {    return;  }  CnATreeElement sourceElement=getDao().findByUuid(source.getUuid(),RetrieveInfo.getPropertyInstance());  CnATreeElement destinationElement=getDao().findByUuid(destination.getUuid(),RetrieveInfo.getPropertyInstance());  if (!dontCopyPropertyValues) {    destinationElement.getEntity().copyEntity(sourceElement.getEntity(),propertyTypeBlacklist);  }  if (copyLinks) {    destinationElement=unifyLinks(sourceElement,destinationElement);  }  if (deleteSourceLinks) {    sourceElement=deleteLinks(sourceElement);    getDao().saveOrUpdate(sourceElement);    changedElementList.add(sourceElement);  }  getDao().saveOrUpdate(destinationElement);  changedElementList.add(destinationElement);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public int hashCode(){  int result=193;  long temp=Double.doubleToLongBits(this.x);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.y);  result=37 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.PRIMITIVE_PROPERTY_TYPE;}  }
class C{  public static void main(String[] args){  javax.swing.JApplet theApplet=new AppletGUI();  theApplet.init();  javax.swing.JFrame window=new javax.swing.JFrame(ComputerPlayer.engineName);  window.setContentPane(theApplet);  window.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);  window.pack();  window.setVisible(true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public synchronized void beginTurn(){  final long start=System.nanoTime();  try {    destroyObsoleteZones();  } catch (  final Exception e) {    logger.error("error in beginTurn",e);  }  try {    logNumberOfPlayersOnline();  } catch (  final Exception e) {    logger.error("error in beginTurn",e);  }  try {    handleKilledEntities();  } catch (  final Exception e) {    logger.error("error in beginTurn",e);  }  try {    executePlayerLogic();  } catch (  final Exception e) {    logger.error("error in beginTurn",e);  }  try {    executeNPCsPreLogic();  } catch (  final Exception e) {    logger.error("error in beginTurn",e);  }  try {    handlePlayersRmTexts();  } catch (  final Exception e) {    logger.error("error in beginTurn",e);  }  logger.debug("Begin turn: " + (System.nanoTime() - start) / 1000000.0);}  }
class C{  private void redrawComposite(){  for (  final Control c : this.getChildren()) {    c.dispose();  }  int numberOfColumns=1;  if (this.image != null) {    numberOfColumns++;  }  super.setLayout(new GridLayout(numberOfColumns,false));  createContent();  drawBackground();}  }
class C{  private Packet nextPacket(){  Packet packet=null;  while (!done && (packet=queue.poll()) == null) {    try {synchronized (queue) {        queue.wait();      }    } catch (    InterruptedException ie) {    }  }  return packet;}  }
class C{  public Matrix4x3f invertOrtho(){  return invertOrtho(this);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,Math.exp(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public LinkedHashMap<InetAddress,Float> effectiveOwnership(String keyspace) throws IllegalStateException {  AbstractReplicationStrategy strategy;  if (keyspace != null) {    Keyspace keyspaceInstance=Schema.instance.getKeyspaceInstance(keyspace);    if (keyspaceInstance == null)     throw new IllegalArgumentException("The keyspace " + keyspace + ", does not exist");    if (keyspaceInstance.getReplicationStrategy() instanceof LocalStrategy)     throw new IllegalStateException("Ownership values for keyspaces with LocalStrategy are meaningless");    strategy=keyspaceInstance.getReplicationStrategy();  } else {    List<String> userKeyspaces=Schema.instance.getUserKeyspaces();    if (userKeyspaces.size() > 0) {      keyspace=userKeyspaces.iterator().next();      AbstractReplicationStrategy replicationStrategy=Schema.instance.getKeyspaceInstance(keyspace).getReplicationStrategy();      for (      String keyspaceName : userKeyspaces) {        if (!Schema.instance.getKeyspaceInstance(keyspaceName).getReplicationStrategy().hasSameSettings(replicationStrategy))         throw new IllegalStateException("Non-system keyspaces don't have the same replication settings, effective ownership information is meaningless");      }    } else {      keyspace="system_traces";    }    Keyspace keyspaceInstance=Schema.instance.getKeyspaceInstance(keyspace);    if (keyspaceInstance == null)     throw new IllegalArgumentException("The node does not have " + keyspace + " yet, probably still bootstrapping");    strategy=keyspaceInstance.getReplicationStrategy();  }  TokenMetadata metadata=tokenMetadata.cloneOnlyTokenMap();  Collection<Collection<InetAddress>> endpointsGroupedByDc=new ArrayList<>();  SortedMap<String,Collection<InetAddress>> sortedDcsToEndpoints=new TreeMap<>();  sortedDcsToEndpoints.putAll(metadata.getTopology().getDatacenterEndpoints().asMap());  for (  Collection<InetAddress> endpoints : sortedDcsToEndpoints.values())   endpointsGroupedByDc.add(endpoints);  Map<Token,Float> tokenOwnership=getPartitioner().describeOwnership(tokenMetadata.sortedTokens());  LinkedHashMap<InetAddress,Float> finalOwnership=Maps.newLinkedHashMap();  Multimap<InetAddress,Range<Token>> endpointToRanges=strategy.getAddressRanges();  for (  Collection<InetAddress> endpoints : endpointsGroupedByDc) {    for (    InetAddress endpoint : endpoints) {      float ownership=0.0f;      for (      Range<Token> range : endpointToRanges.get(endpoint)) {        if (tokenOwnership.containsKey(range.right))         ownership+=tokenOwnership.get(range.right);      }      finalOwnership.put(endpoint,ownership);    }  }  return finalOwnership;}  }
class C{  public static boolean isEncoded(final HttpEntity entity){  Header h=entity.getContentType();  if (h != null) {    HeaderElement[] elems=h.getElements();    if (elems.length > 0) {      String contentType=elems[0].getName();      return contentType.equalsIgnoreCase(CONTENT_TYPE);    } else {      return false;    }  } else {    return false;  }}  }
class C{  private TypeArgumentProposal[] computeTypeArgumentProposals() throws JavaModelException {  if (fTypeArgumentProposals == null) {    IType type=(IType)getJavaElement();    if (type == null)     return new TypeArgumentProposal[0];    ITypeParameter[] parameters=type.getTypeParameters();    if (parameters.length == 0)     return new TypeArgumentProposal[0];    TypeArgumentProposal[] arguments=new TypeArgumentProposal[parameters.length];    ITypeBinding expectedTypeBinding=getExpectedType();    if (expectedTypeBinding != null && expectedTypeBinding.isParameterizedType()) {      IType expectedType=(IType)expectedTypeBinding.getJavaElement();      IType[] path=computeInheritancePath(type,expectedType);      if (path == null)       return new TypeArgumentProposal[0];      int[] indices=new int[parameters.length];      for (int paramIdx=0; paramIdx < parameters.length; paramIdx++) {        indices[paramIdx]=mapTypeParameterIndex(path,path.length - 1,paramIdx);      }      ITypeBinding[] typeArguments=expectedTypeBinding.getTypeArguments();      for (int paramIdx=0; paramIdx < parameters.length; paramIdx++) {        if (indices[paramIdx] != -1) {          ITypeBinding binding=typeArguments[indices[paramIdx]];          arguments[paramIdx]=computeTypeProposal(binding,parameters[paramIdx]);        }      }    }    for (int i=0; i < arguments.length; i++) {      if (arguments[i] == null) {        arguments[i]=computeTypeProposal(parameters[i]);      }    }    fTypeArgumentProposals=arguments;  }  return fTypeArgumentProposals;}  }
class C{  public void print(double x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).print(x);  flush();}  }
class C{  @Override public void run(){  amIActive=true;  String redHeader, greenHeader, blueHeader, intensityHeader, saturationHeader, hueHeader;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  intensityHeader=args[0];  hueHeader=args[1];  saturationHeader=args[2];  redHeader=args[3];  greenHeader=args[4];  blueHeader=args[5];  if (redHeader.isEmpty() || greenHeader.isEmpty() || blueHeader == null || intensityHeader.isEmpty() || hueHeader.isEmpty() || saturationHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redMin, greenMin, blueMin;    double r, g, b;    double i, s, h;    float progress;    WhiteboxRasterInfo intensity=new WhiteboxRasterInfo(intensityHeader);    int rows=intensity.getNumberRows();    int cols=intensity.getNumberColumns();    WhiteboxRasterInfo hue=new WhiteboxRasterInfo(hueHeader);    if (hue.getNumberRows() != rows || hue.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo saturation=new WhiteboxRasterInfo(saturationHeader);    if (saturation.getNumberRows() != rows || saturation.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    double iNoData=intensity.getNoDataValue();    double hNoData=hue.getNoDataValue();    double sNoData=saturation.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(redHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    WhiteboxRaster green=new WhiteboxRaster(greenHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    WhiteboxRaster blue=new WhiteboxRaster(blueHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    double[] dataI, dataH, dataS;    for (row=0; row < rows; row++) {      dataI=intensity.getRowValues(row);      dataH=hue.getRowValues(row);      dataS=saturation.getRowValues(row);      for (col=0; col < cols; col++) {        i=dataI[col];        h=dataH[col];        s=dataS[col];        if ((i != iNoData) && (h != hNoData) && (s != sNoData)) {          if (h <= 1) {            r=i * (1 + 2 * s - 3 * s * h) / 3;            g=i * (1 - s + 3 * s * h) / 3;            b=i * (1 - s) / 3;          } else           if (h <= 2) {            r=i * (1 - s) / 3;            g=i * (1 + 2 * s - 3 * s * (h - 1)) / 3;            b=i * (1 - s + 3 * s * (h - 1)) / 3;          } else {            r=i * (1 - s + 3 * s * (h - 2)) / 3;            g=i * (1 - s) / 3;            b=i * (1 + 2 * s - 3 * s * (h - 2)) / 3;          }          red.setValue(row,col,r * 255);          green.setValue(row,col,g * 255);          blue.setValue(row,col,b * 255);        } else {          red.setValue(row,col,iNoData);          green.setValue(row,col,iNoData);          blue.setValue(row,col,iNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    intensity.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    intensity.addMetadataEntry("Created on " + new Date());    intensity.close();    hue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    hue.addMetadataEntry("Created on " + new Date());    hue.close();    saturation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    saturation.addMetadataEntry("Created on " + new Date());    saturation.close();    red.close();    green.close();    blue.close();    returnData(redHeader);    returnData(greenHeader);    returnData(blueHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void shutdown(){  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  try {    mbs.unregisterMBean(new ObjectName(MBEAN_NAME));  } catch (  JMException e) {    throw new RuntimeException(e);  }}  }
class C{  public String validateEntityName(String entityName) throws GenericEntityException {  if (entityName == null) {    return null;  }  Set<String> allEntities=this.getEntityNames();  while (!allEntities.contains(entityName) && entityName.length() > 0) {    entityName=entityName.substring(1);  }  return (entityName.length() > 0 ? entityName : null);}  }
class C{  public boolean contains(long val){  return index(val) >= 0;}  }
class C{  public Stat addUsageStat(IsilonSmartQuota quota,Map<String,Object> keyMap,String fsNativeGuid,IsilonApi isilonApi){  Stat stat=zeroRecordGenerator.injectattr(keyMap,fsNativeGuid,null);  if (stat != null) {    try {      DbClient dbClient=(DbClient)keyMap.get(Constants.dbClient);      stat.setTimeInMillis((Long)keyMap.get(Constants._TimeCollected));      stat.setTimeCollected((Long)keyMap.get(Constants._TimeCollected));      statsColumnInjector.injectColumns(stat,dbClient);      long provisionedCapacity=0L;      Thresholds threshold=quota.getThresholds();      if (threshold != null && threshold.getHard() != null) {        provisionedCapacity=threshold.getHard();      }      stat.setProvisionedCapacity(provisionedCapacity);      long usedCapacity=quota.getUsagePhysical();      stat.setAllocatedCapacity(usedCapacity);      URIQueryResultList snapURIList=new URIQueryResultList();      dbClient.queryByConstraint(ContainmentConstraint.Factory.getFileshareSnapshotConstraint(stat.getResourceId()),snapURIList);      int snapCount=0;      long fsSnapshotSize=0;      IsilonSnapshot isiSnap;      for (      URI snapURI : snapURIList) {        Snapshot snap=dbClient.queryObject(Snapshot.class,snapURI);        if (snap != null && (!snap.getInactive())) {          String nativeId=snap.getNativeId();          try {            isiSnap=isilonApi.getSnapshot(nativeId);          } catch (          IsilonException iex) {            _log.error(String.format("Stat: %s: can not get snapshot size for snapshot: %s",fsNativeGuid,nativeId),iex);            continue;          }          snapCount++;          fsSnapshotSize+=Long.valueOf(isiSnap.getSize());        }      }      stat.setSnapshotCount(snapCount);      _log.debug(String.format("Stat: %s: snapshot count: %s",fsNativeGuid,snapCount));      stat.setSnapshotCapacity(fsSnapshotSize);      _log.debug(String.format("Stat: %s: snapshot size: %s",fsNativeGuid,fsSnapshotSize));      _log.debug(String.format("Stat: %s: %s: provisioned capacity(%s): used capacity(%s)",stat.getResourceId(),fsNativeGuid,provisionedCapacity,usedCapacity));    } catch (    DatabaseException ex) {      _log.error("Query to db failed for FileShare id {}, skipping recording usage stat.",stat.getResourceId(),ex);    }  }  return stat;}  }
class C{  protected void parsePositions(String prefix,Properties props){  String entry=null;  prefix=PropUtils.getScopedPropertyPrefix(prefix);  for (int index=1; index > 0 && index < 15; index++) {    entry=props.getProperty(prefix + Integer.toString(index));    if (entry != null) {      addPositionChoice(index,entry,prefix,props);    } else {      index=-1;    }  }  entry=props.getProperty(prefix + "128");  if (entry != null) {    addPositionChoice(128,entry,prefix,props);  }}  }
class C{  public static boolean hasTaskID(){  return BaggageContents.contains(XTRACE_BAGGAGE_NAMESPACE,TASK_ID_BAGGAGE_FIELD);}  }
class C{  @Override public void propertyChange(final PropertyChangeEvent e){  final String prop=e.getPropertyName();  if ("font".equals(prop)) {    recalcDimensions();  }}  }
class C{  public static boolean testAarAar(Vector2fc minA,Vector2fc maxA,Vector2fc minB,Vector2fc maxB){  return testAarAar(minA.x(),minA.y(),maxA.x(),maxA.y(),minB.x(),minB.y(),maxB.x(),maxB.y());}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){}  }
class C{  public TarEntry(byte[] headerBuf){  this();  parseTarHeader(headerBuf);}  }
class C{  public static Typeface droidSerifRegular(Context context){  return FontSourceProcessor.process(R.raw.droidserif_regular,context);}  }
class C{  private CaseStruct findDefaultMatch(FacesContext ctx,String fromAction,String outcome,String toFlowDocumentId,Map<String,Set<NavigationCase>> navMap){  Set<NavigationCase> caseSet=navMap.get("*");  if (caseSet == null) {    return null;  }  CaseStruct result=determineViewFromActionOutcome(ctx,caseSet,fromAction,outcome,toFlowDocumentId);  if (null != result) {    FlowHandler flowHandler=ctx.getApplication().getFlowHandler();    if (null != flowHandler) {      result.currentFlow=flowHandler.getCurrentFlow(ctx);      result.newFlow=result.currentFlow;    }  }  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public static ComponentUI createUI(JComponent c){  c.addFocusListener(FocusListenerImpl.getInstance());  return new BEFormattedTextFieldUI();}  }
class C{  protected static String c2h(String camel){  StringBuilder b=new StringBuilder(camel.length() + 5);  for (int i=0; i < camel.length(); ++i) {    char c=camel.charAt(i);    if (Character.isUpperCase(c)) {      if (i != 0)       b.append('-');      b.append(Character.toLowerCase(c));    } else {      b.append(camel.charAt(i));    }  }  return b.toString();}  }
class C{  public int compareTo(MetadataKey<?> other){  if (other == this) {    return 0;  }  if (!(other instanceof ElementKey<?,?>)) {    return 1;  }  int compare=compareQName(id,other.id);  if (compare != 0) {    return compare;  }  compare=compareClass(elementType,((ElementKey<?,?>)other).elementType);  if (compare != 0) {    return compare;  }  return compareClass(datatype,other.datatype);}  }
class C{  private void doCertReq(String alias,String sigAlgName,PrintStream out) throws Exception {  if (alias == null) {    alias=keyAlias;  }  Pair<Key,char[]> objs=recoverKey(alias,storePass,keyPass);  PrivateKey privKey=(PrivateKey)objs.fst;  if (keyPass == null) {    keyPass=objs.snd;  }  Certificate cert=keyStore.getCertificate(alias);  if (cert == null) {    MessageFormat form=new MessageFormat(rb.getString("alias.has.no.public.key.certificate."));    Object[] source={alias};    throw new Exception(form.format(source));  }  PKCS10 request=new PKCS10(cert.getPublicKey());  CertificateExtensions ext=createV3Extensions(null,null,v3ext,cert.getPublicKey(),null);  request.getAttributes().setAttribute(X509CertInfo.EXTENSIONS,new PKCS10Attribute(PKCS9Attribute.EXTENSION_REQUEST_OID,ext));  if (sigAlgName == null) {    sigAlgName=getCompatibleSigAlgName(privKey.getAlgorithm());  }  Signature signature=Signature.getInstance(sigAlgName);  signature.initSign(privKey);  X500Name subject=dname == null ? new X500Name(((X509Certificate)cert).getSubjectDN().toString()) : new X500Name(dname);  request.encodeAndSign(subject,signature);  request.print(out);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.EssenceDescriptorList buildEssenceDescriptorList(List<org.smpte_ra.schemas.st2067_2_2016.EssenceDescriptorBaseType> essenceDescriptorBaseTypes){  org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.EssenceDescriptorList essenceDescriptorList=new org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.EssenceDescriptorList();  essenceDescriptorList.getEssenceDescriptor().addAll(essenceDescriptorBaseTypes);  return essenceDescriptorList;}  }
class C{  public boolean isMatched(int v){  validate(v);  return mate[v] != UNMATCHED;}  }
class C{  private void startAppendTimer(){  LOGGER.debug("{} - Starting append timer",context.getCluster().member().address());  appendTimer=context.getThreadContext().schedule(Duration.ZERO,context.getHeartbeatInterval(),null);}  }
class C{  public AcceptRequestInterceptor(final String accept){  this.accept=accept;  checkArgument(!accept.isEmpty(),"accept must not be empty");}  }
class C{  public BOMTree(String productId,String bomTypeId,Date inDate,Delegator delegator,LocalDispatcher dispatcher,GenericValue userLogin) throws GenericEntityException {  this(productId,bomTypeId,inDate,EXPLOSION,delegator,dispatcher,userLogin);}  }
class C{  public static byte packVersionByte(final int schemaVersion,final int typeOrdinal){  return (byte)(((NIBBLE_MASK & schemaVersion) << NIBBLE_BITS) | (NIBBLE_MASK & typeOrdinal));}  }
class C{  public void windowDeactivated(WindowEvent e){  ((WindowListener)a).windowDeactivated(e);  ((WindowListener)b).windowDeactivated(e);}  }
class C{  public static void stop(ClassLoader loader){  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof EnvironmentClassLoader) {      ((EnvironmentClassLoader)loader).stop();      return;    }  }  ArrayList<EnvLoaderListener> listeners;  listeners=new ArrayList<EnvLoaderListener>();  listeners.addAll(_globalEnvironmentListeners);  _globalEnvironmentListeners.clear();  for (int i=0; i < listeners.size(); i++) {    EnvLoaderListener listener=listeners.get(i);    listener.environmentStop(null);  }}  }
class C{  private VolumeDescriptor createDescriptorForBlockVolumeCreation(URI storagePoolURI,URI volumeURI,Map<URI,StorageSystem> storageSystemMap,Map<URI,Volume> volumeMap) throws IOException, WorkflowException {  StoragePool storagePool=_dbClient.queryObject(StoragePool.class,storagePoolURI);  URI storageSystemURI=storagePool.getStorageDevice();  StorageSystem storageSystem=null;  if (storageSystemMap.containsKey(storageSystemURI)) {    storageSystem=storageSystemMap.get(storageSystemURI);  } else {    storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemURI);    storageSystemMap.put(storageSystemURI,storageSystem);  }  Volume volume=_dbClient.queryObject(Volume.class,volumeURI);  volumeMap.put(volumeURI,volume);  URI cgURI=null;  if (!NullColumnValueGetter.isNullURI(volume.getConsistencyGroup())) {    cgURI=volume.getConsistencyGroup();  }  VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();  capabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,volume.getCapacity());  capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,new Integer(1));  return new VolumeDescriptor(VolumeDescriptor.Type.BLOCK_DATA,storageSystemURI,volumeURI,storagePoolURI,cgURI,capabilities);}  }
class C{  TypeVariableBV typeVariable(Local local){  TypeVariableBV result=typeVariableMap.get(local);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariableBV(id,this);    typeVariableList.set(id,result);    typeVariableMap.put(local,result);    if (DEBUG) {      G.v().out.println("[LOCAL VARIABLE \"" + local + "\" -> "+ id+ "]");    }  }  return result;}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new NullPointerException("No input instance format defined");  }  boolean conversionDone=false;  if (m_replaceMissing != null) {    if (m_replaceMissing.batchFinished()) {      Instance newInstance, instance;      while ((instance=m_replaceMissing.output()) != null) {        if (!m_OutputFormatDefined) {          setOutputFormat();        }        if (m_ntob != null) {          m_ntob.input(instance);        } else {          newInstance=convertInstance(instance);          push(newInstance);        }      }      if (m_ntob != null) {        if (m_ntob.batchFinished()) {          while ((instance=m_ntob.output()) != null) {            if (!m_OutputFormatDefined) {              setOutputFormat();            }            newInstance=convertInstance(instance);            push(newInstance);          }          m_ntob=null;        }      }      m_replaceMissing=null;      conversionDone=true;    }  }  if (conversionDone == false && m_ntob != null) {    if (m_ntob.batchFinished()) {      Instance newInstance, instance;      while ((instance=m_ntob.output()) != null) {        if (!m_OutputFormatDefined) {          setOutputFormat();        }        newInstance=convertInstance(instance);        push(newInstance);      }      m_ntob=null;    }  }  m_OutputFormatDefined=false;  return super.batchFinished();}  }
class C{  public static ClassDescriptor createClassDescriptorFromResourceName(String resourceName){  if (!isClassResource(resourceName)) {    throw new IllegalArgumentException("Resource " + resourceName + " is not a class");  }  return createClassDescriptor(resourceName.substring(0,resourceName.length() - 6));}  }
class C{  protected synchronized void write(long offset,byte[] b) throws IOException {  if (byteBuffer != null) {    byteBuffer.position((int)offset);    byteBuffer.put(b);  } else {    throw new IOException("Write failed, file " + getPath() + " not mapped for I/O");  }}  }
class C{  public void runAttack() throws IOException {  if (!tryConnect()) {    System.err.println("[!] Server appears to be down. Please start the server before attacking!");    return;  }  Socket socket=null;  try {    socket=buildSocket();    OutputStream os=socket.getOutputStream();    int overhead=7;    if (PAYLOAD_SIZE > 0xFFFF) {      overhead=13;    }    String requestHeader=REQUEST_START.replace("{{SIZE}}",String.valueOf(PAYLOAD_SIZE + overhead));    os.write(requestHeader.getBytes());    JInfinity jin=new JInfinity();    jin.setListener(this,10 * 1000);    jin.sendAttack(os,PAYLOAD_SIZE);  } catch (  Exception e) {    e.printStackTrace();  } finally {    IOUtils.closeQuietly(socket);  }}  }
class C{  public static TelegramBot login(String authToken){  try {    HttpRequestWithBody request=Unirest.post(API_URL + "bot" + authToken+ "/getMe");    HttpResponse<String> response=request.asString();    JSONObject jsonResponse=Utils.processResponse(response);    if (jsonResponse != null && Utils.checkResponseStatus(jsonResponse)) {      JSONObject result=jsonResponse.getJSONObject("result");      return new TelegramBot(authToken,result.getInt("id"),result.getString("first_name"),result.getString("username"));    }  } catch (  UnirestException e) {    e.printStackTrace();  }  return null;}  }
class C{  protected ISolutionSetStats compile(){  final Set<IVariable<?>> alwaysBound=new HashSet<IVariable<?>>(usedVars);  alwaysBound.removeAll(notAlwaysBound);  final Set<IVariable<?>> materialized=new HashSet<IVariable<?>>(usedVars);  materialized.removeAll(notMaterialized);  final Map<IVariable<?>,IConstant<?>> constants=new HashMap<IVariable<?>,IConstant<?>>(firstBoundValue);  for (  IVariable<?> v : notConstant) {    constants.remove(v);  }  return new CompiledSolutionSetStats(nsolutions,usedVars,alwaysBound,notAlwaysBound,materialized,constants);}  }
class C{  private void convertToTermsQuery(FilterJoinNode node){  Map<String,Object> parent=node.getParentSourceMap();  FilterJoinTerms terms=node.getTerms();  BytesRef bytes=terms.getEncodedTerms();  parent.remove(FilterJoinBuilder.NAME);  Map<String,Object> queryParams=new HashMap<>();  queryParams.put("value",bytes.bytes);  queryParams.put("_cache_key",node.getCacheId());  Map<String,Object> field=new HashMap<>();  field.put(node.getField(),queryParams);  Map<String,Object> termsQuery=new HashMap<>();  if (node.getTermsEncoding().equals(TermsByQueryRequest.TermsEncoding.BYTES)) {    termsQuery.put(TermsEnumTermsQueryParser.NAME,field);  } else {    termsQuery.put(FieldDataTermsQueryParser.NAME,field);  }  Map<String,Object> constantScoreQueryParams=new HashMap<>();  constantScoreQueryParams.put("filter",termsQuery);  parent.put(ConstantScoreQueryParser.NAME,constantScoreQueryParams);  node.setState(FilterJoinNode.State.CONVERTED);  this.blockingQueue.poll();}  }
class C{  public String toString(){  return super.toString() + "\nOffice hours: " + officeHours+ "\nRank: "+ rank;}  }
class C{  public int nextInt(int n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);  if ((n & -n) == n) {    int y;    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];      }      for (; kk < N - 1; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];      }      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];      mti=0;    }    y=mt[mti++];    y^=y >>> 11;    y^=(y << 7) & TEMPERING_MASK_B;    y^=(y << 15) & TEMPERING_MASK_C;    y^=(y >>> 18);    return (int)((n * (long)(y >>> 1)) >> 31);  }  int bits, val;  do {    int y;    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];      }      for (; kk < N - 1; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];      }      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];      mti=0;    }    y=mt[mti++];    y^=y >>> 11;    y^=(y << 7) & TEMPERING_MASK_B;    y^=(y << 15) & TEMPERING_MASK_C;    y^=(y >>> 18);    bits=(y >>> 1);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.969 -0500",hash_original_method="2A3BA8C930CC8D70EFDC06E422B5CE17",hash_generated_method="A68900B8650C713DF8FE69E78EA5F319") public static void dumpHprofData(String fileName) throws IOException {}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  Shape hotspot=null;  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  double x=dataset.getXValue(series,item);  double y=dataset.getYValue(series,item);  double colorValue=((XYZDataset)dataset).getZValue(series,item);  double normalized=(colorValue - minColor) / (maxColor - minColor);  if (Double.isNaN(x) || Double.isNaN(y)) {    return;  }  double transX=domainAxis.valueToJava2D(x,dataArea,plot.getDomainAxisEdge());  double transY=rangeAxis.valueToJava2D(y,dataArea,plot.getRangeAxisEdge());  PlotOrientation orientation=plot.getOrientation();  Shape shape=getItemShape(series,item);  if (orientation == PlotOrientation.HORIZONTAL) {    shape=ShapeUtilities.createTranslatedShape(shape,transY,transX);  } else   if (orientation == PlotOrientation.VERTICAL) {    shape=ShapeUtilities.createTranslatedShape(shape,transX,transY);  }  hotspot=shape;  if (shape.intersects(dataArea)) {    g2.setPaint(colorProvider.getPointColor(normalized));    g2.fill(shape);    if (getDrawOutlines()) {      if (getUseOutlinePaint()) {        g2.setPaint(getItemOutlinePaint(series,item));      } else {        g2.setPaint(getItemPaint(series,item));      }      g2.setStroke(getItemOutlineStroke(series,item));      g2.draw(shape);    }  }  if (entities != null) {    addEntity(entities,hotspot,dataset,series,item,transX,transY);  }}  }
class C{  public void scheduleSync(boolean onlyLocalChanges){  Log.d(getClass().getSimpleName(),"Sync requested (" + (onlyLocalChanges ? "onlyLocalChanges" : "full") + "; "+ (networkConnected ? "network connected" : "network NOT connected")+ ", "+ (syncActive ? "sync active" : "sync NOT active")+ ") ...");  if (isSyncPossible() && (!syncActive || onlyLocalChanges)) {    Log.d(getClass().getSimpleName(),"... starting now");    SyncTask syncTask=new SyncTask(onlyLocalChanges);    syncTask.addCallbacks(callbacksPush);    callbacksPush=new ArrayList<>();    if (!onlyLocalChanges) {      syncTask.addCallbacks(callbacksPull);      callbacksPull=new ArrayList<>();    }    syncTask.execute();  } else   if (!onlyLocalChanges) {    Log.d(getClass().getSimpleName(),"... scheduled");    syncScheduled=true;  } else {    Log.d(getClass().getSimpleName(),"... do nothing");  }}  }
class C{  public Bundler putLong(String key,long value){  bundle.putLong(key,value);  return this;}  }
class C{  public EncryptedPdfException(String message){  super(message);}  }
class C{  public int supportedSpeedModes(){  return (DccThrottle.SpeedStepMode128 | DccThrottle.SpeedStepMode28 | DccThrottle.SpeedStepMode27| DccThrottle.SpeedStepMode14);}  }
class C{  Type newMethodTemplate(Type restype,List<Type> argtypes,List<Type> typeargtypes){  MethodType mt=new MethodType(argtypes,restype,List.<Type>nil(),syms.methodClass);  return (typeargtypes == null) ? mt : (Type)new ForAll(typeargtypes,mt);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (immutable_1: ");  result.append(immutable_1);  result.append(')');  return result.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + String.valueOf(progress) + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CircularStringBuffer(final int maxLines){  m_maxSize=maxLines;}  }
class C{  public RecursiveCallback(GLUtessellator tessellator){  if (tessellator == null) {    String msg=Logging.getMessage("nullValue.TessellatorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.tess=tessellator;}  }
class C{  public void putField(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTFIELD,owner,name,type);}  }
class C{  private boolean parseAtom(PsiBuilder builder){  PsiBuilder.Marker marker=parseGroup(builder);  if (marker == null) {    return false;  }  marker=marker.precede();  if (parseQuantifier(builder)) {    marker.done(RegExpElementTypes.CLOSURE);  } else {    marker.drop();  }  return true;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (isView() && isDeleteable())   setIsDeleteable(false);  return true;}  }
class C{  public boolean approxEquals(final S1Interval y,double maxError){  if (isEmpty()) {    return y.getLength() <= maxError;  }  if (y.isEmpty()) {    return getLength() <= maxError;  }  return (Math.abs(Math.IEEEremainder(y.lo() - lo(),2 * S2.M_PI)) + Math.abs(Math.IEEEremainder(y.hi() - hi(),2 * S2.M_PI))) <= maxError;}  }
class C{  public TDoubleDoubleHashMap absoluteDistribution(double binsize){  TDoubleDoubleHashMap freq=new TDoubleDoubleHashMap();  int size=values.size();  for (int i=0; i < size; i++) {    double val=Math.ceil(values.get(i) / binsize) * binsize;    double cumWeight=freq.get(val);    cumWeight+=weights.get(i);    freq.put(val,cumWeight);  }  return freq;}  }
class C{  private static MetricTimeSeries convert(SolrDocument doc,long queryStart,long queryEnd,boolean decompress){  String metric=doc.getFieldValue(MetricTSSchema.METRIC).toString();  long tsStart=(long)doc.getFieldValue(Schema.START);  long tsEnd=(long)doc.getFieldValue(Schema.END);  byte[] data=((ByteBuffer)doc.getFieldValue(Schema.DATA)).array();  MetricTimeSeries.Builder ts=new MetricTimeSeries.Builder(metric);  for (  Map.Entry<String,Object> field : doc) {    if (MetricTSSchema.isUserDefined(field.getKey())) {      if (field.getValue() instanceof ByteBuffer) {        ts.attribute(field.getKey(),((ByteBuffer)field.getValue()).array());      } else {        ts.attribute(field.getKey(),field.getValue());      }    }  }  if (decompress) {    InputStream decompressed=Compression.decompressToStream(data);    ProtoBufMetricTimeSeriesSerializer.from(decompressed,tsStart,tsEnd,queryStart,queryEnd,ts);    IOUtils.closeQuietly(decompressed);  }  return ts.build();}  }
class C{  public void initiateConnectionChanges(){  this.block.initiateConnectionChanges();}  }
class C{  public static String unQuoteIdentifier(String identifier,String quoteChar){  if (identifier == null) {    return null;  }  identifier=identifier.trim();  int quoteCharLength=quoteChar.length();  if (quoteCharLength == 0 || " ".equals(quoteChar)) {    return identifier;  }  if (identifier.startsWith(quoteChar) && identifier.endsWith(quoteChar)) {    String identifierQuoteTrimmed=identifier.substring(quoteCharLength,identifier.length() - quoteCharLength);    int quoteCharPos=identifierQuoteTrimmed.indexOf(quoteChar);    while (quoteCharPos >= 0) {      int quoteCharNextExpectedPos=quoteCharPos + quoteCharLength;      int quoteCharNextPosition=identifierQuoteTrimmed.indexOf(quoteChar,quoteCharNextExpectedPos);      if (quoteCharNextPosition == quoteCharNextExpectedPos) {        quoteCharPos=identifierQuoteTrimmed.indexOf(quoteChar,quoteCharNextPosition + quoteCharLength);      } else {        return identifier;      }    }    return identifier.substring(quoteCharLength,(identifier.length() - quoteCharLength)).replaceAll(quoteChar + quoteChar,quoteChar);  }  return identifier;}  }
class C{  TIntIntKeyHashIterator(TPrimitiveHash hash){  super(hash);}  }
class C{  public DebuggerTemplateManager(final SQLProvider provider){  sqlProvider=Preconditions.checkNotNull(provider,"IE00805: Provider argument can not be null");}  }
class C{  protected void computeBoundsIfNeeded(DrawContext dc){  if (this.bounds != null)   return;  TextRenderer textRenderer=OGLTextRenderer.getOrCreateTextRenderer(dc.getTextRendererCache(),this.getFont());  int width=0;  int maxLineHeight=0;  this.lineBounds=new Rectangle2D[this.lines.length];  for (int i=0; i < this.lines.length; i++) {    Rectangle2D lineBounds=textRenderer.getBounds(lines[i]);    width=(int)Math.max(lineBounds.getWidth(),width);    double thisLineHeight=Math.abs(lineBounds.getY());    maxLineHeight=(int)Math.max(thisLineHeight,maxLineHeight);    this.lineBounds[i]=lineBounds;  }  this.lineHeight=maxLineHeight;  this.bounds=new Rectangle(this.lines.length,maxLineHeight,width,this.lines.length * maxLineHeight + this.lines.length * this.lineSpacing);}  }
class C{  public boolean isSwipeToDismiss(){  return isSwipeLeftRight;}  }
class C{  public static GankFragment newInstance(int year,int month,int day){  GankFragment fragment=new GankFragment();  Bundle args=new Bundle();  args.putInt(ARG_YEAR,year);  args.putInt(ARG_MONTH,month);  args.putInt(ARG_DAY,day);  fragment.setArguments(args);  return fragment;}  }
class C{  public OMGraphicList(Collection<OMGraphic> c){  graphics.addAll(c);}  }
class C{  private boolean updateRowChange(OneRowChange orc,Matcher matcher,String toRegex){  if (matcher == null)   return true;  if (transformTables)   matcher.reset(orc.getTableName()); else   matcher.reset(orc.getSchemaName());  if (matcher.matches()) {    if (transformTables) {      String oldTable=orc.getTableName();      orc.setTableName(matcher.replaceAll(toRegex));      if (logger.isDebugEnabled())       logger.debug("Filtered event table name: old=" + oldTable + " new="+ orc.getTableName());    } else {      String oldSchema=orc.getSchemaName();      orc.setSchemaName(matcher.replaceAll(toRegex));      if (logger.isDebugEnabled())       logger.debug("Filtered event schema name: old=" + oldSchema + " new="+ orc.getSchemaName());    }    return true;  }  return false;}  }
class C{  public void method(){}  }
class C{  private boolean isPreviewSizeSupported(Parameters parameters,int width,int height){  List<Camera.Size> sizes=parameters.getSupportedPreviewSizes();  for (  Size size : sizes) {    if (size.width == width && size.height == height) {      return true;    }  }  return false;}  }
class C{  public CircularStack(final int limit){  this.elements=new ArrayList<>(limit);  this.limit=limit;}  }
class C{  @Override public Element store(Object o){  LocoLabel p=(LocoLabel)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("LocoLabel");  storeCommonAttributes(p,element);  Element elem=new Element("size");  elem.setAttribute("width","" + p.getWidth());  elem.setAttribute("height","" + p.getHeight());  element.addContent(elem);  elem=new Element("OBlock");  OBlock block=p.getBlock();  elem.setAttribute("systemName","" + block.getSystemName());  elem.setAttribute("trainName","" + block.getValue());  element.addContent(elem);  element.setAttribute("class","jmri.jmrit.display.controlPanelEditor.shape.configurexml.LocoLabelXml");  return element;}  }
class C{  public VerletParticle3D(float x,float y,float z,float w){  super(x,y,z);  prev=new Vec3D(this);  temp=new Vec3D();  setWeight(w);}  }
class C{  public ControlFlowDistance(int approachLevel,double branchDistance){  if (approachLevel < 0 || branchDistance < 0.0)   throw new IllegalStateException("expect approachLevel and branchDistance to always be positive");  this.approachLevel=approachLevel;  this.branchDistance=branchDistance;}  }
class C{  public void addMacro(String name) throws LexerException {  cpp.addMacro(name);}  }
class C{  public synchronized void addFailure(Test test,AssertionFailedError e){  fFailures.add(new TestFailure(test,e));  for (  TestListener each : cloneListeners()) {    each.addFailure(test,e);  }}  }
class C{  public boolean isUseL1(){  return useL1;}  }
class C{  public DailyTimeIntervalScheduleBuilder withRepeatCount(int repeatCount){  this.repeatCount=repeatCount;  return this;}  }
class C{  private void processTxFromBestChain(Transaction tx,boolean forceAddToPool) throws VerificationException {  checkState(lock.isHeldByCurrentThread());  checkState(!pending.containsKey(tx.getHash()));  boolean isDeadCoinbase=tx.isCoinBase() && dead.containsKey(tx.getHash());  if (isDeadCoinbase) {    log.info("  coinbase tx {} <-dead: confidence {}",tx.getHashAsString(),tx.getConfidence().getConfidenceType().name());    dead.remove(tx.getHash());  }  updateForSpends(tx,true);  boolean hasOutputsToMe=tx.getValueSentToMe(this,true).compareTo(BigInteger.ZERO) > 0;  if (hasOutputsToMe) {    if (tx.isEveryOwnedOutputSpent(this)) {      log.info("  tx {} ->spent (by pending)",tx.getHashAsString());      addWalletTransaction(Pool.SPENT,tx);    } else {      log.info("  tx {} ->unspent",tx.getHashAsString());      addWalletTransaction(Pool.UNSPENT,tx);    }  } else   if (tx.getValueSentFromMe(this).compareTo(BigInteger.ZERO) > 0) {    log.info("  tx {} ->spent",tx.getHashAsString());    addWalletTransaction(Pool.SPENT,tx);  } else   if (forceAddToPool) {    log.info("  tx {} ->spent (manually added)",tx.getHashAsString());    addWalletTransaction(Pool.SPENT,tx);  }  checkForDoubleSpendAgainstPending(tx,true);}  }
class C{  public void generateKeyPair(){  generateKeyPair(null,null,null);}  }
class C{  @ReflectiveCtor public NullLiteral(FilePosition pos,NullPlaceholder value,List<? extends ParseTreeNode> children){  this(pos);}  }
class C{  public void removeCenterListener(CenterListener listener){  centerDelegate.remove(listener);}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public static String parseBssid(byte[] bssidBytes){  StringBuilder sb=new StringBuilder();  int k;  String hexK;  String str;  for (int i=0; i < bssidBytes.length; i++) {    k=0xff & bssidBytes[i];    hexK=Integer.toHexString(k);    str=((k < 16) ? ("0" + hexK) : (hexK));    System.out.println(str);    sb.append(str);  }  return sb.toString();}  }
class C{  protected StrictModeRelevantImpl(){  super();}  }
class C{  public Topology buildAppTopology(){  Topology t=tp.newTopology("mqttClientSubscriber");  MqttConfig config=Runner.newConfig(options);  MqttStreams mqtt=new MqttStreams(t,null);  System.out.println("Using MQTT clientId " + config.getClientId());  TStream<String> msgs=mqtt.subscribe(options.get(OPT_TOPIC),options.get(OPT_QOS));  msgs.sink(null);  return t;}  }
class C{  @Subscribe public void onEvent(onStartTracking event){  Log.d(TAG,"Received StartTracking event");  mSession=event.session;  requirePowerLock();  startTracking(mSession);}  }
class C{  public static double mix(double a,double x,double y){  double t=clamp(a,0d,1d);  return x + t * (y - x);}  }
class C{  public static String encodeString(String s){  return new String(encode(s.getBytes()));}  }
class C{  protected void updateMetrics(){  Component host=getContainer();  Font f=host.getFont();  if (font != f) {    calculateLongestLine();    tabSize=getTabSize() * metrics.charWidth('m');  }}  }
class C{  public boolean isBeforeFirst() throws SQLException {  return this.index < 0;}  }
class C{  public static String encodeClass(int j){  return "c_" + j;}  }
class C{  public void test_8() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,false,true,true);  insertSparql(cxn);  IValueCentricTextIndexer<?> searchEngine=cxn.getTripleStore().getLexiconRelation().getSearchEngine();  assertEquals(0,searchEngine.count(query("1")));  assertEquals(0,searchEngine.count(query("2")));  assertEquals(0,searchEngine.count(query("3")));  assertEquals(0,searchEngine.count(query("4")));  assertEquals(0,searchEngine.count(query("true")));  assertEquals(0,searchEngine.count(query("false")));  assertEquals(1,searchEngine.count(query("plain")));  assertEquals(1,searchEngine.count(query("datatyped")));  assertEquals(1,searchEngine.count(query("english")));  endTest(cxn);}  }
class C{  protected static void redistributionDistribution(Session session,String sessionID,Locale locale,ScrDistreg scrDistReg,AuthenticationUser user,Integer canDestWithoutList,int typeDist,ScrOfic scrOfic,Date currentDate,Integer userType,List distList,String messageForUser,String entidad) throws DistributionException, SessionException, ValidationException, HibernateException, Exception {  scrDistReg=updateDistRegByTypeFromChangeDistribution(session,user,sessionID,scrDistReg,typeDist,distList,canDestWithoutList,scrDistReg.getId(),entidad);  int state=-1;  if ((distList == null || distList.isEmpty()) && canDestWithoutList.intValue() == 1) {    state=0;  } else {    state=1;  }  updateInsertDistAccept(scrOfic,scrDistReg,currentDate,state,user.getName(),entidad);  List disIdFolder=new ArrayList();  disIdFolder.add(scrDistReg.getIdFdr());  for (Iterator it=distList.iterator(); it.hasNext(); ) {    Integer userId=(Integer)it.next();    createDistribution(session,sessionID,scrDistReg.getIdArch(),2,scrOfic.getDeptid(),userId,userType,messageForUser,disIdFolder,user,scrOfic,locale,entidad);  }}  }
class C{  public boolean isComplete(){  return this.isComplete;}  }
class C{  private static boolean isPluginVersionChanged(ContentResolver cr,long providerId,String newVersion){  String oldVersion=Imps.ProviderSettings.getStringValue(cr,providerId,ImConfigNames.PLUGIN_VERSION);  if (oldVersion == null) {    return true;  }  return !oldVersion.equals(newVersion);}  }
class C{  @Override protected void process(DistributionManager dm){  doLoad(dm);}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public void resumeAll() throws SchedulerException {  validateState();  resources.getJobStore().resumeAll();  notifySchedulerThread(0L);  notifySchedulerListenersResumedTrigger(null);}  }
class C{  @Override public void flush() throws IOException {  flushBuffer();}  }
class C{  private static int[][] calculateBlackPoints(byte[] luminances,int subWidth,int subHeight,int width,int height){  int[][] blackPoints=new int[subHeight][subWidth];  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int sum=0;      int min=0xFF;      int max=0;      for (int yy=0, offset=yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset+=width) {        for (int xx=0; xx < BLOCK_SIZE; xx++) {          int pixel=luminances[offset + xx] & 0xFF;          sum+=pixel;          if (pixel < min) {            min=pixel;          }          if (pixel > max) {            max=pixel;          }        }        if (max - min > MIN_DYNAMIC_RANGE) {          for (yy++, offset+=width; yy < BLOCK_SIZE; yy++, offset+=width) {            for (int xx=0; xx < BLOCK_SIZE; xx++) {              sum+=luminances[offset + xx] & 0xFF;            }          }        }      }      int average=sum >> (BLOCK_SIZE_POWER * 2);      if (max - min <= MIN_DYNAMIC_RANGE) {        average=min / 2;        if (y > 0 && x > 0) {          int averageNeighborBlackPoint=(blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) / 4;          if (min < averageNeighborBlackPoint) {            average=averageNeighborBlackPoint;          }        }      }      blackPoints[y][x]=average;    }  }  return blackPoints;}  }
class C{  public CannotCompileException(ClassFormatError e,String name){  this("invalid class format: " + name,e);}  }
class C{  public void select(int start,int end){  int newStart, newEnd;  boolean newBias;  if (start <= end) {    newStart=start;    newEnd=end;    newBias=false;  } else {    newStart=end;    newEnd=start;    newBias=true;  }  if (newStart < 0 || newEnd > getDocumentLength()) {    throw new IllegalArgumentException("Bounds out of" + " range: " + newStart + ","+ newEnd);  }  if (newStart != selectionStart || newEnd != selectionEnd || newBias != biasLeft) {    int newStartLine=getLineOfOffset(newStart);    int newEndLine=getLineOfOffset(newEnd);    if (painter.isBracketHighlightEnabled()) {      if (bracketLine != -1) {        painter.invalidateLine(bracketLine);      }      updateBracketHighlight(end);      if (bracketLine != -1) {        painter.invalidateLine(bracketLine);      }    }    painter.invalidateLineRange(selectionStartLine,selectionEndLine);    painter.invalidateLineRange(newStartLine,newEndLine);    document.addUndoableEdit(new CaretUndo(selectionStart,selectionEnd));    selectionStart=newStart;    selectionEnd=newEnd;    selectionStartLine=newStartLine;    selectionEndLine=newEndLine;    biasLeft=newBias;    fireCaretEvent();  }  blink=true;  caretTimer.restart();  if (selectionStart == selectionEnd) {    rectSelect=false;  }  magicCaret=-1;  scrollToCaret();}  }
class C{  public IgniteConsistencyException(){}  }
class C{  @Override public void X(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.X()");  }  javascript.execute(formObj,PdfDictionary.X,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  public static int countOfAbsoluteSources(int[] sources,int dest){  int countOfSources=0;  for (int index=0; index < sources.length; index++) {    if (sources[index] != dest) {      countOfSources++;    }  }  return countOfSources;}  }
class C{  private void checkContact(ContactResource contact){  assertThat(contact.getContactId()).isEqualTo("contact1");  assertThat(contact.getRepoId()).isEqualTo("contact1-TEST");}  }
class C{  public void resultChanged(LookupEvent ev){  Collection collection=applicationResult.allInstances();  for (Iterator it=collection.iterator(); it.hasNext(); ) {    Object obj=it.next();    if (obj instanceof SceneApplication) {      SceneApplication app=(SceneApplication)obj;      if (app != null) {        Node node=NodeUtility.createNode(((SceneApplication)app).getRootNode());        explorerManager.setRootContext(node);        explorerManager.getRootContext().setDisplayName(node.getName());        return;      }    }  }  explorerManager.setRootContext(Node.EMPTY);}  }
class C{  public HtmlCode addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected void updateDensities(WritableDoubleDataStore rbod_score,DoubleDBIDList referenceDists){  DoubleDBIDListIter it=referenceDists.iter();  for (int l=0; l < referenceDists.size(); l++) {    double density=computeDensity(referenceDists,it,l);    it.seek(l);    if (!(density > rbod_score.doubleValue(it))) {      rbod_score.putDouble(it,density);    }  }}  }
class C{  public void createAndSendMoveToAction(final Point2D point,boolean doubleClick){  final RPAction action=new RPAction();  action.put("type","moveto");  action.put("x",(int)point.getX());  action.put("y",(int)point.getY());  if (doubleClick) {    action.put("double_click","");  }  Direction dir=calculateZoneChangeDirection(point);  if (dir != null) {    action.put("extend",dir.ordinal());  }  client.send(action);}  }
class C{  public boolean addressTypeUnique(){  return false;}  }
class C{  public void testSimpleWritePerformance(String store) throws Exception {  waitForFullMesh(5000);  final int count=1000000;  IStoreClient<String,String> client0=syncManagers[0].getStoreClient(store,String.class,String.class);  IStoreClient<String,String> client2=syncManagers[2].getStoreClient(store,String.class,String.class);  long then=System.currentTimeMillis();  for (int i=1; i <= count; i++) {    client0.put("" + i,"" + i);  }  long donewriting=System.currentTimeMillis();  waitForValue(client2,"" + count,null,count,"client2");  long now=System.currentTimeMillis();  logger.info("Simple write ({}): {} values in {}+/-100 " + "millis ({} synced writes/s) ({} local writes/s)",new Object[]{store,count,(now - then),1000.0 * count / (now - then),1000.0 * count / (donewriting - then)});}  }
class C{  public void removeAll(){  Component[] components=getMenuComponents();  if (components.length > 0) {    Debug.message("layersmenu","LayersMenu.removeAll(): purging menu");  }  for (int i=0; i < components.length; i++) {    if (components[i] instanceof LayerCheckBoxMenuItem) {      ((LayerCheckBoxMenuItem)components[i]).cleanup();    }  }  super.removeAll();}  }
class C{  public static SecretKey createKey(){  RandomKeyGenerator keyGenerator=new RandomKeyGenerator(new PrngSaltGenerator(),EncryptionConstants.AES_256_KEY_LENGTH_BITS);  return keyGenerator.generateKey(EncryptionConstants.AES_CIPHER);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public ForceItem(){  mass=1.0f;  force=new float[]{0.f,0.f};  velocity=new float[]{0.f,0.f};  location=new float[]{0.f,0.f};  plocation=new float[]{0.f,0.f};  k=new float[4][2];  l=new float[4][2];}  }
class C{  public void initRisikoMassnahmeUmsetzung(RisikoMassnahmenUmsetzung umsetzung){  if (umsetzung.isInitNeeded()) {    try {      umsetzung.setMassnahme(loadByNumber(umsetzung.getNumber()));    } catch (    CommandException e) {      ExceptionUtil.log(e,"Fehler beim Datenzugriff");    }  }}  }
class C{  public SeekableFileInputStream(String name) throws FileNotFoundException {  randomAccessFile=new RandomAccessFile(name,"r");}  }
class C{  @Field(4) public __VARIANT_NAME_3_union fltVal(float fltVal){  this.io.setFloatField(this,4,fltVal);  return this;}  }
class C{  void drawDivider(Canvas canvas,Rect bounds,int childIndex){  final Drawable divider=mDivider;  final boolean clipDivider=mClipDivider;  if (!clipDivider) {    divider.setBounds(bounds);  } else {    canvas.save();    canvas.clipRect(bounds);  }  divider.draw(canvas);  if (clipDivider) {    canvas.restore();  }}  }
class C{  private boolean isValidGoogleSheetsString(String name){  Pattern p=Pattern.compile("^[a-zA-Z0-9\\-]+$");  Matcher m=p.matcher(name);  return m.matches();}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public DrawerBuilder withDrawerWidthPx(int drawerWidthPx){  this.mDrawerWidth=drawerWidthPx;  return this;}  }
class C{  protected Node newNode(){  return new SVGOMFEDiffuseLightingElement();}  }
class C{  public void unsetCreateTime(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,CREATETIME_ISSET_ID);}  }
class C{  public EntryStream<K,V> peekKeys(Consumer<? super K> keyAction){  return peek(null);}  }
class C{  public static URL createURL(String protocol,String host,String file) throws MalformedURLException {  return createURL(protocol,host,-1,file);}  }
class C{  public void testCaseSensitive() throws Exception {  final String input="How The s a brown s cow d like A B thing?";  MockTokenizer wt=new MockTokenizer(MockTokenizer.WHITESPACE,false);  wt.setReader(new StringReader(input));  TokenFilter cgf=new CommonGramsFilter(wt,commonWords);  assertTokenStreamContents(cgf,new String[]{"How","The","The_s","s","s_a","a","a_brown","brown","brown_s","s","s_cow","cow","cow_d","d","d_like","like","A","B","thing?"});}  }
class C{  @Override public int hashCode(){  return PlainSocketFactory.class.hashCode();}  }
class C{  private Visualization instantiateVisualization(VisualizationTask task){  try {    Visualization v=task.getFactory().makeVisualization(task,this,width,height,item.proj);    if (task.hasAnyFlags(VisualizationTask.FLAG_NO_EXPORT)) {      v.getLayer().setAttribute(NO_EXPORT_ATTRIBUTE,NO_EXPORT_ATTRIBUTE);    }    return v;  } catch (  Exception e) {    if (LOG.isDebugging()) {      LOG.warning("Visualizer " + task.getFactory().getClass().getName() + " failed.",e);    } else {      LOG.warning("Visualizer " + task.getFactory().getClass().getName() + " failed - enable debugging to see details: "+ e.toString());    }  }  return null;}  }
class C{  protected void handleStatusOk(final HttpServletRequest req,final HttpServletResponse resp) throws ServletException {}  }
class C{  protected CCProgressTo(float duration,float percent){  super(duration);  to_=percent;}  }
class C{  @Override public void initGui(){  super.initGui();  target_xCoord_field=new GuiTextField(fontRendererObj,110,37,45,12);  target_zCoord_field=new GuiTextField(fontRendererObj,110,52,45,12);  target_yCoord_field=new GuiTextField(fontRendererObj,110,67,45,12);  target_height_field=new GuiTextField(fontRendererObj,110,82,45,12);  target_freq_field=new GuiTextField(fontRendererObj,110,97,45,12);  target_freq_field.setMaxStringLength(4);  target_xCoord_field.setMaxStringLength(6);  target_zCoord_field.setMaxStringLength(6);  target_yCoord_field.setMaxStringLength(3);  target_height_field.setMaxStringLength(3);  target_freq_field.setText(tileEntity.getFrequency() + "");  target_height_field.setText(tileEntity.facing + "");  if (tileEntity.getTarget() == null) {    target_xCoord_field.setText(Math.round(tileEntity.xCoord) + "");    target_zCoord_field.setText(Math.round(tileEntity.zCoord) + "");    target_yCoord_field.setText("0");  } else {    target_xCoord_field.setText(Math.round(tileEntity.getTarget().xPos) + "");    target_zCoord_field.setText(Math.round(tileEntity.getTarget().zPos) + "");    target_yCoord_field.setText(Math.round(tileEntity.getTarget().yPos) + "");  }}  }
class C{  MarkerSegment findMarkerSegment(int tag){  Iterator iter=markerSequence.iterator();  while (iter.hasNext()) {    MarkerSegment seg=(MarkerSegment)iter.next();    if (seg.tag == tag) {      return seg;    }  }  return null;}  }
class C{  public Serializer registerClassLoader(Class<?> type){  return registerClassLoader(type.getName(),type.getClassLoader());}  }
class C{  public void writeLEChars(String s) throws IOException {  int length=s.length();  for (int i=0; i < length; i++) {    int c=s.charAt(i);    out.write(c & 0xFF);    out.write((c >>> 8) & 0xFF);  }  written+=length * 2;}  }
class C{  protected void processPositioning(final RPObject base,final RPObject diff){  boolean moved=false;  if (diff.has("x")) {    final int nx=diff.getInt("x");    if (nx != x) {      x=nx;      moved=true;    }  }  if (diff.has("y")) {    final int ny=diff.getInt("y");    if (ny != y) {      y=ny;      moved=true;    }  }  if (moved) {    onPosition(x,y);  }}  }
class C{  private static boolean isValidCalendarValue(String value){  try {    XMLDatatypeUtil.parseCalendar(value);    return true;  } catch (  IllegalArgumentException e) {    return false;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Range findDomainBounds(XYDataset dataset){  if (dataset != null) {    Range r=DatasetUtilities.findDomainBounds(dataset,false);    if (r == null) {      return null;    } else {      return new Range(r.getLowerBound() + this.xOffset,r.getUpperBound() + this.blockWidth + this.xOffset);    }  } else {    return null;  }}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  public Aspects findByClassName(String className) throws ClassNotFoundException {  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Aspects aspects=new Aspects();    Class<?> c=Class.forName(className);    CriteriaBuilder criteriaBuilder=entityManager.getCriteriaBuilder();    CriteriaQuery<Object> criteriaQuery=criteriaBuilder.createQuery();    Root<?> from=criteriaQuery.from(c);    CriteriaQuery<Object> select=criteriaQuery.select(from);    TypedQuery<Object> typedQuery=entityManager.createQuery(select);    List<Object> items=typedQuery.getResultList();    for (    Object item : items) {      aspects.add((Aspect)item);    }    entityManager.getTransaction().commit();    return aspects;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public boolean submitSpam(final Resource commentResource){  final boolean result=doAkismet(AkismetAction.SUBMIT_SPAM,commentResource);  if (result) {    try {      final ModifiableValueMap properties=commentResource.adaptTo(ModifiableValueMap.class);      properties.put(PublickConstants.COMMENT_PROPERTY_SPAM,true);      properties.put(PublickConstants.COMMENT_PROPERTY_DISPLAY,false);      commentResource.getResourceResolver().commit();    } catch (    PersistenceException e) {      LOGGER.error("Could not save spam properties",e);    }  }  return result;}  }
class C{  public ListBuffer<A> appendList(List<A> xs){  while (xs.nonEmpty()) {    append(xs.head);    xs=xs.tail;  }  return this;}  }
class C{  private void dropAllTables(SQLiteDatabase db,boolean ifExists){  CacheDao.dropTable(db,ifExists);}  }
class C{  public int[] cleanAbsoluteOthers(int[] others,int src,int dest,boolean removeDest){  int[] cleaned=new int[numOtherInfoContributors];  int countOfOthers=0;  for (int index=0; index < others.length; index++) {    if ((others[index] != src) && ((others[index] != dest) || !removeDest)) {      if (countOfOthers == numOtherInfoContributors) {        countOfOthers++;        break;      }      cleaned[countOfOthers]=others[index];      countOfOthers++;    }  }  if (countOfOthers < numOtherInfoContributors) {    throw new RuntimeException("Too few others in absolutes");  } else   if (countOfOthers > numOtherInfoContributors) {    throw new RuntimeException("Too many others in absolutes");  }  return cleaned;}  }
class C{  public BoardDimensions(final int width,final int height){  if ((width < 1) || (height < 1)) {    throw new IllegalArgumentException("width and height must be positive non-zero values");  }  w=width;  h=height;}  }
class C{  @Override public boolean containsValue(Object value){  HashMapEntry[] tab=table;  int len=tab.length;  if (value == null) {    for (int i=0; i < len; i++) {      for (HashMapEntry e=tab[i]; e != null; e=e.next) {        if (e.value == null) {          return true;        }      }    }    return entryForNullKey != null && entryForNullKey.value == null;  }  for (int i=0; i < len; i++) {    for (HashMapEntry e=tab[i]; e != null; e=e.next) {      if (value.equals(e.value)) {        return true;      }    }  }  return entryForNullKey != null && value.equals(entryForNullKey.value);}  }
class C{  private void clickChildAt(final int x,final int y){  final int index=getContainingChildIndex(x,y);  if (index != INVALID_INDEX) {    final View itemView=getChildAt(index);    final int position=mFirstItemPosition + index;    final long id=mAdapter.getItemId(position);    performItemClick(itemView,position,id);  }}  }
class C{  private void procFunctions21_28(int currCabId,int c){  if ((c & NceCmdStationMemory.FUNC_H_F21) != 0) {    cabData[currCabId].F21=true;  } else {    cabData[currCabId].F21=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F22) != 0) {    cabData[currCabId].F22=true;  } else {    cabData[currCabId].F22=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F23) != 0) {    cabData[currCabId].F23=true;  } else {    cabData[currCabId].F23=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F24) != 0) {    cabData[currCabId].F24=true;  } else {    cabData[currCabId].F24=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F25) != 0) {    cabData[currCabId].F25=true;  } else {    cabData[currCabId].F25=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F26) != 0) {    cabData[currCabId].F26=true;  } else {    cabData[currCabId].F26=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F27) != 0) {    cabData[currCabId].F27=true;  } else {    cabData[currCabId].F27=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F28) != 0) {    cabData[currCabId].F28=true;  } else {    cabData[currCabId].F28=false;  }}  }
class C{  public long addWrapField(long instant,int amount){  return set(instant,FieldUtils.getWrappedValue(get(instant),amount,iMin,iMax));}  }
class C{  public CLabel(String text,int horizontalAlignment){  super(text,horizontalAlignment);  init();}  }
class C{  protected void performFiltering(CharSequence text,int keyCode){switch (mAutoCompleteMode) {case AUTOCOMPLETE_MODE_SINGLE:    ((InternalAutoCompleteTextView)mInputView).superPerformFiltering(text,keyCode);  break;case AUTOCOMPLETE_MODE_MULTI:((InternalMultiAutoCompleteTextView)mInputView).superPerformFiltering(text,keyCode);break;}}  }
class C{  private List<Location> parseLocationsFile(String filename) throws FileNotFoundException {  System.err.println("Parsing " + filename);  char DELIMITER=' ';  CSVReader reader;  reader=new CSVReader(new FileReader(filename),DELIMITER);  String[] nextLine;  List<Location> locations=new ArrayList<Location>();  try {    while ((nextLine=reader.readNext()) != null) {      double lat=Double.parseDouble(nextLine[INDEX_LATITUDE]);      double lon=Double.parseDouble(nextLine[INDEX_LONGITUDE]);      long date=Long.parseLong(nextLine[INDEX_DATE]) * 1000;      Location location=new Location(lat,lon,date);      locations.add(location);    }  } catch (  IOException e) {    return null;  }  return locations;}  }
class C{  public MinExpiresParser(String minExpires){  super(minExpires);}  }
class C{  public final HashCode append(boolean value){  return hashCode.append(value);}  }
class C{  final public int yylength(){  return yy_markedPos - yy_startRead;}  }
class C{  public String toSummaryString(String title,boolean printComplexityStatistics){  return m_delegate.toSummaryString(title,printComplexityStatistics);}  }
class C{  public void topLevelWindowDestroyed(Window w){}  }
class C{  public static Organization updateVendor(Organization organization,VOOrganization voOrganization) throws ValidationException, ConcurrentModificationException {  validateVendorMandatoryFields(voOrganization);  return updateCustomer(organization,voOrganization);}  }
class C{  public int green(){  return (int)scalar.val[1];}  }
class C{  public void addSample(int weight,float value){  ensureSortedByIndex();  Sample newSample=recycledSampleCount > 0 ? recycledSamples[--recycledSampleCount] : new Sample();  newSample.index=nextSampleIndex++;  newSample.weight=weight;  newSample.value=value;  samples.add(newSample);  totalWeight+=weight;  while (totalWeight > maxWeight) {    int excessWeight=totalWeight - maxWeight;    Sample oldestSample=samples.get(0);    if (oldestSample.weight <= excessWeight) {      totalWeight-=oldestSample.weight;      samples.remove(0);      if (recycledSampleCount < MAX_RECYCLED_SAMPLES) {        recycledSamples[recycledSampleCount++]=oldestSample;      }    } else {      oldestSample.weight-=excessWeight;      totalWeight-=excessWeight;    }  }}  }
class C{  public OnTouchPasswordListener(EditText passwordET){  this.passwordET=passwordET;}  }
class C{  private void displayData(int index,boolean immediate){  preview.setSrc(null);  bDelete.setEnabled(false);  bSave.setEnabled(false);  displayIndex=index;  if (immediate)   displaySelected(); else   Clients.response(new AuEcho(this,"displaySelected",null));}  }
class C{  public int next(){  _currentNode=(_currentNode == DTM.NULL) ? DTM.NULL : _nextsib2(_currentNode);  return returnNode(makeNodeHandle(_currentNode));}  }
class C{  public Weeks toStandardWeeks(){  return Weeks.weeks(getValue() / DateTimeConstants.HOURS_PER_WEEK);}  }
class C{  public FeatureParameterValueItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private boolean checkPreValidations(){  boolean ret=false;  List<ValidationData> validations=new ArrayList<ValidationData>(response.getValidation().getHeaderValidation());  validations.addAll(response.getValidation().getBodyValidation());  validations.addAll(response.getValidation().getCookieValidation());  validations=filterPhase(RequestDataPhase.POST_REQUEST,validations);  for (  ValidationData item : validations) {    item=item.copy();    if (ValidationUtil.isVariable(item.getKey()) && variables.variableExists(item.getKey())) {      item.setKey(variables.getVariable(item.getKey()));    } else     if (ValidationUtil.isFunction(item.getKey())) {      item.setKey(FunctionHandler.executeFunction(item.getKey(),variables));    }    if (ValidationUtil.isVariable(item.getValue()) && variables.variableExists(item.getValue())) {      item.setValue(variables.getVariable(item.getValue()));    } else     if (ValidationUtil.isFunction(item.getValue())) {      item.setValue(FunctionHandler.executeFunction(item.getValue(),variables));    }    item.setKey(variables.evaluate(item.getKey()));    item.setValue(variables.evaluate(item.getValue()));    if (item.getKey() != null && item.getValue() != null) {      ret=evaluateResult(item.getKey(),item.getValue(),item.getCondition(),variables);    }  }  return ret;}  }
class C{  public static StoreSysCfgResponse create(DistributionManager dm,InternalDistributedMember recipient,Config sc){  StoreSysCfgResponse m=new StoreSysCfgResponse();  m.setRecipient(recipient);  InternalDistributedSystem sys=dm.getSystem();  Config conf=sys.getConfig();  String[] names=conf.getAttributeNames();  for (int i=0; i < names.length; i++) {    if (conf.isAttributeModifiable(names[i])) {      conf.setAttributeObject(names[i],sc.getAttributeObject(names[i]),ConfigSource.runtime());    }  }  return m;}  }
class C{  @Override public void clear(){  removeAllElements();}  }
class C{  public static Hash of(byte[] data){  return new Hash(hash(data,0,data.length));}  }
class C{  @Override public MemChunkHolder<BigDataPMemAllocator> retrieveChunk(long phandler,boolean autoreclaim){  MemChunkHolder<BigDataPMemAllocator> ret=null;  long eaddr=getEffectiveAddress(phandler);  long sz=m_nvmasvc.retrieveSize(m_nid,eaddr);  if (sz > 0L) {    ret=new MemChunkHolder<BigDataPMemAllocator>(this,eaddr,sz);    if (autoreclaim) {      m_chunkcollector.register(ret);    }  }  return ret;}  }
class C{  public void updatePublishTopicList(String topicName){  pubPanelContr.updateTopicList(topicName);}  }
class C{  public long upMask(){  return upMask;}  }
class C{  public void addPointerReleasedListener(ActionListener l){  if (pointerReleasedListeners == null) {    pointerReleasedListeners=new EventDispatcher();  }  pointerReleasedListeners.addListener(l);}  }
class C{  public long vsize(){  return Long.parseLong(fields[22]);}  }
class C{  protected void generate(XmlWriter w,ExtensionProfile p,XmlNamespace namespace,String localName,List<XmlWriter.Attribute> attrs,AttributeGenerator generator) throws IOException {  w.simpleElement(namespace,localName,attrs,generator.getContent());}  }
class C{  public void addChannelMaps(List<ChannelMap> channelMaps){  for (  ChannelMap channelMap : channelMaps) {    addChannelMap(channelMap);  }}  }
class C{  public Pid(int pid,int offset,int bytes,int cnv,int decimals,String label){  this.pid=pid;  this.ofs=offset;  this.bytes=bytes;  this.cnv=cnv;  this.decimals=decimals;  this.label=label;}  }
class C{  public boolean compileIsModified(){  return true;}  }
class C{  public boolean isFlying(){  return isFlying;}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,Cookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          Cookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,Cookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public static VideoQuality determineClosestSupportedResolution(Camera.Parameters parameters,VideoQuality quality){  VideoQuality v=quality.clone();  int minDist=Integer.MAX_VALUE;  String supportedSizesStr="Supported resolutions: ";  List<Size> supportedSizes=parameters.getSupportedPreviewSizes();  for (Iterator<Size> it=supportedSizes.iterator(); it.hasNext(); ) {    Size size=it.next();    supportedSizesStr+=size.width + "x" + size.height+ (it.hasNext() ? ", " : "");    int dist=Math.abs(quality.resX - size.width);    if (dist < minDist) {      minDist=dist;      v.resX=size.width;      v.resY=size.height;    }  }  Log.v(TAG,supportedSizesStr);  if (quality.resX != v.resX || quality.resY != v.resY) {    Log.v(TAG,"Resolution modified: " + quality.resX + "x"+ quality.resY+ "->"+ v.resX+ "x"+ v.resY);  }  return v;}  }
class C{  public void testSinglePolygonManyPointsHolesRoundTrip() throws SQLException {  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setGenerationAlgorithm(PolygonGenerator.BOX);  pg.setNumberPoints(1000);  pg.setNumberHoles(4);  Polygon pt=(Polygon)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  Polygon pt2=(Polygon)or.read(st);  assertTrue("The input polygon is not the same as the output polygon",pt.equals(pt2));}  }
class C{  public SingleStepCommand(final int packetId){  super(DebugCommandType.CMD_SINGLE_STEP,packetId);}  }
class C{  protected void processChange(Database currentModel,Database desiredModel,RemoveTableChange change,StringBuilder ddl){  dropTable(change.getChangedTable(),ddl,false,false);  change.apply(currentModel,delimitedIdentifierModeOn);}  }
class C{  public static boolean isNetworkTypeValid(int networkType){  return networkType >= 0 && networkType <= MAX_NETWORK_TYPE;}  }
class C{  public void testRanking() throws Exception {  final int numDocs=atLeast(100);  final int maxTopN=5;  final int maxSentenceLength=10;  final int maxNumSentences=20;  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,new MockAnalyzer(random(),MockTokenizer.SIMPLE,true));  Document document=new Document();  Field id=new StringField("id","",Field.Store.NO);  FieldType offsetsType=new FieldType(TextField.TYPE_STORED);  offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);  Field body=new Field("body","",offsetsType);  document.add(id);  document.add(body);  for (int i=0; i < numDocs; i++) {    StringBuilder bodyText=new StringBuilder();    int numSentences=TestUtil.nextInt(random(),1,maxNumSentences);    for (int j=0; j < numSentences; j++) {      bodyText.append(newSentence(random(),maxSentenceLength));    }    body.setStringValue(bodyText.toString());    id.setStringValue(Integer.toString(i));    iw.addDocument(document);  }  IndexReader ir=iw.getReader();  IndexSearcher searcher=newSearcher(ir);  for (int i=0; i < numDocs; i++) {    checkDocument(searcher,i,maxTopN);  }  iw.close();  ir.close();  dir.close();}  }
class C{  public HashPrintServiceAttributeSet(PrintServiceAttributeSet attributes){  super(attributes,PrintServiceAttribute.class);}  }
class C{  protected static void doConfigure(ConfigurationSocketAdapter configuration,Document doc) throws RuntimeException {  Element root=doc.getDocumentElement();  DOMElementIterator eventTypeNodeIterator=new DOMElementIterator(root.getChildNodes());  while (eventTypeNodeIterator.hasNext()) {    Element element=eventTypeNodeIterator.next();    String nodeName=element.getNodeName();    if (nodeName.equals("socket")) {      handleSocket(configuration,element);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.199 -0400",hash_original_method="1B756177FA2981E8592355EECF66A0CA",hash_generated_method="575BC1A6B40A0292E63694B8A774B727") private boolean doAcquireSharedNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  static boolean stats(Configuration conf){  return conf.getBoolean(STATS_FLAG,false);}  }
class C{  public final synchronized long readLong(){  String input="";  long value=0L;  try {    input=in.readLine();  } catch (  IOException e) {  }  if (input != null) {    try {      value=Long.parseLong(input);    } catch (    NumberFormatException e) {    }  }  return value;}  }
class C{  public void testPhaseIncrement1(){  for (int size=1; size < nine; size++) {    final Phaser phaser=new Phaser(size);    for (int index=0; index <= (1 << size); index++) {      int phase=phaser.arrive();      assertTrue(index % size == 0 ? (index / size) == phase : index - (phase * size) > 0);    }  }}  }
class C{  protected void lockStore() throws IOException {  int totalWaitTime=0;  while (true) {    File lock=new File(m_storeHome,".lock");    if (lock.createNewFile()) {      return;    }    try {      Thread.sleep(200);    } catch (    InterruptedException ex) {      throw new RuntimeException(ex);    }    totalWaitTime+=200;    if (totalWaitTime > 5000) {      throw new IOException("Unable to lock store within 5 seconds");    }  }}  }
class C{  public void removeAtRange(int index,int size){  final int end=Math.min(mSize,index + size);  for (int i=index; i < end; i++) {    removeAt(i);  }}  }
class C{  public JsonHttpResponseHandler(boolean useRFC5179CompatibilityMode){  super(DEFAULT_CHARSET);  this.useRFC5179CompatibilityMode=useRFC5179CompatibilityMode;}  }
class C{  protected List<Receiver<String>> makeOwnerList(final Expression objectExpression){  final ClassNode receiver=getType(objectExpression);  List<Receiver<String>> owners=new LinkedList<Receiver<String>>();  owners.add(Receiver.<String>make(receiver));  if (isClassClassNodeWrappingConcreteType(receiver)) {    GenericsType clazzGT=receiver.getGenericsTypes()[0];    owners.add(0,Receiver.<String>make(clazzGT.getType()));  }  if (receiver.isInterface()) {    owners.add(Receiver.<String>make(OBJECT_TYPE));  }  addSelfTypes(receiver,owners);  if (!typeCheckingContext.temporaryIfBranchTypeInformation.empty()) {    List<ClassNode> potentialReceiverType=getTemporaryTypesForExpression(objectExpression);    if (potentialReceiverType != null) {      for (      ClassNode node : potentialReceiverType) {        owners.add(Receiver.<String>make(node));      }    }  }  if (typeCheckingContext.lastImplicitItType != null && objectExpression instanceof VariableExpression && ((VariableExpression)objectExpression).getName().equals("it")) {    owners.add(Receiver.<String>make(typeCheckingContext.lastImplicitItType));  }  return owners;}  }
class C{  protected ArrayList<KeyNamePair> loadRMAData(int C_BPartner_ID){  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();  String sqlStmt="SELECT r.M_RMA_ID, r.DocumentNo || '-' || r.Amt from M_RMA r " + "WHERE ISSOTRX='N' AND r.DocStatus in ('CO', 'CL') " + "AND r.C_BPartner_ID=? "+ "AND NOT EXISTS (SELECT * FROM C_Invoice inv "+ "WHERE inv.M_RMA_ID=r.M_RMA_ID AND inv.DocStatus IN ('CO', 'CL'))";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sqlStmt,null);    pstmt.setInt(1,C_BPartner_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));    }    rs.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sqlStmt.toString(),e);  } finally {    if (pstmt != null) {      try {        pstmt.close();      } catch (      Exception ex) {        log.severe("Could not close prepared statement");      }    }  }  return list;}  }
class C{  private void closeAllSockets(){  for (  Socket socket : sockets) {    try {      socket.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  Application.getLog().log("All sockets closed for " + getUUID());}  }
class C{  private static CoreException createCoreException(final Throwable exception){  return new CoreException(new Status(IStatus.ERROR,RefactoringCore.ID_PLUGIN,IRefactoringCoreStatusCodes.REFACTORING_HISTORY_IO_ERROR,exception.getLocalizedMessage(),exception));}  }
class C{  final Node<K,V> findNear(K key,int rel,Comparator<? super K> cmp){  if (key == null)   throw new NullPointerException();  for (; ; ) {    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {      Object v;      if (n == null)       return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;      Node<K,V> f=n.next;      if (n != b.next)       break;      if ((v=n.value) == null) {        n.helpDelete(b,f);        break;      }      if (b.value == null || v == n)       break;      int c=cpr(cmp,key,n.key);      if ((c == 0 && (rel & EQ) != 0) || (c < 0 && (rel & LT) == 0))       return n;      if (c <= 0 && (rel & LT) != 0)       return b.isBaseHeader() ? null : b;      b=n;      n=f;    }  }}  }
class C{  public static double abs(Double number){  return Math.abs(number);}  }
class C{  public Option(String description,String name,int numArguments,String synopsis){  m_Description=description;  m_Name=name;  m_NumArguments=numArguments;  m_Synopsis=synopsis;}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  public MyFunctionExecutionException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void testDecoder6(){  boolean res;  String originalAppIdName=mAppIdName;  int originalContentTypeValue=mContentTypeValue;  Random rd=new Random();  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {    mAppIdName=OMA_APPLICATION_ID_NAMES[i];    mContentTypeValue=rd.nextInt(0x0FFF);    byte[] pdu=createPDU(6);    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);    assertTrue(res);    int index=(int)pduDecoder.getValue32();    res=pduDecoder.decodeXWapApplicationId(index);    assertTrue(res);    Log.d(LOG_TAG,"mAppIdValue: [" + mAppIdName + "], val: ["+ pduDecoder.getValueString()+ "]");    assertTrue(mAppIdName.equals(pduDecoder.getValueString()));  }  mAppIdName=originalAppIdName;  mContentTypeValue=originalContentTypeValue;}  }
class C{  public In(URL url){  try {    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + url);  }}  }
class C{  protected Node newNode(){  return new SVG12OMDocument();}  }
class C{  public void restoreState(){  super.restoreState();  updateIntermediates=true;}  }
class C{  public void testElement(){  LinkedBlockingQueue q=populatedQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.element());    assertEquals(i,q.poll());  }  try {    q.element();    shouldThrow();  } catch (  NoSuchElementException success) {  }}  }
class C{  public static String shortName(String longName){  final String temp=longName.replace(DOLLAR,DOT);  if (temp.contains(DOT)) {    return temp.substring(temp.lastIndexOf(DOT) + 1);  } else {    return temp;  }}  }
class C{  public ConfigurationException(String msg){  super(msg);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double slope;  double z, z2;  int c, i;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col, x, y;  double dist;  double maxSlope=0;  double maxZChange=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          maxSlope=-99999999;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            dist=gridLengths[c];            z2=DEM.getValue(y,x);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope > maxSlope) {                maxSlope=slope;                maxZChange=z - z2;              }            }          }          if (maxSlope > 0) {            output.setValue(row,col,maxZChange);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public double valueAndGradient(final Array grad_f,final Array x){  functionEvaluation_++;  gradientEvaluation_++;  return costFunction_.valueAndGradient(grad_f,x);}  }
class C{  public static void main(String[] argv){  runClassifier(new LWL(),argv);}  }
class C{  private void sendEnd(String index){  sendInstruction(new GuacamoleInstruction("end",index));}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  void addUsedRec(RuleRec rec){  if (usedRuleRecs == null) {    usedRuleRecs=new ArrayList<RuleRec>();  }  int n=usedRuleRecs.size();  for (int i=0; i < n; i++) {    if (usedRuleRecs.get(i).equals(rec)) {      return;    }  }  usedRuleRecs.add(rec);}  }
class C{  private void writeEncoded(String str){  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);switch (c) {case 0x0A:      this.writer.print(c);    break;case '<':  this.writer.print("&lt;");break;case '>':this.writer.print("&gt;");break;case '&':this.writer.print("&amp;");break;case '\'':this.writer.print("&apos;");break;case '"':this.writer.print("&quot;");break;default :if ((c < ' ') || (c > 0x7E)) {this.writer.print("&#x");this.writer.print(Integer.toString(c,16));this.writer.print(';');} else {this.writer.print(c);}}}}  }
class C{  public void merge(TripStatistics other){  startTime=Math.min(startTime,other.startTime);  stopTime=Math.max(stopTime,other.stopTime);  totalDistance+=other.totalDistance;  totalTime+=other.totalTime;  movingTime+=other.movingTime;  if (other.latitudeExtremities.hasData()) {    latitudeExtremities.update(other.latitudeExtremities.getMin());    latitudeExtremities.update(other.latitudeExtremities.getMax());  }  if (other.longitudeExtremities.hasData()) {    longitudeExtremities.update(other.longitudeExtremities.getMin());    longitudeExtremities.update(other.longitudeExtremities.getMax());  }  maxSpeed=Math.max(maxSpeed,other.maxSpeed);  if (other.elevationExtremities.hasData()) {    elevationExtremities.update(other.elevationExtremities.getMin());    elevationExtremities.update(other.elevationExtremities.getMax());  }  totalElevationGain+=other.totalElevationGain;  if (other.gradeExtremities.hasData()) {    gradeExtremities.update(other.gradeExtremities.getMin());    gradeExtremities.update(other.gradeExtremities.getMax());  }  calorie+=other.calorie;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.EXPRESSION_STATEMENT__EXPRESSION:    setExpression((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public X509Certificate generateSelfSigned(X500Name name,long validity,PublicKey publicKey,PrivateKey privateKey,SignatureType signatureType,BigInteger serialNumber,X509Extension extensions,Provider provider) throws CryptoException {  return generate(name,name,validity,publicKey,privateKey,signatureType,serialNumber,extensions,provider);}  }
class C{  private void handleInvokeRangeInsns(){  for (  NormalSsaInsn insn : invokeRangeInsns) {    adjustAndMapSourceRangeRange(insn);  }}  }
class C{  private boolean removeExpiredAttachmentPoints(List<AttachmentPoint> apList){  List<AttachmentPoint> expiredAPs=new ArrayList<AttachmentPoint>();  if (apList == null)   return false;  for (  AttachmentPoint ap : apList) {    if (ap.getLastSeen().getTime() + AttachmentPoint.INACTIVITY_INTERVAL < System.currentTimeMillis()) {      expiredAPs.add(ap);    }  }  if (expiredAPs.size() > 0) {    apList.removeAll(expiredAPs);    return true;  } else   return false;}  }
class C{  ZoneOffset createWallOffset(int savingsSecs){  return ZoneOffset.ofTotalSeconds(standardOffset.getTotalSeconds() + savingsSecs);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String suffix="_new";  String inputFilesString=null;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  String[] imageFiles;  int numImages=0;  int i;  int col, row;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      suffix=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("double")) {        dataType=DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=DataType.INTEGER;      }    }  }  if (inputFilesString == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      inputHeader=imageFiles[i];      WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");      int rows=image.getNumberRows();      int cols=image.getNumberColumns();      double inputNoData=image.getNoDataValue();      outputHeader=inputHeader.replace(".dep",suffix + ".dep");      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,inputNoData);      double[] data=null;      if (dataType == DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            output.setValue(row,col,data[col]);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else       if (dataType == DataType.FLOAT) {        double outputNoData=-32768;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != inputNoData) {              output.setValue(row,col,data[col]);            } else {              output.setValue(row,col,outputNoData);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else       if (dataType == DataType.INTEGER) {        double outputNoData=-32768;        double z;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != inputNoData) {              z=Math.round(data[col]);              output.setValue(row,col,(int)z);            } else {              output.setValue(row,col,outputNoData);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      }      image.close();      output.close();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void doPrintClassification(double[] dist,Instance inst,int index) throws Exception {  int prec=m_NumDecimals;  Instance withMissing=(Instance)inst.copy();  withMissing.setDataset(inst.dataset());  double predValue=0;  if (Utils.sum(dist) == 0) {    predValue=Utils.missingValue();  } else {    if (inst.classAttribute().isNominal()) {      predValue=Utils.maxIndex(dist);    } else {      predValue=dist[0];    }  }  append("  <" + TAG_PREDICTION + " "+ ATT_INDEX+ "=\""+ (index + 1)+ "\">\n");  if (inst.dataset().classAttribute().isNumeric()) {    append("    <" + TAG_ACTUAL_VALUE + ">");    if (inst.classIsMissing())     append("?"); else     append(Utils.doubleToString(inst.classValue(),prec));    append("</" + TAG_ACTUAL_VALUE + ">\n");    append("    <" + TAG_PREDICTED_VALUE + ">");    if (inst.classIsMissing())     append("?"); else     append(Utils.doubleToString(predValue,prec));    append("</" + TAG_PREDICTED_VALUE + ">\n");    append("    <" + TAG_ERROR + ">");    if (Utils.isMissingValue(predValue) || inst.classIsMissing())     append("?"); else     append(Utils.doubleToString(predValue - inst.classValue(),prec));    append("</" + TAG_ERROR + ">\n");  } else {    append("    <" + TAG_ACTUAL_LABEL + " "+ ATT_INDEX+ "=\""+ ((int)inst.classValue() + 1)+ "\""+ ">");    append(sanitize(inst.toString(inst.classIndex())));    append("</" + TAG_ACTUAL_LABEL + ">\n");    append("    <" + TAG_PREDICTED_LABEL + " "+ ATT_INDEX+ "=\""+ ((int)predValue + 1)+ "\""+ ">");    if (Utils.isMissingValue(predValue))     append("?"); else     append(sanitize(inst.dataset().classAttribute().value((int)predValue)));    append("</" + TAG_PREDICTED_LABEL + ">\n");    append("    <" + TAG_ERROR + ">");    if (!Utils.isMissingValue(predValue) && !inst.classIsMissing() && ((int)predValue + 1 != (int)inst.classValue() + 1))     append(VAL_YES); else     append(VAL_NO);    append("</" + TAG_ERROR + ">\n");    if (m_OutputDistribution) {      append("    <" + TAG_DISTRIBUTION + ">\n");      for (int n=0; n < dist.length; n++) {        append("      <" + TAG_CLASS_LABEL + " "+ ATT_INDEX+ "=\""+ (n + 1)+ "\"");        if (!Utils.isMissingValue(predValue) && (n == (int)predValue))         append(" " + ATT_PREDICTED + "=\""+ VAL_YES+ "\"");        append(">");        append(Utils.doubleToString(dist[n],prec));        append("</" + TAG_CLASS_LABEL + ">\n");      }      append("    </" + TAG_DISTRIBUTION + ">\n");    } else {      append("    <" + TAG_PREDICTION + ">");      if (Utils.isMissingValue(predValue))       append("?"); else       append(Utils.doubleToString(dist[(int)predValue],prec));      append("</" + TAG_PREDICTION + ">\n");    }  }  if (m_Attributes != null)   append(attributeValuesString(withMissing));  append("  </" + TAG_PREDICTION + ">\n");}  }
class C{  private static PaymentFile _getPaymentFileById(long paymentFileId){  PaymentFile paymentFile=null;  try {    paymentFile=PaymentFileLocalServiceUtil.fetchPaymentFile(paymentFileId);  } catch (  Exception e) {    paymentFile=null;  }  return paymentFile;}  }
class C{  @Override public void updateCharacterStream(String columnLabel,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateCharacterStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.EXECUTION_REGION__DEEP_ENTER_SEQUENCE:    return deepEnterSequence != null;case SexecPackage.EXECUTION_REGION__SHALLOW_ENTER_SEQUENCE:  return shallowEnterSequence != null;case SexecPackage.EXECUTION_REGION__HISTORY_VECTOR:return historyVector != null;case SexecPackage.EXECUTION_REGION__NODES:return nodes != null && !nodes.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @NonNull public static Animator repeat(final int count,@NonNull Animator animator){  if (count <= 1 && count != -1)   return animator;  return new RepeatAction(count,animator);}  }
class C{  @Override public void memberOnline(InternalDistributedMember member,PersistentMemberID persistentID){  this.membershipChanged=true;}  }
class C{  public TreeViewerBuilder makeEditable(){  return makeEditable(null,-1);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:18.146 -0500",hash_original_method="F6995F9609496F6742CAB01EE3CD1860",hash_generated_method="8D3F77CA2CB67D6333121CEA01E9029F") private void addLayer(Drawable layer,int id,int left,int top,int right,int bottom){  final LayerState st=mLayerState;  int N=st.mChildren != null ? st.mChildren.length : 0;  int i=st.mNum;  if (i >= N) {    ChildDrawable[] nu=new ChildDrawable[N + 10];    if (i > 0) {      System.arraycopy(st.mChildren,0,nu,0,i);    }    st.mChildren=nu;  }  mLayerState.mChildrenChangingConfigurations|=layer.getChangingConfigurations();  ChildDrawable childDrawable=new ChildDrawable();  st.mChildren[i]=childDrawable;  childDrawable.mId=id;  childDrawable.mDrawable=layer;  childDrawable.mInsetL=left;  childDrawable.mInsetT=top;  childDrawable.mInsetR=right;  childDrawable.mInsetB=bottom;  st.mNum++;  layer.setCallback(this);}  }
class C{  protected void extendElement(Element e){  SerialNode node=(SerialNode)SerialTrafficController.instance().getNode(0);  int index=1;  while (node != null) {    Element n=new Element("node");    n.setAttribute("name","" + node.getNodeAddress());    e.addContent(n);    n.addContent(makeParameter("nodetype","" + node.getNodeType()));    node=(SerialNode)SerialTrafficController.instance().getNode(index);    index++;  }}  }
class C{  private void addInstalledPackageToCache(String packageName){synchronized (mNotFoundClassesMap) {    mNotFoundClassesMap.remove(packageName);  }}  }
class C{  private void validateIdentity() throws ValidationException {  String nickname=((EditText)findViewById(R.id.nickname)).getText().toString();  String ident=((EditText)findViewById(R.id.ident)).getText().toString();  String realname=((EditText)findViewById(R.id.realname)).getText().toString();  if (nickname.trim().equals("")) {    throw new ValidationException(getResources().getString(R.string.validation_blank_nickname));  }  if (ident.trim().equals("")) {    throw new ValidationException(getResources().getString(R.string.validation_blank_ident));  }  if (realname.trim().equals("")) {    throw new ValidationException(getResources().getString(R.string.validation_blank_realname));  }  Pattern identPattern=Pattern.compile("^[a-zA-Z0-9\\[\\]\\-_/]+$");  if (!identPattern.matcher(ident).matches()) {    throw new ValidationException(getResources().getString(R.string.validation_invalid_ident));  }}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public static void main(String[] args){  Properties options=StringUtils.argsToProperties(args,optionArgDefs());  if (options.containsKey("help") || args.length == 0) {    System.err.println(usage(FrenchPostprocessor.class.getName()));    System.exit(-1);  }  int nThreads=PropertiesUtils.getInt(options,"nthreads",1);  FrenchPreprocessor preProcessor=new FrenchPreprocessor();  FrenchPostprocessor postProcessor=new FrenchPostprocessor(options);  CRFPostprocessor.setup(postProcessor,preProcessor,options);  CRFPostprocessor.execute(nThreads,preProcessor,postProcessor);}  }
class C{  public Iterator<Integer> iterator(){  return new MyIterator();}  }
class C{  @Override public int hashCode(){  return printer.hashCode();}  }
class C{  public static long compareWindowId(long windowIdA,long windowIdB,long firstWindowMillis,long windowWidthMillis){  long millisA=getWindowMillis(windowIdA,firstWindowMillis,windowWidthMillis);  long millisB=getWindowMillis(windowIdB,firstWindowMillis,windowWidthMillis);  return (millisA - millisB) / windowWidthMillis;}  }
class C{  public void destroy(){  TLCOutputSourceRegistry.getModelCheckSourceRegistry().disconnect(this);}  }
class C{  private Usage createTalkUsage(Context context){  if (talkUsage != null) {    return talkUsage;  }  TypeToken<List<Usage>> token=new TypeToken<List<Usage>>(){  };  List<Usage> initTalkIO=JsonUtils.parseJsonFile(context,"talk_io.json",token);  talkUsage=initTalkIO.get(0);  return talkUsage;}  }
class C{  @ValueConverter(rule="FQN_WITH_SELECTOR") public IValueConverter<String> FQN_WITH_SELECTOR(){  return fqnValueConverter;}  }
class C{  @Override public String toString(){  return VERSION;}  }
class C{  @Override default CompletableFuture<Integer> sumInt(final ToIntFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  public static byte[] I2OSP(int x){  byte[] result=new byte[4];  result[0]=(byte)(x >>> 24);  result[1]=(byte)(x >>> 16);  result[2]=(byte)(x >>> 8);  result[3]=(byte)x;  return result;}  }
class C{  public ShadowBorder(){  this(1,3,3);}  }
class C{  public void onLoad(String url){}  }
class C{  @SuppressWarnings("unchecked") private static void addHashCodeMethod(ClassNode classNode,List<TupleSchemaRegistry.SQLFieldInfo> fieldList) throws JSONException {  MethodNode hashCodeNode=new MethodNode(Opcodes.ACC_PUBLIC,"hashCode","()I",null,null);  hashCodeNode.visitAnnotation("Ljava/lang/Override;",true);  hashCodeNode.instructions.add(new IntInsnNode(Opcodes.BIPUSH,7));  hashCodeNode.instructions.add(new VarInsnNode(Opcodes.ISTORE,1));  for (  TupleSchemaRegistry.SQLFieldInfo fieldInfo : fieldList) {    String fieldName=fieldInfo.getColumnName();    String fieldType=fieldInfo.getType().getJavaType().getName();    String fieldJavaType=getJavaType(fieldType);    hashCodeNode.instructions.add(new IntInsnNode(Opcodes.BIPUSH,23));    hashCodeNode.instructions.add(new VarInsnNode(Opcodes.ILOAD,1));    hashCodeNode.instructions.add(new InsnNode(Opcodes.IMUL));    hashCodeNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));    hashCodeNode.instructions.add(new FieldInsnNode(Opcodes.GETFIELD,classNode.name,fieldName,fieldJavaType));switch (fieldType) {case "boolean":      LabelNode falseNode=new LabelNode();    LabelNode trueNode=new LabelNode();  hashCodeNode.instructions.add(new JumpInsnNode(Opcodes.IFEQ,falseNode));hashCodeNode.instructions.add(new IntInsnNode(Opcodes.SIPUSH,1231));hashCodeNode.instructions.add(new JumpInsnNode(Opcodes.GOTO,trueNode));hashCodeNode.instructions.add(falseNode);hashCodeNode.instructions.add(new IntInsnNode(Opcodes.SIPUSH,1237));hashCodeNode.instructions.add(trueNode);break;case "byte":case "char":case "short":case "int":break;case "float":hashCodeNode.instructions.add(new MethodInsnNode(Opcodes.INVOKESTATIC,"java/lang/Float","floatToIntBits","(F)I",false));break;case "long":hashCodeNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));hashCodeNode.instructions.add(new FieldInsnNode(Opcodes.GETFIELD,classNode.name,fieldName,fieldJavaType));hashCodeNode.instructions.add(new IntInsnNode(Opcodes.BIPUSH,32));hashCodeNode.instructions.add(new InsnNode(Opcodes.LUSHR));hashCodeNode.instructions.add(new InsnNode(Opcodes.LXOR));hashCodeNode.instructions.add(new InsnNode(Opcodes.L2I));break;case "double":hashCodeNode.instructions.add(new MethodInsnNode(Opcodes.INVOKESTATIC,"java/lang/Double","doubleToLongBits","(D)J",false));hashCodeNode.instructions.add(new InsnNode(Opcodes.DUP2));hashCodeNode.instructions.add(new VarInsnNode(Opcodes.LSTORE,2));hashCodeNode.instructions.add(new VarInsnNode(Opcodes.LLOAD,2));hashCodeNode.instructions.add(new IntInsnNode(Opcodes.BIPUSH,32));hashCodeNode.instructions.add(new InsnNode(Opcodes.LUSHR));hashCodeNode.instructions.add(new InsnNode(Opcodes.LXOR));hashCodeNode.instructions.add(new InsnNode(Opcodes.L2I));break;default :String objectOwnerType=fieldType.replace('.','/');LabelNode nullNode=new LabelNode();LabelNode continueNode=new LabelNode();hashCodeNode.instructions.add(new JumpInsnNode(Opcodes.IFNULL,nullNode));hashCodeNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));hashCodeNode.instructions.add(new FieldInsnNode(Opcodes.GETFIELD,classNode.name,fieldName,fieldJavaType));hashCodeNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,objectOwnerType,"hashCode","()I",false));hashCodeNode.instructions.add(new JumpInsnNode(Opcodes.GOTO,continueNode));hashCodeNode.instructions.add(nullNode);hashCodeNode.instructions.add(new InsnNode(Opcodes.ICONST_0));hashCodeNode.instructions.add(continueNode);break;}hashCodeNode.instructions.add(new InsnNode(Opcodes.IADD));hashCodeNode.instructions.add(new VarInsnNode(Opcodes.ISTORE,1));}hashCodeNode.instructions.add(new VarInsnNode(Opcodes.ILOAD,1));hashCodeNode.instructions.add(new InsnNode(Opcodes.IRETURN));classNode.methods.add(hashCodeNode);}  }
class C{  public void addQueenAt(XYLocation l){  if (!(queenExistsAt(l)))   squares[l.getXCoOrdinate()][l.getYCoOrdinate()]=1;}  }
class C{  private void startPlayback(){  Intent intent=getIntent();  if (intent == null || musicPlaybackService == null) {    return;  }  Uri uri=intent.getData();  String mimeType=intent.getType();  boolean handled=false;  if (uri != null && uri.toString().length() > 0) {    MusicUtils.playFile(uri);    handled=true;  } else   if (Playlists.CONTENT_TYPE.equals(mimeType)) {    long id=parseIdFromIntent(intent,"playlistId","playlist");    if (id >= 0) {      MusicUtils.playPlaylist(this,id);      handled=true;    }  } else   if (Albums.CONTENT_TYPE.equals(mimeType)) {    long id=parseIdFromIntent(intent,"albumId","album");    if (id >= 0) {      int position=intent.getIntExtra("position",0);      MusicUtils.playAlbum(this,id,position);      handled=true;    }  } else   if (Artists.CONTENT_TYPE.equals(mimeType)) {    long id=parseIdFromIntent(intent,"artistId","artist");    if (id >= 0) {      int position=intent.getIntExtra("position",0);      MusicUtils.playArtist(this,id,position);      handled=true;    }  }  if (handled) {    setIntent(new Intent());    ((QueueFragment)mPagerAdapter.getFragment(0)).refreshQueue();  }}  }
class C{  public static RecipeFragment newInstance(Recipe recipe,int sectionNumber){  RecipeFragment fragment=new RecipeFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean hasTotal(){  return getTotal() != null;}  }
class C{  public Animator build(){  final ObjectAnimator self=this.getAnimator();  final ObjectAnimator anim=new ObjectAnimator();  anim.setTarget(self.getTarget());  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {    anim.setAutoCancel(true);  }  if (self.getValues() != null) {    anim.setValues(self.getValues());  }  anim.setInterpolator(self.getInterpolator());  anim.setDuration(self.getDuration());  anim.setStartDelay(self.getStartDelay());  anim.setRepeatCount(self.getRepeatCount());  anim.setRepeatMode(self.getRepeatMode());  setupListeners(anim);  return anim;}  }
class C{  public IgniteException(String msg){  super(msg);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void run(){  amIActive=true;  ShapeType shapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String outputFile=args[0];  String shapeTypeStr=args[1].toLowerCase();  if (outputFile.isEmpty() || shapeTypeStr.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {switch (shapeTypeStr) {case "point":      shapeType=ShapeType.POINT;    break;case "pointz":  shapeType=ShapeType.POINTZ;break;case "pointm":shapeType=ShapeType.POINTM;break;case "multipoint":shapeType=ShapeType.MULTIPOINT;break;case "multipointz":shapeType=ShapeType.MULTIPOINTZ;break;case "multipointm":shapeType=ShapeType.MULTIPOINTM;break;case "polyline":shapeType=ShapeType.POLYLINE;break;case "polylinez":shapeType=ShapeType.POLYLINEZ;break;case "polylinem":shapeType=ShapeType.POLYLINEM;break;case "polygon":shapeType=ShapeType.POLYGON;break;case "polygonz":shapeType=ShapeType.POLYGONZ;break;case "polygonm":shapeType=ShapeType.POLYGONM;break;default :showFeedback("The specified ShapeType is not supported or recognized");return;}DBFField[] fields=new DBFField[1];fields[0]=new DBFField();fields[0].setName("FID");fields[0].setDataType(DBFField.DBFDataType.NUMERIC);fields[0].setFieldLength(10);fields[0].setDecimalCount(0);ShapeFile output=new ShapeFile(outputFile,shapeType,fields);output.write();returnData(outputFile);myHost.editVector();showFeedback("Operation complete.");} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  protected void emitBoxingContantPoolEntries(){  asm.emitConstantPoolUTF8("java/lang/Boolean");  asm.emitConstantPoolClass(asm.cpi());  booleanIdx=asm.cpi();  asm.emitConstantPoolUTF8("(Z)V");  asm.emitConstantPoolNameAndType(initIdx,asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S2),asm.cpi());  booleanCtorIdx=asm.cpi();  asm.emitConstantPoolUTF8("booleanValue");  asm.emitConstantPoolUTF8("()Z");  asm.emitConstantPoolNameAndType(sub(asm.cpi(),S1),asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S6),asm.cpi());  booleanUnboxIdx=asm.cpi();  asm.emitConstantPoolUTF8("java/lang/Byte");  asm.emitConstantPoolClass(asm.cpi());  byteIdx=asm.cpi();  asm.emitConstantPoolUTF8("(B)V");  asm.emitConstantPoolNameAndType(initIdx,asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S2),asm.cpi());  byteCtorIdx=asm.cpi();  asm.emitConstantPoolUTF8("byteValue");  asm.emitConstantPoolUTF8("()B");  asm.emitConstantPoolNameAndType(sub(asm.cpi(),S1),asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S6),asm.cpi());  byteUnboxIdx=asm.cpi();  asm.emitConstantPoolUTF8("java/lang/Character");  asm.emitConstantPoolClass(asm.cpi());  characterIdx=asm.cpi();  asm.emitConstantPoolUTF8("(C)V");  asm.emitConstantPoolNameAndType(initIdx,asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S2),asm.cpi());  characterCtorIdx=asm.cpi();  asm.emitConstantPoolUTF8("charValue");  asm.emitConstantPoolUTF8("()C");  asm.emitConstantPoolNameAndType(sub(asm.cpi(),S1),asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S6),asm.cpi());  characterUnboxIdx=asm.cpi();  asm.emitConstantPoolUTF8("java/lang/Double");  asm.emitConstantPoolClass(asm.cpi());  doubleIdx=asm.cpi();  asm.emitConstantPoolUTF8("(D)V");  asm.emitConstantPoolNameAndType(initIdx,asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S2),asm.cpi());  doubleCtorIdx=asm.cpi();  asm.emitConstantPoolUTF8("doubleValue");  asm.emitConstantPoolUTF8("()D");  asm.emitConstantPoolNameAndType(sub(asm.cpi(),S1),asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S6),asm.cpi());  doubleUnboxIdx=asm.cpi();  asm.emitConstantPoolUTF8("java/lang/Float");  asm.emitConstantPoolClass(asm.cpi());  floatIdx=asm.cpi();  asm.emitConstantPoolUTF8("(F)V");  asm.emitConstantPoolNameAndType(initIdx,asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S2),asm.cpi());  floatCtorIdx=asm.cpi();  asm.emitConstantPoolUTF8("floatValue");  asm.emitConstantPoolUTF8("()F");  asm.emitConstantPoolNameAndType(sub(asm.cpi(),S1),asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S6),asm.cpi());  floatUnboxIdx=asm.cpi();  asm.emitConstantPoolUTF8("java/lang/Integer");  asm.emitConstantPoolClass(asm.cpi());  integerIdx=asm.cpi();  asm.emitConstantPoolUTF8("(I)V");  asm.emitConstantPoolNameAndType(initIdx,asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S2),asm.cpi());  integerCtorIdx=asm.cpi();  asm.emitConstantPoolUTF8("intValue");  asm.emitConstantPoolUTF8("()I");  asm.emitConstantPoolNameAndType(sub(asm.cpi(),S1),asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S6),asm.cpi());  integerUnboxIdx=asm.cpi();  asm.emitConstantPoolUTF8("java/lang/Long");  asm.emitConstantPoolClass(asm.cpi());  longIdx=asm.cpi();  asm.emitConstantPoolUTF8("(J)V");  asm.emitConstantPoolNameAndType(initIdx,asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S2),asm.cpi());  longCtorIdx=asm.cpi();  asm.emitConstantPoolUTF8("longValue");  asm.emitConstantPoolUTF8("()J");  asm.emitConstantPoolNameAndType(sub(asm.cpi(),S1),asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S6),asm.cpi());  longUnboxIdx=asm.cpi();  asm.emitConstantPoolUTF8("java/lang/Short");  asm.emitConstantPoolClass(asm.cpi());  shortIdx=asm.cpi();  asm.emitConstantPoolUTF8("(S)V");  asm.emitConstantPoolNameAndType(initIdx,asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S2),asm.cpi());  shortCtorIdx=asm.cpi();  asm.emitConstantPoolUTF8("shortValue");  asm.emitConstantPoolUTF8("()S");  asm.emitConstantPoolNameAndType(sub(asm.cpi(),S1),asm.cpi());  asm.emitConstantPoolMethodref(sub(asm.cpi(),S6),asm.cpi());  shortUnboxIdx=asm.cpi();}  }
class C{  public boolean isQueryNewRecord(){  if (m_query != null)   return m_query.isNewRecordQuery();  return false;}  }
class C{  public static void write(File file,CharSequence data,boolean append) throws IOException {  write(file,data,Charset.defaultCharset(),append);}  }
class C{  public boolean containsKey(Object key){  checkKey(key);  return map.containsKey(key);}  }
class C{  public NumberParameter(OptionID optionID,T defaultValue){  super(optionID,defaultValue);}  }
class C{  @Deprecated public String lookupMid(MQLQueryWrapper mql) throws Exception {  String mqlQuery=mql.MQLquery;  String title=mql.value;  String checksum=getMD5Checksum(title);  logger.debug("MQLQUERY is " + mqlQuery);  JSONObject response;  if (IOUtils.exists(midCacheLocation + "/" + checksum+ ".cached")) {    System.out.println("Found!");    JSONParser jsonParser=new JSONParser();    response=(JSONObject)jsonParser.parse(FileUtils.readFileToString(new File(midCacheLocation + "/" + checksum+ ".cached"),"UTF-8"));  } else {    System.out.println("Caching");    response=getResponse(mqlQuery);    FileUtils.writeStringToFile(new File(midCacheLocation + "/" + checksum+ ".cached"),response.toString(),"UTF-8");  }  JSONObject result=(JSONObject)response.get("result");  if (result != null)   return (String)result.get("mid"); else   return null;}  }
class C{  public long reset(String name){  stop();  return start(name);}  }
class C{  public static void xml(String xml){  printer.xml(xml);}  }
class C{  private int paletteOffset(int rgb){  int plen=palette.length;  for (int iter=0; iter < plen; iter++) {    if (rgb == palette[iter]) {      return iter;    }  }  throw new IllegalStateException("Invalid palette request in paletteOffset");}  }
class C{  public ShortSparseArrayDataRow(){  this(0);}  }
class C{  public static void error(String tag,String msg,Throwable ex){  if (BuildConfig.DEBUG) {    Log.e(tag,msg,ex);  }}  }
class C{  public MonitoredHostProvider(HostIdentifier hostId){  this.hostId=hostId;  this.listeners=new ArrayList<HostListener>();  this.interval=DEFAULT_POLLING_INTERVAL;  this.activeVms=new HashSet<Integer>();  this.vmManager=new LocalVmManager();}  }
class C{  private void revokeSuspendedSubscriptions(List<Subscription> list,long sellerKey,PaymentType type){  for (  Subscription subscription : list) {    if (isOwningSubscription(sellerKey,subscription) && PaymentDataValidator.isPaymentTypeSupportedBySupplier(subscription.getOrganization(),subscription.getProduct(),type)) {      if (!checkSubKeyInSuspendedTransactionSubKeyList(subscription.getKey())) {        revokeSuspendedSubscription(subscription);      }    }  }}  }
class C{  public Task<FileShareRestRep> unmountNFS(URI id,FileSystemUnmountParam input){  return postTask(input,getIdUrl() + "/unmount",id);}  }
class C{  public JAXRSArchiveImpl(Archive<?> delegate){  super(JAXRSArchive.class,delegate);  setDefaultContextRoot();  addGeneratedApplication();  addFaviconExceptionHandler();}  }
class C{  public static void addProperty(String key,Object value){  RuntimeSingleton.addProperty(key,value);}  }
class C{  public static char[] copy(final char[] array){  char[] next=new char[array.length];  System.arraycopy(array,0,next,0,array.length);  return next;}  }
class C{  public void hide(){  if (popupMenu != null) {    popupMenu.removeFromParent();    popupMenu=null;  }  if (lockLayer != null) {    lockLayer.removeFromParent();    lockLayer=null;  }}  }
class C{  @Override public void paintBar(Graphics2D g2,BarRenderer renderer,int row,int column,RectangularShape bar,RectangleEdge base){  Paint itemPaint=renderer.getItemPaint(row,column);  GradientPaintTransformer t=renderer.getGradientPaintTransformer();  if (t != null && itemPaint instanceof GradientPaint) {    itemPaint=t.transform((GradientPaint)itemPaint,bar);  }  g2.setPaint(itemPaint);  g2.fill(bar);  if (renderer.isDrawBarOutline()) {    Stroke stroke=renderer.getItemOutlineStroke(row,column);    Paint paint=renderer.getItemOutlinePaint(row,column);    if (stroke != null && paint != null) {      g2.setStroke(stroke);      g2.setPaint(paint);      g2.draw(bar);    }  }}  }
class C{  public GoldSource(){  this("gold nugget");}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  @SuppressWarnings("unchecked") private ImmutableList<Class<? extends I>> expandPolymorphicClasses(ImmutableSet<Class<? extends I>> resourceClasses){  ImmutableList.Builder<Class<? extends I>> builder=new ImmutableList.Builder<>();  for (  Class<? extends I> clazz : resourceClasses) {    if (clazz.isAnnotationPresent(Entity.class)) {      builder.add(clazz);    } else {      for (      Class<? extends ImmutableObject> entityClass : ALL_CLASSES) {        if (clazz.isAssignableFrom(entityClass)) {          builder.add((Class<? extends I>)entityClass);        }      }    }  }  return builder.build();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:10.166 -0500",hash_original_method="2E34AAE119CD850D1B253E2693552FEB",hash_generated_method="CE8828523E7A9B60A987131B4DE4D317") public boolean hasParameter(String name){  return authParams.getNameValue(name) != null;}  }
class C{  public static void forceMkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      String message="File " + directory + " exists and is "+ "not a directory. Unable to create directory.";      throw new IOException(message);    }  } else {    if (!directory.mkdirs()) {      if (!directory.isDirectory()) {        String message="Unable to create directory " + directory;        throw new IOException(message);      }    }  }}  }
class C{  private void correctTooHigh(int childCount){  int lastPosition=mFirstPosition + childCount - 1;  if (lastPosition == mItemCount - 1 && childCount > 0) {    final int lastBottom=getScrollChildBottom();    final int end=(getBottom() - getTop()) - mListPadding.bottom;    int bottomOffset=end - lastBottom;    final int firstTop=getScrollChildTop();    if (bottomOffset > 0 && (mFirstPosition > 0 || firstTop < mListPadding.top)) {      if (mFirstPosition == 0) {        bottomOffset=Math.min(bottomOffset,mListPadding.top - firstTop);      }      tryOffsetChildrenTopAndBottom(bottomOffset);      if (mFirstPosition > 0) {        int newFirstTop=getScrollChildTop();        fillUp(mFirstPosition - 1,newFirstTop - mDividerHeight);        adjustViewsUpOrDown();      }    }  }}  }
class C{  public Itr(E[] listeners){  this.listeners=listeners;}  }
class C{  public void prepareChangesInfo(Change[] changes,List<ChangeInfo> changesInfo){  for (  Change ch : changes) {    if (ch instanceof DynamicValidationStateChange) {      prepareChangesInfo(((DynamicValidationStateChange)ch).getChildren(),changesInfo);    } else {      ChangeInfo changeInfo=DtoFactory.newDto(ChangeInfo.class);      String refactoringName=ch.getName();      if (ch instanceof UndoTextFileChange) {        changeInfo.setName(ChangeInfo.ChangeName.UPDATE);        changeInfo.setPath(((CompilationUnit)ch.getModifiedElement()).getPath().toString());      }      if (refactoringName.startsWith("Rename")) {        if (ch instanceof RenameCompilationUnitChange) {          prepareRenameCompilationUnitChange(changeInfo,ch);        } else         if (ch instanceof RenamePackageChange) {          prepareRenamePackageChange(changesInfo,changeInfo,ch);        }      }      if (refactoringName.startsWith("Move")) {        prepareMoveChange(changeInfo,ch);      }      changesInfo.add(changeInfo);    }  }}  }
class C{  public void sendSerialMessage(SerialMessage m,SerialListener reply){  sendMessage(m,reply);}  }
class C{  protected void showDialogMenu(){  if (!showDialogMenu) {    return;  }  if (menuManager == null) {    menuManager=new MenuManager();    fillDialogMenu(menuManager);  }  listenToDeactivate=!Util.isGtk();  Menu menu=menuManager.createContextMenu(getShell());  Rectangle bounds=toolBar.getBounds();  Point topLeft=new Point(bounds.x,bounds.y + bounds.height);  topLeft=getShell().toDisplay(topLeft);  menu.setLocation(topLeft.x,topLeft.y);  menu.setVisible(true);}  }
class C{  public boolean validate(Class type,Reader source,boolean strict) throws Exception {  return validate(type,NodeBuilder.read(source),strict);}  }
class C{  @Override public String toString(){  String result="CostSensitiveClassifierSplitEvaluator: ";  if (m_Template == null) {    return result + "<null> classifier";  }  return result + m_Template.getClass().getName() + " "+ m_ClassifierOptions+ "(version "+ m_ClassifierVersion+ ")";}  }
class C{  public static String randomId(){  return longToPaddedHex(ThreadLocalRandom.current().nextLong());}  }
class C{  @Override public void flush(){  if (count == 0) {    return;  }  if (count == LINE_SEPERATOR.length()) {    if (((char)buf[0]) == LINE_SEPERATOR.charAt(0) && ((count == 1) || ((count == 2) && ((char)buf[1]) == LINE_SEPERATOR.charAt(1)))) {      reset();      return;    }  }  final byte[] theBytes=new byte[count];  System.arraycopy(buf,0,theBytes,0,count);  category.log(priority,new String(theBytes));  reset();}  }
class C{  private void deleteResources(EndpointRemovalTaskState state,SubStage next){  Query resourceQuery=Query.Builder.create().addFieldClause(ComputeState.FIELD_NAME_PARENT_LINK,state.endpoint.computeLink,Occurance.SHOULD_OCCUR).build();  QuerySpecification qSpec=new QuerySpecification();  qSpec.query=resourceQuery;  ResourceRemovalTaskState removalServiceState=new ResourceRemovalTaskState();  removalServiceState.documentSelfLink=UUID.randomUUID().toString();  removalServiceState.resourceQuerySpec=qSpec;  removalServiceState.options=EnumSet.of(TaskOption.DOCUMENT_CHANGES_ONLY);  removalServiceState.isMockRequest=state.options.contains(TaskOption.IS_MOCK);  removalServiceState.tenantLinks=state.tenantLinks;  StatefulService service=this;  Operation.createPost(UriUtils.buildUri(getHost(),ResourceRemovalTaskService.FACTORY_LINK)).setBody(removalServiceState).setCompletion(null).sendWith(this);}  }
class C{  @GET @Produces({MediaType.APPLICATION_JSON}) public ListQueryAPIResponseEntity listQuery(@QueryParam("query") String query,@QueryParam("startTime") String startTime,@QueryParam("endTime") String endTime,@QueryParam("pageSize") int pageSize,@QueryParam("startRowkey") String startRowkey,@QueryParam("treeAgg") boolean treeAgg,@QueryParam("timeSeries") boolean timeSeries,@QueryParam("intervalmin") long intervalmin,@QueryParam("top") int top,@QueryParam("filterIfMissing") boolean filterIfMissing,@QueryParam("parallel") int parallel,@QueryParam("metricName") String metricName,@QueryParam("verbose") Boolean verbose){  if (!EagleConfigFactory.load().isCoprocessorEnabled())   return listQueryWithoutCoprocessor(query,startTime,endTime,pageSize,startRowkey,treeAgg,timeSeries,intervalmin,top,filterIfMissing,parallel,metricName,verbose);  StopWatch watch=new StopWatch();  watch.start();  ListQueryAPIResponseEntity result=new ListQueryAPIResponseEntity();  try {    validateQueryParameters(startRowkey,pageSize);    ListQueryCompiler comp=new ListQueryCompiler(query,filterIfMissing);    String serviceName=comp.serviceName();    SearchCondition condition=new SearchCondition();    condition.setOutputVerbose(verbose == null || verbose);    condition.setOutputAlias(comp.getOutputAlias());    condition.setFilter(comp.filter());    condition.setQueryExpression(comp.getQueryExpression());    if (comp.sortOptions() == null && top > 0) {      LOG.warn("Parameter \"top\" is only used for sort query! Ignore top parameter this time since it's not a sort query");    }    final List<String[]> partitionValues=comp.getQueryPartitionValues();    if (partitionValues != null) {      condition.setPartitionValues(Arrays.asList(partitionValues.get(0)));    }    EntityDefinition ed=EntityDefinitionManager.getEntityByServiceName(serviceName);    if (ed.isTimeSeries()) {      condition.setStartTime(startTime);      condition.setEndTime(endTime);    }    condition.setStartRowkey(startRowkey);    condition.setPageSize(pageSize);    List<String> outputFields=comp.outputFields();    List<String> groupbyFields=comp.groupbyFields();    List<String> aggregateFields=comp.aggregateFields();    Set<String> filterFields=comp.getFilterFields();    condition.setOutputAll(comp.isOutputAll());    if (outputFields == null)     outputFields=new ArrayList<String>();    if (comp.hasAgg()) {      if (groupbyFields != null)       outputFields.addAll(groupbyFields);      if (aggregateFields != null)       outputFields.addAll(aggregateFields);      if (GenericMetricEntity.GENERIC_METRIC_SERVICE.equals(serviceName) && !outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {        outputFields.add(GenericMetricEntity.VALUE_FIELD);      }    }    if (filterFields != null)     outputFields.addAll(filterFields);    condition.setOutputFields(outputFields);    if (comp.isOutputAll()) {      LOG.info("Output fields: ALL");    } else {      LOG.info("Output fields: " + StringUtils.join(outputFields,","));    }    GenericQuery reader=GenericQueryBuilder.select(outputFields).from(serviceName,metricName).where(condition).groupBy(comp.hasAgg(),groupbyFields,comp.aggregateFunctionTypes(),aggregateFields).timeSeries(timeSeries,intervalmin).treeAgg(treeAgg).orderBy(comp.sortOptions(),comp.sortFunctions(),comp.sortFields()).top(top).parallel(parallel).build();    List entities=reader.result();    result.setObj(entities);    result.setTotalResults(entities.size());    result.setSuccess(true);    result.setLastTimestamp(reader.getLastTimestamp());    result.setFirstTimestamp(reader.getFirstTimeStamp());  } catch (  Exception ex) {    LOG.error("Fail executing list query",ex);    result.setException(EagleExceptionWrapper.wrap(ex));    result.setSuccess(false);    return result;  } finally {    watch.stop();    result.setElapsedms(watch.getTime());  }  LOG.info("Query done " + watch.getTime() + " ms");  return result;}  }
class C{  public JLabel(Icon image,int horizontalAlignment){  this(null,image,horizontalAlignment);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static void compressLongestRunOfZeroes(int[] hextets){  int bestRunStart=-1;  int bestRunLength=-1;  int runStart=-1;  for (int i=0; i < hextets.length + 1; i++) {    if (i < hextets.length && hextets[i] == 0) {      if (runStart < 0) {        runStart=i;      }    } else     if (runStart >= 0) {      int runLength=i - runStart;      if (runLength > bestRunLength) {        bestRunStart=runStart;        bestRunLength=runLength;      }      runStart=-1;    }  }  if (bestRunLength >= 2) {    Arrays.fill(hextets,bestRunStart,bestRunStart + bestRunLength,-1);  }}  }
class C{  public Person(int name,String trustPolicy,MessagePropagationSimulation sim){  this.name=name;  this.sim=sim;  this.trustPolicy=trustPolicy;  for (int i=0; i < MAX_QUEUE_LENGTH; i++) {    double p=sim.random.nextDouble();    addMessageToQueue(new Message(UUID.randomUUID().toString(),p));  }}  }
class C{  public CouldntInitializeDatabaseException(final Exception exception){  super(exception);}  }
class C{  static int excessArgumentsMatchesVargsParameter(Parameter[] params,ClassNode[] args){  int dist=0;  ClassNode vargsBase=params[params.length - 1].getType().getComponentType();  for (int i=params.length; i < args.length; i++) {    if (!isAssignableTo(args[i],vargsBase))     return -1; else     dist+=getClassDistance(vargsBase,args[i]);  }  return dist;}  }
class C{  boolean isDependentOn(CompiledValue cv,RuntimeIterator itr){  return getDependencySet(cv,true).contains(itr);}  }
class C{  protected boolean areAllEqual(final Collection<? extends AnnotatedTypeMirror> types1,final Collection<? extends AnnotatedTypeMirror> types2,final VisitHistory visited){  if (types1.size() != types2.size()) {    ErrorReporter.errorAbort("Mismatching collection sizes:\n" + PluginUtil.join(",",types1) + "\n"+ PluginUtil.join(",",types2));  }  final Iterator<? extends AnnotatedTypeMirror> types1Iter=types1.iterator();  final Iterator<? extends AnnotatedTypeMirror> types2Iter=types2.iterator();  while (types1Iter.hasNext()) {    final AnnotatedTypeMirror type1=types1Iter.next();    final AnnotatedTypeMirror type2=types2Iter.next();    if (!checkOrAreEqual(type1,type2,visited)) {      return false;    }  }  return true;}  }
class C{  @Override public void debugPrint(PrintStream out) throws AdeException {  super.debugPrint(out);  out.println("consideringEmptyIntervals = " + m_percentilesWithEmptyIntervals);  out.println("intervalCount = " + m_intervalCount);  out.println("percentiles:");  for (int i=0; i < NUM_BUCKETS; ++i) {    out.printf("  %3d: %10.5f\n",i,m_percentiles[i]);  }}  }
class C{  public void keyReleased(KeyEvent e){synchronized (keyLock) {    keysDown.remove(e.getKeyCode());  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public SelectResults query(String queryPredicate,Object[] queryParams){  return QueryOp.execute(this.pool,queryPredicate,queryParams);}  }
class C{  private List<String> generateHistoryForFilters(boolean takeAllUsers){  List<String> hashes=ContainerUtil.newArrayList();  hashes.add(last());  git("config user.name 'bob.smith'");  git("config user.name 'bob.smith@example.com'");  if (takeAllUsers) {    String commitByBob=tac("file.txt");    hashes.add(commitByBob);  }  setupUsername();  hashes.add(tac("file1.txt"));  git("checkout -b feature");  String commitOnlyInFeature=tac("file2.txt");  hashes.add(commitOnlyInFeature);  git("checkout master");  String commitOnlyInMaster=tac("master.txt");  Collections.reverse(hashes);  refresh();  return hashes;}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  public void testCase2(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  byte rBytes[]={-11,-41,-101,54,-97,-52,-77,-41,44,-86,-106,-5,-29,85,116,51,-101,-121,-90};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static String toXml(final FeaturesConfig toConvert,Boolean prettyXml) throws JAXBException, IOException {  String retVal="";  try (StringWriter writer=new StringWriter()){    toXml(toConvert,writer,prettyXml);    retVal=writer.toString();    return retVal;  } }  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesDate1String=null;  String inputFilesDate2String=null;  String[] imageFilesDate1=null;  String[] imageFilesDate2=null;  String outputHeader=null;  String outputHeaderDirection=null;  WhiteboxRasterInfo[] date1Images=null;  WhiteboxRasterInfo[] date2Images=null;  int nCols=0;  int nRows=0;  double z;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data1;  double[][] data2;  double noData=-32768;  double dist, direction;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesDate1String=args[0];  inputFilesDate2String=args[1];  outputHeader=args[2];  outputHeaderDirection=args[3];  try {    imageFilesDate1=inputFilesDate1String.split(";");    imageFilesDate2=inputFilesDate2String.split(";");    numImages=imageFilesDate1.length;    if (imageFilesDate2.length != numImages) {      showFeedback("The number of specified images must be the same for both dates.");      return;    }    date1Images=new WhiteboxRasterInfo[numImages];    date2Images=new WhiteboxRasterInfo[numImages];    double[] date1NoDataValues=new double[numImages];    double[] date2NoDataValues=new double[numImages];    for (i=0; i < numImages; i++) {      date1Images[i]=new WhiteboxRasterInfo(imageFilesDate1[i]);      date2Images[i]=new WhiteboxRasterInfo(imageFilesDate2[i]);      if (i == 0) {        nCols=date1Images[i].getNumberColumns();        nRows=date1Images[i].getNumberRows();        noData=date1Images[i].getNoDataValue();        if (date2Images[i].getNumberColumns() != nCols || date2Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      } else {        if (date1Images[i].getNumberColumns() != nCols || date1Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }        if (date2Images[i].getNumberColumns() != nCols || date2Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      date1NoDataValues[i]=date1Images[i].getNoDataValue();      date2NoDataValues[i]=date2Images[i].getNoDataValue();    }    data1=new double[numImages][];    data2=new double[numImages][];    double[] directionArray=new double[numImages];    for (i=0; i < numImages; i++) {      directionArray[i]=Math.pow(2,i);    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFilesDate1[0],WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    WhiteboxRaster outputDir=new WhiteboxRaster(outputHeaderDirection,"rw",imageFilesDate1[0],WhiteboxRaster.DataType.INTEGER,0);    outputDir.setDataScale(DataScale.CATEGORICAL);    outputDir.setPreferredPalette("qual.pal");    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data1[i]=date1Images[i].getRowValues(row);        data2[i]=date2Images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        dist=0;        direction=0;        a=0;        for (i=0; i < numImages; i++) {          if (data1[i][col] != date1NoDataValues[i] && data2[i][col] != date2NoDataValues[i]) {            z=(data2[i][col] - data1[i][col]);            dist+=z * z;            a++;            if (z >= 0) {              direction+=directionArray[i];            }          }        }        if (a > 0) {          output.setValue(row,col,Math.sqrt(dist));          outputDir.setValue(row,col,direction);        } else {          output.setValue(row,col,noData);          outputDir.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    for (i=0; i < numImages; i++) {      date1Images[i].close();      date2Images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    outputDir.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputDir.addMetadataEntry("Created on " + new Date());    outputDir.close();    returnData(outputHeader);    returnData(outputHeaderDirection);    String ret="Key For Interpreting The CVA Direction Image:\n\n\tDirection of Change (+ or -)\nValue";    for (i=0; i < numImages; i++) {      ret+="\tBand" + (i + 1);    }    ret+="\n";    String line="";    for (a=0; a < (2 * Math.pow(2,(numImages - 1))); a++) {      line=a + "\t";      for (i=0; i < numImages; i++) {        if (BitOps.checkBit(a,i)) {          line+="+\t";        } else {          line+="-\t";        }      }      ret+=line + "\n";    }    returnData(ret);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static final CharSequence escapeWhiteChar(CharSequence str,Locale locale){  if (str == null || str.length() == 0)   return str;  CharSequence buffer=str;  for (int i=0; i < escapableWhiteChars.length; i++) {    buffer=replaceIgnoreCase(buffer,escapableWhiteChars[i].toLowerCase(locale),"\\",locale);  }  return buffer;}  }
class C{  @RequestProcessing(value="/pre-post",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass={CSRFToken.class,StopwatchEndAdvice.class}) public void showPreAddArticle(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/pre-post.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  dataModel.put(Common.BROADCAST_POINT,Pointtransfer.TRANSFER_SUM_C_ADD_ARTICLE_BROADCAST);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  protected boolean beforeSave(boolean newRecord){  Timestamp date=getStartDate();  if (date != null)   setStartDate(TimeUtil.getDay(date)); else   return false;  date=getEndDate();  if (date != null)   setEndDate(TimeUtil.getDay(date)); else   setEndDate(TimeUtil.getMonthLastDay(getStartDate()));  if (getEndDate().before(getStartDate())) {    SimpleDateFormat df=DisplayType.getDateFormat(DisplayType.Date);    log.saveError("Error",df.format(getEndDate()) + " < " + df.format(getStartDate()));    return false;  }  MYear year=new MYear(getCtx(),getC_Year_ID(),get_TrxName());  Query query=MTable.get(getCtx(),"C_Period").createQuery("C_Year_ID IN (SELECT y.C_Year_ID from C_Year y WHERE" + "                   y.C_Calendar_ID =?)" + " AND (? BETWEEN StartDate AND EndDate"+ " OR ? BETWEEN StartDate AND EndDate)"+ " AND PeriodType=?",get_TrxName());  query.setParameters(year.getC_Calendar_ID(),getStartDate(),getEndDate(),getPeriodType());  List<MPeriod> periods=query.list();  for (int i=0; i < periods.size(); i++) {    if (periods.get(i).getC_Period_ID() != getC_Period_ID()) {      log.saveError("Error","Period overlaps with: " + periods.get(i).getName());      return false;    }  }  return true;}  }
class C{  private boolean sendQueryResponse(UUID nodeId,GridCacheQueryResponse res,long timeout){  ClusterNode node=cctx.node(nodeId);  if (node == null)   return false;  int attempt=1;  IgniteCheckedException err=null;  while (!Thread.currentThread().isInterrupted()) {    try {      if (log.isDebugEnabled())       log.debug("Send query response: " + res);      Object topic=topic(nodeId,res.requestId());      cctx.io().sendOrderedMessage(node,topic,res,cctx.ioPolicy(),timeout > 0 ? timeout : Long.MAX_VALUE);      return true;    } catch (    ClusterTopologyCheckedException ignored) {      if (log.isDebugEnabled())       log.debug("Failed to send query response since node left grid [nodeId=" + nodeId + ", res="+ res+ "]");      return false;    }catch (    IgniteCheckedException e) {      if (err == null)       err=e;      if (Thread.currentThread().isInterrupted())       break;      if (attempt < RESEND_ATTEMPTS) {        if (log.isDebugEnabled())         log.debug("Failed to send queries response (will try again) [nodeId=" + nodeId + ", res="+ res+ ", attempt="+ attempt+ ", err="+ e+ "]");        if (!Thread.currentThread().isInterrupted())         try {          U.sleep(RESEND_FREQ);        } catch (        IgniteInterruptedCheckedException e1) {          U.error(log,"Waiting for queries response resending was interrupted (response will not be sent) " + "[nodeId=" + nodeId + ", response="+ res+ "]",e1);          return false;        }      } else {        U.error(log,"Failed to sender cache response [nodeId=" + nodeId + ", response="+ res+ "]",err);        return false;      }    }    attempt++;  }  return false;}  }
class C{  public Map<String,String> addZonesStrategy(WBEMClient client,List<Zone> zones,String fabricId,String fabricWwn,boolean activateZones) throws NetworkDeviceControllerException {  Map<String,String> addedZonesResult=new HashMap<String,String>();  if (zones.isEmpty()) {    throw DeviceControllerException.exceptions.entityNullOrEmpty("zones");  }  CIMInstance zoneServiceIns=null;  try {    _log.info("add zones started.");    _log.info("Attempting to start a zoning session");    zoneServiceIns=_smisHelper.startSession(client,fabricId,fabricWwn);    if (zoneServiceIns == null) {      _log.info("Failed to start a zoning session.");      throw NetworkDeviceControllerException.exceptions.startZoningSessionFailed();    }    CIMObjectPath zonesetPath=null;    CIMInstance activeZonesetIns=_smisHelper.getActiveZonesetInstance(client,fabricId,fabricWwn);    if (activeZonesetIns == null) {      _log.info("No active zoneset fabrics: " + fabricId);      throw NetworkDeviceControllerException.exceptions.noActiveZonesetForFabric(fabricId);    } else {      zonesetPath=_smisHelper.getShadowZonesetPath(client,fabricId,fabricWwn,activeZonesetIns);    }    for (    Zone zone : zones) {      try {        if (checkAndCreateZone(client,zoneServiceIns,fabricId,fabricWwn,zonesetPath,zone,activateZones)) {          addedZonesResult.put(zone.getName(),SUCCESS);        } else {          addedZonesResult.put(zone.getName(),NO_CHANGE);        }      } catch (      Exception ex) {        addedZonesResult.put(zone.getName(),ERROR + ": " + ex.getMessage());        handleZonesStrategyException(ex,activateZones);      }    }    _log.info("Attempting to close zoning session.");    if (!hasResult(addedZonesResult,SUCCESS)) {      _log.info("No zones were added. Closing the session with no commit");      if (!_smisHelper.endSession(client,zoneServiceIns,false)) {        _log.info("Failed to terminate zoning session. Ignoring as session may have expired.");      }      return addedZonesResult;    } else {      if (_smisHelper.endSession(client,zoneServiceIns,true)) {        if (activateZones) {          _log.info("Attempting to activate the zoneset.");          if (_smisHelper.activateZoneSet(client,zoneServiceIns,zonesetPath,true)) {            _log.info("The zoneset was activated succcessfully.");          } else {            _log.info("Failed to activate the zoneset");          }        }      } else {        throw NetworkDeviceControllerException.exceptions.addZonesStrategyFailedZoneCommit();      }    }    _log.info("Add zone completed successfully.");  } catch (  Exception e1) {    try {      if (zoneServiceIns != null) {        _log.info("Attempting to terminate zoning session.");        _smisHelper.endSession(client,zoneServiceIns,false);      }    } catch (    WBEMException e) {      _log.error("Failed to terminate zoning session." + e.getLocalizedMessage(),e);    }    _log.error("Failed to create zones: " + e1.getLocalizedMessage(),e1);    throw NetworkDeviceControllerException.exceptions.addZonesStrategyFailed(e1);  }  return addedZonesResult;}  }
class C{  private static float spToPx(Context context,float sp){  float fontScale=context.getResources().getDisplayMetrics().scaledDensity;  return sp * fontScale;}  }
class C{  @Override public void openElement(String tagName,int index) throws IOException {  int count=0;  ArrayList list=current.getChildren();  for (int i=0; i < list.size(); i++) {    XMLElement node=(XMLElement)list.get(i);    if (node.getName().equals(tagName)) {      if (count++ == index) {        stack.push(current);        current=node;        return;      }    }  }  throw new IOException("no such element:" + tagName + " at index:"+ index);}  }
class C{  public LookupFilter(){  canFilterIndexColorModel=true;}  }
class C{  TaskHandle enqueuePollTask(String snapshotName,ImmutableSet<String> kindsToLoad){  return QueueFactory.getQueue(QUEUE).add(TaskOptions.Builder.withUrl(PATH).method(Method.POST).countdownMillis(POLL_COUNTDOWN.getMillis()).param(SNAPSHOT_NAME_PARAM,snapshotName).param(SNAPSHOT_KINDS_TO_LOAD_PARAM,Joiner.on(',').join(kindsToLoad)));}  }
class C{  protected void doScroll(MouseWheelEvent e){  if (this.showVerticalScrollbar) {    this.verticalScrollBar.scroll(e.getUnitsToScroll() * this.getMouseWheelScrollUnit(AVKey.VERTICAL));  } else   if (this.showHorizontalScrollbar) {    this.horizontalScrollBar.scroll(e.getUnitsToScroll() * this.getMouseWheelScrollUnit(AVKey.HORIZONTAL));  }}  }
class C{  @Override public CGRect clone(){  return new CGRect(x,y,width,height);}  }
class C{  public DateHistogramBuilder minDocCount(long minDocCount){  this.minDocCount=minDocCount;  return this;}  }
class C{  public void release(){  dbOpenHelper.close();  dbOpenHelper=null;}  }
class C{  @Override public void after(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);  mThread.start();}  }
class C{  public void area(String srcName,Paint color,String legend){  area(srcName,color,legend,false);}  }
class C{  public boolean run(char[] s,int offset,int length){  int p=0;  int l=offset + length;  for (int i=offset, cp=0; i < l; i+=Character.charCount(cp)) {    p=step(p,cp=Character.codePointAt(s,i,l));    if (p == -1)     return false;  }  return accept[p];}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public int colSum(int classindex){  int s=0;  for (int i=0; i < confusion.length; i++) {    s+=confusion[i][classindex];  }  return s;}  }
class C{  public CursorControllerApp(TalkBackService service){  mService=service;  mGranularityManager=new CursorGranularityManager(service);}  }
class C{  public static Future<LogRecordWithDLSN> asyncReadLastRecord(final String streamName,final LogSegmentMetadata l,final boolean fence,final boolean includeControl,final boolean includeEndOfStream,final int scanStartBatchSize,final int scanMaxBatchSize,final AtomicInteger numRecordsScanned,final ExecutorService executorService,final LedgerHandleCache handleCache){  final LogRecordSelector selector=new LastRecordSelector();  return asyncReadRecord(streamName,l,fence,includeControl,includeEndOfStream,scanStartBatchSize,scanMaxBatchSize,numRecordsScanned,executorService,handleCache,selector,true,0L);}  }
class C{  public void disconnectPort(LnPortController p){  istream=null;  ostream=null;  if (controller != p) {    log.warn("disconnectPort: disconnect called from non-connected LnPortController");  }  controller=null;}  }
class C{  public void push(final float value){  int bits=Float.floatToIntBits(value);  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {    mv.visitInsn(Opcodes.FCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public PicassoBlur(Context context){  contextRef=new WeakReference<Context>(context);}  }
class C{  public LDAPAuthenticationProviderModule(AuthenticationProvider authProvider) throws GuacamoleException {  this.environment=new LocalEnvironment();  this.authProvider=authProvider;}  }
class C{  public static void unregisterMbeans(MBeanServer mBeanServer){  try {    mBeanServer.unregisterMBean(Log4jMXBeanImp.getObjectName());    mBeanServer.unregisterMBean(ExceptionMXBeanImp.getObjectName());    mBeanServer.unregisterMBean(ExceptionDeltaMXBeanImp.getObjectName());    mBeanServer.unregisterMBean(Log4jDeltaMXBeanImp.getObjectName());    mBeanServer.unregisterMBean(JamonMXBeanImp.getObjectName());    mBeanServer.unregisterMBean(HttpStatusMXBeanImp.getObjectName());    mBeanServer.unregisterMBean(HttpStatusDeltaMXBeanImp.getObjectName());    unregisterGcMXBean(mBeanServer);    unregisterMbeansFromPropsFile(mBeanServer);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static int EIDRM(){  return Errno.EIDRM.intValue();}  }
class C{  @Override public boolean onPreferenceChange(Preference preference,Object newValue){  setPreferenceSummary(preference,newValue);  SharedPreferences sharedPref=PreferenceManager.getDefaultSharedPreferences(getActivity());  SharedPreferences.Editor spe=sharedPref.edit();  spe.putString(Constants.KEY_PREF_SORT_ORDER_LISTS,newValue.toString()).apply();  return true;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private void hideCard(View view){  mSoundPool.play(mSoundDoorClose,1,1,0,0,1.0f);  view.findViewById(R.id.card_pane_left).startAnimation(mAnimationLeftPaneSlideIn);  view.findViewById(R.id.card_pane_right).startAnimation(mAnimationRightPaneSlideIn);}  }
class C{  public void transitionToIntentCaptureLayout(){  mIntentReviewLayout.setVisibility(View.GONE);  mCaptureLayout.setVisibility(View.VISIBLE);  mCancelLayout.setVisibility(View.GONE);  mMode=MODE_INTENT;}  }
class C{  private Scope peek() throws JSONException {  if (stack.isEmpty()) {    throw new JSONException("Nesting problem");  }  return stack.get(stack.size() - 1);}  }
class C{  public boolean wasInitialized(){  return this.isInitialized;}  }
class C{  public static void CF9(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  double N=2.0;  double a=3.0;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    if (j % 3 == 1) {      sum1+=yj * yj;      count1++;    } else     if (j % 3 == 2) {      sum2+=yj * yj;      count2++;    } else {      sum3+=yj * yj;      count3++;    }  }  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;  c[0]=(f[0] * f[0] + f[1] * f[1]) / (1 - f[2] * f[2]) - a * Math.sin(N * PI * ((f[0] * f[0] - f[1] * f[1]) / (1 - f[2] * f[2]) + 1.0)) - 1.0;}  }
class C{  public Boolean isEnableLogging(){  return enableLogging;}  }
class C{  public static String encodeBase64(byte[] data,int offset,int len,boolean lineBreaks){  return Base64.encodeBytes(data,offset,len,(lineBreaks ? Base64.NO_OPTIONS : Base64.DONT_BREAK_LINES));}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(super.hashCode(),scale);}  }
class C{  final public int size(){  return n;}  }
class C{  void jbInit() throws Exception {  mainPanel.setLayout(mainLayout);  actionLabel.setText(Msg.translate(Env.getCtx(),"DocAction"));  actionCombo.addActionListener(this);  message.setLineWrap(true);  message.setPreferredSize(new Dimension(350,35));  message.setWrapStyleWord(true);  message.setBackground(AdempierePLAF.getFieldBackground_Inactive());  message.setEditable(false);  northPanel.setLayout(northLayout);  northLayout.setAlignment(FlowLayout.RIGHT);  getContentPane().add(mainPanel);  mainPanel.add(northPanel,BorderLayout.NORTH);  northPanel.add(actionLabel,null);  northPanel.add(actionCombo,null);  mainPanel.add(centerPane,BorderLayout.CENTER);  centerPane.getViewport().add(message,null);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addButton(batchButton);  confirmPanel.addActionListener(this);  batchButton.addActionListener(this);}  }
class C{  public IFloodlightModuleContext loadModulesFromConfig(String fName) throws FloodlightModuleException {  Properties prop=new Properties();  Collection<String> configMods=new ArrayList<>();  if (fName == null) {    logger.info("Loading default modules");    InputStream is=this.getClass().getClassLoader().getResourceAsStream(COMPILED_CONF_FILE);    mergeProperties(is,null,configMods,prop);  } else {    File confFile=new File(fName);    if (!confFile.exists())     throw new FloodlightModuleConfigFileNotFoundException(fName);    logger.info("Loading modules from {}",confFile.getPath());    if (confFile.isFile()) {      mergeProperties(null,confFile,configMods,prop);    } else {      File[] files=confFile.listFiles();      Arrays.sort(files);      for (      File f : files) {        logger.debug("Loading conf.d file {}",f.getPath());        if (f.isFile() && f.getName().matches(".*\\.properties$")) {          mergeProperties(null,f,configMods,prop);        }      }    }  }  return loadModulesFromList(configMods,prop);}  }
class C{  private void handleRingerModeChanged(int ringerMode){  mRingerMode=ringerMode;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public PbrpcConnectionException(String arg0){  super(arg0);}  }
class C{  public void handleDOMNodeInsertedEvent(MutationEvent evt){  BindableElement be=(BindableElement)e;  Element shadowTree=be.getXblShadowTree();  if (shadowTree == null && evt.getTarget() instanceof Element) {    handleElementAdded((CompositeGraphicsNode)node,e,(Element)evt.getTarget());  }}  }
class C{  private void showList(){  ArrayAdapter<? extends Object> adapter=new NdefRecordAdapter(this,message);  ListView listView=(ListView)findViewById(R.id.recordListView);  listView.setAdapter(adapter);  listView.setVisibility(View.VISIBLE);}  }
class C{  private String attributeValue() throws IOException {  skipWhitespaces();  if (isChar('<') || isChar('>') || startsWith("/>")) {    return "";  }  boolean isQuoteMode=false;  boolean isAposMode=false;  StringBuffer result=new StringBuffer();  if (isChar('\'')) {    isAposMode=true;    saveCurrent();    go();  } else   if (isChar('\"')) {    isQuoteMode=true;    saveCurrent();    go();  }  boolean isMultiWord=props.isAllowMultiWordAttributes();  boolean allowHtml=props.isAllowHtmlInsideAttributes();  while (!isAllRead() && ((isAposMode && !isChar('\'') && (allowHtml || !isChar('>') && !isChar('<'))&& (isMultiWord || !isWhitespace())) || (isQuoteMode && !isChar('\"') && (allowHtml || !isChar('>') && !isChar('<'))&& (isMultiWord || !isWhitespace())) || (!isAposMode && !isQuoteMode && !isWhitespace()&& !isChar('>')&& !isChar('<')))) {    result.append(_working[_pos]);    saveCurrent();    go();  }  if (isChar('\'') && isAposMode) {    saveCurrent();    go();  } else   if (isChar('\"') && isQuoteMode) {    saveCurrent();    go();  }  return result.toString();}  }
class C{  protected void testVoidSpec(CallSpec<Void,HttpError> spec) throws Exception {  server.enqueue(new MockResponse().setResponseCode(204));  Response<Void,HttpError> response=spec.execute();  assertThat(response.isSuccessful()).isTrue();  assertThat(response.body()).isNull();}  }
class C{  public boolean canRead(){  return false;}  }
class C{  public URIPattern(String pattern){  try {    uriPattern=new URI(pattern);  } catch (  URISyntaxException ex) {    throw new IllegalArgumentException("cannot parse URI pattern [" + pattern + "]");  }}  }
class C{  void readFully(ByteBuffer data) throws IOException {  while (data.hasRemaining()) {    input.read(data);  }}  }
class C{  private static void readStandardMappingTable(final int key,final String file_name){  String char_value, NAME, VAL, line, hexVal;  int value;  BufferedReader input_stream=null;  glyphToChar[key]=new HashMap<String,Integer>();  try {    input_stream=(file_name.equals("symbol.cfg")) ? new BufferedReader(new InputStreamReader(loader.getResourceAsStream("org/jpedal/res/pdf/" + file_name),enc)) : new BufferedReader(new InputStreamReader(loader.getResourceAsStream("org/jpedal/res/pdf/" + file_name),"UTF-16"));    if (input_stream == null) {      LogWriter.writeLog("Unable to open " + file_name + " to read standard encoding");    }    while (true) {      line=input_stream.readLine();      if (line == null) {        break;      }      final StringTokenizer values=new StringTokenizer(line);      final int tokenCount=values.countTokens();      if (tokenCount > 1 && (!line.contains("space"))) {switch (tokenCount) {case 3:          char_value=values.nextToken();        NAME=values.nextToken();      VAL=values.nextToken();    break;case 4:  hexVal=values.nextToken();values.nextToken();NAME=values.nextToken();VAL=values.nextToken();char_value=Character.toString((char)Integer.parseInt(hexVal,16));break;case 2:char_value=" ";NAME=values.nextToken();VAL=values.nextToken();break;default :char_value=values.nextToken();NAME=values.nextToken();VAL=values.nextToken();}if (tokenCount != 2) {unicode_name_mapping_table.put(key + NAME,char_value);}glyphToChar[key].put(NAME,Integer.parseInt(VAL));if (tokenCount != 2) {unicode_name_mapping_table.put(NAME,char_value);}if (Character.isDigit(VAL.charAt(0))) {value=Integer.parseInt(VAL,8);if (key == ZAPF) {ZAPF_char_encoding_table[value]=char_value;} else if (key == SYMBOL) {SYMBOL_char_encoding_table[value]=char_value;} else if (key == MACEXPERT) {MACEXPERT_char_encoding_table[value]=char_value;}unicode_char_decoding_table[key][value]=NAME;}}}} catch (final Exception e) {LogWriter.writeLog("Exception " + e + " reading lookup table for pdf");}if (input_stream != null) {try {input_stream.close();} catch (final Exception e) {LogWriter.writeLog("Exception " + e + " reading lookup table for pdf  for abobe map");}}}  }
class C{  public AudioAction(String name,String resource){  super(name);  audioResource=resource;}  }
class C{  public static ConditionOperand CMPL_GREATER(){  return new ConditionOperand(CMPL_GREATER);}  }
class C{  @Override public boolean fire(final Player player,final Sentence sentence,final Entity npc){  String toadd="";  List<String> neededcreatures;  if (allcreatures == null) {    neededcreatures=creatures;  } else {    final String givenEnemies=player.getQuest(questSlot,questGroupIndex);    neededcreatures=allcreatures.get(givenEnemies);  }  ;  final String temp=player.getQuest(questSlot,questIndex);  if (temp == null) {    return false;  }  final List<String> tokens=Arrays.asList(temp.split(","));  if ((tokens.size() % 5) != 0) {    logger.error("Wrong record in player's " + player.getName() + " quest slot ("+ questSlot+ "), position "+ questIndex+ " : ["+ player.getQuest(questSlot)+ "]");    return true;  }  LinkedList<String> mycreatures=new LinkedList<String>();  for (int i=0; i < tokens.size() / 5; i++) {    mycreatures.add(tokens.get(i * 5));  }  for (  String monster : neededcreatures) {    if (!mycreatures.contains(monster)) {      if (do_update) {        toadd=toadd + "," + monster+ ",0,0,0,0";        logger.debug("Will add <" + monster + "> to player <"+ player.getName()+ "> quest <"+ questSlot+ "> slot <"+ Integer.toString(questIndex)+ ">");      } else {        return true;      }    }  }  if (do_update && !toadd.isEmpty()) {    String finalcreatures=temp + toadd;    logger.debug("new player <" + player.getName() + "> quest <"+ questSlot+ "> slot <"+ Integer.toString(questIndex)+ "> value: ("+ finalcreatures+ ")");    player.setQuest(questSlot,questIndex,finalcreatures);  }  return false;}  }
class C{  private void waitForRpOperation(){  logger.info("Sleeping for 10s waiting for RP operation");  try {    Thread.sleep(RP_OPERATION_WAIT_TIME);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  public IDebugSearch debug(IDebugSearch debugger){  IDebugSearch old=debug;  debug=debugger;  return old;}  }
class C{  private static void CallVoidMethodA(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallVoidMethodA  \n");  JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Void,false);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MBPartner[ID=").append(get_ID()).append(",Value=").append(getValue()).append(",Name=").append(getName()).append(",Open=").append(getTotalOpenBalance()).append("]");  return sb.toString();}  }
class C{  public void close(){  interrupted=true;  try {    fifo.close();  } catch (  Exception e) {  }}  }
class C{  public Set<K> keySet(){  return counterMap.keySet();}  }
class C{  public void add(final CertificateValidity certificateValidity){  certificateValidityList.add(certificateValidity);}  }
class C{  public BufferedSageFile(SageFileSource sageFileSource,int readBufferSize){  this(sageFileSource,readBufferSize,WRITE_BUFFER_SIZE);}  }
class C{  public BytesRestResponse(RestStatus status,String content){  this(status,TEXT_CONTENT_TYPE,new BytesArray(content));}  }
class C{  JarDepend(Depend depend){  _depend=depend;}  }
class C{  public FeaturesSelectionStream(StreamExpression expression,StreamFactory factory) throws IOException {  String collectionName=factory.getValueOperand(expression,0);  List<StreamExpressionNamedParameter> namedParams=factory.getNamedOperands(expression);  StreamExpressionNamedParameter zkHostExpression=factory.getNamedOperand(expression,"zkHost");  if (expression.getParameters().size() != 1 + namedParams.size()) {    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - unknown operands found",expression));  }  if (null == collectionName) {    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - collectionName expected as first operand",expression));  }  if (0 == namedParams.size()) {    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'",expression));  }  Map<String,String> params=new HashMap<String,String>();  for (  StreamExpressionNamedParameter namedParam : namedParams) {    if (!namedParam.getName().equals("zkHost")) {      params.put(namedParam.getName(),namedParam.getParameter().toString().trim());    }  }  String fieldParam=params.get("field");  if (fieldParam != null) {    params.remove("field");  } else {    throw new IOException("field param cannot be null for FeaturesSelectionStream");  }  String outcomeParam=params.get("outcome");  if (outcomeParam != null) {    params.remove("outcome");  } else {    throw new IOException("outcome param cannot be null for FeaturesSelectionStream");  }  String featureSetParam=params.get("featureSet");  if (featureSetParam != null) {    params.remove("featureSet");  } else {    throw new IOException("featureSet param cannot be null for FeaturesSelectionStream");  }  String positiveLabelParam=params.get("positiveLabel");  int positiveLabel=1;  if (positiveLabelParam != null) {    params.remove("positiveLabel");    positiveLabel=Integer.parseInt(positiveLabelParam);  }  String numTermsParam=params.get("numTerms");  int numTerms=1;  if (numTermsParam != null) {    numTerms=Integer.parseInt(numTermsParam);    params.remove("numTerms");  } else {    throw new IOException("numTerms param cannot be null for FeaturesSelectionStream");  }  String zkHost=null;  if (null == zkHostExpression) {    zkHost=factory.getCollectionZkHost(collectionName);  } else   if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {    zkHost=((StreamExpressionValue)zkHostExpression.getParameter()).getValue();  }  if (null == zkHost) {    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - zkHost not found for collection '%s'",expression,collectionName));  }  init(collectionName,zkHost,params,fieldParam,outcomeParam,featureSetParam,positiveLabel,numTerms);}  }
class C{  public OMOPSO(Problem problem,int swarmSize,int leaderSize,double[] epsilons,double mutationProbability,double mutationPerturbation,int maxIterations){  super(problem,swarmSize,leaderSize,new CrowdingComparator(),new ParetoDominanceComparator(),new FitnessBasedArchive(new CrowdingDistanceFitnessEvaluator(),leaderSize),new EpsilonBoxDominanceArchive(epsilons),null);  this.uniformMutation=new UniformMutation(mutationProbability,mutationPerturbation);  this.nonUniformMutation=new NonUniformMutation(mutationProbability,mutationPerturbation,maxIterations);}  }
class C{  private static boolean OutputHelpMessage(){  Vector helpVec=null;  try {    helpVec=PcalResourceFileReader.ResourceFileToStringVector("help.txt");  } catch (  PcalResourceFileReaderException e) {    PcalDebug.reportError(e);    return false;  }  int i=0;  while (i < helpVec.size()) {    ToolIO.out.println((String)helpVec.elementAt(i));    i=i + 1;  }  return true;}  }
class C{  public static boolean testAabAab(Vector3fc minA,Vector3fc maxA,Vector3fc minB,Vector3fc maxB){  return testAabAab(minA.x(),minA.y(),minA.z(),maxA.x(),maxA.y(),maxA.z(),minB.x(),minB.y(),minB.z(),maxB.x(),maxB.y(),maxB.z());}  }
class C{  public byte readByte() throws IOException, EOFException {  if (this.len < 0)   throw new EOFException();  byte res=this.buff[this.curr++];  if (this.curr == this.len) {    this.len=this.in.read(this.buff);    Assert.check(this.len != 0,EC.SYSTEM_STREAM_EMPTY);    this.curr=0;  }  return res;}  }
class C{  private static void handleRapidMinerURL(String urlStr){  URI url;  try {    url=new URI(urlStr);  } catch (  URISyntaxException e) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.RapidMinerGUI.malformed_rapidminer_url",new Object[]{urlStr,e.getMessage()});    return;  }  if (!"rapidminer".equals(url.getScheme())) {    throw new IllegalArgumentException("Can handle only " + RapidMiner.RAPIDMINER_URL_PREFIX + " URLs!");  }  String path=url.getPath();  if (path.startsWith("/")) {    path=path.substring(1);  }  String components[]=path.split("/");  if (components.length < 2) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.RapidMinerGUI.unknown_rapidminer_url",new Object[]{urlStr});    return;  }switch (components[0]) {case "extension":    String extensionKey=components[1];  try {    UpdateManagerRegistry.INSTANCE.get().showUpdateDialog(false,extensionKey);  } catch (  URISyntaxException|IOException e) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.RapidMinerGUI.error_connecting_to_updateserver",e);  }break;default :LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.RapidMinerGUI.unknown_rapidminer_url",new Object[]{urlStr});return;}}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.TYPE_REF__PARAMETER:    return basicSetParameter(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void testMoveRenameDirectoryDestinationRootSourceMissingPartially() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR.name());  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR),null);  create(igfs,paths(DIR),null);  igfs.rename(SUBSUBDIR,dir);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,dir);  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public static void loadEmergencyClasses(){  TCPConduit.loadEmergencyClasses();}  }
class C{  public static void main(String[] args) throws Exception {  Instances inst;  Comparator<Instance> comp;  if (args.length == 0)   return;  inst=new Instances(new BufferedReader(new FileReader(args[0])));  inst.setClassIndex(inst.numAttributes() - 1);  comp=new InstanceComparator();  System.out.println("\nIncluding the class");  System.out.println("comparing 1. instance with 1.: " + comp.compare(inst.instance(0),inst.instance(0)));  System.out.println("comparing 1. instance with 2.: " + comp.compare(inst.instance(0),inst.instance(1)));  System.out.println("comparing 2. instance with 1.: " + comp.compare(inst.instance(1),inst.instance(0)));  comp=new InstanceComparator(false);  System.out.println("\nExcluding the class");  System.out.println("comparing 1. instance with 1.: " + comp.compare(inst.instance(0),inst.instance(0)));  System.out.println("comparing 1. instance with 2.: " + comp.compare(inst.instance(0),inst.instance(1)));  System.out.println("comparing 2. instance with 1.: " + comp.compare(inst.instance(1),inst.instance(0)));  Instances tmp=new Instances(inst);  Collections.sort(tmp,new InstanceComparator(false));  System.out.println("\nSorted on all attributes");  System.out.println(tmp);  tmp=new Instances(inst);  Collections.sort(tmp,new InstanceComparator(false,"2",false));  System.out.println("\nSorted on 2nd attribute");  System.out.println(tmp);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void forwardCommandChangeToLayout(int s){  CanMessage m;  if (s == Turnout.THROWN) {    m=addrThrown.makeMessage();    tc.sendCanMessage(m,this);    if (_activeFeedbackType == MONITORING) {      newKnownState(THROWN);    }  } else   if (s == Turnout.CLOSED) {    m=addrClosed.makeMessage();    tc.sendCanMessage(m,this);    if (_activeFeedbackType == MONITORING) {      newKnownState(CLOSED);    }  }}  }
class C{  private static synchronized void buildEntityTable(){  htmlEntityTable=new Hashtable(HTML_ENTITIES.length);  for (int i=0; i < HTML_ENTITIES.length; i+=2) {    if (!htmlEntityTable.containsKey(HTML_ENTITIES[i])) {      htmlEntityTable.put(HTML_ENTITIES[i],HTML_ENTITIES[i + 1]);    }  }}  }
class C{  public void removeAllConnectionCallbacks(){  connectionCallbacks.clear();}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  @Override protected void specificProcessing(final StorageSystem storageSystem,final DbClient dbClient,final WBEMClient client,final Volume volume,CIMInstance volumeInstance,final CIMObjectPath volumePath){  if (storageSystem.getUsingSmis80()) {    super.specificProcessing(storageSystem,dbClient,client,volume,volumeInstance,volumePath);  } else {    specificProcessingFor4x(dbClient,client,volume,volumePath);  }}  }
class C{  protected void preFinaliseAddObservations() throws Exception {}  }
class C{  public static void main(String[] args) throws UnknownHostException, IgniteCheckedException {  if (args.length != 2) {    X.println("Usage: " + GridNioBenchmarkTest.class.getSimpleName() + " <threads> <port>");    return;  }  final int threads=Integer.parseInt(args[0]);  final int port=Integer.parseInt(args[1]);  new GridNioBenchmarkTest(threads,port).run();}  }
class C{  public static Element drawFilled(SVGPlot svgp,String cls,Projection2D proj,NumberVector min,NumberVector max){  Element group=svgp.svgElement(SVGConstants.SVG_G_TAG);  ArrayList<double[]> edges=getVisibleEdges(proj,min,max);  double[] rv_min=proj.fastProjectDataToRenderSpace(min);  recDrawSides(svgp,group,cls,rv_min[0],rv_min[1],edges,0,BitsUtil.zero(edges.size()));  return group;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  void updateRmiClientsCount(){  int noOfClientsConnected=0;  String[] connectionIds=this.rmiConnector.getConnectionIds();  if (connectionIds != null) {    noOfClientsConnected=connectionIds.length;  }  logger.info("No. of RMI clients connected :: {}",noOfClientsConnected);  AdminDistributedSystemJmxImpl adminDSJmx=(AdminDistributedSystemJmxImpl)this.system;  adminDSJmx.setRmiClientCountZero(noOfClientsConnected == 0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:33.457 -0500",hash_original_method="CDCCA4D777F3AF625C0928D23D03AC75",hash_generated_method="B4A77407821EC07A865080265F744865") public Object parseObject(PemObject obj) throws IOException {  try {    return new PKCS10CertificationRequest(obj.getContent());  } catch (  Exception e) {    throw new PEMException("problem parsing certrequest: " + e.toString(),e);  }}  }
class C{  synchronized void addBgImage(Component imgComp,String imageUrl,int styles){  if (HTMLComponent.SUPPORT_CSS) {    add(imgComp,imageUrl);    if ((styles & CSSEngine.STYLE_SELECTED) != 0) {      bgImageCompsSelected.addElement(imgComp);    }    if ((styles & CSSEngine.STYLE_UNSELECTED) != 0) {      bgImageCompsUnselected.addElement(imgComp);    }    if ((styles & CSSEngine.STYLE_PRESSED) != 0) {      bgImageCompsPressed.addElement(imgComp);    }  }}  }
class C{  @Override protected void tearDown() throws Exception {}  }
class C{  private void oneRound(){  output=getOutput();  out[0]=(byte)output;  out[1]=(byte)(output >> 8);  out[2]=(byte)(output >> 16);  out[3]=(byte)(output >> 24);  nfsr=shift(nfsr,getOutputNFSR() ^ lfsr[0]);  lfsr=shift(lfsr,getOutputLFSR());}  }
class C{  public DrawerBuilder withSliderBackgroundDrawable(@NonNull Drawable sliderBackgroundDrawable){  this.mSliderBackgroundDrawable=sliderBackgroundDrawable;  return this;}  }
class C{  public void send(String kafkaTopic,String msgKey,Integer partitionKey,String value){  JsonObject obj=new JsonObject().put(ConfigConstants.VALUE_FIELD,value).put(ConfigConstants.TOPIC_FIELD,kafkaTopic).put(ConfigConstants.PARTITION_FIELD,partitionKey).put(ConfigConstants.KEY_FIELD,msgKey).put(TYPE_FIELD,MessageType.CUSTOM_PARTITION.value);  send(obj);}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals(X_M_Product.COLUMNNAME_M_Product_ID)) {      p_M_Product_ID=para.getParameterAsInt();    } else     if (name.equals(X_M_Warehouse.COLUMNNAME_M_Warehouse_ID)) {      p_M_Warehouse_ID=para.getParameterAsInt();    } else     if (name.equals("DateTrx")) {      p_DateTrx=(Timestamp)para.getParameter();    } else     if (name.equals(X_PP_Order_BOMLine.COLUMNNAME_QtyRequired)) {      p_QtyRequiered=(BigDecimal)para.getParameter();    } else     if (name.equals(X_PP_Product_BOMLine.COLUMNNAME_BackflushGroup)) {      p_BackflushGroup=(String)para.getParameter();    } else     if (name.equals(X_T_BOMLine.COLUMNNAME_LevelNo)) {      p_LevelNo=para.getParameterAsInt();    } else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public Evaluation(Instances data,CostMatrix costMatrix) throws Exception {  m_Header=new Instances(data,0);  m_NumClasses=data.numClasses();  m_NumFolds=1;  m_ClassIsNominal=data.classAttribute().isNominal();  if (m_ClassIsNominal) {    m_ConfusionMatrix=new double[m_NumClasses][m_NumClasses];    m_ClassNames=new String[m_NumClasses];    for (int i=0; i < m_NumClasses; i++) {      m_ClassNames[i]=data.classAttribute().value(i);    }  }  m_CostMatrix=costMatrix;  if (m_CostMatrix != null) {    if (!m_ClassIsNominal) {      throw new Exception("Class has to be nominal if cost matrix given!");    }    if (m_CostMatrix.size() != m_NumClasses) {      throw new Exception("Cost matrix not compatible with data!");    }  }  m_ClassPriors=new double[m_NumClasses];  setPriors(data);  m_MarginCounts=new double[k_MarginResolution + 1];  for (  String s : BUILT_IN_EVAL_METRICS) {    m_metricsToDisplay.add(s.toLowerCase());  }  m_pluginMetrics=AbstractEvaluationMetric.getPluginMetrics();  if (m_pluginMetrics != null) {    for (    AbstractEvaluationMetric m : m_pluginMetrics) {      m.setBaseEvaluation(this);      if (m instanceof InformationRetrievalEvaluationMetric) {        List<String> statNames=m.getStatisticNames();        for (        String s : statNames) {          m_metricsToDisplay.add(s.toLowerCase());        }      } else {        m_metricsToDisplay.add(m.getMetricName().toLowerCase());      }    }  }}  }
class C{  public void store(long userId,List<UserCluster> clusters){  byte[] vals=new byte[clusters.size() * CLUSTER_NUM_BYTES];  int count=0;  for (  UserCluster cluster : clusters) {    if (timestamp == 0)     timestamp=cluster.timeStamp;    int clusterId=cluster.getCluster();    double weight=cluster.getWeight();    if (clusterId > 65536) {      final String message="ClusterId is too big: " + clusterId + " for user "+ userId+ " for client "+ client;      final ClusterRecommenderException recommenderException=new ClusterRecommenderException(message);      logger.error(message,recommenderException);      throw recommenderException;    }    if (weight < 0 || weight > 1) {      final String message="Bad weight: " + weight + " for user "+ userId;      final ClusterRecommenderException recommenderException=new ClusterRecommenderException(message);      logger.error(message,recommenderException);      throw recommenderException;    }    clusterId=clusterId - SHORT_RANGE;    byte cId1=(byte)(clusterId & 0xff);    byte cId2=(byte)((clusterId >> 8) & 0xff);    byte w=(byte)(Math.round((weight / WEIGHT_INCR)) - 128);    int index=count * 3;    vals[index]=cId1;    vals[index + 1]=cId2;    vals[index + 2]=w;    if (!clusterGroups.containsKey(clusterId))     clusterGroups.put(clusterId,cluster.getGroup());    count++;  }  if (loaded)   this.transientClusters.put(userId,vals); else   store.put(userId,vals);}  }
class C{  public static long allocateMemory(long size){  return UNSAFE.allocateMemory(size);}  }
class C{  public void arrayLength(){  mv.visitInsn(Opcodes.ARRAYLENGTH);}  }
class C{  @SuppressWarnings("unchecked") static WindowsSecurityDescriptor fromAttribute(FileAttribute<?>... attrs) throws IOException {  WindowsSecurityDescriptor sd=NULL_DESCRIPTOR;  for (  FileAttribute<?> attr : attrs) {    if (sd != NULL_DESCRIPTOR)     sd.release();    if (attr == null)     throw new NullPointerException();    if (attr.name().equals("acl:acl")) {      List<AclEntry> acl=(List<AclEntry>)attr.value();      sd=new WindowsSecurityDescriptor(acl);    } else {      throw new UnsupportedOperationException("'" + attr.name() + "' not supported as initial attribute");    }  }  return sd;}  }
class C{  private static String layoutMenuItem(JComponent c,FontMetrics fm,String text,FontMetrics fmAccel,String acceleratorText,Icon icon,Icon checkIcon,Icon arrowIcon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,Rectangle acceleratorR,Rectangle checkIconR,Rectangle arrowIconR,int textIconGap,int menuItemGap){  SwingUtilities.layoutCompoundLabel(c,fm,text,icon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,viewR,iconR,textR,textIconGap);  if ((acceleratorText == null) || acceleratorText.equals("")) {    acceleratorR.width=acceleratorR.height=0;    acceleratorText="";  } else {    acceleratorR.width=SwingUtilities2.stringWidth(c,fmAccel,acceleratorText);    acceleratorR.height=fmAccel.getHeight();  }  if (checkIcon != null) {    checkIconR.width=checkIcon.getIconWidth();    checkIconR.height=checkIcon.getIconHeight();  } else {    checkIconR.width=checkIconR.height=0;  }  if (arrowIcon != null) {    arrowIconR.width=arrowIcon.getIconWidth();    arrowIconR.height=arrowIcon.getIconHeight();  } else {    arrowIconR.width=arrowIconR.height=0;  }  Rectangle labelR=iconR.union(textR);  if (MotifGraphicsUtils.isLeftToRight(c)) {    textR.x+=checkIconR.width + menuItemGap;    iconR.x+=checkIconR.width + menuItemGap;    acceleratorR.x=viewR.x + viewR.width - arrowIconR.width - menuItemGap - acceleratorR.width;    checkIconR.x=viewR.x;    arrowIconR.x=viewR.x + viewR.width - menuItemGap - arrowIconR.width;  } else {    textR.x-=(checkIconR.width + menuItemGap);    iconR.x-=(checkIconR.width + menuItemGap);    acceleratorR.x=viewR.x + arrowIconR.width + menuItemGap;    checkIconR.x=viewR.x + viewR.width - checkIconR.width;    arrowIconR.x=viewR.x + menuItemGap;  }  acceleratorR.y=labelR.y + (labelR.height / 2) - (acceleratorR.height / 2);  arrowIconR.y=labelR.y + (labelR.height / 2) - (arrowIconR.height / 2);  checkIconR.y=labelR.y + (labelR.height / 2) - (checkIconR.height / 2);  return text;}  }
class C{  public void ensureSelectionVisible(){  ensureRowVisible(getSelectedRow());}  }
class C{  public TaskErrorHandlingException(String message){  super(message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.868 -0500",hash_original_method="6F68B6CD71FAD40FB94A8A34B90682BB",hash_generated_method="A8626659567E2DA931BE81C97349C783") private static void appendHexString(StringBuffer buf,long l){  String s=Long.toHexString(l);  for (int i=s.length(); i < 8; i++)   buf.append('0');  buf.append(s);}  }
class C{  public boolean containsWindowItems(Class<? extends RaptorWindowItem> windowItemClass){  boolean result=false;synchronized (itemsManaged) {    for (    RaptorTabItem currentTabItem : itemsManaged) {      if (windowItemClass.isInstance(currentTabItem.raptorItem)) {        result=true;        break;      }    }  }  return result;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    return CHARACTER_EDEFAULT == null ? character != null : !CHARACTER_EDEFAULT.equals(character);}return super.eIsSet(featureID);}  }
class C{  public boolean markSupported(){  return stream.markSupported();}  }
class C{  public static void showImage(final String title,final Mat src){  try {    IplImage image=src.asIplImage();    if (image != null) {      cvShowImage(title,image);      cvWaitKey(0);    }  } catch (  Exception ex) {  }}  }
class C{  public void testStoreLoadSnapshot(){  SnapshotStore store=createSnapshotStore();  Snapshot snapshot=store.createSnapshot(1);  try (SnapshotWriter writer=snapshot.writer()){    writer.writeLong(10);  }   snapshot.complete();  assertNotNull(store.currentSnapshot());  store.close();  store=createSnapshotStore();  assertNotNull(store.currentSnapshot());  assertEquals(store.currentSnapshot().index(),1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:00.786 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  protected FactoryDto updateProjectInFactory(final FactoryDto factory,final String headRepositoryUrl,final String headBranch,final String baseRepositoryUrl,final String headCommitId) throws ServerException {  final List<ProjectConfigDto> factoryProjects=factory.getWorkspace().getProjects();  factoryProjects.stream().filter(null).forEach(null);  return factory;}  }
class C{  public PSPAccountHistory(PSPAccount c){  super(c);  if (c.getOrganization() != null) {    setOrganizationObjKey(c.getOrganization().getKey());  }  if (c.getPsp() != null) {    setPspObjKey(c.getPsp().getKey());  }}  }
class C{  public static boolean equals(float[] field1,float[] field2){  if (field1 == null || field1.length == 0) {    return field2 == null || field2.length == 0;  } else {    return Arrays.equals(field1,field2);  }}  }
class C{  @Override public void accept(final MethodVisitor mv){  mv.visitInsn(opcode);  acceptAnnotations(mv);}  }
class C{  private Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.215 -0500",hash_original_method="7CE3D84B1219A8E32E8697E9D54626ED",hash_generated_method="4C8EAB745486F94E97F40986CEE70D96") public void rCubicTo(float x1,float y1,float x2,float y2,float x3,float y3){  isSimplePath=false;  addTaint(x1 + y1 + x2+ y2+ x3+ y3);}  }
class C{  public int remove(final int index){  int _numObjs=numObjs;  if (index >= _numObjs)   throw new ArrayIndexOutOfBoundsException(index);  int[] _objs=this.objs;  int ret=_objs[index];  _objs[index]=_objs[_numObjs - 1];  numObjs--;  return ret;}  }
class C{  public Builder withEntries(Entry... entries){  return withEntries(Arrays.asList(Assert.notNull(entries,"entries")));}  }
class C{  protected void markSaved(IProgressMonitor monitor) throws InterruptedException, InvocationTargetException {  ICommandStack commandStack=getCommandStack();  if (commandStack != null) {    commandStack.markSaved();  }}  }
class C{  public void testXY_LineString_from_XYZ() throws Exception {  checkValue(MDSYS.SDO_GEOMETRY(2002,NULL,NULL,MDSYS.SDO_ELEM_INFO_ARRAY(1,2,1),MDSYS.SDO_ORDINATE_ARRAY(0,0,50,50)),2,"LINESTRING (0 0 0, 50 50 100)");}  }
class C{  public static MemoryMappedFile mmapRO(String path) throws ErrnoException {  FileDescriptor fd=Libcore.os.open(path,O_RDONLY,0);  long size=Libcore.os.fstat(fd).st_size;  long address=Libcore.os.mmap(0L,size,PROT_READ,MAP_SHARED,fd,0);  Libcore.os.close(fd);  return new MemoryMappedFile(address,size);}  }
class C{  public Attribute targetClasses(Class<?>... classes){  for (  Class<?> targetClass : classes)   xmlAttribute.classes.add(new TargetClass(targetClass).toXStream());  return this;}  }
class C{  public String toString(){  return getStateInfo();}  }
class C{  private int[] shift(int[] array,int val){  array[0]=array[1];  array[1]=array[2];  array[2]=array[3];  array[3]=val;  return array;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @NotNull public static Couple<String> splitScheme(@NotNull String url){  ArrayList<String> list=Lists.newArrayList(Splitter.on(URLUtil.SCHEME_SEPARATOR).limit(2).split(url));  if (list.size() == 1) {    return Couple.of("",list.get(0));  }  return Couple.of(list.get(0),list.get(1));}  }
class C{  public void localSearchStarted(){  startTime=System.currentTimeMillis();  endTime=startTime + Properties.LOCAL_SEARCH_BUDGET * 1000;  tests=0;  suites=0;  fitnessEvaluations=0;  executedStart=MaxStatementsStoppingCondition.getNumExecutedStatements();}  }
class C{  @SmallTest public void testPhoneNumbersEqualInternationl() throws Exception {  assertPhoneNumberEqual("1","1");  assertPhoneNumberEqual("123123","123123");  assertPhoneNumberNotEqual("123123","923123");  assertPhoneNumberNotEqual("123123","123129");  assertPhoneNumberNotEqual("123123","1231234");  assertPhoneNumberNotEqual("123123","0123123",false);  assertPhoneNumberNotEqual("123123","0123123",true);  assertPhoneNumberEqual("650-253-0000","6502530000");  assertPhoneNumberEqual("650-253-0000","650 253 0000");  assertPhoneNumberEqual("650 253 0000","6502530000");  assertPhoneNumberEqual("+1 650-253-0000","6502530000");  assertPhoneNumberEqual("001 650-253-0000","6502530000");  assertPhoneNumberEqual("0111 650-253-0000","6502530000");  assertPhoneNumberEqual("+79161234567","89161234567");  assertPhoneNumberEqual("+33123456789","0123456789");  assertPhoneNumberEqual("+31771234567","0771234567");  assertPhoneNumberEqual("+66811234567","166811234567");  assertPhoneNumberNotEqual("+33123456789","+1123456789");  assertPhoneNumberEqual("5125551212","+15125551212");  assertPhoneNumberNotEqual("5125551212","6505551212");  assertPhoneNumberEqual("090-1234-5678","+819012345678");  assertPhoneNumberEqual("090(1234)5678","+819012345678");  assertPhoneNumberEqual("090-1234-5678","+81-90-1234-5678");  assertPhoneNumberEqual("+593(800)123-1234","8001231234");  assertPhoneNumberEqual("+593-2-1234-123","21234123");  assertPhoneNumberEqual("008001231234","8001231234",false);  assertPhoneNumberNotEqual("008001231234","8001231234",true);  assertPhoneNumberEqual("080-1234-5678","+819012345678",false);  assertPhoneNumberNotEqual("080-1234-5678","+819012345678",true);}  }
class C{  public static void partialWakeUpLock(Context context){  PowerManager pm=(PowerManager)context.getApplicationContext().getSystemService(Context.POWER_SERVICE);  PowerManager.WakeLock wakeLock=pm.newWakeLock((PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP),"TAG");  wakeLock.acquire();}  }
class C{  private RequestHeader createRequestheader(final Request request,final ClientIdentification.Agent agent) throws IOException {  final RequestHeader requestHeader=new RequestHeader();  requestHeader.put(HeaderFramework.USER_AGENT,agent.userAgent);  DigestURL refererURL=null;  if (request.referrerhash() != null) {    refererURL=this.sb.getURL(request.referrerhash());  }  if (refererURL != null) {    requestHeader.put(RequestHeader.REFERER,refererURL.toNormalform(true));  }  requestHeader.put(HeaderFramework.ACCEPT,this.sb.getConfig("crawler.http.accept",DEFAULT_ACCEPT));  requestHeader.put(HeaderFramework.ACCEPT_LANGUAGE,this.sb.getConfig("crawler.http.acceptLanguage",DEFAULT_LANGUAGE));  requestHeader.put(HeaderFramework.ACCEPT_CHARSET,this.sb.getConfig("crawler.http.acceptCharset",DEFAULT_CHARSET));  requestHeader.put(HeaderFramework.ACCEPT_ENCODING,this.sb.getConfig("crawler.http.acceptEncoding",DEFAULT_ENCODING));  return requestHeader;}  }
class C{  public Iterator iterOfDumpFilesKeys(){  return (dumpFiles != null ? dumpFiles.keySet().iterator() : null);}  }
class C{  protected void push_source(Source source,boolean autopop){  source.init(this);  source.setParent(this.source,autopop);  if (listener != null)   listener.handleSourceChange(this.source,"suspend");  this.source=source;  if (listener != null)   listener.handleSourceChange(this.source,"push");}  }
class C{  public UsageLicense revokeUser(PlatformUser usr){  if (usr == null)   return null;  Iterator<UsageLicense> licenses=getUsageLicenses().iterator();  while (licenses.hasNext()) {    UsageLicense u=licenses.next();    if (usr.equals(u.getUser())) {      licenses.remove();      return u;    }  }  return null;}  }
class C{  @NotNull default B appendDecimal(long value,int decimalPlaces) throws BufferOverflowException {  BytesInternal.appendDecimal(this,value,decimalPlaces);  return (B)this;}  }
class C{  public static Collection<ContentStream> toContentStreams(final String str,final String contentType){  if (str == null)   return null;  ArrayList<ContentStream> streams=new ArrayList<>(1);  ContentStreamBase ccc=new ContentStreamBase.StringStream(str);  ccc.setContentType(contentType);  streams.add(ccc);  return streams;}  }
class C{  public AddReferencesItem clone(){  AddReferencesItem result=new AddReferencesItem();  result.SourceNodeId=SourceNodeId;  result.ReferenceTypeId=ReferenceTypeId;  result.IsForward=IsForward;  result.TargetServerUri=TargetServerUri;  result.TargetNodeId=TargetNodeId;  result.TargetNodeClass=TargetNodeClass;  return result;}  }
class C{  static void addAnnotationsFromElement(final AnnotatedTypeMirror type,final List<? extends AnnotationMirror> annotations){  AnnotatedTypeMirror innerType=AnnotatedTypes.innerMostType(type);  innerType.addAnnotations(annotations);}  }
class C{  public static void checkNotNullArgument(Object reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new IllegalArgumentException(formatExceptionArgs(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public CLIOutputWithRevisionResponse checkout(final CheckoutRequest request) throws IOException, SubversionException {  return checkout(request,null);}  }
class C{  @RequestMapping(value="/stub/resetpwd",method=RequestMethod.POST) public ResponseEntity<?> resetPassword(Principal principal,@RequestParam(value="code",defaultValue="") String code,@RequestParam(value="password",defaultValue="") String password){  fr.gael.dhus.service.UserService userService=ApplicationContextProvider.getBean(fr.gael.dhus.service.UserService.class);  try {    userService.resetPassword(code,password);  } catch (  org.springframework.security.access.AccessDeniedException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  EmailNotSentException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"email_not_sent\"}",HttpStatus.INTERNAL_SERVER_ERROR);  }catch (  Exception e) {    e.printStackTrace();    return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);  }  return new ResponseEntity<>("{\"code\":\"success\"}",HttpStatus.OK);}  }
class C{  private void retrieveExpirePeriod(SipResponse response){  ListIterator<Header> contacts=response.getHeaders(ContactHeader.NAME);  if (contacts != null) {    while (contacts.hasNext()) {      ContactHeader contact=(ContactHeader)contacts.next();      if (contact.getAddress().getHost().equals(mNetworkInterface.getNetworkAccess().getIpAddress())) {        int expires=contact.getExpires();        if (expires != -1) {          mExpirePeriod=expires * SECONDS_TO_MILLISECONDS_CONVERSION_RATE;        }        return;      }    }  }  ExpiresHeader expiresHeader=(ExpiresHeader)response.getHeader(ExpiresHeader.NAME);  if (expiresHeader != null) {    int expires=expiresHeader.getExpires();    if (expires != -1) {      mExpirePeriod=expires * SECONDS_TO_MILLISECONDS_CONVERSION_RATE;    }  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_playlist);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);}  }
class C{  public static byte[] hashToBytes(int[] data,long seed){  if ((data == null) || (data.length == 0)) {    return null;  }  return toByteArray(hash(data,seed));}  }
class C{  @LargeTest public void testSelectionTextProceed() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<a href=\"#\">First</a>"+ "<span><a href=\"#\"><span>Second</span>&nbsp;<small>a</small></a>"+ "</span>&nbsp;<a href=\"#\">Third</a>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<a href=\"#\">First</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<a href=\"#\"><span>Second&nbsp;<small>a</small></a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("&nbsp;");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<a href=\"#\">Third</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<a href=\"#\">Third</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("&nbsp;");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<a href=\"#\"><span>Second&nbsp;<small>a</small></a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<a href=\"#\">First</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<a href=\"#\">First</a>");}  }
class C{  protected String calculateChainValue(String previousReceiptJWSRepresentation,RKSuite rkSuite){  try {    String inputForChainCalculation;    if (previousReceiptJWSRepresentation == null) {      inputForChainCalculation=cashBoxParameters.getCashBoxId();    } else {      inputForChainCalculation=previousReceiptJWSRepresentation;    }    MessageDigest md=MessageDigest.getInstance(rkSuite.getHashAlgorithmForPreviousSignatureValue());    md.update(inputForChainCalculation.getBytes());    byte[] digest=md.digest();    int bytesToExtract=rkSuite.getNumberOfBytesExtractedFromPrevSigHash();    byte[] conDigest=new byte[bytesToExtract];    System.arraycopy(digest,0,conDigest,0,bytesToExtract);    return CashBoxUtils.base64Encode(conDigest,false);  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return null;}  }
class C{  private AnnotationUtils(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.277 -0500",hash_original_method="5EF975DC0C48CD0E5439D816C45920DD",hash_generated_method="64CF60264CD962C6A039EE0F4B72446C") public void close(){  if (mLeakedException != null) {    getConnectionManager().shutdown();    mLeakedException=null;  }}  }
class C{  public void cancelOperation() throws SQLException {  database.cancelOperation(ISCConstants.fb_cancel_raise);}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  @GwtIncompatible CacheBuilder<K,V> lenientParsing(){  strictParsing=false;  return this;}  }
class C{  public void testMoveRenameDirectorySourceMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,paths(DIR_NEW,SUBDIR_NEW),null);  igfs.rename(SUBSUBDIR,SUBSUBDIR_NEW);  checkExist(igfs,DIR);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public Base64OutputStream(OutputStream out,int flags){  this(out,flags,true);}  }
class C{  public void addColumn(String column,String type,boolean notNull) throws Exception {  this.addColumn(column,type,notNull,true);}  }
class C{  public void show(){  animationController.show(getElement());}  }
class C{  public static void updateFromAsset(I_A_Asset_Disposed bean){  int asset_id=bean.getA_Asset_ID();  SetGetUtil.copyValues(SetGetUtil.wrap(bean),MAsset.Table_Name,asset_id,new String[]{MAsset.COLUMNNAME_IsDisposed,MAsset.COLUMNNAME_A_Asset_Status,"AD_Org_ID"});  MDepreciationWorkfile wk=MDepreciationWorkfile.get(Env.getCtx(),asset_id,bean.getPostingType(),null);  if (wk != null) {    bean.setA_Asset_Cost(wk.getA_Asset_Cost());    bean.setA_Accumulated_Depr(wk.getA_Accumulated_Depr());  } else {    bean.setA_Asset_Cost(Env.ZERO);    bean.setA_Accumulated_Depr(Env.ZERO);  }}  }
class C{  public static double staticNextDouble(){synchronized (shared) {    return shared.nextDouble();  }}  }
class C{  public static void logError(Throwable exception,String message,Object... args){  message=MessageFormat.format(message,args);  log(IStatus.ERROR,IStatus.OK,message,exception);}  }
class C{  public static DetailsFragment newInstance(int index){  DetailsFragment f=new DetailsFragment();  Bundle args=new Bundle();  args.putInt("index",index);  f.setArguments(args);  return f;}  }
class C{  public ValueModelUserPhone(String name,ArrayListUserPhone defaultValue){  super(name,defaultValue);}  }
class C{  private int sampleLine(ResultPoint p1,ResultPoint p2,int size){  int result=0;  float d=distance(p1,p2);  float moduleSize=d / size;  float px=p1.getX();  float py=p1.getY();  float dx=moduleSize * (p2.getX() - p1.getX()) / d;  float dy=moduleSize * (p2.getY() - p1.getY()) / d;  for (int i=0; i < size; i++) {    if (image.get(MathUtils.round(px + i * dx),MathUtils.round(py + i * dy))) {      result|=1 << (size - i - 1);    }  }  return result;}  }
class C{  @Override public BytesMessage createBytesMessage() throws JMSException {  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createBytesMessage" + session);  }  return session.createBytesMessage();}  }
class C{  public Agent(Level loggingLevel){  this(loggingLevel,null);}  }
class C{  protected void read(BinaryFile binFile,boolean readWholeFile){  binFile.byteOrder(true);  dsi=new DTEDFrameDSI(binFile);  uhl=new DTEDFrameUHL(binFile);  acc=new DTEDFrameACC(binFile);  elevations=new short[uhl.num_lon_lines][];  if (readWholeFile)   readDataRecords();  frame_is_valid=true;}  }
class C{  public static float noise1(float x){  int bx0, bx1;  float rx0, rx1, sx, t, u, v;  if (start) {    start=false;    init();  }  t=x + N;  bx0=((int)t) & BM;  bx1=(bx0 + 1) & BM;  rx0=t - (int)t;  rx1=rx0 - 1.0f;  sx=sCurve(rx0);  u=rx0 * g1[p[bx0]];  v=rx1 * g1[p[bx1]];  return 2.3f * lerp(sx,u,v);}  }
class C{  @SuppressWarnings("rawtypes") public LoggingEventJsonSerde(boolean includeLocationInfo){  this.includeLocationInfo=includeLocationInfo;  this.jsonSerde=new JsonSerde();}  }
class C{  public V remove(float key){  V prev=null;  int index=index(key);  if (index >= 0) {    prev=unwrapNull(_values[index]);    removeAt(index);  }  return prev;}  }
class C{  public ControllerLookupException(String message){  super(message);}  }
class C{  private void convertValuesImpl(Blackboard bb,SqlCall values,RelDataType targetRowType){  RelNode valuesRel=convertRowValues(bb,values,values.getOperandList(),true,targetRowType);  if (valuesRel != null) {    bb.setRoot(valuesRel,true);    return;  }  final List<RelNode> unionRels=new ArrayList<>();  for (  SqlNode rowConstructor1 : values.getOperandList()) {    SqlCall rowConstructor=(SqlCall)rowConstructor1;    Blackboard tmpBb=createBlackboard(bb.scope,null,false);    replaceSubqueries(tmpBb,rowConstructor,RelOptUtil.Logic.TRUE_FALSE_UNKNOWN);    final List<Pair<RexNode,String>> exps=new ArrayList<>();    for (    Ord<SqlNode> operand : Ord.zip(rowConstructor.getOperandList())) {      exps.add(Pair.of(tmpBb.convertExpression(operand.e),validator.deriveAlias(operand.e,operand.i)));    }    RelNode in=(null == tmpBb.root) ? LogicalValues.createOneRow(cluster) : tmpBb.root;    unionRels.add(RelOptUtil.createProject(in,Pair.left(exps),Pair.right(exps),true));  }  if (unionRels.size() == 0) {    throw Util.newInternal("empty values clause");  } else   if (unionRels.size() == 1) {    bb.setRoot(unionRels.get(0),true);  } else {    bb.setRoot(LogicalUnion.create(unionRels,true),true);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.356 -0500",hash_original_method="C08E184A516295B7BF20ABCE746571ED",hash_generated_method="357E5ABF0E0719E98E02C88719CE5D0C") private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public StochasticGeneratorPanel(){  super();  add(mainPanel);  JTextField firingProbability=createTextField(null,null);  mainPanel.addItem("Firing Probability",firingProbability);}  }
class C{  @Override public String toString(){  return this.elem.toString();}  }
class C{  public static boolean isNotEmpty(String str){  return ((str != null) && (str.trim().length() > 0));}  }
class C{  public void jumpToCurrentState(){  if (mRunningAnimation != null) {    final View view=getTarget();    if (view != null && view.getAnimation() == mRunningAnimation) {      view.clearAnimation();    }  }}  }
class C{  public boolean onScrollChanged(int x,int y){  long eventTime=SystemClock.uptimeMillis();  boolean shouldDispatch=eventTime - mLastScrollEventTimeMs > MIN_EVENT_SEPARATION_MS || mPrevX != x || mPrevY != y;  mLastScrollEventTimeMs=eventTime;  mPrevX=x;  mPrevY=y;  return shouldDispatch;}  }
class C{  @Override public float lengthNorm(FieldInvertState state){  final int numTokens;  if (discountOverlaps)   numTokens=state.getLength() - state.getNumOverlap(); else   numTokens=state.getLength();  return state.getBoost() * computeLengthNorm(numTokens);}  }
class C{  private void updateOnTop(){  for (  final Window w : ontop) {    w.setAutoRequestFocus(false);    w.toFront();    w.setAutoRequestFocus(true);  }}  }
class C{  public SootClass makeClassRef(String className){  if (Scene.v().containsClass(className))   return Scene.v().getSootClass(className);  SootClass newClass;  newClass=new SootClass(className);  newClass.setResolvingLevel(SootClass.DANGLING);  Scene.v().addClass(newClass);  return newClass;}  }
class C{  public static int indexOfIgnoreCase(String src,String subS){  return indexOfIgnoreCase(src,subS,0,src.length());}  }
class C{  public PathParser(String pathString){  this.pathString=pathString.toCharArray();}  }
class C{  public void closeModeOptions(){  mModeOptions.animateHidden();}  }
class C{  public TDoubleHash(int initialCapacity){  super(initialCapacity);  _hashingStrategy=this;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void test() throws Exception {  goOn=true;  thrown=null;  long sNextLogger=nextLogger.get();  long sReadCount=readCount.get();  long sCheckCount=checkCount.get();  List<Thread> threads=new ArrayList<>();  for (int i=0; i < READERS; i++) {    threads.add(new ReadConf());  }  for (int i=0; i < LOGGERS; i++) {    threads.add(new AddLogger());  }  DeadlockDetector detector=new DeadlockDetector();  threads.add(detector);  threads.add(0,new Stopper(TIME));  for (  Thread t : threads) {    t.start();  }  detector.join();  final PrintStream out=thrown == null ? System.out : System.err;  for (  Thread t : threads) {    if (t == detector) {      continue;    }    if (detector.deadlocked.contains(t.getId())) {      out.println("Skipping deadlocked thread " + t.getClass().getSimpleName() + ": "+ t);      continue;    }    try {      if (detector.deadlocked.isEmpty()) {        t.join();      } else {        if (t instanceof DaemonThread) {          t.join(100);        } else {          out.println("Waiting for " + t.getClass().getSimpleName() + ": "+ t);          t.join();        }      }    } catch (    Exception x) {      fail(x);    }  }  out.println("All threads joined.");  final String status=thrown == null ? "Passed" : "FAILED";  out.println(status + ": " + (nextLogger.get() - sNextLogger)+ " loggers created by "+ LOGGERS+ " Thread(s),");  out.println("\t LogManager.readConfiguration() called " + (readCount.get() - sReadCount) + " times by "+ READERS+ " Thread(s).");  out.println("\t ThreadMXBean.findDeadlockedThreads called " + (checkCount.get() - sCheckCount) + " times by 1 Thread.");  if (thrown != null) {    out.println("\t Error is: " + thrown.getMessage());    throw thrown;  }}  }
class C{  public void addFilterField(FilterField field){  addIdField(mFilterLines,field);}  }
class C{  @Override public void write(byte[] b,int off,int len){  checkNotNull(b);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @Override public void onDropDatabase(DropDatabaseEvent event) throws MetaException {  try {    Set<ReadEntity> readEntities=new HashSet<>();    readEntities.add(new ReadEntity(event.getDatabase()));    Set<WriteEntity> writeEntities=new HashSet<>();    run(readEntities,writeEntities,HiveOperation.THRIFT_DROP_DATABASE);  } catch (  Exception e) {    throw new MetaException(e.getMessage());  }}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static ActionType convertActionType(final MgmtActionType actionTypeRest){  if (actionTypeRest == null) {    return null;  }switch (actionTypeRest) {case SOFT:    return ActionType.SOFT;case FORCED:  return ActionType.FORCED;case TIMEFORCED:return ActionType.TIMEFORCED;default :throw new IllegalStateException("Action Type is not supported");}}  }
class C{  public void warn(String message){  log(message,WARN);}  }
class C{  protected synchronized void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    cleanup();    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  private void checkMainView(){  checkIfIdDisplayed(R.id.nested_back_button);  checkIfIdDisplayed(R.id.nested_textview);  checkIfIdDisplayed(R.id.nested_up_button);}  }
class C{  public InlineQueryResultCachedGif build(){  return new InlineQueryResultCachedGif(id,gif_file_id,title,caption,reply_markup,input_message_content);}  }
class C{  public int readNext(boolean ignoreComments) throws CoreException {  int curr=0;  do {    try {      curr=fScanner.getNextToken();      if (curr == ITerminalSymbols.TokenNameEOF) {        throw new CoreException(createError(END_OF_FILE,"End Of File",null));      }    } catch (    InvalidInputException e) {      throw new CoreException(createError(LEXICAL_ERROR,e.getMessage(),e));    }  } while (ignoreComments && isComment(curr));  return curr;}  }
class C{  protected Node newNode(){  return new SVGOMHKernElement();}  }
class C{  private static float toFloat(byte[] bytes,int offset){  return Float.intBitsToFloat(toInt(bytes,offset,SIZEOF_INT));}  }
class C{  public KeywordSearchTupleSet(LuceneSearcher searcher){  m_lucene=searcher;}  }
class C{  @Override public Tree<String> extractBestMaxRuleParse(int start,int end,List<String> sentence){  return extractBestMaxRuleParse1(start,end,0,sentence);}  }
class C{  private static void testKey(Key key1,Key key2) throws Exception {  if (key2.getAlgorithm().equals("EC") == false) {    throw new Exception("Algorithm not EC");  }  if (key1 instanceof PublicKey) {    if (key2.getFormat().equals("X.509") == false) {      throw new Exception("Format not X.509");    }  } else   if (key1 instanceof PrivateKey) {    if (key2.getFormat().equals("PKCS#8") == false) {      throw new Exception("Format not PKCS#8");    }  }  if (key1.equals(key2) == false) {    System.out.println("key1: " + key1);    System.out.println("key2: " + key2);    System.out.println("enc1: " + toString(key1.getEncoded()));    System.out.println("enc2: " + toString(key2.getEncoded()));    throw new Exception("Keys not equal");  }  if (Arrays.equals(key1.getEncoded(),key2.getEncoded()) == false) {    throw new Exception("Encodings not equal");  }}  }
class C{  Date toDate(Calendar calendar){  return calendar.getTime();}  }
class C{  @Xpect @ParameterParser(syntax="('at' arg1=OFFSET)?") public void scopeWithPosition(@N4JSCommaSeparatedValuesExpectation IN4JSCommaSeparatedValuesExpectation expectation,ICrossEReferenceAndEObject arg1){  EObject eobj=arg1.getEObject();  IScope scope=scopeProvider.getScope(eobj,arg1.getCrossEReference());  for (  IEObjectDescription eo : scope.getAllElements()) {    eo.getEObjectURI();  }  URI uri=eobj == null ? null : eobj.eResource() == null ? null : eobj.eResource().getURI();  expectation.assertEquals(new ScopeAwareIterable(uri,true,scope),new IsInScopeWithOptionalPositionPredicate(converter,uri,true,scope));}  }
class C{  public void addPanListener(PanListener listener){  if (mPan != null) {    mPan.addPanListener(listener);  }}  }
class C{  private static void findAnnotations(ClassFile cf,String name,List<TypeAnnotation> annos){  int index=cf.attributes.getIndex(cf.constant_pool,name);  if (index != -1) {    Attribute attr=cf.attributes.get(index);    assert attr instanceof RuntimeTypeAnnotations_attribute;    RuntimeTypeAnnotations_attribute tAttr=(RuntimeTypeAnnotations_attribute)attr;    annos.addAll(Arrays.asList(tAttr.annotations));  }}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=IOUtils.toBufferedReader(input1);  input2=IOUtils.toBufferedReader(input2);  int ch=input1.read();  while (IOUtils.EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == IOUtils.EOF;}  }
class C{  public AuthTokenResponse validateUserToken(String userToken){  String tokenValidateUri=String.format(KeystoneConstants.VALIDATE_TOKEN,new Object[]{userToken});  log.info("Invoking token validation api " + _base.resolve(URI.create(tokenValidateUri)).toString());  ClientResponse response=get(_base.resolve(URI.create(tokenValidateUri)));  AuthTokenResponse responseBody=getAuthTokenResponce(response);  log.debug("Got the response -" + responseBody.toString());  return responseBody;}  }
class C{  public void push(final boolean value){  push(value ? 1 : 0);}  }
class C{  @PUT public Response putCredentials(String message) throws IOException, IllegalArgumentException {  Map<String,String> messageMap=gson.fromJson(message,new TypeToken<Map<String,String>>(){  }.getType());  String entity=messageMap.get("entity");  String username=messageMap.get("username");  String password=messageMap.get("password");  if (Strings.isNullOrEmpty(entity) || Strings.isNullOrEmpty(username) || Strings.isNullOrEmpty(password)) {    return new JsonResponse(Status.BAD_REQUEST).build();  }  String user=SecurityUtils.getPrincipal();  logger.info("Update credentials for user {} entity {}",user,entity);  UserCredentials uc=credentials.getUserCredentials(user);  uc.putUsernamePassword(entity,new UsernamePassword(username,password));  credentials.putUserCredentials(user,uc);  return new JsonResponse(Status.OK).build();}  }
class C{  public HashMap(Map<? extends K,? extends V> m){  this.loadFactor=DEFAULT_LOAD_FACTOR;  putMapEntries(m,false);}  }
class C{  private static void registerFile(Map<VirtualFile,List<FilePath>> files,FilePath file,List<VcsException> exceptions){  final VirtualFile root;  try {    root=GitUtil.getGitRoot(file);  } catch (  VcsException e) {    exceptions.add(e);    return;  }  List<FilePath> paths=files.get(root);  if (paths == null) {    paths=new ArrayList<FilePath>();    files.put(root,paths);  }  paths.add(file);}  }
class C{  public void handshake(){  if (initializationGate()) {    List<Profile> otherProfiles=new ArrayList<Profile>();    GridProfile profile=(GridProfile)createProfile();    profile.tellLocalBridgeServers(false,true,otherProfiles);    profile.tellLocalControllers(false,true,otherProfiles);    for (    Profile otherProfile : otherProfiles) {      if (!otherProfile.equals(profile)) {        this.putProfile(otherProfile);      }    }  }  profilesChanged();}  }
class C{  public static POSMikheevCounter read(String json){  return new Gson().fromJson(json,POSMikheevCounter.class);}  }
class C{  public CoapExchange(Exchange exchange,CoapResource resource){  if (exchange == null)   throw new NullPointerException();  if (resource == null)   throw new NullPointerException();  this.exchange=exchange;  this.resource=resource;}  }
class C{  protected void decrementPieceCount(int color,int piece){  if ((piece & PROMOTED_MASK) != 0) {    piece&=NOT_PROMOTED_MASK;  }  pieceCounts[color][piece]--;}  }
class C{  public Duration newDuration(String key){  return new MillisTimeDuration(key);}  }
class C{  private void initializeRegisters(){  RegisterAllocatorState regAllocState=ir.MIRInfo.regAllocState;  for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=reg.getNext()) {    regAllocState.setInterval(reg,null);    regAllocState.setSpill(reg,0);    if (VM.BuildFor32Addr && reg.isLong()) {      reg.clearType();      reg.setInteger();    }  }}  }
class C{  private String chooseOtherNodeSvcId(){  List<String> nodes=coordinatorClientExt.getAllNodes();  for (  String node : nodes) {    if (!node.equals(mysvcId)) {      log.info("Other node svc id is: {}",node);      return node;    }  }  log.info("No other node, return self");  return mysvcId;}  }
class C{  public boolean isMultiHostSupported(){  return multiHostSupported;}  }
class C{  public static void validateDocuments(List documentos){  if (null != documentos) {    for (Iterator iterator=documentos.iterator(); iterator.hasNext(); ) {      DocumentoRegistroVO documentoRegistro=(DocumentoRegistroVO)iterator.next();      if (documentoRegistro.getName().length() > maxLengthNameDocument) {        StringBuffer sb=new StringBuffer();        sb.append("El nombre del documento [").append(documentoRegistro.getName()).append("] no puede ser mayor de ").append(maxLengthNameDocument).append(" caracteres.");        logger.error(sb.toString());        throw new RegistroException(sb.toString());      }      validatePaginas(documentoRegistro.getPaginas());    }  }}  }
class C{  public final void testWriteint04() throws IOException {  OutputStream os=new ByteArrayOutputStream(MY_MESSAGE_LEN);  DigestOutputStream dos=new DigestOutputStream(os,null);  try {    for (int i=0; i < MY_MESSAGE_LEN; i++) {      dos.write(myMessage[i]);    }    fail("OutputStream not set. write(int) must not work");  } catch (  Exception e) {    return;  }}  }
class C{  protected Expression mult(int opPos) throws TransformerException {  return compileOperation(new Mult(),opPos);}  }
class C{  public Object evaluate(GroovyCodeSource codeSource) throws CompilationFailedException {  Script script=parse(codeSource);  return script.run();}  }
class C{  protected final void sendMessageAtFrontOfQueue(int what,int arg1,int arg2,Object obj){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageAtFrontOfQueue(obtainMessage(what,arg1,arg2,obj));}  }
class C{  public PdfObjectReader(String password){  if (password == null) {    password="";  }  objectReader.setPassword(password);}  }
class C{  protected Multiplicity_Impl(){  super();}  }
class C{  public int compareTo(Object o){  LinearLocation other=(LinearLocation)o;  if (componentIndex < other.componentIndex)   return -1;  if (componentIndex > other.componentIndex)   return 1;  if (segmentIndex < other.segmentIndex)   return -1;  if (segmentIndex > other.segmentIndex)   return 1;  if (segmentFraction < other.segmentFraction)   return -1;  if (segmentFraction > other.segmentFraction)   return 1;  return 0;}  }
class C{  public String generateOpAsString(final int p,final boolean loseSlashPrefix){  final byte[] dataStream=characterStream;  final String s;  int start=this.opStart[p];  if (loseSlashPrefix && dataStream[start] == 47) {    start++;  }  int end=this.opEnd[p];  while ((dataStream[end] == 32) || (dataStream[end] == 13) || (dataStream[end] == 10)) {    end--;  }  final int count=end - start + 1;  int spaces=0;  for (int ii=0; ii < count; ii++) {    if ((ii > 0) && ((dataStream[start + ii] == 32) || (dataStream[start + ii] == 13) || (dataStream[start + ii] == 10)) && ((dataStream[start + ii - 1] == 32) || (dataStream[start + ii - 1] == 13) || (dataStream[start + ii - 1] == 10))) {      spaces++;    }  }  final char[] charString=new char[count - spaces];  int pos=0;  for (int ii=0; ii < count; ii++) {    if ((ii > 0) && ((dataStream[start + ii] == 32) || (dataStream[start + ii] == 13) || (dataStream[start + ii] == 10)) && ((dataStream[start + ii - 1] == 32) || (dataStream[start + ii - 1] == 13) || (dataStream[start + ii - 1] == 10))) {    } else {      if ((dataStream[start + ii] == 10) || (dataStream[start + ii] == 13)) {        charString[pos]=' ';      } else {        charString[pos]=(char)dataStream[start + ii];      }      pos++;    }  }  s=String.copyValueOf(charString);  return s;}  }
class C{  public void configure(){  TrafficController tc=makeGcTrafficController();  this.getSystemConnectionMemo().setTrafficController(tc);  log.debug("Connecting port");  tc.connectPort(this);  this.getSystemConnectionMemo().setProtocol(getOptionState(option1Name));  this.getSystemConnectionMemo().configureManagers();}  }
class C{  public MiniDrawer withInnerShadow(boolean innerShadow){  this.mInnerShadow=innerShadow;  return this;}  }
class C{  private void registerReceiver(){  IntentFilter intentFilter=new IntentFilter(UploadVideoService.ACTION_UPLOAD_SERVICE_RESPONSE);  intentFilter.addCategory(Intent.CATEGORY_DEFAULT);  LocalBroadcastManager.getInstance(this).registerReceiver(mUploadResultReceiver,intentFilter);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public InlineQueryResultDocument.InlineQueryResultDocumentBuilder title(String title){  this.title=title;  return this;}  }
class C{  public void register(String sourceSuffix){  if (!this.writeOnly) {    registerCoordinatorStreamConsumer();  }  registerCoordinatorStreamProducer(getSource() + sourceSuffix);}  }
class C{  public static MemberDefinition makeProxyMember(MemberDefinition field,ClassDefinition classDef,Environment env){  if (proxyCache == null) {    proxyCache=new HashMap();  }  String key=field.toString() + "@" + classDef.toString();  MemberDefinition proxy=(MemberDefinition)proxyCache.get(key);  if (proxy != null)   return proxy;  proxy=new MemberDefinition(field.getWhere(),classDef,field.getModifiers(),field.getType(),field.getName(),field.getExceptionIds(),null);  proxy.exp=field.getExceptions(env);  proxyCache.put(key,proxy);  return proxy;}  }
class C{  void feMessage(Throwable ex){  log.printRawLines(ex.getMessage());  if (ex.getCause() != null && options.isSet("dev")) {    ex.getCause().printStackTrace(log.getWriter(WriterKind.NOTICE));  }}  }
class C{  protected String long2roman(long val,boolean prefixesAreOK){  if (val <= 0) {    return getZeroString();  }  String roman="";  int place=0;  if (val <= 3999L) {    do {      while (val >= m_romanConvertTable[place].m_postValue) {        roman+=m_romanConvertTable[place].m_postLetter;        val-=m_romanConvertTable[place].m_postValue;      }      if (prefixesAreOK) {        if (val >= m_romanConvertTable[place].m_preValue) {          roman+=m_romanConvertTable[place].m_preLetter;          val-=m_romanConvertTable[place].m_preValue;        }      }      place++;    } while (val > 0);  } else {    roman=XSLTErrorResources.ERROR_STRING;  }  return roman;}  }
class C{  @Override public int mapString(int column,String value){  if (column == 0) {    Integer result=this.rowName2IndexMap.get(value);    if (result == null) {      return -1;    } else {      return result;    }  } else   if (column == 1) {    Integer result=this.columnName2IndexMap.get(value);    if (result == null) {      return -1;    } else {      return result;    }  } else {    return -1;  }}  }
class C{  public LocalReaction createLocalReaction(){  LocalReactionImpl localReaction=new LocalReactionImpl();  return localReaction;}  }
class C{  protected org.codehaus.cargo.container.packager.Packager createPackager(org.codehaus.cargo.container.Container container) throws MojoExecutionException {  if (getPackagerElement() == null) {    setPackagerElement(new Packager());  }  if (getPackagerElement().getOutputLocation() == null) {    String outputLocation=getFileHandler().append(getCargoProject().getBuildDirectory(),"package");    getPackagerElement().setOutputLocation(outputLocation);  }  return getPackagerElement().createPackager(container);}  }
class C{  protected DataInputStream openFileOnMountedObb(String obbPath,String fileName){  assertTrue("Cannot open file when OBB is not mounted!",mSm.isObbMounted(obbPath));  String path=mSm.getMountedObbPath(obbPath);  assertTrue("Path should not be null!",path != null);  File inFile=new File(path,fileName);  DataInputStream inStream=null;  try {    inStream=new DataInputStream(new FileInputStream(inFile));    Log.i(LOG_TAG,"Opened file: " + fileName + " for read at path: "+ path);  } catch (  FileNotFoundException e) {    Log.e(LOG_TAG,e.toString());    return null;  }catch (  SecurityException e) {    Log.e(LOG_TAG,e.toString());    return null;  }  return inStream;}  }
class C{  static void copy32bit(byte[] src,int isrc,byte[] dest,int idest){  dest[idest]=src[isrc];  dest[idest + 1]=src[isrc + 1];  dest[idest + 2]=src[isrc + 2];  dest[idest + 3]=src[isrc + 3];}  }
class C{  public static void error(ErrorMessages message,String data){  errors++;  err(NL + "Error: " + ErrorMessages.get(message,data));}  }
class C{  ByteTreeItem(){  in=0;  out=0;  parent=null;  terminal=false;  isSource=false;  depth=-1;  value=Byte.MIN_VALUE;  networkId=null;  children=Collections.synchronizedSet(new HashSet<ByteTreeItem>());}  }
class C{  private OrderedCollection<PortChangeEvent> handlePortStatusDelete(OFPortDesc delPort){  OrderedCollection<PortChangeEvent> events=new LinkedHashSetWrapper<PortChangeEvent>();  lock.writeLock().lock();  try {    Map<OFPort,OFPortDesc> newPortByNumber=new HashMap<OFPort,OFPortDesc>(portsByNumber);    OFPortDesc prevPort=portsByNumber.get(delPort.getPortNo());    if (prevPort == null) {      prevPort=portsByName.get(delPort.getName());      if (prevPort != null) {        newPortByNumber.remove(prevPort.getPortNo());        events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      }    } else     if (prevPort.getName().equals(delPort.getName())) {      newPortByNumber.remove(delPort.getPortNo());      events.add(new PortChangeEvent(delPort,PortChangeType.DELETE));    } else {      newPortByNumber.remove(delPort.getPortNo());      events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      prevPort=portsByName.get(delPort.getName().toLowerCase());      if (prevPort != null) {        newPortByNumber.remove(prevPort.getPortNo());        events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      }    }    updatePortsWithNewPortsByNumber(newPortByNumber);    return events;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  private void verifyTldCreation(String tldName,String roidSuffix,TldState tldState,String premiumList,Duration addGracePeriodLength,Duration redemptionGracePeriodLength,Duration pendingDeleteLength){  Registry registry=Registry.get(tldName);  assertThat(registry).isNotNull();  assertThat(registry.getRoidSuffix()).isEqualTo(roidSuffix);  assertThat(registry.getTldState(DateTime.now(UTC))).isEqualTo(tldState);  assertThat(registry.getPremiumList()).isNotNull();  assertThat(registry.getPremiumList().getName()).isEqualTo(premiumList);  assertThat(registry.getAddGracePeriodLength()).isEqualTo(addGracePeriodLength);  assertThat(registry.getRedemptionGracePeriodLength()).isEqualTo(redemptionGracePeriodLength);  assertThat(registry.getPendingDeleteLength()).isEqualTo(pendingDeleteLength);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a decimal number: ");  int value=input.nextInt();  System.out.println("The hex equivalent of " + value + " is "+ dec2Hex(value));}  }
class C{  synchronized void registerValidator(@NonNull BaseValidator validator,@NonNull Set<Class<?>> supportedModels){  for (  Class<?> clazz : supportedModels) {    BaseValidator base=classValidatorMap.put(clazz,validator);    if (base != null) {      throw new IllegalStateException("Two validators are validating the same model. " + base.getClass().getCanonicalName() + " and "+ classValidatorMap.get(clazz).getClass().getCanonicalName()+ " for class "+ clazz.getCanonicalName());    }  }}  }
class C{  public TextField(String name,TokenStream stream){  super(name,stream,TYPE_NOT_STORED);}  }
class C{  @Deprecated @Nullable public static <T,R>R awaitAll(long timeout,@Nullable IgniteReducer<T,R> rdc,@Nullable Collection<IgniteInternalFuture<T>> futs) throws IgniteCheckedException {  if (futs == null || futs.isEmpty())   return null;  long end=timeout == 0 ? Long.MAX_VALUE : U.currentTimeMillis() + timeout;  if (end < 0)   end=Long.MAX_VALUE;  for (  IgniteInternalFuture<T> fut : futs) {    T t;    if (timeout > 0) {      long left=end - U.currentTimeMillis();      if (left <= 0 && !fut.isDone())       throw new IgniteFutureTimeoutCheckedException("Timed out waiting for all futures: " + futs);      if (fut.isDone() && left < 0)       left=0;      t=fut.get(left);    } else     t=fut.get();    if (rdc != null)     rdc.collect(t);  }  return rdc == null ? null : rdc.reduce();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TVARIABLE__AST_ELEMENT:    setAstElement((EObject)null);  return;case TypesPackage.TVARIABLE__ANNOTATIONS:getAnnotations().clear();return;case TypesPackage.TVARIABLE__DECLARED_TYPE_ACCESS_MODIFIER:setDeclaredTypeAccessModifier(DECLARED_TYPE_ACCESS_MODIFIER_EDEFAULT);return;case TypesPackage.TVARIABLE__DECLARED_PROVIDED_BY_RUNTIME:setDeclaredProvidedByRuntime(DECLARED_PROVIDED_BY_RUNTIME_EDEFAULT);return;case TypesPackage.TVARIABLE__TYPE_REF:setTypeRef((TypeRef)null);return;case TypesPackage.TVARIABLE__CONST:setConst(CONST_EDEFAULT);return;case TypesPackage.TVARIABLE__EXTERNAL:setExternal(EXTERNAL_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private static MemoryExpressionElement convert(final CommonTree ast){  if (ast.getType() == MemoryExpressionParser.REGISTER) {    return new Register(ast.getText());  } else   if (ast.getType() == MemoryExpressionParser.NUMBER) {    return new NumericalValue(new BigInteger(ast.getText()));  } else   if (ast.getType() == MemoryExpressionParser.HEX_NUMBER) {    return new NumericalValue(new BigInteger(ast.getText().substring(2),16));  } else   if (ast.getType() == MemoryExpressionParser.MEM_EXPRESSION) {    return new MemoryExpression(convert((CommonTree)ast.getChild(0)));  } else   if (ast.getType() == MemoryExpressionParser.OPERAND_PLUS) {    return new PlusExpression(convertChildren(ast));  } else   if (ast.getType() == MemoryExpressionParser.OPERAND_MINUS) {    return new MinusExpression(convertChildren(ast));  } else   if (ast.getType() == MemoryExpressionParser.OPERAND_MULT) {    return new MultiplicationExpression(convertChildren(ast));  } else   if (ast.getType() == MemoryExpressionParser.SUB_EXPRESSION) {    return new SubExpression(convert((CommonTree)ast.getChild(0)));  } else   if (ast.getType() == 0) {    return convert((CommonTree)ast.getChild(0));  }  throw new IllegalStateException("IE00360: Not yet implemented (" + ast.getType() + ")");}  }
class C{  public static Join inner(SqlTable<?> table,Criterion... criterions){  return new Join(table,JoinType.INNER,criterions);}  }
class C{  @Override public boolean onCreateOptionsMenu(final Menu menu){  getMenuInflater().inflate(R.menu.menu_api_explorer,menu);  return true;}  }
class C{  public boolean verifySignature(byte[] signature){  if (forSigning) {    throw new IllegalStateException("RSADigestSigner not initialised for verification");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  byte[] sig;  byte[] expected;  try {    sig=rsaEngine.processBlock(signature,0,signature.length);    expected=derEncode(hash);  } catch (  Exception e) {    return false;  }  if (sig.length == expected.length) {    return Arrays.constantTimeAreEqual(sig,expected);  } else   if (sig.length == expected.length - 2) {    int sigOffset=sig.length - hash.length - 2;    int expectedOffset=expected.length - hash.length - 2;    expected[1]-=2;    expected[3]-=2;    int nonEqual=0;    for (int i=0; i < hash.length; i++) {      nonEqual|=(sig[sigOffset + i] ^ expected[expectedOffset + i]);    }    for (int i=0; i < sigOffset; i++) {      nonEqual|=(sig[i] ^ expected[i]);    }    return nonEqual == 0;  } else {    Arrays.constantTimeAreEqual(expected,expected);    return false;  }}  }
class C{  public boolean isTerminated(){  return terminated;}  }
class C{  public final TypeClass testLookupClass(String name){  return this.typeClasses.get(name);}  }
class C{  public static BOpContext<IBindingSet> mockContext(final AbstractTripleStore kb){  final UUID queryId=UUID.randomUUID();  final IQueryContext queryContext=new MockQueryContext(queryId);  final IRunningQuery runningQuery=new MockRunningQuery(null,kb.getIndexManager(),queryContext);  final BOpStats stats=new BOpStats();  final PipelineOp mockQuery=new MockQuery();  final IAsynchronousIterator<IBindingSet[]> source=new ThickAsynchronousIterator<IBindingSet[]>(new IBindingSet[][]{});  final IBlockingBuffer<IBindingSet[]> sink=new BlockingBufferWithStats<IBindingSet[]>(mockQuery,stats);  final BOpContext<IBindingSet> context=new BOpContext<IBindingSet>(runningQuery,-1,stats,mockQuery,true,source,sink,null);  return context;}  }
class C{  protected void removeTarget(final RPEntity entity){  targets.remove(entity.getID());  if (targets.isEmpty()) {    SingletonRepository.getTurnNotifier().dontNotify(this);  }}  }
class C{  public void makeTraced(){  madeTraced=true;  getDeclaringClass().makeFieldTraced(this);}  }
class C{  @Override public void resize(int to){  if (to > size) {    enlargeCapacity(to);    size=to;  }}  }
class C{  public AtlasClient(String... baseUrls) throws AtlasException {  this(getCurrentUGI(),baseUrls);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  @SuppressWarnings("rawtypes") AuditRecord other=(AuditRecord)obj;  if (holder == null) {    if (other.holder != null)     return false;  } else   if (!holder.equals(other.holder))   return false;  return true;}  }
class C{  private List<File> makeTmpConfDirFileList(File dir,List<File> fileList){  File[] files=dir.listFiles();  for (  File file : files) {    if (file.isFile()) {      fileList.add(file);    } else     if (file.isDirectory()) {      fileList=makeTmpConfDirFileList(file,fileList);    }  }  return fileList;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void run(){  final String tag="Scheduled session[" + taskid + "]";  LOG.entering(SessionTask.class.getName(),"run");  LOG.finer(tag + " starting...");  try {    if (execute() == false)     return;    LOG.finer(tag + " terminating - state is " + state+ ((delayBeforeNext > 0) ? (" next session is due in " + delayBeforeNext + " ms.") : " no additional session scheduled"));    if (delayBeforeNext <= 0) {      if (!notifyStateChange(COMPLETED,"scan-done"))       LOG.finer(tag + " stopped: done"); else       LOG.finer(tag + " completed: done");      return;    }    scheduleNext();  }  finally {    tasklist.remove(this);    LOG.finer(tag + " finished...");    LOG.exiting(SessionTask.class.getName(),"run");  }}  }
class C{  public static boolean nullSafeEquals(Object o1,Object o2){  if (o1 == o2) {    return true;  }  if (o1 == null || o2 == null) {    return false;  }  if (o1.equals(o2)) {    return true;  }  if (o1.getClass().isArray() && o2.getClass().isArray()) {    if (o1 instanceof Object[] && o2 instanceof Object[]) {      return Arrays.equals((Object[])o1,(Object[])o2);    }    if (o1 instanceof boolean[] && o2 instanceof boolean[]) {      return Arrays.equals((boolean[])o1,(boolean[])o2);    }    if (o1 instanceof byte[] && o2 instanceof byte[]) {      return Arrays.equals((byte[])o1,(byte[])o2);    }    if (o1 instanceof char[] && o2 instanceof char[]) {      return Arrays.equals((char[])o1,(char[])o2);    }    if (o1 instanceof double[] && o2 instanceof double[]) {      return Arrays.equals((double[])o1,(double[])o2);    }    if (o1 instanceof float[] && o2 instanceof float[]) {      return Arrays.equals((float[])o1,(float[])o2);    }    if (o1 instanceof int[] && o2 instanceof int[]) {      return Arrays.equals((int[])o1,(int[])o2);    }    if (o1 instanceof long[] && o2 instanceof long[]) {      return Arrays.equals((long[])o1,(long[])o2);    }    if (o1 instanceof short[] && o2 instanceof short[]) {      return Arrays.equals((short[])o1,(short[])o2);    }  }  return false;}  }
class C{  private void initH2Console(ServletContext servletContext){  log.debug("Initialize H2 console");  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());  h2ConsoleServlet.addMapping("/h2-console/*");  h2ConsoleServlet.setInitParameter("-properties","<%= SERVER_MAIN_RES_DIR %>");  h2ConsoleServlet.setLoadOnStartup(1);}  }
class C{  public void decodeValue(byte[] encoded,ServerType type,boolean binary,QueryBindings bindings,int index,QueryContext queryContext,TypesRegistryService typesRegistryService){  TInstance targetType=type != null ? type.getType() : null;  if (targetType == null && encoded != null) {    throw new UnknownDataTypeException(null);  }  ValueSource source;  if (encoded == null) {    Value value=new Value(targetType);    value.putNull();    bindings.setValue(index,value);    return;  } else   if (!binary) {    try {      source=new Value(MString.varchar(),new String(encoded,encoding));    } catch (    UnsupportedEncodingException ex) {      throw new UnsupportedCharsetException(encoding);    }  } else {    try {switch (type.getBinaryEncoding()) {case BINARY_OCTAL_TEXT:        source=new Value(MBinary.VARBINARY.instance(false),encoded);      break;case INT_8:case INT_16:case INT_32:case INT_64:    source=decodeIntegerType(encoded);  break;case FLOAT_32:source=new Value(MApproximateNumber.FLOAT.instance(false),getDataStream(encoded).readFloat());break;case FLOAT_64:source=new Value(MApproximateNumber.DOUBLE.instance(false),getDataStream(encoded).readDouble());break;case BOOLEAN_C:source=new Value(AkBool.INSTANCE.instance(false),encoded[0] != 0);break;case TIMESTAMP_INT64_MICROS_2000_NOTZ:source=decodeTimestampInt64Micros2000NoTZ(encoded);break;case UUID:Value value=new Value(AkGUID.INSTANCE.instance(false));value.putObject(AkGUID.bytesToUUID(encoded,0));source=value;break;case STRING_BYTES:{String s=new String(encoded,encoding);source=new Value(MString.VARCHAR.instance(s.length(),false),s);break;}case TIMESTAMP_FLOAT64_SECS_2000_NOTZ:case DAYS_2000:case TIME_FLOAT64_SECS_NOTZ:case TIME_INT64_MICROS_NOTZ:case DECIMAL_PG_NUMERIC_VAR:default :throw new UnknownDataTypeException(type.toString());}} catch (UnsupportedEncodingException ex) {throw new UnsupportedCharsetException(encoding);}catch (IOException ex) {throw new AkibanInternalException("IO error reading from byte array",ex);}}TCast cast=typesRegistryService.getCastsResolver().cast(source.getType(),targetType);TExecutionContext context=new TExecutionContext(Collections.singletonList(source.getType()),targetType,queryContext);Value target=new Value(targetType);cast.evaluate(context,source,target);bindings.setValue(index,target);}  }
class C{  @Override public void putNextEntry(ZipEntry ze) throws IOException {  super.putNextEntry(ze);}  }
class C{  protected final void addComponent(String name,String componentType,String rendererType){  this.factories.put(name,new ComponentHandlerFactory(componentType,rendererType));}  }
class C{  public OrientedFactoryImpl(){  super();}  }
class C{  public String diff_prettyHtml(LinkedList<Diff> diffs){  StringBuilder html=new StringBuilder();  for (  Diff aDiff : diffs) {    String text=aDiff.text.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\n","&para;<br>");switch (aDiff.operation) {case INSERT:      html.append("<ins style=\"background:#e6ffe6;\">").append(text).append("</ins>");    break;case DELETE:  html.append("<del style=\"background:#ffe6e6;\">").append(text).append("</del>");break;case EQUAL:html.append("<span>").append(text).append("</span>");break;}}return html.toString();}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  public synchronized int addLog(File file,int _verbosity,boolean postAnnouncements,boolean appendOnRestart) throws IOException {  return addLog(file,postAnnouncements,appendOnRestart,false);}  }
class C{  public final boolean sendEmptyMessageDelayed(int what,long delayMillis){  return mExec.sendEmptyMessageDelayed(what,delayMillis);}  }
class C{  private void readFile(IndexWriter indexWriter,File inputFile) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException {  BufferedInputStream in=new BufferedInputStream(new FileInputStream(inputFile));  byte[] tempInt=new byte[4];  int tmp, tmpFeature, count=0;  byte[] temp=new byte[100 * 1024];  while (in.read(tempInt,0,4) > 0) {    Document d=new Document();    tmp=SerializationUtils.toInt(tempInt);    in.read(temp,0,tmp);    String filename=new String(temp,0,tmp);    filename=inputFile.getCanonicalPath().substring(0,inputFile.getCanonicalPath().lastIndexOf(inputFile.getName())) + filename;    d.add(new StringField(DocumentBuilder.FIELD_NAME_IDENTIFIER,filename,Field.Store.YES));    while ((tmpFeature=in.read()) < 255) {      GlobalFeature f=(GlobalFeature)Class.forName(Extractor.features[tmpFeature]).newInstance();      in.read(tempInt,0,4);      tmp=SerializationUtils.toInt(tempInt);      in.read(temp,0,tmp);      f.setByteArrayRepresentation(temp,0,tmp);      addToDocument(f,d,Extractor.featureFieldNames[tmpFeature]);    }    if (run == 2)     indexWriter.addDocument(d);    docCount++;  }  in.close();}  }
class C{  @Override public Color transform(Element element){  return match(element);}  }
class C{  private String buildGeoloc(String timestamp,Geoloc geolocInfo){  String document="";  if (geolocInfo != null) {    document+="<tuple id=\"g1\">" + SipUtils.CRLF + "  <status><basic>open</basic></status>"+ SipUtils.CRLF+ "   <gp:geopriv>"+ SipUtils.CRLF+ "    <gp:location-info><gml:location>"+ SipUtils.CRLF+ "        <gml:Point srsDimension=\"3\"><gml:pos>"+ geolocInfo.getLatitude()+ " "+ geolocInfo.getLongitude()+ " "+ geolocInfo.getAltitude()+ "</gml:pos>"+ SipUtils.CRLF+ "        </gml:Point></gml:location>"+ SipUtils.CRLF+ "    </gp:location-info>"+ SipUtils.CRLF+ "    <gp:method>GPS</gp:method>"+ SipUtils.CRLF+ "   </gp:geopriv>"+ SipUtils.CRLF+ "  <contact>"+ ImsModule.getImsUserProfile().getPublicUri()+ "</contact>"+ SipUtils.CRLF+ "  <timestamp>"+ timestamp+ "</timestamp>"+ SipUtils.CRLF+ "</tuple>"+ SipUtils.CRLF;  }  return document;}  }
class C{  public Boolean deployLambda(DeployConfig config,FunctionCode functionCode,UpdateModeValue updateModeValue){  if (functionExists(config.getFunctionName())) {    if (UpdateModeValue.Full.equals(updateModeValue) || UpdateModeValue.Config.equals(updateModeValue)) {      try {        updateConfigurationOnly(config);      } catch (      AmazonClientException ace) {        logger.log(LogUtils.getStackTrace(ace));        return false;      }    }    if (UpdateModeValue.Full.equals(updateModeValue) || UpdateModeValue.Code.equals(updateModeValue)) {      if (functionCode != null) {        try {          String version=updateCodeOnly(config.getFunctionName(),functionCode,config.getPublish());          if (config.getPublish() && config.getCreateAlias()) {            if (aliasExists(config.getAlias(),config.getFunctionName())) {              updateLambdaAlias(config,version);            } else {              createLambdaAliasFunction(config,version);            }          }        } catch (        IOException e) {          logger.log(LogUtils.getStackTrace(e));          return false;        }catch (        AmazonClientException ace) {          logger.log(LogUtils.getStackTrace(ace));          return false;        }      } else {        logger.log("Could not find file to upload.");        return false;      }    }    return true;  } else {    if (functionCode != null) {      try {        String functionVersion=createLambdaFunction(config,functionCode);        if (config.getPublish() && config.getCreateAlias()) {          createLambdaAliasFunction(config,functionVersion);        }        return true;      } catch (      IOException e) {        logger.log(LogUtils.getStackTrace(e));        return false;      }catch (      AmazonClientException ace) {        logger.log(LogUtils.getStackTrace(ace));        return false;      }    } else {      logger.log("Could not find file to upload.");      return false;    }  }}  }
class C{  public static String convertIpSegmentToHex(String ipSegment){  return convertIpSegmentToHex(Integer.valueOf(ipSegment));}  }
class C{  public SelectedPlugin(){  initComponents();  selectedPluginController.addPropertyChangeListener(this);}  }
class C{  public static String encodeString(String stringToEncode) throws UnsupportedEncodingException {  return encodeBytes(stringToEncode.getBytes("UTF-8"));}  }
class C{  private void buildObjectGraph(Object3D parent,StringBuffer sb,String prefix){  sb.append(prefix).append("-->").append((parent.isContainer() ? "GROUP " : "") + parent.getName()).append('\n');  for (int i=0; i < parent.getNumChildren(); i++) {    buildObjectGraph(parent.getChildAt(i),sb,prefix + "\t");  }}  }
class C{  public int size(){  return size;}  }
class C{  public void worldToSpherical(Vector3 vec){  if (pjUnprojected == null) {    String projStr="+proj=longlat +a=" + projInfo.getSemiMajorAxis() + " +b="+ projInfo.getSemiMinorAxis()+ " +no_defs";    pjUnprojected=Proj4.newInstance(projStr);  }  if (pjProjected == null) {    pjProjected=Proj4.newInstance(proj4String);  }  try {    vec.toArray(coord);    pjProjected.transform(pjUnprojected,coord);    vec.setX(Math.toDegrees(coord[0]));    vec.setY(Math.toDegrees(coord[1]));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Property millisOfDay(){  return new Property(this,getChronology().millisOfDay());}  }
class C{  public RxJava1ClientWebRequestBuilder headers(HttpHeaders httpHeaders){  this.delegate.headers(httpHeaders);  return this;}  }
class C{  public ZipEntry(java.util.zip.ZipEntry entry){  super(entry.getName());  setComment(entry.getComment());  setMethod(entry.getMethod());  setTime(entry.getTime());  long size=entry.getSize();  if (size > 0) {    setSize(size);  }  long cSize=entry.getCompressedSize();  if (cSize > 0) {    setComprSize(cSize);  }  long crc=entry.getCrc();  if (crc > 0) {    setCrc(crc);  }  byte[] extra=entry.getExtra();  if (extra != null) {    setExtraFields(ExtraFieldUtils.parse(extra));  } else {    setExtra();  }}  }
class C{  public void detach(){  super.detach();  m_exprObj.detach();  m_exprObj=null;}  }
class C{  public void deleteComment(final IComment comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException {  try {    m_node.deleteComment(comment);  } catch (  final CouldntDeleteException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException(exception);  }}  }
class C{  @Override public EmotionalState evaluateEmotionalState(Vertex output){  Collection<Relationship> emotions=output.getRelationships(Primitive.EMOTION);  EmotionalState state=EmotionalState.NONE;  float max=0;  float value=0;  Emotion maxEmotion=null;  if (emotions != null) {    for (    Emotion emotion : getEmotions().values()) {      Relationship relationship=output.getRelationship(Primitive.EMOTION,emotion.primitive());      if ((relationship != null) && (Math.abs(relationship.getCorrectness()) > max)) {        value=relationship.getCorrectness();        max=Math.abs(value);        maxEmotion=emotion;      }    }  }  if (max >= 0.3) {    state=maxEmotion.evaluate(value);  }  return state;}  }
class C{  public String loadConfigurationFromFile(String fileName) throws IOException {  StringBuilder sb=new StringBuilder(256);  String s;  try (BufferedReader br=new BufferedReader(new FileReader(fileName))){    while ((s=br.readLine()) != null) {      sb.append(s);    }  }   return sb.toString();}  }
class C{  public static void clone(String remoteUri,String localDir) throws IOException, GitAPIException {  File localGitRepo=new File(localDir);  if (localGitRepo.exists()) {    if (localGitRepo.isDirectory()) {      FileUtils.cleanDirectory(localGitRepo);    } else {      throw new IOException("File exists: " + localDir);    }  } else {    localGitRepo.mkdirs();  }  Git g=Git.cloneRepository().setURI(remoteUri).setDirectory(localGitRepo).call();  g.close();}  }
class C{  protected void updateModel(){  List<ResultKey> selectedResults=getSelectedResults();  List<String> selectedMetrics=getSelectedMetrics();  boolean selectAllResults=false;  boolean selectFirstMetric=false;  if (selectedResults.size() == resultListModel.getSize()) {    selectAllResults=true;  }  if ((selectedMetrics.size() == 0) && (metricListModel.getSize() == 0)) {    selectFirstMetric=true;  }  resultListModel.addAll(controller.getKeys());  for (  ResultKey key : controller.getKeys()) {    for (    Accumulator accumulator : controller.get(key)) {      metricListModel.addAll(accumulator.keySet());    }  }  metricList.getSelectionModel().removeListSelectionListener(this);  metricList.clearSelection();  if (selectFirstMetric) {    metricList.setSelectedIndex(0);  } else {    for (    String metric : selectedMetrics) {      int index=metricListModel.getIndexOf(metric);      metricList.getSelectionModel().addSelectionInterval(index,index);    }  }  metricList.getSelectionModel().addListSelectionListener(this);  resultTable.getSelectionModel().removeListSelectionListener(this);  resultTableModel.fireTableDataChanged();  if (selectAllResults && (selectedResults.size() < resultListModel.getSize())) {    resultTable.getSelectionModel().addSelectionInterval(0,resultListModel.getSize() - 1);  } else {    for (    ResultKey key : selectedResults) {      int index=resultListModel.getIndexOf(key);      resultTable.getSelectionModel().addSelectionInterval(index,index);    }  }  resultTable.getSelectionModel().addListSelectionListener(this);}  }
class C{  protected CnATreeElement loadElement(String uuid,RetrieveInfo ri) throws CommandException {  LoadElementByUuid<CnATreeElement> loadByUuid=new LoadElementByUuid<CnATreeElement>(uuid,ri);  loadByUuid=commandService.executeCommand(loadByUuid);  CnATreeElement element=loadByUuid.getElement();  assertNotNull("Element is null, uuid: " + uuid,element);  RetrieveCnATreeElement retrieveCommand=new RetrieveCnATreeElement(element.getTypeId(),element.getDbId(),RetrieveInfo.getChildrenInstance());  retrieveCommand=commandService.executeCommand(retrieveCommand);  CnATreeElement elementWithChildren=retrieveCommand.getElement();  assertNotNull("Element with children is null, uuid: " + uuid,elementWithChildren);  assertNotNull("Children of element are null, uuid: " + uuid,elementWithChildren.getChildren());  LoadElementForEditor loadForEditor=new LoadElementForEditor(element,false);  loadForEditor=ServiceFactory.lookupCommandService().executeCommand(loadForEditor);  element=loadForEditor.getElement();  assertNotNull("Element for editor is null, uuid: " + uuid,element);  element.setChildren(elementWithChildren.getChildren());  return element;}  }
class C{  public long countEntries(Mac mac){  return ports.stream().filter(null).count();}  }
class C{  @Override public void makeItemVisible(final ILayer obj,final boolean b){  enableLayer(obj,b);}  }
class C{  public static void clear(){synchronized (_streams) {    for (    WeakReference<RotateStream> streamRef : _streams.values()) {      try {        RotateStream stream=streamRef.get();        if (stream != null) {          stream.closeImpl();        }      } catch (      Throwable e) {        e.printStackTrace(EnvironmentStream.getOriginalSystemErr());      }    }    _streams.clear();  }synchronized (_formatStreams) {    for (    WeakReference<RotateStream> streamRef : _formatStreams.values()) {      try {        RotateStream stream=streamRef.get();        if (stream != null) {          stream.closeImpl();        }      } catch (      Throwable e) {        e.printStackTrace(EnvironmentStream.getOriginalSystemErr());      }    }    _formatStreams.clear();  }}  }
class C{  public boolean isString(String key){  return get(key) instanceof String;}  }
class C{  public boolean isUserNameAlreadyTaken(String userName){  return isUserNameAlreadyTaken(userName,null);}  }
class C{  public int delMin(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  Node<Key> min=eraseMin();  Node<Key> x=(min.child == null) ? min : min.child;  if (min.child != null) {    min.child=null;    Node<Key> prevx=null, nextx=x.sibling;    while (nextx != null) {      x.parent=null;      x.sibling=prevx;      prevx=x;      x=nextx;      nextx=nextx.sibling;    }    x.parent=null;    x.sibling=prevx;    IndexBinomialMinPQ<Key> H=new IndexBinomialMinPQ<Key>();    H.head=x;    head=union(H).head;  }  return min.index;}  }
class C{  protected static void replace_instructions(InstructionList il,InstructionHandle ih,InstructionList new_il){  if ((new_il == null) || new_il.isEmpty())   return;  if (new_il.getLength() == 1) {    ih.setInstruction(new_il.getEnd().getInstruction());    return;  }  InstructionHandle new_end=new_il.getEnd();  InstructionHandle new_start=il.insert(ih,new_il);  il.redirectBranches(ih,new_start);  if (ih.hasTargeters()) {    for (    InstructionTargeter it : ih.getTargeters()) {      if (it instanceof LineNumberGen) {        it.updateTarget(ih,new_start);      } else       if (it instanceof LocalVariableGen) {        it.updateTarget(ih,new_end);      } else       if (it instanceof CodeExceptionGen) {        CodeExceptionGen exc=(CodeExceptionGen)it;        if (exc.getStartPC() == ih)         exc.updateTarget(ih,new_start); else         if (exc.getEndPC() == ih)         exc.updateTarget(ih,new_end); else         if (exc.getHandlerPC() == ih)         exc.setHandlerPC(new_start); else         System.out.printf("Malformed CodeException: %s%n",exc);      } else {        System.out.printf("unexpected target %s%n",it);      }    }  }  try {    il.delete(ih);  } catch (  Exception e) {    throw new Error("Can't delete instruction",e);  }}  }
class C{  public static GetImageStyleResult parseImageStyle(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    GetImageStyleResult result=new GetImageStyleResult();    result.SetStyleName(root.getChildText("Name"));    result.SetStyle(root.getChildText("Content"));    result.SetLastModifyTime(DateUtil.parseRfc822Date(root.getChildText("LastModifyTime")));    result.SetCreationDate(DateUtil.parseRfc822Date(root.getChildText("CreateTime")));    return result;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public static void eachObject(File self,Closure closure) throws IOException, ClassNotFoundException {  IOGroovyMethods.eachObject(newObjectInputStream(self),closure);}  }
class C{  public TagEntity createTagEntity(String tagType,String tagCode,String tagDisplayName,String tagDescription,TagEntity parentTagEntity){  TagTypeEntity tagTypeEntity=tagTypeDao.getTagTypeByKey(new TagTypeKey(tagType));  if (tagTypeEntity == null) {    tagTypeEntity=tagTypeDaoTestHelper.createTagTypeEntity(tagType,AbstractDaoTest.TAG_TYPE_DISPLAY_NAME,AbstractDaoTest.INTEGER_VALUE);  }  return createTagEntity(tagTypeEntity,tagCode,tagDisplayName,tagDescription,parentTagEntity);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){  int blockLen=(lineLen * 3) / 4;  if (blockLen <= 0) {    throw new IllegalArgumentException();  }  int lines=(iLen + blockLen - 1) / blockLen;  int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length();  StringBuilder buf=new StringBuilder(bufLen);  int ip=0;  while (ip < iLen) {    int l=Math.min(iLen - ip,blockLen);    buf.append(encode(in,iOff + ip,l));    buf.append(lineSeparator);    ip+=l;  }  return buf.toString();}  }
class C{  public static Angle mix(double amount,Angle value1,Angle value2){  if (value1 == null || value2 == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (amount < 0)   return value1; else   if (amount > 1)   return value2;  Quaternion quat=Quaternion.slerp(amount,Quaternion.fromAxisAngle(value1,Vec4.UNIT_X),Quaternion.fromAxisAngle(value2,Vec4.UNIT_X));  Angle angle=quat.getRotationX();  if (Double.isNaN(angle.degrees))   return null;  return angle;}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Insets nextInsets;  int px, py, pw, ph;  px=x;  py=y;  pw=width;  ph=height;  if (outsideBorder != null) {    outsideBorder.paintBorder(c,g,px,py,pw,ph);    nextInsets=outsideBorder.getBorderInsets(c);    px+=nextInsets.left;    py+=nextInsets.top;    pw=pw - nextInsets.right - nextInsets.left;    ph=ph - nextInsets.bottom - nextInsets.top;  }  if (insideBorder != null)   insideBorder.paintBorder(c,g,px,py,pw,ph);}  }
class C{  protected Session obtainSession(Properties props){  return Session.getInstance(props);}  }
class C{  @Override public int size(){  return size;}  }
class C{  protected boolean inFontTag(){  return (fontAttributes != null);}  }
class C{  private static Note createNote(String host,String hash,Note note) throws IOException, JSONException, AuthenticatorException {  HttpURLConnection urlConnection=null;  BufferedReader reader=null;  String jsonStr;  String path=host + "/api/v1/notebooks/" + note.getNotebookId()+ "/notes";  try {    URL url=new URL(path);    urlConnection=(HttpURLConnection)url.openConnection();    urlConnection.setRequestProperty("Content-Type","application/json; charset=UTF-8");    urlConnection.setRequestProperty("Accept","application/json");    urlConnection.setRequestProperty("Authorization","Basic " + hash);    urlConnection.setConnectTimeout(10000);    urlConnection.setReadTimeout(15000);    urlConnection.setRequestMethod("POST");    urlConnection.connect();    JSONObject jsonNote=new JSONObject();    jsonNote.put("title",note.getTitle());    jsonNote.put("content",note.getContent());    jsonNote.put("content_preview",note.getPreview());    OutputStream outputStream=urlConnection.getOutputStream();    outputStream.write(jsonNote.toString().getBytes());    outputStream.flush();    outputStream.close();    InputStream inputStream=urlConnection.getInputStream();    StringBuilder builder=new StringBuilder();    reader=new BufferedReader(new InputStreamReader(inputStream));    String line;    while ((line=reader.readLine()) != null) {      builder.append(line).append("\n");    }    jsonStr=builder.toString();    int responseCode=urlConnection.getResponseCode();    if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {      throw new AuthenticatorException("Authentication failed");    } else     if (responseCode != HttpURLConnection.HTTP_OK) {      Log.d(LOG_TAG,"Error while creating note, response code: " + urlConnection.getResponseCode());      throw new ConnectException();    } else {      JSONObject json=new JSONObject(jsonStr);      if (!json.getBoolean("success")) {        throw new ConnectException();      }      JSONObject jsonResponse=json.getJSONObject("response");      return parseNote(jsonResponse.toString());    }  }  finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    if (reader != null) {      try {        reader.close();      } catch (      final IOException e) {        Log.e(LOG_TAG,"Error closing stream",e);      }    }  }}  }
class C{  public AppMap(int initialCapacity){  super(initialCapacity);}  }
class C{  ChangeFontAction(SwingSet2 swingset,boolean plain){  super("FontMenu");  this.swingset=swingset;  this.plain=plain;}  }
class C{  public void reset(){  digest.reset();  digest.update(inputPad,0,inputPad.length);}  }
class C{  public void runUsingBootstrapper(Project project) throws Exception {  runUsing(P2BootstrapInstallation.latest().outsideJvmRunner(project));}  }
class C{  public void addStyleSheet(String name,File file){  stylesheets.put(name,new LocalFile(file));}  }
class C{  @Subscribe @AllowConcurrentEvents public void onEvent(final Event event){  Long rolloutId=null;  Long rolloutGroupId=null;  if (event instanceof ActionCreatedEvent) {    rolloutId=getRolloutId(((ActionCreatedEvent)event).getEntity().getRollout());    rolloutGroupId=getRolloutGroupId(((ActionCreatedEvent)event).getEntity().getRolloutGroup());  } else   if (event instanceof ActionPropertyChangeEvent) {    rolloutId=getRolloutId(((ActionPropertyChangeEvent)event).getEntity().getRollout());    rolloutGroupId=getRolloutGroupId(((ActionPropertyChangeEvent)event).getEntity().getRolloutGroup());  } else   if (event instanceof RolloutPropertyChangeEvent) {    rolloutId=((RolloutPropertyChangeEvent)event).getEntity().getId();  } else   if (event instanceof RolloutGroupCreatedEvent) {    rolloutId=((RolloutGroupCreatedEvent)event).getRolloutId();    rolloutGroupId=((RolloutGroupCreatedEvent)event).getRolloutGroupId();  } else   if (event instanceof RolloutGroupPropertyChangeEvent) {    final RolloutGroup rolloutGroup=((RolloutGroupPropertyChangeEvent)event).getEntity();    rolloutId=rolloutGroup.getRollout().getId();    rolloutGroupId=rolloutGroup.getId();  }  if (rolloutId != null) {    rolloutEvents.add(new RolloutEventKey(rolloutId,event.getTenant()));    if (rolloutGroupId != null) {      rolloutGroupEvents.add(new RolloutEventKey(rolloutId,rolloutGroupId,event.getTenant()));    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <E>Function<E,E> identity(){  return (Function<E,E>)IdentityFunction.INSTANCE;}  }
class C{  protected String buildXml(){  return Objects.requireNonNull(buildXml);}  }
class C{  private void downloadFormList(){  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo ni=connectivityManager.getActiveNetworkInfo();  if (ni == null || !ni.isConnected()) {    Toast.makeText(this,R.string.no_connection,Toast.LENGTH_SHORT).show();  } else {    mFormNamesAndURLs=new HashMap<String,FormDetails>();    if (mProgressDialog != null) {      mProgressDialog.setMessage(getString(R.string.please_wait));    }    showDialog(PROGRESS_DIALOG);    if (mDownloadFormListTask != null && mDownloadFormListTask.getStatus() != AsyncTask.Status.FINISHED) {      return;    } else     if (mDownloadFormListTask != null) {      mDownloadFormListTask.setDownloaderListener(null);      mDownloadFormListTask.cancel(true);      mDownloadFormListTask=null;    }    mDownloadFormListTask=new DownloadFormListTask();    mDownloadFormListTask.setDownloaderListener(this);    mDownloadFormListTask.execute();  }}  }
class C{  public ThrottledRunLater(Runnable runnable){  this.runnable=runnable;}  }
class C{  public void finished() throws IOException {  outputStream.close();}  }
class C{  private static boolean isAndroid(){  if (isClassPresent("android.util.DisplayMetrics")) {    return true;  } else {    return isClassPresent("org.robovm.rt.bro.Bro");  }}  }
class C{  public T caseAnonymous_multipleIsA_1_(Anonymous_multipleIsA_1_ object){  return null;}  }
class C{  protected Instances removeIgnored(Instances data) throws Exception {  Instances result=data;  if (m_IgnoreAttributesRange != null || data.classIndex() >= 0) {    m_removeAttributes=new Remove();    String rangeString="";    if (m_IgnoreAttributesRange != null) {      rangeString+=m_IgnoreAttributesRange.getRanges();    }    if (data.classIndex() >= 0) {      if (rangeString.length() > 0) {        rangeString+="," + (data.classIndex() + 1);      } else {        rangeString="" + (data.classIndex() + 1);      }    }    ((Remove)m_removeAttributes).setAttributeIndices(rangeString);    ((Remove)m_removeAttributes).setInvertSelection(false);    m_removeAttributes.setInputFormat(data);    result=Filter.useFilter(data,m_removeAttributes);  }  return result;}  }
class C{  public MemberList(){}  }
class C{  private Element createExtensionEle() throws Exception {  Element extEle=null;  Collection<IIdentityStoreData> localStores=idmClient.getProviders(tenantName,EnumSet.of(DomainType.LOCAL_OS_DOMAIN));  if (!localStores.isEmpty()) {    IIdentityStoreData store=localStores.iterator().next();    extEle=doc.createElement(SAMLNames.EXTENSIONS);    Element localStoreEle=doc.createElement(SAMLNames.LOCALOSIDSTORE);    localStoreEle.setAttribute(SAMLNames.IDNAME,store.getName());    extEle.appendChild(localStoreEle);  }  Collection<IIdentityStoreData> ADStores=idmClient.getProviders(tenantName,EnumSet.of(DomainType.EXTERNAL_DOMAIN));  if (!ADStores.isEmpty()) {    for (    IIdentityStoreData store : ADStores) {      IIdentityStoreDataEx storeDataExt=store.getExtendedIdentityStoreData();      if (storeDataExt.getProviderType() != IdentityStoreType.IDENTITY_STORE_TYPE_ACTIVE_DIRECTORY) {        continue;      }      if (extEle == null) {        extEle=doc.createElement(SAMLNames.EXTENSIONS);      }      Element adStoreEle=doc.createElement(SAMLNames.ACTIVEDIRECTORYIDSTORE);      adStoreEle.setAttribute(SAMLNames.IDNAME,store.getName());      adStoreEle.setAttribute(SAMLNames.IDUSERNAME,storeDataExt.getUserName());      adStoreEle.setAttribute(SAMLNames.IDSPN,storeDataExt.getServicePrincipalName());      if (storeDataExt.getFriendlyName() != null) {        adStoreEle.setAttribute(SAMLNames.IDFRIENDLYNAME,storeDataExt.getFriendlyName());      }      adStoreEle.setAttribute(SAMLNames.IDUSERPWD,storeDataExt.getPassword());      adStoreEle.setAttribute(SAMLNames.IDSEARCHBASEDN,storeDataExt.getUserBaseDn());      adStoreEle.setAttribute(SAMLNames.IDSEARCHTIMEOUTSCNDS,Integer.toString(storeDataExt.getSearchTimeoutSeconds()));      createKDCs(adStoreEle,store);      createAttributeMaps(adStoreEle,store);      extEle.appendChild(adStoreEle);    }  }  return extEle;}  }
class C{  public void constrain(int x,int y,int w,int h,Region region){  if ((x | y) != 0) {    translate(x,y);  }  if (transformState > TRANSFORM_TRANSLATESCALE) {    clipRect(0,0,w,h);    return;  }  final double scaleX=transform.getScaleX();  final double scaleY=transform.getScaleY();  x=constrainX=(int)transform.getTranslateX();  y=constrainY=(int)transform.getTranslateY();  w=Region.dimAdd(x,Region.clipScale(w,scaleX));  h=Region.dimAdd(y,Region.clipScale(h,scaleY));  Region c=constrainClip;  if (c == null) {    c=Region.getInstanceXYXY(x,y,w,h);  } else {    c=c.getIntersectionXYXY(x,y,w,h);  }  if (region != null) {    region=region.getScaledRegion(scaleX,scaleY);    region=region.getTranslatedRegion(x,y);    c=c.getIntersection(region);  }  if (c == constrainClip) {    return;  }  constrainClip=c;  if (!devClip.isInsideQuickCheck(c)) {    devClip=devClip.getIntersection(c);    validateCompClip();  }}  }
class C{  @Override public boolean isUsingManAce(){  return false;}  }
class C{  public void CompareQueryResultsWithoutAndWithIndexes(Object[][] r,int len,boolean checkOrder,String queries[]){  Collection coll1=null;  Collection coll2=null;  for (int j=0; j < len; j++) {    checkSelectResultTypes((SelectResults)r[j][0],(SelectResults)r[j][1],queries[j]);    checkResultSizes((SelectResults)r[j][0],(SelectResults)r[j][1],queries[j]);    if (checkOrder) {      coll2=(((SelectResults)r[j][1]).asList());      coll1=(((SelectResults)r[j][0]).asList());    } else {      coll2=(((SelectResults)r[j][1]).asSet());      coll1=(((SelectResults)r[j][0]).asSet());    }    compareResults(coll1,coll2,queries[j],checkOrder);  }}  }
class C{  public EssenceContainerDataBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,EssenceContainerData.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.linked_package_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,EssenceContainerData.ERROR_DESCRIPTION_PREFIX + "linked_package_uid is null");  }}  }
class C{  @Before public void initIndex(){  index=(HGSortIndex<Double,HGPersistentHandle>)impl().getIndex("testBidirectionalIndex",new DoubleType(),BAtoHandle.getInstance(config().getHandleFactory()),new DoubleType().getComparator(),null,false,true);  map=new TreeMap<Double,TreeSet<HGPersistentHandle>>();  int count=T.random(2000,5000);  for (int i=0; i < count; i++) {    double value=Math.random() * T.random(Integer.MAX_VALUE);    TreeSet<HGPersistentHandle> handles=new TreeSet<HGPersistentHandle>();    int valueCount=T.random(1,10);    for (int j=0; j < valueCount; j++) {      HGPersistentHandle handle=hfactory().makeHandle();      handles.add(handle);      index.addEntry(value,handle);    }    map.put(value,handles);  }}  }
class C{  public void testGetIndexedProperty(){  UnboundBean instance=new UnboundBeanImpl();  assertNull(instance.getIndexedProperty(NOT_A_PROPERTY,0));  assertEquals(OLD_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,0));  boolean outOfBounds=false;  try {    instance.getIndexedProperty(INDEXED_PROPERTY,1);  } catch (  IndexOutOfBoundsException ex) {    outOfBounds=true;  }  assertTrue(outOfBounds);  assertNull(instance.getIndexedProperty(MAPPED_INDEXED,0));  assertNull(instance.getIndexedProperty(MAPPED_INDEXED,1));}  }
class C{  public void removeTagDefinition(int tagId){  getTagInfo().delete(tagId);}  }
class C{  @ObjectiveCName("result:") public void result(@Nullable T res){  promise.result(res);}  }
class C{  public void endBlock() throws IOException {  if (exception != null)   throw exception;  if (finished)   throw new XZIOException("Stream finished or closed");  if (blockEncoder != null) {    try {      blockEncoder.finish();      index.add(blockEncoder.getUnpaddedSize(),blockEncoder.getUncompressedSize());      blockEncoder=null;    } catch (    IOException e) {      exception=e;      throw e;    }  }}  }
class C{  protected JComponent createPanel(String id,Map settings){  try {    JComponent result=provider.createPanel(controller,id,settings);    if (result instanceof WizardPage) {      ((WizardPage)result).setController(controller);      ((WizardPage)result).setWizardDataMap(settings);    }    return result;  } catch (  RuntimeException re) {    JTextArea jta=new JTextArea();    jta.setBorder(BorderFactory.createMatteBorder(2,2,2,2,Color.RED));    ByteArrayOutputStream buf=new ByteArrayOutputStream();    PrintStream str=new PrintStream(buf);    re.printStackTrace(str);    jta.setText(new String(buf.toByteArray()));    setProblem(re.getLocalizedMessage());    return new JScrollPane(jta);  }}  }
class C{  public final AssertSubscriber<T> assertSubscribed(){  int s=subscriptionCount;  if (s == 0) {    throw new AssertionError("OnSubscribe not called",null);  }  if (s > 1) {    throw new AssertionError("OnSubscribe called multiple times: " + s,null);  }  return this;}  }
class C{  private byte[][] minMaxIPs(byte[] ip1,byte[] subnetmask1,byte[] ip2,byte[] subnetmask2){  int ipLength=ip1.length;  byte[] min1=new byte[ipLength];  byte[] max1=new byte[ipLength];  byte[] min2=new byte[ipLength];  byte[] max2=new byte[ipLength];  for (int i=0; i < ipLength; i++) {    min1[i]=(byte)(ip1[i] & subnetmask1[i]);    max1[i]=(byte)(ip1[i] & subnetmask1[i] | ~subnetmask1[i]);    min2[i]=(byte)(ip2[i] & subnetmask2[i]);    max2[i]=(byte)(ip2[i] & subnetmask2[i] | ~subnetmask2[i]);  }  return new byte[][]{min1,max1,min2,max2};}  }
class C{  protected BrokerService createBroker(String uri) throws Exception {  BrokerService answer=new BrokerService();  configureBroker(answer,uri);  answer.start();  return answer;}  }
class C{  public static void writeSizeArrayOfExternalSortable(ExternalSortable[] A,int start,int finish,OutputStream out) throws IOException {  ByteUtils.writeInt(out,finish - start + 1);  writeArrayOfExternalSortable(A,start,finish,out);}  }
class C{  @Override public void resetLearning(){  this.instancesSeen=0L;  this.classInstances=new HashMap<>();  this.classPrototypes=new HashMap<>();  this.attributeObservers=new HashMap<>();}  }
class C{  private void calculateSizes(){  this.prefferedSize=new Dimension();  final BufferedImage image=new BufferedImage(100,100,BufferedImage.TYPE_INT_RGB);  final Graphics2D g2d=image.createGraphics();  g2d.setFont(font);  final FontMetrics metrics=g2d.getFontMetrics();  this.lineHeight=metrics.getHeight();  this.prefferedSize.height=this.lineHeight * 8;  for (  String s : text) {    prefferedSize.width=Math.max(prefferedSize.width,metrics.stringWidth(s));  }  this.prefferedSize.width=prefferedSize.width + 6 * metrics.stringWidth(" ");}  }
class C{  public List<List<Integer>> combine(int n,int k){  List<List<Integer>> res=new ArrayList<List<Integer>>();  combine(n,k,1,new ArrayList<Integer>(),res);  return res;}  }
class C{  public void testNGramFilter2() throws Exception {  Reader reader=new StringReader("test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("NGram","minGramSize","2","maxGramSize","3").create(stream);  assertTokenStreamContents(stream,new String[]{"te","tes","es","est","st"});}  }
class C{  public ArbitraryLengthPathNode(final TermNode left,final TermNode right,final VarNode tVarLeft,final VarNode tVarRight,final long lowerBound,final long upperBound){  this(new BOp[]{new JoinGroupNode()},NV.asMap(new NV(Annotations.LEFT_TERM,left),new NV(Annotations.RIGHT_TERM,right),new NV(Annotations.TRANSITIVITY_VAR_LEFT,tVarLeft),new NV(Annotations.TRANSITIVITY_VAR_RIGHT,tVarRight),new NV(Annotations.DROP_VARS,new ArrayList<VarNode>()),new NV(Annotations.LOWER_BOUND,lowerBound),new NV(Annotations.UPPER_BOUND,upperBound)));  final Set<VarNode> dropVars=new LinkedHashSet<>();  dropVars.add(tVarLeft);  dropVars.add(tVarRight);  setProperty(Annotations.DROP_VARS,dropVars);}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  if (((XYSeriesRenderer)renderer).isFillPoints()) {    paint.setStyle(Style.FILL);  } else {    paint.setStyle(Style.STROKE);  }switch (((XYSeriesRenderer)renderer).getPointStyle()) {case X:    drawX(canvas,paint,x + SHAPE_WIDTH,y);  break;case CIRCLE:drawCircle(canvas,paint,x + SHAPE_WIDTH,y);break;case TRIANGLE:drawTriangle(canvas,paint,new float[6],x + SHAPE_WIDTH,y);break;case SQUARE:drawSquare(canvas,paint,x + SHAPE_WIDTH,y);break;case DIAMOND:drawDiamond(canvas,paint,new float[8],x + SHAPE_WIDTH,y);break;case POINT:canvas.drawPoint(x + SHAPE_WIDTH,y,paint);break;}}  }
class C{  private void createBlocks(){  int offset=BLOCK_MINIMUM_CHARACTER_LENGTH;  mNumberOfBlocks=0;  final CharSequence text=mDisplay;  while (true) {    offset=TextUtils.indexOf(text,'\n',offset);    if (offset < 0) {      addBlockAtOffset(text.length());      break;    } else {      addBlockAtOffset(offset);      offset+=BLOCK_MINIMUM_CHARACTER_LENGTH;    }  }  mBlockIndices=new int[mBlockEndLines.length];  for (int i=0; i < mBlockEndLines.length; i++) {    mBlockIndices[i]=INVALID_BLOCK_INDEX;  }}  }
class C{  protected Container createSideNavigationComponent(Vector commands,String placement){  return createSideNavigationPanel(commands,placement);}  }
class C{  void zDrawDatePickerTextFieldIfNeeded(){  if (parentDatePicker != null) {    parentDatePicker.setTextFieldToValidStateIfNeeded();  }}  }
class C{  public void recompute(){}  }
class C{  public InputContactMessageContent.InputContactMessageContentBuilder phoneNumber(String phoneNumber){  this.phone_number=phoneNumber;  return this;}  }
class C{  public <T>Pair<V,T> withRhSide(T newRhSide){  return Pair.create(lhSide,newRhSide);}  }
class C{  private void findCheckableChildren(View v){  if (v instanceof Checkable) {    this.checkableViews.add((Checkable)v);  }  if (v instanceof ViewGroup) {    final ViewGroup vg=(ViewGroup)v;    final int childCount=vg.getChildCount();    for (int i=0; i < childCount; ++i) {      findCheckableChildren(vg.getChildAt(i));    }  }}  }
class C{  public HTTPConnectionImpl openRequestConnection(final Request request) throws IOException {  this.connect(request);  this.updateCookies(request);  this.request=request;  if (this.doRedirects && request.getLocation() != null) {    if (request.getLocation().toLowerCase().startsWith("ftp://")) {      throw new BrowserException("Cannot redirect to FTP");    }    final String org=request.getUrl();    final String red=request.getLocation();    if (org.equalsIgnoreCase(red) && this.redirectLoopCounter >= 20) {      final Logger llogger=this.getLogger();      if (llogger != null) {        llogger.severe("20 Redirects!!!");      }    } else     if (!org.equalsIgnoreCase(red) || this.redirectLoopCounter < 20) {      if (org.equalsIgnoreCase(red)) {        this.redirectLoopCounter++;      } else {        this.redirectLoopCounter=0;      }      try {        request.httpConnection.disconnect();      } catch (      final Throwable e) {      }      this.openGetConnection(null);    }  } else {    this.currentURL=request.getUrl();  }  return this.request.getHttpConnection();}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXECUTION_CHOICE;}  }
class C{  public void testPerformance() throws Exception {  String charset="UTF-8";  String testIterations=System.getProperty("test.iterations");  int iterations;  if (testIterations == null)   iterations=1; else   iterations=new Integer(testIterations);  String start="INSERT INTO foo VALUES(_binary'";  String end="')";  byte[] startBytes=start.getBytes(charset);  byte[] endBytes=end.getBytes(charset);  byte[] middleBytes=new byte[10000];  for (int j=0; j < middleBytes.length; j++)   middleBytes[j]=(byte)(100 + (j % 50));  byte[] statement=new byte[startBytes.length + middleBytes.length + endBytes.length];  int length=this.copy(statement,startBytes,0);  length=this.copy(statement,middleBytes,length);  length=this.copy(statement,endBytes,length);  MySQLStatementTranslator translator=new MySQLStatementTranslator(charset);  String testString=null;  long startMillis=System.currentTimeMillis();  for (int i=0; i < iterations; i++) {    testString=translator.toJavaString(statement,0,statement.length);  }  long endMillis=System.currentTimeMillis();  System.out.println("Parsing & translation: iterations=" + iterations + " string length="+ testString.length()+ " seconds="+ ((endMillis - startMillis) / 1000.0));  startMillis=System.currentTimeMillis();  for (int i=0; i < iterations; i++) {    testString=new String(statement,charset);  }  endMillis=System.currentTimeMillis();  System.out.println("Translation only: iterations=" + iterations + " string length="+ testString.length()+ " seconds="+ ((endMillis - startMillis) / 1000.0));}  }
class C{  public boolean isFaceCard(){  return ((rank == JACK) || (rank == QUEEN) || (rank == KING));}  }
class C{  public static String parseCollectionExpression(String collectionDescription){  String[] s0=CommonPattern.VERTICALBAR.split(collectionDescription);  ArrayList<String> collections=new ArrayList<String>(2);  for (  String s : s0) {    s=s.trim();    if (s.length() > 0)     collections.add(s);  }  StringBuilder fq=new StringBuilder(20);  if (collections.size() > 1) {    fq.append('(').append(CollectionSchema.collection_sxt.getSolrFieldName()).append(":\"").append(collections.get(0)).append('\"');    for (int i=1; i < collections.size(); i++) {      fq.append(" OR ").append(CollectionSchema.collection_sxt.getSolrFieldName()).append(":\"").append(collections.get(i)).append('\"');    }    fq.append(')');  } else   if (collections.size() == 1) {    fq.append(CollectionSchema.collection_sxt.getSolrFieldName()).append(":\"").append(collections.get(0)).append('\"');  }  if (fq.length() > 0)   fq.insert(0,"{!tag=" + CollectionSchema.collection_sxt.getSolrFieldName() + "}");  return fq.toString();}  }
class C{  public static boolean isNullOrEmpty(@Nullable CharSequence str){  return TextUtils.isEmpty(str);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredModifiers: ");  result.append(declaredModifiers);  result.append(", generator: ");  result.append(generator);  result.append(", declaredAsync: ");  result.append(declaredAsync);  result.append(", name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  @Override protected void keyTyped(char par1,int par2){  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  @Override public void onLogin(String uid){}  }
class C{  public static double range(double number,double from,double to) throws ExpressionException {  if (number >= from && number <= to)   return number;  throw new ExpressionException("number must between [" + from + " - "+ to+ "] now "+ number+ "");}  }
class C{  public static void hess(Matrix A,ExecutorService threadpool){  if (!A.isSquare())   throw new ArithmeticException("Only square matrices can be converted to Upper Hessenberg form");  int m=A.rows();  DenseVector columnUpdateTmp=new DenseVector(m);  double[] vk=new double[m];  double[] subMatrixUpdateTmp=new double[m];  double tmp;  for (int i=0; i < m - 2; i++) {    double s=0.0;    double sigh=A.get(i + 1,i);    vk[i + 1]=sigh;    s+=sigh * sigh;    sigh=sigh > 0 ? 1 : -1;    for (int j=i + 2; j < m; j++) {      tmp=A.get(j,i);      vk[j]=tmp;      s+=tmp * tmp;    }    double s1=-sigh * Math.sqrt(s);    s-=vk[i + 1] * vk[i + 1];    vk[i + 1]-=s1;    s+=vk[i + 1] * vk[i + 1];    double s1Inv=1.0 / Math.sqrt(s);    for (int j=i + 1; j < m; j++)     vk[j]*=s1Inv;    Matrix subA=new SubMatrix(A,i + 1,i,m,m);    DenseVector vVec=new DenseVector(vk,i + 1,m);    Vec tmpV=new DenseVector(subMatrixUpdateTmp,i,m);    tmpV.zeroOut();    vVec.multiply(subA,tmpV);    if (threadpool == null)     OuterProductUpdate(subA,vVec,tmpV,-2.0); else     OuterProductUpdate(subA,vVec,tmpV,-2.0,threadpool);    A.set(i + 1,i,s1);    for (int j=i + 2; j < m; j++)     A.set(j,i,0.0);    subA=new SubMatrix(A,0,i + 1,m,m);    columnUpdateTmp.zeroOut();    subA.multiply(vVec,1.0,columnUpdateTmp);    if (threadpool == null)     OuterProductUpdate(subA,columnUpdateTmp,vVec,-2.0); else     OuterProductUpdate(subA,columnUpdateTmp,vVec,-2.0,threadpool);  }}  }
class C{  public void disable(Feature f){  _featureFlags&=~f.getMask();}  }
class C{  public static final int numberOfState(String[] statuses) throws IllegalArgumentException {  int[] statusNumbers=new int[statuses.length];  for (int i=0; i < statuses.length; i++) {    statusNumbers[i]=numberOfProverStatus(i,statuses[i]);  }  return numberOfState(statusNumbers);}  }
class C{  public void initializeNetworkStates(){  for (int networkType=NUM_NETWORK_TYPES - 1; networkType >= 0; networkType--) {    mConnectivityState[networkType]=new NetworkState();    Log.v(LOG_TAG,"Initialize network state for " + networkType + ": "+ mConnectivityState[networkType].toString());  }}  }
class C{  public void skipCharacters(String skip) throws IOException {  skipWhile(skip + " \t\r\n");}  }
class C{  static public void assertHasScreenCoordinates(View origin,View view,int x,int y){  int[] xy=new int[2];  view.getLocationOnScreen(xy);  int[] xyRoot=new int[2];  origin.getLocationOnScreen(xyRoot);  assertEquals("x coordinate",x,xy[0] - xyRoot[0]);  assertEquals("y coordinate",y,xy[1] - xyRoot[1]);}  }
class C{  public ScaleTextPanel(){  super();  setKey(defaultScaleTextPanelKey);  zoomDelegate=new ZoomSupport(this);  String entry="";  String info="Scale";  String command=setScaleCmd;  scaleField=new JTextField(entry,10);  scaleField.setToolTipText(i18n.get(ScaleTextPanel.class,command,I18n.TOOLTIP,info));  scaleField.setMargin(new Insets(0,0,0,0));  scaleField.setActionCommand(command);  scaleField.addActionListener(this);  scaleField.setHorizontalAlignment(JTextField.RIGHT);  gridbag.setConstraints(scaleField,c);  add(scaleField);}  }
class C{  public StoredItemStack removeItems(StoredItemStack remove,INetworkCache network,ActionType action){  return remove;}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  AbstractEntityReference ae=(AbstractEntityReference)n;  ae.nodeName=nodeName;  return n;}  }
class C{  public NativeMemoryChunkPool(MemoryTrimmableRegistry memoryTrimmableRegistry,PoolParams poolParams,PoolStatsTracker nativeMemoryChunkPoolStatsTracker){  super(memoryTrimmableRegistry,poolParams,nativeMemoryChunkPoolStatsTracker);  SparseIntArray bucketSizes=poolParams.bucketSizes;  mBucketSizes=new int[bucketSizes.size()];  for (int i=0; i < mBucketSizes.length; ++i) {    mBucketSizes[i]=bucketSizes.keyAt(i);  }  initialize();}  }
class C{  private CheckpointQueryBuilder parseCheckpoint(){  return parseCheckpoint(new CheckpointQueryBuilder(_tableManager,_sql));}  }
class C{  public SymbolTable registerSharedSymtab(String serializedSymbolTable){  SymbolTable shared=loadSharedSymtab(serializedSymbolTable);  catalog().putTable(shared);  return shared;}  }
class C{  public static int[] permuted(int l){synchronized (random) {    return random.permuted(l);  }}  }
class C{  protected GoogleGDataRequest(RequestType type,URL requestUrl,ContentType contentType,HttpAuthToken authToken,Map<String,String> headerMap,Map<String,String> privateHeaderMap,HttpUrlConnectionSource connectionSource) throws IOException {  super(type,requestUrl,contentType,authToken,headerMap,privateHeaderMap,connectionSource);}  }
class C{  ChangeControl createForIndexedChange(RefControl refControl,Change change){  return create(refControl,notesFactory.createFromIndexedChange(change));}  }
class C{  public SetAndCount(Set<String> set){  super();  this.set.addAll(set);  this.count=set.size();}  }
class C{  public boolean isSection(String name) throws Exception {  return getModels().get(name) != null;}  }
class C{  public static void v(String tag,String msg){  log(LEVEL.VERBOSE,tag,msg,null);}  }
class C{  public static void assertEquals(Object object1,Object object2){  checkAssertion(object1.equals(object2),null);}  }
class C{  private void addProcessorOptions(List<String> opts){  IPreferenceStore store=CheckerPlugin.getDefault().getPreferenceStore();  String skipUses=store.getString(CheckerPreferences.PREF_CHECKER_A_SKIP_CLASSES);  if (!skipUses.isEmpty()) {    opts.add("-AskipUses=" + skipUses);  }  String lintOpts=store.getString(CheckerPreferences.PREF_CHECKER_A_LINT);  if (!lintOpts.isEmpty()) {    opts.add("-Alint=" + lintOpts);  }  if (store.getBoolean(CheckerPreferences.PREF_CHECKER_A_WARNS))   opts.add("-Awarns");  if (store.getBoolean(CheckerPreferences.PREF_CHECKER_A_NO_MSG_TEXT))   opts.add("-Anomsgtext");  if (store.getBoolean(CheckerPreferences.PREF_CHECKER_A_SHOW_CHECKS))   opts.add("-Ashowchecks");  if (store.getBoolean(CheckerPreferences.PREF_CHECKER_A_FILENAMES))   opts.add("-Afilenames");  if (store.getBoolean(CheckerPreferences.PREF_CHECKER_IMPLICIT_IMPORTS) && hasQuals) {    StringBuilder builder=new StringBuilder();    for (    String annClass : IMPLICIT_ARGS) {      builder.append(annClass);      builder.append(":");    }    builder.setLength(builder.length() - 1);    builder.trimToSize();  }}  }
class C{  public SimpleTimePeriod(long start,long end){  if (start > end) {    throw new IllegalArgumentException("Requires start <= end.");  }  this.start=start;  this.end=end;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.073 -0500",hash_original_method="E0920414B78E3CE1FE70B99B68FA357A",hash_generated_method="F936F726FF87F369DF6CAAEDDA4E909C") int constructUserData(boolean hasUserDataHeader,boolean dataInSeptets){  int offset=cur;  int userDataLength=pdu[offset++] & 0xff;  int headerSeptets=0;  int userDataHeaderLength=0;  if (hasUserDataHeader) {    userDataHeaderLength=pdu[offset++] & 0xff;    byte[] udh=new byte[userDataHeaderLength];    System.arraycopy(pdu,offset,udh,0,userDataHeaderLength);    userDataHeader=SmsHeader.fromByteArray(udh);    offset+=userDataHeaderLength;    int headerBits=(userDataHeaderLength + 1) * 8;    headerSeptets=headerBits / 7;    headerSeptets+=(headerBits % 7) > 0 ? 1 : 0;    mUserDataSeptetPadding=(headerSeptets * 7) - headerBits;  }  int bufferLen;  if (dataInSeptets) {    bufferLen=pdu.length - offset;  } else {    bufferLen=userDataLength - (hasUserDataHeader ? (userDataHeaderLength + 1) : 0);    if (bufferLen < 0) {      bufferLen=0;    }  }  userData=new byte[bufferLen];  System.arraycopy(pdu,offset,userData,0,userData.length);  cur=offset;  if (dataInSeptets) {    int count=userDataLength - headerSeptets;    return count < 0 ? 0 : count;  } else {    return userData.length;  }}  }
class C{  public static final long longEncode(final String hash){  int level=hash.length() - 1;  long b;  long l=0L;  for (  char c : hash.toCharArray()) {    b=(long)(BASE_32_STRING.indexOf(c));    l|=(b << (level-- * 5));  }  return (l << 4) | hash.length();}  }
class C{  public static <T>LazyPStackX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  public GroovyScript(){  super();}  }
class C{  public static void fillAlphaData(BaseDanmaku item,int beginAlpha,int endAlpha,long alphaDuraion){  if (item.getType() != BaseDanmaku.TYPE_SPECIAL)   return;  ((SpecialDanmaku)item).setAlphaData(beginAlpha,endAlpha,alphaDuraion);  updateSpecicalDanmakuDuration(item);}  }
class C{  protected void incrementVmsAcks(){  vmsAcks++;}  }
class C{  @Nullable private GridRestRequest createRestRequest(GridNioSession ses,GridClientMessage msg){  GridRestRequest restReq=null;  if (msg instanceof GridClientAuthenticationRequest) {    GridClientAuthenticationRequest req=(GridClientAuthenticationRequest)msg;    restReq=new GridRestTaskRequest();    restReq.command(NOOP);    restReq.credentials(req.credentials());  } else   if (msg instanceof GridClientCacheRequest) {    GridClientCacheRequest req=(GridClientCacheRequest)msg;    GridRestCacheRequest restCacheReq=new GridRestCacheRequest();    restCacheReq.cacheName(req.cacheName());    restCacheReq.cacheFlags(req.cacheFlagsOn());    restCacheReq.key(req.key());    restCacheReq.value(req.value());    restCacheReq.value2(req.value2());    Map vals=req.values();    if (vals != null)     restCacheReq.values(new HashMap<Object,Object>(vals));    restCacheReq.command(cacheCmdMap.get(req.operation()));    restReq=restCacheReq;  } else   if (msg instanceof GridClientTaskRequest) {    GridClientTaskRequest req=(GridClientTaskRequest)msg;    GridRestTaskRequest restTaskReq=new GridRestTaskRequest();    restTaskReq.command(EXE);    restTaskReq.taskName(req.taskName());    restTaskReq.params(Arrays.asList(req.argument()));    restReq=restTaskReq;  } else   if (msg instanceof GridClientTopologyRequest) {    GridClientTopologyRequest req=(GridClientTopologyRequest)msg;    GridRestTopologyRequest restTopReq=new GridRestTopologyRequest();    restTopReq.includeMetrics(req.includeMetrics());    restTopReq.includeAttributes(req.includeAttributes());    if (req.nodeId() != null) {      restTopReq.command(NODE);      restTopReq.nodeId(req.nodeId());    } else     if (req.nodeIp() != null) {      restTopReq.command(NODE);      restTopReq.nodeIp(req.nodeIp());    } else     restTopReq.command(TOPOLOGY);    restReq=restTopReq;  }  if (restReq != null) {    restReq.destinationId(msg.destinationId());    restReq.clientId(msg.clientId());    restReq.sessionToken(msg.sessionToken());    restReq.address(ses.remoteAddress());  }  return restReq;}  }
class C{  public static Soap createSoapMessage(String fileName) throws Exception {  return new SoapParserImpl().parse(newQueryInputStream(fileName));}  }
class C{  public AggregateFilterResult clone(){  AggregateFilterResult result=new AggregateFilterResult();  result.RevisedStartTime=RevisedStartTime;  result.RevisedProcessingInterval=RevisedProcessingInterval;  result.RevisedAggregateConfiguration=RevisedAggregateConfiguration == null ? null : RevisedAggregateConfiguration.clone();  return result;}  }
class C{  private static void createInitialBlocks(final View view,final Collection<FunctionBlock> passedFunctions,final Map<BasicBlock,ViewNode> nodeMap,final Map<ViewNode,Function> functionMap) throws CouldntLoadDataException {  for (  final FunctionBlock functionBlock : passedFunctions) {    final Function function=functionBlock.getFunction();    if (function.getType() == FunctionType.Import) {      final FunctionNode newNode=view.createFunctionNode(function);      functionMap.put(newNode,function);    } else {      function.load();      for (      final BasicBlock block : function.getGraph().getNodes()) {        final CodeNode newNode=view.createCodeNode(function,block.getInstructions());        newNode.setColor(DEFAULT_BLOCK_COLOR);        nodeMap.put(block,newNode);        functionMap.put(newNode,function);      }    }  }}  }
class C{  public AdvancedStateMap.Builder ignore(IProperty<?>... properties){  Collections.addAll(this.ignored,properties);  return this;}  }
class C{  public static AnimatablePaintValue createInheritPaintValue(AnimationTarget target){  AnimatablePaintValue v=new AnimatablePaintValue(target);  v.paintType=PAINT_INHERIT;  return v;}  }
class C{  public void testNynorskStemming() throws Exception {  Reader reader=new StringReader("gutar gutane");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("NorwegianLightStem","variant","nn").create(stream);  assertTokenStreamContents(stream,new String[]{"gut","gut"});}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  public boolean isCommentable(){  return mCommentable;}  }
class C{  private static int sysArg(int argno,byte[] buf){  return sysCall.sysArg(argno,buf,buf.length);}  }
class C{  public void testMac12() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};  byte[] upd={(byte)5,(byte)4,(byte)3,(byte)2,(byte)1,(byte)0};  SecretKeySpec scs=new SecretKeySpec(b,"SHA1");  for (int i=0; i < macs.length; i++) {    macs[i].init(scs);    byte[] res1=macs[i].doFinal();    byte[] res2=macs[i].doFinal();    assertEquals("Results are not the same",IntegralToString.bytesToHexString(res1,false),IntegralToString.bytesToHexString(res2,false));    res2=macs[i].doFinal(upd);    macs[i].update(upd);    res1=macs[i].doFinal();    assertEquals("Results are not the same",IntegralToString.bytesToHexString(res1,false),IntegralToString.bytesToHexString(res2,false));  }}  }
class C{  public Associativity(List<Terminal> terminals){  this.terminals=terminals;}  }
class C{  public void ifPresent(LongConsumer action){  if (isPresent) {    action.accept(value);  }}  }
class C{  @CanIgnoreReturnValue public Stopwatch reset(){  elapsedNanos=0;  isRunning=false;  return this;}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public T caseTModule(TModule object){  return null;}  }
class C{  private Figure readPathElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a);  readShapeAttributes(elem,a);  BezierPath[] beziers=toPath(elem,readAttribute(elem,"d",""));  Figure figure=factory.createPath(beziers,a);  elementObjects.put(elem,figure);  return figure;}  }
class C{  void normalize(double[][] matrix,double[] pi){  if (isNormalized) {    double subst=0.0;    int dimension=pi.length;    for (int i=0; i < dimension; i++) {      subst+=-matrix[i][i] * pi[i];    }    for (int i=0; i < dimension; i++) {      for (int j=0; j < dimension; j++) {        matrix[i][j]=matrix[i][j] / subst;      }    }    double switchingProportion=0.0;    switchingProportion+=matrix[0][2] * pi[2];    switchingProportion+=matrix[2][0] * pi[0];    switchingProportion+=matrix[1][3] * pi[3];    switchingProportion+=matrix[3][1] * pi[1];    for (int i=0; i < dimension; i++) {      for (int j=0; j < dimension; j++) {        matrix[i][j]=matrix[i][j] / (1.0 - switchingProportion);      }    }  }}  }
class C{  private void cleanCart(final String cartGuid){  final ShoppingCart cart=cartRepository.getShoppingCart(cartGuid);  if (cart != null) {    shoppingCartCommandFactory.execute(ShoppingCartCommand.CMD_CLEAN,cart,Collections.singletonMap(ShoppingCartCommand.CMD_CLEAN,null));  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, TransformerException {  try {    stream.defaultReadObject();  } catch (  ClassNotFoundException cnfe) {    throw new TransformerException(cnfe);  }}  }
class C{  public Object asType(Class c){  return null;}  }
class C{  public Vector3f negateLocal(){  x=-x;  y=-y;  z=-z;  return this;}  }
class C{  public SegmentedInputStream(final InputStream in,final long... delimiter) throws NullPointerException, IOException, IllegalStateException {  this(in);  addBlock(delimiter);}  }
class C{  public JavaResult checkAsyncTaskStatus(String messageID) throws Exception {  InputStream responseStream=null;  JavaResult result=null;  try {    String statusQueryWithParams=String.format(STATUS_QUERY,messageID);    ClientResponse response=client.post(getBaseURI(),statusQueryWithParams);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);    } else {      throw HDSException.exceptions.asyncTaskInvalidResponse(response.getStatus());    }  }  finally {    try {      if (null != responseStream) {        responseStream.close();      }    } catch (    IOException ioEx) {      log.warn("Ignoring io exception that occurred during stream closing for async status check for messageID {}",messageID);    }  }  return result;}  }
class C{  public Pair<Double,double[]> calculate(){  double objective=0.0;  System.out.println("In Calculate...");  double[] derivatives=DoubleArrays.constantArray(0.0,dimension());  int numSubLabels=encoding.getNumSubLabels();  int numData=data.length;  for (int l=0; l < numData; ++l) {    EncodedDatum datum=data[l];    double[] logProbabilities=getLogProbabilities(datum,x,encoding,indexLinearizer);    int C=datum.getLabelIndex();    double[] labelWeights=datum.getWeights();    int numSubstatesC=labelWeights.length;    int substate0=encoding.getLabelSubindexBegin(C);    for (int c=0; c < numSubstatesC; c++) {      objective-=labelWeights[c] * logProbabilities[substate0 + c];    }    double[] probabilities=new double[numSubLabels];    double sum=0.0;    for (int c=0; c < numSubLabels; ++c) {      probabilities[c]=Math.exp(logProbabilities[c]);      sum+=probabilities[c];    }    if (Math.abs(sum - 1.0) > 1e-3) {      System.err.println("Probabilities do not sum to 1!");    }    for (int i=0; i < datum.getNumActiveFeatures(); ++i) {      int featureIndex=datum.getFeatureIndex(i);      double featureCount=datum.getFeatureCount(i);      for (int c=0; c < numSubLabels; ++c) {        int index=indexLinearizer.getLinearIndex(featureIndex,c);        derivatives[index]+=featureCount * probabilities[c];      }      for (int c=0; c < numSubstatesC; c++) {        int index=indexLinearizer.getLinearIndex(featureIndex,substate0 + c);        derivatives[index]-=labelWeights[c] * featureCount;      }    }  }  double sigma2=sigma * sigma;  double penalty=0.0;  for (int index=0; index < x.length; ++index) {    penalty+=x[index] * x[index];  }  objective+=penalty / (2 * sigma2);  for (int index=0; index < x.length; ++index) {    derivatives[index]+=x[index] / sigma2;  }  return new Pair<Double,double[]>(objective,derivatives);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TAnnotableElement.class) {switch (derivedFeatureID) {case TypesPackage.TFORMAL_PARAMETER__ANNOTATIONS:      return TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS;default :    return -1;}}if (baseClass == SyntaxRelatedTElement.class) {switch (derivedFeatureID) {case TypesPackage.TFORMAL_PARAMETER__AST_ELEMENT:  return TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public DomainRestoreInfo reduceDomains(CSP csp){  DomainRestoreInfo result=new DomainRestoreInfo();  Queue<Variable> queue=QueueFactory.<Variable>createLifoQueue();  for (  Variable var : csp.getVariables())   queue.add(var);  reduceDomains(queue,csp,result);  return result.compactify();}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Map) {    Map<?,?> map=(Map)object;    if (size() != map.size()) {      return false;    }    Set<Map.Entry<K,V>> set=entrySet();    return set.equals(map.entrySet());  }  return false;}  }
class C{  public long size(){  return size;}  }
class C{  public void sortAndRetain(){  Collections.sort(counterList,this.descending ? DESC_COMPARATOR : ASC_COMPARATOR);  retain(capacity);  ordered=true;}  }
class C{  public static DecomposableMatchBuilder1<Float,Float> caseFloat(MatchesAny f){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(any());  return new DecomposableMatchBuilder1<>(matchers,0,new PrimitiveFieldExtractor<>(Float.class));}  }
class C{  public void putWord(int val) throws ArrayIndexOutOfBoundsException {  put(val,2);}  }
class C{  protected void publish() throws MqttException, IOException {  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);  if (sampleClientPub != null) {    String topic="Sample/Java/v3";    int qos=2;    String message="Message from async calback MQTTv3 Java client sample";    try {      sampleClientPub.publish(topic,qos,message.getBytes());    } catch (    Throwable e) {      e.printStackTrace();    }  }}  }
class C{  private static double clampAzimuth(double d){  d%=360;  if (d > 180.0) {    d-=360;  } else   if (d < -180) {    d+=360;  }  return d;}  }
class C{  @Override protected void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);  String name=evt.getPropertyName();  if (name.equals("foreground")) {    updateForeground((Color)evt.getNewValue());  } else   if (name.equals("font")) {    updateFont((Font)evt.getNewValue());  } else   if (name.equals("document")) {    JComponent comp=getComponent();    updateForeground(comp.getForeground());    updateFont(comp.getFont());  }}  }
class C{  public static void w(String tag,String s,Throwable e){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,s,e);}  }
class C{  static void testBytes(int numBytes,long expectedCount,long start,long lim) throws UnsupportedEncodingException {  Random rnd=new Random();  byte[] bytes=new byte[numBytes];  if (lim == -1) {    lim=1L << (numBytes * 8);  }  long count=0;  long countRoundTripped=0;  for (long byteChar=start; byteChar < lim; byteChar++) {    long tmpByteChar=byteChar;    for (int i=0; i < numBytes; i++) {      bytes[bytes.length - i - 1]=(byte)tmpByteChar;      tmpByteChar=tmpByteChar >> 8;    }    ByteString bs=ByteString.copyFrom(bytes);    boolean isRoundTrippable=bs.isValidUtf8();    String s=new String(bytes,"UTF-8");    byte[] bytesReencoded=s.getBytes("UTF-8");    boolean bytesEqual=Arrays.equals(bytes,bytesReencoded);    if (bytesEqual != isRoundTrippable) {      outputFailure(byteChar,bytes,bytesReencoded);    }    assertEquals(isRoundTrippable,Utf8.isValidUtf8(bytes));    assertEquals(isRoundTrippable,Utf8.isValidUtf8(bytes,0,numBytes));    int i=rnd.nextInt(numBytes);    int j=rnd.nextInt(numBytes);    if (j < i) {      int tmp=i;      i=j;      j=tmp;    }    int state1=Utf8.partialIsValidUtf8(Utf8.COMPLETE,bytes,0,i);    int state2=Utf8.partialIsValidUtf8(state1,bytes,i,j);    int state3=Utf8.partialIsValidUtf8(state2,bytes,j,numBytes);    if (isRoundTrippable != (state3 == Utf8.COMPLETE)) {      System.out.printf("state=%04x %04x %04x i=%d j=%d%n",state1,state2,state3,i,j);      outputFailure(byteChar,bytes,bytesReencoded);    }    assertEquals(isRoundTrippable,(state3 == Utf8.COMPLETE));    ByteString rope=RopeByteString.newInstanceForTest(bs.substring(0,i),RopeByteString.newInstanceForTest(bs.substring(i,j),bs.substring(j,numBytes)));    assertSame(RopeByteString.class,rope.getClass());    ByteString[] byteStrings={bs,bs.substring(0,numBytes),rope};    for (    ByteString x : byteStrings) {      assertEquals(isRoundTrippable,x.isValidUtf8());      assertEquals(state3,x.partialIsValidUtf8(Utf8.COMPLETE,0,numBytes));      assertEquals(state1,x.partialIsValidUtf8(Utf8.COMPLETE,0,i));      assertEquals(state1,x.substring(0,i).partialIsValidUtf8(Utf8.COMPLETE,0,i));      assertEquals(state2,x.partialIsValidUtf8(state1,i,j - i));      assertEquals(state2,x.substring(i,j).partialIsValidUtf8(state1,0,j - i));      assertEquals(state3,x.partialIsValidUtf8(state2,j,numBytes - j));      assertEquals(state3,x.substring(j,numBytes).partialIsValidUtf8(state2,0,numBytes - j));    }    ByteString ropeADope=RopeByteString.newInstanceForTest(bs,bs.substring(0,numBytes));    assertEquals(isRoundTrippable,ropeADope.isValidUtf8());    if (isRoundTrippable) {      countRoundTripped++;    }    count++;    if (byteChar != 0 && byteChar % 1000000L == 0) {      logger.info("Processed " + (byteChar / 1000000L) + " million characters");    }  }  logger.info("Round tripped " + countRoundTripped + " of "+ count);  assertEquals(expectedCount,countRoundTripped);}  }
class C{  public String toString(){  return getClass().getName() + "[i=" + (index)+ "]";}  }
class C{  String writeToNamedTmpFile(String filename,byte[] data) throws IOException {  File tmpFile=tmpDir.newFile(filename);  Files.write(data,tmpFile);  return tmpFile.getPath();}  }
class C{  public boolean startsWith(XMLString prefix,int toffset){  int to=toffset;  int tlim=this.length();  int po=0;  int pc=prefix.length();  if ((toffset < 0) || (toffset > tlim - pc)) {    return false;  }  while (--pc >= 0) {    if (this.charAt(to) != prefix.charAt(po)) {      return false;    }    to++;    po++;  }  return true;}  }
class C{  public void clear(){  map.clear();}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  protected void paintIndeterminate(Graphics g,JComponent c){  if (!(g instanceof Graphics2D)) {    return;  }  Insets b=progressBar.getInsets();  int barRectWidth=progressBar.getWidth() - (b.right + b.left);  int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);  if (barRectWidth <= 0 || barRectHeight <= 0) {    return;  }  Graphics2D g2=(Graphics2D)g;  boxRect=getBox(boxRect);  if (boxRect != null) {    g2.setColor(progressBar.getForeground());    g2.fillRect(boxRect.x,boxRect.y,boxRect.width,boxRect.height);  }  if (progressBar.isStringPainted()) {    if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {      paintString(g2,b.left,b.top,barRectWidth,barRectHeight,boxRect.x,boxRect.width,b);    } else {      paintString(g2,b.left,b.top,barRectWidth,barRectHeight,boxRect.y,boxRect.height,b);    }  }}  }
class C{  public boolean isObsessional(){  return typeString.contains(SUFFIX_OBSESSIONAL);}  }
class C{  @Deprecated public static void remove(Graph graph,Resource subj,IRI pred,Value obj,Resource... contexts){  Iterator<Statement> statements=graph.match(subj,pred,obj,contexts);  while (statements.hasNext()) {    statements.next();    statements.remove();  }}  }
class C{  public static void append(File file,Reader reader,String charset,boolean writeBom) throws IOException {  appendBuffered(file,reader,charset,writeBom);}  }
class C{  private HttpEntity paramsToEntity(RequestParams params,ResponseHandlerInterface responseHandler){  HttpEntity entity=null;  try {    if (params != null) {      entity=params.getEntity(responseHandler);    }  } catch (  IOException e) {    if (responseHandler != null)     responseHandler.sendFailureMessage(0,null,null,e); else     e.printStackTrace();  }  return entity;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.greaterThan(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  @Override public void onServiceConnected(ComponentName name,IBinder service){  binder=(IRCBinder)service;}  }
class C{  public SignatureFakingOracle(final String documentString) throws SignatureFakingException {  Security.addProvider(new BouncyCastleProvider());  signatureValueElements=new LinkedList<Node>();  keyInfoElements=new LinkedList<Node>();  certificates=new LinkedList<String>();  certHandlers=new LinkedList<CertificateHandler>();  try {    doc=DomUtilities.stringToDom(documentString);    crawlSignatureElements();    log.debug("found " + signatureValueElements.size() + " SignatureValue elements");    crawlKeyInfoElements();    log.debug("found " + keyInfoElements.size() + " KeyInfo elements containing X509 certificates");  } catch (  SAXException e) {    throw new SignatureFakingException(e);  }}  }
class C{  Entry<K,V> removeMapping(Object o){  if (!(o instanceof Map.Entry))   return null;  Map.Entry<K,V> entry=(Map.Entry<K,V>)o;  Object k=maskNull(entry.getKey());  int hash=hash(k);  int i=indexFor(hash,table.length);  Entry<K,V> prev=table[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (e.hash == hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      e.recordRemoval(this);      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  private byte[] engineDigest(byte[] in,int pos){  if (pos != 0)   System.arraycopy(in,0,tmp,0,pos);  tmp[pos++]=(byte)0x80;  if (pos > DATA_LENGTH - 8) {    while (pos < DATA_LENGTH)     tmp[pos++]=0;    byte2int(tmp,0,data,0,DATA_LENGTH / 4);    transform(data);    pos=0;  }  while (pos < DATA_LENGTH - 8)   tmp[pos++]=0;  byte2int(tmp,0,data,0,(DATA_LENGTH / 4) - 2);  long bc=count * 8;  data[14]=(int)(bc >>> 32);  data[15]=(int)bc;  transform(data);  byte buf[]=new byte[HASH_LENGTH];  int off=0;  for (int i=0; i < HASH_LENGTH / 4; ++i) {    int d=digest[i];    buf[off++]=(byte)(d >>> 24);    buf[off++]=(byte)(d >>> 16);    buf[off++]=(byte)(d >>> 8);    buf[off++]=(byte)d;  }  engineReset();  return buf;}  }
class C{  public static RotationOptions forceRotation(@RotationAngle int angle){  return new RotationOptions(angle,false);}  }
class C{  public void reset(){  init(_top);}  }
class C{  static int hash(Object x){  int h=x.hashCode();  h+=~(h << 9);  h^=(h >>> 14);  h+=(h << 4);  h^=(h >>> 10);  return h;}  }
class C{  public IgfsFileImpl(IgfsPath path,IgfsEntryInfo info,long globalGrpBlockSize){  A.notNull(path,"path");  A.notNull(info,"info");  this.path=path;  fileId=info.id();  flags=IgfsUtils.flags(info.isDirectory(),info.isFile());  if (info.isFile()) {    blockSize=info.blockSize();    len=info.length();    grpBlockSize=info.affinityKey() == null ? globalGrpBlockSize : info.length() == 0 ? globalGrpBlockSize : info.length();  }  props=info.properties();  if (props == null)   props=Collections.emptyMap();  accessTime=info.accessTime();  modificationTime=info.modificationTime();}  }
class C{  public static ActiveMeter createActiveMeter(String name){  return create().createActiveMeterImpl(name,null);}  }
class C{  private static void breakOrContinueParse(PsiBuilder builder){  PsiBuilder.Marker marker=builder.mark();  GroovyElementType result=GroovyTokenTypes.kBREAK.equals(builder.getTokenType()) ? GroovyElementTypes.BREAK_STATEMENT : GroovyElementTypes.CONTINUE_STATEMENT;  builder.advanceLexer();  ParserUtils.getToken(builder,GroovyTokenTypes.mIDENT);  marker.done(result);}  }
class C{  @ResponseBody @RequestMapping(value="/{applicationName}/containers",method=RequestMethod.GET) public List<ContainerUnit> listContainer(@PathVariable String applicationName) throws ServiceException, CheckException {  logger.debug("applicationName:" + applicationName);  return applicationService.listContainers(applicationName);}  }
class C{  public void clear(){  cookies.clear();}  }
class C{  public void run(){  System.out.println("MemoryManager running...");  try {    while (manager_enabled) {      if ((System.currentTimeMillis() - LAST_LOADING_TIME) / ONEDAY >= MIN_TIME_ON_SERVER) {        loadSubmissions();        LAST_LOADING_TIME=System.currentTimeMillis();      }      for (int i=submissions.size() - 1; i >= 0 && manager_enabled; i--) {        AccessStructure struct=(AccessStructure)submissions.get(i);        if (isErasable(struct)) {          manageDeletion(struct);          submissions.remove(i);        }      }      try {        Thread.sleep(SLEEP_TIME);      } catch (      InterruptedException e) {        if (manager_enabled)         e.printStackTrace();      }    }  } catch (  Exception e) {    e.printStackTrace();  }  System.out.println("MemoryManager stopped!");}  }
class C{  public long pop(){  long result=heap[1];  heap[1]=heap[size];  size--;  downHeap();  return result;}  }
class C{  public Comparator<? super E> comparator(){  return comparator;}  }
class C{  boolean alreadyEditingActionOrVariable(){  OpenPickListTable();  if (_editActionFrame != null) {    javax.swing.JOptionPane.showMessageDialog(_editActionFrame,rbx.getString("Error48"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);    _editActionFrame.setVisible(true);    return true;  }  if (_editVariableFrame != null) {    javax.swing.JOptionPane.showMessageDialog(_editVariableFrame,rbx.getString("Error47"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);    _editVariableFrame.setVisible(true);    return true;  }  return false;}  }
class C{  @Override public void paint(Graphics g){  super.paint(g);  paintEmptyRows(g);}  }
class C{  public CleanupContext(final List<String> nodes,final List<String> keySpaces,final List<String> columnFamilies){  this.nodes=(nodes == null) ? Collections.emptyList() : nodes;  this.keySpaces=(keySpaces == null) ? Collections.emptyList() : keySpaces;  this.columnFamilies=(columnFamilies == null) ? Collections.emptyList() : columnFamilies;}  }
class C{  public int size(){  if (relations == null) {    return 0;  } else {    return relations.size();  }}  }
class C{  public int kthSmallestC(TreeNode root,int k){  int count=countNodes(root.left);  if (k <= count) {    return kthSmallest(root.left,k);  } else   if (k > count + 1) {    return kthSmallest(root.right,k - 1 - count);  }  return root.val;}  }
class C{  private void repaintTab(int index){  if (!isRunsDirty && index >= 0 && index < tabPane.getTabCount()) {    tabPane.repaint(getTabBounds(tabPane,index));  }}  }
class C{  public static void sort(double[] array){  DualPivotQuicksort.sort(array);}  }
class C{  final public void print(long v){  try {    _out.print(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public void read(byte[] buff,int off,int len){  System.arraycopy(data,pos,buff,off,len);  pos+=len;}  }
class C{  public static <E>Set<E> of(E e1,E e2){  return new ImmutableCollections.Set2<E>(e1,e2);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:30.744 -0500",hash_original_method="FF36AACCF1BD8DBC263BCA1FAF3CB26B",hash_generated_method="D26E463E937B7643E724811284B0AD7C") private boolean isGprsConsistent(int gprsState,int serviceState){  return !((serviceState == ServiceState.STATE_IN_SERVICE) && (gprsState != ServiceState.STATE_IN_SERVICE));}  }
class C{  public Element peekElement(){  if (lastElementIndex < 0) {    return null;  }  return stack[lastElementIndex];}  }
class C{  public void init() throws ServletException {}  }
class C{  public int compareTo(TransformKey other){  if (this == other) {    return 0;  }  if (other == null) {    return 1;  }  int compare=compare(parent,other.parent);  if (compare != 0) {    return compare;  }  compare=compare(key,other.key);  if (compare != 0) {    return compare;  }  if (context == null) {    if (other.context != null) {      compare=-1;    }  } else   if (other.context == null) {    compare=1;  } else {    compare=context.compareTo(other.context);  }  return compare;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.130 -0500",hash_original_method="69B9528DEAFE31561943A8DC3715279B",hash_generated_method="BC7B357D9E620F5DEFDC6E84EF87CBBB") public void update(ActivityOptionsCompat otherOptions){}  }
class C{  public synchronized boolean addIfAbsent(Object e){  Object[] elements=getArray();  int len=elements.length;  Object[] newElements=new Object[len + 1];  for (int i=0; i < len; ++i) {    if (eq(e,elements[i]))     return false; else     newElements[i]=elements[i];  }  newElements[len]=e;  setArray(newElements);  return true;}  }
class C{  public String toString(){  return new String(getType() + " with current value: " + getValue()+ " "+ units+ " (range: "+ minimum+ " - "+ maximum+ ")");}  }
class C{  private void followPost(final String selectedWallId){  Toast.makeText(getActivity(),"Follow Post",Toast.LENGTH_SHORT).show();}  }
class C{  public static int hash(final Object[] objects){  if (objects.length == 0) {    return 0;  }  final Object obj=objects[0];  int hash=(obj == null ? 0 : objects[0].hashCode()) + 43;  for (int i=1; i < objects.length; i++) {    final Object ob=objects[i];    final int h=ob == null ? 0 : ob.hashCode();    hash=pairHash(hash,h);  }  return hash;}  }
class C{  public boolean hasWho(){  return super.hasElement(Who.KEY);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.245 -0500",hash_original_method="64B494D57495388AEA3A29297F0CBFFC",hash_generated_method="7764F224334641D2EC0D60CEFC73A728") public static void redirectLogStreams(){  System.out.close();  System.setOut(new AndroidPrintStream(Log.INFO,"System.out"));  System.err.close();  System.setErr(new AndroidPrintStream(Log.WARN,"System.err"));}  }
class C{  public void testConsumeTopic() throws Exception {  MessageProducer producer=createProducer(0);  consumerDestination=session.createTopic(getConsumerSubject());  producerDestination=session.createTopic(getProducerSubject());  MessageConsumer consumer=createConsumer();  connection.start();  for (int i=0; i < data.length; i++) {    Message message=session.createTextMessage(data[i]);    message.setStringProperty("stringProperty",data[i]);    message.setIntProperty("intProperty",i);    if (verbose) {      if (LOG.isDebugEnabled()) {        LOG.debug("About to send a topic message: " + message + " with text: "+ data[i]);      }    }    producer.send(producerDestination,message);  }  assertNotNull(consumer.receive(1000));}  }
class C{  public static void splashLicense(final License license){  if (RapidMiner.splashScreen != null) {    RapidMiner.splashScreen.setLicense(license);  }}  }
class C{  public boolean isGroup(){  return group;}  }
class C{  public static String chompLast(String str){  return chompLast(str,"\n");}  }
class C{  @Override public boolean supportsEnumeration(){  return getConstraintType().isUnique();}  }
class C{  protected LongType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public void addEdgeAndExplore(BasicBlock sourceBlock,InstructionHandle target,@Edge.Type int edgeType){  if (usedInstructionSet.get(target.getPosition()) && !containsInstruction(target)) {    List<EscapeTarget> escapeTargetList=escapeTargetListMap.get(sourceBlock);    if (escapeTargetList == null) {      escapeTargetList=new LinkedList<EscapeTarget>();      escapeTargetListMap.put(sourceBlock,escapeTargetList);    }    escapeTargetList.add(new EscapeTarget(target,edgeType));  } else {    BasicBlock targetBlock=getBlock(target);    addEdge(sourceBlock,targetBlock,edgeType);  }}  }
class C{  @Override public void cancelResourceRequest(SamzaResourceRequest request){  log.info("Cancelling request {} ",request);synchronized (lock) {    AMRMClient.ContainerRequest containerRequest=requestsMap.get(request);    if (containerRequest == null) {      log.info("Cancellation of {} already done. ",containerRequest);      return;    }    requestsMap.remove(request);    amClient.removeContainerRequest(containerRequest);  }}  }
class C{  public MutableKeyBuffer(final int capacity,final IRaba src){  if (src == null)   throw new IllegalArgumentException();  checkCapacity(capacity);  if (capacity < src.capacity())   throw new IllegalArgumentException();  nkeys=src.size();  keys=new byte[capacity][];  int i=0;  for (  byte[] a : src) {    keys[i++]=a;  }}  }
