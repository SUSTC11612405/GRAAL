class C{  public final static int parseInt(String str){  char c=str.charAt(0);  int length=str.length();  boolean negative=(c == '-');  int offset=1;  if (negative) {    if (length == 1 || length > 10) {      return Integer.parseInt(str);    }    c=str.charAt(offset++);  } else {    if (length > 9) {      return Integer.parseInt(str);    }  }  if (c > '9' || c < '0') {    return Integer.parseInt(str);  }  int num=c - '0';  if (offset < length) {    c=str.charAt(offset++);    if (c > '9' || c < '0') {      return Integer.parseInt(str);    }    num=(num * 10) + (c - '0');    if (offset < length) {      c=str.charAt(offset++);      if (c > '9' || c < '0') {        return Integer.parseInt(str);      }      num=(num * 10) + (c - '0');      if (offset < length) {        do {          c=str.charAt(offset++);          if (c > '9' || c < '0') {            return Integer.parseInt(str);          }          num=(num * 10) + (c - '0');        } while (offset < length);      }    }  }  return negative ? -num : num;}  }
class C{  public PromptsBuilder first(ConversationPrompt prompt){  prompts.clear();  return then(prompt);}  }
class C{  public void testGetIssuers(){  X509CRLSelector selector=new X509CRLSelector();  X500Principal iss1=new X500Principal("O=First Org.");  X500Principal iss2=new X500Principal("O=Second Org.");  X500Principal iss3=new X500Principal("O=Third Org.");  assertNull("The collection should be null.",selector.getIssuers());  selector.addIssuer(iss1);  selector.addIssuer(iss2);  Collection<X500Principal> result=selector.getIssuers();  try {    result.add(iss3);    fail("The returned collection should be unmodifiable.");  } catch (  UnsupportedOperationException e) {  }  assertTrue("The collection should contain the specified DN.",result.contains(iss2));}  }
class C{  public void mouseReleased(MouseEvent e){  getHandler().mouseReleased(e);}  }
class C{  public boolean addUserRecord(String partitionKey,String explicitHashKey,byte[] data){  validatePartitionKey(partitionKey);  partitionKey=partitionKey.trim();  explicitHashKey=explicitHashKey != null ? explicitHashKey.trim() : createExplicitHashKey(partitionKey);  validateExplicitHashKey(explicitHashKey);  validateData(data);  int sizeOfNewRecord=calculateRecordSize(partitionKey,explicitHashKey,data);  if (sizeOfNewRecord > MAX_BYTES_PER_RECORD) {    throw new IllegalStateException("Input record (PK=" + partitionKey + ", EHK="+ explicitHashKey+ ", SizeBytes="+ sizeOfNewRecord+ ") is too large to fit inside a single Kinesis record.");  } else   if (getSizeBytes() + sizeOfNewRecord > MAX_BYTES_PER_RECORD) {    return false;  }  Record.Builder newRecord=Record.newBuilder().setData(data != null ? ByteString.copyFrom(data) : ByteString.EMPTY);  ExistenceIndexPair pkAddResult=this.partitionKeys.add(partitionKey);  if (pkAddResult.getFirst().booleanValue()) {    this.aggregatedRecordBuilder.addPartitionKeyTable(partitionKey);  }  newRecord.setPartitionKeyIndex(pkAddResult.getSecond());  ExistenceIndexPair ehkAddResult=this.explicitHashKeys.add(explicitHashKey);  if (ehkAddResult.getFirst().booleanValue()) {    this.aggregatedRecordBuilder.addExplicitHashKeyTable(explicitHashKey);  }  newRecord.setExplicitHashKeyIndex(ehkAddResult.getSecond());  this.aggregatedMessageSizeBytes+=sizeOfNewRecord;  this.aggregatedRecordBuilder.addRecords(newRecord.build());  if (this.aggregatedRecordBuilder.getRecordsCount() == 1) {    this.aggPartitionKey=partitionKey;    this.aggExplicitHashKey=explicitHashKey;  }  return true;}  }
class C{  public static Connection connectOrUpgrade(String url,Properties info) throws SQLException {  if (!UPGRADE_CLASSES_PRESENT) {    return null;  }  Properties i2=new Properties();  i2.putAll(info);  Object o=info.get("password");  if (o instanceof char[]) {    i2.put("password",StringUtils.cloneCharArray((char[])o));  }  info=i2;  ConnectionInfo ci=new ConnectionInfo(url,info);  if (ci.isRemote() || !ci.isPersistent()) {    return null;  }  String name=ci.getName();  if (FileUtils.exists(name + Constants.SUFFIX_PAGE_FILE)) {    return null;  }  if (!FileUtils.exists(name + Constants.SUFFIX_OLD_DATABASE_FILE)) {    return null;  }  if (ci.removeProperty("NO_UPGRADE",false)) {    return connectWithOldVersion(url,info);  }synchronized (DbUpgrade.class) {    upgrade(ci,info);    return null;  }}  }
class C{  public LabeledPath(Iterable<? extends LatLon> locations,ScreenAnnotation annotation){  this.setLocations(locations);  this.setAnnotation(annotation);}  }
class C{  private boolean isTermiteFree(String aTree){  int bracketCount=0;  boolean justOpened=false;  if (aTree.isEmpty() || aTree.charAt(0) != '(') {    return false;  }  for (int idx=0; idx < aTree.length(); idx++) {    char c=aTree.charAt(idx);switch (c) {case '(':      bracketCount++;    if (justOpened) {      return false;    }  justOpened=true;break;case ' ':break;case ')':bracketCount--;if (justOpened) {return false;}if (bracketCount < 0) {return false;}justOpened=false;break;default :justOpened=false;break;}}return bracketCount == 0;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cwde");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final String isolatedMsb=environment.getNextVariableString();  final String shiftedMsb=environment.getNextVariableString();  final String mask=environment.getNextVariableString();  final String truncatedMask=environment.getNextVariableString();  final String ax=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(baseOffset,OperandSize.DWORD,"eax",OperandSize.DWORD,"32768",OperandSize.DWORD,isolatedMsb));  instructions.add(ReilHelpers.createBsh(baseOffset + 1,OperandSize.DWORD,isolatedMsb,OperandSize.DWORD,"-15",OperandSize.DWORD,shiftedMsb));  instructions.add(ReilHelpers.createSub(baseOffset + 2,OperandSize.DWORD,"0",OperandSize.DWORD,shiftedMsb,OperandSize.DWORD,mask));  instructions.add(ReilHelpers.createAnd(baseOffset + 3,OperandSize.DWORD,mask,OperandSize.DWORD,"4294901760",OperandSize.DWORD,truncatedMask));  instructions.add(ReilHelpers.createAnd(baseOffset + 4,OperandSize.DWORD,"eax",OperandSize.DWORD,"65535",OperandSize.DWORD,ax));  instructions.add(ReilHelpers.createOr(baseOffset + 5,OperandSize.DWORD,truncatedMask,OperandSize.DWORD,ax,OperandSize.DWORD,"eax"));}  }
class C{  @Override public void success(Object model,int requestId){switch (requestId) {case ApiResponseCodes.GET_USER_DETAILS:{      GetUserModel getUserModel=((GetUserModel)model);      String tagNamesValue="";      String tagIdsValue="";      userRefresh(false);      if (getUserModel.user.listings.size() > 0) {        if (getUserModel.user.listings.size() > 0) {          for (int i=0; i < getUserModel.user.listings.size(); i++) {            tagNamesValue=tagNamesValue + "," + getUserModel.user.listings.get(i).tag_name;            tagIdsValue=tagNamesValue + "," + getUserModel.user.listings.get(i).tag_id;          }        }      }      if (getUserModel.user.id.equals(AppConstants.UserInfo.INSTANCE.getId())) {        SharedPreferenceHelper.set(R.string.pref_first_name,getUserModel.user.name);        SharedPreferenceHelper.set(R.string.pref_profile_image,getUserModel.user.image_url);        SharedPreferenceHelper.set(R.string.pref_description,getUserModel.user.description);        SharedPreferenceHelper.set(R.string.pref_share_token,getUserModel.user.share_token);        AppConstants.UserInfo.INSTANCE.setDescription(getUserModel.user.description);        AppConstants.UserInfo.INSTANCE.setFirstName(getUserModel.user.name);        AppConstants.UserInfo.INSTANCE.setProfilePicture(getUserModel.user.image_url);        MixpanelAnalytics.getInstance().nameUser(AppConstants.UserInfo.INSTANCE.getFirstName());      }      ContentValues values=new ContentValues();      values.put(DatabaseColumns.ID,getUserModel.user.id);      values.put(DatabaseColumns.USER_IMAGE,getUserModel.user.image_url);      values.put(DatabaseColumns.USER_NAME,getUserModel.user.name);      values.put(DatabaseColumns.USER_DESCRIPTION,getUserModel.user.description);      values.put(DatabaseColumns.TAG_COUNT,getUserModel.user.total_tagged);      values.put(DatabaseColumns.REVIEW_COUNT,getUserModel.user.total_ratings);      values.put(DatabaseColumns.AVERAGE_RATING,getUserModel.user.rating_avg);      values.put(DatabaseColumns.REVIEW_COUNT,getUserModel.user.total_ratings);      values.put(DatabaseColumns.USER_TAGS,tagNamesValue);      values.put(DatabaseColumns.USER_TAGS_IDS,tagIdsValue);      values.put(DatabaseColumns.CONNECT_COUNT,getUserModel.user.connects_count);      String selection=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;      DBInterface.updateAsync(AppConstants.QueryTokens.UPDATE_USERS,getTaskTag(),values,TableUsers.NAME,values,selection,new String[]{getUserModel.user.id},true,this);      break;    }}}  }
class C{  public void test1(){  final GridLayoutManager layout=new GridLayoutManager(2,2,new Insets(0,0,0,0),0,0);  final JPanel panel=new JPanel(layout);  final JButton button=new JButton();  button.setPreferredSize(new Dimension(50,10));  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(50,10));  final JTextField field2=new JTextField();  panel.add(button,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field1,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field2,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  if (SystemInfo.isMac) {    assertEquals(125,preferredSize.width);  } else {    assertEquals(100,preferredSize.width);  }  panel.setSize(new Dimension(500,panel.getHeight()));  panel.doLayout();  assertEquals(500,field2.getWidth());  if (SystemInfo.isMac) {    assertEquals(75,button.getWidth());    assertEquals(425,field1.getWidth());  } else {    assertEquals(50,button.getWidth());    assertEquals(450,field1.getWidth());  }}  }
class C{  static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  private boolean canDowncastEntity(Entity entity,EntityType entityType) throws IllegalQueryStateException {  int fvFound=0;  int fvMatch=0;  for (  NodeType nd : entityType.getNodeTypes()) {    final Object fv=nd.getFixedValue();    if (fv != null) {      fvFound++;      final ValueNode node=entity.getChild(nd.getName(),ValueNode.class,false);      if (node != null) {        LOG.debug("Looking for matching fixed value {} in candidate types",node.getValue());        if (fv.equals(node.getValue())) {          LOG.debug("Found matching fixed value for downcast {}",node.getValue());          fvMatch++;        }      }    }  }  if (fvFound == 0) {    throw new IllegalQueryStateException("Invalid downcast candidate '" + entityType + "', no fixed values defined");  }  return fvFound == fvMatch;}  }
class C{  public static Base64EncodedImage extractImageFromDataURL(final String dataURL){  String fileExtension="";  String base64EncodedString=null;  if (StringUtils.startsWith(dataURL,IMAGE_DATA_URI_SUFFIX.GIF.getValue())) {    base64EncodedString=dataURL.replaceAll(IMAGE_DATA_URI_SUFFIX.GIF.getValue(),"");    fileExtension=IMAGE_FILE_EXTENSION.GIF.getValue();  } else   if (StringUtils.startsWith(dataURL,IMAGE_DATA_URI_SUFFIX.PNG.getValue())) {    base64EncodedString=dataURL.replaceAll(IMAGE_DATA_URI_SUFFIX.PNG.getValue(),"");    fileExtension=IMAGE_FILE_EXTENSION.PNG.getValue();  } else   if (StringUtils.startsWith(dataURL,IMAGE_DATA_URI_SUFFIX.JPEG.getValue())) {    base64EncodedString=dataURL.replaceAll(IMAGE_DATA_URI_SUFFIX.JPEG.getValue(),"");    fileExtension=IMAGE_FILE_EXTENSION.JPEG.getValue();  } else {    throw new ImageDataURLNotValidException();  }  return new Base64EncodedImage(base64EncodedString,fileExtension);}  }
class C{  public double distanceToViewGlobeExtents(){  double sinfovy_2=Math.sin(Math.toRadians(this.fieldOfView * 0.5));  double radius=this.globe.getEquatorialRadius();  return radius / sinfovy_2 - radius;}  }
class C{  public static CrontabParameterExpression crontabScheduleItem(Integer parameter,ScheduleItemType type){  CrontabParameterExpression param=new CrontabParameterExpression(type);  if (parameter != null) {    param.addChild(Expressions.constant(parameter));  }  return param;}  }
class C{  public static void offerSuperUser(Activity activity){  getInternals().offerSuperUser(activity);}  }
class C{  private void checkLinkAndFinishDeleting(EnumerationContext ctx,String deletionNextPageLink){  if (deletionNextPageLink != null) {    logFine("Querying page [%s] for resources to be deleted",deletionNextPageLink);    Operation.createGet(this,deletionNextPageLink).setCompletion(null).sendWith(this);    return;  }  logInfo("No compute states match for deletion");  ctx.subStage=EnumerationSubStages.FINISHED;  handleSubStage(ctx);}  }
class C{  public static List<INaviFunction> loadFunctions(final SQLProvider provider,final INaviModule module,final List<IFlowgraphView> views) throws CouldntLoadDataException {  checkArguments(provider,module);  final String query=" SELECT * FROM load_function_information(?) ";  try {    final PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query);    statement.setInt(1,module.getConfiguration().getId());    final ResultSet resultSet=statement.executeQuery();    return parseFunctionInformation(resultSet,provider,module);  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  private void subscribeTopics(String token) throws IOException {  for (  String topic : TOPICS) {    GcmPubSub pubSub=GcmPubSub.getInstance(this);    pubSub.subscribe(token,"/topics/" + topic,null);  }}  }
class C{  public final int nextInstruction(){  if (VM.VerifyAssertions)   VM._assert(bcIndex < bcLength);  opcode=readUnsignedByte();  wide=(opcode == JBC_wide);  return opcode;}  }
class C{  private void addMenuItems(JMenu menu){  Locale locale=getRootPane().getLocale();  menu.setToolTipText(UIManager.getString("BETitlePane.titleMenuToolTipText",getLocale()));  JMenuItem mi;  int mnemonic;  if (getWindowDecorationStyle() == JRootPane.FRAME) {    mi=menu.add(restoreAction);    mnemonic=BEUtils.getInt("MetalTitlePane.restoreMnemonic",-1);    if (mnemonic != -1) {      mi.setMnemonic(mnemonic);    }    mi=menu.add(iconifyAction);    mnemonic=BEUtils.getInt("MetalTitlePane.iconifyMnemonic",-1);    if (mnemonic != -1) {      mi.setMnemonic(mnemonic);    }    if (Toolkit.getDefaultToolkit().isFrameStateSupported(Frame.MAXIMIZED_BOTH)) {      mi=menu.add(maximizeAction);      mnemonic=BEUtils.getInt("MetalTitlePane.maximizeMnemonic",-1);      if (mnemonic != -1) {        mi.setMnemonic(mnemonic);      }    }    menu.add(new JSeparator());  }  mi=menu.add(closeAction);  mnemonic=BEUtils.getInt("MetalTitlePane.closeMnemonic",-1);  if (mnemonic != -1) {    mi.setMnemonic(mnemonic);  }}  }
class C{  @Override public void onBackPressed(){  File current=this.core.getCurrentFolder();  if (!this.useBackButton || current == null || current.getParent() == null || current.getPath().compareTo(this.startFolder.getPath()) == 0) {    super.onBackPressed();  } else {    this.core.loadFolder(current.getParent());  }}  }
class C{  public boolean intersectsSegment(LatLon begin,LatLon end){  if (begin == null) {    throw new IllegalArgumentException("Begin Is Null");  }  if (end == null) {    throw new IllegalArgumentException("End Is Null");  }  Vec4 segmentBegin=new Vec4(begin.getLongitude().degrees,begin.getLatitude().degrees,0);  Vec4 segmentEnd=new Vec4(end.getLongitude().degrees,end.getLatitude().degrees,0);  Vec4 tmp=segmentEnd.subtract3(segmentBegin);  Vec4 segmentCenter=segmentBegin.add3(segmentEnd).divide3(2);  Vec4 segmentDirection=tmp.normalize3();  double segmentExtent=tmp.getLength3() / 2.0;  LatLon centroid=this.getCentroid();  Vec4 boxCenter=new Vec4(centroid.getLongitude().degrees,centroid.getLatitude().degrees,0);  double boxExtentX=this.getDeltaLonDegrees() / 2.0;  double boxExtentY=this.getDeltaLatDegrees() / 2.0;  Vec4 diff=segmentCenter.subtract3(boxCenter);  if (Math.abs(diff.x) > (boxExtentX + segmentExtent * Math.abs(segmentDirection.x))) {    return false;  }  if (Math.abs(diff.y) > (boxExtentY + segmentExtent * Math.abs(segmentDirection.y))) {    return false;  }  Vec4 segmentPerp=new Vec4(segmentDirection.y,-segmentDirection.x,0);  return Math.abs(segmentPerp.dot3(diff)) <= (boxExtentX * Math.abs(segmentPerp.x) + boxExtentY * Math.abs(segmentPerp.y));}  }
class C{  public void shrink(int desiredLength){  if (desiredLength < numObjs)   desiredLength=numObjs;  if (desiredLength >= objs.length)   return;  double[] newobjs=new double[desiredLength];  System.arraycopy(objs,0,newobjs,0,numObjs);  objs=newobjs;}  }
class C{  public int indexOf(Prototype prototype){  if (prototype == null) {    throw new NullPointerException("prototype == null");  }  throwIfNotPrepared();  ProtoIdItem item=protoIds.get(prototype);  if (item == null) {    throw new IllegalArgumentException("not found");  }  return item.getIndex();}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") private static void writeConfigurationToFile(Configuration conf) throws Exception {  final String path=U.getIgniteHome() + SECONDARY_CFG_PATH;  File file=new File(path);  file.delete();  assertFalse(file.exists());  try (FileOutputStream fos=new FileOutputStream(file)){    conf.writeXml(fos);  }   assertTrue(file.exists());}  }
class C{  public void cancelAll(){  for (  ObserveRelation relation : relations)   relation.cancel();}  }
class C{  public ConnectTimeoutException(){  super();}  }
class C{  protected void addWeblogicAdminArguments(JvmLauncher java){  File serverDir=new File(this.getHome(),"server");  java.addClasspathEntries(new File(serverDir,"lib/weblogic_sp.jar"));  java.addClasspathEntries(new File(serverDir,"lib/weblogic.jar"));  java.setMainClass("weblogic.Admin");  java.addAppArguments("-url");  java.addAppArguments("t3://" + getConfiguration().getPropertyValue(GeneralPropertySet.HOSTNAME) + ":"+ getConfiguration().getPropertyValue(ServletPropertySet.PORT));  java.addAppArguments("-username");  java.addAppArguments(getConfiguration().getPropertyValue(WebLogicPropertySet.ADMIN_USER));  java.addAppArguments("-password");  java.addAppArguments(getConfiguration().getPropertyValue(WebLogicPropertySet.ADMIN_PWD));}  }
class C{  @Override public byte[] serialize(){  short padding=0;  if (paddingMap.containsKey(this.icmpType))   padding=paddingMap.get(this.icmpType);  int length=4 + padding;  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();    length+=payloadData.length;  }  byte[] data=new byte[length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.put(this.icmpType);  bb.put(this.icmpCode);  bb.putShort(this.checksum);  for (int i=0; i < padding; i++)   bb.put((byte)0);  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IpProtocol.ICMP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    for (int i=0; i < length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(2,this.checksum);  }  return data;}  }
class C{  void restart(){  pos=0;}  }
class C{  public BasicPage descriptionTypeface(String typefacePath){  this.descriptionTypefacePath=typefacePath;  return this;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  FilesDao.dropTable(db,ifExists);  InjectorDbDao.dropTable(db,ifExists);}  }
class C{  public Texture(PGraphicsOpenGL pg,int width,int height){  this(pg,width,height,new Parameters());}  }
class C{  private void drawHorizontalScale(final boolean top,final int scale,final int pixelperscale,final int offset,final Long colorNaming,final Long colorScale,final String name){  final int y=(top) ? this.topborder : this.height - this.bottomborder;  int x=this.leftborder;  int s=offset;  while (x < this.width - this.rightborder) {    if ((colorScale != null) && (x > this.leftborder) && (x < (this.width - this.rightborder))) {      setColor(colorScale);      line(x,this.topborder,x,this.height - this.bottomborder,100);    }    setColor(colorNaming);    line(x,y - 3,x,y + 3,100);    PrintTool.print(this,x,(top) ? y - 3 : y + 9,0,Integer.toString(s),-1,false,80);    x+=pixelperscale;    s+=scale;  }  setColor(colorNaming);  PrintTool.print(this,this.width - this.rightborder,(top) ? y - 9 : y + 15,0,name,1,false,80);  line(this.leftborder - 4,y,this.width - this.rightborder + 4,y,100);}  }
class C{  public StrTokenizer reset(String input){  reset();  if (input != null) {    this.chars=input.toCharArray();  } else {    this.chars=null;  }  return this;}  }
class C{  void allocatePages(IntArray list,int pagesToAllocate,BitField exclude,int after){  list.ensureCapacity(list.size() + pagesToAllocate);  for (int i=0; i < pagesToAllocate; i++) {    int page=allocatePage(exclude,after);    after=page;    list.add(page);  }}  }
class C{  public boolean hasCode(){  return getCode() != null;}  }
class C{  final Annotation[] toAnnotations(final Object datas){  if (null == datas) {    return emptyAnnotationArray;  } else   if (datas instanceof RVMAnnotation) {    final Annotation[] copy=new Annotation[1];    copy[0]=((RVMAnnotation)datas).getValue();    return copy;  } else {    RVMAnnotation[] annotations=(RVMAnnotation[])datas;    final Annotation[] copy=new Annotation[annotations.length];    for (int i=0; i < copy.length; i++) {      copy[i]=annotations[i].getValue();    }    return copy;  }}  }
class C{  public String[] ignoreIndexSettings(){  return ignoreIndexSettings;}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.item=null;  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.dynamic_broadcast_receiver_bt:    Intent intent=new Intent(DynamicReceiver.INTENT_ACTION);  intent.putExtra(DynamicReceiver.DYNAMIC_MESSAGE,UUID.randomUUID().toString());this.sendBroadcast(intent);break;}}  }
class C{  private void deletedNodeImplementation(final INaviViewNode node){  removeNode(m_mappings.getNode(node));  if (m_graph.getSettings().getLayoutSettings().getAutomaticLayouting() && isCollapsedGroupNode(node)) {    m_graph.doLayout();  }  m_graphInternals.notifyNodeDeleted();}  }
class C{  public OrganizationAlreadyExistsException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.609 -0500",hash_original_method="9EAD5694A977A9D6081FC9F5B163E148",hash_generated_method="ABE289723C8E0EAB8A9BF25C2A487D9F") @SuppressWarnings("unchecked") @Override public boolean equals(Object that){  if (that == this)   return true;  if (that instanceof SipURI) {    final SipURI a=this;    final SipURI b=(SipURI)that;    if (a.isSecure() ^ b.isSecure())     return false;    if (a.getUser() == null ^ b.getUser() == null)     return false;    if (a.getUserPassword() == null ^ b.getUserPassword() == null)     return false;    if (a.getUser() != null && !RFC2396UrlDecoder.decode(a.getUser()).equals(RFC2396UrlDecoder.decode(b.getUser())))     return false;    if (a.getUserPassword() != null && !RFC2396UrlDecoder.decode(a.getUserPassword()).equals(RFC2396UrlDecoder.decode(b.getUserPassword())))     return false;    if (a.getHost() == null ^ b.getHost() == null)     return false;    if (a.getHost() != null && !a.getHost().equalsIgnoreCase(b.getHost()))     return false;    if (a.getPort() != b.getPort())     return false;    for (Iterator i=a.getParameterNames(); i.hasNext(); ) {      String pname=(String)i.next();      String p1=a.getParameter(pname);      String p2=b.getParameter(pname);      if (p1 != null && p2 != null && !RFC2396UrlDecoder.decode(p1).equalsIgnoreCase(RFC2396UrlDecoder.decode(p2)))       return false;    }    if (a.getTransportParam() == null ^ b.getTransportParam() == null)     return false;    if (a.getUserParam() == null ^ b.getUserParam() == null)     return false;    if (a.getTTLParam() == -1 ^ b.getTTLParam() == -1)     return false;    if (a.getMethodParam() == null ^ b.getMethodParam() == null)     return false;    if (a.getMAddrParam() == null ^ b.getMAddrParam() == null)     return false;    if (a.getHeaderNames().hasNext() && !b.getHeaderNames().hasNext())     return false;    if (!a.getHeaderNames().hasNext() && b.getHeaderNames().hasNext())     return false;    if (a.getHeaderNames().hasNext() && b.getHeaderNames().hasNext()) {      HeaderFactory headerFactory=null;      try {        headerFactory=SipFactory.getInstance().createHeaderFactory();      } catch (      PeerUnavailableException e) {        Debug.logError("Cannot get the header factory to parse the header of the sip uris to compare",e);        return false;      }      for (Iterator i=a.getHeaderNames(); i.hasNext(); ) {        String hname=(String)i.next();        String h1=a.getHeader(hname);        String h2=b.getHeader(hname);        if (h1 == null && h2 != null)         return false;        if (h2 == null && h1 != null)         return false;        if (h1 == null && h2 == null)         continue;        try {          Header header1=headerFactory.createHeader(hname,RFC2396UrlDecoder.decode(h1));          Header header2=headerFactory.createHeader(hname,RFC2396UrlDecoder.decode(h2));          if (!header1.equals(header2))           return false;        } catch (        ParseException e) {          Debug.logError("Cannot parse one of the header of the sip uris to compare " + a + " "+ b,e);          return false;        }      }    }    return true;  }  return false;}  }
class C{  public FaceletException(String message){  super(message);}  }
class C{  public static boolean classExtends(String name,String superclass){  name=toKey(name);  superclass=toKey(superclass);  if (name.equals(superclass)) {    return true;  }  SuperCache cache=declareClass(name);  if (cache == null) {    return false;  }  cache.flatten();  return cache.parents.contains(superclass);}  }
class C{  public MinusIteration(Iteration<? extends E,X> leftArg,Iteration<? extends E,X> rightArg,boolean distinct){  super(leftArg);  assert rightArg != null;  this.rightArg=rightArg;  this.distinct=distinct;  this.initialized=false;}  }
class C{  public void randomizeOutgoingWeights(){  for (  Neuron neuron : this.getNeuronList()) {    neuron.randomizeFanOut();  }  getParentNetwork().fireSynapsesUpdated(getOutgoingWeights());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void closeConnectionManager() throws InterruptedException {  if (connectionMonitor != null) {    connectionMonitor.shutdown();    connectionMonitor.join();  }}  }
class C{  @SuppressWarnings("ResourceType") public void refreshOrientation(){  if (lastOrientation != display.getRotation()) {    lastStepsCheck=0;    lastOrientation=display.getRotation();    rotation=getRotation(lastOrientation);  }}  }
class C{  @Path("/user") @GET @ApiOperation(value="Get the current User (identified by the AccessToken)") public User readContextUser(@Context HttpServletRequest request){  AppContext userContext=getUserContext(request);  return delegate.readContextUser(userContext);}  }
class C{  public ContextInitializer(){  scannedMetaAnnotations.add(Processor.class);  scannedMetaAnnotations.add(Provider.class);  scannedAnnotations.add(Component.class);  scannedAnnotations.add(Dispose.class);  scannedAnnotations.add(OnEvent.class);  scannedAnnotations.add(OnMessage.class);  addProcessor(new ComponentAnnotationProcessor());  addProcessor(new MetaAnnotationProcessor());  addProcessor(new ProviderAnnotationProcessor());  addProcessor(new InjectAnnotationProcessor());  addProcessor(new InitiateAnnotationProcessor());  addProcessor(new DestroyAnnotationProcessor());  addProcessor(new DisposeAnnotationProcessor());  addProcessor(new EventDispatcher());  addProcessor(new MessageDispatcher());}  }
class C{  public boolean isDefinition(){  final JSGraphQLElementType elementType=(JSGraphQLElementType)getNode().getElementType();  return JSGraphQLElementType.DEFINITION_KIND.equals(elementType.getKind());}  }
class C{  public static double convertMetersToFeet(double meters){  return (meters * METERS_TO_FEET);}  }
class C{  protected void continueOutputProcessingView(boolean doOutput,boolean forceUpdate){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".continueOutputProcessingView");  }  EventBean[] newEvents=null;  EventBean[] oldEvents=null;  Iterator<EventBean> it=this.iterator();  if (it.hasNext()) {    ArrayList<EventBean> snapshot=new ArrayList<EventBean>();    while (it.hasNext()) {      EventBean event=it.next();      snapshot.add(event);    }    newEvents=snapshot.toArray(new EventBean[snapshot.size()]);    oldEvents=null;  }  UniformPair<EventBean[]> newOldEvents=new UniformPair<EventBean[]>(newEvents,oldEvents);  if (doOutput) {    output(forceUpdate,newOldEvents);  }}  }
class C{  protected void init(final String labelText){  setImmediate(true);  addComponent(new LabelBuilder().name(i18n.get(labelText)).buildLabel());}  }
class C{  void abortWithError(String msg,Element e){  reportError(msg,e);  throw new AbortProcessingException();}  }
class C{  private static boolean isAssignable(final Type type,final ParameterizedType toParameterizedType,final Map<TypeVariable<?>,Type> typeVarAssigns){  if (type == null) {    return true;  }  if (toParameterizedType == null) {    return false;  }  if (toParameterizedType.equals(type)) {    return true;  }  final Class<?> toClass=getRawType(toParameterizedType);  final Map<TypeVariable<?>,Type> fromTypeVarAssigns=getTypeArguments(type,toClass,null);  if (fromTypeVarAssigns == null) {    return false;  }  if (fromTypeVarAssigns.isEmpty()) {    return true;  }  final Map<TypeVariable<?>,Type> toTypeVarAssigns=getTypeArguments(toParameterizedType,toClass,typeVarAssigns);  for (  final TypeVariable<?> var : toTypeVarAssigns.keySet()) {    final Type toTypeArg=unrollVariableAssignments(var,toTypeVarAssigns);    final Type fromTypeArg=unrollVariableAssignments(var,fromTypeVarAssigns);    if (fromTypeArg != null && !toTypeArg.equals(fromTypeArg) && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg,toTypeArg,typeVarAssigns))) {      return false;    }  }  return true;}  }
class C{  public int[] order(){  int[] retval={N.order(),D.order()};  return retval;}  }
class C{  public APIErrorResponseException(String message,APIErrorResponse apiResponse){  super(message);  this.apiResponse=apiResponse;}  }
class C{  public synchronized void remove(long now){  removeRateStatistics.update(1,now);  size--;  update(now);}  }
class C{  public SearchIndexEntry(String searchTerm,char entityType,String entityName,int searchScore,int dbId){  this.searchTerm=searchTerm.toLowerCase(Locale.ENGLISH);  this.entityType=entityType;  this.entityName=entityName;  this.searchScore=searchScore;  this.dbId=dbId;}  }
class C{  protected void shift(int cnt){  pos+=cnt;}  }
class C{  public IntersectionDecorator(DrawingCanvas inner,ElementCanvas<E> canvas,Model<E> m){  super(inner);  this.canvas=canvas;  this.model=m;}  }
class C{  protected void shutdown(){  _connectionManager.shutdown();}  }
class C{  private boolean checkBookmarkDB(){  if (Switchboard.getSwitchboard().bookmarksDB != null) {    int added=0;    Iterator<Bookmark> it=Switchboard.getSwitchboard().bookmarksDB.getBookmarksIterator();    if (it != null) {      while (it.hasNext()) {        Bookmark bmk=it.next();        if (bmk.getFoldersString().startsWith("/search")) {          if (bmk.getTimeStamp() >= this.lastInitTime) {            final String query=bmk.getQuery();            if (query != null && !query.isEmpty()) {{                querystack.add(query);                added++;                ConcurrentLog.info(AutoSearch.class.getName(),"add query from Bookmarks: query=" + query);              }            }          }        }      }    }    if (added > 0) {      this.lastInitTime=System.currentTimeMillis();      saveasPropFile();      return true;    }  }  return false;}  }
class C{  public ShapefileLoader(){}  }
class C{  public boolean hasMinutes(){  return super.hasAttribute(MINUTES);}  }
class C{  public Sort(String[] fields){  this(fields,new boolean[fields.length]);  Arrays.fill(m_ascend,true);}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator<String> keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T asType(Map map,Class<T> clazz){  if (!(clazz.isInstance(map)) && clazz.isInterface() && !Traits.isTrait(clazz)) {    return (T)Proxy.newProxyInstance(clazz.getClassLoader(),new Class[]{clazz},new ConvertedMap(map));  }  try {    return asType((Object)map,clazz);  } catch (  GroovyCastException ce) {    try {      return (T)ProxyGenerator.INSTANCE.instantiateAggregateFromBaseClass(map,clazz);    } catch (    GroovyRuntimeException cause) {      throw new GroovyCastException("Error casting map to " + clazz.getName() + ", Reason: "+ cause.getMessage());    }  }}  }
class C{  public static AnalogOutput analogOutput(int port){  return aoRegistrar.fetch(port,AnalogOutput.class,null);}  }
class C{  public static double[] gradient(MultivariateFunction f,double[] x){  double[] result=new double[x.length];  gradient(f,x,result);  return result;}  }
class C{  public Vector2 pow(double power){  return Vector2.pow(this,power);}  }
class C{  public void delete(String key){  root=delete(root,key,0);}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.REACTION_FIRED;}  }
class C{  public DBM(String options[]) throws Exception {  super.setOptions(options);}  }
class C{  public int drawNumberOfChanges(int startingState,int endingState,double time,double ctmcProbability) throws SubordinatedProcess.Exception {  return drawNumberOfChanges(startingState,endingState,time,ctmcProbability,MathUtils.nextDouble());}  }
class C{  public void testFileTruncationAndRepair() throws Exception {  LogFile tf=LogHelper.createLogFile("testFileTruncationAndRepair.dat",5);  byte[] testBytes="test bytes".getBytes();  LogRecord lastGoodRecord=null;  for (int i=0; i < 10; i++) {    lastGoodRecord=new LogRecord(tf.getFile(),-1,testBytes,LogRecord.CRC_TYPE_NONE,0);    tf.writeRecord(lastGoodRecord,10000);  }  long lastRecordOffset=tf.getOffset();  byte[] lastBytes="last bytes".getBytes();  LogRecord recordToTruncate=new LogRecord(tf.getFile(),lastRecordOffset,lastBytes,LogRecord.CRC_TYPE_NONE,0);  tf.writeRecord(recordToTruncate,10000);  tf.seekOffset(lastRecordOffset);  LogRecord lastRecord=tf.readRecord(0);  assertEquals("Last record matches orginal input record",recordToTruncate,lastRecord);  assertFalse("Last record different from previous record",lastRecord.equals(lastGoodRecord));  tf.setLength(lastRecordOffset + 8);  tf.seekOffset(lastRecordOffset);  lastRecord=tf.readRecord(0);  assertTrue("Record truncated in the middle of byte array",lastRecord.isTruncated());  tf.setLength(lastRecordOffset + 2);  tf.seekOffset(lastRecordOffset);  lastRecord=tf.readRecord(0);  assertTrue("Record truncated in the middle of length",lastRecord.isTruncated());  tf.setLength(lastRecordOffset);  tf.seekOffset(lastRecordOffset);  lastRecord=tf.readRecord(0);  assertTrue("Record is empty",lastRecord.isEmpty());  tf.close();}  }
class C{  public static Connection newInstance(JdbcRepository database,SmartDataSource dataSource){  InvocationHandler handler=new SmartConnection(database,dataSource);  ClassLoader cl=Connection.class.getClassLoader();  return (Connection)Proxy.newProxyInstance(cl,new Class[]{Connection.class},handler);}  }
class C{  ElementCreatorImpl(MetadataRegistry registry,TransformKey transformKey){  super(registry,transformKey);  MetadataKey<?> key=transformKey.getKey();  Preconditions.checkArgument(key instanceof ElementKey<?,?>,"Key must be to an element.");  this.elementKey=(ElementKey<?,?>)key;}  }
class C{  protected BufferedImage scrubOrGetNewBufferedImage(BufferedImage currentImage,int width,int height){  int cWidth=-1;  int cHeight=-1;  if (currentImage != null) {    cWidth=currentImage.getWidth();    cHeight=currentImage.getHeight();  }  if (currentImage != null && cWidth == width && cHeight == height) {    Graphics2D graphics=(Graphics2D)currentImage.getGraphics();    graphics.setComposite(AlphaComposite.Clear);    graphics.fillRect(0,0,width,height);    graphics.setComposite(AlphaComposite.SrcOver);    return null;  }  return new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);}  }
class C{  public TupleSerializer(){  super();}  }
class C{  private void showPlay(View btn){  btn.setEnabled(true);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)   btn.animate().alpha(1).scaleX(1).scaleY(1); else   btn.setVisibility(View.VISIBLE);}  }
class C{  public void show(){  app.show();}  }
class C{  public ColorDecorator fadeTo(Color to){  this.target=to;  this.setAnimatorFunction(null);  return this;}  }
class C{  @Override public void clear(){  local.clear();}  }
class C{  @Override public synchronized void updateDouble(int columnIndex,double x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setDouble(columnIndex,x);  } else {    this.inserter.setDouble(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.BOOLEAN_PROPERTY_ATTRIBUTE;}  }
class C{  public static int primaryOrder(int order){  return ((order & PRIMARY_ORDER_MASK_) >> PRIMARY_ORDER_SHIFT_) & UNSIGNED_16_BIT_MASK_;}  }
class C{  public String toString(){  return "latitude=" + latitude + ", longitude="+ longitude+ ", altitude="+ altitude;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isURIRoute(){  return uriRoute;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean renameFile(File file,String newFileName){  File newFile=null;  if (file.isDirectory()) {    newFile=new File(file.getParentFile(),newFileName);  } else {    String temp=newFileName + file.getName().substring(file.getName().lastIndexOf('.'));    newFile=new File(file.getParentFile(),temp);  }  if (file.renameTo(newFile)) {    return true;  }  return false;}  }
class C{  public FXGException(int lineNumber,int columnNumber,String message,Throwable cause,Object... arguments){  super(message,cause);  this.arguments=arguments;  message=null;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;}  }
class C{  private double log(double base,double value){  return Math.log(value) / Math.log(base);}  }
class C{  public boolean removeAll(AbstractLongList other){  if (!(other instanceof LongArrayList))   return super.removeAll(other);  if (other.size() == 0) {    return false;  }  int limit=other.size() - 1;  int j=0;  long[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    LongArrayList sortedList=(LongArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public XHTMLPrintable(XHTMLPanel panel){  this.panel=panel;}  }
class C{  public static boolean isFileTypeSupported(AudioFileFormat.Type fileType){  List providers=getAudioFileWriters();  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType)) {      return true;    }  }  return false;}  }
class C{  public GenericSignatureParser(String signature){  int s=signature.indexOf('(');  String sig=signature;  if (s > 0)   sig=sig.substring(s); else   if (s < 0 || sig.indexOf(':') >= 0 || sig.startsWith("(V)"))   throw new IllegalArgumentException("Bad method signature: " + signature);  this.signature=sig;}  }
class C{  public void init(TransportConfig transportConfig,NICUsage nicUsage,DNSMap dnsMap,MessageServiceProxy proxy) throws Exception {  if (m_initialized.get()) {    return;  }  m_shutdown.set(false);  m_transportConfig=transportConfig;  if (transportConfig instanceof ZooKeeperTransportConfig) {    ZooKeeperTransportConfig config=(ZooKeeperTransportConfig)transportConfig;    m_cxnWaitInMillis=config.getCxnWaitInMillis();    m_retrycount=config.getRetrycount();    m_retrywaitTimeInMillis=config.getRetryWaitTimeInMillis();    m_sessionTimeoutInMillis=config.getSessionTimeoutInMillis();    m_numZKnodes=config.getZknodes().size();    m_NettyDiscoverableTopics.addAll(config.getNettyDiscoveryProtocolTopics());    m_requestQueueDepth=config.getRequestQueueDepth();    if (!config.getZknodes().isEmpty()) {      m_connectionStr=prepareConnectString(config.getZknodes());    } else {      throw new Exception("ZooKeeper Servers are NOT configured");    }    m_cnxnBalanceIntervalInMs=config.getCnxnBalanceIntervalInHrs() * 3600 * 1000;    m_pingerNotConnectedThreshold=config.getPingerCnxnLostThreshold();    pingerTask=new PingerTask();    MessageServiceTimer.sInstance().getTimer().scheduleAtFixedRate(pingerTask,(long)config.getPingerIntervalInMins() * 60 * 1000,(long)config.getPingerIntervalInMins() * 60 * 1000);  }  m_requestQueue=new LinkedBlockingQueue<Request>(m_requestQueueDepth);  LOGGER.info("Registering Context -" + m_context);  if (getZKHandle() == null) {    connect();  }  createContext(m_context);  Management.addBean((new StringBuilder()).append("MessageService/Transport/ZooKeeper/context/").append(m_context).append("/stats").toString(),new TransportStatsController(this));  Management.addBean((new StringBuilder()).append("MessageService/Transport/ZooKeeper/context/").append(m_context).append("/registry").toString(),this);  m_serviceProxy=proxy;  m_reqWorker=new Thread(this,"ZKTransportRequestWorker");  m_reqWorker.start();  m_initialized.set(true);}  }
class C{  public void damagePercentageMax(double value){  damage(value / 100 * maxValue);}  }
class C{  public boolean isFeasible(){  return primal() != null;}  }
class C{  public Boolean isCpuHotAddEnabled(){  return cpuHotAddEnabled;}  }
class C{  public Dimension minimumLayoutSize(Container parent){  GridBagLayoutInfo info=getLayoutInfo(parent,MINSIZE);  return getMinSize(parent,info);}  }
class C{  public Intent register(Context context,IntentFilter filter){  isRegistered=true;  return context.registerReceiver(this,filter);}  }
class C{  public boolean isAllowReadOnlyProperties(){  return allowReadOnlyProperties;}  }
class C{  public void subdivide(double t,Segment s0,Segment s1){  Quadradic q0=null, q1=null;  if (s0 instanceof Quadradic)   q0=(Quadradic)s0;  if (s1 instanceof Quadradic)   q1=(Quadradic)s1;  subdivide(t,q0,q1);}  }
class C{  public AnalyticsConfigData(String argTrackingCode){  this(argTrackingCode,VisitorData.newSession(WurstClient.INSTANCE.options.google_analytics.id,WurstClient.INSTANCE.options.google_analytics.first_launch,WurstClient.INSTANCE.options.google_analytics.last_launch,WurstClient.INSTANCE.options.google_analytics.launches));}  }
class C{  public static LuaViewDialog createFullScreen(Context context){  return new LuaViewDialog(context,android.R.style.Theme_Translucent_NoTitleBar_Fullscreen);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:34.006 -0500",hash_original_method="73972E33AC37B98D757DD1126931E451",hash_generated_method="E8E050816EDB154EDCCBEF0FC7375BCD") public synchronized long timeSpentSyncing(){  if (!mLastWasSyncing)   return mTimeSpentSyncing;  final long now=SystemClock.elapsedRealtime();  return mTimeSpentSyncing + (now - mWhenSyncStarted);}  }
class C{  @Transactional protected void _setServiceEnabled(boolean enabled){synchronized (_serviceManagementRecordService) {    ServiceManagementRecord record=_serviceManagementRecordService.findServiceManagementRecord(Service.SCHEDULING);    if (record == null) {      record=new ServiceManagementRecord(_userService.findAdminUser(),Service.SCHEDULING,enabled);    }    record.setEnabled(enabled);    _serviceManagementRecordService.updateServiceManagementRecord(record);  }}  }
class C{  public Props changeSupervisor(ActorSupervisor supervisor){  return new Props(dispatcher,creator,supervisor);}  }
class C{  int padBits(){  int bitIdx=length & 7;  return (bitIdx == 0) ? 0 : 8 - bitIdx;}  }
class C{  protected void mapRecipients(Map<MailAddress,String> recipientsMap) throws MessagingException {  Connection conn=null;  PreparedStatement mappingStmt=null;  Collection<MailAddress> recipients=recipientsMap.keySet();  try {    conn=datasource.getConnection();    mappingStmt=conn.prepareStatement(query);    for (    MailAddress recipient : recipients) {      ResultSet mappingRS=null;      try {        mappingStmt.setString(1,recipient.getLocalPart());        mappingStmt.setString(2,recipient.getDomain());        mappingStmt.setString(3,recipient.getDomain());        mappingRS=mappingStmt.executeQuery();        if (mappingRS.next()) {          String targetString=mappingRS.getString(1);          recipientsMap.put(recipient,targetString);        }      }  finally {        theJDBCUtil.closeJDBCResultSet(mappingRS);      }    }  } catch (  SQLException sqle) {    throw new MessagingException("Error accessing database",sqle);  } finally {    theJDBCUtil.closeJDBCStatement(mappingStmt);    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  private void checkAndPrepareConstraint(final ChangeBoundsRequest request,final Rectangle rect){  GraphicalEditPart editPart=null;  for (  Object ep : request.getEditParts()) {    if (editPart == null && ep instanceof GraphicalEditPart) {      editPart=(GraphicalEditPart)ep;      editPart.getFigure().translateToRelative(rect);    }  }  if (rect.width / rect.height < 1) {    if ((request.getResizeDirection() & PositionConstants.WEST) != 0) {      rect.x+=rect.width - thickness;    }    rect.width=thickness;  } else {    if ((request.getResizeDirection() & PositionConstants.NORTH) != 0) {      rect.y+=rect.height - thickness;    }    rect.height=thickness;  }  if (editPart != null) {    editPart.getFigure().translateToAbsolute(rect);  }}  }
class C{  public void zoomAndPan(boolean magnify){}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.KEY_DEFINITION___KEY_1:    return ((InternalEList<?>)getKey_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator){  float density;  if (keys.length == 0) {    density=0;  } else {    density=(float)keys.length / (keys[keys.length - 1] - keys[0] + 1);  }  tableSwitch(keys,generator,density >= 0.5f);}  }
class C{  public MonitorStatusChangeEvent(MonitoredVm vm,List inserted,List removed){  super(vm);  this.inserted=inserted;  this.removed=removed;}  }
class C{  public T caseAnnotableElement(AnnotableElement object){  return null;}  }
class C{  public static void show(final Window parent,final INaviCodeNode node) throws InternalTranslationException {  final ReilGraph graph=CNodeFunctions.copyReilCode(parent,node);  final String title=String.format("REIL code of %s",node.getAddress().toHexString());  final String text=reilGraphToText(graph);  final CReilInstructionDialog dialog=new CReilInstructionDialog(parent,title,text);  GuiHelper.centerChildToParent(parent,dialog,true);  dialog.setVisible(true);}  }
class C{  public HierarchyWrapperOperation createSubOperation(){  return this;}  }
class C{  public int start(int group){  if (first < 0)   throw new IllegalStateException("No match available");  if (group < 0 || group > groupCount())   throw new IndexOutOfBoundsException("No group " + group);  return groups[group * 2];}  }
class C{  @Override public void run(){  amIActive=true;  String inputWatershedFile;  int row, col;  int i;  int topRow, bottomRow, leftCol, rightCol;  float progress;  double increment;  double rowYCoord, colXCoord;  double[][] geometry;  BoundingBox box;  int numPoints, numParts, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputWatershedFile=args[1];  outputHeader=args[2];  increment=Double.parseDouble(args[3]);  if ((demHeader == null) || (inputWatershedFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(DEM.getPreferredPalette());    if (inputWatershedFile.toLowerCase().endsWith(".dep")) {      watershedHeader=inputWatershedFile;      watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberColumns() != cols || watershed.getNumberRows() != rows) {        showFeedback("The input files must have the same dimensions.");        return;      }      double[] demData;      boolean isBorderingCell;      double w;      int[] dX={1,1,1,0,-1,-1,-1,0};      int[] dY={-1,0,1,1,1,0,-1,-1};      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          w=watershed.getValue(row,col);          if (w > 0 && demData[col] != noData) {            isBorderingCell=false;            for (i=0; i < 8; i++) {              if (watershed.getValue(row + dY[i],col + dX[i]) != w) {                isBorderingCell=true;                break;              }            }            if (isBorderingCell) {              output.setValue(row,col,demData[col] + increment);            }          } else {            output.setValue(row,col,demData[col]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else     if (inputWatershedFile.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputWatershedFile);      if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {        showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");        return;      }      ArrayList<RecordInfo> myList=new ArrayList<RecordInfo>();      for (      ShapeFileRecord record : input.records) {        i=record.getRecordNumber();        box=getBoundingBoxFromShapefileRecord(record);        myList.add(new RecordInfo(box.getMaxY(),i));      }      Collections.sort(myList);      long heapSize=Runtime.getRuntime().totalMemory();      int flushSize=(int)(heapSize / 32);      int j, numCellsToWrite;      PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<RowPriorityGridCell>(flushSize);      RowPriorityGridCell cell;      int numRecords=input.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      progress=0;      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=input.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][0] < box.getMinX()) {              box.setMinX(geometry[i][0]);            }            if (geometry[i][0] > box.getMaxX()) {              box.setMaxX(geometry[i][0]);            }            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=DEM.getRowFromYCoordinate(box.getMaxY());          bottomRow=DEM.getRowFromYCoordinate(box.getMinY());          leftCol=DEM.getColumnFromXCoordinate(box.getMinX());          rightCol=DEM.getColumnFromXCoordinate(box.getMaxX());          for (row=topRow; row <= bottomRow; row++) {            rowYCoord=DEM.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                  col=DEM.getColumnFromXCoordinate(xPrime);                  pq.add(new RowPriorityGridCell(row,col,increment));                }              }            }          }          for (col=leftCol; col <= rightCol; col++) {            colXCoord=DEM.getXCoordinateFromColumn(col);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                if (x1 != x2) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                  row=DEM.getRowFromYCoordinate(yPrime);                  pq.add(new RowPriorityGridCell(row,col,increment));                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,DEM.getValue(cell.row,cell.col) + increment);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress((int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress((int)progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        output.setValue(cell.row,cell.col,DEM.getValue(cell.row,cell.col) + increment);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress((int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      output.flush();      double[] demData;      double[] outputData;      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        outputData=output.getRowValues(row);        for (col=0; col < cols; col++) {          if (outputData[col] == noData) {            output.setValue(row,col,demData[col]);          }        }      }      output.flush();    } else {      showFeedback("The input watershed file must be either a Whitebox raster or shapefile.");      return;    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean unsetOrdering(Object first,Object second){  DigraphNode firstPONode=(DigraphNode)poNodes.get(first);  DigraphNode secondPONode=(DigraphNode)poNodes.get(second);  return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode);}  }
class C{  private String createQuery(){  StringBuffer sb=new StringBuffer();  String s=serNoField.getText();  if (s != null && s.length() > 0) {    sb.append(" AND asi.SerNo");    if (s.indexOf('%') == -1 && s.indexOf('_') == 1)     sb.append("="); else     sb.append(" LIKE ");    sb.append(DB.TO_STRING(s));  }  s=lotField.getText();  if (s != null && s.length() > 0) {    sb.append(" AND asi.Lot");    if (s.indexOf('%') == -1 && s.indexOf('_') == 1)     sb.append("="); else     sb.append(" LIKE ");    sb.append(DB.TO_STRING(s));  }  KeyNamePair pp=(KeyNamePair)lotSelection.getSelectedItem();  if (pp != null && pp.getKey() != -1) {    int ID=pp.getKey();    sb.append(" AND asi.M_Lot_ID=").append(ID);  }  Timestamp ts=(Timestamp)guaranteeDateField.getValue();  if (ts != null) {    sb.append(" AND TRUNC(asi.GuaranteeDate, 'DD')");    int index=guaranteeDateSelection.getSelectedIndex();    if (index == 0)     sb.append("<"); else     if (index == 1)     sb.append("="); else     sb.append(">");    sb.append(DB.TO_DATE(ts,true));  }  for (int i=0; i < m_instanceEditors.size(); i++) {    StringBuffer iAttr=new StringBuffer();    Component c=(Component)m_instanceEditors.get(i);    Component cTo=(Component)m_instanceEditorsTo.get(i);    int M_Attribute_ID=Integer.parseInt(c.getName());    if (c instanceof VComboBox) {      VComboBox field=(VComboBox)c;      pp=(KeyNamePair)field.getSelectedItem();      if (pp != null && pp.getKey() != -1) {        iAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND M_AttributeValue_ID=").append(pp.getKey());      }    } else     if (c instanceof VNumber) {      VNumber field=(VNumber)c;      BigDecimal value=(BigDecimal)field.getValue();      VNumber fieldTo=(VNumber)cTo;      BigDecimal valueTo=(BigDecimal)fieldTo.getValue();      if (value != null || valueTo != null) {        iAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND ValueNumber");        if (value != null && valueTo == null)         iAttr.append("=").append(value); else         if (value == null && valueTo != null)         iAttr.append("<=").append(valueTo); else         if (value != null && valueTo != null)         iAttr.append(" BETWEEN ").append(value).append(" AND ").append(valueTo);      }    } else {      VString field=(VString)c;      String value=field.getText();      if (value != null && value.length() > 0) {        iAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND Value");        if (value.indexOf('%') == -1 && value.indexOf('_') == -1)         iAttr.append("="); else         iAttr.append(" LIKE ");        iAttr.append(DB.TO_STRING(value));      }    }    if (iAttr.length() > 0)     sb.append(" AND asi.M_AttributeSetInstance_ID IN " + "(SELECT M_AttributeSetInstance_ID FROM M_AttributeInstance " + "WHERE ").append(iAttr).append(")");  }  if (sb.length() > 0) {    sb.insert(0," AND EXISTS (SELECT * FROM M_Storage s" + " INNER JOIN M_AttributeSetInstance asi ON (s.M_AttributeSetInstance_ID=asi.M_AttributeSetInstance_ID) " + "WHERE s.M_Product_ID=p.M_Product_ID");    sb.append(")");  }  for (int i=0; i < m_productEditors.size(); i++) {    StringBuffer pAttr=new StringBuffer();    Component c=(Component)m_productEditors.get(i);    Component cTo=(Component)m_productEditorsTo.get(i);    int M_Attribute_ID=Integer.parseInt(c.getName());    if (c instanceof VComboBox) {      VComboBox field=(VComboBox)c;      pp=(KeyNamePair)field.getSelectedItem();      if (pp != null && pp.getKey() != -1) {        pAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND M_AttributeValue_ID=").append(pp.getKey());      }    } else     if (c instanceof VNumber) {      VNumber field=(VNumber)c;      BigDecimal value=(BigDecimal)field.getValue();      VNumber fieldTo=(VNumber)cTo;      BigDecimal valueTo=(BigDecimal)fieldTo.getValue();      if (value != null || valueTo != null) {        pAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND ValueNumber");        if (value != null && valueTo == null)         pAttr.append("=").append(value); else         if (value == null && valueTo != null)         pAttr.append("<=").append(valueTo); else         if (value != null && valueTo != null)         pAttr.append(" BETWEEN ").append(value).append(" AND ").append(valueTo);      }    } else {      VString field=(VString)c;      String value=field.getText();      if (value != null && value.length() > 0) {        pAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND Value");        if (value.indexOf('%') == -1 && value.indexOf('_') == -1)         pAttr.append("="); else         pAttr.append(" LIKE ");        pAttr.append(DB.TO_STRING(value));      }    }    if (pAttr.length() > 0)     sb.append(" AND p.M_AttributeSetInstance_ID IN " + "(SELECT M_AttributeSetInstance_ID " + "FROM M_AttributeInstance WHERE ").append(pAttr).append(")");  }  m_query=null;  if (sb.length() > 0)   m_query=sb.toString();  log.config(m_query);  return m_query;}  }
class C{  public static void main(String[] argv){  runClassifier(new J48(),argv);}  }
class C{  public void selectOperators(List<Operator> ops){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public PrimordialLogSystem(){}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  this.listeners.add(listener);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Writer(int size){  output=new ByteArrayOutputStream(size);  numOfEntries=0;  output.write(0);  output.write(0);}  }
class C{  @LargeTest public void testPerformanceThumbnailVideoItem() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";  final int videoItemStartTime=0;  final int videoItemEndTime=20000;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String[] loggingInfo=new String[1];  final MediaVideoItem mediaVideoItem=new MediaVideoItem(mVideoEditor,"m1",videoItemFileName,renderingMode);  mediaVideoItem.setExtractBoundaries(videoItemStartTime,videoItemEndTime);  int timeTaken=0;  long beginTime=SystemClock.uptimeMillis();  for (int i=0; i < NUM_OF_ITERATIONS; i++) {    mediaVideoItem.getThumbnail(mediaVideoItem.getWidth() / 2,mediaVideoItem.getHeight() / 2,i);  }  timeTaken=calculateTimeTaken(beginTime,NUM_OF_ITERATIONS);  loggingInfo[0]="Duration taken to get Video Thumbnails :" + timeTaken;  writeTimingInfo("testPerformanceThumbnailVideoItem (in mSec)",loggingInfo);}  }
class C{  public final int size(){  return mItems.size();}  }
class C{  static boolean pathIsWindows(String path){  if (path != null && path.length() > 1) {    return (Character.isLetter(path.charAt(0)) && path.charAt(1) == ':') || (path.startsWith("//") || path.startsWith("\\\\"));  }  return false;}  }
class C{  public ParameterTypeText(String key,String description,TextType type,String defaultValue){  super(key,description,defaultValue);  setTextType(type);}  }
class C{  private StringUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  private static void reDrawLinks(){  removeHOVs();  reDrawStreetcarROWs();}  }
class C{  public KeywordObject(){  super();}  }
class C{  public Vector3f negateLocal(){  x=-x;  y=-y;  z=-z;  return this;}  }
class C{  private void launchReport(MPrintFormat pf){  int Record_ID=0;  if (m_query.getRestrictionCount() == 1 && m_query.getCode(0) instanceof Integer)   Record_ID=((Integer)m_query.getCode(0)).intValue();  if (m_whereExtended != null && m_whereExtended.length() > 0 && m_query != null)   m_query.addRestriction(Env.parseContext(Env.getCtx(),WindowNo,m_whereExtended,false));  PrintInfo info=new PrintInfo(pf.getName(),pf.getAD_Table_ID(),Record_ID);  info.setDescription(m_query.getInfo());  if (pf != null && pf.getJasperProcess_ID() > 0) {    ProcessInfo pi=new ProcessInfo("",pf.getJasperProcess_ID(),pf.getAD_Table_ID(),Record_ID);    WProcessCtl.process(null,WindowNo,pi,null);  } else {    ReportEngine re=new ReportEngine(Env.getCtx(),pf,m_query,info);    re.setWhereExtended(m_whereExtended);    ReportCtl.preview(re);  }}  }
class C{  protected void stopEndOfProgrammingTimer(){  if (mPowerTimer != null) {    mPowerTimer.stop();  }}  }
class C{  public MemoryCacheImageOutputStream(OutputStream stream){  if (stream == null) {    throw new IllegalArgumentException("stream == null!");  }  this.stream=stream;}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public void toInternal(Coordinate external,Coordinate internal){  if (isFloating()) {    internal.x=external.x;    internal.y=external.y;  } else {    internal.x=makePrecise(external.x);    internal.y=makePrecise(external.y);  }  internal.z=external.z;}  }
class C{  private int hash2(int hash){  return (7 - hash) & (7 - 1);}  }
class C{  public void updateAtts(){  Dimension d=panel.size();  Insets in=panel.insets();  panel.atts.put("width",Integer.toString(d.width - (in.left + in.right)));  panel.atts.put("height",Integer.toString(d.height - (in.top + in.bottom)));}  }
class C{  public ObjectWriter withType(JavaType rootType){  if (rootType == _rootType)   return this;  return new ObjectWriter(this,_config,rootType,_prettyPrinter,_schema);}  }
class C{  public static boolean testAarLine(Vector2fc min,Vector2fc max,float a,float b,float c){  return testAarLine(min.x(),min.y(),max.x(),max.y(),a,b,c);}  }
class C{  public PluginBag(Class<T> klass,SolrCore core,boolean needThreadSafety){  this.core=core;  this.klass=klass;  this.registry=needThreadSafety ? new ConcurrentHashMap<>() : new HashMap<>();  this.immutableRegistry=Collections.unmodifiableMap(registry);  meta=SolrConfig.classVsSolrPluginInfo.get(klass.getName());  if (meta == null) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown Plugin : " + klass.getName());  }}  }
class C{  public String format(float val){  DecimalFormat df=getFloatFormat();  if (df != null) {    return df.format(val);  }  return Float.toString(val);}  }
class C{  protected void assertCollectionExpectations(String collectionName) throws Exception {  CloudSolrClient client=this.createCloudClient(null);  try {    client.connect();    ClusterState clusterState=client.getZkStateReader().getClusterState();    assertTrue("Could not find new collection " + collectionName,clusterState.hasCollection(collectionName));    Map<String,Slice> shards=clusterState.getCollection(collectionName).getSlicesMap();    assertEquals("Found new collection " + collectionName + ", but mismatch on number of shards.",shardCount,shards.size());    int totalShards=0;    for (    String shardName : shards.keySet()) {      totalShards+=shards.get(shardName).getReplicas().size();    }    int expectedTotalShards=shardCount * replicationFactor;    assertEquals("Found new collection " + collectionName + " with correct number of shards, but mismatch on number "+ "of shards.",expectedTotalShards,totalShards);  }  finally {    client.close();  }}  }
class C{  public boolean isLowFarOut(){  return this.lowFarOut;}  }
class C{  public void testClearBitPositiveInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=20;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-31,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean hasThumbnails(){  return thumbnails != null && thumbnails.size() > 0;}  }
class C{  public void closeAllOpenDatabases(){  while (!dbrmap.isEmpty()) {    String dbname=dbrmap.keySet().iterator().next();    this.closeDatabaseNow(dbname);    DBRunner r=dbrmap.get(dbname);    try {      r.q.put(new DBQuery());    } catch (    Exception ex) {      Log.e(LOG_TAG,"couldn't stop db thread for db: " + dbname,ex);    }    dbrmap.remove(dbname);  }}  }
class C{  public AttributeTypeAndValue(ObjectIdentifier oid,AttributeValue value) throws IOException {  this.oid=oid;  this.value=value;}  }
class C{  public static int extractTopologyTimeout(TopologyAPI.Topology topology){  for (  TopologyAPI.Config.KeyValue keyValue : topology.getTopologyConfig().getKvsList()) {    if (keyValue.getKey().equals("topology.message.timeout.secs")) {      return Integer.parseInt(keyValue.getValue());    }  }  throw new IllegalArgumentException("topology.message.timeout.secs does not exist");}  }
class C{  public GatewayTest(String name){  super(name);}  }
class C{  public static void h_block_filter(MpegEncContext s,int[] dst_base,int dst_offset,int w,int h,int stride,int is_luma){  int b_x, b_y, mvx_stride, mvy_stride;  int[] cm_base=H264DSPContext.ff_cropTbl;  int cm_offset=H264DSPContext.MAX_NEG_CROP;  int[] param=new int[2];  set_mv_strides(s,param);  mvx_stride=param[0];  mvy_stride=param[1];  mvx_stride>>=is_luma;  mvy_stride*=mvx_stride;  for (b_y=0; b_y < h; b_y++) {    for (b_x=0; b_x < w - 1; b_x++) {      int y;      int left_status=s.error_status_table[(b_x >> is_luma) + (b_y >> is_luma) * s.mb_stride];      int right_status=s.error_status_table[((b_x + 1) >> is_luma) + (b_y >> is_luma) * s.mb_stride];      int left_intra=7 & (int)(s.current_picture.mb_type_base[s.current_picture.mb_type_offset + (b_x >> is_luma) + (b_y >> is_luma) * s.mb_stride]);      int right_intra=7 & (int)(s.current_picture.mb_type_base[s.current_picture.mb_type_offset + ((b_x + 1) >> is_luma) + (b_y >> is_luma) * s.mb_stride]);      int left_damage=left_status & (MpegEncContext.DC_ERROR | MpegEncContext.AC_ERROR | MpegEncContext.MV_ERROR);      int right_damage=right_status & (MpegEncContext.DC_ERROR | MpegEncContext.AC_ERROR | MpegEncContext.MV_ERROR);      int offset=b_x * 8 + b_y * stride * 8;      int[] left_mv=s.current_picture.motion_val_base[0][s.current_picture.motion_val_offset[0] + mvy_stride * b_y + mvx_stride * b_x];      int[] right_mv=s.current_picture.motion_val_base[0][s.current_picture.motion_val_offset[0] + mvy_stride * b_y + mvx_stride * (b_x + 1)];      if (!(left_damage != 0 || right_damage != 0))       continue;      if ((0 == left_intra) && (0 == right_intra) && Math.abs(left_mv[0] - right_mv[0]) + Math.abs(left_mv[1] + right_mv[1]) < 2)       continue;      for (y=0; y < 8; y++) {        int a, b, c, d;        a=dst_base[dst_offset + offset + 7+ y * stride] - dst_base[dst_offset + offset + 6+ y * stride];        b=dst_base[dst_offset + offset + 8+ y * stride] - dst_base[dst_offset + offset + 7+ y * stride];        c=dst_base[dst_offset + offset + 9+ y * stride] - dst_base[dst_offset + offset + 8+ y * stride];        d=Math.abs(b) - ((Math.abs(a) + Math.abs(c) + 1) >> 1);        d=Math.max(d,0);        if (b < 0)         d=-d;        if (d == 0)         continue;        if (!(left_damage != 0 && right_damage != 0))         d=d * 16 / 9;        if (left_damage != 0) {          dst_base[dst_offset + offset + 7+ y * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + 7+ y * stride] + ((d * 7) >> 4)];          dst_base[dst_offset + offset + 6+ y * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + 6+ y * stride] + ((d * 5) >> 4)];          dst_base[dst_offset + offset + 5+ y * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + 5+ y * stride] + ((d * 3) >> 4)];          dst_base[dst_offset + offset + 4+ y * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + 4+ y * stride] + ((d * 1) >> 4)];        }        if (right_damage != 0) {          dst_base[dst_offset + offset + 8+ y * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + 8+ y * stride] - ((d * 7) >> 4)];          dst_base[dst_offset + offset + 9+ y * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + 9+ y * stride] - ((d * 5) >> 4)];          dst_base[dst_offset + offset + 10+ y * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + 10+ y * stride] - ((d * 3) >> 4)];          dst_base[dst_offset + offset + 11+ y * stride]=cm_base[cm_offset + dst_base[dst_offset + offset + 11+ y * stride] - ((d * 1) >> 4)];        }      }    }  }}  }
class C{  @Interruptible public static int pickAllocator(RVMType type,RVMMethod method){  if (traceAllocator) {    VM.sysWrite("allocator for ");    VM.sysWrite(type.getDescriptor());    VM.sysWrite(": ");  }  if (method != null) {    RVMClass cls=method.getDeclaringClass();    byte[] clsBA=cls.getDescriptor().toByteArray();    if (Selected.Constraints.get().withGCspy()) {      if (isPrefix("Lorg/mmtk/vm/gcspy/",clsBA) || isPrefix("[Lorg/mmtk/vm/gcspy/",clsBA)) {        if (traceAllocator) {          VM.sysWriteln("GCSPY");        }        return Plan.ALLOC_GCSPY;      }    }    if (isPrefix("Lorg/jikesrvm/mm/mmtk/ReferenceProcessor",clsBA)) {      if (traceAllocator) {        VM.sysWriteln("DEFAULT");      }      return Plan.ALLOC_DEFAULT;    }    if (isPrefix("Lorg/mmtk/",clsBA) || isPrefix("Lorg/jikesrvm/mm/",clsBA)) {      if (traceAllocator) {        VM.sysWriteln("NONMOVING");      }      return Plan.ALLOC_NON_MOVING;    }    if (method.isNonMovingAllocation()) {      return Plan.ALLOC_NON_MOVING;    }  }  if (traceAllocator) {    VM.sysWriteln(type.getMMAllocator());  }  return type.getMMAllocator();}  }
class C{  @ZeppelinApi public void run(String id,InterpreterContext context){  if (id.equals(context.getParagraphId())) {    throw new InterpreterException("Can not run current Paragraph");  }  for (  InterpreterContextRunner r : context.getRunners()) {    if (id.equals(r.getParagraphId())) {      r.run();      return;    }  }  throw new InterpreterException("Paragraph " + id + " not found");}  }
class C{  public PropertyPermissionCollection(){  perms=new HashMap<>(32);  all_allowed=false;}  }
class C{  public String encode(String src){  StringBuilder dest=new StringBuilder();  for (int i=0; i < src.length(); i++) {    dest.append(src.charAt(i));    int cnt=1;    while (i + 1 < src.length() && src.charAt(i) == src.charAt(i + 1)) {      i++;      cnt++;    }    dest.append(cnt);  }  return dest.toString();}  }
class C{  @CheckReturnValue public <T>Subject1<T> as(Function4<A,B,C,D,T> mapping){  return new MappingTheoryBuilder<>(this.state,combine(),null,null,null);}  }
class C{  public void open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  @Override public int hashCode(){  if (this.getNetwork() == null) {    return 0;  }  return this.getNetwork().hashCode();}  }
class C{  public static Soap createSoapMessage(byte[] data) throws Exception {  return new SoapParserImpl().parse(new ByteArrayInputStream(data));}  }
class C{  public HonoClient(final Vertx vertx,final HonoClientConfigProperties config){  this(HonoClientBuilder.newClient(config).vertx(vertx));}  }
class C{  public static void dumpMifareClassic1KCard(MfReaderWriter reader,MfCard card,List<String> keys) throws CardException {  for (int sectorIndex=0; sectorIndex < MIFARE_1K_SECTOR_COUNT; sectorIndex++) {    for (int blockIndex=0; blockIndex < MIFARE_1K_PER_SECTOR_BLOCK_COUNT; blockIndex++) {      dumpMifareClassic1KBlock(reader,card,sectorIndex,blockIndex,keys);    }  }}  }
class C{  private void serializeAttribute(KXmlSerializer serializer,String attrName,String attrValue) throws IOException {  attrValue=attrValue == null ? "" : attrValue;  serializer.attribute(ns,attrName,attrValue);}  }
class C{  public int gameComplete(){  for (int i=0; i < rows; i++) {    boolean same=true;    int playerType=getCellValue(i,0);    for (int j=0; j < columns; j++) {      if ((getCellValue(i,j) == playerType) && (playerType > 0)) {        continue;      } else {        same=false;        break;      }    }    if (same == true) {      return playerType;    }  }  for (int j=0; j < columns; j++) {    boolean same=true;    int playerType=getCellValue(0,j);    for (int i=0; i < rows; i++) {      if ((getCellValue(i,j) == playerType) && (playerType > 0)) {        continue;      } else {        same=false;        break;      }    }    if (same == true) {      return playerType;    }  }  boolean same=true;  int playerType=getCellValue(0,0);  for (int i=0; i < rows; i++) {    if ((getCellValue(i,i) == playerType) && (playerType > 0)) {      continue;    } else {      same=false;      break;    }  }  if (same) {    return playerType;  }  same=true;  int j=0;  playerType=getCellValue(rows - 1,j);  for (int i=rows - 1; i >= 0; i--) {    if ((getCellValue(i,j) == playerType) && (playerType > 0)) {      j++;      continue;    } else {      same=false;      break;    }  }  if (same) {    return playerType;  }  boolean full=true;  for (int i=0; i < rows; i++) {    for (j=0; j < columns; j++) {      if (getCellValue(i,j) == 0) {        full=false;        break;      }    }  }  if (full) {    return DRAW;  }  return 0;}  }
class C{  public boolean verify(PublicKey key,Provider sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  getSigningTime();  return doVerify(key,sigProvider);}  }
class C{  public JCArrayAccess Indexed(Symbol v,JCExpression index){  JCArrayAccess tree=new JCArrayAccess(QualIdent(v),index);  tree.type=((ArrayType)v.type).elemtype;  return tree;}  }
class C{  public HeliumPackageSearchResult(String registry,HeliumPackage pkg){  this.registry=registry;  this.pkg=pkg;}  }
class C{  public V remove(Object key){  Object k=maskNull(key);  int h=hash(k);  Entry<K,V>[] tab=getTable();  int i=indexFor(h,tab.length);  Entry<K,V> prev=tab[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (h == e.hash && eq(k,e.get())) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return e.value;    }    prev=e;    e=next;  }  return null;}  }
class C{  public String toString(){  java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("NTSidUserPrincipal.name","sun.security.util.AuthResources"));  Object[] source={getName()};  return form.format(source);}  }
class C{  public void testEquals() throws Exception {  AddressAttribute target=null;  boolean expectedReturn=false;  boolean actualReturn=addressAttribute.equals(target);  assertEquals("AddressAttribute.equals() failed against a null target.",expectedReturn,actualReturn);  target=new MappedAddressAttribute();  char port=(char)(MsgFixture.ADDRESS_ATTRIBUTE_PORT + 1);  target.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS,port,Transport.UDP));  addressAttribute.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP));  expectedReturn=false;  actualReturn=addressAttribute.equals(target);  assertEquals("AddressAttribute.equals() failed against a different target.",expectedReturn,actualReturn);  target.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP));  expectedReturn=true;  actualReturn=addressAttribute.equals(target);  assertEquals("AddressAttribute.equals() failed against an equal target.",expectedReturn,actualReturn);  target.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS_V6,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP));  addressAttribute.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS_V6,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP));  expectedReturn=true;  actualReturn=addressAttribute.equals(target);  assertEquals("AddressAttribute.equals() failed for IPv6 addresses.",expectedReturn,actualReturn);}  }
class C{  @AntDoc("A module to document.") public void addConfiguredModule(Module module){  this.moduleset.addConfiguredModule(module);}  }
class C{  @BeforeClass public static void before(){  MatcherAssert.assertThat("default charset during testing must be UTF-8",Charset.defaultCharset().name(),Matchers.equalTo("UTF-8"));}  }
class C{  public double optDouble(int index){  return optDouble(index,Double.NaN);}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  if (-1 == m_stackFrame) {    return returnNextNode(m_firstWalker.nextNode());  } else {    VariableStack vars=m_execContext.getVarStack();    int savedStart=vars.getStackFrame();    vars.setStackFrame(m_stackFrame);    int n=returnNextNode(m_firstWalker.nextNode());    vars.setStackFrame(savedStart);    return n;  }}  }
class C{  @Override public ISBNParsedResult parse(Result result){  BarcodeFormat format=result.getBarcodeFormat();  if (format != BarcodeFormat.EAN_13) {    return null;  }  String rawText=getMassagedText(result);  int length=rawText.length();  if (length != 13) {    return null;  }  if (!rawText.startsWith("978") && !rawText.startsWith("979")) {    return null;  }  return new ISBNParsedResult(rawText);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public void configure(){  log.debug("configure called");  Z21TrafficController packets=new Z21TrafficController();  packets.connectPort(this);  this.getSystemConnectionMemo().setTrafficController(packets);  sourceThread=new Thread(this);  sourceThread.start();  this.getSystemConnectionMemo().configureManagers();}  }
class C{  public boolean isA_Accumulated_Depr_Adjust(){  Object oo=get_Value(COLUMNNAME_A_Accumulated_Depr_Adjust);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int writeToMessage(byte[] byteArray){  return writeToMessage(byteArray,0,byteArray.length);}  }
class C{  @SuppressWarnings("unchecked") private void loadCacheFromDisk(){  File file=fileResolver.getClassHashCacheFile().getAbsoluteFile();  if (file.exists()) {    FileInputStream fileInputStream=null;    try {      fileInputStream=new FileInputStream(file);      Input input=new Input(fileInputStream);      Map<String,Collection<String>> fqnWithHashes=(Map<String,Collection<String>>)serializationManager.deserialize(input);      for (      Entry<String,Collection<String>> entry : fqnWithHashes.entrySet()) {        ClassEntry classEntry=getOrCreateEntry(entry.getKey());        for (        String hash : entry.getValue()) {          classEntry.addHash(hash);        }      }    } catch (    Throwable t) {      log.warn("Unable to load sending classes cache from disk.",t);    } finally {      if (null != fileInputStream) {        try {          fileInputStream.close();        } catch (        IOException e) {        }      }    }  }}  }
class C{  public static List<IpPermission> buildRules(List<Allow> allowRules){  ArrayList<IpPermission> awsRules=new ArrayList<>();  for (  Allow rule : allowRules) {    for (    String port : rule.ports) {      int fromPort;      int toPort;      if (port.contains("-")) {        String[] ports=port.split("-");        fromPort=Integer.parseInt(ports[0]);        toPort=Integer.parseInt(ports[1]);      } else {        fromPort=Integer.parseInt(port);        toPort=fromPort;      }      awsRules.add(createRule(fromPort,toPort,rule.ipRange,rule.protocol));    }  }  return awsRules;}  }
class C{  public DefaultTableXYDataset(){  this(false);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a binary string: ");  String binaryString=input.next();  System.out.println("The decimal equivalent of " + binaryString + " is "+ bin2Dec(binaryString));}  }
class C{  public static Observable<Boolean> observeInternetConnectivity(final int intervalInMs,final String host,final int port,final int timeoutInMs){  return observeInternetConnectivity(DEFAULT_INITIAL_PING_INTERVAL_IN_MS,intervalInMs,host,port,timeoutInMs,new DefaultSocketErrorHandler());}  }
class C{  public String globalInfo(){  return "Reads a source that is in arff (attribute relation file format) " + "format. ";}  }
class C{  public final boolean isUpdatingDataStore(){  return m_updateDataStore;}  }
class C{  public static String stripSpecificChars(String toStrip,String whatToStrip){  if ((null == toStrip) || (toStrip.length() == 0)) {    return toStrip;  }  StringBuffer bufferedResult=new StringBuffer("");  int toStripLength=toStrip.length();  for (int i=0; i < toStripLength; i++) {    if (!isValidChar(toStrip.charAt(i),whatToStrip)) {      bufferedResult.append(toStrip.substring(i,i + 1));    }  }  return bufferedResult.toString();}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  mv.visitCodeLength(codeLength);  mv.visitCode();  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}labels[label].line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;mv.visitPreInsn(opcode,offset);switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public static <T>CompletableFuture<T> completedFutureAsync(T result,Executor executor){  CompletableFuture<T> future=new CompletableFuture<>();  executor.execute(null);  return future;}  }
class C{  public final void selectNone(){  select(getCaretPosition(),getCaretPosition());}  }
class C{  public synchronized void println(String s,int _verbosity,int log) throws OutputException {  if (log == NO_LOGS)   return;  println(s,V_VERBOSE,(Log)(logs.elementAt(log)),false,false);}  }
class C{  public static void initRandomCas(JCas aJCas,int aTextSize,int aAnnotationCount,long aSeed){  List<Type> types=new ArrayList<Type>();  types.add(getType(aJCas,Token.class));  types.add(getType(aJCas,Sentence.class));  Random rnd=new Random(aSeed);  for (int n=0; n < 10; n++) {    Type t=types.remove(rnd.nextInt(types.size()));    types.add(t);  }  aJCas.setDocumentText(RandomStringUtils.random(aTextSize));  CAS cas=aJCas.getCas();  for (int n=0; n < aAnnotationCount; n++) {    Type t=types.get(n % types.size());    int length=rnd.nextInt(30);    int begin=rnd.nextInt(aTextSize);    int end=begin + length;    if (end > aTextSize) {      n--;      continue;    }    cas.addFsToIndexes(cas.createAnnotation(t,begin,end));  }}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public void test_min_uses_ORDER_BY_not_LT(){  final BigdataValueFactory f=BigdataValueFactoryImpl.getInstance(getName());  final IVariable<IV> org=Var.var("org");  final IVariable<IV> auth=Var.var("auth");  final IVariable<IV> book=Var.var("book");  final IVariable<IV> lprice=Var.var("lprice");  final IConstant<String> org1=new Constant<String>("org1");  final IConstant<String> org2=new Constant<String>("org2");  final IConstant<String> auth1=new Constant<String>("auth1");  final TermId tid1=new TermId<BigdataValue>(VTE.LITERAL,1);  tid1.setValue(f.createLiteral("auth2"));  final IConstant<IV> auth2=new Constant<IV>(tid1);  final IConstant<String> auth3=new Constant<String>("auth3");  final IConstant<String> book1=new Constant<String>("book1");  final IConstant<String> book2=new Constant<String>("book2");  final IConstant<String> book3=new Constant<String>("book3");  final IConstant<String> book4=new Constant<String>("book4");  final IConstant<XSDNumericIV<BigdataLiteral>> price5=new Constant<XSDNumericIV<BigdataLiteral>>(new XSDNumericIV<BigdataLiteral>(5));  final IConstant<XSDNumericIV<BigdataLiteral>> price7=new Constant<XSDNumericIV<BigdataLiteral>>(new XSDNumericIV<BigdataLiteral>(7));  final IConstant<XSDNumericIV<BigdataLiteral>> price9=new Constant<XSDNumericIV<BigdataLiteral>>(new XSDNumericIV<BigdataLiteral>(9));  final IBindingSet data[]=new IBindingSet[]{new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org1,auth1,book1,price9}),new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org1,auth1,book2,price5}),new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org1,auth2,book3,auth2}),new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org2,auth3,book4,price7})};  price9.get().setValue(f.createLiteral("9",XSD.INT));  price5.get().setValue(f.createLiteral("5",XSD.INT));  price7.get().setValue(f.createLiteral("7",XSD.INT));  final MIN op=new MIN(false,lprice);  assertFalse(op.isDistinct());  assertFalse(op.isWildcard());  op.reset();  for (  IBindingSet bs : data) {    op.get(bs);  }  assertEquals(auth2.get(),op.done());}  }
class C{  public BufferedImage createIcon(String symbolId,AVList params){  if (symbolId == null) {    String msg=Logging.getMessage("nullValue.SymbolCodeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  String path=this.composePath(symbolId,params);  if (path == null) {    String msg=Logging.getMessage("Symbology.SymbolIconNotFound",symbolId);    Logging.logger().severe(msg);    throw new WWRuntimeException(msg);  }  BufferedImage image=this.readImage(path);  if (image == null) {    String msg=Logging.getMessage("Symbology.SymbolIconNotFound",symbolId);    Logging.logger().severe(msg);    throw new WWRuntimeException(msg);  }  if (this.mustApplyColor(symbolId)) {    Color color=this.getColorFromParams(params);    if (color == null)     color=DEFAULT_COLOR;    this.multiply(image,color);  }  return image;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_GUARD_2__MORE_GUARDS_1:    return ((InternalEList<?>)getMoreGuards_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Builder updateTimezone(String timezone){  this.timezone=timezone;  return this;}  }
class C{  private void selectButton(){  m_button.setSelected(true);  putValue(Action.NAME,"Magnifying Glass");  putValue(Action.SHORT_DESCRIPTION,"Disables Magnifying Glass.");  m_button.setSelectedIcon(new ImageIcon(CMain.class.getResource("data/magnifieingglass_up.jpg")));  m_button.setRolloverSelectedIcon(new ImageIcon(CMain.class.getResource("data/magnifieingglass_hover.jpg")));  m_button.setPressedIcon(new ImageIcon(CMain.class.getResource("data/magnifieingglass_down.jpg")));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public boolean isSse3(){  return sse3;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void writeFile(ClassFile cf,String directoryName) throws CannotCompileException {  try {    writeFile0(cf,directoryName);  } catch (  IOException e) {    throw new CannotCompileException(e);  }}  }
class C{  protected ForwardingJavaFileObject(F fileObject){  super(fileObject);}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  public List<ACTION> orderActions(STATE state,List<ACTION> actions,PLAYER player,int depth){  return actions;}  }
class C{  public void show(Component invoker,int x,int y){  GeometryEditPanel editPanel=(GeometryEditPanel)invoker;  clickCoord=editPanel.getViewport().toModelCoordinate(new java.awt.Point(x,y));  super.show(invoker,x,y);}  }
class C{  public void autoSize(){  if (!autoResize)   return;}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public long minflt(){  return Long.parseLong(fields[9]);}  }
class C{  public void reportSpeedupRate(int compiler,double rate){  if (Controller.options.LOGGING_LEVEL >= 1) {    printlnToLogWithTimePrefix("SpeedupRate for " + CompilerDNA.getCompilerString(compiler) + " compiler: "+ rate);  }}  }
class C{  protected GeolocQuery constructMinimalQuery(Point point,double radius){  GeolocQuery geolocQuery=new GeolocQuery(point,radius);  return geolocQuery;}  }
class C{  public void add(T object){  int pos;synchronized (mLock) {    pos=getItemCount();    mObjects.add(object);  }  if (mNotifyOnChange)   notifyItemInserted(pos);}  }
class C{  public void bindReverse(){  int direction=this.builder.getBindDirectionReverse();  Object modelObject=getModelObject();  bind(direction,modelObject);}  }
class C{  @Override public boolean hasNext() throws IOException, CollectionException {  if (nodes.isEmpty()) {    if (fileIterator.hasNext()) {      processNextFile();    } else {      return false;    }  }  return true;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public FitZoom(AbstractChart chart){  super(chart);}  }
class C{  public boolean hasOwner(){  return hasExtension(Owner.class);}  }
class C{  private EmrMasterSecurityGroup createEmrClusterMasterGroupFromRequest(String namespaceCd,String clusterDefinitionName,String clusterName,List<String> groupIds){  EmrMasterSecurityGroup emrMasterSecurityGroup=new EmrMasterSecurityGroup();  emrMasterSecurityGroup.setNamespace(namespaceCd);  emrMasterSecurityGroup.setEmrClusterDefinitionName(clusterDefinitionName);  emrMasterSecurityGroup.setEmrClusterName(clusterName);  emrMasterSecurityGroup.setSecurityGroupIds(groupIds);  return emrMasterSecurityGroup;}  }
class C{  private boolean fileExists(String path){  try {    mAssets.openFd(path).close();    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  public static boolean contains(float[] array,float valueToFind){  return indexOf(array,valueToFind) != INDEX_NOT_FOUND;}  }
class C{  protected void removeDOMListeners(){  SVGOMDocument doc=(SVGOMDocument)document;  doc.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",domAttrModifiedEventListener,true);  doc.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",domNodeInsertedEventListener,true);  doc.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",domNodeRemovedEventListener,true);  doc.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",domCharacterDataModifiedEventListener,true);  doc.removeAnimatedAttributeListener(animatedAttributeListener);  CSSEngine cssEngine=doc.getCSSEngine();  if (cssEngine != null) {    cssEngine.removeCSSEngineListener(cssPropertiesChangedListener);    cssEngine.dispose();    doc.setCSSEngine(null);  }}  }
class C{  public boolean waitForCacheOrFunctionException(long timeout) throws CacheException, ForceReattemptException {  boolean timedOut=false;  try {    if (timeout == 0) {      waitForRepliesUninterruptibly();      timedOut=true;    } else {      timedOut=waitForRepliesUninterruptibly(timeout);    }  } catch (  ReplyException e) {    removeMember(e.getSender(),true);    Throwable t=e.getCause();    if (t instanceof CacheException) {      throw (CacheException)t;    } else     if (t instanceof RegionDestroyedException) {      throw (RegionDestroyedException)t;    } else     if (t instanceof ForceReattemptException) {      throw new ForceReattemptException("Peer requests reattempt",t);    } else     if (t instanceof PrimaryBucketException) {      throw new PrimaryBucketException("Peer failed primary test",t);    }    if (t instanceof CancelException) {      this.execution.failedNodes.add(e.getSender().getId());      String msg="PartitionResponse got remote CacheClosedException, throwing PartitionedRegionCommunicationException";      logger.debug("{}, throwing ForceReattemptException",msg,t);      throw (CancelException)t;    }    if (e.getCause() instanceof FunctionException) {      throw (FunctionException)e.getCause();    }    e.handleAsUnexpected();  }  return timedOut;}  }
class C{  public WebSocket addListeners(List<WebSocketListener> listeners){  mListenerManager.addListeners(listeners);  return this;}  }
class C{  private void reset(){  reassembledData=null;  reassembledDataSize=null;  reassembledDataFullSize=0;  reassembledDataHasStart=false;  reassembledDataHasEnd=false;  reassembledDataPosSeqStart=Integer.MAX_VALUE;  reassembledDataPosSeqEnd=Integer.MIN_VALUE;  reassembledDataNALHeader=0;  timestamp=-1;  format=null;}  }
class C{  private static Object compressMaxMin(DataType changedDataType,double[] value,double maxValue){  int i=0;switch (changedDataType) {case DATA_BYTE:    byte[] result=new byte[value.length];  for (  double a : value) {    result[i]=(byte)(maxValue - a);    i++;  }return result;case DATA_SHORT:short[] shortResult=new short[value.length];for (double a : value) {shortResult[i]=(short)(maxValue - a);i++;}return shortResult;case DATA_INT:int[] intResult=new int[value.length];for (double a : value) {intResult[i]=(int)(maxValue - a);i++;}return intResult;case DATA_LONG:long[] longResult=new long[value.length];for (double a : value) {longResult[i]=(long)(maxValue - a);i++;}return longResult;case DATA_FLOAT:float[] floatResult=new float[value.length];for (double a : value) {floatResult[i]=(float)(maxValue - a);i++;}return floatResult;default :double[] defaultResult=new double[value.length];for (double a : value) {defaultResult[i]=(double)(maxValue - a);i++;}return defaultResult;}}  }
class C{  public static String resolveUrl(final String baseUrl,final String relativeUrl){  if (baseUrl == null) {    throw new IllegalArgumentException("Base URL must not be null");  }  if (relativeUrl == null) {    throw new IllegalArgumentException("Relative URL must not be null");  }  final Url url=resolveUrl(parseUrl(baseUrl.trim()),relativeUrl.trim());  return url.toString();}  }
class C{  @Override public String toString(){  return this.getClass().getName();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  protected void renderFixture(Graphics2D g,double scale,BodyFixture fixture,Color color){  Convex convex=fixture.getShape();  if (this.isAsleep()) {    color=color.brighter();  }  Graphics2DRenderer.render(g,convex,scale,color);}  }
class C{  public void individualReplaced(final SteadyStateEvolutionState state,final int subpopulation,final int thread,final int individual){  for (int x=0; x < bp.length; x++)   ((SteadyStateBSourceForm)bp[x]).individualReplaced(state,subpopulation,thread,individual);  ((SteadyStateBSourceForm)deselectors[subpopulation]).individualReplaced(state,subpopulation,thread,individual);}  }
class C{  @SuppressWarnings("unused") public static byte[] selectFontA(){  byte[] result=new byte[3];  result[0]=ESC;  result[1]=77;  result[2]=0;  return result;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private DeploymentService.State createDeploymentDocumentInCloudStore(TestEnvironment testEnvironment) throws Throwable {  return createDeploymentDocumentInCloudStore(testEnvironment,"nsxAddress","username","password");}  }
class C{  @org.junit.Test public void testUnderstanding(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("is the sky blue?");  String response=waitForOutput(output);  assertUnknown(response);  text.input("the sky is blue");  response=waitForOutput(output);  assertKnown(response);  text.input("is the sky blue?");  response=waitForOutput(output);  assertTrue(response);  text.input("is the sky not blue?");  response=waitForOutput(output);  assertFalse(response);  text.input("is the sky red?");  response=waitForOutput(output);  assertKeyword(response,"blue");  assertUncertain(response);  text.input("is the sky not red?");  response=waitForOutput(output);  assertKeyword(response,"blue");  assertUncertain(response);  text.input("the sky is not blue");  response=waitForOutput(output);  assertKnown(response);  text.input("is the sky blue?");  response=waitForOutput(output);  assertFalse(response);  text.input("is the sky not blue?");  response=waitForOutput(output);  assertTrue(response);  text.input("is the sky not not blue?");  response=waitForOutput(output);  assertFalse(response);  text.input("is the sky red?");  response=waitForOutput(output);  assertUnknown(response);  text.input("remember that the sky is blue");  response=waitForOutput(output);  assertKeyword(response,"blue");  text.input("remember the sky is blue");  response=waitForOutput(output);  assertKnown(response);  text.input("I am a dog");  response=waitForOutput(output);  assertKnown(response);  assertKeyword(response,"a dog");  text.input("am I a dog");  response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"a dog");  text.input("I am a cat?");  response=waitForOutput(output);  assertFalse(response);  assertKeyword(response,"a cat");  text.input("I am not a cat");  response=waitForOutput(output);  assertFalse(response);  assertKeyword(response,"a cat");  text.input("I am a cat?");  response=waitForOutput(output);  assertFalse(response);  assertKeyword(response,"a cat");  text.input("do you think that I am a cat?");  response=waitForOutput(output);  assertFalse(response);  assertKeyword(response,"a cat");  bot.shutdown();}  }
class C{  private void filterOutUnchangedEntities(Set<Entity> updateRequired,OperationGroup updateGroup){  for (Iterator<Entity> it=updateGroup.getEntities().iterator(); it.hasNext(); ) {    Entity entity=it.next();    if (!updateRequired.contains(entity)) {      it.remove();      LOG.debug("Filtered out " + entity);    }  }}  }
class C{  public boolean isExcluded(String endpoint){  for (int i=0; i < exclusions.size(); i++) {    if (exclusions.get(i).test(endpoint)) {      return true;    }  }  return false;}  }
class C{  public static void typeface(View view,TypefaceCollection typefaceCollection){  if (view instanceof ViewGroup) {    applyTypeface((ViewGroup)view,typefaceCollection);  } else {    applyForView(view,typefaceCollection);  }}  }
class C{  public static Hash merge(Hash a,Hash b){  try {    MessageDigest digest=MessageDigest.getInstance("SHA-256");    digest.update(a.bytes);    return Hash.createFromSafeArray(digest.digest(digest.digest(b.bytes)));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  public void tunnelTarget(boolean secure,HttpParams params) throws IOException {  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  if (this.tracker.isTunnelled()) {    throw new IllegalStateException("Connection is already tunnelled.");  }  this.connection.update(null,tracker.getTargetHost(),secure,params);  this.tracker.tunnelTarget(secure);}  }
class C{  public static double SSfitness(boolean useTrainingData,GEPIndividual ind){  double SS=SSrawFitness(useTrainingData,ind,0);  return (1000.0 * SS);}  }
class C{  public static Snapshot createSnapshot() throws IOException {  MethodGroup[] methods_=null;synchronized (globalLock) {    methods_=new MethodGroup[methodCount];    for (int i=0; i < methodCount; i++) {      methods_[i]=new MethodGroup(globalMethods[i]);    }    for (    ThreadProfiler ti : globalThreadInfos.values()) {      if (ti.thread.isAlive()) {        exitWholeStack(ti,methods_);      }    }    ByteArrayOutputStream os=new ByteArrayOutputStream();    BufferedOutputStream bos=new BufferedOutputStream(os);    DataOutputStream dos=new DataOutputStream(bos);    serialize(dos,methods_);    dos.flush();    InputStream is=new ByteArrayInputStream(os.toByteArray());    return Snapshot.read(is);  }}  }
class C{  private CTutorialFunctions(){}  }
class C{  private void openServer(String host) throws IOException {  mailhost=host;  openServer(mailhost,25);  issueCommand("helo " + InetAddress.getLocalHost().getHostName() + "\r\n",250);}  }
class C{  public void onResume(boolean multitasking){  Log.d(TAG,"onResume");  final String action=getSharedPreferences(SHARED_PREFS_ACTION);  if (!action.equals("")) {    runAction(action);  }}  }
class C{  public static boolean isEmpty(String string){  return string == null || string.isEmpty();}  }
class C{  static MediaType createTextType(String subtype){  return create(TEXT_TYPE,subtype);}  }
class C{  public RotateFilter(double angle){  this.sin=Math.sin(angle);  this.cos=Math.cos(angle);}  }
class C{  protected boolean hasOutstandingChanges(){  return (fAmtFrom.hasChanged() || fAmtTo.hasChanged() || fBPartner_ID.hasChanged()|| fDescription.hasChanged()|| fDocumentNo.hasChanged()|| fDateFrom.hasChanged()|| fDateTo.hasChanged()|| fIsDelivered.hasChanged()|| fIsSOTrx.hasChanged()|| fPOReference.hasChanged());}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void removeZone(WBEMClient client,String fabricId,String fabricWwn,Zone zone) throws WBEMException {  _log.info("Removing zone: " + zone.getName() + " for fabric: "+ fabricId == null ? fabricWwn : fabricId);  _smisHelper.removeZone(client,zone);}  }
class C{  protected void removeRedundantState(){  Vector<Object> uselessKeys=new Vector<Object>();  Enumeration myKeys=preState.keys();  while (myKeys.hasMoreElements()) {    Object myKey=myKeys.nextElement();    if (postState.containsKey(myKey) && postState.get(myKey).equals(preState.get(myKey))) {      uselessKeys.addElement(myKey);    }  }  for (int i=uselessKeys.size() - 1; i >= 0; i--) {    Object myKey=uselessKeys.elementAt(i);    preState.remove(myKey);    postState.remove(myKey);  }}  }
class C{  public static Collection<DisqueNode> parse(String nodes){  List<DisqueNode> result=new ArrayList<>();  Iterator<String> iterator=TOKEN_PATTERN.splitAsStream(nodes).iterator();  try {    while (iterator.hasNext()) {      String node=iterator.next();      DisqueNode partition=parseNode(node);      result.add(partition);    }  } catch (  Exception e) {    throw new RedisException("Cannot parse " + nodes,e);  }  return result;}  }
class C{  private int searchForTag(String aName){  int i=0;  Iterator<Tag> it=mTagList.iterator();  while (it.hasNext()) {    Tag tag=it.next();    if (tag.getName().equals(aName))     return i;    i++;  }  return -1;}  }
class C{  public final static int skipSpaces(final String in,final int start){  int pos=start;  while (pos < in.length() && (in.charAt(pos) == ' ' || in.charAt(pos) == '\n')) {    pos++;  }  return pos < in.length() ? pos : -1;}  }
class C{  public boolean hasAlphaChangedFrom(float v){  return (Float.compare(alpha,v) != 0);}  }
class C{  @Override protected String updateJavadoc(String content) throws Exception {  String result;  int i;  result=content;  for (i=0; i < m_Javadocs.size(); i++) {    result=m_Javadocs.get(i).updateJavadoc(result);  }  return result;}  }
class C{  public RolloutRenderer(){  super(RolloutRendererData.class,null);}  }
class C{  public static UserGroup toUserGroup(POUserGroup poUserGroup) throws ValidationException {  validate(poUserGroup);  UserGroup userGroup=new UserGroup();  copyAttributes(userGroup,poUserGroup);  return userGroup;}  }
class C{  public static @Nullable Long toLongOrNull(@Nullable String str){  if (str == null)   return null;  try {    return Long.parseLong(str);  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  public NotificationChain basicSetBogusTypeRef(TypeRef newBogusTypeRef,NotificationChain msgs){  TypeRef oldBogusTypeRef=bogusTypeRef;  bogusTypeRef=newBogusTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_METHOD_DECLARATION__BOGUS_TYPE_REF,oldBogusTypeRef,newBogusTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public char[] constantPoolName(){  if (this.constantPoolName != null)   return this.constantPoolName;  return this.constantPoolName=CharOperation.concatWith(this.compoundName,'/');}  }
class C{  public boolean contains(final AbstractInsnNode insn){  AbstractInsnNode i=first;  while (i != null && i != insn) {    i=i.next;  }  return i != null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Deprecated public Single<Boolean> play(@NonNull final File audioFile){  return play(PlayConfig.file(audioFile).build());}  }
class C{  public static void unregister(CloseWatcher w){  w.closeable=null;  refs.remove(w);}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  putAllImpl(map);}  }
class C{  public TvShowToXbmcNfoConnector(){  genres=new ArrayList<>();  actors=new ArrayList<>();  tags=new ArrayList<>();  episodeguide=new EpisodeGuide();  unsupportedElements=new ArrayList<>();}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public void increaseFontSize(){  m_fontSizeAdjust++;}  }
class C{  public static Pointer to(char values[]){  return new Pointer(CharBuffer.wrap(values));}  }
class C{  public void buildLegs(ArrayList<GeoPoint> waypoints){  mLegs=new ArrayList<RoadLeg>();  int firstNodeIndex=0;  int w=waypoints.size();  int n=mNodes.size();  for (int i=1; i < w - 1; i++) {    GeoPoint waypoint=waypoints.get(i);    double distanceMin=-1.0;    int nodeIndexMin=-1;    for (int j=firstNodeIndex; j < n; j++) {      GeoPoint roadPoint=mNodes.get(j).mLocation;      double dSquared=distanceLLSquared(roadPoint,waypoint);      if (nodeIndexMin == -1 || dSquared < distanceMin) {        distanceMin=dSquared;        nodeIndexMin=j;      }    }    RoadLeg leg=new RoadLeg(firstNodeIndex,nodeIndexMin,mNodes);    mLegs.add(leg);    firstNodeIndex=nodeIndexMin + 1;  }  RoadLeg lastLeg=new RoadLeg(firstNodeIndex,n - 1,mNodes);  mLegs.add(lastLeg);}  }
class C{  private int partition(int[] A,int left,int right){  int pivot=A[left + (right - left) / 2];  while (left <= right) {    while (A[left] < pivot)     left++;    while (A[right] > pivot)     right--;    if (left <= right) {      int temp=A[left];      A[left]=A[right];      A[right]=temp;      left++;      right--;    }  }  return left;}  }
class C{  public ConfigHelper(Class<D> destinationClass,Class<S> sourceClass,JMapperAPI api){  this(destinationClass,sourceClass,api.toXStream());}  }
class C{  public VcpcFast(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length){  username=new byte[length];  System.arraycopy(attributeValue,offset,username,0,length);}  }
class C{  public MemberDefinition matchMethod(Environment env,ClassDefinition accessor,Identifier methodName) throws AmbiguousMember, ClassNotFound {  return matchMethod(env,accessor,methodName,Type.noArgs,false,null);}  }
class C{  public Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public UnsupportedEncodingException(java.lang.String s){  super(s);}  }
class C{  public void removeRosterListener(RosterExchangeListener rosterExchangeListener){synchronized (rosterExchangeListeners) {    rosterExchangeListeners.remove(rosterExchangeListener);  }}  }
class C{  public void testBug25025() throws Exception {  Connection multiConn=null;  createTable("testBug25025","(field1 INT)");  try {    Properties props=new Properties();    props.setProperty("rewriteBatchedStatements","true");    props.setProperty("useServerPrepStmts","false");    multiConn=getConnectionWithProps(props);    this.pstmt=multiConn.prepareStatement("/* insert foo.bar.baz INSERT INTO foo VALUES (?,?,?,?) to trick parser */ INSERT into testBug25025 VALUES (?)");    this.pstmt.setInt(1,1);    this.pstmt.addBatch();    this.pstmt.setInt(1,2);    this.pstmt.addBatch();    this.pstmt.setInt(1,3);    this.pstmt.addBatch();    int[] counts=this.pstmt.executeBatch();    assertEquals(3,counts.length);    assertEquals(Statement.SUCCESS_NO_INFO,counts[0]);    assertEquals(Statement.SUCCESS_NO_INFO,counts[1]);    assertEquals(Statement.SUCCESS_NO_INFO,counts[2]);    assertEquals(true,((com.mysql.jdbc.PreparedStatement)this.pstmt).canRewriteAsMultiValueInsertAtSqlLevel());  }  finally {    if (multiConn != null) {      multiConn.close();    }  }}  }
class C{  public Account findByNameOrEmail(ReviewDb db,String nameOrEmail) throws OrmException {  Set<Account.Id> r=findAllByNameOrEmail(db,nameOrEmail);  return r.size() == 1 ? byId.get(r.iterator().next()).getAccount() : null;}  }
class C{  public Builder updateUserName(String userName){  this.userName=userName;  return this;}  }
class C{  protected void authorize(){}  }
class C{  private static boolean isSendableVersion(){  Version myVersion;  Version lastVersion;  try {    myVersion=new Version(FrostWireUtils.getFrostWireVersion());    lastVersion=new Version(BugSettings.LAST_ACCEPTABLE_VERSION.getValue());  } catch (  VersionFormatException vfe) {    return false;  }  return myVersion.compareTo(lastVersion) >= 0;}  }
class C{  public static final Criterion modSeqGreaterThan(long value){  return new ModSeqCriterion(new NumericOperator(value,NumericComparator.GREATER_THAN));}  }
class C{  @Override protected Enumeration<URL> findResources(String resName){  init();  int length=mPaths.length;  ArrayList<URL> results=new ArrayList<URL>();  for (int i=0; i < length; i++) {    URL result=findResource(resName,i);    if (result != null) {      results.add(result);    }  }  return new EnumerateListArray<URL>(results);}  }
class C{  public EditTextUndoRedo(EditText editText){  mEditText=editText;  mEditHistory=new EditHistory();  mChangeListener=new EditTextChangeListener();  mEditText.addTextChangedListener(mChangeListener);}  }
class C{  private URI buildLivenessUri(int livenessCheckPort){  final String scheme=(tlsEnabled ? "https" : "http") + "://";  final String host=container.getContainerIpAddress();  final String portSuffix;  if ((tlsEnabled && 443 == livenessCheckPort) || (!tlsEnabled && 80 == livenessCheckPort)) {    portSuffix="";  } else {    portSuffix=":" + String.valueOf(livenessCheckPort);  }  return URI.create(scheme + host + portSuffix+ path);}  }
class C{  public void updateAndTestCounter(OFMessage ofm,String type){  validateCounter(type,0);  counters.updateWriteStats(ofm);  counters.updateWriteStats(ofm);  counters.updateReadStats(ofm);  counters.updateReadStats(ofm);  validateCounter(type,2);}  }
class C{  public Transform(final Vec2 _position,final Rot _R){  p=_position.clone();  q=_R.clone();}  }
class C{  static Result fromContent(StructuredContent content) throws IllegalArgumentException {  if (content == null) {    throw new IllegalArgumentException("content cannot be null");  }  return new Result(content);}  }
class C{  public void displayWarningMessage(String text){  displayMessage(name,text,TrayIcon.MessageType.WARNING);}  }
class C{  private void init_key(){  P=(int[])P_orig.clone();  S=(int[])S_orig.clone();}  }
class C{  @Override protected void layoutTextModifiers(DrawContext dc,AVList modifiers,OrderedSymbol osym){  this.currentLabels.clear();  Font font=this.getActiveAttributes().getTextModifierFont();  List<LabelLayout> allLayouts=this.getLayouts(this.symbolCode.toMaskedString());  for (  LabelLayout layout : allLayouts) {    java.util.List<OffsetPair> offsets=layout.offsets;    if (WWUtil.isEmpty(offsets))     continue;    Object value=modifiers.getValue(layout.modifier);    if (WWUtil.isEmpty(value))     continue;    if (SymbologyConstants.DATE_TIME_GROUP.equals(layout.modifier) && (value instanceof Iterable)) {      value=this.addHyphenToDateRange((Iterable)value,offsets);    }    String mode=SymbologyConstants.LOCATION.equals(layout.modifier) ? LAYOUT_RELATIVE : LAYOUT_NONE;    if (value instanceof Iterable) {      this.layoutMultiLabel(dc,font,offsets,(Iterable)value,mode,osym);    } else     if (value != null) {      this.layoutLabel(dc,font,layout.offsets.get(0),value.toString(),mode,osym);    }  }}  }
class C{  private void disconnect(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  if (!c.isConnected()) {    return;  }  try {    c.getClient().disconnect(null,new ActionListener(context,Action.DISCONNECT,clientHandle,null));    c.changeConnectionStatus(ConnectionStatus.DISCONNECTING);  } catch (  MqttException e) {    Log.e(this.getClass().getCanonicalName(),"Failed to disconnect the client with the handle " + clientHandle,e);    c.addAction("Client failed to disconnect");  }}  }
class C{  public void indexVersion(long indexVersion){  this.indexVersion=indexVersion;}  }
class C{  public void importProperties(Iterable<Map.Entry<String,String>> propSrc){  Properties props=m_props.extractProperties(propSrc);  props=m_props.stripPrefix(props);  setProperties(props);}  }
class C{  public void addArgumentNoEncodingArray(String key,String... value){  addArgumentNoEncoding(key,(String[])value);}  }
class C{  public String addStepsForSynchronizeClusterExport(Workflow workflow,String waitFor,List<URI> clusterHostIds,URI clusterId){  for (  ExportGroup export : getSharedExports(_dbClient,clusterId)) {    List<URI> updatedInitiators=StringSetUtil.stringSetToUriList(export.getInitiators());    List<URI> updatedHosts=StringSetUtil.stringSetToUriList(export.getHosts());    List<URI> updatedClusters=StringSetUtil.stringSetToUriList(export.getClusters());    Map<URI,Integer> updatedVolumesMap=StringMapUtil.stringMapToVolumeMap(export.getVolumes());    for (    URI clusterHost : clusterHostIds) {      if (!updatedHosts.contains(clusterHost)) {        _log.info("Adding host " + clusterHost + " to cluster export group "+ export.getId());        updatedHosts.add(clusterHost);        List<Initiator> hostInitiators=ComputeSystemHelper.queryInitiators(_dbClient,clusterHost);        for (        Initiator initiator : hostInitiators) {          updatedInitiators.add(initiator.getId());        }      }    }    Iterator<URI> updatedHostsIterator=updatedHosts.iterator();    while (updatedHostsIterator.hasNext()) {      URI hostId=updatedHostsIterator.next();      if (!clusterHostIds.contains(hostId)) {        updatedHostsIterator.remove();        _log.info("Removing host " + hostId + " from shared export group "+ export.getId()+ " because this host does not belong to the cluster");        List<Initiator> hostInitiators=ComputeSystemHelper.queryInitiators(_dbClient,hostId);        for (        Initiator initiator : hostInitiators) {          updatedInitiators.remove(initiator.getId());        }      }    }    waitFor=workflow.createStep(UPDATE_EXPORT_GROUP_STEP,String.format("Updating export group %s",export.getId()),waitFor,export.getId(),export.getId().toString(),this.getClass(),updateExportGroupMethod(export.getId(),updatedInitiators.isEmpty() ? new HashMap<URI,Integer>() : updatedVolumesMap,updatedClusters,updatedHosts,updatedInitiators),null,null);  }  return waitFor;}  }
class C{  public synchronized boolean stop(){  if (!started)   return false;  if (stopped)   return false;  stopped=true;  source.finish();  boolean success=waitForFileDone();  try {    sink.close();  } catch (  Exception e) {  }  processor.removeControllerListener(this);  stopped=true;  return success;}  }
class C{  @Override public Long put(Double key,Long value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.010 -0500",hash_original_method="3FA5335C13C08E21D5C9AA51DF388549",hash_generated_method="B05359BEF2EC29A442BD4E975D64904B") protected boolean jsInterrupt(){  return mCallbackProxy.onJsTimeout();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentnodeattribute.class,args);}  }
class C{  @Override public void runTool(String... args) throws SQLException {  try {    currentWorkingDirectory=new File(".").getCanonicalPath();  } catch (  IOException e) {    throw DbException.convertIOException(e,"cwd");  }  for (int i=0; args != null && i < args.length; i++) {    String arg=args[i];    if (arg.equals("-run")) {      try {        execute(args[++i]);      } catch (      Exception e) {        throw DbException.convert(e);      }    } else     if (arg.equals("-verbose")) {      verbose=true;    } else     if (arg.equals("-help") || arg.equals("-?")) {      showUsage();      return;    } else {      showUsageAndThrowUnsupportedOption(arg);    }  }  promptLoop();}  }
class C{  protected Name parseEscapedFieldName(int[] quads,int qlen,int currQuad,int ch,int currQuadBytes) throws IOException, JsonParseException {  final int[] codes=sInputCodesLatin1;  while (true) {    if (codes[ch] != 0) {      if (ch == INT_QUOTE) {        break;      }      if (ch != INT_BACKSLASH) {        _throwUnquotedSpace(ch,"name");      } else {        ch=_decodeEscaped();      }      if (ch > 127) {        if (currQuadBytes >= 4) {          if (qlen >= quads.length) {            _quadBuffer=quads=growArrayBy(quads,quads.length);          }          quads[qlen++]=currQuad;          currQuad=0;          currQuadBytes=0;        }        if (ch < 0x800) {          currQuad=(currQuad << 8) | (0xc0 | (ch >> 6));          ++currQuadBytes;        } else {          currQuad=(currQuad << 8) | (0xe0 | (ch >> 12));          ++currQuadBytes;          if (currQuadBytes >= 4) {            if (qlen >= quads.length) {              _quadBuffer=quads=growArrayBy(quads,quads.length);            }            quads[qlen++]=currQuad;            currQuad=0;            currQuadBytes=0;          }          currQuad=(currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));          ++currQuadBytes;        }        ch=0x80 | (ch & 0x3f);      }    }    if (currQuadBytes < 4) {      ++currQuadBytes;      currQuad=(currQuad << 8) | ch;    } else {      if (qlen >= quads.length) {        _quadBuffer=quads=growArrayBy(quads,quads.length);      }      quads[qlen++]=currQuad;      currQuad=ch;      currQuadBytes=1;    }    if (_inputPtr >= _inputEnd) {      if (!loadMore()) {        _reportInvalidEOF(" in field name");      }    }    ch=_inputBuffer[_inputPtr++] & 0xFF;  }  if (currQuadBytes > 0) {    if (qlen >= quads.length) {      _quadBuffer=quads=growArrayBy(quads,quads.length);    }    quads[qlen++]=currQuad;  }  Name name=_symbols.findName(quads,qlen);  if (name == null) {    name=addName(quads,qlen,currQuadBytes);  }  return name;}  }
class C{  private int addLabelsInternal(GL10 gl,Paint textPaint,boolean drawToCanvas,LabelData[] labels){  int u=0;  int v=0;  int lineHeight=0;  for (  LabelData label : labels) {    int ascent=0;    int descent=0;    int measuredTextWidth=0;    int height=0;    int width=0;    int fontSize=label.getFontSize();    do {      textPaint.setColor(0xff000000 | label.getColor());      textPaint.setTextSize(fontSize * mRes.getDisplayMetrics().density);      ascent=(int)Math.ceil(-textPaint.ascent());      descent=(int)Math.ceil(textPaint.descent());      measuredTextWidth=(int)Math.ceil(textPaint.measureText(label.getText()));      height=ascent + descent;      width=measuredTextWidth;      fontSize--;    } while (fontSize > 0 && width > mRes.getDisplayMetrics().widthPixels);    int nextU;    if (u + width > mStrikeWidth) {      u=0;      nextU=width;      v+=lineHeight;      lineHeight=0;    } else {      nextU=u + width;    }    lineHeight=Math.max(lineHeight,height);    if (v + lineHeight > mStrikeHeight && drawToCanvas) {      throw new IllegalArgumentException("Out of texture space.");    }    int vBase=v + ascent;    if (drawToCanvas) {      mCanvas.drawText(label.getText(),u,vBase,textPaint);      label.setTextureData(width,height,u,v + height,width,-height,mTexelWidth,mTexelHeight);    }    u=nextU;  }  return v + lineHeight;}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    this.encrypting=encrypting;    this.workingKey=((KeyParameter)params).getKey();    this.k64Cnt=(this.workingKey.length / 8);    setKey(this.workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to Twofish init - " + params.getClass().getName());}  }
class C{  public void testToString(){  LongAdder ai=new LongAdder();  assertEquals("0",ai.toString());  ai.increment();  assertEquals(Long.toString(1),ai.toString());}  }
class C{  private Object oldCommentFormatOption(){  return this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT);}  }
class C{  @Override public ArchiveEntry createArchiveEntry(File inputFile,String entryName) throws IOException {  if (finished) {    throw new IOException("Stream has already been finished");  }  return new ZipArchiveEntry(inputFile,entryName);}  }
class C{  BinaryTree<Integer> buildRightLinear(int n){  BinaryTree<Integer> bt=new BinaryTree<Integer>();  for (int i=0; i < n; i++) {    bt.insert(i);  }  return bt;}  }
class C{  public boolean isVisibleWhenOverriding(TModule contextModule,Type contextType,Type declaredReceiverType,TMember member){  if (member.getMemberAccessModifier() == MemberAccessModifier.PRIVATE) {    return isModuleVisible(contextModule,member);  }  return isVisible(contextModule,contextType,declaredReceiverType,member,false).visibility;}  }
class C{  TransferableProxy(Transferable t,boolean local){  proxy=new sun.awt.datatransfer.TransferableProxy(t,local);  transferable=t;  isLocal=local;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void registerStatementFilter(IndexableStatementFilter filter){  this.filter=filter;}  }
class C{  public LegendItem(AttributedString label,String description,String toolTipText,String urlText,Shape shape,Paint fillPaint,Stroke outlineStroke,Paint outlinePaint){  this(label,description,toolTipText,urlText,true,shape,true,fillPaint,true,outlinePaint,outlineStroke,false,UNUSED_SHAPE,UNUSED_STROKE,Color.black);}  }
class C{  @Override public void processingInstruction(String str,String str1) throws SAXException {}  }
class C{  public static void refreshWidgetView(Context context,Weather weather){  if (weather == null) {    return;  }  SharedPreferences sharedPreferences=context.getSharedPreferences(context.getString(R.string.sp_widget_day_setting),Context.MODE_PRIVATE);  boolean showCard=sharedPreferences.getBoolean(context.getString(R.string.key_show_card),false);  boolean blackText=sharedPreferences.getBoolean(context.getString(R.string.key_black_text),false);  boolean hideRefreshTime=sharedPreferences.getBoolean(context.getString(R.string.key_hide_refresh_time),false);  boolean isDay=TimeUtils.getInstance(context).getDayTime(context,weather,false).isDay;  int textColor;  if (blackText || showCard) {    textColor=ContextCompat.getColor(context,R.color.colorTextDark);  } else {    textColor=ContextCompat.getColor(context,R.color.colorTextLight);  }  RemoteViews views=new RemoteViews(context.getPackageName(),R.layout.widget_day);  int[] imageId=WeatherUtils.getWeatherIcon(WeatherUtils.getWeatherKind(weather.live.weather),isDay);  views.setImageViewResource(R.id.widget_day_icon,imageId[3]);  String[] texts=WidgetAndNotificationUtils.buildWidgetDayStyleText(weather);  views.setTextViewText(R.id.widget_day_weather,texts[0]);  views.setTextViewText(R.id.widget_day_temp,texts[1]);  views.setTextViewText(R.id.widget_day_refreshTime,weather.base.location + "." + weather.base.refreshTime);  views.setTextColor(R.id.widget_day_weather,textColor);  views.setTextColor(R.id.widget_day_temp,textColor);  views.setTextColor(R.id.widget_day_refreshTime,textColor);  views.setViewVisibility(R.id.widget_day_card,showCard ? View.VISIBLE : View.GONE);  views.setViewVisibility(R.id.widget_day_refreshTime,hideRefreshTime ? View.GONE : View.VISIBLE);  Intent intent=new Intent(context,MainActivity.class);  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intent,0);  views.setOnClickPendingIntent(R.id.widget_day_button,pendingIntent);  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);  appWidgetManager.updateAppWidget(new ComponentName(context,WidgetDayProvider.class),views);}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {  if (m_elemContext.m_startTagOpen) {    ensurePrefixIsDeclared(uri,rawName);    addAttributeAlways(uri,localName,rawName,type,value,false);  }}  }
class C{  public int read() throws IOException {  return in.read();}  }
class C{  public int size(){  return map.size();}  }
class C{  protected void testType(int attType){  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals(attType,result.attribute(result.numAttributes() - 1).type());}  }
class C{  public AudioPlayerPaneItem(){  super(TITLE,LABEL);  _playerField=new SizedTextField(25,SizePolicy.RESTRICT_HEIGHT);  LabeledComponent comp=new LabeledComponent(OPTION_LABEL,_playerField);  add(comp.getComponent());}  }
class C{  private static void processAnnotation(boolean key,QuerySqlField sqlAnn,QueryTextField txtAnn,Class<?> cls,ClassProperty prop,TypeDescriptor desc){  if (sqlAnn != null) {    processAnnotationsInClass(key,cls,desc,prop);    if (!sqlAnn.name().isEmpty())     prop.alias(sqlAnn.name());    if (sqlAnn.index()) {      String idxName=prop.alias() + "_idx";      desc.addIndex(idxName,isGeometryClass(prop.type()) ? GEO_SPATIAL : SORTED);      desc.addFieldToIndex(idxName,prop.fullName(),0,sqlAnn.descending());    }    if (!F.isEmpty(sqlAnn.groups())) {      for (      String group : sqlAnn.groups())       desc.addFieldToIndex(group,prop.fullName(),0,false);    }    if (!F.isEmpty(sqlAnn.orderedGroups())) {      for (      QuerySqlField.Group idx : sqlAnn.orderedGroups())       desc.addFieldToIndex(idx.name(),prop.fullName(),idx.order(),idx.descending());    }  }  if (txtAnn != null)   desc.addFieldToTextIndex(prop.fullName());}  }
class C{  public boolean isVecInside(BlockPos c){  return c.getX() >= this.minX && c.getX() < this.maxX && (c.getY() >= this.minY && c.getY() < this.maxY && c.getZ() >= this.minZ && c.getZ() < this.maxZ);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void unsupportedIn2(){  if (this.apiLevel == AST.JLS2) {    throw new UnsupportedOperationException("Operation not supported in JLS2 AST");  }}  }
class C{  public static byte[] encode(byte[] data,int off,int length){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.encode(data,off,length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  private void navigateToDumpInLogfile(){  Object userObject=((DefaultMutableTreeNode)tree.getSelectionPath().getLastPathComponent()).getUserObject();  if (userObject instanceof ThreadDumpInfo) {    ThreadDumpInfo ti=(ThreadDumpInfo)userObject;    int lineNumber=ti.getLogLine();    TreePath selPath=tree.getSelectionPath();    while (selPath != null && !checkNameFromNode((DefaultMutableTreeNode)selPath.getLastPathComponent(),File.separator)) {      selPath=selPath.getParentPath();    }    tree.setSelectionPath(selPath);    tree.scrollPathToVisible(selPath);    Enumeration childs=((DefaultMutableTreeNode)selPath.getLastPathComponent()).children();    boolean found=false;    DefaultMutableTreeNode logfileContent=null;    while (!found && childs.hasMoreElements()) {      logfileContent=(DefaultMutableTreeNode)childs.nextElement();      found=logfileContent.getUserObject() instanceof LogFileContent;    }    if (found) {      TreePath monitorPath=new TreePath(logfileContent.getPath());      tree.setSelectionPath(monitorPath);      tree.scrollPathToVisible(monitorPath);      displayLogFileContent(logfileContent.getUserObject());      jeditPane.setFirstLine(lineNumber - 1);    }  }}  }
class C{  public void addServiceInfo(final ServiceInfo serviceInfo){  if (serviceInfo != null) {    associatedTSPS.add(serviceInfo);  }}  }
class C{  public static float angle(float x1,float y1,float x2,float y2){  return (float)Math.toDegrees(Math.atan2(x2 - x1,y2 - y1));}  }
class C{  @SuppressWarnings("all") public static double test2(int i1,float f1,double d2,float f3,double ad1,double ad2,double ad3,double ad4,double ad5,double ad6,double ad7,double ad8,double ad9,double ad10,double ad11,double ad12,double ad13,double ad14,double ad15,double ad16,float af1,float af2,float af3,float af4,float af5,float af6,float af7,float af8,float af9,float af10,float af11,float af12,float af13,float af14,float af15,float af16){  for (int i=0; i < i1; i++) {    af1+=f1;    af2+=f1;    af3+=f1;    af4+=f1;    af5+=f1;    af6+=f1;    af7+=f1;    af8+=f1;    af9+=f1;    af10+=f1;    af11+=f1;    af12+=f1;    af13+=f1;    af14+=f1;    af15+=f1;    af16+=f1;    ad1+=f1;    ad2+=f1;    ad3+=f1;    ad4+=f1;    ad5+=f1;    ad6+=f1;    ad7+=f1;    ad8+=f1;    ad9+=f1;    ad10+=f1;    ad11+=f1;    ad12+=f1;    ad13+=f1;    ad14+=f1;    ad15+=f1;    ad16+=f1;  }  boolean orderFloat=af1 < af2 && af2 < af3 && af3 < af4 && af4 < af5 && af5 < af6 && af6 < af7 && af7 < af8 && af8 < af9 && af9 < af10 && af10 < af11 && af11 < af12 && af12 < af13 && af13 < af14 && af14 < af15 && af15 < af16;  boolean orderDouble=ad1 < ad2 && ad2 < ad3 && ad3 < ad4 && ad4 < ad5 && ad5 < ad6 && ad6 < ad7 && ad7 < ad8 && ad8 < ad9 && ad9 < ad10 && ad10 < ad11 && ad11 < ad12 && ad12 < ad13 && ad13 < ad14 && ad14 < ad15 && ad15 < ad16;  if (orderDouble && orderFloat) {    return f1 + d2 + f3;  }  Assert.fail();  return 0.0;}  }
class C{  public void updateComponent(int fromRow,int toRow){  if (Executions.getCurrent() != null) {    fireEvent(ListDataEvent.CONTENTS_CHANGED,fromRow,toRow);  }}  }
class C{  public ExtensionsFileFilter(List<String> extensions){  if (extensions == null) {    this.extensions=new ArrayList<>();  } else {    this.extensions=new ArrayList<>(extensions);  }}  }
class C{  protected void checkRowExistsInKeyGroup(String sql,String key) throws Exception {  this.conn.setShardKey(key);  checkRowExists(sql);}  }
class C{  void saveSettings(){  GUIPreferences.getInstance().setWindowPosX(frame.getLocation().x);  GUIPreferences.getInstance().setWindowPosY(frame.getLocation().y);  GUIPreferences.getInstance().setWindowSizeWidth(frame.getSize().width);  GUIPreferences.getInstance().setWindowSizeHeight(frame.getSize().height);  if ((minimapW != null) && ((minimapW.getSize().width * minimapW.getSize().height) > 0)) {    GUIPreferences.getInstance().setMinimapPosX(minimapW.getLocation().x);    GUIPreferences.getInstance().setMinimapPosY(minimapW.getLocation().y);    GUIPreferences.getInstance().setMinimapZoom(minimap.getZoom());  }  if ((mechW != null) && ((mechW.getSize().width * mechW.getSize().height) > 0)) {    GUIPreferences.getInstance().setDisplayPosX(mechW.getLocation().x);    GUIPreferences.getInstance().setDisplayPosY(mechW.getLocation().y);    GUIPreferences.getInstance().setDisplaySizeWidth(mechW.getSize().width);    GUIPreferences.getInstance().setDisplaySizeHeight(mechW.getSize().height);  }  if ((ruler != null) && (ruler.getSize().width != 0) && (ruler.getSize().height != 0)) {    GUIPreferences.getInstance().setRulerPosX(ruler.getLocation().x);    GUIPreferences.getInstance().setRulerPosY(ruler.getLocation().y);    GUIPreferences.getInstance().setRulerSizeWidth(ruler.getSize().width);    GUIPreferences.getInstance().setRulerSizeHeight(ruler.getSize().height);  }}  }
class C{  public Contact addContact(String contact){  Contact prop=new Contact(contact);  addContact(prop);  return prop;}  }
class C{  public boolean isDownloadInProgress(){  return mDownloadId >= 0;}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  public void close(Statement s){  if (s != null) {    try {      s.close();    } catch (    SQLException e) {    }  }}  }
class C{  public static boolean canBeRenderedAsArray(Object elem){  if (isSupportedArray(elem)) {    return true;  }  if (elem instanceof Collection) {    Collection<?> c=(Collection<?>)elem;    if (c.isEmpty()) {      return false;    } else {      return !isUniformCollection(c,CompositeData.class) && !isUniformCollection(c,TabularData.class);    }  }  if (elem instanceof Map) {    return !(elem instanceof TabularData);  }  return false;}  }
class C{  public double[] IHStoRGB(double[] ihs){  double[] ret=new double[3];  double i, h, s;  double r, g, b;  i=ihs[0];  h=ihs[1];  s=ihs[2];  if (h <= 1) {    r=i * (1 + 2 * s - 3 * s * h) / 3;    g=i * (1 - s + 3 * s * h) / 3;    b=i * (1 - s) / 3;  } else   if (h <= 2) {    r=i * (1 - s) / 3;    g=i * (1 + 2 * s - 3 * s * (h - 1)) / 3;    b=i * (1 - s + 3 * s * (h - 1)) / 3;  } else {    r=i * (1 - s + 3 * s * (h - 2)) / 3;    g=i * (1 - s) / 3;    b=i * (1 + 2 * s - 3 * s * (h - 2)) / 3;  }  ret[0]=r;  ret[1]=g;  ret[2]=b;  return ret;}  }
class C{  public static byte[] join(byte[]... arrays){  if (arrays.length == 0) {    return EMPTY_BYTES;  }  if (arrays.length == 1) {    return arrays[0];  }  if (arrays.length == 2) {    return join(arrays[0],arrays[1]);  }  byte[] notNull=null;  int finalSize=0;  int nullArrays=0;  ByteArrayList list=new ByteArrayList(arrays.length * 10);  for (  byte[] array : arrays) {    if ((array == null) || (array.length == 0)) {      nullArrays++;    } else {      notNull=array;      finalSize+=array.length;      list.addElements(list.size(),array);    }  }  if (nullArrays == arrays.length) {    return EMPTY_BYTES;  }  if (nullArrays == (arrays.length - 1)) {    return notNull;  }  return list.toArray(new byte[list.size()]);}  }
class C{  public void updateNearbyBlocks(net.minecraft.world.World world,int x,int y,int z){  if (world.getSpigotConfig().antiXray) {    update.startTiming();    updateNearbyBlocks(world,x,y,z,2,false);    update.stopTiming();  }}  }
class C{  public void doExecute(final TradeOrder tradeOrder){  TradeOrder submittedTradeOrder=null;  try {    this.getFrame().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    TradeOrder instance=m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());    if (null != instance) {      if (!instance.getVersion().equals(tradeOrder.getVersion())) {        this.setStatusBarMessage("Please refresh order before sumbitting change ...\n",BasePanel.WARNING);      }    }    Tradestrategy tradestrategy=m_tradePersistentModel.findTradestrategyById(tradeOrder.getTradestrategy());    instance.validate();    submittedTradeOrder=m_brokerModel.onPlaceOrder(tradestrategy.getContract(),instance);    setStatusBarMessage("Order sent to broker.\n",BasePanel.INFORMATION);  } catch (  Exception ex) {    this.setErrorMessage("Error submitting Order " + submittedTradeOrder.getOrderKey(),ex.getMessage(),ex);  } finally {    this.getFrame().setCursor(Cursor.getDefaultCursor());  }}  }
class C{  public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearSubDomain(){  subDomain=null;  fieldSetFlags()[4]=false;  return this;}  }
class C{  public BinlogReader(long start,String fileName,String directory,String baseName,int bufferSize){  this.bfdi=null;  this.startPosition=start;  this.eventID=0;  this.fileName=fileName;  this.directory=directory;  this.baseName=baseName;  this.bufferSize=bufferSize;}  }
class C{  @Nullable public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file,@NotNull TextRange changedPsiRange,@NotNull CharSequence newFileText){  Project project=file.getProject();  final FileElement fileElement=file.getTreeElement();  final CharTable charTable=fileElement.getCharTable();  int lengthShift=newFileText.length() - fileElement.getTextLength();  if (fileElement.getElementType() instanceof ITemplateDataElementType || isTooDeep(file)) {    return null;  }  final ASTNode leafAtStart=fileElement.findLeafElementAt(Math.max(0,changedPsiRange.getStartOffset() - 1));  final ASTNode leafAtEnd=fileElement.findLeafElementAt(Math.min(changedPsiRange.getEndOffset(),fileElement.getTextLength() - 1));  ASTNode node=leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart,leafAtEnd) : fileElement;  Language baseLanguage=file.getViewProvider().getBaseLanguage();  while (node != null && !(node instanceof FileElement)) {    IElementType elementType=node.getElementType();    if (elementType instanceof IReparseableElementType) {      final TextRange textRange=node.getTextRange();      final IReparseableElementType reparseable=(IReparseableElementType)elementType;      if (baseLanguage.isKindOf(reparseable.getLanguage()) && textRange.getLength() + lengthShift > 0) {        final int start=textRange.getStartOffset();        final int end=start + textRange.getLength() + lengthShift;        if (end > newFileText.length()) {          reportInconsistentLength(file,newFileText,node,start,end);          break;        }        CharSequence newTextStr=newFileText.subSequence(start,end);        if (reparseable.isParsable(node.getTreeParent(),newTextStr,baseLanguage,project)) {          ASTNode chameleon=reparseable.createNode(newTextStr);          if (chameleon != null) {            DummyHolder holder=DummyHolderFactory.createHolder(file.getManager(),null,node.getPsi(),charTable);            holder.getTreeElement().rawAddChildren((TreeElement)chameleon);            if (holder.getTextLength() != newTextStr.length()) {              String details=ApplicationManager.getApplication().isInternal() ? "text=" + newTextStr + "; treeText="+ holder.getText()+ ";" : "";              LOG.error("Inconsistent reparse: " + details + " type="+ elementType);            }            return Couple.of(node,chameleon);          }        }      }    }    node=node.getTreeParent();  }  return null;}  }
class C{  public void removeTag(){  parameters.delete(ParameterNames.TAG);}  }
class C{  public long convertGeodeticToPolarStereographic(double Latitude,double Longitude){  double dlam;  double slat;  double essin;  double t;  double rho;  double pow_es;  long Error_Code=POLAR_NO_ERROR;  if ((Latitude < -PI_OVER_2) || (Latitude > PI_OVER_2)) {    Error_Code|=POLAR_LAT_ERROR;  }  if ((Latitude < 0) && (Southern_Hemisphere == 0)) {    Error_Code|=POLAR_LAT_ERROR;  }  if ((Latitude > 0) && (Southern_Hemisphere == 1)) {    Error_Code|=POLAR_LAT_ERROR;  }  if ((Longitude < -PI) || (Longitude > TWO_PI)) {    Error_Code|=POLAR_LON_ERROR;  }  if (Error_Code == POLAR_NO_ERROR) {    if (Math.abs(Math.abs(Latitude) - PI_OVER_2) < 1.0e-10) {      Easting=0.0;      Northing=0.0;    } else {      if (Southern_Hemisphere != 0) {        Longitude*=-1.0;        Latitude*=-1.0;      }      dlam=Longitude - Polar_Origin_Long;      if (dlam > PI) {        dlam-=TWO_PI;      }      if (dlam < -PI) {        dlam+=TWO_PI;      }      slat=Math.sin(Latitude);      essin=es * slat;      pow_es=Math.pow((1.0 - essin) / (1.0 + essin),es_OVER_2);      t=Math.tan(PI_Over_4 - Latitude / 2.0) / pow_es;      if (Math.abs(Math.abs(Polar_Origin_Lat) - PI_OVER_2) > 1.0e-10)       rho=Polar_a_mc * t / tc; else       rho=two_Polar_a * t / e4;      if (Southern_Hemisphere != 0) {        Easting=-(rho * Math.sin(dlam) - Polar_False_Easting);        Northing=rho * Math.cos(dlam) + Polar_False_Northing;      } else       Easting=rho * Math.sin(dlam) + Polar_False_Easting;      Northing=-rho * Math.cos(dlam) + Polar_False_Northing;    }  }  return (Error_Code);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  String attrValue;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.removeNamedItemNS(nullNS,"defaultAttr");  attribute=(Attr)attributes.getNamedItemNS(nullNS,"defaultAttr");  attrValue=attribute.getNodeValue();  assertNotNull("namednodemapremovenameditemns02",attribute);  assertEquals("namednodemapremovenameditemns02_attrValue","defaultVal",attrValue);}  }
class C{  protected ModelImpl(){  super();}  }
class C{  protected void assertMessagesReceivedAreValid(List<Message> receivedMessages) throws JMSException {  List<Object> copyOfMessages=Arrays.asList(receivedMessages.toArray());  int counter=0;  if (data.length != copyOfMessages.size()) {    for (Iterator<Object> iter=copyOfMessages.iterator(); iter.hasNext(); ) {      Object message=iter.next();      LOG.info("<== " + counter++ + " = "+ message);    }  }  assertEquals("Invalid number of messages received",data.length,receivedMessages.size());  for (int i=0; i < data.length; i++) {    Message received=receivedMessages.get(i);    try {      assertMessageValid(i,received);    } catch (    AssertionFailedError e) {      for (int j=0; j < data.length; j++) {        Message m=receivedMessages.get(j);        System.out.println(j + " => " + m.getJMSMessageID());      }      throw e;    }  }}  }
class C{  public void testGetters7(){  LayoutBuilder b=builder().setText("This is a longer test").setIncludePad(true).setWidth(50).setSpacingAdd(2).setSpacingMult(1.5f);  FontMetricsInt fmi=b.paint.getFontMetricsInt();  Scaler s=new Scaler(b.spacingMult,b.spacingAdd);  Layout l=b.build();  assertVertMetrics(l,fmi.top - fmi.ascent,fmi.bottom - fmi.descent,fmi.top,fmi.descent + s.scale(fmi.descent - fmi.top),fmi.ascent,fmi.descent + s.scale(fmi.descent - fmi.ascent),fmi.ascent,fmi.bottom + s.scale(fmi.bottom - fmi.ascent));}  }
class C{  public static void disableAdmin(Context context){  DevicePolicyManager devicePolicyManager;  ComponentName demoDeviceAdmin;  devicePolicyManager=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);  demoDeviceAdmin=new ComponentName(context,AgentDeviceAdminReceiver.class);  devicePolicyManager.removeActiveAdmin(demoDeviceAdmin);}  }
class C{  public RepositoryModule(RepositoryName repositoryName,Settings settings,Settings globalSettings,RepositoryTypesRegistry typesRegistry){  this.repositoryName=repositoryName;  this.globalSettings=globalSettings;  this.settings=settings;  this.typesRegistry=typesRegistry;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void cleanup() throws CqException {  this.cqService.removeFromBaseRegionToCqNameMap(this.regionName,this.getServerCqName());}  }
class C{  public CharArray(String string){  _array=string.toCharArray();  _length=string.length();}  }
class C{  private void addComparisonRecords(ServiceCatalogDiff serviceCatalogDiff,String title){  Map<String,StringBuilder> changedMap=new HashMap<String,StringBuilder>();  for (  Map.Entry<ApiIdentifier,ApiDescriptorDiff> entry : serviceCatalogDiff.getApiChangedMap().entrySet()) {    String componentName=serviceCatalogDiff.getNewServiceCatalog().getServiceName() + Constants.NAME_STRING_SEPARATOR + entry.getKey().getPath().split(Constants.URL_PATH_SEPARATOR)[1];    StringBuilder componentValue=changedMap.get(componentName);    if (componentValue == null) {      componentValue=new StringBuilder();      if (componentMap.get(componentName) == null) {        componentValue.append(HtmlSerializerHelper.buildDivHeader(componentName));        componentValue.append(HtmlSerializerHelper.buildContent("Component",componentName,3));      }      componentValue.append(HtmlSerializerHelper.buildTableHeader());      componentValue.append(HtmlSerializerHelper.buildTableHeaderRow(2,new Pair<String,Integer>(title,100)));      changedMap.put(componentName,componentValue);    }    componentValue.append(addComparisonRecord(entry.getKey(),entry.getValue()));  }  for (  StringBuilder builder : changedMap.values()) {    builder.append(HtmlSerializerHelper.buildTableTailer());  }  Iterator<Map.Entry<String,StringBuilder>> iterator=changedMap.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,StringBuilder> entry=iterator.next();    StringBuilder builder=componentMap.get(entry.getKey());    if (builder == null) {      builder=new StringBuilder();      componentMap.put(entry.getKey(),builder);    }    builder.append(entry.getValue().toString());    iterator.remove();  }}  }
class C{  public boolean isVariadic(){  return variadic;}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitLocalVariable(name,desc,signature,start.getLabel(),end.getLabel(),index);}  }
class C{  private CFunctionNodeColorizer(){}  }
class C{  public static boolean sleep(final long milliseconds){  try {    Thread.sleep(milliseconds);    return false;  } catch (  InterruptedException e) {    logger.warn("Thread {} has been interrupted",Thread.currentThread().getName(),e);    return true;  }}  }
class C{  public byte[] createImage(Projection proj,int scaledWidth,int scaledHeight,int includedLayerMask){  return createImage(proj,scaledWidth,scaledHeight,includedLayerMask,getBackground());}  }
class C{  public static String toHexString(ByteBuffer buf,String sep,int lineLen){  return toHexString(buf.array(),buf.arrayOffset() + buf.position(),buf.remaining(),sep,lineLen);}  }
class C{  public static float stringToLat(String text_lat){  int offset=0;  int hemisphere=1;  String s_seconds;  if (text_lat.length() > 7 && text_lat.charAt(6) != '.')   offset=1;  char[] contents=text_lat.toCharArray();  String s_degrees=String.valueOf(contents,offset,2);  String s_minutes=String.valueOf(contents,2 + offset,2);  if (text_lat.charAt(6 + offset) == '.') {    s_seconds=String.valueOf(contents,4 + offset,4);    if (text_lat.charAt(8 + offset) == 'S')     hemisphere=-1;  } else {    s_seconds=String.valueOf(contents,4 + offset,2);    if (text_lat.charAt(6 + offset) == 'S')     hemisphere=-1;  }  float result=Float.valueOf(s_degrees).floatValue() + (Float.valueOf(s_minutes).floatValue() / 60.0F) + (Float.valueOf(s_seconds).floatValue() / 3600.0F);  result*=hemisphere;  return result;}  }
class C{  public static int applicationVersionCode(final Context context){  int versionCode=0;  try {    versionCode=context.getPackageManager().getPackageInfo(context.getPackageName(),0).versionCode;  } catch (  PackageManager.NameNotFoundException e) {    Log.d("CHCP","Can't get version code",e);  }  return versionCode;}  }
class C{  public boolean contains(long seqno){  return startSeqno <= seqno && seqno <= endSeqno;}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  private static String toString(String attName,boolean v){  if (okToDisplayPropertyValue(attName)) {    return String.valueOf(v);  } else {    return OBFUSCATED_STRING;  }}  }
class C{  public PermissionImpl(String permission){  this.permission=permission;}  }
class C{  public static IntList incrList(IntList L,int x){  return L;}  }
class C{  public boolean isStandard(){  return gm.isStandard();}  }
class C{  public void unsubscribe(CimConnection cimConnection){  s_logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  s_logger.debug("Subscription Identifier for unsubscribe action :{}",_configuration.getSubscriptionsIdentifier());  cimConnection.unsubscribeForIndications(_configuration.getSubscriptionsIdentifier());  s_logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  private void showInternalServerErrorMessage(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_connection_error),getResources().getString(R.string.error_internal_server),getResources().getString(R.string.button_ok),null);}  }
class C{  public void applyLinearImpulse(float impulseX,float impulseY,float pointX,float pointY,boolean wake){  tmp.set(impulseX,impulseY);  tmp2.set(pointX,pointY);  body.applyLinearImpulse(tmp,tmp2,wake);}  }
class C{  public void addInvokestatic(int clazz,String name,String desc){  add(INVOKESTATIC);  addIndex(constPool.addMethodrefInfo(clazz,name,desc));  growStack(Descriptor.dataSize(desc));}  }
class C{  public static JvmArguments parseArguments(String arguments){  JvmArguments jvmArguments=new JvmArguments();  StringBuffer genericArgs=new StringBuffer();  if (arguments != null) {    for (    String arg : arguments.split(" ")) {      if (arg.startsWith("-Xms")) {        long initialHeap=getHeapArgValueInBytes(arg);        jvmArguments.setInitialHeap(initialHeap);      } else       if (arg.startsWith("-Xmx")) {        long maxHeap=getHeapArgValueInBytes(arg);        jvmArguments.setMaxHeap(maxHeap);      } else {        if (genericArgs.length() > 0) {          genericArgs.append(' ');        }        genericArgs.append(arg);      }    }  }  jvmArguments.setGenericArgs(genericArgs.toString());  return jvmArguments;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public void unload(){  this.drawable=null;}  }
class C{  public BFINode<EL> findClosest(ArrayList<BFINode<EL>> nodeList,InsDelUpdateStatistics stat){  int index=findClosestIndex(nodeList,stat);  if (index >= 0) {    return nodeList.get(index);  } else {    return null;  }}  }
class C{  public void checkRight(Table table,int rightMask){  if (!hasRight(table,rightMask)) {    throw DbException.get(ErrorCode.NOT_ENOUGH_RIGHTS_FOR_1,table.getSQL());  }}  }
class C{  protected final static VersionInfo fromMap(String pckg,Map info,ClassLoader clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  String module=null;  String release=null;  String timestamp=null;  if (info != null) {    module=(String)info.get(PROPERTY_MODULE);    if ((module != null) && (module.length() < 1))     module=null;    release=(String)info.get(PROPERTY_RELEASE);    if ((release != null) && ((release.length() < 1) || (release.equals("${pom.version}"))))     release=null;    timestamp=(String)info.get(PROPERTY_TIMESTAMP);    if ((timestamp != null) && ((timestamp.length() < 1) || (timestamp.equals("${mvn.timestamp}"))))     timestamp=null;  }  String clsldrstr=null;  if (clsldr != null)   clsldrstr=clsldr.toString();  return new VersionInfo(pckg,module,release,timestamp,clsldrstr);}  }
class C{  public static boolean isParent(NavigationNode potentialParent,NavigationNode node){  return potentialParent.isParent(node);}  }
class C{  public void cleanupResource(){synchronized (this.managedStatisticsResourcesMap) {    ConfigurationParameter[] names=getConfiguration();    if (names != null) {      for (int i=0; i < names.length; i++) {        ConfigurationParameter parm=names[i];        ((ConfigurationParameterImpl)parm).removeConfigurationParameterListener(this);      }    }    this.parms.clear();    Collection<StatisticResourceJmxImpl> statisticResources=managedStatisticsResourcesMap.values();    for (    StatisticResourceJmxImpl statisticResource : statisticResources) {      MBeanUtil.unregisterMBean(statisticResource);    }    this.managedStatisticsResourcesMap.clear();  }  MBeanUtil.unregisterMBean(managedSystemMemberCache);}  }
class C{  public static void checkHits(Random random,Query query,String defaultFieldName,IndexSearcher searcher,int[] results) throws IOException {  ScoreDoc[] hits=searcher.search(query,1000).scoreDocs;  Set<Integer> correct=new TreeSet<>();  for (int i=0; i < results.length; i++) {    correct.add(Integer.valueOf(results[i]));  }  Set<Integer> actual=new TreeSet<>();  for (int i=0; i < hits.length; i++) {    actual.add(Integer.valueOf(hits[i].doc));  }  Assert.assertEquals(query.toString(defaultFieldName),correct,actual);  QueryUtils.check(random,query,searcher,LuceneTestCase.rarely(random));}  }
class C{  private Promise<Void> promiseAction(final Action action,final ActionEvent event){  if (action instanceof PromisableAction) {    return ((PromisableAction)action).promise(event);  } else {    action.actionPerformed(event);    return Promises.resolve(null);  }}  }
class C{  public static Line fromTop(int margin,int marginUnit){  return new Line(1,Gravity.TOP,margin,marginUnit,DebugColors.next());}  }
class C{  public void mark(int readAheadLimit) throws IOException {  in.mark(readAheadLimit);}  }
class C{  public XML(String element_type,boolean close,boolean filter){  setElementType(element_type);  setNeedClosingTag(close);  setFilterState(filter);}  }
class C{  private int newLocal(int typecode){  int reg=nextreg;  int w=width(typecode);  nextreg=reg + w;  if (nextreg > max_locals)   max_locals=nextreg;  return reg;}  }
class C{  public final static Geo rotate(Geo v1,double angle,Geo v2,Geo ret){  double x=v1.x();  double y=v1.y();  double z=v1.z();  double c=Math.cos(angle);  double s=Math.sin(angle);  double b=1.0 - c;  double bx=b * x;  double by=b * y;  double bz=b * z;  double bxx=bx * x;  double bxy=bx * y;  double bxz=bx * z;  double byy=by * y;  double byz=by * z;  double bzz=bz * z;  double sx=s * x;  double sy=s * y;  double sz=s * z;  double m00=c + bxx;  double m11=c + byy;  double m22=c + bzz;  double m01=(-sz) + bxy;  double m10=sz + bxy;  double m12=(-sx) + byz;  double m21=sx + byz;  double m02=sy + bxz;  double m20=(-sy) + bxz;  double x2=v2.x();  double y2=v2.y();  double z2=v2.z();  if (ret == null) {    return new Geo(m00 * x2 + m01 * y2 + m02 * z2,m10 * x2 + m11 * y2 + m12 * z2,m20 * x2 + m21 * y2 + m22 * z2);  }  ret.initialize(m00 * x2 + m01 * y2 + m02 * z2,m10 * x2 + m11 * y2 + m12 * z2,m20 * x2 + m21 * y2 + m22 * z2);  return ret;}  }
class C{  private void analyze(File file,int burnin,String discreteVariableName) throws TraceException {  if (file.isFile()) {    try {      String name=file.getCanonicalPath();      report(name,burnin,discreteVariableName);    } catch (    IOException e) {    }  } else {    File[] files=file.listFiles();    for (    File f : files) {      if (f.isDirectory()) {        analyze(f,burnin,discreteVariableName);      } else       if (f.getName().endsWith(".log")) {        analyze(f,burnin,discreteVariableName);      }    }  }}  }
class C{  public static void warning(final String message,final Object... objects){  NaviLogger.warning(message,objects);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element qelement;  Attr attr;  Attr qattr;  String localElemName;  String localQElemName;  String localAttrName;  String localQAttrName;  doc=(Document)load("staff",false);  element=doc.createElementNS("http://www.w3.org/DOM/Test/elem","elem");  qelement=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","attr");  qattr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  localElemName=element.getLocalName();  localQElemName=qelement.getLocalName();  localAttrName=attr.getLocalName();  localQAttrName=qattr.getLocalName();  assertEquals("nodegetlocalname03_localElemName","elem",localElemName);  assertEquals("nodegetlocalname03_localQElemName","qelem",localQElemName);  assertEquals("nodegetlocalname03_localAttrName","attr",localAttrName);  assertEquals("nodegetlocalname03_localQAttrName","qattr",localQAttrName);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.178 -0500",hash_original_method="55B8ABCD808682E10A2965544061F7A5",hash_generated_method="287EF2A604F94B823DCF0CE559604AFE") public boolean isSealed(URL url){  return 1 == (sealBase.getTaintInt() + (sealBase.sameFile(url) ? 1 : 0));}  }
class C{  public final void printTotalMillis(){  printMillis(totalCount);}  }
class C{  public ConfigSettings read(){  ConfigSettings config=new ConfigSettings(ConfigEnum.IMPORT);  String name;  Node node;  NodeList list=root.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    node=list.item(i);    name=node.getNodeName().toUpperCase();    if (name.equals(SECTION_MODE)) {      parseModeConfig(node,config);    } else     if (name.equals(SECTION_EXTERNALS)) {      parseExternalsConfig(node,config);    } else     if (name.equals(SECTION_INPUT)) {      parseInputConfig(node,config);    } else     if (name.equals(SECTION_OUTPUT)) {      parseOutputConfig(node,config);    } else     if (name.equals(SECTION_CACHE)) {      parseCacheConfig(node,config);    } else     if (name.equals(SECTION_LOGGING)) {      parseLoggingConfig(node,config);    } else     if (name.equals(SECTION_DEBUG)) {      parseDebugConfig(node,config);    } else     if (name.equals(SECTION_FILTER)) {      parseFilterConfig(node,config);    }  }  return config;}  }
class C{  public static Field<Integer> ofInteger(String name,String description){  return new Field<>(name,Integer.class,description);}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);}  }
class C{  void quitProvisioningOperation(){  mProvisioningOperationHandler.getLooper().quit();}  }
class C{  public void load(Element element,Object o){  LayoutEditor p=(LayoutEditor)o;  String name=element.getAttribute("ident").getValue();  double x=0.0;  double y=0.0;  try {    x=element.getAttribute("xcen").getFloatValue();    y=element.getAttribute("ycen").getFloatValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert layoutslip center  attribute");  }  int type=LayoutSlip.SINGLE_SLIP;  try {    type=element.getAttribute("slipType").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert layoutslip type attribute");  }  LayoutSlip l=new LayoutSlip(name,new Point2D.Double(x,y),0.0,p,type);  Attribute a=element.getAttribute("blockname");  if (a != null) {    l.tBlockName=a.getValue();  }  a=element.getAttribute("connectaname");  if (a != null) {    l.connectAName=a.getValue();  }  a=element.getAttribute("connectbname");  if (a != null) {    l.connectBName=a.getValue();  }  a=element.getAttribute("connectcname");  if (a != null) {    l.connectCName=a.getValue();  }  a=element.getAttribute("connectdname");  if (a != null) {    l.connectDName=a.getValue();  }  l.setSignalA1Name(getElement(element,"signala1name"));  l.setSignalB1Name(getElement(element,"signalb1name"));  l.setSignalC1Name(getElement(element,"signalc1name"));  l.setSignalD1Name(getElement(element,"signald1name"));  l.setSignalA2Name(getElement(element,"signala2name"));  l.setSignalB2Name(getElement(element,"signalb2name"));  l.setSignalC2Name(getElement(element,"signalc2name"));  l.setSignalD2Name(getElement(element,"signald2name"));  try {    x=element.getAttribute("xa").getFloatValue();    y=element.getAttribute("ya").getFloatValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert levelxing a coords attribute");  }  l.setCoordsA(new Point2D.Double(x,y));  try {    x=element.getAttribute("xb").getFloatValue();    y=element.getAttribute("yb").getFloatValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert levelxing b coords attribute");  }  l.setCoordsB(new Point2D.Double(x,y));  l.setSignalAMast(getElement(element,"signalAMast"));  l.setSignalBMast(getElement(element,"signalBMast"));  l.setSignalCMast(getElement(element,"signalCMast"));  l.setSignalDMast(getElement(element,"signalDMast"));  l.setSensorA(getElement(element,"sensorA"));  l.setSensorB(getElement(element,"sensorB"));  l.setSensorC(getElement(element,"sensorC"));  l.setSensorD(getElement(element,"sensorD"));  l.setTurnout(getElement(element,"turnout"));  l.setTurnoutB(getElement(element,"turnoutB"));  if (element.getChild("states") != null) {    Element state=element.getChild("states");    if (state.getChild("A-C") != null) {      Element ac=state.getChild("A-C");      l.setTurnoutStates(LayoutSlip.STATE_AC,ac.getChild("turnout").getText(),ac.getChild("turnoutB").getText());    }    if (state.getChild("A-D") != null) {      Element ad=state.getChild("A-D");      l.setTurnoutStates(LayoutSlip.STATE_AD,ad.getChild("turnout").getText(),ad.getChild("turnoutB").getText());    }    if (state.getChild("B-D") != null) {      Element bd=state.getChild("B-D");      l.setTurnoutStates(LayoutSlip.STATE_BD,bd.getChild("turnout").getText(),bd.getChild("turnoutB").getText());    }    if (state.getChild("B-C") != null) {      Element bc=state.getChild("B-C");      l.setTurnoutStates(LayoutSlip.STATE_BC,bc.getChild("turnout").getText(),bc.getChild("turnoutB").getText());    }  }  p.slipList.add(l);}  }
class C{  public static char toChar(byte b){  return (char)(b & 0xFF);}  }
class C{  private static int appendTypeArgumentSignatures(char[] string,int start,boolean fullyQualifyTypeNames,StringBuffer buffer){  if (start >= string.length - 1) {    throw new IllegalArgumentException();  }  char c=string[start];  if (c != C_GENERIC_START) {    throw new IllegalArgumentException();  }  buffer.append('<');  int p=start + 1;  int count=0;  while (true) {    if (p >= string.length) {      throw new IllegalArgumentException();    }    c=string[p];    if (c == C_GENERIC_END) {      buffer.append('>');      return p;    }    if (count != 0) {      buffer.append(',');    }    int e=appendTypeArgumentSignature(string,p,fullyQualifyTypeNames,buffer);    count++;    p=e + 1;  }}  }
class C{  @Override public void displayHelpContext(String helpContextToDisplay){  for (  ViewSystem viewSystem : super.getViewSystem()) {    viewSystem.navigateAwayFromView(getCurrentView());  }  setCurrentView(View.HELP_CONTENTS_VIEW);  for (  ViewSystem viewSystem : super.getViewSystem()) {    viewSystem.setHelpContext(helpContextToDisplay);    viewSystem.displayView(View.HELP_CONTENTS_VIEW);  }}  }
class C{  protected void remoteCreateEntry(String regionName,String entryName,Object value) throws CacheException {  Region root=getRootRegion();  Region region=root.getSubregion(regionName);  region.create(entryName,value);  LogWriterUtils.getLogWriter().info("Put value " + value + " in entry "+ entryName+ " in region '"+ region.getFullPath()+ "'");}  }
class C{  public java.util.Set<Object> keySet(){  return graphicHash.keySet();}  }
class C{  public static ComponentUI createUI(JComponent component){  return new BegMenuItemUI();}  }
class C{  public String cmdline() throws IOException {  return read("cmdline");}  }
class C{  @Override public boolean showVertexLabelsDefault(){  return true;}  }
class C{  public void testReceive_UnconnectedCloseNull() throws Exception {  assertFalse(this.channel1.isConnected());  this.channel1.close();  assertFalse(this.channel1.isOpen());  try {    this.channel1.receive(null);    fail("Should throw a NPE here.");  } catch (  NullPointerException e) {  }}  }
class C{  public void testGetF18Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF18Momentary();  assertEquals(expResult,result);}  }
class C{  public boolean isIdle(){  return spdyConnection == null || spdyConnection.isIdle();}  }
class C{  protected static double sunMeanAnomaly(double daysSinceEpoch){  double N=ORBIT_RADS_PER_DAY * daysSinceEpoch;  N%=MoreMath.TWO_PI;  if (N < 0)   N+=MoreMath.TWO_PI;  double M0=N + epsilon_g - omega_bar_g;  if (M0 < 0)   M0+=MoreMath.TWO_PI;  return M0;}  }
class C{  protected SmallAttributeSet createSmallAttributeSet(AttributeSet a){  return new SmallConversionSet(a);}  }
class C{  public static double computeNewPriority_sigmoidFractionOfFriends(double priority,int sharedFriends,int myFriends){  double trustMultiplier=sigmoid(sharedFriends / (double)myFriends,0.3,13.0);  trustMultiplier=trustMultiplier + getGaussian(MEAN,VAR);  trustMultiplier=Math.min(trustMultiplier,1);  trustMultiplier=Math.max(trustMultiplier,0);  if (sharedFriends == 0) {    trustMultiplier=ProximitySimulation.EPSILON_TRUST;  }  return priority * trustMultiplier;}  }
class C{  public void addEmotesetStreams(Map<Integer,String> data){  emotesetStreams.putAll(data);}  }
class C{  private void initApi(){  client=getGoogleApiClient(this);  retrieveDeviceNode();}  }
class C{  public boolean equals(Object obj){  if (obj == null || (obj.getClass() != getClass())) {    return false;  }  AbstractCombinatorCondition c=(AbstractCombinatorCondition)obj;  return (c.firstCondition.equals(firstCondition) && c.secondCondition.equals(secondCondition));}  }
class C{  public AbListViewFooter(Context context){  super(context);  initView(context);}  }
class C{  public static TestSuite addAll(String property){  return addAll(getClassnames(property));}  }
class C{  @Override public String decode(String input){  return getHelpers().urlDecode(input);}  }
class C{  public String outputAdditionalStatsTipText(){  return "Output additional statistics (such as " + "std deviation of coefficients and t-statistics)";}  }
class C{  public short acceptNode(int testNode){  boolean foundKey=false;  KeyIterator ki=(KeyIterator)m_lpi;  org.apache.xpath.XPathContext xctxt=ki.getXPathContext();  Vector keys=ki.getKeyDeclarations();  QName name=ki.getName();  try {    int nDeclarations=keys.size();    for (int i=0; i < nDeclarations; i++) {      KeyDeclaration kd=(KeyDeclaration)keys.elementAt(i);      if (!kd.getName().equals(name))       continue;      foundKey=true;      XPath matchExpr=kd.getMatch();      double score=matchExpr.getMatchScore(xctxt,testNode);      if (score == kd.getMatch().MATCH_SCORE_NONE)       continue;      return DTMIterator.FILTER_ACCEPT;    }  } catch (  TransformerException se) {  }  if (!foundKey)   throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_XSLKEY_DECLARATION,new Object[]{name.getLocalName()}));  return DTMIterator.FILTER_REJECT;}  }
class C{  public static org.smpte_ra.schemas.st0429_8_2007.PKL.UserText buildPKLUserTextType_2007(String value,String language){  org.smpte_ra.schemas.st0429_8_2007.PKL.UserText userText=new org.smpte_ra.schemas.st0429_8_2007.PKL.UserText();  userText.setValue(value);  userText.setLanguage(language);  return userText;}  }
class C{  protected HttpResponse doReceiveResponse(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws HttpException, IOException {  HttpResponse response=null;  boolean isInstantly=request.getParams().isParameterTrue(EspHttpRequest.ESP_INSTANTLY);  if (isInstantly) {    ProtocolVersion version=new ProtocolVersion("HTTP",1,1);    StatusLine statusline=new BasicStatusLine(version,200,"OK");    context.setAttribute("timeout",1);    response=ResponseFactory.newHttpResponse(statusline,context);    Header contentLengthHeader=new BasicHeader(HTTP.CONTENT_LEN,"0");    response.addHeader(contentLengthHeader);  } else {    response=super.doReceiveResponse(request,conn,context);  }  if (response != null && response.getFirstHeader(HTTP.CONN_DIRECTIVE) == null) {    response.addHeader(HTTP.CONN_DIRECTIVE,HTTP.CONN_KEEP_ALIVE);  }  return response;}  }
class C{  static final public Identifier stubFor(Identifier name){  return Identifier.lookup(name + "_Stub");}  }
class C{  public static void unregisterDownloadStatusListener(OnFileDownloadStatusListener onFileDownloadStatusListener){  getFileDownloadManager().unregisterDownloadStatusListener(onFileDownloadStatusListener);}  }
class C{  public void skippedEntity(String name) throws SAXException {  if (contentHandler != null) {    contentHandler.skippedEntity(name);  }}  }
class C{  public List<GenericEntry> retrieveAllMailboxDumpRequests(Date fromDate) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  String url=BASE_URL + "mail/export/" + domain;  if (fromDate != null) {    url+="?fromDate=" + DATE_FORMAT.format(fromDate);  }  return getAllPages(new URL(url),GenericFeed.class);}  }
class C{  public static Set<Role> checkForRequiredRoles(Region<?,?> region){  try {    return waitForRequiredRoles(region,0);  } catch (  InterruptedException ie) {    Thread.currentThread().interrupt();    ((LocalRegion)region).getCancelCriterion().checkCancelInProgress(ie);    Assert.assertTrue(false,"checkForRequiredRoles cannot throw InterruptedException");    return Collections.emptySet();  }}  }
class C{  private String createTable(int rowCount,TreeMap<String,String> factTableCol2LookupCol,TreeMap<String,String> lookupCol2FactTableCol,TreeSet<String> usedCols) throws Exception {  try {    TreeSet<String> defaultColumns=new TreeSet<>(String.CASE_INSENSITIVE_ORDER);    StringBuffer sb=new StringBuffer();    for (int i=0; i < rowCount; ) {      LinkedList<String> columnValues=createRow(factTableCol2LookupCol,usedCols,defaultColumns);      if (!matchAllCompositeKeys(lookupCol2FactTableCol,columnValues)) {        if (unlinkableRowCount < unlinkableRowCountMax) {          unlinkableRowCount++;        } else {          continue;        }      }      for (      String c : columnValues)       sb.append(c + ",");      sb.deleteCharAt(sb.length() - 1);      sb.append(System.getProperty("line.separator"));      i++;    }    printColumnMappings(factTableCol2LookupCol,usedCols,defaultColumns);    return sb.toString();  } catch (  IOException e) {    e.printStackTrace();    System.exit(1);  }  return null;}  }
class C{  protected void failed(Throwable e,Description description){}  }
class C{  private boolean ruleR8(Node a,Node c){  List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);  for (  Node b : intoCArrows) {    if (!graph.isAdjacentTo(a,b))     continue;    if (!graph.isAdjacentTo(b,c))     continue;    if (!(graph.getEndpoint(b,a) == Endpoint.TAIL))     continue;    if (!(graph.getEndpoint(c,b) == Endpoint.TAIL))     continue;    if (graph.getEndpoint(a,b) == Endpoint.TAIL)     continue;    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R8",graph.getEdge(c,a)));    graph.setEndpoint(c,a,Endpoint.TAIL);    changeFlag=true;    return true;  }  return false;}  }
class C{  public void rebuildPanel(){  if (activeWorker != null && !activeWorker.isDone()) {    activeWorker.cancel(true);  }  panelImages.removeAll();  panelImages.revalidate();  scrollPane.repaint();  activeWorker=new ImageLoader(mediaFiles);  activeWorker.execute();}  }
class C{  public void build(){  for (  final LayerDefinition layer : layers) {    layer.build();  }}  }
class C{  public TemplateVariable(TemplateVariableType type,String name,String defaultValue,int[] offsets){  this(type,name,new String[]{defaultValue},offsets);}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId){  for (int i=0; i < Constants.DTDS_TLD.length; i++) {    if (publicId.equals(Constants.DTDS_TLD[i])) {      return new InputSource(getClass().getResourceAsStream(LUCEE_DTD_1_0));    }  }  if (publicId.equals("-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN")) {    return new InputSource(getClass().getResourceAsStream(SUN_DTD_1_1));  } else   if (publicId.equals("-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN")) {    return new InputSource(getClass().getResourceAsStream(SUN_DTD_1_2));  }  return null;}  }
class C{  public void delete(String name) throws IOException {  Object obj=map.get(name);  if (obj == null) {    throw new IOException("No extension found with name " + name);  }  map.remove(name);}  }
class C{  @Override public Void visitBinary(BinaryTree tree,AnnotatedTypeMirror type){  if (!type.isAnnotatedInHierarchy(REGEX) && TreeUtils.isStringConcatenation(tree)) {    AnnotatedTypeMirror lExpr=getAnnotatedType(tree.getLeftOperand());    AnnotatedTypeMirror rExpr=getAnnotatedType(tree.getRightOperand());    Integer lGroupCount=getMinimumRegexCount(lExpr);    Integer rGroupCount=getMinimumRegexCount(rExpr);    boolean lExprRE=lGroupCount != null;    boolean rExprRE=rGroupCount != null;    boolean lExprPart=lExpr.hasAnnotation(PartialRegex.class);    boolean rExprPart=rExpr.hasAnnotation(PartialRegex.class);    boolean lExprPoly=lExpr.hasAnnotation(PolyRegex.class);    boolean rExprPoly=rExpr.hasAnnotation(PolyRegex.class);    if (lExprRE && rExprRE) {      type.removeAnnotationInHierarchy(REGEX);      type.addAnnotation(createRegexAnnotation(lGroupCount + rGroupCount));    } else     if (lExprPoly && rExprPoly || lExprPoly && rExprRE || lExprRE && rExprPoly) {      type.addAnnotation(PolyRegex.class);    } else     if (lExprPart && rExprPart) {      String lRegex=getPartialRegexValue(lExpr);      String rRegex=getPartialRegexValue(rExpr);      String concat=lRegex + rRegex;      if (isRegex(concat)) {        int groupCount=getGroupCount(concat);        type.addAnnotation(createRegexAnnotation(groupCount));      } else {        type.addAnnotation(createPartialRegexAnnotation(concat));      }    } else     if (lExprRE && rExprPart) {      String rRegex=getPartialRegexValue(rExpr);      String concat="e" + rRegex;      type.addAnnotation(createPartialRegexAnnotation(concat));    } else     if (lExprPart && rExprRE) {      String lRegex=getPartialRegexValue(lExpr);      String concat=lRegex + "e";      type.addAnnotation(createPartialRegexAnnotation(concat));    }  }  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.ENUMERATOR__OWNING_ENUMERATION:    return getOwningEnumeration() != null;case TypesPackage.ENUMERATOR__LITERAL_VALUE:  return getLiteralValue() != LITERAL_VALUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  void align() throws IOException {  for (int i=0; i < lmargin; i++)   out.write(" ");}  }
class C{  public boolean isSuccess(){  return this.getDeliveryStatus() == DeliveryStatus.SUCCESS;}  }
class C{  public PieChart(CategorySeries dataset,DefaultRenderer renderer){  super(dataset,renderer);  mPieMapper=new PieMapper();}  }
class C{  public CacheLoaderException(String msg){  super(msg);}  }
class C{  public Boolean isD2On(){  return this.isDigitalOn(2);}  }
class C{  public void write(byte[] vector){  check(vector.length);  System.arraycopy(vector,0,buffer,write_pos,vector.length);  write_pos+=vector.length;}  }
class C{  public int number(){  return numStates;}  }
class C{  private void saveProperties() throws FileNotFoundException, IOException {  if (!commandLine.hasOption("Properties")) {    return;  }  java.util.List testFiles=getAllTestFiles();  String testFilesString=testFiles.isEmpty() ? "" : StringUtil.toCommaDelimitedString(testFiles);  Properties properties=new Properties();  properties.setProperty("TestFiles",testFilesString);  properties.store(new FileOutputStream(commandLine.getOption("Properties").getArg(0)),"Properties file for " + getClass());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:14.324 -0500",hash_original_method="3F662D74C7F5FA5E21AD89C24E03313D",hash_generated_method="76B33845503C0C8B0DD07E34FE5BC6C0") public void disableCarMode(int flags){  if (mService != null) {    try {      mService.disableCarMode(flags);    } catch (    RemoteException e) {      Log.e(TAG,"disableCarMode: RemoteException",e);    }  }}  }
class C{  StructuredGraph genInstrumentationGraph(StructuredGraph oldGraph,InstrumentationNode instrumentationNode){  StructuredGraph instrumentationGraph=new StructuredGraph(AllowAssumptions.YES);  Map<Node,Node> replacements=Node.newMap();  int index=0;  for (  Node current : nodes) {    for (    Node input : current.inputs()) {      if (input instanceof ValueNode) {        ValueNode valueNode=(ValueNode)input;        if (!nodes.isMarked(input) && !replacements.containsKey(input)) {          ParameterNode parameter=new ParameterNode(index++,StampPair.createSingle(valueNode.stamp()));          instrumentationGraph.addWithoutUnique(parameter);          instrumentationNode.addWeakDependency(valueNode);          replacements.put(input,parameter);        }      }    }  }  replacements=instrumentationGraph.addDuplicates(nodes,oldGraph,nodes.count(),replacements);  instrumentationGraph.start().setNext((FixedNode)replacements.get(begin.next()));  instrumentationGraph.start().setStateAfter((FrameState)replacements.get(begin.stateAfter()));  replacements.get(end).replaceAtPredecessor(instrumentationGraph.addWithoutUnique(new ReturnNode(null)));  return instrumentationGraph;}  }
class C{  public static void w(String tag,String msg){  if (sIsLogEnabled) {    Log.w(tag,getContent(getCurrentStackTraceElement()) + ">" + msg);  }}  }
class C{  public void testRecursion() throws Exception {  JFlexMojo mojo=newMojo("recursion-test");  mojo.execute();  File produced=getExpectedOutputFile(mojo);  assertTrue("produced file is a file: " + produced,produced.isFile());}  }
class C{  public boolean isValueTypeInteger(){  return valueType == ParameterValueType.INTEGER;}  }
class C{  public static void printMessage(int errorCode){  printMessage(errorCode,EMPTY_PARAMS);}  }
class C{  public boolean containsValue(Object value){  return internalMap.containsValue(value);}  }
class C{  public double R2(){  return R2;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.BINARY_LOGICAL_EXPRESSION;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Sage.remove(getString(stack));  return null;}  }
class C{  public RowValueFilter(WritableComparable<List<KeyValue>> comparator){  this.comparator=comparator;}  }
class C{  static void copyExtendedAttributes(int ofd,int nfd){  try {    int dfd=openat(ofd,HERE,(O_RDONLY | O_XATTR),0);    long dp=0L;    try {      dp=fdopendir(dfd);    } catch (    UnixException x) {      close(dfd);      throw x;    }    try {      byte[] name;      while ((name=readdir(dp)) != null) {        if (name[0] == '.') {          if (name.length == 1)           continue;          if (name.length == 2 && name[1] == '.')           continue;        }        copyExtendedAttribute(ofd,name,nfd);      }    }  finally {      closedir(dp);    }  } catch (  UnixException ignore) {  }}  }
class C{  @Beta public void reset(){  schedulersHook.set(null);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  void add(int v1,int v2){  if (isTOP())   return;  if ((size < CAPACITY) && !contains(v1,v2)) {    if (size == 0) {      numbers=new ValueNumberPair[CAPACITY];    }    ValueNumberPair p=new ValueNumberPair(v1,v2);    numbers[size]=p;    size++;  }}  }
class C{  public List<X509Certificate> checkServerTrusted(X509Certificate[] chain,String authType,String host) throws CertificateException {  return checkTrusted(chain,authType,host,false);}  }
class C{  java.sql.Time toSqlTime(Calendar calendar){  return new java.sql.Time(getTimeInMillis(calendar));}  }
class C{  public void addOperand(int startTick,int endTick,String text,Lifeline constraintLifeline) throws SequenceDiagramCheckedException {  if (operands.size() == 0 && this.startTick != startTick) {    throw new IllegalArgumentException("The start tick of the first operand must be equal to the start tick of the combined fragment");  }  operands.add(new Operand(startTick,endTick,text,constraintLifeline));}  }
class C{  @Deprecated public void expungeTag(String guid,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"expungeTag",mAuthenticationToken,guid);}  }
class C{  @VisibleForTesting LordnLog verify() throws IOException {  if (csvData.isEmpty()) {    throw new BadRequestException(String.format("LORDN verify task %s: Missing CSV payload.",actionLogId));  }  logger.infofmt("LORDN verify task %s: Sending request to URL %s.",actionLogId,url);  HTTPRequest req=new HTTPRequest(url,GET,validateCertificate().setDeadline(60d));  lordnRequestInitializer.initialize(req,tld);  HTTPResponse rsp=fetchService.fetch(req);  logger.infofmt("LORDN verify task %s response: HTTP response code %d, response data: %s",actionLogId,rsp.getResponseCode(),rsp.getContent());  if (rsp.getResponseCode() == SC_NO_CONTENT) {    throw new ConflictException("Not ready");  }  if (rsp.getResponseCode() != SC_OK) {    throw new UrlFetchException(String.format("LORDN verify task %s: Failed to verify LORDN upload to MarksDB.",actionLogId),req,rsp);  }  LordnLog log=LordnLog.parse(ByteSource.wrap(rsp.getContent()).asCharSource(UTF_8).readLines());  if (log.getStatus() == LordnLog.Status.ACCEPTED) {    logger.infofmt("LORDN verify task %s: Upload accepted",actionLogId);  } else {    logger.severefmt("LORDN verify task %s: Upload rejected with reason: %s",actionLogId,log);  }  for (  Entry<String,LordnLog.Result> result : log) {switch (result.getValue().getOutcome()) {case OK:      break;case WARNING:case ERROR:    logger.warning(result.toString());  break;default :logger.warningfmt("LORDN verify task %s: Unexpected outcome: %s",actionLogId,result.toString());break;}}return log;}  }
class C{  public SQLRecoverableException(String reason){  super(reason,null,0);}  }
class C{  protected ExportedVariableBindingImpl(){  super();}  }
class C{  public static double[][] addMatrix(double[][] a,double[][] b){  double[][] c=new double[3][3];  for (int i=0; i < c.length; i++) {    for (int j=0; j < c[i].length; j++) {      c[i][j]=a[i][j] + b[i][j];    }  }  return c;}  }
class C{  public boolean isSolvable(){  return a * d - b * c != 0;}  }
class C{  public @CheckForNull BugPattern lookupBugPattern(String bugType){  if (bugType == null) {    return null;  }  return bugPatternMap.get(bugType);}  }
class C{  public static Builder builder(UnregisterRequest request){  return new Builder(request);}  }
class C{  public void touch(){  lastSeen=new Date();}  }
class C{  private Entity ce(){  return clientgui.getClient().getGame().getEntity(cen);}  }
class C{  public static boolean isToday(Date date,Clock clock){  Date truncatedDate=toFirstSecond(date);  Date today=getToday(clock);  return Objects.equals(truncatedDate,today);}  }
class C{  private TransportNetwork buildNetworkFromBundleZip(String networkId){  File dataDirectory=new File(cacheDir,networkId);  if (!dataDirectory.exists() || dataDirectory.list().length == 0) {    if (sourceBucket != null) {      LOG.info("Downloading graph input files from S3.");      dataDirectory.mkdirs();      S3Object graphDataZipObject=s3.getObject(sourceBucket,networkId + ".zip");      ZipInputStream zis=new ZipInputStream(graphDataZipObject.getObjectContent());      try {        ZipEntry entry;        while ((entry=zis.getNextEntry()) != null) {          File entryDestination=new File(dataDirectory,entry.getName());          entryDestination.getParentFile().mkdirs();          if (entry.isDirectory())           entryDestination.mkdirs(); else {            OutputStream entryFileOut=new FileOutputStream(entryDestination);            IOUtils.copy(zis,entryFileOut);            entryFileOut.close();          }        }        zis.close();      } catch (      Exception e) {        LOG.info("Error retrieving transportation network input files",e);      }    } else {      LOG.info("Input files were not found.");      return null;    }  } else {    LOG.info("Input files were found locally. Using these files from the cache.");  }  TransportNetwork network;  try {    network=TransportNetwork.fromDirectory(new File(cacheDir,networkId));  } catch (  DuplicateFeedException e) {    LOG.error("Duplicate feeds in transport network {}",networkId,e);    throw new RuntimeException(e);  }  network.networkId=networkId;  return network;}  }
class C{  public void actionPerformed(ActionEvent e){  if (AWTEventMonitor.actionListener_private != null) {    AWTEventMonitor.actionListener_private.actionPerformed(e);  }}  }
class C{  public JCheckBox(String text,Icon icon,boolean selected){  super(text,icon,selected);  setUIProperty("borderPainted",Boolean.FALSE);  setHorizontalAlignment(LEADING);}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  this.knnDistance=in.readDouble();}  }
class C{  public void init(){  int OneDayMinutes=24 * 60;  _scheduler.scheduleAtFixedRate(new PasswordExpireMailNotifier(),getFirstDelayInMin(),OneDayMinutes,TimeUnit.MINUTES);}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  public String useLaplaceTipText(){  return "Whether counts at leaves are smoothed based on Laplace.";}  }
class C{  @Override protected AudioBufFrame doFilter(AudioBufFrame frame){  if (mVoiceVolume != 1.0f) {    ShortBuffer dstShort=frame.buf.asShortBuffer();    for (int i=0; i < dstShort.limit(); i++) {      dstShort.put(i,(short)(dstShort.get(i) * mVoiceVolume));    }    dstShort.rewind();  }  return frame;}  }
class C{  public static List<SourcePlugin> buildPluginList(String... pluginIds){  List<SourcePlugin> result=Lists.newArrayListWithExpectedSize(pluginIds.length);  for (  String pluginId : pluginIds) {    result.add(getSourcePlugin(pluginId));  }  return result;}  }
class C{  public boolean addCIFSShare(String mountPath,String shareName,String comment,int maxusers,String forcegroup){  if (log.isDebugEnabled()) {    log.debug("Add CIFS share to volume with params[volname,shareName,comment,maxusers]" + mountPath + ","+ shareName+ ","+ comment+ ","+ maxusers);  }  FlexFileShare share=new FlexFileShare(server.getNaServer(),mountPath);  return share.addCIFSShare(shareName,comment,maxusers,forcegroup);}  }
class C{  public void cancelEmptyTouchAreaFeedback(){  removeMessages(EMPTY_TOUCH_AREA);  if (mCachedTouchedNode != null) {    mCachedTouchedNode.recycle();    mCachedTouchedNode=null;  }}  }
class C{  @Override public void onReceive(Context context,Intent intent){}  }
class C{  public static String deepToString(final Object o){  if (o == null) {    return null;  }  if (o instanceof String) {    return (String)o;  }  final StringBuilder str=new StringBuilder();  final Set<String> dejaVu=new HashSet<String>();  recursiveDeepToString(o,str,dejaVu);  return str.toString();}  }
class C{  public static void addResourceSource(ResourceSource source){  ALL_RESOURCE_SOURCES.add(source);}  }
class C{  public void testRandomHugeStrings() throws Exception {  Analyzer analyzer=new ThaiAnalyzer();  checkRandomData(random(),analyzer,100 * RANDOM_MULTIPLIER,8192);  analyzer.close();}  }
class C{  public AdditiveOperator createAdditiveOperatorFromString(EDataType eDataType,String initialValue){  AdditiveOperator result=AdditiveOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  @Subscribe public void targetAssignDistributionSet(final TargetAssignDistributionSetEvent targetAssignDistributionSetEvent){  final URI targetAdress=targetAssignDistributionSetEvent.getTarget().getTargetInfo().getAddress();  if (!IpUtil.isAmqpUri(targetAdress)) {    return;  }  final String controllerId=targetAssignDistributionSetEvent.getTarget().getControllerId();  final Collection<org.eclipse.hawkbit.repository.model.SoftwareModule> modules=targetAssignDistributionSetEvent.getSoftwareModules();  final DownloadAndUpdateRequest downloadAndUpdateRequest=new DownloadAndUpdateRequest();  downloadAndUpdateRequest.setActionId(targetAssignDistributionSetEvent.getActionId());  final String targetSecurityToken=systemSecurityContext.runAsSystem(null);  downloadAndUpdateRequest.setTargetSecurityToken(targetSecurityToken);  for (  final org.eclipse.hawkbit.repository.model.SoftwareModule softwareModule : modules) {    final SoftwareModule amqpSoftwareModule=convertToAmqpSoftwareModule(targetAssignDistributionSetEvent.getTarget(),softwareModule);    downloadAndUpdateRequest.addSoftwareModule(amqpSoftwareModule);  }  final Message message=getMessageConverter().toMessage(downloadAndUpdateRequest,createConnectorMessageProperties(targetAssignDistributionSetEvent.getTenant(),controllerId,EventTopic.DOWNLOAD_AND_INSTALL));  amqpSenderService.sendMessage(message,targetAdress);}  }
class C{  public static int findRowIdColumnIndex(String[] columnNames){  int length=columnNames.length;  for (int i=0; i < length; i++) {    if (columnNames[i].equals("_id")) {      return i;    }  }  return -1;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public void testBug25399() throws Exception {  assertEquals("\\' {d}",getSingleValueWithQuery("SELECT '\\\\\\' {d}'"));}  }
class C{  private int awaitDone(boolean timed,long nanos) throws InterruptedException {  final long deadline=timed ? System.nanoTime() + nanos : 0L;  WaitNode q=null;  boolean queued=false;  for (; ; ) {    if (Thread.interrupted()) {      removeWaiter(q);      throw new InterruptedException();    }    int s=state;    if (s > COMPLETING) {      if (q != null)       q.thread=null;      return s;    } else     if (s == COMPLETING)     Thread.yield(); else     if (q == null)     q=new WaitNode(); else     if (!queued)     queued=UNSAFE.compareAndSwapObject(this,waitersOffset,q.next=waiters,q); else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos <= 0L) {        removeWaiter(q);        return state;      }      LockSupport.parkNanos(this,nanos);    } else     LockSupport.park(this);  }}  }
class C{  public static boolean fileExists(String filename){  return new File(filename).exists();}  }
class C{  public static Drawable mockDrawable(){  return mockDrawable(FakeDrawable.class);}  }
class C{  public void clear(){  clear(DEFAULT_CAPACITY);}  }
class C{  public static CGPoint ccpRPerp(final CGPoint v){  return ccp(v.y,-v.x);}  }
class C{  public boolean hasCountry(){  return super.hasElement(Country.KEY);}  }
class C{  public void logError(final Level level,final String message,final Error e){  try {    Logger errors=LoggingFactory.getLogger(LoggingFactory.NAME_ERROR_LOGGER);    errors.logThrowable(level,message,e);  } catch (  LoggingException ex) {    ex.printStackTrace();  }  if (logLevel.intValue() > level.intValue()) {    return;  }  logThrowable(level,message,e);}  }
class C{  public void finishActivity(Activity activity){  if (mActivityStack != null && activity != null) {    mActivityStack.remove(activity);    activity.finish();  }}  }
class C{  private List favoriteToList(Favorite f,boolean found){  List list=new ArrayList();  list.add(f.code);  list.add(f.emoteset);  if (found) {    list.add(0);  } else {    list.add(f.notFoundCount + 1);  }  return list;}  }
class C{  public static MemoryAllocator createOffHeapStorage(StatisticsFactory sf,long offHeapMemorySize,DistributedSystem system){  if (offHeapMemorySize == 0 || Boolean.getBoolean(InternalLocator.FORCE_LOCATOR_DM_TYPE)) {    return null;  }  if (offHeapMemorySize < MIN_SLAB_SIZE) {    throw new IllegalArgumentException("The amount of off heap memory must be at least " + MIN_SLAB_SIZE + " but it was set to "+ offHeapMemorySize);  }  validateVmCompatibility();  if (system == null) {    throw new IllegalArgumentException("InternalDistributedSystem is null");  }  OutOfOffHeapMemoryListener ooohml=new DisconnectingOutOfOffHeapMemoryListener((InternalDistributedSystem)system);  return basicCreateOffHeapStorage(sf,offHeapMemorySize,ooohml);}  }
class C{  private void verifyVolumeResults() throws Exception {  log.info("Verifying updated Volume source/target Volume results for VolumeAccessStateLinkStatusMigration.");  for (  URI volumeURI : volumeAccessStateLinkStatusURIs) {    Volume volume=_dbClient.queryObject(Volume.class,volumeURI);    if (volume.getPersonality() != null) {      if (volume.getPersonality().equalsIgnoreCase(Volume.PersonalityTypes.SOURCE.toString())) {        Assert.assertTrue("Source volume MUST be READWRITE",volume.getAccessState().equals(Volume.VolumeAccessState.READWRITE.toString()));        Assert.assertTrue("Source volume MUST be IN_SYNC",volume.getLinkStatus().equals(Volume.LinkStatus.IN_SYNC.toString()));      } else       if (volume.getPersonality().equalsIgnoreCase(Volume.PersonalityTypes.TARGET.toString())) {        Assert.assertTrue("Target volume MUST be NOT_READY",volume.getAccessState().equals(Volume.VolumeAccessState.NOT_READY.toString()));        Assert.assertTrue("Target volume MUST be IN_SYNC",volume.getLinkStatus().equals(Volume.LinkStatus.IN_SYNC.toString()));      } else       if (volume.getPersonality().equalsIgnoreCase(Volume.PersonalityTypes.METADATA.toString())) {        Assert.assertTrue("Metadata volume MUST be NOT_READY",volume.getAccessState().equals(Volume.VolumeAccessState.NOT_READY.toString()));      } else {        Assert.assertTrue("Volume MUST be READWRITE",volume.getAccessState().equals(Volume.VolumeAccessState.READWRITE.toString()));      }    } else {      Assert.assertTrue("Volume MUST be READWRITE",volume.getAccessState().equals(Volume.VolumeAccessState.READWRITE.toString()));    }  }}  }
class C{  @Override public List<byte[]> mget(final byte[]... keys){  checkIsInMultiOrPipeline();  client.mget(keys);  return client.getBinaryMultiBulkReply();}  }
class C{  public <T extends CnATreeElement>T save(CnATreeElement container,Class<T> clazz,String typeId) throws CommandException {  String title=null;  if (typeId != null) {    title=HitroUtil.getInstance().getTypeFactory().getMessage(typeId);  }  if (log.isDebugEnabled()) {    log.debug("Creating new instance of " + clazz.getName() + " in "+ container+ " with title: "+ title);  }  CreateElement<T> saveCommand=new CreateElement<T>(container,clazz,title);  saveCommand.setInheritAuditPermissions(true);  saveCommand=getCommandService().executeCommand(saveCommand);  if (Activator.getDefault().getPluginPreferences().getBoolean(PreferenceConstants.USE_AUTOMATIC_VALIDATION)) {    validateElement(saveCommand.getNewElement());  }  return saveCommand.getNewElement();}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.176 -0400",hash_original_method="1A624863B23DBA94507E174DAA65467A",hash_generated_method="D2511D121D084D09327B37849266F3A2") public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public List<ReferenceType> findClassesMatchingPattern(String pattern) throws NoSessionException {  ensureActiveSession();  List<ReferenceType> result=new ArrayList<ReferenceType>();  if (pattern.startsWith("*.")) {    pattern=pattern.substring(1);    for (    ReferenceType type : vm().allClasses()) {      if (type.name().endsWith(pattern)) {        result.add(type);      }    }    return result;  } else {    return vm().classesByName(pattern);  }}  }
class C{  public UF1(){  this(30);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private String checkPath(String p,Integer line,Integer col,String msg,String source,Integer errorCode){  boolean result=!this.source.getNameForReporting().equals(p) && !this.source.isIncludedFile(p);  if (result) {    return (new StringBuilder(" [").append(new GeneratedCodeMarker().getMessage())).append(": ").append(new PathInfo(p).getMessage()).append(", ").append(new LineInfo(line == null ? 0 : line.intValue()).getMessage()).append(", ").append(new ColumnInfo(col == null ? 0 : col.intValue()).getMessage()).append("]").toString();  } else {    return null;  }}  }
class C{  public static Insanity[] checkSanity(CacheEntry... cacheEntries){  FieldCacheSanityChecker sanityChecker=new FieldCacheSanityChecker();  return sanityChecker.check(cacheEntries);}  }
class C{  public void testGenerateDatasourceDocumentation() throws Exception {  Writer writer=new FileWriter(System.getProperty("basedir") + "/target/datasource.log");  writer.write(this.generator.generateDatasourceDocumentation());  writer.close();}  }
class C{  static public double perc(double value,double max){  return (value / max) * 100.0;}  }
class C{  public ScrollBar(HotSpot parent,String orientation){  this.setOrientation(orientation);  this.initializeUIControls(parent);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep deleteSnapshot(@PathParam("id") URI id) throws InternalException {  String task=UUID.randomUUID().toString();  _log.info(String.format("FileSnapshotDelete --- Snapshot id: %1$s, Task: %2$s",id,task));  ArgValidator.checkFieldUriType(id,Snapshot.class,"id");  Snapshot snap=queryResource(id);  Operation op=null;  if (snap != null) {    ArgValidator.checkReference(Snapshot.class,id,checkForDelete(snap));    if (snap.getInactive()) {      op=new Operation();      op.setResourceType(ResourceOperationTypeEnum.DELETE_FILE_SNAPSHOT);      op.ready();      _dbClient.createTaskOpStatus(Snapshot.class,snap.getId(),task,op);    } else {      FileShare fs=_permissionsHelper.getObjectById(snap.getParent(),FileShare.class);      if (null != fs) {        StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());        op=_dbClient.createTaskOpStatus(Snapshot.class,snap.getId(),task,ResourceOperationTypeEnum.DELETE_FILE_SNAPSHOT);        FileServiceApi fileServiceApi=FileService.getFileShareServiceImpl(fs,_dbClient);        fileServiceApi.deleteSnapshot(device.getId(),null,snap.getId(),false,FileControllerConstants.DeleteTypeEnum.FULL.toString(),task);        auditOp(OperationTypeEnum.DELETE_FILE_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,snap.getId().toString(),device.getId().toString());      }    }  }  return toTask(snap,task,op);}  }
class C{  static FileChannel newFileChannel(int dfd,UnixPath path,String pathForPermissionCheck,Set<? extends OpenOption> options,int mode) throws UnixException {  Flags flags=Flags.toFlags(options);  if (!flags.read && !flags.write) {    if (flags.append) {      flags.write=true;    } else {      flags.read=true;    }  }  if (flags.read && flags.append)   throw new IllegalArgumentException("READ + APPEND not allowed");  if (flags.append && flags.truncateExisting)   throw new IllegalArgumentException("APPEND + TRUNCATE_EXISTING not allowed");  FileDescriptor fdObj=open(dfd,path,pathForPermissionCheck,flags,mode);  return FileChannelImpl.open(fdObj,path.toString(),flags.read,flags.write,flags.append,null);}  }
class C{  public boolean bitValue(){  return this.bit;}  }
class C{  public static String addFonts(final String fontDirs,final String failed){  final StringTokenizer fontPaths=new StringTokenizer(fontDirs,",");  while (fontPaths.hasMoreTokens()) {    String fontPath=fontPaths.nextToken();    if (!fontPath.endsWith("/") && !fontPath.endsWith("\\")) {      fontPath+=separator;    }    addTTDir(fontPath,failed);  }  return failed;}  }
class C{  private void addPathSeparator(StringBuilder builder){  if (builder.length() != 0) {    builder.append('/');  }}  }
class C{  public void addAnnotatedClassNoBidirectionalUpdate(TypeWithAnnotations type){  if (null == annotatedTypes) {    annotatedTypes=new TypeWithAnnotationsSet();  }  annotatedTypes.addOrUpdate(type);}  }
class C{  public T caseAssignmentExpression(AssignmentExpression object){  return null;}  }
class C{  public synchronized void remove(int index){  mCategories.remove(index);  mValues.remove(index);}  }
class C{  @Override public int compareTo(Object o1){  int result;  if (o1 instanceof ComparableObjectItem) {    ComparableObjectItem that=(ComparableObjectItem)o1;    return this.x.compareTo(that.x);  } else {    result=1;  }  return result;}  }
class C{  public static Image convert(BufferedImage srcImage,Display display){  return new Image(display,convertToImageData(srcImage));}  }
class C{  public void unsafeSetLogFile(File value){  this.logFile=value;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.GUARD___ANONYMOUS_GUARD_11:    getAnonymous_guard_1_1().clear();  getAnonymous_guard_1_1().addAll((Collection<? extends Anonymous_guard_1_>)newValue);return;case UmplePackage.GUARD___CODE_1:setCode_1((String)newValue);return;case UmplePackage.GUARD___ANONYMOUS_GUARD_21:getAnonymous_guard_2_1().clear();getAnonymous_guard_2_1().addAll((Collection<? extends Anonymous_guard_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private synchronized void switchRemovedFromStore(DatapathId dpid){  if (floodlightProvider.getRole() != HARole.STANDBY) {    return;  }  IOFSwitch oldSw=syncedSwitches.remove(dpid);  if (oldSw != null) {    addUpdateToQueue(new SwitchUpdate(dpid,SwitchUpdateType.REMOVED));  } else {  }}  }
class C{  private void clearInstrumentation(){  nodeExpander.resetCounter();  metrics.set(METRIC_NODES_EXPANDED,0);  metrics.set(METRIC_MAX_RECURSIVE_DEPTH,0);  metrics.set(METRIC_PATH_COST,0.0);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProjectType[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public BaseShareRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  private ComponentName findWebSearchActivity(ComponentName globalSearchActivity){  if (globalSearchActivity == null) {    return null;  }  Intent intent=new Intent(Intent.ACTION_WEB_SEARCH);  intent.setPackage(globalSearchActivity.getPackageName());  List<ResolveInfo> activities=queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);  if (activities != null && !activities.isEmpty()) {    ActivityInfo ai=activities.get(0).activityInfo;    return new ComponentName(ai.packageName,ai.name);  }  Log.w(LOG_TAG,"No web search activity found");  return null;}  }
class C{  String validate(String userInput){  for (int i=0; i < userInput.length(); ++i) {    char ch=userInput.charAt(i);    if (!Character.isLetter(ch) && !Character.isDigit(ch) && !Character.isWhitespace(ch))     throw new IllegalArgumentException("Illegal user input");  }  @SuppressWarnings("tainting") @Untainted String result=userInput;  return result;}  }
class C{  private static void updateWindowUI(Window window){  SwingUtilities.updateComponentTreeUI(window);  Window ownedWins[]=window.getOwnedWindows();  for (  Window w : ownedWins) {    updateWindowUI(w);  }}  }
class C{  @Override public final boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (!(obj instanceof Scheme))   return false;  Scheme s=(Scheme)obj;  return (name.equals(s.name) && defaultPort == s.defaultPort && layered == s.layered && socketFactory.equals(s.socketFactory));}  }
class C{  public JSONAPIDocument(T data){  this.data=data;}  }
class C{  @Override public void addCancellableChangedListener(final CommandCancellableListener listener){  cancellableChangedListeners.addListener(listener);}  }
class C{  @Override public void drawRangeGridline(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Rectangle2D dataArea,double value){  Range range=axis.getRange();  if (!range.contains(value)) {    return;  }  PlotOrientation orientation=plot.getOrientation();  double v=axis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());  Line2D line=null;  if (orientation == PlotOrientation.HORIZONTAL) {    line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());  } else   if (orientation == PlotOrientation.VERTICAL) {    line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);  }  Paint paint=plot.getRangeGridlinePaint();  if (paint == null) {    paint=CategoryPlot.DEFAULT_GRIDLINE_PAINT;  }  g2.setPaint(paint);  Stroke stroke=plot.getRangeGridlineStroke();  if (stroke == null) {    stroke=CategoryPlot.DEFAULT_GRIDLINE_STROKE;  }  g2.setStroke(stroke);  g2.draw(line);}  }
class C{  public IP preIP(){  return new IP(value - 1);}  }
class C{  private void layoutComponents(){  setLayout(new GridBagLayout());  setBorder(new CompoundBorder(new TitledBorder(DISPLAY_NAME),new EmptyBorder(6,6,6,6)));  setToolTipText(DESCRIPTION);  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridheight=1;  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=FIELD_INSETS;  c.gridx=0;  c.gridy=0;  c.weightx=1.0f;  c.weighty=0;  add(emptyImage,c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Height"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(height,c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Width"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(width,c);  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  add(Box.createVerticalStrut(12),c);  c.gridy++;  c.insets=FIELD_INSETS;  add(existingImage,c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Image"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(createImageFilePanel(),c);  c.anchor=GridBagConstraints.NORTHWEST;  c.fill=GridBagConstraints.BOTH;  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weighty=1.0f;  add(Box.createGlue(),c);}  }
class C{  private DSAParameters generateParameters_FIPS186_3(){  Digest d=digest;  int outlen=d.getDigestSize() * 8;  int seedlen=N;  byte[] seed=new byte[seedlen / 8];  int n=(L - 1) / outlen;  int b=(L - 1) % outlen;  byte[] output=new byte[d.getDigestSize()];  for (; ; ) {    random.nextBytes(seed);    hash(d,seed,output);    BigInteger U=new BigInteger(1,output).mod(ONE.shiftLeft(N - 1));    BigInteger q=ONE.shiftLeft(N - 1).add(U).add(ONE).subtract(U.mod(TWO));    if (!q.isProbablePrime(certainty)) {      continue;    }    byte[] offset=Arrays.clone(seed);    int counterLimit=4 * L;    for (int counter=0; counter < counterLimit; ++counter) {      BigInteger W=ZERO;      for (int j=0, exp=0; j <= n; ++j, exp+=outlen) {        inc(offset);        hash(d,offset,output);        BigInteger Vj=new BigInteger(1,output);        if (j == n) {          Vj=Vj.mod(ONE.shiftLeft(b));        }        W=W.add(Vj.shiftLeft(exp));      }      BigInteger X=W.add(ONE.shiftLeft(L - 1));      BigInteger c=X.mod(q.shiftLeft(1));      BigInteger p=X.subtract(c.subtract(ONE));      if (p.bitLength() != L) {        continue;      }      if (p.isProbablePrime(certainty)) {        if (usageIndex >= 0) {          BigInteger g=calculateGenerator_FIPS186_3_Verifiable(d,p,q,seed,usageIndex);          if (g != null) {            return new DSAParameters(p,q,g,new DSAValidationParameters(seed,counter,usageIndex));          }        }        BigInteger g=calculateGenerator_FIPS186_3_Unverifiable(p,q,random);        return new DSAParameters(p,q,g,new DSAValidationParameters(seed,counter));      }    }  }}  }
class C{  protected void sequence_DebuggerStatement(ISerializationContext context,DebuggerStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static Properties loadProperties(Supplier<ClassLoader> classLoader,String classpathResource){  try (InputStream stream=classLoader.get().getResourceAsStream(classpathResource)){    Properties props=new Properties();    props.load(stream);    return props;  } catch (  IOException e) {    throw new IllegalStateException("Unable to find or read the '" + classpathResource + "' file using the "+ classLoader+ " class loader",e);  }}  }
class C{  public static void println(String message){  if (Options.verbose)   out.println(message);}  }
class C{  static public final int random(int start,int end){  return start + random.nextInt(end - start + 1);}  }
class C{  private void parseFetcherConfiguration(Element configuration){  _fetchersConfDataList=new ArrayList<FetcherConfigurationData>();  NodeList nodes=configuration.getChildNodes();  int n=0;  for (int i=0; i < nodes.getLength(); i++) {    Node node=nodes.item(i);    if (node.getNodeType() == Node.ELEMENT_NODE) {      n++;      Element fetcherElem=(Element)node;      String className;      Node classNameNode=fetcherElem.getElementsByTagName("classname").item(0);      if (classNameNode == null) {        throw new RuntimeException("No tag 'classname' in fetcher " + n);      }      className=classNameNode.getTextContent();      if (className.equals("")) {        throw new RuntimeException("Empty tag 'classname' in fetcher " + n);      }      Node appTypeNode=fetcherElem.getElementsByTagName("applicationtype").item(0);      if (appTypeNode == null) {        throw new RuntimeException("No tag or invalid tag 'applicationtype' in fetcher " + n + " classname "+ className);      }      String appTypeStr=appTypeNode.getTextContent();      if (appTypeStr == null) {        logger.error("Application type is not specified in fetcher " + n + " classname "+ className+ ". Skipping this configuration.");        continue;      }      ApplicationType appType=new ApplicationType(appTypeStr);      Map<String,String> paramsMap=Utils.getConfigurationParameters(fetcherElem);      FetcherConfigurationData fetcherData=new FetcherConfigurationData(className,appType,paramsMap);      _fetchersConfDataList.add(fetcherData);    }  }}  }
class C{  @Override public void updateBinaryStream(String columnLabel,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBinaryStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private boolean hasZip64Extra(ZipArchiveEntry ze){  return ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID) != null;}  }
class C{  protected synchronized void addOrUpdateVersionHistory(Resource resource,BigDecimal version,boolean published,BaseAction action){  log.info("Adding or updating version: " + version.toPlainString());  VersionHistory versionHistory;  VersionHistory existingVersionHistory=resource.findVersionHistory(version);  if (existingVersionHistory == null) {    versionHistory=new VersionHistory(version,resource.getStatus());    resource.addVersionHistory(versionHistory);    log.info("Adding VersionHistory for version " + version.toPlainString());  } else {    versionHistory=existingVersionHistory;    log.info("Updating VersionHistory for version " + version.toPlainString());  }  versionHistory.setDoi(resource.getDoi());  versionHistory.setStatus(resource.getIdentifierStatus());  versionHistory.setChangeSummary(resource.getChangeSummary());  versionHistory.setRecordsPublished(resource.getRecordsPublished());  versionHistory.setRecordsByExtension(resource.getRecordsByExtension());  User modifiedBy=action.getCurrentUser();  if (modifiedBy != null) {    versionHistory.setModifiedBy(modifiedBy);  }  if (published) {    versionHistory.setReleased(new Date());  }}  }
class C{  public GapZone(int ID,MultiPolygon poly){  this.gapID=ID;  this.gapPolygon=poly;  this.minorActivityCount=0;  this.majorActivityCount=0;  this.activityCount=new Integer[24];  this.activityDuration=new Integer[24];  for (int i=0; i < this.activityCount.length; i++) {    this.activityCount[i]=0;    this.activityDuration[i]=0;  }}  }
class C{  void createStarImportScope() throws Exception {  log("createStarImportScope");  PackageSymbol pkg=new PackageSymbol(names.fromString("pkg"),symtab.rootPackage);  Method importAll;  try {    Class<?> c=Class.forName("com.sun.tools.javac.code.Scope$StarImportScope");    Constructor ctor=c.getDeclaredConstructor(new Class[]{Symbol.class});    importAll=c.getDeclaredMethod("importAll",new Class[]{Scope.class});    starImportScope=(Scope)ctor.newInstance(new Object[]{pkg});  } catch (  ClassNotFoundException e) {    starImportScope=new ImportScope(pkg);    importAll=null;  }  starImportModel=new Model();  for (  Symbol imp : imports) {    Scope members=imp.members();    if (importAll != null) {      importAll.invoke(starImportScope,members);    } else {      Scope fromScope=members;      Scope toScope=starImportScope;      for (Scope.Entry e=fromScope.elems; e != null; e=e.sibling) {        if (e.sym.kind == TYP && !toScope.includes(e.sym))         toScope.enter(e.sym,fromScope);      }    }    for (Scope.Entry e=members.elems; e != null; e=e.sibling) {      starImportModel.enter(e.sym);    }  }  starImportModel.check(starImportScope);}  }
class C{  public static void main(String[] args){  doLoop(Gridlock.class,args);  System.exit(0);}  }
class C{  public InvalidateOperation(EntryEventImpl event){  super(event);}  }
class C{  public void file(@NotNull String file) throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("file " + file);  GdbFile.parse(gdbOutput);}  }
class C{  public boolean startDrag(int position,int deltaX,int deltaY){  int dragFlags=0;  if (mSortEnabled && !mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y;  }  if (mRemoveEnabled && mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_X;    dragFlags|=DragSortListView.DRAG_NEG_X;  }  mDragging=mDslv.startDrag(position - mDslv.getHeaderViewsCount(),dragFlags,deltaX,deltaY);  return mDragging;}  }
class C{  @Override public boolean isCurrency(int columnIndex){  return false;}  }
class C{  protected void disposeInternal(){}  }
class C{  private void zkInit() throws Exception {  this.appendChild(mainPanel);  mainPanel.appendChild(mainLayout);  mainPanel.setStyle("width: 100%; height: 100%; padding: 0; margin: 0");  mainLayout.setHeight("100%");  mainLayout.setWidth("100%");  Center center=new Center();  mainLayout.appendChild(center);  center.appendChild(centerPanel);  paymentLabel.setText(Msg.translate(Env.getCtx(),"PaymentRule"));  North north=new North();  north.setStyle("border: none");  mainLayout.appendChild(north);  north.appendChild(northPanel);  northPanel.appendChild(paymentLabel);  northPanel.appendChild(new Space());  northPanel.appendChild(paymentCombo);  kPanel.appendChild(kLayout);  kNumberField.setWidth("160pt");  kExpField.setWidth("40pt");  kApprovalField.setWidth("120pt");  kTypeLabel.setText(Msg.translate(Env.getCtx(),"CreditCardType"));  kNumberLabel.setText(Msg.translate(Env.getCtx(),"CreditCardNumber"));  kExpLabel.setText(Msg.getMsg(Env.getCtx(),"Expires"));  kApprovalLabel.setText(Msg.translate(Env.getCtx(),"VoiceAuthCode"));  kAmountLabel.setText(Msg.getMsg(Env.getCtx(),"Amount"));  kOnline.setLabel(Msg.getMsg(Env.getCtx(),"Online"));  LayoutUtils.addSclass("action-text-button",kOnline);  kOnline.addActionListener(this);  kStatus.setText(" ");  kPanel.setId("kPanel");  centerPanel.appendChild(kPanel);  centerLayout.add(kPanel);  Rows rows=kLayout.newRows();  Row row=rows.newRow();  row.appendChild(kTypeLabel.rightAlign());  row.appendChild(kTypeCombo);  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(kNumberLabel.rightAlign());  row.appendChild(kNumberField);  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(kExpLabel.rightAlign());  row.appendChild(kExpField);  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(kAmountLabel.rightAlign());  row.appendChild(kAmountField.getComponent());  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(kApprovalLabel.rightAlign());  row.appendChild(kApprovalField);  row.appendChild(new Space());  row.appendChild(kOnline);  row=rows.newRow();  row.setSpans("3,1");  row.appendChild(kStatus);  row.appendChild(new Space());  tPanel.appendChild(tPanelLayout);  tAccountLabel.setText(Msg.translate(Env.getCtx(),"C_BP_BankAccount_ID"));  tRoutingField.setCols(8);  tNumberField.setCols(10);  tRoutingText.setText(Msg.translate(Env.getCtx(),"RoutingNo"));  tNumberText.setText(Msg.translate(Env.getCtx(),"AccountNo"));  tOnline.setLabel(Msg.getMsg(Env.getCtx(),"Online"));  LayoutUtils.addSclass("action-text-button",tOnline);  tStatus.setText(" ");  tPanel.setId("tPanel");  centerPanel.appendChild(tPanel);  centerLayout.add(tPanel);  rows=tPanelLayout.newRows();  row=rows.newRow();  row.appendChild(tAccountLabel.rightAlign());  row.appendChild(tAccountCombo);  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(tRoutingText.rightAlign());  row.appendChild(tRoutingField);  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(tNumberText.rightAlign());  row.appendChild(tNumberField);  row.appendChild(new Space());  row.appendChild(tOnline);  row=rows.newRow();  row.setSpans("3,1");  row.appendChild(tStatus);  row.appendChild(new Space());  sPanel.appendChild(sPanelLayout);  sBankAccountLabel.setText(Msg.translate(Env.getCtx(),"C_BankAccount_ID"));  sAmountLabel.setText(Msg.getMsg(Env.getCtx(),"Amount"));  sRoutingLabel.setText(Msg.translate(Env.getCtx(),"RoutingNo"));  sNumberLabel.setText(Msg.translate(Env.getCtx(),"AccountNo"));  sCheckLabel.setText(Msg.translate(Env.getCtx(),"CheckNo"));  sCheckField.setCols(8);  sCurrencyLabel.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  sNumberField.setWidth("100pt");  sRoutingField.setWidth("70pt");  sStatus.setText(" ");  sOnline.setLabel(Msg.getMsg(Env.getCtx(),"Online"));  LayoutUtils.addSclass("action-text-button",sOnline);  sPanel.setId("sPanel");  centerPanel.appendChild(sPanel);  centerLayout.add(sPanel);  rows=sPanelLayout.newRows();  row=rows.newRow();  row.appendChild(sBankAccountLabel.rightAlign());  row.appendChild(sBankAccountCombo);  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(sCurrencyLabel.rightAlign());  row.appendChild(sCurrencyCombo);  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(sAmountLabel.rightAlign());  row.appendChild(sAmountField.getComponent());  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(sRoutingLabel.rightAlign());  row.appendChild(sRoutingField);  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(sNumberLabel.rightAlign());  row.appendChild(sNumberField);  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(sCheckLabel.rightAlign());  row.appendChild(sCheckField);  row.appendChild(new Space());  row.appendChild(sOnline);  row=rows.newRow();  row.setSpans("3,1");  row.appendChild(sStatus);  row.appendChild(new Space());  pPanel.appendChild(pPanelLayout);  pTermLabel.setText(Msg.translate(Env.getCtx(),"C_PaymentTerm_ID"));  pPanel.setId("pPanel");  centerPanel.appendChild(pPanel);  centerLayout.add(pPanel);  rows=pPanelLayout.newRows();  row=rows.newRow();  row.appendChild(pTermLabel.rightAlign());  row.appendChild(pTermCombo);  bCashBookLabel.setText(Msg.translate(Env.getCtx(),"C_CashBook_ID"));  bCurrencyLabel.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  bPanel.appendChild(bPanelLayout);  bAmountLabel.setText(Msg.getMsg(Env.getCtx(),"Amount"));  bDateLabel.setText(Msg.translate(Env.getCtx(),"DateAcct"));  bPanel.setId("bPanel");  centerPanel.appendChild(bPanel);  centerLayout.add(bPanel);  rows=bPanelLayout.newRows();  row=rows.newRow();  if (m_Cash_As_Payment) {    bBankAccountLabel.setText(Msg.translate(Env.getCtx(),"C_BankAccount_ID"));    row.appendChild(bBankAccountLabel.rightAlign());    row.appendChild(bBankAccountCombo);  } else {    row.appendChild(bCashBookLabel.rightAlign());    row.appendChild(bCashBookCombo);  }  row=rows.newRow();  row.appendChild(bCurrencyLabel.rightAlign());  row.appendChild(bCurrencyCombo);  row=rows.newRow();  row.appendChild(bDateLabel.rightAlign());  row.appendChild(bDateField.getComponent());  row=rows.newRow();  row.appendChild(bAmountLabel.rightAlign());  row.appendChild(bAmountField.getComponent());  South south=new South();  south.setStyle("border: none");  mainLayout.appendChild(south);  south.appendChild(confirmPanel);  confirmPanel.addActionListener(this);}  }
class C{  private void drawToggleButton(final Point buttonSize){  gc.setForeground(buttonBackgroundColor1);  gc.setBackground(buttonBackgroundColor2);  if (selection) {    gc.fillGradientRectangle(arc,arc,buttonSize.x / 2,buttonSize.y,true);  } else {    gc.fillGradientRectangle(buttonSize.x / 2,arc,buttonSize.x / 2 + 2,buttonSize.y - 1,true);  }  gc.setForeground(buttonBorderColor);  if (selection) {    gc.drawRoundRectangle(2,2,buttonSize.x / 2,buttonSize.y,arc,arc);  } else {    gc.drawRoundRectangle(buttonSize.x / 2,2,buttonSize.x / 2 + 2,buttonSize.y,arc,arc);  }  if (focusColor != null && mouseInside) {    gc.setForeground(focusColor);    gc.setLineWidth(2);    if (selection) {      gc.drawRoundRectangle(3,3,buttonSize.x / 2,buttonSize.y - 1,3,3);    } else {      gc.drawRoundRectangle(buttonSize.x / 2 + 1,3,buttonSize.x / 2,buttonSize.y - 2,3,3);    }    gc.setLineWidth(1);  }}  }
class C{  protected void seekTypesInBinaryPackage(String name,IPackageFragment pkg,boolean partialMatch,int acceptFlags,IJavaElementRequestor requestor){  long start=-1;  if (VERBOSE)   start=System.currentTimeMillis();  try {    if (!partialMatch) {      if (requestor.isCanceled())       return;      ClassFile classFile=new ClassFile((PackageFragment)pkg,manager,name);      if (classFile.existsUsingJarTypeCache()) {        IType type=classFile.getType();        if (acceptType(type,acceptFlags,false)) {          requestor.acceptType(type);        }      }    } else {      IJavaElement[] classFiles=null;      try {        classFiles=pkg.getChildren();      } catch (      JavaModelException npe) {        return;      }      int length=classFiles.length;      String unqualifiedName=name;      int index=name.lastIndexOf('$');      if (index != -1) {        unqualifiedName=Util.localTypeName(name,index,name.length());      }      int matchLength=name.length();      for (int i=0; i < length; i++) {        if (requestor.isCanceled())         return;        IJavaElement classFile=classFiles[i];        String elementName=classFile.getElementName();        if (elementName.regionMatches(true,0,name,0,matchLength)) {          IType type=((ClassFile)classFile).getType();          String typeName=type.getElementName();          if (typeName.length() > 0 && !Character.isDigit(typeName.charAt(0))) {            if (nameMatches(unqualifiedName,type,true) && acceptType(type,acceptFlags,false))             requestor.acceptType(type);          }        }      }    }  }  finally {    if (VERBOSE)     this.timeSpentInSeekTypesInBinaryPackage+=System.currentTimeMillis() - start;  }}  }
class C{  private void closeStartIfNecessary() throws IOException {  if (closeStart) {    writer.write(">");    closeStart=false;  }}  }
class C{  Enumeration members(){  return table.keys();}  }
class C{  public ExpressionNode exprGetChild(int i){  return (ExpressionNode)item(i);}  }
class C{  protected int findNext(int from){  if (from < -1)   return -1;  final int to=this.allHeaders.size() - 1;  boolean found=false;  while (!found && (from < to)) {    from++;    found=filterHeader(from);  }  return found ? from : -1;}  }
class C{  public ParsedPattern(String pattern){  this(pattern,false);}  }
class C{  public void createProjectAsync(String tenantId,ProjectCreateSpec projectCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/projects",getBasePath(),tenantId);  createObjectAsync(path,serializeObjectAsJson(projectCreateSpec),responseCallback);}  }
class C{  public static String verifyFiles(File... files){  StringBuilder sb=new StringBuilder();  for (  File f : files) {    if (f == null || !f.exists()) {      sb.append("File " + f + " does not exist.\n");    }    if (f == null || !f.canRead()) {      sb.append("File " + f + " can not be read.\n");    }  }  if (sb.length() == 0)   return null; else   return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.007 -0400",hash_original_method="4E150736B305580D7D558C0BBC13A278",hash_generated_method="9F613AABC550C993F40C8AA15B39C7FF") protected void log(int type,Object message,Throwable t){  StringBuffer buf=new StringBuffer();  if (showDateTime) {    buf.append(dateFormatter.format(new Date()));    buf.append(" ");  }switch (type) {case SimpleLog.LOG_LEVEL_TRACE:    buf.append("[TRACE] ");  break;case SimpleLog.LOG_LEVEL_DEBUG:buf.append("[DEBUG] ");break;case SimpleLog.LOG_LEVEL_INFO:buf.append("[INFO] ");break;case SimpleLog.LOG_LEVEL_WARN:buf.append("[WARN] ");break;case SimpleLog.LOG_LEVEL_ERROR:buf.append("[ERROR] ");break;case SimpleLog.LOG_LEVEL_FATAL:buf.append("[FATAL] ");break;}if (showShortName) {if (shortLogName == null) {shortLogName=logName.substring(logName.lastIndexOf(".") + 1);shortLogName=shortLogName.substring(shortLogName.lastIndexOf("/") + 1);}buf.append(String.valueOf(shortLogName)).append(" - ");} else if (showLogName) {buf.append(String.valueOf(logName)).append(" - ");}buf.append(String.valueOf(message));if (t != null) {buf.append(" <");buf.append(t.toString());buf.append(">");java.io.StringWriter sw=new java.io.StringWriter(1024);java.io.PrintWriter pw=new java.io.PrintWriter(sw);t.printStackTrace(pw);pw.close();buf.append(sw.toString());}write(buf);}  }
class C{  public RandomizedSet(){  list=new ArrayList<Integer>();  r=new Random();}  }
class C{  public static void testBiLinear(){  System.out.println("");  logger.info("-----Test of bilinear interpolation-----");  try {    out.write("bilinear interpolation \t\t\t\t");  } catch (  IOException e) {    e.printStackTrace();  }  interpolationTest(Interpolation.BILINEAR,1,2,Double.NaN);  interpolationTest(Interpolation.BILINEAR,3,3,Double.NaN);  interpolationTest(Interpolation.BILINEAR,10,10,Double.NaN);}  }
class C{  public static double distanceTo2(double x1,double y1,double z1,double x2,double y2,double z2){  final double a=x1 - x2;  final double b=y1 - y2;  final double c=z1 - z2;  return (a * a + b * b + c * c);}  }
class C{  public static boolean checkAndLog(){  boolean minimumSystemRequirementsMet=true;  minimumSystemRequirementsMet&=checkJavaVersion();  if (!minimumSystemRequirementsMet) {    logger.warn(LocalizedMessage.create(LocalizedStrings.MinimumSystemRequirements_NOT_MET));  }  return minimumSystemRequirementsMet;}  }
class C{  @Override public void clear(){  super.clear();  float[] keys=_set;  Object[] values=_values;  for (int i=keys.length; i-- > 0; ) {    keys[i]=(float)0;    values[i]=null;  }}  }
class C{  public SocketException(){}  }
class C{  public SocialHit socialNetwork(String value){  setString(SOCIAL_NETWORK,value);  return this;}  }
class C{  private void logAfterLoad(){  Enumeration elem=properties.keys();  List lp=Collections.list(elem);  Collections.sort(lp);  Iterator iter=lp.iterator();  finer("Configuration contains " + properties.size() + " keys.");  finer("List of configuration properties, after override:");  while (iter.hasNext()) {    String key=(String)iter.next();    String val=properties.getProperty(key);    finer("  " + key + " = "+ val);  }  finer("Properties list complete.");}  }
class C{  protected void loadHistory(boolean set){  BufferedInputStream str;  File file;  int width;  int height;  try {    file=new File(getHistoryFilename());    if (file.exists()) {      str=new BufferedInputStream(new FileInputStream(getHistoryFilename()));      m_History.load(str);    }  } catch (  Exception e) {    e.printStackTrace();  }  if (set) {    m_ConnectionPanel.setHistory(stringToModel(m_History.getProperty(ConnectionPanel.HISTORY_NAME,"")));    m_QueryPanel.setHistory(stringToModel(m_History.getProperty(QueryPanel.HISTORY_NAME,"")));    m_QueryPanel.setMaxRows(Integer.parseInt(m_History.getProperty(QueryPanel.MAX_ROWS,"100")));    width=Integer.parseInt(m_History.getProperty(WIDTH,"0"));    height=Integer.parseInt(m_History.getProperty(HEIGHT,"0"));    if ((width != 0) && (height != 0)) {      setPreferredSize(new Dimension(width,height));    }  }}  }
class C{  public void paint(Graphics g,JComponent c){  Rectangle clip=g.getClipBounds();  Rectangle bounds=table.getBounds();  bounds.x=bounds.y=0;  if (table.getRowCount() <= 0 || table.getColumnCount() <= 0 || !bounds.intersects(clip)) {    paintDropLines(g);    return;  }  boolean ltr=table.getComponentOrientation().isLeftToRight();  Point upperLeft=clip.getLocation();  Point lowerRight=new Point(clip.x + clip.width - 1,clip.y + clip.height - 1);  int rMin=table.rowAtPoint(upperLeft);  int rMax=table.rowAtPoint(lowerRight);  if (rMin == -1) {    rMin=0;  }  if (rMax == -1) {    rMax=table.getRowCount() - 1;  }  int cMin=table.columnAtPoint(ltr ? upperLeft : lowerRight);  int cMax=table.columnAtPoint(ltr ? lowerRight : upperLeft);  if (cMin == -1) {    cMin=0;  }  if (cMax == -1) {    cMax=table.getColumnCount() - 1;  }  paintGrid(g,rMin,rMax,cMin,cMax);  paintCells(g,rMin,rMax,cMin,cMax);  paintDropLines(g);}  }
class C{  @DSComment("Scroller") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:11.178 -0500",hash_original_method="1D0B82032F5CA4B8FBC2BBD45CD555A7",hash_generated_method="2E1962A007DD75268BA5B7E4A9EF347B") public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      float x=timePassed * mDurationReciprocal;    if (mInterpolator == null)     x=viscousFluid(x); else     x=mInterpolator.getInterpolation(x);  mCurrX=mStartX + Math.round(x * mDeltaX);mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE[index];final float d_sup=SPLINE[index + 1];final float distanceCoef=d_inf + (t - t_inf) / (t_sup - t_inf) * (d_sup - d_inf);mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  @Deprecated public static <T>Collection<T> copy(Collection<T> to,T... from){  A.notNull(to,"to",from,"from");  copy(to,asList(from));  return to;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.413 -0500",hash_original_method="871D6D7CB1794492ED7691CB8C5B804E",hash_generated_method="033720C21C04EE8076D057035900CEA7") private void raiseIOException(String host,int port,String protocol){  IOExceptionEvent ioError=new IOExceptionEvent(this,host,port,protocol);  sipProvider.handleEvent(ioError,null);  setState(SIPDialog.TERMINATED_STATE);}  }
class C{  public Notification(String type,Object source,long sequenceNumber){  super(source);  this.source=source;  this.type=type;  this.sequenceNumber=sequenceNumber;  this.timeStamp=(new java.util.Date()).getTime();}  }
class C{  public static void dataChanged(Context context,long throttleMs){  SharedPreferences prefs=Utilities.getPrefs(context);  long now=System.currentTimeMillis();  long lastTime=prefs.getLong(KEY_LAST_NOTIFIED_TIME,0);  if (now < lastTime || now >= (lastTime + throttleMs)) {    BackupManager.dataChanged(context.getPackageName());    prefs.edit().putLong(KEY_LAST_NOTIFIED_TIME,now).apply();  }}  }
class C{  public Connection(Address to,String group,byte type,ClassLoader cl) throws IOException, SocketException {  this(to,group,type,cl,30000);}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public DataLogicSales(){  stockAdjustDatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.DOUBLE};  stockdiaryDatas=new Datas[]{Datas.STRING,Datas.TIMESTAMP,Datas.INT,Datas.STRING,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE};  paymenttabledatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.STRING};  stockdatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE};  auxiliarDatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING};  productsRow=new Row(new Field("ID",Datas.STRING,Formats.STRING),new Field(AppLocal.getIntString("label.prodref"),Datas.STRING,Formats.STRING,true,true,true),new Field(AppLocal.getIntString("label.prodbarcode"),Datas.STRING,Formats.STRING,false,true,true),new Field(AppLocal.getIntString("label.prodbarcodetype"),Datas.STRING,Formats.STRING,false,true,true),new Field(AppLocal.getIntString("label.prodname"),Datas.STRING,Formats.STRING,true,true,true),new Field("ISCOM",Datas.BOOLEAN,Formats.BOOLEAN),new Field("ISSCALE",Datas.BOOLEAN,Formats.BOOLEAN),new Field(AppLocal.getIntString("label.prodpricebuy"),Datas.DOUBLE,Formats.CURRENCY,false,true,true),new Field(AppLocal.getIntString("label.prodpricesell"),Datas.DOUBLE,Formats.CURRENCY,false,true,true),new Field(AppLocal.getIntString("label.prodcategory"),Datas.STRING,Formats.STRING,false,false,true),new Field(AppLocal.getIntString("label.taxcategory"),Datas.STRING,Formats.STRING,false,false,true),new Field(AppLocal.getIntString("label.attributeset"),Datas.STRING,Formats.STRING,false,false,true),new Field("IMAGE",Datas.IMAGE,Formats.NULL),new Field("ATTRIBUTES",Datas.BYTES,Formats.NULL),new Field("STOCKCOST",Datas.DOUBLE,Formats.CURRENCY),new Field("STOCKVOLUME",Datas.DOUBLE,Formats.DOUBLE),new Field("ISCATALOG",Datas.BOOLEAN,Formats.BOOLEAN),new Field("CATORDER",Datas.INT,Formats.INT),new Field("ISKITCHEN",Datas.BOOLEAN,Formats.BOOLEAN),new Field("ISSERVICE",Datas.BOOLEAN,Formats.BOOLEAN),new Field(AppLocal.getIntString("label.display"),Datas.STRING,Formats.STRING,false,true,true),new Field("ISVPRICE",Datas.BOOLEAN,Formats.BOOLEAN),new Field("ISVERPATRIB",Datas.BOOLEAN,Formats.BOOLEAN),new Field("TEXTTIP",Datas.STRING,Formats.STRING),new Field("WARRANTY",Datas.BOOLEAN,Formats.BOOLEAN),new Field(AppLocal.getIntString("label.stockunits"),Datas.DOUBLE,Formats.DOUBLE),new Field("ALIAS",Datas.STRING,Formats.STRING),new Field("ALWAYSAVAILABLE",Datas.BOOLEAN,Formats.BOOLEAN),new Field("DISCOUNTED",Datas.STRING,Formats.STRING),new Field("CANDISCOUNT",Datas.BOOLEAN,Formats.BOOLEAN),new Field("ISPACK",Datas.BOOLEAN,Formats.BOOLEAN),new Field("PACKQUANTITY",Datas.DOUBLE,Formats.DOUBLE),new Field("PACKPRODUCT",Datas.STRING,Formats.STRING),new Field("PROMOTIONID",Datas.STRING,Formats.STRING),new Field("MANAGESTOCK",Datas.BOOLEAN,Formats.BOOLEAN));  assert (FIELD_COUNT == productsRow.getFields().length);}  }
class C{  public CCloseAction(){  super("Close");}  }
class C{  private static String convertInt(AbstractStringBuilder sb,int i){  boolean negative=false;  String quickResult=null;  if (i < 0) {    negative=true;    i=-i;    if (i < 100) {      if (i < 0) {        quickResult="-2147483648";      } else {        quickResult=SMALL_NEGATIVE_VALUES[i];        if (quickResult == null) {          SMALL_NEGATIVE_VALUES[i]=quickResult=i < 10 ? stringOf('-',ONES[i]) : stringOf('-',TENS[i],ONES[i]);        }      }    }  } else {    if (i < 100) {      quickResult=SMALL_NONNEGATIVE_VALUES[i];      if (quickResult == null) {        SMALL_NONNEGATIVE_VALUES[i]=quickResult=i < 10 ? stringOf(ONES[i]) : stringOf(TENS[i],ONES[i]);      }    }  }  if (quickResult != null) {    if (sb != null) {      sb.append0(quickResult);      return null;    }    return quickResult;  }  int bufLen=11;  char[] buf=(sb != null) ? BUFFER.get() : new char[bufLen];  int cursor=bufLen;  while (i >= (1 << 16)) {    int q=(int)((0x51EB851FL * i) >>> 37);    int r=i - 100 * q;    buf[--cursor]=ONES[r];    buf[--cursor]=TENS[r];    i=q;  }  while (i != 0) {    int q=(0xCCCD * i) >>> 19;    int r=i - 10 * q;    buf[--cursor]=DIGITS[r];    i=q;  }  if (negative) {    buf[--cursor]='-';  }  if (sb != null) {    sb.append0(buf,cursor,bufLen - cursor);    return null;  } else {    return new String(cursor,bufLen - cursor,buf);  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean isLazyChop(){  return lazyChop;}  }
class C{  @Override @Deprecated public List<Runnable> shutdownNow(){  throw new UnsupportedOperationException();}  }
class C{  public TwoColumnOutput(@Nonnull Writer out,int leftWidth,int rightWidth,@Nonnull String spacer){  if (leftWidth < 1) {    throw new IllegalArgumentException("leftWidth < 1");  }  if (rightWidth < 1) {    throw new IllegalArgumentException("rightWidth < 1");  }  this.out=out;  this.leftWidth=leftWidth;  this.rightWidth=rightWidth;  this.spacer=spacer;}  }
class C{  public boolean isOneDotEight(){  return jdkVersion == JDK1_8;}  }
class C{  public Point2D apply(V v){  boolean wasInSublayout=false;  for (  Layout<V,E> layout : layouts.keySet()) {    if (layout.getGraph().getVertices().contains(v)) {      wasInSublayout=true;      Point2D center=layouts.get(layout);      Dimension d=layout.getSize();      AffineTransform at=AffineTransform.getTranslateInstance(center.getX() - d.width / 2,center.getY() - d.height / 2);      return at.transform(layout.apply(v),null);    }  }  if (wasInSublayout == false) {    return delegate.apply(v);  }  return null;}  }
class C{  public void addZoomListener(ZoomListener listener,boolean onButtons,boolean onPinch){  if (onButtons) {    if (mZoomIn != null) {      mZoomIn.addZoomListener(listener);      mZoomOut.addZoomListener(listener);    }    if (onPinch) {      mTouchHandler.addZoomListener(listener);    }  }}  }
class C{  public void testParseUser(){  User expectedUser=new User();  expectedUser.setName("name");  expectedUser.setPassword("pwd");  expectedUser.addRole("role");  User user=User.parseUser("name:pwd:role");  assertEquals(expectedUser,user);}  }
class C{  public static boolean isBackendFullCopyInReplicationGroup(Volume fullcopy,DbClient dbClient){  boolean result=false;  URI systemURI=fullcopy.getStorageController();  StorageSystem system=dbClient.queryObject(StorageSystem.class,systemURI);  String type=system.getSystemType();  if (type.equals(DiscoveredDataObject.Type.vplex.name())) {    Volume backendFullcopy=getVPLEXBackendVolume(fullcopy,true,dbClient);    if (backendFullcopy != null) {      String replicationGroup=backendFullcopy.getReplicationGroupInstance();      if (NullColumnValueGetter.isNotNullValue(replicationGroup)) {        result=true;      }    }  }  return result;}  }
class C{  public void migrateProperties(){  Network memory=getBot().memory().newMemory();  Vertex mood=memory.createVertex(getClass());  Vertex property=mood.getRelationship(Primitive.ENABLED);  if (property != null) {    setIsEnabled((Boolean)property.getData());  }  saveProperties();  mood.internalRemoveRelationships(Primitive.ENABLED);  memory.save();}  }
class C{  public WBrowserRows(){}  }
class C{  public TetradDesktop(){  setBackground(new Color(204,204,204));  sessionNodeKeys=new ArrayList();  this.desktopPane=new JDesktopPane();  setLayout(new BorderLayout());  desktopPane.setDesktopManager(new DefaultDesktopManager());  desktopPane.setBorder(new BevelBorder(BevelBorder.LOWERED));  desktopPane.addPropertyChangeListener(this);  this.setupDesktop();  Preferences.userRoot().putBoolean("displayLogging",false);  TetradLogger.getInstance().addTetradLoggerListener(new LoggerListener());}  }
class C{  public JPaymentPaper(JPaymentNotifier notifier,String sPaper){  m_notifier=notifier;  m_sPaper=sPaper;  initComponents();  m_jTendered.addPropertyChangeListener("Edition",new RecalculateState());  m_jTendered.addEditorKeys(m_jKeys);}  }
class C{  protected Object convertIdToFieldObject(ID id) throws SQLException {  return idField.convertJavaFieldToSqlArgValue(id);}  }
class C{  public synchronized SerializerRegistry register(Class<?> type,int id){  if (type == null)   throw new NullPointerException("type cannot be null");  Class<?> baseType=findBaseType(type,defaultFactories);  if (baseType == null) {    throw new RegistrationException("no default serializer found for type: " + type);  }  return register(type,id,defaultFactories.get(baseType));}  }
class C{  private int read(int n) throws IOException {  if (closed) {    return 0;  }  char[] c=new char[n];  int count=0;  int read=0;  do {    read=reader.read(c);    if (read < 0) {      closed=true;      break;    }    count+=read;    buff.append(c,0,read);  } while (count < n);  return count;}  }
class C{  public void executeFirst(Runnable task){synchronized (internalLock) {    queue.addFirst(task);  }  startQueueWorker();}  }
class C{  public synchronized boolean is(Object data){  return (data != null) && data.equals(this.data);}  }
class C{  Node<K,V> findFirst(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    if (n.value != null)     return n;    n.helpDelete(b,n.next);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static DetalleEstadoBDBean obtenerEstadoBD(Integer idEstado,String entidad) throws SgmException {  EstadosDatos estado=new EstadosDatos();  DetalleEstadoBDBean salida=new DetalleEstadoBDBean();  try {    estado.setId(idEstado.toString());    estado.load(entidad);    salida.setId(estado.getId());    salida.setIdSisnot(estado.getIdSisnot());    salida.setDescripcion(estado.getDescripcion());  } catch (  Exception ex) {    logger.debug("Fallo inesperado llamando al servicio: " + ex.getMessage());    throw new ServicioWebExcepcion(ServicioWebErrorCodigos.EC_UNKNOW_ERROR,ex);  }  return salida;}  }
class C{  public void e(Exception ex){  if (debug) {    if (logLevel <= Log.ERROR) {      Log.e(tag,"error",ex);    }  }}  }
class C{  public static final StringBuilder stripAllSpaces(final StringBuilder text){  int pointer2=text.length() - 1;  while (pointer2 > 0) {    if (text.charAt(pointer2) == ' ') {      text.deleteCharAt(pointer2);    }    pointer2--;    if (pointer2 < 0) {      break;    }  }  return text;}  }
class C{  public static void disable(){  INSTANCE.killCommandsAndFlush();}  }
class C{  public void enablePreferencesMenuItem(boolean b){  getPreferencesMenuItem().setEnabled(b);  if (MainFrame.MAC_OS_X) {    if (osxPrefsEnableMethod != null) {      Object args[]={b};      try {        osxPrefsEnableMethod.invoke(osxAdapter,args);      } catch (      Exception e) {        System.err.println("Exception while enabling Preferences menu: " + e);      }    }  }}  }
class C{  private void testTranslationResult(String text,String result,TranslationResult translationResult){  assertNotNull(translationResult);  assertEquals(translationResult.getWordCount().intValue(),text.split(" ").length);  assertNotNull(translationResult.getTranslations());  assertNotNull(translationResult.getTranslations().get(0).getTranslation());  assertEquals(result,translationResult.getTranslations().get(0).getTranslation());}  }
class C{  protected boolean isUnitsAndEquipmentSymbolModifier(String value){  String firstChar=value.substring(0,1).toUpperCase();  String secondChar=value.substring(1,2).toUpperCase();  return (UNUSED_POSITION_CODE.equals(firstChar) && SymbologyConstants.ECHELON_ALL.contains(secondChar)) || (SymbologyConstants.MODIFIER_CODE_ALL_UEI.contains(firstChar) && UNUSED_POSITION_CODE.equals(secondChar)) || (SymbologyConstants.MODIFIER_CODE_ALL_UEI.contains(firstChar) && SymbologyConstants.ECHELON_ALL.contains(secondChar));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:19.381 -0500",hash_original_method="260063B43BB0DBB7B5FBB381EFCDB1A9",hash_generated_method="2296DD251EC8DBEFE13B5CAD7F4219FE") @Deprecated public static String formatIpAddress(int ipv4Address){  return NetworkUtils.intToInetAddress(ipv4Address).getHostAddress();}  }
class C{  static void svd_dswap(int n,double[] dx,int incx,double[] dy,int incy){  if (n <= 0 || incx == 0 || incy == 0)   return;  int ix=(incx == 1) ? 0 : n - 1;  int iy=(incy == 1) ? 0 : n - 1;  for (int i=0; i < n; i++) {    double swap=dy[iy];    dy[iy]=dx[ix];    dx[ix]=swap;    iy+=incy;    ix+=incx;  }}  }
class C{  public T caseAdapter(Adapter object){  return null;}  }
class C{  public ItemIdentificationPath(RPAction action){  this(action,true);}  }
class C{  public void ifPresent(LongConsumer consumer){  if (isPresent)   consumer.accept(value);}  }
class C{  private SSLContext initSSLContext() throws RestException {  try {    final CertificateFactory certificateFactory=CertificateFactory.getInstance("X.509");    final ByteArrayInputStream pem=new ByteArrayInputStream(sslPemUTF8.getBytes("UTF-8"));    final X509Certificate certificate=(X509Certificate)certificateFactory.generateCertificate(pem);    pem.close();    final TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());    final KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());    keyStore.load(null);    keyStore.setCertificateEntry("caCert",certificate);    trustManagerFactory.init(keyStore);    final SSLContext sslContext=SSLContext.getInstance("TLS");    sslContext.init(null,trustManagerFactory.getTrustManagers(),null);    return sslContext;  } catch (  Exception e) {    throw new RestException(e);  }}  }
class C{  private String jusifyOneLine(int start,int end,ArrayList<String> a,int b,int lineLen){  int extra=b - lineLen;  if (start == end) {    StringBuilder str=new StringBuilder(a.get(start));    for (int i=0; i < extra; i++) {      str.append(" ");    }    return str.toString();  }  StringBuilder str=new StringBuilder();  int words=end - start + 1;  int avg=extra / (words - 1) + 1;  StringBuilder spaces=new StringBuilder();  for (int i=0; i < avg; i++) {    spaces.append(" ");  }  String largeSpace=spaces.toString() + " ";  int lefts=extra % (words - 1);  int left=0;  for (int i=start; i < end; i++) {    str.append(a.get(start++));    if (left < lefts) {      str.append(largeSpace);      left++;    } else {      str.append(spaces);    }  }  str.append(a.get(end));  return str.toString();}  }
class C{  @Override public void write(final int b){}  }
class C{  public boolean verifyToken(String data,String signature){  if (signature.length() == 0) {    return false;  }  try {    return signingKey.verify(data,signature);  } catch (  KeyczarException e) {    return false;  }}  }
class C{  public static <T>List<T> copyToArrayListWithExtraCapacity(T[] elements,int extraCapacity){  List<T> asList;  if (elements != null) {    asList=new ArrayList<T>(elements.length + extraCapacity);    asList.addAll(Arrays.asList(elements));  } else {    asList=new ArrayList<T>(extraCapacity);  }  return asList;}  }
class C{  public void unregister(T item){  items.remove(item);}  }
class C{  public String generateBillXML(EgBill bill,String displayMsg){  String xmlData="";  BillCollectXmlHandler handler=new BillCollectXmlHandler();  try {    if (bill != null && displayMsg != null) {      LOGGER.info(" before preparing Bill XML xmlData===" + xmlData);      xmlData=handler.toXML(prepareBillInfoXml(bill,displayMsg));      LOGGER.info("xmlData===" + xmlData);    }  } catch (  Exception ex) {    LOGGER.error("Exception in postBillCollectionDetails",ex);  }  return xmlData;}  }
class C{  public Conversion type(Type type){  conversion.type=type.toString();  return this;}  }
class C{  public ClientBuilderForConnector withCredentials(String credentialsId) throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {  if (isNotBlank(credentialsId)) {    Credentials credentials=lookupSystemCredentials(credentialsId);    if (credentials instanceof CertificateCredentials) {      CertificateCredentials certificateCredentials=(CertificateCredentials)credentials;      withSslConfig(new KeystoreSSLConfig(certificateCredentials.getKeyStore(),certificateCredentials.getPassword().getPlainText()));    } else     if (credentials instanceof DockerServerCredentials) {      final DockerServerCredentials dockerCreds=(DockerServerCredentials)credentials;      withSslConfig(new VariableSSLConfig(dockerCreds.getClientKey(),dockerCreds.getClientCertificate(),dockerCreds.getServerCaCertificate()));    }  } else {    withSslConfig(null);  }  return this;}  }
class C{  public final void openLink(SVGAElement elt){}  }
class C{  public ActiveInformationCalculatorDiscrete(int base,int history){  super(base,history);}  }
class C{  public void onStart(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onStart();    }  }}  }
class C{  public synchronized void close() throws IOException {  isClosed=true;  localAddress=Inet4Address.ANY;  impl.close();}  }
class C{  public static BezierPath fitBezierPath(BezierPath digitizedPoints,double error){  ArrayList<Point2D.Double> d=new ArrayList<Point2D.Double>(digitizedPoints.size());  for (  BezierPath.Node n : digitizedPoints) {    d.add(new Point2D.Double(n.x[0],n.y[0]));  }  return fitBezierPath(d,error);}  }
class C{  protected void forwardToService(final ServletRequest servletRequest,final ServletResponse servletResponse,final AbstractRequestWrapper reqWrapper) throws IOException, ServletException {  try {    HttpServletRequest req=(HttpServletRequest)servletRequest;    servletRequest.getRequestDispatcher(req.getRequestURI()).forward(reqWrapper,servletResponse);  } catch (  WebApplicationException e) {    if (ServiceCodeExceptionMapper.isStackTracePrinted(e)) {      _log.warn("caught WebApplicationException",e);    } else {      _log.warn("caught WebApplicationException: {}",e.getMessage());    }    HttpServletResponse reponse=(HttpServletResponse)servletResponse;    reponse.sendError(toHTTPStatus(e),toServiceErrorXml(e));  }}  }
class C{  public static long[] parseVibratePattern(String stringPattern){  ArrayList<Long> arrayListPattern=new ArrayList<Long>();  Long l;  if (stringPattern == null)   return null;  String[] splitPattern=stringPattern.split(",");  int VIBRATE_PATTERN_MAX_SECONDS=60000;  int VIBRATE_PATTERN_MAX_PATTERN=100;  for (int i=0; i < splitPattern.length; i++) {    try {      l=Long.parseLong(splitPattern[i].trim());    } catch (    NumberFormatException e) {      return null;    }    if (l > VIBRATE_PATTERN_MAX_SECONDS) {      return null;    }    arrayListPattern.add(l);  }  int size=arrayListPattern.size();  if (size > 0 && size < VIBRATE_PATTERN_MAX_PATTERN) {    long[] pattern=new long[size];    for (int i=0; i < pattern.length; i++) {      pattern[i]=arrayListPattern.get(i);    }    return pattern;  }  return null;}  }
class C{  private void writeHistoryEntry(final IFileStore file,final Document document,final IProgressMonitor monitor,final String task) throws CoreException {  OutputStream output=null;  try {    monitor.beginTask(task,2);    file.getParent().mkdir(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));    output=new BufferedOutputStream(file.openOutputStream(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)));    writeNode(output,document);  }  finally {    fCachedDocument=null;    fCachedPath=null;    fCachedDescriptor=null;    fCachedStore=null;    if (output != null) {      try {        output.close();      } catch (      IOException exception) {      }    }    monitor.done();  }}  }
class C{  public final CC gapBottom(String boundsSize){  ver.setGapAfter(ConstraintParser.parseBoundSize(boundsSize,true,false));  return this;}  }
class C{  @SuppressWarnings("unchecked") private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight((Comparable)a[cursor2],tmp,cursor1,len1,0);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft((Comparable)tmp[cursor1],a,cursor2,len2,0);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  @Override public boolean conditionOk(Example e){  if (attribute.isNominal()) {    double doubleValue=e.getValue(attribute);    if (Double.isNaN(doubleValue)) {switch (comparisonType) {case NEQ1:case NEQ2:        return !isMissingAllowed;case EQUALS:      return isMissingAllowed;default :    return false;}} else {int value=(int)doubleValue;switch (comparisonType) {case NEQ1:case NEQ2:  return !allowedNominalValueIndices.contains(value);case EQUALS:return allowedNominalValueIndices.contains(value);default :return false;}}} else if (attribute.isNumerical()) {switch (comparisonType) {case LEQ:return Tools.isLessEqual(e.getNumericalValue(attribute),numericalValue);case GEQ:return Tools.isGreaterEqual(e.getNumericalValue(attribute),numericalValue);case NEQ1:case NEQ2:return Tools.isNotEqual(e.getNumericalValue(attribute),numericalValue);case EQUALS:return Tools.isEqual(e.getNumericalValue(attribute),numericalValue);case LESS:return Tools.isLess(e.getNumericalValue(attribute),numericalValue);case GREATER:return Tools.isGreater(e.getNumericalValue(attribute),numericalValue);default :return false;}} else {Date currentDateValue;if (Double.isNaN(e.getValue(attribute))) {currentDateValue=null;} else {currentDateValue=e.getDateValue(attribute);}switch (comparisonType) {case LEQ:return Tools.isLessEqual(currentDateValue,dateValue);case GEQ:return Tools.isGreaterEqual(currentDateValue,dateValue);case NEQ1:case NEQ2:return Tools.isNotEqual(currentDateValue,dateValue);case EQUALS:return Tools.isEqual(currentDateValue,dateValue);case LESS:return Tools.isLess(currentDateValue,dateValue);case GREATER:return Tools.isGreater(currentDateValue,dateValue);default :return false;}}}  }
class C{  protected void constructWorld(BranchGroup worldBranchGroup){  UniverseManager univ=new UniverseManager(worldBranchGroup);  cam=new Camera();  Vector3f loc=new Vector3f(0,0,0);  cam.setLocation(loc);  cam.setHeadLight(true);  cam.setCanvas(canvas);  univ.addCamera(cam);  universe=univ;}  }
class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override protected AccessCheckingPortal createPortal(final ConfigurableFactoryContext ctx){  setQuest(ctx);  return new QuestCheckingPortal(requiredQuest,requiredState,rejectMessage);}  }
class C{  private int fitPlanForRange(int ropReg,NormalSsaInsn insn,int[] categoriesForIndex,BitSet outMovesRequired){  RegisterSpecList sources=insn.getSources();  int szSources=sources.size();  int fitWidth=0;  IntSet liveOut=insn.getBlock().getLiveOutRegs();  RegisterSpecList liveOutSpecs=ssaSetToSpecs(liveOut);  BitSet seen=new BitSet(ssaMeth.getRegCount());  for (int i=0; i < szSources; i++) {    RegisterSpec ssaSpec=sources.get(i);    int ssaReg=ssaSpec.getReg();    int category=categoriesForIndex[i];    if (i != 0) {      ropReg+=categoriesForIndex[i - 1];    }    if (ssaRegsMapped.get(ssaReg) && mapper.oldToNew(ssaReg) == ropReg) {      fitWidth+=category;    } else     if (rangeContainsReserved(ropReg,category)) {      fitWidth=-1;      break;    } else     if (!ssaRegsMapped.get(ssaReg) && canMapReg(ssaSpec,ropReg) && !seen.get(ssaReg)) {      fitWidth+=category;    } else     if (!mapper.areAnyPinned(liveOutSpecs,ropReg,category) && !mapper.areAnyPinned(sources,ropReg,category)) {      outMovesRequired.set(i);    } else {      fitWidth=-1;      break;    }    seen.set(ssaReg);  }  return fitWidth;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void w(String tag,Throwable tr){  w(tag,null,tr);}  }
class C{  public void addDependency(T object,T dependency){  if (object == null || dependency == null) {    Cardinal.getPluginLogger().warning("Dependency cannot be null, ignoring.");    return;  }  add(object);  add(dependency);  nodes.putIfAbsent(dependency,new DependencyNode<>(dependency));  if (hasDependency(dependency,object)) {    throw new IllegalStateException("Cannot create dependency, creates a dependency loop");  }  nodes.get(object).addDependency(nodes.get(dependency));}  }
class C{  static public String capitalizeFirstLetter(String data){  String firstLetter=data.substring(0,1).toUpperCase();  String restLetters=data.substring(1);  return firstLetter + restLetters;}  }
class C{  public Boolean readBoolean(Type target){  return (buf.get() == AMF.VALUE_TRUE) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public boolean compare(TestEntry other){  if (other == null) {    return false;  }  if ((value == null) != (other.value == null)) {    return false;  }  if (value != null && !other.value.equals(value)) {    return false;  }  if ((children == null) != (other.children == null)) {    return false;  }  if (children != null) {    if (children.length != other.children.length) {      return false;    }    for (int i=0; i < children.length; ++i) {      if ((children[i] == null) != (other.children[i] == null)) {        return false;      }      if (children[i] != null && !children[i].compare(other.children[i])) {        return false;      }    }  }  return true;}  }
class C{  public DefaultDatagramSessionConfig(){}  }
class C{  public void removeAudioPacketListener(Listener<AudioPacket> listener){  mAudioPacketListeners.remove(listener);}  }
class C{  public IntHashMap(){  this(20,0.75f);}  }
class C{  public StackTraceGraph(String basePackage){  this.basePackage=basePackage;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  Channel c=getChannel(stack);  return EPG.getInstance().getChannels(EPG.getInstance().getProviderIDForEPGDSName(s),c == null ? 0 : c.getStationID());}  }
class C{  public void encrypt(int[] buffer){  int nLen=buffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=2) {    lTemp=BinConverter.intArrayToLong(buffer,nI);    lTemp=encryptBlock(lTemp);    BinConverter.longToIntArray(lTemp,buffer,nI);  }  ;}  }
class C{  private ReportFrequency(){}  }
class C{  public void dragOver(DropTargetDragEvent dtde){  Debug.message("dndlistener","dragOver(target)");  dtde.acceptDrag(dtde.getDropAction());}  }
class C{  static MediaType createVideoType(String subtype){  return create(VIDEO_TYPE,subtype);}  }
class C{  private int findPosition(@NonNull String key,@NonNull String tmpTotal,@NonNull SpannableStringBuilder ssb,@NonNull SpannableStringBuilder tmp){  String tmpTmpTotal=tmpTotal;  int position=tmpTmpTotal.indexOf(key);  if (position == -1) {    return -1;  } else {    if (checkInInlineCode(ssb,tmp.length() + position,key.length())) {      StringBuilder sb=new StringBuilder(tmpTmpTotal.substring(0,position)).append("$$").append(tmpTmpTotal.substring(position + key.length(),tmpTmpTotal.length()));      return findPosition(key,sb.toString(),ssb,tmp);    } else {      return position;    }  }}  }
class C{  static double f(double x){  return x * Math.sin(x) - 5 * x - Math.cos(x);}  }
class C{  public BOpFilterNOP(BOpFilterNOP op){  super(op);}  }
class C{  public Heap merge(Heap other){  int n=this.numElem + other.numElem;  Comparable[] combinedKeys=new Comparable[n];  Object[] combinedObjects=new Object[n];  System.arraycopy(keys,0,combinedKeys,0,this.numElem);  System.arraycopy(other.keys,0,combinedKeys,this.numElem,other.numElem);  System.arraycopy(objects,0,combinedObjects,0,this.numElem);  System.arraycopy(other.objects,0,combinedObjects,this.numElem,other.numElem);  return new Heap(combinedKeys,combinedObjects);}  }
class C{  public static Validator<CharSequence> minLength(@NonNull final Context context,@StringRes final int resourceId,final int minLength){  return new MinLengthValidator(context,resourceId,minLength);}  }
class C{  private void addTab(final JTabbedPane tab,final String tabHeader,final CAbstractSettingsPanel panel){  final JPanel parentPanel=new JPanel(new BorderLayout());  parentPanel.add(panel,BorderLayout.NORTH);  tab.addTab(tabHeader,new JScrollPane(parentPanel));  m_settingsPanel.add(panel);}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (getClass() != o.getClass()) {    return false;  }  final CoverageIntVdt civ=(CoverageIntVdt)o;  return ((table == civ.table) && (attribute == civ.attribute) && (value == civ.value));}  }
class C{  public IHypercube region(){  return region;}  }
class C{  public Set<PersonUser> findPersonUsers(String tenantName,SearchCriteria criteria,int limit) throws Exception {  return getService().findPersonUsers(tenantName,criteria,limit,this.getServiceContext());}  }
class C{  public static String formatMessage(int errorCode,String message,Object... arguments){  for (int i=0; i < arguments.length; i++) {    Object a=arguments[i];    if (!(a instanceof Exception)) {      String s=a == null ? "null" : a.toString();      if (s.length() > 1000) {        s=s.substring(0,1000) + "...";      }      arguments[i]=s;    }  }  return MessageFormat.format(message,arguments) + " [" + Constants.VERSION_MAJOR+ "."+ Constants.VERSION_MINOR+ "."+ Constants.BUILD_ID+ "/"+ errorCode+ "]";}  }
class C{  void register(Object listener){  Multimap<Class<?>,Subscriber> listenerMethods=findAllSubscribers(listener);  for (  Map.Entry<Class<?>,Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {    Class<?> eventType=entry.getKey();    Collection<Subscriber> eventMethodsInListener=entry.getValue();    CopyOnWriteArraySet<Subscriber> eventSubscribers=subscribers.get(eventType);    if (eventSubscribers == null) {      CopyOnWriteArraySet<Subscriber> newSet=new CopyOnWriteArraySet<Subscriber>();      eventSubscribers=MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType,newSet),newSet);    }    eventSubscribers.addAll(eventMethodsInListener);  }}  }
class C{  public void testGet(){  final double minX=200000.0;  final double maxX=400000.0;  final double minY=500000.0;  final double maxY=700000.0;  final long nOfEntries=25000;  final long nOfQueries=25000;  Random r=new Random(4711);  double deltaX=maxX - minX;  double deltaY=maxY - minY;  log.info("build quadtree, adding " + nOfEntries + " entries...");  QuadTree<Long> qt=new QuadTree<Long>(minX,minY,maxX,maxY);  for (long i=0; i < nOfEntries; i++) {    double x=r.nextDouble() * deltaX + minX;    double y=r.nextDouble() * deltaY + minY;    qt.put(x,y,Long.valueOf(i));  }  log.info("start get-Queries");  Gbl.startMeasurement();  for (long i=0; i < nOfQueries; i++) {    double x=r.nextDouble() * deltaX + minX;    double y=r.nextDouble() * deltaY + minY;    qt.getClosest(x,y);  }  Gbl.printElapsedTime();  log.info("get-Queries ended.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:01.272 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  public GlobalListSizeConstraint(ListParameter<?,?> v,IntParameter i){  this.list=v;  this.length=i;}  }
class C{  public SecurityException(String message,String detail){  super(message,"security");  setDetail(detail);}  }
class C{  protected JAXBRuntimeException(Throwable cause){  super(cause);}  }
class C{  @Override public void onFailure(IMqttToken token,Throwable exception){switch (action) {case CONNECT:    connect(exception);  break;case DISCONNECT:disconnect(exception);break;case SUBSCRIBE:subscribe(exception);break;case PUBLISH:publish(exception);break;}}  }
class C{  private FieldFinder(){}  }
class C{  public boolean supportsTransactions() throws SQLException {  return true;}  }
class C{  public FitZoom(AbstractChart chart){  super(chart);}  }
class C{  public PredictionAppender(){  setLayout(new BorderLayout());  add(m_visual,BorderLayout.CENTER);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.395 -0500",hash_original_method="8C765A659D796CF19325E431E5641ECE",hash_generated_method="2C8FA2E8822547DB6A05E97353B073C7") public static int toUpperCase(int codePoint){  if ('a' <= codePoint && codePoint <= 'z') {    return (char)(codePoint - ('a' - 'A'));  }  if (codePoint < 181) {    return codePoint;  }  return toUpperCaseImpl(codePoint);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public static String hash(File f){  try {    byte[] encoded=Files.readAllBytes(Paths.get(f.getAbsolutePath()));    String content=new String(encoded,Charset.defaultCharset());    return MD5.hash(content);  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  private static OFActionSetTpSrc decode_set_src_port(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        TransportPort portnum=TransportPort.of(get_short(n.group(1)));        OFActionSetTpSrc.Builder ab=OFFactories.getFactory(version).actions().buildSetTpSrc();        ab.setTpPort(portnum);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid src-port in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  public static Circle from3Points(Vec2D p1,Vec2D p2,Vec2D p3){  Circle circle=null;  Vec2D deltaA=p2.sub(p1);  Vec2D deltaB=p3.sub(p2);  if (MathUtils.abs(deltaA.x) <= 0.0000001f && MathUtils.abs(deltaB.y) <= 0.0000001f) {    Vec2D centroid=new Vec2D(p2.x + p3.x,p1.y + p2.y).scaleSelf(0.5f);    float radius=centroid.distanceTo(p1);    circle=new Circle(centroid,radius);  } else {    float aSlope=deltaA.y / deltaA.x;    float bSlope=deltaB.y / deltaB.x;    if (MathUtils.abs(aSlope - bSlope) > 0.0000001f) {      float x=(aSlope * bSlope * (p1.y - p3.y) + bSlope * (p1.x + p2.x) - aSlope * (p2.x + p3.x)) / (2 * (bSlope - aSlope));      float y=-(x - (p1.x + p2.x) / 2) / aSlope + (p1.y + p2.y) / 2;      Vec2D centroid=new Vec2D(x,y);      float radius=centroid.distanceTo(p1);      circle=new Circle(centroid,radius);    }  }  return circle;}  }
class C{  public Object clone(){  LongArrayList clone=new LongArrayList((long[])elements.clone());  clone.setSizeRaw(size);  return clone;}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  @Deprecated public static boolean isArrayByteBase64(final byte[] arrayOctet){  return isBase64(arrayOctet);}  }
class C{  private void call(UDF udf,Object[] arguments){  try {    udf.call(pc,arguments,false);  } catch (  PageException pe) {    error(pe);  }}  }
class C{  private Base64(){}  }
class C{  @Override public void projectOpened(){  final LegacyProjectSettings legacy=LegacyProjectSettings.getInstance(myProject);  PersistencePreferencesBean legacyBean=null;  List<String> enabledModuleConfigs=null;  if (legacy != null) {    legacyBean=legacy.getState();    if (legacyBean != null) {      enabledModuleConfigs=legacyBean.getEnabledModuleConfigs();    }  }  final WorkspaceSettings currentWorkspace=WorkspaceSettings.getInstance(myProject);  for (  final Module module : ModuleManager.getInstance(myProject).getModules()) {    final LegacyModuleSettings legacyModuleSettings=LegacyModuleSettings.getInstance(module);    if (legacyModuleSettings != null && legacyModuleSettings.getState() != null) {      final ModuleSettings currentModule=ModuleSettings.getInstance(module);      legacyModuleSettings.applyTo(currentModule,null);      currentModule.overrideProjectSettings=enabledModuleConfigs != null && enabledModuleConfigs.contains(module.getName());    }  }  if (legacyBean != null) {    final ProjectSettings current=ProjectSettings.getInstance(myProject);    legacy.applyTo(current,currentWorkspace);  }}  }
class C{  private boolean canAccess(){  if (trackRecordingService == null) {    throw new IllegalStateException("The track recording service has been detached!");  }  if (Process.myPid() == Binder.getCallingPid()) {    return true;  } else {    return PreferencesUtils.getBoolean(trackRecordingService,R.string.allow_access_key,PreferencesUtils.ALLOW_ACCESS_DEFAULT);  }}  }
class C{  private static MethodHandle fillToRight(int nargs){  MethodHandle filler=FILL_ARRAY_TO_RIGHT[nargs];  if (filler != null)   return filler;  filler=buildFiller(nargs);  assert (assertCorrectArity(filler,nargs - LEFT_ARGS + 1));  return FILL_ARRAY_TO_RIGHT[nargs]=filler;}  }
class C{  public void cleanupCache(){  long i=MinecraftServer.getSystemTimeMillis();  long j=i - this.lastCleanupTime;  if (j > 7500L || j < 0L) {    this.lastCleanupTime=i;    for (int k=0; k < this.cache.size(); ++k) {      BiomeCacheExtended.Block block=(BiomeCacheExtended.Block)this.cache.get(k);      long l=i - block.lastAccessTime;      if (l > 30000L || l < 0L) {        this.cache.remove(k--);        long i1=(long)block.xPosition & 4294967295L | ((long)block.zPosition & 4294967295L) << 32;        this.cacheMap.remove(i1);      }    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.METADATABLE__OWNED_METADATAS:    getOwnedMetadatas().clear();  getOwnedMetadatas().addAll((Collection<? extends Metadata>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static CreateUsersE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateUsersE object=new CreateUsersE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","createUsers").equals(reader.getName())) {          object.setCreateUsers(org.oscm.xsd.CreateUsers.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public HeapOperand<T> copy(){  return new HeapOperand<T>(value);}  }
class C{  public final CC hideMode(int mode){  setHideMode(mode);  return this;}  }
class C{  public Future<ReplDBMSHeader> watchForProcessedEventId(String eventId) throws InterruptedException {  return stages.getLast().watchForProcessedEventId(eventId,false);}  }
class C{  public void respond(String payload){  respond(ResponseCode.CONTENT,payload);}  }
class C{  public UnsupportedOperationException(@Nullable String message,@Nullable Throwable cause){  super(message,cause);}  }
class C{  static public void printTabbedSummary(PrintStream out,String measure){  if (measure == null) {    out.println("Profiling statistics: (hh:mm:ss)");    out.println("Name\tTotal\tMean\tCount\tMax");  }  for (  Measure m : getSortedMeasures()) {    if (measure == null || m.mName.equals(measure)) {      out.printf(m.mName + "\t" + m.toTabbedString());    }    out.println();  }}  }
class C{  public final boolean waitForRead() throws IOException {  if (_readLength <= _readOffset) {    if (!readBuffer()) {      return false;    }  }  return true;}  }
class C{  protected int findKeyIndex(){  m_KeyIndex=-1;  try {    if (m_ResultProducer != null) {      String[] keyNames=m_ResultProducer.getKeyNames();      for (int i=0; i < keyNames.length; i++) {        if (keyNames[i].equals(m_KeyFieldName)) {          m_KeyIndex=i;          break;        }      }    }  } catch (  Exception ex) {  }  return m_KeyIndex;}  }
class C{  public static HadoopErrorSimulator create(Kind kind,int bits){switch (kind) {case Noop:    return noopInstance;case Runtime:  return new RuntimeExceptionBitHadoopErrorSimulator(bits);case IOException:return new IOExceptionBitHadoopErrorSimulator(bits);case Error:return new ErrorBitHadoopErrorSimulator(bits);default :throw new IllegalStateException("Unknown kind: " + kind);}}  }
class C{  public boolean canEncode(char ch){  int index;  int theBytes;  if (Surrogate.is(ch))   return false;  index=index1[((ch & mask1) >> shift)] + (ch & mask2);  if (index < 15000)   theBytes=(int)(index2.charAt(index)); else   theBytes=(int)(index2a.charAt(index - 15000));  if (theBytes != 0)   return (true);  return (ch == '\u0000');}  }
class C{  public TransitedEncoding(DerValue encoding) throws Asn1Exception, IOException {  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  DerValue der;  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x00) {    trType=der.getData().getBigInteger().intValue();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x01) {    contents=der.getData().getOctetString();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  if (der.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    if (retryPolicy != null) {      retryPolicy.retry(exception);    } else {      Loger.debug("not retry policy");    }  } catch (  VolleyError e) {    Loger.debug(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  Loger.debug(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public boolean isLedHighlightEnabled(){  return preferences.getBoolean(resources.getString(R.string.key_led_highlight),Boolean.parseBoolean(resources.getString(R.string.default_led_highlight)));}  }
class C{  MDHelper(boolean littleEndian,int lenlen){  this(littleEndian,lenlen,(byte)0x80);}  }
class C{  private String addDefaultProfile(){  String profile=System.getProperty("spring.profiles.active");  if (profile != null) {    log.info("Running with Spring profile(s) : {}",profile);    return profile;  }  log.warn("No Spring profile configured, running with default configuration");  return Constants.SPRING_PROFILE_DEVELOPMENT;}  }
class C{  public synchronized void removeConsumer(ImageConsumer ic){  theConsumers.removeElement(ic);}  }
class C{  public GarbageCollectorMetricSet(Collection<GarbageCollectorMXBean> garbageCollectors){  this.garbageCollectors=new ArrayList<GarbageCollectorMXBean>(garbageCollectors);}  }
class C{  public Node remove(Coordinate pt){  return (Node)nodeMap.remove(pt);}  }
class C{  public static void warn(Object message){  ri.warn(message);}  }
class C{  @Override public void deviceAdded(IDevice device){  SwitchPort[] switchPort=device.getAttachmentPoints();  IPv4Address[] ips=device.getIPv4Addresses();  if (ips.length == 0) {    return;  }  String dpid=HexString.toHexString(switchPort[0].getSwitchDPID().getLong());  String ip=IPv4.fromIPv4Address(ips[0].getInt());  logger.info("New AP added. [dpid:" + dpid + " ip:"+ ip+ "]");  AP ap=new AP(ip,dpid);  apManager.addAP(ap);  processAPAdded(ap);}  }
class C{  public SplitterBySourceGroup(Action action){  super();  m_action=action;}  }
class C{  public X500Principal(String name){  if (name == null)   throw new NullPointerException(rb.getString("provided.null.name"));  try {    thisX500Name=new X500Name(name);  } catch (  Exception e) {    throw new IllegalArgumentException(e.toString());  }  this.name=name;}  }
class C{  @SuppressWarnings({"unchecked","TooBroadScope"}) void handleResponse(GridClientMessage res) throws IOException {  lastMsgRcvTime=U.currentTimeMillis();  TcpClientFuture fut=pendingReqs.get(res.requestId());  if (fut == null) {    log.warning("Response for an unknown request is received, ignoring. " + "[res=" + res + ", ses="+ ses+ ']');    return;  }  if (fut.forward()) {    removePending(res.requestId());    fut.onDone(res);  } else {    GridClientMessage res0=res;    if (res instanceof GridRouterResponse) {      res0=marsh.unmarshal(((GridRouterResponse)res).body());      res0.requestId(res.requestId());      res0.clientId(res.clientId());      res0.destinationId(res.destinationId());    }    if (res0 instanceof GridClientResponse)     handleClientResponse(fut,(GridClientResponse)res0); else     log.warning("Unsupported response type received: " + res0);  }}  }
class C{  public SimpleAttributeOperand clone(){  SimpleAttributeOperand result=new SimpleAttributeOperand();  result.TypeDefinitionId=TypeDefinitionId;  result.BrowsePath=BrowsePath == null ? null : BrowsePath.clone();  result.AttributeId=AttributeId;  result.IndexRange=IndexRange;  return result;}  }
class C{  void verifyUniqueXids(List<OFMessage> msgs){  if (seenXids == null)   seenXids=new HashSet<Integer>();  for (  OFMessage m : msgs) {    int xid=m.getXid();    assertTrue("Xid in messags is 0",xid != 0);    assertFalse("Xid " + xid + " has already been used",seenXids.contains(xid));    seenXids.add(xid);  }}  }
class C{  public void refresh(){  notifyChange(REFRESH);}  }
class C{  public boolean isBorderPainted(){  return paintBorder;}  }
class C{  public ApproximationSetCollector(){  this(null,null);}  }
class C{  public boolean isSipAutomata(){  return readBoolean(RcsSettingsData.CAPABILITY_SIP_AUTOMATA);}  }
class C{  public DriverTask exportVolumesToInitiators(List<Initiator> initiators,List<StorageVolume> volumes,Map<String,String> volumeToHLUMap,List<StoragePort> recommendedPorts,List<StoragePort> availablePorts,StorageCapabilities capabilities,MutableBoolean usedRecommendedPorts,List<StoragePort> selectedPorts,DriverTask task,Registry driverRegistry,LockManager driverLockManager){  _log.info("3PARDriver:exportVolumesToInitiators enter");  String host=null;  host=doHostProcessing(initiators,volumes,driverRegistry,driverLockManager);  if (host == null) {    task.setMessage("exportVolumesToInitiators error: Processing hosts, Unable to export");    task.setStatus(DriverTask.TaskStatus.FAILED);    return task;  }  Integer totalExport=recommendedPorts.size();  for (  StorageVolume vol : volumes) {    Integer currExport=0;    Integer hlu=Integer.parseInt(volumeToHLUMap.get(vol.getNativeId()));    try {      HP3PARApi hp3parApi=hp3parUtil.getHP3PARDeviceFromNativeId(vol.getStorageSystemId(),driverRegistry);      if (!host.startsWith("set:")) {        for (        StoragePort port : recommendedPorts) {          String message=String.format("3PARDriver:exportVolumesToInitiators using recommendedPorts for " + "storage system %s, volume %s host %s hlu %s port %s",port.getStorageSystemId(),vol.getNativeId(),host,hlu.toString(),port.getNativeId());          _log.info(message);          VlunResult vlunRes=hp3parApi.createVlun(vol.getNativeId(),hlu,host,port.getNativeId());          if (vlunRes != null && vlunRes.getStatus()) {            currExport++;            usedRecommendedPorts.setValue(true);            volumeToHLUMap.put(vol.getNativeId(),vlunRes.getAssignedLun());            if (!selectedPorts.contains(port)) {              selectedPorts.add(port);            }          } else {            task.setStatus(DriverTask.TaskStatus.PARTIALLY_FAILED);            _log.warn("3PARDriver: Could not export " + message);          }        }        for (        StoragePort port : availablePorts) {          if (currExport == totalExport) {            task.setStatus(DriverTask.TaskStatus.READY);            break;          }          if (selectedPorts.contains(port)) {            continue;          }          if (!vol.getStorageSystemId().equalsIgnoreCase(port.getStorageSystemId())) {            continue;          }          String message=String.format("3PARDriver:exportVolumesToInitiators using availablePorts for " + "storage system %s, volume %s host %s hlu %s port %s",port.getStorageSystemId(),vol.getNativeId(),host,hlu.toString(),port.getNativeId());          _log.info(message);          VlunResult vlunRes=hp3parApi.createVlun(vol.getNativeId(),hlu,host,port.getNativeId());          if (vlunRes != null && vlunRes.getStatus()) {            currExport++;            usedRecommendedPorts.setValue(false);            volumeToHLUMap.put(vol.getNativeId(),vlunRes.getAssignedLun());            if (!selectedPorts.contains(port)) {              selectedPorts.add(port);            }          } else {            task.setStatus(DriverTask.TaskStatus.PARTIALLY_FAILED);            _log.warn("3PARDriver: Could not export " + message);          }        }      } else {        String lockName=volumes.get(0).getStorageSystemId() + vol.getNativeId() + host;        if (driverLockManager.acquireLock(lockName,10,TimeUnit.MINUTES)) {          _log.info("3PARDriver: Acquired lock {} to examine vlun creation",lockName);          String message=String.format("3PARDriver:exportVolumesToInitiators " + "storage system %s, volume %s Cluster %s hlu %s ",vol.getStorageSystemId(),vol.getNativeId(),host,hlu.toString());          _log.info(message);          String exportPath=vol.getStorageSystemId() + vol.getNativeId() + host;          _log.info("3PARDriver:exportPath {} for registry entry",exportPath);          Map<String,List<String>> attributes=new HashMap<>();          List<String> expValue=new ArrayList<>();          List<String> lunValue=new ArrayList<>();          boolean doExport=true;          attributes=driverRegistry.getDriverAttributesForKey(HP3PARConstants.DRIVER_NAME,exportPath);          if (attributes != null) {            expValue=attributes.get("EXPORT_PATH");            if (expValue != null && expValue.get(0).compareTo(exportPath) == 0) {              doExport=false;              lunValue=attributes.get(vol.getNativeId());              volumeToHLUMap.put(vol.getNativeId(),lunValue.get(0));              HP3PARHostNameResult hostNameResult=get3parHostname(initiators,vol.getStorageSystemId(),driverRegistry);              HostMember hostRes=hp3parApi.getHostDetails(hostNameResult.getHostName());              List<StoragePort> clusterStoragePorts=new ArrayList<>();              getClusterStoragePorts(hostRes,availablePorts,vol.getStorageSystemId(),clusterStoragePorts);              for (              StoragePort sp : clusterStoragePorts) {                if (!selectedPorts.contains(sp)) {                  selectedPorts.add(sp);                }              }              usedRecommendedPorts.setValue(true);              for (              StoragePort sp : selectedPorts) {                if (!recommendedPorts.contains(sp)) {                  usedRecommendedPorts.setValue(false);                  break;                }              }              task.setStatus(DriverTask.TaskStatus.READY);              _log.info("3PARDriver: Already exported, exiting " + message);            }          }          if (doExport) {            _log.info("3PARDriver: exporting volume {} as exportPath {} is not present in registry",vol.getNativeId(),exportPath);            VlunResult vlunRes=hp3parApi.createVlun(vol.getNativeId(),hlu,host,null);            if (vlunRes != null && vlunRes.getStatus()) {              volumeToHLUMap.put(vol.getNativeId(),vlunRes.getAssignedLun());              HP3PARHostNameResult hostNameResult=get3parHostname(initiators,vol.getStorageSystemId(),driverRegistry);              HostMember hostRes=hp3parApi.getHostDetails(hostNameResult.getHostName());              List<StoragePort> clusterStoragePorts=new ArrayList<>();              getClusterStoragePorts(hostRes,availablePorts,vol.getStorageSystemId(),clusterStoragePorts);              for (              StoragePort sp : clusterStoragePorts) {                if (!selectedPorts.contains(sp)) {                  selectedPorts.add(sp);                }              }              usedRecommendedPorts.setValue(true);              for (              StoragePort sp : selectedPorts) {                if (!recommendedPorts.contains(sp)) {                  usedRecommendedPorts.setValue(false);                  break;                }              }              attributes=new HashMap<>();              expValue=new ArrayList<>();              lunValue=new ArrayList<>();              expValue.add(exportPath);              attributes.put("EXPORT_PATH",expValue);              lunValue.add(vlunRes.getAssignedLun());              attributes.put(vol.getNativeId(),lunValue);              attributes.put(vol.getNativeId(),lunValue);              driverRegistry.setDriverAttributesForKey(HP3PARConstants.DRIVER_NAME,exportPath,attributes);              task.setMessage("Successful");              task.setStatus(DriverTask.TaskStatus.READY);            } else {              task.setStatus(DriverTask.TaskStatus.PARTIALLY_FAILED);              _log.warn("3PARDriver: Could not export " + message);            }          }          _log.info("3PARDriver: Releasing lock {} after examining vlun creation",lockName);          driverLockManager.releaseLock(lockName);        } else {          _log.error("3PARDriver:exportVolumesToInitiators error: could not acquire thread lock");          throw new HP3PARException("3PARDriver:exportVolumesToInitiators error: could not acquire thread lock");        }      }    } catch (    Exception e) {      String msg=String.format("3PARDriver: Unable to export few volumes, error: %s",e);      _log.error(CompleteError.getStackTrace(e));      _log.error(msg);      task.setMessage(msg);      task.setStatus(DriverTask.TaskStatus.PARTIALLY_FAILED);      e.printStackTrace();    }  }  _log.info("3PARDriver:exportVolumesToInitiators leave");  return task;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public DatabaseModule(Context context,String databaseName){  mDevOpenHelper=new DaoMaster.DevOpenHelper(context,databaseName,null);  mDatabase=mDevOpenHelper.getWritableDatabase();}  }
class C{  public static double pareto(double alpha){  if (!(alpha > 0.0))   throw new IllegalArgumentException("Shape parameter alpha must be positive");  return Math.pow(1 - uniform(),-1.0 / alpha) - 1.0;}  }
class C{  byte[] readBinary() throws IOException {  TempOutputStream tos=new TempOutputStream();  while (true) {    int ch=read();    int len;switch (ch) {default :      _peek=ch;    return tos.toByteArray();case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:  len=ch - 0x20;readBinary(tos,len);return tos.toByteArray();case 0x34:case 0x35:case 0x36:case 0x37:len=((ch - 0x34) << 8) + read();readBinary(tos,len);return tos.toByteArray();case 'B':len=readShort();readBinary(tos,len);return tos.toByteArray();case 'A':len=readShort();readBinary(tos,len);break;}}}  }
class C{  public static List<String> fileList(String directoryPath,boolean includeFullPath){  List<String> fileList=new ArrayList<String>();  String dir=directoryPath.substring(0,directoryPath.lastIndexOf(File.separator));  String pattern=StringUtils.substringAfterLast(directoryPath,File.separator);  File directory=new File(dir);  if (directory.isDirectory()) {    File[] files=directory.listFiles();    for (int i=0; i < files.length; i++) {      File f=files[i];      if (f.isFile()) {        String fileName=f.getName();        String fullPath=dir + File.separator + fileName;        if (fileName.matches(convertGlobToRegEx(pattern))) {          if (includeFullPath) {            fileList.add(fullPath);          } else {            fileList.add(fileName);          }        }      }    }  }  return fileList;}  }
class C{  private void startVoiceRecognitionActivity(){  Intent intent=new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);  intent.putExtra(RecognizerIntent.EXTRA_PROMPT,R.string.voice_hint);  startActivityForResult(intent,REQUEST_CODE);}  }
class C{  public OpenSSLSignatureRawRSA() throws NoSuchAlgorithmException {  super("NONEwithRSA");}  }
class C{  public GeneratorThread(MainFrame parent,String inputFile,String outputDir){  this.parent=parent;  this.inputFile=inputFile;  this.outputDir=outputDir;}  }
class C{  public String debugTipText(){  return "Whether debug information is output to console.";}  }
class C{  private MobileDoc createLayout(MobileDoc doc,MWorkflow wf,int activeNode,MWFNode[] nodes,ArrayList nodes_ID,int[][] imageMap){  body b=doc.getBody();  b.addElement(printWorkflow(activeNode,wf,nodes,nodes_ID,imageMap));  b.addElement(new hr());  b.addElement(printDescription(activeNode,wf,nodes,nodes_ID));  b.addElement(new br());  b.addElement(printControlPanel(activeNode,wf,nodes,nodes_ID));  return doc;}  }
class C{  public void storeInRegister(int registerNumber) throws IOException {  print("register",new String[]{Integer.toString(registerNumber)});}  }
class C{  public void testDatasource() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/datasource-war/test");  final String expected="Got connection!";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public CommunityTabAdapter(List<Displayable> displayableList,Activity activity,int colorResId){  super(displayableList);  this.activity=activity;  if (colorResId < 0 && activity != null) {    this.colorResId=activity.getResources().getColor(R.color.default_color);  } else {    this.colorResId=colorResId;  }}  }
class C{  public FilePath append(String subPath){  String[] subElements=subPath.trim().split("\\/");  for (  String subElement : subElements) {    appendSub(subElement);  }  return this;}  }
class C{  void addIncludedService(BluetoothGattService includedService){  mIncludedServices.add(includedService);}  }
class C{  public static Collection<ThreadInfo> filterAllThreadsInState(boolean lockedMonitors,boolean lockedSynchronizers,Thread.State state,Predicate<ThreadInfo> threadInfoPredicate){  return Collections2.filter(getAllThreadsInState(lockedMonitors,lockedSynchronizers,state),threadInfoPredicate);}  }
class C{  @NotNull public AnAction[] postProcess(@NotNull ConsoleView console,@NotNull AnAction[] actions){  return actions;}  }
class C{  public static boolean isWhiteSpace(String s){  if (null != s) {    int n=s.length();    for (int i=0; i < n; i++) {      if (!isWhiteSpace(s.charAt(i)))       return false;    }  }  return true;}  }
class C{  public void start(@NonNull Activity activity,int requestCode){  if (PermissionsUtils.checkReadStoragePermission(activity)) {    activity.startActivityForResult(getIntent(activity),requestCode);  }}  }
class C{  private void disableButtons(){  setFireEnabled(false);  setSkipEnabled(false);  setTwistEnabled(false);  setNextEnabled(false);  butDone.setEnabled(false);  setFlipArmsEnabled(false);  setFireModeEnabled(false);  setNextTargetEnabled(false);}  }
class C{  protected void scanSomeTag(boolean allowCDATA,String defaultNamespace,Properties namespaces) throws Exception {  String str=XMLUtil.read(this.reader,'&');  char ch=str.charAt(0);  if (ch == '&') {    XMLUtil.errorUnexpectedEntity(reader.getSystemID(),reader.getLineNr(),str);  }switch (ch) {case '?':    this.processPI();  break;case '!':this.processSpecialTag(allowCDATA);break;default :this.reader.unread(ch);this.processElement(defaultNamespace,namespaces);}}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private boolean translateKeyDown(int keyCode,KeyEvent event){  mMetaState=MetaKeyKeyListener.handleKeyDown(mMetaState,keyCode,event);  int c=event.getUnicodeChar(MetaKeyKeyListener.getMetaState(mMetaState));  mMetaState=MetaKeyKeyListener.adjustMetaAfterKeypress(mMetaState);  InputConnection ic=getCurrentInputConnection();  if (c == 0 || ic == null) {    return false;  }  boolean dead=false;  if ((c & KeyCharacterMap.COMBINING_ACCENT) != 0) {    dead=true;    c=c & KeyCharacterMap.COMBINING_ACCENT_MASK;  }  if (mComposing.length() > 0) {    char accent=mComposing.charAt(mComposing.length() - 1);    int composed=KeyEvent.getDeadChar(accent,c);    if (composed != 0) {      c=composed;      mComposing.setLength(mComposing.length() - 1);    }  }  onKey(c,null);  return true;}  }
class C{  public static String encodeBytes(byte[] source){  return encodeBytes(source,0,source.length);}  }
class C{  private void generateFlow(ACLRule rule,String dpid,String flowName){  int priority;  if (dpid2FlowPriority.get(dpid) == null) {    dpid2FlowPriority.put(dpid,30000);    priority=30000;  } else {    priority=dpid2FlowPriority.get(dpid);  }  if (rule.getNw_src() != null) {    HashMap<String,Object> flow=new HashMap<String,Object>();    flow.put(StaticFlowEntryPusher.COLUMN_SWITCH,dpid);    flow.put(StaticFlowEntryPusher.COLUMN_NAME,flowName);    flow.put(StaticFlowEntryPusher.COLUMN_ACTIVE,Boolean.toString(true));    flow.put(StaticFlowEntryPusher.COLUMN_COOKIE,"0");    flow.put(StaticFlowEntryPusher.COLUMN_PRIORITY,Integer.toString(priority));    dpid2FlowPriority.put(dpid,--priority);    flow.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,"2048");    flow.put(StaticFlowEntryPusher.COLUMN_NW_SRC,rule.getNw_src());    if (rule.getNw_dst() != null) {      flow.put(StaticFlowEntryPusher.COLUMN_NW_DST,rule.getNw_dst());    }    if (rule.getNw_proto() != 0) {      flow.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,Integer.toString(rule.getNw_proto()));    }    if (rule.getAction() == Action.ALLOW) {      flow.put(StaticFlowEntryPusher.COLUMN_ACTIONS,"output=controller");    }    if (rule.getTp_dst() != 0) {      flow.put(StaticFlowEntryPusher.COLUMN_TP_DST,Integer.toString(rule.getTp_dst()));    }    storageSource.insertRowAsync(StaticFlowEntryPusher.TABLE_NAME,flow);  } else {    HashMap<String,Object> flow=new HashMap<String,Object>();    flow.put(StaticFlowEntryPusher.COLUMN_SWITCH,dpid);    flow.put(StaticFlowEntryPusher.COLUMN_NAME,flowName);    flow.put(StaticFlowEntryPusher.COLUMN_ACTIVE,Boolean.toString(true));    flow.put(StaticFlowEntryPusher.COLUMN_COOKIE,"0");    flow.put(StaticFlowEntryPusher.COLUMN_PRIORITY,Integer.toString(priority));    dpid2FlowPriority.put(dpid,--priority);    flow.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,"2048");    flow.put(StaticFlowEntryPusher.COLUMN_NW_DST,rule.getNw_dst());    if (rule.getNw_proto() != 0) {      flow.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,Integer.toString(rule.getNw_proto()));    }    if (rule.getAction() == Action.ALLOW) {      flow.put(StaticFlowEntryPusher.COLUMN_ACTIONS,"output=controller");    }    if (rule.getTp_dst() != 0) {      flow.put(StaticFlowEntryPusher.COLUMN_TP_DST,Integer.toString(rule.getTp_dst()));    }    storageSource.insertRowAsync(StaticFlowEntryPusher.TABLE_NAME,flow);  }  logger.info("ACL flow " + flowName + " added in "+ dpid);}  }
class C{  public final static boolean isAnnotation(final Element element){  if (element == null) {    return false;  }  final Object role=element.getDataset().at(ELEMENT_ROLE_DATA_PROPERTY);  return ELEMENT_ROLE_VALUE_ANNOTATION.equals(role);}  }
class C{  @VisibleForTesting public DateTime now(){  return DateTime.now(DateTimeZone.UTC);}  }
class C{  @Override protected void onSaveInstanceState(Bundle outState){  outState.putParcelable("editingMyData",editingMyData);  outState.putParcelable("myDataList",myDataList);  outState.putBoolean("isEditable",isEditable);  super.onSaveInstanceState(outState);}  }
class C{  private Colors(){  throw new Error("Do not need instantiate!");}  }
class C{  @Override public void sessionCreated(HttpSessionEvent se){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Creating session for @ViewScoped beans");  }}  }
class C{  public static void main(String[] args){  try {    setDefaultPath(Paths.get("cache"));    URL testUrl=new URL("http://127.0.0.1");    System.out.println(getImage(testUrl,"test",30));  } catch (  MalformedURLException ex) {    Logger.getLogger(ImageCache.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  @Override public void close(){  List<CloseableReference<Bitmap>> bitmapReferences;synchronized (this) {    if (mBitmapReferences == null) {      return;    }    bitmapReferences=mBitmapReferences;    mBitmapReferences=null;    mBitmaps=null;    mDurations=null;  }  CloseableReference.closeSafely(bitmapReferences);}  }
class C{  public void removeFilesWithName(String filename){  LinkedList<String> entriesToRemove=new LinkedList<String>();  for (  Entry<String,JarEntry> JarEntry : jarEntries.entrySet()) {    if (JarEntry.getKey().endsWith(filename)) {      entriesToRemove.add(JarEntry.getKey());    }  }  for (  String entryToRemove : entriesToRemove) {    jarEntries.remove(entryToRemove);  }  entriesToRemove.clear();  for (  Entry<String,byte[]> JarEntry : jarEntriesToAdd.entrySet()) {    if (JarEntry.getKey().endsWith(filename)) {      entriesToRemove.add(JarEntry.getKey());    }  }  for (  String entryToRemove : entriesToRemove) {    jarEntriesToAdd.remove(entryToRemove);  }}  }
class C{  @Override public void agg(double newVal){  aggVal++;}  }
class C{  public XYSplineRenderer(int precision,FillType fillType){  super();  if (precision <= 0) {    throw new IllegalArgumentException("Requires precision > 0.");  }  ParamChecks.nullNotPermitted(fillType,"fillType");  this.precision=precision;  this.fillType=fillType;  this.gradientPaintTransformer=new StandardGradientPaintTransformer();}  }
class C{  private void stopDrag(MotionEvent ev){  mTouchMode=TOUCH_MODE_IDLE;  final boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled();  final boolean oldState=isChecked();  final boolean newState;  if (commitChange) {    mVelocityTracker.computeCurrentVelocity(1000);    final float xvel=mVelocityTracker.getXVelocity();    if (Math.abs(xvel) > mMinFlingVelocity) {      newState=ViewUtils.isLayoutRtl(this) ? (xvel < 0) : (xvel > 0);    } else {      newState=getTargetCheckedState();    }  } else {    newState=oldState;  }  if (newState != oldState) {    playSoundEffect(SoundEffectConstants.CLICK);  }  setChecked(newState);  cancelSuperTouch(ev);}  }
class C{  public void logRename(IgfsPath path,IgfsMode mode,IgfsPath destPath){  addEntry(new Entry(TYPE_RENAME,path.toString(),mode,null,null,null,null,null,null,null,null,null,null,null,null,null,null,destPath.toString(),null,null));}  }
class C{  protected final byte SSE2_SIZE(Operand o){  return o.isFloat() ? DW : QW;}  }
class C{  public Cfci(IndependenceTest independenceTest){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());}  }
class C{  private static long FNVhash64(long val){  long hashval=FNV_offset_basis_64;  for (int i=0; i < 8; i++) {    long octet=val & 0x00ff;    val=val >> 8;    hashval=hashval ^ octet;    hashval=hashval * FNV_prime_64;  }  return Math.abs(hashval);}  }
class C{  protected V10Database(WireDatabaseConnection connection,ProtocolDescriptor descriptor){  super(connection,descriptor);}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  @Override public UpdateResponse add(Collection<SolrInputDocument> docs,int commitWithinMs) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.add(docs,commitWithinMs);  if (this.solr1 != null)   ur=this.solr1.add(docs,commitWithinMs);  return ur;}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  super.dynInit();  CButton refreshButton=ConfirmPanel.createRefreshButton(false);  refreshButton.setMargin(new Insets(1,10,0,10));  refreshButton.setDefaultCapable(true);  refreshButton.addActionListener(this);  dialog.getConfirmPanel().addButton(refreshButton);  dialog.getRootPane().setDefaultButton(refreshButton);  if (getGridTab().getValue("C_BankStatement_ID") == null) {    ADialog.error(0,dialog,"SaveErrorRowNotFound");    return false;  }  dialog.setTitle(getTitle());  int AD_Column_ID=4917;  MLookup lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,AD_Column_ID,DisplayType.TableDir);  bankAccountField=new VLookup("C_BankAccount_ID",true,true,true,lookup);  int C_BankAccount_ID=Env.getContextAsInt(Env.getCtx(),p_WindowNo,"C_BankAccount_ID");  bankAccountField.setValue(new Integer(C_BankAccount_ID));  authorizationField=new VString("authorization",false,false,true,10,30,null,null);  authorizationField.addActionListener(this);  MLookup lookupDocument=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPayment.Table_Name,MPayment.COLUMNNAME_C_DocType_ID),DisplayType.TableDir);  documentTypeField=new VLookup(MPayment.COLUMNNAME_C_DocType_ID,false,false,true,lookupDocument);  documentTypeField.addActionListener(this);  MLookup lookupTender=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPayment.Table_Name,MPayment.COLUMNNAME_TenderType),DisplayType.List);  tenderTypeField=new VLookup(MPayment.COLUMNNAME_TenderType,false,false,true,lookupTender);  tenderTypeField.addActionListener(this);  bPartnerLookup=new VLookup("C_BPartner_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,3499,DisplayType.Search));  BPartner_idLabel.setLabelFor(bPartnerLookup);  Timestamp date=Env.getContextAsDate(Env.getCtx(),p_WindowNo,MBankStatement.COLUMNNAME_StatementDate);  dateToField.setValue(date);  bankAccount=new MBankAccount(Env.getCtx(),C_BankAccount_ID,null);  loadBankAccount();  return true;}  }
class C{  public int glyphOffset(int glyphId){  this.checkGlyphRange(glyphId);  return this.getLocaList().get(glyphId);}  }
class C{  public static @Unsigned long toUnsignedLong(@Unsigned byte b){  return ((long)b) & 0xffL;}  }
class C{  public static boolean testPointTriangle(Vector2fc point,Vector2fc v0,Vector2fc v1,Vector2fc v2){  return testPointTriangle(point.x(),point.y(),v0.x(),v0.y(),v1.x(),v1.y(),v2.x(),v2.y());}  }
class C{  public Chronology withUTC(){  return INSTANCE_UTC;}  }
class C{  public void writeToFile(File file,String fileContent){  try {    FileWriter writer=new FileWriter(file);    writer.write(fileContent);    writer.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {  }}  }
class C{  public Set<String> keySet(){  return Schema.getSchema(name).keySet();}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public void addConnectionOptions(MqttConnectOptions connectOptions){  conOpt=connectOptions;}  }
class C{  public TargetHostMeta(List<String> hosts){  super();  final String uuid=UUID.randomUUID().toString().substring(0,12);  this.hosts.addAll(hosts);  this.setTargetHostId("THM_" + hosts.size() + "_"+ PcDateUtils.getNowDateTimeStrConciseNoZone()+ "_"+ uuid);}  }
class C{  public long startCqQueryExecution(){  this._stats.incInt(_cqQueryExecutionInProgressId,1);  return NanoTimer.getTime();}  }
class C{  private List<AttributeMetaData> seperateSpecialAttributeMetaData(ExampleSetMetaData metaData){  ArrayList<AttributeMetaData> specialStuff=new ArrayList<AttributeMetaData>();  for (  AttributeMetaData att : metaData.getAllAttributes()) {    if (att.isSpecial()) {      specialStuff.add(att);    }  }  return specialStuff;}  }
class C{  private int handleL(String value,DoubleMetaphoneResult result,int index){  result.append('L');  if (charAt(value,index + 1) == 'L') {    if (conditionL0(value,index)) {      result.appendAlternate(' ');    }    index+=2;  } else {    index++;  }  return index;}  }
class C{  public void onSuccess(OneSheeldDevice device){}  }
class C{  public boolean is_non_term(){  return true;}  }
class C{  private boolean isZookeeperLeader(String nodeIP,int port){  try {    Socket sock=new Socket();    sock.connect(new InetSocketAddress(nodeIP,port),10000);    sock.close();    return true;  } catch (  IOException ex) {    _log.warn("Unexpected IO errors when checking local coordinator state. {}",ex.toString());  }  return false;}  }
class C{  public boolean isSynchronizing(Account account,String remotePath){  return !(account == null || remotePath == null) && (mPendingOperations.contains(account,remotePath));}  }
class C{  public MutableObject(final T value){  super();  this.value=value;}  }
class C{  public AbortProcessingException(String message,Throwable cause){  super(message,cause);}  }
class C{  public MalformedGraphException(final Exception exception){  super(exception);}  }
class C{  private ByteBuffer copy(ByteBuffer original){  ByteBuffer cp=ByteBuffer.allocate(original.remaining());  cp.put(original);  cp.flip();  return cp;}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  return flavor.equals(getTransferDataFlavors()[0]);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public GroupTree findGroup(String fullyQualifiedGroupName){  String[] groupKeys=fullyQualifiedGroupName.split("\\.");  GroupTree group=this;  for (int i=0; i < groupKeys.length && group != null; i++) {    group=group.getSubGroup(groupKeys[i]);  }  return group;}  }
class C{  public void testTicketBlzg463b() throws Exception {  final ASTContainer container=new TestHelper("explainHints-blzg1463b","explainHints-blzg1463b.rq","empty.trig","explainHints-blzg1463b.srx").runTest();  final Iterator<BOp> explainHintAnnotatedBOps=ExplainHints.explainHintAnnotatedBOpIterator(container.getOptimizedAST());  assertTrue(explainHintAnnotatedBOps.hasNext());}  }
class C{  protected String processPostRequest(HttpServletRequest request){  if (request == null) {    return Helper.ERROR_UNKNOWN_JSON;  }  try {    JsonObject jsonObject=Helper.getJsonObjectFromRequestBody(request);    Integer id=JsonUtils.getIntegerFieldFromJsonObject(jsonObject,"id");    String name=JsonUtils.getStringFieldFromJsonObject(jsonObject,"name");    if (id != null) {      MetricGroupsDao metricGroupsDao=new MetricGroupsDao();      MetricGroup metricGroup=metricGroupsDao.getMetricGroup(id);      name=metricGroup.getName();    }    MetricGroupsDao metricGroupsDao=new MetricGroupsDao();    MetricGroup metricGroup=metricGroupsDao.getMetricGroupByName(name);    if (metricGroup == null)     return Helper.ERROR_NOTFOUND_JSON;    com.pearson.statsagg.webui.MetricGroups metricGroups=new com.pearson.statsagg.webui.MetricGroups();    String result=metricGroups.removeMetricGroup(name);    return Helper.createSimpleJsonResponse(result);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return Helper.ERROR_UNKNOWN_JSON;  }}  }
class C{  public Vector2D toVector2D(){  return new Vector2D(x,z);}  }
class C{  private double hammingDistanceNumberVector(NumberVector o1,NumberVector o2){  final int d1=o1.getDimensionality(), d2=o2.getDimensionality();  int differences=0;  int d=0;  for (; d < d1 && d < d2; d++) {    double v1=o1.doubleValue(d), v2=o2.doubleValue(d);    if (v1 != v1 || v2 != v2) {      continue;    }    if (v1 != v2) {      ++differences;    }  }  for (; d < d1; d++) {    double v1=o1.doubleValue(d);    if (v1 != 0. && v1 == v1) {      ++differences;    }  }  for (; d < d2; d++) {    double v2=o2.doubleValue(d);    if (v2 != 0. && v2 == v2) {      ++differences;    }  }  return differences;}  }
class C{  private static int parentIdx(int childIdx){  return (childIdx - 1) / 2;}  }
class C{  public void update(final int[] key,final U value){  if (key == null || key.length == 0)   return;  insertOrIgnore(MurmurHash3.hash(key,DEFAULT_UPDATE_SEED)[0] >>> 1,value);}  }
class C{  private void assertDebug(QueryResponse response,boolean expected,String key){  if (expected) {    assertInDebug(response,key);  } else {    assertNotInDebug(response,key);  }}  }
class C{  public static Boolean deleteAppFiles(){  Boolean res=false;  File f=getAppFolder();  if (f.exists() && f.isDirectory()) {    File[] files=f.listFiles();    for (    File file : files) {      file.delete();    }    if (f.listFiles().length == 0) {      res=true;    }  }  return res;}  }
class C{  public SubscriptionMigrationException(){  super();}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  this.id=DBIDUtil.importInteger(in.readInt());}  }
class C{  public StringEncoderComparator(StringEncoder stringEncoder){  this.stringEncoder=stringEncoder;}  }
class C{  @CheckReturnValue @Nonnull public static String join(@Nonnull Collection<String> s,@Nonnull String delimiter){  StringBuilder buffer=new StringBuilder();  Iterator<String> iter=s.iterator();  while (iter.hasNext()) {    buffer.append(iter.next());    if (iter.hasNext()) {      buffer.append(delimiter);    }  }  return buffer.toString();}  }
class C{  public void minx(int parseInt){  minx=parseInt;  tileBoundsSet=true;}  }
class C{  public final double variance(Attribute att){  return variance(att.index());}  }
class C{  public XObject execute(XPathContext xctxt,int currentNode,DTM dtm,int expType) throws javax.xml.transform.TransformerException {  if (m_whatToShow == NodeTest.SHOW_BYFUNCTION) {    if (null != m_relativePathPattern) {      return m_relativePathPattern.execute(xctxt);    } else     return NodeTest.SCORE_NONE;  }  XObject score;  score=super.execute(xctxt,currentNode,dtm,expType);  if (score == NodeTest.SCORE_NONE)   return NodeTest.SCORE_NONE;  if (getPredicateCount() != 0) {    if (!executePredicates(xctxt,dtm,currentNode))     return NodeTest.SCORE_NONE;  }  if (null != m_relativePathPattern)   return m_relativePathPattern.executeRelativePathPattern(xctxt,dtm,currentNode);  return score;}  }
class C{  public int[] classify(){  if (targetVariable == null) {    throw new NullPointerException("Target not set.");  }  BayesUpdater bayesUpdater=new RowSummingExactUpdater(getBayesIm());  int nvars=getBayesImVars().size();  int ncases=testData.getNumRows();  int[] varIndices=new int[nvars];  List<Node> dataVars=testData.getVariables();  for (int i=0; i < nvars; i++) {    DiscreteVariable variable=(DiscreteVariable)getBayesImVars().get(i);    if (variable == targetVariable) {      continue;    }    varIndices[i]=dataVars.indexOf(variable);    if (varIndices[i] == -1) {      throw new IllegalArgumentException("Can't find the (non-target) variable " + variable + " in the data. Either it's not there, or else its "+ "categories are in a different order.");    }  }  DataSet selectedData=testData.subsetColumns(varIndices);  this.numCases=ncases;  int[] estimatedValues=new int[ncases];  int numTargetCategories=targetVariable.getNumCategories();  double[][] probOfClassifiedValues=new double[numTargetCategories][ncases];  Arrays.fill(estimatedValues,-1);  for (int i=0; i < ncases; i++) {    Evidence evidence=Evidence.tautology(getBayesIm());    int itarget=evidence.getNodeIndex(targetVariable.getName());    evidence.getProposition().setVariable(itarget,true);    this.missingValueCaseFound=false;    for (int j=0; j < getBayesImVars().size(); j++) {      if (j == getBayesImVars().indexOf(targetVariable)) {        continue;      }      int observedValue=selectedData.getInt(i,j);      if (observedValue == DiscreteVariable.MISSING_VALUE) {        this.missingValueCaseFound=true;        continue;      }      String jName=getBayesImVars().get(j).getName();      int jIndex=evidence.getNodeIndex(jName);      evidence.getProposition().setCategory(jIndex,observedValue);    }    bayesUpdater.setEvidence(evidence);    Node targetNode=getBayesIm().getNode(targetVariable.getName());    int indexTargetBN=getBayesIm().getNodeIndex(targetNode);    int estimatedValue=-1;{      double highestProb=-0.1;      for (int j=0; j < numTargetCategories; j++) {        double marginal=bayesUpdater.getMarginal(indexTargetBN,j);        probOfClassifiedValues[j][i]=marginal;        if (marginal >= highestProb) {          highestProb=marginal;          estimatedValue=j;        }      }    }    if (estimatedValue < 0) {      TetradLogger.getInstance().log("details","Case " + i + " does not return valid marginal.");      for (int m=0; m < nvars; m++) {        TetradLogger.getInstance().log("details","  " + selectedData.getDouble(i,m));      }      estimatedValues[i]=DiscreteVariable.MISSING_VALUE;      continue;    }    estimatedValues[i]=estimatedValue;  }  this.classifications=estimatedValues;  this.marginals=probOfClassifiedValues;  return estimatedValues;}  }
class C{  private static int testZeroAverageOfNonEmptyStream(){  Supplier<DoubleStream> ds=null;  return compareUlpDifference(0.0,ds.get().average().getAsDouble(),0);}  }
class C{  @Override public String toStringNoWeight(){  return toStringNoWeight(AbstractInstance.s_numericAfterDecimalPoint);}  }
class C{  public static String sprintf(Object self,String format,Object[] values){  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  PrintStream out=new PrintStream(outputStream);  out.printf(format,values);  return outputStream.toString();}  }
class C{  protected void postorder(TreeNode<E> root){  if (root == null)   return;  postorder(root.left);  postorder(root.right);  System.out.print(root.element + " ");}  }
class C{  public static final double[][] zeroMatrix(final int dim){  final double[][] z=new double[dim][dim];  return z;}  }
class C{  public GmlLowerCorner(){  super(Namespaces.GML_NAMESPACE,NAME);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  Assert.assertTrue(this.getSender() != null);  CancellationRegistry.getInstance().registerMessage(this);  resp=RegionSizeResponse.create(dm,this.getSender());  if (cancelled) {    return null;  }  resp.calcSize(this.getRegion(dm.getSystem()));  if (cancelled) {    return null;  }  CancellationRegistry.getInstance().deregisterMessage(this);  return resp;}  }
class C{  private void completeMultipart(String bucketName,String objectName,String uploadId,Part[] parts) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  Map<String,String> queryParamMap=new HashMap<>();  queryParamMap.put(UPLOAD_ID,uploadId);  CompleteMultipartUpload completeManifest=new CompleteMultipartUpload(parts);  HttpResponse response=executePost(bucketName,objectName,null,queryParamMap,completeManifest);  String bodyContent="";  try {    Scanner scanner=new java.util.Scanner(response.body().charStream()).useDelimiter("\\A");    if (scanner.hasNext()) {      bodyContent=scanner.next();    }  } catch (  EOFException e) {    LOGGER.log(Level.WARNING,"EOF exception occured: " + e);  } finally {    response.body().close();  }  bodyContent=bodyContent.trim();  if (!bodyContent.isEmpty()) {    ErrorResponse errorResponse=new ErrorResponse(new StringReader(bodyContent));    if (errorResponse.code() != null) {      throw new ErrorResponseException(errorResponse,response.response());    }  }}  }
class C{  public void animation(){  if (animList.isEmpty())   return;  for (  BaseAnim anim : animList) {    if (anim.animating) {      doAnimation(anim);    } else {      animList.remove(anim);      return;    }  }}  }
class C{  public PointsToSet reachingObjectsOfArrayElement(PointsToSet s){  return FullObjectSet.v();}  }
class C{  public synchronized void remove(SessionOwner owner){  checkNotNull(owner);  save(sessions.remove(getKey(owner)));}  }
class C{  public Distribution(float[] values){  assert (values != null && values.length > 1);  Arrays.sort(values);  orderedValues=values.clone();}  }
class C{  public boolean isDelimitedIdentifiersSupported(){  return delimitedIdentifiersSupported;}  }
class C{  public InputNode readElement(InputNode from) throws Exception {  if (!stack.isRelevant(from)) {    return null;  }  EventNode event=reader.next();  while (event != null) {    if (event.isEnd()) {      if (stack.pop() == from) {        return null;      }    } else     if (event.isStart()) {      return readStart(from,event);    }    event=reader.next();  }  return null;}  }
class C{  public CRLNumberExtension(int crlNum) throws IOException {  this(PKIXExtensions.CRLNumber_Id,false,BigInteger.valueOf(crlNum),NAME,LABEL);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public boolean isIdentical(){  return isIdentical(new Version());}  }
class C{  private void interpretDiv(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  final Pair<Boolean,BigInteger> secondValue=loadLongValue(instruction.getSecondOperand());  if (firstValue.first() && secondValue.first()) {    final BigInteger result=firstValue.second().divide(secondValue.second());    final String targetRegister=instruction.getThirdOperand().getValue();    final OperandSize targetSize=instruction.getThirdOperand().getSize();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  public boolean isBefore(Year other){  return year < other.year;}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(3 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  public static String javaEncode(String s){  int length=s.length();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char c=s.charAt(i);switch (c) {case '\t':      buff.append("\\t");    break;case '\n':  buff.append("\\n");break;case '\f':buff.append("\\f");break;case '\r':buff.append("\\r");break;case '"':buff.append("\\\"");break;case '\\':buff.append("\\\\");break;default :int ch=c & 0xffff;if (ch >= ' ' && (ch < 0x80)) {buff.append(c);} else {buff.append("\\u");String hex=Integer.toHexString(ch);for (int len=hex.length(); len < 4; len++) {buff.append('0');}buff.append(hex);}}}return buff.toString();}  }
class C{  public static void refresh(){  getTransactionManager();  transactionManager.isActive=false;  transactionManager.cleaner.toContinueRunning=false;  try {    transactionManager.cleanUpThread.interrupt();  } catch (  Exception e) {    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (writer.infoEnabled())     writer.info(LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPLCLEANUPEXCEPTION_WHILE_CLEANING_THREAD_BEFORE_RE_STATRUP);  }  transactionManager=null;}  }
class C{  @SuppressWarnings("unchecked") protected void receiveTurns(Packet packet){  getGame().setTurnVector((List<GameTurn>)packet.getObject(0));}  }
class C{  @CanIgnoreReturnValue public E removeLast(){  if (isEmpty()) {    throw new NoSuchElementException();  }  return removeAndGet(getMaxElementIndex());}  }
class C{  public Builder operationTimeoutCheckInterval(Duration operationTimeoutCheckInterval){  this.operationTimeoutCheckInterval=operationTimeoutCheckInterval;  return this;}  }
class C{  public Builder withStatusFilter(@Status int statusFlags){  this.criteriaStatusBuilder=new Criteria.Builder().joinWithOr(buildCriteriaListFrom(statusFlags));  return this;}  }
class C{  public void defineLineStyle(double width,Color color2){  Color color=color2;  if (color == null) {    color=new Color(0,0,0);  }  LineStyle style=new LineStyle(width,color);  if (maxLineWidth < width) {    maxLineWidth=width;  }  if (color instanceof AlphaColor) {    hasAlpha=true;  }  elements.add(style);}  }
class C{  public void scheduleAtFixedRate(TimerTask task,Date when,long period){  if (period <= 0 || when.getTime() < 0) {    throw new IllegalArgumentException();  }  long delay=when.getTime() - System.currentTimeMillis();  scheduleImpl(task,delay,period,true);}  }
class C{  public void andNot(FixedBitSet other){  andNot(other.bits,other.numWords);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.501 -0500",hash_original_method="DEDDF1126FB4D34419E3541D3DE0EAF4",hash_generated_method="2B9870CC5ED016B0226F139B021BA3AB") public final TelephoneNumber parseTelephoneNumber(boolean inBrackets) throws ParseException {  TelephoneNumber tn;  if (debug)   dbg_enter("telephone_subscriber");  lexer.selectLexer("charLexer");  try {    char c=lexer.lookAhead(0);    if (c == '+')     tn=global_phone_number(inBrackets); else     if (Lexer.isHexDigit(c) || c == '#' || c == '*' || c == '-' || c == '.' || c == '(' || c == ')') {      tn=local_phone_number(inBrackets);    } else     throw createParseException("unexpected char " + c);    return tn;  }  finally {    if (debug)     dbg_leave("telephone_subscriber");  }}  }
class C{  @Override protected void onPostExecute(Boolean result){  mAdapter.notifyDataSetChanged();  mCurrentDialog.dismiss();  mCurrentDialog=null;  findViewById(R.id.ok).setEnabled(true);  if (result) {    Toast t=Toast.makeText(ErrorsWhileCopyingHandlerActivity.this,getString(R.string.foreign_files_success),Toast.LENGTH_LONG);    t.show();    finish();  } else {    Toast t=Toast.makeText(ErrorsWhileCopyingHandlerActivity.this,getString(R.string.foreign_files_fail),Toast.LENGTH_LONG);    t.show();  }}  }
class C{  public boolean isRotationNeeded(final String data,final File file){  final long newRotation=(System.currentTimeMillis() - m_startingTime) / m_timeInterval;  if (newRotation > m_currentRotation) {    m_currentRotation=newRotation;    return true;  } else {    return false;  }}  }
class C{  private void loadSources(){  ArrayList<MReportSource> list=new ArrayList<MReportSource>();  String sql="SELECT * FROM PA_ReportSource WHERE PA_ReportLine_ID=? AND IsActive='Y'";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getPA_ReportLine_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next())     list.add(new MReportSource(getCtx(),rs,null));    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,null,e);  } finally {    try {      if (pstmt != null)       pstmt.close();    } catch (    Exception e) {    }    pstmt=null;  }  m_sources=new MReportSource[list.size()];  list.toArray(m_sources);  log.finest("ID=" + getPA_ReportLine_ID() + " - Size="+ list.size());}  }
class C{  int size(){  return count;}  }
class C{  public final void calcScore(){  m_score=SCORE_OTHER;  if (null == m_targetString)   calcTargetString();}  }
class C{  public boolean isInTransit(){  Object oo=get_Value(COLUMNNAME_IsInTransit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void processFile() throws Exception {  processFile(QUARTZ_XML_DEFAULT_FILE_NAME);}  }
class C{  public SetDeviceBusyAction(GBDevice device,String busyTask,Context context){  this.device=device;  this.busyTask=busyTask;  this.context=context;}  }
class C{  public Set<String> view(){  return Collections.unmodifiableSet(this.stackTraceSet);}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  tieBreaker=((attributeValue[offset++] & 0xffL) << 56) | ((attributeValue[offset++] & 0xffL) << 48) | ((attributeValue[offset++] & 0xffL) << 40)| ((attributeValue[offset++] & 0xffL) << 32)| ((attributeValue[offset++] & 0xffL) << 24)| ((attributeValue[offset++] & 0xffL) << 16)| ((attributeValue[offset++] & 0xffL) << 8)| (attributeValue[offset] & 0xffL);}  }
class C{  private void onTrigger3(){  final CharSequence targetName=mAppsAdapter.getLabel(TARGET_POSITION);  addInstruction(R.string.accessibility_tutorial_lesson_1_text_4,true,targetName);  mAllApps.setAccessibilityDelegate(mTargetIconFocusDelegate);}  }
class C{  public int context_init(){  this.top_borders[0]=new int[this.s.mb_width][16 + 8 + 8];  this.top_borders[1]=new int[this.s.mb_width][16 + 8 + 8];  this.ref_cache[0][scan8[5] + 1]=this.ref_cache[0][scan8[7] + 1]=this.ref_cache[0][scan8[13] + 1]=this.ref_cache[1][scan8[5] + 1]=this.ref_cache[1][scan8[7] + 1]=this.ref_cache[1][scan8[13] + 1]=PART_NOT_AVAILABLE;  return 0;}  }
class C{  public CloneNotSupportedException(@Nullable String s){  super(s);}  }
class C{  public void addEventListener(GroupChatListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (listener == null) {    throw new RcsIllegalArgumentException("listener must not be null!");  }  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IGroupChatListener rcsListener=new GroupChatListenerImpl(listener);    mGroupChatListeners.put(listener,new WeakReference<>(rcsListener));    mApi.addEventListener3(rcsListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static int indexOf(@Nonnull final Iterable<Notification> notifications,final long id){  return Iterables.indexOf(notifications,null);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void updateCvForAddrChange(){  for (int i=0; i < firstFreeSpace; i++) {    CvValue cv=_cvMap.get(cvNumbers[i]);    if (cv == null) {      continue;    }    if (!cvNumbers[i].equals(cv.number())) {      log.error("CV numbers don't match: " + cvNumbers[i] + " "+ cv.number());    }    cv.setToWrite(true);    cv.setState(EDITED);    if (log.isDebugEnabled()) {      log.debug("Mark to write " + cv.number());    }  }}  }
class C{  @Override public void shutdown(ShutdownModeAmp mode){  if (!_lifecycle.toStopping()) {    return;  }  _lifecycle.toDestroy();  OnShutdownMessage shutdownMessage=new OnShutdownMessage(this,mode,isSingle());  _queue.offer(shutdownMessage);  _queue.wakeAllAndWait();  shutdownMessage.waitFor(1,TimeUnit.SECONDS);  super.shutdown(mode);  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(manager())){    Object ctx=outbox.getAndSetContext(this);    try {      outbox.flush();      if (!isSingle()) {        _worker.shutdown(mode);      }    }  finally {      outbox.getAndSetContext(ctx);    }  } }  }
class C{  public Node(Animator animation){  this.animation=animation;}  }
class C{  protected void saveResultSelection(){  if (m_keyColumnIndex == -1) {    return;  }  if (p_multiSelection) {    int rows=detail.getRowCount();    BrowserRows browserRows=detail.getData();    m_values=new LinkedHashMap<Integer,LinkedHashMap<String,Object>>();    for (int row=0; row < rows; row++) {      Object data=detail.getModel().getValueAt(row,m_keyColumnIndex);      if (data instanceof IDColumn) {        IDColumn dataColumn=(IDColumn)data;        if (dataColumn.isSelected()) {          LinkedHashMap<String,Object> values=new LinkedHashMap<String,Object>();          for (int col=0; col < browserRows.getColumnCount(); col++) {            MBrowseField field=browserRows.getBrowserField(col);            if (!field.isReadOnly() || field.isIdentifier()) {              GridField gridField=detail.getData().getValue(row,col);              Object value=gridField.getValue();              values.put(field.getAD_View_Column().getColumnName(),value);            }          }          if (values.size() > 0)           m_values.put(dataColumn.getRecord_ID(),values);        }      }    }  }}  }
class C{  boolean enableNetwork(int netId,boolean disableOthers){  boolean ret=enableNetworkWithoutBroadcast(netId,disableOthers);  if (disableOthers) {    sendConfiguredNetworksChangedBroadcast();  } else {    WifiConfiguration enabledNetwork=null;synchronized (mConfiguredNetworks) {      enabledNetwork=mConfiguredNetworks.get(netId);    }    if (enabledNetwork != null) {      sendConfiguredNetworksChangedBroadcast(enabledNetwork,WifiManager.CHANGE_REASON_CONFIG_CHANGE);    }  }  return ret;}  }
class C{  public int height(){  return height(root);}  }
class C{  public boolean started(){  return state == State.STARTED;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.COORDINATE___X1:    return X1_EDEFAULT == null ? x_1 != null : !X1_EDEFAULT.equals(x_1);case UmplePackage.COORDINATE___Y1:  return Y1_EDEFAULT == null ? y_1 != null : !Y1_EDEFAULT.equals(y_1);}return super.eIsSet(featureID);}  }
class C{  public XCalElement(Element element){  this.element=element;  document=element.getOwnerDocument();}  }
class C{  public Long convertCIMStatisticTime(String statisticTime){  if (statisticTime == null || statisticTime.equals("")) {    return 0L;  }  String[] parts=statisticTime.split("[\\.\\+\\-]");  Integer year=Integer.parseInt(parts[0].substring(0,4),10) - 1900;  Integer month=Integer.parseInt(parts[0].substring(4,6),10) - 1;  Integer day=Integer.parseInt(parts[0].substring(6,8),10);  Integer hour=Integer.parseInt(parts[0].substring(8,10),10);  Integer min=Integer.parseInt(parts[0].substring(10,12),10);  Integer sec=Integer.parseInt(parts[0].substring(12,14),10);  Integer msec=Integer.parseInt(parts[1].substring(0,3),10);  @SuppressWarnings("deprecation") Date date=new Date(year,month,day,hour,min,sec);  Long millis=date.getTime() + msec;  date=new Date(millis);  _log.debug("sample date: " + date.toString());  return millis;}  }
class C{  public int length(){  return suffixes.length;}  }
class C{  public RuleBasedBreakIteratorBuilder(String description){  Vector<String> tempRuleList=buildRuleList(description);  buildCharCategories(tempRuleList);  buildStateTable(tempRuleList);  buildBackwardsStateTable(tempRuleList);}  }
class C{  public void removed(java.awt.Container cont){  if (killCache) {    rpfLogger.fine("emptying cache!");    clearCache();  }  setProjection((Projection)null);}  }
class C{  public void beginBatchMode(){  mPreventInvalidateCount++;}  }
class C{  private String generateSortOrderStmt(){  StringBuffer buffer=new StringBuffer();  if (doObjectQuery) {    if (sortingRequired) {      buffer.append(prepareSortOrder(listCriteria));    }  }  return buffer.toString();}  }
class C{  public static IPath makeTempDir() throws IOException {  return org.eclipse.core.runtime.Path.fromOSString(Files.createTempDirectory("unittest").toString());}  }
class C{  public static StreamSortSpec createSampleStreamSortSpec(String streamId){  StreamSortSpec streamSortSpec=new StreamSortSpec();  streamSortSpec.setWindowMargin(1000);  streamSortSpec.setWindowPeriod("PT1m");  return streamSortSpec;}  }
class C{  public PriorityQueue(int initialCapacity){  this(initialCapacity,null);}  }
class C{  public GroovyPrintStream(File file,String csn) throws FileNotFoundException, UnsupportedEncodingException {  super(file,csn);}  }
class C{  @RequestProcessing(value="/article/{articleId}",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass={CSRFToken.class,StopwatchEndAdvice.class}) public void showArticle(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String articleId) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/article.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final JSONObject article=articleQueryService.getArticleById(articleId);  if (null == article) {    response.sendError(HttpServletResponse.SC_NOT_FOUND);    return;  }  final HttpSession session=request.getSession(false);  if (null != session) {    session.setAttribute(Article.ARTICLE_T_ID,articleId);  }  filler.fillHeaderAndFooter(request,response,dataModel);  final String authorEmail=article.optString(Article.ARTICLE_AUTHOR_EMAIL);  final JSONObject author=userQueryService.getUserByEmail(authorEmail);  article.put(Article.ARTICLE_T_AUTHOR_NAME,author.optString(User.USER_NAME));  article.put(Article.ARTICLE_T_AUTHOR_URL,author.optString(User.USER_URL));  article.put(Article.ARTICLE_T_AUTHOR_INTRO,author.optString(UserExt.USER_INTRO));  dataModel.put(Article.ARTICLE,article);  article.put(Common.IS_MY_ARTICLE,false);  article.put(Article.ARTICLE_T_AUTHOR,author);  article.put(Common.REWARDED,false);  articleQueryService.processArticleContent(article,request);switch (article.optInt(Article.ARTICLE_TYPE)) {case Article.ARTICLE_TYPE_C_JOURNAL_SECTION:{      final List<JSONObject> teams=journalQueryService.getSection(article.optLong(Keys.OBJECT_ID));      dataModel.put(Common.TEAMS,teams);      break;    }case Article.ARTICLE_TYPE_C_JOURNAL_CHAPTER:{    final List<JSONObject> teams=journalQueryService.getChapter(article.optLong(Keys.OBJECT_ID));    dataModel.put(Common.TEAMS,teams);    break;  }default :filler.fillRelevantArticles(dataModel,article);filler.fillRandomArticles(dataModel);filler.fillHotArticles(dataModel);break;}final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);JSONObject currentUser;String currentUserId=null;if (isLoggedIn) {currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);currentUserId=currentUser.optString(Keys.OBJECT_ID);article.put(Common.IS_MY_ARTICLE,currentUserId.equals(article.optString(Article.ARTICLE_AUTHOR_ID)));final boolean isFollowing=followQueryService.isFollowing(currentUserId,articleId);dataModel.put(Common.IS_FOLLOWING,isFollowing);final int vote=voteQueryService.isVoted(currentUserId,articleId);dataModel.put(Vote.VOTE,vote);if (currentUserId.equals(author.optString(Keys.OBJECT_ID))) {article.put(Common.REWARDED,true);} else {article.put(Common.REWARDED,rewardQueryService.isRewarded(currentUserId,articleId,Reward.TYPE_C_ARTICLE));}}if (!(Boolean)request.getAttribute(Keys.HttpRequest.IS_SEARCH_ENGINE_BOT)) {articleMgmtService.incArticleViewCount(articleId);}final Auth auth=Auth.create(Symphonys.get("qiniu.accessKey"),Symphonys.get("qiniu.secretKey"));final String uploadToken=auth.uploadToken(Symphonys.get("qiniu.bucket"));dataModel.put("qiniuUploadToken",uploadToken);dataModel.put("qiniuDomain",Symphonys.get("qiniu.domain"));if (!Symphonys.getBoolean("qiniu.enabled")) {dataModel.put("qiniuUploadToken","");}dataModel.put(Common.DISCUSSION_VIEWABLE,article.optBoolean(Common.DISCUSSION_VIEWABLE));if (!article.optBoolean(Common.DISCUSSION_VIEWABLE)) {article.put(Article.ARTICLE_T_COMMENTS,(Object)Collections.emptyList());return;}String pageNumStr=request.getParameter("p");if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {pageNumStr="1";}final int pageNum=Integer.valueOf(pageNumStr);final int pageSize=Symphonys.getInt("articleCommentsPageSize");final int windowSize=Symphonys.getInt("articleCommentsWindowSize");final List<JSONObject> articleComments=commentQueryService.getArticleComments(articleId,pageNum,pageSize);article.put(Article.ARTICLE_T_COMMENTS,(Object)articleComments);for (final JSONObject comment : articleComments) {String thankTemplate=langPropsService.get("thankConfirmLabel");thankTemplate=thankTemplate.replace("{point}",String.valueOf(Symphonys.getInt("pointThankComment"))).replace("{user}",comment.optJSONObject(Comment.COMMENT_T_COMMENTER).optString(User.USER_NAME));comment.put(Comment.COMMENT_T_THANK_LABEL,thankTemplate);final String commentId=comment.optString(Keys.OBJECT_ID);if (isLoggedIn) {comment.put(Common.REWARDED,rewardQueryService.isRewarded(currentUserId,commentId,Reward.TYPE_C_COMMENT));}comment.put(Common.REWARED_COUNT,rewardQueryService.rewardedCount(commentId,Reward.TYPE_C_COMMENT));}final int commentCnt=article.getInt(Article.ARTICLE_COMMENT_CNT);final int pageCount=(int)Math.ceil((double)commentCnt / (double)pageSize);final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);if (!pageNums.isEmpty()) {dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));}dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);dataModel.put(Common.ARTICLE_COMMENTS_PAGE_SIZE,pageSize);}  }
class C{  public JmsSiBusMemberScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);}  }
class C{  private void processChanAboutAttribute(Attributes a){  if (a.getLength() > 0) {    String res=a.getValue(0);    chan.setAboutAttribute(res);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public boolean isRoleExists(){  List<VORoleDefinition> rolesTmp=getRoles();  if (rolesTmp != null && rolesTmp.size() > 0) {    return true;  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS07.class,args);}  }
class C{  void recomposeDecimalFormats(DecimalFormatProperties dfp){  DecimalFormatSymbols oldDfs=(DecimalFormatSymbols)m_decimalFormatSymbols.get(dfp.getName());  if (null == oldDfs) {    m_decimalFormatSymbols.put(dfp.getName(),dfp.getDecimalFormatSymbols());  } else   if (!dfp.getDecimalFormatSymbols().equals(oldDfs)) {    String themsg;    if (dfp.getName().equals(new QName(""))) {      themsg=XSLMessages.createWarning(XSLTErrorResources.WG_ONE_DEFAULT_XSLDECIMALFORMAT_ALLOWED,new Object[0]);    } else {      themsg=XSLMessages.createWarning(XSLTErrorResources.WG_XSLDECIMALFORMAT_NAMES_MUST_BE_UNIQUE,new Object[]{dfp.getName()});    }    error(themsg);  }}  }
class C{  protected void serializeComment(Comment node) throws SAXException {  if ((fFeatures & COMMENTS) != 0) {    String data=node.getData();    if ((fFeatures & WELLFORMED) != 0) {      isCommentWellFormed(data);    }    if (fLexicalHandler != null) {      if (!applyFilter(node,NodeFilter.SHOW_COMMENT)) {        return;      }      fLexicalHandler.comment(data.toCharArray(),0,data.length());    }  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (request.getParameter("edicion") != null && request.getParameter("edicion").trim().length() > 0 && request.getParameter("edicion").trim().equalsIgnoreCase("true")) {    if (request.getParameter("type").trim().equalsIgnoreCase(ValoracionConstants.ACTUALIZACION_DATOS)) {      if (StringUtils.isBlank(this.titulo)) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ValoracionConstants.LABEL_VALORACION_ELIMINACION_TITULO,request.getLocale())));      }      if (StringUtils.isBlank(this.fechaEjecucion)) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ValoracionConstants.LABEL_VALORACIONES_ELIMINACION_FECHA_EJECUCION,request.getLocale())));      } else {        if (!DateUtils.isDate(this.fechaEjecucion)) {          errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(ValoracionConstants.LABEL_VALORACIONES_ELIMINACION_FECHA_EJECUCION,request.getLocale())));        } else {          Date fechaEjecucion=DateUtils.getDate(this.fechaEjecucion);          if (DBUtils.getFechaActual().compareTo(fechaEjecucion) > 0) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(ValoracionConstants.ERROR_VALORACION_FECHA_EJECUCION_NO_VALIDA));          }        }      }    }  } else {    if (StringUtils.isBlank(this.titulo)) {      errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ValoracionConstants.LABEL_VALORACION_ELIMINACION_TITULO,request.getLocale())));    }  }  return errors;}  }
class C{  public AddNodesResponse AddNodes(RequestHeader RequestHeader,AddNodesItem... NodesToAdd) throws ServiceFaultException, ServiceResultException {  AddNodesRequest req=new AddNodesRequest(RequestHeader,NodesToAdd);  return (AddNodesResponse)channel.serviceRequest(req);}  }
class C{  public void dispose() throws IOException {  inputStream.close();  inputStream=null;}  }
class C{  protected void colorCalc(int rgb){  if (((rgb & 0xff000000) == 0) && (rgb <= colorModeX)) {    colorCalc((float)rgb);  } else {    colorCalcARGB(rgb,colorModeA);  }}  }
class C{  @SuppressWarnings("unchecked") private boolean canBind(final Gearing gearing,final IBindingSet childSolutionIn,final IConstant<?> seed){  if (gearing.outVar == null)   return seed.equals(gearing.outConst);  if (!childSolutionIn.isBound(gearing.outVar))   return true;  return seed.equals(childSolutionIn.get(gearing.outVar));}  }
class C{  private static void attachTo(JSlider c){  MouseMotionListener[] listeners=c.getMouseMotionListeners();  for (  MouseMotionListener m : listeners) {    if (m instanceof TrackListener) {      c.removeMouseMotionListener(m);      SnapListener listen=new SnapListener(m,(BasicSliderUI)c.getUI(),c);      c.addMouseMotionListener(listen);      c.addMouseListener(listen);      c.addPropertyChangeListener("UI",listen);    }  }}  }
class C{  public void destroy(String noteId){  LOGGER.info("Destroy interpreter group " + getId() + " for note "+ noteId);  List<Interpreter> intpForNote=this.get(noteId);  destroy(intpForNote);  if (remoteInterpreterProcess != null) {    remoteInterpreterProcess.dereference();    if (remoteInterpreterProcess.referenceCount() <= 0) {      remoteInterpreterProcess=null;      allInterpreterGroups.remove(id);    }  }}  }
class C{  public boolean savedPasswordExists(){  try {    return getLockSettings().havePassword(getCurrentOrCallingUserId());  } catch (  RemoteException re) {    return false;  }}  }
class C{  public QueryFilterBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public void onClientDisconnected(){  enter();  try {    PlatformCallbackUtils.onClientDisconnected(envPtr);  }  finally {    leave();  }}  }
class C{  public byte[] createISO(){  return createISO(ISOConstants.VOLUME_IDENTIFIER);}  }
class C{  public static String createTag(String str){  if (str.length() > TAG_MAX_LENGTH - TAG_PREFIX_LENGTH) {    return TAG_PREFIX + str.substring(0,TAG_MAX_LENGTH - TAG_PREFIX_LENGTH - 1);  }  return TAG_PREFIX + str;}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  notifyListeners(event);}  }
class C{  @Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){  if (cursor != null) {    final int totalCount=cursor.getCount();    if (totalCount > 0) {      cursor.moveToFirst();      String name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));      mMessageText.setText(getResources().getString(R.string.contacts_string,totalCount,name));    } else {      mMessageText.setText(R.string.contacts_empty);    }  }}  }
class C{  private Boolean modifyNtpShare(StorageSystem storage,FileDeviceInputOutput args,SMBFileShare smbFileShare,String forceGroup,SMBFileShare existingShare) throws NetAppException {  String portGroup=findVfilerName(args.getFs());  NetAppApi nApi=new NetAppApi.Builder(storage.getIpAddress(),storage.getPortNumber(),storage.getUsername(),storage.getPassword()).https(true).vFiler(portGroup).build();  String shareId=smbFileShare.getPath();  if (!nApi.modifyShare(shareId,smbFileShare.getName(),smbFileShare.getDescription(),smbFileShare.getMaxUsers(),smbFileShare.getPermission(),forceGroup)) {    _log.info("NetAppFileStorageDevice doShare (modification) for {} with id {} - failed",shareId,args.getFileObjId());    return false;  } else {    _log.info("NetAppFileStorageDevice doShare (modification) for {} with id {} - complete",shareId,args.getFileObjId());    return true;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentnodevalue.class,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:11.444 -0500",hash_original_method="8CBCB41C90B55C0D320AD938E2B6273D",hash_generated_method="A5FA69A3CCB19FFBBD7A744313A1F0A4") static public FileA3D createFromResource(RenderScript rs,Resources res,int id){  rs.validate();  InputStream is=null;  try {    is=res.openRawResource(id);  } catch (  Exception e) {    throw new RSRuntimeException("Unable to open resource " + id);  }  int fileId=0;  if (is instanceof AssetManager.AssetInputStream) {    int asset=((AssetManager.AssetInputStream)is).getAssetInt();    fileId=rs.nFileA3DCreateFromAssetStream(asset);  } else {    throw new RSRuntimeException("Unsupported asset stream");  }  if (fileId == 0) {    throw new RSRuntimeException("Unable to create a3d file from resource " + id);  }  FileA3D fa3d=new FileA3D(fileId,rs,is);  fa3d.initEntries();  return fa3d;}  }
class C{  void draw(final Graphics g,final int scale,final Color color){  final int rx=worldToCanvas(x,scale);  final int ry=worldToCanvas(y,scale);  final int rwidth=width * scale;  final int rheight=height * scale;  g.setColor(color);  g.fillRect(rx,ry,rwidth,rheight);}  }
class C{  @SuppressLint("GetInstance") public SecretKeyWrapper(Context context,String alias) throws GeneralSecurityException, IOException {  mCipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");  final KeyStore keyStore=KeyStore.getInstance("AndroidKeyStore");  keyStore.load(null);  if (!keyStore.containsAlias(alias)) {    generateKeyPair(context,alias);  }  final KeyStore.PrivateKeyEntry entry=(KeyStore.PrivateKeyEntry)keyStore.getEntry(alias,null);  mPair=new KeyPair(entry.getCertificate().getPublicKey(),entry.getPrivateKey());}  }
class C{  protected void updateSize(){  validCachedPreferredSize=false;  tree.treeDidChange();}  }
class C{  String constructComponentName(){synchronized (List.class) {    return base + nameCounter++;  }}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  IWorkbenchPart part=HandlerUtil.getActivePart(event);  if (part instanceof SecuritySpecOutlineViewPart) {    SecuritySpecOutlineViewPart droidsafeView=(SecuritySpecOutlineViewPart)part;    droidsafeView.refreshSpecAndOutlineView(true);  } else   if (part instanceof IndicatorViewPart) {    IndicatorViewPart indicatorView=(IndicatorViewPart)part;    File file=indicatorView.getInputElement();    indicatorView.forceReload(file);    indicatorView.updateView();  }  return null;}  }
class C{  public String toString(){  if (_host == null)   return "InvocationKey[" + new String(_uri,0,_uriLength) + "]"; else   return ("InvocationKey[host=" + _host + ",port="+ _port+ ",uri="+ new String(_uri,0,_uriLength)+ "]");}  }
class C{  public static BatchStatus createSuccessStatus(){  BatchStatus status=new BatchStatus();  status.setCode(HttpURLConnection.HTTP_OK);  status.setReason("Success");  return status;}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double maxProb=-1;  double[] sumProbs;  int maxIndex=0;  sumProbs=distributionForInstance(instance);  for (int j=0; j < sumProbs.length; j++) {    if (Utils.gr(sumProbs[j],maxProb)) {      maxIndex=j;      maxProb=sumProbs[j];    }  }  return maxIndex;}  }
class C{  private static void uaRIMinNe(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uariminNe(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uariminNe(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  private static URL[] pathToURLs(String path) throws MalformedURLException {  String[] names=path.split(File.pathSeparator);  URL[] urls=new URL[names.length];  int count=0;  for (  String f : names) {    URL url=fileToURL(new File(f));    urls[count++]=url;  }  return urls;}  }
class C{  public static void main(String[] args) throws Exception {  try {    SamzaRestConfig config=parseConfig(args);    SamzaRestService restService=new SamzaRestService(config);    SamzaRestApplication samzaRestApplication=new SamzaRestApplication(config);    ServletContainer container=new ServletContainer(samzaRestApplication);    restService.addServlet(container,"/*");    ScheduledExecutorService schedulingService=Executors.newScheduledThreadPool(1);    ScheduledExecutorSchedulingProvider schedulingProvider=new ScheduledExecutorSchedulingProvider(schedulingService);    SamzaMonitorService monitorService=new SamzaMonitorService(config,new NoOpMetricsRegistry(),schedulingProvider);    monitorService.start();    restService.runBlocking();    monitorService.stop();  } catch (  Throwable t) {    log.error("Exception in main.",t);  }}  }
class C{  @Override public AcInstallationHistoryPojo execute(){  AcInstallationHistoryPojo history=new AcInstallationHistoryPojo();  if (isExecuting) {    history.addError("AC Tool is already executing.");    return history;  }  Session session=null;  Set<AuthorizableInstallationHistory> authorizableInstallationHistorySet=new LinkedHashSet<AuthorizableInstallationHistory>();  try {    session=repository.loginAdministrative(null);    String rootPath=getConfigurationRootPath();    Node rootNode=session.getNode(rootPath);    Map<String,String> newestConfigurations=configFilesRetriever.getConfigFileContentFromNode(rootNode);    installConfigurationFiles(session,history,newestConfigurations,authorizableInstallationHistorySet);  } catch (  AuthorizableCreatorException e) {    history.addError(e.toString());  }catch (  Exception e) {    session.logout();    LOG.error("Exception in AceServiceImpl: {}",e);    history.addError(e.toString());    for (    AuthorizableInstallationHistory authorizableInstallationHistory : authorizableInstallationHistorySet) {      try {        String message="performing authorizable installation rollback(s)";        LOG.info(message);        history.addMessage(message);        authorizableCreatorService.performRollback(repository,authorizableInstallationHistory,history);      } catch (      RepositoryException e1) {        LOG.error("Exception: ",e1);      }    }  } finally {    session.logout();  }  return history;}  }
class C{  public Geo subtract(Geo b){  return create(this.x() - b.x(),this.y() - b.y(),this.z() - b.z());}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public boolean isLocaleModified(){  return localeModified;}  }
class C{  public static BufferedImage renderToImage(File inFile,String path,int width,int height) throws IOException {  return renderToImage(inFile.toURI().toURL().toExternalForm(),path,width,height);}  }
class C{  public boolean isLineAlignCenter(){  return getLineAlignmentType().equals(LINEALIGNMENTTYPE_Center);}  }
class C{  public boolean isNumericallyIdentical(final Vector other){  final double thisX=y * other.z - z * other.y;  final double thisY=z * other.x - x * other.z;  final double thisZ=x * other.y - y * other.x;  return thisX * thisX + thisY * thisY + thisZ * thisZ < MINIMUM_RESOLUTION_SQUARED;}  }
class C{  public static boolean isHexDigit(char c){  return isDigit(c) || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');}  }
class C{  public List<? extends XBeeResponse> collectResponses(int wait,CollectTerminator terminator) throws XBeeException {  if (!this.isConnected()) {    throw new XBeeNotConnectedException();  }  long start=System.currentTimeMillis();  long callStart=0;  int waitTime;  List<XBeeResponse> responseList=new ArrayList<XBeeResponse>();  XBeeResponse response=null;  try {    while (true) {      waitTime=wait - (int)(System.currentTimeMillis() - start);      if (waitTime <= 0) {        break;      }      log.debug("calling getResponse with waitTime: " + waitTime);      if (log.isDebugEnabled()) {        callStart=System.currentTimeMillis();      }      response=this.getResponse(waitTime);      if (log.isDebugEnabled()) {        log.debug("Got response in " + (System.currentTimeMillis() - callStart));      }      responseList.add(response);      if (terminator != null && terminator.stop(response)) {        log.debug("Found terminating response.. exiting");        break;      }    }  } catch (  XBeeTimeoutException e) {  }catch (  XBeeException e) {    throw e;  }  log.debug("Time is up.. returning list with " + responseList.size() + " packets");  return responseList;}  }
class C{  public Item deleteBack(){  Item itemToReturn=getBack();  items[size - 1]=null;  size=size - 1;  return itemToReturn;}  }
class C{  public Set<State> postEvent(EventData eventData,Long stateMachineInstanceId,String correlationId){  StateMachine stateMachine=null;  if (stateMachineInstanceId != null) {    stateMachine=retrieveStateMachine(stateMachineInstanceId);  } else   if (correlationId != null) {    stateMachine=retrieveStateMachineByCorrelationId(correlationId);    stateMachineInstanceId=(stateMachine == null) ? null : stateMachine.getId();  }  if (stateMachine == null)   throw new UnknownStateMachine("State machine with id: " + stateMachineInstanceId + " or correlation id "+ correlationId+ " not found");  Event event=eventsDAO.findBySMIdAndName(stateMachineInstanceId,eventData.getName());  if (event == null)   throw new IllegalEventException("Event with stateMachineId: " + stateMachineInstanceId + ", event name: "+ eventData.getName()+ " not found");  event.setStatus(Event.EventStatus.triggered);  event.setEventData(eventData.getData());  event.setEventSource(eventData.getEventSource());  eventsDAO.updateEvent(event);  Context context=new RAMContext(System.currentTimeMillis(),null,stateMachine);  final Set<State> dependantStates=context.getDependantStates(eventData.getName());  logger.debug("These states {} depend on event {}",dependantStates,eventData.getName());  Set<State> executableStates=getExecutableStates(dependantStates,stateMachineInstanceId);  logger.debug("These states {} are now unblocked after event {}",executableStates,eventData.getName());  executeStates(stateMachineInstanceId,executableStates);  return executableStates;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static CacheConfiguration hadoopSystemCache(){  CacheConfiguration cache=new CacheConfiguration();  cache.setName(CU.SYS_CACHE_HADOOP_MR);  cache.setCacheMode(REPLICATED);  cache.setAtomicityMode(TRANSACTIONAL);  cache.setWriteSynchronizationMode(FULL_SYNC);  cache.setEvictionPolicy(null);  cache.setSwapEnabled(false);  cache.setCacheStoreFactory(null);  cache.setNodeFilter(CacheConfiguration.ALL_NODES);  cache.setEagerTtl(true);  cache.setRebalanceMode(SYNC);  return cache;}  }
class C{  public static Properties stringToProperties(String str){  Properties result=new Properties();  String[] arr=str.split("\n");  for (  String pair : arr) {    String[] pairArr=pair.trim().split("=");    if (pairArr.length == 2 && !pairArr[0].trim().startsWith("#")) {      result.put(pairArr[0].trim(),pairArr[1].trim());    }  }  return result;}  }
class C{  public static void printState(int code,String[] parameters,TLCState state,int num){  recorder.record(code,new TLCStateInfo(state,""),num);  DebugPrinter.print("entering printState(String[])");  ToolIO.out.println(getMessage(STATE,code,parameters));  DebugPrinter.print("leaving printState(String[])");}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public static Motion createSplineMotion(int sourceValue,int destinationValue,int duration){  Motion spline=new Motion(sourceValue,destinationValue,duration);  spline.motionType=SPLINE;  return spline;}  }
class C{  public ComponentBuilder obfuscated(Boolean obfuscated){  this.current.setObfuscated(obfuscated);  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TransactionInput addSignedInput(TransactionOutPoint prevOut,Script scriptPubKey,ECKey sigKey,SigHash sigHash,boolean anyoneCanPay) throws ScriptException {  checkState(!outputs.isEmpty(),"Attempting to sign tx without outputs.");  TransactionInput input=new TransactionInput(params,this,new byte[]{},prevOut);  addInput(input);  Sha256Hash hash=hashForSignature(inputs.size() - 1,scriptPubKey,sigHash,anyoneCanPay);  ECKey.ECDSASignature ecSig=sigKey.sign(hash);  TransactionSignature txSig=new TransactionSignature(ecSig,sigHash,anyoneCanPay);  if (scriptPubKey.isSentToRawPubKey())   input.setScriptSig(ScriptBuilder.createInputScript(txSig)); else   if (scriptPubKey.isSentToAddress())   input.setScriptSig(ScriptBuilder.createInputScript(txSig,sigKey)); else   throw new ScriptException("Don't know how to sign for this kind of scriptPubKey: " + scriptPubKey);  return input;}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof Map.Entry == false) {    return false;  }  Map.Entry entry=(Map.Entry)obj;  Object entryKey=entry.getKey();  Object entryValue=entry.getValue();  if ((entryKey == null) || (entryValue == null)) {    return false;  }  return parent.isEqualKey(entryKey,key) && parent.isEqualValue(entryValue,getValue());}  }
class C{  public IIOMetadata convertStreamMetadata(IIOMetadata inData,ImageWriteParam param){  if (inData == null) {    throw new IllegalArgumentException("inData == null!");  }  IIOMetadata sm=getDefaultStreamMetadata(param);  convertMetadata(STREAM_METADATA_NAME,inData,sm);  return sm;}  }
class C{  private void onBluetoothPeerFound(Context context,Intent intent){  Log.d(TAG,"Peer found broadcast received.");}  }
class C{  void beforeWrite(MVMap<?,?> map){  if (saveNeeded) {    if (map == meta) {      return;    }    saveNeeded=false;    if (unsavedMemory > autoCommitMemory && autoCommitMemory > 0) {      commitAndSave();    }  }}  }
class C{  public ResourceLoader(DynamicClassLoader loader,PathImpl path){  this(loader);  setPath(path);}  }
class C{  private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public String delI(String id,String... args){  return TestHarness.deleteById(id,args);}  }
class C{  public boolean hasOrientation(){  return screenOrientation != null;}  }
class C{  public boolean isEnum(){  return isEnum;}  }
class C{  public void reset(){  mColorRadius=0;}  }
class C{  public static RefactoringStatus createErrorStatus(String msg){  return createStatus(ERROR,msg,null,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  public static void test(){  System.out.println("** Before Init **");  getMemoryUsed();  Properties ctx=Login.initTest(false);  System.gc();  System.out.println("** Before Creation **");  long start=getMemoryUsed();  int AD_Window_ID=102;  long startTime=System.currentTimeMillis();  GridWindowVO vo=GridWindowVO.create(Env.getCtx(),1,AD_Window_ID);  GridWindow w=new GridWindow(vo);  long endDef=System.currentTimeMillis();  System.out.println("Load Definition Time in ms = " + String.valueOf(endDef - startTime));  if (1 == 2) {    w.loadCompete();    long endDefComplete=System.currentTimeMillis();    System.out.println("Load Definition Complete Time in ms = " + String.valueOf(endDefComplete - startTime));  }  w.query();  long endData=System.currentTimeMillis();  System.out.println("Load Data Time in ms = " + String.valueOf(endData - startTime));  w.loadCompete();  long endDataComplete=System.currentTimeMillis();  System.out.println("Load Data Complete Time in ms = " + String.valueOf(endDataComplete - startTime));  w.getTab(0).navigate(0);  System.out.println("** Before Dispose **");  getMemoryUsed();  w.dispose();  System.out.println("** Before GC **");  getMemoryUsed();  w=null;  System.gc();  System.out.println("** After GC **");  getMemoryUsed();  System.gc();  System.out.println("** Final **");  long complete=System.currentTimeMillis();  System.out.println("Complete Time in ms = " + String.valueOf(complete - startTime));  long end=getMemoryUsed();  System.out.println("Memory increase in kB = End-Start=" + String.valueOf((end - start) / 1024));  listThreads();  System.out.println("API Test");  System.out.println("64.72=" + MConversionRate.convert(ctx,new BigDecimal(100.0),116,100,0,0));  System.out.println("0.647169=" + MConversionRate.getRate(116,100,null,0,0,0));  System.out.println("12.5=" + MUOMConversion.convert(101,102,new BigDecimal(100.0),true));}  }
class C{  protected EnumIntegerType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  @Deprecated public List<List<DBGroup>> ListAccessibleGroupsBF(Manager manager,Set<DBGroup> seenGroups) throws SQLException {  List<DBGroup> position=Lists.newArrayList();  List<List<DBGroup>> rval=Lists.newLinkedList();  List<DBAcl> myacls=manager.aclDao.queryForFieldValuesArgs(ImmutableMap.of(DBAcl.MEMBER_IDENTITY_FIELD_NAME,(Object)getId()));  Deque<List<DBGroup>> toProcess=Queues.newArrayDeque();  for (  DBAcl acl : myacls) {    assert acl.getGroupId().getName() == null;    final DBGroup group=acl.loadGroup(manager.groupDao);    addPathToRval(seenGroups,position,rval,toProcess,group);  }  while (!toProcess.isEmpty()) {    position=toProcess.pop();    final DBGroup processedGroup=position.get(position.size() - 1);    for (    DBAcl acl : processedGroup.getAcls()) {      final DBGroup newGroup=acl.getMemberGroupId();      if (null == newGroup) {        continue;      }      assert newGroup.getName() == null;      manager.groupDao.refresh(newGroup);      addPathToRval(seenGroups,position,rval,toProcess,newGroup);    }  }  return rval;}  }
class C{  public void updateAchievement(DBTransaction transaction,Integer id,Achievement achievement) throws SQLException {  String query="UPDATE achievement SET " + "identifier = '[identifier]', " + "title = '[title]', "+ "category = '[category]', "+ "description = '[description]', "+ "base_score = [base_score], "+ "active = [active] "+ "WHERE id = [id];";  Map<String,Object> parameters=new HashMap<String,Object>();  parameters.put("identifier",achievement.getIdentifier());  parameters.put("title",achievement.getTitle());  parameters.put("category",achievement.getCategory().toString());  parameters.put("description",achievement.getDescription());  parameters.put("base_score",achievement.getBaseScore());  parameters.put("active",achievement.isActive() ? 1 : 0);  parameters.put("id",id);  transaction.execute(query,parameters);}  }
class C{  public void removeMessageListener(MessageListener listener){  m_notifier.remove(listener);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean exists(){  return exists;}  }
class C{  public static String describe(Type nativeObjectType){  BridJRuntime runtime=getRuntime(Utils.getClass(nativeObjectType));  TypeInfo<NativeObject> typeInfo=getTypeInfo(runtime,nativeObjectType);  return typeInfo == null ? Utils.toString(nativeObjectType) : typeInfo.describe();}  }
class C{  public CoapResponse putIfMatch(String payload,int format,byte[]... etags){  return synchronous(ifMatch(format(newPut().setURI(uri).setPayload(payload),format),etags));}  }
class C{  private PostgreSQLCodeNodeLoader(){}  }
class C{  public void clearLongitude(){  mHasLongitude=false;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XMLString s1=m_arg0.execute(xctxt).xstr();  double start=m_arg1.execute(xctxt).num();  int lenOfS1=s1.length();  XMLString substr;  if (lenOfS1 <= 0)   return XString.EMPTYSTRING; else {    int startIndex;    if (Double.isNaN(start)) {      start=-1000000;      startIndex=0;    } else {      start=Math.round(start);      startIndex=(start > 0) ? (int)start - 1 : 0;    }    if (null != m_arg2) {      double len=m_arg2.num(xctxt);      int end=(int)(Math.round(len) + start) - 1;      if (end < 0)       end=0; else       if (end > lenOfS1)       end=lenOfS1;      if (startIndex > lenOfS1)       startIndex=lenOfS1;      substr=s1.substring(startIndex,end);    } else {      if (startIndex > lenOfS1)       startIndex=lenOfS1;      substr=s1.substring(startIndex);    }  }  return (XString)substr;}  }
class C{  public void drawDial(Canvas canvas,Rect bounds,boolean isAmbientMode,boolean isRound,Rect insetsScreen,int canvasWidth){  canvas.drawPaint(mCanvasPaint);  if (!isAmbientMode) {    if (isRound) {      canvas.drawBitmap(mShadowOverlay.getBitmap(),null,bounds,mShinePaint);    } else {      canvas.drawBitmap(mShadowOverlay.getBitmap(),-insetsScreen.left + (canvasWidth - mShadowOverlay.getWidth()) / 2,-insetsScreen.top + (canvasWidth - mShadowOverlay.getHeight()) / 2,mShinePaint);    }  }  if (!isAmbientMode) {    minutesTens.drawShadow(canvas,sunPositionX,sunPositionY);    minutesUnits.drawShadow(canvas,sunPositionX,sunPositionY);    hoursTens.drawShadow(canvas,sunPositionX,sunPositionY);    hoursUnits.drawShadow(canvas,sunPositionX,sunPositionY);  }  minutesTens.drawShape(canvas);  minutesUnits.drawShape(canvas);  hoursTens.drawShape(canvas);  hoursUnits.drawShape(canvas);  if (!isAmbientMode) {    if (isRound) {      canvas.drawBitmap(mShadowOverlay.getBitmap(),null,mShineRectBounds,mShinePaint);    } else {      canvas.drawBitmap(mShadowOverlay.getBitmap(),-insetsScreen.left + (canvasWidth - mShadowOverlay.getWidth()) / 2,-insetsScreen.top + (canvasWidth - mShadowOverlay.getHeight()) / 2,mShinePaint);    }  }  if (!isAmbientMode) {    if (isRound) {      canvas.drawBitmap(mShineOverlay.getBitmap(),null,mShineRectBounds,mShinePaint);    } else {      canvas.drawBitmap(mShineOverlay.getBitmap(),-insetsScreen.left + (canvasWidth - mShineOverlay.getWidth()) / 2,-insetsScreen.top + (canvasWidth - mShineOverlay.getHeight()) / 2,mShinePaint);    }  }}  }
class C{  private void addIndex(Index<K,V> idx,HeadIndex<K,V> h,int indexLevel){  int insertionLevel=indexLevel;  Comparable<? super K> key=comparable(idx.node.key);  if (key == null)   throw new NullPointerException();  for (; ; ) {    int j=h.level;    Index<K,V> q=h;    Index<K,V> r=q.right;    Index<K,V> t=idx;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        int c=key.compareTo(n.key);        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (c > 0) {          q=r;          r=r.right;          continue;        }      }      if (j == insertionLevel) {        if (t.indexesDeletedNode()) {          findNode(key);          return;        }        if (!q.link(r,t))         break;        if (--insertionLevel == 0) {          if (t.indexesDeletedNode())           findNode(key);          return;        }      }      if (--j >= insertionLevel && j < indexLevel)       t=t.down;      q=q.down;      r=q.right;    }  }}  }
class C{  public ExtentTest warning(Throwable t){  log(Status.WARNING,t);  return this;}  }
class C{  public void run(){  int local_only_warehouse_id=getOnly_Warehouse_ID();  int local_only_product_id=getOnly_Product_ID();  StringBuffer sql=new StringBuffer("SELECT * FROM M_Locator ").append(" WHERE IsActive='Y'");  if (local_only_warehouse_id != 0)   sql.append(" AND M_Warehouse_ID=?");  if (local_only_product_id != 0)   sql.append(" AND (IsDefault='Y' ").append("OR EXISTS (SELECT * FROM M_Product p ").append("WHERE p.M_Locator_ID=M_Locator.M_Locator_ID AND p.M_Product_ID=?)").append("OR EXISTS (SELECT * FROM M_Storage s ").append("WHERE s.M_Locator_ID=M_Locator.M_Locator_ID AND s.M_Product_ID=?))");  sql.append(" ORDER BY ");  if (local_only_warehouse_id == 0)   sql.append("(SELECT wh.Name FROM M_Warehouse wh WHERE wh.M_Warehouse_ID=M_Locator.M_Warehouse_ID),");  sql.append("M_Locator.Value");  String finalSql=MRole.getDefault(m_ctx,false).addAccessSQL(sql.toString(),"M_Locator",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  if (isInterrupted()) {    log.log(Level.SEVERE,"Interrupted");    return;  }  m_lookup.clear();  int rows=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(finalSql,null);    int index=1;    if (local_only_warehouse_id != 0)     pstmt.setInt(index++,getOnly_Warehouse_ID());    if (local_only_product_id != 0) {      pstmt.setInt(index++,getOnly_Product_ID());      pstmt.setInt(index++,getOnly_Product_ID());    }    rs=pstmt.executeQuery();    while (rs.next()) {      MLocator loc=new MLocator(m_ctx,rs,null);      int M_Locator_ID=loc.getM_Locator_ID();      m_lookup.put(new Integer(M_Locator_ID),loc);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,finalSql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine("Complete #" + m_lookup.size());  if (m_lookup.size() == 0)   log.finer(finalSql);}  }
class C{  public void sFeature1Init(int y,int cp){  ftype=STAT_FEATURE1;  idx=-1;  this.y=y;  this.cp=cp;  val=1;  wgt=0.0;  strId="s1_" + Integer.toString(y) + "_"+ Integer.toString(cp);}  }
class C{  protected NodeResult compareCDATA(final XNode xControl,final XNode xTest){  Differences differences=new Differences();  CDATASection control=(CDATASection)xControl.getNode();  CDATASection test=(CDATASection)xTest.getNode();  NodeResult nodeResult=new NodeResult(xControl,xTest,differences);  if (!XMLUtil.nodesEqual(control,test,isIgnoringWhitespace())) {    if (!_config.isCustomDifference()) {      differences.add("Different CDATA Node : Current Node " + xTest.getXPath() + " --> Golden Node "+ xControl.getXPath());    } else {      Difference diff=new Difference(DifferenceConstants.CDATA_VALUE,xControl,xTest);      differences.add(diff);    }  } else {    nodeResult.setIfExactMatch(true);  }  return nodeResult;}  }
class C{  private void disconnectFromIms() throws PayloadException, NetworkException, ContactManagerException {  stopImsConnection(TerminationReason.TERMINATION_BY_CONNECTION_LOST);  mCurrentNetworkInterface.registrationTerminated();  mCurrentNetworkInterface.getNetworkAccess().disconnect();}  }
class C{  protected void sequence_VarFacet(ISerializationContext context,Facet semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.FACET__KEY) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.FACET__KEY));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.FACET__EXPR) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.FACET__EXPR));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getVarFacetAccess().getKeyVarFacetKeyParserRuleCall_0_0(),semanticObject.getKey());  feeder.accept(grammarAccess.getVarFacetAccess().getExprVariableRefParserRuleCall_1_0(),semanticObject.getExpr());  feeder.finish();}  }
class C{  void checkEndMethod(){  if (endMethod) {    throw new IllegalStateException("Cannot visit elements after visitEnd has been called.");  }}  }
class C{  private double angleTo(Point2D that){  double dx=that.x - this.x;  double dy=that.y - this.y;  return Math.atan2(dy,dx);}  }
class C{  public ColorGRAY(Scalar s){  super(s);}  }
class C{  public ObjectImporter(Applet applet){  URL codebase=applet.getCodeBase();  orgServername=servername=codebase.getHost();  orgPort=port=codebase.getPort();}  }
class C{  public UIOutputTestCase(String name){  super(name);}  }
class C{  private void simulatePhiBlock(SsaBasicBlock block){  for (  SsaInsn insn : block.getInsns()) {    if (insn instanceof PhiInsn) {      simulatePhi((PhiInsn)insn);    } else {      return;    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public synchronized void addConfigurationListener(ConfigurationListener cl){}  }
class C{  private void createHilbertCoefficients(){  int half=(HALF_BAND_FILTER.length + 1) / 2;  int middle=half / 2;  mCoefficients=new float[half];  for (int x=0; x < half; x++) {    mCoefficients[x]=HALF_BAND_FILTER[x * 2] * GAIN;    if (x < middle && mCoefficients[x] > 0.0f) {      mCoefficients[x]=-mCoefficients[x];    } else     if (x >= middle && mCoefficients[x] < 0.0f) {      mCoefficients[x]=-mCoefficients[x];    }  }}  }
class C{  public static void test_constructor(){  new Target();}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the array size n: ");  int n=input.nextInt();  int[][] array=new int[n][n];  fill(array);  print(array);  System.out.print("The largest row index: ");  print(largestRow(array));  System.out.print("The largest column index: ");  print(largestColumn(array));}  }
