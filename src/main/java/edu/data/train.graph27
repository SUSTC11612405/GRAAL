class C{  private static String logToXml(final String manufacturer,final String model,final String revision,final String swid,final String swVersion,final String exportVersion){  return String.format(LOG_XML,manufacturer,model,revision,swid,swVersion,exportVersion);}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_DATA\"";  db.execSQL(sql);}  }
class C{  public byte readByte(){  return code[curBCI + 1];}  }
class C{  public static void frequencies(DoubleArrayList sortedData,DoubleArrayList distinctValues,IntArrayList frequencies){  distinctValues.clear();  if (frequencies != null)   frequencies.clear();  double[] sortedElements=sortedData.elements();  int size=sortedData.size();  int i=0;  while (i < size) {    double element=sortedElements[i];    int cursor=i;    while (++i < size && sortedElements[i] == element)     ;    int runLength=i - cursor;    distinctValues.add(element);    if (frequencies != null)     frequencies.add(runLength);  }}  }
class C{  public void removeStatementEventListener(StatementEventListener listener){synchronized (this.statementEventListeners) {    this.statementEventListeners.remove(listener);  }}  }
class C{  private void storeRequestId(String requestId,String key){  requestIds.put(requestId,key);}  }
class C{  public GitlabHTTPRequestor method(String method){  try {    this.method=METHOD.valueOf(method).toString();  } catch (  IllegalArgumentException e) {    throw new IllegalArgumentException("Invalid HTTP Method: " + method + ". Must be one of "+ METHOD.prettyValues());  }  return this;}  }
class C{  public static ValueTime fromNanos(long nanos){  return (ValueTime)Value.cache(new ValueTime(nanos));}  }
class C{  @SuppressWarnings({"ConstantConditions"}) public final void changeVariable(Node from,Node to){  if (!(from instanceof DiscreteVariable && to instanceof DiscreteVariable)) {    throw new IllegalArgumentException("Only discrete variables supported.");  }  DiscreteVariable _from=(DiscreteVariable)from;  DiscreteVariable _to=(DiscreteVariable)to;  int col=variables.indexOf(_from);  List<String> oldCategories=_from.getCategories();  List<String> newCategories=_to.getCategories();  int[] indexArray=new int[oldCategories.size()];  for (int i=0; i < oldCategories.size(); i++) {    indexArray[i]=newCategories.indexOf(oldCategories.get(i));  }  for (int i=0; i < getNumRows(); i++) {    if (data[i][col] == null) {      break;    }    int value=getInt(i,col);    int newIndex=0;    try {      newIndex=indexArray[value];    } catch (    Exception e) {      e.printStackTrace();    }    if (newIndex == -1) {      data[i][col]=null;    } else {      setInt(i,col,newIndex);    }  }  variables.set(col,_to);}  }
class C{  public void insertAttributeAt(Attribute att,int position){  if ((position < 0) || (position > m_Attributes.size())) {    throw new IllegalArgumentException("Index out of range");  }  att=(Attribute)att.copy();  freshAttributeInfo();  att.setIndex(position);  m_Attributes.insertElementAt(att,position);  for (int i=position + 1; i < m_Attributes.size(); i++) {    Attribute current=(Attribute)m_Attributes.elementAt(i);    current.setIndex(current.index() + 1);  }  for (int i=0; i < numInstances(); i++) {    instance(i).forceInsertAttributeAt(position);  }  if (m_ClassIndex >= position) {    m_ClassIndex++;  }}  }
class C{  public static void murmurhash3_x64_128(byte[] key,int offset,int len,int seed,LongPair out){  long h1=seed & 0x00000000FFFFFFFFL;  long h2=seed & 0x00000000FFFFFFFFL;  final long c1=0x87c37b91114253d5L;  final long c2=0x4cf5ad432745937fL;  int roundedEnd=offset + (len & 0xFFFFFFF0);  for (int i=offset; i < roundedEnd; i+=16) {    long k1=getLongLittleEndian(key,i);    long k2=getLongLittleEndian(key,i + 8);    k1*=c1;    k1=Long.rotateLeft(k1,31);    k1*=c2;    h1^=k1;    h1=Long.rotateLeft(h1,27);    h1+=h2;    h1=h1 * 5 + 0x52dce729;    k2*=c2;    k2=Long.rotateLeft(k2,33);    k2*=c1;    h2^=k2;    h2=Long.rotateLeft(h2,31);    h2+=h1;    h2=h2 * 5 + 0x38495ab5;  }  long k1=0;  long k2=0;switch (len & 15) {case 15:    k2=(key[roundedEnd + 14] & 0xffL) << 48;case 14:  k2|=(key[roundedEnd + 13] & 0xffL) << 40;case 13:k2|=(key[roundedEnd + 12] & 0xffL) << 32;case 12:k2|=(key[roundedEnd + 11] & 0xffL) << 24;case 11:k2|=(key[roundedEnd + 10] & 0xffL) << 16;case 10:k2|=(key[roundedEnd + 9] & 0xffL) << 8;case 9:k2|=(key[roundedEnd + 8] & 0xffL);k2*=c2;k2=Long.rotateLeft(k2,33);k2*=c1;h2^=k2;case 8:k1=((long)key[roundedEnd + 7]) << 56;case 7:k1|=(key[roundedEnd + 6] & 0xffL) << 48;case 6:k1|=(key[roundedEnd + 5] & 0xffL) << 40;case 5:k1|=(key[roundedEnd + 4] & 0xffL) << 32;case 4:k1|=(key[roundedEnd + 3] & 0xffL) << 24;case 3:k1|=(key[roundedEnd + 2] & 0xffL) << 16;case 2:k1|=(key[roundedEnd + 1] & 0xffL) << 8;case 1:k1|=(key[roundedEnd] & 0xffL);k1*=c1;k1=Long.rotateLeft(k1,31);k1*=c2;h1^=k1;}h1^=len;h2^=len;h1+=h2;h2+=h1;h1=fmix64(h1);h2=fmix64(h2);h1+=h2;h2+=h1;out.val1=h1;out.val2=h2;}  }
class C{  @Override public synchronized boolean previous() throws SQLException {  return super.previous();}  }
class C{  public void writeToLog(){  if (isThereNewErrors) {    if (m_msgRepToMsgStatsMap.size() == 0) {      statslogger.info("No Parser Errors on: " + s_dateTimeFormatter.print(DateTime.now()));    } else {      final List<MessageStats> statsArray=new ArrayList<MessageStats>(m_msgRepToMsgStatsMap.values());      Collections.sort(statsArray);      statslogger.info("Parser Errors as of: " + s_dateTimeFormatter.print(DateTime.now()));      StringBuilder bldout=new StringBuilder("");      for (      MessageStats stats : statsArray) {        final String newStr=stats.toString();        if ((newStr.length() + bldout.toString().length()) >= (Integer.MAX_VALUE / 2)) {          statslogger.info(bldout.toString());          bldout.append("");        }        bldout.append("\n" + newStr);      }      statslogger.info(bldout.toString());    }    isThereNewErrors=false;  }}  }
class C{  public static boolean isCacheSafe(Class<?> clazz,ClassLoader classLoader){  Assert.notNull(clazz,"Class must not be null");  ClassLoader target=clazz.getClassLoader();  if (target == null) {    return false;  }  ClassLoader cur=classLoader;  if (cur == target) {    return true;  }  while (cur != null) {    cur=cur.getParent();    if (cur == target) {      return true;    }  }  return false;}  }
class C{  private char[] fFormatDigits(double x){  String sx, sxOut;  int i, j, k;  int n1In, n2In;  int expon=0;  boolean minusSign=false;  if (x > 0.0)   sx=Double.toString(x); else   if (x < 0.0) {    sx=Double.toString(-x);    minusSign=true;  } else {    sx=Double.toString(x);    if (sx.charAt(0) == '-') {      minusSign=true;      sx=sx.substring(1);    }  }  int ePos=sx.indexOf('E');  int rPos=sx.indexOf('.');  if (rPos != -1)   n1In=rPos; else   if (ePos != -1)   n1In=ePos; else   n1In=sx.length();  if (rPos != -1) {    if (ePos != -1)     n2In=ePos - rPos - 1; else     n2In=sx.length() - rPos - 1;  } else   n2In=0;  if (ePos != -1) {    int ie=ePos + 1;    expon=0;    if (sx.charAt(ie) == '-') {      for (++ie; ie < sx.length(); ie++)       if (sx.charAt(ie) != '0')       break;      if (ie < sx.length())       expon=-Integer.parseInt(sx.substring(ie));    } else {      if (sx.charAt(ie) == '+')       ++ie;      for (; ie < sx.length(); ie++)       if (sx.charAt(ie) != '0')       break;      if (ie < sx.length())       expon=Integer.parseInt(sx.substring(ie));    }  }  int p;  if (precisionSet)   p=precision; else   p=defaultDigits - 1;  char[] ca1=sx.toCharArray();  char[] ca2=new char[n1In + n2In];  char[] ca3, ca4, ca5;  for (j=0; j < n1In; j++)   ca2[j]=ca1[j];  i=j + 1;  for (k=0; k < n2In; j++, i++, k++)   ca2[j]=ca1[i];  if (n1In + expon <= 0) {    ca3=new char[-expon + n2In];    for (j=0, k=0; k < (-n1In - expon); k++, j++)     ca3[j]='0';    for (i=0; i < (n1In + n2In); i++, j++)     ca3[j]=ca2[i];  } else   ca3=ca2;  boolean carry=false;  if (p < -expon + n2In) {    if (expon < 0)     i=p; else     i=p + n1In;    carry=checkForCarry(ca3,i);    if (carry)     carry=startSymbolicCarry(ca3,i - 1,0);  }  if (n1In + expon <= 0) {    ca4=new char[2 + p];    if (!carry)     ca4[0]='0'; else     ca4[0]='1';    if (alternateForm || !precisionSet || precision != 0) {      ca4[1]='.';      for (i=0, j=2; i < Math.min(p,ca3.length); i++, j++)       ca4[j]=ca3[i];      for (; j < ca4.length; j++)       ca4[j]='0';    }  } else {    if (!carry) {      if (alternateForm || !precisionSet || precision != 0)       ca4=new char[n1In + expon + p+ 1]; else       ca4=new char[n1In + expon];      j=0;    } else {      if (alternateForm || !precisionSet || precision != 0)       ca4=new char[n1In + expon + p+ 2]; else       ca4=new char[n1In + expon + 1];      ca4[0]='1';      j=1;    }    for (i=0; i < Math.min(n1In + expon,ca3.length); i++, j++)     ca4[j]=ca3[i];    for (; i < n1In + expon; i++, j++)     ca4[j]='0';    if (alternateForm || !precisionSet || precision != 0) {      ca4[j]='.';      j++;      for (k=0; i < ca3.length && k < p; i++, j++, k++)       ca4[j]=ca3[i];      for (; j < ca4.length; j++)       ca4[j]='0';    }  }  int nZeros=0;  if (!leftJustify && leadingZeros) {    int xThousands=0;    if (thousands) {      int xlead=0;      if (ca4[0] == '+' || ca4[0] == '-' || ca4[0] == ' ')       xlead=1;      int xdp=xlead;      for (; xdp < ca4.length; xdp++)       if (ca4[xdp] == '.')       break;      xThousands=(xdp - xlead) / 3;    }    if (fieldWidthSet)     nZeros=fieldWidth - ca4.length;    if ((!minusSign && (leadingSign || leadingSpace)) || minusSign)     nZeros--;    nZeros-=xThousands;    if (nZeros < 0)     nZeros=0;  }  j=0;  if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) {    ca5=new char[ca4.length + nZeros + 1];    j++;  } else   ca5=new char[ca4.length + nZeros];  if (!minusSign) {    if (leadingSign)     ca5[0]='+';    if (leadingSpace)     ca5[0]=' ';  } else   ca5[0]='-';  for (i=0; i < nZeros; i++, j++)   ca5[j]='0';  for (i=0; i < ca4.length; i++, j++)   ca5[j]=ca4[i];  int lead=0;  if (ca5[0] == '+' || ca5[0] == '-' || ca5[0] == ' ')   lead=1;  int dp=lead;  for (; dp < ca5.length; dp++)   if (ca5[dp] == '.')   break;  int nThousands=(dp - lead) / 3;  if (dp < ca5.length)   ca5[dp]=dfs.getDecimalSeparator();  char[] ca6=ca5;  if (thousands && nThousands > 0) {    ca6=new char[ca5.length + nThousands + lead];    ca6[0]=ca5[0];    for (i=lead, k=lead; i < dp; i++) {      if (i > 0 && (dp - i) % 3 == 0) {        ca6[k]=dfs.getGroupingSeparator();        ca6[k + 1]=ca5[i];        k+=2;      } else {        ca6[k]=ca5[i];        k++;      }    }    for (; i < ca5.length; i++, k++) {      ca6[k]=ca5[i];    }  }  return ca6;}  }
class C{  public Constants.ExecutionMode executionMode(){  return executionMode;}  }
class C{  public void deleteTag(){  for (  final ITagListener listener : m_listeners) {    try {      listener.deletedTag(this);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public static void main(String[] args){  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String userName=parser.getValue("username","user","u");  String userPassword=parser.getValue("password","pass","p");  boolean help=parser.containsKey("help","h");  if (help || (userName == null) || (userPassword == null)) {    usage();    System.exit(1);  }  BloggerService myService=new BloggerService("exampleCo-exampleApp-1");  try {    run(myService,userName,userPassword);  } catch (  ServiceException se) {    se.printStackTrace();  }catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  @Override public void authorizeRequest(Operation op){  op.complete();}  }
class C{  public void accumulateAll(List<TaggedLogAPIEntity> entities) throws Exception {  for (  TaggedLogAPIEntity entity : entities) {    accumulate(entity);  }}  }
class C{  public static void skipFields(@Nonnull DexReader reader,int count){  for (int i=0; i < count; i++) {    reader.skipUleb128();    reader.skipUleb128();  }}  }
class C{  public void writeSI16(short value) throws IOException {  flushBits();  out.write(value & 0xff);  out.write(value >> 8);  bytesWritten+=2;}  }
class C{  public static Cursor convertCursor(Element e,BridgeContext ctx){  return ctx.getCursorManager().convertCursor(e);}  }
class C{  public synchronized void processResponse(StunResponseEvent response){  receivedResponses.add(response);  notifyAll();}  }
class C{  private void initRange(){  mMinValue=MathHelper.NULL_VALUE;  mMaxValue=-MathHelper.NULL_VALUE;  int length=getItemCount();  for (int k=0; k < length; k++) {    updateRange(getValue(k));  }}  }
class C{  public VCard(VCard original){  version=original.version;  for (  VCardProperty property : original.getProperties()) {    addProperty(property.copy());  }}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  public List put(String parsedModule,List listOfParsedModules){  if (parsedModule == null || listOfParsedModules == null) {    return new Vector(0);  }  List oldValues=parseFailed(parsedModule);  moduleStore.put(parsedModule,listOfParsedModules);  return oldValues;}  }
class C{  @Override public String toString(){  if (jar != null) {    init();  }  return "package " + name + (specTitle != null ? " " + specTitle : "")+ (specVersion != null ? " " + specVersion : "");}  }
class C{  boolean isHot(){  return queueNext == null;}  }
class C{  public void toEPL(StringWriter writer){  if (numRowsVariable != null) {    writer.write(numRowsVariable);  } else {    if (numRows != null) {      writer.write(Integer.toString(numRows));    } else {      writer.write(Integer.toString(Integer.MAX_VALUE));    }  }  if (optionalOffsetRowsVariable != null) {    writer.write(" offset ");    writer.write(optionalOffsetRowsVariable);  } else   if ((optionalOffsetRows != null) && (optionalOffsetRows != 0)) {    writer.write(" offset ");    writer.write(Integer.toString(optionalOffsetRows));  }}  }
class C{  public GridByteArrayOutputStream(){  this(32);}  }
class C{  private Queue configureMQQueue(MQQueue queue) throws JMSException {  if (Config.parms.getBoolean("jg")) {    queue.setTargetClient(CommonConstants.WMQ_CLIENT_NONJMS_MQ);  }  if (Config.parms.getBoolean("jf")) {    setPutAsyncAllowed(queue);  }  if (Config.parms.getBoolean("jy")) {    setReadAheadAllowed(queue);  }  configureMQDestination(queue);  return queue;}  }
class C{  public static MemberExistsResult methodExists(String methodName,JavacNode node,boolean caseSensitive,int params){  node=upToTypeNode(node);  if (node != null && node.get() instanceof JCClassDecl) {    top:     for (    JCTree def : ((JCClassDecl)node.get()).defs) {      if (def instanceof JCMethodDecl) {        JCMethodDecl md=(JCMethodDecl)def;        String name=md.name.toString();        boolean matches=caseSensitive ? name.equals(methodName) : name.equalsIgnoreCase(methodName);        if (matches) {          if (params > -1) {            List<JCVariableDecl> ps=md.params;            int minArgs=0;            int maxArgs=0;            if (ps != null && ps.length() > 0) {              minArgs=ps.length();              if ((ps.last().mods.flags & Flags.VARARGS) != 0) {                maxArgs=Integer.MAX_VALUE;                minArgs--;              } else {                maxArgs=minArgs;              }            }            if (params < minArgs || params > maxArgs)             continue;          }          List<JCAnnotation> annotations=md.getModifiers().getAnnotations();          if (annotations != null)           for (          JCAnnotation anno : annotations) {            if (typeMatches(Tolerate.class,node,anno.getAnnotationType()))             continue top;          }          return getGeneratedBy(def) == null ? MemberExistsResult.EXISTS_BY_USER : MemberExistsResult.EXISTS_BY_LOMBOK;        }      }    }  }  return MemberExistsResult.NOT_EXISTS;}  }
class C{  public static int compile(String[] args){  com.redhat.ceylon.compiler.java.launcher.Main compiler=new com.redhat.ceylon.compiler.java.launcher.Main("ceylonc");  return compiler.compile(args).exitCode;}  }
class C{  private static DataRefType dataRef(String fileName,byte[] digest){  DataRefType dataRef=new DataRefType();  dataRef.setURI(fileName);  dataRef.setDigestValue(digest);  return dataRef;}  }
class C{  void encryptBlock(byte[] in,int inOfs,byte[] out,int outOfs){  int R0=(in[inOfs] & 0xff) + ((in[inOfs + 1] & 0xff) << 8);  int R1=(in[inOfs + 2] & 0xff) + ((in[inOfs + 3] & 0xff) << 8);  int R2=(in[inOfs + 4] & 0xff) + ((in[inOfs + 5] & 0xff) << 8);  int R3=(in[inOfs + 6] & 0xff) + ((in[inOfs + 7] & 0xff) << 8);  for (int i=0; i < 20; i+=4) {    R0=(R0 + expandedKey[i] + (R3 & R2)+ (~R3 & R1)) & 0xffff;    R0=(R0 << 1) | (R0 >>> 15);    R1=(R1 + expandedKey[i + 1] + (R0 & R3)+ (~R0 & R2)) & 0xffff;    R1=(R1 << 2) | (R1 >>> 14);    R2=(R2 + expandedKey[i + 2] + (R1 & R0)+ (~R1 & R3)) & 0xffff;    R2=(R2 << 3) | (R2 >>> 13);    R3=(R3 + expandedKey[i + 3] + (R2 & R1)+ (~R2 & R0)) & 0xffff;    R3=(R3 << 5) | (R3 >>> 11);  }  R0+=expandedKey[R3 & 0x3f];  R1+=expandedKey[R0 & 0x3f];  R2+=expandedKey[R1 & 0x3f];  R3+=expandedKey[R2 & 0x3f];  for (int i=20; i < 44; i+=4) {    R0=(R0 + expandedKey[i] + (R3 & R2)+ (~R3 & R1)) & 0xffff;    R0=(R0 << 1) | (R0 >>> 15);    R1=(R1 + expandedKey[i + 1] + (R0 & R3)+ (~R0 & R2)) & 0xffff;    R1=(R1 << 2) | (R1 >>> 14);    R2=(R2 + expandedKey[i + 2] + (R1 & R0)+ (~R1 & R3)) & 0xffff;    R2=(R2 << 3) | (R2 >>> 13);    R3=(R3 + expandedKey[i + 3] + (R2 & R1)+ (~R2 & R0)) & 0xffff;    R3=(R3 << 5) | (R3 >>> 11);  }  R0+=expandedKey[R3 & 0x3f];  R1+=expandedKey[R0 & 0x3f];  R2+=expandedKey[R1 & 0x3f];  R3+=expandedKey[R2 & 0x3f];  for (int i=44; i < 64; i+=4) {    R0=(R0 + expandedKey[i] + (R3 & R2)+ (~R3 & R1)) & 0xffff;    R0=(R0 << 1) | (R0 >>> 15);    R1=(R1 + expandedKey[i + 1] + (R0 & R3)+ (~R0 & R2)) & 0xffff;    R1=(R1 << 2) | (R1 >>> 14);    R2=(R2 + expandedKey[i + 2] + (R1 & R0)+ (~R1 & R3)) & 0xffff;    R2=(R2 << 3) | (R2 >>> 13);    R3=(R3 + expandedKey[i + 3] + (R2 & R1)+ (~R2 & R0)) & 0xffff;    R3=(R3 << 5) | (R3 >>> 11);  }  out[outOfs]=(byte)R0;  out[outOfs + 1]=(byte)(R0 >> 8);  out[outOfs + 2]=(byte)R1;  out[outOfs + 3]=(byte)(R1 >> 8);  out[outOfs + 4]=(byte)R2;  out[outOfs + 5]=(byte)(R2 >> 8);  out[outOfs + 6]=(byte)R3;  out[outOfs + 7]=(byte)(R3 >> 8);}  }
class C{  protected void closeFrame(JInternalFrame f){  BasicLookAndFeel.playSound(frame,"InternalFrame.closeSound");  getDesktopManager().closeFrame(f);}  }
class C{  public CTraceEventsTableFilterMenu(final JTextField filterField){  add(new CFilterByMemoryAction(filterField));  add(new CFilterByRegisterAction(filterField));}  }
class C{  public int hashCode(){  int myPosition=position;  int hash=0;  while (myPosition < limit) {    hash=hash + get(myPosition++);  }  return hash;}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  @action(name="request",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with a 'request' performative message.")) public Object primRequest(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,REQUEST,getContentArg(scope));}  }
class C{  public static void updateCommit(CommitUpdateCommand cmd,SolrParams params){  if (params == null)   return;  cmd.openSearcher=params.getBool(UpdateParams.OPEN_SEARCHER,cmd.openSearcher);  cmd.waitSearcher=params.getBool(UpdateParams.WAIT_SEARCHER,cmd.waitSearcher);  cmd.softCommit=params.getBool(UpdateParams.SOFT_COMMIT,cmd.softCommit);  cmd.expungeDeletes=params.getBool(UpdateParams.EXPUNGE_DELETES,cmd.expungeDeletes);  cmd.maxOptimizeSegments=params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS,cmd.maxOptimizeSegments);  cmd.prepareCommit=params.getBool(UpdateParams.PREPARE_COMMIT,cmd.prepareCommit);}  }
class C{  public Cursor newCursor(String storeName) throws UnknownStoreException {  IStore<ByteArray,byte[]> store=getStore(storeName);  int cursorId=rpcService.getTransactionId();  Cursor cursor=new Cursor(cursorId,store.entries());  cursorMap.put(Integer.valueOf(cursorId),cursor);  return cursor;}  }
class C{  public int equivHashCode(){  if (sourcename instanceof Value)   return ((Value)sourcename).equivHashCode();  return sourcename.hashCode();}  }
class C{  public void removed(java.awt.Container cont){  if (dataHandlers != null) {    for (    LocationHandler dataHandler : dataHandlers) {      dataHandler.removed(cont);    }  }}  }
class C{  public ModuleTargetSettings(final INaviModule module){  this.module=module;}  }
class C{  public MAttributeInstance(Properties ctx,int M_Attribute_ID,int M_AttributeSetInstance_ID,int M_AttributeValue_ID,String Value,String trxName){  super(ctx,0,trxName);  setM_Attribute_ID(M_Attribute_ID);  setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);  setM_AttributeValue_ID(M_AttributeValue_ID);  setValue(Value);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr streetAttr;  String attribute;  Attr removedAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  streetAttr=testEmployee.getAttributeNode("street");  removedAttr=testEmployee.removeAttributeNode(streetAttr);  attribute=testEmployee.getAttribute("street");  assertEquals("streetYes","Yes",attribute);}  }
class C{  public static void waitElementToNotBeVisible(SearchContext parent,By by,int waitInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(by);  try {    WebElementWait wait=new WebElementWait(parent,waitInSeconds);    wait.until(null);  } catch (  TimeoutException e) {    throw new TimeoutException(String.format("Element %s is still visible after %s seconds",by,waitInSeconds),e);  }}  }
class C{  public static boolean lock() throws IOException {  if (locked)   return true;  if (lock.exists())   return false;  lock.createNewFile();  lock.deleteOnExit();  locked=true;  return true;}  }
class C{  public AddressSpaceCallResolverTarget(final AddressSpace addressSpace){  this.addressSpace=addressSpace;  addressSpace.addListener(internalAddressSpaceListener);}  }
class C{  public static AST Explode(AST ast,PcalSymTab symtab) throws PcalTranslateException {  st=symtab;  currentProcedure=null;  if (ast.getClass().equals(AST.UniprocessObj.getClass()))   return ExplodeUniprocess((AST.Uniprocess)ast); else   if (ast.getClass().equals(AST.MultiprocessObj.getClass()))   return ExplodeMultiprocess((AST.Multiprocess)ast); else {    PcalDebug.ReportBug("Unexpected AST type.");    return null;  }}  }
class C{  public static JavaPairRDD<MatrixIndexes,MatrixBlock> copyBinaryBlockMatrix(JavaPairRDD<MatrixIndexes,MatrixBlock> in,boolean deep){  if (!deep)   return in.mapValues(new CopyBlockFunction(false)); else   return in.mapPartitionsToPair(new CopyBlockPairFunction(deep),true);}  }
class C{  private static ICloseableIterator<IBindingSet> iterator(final IRunningQuery runningQuery){  final ICloseableIterator<IBindingSet[]> it1=runningQuery.iterator();  final ICloseableIterator<IBindingSet> it2=new Dechunkerator<IBindingSet>(it1);  final ICloseableIterator<IBindingSet> it3=new RunningQueryCloseableIterator<IBindingSet>(runningQuery,it2);  return it3;}  }
class C{  @Override public void init(final FilterConfig config){  LOG.info("Starting Session Filter initialization");  this.filterConfig=config;  if (started.getAndDecrement() > 0) {    String managerClassStr=config.getInitParameter("session-manager-class");    if (managerClassStr == null) {      managerClassStr=GemfireSessionManager.class.getName();    }    try {      manager=(SessionManager)Class.forName(managerClassStr).newInstance();      manager.start(config,this.getClass().getClassLoader());    } catch (    Exception ex) {      LOG.error("Exception creating Session Manager",ex);    }    startingLatch.countDown();  } else {    try {      startingLatch.await();    } catch (    InterruptedException iex) {    }    LOG.debug("SessionManager and listener initialization skipped - " + "already done.");  }  LOG.info("Session Filter initialization complete");  LOG.debug("Filter class loader {}",this.getClass().getClassLoader());}  }
class C{  private void testStringMissingSortedFirst(SortField.Type sortType) throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  Type type=sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",type));  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sf=new SortField("value",sortType);  Sort sort=new Sort(sf);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertNull(searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("bar",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("foo",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public void testEnablePan(){  int iterations=BluetoothTestRunner.sEnablePanIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.disablePan(adapter);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("testEnablePan iteration " + (i + 1) + " of "+ iterations);    mTestUtils.enablePan(adapter);    mTestUtils.disablePan(adapter);  }  mTestUtils.disable(adapter);}  }
class C{  public NoWhitespaceValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId);}  }
class C{  private void updateInternalMask() throws ParseException {  String mask=getMask();  ArrayList<MaskCharacter> fixed=new ArrayList<MaskCharacter>();  ArrayList<MaskCharacter> temp=fixed;  if (mask != null) {    for (int counter=0, maxCounter=mask.length(); counter < maxCounter; counter++) {      char maskChar=mask.charAt(counter);switch (maskChar) {case DIGIT_KEY:        temp.add(new DigitMaskCharacter());      break;case LITERAL_KEY:    if (++counter < maxCounter) {      maskChar=mask.charAt(counter);      temp.add(new LiteralCharacter(maskChar));    }  break;case UPPERCASE_KEY:temp.add(new UpperCaseCharacter());break;case LOWERCASE_KEY:temp.add(new LowerCaseCharacter());break;case ALPHA_NUMERIC_KEY:temp.add(new AlphaNumericCharacter());break;case CHARACTER_KEY:temp.add(new CharCharacter());break;case ANYTHING_KEY:temp.add(new MaskCharacter());break;case HEX_KEY:temp.add(new HexCharacter());break;default :temp.add(new LiteralCharacter(maskChar));break;}}}if (fixed.size() == 0) {maskChars=EmptyMaskChars;} else {maskChars=new MaskCharacter[fixed.size()];fixed.toArray(maskChars);}}  }
class C{  public Constant(boolean value){  this(Boolean.class,value);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="BC_UNCONFIRMED_CAST_OF_RETURN_VALUE",justification="CarManager only provides Car Objects") public void buildSwitchList(Location location){  boolean newTrainsOnly=!Setup.isSwitchListRealTime();  boolean append=false;  boolean checkFormFeed=true;  if (newTrainsOnly) {    if (!location.getStatus().equals(Location.MODIFIED) && !Setup.isSwitchListAllTrainsEnabled()) {      return;    }    append=location.getSwitchListState() == Location.SW_APPEND;    if (location.getSwitchListState() != Location.SW_APPEND) {      location.setSwitchListState(Location.SW_APPEND);    }    location.setStatus(Location.UPDATED);  }  log.debug("Append: {} for location ({})",append,location.getName());  File file=TrainManagerXml.instance().createSwitchListFile(location.getName());  PrintWriter fileOut=null;  try {    fileOut=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file,append),"UTF-8")),true);  } catch (  IOException e) {    log.error("Can not open switchlist file: {}",file.getName());    return;  }  try {    if (!append) {      newLine(fileOut,Setup.getRailroadName());      newLine(fileOut);      newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringSwitchListFor(),new Object[]{splitString(location.getName())}));      if (!location.getSwitchListComment().equals(Location.NONE)) {        newLine(fileOut,location.getSwitchListComment());      }    }    String valid=MessageFormat.format(messageFormatText=TrainManifestText.getStringValid(),new Object[]{getDate(true)});    if (Setup.isPrintTimetableNameEnabled()) {      TrainSchedule sch=TrainScheduleManager.instance().getScheduleById(trainManager.getTrainScheduleActiveId());      if (sch != null) {        valid=valid + " (" + sch.getName()+ ")";      }    }    List<Train> trains=trainManager.getTrainsArrivingThisLocationList(location);    for (    Train train : trains) {      if (!train.isBuilt()) {        continue;      }      if (newTrainsOnly && train.getSwitchListStatus().equals(Train.PRINTED)) {        continue;      }      Route route=train.getRoute();      if (route == null) {        continue;      }      boolean works=isThereWorkAtLocation(train,location);      if (!works && !Setup.isSwitchListAllTrainsEnabled()) {        log.debug("No work for train ({}) at location ({})",train.getName(),location.getName());        continue;      }      if (checkFormFeed) {        if (append && !Setup.getSwitchListPageFormat().equals(Setup.PAGE_NORMAL)) {          fileOut.write(FORM_FEED);        }        if (Setup.isPrintValidEnabled()) {          newLine(fileOut,valid);        }      } else       if (!Setup.getSwitchListPageFormat().equals(Setup.PAGE_NORMAL)) {        fileOut.write(FORM_FEED);      }      checkFormFeed=false;      pickupCars=false;      dropCars=false;      int stops=1;      boolean trainDone=false;      List<Engine> engineList=engineManager.getByTrainBlockingList(train);      List<Car> carList=carManager.getByTrainDestinationList(train);      List<RouteLocation> routeList=route.getLocationsBySequenceList();      RouteLocation rlPrevious=null;      for (      RouteLocation rl : routeList) {        if (!splitString(rl.getName()).equals(splitString(location.getName()))) {          rlPrevious=rl;          continue;        }        String expectedArrivalTime=train.getExpectedArrivalTime(rl);        if (expectedArrivalTime.equals(Train.ALREADY_SERVICED)) {          trainDone=true;        }        if (stops == 1) {          newLine(fileOut);          newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringScheduledWork(),new Object[]{train.getName(),train.getDescription()}));          if (train.isTrainEnRoute()) {            if (!trainDone) {              newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringDepartedExpected(),new Object[]{splitString(train.getTrainDepartsName()),expectedArrivalTime,rl.getTrainDirectionString()}));            }          } else           if (!train.isLocalSwitcher()) {            if (rl == train.getRoute().getDepartsRouteLocation()) {              newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringDepartsAt(),new Object[]{splitString(train.getTrainDepartsName()),rl.getTrainDirectionString(),train.getFormatedDepartureTime()}));            } else {              newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringDepartsAtExpectedArrival(),new Object[]{splitString(train.getTrainDepartsName()),train.getFormatedDepartureTime(),expectedArrivalTime,rl.getTrainDirectionString()}));            }          }        } else {          if (rlPrevious == null || !splitString(rl.getName()).equals(splitString(rlPrevious.getName()))) {            if (Setup.getSwitchListPageFormat().equals(Setup.PAGE_PER_VISIT)) {              fileOut.write(FORM_FEED);            }            newLine(fileOut);            if (train.isTrainEnRoute()) {              if (expectedArrivalTime.equals(Train.ALREADY_SERVICED)) {                newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringVisitNumberDone(),new Object[]{stops,train.getName(),train.getDescription()}));              } else               if (rl != train.getRoute().getTerminatesRouteLocation()) {                newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringVisitNumberDeparted(),new Object[]{stops,train.getName(),expectedArrivalTime,rl.getTrainDirectionString(),train.getDescription()}));              } else {                newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringVisitNumberTerminatesDeparted(),new Object[]{stops,train.getName(),expectedArrivalTime,splitString(rl.getName()),train.getDescription()}));              }            } else {              if (rl != train.getRoute().getTerminatesRouteLocation()) {                newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringVisitNumber(),new Object[]{stops,train.getName(),expectedArrivalTime,rl.getTrainDirectionString(),train.getDescription()}));              } else {                newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringVisitNumberTerminates(),new Object[]{stops,train.getName(),expectedArrivalTime,splitString(rl.getName()),train.getDescription()}));              }            }          } else {            stops--;            if (rl.getTrainDirection() != rlPrevious.getTrainDirection() && !TrainSwitchListText.getStringTrainDirectionChange().equals("")) {              newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringTrainDirectionChange(),new Object[]{train.getName(),rl.getTrainDirectionString(),train.getDescription(),train.getTrainTerminatesName()}));            }          }        }        rlPrevious=rl;        if (Setup.isSwitchListRouteLocationCommentEnabled() && !rl.getComment().trim().equals("")) {          newLine(fileOut,rl.getComment());        }        if (Setup.getManifestFormat().equals(Setup.STANDARD_FORMAT)) {          pickupEngines(fileOut,engineList,rl,!IS_MANIFEST);          if (train.isLocalSwitcher()) {            blockCarsByTrack(fileOut,train,carList,routeList,rl,IS_PRINT_HEADER,!IS_MANIFEST);            dropEngines(fileOut,engineList,rl,!IS_MANIFEST);          } else {            dropEngines(fileOut,engineList,rl,!IS_MANIFEST);            blockCarsByTrack(fileOut,train,carList,routeList,rl,IS_PRINT_HEADER,!IS_MANIFEST);          }        } else         if (Setup.getManifestFormat().equals(Setup.TWO_COLUMN_FORMAT)) {          blockLocosTwoColumn(fileOut,engineList,rl,!IS_MANIFEST);          blockCarsByTrackTwoColumn(fileOut,train,carList,routeList,rl,IS_PRINT_HEADER,!IS_MANIFEST);        } else {          blockLocosTwoColumn(fileOut,engineList,rl,!IS_MANIFEST);          blockCarsByTrackNameTwoColumn(fileOut,train,carList,routeList,rl,IS_PRINT_HEADER,!IS_MANIFEST);        }        if (Setup.isPrintHeadersEnabled() || !Setup.getManifestFormat().equals(Setup.STANDARD_FORMAT)) {          printHorizontalLine(fileOut,!IS_MANIFEST);        }        stops++;        if (rl != train.getRoute().getTerminatesRouteLocation()) {          RouteLocation nextRl=train.getRoute().getNextRouteLocation(rl);          if (splitString(rl.getName()).equals(splitString(nextRl.getName()))) {            continue;          }          if (!train.isLocalSwitcher()) {            String trainDeparts="";            if (Setup.isPrintLoadsAndEmptiesEnabled()) {              int emptyCars=train.getNumberEmptyCarsInTrain(rl);              trainDeparts=MessageFormat.format(TrainSwitchListText.getStringTrainDepartsLoads(),new Object[]{TrainCommon.splitString(rl.getName()),rl.getTrainDirectionString(),train.getNumberCarsInTrain(rl) - emptyCars,emptyCars,train.getTrainLength(rl),Setup.getLengthUnit().toLowerCase(),train.getTrainWeight(rl),train.getTrainTerminatesName(),train.getName()});            } else {              trainDeparts=MessageFormat.format(TrainSwitchListText.getStringTrainDepartsCars(),new Object[]{TrainCommon.splitString(rl.getName()),rl.getTrainDirectionString(),train.getNumberCarsInTrain(rl),train.getTrainLength(rl),Setup.getLengthUnit().toLowerCase(),train.getTrainWeight(rl),train.getTrainTerminatesName(),train.getName()});            }            newLine(fileOut,trainDeparts);          }        }      }      if (trainDone && !pickupCars && !dropCars) {        newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringTrainDone(),new Object[]{train.getName(),train.getDescription(),splitString(location.getName())}));      } else {        if (stops > 1 && !pickupCars) {          newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringNoCarPickUps(),new Object[]{train.getName(),train.getDescription(),splitString(location.getName())}));        }        if (stops > 1 && !dropCars) {          newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringNoCarDrops(),new Object[]{train.getName(),train.getDescription(),splitString(location.getName())}));        }      }    }    if (Setup.isTrackSummaryEnabled() && Setup.isSwitchListRealTime()) {      clearUtilityCarTypes();      if (Setup.getSwitchListPageFormat().equals(Setup.PAGE_NORMAL)) {        newLine(fileOut);        newLine(fileOut);      } else {        fileOut.write(FORM_FEED);      }      newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringSwitchListByTrack(),new Object[]{splitString(location.getName())}));      List<RollingStock> rsList=carManager.getByTrainList();      List<Car> carList=new ArrayList<Car>();      for (      RollingStock rs : rsList) {        if ((rs.getLocation() != null && splitString(rs.getLocation().getName()).equals(splitString(location.getName()))) || (rs.getDestination() != null && splitString(rs.getDestination().getName()).equals(splitString(location.getName()))))         carList.add((Car)rs);      }      List<String> trackNames=new ArrayList<String>();      for (      Location loc : locationManager.getLocationsByNameList()) {        if (!splitString(loc.getName()).equals(splitString(location.getName())))         continue;        for (        Track track : loc.getTrackByNameList(null)) {          String trackName=splitString(track.getName());          if (trackNames.contains(trackName))           continue;          trackNames.add(trackName);          String trainName="";          newLine(fileOut);          newLine(fileOut,trackName);          for (          Car car : carList) {            if (!splitString(car.getTrackName()).equals(trackName)) {              continue;            }            if (car.getRouteLocation() != null) {              if (splitString(car.getRouteLocation().getLocation().getName()).equals(splitString(location.getName()))) {                if (!trainName.equals(car.getTrainName())) {                  trainName=car.getTrainName();                  newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringScheduledWork(),new Object[]{car.getTrainName(),car.getTrain().getDescription()}));                  printPickupCarHeader(fileOut,!IS_MANIFEST,!IS_TWO_COLUMN_TRACK);                }                if (car.isUtility()) {                  pickupUtilityCars(fileOut,carList,car,!IS_MANIFEST);                } else {                  pickUpCar(fileOut,car,!IS_MANIFEST);                }              }            } else             if (car.isUtility()) {              String s=pickupUtilityCars(carList,car,!IS_MANIFEST,!IS_TWO_COLUMN_TRACK);              if (s != null) {                newLine(fileOut,TrainSwitchListText.getStringHoldCar().split("\\{")[0] + s.trim());              }            } else {              newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringHoldCar(),new Object[]{padAndTruncateString(car.getRoadName(),CarRoads.instance().getMaxNameLength()),padAndTruncateString(TrainCommon.splitString(car.getNumber()),Control.max_len_string_print_road_number),padAndTruncateString(car.getTypeName().split("-")[0],CarTypes.instance().getMaxNameLength()),padAndTruncateString(car.getLength() + LENGTHABV,Control.max_len_string_length_name),padAndTruncateString(car.getLoadName(),CarLoads.instance().getMaxNameLength()),padAndTruncateString(trackName,locationManager.getMaxTrackNameLength()),padAndTruncateString(car.getColor(),CarColors.instance().getMaxNameLength())}));            }          }          for (          Car car : carList) {            if (!splitString(car.getDestinationTrackName()).equals(trackName)) {              continue;            }            if (car.getRouteDestination() != null && splitString(car.getRouteDestination().getLocation().getName()).equals(splitString(location.getName()))) {              if (!trainName.equals(car.getTrainName())) {                trainName=car.getTrainName();                newLine(fileOut,MessageFormat.format(messageFormatText=TrainSwitchListText.getStringScheduledWork(),new Object[]{car.getTrainName(),car.getTrain().getDescription()}));                printDropCarHeader(fileOut,!IS_MANIFEST,!IS_TWO_COLUMN_TRACK);              }              if (car.isUtility()) {                setoutUtilityCars(fileOut,carList,car,!IS_MANIFEST);              } else {                dropCar(fileOut,car,!IS_MANIFEST);              }            }          }        }      }    }  } catch (  IllegalArgumentException e) {    newLine(fileOut,MessageFormat.format(Bundle.getMessage("ErrorIllegalArgument"),new Object[]{Bundle.getMessage("TitleSwitchListText"),e.getLocalizedMessage()}));    newLine(fileOut,messageFormatText);    e.printStackTrace();  }  addCarsLocationUnknown(fileOut,!IS_MANIFEST);  fileOut.flush();  fileOut.close();}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final String[] lines={"For a detailed reference, visit #http://stendhalgame.org/wiki/Stendhal_Manual","Here are the most-used commands:","* Chatting: ","- /me <action> \t\tShow a message about what you are doing","- /tell <player> <message> Sends a private message to <player>","- /answer <message> \tSends a private message to the last player who sent a message to you","- // <message> \tSends a private message to the last player you sent a message to","- /storemessage <player> <message> Stores a private message to deliver for an offline <player>","- /support <message> \tAsk an administrator for help.","- /who \t\tList all players currently online","- /where <player> \tShow the current location of <player>","- /sentence <text> \tWrites the sentence that appears on Website.","* Items: ","- /drop [quantity] <item>\tDrop a certain number of an item","- /markscroll <text> \tMark your empty scroll and add a text label","* Buddies and Enemies: ","- /add <player> \tAdd <player> to your buddy list","- /remove <player> \tRemove <player> from your buddy list","- /ignore <player> [<minutes>|*|- [<reason...>]] \tAdd <player> to your ignore list","- /ignore \t\tFind out who is on your ignore list","- /unignore <player> \tRemove <player> from your ignore list","* Status: ","- /away <message> \tSet an away message","- /away \t\tRemove status away","- /grumpy <message> \tSets a message to ignore all non-buddies.","- /grumpy \t\tRemove status grumpy","- /name <pet> <name> \tGive a name to your pet","- /profile [<name>] \t Opens the profile of a character","* Misc: ","- /clickmode \t\t switches between single click mode and double click mode","- /info \t\tFind out what the current server time is","- /mute\t\tMute or unmute the sounds","- /walk \t\tToggles autowalk","- /volume\t\tLists or sets the volume for sound and music"};  for (  final String line : lines) {    ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(line,NotificationType.CLIENT));  }  return true;}  }
class C{  private PathPoint func_186328_b(int x,int y,int z){  int i=this.func_186327_c(x,y,z);  return i == -1 ? this.openPoint(x,y,z) : null;}  }
class C{  public static String formatPeriod(final long startMillis,final long endMillis,final String format){  return formatPeriod(startMillis,endMillis,format,true,TimeZone.getDefault());}  }
class C{  protected long unwrapValue(Object value){  return ((Long)value).longValue();}  }
class C{  private void fillAddress(String address) throws Exception {  AmqpClient client=new AmqpClient(new URI(tcpAmqpConnectionUri),userName,password);  AmqpConnection amqpConnection=client.connect();  Exception exception=null;  try {    AmqpSession session=amqpConnection.createSession();    AmqpSender sender=session.createSender(address);    sendUntilFull(sender);  } catch (  Exception e) {    exception=e;  } finally {    amqpConnection.close();  }  assertNotNull(exception);  assertTrue(exception.getMessage().contains("amqp:resource-limit-exceeded"));}  }
class C{  @Override public void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {  if (in == null) {    throw new IllegalArgumentException("Input stream cannot be 'null'");  }  if (baseURI == null) {    throw new IllegalArgumentException("Base URI cannot be 'null'");  }  InputSource inputSource=new InputSource(new BOMInputStream(in,false));  inputSource.setSystemId(baseURI);  parse(inputSource);}  }
class C{  public boolean isWhitespaceInElementContent(){  return false;}  }
class C{  protected void exportArcs1(){  PrintStream out=null;  double lt;  double ln;  double ll[];  int llsize;  int n;  File f=chooseFile(1);  if (arcs == null)   return;  if (f == null)   return;  try {    out=new PrintStream(new FileOutputStream(f));  } catch (  IOException e) {    System.out.println(e);    return;  }  n=arcs.size();  for (int i=0; i < n; i++) {    OMPoly oj=(OMPoly)arcs.getOMGraphicAt(i);    if (oj == null)     continue;    if (!oj.isSelected())     continue;    ll=oj.getLatLonArray();    llsize=ll.length;    out.println(oj.getLinePaint());    if ((ll[0] != ll[llsize - 2]) || (ll[1] != ll[llsize - 1]))     out.print("MetaPolyline: "); else {      llsize-=2;      out.print("MetaPolyline: ");    }    out.print(llsize / 2);    Object o=oj.getAttribute(OMGraphic.APP_OBJECT);    if (o instanceof String)     System.out.println(o); else     out.println();    int k=0;    while (k < llsize) {      lt=ll[k++];      ln=ll[k++];      out.println(ln + " " + lt);    }  }  out.close();}  }
class C{  public InternalListener(final ConfigManager configFile){  this.configFile=configFile;}  }
class C{  public List<CustomFormatter> customFormatters(){  return subresources().customFormatters();}  }
class C{  public static strictfp double pow3_strict(final double a){  return a * a * a;}  }
class C{  @SuppressWarnings("unchecked") public String strLabeling(String data){  List lblSeqs=seqLabeling(data);  String ret=dataWriter.writeString(lblSeqs);  return ret;}  }
class C{  public int rhs_length(){  return _rhs_length;}  }
class C{  private static final int checkDirection(Position pos,int sq,int maxSteps,int delta){  while (maxSteps > 0) {    sq+=delta;    int p=pos.getPiece(sq);    if (p != Piece.EMPTY)     return p;    maxSteps--;  }  return Piece.EMPTY;}  }
class C{  void addDepType(int type){  flags|=type;}  }
class C{  public boolean isEnabled(){  return mDrawable != null && mEnabled;}  }
class C{  public Name findName(int firstQuad){  int hash=calcHash(firstQuad);  int ix=(hash & _mainHashMask);  int val=_mainHash[ix];  if ((((val >> 8) ^ hash) << 8) == 0) {    Name name=_mainNames[ix];    if (name == null) {      return null;    }    if (name.equals(firstQuad)) {      return name;    }  } else   if (val == 0) {    return null;  }  val&=0xFF;  if (val > 0) {    val-=1;    Bucket bucket=_collList[val];    if (bucket != null) {      return bucket.find(hash,firstQuad,0);    }  }  return null;}  }
class C{  public JailAction(final int minutes,final String reason){  this.minutes=minutes;  this.reason=checkNotNull(reason);}  }
class C{  public XmlHandler addAnnotatedClass(){  try {    List<Class<?>> annotatedClasses=FilesManager.annotatedClasses();    addClasses(true,annotatedClasses.toArray(new Class[annotatedClasses.size()]));  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void computeAxisValues(float min,float max){  float yMin=min;  float yMax=max;  int labelCount=mYAxis.getLabelCount();  double range=Math.abs(yMax - yMin);  if (labelCount == 0 || range <= 0) {    mYAxis.mEntries=new float[]{};    mYAxis.mEntryCount=0;    return;  }  double rawInterval=range / labelCount;  double interval=Utils.roundToNextSignificant(rawInterval);  double intervalMagnitude=Math.pow(10,(int)Math.log10(interval));  int intervalSigDigit=(int)(interval / intervalMagnitude);  if (intervalSigDigit > 5) {    interval=Math.floor(10 * intervalMagnitude);  }  if (mYAxis.isShowOnlyMinMaxEnabled()) {    mYAxis.mEntryCount=2;    mYAxis.mEntries=new float[2];    mYAxis.mEntries[0]=yMin;    mYAxis.mEntries[1]=yMax;  } else {    double first=Math.ceil(yMin / interval) * interval;    double last=Utils.nextUp(Math.floor(yMax / interval) * interval);    double f;    int i;    int n=0;    for (f=first; f <= last; f+=interval) {      ++n;    }    mYAxis.mEntryCount=n;    if (mYAxis.mEntries.length < n) {      mYAxis.mEntries=new float[n];    }    for (f=first, i=0; i < n; f+=interval, ++i) {      mYAxis.mEntries[i]=(float)f;    }  }  if (interval < 1) {    mYAxis.mDecimals=(int)Math.ceil(-Math.log10(interval));  } else {    mYAxis.mDecimals=0;  }}  }
class C{  public synchronized void addYTextLabel(double y,String text,int scale){  mYTextLabels.get(scale).put(y,text);}  }
class C{  @Override public void JSR(){  throw new UnsupportedOperationException("Implement ME!");}  }
class C{  public static List<Long> grubbsTest(GeoTimeSerie gts,boolean useMedian,double alpha) throws WarpScriptException {  doubleCheck(gts);  List<Long> anomalous_ticks=new ArrayList<Long>();  int N=gts.values;  if (N < 3) {    return anomalous_ticks;  }  double[] musigma=madsigma(gts,useMedian);  double m=musigma[0];  double std=musigma[1];  if (0.0D == std) {    return anomalous_ticks;  }  double z=0.0D;  double max=Double.NEGATIVE_INFINITY;  long suspicious_tick=0L;  for (int i=0; i < N; i++) {    z=Math.abs((gts.doubleValues[i] - m) / std);    if (z > max) {      max=z;      suspicious_tick=gts.ticks[i];    }  }  double t=new TDistribution(N - 2).inverseCumulativeProbability(alpha / (2 * N));  double Ginf=(N - 1) * Math.abs(t) / Math.sqrt(N * (N - 2 + t * t));  if (max > Ginf) {    anomalous_ticks.add(suspicious_tick);  }  return anomalous_ticks;}  }
class C{  public static final void devicePermissionAuth(Context context,String productKey,String accessToken,String identifier,String userPhone,int privilege,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  headerList.add(new BasicHeader(ApiKey.HeadKey.PRODUCT_KEY,productKey));  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));  try {    String jsonParams=new JSONStringer().object().key("user").value(userPhone).key(ApiKey.PRIVILEGE).value(privilege).endObject().toString();    if (DEBUG) {      LogUtils.d(jsonParams);    }    post(context,String.format(getApiServerUrl() + DEVICE_PERMISSION_AUTH,identifier),headerList,jsonParams,responseHandler);  } catch (  JSONException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  protected int lookupState(int state,int category){  return stateTable[state * numCategories + category];}  }
class C{  public AccountNotFoundException(){  super();}  }
class C{  @Override public void checkRights(T entity){}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static long safeMultiply(long val1,long val2){  if (val2 == 1) {    return val1;  }  if (val1 == 1) {    return val2;  }  if (val1 == 0 || val2 == 0) {    return 0;  }  long total=val1 * val2;  if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * "+ val2);  }  return total;}  }
class C{  public static String replace(String text,char repl,char with,int max){  return replace(text,String.valueOf(repl),String.valueOf(with),max);}  }
class C{  protected void testCopy(FileConfig fileConfig,String expectedFilePath,String expectedFileContents) throws Exception {  configuration.setFileProperty(fileConfig);  configuration.doConfigure(null);  File copiedFile=new File(configuration.getHome() + "/" + expectedFilePath);  assertTrue("Cannot find the expected copied file",copiedFile.exists());  assertEquals(expectedFileContents,readFile(copiedFile));}  }
class C{  public int countNumberOfLines() throws IOException {  if (lineCount == -1) {    int count=0;    try (FileChannel fc=new RandomAccessFile(dataFile.toFile(),"r").getChannel()){      MappedByteBuffer buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());      byte prevChar=NEW_LINE;      while (buffer.hasRemaining()) {        byte currentChar=buffer.get();        if (currentChar == CARRIAGE_RETURN) {          currentChar=NEW_LINE;        }        if (currentChar == NEW_LINE && prevChar != NEW_LINE) {          count++;        }        prevChar=currentChar;      }      if (prevChar != NEW_LINE) {        count++;      }    }     lineCount=count;  }  return lineCount;}  }
class C{  public void useProject(String projectName){  removeProject(projectName);  recentProjectsList.addFirst(projectName);  while (recentProjectsList.size() > MAX_RECENT_FILES) {    recentProjectsList.removeLast();  }}  }
class C{  public Long removeClientFromChatNotification(){  try {    IConnection current=Red5.getConnectionLocal();    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    String streamid=currentClient.getStreamid();    currentClient.setIsChatNotification(false);    currentClient.setChatUserRoomId(null);    this.clientListManager.updateClientByStreamId(streamid,currentClient);  } catch (  Exception err) {    log.error("[addClientToCahtNotification]",err);  }  return new Long(-1);}  }
class C{  public boolean zoneExportMasksCreate(URI exportGroupURI,List<URI> exportMaskURIs,Collection<URI> volumeURIs,String token){  ExportGroup exportGroup=null;  try {    exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);    _log.info(String.format("Entering zoneExportMasksCreate for ExportGroup: %s (%s)",exportGroup.getLabel(),exportGroup.getId()));    if (exportMaskURIs == null && exportGroup != null && exportGroup.getExportMasks() != null) {      exportMaskURIs=new ArrayList<URI>(Collections2.transform(exportGroup.getExportMasks(),CommonTransformerFunctions.FCTN_STRING_TO_URI));    }    if (_log.isDebugEnabled()) {      for (      URI maskURI : exportMaskURIs) {        ExportMask mask=_dbClient.queryObject(ExportMask.class,maskURI);        if (mask != null) {          _log.debug(String.format("ExportMask %s (%s) storage %s",mask.getMaskName(),mask.getId(),mask.getStorageDevice()));        }      }    }  } catch (  Exception ex) {    _log.error("Exception zoning Export Masks",ex);    ServiceError svcError=NetworkDeviceControllerException.errors.zoneExportGroupCreateFailed(ex.getMessage(),ex);    WorkflowStepCompleter.stepFailed(token,svcError);  }  return doZoneExportMasksCreate(exportGroup,exportMaskURIs,volumeURIs,token,true);}  }
class C{  public static String replace(String text,char repl,char with){  return replace(text,repl,with,-1);}  }
class C{  private boolean isTarget(TypedBlock cur,TypedBlock prev){  int in=cur.incoming;  if (in > 1)   return true; else   if (in < 1)   return false;  return prev.stop;}  }
class C{  protected void extendElement(Element e){}  }
class C{  public void regenerate(Projection proj){  Debug.message("eomg","EditableOMGraphicList.regenerate()");  for (  EditableOMGraphic eomg : getEditables()) {    eomg.regenerate(proj);  }  if (gpm != null)   gpm.generate(proj);}  }
class C{  public void send(String kafkaTopic,String value){  JsonObject obj=new JsonObject().put(ConfigConstants.VALUE_FIELD,value).put(ConfigConstants.TOPIC_FIELD,kafkaTopic).put(TYPE_FIELD,MessageType.CUSTOM_TOPIC.value);  send(obj);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void deleteBreakpoint(final VirtualFile activeFile,final Breakpoint breakpoint){  doDeleteBreakpoint(breakpoint);  for (  BreakpointManagerObserver observer : observers) {    observer.onBreakpointDeleted(breakpoint);  }  Debugger debugger=debuggerManager.getActiveDebugger();  if (debugger != null) {    debugger.deleteBreakpoint(activeFile,breakpoint.getLineNumber());  }}  }
class C{  private static Set<String> tokenizer(String string){  HashSet<String> tokens=new HashSet<String>();  if (string != null && !string.equals("")) {    String tok[]=string.toLowerCase().split("([^a-z0-9])");    for (    String t : tok) {      if (t.length() < 3) {        continue;      }      if (t.matches(numPattern)) {        tokens.add(numReplacementString);        continue;      }      if (t.matches(stringPattern)) {        tokens.add(t);        continue;      }    }  }  return tokens;}  }
class C{  public CircuitBreakerBuilder circuitOpenWindowMillis(long circuitOpenWindowMillis){  circuitOpenWindow(Duration.ofMillis(circuitOpenWindowMillis));  return this;}  }
class C{  @Override public boolean service(RequestBaratine request){  request.status(HttpStatus.INTERNAL_SERVER_ERROR);  request.header("content-type","text/plain");  if (_exn instanceof ConfigException) {    request.write("ConfigException: " + _exn.getMessage());  } else {    request.write(_exn.toString());    request.write("\n");    for (    StackTraceElement stack : _exn.getStackTrace()) {      request.write("\n");      request.write(String.valueOf(stack));    }  }  return true;}  }
class C{  static String classNameOf(TypeElement type){  String name=type.getQualifiedName().toString();  String pkgName=packageNameOf(type);  return pkgName.isEmpty() ? name : name.substring(pkgName.length() + 1);}  }
class C{  private void showNextView(){  try {    FormController formController=Collect.getInstance().getFormController();    String constraint_behavior=PreferenceManager.getDefaultSharedPreferences(this).getString(PreferencesActivity.KEY_CONSTRAINT_BEHAVIOR,PreferencesActivity.CONSTRAINT_BEHAVIOR_DEFAULT);    if (formController.currentPromptIsQuestion()) {      if (constraint_behavior.equals(PreferencesActivity.CONSTRAINT_BEHAVIOR_ON_SWIPE)) {        if (!saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS)) {          mBeenSwiped=false;          return;        }      } else       saveAnswersForCurrentScreen(DO_NOT_EVALUATE_CONSTRAINTS);    }    View next;    int event=formController.stepToNextScreenEvent();switch (event) {case FormEntryController.EVENT_QUESTION:case FormEntryController.EVENT_GROUP:      if ((++viewCount) % SAVEPOINT_INTERVAL == 0) {        nonblockingCreateSavePointData();      }    next=createView(event,true);  showView(next,AnimationType.RIGHT);break;case FormEntryController.EVENT_END_OF_FORM:case FormEntryController.EVENT_REPEAT:next=createView(event,true);showView(next,AnimationType.RIGHT);break;case FormEntryController.EVENT_PROMPT_NEW_REPEAT:createRepeatDialog();break;case FormEntryController.EVENT_REPEAT_JUNCTURE:Log.i(t,"repeat juncture: " + formController.getFormIndex().getReference());break;default :Log.w(t,"JavaRosa added a new EVENT type and didn't tell us... shame on them.");break;}} catch (JavaRosaException e) {Log.e(t,e.getMessage(),e);createErrorDialog(e.getCause().getMessage(),DO_NOT_EXIT);}}  }
class C{  public void bratRender(AjaxRequestTarget aTarget,JCas aJCas){  aTarget.appendJavaScript(bratRenderCommand(aJCas));}  }
class C{  @Override public void onStartTrackingTouch(SeekBar seekBar){  mDragging=true;  mHandler.removeMessages(SHOW_PROGRESS);}  }
class C{  public void importMemory(String location){}  }
class C{  private List<Token> tokenizeMalformed(String url,URLPart part) throws IOException {  if (part == null) {    return tokenizePartsMalformed(url,ImmutableList.copyOf(URLPart.values()));  }  Optional<String> partOptional=getPart(url,part);  if (!partOptional.isPresent() || partOptional.get().equals("")) {    return new ArrayList<>();  }  final String partStringRaw=partOptional.get();  int start=0;  int end=0;  String partString=urlDecode(partOptional.get());switch (part) {case HOST:    return getHostTokens(url,partStringRaw,partString);case PORT:  return getPortTokens(url,partStringRaw);case PATH:return getPathTokens(url,partStringRaw,partString);case REF:return getRefTokens(url,partStringRaw,partString);case QUERY:return getQueryTokens(url,partStringRaw,partString);case PROTOCOL:return ImmutableList.of(new Token(partString,part,start,partString.length()));case WHOLE:return ImmutableList.of(new Token(url,URLPart.WHOLE,0,url.length() - 1));default :}return ImmutableList.of(new Token(partString,part,start,end));}  }
class C{  private void handleEnumerationRequest(EnumerationCreationContext aws){switch (aws.stage) {case CLIENT:    getAWSAsyncClient(aws,AWSEnumerationCreationStages.ENUMERATE);  break;case ENUMERATE:switch (aws.computeEnumerationRequest.enumerationAction) {case START:  logInfo("Started enumeration for creation for %s",aws.computeEnumerationRequest.resourceReference);aws.computeEnumerationRequest.enumerationAction=EnumerationAction.REFRESH;handleEnumerationRequest(aws);break;case REFRESH:processRefreshSubStages(aws);break;case STOP:logInfo("Stopping enumeration service for creation for %s",aws.computeEnumerationRequest.resourceReference);setOperationDurationStat(aws.awsAdapterOperation);aws.awsAdapterOperation.complete();break;default :break;}break;case ERROR:AdapterUtils.sendFailurePatchToEnumerationTask(this,aws.computeEnumerationRequest.taskReference,aws.error);break;default :logSevere("Unknown AWS enumeration stage %s ",aws.stage.toString());aws.error=new Exception("Unknown AWS enumeration stage %s");AdapterUtils.sendFailurePatchToEnumerationTask(this,aws.computeEnumerationRequest.taskReference,aws.error);break;}}  }
class C{  @Override public int compareTo(Object o1){  int result;  if (o1 instanceof Quarter) {    Quarter q=(Quarter)o1;    result=this.year - q.getYearValue();    if (result == 0) {      result=this.quarter - q.getQuarter();    }  } else   if (o1 instanceof RegularTimePeriod) {    result=0;  } else {    result=1;  }  return result;}  }
class C{  private <T>String elementToString(JAXBElement<T> element) throws Exception {  StringWriter writer=new StringWriter();  marshaller.marshal(element,writer);  return writer.toString();}  }
class C{  public static String showDialog(final Component component,final String title,final Object message,final String... buttons){  return showDialog(JOptionPane.getFrameForComponent(component),title,message,JOptionPane.PLAIN_MESSAGE,buttons);}  }
class C{  public static int rangeBracket(int distance,int[] ranges,boolean useExtremeRange,boolean useLOSRange){  int range;  if (null == ranges) {    range=RANGE_OUT;  } else   if (distance > ranges[RANGE_EXTREME]) {    if (useLOSRange) {      range=RANGE_LOS;    } else {      range=RANGE_OUT;    }  } else   if (distance > ranges[RANGE_LONG]) {    if (useExtremeRange) {      range=RANGE_EXTREME;    } else {      range=RANGE_OUT;    }  } else   if (distance > ranges[RANGE_MEDIUM]) {    range=RANGE_LONG;  } else   if (distance > ranges[RANGE_SHORT]) {    range=RANGE_MEDIUM;  } else   if (distance > ranges[RANGE_MINIMUM]) {    range=RANGE_SHORT;  } else {    range=RANGE_MINIMUM;  }  return range;}  }
class C{  public void addPlugInPatternGuard(String namespace,String name,String guardFactoryClass){  ConfigurationPlugInPatternObject entry=new ConfigurationPlugInPatternObject();  entry.setNamespace(namespace);  entry.setName(name);  entry.setFactoryClassName(guardFactoryClass);  entry.setPatternObjectType(ConfigurationPlugInPatternObject.PatternObjectType.GUARD);  plugInPatternObjects.add(entry);}  }
class C{  private void cleanup(){  getPreferenceManager().unregisterOnActivityStopListener(this);  if (mSeekBarVolumizer != null) {    Dialog dialog=getDialog();    if (dialog != null && dialog.isShowing()) {      View view=dialog.getWindow().getDecorView().findViewById(com.android.internal.R.id.seekbar);      if (view != null)       view.setOnKeyListener(null);      mSeekBarVolumizer.revertVolume();    }    mSeekBarVolumizer.stop();    mSeekBarVolumizer=null;  }}  }
class C{  private static double[] chordLengthParameterize(ArrayList<Point2D.Double> d,int first,int last){  int i;  double[] u;  u=new double[last - first + 1];  u[0]=0.0;  for (i=first + 1; i <= last; i++) {    u[i - first]=u[i - first - 1] + v2DistanceBetween2Points(d.get(i),d.get(i - 1));  }  for (i=first + 1; i <= last; i++) {    u[i - first]=u[i - first] / u[last - first];  }  return (u);}  }
class C{  protected void parseNames(){  while (reader.hasNextCharacter()) {    final char character=next();    if (Strings.isWhitespace(character)) {      addName();      continue;    } else     if (character == blockOpening) {      addName();      break;    } else {      builder.append(character);    }  }  if (GdxArrays.isEmpty(tags)) {    throwException("No tag names chosen.");  }}  }
class C{  public synchronized void removeAllElements(){  for (int i=0; i < elementCount; i++) {    elementData[i]=null;  }  modCount++;  elementCount=0;}  }
class C{  public static void validateCertificate(X509Certificate cert){  try {    cert.checkValidity();  } catch (  Exception e) {    logAndThrow(String.format("Certificate is not valid: %s",e.getMessage()));  }}  }
class C{  public void testWithoutClass(){  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals(icopy.numAttributes() + 2,result.numAttributes());  assertEquals(icopy.numInstances(),result.numInstances());}  }
class C{  public void generate(){  if (!this.upToDate) {    Symbol head=this.symbols[0];    Symbol next;    Symbol previous=head;    Symbol symbol;    this.table=null;    head.next=null;    for (int i=1; i < this.domain; i+=1) {      symbol=symbols[i];      if (symbol.weight < head.weight) {        symbol.next=head;        head=symbol;      } else {        if (symbol.weight < previous.weight) {          previous=head;        }        while (true) {          next=previous.next;          if (next == null || symbol.weight < next.weight) {            break;          }          previous=next;        }        symbol.next=next;        previous.next=symbol;        previous=symbol;      }    }    int avail=this.domain;    Symbol first;    Symbol second;    previous=head;    while (true) {      first=head;      second=first.next;      head=second.next;      symbol=this.symbols[avail];      avail+=1;      symbol.weight=first.weight + second.weight;      symbol.zero=first;      symbol.one=second;      symbol.back=null;      first.back=symbol;      second.back=symbol;      if (head == null) {        break;      }      if (symbol.weight < head.weight) {        symbol.next=head;        head=symbol;        previous=head;      } else {        while (true) {          next=previous.next;          if (next == null || symbol.weight < next.weight) {            break;          }          previous=next;        }        symbol.next=next;        previous.next=symbol;        previous=symbol;      }    }    this.table=symbol;    this.upToDate=true;  }}  }
class C{  @DataProvider(name="RangeVersusCalendar") Object[][] provider_rangeVersusCalendar(){  return new Object[][]{{LocalDate.of(1583,1,1),LocalDate.of(2100,1,1)}};}  }
class C{  private void loadHeuristics(){  Document document=Utils.loadXMLDoc(HEURISTICS_CONF);  _heuristicsConfData=new HeuristicConfiguration(document.getDocumentElement()).getHeuristicsConfigurationData();  for (  HeuristicConfigurationData data : _heuristicsConfData) {    try {      Class<?> heuristicClass=Play.current().classloader().loadClass(data.getClassName());      Object instance=heuristicClass.getConstructor(HeuristicConfigurationData.class).newInstance(data);      if (!(instance instanceof Heuristic)) {        throw new IllegalArgumentException("Class " + heuristicClass.getName() + " is not an implementation of "+ Heuristic.class.getName());      }      ApplicationType type=data.getAppType();      List<Heuristic> heuristics=_typeToHeuristics.get(type);      if (heuristics == null) {        heuristics=new ArrayList<Heuristic>();        _typeToHeuristics.put(type,heuristics);      }      heuristics.add((Heuristic)instance);      logger.info("Load Heuristic : " + data.getClassName());    } catch (    ClassNotFoundException e) {      throw new RuntimeException("Could not find class " + data.getClassName(),e);    }catch (    InstantiationException e) {      throw new RuntimeException("Could not instantiate class " + data.getClassName(),e);    }catch (    IllegalAccessException e) {      throw new RuntimeException("Could not access constructor for class" + data.getClassName(),e);    }catch (    RuntimeException e) {      throw new RuntimeException(data.getClassName() + " is not a valid Heuristic class.",e);    }catch (    InvocationTargetException e) {      throw new RuntimeException("Could not invoke class " + data.getClassName(),e);    }catch (    NoSuchMethodException e) {      throw new RuntimeException("Could not find constructor for class " + data.getClassName(),e);    }    try {      Class<?> viewClass=Play.current().classloader().loadClass(data.getViewName());      Method render=viewClass.getDeclaredMethod("render");      Html page=(Html)render.invoke(null);      _heuristicToView.put(data.getHeuristicName(),page);      logger.info("Load View : " + data.getViewName());    } catch (    ClassNotFoundException e) {      throw new RuntimeException("Could not find view " + data.getViewName(),e);    }catch (    IllegalAccessException e) {      throw new RuntimeException("Could not access render on view" + data.getViewName(),e);    }catch (    RuntimeException e) {      throw new RuntimeException(data.getViewName() + " is not a valid view class.",e);    }catch (    InvocationTargetException e) {      throw new RuntimeException("Could not invoke view " + data.getViewName(),e);    }catch (    NoSuchMethodException e) {      throw new RuntimeException("Could not find method render for view " + data.getViewName(),e);    }  }  _heuristicsConfData.add(new HeuristicConfigurationData(HeuristicResult.NO_DATA.getHeuristicName(),HeuristicResult.NO_DATA.getHeuristicClassName(),"views.html.help.helpNoData",null,null));}  }
class C{  @Override protected boolean accepts(final IProjectDescription desc){  return desc.hasNature(WorkbenchHelper.PLUGIN_NATURE);}  }
class C{  public boolean isInteriorAreaEdge(){  boolean isInteriorAreaEdge=true;  for (int i=0; i < 2; i++) {    if (!(label.isArea(i) && label.getLocation(i,Position.LEFT) == Location.INTERIOR && label.getLocation(i,Position.RIGHT) == Location.INTERIOR)) {      isInteriorAreaEdge=false;    }  }  return isInteriorAreaEdge;}  }
class C{  public LineMarkerInfo(@NotNull T element,int startOffset,Icon icon,int updatePass,@Nullable Function<? super T,String> tooltipProvider,@Nullable GutterIconNavigationHandler<T> navHandler){  this(element,startOffset,icon,updatePass,tooltipProvider,navHandler,GutterIconRenderer.Alignment.RIGHT);}  }
class C{  public XMLApiResult doExport(final StorageSystem system,StorageHADomain dataMover,List<VNXFileExport> exports,List<String> newPaths,FileObject fileObject,String fsId,boolean firstExport) throws VNXException {  VNXFileExport vnxExp=exports.get(0);  String port=vnxExp.getStoragePortName();  String storagePortNetworkId=vnxExp.getStoragePort();  _log.info("Export for {}, data mover {}",fileObject.getLabel(),port + ":" + storagePortNetworkId);  XMLApiResult result=new XMLApiResult();  Map<String,Object> reqAttributeMap=new ConcurrentHashMap<String,Object>();  FileShare fs=null;  if (fileObject instanceof FileShare) {    fs=_dbClient.queryObject(FileShare.class,fileObject.getId());  }  String moverOrVdmId="";  String moverOrVdmName="";  String parentDMName="";  String isVdm="false";  try {    if (null == dataMover) {      result.setCommandFailed();      result.setMessage("Export failed:  data mover or vdm not found.");      return result;    }    moverOrVdmId=dataMover.getName();    moverOrVdmName=dataMover.getAdapterName();    if (dataMover.getVirtual() != null && dataMover.getVirtual() == true) {      isVdm="true";      parentDMName=getParentMoverName(dataMover.getParentHADomainURI());    }    sshApi.setConnParams(system.getIpAddress(),system.getUsername(),system.getPassword());    Map<String,String> userInfo=sshApi.getUserInfo(parentDMName);    _log.info("Using Mover {} to export FS mounted at {}",moverOrVdmId + ":" + moverOrVdmName,exports.get(0).getMountPoint());    updateAttributes(reqAttributeMap,system);    reqAttributeMap.put(VNXFileConstants.DATAMOVER_ID,port);    reqAttributeMap.put(VNXFileConstants.MOVER_ID,moverOrVdmId);    reqAttributeMap.put(VNXFileConstants.FILESYSTEM_ID,fsId);    reqAttributeMap.put(VNXFileConstants.DATAMOVER_NAME,moverOrVdmName);    reqAttributeMap.put(VNXFileConstants.ISVDM,isVdm);    if (vnxExp.getComment() != null && !vnxExp.getComment().isEmpty()) {      reqAttributeMap.put(VNXFileConstants.TASK_DESCRIPTION,vnxExp.getComment());    }    Set<String> moverIds=new HashSet<String>();    moverIds.add(port);    reqAttributeMap.put(VNXFileConstants.MOVERLIST,moverIds);    _provExecutor.setKeyMap(reqAttributeMap);    if (firstExport) {      reqAttributeMap.put(VNXFileConstants.MOUNT_PATH,fs.getMountPath());      _provExecutor.execute((Namespace)_provNamespaces.getNsList().get(PROV_FILE_EXPORT_MOUNT));    } else {      reqAttributeMap.put(VNXFileConstants.MOUNT_PATH,vnxExp.getMountPoint());      _provExecutor.execute((Namespace)_provNamespaces.getNsList().get(PROV_FILE_EXPORT));    }    List<VNXCifsServer> cifsServers=(List<VNXCifsServer>)_provExecutor.getKeyMap().get(VNXFileConstants.CIFS_SERVERS);    if (cifsServers == null || cifsServers.isEmpty()) {      _log.info("No CIFS Servers retrieved for mover {} with id {}",moverOrVdmName,moverOrVdmId);    } else {      for (      VNXCifsServer cifsServer : cifsServers) {        _log.debug("CIFServer:" + cifsServer.toString());      }    }    List<VNXFileExport> newExportEntries=new ArrayList<VNXFileExport>();    sshApi.setConnParams(system.getIpAddress(),system.getUsername(),system.getPassword());    for (    String newPath : newPaths) {      String netBios=null;      if (cifsServers != null && !cifsServers.isEmpty() && dataMover.getVirtual()) {        netBios=cifsServers.get(0).getName();      }      for (      VNXFileExport export : exports) {        if (export.getMountPoint().equals(newPath)) {          export.setNetBios(netBios);          newExportEntries.add(export);        }      }      _log.info("Export info {} {}",moverOrVdmName,netBios);      String shareNameCheckData=sshApi.formatCheckShareForExportCmd(moverOrVdmName,newExportEntries,userInfo,netBios);      if (shareNameCheckData != null) {        XMLApiResult shareNameCheckCommandResult=sshApi.executeSshRetry(VNXFileSshApi.SERVER_EXPORT_CMD,shareNameCheckData);        if (shareNameCheckCommandResult.isCommandSuccess()) {          _log.error("Export command failed for share name {}",newExportEntries.get(0).getExportName());          StringBuilder errorMessageBuilder=new StringBuilder();          errorMessageBuilder.append("Share by the name ");          errorMessageBuilder.append(newExportEntries.get(0).getExportName());          errorMessageBuilder.append(" Already exists on server ");          errorMessageBuilder.append(moverOrVdmName);          result.setCommandFailed();          result.setMessage(errorMessageBuilder.toString());          return result;        }      }      String data=sshApi.formatExportCmd(moverOrVdmName,newExportEntries,userInfo,netBios);      _log.info("Export command {}",data);      if (data != null) {        result=sshApi.executeSshRetry(VNXFileSshApi.SERVER_EXPORT_CMD,data);      }      if (!result.isCommandSuccess()) {        if (firstExport) {          data=sshApi.formatUnMountCmd(moverOrVdmName,fs.getMountPath(),"NFS");          XMLApiResult unmountResult=sshApi.executeSshRetry(VNXFileSshApi.SERVER_UNMOUNT_CMD,data);          if (!unmountResult.isCommandSuccess()) {            _log.warn("Unmounting the file system {} failed due to {}",fs.getId(),unmountResult.getMessage());          } else {            _log.info("Unmounted the file system {} successfully",fs.getId());          }        }        return result;      }      newExportEntries.clear();    }    sshApi.clearConnParams();  } catch (  Exception e) {    throw VNXException.exceptions.createExportFailed(result.getMessage(),e);  }  _log.info("doExport result: " + result.getMessage());  return result;}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_String(){  assertNotNull(new MissingResourceException("Detail string","Class name string","Key string"));  assertNotNull(new MissingResourceException(null,"Class name string","Key string"));  assertNotNull(new MissingResourceException("Detail string",null,"Key string"));  assertNotNull(new MissingResourceException("Detail string","Class name string",null));  try {    ResourceBundle.getBundle("Non-ExistentBundle");  } catch (  MissingResourceException e) {    return;  }  fail("Failed to generate expected exception");}  }
class C{  public void selectTabWithId(@IdRes int tabResId){  int tabPosition=findPositionForTabWithId(tabResId);  selectTabAtPosition(tabPosition);}  }
class C{  public boolean nextNndn(){  return nextElement(RDE_NNDN_URI,"NNDN");}  }
class C{  private static List<Agent> prepareContributorsFromEmlAgents(List<Agent> contacts,List<Agent> metadataProviders,List<Agent> associatedParties){  List<Agent> ls=Lists.newArrayList();  for (  Agent contact : contacts) {    contact.setRole(CONTACT_ROLE);  }  ls.addAll(contacts);  for (  Agent metadataProvider : metadataProviders) {    metadataProvider.setRole(METADATA_PROVIDER_ROLE);  }  ls.addAll(metadataProviders);  ls.addAll(associatedParties);  return ls;}  }
class C{  public void writeRoom(String number,String contact,String message,int mode) throws Exception {  writeRoom(number,contact,new XmppMsg(message),mode);}  }
class C{  protected void makeOutputStructure() throws Exception {  if (m_matchRules.size() > 0) {    int labelCount=0;    HashSet<String> uniqueLabels=new HashSet<String>();    Vector<String> labelVec=new Vector<String>();    for (    SubstringLabelerMatchRule m : m_matchRules) {      if (m.getLabel() != null && m.getLabel().length() > 0) {        if (!uniqueLabels.contains(m.getLabel())) {          uniqueLabels.add(m.getLabel());          labelVec.addElement(m.getLabel());        }        labelCount++;      }    }    if (labelCount > 0) {      if (labelCount == m_matchRules.size()) {        m_hasLabels=true;      } else {        throw new Exception("Can't have only some rules with a label!");      }    }    m_outputStructure=(Instances)(new SerializedObject(m_inputStructure).getObject());    Attribute newAtt=null;    if (m_hasLabels) {      newAtt=new Attribute(m_attName,labelVec);    } else     if (m_nominalBinary) {      labelVec.addElement("0");      labelVec.addElement("1");      newAtt=new Attribute(m_attName,labelVec);    } else {      newAtt=new Attribute(m_attName);    }    m_outputStructure.insertAttributeAt(newAtt,m_outputStructure.numAttributes());    return;  }  m_outputStructure=new Instances(m_inputStructure);}  }
class C{  public static _Fields findByName(String name){  return BY_NAME.get(name);}  }
class C{  @Override public boolean checkAndMutate(byte[] row,byte[] family,byte[] qualifier,CompareFilter.CompareOp compareOp,byte[] value,RowMutations mutation) throws IOException {  return false;}  }
class C{  public static SimpleDateFormat makeOutputFormatter(){  SimpleDateFormat fmt=new SimpleDateFormat(DEFAULT_OFORMAT);  fmt.setTimeZone(GMT_ZONE);  return (fmt);}  }
class C{  private static void swap(short[] x,int a,int b){  short t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  Max<Double> oper=new Max<Double>();  CollectorTestSink rangeSink=new CollectorTestSink();  oper.max.setSink(rangeSink);  oper.beginWindow(0);  Double a=2.0;  Double b=20.0;  Double c=1000.0;  oper.data.process(a);  oper.data.process(b);  oper.data.process(c);  a=1.0;  oper.data.process(a);  a=10.0;  oper.data.process(a);  b=5.0;  oper.data.process(b);  b=12.0;  oper.data.process(b);  c=22.0;  oper.data.process(c);  c=14.0;  oper.data.process(c);  a=46.0;  oper.data.process(a);  b=2.0;  oper.data.process(b);  a=23.0;  oper.data.process(a);  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,rangeSink.collectedTuples.size());  for (  Object o : rangeSink.collectedTuples) {    Double val=(Double)o;    Assert.assertEquals("emitted high value was ",new Double(1000.0),val);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final static void initializeClassLoader(ClassLoader loader,boolean bootLoader){  throw new Error("TODO");}  }
class C{  public void initCPTs() throws Exception {  m_BayesNetEstimator.initCPTs(this);}  }
class C{  public String header(String name){  return headers.get(name);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private synchronized void initResourceBundle(String resourceBundleName){  String current=this.resourceBundleName;  if (current != null) {    if (current.equals(resourceBundleName)) {      return;    } else {      throw new IllegalArgumentException("Resource bundle name '" + resourceBundleName + "' is inconsistent with the existing '"+ current+ "'");    }  }  if (resourceBundleName != null) {    this.resourceBundle=loadResourceBundle(resourceBundleName);    this.resourceBundleName=resourceBundleName;  }}  }
class C{  public GetRequest(ActionRequest request,String index){  super(request,index);}  }
class C{  public DoubleProperty amplitudeProperty(){  return amplitude;}  }
class C{  protected void sequence_AnnotatedScriptElement(ISerializationContext context,N4EnumDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public AlphaBetaEvaluation(int ply){  this.ply=ply;}  }
class C{  public MediaType withParameters(Multimap<String,String> parameters){  return create(type,subtype,parameters);}  }
class C{  public Matrix4d m03(double m03){  this.m03=m03;  properties=0;  return this;}  }
class C{  public static String convertToARGB(int color){  String alpha=Integer.toHexString(Color.alpha(color));  String red=Integer.toHexString(Color.red(color));  String green=Integer.toHexString(Color.green(color));  String blue=Integer.toHexString(Color.blue(color));  if (alpha.length() == 1) {    alpha="0" + alpha;  }  if (red.length() == 1) {    red="0" + red;  }  if (green.length() == 1) {    green="0" + green;  }  if (blue.length() == 1) {    blue="0" + blue;  }  return "#" + alpha + red+ green+ blue;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeissupported04.class,args);}  }
class C{  private void computeWordProposals(String word,int offset,List propositionList){  int qualifierLength=word.length();  for (int i=0; i < proposals.length; i++) {    String proposalText=proposals[i];    if (proposalText.startsWith(word)) {      String text=proposalText + " ";      int cursor=proposalText.length();      CompletionProposal proposal=new CompletionProposal(text,offset - qualifierLength,qualifierLength,cursor);      propositionList.add(proposal);    }  }}  }
class C{  protected String handleObject(Object obj){  return obj == null ? "" : String.valueOf(obj);}  }
class C{  private void updateAppOffer(Offer offer){  offerModel.addAppOffer(offer);  view.displayAppOffer(offer);}  }
class C{  public void addSubtitleFileTypes(String type){  if (!type.startsWith(".")) {    type="." + type;  }  if (!subtitleFileTypes.contains(type)) {    subtitleFileTypes.add(type);    firePropertyChange(SUBTITLE_FILE_TYPE,null,subtitleFileTypes);  }}  }
class C{  public DOMCharacterDataModifiedEventListener(){}  }
class C{  public boolean addChildPlanet(DimensionProperties child){  if (child == this)   return false;  childPlanets.add(child.getId());  child.setParentPlanet(this);  return true;}  }
class C{  public T caseFunctionDefinition(FunctionDefinition object){  return null;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!newRecord)   updateRunHeader();  return success;}  }
class C{  public final ISchedulingRule buildRule(){  return workspace.getRoot();}  }
class C{  public long cursorAllocate(){  long cursorId=this.nextCursorId.incrementAndGet();  ArrayCursor cursor=new ArrayCursor();  cursor.id=cursorId;  cursor.index=0;  openCursors.put(cursorId,cursor);  return cursorId;}  }
class C{  private RoundUtils(){}  }
class C{  public boolean hasHiddenFormTypeField(){  boolean found=false;  for (  FormField f : fields) {    if (f.getVariable().equals("FORM_TYPE") && f.getType() != null && f.getType().equals("hidden"))     found=true;  }  return found;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);  this.stroke=SerialUtilities.readStroke(stream);  this.labelPaint=SerialUtilities.readPaint(stream);  this.labelBackgroundPaint=SerialUtilities.readPaint(stream);  this.labelOutlineStroke=SerialUtilities.readStroke(stream);  this.labelOutlinePaint=SerialUtilities.readPaint(stream);  this.pcs=new PropertyChangeSupport(this);}  }
class C{  public final void addStrategy(final PlanStrategy strategy,final String subpopulation,final double weight){  delegate.addStrategy(strategy,subpopulation,weight);}  }
class C{  protected CRLDistributionPointsExtension(ObjectIdentifier extensionId,boolean isCritical,List<DistributionPoint> distributionPoints,String extensionName) throws IOException {  this.extensionId=extensionId;  this.critical=isCritical;  this.distributionPoints=distributionPoints;  encodeThis();  this.extensionName=extensionName;}  }
class C{  private long toLong(InetAddress inetAddress){  byte[] address=inetAddress.getAddress();  long result=0;  for (int i=0; i < address.length; i++) {    result<<=8;    result|=address[i] & BYTE_MASK;  }  return result;}  }
class C{  public boolean isAdvanceLineVisible(){  return this.advanceLineVisible;}  }
class C{  private void rehash(){  int oldCapacity=table.length;  Entry oldMap[]=table;  int newCapacity=oldCapacity * 2 + 1;  Entry newMap[]=new Entry[newCapacity];  threshold=(int)(newCapacity * loadFactor);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldMap[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=Math.abs(e.key) % newCapacity;      e.next=newMap[index];      newMap[index]=e;    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public UnableToControlProcessException(final String message){  super(message);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof BollingerBandsDataset)) {    return false;  }  BollingerBandsDataset that=(BollingerBandsDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public final double tanHalfAngle(){  return Math.tan(0.5 * this.radians);}  }
class C{  public boolean execute(IRequestProcessor requestProcessor,IEventSender eventSender,ICvsListenerRegistry listenerRegistry,IClientEnvironment clientEnvironment,IProgressViewer progressViewer) throws CommandException, AuthenticationException {  final ExpandedModules expandedModules=new ExpandedModules();  if (!expandModules(expandedModules,listenerRegistry,requestProcessor,clientEnvironment)) {    return false;  }  return checkout(expandedModules,requestProcessor,listenerRegistry,clientEnvironment);}  }
class C{  private static void initializeHotkeys(){  final InputMap map=(InputMap)UIManager.get("SplitPane.ancestorInputMap");  map.remove(HotKeys.GUI_INITIALIZER_KEY_1.getKeyStroke());  map.remove(HotKeys.GUI_INITIALIZER_KEY_2.getKeyStroke());}  }
class C{  @Override public String toString(){  String ret=null;  boolean local=checkSetup();  if (local) {    Transaction tx=null;    try {      tx=this.txmgr.getTransaction();    } catch (    SystemException e) {      String msg="Error getting transaction";      LOGGER.logWarning(msg,e);    }    if (tx != null)     ret=tx.toString();  }  if (ret == null)   ret=getThreadMapping();  return ret;}  }
class C{  public FacebookSdkNotInitializedException(String message){  super(message);}  }
class C{  public DateColumn(Class type,int nrows){  this(type,nrows,nrows,0L);}  }
class C{  public static void swipeUpAfter(AppiumDriver driver,AugmentedFunctions<?> augmentedFunctions,By swipeBy,int waitTimeInSeconds,int pressInMilliSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(augmentedFunctions);  Preconditions.checkNotNull(swipeBy);  swipeVerticalAfter(driver,augmentedFunctions,swipeBy,waitTimeInSeconds,-BIG_NUMBER,pressInMilliSeconds);}  }
class C{  public boolean containsKey(Object key){  return getEntry(key) != null;}  }
class C{  public List<Datum> contextualOutlierDetection(List<ContextualDatum> data,Context context) throws Exception {  BitSet bs=context.getContextualBitSet(data,context2BitSet);  context2BitSet.put(context,bs);  List<Datum> contextualData=null;  Context p1=(context.getParents().size() > 0) ? context.getParents().get(0) : null;  Context p2=(context.getParents().size() > 1) ? context.getParents().get(1) : null;  boolean requiresTraining=true;  if (p1 != null && sameDistribution(context,p1)) {    if (distributionPruningForTraining) {      context.setDetector(p1.getDetector());      requiresTraining=false;    } else {      context.setDetector(constructDetector());    }    if (distributionPruningForScoring) {      numOutlierDetectionRunsWithoutTrainingWithoutScoring++;    } else {      contextualData=new ArrayList<>();      numOutlierDetectionRunsWithoutTrainingWithScoring++;    }  } else   if (p2 != null && sameDistribution(context,p2)) {    if (distributionPruningForTraining) {      context.setDetector(p2.getDetector());      requiresTraining=false;    } else {      context.setDetector(constructDetector());    }    if (distributionPruningForScoring) {      numOutlierDetectionRunsWithoutTrainingWithoutScoring++;    } else {      contextualData=new ArrayList<>();      numOutlierDetectionRunsWithoutTrainingWithScoring++;    }  } else {    context.setDetector(constructDetector());    context.setDetector(constructDetector());    contextualData=new ArrayList<>();    numOutlierDetectionRunsWithTrainingWithScoring++;  }  if (contextualData == null) {    return null;  } else {    List<Integer> indexes=bitSet2Indexes(bs);    for (    Integer index : indexes) {      contextualData.add(data.get(index));    }    context.setSize(contextualData.size());    double realDensity=(double)contextualData.size() / data.size();    if (realDensity < denseContextTau) {      densityPruning2++;      return null;    }  }  FeatureTransform featureTransform=new BatchScoreFeatureTransform(context.getDetector(),requiresTraining);  Map<Long,Datum> idToContextualData=new HashMap<>();  for (  Datum d : contextualData) {    idToContextualData.put(d.getID(),d);  }  featureTransform.consume(contextualData);  OutlierClassifier outlierClassifier=new StaticThresholdClassifier(conf);  outlierClassifier.consume(featureTransform.getStream().drain());  List<Datum> outliers=new ArrayList<>();  List<OutlierClassificationResult> outlierClassificationResults=outlierClassifier.getStream().drain();  for (  OutlierClassificationResult outlierClassificationResult : outlierClassificationResults) {    if (outlierClassificationResult.isOutlier()) {      Datum dAfterTransform=outlierClassificationResult.getDatum();      outliers.add(idToContextualData.get(dAfterTransform.getParentID()));    }  }  if (outliers.size() > 0) {    context2Outliers.put(context,outlierClassificationResults);    if (contextualOutputFile != null) {      PrintWriter contextualOut=new PrintWriter(new FileWriter(contextualOutputFile,true));      contextualOut.println("Context: " + context.print(conf.getEncoder()));      contextualOut.println("\t Number of inliners " + (contextualData.size() - outliers.size()));      contextualOut.println("\t Number of outliers " + outliers.size());      contextualOut.close();    }  }  return outliers;}  }
class C{  public String attributeIndexTipText(){  return "Index of the attribute that is to changed.";}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10);}  }
class C{  StoreReadWriteMmapNio(StoreBuilder builder){  _path=builder.getPath();  _rampManager=builder.ampManager();  Objects.requireNonNull(_path);  Objects.requireNonNull(_rampManager);  FsyncImpl fsyncImpl=new FsyncImpl();  StoreFsyncServiceImpl fsyncServiceImpl=new StoreFsyncServiceImpl(fsyncImpl);  _fsyncService=getRampManager().newService(fsyncServiceImpl).as(StoreFsyncService.class);}  }
class C{  public void testSetF11(){  boolean f11=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF11(f11);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup3 needs to be implemented if invoked");}  }
class C{  private void confirmAndForceAction(final Long actionId){  final ConfirmationDialog confirmDialog=new ConfirmationDialog(i18n.get("caption.force.action.confirmbox"),i18n.get("message.force.action.confirm"),i18n.get(BUTTON_OK),i18n.get(BUTTON_CANCEL),null);  UI.getCurrent().addWindow(confirmDialog.getWindow());  confirmDialog.getWindow().bringToFront();}  }
class C{  protected boolean matchPropertyName(java.beans.PropertyChangeEvent e){  return ((e.getPropertyName().indexOf("Comment") >= 0) || (e.getPropertyName().indexOf("Enable") >= 0));}  }
class C{  private DefaultSelectorProvider(){}  }
class C{  public void clearLogFiles(Context context){  File logDir=createFileLogDirIfNeeded(context);  logDir.delete();}  }
class C{  protected boolean traverse(Tree tree,NodeRef node){  boolean update=false;  int nodeNum=node.getNumber();  NodeRef parent=tree.getParent(node);  if (parent != null && updateNode[nodeNum]) {    final double branchRate=branchRateModel.getBranchRate(tree,node);    final double parentNodeHeight=tree.getNodeHeight(parent);    final double nodeHeight=tree.getNodeHeight(node);    final double branchTime=branchRate * (parentNodeHeight - nodeHeight);    if (branchTime < 0.0) {      throw new RuntimeException("Negative branch length: " + branchTime);    }    likelihoodCore.setNodeMatrixForUpdate(nodeNum);    for (int i=0; i < categoryCount; i++) {      double branchLength=siteModel.getRateForCategory(i) * branchTime;      ((SubstitutionEpochModel)siteModel.getSubstitutionModel()).getTransitionProbabilities(nodeHeight,parentNodeHeight,branchLength,probabilities);      likelihoodCore.setNodeMatrix(nodeNum,i,probabilities);    }    update=true;  }  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    final boolean update1=traverse(tree,child1);    NodeRef child2=tree.getChild(node,1);    final boolean update2=traverse(tree,child2);    if (update1 || update2) {      final int childNum1=child1.getNumber();      final int childNum2=child2.getNumber();      likelihoodCore.setNodePartialsForUpdate(nodeNum);      if (integrateAcrossCategories) {        likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum);      } else {        likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum,siteCategories);      }      if (parent == null) {        double[] frequencies=frequencyModel.getFrequencies();        double[] partials=getRootPartials();        likelihoodCore.calculateLogLikelihoods(partials,frequencies,patternLogLikelihoods);      }      update=true;    }  }  return update;}  }
class C{  public void cloneClassClassifications(SootClass original,SootClass clone){  if (isSystemClass(original)) {    addSystemClass(clone);  }  if (isContainerClass(original.getName()))   addContainerClass(clone);  if (Project.v().isSrcClass(original)) {    Project.v().addSrcClass(clone);  }  if (Project.v().isGenClass(original)) {    Project.v().addGenClass(clone);  }  if (Project.v().isLibClass(original)) {    Project.v().addLibClass(clone);  }  if (SafeAndroidClassesAndMethods.v().isSafeClass(original))   SafeAndroidClassesAndMethods.v().addSafeClass(clone);}  }
class C{  @operator(value="generate_barabasi_albert",concept={IConcept.ALGORITHM}) @doc(value="returns a random scale-free network (following Barabasi-Albert (BA) model).",comment="The Barabasi-Albert (BA) model is an algorithm for generating random scale-free networks using a preferential attachment mechanism. " + "A scale-free network is a network whose degree distribution follows a power law, at least asymptotically." + "Such networks are widely observed in natural and human-made systems, including the Internet, the world wide web, citation networks, and some social networks. [From Wikipedia article]"+ "The map operand should includes following elements:",usages={@usage("\"vertices_specy\": the species of vertices"),@usage("\"edges_species\": the species of edges"),@usage("\"size\": the graph will contain (size + 1) nodes"),@usage("\"m\": the number of edges added per novel node"),@usage("\"synchronized\": is the graph and the species of vertices and edges synchronized?")},examples={@example(value="graph<yourNodeSpecy,yourEdgeSpecy> graphEpidemio <- generate_barabasi_albert(",isExecutable=false),@example(value="		yourNodeSpecy,",isExecutable=false),@example(value="		yourEdgeSpecy,",isExecutable=false),@example(value="		3,",isExecutable=false),@example(value="		5,",isExecutable=false),@example(value="		true);",isExecutable=false)},see={"generate_watts_strogatz"}) public static IGraph generateGraphstreamBarabasiAlbert(final IScope scope,final ISpecies vertices_specy,final ISpecies edges_species,final Integer size,final Integer m,final Boolean isSychronized){  return loadGraphWithGraphstreamFromGeneratorSource(scope,vertices_specy,edges_species,new BarabasiAlbertGenerator(m),size - 2,isSychronized);}  }
class C{  private HashMapEntry<K,V>[] makeTable(int newCapacity){  @SuppressWarnings("unchecked") HashMapEntry<K,V>[] newTable=(HashMapEntry<K,V>[])new HashMapEntry[newCapacity];  table=newTable;  threshold=(newCapacity >> 1) + (newCapacity >> 2);  return newTable;}  }
class C{  private static FlinkKafkaConsumer082<String> kafkaSource(BenchmarkConfig config){  return new FlinkKafkaConsumer082<>(config.kafkaTopic,new SimpleStringSchema(),config.getParameters().getProperties());}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  protected int index(int slice,int row,int column){  return this.offset + sliceOffsets[sliceZero + slice * sliceStride] + rowOffsets[rowZero + row * rowStride]+ columnOffsets[columnZero + column * columnStride];}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MWMStrategy[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  private void outputPartners(Properties ctx,PrintWriter out,int partnerID,boolean includeAny){  out.println("<partners>");  if (includeAny) {    out.println("<partner id='-1'");    if (partnerID == 0)     out.println(" selected='selected'");    out.println(">ANY</partner>");  }  for (  MBPartner partner : getAllPartners(ctx)) {    out.print("<partner id='" + partner.get_ID() + "'");    if (partnerID == partner.get_ID())     out.print(" selected='selected'");    out.println(">" + Util.maskHTML(partner.getName()) + "</partner>");  }  out.println("</partners>");}  }
class C{  private void createJournalEntriesForTransfers(final LoanDTO loanDTO,final LoanTransactionDTO loanTransactionDTO,final Office office){  final Long loanProductId=loanDTO.getLoanProductId();  final Long loanId=loanDTO.getLoanId();  final String currencyCode=loanDTO.getCurrencyCode();  final String transactionId=loanTransactionDTO.getTransactionId();  final Date transactionDate=loanTransactionDTO.getTransactionDate();  final BigDecimal principalAmount=loanTransactionDTO.getPrincipal();  final boolean isReversal=loanTransactionDTO.isReversed();  if (loanTransactionDTO.getTransactionType().isInitiateTransfer()) {    this.helper.createCashBasedJournalEntriesAndReversalsForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.TRANSFERS_SUSPENSE.getValue(),CASH_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),loanProductId,null,loanId,transactionId,transactionDate,principalAmount,isReversal);  } else   if (loanTransactionDTO.getTransactionType().isApproveTransfer() || loanTransactionDTO.getTransactionType().isWithdrawTransfer()) {    this.helper.createCashBasedJournalEntriesAndReversalsForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),CASH_ACCOUNTS_FOR_LOAN.TRANSFERS_SUSPENSE.getValue(),loanProductId,null,loanId,transactionId,transactionDate,principalAmount,isReversal);  }}  }
class C{  public static boolean isName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;}  }
class C{  public boolean match(CompilationUnit node,Object other){  if (!(other instanceof CompilationUnit)) {    return false;  }  CompilationUnit o=(CompilationUnit)other;  return (safeSubtreeMatch(node.getPackage(),o.getPackage()) && safeSubtreeListMatch(node.imports(),o.imports()) && safeSubtreeListMatch(node.types(),o.types()));}  }
class C{  @SuppressWarnings("unused") private void checkPositionCacheConsistency(){  List<Integer> entitiesInCache=new ArrayList<Integer>();  List<Integer> entitiesInVector=new ArrayList<Integer>();  int entitiesInCacheCount=countEntitiesInCache(entitiesInCache);  int entityVectorSize=0;  for (  Entity e : entities) {    if (e.getPosition() != null) {      entityVectorSize++;      entitiesInVector.add(e.getId());    }  }  Collections.sort(entitiesInCache);  Collections.sort(entitiesInVector);  if ((entitiesInCacheCount != entityVectorSize) && (getPhase() != Phase.PHASE_DEPLOYMENT) && (getPhase() != Phase.PHASE_EXCHANGE)&& (getPhase() != Phase.PHASE_LOUNGE)&& (getPhase() != Phase.PHASE_INITIATIVE_REPORT)&& (getPhase() != Phase.PHASE_INITIATIVE)) {    System.out.println("Entities vector has " + entities.size() + " but pos lookup cache has "+ entitiesInCache.size()+ " entities!");    List<Integer> missingIds=new ArrayList<Integer>();    for (    Integer id : entitiesInVector) {      if (!entitiesInCache.contains(id)) {        missingIds.add(id);      }    }    System.out.println("Missing ids: " + missingIds);  }  for (  Entity e : entities) {    HashSet<Coords> positions=e.getOccupiedCoords();    for (    Coords c : positions) {      HashSet<Integer> ents=entityPosLookup.get(c);      if ((ents != null) && !ents.contains(e.getId())) {        System.out.println("Entity " + e.getId() + " is in "+ e.getPosition()+ " however the position cache "+ "does not have it in that position!");      }    }  }  for (  Coords c : entityPosLookup.keySet()) {    for (    Integer eId : entityPosLookup.get(c)) {      Entity e=getEntity(eId);      if (e == null) {        continue;      }      HashSet<Coords> positions=e.getOccupiedCoords();      if (!positions.contains(c)) {        System.out.println("Entity Position Cache thinks Entity " + eId + "is in "+ c+ " but the Entity thinks it's in "+ e.getPosition());      }    }  }}  }
class C{  protected final void computeMinMaxFromStrip(DataType dataType,int numStrips,int size,int width,int height) throws IOException {  if (iStream != null) {    iStream.close();  }  iStream=new FileImageInputStream(new File(dataFilePath));  iStream.seek(imageStart);  minimum=new double[samplesPerPixel];  Arrays.fill(minimum,Double.MAX_VALUE);  maximum=new double[samplesPerPixel];  Arrays.fill(maximum,-Double.MAX_VALUE);  byte[] bbArray=new byte[size];  ByteBuffer bbuf=ByteBuffer.wrap(bbArray);  bbuf.order(byteOrder);  bbuf.rewind();  for (int i=0; i < numStrips; ++i) {    int h=Math.min(rasterLength - height * i,height);    int len=h * width * bytesPerSample;    iStream.read(bbArray,0,len);    bbuf.rewind();    computeMinMax(bbuf);  }}  }
class C{  @Override public void onUpdate(){  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  if (this.particleAge++ >= this.particleMaxAge) {    this.setExpired();  }  this.particleScale=(float)MOMathHelper.easeIn(particleAge,10,-10,particleMaxAge);}  }
class C{  protected MinimalPerfectHashFunction(final Iterable<? extends T> keys,final TransformationStrategy<? super T> transform,final int signatureWidth,final File tempDir,ChunkedHashStore<T> chunkedHashStore) throws IOException {  this.transform=transform;  final ProgressLogger pl=new ProgressLogger(LOGGER);  pl.displayLocalSpeed=true;  pl.displayFreeMemory=true;  final RandomGenerator r=new XorShift1024StarRandomGenerator();  pl.itemsName="keys";  final boolean givenChunkedHashStore=chunkedHashStore != null;  if (!givenChunkedHashStore) {    chunkedHashStore=new ChunkedHashStore<T>(transform,tempDir,pl);    chunkedHashStore.reset(r.nextLong());    chunkedHashStore.addAll(keys.iterator());  }  n=chunkedHashStore.size();  defRetValue=-1;  int log2NumChunks=Math.max(0,Fast.mostSignificantBit(n >> LOG2_CHUNK_SIZE));  chunkShift=chunkedHashStore.log2Chunks(log2NumChunks);  final int numChunks=1 << log2NumChunks;  LOGGER.debug("Number of chunks: " + numChunks);  seed=new long[numChunks];  offset=new long[numChunks + 1];  bitVector=LongArrayBitVector.getInstance();  (values=bitVector.asLongBigList(2)).size(((long)Math.ceil(n * HypergraphSorter.GAMMA) + 4 * numChunks));  array=bitVector.bits();  int duplicates=0;  for (; ; ) {    LOGGER.debug("Generating minimal perfect hash function...");    long seed=0;    pl.expectedUpdates=numChunks;    pl.itemsName="chunks";    pl.start("Analysing chunks... ");    try {      int q=0;      for (      ChunkedHashStore.Chunk chunk : chunkedHashStore) {        final HypergraphSorter<BitVector> sorter=new HypergraphSorter<BitVector>(chunk.size(),false);        do {          seed=r.nextLong();        } while (!sorter.generateAndSort(chunk.iterator(),seed));        this.seed[q]=seed;        offset[q + 1]=offset[q] + sorter.numVertices;        int top=chunk.size(), k, v=0;        final int[] stack=sorter.stack;        final int[] vertex1=sorter.vertex1;        final int[] vertex2=sorter.vertex2;        final long off=offset[q];        while (top > 0) {          v=stack[--top];          k=(v > vertex1[v] ? 1 : 0) + (v > vertex2[v] ? 1 : 0);          assert k >= 0 && k < 3 : Integer.toString(k);          final long s=values.getLong(off + vertex1[v]) + values.getLong(off + vertex2[v]);          final long value=(k - s + 9) % 3;          assert values.getLong(off + v) == 0;          values.set(off + v,value == 0 ? 3 : value);        }        q++;        pl.update();        if (ASSERTS) {          final IntOpenHashSet pos=new IntOpenHashSet();          final int[] e=new int[3];          for (          long[] triple : chunk) {            HypergraphSorter.tripleToEdge(triple,seed,sorter.numVertices,sorter.partSize,e);            assert pos.add(e[(int)(values.getLong(off + e[0]) + values.getLong(off + e[1]) + values.getLong(off + e[2])) % 3]);          }        }      }      pl.done();      break;    } catch (    ChunkedHashStore.DuplicateException e) {      if (keys == null)       throw new IllegalStateException("You provided no keys, but the chunked hash store was not checked");      if (duplicates++ > 3)       throw new IllegalArgumentException("The input list contains duplicates");      LOGGER.warn("Found duplicate. Recomputing triples...");      chunkedHashStore.reset(r.nextLong());      chunkedHashStore.addAll(keys.iterator());    }  }  globalSeed=chunkedHashStore.seed();  if (n > 0) {    long m=values.size64();    final long length=bitVector.length();    final int numWords=(int)((length + Long.SIZE - 1) / Long.SIZE);    final int numCounts=(int)((length + 32 * Long.SIZE - 1) / (32 * Long.SIZE)) * 2;    count=new long[numCounts + 1];    long c=0;    int pos=0;    for (int i=0; i < numWords; i+=WORDS_PER_SUPERBLOCK, pos+=2) {      count[pos]=c;      for (int j=0; j < WORDS_PER_SUPERBLOCK; j++) {        if (j != 0 && j % 6 == 0)         count[pos + 1]|=(i + j <= numWords ? c - count[pos] : 0x7FFL) << 12 * (j / 6 - 1);        if (i + j < numWords)         c+=countNonzeroPairs(array[i + j]);      }    }    count[numCounts]=c;    if (ASSERTS) {      int k=0;      for (long i=0; i < m; i++) {        assert rank(i) == k : "(" + i + ") "+ k+ " != "+ rank(i);        if (values.getLong(i) != 0)         k++;        assert k <= n;      }      if (keys != null) {        final Iterator<? extends T> iterator=keys.iterator();        for (long i=0; i < n; i++)         assert getLong(iterator.next()) < n;      }    }  } else   count=LongArrays.EMPTY_ARRAY;  LOGGER.info("Completed.");  LOGGER.debug("Forecast bit cost per key: " + (2 * HypergraphSorter.GAMMA + 2. * Long.SIZE / BITS_PER_BLOCK));  LOGGER.info("Actual bit cost per key: " + (double)numBits() / n);  if (signatureWidth != 0) {    signatureMask=-1L >>> Long.SIZE - signatureWidth;    (signatures=LongArrayBitVector.getInstance().asLongBigList(signatureWidth)).size(n);    pl.expectedUpdates=n;    pl.itemsName="signatures";    pl.start("Signing...");    for (    ChunkedHashStore.Chunk chunk : chunkedHashStore) {      Iterator<long[]> iterator=chunk.iterator();      for (int i=chunk.size(); i-- != 0; ) {        final long[] triple=iterator.next();        final int[] e=new int[3];        signatures.set(getLongByTripleNoCheck(triple,e),signatureMask & triple[0]);        pl.lightUpdate();      }    }    pl.done();  } else {    signatureMask=0;    signatures=null;  }  if (!givenChunkedHashStore)   chunkedHashStore.close();}  }
class C{  public static boolean isSecondaryExternalStorageMounted(File path){  if (path == null) {    return false;  }  boolean result=false;  if (hasKitKatOrNewer()) {    result=Environment.MEDIA_MOUNTED.equals(EnvironmentCompat.getStorageState(path));  } else {    try {      String[] l=path.list();      result=l != null && l.length > 0;    } catch (    Throwable e) {      LOG.error("Error detecting secondary external storage state",e);    }  }  return result;}  }
class C{  public void addConflictAddedListener(final ConflictCacheListener listener){  Check.notNull(listener,"listener");synchronized (listenerLock) {    conflictListeners.addListener(listener,ADDED);  }}  }
class C{  protected String computeTextFileName(){  return RandomUtil.getCodeFileName(TEXT_FILE_NAME_PATTERN,"text");}  }
class C{  private void validateNodeIds(List<String> nodeIds){  if (nodeIds == null || nodeIds.isEmpty()) {    return;  }  List<NodeInfo> nodeInfoList=ClusterNodesUtil.getClusterNodeInfo();  List<String> validNodeIds=new ArrayList<String>(nodeInfoList.size());  for (  NodeInfo node : nodeInfoList) {    validNodeIds.add(node.getId());  }  List<String> nodeIdsClone=new ArrayList<String>(nodeIds);  nodeIdsClone.removeAll(validNodeIds);  if (!nodeIdsClone.isEmpty()) {    throw APIException.badRequests.parameterIsNotValid("node id");  }}  }
class C{  public static void removeConnectionQualityChangeListener(){  ConnectionClassManager.getInstance().removeListener();}  }
class C{  public static Matcher<Object> only(Object value){  return new Only(value);}  }
class C{  public boolean withPartitioning(){  return this == PARTITION || this == PERSISTENT_PARTITION;}  }
class C{  public IonValue reload(IonValue value){  IonDatagram dg=system().newDatagram(value);  byte[] bytes=dg.getBytes();  checkBinaryHeader(bytes);  try {    dg=loader().load(bytes);  } catch (  final IonException e) {    final String hex=BinaryTest.bytesToHex(bytes);    throw new IonException("Bad bytes: " + hex,e);  }  assertEquals(1,dg.size());  return dg.get(0);}  }
class C{  private void update(){  updateInstructionMap();  m_model.setInstructions(updateInstructions());  CTypeResultsHighlighter.updateHighlighting(m_graph,m_model.getInstructions());}  }
class C{  JToggleButton addToggleButton(Action a){  JToggleButton tb=new JToggleButton((String)a.getValue(Action.NAME),null);  tb.setEnabled(a.isEnabled());  tb.setToolTipText((String)a.getValue(Action.SHORT_DESCRIPTION));  tb.setAction(a);  add(tb);  return tb;}  }
class C{  private boolean canSendMessages(){  boolean canSendMessage=false;  if ((null != mRoom) && (null != mRoom.getLiveState())) {    canSendMessage=true;    PowerLevels powerLevels=mRoom.getLiveState().getPowerLevels();    if (null != powerLevels) {      canSendMessage=powerLevels.maySendMessage(mMyUserId);    }  }  return canSendMessage;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:51:00.697 -0400",hash_original_method="2F02B6F65586A11020FE3540EEEA7F40",hash_generated_method="A2AD53157041DF2DC4EFBC9AFCA32A23") public Builder(PrinterId printerId){  if (printerId == null) {    throw new IllegalArgumentException("printerId cannot be null.");  }  mPrototype=new PrinterCapabilitiesInfo();}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public long numBits(){  if (n == 0)   return 0;  return offsets.size64() * log2BucketSize + lcpLengths.numBits() + lcp2Bucket.numBits() + mph.numBits() + transform.numBits();}  }
class C{  public void dispose(){  ((SVGOMElement)e).setSVGContext(null);  elemTPI.remove(e);}  }
class C{  public static void i(String tag,String s,Throwable e){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,s,e);}  }
class C{  @Override public void releaseReader(){  readerLock.unlock();}  }
class C{  public synchronized boolean hasCapabilities(String... capabilites){  boolean hasCaps=true;  for (  String capability : capabilites) {    if (!hasCapability(capability)) {      hasCaps=false;      break;    }  }  return hasCaps;}  }
class C{  public static boolean isXML11NameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tIndex of the attribute to be changed \n" + "\t(default last attribute)","C",1,"-C <col>"));  newVector.addElement(new Option("\tTreat missing values as an extra value \n","M",1,"-M"));  newVector.addElement(new Option("\tSpecify the percentage of noise introduced \n" + "\tto the data (default 10)","P",1,"-P <num>"));  newVector.addElement(new Option("\tSpecify the random number seed (default 1)","S",1,"-S <num>"));  return newVector.elements();}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  public BasicAnimator(Interpolator interpolator){  this.interpolator=interpolator;}  }
class C{  public static String mainClass(MonitoredVm vm,boolean fullPath) throws MonitorException {  String commandLine=commandLine(vm);  String arg0=commandLine;  int firstSpace=commandLine.indexOf(' ');  if (firstSpace > 0) {    arg0=commandLine.substring(0,firstSpace);  }  if (!fullPath) {    int lastFileSeparator=arg0.lastIndexOf('/');    if (lastFileSeparator > 0) {      return arg0.substring(lastFileSeparator + 1);    }    lastFileSeparator=arg0.lastIndexOf('\\');    if (lastFileSeparator > 0) {      return arg0.substring(lastFileSeparator + 1);    }    int lastPackageSeparator=arg0.lastIndexOf('.');    if (lastPackageSeparator > 0) {      return arg0.substring(lastPackageSeparator + 1);    }  }  return arg0;}  }
class C{  public void put(String key,boolean value){  Editor edit=context.getSharedPreferences(prefName,Context.MODE_PRIVATE).edit();  edit.putBoolean(key,value).commit();}  }
class C{  public TzUrlDotOrgGenerator(boolean outlookCompatible){  baseUrl="http://www.tzurl.org/zoneinfo" + (outlookCompatible ? "-outlook" : "") + "/";}  }
class C{  public Boolean isLogRetained(){  return logRetained;}  }
class C{  public double elapsedTime(){  long now=System.currentTimeMillis();  return (now - start) / 1000.0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.392 -0400",hash_original_method="93D95A6C2BC51C643AAC1084F5BA9458",hash_generated_method="5898EF9A47CD6D4D8A6946B5651B1C99") public void removeAttribute(String name){  attributes.remove(name);}  }
class C{  void reinitialize(File f){  if (contains(f)) {  }}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return exp1.apply(name) || exp2.apply(name);}  }
class C{  protected boolean beforeDelete(){  DB.executeUpdate("DELETE FROM AD_Browse_Field_Trl WHERE AD_Browse_Field_ID=? ",getAD_Browse_Field_ID(),get_TrxName());  return true;}  }
class C{  private SwapContainer swapSrcAndHAIfNeeded(VirtualArray srcVarray,VirtualPool srcVpool){  VirtualArray haVarray=null;  VirtualPool haVpool=null;  SwapContainer container=new SwapContainer();  container.setSrcVarray(srcVarray);  container.setSrcVpool(srcVpool);  container.setHaVarray(haVarray);  container.setHaVpool(haVpool);  container=initializeSwapContainer(container,dbClient);  return container;}  }
class C{  public void initDatabases(){}  }
class C{  public <E extends T>E min(Iterable<E> iterable){  Iterator<E> iterator=iterable.iterator();  E minSoFar=iterator.next();  while (iterator.hasNext()) {    minSoFar=min(minSoFar,iterator.next());  }  return minSoFar;}  }
class C{  public String globalInfo(){  return "The normalized polynomial kernel.\n" + "K(x,y) = <x,y>/sqrt(<x,x><y,y>) where <x,y> = PolyKernel(x,y)";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static BufferedReader newReader(URL url) throws MalformedURLException, IOException {  return IOGroovyMethods.newReader(configuredInputStream(null,url));}  }
class C{  public void draw(Graphics2D graphics2D,AttributedCharacterIterator aci){  int numGlyphs=getNumGlyphs();  aci.first();  TextPaintInfo tpi=(TextPaintInfo)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.PAINT_INFO);  if (tpi == null)   return;  if (!tpi.visible)   return;  Paint fillPaint=tpi.fillPaint;  Stroke stroke=tpi.strokeStroke;  Paint strokePaint=tpi.strokePaint;  if ((fillPaint == null) && ((strokePaint == null) || (stroke == null)))   return;  boolean useHinting=drawGlyphVectorWorks;  if (useHinting && (stroke != null) && (strokePaint != null))   useHinting=false;  if (useHinting && (fillPaint != null) && !(fillPaint instanceof Color))   useHinting=false;  if (useHinting) {    Object v1=graphics2D.getRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING);    Object v2=graphics2D.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);    if ((v1 == RenderingHints.VALUE_TEXT_ANTIALIAS_ON) && (v2 == RenderingHints.VALUE_STROKE_PURE))     useHinting=false;  }  final int typeGRot=AffineTransform.TYPE_GENERAL_ROTATION;  final int typeGTrans=AffineTransform.TYPE_GENERAL_TRANSFORM;  if (useHinting) {    AffineTransform at=graphics2D.getTransform();    int type=at.getType();    if (((type & typeGTrans) != 0) || ((type & typeGRot) != 0))     useHinting=false;  }  if (useHinting) {    for (int i=0; i < numGlyphs; i++) {      if (!glyphVisible[i]) {        useHinting=false;        break;      }      AffineTransform at=glyphTransforms[i];      if (at != null) {        int type=at.getType();        if ((type & ~AffineTransform.TYPE_TRANSLATION) == 0) {        } else         if (glyphVectorTransformWorks && ((type & typeGTrans) == 0) && ((type & typeGRot) == 0)) {        } else {          useHinting=false;          break;        }      }    }  }  if (useHinting) {    double sf=scaleFactor;    double[] mat=new double[6];    for (int i=0; i < numGlyphs; i++) {      Point2D pos=glyphPositions[i];      double x=pos.getX();      double y=pos.getY();      AffineTransform at=glyphTransforms[i];      if (at != null) {        at.getMatrix(mat);        x+=mat[4];        y+=mat[5];        if ((mat[0] != 1) || (mat[1] != 0) || (mat[2] != 0)|| (mat[3] != 1)) {          mat[4]=0;          mat[5]=0;          at=new AffineTransform(mat);        } else {          at=null;        }      }      pos=new Point2D.Double(x / sf,y / sf);      awtGlyphVector.setGlyphPosition(i,pos);      awtGlyphVector.setGlyphTransform(i,at);    }    graphics2D.scale(sf,sf);    graphics2D.setPaint(fillPaint);    graphics2D.drawGlyphVector(awtGlyphVector,0,0);    graphics2D.scale(1 / sf,1 / sf);    for (int i=0; i < numGlyphs; i++) {      Point2D pos=defaultGlyphPositions[i];      awtGlyphVector.setGlyphPosition(i,pos);      awtGlyphVector.setGlyphTransform(i,null);    }  } else {    Shape outline=getOutline();    if (fillPaint != null) {      graphics2D.setPaint(fillPaint);      graphics2D.fill(outline);    }    if (stroke != null && strokePaint != null) {      graphics2D.setStroke(stroke);      graphics2D.setPaint(strokePaint);      graphics2D.draw(outline);    }  }}  }
class C{  public boolean isSmoothScrolling(){  return smoothScrolling && !disableSmoothScrolling;}  }
class C{  @RequestMapping(value="/account/change_password",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> changePassword(@RequestBody String password){  if (!checkPasswordLength(password)) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  userService.changePassword(password);  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  private boolean doAcquireNanos(int arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public PackageDeclaration newPackageDeclaration(){  PackageDeclaration result=new PackageDeclaration(this);  return result;}  }
class C{  public void flushDiskCache(){synchronized (mDiskCacheLock) {    mIsDelayFlushing=false;    if (mDiskLruCache != null) {      try {        mDiskLruCache.flush();        if (DEBUG) {          Log.d(TAG,"Disk cache flushed");        }      } catch (      IOException e) {        Log.e(TAG,"flush - " + e);      }    }  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws InterruptedException {  MultiWindowSumKeyVal<String,Integer> oper=new MultiWindowSumKeyVal<String,Integer>();  CollectorTestSink swinSink=new CollectorTestSink();  oper.sum.setSink(swinSink);  oper.beginWindow(0);  KeyValPair<String,Integer> low=new KeyValPair<String,Integer>("a",3);  oper.data.process(low);  KeyValPair<String,Integer> high=new KeyValPair<String,Integer>("a",11);  oper.data.process(high);  oper.endWindow();  oper.beginWindow(1);  low=new KeyValPair<String,Integer>("a",1);  oper.data.process(low);  high=new KeyValPair<String,Integer>("a",9);  oper.data.process(high);  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,swinSink.collectedTuples.size());  for (  Object o : swinSink.collectedTuples) {    log.debug(o.toString());  }}  }
class C{  public void attach(Portrayal3D portrayal,String name,boolean visible){  destroySceneGraph();  Portrayal3DHolder p=new Portrayal3DHolder(portrayal,name,visible);  portrayals.add(p);  popup.add(p.menuItem);  dirty=true;  portrayal.setCurrentDisplay(this);  createSceneGraph();}  }
class C{  public CProjectViewFinder(final AbstractSQLProvider provider){  m_provider=provider;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static String doubleArrayToString(double[] value){  if (value == null) {    return ("null");  }  if (value.length == 0) {    return ("");  }  StringBuilder sb=new StringBuilder();  sb.append(value[0]);  for (int i=1; i < value.length; ++i) {    sb.append("," + value[i]);  }  return (sb.toString());}  }
class C{  public static <T>T randomizeObject(IDiscordClient client,Class<T> clazz) throws IllegalAccessException, InvocationTargetException, InstantiationException {  if (canBeRandomized(clazz)) {    if (String.class.isAssignableFrom(clazz))     return (T)getRandString(); else     if (Character.class.isAssignableFrom(clazz))     return (T)getRandCharacter(); else     if (Boolean.class.isAssignableFrom(clazz))     return (T)getRandBoolean(); else     if (Number.class.isAssignableFrom(clazz))     return (T)getRandNumber((Class<? extends Number>)clazz); else     if (Void.class.isAssignableFrom(clazz))     return null; else     if (IDiscordClient.class.isAssignableFrom(clazz))     return (T)client;  } else {    outer:     for (    Constructor constructor : clazz.getConstructors()) {      Object[] parameters=new Object[constructor.getParameterCount()];      for (      Class<?> param : constructor.getParameterTypes()) {        if (!canBeRandomized(param))         continue outer;      }      if (parameters.length > 0) {        for (int i=0; i < parameters.length; i++) {          parameters[i]=randomizeObject(client,constructor.getParameterTypes()[i]);        }        return (T)constructor.newInstance(parameters);      } else {        return (T)constructor.newInstance();      }    }  }  return null;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static String format(final Map<String,Set<String>> parameters,final String encoding){  final StringBuilder result=new StringBuilder();  for (  Map.Entry<String,Set<String>> parameter : parameters.entrySet()) {    final String encodedName=encode(parameter.getKey(),encoding);    final Set<String> values=parameter.getValue();    if (values == null || values.size() == 0) {      result.append(encodedName);      result.append(NAME_VALUE_SEPARATOR);      result.append("");    } else {      for (      String value : values) {        final String encodedValue=value != null ? encode(value,encoding) : "";        if (result.length() > 0)         result.append(PARAMETER_SEPARATOR);        result.append(encodedName);        result.append(NAME_VALUE_SEPARATOR);        result.append(encodedValue);      }    }  }  return result.toString();}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_expr.fixupVariables(vars,globalsSize);}  }
class C{  private static void reinsertActionAndUtilityNodes(BNetwork reduced,BNetwork original){  for (  ActionNode n : original.getActionNodes()) {    if (!reduced.hasActionNode(n.getId())) {      reduced.addNode(n.copy());    }  }  for (  UtilityNode n : original.getUtilityNodes()) {    if (!reduced.hasUtilityNode(n.getId())) {      reduced.addNode(n.copy());      for (      String input : n.getInputNodeIds()) {        if (reduced.hasNode(input)) {          reduced.getUtilityNode(n.getId()).addInputNode(reduced.getNode(input));        }      }    }  }}  }
class C{  public InputStream createInput(String filename){  InputStream input=createInputRaw(filename);  if ((input != null) && filename.toLowerCase().endsWith(".gz")) {    try {      return new GZIPInputStream(input);    } catch (    IOException e) {      e.printStackTrace();      return null;    }  }  return input;}  }
class C{  public static List<TimeSynchronizationSample> createTolerableSortedSamples(final long startValue,final int count){  final List<TimeSynchronizationSample> samples=createTolerableSamples(startValue,count);  Collections.sort(samples);  return samples;}  }
class C{  public BitmapPool(int bitmapWidth,int bitmapHeight,Bitmap.Config config){  this.width=bitmapWidth;  this.height=bitmapHeight;  this.config=config;}  }
class C{  private static void updateStoragePorts(List<URI> ids,VirtualArrayAssignmentChanges changes){  if (ids.isEmpty()) {    return;  }  List<StoragePortRestRep> storagePorts=StoragePortUtils.getStoragePorts(ids);  for (  StoragePortRestRep storagePort : storagePorts) {    StoragePortUpdate update=new StoragePortUpdate();    update.setVarrayChanges(changes);    StoragePortUtils.update(storagePort.getId(),update);  }}  }
class C{  StatementPatternNode stmtPatternWithVars(final String varName1,final String varName2){  final StatementPatternNode spn=(StatementPatternNode)new Helper(){{      tmp=statementPatternNode(varNode(varName1),constantNode(a),varNode(varName2));    }  }.getTmp();  return spn;}  }
class C{  private static String wordShapeDan2(String s,Collection<String> knownLCWords){  StringBuilder sb=new StringBuilder("WT-");  char lastM='~';  boolean nonLetters=false;  int len=s.length();  for (int i=0; i < len; i++) {    char c=s.charAt(i);    char m=c;    if (Character.isDigit(c)) {      m='d';    } else     if (Character.isLowerCase(c) || c == '_') {      m='x';    } else     if (Character.isUpperCase(c)) {      m='X';    }    if (m != 'x' && m != 'X') {      nonLetters=true;    }    if (m != lastM) {      sb.append(m);    }    lastM=m;  }  if (len <= 3) {    sb.append(':').append(len);  }  if (knownLCWords != null) {    if (!nonLetters && knownLCWords.contains(s.toLowerCase())) {      sb.append('k');    }  }  return sb.toString();}  }
class C{  public static Parser<Character,String> strBetween(Parser<Character,Character> open,Parser<Character,Character> close){  return null;}  }
class C{  @Override public String toString(){  final StringBuilder b=new StringBuilder();  if (typeMatching) {    b.append(PM_SEPARATOR);    b.append(PM_TYPE_MATCH);  }  if (exactMatching) {    b.append(PM_SEPARATOR);    b.append(PM_EXACT_MATCH);  }  if (similarMatching) {    b.append(PM_SEPARATOR);    b.append(PM_SIMILAR_MATCH);  }  if (caseInsensitive) {    b.append(PM_SEPARATOR);    b.append(PM_ICASE_MATCH);  }  if (jokerMatching) {    b.append(PM_SEPARATOR);    b.append(PM_JOKER_MATCH);  }  return b.toString();}  }
class C{  public void addButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode != null) {    statusText1.setText(rb.getString("Error1") + Integer.toString(nodeAddress) + rb.getString("Error2"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeType=nodeTypeBox.getSelectedIndex();  curNode=new SerialNode(nodeAddress,nodeType);  if (curNode == null) {    statusText1.setText(rb.getString("Error3"));    statusText1.setVisible(true);    log.error("Error creating Serial Node, constructor returned null");    errorInStatus1=true;    resetNotes2();    return;  }  setNodeParameters();  SerialSensorManager.instance().registerSensorsForNode(curNode);  resetNotes();  changedNode=true;  statusText1.setText(rb.getString("FeedBackAdd") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;}  }
class C{  private void installHack(Configuration config){  if (this.getName().equals("testSendBytesAsLargeOnBridgeOnly")) {    for (    ClusterConnectionConfiguration conn : config.getClusterConfigurations()) {      conn.setMinLargeMessageSize(1000);    }  }}  }
class C{  public CanvasLayer(Graphics gfx,Canvas canvas){  this.gfx=gfx;  this.canvas=canvas;  super.setTile(canvas.image.createTexture(Texture.Config.DEFAULT));}  }
class C{  VcfInfoStripper(boolean removeAll){  mRemoveAll=removeAll;  mKeepMode=false;  mInfos=null;}  }
class C{  public UpdateRequest version(long version){  this.version=version;  return this;}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  public Swapper(final CommonIndex primary,final CommonIndex secondary){  mPrimary=primary;  mSecondary=secondary;}  }
class C{  @Deprecated public static double random(){  return uniform();}  }
class C{  private void doStepFlying(IMovingAgent target,boolean checkBoundaries,boolean checkHive){  nectarLoad-=nectarForOneStep;  if (target != null) {    headTo(target);  }  if (getState() != State.foraging)   foragingCosts+=nectarForOneStep;  if (nectarLoad < 0) {    setState(State.dead);    return;  }  if (checkHive & hive.isInSphere(this) || (checkBoundaries & getSimulation().isOutside(this))) {    turnBy(180 + (r.nextDouble() * 10) - 5);    forward();    return;  }  if (getSimulation().avoidObstacles) {    Vector3d av=computeAvoidance(target);    av.scale(5);    av.add(getVelocityVector());    av.normalize();    forward(av);  } else {    forward();  }}  }
class C{  private static float patternMatchVariance(int[] counters,int[] pattern,float maxIndividualVariance){  int numCounters=counters.length;  int total=0;  int patternLength=0;  for (int i=0; i < numCounters; i++) {    total+=counters[i];    patternLength+=pattern[i];  }  if (total < patternLength) {    return Float.POSITIVE_INFINITY;  }  float unitBarWidth=(float)total / patternLength;  maxIndividualVariance*=unitBarWidth;  float totalVariance=0.0f;  for (int x=0; x < numCounters; x++) {    int counter=counters[x];    float scaledPattern=pattern[x] * unitBarWidth;    float variance=counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;    if (variance > maxIndividualVariance) {      return Float.POSITIVE_INFINITY;    }    totalVariance+=variance;  }  return totalVariance / total;}  }
class C{  public void clearTimes(){  super.removeElement(When.KEY);}  }
class C{  private void initGraph(){  hasNewPoint=false;  maxXaxis=0.1;  maxY1axis=10;  maxY2axis=0.4;  graph=(GraphView)findViewById(R.id.analytics_graph);  speedGraphSeries=new LineGraphSeries<>();  graph.addSeries(speedGraphSeries);  graph.getGridLabelRenderer().setVerticalLabelsColor(0xFF009688);  graph.getViewport().setYAxisBoundsManual(true);  resetGraphY1MaxValue();  distanceGraphSeries=new LineGraphSeries<>();  graph.getViewport().setScalable(true);  graph.getViewport().setScrollable(true);  graph.getViewport().setMinX(0);  graph.getSecondScale().addSeries(distanceGraphSeries);  graph.getSecondScale().setMinY(0);  resetGraphY2MaxValue();  graph.getGridLabelRenderer().setVerticalLabelsSecondScaleColor(0xFFFF5722);  speedGraphSeries.setTitle("Speed km/h");  speedGraphSeries.setColor(0xFF009688);  distanceGraphSeries.setTitle("Distance km");  distanceGraphSeries.setColor(0xFFFF5722);  graph.getLegendRenderer().setVisible(true);  graph.getLegendRenderer().setAlign(LegendRenderer.LegendAlign.TOP);}  }
class C{  protected boolean isOnlyReceipt(){  super.setIsOnlyReceipt(pickcombo.getValue().equals(3));  return super.isOnlyReceipt();}  }
class C{  public ContainerVm(int id,int userId,double mips,float ram,long bw,long size,String vmm,ContainerScheduler containerScheduler,ContainerRamProvisioner containerRamProvisioner,ContainerBwProvisioner containerBwProvisioner,List<? extends ContainerPe> peList){  setId(id);  setUserId(userId);  setUid(getUid(userId,id));  setMips(mips);  setPeList(peList);  setNumberOfPes(getPeList().size());  setRam(ram);  setBw(bw);  setSize(size);  setVmm(vmm);  setContainerScheduler(containerScheduler);  setInMigration(false);  setInWaiting(false);  setBeingInstantiated(true);  setCurrentAllocatedBw(0);  setCurrentAllocatedMips(null);  setCurrentAllocatedRam(0);  setCurrentAllocatedSize(0);  setContainerRamProvisioner(containerRamProvisioner);  setContainerBwProvisioner(containerBwProvisioner);}  }
class C{  private static String unqualify(String path){  path=path.replace('\\','/');  return path.substring(path.lastIndexOf('/') + 1);}  }
class C{  public PrivateMLet(URL[] urls,ClassLoader parent,boolean delegateToCLR){  super(urls,parent,delegateToCLR);}  }
class C{  protected RealLiteralImpl(){  super();}  }
class C{  private void onConnectClicked(final View view){  showDeviceScanningDialog();}  }
class C{  @SuppressWarnings("UnusedDeclaration") public KeyValuePersistenceSettings(File settingsFile){  InputStream in;  try {    in=new FileInputStream(settingsFile);  } catch (  IOException e) {    throw new IgniteException("Failed to get input stream for Cassandra persistence settings file: " + settingsFile.getAbsolutePath(),e);  }  init(loadSettings(in));}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  initData();  initView();}  }
class C{  public boolean hasMoreNormalElements(){  return this.getTurnNormalEnum().hasMoreElements();}  }
class C{  public EagerMmapSpaces(){  super(Options.set,"Eager Mmap Spaces","If true, all spaces are eagerly demand zero mmapped at boot time",false);}  }
class C{  private void drawTriangle(Canvas canvas,Paint paint,float[] path,float x,float y){  path[0]=x;  path[1]=y - size - size / 2;  path[2]=x - size;  path[3]=y + size;  path[4]=x + size;  path[5]=path[3];  drawPath(canvas,path,paint,true);}  }
class C{  @TCB private static int longestPrefixOfGoodCodeunits(String s){  int n=s.length(), i;  for (i=0; i < n; ++i) {    char ch=s.charAt(i);    if (ch < 0x20) {      if (IS_BANNED_ASCII[ch]) {        return i;      }    } else     if (0xd800 <= ch) {      if (ch <= 0xdfff) {        if (i + 1 < n && Character.isSurrogatePair(ch,s.charAt(i + 1))) {          ++i;        } else {          return i;        }      } else       if ((ch & 0xfffe) == 0xfffe) {        return i;      }    }  }  return -1;}  }
class C{  public void processScrollEvent(ActionEvent event){  int currentRow=1;  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.fine("TRACE: ResultSetBean.processScrollEvent ");  }  FacesContext context=FacesContext.getCurrentInstance();  UIComponent component=event.getComponent();  Integer curRow=(Integer)component.getAttributes().get("currentRow");  if (curRow != null) {    currentRow=curRow.intValue();  }  scroll(currentRow);}  }
class C{  private void addMenuBar(){  menuBar.add(file);  file.add(new OpenAction(this));  file.add(new SaveAction(this));  file.add(new SaveAsAction(this));  file.addSeparator();  file.add(TextWorldActions.getTextAction(world));  file.addSeparator();  file.add(new CloseAction(this.getWorkspaceComponent()));  loadDictionary.setAction(TextWorldActions.showDictionaryEditor(world));  preferences.setAction(TextWorldActions.getShowPreferencesDialogAction(world));  edit.add(loadDictionary);  edit.addSeparator();  edit.add(preferences);  menuBar.add(edit);  menuBar.add(help);  ShowHelpAction helpAction=new ShowHelpAction("Pages/Worlds/TextWorld/TextWorld.html");  helpItem.setAction(helpAction);  help.add(helpItem);  getParentFrame().setJMenuBar(menuBar);}  }
class C{  public String convertSystemNameToAlternate(String systemName){  return (SerialAddress.convertSystemNameToAlternate(systemName));}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.FUNCTION_TYPE_REF___GET_DECLARED_THIS_TYPE:    return getDeclaredThisType();case TypeRefsPackage.FUNCTION_TYPE_REF___GET_TYPE_VARS:  return getTypeVars();case TypeRefsPackage.FUNCTION_TYPE_REF___GET_TYPE_VAR_UPPER_BOUND__TYPEVARIABLE:return getTypeVarUpperBound((TypeVariable)arguments.get(0));case TypeRefsPackage.FUNCTION_TYPE_REF___GET_FPARS:return getFpars();case TypeRefsPackage.FUNCTION_TYPE_REF___GET_RETURN_TYPE_REF:return getReturnTypeRef();case TypeRefsPackage.FUNCTION_TYPE_REF___GET_FUNCTION_TYPE:return getFunctionType();case TypeRefsPackage.FUNCTION_TYPE_REF___IS_GENERIC:return isGeneric();case TypeRefsPackage.FUNCTION_TYPE_REF___IS_RAW:return isRaw();case TypeRefsPackage.FUNCTION_TYPE_REF___GET_FPAR_FOR_ARG_IDX__INT:return getFparForArgIdx((Integer)arguments.get(0));case TypeRefsPackage.FUNCTION_TYPE_REF___GET_TYPE_REF_AS_STRING:return getTypeRefAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  buf[bufOff++]=in;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    bufOff=0;  }  return resultLen;}  }
class C{  long addLocation(String locationSetting,String cityName,double lat,double lon){  long locationId;  Cursor locationCursor=getContext().getContentResolver().query(WeatherContract.LocationEntry.CONTENT_URI,new String[]{WeatherContract.LocationEntry._ID},WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING + " = ?",new String[]{locationSetting},null);  if (locationCursor.moveToFirst()) {    int locationIdIndex=locationCursor.getColumnIndex(WeatherContract.LocationEntry._ID);    locationId=locationCursor.getLong(locationIdIndex);  } else {    ContentValues locationValues=new ContentValues();    locationValues.put(WeatherContract.LocationEntry.COLUMN_CITY_NAME,cityName);    locationValues.put(WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING,locationSetting);    locationValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LAT,lat);    locationValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LONG,lon);    Uri insertedUri=getContext().getContentResolver().insert(WeatherContract.LocationEntry.CONTENT_URI,locationValues);    locationId=ContentUris.parseId(insertedUri);  }  locationCursor.close();  return locationId;}  }
class C{  public static int deepHashCode(byte[][] array){  int result=1;  for (int i=0; i < array.length; i++) {    result=31 * result + deepHashCode(array[i]);  }  return result;}  }
class C{  public static void smallestFactors(int number,StackOfIntegers stack){  int i=2;  while (number / i != 1) {    if (number % i == 0) {      stack.push(i);      number/=i;    } else     i++;  }  stack.push(number);}  }
class C{  private void bindView(View view,ExpandableListItem item,String[] from,int[] to){  for (int i=0; i < to.length; i++) {    TextView textView=(TextView)view.findViewById(to[i]);    if (textView != null) {      textView.setText(item.get(from[i]).toString());    }  }}  }
class C{  protected void registerContextClasses(final Class<?> inputClass) throws NoSuchMethodException, NoSuchFieldException {  final FastSet<Field> fields=getDeclaredFields(inputClass);  for (  final Field field : fields) {    final Class<?> type=field.getType();    final Class<?> scanClass;    if (type.isAssignableFrom(List.class)) {      scanClass=getGenericType(field);    } else {      scanClass=type;    }    if (!_registeredClassesCache.contains(scanClass) && (scanClass.isAnnotationPresent(XmlRootElement.class) || scanClass.isAnnotationPresent(XmlType.class))) {      _registeredClassesCache.add(scanClass);      registerContextClasses(scanClass);    }  }  if (_cacheMode == CacheMode.READER) {    scanClass(inputClass,fields,false);  } else {    scanClass(inputClass,fields,true);  }}  }
class C{  public static org.oscm.internal.vo.VOServiceLocalization convertToUp(org.oscm.vo.VOServiceLocalization oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOServiceLocalization newVO=new org.oscm.internal.vo.VOServiceLocalization();  newVO.setNames(convertToUpVOLocalizedText(oldVO.getNames()));  newVO.setDescriptions(convertToUpVOLocalizedText(oldVO.getDescriptions()));  newVO.setShortDescriptions(convertToUpVOLocalizedText(oldVO.getShortDescriptions()));  newVO.setCustomTabNames(convertToUpVOLocalizedText(oldVO.getCustomTabNames()));  return newVO;}  }
class C{  public AccountInfo(final Address address,final Amount balance,final Amount vestedBalance,final BlockAmount numHarvestedBlocks,final String label,final double importance,final MultisigInfo multisigInfo){  this.address=address;  this.keyPair=null == this.address.getPublicKey() ? null : new KeyPair(this.address.getPublicKey());  this.balance=balance;  this.vestedBalance=vestedBalance;  this.numHarvestedBlocks=numHarvestedBlocks;  this.label=label;  this.importance=importance;  this.multisigInfo=multisigInfo;}  }
class C{  private static boolean into(int i,int[] I){  boolean in=false;  for (int j=0; j < I.length; j++) {    in=in || (i == I[j]);  }  return in;}  }
class C{  private String issueReceipt(){  MInOut inOut=new MInOut(getCtx(),m_M_InOut_ID,null);  if (inOut.isSOTrx() || !inOut.isProcessed() || !(MInOut.DOCSTATUS_Completed.equals(inOut.getDocStatus()) || MInOut.DOCSTATUS_Closed.equals(inOut.getDocStatus())))   throw new IllegalArgumentException("Receipt not valid - " + inOut);  log.info(inOut.toString());  if (inOut.getC_Project_ID() == 0) {    inOut.setC_Project_ID(m_project.getC_Project_ID());    inOut.saveEx();  } else   if (inOut.getC_Project_ID() != m_project.getC_Project_ID())   throw new IllegalArgumentException("Receipt for other Project (" + inOut.getC_Project_ID() + ")");  MInOutLine[] inOutLines=inOut.getLines(false);  int counter=0;  for (int i=0; i < inOutLines.length; i++) {    if (inOutLines[i].getM_Product_ID() == 0)     continue;    if (inOutLines[i].getMovementQty() == null || inOutLines[i].getMovementQty().signum() == 0)     continue;    if (projectIssueHasReceipt(inOutLines[i].getM_InOutLine_ID()))     continue;    MProjectIssue pi=new MProjectIssue(m_project);    pi.setMandatory(inOutLines[i].getM_Locator_ID(),inOutLines[i].getM_Product_ID(),inOutLines[i].getMovementQty());    if (m_MovementDate != null)     pi.setMovementDate(m_MovementDate);    if (m_Description != null && m_Description.length() > 0)     pi.setDescription(m_Description); else     if (inOutLines[i].getDescription() != null)     pi.setDescription(inOutLines[i].getDescription()); else     if (inOut.getDescription() != null)     pi.setDescription(inOut.getDescription());    pi.setM_InOutLine_ID(inOutLines[i].getM_InOutLine_ID());    pi.process();    MProjectLine pl=null;    MProjectLine[] pls=m_project.getLines();    for (int ii=0; ii < pls.length; ii++) {      if (pls[ii].getC_OrderPO_ID() == inOut.getC_Order_ID() && pls[ii].getM_Product_ID() == inOutLines[i].getM_Product_ID() && pls[ii].getC_ProjectIssue_ID() == 0) {        pl=pls[ii];        break;      }    }    if (pl == null)     pl=new MProjectLine(m_project);    pl.setMProjectIssue(pi);    pl.saveEx();    addLog(pi.getLine(),pi.getMovementDate(),pi.getMovementQty(),null);    counter++;  }  return "@Created@ " + counter;}  }
class C{  public void registerEvent(Object object,Method method){  noParamMap.put(object,method);}  }
class C{  public static <U,R>Function<ObservableTValue<U>,ObservableTValue<R>> lift(final Function<? super U,? extends R> fn){  return null;}  }
class C{  <T>Task<T> enqueue(Continuation<Void,Task<T>> taskStart){  lock.lock();  try {    Task<T> task;    Task<Void> oldTail=tail != null ? tail : Task.<Void>forResult(null);    try {      Task<Void> toAwait=getTaskToAwait();      task=taskStart.then(toAwait);    } catch (    RuntimeException e) {      throw e;    }catch (    Exception e) {      throw new RuntimeException(e);    }    tail=Task.whenAll(Arrays.asList(oldTail,task));    return task;  }  finally {    lock.unlock();  }}  }
class C{  @Category(FlakyTest.class) @Test public void testParallelAsyncEventQueueHA_Scenario2(){  Integer lnPort=(Integer)vm0.invoke(null);  vm1.invoke(createCacheRunnable(lnPort));  vm2.invoke(createCacheRunnable(lnPort));  LogWriterUtils.getLogWriter().info("Created the cache");  vm1.invoke(null);  vm2.invoke(null);  LogWriterUtils.getLogWriter().info("Created the AsyncEventQueue");  vm1.invoke(null);  vm2.invoke(null);  LogWriterUtils.getLogWriter().info("Created PR with AsyncEventQueue");  vm1.invoke(pauseAsyncEventQueueRunnable());  vm2.invoke(pauseAsyncEventQueueRunnable());  Wait.pause(1000);  LogWriterUtils.getLogWriter().info("Paused the AsyncEventQueue");  vm1.invoke(null);  LogWriterUtils.getLogWriter().info("Done puts");  Set<Integer> primaryBucketsvm2=(Set<Integer>)vm2.invoke(null);  LogWriterUtils.getLogWriter().info("Primary buckets on vm2: " + primaryBucketsvm2);  vm2.invoke(null);  vm3.invoke(createCacheRunnable(lnPort));  vm3.invoke(null);  vm3.invoke(null);  Wait.pause(1000);  Set<Integer> primaryBucketsvm3=(Set<Integer>)vm3.invoke(null);  vm1.invoke(null);  vm1.invoke(null);  vm3.invoke(null);  vm3.invoke(null);}  }
class C{  public void print(int x){  out.print(x);  out.flush();}  }
class C{  public static RoundingParams fromCornersRadii(float topLeft,float topRight,float bottomRight,float bottomLeft){  return (new RoundingParams()).setCornersRadii(topLeft,topRight,bottomRight,bottomLeft);}  }
class C{  private Base64(){}  }
class C{  public static <T>T registerNewTarget(Class<T> clazz,String baseUrl){  T target;  HoodieMetadataParser.parse(clazz);  target=(T)Proxy.newProxyInstance(clazz.getClassLoader(),new Class[]{clazz},new ReflectiveInvocationHandler(baseUrl));  return target;}  }
class C{  @Override public void addEventLine(EventLine line){  Protocol.debug("addEventLine (" + window + "): "+ line);  if (this.window != null) {    this.window.addChatLine(line.toString());  }}  }
class C{  @Deprecated public CloudSolrClient(String zkHost){  this.zkHost=zkHost;  this.clientIsInternal=true;  this.myClient=HttpClientUtil.createClient(null);  this.lbClient=new LBHttpSolrClient.Builder().withHttpClient(myClient).build();  this.lbClient.setRequestWriter(new BinaryRequestWriter());  this.lbClient.setParser(new BinaryResponseParser());  this.updatesToLeaders=true;  this.directUpdatesToLeadersOnly=false;  shutdownLBHttpSolrServer=true;  lbClient.addQueryParams(STATE_VERSION);}  }
class C{  @Override public void execute(){  if (event.has("members")) {    User.updateGroupStatus(event.getList("members"),event.get("lootmode"));    GroupPanelController.get().update(event.getList("members"),event.get("leader"),event.get("lootmode"));  } else {    User.updateGroupStatus(null,null);    GroupPanelController.get().update(null,null,null);  }}  }
class C{  public Related(String uri){  setUri(uri);}  }
class C{  private boolean isDownloadIdInOMASharedPrefs(long downloadId){  Set<String> omaDownloads=getStoredDownloadInfo(PENDING_OMA_DOWNLOADS);  for (  String omaDownload : omaDownloads) {    OMAEntry entry=OMAEntry.parseOMAEntry(omaDownload);    if (entry.mDownloadId == downloadId) {      return true;    }  }  return false;}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter){  if (selectClause != null) {    selectClause.toEPL(writer,formatter,false,false);    writer.write(" from ");  }  splitExpression.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  if (optionalSplitExpressionTypeName != null) {    writer.write("@type(");    writer.write(optionalSplitExpressionTypeName);    writer.write(")");  }  if (optionalAsName != null) {    writer.write(" as ");    writer.write(optionalAsName);  }  if (whereClause != null) {    writer.write(" where ");    whereClause.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.847 -0500",hash_original_method="7198CC6BA3A84102ED750212181BD596",hash_generated_method="CD4840D16E29173496AB01362327D8D0") public static boolean isEpoch(Time time){  long millis=time.toMillis(true);  return getJulianDay(millis,0) == EPOCH_JULIAN_DAY;}  }
class C{  void processAncestorClass(AsClass ancestorClass,AsClass thisClass){  if (verbose) {    System.out.println("processAncestorClass - thisClass " + thisClass.getFullName() + " ancestorClass "+ ancestorClass.getFullName());  }  if (ancestorClass.getFields() != null) {    NodeList baseFieldList=ancestorClass.getFields().getElementsByTagName("apiValue");    if (baseFieldList != null && baseFieldList.getLength() != 0) {      for (int ix=0; ix < baseFieldList.getLength(); ix++) {        boolean found=false;        Element baseField=(Element)baseFieldList.item(ix);        for (int excludedCount=0; excludedCount < thisClass.getExcludedProperties().size(); excludedCount++) {          Element apiValue=getElementByTagName(baseField,"apiValue");          if (apiValue != null) {            if (thisClass.getExcludedProperties().get(excludedCount).equals(apiValue.getTextContent())) {              found=true;              break;            }          }        }        Element apiName=getElementByTagName(baseField,"apiName");        if (found) {          continue;        }        if (thisClass.getFieldGetSet().get(apiName.getTextContent()) != null && thisClass.getFieldGetSet().get(apiName.getTextContent()) != 0) {          if (thisClass.getPrivateGetSet().get(apiName.getTextContent()) == null || thisClass.getPrivateGetSet().get(apiName.getTextContent()) == 0) {            if (thisClass.getFieldGetSet().get(apiName.getTextContent()) == 1) {              if (ancestorClass.getFieldGetSet().get(apiName.getTextContent()) != null && ancestorClass.getFieldGetSet().get(apiName.getTextContent()) > 1) {                thisClass.getFieldGetSet().put(apiName.getTextContent(),thisClass.getFieldGetSet().get(apiName.getTextContent()) + 2);              }            } else             if (thisClass.getFieldGetSet().get(apiName.getTextContent()) == 2) {              if (ancestorClass.getFieldGetSet().get(apiName.getTextContent()) != null && ancestorClass.getFieldGetSet().get(apiName.getTextContent()) != 2) {                thisClass.getFieldGetSet().put(apiName.getTextContent(),thisClass.getFieldGetSet().get(apiName.getTextContent()) + 1);              }            }          }        }      }    }  }  if (ancestorClass.getPrivateGetSet() != null) {    Set<Map.Entry<String,Integer>> baseEntrySet=ancestorClass.getPrivateGetSet().entrySet();    Iterator<Map.Entry<String,Integer>> baseEntryIterator=baseEntrySet.iterator();    if (baseEntryIterator != null) {      while (baseEntryIterator.hasNext()) {        Map.Entry<String,Integer> baseEntry=baseEntryIterator.next();        boolean found=false;        for (int excludedCount=0; excludedCount < thisClass.getExcludedProperties().size(); excludedCount++) {          if (thisClass.getExcludedProperties().get(excludedCount).equals(baseEntry.getKey())) {            found=true;            break;          }        }        if (found) {          continue;        }        Set<Map.Entry<String,Integer>> entrySet=thisClass.getPrivateGetSet().entrySet();        Iterator<Map.Entry<String,Integer>> entryIterator=entrySet.iterator();        if (entryIterator != null) {          while (entryIterator.hasNext()) {            Map.Entry<String,Integer> entry=entryIterator.next();            if (entry.getKey().equals(baseEntry.getKey())) {              if (entry.getValue() == 3) {                found=true;                break;              } else               if (entry.getValue() == 2) {                if (ancestorClass.getPrivateGetSet().get(entry.getKey()) > 1) {                  found=true;                  break;                }              } else               if (entry.getValue() == 1) {                if (ancestorClass.getPrivateGetSet().get(entry.getKey()) != 2) {                  found=true;                  break;                }              }            }          }        }        if (found) {          continue;        }        entrySet=thisClass.getFieldGetSet().entrySet();        entryIterator=entrySet.iterator();        if (entryIterator != null) {          while (entryIterator.hasNext()) {            Map.Entry<String,Integer> entry=entryIterator.next();            if (entry.getKey().equals(baseEntry.getKey())) {              if (entry.getValue() == 1) {                if (ancestorClass.getPrivateGetSet().get(entry.getKey()) > 1) {                  thisClass.getFieldGetSet().put(entry.getKey(),thisClass.getFieldGetSet().get(entry.getKey()) + 2);                }              } else               if (entry.getValue() == 2) {                if (ancestorClass.getPrivateGetSet().get(entry.getKey()) != 2) {                  thisClass.getFieldGetSet().put(entry.getKey(),thisClass.getFieldGetSet().get(entry.getKey()) + 1);                }              }              break;            }          }        }      }    }  }}  }
class C{  public static CCSprite sprite(String spriteFrameName,boolean isFrame){  return new CCSprite(spriteFrameName,isFrame);}  }
class C{  private void grow(int wd){  int newLen=Math.max(this.word.length,wd + 1);  long[] tmp=new long[newLen];  System.arraycopy(this.word,0,tmp,0,this.word.length);  this.word=tmp;}  }
class C{  public void testCertPathValidator02(){  try {    CertPathValidator.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public String generateKeyPair(X509Certificate issuerCert,X509Certificate[] issuerCertChain,PrivateKey issuerPrivateKey){  String alias="";  try {    int keyPairSize=applicationSettings.getGenerateKeyPairSize();    KeyPairType keyPairType=applicationSettings.getGenerateKeyPairType();    KeyStore activeKeyStore=kseFrame.getActiveKeyStore();    KeyStoreType activeKeyStoreType=KeyStoreType.resolveJce(activeKeyStore.getType());    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    Provider provider=history.getExplicitProvider();    DGenerateKeyPair dGenerateKeyPair=new DGenerateKeyPair(frame,activeKeyStoreType,keyPairType,keyPairSize);    dGenerateKeyPair.setLocationRelativeTo(frame);    dGenerateKeyPair.setVisible(true);    if (!dGenerateKeyPair.isSuccessful()) {      return "";    }    keyPairType=dGenerateKeyPair.getKeyPairType();    DGeneratingKeyPair dGeneratingKeyPair;    if (keyPairType != KeyPairType.EC) {      keyPairSize=dGenerateKeyPair.getKeyPairSize();      dGeneratingKeyPair=new DGeneratingKeyPair(frame,keyPairType,keyPairSize,provider);      applicationSettings.setGenerateKeyPairSize(keyPairSize);      applicationSettings.setGenerateKeyPairType(keyPairType);    } else {      String curveName=dGenerateKeyPair.getCurveName();      dGeneratingKeyPair=new DGeneratingKeyPair(frame,keyPairType,curveName,provider);    }    dGeneratingKeyPair.setLocationRelativeTo(frame);    dGeneratingKeyPair.startKeyPairGeneration();    dGeneratingKeyPair.setVisible(true);    KeyPair keyPair=dGeneratingKeyPair.getKeyPair();    if (keyPair == null) {      return "";    }    DGenerateKeyPairCert dGenerateKeyPairCert=new DGenerateKeyPairCert(frame,res.getString("GenerateKeyPairAction.GenerateKeyPairCert.Title"),keyPair,keyPairType,issuerCert,issuerPrivateKey,provider);    dGenerateKeyPairCert.setLocationRelativeTo(frame);    dGenerateKeyPairCert.setVisible(true);    X509Certificate certificate=dGenerateKeyPairCert.getCertificate();    if (certificate == null) {      return "";    }    KeyStoreState currentState=history.getCurrentState();    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    DGetAlias dGetAlias=new DGetAlias(frame,res.getString("GenerateKeyPairAction.NewKeyPairEntryAlias.Title"),X509CertUtil.getCertificateAlias(certificate));    dGetAlias.setLocationRelativeTo(frame);    dGetAlias.setVisible(true);    alias=dGetAlias.getAlias();    if (alias == null) {      return "";    }    if (keyStore.containsAlias(alias)) {      String message=MessageFormat.format(res.getString("GenerateKeyPairAction.OverWriteEntry.message"),alias);      int selected=JOptionPane.showConfirmDialog(frame,message,res.getString("GenerateKeyPairAction.NewKeyPairEntryAlias.Title"),JOptionPane.YES_NO_OPTION);      if (selected != JOptionPane.YES_OPTION) {        return "";      }    }    Password password=new Password((char[])null);    KeyStoreType keyStoreType=KeyStoreType.resolveJce(activeKeyStore.getType());    if (keyStoreType.hasEntryPasswords()) {      DGetNewPassword dGetNewPassword=new DGetNewPassword(frame,res.getString("GenerateKeyPairAction.NewKeyPairEntryPassword.Title"),applicationSettings.getPasswordQualityConfig());      dGetNewPassword.setLocationRelativeTo(frame);      dGetNewPassword.setVisible(true);      password=dGetNewPassword.getPassword();      if (password == null) {        return "";      }    }    if (keyStore.containsAlias(alias)) {      keyStore.deleteEntry(alias);      newState.removeEntryPassword(alias);    }    X509Certificate[] newCertChain=null;    if (issuerCertChain != null) {      newCertChain=new X509Certificate[issuerCertChain.length + 1];      System.arraycopy(issuerCertChain,0,newCertChain,1,issuerCertChain.length);      newCertChain[0]=certificate;    } else {      newCertChain=new X509Certificate[]{certificate};    }    keyStore.setKeyEntry(alias,keyPair.getPrivate(),password.toCharArray(),newCertChain);    newState.setEntryPassword(alias,password);    currentState.append(newState);    kseFrame.updateControls(true);    JOptionPane.showMessageDialog(frame,res.getString("GenerateKeyPairAction.KeyPairGenerationSuccessful.message"),res.getString("GenerateKeyPairAction.GenerateKeyPair.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }  return alias;}  }
class C{  public void writeSkyLight(ByteBuf output){  output.writeBytes(skyLight.getHandle());}  }
class C{  public static StorageImage create(String fileName,byte[] data,int width,int height){  if (Storage.getInstance().writeObject(fileName,data)) {    return new StorageImage(fileName,width,height,true);  }  return null;}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  return extns != null && !extns.isEmpty();}  }
class C{  public void deleteItem(AutomationItem item){  if (item != null) {    if (item.isActionRunning()) {      stop();    }    if (getCurrentAutomationItem() == item) {      setNextAutomationItem();    }    String id=item.getId();    item.dispose();    int old=getSize();    _automationHashTable.remove(id);    resequenceIds();    if (getSize() <= 0) {      setCurrentAutomationItem(null);    }    setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,old,getSize());  }}  }
class C{  public void waitForTick(long periodMs){  long remaining=periodMs - (long)period.milliseconds();  if (remaining > 0) {    try {      Thread.sleep(remaining);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }  period.reset();}  }
class C{  public static <D extends GenericDeclaration>Annotation[] parseTypeVariableAnnotations(D genericDecl,int typeVarIndex){  AnnotatedElement decl;  TypeAnnotationTarget predicate;  if (genericDecl instanceof Class) {    decl=(Class<?>)genericDecl;    predicate=TypeAnnotationTarget.CLASS_TYPE_PARAMETER;  } else   if (genericDecl instanceof Executable) {    decl=(Executable)genericDecl;    predicate=TypeAnnotationTarget.METHOD_TYPE_PARAMETER;  } else {    throw new AssertionError("Unknown GenericDeclaration " + genericDecl + "\nthis should not happen.");  }  List<TypeAnnotation> typeVarAnnos=TypeAnnotation.filter(parseAllTypeAnnotations(decl),predicate);  List<Annotation> res=new ArrayList<>(typeVarAnnos.size());  for (  TypeAnnotation t : typeVarAnnos)   if (t.getTargetInfo().getCount() == typeVarIndex)   res.add(t.getAnnotation());  return res.toArray(new Annotation[0]);}  }
class C{  public Ethernet(){  super();  this.vlanID=VLAN_UNTAGGED;}  }
class C{  public void run(){  try {    if (files.length > MAX_SCRIPT_FILE_NUMBER_OF_ARGUMENTS) {      List<File[]> fileArrays=splitArray(files,MAX_SCRIPT_FILE_NUMBER_OF_ARGUMENTS);      for (      File[] fileSubset : fileArrays) {        Runtime.getRuntime().exec(createWSHScriptCommand(playlist,fileSubset));      }    } else {      Runtime.getRuntime().exec(createWSHScriptCommand(playlist,files));    }  } catch (  IOException e) {    LOG.error(e.getMessage(),e);  }}  }
class C{  public static <NodeType extends IGraphNode<NodeType>>Pair<Tree<NodeType>,HashMap<NodeType,ITreeNode<NodeType>>> calculate(final IDirectedGraph<NodeType,?> graph,final NodeType rootNode) throws MalformedGraphException {  Preconditions.checkNotNull(graph,"Error: Graph argument can not be null");  Preconditions.checkNotNull(rootNode,"Error: Root node argument can not be null");  if (graph.nodeCount() == 0) {    return new Pair<Tree<NodeType>,HashMap<NodeType,ITreeNode<NodeType>>>(null,null);  }  return calculate(graph.getNodes(),rootNode);}  }
class C{  public static boolean isvalidEmailFormat(CharSequence target){  if (TextUtils.isEmpty(target))   return false; else   return android.util.Patterns.EMAIL_ADDRESS.matcher(target).matches();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.860 -0500",hash_original_method="1A9A71EFE325E55C19A2B451F1A9B9E2",hash_generated_method="F7E005DD24A38F96E3E071826A6E3889") public int compareToIgnoreCase(String string){  return getTaintInt();}  }
class C{  public boolean isWaitingForMoreInput(){  return state == State.WAITING_FOR_INPUT;}  }
class C{  public void indexSourceFolder(JavaProject javaProject,IPath sourceFolder,char[][] inclusionPatterns,char[][] exclusionPatterns){  IProject project=javaProject.getProject();  if (this.jobEnd > this.jobStart) {    IndexRequest request=new IndexAllProject(project,this);    if (isJobWaiting(request))     return;  }  request(new AddFolderToIndex(sourceFolder,project,inclusionPatterns,exclusionPatterns,this));}  }
class C{  public ServerBuilder maxPendingRequests(int maxPendingRequests){  this.maxPendingRequests=ServerConfig.validateMaxPendingRequests(maxPendingRequests);  return this;}  }
class C{  public boolean equals(Object o){  if (this == o)   return true;  if (o instanceof JarPackageFragmentRoot) {    JarPackageFragmentRoot other=(JarPackageFragmentRoot)o;    return this.jarPath.equals(other.jarPath);  }  return false;}  }
class C{  protected void sequence_S_If(ISerializationContext context,S_If semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public T nowrap(String value){  return attr("nowrap",value);}  }
class C{  public static String toString(int x){  return toString(x,10);}  }
class C{  public IndexDescriptor addIndex(String idxName,GridQueryIndexType type) throws IgniteCheckedException {  IndexDescriptor idx=new IndexDescriptor(type);  if (indexes.put(idxName,idx) != null)   throw new IgniteCheckedException("Index with name '" + idxName + "' already exists.");  return idx;}  }
class C{  default B baseColor(final DyeColor color){  this.meta().setBaseColor(color);  return this.getBuilder();}  }
class C{  public static final String unescapeHtml3(final String input){  return UNESCAPE_HTML3.translate(input);}  }
class C{  private String prepareAverageRatingForSorting(){  StringBuffer buffer=new StringBuffer();  buffer.append(", COALESCE(");  buffer.append("   (SELECT averagerating");  buffer.append("      FROM productfeedback AS pf");  buffer.append("     WHERE pf.product_tkey = p.tkey)");  buffer.append("   ,");  buffer.append("   (SELECT averagerating");  buffer.append("      FROM productfeedback AS pf, product AS pt");  buffer.append("     WHERE p.template_tkey = pt.tkey");  buffer.append("       AND pf.product_tkey = pt.tkey)");  buffer.append("  ) AS rating");  return buffer.toString();}  }
class C{  public boolean isZoomEnabled(){  return isZoomXEnabled() || isZoomYEnabled();}  }
class C{  public StrokeMap(){  this.store=new TreeMap();}  }
class C{  private ImageCache(float memCacheSizePercent){  init(memCacheSizePercent);}  }
class C{  public void addBox(float x,float y,float z,int w,int h,int d,float expansion,float scale){  float scaleX=w * scale;  float scaleY=h * scale;  float scaleZ=d * scale;  float x1=x + scaleX;  float y1=y + scaleY;  float z1=z + scaleZ;  float expX=expansion + scaleX - w;  float expY=expansion + scaleY - h;  float expZ=expansion + scaleZ - d;  x-=expX;  y-=expY;  z-=expZ;  x1+=expansion;  y1+=expansion;  z1+=expansion;  if (mirror) {    float xTemp=x1;    x1=x;    x=xTemp;  }  float[] v={x,y,z};  float[] v1={x1,y,z};  float[] v2={x1,y1,z};  float[] v3={x,y1,z};  float[] v4={x,y,z1};  float[] v5={x1,y,z1};  float[] v6={x1,y1,z1};  float[] v7={x,y1,z1};  addRectShape(v,v1,v2,v3,v4,v5,v6,v7,w,h,d);}  }
class C{  void readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {  XmlFile xf=new XmlFile(){  };  xf.rootFromFile(file);}  }
class C{  public Columns(@IntRange(from=1) int columnCount,int initialCapacity){  super(initialCapacity);  mColumnCount=columnCount;}  }
class C{  @CheckResult @Nullable static Icon findIconForKey(@NonNull String iconKey){  for (int i=0, iconFontDescriptorsSize=iconFontDescriptors.size(); i < iconFontDescriptorsSize; i++) {    IconFontDescriptorWrapper iconFontDescriptor=iconFontDescriptors.get(i);    Icon icon=iconFontDescriptor.getIcon(iconKey);    if (icon != null)     return icon;  }  return null;}  }
class C{  public static Vector<Region> loadAllRegions(File saveFolder) throws IOException {  Vector<Region> ret=new Vector<Region>();  File dir=new File(saveFolder.getAbsoluteFile() + "/region");  if (!dir.exists() || !dir.isDirectory())   throw new FileNotFoundException(dir.getAbsolutePath());  File[] files=dir.listFiles();  for (  File f : files) {    String name=f.getName();    if (name.matches("r\\.[0-9[-]]+\\.[0-9[-]]+\\.mca")) {      ret.add(new Region(f));    }  }  if (ret.size() == 0) {    for (    File f : files) {      String name=f.getName();      if (name.matches("r\\.[0-9[-]]+\\.[0-9[-]]+\\.mcr")) {        ret.add(new Region(f));      }    }  }  return ret;}  }
class C{  final public static double[] earthCircle(double phi1,double lambda0,double c,int n,double[] ret_val){  return earthCircle(phi1,lambda0,c,0.0f,MoreMath.TWO_PI_D,n,ret_val);}  }
class C{  private void startupSocket(InetAddress dstAddress,int dstPort,InetAddress localAddress,int localPort,boolean streaming) throws IOException {  if (localPort < 0 || localPort > 65535) {    throw new IllegalArgumentException("Local port out of range: " + localPort);  }  InetAddress addr=localAddress == null ? Inet4Address.ANY : localAddress;synchronized (this) {    impl.create(streaming);    isCreated=true;    try {      if (!streaming || !usingSocks()) {        impl.bind(addr,localPort);      }      isBound=true;      impl.connect(dstAddress,dstPort);      isConnected=true;      cacheLocalAddress();    } catch (    IOException e) {      impl.close();      throw e;    }  }}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public void notifyMessage(final String message,final String title){  if (message == null || title == null) {    return;  }  if (title.indexOf(AbstractConditionsAttachment.TRIGGER_CHANCE_FAILURE) != -1 && message.indexOf(AbstractConditionsAttachment.TRIGGER_CHANCE_FAILURE) != -1 && !getUIContext().getShowTriggerChanceFailure()) {    return;  }  if (title.indexOf(AbstractConditionsAttachment.TRIGGER_CHANCE_SUCCESSFUL) != -1 && message.indexOf(AbstractConditionsAttachment.TRIGGER_CHANCE_SUCCESSFUL) != -1 && !getUIContext().getShowTriggerChanceSuccessful()) {    return;  }  if (title.equals(AbstractTriggerAttachment.NOTIFICATION) && !getUIContext().getShowTriggeredNotifications()) {    return;  }  if (title.indexOf(AbstractEndTurnDelegate.END_TURN_REPORT_STRING) != -1 && message.indexOf(AbstractEndTurnDelegate.END_TURN_REPORT_STRING) != -1 && !getUIContext().getShowEndOfTurnReport()) {    return;  }  final String displayMessage=LocalizeHTML.localizeImgLinksInHTML(message);  if (messageAndDialogThreadPool != null) {    messageAndDialogThreadPool.runTask(null);  }}  }
class C{  protected String extractJavaFile(String srcDir,String clazz){  clazz=clazz.replaceAll("\\.",File.separator);  if (!srcDir.endsWith(File.separator)) {    srcDir+=File.separator;  }  return srcDir + clazz + ".java";}  }
class C{  public RepositoryStateMachineModelFactory(StateRepository<? extends RepositoryState> stateRepository,TransitionRepository<? extends RepositoryTransition> transitionRepository){  this.stateRepository=stateRepository;  this.transitionRepository=transitionRepository;}  }
class C{  public String toString(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),"toString()","Entry");  }  String retStr="ModelMBeanOperationInfo: " + this.getName() + " ; Description: "+ this.getDescription()+ " ; Descriptor: "+ this.getDescriptor()+ " ; ReturnType: "+ this.getReturnType()+ " ; Signature: ";  MBeanParameterInfo[] pTypes=this.getSignature();  for (int i=0; i < pTypes.length; i++) {    retStr=retStr.concat((pTypes[i]).getType() + ", ");  }  return retStr;}  }
class C{  public void drawString(String str,float x,float y){  drawString(str,x,y,getFont(),getFontRenderContext(),0f);}  }
class C{  public NoteendpointRequest(JsonHttpClient client,HttpMethod method,String uriTemplate,Object content){  super(client,method,uriTemplate,content);}  }
class C{  public JarInputReader(String jarFilePath,String jarEntryName) throws IOException {  if (Debug.debugging("binaryfile")) {    Debug.output("JarInputReader created for " + jarEntryName + " in "+ jarFilePath);  }  this.jarFileName=jarFilePath;  this.jarEntryName=jarEntryName;  reopen();  name=jarFilePath + "!" + jarEntryName;}  }
class C{  private void expandProperty(final int index){  final int selectedRow=getSelectedRow();  final Property property=myProperties.get(index);  final String dottedName=getDottedName(property);  if (myExpandedProperties.contains(dottedName))   return;  myExpandedProperties.add(dottedName);  final Property[] children=getPropChildren(property);  for (int i=0; i < children.length; i++) {    myProperties.add(index + i + 1,children[i]);  }  myModel.fireTableDataChanged();  if (selectedRow != -1) {    getSelectionModel().setSelectionInterval(selectedRow,selectedRow);  }}  }
class C{  private void calcXValAverageLength(){  if (mXVals.size() <= 0) {    mXValAverageLength=1;    return;  }  float sum=1f;  for (int i=0; i < mXVals.size(); i++) {    sum+=mXVals.get(i).length();  }  mXValAverageLength=sum / (float)mXVals.size();}  }
class C{  public void actionPerformed(ActionEvent e){  DefaultMutableTreeNode lastItem=getSelectedNode();  if (lastItem != null) {    treeModel.reload(lastItem);  }}  }
class C{  public static void checkAndAppendTimeElement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o != null && o instanceof Number) {    Number num=(Number)o;    appendTimeInMillis(context,path,num.longValue());  }}  }
class C{  private Map<String,List<VPlexRecommendation>> sortRecommendationsByVarray(List<Recommendation> recommendations,URI[] vplexSystemURIOut){  URI vplexStorageSystemURI=null;  Map<String,List<VPlexRecommendation>> varrayRecommendationsMap=new HashMap<String,List<VPlexRecommendation>>();  for (  Recommendation recommendation : recommendations) {    VPlexRecommendation vplexRecommendation=(VPlexRecommendation)recommendation;    String varrayId=vplexRecommendation.getVirtualArray().toString();    if (vplexStorageSystemURI == null) {      vplexStorageSystemURI=vplexRecommendation.getVPlexStorageSystem();      vplexSystemURIOut[0]=vplexStorageSystemURI;    }    if (!varrayRecommendationsMap.containsKey(varrayId)) {      List<VPlexRecommendation> varrayRecommendations=new ArrayList<VPlexRecommendation>();      varrayRecommendations.add(vplexRecommendation);      varrayRecommendationsMap.put(varrayId,varrayRecommendations);    } else {      List<VPlexRecommendation> varrayRecommendations=varrayRecommendationsMap.get(varrayId);      varrayRecommendations.add(vplexRecommendation);    }  }  return varrayRecommendationsMap;}  }
class C{  public VertexBufferObject(boolean isStatic,int numVertices,VertexAttribute... attributes){  this(isStatic,numVertices,new VertexAttributes(attributes));}  }
class C{  @Override public void mouseClicked(MouseEvent e){  if (m_clickAvailable) {    int s=-1;    for (int noa=0; noa < m_numNodes; noa++) {      if (m_nodes[noa].m_quad == 18) {        calcScreenCoords(noa);        if (e.getX() <= m_nodes[noa].m_center + m_nodes[noa].m_side && e.getX() >= m_nodes[noa].m_center - m_nodes[noa].m_side && e.getY() >= m_nodes[noa].m_top && e.getY() <= m_nodes[noa].m_top + m_nodes[noa].m_height) {          s=noa;        }        m_nodes[noa].m_top=32000;      }    }    m_focusNode=s;    if (m_focusNode != -1) {      if (m_listener != null) {        actionPerformed(new ActionEvent(this,32000,"Create Child Nodes"));      } else {        actionPerformed(new ActionEvent(this,32000,"Visualize The Node"));      }    }  }}  }
class C{  protected void computeOutlierScores(KNNQuery<O> knnq,final DBIDs ids,WritableDataStore<double[]> densities,WritableDoubleDataStore kdeos,DoubleMinMax minmax){  final int knum=kmax + 1 - kmin;  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Computing KDEOS scores",ids.size(),LOG) : null;  double[][] scratch=new double[knum][kmax + 5];  MeanVariance mv=new MeanVariance();  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    double[] dens=densities.get(iter);    KNNList neighbors=knnq.getKNNForDBID(iter,kmax + 1);    if (scratch[0].length < neighbors.size()) {      scratch=new double[knum][neighbors.size() + 5];    }{      int i=0;      for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance(), i++) {        double[] ndens=densities.get(neighbor);        for (int k=0; k < knum; k++) {          scratch[k][i]=ndens[k];        }      }      assert (i == neighbors.size());    }    double score=0.;    for (int i=0; i < knum; i++) {      mv.reset();      for (int j=0; j < neighbors.size(); j++) {        mv.put(scratch[i][j]);      }      final double mean=mv.getMean(), stddev=mv.getSampleStddev();      if (stddev > 0.) {        score+=(mean - dens[i]) / stddev;      }    }    score/=knum;    score=NormalDistribution.standardNormalCDF(score);    minmax.put(score);    kdeos.put(iter,score);    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);}  }
class C{  public static int adjustAlpha(int color,float factor){  int alpha=Math.round(Color.alpha(color) * factor);  int red=Color.red(color);  int green=Color.green(color);  int blue=Color.blue(color);  return Color.argb(alpha,red,green,blue);}  }
class C{  protected void integrityCheckParameters(N parent,int index){  E entry=parent.getEntry(index);  HyperBoundingBox mbr=computeMBR();  if (mbr == null) {    return;  }  if (!SpatialUtil.equals(entry,mbr)) {    String soll=mbr.toString();    String ist=new HyperBoundingBox(entry).toString();    throw new RuntimeException("Wrong MBR in node " + parent.getPageID() + " at index "+ index+ " (child "+ entry+ ")"+ "\nsoll: "+ soll+ ",\n ist: "+ ist);  }}  }
class C{  private static boolean isWindowOpacitySupported(){  Toolkit curToolkit=Toolkit.getDefaultToolkit();  if (!(curToolkit instanceof SunToolkit)) {    return false;  }  return ((SunToolkit)curToolkit).isWindowOpacitySupported();}  }
class C{  public boolean wasMovedFromHomeInLastMove(){  return moveCountSinceHome <= 1;}  }
class C{  public List<FractionManifest> fractionManifests(){  if (this.mode == Mode.UBERJAR && this.manifests == null) {    try {      loadFractionManifestsFromUberjar();    } catch (    IOException|ModuleLoadException e) {      throw new RuntimeException(e);    }  }  return this.manifests;}  }
class C{  private void compareL1WithL2(ResourceBundle l1,ResourceBundle l2){  Locale locale="".equals(l2.getLocale().getCountry()) ? Locale.ENGLISH : l2.getLocale();  Enumeration<String> keys=l1.getKeys();  Set<String> l2KeySet=new HashSet<>(Collections.list(l2.getKeys()));  StringBuilder misses=new StringBuilder();  while (keys.hasMoreElements()) {    String propertyName=keys.nextElement();    if (!l2KeySet.contains(propertyName)) {      misses.append(locale).append(" misses ").append(propertyName).append('\n');    }  }  if (misses.length() > 0) {    fail(misses.toString());  }}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public Constituent createConstituentAnnotation(int aBegin,int aEnd,String aConstituentType,String aSyntacticFunction){  Type constType=constituentMappingProvider.getTagType(aConstituentType);  Constituent constAnno=(Constituent)jCas.getCas().createAnnotation(constType,aBegin,aEnd);  constAnno.setConstituentType(aConstituentType);  constAnno.setSyntacticFunction(aSyntacticFunction);  return constAnno;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.IF__CHECK:    setCheck((Check)newValue);  return;case SexecPackage.IF__THEN_STEP:setThenStep((Step)newValue);return;case SexecPackage.IF__ELSE_STEP:setElseStep((Step)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void loadVersion1(File f) throws ConfigPersisterException {  try {    Props props=new Props(f);    _config=new Config();    String header=props.getProperty(Config.HEADER);    _config.setHeaderType(header == null || header.toLowerCase().equals("guihead.bin") ? Config.GUI_HEADER : Config.CONSOLE_HEADER);    _config.setJar(props.getFile(Config.JAR));    _config.setOutfile(props.getFile(Config.OUTFILE));    _config.setJre(new Jre());    _config.getJre().setPath(props.getProperty(Jre.PATH));    _config.getJre().setMinVersion(props.getProperty(Jre.MIN_VERSION));    _config.getJre().setMaxVersion(props.getProperty(Jre.MAX_VERSION));    String args=props.getProperty(Jre.ARGS);    if (args != null) {      List<String> jreOptions=new ArrayList<String>();      jreOptions.add(args);      _config.getJre().setOptions(jreOptions);    }    _config.setCmdLine(props.getProperty(Config.JAR_ARGS));    _config.setChdir("true".equals(props.getProperty(Config.CHDIR)) ? "." : null);    _config.setStayAlive("true".equals(props.getProperty(Config.STAY_ALIVE)));    _config.setErrTitle(props.getProperty(Config.ERR_TITLE));    _config.setIcon(props.getFile(Config.ICON));    File splashFile=props.getFile(Splash.SPLASH_FILE);    if (splashFile != null) {      _config.setSplash(new Splash());      _config.getSplash().setFile(splashFile);      String waitfor=props.getProperty("waitfor");      _config.getSplash().setWaitForWindow(waitfor != null && !waitfor.equals(""));      String splashTimeout=props.getProperty(Splash.TIMEOUT);      if (splashTimeout != null) {        _config.getSplash().setTimeout(Integer.parseInt(splashTimeout));      }      _config.getSplash().setTimeoutErr("true".equals(props.getProperty(Splash.TIMEOUT_ERR)));    } else {      _config.setSplash(null);    }    setConfigPath(f);  } catch (  IOException e) {    throw new ConfigPersisterException(e);  }}  }
class C{  public DOMReference(String uri,String type,DigestMethod dm,List<? extends Transform> transforms,String id,Provider provider){  this(uri,type,dm,null,null,transforms,id,null,provider);}  }
class C{  public DiasporaPodList fromJson(JSONObject json) throws JSONException {  JSONArray jarr;  pods.clear();  if (json.has("pods")) {    jarr=json.getJSONArray("pods");    for (int i=0; i < jarr.length(); i++) {      DiasporaPod pod=new DiasporaPod().fromJson(jarr.getJSONObject(i));      pods.add(pod);    }  }  if (json.has("timestamp")) {    timestamp=json.getLong("timestamp");  }  return this;}  }
class C{  private void updateHistoryModDate(DomainObject<?> obj,Date date){  obj.setHistoryModificationTime(Long.valueOf(date.getTime()));}  }
class C{  protected void sequence_TAnnotationStringArgument(ISerializationContext context,TAnnotationStringArgument semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.TANNOTATION_STRING_ARGUMENT__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.TANNOTATION_STRING_ARGUMENT__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTAnnotationStringArgumentAccess().getValueSTRINGTerminalRuleCall_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  protected boolean removeIfPresentEstimate(EstimateMapKey key,LoadEstimateTask task){  return estimateMap.remove(key,task);}  }
class C{  public static Project v(){  return project;}  }
class C{  public OverTheTopLayer generateBitmap(Resources resources,int drawableResId,float mScalingFactor,int[] location){  if (location == null) {    location=new int[]{0,0};  } else   if (location.length != 2) {    throw new OverTheTopLayerException("Requires location as an array of length 2 - [x,y]");  }  Bitmap bitmap=BitmapFactory.decodeResource(resources,drawableResId);  Bitmap scaledBitmap=Bitmap.createScaledBitmap(bitmap,(int)(bitmap.getWidth() * mScalingFactor),(int)(bitmap.getHeight() * mScalingFactor),false);  this.mBitmap=scaledBitmap;  this.mDrawLocation=location;  return this;}  }
class C{  public ToStringHelper addValue(boolean value){  return addHolder(String.valueOf(value));}  }
class C{  private void DFS(TreeNode node){  list.add(node);  Enumeration<TreeNode> childEnum=node.getChildren();  while (childEnum.hasMoreElements()) {    TreeNode child=childEnum.nextElement();    DFS(child);  }}  }
class C{  public void addRule(Rule rule){  this.qtyRulesRead++;  rule.setOwner(owner);  if (numDenseFeatures == 0)   numDenseFeatures=rule.getFeatureVector().getDenseFeatures().size();  MemoryBasedTrie pos=root;  int[] french=rule.getFrench();  maxSourcePhraseLength=Math.max(maxSourcePhraseLength,french.length);  for (  int curSymID : french) {    MemoryBasedTrie nextLayer=(MemoryBasedTrie)pos.match(curSymID);    if (null == nextLayer) {      nextLayer=new MemoryBasedTrie();      if (pos.hasExtensions() == false) {        pos.childrenTbl=new HashMap<>();      }      pos.childrenTbl.put(curSymID,nextLayer);    }    pos=nextLayer;  }  if (!pos.hasRules()) {    pos.ruleBin=new MemoryBasedRuleBin(rule.getArity(),rule.getFrench());    this.qtyRuleBins++;  }  pos.ruleBin.addRule(rule);}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("jboss3x",DeployerType.INSTALLED,JBossInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss4x",DeployerType.INSTALLED,JBossInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss4x",DeployerType.REMOTE,JBoss4xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss42x",DeployerType.INSTALLED,JBossInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss42x",DeployerType.REMOTE,JBoss4xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss5x",DeployerType.INSTALLED,JBossInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss5x",DeployerType.REMOTE,JBoss5xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss51x",DeployerType.INSTALLED,JBossInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss51x",DeployerType.REMOTE,JBoss51xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss6x",DeployerType.INSTALLED,JBossInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss6x",DeployerType.REMOTE,JBoss51xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss61x",DeployerType.INSTALLED,JBossInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss61x",DeployerType.REMOTE,JBoss51xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss7x",DeployerType.INSTALLED,JBoss7xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss7x",DeployerType.REMOTE,JBoss7xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss71x",DeployerType.INSTALLED,JBoss7xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss71x",DeployerType.REMOTE,JBoss7xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss72x",DeployerType.INSTALLED,JBoss7xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss72x",DeployerType.REMOTE,JBoss7xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss73x",DeployerType.INSTALLED,JBoss7xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss73x",DeployerType.REMOTE,JBoss7xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss74x",DeployerType.INSTALLED,JBoss7xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss74x",DeployerType.REMOTE,JBoss7xRemoteDeployer.class);  deployerFactory.registerDeployer("jboss75x",DeployerType.INSTALLED,JBoss7xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jboss75x",DeployerType.REMOTE,JBoss7xRemoteDeployer.class);}  }
class C{  public synchronized void deleteManagedResource(ManagedResource res){  String resourceId=res.getResourceId();  ManagedResourceRegistration existingReg=registry.registered.get(resourceId);  int numObservers=existingReg.observers.size();  if (numObservers > 0) {    String errMsg=String.format(Locale.ROOT,"Cannot delete managed resource %s as it is being used by %d Solr components",resourceId,numObservers);    throw new SolrException(ErrorCode.FORBIDDEN,errMsg);  }  registry.registered.remove(resourceId);  managed.remove(resourceId);  try {    res.onResourceDeleted();  } catch (  IOException e) {    log.error("Error when trying to clean-up after deleting " + resourceId,e);  }}  }
class C{  public boolean isUpdate(){  boolean is;  if (m_editFlag == FolderEditFlag.UPDATE)   is=true; else   is=false;  return is;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public MaterialRange(){  super(Document.get().createElement("form"));  getElement().setAttribute("action","#");  lblError.setVisible(false);  paragraph.setStyleName("range-field");  input.setType(InputType.RANGE);  paragraph.add(input);  thumb.getElement().setClassName("thumb");  Span value=new Span();  value.getElement().setClassName("value");  thumb.add(value);  paragraph.add(thumb);  add(paragraph);  lblError.getElement().getStyle().setMarginTop(-10,Unit.PX);  add(lblError);}  }
class C{  protected IntLiteralImpl(){  super();}  }
class C{  protected Object readResolve() throws ObjectStreamException {  try {    return IgnitionEx.localIgnite().cluster().nodeLocalMap();  } catch (  IllegalStateException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  } finally {    stash.remove();  }}  }
class C{  public TableIterator iterator(){  return iterator(rows());}  }
class C{  public void putAllInLocalMonitoringRegion(Map<String,FederationComponent> objectMap){  if (localMonitoringRegion != null && !localMonitoringRegion.isDestroyed()) {    localMonitoringRegion.putAll(objectMap);  }}  }
class C{  public static Validator<CharSequence> phoneNumber(@NonNull final Context context){  return new PhoneNumberValidator(context,R.string.default_error_message);}  }
class C{  Builder reencodeForUri(){  for (int i=0, size=encodedPathSegments.size(); i < size; i++) {    String pathSegment=encodedPathSegments.get(i);    encodedPathSegments.set(i,canonicalize(pathSegment,PATH_SEGMENT_ENCODE_SET_URI,true,true,false,true));  }  if (encodedQueryNamesAndValues != null) {    for (int i=0, size=encodedQueryNamesAndValues.size(); i < size; i++) {      String component=encodedQueryNamesAndValues.get(i);      if (component != null) {        encodedQueryNamesAndValues.set(i,canonicalize(component,QUERY_COMPONENT_ENCODE_SET_URI,true,true,true,true));      }    }  }  if (encodedFragment != null) {    encodedFragment=canonicalize(encodedFragment,FRAGMENT_ENCODE_SET_URI,true,true,false,false);  }  return this;}  }
class C{  public ServiceCall<Void> deleteDialog(final String dialogId){  Validator.isTrue((dialogId != null) && !dialogId.isEmpty(),"dialogId cannot be null or empty");  final Request request=RequestBuilder.delete(String.format(PATH_DIALOG,dialogId)).build();  return createServiceCall(request,ResponseConverterUtils.getVoid());}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  static void errorExpectedInput(String systemID,int lineNr,String expectedString) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"Expected: " + expectedString);}  }
class C{  private static DownscaleQuality addConstant(String type){  init();  if (constList.containsKey(type)) {    throw new RuntimeException("Type strings for DownscaleQuality should be unique; " + type + " is declared twice");  }  DownscaleQuality q=new DownscaleQuality(type);  constList.put(type,q);  return q;}  }
class C{  public void stop(){  try {    _dataManager.setListener(null);    _dataManager.setConnectionStateListener(null);  } catch (  Exception ex) {    _log.error(ex.getMessage(),ex);  }}  }
class C{  protected BufferedImage readImage(URL fileUrl){  try {    return ImageIO.read(fileUrl);  } catch (  Exception e) {    String msg=Logging.getMessage("generic.ExceptionAttemptingToReadImageFile",this.getImageSource().toString());    Logging.logger().log(java.util.logging.Level.SEVERE,msg,e);    this.imageInitializationFailed=true;    return null;  }}  }
class C{  public KeyIdentifierGenerator(PublicKey publicKey){  this.publicKey=publicKey;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static double angle(Coordinate p){  return Math.atan2(p.y,p.x);}  }
class C{  private void initDrawing(Drawing d){  LinkedList<InputFormat> inputFormats=new LinkedList<InputFormat>();  LinkedList<OutputFormat> outputFormats=new LinkedList<OutputFormat>();  DOMStorableInputOutputFormat ioFormat=new DOMStorableInputOutputFormat(new PertFactory());  inputFormats.add(ioFormat);  outputFormats.add(ioFormat);  outputFormats.add(new ImageOutputFormat());  d.setInputFormats(inputFormats);  d.setOutputFormats(outputFormats);}  }
class C{  public GuacamoleException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void itemStateChanged(ItemEvent event){  Object source=event.getItemSelectable();  GUIPreferences guip=GUIPreferences.getInstance();  if (source.equals(keepGameLog)) {    gameLogFilename.setEnabled(keepGameLog.isSelected());    stampFormatLabel.setEnabled(stampFilenames.isSelected());    gameLogFilenameLabel.setEnabled(keepGameLog.isSelected());  } else   if (source.equals(stampFilenames)) {    stampFormat.setEnabled(stampFilenames.isSelected());    stampFormatLabel.setEnabled(stampFilenames.isSelected());  } else   if (source.equals(fovInsideEnabled)) {    guip.setFovHighlight(fovInsideEnabled.isSelected());    if ((clientgui != null) && (clientgui.bv != null)) {      clientgui.bv.clearHexImageCache();      clientgui.bv.repaint();    }    fovHighlightAlpha.setEnabled(fovInsideEnabled.isSelected());    fovHighlightRingsRadii.setEnabled(fovInsideEnabled.isSelected());    fovHighlightRingsColors.setEnabled(fovInsideEnabled.isSelected());    fovHighlightRingsColorsLabel.setEnabled(fovInsideEnabled.isSelected());    fovHighlightRingsRadiiLabel.setEnabled(fovInsideEnabled.isSelected());    highlightAlphaLabel.setEnabled(fovInsideEnabled.isSelected());  } else   if (source.equals(fovOutsideEnabled)) {    guip.setFovDarken(fovOutsideEnabled.isSelected());    if ((clientgui != null) && (clientgui.bv != null)) {      clientgui.bv.clearHexImageCache();      clientgui.bv.repaint();    }    fovDarkenAlpha.setEnabled(fovOutsideEnabled.isSelected());    numStripesSlider.setEnabled(fovOutsideEnabled.isSelected());    darkenAlphaLabel.setEnabled(fovOutsideEnabled.isSelected());    numStripesLabel.setEnabled(fovOutsideEnabled.isSelected());    fovGrayscaleEnabled.setEnabled(fovOutsideEnabled.isSelected());  } else   if (source.equals(fovGrayscaleEnabled)) {    guip.setFovGrayscale(fovGrayscaleEnabled.isSelected());    if ((clientgui != null) && (clientgui.bv != null)) {      clientgui.bv.clearHexImageCache();      clientgui.bv.repaint();    }  } else   if (source.equals(aOHexShadows)) {    guip.setAOHexShadows(aOHexShadows.isSelected());    if ((clientgui != null) && (clientgui.bv != null)) {      clientgui.bv.clearHexImageCache();      clientgui.bv.repaint();    }  } else   if (source.equals(shadowMap)) {    guip.setShadowMap(shadowMap.isSelected());    if ((clientgui != null) && (clientgui.bv != null)) {      clientgui.bv.clearHexImageCache();      clientgui.bv.repaint();    }  } else   if (source.equals(levelhighlight)) {    guip.setLevelHighlight(levelhighlight.isSelected());    if ((clientgui != null) && (clientgui.bv != null)) {      clientgui.bv.clearHexImageCache();      clientgui.bv.repaint();    }  } else   if (source.equals(floatingIso)) {    guip.setFloatingIso(floatingIso.isSelected());    if ((clientgui != null) && (clientgui.bv != null)) {      clientgui.bv.clearHexImageCache();      clientgui.bv.repaint();    }  } else   if (source.equals(mmSymbol)) {    guip.setMmSymbol(mmSymbol.isSelected());    if ((clientgui != null) && (clientgui.minimap != null)) {      clientgui.minimap.drawMap();    }  }}  }
class C{  protected final IntConstantOperand CAU16(int i){  return IC(PPCMaskUpper16(i));}  }
class C{  public void pause(){  paused=true;}  }
class C{  public final int addAndGet(int delta){  for (; ; ) {    int current=get();    int next=current + delta;    if (compareAndSet(current,next))     return next;  }}  }
class C{  private void checkAlterInstantConverters() throws SecurityException {  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(new JodaTimePermission("ConverterManager.alterInstantConverters"));  }}  }
class C{  public void insert(int offset,double[] values,int valOffset,int len){  if (offset == _pos) {    add(values,valOffset,len);    return;  }  ensureCapacity(_pos + len);  System.arraycopy(_data,offset,_data,offset + len,_pos - offset);  System.arraycopy(values,valOffset,_data,offset,len);  _pos+=len;}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  private void initializeMBean(){  this.mbeanName="GemFire:type=DistributionLocator,id=" + MBeanUtil.makeCompliantMBeanNameProperty(getId());  this.objectName=MBeanUtil.createMBean(this,MBeanUtil.lookupManagedBean(this));}  }
class C{  public void saveRep(Repository rep,ObjectId idTransformation,ObjectId idStep) throws KettleException {  try {    rep.saveStepAttribute(idTransformation,idStep,"TableName",this.tabelName);    rep.saveStepAttribute(idTransformation,idStep,"factDimLensString",factDimLensString);    rep.saveStepAttribute(idTransformation,idStep,"outputRowSize",this.outputRowSize);    rep.saveStepAttribute(idTransformation,idStep,"cubeName",this.cubeName);    rep.saveStepAttribute(idTransformation,idStep,"schemaName",this.schemaName);    rep.saveStepAttribute(idTransformation,idStep,"dimensionCount",this.dimensionCount);    rep.saveStepAttribute(idTransformation,idStep,"noDictionaryDims",this.noDictionaryDims);    rep.saveStepAttribute(idTransformation,idStep,"noDictionaryDimsMapping",this.noDictionaryDimsMapping);    rep.saveStepAttribute(idTransformation,idStep,"complexDimensionCount",this.complexDimensionCount);    rep.saveStepAttribute(idTransformation,idStep,"measureCount",this.measureCount);    rep.saveStepAttribute(idTransformation,idStep,"isUpdateMemberRequest",this.updateMemberRequest);    rep.saveStepAttribute(idTransformation,idStep,"currentRestructNumber",currentRestructNumber);    rep.saveStepAttribute(idTransformation,idStep,"measureDataType",measureDataType);    rep.saveStepAttribute(idTransformation,idStep,"partitionID",partitionID);    rep.saveStepAttribute(idTransformation,idStep,"segmentId",segmentId);    rep.saveStepAttribute(idTransformation,idStep,"taskNo",taskNo);  } catch (  Exception e) {    throw new KettleException(BaseMessages.getString(PKG,"TemplateStep.Exception.UnableToSaveStepInfoToRepository",new String[0]) + idStep,e);  }}  }
class C{  public static ArrayList<String> fileLines(String fin){  File file=new File(fin);  BufferedReader br;  FileReader fr;  ArrayList<String> lines=new ArrayList<String>();  try {    fr=new FileReader(file);    br=new BufferedReader(fr);    String line;    try {      while ((line=br.readLine()) != null) {        if (line.length() > 0) {          lines.add(line);        }      }    } catch (    IOException ex) {    }  } catch (  FileNotFoundException ex) {  }  return lines;}  }
class C{  public static TypeContainer createTypeContainer(IType baseType) throws JavaModelException {  boolean isSync=true;  IType pairedType=null;  if (RemoteServiceUtilities.isSyncInterface(baseType)) {    isSync=true;    pairedType=RemoteServiceUtilities.resolveAsyncType(baseType);  } else   if (RemoteServiceUtilities.isAsyncInterface(baseType)) {    isSync=false;    pairedType=RemoteServiceUtilities.resolveSyncType(baseType);  }  return (pairedType != null) ? new TypeContainer(baseType,isSync,pairedType) : null;}  }
class C{  public MathFunction(MetaFunction meta){  super(meta.size());  this.meta=meta;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public Response onCommand(SMTPSession session,Request request){  return NOT_SUPPORTED;}  }
class C{  public static Uri generatorUri(String fileUri,String scheme){  Uri uri=new Uri.Builder().scheme(scheme).path(fileUri).build();  return uri;}  }
class C{  int read() throws IOException {  return _is.read();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:54.342 -0500",hash_original_method="D42EEF06048E7D77F00EA781D2005D33",hash_generated_method="343763C1113C4F113A0A68A2E7C4805B") public String encodeBody(){  return Integer.toString(expires);}  }
class C{  @Override public <N extends SpatialComparable>List<List<N>> partition(List<N> spatialObjects,int minEntries,int maxEntries){  List<List<N>> partitions=new ArrayList<>();  List<N> objects=new ArrayList<>(spatialObjects);  while (!objects.isEmpty()) {    StringBuilder msg=new StringBuilder();    int splitAxis=chooseMaximalExtendedSplitAxis(objects);    int splitPoint=chooseBulkSplitPoint(objects.size(),minEntries,maxEntries);    if (LOG.isDebugging()) {      msg.append("\nsplitAxis ").append(splitAxis);      msg.append("\nsplitPoint ").append(splitPoint);    }    Collections.sort(objects,new SpatialSingleMinComparator(splitAxis));    List<N> partition1=new ArrayList<>();    for (int i=0; i < splitPoint; i++) {      N o=objects.remove(0);      partition1.add(o);    }    partitions.add(partition1);    if (LOG.isDebugging()) {      msg.append("\ncurrent partition ").append(partition1);      msg.append("\nremaining objects # ").append(objects.size());      LOG.debugFine(msg.toString());    }  }  if (LOG.isDebugging()) {    LOG.debugFine("partitions " + partitions);  }  return partitions;}  }
class C{  public boolean teardown(){  mTeardownRequested.set(true);  if (mBluetoothPan != null) {    for (    BluetoothDevice device : mBluetoothPan.getConnectedDevices()) {      mBluetoothPan.disconnect(device);    }  }  return true;}  }
class C{  public void unsetEpsilon(){  epsilon=0.0;}  }
class C{  protected void discoverInLock(String targetId){  DiscoveredSystemObject target=modelClient.findById(URI.create(targetId));  if (target == null) {    LOG.error("Could not find: " + targetId);    throw ComputeSystemControllerException.exceptions.targetNotFound(targetId);  }  ComputeSystemDiscoveryAdapter adapter=getDiscoveryAdapter(targetId);  if (adapter != null) {    if (LOG.isInfoEnabled()) {      LOG.info("Discovering target " + target.getLabel() + " ["+ targetId+ "]");    }    try {      adapter.discoverTarget(targetId);      if (LOG.isInfoEnabled()) {        LOG.info("Discovery completed for " + target.getLabel() + " ["+ targetId+ "]");      }    } catch (    CompatibilityException e) {      String errorMessage=adapter.getErrorMessage(e);      LOG.error("Device is incompatible: " + target.getLabel() + " ["+ targetId+ "]: "+ errorMessage);      adapter.discoveryFailure(target,DiscoveredDataObject.CompatibilityStatus.INCOMPATIBLE.name(),errorMessage);      throw e;    }catch (    RuntimeException e) {      String errorMessage=adapter.getErrorMessage(e);      LOG.error("Discovery failed for " + target.getLabel() + " ["+ targetId+ "]: "+ errorMessage,e);      adapter.discoveryFailure(target,DiscoveredDataObject.CompatibilityStatus.UNKNOWN.name(),errorMessage);      throw ComputeSystemControllerException.exceptions.discoverFailed(targetId,e);    }  } else {    LOG.warn("No discovery adapter for target " + target.getLabel() + " ["+ targetId+ "]");    target.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.UNKNOWN.name());    dbClient.persistObject(target);    throw ComputeSystemControllerException.exceptions.discoveryAdapterNotFound(target.getLabel(),targetId);  }}  }
class C{  public OMRangeRings(){}  }
class C{  private Workflow.Method rollbackMethodNullMethod(){  return new Workflow.Method("rollbackMethodNull");}  }
class C{  public synchronized void removeChannels(Set<String> channels){  removeChannelsFromHistory(channels);  removeChannelsFromFavorites(channels);}  }
class C{  public final void testNegateWithContextAndResourceIdParameters(){  assertNotNull(Validators.negate(getContext(),android.R.string.cancel,Validators.notEmpty("foo")));}  }
class C{  public void calculateSelection(){  m_noSelected=0;  BigDecimal selectedAmt=new BigDecimal(0.0);  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getModel().getValueAt(i,idColIndex);    if (id.isSelected()) {      BigDecimal amt=(BigDecimal)miniTable.getModel().getValueAt(i,amtColIndex);      if (amt != null)       selectedAmt=selectedAmt.add(amt);      m_noSelected++;    }  }  StringBuffer info=new StringBuffer();  info.append(m_noSelected).append(" ").append(Msg.getMsg(Env.getCtx(),"Selected")).append(" / ").append(miniTable.getRowCount());  differenceField.setText(m_format.format(selectedAmt));  dataStatus.setText(info.toString());  bGenerate.setEnabled(m_noSelected != 0 && Env.ZERO.compareTo(selectedAmt) == 0 && !isReconciled.isSelected());  bReset.setEnabled(m_noSelected > 0 && isReconciled.isSelected());}  }
class C{  public void saveSize(){  m_History.setProperty(WIDTH,"" + getSize().width);  m_History.setProperty(HEIGHT,"" + getSize().height);  saveHistory();}  }
class C{  synchronized static public void end(String name){  if (mFinalPrefix.get() != null) {    name=mFinalPrefix.get() + name;  }  final Pair<Long,String> key=new Pair<Long,String>(Thread.currentThread().getId(),name);  final Long lastTime=mInstance.mThreadMeasures.remove(key);  if (lastTime == null) {    mInstance.mEndsWithoutStarts.add(name);    return;  }  final Measure measure=getMeasures().get(name);  if (measure == null) {    return;  }  measure.close(System.currentTimeMillis() - lastTime);}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,int index,E defaultValue){  try {    Object val=this.opt(index);    if (JSONObject.NULL.equals(val)) {      return defaultValue;    }    if (clazz.isAssignableFrom(val.getClass())) {      @SuppressWarnings("unchecked") E myE=(E)val;      return myE;    }    return Enum.valueOf(clazz,val.toString());  } catch (  IllegalArgumentException|NullPointerException e) {    return defaultValue;  }}  }
class C{  public HttpDiscovery(NetworkParameters params,Details details){  this(params,details,new OkHttpClient());}  }
class C{  public static <T>T[] expand(T[] field,int newSize,boolean keepData){  if (field == null) {    throw new IllegalArgumentException("argument field must not be null");  }  if (field.length < newSize) {    Class<?> componentType=field.getClass().getComponentType();    @SuppressWarnings("unchecked") T[] newArray=(T[])Array.newInstance(componentType,newSize);    if (keepData) {      System.arraycopy(field,0,newArray,0,field.length);    }    return newArray;  }  return field;}  }
class C{  public void addObserver(NotificationObserver observer){  if (!observers.contains(observer)) {    observers.add(observer);  }}  }
class C{  public void testGetType(){  assertEquals("The type of X509CRL should be X.509",tbt_crl.getType(),"X.509");}  }
class C{  StyledString createTypeProposalLabel(CompletionProposal typeProposal){  char[] signature;  if (fContext != null && fContext.isInJavadoc())   signature=Signature.getTypeErasure(typeProposal.getSignature()); else   signature=typeProposal.getSignature();  char[] fullName=Signature.toCharArray(signature);  return createTypeProposalLabel(fullName,typeProposal.getFlags());}  }
class C{  public static WriteStreamOld openWrite(CharBuffer cb){  com.caucho.v5.vfs.VfsStringWriter s=new com.caucho.v5.vfs.VfsStringWriter(cb);  WriteStreamOld os=new WriteStreamOld(s);  try {    os.setEncoding("utf-8");  } catch (  Exception e) {  }  return os;}  }
class C{  protected void broadcastReadyState(boolean readyForCapture){  if (mReadyStateChangedListener != null) {    mReadyStateChangedListener.onReadyStateChanged(readyForCapture);  }}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  protected void appendQuotedString(String str){  appendQuotedString(str.getBytes());}  }
class C{  public SignerId(byte[] subjectKeyId){  this(null,null,subjectKeyId);}  }
class C{  public void unlockUnidadesDocumentales(String[] unidadDocumentalIDs) throws ActionNotAllowedException {  checkPermission(AppPermissions.BLOQUEO_DESBLOQUEO_UNIDADES_DOCUMENTALES);  iniciarTransaccion();  int nUdocs=unidadDocumentalIDs.length;  StringBuffer udocsUnlocked=new StringBuffer();  fondos.vos.UnidadDocumentalVO unidadDocumentalVO=null;  for (int i=0; i < nUdocs; i++) {    unidadDocumentalVO=_unidadDocumentalDBEntity.getUnidadDocumental(unidadDocumentalIDs[i]);    if (unidadDocumentalVO.getMarcasBloqueo() == 0) {      throw new RelacionOperacionNoPermitidaException(RelacionOperacionNoPermitidaException.XNO_ES_POSIBLE_DESBLOQUEAR_UDOC_DESBLOQUEADAS);    }    int marcas=MarcaUtil.setBitInactivoInMarca(MarcaUdocRelacionConstants.POSICION_BIT_MARCA_BLOQUEADA_TRANSFERENCIA_EA_EXPURGO,unidadDocumentalVO.getMarcasBloqueo());    _unidadDocumentalDBEntity.updateMarcaBloqueo(unidadDocumentalVO.getId(),marcas);    udocsUnlocked.append(unidadDocumentalVO.getNumExp()).append(":").append(unidadDocumentalVO.getTitulo()).append(" - ");  }  commit();}  }
class C{  protected boolean isTrafficClassChanged(){  return true;}  }
class C{  public TableModelEvent(TableModel source,int row){  this(source,row,row,ALL_COLUMNS,UPDATE);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Playlist p=(Playlist)stack.pop();  MediaFile[] burnFiles=p.getMediaFiles();  return Burner.getGlobalBurner().burnFilesToCD(burnFiles);}  }
class C{  void constantLock(){  Class thing=Thread.class;synchronized (Thread.class) {  }}  }
class C{  public JarFileLister(ZipFile zipFile,DependenciesListener builder,ClassFileReader reader,ProgressListener progress){  this.zipFile=zipFile;  this.builder=builder;  this.reader=reader;  this.progress=progress;}  }
class C{  public static Status empty(){  return NONE;}  }
class C{  void addRocLine(RocPoint point,RocFilter filter){  final SortedMap<Double,RocPoint> points=mRocs.get(filter);  if (points.containsKey(point.mThreshold)) {    points.get(point.mThreshold).add(point);  } else {    points.put(point.mThreshold,new RocPoint(point));  }}  }
class C{  public void testLoadLocations_HidesSpinner(){  mController.init();  mController.attachFragmentUi(mMockFragmentUi);  mFakeSyncManager.setSyncing(false);  LocationTree locationTree=FakeAppLocationTreeFactory.build();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  verify(mMockFragmentUi).setBusyLoading(false);}  }
class C{  void transfer(Entry[] newTable){  Entry[] src=table;  int newCapacity=newTable.length;  for (int j=0; j < src.length; j++) {    Entry e=src[j];    if (e != null) {      src[j]=null;      do {        Entry next=e.next;        int i=indexFor(e.hash,newCapacity);        e.next=newTable[i];        newTable[i]=e;        e=next;      } while (e != null);    }  }}  }
class C{  public static TimeSpan toTimespan(Object o,TimeSpan defaultValue){  try {    return toTimespan(o);  } catch (  PageException e) {    return defaultValue;  }}  }
class C{  public Comment createComment(String data){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public int size(){  return this.values.size();}  }
class C{  public static String rightPad(String str,int size,String delim){  size=(size - str.length()) / delim.length();  if (size > 0) {    str+=repeat(delim,size);  }  return str;}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SADD8");  translateAll(environment,instruction,"SADD8",instructions);}  }
class C{  public static int ceilLog(int a){  int log=0;  int i=1;  while (i < a) {    i<<=1;    log++;  }  return log;}  }
class C{  public void makePath(String path,byte[] data,CreateMode createMode,boolean retryOnConnLoss) throws KeeperException, InterruptedException {  makePath(path,data,createMode,null,retryOnConnLoss);}  }
class C{  public int toX(int v){  return v % N + 1;}  }
class C{  public NotificationChain basicSetStatement(Statement newStatement,NotificationChain msgs){  Statement oldStatement=statement;  statement=newStatement;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.LABELLED_STATEMENT__STATEMENT,oldStatement,newStatement);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Expression makeReference(Environment env,LocalMember target){  UplevelReference r=noteReference(env,target);  if (r != null) {    return r.makeLocalReference(env,this);  } else   if (idThis.equals(target.getName())) {    return new ThisExpression(0,target);  } else {    return new IdentifierExpression(0,target);  }}  }
class C{  public void deleteFile(File file){  int fileType;  if (file.isDirectory())   fileType=FOLDER; else   fileType=FILE;  AsyncDeleteTask task=new AsyncDeleteTask(getActivity(),this,file,fileType);  task.execute();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.FEATURE_PARAMETER__DEPRECATED:    setDeprecated((Boolean)newValue);  return;case SGenPackage.FEATURE_PARAMETER__COMMENT:setComment((String)newValue);return;case SGenPackage.FEATURE_PARAMETER__FEATURE_TYPE:setFeatureType((FeatureType)newValue);return;case SGenPackage.FEATURE_PARAMETER__OPTIONAL:setOptional((Boolean)newValue);return;case SGenPackage.FEATURE_PARAMETER__PARAMETER_TYPE:setParameterType((ParameterTypes)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void createActionableEvent(DbClient dbClient,EventUtils.EventCode eventCode,URI tenant,String name,String description,String warning,DataObject resource,Collection<URI> affectedResources,String approveMethod,Object[] approveParameters,String declineMethod,Object[] declineParameters){  ActionableEvent duplicateEvent=null;  if (ALLOWED_DUPLICATE_EVENTS.contains(eventCode)) {    duplicateEvent=getDuplicateEvent(dbClient,eventCode.getCode(),resource.getId(),affectedResources);  } else {    duplicateEvent=getDuplicateEvent(dbClient,eventCode.getCode(),resource.getId(),null);  }  if (duplicateEvent != null) {    log.info("Duplicate event " + duplicateEvent.getId() + " is already in a pending state for resource "+ resource.getId()+ ". Will not create a new event");    duplicateEvent.setCreationTime(Calendar.getInstance());    duplicateEvent.setDescription(description);    duplicateEvent.setWarning(warning);    duplicateEvent.setAffectedResources(getAffectedResources(affectedResources));    setEventMethods(duplicateEvent,approveMethod,approveParameters,declineMethod,declineParameters);    dbClient.updateObject(duplicateEvent);  } else {    ActionableEvent event=new ActionableEvent();    event.setEventCode(eventCode.getCode());    event.setId(URIUtil.createId(ActionableEvent.class));    event.setTenant(tenant);    event.setDescription(description);    event.setWarning(warning);    event.setEventStatus(ActionableEvent.Status.pending.name());    event.setResource(new NamedURI(resource.getId(),resource.getLabel()));    event.setAffectedResources(getAffectedResources(affectedResources));    setEventMethods(event,approveMethod,approveParameters,declineMethod,declineParameters);    event.setLabel(name);    dbClient.createObject(event);    log.info("Created Actionable Event: " + event.getId() + " Tenant: "+ event.getTenant()+ " Description: "+ event.getDescription()+ " Warning: "+ event.getWarning()+ " Event Status: "+ event.getEventStatus()+ " Resource: "+ event.getResource()+ " Event Code: "+ event.getEventCode()+ " Approve Method: "+ approveMethod+ " Decline Method: "+ declineMethod);  }}  }
class C{  @Override public boolean supportsCatalogsInTableDefinitions(){  debugCodeCall("supportsCatalogsInTableDefinitions");  return true;}  }
class C{  public boolean visit(ASTNode node){  return true;}  }
class C{  public void triangulate(PolygonSet ps){  _triangulations.clear();  _triangulations.addAll(ps.getPolygons());  start();}  }
class C{  public static IMethod findSimilarMethod(IMethod method,IType type) throws JavaModelException {  return findSimilarMethod(method,type.getMethods());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.041 -0500",hash_original_method="68812395544991B9645F8BA0B34BB709",hash_generated_method="D75FF2A976BD2B6C1FC29FDB97556890") public synchronized final Scheme unregister(String name){  if (name == null)   throw new IllegalArgumentException("Name must not be null.");  Scheme gone=registeredSchemes.remove(name);  return gone;}  }
class C{  public void sort(){  Map<String,PsiMethod> methods=getMethodsMap();  Map<String,PsiMethod> sortedMethods=null;  LifecycleFactory lifecycleFactory=new LifecycleFactory();  Lifecycle lifecycle=lifecycleFactory.createLifecycle(mPsiClass,methods);  if (lifecycle != null && !methods.isEmpty()) {    sortedMethods=lifecycle.sort();    appendSortedMethods(sortedMethods);    deleteUnsortedLifecycleMethods(sortedMethods.values());  }}  }
class C{  public Location linearLocation(double azimuthDegrees,double distanceRadians,Location result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","linearLocation","missingResult"));  }  if (distanceRadians == 0) {    result.latitude=this.latitude;    result.longitude=this.longitude;    return result;  }  double latRadians=Math.toRadians(this.latitude);  double lonRadians=Math.toRadians(this.longitude);  double azimuthRadians=Math.toRadians(azimuthDegrees);  double endLatRadians=latRadians + distanceRadians * Math.cos(azimuthRadians);  double endLonRadians;  if (Math.abs(endLatRadians) > Math.PI / 2) {    endLatRadians=endLatRadians > 0 ? Math.PI - endLatRadians : -Math.PI - endLatRadians;  }  endLonRadians=(lonRadians + distanceRadians * Math.sin(azimuthRadians) + Math.PI) % (2 * Math.PI) - Math.PI;  if (Double.isNaN(endLatRadians) || Double.isNaN(endLonRadians)) {    result.latitude=this.latitude;    result.longitude=this.longitude;  } else {    result.latitude=normalizeLatitude(Math.toDegrees(endLatRadians));    result.longitude=normalizeLongitude(Math.toDegrees(endLonRadians));  }  return result;}  }
class C{  private byte[] crypt_raw(byte password[],byte salt[],int log_rounds){  int cdata[]=(int[])bf_crypt_ciphertext.clone();  int clen=cdata.length;  byte ret[];  long rounds=roundsForLogRounds(log_rounds);  init_key();  ekskey(salt,password);  for (long i=0; i < rounds; i++) {    key(password);    key(salt);  }  for (int i=0; i < 64; i++) {    for (int j=0; j < (clen >> 1); j++) {      encipher(cdata,j << 1);    }  }  ret=new byte[clen * 4];  for (int i=0, j=0; i < clen; i++) {    ret[j++]=(byte)((cdata[i] >> 24) & 0xff);    ret[j++]=(byte)((cdata[i] >> 16) & 0xff);    ret[j++]=(byte)((cdata[i] >> 8) & 0xff);    ret[j++]=(byte)(cdata[i] & 0xff);  }  return ret;}  }
class C{  public TestDiscrete test(){  TestDiscrete results=new TestDiscrete();  results.addNull("O");  for (Token t=(Token)parser.next(); t != null; t=(Token)parser.next()) {    Vector<Token> vector=new Vector<>();    for (; t.next != null; t=(Token)parser.next())     vector.add(t);    vector.add(t);    int N=vector.size();    String[] predictions=new String[N], labels=new String[N];    for (int i=0; i < N; ++i) {      predictions[i]=classifier.discreteValue(vector.get(i));      labels[i]=labeler.discreteValue(vector.get(i));    }    for (int i=0; i < N; ++i) {      String p="O", l="O";      int pEnd=-1, lEnd=-1;      if (predictions[i].startsWith("B-") || predictions[i].startsWith("I-") && (i == 0 || !predictions[i - 1].endsWith(predictions[i].substring(2)))) {        p=predictions[i].substring(2);        pEnd=i;        while (pEnd + 1 < N && predictions[pEnd + 1].equals("I-" + p))         ++pEnd;      }      if (labels[i].startsWith("B-") || labels[i].startsWith("I-") && (i == 0 || !labels[i - 1].endsWith(labels[i].substring(2)))) {        l=labels[i].substring(2);        lEnd=i;        while (lEnd + 1 < N && labels[lEnd + 1].equals("I-" + l))         ++lEnd;      }      if (!p.equals("O") || !l.equals("O")) {        if (pEnd == lEnd)         results.reportPrediction(p,l); else {          if (!p.equals("O"))           results.reportPrediction(p,"O");          if (!l.equals("O"))           results.reportPrediction("O",l);        }      }    }  }  return results;}  }
class C{  public GridConcurrentWeakHashSet(Collection<E> c){  this(c.size());  addAll(c);}  }
class C{  @After public void tearDown(){  if (clearTempFiles) {    TestSupport.cleanAll();  }}  }
class C{  public synchronized void removeExecutionStageListener(ExecutionStageListener l){  if (m_ExecutionStageListeners == null)   m_ExecutionStageListeners=new HashSet<>();  m_ExecutionStageListeners.remove(l);}  }
class C{  @NoInline public static void writeHex(long value){  if (runningVM) {    sysCall.sysConsoleWriteLong(value,2);  } else {    writeHexNotRunningVM(value);  }}  }
class C{  public static boolean isValidFileNameCharacter(char c){  for (  char ch : FORBIDDEN_SYMBOLS_IN_FILE_NAME) {    if (ch == c) {      return false;    }  }  return true;}  }
class C{  public void plot(AbstractDrawer draw){  if (!visible)   return;  TeXFormula formula=new TeXFormula(label);  TeXIcon icon=formula.createTeXIcon(TeXConstants.STYLE_DISPLAY,size);  icon.setTeXIconColor(plotColor);  Graphics2D g2=draw.getGraphics();  g2.setColor(plotColor);  JLabel jl=new JLabel();  jl.setForeground(plotColor);  if (useLogical == false)   icon.paintIcon(jl,g2,coordx,coordy); else {    double[] logicalCoords={logicalx,logicaly};    int[] screenCoords=draw.project(logicalCoords[0],logicalCoords[1]);    icon.paintIcon(jl,g2,screenCoords[0],screenCoords[1]);  }}  }
class C{  public static int compute2(int x){  int loops=(x >>> 4) & 7;  while (loops-- > 0) {    x=(x * 2147483647) % 16807;  }  return x;}  }
class C{  public static int expectedSizeOfCategoricalDistribution(RandomVariable... vars){  return expectedSizeOfProbabilityTable(vars);}  }
class C{  public void onPartitionEvicted(int part){  for (  CacheContinuousQueryListener lsnr : lsnrs.values())   lsnr.onPartitionEvicted(part);  for (  CacheContinuousQueryListener lsnr : intLsnrs.values())   lsnr.onPartitionEvicted(part);}  }
class C{  public static int convertFromSimplelevel(int simpleTechLvl,boolean isClan){  int legalLevel;switch (simpleTechLvl) {case TechConstants.T_SIMPLE_INTRO:    legalLevel=TechConstants.T_INTRO_BOXSET;  break;case TechConstants.T_SIMPLE_STANDARD:if (isClan) {  legalLevel=TechConstants.T_CLAN_TW;} else {  legalLevel=TechConstants.T_IS_TW_NON_BOX;}break;case TechConstants.T_SIMPLE_ADVANCED:if (isClan) {legalLevel=TechConstants.T_CLAN_ADVANCED;} else {legalLevel=TechConstants.T_IS_ADVANCED;}break;case TechConstants.T_SIMPLE_EXPERIMENTAL:if (isClan) {legalLevel=TechConstants.T_CLAN_EXPERIMENTAL;} else {legalLevel=TechConstants.T_IS_EXPERIMENTAL;}break;case TechConstants.T_SIMPLE_UNOFFICIAL:if (isClan) {legalLevel=TechConstants.T_CLAN_UNOFFICIAL;} else {legalLevel=TechConstants.T_IS_UNOFFICIAL;}break;default :legalLevel=TechConstants.T_INTRO_BOXSET;}return legalLevel;}  }
class C{  public AffineTransformOp(AffineTransform xform,int interpolationType){  validateTransform(xform);  this.xform=(AffineTransform)xform.clone();switch (interpolationType) {case TYPE_NEAREST_NEIGHBOR:case TYPE_BILINEAR:case TYPE_BICUBIC:    break;default :  throw new IllegalArgumentException("Unknown interpolation type: " + interpolationType);}this.interpolationType=interpolationType;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SF_SWITCH_NO_DEFAULT",justification="covers all possible values") static void appendClockMessage(MrcMessage m,StringBuilder txt){  int clockModeBits=m.getElement(2) & 0xC0;switch (clockModeBits) {case 0x00:    txt.append((m.getElement(2) & 0x1F) + Bundle.getMessage("MrcPacketsClockTimeSep") + twoDigits.format(m.getElement(4))+ Bundle.getMessage("MrcPacketsClockModeAm"));  break;case 0x40:txt.append((m.getElement(2) & 0x1F) + Bundle.getMessage("MrcPacketsClockTimeSep") + twoDigits.format(m.getElement(4))+ Bundle.getMessage("MrcPacketsClockModePm"));break;case 0x80:txt.append(twoDigits.format(m.getElement(2) & 0x1F) + Bundle.getMessage("MrcPacketsClockTimeSep") + twoDigits.format(m.getElement(4))+ Bundle.getMessage("MrcPacketsClockMode24"));break;case 0xC0:txt.append(twoDigits.format(m.getElement(2) & 0x1F) + Bundle.getMessage("MrcPacketsClockTimeSep") + twoDigits.format(m.getElement(4))+ Bundle.getMessage("MrcPacketsClockModeUnk"));break;}}  }
class C{  public JobCpeBuilder(String name,File yamlFile) throws BaleenException {  super(name,yamlFile);}  }
class C{  private void writeTasks(CSVPrinter writer) throws IOException {  writeTaskHeaders(writer);  Map<String,BooleanOption> options=csvOptions.getTaskOptions();  List<CustomPropertyDefinition> customFields=myProject.getTaskCustomColumnManager().getDefinitions();  for (  Task task : myProject.getTaskManager().getTasks()) {    for (    Map.Entry<String,BooleanOption> entry : csvOptions.getTaskOptions().entrySet()) {      if (!entry.getValue().isChecked()) {        continue;      }      TaskDefaultColumn defaultColumn=TaskDefaultColumn.find(entry.getKey());      if (defaultColumn == null) {        if ("webLink".equals(entry.getKey())) {          writer.print(getWebLink((GanttTask)task));          continue;        }        if ("notes".equals(entry.getKey())) {          writer.print(task.getNotes());          continue;        }      } else {switch (defaultColumn) {case ID:          writer.print(String.valueOf(task.getTaskID()));        break;case NAME:      writer.print(getName(task));    break;case BEGIN_DATE:  writer.print(task.getStart().toString());break;case END_DATE:writer.print(task.getDisplayEnd().toString());break;case DURATION:writer.print(String.valueOf(task.getDuration().getLength()));break;case COMPLETION:writer.print(String.valueOf(task.getCompletionPercentage()));break;case OUTLINE_NUMBER:List<Integer> outlinePath=task.getManager().getTaskHierarchy().getOutlinePath(task);writer.print(Joiner.on('.').join(outlinePath));break;case COORDINATOR:ResourceAssignment coordinator=Iterables.tryFind(Arrays.asList(task.getAssignments()),COORDINATOR_PREDICATE).orNull();writer.print(coordinator == null ? "" : coordinator.getResource().getName());break;case PREDECESSORS:writer.print(TaskProperties.formatPredecessors(task,";",true));break;case RESOURCES:writer.print(getAssignments(task));break;case COST:writer.print(task.getCost().getValue().toPlainString());break;case INFO:case PRIORITY:case TYPE:break;}}}CustomColumnsValues customValues=task.getCustomValues();for (int j=0; j < customFields.size(); j++) {Object nextCustomFieldValue=customValues.getValue(customFields.get(j));writer.print(nextCustomFieldValue == null ? "" : String.valueOf(nextCustomFieldValue));}writer.println();}}  }
class C{  @Override public void endWindow(){  if (!mergedTuple.isEmpty()) {    mergedport.emit(mergedTuple);    mergedTuple=new HashMap<K,Integer>();  }}  }
class C{  public static void printState(TLCState currentState,TLCState lastState,int num){  String stateString;  if (lastState != null && TLCGlobals.printDiffsOnly) {    stateString=currentState.toString(lastState);  } else {    stateString=currentState.toString();  }  MP.printState(EC.TLC_STATE_PRINT1,new String[]{String.valueOf(num),stateString},currentState,num);}  }
class C{  protected void startClient(int port){  t=new Thread(new SSClient(port),"SSClient");  t.start();  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {    System.out.println("Exception during startClinet()" + e.toString());  }}  }
class C{  private void handleClosedMembers(HashMap<InternalDistributedMember,RegionCommitList> msgMap){  for (  InternalDistributedMember member : getCacheClosedMembers()) {    RegionCommitList rcl=msgMap.get(member);    for (    RegionCommit region : rcl) {      markMemberOffline(member,region);    }  }}  }
class C{  private void configureClassReInitializer(){  ExecutionTrace execTrace=ExecutionTracer.getExecutionTracer().getTrace();  final List<String> initializedClasses=execTrace.getInitializedClasses();  ClassReInitializer.getInstance().addInitializedClasses(initializedClasses);  final boolean reset_all_classes=Properties.RESET_ALL_CLASSES_DURING_TEST_GENERATION;  ClassReInitializer.getInstance().setReInitializeAllClasses(reset_all_classes);}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + mean+ ")";}  }
class C{  public static void logError(ILog log,String message,Object... args){  logError(log,null,message,args);}  }
class C{  public MemcacheClientBuilder<V> withSRVRecord(final String srvRecord){  this.srvRecord=checkNotNull(srvRecord);  return this;}  }
class C{  @Override public boolean onClear(){  for (  Set<ObjectChangeListener> listenerset : map.values()) {    for (    ObjectChangeListener listener : listenerset) {      listener.deleted();    }  }  map.clear();  return false;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.078 -0500",hash_original_method="3B1E2223EF9E382987FDA8605560E6C8",hash_generated_method="D66AB9153BDBC7F8146A05E91D86891E") public boolean drawEdgeGlows(Canvas canvas){  final int scrollX=mHostView.getScrollX();  final int scrollY=mHostView.getScrollY();  final int width=mHostView.getWidth();  int height=mHostView.getHeight();  boolean invalidateForGlow=false;  if (!mEdgeGlowTop.isFinished()) {    final int restoreCount=canvas.save();    canvas.translate(scrollX,mHostView.getVisibleTitleHeight() + Math.min(0,scrollY));    mEdgeGlowTop.setSize(width,height);    invalidateForGlow|=mEdgeGlowTop.draw(canvas);    canvas.restoreToCount(restoreCount);  }  if (!mEdgeGlowBottom.isFinished()) {    final int restoreCount=canvas.save();    canvas.translate(-width + scrollX,Math.max(mHostView.computeMaxScrollY(),scrollY) + height);    canvas.rotate(180,width,0);    mEdgeGlowBottom.setSize(width,height);    invalidateForGlow|=mEdgeGlowBottom.draw(canvas);    canvas.restoreToCount(restoreCount);  }  if (!mEdgeGlowLeft.isFinished()) {    final int restoreCount=canvas.save();    canvas.rotate(270);    canvas.translate(-height - scrollY,Math.min(0,scrollX));    mEdgeGlowLeft.setSize(height,width);    invalidateForGlow|=mEdgeGlowLeft.draw(canvas);    canvas.restoreToCount(restoreCount);  }  if (!mEdgeGlowRight.isFinished()) {    final int restoreCount=canvas.save();    canvas.rotate(90);    canvas.translate(scrollY,-(Math.max(mHostView.computeMaxScrollX(),scrollX) + width));    mEdgeGlowRight.setSize(height,width);    invalidateForGlow|=mEdgeGlowRight.draw(canvas);    canvas.restoreToCount(restoreCount);  }  return invalidateForGlow;}  }
class C{  private void createTunnel() throws IOException, InterruptedException {  while (true) {    MockResponse connect=responseQueue.peek();    if (!processOneRequest(raw.getInputStream(),raw.getOutputStream(),raw)) {      throw new IllegalStateException("Tunnel without any CONNECT!");    }    if (connect.getSocketPolicy() == SocketPolicy.UPGRADE_TO_SSL_AT_END) {      return;    }  }}  }
class C{  public boolean deleteBook(Book book){  int row=mBookshelfManager.deleteById(book);  if (row != -1) {    boolean deleted=mBookFileManager.deleteBookFile(book.getTitle());    if (deleted) {      mBookmarkManager.deleteByBookId(book);      return true;    }  }  return false;}  }
class C{  public byte[] toByteArray(){  try {    ByteArrayOutputStream array=new ByteArrayOutputStream();    DataOutputStream out=new DataOutputStream(array);    out.writeShort(width);    out.writeShort(height);    out.writeByte(palette.length);    int plen=palette.length;    for (int iter=0; iter < plen; iter++) {      out.writeInt(palette[iter]);    }    out.write(imageDataByte);    out.close();    return array.toByteArray();  } catch (  IOException ex) {    ex.printStackTrace();    return null;  }}  }
class C{  private static void compressLongestRunOfZeroes(int[] hextets){  int bestRunStart=-1;  int bestRunLength=-1;  int runStart=-1;  for (int i=0; i < hextets.length + 1; i++) {    if (i < hextets.length && hextets[i] == 0) {      if (runStart < 0) {        runStart=i;      }    } else     if (runStart >= 0) {      int runLength=i - runStart;      if (runLength > bestRunLength) {        bestRunStart=runStart;        bestRunLength=runLength;      }      runStart=-1;    }  }  if (bestRunLength >= 2) {    Arrays.fill(hextets,bestRunStart,bestRunStart + bestRunLength,-1);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:10.480 -0500",hash_original_method="C478053468A8ECCA4C801EC7C4CA3211",hash_generated_method="AC4E2B54F11003706D3423743D1E5DA8") public static Metrics isBoring(CharSequence text,TextPaint paint,TextDirectionHeuristic textDir,Metrics metrics){  char[] temp=TextUtils.obtain(500);  int length=text.length();  boolean boring=true;  outer:   for (int i=0; i < length; i+=500) {    int j=i + 500;    if (j > length)     j=length;    TextUtils.getChars(text,i,j,temp,0);    int n=j - i;    for (int a=0; a < n; a++) {      char c=temp[a];      if (c == '\n' || c == '\t' || c >= FIRST_RIGHT_TO_LEFT) {        boring=false;        break outer;      }    }    if (textDir != null && textDir.isRtl(temp,0,n)) {      boring=false;      break outer;    }  }  TextUtils.recycle(temp);  if (boring && text instanceof Spanned) {    Spanned sp=(Spanned)text;    Object[] styles=sp.getSpans(0,length,ParagraphStyle.class);    if (styles.length > 0) {      boring=false;    }  }  if (boring) {    Metrics fm=metrics;    if (fm == null) {      fm=new Metrics();    }    TextLine line=TextLine.obtain();    line.set(paint,text,0,length,Layout.DIR_LEFT_TO_RIGHT,Layout.DIRS_ALL_LEFT_TO_RIGHT,false,null);    fm.width=(int)FloatMath.ceil(line.metrics(fm));    TextLine.recycle(line);    return fm;  } else {    return null;  }}  }
class C{  public void finished(int tenantclass,Operation op,long latency){  finished(op,tenantclass,0,latency);}  }
class C{  public void write(byte[] bytes) throws IOException {  flushBits();  if (bytes != null && bytes.length > 0) {    out.write(bytes);    bytesWritten+=bytes.length;  }}  }
class C{  public TextLayout nextLayout(float wrappingWidth,int offsetLimit,boolean requireNextWord){  if (pos < limit) {    int layoutLimit=nextOffset(wrappingWidth,offsetLimit,requireNextWord);    if (layoutLimit == pos) {      return null;    }    TextLayout result=measurer.getLayout(pos,layoutLimit);    pos=layoutLimit;    return result;  } else {    return null;  }}  }
class C{  public void update(byte[] m,int off,int length){  if (hashAlg == null) {    throw new IllegalStateException("Call initSign or initVerify first!");  }  hashAlg.update(m,off,length);}  }
class C{  @Interruptible public static void initForTool(String classpath){  if (VM.VerifyAssertions)   VM._assert(!VM.runningVM);  if (VM.VerifyAssertions)   VM._assert(!VM.writingBootImage);  runningTool=true;  init(classpath,null);}  }
class C{  public RoundedToolItem(final RoundedToolbar parent){  this(parent,SWT.NONE);}  }
class C{  public static FixedBordersDiscretizer create(double[] samples,int size){  TDoubleArrayList borders;  double min=Double.MAX_VALUE;  double max=-Double.MAX_VALUE;  TDoubleIntHashMap hist=new TDoubleIntHashMap(samples.length);  for (int i=0; i < samples.length; i++) {    hist.adjustOrPutValue(samples[i],1,1);    min=Math.min(min,samples[i]);    max=Math.max(max,samples[i]);  }  double keys[]=hist.keys();  Arrays.sort(keys);  borders=new TDoubleArrayList(keys.length);  borders.add(min - 1E-10);  int binsize=0;  int n=0;  for (int i=0; i < keys.length; i++) {    int nBin=hist.get(keys[i]);    binsize+=nBin;    n+=nBin;    if (binsize >= size && i > 0) {      if (samples.length - n >= binsize) {        borders.add(keys[i]);        binsize=0;      }    }  }  if (binsize > 0)   borders.add(max);  return new FixedBordersDiscretizer(borders.toArray());}  }
class C{  private static String convertToken(final String token,final String arg1){  if (!StringUtils.isNumber(arg1)) {    return "";  }  final double value=Double.parseDouble(arg1);  int decimalPoints=-1, minWidth=0;  char decimal='.';  boolean padd=false, floatDecimal=false;  final StringBuilder sValue=new StringBuilder();  final StringBuilder returnString=new StringBuilder();  final char[] tokArray=token.toCharArray();  if (tokArray[0] == '%') {    int i=1;    final int size=tokArray.length;    loop:     while (i < size) {switch (tokArray[i]) {case ',':switch (tokArray[++i]) {case '0':          decimal='.';        break;case '1':      decimal='.';    break;case '2':  decimal=',';break;case '3':decimal=',';break;}break;case '+':if (value > 0) {returnString.append('+');} else {returnString.append('-');}break;case ' ':if (value > 0) {returnString.append(' ');} else {returnString.append('-');}break;case '0':padd=true;break;case '#':floatDecimal=true;break;case '.':decimalPoints=Integer.parseInt(String.valueOf(tokArray[++i]));break;case 'd':sValue.append((int)value);if (padd) {final int stringlen=returnString.length() + sValue.length();if (stringlen < minWidth) {for (int p=0; p < minWidth - stringlen; p++) {returnString.append('0');}}}returnString.append(sValue);break loop;case 'f':if (decimalPoints != -1) {if (decimalPoints == 0) {sValue.append((int)value);} else {final NumberFormat nf=NumberFormat.getInstance();nf.setMinimumFractionDigits(decimalPoints);nf.setMaximumFractionDigits(decimalPoints);sValue.append(nf.format(value));}} else {sValue.append((float)value);}if (floatDecimal && sValue.indexOf(".") != -1) {sValue.append('.');}if (padd) {final int stringlen=returnString.length() + sValue.length();if (stringlen < minWidth) {for (int p=0; p < minWidth - stringlen; p++) {returnString.append('0');}}}String ssVal=sValue.toString();ssVal=ssVal.replace('.',decimal);returnString.append(ssVal);break loop;case 's':sValue.append(value);if (padd) {final int stringlen=returnString.length() + sValue.length();if (stringlen < minWidth) {for (int p=0; p < minWidth - stringlen; p++) {returnString.append('0');}}}returnString.append(sValue);break loop;case 'x':final int valI=(int)(value);final String retValS=Integer.toHexString(valI);sValue.append(retValS);if (padd) {final int stringlen=returnString.length() + sValue.length();if (stringlen < minWidth) {for (int p=0; p < minWidth - stringlen; p++) {returnString.append('0');}}}returnString.append(sValue);break loop;default :minWidth=NumberUtils.parseInt(0,1,new byte[]{(byte)tokArray[i]});break;}i++;}}return returnString.toString();}  }
class C{  private List<InstrumentHeader> populateInstrumentHeaderForChequeDD(final List<InstrumentHeader> instrumentHeaderList,final List<InstrumentHeader> instrumentProxyList){  for (  final InstrumentHeader instrumentHeader : instrumentProxyList) {    if (getInstrumentType().equals(CollectionConstants.INSTRUMENTTYPE_CHEQUE))     instrumentHeader.setInstrumentType(financialsUtil.getInstrumentTypeByType(CollectionConstants.INSTRUMENTTYPE_CHEQUE)); else     if (getInstrumentType().equals(CollectionConstants.INSTRUMENTTYPE_DD))     instrumentHeader.setInstrumentType(financialsUtil.getInstrumentTypeByType(CollectionConstants.INSTRUMENTTYPE_DD));    if (instrumentHeader.getBankId() != null && instrumentHeader.getBankId().getId() == null) {      addActionError("Bank is not exist");      throw new ApplicationRuntimeException("Bank is not exist");    } else     if (instrumentHeader.getBankId() != null && instrumentHeader.getBankId().getId() != null)     instrumentHeader.setBankId((Bank)bankDAO.findById(Integer.valueOf(instrumentHeader.getBankId().getId()),false));    chequeInstrumenttotal=chequeInstrumenttotal.add(instrumentHeader.getInstrumentAmount());    instrumentHeader.setIsPayCheque(CollectionConstants.ZERO_INT);    instrumentHeaderList.add(instrumentHeader);  }  return instrumentHeaderList;}  }
class C{  private static boolean show(View view,CharSequence text){  if (TextUtils.isEmpty(text)) {    return false;  }  final int[] screenPos=new int[2];  final Rect displayFrame=new Rect();  view.getLocationOnScreen(screenPos);  view.getWindowVisibleDisplayFrame(displayFrame);  final Context context=view.getContext();  final int viewWidth=view.getWidth();  final int viewHeight=view.getHeight();  final int viewCenterX=screenPos[0] + viewWidth / 2;  final int screenWidth=context.getResources().getDisplayMetrics().widthPixels;  final int estimatedToastHeight=(int)(ESTIMATED_TOAST_HEIGHT_DIPS * context.getResources().getDisplayMetrics().density);  Toast cheatSheet=Toast.makeText(context,text,Toast.LENGTH_SHORT);  boolean showBelow=screenPos[1] < estimatedToastHeight;  if (showBelow) {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top + viewHeight);  } else {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top - estimatedToastHeight);  }  cheatSheet.show();  return true;}  }
class C{  private List<E> createBulkDirectoryNodes(List<E> nodes){  int minEntries=dirMinimum;  int maxEntries=dirCapacity - 1;  ArrayList<E> result=new ArrayList<>();  List<List<E>> partitions=settings.bulkSplitter.partition(nodes,minEntries,maxEntries);  for (  List<E> partition : partitions) {    N dirNode=createNewDirectoryNode();    for (    E o : partition) {      dirNode.addDirectoryEntry(o);    }    writeNode(dirNode);    result.add(createNewDirectoryEntry(dirNode));    if (getLogger().isDebuggingFiner()) {      getLogger().debugFiner("Directory page no: " + dirNode.getPageID());    }  }  return result;}  }
class C{  public void preventHandlingCurrentSelectionModification(){  mShouldHandleSelectionModification=false;}  }
class C{  TransactionInput(NetworkParameters params,Transaction parentTransaction,TransactionOutput output){  super(params);  long outputIndex=output.getIndex();  outpoint=new TransactionOutPoint(params,outputIndex,output.parentTransaction);  scriptBytes=EMPTY_ARRAY;  sequence=NO_SEQUENCE;  this.parentTransaction=parentTransaction;  length=41;}  }
class C{  private boolean isChildOfCheck(final String bestSuperFamModelId,final String parentFamModelId){  if (bestSuperFamModelId != null && parentFamModelId != null) {    if (bestSuperFamModelId.equals(parentFamModelId)) {      return true;    }  }  return false;}  }
class C{  public static double nextUp(double d){  if (d == Double.POSITIVE_INFINITY)   return d; else {    d+=0.0d;    return Double.longBitsToDouble(Double.doubleToRawLongBits(d) + ((d >= 0.0d) ? +1L : -1L));  }}  }
class C{  public static boolean isPermissionGranted(final Context context,final String permission){  return ContextCompat.checkSelfPermission(context,permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  private static void checkValidJavaIdentifier(String identifier,boolean split,String msg,String type) throws IllegalStateException {  if (identifier.isEmpty())   throw new IllegalStateException(msg + " could not be empty!");  String[] parts=split ? identifier.split("\\.") : new String[]{identifier};  if (parts.length == 0)   throw new IllegalStateException(msg + " could not has empty parts!");  for (  String part : parts) {    if (part.isEmpty())     throw new IllegalStateException(msg + " could not has empty parts!");    if (JAVA_KEYWORDS.contains(part))     throw new IllegalStateException(msg + " could not contains reserved keyword:" + " [type = "+ type+ ", identifier="+ identifier+ ", keyword="+ part+ "]");    if (!VALID_JAVA_IDENTIFIER.matcher(part).matches())     throw new IllegalStateException("Invalid " + msg.toLowerCase() + " name: "+ " [type = "+ type+ ", identifier="+ identifier+ ", illegal part="+ part+ "]");  }}  }
class C{  public UseCaseCall onSuccess(OnSuccessCallback onSuccessCallback){  if (onSuccessCallback == null) {    throw new IllegalArgumentException("OnSuccessCallback is null. You can not invoke it with" + " null callback.");  }  this.onSuccessCallback=onSuccessCallback;  return this;}  }
class C{  private void handleOnNext(Flow.Subscriber<? super T> s,Throwable ex){  BiConsumer<? super Flow.Subscriber<? super T>,? super Throwable> h;  if ((h=onNextHandler) != null) {    try {      h.accept(s,ex);    } catch (    Throwable ignore) {    }  }  onError(ex);}  }
class C{  public int next(){  int node=_currentNode;  _currentNode=m_traverser.next(_startNode,_currentNode);  return returnNode(node);}  }
class C{  public static void main(String[] args) throws IOException {  final String prefix="src/test/junit/framework/";  final int expected=30996;  OutputStream os=new BufferedOutputStream(new FileOutputStream(prefix + "test-entity-2.bin",false));  Random r=new Random();  for (int i=0; i < expected; i++) {    byte b=(byte)r.nextInt(255);    os.write(b);  }  os.flush();  os.close();}  }
class C{  public Agent(){}  }
class C{  private void checkConfigurationMatchesResource(String configuration,Resource resource){  String pathToResource="//" + NS_PREFIX + "resource["+ NS_PREFIX+ "jndi-name='"+ resource.getName()+ "']";  try {    if (resource.getClassName() != null) {      XMLAssert.assertXpathEvaluatesTo(resource.getClassName(),pathToResource + "/" + NS_PREFIX+ "type",configuration);    } else {      XMLAssert.assertXpathEvaluatesTo(resource.getType(),pathToResource + "/" + NS_PREFIX+ "type",configuration);    }    for (    String propertyName : resource.getParameters().keySet()) {      XMLAssert.assertXpathEvaluatesTo(resource.getParameter(propertyName).toString(),pathToResource + "/" + NS_PREFIX+ "init/@"+ propertyName,configuration);    }  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public LeatherArmorMetaBuilder start(final LeatherArmorMeta meta){  return new LeatherArmorMetaBuilder(meta);}  }
class C{  public void test_initializeLjava_security_spec_AlgorithmParameterSpecLjava_security_SecureRandom() throws Exception {  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance("DSA");  keyPairGenerator.initialize(1024);  DSAPublicKey key=(DSAPublicKey)keyPairGenerator.genKeyPair().getPublic();  DSAParams params=key.getParams();  KeyPairGenerator keyPair=KeyPairGenerator.getInstance("DSA");  keyPair.initialize(new DSAParameterSpec(params.getP(),params.getQ(),params.getG()),new SecureRandom());}  }
class C{  @Override public int weight(){  return term.weight() + 1;}  }
class C{  private synchronized void resumeTrackDataHub(){  trackDataHub=((TrackDetailActivity)getActivity()).getTrackDataHub();  trackDataHub.registerTrackDataListener(this,EnumSet.of(TrackDataType.TRACKS_TABLE,TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE,TrackDataType.SAMPLED_OUT_TRACK_POINTS_TABLE,TrackDataType.PREFERENCE));}  }
class C{  public void addWeapon(Mounted w){  weapons.add(w);  fireIntervalAdded(this,weapons.size() - 1,weapons.size() - 1);}  }
class C{  public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {  JSONArray ja=new JSONArray();  for (; ; ) {    String value=getValue(x);    char c=x.next();    if (value == null || (ja.length() == 0 && value.length() == 0 && c != ',')) {      return null;    }    ja.put(value);    for (; ; ) {      if (c == ',') {        break;      }      if (c != ' ') {        if (c == '\n' || c == '\r' || c == 0) {          return ja;        }        throw x.syntaxError("Bad character '" + c + "' ("+ (int)c+ ").");      }      c=x.next();    }  }}  }
class C{  public float dot(Vector2f vec){  if (null == vec) {    logger.warning("Provided vector is null, 0 returned.");    return 0;  }  return x * vec.x + y * vec.y;}  }
class C{  public static void runFilter(Filter filter,String[] options){  try {    if (Utils.getFlag('b',options)) {      Filter.batchFilterFile(filter,options);    } else {      Filter.filterFile(filter,options);    }  } catch (  Exception e) {    if ((e.toString().indexOf("Help requested") == -1) && (e.toString().indexOf("Filter options") == -1)) {      e.printStackTrace();    } else {      System.err.println(e.getMessage());    }  }}  }
class C{  public static short[] toShortArray(byte[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(short)array[i];  }  return result;}  }
class C{  public DefaultDrawingSupplier(Paint[] paintSequence,Paint[] fillPaintSequence,Paint[] outlinePaintSequence,Stroke[] strokeSequence,Stroke[] outlineStrokeSequence,Shape[] shapeSequence){  this.paintSequence=paintSequence;  this.fillPaintSequence=fillPaintSequence;  this.outlinePaintSequence=outlinePaintSequence;  this.strokeSequence=strokeSequence;  this.outlineStrokeSequence=outlineStrokeSequence;  this.shapeSequence=shapeSequence;}  }
class C{  public T proxy(String host,int port){  proxy=new HttpHost(host,port);  return self();}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  private void injectViews(View view){  ButterKnife.inject(this,view);}  }
class C{  @Override public void updateBinaryStream(String columnLabel,InputStream x,int length) throws SQLException {  updateBinaryStream(columnLabel,x,(long)length);}  }
class C{  public StrBuilder insert(final int index,final Object obj){  if (obj == null) {    return insert(index,nullText);  }  return insert(index,obj.toString());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.498 -0500",hash_original_method="568E659DC654AF7F82B3FE327FE2A97B",hash_generated_method="F153B60BE1575A843B5EC2EC8D1A33BE") public static String toString(int state){switch (state) {case READY_TO_CALL:    return "READY_TO_CALL";case REGISTERING:  return "REGISTERING";case DEREGISTERING:return "DEREGISTERING";case INCOMING_CALL:return "INCOMING_CALL";case INCOMING_CALL_ANSWERING:return "INCOMING_CALL_ANSWERING";case OUTGOING_CALL:return "OUTGOING_CALL";case OUTGOING_CALL_RING_BACK:return "OUTGOING_CALL_RING_BACK";case OUTGOING_CALL_CANCELING:return "OUTGOING_CALL_CANCELING";case IN_CALL:return "IN_CALL";case PINGING:return "PINGING";default :return "NOT_DEFINED";}}  }
class C{  public UTFDataFormatException(){}  }
class C{  public Tree<String> extractBestParse(int goal,int start,int end,List<String> sentence){  grammar.logarithmMode();  lexicon.logarithmMode();  double bestScore=iScore[start][end][goal];  String goalStr=(String)tagNumberer.object(goal);  if (end - start == 1) {    if (!grammar.isGrammarTag[goal]) {      List<Tree<String>> child=new ArrayList<Tree<String>>();      child.add(new Tree<String>(sentence.get(start)));      return new Tree<String>(goalStr,child);    } else {      double veryBestScore=Double.NEGATIVE_INFINITY;      int newIndex=-1;      UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(goal);      for (int r=0; r < unaries.length; r++) {        UnaryRule ur=unaries[r];        double ruleScore=iScore[start][end][ur.childState] + grammar.getUnaryScore(ur)[0][0];        if ((ruleScore > veryBestScore) && (goal != ur.childState) && (!grammar.isGrammarTag[ur.getChildState()])) {          veryBestScore=ruleScore;          newIndex=ur.childState;        }      }      List<Tree<String>> child1=new ArrayList<Tree<String>>();      child1.add(new Tree<String>(sentence.get(start)));      String goalStr1=(String)tagNumberer.object(newIndex);      List<Tree<String>> child=new ArrayList<Tree<String>>();      child.add(new Tree<String>(goalStr1,child1));      return new Tree<String>(goalStr,child);    }  }  for (int split=start + 1; split < end; split++) {    BinaryRule[] parentRules=grammar.splitRulesWithP(goal);    for (int i=0; i < parentRules.length; i++) {      BinaryRule br=parentRules[i];      double score=br.getScore(0,0,0) + iScore[start][split][br.leftChildState] + iScore[split][end][br.rightChildState];      if (matches(score,bestScore)) {        Tree<String> leftChildTree=extractBestParse(br.leftChildState,start,split,sentence);        Tree<String> rightChildTree=extractBestParse(br.rightChildState,split,end,sentence);        List<Tree<String>> children=new ArrayList<Tree<String>>();        children.add(leftChildTree);        children.add(rightChildTree);        Tree<String> result=new Tree<String>(goalStr,children);        return result;      }    }  }  UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(goal);  for (int r=0; r < unaries.length; r++) {    UnaryRule ur=unaries[r];    double score=ur.getScore(0,0) + iScore[start][end][ur.childState];    if (ur.childState != ur.parentState && matches(score,bestScore)) {      Tree<String> childTree=extractBestParse(ur.childState,start,end,sentence);      List<Tree<String>> children=new ArrayList<Tree<String>>();      children.add(childTree);      Tree<String> result=new Tree<String>(goalStr,children);      return result;    }  }  System.err.println("Warning: no parse found");  return null;}  }
class C{  public static boolean isRightTurn(Point p1,Point p2,Point p3){  if (p1.equals(p2) || p2.equals(p3)) {    return false;  }  double val=(p2.x * p3.y + p1.x * p2.y + p3.x * p1.y) - (p2.x * p1.y + p3.x * p2.y + p1.x * p3.y);  return val > 0;}  }
class C{  public SamFilterParamsBuilder requireUnsetFlags(final int flags){  mRequireUnsetFlags=flags;  return this;}  }
class C{  protected Locale parseLocale(String language,String country,String variant){  if (language == null && country == null && variant == null) {    return Locale.ROOT;  } else   if (language != null && country == null && variant != null) {    throw new IllegalArgumentException("To specify variant, country is required");  } else   if (language != null && country != null && variant != null) {    return new Locale(language,country,variant);  } else   if (language != null && country != null) {    return new Locale(language,country);  } else {    return new Locale(language);  }}  }
class C{  private void replacePlaceholders(){  Properties result=new Properties();  for (  Object keyValue : props.keySet()) {    String key=(String)keyValue;    String value=props.getProperty(key);    Pattern pattern=Pattern.compile("[$]\\{[\\w.]+\\}");    Matcher matcher=pattern.matcher(value);    if (matcher.find()) {      String match=matcher.toMatchResult().group();      match=match.substring(2);      match=match.substring(0,match.length() - 1);      if (match.startsWith("env.")) {        String envValue=System.getenv(match.substring(4));        if (envValue != null) {          value=matcher.replaceAll(envValue);        }      }    }    result.setProperty(key,value);  }  props=result;}  }
class C{  public Device(Device device,Entity newEntity,int insertionpoint){  this.deviceManager=device.deviceManager;  this.deviceKey=device.deviceKey;  this.dhcpClientName=device.dhcpClientName;  this.entities=new Entity[device.entities.length + 1];  if (insertionpoint < 0) {    insertionpoint=-(Arrays.binarySearch(device.entities,newEntity) + 1);  }  if (insertionpoint > 0) {    System.arraycopy(device.entities,0,this.entities,0,insertionpoint);  }  if (insertionpoint < device.entities.length) {    System.arraycopy(device.entities,insertionpoint,this.entities,insertionpoint + 1,device.entities.length - insertionpoint);  }  this.entities[insertionpoint]=newEntity;  this.oldAPs=null;  if (device.oldAPs != null) {    this.oldAPs=new ArrayList<AttachmentPoint>(device.oldAPs);  }  this.attachmentPoints=null;  if (device.attachmentPoints != null) {    this.attachmentPoints=new ArrayList<AttachmentPoint>(device.attachmentPoints);  }  this.macAddressString=this.entities[0].getMacAddress().toString();  this.entityClass=device.entityClass;  vlanIds=computeVlandIds();}  }
class C{  public boolean isHighlightAreas(){  return null == highlightAreas ? _highlightAreas : highlightAreas.get();}  }
class C{  public void capturePhoto(ActionListener response){  impl.capturePhoto(response);}  }
class C{  public static DBIDVar newVar(DBIDRef val){  return DBIDFactory.FACTORY.newVar(val);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIComponent();}  }
class C{  protected <T>T mapFromJson(String json,Class<T> clazz) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.readValue(json,clazz);}  }
class C{  public static void initNube(String apiToken,String appContainerIdentifier,DroidNubeKitConstants.kEnvironmentType environmentType,Context context){  DroidNubeKit.getInstance().apiToken=apiToken;  DroidNubeKit.getInstance().environmentType=environmentType;  DroidNubeKit.getInstance().appContainerIdentifier=appContainerIdentifier;  DroidNubeKit.getInstance().context=context;  DroidNubeKit.getInstance().checkForSession();  try {    DroidNubeKit.getInstance().modelClasses=DroidNubeKit.getInstance().getClasspathClasses();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public HdfsWrapper(HdfsConnection connection){  this.connection=connection;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.773 -0400",hash_original_method="E5A50F6C55F59DD4142D90322431FA35",hash_generated_method="739960DEFBE1047F365B92CD8C757715") @Override public void write(String str,int st,int len) throws IOException {  try {    beforeWrite(len);    out.write(str,st,len);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (tabSize == 0)   return x;  int ntabs=((int)x - tabBase) / tabSize;  return tabBase + ((ntabs + 1) * tabSize);}  }
class C{  public Location(final String rack,final String dataCenter){  this.rack=rack;  this.dataCenter=dataCenter;}  }
class C{  public void removeParameters(){  this.uriParms=new NameValueList();}  }
class C{  public Object remove(final Object key){  return parameters.remove(key);}  }
class C{  public static Ignite start(URL springCfgUrl,@Nullable String gridName,@Nullable GridSpringResourceContext springCtx,@Nullable ClassLoader ldr) throws IgniteCheckedException {  A.notNull(springCfgUrl,"springCfgUrl");  boolean isLog4jUsed=U.gridClassLoader().getResource("org/apache/log4j/Appender.class") != null;  IgniteBiTuple<Object,Object> t=null;  if (isLog4jUsed) {    try {      t=U.addLog4jNoOpLogger();    } catch (    IgniteCheckedException ignore) {      isLog4jUsed=false;    }  }  Collection<Handler> savedHnds=null;  if (!isLog4jUsed)   savedHnds=U.addJavaNoOpLogger();  IgniteBiTuple<Collection<IgniteConfiguration>,? extends GridSpringResourceContext> cfgMap;  try {    cfgMap=loadConfigurations(springCfgUrl);  }  finally {    if (isLog4jUsed && t != null)     U.removeLog4jNoOpLogger(t);    if (!isLog4jUsed)     U.removeJavaNoOpLogger(savedHnds);  }  return startConfigurations(cfgMap,springCfgUrl,gridName,springCtx,ldr);}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  UnitGraph g=new ExceptionalUnitGraph(b);  LocalDefs sld=new SmartLocalDefs(g,new SimpleLiveLocals(g));  NaiveSideEffectTester nset=new NaiveSideEffectTester();  LoopFinder lf=new LoopFinder();  lf.internalTransform(b,phaseName,options);  Collection<Loop> loops=lf.loops();  constants=new ArrayList();  if (loops.isEmpty())   return;  Iterator<Loop> lIt=loops.iterator();  while (lIt.hasNext()) {    Loop loop=lIt.next();    Stmt header=loop.getHead();    Collection<Stmt> loopStmts=loop.getLoopStatements();    Iterator<Stmt> bIt=loopStmts.iterator();    while (bIt.hasNext()) {      Stmt tStmt=bIt.next();      handleLoopBodyStmt(tStmt,nset,loopStmts);    }  }}  }
class C{  public InterestResultPolicyImpl(String name){  super(name);}  }
class C{  private SchemaColumn createSchemaColumn(SchemaColumnEntity schemaColumnEntity){  SchemaColumn schemaColumn=new SchemaColumn();  schemaColumn.setName(schemaColumnEntity.getName());  schemaColumn.setType(schemaColumnEntity.getType());  schemaColumn.setSize(schemaColumnEntity.getSize());  schemaColumn.setRequired(schemaColumnEntity.getRequired());  schemaColumn.setDefaultValue(schemaColumnEntity.getDefaultValue());  schemaColumn.setDescription(schemaColumnEntity.getDescription());  return schemaColumn;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS:    return getTypeArgs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void sendProgressPatch(com.vmware.xenon.common.TaskState state,TaskState.TaskStage stage,TaskState.SubStage subStage){switch (state.stage) {case FINISHED:    TaskUtils.sendSelfPatch(this,buildPatch(stage,subStage));  break;case CANCELLED:TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.CANCELLED,null));break;case FAILED:TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,null,state.failure));break;}}  }
class C{  public boolean isEnforceClientSecurity(){  Object oo=get_Value(COLUMNNAME_EnforceClientSecurity);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  @Override public boolean isTextModified(){  return burpEditor.isTextModified();}  }
class C{  @Override public void modifyInstanceAttribute(AmazonEC2Client ec2Client,ModifyInstanceAttributeRequest modifyInstanceAttributeRequest){  ec2Client.modifyInstanceAttribute(modifyInstanceAttributeRequest);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected boolean processMsg(int msgId) throws IOException {  if (msgId == -1)   return false;switch (msgId) {case TICK_PRICE:{      int version=readInt();      int tickerId=readInt();      int tickType=readInt();      double price=readDouble();      int size=0;      if (version >= 2) {        size=readInt();      }      int canAutoExecute=0;      if (version >= 3) {        canAutoExecute=readInt();      }      eWrapper().tickPrice(tickerId,tickType,price,canAutoExecute);      if (version >= 2) {        int sizeTickType=-1;switch (tickType) {case 1:          sizeTickType=0;        break;case 2:      sizeTickType=3;    break;case 4:  sizeTickType=5;break;}if (sizeTickType != -1) {eWrapper().tickSize(tickerId,sizeTickType,size);}}break;}case TICK_SIZE:{int version=readInt();int tickerId=readInt();int tickType=readInt();int size=readInt();eWrapper().tickSize(tickerId,tickType,size);break;}case TICK_OPTION_COMPUTATION:{int version=readInt();int tickerId=readInt();int tickType=readInt();double impliedVol=readDouble();if (impliedVol < 0) {impliedVol=Double.MAX_VALUE;}double delta=readDouble();if (Math.abs(delta) > 1) {delta=Double.MAX_VALUE;}double modelPrice, pvDividend;if (tickType == TickType.MODEL_OPTION) {modelPrice=readDouble();pvDividend=readDouble();} else {modelPrice=pvDividend=Double.MAX_VALUE;}eWrapper().tickOptionComputation(tickerId,tickType,impliedVol,delta,modelPrice,pvDividend);break;}case TICK_GENERIC:{int version=readInt();int tickerId=readInt();int tickType=readInt();double value=readDouble();eWrapper().tickGeneric(tickerId,tickType,value);break;}case TICK_STRING:{int version=readInt();int tickerId=readInt();int tickType=readInt();String value=readStr();eWrapper().tickString(tickerId,tickType,value);break;}case TICK_EFP:{int version=readInt();int tickerId=readInt();int tickType=readInt();double basisPoints=readDouble();String formattedBasisPoints=readStr();double impliedFuturesPrice=readDouble();int holdDays=readInt();String futureExpiry=readStr();double dividendImpact=readDouble();double dividendsToExpiry=readDouble();eWrapper().tickEFP(tickerId,tickType,basisPoints,formattedBasisPoints,impliedFuturesPrice,holdDays,futureExpiry,dividendImpact,dividendsToExpiry);break;}case ORDER_STATUS:{int version=readInt();int id=readInt();String status=readStr();int filled=readInt();int remaining=readInt();double avgFillPrice=readDouble();int permId=0;if (version >= 2) {permId=readInt();}int parentId=0;if (version >= 3) {parentId=readInt();}double lastFillPrice=0;if (version >= 4) {lastFillPrice=readDouble();}int clientId=0;if (version >= 5) {clientId=readInt();}String whyHeld=null;if (version >= 6) {whyHeld=readStr();}eWrapper().orderStatus(id,status,filled,remaining,avgFillPrice,permId,parentId,lastFillPrice,clientId,whyHeld);break;}case ACCT_VALUE:{int version=readInt();String key=readStr();String val=readStr();String cur=readStr();String accountName=null;if (version >= 2) {accountName=readStr();}eWrapper().updateAccountValue(key,val,cur,accountName);break;}case PORTFOLIO_VALUE:{int version=readInt();Contract contract=new Contract();if (version >= 6) {contract.m_conId=readInt();}contract.m_symbol=readStr();contract.m_secType=readStr();contract.m_expiry=readStr();contract.m_strike=readDouble();contract.m_right=readStr();contract.m_currency=readStr();if (version >= 2) {contract.m_localSymbol=readStr();}int position=readInt();double marketPrice=readDouble();double marketValue=readDouble();double averageCost=0.0;double unrealizedPNL=0.0;double realizedPNL=0.0;if (version >= 3) {averageCost=readDouble();unrealizedPNL=readDouble();realizedPNL=readDouble();}String accountName=null;if (version >= 4) {accountName=readStr();}eWrapper().updatePortfolio(contract,position,marketPrice,marketValue,averageCost,unrealizedPNL,realizedPNL,accountName);break;}case ACCT_UPDATE_TIME:{int version=readInt();String timeStamp=readStr();eWrapper().updateAccountTime(timeStamp);break;}case ERR_MSG:{int version=readInt();if (version < 2) {String msg=readStr();m_parent.error(msg);} else {int id=readInt();int errorCode=readInt();String errorMsg=readStr();m_parent.error(id,errorCode,errorMsg);}break;}case OPEN_ORDER:{int version=readInt();Order order=new Order();order.m_orderId=readInt();Contract contract=new Contract();if (version >= 17) {contract.m_conId=readInt();}contract.m_symbol=readStr();contract.m_secType=readStr();contract.m_expiry=readStr();contract.m_strike=readDouble();contract.m_right=readStr();contract.m_exchange=readStr();contract.m_currency=readStr();if (version >= 2) {contract.m_localSymbol=readStr();}order.m_action=readStr();order.m_totalQuantity=readInt();order.m_orderType=readStr();order.m_lmtPrice=readDouble();order.m_auxPrice=readDouble();order.m_tif=readStr();order.m_ocaGroup=readStr();order.m_account=readStr();order.m_openClose=readStr();order.m_origin=readInt();order.m_orderRef=readStr();if (version >= 3) {order.m_clientId=readInt();}if (version >= 4) {order.m_permId=readInt();if (version < 18) {readBoolFromInt();} else {order.m_outsideRth=readBoolFromInt();}order.m_hidden=readInt() == 1;order.m_discretionaryAmt=readDouble();}if (version >= 5) {order.m_goodAfterTime=readStr();}if (version >= 6) {readStr();}if (version >= 7) {order.m_faGroup=readStr();order.m_faMethod=readStr();order.m_faPercentage=readStr();order.m_faProfile=readStr();}if (version >= 8) {order.m_goodTillDate=readStr();}if (version >= 9) {order.m_rule80A=readStr();order.m_percentOffset=readDouble();order.m_settlingFirm=readStr();order.m_shortSaleSlot=readInt();order.m_designatedLocation=readStr();order.m_auctionStrategy=readInt();order.m_startingPrice=readDouble();order.m_stockRefPrice=readDouble();order.m_delta=readDouble();order.m_stockRangeLower=readDouble();order.m_stockRangeUpper=readDouble();order.m_displaySize=readInt();if (version < 18) {readBoolFromInt();}order.m_blockOrder=readBoolFromInt();order.m_sweepToFill=readBoolFromInt();order.m_allOrNone=readBoolFromInt();order.m_minQty=readInt();order.m_ocaType=readInt();order.m_eTradeOnly=readBoolFromInt();order.m_firmQuoteOnly=readBoolFromInt();order.m_nbboPriceCap=readDouble();}if (version >= 10) {order.m_parentId=readInt();order.m_triggerMethod=readInt();}if (version >= 11) {order.m_volatility=readDouble();order.m_volatilityType=readInt();if (version == 11) {int receivedInt=readInt();order.m_deltaNeutralOrderType=((receivedInt == 0) ? "NONE" : "MKT");} else {order.m_deltaNeutralOrderType=readStr();order.m_deltaNeutralAuxPrice=readDouble();}order.m_continuousUpdate=readInt();if (m_parent.serverVersion() == 26) {order.m_stockRangeLower=readDouble();order.m_stockRangeUpper=readDouble();}order.m_referencePriceType=readInt();}if (version >= 13) {order.m_trailStopPrice=readDouble();}if (version >= 14) {order.m_basisPoints=readDouble();order.m_basisPointsType=readInt();contract.m_comboLegsDescrip=readStr();}if (version >= 15) {order.m_scaleNumComponents=readIntMax();order.m_scaleComponentSize=readIntMax();order.m_scalePriceIncrement=readDoubleMax();}if (version >= 19) {order.m_clearingAccount=readStr();order.m_clearingIntent=readStr();}OrderState orderState=new OrderState();if (version >= 16) {order.m_whatIf=readBoolFromInt();orderState.m_status=readStr();orderState.m_initMargin=readStr();orderState.m_maintMargin=readStr();orderState.m_equityWithLoan=readStr();orderState.m_commission=readDoubleMax();orderState.m_minCommission=readDoubleMax();orderState.m_maxCommission=readDoubleMax();orderState.m_commissionCurrency=readStr();orderState.m_warningText=readStr();}eWrapper().openOrder(order.m_orderId,contract,order,orderState);break;}case NEXT_VALID_ID:{int version=readInt();int orderId=readInt();eWrapper().nextValidId(orderId);break;}case SCANNER_DATA:{ContractDetails contract=new ContractDetails();int version=readInt();int tickerId=readInt();int numberOfElements=readInt();for (int ctr=0; ctr < numberOfElements; ctr++) {int rank=readInt();if (version >= 3) {contract.m_summary.m_conId=readInt();}contract.m_summary.m_symbol=readStr();contract.m_summary.m_secType=readStr();contract.m_summary.m_expiry=readStr();contract.m_summary.m_strike=readDouble();contract.m_summary.m_right=readStr();contract.m_summary.m_exchange=readStr();contract.m_summary.m_currency=readStr();contract.m_summary.m_localSymbol=readStr();contract.m_marketName=readStr();contract.m_tradingClass=readStr();String distance=readStr();String benchmark=readStr();String projection=readStr();String legsStr=null;if (version >= 2) {legsStr=readStr();}eWrapper().scannerData(tickerId,rank,contract,distance,benchmark,projection,legsStr);}eWrapper().scannerDataEnd(tickerId);break;}case CONTRACT_DATA:{int version=readInt();ContractDetails contract=new ContractDetails();contract.m_summary.m_symbol=readStr();contract.m_summary.m_secType=readStr();contract.m_summary.m_expiry=readStr();contract.m_summary.m_strike=readDouble();contract.m_summary.m_right=readStr();contract.m_summary.m_exchange=readStr();contract.m_summary.m_currency=readStr();contract.m_summary.m_localSymbol=readStr();contract.m_marketName=readStr();contract.m_tradingClass=readStr();contract.m_summary.m_conId=readInt();contract.m_minTick=readDouble();contract.m_summary.m_multiplier=readStr();contract.m_orderTypes=readStr();contract.m_validExchanges=readStr();if (version >= 2) {contract.m_priceMagnifier=readInt();}eWrapper().contractDetails(contract);break;}case BOND_CONTRACT_DATA:{int version=readInt();ContractDetails contract=new ContractDetails();contract.m_summary.m_symbol=readStr();contract.m_summary.m_secType=readStr();contract.m_cusip=readStr();contract.m_coupon=readDouble();contract.m_maturity=readStr();contract.m_issueDate=readStr();contract.m_ratings=readStr();contract.m_bondType=readStr();contract.m_couponType=readStr();contract.m_convertible=readBoolFromInt();contract.m_callable=readBoolFromInt();contract.m_putable=readBoolFromInt();contract.m_descAppend=readStr();contract.m_summary.m_exchange=readStr();contract.m_summary.m_currency=readStr();contract.m_marketName=readStr();contract.m_tradingClass=readStr();contract.m_summary.m_conId=readInt();contract.m_minTick=readDouble();contract.m_orderTypes=readStr();contract.m_validExchanges=readStr();if (version >= 2) {contract.m_nextOptionDate=readStr();contract.m_nextOptionType=readStr();contract.m_nextOptionPartial=readBoolFromInt();contract.m_notes=readStr();}eWrapper().bondContractDetails(contract);break;}case EXECUTION_DATA:{int version=readInt();int orderId=readInt();Contract contract=new Contract();if (version >= 5) {contract.m_conId=readInt();}contract.m_symbol=readStr();contract.m_secType=readStr();contract.m_expiry=readStr();contract.m_strike=readDouble();contract.m_right=readStr();contract.m_exchange=readStr();contract.m_currency=readStr();contract.m_localSymbol=readStr();Execution exec=new Execution();exec.m_orderId=orderId;exec.m_execId=readStr();exec.m_time=readStr();exec.m_acctNumber=readStr();exec.m_exchange=readStr();exec.m_side=readStr();exec.m_shares=readInt();exec.m_price=readDouble();if (version >= 2) {exec.m_permId=readInt();}if (version >= 3) {exec.m_clientId=readInt();}if (version >= 4) {exec.m_liquidation=readInt();}eWrapper().execDetails(orderId,contract,exec);break;}case MARKET_DEPTH:{int version=readInt();int id=readInt();int position=readInt();int operation=readInt();int side=readInt();double price=readDouble();int size=readInt();eWrapper().updateMktDepth(id,position,operation,side,price,size);break;}case MARKET_DEPTH_L2:{int version=readInt();int id=readInt();int position=readInt();String marketMaker=readStr();int operation=readInt();int side=readInt();double price=readDouble();int size=readInt();eWrapper().updateMktDepthL2(id,position,marketMaker,operation,side,price,size);break;}case NEWS_BULLETINS:{int version=readInt();int newsMsgId=readInt();int newsMsgType=readInt();String newsMessage=readStr();String originatingExch=readStr();eWrapper().updateNewsBulletin(newsMsgId,newsMsgType,newsMessage,originatingExch);break;}case MANAGED_ACCTS:{int version=readInt();String accountsList=readStr();eWrapper().managedAccounts(accountsList);break;}case RECEIVE_FA:{int version=readInt();int faDataType=readInt();String xml=readStr();eWrapper().receiveFA(faDataType,xml);break;}case HISTORICAL_DATA:{int version=readInt();int reqId=readInt();String startDateStr;String endDateStr;String completedIndicator="finished";if (version >= 2) {startDateStr=readStr();endDateStr=readStr();completedIndicator+="-" + startDateStr + "-"+ endDateStr;}int itemCount=readInt();for (int ctr=0; ctr < itemCount; ctr++) {String date=readStr();double open=readDouble();double high=readDouble();double low=readDouble();double close=readDouble();int volume=readInt();double WAP=readDouble();String hasGaps=readStr();int barCount=-1;if (version >= 3) {barCount=readInt();}eWrapper().historicalData(reqId,date,open,high,low,close,volume,barCount,WAP,Boolean.valueOf(hasGaps).booleanValue());}eWrapper().historicalData(reqId,completedIndicator,-1,-1,-1,-1,-1,-1,-1,false);break;}case SCANNER_PARAMETERS:{int version=readInt();String xml=readStr();eWrapper().scannerParameters(xml);break;}case CURRENT_TIME:{readInt();long time=readLong();eWrapper().currentTime(time);break;}case REAL_TIME_BARS:{readInt();int reqId=readInt();long time=readLong();double open=readDouble();double high=readDouble();double low=readDouble();double close=readDouble();long volume=readLong();double wap=readDouble();int count=readInt();eWrapper().realtimeBar(reqId,time,open,high,low,close,volume,wap,count);break;}default :{m_parent.error(EClientErrors.NO_VALID_ID,EClientErrors.UNKNOWN_ID.code(),EClientErrors.UNKNOWN_ID.msg());return false;}}return true;}  }
class C{  public boolean isTopLevelPage(URL url){  String path=getPathWithoutSuffix(url).replaceAll("/+$","");  return path.length() == 0 && url.getQuery() == null;}  }
class C{  @Override public void onDestroy(){  Log_OC.v(TAG,"Destroying service");  mBinder=null;  mServiceHandler=null;  mServiceLooper.quit();  mServiceLooper=null;  mNotificationManager=null;  AccountManager am=AccountManager.get(getApplicationContext());  am.removeOnAccountsUpdatedListener(this);  super.onDestroy();}  }
class C{  public void addBoolean(int o,boolean x,boolean d){  if (force_defaults || x != d) {    addBoolean(x);    slot(o);  }}  }
class C{  public final LC minHeight(String height){  setHeight(LayoutUtil.derive(getHeight(),ConstraintParser.parseUnitValue(height,false),null,null));  return this;}  }
class C{  public void triangulate(Polygon polygon){  _triangulations.clear();  _triangulations.add(polygon);  start();}  }
class C{  public static byte[] encodeMod3Tight(int[] intArray){  BigInteger sum=BigInteger.ZERO;  for (int i=intArray.length - 1; i >= 0; i--) {    sum=sum.multiply(BigInteger.valueOf(3));    sum=sum.add(BigInteger.valueOf(intArray[i] + 1));  }  int size=(BigInteger.valueOf(3).pow(intArray.length).bitLength() + 7) / 8;  byte[] arr=sum.toByteArray();  if (arr.length < size) {    byte[] arr2=new byte[size];    System.arraycopy(arr,0,arr2,size - arr.length,arr.length);    return arr2;  }  if (arr.length > size) {    arr=Arrays.copyOfRange(arr,1,arr.length);  }  return arr;}  }
class C{  public AffineTransform3D(){  m00=m11=m22=1;  m01=m02=m03=0;  m10=m12=m13=0;  m20=m21=m23=0;}  }
class C{  public void processStreamAndScheduleJobs(InputStream stream,String systemId,Scheduler sched) throws ValidationException, ParserConfigurationException, SAXException, XPathException, IOException, SchedulerException, ClassNotFoundException, ParseException {  prepForProcessing();  log.info("Parsing XML from stream with systemId: " + systemId);  InputSource is=new InputSource(stream);  is.setSystemId(systemId);  process(is);  executePreProcessCommands(sched);  scheduleJobs(sched);  maybeThrowValidationException();}  }
class C{  protected TeXFormula(TeXParser tp){  this.jlmXMLMap=tp.formula.jlmXMLMap;  parser=new TeXParser(tp.getIsPartial(),"",this,false);}  }
class C{  public void storeCrc(byte crcType) throws IOException {  if (data == null || crcType == CRC_TYPE_NONE) {    this.crc=0;    this.crcType=crcType;  } else   if (crcType == CRC_TYPE_32) {    this.crc=computeCrc32(data);    this.crcType=crcType;  } else {    throw new IOException("Invalid crc type: " + crcType);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o != null) {    if (o instanceof MetaImage)     return ((MetaImage)o).mightLoadFast(stack.getUIMgr()) ? Boolean.TRUE : Boolean.FALSE; else {      MetaImage mi=MetaImage.getMetaImageNoLoad(o);      return (mi != null && mi.mightLoadFast(stack.getUIMgr())) ? Boolean.TRUE : Boolean.FALSE;    }  }  return Boolean.FALSE;}  }
class C{  private void checkPhases(){  if (VM.VERIFY_ASSERTIONS) {    VM.assertions._assert(scheduledSubPhases.length > 0);    for (    int scheduledPhase : scheduledSubPhases) {      VM.assertions._assert(getSchedule(scheduledPhase) > 0);      VM.assertions._assert(getPhaseId(scheduledPhase) > 0);    }  }}  }
class C{  public Value peek(String queue_name){  Value element=null;  if (has_queue(queue_name)) {    element=queue_map.get(queue_name).peekFirst();  }  return element;}  }
class C{  public static String escape(String s){  return JSONValue.escape(s);}  }
class C{  public int hashCode(){  int hash=super.hashCode();  hash=hash + (this.getCurrency() == null ? 0 : this.getCurrency().hashCode());  hash=hash + (this.getExchange() == null ? 0 : this.getExchange().hashCode());  hash=hash + (this.getSecType() == null ? 0 : this.getSecType().hashCode());  hash=hash + (this.getSymbol() == null ? 0 : this.getSymbol().hashCode());  return hash;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entRef;  Node entElement;  Node createdNode;  Node insertedNode;  Node refChild=null;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=genderNode.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  createdNode=doc.createElement("text3");{    boolean success=false;    try {      insertedNode=entElement.insertBefore(createdNode,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NOT_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public boolean elementAvailable(String ns,String elemName) throws javax.xml.transform.TransformerException {  boolean isAvailable=false;  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (extNS != null)     isAvailable=extNS.isElementAvailable(elemName);  }  return isAvailable;}  }
class C{  private void storeITLMappingInVolume(Map<URI,Integer> volumeToTargetLunMap,ExportMask exportMask){  log.debug("START - createITLMappingInVolume");  for (  URI volumeURI : volumeToTargetLunMap.keySet()) {    Integer targetLunId=volumeToTargetLunMap.get(volumeURI);    Volume volume=dbClient.queryObject(Volume.class,volumeURI);    StringSetMap zoningMap=exportMask.getZoningMap();    Set<String> zoningMapKeys=zoningMap.keySet();    int initiatorIndex=0;    for (    String initiator : zoningMapKeys) {      Initiator initiatorObj=dbClient.queryObject(Initiator.class,URI.create(initiator));      String initiatorWWPN=initiatorObj.getInitiatorPort().replaceAll(CinderConstants.COLON,"");      StringSet targetPorts=zoningMap.get(initiator);      int targetIndex=0;      for (      String target : targetPorts) {        StoragePort targetPort=dbClient.queryObject(StoragePort.class,URI.create(target));        String targetPortWWN=targetPort.getPortNetworkId().replaceAll(CinderConstants.COLON,"");        String itl=initiatorWWPN + "-" + targetPortWWN+ "-"+ String.valueOf(targetLunId);        String itlKey=CinderConstants.PREFIX_ITL + String.valueOf(initiatorIndex) + String.valueOf(targetIndex);        log.info(String.format("Adding ITL %s with key %s",itl,itlKey));        StringMap extensionsMap=volume.getExtensions();        if (null == extensionsMap) {          extensionsMap=new StringMap();          extensionsMap.put(itlKey,itl);          volume.setExtensions(extensionsMap);        } else {          volume.getExtensions().put(itlKey,itl);        }        targetIndex++;      }      initiatorIndex++;    }    dbClient.updateAndReindexObject(volume);  }  log.debug("END - createITLMappingInVolume");}  }
class C{  public TriggerOption withLateFiringsAtEvery(Duration duration){  TimeTrigger trigger=new TimeTrigger(Type.LATE,duration);  triggerList.add(trigger);  return this;}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",null);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  private void inlineVariable(LogicalVariable usedVar,UnnestOperator unnestOp) throws AlgebricksException {  AbstractFunctionCallExpression expr=(AbstractFunctionCallExpression)unnestOp.getExpressionRef().getValue();  List<Pair<AbstractFunctionCallExpression,Integer>> parentAndIndexList=new ArrayList<Pair<AbstractFunctionCallExpression,Integer>>();  getParentFunctionExpression(usedVar,expr,parentAndIndexList);  ILogicalExpression usedVarOrginExpr=findUsedVarOrigin(usedVar,unnestOp,(AbstractLogicalOperator)unnestOp.getInputs().get(0).getValue());  if (usedVarOrginExpr != null) {    for (    Pair<AbstractFunctionCallExpression,Integer> parentAndIndex : parentAndIndexList) {      if (parentAndIndex.first.getFunctionIdentifier() == AsterixBuiltinFunctions.SCAN_COLLECTION && parentAndIndex.first == expr) {        unnestOp.getExpressionRef().setValue(usedVarOrginExpr);      }    }  }}  }
class C{  public static void putCursorAtTheEnd(EditText editText){  editText.setSelection(editText.getText().length());}  }
class C{  public void endDocument() throws SAXException {}  }
class C{  public void testGetRandomAccess(){  Multimap<String,Integer> multimap=create();  multimap.put("foo",1);  multimap.put("foo",3);  assertThat(multimap.get("foo")).isNotInstanceOf(RandomAccess.class);  assertThat(multimap.get("bar")).isNotInstanceOf(RandomAccess.class);}  }
class C{  static int computePreferredBufferSize(int dataLength){  if (dataLength > DEFAULT_BUFFER_SIZE)   return DEFAULT_BUFFER_SIZE;  return dataLength;}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  public static Coordinate midPoint(Coordinate p0,Coordinate p1){  return new Coordinate((p0.x + p1.x) / 2,(p0.y + p1.y) / 2);}  }
class C{  protected void addVertex(Point mousePoint){  Line ray=this.wwd.getView().computeRayFromScreenPoint(mousePoint.getX(),mousePoint.getY());  Vec4 pickPoint=this.intersectPolygonAltitudeAt(ray);  double nearestDistance=Double.MAX_VALUE;  int newVertexIndex=0;  for (int i=0; i < this.controlPoints.size(); i++) {    ControlPointMarker thisMarker=(ControlPointMarker)this.controlPoints.get(i);    ControlPointMarker nextMarker=(ControlPointMarker)this.controlPoints.get((i + 1) % this.controlPoints.size());    Vec4 pointOnEdge=AirspaceEditorUtil.nearestPointOnSegment(thisMarker.point,nextMarker.point,pickPoint);    if (!AirspaceEditorUtil.isPointBehindLineOrigin(ray,pointOnEdge)) {      double d=pointOnEdge.distanceTo3(pickPoint);      if (d < nearestDistance) {        newVertexIndex=i + 1;        nearestDistance=d;      }    }  }  Position newPosition=this.wwd.getModel().getGlobe().computePositionFromPoint(pickPoint);  ArrayList<Position> positionList=new ArrayList<Position>(this.controlPoints.size());  for (  LatLon position : this.getPolygon().getOuterBoundary()) {    positionList.add((Position)position);  }  positionList.add(newVertexIndex,newPosition);  this.getPolygon().setOuterBoundary(positionList);}  }
class C{  public boolean addAttributeAlways(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute){  boolean was_added;  int index;  if (localName == null || uri == null || uri.length() == 0)   index=m_attributes.getIndex(rawName); else {    index=m_attributes.getIndex(uri,localName);  }  if (index >= 0) {    m_attributes.setValue(index,value);    was_added=false;  } else {    m_attributes.addAttribute(uri,localName,rawName,type,value);    was_added=true;  }  return was_added;}  }
class C{  public HttpConnection(String proxyHost,int proxyPort,String host,int port,Protocol protocol){  if (host == null) {    throw new IllegalArgumentException("host parameter is null");  }  if (protocol == null) {    throw new IllegalArgumentException("protocol is null");  }  proxyHostName=proxyHost;  proxyPortNumber=proxyPort;  hostName=host;  portNumber=protocol.resolvePort(port);  protocolInUse=protocol;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrspecifiedvaluechanged.class,args);}  }
class C{  private static void checkSTSPort(WsInfo info){  if (info.getServicePort() != ServicePort.STS) {    String text="Service port should be " + ServicePort.STS;    logger.error(text);    throw new WebServiceException(text);  }}  }
class C{  public static String prettyPrintHex(byte[] baToConvert){  HexCharset hde=null;  try {    hde=(HexCharset)HexCharset.forName("HEX");  } catch (  UnsupportedCharsetException uce) {    hde=new HexCharset(true);  }  return new String(hde.encode(new String(baToConvert)).array());}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  private void paintContinuous(Graphics2D g,JComponent c,int width,int height){  boolean useToolBarColors=isInToolBar(c);  Shape s;  if (isFocused) {    s=shapeGenerator.createSliderThumbContinuous(0,1,width);    g.setPaint(getFocusPaint(s,FocusType.OUTER_FOCUS,useToolBarColors));    g.fill(s);    s=shapeGenerator.createSliderThumbContinuous(1,2,width - 2);    g.setPaint(getFocusPaint(s,FocusType.INNER_FOCUS,useToolBarColors));    g.fill(s);  }  s=shapeGenerator.createSliderThumbContinuous(2,3,width - 4);  if (!isFocused) {    dropShadow.fill(g,s);  }  g.setPaint(getCommonBorderPaint(s,type));  g.fill(s);  s=shapeGenerator.createSliderThumbContinuous(3,4,width - 6);  g.setPaint(getCommonInteriorPaint(s,type));  g.fill(s);}  }
class C{  private NeuronPropertiesPanel(final List<Neuron> neuronList,final Window parent,final boolean displayUpdateRuleProperties){  generalNeuronPropertiesPanel=GeneralNeuronPropertiesPanel.createPanel(neuronList,parent);  updateRulePanel=new UpdateRulePanel(neuronList,parent,displayUpdateRuleProperties);}  }
class C{  public CDataProvider(final INaviModule module){  m_module=module;  m_data=module.getData();  module.addListener(m_moduleListener);}  }
class C{  public GenerationalDistance(Problem problem,NondominatedPopulation referenceSet,double d){  super(problem,referenceSet);  this.d=d;}  }
class C{  public String format(double d){  return format(d,sigDigit);}  }
class C{  public void addCircle(float latPoint,float lonPoint,float radius,int units,LinkProperties properties) throws IOException {  LinkCircle.write(latPoint,lonPoint,radius,units,-1,properties,link.dos);}  }
class C{  public void addAction(String k){  Integer v=new Integer(m_nextBitForAction++);  m_actions.put(k,v);}  }
class C{  public boolean isInRange(double time){  if (time < start || time > end) {    return false;  }  return true;}  }
class C{  @Override protected void doReceive() throws CommunicationException, InterruptedException {  try {    packet=new DatagramPacket(new byte[bufferSize],bufferSize);    socket.receive(packet);    int state=getState();    if (state != ONLINE) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"doReceive","received a message but state not online, returning.");      }      return;    }    createSnmpRequestHandler(this,servedClientCount,socket,packet,root,mibs,ipacl,pduFactory,userDataFactory,topMBS,objectName);  } catch (  SocketException e) {    if (e.getMessage().equals(InterruptSysCallMsg))     throw new InterruptedException(e.toString()); else     throw new CommunicationException(e);  }catch (  InterruptedIOException e) {    throw new InterruptedException(e.toString());  }catch (  CommunicationException e) {    throw e;  }catch (  Exception e) {    throw new CommunicationException(e);  }  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"doReceive","received a message");  }}  }
class C{  protected ExecutionScopeImpl(){  super();}  }
class C{  public synchronized boolean writeEvidence(final byte[] data,final int offset,int len){  if (Cfg.DEBUG) {  }  if (!enoughSpace) {    return false;  }  if (offset >= data.length) {    return false;  }  encData=encryption.encryptData(data,offset,len);  if (fconn == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: fconn null");    }    return false;  }  try {    fconn.append(ByteArray.intToByteArray(data.length - offset));    fconn.append(encData);  } catch (  final Exception e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error: Error writing file: " + e);    }    return false;  }  return true;}  }
class C{  @Deprecated public static void disableLogging(){  writeLogs(false);}  }
class C{  private static int GetStaticCharField(JNIEnvironment env,int classJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticCharField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getCharValueUnchecked(null);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public JToolBar(){  this(HORIZONTAL);}  }
class C{  @Override public Territory retreatQuery(final GUID battleID,final boolean submerge,final Territory battleSite,final Collection<Territory> possibleTerritories,final String message){  if (possibleTerritories.isEmpty()) {    return null;  }  if (submerge) {    final CompositeMatch<Unit> seaSub=new CompositeMatchAnd<>(Matches.UnitIsSea,Matches.UnitIsSub);    final CompositeMatch<Unit> planeNotDestroyer=new CompositeMatchAnd<>(Matches.UnitIsAir,Matches.UnitIsDestroyer.invert());    final List<Unit> ourUnits=getOurUnits();    final List<Unit> enemyUnits=getEnemyUnits();    if (ourUnits == null || enemyUnits == null) {      return null;    }    if (enemyUnits.size() > 0 && Match.allMatch(ourUnits,seaSub) && Match.allMatch(enemyUnits,planeNotDestroyer)) {      return possibleTerritories.iterator().next();    }    return null;  } else {    final MustFightBattle battle=getBattle();    if (battle == null) {      return null;    }    if (m_retreatAfterRound > -1 && battle.getBattleRound() >= m_retreatAfterRound) {      return possibleTerritories.iterator().next();    }    if (!m_retreatWhenOnlyAirLeft && m_retreatAfterXUnitsLeft <= -1) {      return null;    }    final Collection<Unit> unitsLeft=m_isAttacker ? battle.getAttackingUnits() : battle.getDefendingUnits();    final Collection<Unit> airLeft=Match.getMatches(unitsLeft,Matches.UnitIsAir);    if (m_retreatWhenOnlyAirLeft) {      int retreatNum=airLeft.size();      if (m_retreatAfterXUnitsLeft > 0) {        retreatNum+=m_retreatAfterXUnitsLeft;      }      if (retreatNum >= unitsLeft.size()) {        return possibleTerritories.iterator().next();      }    }    if (m_retreatAfterXUnitsLeft > -1 && m_retreatAfterXUnitsLeft >= unitsLeft.size()) {      return possibleTerritories.iterator().next();    }    return null;  }}  }
class C{  private void handleSendImage(Intent intent){  AppLog.i(this,"handleSendImage()");  final Uri imageUri=intent.getParcelableExtra(Intent.EXTRA_STREAM);  if (imageUri != null) {    AppLog.v(this,"imageUri is not null. Handle shared image");  } else {    AppLog.w(this,"imageUri is null. Cannot precede.");  }  Toast.makeText(this,"Not yet implemented.",Toast.LENGTH_SHORT).show();}  }
class C{  public Kernel mul(Kernel k){  int min=getMinIndex();  int max=getMaxIndex();  if (size() > k.size()) {    min=k.getMinIndex();    max=k.getMaxIndex();  }  for (int i=min; i <= max; i++) {    set(i,get(i) * k.get(i));  }  return this;}  }
class C{  @PUT @ApiOperation(value="Updates an existing order") public Response updateOrder(@ApiParam(value="The order to update",required=true) Order order){  orderService.updateOrder(order);  return Response.ok().build();}  }
class C{  public ToStringBuilder append(final int value){  style.append(buffer,null,value);  return this;}  }
class C{  public static boolean isDefaultUseInternalBrowser(){  return BrowserUtil.canUseInternalWebBrowser();}  }
class C{  public static void addSolarNeutronRecipe(GasStack input,GasStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addSolarNeutronRecipe",GasStack.class,GasStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public void addPoint(float x,float y){  if (npoints == xpoints.length) {    float[] tmp;    tmp=new float[npoints * 2];    System.arraycopy(xpoints,0,tmp,0,npoints);    xpoints=tmp;    tmp=new float[npoints * 2];    System.arraycopy(ypoints,0,tmp,0,npoints);    ypoints=tmp;  }  xpoints[npoints]=x;  ypoints[npoints]=y;  npoints++;  updatePath(x,y);}  }
class C{  @Override @SuppressWarnings("unchecked") public E[] nextChunk(){  if (!hasNext()) {    throw new NoSuchElementException();  }  final E[] ret;  if (buffer == null) {    buffer=bufferIt.next();    ret=buffer;  } else   if (i == 0) {    ret=buffer;  } else {    final int remaining=buffer.length - i;    ret=(E[])java.lang.reflect.Array.newInstance(buffer.getClass().getComponentType(),remaining);    System.arraycopy(buffer,i,ret,0,remaining);  }  buffer=null;  i=0;  return ret;}  }
class C{  public DotGraphEdge drawEdge(String from,String to){  DotGraphNode src=drawNode(from);  DotGraphNode dst=drawNode(to);  DotGraphEdge edge=new DotGraphEdge(src,dst);  this.drawElements.add(edge);  return edge;}  }
class C{  private static String urlEncode(final String text) throws UnsupportedEncodingException {  return URLEncoder.encode(text,"UTF-8");}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.PROVIDED_RUNTIME_LIBRARIES__PROVIDED_RUNTIME_LIBRARIES:    getProvidedRuntimeLibraries().clear();  getProvidedRuntimeLibraries().addAll((Collection<? extends ProvidedRuntimeLibraryDependency>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public BellPlay(int times){  this.times=times;  onTurnReached(0);}  }
class C{  @Deprecated public Builder oauthCallback(XingOAuthCallback callback){  xingOAuthCallback=callback;  return this;}  }
class C{  void removeProcessOverview(ProcessExecutionResultOverview processExecutionResultOverview){  remove(processExecutionResultOverview);  processOverviews.remove(processExecutionResultOverview);  revalidate();  repaint();}  }
class C{  @Override public void hideLoadingBackProgress(){  if (null != mProgressView) {    mProgressView.setVisibility(View.GONE);  }}  }
class C{  public boolean isReady(){  return isReady;}  }
class C{  public static boolean lesserEquals(double x,double y){  return value(x - y) <= 0;}  }
class C{  protected void engineSetMode(String mode) throws NoSuchAlgorithmException {  core.setMode(mode);}  }
class C{  public StraightStreamReader(InputStream in){  this.in=in;}  }
class C{  private void storeReturnValue(HLEModuleFunction func,Class<?> returnType){  if (returnType == void.class) {  } else   if (returnType == int.class) {    storeRegister(_v0);  } else   if (returnType == boolean.class) {    storeRegister(_v0);  } else   if (returnType == long.class) {    mv.visitInsn(Opcodes.DUP2);    mv.visitLdcInsn(0xFFFFFFFFL);    mv.visitInsn(Opcodes.LAND);    mv.visitInsn(Opcodes.L2I);    storeRegister(_v0);    loadImm(32);    mv.visitInsn(Opcodes.LSHR);    mv.visitInsn(Opcodes.L2I);    storeRegister(_v1);  } else   if (returnType == float.class) {    storeFRegister(_f0);  } else {    HLEUidClass hleUidClass=returnType.getAnnotation(HLEUidClass.class);    if (hleUidClass != null) {      if (hleUidClass.moduleMethodUidGenerator().length() <= 0) {        mv.visitLdcInsn(returnType.getName());        mv.visitInsn(Opcodes.SWAP);        mv.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(HLEUidObjectMapping.class),"createUidForObject","(" + Type.getDescriptor(String.class) + Type.getDescriptor(Object.class)+ ")I");        storeRegister(_v0);      } else {        mv.visitLdcInsn(returnType.getName());        mv.visitInsn(Opcodes.SWAP);        loadModule(func.getModuleName());        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(func.getHLEModuleMethod().getDeclaringClass()),hleUidClass.moduleMethodUidGenerator(),"()I");        mv.visitInsn(Opcodes.SWAP);        mv.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(HLEUidObjectMapping.class),"addObjectMap","(" + Type.getDescriptor(String.class) + "I"+ Type.getDescriptor(Object.class)+ ")I");        storeRegister(_v0);      }    } else {      log.error(String.format("Unsupported sycall return value type '%s'",returnType.getName()));    }  }}  }
class C{  public static void putObjectField(Object obj,long fieldOff,Object val){  UNSAFE.putObject(obj,fieldOff,val);}  }
class C{  public static <K>IdentityArrayList<K> wrap(final K a[],final int length){  if (length > a.length)   throw new IllegalArgumentException("The specified length (" + length + ") is greater than the array size ("+ a.length+ ")");  final IdentityArrayList<K> l=new IdentityArrayList<K>(a,false);  l.size=length;  return l;}  }
class C{  private static void addTree(String tag,String traversalPermissions){  EnumMap<Node,Label> currentTree=defaultPermissions.getOrDefault(tag,new EnumMap<>(Node.class));  String[] permissions=traversalPermissions.split(";");  for (  String permission : permissions) {    String[] nodeLabel=permission.split("=");    Node currentNode=Node.valueOf(nodeLabel[0].toUpperCase());    Label currentLabel=Label.fromTag(nodeLabel[1]);    if (currentLabel == Label.UNKNOWN) {      throw new RuntimeException("permissions:" + permission + " invalid label for "+ tag);    }    currentTree.put(currentNode,currentLabel);  }  defaultPermissions.put(tag,currentTree);}  }
class C{  public static boolean isHostIpInterfacesInUse(DbClient dbClient,List<String> endpoints,URI hostId){  if (endpoints == null || endpoints.isEmpty()) {    return false;  }  Host host=dbClient.queryObject(Host.class,hostId);  List<FileShare> fileShares=null;  if (!NullColumnValueGetter.isNullURI(host.getProject())) {    fileShares=CustomQueryUtility.queryActiveResourcesByRelation(dbClient,host.getProject(),FileShare.class,"project");  } else   if (!NullColumnValueGetter.isNullURI(host.getTenant())) {    fileShares=CustomQueryUtility.queryActiveResourcesByRelation(dbClient,host.getTenant(),FileShare.class,"tenant");  }  if (fileShares == null || fileShares.isEmpty()) {    return false;  }  for (  FileShare fileShare : fileShares) {    if (fileShare != null && fileShare.getFsExports() != null) {      for (      FileExport fileExport : fileShare.getFsExports().values()) {        if (fileExport != null && fileExport.getClients() != null) {          for (          String endpoint : endpoints) {            if (fileExport.getClients().contains(endpoint)) {              return true;            }          }        }      }    }  }  return false;}  }
class C{  private final boolean verifyChildren(Position nodePos){  return verifyChildren(nodePos,null);}  }
class C{  public void assertSameValues(int[] expected,int[] actual){  assertEquals("length",expected.length,actual.length);  final int len=expected.length;  for (int i=0; i < len; i++) {    assertEquals("position=" + i,expected[i],actual[i]);  }}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public XCardDocument(Document document){  this.document=document;  XCardNamespaceContext nsContext=new XCardNamespaceContext(version4,"v");  XPath xpath=XPathFactory.newInstance().newXPath();  xpath.setNamespaceContext(nsContext);  try {    vcardsRootElement=(Element)xpath.evaluate("//" + nsContext.getPrefix() + ":"+ VCARDS.getLocalPart(),document,XPathConstants.NODE);  } catch (  XPathExpressionException e) {    throw new RuntimeException(e);  }}  }
class C{  public double semiVariance(){  return regret(mean());}  }
class C{  static void copyExtendedAttributes(int ofd,int nfd){  NativeBuffer buffer=null;  try {    int size=1024;    buffer=NativeBuffers.getNativeBuffer(size);    for (; ; ) {      try {        size=flistxattr(ofd,buffer.address(),size);        break;      } catch (      UnixException x) {        if (x.errno() == ERANGE && size < 32 * 1024) {          buffer.release();          size*=2;          buffer=null;          buffer=NativeBuffers.getNativeBuffer(size);          continue;        }        return;      }    }    long address=buffer.address();    int start=0;    int pos=0;    while (pos < size) {      if (unsafe.getByte(address + pos) == 0) {        int len=pos - start;        byte[] name=new byte[len];        unsafe.copyMemory(null,address + start,name,Unsafe.ARRAY_BYTE_BASE_OFFSET,len);        try {          copyExtendedAttribute(ofd,name,nfd);        } catch (        UnixException ignore) {        }        start=pos + 1;      }      pos++;    }  }  finally {    if (buffer != null)     buffer.release();  }}  }
class C{  public cudaIpcEventHandle(){}  }
class C{  public String write(Integer indent,String xmlVersion){  return write(new XCardOutputProperties(indent,xmlVersion));}  }
class C{  private static boolean isDeclaredInElse(@NotNull final PsiElement elementToCheck,@NotNull final PyForStatement forStatement){  final PyElsePart elsePart=forStatement.getElsePart();  if (elsePart != null) {    if (PsiTreeUtil.isAncestor(elsePart,elementToCheck,false)) {      return true;    }  }  return false;}  }
class C{  public void edit(FieldAccess f) throws CannotCompileException {}  }
class C{  public DateTimeFormatter withLocale(Locale locale){  if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {    return this;  }  return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);}  }
class C{  public boolean hasVariationId(){  return hasExtension(GwoVariationId.class);}  }
class C{  @VisibleForTesting void fillDataPoint(Location location,double data[]){  double timeOrDistance=Double.NaN;  double elevation=Double.NaN;  double speed=Double.NaN;  double pace=Double.NaN;  double heartRate=Double.NaN;  double cadence=Double.NaN;  double power=Double.NaN;  if (tripStatisticsUpdater != null) {    tripStatisticsUpdater.addLocation(location,recordingDistanceInterval,false,ActivityType.INVALID,0.0);    TripStatistics tripStatistics=tripStatisticsUpdater.getTripStatistics();    if (chartByDistance) {      double distance=tripStatistics.getTotalDistance() * UnitConversions.M_TO_KM;      if (!metricUnits) {        distance*=UnitConversions.KM_TO_MI;      }      timeOrDistance=distance;    } else {      timeOrDistance=tripStatistics.getTotalTime();    }    elevation=tripStatisticsUpdater.getSmoothedElevation();    if (!metricUnits) {      elevation*=UnitConversions.M_TO_FT;    }    speed=tripStatisticsUpdater.getSmoothedSpeed() * UnitConversions.MS_TO_KMH;    if (!metricUnits) {      speed*=UnitConversions.KM_TO_MI;    }    pace=speed == 0 ? 0.0 : 60.0 / speed;  }  if (location instanceof MyTracksLocation && ((MyTracksLocation)location).getSensorDataSet() != null) {    SensorDataSet sensorDataSet=((MyTracksLocation)location).getSensorDataSet();    if (sensorDataSet.hasHeartRate() && sensorDataSet.getHeartRate().getState() == Sensor.SensorState.SENDING && sensorDataSet.getHeartRate().hasValue()) {      heartRate=sensorDataSet.getHeartRate().getValue();    }    if (sensorDataSet.hasCadence() && sensorDataSet.getCadence().getState() == Sensor.SensorState.SENDING && sensorDataSet.getCadence().hasValue()) {      cadence=sensorDataSet.getCadence().getValue();    }    if (sensorDataSet.hasPower() && sensorDataSet.getPower().getState() == Sensor.SensorState.SENDING && sensorDataSet.getPower().hasValue()) {      power=sensorDataSet.getPower().getValue();    }  }  if (data != null) {    data[0]=timeOrDistance;    data[1]=elevation;    data[2]=speed;    data[3]=pace;    data[4]=heartRate;    data[5]=cadence;    data[6]=power;  }}  }
class C{  protected URIMetadataNode toYaCySchema(final SolrDocument doc) throws MalformedURLException {  String urlstr;  if (localcfg.contains("sku")) {    urlstr=(String)doc.getFieldValue(localcfg.get("sku").getValue());  } else {    urlstr=(String)doc.getFieldValue(localcfg.get("_skufieldname").getValue());    if (this.localcfg.contains("_skuprefix")) {      String skuprefix=this.localcfg.get("_skuprefix").getValue();      urlstr=skuprefix + urlstr;    }  }  final DigestURL url=new DigestURL(urlstr);  URIMetadataNode newdoc=new URIMetadataNode(url);  Iterator<Configuration.Entry> it=localcfg.entryIterator();  while (it.hasNext()) {    Configuration.Entry et=it.next();    String yacyfieldname=et.key();    String remotefieldname=et.getValue();    if (remotefieldname != null && !remotefieldname.isEmpty()) {      if (Switchboard.getSwitchboard().index.fulltext().getDefaultConfiguration().contains(yacyfieldname)) {        SchemaDeclaration est=CollectionSchema.valueOf(yacyfieldname);        if (est.isMultiValued()) {          if (doc.getFieldValues(remotefieldname) != null) {            newdoc.addField(yacyfieldname,doc.getFieldValues(remotefieldname));          }        } else {          if (doc.getFieldValue(remotefieldname) != null) {            Object val=doc.getFirstValue(remotefieldname);            try {              if (est.getType() == SolrType.num_integer && val instanceof String) {                newdoc.setField(yacyfieldname,Integer.parseInt((String)val));              } else {                newdoc.setField(yacyfieldname,val);              }            } catch (            Exception ex) {              continue;            }          }        }      }    }  }  newdoc.addField(CollectionSchema.httpstatus_i.name(),HttpServletResponse.SC_OK);  return newdoc;}  }
class C{  public static Type instance(){  return theInstance;}  }
class C{  public SVGOMAnimatedNumberList(AbstractElement elt,String ns,String ln,String defaultValue,boolean emptyAllowed){  super(elt,ns,ln);  this.defaultValue=defaultValue;  this.emptyAllowed=emptyAllowed;}  }
class C{  public static IndentResult indentLines(IDocument document,ILineRange lines,IJavaProject project,IndentResult result) throws BadLocationException {  int numberOfLines=lines.getNumberOfLines();  if (numberOfLines < 1)   return new IndentResult(null);  result=reuseOrCreateToken(result,numberOfLines);  JavaHeuristicScanner scanner=new JavaHeuristicScanner(document);  JavaIndenter indenter=new JavaIndenter(document,scanner,project);  boolean changed=false;  int tabSize=CodeFormatterUtil.getTabWidth(project);  for (int line=lines.getStartLine(), last=line + numberOfLines, i=0; line < last; line++) {    changed|=indentLine(document,line,indenter,scanner,result.commentLinesAtColumnZero,i++,tabSize);  }  result.hasChanged=changed;  return result;}  }
class C{  public IPoint[] compute(IPoint[] points){  int n=points.length;  if (n < 3) {    return points;  }  ExternalBinaryHeap<IPoint> heap=new ExternalBinaryHeap<IPoint>(n,IPoint.xy_sorter);  for (  IPoint p : points) {    heap.insert(p);  }  LinkedList<IPoint> list=new LinkedList<IPoint>();  IPoint p1=heap.smallest();  list.addFirst(p1);  IPoint p2=heap.smallest();  list.addFirst(p2);  PartialHull upper=new PartialHull(p1,p2);  while (!heap.isEmpty()) {    p1=heap.smallest();    list.addFirst(p1);    upper.add(p1);    while (upper.hasThree() && upper.areLastThreeNonRight()) {      upper.removeMiddleOfLastThree();    }  }  Iterator<IPoint> it=list.listIterator();  p1=it.next();  p2=it.next();  PartialHull lower=new PartialHull(p1,p2);  while (it.hasNext()) {    p1=it.next();    lower.add(p1);    while (lower.hasThree() && lower.areLastThreeNonRight()) {      lower.removeMiddleOfLastThree();    }  }  IPoint[] hull=new IPoint[upper.size() + lower.size() - 2];  int idx=0;  Iterator<IPoint> pit=upper.points();  while (pit.hasNext()) {    hull[idx++]=pit.next();  }  pit=lower.points();  pit.next();  while (idx < hull.length) {    hull[idx++]=pit.next();  }  return hull;}  }
class C{  private void init(){  graphheight=Math.min(height,width) - (3 * border);  graphwidth=Math.min(height,width) - (3 * border);  int largestSize=getLargestSize(values);  largest_value_set=values.get(largestSize).getList();  size=largest_value_set.size();  label_size=size - 1;  calculateLogAxis();  if (labels != null)   size=labels.size();  if (largest_value_set.get(0).getLabels() != null) {    for (int j=0; j < size + 1; j++)     createX_axis(j);  } else {    for (int j=0; j < size + 1; j++)     createX_axis(j);  }}  }
class C{  @Override public void execute() throws BuildException {  Java7Checker.check();  try {    if (loader == null) {      loader=Util.getCeylonClassLoaderCachedInProject(getProject());    }    if (fromCeylonVersionMethod == null) {      Class<?> klass=loader.loadClass("com.redhat.ceylon.model.loader.OsgiVersion");      Class<?>[] parameterTypes={String.class};      fromCeylonVersionMethod=klass.getDeclaredMethod("fromCeylonVersion",parameterTypes);    }    if (withTimestampMethod == null) {      Class<?> klass=loader.loadClass("com.redhat.ceylon.model.loader.OsgiVersion");      Class<?>[] parameterTypes={String.class,Date.class};      withTimestampMethod=klass.getDeclaredMethod("withTimestamp",parameterTypes);    }    String osgiVersion=(String)fromCeylonVersionMethod.invoke(null,ceylonVersionProperty);    if (addTimeStampProperty) {      osgiVersion=(String)withTimestampMethod.invoke(null,osgiVersion,new Date());    }    log("Setting " + propertyName + " = "+ osgiVersion+ " based on value of the Ceylon version: "+ ceylonVersionProperty);    getProject().setProperty(propertyName,osgiVersion);  } catch (  Exception e) {    throw new BuildException(e);  }}  }
class C{  public static void init(Context context,ILog logProxy){  sContext=context;  LogImpl.setLogProxy(logProxy);}  }
class C{  int numSlots(){  return vals.length;}  }
class C{  protected IgfsIpcEndpointConfiguration primaryIpcEndpointConfiguration(final String gridName){  IgfsIpcEndpointConfiguration cfg=new IgfsIpcEndpointConfiguration();  cfg.setType(IgfsIpcEndpointType.TCP);  cfg.setPort(DFLT_IPC_PORT + getTestGridIndex(gridName));  return cfg;}  }
class C{  protected void initComponentDefaults(UIDefaults table){  super.initComponentDefaults(table);  Color c=table.getColor("TextField.background");  table.put("ComboBox.background",c);  table.put("ComboBox.listBackground",c);}  }
class C{  public boolean isInvalidAfterReboot(){  return invalidAfterReboot;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return new Long(a == null ? 0 : a.getSchedulingStart());}  }
class C{  @Override public String toString(){  return "o_" + id;}  }
class C{  public void read(byte[] buf,int offset,int len) throws IOException {  bfdi.readFully(buf,offset,len);}  }
class C{  private void ib3(int a,int b,int c,int d){  int t1=a | b;  int t2=b ^ c;  int t3=b & t2;  int t4=a ^ t3;  int t5=c ^ t4;  int t6=d | t4;  X0=t2 ^ t6;  int t8=t2 | t6;  int t9=d ^ t8;  X2=t5 ^ t9;  int t11=t1 ^ t9;  int t12=X0 & t11;  X3=t4 ^ t12;  X1=X3 ^ (X0 ^ t11);}  }
class C{  private void updateReportMailingJobAfterJobExecution(final ReportMailingJob reportMailingJob,final StringBuilder errorLog,final DateTime jobStartDateTime){  final String recurrence=reportMailingJob.getRecurrence();  final DateTime nextRunDateTime=reportMailingJob.getNextRunDateTime();  ReportMailingJobPreviousRunStatus reportMailingJobPreviousRunStatus=ReportMailingJobPreviousRunStatus.SUCCESS;  reportMailingJob.updatePreviousRunErrorLog(null);  if (errorLog != null && errorLog.length() > 0) {    reportMailingJobPreviousRunStatus=ReportMailingJobPreviousRunStatus.ERROR;    reportMailingJob.updatePreviousRunErrorLog(errorLog.toString());  }  reportMailingJob.increaseNumberOfRunsByOne();  reportMailingJob.updatePreviousRunStatus(reportMailingJobPreviousRunStatus.getValue());  reportMailingJob.updatePreviousRunDateTime(reportMailingJob.getNextRunDateTime());  if (StringUtils.isEmpty(recurrence)) {    reportMailingJob.deactivate();    reportMailingJob.updateNextRunDateTime(null);  } else   if (nextRunDateTime != null) {    final DateTime nextRecurringDateTime=this.createNextRecurringDateTime(recurrence,nextRunDateTime);    reportMailingJob.updateNextRunDateTime(nextRecurringDateTime);  }  this.reportMailingJobRepository.save(reportMailingJob);  this.createReportMailingJobRunHistroryAfterJobExecution(reportMailingJob,errorLog,jobStartDateTime,reportMailingJobPreviousRunStatus.getValue());}  }
class C{  private int generateNonce(){  return RANDOM.nextInt();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.IMPORT_SPECIFIER__FLAGGED_USED_IN_CODE:    return isFlaggedUsedInCode();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  private String[] computeSegments(String path){  int segmentCount=computeSegmentCount(path);  if (segmentCount == 0)   return NO_SEGMENTS;  String[] newSegments=new String[segmentCount];  int len=path.length();  int firstPosition=(path.charAt(0) == SEPARATOR) ? 1 : 0;  if (firstPosition == 1 && len > 1 && (path.charAt(1) == SEPARATOR))   firstPosition=2;  int lastPosition=(path.charAt(len - 1) != SEPARATOR) ? len - 1 : len - 2;  int next=firstPosition;  for (int i=0; i < segmentCount; i++) {    int start=next;    int end=path.indexOf(SEPARATOR,next);    if (end == -1) {      newSegments[i]=path.substring(start,lastPosition + 1);    } else {      newSegments[i]=path.substring(start,end);    }    next=end + 1;  }  return newSegments;}  }
class C{  private static void mkdirs(IgniteFileSystem fs,IgfsPath path) throws IgniteException {  assert fs != null;  assert path != null;  try {    fs.mkdirs(path);    System.out.println();    System.out.println(">>> Created directory: " + path);  } catch (  IgfsException e) {    System.out.println();    System.out.println(">>> Failed to create a directory [path=" + path + ", msg="+ e.getMessage()+ ']');  }  System.out.println();}  }
class C{  public PopupLoader show(Phase phase,Widget widget){  PopupLoader loader=popups.get(phase);  if (loader != null) {    return loader;  }switch (phase) {case STARTING_WORKSPACE_RUNTIME:    loader=popupLoaderFactory.getPopup(locale.startingWorkspaceRuntime(),locale.startingWorkspaceRuntimeDescription());  loader.showDownloadButton();break;case STARTING_WORKSPACE_AGENT:loader=popupLoaderFactory.getPopup(locale.startingWorkspaceAgent(),locale.startingWorkspaceAgentDescription());break;case CREATING_PROJECT:loader=popupLoaderFactory.getPopup(locale.creatingProject(),locale.creatingProjectDescription());break;case CREATING_WORKSPACE_SNAPSHOT:loader=popupLoaderFactory.getPopup(locale.snapshottingWorkspace(),locale.snapshottingWorkspaceDescription());break;case STOPPING_WORKSPACE:loader=popupLoaderFactory.getPopup(locale.stoppingWorkspace(),locale.stoppingWorkspaceDescription());break;case WORKSPACE_STOPPED:loader=popupLoaderFactory.getPopup(locale.workspaceStopped(),locale.workspaceStoppedDescription(),widget);break;}loader.setDelegate(this);popups.put(phase,loader);return loader;}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case USE:case KNOCK:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  private MutableBigInteger divideMagnitude(MutableBigInteger div,MutableBigInteger quotient,boolean needRemainder){  int shift=Integer.numberOfLeadingZeros(div.value[div.offset]);  final int dlen=div.intLen;  int[] divisor;  MutableBigInteger rem;  if (shift > 0) {    divisor=new int[dlen];    copyAndShift(div.value,div.offset,dlen,divisor,0,shift);    if (Integer.numberOfLeadingZeros(value[offset]) >= shift) {      int[] remarr=new int[intLen + 1];      rem=new MutableBigInteger(remarr);      rem.intLen=intLen;      rem.offset=1;      copyAndShift(value,offset,intLen,remarr,1,shift);    } else {      int[] remarr=new int[intLen + 2];      rem=new MutableBigInteger(remarr);      rem.intLen=intLen + 1;      rem.offset=1;      int rFrom=offset;      int c=0;      int n2=32 - shift;      for (int i=1; i < intLen + 1; i++, rFrom++) {        int b=c;        c=value[rFrom];        remarr[i]=(b << shift) | (c >>> n2);      }      remarr[intLen + 1]=c << shift;    }  } else {    divisor=Arrays.copyOfRange(div.value,div.offset,div.offset + div.intLen);    rem=new MutableBigInteger(new int[intLen + 1]);    System.arraycopy(value,offset,rem.value,1,intLen);    rem.intLen=intLen;    rem.offset=1;  }  int nlen=rem.intLen;  final int limit=nlen - dlen + 1;  if (quotient.value.length < limit) {    quotient.value=new int[limit];    quotient.offset=0;  }  quotient.intLen=limit;  int[] q=quotient.value;  if (rem.intLen == nlen) {    rem.offset=0;    rem.value[0]=0;    rem.intLen++;  }  int dh=divisor[0];  long dhLong=dh & LONG_MASK;  int dl=divisor[1];  for (int j=0; j < limit - 1; j++) {    int qhat=0;    int qrem=0;    boolean skipCorrection=false;    int nh=rem.value[j + rem.offset];    int nh2=nh + 0x80000000;    int nm=rem.value[j + 1 + rem.offset];    if (nh == dh) {      qhat=~0;      qrem=nh + nm;      skipCorrection=qrem + 0x80000000 < nh2;    } else {      long nChunk=(((long)nh) << 32) | (nm & LONG_MASK);      if (nChunk >= 0) {        qhat=(int)(nChunk / dhLong);        qrem=(int)(nChunk - (qhat * dhLong));      } else {        long tmp=divWord(nChunk,dh);        qhat=(int)(tmp & LONG_MASK);        qrem=(int)(tmp >>> 32);      }    }    if (qhat == 0)     continue;    if (!skipCorrection) {      long nl=rem.value[j + 2 + rem.offset] & LONG_MASK;      long rs=((qrem & LONG_MASK) << 32) | nl;      long estProduct=(dl & LONG_MASK) * (qhat & LONG_MASK);      if (unsignedLongCompare(estProduct,rs)) {        qhat--;        qrem=(int)((qrem & LONG_MASK) + dhLong);        if ((qrem & LONG_MASK) >= dhLong) {          estProduct-=(dl & LONG_MASK);          rs=((qrem & LONG_MASK) << 32) | nl;          if (unsignedLongCompare(estProduct,rs))           qhat--;        }      }    }    rem.value[j + rem.offset]=0;    int borrow=mulsub(rem.value,divisor,qhat,dlen,j + rem.offset);    if (borrow + 0x80000000 > nh2) {      divadd(divisor,rem.value,j + 1 + rem.offset);      qhat--;    }    q[j]=qhat;  }  int qhat=0;  int qrem=0;  boolean skipCorrection=false;  int nh=rem.value[limit - 1 + rem.offset];  int nh2=nh + 0x80000000;  int nm=rem.value[limit + rem.offset];  if (nh == dh) {    qhat=~0;    qrem=nh + nm;    skipCorrection=qrem + 0x80000000 < nh2;  } else {    long nChunk=(((long)nh) << 32) | (nm & LONG_MASK);    if (nChunk >= 0) {      qhat=(int)(nChunk / dhLong);      qrem=(int)(nChunk - (qhat * dhLong));    } else {      long tmp=divWord(nChunk,dh);      qhat=(int)(tmp & LONG_MASK);      qrem=(int)(tmp >>> 32);    }  }  if (qhat != 0) {    if (!skipCorrection) {      long nl=rem.value[limit + 1 + rem.offset] & LONG_MASK;      long rs=((qrem & LONG_MASK) << 32) | nl;      long estProduct=(dl & LONG_MASK) * (qhat & LONG_MASK);      if (unsignedLongCompare(estProduct,rs)) {        qhat--;        qrem=(int)((qrem & LONG_MASK) + dhLong);        if ((qrem & LONG_MASK) >= dhLong) {          estProduct-=(dl & LONG_MASK);          rs=((qrem & LONG_MASK) << 32) | nl;          if (unsignedLongCompare(estProduct,rs))           qhat--;        }      }    }    int borrow;    rem.value[limit - 1 + rem.offset]=0;    if (needRemainder)     borrow=mulsub(rem.value,divisor,qhat,dlen,limit - 1 + rem.offset); else     borrow=mulsubBorrow(rem.value,divisor,qhat,dlen,limit - 1 + rem.offset);    if (borrow + 0x80000000 > nh2) {      if (needRemainder)       divadd(divisor,rem.value,limit - 1 + 1 + rem.offset);      qhat--;    }    q[(limit - 1)]=qhat;  }  if (needRemainder) {    if (shift > 0)     rem.rightShift(shift);    rem.normalize();  }  quotient.normalize();  return needRemainder ? rem : null;}  }
class C{  public boolean isClosed(){  return !isOpen();}  }
class C{  @Override public final boolean run(String[] args) throws AdeException {  init(args);  try {    parseArgs(args);  } catch (  AdeUsageException e) {    String msg=e.getMessage();    if (msg != null) {      logger.error(msg);    }    return false;  }  return execute();}  }
class C{  private static DefaultSampleValues parseTfhd(DefaultSampleValues extendsDefaults,ParsableByteArray tfhd){  tfhd.setPosition(Atom.HEADER_SIZE);  int fullAtom=tfhd.readInt();  int flags=Atom.parseFullAtomFlags(fullAtom);  tfhd.skipBytes(4);  if ((flags & 0x01) != 0) {    tfhd.skipBytes(8);  }  int defaultSampleDescriptionIndex=((flags & 0x02) != 0) ? tfhd.readUnsignedIntToInt() - 1 : extendsDefaults.sampleDescriptionIndex;  int defaultSampleDuration=((flags & 0x08) != 0) ? tfhd.readUnsignedIntToInt() : extendsDefaults.duration;  int defaultSampleSize=((flags & 0x10) != 0) ? tfhd.readUnsignedIntToInt() : extendsDefaults.size;  int defaultSampleFlags=((flags & 0x20) != 0) ? tfhd.readUnsignedIntToInt() : extendsDefaults.flags;  return new DefaultSampleValues(defaultSampleDescriptionIndex,defaultSampleDuration,defaultSampleSize,defaultSampleFlags);}  }
class C{  public OMGraphicList filter(Shape withinThisShape){  return filter(withinThisShape,true);}  }
class C{  public static EventBean adapterForType(Object theEvent,EventType eventType,EventAdapterService eventAdapterService){  if (theEvent == null) {    return null;  }  if (eventType instanceof BeanEventType) {    return eventAdapterService.adapterForTypedBean(theEvent,(BeanEventType)eventType);  } else   if (eventType instanceof MapEventType) {    return eventAdapterService.adapterForTypedMap((Map)theEvent,eventType);  } else   if (eventType instanceof ObjectArrayEventType) {    return eventAdapterService.adapterForTypedObjectArray((Object[])theEvent,eventType);  } else   if (eventType instanceof BaseConfigurableEventType) {    return eventAdapterService.adapterForTypedDOM((Node)theEvent,eventType);  } else {    return null;  }}  }
class C{  public TomcatWarTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public FrameObject toFrameObject(){  return frameObject;}  }
class C{  public static void pickGalleryImage(Activity targetActivity,Fragment targetFragment){  Intent intent=new Intent(Intent.ACTION_GET_CONTENT,null);  intent.setType("image/*");  if (targetFragment != null) {    targetFragment.startActivityForResult(intent,REQUEST_CODE_PICK_IMAGE);  } else   if (targetActivity != null) {    targetActivity.startActivityForResult(intent,REQUEST_CODE_PICK_IMAGE);  }}  }
class C{  public StrTokenizer(final char[] input,final StrMatcher delim){  this(input);  setDelimiterMatcher(delim);}  }
class C{  public ConfigureXmlExternalEntityDialog_NB(XmlExternalEntity xmlExternalEntity){  this.xmlExternalEntity=xmlExternalEntity;  initComponents();  List<String> elements=Arrays.asList(xmlExternalEntity.getExternalEntities());  configureStringList_NB1.setStringList(elements);}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  public void fill(Shape s){  System.err.println("fill");}  }
class C{  public void showSelectedSynapseProperties(){  SynapseDialog dialog=SynapseDialog.createSynapseDialog(this.getSelectedModelSynapses());  dialog.setModalityType(Dialog.ModalityType.MODELESS);  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);}  }
class C{  @Override protected void init(){  super.init();  setMultiSelect(true);  setSelectable(true);}  }
class C{  GregorianCalendar(TimeZone zone,Locale locale,boolean flag){  super(zone,locale);  gdate=(BaseCalendar.Date)gcal.newCalendarDate(getZone());}  }
class C{  public synchronized void resetToDefaultEndpoints(){  this.endpoints=defaultEndpoints;  this.apiBroker.send(new ApiBroker.ChangeEndpoints(endpoints));}  }
class C{  public SourceBuilder<T> emitAll(Collection<T> records){  builder.emitAll(records);  return this;}  }
class C{  public static String doubleToString(double value,int afterDecimalPoint){  StringBuffer stringBuffer;  double temp;  int dotPosition;  long precisionValue;  temp=value * Math.pow(10.0,afterDecimalPoint);  if (Math.abs(temp) < Long.MAX_VALUE) {    precisionValue=(temp > 0) ? (long)(temp + 0.5) : -(long)(Math.abs(temp) + 0.5);    if (precisionValue == 0) {      stringBuffer=new StringBuffer(String.valueOf(0));    } else {      stringBuffer=new StringBuffer(String.valueOf(precisionValue));    }    if (afterDecimalPoint == 0) {      return stringBuffer.toString();    }    dotPosition=stringBuffer.length() - afterDecimalPoint;    while (((precisionValue < 0) && (dotPosition < 1)) || (dotPosition < 0)) {      if (precisionValue < 0) {        stringBuffer.insert(1,'0');      } else {        stringBuffer.insert(0,'0');      }      dotPosition++;    }    stringBuffer.insert(dotPosition,'.');    if ((precisionValue < 0) && (stringBuffer.charAt(1) == '.')) {      stringBuffer.insert(1,'0');    } else     if (stringBuffer.charAt(0) == '.') {      stringBuffer.insert(0,'0');    }    int currentPos=stringBuffer.length() - 1;    while ((currentPos > dotPosition) && (stringBuffer.charAt(currentPos) == '0')) {      stringBuffer.setCharAt(currentPos--,' ');    }    if (stringBuffer.charAt(currentPos) == '.') {      stringBuffer.setCharAt(currentPos,' ');    }    return stringBuffer.toString().trim();  }  return new String("" + value);}  }
class C{  public void write(int c){  int newcount=count + 1;  if (newcount > buf.length) {    if (writer == null) {      expandCapacity(newcount);    } else {      flush();      newcount=1;    }  }  buf[count]=(char)c;  count=newcount;}  }
class C{  public final void checkAccess(){}  }
class C{  public Where<T,ID> and(){  ManyClause clause=new ManyClause(pop("AND"),ManyClause.AND_OPERATION);  push(clause);  addNeedsFuture(clause);  return this;}  }
class C{  public void forwardEvent(EventType eventType,Object data,boolean historyEvent){  AppEvent ae=new AppEvent(eventType,data);  ae.setHistoryEvent(historyEvent);  dispatch(ae);}  }
class C{  public ReferenceCount decrement(){  return new ReferenceCount(this.getRaw() - 1);}  }
class C{  public void receiveErrorqueryStorageProcessors(java.lang.Exception e){}  }
class C{  public int squash(int value){  return Math.min(Math.max(getMin(),value),getMax());}  }
class C{  public VariableReference addFieldAssignment(TestCase test,GenericField field,int position,int recursionDepth) throws ConstructionFailedException {  logger.debug("Recursion depth: " + recursionDepth);  if (recursionDepth > Properties.MAX_RECURSION) {    logger.debug("Max recursion depth reached");    throw new ConstructionFailedException("Max recursion depth reached");  }  logger.debug("Adding field " + field);  int length=test.size();  VariableReference callee=null;  if (!field.isStatic()) {    callee=createOrReuseVariable(test,field.getOwnerType(),position,recursionDepth,null,false,false,false);    position+=test.size() - length;    length=test.size();    if (!TestUsageChecker.canUse(field.getField(),callee.getVariableClass())) {      logger.debug("Cannot call field " + field + " with callee of type "+ callee.getClassName());      throw new ConstructionFailedException("Cannot apply field to this callee");    }  }  VariableReference var=createOrReuseVariable(test,field.getFieldType(),position,recursionDepth,callee,true,false,false);  int newLength=test.size();  position+=(newLength - length);  FieldReference f=new FieldReference(test,field,callee);  if (f.equals(var))   throw new ConstructionFailedException("Self assignment");  Statement st=new AssignmentStatement(test,f,var);  VariableReference ret=test.addStatement(st,position);  assert (test.isValid());  return ret;}  }
class C{  public static void print(int[] a){  int n=a.length;  StdOut.println(n);  for (int i=0; i < n; i++) {    StdOut.printf("%9d ",a[i]);  }  StdOut.println();}  }
class C{  public MultipartBuilder attachment(InputStream is,String filename,MediaType mediaType){  return bodyPart(new StreamDataBodyPart(ATTACHMENT_NAME,is,filename,mediaType));}  }
class C{  public void defineLocal() throws IOException {  writeCode(DEFINE_LOCAL);}  }
class C{  public AccountHeaderBuilder withTranslucentStatusBar(boolean translucentStatusBar){  this.mTranslucentStatusBar=translucentStatusBar;  return this;}  }
class C{  public boolean isPointSelected(Point p){  int row=rowAtPoint(p);  int col=columnAtPoint(p);  if (row == -1 || col == -1)   return false;  int sel[]=getSelectedRows();  for (int i=0; i < sel.length; i++)   if (sel[i] == row)   return true;  return false;}  }
class C{  public void play(Context context,Uri uri,boolean looping,int stream){  Command cmd=new Command();  cmd.requestTime=SystemClock.uptimeMillis();  cmd.code=PLAY;  cmd.context=context;  cmd.uri=uri;  cmd.looping=looping;  cmd.stream=stream;synchronized (mCmdQueue) {    enqueueLocked(cmd);    mState=PLAY;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:32.773 -0500",hash_original_method="03AA0E6A46D7F727B5D81615ADC51108",hash_generated_method="8DC11397EA3F6F6EF3CD12372C47ADB5") private static Bitmap makeBitmap(int minSideLength,int maxNumOfPixels,Uri uri,ContentResolver cr,ParcelFileDescriptor pfd,BitmapFactory.Options options){  Bitmap b=null;  try {    if (pfd == null)     pfd=makeInputStream(uri,cr);    if (pfd == null)     return null;    if (options == null)     options=new BitmapFactory.Options();    FileDescriptor fd=pfd.getFileDescriptor();    options.inSampleSize=1;    options.inJustDecodeBounds=true;    BitmapFactory.decodeFileDescriptor(fd,null,options);    if (options.mCancel || options.outWidth == -1 || options.outHeight == -1) {      return null;    }    options.inSampleSize=computeSampleSize(options,minSideLength,maxNumOfPixels);    options.inJustDecodeBounds=false;    options.inDither=false;    options.inPreferredConfig=Bitmap.Config.ARGB_8888;    b=BitmapFactory.decodeFileDescriptor(fd,null,options);  } catch (  OutOfMemoryError ex) {    Log.e(TAG,"Got oom exception ",ex);    return null;  } finally {    closeSilently(pfd);  }  return b;}  }
class C{  protected Button createOpenButton(){  Button ob=new Button();  ob.setUIID("MenuButton");  UIManager uim=parent.getUIManager();  Image i=(Image)uim.getThemeImageConstant("sideMenuImage");  if (i != null) {    ob.setIcon(i);  } else {    float size=4.5f;    try {      size=Float.parseFloat(uim.getThemeConstant("menuImageSize","4.5"));    } catch (    Throwable t) {      t.printStackTrace();    }    FontImage.setMaterialIcon(ob,FontImage.MATERIAL_MENU,size);  }  Image p=(Image)uim.getThemeImageConstant("sideMenuPressImage");  if (p != null) {    ob.setPressedIcon(p);  }  return ob;}  }
class C{  public static Collection<Range> all(){  return enums.all();}  }
class C{  @Override public final boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (!(obj instanceof Scheme))   return false;  Scheme s=(Scheme)obj;  return (name.equals(s.name) && defaultPort == s.defaultPort && layered == s.layered && socketFactory.equals(s.socketFactory));}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_TWO_OR_THREE,null));}  }
class C{  public void denyTypesByRegExp(final Pattern... regexps){  denyPermission(new RegExpTypePermission(regexps));}  }
class C{  public Car newCar(String road,String number){  Car car=getByRoadAndNumber(road,number);  if (car == null) {    car=new Car(road,number);    register(car);  }  return car;}  }
class C{  public CommandRegistry(boolean allowCommandsWithUsername,String botUsername){  this.allowCommandsWithUsername=allowCommandsWithUsername;  this.botUsername=botUsername;}  }
class C{  private int findMethodParameterIndex(String mtdName,Class<?>[] mtdTypes,Annotation[][] mtdParamAnns){  List<Integer> allowedParamIdxs=new ArrayList<>(mtdTypes.length);  for (int i=0; i < mtdTypes.length; i++) {    Class<?> paramType=mtdTypes[i];    if (GridifyUtils.isMethodParameterTypeAllowed(paramType))     allowedParamIdxs.add(i);  }  assert !allowedParamIdxs.isEmpty() : "Invalid method signature. Failed to get valid method parameter " + "types [mtdName=" + mtdName + ", mtdTypes="+ Arrays.asList(mtdTypes)+ ']';  if (allowedParamIdxs.size() == 1)   return allowedParamIdxs.get(0);  List<Integer> annParamIdxs=new ArrayList<>(mtdTypes.length);  for (int i=0; i < mtdTypes.length; i++) {    if (GridifyUtils.isMethodParameterTypeAnnotated(mtdParamAnns[i]))     annParamIdxs.add(i);  }  assert annParamIdxs.size() == 1 : "Invalid method signature. Method parameter must be annotated with @" + GridifyInput.class.getSimpleName() + "[mtdName="+ mtdName+ ", mtdTypes="+ Arrays.asList(mtdTypes)+ ", allowedParamIdxs="+ allowedParamIdxs+ ", annParamIdxs="+ annParamIdxs+ ']';  return annParamIdxs.get(0);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:32.166 -0500",hash_original_method="3C94069B7580B83ACAD9A7049BA1E3DA",hash_generated_method="14ACC9FC067849549AFBF7F4DBB09450") public void reset(){  tbytes=crc=0;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void actionPerformed(ActionEvent e){  int parserCount=getParserCount();  if (parserCount == 0) {    return;  }  long begin=0;  if (DEBUG_PARSING) {    begin=System.currentTimeMillis();  }  RSyntaxDocument doc=(RSyntaxDocument)textArea.getDocument();  Element root=doc.getDefaultRootElement();  int firstLine=firstOffsetModded == null ? 0 : root.getElementIndex(firstOffsetModded.getOffset());  int lastLine=lastOffsetModded == null ? root.getElementCount() - 1 : root.getElementIndex(lastOffsetModded.getOffset());  firstOffsetModded=lastOffsetModded=null;  if (DEBUG_PARSING) {    System.out.println("[DEBUG]: Minimum lines to parse: " + firstLine + "-"+ lastLine);  }  String style=textArea.getSyntaxEditingStyle();  doc.readLock();  try {    for (int i=0; i < parserCount; i++) {      Parser parser=getParser(i);      if (parser.isEnabled()) {        ParseResult res=parser.parse(doc,style);        addParserNoticeHighlights(res);      } else {        clearParserNoticeHighlights(parser);      }    }    textArea.fireParserNoticesChange();  }  finally {    doc.readUnlock();  }  if (DEBUG_PARSING) {    float time=(System.currentTimeMillis() - begin) / 1000f;    System.err.println("Total parsing time: " + time + " seconds");  }}  }
class C{  public boolean isLeaves(){  return !(isComposite(boundable1) || isComposite(boundable2));}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  if ((keySize + ivSize) > digest.getDigestSize()) {    throw new IllegalArgumentException("Can't generate a derived key " + (keySize + ivSize) + " bytes long.");  }  byte[] dKey=generateDerivedKey();  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  private void loadQoSSettings(){  storage.get(qosSettingsUri,null);}  }
class C{  public boolean isNeedSaved(){  return false;}  }
class C{  @Override public void relocate(){  int w=120, h=130;  int x=(this.getWidth() - w) / 2, y=(this.getHeight() - h) / 2;  surrogateLabel.setLocation(10,10);  faultySurrogatesRadioButton.setLocation(x,y + 55);  replaceSurrogatesRadioButton.setLocation(x,y + 30);  discardSurrogatesRevisionRadioButton.setLocation(x,y + 80);  discardSurrogatesArticleRadioButton.setLocation(x,y + 105);}  }
class C{  public LoadResult(final List<Pair<IPlugin<T>,PluginStatus>> loadedPlugins,final List<Pair<String,Throwable>> failedPlugins){  this.loadedPlugins=Lists.newArrayList(Preconditions.checkNotNull(loadedPlugins,"IE01657: Loaded plugins argument can not be null"));  this.failedPlugins=Lists.newArrayList(Preconditions.checkNotNull(failedPlugins,"IE01659: Failed plugins argument can not be null"));}  }
class C{  public double optDouble(String key,double defaultValue){  try {    Object o=opt(key);    return o instanceof Number ? ((Number)o).doubleValue() : new Double((String)o).doubleValue();  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  static <K,V>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {  stream.writeInt(map.size());  for (  Map.Entry<K,V> entry : map.entrySet()) {    stream.writeObject(entry.getKey());    stream.writeObject(entry.getValue());  }}  }
class C{  public void addListener(final IGraphBuilderManagerListener listener){  m_listeners.addListener(listener);}  }
class C{  private void tryShutdown(){  if (isClosing() && isOkToClose())   shutdown(closeFuture.get());}  }
class C{  protected GenericPlanStrategy<T,I> chooseStrategy(final String subpopulation){  final StrategyWeights<T,I> weights=getStrategyWeights(subpopulation);  double rnd=MatsimRandom.getRandom().nextDouble() * weights.totalWeights;  double sum=0.0;  for (int i=0, max=weights.weights.size(); i < max; i++) {    sum+=weights.weights.get(i);    if (rnd <= sum) {      return weights.strategies.get(i);    }  }  return null;}  }
class C{  @Override protected final long total(){  return heap.getHeapMemoryUsage().getCommitted();}  }
class C{  private static int med3(float[] x,int a,int b,int c){  return (x[a] < x[b] ? (x[b] < x[c] ? b : x[a] < x[c] ? c : a) : (x[b] > x[c] ? b : x[a] > x[c] ? c : a));}  }
class C{  private boolean updateDistanceAndCheckAchievements(int difference,Player player,Map<String,Integer> distances,String achievementKeyName,HashMultimap<Integer,String> achievementsCache){  String uuid=player.getUniqueId().toString();  Integer distance=distances.get(uuid);  if (distance == null) {    distances.put(uuid,plugin.getDb().updateAndGetDistance(uuid,0,achievementKeyName.toLowerCase()));    return false;  }  distance+=difference;  distances.put(uuid,distance);  for (  Integer achievementThreshold : achievementsCache.keySet()) {    if (distance > achievementThreshold && !achievementsCache.get(achievementThreshold).contains(uuid)) {      String achievementName=plugin.getPluginConfig().getString(achievementKeyName + "." + achievementThreshold+ ".Name");      if (!plugin.getDb().hasPlayerAchievement(player,achievementName))       awardDistanceAchievement(player,achievementThreshold,achievementKeyName + ".");      achievementsCache.put(achievementThreshold,uuid);    }  }  return true;}  }
class C{  public Counter(){}  }
class C{  public PolynomialGF2mSmallM(GF2mField field,int deg,char typeOfPolynomial,SecureRandom sr){  this.field=field;switch (typeOfPolynomial) {case PolynomialGF2mSmallM.RANDOM_IRREDUCIBLE_POLYNOMIAL:    coefficients=createRandomIrreduciblePolynomial(deg,sr);  break;default :throw new IllegalArgumentException(" Error: type " + typeOfPolynomial + " is not defined for GF2smallmPolynomial");}computeDegree();}  }
class C{  public void step(SimState state){}  }
class C{  @Override public void close(){  ConfigurationManager.clearLocalConfigs();}  }
class C{  protected static PduBody parseParts(ByteArrayInputStream pduDataStream){  if (pduDataStream == null) {    return null;  }  int count=parseUnsignedInt(pduDataStream);  PduBody body=new PduBody();  for (int i=0; i < count; i++) {    int headerLength=parseUnsignedInt(pduDataStream);    int dataLength=parseUnsignedInt(pduDataStream);    PduPart part=new PduPart();    int startPos=pduDataStream.available();    if (startPos <= 0) {      return null;    }    HashMap<Integer,Object> map=new HashMap<Integer,Object>();    byte[] contentType=parseContentType(pduDataStream,map);    if (null != contentType) {      part.setContentType(contentType);    } else {      part.setContentType((PduContentTypes.contentTypes[0]).getBytes());    }    byte[] name=(byte[])map.get(PduPart.P_NAME);    if (null != name) {      part.setName(name);    }    Integer charset=(Integer)map.get(PduPart.P_CHARSET);    if (null != charset) {      part.setCharset(charset);    }    int endPos=pduDataStream.available();    int partHeaderLen=headerLength - (startPos - endPos);    if (partHeaderLen > 0) {      if (false == parsePartHeaders(pduDataStream,part,partHeaderLen)) {        return null;      }    } else     if (partHeaderLen < 0) {      return null;    }    if ((null == part.getContentLocation()) && (null == part.getName()) && (null == part.getFilename())&& (null == part.getContentId())) {      part.setContentLocation(Long.toOctalString(System.currentTimeMillis()).getBytes());    }    if (dataLength > 0) {      byte[] partData=new byte[dataLength];      String partContentType=new String(part.getContentType());      pduDataStream.read(partData,0,dataLength);      if (partContentType.equalsIgnoreCase(ContentType.MULTIPART_ALTERNATIVE)) {        PduBody childBody=parseParts(new ByteArrayInputStream(partData));        part=childBody.getPart(0);      } else {        byte[] partDataEncoding=part.getContentTransferEncoding();        if (null != partDataEncoding) {          String encoding=new String(partDataEncoding);          if (encoding.equalsIgnoreCase(PduPart.P_BASE64)) {            partData=Base64.decodeBase64(partData);          } else           if (encoding.equalsIgnoreCase(PduPart.P_QUOTED_PRINTABLE)) {            partData=QuotedPrintable.decodeQuotedPrintable(partData);          } else {          }        }        if (null == partData) {          log("Decode part data error!");          return null;        }        part.setData(partData);      }    }    if (THE_FIRST_PART == checkPartPosition(part)) {      body.addPart(0,part);    } else {      body.addPart(part);    }  }  return body;}  }
class C{  public void faceTarget(MowzieModelRenderer box,float f,float f3,float f4){  box.rotateAngleY+=(f3 / (180f / (float)Math.PI)) / f;  box.rotateAngleX+=(f4 / (180f / (float)Math.PI)) / f;}  }
class C{  private void sb7(int a,int b,int c,int d){  int t1=b ^ c;  int t2=c & t1;  int t3=d ^ t2;  int t4=a ^ t3;  int t5=d | t1;  int t6=t4 & t5;  X1=b ^ t6;  int t8=t3 | X1;  int t9=a & t4;  X3=t1 ^ t9;  int t11=t4 ^ t8;  int t12=X3 & t11;  X2=t3 ^ t12;  X0=(~t11) ^ (X3 & X2);}  }
class C{  @Override public int updateJobDetail(Connection conn,JobDetail job) throws IOException, SQLException {  ByteArrayOutputStream baos=serializeJobData(job.getJobDataMap());  int len=baos.toByteArray().length;  ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());  PreparedStatement ps=null;  int insertResult=0;  try {    ps=conn.prepareStatement(rtp(UPDATE_JOB_DETAIL));    ps.setString(1,job.getDescription());    ps.setString(2,job.getJobClass().getName());    setBoolean(ps,3,job.isDurable());    setBoolean(ps,4,job.isConcurrentExectionDisallowed());    setBoolean(ps,5,job.isPersistJobDataAfterExecution());    setBoolean(ps,6,job.requestsRecovery());    ps.setBinaryStream(7,bais,len);    ps.setString(8,job.getKey().getName());    ps.setString(9,job.getKey().getGroup());    insertResult=ps.executeUpdate();  }  finally {    closeStatement(ps);  }  return insertResult;}  }
class C{  @Override public String toString(){  return "isOpen=" + isOpen;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean rectCrossesPoly(final double rMinX,final double rMinY,final double rMaxX,final double rMaxY,final double[] shapeX,final double[] shapeY,final double sMinX,final double sMinY,final double sMaxX,final double sMaxY){  if (rectDisjoint(rMinX,rMinY,rMaxX,rMaxY,sMinX,sMinY,sMaxX,sMaxY)) {    return false;  }  final double[][] bbox=new double[][]{{rMinX,rMinY},{rMaxX,rMinY},{rMaxX,rMaxY},{rMinX,rMaxY},{rMinX,rMinY}};  final int polyLength=shapeX.length - 1;  double d, s, t, a1, b1, c1, a2, b2, c2;  double x00, y00, x01, y01, x10, y10, x11, y11;  for (short b=0; b < 4; ++b) {    a1=bbox[b + 1][1] - bbox[b][1];    b1=bbox[b][0] - bbox[b + 1][0];    c1=a1 * bbox[b + 1][0] + b1 * bbox[b + 1][1];    for (int p=0; p < polyLength; ++p) {      a2=shapeY[p + 1] - shapeY[p];      b2=shapeX[p] - shapeX[p + 1];      d=a1 * b2 - a2 * b1;      if (d != 0) {        c2=a2 * shapeX[p + 1] + b2 * shapeY[p + 1];        s=(1 / d) * (b2 * c1 - b1 * c2);        t=(1 / d) * (a1 * c2 - a2 * c1);        x00=StrictMath.min(bbox[b][0],bbox[b + 1][0]) - TOLERANCE;        x01=StrictMath.max(bbox[b][0],bbox[b + 1][0]) + TOLERANCE;        y00=StrictMath.min(bbox[b][1],bbox[b + 1][1]) - TOLERANCE;        y01=StrictMath.max(bbox[b][1],bbox[b + 1][1]) + TOLERANCE;        x10=StrictMath.min(shapeX[p],shapeX[p + 1]) - TOLERANCE;        x11=StrictMath.max(shapeX[p],shapeX[p + 1]) + TOLERANCE;        y10=StrictMath.min(shapeY[p],shapeY[p + 1]) - TOLERANCE;        y11=StrictMath.max(shapeY[p],shapeY[p + 1]) + TOLERANCE;        boolean touching=((x00 == s && y00 == t) || (x01 == s && y01 == t)) || ((x10 == s && y10 == t) || (x11 == s && y11 == t));        if (!(touching || x00 > s || x01 < s || y00 > t || y01 < t || x10 > s || x11 < s || y10 > t || y11 < t)) {          return true;        }      }    }  }  return false;}  }
class C{  private boolean makeServiceNameUnique(ServiceInfoImpl info){  final String originalQualifiedName=info.getKey();  final long now=System.currentTimeMillis();  boolean collision;  do {    collision=false;    for (    DNSEntry dnsEntry : this.getCache().getDNSEntryList(info.getKey())) {      if (DNSRecordType.TYPE_SRV.equals(dnsEntry.getRecordType()) && !dnsEntry.isExpired(now)) {        final DNSRecord.Service s=(DNSRecord.Service)dnsEntry;        if (s.getPort() != info.getPort() || !s.getServer().equals(_localHost.getName())) {          if (logger.isLoggable(Level.FINER)) {            logger.finer("makeServiceNameUnique() JmDNS.makeServiceNameUnique srv collision:" + dnsEntry + " s.server="+ s.getServer()+ " "+ _localHost.getName()+ " equals:"+ (s.getServer().equals(_localHost.getName())));          }          info.setName(NameRegister.Factory.getRegistry().incrementName(_localHost.getInetAddress(),info.getName(),NameRegister.NameType.SERVICE));          collision=true;          break;        }      }    }    final ServiceInfo selfService=_services.get(info.getKey());    if (selfService != null && selfService != info) {      info.setName(NameRegister.Factory.getRegistry().incrementName(_localHost.getInetAddress(),info.getName(),NameRegister.NameType.SERVICE));      collision=true;    }  } while (collision);  return !(originalQualifiedName.equals(info.getKey()));}  }
class C{  private void onHotspotBoundsChanged(){  final int count=mExitingRipplesCount;  final RippleForeground[] ripples=mExitingRipples;  for (int i=0; i < count; i++) {    ripples[i].onHotspotBoundsChanged();  }  if (mRipple != null) {    mRipple.onHotspotBoundsChanged();  }  if (mBackground != null) {    mBackground.onHotspotBoundsChanged();  }}  }
class C{  private void appendIndentation(int level,StringBuilder result){  for (int i=0; i < level; ++i)   result.append("  ");}  }
class C{  private void solve(int method) throws NullPointerException {  if (solved) {    return;  }  if (!reducedRowEchelonForm) {    reducedRowEchelonForm(method);  }  if (!isSolvable(method)) {    if (LOG.isDebugging()) {      LOG.debugFine("Equation system is not solvable!");    }    return;  }  int cols=coeff[0].length;  TIntArrayList boundIndices=new TIntArrayList();  x_0=new double[cols];  for (int i=0; i < coeff.length; i++) {    for (int j=i; j < coeff[row[i]].length; j++) {      if (coeff[row[i]][col[j]] == 1) {        x_0[col[i]]=rhs[row[i]];        boundIndices.add(col[i]);        break;      }    }  }  TIntArrayList freeIndices=new TIntArrayList();  for (int i=0; i < coeff[0].length; i++) {    if (boundIndices.contains(i)) {      continue;    }    freeIndices.add(i);  }  StringBuilder msg=new StringBuilder();  if (LOG.isDebugging()) {    msg.append("\nSpecial solution x_0 = [").append(FormatUtil.format(x_0,",",FormatUtil.NF4)).append(']');    msg.append("\nbound Indices ").append(boundIndices);    msg.append("\nfree Indices ").append(freeIndices);  }  boundIndices.sort();  int freeIndex=0;  int boundIndex=0;  u=new double[cols][freeIndices.size()];  for (int j=0; j < u[0].length; j++) {    for (int i=0; i < u.length; i++) {      if (freeIndex < freeIndices.size() && i == freeIndices.get(freeIndex)) {        u[i][j]=1;      } else       if (boundIndex < boundIndices.size() && i == boundIndices.get(boundIndex)) {        u[i][j]=-coeff[row[boundIndex]][freeIndices.get(freeIndex)];        boundIndex++;      }    }    freeIndex++;    boundIndex=0;  }  if (LOG.isDebugging()) {    msg.append("\nU");    for (    double[] anU : u) {      msg.append('\n').append(FormatUtil.format(anU,",",FormatUtil.NF4));    }    LOG.debugFine(msg.toString());  }  solved=true;}  }
class C{  public BESplitPaneUI(){  super();}  }
class C{  boolean cleanupNonDirty(LocalRegion r){  if (isDirty()) {    return false;  } else {    cleanup(r);    return true;  }}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  protected static void propagatePreviousLubs(final TargetConstraints targetRecord,Lubs solution,final Map<AnnotatedTypeMirror,Set<AnnotationMirror>> subtypesOfTarget){  for (  final Entry<TypeVariable,Set<AnnotationMirror>> supertypeTarget : targetRecord.supertypes.targets.entrySet()) {    final AnnotatedTypeMirror supertargetLub=solution.getType(supertypeTarget.getKey());    if (supertargetLub != null) {      Set<AnnotationMirror> supertargetTypeAnnos=subtypesOfTarget.get(supertargetLub);      if (supertargetTypeAnnos != null) {        supertargetTypeAnnos.addAll(supertypeTarget.getValue());      } else {        subtypesOfTarget.put(supertargetLub,supertypeTarget.getValue());      }    }  }}  }
class C{  private boolean showHelpOnFirstLaunch(){  try {    PackageInfo info=getPackageManager().getPackageInfo(PACKAGE_NAME,0);    int currentVersion=info.versionCode;    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);    int lastVersion=prefs.getInt(PreferencesActivity.KEY_HELP_VERSION_SHOWN,0);    if (currentVersion > lastVersion) {      prefs.edit().putInt(PreferencesActivity.KEY_HELP_VERSION_SHOWN,currentVersion).commit();      Intent intent=new Intent(this,HelpActivity.class);      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);      String page=lastVersion == 0 ? HelpActivity.DEFAULT_PAGE : HelpActivity.WHATS_NEW_PAGE;      intent.putExtra(HelpActivity.REQUESTED_PAGE_KEY,page);      startActivity(intent);      return true;    }  } catch (  PackageManager.NameNotFoundException e) {    Log.w(TAG,e);  }  return false;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private <T>InternalProviderImpl installInternalProvider(Class<T> clazz,String bindingName,InternalProviderImpl<? extends T> internalProvider,boolean isBound){  if (bindingName == null) {    if (isBound) {      return installUnNamedProvider(mapClassesToUnNamedBoundProviders,clazz,internalProvider);    } else {      return installUnNamedProvider(mapClassesToUnNamedUnBoundProviders,clazz,internalProvider);    }  } else {    return installNamedProvider(mapClassesToNamedBoundProviders,clazz,bindingName,internalProvider);  }}  }
class C{  private synchronized boolean performTurn(Value systemAction){  boolean turnPerformed=false;  simulatorState.setParameters(domain.getParameters());  Assignment systemAssign=new Assignment(system.getSettings().systemOutput,systemAction);  simulatorState.addToState(systemAssign);  while (!simulatorState.getNewVariables().isEmpty()) {    Set<String> toProcess=simulatorState.getNewVariables();    simulatorState.reduce();    for (    Model model : domain.getModels()) {      if (model.isTriggered(simulatorState,toProcess)) {        boolean change=model.trigger(simulatorState);        if (change && model.isBlocking()) {          break;        }      }    }    if (!simulatorState.getUtilityNodeIds().isEmpty()) {      double reward=simulatorState.queryUtil();      String comment="Reward: " + StringUtils.getShortForm(reward);      system.displayComment(comment);      system.getState().addEvidence(new Assignment("R(" + systemAssign.addPrimes() + ")",reward));      simulatorState.removeNodes(simulatorState.getUtilityNodeIds());    }    if (addNewObservations()) {      turnPerformed=true;    }    simulatorState.addEvidence(simulatorState.getSample());  }  return turnPerformed;}  }
class C{  public DigitalSignatureValidationException(){}  }
class C{  public void subdivide(double t,Segment s0,Segment s1){  Linear l0=null, l1=null;  if (s0 instanceof Linear)   l0=(Linear)s0;  if (s1 instanceof Linear)   l1=(Linear)s1;  subdivide(t,l0,l1);}  }
class C{  public Object[] patch_apply(LinkedList<Patch> patches,String text){  if (patches.isEmpty()) {    return new Object[]{text,new boolean[0]};  }  patches=patch_deepCopy(patches);  String nullPadding=patch_addPadding(patches);  text=nullPadding + text + nullPadding;  patch_splitMax(patches);  int x=0;  int delta=0;  boolean[] results=new boolean[patches.size()];  for (  Patch aPatch : patches) {    int expected_loc=aPatch.start2 + delta;    String text1=diff_text1(aPatch.diffs);    int start_loc;    int end_loc=-1;    if (text1.length() > this.Match_MaxBits) {      start_loc=match_main(text,text1.substring(0,this.Match_MaxBits),expected_loc);      if (start_loc != -1) {        end_loc=match_main(text,text1.substring(text1.length() - this.Match_MaxBits),expected_loc + text1.length() - this.Match_MaxBits);        if (end_loc == -1 || start_loc >= end_loc) {          start_loc=-1;        }      }    } else {      start_loc=match_main(text,text1,expected_loc);    }    if (start_loc == -1) {      results[x]=false;      delta-=aPatch.length2 - aPatch.length1;    } else {      results[x]=true;      delta=start_loc - expected_loc;      String text2;      if (end_loc == -1) {        text2=text.substring(start_loc,Math.min(start_loc + text1.length(),text.length()));      } else {        text2=text.substring(start_loc,Math.min(end_loc + this.Match_MaxBits,text.length()));      }      if (text1.equals(text2)) {        text=text.substring(0,start_loc) + diff_text2(aPatch.diffs) + text.substring(start_loc + text1.length());      } else {        LinkedList<Diff> diffs=diff_main(text1,text2,false);        if (text1.length() > this.Match_MaxBits && diff_levenshtein(diffs) / (float)text1.length() > this.Patch_DeleteThreshold) {          results[x]=false;        } else {          diff_cleanupSemanticLossless(diffs);          int index1=0;          for (          Diff aDiff : aPatch.diffs) {            if (aDiff.operation != Operation.EQUAL) {              int index2=diff_xIndex(diffs,index1);              if (aDiff.operation == Operation.INSERT) {                text=text.substring(0,start_loc + index2) + aDiff.text + text.substring(start_loc + index2);              } else               if (aDiff.operation == Operation.DELETE) {                text=text.substring(0,start_loc + index2) + text.substring(start_loc + diff_xIndex(diffs,index1 + aDiff.text.length()));              }            }            if (aDiff.operation != Operation.DELETE) {              index1+=aDiff.text.length();            }          }        }      }    }    x++;  }  text=text.substring(nullPadding.length(),text.length() - nullPadding.length());  return new Object[]{text,results};}  }
class C{  protected static EventType createEventType(StatementContext statementContext,StatViewAdditionalProps additionalProps,int streamNum){  Map<String,Object> eventTypeMap=new HashMap<String,Object>();  eventTypeMap.put(ViewFieldEnum.REGRESSION__SLOPE.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__YINTERCEPT.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__XAVERAGE.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__XSTANDARDDEVIATIONPOP.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__XSTANDARDDEVIATIONSAMPLE.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__XSUM.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__XVARIANCE.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__YAVERAGE.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__YSTANDARDDEVIATIONPOP.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__YSTANDARDDEVIATIONSAMPLE.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__YSUM.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__YVARIANCE.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__DATAPOINTS.getName(),Long.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__N.getName(),Long.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__SUMX.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__SUMXSQ.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__SUMXY.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__SUMY.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.REGRESSION__SUMYSQ.getName(),Double.class);  StatViewAdditionalProps.addCheckDupProperties(eventTypeMap,additionalProps,ViewFieldEnum.REGRESSION__SLOPE,ViewFieldEnum.REGRESSION__YINTERCEPT);  String outputEventTypeName=statementContext.getStatementId() + "_regview_" + streamNum;  return statementContext.getEventAdapterService().createAnonymousMapType(outputEventTypeName,eventTypeMap,false);}  }
class C{  private synchronized void drawIsometricWreckSpritesForHex(Coords c,Graphics g,ArrayList<IsometricWreckSprite> spriteArrayList){  Rectangle view=g.getClipBounds();  for (  IsometricWreckSprite sprite : spriteArrayList) {    Coords cp=sprite.getEntity().getPosition();    if (cp.equals(c) && view.intersects(sprite.getBounds()) && !sprite.isHidden()) {      if (!sprite.isReady()) {        sprite.prepare();      }      sprite.drawOnto(g,sprite.getBounds().x,sprite.getBounds().y,this,false);    }  }}  }
class C{  public static long moduloSignedPowerOfTwo(final long value,final long spot){  if (spot == Long.MIN_VALUE) {    return value != Long.MIN_VALUE ? value : 0;  } else {    long s=value >> 63;    return ((value + s ^ s) & abs(spot) - 1) + s ^ s;  }}  }
class C{  public static void doMain(String[] args){  String job="java:aggregatingDataHDFS";  final String keyspaceName="test";  final String tableName="songs";  String home=System.getProperty("hadoop.home.dir");  final String splitSep=",";  ContextProperties p=new ContextProperties(args);  DeepSparkContext deepContext=new DeepSparkContext(p.getCluster(),job,p.getSparkHome(),p.getJars());  ExtractorConfig<Cells> extractorConfig=new ExtractorConfig<>();  Map<String,Serializable> values=new HashMap<>();  values.put(ExtractorConstants.HOST,"127.0.0.1");  values.put(ExtractorConstants.PORT,"9000");  values.put(ExtractorConstants.FS_FILE_SEPARATOR,",");  values.put(ExtractorConstants.FS_FILE_PATH,"/user/hadoop/test/songs.csv");  values.put(ExtractorConstants.HDFS_TYPE,ExtractorConstants.HDFS_TYPE);  values.put(ExtractorConstants.TABLE,tableName);  values.put(ExtractorConstants.CATALOG,keyspaceName);  extractorConfig.setValues(values);  extractorConfig.setExtractorImplClassName(ExtractorConstants.HDFS);  RDD<Cells> rdd2=deepContext.createHDFSRDD(extractorConfig);  deepContext.stop();}  }
class C{  public static AboutFragment newInstance(int sectionNumber){  AboutFragment fragment=new AboutFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  static boolean isPoolingAllowed(String socketFactory,OutputStream trace,String authMech,String protocol,Hashtable<?,?> env) throws NamingException {  if (trace != null && !debug || (protocol == null && !supportPlainProtocol) || ("ssl".equalsIgnoreCase(protocol) && !supportSslProtocol)) {    d("Pooling disallowed due to tracing or unsupported pooling of protocol");    return false;  }  String COMPARATOR="java.util.Comparator";  boolean foundSockCmp=false;  if ((socketFactory != null) && !socketFactory.equals(LdapCtx.DEFAULT_SSL_FACTORY)) {    try {      Class<?> socketFactoryClass=Obj.helper.loadClass(socketFactory);      Class<?>[] interfaces=socketFactoryClass.getInterfaces();      for (int i=0; i < interfaces.length; i++) {        if (interfaces[i].getCanonicalName().equals(COMPARATOR)) {          foundSockCmp=true;        }      }    } catch (    Exception e) {      CommunicationException ce=new CommunicationException("Loading the socket factory");      ce.setRootCause(e);      throw ce;    }    if (!foundSockCmp) {      return false;    }  }  int p=findPool(authMech);  if (p < 0 || pools[p] == null) {    d("authmech not found: ",authMech);    return false;  }  d("using authmech: ",authMech);switch (p) {case NONE:case SIMPLE:    return true;case DIGEST:  return (env == null || env.get(SASL_CALLBACK) == null);}return false;}  }
class C{  private static MagnetOptions[] extractDownloadableMagnets(MagnetOptions[] magnets){  List<MagnetOptions> dls=new ArrayList<MagnetOptions>(magnets.length);  for (int i=0; i < magnets.length; i++) {    MagnetOptions magnet=magnets[i];    if (!magnet.isKeywordTopicOnly()) {      dls.add(magnets[i]);    }  }  if (dls.size() == magnets.length) {    return magnets;  } else {    return dls.toArray(new MagnetOptions[0]);  }}  }
class C{  public static void deleteFilesInDirectory(final File directory,final FilenameFilter filter,final Logger logger) throws IOException {  FileUtils.deleteFilesInDirectory(directory,filter,logger,false);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  UserDao.createTable(db,ifNotExists);  CategoryDao.createTable(db,ifNotExists);  ChallengeDao.createTable(db,ifNotExists);  AnswerDao.createTable(db,ifNotExists);  CompletionDao.createTable(db,ifNotExists);  SettingsDao.createTable(db,ifNotExists);  StatisticsDao.createTable(db,ifNotExists);}  }
class C{  public void writeParameter(String wrapperName,String id,int dimension,double value,double lower,double upper,XMLWriter writer){  writer.writeOpenTag(wrapperName);  writeParameter(id,dimension,value,lower,upper,writer);  writer.writeCloseTag(wrapperName);}  }
class C{  public void testBug27916() throws Exception {  createTable("testBug27916","(field1 TINYINT UNSIGNED, field2 SMALLINT UNSIGNED, field3 INT UNSIGNED, field4 INTEGER UNSIGNED, field5 MEDIUMINT UNSIGNED, field6 BIGINT UNSIGNED)");  ResultSetMetaData rsmd=this.stmt.executeQuery("SELECT * FROM testBug27916").getMetaData();  HashMap<String,Object> typeNameToPrecision=new HashMap<String,Object>();  this.rs=this.conn.getMetaData().getTypeInfo();  while (this.rs.next()) {    typeNameToPrecision.put(this.rs.getString("TYPE_NAME"),this.rs.getObject("PRECISION"));  }  this.rs=this.conn.getMetaData().getColumns(this.conn.getCatalog(),null,"testBug27916","%");  for (int i=0; i < rsmd.getColumnCount(); i++) {    this.rs.next();    String typeName=this.rs.getString("TYPE_NAME");    assertEquals(typeName,rsmd.getColumnTypeName(i + 1));    assertEquals(typeName,this.rs.getInt("COLUMN_SIZE"),rsmd.getPrecision(i + 1));    assertEquals(typeName,new Integer(rsmd.getPrecision(i + 1)),typeNameToPrecision.get(typeName));  }  if (!versionMeetsMinimum(5,0)) {    return;  }  Properties props=new Properties();  props.setProperty("useInformationSchema","false");  ArrayList<String> types=new ArrayList<String>();  Connection PropConn=getConnectionWithProps(props);  try {    DatabaseMetaData dbmd=PropConn.getMetaData();    this.rs=dbmd.getTypeInfo();    while (this.rs.next()) {      types.add(this.rs.getString("TYPE_NAME"));    }    this.rs.close();    this.rs=dbmd.getColumns("mysql",null,"time_zone_transition","%");    while (this.rs.next()) {      String typeName=this.rs.getString("TYPE_NAME");      assertTrue(typeName,types.contains(typeName));    }    this.rs.close();    this.rs=dbmd.getColumns("mysql",null,"proc","%");    while (this.rs.next()) {      String typeName=this.rs.getString("TYPE_NAME");      assertTrue(typeName,types.contains(typeName));    }    this.rs.close();    PropConn.close();    props.clear();    props.setProperty("useInformationSchema","true");    PropConn=getConnectionWithProps(props);    dbmd=PropConn.getMetaData();    this.rs=dbmd.getColumns("mysql",null,"time_zone_transition","%");    while (this.rs.next()) {      String typeName=this.rs.getString("TYPE_NAME");      assertTrue(typeName,types.contains(typeName));    }    this.rs.close();    this.rs=dbmd.getColumns("mysql",null,"proc","%");    while (this.rs.next()) {      String typeName=this.rs.getString("TYPE_NAME");      assertTrue(typeName,types.contains(typeName));    }    this.rs.close();    PropConn.close();    props.clear();  }  finally {    if (PropConn != null) {      PropConn.close();    }  }}  }
class C{  private void checkShellNotNested(LinearRing shell,Polygon p,GeometryGraph graph){  Coordinate[] shellPts=shell.getCoordinates();  LinearRing polyShell=(LinearRing)p.getExteriorRing();  Coordinate[] polyPts=polyShell.getCoordinates();  Coordinate shellPt=findPtNotNode(shellPts,polyShell,graph);  if (shellPt == null)   return;  boolean insidePolyShell=CGAlgorithms.isPointInRing(shellPt,polyPts);  if (!insidePolyShell)   return;  if (p.getNumInteriorRing() <= 0) {    validErr=new TopologyValidationError(TopologyValidationError.NESTED_SHELLS,shellPt);    return;  }  Coordinate badNestedPt=null;  for (int i=0; i < p.getNumInteriorRing(); i++) {    LinearRing hole=(LinearRing)p.getInteriorRingN(i);    badNestedPt=checkShellInsideHole(shell,hole,graph);    if (badNestedPt == null)     return;  }  validErr=new TopologyValidationError(TopologyValidationError.NESTED_SHELLS,badNestedPt);}  }
class C{  @Override public void exec(String sql,Result<Object> result,Object... args){  _kraken.query(sql).exec(result,args);}  }
class C{  public String sqlMetadata_primaryKeyNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_primaryKeyNames(catalogName,schemaName);}  }
class C{  public List<String> selectJobGroups(Connection conn) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_JOB_GROUPS));    rs=ps.executeQuery();    LinkedList<String> list=new LinkedList<String>();    while (rs.next()) {      list.add(rs.getString(1));    }    return list;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  final public boolean isStoreBlankNodes(){  return storeBlankNodes;}  }
class C{  public static int tokenizeProlog(char[] buf,int off,int end,Token token) throws PartialTokenException, InvalidTokenException, EmptyTokenException, ExtensibleTokenException, EndOfPrologException {  int tok;  if (off == end)   throw new EmptyTokenException();switch (charType(buf[off])) {case CT_QUOT:    return scanLit(CT_QUOT,buf,off + 1,end,token);case CT_APOS:  return scanLit(CT_APOS,buf,off + 1,end,token);case CT_LT:{  off+=1;  if (off == end)   throw new PartialTokenException();switch (charType(buf[off])) {case CT_EXCL:    return scanDecl(buf,off + 1,end,token);case CT_QUEST:  return scanPi(buf,off + 1,end,token);case CT_NMSTRT:case CT_LEAD2:token.tokenEnd=off - 1;throw new EndOfPrologException();}throw new InvalidTokenException(off);}case CT_CR:off+=1;if (off == end) throw new ExtensibleTokenException(TOK_PROLOG_S);if (charType(buf[off]) == CT_LF) off+=1;token.tokenEnd=off;return TOK_PROLOG_S;case CT_S:case CT_LF:token.tokenEnd=off + 1;return TOK_PROLOG_S;case CT_PERCNT:return scanPercent(buf,off + 1,end,token);case CT_COMMA:token.tokenEnd=off + 1;return TOK_COMMA;case CT_LSQB:token.tokenEnd=off + 1;return TOK_OPEN_BRACKET;case CT_RSQB:off+=1;if (off == end) throw new ExtensibleTokenException(TOK_CLOSE_BRACKET);if (buf[off] == ']') {if (off + 1 == end) throw new PartialTokenException();if (buf[off + 1] == '>') {token.tokenEnd=off + 2;return TOK_COND_SECT_CLOSE;}}token.tokenEnd=off;return TOK_CLOSE_BRACKET;case CT_LPAR:token.tokenEnd=off + 1;return TOK_OPEN_PAREN;case CT_RPAR:off+=1;if (off == end) throw new ExtensibleTokenException(TOK_CLOSE_PAREN);switch (charType(buf[off])) {case CT_AST:token.tokenEnd=off + 1;return TOK_CLOSE_PAREN_ASTERISK;case CT_QUEST:token.tokenEnd=off + 1;return TOK_CLOSE_PAREN_QUESTION;case CT_PLUS:token.tokenEnd=off + 1;return TOK_CLOSE_PAREN_PLUS;case CT_CR:case CT_LF:case CT_S:case CT_GT:case CT_COMMA:case CT_VERBAR:case CT_RPAR:token.tokenEnd=off;return TOK_CLOSE_PAREN;}throw new InvalidTokenException(off);case CT_VERBAR:token.tokenEnd=off + 1;return TOK_OR;case CT_GT:token.tokenEnd=off + 1;return TOK_DECL_CLOSE;case CT_NUM:return scanPoundName(buf,off + 1,end,token);case CT_LEAD2:if (end - off < 2) throw new PartialCharException(off);switch (charType2(buf,off)) {case CT_NMSTRT:off+=2;tok=TOK_NAME;break;case CT_NAME:off+=2;tok=TOK_NMTOKEN;break;default :throw new InvalidTokenException(off);}break;case CT_NMSTRT:tok=TOK_NAME;off+=1;break;case CT_NAME:case CT_MINUS:case CT_COLON:tok=TOK_NMTOKEN;off+=1;break;default :throw new InvalidTokenException(off);}while (off != end) {switch (charType(buf[off])) {case CT_NMSTRT:case CT_NAME:case CT_MINUS:off+=1;break;case CT_LEAD2:if (end - off < 2) throw new PartialCharException(off);if (!isNameChar2(buf,off)) throw new InvalidTokenException(off);off+=2;break;case CT_GT:case CT_RPAR:case CT_COMMA:case CT_VERBAR:case CT_LSQB:case CT_PERCNT:case CT_S:case CT_CR:case CT_LF:token.tokenEnd=off;return tok;case CT_COLON:off+=1;switch (tok) {case TOK_NAME:if (off == end) throw new PartialCharException(off);tok=TOK_PREFIXED_NAME;switch (charType(buf[off])) {case CT_NMSTRT:off+=1;break;case CT_LEAD2:if (end - off < 2) throw new PartialCharException(off);if (isNameChar2(buf,off)) {off+=2;break;}default :tok=TOK_NMTOKEN;break;}break;case TOK_PREFIXED_NAME:tok=TOK_NMTOKEN;break;}break;case CT_PLUS:if (tok == TOK_NMTOKEN) throw new InvalidTokenException(off);token.tokenEnd=off + 1;return TOK_NAME_PLUS;case CT_AST:if (tok == TOK_NMTOKEN) throw new InvalidTokenException(off);token.tokenEnd=off + 1;return TOK_NAME_ASTERISK;case CT_QUEST:if (tok == TOK_NMTOKEN) throw new InvalidTokenException(off);token.tokenEnd=off + 1;return TOK_NAME_QUESTION;default :throw new InvalidTokenException(off);}}throw new ExtensibleTokenException(tok);}  }
class C{  public final void writeBoolean(boolean v) throws IOException {  out.write(v ? 1 : 0);  incCount(1);}  }
class C{  static boolean isType(Symbol sym){  return sym != null && sym.kind == TYP;}  }
class C{  public char reverseMap(short glyphID){  Short result=glyphLookup.get(new Short(glyphID));  if (result == null) {    return '\000';  }  return (char)result.shortValue();}  }
class C{  @SuppressWarnings("unchecked") @Override public Generator<SelectableMultiPoint> construct(String[] args){  try {    Class<?> c=pointGen.getClass();    java.lang.reflect.Method cons=c.getDeclaredMethod("construct",new Class[]{args.getClass()});    Generator<IMultiPoint> newOne=(Generator<IMultiPoint>)cons.invoke(pointGen,new Object[]{args});    return new ConvertToSelectable(newOne);  } catch (  Exception e) {    return new ConvertToSelectable(pointGen);  }}  }
class C{  public void list(PrintStream out){  properties.list(out);}  }
class C{  public ExchangeRate(Fiat fiat){  this(Coin.COIN,fiat);}  }
class C{  private void calculateGridSizes(float numbersRadius,float xCenter,float yCenter,float textSize,float[] textGridHeights,float[] textGridWidths){  float offset1=numbersRadius;  float offset2=numbersRadius * ((float)Math.sqrt(3)) / 2f;  float offset3=numbersRadius / 2f;  mPaint.setTextSize(textSize);  mSelectedPaint.setTextSize(textSize);  yCenter-=(mPaint.descent() + mPaint.ascent()) / 2;  textGridHeights[0]=yCenter - offset1;  textGridWidths[0]=xCenter - offset1;  textGridHeights[1]=yCenter - offset2;  textGridWidths[1]=xCenter - offset2;  textGridHeights[2]=yCenter - offset3;  textGridWidths[2]=xCenter - offset3;  textGridHeights[3]=yCenter;  textGridWidths[3]=xCenter;  textGridHeights[4]=yCenter + offset3;  textGridWidths[4]=xCenter + offset3;  textGridHeights[5]=yCenter + offset2;  textGridWidths[5]=xCenter + offset2;  textGridHeights[6]=yCenter + offset1;  textGridWidths[6]=xCenter + offset1;}  }
class C{  static int copyBytes(RandomAccessFile os,InputStream is,int byteLimit,byte[] buffer) throws IOException {  int bytesCopied=0;  int nrRead;  while (bytesCopied < byteLimit && (nrRead=is.read(buffer,0,Math.min(buffer.length,byteLimit - bytesCopied))) != -1) {    os.write(buffer,0,nrRead);    bytesCopied+=nrRead;  }  return bytesCopied;}  }
class C{  public ISicresAdminIntercambioRegistralException(String message){  this(message,null);}  }
class C{  public ReadOnlyActionPipe<A> asReadOnly(){  return new ReadOnlyActionPipe<A>(this);}  }
class C{  protected IsolatedJavaFileManager(JavaFileManager fileman,CompiledCode unit,IsolatedClassLoader loader){  super(fileman);  this.unit=unit;  this.loader=loader;  this.loader.setCode(unit);}  }
class C{  @Override public void stop(){  if (!HAConfiguration.isHAEnabled(configuration)) {    LOG.info("HA is not enabled, no need to stop leader election service");    return;  }  try {    leaderLatch.close();    curatorFactory.close();  } catch (  IOException e) {    LOG.error("Error closing leader latch",e);  }}  }
class C{  public ARQ2SPIN(Model model){  this(model,true);}  }
class C{  public static synchronized int recompileWithOpt(CompilationPlan plan){  if (VM.BuildForOptCompiler) {    if (compilationInProgress) {      return -1;    } else {      try {        compilationInProgress=true;        CompiledMethod cm=optCompile(plan.method,plan);        try {          plan.method.replaceCompiledMethod(cm);        } catch (        Throwable e) {          String msg="Failure in RVMMethod.replaceCompiledMethod (via recompileWithOpt): while replacing \"" + plan.method + "\" (error was: "+ e+ ")\n";          if (VM.ErrorsFatal) {            e.printStackTrace();            VM.sysFail(msg);          } else {            VM.sysWrite(msg);          }          return -1;        }        return cm.getId();      } catch (      OptimizingCompilerException e) {        String msg="Optimizing compiler (via recompileWithOpt): can't optimize \"" + plan.method + "\" (error was: "+ e+ ")\n";        if (e.isFatal && VM.ErrorsFatal) {          e.printStackTrace();          VM.sysFail(msg);        } else {        }        return -1;      } finally {        compilationInProgress=false;      }    }  } else {    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);    return -1;  }}  }
class C{  public String next(Pattern pattern){  checkOpen();  checkNotNull(pattern);  matchSuccessful=false;  saveCurrentStatus();  if (!setTokenRegion()) {    recoverPreviousStatus();    throw new NoSuchElementException();  }  matcher.usePattern(pattern);  if (!matcher.matches()) {    recoverPreviousStatus();    throw new InputMismatchException();  }  matchSuccessful=true;  return matcher.group();}  }
class C{  public Message send(Message query) throws IOException {  try (Socket socket=factory.createSocket(InetAddress.getByName(updateHost),DNS_PORT)){    socket.setSoTimeout(updateTimeout);    writeMessage(socket.getOutputStream(),query);    Message response=readMessage(socket.getInputStream());    checkValidResponse(query,response);    return response;  } }  }
class C{  public List<T> findByProject(URI projectId,ResourceFilter<T> filter){  return search().byProject(projectId).filter(filter).run();}  }
class C{  public final void updateClusters(List<ClusterData> clusterData,int[] matIndexToMsgInternalId){  final Map<String,Collection<Integer>> names=new HashMap<String,Collection<Integer>>();  int count=0;  String cName=null;  m_finalClusterNames=new HashMap<Integer,String>();  for (int i=0; i < clusterData.size(); ++i) {    final ClusterData cd=clusterData.get(i);    final Collection<Integer> c=cd.m_cluster;    if (cd.m_clusterUsage == AbstractClusteringScorer.ClusterUsage.USED) {      if (m_initialClusters == null) {        cName="CLUSTER_" + count++;        names.put(cName,c);      } else {        final ClusterMeasures cM=findClusterName(c,matIndexToMsgInternalId);        if (cM.m_name == null) {          cM.m_name=findNewName(names);          names.put(cM.m_name,c);          updateClusteringDetails(null,null,cM,c,matIndexToMsgInternalId);        } else {          if (names.containsKey(cM.m_name)) {            cM.m_name=solveDuplicatedNames(cName,names);          }          names.put(cM.m_name,c);          updateClusteringDetails(cM.m_name,m_initialClusters.get(cM.m_name),cM,c,matIndexToMsgInternalId);        }      }      final ClusterMeasures cM=findClusterName(c,matIndexToMsgInternalId);      m_finalClusterNames.put(cd.m_id,cM.m_name);    }  }  m_finalClusters=(HashMap<String,Collection<Integer>>)names;}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof NettyFullHttpRequest)) {    return false;  }  return super.equals(other);}  }
class C{  public List<VariableDeclarationFragment> fragments(){  return this.variableDeclarationFragments;}  }
class C{  public static void logInvalidTaskType(final Logger logger,final TaskTypes type){  logger.logMessage(Level.INFO,"Invalid TaskType: " + type);}  }
class C{  @Override public String toString(){  return "Q" + this.quarter + "/"+ this.year;}  }
class C{  ProtocolVersion selectProtocolVersion(ProtocolVersion protocolVersion){  ProtocolVersion selectedVersion=null;  for (  ProtocolVersion pv : protocols) {    if (pv.v > protocolVersion.v) {      break;    }    selectedVersion=pv;  }  return selectedVersion;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private static void registerComponents(){  registerComponent(BarChartComponent.class,BarChartGui.class);  registerComponent(DocViewerComponent.class,DocViewerDesktopComponent.class);  registerComponent(ConsoleComponent.class,ConsoleDesktopComponent.class);  registerComponent(DisplayComponent.class,DisplayComponentDesktopGui.class);  registerComponent(DataWorldComponent.class,DataWorldDesktopComponent.class);  registerComponent(HistogramComponent.class,HistogramGui.class);  registerComponent(NetworkComponent.class,NetworkDesktopComponent.class);  registerComponent(OdorWorldComponent.class,OdorWorldDesktopComponent.class);  registerComponent(PieChartComponent.class,PieChartGui.class);  registerComponent(ProjectionComponent.class,ProjectionGui.class);  registerComponent(ReaderComponent.class,ReaderComponentDesktopGui.class);  registerComponent(ScatterPlotComponent.class,ScatterPlotGui.class);  registerComponent(TimeSeriesPlotComponent.class,TimeSeriesPlotGui.class);  registerComponent(RasterPlotComponent.class,RasterPlotGui.class);  registerComponent(VisionWorldComponent.class,VisionWorldDesktopComponent.class);  registerComponent(GameComponent.class,GameDesktopComponent.class);  registerComponent(DeviceInteractionComponent.class,DeviceInteractionDesktopComponent.class);}  }
class C{  private static String readLine(String filename) throws IOException {  BufferedReader reader=new BufferedReader(new FileReader(filename),256);  try {    return reader.readLine();  }  finally {    reader.close();  }}  }
class C{  public void addColumnListener(ColumnListener listener){  return;}  }
class C{  public static void main(String[] args){  int size;  HashSet collection=new HashSet();  String str1="Yellow", str2="White", str3="Green", str4="Blue";  if (true) {    System.out.println("True");  }  Iterator iterator;  if (true)   System.out.println("True");  collection.add(str1);  collection.add(str2);  collection.add(str3);  collection.add(str4);  iterator=collection.iterator();  while (iterator.hasNext()) {    System.out.print(iterator.next() + " ");  }}  }
class C{  public static int[] availableSpace(Aero a){  int availSpace[]={SLOTS_PER_ARC,SLOTS_PER_ARC,SLOTS_PER_ARC,SLOTS_PER_ARC};  AeroArmor armor=AeroArmor.getArmor(a.getArmorType(Aero.LOC_NOSE),a.isClanArmor(Aero.LOC_NOSE));  if (armor == null) {    return null;  }  int spaceUsedByArmor=armor.space;  int loc=(spaceUsedByArmor != 2) ? Aero.LOC_AFT : Aero.LOC_RWING;  while (spaceUsedByArmor > 0) {    availSpace[loc]--;    spaceUsedByArmor--;    loc--;    if (loc < 0) {      loc=Aero.LOC_AFT;    }  }  if (a.hasEngine() && (a.getEngine().getEngineType() == Engine.XXL_ENGINE)) {    if (a.getEngine().hasFlag(Engine.CLAN_ENGINE)) {      availSpace[Aero.LOC_AFT]-=2;    } else {      availSpace[Aero.LOC_AFT]-=4;    }  }  return availSpace;}  }
class C{  private boolean classDeclaresIdentifier(Context cx,ClassDefinitionNode classDef,TypeAnalyzer typeAnalyzer,String identifier){  String className=NodeMagic.getClassName(classDef);  typeAnalyzer.evaluate(cx,classDef);  ClassInfo classInfo=typeAnalyzer.getClassInfo(className);  if (classInfo != null && (classInfo.definesVariable(identifier) || classInfo.definesFunction(identifier,true) || classInfo.definesGetter(identifier,true)|| classInfo.definesSetter(identifier,true))) {    return true;  }  return false;}  }
class C{  public Grid(FIRFilterSpecification specification){  create(specification);}  }
class C{  protected ActionMap createRTextAreaActionMap(){  ActionMap map=new ActionMapUIResource();  Action[] actions=textArea.getActions();  int n=actions.length;  for (int i=0; i < n; i++) {    Action a=actions[i];    map.put(a.getValue(Action.NAME),a);  }  map.put(TransferHandler.getCutAction().getValue(Action.NAME),TransferHandler.getCutAction());  map.put(TransferHandler.getCopyAction().getValue(Action.NAME),TransferHandler.getCopyAction());  map.put(TransferHandler.getPasteAction().getValue(Action.NAME),TransferHandler.getPasteAction());  return map;}  }
class C{  public boolean verifySignature(byte[] signature){  byte[] block=null;  if (preSig == null) {    try {      block=cipher.processBlock(signature,0,signature.length);    } catch (    Exception e) {      return false;    }  } else {    if (!Arrays.areEqual(preSig,signature)) {      throw new IllegalStateException("updateWithRecoveredMessage called on different signature");    }    block=preBlock;    preSig=null;    preBlock=null;  }  if (((block[0] & 0xC0) ^ 0x40) != 0) {    return returnFalse(block);  }  if (((block[block.length - 1] & 0xF) ^ 0xC) != 0) {    return returnFalse(block);  }  int delta=0;  if (((block[block.length - 1] & 0xFF) ^ 0xBC) == 0) {    delta=1;  } else {    int sigTrail=((block[block.length - 2] & 0xFF) << 8) | (block[block.length - 1] & 0xFF);    Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName());    if (trailerObj != null) {      if (sigTrail != trailerObj.intValue()) {        throw new IllegalStateException("signer initialised with wrong digest for trailer " + sigTrail);      }    } else {      throw new IllegalArgumentException("unrecognised hash in signature");    }    delta=2;  }  int mStart=0;  for (mStart=0; mStart != block.length; mStart++) {    if (((block[mStart] & 0x0f) ^ 0x0a) == 0) {      break;    }  }  mStart++;  byte[] hash=new byte[digest.getDigestSize()];  int off=block.length - delta - hash.length;  if ((off - mStart) <= 0) {    return returnFalse(block);  }  if ((block[0] & 0x20) == 0) {    fullMessage=true;    if (messageLength > off - mStart) {      return returnFalse(block);    }    digest.reset();    digest.update(block,mStart,off - mStart);    digest.doFinal(hash,0);    boolean isOkay=true;    for (int i=0; i != hash.length; i++) {      block[off + i]^=hash[i];      if (block[off + i] != 0) {        isOkay=false;      }    }    if (!isOkay) {      return returnFalse(block);    }    recoveredMessage=new byte[off - mStart];    System.arraycopy(block,mStart,recoveredMessage,0,recoveredMessage.length);  } else {    fullMessage=false;    digest.doFinal(hash,0);    boolean isOkay=true;    for (int i=0; i != hash.length; i++) {      block[off + i]^=hash[i];      if (block[off + i] != 0) {        isOkay=false;      }    }    if (!isOkay) {      return returnFalse(block);    }    recoveredMessage=new byte[off - mStart];    System.arraycopy(block,mStart,recoveredMessage,0,recoveredMessage.length);  }  if (messageLength != 0) {    if (!isSameAs(mBuf,recoveredMessage)) {      return returnFalse(block);    }  }  clearBlock(mBuf);  clearBlock(block);  return true;}  }
class C{  private void createDimensionTitleLegendItem(PlotInstance plotInstance,Set<PlotDimension> dimensionSet,LegendItemCollection legendItemCollection){  PlotConfiguration plotConfig=plotInstance.getCurrentPlotConfigurationClone();  StringBuilder titleBuilder=new StringBuilder();  boolean first=true;  boolean showDimensionType=plotConfig.getLegendConfiguration().isShowDimensionType();  if (showDimensionType) {    for (    PlotDimension dimension : dimensionSet) {      if (!first) {        titleBuilder.append(", ");      }      titleBuilder.append(dimension.getShortName());      first=false;    }  }  if (showDimensionType) {    titleBuilder.append(" (");  }  Set<String> uniqueDimensionLabels=new HashSet<String>();  first=true;  for (  PlotDimension dimension : dimensionSet) {    DefaultDimensionConfig dimensionConfig=(DefaultDimensionConfig)plotConfig.getDimensionConfig(dimension);    String label=dimensionConfig.getLabel();    if (label == null) {      label=I18N.getGUILabel("plotter.unnamed_value_label");    }    if (!uniqueDimensionLabels.contains(label)) {      if (!first) {        titleBuilder.append(", ");        first=false;      }      titleBuilder.append(label);      uniqueDimensionLabels.add(label);    }  }  if (showDimensionType) {    titleBuilder.append(")");  }  titleBuilder.append(": ");  legendItemCollection.add(createTitleLegendItem(titleBuilder.toString(),plotConfig));}  }
class C{  public BitMatrix(int columns,int rows){  elements(QuickBitVector.makeBitVector(columns * rows,1),columns,rows);}  }
class C{  public void summarizeRoutesAndPatterns(){  System.out.println("Total stops " + stopForIndex.size());  System.out.println("Total patterns " + tripPatterns.size());  System.out.println("routeId,patterns,trips,stops");  Multimap<String,TripPattern> patternsForRoute=HashMultimap.create();  for (  TripPattern pattern : tripPatterns) {    patternsForRoute.put(pattern.routeId,pattern);  }  for (  String routeId : patternsForRoute.keySet()) {    Collection<TripPattern> patterns=patternsForRoute.get(routeId);    int nTrips=patterns.stream().mapToInt(null).sum();    TIntSet stopsUsed=new TIntHashSet();    for (    TripPattern pattern : patterns)     stopsUsed.addAll(pattern.stops);    int nStops=stopsUsed.size();    int nPatterns=patternsForRoute.get(routeId).size();    System.out.println(String.join(",",routeId,Integer.toString(nPatterns),Integer.toString(nTrips),Integer.toString(nStops)));  }}  }
class C{  public boolean isNumberInvited(ContactId contact){  return RcsStatus.PENDING.equals(getContactSharingStatus(contact));}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private SerializerWriteBuilder(){}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ABSTRACT_METHOD_DECLARATION___TYPE_1:    return getType_1();case UmplePackage.ABSTRACT_METHOD_DECLARATION___METHOD_DECLARATOR_1:  return getMethodDeclarator_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public pre(Element element){  addElement(element);}  }
class C{  public boolean canWrite(){  return true;}  }
class C{  public static IXMLParser createDefaultXMLParser(IXMLBuilder builder) throws ClassNotFoundException, InstantiationException, IllegalAccessException {  String className=XMLParserFactory.DEFAULT_CLASS;  try {    className=System.getProperty(XMLParserFactory.CLASS_KEY,XMLParserFactory.DEFAULT_CLASS);  } catch (  AccessControlException e) {  }  return XMLParserFactory.createXMLParser(className,builder);}  }
class C{  private void checkAndEnableViewButton(){  boolean enabled=true;  enabled&=Desktop.isDesktopSupported();  enabled&=txt_PubCert.getDocument().getLength() > MIN_CERT_LENGTH;  bt_view.setEnabled(enabled);}  }
class C{  static void luBacksubstitution(double[] matrix1,int[] row_perm,double[] matrix2){  int i, ii, ip, j, k;  int rp;  int cv, rv;  rp=0;  for (k=0; k < 4; k++) {    cv=k;    ii=-1;    for (i=0; i < 4; i++) {      double sum;      ip=row_perm[rp + i];      sum=matrix2[cv + 4 * ip];      matrix2[cv + 4 * ip]=matrix2[cv + 4 * i];      if (ii >= 0) {        rv=i * 4;        for (j=ii; j <= i - 1; j++) {          sum-=matrix1[rv + j] * matrix2[cv + 4 * j];        }      } else       if (sum != 0.0) {        ii=i;      }      matrix2[cv + 4 * i]=sum;    }    rv=3 * 4;    matrix2[cv + 4 * 3]/=matrix1[rv + 3];    rv-=4;    matrix2[cv + 4 * 2]=(matrix2[cv + 4 * 2] - matrix1[rv + 3] * matrix2[cv + 4 * 3]) / matrix1[rv + 2];    rv-=4;    matrix2[cv + 4 * 1]=(matrix2[cv + 4 * 1] - matrix1[rv + 2] * matrix2[cv + 4 * 2] - matrix1[rv + 3] * matrix2[cv + 4 * 3]) / matrix1[rv + 1];    rv-=4;    matrix2[cv + 4 * 0]=(matrix2[cv + 4 * 0] - matrix1[rv + 1] * matrix2[cv + 4 * 1] - matrix1[rv + 2] * matrix2[cv + 4 * 2] - matrix1[rv + 3] * matrix2[cv + 4 * 3]) / matrix1[rv + 0];  }}  }
class C{  public JCalendarDialog(java.awt.Dialog parent,boolean modal){  super(parent,modal);  if (m_resources != null) {  } else {    m_resources=new LocaleResources();    m_resources.addBundleName("beans_messages");  }}  }
class C{  public static void multRow(Matrix A,int i,int start,int to,double c){  for (int j=start; j < to; j++)   A.set(i,j,A.get(i,j) * c);}  }
class C{  public DiceServerEditor(final IRemoteDiceServer diceServer){  m_bean=diceServer;  final int bottomSpace=1;  final int labelSpace=2;  int row=0;  if (m_bean.sendsEmail()) {    add(m_toLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));    add(m_toAddress,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));    m_toAddress.setText(m_bean.getToAddress());    row++;    add(m_ccLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));    add(m_ccAddress,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));    m_ccAddress.setText(m_bean.getCcAddress());    row++;  }  if (m_bean.supportsGameId()) {    final JLabel m_gameIdLabel=new JLabel("Game ID:");    add(m_gameIdLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));    add(m_gameId,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));    m_gameId.setText(m_bean.getGameId());    row++;  }  add(m_testDiceyButton,new GridBagConstraints(2,row,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,0),0,0));  setupListeners();}  }
class C{  public static URI eraseQuery(URI uri) throws URISyntaxException {  return replaceQuery(uri,(String)null);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.917 -0400",hash_original_method="FA1D85D28CEAB4A4964615D0CD6BE099",hash_generated_method="9A62DA35FF42BC4BB25038177C97FF8C") @Override public void close() throws IOException {  if (writer == null) {    encoding=defaultEncoding;    writer=new OutputStreamWriter(out,encoding);    writer.write(xmlPrologWriter.toString());  }  writer.close();}  }
class C{  public static long factorial(int n){  return cern.jet.math.Arithmetic.longFactorial(n);}  }
class C{  public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    super.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public StunCandidateHarvester(TransportAddress stunServer){  this(stunServer,null);}  }
class C{  public XaDataSourceScriptCommand(Configuration configuration,String resourcePath,DataSource dataSource){  super(configuration,resourcePath);  this.ds=dataSource;}  }
class C{  private RowMap processHeartbeats(RowMap row) throws SQLException {  String hbClientID=(String)row.getData("client_id");  if (!Objects.equals(hbClientID,this.clientID))   return row;  Object heartbeat_at=row.getData("heartbeat_at");  Object old_heartbeat_at=row.getOldData("heartbeat_at");  if (heartbeat_at != null && old_heartbeat_at != null) {    Long thisHeartbeat=(Long)heartbeat_at;    if (!thisHeartbeat.equals(lastHeartbeatRead)) {      this.lastHeartbeatRead=thisHeartbeat;      return HeartbeatRowMap.valueOf(row.getDatabase(),row.getPosition(),thisHeartbeat);    }  }  return row;}  }
class C{  private void pruneAndReAddToDynamicActions(List<ComponentStruct> dynamicActionList,ComponentStruct struct){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletPartialStateManagementStrategy.pruneAndReAddToDynamicActions");  }  int firstIndex=dynamicActionList.indexOf(struct);  if (firstIndex == -1) {    dynamicActionList.add(struct);  } else {    int lastIndex=dynamicActionList.lastIndexOf(struct);    if (lastIndex == -1 || lastIndex == firstIndex) {      dynamicActionList.add(struct);    } else {      if (ComponentStruct.ADD.equals(struct.action)) {        dynamicActionList.remove(lastIndex);        dynamicActionList.remove(firstIndex);        dynamicActionList.add(struct);      }      if (ComponentStruct.REMOVE.equals(struct.action)) {        dynamicActionList.remove(lastIndex);      }    }  }}  }
class C{  public void testEmptyFileCleanup() throws Exception {  File logDir=prepareLogDir("testEmptyFileCleanup");  long lastSeqno=-1;  for (int i=0; i < 100; i++) {    DiskLog log=openLog(logDir,false,1000);    if (i % 10 == 0)     log.validate();    LogConnection conn=log.connect(false);    assertEquals("Checking log max seqno",lastSeqno,log.getMaxSeqno());    THLEvent e_next=createTHLEvent(i,(short)0,true,"good");    conn.store(e_next,true);    lastSeqno=e_next.getSeqno();    logger.info("Wrote good complete event: seqno=" + e_next.getSeqno());    THLEvent e_partial=createTHLEvent(i + 1,(short)0,false,"bad");    conn.store(e_partial,true);    logger.info("Wrote incomplete event: seqno=" + e_partial.getSeqno());    log.release();  }}  }
class C{  public boolean isChoking(){  return choking;}  }
class C{  private void processPatch(final State current){  try {switch (current.taskState.stage) {case STARTED:      processDhcpSubnetsDocuments(current);    break;case FAILED:case FINISHED:case CANCELLED:  break;default :this.failTask(new IllegalStateException(String.format("Un-expected stage: %s",current.taskState.stage)));}} catch (Throwable e) {failTask(e);}}  }
class C{  public Ligature(RandomAccessFile raf) throws IOException {  ligGlyph=raf.readUnsignedShort();  compCount=raf.readUnsignedShort();  components=new int[compCount - 1];  for (int i=0; i < compCount - 1; i++) {    components[i]=raf.readUnsignedShort();  }}  }
class C{  protected Chromaticity(int value){  super(value);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_linkingOp_2_();}  }
class C{  public CCSprite(CCTexture2D texture){  CGSize size=texture.getContentSize();  CGRect rect=CGRect.make(0,0,size.width,size.height);  init(texture,rect);}  }
class C{  public String toDebugString(){  String info="ABOUT ATTRIBUTE: " + about + "\n"+ "TITLE: "+ title+ "\n"+ "LINK: "+ link+ "\n"+ "DESCRIPTION: "+ description+ "\nLANGUAGE: "+ lang;  return info;}  }
class C{  public JBBPNamedFieldInfo findFieldForPath(final String fieldPath){  JBBPNamedFieldInfo result=null;  for (  final JBBPNamedFieldInfo f : this.namedFieldData) {    if (f.getFieldPath().equals(fieldPath)) {      result=f;      break;    }  }  return result;}  }
class C{  @Override public boolean evaluate(Number[] params){  if (this.evalForGtThan)   return super.evaluate(params) && isGreaterThan(getValue(params)[0],threshold); else   return super.evaluate(params) && isLessThan(getValue(params)[0],threshold);}  }
class C{  public static <T>Maybe<T> monoToMaybe(Mono<T> source){  return new MonoAsMaybe<>(source);}  }
class C{  public Icon(String id,String sourcePath,SVGResource svgResource){  this.id=id;  this.sourcePath=sourcePath;  this.svgResource=svgResource;  this.imageResource=null;}  }
class C{  protected void incrementNewlyCreatedVmsCount(){  setNewlyCreatedVms(getNewlyCreatedVms() + 1);}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  byte[][] arrays=new byte[ncycles][size];  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,arrays,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,arrays,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public double weightedTruePositiveRate(){  double[] classCounts=new double[m_NumClasses];  double classCountSum=0;  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      classCounts[i]+=m_ConfusionMatrix[i][j];    }    classCountSum+=classCounts[i];  }  double truePosTotal=0;  for (int i=0; i < m_NumClasses; i++) {    double temp=truePositiveRate(i);    truePosTotal+=(temp * classCounts[i]);  }  return truePosTotal / classCountSum;}  }
class C{  public FileLinesCollection(final CharSequence filename,final String encoding,final boolean zipped){  this.zipped=zipped;  this.filename=filename.toString();  this.encoding=encoding;}  }
class C{  public NceLight(String systemName,NceTrafficController tc,NceLightManager mgr){  super(systemName);  this.tc=tc;  this.mgr=mgr;  initializeLight(systemName);}  }
class C{  private void initializeNoxItemPlaceholder(TypedArray attributes){  Drawable placeholder=attributes.getDrawable(R.styleable.nox_item_placeholder);  if (placeholder == null) {    placeholder=getContext().getResources().getDrawable(R.drawable.ic_nox);  }  noxConfig.setPlaceholder(placeholder);}  }
class C{  public static RuntimeException asRuntime(Throwable e){  if (e instanceof RuntimeException) {    return (RuntimeException)e;  } else {    return new WrappedAsRuntimeException(e);  }}  }
class C{  @Override protected boolean convertToUppercase(){  return false;}  }
class C{  public PDFShapeCmd(Path gp,int style){  this.gp=new Path(gp);  this.style=style;  bounds=new RectF();  gp.computeBounds(bounds,false);}  }
class C{  static public Map<URI,Map<URI,Integer>> mapExportMaskToVolumeShareCount(DbClient dbClient,List<URI> volumeURIs,List<URI> initiatorURIs){  List<Initiator> initiators=dbClient.queryObject(Initiator.class,initiatorURIs);  Map<URI,Map<URI,Integer>> exportMaskToVolumeCount=new HashMap<>();  for (  URI volumeURI : volumeURIs) {    for (    Initiator initiator : initiators) {      Integer count=ExportUtils.getNumberOfExportGroupsWithVolume(initiator,volumeURI,dbClient);      List<ExportMask> exportMasks=ExportUtils.getInitiatorExportMasks(initiator,dbClient);      for (      ExportMask exportMask : exportMasks) {        if (!exportMask.hasVolume(volumeURI)) {          continue;        }        Map<URI,Integer> countMap=exportMaskToVolumeCount.get(exportMask.getId());        if (countMap == null) {          countMap=new HashMap<>();          exportMaskToVolumeCount.put(exportMask.getId(),countMap);        }        countMap.put(volumeURI,count);      }    }  }  return exportMaskToVolumeCount;}  }
class C{  private Element computeSummary(List<Book> books){  Element contentElement=JDOMManager.element("content");  File calibreLibraryFolder=currentProfile.getDatabaseFolder();  File summaryFile=new File(calibreLibraryFolder,"calibre2opds_summary.html");  if (summaryFile.exists()) {    contentElement.setAttribute("type","text/html");    try {      FileInputStream is=new FileInputStream(summaryFile);      String text=Helper.readTextFile(is);      List<Element> htmlElements=JDOMManager.convertHtmlTextToXhtml(text);      if (htmlElements != null)       for (      Element htmlElement : htmlElements) {        contentElement.addContent(htmlElement.detach());      }    } catch (    FileNotFoundException e) {      logger.error(Localization.Main.getText("error.summary.cannotFindFile",summaryFile.getAbsolutePath()),e);    }catch (    IOException e) {      logger.error(Localization.Main.getText("error.summary.errorParsingFile"),e);    }  } else {    contentElement.setAttribute("type","text");    String summary=Localization.Main.getText("main.summary",Constants.PROGTITLE,Summarizer.getBookWord(books.size()));    contentElement.addContent(summary);  }  return contentElement;}  }
class C{  private void initLoggerConfig(){  try {    if (!loggerConfigFile.isLocationSpecified() && !loggerConfigFile.getPath().toFile().exists()) {      try {        loggerConfigFile.createByDefault();      } catch (      Exception e) {        play.Logger.error("Failed to initialize logger configuration",e);      }    }  } catch (  URISyntaxException e) {    play.Logger.error("Failed to check whether the logger config file exists",e);  }}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public V1 addAction(int icon,CharSequence title,Action.OnActionListener listener,Bundle extra){  N.addAction(icon,title,listener,extra);  return this;}  }
class C{  public static long pause(final long sleepTimeMS){  final long startTime=System.currentTimeMillis();  do {    try {      final long sleepTime=sleepTimeMS - (System.currentTimeMillis() - startTime);      Thread.sleep(sleepTime > 0 ? sleepTime : 5);    } catch (    InterruptedException e) {    }  } while ((System.currentTimeMillis() - startTime) < sleepTimeMS);  return System.currentTimeMillis() - startTime;}  }
class C{  public static void putBoolean(Context context,String key,boolean value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putBoolean(key,value);  editor.commit();}  }
class C{  public boolean hasSameSignature(MethodInfo m){  if (!m.name.equals(name) || m.paramTypes.length != paramTypes.length)   return false;  for (int i=0; i < this.paramTypes.length; ++i) {    if (this.paramTypes[i] != m.paramTypes[i])     return false;  }  return true;}  }
class C{  protected ElemVariable createLocalPseudoVarDecl(QName uniquePseudoVarName,ElemTemplateElement psuedoVarRecipient,LocPathIterator lpi) throws org.w3c.dom.DOMException {  ElemVariable psuedoVar=new ElemVariablePsuedo();  XPath xpath=new XPath(lpi);  psuedoVar.setSelect(xpath);  psuedoVar.setName(uniquePseudoVarName);  ElemVariable var=addVarDeclToElem(psuedoVarRecipient,lpi,psuedoVar);  lpi.exprSetParent(var);  return var;}  }
class C{  public void shutdown(GL10 gl){  if (mTexture != null) {    mTexture.delete(gl);  }}  }
class C{  @Override public InputStream openFileStream(String filename) throws IOException {  if (logger.isDebugEnabled())   logger.debug("Opening " + filename);  return hdfs.open(new Path(filename));}  }
class C{  @Override public int hashCode(){  int h=classHash();  h=31 * h + slop;  h=31 * h + Arrays.hashCode(terms);  h=31 * h + Arrays.hashCode(positions);  return h;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new GridBagLayout());  contentPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(14,14,14,14),null));  myProgressBar=new JProgressBar();  GridBagConstraints gbc;  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=1;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(0,0,8,10);  contentPane.add(myProgressBar,gbc);  myButton=new JButton();  myButton.setText("Cancel");  myButton.setMnemonic('C');  myButton.setDisplayedMnemonicIndex(0);  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=1;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(0,0,8,0);  contentPane.add(myButton,gbc);  myPercent=new JLabel();  myPercent.setText("100%");  gbc=new GridBagConstraints();  gbc.gridx=1;  gbc.gridy=1;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,0,8,10);  contentPane.add(myPercent,gbc);  myHeader=new JLabel();  myHeader.setText("Header");  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.gridwidth=2;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(0,0,5,0);  contentPane.add(myHeader,gbc);  myFooter=new JLabel();  myFooter.setText("Footer");  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=2;  gbc.gridwidth=2;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  contentPane.add(myFooter,gbc);}  }
class C{  public void stopPinchScaleDetection(){  pinchScaleDetector=null;}  }
class C{  protected void sequence_If(ISerializationContext context,If semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__LEFT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__LEFT));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__RIGHT));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.IF__IF_FALSE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.IF__IF_FALSE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getIfAccess().getIfLeftAction_1_0(),semanticObject.getLeft());  feeder.accept(grammarAccess.getIfAccess().getOpQuestionMarkKeyword_1_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getIfAccess().getRightOrParserRuleCall_1_2_0(),semanticObject.getRight());  feeder.accept(grammarAccess.getIfAccess().getIfFalseOrParserRuleCall_1_3_1_0(),semanticObject.getIfFalse());  feeder.finish();}  }
class C{  protected final void adoptState(Model source){  makeDirty();}  }
class C{  public void clear(){  mRecords.clear();  mCallbacks.onDatasetChanged(mBluetoothDevice);}  }
class C{  protected void init(){  checkLegal();  calcMinMax(mLastStart,mLastEnd);  calcYValueSum();  calcYValueCount();  calcXValAverageLength();}  }
class C{  public static Method findStaticMethod(Class<?> type,String name,Class<?>... args) throws NoSuchMethodException {  Method method=findMethod(type,name,args);  if (!Modifier.isStatic(method.getModifiers())) {    throw new NoSuchMethodException("Method '" + name + "' is not static");  }  return method;}  }
class C{  public boolean replaceValues(float value,float newValue){  boolean changed=false;  if (Float.isNaN(value)) {    for (int i=0; i < count; i++) {      if (Float.isNaN(data[i])) {        data[i]=newValue;        changed=true;      }    }  } else {    for (int i=0; i < count; i++) {      if (data[i] == value) {        data[i]=newValue;        changed=true;      }    }  }  return changed;}  }
class C{  public int[] matchRowIndices(String regexp,int column){  int[] outgoing=new int[rowCount];  int count=0;  checkColumn(column);  if (columnTypes[column] == STRING) {    String[] stringData=(String[])columns[column];    for (int row=0; row < rowCount; row++) {      if (stringData[row] != null && PApplet.match(stringData[row],regexp) != null) {        outgoing[count++]=row;      }    }  } else {    for (int row=0; row < rowCount; row++) {      String str=getString(row,column);      if (str != null && PApplet.match(str,regexp) != null) {        outgoing[count++]=row;      }    }  }  return PApplet.subset(outgoing,0,count);}  }
class C{  public Item(Intent intent){  mText=null;  mHtmlText=null;  mIntent=intent;  mUri=null;}  }
class C{  public S2Loop(final List<S2Point> vertices){  this.numVertices=vertices.size();  this.vertices=new S2Point[numVertices];  this.bound=S2LatLngRect.full();  this.depth=0;  vertices.toArray(this.vertices);  initOrigin();  initBound();  initFirstLogicalVertex();}  }
class C{  @Override public boolean canWrite(){  return getDelegate().canWrite();}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;default :  return false;}}  }
class C{  protected void checkCompatibleScriptURL(String scriptType,ParsedURL scriptPURL){  userAgent.checkLoadScript(scriptType,scriptPURL,docPURL);}  }
class C{  @Override public BigInteger[] batchInsert(List<Map<String,Object>> datas,String tabNameSuffix){  if (logger.isDebugEnabled()) {    logger.debug("batchInsert(List<Map<String,Object>>, String) - start");  }  validate(datas);  Map<String,Object> cols=this.merge(datas);  BigInteger[] returnBigIntegerArray=batchInsert(new ArrayList(cols.keySet()),datas,tabNameSuffix);  if (logger.isDebugEnabled()) {    logger.debug("batchInsert(List<Map<String,Object>>, String) - end");  }  return returnBigIntegerArray;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public char nextNonWS(){  skipWS();  return next();}  }
class C{  private void handleError(EnumerationContext ctx,Throwable e){  logSevere(e);  ctx.error=e;  ctx.stage=EnumerationStages.ERROR;  handleEnumerationRequest(ctx);}  }
class C{  public synchronized void start(){  if (!running) {    running=true;    new Thread(this).start();  }}  }
class C{  protected void initiateWorking(){  if (_activeTrain.getStatus() != ActiveTrain.WORKING) {    if (_autoEngineer != null) {      _autoEngineer.setHalt(true);      waitUntilStopped();      _autoEngineer.abort();      InstanceManager.throttleManagerInstance().releaseThrottle(_throttle,this);      _autoEngineer=null;      _throttle=null;    }    _activeTrain.setMode(ActiveTrain.MANUAL);    _activeTrain.setStatus(ActiveTrain.WORKING);  }}  }
class C{  private boolean validateOldProduct(MProduct product){  if (!product.isBOM())   return true;  if (m_products.contains(product)) {    log.warning(m_product.getName() + " recursively includes " + product.getName());    return false;  }  m_products.add(product);  log.fine(product.getName());  MProductBOM[] productsBOMs=MProductBOM.getBOMLines(product);  for (int i=0; i < productsBOMs.length; i++) {    MProductBOM productsBOM=productsBOMs[i];    MProduct pp=new MProduct(getCtx(),productsBOM.getM_ProductBOM_ID(),get_TrxName());    if (!pp.isBOM())     log.finer(pp.getName()); else     if (!validateOldProduct(pp))     return false;  }  return true;}  }
class C{  public String maxDefaultTipText(){  return "The default value to replace values that are above the maximum threshold.";}  }
class C{  protected double calculateCategorySize(int categoryCount,Rectangle2D area,RectangleEdge edge){  double result;  double available=0.0;  if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) {    available=area.getWidth();  } else   if ((edge == RectangleEdge.LEFT) || (edge == RectangleEdge.RIGHT)) {    available=area.getHeight();  }  if (categoryCount > 1) {    result=available * (1 - getLowerMargin() - getUpperMargin()- getCategoryMargin());    result=result / categoryCount;  } else {    result=available * (1 - getLowerMargin() - getUpperMargin());  }  return result;}  }
class C{  private static void startNewSearch(final Window parent,final ComboBoxEditor editor,final ZyGraph graph,final GraphSearcher searcher,final String searchString,final boolean zoomToResult){  try {    searcher.search(GraphHelpers.getNodes(graph),GraphHelpers.getEdges(graph),searchString);    if (searcher.getResults().isEmpty()) {      editor.getEditorComponent().setBackground(BACKGROUND_COLOR_FAIL);    } else {      editor.getEditorComponent().setBackground(BACKGROUND_COLOR_SUCCESS);    }    for (    final SearchResult result : searcher.getResults()) {      if (result.getObject() instanceof NaviNode) {        final NaviNode node=(NaviNode)result.getObject();        node.setBackgroundColor(result.getLine(),result.getPosition(),result.getLength(),Color.YELLOW);      } else       if (result.getObject() instanceof NaviEdge) {        final NaviEdge edge=(NaviEdge)result.getObject();        edge.getLabelContent().getLineContent(result.getLine()).setBackgroundColor(result.getPosition(),result.getLength(),Color.YELLOW);      }    }    final SearchResult result=searcher.getCursor().current();    if (result != null) {      if (result.getObject() instanceof NaviNode) {        ZyGraphHelpers.centerNode(graph,(NaviNode)result.getObject(),zoomToResult);      } else       if (result.getObject() instanceof NaviEdge) {        ZyGraphHelpers.centerEdgeLabel(graph,(NaviEdge)result.getObject(),zoomToResult);      }    }    graph.updateGraphViews();  } catch (  final PatternSyntaxException exception) {    CMessageBox.showInformation(parent,String.format("Invalid Regular Expression '%s'",searchString));  }}  }
class C{  public static URLClassLoader createJarAndLoad(JarEntry... entries) throws IOException {  Validate.notNull(entries);  Validate.noNullElements(entries);  File jarFile=createJar(entries);  return URLClassLoader.newInstance(new URL[]{jarFile.toURI().toURL()},TestUtils.class.getClassLoader());}  }
class C{  private void diff(DevMachine devMachine,DiffRequest diffRequest,@NotNull String projectPath,AsyncRequestCallback<String> callback){  String url=appContext.getDevMachine().getWsAgentBaseUrl() + DIFF + "?projectPath="+ projectPath;  asyncRequestFactory.createPostRequest(url,diffRequest).loader(loader).send(callback);}  }
class C{  @Inline @Override public final Word wordRead(ObjectReference ref,Word offset,Word location,int mode){  return Magic.getWordAtOffset(ref.toObject(),offset.toOffset(),location.toInt());}  }
class C{  public AsyncHttpClient(int httpPort,int httpsPort){  this(false,httpPort,httpsPort);}  }
class C{  public void testSetF13(){  boolean f13=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF13(f13);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F13-F20 since no command station defined");}  }
class C{  @Override public boolean equals(Object o){  return this == o;}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.806 -0500",hash_original_method="66B88A01F8296942609EF87ACA0E012C",hash_generated_method="EF54B80F0E76445F1731B727231203AB") public Collection<V> values(){  if (values == null) {    values=new ValuesCollectionImpl();  }  return values;}  }
class C{  public final boolean isStatic(){  return Modifier.isStatic(getModifiers());}  }
class C{  @Override public void onAdd(Collection<? extends IDataType> dataTypes) throws AtlasException {  AtlasGraphManagement management=provider.get().getManagementSystem();  for (  IDataType dataType : dataTypes) {    LOG.debug("Creating indexes for type name={}, definition={}",dataType.getName(),dataType.getClass());    try {      addIndexForType(management,dataType);      LOG.info("Index creation for type {} complete",dataType.getName());    } catch (    Throwable throwable) {      LOG.error("Error creating index for type {}",dataType,throwable);      rollback(management);      throw new IndexCreationException("Error while creating index for type " + dataType,throwable);    }  }  commit(management);}  }
class C{  public UserRoleAssignmentException(String message,Object[] params){  super(message,params);}  }
class C{  public static boolean isNetworkAvailable(Context context){  boolean available=false;  if (context.checkCallingOrSelfPermission(Manifest.permission.INTERNET) == PackageManager.PERMISSION_GRANTED) {    ConnectivityManager connMgr=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo netInfo=connMgr.getActiveNetworkInfo();    available=netInfo != null && netInfo.isConnected();  }  return available;}  }
class C{  @Override public void run() throws IOException {  Result result=compiler.compile(arguments.toArray(new String[arguments.size()]));  handleExitCode(result.exitCode,compiler.exitState);}  }
class C{  public void add(final int series,final Number xValue,final BoxAndWhiskerItem item){  List<Tuple<Number,BoxAndWhiskerItem>> seriesItems=getItems(series);  seriesItems.add(new Tuple<Number,BoxAndWhiskerItem>(xValue,item));}  }
class C{  protected void removeFromPortMap(IOFSwitch sw,long mac,short vlan){  if (vlan == (short)0xffff) {    vlan=0;  }  Map<MacVlanPair,Short> swMap=macVlanToSwitchPortMap.get(sw);  if (swMap != null)   swMap.remove(new MacVlanPair(mac,vlan));}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String fiducialHeader=args[0];  String outputHeader=args[1];  if (fiducialHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int progress=0;    ArrayList<XYPoint> fiducialMarks=new ArrayList<>();    ShapeFile fiducials=new ShapeFile(fiducialHeader);    if (fiducials.getShapeType().getBaseType() != ShapeType.POINT && fiducials.getShapeType().getBaseType() != ShapeType.MULTIPOINT) {      showFeedback("The input shapefile must be of a 'POINT' or 'MULTIPOINT' data type.");      return;    }    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(0);    fields[0].setFieldLength(10);    ShapeFile output=new ShapeFile(outputHeader,ShapeType.POINT,fields);    int oldProgress=-1;    int n=0;    int numRecords=fiducials.getNumberOfRecords();    progress=0;    for (    ShapeFileRecord record : fiducials.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));    break;case POINTZ:  PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;}}if (cancelOp) {cancelOperation();return;}n++;progress=(int)((n * 100.0) / numRecords);if (progress > oldProgress) {oldProgress=progress;updateProgress(progress);}}int numMarks=fiducialMarks.size();if (numMarks == 8) {double psi=0;double x, y;double DegreeToRad=Math.PI / 180;double[] axes=new double[2];double[][] axesEndPoints=new double[4][2];double newXAxis=0;double newYAxis=0;double longAxis;double shortAxis;final double rightAngle=Math.toRadians(90);double[] newBoundingBox=new double[4];double slope;double boxCentreX, boxCentreY;double[][] verticesRotated=new double[8][2];double east=Double.NEGATIVE_INFINITY;double west=Double.POSITIVE_INFINITY;double north=Double.NEGATIVE_INFINITY;double south=Double.POSITIVE_INFINITY;XYPoint pt;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);if (pt.x > east) {east=pt.x;}if (pt.x < west) {west=pt.x;}if (pt.y > north) {north=pt.y;}if (pt.y < south) {south=pt.y;}}double midX=west + (east - west) / 2.0;double midY=south + (north - south) / 2.0;axes[0]=9999999;axes[1]=9999999;slope=0;boxCentreX=0;boxCentreY=0;for (int m=0; m <= 180; m++) {psi=-m * 0.5 * DegreeToRad;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x - midX;y=pt.y - midY;verticesRotated[i][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));verticesRotated[i][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));}newBoundingBox[0]=Double.MAX_VALUE;newBoundingBox[1]=Double.MIN_VALUE;newBoundingBox[2]=Double.MAX_VALUE;newBoundingBox[3]=Double.MIN_VALUE;for (n=0; n < 8; n++) {x=verticesRotated[n][0];y=verticesRotated[n][1];if (x < newBoundingBox[0]) {newBoundingBox[0]=x;}if (x > newBoundingBox[1]) {newBoundingBox[1]=x;}if (y < newBoundingBox[2]) {newBoundingBox[2]=y;}if (y > newBoundingBox[3]) {newBoundingBox[3]=y;}}newXAxis=newBoundingBox[1] - newBoundingBox[0];newYAxis=newBoundingBox[3] - newBoundingBox[2];if ((newXAxis * newYAxis) < (axes[0] * axes[1])) {axes[0]=newXAxis;axes[1]=newYAxis;if (axes[0] > axes[1]) {slope=-psi;} else {slope=-(rightAngle + psi);}x=newBoundingBox[0] + newXAxis / 2;y=newBoundingBox[2] + newYAxis / 2;boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));}}longAxis=Math.max(axes[0],axes[1]);shortAxis=Math.min(axes[0],axes[1]);axesEndPoints[0][0]=boxCentreX + longAxis / 2.0 * Math.cos(slope);axesEndPoints[0][1]=boxCentreY + longAxis / 2.0 * Math.sin(slope);axesEndPoints[1][0]=boxCentreX - longAxis / 2.0 * Math.cos(slope);axesEndPoints[1][1]=boxCentreY - longAxis / 2.0 * Math.sin(slope);axesEndPoints[2][0]=boxCentreX + shortAxis / 2.0 * Math.cos(rightAngle + slope);axesEndPoints[2][1]=boxCentreY + shortAxis / 2.0 * Math.sin(rightAngle + slope);axesEndPoints[3][0]=boxCentreX - shortAxis / 2.0 * Math.cos(rightAngle + slope);axesEndPoints[3][1]=boxCentreY - shortAxis / 2.0 * Math.sin(rightAngle + slope);double dist;XYPoint p1=new XYPoint();XYPoint p2=new XYPoint();XYPoint p3=new XYPoint();XYPoint p4=new XYPoint();XYPoint p5=new XYPoint();XYPoint p6=new XYPoint();XYPoint p7=new XYPoint();XYPoint p8=new XYPoint();double minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[0][0] - x) * (axesEndPoints[0][0] - x) + (axesEndPoints[0][1] - y) * (axesEndPoints[0][1] - y);if (dist < minDist) {minDist=dist;p1=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[1][0] - x) * (axesEndPoints[1][0] - x) + (axesEndPoints[1][1] - y) * (axesEndPoints[1][1] - y);if (dist < minDist) {minDist=dist;p2=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[2][0] - x) * (axesEndPoints[2][0] - x) + (axesEndPoints[2][1] - y) * (axesEndPoints[2][1] - y);if (dist < minDist) {minDist=dist;p3=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[3][0] - x) * (axesEndPoints[3][0] - x) + (axesEndPoints[3][1] - y) * (axesEndPoints[3][1] - y);if (dist < minDist) {minDist=dist;p4=pt;}}double[][] cornerPoints=new double[4][2];cornerPoints[0][0]=axesEndPoints[0][0] + shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[0][1]=axesEndPoints[0][1] + shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[1][0]=axesEndPoints[0][0] - shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[1][1]=axesEndPoints[0][1] - shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[2][0]=axesEndPoints[1][0] - shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[2][1]=axesEndPoints[1][1] - shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[3][0]=axesEndPoints[1][0] + shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[3][1]=axesEndPoints[1][1] + shortAxis / 2.0 * Math.sin(rightAngle + slope);minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[0][0] - x) * (cornerPoints[0][0] - x) + (cornerPoints[0][1] - y) * (cornerPoints[0][1] - y);if (dist < minDist) {minDist=dist;p5=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[2][0] - x) * (cornerPoints[2][0] - x) + (cornerPoints[2][1] - y) * (cornerPoints[2][1] - y);if (dist < minDist) {minDist=dist;p6=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[1][0] - x) * (cornerPoints[1][0] - x) + (cornerPoints[1][1] - y) * (cornerPoints[1][1] - y);if (dist < minDist) {minDist=dist;p7=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[3][0] - x) * (cornerPoints[3][0] - x) + (cornerPoints[3][1] - y) * (cornerPoints[3][1] - y);if (dist < minDist) {minDist=dist;p8=pt;}}XYPoint intersection=new XYPoint();double denominator=(p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);if (denominator != 0) {double xNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.x - p4.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x);double yNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x);intersection.x=xNumerator / denominator;intersection.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}XYPoint intersection2=new XYPoint();denominator=(p5.x - p6.x) * (p7.y - p8.y) - (p5.y - p6.y) * (p7.x - p8.x);if (denominator != 0) {double xNumerator=(p5.x * p6.y - p5.y * p6.x) * (p7.x - p8.x) - (p5.x - p6.x) * (p7.x * p8.y - p7.y * p8.x);double yNumerator=(p5.x * p6.y - p5.y * p6.x) * (p7.y - p8.y) - (p5.y - p6.y) * (p7.x * p8.y - p7.y * p8.x);intersection2.x=xNumerator / denominator;intersection2.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point((intersection.x + intersection2.x) / 2,(intersection.y + intersection2.y) / 2);Object[] rowData=new Object[1];rowData[0]=new Double(1);output.addRecord(PP,rowData);output.write();} else if (numMarks == 4) {XYPoint p1=fiducialMarks.get(0);XYPoint p2=new XYPoint();XYPoint pt;double dist;double maxDist=0;int k=0;for (int a=1; a < 4; a++) {pt=fiducialMarks.get(a);dist=Math.sqrt((pt.x - p1.x) * (pt.x - p1.x) + (pt.y - p1.y) * (pt.y - p1.y));if (dist > maxDist) {maxDist=dist;p2=pt;k=a;}}int i=0, j=0;switch (k) {case 1:i=2;j=3;break;case 2:i=1;j=3;break;case 3:i=1;j=2;break;}XYPoint p3=fiducialMarks.get(i);XYPoint p4=fiducialMarks.get(j);XYPoint intersection=new XYPoint();double denominator=(p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);if (denominator != 0) {double xNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.x - p4.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x);double yNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x);intersection.x=xNumerator / denominator;intersection.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(intersection.x,intersection.y);Object[] rowData=new Object[1];rowData[0]=new Double(1);output.addRecord(PP,rowData);output.write();} else {showFeedback("There should be either 4 or 8 fiducial marks. \nThere is something wrong with the input file. \nThe operation will be terminated.");return;}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public String resultToString(int res){  String resultString="";switch (res) {case POSSIBLE:    resultString="Certificate to be tried.\n";  break;case BACK:resultString="Certificate backed out since path does not " + "satisfy build requirements.\n";break;case FOLLOW:resultString="Certificate satisfies conditions.\n";break;case FAIL:resultString="Certificate backed out since path does not " + "satisfy conditions.\n";break;case SUCCEED:resultString="Certificate satisfies conditions.\n";break;default :resultString="Internal error: Invalid step result value.\n";}return resultString;}  }
class C{  public void update(final long item){  if (itemsSeen_ == MAX_ITEMS_SEEN) {    throw new SketchesStateException("Sketch has exceeded capacity for total items seen: " + MAX_ITEMS_SEEN);  }  if (itemsSeen_ < reservoirSize_) {    if (itemsSeen_ >= currItemsAlloc_) {      growReservoir();    }    assert itemsSeen_ < currItemsAlloc_;    data_[(int)itemsSeen_]=item;    ++itemsSeen_;  } else {    ++itemsSeen_;    if (SamplingUtil.rand.nextDouble() * itemsSeen_ < reservoirSize_) {      int newSlot=SamplingUtil.rand.nextInt(reservoirSize_);      data_[newSlot]=item;    }  }}  }
class C{  public Type attribType(JCTree tree,Env<AttrContext> env){  Type result=attribType(tree,env,Type.noType);  return result;}  }
class C{  public static boolean isMinus(BOp node){  return node instanceof IJoinNode && ((IJoinNode)node).isMinus();}  }
class C{  protected void processCloudletResume(int cloudletId,int userId,int vmId,boolean ack){  double eventTime=getVmAllocationPolicy().getHost(vmId,userId).getVm(vmId,userId).getCloudletScheduler().cloudletResume(cloudletId);  boolean status=false;  if (eventTime > 0.0) {    status=true;    if (eventTime > CloudSim.clock()) {      schedule(getId(),eventTime,CloudSimTags.VM_DATACENTER_EVENT);    }  }  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=cloudletId;    if (status) {      data[2]=CloudSimTags.TRUE;    } else {      data[2]=CloudSimTags.FALSE;    }    sendNow(userId,CloudSimTags.CLOUDLET_RESUME_ACK,data);  }}  }
class C{  public DistinguishedNameException(String message){  super(message);}  }
class C{  public URLLabel(Action action){  setAction(action);}  }
class C{  @Override public void close(){  appiumDriver.quit();}  }
class C{  public void add(URI uri,Cookie cookie){  String origin=buildOrigin(uri);  Set<Cookie> byOrigin=this.cookiesByOrigin.get(origin);  if (byOrigin == null) {    this.cookiesByOrigin.putIfAbsent(origin,new ConcurrentSkipListSet<>());    byOrigin=this.cookiesByOrigin.get(origin);  }  byOrigin.add(cookie);}  }
class C{  public CSVParser(char separator,char quotechar,char escape){  this(separator,quotechar,escape,DEFAULT_STRICT_QUOTES);}  }
class C{  public boolean isRemove(){  boolean is;  if (m_editFlag == FolderEditFlag.REMOVE)   is=true; else   is=false;  return is;}  }
class C{  public static <T>Predicate<T> and(Predicate<? super T>... components){  return and(Arrays.asList(components));}  }
class C{  public void addHeader(String line){  header.add(line);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  private void updateSegmentContent(Segment segment,String content){  final int lengthBefore=xml.length;  xml=insertBetween(xml,segment.left,segment.right,content);  shiftSegments(segment.left,xml.length - lengthBefore);  segment.right=segment.left + content.length() - 1;}  }
class C{  private void changePlaylistCover(){  List<Integer> tracks=getTracks();  if (!tracks.isEmpty()) {    Optional<Integer> trackWithCover=tracks.stream().filter(null).filter(null).findAny();    if (trackWithCover.isPresent()) {      int trackId=trackWithCover.get();      musicLibrary.getTrack(trackId).ifPresent(null);    } else     playlistCoverProperty.set(COVER_IMAGE);  } else   playlistCoverProperty.set(COVER_IMAGE);}  }
class C{  protected void pushRight(BinarySearchTreeNode<E> node){  while (node != null) {    this.stack.push(node);    node=node.right;  }}  }
class C{  public static int calcBitSize(final boolean optDensity,final int alloc,final int minReserve,final int modAllocation){  final int intAllocation=32 * alloc;  int nints=optDensity ? 8 : 1;  while ((nints * intAllocation) < minReserve)   nints++;  while ((nints * intAllocation) % modAllocation != 0)   nints++;  return nints;}  }
class C{  public void handleMeta(String target,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  if (target.equals(Constants.API_ENDPOINT_META)) {    baseRequest.setHandled(true);  } else {    return;  }  response.setHeader("Access-Control-Allow-Origin","*");  String datalogHeader=request.getHeader(Constants.getHeader(Configuration.HTTP_HEADER_DATALOG));  DatalogRequest dr=null;  boolean forwarded=false;  if (null != datalogHeader) {    byte[] bytes=OrderPreservingBase64.decode(datalogHeader.getBytes(Charsets.US_ASCII));    if (null != datalogPSK) {      bytes=CryptoUtils.unwrap(datalogPSK,bytes);    }    if (null == bytes) {      throw new IOException("Invalid Datalog header.");    }    TDeserializer deser=new TDeserializer(new TCompactProtocol.Factory());    try {      dr=new DatalogRequest();      deser.deserialize(dr,bytes);    } catch (    TException te) {      throw new IOException();    }    Map<String,String> labels=new HashMap<String,String>();    labels.put(SensisionConstants.SENSISION_LABEL_ID,new String(OrderPreservingBase64.decode(dr.getId().getBytes(Charsets.US_ASCII)),Charsets.UTF_8));    labels.put(SensisionConstants.SENSISION_LABEL_TYPE,dr.getType());    Sensision.update(SensisionConstants.CLASS_WARP_DATALOG_REQUESTS_RECEIVED,labels,1);    forwarded=true;  }  String token=null != dr ? dr.getToken() : request.getHeader(Constants.getHeader(Configuration.HTTP_HEADER_TOKENX));  WriteToken wtoken;  try {    wtoken=Tokens.extractWriteToken(token);  } catch (  WarpScriptException ee) {    throw new IOException(ee);  }  String application=wtoken.getAppName();  String producer=Tokens.getUUID(wtoken.getProducerId());  String owner=Tokens.getUUID(wtoken.getOwnerId());  if (null == producer || null == owner) {    response.sendError(HttpServletResponse.SC_FORBIDDEN,"Invalid token.");    return;  }  boolean gzipped=false;  if (null != request.getHeader("Content-Type") && "application/gzip".equals(request.getHeader("Content-Type"))) {    gzipped=true;  }  BufferedReader br=null;  if (gzipped) {    GZIPInputStream is=new GZIPInputStream(request.getInputStream());    br=new BufferedReader(new InputStreamReader(is));  } else {    br=request.getReader();  }  File loggingFile=null;  PrintWriter loggingWriter=null;  if (null != loggingDir) {    long nanos=null != dr ? dr.getTimestamp() : TimeSource.getNanoTime();    StringBuilder sb=new StringBuilder();    sb.append(Long.toHexString(nanos));    sb.insert(0,"0000000000000000",0,16 - sb.length());    sb.append("-");    if (null != dr) {      sb.append(dr.getId());    } else {      sb.append(datalogId);    }    sb.append("-");    sb.append(dtf.print(nanos / 1000000L));    sb.append(Long.toString(1000000L + (nanos % 1000000L)).substring(1));    sb.append("Z");    if (null == dr) {      dr=new DatalogRequest();      dr.setTimestamp(nanos);      dr.setType(Constants.DATALOG_META);      dr.setId(datalogId);      dr.setToken(token);    }    if (null != dr && (!forwarded || (forwarded && this.logforwarded))) {      TSerializer ser=new TSerializer(new TCompactProtocol.Factory());      byte[] encoded;      try {        encoded=ser.serialize(dr);      } catch (      TException te) {        throw new IOException(te);      }      if (null != this.datalogPSK) {        encoded=CryptoUtils.wrap(this.datalogPSK,encoded);      }      encoded=OrderPreservingBase64.encode(encoded);      loggingFile=new File(loggingDir,sb.toString());      loggingWriter=new PrintWriter(new FileWriterWithEncoding(loggingFile,Charsets.UTF_8));      loggingWriter.println(new String(encoded,Charsets.US_ASCII));    }  }  try {    while (true) {      String line=br.readLine();      if (null == line) {        break;      }      if ("".equals(line)) {        continue;      }      if ('#' == line.charAt(0)) {        continue;      }      Metadata metadata=MetadataUtils.parseMetadata(line);      if (wtoken.getLabelsSize() > 0) {        metadata.getLabels().putAll(wtoken.getLabels());      }      metadata.getLabels().put(Constants.PRODUCER_LABEL,producer);      metadata.getLabels().put(Constants.OWNER_LABEL,owner);      if (null != application) {        metadata.getLabels().put(Constants.APPLICATION_LABEL,application);      } else {        metadata.getLabels().remove(Constants.APPLICATION_LABEL);      }      if (!MetadataUtils.validateMetadata(metadata)) {        response.sendError(HttpServletResponse.SC_BAD_REQUEST,"Invalid metadata " + line);        return;      }      metadata.setSource(Configuration.INGRESS_METADATA_UPDATE_ENDPOINT);      this.directoryClient.register(metadata);      if (null != loggingWriter) {        loggingWriter.println(line);      }    }  }  finally {    if (null != loggingWriter) {      Map<String,String> labels=new HashMap<String,String>();      labels.put(SensisionConstants.SENSISION_LABEL_ID,new String(OrderPreservingBase64.decode(dr.getId().getBytes(Charsets.US_ASCII)),Charsets.UTF_8));      labels.put(SensisionConstants.SENSISION_LABEL_TYPE,dr.getType());      Sensision.update(SensisionConstants.CLASS_WARP_DATALOG_REQUESTS_LOGGED,labels,1);      loggingWriter.close();      loggingFile.renameTo(new File(loggingFile.getAbsolutePath() + DatalogForwarder.DATALOG_SUFFIX));    }  }  response.setStatus(HttpServletResponse.SC_OK);}  }
class C{  protected final static void initHardCodedProperties(Properties p){  StringTokenizer tokenizer;  tokenizer=new StringTokenizer(title,"=");  tokenizer.nextToken();  p.put(Title,tokenizer.nextToken());  tokenizer=new StringTokenizer(version,"=");  tokenizer.nextToken();  p.put(Version,tokenizer.nextToken());  tokenizer=new StringTokenizer(build,"=");  tokenizer.nextToken();  try {    p.put(BuildDate,tokenizer.nextToken());  } catch (  NoSuchElementException e) {  }}  }
class C{  public String toFormattedString(){  return "CUDA resource descriptor:\n    " + createString("\n    ");}  }
class C{  protected void parseV() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x=parseFloat();pathHandler.linetoVerticalAbs(x);expectNumber=skipCommaSpaces2();}}  }
class C{  public DefaultVcfWriter(VcfHeader header,File outputFile,OutputStream stdout,boolean compress,boolean createIndexIfPossible,boolean writeHeader) throws IOException {  this(header,outputFile,stdout,compress,createIndexIfPossible);  mHeaderWritten=!writeHeader;}  }
class C{  @Override public Boolean visitTypevar_Typevar(final AnnotatedTypeVariable type1,final AnnotatedTypeVariable type2,final VisitHistory visited){  if (visited.contains(type1,type2)) {    return true;  }  visited.add(type1,type2);  if (InternalUtils.isCaptured(type1.getUnderlyingType()) || InternalUtils.isCaptured(type2.getUnderlyingType())) {    if (!boundsMatch(type1,type2)) {      return subtypeAndCompare(type1.getUpperBound(),type2.getUpperBound(),visited) && subtypeAndCompare(type1.getLowerBound(),type2.getLowerBound(),visited);    }  }  visited.add(type1,type2);  return areEqual(type1.getUpperBound(),type2.getUpperBound(),visited) && areEqual(type1.getLowerBound(),type2.getLowerBound(),visited);}  }
class C{  public float filter(float sample){  insert(sample);  float accumulator=0;  accumulator+=mCoefficients[mCenterCoefficient] * mBuffer[mIndexMap[mBufferPointer][mCenterCoefficientMapIndex]];  for (int x=0; x < mCenterCoefficientMapIndex; x+=2) {    accumulator+=mCoefficients[x] * (mBuffer[mIndexMap[mBufferPointer][x]] + mBuffer[mIndexMap[mBufferPointer][x + 1]]);  }  return accumulator * mGain;}  }
class C{  public HostAddressService(boolean autoEnable) throws HostException {  addMethod(DEFAULT,InetAddressPing.class.getName(),autoEnable);  addMethod(PING,OsUtilityPing.class.getName(),autoEnable);  addMethod(ECHO,EchoPing.class.getName(),autoEnable);}  }
class C{  WalkingIteratorSorted(Compiler compiler,int opPos,int analysis,boolean shouldLoadWalkers) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,shouldLoadWalkers);}  }
class C{  protected SelectorList parseSelectorsInternal() throws CSSException, IOException {  nextIgnoreSpaces();  SelectorList ret=parseSelectorList();  scanner=null;  return ret;}  }
class C{  private void assertSerializeAndDesDateTime(String dateTimeString) throws RyaTypeResolverException {  assertSerializeAndDesDateTime(dateTimeString,dateTimeString);}  }
class C{  public void testConnectInput(){  int iterations=BluetoothTestRunner.sConnectInputIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.INPUT_DEVICE,null);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("connectInput iteration " + (i + 1) + " of "+ iterations);    mTestUtils.connectProfile(adapter,device,BluetoothProfile.INPUT_DEVICE,String.format("connectInput(device=%s)",device));    mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.INPUT_DEVICE,String.format("disconnectInput(device=%s)",device));  }  mTestUtils.unpair(adapter,device);  mTestUtils.disable(adapter);}  }
class C{  private boolean isFunctionCall(int from,int to){  if (!isIdentifier(tokenArray[from]) && !isToken("(",from + 1)) {    return false;  }  return findClosingIndex(from + 1,to) > from + 1;}  }
class C{  public SAXParser newSAXParser() throws ParserConfigurationException {  SAXParserMMImpl saxParserImpl;  try {    saxParserImpl=new SAXParserMMImpl(this,features,fSecureProcess);  } catch (  SAXException se) {    throw new ParserConfigurationException(se.getMessage());  }  return saxParserImpl;}  }
class C{  public final void add(FilterParamIndexBase index){  indizes.add(index);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DefaultMultiValueCategoryDataset)) {    return false;  }  DefaultMultiValueCategoryDataset that=(DefaultMultiValueCategoryDataset)obj;  return this.data.equals(that.data);}  }
class C{  public CudaException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void newLineIfLastWasNotEmpty(int align){  if (!lastWasEmpty) {    newLine(align);  }}  }
class C{  private void visitDirectInvocation(Tree.InvocationExpression that){  Tree.Term primary=unwrapExpressionUntilTerm(that.getPrimary());  if (primary == null) {    return;  }  Tree.MemberOrTypeExpression mte=(Tree.MemberOrTypeExpression)primary;  Reference prf=mte.getTarget();  Declaration dec=mte.getDeclaration();  Functional fun=(Functional)dec;  if (dec != null) {    if (!(primary instanceof Tree.ExtendedTypeExpression)) {      if (dec instanceof Class) {        Class c=(Class)dec;        if (c.isAbstract()) {          that.addError("abstract class may not be instantiated: '" + dec.getName(unit) + "'");        }      }    }    Tree.NamedArgumentList nal=that.getNamedArgumentList();    if (nal != null && dec.isAbstraction()) {      that.addError("overloaded declarations may not be called using named arguments: '" + dec.getName(unit) + "'");    }    Type ct=primary.getTypeModel();    if (ct != null) {      List<Type> tal=ct.getTypeArgumentList();      if (!tal.isEmpty()) {        that.setTypeModel(tal.get(0));      }    }    if (nal != null) {      List<ParameterList> parameterLists=fun.getParameterLists();      if (!parameterLists.isEmpty() && !parameterLists.get(0).isNamedParametersSupported()) {        that.addError("named invocations of Java methods not supported");      }    }    if (dec.isAbstraction()) {    } else {      checkInvocationArguments(that,prf,fun);    }  }}  }
class C{  public static void initBrowsing(){  if (browserStorage == null && tabSwitcher == null) {    browserStorage=new BrowserStorage(getContext());    tabSwitcher=new TabSwitcherWrapper(new BlueListedTabSwitcher(getContext(),staticRootView).setTabStorage(new TabStorage()));    BlueListedTabSwitcher.cast(getTabSwitcher()).mainView.bringToFront();  }}  }
class C{  public UniformSelection(){  super();}  }
class C{  public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if ((null != top) && top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || ((null != top) && top.equals(pos))) {          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.m_contentHandler.endDocument();}  }
class C{  public static <T,C extends Collection<T>>C requireNonNullElements(C collection){  requireNonNull(collection,"The provided collection is null.");  collection.forEach(null);  return collection;}  }
class C{  public static void recordOmniboxNavigation(String destinationUrl,int transitionType){  if ((transitionType & PageTransition.CORE_MASK) == PageTransition.GENERATED) {    recordAction(ACTION_SEARCHED_USING_OMNIBOX);  } else {    if (UrlUtilities.nativeIsGoogleHomePageUrl(destinationUrl)) {      recordAction(ACTION_NAVIGATED_TO_GOOGLE_HOMEPAGE);    } else {      recordAction(ACTION_NAVIGATED_USING_OMNIBOX);    }    recordExplicitUserNavigation(destinationUrl,RAPPOR_ACTION_NAVIGATED_USING_OMNIBOX);  }}  }
class C{  public ObjectRepository createRepository(Repository delegate) throws RepositoryConfigException, RepositoryException {  return createRepository(getConfig(),delegate);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testSetNamedItemNS1() throws Throwable {  Document doc;  NodeList elementList;  Node anotherElement;  NamedNodeMap anotherMap;  Node arg;  Node testAddress;  NamedNodeMap map;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("address");  anotherElement=elementList.item(2);  anotherMap=anotherElement.getAttributes();  arg=anotherMap.getNamedItemNS("http://www.netzero.com","domestic");  testAddress=elementList.item(0);  map=testAddress.getAttributes();{    boolean success=false;    try {      map.setNamedItemNS(arg);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public ConfigurationInfo(int argcount,String argname){  this.argcount=argcount;  this.argnames=new String[]{argname};}  }
class C{  public XYStepAreaRenderer(){  this(AREA);}  }
class C{  public boolean isClusterDefined(){  return notNullNorEmpty(getClusterSize()) && notNullNorEmpty(getMasterTemplateId()) && notNullNorEmpty(getSlaveTemplateId());}  }
class C{  public static void main(String[] args){  int num;  int[] numbers=new int[10000];  for (int i=0; i < numbers.length; i++) {    numbers[i]=getRandomInt();  }  int key=getRandomInt();  int searchResult;  long startTime=System.currentTimeMillis();  searchResult=linearSearch(numbers,key);  long endTime=System.currentTimeMillis();  long executionTime=endTime - startTime;  System.out.println("Execution time of invoking the linearSearch in milliseconds: " + executionTime);  selectionSort(numbers);  startTime=System.currentTimeMillis();  searchResult=binarySearch(numbers,key);  endTime=System.currentTimeMillis();  executionTime=endTime - startTime;  System.out.println("Execution time of invoking the binarySearch in milliseconds: " + executionTime + " ");}  }
class C{  public Import(String importUri,String absoluteUri,String contents,String sourceMap) throws URISyntaxException {  URI tempImportUri;  try {    tempImportUri=new URI(importUri);  } catch (  URISyntaxException e) {    tempImportUri=new File(importUri).toURI();  }  this.importUri=tempImportUri;  URI tempAbsoluteUri;  try {    tempAbsoluteUri=new URI(absoluteUri);  } catch (  URISyntaxException e) {    tempAbsoluteUri=new File(absoluteUri).toURI();  }  this.absoluteUri=tempAbsoluteUri;  this.contents=contents;  this.sourceMap=sourceMap;}  }
class C{  public static float deserializeFloat(byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  int val=((((int)buffer[0 + offsetInt]) & 0xFF) << 24) | ((((int)buffer[1 + offsetInt]) & 0xFF) << 16) | ((((int)buffer[2 + offsetInt]) & 0xFF) << 8)| (((int)buffer[3 + offsetInt]) & 0xFF);  offset.add(Type.FLOAT.getByteSize());  return Float.intBitsToFloat(val);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.157 -0500",hash_original_method="CAF92C1590742750040007716FD6D4B6",hash_generated_method="B1071BF34EE08892A09AC1DB1A0B09B2") public static short reverseBytes(short s){  return (short)((s << 8) | ((s >>> 8) & 0xFF));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double slope;  double z, z2;  int c, i;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col, x, y;  double dist;  double minSlope=0;  double minZChange=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          minSlope=99999999;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            dist=gridLengths[c];            z2=DEM.getValue(y,x);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope >= 0 && slope < minSlope) {                minSlope=slope;                minZChange=z - z2;              }            }          }          if (minSlope < 99999999) {            output.setValue(row,col,minZChange);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String docType(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_DocType_ID=(Integer)value;  if (C_DocType_ID == null || C_DocType_ID.intValue() == 0)   return "";  String sql="SELECT d.IsSoTrx " + "FROM C_DocType d WHERE C_DocType_ID=?";  String docSOTrx=DB.getSQLValueString(null,sql,C_DocType_ID);  boolean isSOTrx="Y".equals(docSOTrx);  mTab.setValue("IsSOTrx",isSOTrx);  return "";}  }
class C{  public void push(final boolean value){  push(value ? 1 : 0);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double value;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  polyOrder=Integer.parseInt(args[2]);  if (polyOrder < 0) {    polyOrder=0;  }  if (polyOrder > 10) {    polyOrder=10;  }  if ((inputHeader.isEmpty()) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    int totalNumCells=rows * cols;    double[] x=new double[totalNumCells];    double[] y=new double[totalNumCells];    double[] z=new double[totalNumCells];    double[] data;    int cellNum=0;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          x[cellNum]=image.getXCoordinateFromColumn(col);          y[cellNum]=image.getYCoordinateFromRow(row);          z[cellNum]=data[col];          cellNum++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    String inputHeaderShort=image.getShortHeaderFile();    image.close();    double rsquare=calculateEquation(x,y,z);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=getForwardCoordinates(output.getXCoordinateFromColumn(col),output.getYCoordinateFromRow(row));        output.setValue(row,col,value);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);    StringBuilder sb=new StringBuilder();    sb.append("TREND SURFACE ANALYSIS OUTPUT\n\n");    sb.append("Input File:\t").append(inputHeaderShort).append("\n");    sb.append("Polynomial Order:\t").append(polyOrder).append("\n\n");    sb.append("Coefficent #\t").append("Value\n");    for (int a=0; a < regressCoefficents.length; a++) {      sb.append((a + 1)).append("\t").append(regressCoefficents[a]).append("\n");    }    sb.append("\nR-square:\t").append(rsquare);    returnData(sb.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addHandler(String path,ElementHandler handler){  getDispatchHandler().addHandler(path,handler);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  boolean beep=true;  if ((target != null) && (target.isEditable())) {    try {      Document doc=target.getDocument();      Caret caret=target.getCaret();      int dot=caret.getDot();      int mark=caret.getMark();      if (dot != mark) {        doc.remove(Math.min(dot,mark),Math.abs(dot - mark));        beep=false;      } else       if (dot < doc.getLength()) {        int delChars=1;        if (dot < doc.getLength() - 1) {          String dotChars=doc.getText(dot,2);          char c0=dotChars.charAt(0);          char c1=dotChars.charAt(1);          if (c0 >= '\uD800' && c0 <= '\uDBFF' && c1 >= '\uDC00' && c1 <= '\uDFFF') {            delChars=2;          }        }        doc.remove(dot,delChars);        beep=false;      }    } catch (    BadLocationException bl) {    }  }  if (beep) {    UIManager.getLookAndFeel().provideErrorFeedback(target);  }}  }
class C{  public Poly1305(){  this.cipher=null;}  }
class C{  public static double sigmoid(double input,double cutoff,double rate){  return 1.0 / (1 + Math.pow(Math.E,-rate * (input - cutoff)));}  }
class C{  public synchronized void update(final byte[] primarykey,final Map<String,String> row){  for (  Map.Entry<String,Map<String,Collection<byte[]>>> entry : this.index.entrySet()) {    String value=row.get(entry.getKey());    if (value == null)     continue;    indexupdate(primarykey,entry.getValue(),value);  }}  }
class C{  public static int verifyPubKeyProto(ConiksUser user,AuthPath authPath){  String keyData=user.getKeyData();  AuthPath.UserLeafNode apUln=authPath.getLeaf();  String pk=apUln.getPublickey();  if (pk.equals(keyData)) {    return ConsistencyErr.CHECK_PASSED;  } else {    return ConsistencyErr.UNEXPECTED_KEY_ERR;  }}  }
class C{  private void editSubscriptions(){  String packageName=getPackageName();  Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=" + packageName));  startActivity(i);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode03.class,args);}  }
class C{  private void appendMultiPolygonTaggedText(MultiPolygon multiPolygon,int level,Writer writer) throws IOException {  writer.write("MULTIPOLYGON ");  appendMultiPolygonText(multiPolygon,level,writer);}  }
