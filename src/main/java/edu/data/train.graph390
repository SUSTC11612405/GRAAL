class C{  static AdbResponse readAdbResponse(SocketChannel chan,boolean readDiagString) throws TimeoutException, IOException {  AdbResponse resp=new AdbResponse();  byte[] reply=new byte[4];  read(chan,reply);  if (isOkay(reply)) {    resp.okay=true;  } else {    readDiagString=true;    resp.okay=false;  }  try {    while (readDiagString) {      byte[] lenBuf=new byte[4];      read(chan,lenBuf);      String lenStr=replyToString(lenBuf);      int len;      try {        len=Integer.parseInt(lenStr,16);      } catch (      NumberFormatException nfe) {        Log.w("ddms","Expected digits, got '" + lenStr + "': "+ lenBuf[0]+ " "+ lenBuf[1]+ " "+ lenBuf[2]+ " "+ lenBuf[3]);        Log.w("ddms","reply was " + replyToString(reply));        break;      }      byte[] msg=new byte[len];      read(chan,msg);      resp.message=replyToString(msg);      Log.v("ddms","Got reply '" + replyToString(reply) + "', diag='"+ resp.message+ "'");      break;    }  } catch (  Exception e) {  }  return resp;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private VPlexVirtualVolumeInfo findVirtualVolumeAfterDeviceMigration(String originalVolumeName,VPlexMigrationInfo migrationInfo,List<VPlexClusterInfo> clusterInfoList){  VPlexVirtualVolumeInfo virtualVolumeInfo=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    String clusterName=clusterInfo.getName();    virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterName,originalVolumeName,false);    if (virtualVolumeInfo != null) {      s_logger.info("Found virtual volume after device migration with name {} on cluster {}",originalVolumeName,clusterName);      break;    } else {      String virtualVolumeName=migrationInfo.getTarget();      virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterName,virtualVolumeName,false);      if (virtualVolumeInfo != null) {        s_logger.info("Found virtual volume after device migration with name {} on cluster {}",virtualVolumeName,clusterName);        break;      } else {        virtualVolumeName+=VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX;        virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterInfo.getName(),virtualVolumeName,false);        if (virtualVolumeInfo != null) {          s_logger.info("Found virtual volume after device migration with name {} on cluster {}",virtualVolumeName,clusterName);          break;        }      }    }  }  return virtualVolumeInfo;}  }
class C{  public void stop(){  if (serviceThread != null) {    serviceThread.quit();  }  stopSelf();}  }
class C{  public JMXServiceURL(String protocol,String host,int port,String urlPath) throws MalformedURLException {  if (protocol == null)   protocol="jmxmp";  if (host == null) {    InetAddress local;    try {      local=InetAddress.getLocalHost();    } catch (    UnknownHostException e) {      throw new MalformedURLException("Local host name unknown: " + e);    }    host=local.getHostName();    try {      validateHost(host,port);    } catch (    MalformedURLException e) {      if (logger.fineOn()) {        logger.fine("JMXServiceURL","Replacing illegal local host name " + host + " with numeric IP address "+ "(see RFC 1034)",e);      }      host=local.getHostAddress();    }  }  if (host.startsWith("[")) {    if (!host.endsWith("]")) {      throw new MalformedURLException("Host starts with [ but " + "does not end with ]");    }    host=host.substring(1,host.length() - 1);    if (!isNumericIPv6Address(host)) {      throw new MalformedURLException("Address inside [...] must " + "be numeric IPv6 address");    }    if (host.startsWith("["))     throw new MalformedURLException("More than one [[...]]");  }  this.protocol=protocol.toLowerCase();  this.host=host;  this.port=port;  if (urlPath == null)   urlPath="";  this.urlPath=urlPath;  validate();}  }
class C{  public synchronized void co_exit(int thisCoroutine){  m_activeIDs.clear(thisCoroutine);  m_nextCoroutine=NOBODY;  notify();}  }
class C{  public void printTree(final EvolutionState state,final int log,final int verbosity){  child.printRootedTree(state,log,0);  state.output.println("",log);}  }
class C{  private void changeIndicator(){  mViewIndicators[mNumberCollected - 1].setImageResource(R.drawable.gbg_gumball_indicator_collected);}  }
class C{  public void evictAll(){  List<Connection> connections;synchronized (this) {    connections=new ArrayList<Connection>(this.connections);    this.connections.clear();  }  for (  Connection connection : connections) {    Util.closeQuietly(connection);  }}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  private void writeClustersAndNetwork2ESRIShape(String outputFolder){  SimpleFeatureTypeBuilder typeBuilder=new SimpleFeatureTypeBuilder();  typeBuilder.setName("shape");  typeBuilder.add("link",LineString.class);  typeBuilder.add("ID",String.class);  typeBuilder.add("length",Double.class);  typeBuilder.add("freespeed",Double.class);  typeBuilder.add("capacity",Double.class);  typeBuilder.add("nlanes",String.class);  typeBuilder.setCRS(MGC.getCRS(this.targetCoordinateSystem));  this.builder=new SimpleFeatureBuilder(typeBuilder.buildFeatureType());  ArrayList<SimpleFeature> features=new ArrayList<SimpleFeature>();  for (  Link link : this.network.getLinks().values()) {    SimpleFeature feature=this.builder.buildFeature(null,new Object[]{new GeometryFactory().createLineString(new Coordinate[]{new Coordinate(link.getFromNode().getCoord().getX(),link.getFromNode().getCoord().getY()),new Coordinate(link.getToNode().getCoord().getX(),link.getToNode().getCoord().getY())}),link.getId(),link.getLength(),link.getFreespeed(),link.getCapacity(),link.getNumberOfLanes()});    features.add(feature);  }  String destination="network";  this.filesForExportInQGisProject.put(destination,LineString.class);  ShapeFileWriter.writeGeometries(features,outputFolder + destination + this.SHPfile);  if (this.smallClusterLinks.size() > 0) {    features.clear();    for (    Link link : this.smallClusterLinks.values()) {      SimpleFeature feature=this.builder.buildFeature(null,new Object[]{new GeometryFactory().createLineString(new Coordinate[]{new Coordinate(link.getFromNode().getCoord().getX(),link.getFromNode().getCoord().getY()),new Coordinate(link.getToNode().getCoord().getX(),link.getToNode().getCoord().getY())}),link.getId(),link.getLength(),link.getFreespeed(),link.getCapacity(),link.getNumberOfLanes()});      features.add(feature);    }    destination="smallClusters";    this.filesForExportInQGisProject.put(destination,LineString.class);    ShapeFileWriter.writeGeometries(features,outputFolder + destination + this.SHPfile);  }}  }
class C{  public Icon apply(V v){  if (pi.isPicked(v))   return picked_icon; else   return icon;}  }
class C{  protected void appendConstant(final Object cst){  appendConstant(buf,cst);}  }
class C{  private void handleSingle(@NonNull String permissionName){  if (permissionExists(permissionName)) {    if (!permissionName.equalsIgnoreCase(Manifest.permission.SYSTEM_ALERT_WINDOW)) {      if (isPermissionDeclined(permissionName)) {        if (isExplanationNeeded(permissionName)) {          permissionCallback.onPermissionNeedExplanation(permissionName);        } else {          context.requestPermissions(new String[]{permissionName},REQUEST_PERMISSIONS);        }      } else {        permissionCallback.onPermissionPreGranted(permissionName);      }    } else {      requestSystemAlertPermission();    }  } else {    permissionCallback.onPermissionDeclined(new String[]{permissionName});  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_INTERFACE_DECLARATION__SUPER_INTERFACE_REFS:    return getSuperInterfaceRefs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static <T extends CharSequence>T eachMatch(T self,CharSequence regex,@ClosureParams(value=FromString.class,options={"List<String>","String[]"}) Closure closure){  eachMatch(self.toString(),regex.toString(),closure);  return self;}  }
class C{  public BrowseNextResponse clone(){  BrowseNextResponse result=new BrowseNextResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Results != null) {    result.Results=new BrowseResult[Results.length];    for (int i=0; i < Results.length; i++)     result.Results[i]=Results[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public void removeAssignedStoragePools(final Set<String> storagePoolURIs){  if (storagePoolURIs != null && !storagePoolURIs.isEmpty() && _assignedStoragePools != null) {    HashSet<String> removeStoragePools=new HashSet<String>();    removeStoragePools.addAll(storagePoolURIs);    _assignedStoragePools.removeAll(removeStoragePools);  }}  }
class C{  void decryptBlock(byte[] in,int inOffset,byte[] out,int outOffset){  int keyOffset=4;  int t0=((in[inOffset++]) << 24 | (in[inOffset++] & 0xFF) << 16 | (in[inOffset++] & 0xFF) << 8 | (in[inOffset++] & 0xFF)) ^ K[keyOffset++];  int t1=((in[inOffset++]) << 24 | (in[inOffset++] & 0xFF) << 16 | (in[inOffset++] & 0xFF) << 8 | (in[inOffset++] & 0xFF)) ^ K[keyOffset++];  int t2=((in[inOffset++]) << 24 | (in[inOffset++] & 0xFF) << 16 | (in[inOffset++] & 0xFF) << 8 | (in[inOffset++] & 0xFF)) ^ K[keyOffset++];  int t3=((in[inOffset++]) << 24 | (in[inOffset++] & 0xFF) << 16 | (in[inOffset++] & 0xFF) << 8 | (in[inOffset] & 0xFF)) ^ K[keyOffset++];  int a0, a1, a2;  if (ROUNDS_12) {    a0=T5[(t0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(t2 >>> 8) & 0xFF]^ T8[(t1) & 0xFF]^ K[keyOffset++];    a1=T5[(t1 >>> 24)] ^ T6[(t0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(t2) & 0xFF]^ K[keyOffset++];    a2=T5[(t2 >>> 24)] ^ T6[(t1 >>> 16) & 0xFF] ^ T7[(t0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];    t3=T5[(t3 >>> 24)] ^ T6[(t2 >>> 16) & 0xFF] ^ T7[(t1 >>> 8) & 0xFF]^ T8[(t0) & 0xFF]^ K[keyOffset++];    t0=T5[(a0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(a2 >>> 8) & 0xFF]^ T8[(a1) & 0xFF]^ K[keyOffset++];    t1=T5[(a1 >>> 24)] ^ T6[(a0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(a2) & 0xFF]^ K[keyOffset++];    t2=T5[(a2 >>> 24)] ^ T6[(a1 >>> 16) & 0xFF] ^ T7[(a0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];    t3=T5[(t3 >>> 24)] ^ T6[(a2 >>> 16) & 0xFF] ^ T7[(a1 >>> 8) & 0xFF]^ T8[(a0) & 0xFF]^ K[keyOffset++];    if (ROUNDS_14) {      a0=T5[(t0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(t2 >>> 8) & 0xFF]^ T8[(t1) & 0xFF]^ K[keyOffset++];      a1=T5[(t1 >>> 24)] ^ T6[(t0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(t2) & 0xFF]^ K[keyOffset++];      a2=T5[(t2 >>> 24)] ^ T6[(t1 >>> 16) & 0xFF] ^ T7[(t0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];      t3=T5[(t3 >>> 24)] ^ T6[(t2 >>> 16) & 0xFF] ^ T7[(t1 >>> 8) & 0xFF]^ T8[(t0) & 0xFF]^ K[keyOffset++];      t0=T5[(a0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(a2 >>> 8) & 0xFF]^ T8[(a1) & 0xFF]^ K[keyOffset++];      t1=T5[(a1 >>> 24)] ^ T6[(a0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(a2) & 0xFF]^ K[keyOffset++];      t2=T5[(a2 >>> 24)] ^ T6[(a1 >>> 16) & 0xFF] ^ T7[(a0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];      t3=T5[(t3 >>> 24)] ^ T6[(a2 >>> 16) & 0xFF] ^ T7[(a1 >>> 8) & 0xFF]^ T8[(a0) & 0xFF]^ K[keyOffset++];    }  }  a0=T5[(t0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(t2 >>> 8) & 0xFF]^ T8[(t1) & 0xFF]^ K[keyOffset++];  a1=T5[(t1 >>> 24)] ^ T6[(t0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(t2) & 0xFF]^ K[keyOffset++];  a2=T5[(t2 >>> 24)] ^ T6[(t1 >>> 16) & 0xFF] ^ T7[(t0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];  t3=T5[(t3 >>> 24)] ^ T6[(t2 >>> 16) & 0xFF] ^ T7[(t1 >>> 8) & 0xFF]^ T8[(t0) & 0xFF]^ K[keyOffset++];  t0=T5[(a0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(a2 >>> 8) & 0xFF]^ T8[(a1) & 0xFF]^ K[keyOffset++];  t1=T5[(a1 >>> 24)] ^ T6[(a0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(a2) & 0xFF]^ K[keyOffset++];  t2=T5[(a2 >>> 24)] ^ T6[(a1 >>> 16) & 0xFF] ^ T7[(a0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];  t3=T5[(t3 >>> 24)] ^ T6[(a2 >>> 16) & 0xFF] ^ T7[(a1 >>> 8) & 0xFF]^ T8[(a0) & 0xFF]^ K[keyOffset++];  a0=T5[(t0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(t2 >>> 8) & 0xFF]^ T8[(t1) & 0xFF]^ K[keyOffset++];  a1=T5[(t1 >>> 24)] ^ T6[(t0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(t2) & 0xFF]^ K[keyOffset++];  a2=T5[(t2 >>> 24)] ^ T6[(t1 >>> 16) & 0xFF] ^ T7[(t0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];  t3=T5[(t3 >>> 24)] ^ T6[(t2 >>> 16) & 0xFF] ^ T7[(t1 >>> 8) & 0xFF]^ T8[(t0) & 0xFF]^ K[keyOffset++];  t0=T5[(a0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(a2 >>> 8) & 0xFF]^ T8[(a1) & 0xFF]^ K[keyOffset++];  t1=T5[(a1 >>> 24)] ^ T6[(a0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(a2) & 0xFF]^ K[keyOffset++];  t2=T5[(a2 >>> 24)] ^ T6[(a1 >>> 16) & 0xFF] ^ T7[(a0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];  t3=T5[(t3 >>> 24)] ^ T6[(a2 >>> 16) & 0xFF] ^ T7[(a1 >>> 8) & 0xFF]^ T8[(a0) & 0xFF]^ K[keyOffset++];  a0=T5[(t0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(t2 >>> 8) & 0xFF]^ T8[(t1) & 0xFF]^ K[keyOffset++];  a1=T5[(t1 >>> 24)] ^ T6[(t0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(t2) & 0xFF]^ K[keyOffset++];  a2=T5[(t2 >>> 24)] ^ T6[(t1 >>> 16) & 0xFF] ^ T7[(t0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];  t3=T5[(t3 >>> 24)] ^ T6[(t2 >>> 16) & 0xFF] ^ T7[(t1 >>> 8) & 0xFF]^ T8[(t0) & 0xFF]^ K[keyOffset++];  t0=T5[(a0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(a2 >>> 8) & 0xFF]^ T8[(a1) & 0xFF]^ K[keyOffset++];  t1=T5[(a1 >>> 24)] ^ T6[(a0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(a2) & 0xFF]^ K[keyOffset++];  t2=T5[(a2 >>> 24)] ^ T6[(a1 >>> 16) & 0xFF] ^ T7[(a0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];  t3=T5[(t3 >>> 24)] ^ T6[(a2 >>> 16) & 0xFF] ^ T7[(a1 >>> 8) & 0xFF]^ T8[(a0) & 0xFF]^ K[keyOffset++];  a0=T5[(t0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(t2 >>> 8) & 0xFF]^ T8[(t1) & 0xFF]^ K[keyOffset++];  a1=T5[(t1 >>> 24)] ^ T6[(t0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(t2) & 0xFF]^ K[keyOffset++];  a2=T5[(t2 >>> 24)] ^ T6[(t1 >>> 16) & 0xFF] ^ T7[(t0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];  t3=T5[(t3 >>> 24)] ^ T6[(t2 >>> 16) & 0xFF] ^ T7[(t1 >>> 8) & 0xFF]^ T8[(t0) & 0xFF]^ K[keyOffset++];  t0=T5[(a0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(a2 >>> 8) & 0xFF]^ T8[(a1) & 0xFF]^ K[keyOffset++];  t1=T5[(a1 >>> 24)] ^ T6[(a0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(a2) & 0xFF]^ K[keyOffset++];  t2=T5[(a2 >>> 24)] ^ T6[(a1 >>> 16) & 0xFF] ^ T7[(a0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];  t3=T5[(t3 >>> 24)] ^ T6[(a2 >>> 16) & 0xFF] ^ T7[(a1 >>> 8) & 0xFF]^ T8[(a0) & 0xFF]^ K[keyOffset++];  a0=T5[(t0 >>> 24)] ^ T6[(t3 >>> 16) & 0xFF] ^ T7[(t2 >>> 8) & 0xFF]^ T8[(t1) & 0xFF]^ K[keyOffset++];  a1=T5[(t1 >>> 24)] ^ T6[(t0 >>> 16) & 0xFF] ^ T7[(t3 >>> 8) & 0xFF]^ T8[(t2) & 0xFF]^ K[keyOffset++];  a2=T5[(t2 >>> 24)] ^ T6[(t1 >>> 16) & 0xFF] ^ T7[(t0 >>> 8) & 0xFF]^ T8[(t3) & 0xFF]^ K[keyOffset++];  t3=T5[(t3 >>> 24)] ^ T6[(t2 >>> 16) & 0xFF] ^ T7[(t1 >>> 8) & 0xFF]^ T8[(t0) & 0xFF]^ K[keyOffset++];  t1=K[0];  out[outOffset++]=(byte)(Si[(a0 >>> 24)] ^ (t1 >>> 24));  out[outOffset++]=(byte)(Si[(t3 >>> 16) & 0xFF] ^ (t1 >>> 16));  out[outOffset++]=(byte)(Si[(a2 >>> 8) & 0xFF] ^ (t1 >>> 8));  out[outOffset++]=(byte)(Si[(a1) & 0xFF] ^ (t1));  t1=K[1];  out[outOffset++]=(byte)(Si[(a1 >>> 24)] ^ (t1 >>> 24));  out[outOffset++]=(byte)(Si[(a0 >>> 16) & 0xFF] ^ (t1 >>> 16));  out[outOffset++]=(byte)(Si[(t3 >>> 8) & 0xFF] ^ (t1 >>> 8));  out[outOffset++]=(byte)(Si[(a2) & 0xFF] ^ (t1));  t1=K[2];  out[outOffset++]=(byte)(Si[(a2 >>> 24)] ^ (t1 >>> 24));  out[outOffset++]=(byte)(Si[(a1 >>> 16) & 0xFF] ^ (t1 >>> 16));  out[outOffset++]=(byte)(Si[(a0 >>> 8) & 0xFF] ^ (t1 >>> 8));  out[outOffset++]=(byte)(Si[(t3) & 0xFF] ^ (t1));  t1=K[3];  out[outOffset++]=(byte)(Si[(t3 >>> 24)] ^ (t1 >>> 24));  out[outOffset++]=(byte)(Si[(a2 >>> 16) & 0xFF] ^ (t1 >>> 16));  out[outOffset++]=(byte)(Si[(a1 >>> 8) & 0xFF] ^ (t1 >>> 8));  out[outOffset]=(byte)(Si[(a0) & 0xFF] ^ (t1));}  }
class C{  protected List<RamlDocumentationItem> generateDocuments(Set<ApiDocumentMetadata> documents){  List<RamlDocumentationItem> documentInfos=new ArrayList<>();  for (  ApiDocumentMetadata documentInfo : documents) {    logger.info("Adding document: " + documentInfo.getDocumentTitle());    RamlDocumentationItem documentItem=RamlModelFactoryOfFactories.createRamlModelFactory().createRamlDocumentationItem();    documentItem.setContent("!include " + documentInfo.getDocumentPath());    documentItem.setTitle(documentInfo.getDocumentTitle());    documentInfos.add(documentItem);  }  return documentInfos;}  }
class C{  @HLELogging(level="info") @HLEFunction(nid=0x36FD8AA9,version=150) public int sceAudioRoutingSetMode(int mode){  int previousMode=audioRoutingMode;  audioRoutingMode=mode;  return previousMode;}  }
class C{  private void onInitTypeface(Context context,AttributeSet attrs,int defStyle){  if (isInEditMode()) {    return;  }  int typefaceValue=0;  if (attrs != null) {    TypedArray values=context.obtainStyledAttributes(attrs,R.styleable.RobotoTextView,defStyle,0);    typefaceValue=values.getInt(R.styleable.RobotoTextView_typeface,0);    values.recycle();  }  Typeface robotoTypeface=RobotoTypefaceManager.obtaintTypeface(context,typefaceValue);  setTypeface(robotoTypeface);}  }
class C{  public String minNumObjTipText(){  return "The minimum number of instances per leaf.";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Set<NamedRelatedResourceRep> convertITLListToRelatedResourceRestReps(List<ITLRestRep> exports){  Set<NamedRelatedResourceRep> relatedRestReps=Sets.newHashSet();  for (  ITLRestRep export : exports) {    relatedRestReps.add(export.getExport());  }  return relatedRestReps;}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress("KernelDensityLOF",3) : null;  final int dim=RelationUtil.dimensionality(relation);  DBIDs ids=relation.getDBIDs();  LOG.beginStep(stepprog,1,"Materializing neighborhoods w.r.t. distance function.");  KNNQuery<O> knnq=DatabaseUtil.precomputedKNNQuery(database,relation,getDistanceFunction(),k);  LOG.beginStep(stepprog,2,"Computing densities.");  WritableDoubleDataStore dens=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  FiniteProgress densProgress=LOG.isVerbose() ? new FiniteProgress("Densities",ids.size(),LOG) : null;  for (DBIDIter it=ids.iter(); it.valid(); it.advance()) {    final KNNList neighbors=knnq.getKNNForDBID(it,k);    int count=0;    double sum=0.0;    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {      if (DBIDUtil.equal(neighbor,it)) {        continue;      }      double max=knnq.getKNNForDBID(neighbor,k).getKNNDistance();      if (max == 0) {        sum=Double.POSITIVE_INFINITY;        break;      }      final double v=neighbor.doubleValue() / max;      sum+=kernel.density(v) / MathUtil.powi(max,dim);      count++;    }    final double density=sum / count;    dens.putDouble(it,density);    LOG.incrementProcessed(densProgress);  }  LOG.ensureCompleted(densProgress);  LOG.beginStep(stepprog,3,"Computing KLOFs.");  WritableDoubleDataStore lofs=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_STATIC);  DoubleMinMax lofminmax=new DoubleMinMax();  FiniteProgress progressLOFs=LOG.isVerbose() ? new FiniteProgress("KLOF_SCORE for objects",ids.size(),LOG) : null;  for (DBIDIter it=ids.iter(); it.valid(); it.advance()) {    final double lrdp=dens.doubleValue(it);    final double lof;    if (lrdp > 0) {      final KNNList neighbors=knnq.getKNNForDBID(it,k);      double sum=0.0;      int count=0;      for (DBIDIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {        if (DBIDUtil.equal(neighbor,it)) {          continue;        }        sum+=dens.doubleValue(neighbor);        count++;      }      lof=(lrdp == Double.POSITIVE_INFINITY) ? (sum == Double.POSITIVE_INFINITY ? 1 : 0.) : sum / (count * lrdp);    } else {      lof=1.0;    }    lofs.putDouble(it,lof);    lofminmax.put(lof);    LOG.incrementProcessed(progressLOFs);  }  LOG.ensureCompleted(progressLOFs);  LOG.setCompleted(stepprog);  DoubleRelation scoreResult=new MaterializedDoubleRelation("Kernel Density Local Outlier Factor","kernel-density-slof-outlier",lofs,ids);  OutlierScoreMeta scoreMeta=new QuotientOutlierScoreMeta(lofminmax.getMin(),lofminmax.getMax(),0.0,Double.POSITIVE_INFINITY,1.0);  OutlierResult result=new OutlierResult(scoreMeta,scoreResult);  return result;}  }
class C{  public static void evolve(RealVariable v1,RealVariable v2,double distributionIndex){  double x0=v1.getValue();  double x1=v2.getValue();  double dx=Math.abs(x1 - x0);  if (dx > Settings.EPS) {    double lb=v1.getLowerBound();    double ub=v1.getUpperBound();    double bl;    double bu;    if (x0 < x1) {      bl=1 + 2 * (x0 - lb) / dx;      bu=1 + 2 * (ub - x1) / dx;    } else {      bl=1 + 2 * (x1 - lb) / dx;      bu=1 + 2 * (ub - x0) / dx;    }    if (bl < bu) {      bu=bl;    } else {      bl=bu;    }    double p_bl=1 - 1 / (2 * Math.pow(bl,distributionIndex + 1));    double p_bu=1 - 1 / (2 * Math.pow(bu,distributionIndex + 1));    double u=PRNG.nextDouble();    if (u == 1.0) {      u=Math.nextAfter(u,-1.0);    }    double u0=u * p_bl;    double u1=u * p_bu;    double b0;    double b1;    if (u0 <= 0.5) {      b0=Math.pow(2 * u0,1 / (distributionIndex + 1));    } else {      b0=Math.pow(0.5 / (1 - u0),1 / (distributionIndex + 1));    }    if (u1 <= 0.5) {      b1=Math.pow(2 * u1,1 / (distributionIndex + 1));    } else {      b1=Math.pow(0.5 / (1 - u1),1 / (distributionIndex + 1));    }    if (x0 < x1) {      v1.setValue(0.5 * (x0 + x1 + b0 * (x0 - x1)));      v2.setValue(0.5 * (x0 + x1 + b1 * (x1 - x0)));    } else {      v1.setValue(0.5 * (x0 + x1 + b1 * (x0 - x1)));      v2.setValue(0.5 * (x0 + x1 + b0 * (x1 - x0)));    }    if (PRNG.nextBoolean()) {      double temp=v1.getValue();      v1.setValue(v2.getValue());      v2.setValue(temp);    }    if (v1.getValue() < lb) {      v1.setValue(lb);    } else     if (v1.getValue() > ub) {      v1.setValue(ub);    }    if (v2.getValue() < lb) {      v2.setValue(lb);    } else     if (v2.getValue() > ub) {      v2.setValue(ub);    }  }}  }
class C{  private void ctrlSelect(D nodeData){  int insertionIndex=getInsertionIndex(nodeData);  insertAndSelectNode(nodeData,insertionIndex,!nodeData.equals(selectedNodes.get(insertionIndex)));}  }
class C{  public static Instances toInstances(JSONNode json){  return toInstances(json,false);}  }
class C{  public static boolean isBridge(int flags){  return (flags & AccBridge) != 0;}  }
class C{  public void sendTelegram(char[] buffer){  sendTelegram(buffer,0,null);}  }
class C{  public void close(){  dispose(false);}  }
class C{  public void registerExtendedHelp(){  final Flag f=registerOptional(EXTENDED_HELP_FLAG,"print help on extended command-line flag usage");  if (mHelpCategory != null) {    f.setCategory(mHelpCategory);  }}  }
class C{  public void update(T o){  int cur=object_indices.get(o).intValue();  int new_idx=percolateUp(cur,o);  percolateDown(new_idx);}  }
class C{  public static JCodeModel buildBodyJCodeModel(String basePackage,String schemaLocation,String name,String schema,GenerationConfig config,Annotator annotator){  JCodeModel codeModel=new JCodeModel();  SchemaStore schemaStore=new SchemaStore();  if (config == null) {    config=getDefaultGenerationConfig();  }  if (annotator == null) {    annotator=new Jackson2Annotator();  }  RuleFactory ruleFactory=new RuleFactory(config,annotator,schemaStore);  SchemaMapper mapper=new SchemaMapper(ruleFactory,new SchemaGenerator());  boolean useParent=StringUtils.hasText(schemaLocation);  try {    if (useParent) {      mapper.generate(codeModel,name,basePackage,schema,new URI(schemaLocation));    } else {      mapper.generate(codeModel,name,basePackage,schema);    }  } catch (  Exception e) {    if (useParent && e.getMessage().contains("classpath")) {      logger.debug("Referenced Schema contains self $refs or not found in classpath. Regenerating model withouth classpath: for " + name);      codeModel=new JCodeModel();      try {        mapper.generate(codeModel,name,basePackage,schema);        return codeModel;      } catch (      IOException e1) {      }    }    logger.error("Error generating pojo from schema" + name,e);    return null;  }  return codeModel;}  }
class C{  public synchronized PersistedJobInfo create(ReplicationOperation operation,ReplicationStatus status,Optional<Path> srcPath,String srcClusterName,HiveObjectSpec srcTableSpec,List<String> srcPartitionNames,Optional<String> srcTldt,Optional<HiveObjectSpec> renameToObject,Optional<Path> renameToPath,Map<String,String> extras) throws IOException, SQLException {  long currentTime=System.currentTimeMillis() / 1000 * 1000;  String query="INSERT INTO " + dbTableName + " SET "+ "create_time = ?, "+ "operation = ?, "+ "status = ?, "+ "src_path = ?, "+ "src_cluster = ?, "+ "src_db = ?, "+ "src_table = ?, "+ "src_partitions = ?, "+ "src_tldt = ?, "+ "rename_to_db = ?, "+ "rename_to_table = ?, "+ "rename_to_partition = ?, "+ "rename_to_path = ?, "+ "extras = ? ";  Connection connection=dbConnectionFactory.getConnection();  PreparedStatement ps=connection.prepareStatement(query,Statement.RETURN_GENERATED_KEYS);  try {    int queryParamIndex=1;    ps.setTimestamp(queryParamIndex++,new Timestamp(currentTime));    ps.setString(queryParamIndex++,operation.toString());    ps.setString(queryParamIndex++,status.toString());    ps.setString(queryParamIndex++,srcPath.map(null).orElse(null));    ps.setString(queryParamIndex++,srcClusterName);    ps.setString(queryParamIndex++,srcTableSpec.getDbName());    ps.setString(queryParamIndex++,srcTableSpec.getTableName());    ps.setString(queryParamIndex++,ReplicationUtils.convertToJson(srcPartitionNames));    ps.setString(queryParamIndex++,srcTldt.orElse(null));    if (!renameToObject.isPresent()) {      ps.setString(queryParamIndex++,null);      ps.setString(queryParamIndex++,null);      ps.setString(queryParamIndex++,null);      ps.setString(queryParamIndex++,null);    } else {      ps.setString(queryParamIndex++,renameToObject.map(null).orElse(null));      ps.setString(queryParamIndex++,renameToObject.map(null).orElse(null));      ps.setString(queryParamIndex++,renameToObject.map(null).orElse(null));      ps.setString(queryParamIndex++,renameToPath.map(null).orElse(null));    }    ps.setString(queryParamIndex++,ReplicationUtils.convertToJson(extras));    ps.execute();    ResultSet rs=ps.getGeneratedKeys();    boolean ret=rs.next();    if (!ret) {      throw new RuntimeException("Unexpected behavior!");    }    long id=rs.getLong(1);    return new PersistedJobInfo(id,currentTime,operation,status,srcPath,srcClusterName,srcTableSpec.getDbName(),srcTableSpec.getTableName(),srcPartitionNames,srcTldt,renameToObject.map(null),renameToObject.map(null),renameToObject.map(null),renameToPath,extras);  }  finally {    ps.close();    ps=null;  }}  }
class C{  public static void f(String msg,Throwable throwable){  if (!allowWtf)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  @Override protected void extendSignatureTag() throws DSSException {  super.extendSignatureTag();  final SignatureLevel signatureLevel=params.getSignatureLevel();  if (!xadesSignature.hasCProfile() || SignatureLevel.XAdES_C.equals(signatureLevel) || SignatureLevel.XAdES_XL.equals(signatureLevel)) {    final ValidationContext validationContext=xadesSignature.getSignatureValidationContext(certificateVerifier);    Element toRemove=xadesSignature.getCompleteCertificateRefs();    if (toRemove != null) {      unsignedSignaturePropertiesDom.removeChild(toRemove);    }    final Element completeCertificateRefsDom=DSSXMLUtils.addElement(documentDom,unsignedSignaturePropertiesDom,XAdESNamespaces.XAdES,"xades:CompleteCertificateRefs");    final Element certRefsDom=DSSXMLUtils.addElement(documentDom,completeCertificateRefsDom,XAdESNamespaces.XAdES,"xades:CertRefs");    final CertificateToken certificateToken=xadesSignature.getSigningCertificateToken();    final Set<CertificateToken> processedCertificateTokens=validationContext.getProcessedCertificates();    final Set<CertificateToken> processedCertificateTokenList=new HashSet<CertificateToken>();    processedCertificateTokenList.addAll(processedCertificateTokens);    processedCertificateTokenList.remove(certificateToken);    final Set<CertificateToken> x509CertificateProcessedList=processedCertificateTokenList;    incorporateCertificateRef(certRefsDom,x509CertificateProcessedList);    toRemove=xadesSignature.getCompleteRevocationRefs();    if (toRemove != null) {      unsignedSignaturePropertiesDom.removeChild(toRemove);    }    final Element completeRevocationRefsDom=DSSXMLUtils.addElement(documentDom,unsignedSignaturePropertiesDom,XAdESNamespaces.XAdES,"xades:CompleteRevocationRefs");    incorporateCRLRefs(completeRevocationRefsDom,validationContext.getProcessedRevocations());    incorporateOCSPRefs(completeRevocationRefsDom,validationContext.getProcessedRevocations());  }}  }
class C{  public SimpleIoProcessorPool(Class<? extends IoProcessor<S>> processorType){  this(processorType,null,DEFAULT_SIZE,null);}  }
class C{  public void testNominal(){  Instances icopy;  Instances result;  ((RemoveFrequentValues)m_Filter).setAttributeIndex(Integer.toString(indexNominal));  icopy=new Instances(m_Instances);  m_Filter=getFilter();  try {    m_Filter.setInputFormat(icopy);    result=useFilter();    assertEquals("Doesn't modify the header, i.e. removing labels",m_Instances.attribute(indexNominal).numValues(),result.attribute(indexNominal).numValues());  } catch (  Exception ex) {  }  icopy=new Instances(m_Instances);  m_Filter=getFilter();  try {    ((RemoveFrequentValues)m_Filter).setModifyHeader(true);    m_Filter.setInputFormat(icopy);    result=useFilter();    assertEquals("Returns " + ((RemoveFrequentValues)m_Filter).getNumValues() + " out of the "+ m_Instances.attribute(indexNominal).numValues()+ " labels",((RemoveFrequentValues)m_Filter).getNumValues(),result.attribute(indexNominal).numValues());  } catch (  Exception ex) {  }  icopy=new Instances(m_Instances);  m_Filter=getFilter();  try {    ((RemoveFrequentValues)m_Filter).setModifyHeader(true);    ((RemoveFrequentValues)m_Filter).setUseLeastValues(true);    m_Filter.setInputFormat(icopy);    result=useFilter();    assertEquals("Returns " + ((RemoveFrequentValues)m_Filter).getNumValues() + " out of the "+ m_Instances.attribute(indexNominal).numValues()+ " labels",((RemoveFrequentValues)m_Filter).getNumValues(),result.attribute(indexNominal).numValues());  } catch (  Exception ex) {  }  icopy=new Instances(m_Instances);  m_Filter=getFilter();  try {    ((RemoveFrequentValues)m_Filter).setModifyHeader(true);    ((RemoveFrequentValues)m_Filter).setUseLeastValues(true);    ((RemoveFrequentValues)m_Filter).setInvertSelection(true);    ((RemoveFrequentValues)m_Filter).setNumValues(4);    m_Filter.setInputFormat(icopy);    result=useFilter();    assertEquals("Returns 1 out of the " + m_Instances.attribute(indexNominal).numValues() + " labels, even though we try to remove "+ ((RemoveFrequentValues)m_Filter).getNumValues()+ " labels, since it always returns at least 1 label",1,result.attribute(indexNominal).numValues());  } catch (  Exception ex) {  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x78A0D3EC,version=150) public int sceHttpEnableKeepAlive(int templateId){  return 0;}  }
class C{  public Boolean shouldAllowNavigation(String url){  return null;}  }
class C{  public static OptionScanNode buildContextMenuTree(List<? extends OptionScanActionNode> actions){  ContextMenuItem tree=new ClearFocusNode();  if (actions != null) {    for (int i=actions.size() - 1; i >= 0; --i) {      tree=new ContextMenuNode(actions.get(i),tree);    }  }  return tree;}  }
class C{  public boolean detectTestKeys(){  String buildTags=android.os.Build.TAGS;  if (buildTags != null && buildTags.contains("test-keys")) {    return true;  }  return false;}  }
class C{  @Override protected void initializeLatticeCells(){  for (  DF_LatticeCell c : cells.values()) {    if (c instanceof ObjectCell) {      ObjectCell c1=(ObjectCell)c;      HeapVariable<?> key=c1.getKey();      if (key.isExposedOnEntry()) {        c1.setBOTTOM();      }    } else {      ArrayCell c1=(ArrayCell)c;      HeapVariable<?> key=c1.getKey();      if (key.isExposedOnEntry()) {        c1.setBOTTOM();      }    }  }}  }
class C{  public static ITypeBinding findTypeInHierarchy(ITypeBinding hierarchyType,String fullyQualifiedTypeName){  if (hierarchyType.isArray() || hierarchyType.isPrimitive()) {    return null;  }  if (fullyQualifiedTypeName.equals(hierarchyType.getTypeDeclaration().getQualifiedName())) {    return hierarchyType;  }  ITypeBinding superClass=hierarchyType.getSuperclass();  if (superClass != null) {    ITypeBinding res=findTypeInHierarchy(superClass,fullyQualifiedTypeName);    if (res != null) {      return res;    }  }  ITypeBinding[] superInterfaces=hierarchyType.getInterfaces();  for (int i=0; i < superInterfaces.length; i++) {    ITypeBinding res=findTypeInHierarchy(superInterfaces[i],fullyQualifiedTypeName);    if (res != null) {      return res;    }  }  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override protected void processProperties() throws AdeException {  setSeverity(Severity.UNKNOWN,m_weight_UNKNOWN);  setSeverity(Severity.INFO,m_weight_INFO);  setSeverity(Severity.WARNING,m_weight_WARNING);  setSeverity(Severity.ERROR,m_weight_ERROR);  setSeverity(Severity.FATAL,m_weight_FATAL);}  }
class C{  public void clear(){  iFormatter=null;  iElementPairs.clear();}  }
class C{  protected void fireFigureAdded(){  if (listenerList.getListenerCount() > 0) {    FigureEvent event=null;    Object[] listeners=listenerList.getListenerList();    for (int i=listeners.length - 2; i >= 0; i-=2) {      if (listeners[i] == FigureListener.class) {        if (event == null) {          event=new FigureEvent(this,getBounds());        }        ((FigureListener)listeners[i + 1]).figureAdded(event);      }    }  }}  }
class C{  public Bitmap toBitmap(){  setDrawingCacheEnabled(false);  if (!isDrawingCacheEnabled()) {    setDrawingCacheEnabled(true);  }  if (mRenderer.isApplyBackgroundColor()) {    setDrawingCacheBackgroundColor(mRenderer.getBackgroundColor());  }  setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);  return getDrawingCache(true);}  }
class C{  public void addMemoryPressureListener(MemoryPressureListener listener){  mListeners.add(listener);}  }
class C{  public static String hexToStringNoException(final String data){  try {    return ConversionUtils.arrayToString(Hex.decodeHex(data.toCharArray()));  } catch (  DecoderException e) {    return "[invalid hex]";  }}  }
class C{  public CHaltAction(final JFrame parent,final IFrontEndDebuggerProvider debugger){  m_parent=Preconditions.checkNotNull(parent,"IE00296: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01534: Debugger argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Halt");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] menuNames=getStringList(stack);  UIManager uiMgr=stack.getUIMgrSafe();  if (uiMgr != null) {    Widget nextUI=uiMgr.getMenuTransitionSource();    PseudoMenu currUI=uiMgr.getCurrUI();    if (nextUI == null || currUI == null || currUI.getUI() == null)     return Boolean.FALSE;    if (menuNames == null || menuNames.length == 0)     return Boolean.FALSE;    for (int i=0; i < menuNames.length; i++)     if (menuNames[i] != null && nextUI.getName().equalsIgnoreCase(menuNames[i]))     return Boolean.TRUE;  }  return Boolean.FALSE;}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateCrtKeyParameters key){  super(key);  this.publicExponent=key.getPublicExponent();  this.primeP=key.getP();  this.primeQ=key.getQ();  this.primeExponentP=key.getDP();  this.primeExponentQ=key.getDQ();  this.crtCoefficient=key.getQInv();}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public INode copy(){  return new JumpingSolitaireState(filled);}  }
class C{  public boolean isAllowedToTransferFileToGroupChat(String chatId) throws RemoteException {  if (TextUtils.isEmpty(chatId)) {    throw new ServerApiIllegalArgumentException("chatId must not be null or empty!");  }  try {    if (!mRcsSettings.isGroupChatActivated()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot transfer file to group chat with group chat Id '" + chatId + "' as group chat feature is not supported.");      }      return false;    }    if (!mRcsSettings.getMyCapabilities().isFileTransferHttpSupported()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot transfer file to group chat with group chat Id '" + chatId + "' as FT over HTTP capabilities are not supported for self.");      }      return false;    }    if (mChatService.isGroupChatAbandoned(chatId)) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot transfer file to group chat with group chat Id '" + chatId + "' as the group chat is abandoned and can no more be used to send or receive messages.");      }      return false;    }    GroupChatSession session=mImService.getGroupChatSession(chatId);    if (session == null) {      GroupChatInfo groupChat=mMessagingLog.getGroupChatInfo(chatId);      if (groupChat == null) {        if (sLogger.isActivated()) {          sLogger.debug("Cannot transfer file to group chat with group chat Id '" + chatId + "' as the group chat does not exist in DB.");        }        return false;      }      if (groupChat.getRejoinId() == null) {        if (sLogger.isActivated()) {          sLogger.debug("Cannot transfer file to group chat with group chat Id '" + chatId + "' as there is no ongoing session with corresponding chatId and there exists no rejoinId to rejoin the group chat.");        }        return false;      }    }    return true;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private void addOrigins(Set<String> origins){  for (  String origin : origins) {    GeolocationPermissions.getInstance().allow(origin);  }}  }
class C{  @Override public boolean onTouchEvent(MotionEvent ev){  ZogUtils.printLog(getClass(),"onTouchEvent");  float lastX=ev.getX();  float lastY=ev.getY();switch (ev.getAction()) {case MotionEvent.ACTION_DOWN:    break;case MotionEvent.ACTION_MOVE:  float dx=lastX - mFirstX;float dy=lastY - mFirstY;if (mIsHorizontal == null) {if (!judgeScrollDirection(dx,dy)) {  break;}}if (mIsHorizontal) {if (mIsShown && mPreItemView != mCurrentItemView) {hiddenRight(mPreItemView);}if (mIsShown && mPreItemView == mCurrentItemView) {dx=dx - mRightViewWidth;}if (dx < 0 && dx > -mRightViewWidth) {mCurrentItemView.scrollTo((int)(-dx),0);}return true;} else {if (mIsShown) {hiddenRight(mPreItemView);}}break;case MotionEvent.ACTION_UP:case MotionEvent.ACTION_CANCEL:clearPressedState();if (mIsShown) {hiddenRight(mPreItemView);}if (mIsHorizontal != null && mIsHorizontal) {if (mFirstX - lastX > mRightViewWidth / 2) {showRight(mCurrentItemView);} else {hiddenRight(mCurrentItemView);}return true;}break;}return super.onTouchEvent(ev);}  }
class C{  private void calculateMaxMin(Object[] max,Object[] min,int[] decimal,int[] msrIndex,Object[] row){  for (int i=0; i < msrIndex.length; i++) {    int count=msrIndex[i];    if (row[count] != null) {      if (type[count] == CarbonCommonConstants.SUM_COUNT_VALUE_MEASURE) {        double value=(double)row[count];        double maxVal=(double)max[count];        double minVal=(double)min[count];        max[count]=(maxVal > value ? max[count] : value);        min[count]=(minVal < value ? min[count] : value);        int num=(value % 1 == 0) ? 0 : CarbonCommonConstants.CARBON_DECIMAL_POINTERS_DEFAULT;        decimal[count]=(decimal[count] > num ? decimal[count] : num);      } else       if (type[count] == CarbonCommonConstants.BIG_INT_MEASURE) {        long value=(long)row[count];        long maxVal=(long)max[count];        long minVal=(long)min[count];        max[count]=(maxVal > value ? max[count] : value);        min[count]=(minVal < value ? min[count] : value);        int num=(value % 1 == 0) ? 0 : CarbonCommonConstants.CARBON_DECIMAL_POINTERS_DEFAULT;        decimal[count]=(decimal[count] > num ? decimal[count] : num);      } else       if (type[count] == CarbonCommonConstants.BIG_DECIMAL_MEASURE) {        byte[] buff=null;        if (this.compactionFlow) {          BigDecimal bigDecimal=((Decimal)row[count]).toJavaBigDecimal();          buff=DataTypeUtil.bigDecimalToByte(bigDecimal);        } else {          buff=(byte[])row[count];        }        BigDecimal value=DataTypeUtil.byteToBigDecimal(buff);        BigDecimal minVal=(BigDecimal)min[count];        min[count]=minVal.min(value);      }    }  }}  }
class C{  protected WeakReference<V> removeMapEntry(final K k){  return map.remove(k);}  }
class C{  public void testDoubleValueNegRounded2(){  byte[] a={-128,1,2,3,4,5,36,23,1,-3,-5};  int aSign=-1;  double result=-1.547472643879479E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  protected void indent(int depth) throws IOException {  if (m_startNewLine)   outputLineSep();  if (m_indentAmount > 0)   printSpace(depth * m_indentAmount);}  }
class C{  public static boolean isThinPoolLessSubscribed(StoragePool pool,long requestedCapacityInKB,CoordinatorClient coordinator){  return getThinPoolSubscribedCapacityPercentage(pool,requestedCapacityInKB) <= getMaxPoolSubscriptionPercentage(pool,coordinator);}  }
class C{  @Override public void startExecuting(){  this.entity.getNavigator().tryMoveToXYZ(this.xPosition,this.yPosition,this.zPosition,this.speed);}  }
class C{  public synchronized Object put(Object key,Object value){  if (value == null) {    throw new NullPointerException();  }  Entry[] tab=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      Object old=e.value;      e.value=value;      return old;    }  }  modCount++;  if (count >= threshold) {    rehash();    tab=table;    index=(hash & 0x7FFFFFFF) % tab.length;  }  Entry e=new Entry(hash,key,value,tab[index]);  tab[index]=e;  count++;  return null;}  }
class C{  public static boolean isServiceRunning(Context context,String className){  boolean isRunning=false;  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningServiceInfo> servicesList=activityManager.getRunningServices(Integer.MAX_VALUE);  for (  RunningServiceInfo si : servicesList) {    if (className.equals(si.service.getClassName())) {      isRunning=true;    }  }  return isRunning;}  }
class C{  public Builder withMargins(int left,int top,int right,int bottom){  params.setMargins(convertToPixels(left,scale),convertToPixels(top,scale),convertToPixels(right,scale),convertToPixels(bottom,scale));  return this;}  }
class C{  public Checkpoint(String partitionId){  this.partitionId=partitionId;}  }
class C{  public void clear(int offset,int length){  memset(offset,(byte)0,length);}  }
class C{  public static float calculateRight(float left,float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float right=(targetAspectRatio * height) + left;  return right;}  }
class C{  protected void subscribeClose(String nameValue) throws Throwable {  URI observerUri=URI.create(observerServiceUriForClose);  waitForSubscriptionToAppear(observerUri,EXAMPLES_SUBSCRIPTIONS);  verifyNotification(nameValue,observerUri);  ((JsWebSocket)JsExecutor.executeSynchronously(null)).close();  waitForSubscriptionToDisappear(observerUri,EXAMPLES_SUBSCRIPTIONS);}  }
class C{  public static void errms(StreamTokenizer tokenizer,String theMsg) throws IOException {  throw new IOException(theMsg + ", read " + tokenizer.toString());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CONSTRAINT_BODY___CONSTRAINT_EXPR_1:    getConstraintExpr_1().clear();  return;case UmplePackage.CONSTRAINT_BODY___ANONYMOUS_CONSTRAINT_BODY_11:getAnonymous_constraintBody_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  public ScriptExecutorService(String threadPrefix,List<ScriptExecutor> scriptExecutors,int maxRequests){  this.threadPrefix=threadPrefix;  this.scriptExecutors=scriptExecutors;  this.maxRequests=maxRequests;  this.requests=new ArrayBlockingQueue<ScriptMethodRequest>(maxRequests);  this.responses=new ArrayBlockingQueue<ScriptMethodResponse>(maxRequests);  this.taskStatusList=new ArrayList<ScriptExecutorTaskStatus>();}  }
class C{  public void delete(){  if (this.getSelectedRow() > -1) {    ((TableModel)this.getModel()).deleteRow(this.convertRowIndexToModel((this.getSelectedRow())));  }}  }
class C{  @Override public void stateChanged(ChangeEvent evt){  if (!OperatingSystem.isMacOs()) {    if (jmi.isArmed()) {      statusBar.setStatusBarText(helpText);    } else {      statusBar.setDefaultStatusBarText();    }  }}  }
class C{  public Metadata extract(Metadata metadata){  _metadata=metadata;  if (_data == null)   return _metadata;  ExifDirectory directory=getExifDirectory();  if (_data.length <= 14) {    directory.addError("Exif data segment must contain at least 14 bytes");    return _metadata;  }  if (!isExifSegment(_data)) {    directory.addError("Exif data segment doesn't begin with 'Exif'");    return _metadata;  }  return extractIFD(_metadata,TIFF_HEADER_START_OFFSET);}  }
class C{  public static JavaType unknownType(){  return defaultInstance()._unknownType();}  }
class C{  public void worked(int work){}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.282 -0500",hash_original_method="37CBB7B1E5121DA5847923CB75DB4FD7",hash_generated_method="614D95C47B63C83EC304F76F5EA63F78") public final void writeInt(int val) throws IOException {  Memory.pokeInt(scratch,0,val,ByteOrder.BIG_ENDIAN);  write(scratch,0,SizeOf.INT);}  }
class C{  @SuppressWarnings("UnusedParameters") protected int reducerNodeWeight(ClusterNode node,int splitCnt){  return splitCnt;}  }
class C{  public void testBadValues() throws Exception {  try {    new Interval("100f").longValue();    throw new Exception("Accepted bad unit");  } catch (  NumberFormatException e) {  }  try {    new Interval("-100").longValue();    throw new Exception("Accepted bad prefix");  } catch (  NumberFormatException e) {  }  try {    new Interval("").longValue();    throw new Exception("Accepted empty string");  } catch (  NumberFormatException e) {  }  try {    new Interval("d").longValue();    throw new Exception("Accepted unit only");  } catch (  NumberFormatException e) {  }}  }
class C{  public int nextSetBit(int fromIndex){  if (fromIndex < 0)   throw new IndexOutOfBoundsException("fromIndex < 0: " + fromIndex);  int u=unitIndex(fromIndex);  if (u >= unitsInUse)   return -1;  int testIndex=(fromIndex & BIT_INDEX_MASK);  long unit=bits[u] >> testIndex;  if (unit == 0) {    testIndex=0;  }  while ((unit == 0) && (u < unitsInUse - 1))   unit=bits[++u];  if (unit == 0) {    return -1;  }  testIndex+=trailingZeroCnt(unit);  return ((u * BITS_PER_UNIT) + testIndex);}  }
class C{  public Stream(String name){  this.name=name;  parsedColor=DEFAULT_COLOR;  inHomeView=true;  inviteOnly=false;}  }
class C{  public SwingTerminalFrame(String title,TerminalSize terminalSize,TerminalEmulatorDeviceConfiguration deviceConfiguration,SwingTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration,TerminalEmulatorAutoCloseTrigger... autoCloseTriggers){  this(title,new SwingTerminal(terminalSize,deviceConfiguration,fontConfiguration,colorConfiguration),autoCloseTriggers);}  }
class C{  private static <T>void findUniqueGoals(Map<TestCase,Set<T>> testToGoals){  Map<TestCase,Set<T>> goalMapCopy=new LinkedHashMap<>();  for (  Map.Entry<TestCase,Set<T>> entry : testToGoals.entrySet()) {    Set<T> goalSet=new LinkedHashSet<T>(entry.getValue());    for (    Map.Entry<TestCase,Set<T>> otherEntry : testToGoals.entrySet()) {      if (entry == otherEntry)       continue;      goalSet.removeAll(otherEntry.getValue());    }    goalMapCopy.put(entry.getKey(),goalSet);  }  testToGoals.clear();  testToGoals.putAll(goalMapCopy);}  }
class C{  public MissingQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  @Override public void putAll(Map<? extends Double,? extends Integer> map){  Iterator<? extends Entry<? extends Double,? extends Integer>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Double,? extends Integer> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  @Override public void onDestroy(){  Log_OC.v(TAG,"Destroying service");  mBinder=null;  mServiceHandler=null;  mServiceLooper.quit();  mServiceLooper=null;  mNotificationManager=null;  AccountManager am=AccountManager.get(getApplicationContext());  am.removeOnAccountsUpdatedListener(this);  super.onDestroy();}  }
class C{  @SuppressWarnings("unchecked") public TreeNode<T> findByPath(T... path){  return findByPath(Arrays.asList(path));}  }
class C{  @Override public Row[] runScriptReturnResults(HiveContext hqlContext){  String[] expressions=ScriptSplitter.splitScriptIntoExpressions(script);  for (int i=0; i < expressions.length - 1; i++) {    String expression=expressions[i];    hqlContext.sql(expression);  }  return hqlContext.sql(expressions[expressions.length - 1]).collect();}  }
class C{  protected boolean vapidEnabled(){  return publicKey != null && privateKey != null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.736 -0500",hash_original_method="4FA40F4F8EA124691CF5F7EB5079802B",hash_generated_method="85A33A80C3DB89D134F237C5E9C16940") public Object clone(){  SipUri retval=(SipUri)super.clone();  if (this.authority != null)   retval.authority=(Authority)this.authority.clone();  if (this.uriParms != null)   retval.uriParms=(NameValueList)this.uriParms.clone();  if (this.qheaders != null)   retval.qheaders=(NameValueList)this.qheaders.clone();  if (this.telephoneSubscriber != null)   retval.telephoneSubscriber=(TelephoneNumber)this.telephoneSubscriber.clone();  return retval;}  }
class C{  public void send(Object message,ActorRef sender){  endpoint.getMailbox().schedule(new Envelope(message,endpoint.getScope(),endpoint.getMailbox(),sender));}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  protected GraphicUpdate readGraphic(int graphicAction,LinkProperties graphicProperties,Projection proj,OMGridGenerator generator) throws IOException {  OMGraphic graphic=null;  String header=link.readDelimiter(false);  if (header == Link.END_TOTAL || header == Link.END_SECTION) {    return null;  }  int graphicType=link.dis.readByte();switch (graphicType) {case LinkGraphicList.GRAPHICTYPE_LINE:    graphic=LinkLine.read(link.dis,graphicProperties);  break;case LinkGraphicList.GRAPHICTYPE_POLY:graphic=LinkPoly.read(link.dis,graphicProperties);break;case LinkGraphicList.GRAPHICTYPE_RECTANGLE:graphic=LinkRectangle.read(link.dis,graphicProperties);break;case LinkGraphicList.GRAPHICTYPE_POINT:graphic=LinkPoint.read(link.dis,graphicProperties);break;case LinkGraphicList.GRAPHICTYPE_CIRCLE:graphic=LinkCircle.read(link.dis,graphicProperties);break;case LinkGraphicList.GRAPHICTYPE_ELLIPSE:graphic=LinkEllipse.read(link.dis,graphicProperties);break;case LinkGraphicList.GRAPHICTYPE_RASTER:graphic=LinkRaster.read(link.dis,graphicProperties);break;case LinkGraphicList.GRAPHICTYPE_BITMAP:graphic=LinkBitmap.read(link.dis,graphicProperties);break;case LinkGraphicList.GRAPHICTYPE_TEXT:graphic=LinkText.read(link.dis,graphicProperties);break;case LinkGraphicList.GRAPHICTYPE_GRID:graphic=LinkGrid.read(link.dis,graphicProperties);break;case LinkGraphicList.GRAPHICTYPE_ARC:graphic=LinkArc.read(link.dis,graphicProperties);break;default :System.err.println("LinkActionList: received unknown graphic type.");}if (graphic != null && proj != null) {if (graphic instanceof OMGrid) {((OMGrid)graphic).setGenerator(generator);}graphic.generate(proj);}return (new GraphicUpdate(graphicAction,graphic));}  }
class C{  public KeyboardButton build(){  return new KeyboardButton(text,request_contact,request_location);}  }
class C{  public int hours(){  return this.hours;}  }
class C{  private AnalyticsSelection convertToSelection(AnalyticsQuery query,Space space,FacetSelection actual){  AnalyticsSelection selection=new AnalyticsSelectionImpl();  ReferenceStyle prettyStyle=getReferenceStyle(query.getStyle());  PrettyPrintOptions localOptions=new PrettyPrintOptions(prettyStyle,space.getTop().getImageDomain());  for (  Facet facet : actual.getFacets()) {    if (facet.getSelectedItems() != null && !facet.getSelectedItems().isEmpty()) {      try {        Axis axis=space.getUniverse().axis(facet.getId());        String local=axis.prettyPrint(localOptions);        if (query.getPeriod() != null && query.getPeriod().equals(local)) {          selection.setPeriod(query.getPeriod());          for (          FacetMember member : facet.getSelectedItems()) {            if (member instanceof FacetMemberInterval) {              selection.setTimeframe(extractIntervalRange((FacetMemberInterval)member));            }          }        } else {        }      } catch (      ScopeException e) {        e.printStackTrace();      }    }  }  if (actual.getCompareTo() != null && !actual.getCompareTo().isEmpty()) {    for (    Facet facet : actual.getCompareTo()) {      if (facet.getSelectedItems() != null && !facet.getSelectedItems().isEmpty()) {        try {          Axis axis=space.getUniverse().axis(facet.getId());          String local=axis.prettyPrint(localOptions);          if (query.getPeriod() != null && query.getPeriod().equals(local)) {            for (            FacetMember member : facet.getSelectedItems()) {              if (member instanceof FacetMemberInterval) {                selection.setCompareTo(extractIntervalRange((FacetMemberInterval)member));              }            }          } else {          }        } catch (        ScopeException e) {          e.printStackTrace();        }      }    }  }  return selection;}  }
class C{  public Vector3d mulTranspose(Matrix3fc mat){  return mul(mat,this);}  }
class C{  public EventProcessorHost(final String hostName,final String eventHubPath,final String consumerGroupName,final String eventHubConnectionString,ICheckpointManager checkpointManager,ILeaseManager leaseManager){  this(hostName,eventHubPath,consumerGroupName,eventHubConnectionString,checkpointManager,leaseManager,null);}  }
class C{  public void invokeInterface(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEINTERFACE,owner,method,true);}  }
class C{  private CounterSet(final String name,final CounterSet parent){  super(name,parent);}  }
class C{  public Tuple make(Object[] values){  checkNotNull(values,"value must not be null");  checkArgument(values.length == slots.length,"Expected %s values, but received %s",slots.length,values.length);  if (!typesMatch(values)) {    throw new IllegalArgumentException(describeTypeMismatches(values));  }  return new Tuple(this,values);}  }
class C{  public DTMDefaultBaseIterators(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing);}  }
class C{  public void approveSelection(){  returnValue=APPROVE_OPTION;  if (dialog != null) {    dialog.setVisible(false);  }  fireActionPerformed(APPROVE_SELECTION);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.792 -0500",hash_original_method="A0EFCC43C4A80383B3AEC9C232E1412A",hash_generated_method="0C7A3CFF7F0F4ED318D18A0330551AD4") public boolean selectNewsgroup(String newsgroup) throws IOException {  return selectNewsgroup(newsgroup,null);}  }
class C{  public void dispose(){  evictor.shutdown();  expirationNotifier.shutdown();  entries.clear();}  }
class C{  public DnsDiscovery(NetworkParameters netParams){  this(netParams.getDnsSeeds(),netParams);}  }
class C{  public boolean isInterleave(String s1,String s2,String s3){  if (s1 == null || s2 == null || s3 == null) {    return false;  }  int a=s1.length();  int b=s2.length();  if (s3.length() != a + b) {    return false;  }  boolean[][] dp=new boolean[a + 1][b + 1];  for (int i=0; i <= a; i++) {    for (int j=0; j <= b; j++) {      if (i == 0 && j == 0) {        dp[0][0]=true;      } else       if (i == 0) {        dp[0][j]=dp[0][j - 1] && s2.charAt(j - 1) == s3.charAt(j - 1);      } else       if (j == 0) {        dp[i][0]=dp[i - 1][0] && s1.charAt(i - 1) == s3.charAt(i - 1);      } else {        dp[i][j]=(dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));      }    }  }  return dp[a][b];}  }
class C{  public static String int2msg(final int number){  return number + " (0x" + Long.toHexString((long)number & 0xFFFFFFFFL).toUpperCase(Locale.ENGLISH)+ ')';}  }
class C{  public MarkerManager(String prop){  property=prop;}  }
class C{  public PajekNetReader(Supplier<V> vertex_factory,Supplier<E> edge_factory){  this.vertex_factory=vertex_factory;  this.edge_factory=edge_factory;}  }
class C{  public static void main(String[] args){  runClassifier(new M5Rules(),args);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.RELATIONAL_EXPRESSION__LHS:    setLhs((Expression)null);  return;case N4JSPackage.RELATIONAL_EXPRESSION__OP:setOp(OP_EDEFAULT);return;case N4JSPackage.RELATIONAL_EXPRESSION__RHS:setRhs((Expression)null);return;}super.eUnset(featureID);}  }
class C{  private void changePropertyDetail(final Property modProperty,final PropertyDetail propDetail,final Integer numOfFloors){  final PropertyDetail propertyDetail=modProperty.getPropertyDetail();  propDetail.setSitalArea(propertyDetail.getSitalArea());  propDetail.setTotalBuiltupArea(propertyDetail.getTotalBuiltupArea());  propDetail.setCommBuiltUpArea(propertyDetail.getCommBuiltUpArea());  propDetail.setPlinthArea(propertyDetail.getPlinthArea());  propDetail.setCommVacantLand(propertyDetail.getCommVacantLand());  propDetail.setSurveyNumber(propertyDetail.getSurveyNumber());  propDetail.setFieldVerified(propertyDetail.getFieldVerified());  propDetail.setFieldVerificationDate(propertyDetail.getFieldVerificationDate());  propDetail.setFloorDetails(propertyDetail.getFloorDetails());  propDetail.setPropertyDetailsID(propertyDetail.getPropertyDetailsID());  propDetail.setWater_Meter_Num(propertyDetail.getWater_Meter_Num());  propDetail.setElec_Meter_Num(propertyDetail.getElec_Meter_Num());  propDetail.setNoofFloors(numOfFloors);  propDetail.setFieldIrregular(propertyDetail.getFieldIrregular());  propDetail.setDateOfCompletion(propertyDetail.getDateOfCompletion());  propDetail.setProperty(propertyDetail.getProperty());  propDetail.setUpdatedTime(propertyDetail.getUpdatedTime());  propDetail.setPropertyTypeMaster(propertyDetail.getPropertyTypeMaster());  propDetail.setPropertyType(propertyDetail.getPropertyType());  propDetail.setInstallment(propertyDetail.getInstallment());  propDetail.setPropertyOccupation(propertyDetail.getPropertyOccupation());  propDetail.setPropertyMutationMaster(propertyDetail.getPropertyMutationMaster());  propDetail.setComZone(propertyDetail.getComZone());  propDetail.setCornerPlot(propertyDetail.getCornerPlot());  propDetail.setCable(propertyDetail.isCable());  propDetail.setAttachedBathRoom(propertyDetail.isAttachedBathRoom());  propDetail.setElectricity(propertyDetail.isElectricity());  propDetail.setWaterTap(propertyDetail.isWaterTap());  propDetail.setWaterHarvesting(propertyDetail.isWaterHarvesting());  propDetail.setLift(propertyDetail.isLift());  propDetail.setToilets(propertyDetail.isToilets());  propDetail.setFloorType(propertyDetail.getFloorType());  propDetail.setRoofType(propertyDetail.getRoofType());  propDetail.setWallType(propertyDetail.getWallType());  propDetail.setWoodType(propertyDetail.getWoodType());  propDetail.setExtentSite(propertyDetail.getExtentSite());  propDetail.setExtentAppartenauntLand(propertyDetail.getExtentAppartenauntLand());  if (numOfFloors == 0)   propDetail.setPropertyUsage(propertyDetail.getPropertyUsage()); else   propDetail.setPropertyUsage(null);  propDetail.setManualAlv(propertyDetail.getManualAlv());  propDetail.setOccupierName(propertyDetail.getOccupierName());  modProperty.setPropertyDetail(propDetail);}  }
class C{  public static Edge serializableInstance(){  return new Edge(GraphNode.serializableInstance(),GraphNode.serializableInstance(),Endpoint.ARROW,Endpoint.ARROW);}  }
class C{  void freeUnused(int pageId){  if (trace.isDebugEnabled()) {    trace.debug("freeUnused " + pageId);  }  cache.remove(pageId);  freePage(pageId);  freed.set(pageId);}  }
class C{  public void fireNeuronLabelChanged(final Neuron changed){  for (  NeuronListener listener : neuronListeners) {    listener.labelChanged(new NetworkEvent<Neuron>(this,changed));  }}  }
class C{  public UpdatableStacking(UpdateableClassifier aggregatingClassifier,UpdateableClassifier... baseClassifiers){  this(aggregatingClassifier,Arrays.asList(baseClassifiers));}  }
class C{  public void write(ByteAppendable os,char ch) throws IOException {  if (ch < 0x80)   os.write(ch); else {    os.write('\\');    os.write('u');    int b=(ch >> 12) & 0xf;    os.write(b < 10 ? b + '0' : b + 'a' - 10);    b=(ch >> 8) & 0xf;    os.write(b < 10 ? b + '0' : b + 'a' - 10);    b=(ch >> 4) & 0xf;    os.write(b < 10 ? b + '0' : b + 'a' - 10);    b=ch & 0xf;    os.write(b < 10 ? b + '0' : b + 'a' - 10);  }}  }
class C{  private void checkModCount(){  if (modCount != expectedModCount) {    throw new ConcurrentModificationException();  }}  }
class C{  public void testHandledDroppedOffer(){  AtomicInteger calls=new AtomicInteger();  SubmissionPublisher<Integer> p=new SubmissionPublisher<Integer>(basicExecutor,4);  TestSubscriber s1=new TestSubscriber();  s1.request=false;  TestSubscriber s2=new TestSubscriber();  s2.request=false;  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  for (int i=1; i <= 4; ++i)   assertTrue(p.offer(i,null) >= 0);  p.offer(4,null);  assertTrue(p.offer(6,null) < 0);  s1.sn.request(64);  assertTrue(p.offer(7,null) < 0);  s2.sn.request(64);  p.close();  s2.awaitComplete();  s1.awaitComplete();  assertTrue(calls.get() >= 4);}  }
class C{  public void reuse(Tag handler){  PerThreadData ptd=perThread.get();  if (ptd.current < (ptd.handlers.length - 1)) {    ptd.handlers[++ptd.current]=handler;  } else {    handler.release();  }}  }
class C{  public static final String digitsAndPlusOnly(MatcherCompat matcher){  StringBuilder buffer=new StringBuilder();  String matchingRegion=matcher.group();  for (int i=0, size=matchingRegion.length(); i < size; i++) {    char character=matchingRegion.charAt(i);    if (character == '+' || Character.isDigit(character)) {      buffer.append(character);    }  }  return buffer.toString();}  }
class C{  void waitUntilComplete(){synchronized (mClientResource) {    try {      if (HttpLog.LOGV)       HttpLog.v("Request.waitUntilComplete()");      mClientResource.wait();      if (HttpLog.LOGV)       HttpLog.v("Request.waitUntilComplete() done waiting");    } catch (    InterruptedException e) {    }  }}  }
class C{  public static String[] join(String[]... arrays){  if (arrays.length == 0) {    return new String[0];  }  if (arrays.length == 1) {    return arrays[0];  }  int length=0;  for (  String[] array : arrays) {    length+=array.length;  }  String[] result=new String[length];  length=0;  for (  String[] array : arrays) {    System.arraycopy(array,0,result,length,array.length);    length+=array.length;  }  return result;}  }
class C{  public void onFirmwareTestResult(OneSheeldDevice device,boolean isPassed){}  }
class C{  public void testSmallNumbers() throws Exception {  ObjectMapper mapper=new ObjectMapper();  ArrayNode root=mapper.createArrayNode();  for (int i=-20; i <= 20; ++i) {    JsonNode n=root.numberNode(i);    root.add(n);    assertEquals(String.valueOf(i),n.toString());  }  for (int type=0; type < 2; ++type) {    StringWriter sw=new StringWriter();    if (type == 0) {      JsonGenerator gen=new JsonFactory().createJsonGenerator(sw);      root.serialize(gen,null);      gen.close();    } else {      mapper.writeValue(sw,root);    }    String doc=sw.toString();    JsonParser jp=new JsonFactory().createJsonParser(new StringReader(doc));    assertEquals(JsonToken.START_ARRAY,jp.nextToken());    for (int i=-20; i <= 20; ++i) {      assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());      assertEquals(i,jp.getIntValue());      assertEquals("" + i,jp.getText());    }    assertEquals(JsonToken.END_ARRAY,jp.nextToken());    jp.close();  }}  }
class C{  @Override public void declareExtensions(ExtensionProfile extensionProfile){  ExtensionDescription desc=Who.getDefaultDescription();  desc.setRepeatable(false);  desc.setRequired(true);  extensionProfile.declare(EmailListRecipientEntry.class,desc);  extensionProfile.declareAdditionalNamespace(com.google.gdata.data.appsforyourdomain.Namespaces.APPS_NAMESPACE);}  }
class C{  public static boolean screenshotTest(String screenshotName){  if (verbose) {    log("screenshotTest(" + screenshotName + ")");  }  try {    ImageIO io=ImageIO.getImageIO();    if (io == null || !io.isFormatSupported(ImageIO.FORMAT_PNG)) {      log("screenshot test skipped due to no image IO support for PNG format");      return true;    }    Image mute=Image.createImage(Display.getInstance().getDisplayWidth(),Display.getInstance().getDisplayHeight());    Display.getInstance().getCurrent().paint(mute.getGraphics());    screenshotName=screenshotName + ".png";    if (Storage.getInstance().exists(screenshotName)) {      int[] rgba=mute.getRGBCached();      Image orig=Image.createImage(Storage.getInstance().createInputStream(screenshotName));      int[] origRgba=orig.getRGBCached();      orig=null;      for (int iter=0; iter < rgba.length; iter++) {        if (rgba[iter] != origRgba[iter]) {          log("screenshots do not match at offset " + iter + " saving additional image under "+ screenshotName+ ".fail");          io.save(mute,Storage.getInstance().createOutputStream(screenshotName + ".fail"),ImageIO.FORMAT_PNG,1);          return false;        }      }    } else {      io.save(mute,Storage.getInstance().createOutputStream(screenshotName),ImageIO.FORMAT_PNG,1);    }    return true;  } catch (  IOException err) {    log(err);    return false;  }}  }
class C{  protected NondominatedPopulation normalize(NondominatedPopulation approximationSet){  return normalizer.normalize(approximationSet);}  }
class C{  public static CipherParameters makePBEParameters(BCPBEKey pbeKey,AlgorithmParameterSpec spec,String targetAlgorithm){  if ((spec == null) || !(spec instanceof PBEParameterSpec)) {    throw new IllegalArgumentException("Need a PBEParameter spec with a PBE key.");  }  PBEParameterSpec pbeParam=(PBEParameterSpec)spec;  PBEParametersGenerator generator=makePBEGenerator(pbeKey.getType(),pbeKey.getDigest());  byte[] key=pbeKey.getEncoded();  CipherParameters param;  if (pbeKey.shouldTryWrongPKCS12()) {    key=new byte[2];  }  generator.init(key,pbeParam.getSalt(),pbeParam.getIterationCount());  if (pbeKey.getIvSize() != 0) {    param=generator.generateDerivedParameters(pbeKey.getKeySize(),pbeKey.getIvSize());  } else {    param=generator.generateDerivedParameters(pbeKey.getKeySize());  }  if (targetAlgorithm.startsWith("DES")) {    if (param instanceof ParametersWithIV) {      KeyParameter kParam=(KeyParameter)((ParametersWithIV)param).getParameters();      DESParameters.setOddParity(kParam.getKey());    } else {      KeyParameter kParam=(KeyParameter)param;      DESParameters.setOddParity(kParam.getKey());    }  }  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  protected void finalMergeStep(int m,int n,Vec n_z,final List<Double> nz_qi,double n_alpha_z,boolean alterVecs){  int smallIndx=min(m,n);  int largeIndx=max(m,n);  alpha.remove(largeIndx);  alpha.remove(smallIndx);  if (alterVecs) {    vecs.remove(largeIndx);    vecs.remove(smallIndx);    kernelAccel.remove(largeIndx);    kernelAccel.remove(smallIndx);    vecs.add(n_z);    kernelAccel.addAll(nz_qi);  }  alpha.add(n_alpha_z);}  }
class C{  public void updateSkybox(int resourceId) throws Exception {  if (mSkyboxTexture.getClass() != Texture.class)   throw new Exception("The skybox texture cannot be updated.");  Texture texture=(Texture)mSkyboxTexture;  texture.setResourceId(resourceId);  mRenderer.getTextureManager().replaceTexture(texture);}  }
class C{  public void configure(){  XNetTrafficController packets=new XNetPacketizer(new LenzCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setXNetTrafficController(packets);  sourceThread=new Thread(this);  sourceThread.start();  new XNetInitializationManager(this.getSystemConnectionMemo());}  }
class C{  public DeltaSession7(Manager manager){  super(manager);  setOwner(manager);}  }
class C{  public boolean isOpen(final INaviView view){  Preconditions.checkNotNull(view,"IE01297: View argument can not be null");  for (  final IGraphContainerWindow graphContainer : getOpenWindows()) {    for (    final IGraphPanel window : graphContainer) {      if (window.getModel().getGraph().getRawView() == view) {        return true;      }    }  }  return false;}  }
class C{  public void onDown(long time,float x,float y,boolean fromMouse,int buttons){  resetResizeTimeout(false);  if (mNewTabButton.onDown(x,y)) {    mRenderHost.requestRender();    return;  }  final StripLayoutTab clickedTab=getTabAtPosition(x);  final int index=clickedTab != null ? TabModelUtils.getTabIndexById(mModel,clickedTab.getId()) : TabModel.INVALID_TAB_INDEX;  mInteractingTab=index != TabModel.INVALID_TAB_INDEX && index < mStripTabs.length ? mStripTabs[index] : null;  boolean clickedClose=clickedTab != null && clickedTab.checkCloseHitTest(x,y);  if (clickedClose) {    clickedTab.setClosePressed(true);    mLastPressedCloseButton=clickedTab.getCloseButton();    mRenderHost.requestRender();  }  if (!mScroller.isFinished()) {    mScroller.forceFinished(true);    mInteractingTab=null;  }  if (fromMouse && !clickedClose && clickedTab != null && clickedTab.getVisiblePercentage() >= 1.f && (buttons & MotionEvent.BUTTON_TERTIARY) == 0) {    startReorderMode(time,x,x);  }}  }
class C{  public static String matchObj(String path,Object input,Object expected) throws Exception {  return matchObj(path,input,expected,DEFAULT_DELTA);}  }
class C{  public T onselect(String value){  return attr("onselect",value);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (!learningphase) {    return;  }  int num_classes=(int)(snumClasses);  int num_features=(int)(snumFeatures);  double[] data=new double[num_features];  double[] labels=new double[num_classes];  int numChanges=0;  int numCategories_1=numCategories - 1;  numinstances+=1;  if (!instance.classIsMissing()) {    double suminputA=0;    double suminputB=0;    for (int j=0; j < num_features; j++) {      data[j]=instance.value(num_classes + j);      suminputA+=1;    }    for (int j=0; j < num_classes; j++) {      labels[j]=instance.value(j);      suminputB+=labels[j];    }    SortPair[] cateacti=ARTActivateCategories(data,labels);    java.util.Arrays.sort(cateacti);    boolean resonance=false;    int currentSortedIndex=0;    int currentCategory=-1;    double matchA=0;    double matchB=0;    while (!resonance && currentSortedIndex < cateacti.length) {      currentCategory=cateacti[currentSortedIndex].getOriginalIndex();      if (currentCategory == numCategories_1) {        matchB=1;        matchA=1;      } else {        matchA=ART_Calculate_MatchA(data,weightsA[currentCategory],suminputA);        if (sumArray(weightsB[currentCategory]) == 0) {          matchB=1;        } else {          matchB=ART_Calculate_MatchB(labels,weightsB[currentCategory],suminputB);        }      }      if (matchA >= roa && matchB >= rob) {        if (currentCategory == numCategories_1) {          if (currentSortedIndex == maxNumCategories) {            System.out.println("WARNING: The maximum number of categories has been reached.");            resonance=true;          } else {            sweightsA[currentCategory]=0;            for (int j=0; j < snumFeatures; j++) {              weightsA[currentCategory].put(j,data[j]);              sweightsA[currentCategory]+=data[j];            }            for (int j=snumFeatures; j < numFeatures; j++) {              double da=data[j - snumFeatures];              weightsA[currentCategory].put(j,da);              sweightsA[currentCategory]+=1 - da;            }            for (int j=0; j < snumClasses; j++) {              weightsB[currentCategory].put(j,labels[j]);            }            String s=Arrays.toString(labels);            if (hmclasses.containsKey(s)) {              hmclasses.get(s).add(currentCategory);              hmclasses.put(s,hmclasses.get(s));            } else {              Vector v=new Vector();              v.add(currentCategory);              hmclasses.put(s,v);            }            ARAMm_Add_New_Category();            numChanges=numChanges + 1;            resonance=true;            break;          }        } else {          double weightChange=ARAMm_Update_Weights(data,labels,currentCategory);          if (weightChange == 1) {            numChanges+=1;          }          resonance=true;          break;        }      } else {        currentSortedIndex+=1;        resonance=false;      }    }    if (!resonance && currentSortedIndex >= cateacti.length) {      sweightsA[numCategories_1]=0;      for (int j=0; j < snumFeatures; j++) {        weightsA[numCategories_1].put(j,data[j]);        sweightsA[numCategories_1]+=data[j];      }      for (int j=snumFeatures; j < numFeatures; j++) {        double da=data[j - snumFeatures];        weightsA[numCategories_1].put(j,da);        sweightsA[numCategories_1]+=1 - da;      }      for (int j=0; j < snumClasses; j++) {        weightsB[numCategories_1].put(j,labels[j]);      }      String s=Arrays.toString(labels);      if (hmclasses.containsKey(s)) {        hmclasses.get(s).add(numCategories_1);        hmclasses.put(s,hmclasses.get(s));      } else {        Vector v=new Vector();        v.add(numCategories_1);        hmclasses.put(s,v);      }      ARAMm_Add_New_Category();      numChanges=numChanges + 1;    }  }}  }
class C{  public void trackScreenView(String screenName){  Tracker tracker=getGoogleAnalyticsTracker();  tracker.setScreenName(screenName);  tracker.send(new HitBuilders.ScreenViewBuilder().build());  GoogleAnalytics.getInstance(this).dispatchLocalHits();}  }
class C{  public static void main(String[] arg) throws Exception {  SimpleCommandLineParser parser=new SimpleCommandLineParser(arg);  String project=parser.getValue("project");  String username=parser.getValue("username");  String password=parser.getValue("password");  boolean help=parser.containsKey("help");  if (help || (project == null)) {    usage();    System.exit(help ? 0 : 1);  }  if (username == null) {    System.out.println("***WARNING*** Unauthenticated user. To see any restricted issues, " + "you must authenticate yourself and have proper permission setting " + "for the project " + project + ".\n"+ "You can authenticate yourself by specifying <username> and "+ "<password> when you invoke this demo as follows:");    usage();  }  ProjectHostingService service=new ProjectHostingService("projecthosting-read-demo");  try {    new ProjectHostingReadDemo(service,project,username,password).run();  } catch (  AuthenticationException e) {    System.out.println("The username/password entered is invalid.");    System.exit(1);  }}  }
class C{  public void putGeneralizedTime(Date d) throws IOException {  putTime(d,DerValue.tag_GeneralizedTime);}  }
class C{  protected AbstractMetaDataPair(final String entityKey,final String metaDataKey,final TEntity entity,final TMetaData metaData){  this.entityKey=entityKey;  this.metaDataKey=metaDataKey;  this.entity=entity;  this.metaData=metaData;}  }
class C{  public static JavaPairRDD<MatrixIndexes,MatrixBlock> mergeRowsByKey(JavaPairRDD<MatrixIndexes,RowMatrixBlock> in){  return in.combineByKey(new CreateRowBlockCombinerFunction(),new MergeRowBlockValueFunction(),new MergeBlocksFunction(false));}  }
class C{  @NonNull @Override public Cursor query(@NonNull Uri uri,String[] projection,String selection,String[] selectionArgs,String sort){  Helpers.validateSelection(selection,APP_READABLE_COLUMNS_SET);  SQLiteDatabase db=openHelper.getReadableDatabase();  int match=URI_MATCHER.match(uri);switch (match) {case ALL_DOWNLOADS:case ALL_DOWNLOADS_ID:case MY_DOWNLOADS:case MY_DOWNLOADS_ID:    return queryDownloads(uri,projection,selection,selectionArgs,sort,db,match);case BATCHES:case BATCHES_ID:  SqlSelection batchSelection=getWhereClause(uri,selection,selectionArgs,match);return db.query(DownloadContract.BatchesWithSizes.VIEW_NAME_BATCHES_WITH_SIZES,projection,batchSelection.getSelection(),batchSelection.getParameters(),null,null,sort);case DOWNLOADS_BY_BATCH:return db.query(DownloadContract.DownloadsByBatch.VIEW_NAME_DOWNLOADS_BY_BATCH,projection,selection,selectionArgs,null,null,sort);case REQUEST_HEADERS_URI:if (projection != null || selection != null || sort != null) {throw new UnsupportedOperationException("Request header queries do not support " + "projections, selections or sorting");}return queryRequestHeaders(db,uri);default :LLog.v("querying unknown URI: " + uri);throw new IllegalArgumentException("Unknown URI: " + uri);}}  }
class C{  public void dispose(){  if (file != null) {    file.dispose();  }  file=null;  if (engine != null) {    engine.dispose();  }  engine=null;}  }
class C{  public TriggerKey selectTriggerForFireTime(Connection conn,long fireTime) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_TRIGGER_FOR_FIRE_TIME));    ps.setString(1,STATE_WAITING);    ps.setBigDecimal(2,new BigDecimal(String.valueOf(fireTime)));    rs=ps.executeQuery();    if (rs.next()) {      return new TriggerKey(rs.getString(COL_TRIGGER_NAME),rs.getString(COL_TRIGGER_GROUP));    } else {      return null;    }  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public TextHit hitTestChar(float x,float y){  syncLayout();  TextHit textHit=null;  int currentChar=0;  for (int i=0; i < gv.getNumGlyphs(); i++) {    Shape gbounds=gv.getGlyphLogicalBounds(i);    if (gbounds != null) {      Rectangle2D gbounds2d=gbounds.getBounds2D();      if (gbounds.contains(x,y)) {        boolean isRightHalf=(x > (gbounds2d.getX() + (gbounds2d.getWidth() / 2d)));        boolean isLeadingEdge=!isRightHalf;        int charIndex=charMap[currentChar];        textHit=new TextHit(charIndex,isLeadingEdge);        return textHit;      }    }    currentChar+=getCharacterCount(i,i);    if (currentChar >= charMap.length)     currentChar=charMap.length - 1;  }  return textHit;}  }
class C{  @Override public void execute(Iterator<String> contactsIter){  int totalContactsInserted=insertAllContacts(contactsIter);  Utils.showToast(mOps.getActivityContext(),totalContactsInserted + " contact(s) inserted");}  }
class C{  public void testArabicSort(){  assertQ("Collated Sort: ",req("fl","id","q","sort_ar:[\u0698 TO \u0633\u0633]","sort","sort_ar asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=12]","//result/doc[2]/int[@name='id'][.=1]");}  }
class C{  public void dumpCreatedResourceBundles(String location){  Hashtable bundleHash=getCreateHash();  for (Enumeration enumeration=bundleHash.keys(); enumeration.hasMoreElements(); ) {    String key=(String)enumeration.nextElement();    Properties props=(Properties)bundleHash.get(key);    try {      File propFile=new File(location + "/" + key);      File parentDir=new File(propFile.getParent());      parentDir.mkdirs();      propFile.createNewFile();      FileOutputStream fos=new FileOutputStream(propFile);      props.store(fos,"I18N Resource File");      fos.close();    } catch (    FileNotFoundException fnfe) {      fnfe.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public SimpleTableHeaderAdapter(final Context context,final String... headers){  super(context);  this.headers=headers;}  }
class C{  public StringBody(final String text,final Charset charset) throws UnsupportedEncodingException {  this(text,"text/plain",charset);}  }
class C{  public Map<String,Object> processOutputs(Map<String,Object> outputs,CWLPortProcessorCallback portProcessor) throws CWLPortProcessorException {  return processValues(outputs,job.getApp().getOutputs(),CWLOutputPort.class,portProcessor);}  }
class C{  public void createSubUsageScenario04() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.hoursToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO04_PERUNIT_HOUR",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_HOUR_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO04_PERUNIT_HOUR",serviceDetails,basicSetup.getSecondCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.hoursToMillis(25.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO04_PERUNIT_HOUR",subDetails);}  }
class C{  public void select(int index){  if (index >= 0 && index < elements.length) {    int lastSelected=getSelectionIndex();    if (index == lastSelected) {      return;    }    elements[index].setSelected(true);    selectedElementIndex=index;    if (lastSelected != NONE) {      elements[lastSelected].setSelected(false);      if (getSelectionIndex() != elements.length - 1) {        elements[getSelectionIndex() + 1].setSelected(false);      }    }    topNavigationElement.redraw();    bottomNavigationElement.redraw();    if (selectedElementIndex < topVisibleIndex || selectedElementIndex > bottomVisibleIndex) {      computeTopAndBottomTab();    }  }  notifyListeners(SWT.Selection,new Event());  elements[index].getInfo().getContents().setFocus();}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  try {    int resultLen=0;    if (outOff + bufOff > out.length) {      throw new OutputLengthException("output buffer too short for doFinal()");    }    if (bufOff != 0) {      if (!partialBlockOkay) {        throw new DataLengthException("data not block size aligned");      }      cipher.processBlock(buf,0,buf,0);      resultLen=bufOff;      bufOff=0;      System.arraycopy(buf,0,out,outOff,resultLen);    }    return resultLen;  }  finally {    reset();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void flush() throws IOException {}  }
class C{  public static final byte[] encodeUrl(BitSet urlsafe,byte[] bytes){  if (bytes == null) {    return null;  }  if (urlsafe == null) {    urlsafe=WWW_FORM_URL;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b < 0) {      b=256 + b;    }    if (urlsafe.get(b)) {      if (b == ' ') {        b='+';      }      buffer.write(b);    } else {      buffer.write('%');      char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16));      char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16));      buffer.write(hex1);      buffer.write(hex2);    }  }  return buffer.toByteArray();}  }
class C{  public static TimeSynchronizationSample createTimeSynchronizationSample(final KeyPair keyPair,final long localSendTimeStamp,final long localReceiveTimeStamp,final long remoteSendTimeStamp,final long remoteReceiveTimeStamp){  return new TimeSynchronizationSample(new Node(new NodeIdentity(keyPair,"node"),new NodeEndpoint("http","10.10.10.12",13),null),new CommunicationTimeStamps(new NetworkTimeStamp(localSendTimeStamp),new NetworkTimeStamp(localReceiveTimeStamp)),new CommunicationTimeStamps(new NetworkTimeStamp(remoteSendTimeStamp),new NetworkTimeStamp(remoteReceiveTimeStamp)));}  }
class C{  public int indexOf(Node item){  Node parent=getParent(item);  if (parent == null) {    return getRootItems().indexOf(item);  } else {    return getChildren(parent).indexOf(item);  }}  }
class C{  private void showFlagsDialog(){  int[] oldIndices=flagsList_.getSelectedIndices();  String[] buttons={"OK","Cancel"};  int result=JOptionPane.showOptionDialog(toolWindowContent,flagsList_,"Select flags",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,buttons,buttons[0]);  if (result != 0) {    flagsList_.setSelectedIndices(oldIndices);  } else {    if (flagsList_.getSelectedIndices().length > 1 && flagsList_.isSelectedIndex(0)) {      flagsList_.removeSelectionInterval(0,0);    }    updateFlagsTextField();  }}  }
class C{  private void forwardMediaFile(String mimeType,Uri mediaUri){  String resharePath="vfs:/" + mediaUri.getPath();  Intent shareIntent=new Intent(context,ImUrlActivity.class);  shareIntent.setAction(Intent.ACTION_SEND);  shareIntent.setDataAndType(Uri.parse(resharePath),mimeType);  context.startActivity(shareIntent);}  }
class C{  private Object createTestUsingConstructorInjection() throws Exception {  return getTestClass().getOnlyConstructor().newInstance(fParameters);}  }
class C{  default B addPattern(final BannerPattern pattern){  this.meta().addPattern(pattern);  return this.getBuilder();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public synchronized void unset(final ClassLoader classLoader){  this.valueByClassLoader.remove(classLoader);}  }
class C{  public BoolQueryBuilder filter(QueryBuilder queryBuilder){  filterClauses.add(queryBuilder);  return this;}  }
class C{  public boolean isCompatibleWith(TypeBinding otherType){  if (otherType == this)   return true;  if (otherType.id == TypeIds.T_JavaLangObject)   return true;  Object result;  if (this.compatibleCache == null) {    this.compatibleCache=new SimpleLookupTable(3);    result=null;  } else {    result=this.compatibleCache.get(otherType);    if (result != null) {      return result == Boolean.TRUE;    }  }  this.compatibleCache.put(otherType,Boolean.FALSE);  if (isCompatibleWith0(otherType)) {    this.compatibleCache.put(otherType,Boolean.TRUE);    return true;  }  return false;}  }
class C{  public SlitScanRenderer(Context context,SurfaceTexture texture,CameraFragment cameraFragment,int width,int height,int numSlits){  super(context,texture,cameraFragment,width,height);  mNumSlits=numSlits;}  }
class C{  public TwoStopsGradient(){  super("Two Stops Gradient");  JPanel panel=new JPanel(new GridBagLayout());  JButton button;  panel.add(button=new DepthButton("New"),new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(3,3,3,3),0,0));  button.setFocusPainted(false);  panel.add(button=new DepthButton("Open"),new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(3,3,3,3),0,0));  button.setFocusPainted(false);  panel.add(button=new DepthButton("Save"),new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(3,3,3,3),0,0));  button.setFocusPainted(false);  add(panel);  setSize(320,240);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:05.012 -0500",hash_original_method="4CDC4D1E7FEEFBC37A8F4BABF983F00D",hash_generated_method="9F21D0821BE5D3698BA91397A51EBA72") public LayoutParams(int width,int height,float weight){  super(width,height);  this.weight=weight;}  }
class C{  public void shutdown(){}  }
class C{  public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  void processCustoms(Element node,Document outputDocument){  boolean customDataFlag=false;  Element asCustoms=outputDocument.createElement("asCustoms");  ArrayList<String> handledTags=new ArrayList<String>();  handledTags.add("default");  handledTags.add("description");  handledTags.add("copy");  handledTags.add("see");  handledTags.add("playerversion");  handledTags.add("inheritDoc");  for (int ix=0; ix < node.getChildNodes().getLength(); ix++) {    Node child=node.getChildNodes().item(ix);    if (child.getNodeType() == Node.ELEMENT_NODE) {      String nodeName=child.getNodeName();      if (handledTags.contains(nodeName)) {        continue;      } else {        customDataFlag=true;        Element nodeNameElement=outputDocument.createElement(nodeName);        CDATASection cdata=outputDocument.createCDATASection(child.getTextContent());        nodeNameElement.appendChild(cdata);        asCustoms.appendChild(nodeNameElement);        node.removeChild(child);      }    }  }  if (customDataFlag) {    Element prolog=getElementByTagName(node,"prolog");    if (prolog != null) {      prolog.appendChild(asCustoms);    } else {      prolog=outputDocument.createElement("prolog");      prolog.appendChild(asCustoms);      node.appendChild(prolog);    }  }}  }
class C{  public String optionsTipTextHTML(){  return "<html><ul><li>-title=[chart title]</li>" + "<li>-color=[coloring/class attribute name]</li></html>";}  }
class C{  public ExtendedStringLiteral extendWith(CharLiteral lit){  int length=this.source.length;  System.arraycopy(this.source,0,(this.source=new char[length + 1]),0,length);  this.source[length]=lit.value;  this.sourceEnd=lit.sourceEnd;  return this;}  }
class C{  public void refreshSpringConfigurations(){  Map<SpringConfig,String> springConfigMap=springConfigRegistry.getAllSpringConfig();  spinnerAdapter.clear();  mSpringConfigs.clear();  for (  Map.Entry<SpringConfig,String> entry : springConfigMap.entrySet()) {    if (entry.getKey() == SpringConfig.defaultConfig) {      continue;    }    mSpringConfigs.add(entry.getKey());    spinnerAdapter.add(entry.getValue());  }  mSpringConfigs.add(SpringConfig.defaultConfig);  spinnerAdapter.add(springConfigMap.get(SpringConfig.defaultConfig));  spinnerAdapter.notifyDataSetChanged();  if (mSpringConfigs.size() > 0) {    mSpringSelectorSpinner.setSelection(0);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:35.762 -0500",hash_original_method="824AD0BBE6883E3213FE3DC10E71C2FB",hash_generated_method="4A5C1EC293677C95F0C856DF32C7EB86") public boolean validate(ResponseHeaders networkResponse){  if (networkResponse.headers.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {    return true;  }  if (lastModified != null && networkResponse.lastModified != null && networkResponse.lastModified.getTime() < lastModified.getTime()) {    return true;  }  return false;}  }
class C{  public void finish(){  if (!activity.isTaskRoot())   isNextActionInternal=true;  iGtgActivity.superFinish();}  }
class C{  public static void fillLocalFile(String filename,byte[] data,long size) throws IOException {  RandomAccessFile raf=new RandomAccessFile(filename,"rw");  raf.setLength(size);  raf.seek(0);  while (size > 0) {    int length=(int)Math.min(size,(long)data.length);    raf.write(data,0,length);    size-=length;  }  raf.getFD().sync();  raf.close();}  }
class C{  public static String stream2String(InputStream is,int maxLength) throws IOException {  byte[] buffer=new byte[4096];  StringWriter sw=new StringWriter();  int totalRead=0;  int read=0;  do {    sw.write(new String(buffer,0,read));    totalRead+=read;    read=is.read(buffer,0,buffer.length);  } while (((-1 == maxLength) || (totalRead < maxLength)) && (read != -1));  return sw.toString();}  }
class C{  public Section(){  this(-1,-1,"",null,Color.TRANSPARENT,Color.TRANSPARENT,Color.TRANSPARENT,"");}  }
class C{  protected void onEntranceTransitionEnd(){}  }
class C{  public static void loadCircularImage(Context context,OkulusImageView imageView,String imageUrl,AvatarBitmapTransformation.AvatarSize avatarSize){  Glide.with(context).load(imageUrl).asBitmap().animate(R.anim.fade_in).transform(AvatarBitmapTransformation.transformationFor(context,avatarSize)).diskCacheStrategy(DiskCacheStrategy.SOURCE).into(imageView);}  }
class C{  private long calcBlockSize(long fileSize){  return Math.max(UNIFORMITY_DFLT_BLOCK_SIZE,fileSize / UNIFORMITY_BLOCKS);}  }
class C{  private static void link(final ITreeNode<CTag> parent,final ITreeNode<CTag> child){  child.setParent(parent);  parent.addChild(child);}  }
class C{  public static int orientationIndex(Coordinate p1,Coordinate p2,Coordinate q){  double dx1=p2.x - p1.x;  double dy1=p2.y - p1.y;  double dx2=q.x - p2.x;  double dy2=q.y - p2.y;  return signOfDet2x2(dx1,dy1,dx2,dy2);}  }
class C{  public String minimalTipText(){  return "If enabled, dataset header, means and stdevs get discarded to conserve memory; also, the model cannot be printed out.";}  }
class C{  public EvaluationException(){  super();}  }
class C{  public static void main(String[] args){  UpdateProgressBar updateProgressBar=new UpdateProgressBar(100,"http://arianne.sourceforge.net/stendhal/greeting/",null,"0.88");  updateProgressBar.onDownloading(50);  updateProgressBar.setVisible(true);}  }
class C{  public MyPBKDF2SecretKey(String passPhrase,String algo,byte[] salt,int iterationCount,int keySize) throws InvalidKeySpecException, NoSuchAlgorithmException {  this.algorithm=algo;  this.salt=salt;  this.itereationCount=iterationCount;  this.keySize=keySize;  this.pass=passPhrase;  PBEKeySpec spec=new PBEKeySpec(passPhrase.toCharArray(),this.salt,iterationCount,this.keySize);  SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(algo);  SecretKey realKey=keyFactory.generateSecret(spec);  this.keyLength=realKey.getEncoded().length;  this.key=new byte[this.keyLength];  System.arraycopy(realKey.getEncoded(),0,this.key,0,this.keyLength);}  }
class C{  public void unlockTradeItemOffer(){  trade.unlockItemOffer();}  }
class C{  public boolean chainIsNotPinned(List<X509Certificate> chain){  for (  X509Certificate cert : chain) {    String fingerprint=getFingerprint(cert);    if (pinnedFingerprints.contains(fingerprint)) {      return false;    }  }  logPinFailure(chain);  return enforcing;}  }
class C{  public short rawValue(){  return value;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.LABELLED_STATEMENT;}  }
class C{  public static void assignDebugger(final AbstractSQLProvider provider,final CAddressSpace addressSpace,final DebuggerTemplate debugger) throws CouldntSaveDataException {  checkArguments(provider,addressSpace);  if ((debugger != null) && !debugger.inSameDatabase(provider)) {    throw new IllegalArgumentException("IE00392: Debugger is not part of this database");  }  final CConnection connection=provider.getConnection();  try {    final String debuggerValue=debugger == null ? "NULL" : String.valueOf(debugger.getId());    final String query=String.format("UPDATE %s SET debugger_id = %s WHERE id= %d",CTableNames.ADDRESS_SPACES_TABLE,debuggerValue,addressSpace.getConfiguration().getId());    connection.executeUpdate(query,true);  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }  PostgreSQLHelpers.updateModificationDate(connection,CTableNames.ADDRESS_SPACES_TABLE,addressSpace.getConfiguration().getId());}  }
class C{  public static boolean checkpw(String plaintext,String hashed){  return equalsNoEarlyReturn(hashed,hashpw(plaintext,hashed));}  }
class C{  void implReset(){  state[0]=0x67452301;  state[1]=0xefcdab89;  state[2]=0x98badcfe;  state[3]=0x10325476;  state[4]=0xc3d2e1f0;}  }
class C{  public PostRestoreStateEvent(FacesContext facesContext,UIComponent component){  super(facesContext,component);}  }
class C{  public int refresh(){  return p_data.size();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:05.990 -0500",hash_original_method="24CA5CFFCC859FAC59BD892D4A4B2393",hash_generated_method="24CA5CFFCC859FAC59BD892D4A4B2393") PhoneNumberMatch(int start,String rawString,PhoneNumber number){  if (start < 0) {    throw new IllegalArgumentException("Start index must be >= 0.");  }  if (rawString == null || number == null) {    throw new NullPointerException();  }  this.start=start;  this.rawString=rawString;  this.number=number;}  }
class C{  public TechnicalServiceMultiSubscriptions(Object[] params){  super(params);}  }
class C{  default <ST>Xor<ST,T> toXor(final ST secondary){  final Optional<T> o=toOptional();  return o.isPresent() ? Xor.primary(o.get()) : Xor.secondary(secondary);}  }
class C{  public final void writeBytes(String str) throws IOException {  if (str.length() == 0) {    return;  }  byte bytes[]=new byte[str.length()];  for (int index=0; index < str.length(); index++) {    bytes[index]=(byte)str.charAt(index);  }  out.write(bytes);  written+=bytes.length;}  }
class C{  public String qName2String(QName qName,boolean writeNS){  String prefix=null;  String namespaceURI=qName.getNamespace();  String localPart=qName.getLocalPart();  if (localPart != null && localPart.length() > 0) {    int index=localPart.indexOf(':');    if (index != -1) {      prefix=localPart.substring(0,index);      if (prefix.length() > 0 && !prefix.equals("urn")) {        registerPrefixForURI(prefix,namespaceURI);        localPart=localPart.substring(index + 1);      } else {        prefix=null;      }    }    localPart=getLastLocalPart(localPart);  }  if (namespaceURI.length() == 0) {    if (writeNS) {      String defaultNS=nsStack.getNamespaceURI("");      if (defaultNS != null && defaultNS.length() > 0) {        registerPrefixForURI("","");      }    }  } else {    prefix=getPrefixForURI(namespaceURI,qName.getPreferredPrefix());  }  if ((prefix == null) || (prefix.length() == 0))   return localPart;  return prefix + ':' + localPart;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.270 -0400",hash_original_method="B476CF905D5D518F58BD8550D788EA68",hash_generated_method="E5E3A4C0A1E0E950891E347AE6281BCC") Map.Entry<K,V> doRemoveLastEntry(){  for (; ; ) {    Node<K,V> b=findPredecessorOfLast();    Node<K,V> n=b.next;    if (n == null) {      if (b.isBaseHeader())       return null; else       continue;    }    for (; ; ) {      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      if (f != null) {        b=n;        n=f;        continue;      }      if (!n.casValue(v,null))       break;      K key=n.key;      Comparable<? super K> ck=comparable(key);      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(ck); else {        findPredecessor(ck);        if (head.right == null)         tryReduceLevel();      }      return new AbstractMap.SimpleImmutableEntry<K,V>(key,(V)v);    }  }}  }
class C{  public String toString(){  return Utils.arrayToString(getCoefficients());}  }
class C{  public void onDetach(){  if (!shownByMe && !dismissed) {    dismissed=true;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.194 -0400",hash_original_method="73C7C4A2506CC28540996448D8A5BAD2",hash_generated_method="EB433027E8636A4ABB63A7CE36545B4C") public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public void testRemovePropertyChangeListener(){  PropertyChangeListener l=null;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.removePropertyChangeListener(l);}  }
class C{  public String intValueToStringValue(Integer intVal){  if (intVal == null)   return null;  final String enumString=enumIntToStringMap.get(intVal);  if (enumString != null)   return enumString;  return DEFAULT_VALUE.toString();}  }
class C{  public synchronized Vertex applyQuotient(Map<Vertex,Vertex> variables,Network network){  Vertex result=null;  boolean isDebug=network.getBot().isDebugFiner();  if (isVariable()) {    result=variables.get(this);    if (result == null) {      result=network.createVertex(Primitive.NULL);    }  } else   if (instanceOf(Primitive.EQUATION)) {    try {      if (getData() instanceof BinaryData) {        Vertex equation=new SelfDecompiler().parseEquationByteCode(this,(BinaryData)getData(),this.network);        return equation.applyQuotient(variables,network);      }      Vertex operator=getRelationship(Primitive.OPERATOR);      if (operator == null) {        return network.createVertex(Primitive.NULL);      }      List<Relationship> arguments=orderedRelationships(Primitive.ARGUMENT);      if (isDebug) {        Vertex source=getRelationship(Primitive.SOURCE);        String sourceCode="";        if (source != null) {          sourceCode=String.valueOf(source.getData()).trim();        } else         if (operator.isPrimitive()) {          sourceCode=((Primitive)operator.getData()).getIdentity().toUpperCase() + "(" + orderedRelations(Primitive.ARGUMENT)+ ")";        }        Vertex number=getRelationship(Primitive.LINE_NUMBER);        if (number != null) {          sourceCode=String.valueOf(number.getData()) + ":" + sourceCode;        }        network.getBot().log(SELF,sourceCode,Level.FINER);      }      if (operator.is(Primitive.NOT)) {        Vertex equation=arguments.get(0).getTarget();        result=equation.applyQuotient(variables,network);        if (result.is(Primitive.TRUE)) {          result=network.createVertex(Primitive.FALSE);        } else         if (result.is(Primitive.FALSE)) {          result=network.createVertex(Primitive.TRUE);        } else         if (result.is(Primitive.UNKNOWN)) {          result=network.createVertex(Primitive.UNKNOWN);        }      } else       if (operator.is(Primitive.RELATION)) {        result=applyRELATION(arguments,variables,network);      } else       if (operator.is(Primitive.RELATED)) {        result=applyRELATED(arguments,variables,network);      } else       if (operator.is(Primitive.ASSOCIATE) || operator.is(Primitive.DISSOCIATE) || operator.is(Primitive.WEAKASSOCIATE)) {        result=applyASSOCIATE(operator,arguments,variables,network);      } else       if (operator.is(Primitive.FOR)) {        result=applyFOR(arguments,variables,network);      } else       if (operator.is(Primitive.WHILE)) {        result=applyWHILE(arguments,variables,network);      } else       if (operator.is(Primitive.ASSIGN)) {        Vertex variable=arguments.get(0).getTarget();        Vertex value=arguments.get(1).getTarget().applyQuotient(variables,network);        if (value != null) {          variables.put(variable,value);        }        if (isDebug) {          network.getBot().log(SELF,"ASSIGN " + variable + " TO "+ value,Level.FINER);        }        result=value;      } else       if (operator.is(Primitive.DEFINE)) {        Vertex object=arguments.get(0).getTarget().applyQuotient(variables,network);        Iterator<Relationship> iterator=arguments.iterator();        iterator.next();        while (iterator.hasNext()) {          Vertex word=iterator.next().getTarget().applyQuotient(variables,network);          word.addRelationship(Primitive.MEANING,object);          object.addRelationship(Primitive.WORD,word);          network.associateCaseInsensitivity((String)word.getData(),object);          if (isDebug) {            network.getBot().log(SELF,"DEFINE " + object + " AS "+ word,Level.FINER);          }        }        result=object;      } else       if (operator.is(Primitive.RANDOM)) {        result=applyRANDOM(arguments,variables,network);      } else       if (operator.is(Primitive.DEBUG)) {        result=applyDEBUG(arguments,variables,network);      } else       if (operator.is(Primitive.IF)) {        result=applyIF(arguments,variables,network);      } else       if (operator.is(Primitive.GREATER)) {        result=applyGREATER(arguments,variables,network);      } else       if (operator.is(Primitive.LESS)) {        result=applyLESS(arguments,variables,network);      } else       if (operator.is(Primitive.EQUAL)) {        result=applyEQUAL(arguments,variables,network);      } else       if (operator.is(Primitive.OR) || operator.is(Primitive.AND)) {        result=applyCONDITION(arguments,variables,network);      } else       if (operator.is(Primitive.DO)) {        Vertex returnPrimitive=network.createVertex(Primitive.RETURN);        if (arguments != null) {          for (          Relationship doEquation : arguments) {            result=doEquation.getTarget().applyQuotient(variables,network);            if (variables.containsKey(returnPrimitive)) {              if (hasName()) {                variables.remove(returnPrimitive);              }              return result;            }          }        }      } else       if (operator.is(Primitive.THINK)) {        Vertex returnPrimitive=network.createVertex(Primitive.RETURN);        for (        Relationship doEquation : arguments) {          result=doEquation.getTarget().applyQuotient(variables,network);          if (variables.containsKey(returnPrimitive)) {            if (hasName()) {              variables.remove(returnPrimitive);            }            return result;          }        }        result=returnPrimitive;      } else       if (operator.is(Primitive.WORD)) {        result=applyWORD(arguments,variables,network);      } else       if (operator.is(Primitive.SENTENCE)) {        result=applySENTENCE(arguments,variables,network);      } else       if (operator.is(Primitive.UPPERCASE)) {        result=applyFRAGMENT(arguments,variables,network,Primitive.UPPERCASE);      } else       if (operator.is(Primitive.LOWERCASE)) {        result=applyFRAGMENT(arguments,variables,network,Primitive.LOWERCASE);      } else       if (operator.is(Primitive.FORMAT)) {        Vertex as=getRelationship(Primitive.AS);        if (as != null) {          as=as.applyQuotient(variables,network);        }        if (as != null && as.isPrimitive()) {          result=applyFRAGMENT(arguments,variables,network,(Primitive)as.getData());        } else {          result=applyFRAGMENT(arguments,variables,network,null);        }      } else       if (operator.is(Primitive.PRIMITIVE)) {        if (arguments.size() == 0) {          result=network.createVertex(Primitive.NULL);        }        Vertex primitive=arguments.get(0).getTarget().applyQuotient(variables,network);        result=network.createVertex(new Primitive(((String.valueOf(primitive.getData()).toLowerCase()))));      } else       if (operator.is(Primitive.INPUT)) {        result=applyINPUT(arguments,variables,network);      } else       if (operator.is(Primitive.GET)) {        result=applyGET(arguments,variables,network);      } else       if (operator.is(Primitive.SET)) {        result=applySET(arguments,variables,network);      } else       if (operator.is(Primitive.ALL)) {        result=applyALL(arguments,variables,network);      } else       if (operator.is(Primitive.COUNT)) {        result=applyCOUNT(arguments,variables,network);      } else       if (operator.is(Primitive.APPEND)) {        result=applyAPPEND(arguments,variables,network);      } else       if (operator.is(Primitive.NEW)) {        result=applyNEW(arguments,variables,network);      } else       if (operator.is(Primitive.CALL)) {        result=applyCALL(arguments,variables,network);      } else       if (operator.is(Primitive.LEARN)) {        result=applyLEARN(arguments,variables,network);      } else       if (operator.is(Primitive.SRAI) || operator.is(Primitive.REDIRECT)) {        result=applySRAI(arguments,variables,network);      } else       if (operator.is(Primitive.SRAIX) || operator.is(Primitive.REQUEST)) {        result=applySRAIX(arguments,variables,network);      } else       if (operator.is(Primitive.RETURN)) {        if (arguments == null || arguments.isEmpty()) {          result=network.createVertex(Primitive.NULL);        } else {          result=arguments.get(0).getTarget().applyQuotient(variables,network);        }        variables.put(network.createVertex(Primitive.RETURN),result);      }      if (hasName()) {        variables.remove(network.createVertex(Primitive.RETURN));      }    } catch (    SelfExecutionException exception) {      throw exception;    }catch (    Exception exception) {      network.getBot().log(this,exception);      throw new SelfExecutionException(this,exception);    }  } else {    result=(Vertex)(Object)this;  }  if (result == null) {    result=network.createVertex(Primitive.NULL);  }  if (result.getNetwork() != network) {    result=network.createVertex(result);  }  if (result.instanceOf(Primitive.FORMULA)) {    Language language=network.getBot().mind().getThought(Language.class);    Vertex newResult=language.evaluateFormula(result,variables,network);    if (newResult == null) {      language.log("Template formula cannot be evaluated",Level.FINE,result);      result=network.createVertex(Primitive.NULL);    } else {      result=language.getWord(newResult,network);    }  }  network.getBot().log(this,"result:",Level.FINER,result);  return result;}  }
class C{  public static Word max(){  return null;}  }
class C{  public JComboBox<String> matchingComboBox(String roadName,String roadNumber,String consistNumber,String eng1Address,String eng2Address,String eng3Address,String eng4Address,String eng5Address,String eng6Address,String id){  List<NceConsistRosterEntry> l=matchingList(roadName,roadNumber,consistNumber,eng1Address,eng2Address,eng3Address,eng4Address,eng5Address,eng6Address,id);  JComboBox<String> b=new JComboBox<String>();  for (int i=0; i < l.size(); i++) {    NceConsistRosterEntry r=_list.get(i);    b.addItem(r.titleString());  }  return b;}  }
class C{  public MatrixReader(Reader reader,int numberOfColumns){  super();  if (reader instanceof CommentedLineReader) {    this.reader=(CommentedLineReader)reader;  } else {    this.reader=new CommentedLineReader(reader);  }  this.numberOfColumns=numberOfColumns;}  }
class C{  @Nullable public static <C extends RunConfiguration>C createRunConfigurationFromContext(@NotNull final CodeInsightTestFixture fixture,@NotNull final Class<C> expectedClass){  final DataContext context=DataManager.getInstance().getDataContext(fixture.getEditor().getComponent());  for (  final RunConfigurationProducer<?> producer : RunConfigurationProducer.EP_NAME.getExtensions()) {    final ConfigurationFromContext fromContext=producer.createConfigurationFromContext(ConfigurationContext.getFromContext(context));    if (fromContext == null) {      continue;    }    final C result=PyUtil.as(fromContext.getConfiguration(),expectedClass);    if (result != null) {      return result;    }  }  return null;}  }
class C{  public RoleList(int initialCapacity){  super(initialCapacity);}  }
class C{  static String quote(char c){  StringBuilder b=new StringBuilder();  b.append('\'');  if (c == '\'')   b.append('\\').append('\''); else   if (c == '\\')   b.append('\\').append('\\'); else   if (c == '\n')   b.append('\\').append('n'); else   if (c == '\r')   b.append('\\').append('r'); else   b.append(c);  b.append('\'');  return b.toString();}  }
class C{  public double distanceTo(Point2D that){  double dx=this.x - that.x;  double dy=this.y - that.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  static private boolean isEscapedChar(String s,int pos){  return isSlashEscapedChar(s,pos) || isQuoteEscapedChar(s,pos);}  }
class C{  private HostScsiDisk waitForValidState(HostScsiDisk disk){  logInfo("find.host.scsi.lun.esx.wait.valid",lunDiskName,host.getName());  long startTime=System.currentTimeMillis();  while ((disk == null || !isValidState(disk)) && canRetry(startTime,VALID_STATE_TIMEOUT)) {    pause(VALID_STATE_DELAY);    disk=getLunDisk();    if (disk == null) {      diskNotFound(false);    } else     if (isDiskOff(disk)) {      attachDisk(disk);    }  }  if (disk == null) {    diskNotFound(true);  } else   if (!isValidState(disk)) {    diskInvalid(disk);  }  return disk;}  }
class C{  public WalkingIteratorSorted(PrefixResolver nscontext){  super(nscontext);}  }
class C{  public static <U,T>Observable<T> cachedSample(Observable<T> base,Observable<U> sampler){  return base.lift(new RxCachedSampleWithObservableOperator<>(sampler));}  }
class C{  public void pushFrame(CompiledMethod callee){  stack.pushFrame(this,callee);}  }
class C{  public Vector4f min(Vector4fc v){  this.x=x < v.x() ? x : v.x();  this.y=y < v.y() ? y : v.y();  this.z=z < v.z() ? z : v.z();  this.w=w < v.w() ? w : v.w();  return this;}  }
class C{  void outputDocTypeDecl(String name,boolean closeDecl) throws SAXException {  if (m_cdataTagOpen)   closeCDATA();  try {    final java.io.Writer writer=m_writer;    writer.write("<!DOCTYPE ");    writer.write(name);    String doctypePublic=getDoctypePublic();    if (null != doctypePublic) {      writer.write(" PUBLIC \"");      writer.write(doctypePublic);      writer.write('\"');    }    String doctypeSystem=getDoctypeSystem();    if (null != doctypeSystem) {      if (null == doctypePublic)       writer.write(" SYSTEM \""); else       writer.write(" \"");      writer.write(doctypeSystem);      if (closeDecl) {        writer.write("\">");        writer.write(m_lineSep,0,m_lineSepLen);        closeDecl=false;      } else       writer.write('\"');    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public PublisherAmb<T> ambAdditionalSource(Publisher<? extends T> source){  if (array != null) {    int n=array.length;    @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1];    System.arraycopy(array,0,newArray,0,n);    newArray[n]=source;    return new PublisherAmb<>(newArray);  }  return null;}  }
class C{  private void checkDestination(int dstPort){  if (dstPort < 0 || dstPort > 65535) {    throw new IllegalArgumentException("Port out of range: " + dstPort);  }}  }
class C{  public static String generateNativeGuid(UCSServiceProfileTemplate serviceProfileTemplate,String systemType){  return String.format("%s+%s",_deviceTypeMap.get(systemType),serviceProfileTemplate.getDn());}  }
class C{  public boolean evaluateEarly(){  return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.EVENT_SOURCE__EVENT:    if (resolve)     return getEvent();  return basicGetEvent();case MappingPackage.EVENT_SOURCE__EVENT_PROPERTY:if (resolve) return getEventProperty();return basicGetEventProperty();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.504 -0500",hash_original_method="3F9050C9D9DA025E9AD5115049E6DBE4",hash_generated_method="8A9885D620EF044891FFFF2CC0C43878") public boolean isServer(){  if (this.firstTransactionSeen == false)   return this.serverTransactionFlag; else   return this.firstTransactionIsServerTransaction;}  }
class C{  public static void assertPingTrue(String message,String expectedContent,URL pingURL,Logger errorLogger){  assertPing(message,expectedContent,pingURL,null,true,errorLogger);}  }
class C{  public static <T>boolean isEmpty(T[] arr){  return null == arr || arr.length == 0;}  }
class C{  public UUID store(KafkaSchedulerConfiguration configuration) throws ConfigStoreException {  try {    return configStore.store(configuration);  } catch (  Exception e) {    String msg="Failure to store configurations.";    log.error(msg,e);    throw new ConfigStoreException(msg,e);  }}  }
class C{  public static void enableAllView(final BackEndDebuggerProvider debuggerProvider,final INaviView view){  checkArguments(debuggerProvider,view);  for (  final IDebugger debugger : debuggerProvider) {    enableAllView(debugger.getBreakpointManager(),view);  }}  }
class C{  private static int unrandomize255State(int randomizedBase256Codeword,int base256CodewordPosition){  int pseudoRandomNumber=((149 * base256CodewordPosition) % 255) + 1;  int tempVariable=randomizedBase256Codeword - pseudoRandomNumber;  return tempVariable >= 0 ? tempVariable : tempVariable + 256;}  }
class C{  public FXGException(int lineNumber,int columnNumber,Throwable cause){  super(cause);  this.arguments=null;  message=null;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.243 -0400",hash_original_method="BDA0A1485C06EBB2E0A6D334D1656ED0",hash_generated_method="BDA0A1485C06EBB2E0A6D334D1656ED0") boolean isMarker(){  return value == this;}  }
class C{  public double[] distributionT(Instance x_) throws Exception {  return h.distributionForInstance(x_);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:40:20.430 -0400",hash_original_method="14018AAD7C4037FEC1E442AACA44DC71",hash_generated_method="5AF250E1A2853433C52729DC2A32B1B2") public AtCommandResult handleTestCommand(){  return new AtCommandResult(AtCommandResult.OK);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  protected void adjustBounds(){}  }
class C{  public void put(K key,V value){  key=sanitizeKey(key);  List<V> list=map.get(key);  if (list == null) {    list=new ArrayList<V>();    map.put(key,list);  }  list.add(value);}  }
class C{  public boolean parseMoreData(final EncodedImage encodedImage){  if (mParserState == NOT_A_JPEG) {    return false;  }  final int dataBufferSize=encodedImage.getSize();  if (dataBufferSize <= mBytesParsed) {    return false;  }  final InputStream bufferedDataStream=new PooledByteArrayBufferedInputStream(encodedImage.getInputStream(),mByteArrayPool.get(BUFFER_SIZE),mByteArrayPool);  try {    StreamUtil.skip(bufferedDataStream,mBytesParsed);    return doParseMoreData(bufferedDataStream);  } catch (  IOException ioe) {    Throwables.propagate(ioe);    return false;  } finally {    Closeables.closeQuietly(bufferedDataStream);  }}  }
class C{  public void makeExistingDemandBillInactive(String assessmentNo){  DemandBillService demandBillService=(DemandBillService)beanProvider.getBean("demandBillService");  demandBillService.makeDemandBillInactive(assessmentNo);}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  protected Point2D.Double findPoint(ConnectionFigure connection){  return Geom.center(getBounds());}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  private ChooseConfig searchXmlConfig(ChooseConfig cc,XML xml){  if (isNull(xml.getXmlPath()))   return null;  if (isNull(cc) || cc == ChooseConfig.DESTINATION)   if (xml.isInheritedMapped(destination))   return ChooseConfig.DESTINATION;  if (isNull(cc) || cc == ChooseConfig.SOURCE)   if (xml.isInheritedMapped(source))   return ChooseConfig.SOURCE;  return null;}  }
class C{  public boolean isInputColumnNameAllowed(String columnName){  if (columnName == null || columnName.length() == 0)   return false;  getInputColumnNames(false);  for (int i=0; i < m_inputcolumnnames.length; i++) {    if (columnName.equals(m_inputcolumnnames[i]))     return true;  }  return false;}  }
class C{  public int casesFallThrough(int which){  int n=5;switch (which) {case 0:    n=n * n;case 1:  n=n * n;case 2:n=n * n;default :n=n * n;}return n;}  }
class C{  protected void afterBuildFinished(Notification notification,BuildTaskDescriptor descriptor,SubscriptionHandler<String> buildStatusHandler,SubscriptionHandler<String> buildOutputHandler,final String successMessage,final String errorMessage,final String prefixConsole,BuildFinishedCallback buildFinishedCallback){  try {    messageBus.unsubscribe(BuilderExtension.BUILD_STATUS_CHANNEL + descriptor.getTaskId(),buildStatusHandler);  } catch (  Exception e) {    Log.error(BuilderAgent.class,e);  }  try {    messageBus.unsubscribe(BuilderExtension.BUILD_OUTPUT_CHANNEL + descriptor.getTaskId(),buildOutputHandler);  } catch (  Exception e) {    Log.error(BuilderAgent.class,e);  }  if (descriptor.getStatus() == BuildStatus.SUCCESSFUL) {    buildSuccessful(notification,successMessage,prefixConsole);  } else   if (descriptor.getStatus() == BuildStatus.FAILED) {    notification.setMessage(errorMessage);    notification.setStatus(FINISHED);    notification.setType(ERROR);    console.print(prefixConsole + "::" + errorMessage);  }  importZipResult(descriptor,buildFinishedCallback);}  }
class C{  public static boolean checkExplicitTaskMonitoring(Ignite ignite){  int[] evts=ignite.configuration().getIncludeEventTypes();  if (F.isEmpty(evts))   return false;  for (  int evt : VISOR_TASK_EVTS) {    if (!F.contains(evts,evt))     return false;  }  return true;}  }
class C{  public SetRegisterCommand(final int packetId,final long tid,final int index,final IAddress value){  super(DebugCommandType.CMD_SET_REGISTER,packetId);  Preconditions.checkNotNull(value,"IE01029: Value argument can not be null");  Preconditions.checkArgument(index >= 0,"IE01030: Register index can not be negative");  addArgument(new DebugMessageIntegerArgument((int)tid));  addArgument(new DebugMessageIntegerArgument(index));  addArgument(new DebugMessageAddressArgument(value));}  }
class C{  public IndividualUnitPanelGrouped(final Map<String,Collection<Unit>> unitsToChooseFrom,final GameData data,final IUIContext uiContext,final String title,final int maxTotal,final boolean showMinAndMax,final boolean showSelectAll){  m_data=data;  m_uiContext=uiContext;  setMaxAndShowMaxButton(maxTotal);  m_showMinAndMax=showMinAndMax;  m_title=new JTextArea(title);  m_title.setBackground(this.getBackground());  m_title.setEditable(false);  m_title.setWrapStyleWord(true);  m_unitsToChooseFrom=unitsToChooseFrom;  m_showSelectAll=showSelectAll;  layoutEntries();}  }
class C{  protected void loadChildren(ViewFactory f){  Element e=getElement();  int n=e.getElementCount();  if (n > 0) {    View[] added=new View[n];    for (int i=0; i < n; i++)     added[i]=new WrappedLine(e.getElement(i));    replace(0,0,added);  }}  }
class C{  private View findFirstVisibleChildClosestToEnd(boolean completelyVisible,boolean acceptPartiallyVisible){  if (mShouldReverseLayout) {    return findOneVisibleChild(0,getChildCount(),completelyVisible,acceptPartiallyVisible);  } else {    return findOneVisibleChild(getChildCount() - 1,-1,completelyVisible,acceptPartiallyVisible);  }}  }
class C{  @Override @After public void tearDown() throws Exception {  try {    consumerConnection.close();    producerConnection.close();    admin.deleteConnectionFactory(UnifiedTestCase.CF_NAME);    admin.deleteQueueConnectionFactory(UnifiedTestCase.QCF_NAME);    admin.deleteTopicConnectionFactory(UnifiedTestCase.TCF_NAME);    admin.deleteQueue(UnifiedTestCase.DESTINATION_NAME);    admin.deleteQueue(UnifiedTestCase.QUEUE_NAME);    admin.deleteTopic(UnifiedTestCase.TOPIC_NAME);  } catch (  Exception ignored) {  } finally {    producerDestination=null;    producer=null;    producerCF=null;    producerSession=null;    producerConnection=null;    consumerDestination=null;    consumer=null;    consumerCF=null;    consumerSession=null;    consumerConnection=null;    queueConnectionFactory=null;    queue=null;    topicConnectionFactory=null;    topic=null;  }  super.tearDown();}  }
class C{  public static boolean hasExpressionOperators(final String str){  boolean result=false;  for (  final char chr : OPERATOR_FIRST_CHARS) {    if (str.indexOf(chr) >= 0) {      result=true;      break;    }  }  return result;}  }
class C{  private void startIfReady(Animator dependencyAnimation){  if (mAnimatorSet.mTerminated) {    return;  }  Dependency dependencyToRemove=null;  int numDependencies=mNode.tmpDependencies.size();  for (int i=0; i < numDependencies; ++i) {    Dependency dependency=mNode.tmpDependencies.get(i);    if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {      dependencyToRemove=dependency;      dependencyAnimation.removeListener(this);      break;    }  }  mNode.tmpDependencies.remove(dependencyToRemove);  if (mNode.tmpDependencies.size() == 0) {    mNode.animation.start();    mAnimatorSet.mPlayingSet.add(mNode.animation);  }}  }
class C{  public void insertNewAddresses(Dao<AddressBook,Integer> addressBookDao,Dao<AddressItem,Integer> addressItemDao) throws SQLException {  if (this.nonDaoAddresses == null) {    return;  }  addressBookDao.assignEmptyForeignCollection(this,"addresses");  for (  AddressItem addressItem : nonDaoAddresses) {    addressItem.setAddressBook(this);    addressItemDao.create(addressItem);    addresses.add(addressItem);  }}  }
class C{  private void processSymbol(final SymbolWithRange swr){  vb.setLength(0);switch (swr.symbol) {case APM:    if (swr.param <= playerUsers.length)     vb.append(playerUsers[swr.param - 1].getApm());  break;case AVG_APM:vb.append(repProc.getAvgAPM());break;case AVG_LEAGUE:vb.append(repProc.getAvgLeague().getLetter());break;case AVG_LEAGUE_LONG:vb.append(repProc.getAvgLeague().toString());break;case AVG_SPM:vb.append(Env.LANG.formatNumber(repProc.getAvgSPM(),2));break;case AVG_SQ:vb.append(repProc.getAvgSQ());break;case AVG_SUPPLY_CAPPED:vb.append(Env.LANG.formatNumber(repProc.getAvgSupplyCappedPercent(),2));break;case BRACKETS_CLOSE:vb.append(']');break;case BRACKETS_OPEN:vb.append('[');break;case COUNTER:{Integer value=symbolCounterMap.get(swr.param);vb.append(value == null ? value=1 : value);symbolCounterMap.put(swr.param,value + 1);for (int i=swr.param - vb.length(); i > 0; i--) vb.insert(0,'0');break;}case DATE:synchronized (DATE_FORMAT) {vb.append(DATE_FORMAT.format(replay.getDetails().getTime()));}break;case DATE_SHORT:synchronized (DATE_SHORT_FORMAT) {vb.append(DATE_SHORT_FORMAT.format(replay.getDetails().getTime()));}break;case DATE_TINY:synchronized (DATE_TINY_FORMAT) {vb.append(DATE_TINY_FORMAT.format(replay.getDetails().getTime()));}break;case DATE_TIME:synchronized (DATE_TIME_FORMAT) {vb.append(DATE_TIME_FORMAT.format(replay.getDetails().getTime()));}break;case DATE_TIME_SHORT:synchronized (DATE_TIME_SHORT_FORMAT) {vb.append(DATE_TIME_SHORT_FORMAT.format(replay.getDetails().getTime()));}break;case DATE_TIME_TINY:synchronized (DATE_TIME_TINY_FORMAT) {vb.append(DATE_TIME_TINY_FORMAT.format(replay.getDetails().getTime()));}break;case EXPANSION:vb.append(replay.getInitData().getGameDescription().getExpansionLevel().toString());break;case FOLDER_SEPARATOR:vb.append('/');break;case FORMAT:vb.append(repProc.getFormat().toString());break;case LEAGUE:if (swr.param <= playerUsers.length) vb.append(playerUsers[swr.param - 1].getUid() == null ? League.UNKNOWN.letter : playerUsers[swr.param - 1].getUid().getHighestLeague().getLetter());break;case LEAGUE_LONG:if (swr.param <= playerUsers.length) vb.append(playerUsers[swr.param - 1].getUid() == null ? League.UNKNOWN.text : playerUsers[swr.param - 1].getUid().getHighestLeague().toString());break;case LEAGUE_MATCHUP:vb.append(repProc.getLeagueMatchup());break;case LENGTH:vb.append(DurationFormat.AUTO.formatDuration(repProc.getLengthMs()).replace(':','_'));break;case LOSERS:vb.append(repProc.getLosersString());break;case MAP_NAME:vb.append(replay.getDetails().getTitle());break;case MAP_WORDS:case MAP_ACRONYM:{int wordCount=0;for (final StringTokenizer st=new StringTokenizer(replay.getDetails().getTitle()); st.hasMoreTokens(); ) {final String word=st.nextToken();if (BANNED_MAP_WORDS.contains(word.toLowerCase())) continue;if (swr.symbol == Symbol.MAP_ACRONYM) {vb.append(Character.toUpperCase(word.charAt(0)));} else {if (wordCount++ > 0) vb.append(' ');vb.append(word);if (wordCount == swr.param) break;}}break;}case MATCHUP:vb.append(repProc.getRaceMatchup());break;case MODE:vb.append(replay.getAttributesEvents().getGameMode().toString());break;case ORIG_NAME:vb.append(Utils.getFileNameWithoutExt(repProc.getFile()));break;case PIB:break;case PIB_APM:vb.append(pibUser.getApm());break;case PIB_LEAGUE:vb.append(pibUser.getUid() == null ? League.UNKNOWN.letter : pibUser.getUid().getHighestLeague().getLetter());break;case PIB_LEAGUE_LONG:vb.append(pibUser.getUid() == null ? League.UNKNOWN.text : pibUser.getUid().getHighestLeague().toString());break;case PIB_PLAYER:vb.append(pibUser.getFullName());break;case PIB_RACE:vb.append(pibUser.getPlayer() == null ? Race.UNKNOWN.letter : pibUser.getPlayer().getRace().getLetter());break;case PIB_RACE_LONG:vb.append(pibUser.getPlayer() == null ? Race.UNKNOWN.text : pibUser.getPlayer().getRace().toString());break;case PIB_RESULT:vb.append(pibUser.getPlayer() == null ? Result.UNKNOWN.letter : pibUser.getPlayer().getResult().getLetter());break;case PIB_RESULT_LONG:vb.append(pibUser.getPlayer() == null ? Result.UNKNOWN.text : pibUser.getPlayer().getResult().toString());break;case PIB_SPM:vb.append(Env.LANG.formatNumber(pibUser.getSpm(),2));break;case PIB_SQ:vb.append(pibUser.getSq());break;case PIB_SUPPLY_CAPPED:vb.append(Env.LANG.formatNumber(pibUser.getSupplyCappedPercent(),2));break;case PIB_START_DIR:vb.append(pibUser.getStartDirection());break;case PLAYER:if (swr.param <= playerUsers.length) vb.append(playerUsers[swr.param - 1].getFullName());break;case PLAYERS:vb.append(repProc.getPlayersString());break;case PLAYERS_GROUPED:vb.append(repProc.getPlayersGrouped());break;case RACE:if (swr.param <= playerUsers.length) vb.append(playerUsers[swr.param - 1].getPlayer() == null ? Race.UNKNOWN.letter : playerUsers[swr.param - 1].getPlayer().getRace().getLetter());break;case RACE_LONG:if (swr.param <= playerUsers.length) vb.append(playerUsers[swr.param - 1].getPlayer() == null ? Race.UNKNOWN.text : playerUsers[swr.param - 1].getPlayer().getRace().toString());break;case REGION:vb.append(replay.getInitData().getGameDescription().getRegion().toString());break;case REGION_CODE:vb.append(replay.getInitData().getGameDescription().getRegion().getCode());break;case REPLAY_COUNT:{final Path targetFolderWithSubfolders=lastFolderSepIdx > 0 ? targetFolder.resolve(sb.substring(0,lastFolderSepIdx)) : targetFolder;vb.append(RepUtils.countReplays(targetFolderWithSubfolders) + 1);for (int i=swr.param - vb.length(); i > 0; i--) vb.insert(0,'0');break;}case RESULT:if (swr.param <= playerUsers.length) vb.append(playerUsers[swr.param - 1].getPlayer() == null ? Result.UNKNOWN.letter : playerUsers[swr.param - 1].getPlayer().getResult().getLetter());break;case RESULT_LONG:if (swr.param <= playerUsers.length) vb.append(playerUsers[swr.param - 1].getPlayer() == null ? Result.UNKNOWN.text : playerUsers[swr.param - 1].getPlayer().getResult().toString());break;case SPM:if (swr.param <= playerUsers.length) vb.append(Env.LANG.formatNumber(playerUsers[swr.param - 1].getSpm(),2));break;case SQ:if (swr.param <= playerUsers.length) vb.append(playerUsers[swr.param - 1].getSq());break;case SUPPLY_CAPPED:if (swr.param <= playerUsers.length) vb.append(Env.LANG.formatNumber(playerUsers[swr.param - 1].getSupplyCappedPercent(),2));break;case START_DIR:if (swr.param <= playerUsers.length) vb.append(playerUsers[swr.param - 1].getStartDirection());break;case VERSION:vb.append(replay.getHeader().versionString(false));break;case VERSION_BUILD:vb.append(replay.getHeader().getBaseBuild());break;case VERSION_FULL:vb.append(replay.getHeader().versionString());break;case WINNERS:vb.append(repProc.getWinnersString());break;}if (swr.first < 0) sb.append(vb); else sb.append(vb,Math.min(vb.length(),swr.first),Math.min(vb.length(),swr.last));if (swr.symbol == Symbol.FOLDER_SEPARATOR) lastFolderSepIdx=sb.length();}  }
class C{  @Override public void snmpPduTrap(SnmpPeer peer,SnmpPduPacket pdu) throws IOException, SnmpStatusException {  if (peer != null) {    pdu.port=peer.getDestPort();    sendTrapPdu(peer.getDestAddr(),pdu);  } else {    pdu.port=getTrapPort().intValue();    sendTrapPdu(pdu);  }}  }
class C{  public void testWriteDecRefRegressionTest() throws Exception {  Character c='\u4300';  String test=c.toString();  sw=new StringWriter();  writer=renderKit.createResponseWriter(sw,"text/html","UTF-8");  writer.writeText(test,"value");  assertTrue("&#17152;","&#17152;".equals(sw.toString()));}  }
class C{  @SuppressWarnings("unchecked") private static OutlierResult runOnlineLOF(UpdatableDatabase db){  Relation<DoubleVector> rep=db.getRelation(TypeUtil.DOUBLE_VECTOR_FIELD);  OnlineLOF<DoubleVector> lof=new OnlineLOF<>(k,k,neighborhoodDistanceFunction,reachabilityDistanceFunction);  OutlierResult result=lof.run(db);  ArrayList<DoubleVector> insertions=new ArrayList<>();  NumberVector.Factory<DoubleVector> o=RelationUtil.getNumberVectorFactory(rep);  int dim=RelationUtil.dimensionality(rep);  Random random=new Random(seed);  for (int i=0; i < size; i++) {    DoubleVector obj=VectorUtil.randomVector(o,dim,random);    insertions.add(obj);  }  DBIDs deletions=db.insert(MultipleObjectsBundle.makeSimple(rep.getDataTypeInformation(),insertions));  db.delete(deletions);  return result;}  }
class C{  public static void closeQuiet(@Nullable Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    IOException ignored) {    }  }}  }
class C{  protected void drawForm(Canvas c,float x,float y,int index,Legend legend){  if (legend.getColors()[index] == ColorTemplate.COLOR_SKIP)   return;  mLegendFormPaint.setColor(legend.getColors()[index]);  float formsize=legend.getFormSize();  float half=formsize / 2f;switch (legend.getForm()) {case CIRCLE:    c.drawCircle(x + half,y,half,mLegendFormPaint);  break;case SQUARE:c.drawRect(x,y - half,x + formsize,y + half,mLegendFormPaint);break;case LINE:c.drawLine(x,y,x + formsize,y,mLegendFormPaint);break;}}  }
class C{  public CActionCircularLayout(final JFrame parent,final ZyGraph graph){  super("Circular Layout");  m_parent=Preconditions.checkNotNull(parent,"IE02812: parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE02813: graph argument can not be null");  putValue(Action.SMALL_ICON,new ImageIcon(CMain.class.getResource("data/laycirc_up.jpg")));  putValue(Action.SHORT_DESCRIPTION,"Circular Layout");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Vertex evaluateAnswerResponse(Vertex answer,Vertex state,Map<Vertex,Vertex> localVariables,Network network){  Vertex response=null;  if (answer != null) {    long processTime=this.maxStateProcess;    if (getBot().isDebugFiner()) {      processTime=processTime * 10;    }    log("Evaluating answer",Level.FINE,answer,state);    response=SelfInterpreter.getInterpreter().evaluateExpression(answer,localVariables,network,this.startTime,processTime,0);    localVariables.remove(network.createVertex(Primitive.RETURN));    log("Answer result",Level.FINE,response);    if ((response != null) && response.instanceOf(Primitive.LABEL)) {      response=response.mostConscious(Primitive.RESPONSE);    }    if ((response != null) && response.instanceOf(Primitive.FORMULA)) {      log("Answer is template formula",Level.FINE,response);      response=evaluateFormula(response,localVariables,network);      if (response == null) {        log("Template formula cannot be evaluated",Level.FINE,response);      }    } else     if ((response != null) && !response.hasData() && !response.instanceOf(Primitive.PARAGRAPH)) {      response=createSentenceText(response,network);    }    if ((response != null) && response.is(Primitive.NULL)) {      response=null;    }  }  return response;}  }
class C{  public static void d(String tag,String msg,Throwable tr){  println(DEBUG,tag,msg,tr);}  }
class C{  public Matrix3f transposeNew(){  Matrix3f ret=new Matrix3f(m00,m10,m20,m01,m11,m21,m02,m12,m22);  return ret;}  }
class C{  public void assign() throws Exception {  handleSetters(target);}  }
class C{  private JPanel createSearchPane(){  final JPanel panel=new JPanel();  panel.setLayout(new GridLayout(3,2));  panel.setBorder(new TitledBorder("Search for" + " ..."));  panel.add(new JLabel("Type"));  m_typeBox=new JComboBox<ISearcher>();  m_typeBox.addItem(new AsciiSearcher());  m_typeBox.addItem(new UnicodeSearcher());  m_typeBox.addItem(new HexSearcher());  m_typeBox.setSelectedIndex(0);  m_typeBox.addActionListener(new InternalTypeListener());  panel.add(m_typeBox);  panel.add(new JLabel("Value"));  m_inputField=new JFormattedTextField();  m_inputField.getDocument().addDocumentListener(new InternalTextListener());  panel.add(m_inputField);  m_otherLabel=new JLabel("Hex");  panel.add(m_otherLabel);  m_altField.setEnabled(false);  panel.add(m_altField);  panel.setSize(500,300);  return panel;}  }
class C{  public boolean isToplevel(){  EObject _eContainer=this.eContainer();  if ((_eContainer instanceof ExportDeclaration)) {    EObject _eContainer_1=this.eContainer();    EObject _eContainer_2=_eContainer_1.eContainer();    return (_eContainer_2 instanceof Script);  }  EObject _eContainer_3=this.eContainer();  return (_eContainer_3 instanceof Script);}  }
class C{  private void forgetBuildByName(final TFSTeamProjectCollection connection,final String buildName,final String teamProject){  Check.notNull(connection,"connection");  Check.notNullOrEmpty(buildName,"buildName");  Check.notNullOrEmpty(teamProject,"teamProject");  BuildStatusCache cache=BuildStatusCache.load(connection);  final List<Integer> cachedBuilds=cache.getBuilds();  if (cachedBuilds.size() == 0) {    getDisplay().printErrorLine(Messages.getString("CommandReconcile.NoWatchedCheckins"));    setExitCode(ExitCode.FAILURE);    return;  }  final IBuildQueryResult result=queryBuilds(connection,buildName,teamProject,null);  if (result == null || result.getBuilds() == null || result.getBuilds().length == 0) {    getDisplay().printErrorLine(MessageFormat.format(Messages.getString("CommandReconcile.NoBuildsMatchingNameAndTeamProjectFormat"),buildName,teamProject));    setExitCode(ExitCode.FAILURE);    return;  }  final IBuildDetail[] details=result.getBuilds();  final int[] queryIDs=new int[cachedBuilds.size()];  for (int i=0; i < cachedBuilds.size(); i++) {    queryIDs[i]=cachedBuilds.get(i);  }  final IQueuedBuild[] queuedBuilds=connection.getBuildServer().getQueuedBuild(queryIDs,QueryOptions.NONE);  if (queuedBuilds == null || queuedBuilds.length == 0) {    getDisplay().printErrorLine(Messages.getString("CommandReconcile.NoBuildsForWatchedCheckins"));    setExitCode(ExitCode.FAILURE);    return;  }  final List<IQueuedBuild> forgetQueuedBuilds=new ArrayList<IQueuedBuild>();  for (  final IBuildDetail detail : details) {    if (detail == null) {      continue;    }    for (    final IQueuedBuild queuedBuild : queuedBuilds) {      if (queuedBuild == null) {        continue;      }      if (queuedBuild.getBuild() != null && detailsEqual(queuedBuild.getBuild(),detail)) {        forgetQueuedBuilds.add(queuedBuild);        break;      }    }  }  if (forgetQueuedBuilds.size() > 0) {    cache=BuildStatusCache.load(connection);    for (    final IQueuedBuild queuedBuild : forgetQueuedBuilds) {      getDisplay().printLine(MessageFormat.format(Messages.getString("CommandReconcile.ForgettingBuildNameFormat"),queuedBuild.getBuild().getBuildNumber()));      cache.removeBuild(queuedBuild.getID());    }    cache.save(connection);  }}  }
class C{  public CylinderPortrayal3D(Image image){  this(image,1f);}  }
class C{  public int compareTo(ExtensionDescription desc){  String ns1=namespace.getUri();  if (ns1 == null) {    ns1="";  }  String ns2=desc.namespace.getUri();  if (ns2 == null) {    ns2="";  }  int nscomp=ns1.compareTo(ns2);  if (nscomp != 0) {    return nscomp;  }  return localName.compareTo(desc.localName);}  }
class C{  final public boolean isScaleOut(){  return true;}  }
class C{  public void initializeView(View biometricUnlockView){  Log.d(TAG,"initializeView()");  mFaceUnlockView=biometricUnlockView;}  }
class C{  private static Schema loadSamlSchema(){  try {    Schema samlSchema=Util.loadXmlSchemaFromResource(SamlTokenImpl.class,SAML_SCHEMA_FILENAME);    return samlSchema;  } catch (  IllegalArgumentException e) {    LoggerFactory.getLogger(SamlTokenImpl.class).error(String.format("Schema resource `%s' is missing.",SAML_SCHEMA_FILENAME),e);    throw new DeploymentError(String.format("Schema resource `%s' is missing.",SAML_SCHEMA_FILENAME));  }catch (  SAXException e) {    LoggerFactory.getLogger(SamlTokenImpl.class).error(ERR_LOADNIG_SAML_SCHEMA,e);    throw new DeploymentError(ERR_LOADNIG_SAML_SCHEMA,e);  }}  }
class C{  private void insertIndex(Node<E> z,int level){  HeadIndex<E> h=head;  int max=h.level;  if (level <= max) {    Index<E> idx=null;    for (int i=1; i <= level; ++i)     idx=new Index<E>(z,idx,null);    addIndex(idx,h,level);  } else {    level=max + 1;    Index<E>[] idxs=(Index<E>[])new Index[level + 1];    Index<E> idx=null;    for (int i=1; i <= level; ++i)     idxs[i]=idx=new Index<E>(z,idx,null);    HeadIndex<E> oldh;    int k;    for (; ; ) {      oldh=head;      int oldLevel=oldh.level;      if (level <= oldLevel) {        k=level;        break;      }      HeadIndex<E> newh=oldh;      Node<E> oldbase=oldh.node;      for (int j=oldLevel + 1; j <= level; ++j)       newh=new HeadIndex<E>(oldbase,newh,idxs[j],j);      if (casHead(oldh,newh)) {        k=oldLevel;        break;      }    }    addIndex(idxs[k],oldh,k);  }}  }
class C{  public static void updateQuests(final Player player){  final EntityManager entityMgr=SingletonRepository.getEntityManager();  migrateSumTimedQuestSlot(player,"Valo_concoct_potion","valo_concoct_potion");  for (  final String questSlot : player.getQuests()) {    if (player.hasQuest(questSlot)) {      final String itemString=player.getQuest(questSlot);      final String[] parts=itemString.split(";");      final StringBuilder buffer=new StringBuilder();      boolean first=true;      for (int i=0; i < parts.length; ++i) {        final String oldName=parts[i];        String newName=UpdateConverter.updateItemName(oldName);        if (!newName.equals(oldName)) {          if (!entityMgr.isCreature(newName) && !entityMgr.isItem(newName)) {            newName=oldName;          }        }        if (first) {          buffer.append(newName);          first=false;        } else {          buffer.append(';');          buffer.append(newName);        }      }      player.setQuest(questSlot,buffer.toString());    }  }  fixKillQuestsSlots(player);  fixDailyMonsterQuestSlot(player);  fixMazeQuestSlot(player);}  }
class C{  @Override public boolean isReadOnly(ELContext context,Object base,Object property){  Util.notNull("context",context);  return true;}  }
class C{  public EmbeddedContainerArtifactResolver(ArtifactResolver artifactResolver,ArtifactRepository localRepository,List<ArtifactRepository> repositories,ArtifactFactory artifactFactory){  this.artifactResolver=artifactResolver;  this.localRepository=localRepository;  this.repositories=repositories;  this.artifactFactory=artifactFactory;  List<Dependency> jetty4xDependencies=new ArrayList<Dependency>();  jetty4xDependencies.add(new Dependency("ant","ant","1.6.4"));  jetty4xDependencies.add(new Dependency("jetty","org.mortbay.jetty","4.2.27"));  jetty4xDependencies.add(new Dependency("javax.servlet","servlet-api","2.4"));  jetty4xDependencies.add(new Dependency("javax.servlet","jsp-api","2.0"));  jetty4xDependencies.add(new Dependency("tomcat","jasper-compiler","4.1.30"));  jetty4xDependencies.add(new Dependency("tomcat","jasper-runtime","4.1.30"));  this.containerDependencies.put("jetty4x",jetty4xDependencies);  List<Dependency> jetty5xDependencies=new ArrayList<Dependency>();  jetty5xDependencies.add(new Dependency("jetty","org.mortbay.jetty","5.1.12"));  jetty5xDependencies.add(new Dependency("javax.servlet","servlet-api","2.4"));  jetty5xDependencies.add(new Dependency("javax.servlet","jsp-api","2.0"));  jetty5xDependencies.add(new Dependency("ant","ant","1.6.4"));  jetty5xDependencies.add(new Dependency("xerces","xercesImpl","2.6.2"));  jetty5xDependencies.add(new Dependency("xerces","xmlParserAPIs","2.6.2"));  jetty5xDependencies.add(new Dependency("tomcat","jasper-compiler","5.5.12"));  jetty5xDependencies.add(new Dependency("tomcat","jasper-runtime","5.5.12"));  jetty5xDependencies.add(new Dependency("commons-el","commons-el","1.0"));  jetty5xDependencies.add(new Dependency("commons-logging","commons-logging","1.0.4"));  this.containerDependencies.put("jetty5x",jetty5xDependencies);  List<Dependency> jetty6xDependencies=new ArrayList<Dependency>();  jetty6xDependencies.add(new Dependency("org.mortbay.jetty","jsp-api-2.0","6.1.26"));  jetty6xDependencies.add(new Dependency("org.mortbay.jetty","servlet-api-2.5","6.1.14"));  jetty6xDependencies.add(new Dependency("org.mortbay.jetty","jetty","6.1.26"));  jetty6xDependencies.add(new Dependency("org.mortbay.jetty","jetty-util","6.1.26"));  jetty6xDependencies.add(new Dependency("org.mortbay.jetty","jetty-naming","6.1.26"));  jetty6xDependencies.add(new Dependency("org.mortbay.jetty","jetty-plus","6.1.26"));  jetty6xDependencies.add(new Dependency("ant","ant","1.6.5"));  jetty6xDependencies.add(new Dependency("commons-el","commons-el","1.0"));  jetty6xDependencies.add(new Dependency("tomcat","jasper-compiler","5.5.15"));  jetty6xDependencies.add(new Dependency("tomcat","jasper-runtime","5.5.15"));  jetty6xDependencies.add(new Dependency("tomcat","jasper-compiler-jdt","5.5.15"));  jetty6xDependencies.add(new Dependency("javax.mail","mail","1.4"));  jetty6xDependencies.add(new Dependency("javax.activation","activation","1.1"));  jetty6xDependencies.add(new Dependency("geronimo-spec","geronimo-spec-jta","1.0.1B-rc4"));  jetty6xDependencies.add(new Dependency("xerces","xercesImpl","2.6.2"));  jetty6xDependencies.add(new Dependency("xerces","xmlParserAPIs","2.6.2"));  jetty6xDependencies.add(new Dependency("commons-logging","commons-logging","1.0.4"));  jetty6xDependencies.add(new Dependency("log4j","log4j","1.2.14"));  this.containerDependencies.put("jetty6x",jetty6xDependencies);  List<Dependency> jetty7xDependencies=new ArrayList<Dependency>();  jetty7xDependencies.add(new Dependency("javax.servlet","servlet-api","2.5"));  jetty7xDependencies.add(new Dependency("org.eclipse.jdt.core.compiler","ecj","3.5.1"));  jetty7xDependencies.add(new Dependency("org.eclipse.jetty","jetty-continuation","7.6.17.v20150415"));  jetty7xDependencies.add(new Dependency("org.eclipse.jetty","jetty-http","7.6.17.v20150415"));  jetty7xDependencies.add(new Dependency("org.eclipse.jetty","jetty-io","7.6.17.v20150415"));  jetty7xDependencies.add(new Dependency("org.eclipse.jetty","jetty-jsp","7.6.17.v20150415"));  jetty7xDependencies.add(new Dependency("org.eclipse.jetty","jetty-util","7.6.17.v20150415"));  jetty7xDependencies.add(new Dependency("org.eclipse.jetty","jetty-security","7.6.17.v20150415"));  jetty7xDependencies.add(new Dependency("org.eclipse.jetty","jetty-server","7.6.17.v20150415"));  jetty7xDependencies.add(new Dependency("org.eclipse.jetty","jetty-servlet","7.6.17.v20150415"));  jetty7xDependencies.add(new Dependency("org.eclipse.jetty","jetty-webapp","7.6.17.v20150415"));  jetty7xDependencies.add(new Dependency("org.eclipse.jetty","jetty-xml","7.6.17.v20150415"));  jetty7xDependencies.add(new Dependency("org.mortbay.jetty","jsp-api-2.1-glassfish","2.1.v20100127"));  jetty7xDependencies.add(new Dependency("org.mortbay.jetty","jsp-2.1-glassfish","2.1.v20100127"));  this.containerDependencies.put("jetty7x",jetty7xDependencies);  List<Dependency> jetty8xDependencies=new ArrayList<Dependency>();  jetty8xDependencies.add(new Dependency("org.mortbay.jetty","servlet-api","3.0.20100224"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-annotations","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-continuation","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-http","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-io","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-jndi","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-plus","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-util","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-security","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-server","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-servlet","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-webapp","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty","jetty-xml","8.1.17.v20150415"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty.orbit","org.objectweb.asm","3.1.0.v200803061910"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty.orbit","javax.mail.glassfish","1.4.1.v201005082020"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty.orbit","javax.activation","1.1.0.v201105071233"));  jetty8xDependencies.add(new Dependency("org.eclipse.jetty.orbit","javax.annotation","1.1.0.v201108011116"));  jetty8xDependencies.add(new Dependency("javax.el","el-api","2.2"));  jetty8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jsp-api","7.0.55"));  jetty8xDependencies.add(new Dependency("org.glassfish.web","jsp-impl","2.2.1"));  this.containerDependencies.put("jetty8x",jetty8xDependencies);  List<Dependency> jetty9xDependencies=new ArrayList<Dependency>();  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-annotations","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-continuation","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-http","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-io","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-jndi","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-plus","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-util","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-security","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-server","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-servlet","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-webapp","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","jetty-xml","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("javax.servlet","javax.servlet-api","3.1.0"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty.toolchain","jetty-schemas","3.1"));  jetty9xDependencies.add(new Dependency("javax.enterprise","cdi-api","1.2"));  jetty9xDependencies.add(new Dependency("org.ow2.asm","asm","5.0.1"));  jetty9xDependencies.add(new Dependency("org.ow2.asm","asm-commons","5.0.1"));  jetty9xDependencies.add(new Dependency("javax.annotation","javax.annotation-api","1.2"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty.orbit","javax.mail.glassfish","1.4.1.v201005082020"));  jetty9xDependencies.add(new Dependency("javax.transaction","javax.transaction-api","1.2"));  jetty9xDependencies.add(new Dependency("org.eclipse.jdt.core.compiler","ecj","4.4.2"));  jetty9xDependencies.add(new Dependency("org.eclipse.jetty","apache-jsp","9.3.12.v20160915"));  jetty9xDependencies.add(new Dependency("org.mortbay.jasper","apache-el","8.0.27"));  jetty9xDependencies.add(new Dependency("org.mortbay.jasper","apache-jsp","8.0.27"));  this.containerDependencies.put("jetty9x",jetty9xDependencies);  List<Dependency> tomcat6xDependencies=new ArrayList<Dependency>();  tomcat6xDependencies.add(new Dependency("org.apache.tomcat","servlet-api","6.0.44"));  tomcat6xDependencies.add(new Dependency("org.apache.tomcat","annotations-api","6.0.44"));  tomcat6xDependencies.add(new Dependency("org.apache.tomcat","el-api","6.0.44"));  tomcat6xDependencies.add(new Dependency("org.apache.tomcat","jsp-api","6.0.44"));  tomcat6xDependencies.add(new Dependency("org.apache.tomcat","juli","6.0.44"));  tomcat6xDependencies.add(new Dependency("org.apache.tomcat","catalina","6.0.44"));  tomcat6xDependencies.add(new Dependency("org.apache.tomcat","coyote","6.0.44"));  tomcat6xDependencies.add(new Dependency("org.apache.tomcat","jasper","6.0.44"));  tomcat6xDependencies.add(new Dependency("org.apache.tomcat","jasper-el","6.0.44"));  tomcat6xDependencies.add(new Dependency("org.eclipse.jdt.core.compiler","ecj","4.3.1"));  this.containerDependencies.put("tomcat6x",tomcat6xDependencies);  List<Dependency> tomcat7xDependencies=new ArrayList<Dependency>();  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-servlet-api","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-annotations-api","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-el-api","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jsp-api","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-juli","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-api","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-util","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-catalina","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-coyote","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jasper","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jasper-el","7.0.70"));  tomcat7xDependencies.add(new Dependency("org.eclipse.jdt.core.compiler","ecj","4.4.2"));  this.containerDependencies.put("tomcat7x",tomcat7xDependencies);  List<Dependency> tomcat8xDependencies=new ArrayList<Dependency>();  tomcat8xDependencies.add(new Dependency("javax.security.auth.message","javax.security.auth.message-api","1.1"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-servlet-api","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-annotations-api","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-el-api","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jsp-api","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-juli","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-api","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jni","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-util","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-util-scan","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-catalina","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-coyote","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jasper","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jasper-el","8.5.6"));  tomcat8xDependencies.add(new Dependency("org.eclipse.jdt.core.compiler","ecj","4.5.1"));  this.containerDependencies.put("tomcat8x",tomcat8xDependencies);  List<Dependency> tomcat9xDependencies=new ArrayList<Dependency>();  tomcat9xDependencies.add(new Dependency("javax.security.auth.message","javax.security.auth.message-api","1.1"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-servlet-api","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-annotations-api","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-el-api","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jsp-api","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-juli","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-api","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jni","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-util","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-util-scan","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-catalina","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-coyote","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jasper","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.apache.tomcat","tomcat-jasper-el","9.0.0.M11"));  tomcat9xDependencies.add(new Dependency("org.eclipse.jdt.core.compiler","ecj","4.5.1"));  this.containerDependencies.put("tomcat9x",tomcat9xDependencies);}  }
class C{  public RDFHandlerException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public ModifierSlot(final String enumName,final int enumId,final String typeName){  super(enumName,enumId);  this.typeName=typeName;}  }
class C{  void create(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState) throws LoginException {  String klassName=entry.getLoginModuleName();  if (klass == null) {    try {      klass=Class.forName(klassName,false,contextClassLoader);    } catch (    ClassNotFoundException ex) {      throw (LoginException)new LoginException("auth.39 " + klassName).initCause(ex);    }  }  if (module == null) {    try {      module=(LoginModule)klass.newInstance();    } catch (    IllegalAccessException ex) {      throw (LoginException)new LoginException("auth.3A " + klassName).initCause(ex);    }catch (    InstantiationException ex) {      throw (LoginException)new LoginException("auth.3A" + klassName).initCause(ex);    }    module.initialize(subject,callbackHandler,sharedState,entry.getOptions());  }}  }
class C{  AdaptationRegistry(Map<String,ElementKey<?,?>> adaptations,Map<QName,AttributeKey<?>> attributes,Map<QName,ElementKey<?,?>> elements){  this.adaptations=adaptations;  this.attributes=attributes;  this.elements=elements;}  }
class C{  public SSLSocket createSocket() throws IOException {  return (SSLSocket)sslSocketFactory.createSocket(host,port);}  }
class C{  public static int size(JTabbedPane self){  return self.getTabCount();}  }
class C{  public OptimalPrimitives(){}  }
class C{  public FeatureVectorBuffer(int[] fIdxArray,double[] fValueArray){  assert fIdxArray.length == fValueArray.length;  idxList=new ArrayList<Integer>(Ints.asList(fIdxArray));  valList=new ArrayList<Float>();  for (int i=0; i < fIdxArray.length; i++)   valList.add((float)fValueArray[i]);}  }
class C{  public DSignCsr(JFrame parent,PKCS10CertificationRequest pkcs10Csr,File csrFile,PrivateKey signPrivateKey,KeyPairType signKeyPairType,X509Certificate verificationCertificate,Provider provider) throws CryptoException {  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.pkcs10Csr=pkcs10Csr;  this.csrFile=csrFile;  this.signPrivateKey=signPrivateKey;  this.signKeyPairType=signKeyPairType;  this.verificationCertificate=verificationCertificate;  this.provider=provider;  setTitle(res.getString("DSignCsr.Title"));  initComponents();}  }
class C{  private Type typeForPool(Object o){  if (o instanceof Integer)   return syms.intType;  if (o instanceof Float)   return syms.floatType;  if (o instanceof String)   return syms.stringType;  if (o instanceof Long)   return syms.longType;  if (o instanceof Double)   return syms.doubleType;  if (o instanceof ClassSymbol)   return syms.classType;  if (o instanceof Pool.MethodHandle)   return syms.methodHandleType;  if (o instanceof UniqueType)   return typeForPool(((UniqueType)o).type);  if (o instanceof Type) {    Type ty=((Type)o).unannotatedType();    if (ty instanceof Type.ArrayType)     return syms.classType;    if (ty instanceof Type.MethodType)     return syms.methodTypeType;  }  throw new AssertionError("Invalid type of constant pool entry: " + o.getClass());}  }
class C{  public boolean isAutoCapitalized(){  return mAutoCapitalized;}  }
class C{  public void updateComponent(int row){  updateComponent(row,row);}  }
class C{  void expand(File dir,String[] files,boolean isUpdate){  if (files == null) {    return;  }  for (int i=0; i < files.length; i++) {    File f;    if (dir == null) {      f=new File(files[i]);    } else {      f=new File(dir,files[i]);    }    if (f.isFile()) {      if (entries.add(f)) {        if (isUpdate)         entryMap.put(entryName(f.getPath()),f);      }    } else     if (f.isDirectory()) {      if (entries.add(f)) {        if (isUpdate) {          String dirPath=f.getPath();          dirPath=(dirPath.endsWith(File.separator)) ? dirPath : (dirPath + File.separator);          entryMap.put(entryName(dirPath),f);        }        expand(f,f.list(),isUpdate);      }    } else {      error(formatMsg("error.nosuch.fileordir",String.valueOf(f)));      ok=false;    }  }}  }
class C{  public Setup(String s){  String[] parts;  String[] options;  String cname;  parts=s.split("\t");  if (parts.length != 2)   return;  m_File=new File(parts[0]);  try {    options=Utils.splitOptions(parts[1]);    cname=options[0];    options[0]="";    m_Handler=Utils.forName(Object.class,cname,options);  } catch (  Exception e) {    return;  }}  }
class C{  public final TestSuiteBuilder includeAllPackagesUnderHere(){  StackTraceElement[] stackTraceElements=Thread.currentThread().getStackTrace();  String callingClassName=null;  String thisClassName=TestSuiteBuilder.class.getName();  for (int i=0; i < stackTraceElements.length; i++) {    StackTraceElement element=stackTraceElements[i];    if (thisClassName.equals(element.getClassName()) && "includeAllPackagesUnderHere".equals(element.getMethodName())) {      callingClassName=stackTraceElements[i + 1].getClassName();      break;    }  }  String packageName=parsePackageNameFromClassName(callingClassName);  return includePackages(packageName);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isGenerated(Class<?> c){  return proxyMap.containsKey(c);}  }
class C{  public static <T>T[] createFrom(Collection<? extends T> list,Class<T> componentType){  if (list == null) {    return create(componentType,0);  }  return list.toArray(create(componentType,list.size()));}  }
class C{  public byte[] readBytes(int howmany,boolean allowless) throws EOFException, FormatException {  return inputReader.readBytes(howmany,allowless);}  }
class C{  public static double vectorDistance(double[] vec1,double[] vec2,double power){  double oneOverPower=(power == 0 || power == 1.0 || power == 2.0) ? Double.NaN : 1.0 / power;  return vectorDistance(vec1,vec2,power,oneOverPower);}  }
class C{  @Override public void onEnterAnimationFinished(){  mIntroView.setVisibility(INVISIBLE);  mProgressDownloadView.setVisibility(VISIBLE);  mProgressDownloadView.setProgress(mProgressDownloadView.getProgress());  isAnimationFinished=true;}  }
class C{  public static SystemSettings empty(){  return EMPTY;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.652 -0500",hash_original_method="30957576898B0AE27F5837919E36AECD",hash_generated_method="27BC3CA23290C294456ECA80A96CE2A3") public void injectInstrumentation(Instrumentation instrumentation){  mInstrumentation=instrumentation;}  }
class C{  private SamlTokenSpec createTokenSpec(String relyingPartyUrl,PrincipalId principalId,String identityFormat,AuthnMethod authnMethod,Session session,String recipient,String audience){  Validate.notEmpty(relyingPartyUrl,"relyingPartyUrl");  Validate.notNull(principalId,"principalId");  Validate.notNull(session,"session");  log.debug("create token spec for principal " + principalId);  log.debug("relying party url " + relyingPartyUrl + ", identityFormat "+ identityFormat);  log.debug("authn method " + authnMethod + " session "+ session);  log.debug("inResponseTo " + inResponseTo + " recipient "+ recipient);  log.debug("audience " + audience);  Calendar calendar=new GregorianCalendar();  Date startTime=this.reguestStartTime;  if (startTime == null) {    int toleranceSec=Shared.NOTBEFORE_ADJUSTMENT_SECONDS;    calendar.add(Calendar.SECOND,-(toleranceSec / 2));    startTime=calendar.getTime();  }  calendar=new GregorianCalendar();  Date authnTime=calendar.getTime();  calendar=new GregorianCalendar();  calendar.add(Calendar.MINUTE,Shared.TOKEN_LIFETIME_MINUTES);  Date endTime=calendar.getTime();  TimePeriod lifespan=new TimePeriod(startTime,endTime);  Confirmation confirmation=new Confirmation(inResponseTo,recipient);  Collection<String> attributeList=Shared.buildTokenAttributeList(identityFormat);  String participantSessionId=null;  try {    session.getLock().lock();    participantSessionId=session.ensureSessionParticipant(relyingPartyUrl);    this.sessionManager.update(session);  } catch (  Exception e) {    participantSessionId=null;  } finally {    session.getLock().unlock();  }  if (participantSessionId == null) {    log.debug("WARNING: unable to create an SSO session");  }  SamlTokenSpec.Builder builder=new SamlTokenSpec.Builder(lifespan,confirmation,new SamlTokenSpec.AuthenticationData(principalId,authnTime,authnMethod,identityFormat,participantSessionId,session.getExpireDate()),attributeList);  builder.addAudience(audience);  if (this.isRenewable) {    SamlTokenSpec.RenewSpec renewSpec=new SamlTokenSpec.RenewSpec(true);    builder.setRenewSpec(renewSpec);  }  if (this.isDelegable) {    SamlTokenSpec.DelegationSpec delegationSpec=new SamlTokenSpec.DelegationSpec(null,true);    builder.setDelegationSpec(delegationSpec);  }  SamlTokenSpec spec=builder.createSpec();  return spec;}  }
class C{  protected void displaySaveUploadErrorDialog(String typeId,String repositoryName,String repositoryURL){  SwingTools.showVerySimpleErrorMessage("configurable_controller_upload_error_server",typeId,repositoryName,repositoryURL);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster features;  WhiteboxRaster dataImage;  WhiteboxRaster output;  String featureHeader=null;  String dataHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  int i;  double featuresNoData=-32768;  double dataNoData=-32768;  double distThreshold=0;  boolean blnSelect=true;  int featureID;  String instructions=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      if (args[i].toLowerCase().contains("isolate features from")) {        blnSelect=true;      } else       if (args[i].toLowerCase().contains("remove features from")) {        blnSelect=false;      }    } else     if (i == 1) {      featureHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("intersect")) {        instructions="intersect";      } else       if (args[i].toLowerCase().contains("are completely within")) {        instructions="within";      } else       if (args[i].toLowerCase().contains("are within a distance of")) {        instructions="distance";      } else       if (args[i].toLowerCase().contains("have their centroid in")) {        instructions="centroid";      }    } else     if (i == 3) {      dataHeader=args[i];    } else     if (i == 4) {      outputHeader=args[i];    } else     if (i == 5) {      if (!args[i].equals("not specified")) {        distThreshold=Double.parseDouble(args[i]);      }    }  }  if ((featureHeader == null) || (dataHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    features=new WhiteboxRaster(featureHeader,"r");    int rows=features.getNumberRows();    int cols=features.getNumberColumns();    featuresNoData=features.getNoDataValue();    int minFeatureID=(int)features.getMinimumValue();    int numFeatures=(int)(features.getMaximumValue() - minFeatureID);    dataImage=new WhiteboxRaster(dataHeader,"r");    if (dataImage.getNumberColumns() != cols || dataImage.getNumberRows() != rows) {      showFeedback("The input files must have the same dimensions, i.e. number of" + " rows and columns.");      return;    }    dataNoData=dataImage.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,featuresNoData);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (instructions.equals("intersect")) {      boolean[] intersect=new boolean[numFeatures + 1];      double[] featuresData=null;      double[] data=null;      updateProgress("Loop 1 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (featureID != 0 && data[col] > 0 && data[col] != dataNoData) {              intersect[featureID - minFeatureID]=true;            }          } else {            output.setValue(row,col,featuresNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 1 of 2:",progress);      }      updateProgress("Loop 2 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (intersect[featureID - minFeatureID] == blnSelect) {              output.setValue(row,col,featureID);            } else {              output.setValue(row,col,0);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 2:",progress);      }    } else     if (instructions.equals("within")) {      boolean[] within=new boolean[numFeatures + 1];      double[] dataFeature=new double[numFeatures + 1];      for (i=0; i <= numFeatures; i++) {        within[i]=true;        dataFeature[i]=-9999999;      }      double[] featuresData=null;      double[] data=null;      updateProgress("Loop 1 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (featureID != 0) {              if (data[col] != 0 && data[col] != dataNoData && dataFeature[featureID - minFeatureID] != -9999999) {                if (within[featureID - minFeatureID] && data[col] != dataFeature[featureID - minFeatureID]) {                  within[featureID - minFeatureID]=false;                }              } else               if (data[col] == 0) {                within[featureID - minFeatureID]=false;              } else {                dataFeature[featureID - minFeatureID]=data[col];              }            }          } else {            output.setValue(row,col,featuresNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 1 of 2:",progress);      }      updateProgress("Loop 2 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (within[featureID - minFeatureID] == blnSelect) {              output.setValue(row,col,featureID);            } else {              output.setValue(row,col,0);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 2:",progress);      }    } else     if (instructions.equals("distance")) {      if (distThreshold <= 0) {        showFeedback("The distance threshold has not been set to an appropriate value.");        return;      }      double z, z2, zMin;      double h=0;      int whichCell;      int x, y;      double infVal=9999999;      int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};      int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};      int[] Gx=new int[]{1,1,0,1,1,1,0,1};      int[] Gy=new int[]{0,1,1,1,0,1,1,1};      double gridRes=(features.getCellSizeX() + features.getCellSizeY()) / 2;      WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,0);      Rx.isTemporaryFile=true;      WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,0);      Ry.isTemporaryFile=true;      WhiteboxRaster bufferedData=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,infVal);      bufferedData.isTemporaryFile=true;      double[] data;      updateProgress("Buffering features:",0);      for (row=0; row < rows; row++) {        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != 0) {            bufferedData.setValue(row,col,0);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Buffering features:",progress);      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=bufferedData.getValue(row,col);          if (z != 0) {            zMin=infVal;            whichCell=-1;            for (i=0; i <= 3; i++) {              x=col + dX[i];              y=row + dY[i];              z2=bufferedData.getValue(y,x);              if (z2 != dataNoData) {switch (i) {case 0:                  h=2 * Rx.getValue(y,x) + 1;                break;case 1:              h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);            break;case 2:          h=2 * Ry.getValue(y,x) + 1;        break;case 3:      h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);    break;}z2+=h;if (z2 < zMin) {  zMin=z2;  whichCell=i;}}}if (zMin < z) {bufferedData.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Buffering features:",progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=bufferedData.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=bufferedData.getValue(y,x);if (z2 != dataNoData) {switch (i) {case 5:  h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {bufferedData.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - 1 - row) / (rows - 1));updateProgress("Buffering features:",progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=bufferedData.getValue(row,col);if (Math.sqrt(z) * gridRes < distThreshold) {bufferedData.setValue(row,col,1);} else {bufferedData.setValue(row,col,0);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Buffering features:",progress);}Rx.close();Ry.close();bufferedData.flush();boolean[] intersect=new boolean[numFeatures + 1];double[] featuresData=null;updateProgress("Loop 1 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=bufferedData.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (featureID != 0 && data[col] > 0 && data[col] != dataNoData) {intersect[featureID - minFeatureID]=true;}} else {output.setValue(row,col,featuresNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",progress);}updateProgress("Loop 2 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=bufferedData.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (intersect[featureID - minFeatureID] == blnSelect) {output.setValue(row,col,featureID);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",progress);}bufferedData.close();} else if (instructions.equals("centroid")) {long[] totalColumns=new long[numFeatures + 1];long[] totalRows=new long[numFeatures + 1];long[] totalN=new long[numFeatures + 1];updateProgress("Loop 1 of 2:",0);double[] featuresData=null;for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] > 0) {i=(int)featuresData[col] - minFeatureID;totalColumns[i]+=col;totalRows[i]+=row;totalN[i]++;}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",progress);}double z;boolean[] intersect=new boolean[numFeatures + 1];double[] data=null;for (i=0; i <= numFeatures; i++) {if (totalN[i] > 0) {col=(int)(totalColumns[i] / totalN[i]);row=(int)(totalRows[i] / totalN[i]);z=dataImage.getValue(row,col);if (z != 0 && z != dataNoData) {intersect[i]=true;}}}updateProgress("Loop 2 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=dataImage.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (intersect[featureID - minFeatureID] == blnSelect) {output.setValue(row,col,featureID);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",progress);}} else {showFeedback("Instructions not recognized.");return;}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());features.close();dataImage.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public String paramString(){  String typeStr;switch (id) {case ACTION_PERFORMED:    typeStr="ACTION_PERFORMED";  break;default :typeStr="unknown type";}return typeStr + ",cmd=" + actionCommand+ ",when="+ when+ ",modifiers="+ KeyEvent.getKeyModifiersText(modifiers);}  }
class C{  public void testIntValuePositive1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3};  int resInt=1496144643;  int aNumber=new BigInteger(aBytes).intValue();  assertTrue(aNumber == resInt);}  }
class C{  public void testBug41269() throws Exception {  createProcedure("bug41269","(in param1 int, out result varchar(197)) BEGIN select 1, ''; END");  ResultSet procMD=this.conn.getMetaData().getProcedureColumns(null,null,"bug41269","%");  assertTrue(procMD.next());  assertEquals("Int param length",10,procMD.getInt(9));  assertTrue(procMD.next());  assertEquals("String param length",197,procMD.getInt(9));  assertFalse(procMD.next());}  }
class C{  public JobDefinitionCreateRequest createJobDefinitionCreateRequestFromActivitiXml(String activitiXml){  List<Parameter> parameters=new ArrayList<>();  Parameter parameter=new Parameter(AbstractServiceTest.ATTRIBUTE_NAME_1_MIXED_CASE,AbstractServiceTest.ATTRIBUTE_NAME_1_MIXED_CASE);  parameters.add(parameter);  return createJobDefinitionCreateRequest(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD,AbstractServiceTest.TEST_ACTIVITI_JOB_NAME,AbstractServiceTest.JOB_DESCRIPTION,activitiXml,parameters);}  }
class C{  public synchronized Enumeration<AclEntry> entries(){  return new AclEnumerator(this,allowedUsersTable,allowedGroupsTable,deniedUsersTable,deniedGroupsTable);}  }
class C{  public int compareTo(CharSequence seq){  return Order.LEXICAL.compare(this,seq);}  }
class C{  public void testDoConfigureCreatesFiles() throws Exception {  configuration.doConfigure(container);  assertTrue(fileHandler.exists(DOMAIN_HOME + "/config"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/config/config.xml"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/security"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/security/DefaultAuthenticatorInit.ldift"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/security/SerializedSystemIni.dat"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/autodeploy/cargocpc.war"));}  }
class C{  public void add(PrintStream p,boolean timestamp,String prefix){  if (m_Streams.contains(p))   remove(p);  if (prefix == null)   prefix="";  m_Streams.add(p);  m_Timestamps.add(new Boolean(timestamp));  m_Prefixes.add(prefix);}  }
class C{  public static synchronized void useSystemTime(){  DateTimeUtils.setCurrentMillisSystem();}  }
class C{  public boolean supportsSchemasInTableDefinitions() throws SQLException {  return false;}  }
class C{  private void populateDbOptions(String dbProduct,Element dbOptionsElement,Map<String,String> dbOptionsMap){  NodeList dbOptions=dbOptionsElement.getElementsByTagName("dbOption");  for (int i=0; i < dbOptions.getLength(); i++) {    Element dbOption=(Element)dbOptions.item(i);    if (!dbProduct.equalsIgnoreCase(dbOption.getAttribute("db"))) {      continue;    }    dbOptionsMap.put(dbOption.getAttribute("name"),dbOption.getAttribute("value"));  }}  }
class C{  public boolean write(IOFSwitch sw,OFMessage msg,boolean flush) throws IOException {  if (!msgTypesToCache.contains(msg.getType())) {    sw.write(msg);    if (flush) {      sw.flush();    }    return true;  }  DamperEntry entry=new DamperEntry(msg,sw);  if (cache.update(entry)) {    return false;  } else {    sw.write(msg);    if (flush) {      sw.flush();    }    return true;  }}  }
class C{  public boolean isServerHealthy(){  return getNetworkConnectivityTroubleshootingActions().isEmpty() && getConfigurationTroubleshootingActions().isEmpty();}  }
class C{  public List<String> consolidate(int days) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  params.put("days",String.valueOf(days));  String response=HttpClient.getInstance().post(String.format("merchant/%s/auto_consolidate",identifier),params);  JsonObject topElem=parseResponse(response);  List<String> addresses=new ArrayList<String>();  for (  JsonElement jAddr : topElem.get("consolidated").getAsJsonArray()) {    addresses.add(jAddr.getAsString());  }  return addresses;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:58.054 -0400",hash_original_method="2582EB9761FBC4039D57C08A2BAB7EC6",hash_generated_method="337196F58DBFF1B0EFF866951B08E77A") public void addObserver(final FileAlterationObserver observer){  if (observer != null) {    observers.add(observer);  }}  }
class C{  public void notifyListeners(){  for (  SPINStatisticsListener listener : new ArrayList<SPINStatisticsListener>(listeners)) {    listener.statisticsUpdated();  }}  }
class C{  private static String createTimezoneString(String timezoneID){  StringBuilder builder=new StringBuilder();  DateTimeZone timeZone=DateTimeZone.forID(timezoneID);  long offsetInMilliseconds=timeZone.toTimeZone().getRawOffset();  long offsetHours=TimeUnit.MILLISECONDS.toHours(offsetInMilliseconds);  if (offsetHours == 0) {    builder.append("Z");  } else {    if (offsetHours < 0) {      builder.append("-");      if (offsetHours < -9) {        builder.append(Math.abs(offsetHours));      } else {        builder.append(0).append(Math.abs(offsetHours));      }    } else {      if (offsetHours > 9) {        builder.append(offsetHours);      } else {        builder.append(0).append(offsetHours);      }    }    builder.append(":00");  }  return builder.toString();}  }
class C{  protected void checkMarketplaceDropdownAndMenuVisibility(SaaSApplicationException ex){  if (ex == null || (ex instanceof ObjectNotFoundException && ((ObjectNotFoundException)ex).getDomainObjectClassEnum() == ClassEnum.MARKETPLACE) || (ex instanceof OperationNotPermittedException)) {    marketplaceId=null;    marketplaces=null;    menuBean.resetMenuVisibility();  }}  }
class C{  public void execAsync(String[] command,File workingDirectory,IStreamListener outStreamListener,IStreamListener errorStreamListener,String[] envp) throws CoreException {  AngularCLIPlugin.logInfo("Async Execute command line: " + Arrays.toString(command));  IProcess prcs=exec(command,workingDirectory,new NullProgressMonitor(),envp,null);  setTracing(command,outStreamListener,errorStreamListener,prcs);}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  public boolean isAssignableFrom(GenericClass rhsType){  return isAssignable(type,rhsType.type);}  }
class C{  public boolean changeLocation(ReadOnlyVector3 loc){  if (!locInBounds(loc))   return (false);  lookAt.set(camera.getDirection());  lookAt.scaleAddLocal(camera.getDistanceToCoR(),loc);  camera.setLocation(loc);  camera.setLookAt(lookAt);  updateFromCamera();  updateCrosshair();  updateGeometricState(0);  changed.set(true);  return (true);}  }
class C{  public static boolean validateTemplate(final CFlags flags){  return validateSDF(flags,TEMPLATE_FLAG);}  }
class C{  public void sort(ArrayList<Value[]> rows,int offset,int limit){  int rowsSize=rows.size();  if (rows.isEmpty() || offset >= rowsSize || limit == 0) {    return;  }  if (offset < 0) {    offset=0;  }  if (offset + limit > rowsSize) {    limit=rowsSize - offset;  }  if (limit == 1 && offset == 0) {    rows.set(0,Collections.min(rows,this));    return;  }  Value[][] arr=rows.toArray(new Value[rowsSize][]);  Utils.sortTopN(arr,offset,limit,this);  for (int i=0, end=Math.min(offset + limit,rowsSize); i < end; i++) {    rows.set(i,arr[i]);  }}  }
class C{  public static void checkScope(String scope,Node n,ErrorDispatcher err) throws JasperException {  if (scope != null && !scope.equals("page") && !scope.equals("request") && !scope.equals("session") && !scope.equals("application")) {    err.jspError(n,"jsp.error.invalid.scope",scope);  }}  }
class C{  public RangeSliderUI(RangeSlider b){  super(b);}  }
class C{  @Override public Void visitUnary(UnaryTree node,Void p){  checkForNullability(node.getExpression(),UNBOXING_OF_NULLABLE);  return super.visitUnary(node,p);}  }
class C{  public void write(String filename){  this.log.info("Writing results to " + filename);  try {    BufferedWriter writer=new BufferedWriter(new FileWriter(new File(filename)));    writer.write("Dumping arrival delay histogram...");    writer.newLine();    writer.write("delay; count");    writer.newLine();    for (int i=0; i < this.arrivalDelay.length; i++) {      writer.write(i + "; " + this.arrivalDelay[i]);      writer.newLine();    }    writer.write("Dumping departure delay histogram...");    writer.newLine();    writer.write("delay; count");    writer.newLine();    for (int i=0; i < this.departureDelay.length; i++) {      writer.write(i + "; " + this.departureDelay[i]);      writer.newLine();    }    writer.flush();    writer.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public List<Statistics> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public IncomingFileTransfer accept(){  return manager.createIncomingFileTransfer(this);}  }
class C{  private void updateRoutedNetworks(NetworkSystem networkSystem,List<Network> updatedNetworks,Map<String,Set<String>> routedEndpoints) throws Exception {  StringSet routedNetworks=null;  Network routedNetwork=null;  Map<URI,Network> allNetworks=DataObjectUtils.toMap(getCurrentTransportZones());  for (  Network network : updatedNetworks) {    Set<String> netRoutedEndpoints=routedEndpoints.get(NetworkUtil.getNetworkWwn(network));    if (netRoutedEndpoints == null || netRoutedEndpoints.isEmpty()) {      _log.debug("No routed endpoint in network {}",network.getNativeGuid());      network.setRoutedNetworks(null);    } else {      _log.info("Found {} routed endpoint in network {}",netRoutedEndpoints,network.getNativeGuid());      routedNetworks=new StringSet();      for (      String endpoint : netRoutedEndpoints) {        routedNetwork=findNetworkForDiscoveredEndPoint(allNetworks.values(),endpoint,network);        if (routedNetwork != null) {          routedNetworks.add(routedNetwork.getId().toString());        }      }      network.setRoutedNetworks(routedNetworks);    }    dbClient.updateAndReindexObject(network);    _log.info("Updated routed networks for {} to {}",network.getNativeGuid(),routedNetworks);  }  for (  URI id : allNetworks.keySet()) {    Network net=allNetworks.get(id);    boolean updated=false;    if (net.getRoutedNetworks() != null) {      routedNetworks=new StringSet(net.getRoutedNetworks());      for (      String strUri : net.getRoutedNetworks()) {        Network opNet=allNetworks.get(URI.create(strUri));        if (opNet != null && opNet.getRoutedNetworks() != null && !opNet.getRoutedNetworks().contains(net.getId().toString())) {          routedNetworks.remove(opNet.getId().toString());          updated=true;        }      }      if (updated) {        _log.info("Reconciled routed networks for {} to {}",net.getNativeGuid(),routedNetworks);        net.setRoutedNetworks(routedNetworks);        dbClient.updateAndReindexObject(net);      }    }  }  for (  Network network : allNetworks.values()) {    NetworkAssociationHelper.setNetworkConnectedVirtualArrays(network,false,dbClient);  }  this.updateTransitRoutedNetworks(networkSystem);}  }
class C{  public void putObject(String key,Object value) throws IOException, StreamCorruptedException, OptionalDataException {  ByteArrayOutputStream b=new ByteArrayOutputStream();  ObjectOutputStream o=new ObjectOutputStream(b);  o.writeObject(value);  o.close();  put(key,new String(Base64.encode(b.toByteArray(),Base64.DEFAULT)));}  }
class C{  public static void printAllActTypes(Population population){  IntegerValueHashMap<String> actTypes=new IntegerValueHashMap<String>();  for (  Person person : population.getPersons().values()) {    for (    Plan plan : person.getPlans()) {      for (      PlanElement pe : plan.getPlanElements()) {        if (pe instanceof Activity) {          Activity activity=(Activity)pe;          actTypes.increment(activity.getType());        }      }    }  }  for (  String activityType : actTypes.getKeySet()) {    System.out.println(activityType + " => " + actTypes.get(activityType));  }}  }
class C{  public SimpleLogFormatter(){  super();}  }
class C{  static public double secToMS(double sec){  return sec * 1000.0;}  }
class C{  public static boolean isError(Map<String,? extends Object> results){  if (results == null || results.get(ModelService.RESPONSE_MESSAGE) == null) {    return false;  }  return ModelService.RESPOND_ERROR.equals(results.get(ModelService.RESPONSE_MESSAGE));}  }
class C{  public void saveToGeode(String regionPath,GeodeConnectionConf connConf,Properties opConf){  dsf.saveToGeode(regionPath,connConf,propertiesToScalaMap(opConf));}  }
class C{  @Scheduled(fixedRate=KEEP_LAST_JOBS_CLEANUP_INTERVAL) public void doCleanUp(){  final List<JobInfo> jobs=jobRepository.findAllJobInfoWithoutMessages();  findJobsToDelete(jobs).forEach(null);}  }
class C{  public static boolean testLineSegmentSphere(Vector3d p0,Vector3d p1,Vector3d center,double radiusSquared){  return testLineSegmentSphere(p0.x,p0.y,p0.z,p1.x,p1.y,p1.z,center.x,center.y,center.z,radiusSquared);}  }
class C{  static TemporalInstant makeInstant(int secondsMakeMeUnique){  return new TemporalInstantRfc3339(2015,12,30,12,00,secondsMakeMeUnique);}  }
class C{  public boolean hasOrgJobDescription(){  return super.hasElement(OrgJobDescription.KEY);}  }
class C{  public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  public static byte[] computeMd5Hash(byte[] in){  try {    MessageDigest md5=MessageDigest.getInstance("MD5");    return md5.digest(in);  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  public static QueryBuilder<ParsedTupleQuery> select(String... theProjectionVars){  QueryBuilder<ParsedTupleQuery> aBuilder=new AbstractQueryBuilder<ParsedTupleQuery>(new ParsedTupleQuery());  aBuilder.addProjectionVar(theProjectionVars);  return aBuilder;}  }
class C{  public void removeHandler(Handler handler) throws SecurityException {  checkPermission();  if (handler == null) {    return;  }  handlers.remove(handler);}  }
class C{  private void gaincLevelMode1m(AtracGainInfo dst){  if (dst.numPoints > 0) {    dst.levCode[0]=gain_vlc_tabs[2].getVLC2(br);  }  for (int i=1; i < dst.numPoints; i++) {    int delta=gain_vlc_tabs[3].getVLC2(br);    dst.levCode[i]=(dst.levCode[i - 1] + delta) & 0xF;  }}  }
class C{  private String fixString(String s){  if (s == null || s.length() == 0)   return "";  String s2=s.replaceAll("[\t\n\f\r]+"," ");  return s2;}  }
class C{  public SimpleAttribute_ createSimpleAttribute_(){  SimpleAttribute_Impl simpleAttribute_=new SimpleAttribute_Impl();  return simpleAttribute_;}  }
class C{  public void dispatchViewUpdates(int batchId){  updateViewHierarchy();  mNativeViewHierarchyOptimizer.onBatchComplete();  mOperationsQueue.dispatchViewUpdates(batchId);}  }
class C{  public final static long horizontalDHTPosition(byte[] wordHash){  assert wordHash != null;  assert wordHash[2] != '@';  return Base64Order.enhancedCoder.cardinal(wordHash);}  }
class C{  protected AbstractRpcResponse(){}  }
class C{  public void indent(int n) throws SAXException {}  }
class C{  protected void closeVisibleField(XhtmlBuffer xb){  xb.closeElement("div");  xb.closeElement("div");}  }
class C{  @Override public String toString(){  if (m_displayModelInOldFormat) {    return toStringOriginal();  }  if (m_priors == null) {    return "No clusterer built yet!";  }  StringBuffer temp=new StringBuffer();  temp.append("\nEM\n==\n");  if (m_initialNumClusters == -1) {    temp.append("\nNumber of clusters selected by cross validation: " + m_num_clusters + "\n");  } else {    temp.append("\nNumber of clusters: " + m_num_clusters + "\n");  }  temp.append("Number of iterations performed: " + m_iterationsPerformed + "\n");  int maxWidth=0;  int maxAttWidth=0;  for (int i=0; i < m_num_attribs; i++) {    Attribute a=m_theInstances.attribute(i);    if (a.name().length() > maxAttWidth) {      maxAttWidth=m_theInstances.attribute(i).name().length();    }    if (a.isNominal()) {      for (int j=0; j < a.numValues(); j++) {        String val=a.value(j) + "  ";        if (val.length() > maxAttWidth) {          maxAttWidth=val.length();        }      }    }  }  for (int i=0; i < m_num_clusters; i++) {    for (int j=0; j < m_num_attribs; j++) {      if (m_theInstances.attribute(j).isNumeric()) {        double mean=Math.log(Math.abs(m_modelNormal[i][j][0])) / Math.log(10.0);        double stdD=Math.log(Math.abs(m_modelNormal[i][j][1])) / Math.log(10.0);        double width=(mean > stdD) ? mean : stdD;        if (width < 0) {          width=1;        }        width+=6.0;        if ((int)width > maxWidth) {          maxWidth=(int)width;        }      } else {        DiscreteEstimator d=(DiscreteEstimator)m_model[i][j];        for (int k=0; k < d.getNumSymbols(); k++) {          String size=Utils.doubleToString(d.getCount(k),maxWidth,4).trim();          if (size.length() > maxWidth) {            maxWidth=size.length();          }        }        int sum=Utils.doubleToString(d.getSumOfCounts(),maxWidth,4).trim().length();        if (sum > maxWidth) {          maxWidth=sum;        }      }    }  }  if (maxAttWidth < "Attribute".length()) {    maxAttWidth="Attribute".length();  }  maxAttWidth+=2;  temp.append("\n\n");  temp.append(pad("Cluster"," ",(maxAttWidth + maxWidth + 1) - "Cluster".length(),true));  temp.append("\n");  temp.append(pad("Attribute"," ",maxAttWidth - "Attribute".length(),false));  for (int i=0; i < m_num_clusters; i++) {    String classL="" + i;    temp.append(pad(classL," ",maxWidth + 1 - classL.length(),true));  }  temp.append("\n");  temp.append(pad(""," ",maxAttWidth,true));  for (int i=0; i < m_num_clusters; i++) {    String priorP=Utils.doubleToString(m_priors[i],maxWidth,2).trim();    priorP="(" + priorP + ")";    temp.append(pad(priorP," ",maxWidth + 1 - priorP.length(),true));  }  temp.append("\n");  temp.append(pad("","=",maxAttWidth + (maxWidth * m_num_clusters) + m_num_clusters+ 1,true));  temp.append("\n");  for (int i=0; i < m_num_attribs; i++) {    String attName=m_theInstances.attribute(i).name();    temp.append(attName + "\n");    if (m_theInstances.attribute(i).isNumeric()) {      String meanL="  mean";      temp.append(pad(meanL," ",maxAttWidth + 1 - meanL.length(),false));      for (int j=0; j < m_num_clusters; j++) {        String mean=Utils.doubleToString(m_modelNormal[j][i][0],maxWidth,4).trim();        temp.append(pad(mean," ",maxWidth + 1 - mean.length(),true));      }      temp.append("\n");      String stdDevL="  std. dev.";      temp.append(pad(stdDevL," ",maxAttWidth + 1 - stdDevL.length(),false));      for (int j=0; j < m_num_clusters; j++) {        String stdDev=Utils.doubleToString(m_modelNormal[j][i][1],maxWidth,4).trim();        temp.append(pad(stdDev," ",maxWidth + 1 - stdDev.length(),true));      }      temp.append("\n\n");    } else {      Attribute a=m_theInstances.attribute(i);      for (int j=0; j < a.numValues(); j++) {        String val="  " + a.value(j);        temp.append(pad(val," ",maxAttWidth + 1 - val.length(),false));        for (int k=0; k < m_num_clusters; k++) {          DiscreteEstimator d=(DiscreteEstimator)m_model[k][i];          String count=Utils.doubleToString(d.getCount(j),maxWidth,4).trim();          temp.append(pad(count," ",maxWidth + 1 - count.length(),true));        }        temp.append("\n");      }      String total="  [total]";      temp.append(pad(total," ",maxAttWidth + 1 - total.length(),false));      for (int k=0; k < m_num_clusters; k++) {        DiscreteEstimator d=(DiscreteEstimator)m_model[k][i];        String count=Utils.doubleToString(d.getSumOfCounts(),maxWidth,4).trim();        temp.append(pad(count," ",maxWidth + 1 - count.length(),true));      }      temp.append("\n");    }  }  return temp.toString();}  }
class C{  void CalPairs4Map() throws FileNotFoundException {  MaximumDistance=0;  MinX=Double.POSITIVE_INFINITY;  MinY=Double.POSITIVE_INFINITY;  MaxX=Double.NEGATIVE_INFINITY;  MaxY=Double.NEGATIVE_INFINITY;  pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(this.points.size()));  PairsTree=new KdTree.SqrEuclid<Double>(2,new Integer(this.points.size() * (this.points.size() - 1) / 2));  double[] entry;  double[] pairentry;  double dx=0;  double dy=0;  for (int i=0; i < this.points.size(); i++) {    if (this.points.get(i).x < MinX) {      MinX=this.points.get(i).x;    }    if (this.points.get(i).y < MinY) {      MinY=this.points.get(i).y;    }    if (this.points.get(i).x > MaxX) {      MaxX=this.points.get(i).x;    }    if (this.points.get(i).y > MaxY) {      MaxY=this.points.get(i).y;    }    entry=new double[]{this.points.get(i).y,this.points.get(i).x};    pointsTree.addPoint(entry,(double)i);    for (int j=0; j < this.points.size(); j++) {      pair pr=new pair();      if (points.get(i).x <= points.get(j).x && i != j) {        pr.FirstP=i;        pr.SecondP=j;        pr.Distance=Math.sqrt(Math.pow((points.get(i).x - points.get(j).x),2) + Math.pow((points.get(i).y - points.get(j).y),2));        pr.HorDistance=(points.get(j).x - points.get(i).x);        pr.VerDistance=(points.get(j).y - points.get(i).y);        if (MaximumDistance < pr.Distance) {          MaximumDistance=pr.Distance;        }        dx=points.get(j).x - points.get(i).x;        dy=points.get(j).y - points.get(i).y;        if (dx != 0) {          if ((dx > 0 && dy >= 0)) {            pr.Direction=Math.atan(dy / dx);          }          if (dx < 0 && dy >= 0) {            pr.Direction=Math.atan(dy / dx) + Math.PI;          }          if (dx > 0 && dy < 0) {            pr.Direction=Math.atan(dy / dx) + 2 * Math.PI;          }          if (dx < 0 && dy < 0) {            pr.Direction=Math.atan(dy / dx) + Math.PI;            ;          }        } else {          if (dy >= 0) {            pr.Direction=Math.PI / 2;          } else {            pr.Direction=3 * Math.PI / 2;          }        }        pr.MomentI=Math.pow((points.get(i).z - points.get(j).z),2) / 2;        Pairs.add(pr);        pairentry=new double[]{pr.VerDistance,pr.HorDistance};        PairsTree.addPoint(pairentry,(double)Pairs.size() - 1.0);      }    }  }  bMaxX=MaxX;  bMaxY=MaxY;  bMinX=MinX;  bMinY=MinY;}  }
class C{  public void addBucket(int bucketId,float readLoad,float writeLoad){  this.bucketReadLoads[bucketId]=readLoad;  this.bucketWriteLoads[bucketId]=writeLoad;}  }
class C{  public Person(){}  }
class C{  public void wordChars(int low,int hi){  if (low < 0)   low=0;  if (hi >= ctype.length)   hi=ctype.length - 1;  while (low <= hi)   ctype[low++]|=CT_ALPHA;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:22.338 -0400",hash_original_method="E4498A063D2F3E31DC56C66295C7299D",hash_generated_method="4E252D16C6DE8C0427A5B54D445595D7") public DefaultHttpRoutePlanner(SchemeRegistry schreg){  if (schreg == null) {    throw new IllegalArgumentException("SchemeRegistry must not be null.");  }  schemeRegistry=schreg;}  }
class C{  public static double atan(double x){  return MathLib._atan(x);}  }
class C{  public ListBuffer<A> appendList(ListBuffer<A> xs){  return appendList(xs.toList());}  }
class C{  public GraphicsNode build(BridgeContext ctx,Document document){  ctx.setDocument(document);  ctx.initializeDocument(document);  ctx.setGVTBuilder(this);  DocumentBridge dBridge=ctx.getDocumentBridge();  RootGraphicsNode rootNode=null;  try {    rootNode=dBridge.createGraphicsNode(ctx,document);    Element svgElement=document.getDocumentElement();    GraphicsNode topNode=null;    Bridge bridge=ctx.getBridge(svgElement);    if (bridge == null || !(bridge instanceof GraphicsNodeBridge)) {      return null;    }    GraphicsNodeBridge gnBridge=(GraphicsNodeBridge)bridge;    topNode=gnBridge.createGraphicsNode(ctx,svgElement);    if (topNode == null) {      return null;    }    rootNode.getChildren().add(topNode);    buildComposite(ctx,svgElement,(CompositeGraphicsNode)topNode);    gnBridge.buildGraphicsNode(ctx,svgElement,topNode);    dBridge.buildGraphicsNode(ctx,document,rootNode);  } catch (  BridgeException ex) {    ex.setGraphicsNode(rootNode);    throw ex;  }  if (ctx.isInteractive()) {    ctx.addUIEventListeners(document);    ctx.addGVTListener(document);  }  if (ctx.isDynamic()) {    ctx.addDOMListeners();  }  return rootNode;}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public void bitOr() throws IOException {  print("bitOr",null);}  }
class C{  public static CreateUsersResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateUsersResponseE object=new CreateUsersResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","createUsersResponse").equals(reader.getName())) {          object.setCreateUsersResponse(org.oscm.xsd.CreateUsersResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static String toString(Throwable t){  StringWriter strWrt=new StringWriter();  t.printStackTrace(new PrintWriter(strWrt));  return strWrt.toString();}  }
class C{  void initProgram(){  glUseProgram(this.program);  viewProjMatrixUniform=glGetUniformLocation(this.program,"viewProjMatrix");  glUseProgram(0);}  }
class C{  public void testExistsPathMissing() throws Exception {  create(igfsSecondary,paths(DIR),null);  assert igfs.exists(DIR);}  }
class C{  public static void openAlbumProfile(final Activity context,final String albumName,final String artistName,final long albumId,final long[] songs){  final Bundle bundle=new Bundle();  bundle.putString(Config.ALBUM_YEAR,MusicUtils.getReleaseDateForAlbum(context,albumId));  bundle.putString(Config.ARTIST_NAME,artistName);  bundle.putString(Config.MIME_TYPE,MediaStore.Audio.Albums.CONTENT_TYPE);  bundle.putLong(Config.ID,albumId);  bundle.putString(Config.NAME,albumName);  if (songs != null && songs.length > 0) {    bundle.putLongArray(Config.TRACKS,songs);  }  final Intent intent=new Intent(context,ProfileActivity.class);  intent.putExtras(bundle);  context.startActivity(intent);}  }
class C{  public ScoreNode(int sc){  this.score=sc;}  }
class C{  public WhoCommand(Server server){  super(server,"who","Lists all of the players connected to the server.");}  }
class C{  public static Object createValue(String str,Object obj) throws ParseException {  return createValue(str,(Class)obj);}  }
class C{  public short loadShort(Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return (short)0;}  }
class C{  private static int parseInt(String value,int beginIndex,int endIndex) throws NumberFormatException {  if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {    throw new NumberFormatException(value);  }  int i=beginIndex;  int result=0;  int digit;  if (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value.substring(beginIndex,endIndex));    }    result=-digit;  }  while (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value.substring(beginIndex,endIndex));    }    result*=10;    result-=digit;  }  return -result;}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_foldThread != null) {    newVector.addElement("Stop");  }  return newVector.elements();}  }
class C{  public boolean isBorderPainted(){  return paintBorder;}  }
class C{  @SuppressFBWarnings(value="DP_DO_INSIDE_DO_PRIVILEGED",justification="EV is run only from within unit tests") public Object callFactory(String factoryTypeName,String factoryMethod,Class<?>[] paramTypes,Object[] paramValues){  try {    Class<?> type=resolve();    if (type == null) {      return null;    }    Class<?> factoryType=Class.forName(factoryTypeName);    Method factory=factoryType.getMethod(factoryMethod,paramTypes);    factory.setAccessible(true);    return factory.invoke(null,paramValues);  } catch (  Exception e) {    return handleException(e);  }}  }
class C{  private byte[] assembleRTCPReceptionReport(){  byte reportBlock[]=new byte[0];  RtpSource source=mRtcpSession.getMySource();  ReceptionReport rr=source.generateReceptionReport();  byte SSRC[]=RtcpPacketUtils.longToBytes(rr.getSsrc(),4);  byte fraction_lost[]=RtcpPacketUtils.longToBytes((long)rr.getFractionLost(),1);  byte pkts_lost[]=RtcpPacketUtils.longToBytes(rr.getCumulativeNumberOfPacketsLost(),3);  byte last_seq[]=RtcpPacketUtils.longToBytes(rr.getExtendedHighestSequenceNumberReceived(),4);  byte jitter[]=RtcpPacketUtils.longToBytes(rr.getInterarrivalJitter(),4);  byte lst[]=RtcpPacketUtils.longToBytes(rr.getLastSenderReport(),4);  byte dlsr[]=RtcpPacketUtils.longToBytes(rr.getDelaySinceLastSenderReport(),4);  reportBlock=RtcpPacketUtils.append(reportBlock,SSRC);  reportBlock=RtcpPacketUtils.append(reportBlock,fraction_lost);  reportBlock=RtcpPacketUtils.append(reportBlock,pkts_lost);  reportBlock=RtcpPacketUtils.append(reportBlock,last_seq);  reportBlock=RtcpPacketUtils.append(reportBlock,jitter);  reportBlock=RtcpPacketUtils.append(reportBlock,lst);  reportBlock=RtcpPacketUtils.append(reportBlock,dlsr);  return reportBlock;}  }
class C{  public int size(){  return stack.size();}  }
class C{  public static void showBalloon(@NotNull JComponent component,@NotNull MessageType messageType,@NotNull String message){  final BalloonBuilder builder=JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(message,messageType,null).setDisposable(ApplicationManager.getApplication()).setFadeoutTime(BALLOON_FADEOUT_TIME);  Balloon balloon=builder.createBalloon();  Dimension size=component.getSize();  Balloon.Position position;  int x;  int y;  if (size == null) {    x=y=0;    position=Balloon.Position.above;  } else {    x=Math.min(10,size.width / 2);    y=size.height;    position=Balloon.Position.below;  }  balloon.show(new RelativePoint(component,new Point(x,y)),position);}  }
class C{  public void printHelp(int width,String cmdLineSyntax,String header,Options options,String footer,boolean autoUsage){  PrintWriter pw=new PrintWriter(System.err);  printHelp(pw,width,cmdLineSyntax,header,options,defaultLeftPad,defaultDescPad,footer,autoUsage);  pw.flush();}  }
class C{  public boolean isSafe(){  return (this.status == DroidsafeIssueResolutionStatus.SAFE);}  }
class C{  public void generate() throws WikiApiException {  Indexer data=null;  try {    data=new Indexer(config);    System.out.println("GENERATING INDEX STARTED");    long bufferSize=config.getBufferSize();    Revision rev;    long count=0;    long last=0, now, start=System.currentTimeMillis();    Iterator<Revision> it=new IndexIterator(config);    while (it.hasNext()) {      if (++count % bufferSize == 0) {        now=System.currentTimeMillis() - start;        System.out.println(Time.toClock(now) + "\t" + (now - last)+ "\tINDEXING "+ count);        last=now;      }      rev=it.next();      data.index(rev);    }    System.out.println("GENERATING INDEX ENDED + (" + Time.toClock(System.currentTimeMillis() - start) + ")");  } catch (  Exception e) {    throw new WikiApiException(e);  } finally {    if (data != null) {      data.close();    }  }}  }
class C{  @Override @Transactional public Server saveInDB(Server server) throws ServiceException {  server=serverDAO.save(server);  return server;}  }
class C{  public void ack(){  for (  Tuple t : tupleBatch) {    collector.ack(t);  }  tupleBatch.clear();  forceFlush=false;}  }
class C{  private static int skipLws(byte[] buf,int start){  int i;  for (i=start; i < buf.length; i++) {    if (!isLws(buf[i])) {      return i;    }  }  return i;}  }
class C{  @SafeVarargs public final FastAdapterBottomSheetDialog<Item> add(Item... items){  mFastItemAdapter.add(items);  return this;}  }
class C{  public static <C extends Comparable<?>>Range<C> downTo(C endpoint,BoundType boundType){switch (boundType) {case OPEN:    return greaterThan(endpoint);case CLOSED:  return atLeast(endpoint);default :throw new AssertionError();}}  }
class C{  public static String nl(){  String nl=System.getProperty("line.separator");  if (nl == null) {    throw new NullPointerException("couldn't find system property line.separator");  }  return nl;}  }
class C{  @Scheduled(fixedRate=60000) public void scheduleDiscoverUser(){  if (!resetTimer) {    User user=userRepository.findRankedUserToCrawl();    if (user == null) {      user=userRepository.findNextUserToCrawl();    }    if (user != null) {      twitterService.discoverUserByProfileId(user.getProfileId());    }  } else {    resetTimer=false;  }  logger.info("Updating last ranks...");  userRepository.setLastPageRank();  logger.info("Updating current rank...");  userRepository.updateUserCurrentRank();  logger.info("Current ranks updated!");}  }
class C{  public org.apache.flex.forks.batik.script.Window createWindow(Interpreter interp,String lang){  return new Window(interp,lang);}  }
class C{  private String mapType(META_TYPE metaType){  if (metaType == META_TYPE.BLOCK_PROVIDER) {    return META_TYPE.BLOCK.toString().toLowerCase();  }  if (metaType == META_TYPE.FILE_PROVIDER) {    return META_TYPE.FILE.toString().toLowerCase();  }  return metaType.toString().toLowerCase();}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.505 -0500",hash_original_method="EEA209751D515DE89BAC56042276C483",hash_generated_method="AD4E2FEBA3938BC3B383C31CE8AA5621") public Intent putExtra(String name,long[] value){  mExtras.put(name,value);  return this;}  }
class C{  public boolean consolidateNodes(){  if (consolidateCalled) {    return returnValConsolidate;  }  consolidateCalled=true;  returnValConsolidate=consolidate() && reOrderPcjNodes();  return returnValConsolidate;}  }
class C{  public void test_blobDeferredFrees(){  doBlobDeferredFrees(4000);}  }
class C{  protected void paintClock(){  double clockRadius=Math.min(w,h) * 0.8 * 0.5;  double centerX=w / 2;  double centerY=h / 2;  Circle circle=new Circle(centerX,centerY,clockRadius);  circle.setFill(Color.WHITE);  circle.setStroke(Color.BLACK);  Text t1=new Text(centerX - 5,centerY - clockRadius + 12,"12");  Text t2=new Text(centerX - clockRadius + 3,centerY + 5,"9");  Text t3=new Text(centerX + clockRadius - 10,centerY + 3,"3");  Text t4=new Text(centerX - 3,centerY + clockRadius - 3,"6");  double sLength=clockRadius * 0.8;  double secondX=centerX + sLength * Math.sin(second * (2 * Math.PI / 60));  double secondY=centerY - sLength * Math.cos(second * (2 * Math.PI / 60));  Line sLine=new Line(centerX,centerY,secondX,secondY);  sLine.setStroke(Color.RED);  double mLength=clockRadius * 0.65;  double xMinute=centerX + mLength * Math.sin(minute * (2 * Math.PI / 60));  double minuteY=centerY - mLength * Math.cos(minute * (2 * Math.PI / 60));  Line mLine=new Line(centerX,centerY,xMinute,minuteY);  mLine.setStroke(Color.BLUE);  double hLength=clockRadius * 0.5;  double hourX=centerX + hLength * Math.sin((hour % 12 + minute / 60.0) * (2 * Math.PI / 12));  double hourY=centerY - hLength * Math.cos((hour % 12 + minute / 60.0) * (2 * Math.PI / 12));  Line hLine=new Line(centerX,centerY,hourX,hourY);  hLine.setStroke(Color.GREEN);  getChildren().clear();  getChildren().addAll(circle,t1,t2,t3,t4,sLine,mLine,hLine);}  }
class C{  public CarouselImageView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  setChildrenDrawingOrderEnabled(true);  mGestureDetector=new GestureDetector(this.getContext(),this);  mGestureDetector.setIsLongpressEnabled(true);  setStaticTransformationsEnabled(true);  mAnimationDuration=400;  mUseReflection=false;  int selectedItem=0;  setNextSelectedPositionInt(selectedItem);}  }
class C{  public SPS(Context context){  this.context=context;  sharedPrefs=context.getSharedPreferences(FILENAME,MODE);  editor=sharedPrefs.edit();}  }
class C{  protected void registerLocationManager(){  locationManager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  criteria=new Criteria();  provider=locationManager.getBestProvider(criteria,true);  myLocationListener=new MyLocationListener();  try {    locationManager.requestLocationUpdates(provider,400,1,myLocationListener);    Location location=locationManager.getLastKnownLocation(provider);    if (location != null) {      myLocationListener.onLocationChanged(location);    }  } catch (  IllegalArgumentException e) {    Log.e(TAG,"Illegal argument exception",e);  }catch (  SecurityException e) {    Log.e(TAG,"Security exception",e);  }}  }
class C{  public void addConditioningVariable(String variable,double low,double high){  if (!(low < high))   throw new IllegalArgumentException("Low must be less than high: " + low + " >= "+ high);  Node node=dataSet.getVariable(variable);  if (node == target)   throw new IllegalArgumentException("Conditioning node may not be the target.");  if (!(node instanceof ContinuousVariable))   throw new IllegalArgumentException("Variable must be continuous.");  if (continuousIntervals.containsKey(node))   throw new IllegalArgumentException("Please remove conditioning variable first.");  continuousIntervals.put(node,new double[]{low,high});}  }
class C{  public String pad(String value,int places,String padCharacter){  StringBuilder sb=new StringBuilder();  sb.append(value);  while (sb.length() < places) {    sb.append(padCharacter);  }  return sb.toString();}  }
class C{  public static NumberInherit newInstance(NumberInheritAsEnum numberInheritAsEnum){  NumberInherit numberInherit=new NumberInherit();  numberInherit.numberInheritAsEnum=numberInheritAsEnum;  return numberInherit;}  }
class C{  public void clearExif(){  mData=new ExifData(DEFAULT_BYTE_ORDER);}  }
class C{  private boolean checkPoolSettingExistsBasedOnTierMethodology(int tierMethodology,StoragePool pool,String poolSettingId) throws IOException {  boolean poolChanged=false;  if (null == pool) {    return poolChanged;  }switch (tierMethodology) {case Constants.NO_DATA_MOVEMENT:    if (null == pool.getNoDataMovementId() || !pool.getNoDataMovementId().equalsIgnoreCase(poolSettingId)) {      pool.setNoDataMovementId(poolSettingId);    }  poolChanged=true;break;case Constants.AUTO_TIER:if (null == pool.getAutoTierSettingId() || !pool.getAutoTierSettingId().equalsIgnoreCase(poolSettingId)) {pool.setAutoTierSettingId(poolSettingId);}poolChanged=true;break;case Constants.HIGH_AVAILABLE_TIER:if (null == pool.getHighAvailableTierId() || !pool.getHighAvailableTierId().equalsIgnoreCase(poolSettingId)) {pool.setHighAvailableTierId(poolSettingId);}poolChanged=true;break;case Constants.LOW_AVAILABLE_TIER:if (null == pool.getLowAvailableTierId() || !pool.getLowAvailableTierId().equalsIgnoreCase(poolSettingId)) {pool.setLowAvailableTierId(poolSettingId);}poolChanged=true;break;case Constants.START_HIGH_THEN_AUTO_TIER:if (null == pool.getStartHighThenAutoTierId() || !pool.getStartHighThenAutoTierId().equalsIgnoreCase(poolSettingId)) {pool.setStartHighThenAutoTierId(poolSettingId);}poolChanged=true;break;default :_logger.warn("Found Invalid Storage tier methodology '{}' for Storage Pool {}",tierMethodology,pool.getId());break;}if (poolChanged) {_dbClient.persistObject(pool);}return poolChanged;}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  protected static void deleteRecursiveSilent(CarbonFile f){  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      CarbonFile c : f.listFiles()) {        deleteRecursiveSilent(c);      }    }  }  if (f.exists() && !f.delete()) {    return;  }}  }
class C{  protected int matchContainer(){  return ALL_CONTAINER;}  }
class C{  public Double3D(final MutableDouble2D p){  x=p.x;  y=p.y;  z=0.0;}  }
class C{  @Override public void process(Number tuple){  values.add(tuple.doubleValue());}  }
class C{  protected static TPS atomicRead(final IIndex ndx,final byte[] fromKey,final Schema schema,final long fromTime,final long toTime,final INameFilter filter,final TPS tps){  assert ndx != null;  assert schema != null;  assert fromKey != null;  assert tps != null;  final byte[] toKey=SuccessorUtil.successor(fromKey.clone());  if (log.isInfoEnabled()) {    log.info("read: fromKey=" + BytesUtil.toString(fromKey) + "\n"+ "read:   toKey="+ BytesUtil.toString(toKey));  }  final int flags=IRangeQuery.DEFAULT | IRangeQuery.READONLY;  final ITupleIterator<?> itr=ndx.rangeIterator(fromKey,toKey,0,flags,null);  int nscanned=0;  while (itr.hasNext()) {    final ITuple<?> tuple=itr.next();    final byte[] key=tuple.getKey();    nscanned++;    final KeyDecoder keyDecoder=new KeyDecoder(key);    final String col=keyDecoder.getColumnName();    if (filter != null && !filter.accept(col)) {      if (log.isDebugEnabled()) {        log.debug("Skipping property: name=" + col + " (filtered)");      }      continue;    }    final long columnValueTimestamp=keyDecoder.getTimestamp();    if (columnValueTimestamp < fromTime) {      if (log.isDebugEnabled()) {        log.debug("Ignoring earlier revision: col=" + col + ", fromTime="+ fromTime+ ", timestamp="+ columnValueTimestamp);      }      continue;    }    if (toTime != CURRENT_ROW && columnValueTimestamp >= toTime) {      if (log.isDebugEnabled()) {        log.debug("Ignoring later revision: col=" + col + ", toTime="+ toTime+ ", timestamp="+ columnValueTimestamp);      }      continue;    }    final byte[] val=tuple.getValue();    final Object v=ValueType.decode(val);    tps.set(col,columnValueTimestamp,v);    if (log.isInfoEnabled())     log.info("Accept: name=" + col + ", timestamp="+ columnValueTimestamp+ ", value="+ v);  }  if (nscanned == 0) {    return null;  }  if (toTime == CURRENT_ROW) {    return tps.currentRow();  }  return tps;}  }
class C{  public static Address generateRandomAddress(){  return Address.fromEncoded(Utils.generateRandomAccount().getAddress().getEncoded());}  }
class C{  public static void writeRouteStops2Shape(String fileName,Map<Id,TransitStopFacility> stops,Collection<Id> stops2write,String targetCoordinateSystem){  initPointFeatureType("TransitRouteStops",null,targetCoordinateSystem);  write(createStopFeatures(stops,stops2write),fileName);}  }
class C{  public void checkToken(String token){  if (token != null && !token.isEmpty() && (System.currentTimeMillis() - tokenLastChecked) / 1000 > TOKEN_CHECK_DELAY) {    LOGGER.info("Checking token..");    tokenLastChecked=Long.valueOf(System.currentTimeMillis());    verifyToken(token);  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== TimecodeComponent ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(String.format("data_definition = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.data_definition[0],this.data_definition[1],this.data_definition[2],this.data_definition[3],this.data_definition[4],this.data_definition[5],this.data_definition[6],this.data_definition[7],this.data_definition[8],this.data_definition[9],this.data_definition[10],this.data_definition[11],this.data_definition[12],this.data_definition[13],this.data_definition[14],this.data_definition[15]));  sb.append(String.format("duration = %d%n",this.duration));  return sb.toString();}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xC2464FA0,version=150) public int sceUsbStop(PspString driverName,int size,@CanBeNull TPointer args){  usbStarted=false;  SceModule module=loadedModules.remove(driverName);  if (module != null) {    HLEModuleManager moduleManager=HLEModuleManager.getInstance();    moduleManager.UnloadFlash0Module(module);  }  return 0;}  }
class C{  public static int generate(int crc,Enum<?> value){  return generate(crc,value.ordinal());}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y,final int xx,final int yy){  insertBitmap(bitmap,x,y,bitmap.getRGB(xx,yy));}  }
class C{  public DataBuffer createDataBuffer(){  DataBuffer dataBuffer=null;  int size=(int)scanlineStride * height;switch (dataType) {case DataBuffer.TYPE_BYTE:    dataBuffer=new DataBufferByte(size + (dataBitOffset + 7) / 8);  break;case DataBuffer.TYPE_USHORT:dataBuffer=new DataBufferUShort(size + (dataBitOffset + 15) / 16);break;case DataBuffer.TYPE_INT:dataBuffer=new DataBufferInt(size + (dataBitOffset + 31) / 32);break;}return dataBuffer;}  }
class C{  public boolean has(String key){  return this.containsKey(key);}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  public void log(String message,Level level,Object... arguments){  getBot().log(this,message,level,arguments);}  }
class C{  public Line(){  uiColor=UIManager.getColor("controlShadow");  initSize();}  }
class C{  public T documentHostName(String value){  setString(DOCUMENT_HOST_NAME,value);  return (T)this;}  }
class C{  public final Collection<? extends Certificate> generateCertificates(InputStream inStream) throws CertificateException {  return spiImpl.engineGenerateCertificates(inStream);}  }
class C{  protected List<AbstractTask> chooseScatterSplits(){  final List<AbstractTask> tasks=new LinkedList<AbstractTask>();  final Iterator<ViewMetadata> itr=overflowMetadata.views();  UUID[] moveTargets=null;  while (itr.hasNext()) {    final ViewMetadata vmd=itr.next();    final String name=vmd.name;    if (isUsed(name) || overflowMetadata.isCopied(name)) {      continue;    }    final ScatterSplitConfiguration ssc=vmd.indexMetadata.getScatterSplitConfiguration();    if ((vmd.getIndexPartitionCount() == 1L) && vmd.pmd.getSourcePartitionId() == -1 && resourceManager.scatterSplitEnabled && ssc.isEnabled() && vmd.compactView && vmd.getPercentOfSplit() >= ssc.getPercentOfSplitThreshold()) {      if (moveTargets == null) {        final UUID[] a=resourceManager.getFederation().getDataServiceUUIDs(ssc.getDataServiceCount());        if (a == null || a.length == 1) {          if (log.isInfoEnabled())           log.info("Will not scatter split - insufficient data services discovered.");          return tasks;        }        final Set<UUID> tmp=new HashSet<UUID>(Arrays.asList(a));        tmp.add(resourceManager.getDataServiceUUID());        moveTargets=tmp.toArray(new UUID[tmp.size()]);      }      final int nsplits=ssc.getIndexPartitionCount() == 0 ? (2 * moveTargets.length) : ssc.getIndexPartitionCount();      final AbstractTask task=new ScatterSplitTask(vmd,nsplits,moveTargets);      tasks.add(task);      overflowMetadata.setAction(vmd.name,OverflowActionEnum.ScatterSplit);      putUsed(name,"willScatter(name=" + vmd + ")");      if (log.isInfoEnabled())       log.info("will scatter: " + vmd);      continue;    }  }  return tasks;}  }
class C{  public synchronized boolean canUndo(){  if (inProgress) {    UndoableEdit edit=editToBeUndone();    return edit != null && edit.canUndo();  } else {    return super.canUndo();  }}  }
class C{  public VisualTable(Visualization vis,String group){  super(TableVisualItem.class);  init(vis,group,VisualItem.SCHEMA);}  }
class C{  public Distribution(){}  }
class C{  protected final T_State transitTo(final Class<? extends T_State> stateClass){  return transitTo(stateClass,0);}  }
class C{  public static TypeEvalContext deepCodeInsight(@NotNull final Project project){  return getContextFromCache(project,new TypeEvalContext(false,true,false,null));}  }
class C{  public void destroy(){  if (mTabModelSelector != null) {    mTabModelSelector.removeObserver(mSelectorObserver);    mTabModelSelector=null;  }}  }
class C{  public boolean intersects(double[] rawPoint){  if (rawPoint.length != dimension) {    throw new IllegalArgumentException("Unable to determine intersection between Hypercube (dimension " + dimension + ") and point (dimension "+ rawPoint.length+ ")");  }  for (int i=0; i < dimension; i++) {    if (rawPoint[i] < lows[i] || rawPoint[i] > highs[i]) {      return false;    }  }  return true;}  }
class C{  private List<byte[]> convertStringListToByteArray(List<String> valueList){  List<byte[]> byteArrayList=new ArrayList<>(valueList.size());  for (  String value : valueList) {    byteArrayList.add(value.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));  }  return byteArrayList;}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public static void startFinalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  if (!finalizableReferenceClass.getName().equals(FINALIZABLE_REFERENCE)) {    throw new IllegalArgumentException("Expected " + FINALIZABLE_REFERENCE + ".");  }  Finalizer finalizer=new Finalizer(finalizableReferenceClass,queue,frqReference);  Thread thread=new Thread(finalizer);  thread.setName(Finalizer.class.getName());  thread.setDaemon(true);  try {    if (inheritableThreadLocals != null) {      inheritableThreadLocals.set(thread,null);    }  } catch (  Throwable t) {    logger.log(Level.INFO,"Failed to clear thread local values inherited by reference finalizer thread.",t);  }  thread.start();}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  static public int packDate(String dateString) throws NumberFormatException {  if (dateString.length() != 10 || dateString.charAt(4) != '-' || dateString.charAt(7) != '-')   throw new NumberFormatException("invalid YYYY-MM-DD date format: " + dateString);  int year=Integer.parseInt(dateString.substring(0,4));  int month=Integer.parseInt(dateString.substring(5,7));  int day=Integer.parseInt(dateString.substring(8,10));  return ((year & Person.YEAR_MASK) << Person.YEAR_SHIFT_BITS) | ((month & Person.MONTH_MASK) << Person.MONTH_SHIFT_BITS) | ((day & Person.DAY_MASK));}  }
class C{  public int pushJNIRef(Object ref){  if (ref == null) {    return 0;  } else {    if (VM.VerifyAssertions)     checkPush(ref,true);    JNIRefsTop+=BYTES_IN_ADDRESS;    if (JNIRefsTop >= JNIRefsMax) {      int arrayLengthWithoutFudge=2 * (JNIRefs.length() - JNIREFS_FUDGE_LENGTH);      replaceJNIRefs(createArrayForJNIRefs(arrayLengthWithoutFudge));      adjustJNIRefsMaxForNewArrayLength();    }    JNIRefs.set(JNIRefsTop >> LOG_BYTES_IN_ADDRESS,Magic.objectAsAddress(ref));    return JNIRefsTop;  }}  }
class C{  public RangeQueryBuilder from(Object from){  this.from=from;  return this;}  }
class C{  private void cleanupFolders(){  Log.d(TAG,"Resetting Radiobeacon folders to Android standard");  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mContext);  final String currentFolder=prefs.getString("data.dir","/org.openbmap");  final File from=new File(Environment.getExternalStorageDirectory() + File.separator + currentFolder+ File.separator);  final File to=new File(mContext.getExternalFilesDir(null).getAbsolutePath());  try {    FileUtils.moveFolder(from,to);  } catch (  final IOException e) {    Log.e(TAG,"Moving directory failed" + e.getMessage());  }  new MediaScanner(mContext,to);  final SharedPreferences.Editor prefEditor=prefs.edit();  prefEditor.putString(Preferences.KEY_MAP_FOLDER,mContext.getExternalFilesDir(null).getAbsolutePath() + File.separator + Preferences.MAPS_SUBDIR);  prefEditor.putString(Preferences.KEY_WIFI_CATALOG_FOLDER,mContext.getExternalFilesDir(null).getAbsolutePath() + File.separator + Preferences.CATALOG_SUBDIR);  prefEditor.apply();}  }
class C{  public RepositoryLocation(RepositoryLocation parent,String childName) throws MalformedRepositoryLocationException {  this.accessor=parent.accessor;  if (isAbsolute(childName)) {    initializeFromAbsoluteLocation(childName);  } else   if (childName.startsWith("" + SEPARATOR)) {    this.repositoryName=parent.repositoryName;    initializeAbsolutePath(childName);  } else {    this.repositoryName=parent.repositoryName;    String[] components=childName.split("" + SEPARATOR);    LinkedList<String> newComponents=new LinkedList<>();    for (    String pathComp : parent.path) {      if (pathComp != null && !pathComp.isEmpty()) {        newComponents.add(pathComp);      }    }    for (    String component : components) {      if (".".equals(component)) {      } else       if ("..".equals(component)) {        if (!newComponents.isEmpty()) {          newComponents.removeLast();        } else {          throw new IllegalArgumentException("Cannot resolve relative location '" + childName + "' with respect to '"+ parent+ "': Too many '..'");        }      } else {        newComponents.add(component);      }    }    this.path=newComponents.toArray(new String[newComponents.size()]);  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SLOOP;}  }
class C{  protected IntegerSyntax(int value){  this.value=value;}  }
class C{  @Override public VcsRevisionNumber fun(CommittedChangeList changeList){  return changeList instanceof VcsRevisionNumberAware ? ((VcsRevisionNumberAware)changeList).getRevisionNumber() : null;}  }
class C{  public Object touch(int row) throws PageException {  Object o=query.getAt(columnName,row,NullSupportHelper.NULL());  if (o != NullSupportHelper.NULL())   return o;  return query.setAt(columnName,row,new StructImpl());}  }
class C{  private Map<String,AnnotationMirror> annosInType(TypeElement typeElement){  return createImportedAnnotationsMap(ElementFilter.typesIn(typeElement.getEnclosedElements()));}  }
class C{  static public double k0e(double x) throws ArithmeticException {  double y;  if (x <= 0.0)   throw new ArithmeticException();  if (x <= 2.0) {    y=x * x - 2.0;    y=Arithmetic.chbevl(y,A_k0,10) - Math.log(0.5 * x) * i0(x);    return (y * Math.exp(x));  }  y=Arithmetic.chbevl(8.0 / x - 2.0,B_k0,25) / Math.sqrt(x);  return (y);}  }
class C{  public void close(){  if (dbf != null) {    dbf.close();  }}  }
class C{  public void stretch(int rate){  double[] tmp=new double[x.length * rate];  stretch(x,rate,tmp);  x=tmp;}  }
class C{  public SQLDataException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  private void isPositionIndex(int index){  if (index < 0 || index > size) {    throw new IndexOutOfBoundsException("Index [" + index + "] must be less than or equal to size ["+ size+ "]");  }}  }
class C{  public void readFrom(ChannelBuffer data){  this.portNumber=data.readShort();  if (this.hardwareAddress == null)   this.hardwareAddress=new byte[OFP_ETH_ALEN];  data.readBytes(this.hardwareAddress);  byte[] name=new byte[16];  data.readBytes(name);  int index=0;  for (  byte b : name) {    if (0 == b)     break;    ++index;  }  this.name=new String(Arrays.copyOf(name,index),Charset.forName("ascii"));  this.config=data.readInt();  this.state=data.readInt();  this.currentFeatures=data.readInt();  this.advertisedFeatures=data.readInt();  this.supportedFeatures=data.readInt();  this.peerFeatures=data.readInt();}  }
class C{  protected void readLSD(){  width=readShort();  height=readShort();  int packed=read();  gctFlag=(packed & 0x80) != 0;  gctSize=2 << (packed & 7);  bgIndex=read();  pixelAspect=read();}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.IMPLEMENTED_PROJECTS;}  }
class C{  public boolean isChecked(){  return mChecked;}  }
class C{  public INNER_JOIN INNER_JOIN(String tableToJoin){  return new INNER_JOIN(this,tableToJoin);}  }
class C{  public Vector3f(float x,float y,float z){  this.points[0]=x;  this.points[1]=y;  this.points[2]=z;}  }
class C{  public static String ensurePlainBase64(String base64){  if (base64 == null) {    return "";  }  if (base64.contains(BASE64)) {    return base64.substring(base64.indexOf(BASE64) + (BASE64 + ",").length(),base64.length());  }  return base64;}  }
class C{  public void testSequenceEventAfterCommand() throws Throwable {  ClientSequencer sequencer=new ClientSequencer(new ClientSessionState(UUID.randomUUID()));  long sequence=sequencer.nextRequest();  PublishRequest request=PublishRequest.builder().withSession(1).withEventIndex(1).withPreviousIndex(0).build();  CommandResponse response=CommandResponse.builder().withStatus(Response.Status.OK).withIndex(2).withEventIndex(1).build();  AtomicInteger run=new AtomicInteger();  sequencer.sequenceResponse(sequence,response,null);  sequencer.sequenceEvent(request,null);  assertEquals(run.get(),2);}  }
class C{  private void upload(boolean resume){  setUploadState(UploadState.IN_PROGRESS);  ResumableHttpUploadTask task=new ResumableHttpUploadTask(urlConnectionFactory,this,resume);  if (progressListener != null) {    progressNotifier=new Timer();    progressNotifier.schedule(new NotificationTask(this,progressListener,progressNotifier),0,progressIntervalMillis);  }  uploadResultFuture=executor.submit(task);}  }
class C{  public ShippingSpinnerAdapter(Context context,ShippingDialogFragment fragment){  this.context=context;  this.fragment=fragment;  layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}  }
class C{  public HierarchicType deepCloneWithoutSubtype(){  HierarchicType sup=(_superType == null) ? null : _superType.deepCloneWithoutSubtype();  HierarchicType result=new HierarchicType(_actualType,_rawClass,_genericType,sup,null);  if (sup != null) {    sup.setSubType(result);  }  return result;}  }
class C{  public static List<String> toPathParts(String encodedPath){  if (encodedPath == null || encodedPath.length() == 0) {    return null;  }  List<String> result=new ArrayList<String>();  int cur=0;  boolean notDone=true;  while (notDone) {    int slash=encodedPath.indexOf('/',cur);    notDone=slash != -1;    String sub;    if (notDone) {      sub=encodedPath.substring(cur,slash);    } else {      sub=encodedPath.substring(cur);    }    result.add(CharEscapers.decodeUri(sub));    cur=slash + 1;  }  return result;}  }
class C{  public boolean isOval(){  return oval;}  }
class C{  public void componentHidden(final ComponentEvent e){  setVisible(false);}  }
class C{  protected AppendResponse checkPreviousEntry(AppendRequest request){  if (request.logIndex() != 0 && context.getLog().isEmpty()) {    LOGGER.debug("{} - Rejected {}: Previous index ({}) is greater than the local log's last index ({})",context.getCluster().member().address(),request,request.logIndex(),context.getLog().lastIndex());    return AppendResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withSucceeded(false).withLogIndex(context.getLog().lastIndex()).build();  } else   if (request.logIndex() != 0 && context.getLog().lastIndex() != 0 && request.logIndex() > context.getLog().lastIndex()) {    LOGGER.debug("{} - Rejected {}: Previous index ({}) is greater than the local log's last index ({})",context.getCluster().member().address(),request,request.logIndex(),context.getLog().lastIndex());    return AppendResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withSucceeded(false).withLogIndex(context.getLog().lastIndex()).build();  }  return appendEntries(request);}  }
class C{  @Override public boolean isBold(String id){  return toolTipInfos.get(id) == null;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public void moveUser(int userId,int deptDest,String entidad) throws Exception {  boolean commit=false;  boolean inTrans=false;  UsersTable tbl=new UsersTable();  DbConnection dbConn=new DbConnection();  if (_logger.isDebugEnabled())   _logger.debug("moveUser");  try {    dbConn.open(DBSessionManager.getSession());    dbConn.beginTransaction();    inTrans=true;    DbUpdateFns.updateLongInteger(dbConn,tbl.getBaseTableName(),tbl.getDeptIdUserColumnName(),deptDest,tbl.getLoadBaseQual(userId));    commit=true;  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    if (inTrans)     dbConn.endTransaction(commit);    dbConn.close();  }}  }
class C{  private synchronized void writeXMLFile(){  try {    Source source=new DOMSource(doc);    Result result=new StreamResult(mailTemplateFile);    Transformer xformer=TransformerFactory.newInstance().newTransformer();    xformer.transform(source,result);  } catch (  TransformerConfigurationException e) {    e.printStackTrace();  }catch (  TransformerException e) {    e.printStackTrace();  }}  }
class C{  public void visit(String location){  TurbolinksLog.d("visit called");  this.location=location;  validateRequiredParams();  if (!turbolinksIsReady || webViewAttachedToNewParent) {    initProgressView();  }  if (turbolinksIsReady) {    visitCurrentLocationWithTurbolinks();  }  if (!turbolinksIsReady && !coldBootInProgress) {    TurbolinksLog.d("Cold booting: " + location);    webView.loadUrl(location);  }  restoreWithCachedSnapshot=false;}  }
class C{  @Override public RuntimeAnnotationHandler scan(Class<?> clazz){  Util.notNull("clazz",clazz);  PersistenceContextHandler handler=null;  ArrayList<PersistenceContext> fieldAnnotations=new ArrayList<>();  ArrayList<Field> fields=new ArrayList<>();  for (  Field field : clazz.getDeclaredFields()) {    PersistenceContext fieldAnnotation=field.getAnnotation(PersistenceContext.class);    if (fieldAnnotation != null) {      fieldAnnotations.add(fieldAnnotation);      fields.add(field);    }  }  ArrayList<PersistenceContext> methodAnnotations=new ArrayList<>();  ArrayList<Method> methods=new ArrayList<>();  for (  Method method : clazz.getDeclaredMethods()) {    PersistenceContext methodAnnotation=method.getAnnotation(PersistenceContext.class);    if (methodAnnotation != null) {      methodAnnotations.add(methodAnnotation);      methods.add(method);    }  }  if (!fieldAnnotations.isEmpty() || !methodAnnotations.isEmpty()) {    handler=new PersistenceContextHandler(methods.toArray(new Method[0]),methodAnnotations.toArray(new PersistenceContext[0]),fields.toArray(new Field[0]),fieldAnnotations.toArray(new PersistenceContext[0]));  }  return handler;}  }
class C{  private static void sort(double[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        double ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        double a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      double last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    double t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    double t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    double t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    double t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    double pivot1=a[e2];    double pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      double ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        double ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=a[great];            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    double pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      double ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  private void validateVarrayStoragePorts(Collection<URI> storageSystemURIs,VirtualArray varray,Collection<URI> volumes,List<URI> allHosts){  Set<URI> vplexStorageSystemURIs=new HashSet<URI>();  if (!allHosts.isEmpty()) {    for (    URI uri : volumes) {      BlockObject blockObject=BlockObject.fetch(_dbClient,uri);      if (blockObject == null) {        continue;      }      StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,blockObject.getStorageController());      if (storageSystemURIs.contains(storageSystem.getId()) && storageSystem.getSystemType().equals(DiscoveredDataObject.Type.vplex.name())) {        vplexStorageSystemURIs.add(storageSystem.getId());      }    }  }  ExportGroupServiceApi exportGroupServiceApi=null;  if (!vplexStorageSystemURIs.isEmpty()) {    exportGroupServiceApi=getExportGroupServiceImpl(DiscoveredDataObject.Type.vplex.name());  } else {    exportGroupServiceApi=getExportGroupServiceImpl(ExportGroupServiceApi.DEFAULT);  }  exportGroupServiceApi.validateVarrayStoragePorts(vplexStorageSystemURIs,varray,allHosts);}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public void removeAllStickyEventsLocal(){  eventBus.removeAllStickyEvents();}  }
class C{  @Before public void onSetup(){  em.persist(new UserPreference(KNOWN_USER,"testKey"));}  }
class C{  @SuppressWarnings("unchecked") private void parseMapIntoResultSet(String key,Heading heading,List<Object> row,boolean explode,String parent,Map<String,Heading> headMap,Object... nestedObjects) throws SQLException {  Heading nestedHeading=headMap.get(parent);  if (nestedHeading == null) {    nestedHeading=new Heading().setAllColls(true);    headMap.put(parent,nestedHeading);  }  ESResultSet nestedRs=new ESResultSet(nestedHeading,nestedObjects.length,1000);  for (  Object object : nestedObjects) {    parse((Map<String,?>)object,null,nestedRs,explode,parent,headMap);  }  Column col=heading.getColumnByLabel(key);  if (col == null) {    col=new Column(key).setSqlType(Types.JAVA_OBJECT);    heading.add(col);  }  row.set(col.getIndex(),nestedRs);}  }
class C{  public RichText withBold(){  this.formats.add(Format.BOLD);  return this;}  }
class C{  public SCWarrant(String sName,String uName,long TTP){  super(sName.toUpperCase(),uName);  log.debug("new SCWarrant " + uName);  timeToPlatform=TTP;}  }
class C{  protected List<Message> createConcurrentList(){  return Collections.synchronizedList(new ArrayList<Message>());}  }
class C{  public static void trimLines(final Document doc,final int lineCount){  if (doc.getLength() < lineCount) {    return;  }  try {    final String text=doc.getText(0,doc.getLength());    int returnsFound=0;    for (int i=text.length() - 1; i >= 0; i--) {      if (text.charAt(i) == '\n') {        returnsFound++;      }      if (returnsFound == lineCount) {        doc.remove(0,i);        return;      }    }  } catch (  final BadLocationException e) {    ClientLogger.logQuietly(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:14.039 -0400",hash_original_method="C9745E60A32FB8CF1BBD26BB2C1CD114",hash_generated_method="254C1FE4A52017B981598738104F2DEA") public boolean hasExpired(){  if (maxAge == -1l) {    return false;  }  boolean expired=false;  if (maxAge <= 0l) {    expired=true;  }  return expired;}  }
class C{  protected Formula doEditFormula(Formula formula){  FormulaWizard wizard=new FormulaWizard(section.getText(),section.getDescription());  wizard.setFormula(formula);  WizardDialog dialog=new WizardDialog(getTableViewer().getTable().getShell(),wizard);  dialog.setHelpAvailable(true);  if (Window.OK == dialog.open()) {    return wizard.getFormula();  } else {    return null;  }}  }
class C{  public void actionPerformed(ActionEvent e){  String action=e.getActionCommand();  if (action == null || action.length() == 0)   return;  log.info("PosSubCheckout - actionPerformed: " + action);  if (action.equals("Summary")) {  } else   if (action.equals("CashRegisterFunction")) {    CashSubFunctions csf=new CashSubFunctions(p_posPanel);    csf.setVisible(true);  } else   if (e.getSource() == f_cashGiven)   p_posPanel.updateInfo();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getCovMatrix() == null) {    throw new NullPointerException();  }  if (getSemPm() == null) {    throw new NullPointerException();  }}  }
class C{  public static _ModelItemTypeEnum fromString(final String value) throws SOAPSerializationException {  return (_ModelItemTypeEnum)Enumeration.fromString(value,_ModelItemTypeEnum.VALUES_TO_INSTANCES);}  }
class C{  public int readLittleEndianUnsignedIntToInt(){  int result=readLittleEndianInt();  if (result < 0) {    throw new IllegalStateException("Top bit not zero: " + result);  }  return result;}  }
class C{  public void prepare(){  reset();}  }
class C{  public static Double[] createDoubleArrayFromTo(Double min,Double max,Double step){  if (min > max) {    return null;  }  int range=(int)Math.ceil((max - min) / step + 1);  Double[] returnArray=new Double[range];  for (int i=0; i < range; i++) {    returnArray[i]=min + i * step;  }  return returnArray;}  }
class C{  public static StoredCellProbs serializableInstance(){  return new StoredCellProbs(new ArrayList<Node>());}  }
class C{  private double[] prune(Tree tree,NodeRef node,ColourChangeMatrix mm){  double[] p=new double[colourCount];  if (tree.isExternal(node)) {    p[getColour(node)]=1.0;  } else {    NodeRef leftChild=tree.getChild(node,0);    NodeRef rightChild=tree.getChild(node,1);    double[] left=prune(tree,leftChild,mm);    double[] right=prune(tree,rightChild,mm);    double nodeHeight=tree.getNodeHeight(node);    double leftTime=nodeHeight - tree.getNodeHeight(tree.getChild(node,0));    double rightTime=nodeHeight - tree.getNodeHeight(tree.getChild(node,1));    double maxp=0.0;    for (int i=0; i < colourCount; i++) {      double leftSum=0.0;      double rightSum=0.0;      for (int j=0; j < colourCount; j++) {        leftSum+=mm.forwardTimeEvolution(i,j,leftTime) * left[j];        rightSum+=mm.forwardTimeEvolution(i,j,rightTime) * right[j];      }      p[i]=leftSum * rightSum;      if (p[i] > maxp) {        maxp=p[i];      }    }    if (maxp < 1.0e-100) {      for (int i=0; i < colourCount; i++) {        p[i]*=1.0e+100;      }      logNodePartialsRescaling-=Math.log(1.0e+100);    }  }  nodePartials[node.getNumber()]=p;  if (debugNodePartials) {    prettyPrint("Node " + node.getNumber() + " prune=",p);  }  return p;}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public LineSet beginAt(int index){  if (index < 0)   Log.e(TAG,"Index can't be negative.",new IllegalArgumentException());  mBegin=index;  return this;}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  @Override public void clear(){  super.clear();  Object[] keys=_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    keys[i]=null;    values[i]=0;  }}  }
class C{  public DNameConstraints(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DNameConstraints.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  @ObjectiveCName("clearChatCommandWithPeer:") public Command<Void> clearChat(Peer peer){  return null;}  }
class C{  public void testMessageToPut(){  System.out.println("messageToPut");}  }
class C{  public FieldInvertState(String name){  this.name=name;}  }
class C{  public WicketCleanCartCommandImpl(final ShoppingCartCommandRegistry registry,final CartRepository cartRepository){  super(registry);  this.cartRepository=cartRepository;}  }
class C{  private void checkShutdownAccess(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkPermission(shutdownPerm);    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      for (      Worker w : workers)       security.checkAccess(w.thread);    }  finally {      mainLock.unlock();    }  }}  }
class C{  public boolean isSet(String name){  return (values.get(name) != null);}  }
class C{  public Process(final Reader in) throws IOException, XMLException {  initContext();  readProcess(in);}  }
class C{  void flushObjectValues(final boolean reinit){  if (pdfData != null && !reinit) {    pdfData.flushTextList();  }  if (pdfImages != null && reinit) {    pdfImages.clearImageData();  }}  }
class C{  private void scrollIntoSlots(){  Log.d(TAG,"scrollIntoSlots");  if (getChildCount() == 0 || mSelectedChild == null)   return;  int selectedCenter=0;  int targetCenter=0;  if (mOrientation == HORIZONTAL) {    selectedCenter=getHorizontalCenterOfView(mSelectedChild);    targetCenter=getHorizontalCenterOfGallery();  } else {    selectedCenter=getVerticalCenterOfView(mSelectedChild);    targetCenter=getVerticalCenterOfGallery();  }  int scrollAmount=targetCenter - selectedCenter;  if (scrollAmount != 0) {    mFlingRunnable.startUsingDistance(scrollAmount);  } else {    onFinishedMovement();  }}  }
class C{  private Volume verifyRequestedVolumeSupportsMigration(URI volumeURI){  Volume vplexVolume=_permissionsHelper.getObjectById(volumeURI,Volume.class);  ArgValidator.checkEntity(vplexVolume,volumeURI,false);  StorageSystem vplexSystem=null;  URI vplexSystemURI=vplexVolume.getStorageController();  if (vplexSystemURI == null) {    throw APIException.badRequests.requestedVolumeIsNotVplexVolume(volumeURI);  } else {    vplexSystem=_permissionsHelper.getObjectById(vplexSystemURI,StorageSystem.class);    if (!DiscoveredDataObject.Type.vplex.name().equals(vplexSystem.getSystemType())) {      throw APIException.badRequests.requestedVolumeIsNotVplexVolume(volumeURI);    }  }  return vplexVolume;}  }
class C{  public TWord(String _word){  token=_word.replaceAll(" ","_");}  }
class C{  public MqttScriptIO(final IMqttConnection connection,final IKBus eventBus,final Script script,final Executor executor){  super(script,executor);  this.connection=connection;}  }
class C{  public boolean rowUpdated() throws SQLException {  return crsInternal.rowUpdated();}  }
class C{  public static String toString(long[] self){  return InvokerHelper.toString(self);}  }
class C{  private static void WriteCloseRead() throws Throwable {  Random random=new Random(new Date().getTime());  PairedInputStream pis=new PairedInputStream();  InflaterInputStream iis=new InflaterInputStream(pis);  PairedOutputStream pos=new PairedOutputStream(pis);  pis.setPairedOutputStream(pos);  byte[] data=new byte[random.nextInt(1024 * 1024)];  byte[] buf=new byte[data.length];  random.nextBytes(data);  try (DeflaterOutputStream dos=new DeflaterOutputStream(pos,true)){    dos.write(data);  }   check(readFully(iis,buf,buf.length));  check(Arrays.equals(data,buf));}  }
class C{  public HttpRequestEvent(Object source,String request,OutputStream out){  super(source);  this.request=request;  this.output=out;}  }
class C{  public CreateIndexRequestBuilder addCustom(IndexMetaData.Custom custom){  request.custom(custom);  return this;}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public DirectedPath(){  super();}  }
class C{  @Override public synchronized ConnectionImpl createConnectionForHost(String hostPortSpec) throws SQLException {  ConnectionImpl conn=super.createConnectionForHost(hostPortSpec);  this.liveConnections.put(hostPortSpec,conn);  this.connectionsToHostsMap.put(conn,hostPortSpec);  this.totalPhysicalConnections++;  return conn;}  }
class C{  @Override public Object clone(){  Object clone=null;  try {    clone=super.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();  }  return clone;}  }
class C{  public void testBug68307() throws Exception {  createFunction("testBug68307_func","(func_param_in INT) RETURNS INT DETERMINISTIC RETURN 1");  createProcedure("testBug68307_proc","(IN proc_param_in INT, OUT proc_param_out INT, INOUT proc_param_inout INT) SELECT 1");  DatabaseMetaData testDbMetaData=conn.getMetaData();  checkFunctionColumnTypeForBug68307("MySQL",testDbMetaData);  checkProcedureColumnTypeForBug68307("MySQL",testDbMetaData);  Connection connUseIS=getConnectionWithProps("useInformationSchema=true");  testDbMetaData=connUseIS.getMetaData();  checkFunctionColumnTypeForBug68307("I__S",testDbMetaData);  checkProcedureColumnTypeForBug68307("I__S",testDbMetaData);  connUseIS.close();}  }
class C{  public void done(){  isCompleted=true;  if (later != null) {synchronized (later) {      later.notify();    }  }  earlier=null;  later=null;}  }
class C{  public void createConstraints(TableDefinition tableDefinition) throws EclipseLinkException {  boolean usesBatchWriting=false;  if (getSession().getPlatform().usesBatchWriting()) {    usesBatchWriting=true;    getSession().getPlatform().setUsesBatchWriting(false);  }  try {    if (shouldWriteToDatabase()) {      tableDefinition.createConstraintsOnDatabase(getSession());    } else {      tableDefinition.setCreateSQLFiles(createSQLFiles);      tableDefinition.createConstraints(getSession(),createSchemaWriter);    }  }  finally {    if (usesBatchWriting) {      getSession().getPlatform().setUsesBatchWriting(true);    }  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void removeListener(final IButtonTabListener listener){  m_listeners.removeListener(listener);}  }
class C{  public static double rejection(Function fun,double maxFun,double min,double max){  double try_x;  double try_y;  do {    try_x=min + raw() * (max - min);    try_y=raw() * maxFun;  } while (fun.f(try_x) < try_y);  return try_x;}  }
class C{  public Minutes minus(Minutes minutes){  if (minutes == null) {    return this;  }  return minus(minutes.getValue());}  }
class C{  @Override protected void doAction(){  showTipOfTheDay();}  }
class C{  public static List<Type> types(List<? extends JCTree> trees){  ListBuffer<Type> ts=new ListBuffer<Type>();  for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail)   ts.append(l.head.type);  return ts.toList();}  }
class C{  protected static void fillAllFields(final Product product,final LocalizerFacade facade,final VOService voProduct,PerformanceHint scope){  fillBaseFields(product,facade,voProduct,scope);  voProduct.setConfiguratorUrl(product.getProductTemplate().getConfiguratorUrl());  voProduct.setCustomTabUrl(product.getProductTemplate().getCustomTabUrl());  long key=product.getKey();  final Organization vendor=getSupplier(product);  if (vendor != null && !vendor.getGrantedRoleTypes().contains(OrganizationRoleType.SUPPLIER)) {    key=product.getTemplateOrSelf().getKey();  }  String marketingDescription=facade.getText(key,LocalizedObjectTypes.PRODUCT_MARKETING_DESC);  voProduct.setDescription(marketingDescription);  String customTabName=facade.getText(key,LocalizedObjectTypes.PRODUCT_CUSTOM_TAB_NAME);  voProduct.setCustomTabName(customTabName);  final ParameterSet parameterSet;  if (product.getType() == ServiceType.PARTNER_TEMPLATE) {    parameterSet=product.getTemplate().getParameterSet();  } else {    parameterSet=product.getParameterSet();  }  voProduct.setParameters(ParameterAssembler.toVOParameters(parameterSet,facade));  TechnicalProduct technicalProduct=product.getTechnicalProduct();  if (voProduct.getPriceModel() == null) {    VOPriceModel voPM=new VOPriceModel();    String licenseDescription=facade.getText(technicalProduct.getKey(),LocalizedObjectTypes.PRODUCT_LICENSE_DESC);    voPM.setLicense(licenseDescription);    voProduct.setPriceModel(voPM);  }  voProduct.setServiceType(product.getType());}  }
class C{  public long sequenceNumber(){  return token.sequenceNumber();}  }
class C{  protected JsonToken _initForReading(JsonParser jp) throws IOException, JsonParseException, JsonMappingException {  JsonToken t=jp.getCurrentToken();  if (t == null) {    t=jp.nextToken();    if (t == null) {      throw new EOFException("No content to map to Object due to end of input");    }  }  return t;}  }
class C{  public void forwardEvent(AppEvent event){  dispatch(event);}  }
class C{  public boolean load(int ID){  if (ID == 0) {    C_ValidCombination_ID=0;    Combination="";    Description="";    return true;  }  if (ID == C_ValidCombination_ID)   return true;  final String whereClause="C_ValidCombination_ID=?";  MAccount account=new Query(Env.getCtx(),I_C_ValidCombination.Table_Name,whereClause,null).setParameters(ID).firstOnly();  if (account == null)   return false;  C_ValidCombination_ID=account.getC_ValidCombination_ID();  Combination=account.getCombination();  Description=account.getDescription();  return true;}  }
class C{  public ServiceCall<TranslationModel> createModel(CreateModelOptions options){  Validator.notNull(options,"options cannot be null");  Validator.notEmpty(options.baseModelId(),"options.baseModelId cannot be null or empty");  final RequestBuilder requestBuilder=RequestBuilder.post(PATH_MODELS);  requestBuilder.query(BASE_MODEL_ID,options.baseModelId());  if (options.name() != null) {    requestBuilder.query(NAME,options.name());  }  final MultipartBody.Builder bodyBuilder=new MultipartBody.Builder().setType(MultipartBody.FORM);  if (options.forcedGlossary() != null) {    bodyBuilder.addFormDataPart(FORCED_GLOSSARY,options.forcedGlossary().getName(),RequestBody.create(HttpMediaType.BINARY_FILE,options.forcedGlossary()));  }  if (options.monolingualCorpus() != null) {    bodyBuilder.addFormDataPart(MONOLINGUAL_CORPUS,options.monolingualCorpus().getName(),RequestBody.create(HttpMediaType.BINARY_FILE,options.monolingualCorpus()));  }  if (options.parallelCorpus() != null) {    bodyBuilder.addFormDataPart(PARALLEL_CORPUS,options.parallelCorpus().getName(),RequestBody.create(HttpMediaType.BINARY_FILE,options.parallelCorpus()));  }  return createServiceCall(requestBuilder.body(bodyBuilder.build()).build(),ResponseConverterUtils.getObject(TranslationModel.class));}  }
class C{  private void buildString(TreeNode node,StringBuilder sb){  if (node == null) {    sb.append(NULLNODE).append(SPLITER);    return;  }  sb.append(node.val).append(SPLITER);  buildString(node.left,sb);  buildString(node.right,sb);}  }
class C{  public static void deleteTracks(final Context context,final long[] list,boolean showNotification){  if (list == null) {    return;  }  final String[] projection=new String[]{BaseColumns._ID,MediaColumns.DATA,AudioColumns.ALBUM_ID};  final StringBuilder selection=new StringBuilder();  selection.append(BaseColumns._ID + " IN (");  for (int i=0; i < list.length; i++) {    selection.append(list[i]);    if (i < list.length - 1) {      selection.append(",");    }  }  selection.append(")");  final Cursor c=context.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,projection,selection.toString(),null,null);  if (c != null) {    c.moveToFirst();    while (!c.isAfterLast()) {      final long id=c.getLong(0);      removeTrack(id);      FavoritesStore.getInstance(context).removeItem(id);      RecentStore.getInstance(context).removeItem(c.getLong(2));      removeSongFromAllPlaylists(context,id);      c.moveToNext();    }    context.getContentResolver().delete(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,selection.toString(),null);    FileSystem fs=Platforms.fileSystem();    c.moveToFirst();    while (!c.isAfterLast()) {      final String name=c.getString(1);      try {        final File f=new File(name);        if (!fs.delete(f)) {          Log.e("MusicUtils","Failed to delete file " + name);        }        c.moveToNext();      } catch (      final Throwable ex) {        c.moveToNext();      }    }    c.close();    UIUtils.broadcastAction(context,Constants.ACTION_FILE_ADDED_OR_REMOVED,new UIUtils.IntentByteExtra(Constants.EXTRA_REFRESH_FILE_TYPE,Constants.FILE_TYPE_AUDIO));  }  if (showNotification) {    try {      final String message=makeLabel(context,R.plurals.NNNtracksdeleted,list.length);      AppMsg.makeText(context,message,AppMsg.STYLE_CONFIRM).show();    } catch (    Throwable ignored) {    }  }  context.getContentResolver().notifyChange(Uri.parse("content://media"),null);  refresh();}  }
class C{  static GeoBBox fromBox(final double minLatitude,final double maxLatitude,final double minLongitude,final double maxLongitude){  GeoUtils.checkLatitude(minLatitude);  GeoUtils.checkLongitude(minLongitude);  GeoUtils.checkLatitude(maxLatitude);  GeoUtils.checkLongitude(maxLongitude);  return GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84,Geo3DUtil.fromDegrees(maxLatitude),Geo3DUtil.fromDegrees(minLatitude),Geo3DUtil.fromDegrees(minLongitude),Geo3DUtil.fromDegrees(maxLongitude));}  }
class C{  @Override protected void prepareWrite(WritableByteChannel channel) throws Exception {  os=Channels.newOutputStream(channel);}  }
class C{  public static void print(int[] list){  int max=max(list);  while (max > 0) {    System.out.println();    for (int i=0; i < list.length; i++) {      if (list[i] >= max) {        System.out.print("O");      } else       System.out.print(" ");    }    max--;  }  System.out.println();}  }
class C{  public void testRouting(){  Message m1=new Message(h1,h2,msgId2,1);  h1.createNewMessage(m1);  Message m2=new Message(h1,h3,msgId3,1);  h1.createNewMessage(m2);  Message m3=new Message(h1,h4,msgId4,1);  h1.createNewMessage(m3);  Message m4=new Message(h1,h6,"dummy",1);  h1.createNewMessage(m4);  Message m5=new Message(h1,h5,msgId5,1);  h1.createNewMessage(m5);  Message m6=new Message(h4,h1,"d1",1);  h4.createNewMessage(m6);  ProphetRouter r4=(ProphetRouter)h4.getRouter();  ProphetRouter r5=(ProphetRouter)h5.getRouter();  checkCreates(6);  h4.connect(h5);  assertEquals(ProphetRouter.P_INIT,r4.getPredFor(h5));  assertEquals(ProphetRouter.P_INIT,r5.getPredFor(h4));  updateAllNodes();  assertFalse(mc.next());  disconnect(h5);  h5.connect(h3);  h1.connect(h3);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(msgId3,mc.getLastMsg().getId());  assertEquals(h1,mc.getLastFrom());  assertFalse(mc.next());  clock.advance(10);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(msgId3,mc.getLastMsg().getId());  assertTrue(mc.getLastFirstDelivery());  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(msgId5,mc.getLastMsg().getId());  assertEquals(h1,mc.getLastFrom());  assertFalse(mc.next());  clock.advance(10);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(msgId5,mc.getLastMsg().getId());  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(msgId4,mc.getLastMsg().getId());  assertEquals(h1,mc.getLastFrom());  assertFalse(mc.next());  doRelay();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(msgId5,mc.getLastMsg().getId());  assertEquals(h3,mc.getLastFrom());  doRelay();  assertTrue(mc.getLastFirstDelivery());  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(msgId4,mc.getLastMsg().getId());  assertEquals(h3,mc.getLastFrom());  doRelay();  assertFalse(mc.next());}  }
class C{  public String compressOutputTipText(){  return "Optional compression of the output data";}  }
class C{  private boolean shouldAnnounceStream(int streamType){switch (streamType) {case AudioManager.STREAM_MUSIC:    return !mAudioManager.isMusicActive();case AudioManager.STREAM_VOICE_CALL:  return false;default :return true;}}  }
class C{  private static boolean findActivity(List<LauncherActivityInfoCompat> apps,ComponentName component){  for (  LauncherActivityInfoCompat info : apps) {    if (info.getComponentName().equals(component)) {      return true;    }  }  return false;}  }
class C{  private int findEndPosition(@NonNull String tmpTotal,@NonNull SpannableStringBuilder ssb,@NonNull SpannableStringBuilder tmp){  String tmpTmpTotal=tmpTotal;  int position=tmpTmpTotal.indexOf(KEY_1_FOOTNOTE);  if (position == -1) {    return -1;  } else {    if (checkInInlineCode(ssb,tmp.length() + position,KEY_1_FOOTNOTE.length())) {      StringBuilder sb=new StringBuilder(tmpTmpTotal.substring(0,position)).append("$").append(tmpTmpTotal.substring(position + KEY_1_FOOTNOTE.length(),tmpTmpTotal.length()));      return findBeginPosition(sb.toString(),ssb,tmp);    } else {      return position;    }  }}  }
class C{  public boolean fetch() throws IOException {  if (currentOffset >= lastOffset) {    return false;  }  long tempTime=System.currentTimeMillis();  TopicAndPartition topicAndPartition=new TopicAndPartition(kafkaRequest.getTopic(),kafkaRequest.getPartition());  log.debug("\nAsking for offset : " + (currentOffset));  PartitionFetchInfo partitionFetchInfo=new PartitionFetchInfo(currentOffset,fetchBufferSize);  HashMap<TopicAndPartition,PartitionFetchInfo> fetchInfo=new HashMap<TopicAndPartition,PartitionFetchInfo>();  fetchInfo.put(topicAndPartition,partitionFetchInfo);  FetchRequest fetchRequest=new FetchRequest(CamusJob.getKafkaFetchRequestCorrelationId(context),CamusJob.getKafkaClientName(context),CamusJob.getKafkaFetchRequestMaxWait(context),CamusJob.getKafkaFetchRequestMinBytes(context),fetchInfo);  FetchResponse fetchResponse=null;  try {    fetchResponse=simpleConsumer.fetch(fetchRequest);    if (fetchResponse.hasError()) {      log.info("Error encountered during a fetch request from Kafka");      log.info("Error Code generated : " + fetchResponse.errorCode(kafkaRequest.getTopic(),kafkaRequest.getPartition()));      return false;    } else {      ByteBufferMessageSet messageBuffer=fetchResponse.messageSet(kafkaRequest.getTopic(),kafkaRequest.getPartition());      lastFetchTime=(System.currentTimeMillis() - tempTime);      log.debug("Time taken to fetch : " + (lastFetchTime / 1000) + " seconds");      log.debug("The size of the ByteBufferMessageSet returned is : " + messageBuffer.sizeInBytes());      int skipped=0;      totalFetchTime+=lastFetchTime;      messageIter=messageBuffer.iterator();      Iterator<MessageAndOffset> messageIter2=messageBuffer.iterator();      MessageAndOffset message=null;      while (messageIter2.hasNext()) {        message=messageIter2.next();        if (message.offset() < currentOffset) {          skipped++;        } else {          log.debug("Skipped offsets till : " + message.offset());          break;        }      }      log.debug("Number of offsets to be skipped: " + skipped);      while (skipped != 0) {        MessageAndOffset skippedMessage=messageIter.next();        log.debug("Skipping offset : " + skippedMessage.offset());        skipped--;      }      if (!messageIter.hasNext()) {        System.out.println("No more data left to process. Returning false");        messageIter=null;        return false;      }      return true;    }  } catch (  Exception e) {    log.info("Exception generated during fetch");    e.printStackTrace();    return false;  }}  }
class C{  public final AssertSubscriber<T> assertErrorWith(Consumer<? super Throwable> expectation){  assertNotComplete();  int s=errors.size();  if (s == 0) {    throw new AssertionError("No error",null);  }  if (s == 1) {    expectation.accept(errors.get(0));  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  protected void triggerHostToHostCopyService(final State current,final String datastore){  Operation.CompletionHandler handler=null;  ImageHostToHostCopyService.State imageHostToHostCopyServiceStartState=this.buildImageHostToHostCopyServiceStartState(current,datastore);  this.startImageHostToHostCopyService(imageHostToHostCopyServiceStartState,handler);}  }
class C{  Node[] genTrees(int depth,int ntrees){  Node[] trees=new Node[ntrees];  for (int i=0; i < ntrees; i++) {    trees[i]=new Node(null,depth);  }  return trees;}  }
class C{  public void clear(){  size=0;}  }
class C{  public void stop(){  m_progressPanel.stop();  CGlobalProgressManager.instance().remove(this);}  }
class C{  private boolean parseIntent(){  Intent intent=getIntent();  if (intent != null && intent.getAction().equals(BluetoothAdapter.ACTION_REQUEST_ENABLE)) {    mEnableOnly=true;  } else   if (intent != null && intent.getAction().equals(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE)) {    mTimeout=intent.getIntExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION,BluetoothDiscoverableEnabler.DEFAULT_DISCOVERABLE_TIMEOUT);    Log.d(TAG,"Setting Bluetooth Discoverable Timeout = " + mTimeout);    if (mTimeout < 0 || mTimeout > MAX_DISCOVERABLE_TIMEOUT) {      mTimeout=BluetoothDiscoverableEnabler.DEFAULT_DISCOVERABLE_TIMEOUT;    }  } else {    Log.e(TAG,"Error: this activity may be started only with intent " + BluetoothAdapter.ACTION_REQUEST_ENABLE + " or "+ BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);    setResult(RESULT_CANCELED);    return true;  }  LocalBluetoothManager manager=LocalBluetoothManager.getInstance(this);  if (manager == null) {    Log.e(TAG,"Error: there's a problem starting Bluetooth");    setResult(RESULT_CANCELED);    return true;  }  mLocalAdapter=manager.getBluetoothAdapter();  return false;}  }
class C{  private static void fillModuleBean(final ModuleBean modBean,final Path releaseFile) throws Exception {  final String fileName=releaseFile.getFileName().toString();  final VersionBean version=VersionBean.fromString(fileName.substring(fileName.indexOf('-') + 1,fileName.lastIndexOf('.')));  modBean.setVersion(version);  modBean.setUrlList(Arrays.asList("https://scelightop.appspot.com/mod/" + fileName));  modBean.setArchiveSize(Files.size(releaseFile));  final FileBean archiveFile=new FileBean();  archiveFile.setPath(releaseFile.getFileName().toString());  archiveFile.setSha256(LUtils.calculateFileSha256(releaseFile));  if (archiveFile.getSha256().isEmpty())   throw new RuntimeException("Could not calculate archive SHA-256: " + releaseFile);  modBean.setArchiveFile(archiveFile);  final List<FileBean> fileList=new ArrayList<>();  final InputStream in=Files.newInputStream(releaseFile);  try (final ZipInputStream zipin=new ZipInputStream(in)){    ZipEntry ze;    while ((ze=zipin.getNextEntry()) != null) {      if (ze.isDirectory())       continue;      final FileBean fileBean=new FileBean();      fileBean.setPath(ze.getName());      fileBean.setSha256(LUtils.calculateStreamSha256(zipin,ze.getSize()));      if (fileBean.getSha256().isEmpty())       throw new RuntimeException("Could not calculate file SHA-256: " + fileBean.getPath());      fileList.add(fileBean);    }  }   modBean.setFileList(fileList);}  }
class C{  public static int EAGAIN(){  return Errno.EAGAIN.intValue();}  }
class C{  protected Instances removeIgnored(Instances data) throws Exception {  Instances result=data;  if (m_ignoreAttributesRange != null || data.classIndex() >= 0) {    result=new Instances(data);    m_removeAttributes=new Remove();    String rangeString="";    if (m_ignoreAttributesRange != null) {      rangeString+=m_ignoreAttributesRange.getRanges();    }    if (data.classIndex() >= 0) {      if (rangeString.length() > 0) {        rangeString+="," + (data.classIndex() + 1);      } else {        rangeString="" + (data.classIndex() + 1);      }    }    ((Remove)m_removeAttributes).setAttributeIndices(rangeString);    ((Remove)m_removeAttributes).setInvertSelection(false);    m_removeAttributes.setInputFormat(data);    result=Filter.useFilter(data,m_removeAttributes);  }  return result;}  }
class C{  public void clear(){  requiredTEs.clear();  optionalTEs.clear();  constraints.clear();}  }
class C{  public Vector multiply(int x,int y,int z){  return new Vector(this.x * x,this.y * y,this.z * z);}  }
class C{  public int updateByExample(User record,UserExample example) throws SQLException {  UpdateByExampleParms parms=new UpdateByExampleParms(record,example);  int rows=sqlMapClient.update("t_user.ibatorgenerated_updateByExample",parms);  return rows;}  }
class C{  public void testRuntimeArgs() throws Exception {  AbstractInstalledLocalContainerStub container=new AbstractInstalledLocalContainerStub(configuration);  container.getConfiguration().setProperty(GeneralPropertySet.RUNTIME_ARGS,"hello -world");  container.startInternal();  JvmLauncher java=container.getJava();  assertTrue("Expected runtime arguments not contained in the java commandline.",java.getCommandLine().contains("hello -world"));}  }
class C{  public AggregateableEvaluation(Evaluation eval) throws Exception {  super(eval.m_Header,eval.m_CostMatrix);  m_NoPriors=eval.m_NoPriors;  m_NumTrainClassVals=eval.m_NumTrainClassVals;  m_TrainClassVals=eval.m_TrainClassVals;  m_TrainClassWeights=eval.m_TrainClassWeights;  m_PriorEstimator=eval.m_PriorEstimator;  m_MinTarget=eval.m_MinTarget;  m_MaxTarget=eval.m_MaxTarget;  m_ClassPriorsSum=eval.m_ClassPriorsSum;  m_ClassPriors=eval.m_ClassPriors;  m_MinTarget=eval.m_MinTarget;  m_MaxTarget=eval.m_MaxTarget;  m_TrainClassVals=eval.m_TrainClassVals;  m_TrainClassWeights=eval.m_TrainClassWeights;  m_NumTrainClassVals=eval.m_NumTrainClassVals;}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public MemberName(Field fld){  this(fld,false);}  }
class C{  public boolean isAnnotation(){  return false;}  }
class C{  public ProteinScoringMatrix(String matrixName) throws InvalidParamsException, IOException {  final String mat=matrixName.toUpperCase(Locale.getDefault());  final int len=Protein.values().length;  mScores=new int[len][len];  final String res="com/rtg/mode/" + mat;  try (InputStream in=Resources.getResourceAsStream(res)){    if (in == null) {      throw new MissingResourceException("Could not find:" + res,ProteinScoringMatrix.class.getName(),res);    }    try (BufferedReader re=new BufferedReader(new InputStreamReader(in))){      try {        parse(re);      } catch (      final IOException|NumberFormatException e) {        throw new MissingResourceException("Malformed resource: " + res + " message: "+ e.getMessage(),ProteinScoringMatrix.class.getName(),res);      }      final String resProps="com/rtg/mode/" + mat + ".properties";      try (final InputStream inProps=Resources.getResourceAsStream(resProps)){        if (inProps == null) {          throw new MissingResourceException("Could not find:" + resProps,ProteinScoringMatrix.class.getName(),resProps);        }        final Properties pr=new Properties();        try {          pr.load(inProps);        } catch (        final IOException e) {          throw new InvalidParamsException(ErrorType.PROPS_LOAD_FAILED,"Matrix",resProps,e.getMessage());        }catch (        final IllegalArgumentException e) {          throw new InvalidParamsException(ErrorType.PROPS_INVALID,"Matrix",resProps);        }        mK=getDouble(mat,pr,"K");        mLogK=Math.log(mK);        mH=getDouble(mat,pr,"H");        mLambda=getDouble(mat,pr,"LAMBDA");        mHit=getDouble(mat,pr,"HIT");        mMiss=getDouble(mat,pr,"MISS");        mGap=getDouble(mat,pr,"GAP");        mExtend=getDouble(mat,pr,"EXTEND");        mExpected=getDouble(mat,pr,"EXPECTED");        mMax=findMax();      }     }   }   assert integrity();}  }
class C{  public ExtensionData expandedBody(String expandedBody){  mExpandedBody=expandedBody;  return this;}  }
class C{  public void animateHierarchyFade(final int duration,int startingOpacity){  animateHierarchy(duration,false,startingOpacity,true);}  }
class C{  public double scoreDag(Graph dag){  buildIndexing(dag.getNodes());  double score=0.0;  for (  Node y : dag.getNodes()) {    Set<Node> parents=new HashSet<>(dag.getParents(y));    int nextIndex=-1;    for (int i=0; i < getVariables().size(); i++) {      nextIndex=hashIndices.get(variables.get(i));    }    int parentIndices[]=new int[parents.size()];    Iterator<Node> pi=parents.iterator();    int count=0;    while (pi.hasNext()) {      Node nextParent=pi.next();      parentIndices[count++]=hashIndices.get(nextParent);    }    if (this.isDiscrete()) {      score+=localDiscreteScore(nextIndex,parentIndices);    } else {      score+=localSemScore(nextIndex,parentIndices);    }  }  return score;}  }
class C{  public String toString(){  return getBaseType() + parameters.toString();}  }
class C{  protected void firstInit(Context context){  entityName=context.getEntityAttribute("name");  String s=context.getEntityAttribute(ON_ERROR);  if (s != null)   onError=s;  zipper=Zipper.createOrNull(context);  if (zipper == null) {    initCache(context);  }  isFirstInit=false;}  }
class C{  public boolean isValid(){  return isValid;}  }
class C{  public void resultsToMaple(PrintStream ps){  double[] y;  ps.println("with(plots):");  ps.println("points := [");  for (int i=0; i < getNumPoints(); i++) {    y=getPoint(i).getVector();    ps.println("[" + y[0] + ","+ y[1]+ "],");  }  ps.println("]:");  ps.println("plotsetup(ps,plotoutput=`plot.ps`," + "plotoptions=`portrait,noborder,width=6.0in,height=6.0in`):");  ps.println("plot(points, style=POINT,symbol=CIRCLE);");}  }
class C{  @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createGroup(@Auth AutomationClient automationClient,@Valid CreateGroupRequestV2 request){  String creator=automationClient.getName();  String group=request.name();  groupDAO.getGroup(group).ifPresent(null);  groupDAO.createGroup(group,creator,request.description(),request.metadata());  Map<String,String> extraInfo=new HashMap<>();  if (request.description() != null) {    extraInfo.put("description",request.description());  }  if (request.metadata() != null) {    extraInfo.put("metadata",request.metadata().toString());  }  auditLog.recordEvent(new Event(Instant.now(),EventTag.GROUP_CREATE,creator,group,extraInfo));  URI uri=UriBuilder.fromResource(GroupResource.class).path(group).build();  return Response.created(uri).build();}  }
class C{  @SuppressWarnings("try") protected CompilationResult compile(ResolvedJavaMethod installedCodeOwner,StructuredGraph graph,CompilationResult compilationResult){  StructuredGraph graphToCompile=graph == null ? parseForCompile(installedCodeOwner) : graph;  lastCompiledGraph=graphToCompile;  try (Scope s=Debug.scope("Compile",graphToCompile)){    Request<CompilationResult> request=new Request<>(graphToCompile,installedCodeOwner,getProviders(),getBackend(),getDefaultGraphBuilderSuite(),OptimisticOptimizations.ALL,graphToCompile.getProfilingInfo(),getSuites(),getLIRSuites(),compilationResult,CompilationResultBuilderFactory.Default);    return GraalCompiler.compile(request);  } catch (  Throwable e) {    throw Debug.handle(e);  }}  }
class C{  public final void addPoint(double x,double y){  dataPoints++;  sumX+=x;  sumXSq+=x * x;  sumY+=y;  sumYSq+=y * y;  sumXY+=x * y;}  }
class C{  public static void startTrace(String operation){  sTraceMap.put(operation,System.currentTimeMillis());}  }
class C{  public boolean containsKey(String key){  return mValues.containsKey(key);}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  boolean version(){  return version;}  }
class C{  private String optionToString(Option option){  StringBuilder buf=new StringBuilder();  buf.append("[ option: ");  buf.append(option.getOpt());  if (option.getLongOpt() != null) {    buf.append(" ").append(option.getLongOpt());  }  buf.append(" ");  if (option.hasArg()) {    buf.append(" [ARG]");  }  buf.append(" :: ").append(option.getDescription());  if (option.isRequired()) {    buf.append(" [REQUIRED]");  }  buf.append(" ]");  return buf.toString();}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return CacheInfoResponse.create(dm,this.getSender());}  }
class C{  private void init(boolean showTable) throws Exception {  Borderlayout layout=new Borderlayout();  layout.setParent(this);  layout.setWidth("100%");  layout.setHeight("100%");  Center center=new Center();  center.setParent(layout);  center.setFlex(true);  if (showTable) {    center.appendChild(table);    table.setWidth("100%");    table.setVflex(true);  }  South south=new South();  south.setParent(layout);  south.appendChild(confirmPanel);  confirmPanel.addActionListener(Events.ON_CLICK,this);}  }
class C{  @Override public boolean covers(final Envelope other){  if (isNull() || other.isNull()) {    return false;  }  if (!super.covers(other)) {    return false;  }  return getMinZOf(other) >= minz && getMaxZOf(other) <= maxz;}  }
class C{  public static Vector<Object> toXmlRpcRunnersParameters(Collection<Runner> runners){  Vector<Object> runnersParams=new Vector<Object>();  for (  Runner runner : runners) {    runnersParams.add(runner.marshallize());  }  return runnersParams;}  }
class C{  public int rsq(int ind){  assert ind > 0;  int sum=0;  while (ind > 0) {    sum+=array[ind];    ind-=ind & (-ind);  }  return sum;}  }
class C{  public static int staticNextInt(double ro,double pk){synchronized (shared) {    shared.setState(ro,pk);    return shared.nextInt();  }}  }
class C{  private Workflow.Method deleteMirrorDeviceMethod(URI vplexURI,URI vplexMirrorURI){  return new Workflow.Method(DELETE_MIRROR_DEVICE_METHOD_NAME,vplexURI,vplexMirrorURI);}  }
class C{  void closeIO(){  IOUtils.closeSilently(out);  out=null;  IOUtils.closeSilently(in);  in=null;  if (store != null) {    store.closeSilently();    store=null;  }}  }
class C{  @org.junit.Test public void testAndOr(){  Bot bot=Bot.createInstance();  try {    Language language=bot.mind().getThought(Language.class);    language.setLearningMode(LearningMode.Disabled);    TextEntry text=bot.awareness().getSense(TextEntry.class);    List<String> output=registerForOutput(text);    text.input("are you big or fat?");    String response=waitForOutput(output);    assertUnknown(response);    assertKeyword(response,"big or fat");    text.input("you are big");    response=waitForOutput(output);    assertKnown(response);    assertKeyword(response,"I am big");    text.input("are you big or fat?");    response=waitForOutput(output);    assertUnknown(response);    assertKeyword(response,"I am big");    text.input("you are not fat");    response=waitForOutput(output);    assertKnown(response);    assertKeyword(response,"I am not fat");    text.input("are you big or fat?");    response=waitForOutput(output);    assertKeyword(response,"I am big not fat");    text.input("you are big or fat");    response=waitForOutput(output);    assertKeyword(response,"I am big not fat");    text.input("you are fat");    response=waitForOutput(output);    assertKnown(response);    assertKeyword(response,"I am fat");    text.input("are you big or fat?");    response=waitForOutput(output);    assertKeyword(response,"I am big and fat");    text.input("are you big, small or fat?");    response=waitForOutput(output);    assertUnknown(response);    assertKeyword(response,"I am big and fat");    text.input("you are small");    response=waitForOutput(output);    assertKnown(response);    assertKeyword(response,"I am small");    text.input("are you big, small, or fat?");    response=waitForOutput(output);    assertKeyword(response,"I am big, small and fat");    text.input("are you big and fat?");    response=waitForOutput(output);    assertTrue(response);    assertKeyword(response,"I am big and fat");    text.input("you are big and fat");    response=waitForOutput(output);    assertKnown(response);    assertKeyword(response,"I am big and fat");    text.input("you are not fat");    response=waitForOutput(output);    assertKnown(response);    assertKeyword(response,"I am not fat");    text.input("are you big and fat and small?");    response=waitForOutput(output);    assertFalse(response);    assertKeyword(response,"I am big and small not fat");    text.input("are you big and blue?");    response=waitForOutput(output);    assertUnknown(response);    assertKeyword(response,"I am big");    text.input("are you not big and small?");    response=waitForOutput(output);    assertFalse(response);    assertKeyword(response,"I am big and small");    text.input("are you cat or dog?");    response=waitForOutput(output);    assertUnknown(response);    assertKeyword(response,"cat or dog");    text.input("you are cat and dog");    response=waitForOutput(output);    assertKnown(response);    assertKeyword(response,"cat and dog");    text.input("are you cat or dog?");    response=waitForOutput(output);    assertKeyword(response,"I am cat and dog");    text.input("are you a cat or a dog?");    response=waitForOutput(output);    assertUnknown(response);    assertKeyword(response,"a cat or a dog");    text.input("you are a cat and a dog");    response=waitForOutput(output);    assertKnown(response);    assertKeyword(response,"a cat and a dog");    text.input("are you a cat?");    response=waitForOutput(output);    assertTrue(response);    text.input("are you a dog?");    response=waitForOutput(output);    assertTrue(response);    text.input("are you a cat and a dog?");    response=waitForOutput(output);    assertTrue(response);    assertKeyword(response,"I am a cat and a dog");    text.input("are you a cat or a dog?");    response=waitForOutput(output);    assertKeyword(response,"I am a cat and a dog");    text.input("I am me");    response=waitForOutput(output);    assertKnown(response);    assertKeyword(response,"you are you");    text.input("I am not you");    response=waitForOutput(output);    assertKnown(response);    assertKeyword(response,"you are not me");    text.input("am I me?");    response=waitForOutput(output);    assertTrue(response);    assertKeyword(response,"you are you");    text.input("am I me or you?");    response=waitForOutput(output);    assertKeyword(response,"you are you");    assertKeyword(response,"not me");  }  finally {    bot.shutdown();  }}  }
class C{  protected AnnotablePropertyAssignmentImpl(){  super();}  }
class C{  public MinConflictsStrategy(int maxSteps){  this.maxSteps=maxSteps;}  }
class C{  public static double fMeasure(double precision,double recall){  final double sum=precision + recall;  return sum == 0 ? 0 : 2 * precision * recall / sum;}  }
class C{  public static void stubGetBitmap(Drawable drawable){  if (!(drawable instanceof BitmapDrawable)) {    return;  }  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;  final Bitmap bitmap=mock(Bitmap.class);  when(bitmapDrawable.getBitmap()).thenReturn(bitmap);}  }
class C{  public cudaResourceViewDesc(){}  }
class C{  private DataSet simulateDataHelper(DataSet dataSet,boolean latentDataSaved){  if (dataSet.getNumColumns() != nodes.length) {    throw new IllegalArgumentException("When rewriting the old data set, " + "number of variables in data set must equal number of variables " + "in Bayes net.");  }  int sampleSize=dataSet.getNumRows();  int numMeasured=0;  int[] map=new int[nodes.length];  List<Node> variables=new LinkedList<>();  for (int j=0; j < nodes.length; j++) {    if (!latentDataSaved && nodes[j].getNodeType() != NodeType.MEASURED) {      continue;    }    int numCategories=bayesPm.getNumCategories(nodes[j]);    List<String> categories=new LinkedList<>();    for (int k=0; k < numCategories; k++) {      categories.add(bayesPm.getCategory(nodes[j],k));    }    DiscreteVariable var=new DiscreteVariable(nodes[j].getName(),categories);    variables.add(var);    int index=++numMeasured - 1;    map[index]=j;  }  for (int i=0; i < variables.size(); i++) {    Node node=dataSet.getVariable(i);    Node _node=variables.get(i);    dataSet.changeVariable(node,_node);  }  constructSample(sampleSize,numMeasured,dataSet,map);  return dataSet;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public AnnotationFormatError(Throwable cause){  super(cause);}  }
class C{  public boolean containsValue(Object value){  if (value == null) {    for (Entry e=header.after; e != header; e=e.after)     if (e.value == null)     return true;  } else {    for (Entry e=header.after; e != header; e=e.after)     if (value.equals(e.value))     return true;  }  return false;}  }
class C{  public MultiPaneTreeViewer(){  treePanes.add(new TreePane());  setLayout(new BorderLayout());  treePanePanel=new MultiPaneTreePanel();  treePanePanel.setLayout(new BoxLayout(treePanePanel,BoxLayout.PAGE_AXIS));  JScrollPane scrollPane=new JScrollPane(treePanePanel,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);  scrollPane.setMinimumSize(new Dimension(150,150));  scrollPane.setBorder(null);  viewport=scrollPane.getViewport();  add(scrollPane,BorderLayout.CENTER);}  }
class C{  public void moveConditions(Loop loop){  Iterator<ConditionExpression> iter=select.getConditions().iterator();  while (iter.hasNext()) {    ConditionExpression condition=iter.next();    ColumnSource singleTable=dependencies.analyze(condition);    PlanNode moveTo=canMove(loop,singleTable);    if ((moveTo != null) && (moveTo != select.getInput())) {      moveCondition(condition,moveTo);      iter.remove();    }  }}  }
class C{  public ExistentialTypeRef createExistentialTypeRef(){  ExistentialTypeRefImpl existentialTypeRef=new ExistentialTypeRefImpl();  return existentialTypeRef;}  }
class C{  public static boolean isInitiatorConnectedToStorageSystem(Initiator initiator,StorageSystem storageSystem,List<URI> varrayURIs,DbClient dbClient){  Set<String> varrays=new HashSet<String>();  if (varrayURIs != null) {    for (    URI varray : varrayURIs) {      varrays.add(varray.toString());    }  }  if (initiator == null || storageSystem == null || dbClient == null) {    _log.info(String.format("isInitiatorConnectedToStorageSystem - Invalid parameters"));    return false;  }  _log.info(String.format("isInitiatorConnectedToStorageSystem(%s, %s) -- Entered",initiator.getInitiatorPort(),storageSystem.getNativeGuid()));  NetworkLite networkLite=NetworkUtil.getEndpointNetworkLite(initiator.getInitiatorPort(),dbClient);  if (networkLite == null) {    _log.info(String.format("isInitiatorConnectedToStorageSystem(%s, %s) -- Initiator is not associated with any network",initiator.getInitiatorPort(),storageSystem.getNativeGuid()));    return false;  }  URI networkUri=networkLite.getId();  List<StoragePort> ports=NetworkAssociationHelper.getNetworkConnectedStoragePorts(networkUri.toString(),dbClient);  _log.info(String.format("isInitiatorConnectedToStorageSystem(%s, %s) -- Checking for port connections on %s network",initiator.getInitiatorPort(),storageSystem.getNativeGuid(),networkLite.getLabel()));  for (  StoragePort port : ports) {    if (storageSystem.getId().equals(port.getStorageDevice())) {      if (varrays.isEmpty() || (port.getTaggedVirtualArrays() != null && !Collections.disjoint(varrays,port.getTaggedVirtualArrays()))) {        _log.info(String.format("isInitiatorConnectedToStorageSystem(%s, %s) -- Found one port in the same network as initiator, %s (%s). Returning true.",initiator.getInitiatorPort(),storageSystem.getNativeGuid(),port.getNativeGuid(),port.getId()));        return true;      }    }  }  _log.info(String.format("isInitiatorConnectedToStorageSystem(%s, %s) -- Could not find any ports in the same networks as the initiator. Returning false.",initiator.getInitiatorPort(),storageSystem.getNativeGuid()));  return false;}  }
class C{  public SunCertPathBuilder() throws CertPathBuilderException {  try {    cf=CertificateFactory.getInstance("X.509");  } catch (  CertificateException e) {    throw new CertPathBuilderException(e);  }}  }
class C{  public Media createMediaRecorder(String path,String mimeType) throws IOException {  return impl.createMediaRecorder(path,mimeType);}  }
class C{  public final void printStats(){  int unused=0;  int thisGen=0;  List<Integer> depHist=new ArrayList<Integer>();  final int maxDepth=20 * 8;  for (int i=0; i < maxDepth; i++) {    depHist.add(0);  }  for (  TTEntry ent : table) {    if (ent.type == TTEntry.T_EMPTY) {      unused++;    } else {      if (ent.generation == generation) {        thisGen++;      }      if (ent.getDepth() < maxDepth) {        depHist.set(ent.getDepth(),depHist.get(ent.getDepth()) + 1);      }    }  }  double w=100.0 / table.length;  System.out.printf("Hash stats: size:%d unused:%d (%.2f%%) thisGen:%d (%.2f%%)\n",table.length,unused,unused * w,thisGen,thisGen * w);  for (int i=0; i < maxDepth; i++) {    int c=depHist.get(i);    if (c > 0)     System.out.printf("%3d %8d (%6.2f%%)\n",i,c,c * w);  }}  }
class C{  public void initializeClassifier(Instances data) throws Exception {  super.buildClassifier(data);  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  m_ZeroR=new weka.classifiers.rules.ZeroR();  m_ZeroR.buildClassifier(data);  m_NumClasses=data.numClasses();  m_Betas=new double[m_Classifiers.length];  m_NumIterationsPerformed=0;  m_TrainingData=new Instances(data);  m_RandomInstance=new Random(m_Seed);  if ((m_UseResampling) || (!(m_Classifier instanceof WeightedInstancesHandler))) {    double sumProbs=m_TrainingData.sumOfWeights();    for (int i=0; i < m_TrainingData.numInstances(); i++) {      m_TrainingData.instance(i).setWeight(m_TrainingData.instance(i).weight() / sumProbs);    }  }}  }
class C{  public void process() throws MessagingException {  int messagesProcessed=0;  int messageCount=0;  try {    try {      open();    } catch (    MessagingException ex) {      getLogger().error(getFetchTaskName() + " Failed to open folder!");      throw ex;    }synchronized (getFolder()) {      messageCount=getFolder().getMessageCount();      for (int i=1; i <= messageCount; i++) {        MimeMessage message=(MimeMessage)getFolder().getMessage(i);        if (isFetchAll() || !isSeen(message)) {          try {            new MessageProcessor(message,getAccount()).process();            messagesProcessed++;          } catch (          Exception ex) {            StringBuilder logMessageBuffer=new StringBuilder("Exception processing message ID: ");            logMessageBuffer.append(message.getMessageID());            getLogger().error(logMessageBuffer.toString(),ex);          }        }      }    }  } catch (  MessagingException mex) {    getLogger().error("A MessagingException has terminated fetching messages for this folder",mex);  } finally {    try {      close();    } catch (    MessagingException ex) {    }    StringBuilder logMessageBuffer=new StringBuilder("Processed ");    logMessageBuffer.append(messagesProcessed);    logMessageBuffer.append(" messages of ");    logMessageBuffer.append(messageCount);    logMessageBuffer.append(" in folder '");    logMessageBuffer.append(getFolder().getName());    logMessageBuffer.append("'");    getLogger().info(logMessageBuffer.toString());  }  try {    if (isRecurse())     recurse();  } catch (  MessagingException mex) {    getLogger().error("A MessagingException has terminated recursing through sub-folders",mex);  }}  }
class C{  @Override public boolean remove(Object o){  if (o instanceof TLinkable) {    TLinkable link=(TLinkable)o;    T p=(T)link.getPrevious();    T n=(T)link.getNext();    if (n == null && p == null) {      _head=_tail=null;    } else     if (n == null) {      link.setPrevious(null);      p.setNext(null);      _tail=p;    } else     if (p == null) {      link.setNext(null);      n.setPrevious(null);      _head=n;    } else {      p.setNext(n);      n.setPrevious(p);      link.setNext(null);      link.setPrevious(null);    }    _size--;    return true;  } else {    return false;  }}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  protected SnapshotTransaction(KeyValueService keyValueService,TransactionService transactionService,RemoteLockService lockService,long startTimeStamp,AtlasDbConstraintCheckingMode constraintCheckingMode,TransactionReadSentinelBehavior readSentinelBehavior){  this(keyValueService,transactionService,lockService,startTimeStamp,constraintCheckingMode,readSentinelBehavior,false);}  }
class C{  public void update(){  if (!isFrozen()) {    learningRule.update(this);  }}  }
class C{  public void propertyChange(PropertyChangeEvent e){  super.propertyChange(e);  String propertyName=e.getPropertyName();  if (propertyName == null) {    return;  }  if (propertyName.equals("windowDecorationStyle")) {    JRootPane root=(JRootPane)e.getSource();    int style=root.getWindowDecorationStyle();    uninstallClientDecorations(root);    if (style != JRootPane.NONE) {      installClientDecorations(root);    }  } else   if (propertyName.equals("ancestor")) {    uninstallWindowListeners(root);    if (((JRootPane)e.getSource()).getWindowDecorationStyle() != JRootPane.NONE) {      installWindowListeners(root,root.getParent());    }  }  return;}  }
class C{  public static String ensureEndingSlash(String path){  return path.charAt(path.length() - 1) != '/' ? (path + "/") : path;}  }
class C{  private static byte randomByte(){  return (byte)(127 - new Random().nextInt(256));}  }
class C{  public static boolean hasLowerCaseChar(String str){  for (int i=0; i < str.length(); i++) {    if (Character.isLowerCase(str.charAt(i))) {      return true;    }  }  return false;}  }
class C{  public ApnsPayload alertTitle(String title){  ensureAlertMap().put(ATTR_ALERT_TITLE,title);  return this;}  }
class C{  public void clearDiskCaches(){  FrescoPlusCore.getImagePipeline().clearDiskCaches();}  }
class C{  public static H2Database openOrCreateDatabase(String name,int mode,H2Database.CursorFactory factory){  return H2Database.openOrCreateDatabase(name,factory);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void addRangeData(String sequenceName,RangeList.RangeData<T> rangeData){  if (rangeData != null) {    final List<RangeList.RangeData<T>> annos;    if (containsKey(sequenceName)) {      annos=get(sequenceName);    } else {      annos=new ArrayList<>();      put(sequenceName,annos);    }    annos.add(rangeData);  }}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  private String validateIdentifier(String id,String lastId,AtomicInteger recordsWithNoId,AtomicInteger recordsWithDuplicateId){  if (Strings.isNullOrEmpty(id)) {    recordsWithNoId.getAndIncrement();  }  if (!Strings.isNullOrEmpty(lastId) && !Strings.isNullOrEmpty(id)) {    if (id.equalsIgnoreCase(lastId)) {      writePublicationLogMessage("Duplicate id found: " + id);      recordsWithDuplicateId.getAndIncrement();    }  }  return id;}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  private void removeItem(){  int selectedIndex=list.getSelectedIndex();  for (  String item : list.getSelectedValuesList()) {    data.removeElement(item);  }  if (selectedIndex > -1) {    if (selectedIndex < data.size()) {      list.setSelectedValue(data.get(selectedIndex),true);    } else     if (selectedIndex > 0) {      list.setSelectedValue(data.get(selectedIndex - 1),true);    }  }}  }
class C{  public String replace(CharSequence target,CharSequence replacement){  if (target == null) {    throw new NullPointerException("target should not be null");  }  if (replacement == null) {    throw new NullPointerException("replacement should not be null");  }  String ts=target.toString();  int index=indexOf(ts,0);  if (index == -1)   return this;  String rs=replacement.toString();  StringBuilder buffer=new StringBuilder(count);  int tl=target.length();  int tail=0;  do {    buffer.append(value,offset + tail,index - tail);    buffer.append(rs);    tail=index + tl;  } while ((index=indexOf(ts,tail)) != -1);  buffer.append(value,offset + tail,count - tail);  return buffer.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static byte[] base64ToByteArray(String s){  return base64ToByteArray(s,false);}  }
class C{  public void add(@NonNull T item){synchronized (lock) {    if (items == null) {      items=new ArrayList<>();    }    items.add(item);  }  if (notifyOnChange) {    notifyItemInserted(items.size());  }}  }
class C{  protected ConfigurationImpl(){  super();}  }
class C{  static void checkSecure(Set<PosixFilePermission> requested,Set<PosixFilePermission> actual){  for (  PosixFilePermission perm : actual) {    if (!requested.contains(perm)) {      throw new RuntimeException("Actual permissions: " + PosixFilePermissions.toString(actual) + ", requested: "+ PosixFilePermissions.toString(requested)+ " - file is less secure than requested");    }  }}  }
class C{  private void writeAnswer(Answer answer){  answer.setId(null);  mAnswerDataSource.create(answer);}  }
class C{  protected void paintRightTabBorder(int tabIndex,Graphics g,int x,int y,int w,int h,int btm,int rght,boolean isSelected){  int tabCount=tabPane.getTabCount();  int currentRun=getRunForTab(tabCount,tabIndex);  int lastIndex=lastTabInRun(tabCount,currentRun);  int firstIndex=tabRuns[currentRun];  g.translate(x,y);  int bottom=h - 1;  int right=w - 1;  g.setColor(isSelected ? selectHighlight : highlight);  g.drawLine(right - 6,1,right - 1,6);  g.drawLine(0,1,right - 6,1);  g.drawLine(right - 1,6,right - 1,bottom - 1);  if (!isSelected)   g.drawLine(0,1,0,bottom - 1);  g.setColor(darkShadow);  g.drawLine(right - 6,0,right,6);  g.drawLine(0,0,right - 6,0);  g.drawLine(right,6,right,bottom);  g.drawLine(0,bottom,right,bottom);  g.translate(-x,-y);}  }
class C{  private NceMessage loadChars() throws java.io.IOException {  int nchars;  byte[] rcvBuffer=new byte[32];  nchars=inpipe.read(rcvBuffer,0,32);  NceMessage msg=new NceMessage(nchars);  for (int i=0; i < nchars; i++) {    msg.setElement(i,rcvBuffer[i] & 0xFF);  }  return msg;}  }
class C{  public void initialize(final BlockStore blockStore,final StoredBlock chainHead) throws BlockStoreException {  StoredBlock versionBlock=chainHead;  final Stack<Long> versions=new Stack<Long>();  versions.push(versionBlock.getHeader().getVersion());  for (int headOffset=0; headOffset < versionWindow.length; headOffset++) {    versionBlock=versionBlock.getPrev(blockStore);    if (null == versionBlock) {      break;    }    versions.push(versionBlock.getHeader().getVersion());  }  while (!versions.isEmpty()) {    add(versions.pop());  }}  }
class C{  private Job launchJob(Job job,@Nullable AbstractInputStreamContent data){  verify(job.getStatus() == null);  try {    return data != null ? bigquery.jobs().insert(getProjectId(),job,data).execute() : bigquery.jobs().insert(getProjectId(),job).execute();  } catch (  IOException e) {    throw BigqueryJobFailureException.create(e);  }}  }
class C{  public DeleteMonitoredItemsResponse DeleteMonitoredItems(DeleteMonitoredItemsRequest req) throws ServiceFaultException, ServiceResultException {  return (DeleteMonitoredItemsResponse)channel.serviceRequest(req);}  }
class C{  public void pauseAnimations(){  ctx.getAnimationEngine().pause();}  }
class C{  public boolean reportDeprecated(Environment env){  return (isDeprecated() || clazz.reportDeprecated(env));}  }
class C{  @VisibleForTesting float calculateScore(DiskStorage.Entry entry,long now){  long ageMs=now - entry.getTimestamp();  long bytes=entry.getSize();  return mAgeWeight * ageMs + mSizeWeight * bytes;}  }
class C{  public static void openApplication(Context context,String packageName){  Intent intent=context.getPackageManager().getLaunchIntentForPackage(packageName);  checkContext(context,intent);  context.startActivity(intent);}  }
class C{  public AuthenticationInfo(String parentPropertiesFileLocation){  this.parentPropertiesFileLocation=parentPropertiesFileLocation;}  }
class C{  public BiosCommandResult dodeleteReplicationPolicy(StorageSystem system,String policyName){  try {    IsilonApi isi=getIsilonDevice(system);    IsilonSyncPolicy policy=isi.getReplicationPolicy(policyName);    JobState policyState=policy.getLastJobState();    if (policyState.equals(JobState.running) || policyState.equals(JobState.paused)) {      _log.info("Canceling Replication Policy  -{} because policy is in - {} state ",policyName,policyState);      IsilonSyncPolicy modifiedPolicy=new IsilonSyncPolicy();      modifiedPolicy.setName(policyName);      modifiedPolicy.setLastJobState(JobState.canceled);      isi.modifyReplicationPolicy(policyName,modifiedPolicy);    }    isi.deleteReplicationPolicy(policyName);    _log.info("dodeleteReplicationPolicy - {} finished succesfully",policy.toString());    _log.info("Sleeping for 10 seconds for detach mirror to complete...");    TimeUnit.SECONDS.sleep(10);    return BiosCommandResult.createSuccessfulResult();  } catch (  IsilonException e) {    return BiosCommandResult.createErrorResult(e);  }catch (  InterruptedException e) {    _log.warn("dodeleteReplicationPolicy - {} intertupted");    return BiosCommandResult.createSuccessfulResult();  }}  }
class C{  public DBConnectionWrapper checkoutConnection(DBGroupInfo cluster,DBCredential cred){synchronized (this) {    for (    DBConnectionWrapper conn : this.connections) {      if (cluster.getGroupName().equalsIgnoreCase(conn.getDb().getDbGroupName()) && !conn.isInuse()) {        conn.setInuse(true);        return conn;      }    }    if (cred == null)     return null;  }  if (cred != null && cred.getPassword() == null)   throw new RuntimeException("No credential provided fro DB group " + cluster.getGroupName());  for (  DBInstanceInfo dbinfo : cluster.getInstances()) {    try {      if (!dbinfo.isConnectionVerified()) {        logger.info("Skip host which is not connection verified yet: " + dbinfo.getHostName());        continue;      }      return createConnectionInternal(dbinfo,cred);    } catch (    Exception ex) {      logger.log(Level.SEVERE,"Exception when connecting to (" + dbinfo + ")",ex);      throw new RuntimeException(ex.getMessage());    }  }  return null;}  }
class C{  public void updateScreen(){  for (  ManualWidgetBase widget : widgets)   widget.updateScreen();}  }
class C{  public static Box union(Iterable<? extends Box> iterable){  if (iterable == null) {    String msg=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  ArrayList<Box> boxes=new ArrayList<Box>();  for (  Box box : iterable) {    if (box == null)     continue;    boxes.add(box);  }  if (boxes.size() == 0) {    return null;  } else   if (boxes.size() == 1) {    return boxes.get(0);  } else {    ArrayList<Vec4> corners=new ArrayList<Vec4>(8 * boxes.size());    for (    Box box : boxes) {      corners.addAll(Arrays.asList(box.getCorners()));    }    return computeBoundingBox(corners);  }}  }
class C{  public String replaceRangeQueryTerms(String query) throws ParseException {  Map<String,String> replacements=new HashMap<>();  String queryWithPlaceholders=markQueryWithPlaceholders(query,replacements);  return replacePlaceholders(queryWithPlaceholders,replacements);}  }
class C{  public String optString(String key){  return optString(key,"");}  }
class C{  private static int supplementalHash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public void testExtensiona(){  final LongChunks lc=new LongChunks(5,200,7);  lc.integrity();  assertEquals(200,lc.length());  lc.set(0,42);  assertEquals(42,lc.get(0));  lc.set(255,43);  assertEquals(43,lc.get(255));  assertEquals(200,lc.extendBy(10));  assertEquals(210,lc.length());  assertEquals(210,lc.extendBy(10));  assertEquals(220,lc.length());  assertEquals(220,lc.extendBy(100));  assertEquals(320,lc.length());  assertEquals(320,lc.extendBy(1000));  assertEquals(1320,lc.length());  lc.set(1407,44);  assertEquals(44,lc.get(1407));  try {    lc.extendBy(-1);    fail();  } catch (  final IllegalArgumentException e) {    assertEquals("-1",e.getMessage());  }}  }
class C{  protected ComplexPhase(String name,Timer timer,int[] scheduledSubPhases){  super(name,timer);  this.scheduledSubPhases=scheduledSubPhases;  checkPhases();}  }
class C{  void createImpl(boolean stream) throws SocketException {  if (impl == null)   setImpl();  try {    impl.create(stream);    created=true;  } catch (  IOException e) {    throw new SocketException(e.getMessage());  }}  }
class C{  @SuppressWarnings("unchecked") public void ensureCapacity(final int capacity){  if (wrapped)   a=ObjectArrays.ensureCapacity(a,capacity,size); else {    if (capacity > a.length) {      final Object t[]=new Object[capacity];      System.arraycopy(a,0,t,0,size);      a=(K[])t;    }  }  if (ASSERTS)   assert size <= a.length;}  }
class C{  private boolean traverse(Tree tree,NodeRef node){  boolean update=false;  int nodeNum=node.getNumber();  NodeRef parent=tree.getParent(node);  if (parent != null && updateNode[nodeNum]) {    double branchTime=nodeTimes[node.getNumber()];    for (int i=0; i < categoryCount; i++) {      double branchLength=siteModel.getRateForCategory(i) * branchTime;      siteModel.getSubstitutionModel().getTransitionProbabilities(branchLength,probabilities);      likelihoodCore.setNodeMatrix(nodeNum,i,probabilities);    }    update=true;  }  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    boolean update1=traverse(tree,child1);    NodeRef child2=tree.getChild(node,1);    boolean update2=traverse(tree,child2);    if (update1 || update2) {      int childNum1=child1.getNumber();      int childNum2=child2.getNumber();      if (integrateAcrossCategories) {        likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum);      } else {        likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum,siteCategories);      }      if (parent == null) {        double[] frequencies=frequencyModel.getFrequencies();        if (integrateAcrossCategories) {          double[] proportions=siteModel.getCategoryProportions();          likelihoodCore.integratePartials(nodeNum,proportions,rootPartials);        } else {          likelihoodCore.getPartials(nodeNum,rootPartials);        }        likelihoodCore.calculateLogLikelihoods(rootPartials,frequencies,patternLogLikelihoods);      }      update=true;    }  }  return update;}  }
class C{  public static boolean isEmail2(String email){  String expr="^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";  return email.matches(expr);}  }
class C{  protected void doParentClosureVisit(Node node,Set<Node> closure){  if (closure.contains(node))   return;  closure.add(node);  for (  Edge edge : getEdges(node)) {    Node sub=Edges.traverseReverseDirected(node,edge);    if (sub != null) {      doParentClosureVisit(sub,closure);    }  }}  }
class C{  private static String createXMLEmpty(int firstRow,int rDefault,int maxResults) throws Exception {  String result=null;  Document document=DocumentHelper.createDocument();  Element root=document.addElement(PersonKeys.XML_PERSONAS_TEXT);  root.addAttribute(PersonKeys.XML_INICIO_TEXT,Integer.toString(firstRow));  root.addAttribute(PersonKeys.XML_FIN_TEXT,Integer.toString(firstRow + rDefault));  root.addAttribute(PersonKeys.XML_TOTAL_TEXT,Integer.toString(0));  root.addAttribute(PersonKeys.XML_RANGO_TEXT,Integer.toString(rDefault));  root.addAttribute(PersonKeys.XML_RESULT_MAX_TEXT,Integer.toString(maxResults));  result=document.asXML();  return result;}  }
class C{  protected boolean[] canTakeOptions(){  boolean[] result=new boolean[2];  print("options...");  if (m_Classifier instanceof OptionHandler) {    println("yes");    if (m_Debug) {      println("\n=== Full report ===");      Enumeration<Option> enu=((OptionHandler)m_Classifier).listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        print(option.synopsis() + "\n" + option.description()+ "\n");      }      println("\n");    }    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  private Hashtable addNamespace(String namespace){  Hashtable h=new Hashtable();  Object oh;  if ((oh=namespaceHash.put(namespace,h)) != null) {    namespaceHash.put(namespace,oh);    return null;  }  return h;}  }
class C{  public SubsessionSelection(List sessionElements){  if (sessionElements == null) {    throw new NullPointerException("List of session elements must " + "not be null.");  }  for (  Object sessionElement : sessionElements) {    if (!(sessionElement instanceof GraphNode || sessionElement instanceof Edge)) {      throw new IllegalArgumentException("Model node list contains " + "an object that is not a GraphNode or an Edge: " + sessionElement);    }  }  try {    this.sessionElements=(List)new MarshalledObject(sessionElements).get();  } catch (  Exception e1) {    e1.printStackTrace();    throw new IllegalStateException("Could not clone.");  }}  }
class C{  public void removeExpiredWeatherData(){  final String EXPIRATION_SELECTION=WeatherValuesEntry.COLUMN_EXPIRATION_TIME + " <= ?";  try (Cursor expiredData=mContext.getContentResolver().query(WeatherValuesEntry.WEATHER_VALUES_CONTENT_URI,new String[]{WeatherValuesEntry.COLUMN_LOCATION_KEY,WeatherValuesEntry.COLUMN_EXPIRATION_TIME},EXPIRATION_SELECTION,new String[]{String.valueOf(System.currentTimeMillis())},null)){    if (expiredData != null && expiredData.moveToFirst()) {      do {        final String deleteLocation=expiredData.getString(expiredData.getColumnIndex(WeatherValuesEntry.COLUMN_LOCATION_KEY));        final long expirationTime=expiredData.getLong(expiredData.getColumnIndex(WeatherValuesEntry.COLUMN_EXPIRATION_TIME));        remove(deleteLocation,expirationTime);      } while (expiredData.moveToNext());    }  } }  }
class C{  public static void init(){  OperatingSystemMXBean osStatsBean=ManagementFactory.getOperatingSystemMXBean();  if (osStatsBean instanceof UnixOperatingSystemMXBean) {    stats=((UnixOperatingSystemMXBean)osStatsBean);  } else {    throw new RuntimeException("Unexpected OperatingSystemMXBean " + osStatsBean);  }  memoryStats=ManagementFactory.getMemoryMXBean();}  }
class C{  PreparedStatement prepareAutoCloseStatement(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ")");    }    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY,true);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void importAddressReferences(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE00266: connection argument can not be null");  Preconditions.checkArgument(rawModuleId >= 0,"Error: raw module id can only be a positive number.");  Preconditions.checkArgument(moduleId >= 0,"Error: module if can only be a positive number");  final String query="INSERT INTO " + CTableNames.ADDRESS_REFERENCES_TABLE + " (module_id, address, position, expression_id, type, target) "+ " SELECT "+ moduleId+ ", address, position, expression_node_id, "+ " (ENUM_RANGE(NULL::address_reference_type))[type + 1], destination  "+ " FROM ex_"+ rawModuleId+ "_address_references  WHERE position IS NOT NULL AND expression_node_id IS NOT NULL;";  connection.executeUpdate(query,true);}  }
class C{  @Override public void insertFront(Blorp x){  Node oldFrontNode=sentinel.next;  Node newNode=new Node(x,oldFrontNode);  sentinel.next=newNode;  size+=1;}  }
class C{  public final void testPSSParameterSpec0102(){  try {    new PSSParameterSpec(-1);    fail("Expected IAE not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public static NodeId randomGUID(int namespaceIndex){  return new NodeId(namespaceIndex,UUID.randomUUID());}  }
class C{  public static <T>Predicate<T> or(Predicate<? super T>... components){  return or(Arrays.asList(components));}  }
class C{  public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg,Object param1){  throw new RuntimeException();}  }
class C{  public final double calculateLogLikelihood(){  double logL=0.0;  for (int j=0; j < data.getDimension(); j++) {    int index;    if (impliedOne) {      if (j == 0) {        index=1;      } else {        index=(int)indicators.getStatisticValue(j - 1);      }    } else {      index=(int)indicators.getStatisticValue(j);    }    logL+=distributions[index].logPdf(data.getStatisticValue(j));  }  return logL;}  }
class C{  public static final double[] minusTimes(final double[] v1,final double[] v2,final double s2){  final double[] sub=new double[v1.length];  for (int i=0; i < v1.length; i++) {    sub[i]=v1[i] - v2[i] * s2;  }  return sub;}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  initCore("solr/crazy-path-to-config.xml","solr/crazy-path-to-schema.xml");}  }
class C{  public void picture(double x,double y,String s,double w,double h,double degrees){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(w);  double hs=factorY(h);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  @Override public boolean isResultRequired(ResultProducer rp,Object[] key) throws Exception {  if (m_ResultProducer != rp) {    throw new Error("Unrecognized ResultProducer sending results!!");  }  return true;}  }
class C{  protected void writePath(final Writer w,final String path,final int rootDepth) throws IOException {  final String[] a=path.split(ps);  if (rootDepth == 0) {    w.write("<a href=\"" + model.getRequestURL(new URLQueryParam[]{new URLQueryParam(URLQueryModel.PATH,ps)}) + "\">");    w.write(ps);    w.write("</a>");  }  final StringBuilder sb=new StringBuilder(ps);  for (int n=1; n < a.length; n++) {    final String name=a[n];    if (n > 1) {      if ((n + 1) > rootDepth) {        w.write("&nbsp;");        w.write(ps);      }      sb.append(ps);    }    final String prefix=sb.toString();    sb.append(name);    if ((n + 1) > rootDepth) {      if (rootDepth != 0 && n == rootDepth) {        w.write("<a href=\"" + model.getRequestURL(new URLQueryParam[]{new URLQueryParam(URLQueryModel.PATH,prefix)}) + "\">");        w.write("...");        w.write("</a>");        w.write("&nbsp;" + ps);      }      w.write("&nbsp;");      w.write("<a href=\"" + model.getRequestURL(new URLQueryParam[]{new URLQueryParam(URLQueryModel.PATH,sb.toString())}) + "\">");      w.write(cdata(name));      w.write("</a>");    }  }}  }
class C{  protected boolean keepCarriageReturn(){  return this.keepCR;}  }
class C{  @Nullable public HadoopMapReducePlanGroup groupForHost(String host){  return hostToGrp.get(host);}  }
class C{  public void removeClassPath(ClassPath cp){  source.removeClassPath(cp);}  }
class C{  private Map.Entry[] makeEntryArray(Object[] keys,Object[] values){  Map.Entry[] result=new Map.Entry[keys.length];  for (int i=0; i < keys.length; i++) {    result[i]=new DefaultMapEntry(keys[i],values[i]);  }  return result;}  }
class C{  private IndexMetaData addDefaultUnitsIfNeeded(IndexMetaData indexMetaData){  if (indexMetaData.getCreationVersion().before(Version.V_2_0_0_beta1)) {    Settings settings=indexMetaData.getSettings();    Settings.Builder newSettings=null;    for (    String byteSizeSetting : INDEX_BYTES_SIZE_SETTINGS) {      String value=settings.get(byteSizeSetting);      if (value != null) {        try {          Long.parseLong(value);        } catch (        NumberFormatException nfe) {          continue;        }        logger.warn("byte-sized index setting [{}] with value [{}] is missing units; assuming default units (b) but in future versions this will be a hard error",byteSizeSetting,value);        if (newSettings == null) {          newSettings=Settings.builder();          newSettings.put(settings);        }        newSettings.put(byteSizeSetting,value + "b");      }    }    for (    String timeSetting : INDEX_TIME_SETTINGS) {      String value=settings.get(timeSetting);      if (value != null) {        try {          Long.parseLong(value);        } catch (        NumberFormatException nfe) {          continue;        }        logger.warn("time index setting [{}] with value [{}] is missing units; assuming default units (ms) but in future versions this will be a hard error",timeSetting,value);        if (newSettings == null) {          newSettings=Settings.builder();          newSettings.put(settings);        }        newSettings.put(timeSetting,value + "ms");      }    }    if (newSettings != null) {      return IndexMetaData.builder(indexMetaData).version(indexMetaData.getVersion()).settings(newSettings.build()).build();    }  }  return indexMetaData;}  }
class C{  public static Spinner createDate(long min,long max,long currentValue,char separatorChar,int format){  Spinner s=new Spinner(new SpinnerDateModel(min,max,currentValue),DateTimeRenderer.createDateRenderer(separatorChar,format));  s.monthFirst=format == DATE_FORMAT_MM_DD_YY || format == DATE_FORMAT_MM_DD_YYYY;  return s;}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public Name addAll(Name suffix) throws InvalidNameException {  if (suffix instanceof CompositeName) {    impl.addAll(suffix.getAll());    return this;  } else {    throw new InvalidNameException("Not a composite name: " + suffix.toString());  }}  }
class C{  public DeclarationExpression(VariableExpression left,Token operation,Expression right){  super(left,operation,right);}  }
class C{  public void treeNodesRemoved(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    TreeStateNode changedParentNode;    changedIndexs=e.getChildIndices();    changedParentNode=getNodeForPath(SwingUtilities2.getTreePath(e,getModel()),false,false);    if (changedParentNode != null && changedIndexs != null && changedIndexs.length > 0) {      if (changedParentNode.hasBeenExpanded()) {        boolean makeInvisible;        int counter;        int removedRow;        TreeStateNode removedNode;        makeInvisible=((changedParentNode == root && !rootVisible) || (changedParentNode.getRow() != -1 && changedParentNode.isExpanded()));        for (counter=changedIndexs.length - 1; counter >= 0; counter--) {          removedNode=(TreeStateNode)changedParentNode.getChildAt(changedIndexs[counter]);          if (removedNode.isExpanded()) {            removedNode.collapse(false);          }          if (makeInvisible) {            removedRow=removedNode.getRow();            if (removedRow != -1) {              visibleNodes.removeElementAt(removedRow);            }          }          changedParentNode.remove(changedIndexs[counter]);        }        if (changedParentNode.getChildCount() == 0) {          changedParentNode.updatePreferredSize();          if (changedParentNode.isExpanded() && changedParentNode.isLeaf()) {            changedParentNode.collapse(false);          }        }        if (treeSelectionModel != null)         treeSelectionModel.resetRowSelection();        if (!isFixedRowHeight() && (makeInvisible || (changedParentNode.getChildCount() == 0 && changedParentNode.isVisible()))) {          if (changedParentNode == root) {            if (getRowCount() > 0)             getNode(0).setYOrigin(0);            updateYLocationsFrom(0);          } else           updateYLocationsFrom(changedParentNode.getRow());          this.visibleNodesChanged();        } else         if (makeInvisible)         this.visibleNodesChanged();      } else       if (treeModel.getChildCount(changedParentNode.getValue()) == 0) {        changedParentNode.updatePreferredSize();        if (!isFixedRowHeight() && changedParentNode.isVisible())         this.updateYLocationsFrom(changedParentNode.getRow());      }    }  }}  }
class C{  protected boolean isStorageExpand(String uri){  return ruleFeaturesProvider.isFeatureRequest(STORAGE_EXPAND,uri);}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,Comparable[] categoryKeys,Number[][] starts,Number[][] ends){  this.startData=starts;  this.endData=ends;  if (starts != null && ends != null) {    String baseName="org.jfree.data.resources.DataPackageResources";    ResourceBundle resources=ResourceBundleWrapper.getBundle(baseName);    int seriesCount=starts.length;    if (seriesCount != ends.length) {      String errMsg="DefaultIntervalCategoryDataset: the number " + "of series in the start value dataset does " + "not match the number of series in the end "+ "value dataset.";      throw new IllegalArgumentException(errMsg);    }    if (seriesCount > 0) {      if (seriesKeys != null) {        if (seriesKeys.length != seriesCount) {          throw new IllegalArgumentException("The number of series keys does not " + "match the number of series in the data.");        }        this.seriesKeys=seriesKeys;      } else {        String prefix=resources.getString("series.default-prefix") + " ";        this.seriesKeys=generateKeys(seriesCount,prefix);      }      int categoryCount=starts[0].length;      if (categoryCount != ends[0].length) {        String errMsg="DefaultIntervalCategoryDataset: the " + "number of categories in the start value " + "dataset does not match the number of "+ "categories in the end value dataset.";        throw new IllegalArgumentException(errMsg);      }      if (categoryKeys != null) {        if (categoryKeys.length != categoryCount) {          throw new IllegalArgumentException("The number of category keys does not match " + "the number of categories in the data.");        }        this.categoryKeys=categoryKeys;      } else {        String prefix=resources.getString("categories.default-prefix") + " ";        this.categoryKeys=generateKeys(categoryCount,prefix);      }    } else {      this.seriesKeys=new Comparable[0];      this.categoryKeys=new Comparable[0];    }  }}  }
class C{  public void addFormLocation(String name){  if (name != null) {    this.formLocationSet.add(name);  }}  }
class C{  public void addPrimaryKeyJoinField(DatabaseField primaryKeyField,DatabaseField secondaryField){  ObjectBuilder builder=getReferenceDescriptor().getObjectBuilder();  DatabaseMapping mapping=builder.getMappingForField(primaryKeyField);  if (mapping != null) {    builder.getMappingsByField().put(secondaryField,mapping);  }}  }
class C{  public void releaseTargetVersionLock(){}  }
class C{  public boolean skipPast(String to) throws JSONException {  boolean b;  char c;  int i;  int j;  int offset=0;  int length=to.length();  char[] circle=new char[length];  for (i=0; i < length; i+=1) {    c=next();    if (c == 0) {      return false;    }    circle[i]=c;  }  for (; ; ) {    j=offset;    b=true;    for (i=0; i < length; i+=1) {      if (circle[j] != to.charAt(i)) {        b=false;        break;      }      j+=1;      if (j >= length) {        j-=length;      }    }    if (b) {      return true;    }    c=next();    if (c == 0) {      return false;    }    circle[offset]=c;    offset+=1;    if (offset >= length) {      offset-=length;    }  }}  }
class C{  public void addCIFSAcl(CifsAcl acl){  NaElement elem=new NaElement("cifs-share-access-control-create");  elem.addNewChild("share",acl.getShareName());  elem.addNewChild("permission",acl.getAccess().access());  if (acl.getUserName() != null) {    elem.addNewChild("user-or-group",acl.getUserName());  }  if (acl.getGroupName() != null) {    elem.addNewChild("user-or-group",acl.getGroupName());  }  try {    server.invokeElem(elem);  } catch (  NaAPIFailedException e) {    String msg="Failed to create CIFS Acl: " + acl;    log.error(msg,e);    throw new NetAppCException(msg,e,e.getErrno());  }catch (  Exception e) {    String msg="Failed to create CIFS Acl: " + acl;    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  protected void handleAutoDraw(){  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {    onAutoDraw();  }}  }
class C{  public static <T>TStream<T> subscribe(TopologyElement te,String topic,Class<T> streamType){  Topology topology=te.topology();  Supplier<RuntimeServices> rts=topology.getRuntimeServiceSupplier();  return te.topology().events(new SubscriberSetup<T>(topic,streamType,rts));}  }
class C{  public static boolean isConnectedToLocalNetwork(){  boolean connected=false;  Context context=FeApp.getAppContext();  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo ni=cm.getActiveNetworkInfo();  connected=ni != null && ni.isConnected() == true && (ni.getType() & (ConnectivityManager.TYPE_WIFI | ConnectivityManager.TYPE_ETHERNET)) != 0;  if (connected == false) {    Log.d(TAG,"isConnectedToLocalNetwork: see if it is an WIFI AP");    WifiManager wm=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);    try {      Method method=wm.getClass().getDeclaredMethod("isWifiApEnabled");      connected=(Boolean)method.invoke(wm);    } catch (    Exception e) {      e.printStackTrace();    }  }  if (connected == false) {    Log.d(TAG,"isConnectedToLocalNetwork: see if it is an USB AP");    try {      for (      NetworkInterface netInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {        if (netInterface.getDisplayName().startsWith("rndis") == true) {          connected=true;        }      }    } catch (    SocketException e) {      e.printStackTrace();    }  }  return connected;}  }
class C{  void onShow(boolean startDragging){  mLastTouchX=Float.NaN;  mLastTouchY=Float.NaN;  mDragScrollOffset=0.0f;  mDragScrollOffsetRounded=0;  mDragScrollingVelocity=0.0f;  mIsSingleTapUpHappened=false;  if (startDragging)   mDragScrolling.start();}  }
class C{  public static int createNativeFlowgraphViews(final CConnection connection,final int moduleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE01816: connection argument can not be null");  final String query="{ ? = call create_native_flowgraph_views(?) }";  final CallableStatement call=connection.getConnection().prepareCall(query);  call.registerOutParameter(1,Types.INTEGER);  call.setInt(2,moduleId);  call.execute();  return call.getInt(1);}  }
class C{  private static void generateDataFile(String datafile,String rule,String builder){  RuleBasedBreakIteratorBuilder bld;  if (builder.equals("RuleBasedBreakIterator")) {    bld=new RuleBasedBreakIteratorBuilder(rule);  } else   if (builder.equals("DictionaryBasedBreakIterator")) {    bld=new DictionaryBasedBreakIteratorBuilder(rule);  } else {    throw new IllegalArgumentException("Invalid break iterator class \"" + builder + "\"");  }  bld.makeFile(datafile);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.881 -0500",hash_original_method="FD70AAE85AF9795828FE994C30CD34E8",hash_generated_method="935D764AA3BFBA7DB148A96DB36F16D9") private void ensureCapacity(int desiredLongCount){  if (desiredLongCount <= bits.length) {    return;  }  int newLength=Math.max(desiredLongCount,bits.length * 2);  long[] newBits=new long[newLength];  System.arraycopy(bits,0,newBits,0,longCount);  this.bits=newBits;}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  protected CleanUpOptions(Map<String,String> options){  fOptions=options;}  }
class C{  public void remove(GenericEntity entity){  UtilCache.clearCache(getCacheName(entity.getEntityName()));  ModelEntity model=entity.getModelEntity();  if (model != null) {    Iterator<String> it=model.getViewConvertorsIterator();    while (it.hasNext()) {      String targetEntityName=it.next();      UtilCache.clearCache(getCacheName(targetEntityName));    }  }}  }
class C{  public static boolean isPunc(String str){  if (str == null)   return false;  str=str.trim();  for (int i=0; i < str.length(); ++i) {    char c=str.charAt(i);    if (Character.isDigit(c) || Character.isLetter(c)) {      return false;    }  }  return true;}  }
class C{  @Override public void error(SAXParseException e) throws SAXException {  LOG.severe("Unable to parse xml file.  publicId=(" + documentLocator.getPublicId() + "), systemId=("+ documentLocator.getSystemId()+ "), lineNumber="+ documentLocator.getLineNumber()+ ", columnNumber="+ documentLocator.getColumnNumber()+ ".");  super.error(e);}  }
class C{  public LinkedList<TorrentCrawledAlbumSearchResult> detect(TorrentCrawlableSearchResult parent,List<? extends TorrentItemSearchResult> results){  LinkedList<TorrentCrawledAlbumSearchResult> albums=new LinkedList<TorrentCrawledAlbumSearchResult>();  Map<String,LinkedList<TorrentItemSearchResult>> dirs=new HashMap<String,LinkedList<TorrentItemSearchResult>>();  for (  TorrentItemSearchResult sr : results) {    String path=sr.getFilePath();    String dir=FilenameUtils.getPathNoEndSeparator(path);    if (!dirs.containsKey(dir)) {      dirs.put(dir,new LinkedList<TorrentItemSearchResult>());    }    LinkedList<TorrentItemSearchResult> items=dirs.get(dir);    items.add(sr);  }  for (  Map.Entry<String,LinkedList<TorrentItemSearchResult>> kv : dirs.entrySet()) {    int numAudio=0;    for (    TorrentItemSearchResult sr : kv.getValue()) {      String mime=MimeDetector.getMimeType(sr.getFilePath());      if (mime.startsWith("audio")) {        numAudio++;      }    }  }  return albums;}  }
class C{  public static void main(String[] args){  Header.printHeader(ConvertOsmToMatsim.class.toString(),args);  String inputFile=null;  String outputFile=null;  String shapefileLinks=null;  boolean fullNetwork=true;  String CRS=null;  if (args.length != 5) {    throw new IllegalArgumentException("Must have five arguments: and osm-file; network-file; shapefile; boolean indicating full or cleaned network; and the final coordinate reference system.");  } else {    inputFile=args[0];    outputFile=args[1];    shapefileLinks=args[2].equalsIgnoreCase("null") ? null : args[2];    fullNetwork=Boolean.parseBoolean(args[3]);    CRS=args[4];  }  Scenario sc=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network nw=sc.getNetwork();  CoordinateTransformation ct=TransformationFactory.getCoordinateTransformation(TransformationFactory.WGS84,CRS);  OsmNetworkReader onr=new OsmNetworkReader(nw,ct,true);  onr.setKeepPaths(fullNetwork);  LOG.info("Overwriting some highway defaults...");  onr.setHighwayDefaults(1,"trunk",1,120 / 3.6,1,2000);  onr.setHighwayDefaults(1,"primary",2,80 / 3.6,1,1500);  onr.setHighwayDefaults(1,"secondary",2,80 / 3.6,1,1000);  onr.setHighwayDefaults(1,"tertiary",1,60 / 3.6,1,1000);  onr.setHighwayDefaults(1,"unclassified",1,60 / 3.6,1,800);  onr.setHighwayDefaults(1,"residential",1,45 / 3.6,1,600);  onr.setHighwayDefaults(1,"service",1,60 / 3.6,1,600);  LOG.info("Parsing the OSM file...");  onr.parse(inputFile);  NetworkCleaner nc=new NetworkCleaner();  nc.run(nw);  new NetworkWriter(nw).writeFileV1(outputFile);  sc.getConfig().global().setCoordinateSystem(CRS);  FeatureGeneratorBuilderImpl builder=new FeatureGeneratorBuilderImpl(nw,CRS);  builder.setWidthCoefficient(-0.01);  builder.setFeatureGeneratorPrototype(PolygonFeatureGenerator.class);  builder.setWidthCalculatorPrototype(CapacityBasedWidthCalculator.class);  if (shapefileLinks != null) {    new Links2ESRIShape(nw,shapefileLinks,builder).write();  }  Header.printFooter();}  }
class C{  public void sort(){  Arrays.sort(V,0,size());}  }
class C{  public Node adoptNode(Node node){  if (!(node instanceof NodeImpl)) {    return null;  }  NodeImpl nodeImpl=(NodeImpl)node;switch (nodeImpl.getNodeType()) {case Node.ATTRIBUTE_NODE:    AttrImpl attr=(AttrImpl)node;  if (attr.ownerElement != null) {    attr.ownerElement.removeAttributeNode(attr);  }break;case Node.DOCUMENT_FRAGMENT_NODE:case Node.ENTITY_REFERENCE_NODE:case Node.PROCESSING_INSTRUCTION_NODE:case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:case Node.COMMENT_NODE:case Node.ELEMENT_NODE:break;case Node.DOCUMENT_NODE:case Node.DOCUMENT_TYPE_NODE:case Node.ENTITY_NODE:case Node.NOTATION_NODE:throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Cannot adopt nodes of type " + nodeImpl.getNodeType());default :throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Unsupported node type " + node.getNodeType());}Node parent=nodeImpl.getParentNode();if (parent != null) {parent.removeChild(nodeImpl);}changeDocumentToThis(nodeImpl);notifyUserDataHandlers(UserDataHandler.NODE_ADOPTED,node,null);return nodeImpl;}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  private void addRate(Map<String,Map<String,Double>> ratesMap,String sourceCurrencyCode,String targetCurrencyCode,double rate){  Map<String,Double> rhs=ratesMap.get(sourceCurrencyCode);  if (rhs == null) {    rhs=new HashMap<>();    ratesMap.put(sourceCurrencyCode,rhs);  }  rhs.put(targetCurrencyCode,rate);}  }
class C{  public void saveProjectContext(ProjectContext context){  try {    Output output=new Output(new FileOutputStream(context.path + "/" + context.name+ "."+ ProjectManager.PROJECT_EXTENSION));    ProjectDescriptor descriptor=DescriptorConverter.convert(context);    kryo.writeObject(output,descriptor);    output.flush();    output.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  private List<String> kickOffTargetDevicesCreation(StorageSystem storage,CIMObjectPath volumeGroupPath,String sourceGroupName,String label,Boolean createInactive,boolean thinlyProvisioned,int count,URI storagePoolUri,long capacity,TaskCompleter taskCompleter) throws Exception {  if (storage.checkIfVmax3()) {    StoragePool storagePool=_dbClient.queryObject(StoragePool.class,storagePoolUri);    CIMObjectPath poolPath=_helper.getPoolPath(storage,storagePool);    return createTargetDevices(storage,poolPath,volumeGroupPath,null,sourceGroupName,null,createInactive,count,capacity,taskCompleter);  } else   if (thinlyProvisioned) {    return ReplicationUtils.createTargetDevices(storage,sourceGroupName,label,createInactive,count,storagePoolUri,capacity,true,null,taskCompleter,_dbClient,_helper,_cimPath);  } else {    CIMObjectPath poolPath=findSnapStoragePoolOrThrow(storage);    CIMInstance storageSetting=createStorageSetting(storage,poolPath);    if (storageSetting == null) {      final String errMsg=String.format("Unable to find StoragePoolSetting for SnapStoragePool %s when creating target devices on array %s",poolPath.toString(),storage.getSerialNumber());      _log.error(errMsg);      throw DeviceControllerExceptions.smis.unableToFindStoragePoolSetting();    }    return createTargetDevices(storage,poolPath,null,storageSetting,sourceGroupName,label,createInactive,count,capacity,taskCompleter);  }}  }
class C{  public void createPictScenario03_1() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-06-30 00:00:00");  String supplierAdminId="Pict03_1Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03_1SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03_1Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03_1Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03_1CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03_1",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03_1",serviceDetails,customerAdmin,role);  long usageStartTime=DateTimeHandling.calculateMillis("2013-07-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-02 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-07-02 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-02 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-07-02 14:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-22 09:59:59");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-07-22 10:10:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03_1",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03_1",customer);}  }
class C{  public void accumulate(double x){  Cell[] as;  long b, v, r;  int m;  Cell a;  if ((as=cells) != null || (r=Double.doubleToRawLongBits(function.applyAsDouble(Double.longBitsToDouble(b=base),x))) != b && !casBase(b,r)) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=(r=Double.doubleToRawLongBits(function.applyAsDouble(Double.longBitsToDouble(v=a.value),x))) == v || a.cas(v,r)))     doubleAccumulate(x,function,uncontended);  }}  }
class C{  private void popContext(){  contextStack.pop();}  }
class C{  public boolean hasId(){  return hasExtension(Id.class);}  }
class C{  private void processAStore(Instruction s){  Operand value=AStore.getValue(s);  if (value.isConstant()) {    findOrCreateVertex((ConstantOperand)value);  }  Operand index=AStore.getIndex(s);  if (index.isConstant()) {    findOrCreateVertex((ConstantOperand)index);  }}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize){  addEmojis(context,text,emojiSize,emojiAlignment,textSize,0,-1,false);}  }
class C{  public AggregateApplicationBuilder web(boolean webEnvironment){  this.webEnvironment=webEnvironment;  return this;}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  public static InetAddress parseInetAddr(byte[] inetAddrBytes,int offset,int count){  InetAddress inetAddress=null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < count; i++) {    sb.append(Integer.toString(inetAddrBytes[offset + i] & 0xff));    if (i != count - 1) {      sb.append('.');    }  }  try {    inetAddress=InetAddress.getByName(sb.toString());  } catch (  UnknownHostException e) {    e.printStackTrace();  }  return inetAddress;}  }
class C{  public DailyCalendar(org.quartz.Calendar baseCalendar,TimeZone timeZone,long rangeStartingTimeInMillis,long rangeEndingTimeInMillis){  super(baseCalendar,timeZone);  setTimeRange(rangeStartingTimeInMillis,rangeEndingTimeInMillis);}  }
class C{  public MySqlCursorDeclareStatement parseCursorDeclare(){  MySqlCursorDeclareStatement stmt=new MySqlCursorDeclareStatement();  accept(Token.DECLARE);  stmt.setCursorName(exprParser.name().getSimpleName());  accept(Token.CURSOR);  accept(Token.FOR);  stmt.setSelect(parseSelect());  accept(Token.SEMI);  return stmt;}  }
class C{  public final void pushNamespaceContextNull(){  m_prefixResolvers.push(null);}  }
class C{  public static ConstantNode forLong(long i){  return createPrimitive(JavaConstant.forLong(i));}  }
class C{  public String spaceToken(){  return boundedToken(' ');}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_derivedAttribute_1_();}  }
class C{  public boolean isPk(){  return _isPk;}  }
class C{  public static final String numberToState(int stateNumber){  if (stateNumber == NUMBER_OF_MISSING_STATE) {    return "Missing";  }  if (stateNumber == NUMBER_OF_OMITTED_STATE) {    return "Omitted";  }  int[] array=new int[3];  if (3 != NUMBER_OF_PROVERS) {    Activator.getDefault().logDebug("Method ColorPredicate.numberToState must be reimplemented" + " when number of provers changes");  }  for (int i=0; i < PROVER_STATUSES[0].length; i++) {    array[0]=i;    for (int j=0; j < PROVER_STATUSES[1].length; j++) {      array[1]=j;      for (int k=0; k < PROVER_STATUSES[2].length; k++) {        array[2]=k;        if (numberOfState(array) == stateNumber) {          return PROVER_NAMES[0] + " : " + PROVER_STATUSES[0][i]+ ", "+ PROVER_NAMES[1]+ " : "+ PROVER_STATUSES[1][j]+ ", "+ PROVER_NAMES[2]+ " : "+ PROVER_STATUSES[2][k];        }      }    }  }  return "No state with number " + stateNumber;}  }
class C{  private PostgreSQLModuleFunctions(){}  }
class C{  private void findFile(File fileToLocate,boolean selectFile,boolean reload){  if (fileToLocate == null || !fileToLocate.isDirectory()) {    return;  }  File file=null;  try {    file=fileToLocate.getCanonicalFile();  } catch (  Exception e) {    return;  }  useNodeQueue=false;  TreePath pathToSelect;  try {    List files=new ArrayList();    files.add(file);    while ((file=chooser.getFileSystemView().getParentDirectory(file)) != null) {      files.add(0,file);    }    List path=new ArrayList();    DefaultMutableTreeNode node=(DefaultMutableTreeNode)tree.getModel().getRoot();    path.add(node);    DefaultMutableTreeNode current;    boolean found=true;    while (files.size() > 0 && found) {      found=false;      for (int i=0, c=node.getChildCount(); i < c; i++) {        current=(DefaultMutableTreeNode)node.getChildAt(i);        File f=((FileTreeNode)current).getFile();        if (files.get(0).equals(f)) {          path.add(current);          files.remove(0);          node=current;          found=true;          break;        }      }    }    pathToSelect=new TreePath(path.toArray());    if (pathToSelect.getLastPathComponent() instanceof FileTreeNode && reload) {      ((FileTreeNode)(pathToSelect.getLastPathComponent())).clear();      enqueueChildren((FileTreeNode)pathToSelect.getLastPathComponent());    }  }  finally {    useNodeQueue=true;  }  if (selectFile) {    tree.expandPath(pathToSelect);    tree.setSelectionPath(pathToSelect);  }  tree.makeVisible(pathToSelect);}  }
class C{  public Duration withSeconds(long seconds){  return create(seconds,nanos);}  }
class C{  public void paintTableBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private byte[] assembleRtcpPacket(){  byte data[]=new byte[0];  RtpSource s=rtcpSession.getMySource();  if ((s.activeSender) && (rtcpSession.timeOfLastRTCPSent < rtcpSession.timeOfLastRTPSent)) {    data=RtcpPacketUtils.append(data,assembleSenderReportPacket());  } else {    data=RtcpPacketUtils.append(data,assembleReceiverReportPacket());  }  Vector<RtcpSdesPacket> repvec=makereports();  for (int i=0; i < repvec.size(); i++) {    if (repvec.elementAt(i).data != null)     data=RtcpPacketUtils.append(data,repvec.elementAt(i).data);  }  RtcpByePacket byepacket=null;  if (rtcpSession.isByeRequested) {    int ssrc[]={rtcpSession.SSRC};    byepacket=new RtcpByePacket(ssrc,null);    data=RtcpPacketUtils.append(data,byepacket.data);  }  return data;}  }
class C{  public boolean mousePressed(MouseEvent e){  if (wantsEvents()) {    if (omdtmm != null) {      omdtmm.mousePressed(e);    }    return consumeEvents;  } else {    return super.mousePressed(e);  }}  }
class C{  public HistogramBuilder(String name){  super(name,InternalHistogram.TYPE.name());}  }
class C{  public DERExternal(ASN1ObjectIdentifier directReference,ASN1Integer indirectReference,ASN1Primitive dataValueDescriptor,int encoding,ASN1Primitive externalData){  setDirectReference(directReference);  setIndirectReference(indirectReference);  setDataValueDescriptor(dataValueDescriptor);  setEncoding(encoding);  setExternalContent(externalData.toASN1Primitive());}  }
class C{  public Executor withCheckpointFile(File checkpointFile){  this.checkpointFile=checkpointFile;  return this;}  }
class C{  public RowIdImpl(int pageNumber,int rowNumber){  _pageNumber=pageNumber;  _rowNumber=rowNumber;  _type=((_pageNumber == FIRST_PAGE_NUMBER) ? Type.ALWAYS_FIRST : ((_pageNumber == LAST_PAGE_NUMBER) ? Type.ALWAYS_LAST : Type.NORMAL));}  }
class C{  private AttributeActionSet processAttributeSection(ModeUsage modeUsage,String ns,IntSet indexSet,Attributes attributes) throws SAXException {  Mode mode=modeUsage.getMode(currentSection.context);  AttributeActionSet actions=mode.getAttributeActions(ns);  if (actions.getReject() && !attributeNamespaceRejected) {    attributeNamespaceRejected=true;    if (eh != null)     eh.error(new SAXParseException(localizer.message("reject_attribute",ns),locator));  }  Schema[] schemas=actions.getSchemas();  for (int j=0; j < schemas.length; j++) {    if (attributeSchemas.contains(schemas[j]))     continue;    attributeSchemas.add(schemas[j]);    if (filteredAttributes == null)     filteredAttributes=filterAttributes(indexSet,attributes);    validateAttributes(schemas[j],filteredAttributes);  }  return actions;}  }
class C{  public String toString(){  if (nodes.isEmpty()) {    return "";  }  StringWriter sw=new StringWriter(nodes.size() * 128);  try {    for (Iterator i=nodes.iterator(); i.hasNext(); ) {      Object node=i.next();      if (node instanceof Element) {        DEFAULT_OUTPUTTER.output((Element)node,sw);      } else       if (node instanceof Attribute) {        DEFAULT_OUTPUTTER.output((Attribute)node,sw);      } else       if (node instanceof Text) {        DEFAULT_OUTPUTTER.output((Text)node,sw);      } else       if (node instanceof Document) {        DEFAULT_OUTPUTTER.output((Document)node,sw);      } else       if (node instanceof ProcessingInstruction) {        DEFAULT_OUTPUTTER.output((ProcessingInstruction)node,sw);      } else       if (node instanceof Comment) {        DEFAULT_OUTPUTTER.output((Comment)node,sw);      } else       if (node instanceof CDATA) {        DEFAULT_OUTPUTTER.output((CDATA)node,sw);      } else       if (node instanceof DocType) {        DEFAULT_OUTPUTTER.output((DocType)node,sw);      } else       if (node instanceof EntityRef) {        DEFAULT_OUTPUTTER.output((EntityRef)node,sw);      } else {        throw new IllegalArgumentException("Cannot process a " + (node == null ? "null node" : "node of class " + node.getClass().getName()));      }    }  } catch (  IOException e) {    throw new Error();  }  return sw.toString();}  }
class C{  public String updateQuery(String query){  for (  String[] strs : SolrQueryParser.parse(query)) {    String key=strs[SolrQueryParser.INDEX_FIELD];    String token=strs[SolrQueryParser.INDEX_VALUE];    if (!"".equals(key)) {      query=query.replace(key,key.toLowerCase());    }    boolean suggestions_empty=true;    try {      suggestions_empty=getSuggestions(token).getSuggestions().get("suggest").isEmpty();    } catch (    IOException|SolrServerException e) {    }    if (!(!"".equals(key) || token.startsWith("{") || token.startsWith("[")|| token.startsWith("(")|| token.contains("*")|| token.contains("?")|| token.contains("TO")|| token.contains("OR")|| token.contains("AND")|| token.matches(".*\\d.*")|| !suggestions_empty)) {      String wtk_boundaries=geocoder.getBoundariesWKT(token);      if (wtk_boundaries != null) {        String locate="(" + token + " OR footprint:\"Intersects("+ wtk_boundaries+ ") distErrPct=0\")";        query=query.replace(token,locate).trim();      }    }  }  return query;}  }
class C{  public static boolean isLocal(Value val){  return (getEquivalentValueRoot(val) instanceof Local);}  }
class C{  private void computeZoneToZoneTrips(Scenario sc,Matrix originDestinationMatrix,double timeOfDay){  log.info("Computing zone2zone trip numbers ...");  Entry matrixEntry=null;  Map<Id<ActivityFacility>,? extends ActivityFacility> allFacilities;  if (parcels == null)   allFacilities=zones.getFacilities(); else   allFacilities=parcels.getFacilities();  for (  Person person : sc.getPopulation().getPersons().values()) {    Plan plan=person.getSelectedPlan();    boolean isFirstPlanActivity=true;    String lastZoneId=null;    if (plan.getPlanElements().size() <= 1)     continue;    boolean enterTripInODMatrix=true;    for (    PlanElement pe : plan.getPlanElements()) {      if (pe instanceof Activity) {        Activity act=(Activity)pe;        Id id=act.getFacilityId();        if (id == null)         continue;        ActivityFacility fac=allFacilities.get(id);        if (fac == null)         continue;        String zone_ID=((Id)fac.getCustomAttributes().get(InternalConstants.ZONE_ID)).toString();        if (isFirstPlanActivity)         isFirstPlanActivity=false; else         if (enterTripInODMatrix) {          matrixEntry=originDestinationMatrix.getEntry(lastZoneId,zone_ID);          if (matrixEntry != null) {            double trips=matrixEntry.getValue() + 1.;            originDestinationMatrix.setEntry(lastZoneId,zone_ID,trips);          } else           originDestinationMatrix.createEntry(lastZoneId,zone_ID,1.);        }        lastZoneId=zone_ID;      }    }  }  log.info("DONE with computing zone2zone trip numbers ...");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:21.197 -0500",hash_original_method="AA8AE34ED725E04DA1882B7CEAEB718F",hash_generated_method="C5EE79131CBB996273FBE7D43CDE847F") private static int intIntoCharArray(char[] buf,int cursor,int n){  buf[0]=(char)cursor;  buf[0]=(char)n;  return cursor;}  }
class C{  public void connect(File file) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException {  FileInputStream in=new FileInputStream(file);  Properties properties=new Properties();  properties.load(in);  Class.forName(properties.getProperty("driver")).newInstance();  connection=DriverManager.getConnection(properties.getProperty("url"),properties.getProperty("userName"),properties.getProperty("password"));}  }
class C{  private void updateNextNextAuthRoot(int layer){  byte[] OTSseed=new byte[mdLength];  OTSseed=gmssRandom.nextSeed(nextNextSeeds[layer - 1]);  if (layer == numLayer - 1) {    WinternitzOTSignature ots=new WinternitzOTSignature(OTSseed,digestProvider.get(),otsIndex[layer]);    this.nextNextRoot[layer - 1].update(nextNextSeeds[layer - 1],ots.getPublicKey());  } else {    this.nextNextRoot[layer - 1].update(nextNextSeeds[layer - 1],nextNextLeaf[layer - 1].getLeaf());    this.nextNextLeaf[layer - 1].initLeafCalc(nextNextSeeds[layer - 1]);  }}  }
class C{  public static LostAlarm parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  LostAlarm object=new LostAlarm();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"LostAlarm".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (LostAlarm)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","Exception").equals(reader.getName())) {      object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,ExtensionMapper.class));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void readData(DataInput din) throws IOException {  int length=getDataLength();  for (int i=0; i < length; i++) {    din.readByte();  }}  }
class C{  public void removeNetwork(RemoveNetworkParams params) throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("DELETE").path(apiVersionPathPrefix + "/networks/" + params.getNetworkId())){    final DockerResponse response=connection.request();    int status=response.getStatus();    if (status == 404) {      throw new NetworkNotFoundException(readAndCloseQuietly(response.getInputStream()));    }    if (status / 100 != 2) {      throw getDockerException(response);    }  } }  }
class C{  public double norm(){  return Math.sqrt(x * x + y * y + z * z);}  }
class C{  public void updateCpuUsage(){  if ((prevUptime > 0L) && (this.uptime > prevUptime)) {    long elapsedCpu=this.processCpuTime - prevProcessCpuTime;    long elapsedTime=this.uptime - prevUptime;    cpuUsage=Math.min(99F,elapsedCpu / (elapsedTime * 10000F * this.availableProcessors));  }  this.prevUptime=this.uptime;  this.prevProcessCpuTime=this.processCpuTime;}  }
class C{  public boolean next(){  this.position=this.buffer.position();  if (!buffer.hasRemaining()) {    return false;  }  this.nextCalled=true;  byte tsTypeFlag=buffer.get();  if (GTSEncoder.FLAGS_ENCRYPTED == (tsTypeFlag & GTSEncoder.FLAGS_MASK_ENCRYPTED)) {    int enclen=(int)Varint.decodeUnsignedLong(buffer);    if (null == wrappingKey) {      buffer.position(buffer.position() + enclen);      return next();    }    byte[] encrypted=new byte[enclen];    buffer.get(encrypted);    AESWrapEngine engine=new AESWrapEngine();    CipherParameters params=new KeyParameter(this.wrappingKey);    engine.init(false,params);    try {      byte[] decrypted=engine.unwrap(encrypted,0,encrypted.length);      PKCS7Padding padding=new PKCS7Padding();      int padcount=padding.padCount(decrypted);      ByteBuffer bb=ByteBuffer.allocate(decrypted.length - padcount + this.buffer.remaining());      bb.put(decrypted,0,decrypted.length - padcount);      bb.put(this.buffer);      bb.flip();      this.buffer=bb;    } catch (    InvalidCipherTextException icte) {    }    return next();  }  byte locElevFlag=0x0;  if (GTSEncoder.FLAGS_CONTINUATION == (tsTypeFlag & GTSEncoder.FLAGS_CONTINUATION)) {    if (!buffer.hasRemaining()) {      return false;    }    locElevFlag=buffer.get();  }switch (tsTypeFlag & GTSEncoder.FLAGS_MASK_TIMESTAMP) {case GTSEncoder.FLAGS_TIMESTAMP_RAW_ABSOLUTE:{      ByteOrder order=buffer.order();      buffer.order(ByteOrder.BIG_ENDIAN);      previousLastTimestamp=lastTimestamp;      lastTimestamp=buffer.getLong();      buffer.order(order);    }  break;case GTSEncoder.FLAGS_TIMESTAMP_EQUALS_BASE:previousLastTimestamp=lastTimestamp;lastTimestamp=baseTimestamp;break;case GTSEncoder.FLAGS_TIMESTAMP_ZIGZAG_DELTA_BASE:{long delta=Varint.decodeSignedLong(buffer);previousLastTimestamp=lastTimestamp;lastTimestamp=baseTimestamp + delta;}break;case GTSEncoder.FLAGS_TIMESTAMP_ZIGZAG_DELTA_PREVIOUS:{long delta=Varint.decodeSignedLong(buffer);previousLastTimestamp=lastTimestamp;lastTimestamp=lastTimestamp + delta;}break;default :throw new RuntimeException("Invalid timestamp format.");}if (GTSEncoder.FLAGS_LOCATION == (locElevFlag & GTSEncoder.FLAGS_LOCATION)) {if (GTSEncoder.FLAGS_LOCATION_IDENTICAL != (locElevFlag & GTSEncoder.FLAGS_LOCATION_IDENTICAL)) {if (GTSEncoder.FLAGS_LOCATION_GEOXPPOINT_ZIGZAG_DELTA == (locElevFlag & GTSEncoder.FLAGS_LOCATION_GEOXPPOINT_ZIGZAG_DELTA)) {long delta=Varint.decodeSignedLong(buffer);previousLastGeoXPPoint=lastGeoXPPoint;lastGeoXPPoint=lastGeoXPPoint + delta;} else {ByteOrder order=buffer.order();buffer.order(ByteOrder.BIG_ENDIAN);previousLastGeoXPPoint=lastGeoXPPoint;lastGeoXPPoint=buffer.getLong();buffer.order(order);}}} else {previousLastGeoXPPoint=lastGeoXPPoint;lastGeoXPPoint=GeoTimeSerie.NO_LOCATION;}if (GTSEncoder.FLAGS_ELEVATION == (locElevFlag & GTSEncoder.FLAGS_ELEVATION)) {if (GTSEncoder.FLAGS_ELEVATION_IDENTICAL != (locElevFlag & GTSEncoder.FLAGS_ELEVATION_IDENTICAL)) {boolean zigzag=GTSEncoder.FLAGS_ELEVATION_ZIGZAG == (locElevFlag & GTSEncoder.FLAGS_ELEVATION_ZIGZAG);long encoded;if (zigzag) {encoded=Varint.decodeSignedLong(buffer);} else {ByteOrder order=buffer.order();buffer.order(ByteOrder.BIG_ENDIAN);encoded=buffer.getLong();buffer.order(order);}if (GTSEncoder.FLAGS_ELEVATION_DELTA_PREVIOUS == (locElevFlag & GTSEncoder.FLAGS_ELEVATION_DELTA_PREVIOUS)) {previousLastElevation=lastElevation;lastElevation=lastElevation + encoded;} else {previousLastElevation=lastElevation;lastElevation=encoded;}}} else {previousLastElevation=lastElevation;lastElevation=GeoTimeSerie.NO_ELEVATION;}switch (tsTypeFlag & GTSEncoder.FLAGS_MASK_TYPE) {case GTSEncoder.FLAGS_TYPE_LONG:lastType=TYPE.LONG;if (GTSEncoder.FLAGS_VALUE_IDENTICAL != (tsTypeFlag & GTSEncoder.FLAGS_VALUE_IDENTICAL)) {long encoded;if (GTSEncoder.FLAGS_LONG_ZIGZAG == (tsTypeFlag & GTSEncoder.FLAGS_LONG_ZIGZAG)) {encoded=Varint.decodeSignedLong(buffer);} else {ByteOrder order=buffer.order();buffer.order(ByteOrder.BIG_ENDIAN);encoded=buffer.getLong();buffer.order(order);}if (GTSEncoder.FLAGS_LONG_DELTA_PREVIOUS == (tsTypeFlag & GTSEncoder.FLAGS_LONG_DELTA_PREVIOUS)) {previousLastLongValue=lastLongValue;lastLongValue=lastLongValue + encoded;} else {previousLastLongValue=lastLongValue;lastLongValue=encoded;}} else {previousLastLongValue=lastLongValue;}break;case GTSEncoder.FLAGS_TYPE_DOUBLE:lastType=TYPE.DOUBLE;if (GTSEncoder.FLAGS_VALUE_IDENTICAL != (tsTypeFlag & GTSEncoder.FLAGS_VALUE_IDENTICAL)) {if (GTSEncoder.FLAGS_DOUBLE_IEEE754 == (tsTypeFlag & GTSEncoder.FLAGS_DOUBLE_IEEE754)) {ByteOrder order=buffer.order();buffer.order(ByteOrder.BIG_ENDIAN);previousLastDoubleValue=lastDoubleValue;lastDoubleValue=buffer.getDouble();previousLastBDValue=lastBDValue;lastBDValue=null;buffer.order(order);} else {int scale=buffer.get();long unscaled=Varint.decodeSignedLong(buffer);previousLastBDValue=lastBDValue;lastBDValue=new BigDecimal(new BigInteger(Long.toString(unscaled)),scale);}} else {previousLastDoubleValue=lastDoubleValue;previousLastBDValue=lastBDValue;}break;case GTSEncoder.FLAGS_TYPE_STRING:lastType=TYPE.STRING;if (GTSEncoder.FLAGS_VALUE_IDENTICAL != (tsTypeFlag & GTSEncoder.FLAGS_VALUE_IDENTICAL)) {long len=Varint.decodeUnsignedLong(buffer);if (len > buffer.remaining()) {throw new RuntimeException("Invalid string length.");}byte[] utf8=new byte[(int)len];buffer.get(utf8);previousLastStringValue=lastStringValue;lastStringValue=new String(utf8,Charsets.UTF_8);} else {previousLastStringValue=lastStringValue;}break;case GTSEncoder.FLAGS_TYPE_BOOLEAN:if (GTSEncoder.FLAGS_DELETE_MARKER == (tsTypeFlag & GTSEncoder.FLAGS_MASK_TYPE_FLAGS)) {lastType=TYPE.UNDEFINED;} else {lastType=TYPE.BOOLEAN;if (GTSEncoder.FLAGS_BOOLEAN_VALUE_TRUE == (tsTypeFlag & GTSEncoder.FLAGS_MASK_TYPE_FLAGS)) {lastBooleanValue=true;} else if (GTSEncoder.FLAGS_BOOLEAN_VALUE_FALSE == (tsTypeFlag & GTSEncoder.FLAGS_MASK_TYPE_FLAGS)) {lastBooleanValue=false;} else {throw new RuntimeException("Invalid boolean value.");}}break;default :throw new RuntimeException("Invalid type encountered!");}return true;}  }
class C{  protected SerializableType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private IBindingSet[] optimize(final StaticAnalysis sa,final QueryBase queryRoot,final StaticBindingInfo staticBindingInfo,final VariableUsageInfo ancestorVarUsageInfo,final Set<InlineTasks> inlineTasks,final BindingsClause bindingsClause){  if (bindingsClause != null) {    List<IBindingSet> bs=bindingsClause.getBindingSets();    IBindingSet[] bsList=bs.toArray(new IBindingSet[bs.size()]);    staticBindingInfo.addProduced(bs);    queryRoot.setBindingsClause(null);    final VariableUsageInfo childVarUsageInfo=new VariableUsageInfo();    childVarUsageInfo.extractVarSPUsageInfoChildrenOrSelf(queryRoot.getWhereClause());    final Map<IVariable<?>,IConstant<?>> staticVars=SolutionSetStatserator.get(bsList).getConstants();    for (    IVariable<?> var : staticVars.keySet()) {      if (childVarUsageInfo.varUsed(var)) {        final IConstant value=staticVars.get(var);        inlineTasks.add(new InlineTasks(var,value,childVarUsageInfo.getVarUsages(var)));      }    }  }  optimize(sa,queryRoot.getWhereClause(),staticBindingInfo,ancestorVarUsageInfo,inlineTasks);  for (  InlineTasks inlineTask : inlineTasks) {    inlineTask.apply();  }  final IBindingSet[] bindingSetsOut=staticBindingInfo.joinProduced();  return bindingSetsOut;}  }
class C{  private void assertTargetStorageEntityValid(StorageEntity targetStorageEntity){  try {    storageHelper.getStorageBucketName(targetStorageEntity);  } catch (  IllegalStateException e) {    throw new IllegalArgumentException(e.getMessage(),e);  }  try {    storageHelper.getStorageKmsKeyId(targetStorageEntity);  } catch (  IllegalStateException e) {    throw new IllegalArgumentException(e.getMessage(),e);  }}  }
class C{  public boolean undo(IGameState gameState){  boolean rc=super.undo(gameState);  if (!rc)   return false;  TicTacToeState state=(TicTacToeState)gameState;  SlideLogic logic=(SlideLogic)state.logic();  logic.undoTurn();  return true;}  }
class C{  public int numBytes(){  return size;}  }
class C{  public static ClassReader readAndPatchClass(InputStream in) throws IOException {  final byte[] b=new byte[8];  final PushbackInputStream pbin=new PushbackInputStream(in,b.length);  for (int upto=0; upto < b.length; ) {    final int read=pbin.read(b,upto,b.length - upto);    if (read == -1)     throw new EOFException("Not enough bytes available to read header of class file.");    upto+=read;  }  patchClassMajorVersion(b,Opcodes.V1_8 + 1,Opcodes.V1_8);  pbin.unread(b);  return new ClassReader(pbin);}  }
class C{  void removeLocation(){  IStructuredSelection selection=(IStructuredSelection)fTableViewer.getSelection();  fLocationList.removeAll(selection.toList());  fTableViewer.refresh();  validateLocations();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  protected static DocumentFactory createSingleton(String className){  try {    Class<DocumentFactory> theClass=(Class<DocumentFactory>)Class.forName(className,true,DocumentFactory.class.getClassLoader());    return theClass.newInstance();  } catch (  Throwable e) {    System.out.println("WARNING: Cannot load DocumentFactory: " + className);    return new DocumentFactory();  }}  }
class C{  public ClientSettings(String locale,int viewDistance,int chatFlags,boolean chatColors,int skinFlags,int mainHand){  this.locale=locale;  this.viewDistance=viewDistance;  this.chatFlags=chatFlags;  this.chatColors=chatColors;  this.skinFlags=skinFlags;  this.mainHand=mainHand;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void checkEventsCorrespondToPlans(final Population population){  for (  Entry<Id<Person>,List<Event>> entry : eventsByPerson.entrySet()) {    List<Event> list=entry.getValue();    Person p=population.getPersons().get(entry.getKey());    Plan plan=p.getSelectedPlan();    int index=0;    Activity act=null;    Leg leg=null;    for (    PlanElement pe : plan.getPlanElements()) {      if (pe instanceof Activity) {        act=(Activity)pe;        if (leg != null) {          if (leg.getMode().equals(TransportMode.car) && ((NetworkRoute)leg.getRoute()).getLinkIds().size() > 0) {            assertTrue(list.get(index) instanceof LinkEnterEvent);            assertTrue(act.getLinkId().toString().equalsIgnoreCase(((LinkEnterEvent)list.get(index)).getLinkId().toString()));            index++;          }          assertTrue(list.get(index) instanceof PersonArrivalEvent);          assertTrue(act.getLinkId().toString().equalsIgnoreCase(((PersonArrivalEvent)list.get(index)).getLinkId().toString()));          index++;          assertTrue(list.get(index) instanceof ActivityStartEvent);          assertEquals(act.getLinkId(),((ActivityStartEvent)list.get(index)).getLinkId());          index++;        }      } else       if (pe instanceof Leg) {        leg=(Leg)pe;        assertTrue(list.get(index) instanceof ActivityEndEvent);        assertEquals(act.getLinkId(),((ActivityEndEvent)list.get(index)).getLinkId());        index++;        assertTrue(list.get(index) instanceof PersonDepartureEvent);        assertTrue(act.getLinkId().toString().equalsIgnoreCase(((PersonDepartureEvent)list.get(index)).getLinkId().toString()));        index++;        if (leg.getMode().equals(TransportMode.car)) {          if (((NetworkRoute)leg.getRoute()).getLinkIds().size() > 0) {            assertTrue(list.get(index) instanceof VehicleEntersTrafficEvent);            assertTrue(act.getLinkId().toString().equalsIgnoreCase(((VehicleEntersTrafficEvent)list.get(index)).getLinkId().toString()));            index++;            assertTrue(list.get(index) instanceof LinkLeaveEvent);            assertTrue(act.getLinkId().toString().equalsIgnoreCase(((LinkLeaveEvent)list.get(index)).getLinkId().toString()));            index++;          }          for (          Id<Link> linkId : ((NetworkRoute)leg.getRoute()).getLinkIds()) {            assertTrue(list.get(index) instanceof LinkEnterEvent);            assertTrue(linkId.equals(((LinkEnterEvent)list.get(index)).getLinkId()));            index++;            assertTrue(list.get(index) instanceof LinkLeaveEvent);            assertTrue(linkId.equals(((LinkLeaveEvent)list.get(index)).getLinkId()));            index++;          }        }      }    }  }}  }
class C{  public void beginRule(BaseRule rule){}  }
class C{  protected void assertEquals(TextMessage m1,TextMessage m2) throws JMSException {  assertEquals("",m1,m2);}  }
class C{  public void onCharacteristicReadRequest(String address,int transId,int offset,boolean isLong,int srvcType,int srvcInstId,ParcelUuid srvcId,int charInstId,ParcelUuid charId){  UUID srvcUuid=srvcId.getUuid();  UUID charUuid=charId.getUuid();  if (DBG)   Log.d(TAG,"onCharacteristicReadRequest() - " + "service=" + srvcUuid + ", characteristic="+ charUuid);  BluetoothDevice device=mAdapter.getRemoteDevice(address);  BluetoothGattService service=getService(srvcUuid,srvcInstId,srvcType);  if (service == null)   return;  BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid);  if (characteristic == null)   return;  try {    mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_BEFORE_CODE_2__MORE_CODE_1:    getMoreCode_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public StrStrMap addPair(String key,String value){  if (key == null || value == null) {    logger.error("invalid key value as null. ignore pair");  } else {    this.map.put(key,value);  }  return this;}  }
class C{  public AccountHeaderBuilder withSavedInstance(Bundle savedInstance){  this.mSavedInstance=savedInstance;  return this;}  }
class C{  public SourceCallChainInfo process_call_chain(Stmt s,SootMethod method){  if (is_terminal(method))   return new SourceCallChainInfo(method,s,"syscall");  if (isSourceMethod(method)) {    SourceCallChainInfo cci=new SourceCallChainInfo(method,s,"call-chain");    CallGraph cg=PTABridge.v().getCallGraph();    Set<SootMethod> processed_methods=new HashSet<SootMethod>();    List<SourceCallChainInfo> calls=new ArrayList<SourceCallChainInfo>();    StmtBody stmtBody=(StmtBody)method.getActiveBody();    Iterator stmtIt=stmtBody.getUnits().snapshotIterator();    while (stmtIt.hasNext()) {      if (timeout())       break;      Stmt stmt=(Stmt)stmtIt.next();      if (stmt.containsInvokeExpr()) {        for (        StmtEdge<SootMethod> edge : CollaspedCallGraph.v().getTargetsForStmt(stmt)) {          SootMethod callee=edge.getV2();          if (ignore_dup_methods) {            if (processed_methods.contains(callee)) {              logger.info("pcc: method {}, duplicate callee {}",method,callee);              continue;            }            processed_methods.add(callee);          }          boolean print_callee=!(is_system(method) && is_system(callee));          if (callee.toString().contains("<clinit>")) {            continue;          } else           if (stack.contains(callee)) {          } else {            stack.push(callee);            SourceCallChainInfo calleeCci=process_call_chain(stmt,callee);            stack.pop();            if (calleeCci != null) {              if (print_callee) {                calls.add(calleeCci);              } else {                if (ignore_dup_methods) {                  for (                  SourceCallChainInfo callee_call : calleeCci.contents) {                    if (!processed_methods.contains(callee_call.method)) {                      calls.add(callee_call);                      processed_methods.add(callee_call.method);                    }                  }                } else {                  calls.addAll(Arrays.asList(calleeCci.contents));                }              }            }          }        }      }    }    cci.contents=calls.toArray(cci.contents);    if (ignore_dup_methods)     Arrays.sort(cci.contents); else     cci.merge_contents();    return cci;  }  return null;}  }
class C{  @Override protected void createLabels(){  String text=this.getText();  if (!WWUtil.isEmpty(text)) {    this.addLabel(text);  }  text=this.getBottomLabelText();  if (!WWUtil.isEmpty(text)) {    TacticalGraphicLabel label=this.addLabel(text);    label.setOffset(this.getBottomLabelOffset());  }}  }
class C{  public byte[] brpoplpush(byte[] source,byte[] destination,int timeout){  client.brpoplpush(source,destination,timeout);  client.setTimeoutInfinite();  byte[] reply=client.getBinaryBulkReply();  client.rollbackTimeout();  return reply;}  }
class C{  private DefaultDimensionConfig(DataTableColumn dataTableColumn,PlotDimension dimension,int id){  super(dimension);  this.Id=id;  this.dataTableColumn=dataTableColumn;  setUserDefinedRange(new NumericalValueRange(0,1,-1,true,true));  setAutoLabelIfEnabled();}  }
class C{  static Object resolveToolbarConstraint(JToolBar toolbar){  if (toolbar != null) {    Container parent=toolbar.getParent();    if (parent != null) {      LayoutManager m=parent.getLayout();      if (m instanceof BorderLayout) {        BorderLayout b=(BorderLayout)m;        Object con=b.getConstraints(toolbar);        if (con == SOUTH || con == EAST || con == WEST) {          return con;        }        return NORTH;      }    }  }  return NORTH;}  }
class C{  public TransactionSignature(BigInteger r,BigInteger s){  super(r,s);}  }
class C{  private static boolean isAssignableFrom(Type from,ParameterizedType to,Map<String,Type> typeVarMap){  if (from == null) {    return false;  }  if (to.equals(from)) {    return true;  }  Class<?> clazz=getRawType(from);  ParameterizedType ptype=null;  if (from instanceof ParameterizedType) {    ptype=(ParameterizedType)from;  }  if (ptype != null) {    Type[] tArgs=ptype.getActualTypeArguments();    TypeVariable<?>[] tParams=clazz.getTypeParameters();    for (int i=0; i < tArgs.length; i++) {      Type arg=tArgs[i];      TypeVariable<?> var=tParams[i];      while (arg instanceof TypeVariable) {        TypeVariable<?> v=(TypeVariable<?>)arg;        arg=typeVarMap.get(v.getName());      }      typeVarMap.put(var.getName(),arg);    }    if (typeEquals(ptype,to,typeVarMap)) {      return true;    }  }  for (  Type itype : clazz.getGenericInterfaces()) {    if (isAssignableFrom(itype,to,new HashMap<String,Type>(typeVarMap))) {      return true;    }  }  Type sType=clazz.getGenericSuperclass();  if (isAssignableFrom(sType,to,new HashMap<String,Type>(typeVarMap))) {    return true;  }  return false;}  }
class C{  public static boolean wordMatchesLowerCase(String source,String match){  return wordMatches(true,source,match);}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  mState=ApplicationsState.getInstance(getActivity().getApplication());  mSession=mState.newSession(this);  mPm=getActivity().getPackageManager();  mUserManager=(UserManager)getActivity().getSystemService(Context.USER_SERVICE);  IBinder b=ServiceManager.getService(Context.USB_SERVICE);  mUsbManager=IUsbManager.Stub.asInterface(b);  mAppWidgetManager=AppWidgetManager.getInstance(getActivity());  mDpm=(DevicePolicyManager)getActivity().getSystemService(Context.DEVICE_POLICY_SERVICE);  mSmsManager=ISms.Stub.asInterface(ServiceManager.getService("isms"));  mCanBeOnSdCardChecker=new CanBeOnSdCardChecker();  mSession.resume();  retrieveAppEntry();  setHasOptionsMenu(true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public OrientedDrawable(Drawable drawable,int rotationAngle){  super(drawable);  Preconditions.checkArgument(rotationAngle % 90 == 0);  mRotationMatrix=new Matrix();  mRotationAngle=rotationAngle;}  }
class C{  protected int findSeparator(){  int first;  int match=0;  int maxpos=tail - boundaryLength;  for (first=head; (first <= maxpos) && (match != boundaryLength); first++) {    first=findByte(boundary[0],first);    if (first == -1 || (first > maxpos)) {      return -1;    }    for (match=1; match < boundaryLength; match++) {      if (buffer[first + match] != boundary[match]) {        break;      }    }  }  if (match == boundaryLength) {    return first - 1;  }  return -1;}  }
class C{  public SaveHistoryItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.EQUALS_OP___EQUALS_OP_1:    return getEqualsOp_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  public static ServiceId parseServiceId(Node node) throws Exception {  XroadObjectType objectType=getObjectType(node);  if (objectType.equals(XroadObjectType.CENTRALSERVICE)) {    XroadCentralServiceIdentifierType type=parseType(XroadObjectType.CENTRALSERVICE,node,XroadCentralServiceIdentifierType.class);    return IdentifierTypeConverter.parseCentralServiceId(type);  } else {    XroadServiceIdentifierType type=parseType(XroadObjectType.SERVICE,node,XroadServiceIdentifierType.class);    return IdentifierTypeConverter.parseServiceId(type);  }}  }
class C{  public void drawPalette(int[] colors,int selectedColor){  if (colors == null) {    return;  }  this.removeAllViews();  int tableElements=0;  int rowElements=0;  int rowNumber=0;  TableRow row=createTableRow();  for (  int color : colors) {    tableElements++;    View colorSwatch=createColorSwatch(color,selectedColor);    setSwatchDescription(rowNumber,tableElements,rowElements,color == selectedColor,colorSwatch);    addSwatchToRow(row,colorSwatch,rowNumber);    rowElements++;    if (rowElements == mNumColumns) {      addView(row);      row=createTableRow();      rowElements=0;      rowNumber++;    }  }  if (rowElements > 0) {    while (rowElements != mNumColumns) {      addSwatchToRow(row,createBlankSpace(),rowNumber);      rowElements++;    }    addView(row);  }}  }
class C{  protected String record(String deployment){  deployments.add(deployment);  return deployment;}  }
class C{  public void paintLabelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void testRegister3(){  Phaser phaser=new Phaser();  assertEquals(0,phaser.register());  assertEquals(0,phaser.arrive());  assertEquals(1,phaser.register());  assertState(phaser,1,2,2);}  }
class C{  private synchronized boolean isSameTrack(String title,String artist,String album){  boolean isSame=true;  if (title != null) {    if (!TextUtils.equals(title,mTitle) || !TextUtils.equals(artist,mArtist) || !TextUtils.equals(album,mAlbum)) {      isSame=false;    } else {      isSame=true;    }  }  if (!isSame) {    mTitle=title;    mArtist=artist;    mAlbum=album;  }  LogUtils.i(TAG,"isSameTrack: " + String.valueOf(isSame));  return isSame;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private Map<String,Initiator> wwnToInitiatorMap(List<Initiator> initiators){  Map<String,Initiator> wwns=new HashMap<String,Initiator>();  for (  Initiator initiator : initiators) {    if (HostInterface.Protocol.FC.toString().equals(initiator.getProtocol())) {      wwns.put(initiator.getInitiatorPort(),initiator);    }  }  return wwns;}  }
class C{  @SuppressWarnings("static-access") public String sqlMetadata_openCharSetTest(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_openCharSetTest(catalogName,schemaName,s_parameters.CHARSETTABLENAME);}  }
class C{  public Object exec(List arguments){  if ((arguments.size() > 0) && (arguments.get(0).toString().equals("xml"))) {    return new XmlEscape();  } else {    return new HtmlEscape();  }}  }
class C{  public boolean overrideHasPendingData(){  return Util.SDK_INT <= 22 && isPassthrough && audioTrack.getPlayState() == android.media.AudioTrack.PLAYSTATE_PAUSED && audioTrack.getPlaybackHeadPosition() == 0;}  }
class C{  protected void addDefaultGrants(Collection<GrantedAuthority> authz){}  }
class C{  public static String guessExtensionFromMimeType(String mimeType){  if (TextUtils.isEmpty(mimeType)) {    return null;  }  return mimeTypeToExtensionMap.get(mimeType);}  }
class C{  public boolean drawShadows(){  return drawShadows;}  }
class C{  public static CreateWalletResponse create(String password,String apiCode) throws IOException, APIException {  return create(password,apiCode,null,null,null);}  }
class C{  public void compileExpr(String src) throws CompileError {  ASTree e=parseExpr(src,stable);  compileExpr(e);}  }
class C{  public SeaGlassBooleanTableCellRenderer(){  setHorizontalAlignment(JLabel.CENTER);  setName("Table.cellRenderer");}  }
class C{  public void testIsWeak(){  try {    DESKeySpec.isWeak(null,1);    fail("Should raise an InvalidKeyException " + "in case of null byte array.");  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {  }  byte[] key={1,2,3,4,5,6,7,8};  try {    DESKeySpec.isWeak(key,1);    fail("Should raise an InvalidKeyException " + "in case of short byte array.");  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {  }  for (int i=0; i < semiweaks.length; i++) {    try {      assertTrue("Method returns false when true is expected",DESKeySpec.isWeak(semiweaks[i],0));    } catch (    InvalidKeyException e) {      fail("Unexpected InvalidKeyException was thrown.");    }  }  for (int i=0; i < notsemiweaks.length; i++) {    try {      assertFalse("Method returns true when false is expected",DESKeySpec.isWeak(notsemiweaks[i],0));    } catch (    InvalidKeyException e) {      fail("Unexpected InvalidKeyException was thrown.");    }  }}  }
class C{  public MessageValues extractHeaders(Message<byte[]> message,boolean copyRequestHeaders) throws Exception {  byte[] bytes=message.getPayload();  ByteBuffer byteBuffer=ByteBuffer.wrap(bytes);  int headerCount=byteBuffer.get() & 0xff;  if (headerCount < 255) {    return oldExtractHeaders(byteBuffer,bytes,headerCount,message,copyRequestHeaders);  } else {    headerCount=byteBuffer.get() & 0xff;    Map<String,Object> headers=new HashMap<String,Object>();    for (int i=0; i < headerCount; i++) {      int len=byteBuffer.get() & 0xff;      String headerName=new String(bytes,byteBuffer.position(),len,"UTF-8");      byteBuffer.position(byteBuffer.position() + len);      len=byteBuffer.getInt();      String headerValue=new String(bytes,byteBuffer.position(),len,"UTF-8");      Object headerContent=this.objectMapper.fromJson(headerValue,Object.class);      headers.put(headerName,headerContent);      byteBuffer.position(byteBuffer.position() + len);    }    byte[] newPayload=new byte[byteBuffer.remaining()];    byteBuffer.get(newPayload);    return buildMessageValues(message,newPayload,headers,copyRequestHeaders);  }}  }
class C{  protected void encodeNotifyOrInvoke(IoBuffer out,Notify invoke,RTMP rtmp){  Output output=new org.red5.io.amf.Output(out);  final IServiceCall call=invoke.getCall();  final boolean isPending=(call.getStatus() == Call.STATUS_PENDING);  if (!isPending) {    log.debug("Call has been executed, send result");    serializer.serialize(output,call.isSuccess() ? "_result" : "_error");  } else {    log.debug("This is a pending call, send request");    if (rtmp.getEncoding() == Encoding.AMF3 && rtmp.getMode() == RTMP.MODE_CLIENT) {      output=new org.red5.io.amf3.Output(out);    }    final String action=(call.getServiceName() == null) ? call.getServiceMethodName() : call.getServiceName() + '.' + call.getServiceMethodName();    serializer.serialize(output,action);  }  if (invoke instanceof Invoke) {    serializer.serialize(output,Integer.valueOf(invoke.getInvokeId()));    serializer.serialize(output,invoke.getConnectionParams());  }  if (call.getServiceName() == null && "connect".equals(call.getServiceMethodName())) {    output=new org.red5.io.amf.Output(out);  } else {    if (rtmp.getEncoding() == Encoding.AMF3) {      output=new org.red5.io.amf3.Output(out);    } else {      output=new org.red5.io.amf.Output(out);    }  }  if (!isPending && (invoke instanceof Invoke)) {    IPendingServiceCall pendingCall=(IPendingServiceCall)call;    if (!call.isSuccess()) {      log.debug("Call was not successful");      StatusObject status=generateErrorResult(StatusCodes.NC_CALL_FAILED,call.getException());      pendingCall.setResult(status);    }    Object res=pendingCall.getResult();    serializer.serialize(output,res);  } else {    final Object[] args=call.getArguments();    if (args != null) {      for (      Object element : args) {        serializer.serialize(output,element);      }    }  }  if (invoke.getData() != null) {    out.setAutoExpand(true);    out.put(invoke.getData());  }}  }
class C{  public DReDNetSimple(int... hiddenLayerSizes){  setHiddenSizes(hiddenLayerSizes);}  }
class C{  void stop(){  if (debug)   System.err.println("NamingEventNotifier being stopping");  if (worker != null) {    worker.interrupt();    worker=null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:01.738 -0500",hash_original_method="7730219D57FA624E42FCB8EA28B30401",hash_generated_method="304A07393478892767F1C29F32540023") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public static boolean isNegativePermanent(int reply){  return (reply >= 500 && reply < 600);}  }
class C{  public ZeroMeanTransform(){}  }
class C{  private void addUtilityRule(AnchoredRule arule){  String ruleId=arule.getVariable();  if (hasUtilityNode(ruleId)) {    removeNode(ruleId);  }  UtilityNode ruleNode=new UtilityNode(ruleId);  ruleNode.setDistrib(arule);  arule.getInputVariables().forEach(null);  arule.getParameters().forEach(null);  addNode(ruleNode);  ValueRange actions=arule.getOutputRange();  for (  String actionVar : actions.getVariables()) {    ActionNode actionNode;    if (!hasActionNode(actionVar)) {      actionNode=new ActionNode(actionVar);      addNode(actionNode);    } else {      actionNode=getActionNode(actionVar);    }    ruleNode.addInputNode(actionNode);    actionNode.addValues(actions.getValues(actionVar));  }}  }
class C{  public double decodeCoordinate(long bits){  return bits * factor - 180;}  }
class C{  public boolean filterVideoByLanguage(){  Set<String> preferredLanguages=getPreferredLanguages();  if (getLanguage() == null || getLanguage().equalsIgnoreCase("zxx") || getLanguage().equalsIgnoreCase("und"))   return false;  if (preferredLanguages.isEmpty())   return false;  for (  String prefLanguage : preferredLanguages) {    if (getLanguage().matches(prefLanguage))     return false;  }  Log.i("FILTERING Video",getTitle() + "[" + getLanguage()+ "]");  return true;}  }
class C{  public void add(OutputStream stream){  outs.add(stream);}  }
class C{  public static boolean isProxyUri(final String url){  notNull(url);  return url.contains(getRequestHandlerPath());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.447 -0500",hash_original_method="A979A74A67ED90384C5F9F6956F4ECC6",hash_generated_method="CAA6DC70FBFADEE08CBFA9A96FE4955F") public static void writeZygoteSnapshot(){  if (!enabled) {    return;  }  writeSnapshotFile("zygote",null);  samplingProfiler.shutdown();  samplingProfiler=null;  startMillis=0;}  }
class C{  public Object run(File scriptFile,List list) throws CompilationFailedException, IOException {  String[] args=new String[list.size()];  return run(scriptFile,(String[])list.toArray(args));}  }
class C{  protected void updateControlPoints(){  if (this.getShape() instanceof Arrow)   this.updateArrowControlPoints(); else   super.updateControlPoints();}  }
class C{  public void cancel(){  mIsCancelled=true;}  }
class C{  public AgentConfig environmentToConfiguration(Environment environment,long platformId){  AgentConfig agentConfiguration=new AgentConfig();  agentConfiguration.setPlatformId(platformId);  if (CollectionUtils.isNotEmpty(environment.getPlatformSensorConfigs())) {    Collection<PlatformSensorTypeConfig> platformSensorTypeConfigs=new ArrayList<>();    for (    IPlatformSensorConfig platformSensorConfig : environment.getPlatformSensorConfigs()) {      if (platformSensorConfig.isActive()) {        platformSensorTypeConfigs.add(getPlatformSensorTypeConfig(platformId,platformSensorConfig));      }    }    agentConfiguration.setPlatformSensorTypeConfigs(platformSensorTypeConfigs);  } else {    agentConfiguration.setPlatformSensorTypeConfigs(Collections.<PlatformSensorTypeConfig>emptyList());  }  if (CollectionUtils.isNotEmpty(environment.getMethodSensorConfigs())) {    Collection<MethodSensorTypeConfig> methodSensorTypeConfigs=new ArrayList<>();    for (    IMethodSensorConfig methodSensorConfig : environment.getMethodSensorConfigs()) {      methodSensorTypeConfigs.add(getMethodSensorTypeConfig(platformId,methodSensorConfig));    }    agentConfiguration.setMethodSensorTypeConfigs(methodSensorTypeConfigs);  } else {    agentConfiguration.setMethodSensorTypeConfigs(Collections.<MethodSensorTypeConfig>emptyList());  }  IExceptionSensorConfig exceptionSensorConfig=environment.getExceptionSensorConfig();  if (null != exceptionSensorConfig) {    agentConfiguration.setExceptionSensorTypeConfig(getExceptionSensorTypeConfig(platformId,exceptionSensorConfig));  }  JmxSensorConfig jmxSensorConfig=environment.getJmxSensorConfig();  if (null != jmxSensorConfig) {    agentConfiguration.setJmxSensorTypeConfig(getJmxSensorTypeConfig(platformId,jmxSensorConfig));  }  IStrategyConfig bufferStrategyConfig=environment.getBufferStrategyConfig();  agentConfiguration.setBufferStrategyConfig(new StrategyConfig(bufferStrategyConfig.getClassName(),bufferStrategyConfig.getSettings()));  IStrategyConfig sendingStrategyConfig=environment.getSendingStrategyConfig();  agentConfiguration.setSendingStrategyConfig(new StrategyConfig(sendingStrategyConfig.getClassName(),sendingStrategyConfig.getSettings()));  Collection<ExcludeRule> excludeRules=configurationResolver.getAllExcludeRules(environment);  if (CollectionUtils.isNotEmpty(excludeRules)) {    Collection<IMatchPattern> excludeClassesPatterns=new ArrayList<>();    for (    ExcludeRule excludeRule : excludeRules) {      excludeClassesPatterns.add(PatternFactory.getPattern(excludeRule.getClassName()));    }    agentConfiguration.setExcludeClassesPatterns(excludeClassesPatterns);  } else {    agentConfiguration.setExcludeClassesPatterns(Collections.<IMatchPattern>emptyList());  }  agentConfiguration.setConfigurationInfo(configurationResolver.getConfigurationInfo(environment));  return agentConfiguration;}  }
class C{  protected void paintTrack(SynthContext context,Graphics g,Rectangle trackBounds){  SynthLookAndFeel.updateSubregion(context,g,trackBounds);  context.getPainter().paintScrollBarTrackBackground(context,g,trackBounds.x,trackBounds.y,trackBounds.width,trackBounds.height,scrollbar.getOrientation());  context.getPainter().paintScrollBarTrackBorder(context,g,trackBounds.x,trackBounds.y,trackBounds.width,trackBounds.height,scrollbar.getOrientation());}  }
class C{  @Override public String toString(){  return toMap().toString();}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public static HomeFragment newInstance(String param1,String param2){  HomeFragment fragment=new HomeFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public final boolean sendEmptyMessage(int what){  return mExec.sendEmptyMessage(what);}  }
class C{  @Override public MinguoDate date(int prolepticYear,int month,int dayOfMonth){  return new MinguoDate(LocalDate.of(prolepticYear + YEARS_DIFFERENCE,month,dayOfMonth));}  }
class C{  public void add(RegularTimePeriod period,BigDecimal bollingerBands){  if (!this.isEmpty()) {    BollingerBandsItem item0=(BollingerBandsItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new BollingerBandsItem(period,bollingerBands),true);}  }
class C{  public static void reset(){  formatterStorage=new ThreadLocalFormatterStorage();}  }
class C{  public static AccessibilityNodeInfoCompat searchFromBfs(Context context,AccessibilityNodeInfoCompat node,NodeFilter filter){  if (node == null) {    return null;  }  final LinkedList<AccessibilityNodeInfoCompat> queue=new LinkedList<AccessibilityNodeInfoCompat>();  queue.add(AccessibilityNodeInfoCompat.obtain(node));  while (!queue.isEmpty()) {    final AccessibilityNodeInfoCompat item=queue.removeFirst();    if (filter.accept(context,item)) {      return AccessibilityNodeInfoCompat.obtain(item);    }    final int childCount=item.getChildCount();    for (int i=0; i < childCount; i++) {      final AccessibilityNodeInfoCompat child=item.getChild(i);      if (child != null) {        queue.addLast(child);      }    }  }  return null;}  }
class C{  public void finest(String msg,Object... params){  log(Level.FINEST,msg,params);}  }
class C{  public SubgraphSelection(List graphElements){  if (graphElements == null) {    throw new NullPointerException("List of graph elements must " + "not be null.");  }  for (  Object graphElement : graphElements) {    if (!(graphElement instanceof Node || graphElement instanceof Edge)) {      throw new IllegalArgumentException("Model node list contains " + "an object that is not a Node or an Edge: " + graphElement);    }  }  Object result;  try {    result=new MarshalledObject(graphElements).get();  } catch (  Exception e1) {    e1.printStackTrace();    throw new IllegalStateException("Could not clone.");  }  this.graphElements=(List)result;}  }
class C{  private static void writeDebuggerEventSettings(final IDebugger debugger,final DebugTargetSettings debugTarget,final DebuggerEventSettings eventSettings) throws CouldntSaveDataException {  final DebuggerEventSettingsStorage eventSettingsStorage=new DebuggerEventSettingsStorage(debugger,debugTarget);  eventSettingsStorage.serialize(eventSettings);}  }
class C{  private void procesarFilasTabla(String idElemento,short tipoElemento,CampoTabla campoTabla,String breadCrumb) throws TransferenciaElectronicaException {  List<CampoFilaTabla> filas=campoTabla.getFilas();  if (filas != null) {    int posicion=1;    for (Iterator iterator=filas.iterator(); iterator.hasNext(); ) {      CampoFilaTabla campoFilaTabla=(CampoFilaTabla)iterator.next();      campoFilaTabla.setBaseBreadCrumb(breadCrumb);      campoFilaTabla.setPosicion(posicion++);      if (campoFilaTabla != null) {        campoFilaTabla.setIdTabla(campoTabla.getCampoVO().getId());        procesarCampoFicha(idElemento,tipoElemento,campoFilaTabla,campoFilaTabla.getIdTabla(),campoFilaTabla.getPosicion(),campoFilaTabla.getBaseBreadCrumb());      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public cudaExtent(int width,int height,int depth){  this.width=width;  this.height=height;  this.depth=depth;}  }
class C{  public static void addEnrichmentChamberRecipe(ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addEnrichmentChamberRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {  out.writeByte(CONSTANT_NAMEANDTYPE);  out.writeShort(tab.index(name));  out.writeShort(tab.index(type));}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 160) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public DeletionConstraintException(String message,DeletionConstraintExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  private void testSocketConnected(final Socket socket){  Assert.assertNotNull(HEADER + "socket value after download",socket);  Assert.assertTrue(HEADER + "socket connected after download",socket.isConnected());  Assert.assertFalse(HEADER + "socket closed after download",socket.isClosed());}  }
class C{  void allocBall(){  Ball ball=new Ball();  int diameter=(int)(DEFAULT_BALL_DIAMETER * mBallSizeMultiplier);  ball.setScale(diameter,diameter);  mBall=ball;}  }
class C{  public static Change attachmentPropertyChange(final IAttachment attachment,final Object newValue,final String property,final boolean resetFirst){  return new ChangeAttachmentChange(attachment,newValue,property,resetFirst);}  }
class C{  public void restoreEntity(BackupDataInputStream data){  final String key=data.getKey();  if (isKeyInList(key,mKeys)) {    if (key.equals(WALLPAPER_IMAGE_KEY)) {      File f=new File(STAGE_FILE);      if (writeFile(f,data)) {        BitmapFactory.Options options=new BitmapFactory.Options();        options.inJustDecodeBounds=true;        BitmapFactory.decodeFile(STAGE_FILE,options);        if (DEBUG)         Slog.d(TAG,"Restoring wallpaper image w=" + options.outWidth + " h="+ options.outHeight);        double widthRatio=mDesiredMinWidth / options.outWidth;        double heightRatio=mDesiredMinHeight / options.outHeight;        if (widthRatio > 0 && widthRatio < 1.33 && heightRatio > 0 && heightRatio < 1.33) {          if (DEBUG)           Slog.d(TAG,"wallpaper dimension match; using");          f.renameTo(new File(WALLPAPER_IMAGE));        } else {          if (DEBUG)           Slog.d(TAG,"dimensions too far off: wr=" + widthRatio + " hr="+ heightRatio);          f.delete();        }      }    } else     if (key.equals(WALLPAPER_INFO_KEY)) {      File f=new File(WALLPAPER_INFO);      writeFile(f,data);    }  }}  }
class C{  public static VcfSampleNameRelabeller create(final File relabelFile) throws IOException {  final HashMap<String,String> map=new HashMap<>();  try (final LineNumberReader r=new LineNumberReader(FileUtils.createReader(relabelFile,false))){    String line;    while ((line=r.readLine()) != null) {      if (line.length() > 0) {        final String[] parts=line.trim().split("\\s+");        if (parts.length != 2) {          throw new NoTalkbackSlimException("Expected: old-name new-name on line " + r.getLineNumber() + " of "+ relabelFile.getPath()+ "\nSaw: "+ line);        }        map.put(parts[0],parts[1]);      }    }  }   return new VcfSampleNameRelabeller(map);}  }
class C{  public static MemFileChannel newChannel(File file) throws IOException {  return newChannel(file,DatabaseImpl.RW_CHANNEL_MODE);}  }
class C{  public static File skinsDir(){  lock.readLock().lock();  try {    return skins_dir;  }  finally {    lock.readLock().unlock();  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return STRING_THING;case 4:  return BYTE_THING;case 9:return I32_THING;case 11:return I64_THING;default :return null;}}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mScroller.startScroll(startX,startY,dx,dy,duration);}  }
class C{  private void checkInstalledBacks(){  final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_feedback_key);  final CheckBoxPreference prefVibration=(CheckBoxPreference)findPreferenceByResId(R.string.pref_vibration_key);  final int kickBackVersionCode=PackageManagerUtils.getVersionCode(this,TalkBackUpdateHelper.KICKBACK_PACKAGE);  final boolean removeKickBack=(kickBackVersionCode >= TalkBackUpdateHelper.KICKBACK_REQUIRED_VERSION);  if (removeKickBack) {    if (prefVibration != null) {      category.removePreference(prefVibration);    }  }  final CheckBoxPreference prefSoundBack=(CheckBoxPreference)findPreferenceByResId(R.string.pref_soundback_key);  final Preference prefSoundBackVolume=findPreferenceByResId(R.string.pref_soundback_volume_key);  final int soundBackVersionCode=PackageManagerUtils.getVersionCode(this,TalkBackUpdateHelper.SOUNDBACK_PACKAGE);  final boolean removeSoundBack=(soundBackVersionCode >= TalkBackUpdateHelper.SOUNDBACK_REQUIRED_VERSION);  if (removeSoundBack) {    if (prefSoundBackVolume != null) {      category.removePreference(prefSoundBackVolume);    }    if (prefSoundBack != null) {      category.removePreference(prefSoundBack);    }  }  if (removeKickBack && removeSoundBack) {    if (category != null) {      getPreferenceScreen().removePreference(category);    }  }}  }
class C{  public final static String formatHeaderElement(final HeaderElement elem,boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatHeaderElement(null,elem,quote).toString();}  }
class C{  public SimpleDateFormat(){  super();}  }
class C{  @Override protected void finalize() throws Throwable {  try {    if (context != null) {      getLog().warn("UserTransaction was never returned to the UserTransactionHelper.");      closeContext();    }  }  finally {    super.finalize();  }}  }
class C{  Token<HtmlTokenType> peek() throws ParseException {  if (pending.isEmpty()) {    if (!lexer.hasNext()) {      return null;    }    Token<HtmlTokenType> next=lexer.next();    pending.add(next);    return next;  }  return pending.get(pending.size() - 1);}  }
class C{  public static int[] ensureCapacity(int[] array,int minCapacity){  int oldCapacity=array.length;  int[] newArray;  if (minCapacity > oldCapacity) {    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    newArray=new int[newCapacity];    System.arraycopy(array,0,newArray,0,oldCapacity);  } else {    newArray=array;  }  return newArray;}  }
class C{  public void uninstallDefaults(JSeparator c){  SeaGlassContext context=getContext(c,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;}  }
class C{  public FastSegmentSetIntersectionFinder(Collection baseSegStrings){  segSetMutInt=new MCIndexSegmentSetMutualIntersector(baseSegStrings);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public void paintButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    super.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public static String soapToString(SOAPElement element){  return domToString(element.getOwnerDocument());}  }
class C{  public void mouseClicked(MouseEvent e){  if (e.getClickCount() == 2) {    m_abort=false;    dispose();  }}  }
class C{  public void testBytesAsSource() throws Exception {  String JSON="[ 1, 2, 3, 4 ]";  byte[] b=JSON.getBytes("UTF-8");  int offset=50;  int len=b.length;  byte[] src=new byte[offset + len + offset];  System.arraycopy(b,0,src,offset,len);  JsonFactory jf=new JsonFactory();  JsonParser jp=jf.createJsonParser(src,offset,len);  assertToken(JsonToken.START_ARRAY,jp.nextToken());  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  assertEquals(1,jp.getIntValue());  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  assertEquals(2,jp.getIntValue());  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  assertEquals(3,jp.getIntValue());  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  assertEquals(4,jp.getIntValue());  assertToken(JsonToken.END_ARRAY,jp.nextToken());  assertNull(jp.nextToken());  jp.close();}  }
class C{  public void stringLength() throws IOException {  print("stringLength",null);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static void assertConfigured(){}  }
class C{  private ComponentName findGlobalSearchActivity(List<ResolveInfo> installed){  final String searchProviderSetting=getGlobalSearchProviderSetting();  if (!TextUtils.isEmpty(searchProviderSetting)) {    final ComponentName globalSearchComponent=ComponentName.unflattenFromString(searchProviderSetting);    if (globalSearchComponent != null && isInstalled(globalSearchComponent)) {      return globalSearchComponent;    }  }  return getDefaultGlobalSearchProvider(installed);}  }
class C{  private PrincipalId authenticate(String tenantName,String principal,String password) throws Exception {  long startTime=System.nanoTime();  boolean authFailed=false;  PrincipalId userPrincipal=null;  IIdentityProvider provider=null;  try {    ValidateUtil.validateNotEmpty(tenantName,"Tenant name");    ServerUtils.validateNotEmptyUsername(principal);    ValidateUtil.validateNotNull(password,"Password");    TenantInformation tenantInfo=findTenant(tenantName);    if (tenantInfo == null) {      throw new IDMLoginException("Access denied");    }    userPrincipal=getUserPrincipal(tenantName,principal);    if (userPrincipal == null) {      throw new IDMLoginException(String.format("Invalid user principal '%s'.",principal));    }    provider=tenantInfo.findProviderADAsFallBack(userPrincipal.getDomain());    if (provider == null) {      throw new IDMLoginException("Access denied");    }    String identityProviderName=provider.getName();    validateProviderAllowedAuthnTypes(DirectoryConfigStore.FLAG_AUTHN_TYPE_ALLOW_PASSWORD,identityProviderName,tenantInfo);    return provider.authenticate(userPrincipal,password);  } catch (  InvalidPrincipalException e) {    authFailed=true;    logger.error(VmEvent.USER_NAME_PWD_AUTH_FAILED,"Failed to authenticate principal [{}]. Invalid principal.",(principal != null ? principal : "null"));    throw e;  }catch (  Exception ex) {    authFailed=true;    logger.error(String.format("Failed to authenticate principal [%s] for tenant [%s]",principal != null ? principal : "null",tenantName != null ? tenantName : "null"),ex);    if (provider != null && userPrincipal != null) {      try {        provider.checkUserAccountFlags(userPrincipal);      } catch (      UserAccountLockedException ex1) {        logger.error(VmEvent.USER_NAME_PWD_AUTH_FAILED,"Failed to authenticate principal [{}]. User account locked.",(principal != null ? principal : "null"));        throw ex1;      }catch (      PasswordExpiredException ex1) {        logger.error(VmEvent.USER_NAME_PWD_AUTH_FAILED,"Failed to authenticate principal [{}]. User password expired.",(principal != null ? principal : "null"));        throw ex1;      }catch (      Exception ex2) {        logger.error(String.format("Failed to checkUserAccountFlags principal [%s] for tenant [%s]",principal != null ? principal : "null",tenantName != null ? tenantName : "null"));      }    }    if (ex instanceof LoginException) {      Throwable t=ex.getCause();      if (t instanceof KrbException) {        int returnCode=((KrbException)t).returnCode();switch (returnCode) {case ServerKrbUtils.KDC_ERR_CLIENT_REVOKED:{            logger.error(VmEvent.USER_NAME_PWD_AUTH_FAILED,"Failed to authenticate principal [{}]. User account locked.",(principal != null ? principal : "null"));            throw new UserAccountLockedException(ex.getMessage());          }case ServerKrbUtils.KDC_ERR_KEY_EXPIRED:{          logger.error(VmEvent.USER_NAME_PWD_AUTH_FAILED,"Failed to authenticate principal [{}]. User password expired.",(principal != null ? principal : "null"));          throw new PasswordExpiredException(ex.getMessage());        }default :      break;  }}}logger.error(VmEvent.USER_NAME_PWD_AUTH_FAILED,String.format("Failed to authenticate principal [%s]. %s",principal != null ? principal : "null",ex.getMessage()),ex);if (ex instanceof AccountLockedOutException) {throw new UserAccountLockedException(ex.getMessage());} else if (ex instanceof AccountPasswordExpiredException) {throw new PasswordExpiredException(ex.getMessage());}throw new IDMLoginException(ex.getMessage());} finally {long delta=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);if (logger.isInfoEnabled()) {if (provider == null) {  logger.info(String.format("Authentication %s for user [%s] in tenant [%s] in [%d] milliseconds because the provider is not registered",authFailed ? "failed" : "succeeded",principal,tenantName,delta));} else {  logger.info(String.format("Authentication %s for user [%s] in tenant [%s] in [%d] milliseconds with provider [%s] of type [%s]",authFailed ? "failed" : "succeeded",principal,tenantName,delta,provider.getName(),provider.getClass().getName()));}}IdmServer.getPerfDataSinkInstance().addMeasurement(new PerfBucketKey(PerfMeasurementPoint.IDMAuthenticate,principal),delta);}}  }
class C{  public ImportDirectorImplService(final String pathToArchiveDirectory,final String pathToImportDirectory,final DataDescriptorResolver<ImportDescriptor> dataDescriptorResolver,final TaskExecutor executor,final NodeService nodeService,final AsyncContextFactory asyncContextFactory,final SystemService systemService,final ZipUtils zipUtils,final FederationFacade federationFacade){  super(executor);  this.pathToArchiveDirectory=pathToArchiveDirectory;  this.pathToImportDirectory=pathToImportDirectory;  this.dataDescriptorResolver=dataDescriptorResolver;  this.nodeService=nodeService;  this.asyncContextFactory=asyncContextFactory;  this.systemService=systemService;  this.zipUtils=zipUtils;  this.federationFacade=federationFacade;}  }
class C{  @Override public void deleteRow() throws SQLException {  try {    debugCodeCall("deleteRow");    checkUpdatable();    if (insertRow != null) {      throw DbException.get(ErrorCode.NOT_ON_UPDATABLE_ROW);    }    checkOnValidRow();    getUpdatableRow().deleteRow(result.currentRow());    updateRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void clearSubHeaderCache(){  mSubHeaderCache.clear();}  }
class C{  public void sort(int fromIndex,int toIndex){  Arrays.sort(_data,fromIndex,toIndex);}  }
class C{  public AsyncHttpClient(int httpPort){  this(false,httpPort,443);}  }
class C{  private void cutNode(Entry<T> entry){  entry.mIsMarked=false;  if (entry.mParent == null)   return;  if (entry.mNext != entry) {    entry.mNext.mPrev=entry.mPrev;    entry.mPrev.mNext=entry.mNext;  }  if (entry.mParent.mChild == entry) {    if (entry.mNext != entry) {      entry.mParent.mChild=entry.mNext;    } else {      entry.mParent.mChild=null;    }  }  --entry.mParent.mDegree;  entry.mPrev=entry.mNext=entry;  mMin=mergeLists(mMin,entry);  if (entry.mParent.mIsMarked)   cutNode(entry.mParent); else   entry.mParent.mIsMarked=true;  entry.mParent=null;}  }
class C{  private NetworkBuilder(boolean directed){  this.directed=directed;}  }
class C{  @NotNull public LogicalPosition offsetToLogicalPosition(int offset){  myOffsetToLogicalStrategy.init(offset,myCache);  return calculate(myOffsetToLogicalStrategy);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private Boolean isMarkSeenPermanentBasic(){  return fieldMarkSeenPermanent;}  }
class C{  @Override public boolean visit(MySqlCreateProcedureStatement x){  if (x.isOrReplace()) {    print("CREATE OR REPLACE PROCEDURE ");  } else {    print("CREATE PROCEDURE ");  }  x.getName().accept(this);  int paramSize=x.getParameters().size();  if (paramSize > 0) {    print(" (");    incrementIndent();    println();    for (int i=0; i < paramSize; ++i) {      if (i != 0) {        print(", ");        println();      }      MySqlParameter param=x.getParameters().get(i);      param.accept(this);    }    decrementIndent();    println();    print(")");  }  println();  x.getBlock().setParent(x);  x.getBlock().accept(this);  return false;}  }
class C{  protected AbstractAttr(String name,AbstractDocument owner) throws DOMException {  ownerDocument=owner;  if (owner.getStrictErrorChecking() && !DOMUtilities.isValidName(name)) {    throw createDOMException(DOMException.INVALID_CHARACTER_ERR,"xml.name",new Object[]{name});  }}  }
class C{  private void markSent(long byteCount){  transferDataMonitor.addSample(byteCount);}  }
class C{  public NeuralNetwork(NeuralNetwork net){  this.input=new InputUnit[net.input.length];  this.hidden=new HiddenUnit[net.hidden.length][];  for (int i=0; i < input.length; i++)   this.input[i]=new InputUnit();  for (int i=0; i < net.hidden.length; i++) {    this.hidden[i]=new HiddenUnit[net.hidden[i].length];    for (int j=0; j < net.hidden[i].length; j++)     if (i == 0)     this.hidden[i][j]=new HiddenUnit(this.input,net.hidden[i][j].weights); else     this.hidden[i][j]=new HiddenUnit(this.hidden[i - 1],net.hidden[i][j].weights);  }}  }
class C{  @PreAuthorize(SpringEvalExpressions.HAS_AUTH_SYSTEM_ADMIN) @Override public ResponseEntity<Collection<String>> invalidateCaches(){  final Collection<String> cacheNames=cacheManager.getCacheNames();  LOGGER.info("Invalidating caches {}",cacheNames);  cacheNames.forEach(null);  return ResponseEntity.ok(cacheNames);}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return RootRegionResponse.create(dm,this.getSender());}  }
class C{  public LogConnectionManager(){}  }
class C{  @Override public Object clone(){  DecimalFormat other=(DecimalFormat)super.clone();  other.symbols=(DecimalFormatSymbols)symbols.clone();  other.digitList=(DigitList)digitList.clone();  other.fastPathCheckNeeded=true;  other.isFastPath=false;  other.fastPathData=null;  return other;}  }
class C{  public XNodeSetForDOM(XNodeSet val){  super(val);  if (val instanceof XNodeSetForDOM)   m_origObj=((XNodeSetForDOM)val).m_origObj;}  }
class C{  public Matrix add(Matrix mx){  double[][] newMatrix=new double[rows][columns];  for (int i=0; i < rows; i++)   for (int j=0; j < columns; j++)   newMatrix[i][j]=values[i][j] + mx.get(i,j);  return new Matrix(newMatrix);}  }
class C{  public ConcurrentSet(int size,float loadFactor,int concurrencyLevel){  this.map=new ConcurrentHashMap<>(size,loadFactor,concurrencyLevel);}  }
class C{  static int lastIndexOf(final CharSequence cs,final CharSequence searchChar,final int start){  return cs.toString().lastIndexOf(searchChar.toString(),start);}  }
class C{  public void addHeader(String name,String originalValue){  String value;  if (name.equalsIgnoreCase("location")) {    value=rewriteLocation(originalValue);  } else   if (name.equalsIgnoreCase("set-cookie")) {    value=rewriteSetCookie(originalValue);  } else {    value=originalValue;  }  super.addHeader(name,value);}  }
class C{  public GF2Polynomial quotient(GF2Polynomial g) throws RuntimeException {  GF2Polynomial q=new GF2Polynomial(len);  GF2Polynomial a=new GF2Polynomial(this);  GF2Polynomial b=new GF2Polynomial(g);  GF2Polynomial j;  int i;  if (b.isZero()) {    throw new RuntimeException();  }  a.reduceN();  b.reduceN();  if (a.len < b.len) {    return new GF2Polynomial(0);  }  i=a.len - b.len;  q.expandN(i + 1);  while (i >= 0) {    j=b.shiftLeft(i);    a.subtractFromThis(j);    a.reduceN();    q.xorBit(i);    i=a.len - b.len;  }  return q;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.ENTER_STATE__STATE:    setState((ExecutionState)null);  return;}super.eUnset(featureID);}  }
class C{  private MarkEqualsRule(final String value){  super();  if (StringUtils.equalsIgnoreCase(value,"true") || StringUtils.equalsIgnoreCase(value,"false")) {    marked=Boolean.valueOf(value);    useOnOffSwith=true;  } else {    try {      markerColors=MarkerColors.valueOf(value);    } catch (    Exception pe) {      for (      MarkerColors mc : MarkerColors.values()) {        if (mc.name().equalsIgnoreCase(value)) {          markerColors=mc;          return;        }      }      throw new IllegalArgumentException("Could not parse marker colors: " + value);    }  }}  }
class C{  public static <T,IV>int detectIndexWith(T[] objectArray,Predicate2<? super T,IV> predicate,IV injectedValue){  if (objectArray == null) {    throw new IllegalArgumentException("Cannot perform a detectIndexWith on null");  }  for (int i=0; i < objectArray.length; i++) {    if (predicate.accept(objectArray[i],injectedValue)) {      return i;    }  }  return -1;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.FAULT_SOURCE;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public static void startActivity(Context context,ContactId contact){  Intent intent=new Intent(context,SendSingleFile.class);  intent.putExtra(EXTRA_CONTACT,(Parcelable)contact);  context.startActivity(intent);}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Collection<? extends GrantedAuthority> authorities=securityContext.getAuthentication().getAuthorities();  if (authorities != null) {    for (    GrantedAuthority authority : authorities) {      if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {        return false;      }    }  }  return true;}  }
class C{  public void disambiguateHistoricDates(JCas jcas){  List<Timex3> linearDates=new ArrayList<Timex3>();  FSIterator iterTimex=jcas.getAnnotationIndex(Timex3.type).iterator();  while (iterTimex.hasNext()) {    Timex3 timex=(Timex3)iterTimex.next();    if (timex.getTimexType().equals("DATE") || timex.getTimexType().equals("TIME")) {      linearDates.add(timex);    }  }  for (int i=1; i < linearDates.size(); i++) {    Timex3 t_i=(Timex3)linearDates.get(i);    String value_i=t_i.getTimexValue();    String newValue=value_i;    Boolean change=false;    if (!(t_i.getFoundByRule().contains("-BCADhint"))) {      if (value_i.startsWith("0")) {        Integer offset=1, counter=1;        do {          if ((i == 1 || (i > 1 && !change)) && linearDates.get(i - offset).getTimexValue().startsWith("BC")) {            if (value_i.length() > 1) {              if ((linearDates.get(i - offset).getTimexValue().startsWith("BC" + value_i.substring(0,2))) || (linearDates.get(i - offset).getTimexValue().startsWith("BC" + String.format("%02d",(Integer.parseInt(value_i.substring(0,2)) + 1))))) {                if (((value_i.startsWith("00")) && (linearDates.get(i - offset).getTimexValue().startsWith("BC00"))) || ((value_i.startsWith("01")) && (linearDates.get(i - offset).getTimexValue().startsWith("BC01")))) {                  if ((value_i.length() > 2) && (linearDates.get(i - offset).getTimexValue().length() > 4)) {                    if (Integer.parseInt(value_i.substring(0,3)) <= Integer.parseInt(linearDates.get(i - offset).getTimexValue().substring(2,5))) {                      newValue="BC" + value_i;                      change=true;                      Logger.printDetail("DisambiguateHistoricDates: " + value_i + " to "+ newValue+ ". Expression "+ t_i.getCoveredText()+ " due to "+ linearDates.get(i - offset).getCoveredText());                    }                  }                } else {                  newValue="BC" + value_i;                  change=true;                  Logger.printDetail("DisambiguateHistoricDates: " + value_i + " to "+ newValue+ ". Expression "+ t_i.getCoveredText()+ " due to "+ linearDates.get(i - offset).getCoveredText());                }              }            }          }          if ((linearDates.get(i - offset).getTimexType().equals("TIME") || linearDates.get(i - offset).getTimexType().equals("DATE")) && (linearDates.get(i - offset).getTimexValue().matches("^\\d.*"))) {            counter++;          }        } while (counter < 5 && ++offset < i);      }    }    if (!(newValue.equals(value_i))) {      t_i.removeFromIndexes();      Logger.printDetail("DisambiguateHistoricDates: value changed to BC");      t_i.setTimexValue(newValue);      t_i.addToIndexes();      linearDates.set(i,t_i);    }  }}  }
class C{  public List discoverHtml(UrlIdentifier identifier,HttpFetcher httpFetcher) throws DiscoveryException {  HtmlResult result=new HtmlResult();  HttpRequestOptions requestOptions=httpFetcher.getRequestOptions();  requestOptions.setContentType("text/html");  try {    HttpResponse resp=httpFetcher.get(identifier.toString(),requestOptions);    if (HttpStatus.SC_OK != resp.getStatusCode())     throw new DiscoveryException("GET failed on " + identifier.toString() + " Received status code: "+ resp.getStatusCode(),OpenIDException.DISCOVERY_HTML_GET_ERROR);    result.setClaimed(new UrlIdentifier(resp.getFinalUri()));    if (resp.getBody() == null)     throw new DiscoveryException("No HTML data read from " + identifier.toString(),OpenIDException.DISCOVERY_HTML_NODATA_ERROR);    HTML_PARSER.parseHtml(resp.getBody(),result);  } catch (  IOException e) {    throw new DiscoveryException("Fatal transport error: ",OpenIDException.DISCOVERY_HTML_GET_ERROR,e);  }  _log.info("HTML discovery completed on: " + identifier);  return extractDiscoveryInformation(result);}  }
class C{  public static Process exec(List<String> args) throws IOException {  if (VersionHelper.getVersionSdkIntCompat() >= VersionHelper.VERSION_JELLYBEAN && !SuperUserHelper.isFailedToObtainRoot()) {    Process process=Runtime.getRuntime().exec("su");    PrintStream outputStream=null;    try {      outputStream=new PrintStream(new BufferedOutputStream(process.getOutputStream(),8192));      outputStream.println(TextUtils.join(" ",args));      outputStream.flush();    }  finally {      if (outputStream != null) {        outputStream.close();      }    }    return process;  }  return Runtime.getRuntime().exec(ArrayUtil.toArray(args,String.class));}  }
class C{  @Override public final R visitDeclared(AnnotatedDeclaredType type,P p){  defaultAction(type,p);  return super.visitDeclared(type,p);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static ClassInfo findOrCreateClass(String t){  if (!t.endsWith("[]")) {    return ClassInfo.findOrCreateClass(t);  } else {    String baseType=t.substring(0,t.indexOf("[]"));    int level=(t.length() - t.indexOf("[]")) / 2;    String s="";    for (int i=0; i < level; ++i)     s+="[";    if (baseType.equals("int"))     s+="I"; else     if (baseType.equals("boolean"))     s+="B"; else     s+="L" + baseType + ";";    return ClassInfo.findOrCreateClass(s);  }}  }
class C{  @Override public TypeVisibility isVisible(Resource contextResource,Type t){  TypeAccessModifier typeAccessModifier=t.getTypeAccessModifier();  return isVisible(contextResource,typeAccessModifier,t);}  }
class C{  public void startSession(){  if (processor != null) {    processor.startProcessing();  }}  }
class C{  public Element createXmlElement(String id) throws Exception {  Document doc=Helper.createDocument();  Element el=createXmlElement(doc,id);  doc.getDocumentElement().appendChild(el);  return el;}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      if (bis != null)       bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public Object fromData(Class<?> clazz,PdxReader reader){  return manager.readData(reader,clazz);}  }
class C{  JimpleBody(SootMethod m){  super(m);}  }
class C{  public void delete(int index){  m_Instances.remove(index);}  }
class C{  private static void saveArtifacts(final StackSaver stackSaver,final BurstResult burstResult,final String artifactType,SequentialTimestampGenerator timestampGenerator){  List<BurstArtifact> artifactList=burstResult.getArtifactsByType(artifactType);  for (int artifactIndex=0; artifactIndex < artifactList.size(); artifactIndex++) {    List<BurstMediaItem> mediaItems=artifactList.get(artifactIndex).getMediaItems();    for (int index=0; index < mediaItems.size(); index++) {      saveBurstMediaItem(stackSaver,mediaItems.get(index),artifactType,artifactIndex + 1,index + 1,timestampGenerator);    }  }}  }
class C{  public boolean hasLeader(String playerName){  return (leader != null) && leader.equals(playerName);}  }
class C{  private void showUpdateInfoBar(ChromeActivity activity){  ThreadUtils.assertOnUiThread();  Tab currentTab=activity.getActivityTab();  boolean tabIsInvalid=currentTab == null || currentTab.isNativePage();  boolean mayShowUpdateInfoBar=activity.mayShowUpdateInfoBar();  boolean urlIsInvalid=mUpdateURL == null;  if (tabIsInvalid || !mayShowUpdateInfoBar || urlIsInvalid) {    mMustShowInfoBar=true;    return;  }  Resources resources=activity.getResources();  String message=resources.getString(R.string.update_available_infobar);  String button=resources.getString(R.string.update_available_infobar_button);  OmahaUpdateInfobar updateBar=new OmahaUpdateInfobar(activity,message,button,mUpdateURL);  currentTab.getInfoBarContainer().addInfoBar(updateBar);  mMustShowInfoBar=false;}  }
class C{  private boolean isLoggable(){  return Log.isLoggable(tag,level);}  }
class C{  public ServiceCompatibilityException(String message,Object[] params,Reason reason){  super(message,params);  setMessageKey(getMessageKey() + "." + reason.toString());  bean.setReason(reason);}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_test.getExpression().callVisitors(m_test,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  static private int _writeDecRef(Writer out,char[] buffer,int bufferIndex,int bufferLength,char ch) throws IOException {  if (ch == '\u20ac') {    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,EURO_CHARS);    return bufferIndex;  }  bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,DEC_REF_START);  int i=(int)ch;  if (i > 10000) {    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + (i / 10000))));    i=i % 10000;    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + (i / 1000))));    i=i % 1000;    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + (i / 100))));    i=i % 100;    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + (i / 10))));    i=i % 10;    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + i)));  } else   if (i > 1000) {    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + (i / 1000))));    i=i % 1000;    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + (i / 100))));    i=i % 100;    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + (i / 10))));    i=i % 10;    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + i)));  } else {    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + (i / 100))));    i=i % 100;    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + (i / 10))));    i=i % 10;    bufferIndex=addToBuffer(out,buffer,bufferIndex,bufferLength,((char)('0' + i)));  }  return addToBuffer(out,buffer,bufferIndex,bufferLength,';');}  }
class C{  private boolean checkForImageServers(){  boolean imageServerExists=true;  List<URI> imageServerURIList=_dbClient.queryByType(ComputeImageServer.class,true);  ArrayList<URI> tempList=Lists.newArrayList(imageServerURIList.iterator());  if (tempList.isEmpty()) {    imageServerExists=false;  }  return imageServerExists;}  }
class C{  public void addAllListeners(){  for (  Motion motion : mMotions) {    for (    Performer performer : motion.performers) {      motion.spring.addListener(performer);    }    if (motion.springListeners != null) {      for (      SpringListener listener : motion.springListeners) {        motion.spring.addListener(listener);      }    }  }}  }
class C{  public static String[] partitionOptions(String[] options){  for (int i=0; i < options.length; i++) {    if (options[i].equals("--")) {      int j=i;      while ((j < options.length) && !(options[j].equals("-E"))) {        j++;      }      options[i++]="";      String[] result=new String[options.length - i];      j=i;      while ((j < options.length) && !(options[j].equals("-E"))) {        result[j - i]=options[j];        options[j]="";        j++;      }      while (j < options.length) {        result[j - i]="";        j++;      }      return result;    }  }  return new String[0];}  }
class C{  public ArtifactFile(final String name,final String originalFilename,final String contentType,final byte[] content){  Assert.hasLength(name,"Name must not be null");  this.name=name;  this.originalFilename=Optional.ofNullable(originalFilename).orElse("");  this.contentType=contentType;  this.content=Optional.ofNullable(content).orElse(new byte[0]);}  }
class C{  protected void graphTree(StringBuffer text){  text.append("N" + m_id + (m_isLeaf ? " [label=\"LM " + m_leafModelNum : " [label=\"" + Utils.backQuoteChars(m_instances.attribute(m_splitAtt).name()))+ (m_isLeaf ? " (" + ((m_globalDeviation > 0.0) ? m_numInstances + "/" + Utils.doubleToString((100.0 * m_rootMeanSquaredError / m_globalDeviation),1,3)+ "%)" : m_numInstances + ")") + "\" shape=box style=filled " : "\"")+ (m_saveInstances ? "data=\n" + m_instances + "\n,\n" : "")+ "]\n");  if (m_left != null) {    text.append("N" + m_id + "->"+ "N"+ m_left.m_id+ " [label=\"<="+ Utils.doubleToString(m_splitValue,1,3)+ "\"]\n");    m_left.graphTree(text);  }  if (m_right != null) {    text.append("N" + m_id + "->"+ "N"+ m_right.m_id+ " [label=\">"+ Utils.doubleToString(m_splitValue,1,3)+ "\"]\n");    m_right.graphTree(text);  }}  }
class C{  private void executeBatchInternal(MultiFixedIntExecutionResult internalExecutionResult,int queryParameterSize) throws QueryException, SQLException {  if (options.useBatchMultiSend) {    serverPrepareResult=protocol.prepareAndExecutes(mustExecuteOnMaster,serverPrepareResult,internalExecutionResult,sql,queryParameters,resultSetScrollType);    if (metadata == null)     setMetaFromResult();    return;  }  QueryException exception=null;  for (int counter=0; counter < queryParameterSize; counter++) {    ParameterHolder[] parameterHolder=queryParameters.get(counter);    try {      serverPrepareResult.resetParameterTypeHeader();      protocol.executePreparedQuery(mustExecuteOnMaster,serverPrepareResult,internalExecutionResult,parameterHolder,resultSetScrollType);    } catch (    QueryException queryException) {      if (options.continueBatchOnError || queryException.isPrepareError()) {        if (exception == null)         exception=queryException;      } else {        throw queryException;      }    }  }  if (exception != null)   throw exception;}  }
class C{  public static SystemPropertiesLoader create(String prefix){  return new SystemPropertiesLoader(prefix);}  }
class C{  public static void fill(int[] array,int value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public String convertMessagePartToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  String sourceFormForInitializer(AnnotationValue annotationValue,ProcessingEnvironment processingEnv,String memberName,Element context){  SourceFormVisitor visitor=new InitializerSourceFormVisitor(processingEnv,memberName,context);  StringBuilder sb=new StringBuilder();  visitor.visit(annotationValue,sb);  return sb.toString();}  }
class C{  private void processBatch(){  LOG.info("start {} end {}",batchStartIdx,tuples.size());  try {    for (int i=batchStartIdx; i < tuples.size(); i++) {      setStatementParameters(tuples.get(i));    }    for (    Map.Entry<Integer,Map<Integer,PreparedStatement>> ddIDToAggIDToStatementEntry : ddIDToAggIDToStatement.entrySet()) {      for (      Map.Entry<Integer,PreparedStatement> entry : ddIDToAggIDToStatementEntry.getValue().entrySet()) {        entry.getValue().executeBatch();        entry.getValue().clearBatch();      }    }  } catch (  SQLException e) {    throw new RuntimeException("processing batch",e);  } finally {    batchStartIdx+=tuples.size() - batchStartIdx;  }}  }
class C{  public static Bitmap toBitmap(byte[] image){  return BitmapFactory.decodeByteArray(image,0,image.length);}  }
class C{  public FilteredDepartureTimeHandler(final double timeBinSize){  this(timeBinSize,null);}  }
class C{  public static String rewriteSignature(ClassNameRewriter classNameRewriter,String signature){  if (classNameRewriter != IdentityClassNameRewriter.instance() && signature.startsWith("L")) {    String className=signature.substring(1,signature.length() - 1).replace('/','.');    className=classNameRewriter.rewriteClassName(className);    signature="L" + className.replace('.','/') + ";";  }  return signature;}  }
class C{  public double min(){  int size=values.size();  double min=Double.MAX_VALUE;  for (int i=0; i < size; i++)   min=Math.min(min,values.get(i));  return min;}  }
class C{  public EipAdapterFactory(){  if (modelPackage == null) {    modelPackage=EipPackage.eINSTANCE;  }}  }
class C{  @SuppressWarnings("unchecked") public static int binarySearch(Object[] array,int startIndex,int endIndex,Object object){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  if (array.length == 0) {    return -1;  }  int low=startIndex, mid=-1, high=endIndex - 1, result=0;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=((net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<Object>)array[mid]).compareTo(object)) < 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (((net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<Object>)object).compareTo(array[index]) < 0) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (result >= 0 ? 1 : 2);}  }
class C{  public void info(Object message,Throwable exception){  log(Level.INFO,String.valueOf(message),exception);}  }
class C{  public boolean isText(){  return false;}  }
class C{  public static Point inverseTransformPoint(AffineTransform af,Point pt){  Point2D src=new Point2D.Float(pt.x,pt.y);  try {    Point2D dest=af.inverseTransform(src,null);    return new Point((int)Math.floor(dest.getX()),(int)Math.floor(dest.getY()));  } catch (  Exception e) {    e.printStackTrace();    return new Point(0,0);  }}  }
class C{  public Set<URI> checkForActiveCatalogCategoryAclsUsingUserGroup(String label){  Set<URI> catalogCategoryUsingUserGroup=null;  List<URI> catalogCategoryURIList=_dbClient.queryByType(CatalogCategory.class,true);  if (catalogCategoryURIList == null || !catalogCategoryURIList.iterator().hasNext()) {    _log.warn("There are no catalog category configured.");    return catalogCategoryUsingUserGroup;  }  List<CatalogCategory> catalogCategories=_dbClient.queryObject(CatalogCategory.class,catalogCategoryURIList);  if (CollectionUtils.isEmpty(catalogCategories)) {    _log.error("Could not find the Catalog category objects for the Ids {}",catalogCategoryURIList.toString());    return catalogCategoryUsingUserGroup;  }  catalogCategoryUsingUserGroup=new HashSet<URI>();  for (  CatalogCategory catalogCategory : catalogCategories) {    if (catalogCategory == null) {      _log.info("Invalid catalog category");      continue;    }    if (CollectionUtils.isEmpty(catalogCategory.getAcls())) {      _log.debug("ACLs not configured for Catalog category {}",catalogCategory.getLabel());      continue;    }    Set<String> aclKeys=catalogCategory.getAcls().keySet();    if (checkUserGroupWithPermissionKeys(label,aclKeys)) {      catalogCategoryUsingUserGroup.add(catalogCategory.getId());    }  }  return catalogCategoryUsingUserGroup;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @VisibleForTesting static OMAInfo parseDownloadDescriptor(InputStream is){  try {    XmlPullParserFactory factory=XmlPullParserFactory.newInstance();    factory.setNamespaceAware(true);    XmlPullParser parser=factory.newPullParser();    parser.setInput(is,null);    int eventType=parser.getEventType();    String currentAttribute=null;    OMAInfo info=new OMAInfo();    StringBuilder sb=null;    List<String> attributeList=new ArrayList<String>(Arrays.asList(OMA_TYPE,OMA_SIZE,OMA_OBJECT_URI,OMA_INSTALL_NOTIFY_URI,OMA_NEXT_URL,OMA_DD_VERSION,OMA_NAME,OMA_DESCRIPTION,OMA_VENDOR,OMA_INFO_URL,OMA_ICON_URI,OMA_INSTALL_PARAM));    while (eventType != XmlPullParser.END_DOCUMENT) {      if (eventType == XmlPullParser.START_DOCUMENT) {        if (!info.isEmpty())         return null;      } else       if (eventType == XmlPullParser.START_TAG) {        String tagName=parser.getName();        if (attributeList.contains(tagName)) {          if (currentAttribute != null) {            Log.w(TAG,"Nested attributes was found in the download descriptor");            return null;          }          sb=new StringBuilder();          currentAttribute=tagName;        }      } else       if (eventType == XmlPullParser.END_TAG) {        if (currentAttribute != null) {          if (!currentAttribute.equals(parser.getName())) {            Log.w(TAG,"Nested attributes was found in the download descriptor");            return null;          }          info.addAttributeValue(currentAttribute,sb.toString().trim());          currentAttribute=null;          sb=null;        }      } else       if (eventType == XmlPullParser.TEXT) {        if (currentAttribute != null) {          sb.append(parser.getText());        }      }      eventType=parser.next();    }    return info;  } catch (  XmlPullParserException e) {    Log.w(TAG,"Failed to parse download descriptor.",e);    return null;  }catch (  IOException e) {    Log.w(TAG,"Failed to read download descriptor.",e);    return null;  }}  }
class C{  private boolean looksLikeAnnotation(){  nextToken();  if (fToken == Symbols.TokenIDENT) {    nextToken();    while (fToken == Symbols.TokenOTHER) {      nextToken();      if (fToken != Symbols.TokenIDENT)       return false;      nextToken();    }    return fToken == Symbols.TokenAT;  }  return false;}  }
class C{  public static Test suite(){  return (new TestSuite(SelectOneHideNoSelectionITCase.class));}  }
class C{  public double eval(double params[]){  return (Math.max(Math.max(params[0],params[1]),Math.max(params[2],params[3])));}  }
class C{  public static void main(String[] args) throws Throwable {  String localAddressStr="<your local IP here, e.g. 192.168.0.1>";  String publicAddressStr="<your public IP here, e.g. 203.0.113.5>";  TransportAddress localAddress;  TransportAddress publicAddress;  try {    localAddress=new TransportAddress(localAddressStr,9,Transport.UDP);    publicAddress=new TransportAddress(publicAddressStr,9,Transport.UDP);    logger.info("Will append a NAT harvester for " + localAddress + "=>"+ publicAddress);  } catch (  Exception exc) {    logger.info("Failed to create a NAT harvester for" + " local address=" + localAddressStr + " and public address="+ publicAddressStr);    return;  }  MappingCandidateHarvester natHarvester=new MappingCandidateHarvester(publicAddress,localAddress);  List<CandidateHarvester> harvesters=new ArrayList<>();  harvesters.add(natHarvester);  Agent localAgent=createAgent(2020,false,harvesters);  localAgent.setNominationStrategy(NominationStrategy.NOMINATE_HIGHEST_PRIO);  String localSDP=SdpUtils.createSDPDescription(localAgent);  Thread.sleep(500);  logger.info("=================== feed the following" + " to the remote agent ===================");  logger.info("\n" + localSDP);  logger.info("======================================" + "========================================\n");}  }
class C{  void sendPrevote() throws GondolaException {  if (clock.now() >= prevoteTs) {    peers.forEach(null);    slaves.forEach(null);    sendRequestVoteRequest(true);  }}  }
class C{  private Point[] toPoints(Coordinate[] coordinates){  ArrayList points=new ArrayList();  for (int i=0; i < coordinates.length; i++) {    points.add(geometryFactory.createPoint(coordinates[i]));  }  return (Point[])points.toArray(new Point[]{});}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  private CategoryListItem(Parcel source){  name=source.readString();  fullName=source.readString();  key=source.readString();  subItems=source.createTypedArray(CREATOR);}  }
class C{  private boolean qualifiesAndNode(final IAbstractCriteriumTreeNode node,final NaviNode naviNode){  final List<? extends IAbstractCriteriumTreeNode> children=node.getChildren();  if (children.size() < 2) {    throw new IllegalStateException("IE01120: AND operator has less than two child criteria.");  }  for (  final IAbstractCriteriumTreeNode child : node.getChildren()) {    if (!qualifies(child,naviNode)) {      return false;    }  }  return true;}  }
class C{  public Builder slideOut(){  mSlideOut=true;  return this;}  }
class C{  public static void close(@CheckForNull InputStream inputStream){  if (inputStream == null) {    return;  }  try {    inputStream.close();  } catch (  IOException e) {  }}  }
class C{  public boolean isNull(){  if (this.getSelectedItem().toString().equalsIgnoreCase(SimbrainConstants.NULL_STRING)) {    return true;  }  return false;}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  public String[] validBaudRates(){  log.debug("validBaudRates should not have been invoked");  return null;}  }
class C{  private Bitmap processBitmap(int resId){  if (BuildConfig.DEBUG) {    Log.d(TAG,"processBitmap - " + resId);  }  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight,getImageCache());}  }
class C{  public void put(String fieldName,Boolean value){  if (value == null) {    _put(fieldName,nullNode());  } else {    _put(fieldName,booleanNode(value.booleanValue()));  }}  }
class C{  public static OutputStream newOutputStream(String fileName,boolean append) throws IOException {  return FilePath.get(fileName).newOutputStream(append);}  }
class C{  public static void main(String[] options){  StringBuffer text=new StringBuffer();  text.append("\n\nDatabaseSaver options:\n");  try {    DatabaseSaver asv=new DatabaseSaver();    try {      Enumeration<Option> enumi=asv.listOptions();      while (enumi.hasMoreElements()) {        Option option=enumi.nextElement();        text.append(option.synopsis() + '\n');        text.append(option.description() + '\n');      }      asv.setOptions(options);      asv.setDestination(asv.getUrl());    } catch (    Exception ex) {      ex.printStackTrace();    }    asv.writeBatch();  } catch (  Exception ex) {    ex.printStackTrace();    System.out.println(text);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.ANNOTATION__PROPERTIES:    return ((InternalEList<?>)getProperties()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_unwrap_05(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer bb=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  try {    sse.unwrap(bb,bbA,0,bbA.length);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalStateException");  }}  }
class C{  private void initCheckbox(CheckBoxPreference checkbox,boolean checked,boolean enabled){  checkbox.setChecked(checked);  checkbox.setEnabled(enabled);}  }
class C{  private void updateDrawerPosition(JFXDrawer drawer){  int index=drawers.indexOf(drawer);  if (index + 1 < drawers.size()) {    if (index - 1 >= 0)     drawers.get(index + 1).setContent(drawers.get(index - 1)); else     if (index == 0)     drawers.get(index + 1).setContent(content);  }  if (index < drawers.size() - 1) {    drawer.setContent(drawers.get(drawers.size() - 1));    drawers.remove(drawer);    drawers.add(drawer);    this.getChildren().add(drawer);  }}  }
class C{  int checkToAddLandmark(final Node fromNode,final Node toNode){  double bestTravCostEst=estimateRemainingTravelCost(fromNode,toNode);  PreProcessLandmarks.LandmarksData fromRole=getPreProcessData(fromNode);  PreProcessLandmarks.LandmarksData toRole=getPreProcessData(toNode);  int bestIndex=-1;  for (int i=0; i < this.landmarks.length; i++) {    double tmpTravTime=estimateRemainingTravelCost(fromRole,toRole,i);    if (tmpTravTime > bestTravCostEst) {      bestIndex=i;      bestTravCostEst=tmpTravTime;    }  }  if (bestIndex != -1) {    int[] newActiveLandmarks=new int[this.activeLandmarkIndexes.length + 1];    System.arraycopy(this.activeLandmarkIndexes,0,newActiveLandmarks,0,this.activeLandmarkIndexes.length);    newActiveLandmarks[this.activeLandmarkIndexes.length]=bestIndex;    this.activeLandmarkIndexes=newActiveLandmarks;  }  return bestIndex;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void Discard(){  baggage=null;}  }
class C{  public boolean isFillViewport(){  return mFillViewport;}  }
class C{  public void paintComponent(Graphics g){  g.drawImage(track,0,0,null);  Graphics2D g2d=(Graphics2D)g.create();  g2d.translate(carPosition.x,carPosition.y);  g2d.rotate(Math.toRadians(carRotation));  g2d.translate(-(carPosition.x),-(carPosition.y));  g2d.drawImage(car,carPosition.x - carWHalf,carPosition.y - carHHalf,null);}  }
class C{  protected void SetVector(NodeVector v){  setObject(v);}  }
class C{  protected Map<RuleAltKey,List<Pair<Integer,Integer>>> stripPairsWithRepeatedTokens(){  Map<RuleAltKey,List<Pair<Integer,Integer>>> ruleToPairsWoRepeats=new HashMap<>();  for (  RuleAltKey ruleAltKey : ruleToPairsBag.keySet()) {    Set<Integer> ruleRepeatedTokens=ruleToRepeatedTokensSet.get(ruleAltKey);    Set<Pair<Integer,Integer>> pairsBag=ruleToPairsBag.get(ruleAltKey);    if (ruleRepeatedTokens != null) {      List<Pair<Integer,Integer>> pairsWoRepeats=BuffUtils.filter(pairsBag,null);      ruleToPairsWoRepeats.put(ruleAltKey,pairsWoRepeats);    } else {      ruleToPairsWoRepeats.put(ruleAltKey,new ArrayList<>(pairsBag));    }  }  return ruleToPairsWoRepeats;}  }
class C{  public static void trimToDistance(Graph graph,Node target,int distance){  Set<Node> nodes=getNeighborhood(graph,target,distance);  List<Node> irrelevantNodes=graph.getNodes();  irrelevantNodes.removeAll(nodes);  graph.removeNodes(irrelevantNodes);}  }
class C{  <E>E parseResumableUploadResponse(InputStream source,ContentType responseType,Class<E> resultType) throws IOException, ServiceException {  try {    startVersionScope();    return parseResponseData(new ParseSource(source),responseType,resultType);  }  finally {    endVersionScope();  }}  }
class C{  public static ByteBuffer rfc6455Encode(WsMessage message,int maskValue){  final boolean mask=true;  boolean fin=true;  ByteBuffer buf=message.getBytes();  int remaining=buf.remaining();  int offset=2 + (mask ? 4 : 0) + calculateLengthSize(remaining);  ByteBuffer b=ByteBuffer.allocate(offset + remaining);  int start=b.position();  byte b1=(byte)(fin ? 0x80 : 0x00);  byte b2=(byte)(mask ? 0x80 : 0x00);  b1=doEncodeOpcode(b1,message);  b2|=lenBits(remaining);  b.put(b1).put(b2);  doEncodeLength(b,remaining);  if (mask) {    b.putInt(maskValue);  }  b.put(buf);  if (mask) {    b.position(offset);    mask(b,maskValue);  }  b.limit(b.position());  b.position(start);  return b;}  }
class C{  public final AC gap(String size,int... indexes){  BoundSize bsa=size != null ? ConstraintParser.parseBoundSize(size,true,true) : null;  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    if (bsa != null)     cList.get(ix).setGapAfter(bsa);  }  return this;}  }
class C{  public void updateFicha(Ficha ficha){  Locale locale=getServiceClient().getLocale();  iniciarTransaccion();  if (ficha.getTipo() == TipoFicha.FICHA_ELEMENTO_CF) {    checkPermission(DescripcionSecurityManager.EDITAR_FICHA_ELEMENTO_ACTION);    ElementoCuadroClasificacionVO elementoCF=getElementoCuadroClasificacionVO(ficha.getId());    if (!SecurityManagerBase.isAccessAllowed(getServiceClient(),TipoAcceso.EDICION,elementoCF.getNivelAcceso(),elementoCF.getIdArchivo(),elementoCF.getIdLCA(),AppPermissions.EDICION_DESCRIPCION_CUADRO_CLASIFICACION))     throw new DescripcionSecurityException("El usuario no puede modificar la ficha del elemento del cuadro de clasificaci\u00F3n");    getServiceRepository().lookupGestionCuadroClasificacionBI().setTieneDescr(elementoCF.getId(),true);  } else {    if (ficha.getTipo() == TipoFicha.FICHA_UDOCRE || ficha.getTipo() == TipoFicha.FICHA_UDOCFS) {      checkPermission(DescripcionSecurityManager.USO_FICHA_ALTA_TRANSFERENCIA_ACTION);    } else {      checkPermission(DescripcionSecurityManager.EDITAR_FICHA_DESCRIPTOR_ACTION);      DescriptorVO descriptor=getDescriptorVO(ficha.getId());      if (!SecurityManagerBase.isAccessAllowed(getServiceClient(),TipoAcceso.EDICION,descriptor.getNivelAcceso(),null,descriptor.getIdLCA(),AppPermissions.EDICION_DESCRIPTOR))       throw new DescripcionSecurityException("El usuario no puede modificar la ficha del descriptor");      setTieneDescrDescriptor(descriptor.getId(),true);    }  }  ficha.ejecutarEvento(TipoEvento.ANTES_DE_SALVAR_DESCRIPCION,ficha,locale);  checkElements(ficha.getId(),ficha.getTipo(),ficha.getAreas(),null);  AuditoriaDescripcion.auditaModificacionFichaElementoCuadro(locale,this,ficha);  ficha.ejecutarEvento(TipoEvento.DESPUES_DE_SALVAR_DESCRIPCION,ficha,locale);  commit();}  }
class C{  public boolean isSetId(){  return EncodingUtils.testBit(__isset_bitfield,__ID_ISSET_ID);}  }
class C{  public void sort(Comparator<? super T> comparator){synchronized (mLock) {    Collections.sort(mObjects,comparator);  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  @Override public double[] projectRelativeDataToScaledSpace(double[] data){  final int dim=data.length;  double[] dst=new double[dim];  for (int d=0; d < dim; d++) {    dst[d]=scales[d].getRelativeScaled(data[d]);  }  return dst;}  }
class C{  public boolean containsKey(Object key){  Object[] k;  try {    k=(Object[])key;  } catch (  ClassCastException e) {    return false;  }  return this.containsKey(k);}  }
