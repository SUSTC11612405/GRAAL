class C{  public final GF2nPolynomial scalarMultiply(GF2nElement s) throws RuntimeException {  GF2nPolynomial result=new GF2nPolynomial(size());  int i;  for (i=0; i < size(); i++) {    result.coeff[i]=(GF2nElement)coeff[i].multiply(s);  }  return result;}  }
class C{  public static Result buildResult(ResultData resultData){  return new CommandResult(resultData);}  }
class C{  public boolean wasDisposedDueToOutOfBoundsTouch(){  return pressedOutOfBounds;}  }
class C{  public AnnotationManager(){  cache=new ConcurrentHashMap<>(40,.75f,32);}  }
class C{  protected boolean isDoubleSided(ColladaAbstractGeometry geometry){  ColladaEffect effect=this.getEffect(geometry);  if (effect == null)   return false;  ColladaProfileCommon profile=effect.getProfileCommon();  if (profile == null)   return false;  ColladaExtra extra=profile.getExtra();  if (extra == null)   return false;  ColladaTechnique technique=(ColladaTechnique)extra.getField("technique");  if (technique == null || !"GOOGLEEARTH".equals(technique.getProfile()))   return false;  Integer i=(Integer)technique.getField("double_sided");  return i != null && i == 1;}  }
class C{  public void resetTransformations(){  mMatrix.set(mOriginalMatrix);  invalidate();}  }
class C{  public Viennet(){  super(2,3);}  }
class C{  public static void main(String[] argv){  try {    if (argv.length < 2) {      System.out.println("Please specify a set of instances.");      return;    }    KernelEstimator newEst=new KernelEstimator(0.01);    for (int i=0; i < argv.length - 3; i+=2) {      newEst.addValue(Double.valueOf(argv[i]).doubleValue(),Double.valueOf(argv[i + 1]).doubleValue());    }    System.out.println(newEst);    double start=Double.valueOf(argv[argv.length - 2]).doubleValue();    double finish=Double.valueOf(argv[argv.length - 1]).doubleValue();    for (double current=start; current < finish; current+=(finish - start) / 50) {      System.out.println("Data: " + current + " "+ newEst.getProbability(current));    }    KernelEstimator.testAggregation();  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public boolean isAfter(JulianDate d){  return (julian > d.julian);}  }
class C{  public Map<Integer,String> graph() throws Exception {  Map<Integer,String> result;  int i;  result=new HashMap<Integer,String>();  if (nodes != null) {    for (i=0; i < nodes.length; i++) {      if (nodes[i].getClassifier() instanceof Drawable) {        result.put(i,((Drawable)nodes[i].getClassifier()).graph());      }    }  }  return result;}  }
class C{  public GeoTIFFDirectory(SeekableStream stream,int directory) throws java.io.IOException {  super(stream,directory);  readGeoKeys();  log("GeoTIFFDirectory constructor success.");}  }
class C{  public Mound(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:55:56.180 -0500",hash_original_method="456400F7FD34BEA9F412D24A9889C2FB",hash_generated_method="F28E65C77F981D5409FFCCEB8ED4757B") public static String concatenateWhere(String a,String b){  if (TextUtils.isEmpty(a)) {    return b;  }  if (TextUtils.isEmpty(b)) {    return a;  }  return "(" + a + ") AND ("+ b+ ")";}  }
class C{  public ExpressionNode exprGetParent(){  return getParentElem();}  }
class C{  public static final int[][] round(double Rpred[][]){  int Ypred[][]=new int[Rpred.length][Rpred[0].length];  for (int i=0; i < Rpred.length; i++) {    for (int j=0; j < Rpred[i].length; j++) {      Ypred[i][j]=(int)Math.round(Rpred[i][j]);    }  }  return Ypred;}  }
class C{  public Target generateTarget(final String ctrlID,final String description){  return generateTarget(ctrlID,description,null);}  }
class C{  public SceneVO sceneVoFromItems(){  sceneControl.getCurrentSceneVO().composite=new CompositeVO();  sceneControl.getCurrentSceneVO().composite.loadFromEntity(getRootEntity());  return sceneControl.getCurrentSceneVO();}  }
class C{  @SuppressWarnings("unchecked") public CreateIndexRequest aliases(Map source){  try {    XContentBuilder builder=XContentFactory.jsonBuilder();    builder.map(source);    return aliases(builder.bytes());  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }}  }
class C{  public void close() throws IOException {  unlock();  _fileChannel=null;  super.close();}  }
class C{  public static boolean vPoolSpecifiesHighAvailabilityDistributed(final VirtualPool virtualPool){  String highAvailability=virtualPool.getHighAvailability();  return NullColumnValueGetter.isNotNullValue(highAvailability) && (VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(highAvailability));}  }
class C{  public static Action newInstance(String value){  final Action returnInstance=new Action();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public void write(String s){  for (int i=0; i < s.length(); i++)   write(s.charAt(i));}  }
class C{  private static void parseDirectoriesInformation(final Node registersNode,final List<RemoteDirectory> files){  final NodeList nodes=registersNode.getChildNodes();  for (int i=0; i < nodes.getLength(); ++i) {    final Node node=nodes.item(i);    final String nodeName=node.getNodeName();    if ("Directory".equals(nodeName)) {      files.add(new RemoteDirectory(node.getAttributes().getNamedItem("name").getNodeValue()));    }  }}  }
class C{  static void checkUnsignedShort(final int value,final String msg){  if (value < 0 || value > 65535) {    throw new IllegalArgumentException(msg + " (must be an unsigned short): " + value);  }}  }
class C{  public DateAxis(String label,TimeZone zone,Locale locale){  super(label,DateAxis.createStandardDateTickUnits(zone,locale));  this.tickUnit=new DateTickUnit(DateTickUnitType.DAY,1,new SimpleDateFormat());  setAutoRangeMinimumSize(DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS);  setRange(DEFAULT_DATE_RANGE,false,false);  this.dateFormatOverride=null;  this.timeZone=zone;  this.locale=locale;  this.timeline=DEFAULT_TIMELINE;}  }
class C{  @Override public void decryptBlock(byte[] data,int offset,byte[] dest,int destOffset){  Kuz128 x=new Kuz128();  x.setQ(0,ByteStrings.bytesToLong(data,offset) ^ key.getK()[9].getQ(0));  x.setQ(1,ByteStrings.bytesToLong(data,offset + 8) ^ key.getK()[9].getQ(1));  for (int i=8; i >= 0; i--) {    KuznechikMath.kuz_l_inv(x);    for (int j=0; j < 16; j++) {      x.getB()[j]=KuznechikTables.kuz_pi_inv[x.getB()[j] & 0xFF];    }    x.setQ(0,x.getQ(0) ^ key.getK()[i].getQ(0));    x.setQ(1,x.getQ(1) ^ key.getK()[i].getQ(1));  }  ByteStrings.write(dest,destOffset,ByteStrings.longToBytes(x.getQ(0)),0,8);  ByteStrings.write(dest,destOffset + 8,ByteStrings.longToBytes(x.getQ(1)),0,8);}  }
class C{  public void addConnectedVirtualArray(String virtualArrayURI){  if (virtualArrayURI != null) {    if (_connectedVirtualArrays == null) {      setConnectedVirtualArrays(new StringSet());      _connectedVirtualArrays.add(virtualArrayURI);    } else {      _connectedVirtualArrays.add(virtualArrayURI);    }    setChanged("connectedVirtualArrays");    updateVirtualArrayTags();  }}  }
class C{  public void testJob01(){  System.out.println("testJob01");}  }
class C{  public int E(){  return E;}  }
class C{  protected Vertex createInput(String text,Network network){  Vertex sentence=network.createSentence(text);  Vertex input=network.createInstance(Primitive.INPUT);  input.setName(text);  input.addRelationship(Primitive.SENSE,getPrimitive());  input.addRelationship(Primitive.INPUT,sentence);  sentence.addRelationship(Primitive.INSTANTIATION,Primitive.DIRECTMESSAGE);  return input;}  }
class C{  public static double guessDate(String s){  int i=s.length();  char c;  do {    i--;    c=s.charAt(i);  } while (i >= 0 && (Character.isDigit(c) || c == '.'));  if (i == s.length()) {    return 0.0;  }  return Double.parseDouble(s.substring(i + 1));}  }
class C{  public boolean removeAll(Collection<?> c){  return al.removeAll(c);}  }
class C{  public Set<AclEntryFlag> flags(){  return new HashSet<AclEntryFlag>(flags);}  }
class C{  public TextEditChangeGroup(TextChange change,TextEditGroup group){  super(change,group);}  }
class C{  public ClassificationModelEvaluation(Classifier classifier,ClassificationDataSet dataSet,ExecutorService threadpool){  this.classifier=classifier;  this.dataSet=dataSet;  this.threadpool=threadpool;  this.dtp=new DataTransformProcess();  keepPredictions=false;  errorStats=new OnLineStatistics();  scoreMap=new LinkedHashMap<ClassificationScore,OnLineStatistics>();}  }
class C{  public WriteException(WriteRequest request,Throwable cause){  initCause(cause);  this.requests=asRequestList(request);}  }
class C{  int addAge(final int time){  age+=time;  return age;}  }
class C{  List helpOptions(){  return new ArrayList(shortOpts.values());}  }
class C{  public static Collection<SoundType> all(){  return enums.all();}  }
class C{  public void onEvent(Event e) throws Exception {  log.config(e.getName());  Object source=e.getTarget();  if (source instanceof Checkbox || source instanceof Radio) {    cmd_selection(source);    if (source instanceof Radio) {      Iterator<Radiogroup> it=m_buttonGroups.values().iterator();      while (it.hasNext()) {        Radiogroup group=it.next();        Enumeration en=(Enumeration)group.getChildren();        while (en.hasMoreElements()) {          if (source == en.nextElement()) {            Enumeration info=(Enumeration)group.getChildren();            while (info.hasMoreElements()) {              Object infoObj=info.nextElement();              if (source != infoObj)               cmd_selection(infoObj);            }          }        }      }    }  } else   if (source == productField || source == productQty) {    m_qty=productQty.getValue();    ListItem listitem=productField.getSelectedItem();    KeyNamePair pp=null;    if (listitem != null)     pp=listitem.toKeyNamePair();    m_product=MProduct.get(Env.getCtx(),pp.getKey());    createMainPanel();  } else   if (source == orderField) {    ListItem listitem=orderField.getSelectedItem();    KeyNamePair pp=null;    if (listitem != null)     pp=listitem.toKeyNamePair();    boolean valid=(pp != null && pp.getKey() > 0);    if (invoiceField != null)     invoiceField.setEnabled(!valid);    if (projectField != null)     projectField.setEnabled(!valid);  } else   if (source == invoiceField) {    ListItem listitem=invoiceField.getSelectedItem();    KeyNamePair pp=null;    if (listitem != null)     pp=listitem.toKeyNamePair();    boolean valid=(pp != null && pp.getKey() > 0);    if (orderField != null)     orderField.setEnabled(!valid);    if (projectField != null)     projectField.setEnabled(!valid);  } else   if (source == projectField) {    ListItem listitem=projectField.getSelectedItem();    KeyNamePair pp=null;    if (listitem != null)     pp=listitem.toKeyNamePair();    boolean valid=(pp != null && pp.getKey() > 0);    if (orderField != null)     orderField.setEnabled(!valid);    if (invoiceField != null)     invoiceField.setEnabled(!valid);  } else   if (confirmPanel.getButton("Ok").equals(e.getTarget())) {    if (cmd_save())     SessionManager.getAppDesktop().closeActiveWindow();  } else   if (confirmPanel.getButton("Cancel").equals(e.getTarget()))   SessionManager.getAppDesktop().closeActiveWindow();  boolean OK=m_product != null;  if (OK) {    KeyNamePair pp=null;    if (orderField != null) {      ListItem listitem=orderField.getSelectedItem();      if (listitem != null)       pp=listitem.toKeyNamePair();    }    if ((pp == null || pp.getKey() <= 0) && invoiceField != null) {      ListItem listitem=invoiceField.getSelectedItem();      if (listitem != null)       pp=listitem.toKeyNamePair();    }    if ((pp == null || pp.getKey() <= 0) && projectField != null) {      ListItem listitem=projectField.getSelectedItem();      if (listitem != null)       pp=listitem.toKeyNamePair();    }    OK=(pp != null && pp.getKey() > 0);  }  confirmPanel.setEnabled("Ok",OK);}  }
class C{  public void deleteLUNPathsFromStorageSystem(String systemId,List<Path> pathList,String model) throws Exception {  InputStream responseStream=null;  try {    boolean operationSucceeds=false;    int retryCount=0;    StringBuilder errorDescriptionBuilder=new StringBuilder();    while (!operationSucceeds && retryCount < MAX_RETRIES) {      retryCount++;      String deleteLUNsQuery=constructRemoveLUNsQuery(systemId,pathList,model);      log.info("Batch query to deleteLUNs Query: {}",deleteLUNsQuery);      URI endpointURI=hdsApiClient.getBaseURI();      ClientResponse response=hdsApiClient.post(endpointURI,deleteLUNsQuery);      if (HttpStatus.SC_OK == response.getStatus()) {        responseStream=response.getEntityInputStream();        JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);        try {          verifyErrorPayload(javaResult);          operationSucceeds=true;        } catch (        HDSException hdsException) {          Error error=javaResult.getBean(Error.class);          if (error != null && (error.getDescription().contains("2010") || error.getDescription().contains("5132") || error.getDescription().contains("7473"))) {            log.error("Error response recieved from HiCommandManger: {}",error.getDescription());            log.info("Exception from HICommand Manager recieved during delete operation, retrying operation {} time",retryCount);            errorDescriptionBuilder.append("error ").append(retryCount).append(" : ").append(error.getDescription()).append("-#####-");            Thread.sleep(60000);            continue;          } else {            throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete LunPaths due to invalid response %1$s from server",response.getStatus()));          }        }        log.info("Deleted {} LUN paths from system:{}",pathList.size(),systemId);      } else {        throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete Volume from HostGroups due to invalid response %1$s from server",response.getStatus()));      }    }    if (!operationSucceeds) {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete LunPaths due to repeated errors from HiCommand server, errors description are as %s",errorDescriptionBuilder.toString()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }}  }
class C{  static public Object invoke(Object target,int identifier,Object[] args) throws Throwable {  Method[] allmethods=target.getClass().getMethods();  int n=allmethods.length;  String head=methodPrefix + identifier;  for (int i=0; i < n; ++i)   if (allmethods[i].getName().startsWith(head)) {    try {      return allmethods[i].invoke(target,args);    } catch (    java.lang.reflect.InvocationTargetException e) {      throw e.getTargetException();    }catch (    java.lang.IllegalAccessException e) {      throw new CannotInvokeException(e);    }  }  throw new CannotInvokeException("cannot find a method");}  }
class C{  public static Validator<CharSequence> domainName(@NonNull final CharSequence errorMessage){  return new DomainNameValidator(errorMessage);}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  private void applySecurityDocumentExtension(Context context){  for (  SecurityDocumentExtension extension : extensionRegistry.getSecurityDocumentExtensions()) {    extension.apply(context);  }}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  public JBoss71xStandaloneLocalConfigurationCapability(){  super();  this.propertySupportMap.put(ServletPropertySet.USERS,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_AJP_PORT,Boolean.TRUE);  this.propertySupportMap.remove(GeneralPropertySet.RMI_PORT);  this.propertySupportMap.remove(JBossPropertySet.JBOSS_JRMP_PORT);  this.propertySupportMap.remove(JBossPropertySet.JBOSS_JMX_PORT);}  }
class C{  public ClassPath appendSystemPath(){  return source.appendSystemPath();}  }
class C{  public DiscussionObject(){  super();}  }
class C{  @CheckReturnValue @Nonnull static public String arrayToString(@Nonnull int[] v){  StringBuilder retval=new StringBuilder();  boolean first=true;  for (  int e : v) {    if (!first) {      retval.append(',');    }    first=false;    retval.append('[');    retval.append(e);    retval.append(']');  }  return new String(retval);}  }
class C{  private Producer<CloseableReference<CloseableImage>> newBitmapCacheGetToLocalTransformSequence(Producer<EncodedImage> inputProducer,ThumbnailProducer<EncodedImage>[] thumbnailProducers){  inputProducer=newEncodedCacheMultiplexToTranscodeSequence(inputProducer);  Producer<EncodedImage> inputProducerAfterDecode=newLocalTransformationsSequence(inputProducer,thumbnailProducers);  return newBitmapCacheGetToDecodeSequence(inputProducerAfterDecode);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public boolean checkToken(Token.ID... choices){  while (needMoreTokens()) {    fetchMoreTokens();  }  if (!this.tokens.isEmpty()) {    if (choices.length == 0) {      return true;    }    Token.ID first=this.tokens.get(0).getTokenId();    for (int i=0; i < choices.length; i++) {      if (first == choices[i]) {        return true;      }    }  }  return false;}  }
class C{  private boolean isOpen(){  return buf != null;}  }
class C{  static int parseMemberID(String nodeName){  int id=-1;  String[] parts=nodeName.split("_");  if (parts.length > 0) {    try {      id=Integer.parseInt(parts[parts.length - 1]);    } catch (    NumberFormatException nfe) {      id=Integer.MAX_VALUE;    }  }  return id;}  }
class C{  @Override public void peg(Calendar calendar){  this.firstMillisecond=getFirstMillisecond(calendar);  this.lastMillisecond=getLastMillisecond(calendar);}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public static void testMultipleArgs() throws Throwable {  int arity=1 + RNG.nextInt(Helper.MAX_ARITY / 2 - 2);  int arityMinus=RNG.nextInt(arity);  int arityPlus=arity + RNG.nextInt(Helper.MAX_ARITY / 2 - arity) + 1;  MethodType mType=Helper.randomMethodTypeGenerator(arity);  MethodType mTypeNew=Helper.randomMethodTypeGenerator(arity);  MethodType mTypeNewMinus=Helper.randomMethodTypeGenerator(arityMinus);  MethodType mTypeNewPlus=Helper.randomMethodTypeGenerator(arityPlus);  Class<?> rType=mType.returnType();  MethodHandle original;  if (rType.equals(void.class)) {    MethodType mt=MethodType.methodType(void.class);    original=MethodHandles.publicLookup().findStatic(THIS_CLASS,"retVoid",mt);  } else {    Object rValue=Helper.castToWrapper(1,rType);    original=MethodHandles.constant(rType,rValue);  }  original=Helper.addTrailingArgs(original,arity,mType.parameterList());  MethodHandle target=MethodHandles.explicitCastArguments(original,mTypeNew);  Object[] parList=Helper.randomArgs(mTypeNew.parameterList());  for (int i=0; i < parList.length; i++) {    if (parList[i] instanceof String) {      parList[i]=null;    }  }  target.invokeWithArguments(parList);  checkForWrongMethodTypeException(original,mTypeNewMinus);  checkForWrongMethodTypeException(original,mTypeNewPlus);}  }
class C{  public SQLSyntaxErrorException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static Integer findColumnIndexByHeader(TableColumnModel columnModel,String columnName){  for (int i=0; i < columnModel.getColumnCount(); i++) {    final String header=columnModel.getColumn(i).getHeaderValue().toString();    if (StringUtils.equals(header,columnName)) {      return i;    }  }  LOGGER.warn("Can't find column index for " + columnName);  return -1;}  }
class C{  public static boolean isWin2kUserDefinedFileExtExist(String fileExt){  boolean win2kFileDefinedByUser=false;  if (osName.equalsIgnoreCase(WIN2KOS)) {    String fileExtKey=USER_FILE_EXT_KEY_PREFIX + "\\" + fileExt;    win2kFileDefinedByUser=isSubKeyExist(fileExtKey,USER_LEVEL);  }  return win2kFileDefinedByUser;}  }
class C{  public void selectNavItem(int selectedId){  if (mRootView != null) {    final LinearLayout navMenu=(LinearLayout)mRootView.findViewById(R.id.settings_nav_menu);    for (int i=0; i < navMenu.getChildCount(); i++) {      View v=navMenu.getChildAt(i);      if (v instanceof LinearLayout) {        for (int j=0; j < navMenu.getChildCount(); j++) {          View l=((LinearLayout)v).getChildAt(j);          if (l instanceof TextView) {            TextView tv=(TextView)l;            if (tv.getId() == selectedId)             tv.setTextAppearance(getActivity(),R.style.SelectedNavigationMenuItem); else             tv.setTextAppearance(getActivity(),R.style.NavigationMenuItem);          }        }      }    }  }}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static float quad(float t,float p0,float p1,float p2){  return (float)(p0 * Math.pow(1 - t,2) + p1 * 2 * t* (1 - t) + p2 * t * t);}  }
class C{  private void drawTranslatedCube(GL10 gl,float translateX,float translateY,float translateZ){  gl.glPushMatrix();  gl.glTranslatef(translateX,translateY,translateZ);  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);  gl.glEnableClientState(GL10.GL_COLOR_ARRAY);  mCube.draw(gl);  gl.glPopMatrix();}  }
class C{  public PooledSwingWorker(){  super();}  }
class C{  public void removeAllRenderers(){  mRenderers.clear();}  }
class C{  public Feature(String str,Map cpStr2Int,Map lbStr2Int,Map fmap){  FeatureInit(str,cpStr2Int,lbStr2Int);  strId2IdxAdd(fmap);}  }
class C{  public static double toDoublePow10(long m,int n){  if (m == 0)   return 0.0;  if (m == Long.MIN_VALUE)   return toDoublePow10(Long.MIN_VALUE / 10,n + 1);  if (m < 0)   return -toDoublePow10(-m,n);  if (n >= 0) {    if (n > 308)     return Double.POSITIVE_INFINITY;    long x0=0;    long x1=0;    long x2=m & MASK_32;    long x3=m >>> 32;    int pow2=0;    while (n != 0) {      int i=(n >= POW5_INT.length) ? POW5_INT.length - 1 : n;      int coef=POW5_INT[i];      if (((int)x0) != 0)       x0*=coef;      if (((int)x1) != 0)       x1*=coef;      x2*=coef;      x3*=coef;      x1+=x0 >>> 32;      x0&=MASK_32;      x2+=x1 >>> 32;      x1&=MASK_32;      x3+=x2 >>> 32;      x2&=MASK_32;      pow2+=i;      n-=i;      long carry=x3 >>> 32;      if (carry != 0) {        x0=x1;        x1=x2;        x2=x3 & MASK_32;        x3=carry;        pow2+=32;      }    }    int shift=31 - MathLib.bitLength(x3);    pow2-=shift;    long mantissa=(shift < 0) ? (x3 << 31) | (x2 >>> 1) : (((x3 << 32) | x2) << shift) | (x1 >>> (32 - shift));    return toDoublePow2(mantissa,pow2);  } else {    if (n < -324 - 20)     return 0.0;    long x1=m;    long x0=0;    int pow2=0;    while (true) {      int shift=63 - MathLib.bitLength(x1);      x1<<=shift;      x1|=x0 >>> (63 - shift);      x0=(x0 << shift) & MASK_63;      pow2-=shift;      if (n == 0)       break;      int i=(-n >= POW5_INT.length) ? POW5_INT.length - 1 : -n;      int divisor=POW5_INT[i];      long wh=(x1 >>> 32);      long qh=wh / divisor;      long r=wh - qh * divisor;      long wl=(r << 32) | (x1 & MASK_32);      long ql=wl / divisor;      r=wl - ql * divisor;      x1=(qh << 32) | ql;      wh=(r << 31) | (x0 >>> 32);      qh=wh / divisor;      r=wh - qh * divisor;      wl=(r << 32) | (x0 & MASK_32);      ql=wl / divisor;      x0=(qh << 32) | ql;      n+=i;      pow2-=i;    }    return toDoublePow2(x1,pow2);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public OverTheTopLayer attachTo(ViewGroup rootView){  this.mWeakRootView=new WeakReference<ViewGroup>(rootView);  return this;}  }
class C{  final Object pop(){  int size=stack.size();  return size == 0 ? null : stack.remove(size - 1);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Builder icon(String icon){  this.icon=icon;  return this;}  }
class C{  public static void deregisterDeploymentManager(){  mgr=null;}  }
class C{  private static void applyPredictorFunction(final int mainPred,final BufferedInputStream bis,final OutputStream bos,final int colors,final int bitsPerComponent,final int columns) throws Exception {  int predictor;  final int bytesAvailable=bis.available();  final int bpp=(colors * bitsPerComponent + 7) / 8;  final int rowLength=(columns * colors * bitsPerComponent + 7) / 8 + bpp;  final byte[] thisLine=new byte[rowLength];  final byte[] lastLine=new byte[rowLength];  int curPred;  try {    int byteCount=0;    while (true) {      if (bytesAvailable <= byteCount) {        break;      }      predictor=mainPred;      int i=0;      int offset=bpp;      if (predictor >= 10) {        curPred=bis.read();        if (curPred == -1) {          break;        }        curPred+=10;      } else {        curPred=predictor;      }      while (offset < rowLength) {        i=bis.read(thisLine,offset,rowLength - offset);        if (i == -1) {          break;        }        offset+=i;        byteCount+=i;      }      if (i == -1) {        break;      }switch (curPred) {case 2:        for (int i1=bpp; i1 < rowLength; i1++) {          final int sub=thisLine[i1] & 0xff;          final int raw=thisLine[i1 - bpp] & 0xff;          thisLine[i1]=(byte)((sub + raw) & 0xff);          bos.write(thisLine[i1]);        }      break;case 10:    for (int i1=bpp; i1 < rowLength; i1++) {      bos.write(thisLine[i1]);    }  break;case 11:for (int i1=bpp; i1 < rowLength; i1++) {  final int sub=thisLine[i1] & 0xff;  final int raw=thisLine[i1 - bpp] & 0xff;  thisLine[i1]=(byte)((sub + raw));  bos.write(thisLine[i1]);}break;case 12:for (int i1=bpp; i1 < rowLength; i1++) {final int sub=(lastLine[i1] & 0xff) + (thisLine[i1] & 0xff);thisLine[i1]=(byte)(sub);bos.write(thisLine[i1]);}break;case 13:for (int i1=bpp; i1 < rowLength; i1++) {final int av=thisLine[i1] & 0xff;final int floor=((thisLine[i1 - bpp] & 0xff) + (lastLine[i1] & 0xff) >> 1);thisLine[i1]=(byte)(av + floor);bos.write(thisLine[i1]);}break;case 14:for (int i1=bpp; i1 < rowLength; i1++) {final int a=thisLine[i1 - bpp] & 0xff;final int b=lastLine[i1] & 0xff;final int c=lastLine[i1 - bpp] & 0xff;final int p=a + b - c;int pa=p - a, pb=p - b, pc=p - c;if (pa < 0) {pa=-pa;}if (pb < 0) {pb=-pb;}if (pc < 0) {pc=-pc;}if (pa <= pb && pa <= pc) {thisLine[i1]=(byte)(thisLine[i1] + a);} else if (pb <= pc) {thisLine[i1]=(byte)(thisLine[i1] + b);} else {thisLine[i1]=(byte)(thisLine[i1] + c);}bos.write(thisLine[i1]);}break;case 15:break;}System.arraycopy(thisLine,0,lastLine,0,lastLine.length);}bos.flush();bos.close();} catch (final Exception e) {LogWriter.writeLog("Exception " + e + " accessing Predictor");}}  }
class C{  public boolean canChange(final IRI query,final String currentUser) throws RepositoryException, QueryEvaluationException, MalformedQueryException {  return performAccessQuery(ASK_UPDATABLE,query,currentUser);}  }
class C{  public static Wildcard createWildcardExtends(TypeRef upperBound){  final Wildcard wc=createWildcard();  wc.setDeclaredUpperBound(upperBound);  return wc;}  }
class C{  protected void searchForAndLoadProperties(){  searchForAndLoadProperties(getDefaultPropertyFileName());}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  @Nullable protected PlatformFutureUtils.Writer futureWriter(int opId){  return null;}  }
class C{  public synchronized static String call(PageContext pc,String input,String key,String algorithm,String encoding,Object ivOrSalt,double iterations) throws PageException {  return invoke(input,key,algorithm,encoding,ivOrSalt,Caster.toInteger(iterations));}  }
class C{  public boolean isOverwriteAcct(){  Object oo=get_Value(COLUMNNAME_OverwriteAcct);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (getInteractionMode() == DRAW_MODE)   return onTouchDrawMode(event); else   if (getInteractionMode() == SELECT_MODE)   return onTouchSelectMode(event); else   if (getInteractionMode() == ROTATE_MODE)   return onTouchRotateMode(event); else   return onTouchLockedMode(event);}  }
class C{  final public MutableString append(MutableString s){  if (s == null)   s=NULL;  final int l=s.length();  if (l == 0)   return this;  final int newLength=length() + l;  expand(newLength);  System.arraycopy(s.array,0,array,newLength - l,l);  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  public Matrix3f transpose(){  return transposeLocal();}  }
class C{  public static void unselectSubtreeNodes(final ZyGraph graph,final ITreeNode<CTag> tag){  unselectNodes(graph,getSubtreeTags(tag),true);}  }
class C{  private static boolean isParameterSeparator(final char c){  if (Character.isWhitespace(c)) {    return true;  }  for (  char separator : ParsedSql.PARAMETER_SEPARATORS) {    if (c == separator) {      return true;    }  }  return false;}  }
class C{  public static ErrorCodeAttribute createErrorCodeAttribute(char errorCode,String reasonPhrase) throws IllegalArgumentException {  ErrorCodeAttribute attribute=new ErrorCodeAttribute();  attribute.setErrorCode(errorCode);  attribute.setReasonPhrase(reasonPhrase == null ? ErrorCodeAttribute.getDefaultReasonPhrase(attribute.getErrorCode()) : reasonPhrase);  return attribute;}  }
class C{  public void addAnswers(JmDNSImpl jmDNSImpl,Set<DNSRecord> answers){}  }
class C{  private ActionBarBackground fadeIn(Integer color){  Drawable transBackground=getColoredBackground(android.R.color.transparent);  Drawable background=getColoredBackground(color);  background.setAlpha(1);  fadeBackground(transBackground,background);  return this;}  }
class C{  public boolean isCreateMnemonic(){  if (isReadOnly() || m_vo.ColumnName.equals("AD_Client_ID") || m_vo.ColumnName.equals("AD_Org_ID")|| m_vo.ColumnName.equals("DocumentNo"))   return false;  return true;}  }
class C{  protected void init(){}  }
class C{  public final void add(V value){  if (GWT.isScript()) {    jsArray.add(value);  } else {    javaArray.add(value);  }}  }
class C{  public GetAddons(String... properties){  super();  addParameterToRequest("properties",properties);}  }
class C{  public XPathException(String message){  super(message);}  }
class C{  public double y(){  return y;}  }
class C{  public void unsetMatchColumn(int[] columnIdxes) throws SQLException {  int i_val;  for (int j=0; j < columnIdxes.length; j++) {    i_val=(Integer.parseInt(iMatchColumns.get(j).toString()));    if (columnIdxes[j] != i_val) {      throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.matchcols").toString());    }  }  for (int i=0; i < columnIdxes.length; i++) {    iMatchColumns.set(i,-1);  }}  }
class C{  protected Expression literal(int opPos){  opPos=getFirstChildPos(opPos);  return (XString)getTokenQueue().elementAt(getOp(opPos));}  }
class C{  public PLNullTexture(){  super();}  }
class C{  public static boolean isMaximum(InetAddress address){  byte[] addr=address.getAddress();  for (int i=0; i < addr.length; i++) {    if (addr[i] != (byte)0xff) {      return false;    }  }  return true;}  }
class C{  @Override protected void handleRemoved(final RPEntity entity){  entity.stopAttacking(this);  super.handleRemoved(entity);}  }
class C{  @Override public String toString(){  return fLabel;}  }
class C{  private void shift(int cnt){  pos+=cnt;  assert pos <= len;}  }
class C{  public static IJavaElement handleToElement(final String project,final String handle,final boolean check){  return handleToElement(null,project,handle,check);}  }
class C{  @Override public void endReceipt(){  try {    PrintService ps;    if (printservice == null) {      String[] printers=ReportUtils.getPrintNames();      if (printers.length == 0) {        logger.warning(AppLocal.getIntString("message.noprinters"));        ps=null;      } else {        SelectPrinter selectprinter=SelectPrinter.getSelectPrinter(parent,printers);        selectprinter.setVisible(true);        if (selectprinter.isOK()) {          ps=ReportUtils.getPrintService(selectprinter.getPrintService());        } else {          ps=null;        }      }    } else {      ps=printservice;    }    if (ps != null) {      PrintRequestAttributeSet aset=new HashPrintRequestAttributeSet();      aset.add(OrientationRequested.PORTRAIT);      aset.add(new JobName(AppLocal.APP_NAME + " - Document",null));      aset.add(media);      DocPrintJob printjob=ps.createPrintJob();      Doc doc=new SimpleDoc(new PrintableBasicTicket(m_ticketcurrent,imageable_x,imageable_y,imageable_width,imageable_height),DocFlavor.SERVICE_FORMATTED.PRINTABLE,null);      printjob.print(doc,aset);    }  } catch (  PrintException ex) {    logger.log(Level.WARNING,AppLocal.getIntString("message.printererror"),ex);    JMessageDialog.showMessage(parent,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString("message.printererror"),ex));  }  m_ticketcurrent=null;}  }
class C{  public static double log2(double a){  return Math.log(a) / log2;}  }
class C{  private static int blend(int v1,int v2,int ratio){  int b=(ratio * v1 + (100 - ratio) * v2) / 100;  return Math.min(255,b);}  }
class C{  public static List<?> cloneList(List<?> source){  ParamChecks.nullNotPermitted(source,"source");  List result=new ArrayList();  for (  Object obj : source) {    if (obj != null) {      try {        result.add(ObjectUtilities.clone(obj));      } catch (      CloneNotSupportedException ex) {        throw new RuntimeException(ex);      }    } else {      result.add(null);    }  }  return result;}  }
class C{  private final String msgStackToString(ParseException e){  StringBuffer msg;  String name=" *unknown* (error occurred before module header)";  if (mn != null)   name=mn.toString();  msg=new StringBuffer("***Parse Error***\n");  if (expecting != emptyString) {    msg.append("Was expecting \"");    msg.append(expecting);    msg.append("\"\n");  }  msg.append(e.getShortMessage());  msg.append("\n\nResidual stack trace follows:\n");  int last=msgStackCurrentSize - 10;  if (last < 0)   last=0;  for (int lvi=msgStackCurrentSize; lvi > last; lvi-=2) {    msg.append((String)msgStack[lvi - 2]);    msg.append(" starting at line ");    Token t=(Token)msgStack[lvi - 1];    msg.append(t.beginLine);    msg.append(", column ");    msg.append(t.beginColumn);    msg.append(".\n");  }  return msg.toString();}  }
class C{  public static boolean isHTMLString(String s){  if (s != null) {    if ((s.length() >= 6) && (s.charAt(0) == '<') && (s.charAt(5) == '>')) {      String tag=s.substring(1,5);      return tag.equalsIgnoreCase(propertyKey);    }  }  return false;}  }
class C{  public int countEdges(){  int edges=0;  for (  TIntArrayList row : rows) {    edges+=row.size();  }  return edges / 2;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(0);  domesticAttr=testEmployee.getAttributeNode("invalidAttribute");  assertNull("elementGetAttributeNodeNullAssert",domesticAttr);}  }
class C{  private void close(){  try {    reader.close();  } catch (  final IOException e) {    e.printStackTrace();  }}  }
class C{  public static String dumpAsString(Object obj,boolean verbose){  StringBuffer buf=new StringBuffer();  if (obj instanceof ASN1Primitive) {    _dumpAsString("",verbose,(ASN1Primitive)obj,buf);  } else   if (obj instanceof ASN1Encodable) {    _dumpAsString("",verbose,((ASN1Encodable)obj).toASN1Primitive(),buf);  } else {    return "unknown object type " + obj.toString();  }  return buf.toString();}  }
class C{  public void reset(){  initialized=false;  fieldData=null;  cachedObject=null;}  }
class C{  public Ed25519EncodedFieldElement(final byte[] values){switch (values.length) {case 32:    this.zero=Ed25519Field.ZERO_SHORT;  break;case 64:this.zero=Ed25519Field.ZERO_LONG;break;default :throw new IllegalArgumentException("Invalid 2^8 bit representation.");}this.values=values;}  }
class C{  public static boolean loadCheck(Package toLoad,File packageRoot,PrintStream... progress){  boolean load;  try {    load=toLoad.isCompatibleBaseSystem();  } catch (  Exception ex) {    ex.printStackTrace();    return false;  }  if (!load) {    for (    PrintStream p : progress) {      p.println("[Weka] Skipping package " + toLoad.getName() + " because it is not compatible with Weka "+ PACKAGE_MANAGER.getBaseSystemVersion().toString());    }    return false;  }  load=!m_doNotLoadList.contains(toLoad.getName());  if (!load) {    for (    PrintStream p : progress) {      p.println("[Weka] Skipping package " + toLoad.getName() + " because it is has been marked as do not load");    }    return false;  }  if (!(checkForMissingClasses(toLoad,progress) && checkForMissingFiles(toLoad,packageRoot,progress))) {    return false;  }  if (!checkForUnsetEnvVar(toLoad,progress)) {    return false;  }  if (m_offline) {    return true;  }  try {    List<Dependency> missing=toLoad.getMissingDependencies();    if (missing.size() > 0) {      for (      PrintStream p : progress) {        p.println("[Weka] " + toLoad.getName() + " can't be loaded because the following"+ " packages are missing:");        for (        Dependency d : missing) {          p.println(d.getTarget());        }      }      return false;    }  } catch (  Exception ex) {    ex.printStackTrace();    return false;  }  try {    List<Dependency> depends=toLoad.getDependencies();    for (    Dependency d : depends) {      if (d.getTarget().getPackage().isInstalled()) {        if (!loadCheck(d.getTarget().getPackage(),packageRoot,progress)) {          for (          PrintStream p : progress) {            p.println("[Weka] Can't load " + toLoad.getName() + " because "+ d.getTarget()+ " can't be loaded.");          }          return false;        }        Package installedD=getInstalledPackageInfo(d.getTarget().getPackage().getName());        if (!d.getTarget().checkConstraint(installedD)) {          for (          PrintStream p : progress) {            p.println("[Weka] Can't load " + toLoad.getName() + " because the installed "+ d.getTarget().getPackage().getName()+ " is not compatible (requires: "+ d.getTarget()+ ")");          }          return false;        }      }    }  } catch (  Exception ex) {    ex.printStackTrace();    return false;  }  return true;}  }
class C{  public UF4(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public StaticSETofInts(int[] keys){  a=new int[keys.length];  for (int i=0; i < keys.length; i++)   a[i]=keys[i];  Arrays.sort(a);  for (int i=1; i < a.length; i++)   if (a[i] == a[i - 1])   throw new IllegalArgumentException("Argument arrays contains duplicate keys.");}  }
class C{  private void processAnsiCommand_C(){  moveCursorForward(getAnsiParameter(0));}  }
class C{  public ComplexParameter(MathExpression expression){  this.expression=expression;}  }
class C{  private void writeOut(byte[] data) throws IOException {  writeOut(data,0,data.length);}  }
class C{  static RegisterOperand InsertLoadOffset(Instruction s,IR ir,Operator operator,TypeReference type,Operand reg2,Operand offset,LocationOperand loc,Operand guard){  RegisterOperand regTarget=ir.regpool.makeTemp(type);  Instruction s2=Load.create(operator,regTarget,reg2,offset,loc,guard);  s.insertBefore(s2);  return regTarget.copyD2U();}  }
class C{  @Override public int compareTo(String o){  int result;  int major;  int minor;  int revision;  int pnt;  int[] maj=new int[1];  int[] min=new int[1];  int[] rev=new int[1];  int[] point=new int[1];  parseVersion(o,maj,min,rev,point);  major=maj[0];  minor=min[0];  revision=rev[0];  pnt=point[0];  if (MAJOR < major) {    result=-1;  } else   if (MAJOR == major) {    if (MINOR < minor) {      result=-1;    } else     if (MINOR == minor) {      if (REVISION < revision) {        result=-1;      } else       if (REVISION == revision) {        if (POINT < pnt) {          result=-1;        } else         if (POINT == pnt) {          result=0;        } else {          result=1;        }      } else {        result=1;      }    } else {      result=1;    }  } else {    result=1;  }  return result;}  }
class C{  public static final byte[] decodeQuotedPrintable(byte[] bytes){  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == ESCAPE_CHAR) {      try {        if ('\r' == (char)bytes[i + 1] && '\n' == (char)bytes[i + 2]) {          i+=2;          continue;        }        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          return null;        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        return null;      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  public BestFirstSearch(QueueSearch impl,EvaluationFunction ef){  super(impl,createComparator(ef));}  }
class C{  protected void readHeader(){  String id="";  for (int i=0; i < 6; i++) {    id+=(char)read();  }  if (!id.startsWith("GIF")) {    status=STATUS_FORMAT_ERROR;    return;  }  readLSD();  if (gctFlag && !err()) {    gct=readColorTable(gctSize);    bgColor=gct[bgIndex];  }}  }
class C{  public static boolean isStdio(File file){  return isStdio(file.toString());}  }
class C{  public UpdateEvent(long tick,double tpf){  super(ANY);  this.tick=tick;  this.tpf=tpf;}  }
class C{  public NotificationChain basicSetAnnotationList(ExpressionAnnotationList newAnnotationList,NotificationChain msgs){  ExpressionAnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ANNOTABLE_EXPRESSION__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static Attribute createAttribute(Model model,Property argProperty,Resource argType,Integer minCount,Integer maxCount){  Attribute a=model.createResource(SPL.Attribute).as(Attribute.class);  if (argProperty != null) {    a.addProperty(SPL.predicate,argProperty);  }  if (argType != null) {    a.addProperty(SPL.valueType,argType);  }  if (minCount != null) {    a.addProperty(SPL.minCount,model.createTypedLiteral(minCount.intValue()));  }  if (maxCount != null) {    a.addProperty(SPL.maxCount,model.createTypedLiteral(maxCount.intValue()));  }  return a;}  }
class C{  public void reject(){  this.manager.replyRejectPacket(this.bytestreamRequest);}  }
class C{  public void createPictScenario04() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));  String supplierAdminId="Pict04Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict04SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),7);  String customerAdminId="Pict04DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict04DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-03-04 00:00:00"),DateTimeHandling.calculateMillis("2013-03-16 23:59:59"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("19.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),Arrays.asList(VOVatRateFactory.newVOOrganizationVatRate(new BigDecimal("17.00"),customer)));  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalService);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_04",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PICT04_PERUNIT_DAY,technicalService,supplierMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"GUEST");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_04",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-05 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-06 00:00:00"),"PERIOD",DateTimeHandling.daysToMillis(100) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 06:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModel(subDetails.getPriceModel(),PriceModelType.PER_UNIT,PricingPeriod.DAY,"EUR",new BigDecimal("0.00"),new BigDecimal("7.00"),new BigDecimal("8.00"),4);  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),subDetails,newSubPriceModel,customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 12:00:00"));  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 18:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-09 12:00:00"),"FILE_DOWNLOAD",15);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-09 18:00:00"),"FILE_UPLOAD",3);  VOServiceDetails freeService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT04_FREE_SERVICE",TestService.EXAMPLE,TestPriceModel.FREE,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,freeService);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-11 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,freeService);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-12 00:00:00"),"PERIOD",DateTimeHandling.daysToMillis(110) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-14 00:00:00"));  upgradedSubDetails.setSubscriptionId("PICT_TEST_04" + "_SubID2");  upgradedSubDetails=subscrSetup.modifySubscription(upgradedSubDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-15 12:00:00"));  upgradedSubDetails=subscrSetup.revokeUser(customerAdmin,upgradedSubDetails.getSubscriptionId());  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT04_PRORATA_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeService,proRataService);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-17 00:00:00"));  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-18 12:00:00"));  upgradedSubDetails2=subscrSetup.addUser(customerAdmin,VOServiceFactory.getRole(serviceDetails,"USER"),upgradedSubDetails2.getSubscriptionId());  upgradedSubDetails2=subscrSetup.modifyParameterForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-03-24 00:00:00"),"PERIOD",DateTimeHandling.daysToMillis(90) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-28 12:00:00"));  upgradedSubDetails2=subscrSetup.modifyUserRole(upgradedSubDetails2.getUsageLicenses().get(0),VOServiceFactory.getRole(proRataService,"ADMIN"),upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_04",customer);}  }
class C{  int decryptFinal(byte[] in,int inOfs,int len,byte[] out,int outOfs) throws IllegalBlockSizeException, AEADBadTagException, ShortBufferException {  if (len < tagLenBytes) {    throw new AEADBadTagException("Input too short - need tag");  }  if (out.length - outOfs < ((ibuffer.size() + len) - tagLenBytes)) {    throw new ShortBufferException("Output buffer too small");  }  processAAD();  if (len != 0) {    ibuffer.write(in,inOfs,len);  }  in=ibuffer.toByteArray();  inOfs=0;  len=in.length;  ibuffer.reset();  byte[] tag=new byte[tagLenBytes];  System.arraycopy(in,len - tagLenBytes,tag,0,tagLenBytes);  len-=tagLenBytes;  if (len > 0) {    doLastBlock(in,inOfs,len,out,outOfs,false);  }  byte[] lengthBlock=getLengthBlock(sizeOfAAD * 8,processed * 8);  ghashAllToS.update(lengthBlock);  byte[] s=ghashAllToS.digest();  byte[] sOut=new byte[s.length];  GCTR gctrForSToTag=new GCTR(embeddedCipher,this.preCounterBlock);  gctrForSToTag.doFinal(s,0,s.length,sOut,0);  int mismatch=0;  for (int i=0; i < tagLenBytes; i++) {    mismatch|=tag[i] ^ sOut[i];  }  if (mismatch != 0) {    throw new AEADBadTagException("Tag mismatch!");  }  return len;}  }
class C{  public MechWarrior(Entity originalRide){  super(originalRide);  setChassis(EjectedCrew.MW_EJECT_NAME);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.036 -0500",hash_original_method="03604E5C7E0679D6E6C597691E5A0530",hash_generated_method="A1FF5C516EC9893E9DA2898A20F9B104") public static ParcelFileDescriptor fromFd(int fd) throws IOException {  FileDescriptor fdesc=getFileDescriptorFromFd(fd);  return new ParcelFileDescriptor(fdesc);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TMODULE__ANNOTATIONS:    getAnnotations().clear();  getAnnotations().addAll((Collection<? extends TAnnotation>)newValue);return;case TypesPackage.TMODULE__QUALIFIED_NAME:setQualifiedName((String)newValue);return;case TypesPackage.TMODULE__PROJECT_ID:setProjectId((String)newValue);return;case TypesPackage.TMODULE__VENDOR_ID:setVendorID((String)newValue);return;case TypesPackage.TMODULE__MODULE_LOADER:setModuleLoader((String)newValue);return;case TypesPackage.TMODULE__N4JSD_MODULE:setN4jsdModule((Boolean)newValue);return;case TypesPackage.TMODULE__STATIC_POLYFILL_MODULE:setStaticPolyfillModule((Boolean)newValue);return;case TypesPackage.TMODULE__STATIC_POLYFILL_AWARE:setStaticPolyfillAware((Boolean)newValue);return;case TypesPackage.TMODULE__MAIN_MODULE:setMainModule((Boolean)newValue);return;case TypesPackage.TMODULE__PRE_LINKING_PHASE:setPreLinkingPhase((Boolean)newValue);return;case TypesPackage.TMODULE__TOP_LEVEL_TYPES:getTopLevelTypes().clear();getTopLevelTypes().addAll((Collection<? extends Type>)newValue);return;case TypesPackage.TMODULE__VARIABLES:getVariables().clear();getVariables().addAll((Collection<? extends TVariable>)newValue);return;case TypesPackage.TMODULE__INTERNAL_TYPES:getInternalTypes().clear();getInternalTypes().addAll((Collection<? extends Type>)newValue);return;case TypesPackage.TMODULE__EXPOSED_INTERNAL_TYPES:getExposedInternalTypes().clear();getExposedInternalTypes().addAll((Collection<? extends Type>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public String toString(){  if (this.getName() != null)   return this.getName();  return super.toString();}  }
class C{  public void pasteSubgraph(List graphElements,Point upperLeft){  Point oldUpperLeft=EditorUtils.getTopLeftPoint(graphElements);  int deltaX=upperLeft.x - oldUpperLeft.x;  int deltaY=upperLeft.y - oldUpperLeft.y;  for (  Object graphElement : graphElements) {    if (graphElement instanceof Node) {      Node node=(Node)graphElement;      adjustNameAndPosition(node,deltaX,deltaY);      getWorkbench().getGraph().addNode(node);    } else     if (graphElement instanceof Edge) {      getWorkbench().getGraph().addEdge((Edge)graphElement);    } else {      throw new IllegalArgumentException("The list of session " + "elements should contain only SessionNodeWrappers " + "and SessionEdges: "+ graphElement);    }  }}  }
class C{  public static Collection<InetAddress> toInetAddresses(Collection<String> addrs,Collection<String> hostNames) throws IgniteCheckedException {  Set<InetAddress> res=new HashSet<>(addrs.size());  Iterator<String> hostNamesIt=hostNames.iterator();  for (  String addr : addrs) {    String hostName=hostNamesIt.hasNext() ? hostNamesIt.next() : null;    InetAddress inetAddr=null;    if (!F.isEmpty(hostName)) {      try {        inetAddr=InetAddress.getByName(hostName);      } catch (      UnknownHostException ignored) {      }    }    if (inetAddr == null || inetAddr.isLoopbackAddress()) {      try {        inetAddr=InetAddress.getByName(addr);      } catch (      UnknownHostException ignored) {      }    }    if (inetAddr != null)     res.add(inetAddr);  }  if (res.isEmpty())   throw new IgniteCheckedException("Addresses can not be resolved [addr=" + addrs + ", hostNames="+ hostNames+ ']');  return res;}  }
class C{  protected void guardaredicionExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionErrors errors=new ActionErrors();  ConsultaForm frm=(ConsultaForm)form;  try {    AppUser userVO=getAppUser(request);    ServiceClient sc=ServiceClient.create(userVO);    ServiceRepository services=ServiceRepository.getInstance(sc);    GestionConsultasBI consultasService=services.lookupGestionConsultasBI();    ConsultaVO consultaVO=(ConsultaVO)getFromTemporalSession(request,ConsultasConstants.CONSULTA_KEY);    frm.populate(userVO.getId(),consultaVO);    errors=frm.validate(request,true);    if (errors.isEmpty()) {      consultaVO.setFestado(DBUtils.getFechaActual());      consultaVO.setTipo(getTipoConsulta(request,frm));      if (StringUtils.isNotEmpty(frm.getIdMotivo())) {        MotivoConsultaVO motivo=consultasService.getMotivoConsultaById(frm.getIdMotivo());        if (motivo != null) {          consultaVO.setMotivo(motivo.getMotivo());        }      }      try {        consultasService.actualizarConsulta(consultaVO,sc);      } catch (      ConsultaActionNotAllowedException canae) {        errors=ExceptionMapper.getErrorsExcepcion(request,canae);      }      if (errors.isEmpty()) {        setReturnActionFordward(request,verConsultaBeforeCreate(consultaVO.getId()));      } else {        goForwardConsulta(mapping,frm,request);      }    }  } catch (  Exception e) {    errors.add(common.Constants.ERROR_GENERAL_MESSAGE,new ActionError(SolicitudesConstants.ERROR_AL_GUARDAR_CONSULTA,e.toString(),request.getLocale()));    ErrorsTag.saveErrors(request,errors);    goForwardConsulta(mapping,frm,request);  }}  }
class C{  public int remove(final String basepath,Date freshdate){  DigestURL uri;  try {    uri=new DigestURL(basepath);  } catch (  final MalformedURLException e) {    return 0;  }  final String host=uri.getHost();  final String collectionQuery=CollectionSchema.host_s.getSolrFieldName() + ":\"" + host+ "\""+ ((freshdate != null && freshdate.before(new Date())) ? (" AND " + CollectionSchema.load_date_dt.getSolrFieldName() + ":[* TO "+ ISO8601Formatter.FORMATTER.format(freshdate)+ "]") : "");  final AtomicInteger count=new AtomicInteger(0);  final BlockingQueue<SolrDocument> docs=Fulltext.this.getDefaultConnector().concurrentDocumentsByQuery(collectionQuery,null,0,1000000,Long.MAX_VALUE,100,1,false,CollectionSchema.id.getSolrFieldName(),CollectionSchema.sku.getSolrFieldName());  try {    Set<String> deleteIDs=new HashSet<String>();    SolrDocument doc;    while ((doc=docs.take()) != AbstractSolrConnector.POISON_DOCUMENT) {      String u=(String)doc.getFieldValue(CollectionSchema.sku.getSolrFieldName());      if (u.startsWith(basepath)) {        deleteIDs.add((String)doc.getFieldValue(CollectionSchema.id.getSolrFieldName()));        count.incrementAndGet();      }    }    remove(deleteIDs);    if (count.get() > 0)     Fulltext.this.commit(true);  } catch (  final InterruptedException e) {  }  return count.get();}  }
class C{  final public void yybegin(int newState){  yy_lexical_state=newState;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.406 -0500",hash_original_method="E7725F54B70B03AB684209C7F7E63A02",hash_generated_method="E7725F54B70B03AB684209C7F7E63A02") ClientHandshakeImpl(Object owner){  super(owner);}  }
class C{  public int splitSegment(Point2D.Double split,float tolerance){  return path.splitSegment(split,tolerance);}  }
class C{  public boolean isPopupMenuItemSelected(){  return popupMenuGroup.getSelection() != null;}  }
class C{  public static ConversationBuilder builder(TelegramBot bot){  return new ConversationBuilder(bot);}  }
class C{  protected SnmpSubRequestHandler(SnmpEngine engine,SnmpIncomingRequest incRequest,SnmpMibAgent agent,SnmpPdu req,boolean nouse){  this(agent,req,nouse);  init(engine,incRequest);}  }
class C{  public static DoubleMatrix jblas_SPDValues(double[][] Areal,double[][] Aimag){  return org.jblas.Singular.SVDValues(new ComplexDoubleMatrix(new DoubleMatrix(Areal),new DoubleMatrix(Aimag)));}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public static void main(String[] args){  Rectangle rectangle1=new Rectangle(4,40);  Rectangle rectangle2=new Rectangle(3.5,35.9);  System.out.println("\n Rectangle 1");  System.out.println("-------------");  System.out.println("Width:     " + rectangle1.width);  System.out.println("Height:    " + rectangle1.height);  System.out.println("Area:      " + rectangle1.getArea());  System.out.println("Perimeter: " + rectangle1.getPerimeter());  System.out.println("\n Rectangle 2");  System.out.println("-------------");  System.out.println("Width:     " + rectangle2.width);  System.out.println("Height:    " + rectangle2.height);  System.out.println("Area:      " + rectangle2.getArea());  System.out.println("Perimeter: " + rectangle2.getPerimeter());}  }
class C{  @Override public void updateSpeedDisplay(final Double d,final boolean notify){  final ISpeedDisplayer speedStatus=WorkbenchHelper.getService(ISpeedDisplayer.class);  if (speedStatus != null) {    WorkbenchHelper.asyncRun(null);  }}  }
class C{  boolean wasCreatedByTX(){  return isOpCreate();}  }
class C{  private void fileOpenedImpl(@NotNull final VirtualFile file,@Nullable final FileEditor fallbackEditor,@Nullable FileEditorProvider fallbackProvider){  ApplicationManager.getApplication().assertIsDispatchThread();  if (VirtualFileManager.getInstance().findFileByUrl(file.getUrl()) == null)   return;  final FileEditorManagerEx editorManager=FileEditorManagerEx.getInstanceEx(myProject);  final Pair<FileEditor[],FileEditorProvider[]> editorsWithProviders=editorManager.getEditorsWithProviders(file);  FileEditor[] editors=editorsWithProviders.getFirst();  FileEditorProvider[] oldProviders=editorsWithProviders.getSecond();  if (editors.length <= 0 && fallbackEditor != null) {    editors=new FileEditor[]{fallbackEditor};  }  if (oldProviders.length <= 0 && fallbackProvider != null) {    oldProviders=new FileEditorProvider[]{fallbackProvider};  }  if (editors.length <= 0) {    LOG.error("No editors for file " + file.getPresentableUrl());  }  FileEditor selectedEditor=editorManager.getSelectedEditor(file);  if (selectedEditor == null) {    selectedEditor=fallbackEditor;  }  LOG.assertTrue(selectedEditor != null);  final int selectedProviderIndex=ArrayUtilRt.find(editors,selectedEditor);  LOG.assertTrue(selectedProviderIndex != -1,"Can't find " + selectedEditor + " among "+ Arrays.asList(editors));  final HistoryEntry entry=getEntry(file);  if (entry != null) {    myEntriesList.remove(entry);    myEntriesList.add(entry);  } else {    final FileEditorState[] states=new FileEditorState[editors.length];    final FileEditorProvider[] providers=new FileEditorProvider[editors.length];    for (int i=states.length - 1; i >= 0; i--) {      final FileEditorProvider provider=oldProviders[i];      LOG.assertTrue(provider != null);      providers[i]=provider;      states[i]=editors[i].getState(FileEditorStateLevel.FULL);    }    myEntriesList.add(new HistoryEntry(file,providers,states,providers[selectedProviderIndex]));    trimToSize();  }}  }
class C{  public SplittableRandom(){  long s=defaultGen.getAndAdd(2 * GOLDEN_GAMMA);  this.seed=mix64(s);  this.gamma=mixGamma(s + GOLDEN_GAMMA);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void testOptionNoValueJunk() throws Exception {  doTest(true);}  }
class C{  private BillInfoImpl initialiseFromBill(BigDecimal amountPaid,COLLECTIONTYPE collType){  BillInfoImpl billInfoImpl=null;  BillPayeeDetails billPayeeDet=null;  List<BillPayeeDetails> billPayeeDetList=new ArrayList<BillPayeeDetails>();  List<String> collModesList=new ArrayList<String>();  String[] collModes=bill.getCollModesNotAllowed().split(",");  for (  String coll : collModes) {    collModesList.add(coll);  }  billInfoImpl=new BillInfoImpl(bill.getServiceCode(),bill.getFundCode(),bill.getFunctionaryCode(),bill.getFundSourceCode(),bill.getDepartmentCode(),bill.getDisplayMessage(),bill.getCitizenName(),bill.getPartPaymentAllowed(),bill.getOverrideAccountHeadsAllowed(),collModesList,collType);  billPayeeDet=new BillPayeeDetails(bill.getCitizenName(),bill.getCitizenAddress(),bill.getEmailId());  BillDetails billDetails=new BillDetails(bill.getId().toString(),bill.getCreateDate(),bill.getConsumerId(),bill.getBoundaryNum().toString(),bill.getBoundaryType(),bill.getDescription(),amountPaid,bill.getMinAmtPayable());  billPayeeDet.addBillDetails(billDetails);  billPayeeDetList.add(billPayeeDet);  billInfoImpl.setPayees(billPayeeDetList);  return billInfoImpl;}  }
class C{  public int next(){  int node=_currentNode;  if (DTM.NULL != node)   _currentNode=getNextNamespaceNode(_startNode,node,true);  return returnNode(node);}  }
class C{  public DistilledPagePrefsView(Context context,AttributeSet attrs){  super(context,attrs);  mDistilledPagePrefs=DomDistillerServiceFactory.getForProfile(Profile.getLastUsedProfile()).getDistilledPagePrefs();  mFontSizePrefs=FontSizePrefs.getInstance(getContext());  mColorModeButtons=new EnumMap<Theme,RadioButton>(Theme.class);  mPercentageFormatter=NumberFormat.getPercentInstance(Locale.getDefault());}  }
class C{  void jbInit() throws Exception {  label.setText("Label");  Tabs tabs=new Tabs();  tabbox.appendChild(tabs);  Tabpanels tabpanels=new Tabpanels();  tabbox.appendChild(tabpanels);  tabs.appendChild(new Tab(Msg.getMsg(Env.getCtx(),"PriceHistory")));  tabs.appendChild(new Tab(Msg.translate(Env.getCtx(),"QtyReserved")));  tabs.appendChild(new Tab(Msg.translate(Env.getCtx(),"QtyOrdered")));  tabs.appendChild(new Tab(Msg.getMsg(Env.getCtx(),"QtyUnconfirmed")));  if (m_M_Product_ID != 0)   tabs.appendChild(new Tab(Msg.getMsg(Env.getCtx(),"ATP")));  pricePane.setHeight("100%");  pricePane.appendChild(m_tablePrice);  tabpanels.appendChild(pricePane);  reservedPane.setHeight("100%");  reservedPane.appendChild(m_tableReserved);  tabpanels.appendChild(reservedPane);  orderedPane.setHeight("100%");  orderedPane.appendChild(m_tableOrdered);  tabpanels.appendChild(orderedPane);  unconfirmedPane.setHeight("100%");  unconfirmedPane.appendChild(m_tableUnconfirmed);  tabpanels.appendChild(unconfirmedPane);  if (m_M_Product_ID != 0) {    atpPane.setHeight("100%");    atpPane.appendChild(m_tableAtp);    tabpanels.appendChild(atpPane);  }  tabbox.setSelectedIndex(0);  tabbox.addEventListener(Events.ON_SELECT,this);  confirmPanel.addActionListener(this);  Borderlayout borderlayout=new Borderlayout();  borderlayout.setWidth("700px");  borderlayout.setHeight("400px");  borderlayout.setStyle("border: none; position: relative");  this.appendChild(borderlayout);  North north=new North();  north.setStyle("border: none");  borderlayout.appendChild(north);  north.appendChild(label);  Center center=new Center();  center.setStyle("border: none");  center.setAutoscroll(true);  center.setFlex(true);  borderlayout.appendChild(center);  center.appendChild(tabbox);  South south=new South();  south.setStyle("border: none");  borderlayout.appendChild(south);  south.appendChild(confirmPanel);}  }
class C{  public RpfSubframe decompressSubframe(int x,int y,RpfSubframe subframe,RpfColortable colortable,RpfViewAttributes viewAttributes){  boolean isDirectColorModel=(viewAttributes.colorModel == OMRasterObject.COLORMODEL_DIRECT);  if (subframe == null) {    subframe=new RpfSubframe();  }  if (colortable == null) {    colortable=this.colortable;  }  if (!isDirectColorModel) {    if (DEBUG_RPFDETAIL) {      Debug.output("RpfFrame: decompress to byte[]");    }    byte[] pixels=decompressSubframe(x,y);    subframe.setBitsAndColors(pixels,colortable.colors);  } else {    int[] pixels=decompressSubframe(x,y,colortable);    subframe.setPixels(pixels);  }  return subframe;}  }
class C{  public static void createFile(IProject project,String relativePath) throws IOException {  IPath root=getSourceLocation(project);  IPath path=Path.fromOSString(relativePath);  Preconditions.checkArgument(!path.isAbsolute());  PathTestUtil.touch(root.append(path));}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public static IDownloaderService CreateProxy(Messenger msg){  return new Proxy(msg);}  }
class C{  public void train(Reader aReader) throws IOException {  BufferedReader in=new BufferedReader(aReader);  String line=in.readLine();  while (line != null) {    Matcher m=WORD_PATTERN.matcher(line.toLowerCase());    while (m.find()) {      String word=m.group();      AtomicInteger count=nWords.get(word);      if (count == null) {        count=new AtomicInteger(0);        nWords.put(word,count);      }      count.incrementAndGet();    }    line=in.readLine();  }}  }
class C{  public void catchException(final Label start,final Label end,final Type exception){  Label doCatch=new Label();  if (exception == null) {    mv.visitTryCatchBlock(start,end,doCatch,null);  } else {    mv.visitTryCatchBlock(start,end,doCatch,exception.getInternalName());  }  mark(doCatch);}  }
class C{  @Bean(name="kryonet-server",destroyMethod="stop") public Server createServer(){  IExtendedSerialization serialization=new ExtendedSerializationImpl(serializationManagerProvider);  Server server=new Server(serialization,streamProvider);  server.start();  try {    server.bind(port);    log.info("|-Kryonet server successfully started and running on port " + port);  } catch (  IOException e) {    throw new BeanInitializationException("Could not bind the kryonet server to the specified port (" + port + ").",e);  }  return server;}  }
class C{  public Bitmap drawableToBitmap(Drawable drawable){  if (drawable == null)   return null; else   if (drawable instanceof BitmapDrawable) {    Log.i(TAG,"Bitmap drawable!");    return ((BitmapDrawable)drawable).getBitmap();  }  int intrinsicWidth=drawable.getIntrinsicWidth();  int intrinsicHeight=drawable.getIntrinsicHeight();  if (!(intrinsicWidth > 0 && intrinsicHeight > 0))   return null;  try {    Bitmap bitmap=Bitmap.createBitmap(intrinsicWidth,intrinsicHeight,Bitmap.Config.ARGB_8888);    Canvas canvas=new Canvas(bitmap);    drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());    drawable.draw(canvas);    return bitmap;  } catch (  OutOfMemoryError e) {    Log.e(TAG,"Encountered OutOfMemoryError while generating bitmap!");    return null;  }}  }
class C{  public Cookie(final String name,final String value,final String path,final String domain) throws IllegalArgumentException {  this(name,value,path,domain,DEFAULT_VERSION);}  }
class C{  public Request addRequestHeader(String header,String value){  if (header == null) {    throw new NullPointerException("header cannot be null");  }  if (header.contains(":")) {    throw new IllegalArgumentException("header may not contain ':'");  }  if (value == null) {    value="";  }  requestHeaders.add(Pair.create(header,value));  return this;}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  double[] sums=new double[instance.numClasses()], newProbs;  double numPreds=0;  for (int i=0; i < m_NumIterations; i++) {    if (instance.classAttribute().isNumeric() == true) {      double pred=m_Classifiers[i].classifyInstance(instance);      if (!Utils.isMissingValue(pred)) {        sums[0]+=pred;        numPreds++;      }    } else {      newProbs=m_Classifiers[i].distributionForInstance(instance);      for (int j=0; j < newProbs.length; j++)       sums[j]+=newProbs[j];    }  }  if (instance.classAttribute().isNumeric() == true) {    if (numPreds == 0) {      sums[0]=Utils.missingValue();    } else {      sums[0]/=numPreds;    }    return sums;  } else   if (Utils.eq(Utils.sum(sums),0)) {    return sums;  } else {    Utils.normalize(sums);    return sums;  }}  }
class C{  public CarouselImageView(Context context){  this(context,null);}  }
class C{  public CreateSnapshotRequest(String repository,String snapshot){  this.snapshot=snapshot;  this.repository=repository;}  }
class C{  private static boolean addBookLine(String line,List<Byte> binBook) throws ChessParseError {  Position pos=TextIO.readFEN(TextIO.startPosFEN);  UndoInfo ui=new UndoInfo();  String[] strMoves=line.split(" ");  for (  String strMove : strMoves) {    int bad=0;    if (strMove.endsWith("?")) {      strMove=strMove.substring(0,strMove.length() - 1);      bad=1;    }    Move m=TextIO.stringToMove(pos,strMove);    if (m == null) {      return false;    }    int prom=pieceToProm(m.promoteTo);    int val=m.from + (m.to << 6) + (prom << 12)+ (bad << 15);    binBook.add((byte)(val >> 8));    binBook.add((byte)(val & 255));    pos.makeMove(m,ui);  }  binBook.add((byte)0);  binBook.add((byte)0);  return true;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public boolean closeAllSessions(){  while (existsSession()) {    SessionEditor sessionEditor=getFrontmostSessionEditor();    SessionEditorWorkbench workbench=sessionEditor.getSessionWorkbench();    SessionWrapper wrapper=workbench.getSessionWrapper();    if (!wrapper.isSessionChanged()) {      closeFrontmostSession();      continue;    }    String name=sessionEditor.getName();    int ret=JOptionPane.showConfirmDialog(JOptionUtils.centeringComp(),"Would you like to save the changes you made to " + name + "?","Advise needed...",JOptionPane.YES_NO_CANCEL_OPTION);    if (ret == JOptionPane.NO_OPTION) {      closeFrontmostSession();      continue;    } else     if (ret == JOptionPane.CANCEL_OPTION) {      return false;    }    SaveSessionAsAction action=new SaveSessionAsAction();    action.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"Dummy close action"));    if (!action.isSaved()) {      int ret2=JOptionPane.showConfirmDialog(JOptionUtils.centeringComp(),"This session was not saved. Close session and continue anyway?","Advise needed...",JOptionPane.OK_CANCEL_OPTION);      if (ret2 == JOptionPane.CANCEL_OPTION) {        return false;      }    }    closeFrontmostSession();  }  return true;}  }
class C{  public XmlHandler deleteAttributes(Class<?> aClass,String... attributes){  try {    xml.deleteAttributes(aClass,attributes);    xml.write();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == this) {    return true;  }  if (obj == null) {    return false;  }  if (!super.equals(obj)) {    return false;  }  if (ObjectUtils.notEqual(getClass(),obj.getClass())) {    return false;  }  final ExtendedMessageFormat rhs=(ExtendedMessageFormat)obj;  if (ObjectUtils.notEqual(toPattern,rhs.toPattern)) {    return false;  }  if (ObjectUtils.notEqual(registry,rhs.registry)) {    return false;  }  return true;}  }
class C{  public static QueryStorageProcessorsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryStorageProcessorsResponse object=new QueryStorageProcessorsResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryStorageProcessorsResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryStorageProcessorsResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(StorageProcessor.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(StorageProcessor.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((StorageProcessor[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(StorageProcessor.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected <T>Observable.Transformer<T,T> applySchedulers(){  return null;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == DeprecatableElement.class) {switch (derivedFeatureID) {case SGenPackage.FEATURE_TYPE__DEPRECATED:      return SGenPackage.DEPRECATABLE_ELEMENT__DEPRECATED;case SGenPackage.FEATURE_TYPE__COMMENT:    return SGenPackage.DEPRECATABLE_ELEMENT__COMMENT;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private void computeDirectedLabel(){  label=new Label(edge.getLabel());  if (!isForward)   label.flip();}  }
class C{  public static void writeString(OutputStream out,String charset,String value) throws IOException {  writeString(out,Charset.forName(charset),value);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  ReadObjectCallback cb=readObjectCallbacks.get(s);  if (cb == null) {    try {      readObjectCallbacks.put(s,cb=new ReadObjectCallback(s));    } catch (    Exception e) {      throw new IOException(e.toString());    }  }  cb.registerComponent(this);  int cpCount=s.readInt();  if (cpCount > 0) {    clientProperties=new ArrayTable();    for (int counter=0; counter < cpCount; counter++) {      clientProperties.put(s.readObject(),s.readObject());    }  }  if (getToolTipText() != null) {    ToolTipManager.sharedInstance().registerComponent(this);  }  setWriteObjCounter(this,(byte)0);  revalidateRunnableScheduled=new AtomicBoolean(false);}  }
class C{  VPlexStorageVolumeInfo findStorageVolume(String storageVolumeName) throws VPlexApiException {  VPlexStorageVolumeInfo storageVolumeInfo=null;  List<VPlexClusterInfo> clusterInfoList=getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    String clusterName=clusterInfo.getName();    s_logger.info("Find storage volume {} on cluster {}",storageVolumeName,clusterName);    List<VPlexStorageVolumeInfo> storageVolumeInfoList=getStorageVolumeInfoForCluster(clusterName,false);    for (    VPlexStorageVolumeInfo clusterVolumeInfo : storageVolumeInfoList) {      if (clusterVolumeInfo.getName().equals(storageVolumeName)) {        storageVolumeInfo=clusterVolumeInfo;        storageVolumeInfo.setClusterId(clusterName);        break;      }    }    if (storageVolumeInfo != null) {      break;    }  }  return storageVolumeInfo;}  }
class C{  public void clear(){  this.size=0;}  }
class C{  public void checkTrends(){  try {    Network network=getBot().memory().newMemory();    if ((this.lastTrendsCheck == 0) || ((System.currentTimeMillis() - this.lastTrendsCheck) > TREND_CHECK)) {      Vertex twitter=network.createVertex(getPrimitive());      Vertex lastCheck=twitter.getRelationship(Primitive.TREND);      if (lastCheck == null) {        twitter.addRelationship(Primitive.TREND,network.createTimestamp());      } else {        long lastCheckTime=((Timestamp)lastCheck.getData()).getTime();        if ((System.currentTimeMillis() - lastCheckTime) < TREND_CHECK) {          return;        }      }      log("Checking trends",Bot.FINE);      twitter.setRelationship(Primitive.TREND,network.createTimestamp());      this.lastTrendsCheck=System.currentTimeMillis();    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;}  }
class C{  public void addImport(@NotNull PsiElement importable,@NotNull PsiFile file,@Nullable PyImportElement importElement){  myImports.add(new ImportCandidateHolder(importable,file,importElement,null));}  }
class C{  private ArrayList<ChartSet> prepareAnimation(ChartView chartView){  final ArrayList<ChartSet> sets=chartView.getData();  float x=0;  if (mStartXFactor != -1)   x=chartView.getInnerChartLeft() + (chartView.getInnerChartRight() - chartView.getInnerChartLeft()) * mStartXFactor; else   x=chartView.getZeroPosition();  float y=0;  if (mStartYFactor != -1)   y=chartView.getInnerChartBottom() - (chartView.getInnerChartBottom() - chartView.getInnerChartTop()) * mStartYFactor; else   y=chartView.getZeroPosition();  final int nSets=sets.size();  final int nEntries=sets.get(0).size();  ArrayList<float[][]> startValues=new ArrayList<float[][]>(nSets);  ArrayList<float[][]> endValues=new ArrayList<float[][]>(nSets);  float[][] startSet;  float[][] endSet;  for (int i=0; i < nSets; i++) {    startSet=new float[nEntries][2];    endSet=new float[nEntries][2];    for (int j=0; j < nEntries; j++) {      if (mStartXFactor == -1 && chartView.getOrientation() == ChartView.Orientation.VERTICAL)       startSet[j][0]=sets.get(i).getEntry(j).getX(); else       startSet[j][0]=x;      if (mStartYFactor == -1 && chartView.getOrientation() == ChartView.Orientation.HORIZONTAL)       startSet[j][1]=sets.get(i).getEntry(j).getY(); else       startSet[j][1]=y;      endSet[j][0]=sets.get(i).getEntry(j).getX();      endSet[j][1]=sets.get(i).getEntry(j).getY();      ;    }    startValues.add(startSet);    endValues.add(endSet);  }  return prepareAnimation(chartView,startValues,endValues);}  }
class C{  public ServiceInvocation createServiceInvocation(){  ServiceInvocationImpl serviceInvocation=new ServiceInvocationImpl();  return serviceInvocation;}  }
class C{  boolean awaitTermination(long timeout,TimeUnit unit) throws InterruptedException {  return schedulerService.awaitTermination(timeout,unit);}  }
class C{  public void close(){  if (mLeakedException != null) {    getConnectionManager().shutdown();    mLeakedException=null;  }}  }
class C{  public Label(Position position,String text){  if (position == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Label","constructor","missingPosition"));  }  this.position.set(position);  this.text=text;  this.attributes=new TextAttributes();}  }
class C{  public final boolean isAveragable(){  if (m_AttributeMetaInfo == null) {    return true;  }  return m_AttributeMetaInfo.m_IsAveragable;}  }
class C{  public static int align(int index){  return index + 3 & 0xFFFFFFFC;}  }
class C{  public void testImplementationClasses() throws Exception {  String artifactId=System.getProperty("artifactId");  boolean foundWebapp=false;  File target=new File(System.getProperty("target"));  for (  File content : target.listFiles()) {    String name=content.getName();    if (name.startsWith(artifactId)) {      foundWebapp=true;      continue;    }    boolean toBeIgnored=false;    for (    String ignoredFilenamePrefix : IGNORED_FILENAME_PREFIXES) {      if (name.startsWith(ignoredFilenamePrefix)) {        toBeIgnored=true;        break;      }    }    if (!toBeIgnored) {      fail("Found unexpected file: " + content);    }  }  assertTrue("Cannot find " + artifactId,foundWebapp);}  }
class C{  public void removeMembershipListener(MembershipListener listener){  membershipListeners.remove(listener);}  }
class C{  public AttributeSource(AttributeSource input){  Objects.requireNonNull(input,"input AttributeSource must not be null");  this.attributes=input.attributes;  this.attributeImpls=input.attributeImpls;  this.currentState=input.currentState;  this.factory=input.factory;}  }
class C{  public boolean containsKey(double key){  return contains(key);}  }
class C{  public T caseThisArgProvider(ThisArgProvider object){  return null;}  }
class C{  @EventHandler(priority=EventPriority.HIGH) public void onPlayerInitialSpawn(PlayerInitialSpawnEvent event){  Match match=Cardinal.getMatch(event.getPlayer());  event.setSpawnLocation(getDefaultSpawn(match).getSpawnPoint());}  }
class C{  public ImmutableCollection<String> toIds(Collection<WorldGeneratorModifier> modifiers){  final ImmutableList.Builder<String> ids=ImmutableList.builder();  for (  WorldGeneratorModifier modifier : modifiers) {    checkNotNull(modifier,"modifier (in collection)");    final String id=modifier.getId();    checkArgument(this.modifierMappings.containsKey(id.toLowerCase(Locale.ENGLISH)),"unregistered modifier in collection");    ids.add(id);  }  return ids.build();}  }
class C{  CanonicalCookie(String url,String name,String value,String domain,String path,long creation,long expiration,long lastAccess,boolean secure,boolean httpOnly,boolean firstPartyOnly,int priority){  mUrl=url;  mName=name;  mValue=value;  mDomain=domain;  mPath=path;  mCreation=creation;  mExpiration=expiration;  mLastAccess=lastAccess;  mSecure=secure;  mHttpOnly=httpOnly;  mFirstPartyOnly=firstPartyOnly;  mPriority=priority;}  }
class C{  public void updateFoldingStructure(List<Position> positions){  if (annotationModel == null) {    return;  }  Annotation[] annotations=new Annotation[positions.size()];  Map<ProjectionAnnotation,Position> newAnnotations=new HashMap<ProjectionAnnotation,Position>();  for (int i=0; i < positions.size(); i++) {    ProjectionAnnotation annotation=new ProjectionAnnotation();    newAnnotations.put(annotation,positions.get(i));    annotations[i]=annotation;  }  this.annotationModel.modifyAnnotations(oldAnnotations,newAnnotations,null);  oldAnnotations=annotations;}  }
class C{  protected int findOutParameter(String paramName) throws SQLException {  return getAndAssertSingletonResultSet().findColumn(paramName);}  }
class C{  @SuppressWarnings("deprecation") public boolean createBinaryBlockStagingFile(String fnameOld,String stagingDir) throws IOException, DMLRuntimeException {  JobConf job=new JobConf(ConfigurationManager.getCachedJobConf());  Path path=new Path(fnameOld);  FileSystem fs=FileSystem.get(job);  if (!fs.exists(path))   throw new IOException("File " + fnameOld + " does not exist on HDFS.");  MatrixIndexes key=new MatrixIndexes();  MatrixBlock value=new MatrixBlock();  boolean diagBlocks=true;  for (  Path lpath : MatrixReader.getSequenceFilePaths(fs,path)) {    SequenceFile.Reader reader=new SequenceFile.Reader(fs,lpath,job);    try {      while (reader.next(key,value)) {        if (!value.isEmptyBlock()) {          String fname=stagingDir + "/" + key.getRowIndex()+ "_"+ key.getColumnIndex();          LocalFileUtils.writeMatrixBlockToLocal(fname,value);          diagBlocks&=(key.getRowIndex() == key.getColumnIndex());        }      }    }  finally {      if (reader != null)       reader.close();    }  }  return diagBlocks;}  }
class C{  public static void addRequiredProject(IJavaProject jproject,IJavaProject required) throws JavaModelException {  IClasspathEntry cpe=JavaCore.newProjectEntry(required.getProject().getFullPath());  addToClasspath(jproject,cpe);}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length != 1) {    usage("Incorrect argument list.");  }  String url=args[0];  if (url.indexOf("://") == -1) {    File f=new File(url);    if (f.exists()) {      String output=f.getAbsolutePath();      output=output.substring(0,output.lastIndexOf(".")) + ".png";      System.out.println("Saving image to " + output);      renderToImage(f,output,DEFAULT_WIDTH);    } else {      usage("File to render is not found: " + url);    }  } else {    File out=File.createTempFile("fs",".png");    System.out.println("Saving image to " + out.getAbsolutePath());    renderToImage(url,out.getAbsolutePath(),DEFAULT_WIDTH);  }}  }
class C{  private boolean isConnectedToNetwork(){  ConnectivityManager connManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);  NetworkInfo info=connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  return (info != null && info.isConnectedOrConnecting());}  }
class C{  @Override public boolean conditionOk(Example example){  boolean isOk=true;  for (  Attribute attribute : checkedAttributes) {    isOk&=!Double.isNaN(example.getValue(attribute));  }  return isOk;}  }
class C{  public final double variance(int attIndex){  double sum=0, sumSquared=0, sumOfWeights=0;  if (!attribute(attIndex).isNumeric()) {    throw new IllegalArgumentException("Can't compute variance because attribute is " + "not numeric!");  }  for (int i=0; i < numInstances(); i++) {    if (!instance(i).isMissing(attIndex)) {      sum+=instance(i).weight() * instance(i).value(attIndex);      sumSquared+=instance(i).weight() * instance(i).value(attIndex) * instance(i).value(attIndex);      sumOfWeights+=instance(i).weight();    }  }  if (Utils.smOrEq(sumOfWeights,1)) {    return 0;  }  return (sumSquared - (sum * sum / sumOfWeights)) / (sumOfWeights - 1);}  }
class C{  public void testEquals(){  RealmAttribute realmAttribute2=new RealmAttribute();  realmAttribute2.setRealm(realmValue.getBytes());  assertEquals("testequals failed",realmAttribute,realmAttribute2);  realmAttribute2=new RealmAttribute();  realmAttribute2.setRealm("some other realm".getBytes());  assertFalse("testequals failed",realmAttribute.equals(realmAttribute2));  assertFalse("testequals failed",realmAttribute.equals(null));}  }
class C{  public static void expandTriangles(List<Integer> indices,FloatBuffer inBuf,FloatBuffer outBuf){  if (indices == null) {    String msg=Logging.getMessage("nullValue.ListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (inBuf == null || outBuf == null) {    String msg=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  int nunTriangles=indices.size() / 3;  if (nunTriangles * 3 * 3 > outBuf.limit() - outBuf.position()) {    String msg=Logging.getMessage("generic.BufferSize",outBuf.limit() - outBuf.position());    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  for (int i=0; i < indices.size(); i+=3) {    int k=indices.get(i) * 3;    outBuf.put(inBuf.get(k)).put(inBuf.get(k + 1)).put(inBuf.get(k + 2));    k=indices.get(i + 1) * 3;    outBuf.put(inBuf.get(k)).put(inBuf.get(k + 1)).put(inBuf.get(k + 2));    k=indices.get(i + 2) * 3;    outBuf.put(inBuf.get(k)).put(inBuf.get(k + 1)).put(inBuf.get(k + 2));  }}  }
class C{  public void endDocument() throws SAXException {}  }
class C{  public void rotatedCubeVolume(World world,int x,int y,int z,int offsetX,int offsetY,int offsetZ,IBlockState blockState,int sizeWidth,int sizeHeight,int sizeDepth,int rotation){  x-=width / 2;  z-=depth / 2;switch (rotation) {case 0:    for (int yy=y + offsetY; yy < y + offsetY + sizeHeight; yy++)     for (int xx=x + offsetX; xx < x + offsetX + sizeWidth; xx++)     for (int zz=z + offsetZ; zz < z + offsetZ + sizeDepth; zz++)     world.setBlockState(new BlockPos(xx,yy,zz),blockState,2);  break;case 1:for (int yy=y + offsetY; yy < y + offsetY + sizeHeight; yy++) for (int zz=z + depth - offsetX - 1; zz > z + depth - offsetX - sizeWidth - 1; zz--) for (int xx=x + offsetZ; xx < x + offsetZ + sizeDepth; xx++) world.setBlockState(new BlockPos(xx,yy,zz),blockState,2);break;case 2:for (int yy=y + offsetY; yy < y + offsetY + sizeHeight; yy++) for (int xx=x + width - offsetX - 1; xx > x + width - offsetX - sizeWidth - 1; xx--) for (int zz=z + depth - offsetZ - 1; zz > z + depth - offsetZ - sizeDepth - 1; zz--) world.setBlockState(new BlockPos(xx,yy,zz),blockState,2);break;case 3:for (int yy=y + offsetY; yy < y + offsetY + sizeHeight; yy++) for (int zz=z + offsetX; zz < z + offsetX + sizeWidth; zz++) for (int xx=x + width - offsetZ - 1; xx > x + width - offsetZ - sizeDepth - 1; xx--) world.setBlockState(new BlockPos(xx,yy,zz),blockState,2);break;}}  }
class C{  public Vector3f divideLocal(float scalar){  scalar=1f / scalar;  x*=scalar;  y*=scalar;  z*=scalar;  return this;}  }
class C{  public boolean enableBluetooth(boolean enable){  if (enable) {    if (!mBluetoothAdapter.isEnabled()) {      mBluetoothAdapter.enable();    }    return true;  } else {    if (mBluetoothAdapter.isEnabled()) {      mBluetoothAdapter.disable();    }    return false;  }}  }
class C{  @Override public boolean supportsCatalogsInPrivilegeDefinitions(){  debugCodeCall("supportsCatalogsInPrivilegeDefinitions");  return true;}  }
class C{  public synchronized void releaseCommitPoint(Long indexCommitGen){  AtomicInteger reserveCount=savedCommits.get(indexCommitGen);  if (reserveCount == null)   return;  if (reserveCount.decrementAndGet() <= 0) {    savedCommits.remove(indexCommitGen);  }}  }
class C{  @Override protected boolean isBuildInvocation(MethodCallExpression call){  if (call == null)   throw new IllegalArgumentException("Null: call");  if (call.getMethod() instanceof ConstantExpression && "buildFromCode".equals(((ConstantExpression)call.getMethod()).getValue())) {    if (call.getObjectExpression() != null && call.getObjectExpression().getType() != null) {      String name=call.getObjectExpression().getType().getName();      if (name != null && !"".equals(name) && factoryTargets.contains(name)) {        if (call.getArguments() != null && call.getArguments() instanceof TupleExpression) {          if (((TupleExpression)call.getArguments()).getExpressions() != null) {            for (            ASTNode node : ((TupleExpression)call.getArguments()).getExpressions()) {              if (node instanceof ClosureExpression) {                return true;              }            }          }        }      }    }  }  return false;}  }
class C{  public <T>void initializeEntity(T entity){  if (entity != null) {    @SuppressWarnings("unchecked") Initializer<T> initializer=getEntityBinding(entity.getClass()).getInitializer();    if (initializer != null) {      initializer.initialize(entity);    }  }}  }
class C{  @Override public void snmpV2Trap(SnmpPeer peer,SnmpOid trapOid,SnmpVarBindList varBindList,SnmpTimeticks time) throws IOException, SnmpStatusException {  SnmpParameters p=(SnmpParameters)peer.getParams();  snmpV2Trap(peer.getDestAddr(),peer.getDestPort(),p.getRdCommunity(),trapOid,varBindList,time);}  }
class C{  public void dragExit(DragSourceEvent dse){  ((DragSourceListener)a).dragExit(dse);  ((DragSourceListener)b).dragExit(dse);}  }
class C{  public NTRUSigningKeyGenerationParameters(InputStream is) throws IOException {  super(new SecureRandom(),0);  DataInputStream dis=new DataInputStream(is);  N=dis.readInt();  q=dis.readInt();  d=dis.readInt();  d1=dis.readInt();  d2=dis.readInt();  d3=dis.readInt();  B=dis.readInt();  basisType=dis.readInt();  beta=dis.readDouble();  normBound=dis.readDouble();  keyNormBound=dis.readDouble();  signFailTolerance=dis.readInt();  primeCheck=dis.readBoolean();  sparse=dis.readBoolean();  bitsF=dis.readInt();  keyGenAlg=dis.read();  String alg=dis.readUTF();  if ("SHA-512".equals(alg)) {    hashAlg=new SHA512Digest();  } else   if ("SHA-256".equals(alg)) {    hashAlg=new SHA256Digest();  }  polyType=dis.read();  init();}  }
class C{  private void notifyMembersForAlertDefinitionChange(StatAlertDefinition alertDef){  if (logger.isDebugEnabled()) {    logger.debug("Entered AdminDistributedSystemJmxImpl.notifyMembersForAlertDefinitionChange(StatAlertDefinition) *****");  }  GfManagerAgent agent=getGfManagerAgent();  StatAlertDefinition[] alertDefs=new StatAlertDefinition[]{alertDef};  ApplicationVM[] VMs=agent.listApplications();  for (int i=0; i < VMs.length; i++) {    VMs[i].updateAlertDefinitions(alertDefs,UpdateAlertDefinitionMessage.UPDATE_ALERT_DEFINITION);  }  if (logger.isDebugEnabled()) {    logger.debug("Exiting AdminDistributedSystemJmxImpl.notifyMembersForAlertDefinitionChange(StatAlertDefinition) " + VMs.length + " members notified.*****");  }}  }
class C{  private void moveUpperThumb(){  int thumbMiddle=0;switch (slider.getOrientation()) {case JSlider.VERTICAL:    int halfThumbHeight=thumbRect.height / 2;  int thumbTop=currentMouseY - offset;int trackTop=trackRect.y;int trackBottom=trackRect.y + (trackRect.height - 1);int vMin=yPositionForValue(slider.getValue());if (drawInverted()) {trackTop=vMin;} else {trackBottom=vMin;}thumbTop=Math.max(thumbTop,trackTop - halfThumbHeight);thumbTop=Math.min(thumbTop,trackBottom - halfThumbHeight);setUpperThumbLocation(thumbRect.x,thumbTop);thumbMiddle=thumbTop + halfThumbHeight;slider.setExtent(valueForYPosition(thumbMiddle) - slider.getValue());break;case JSlider.HORIZONTAL:int halfThumbWidth=thumbRect.width / 2;int thumbLeft=currentMouseX - offset;int trackLeft=trackRect.x;int trackRight=trackRect.x + (trackRect.width - 1);int hMin=xPositionForValue(slider.getValue());if (drawInverted()) {trackRight=hMin;} else {trackLeft=hMin;}thumbLeft=Math.max(thumbLeft,trackLeft - halfThumbWidth);thumbLeft=Math.min(thumbLeft,trackRight - halfThumbWidth);setUpperThumbLocation(thumbLeft,thumbRect.y);thumbMiddle=thumbLeft + halfThumbWidth;slider.setExtent(valueForXPosition(thumbMiddle) - slider.getValue());break;default :return;}}  }
class C{  public double eval(double params[]){  return (Math.log(params[0]));}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  public static void logBookmarkAdded(String url,String where){  EventLog.writeEvent(BROWSER_BOOKMARK_ADDED,url + "|" + where);}  }
class C{  public void convert(final String tmxFile) throws Exception {  final File file=new File(tmxFile);  final String filename=file.getAbsolutePath();  final Map map=new TMXMapReader().readMap(filename);  removeUnusedTilesets(map);  removeUnusedLayers(map);  new TMXMapWriter().writeMap(map,filename);}  }
class C{  private void xsampleNextElements(BooleanArrayList acceptList){  int length=acceptList.size();  boolean[] accept=acceptList.elements();  for (int i=0; i < length; i++) {    if (skip > 0) {      skip--;      accept[i]=false;      continue;    }    if (nextTriggerPos == UNDEFINED) {      if (weight == 1)       nextTriggerPos=0; else       nextTriggerPos=generator.nextIntFromTo(0,weight - 1);      nextSkip=weight - 1 - nextTriggerPos;    }    if (nextTriggerPos > 0) {      nextTriggerPos--;      accept[i]=false;      continue;    }    nextTriggerPos=UNDEFINED;    skip=nextSkip;    accept[i]=true;  }}  }
class C{  public void notifyHorizontalEdgeReached(int startX,int finalX,int overX){  mScrollerX.notifyEdgeReached(startX,finalX,overX);}  }
class C{  public VEGA(Problem problem,Population population,NondominatedPopulation archive,Initialization initialization,Variation variation){  super(problem,population,archive,initialization);  this.variation=variation;  selection=new VEGASelection();}  }
class C{  public static byte duplicate(byte _byte){  return _byte;}  }
class C{  @Interruptible public static void init(SortTODSharedDeque worklist_,SortTODSharedDeque trace_){  if (MERLIN_ANALYSIS) {    workListPool=worklist_;    worklist=new SortTODObjectReferenceStack(workListPool);  }  tracePool=trace_;  trace=new TraceBuffer(tracePool);  objectLinks=ObjectReferenceArray.create(HeapParameters.MAX_SPACES);}  }
class C{  public String userName(){  return usrName;}  }
class C{  public void visitEnd(){}  }
class C{  private Object[] popArray() throws PDFParseException {  Object obj=stack.pop();  if (!(obj instanceof Object[])) {    throw new PDFParseException("Expected an [array] here: " + obj.toString());  }  return (Object[])obj;}  }
class C{  public static boolean contains(String ref,String substring,boolean ignoreCase){  if (ignoreCase)   return StringUtils.containsIgnoreCase(ref,substring);  return StringUtils.contains(ref,substring);}  }
class C{  public static String escape(String s){  if (s == null) {    return null;  }  StringBuffer sb=new StringBuffer();  escape(s,sb);  return sb.toString();}  }
class C{  public URLConnection openConnection(URL url) throws IOException {  return openConnection(url,null);}  }
class C{  public String base64Url(){  return Base64.encodeUrl(data);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  protected static void processCRLB1(DistributionPoint dp,Object cert,X509CRL crl) throws AnnotatedException {  ASN1Primitive idp=CertPathValidatorUtilities.getExtensionValue(crl,ISSUING_DISTRIBUTION_POINT);  boolean isIndirect=false;  if (idp != null) {    if (IssuingDistributionPoint.getInstance(idp).isIndirectCRL()) {      isIndirect=true;    }  }  byte[] issuerBytes=CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded();  boolean matchIssuer=false;  if (dp.getCRLIssuer() != null) {    GeneralName genNames[]=dp.getCRLIssuer().getNames();    for (int j=0; j < genNames.length; j++) {      if (genNames[j].getTagNo() == GeneralName.directoryName) {        try {          if (Arrays.areEqual(genNames[j].getName().toASN1Primitive().getEncoded(),issuerBytes)) {            matchIssuer=true;          }        } catch (        IOException e) {          throw new AnnotatedException("CRL issuer information from distribution point cannot be decoded.",e);        }      }    }    if (matchIssuer && !isIndirect) {      throw new AnnotatedException("Distribution point contains cRLIssuer field but CRL is not indirect.");    }    if (!matchIssuer) {      throw new AnnotatedException("CRL issuer of CRL does not match CRL issuer of distribution point.");    }  } else {    if (CertPathValidatorUtilities.getIssuerPrincipal(crl).equals(CertPathValidatorUtilities.getEncodedIssuerPrincipal(cert))) {      matchIssuer=true;    }  }  if (!matchIssuer) {    throw new AnnotatedException("Cannot find matching CRL issuer for certificate.");  }}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public boolean logout() throws LoginException {  if (debug) {    System.out.println("\t\t[SolarisLoginModule]: " + "Entering logout");  }  if (subject.isReadOnly()) {    throw new LoginException("Subject is Readonly");  }  subject.getPrincipals().remove(userPrincipal);  subject.getPrincipals().remove(UIDPrincipal);  subject.getPrincipals().remove(GIDPrincipal);  for (int i=0; i < supplementaryGroups.size(); i++) {    subject.getPrincipals().remove(supplementaryGroups.get(i));  }  ss=null;  succeeded=false;  commitSucceeded=false;  userPrincipal=null;  UIDPrincipal=null;  GIDPrincipal=null;  supplementaryGroups=new LinkedList<SolarisNumericGroupPrincipal>();  if (debug) {    System.out.println("\t\t[SolarisLoginModule]: " + "logged out Subject");  }  return true;}  }
class C{  public static byte[] sha256hash160(byte[] input){  try {    byte[] sha256=MessageDigest.getInstance("SHA-256").digest(input);    RIPEMD160Digest digest=new RIPEMD160Digest();    digest.update(sha256,0,sha256.length);    byte[] out=new byte[20];    digest.doFinal(out,0);    return out;  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  public void performMouseClicked(java.awt.event.MouseEvent e){  if (e.isMetaDown() || e.isAltDown()) {    return;  }  if (getSignalMast() == null) {    log.error("No turnout connection, can't process click");    return;  }switch (clickMode) {case 0:    java.util.Vector<String> aspects=getSignalMast().getValidAspects();  int idx=aspects.indexOf(getSignalMast().getAspect()) + 1;if (idx >= aspects.size()) {  idx=0;}getSignalMast().setAspect(aspects.elementAt(idx));return;case 1:getSignalMast().setLit(!getSignalMast().getLit());return;case 2:getSignalMast().setHeld(!getSignalMast().getHeld());return;default :log.error("Click in mode " + clickMode);}}  }
class C{  public static final void writeByteArrayXml(byte[] val,String name,XmlSerializer out) throws XmlPullParserException, IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"byte-array");  if (name != null) {    out.attribute(null,"name",name);  }  final int N=val.length;  out.attribute(null,"num",Integer.toString(N));  StringBuilder sb=new StringBuilder(val.length * 2);  for (int i=0; i < N; i++) {    int b=val[i];    int h=b >> 4;    sb.append(h >= 10 ? ('a' + h - 10) : ('0' + h));    h=b & 0xff;    sb.append(h >= 10 ? ('a' + h - 10) : ('0' + h));  }  out.text(sb.toString());  out.endTag(null,"byte-array");}  }
class C{  public boolean isDownload(){  return myDownload;}  }
class C{  public void generateCode(BlockScope currentScope,boolean valueRequired){  this.receiver.generateCode(currentScope,true);  if (this.receiver instanceof CastExpression && ((CastExpression)this.receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL) {  }  this.position.generateCode(currentScope,true);}  }
class C{  private boolean fontChanged(){  String currentSetting=WtWindowManager.getInstance().getProperty(FONT_PROPERTY,DEFAULT_FONT);  return !currentSetting.equals(DEFAULT_FONT);}  }
class C{  public void serialize(T data){  ObjectOutputStream oos=null;  try {    File file=new File(fileName);    if (file.exists()) {      if (!overWrite) {        throw new IllegalStateException("Attempting to serialize to a file at path " + fileName + ", however the file already exists and the 'overWrite' flag has been set to false.");      }      if (!file.isFile()) {        throw new IllegalStateException("Attempting to serialize to a file at path " + fileName + ", however the file already exists and is not a 'normal' file (it may be a directory).");      }    }    oos=(compressedUsingGzip) ? new ObjectOutputStream(new BufferedOutputStream(new GZIPOutputStream(new FileOutputStream(file)))) : new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(file)));    oos.writeObject(data);    oos.flush();  } catch (  FileNotFoundException e) {    throw new IllegalStateException("A FileNotFoundException has been thrown when attempting to serialize out an object to path " + fileName);  }catch (  IOException e) {    throw new IllegalStateException("An IOException occurred when attempting to serialized an object.",e);  } finally {    if (oos != null) {      try {        oos.close();      } catch (      IOException e) {        throw new IllegalStateException("Unable to close the handle on the ObjectOutputStream.");      }    }  }}  }
class C{  public boolean containsInteger(int value){  for (int i=1; i < maxPoolSize; i++) {    if (types[i] == INTEGER && readInteger(i) == value)     return true;  }  return false;}  }
class C{  protected Suite(Class<?> klass,Class<?>[] suiteClasses) throws InitializationError {  this(new AllDefaultPossibilitiesBuilder(true),klass,suiteClasses);}  }
class C{  public NanoSampler addProbe(String name){  return additionHistograms.computeIfAbsent(name,null);}  }
class C{  private void addReorderNotAllowed(final IBindingSet[] e){synchronized (this) {    if (chunkSize + e.length > maxChunkSize) {      outputBufferedChunk();      if (e.length > minChunkSize) {        outputChunk(e);        return;      }    }    if (smallChunks == null)     smallChunks=new LinkedList<IBindingSet[]>();    smallChunks.add(e);    chunkSize+=e.length;  }}  }
class C{  private byte[] maskGeneratorFunction1(byte[] Z,int zOff,int zLen,int length){  byte[] mask=new byte[length];  byte[] hashBuf=new byte[mgf1Hash.getDigestSize()];  byte[] C=new byte[4];  int counter=0;  mgf1Hash.reset();  while (counter < (length / hashBuf.length)) {    ItoOSP(counter,C);    mgf1Hash.update(Z,zOff,zLen);    mgf1Hash.update(C,0,C.length);    mgf1Hash.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * hashBuf.length,hashBuf.length);    counter++;  }  if ((counter * hashBuf.length) < length) {    ItoOSP(counter,C);    mgf1Hash.update(Z,zOff,zLen);    mgf1Hash.update(C,0,C.length);    mgf1Hash.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * hashBuf.length,mask.length - (counter * hashBuf.length));  }  return mask;}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  double v=-this.score.localScoreDiff(variables.indexOf(x),variables.indexOf(y),varIndices(z));  this.bump=v;  return v > 0;}  }
class C{  private static boolean isInLineSection(TaggedLineString line,int[] sectionIndex,TaggedLineSegment seg){  if (seg.getParent() != line.getParent())   return false;  int segIndex=seg.getIndex();  if (segIndex >= sectionIndex[0] && segIndex < sectionIndex[1])   return true;  return false;}  }
class C{  public static void writeIntList(IonWriter writer,short[] values) throws IOException {  if (writer instanceof PrivateListWriter) {    ((PrivateListWriter)writer).writeIntList(values);    return;  }  writer.stepIn(IonType.LIST);  for (int ii=0; ii < values.length; ii++) {    writer.writeInt(values[ii]);  }  writer.stepOut();}  }
class C{  public boolean contains(Object o){  if (!(o instanceof Map.Entry))   return false;  return c.contains(new UnmodifiableEntry<>((Map.Entry<?,?>)o));}  }
class C{  public boolean equals(LiveExprNode exp){  if (exp instanceof LNDisj) {    LNDisj exp2=(LNDisj)exp;    if (getCount() != exp2.getCount()) {      return false;    }    for (int i=0; i < getCount(); i++) {      if (!getBody(i).equals(exp2.getBody(i))) {        return false;      }    }    return true;  }  return false;}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.COMPOSED_CONTENT__OWNER:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetOwner((Composite)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public CeilingDistance(){  super();}  }
class C{  public void testFailedOnInvalidTimeSequence(){  checkFail("{t'13:15:08'}");  checkFail("{t 13:15:08'}");  checkFail("{t '13:15:08}");  checkFail("{t '13 15:08'}");  checkFail("{t '3:15:08'}");  checkFail("select {t '13:15:08' from table;");  checkFail("select {}t '13:15:08'} from table;");}  }
class C{  @BindingAdapter({"onClick","category"}) public static void bindOnCategoryClicked(View view,final CategoryClickListener categoryClickListener,final Category category){  view.setOnClickListener(null);}  }
class C{  @Override public int analyseProtocol(){  logging.log(getClass(),"\nAnalyse: " + getProtocol() + " with ID: "+ getToken(),Logging.DEBUG);  ArrayList<SSOProtocol> last_protocolflow=SSOProtocol.getLastProtocolFlow();  if (last_protocolflow != null) {    double listsize=(double)last_protocolflow.size();    double protocol=0;    double token=0;    double traffic=0;    for (    SSOProtocol sso : last_protocolflow) {      if (sso.getProtocol().substring(0,5).equals(this.getProtocol().substring(0,5))) {        logging.log(getClass(),sso.getProtocol(),Logging.DEBUG);        protocol++;      }      if (sso.getToken().equals(this.getToken())) {        logging.log(getClass(),sso.getToken(),Logging.DEBUG);        token++;      }      String returnTo=findReturnTo(sso.getMessage());      if (returnTo != null) {        if (return_to.equals(returnTo)) {          logging.log(getClass(),returnTo,Logging.DEBUG);          traffic++;        }      }    }    if (listsize >= 0) {      double prob=((protocol / listsize) + (token / listsize) + (traffic / listsize)) / 3;      logging.log(getClass(),"Probability: " + prob,Logging.DEBUG);      if (prob >= 0.7) {        return getIDOfLastList();      }    }  }  return newProtocolflowID();}  }
class C{  public final SimpleRequestHandlerFactory addHandler(final RequestHandler handler){  notNull(handler);  this.handlers.add(handler);  return this;}  }
class C{  public void fillRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling round rect: " + new Rectangle(x,y,width,height)+ " arcWidth: "+ arcWidth+ " archHeight: "+ arcHeight);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fillRoundRect(x,y,width,height,arcWidth,arcHeight);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fillRoundRect(x,y,width,height,arcWidth,arcHeight);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fillRoundRect(x,y,width,height,arcWidth,arcHeight);}  }
class C{  @Override @JsonIgnore public boolean isLocked(){  return locked;}  }
class C{  Entity ce(){  return clientgui.getClient().getGame().getEntity(cen);}  }
class C{  public String refreshSession(String nativeId){  String gemfireId=getGemfireSessionIdFromNativeId(nativeId);  if (gemfireId == null) {    return null;  }  GemfireHttpSession session=(GemfireHttpSession)sessionCache.getOperatingRegion().get(gemfireId);  if (session.isValid()) {  }  return null;}  }
class C{  public JarLoader(){}  }
class C{  private MAttributeInstance importProductASI(X_I_Product_ASI ip_asi) throws SQLException {  MProduct product=(MProduct)ip_asi.getM_Product();  MAttributeSet attributeSet=null;  if (ip_asi.getM_AttributeSet_ID() <= 0) {    attributeSet=getAttributeSet(ip_asi);    product.setM_AttributeSet_ID(attributeSet.get_ID());    product.saveEx();    ip_asi.setM_AttributeSet_ID(attributeSet.getM_AttributeSet_ID());    ip_asi.saveEx();  } else {    attributeSet=(MAttributeSet)product.getM_AttributeSet();  }  MAttribute attribute=null;  if (ip_asi.getM_Attribute_ID() <= 0) {    attribute=getAttribute(ip_asi);    ip_asi.setM_Attribute_ID(attribute.getM_Attribute_ID());    ip_asi.saveEx();  } else   attribute=(MAttribute)ip_asi.getM_Attribute();  checkAttributeUse(attributeSet,attribute);  MAttributeSetInstance asi=(MAttributeSetInstance)product.getM_AttributeSetInstance();  if (asi == null || asi.get_ID() <= 0) {    asi=getAttributeSetInstance(product,attributeSet);    product.setM_AttributeSetInstance_ID(asi.get_ID());    product.saveEx();    ip_asi.setM_AttributeSetInstance_ID(asi.getM_AttributeSetInstance_ID());    ip_asi.saveEx();  }  MAttributeInstance ai=addAttributeLine(asi,attribute,ip_asi);  ip_asi.saveEx();  commitEx();  return ai;}  }
class C{  public void stopDownloadingThumbnails(){  for (int i=0; i < getCount(); i++) {    getItem(i).cancelThumbnailDownload();  }}  }
class C{  public SVMExamples(com.rapidminer.example.ExampleSet exampleSet,Attribute labelAttribute,Map<Integer,MeanVariance> meanVariances){  this(exampleSet.size(),0.0d);  this.meanVarianceMap=meanVariances;  Iterator<com.rapidminer.example.Example> reader=exampleSet.iterator();  Attribute idAttribute=exampleSet.getAttributes().getId();  int exampleCounter=0;  while (reader.hasNext()) {    com.rapidminer.example.Example current=reader.next();    Map<Integer,Double> attributeMap=new LinkedHashMap<Integer,Double>();    int a=0;    for (    Attribute attribute : exampleSet.getAttributes()) {      double value=current.getValue(attribute);      if (!com.rapidminer.example.Tools.isDefault(attribute.getDefault(),value)) {        attributeMap.put(a,value);      }      if ((a + 1) > dim) {        dim=(a + 1);      }      a++;    }    atts[exampleCounter]=new double[attributeMap.size()];    index[exampleCounter]=new int[attributeMap.size()];    Iterator<Map.Entry<Integer,Double>> i=attributeMap.entrySet().iterator();    int attributeCounter=0;    while (i.hasNext()) {      Map.Entry<Integer,Double> e=i.next();      Integer indexValue=e.getKey();      Double attributeValue=e.getValue();      index[exampleCounter][attributeCounter]=indexValue.intValue();      double value=attributeValue.doubleValue();      MeanVariance meanVariance=meanVarianceMap.get(indexValue);      if (meanVariance != null) {        if (meanVariance.getVariance() == 0.0d) {          value=0.0d;        } else {          value=(value - meanVariance.getMean()) / Math.sqrt(meanVariance.getVariance());        }      }      atts[exampleCounter][attributeCounter]=value;      attributeCounter++;    }    if (labelAttribute != null) {      double label=current.getValue(labelAttribute);      if (labelAttribute.isNominal()) {        ys[exampleCounter]=(label == labelAttribute.getMapping().getPositiveIndex() ? 1 : -1);      } else {        ys[exampleCounter]=label;      }    }    if (idAttribute != null) {      ids[exampleCounter]=current.getValueAsString(idAttribute);    }    exampleCounter++;  }}  }
class C{  public View(final ViewContainer container,final INaviView view,final TagManager nodeTagManager,final TagManager viewTagManager){  viewContainer=Preconditions.checkNotNull(container,"Error: Container argument can not be null");  naviView=Preconditions.checkNotNull(view,"Error: View argument can't be null");  this.nodeTagManager=Preconditions.checkNotNull(nodeTagManager,"Error: Node tag manager argument can't be null");  this.viewTagManager=Preconditions.checkNotNull(viewTagManager,"Error: View tag manager argument can't be null");  for (  final CTag tag : view.getConfiguration().getViewTags()) {    viewTags.add(viewTagManager.getTag(tag));  }  if (view.isLoaded()) {    convertData();  }  view.addListener(viewListener);}  }
class C{  public boolean isReversal(){  Object oo=get_Value(COLUMNNAME_IsReversal);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void assertAlmostEquals(String message,double expected,double actual,int decimals){  assertAlmostEquals(message,new Double(expected),new Double(actual),decimals);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  getDescription(sb,0);  return sb.toString();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== EssenceContainerData ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(String.format("linked_package_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.linked_package_uid[0],this.linked_package_uid[1],this.linked_package_uid[2],this.linked_package_uid[3],this.linked_package_uid[4],this.linked_package_uid[5],this.linked_package_uid[6],this.linked_package_uid[7],this.linked_package_uid[8],this.linked_package_uid[9],this.linked_package_uid[10],this.linked_package_uid[11],this.linked_package_uid[12],this.linked_package_uid[13],this.linked_package_uid[14],this.linked_package_uid[15],this.linked_package_uid[16],this.linked_package_uid[17],this.linked_package_uid[18],this.linked_package_uid[19],this.linked_package_uid[20],this.linked_package_uid[21],this.linked_package_uid[22],this.linked_package_uid[23],this.linked_package_uid[24],this.linked_package_uid[25],this.linked_package_uid[26],this.linked_package_uid[27],this.linked_package_uid[28],this.linked_package_uid[29],this.linked_package_uid[30],this.linked_package_uid[31]));  sb.append(String.format("index_sid = 0x%x(%d)%n",this.index_sid,this.index_sid));  sb.append(String.format("body_sid = 0x%x(%d)%n",this.body_sid,this.body_sid));  return sb.toString();}  }
class C{  public void addCheckingPath(TreePath path){  this.checkingMode.checkPath(path);  TreeCheckingEvent event=new TreeCheckingEvent(path);  fireValueChanged(event);}  }
class C{  public StrBuilder append(float value){  return append(String.valueOf(value));}  }
class C{  public boolean isFitLegend(){  return mFitLegend;}  }
class C{  public EigenvalueDecomposition(Matrix Arg){  double[][] A=Arg.getArray();  n=Arg.getColumnDimension();  V=new double[n][n];  d=new double[n];  e=new double[n];  issymmetric=true;  for (int j=0; (j < n) & issymmetric; j++) {    for (int i=0; (i < n) & issymmetric; i++) {      issymmetric=(A[i][j] == A[j][i]);    }  }  if (issymmetric) {    for (int i=0; i < n; i++) {      for (int j=0; j < n; j++) {        V[i][j]=A[i][j];      }    }    tred2();    tql2();  } else {    H=new double[n][n];    ort=new double[n];    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        H[i][j]=A[i][j];      }    }    orthes();    hqr2();  }}  }
class C{  public static String elementToHandle(final String project,final IJavaElement element){  final String handle=element.getHandleIdentifier();  if (project != null && !(element instanceof IJavaProject)) {    IJavaProject javaProject=element.getJavaProject();    if (project.equals(javaProject.getElementName())) {      final String id=javaProject.getHandleIdentifier();      return handle.substring(id.length());    }  }  return handle;}  }
class C{  public String authenticate(){  String postOutput=null;  try {    URL url=new URL(AUTHENTICATION_URL);    postOutput=makeLoginRequest(url);  } catch (  IOException e) {    System.out.println("Could not connect to authentication server: " + e.toString());    System.exit(1);  }  StringTokenizer tokenizer=new StringTokenizer(postOutput,"=\n ");  String token=null;  while (tokenizer.hasMoreElements()) {    if (tokenizer.nextToken().equals("Auth")) {      if (tokenizer.hasMoreElements()) {        token=tokenizer.nextToken();      }      break;    }  }  if (token == null) {    System.out.println("Authentication error. Response from server:\n" + postOutput);    System.exit(1);  }  return token;}  }
class C{  public ZyGraphHierarchicalSettings(final ZyGraphHierarchicalSettings settings){  m_type=null;  m_style=settings.getStyle();  m_minimumEdgeDistance=settings.getMinimumEdgeDistance();  m_minimumLayerDistance=settings.getMinimumLayerDistance();  m_minimumNodeDistance=settings.getMinimumNodeDistance();  m_minimumNodeEdgeDistance=settings.getMinimumNodeEdgeDistance();  m_orientation=settings.getOrientation();}  }
class C{  private void readTree(String classPath,DependenciesListener builder,ProgressListener progress) throws IOException {  String treePrefix=new File(classPath).getParent();  ClassFileReader reader=new ClassFileReader(analysisStats);  TreeLoader loader=new ClassTreeLoader(treePrefix,builder,reader,progress);  loader.analyzeTree(classPath);}  }
class C{  public TOMMessage recreateTOMMessage(byte[] content){  TOMMessage ret=new TOMMessage(sender,session,sequence,operationId,content,viewID,type);  ret.setReplyServer(replyServer);  ret.serializedMessageSignature=signature;  ret.serializedMessage=TOMMessage.messageToBytes(ret);  return ret;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int cols, rows, col, row, a, numImages, loopNum, progress;  double noData;  String inputFilesString;  String[] imageFiles;  String[] shortNames;  double[] imageTotals;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    imageTotals=new double[numImages];    shortNames=new String[numImages];    double[] data;    loopNum=0;    for (a=0; a < numImages; a++) {      loopNum++;      updateProgress("Loop " + loopNum + " of "+ numImages+ ":",0);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);      }      image.close();    }    String retstr;    DecimalFormat df=new DecimalFormat("###,###,###,###.0000");    retstr="Number of Grid Cells:\n\n";    for (a=0; a < numImages; a++) {      retstr+=shortNames[a] + ":\t" + df.format(imageTotals[a])+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void saveDebugReport(String[] aReport){  try {    FileOutputStream theFile=mAct.openFileOutput(EXCEPTION_REPORT_FILENAME,Context.MODE_PRIVATE);    theFile.write(aReport[0].getBytes());    theFile.close();    setReportHasBeenSent(aReport[1]);  } catch (  IOException ioe) {  }}  }
class C{  public DefUseCoverageTestFitness(Definition def,Use use,DefUsePairType type){  if (def == null)   throw new IllegalArgumentException("null given for definition. type: " + type.toString());  if (use == null)   throw new IllegalArgumentException("null given for use. def was " + def.toString() + ". type: "+ type.toString());  initRegularDefUse(def,use,type);}  }
class C{  private static boolean isValidBukkitNetherOrEnd(Path worldContainer,Path oldWorldPath){  return oldWorldPath.getFileName().toString().startsWith(worldContainer.getFileName().toString()) && (oldWorldPath.getFileName().toString().endsWith("_nether") || oldWorldPath.getFileName().toString().endsWith("_the_end"));}  }
class C{  private void checkPermission(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){  if (object != null) {    if (object instanceof Collection) {      Collection<?> collection=(Collection<?>)object;      for (      Object element : collection) {        checkPermission(element,permissions,accessDeniedExceptions);      }    } else     if (object instanceof String) {      try {        checkPermission((String)object,permissions);      } catch (      AccessDeniedException accessDeniedException) {        accessDeniedExceptions.add(accessDeniedException);      }    } else {      throw new IllegalStateException(String.format("Object must be of type %s or %s. Actual object.class = %s",String.class,Collection.class,object.getClass()));    }  }}  }
class C{  public Cell fetchCell(String key){  if (cell_dictionary.containsKey(key))   return (Cell)cell_dictionary.get(key); else {    Cell c=new Cell();    c.official_name=key;    cell_dictionary.put(key,c);    return c;  }}  }
class C{  public boolean isFinal(){  return this.isDeclaredFinal();}  }
class C{  public ConditionDependencyAnalyzer(PlanNode node){  upstreamTables=new HashSet<>();  state=State.GATHER;  node.accept(this);}  }
class C{  public static double parsimonyFitness(GEPIndividual ind,double fitness){  return parsimonyFitness(ind,fitness,PARSIMONY_PRESSURE_FACTOR);}  }
class C{  private void init(AbstractStorageDriver driver){  Registry driverRegistry=RegistryImpl.getInstance(_dbClient);  driver.setDriverRegistry(driverRegistry);  LockManager lockManager=LockManagerImpl.getInstance(_locker);  driver.setLockManager(lockManager);  driver.setSdkVersionNumber(StorageDriver.SDK_VERSION_NUMBER);}  }
class C{  public static VisorFileBlock readBlock(File file,long off,int blockSz,long lastModified) throws IOException {  RandomAccessFile raf=null;  try {    long fSz=file.length();    long fLastModified=file.lastModified();    long pos=off >= 0 ? off : Math.max(fSz - blockSz,0);    if (fLastModified == lastModified && fSz != 0 && pos >= fSz)     throw new IOException("Trying to read file block with wrong offset: " + pos + " while file size: "+ fSz);    if (fSz == 0)     return new VisorFileBlock(file.getPath(),pos,fLastModified,0,false,EMPTY_FILE_BUF); else {      int toRead=Math.min(blockSz,(int)(fSz - pos));      byte[] buf=new byte[toRead];      raf=new RandomAccessFile(file,"r");      raf.seek(pos);      int cntRead=raf.read(buf,0,toRead);      if (cntRead != toRead)       throw new IOException("Count of requested and actually read bytes does not match [cntRead=" + cntRead + ", toRead="+ toRead+ ']');      boolean zipped=buf.length > 512;      return new VisorFileBlock(file.getPath(),pos,fSz,fLastModified,zipped,zipped ? zipBytes(buf) : buf);    }  }  finally {    U.close(raf,null);  }}  }
class C{  public FindDialog(Application app){  this((app.getComponent() == null) ? null : (Frame)SwingUtilities.getWindowAncestor(app.getComponent()),false);  this.app=app;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E firstElement(){  if (elementCount > 0) {    return (E)elementData[0];  }  throw new NoSuchElementException();}  }
class C{  public static void write(boolean b){  write(b ? "true" : "false");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected ManagedResource createManagedResource(ManagedResourceRegistration reg) throws SolrException {  ManagedResource res=null;  try {    Constructor<? extends ManagedResource> ctor=reg.implClass.getConstructor(String.class,SolrResourceLoader.class,StorageIO.class);    res=ctor.newInstance(reg.resourceId,loader,storageIO);    res.loadManagedDataAndNotify(reg.observers);  } catch (  Exception e) {    String errMsg=String.format(Locale.ROOT,"Failed to create new ManagedResource %s of type %s due to: %s",reg.resourceId,reg.implClass.getName(),e);    throw new SolrException(ErrorCode.SERVER_ERROR,errMsg,e);  }  return res;}  }
class C{  public Boolean isDvsOperationSupported(){  return dvsOperationSupported;}  }
class C{  public DialChart(CategorySeries dataset,DialRenderer renderer){  super(dataset,renderer);  mRenderer=renderer;}  }
class C{  void resize(int newCapacity){  Entry[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry[] newTable=new Entry[newCapacity];  transfer(newTable);  table=newTable;  threshold=(int)(newCapacity * loadFactor);}  }
class C{  public EcosLocoTableAction(String s){  super(s);}  }
class C{  public void testBug19169() throws Exception {  MysqlDataSource toSerialize=new MysqlDataSource();  toSerialize.setZeroDateTimeBehavior("convertToNull");  boolean testBooleanFlag=!toSerialize.getAllowLoadLocalInfile();  toSerialize.setAllowLoadLocalInfile(testBooleanFlag);  int testIntFlag=toSerialize.getBlobSendChunkSize() + 1;  toSerialize.setBlobSendChunkSize(String.valueOf(testIntFlag));  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  ObjectOutputStream objOut=new ObjectOutputStream(bOut);  objOut.writeObject(toSerialize);  objOut.flush();  ObjectInputStream objIn=new ObjectInputStream(new ByteArrayInputStream(bOut.toByteArray()));  MysqlDataSource thawedDs=(MysqlDataSource)objIn.readObject();  assertEquals("convertToNull",thawedDs.getZeroDateTimeBehavior());  assertEquals(testBooleanFlag,thawedDs.getAllowLoadLocalInfile());  assertEquals(testIntFlag,thawedDs.getBlobSendChunkSize());}  }
class C{  public boolean hasView(){  return getView() != null;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean rowUpdated() throws SQLException {  throw SQLError.createSQLFeatureNotSupportedException();}  }
class C{  public void mouseDragged(MouseEvent e){  if ((!e.isConsumed()) && SwingUtilities.isLeftMouseButton(e)) {    moveCaret(e);  }}  }
class C{  public boolean dispatch(boolean complete) throws IOException, XNIException {  fEntityManager.setEntityHandler(null);  try {    boolean again;    do {      again=false;switch (fScannerState) {case SCANNER_STATE_DTD_INTERNAL_DECLS:{          boolean completeDTD=true;          boolean readExternalSubset=(fValidation || fLoadExternalDTD) && (fValidationManager == null || !fValidationManager.isCachedDTD());          boolean moreToScan=fDTDScanner.scanDTDInternalSubset(completeDTD,fStandalone,fHasExternalDTD && readExternalSubset);          if (!moreToScan) {            if (!fEntityScanner.skipChar(']')) {              reportFatalError("EXPECTED_SQUARE_BRACKET_TO_CLOSE_INTERNAL_SUBSET",null);            }            fEntityScanner.skipSpaces();            if (!fEntityScanner.skipChar('>')) {              reportFatalError("DoctypedeclUnterminated",new Object[]{fDoctypeName});            }            fMarkupDepth--;            if (fDoctypeSystemId != null) {              fIsEntityDeclaredVC=!fStandalone;              if (readExternalSubset) {                setScannerState(SCANNER_STATE_DTD_EXTERNAL);                break;              }            } else             if (fExternalSubsetSource != null) {              fIsEntityDeclaredVC=!fStandalone;              if (readExternalSubset) {                fDTDScanner.setInputSource(fExternalSubsetSource);                fExternalSubsetSource=null;                setScannerState(SCANNER_STATE_DTD_EXTERNAL_DECLS);                break;              }            } else {              fIsEntityDeclaredVC=fEntityManager.hasPEReferences() && !fStandalone;            }            setScannerState(SCANNER_STATE_PROLOG);            setDispatcher(fPrologDispatcher);            fEntityManager.setEntityHandler(XMLDocumentScannerMMImpl.this);            return true;          }          break;        }case SCANNER_STATE_DTD_EXTERNAL:{        fDTDDescription.setValues(fDoctypePublicId,fDoctypeSystemId,null,null);        fDTDDescription.setRootName(fDoctypeName);        XMLInputSource xmlInputSource=fEntityManager.resolveEntity(fDTDDescription);        fDTDScanner.setInputSource(xmlInputSource);        setScannerState(SCANNER_STATE_DTD_EXTERNAL_DECLS);        again=true;        break;      }case SCANNER_STATE_DTD_EXTERNAL_DECLS:{      boolean completeDTD=true;      boolean moreToScan=fDTDScanner.scanDTDExternalSubset(completeDTD);      if (!moreToScan) {        setScannerState(SCANNER_STATE_PROLOG);        setDispatcher(fPrologDispatcher);        fEntityManager.setEntityHandler(XMLDocumentScannerMMImpl.this);        return true;      }      break;    }default :{    throw new XNIException("DTDDispatcher#dispatch: scanner state=" + fScannerState + " ("+ getScannerStateName(fScannerState)+ ')');  }}} while (complete || again);} catch (MalformedByteSequenceException e) {fErrorReporter.reportError(e.getDomain(),e.getKey(),e.getArguments(),XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (CharConversionException e) {fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"CharConversionFailure",null,XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (EOFException e) {reportFatalError("PrematureEOF",null);return false;} finally {fEntityManager.setEntityHandler(XMLDocumentScannerMMImpl.this);}return true;}  }
class C{  private void createMigrationGroupPage(){  MigrationGroupEditor migrationGroupEditor=new MigrationGroupEditor(migrationTask,getContainer(),this);  int index=addPage(migrationGroupEditor.getControl());  setPageText(index,"Group");  taskListeners.add(migrationGroupEditor);}  }
class C{  protected void copy(String targetDir,FileList files,String baseDir){  File target=new File(targetDir);  File base=new File(baseDir);  println("Copying " + files.size() + " files to "+ target.getPath());  String basePath=base.getPath();  for (  File f : files) {    File t=new File(target,removeBase(basePath,f.getPath()));    byte[] data=readFile(f);    mkdirs(t.getParentFile());    writeFile(t,data);  }}  }
class C{  public static boolean isDarkColor(int color){  double base=0.299 * Color.red(color) + 0.587 * Color.green(color) + 0.114 * Color.blue(color);  return (1 - base / 255) > 0.5;}  }
class C{  public static String onKeyPress(String key){  pin=pin.concat(key);  return pin;}  }
class C{  public SettingsItem(String key,SettingsItem parent,Type type){  if (key == null || key.isEmpty()) {    throw new IllegalArgumentException("Settings item has no Key." + (parent == null ? "" : " Parent: " + parent.toString()));  }  if (type == null) {    throw new IllegalArgumentException("Settings item has no type." + (parent == null ? "" : " Parent: " + parent.toString()));  }  this.key=key;  this.parent=parent;  this.type=type;  if (parent != null) {    parent.addChild(this);  }}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  public UnsupportedFlavorException(DataFlavor flavor){  super((flavor != null) ? flavor.getHumanPresentableName() : null);}  }
class C{  public boolean isWaiting(){  return !future.isDone();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TN4_CLASSIFIER___IS_PROVIDED_BY_RUNTIME:    return isProvidedByRuntime();case TypesPackage.TN4_CLASSIFIER___GET_TYPE_ACCESS_MODIFIER:  return getTypeAccessModifier();}return super.eInvoke(operationID,arguments);}  }
class C{  public static void load(final ConfigurationBuffer buffer,String prefix) throws ConfigurationException {  try {    Properties props=System.getProperties();    for (Enumeration e=props.propertyNames(); e.hasMoreElements(); ) {      String propname=(String)e.nextElement();      if (!propname.startsWith(prefix + ".")) {        String value=System.getProperty(propname);        buffer.setToken(propname,value);        continue;      }      String varname=propname.substring(prefix.length() + 1);      if (!buffer.isValidVar(varname))       continue;      String value=System.getProperty(propname);      List<String> args=new LinkedList<String>();      StringTokenizer t=new StringTokenizer(value,",");      while (t.hasMoreTokens()) {        String token=t.nextToken();        args.add(token);      }      buffer.setVar(varname,args,"system properties",-1);    }  } catch (  SecurityException se) {  }}  }
class C{  public SynapseGroupNode addMenuToSynapseGroupNode(SynapseGroupNode node){  return node;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public String toString(){  String s="{";  Object[] tbl=attributes;  for (int i=0; i < tbl.length; i+=2) {    if (tbl[i + 1] instanceof AttributeSet) {      s=s + tbl[i] + "="+ "AttributeSet"+ ",";    } else {      s=s + tbl[i] + "="+ tbl[i + 1]+ ",";    }  }  s=s + "}";  return s;}  }
class C{  public double distanceTo(Point2D that){  double dx=this.x - that.x;  double dy=this.y - that.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  protected View newView(int viewType){  if (viewType == 0) {    return LayoutInflater.from(mContext).inflate(mItemLayoutResId,null);  }  return null;}  }
class C{  public DefaultConnectFuture(){  super(null);}  }
class C{  protected Container createSideNavigationComponent(Vector commands,String placement){  return sideMenu.createSideNavigationPanel(commands,placement);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings("unchecked") private WebSession createSession(HttpSession ses,String sesId){  WebSession cached=new WebSession(sesId,ses,true);  cached.genSes(ses);  if (log.isDebugEnabled())   log.debug("Session created: " + sesId);  for (int i=0; i < retries; i++) {    try {      final IgniteCache<String,WebSession> cache0=cacheWithExpiryPolicy(cached.getMaxInactiveInterval(),cache);      final WebSession old=cache0.getAndPutIfAbsent(sesId,cached);      if (old != null) {        cached=old;        if (cached.isNew())         cached=new WebSession(cached.getId(),cached,false);      }      break;    } catch (    CacheException|IgniteException|IllegalStateException e) {      handleCreateSessionException(sesId,i,e);    }  }  return cached;}  }
class C{  final public MutableString insert(final int index,final CharSequence s){  final int length=length();  if (index > length)   throw new StringIndexOutOfBoundsException();  final int l=s.length();  if (l == 0)   return this;  final int newLength=length + l;  if (newLength >= array.length)   expand(newLength);  System.arraycopy(array,index,array,index + l,length - index);  getChars(s,0,l,array,index);  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  public UnsupportedVersionException(String message){  super(message);}  }
class C{  public String addCreateBookmarkStep(Workflow workflow,List<URI> snapshotList,ProtectionSystem system,String bookmarkName,Set<String> volumeWWNs,boolean emOnly,String waitFor) throws InternalException {  String stepId=workflow.createStepId();  Workflow.Method createBookmarkMethod=new Workflow.Method(METHOD_CREATE_BOOKMARK_STEP,snapshotList,system,bookmarkName,volumeWWNs,emOnly);  Workflow.Method rollbackCreateBookmarkMethod=new Workflow.Method(METHOD_ROLLBACK_CREATE_BOOKMARK_STEP);  workflow.createStep(STEP_BOOKMARK_CREATE,String.format("Create RecoverPoint bookmark %s",bookmarkName),waitFor,system.getId(),system.getSystemType(),this.getClass(),createBookmarkMethod,rollbackCreateBookmarkMethod,stepId);  _log.info(String.format("Added create bookmark %s step [%s] in workflow",bookmarkName,stepId));  return STEP_BOOKMARK_CREATE;}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public UserDTO create(UserDTO user){  Validate.isTrue(getSystemDomain().equalsIgnoreCase(user.getDomain()),sm.getString("valid.not.systemdomain",user.getDomain(),tenant));  try {    boolean disabled=user.isDisabled();    boolean locked=user.isLocked();    if (disabled && locked) {      throw new BadRequestException("A disabled user cannot be locked");    }    PersonUser personUser=UserMapper.getPersonUser(user);    String name=personUser.getId().getName();    PersonDetail personDetail=personUser.getDetail();    char[] password=user.getPasswordDetails().getPassword().toCharArray();    PrincipalId principal=getIDMClient().addPersonUser(tenant,name,personDetail,password);    if (disabled) {      getIDMClient().disableUserAccount(tenant,personUser.getId());    }    return UserMapper.getUserDTO(getIDMClient().findPersonUser(tenant,principal),true);  } catch (  NoSuchTenantException e) {    log.debug("Failed to create user '{}'",user.getName(),e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  PasswordPolicyViolationException|DTOMapperException|InvalidArgumentException|InvalidPrincipalException|NoSuchIdpException e) {    log.debug("Failed to create user '{}' on tenant '{}' due to a client side error",user.getName(),tenant,e);    throw new BadRequestException(sm.getString("res.user.create.failed",user.getName(),tenant),e);  }catch (  Exception e) {    log.error("Failed to create user '{}' on tenant '{}' due to a server side error",user.getName(),tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public static void addStaticAspectsToItem(ItemStack item,IItemStackMatcher matcher,AspectTier tier,AspectGroup type,float amountMultiplier,float amountVariation,int aspectCount){  addStaticAspectsToItem(item,matcher,tier.id,type.id,amountMultiplier,amountVariation,aspectCount);}  }
class C{  public final TestSubscriber assertNotTerminated(){  if (done.getCount() == 0) {    fail("","Subscriber terminated!",errors);  }  return this;}  }
class C{  public boolean checkToolTips(){  boolean result;  Class<?> cls;  BeanInfo info;  PropertyDescriptor[] desc;  int i;  Vector<String> missing;  String suffix;  print("Tool tips...");  result=true;  suffix="TipText";  cls=getObject().getClass();  try {    info=Introspector.getBeanInfo(cls,Object.class);    desc=info.getPropertyDescriptors();  } catch (  Exception e) {    e.printStackTrace();    desc=null;  }  if (desc != null) {    missing=new Vector<String>();    for (i=0; i < desc.length; i++) {      if (m_IgnoredProperties.contains(desc[i].getName())) {        continue;      }      if ((desc[i].getReadMethod() == null) || (desc[i].getWriteMethod() == null)) {        continue;      }      try {        cls.getMethod(desc[i].getName() + suffix,(Class[])null);      } catch (      Exception e) {        result=false;        missing.add(desc[i].getName() + suffix);      }    }    if (result) {      println("yes");    } else {      println("no (missing: " + missing + ")");    }  } else {    println("maybe");  }  return result;}  }
class C{  @Override public boolean supportsPositionedDelete(){  debugCodeCall("supportsPositionedDelete");  return true;}  }
class C{  public ClassLoader buildClassLoader(ClassLoader serviceLoader){synchronized (_loaderMap) {    SoftReference<ClassLoader> extLoaderRef=_loaderMap.get(serviceLoader);    if (extLoaderRef != null) {      ClassLoader extLoader=extLoaderRef.get();      if (extLoader != null) {        return extLoader;      }    }  }  String parentId=EnvLoader.getEnvironmentName(serviceLoader);  String id=_id + "!" + parentId;  DynamicClassLoader extLoader=null;  return extLoader;}  }
class C{  public void datatypes(Connection connection,boolean tinyInt1isBit,boolean yearIsDateType) throws Exception {  createTable("datatypetest","bit1 BIT(1) default 0," + "bit2 BIT(2) default 1," + "tinyint1 TINYINT(1) default 0,"+ "tinyint2 TINYINT(2) default 1,"+ "bool0 BOOL default 0,"+ "smallint0 SMALLINT default 1,"+ "smallint_unsigned SMALLINT UNSIGNED default 0,"+ "mediumint0 MEDIUMINT default 1,"+ "mediumint_unsigned MEDIUMINT UNSIGNED default 0,"+ "int0 INT default 1,"+ "int_unsigned INT UNSIGNED default 0,"+ "bigint0 BIGINT default 1,"+ "bigint_unsigned BIGINT UNSIGNED default 0,"+ "float0 FLOAT default 0,"+ "double0 DOUBLE default 1,"+ "decimal0 DECIMAL default 0,"+ "date0 DATE default '2001-01-01',"+ "datetime0 DATETIME default '2001-01-01 00:00:00',"+ "timestamp0 TIMESTAMP default  '2001-01-01 00:00:00',"+ "time0 TIME default '22:11:00'," + ((minVersion(5,6) && strictBeforeVersion(10,0)) ? "year2 YEAR(4) default 99," : "year2 YEAR(2) default 99,") + "year4 YEAR(4) default 2011,"+ "char0 CHAR(1) default '0',"+ "char_binary CHAR (1) binary default '0',"+ "varchar0 VARCHAR(1) default '1',"+ "varchar_binary VARCHAR(10) BINARY default 0x1,"+ "binary0 BINARY(10) default 0x1,"+ "varbinary0 VARBINARY(10) default 0x1,"+ "tinyblob0 TINYBLOB,"+ "tinytext0 TINYTEXT,"+ "blob0 BLOB,"+ "text0 TEXT,"+ "mediumblob0 MEDIUMBLOB,"+ "mediumtext0 MEDIUMTEXT,"+ "longblob0 LONGBLOB,"+ "longtext0 LONGTEXT,"+ "enum0 ENUM('a','b') default 'a',"+ "set0 SET('a','b') default 'a' ");  connection.createStatement().execute("insert into datatypetest (tinyblob0,mediumblob0,blob0,longblob0," + "tinytext0,mediumtext0,text0, longtext0) values(0x1,0x1,0x1,0x1, 'a', 'a', 'a', 'a')");  resultSet=connection.createStatement().executeQuery("select * from datatypetest");  resultSet.next();  Class<?> byteArrayClass=(new byte[0]).getClass();  checkClass("bit1",Boolean.class,"BIT",Types.BIT);  checkClass("bit2",byteArrayClass,"BIT",Types.VARBINARY);  checkClass("tinyint1",tinyInt1isBit ? Boolean.class : Integer.class,"TINYINT",tinyInt1isBit ? Types.BIT : Types.TINYINT);  checkClass("tinyint2",Integer.class,"TINYINT",Types.TINYINT);  checkClass("bool0",tinyInt1isBit ? Boolean.class : Integer.class,"TINYINT",tinyInt1isBit ? Types.BIT : Types.TINYINT);  checkClass("smallint0",Integer.class,"SMALLINT",Types.SMALLINT);  checkClass("smallint_unsigned",Integer.class,"SMALLINT UNSIGNED",Types.SMALLINT);  checkClass("mediumint0",Integer.class,"MEDIUMINT",Types.INTEGER);  checkClass("mediumint_unsigned",Integer.class,"MEDIUMINT UNSIGNED",Types.INTEGER);  checkClass("int0",Integer.class,"INTEGER",Types.INTEGER);  checkClass("int_unsigned",Long.class,"INTEGER UNSIGNED",Types.INTEGER);  checkClass("bigint0",Long.class,"BIGINT",Types.BIGINT);  checkClass("bigint_unsigned",BigInteger.class,"BIGINT UNSIGNED",Types.BIGINT);  checkClass("float0",Float.class,"FLOAT",Types.REAL);  checkClass("double0",Double.class,"DOUBLE",Types.DOUBLE);  checkClass("decimal0",BigDecimal.class,"DECIMAL",Types.DECIMAL);  checkClass("date0",Date.class,"DATE",Types.DATE);  checkClass("time0",Time.class,"TIME",Types.TIME);  checkClass("timestamp0",Timestamp.class,"TIMESTAMP",Types.TIMESTAMP);  if (minVersion(5,6) && strictBeforeVersion(10,0)) {    checkClass("year2",yearIsDateType ? Date.class : Short.class,"YEAR",yearIsDateType ? Types.DATE : Types.SMALLINT);  }  checkClass("year4",yearIsDateType ? Date.class : Short.class,"YEAR",yearIsDateType ? Types.DATE : Types.SMALLINT);  checkClass("char0",String.class,"CHAR",Types.CHAR);  checkClass("char_binary",String.class,"CHAR",Types.CHAR);  checkClass("varchar0",String.class,"VARCHAR",Types.VARCHAR);  checkClass("varchar_binary",String.class,"VARCHAR",Types.VARCHAR);  checkClass("binary0",byteArrayClass,"BINARY",Types.BINARY);  checkClass("varbinary0",byteArrayClass,"VARBINARY",Types.VARBINARY);  checkClass("tinyblob0",byteArrayClass,"TINYBLOB",Types.VARBINARY);  checkClass("tinytext0",String.class,"VARCHAR",Types.VARCHAR);  checkClass("blob0",byteArrayClass,"BLOB",Types.VARBINARY);  checkClass("text0",String.class,"VARCHAR",Types.VARCHAR);  checkClass("mediumblob0",byteArrayClass,"MEDIUMBLOB",Types.VARBINARY);  checkClass("mediumtext0",String.class,"VARCHAR",Types.VARCHAR);  checkClass("longblob0",byteArrayClass,"LONGBLOB",Types.LONGVARBINARY);  checkClass("longtext0",String.class,"VARCHAR",Types.LONGVARCHAR);  checkClass("enum0",String.class,"CHAR",Types.CHAR);  checkClass("set0",String.class,"CHAR",Types.CHAR);  resultSet=connection.createStatement().executeQuery("select NULL as foo");  resultSet.next();  checkClass("foo",String.class,"NULL",Types.NULL);}  }
class C{  public NotificationChain basicSetConstraintRule(ConstraintRule newConstraintRule,NotificationChain msgs){  ConstraintRule oldConstraintRule=constraintRule;  constraintRule=newConstraintRule;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,DatatypePackage.PROPERTY__CONSTRAINT_RULE,oldConstraintRule,newConstraintRule);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private boolean checkIfEvoSuiteRMI(Permission perm){  if (!Thread.currentThread().getName().startsWith("RMI ")) {    return false;  }  final String pattern="sun.rmi.";  boolean foundRMI=false;  for (  StackTraceElement element : Thread.currentThread().getStackTrace()) {    if (element.toString().startsWith(pattern)) {      foundRMI=true;      break;    }  }  if (!foundRMI) {    return false;  }  boolean foundMasterNode=false;  traceLoop:   for (  StackTraceElement element : Thread.currentThread().getStackTrace()) {    for (    String masterNodeMethod : masterNodeRemoteMethodNames) {      if (element.toString().contains(masterNodeMethod)) {        foundMasterNode=true;        break traceLoop;      }    }  }  if (!foundMasterNode) {    return false;  }  if (perm instanceof FilePermission && !perm.getActions().equals("read")) {    logger.error("EvoSuite RMI is trying to interact with files: " + perm);    return false;  }  return true;}  }
class C{  protected Long computeProtectionCapacity(List<URI> volumeURIs,Long requestedSize,boolean isExpand,boolean isChangeVpool,List<VolumeDescriptor> volumeDescriptors){  List<Volume> volumes=_dbClient.queryObject(Volume.class,volumeURIs);  _log.info("Performing checks to see if all volumes are of the same System Type and capacity for Protection.");  Map<URI,StorageSystem> volumeStorageSystemMap=new HashMap<URI,StorageSystem>();  List<Volume> allVolumesToCompare=new ArrayList<Volume>();  List<Volume> allVolumesToUpdateCapacity=new ArrayList<Volume>();  List<Long> currentVolumeSizes=new ArrayList<Long>();  Map<URI,String> associatedVolumePersonalityMap=new HashMap<URI,String>();  Long capacity=0L;  List<VolumeDescriptor> migrateDescriptors=null;  List<Migration> migrations=null;  if (volumeDescriptors != null) {    migrateDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.VPLEX_MIGRATE_VOLUME},null);    if (migrateDescriptors != null && !migrateDescriptors.isEmpty()) {      _log.info("Data Migration detected, this is due to a change virtual pool operation on RP+VPLEX or MetroPoint.");      migrations=new ArrayList<Migration>();      Iterator<VolumeDescriptor> migrationIter=migrateDescriptors.iterator();      while (migrationIter.hasNext()) {        Migration migration=_dbClient.queryObject(Migration.class,migrationIter.next().getMigrationId());        migrations.add(migration);      }    }  }  for (  Volume volume : volumes) {    if (volume.getPersonality() != null) {      if (volume.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString()) || volume.getPersonality().equals(Volume.PersonalityTypes.TARGET.toString())) {        allVolumesToUpdateCapacity.add(volume);        _log.info("Adding Volume [{}] to potentially have capacity adjusted.",volume.getLabel());        StringSet associatedVolumes=volume.getAssociatedVolumes();        if (associatedVolumes != null && !associatedVolumes.isEmpty()) {          _log.info("Volume [{}] is a VPLEX virtual volume.",volume.getLabel());          Iterator<String> it=associatedVolumes.iterator();          while (it.hasNext()) {            URI associatedVolumeURI=URI.create(it.next());            Volume associatedVolume=_dbClient.queryObject(Volume.class,associatedVolumeURI);            if (migrations != null && !migrations.isEmpty()) {              for (              Migration migration : migrations) {                if (migration.getSource().equals(associatedVolume.getId())) {                  _log.info("VPLEX backing volume [{}] has a migration, using migration volume instead.",associatedVolume.getLabel());                  associatedVolume=_dbClient.queryObject(Volume.class,migration.getTarget());                  break;                }              }            }            if (associatedVolume.getProvisionedCapacity().longValue() > 0) {              currentVolumeSizes.add(associatedVolume.getProvisionedCapacity());            } else {              currentVolumeSizes.add(associatedVolume.getCapacity());            }            addVolumeStorageSystem(volumeStorageSystemMap,associatedVolume);            allVolumesToCompare.add(associatedVolume);            allVolumesToUpdateCapacity.add(associatedVolume);            associatedVolumePersonalityMap.put(associatedVolume.getId(),volume.getPersonality());            _log.info("Adding Volume [{}] to potentially have capacity adjusted.",associatedVolume.getLabel());          }        } else {          _log.info("Volume [{}] is not VPLEX virtual volume.",volume.getLabel());          if (volume.getProvisionedCapacity().longValue() > 0) {            currentVolumeSizes.add(volume.getProvisionedCapacity());          } else {            currentVolumeSizes.add(volume.getCapacity());          }          addVolumeStorageSystem(volumeStorageSystemMap,volume);          allVolumesToCompare.add(volume);        }      }    } else {      _log.warn("Volume [{}] does not have PERSONALITY set. We will not be able to compare this volume.",volume.getLabel());    }  }  boolean vmax2Vmax3StorageCombo=false;  if (!allVolumesToCompare.isEmpty() && (allVolumesToCompare.size() >= 2)) {    StorageSystem storageSystem=null;    StorageSystem storageSystemToCompare=null;    boolean storageSystemsMatch=true;    for (    Map.Entry<URI,StorageSystem> volumeStorageSystemEntry : volumeStorageSystemMap.entrySet()) {      URI volUri=volumeStorageSystemEntry.getKey();      if (storageSystemToCompare == null) {        storageSystemToCompare=volumeStorageSystemMap.get(volUri);        if (volumeStorageSystemMap.size() == 1) {          storageSystem=volumeStorageSystemMap.get(volUri);        }        continue;      }      storageSystem=volumeStorageSystemMap.get(volUri);      vmax2Vmax3StorageCombo=checkVMAX2toVMAX3(storageSystemToCompare,storageSystem);      if (!storageSystemToCompare.getSystemType().equals(storageSystem.getSystemType()) || vmax2Vmax3StorageCombo) {        storageSystemsMatch=false;        break;      }    }    if (storageSystemsMatch && isChangeVpool && DiscoveredDataObject.Type.xtremio.name().equals(storageSystem.getSystemType())) {      for (      Volume volume : allVolumesToUpdateCapacity) {        if (NullColumnValueGetter.isNotNullValue(volume.getPersonality()) && volume.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString())) {          capacity=volume.getProvisionedCapacity();          break;        }      }      for (      Volume volume : allVolumesToUpdateCapacity) {        updateVolumeCapacity(volume,capacity,isExpand);      }      _log.info(String.format("Capacity adjustments made for XIO change vpool operation."));      return capacity;    }    if (!storageSystemsMatch || !allVolumeSizesMatch(currentVolumeSizes)) {      _log.warn("The storage systems for all volumes do not match or all volume sizes do not match. " + "This could cause RP CG creation to fail. " + "Potentially need to adjust capacity size of volumes to be consistent across all source/targets.");      List<Volume> tempVolumesList=new ArrayList<Volume>();      Long currentVolumeCapacity=0L;      Long volumeToCompareCapacity=0L;      boolean matched=true;      Long capacityToUseInCalculation=Collections.max(currentVolumeSizes);      if (isExpand) {        capacityToUseInCalculation=requestedSize;      }      _log.info(String.format("The capacity to match to is [%s]",capacityToUseInCalculation.toString()));      if (!capacitiesCanMatch(volumeStorageSystemMap) || vmax2Vmax3StorageCombo) {        setUnMatchedCapacities(allVolumesToUpdateCapacity,associatedVolumePersonalityMap,isExpand,capacityToUseInCalculation);      } else {        for (int index=0; index < allVolumesToCompare.size(); index++) {          matched=true;          tempVolumesList.clear();          tempVolumesList.addAll(allVolumesToCompare);          Volume currentVolume=tempVolumesList.remove(index);          StorageSystem currentVolumeStorageSystem=_dbClient.queryObject(StorageSystem.class,currentVolume.getStorageController());          String currentVolumeSystemType=volumeStorageSystemMap.get(currentVolume.getStorageController()).getSystemType();          currentVolumeCapacity=capacityCalculatorFactory.getCapacityCalculator(currentVolumeSystemType).calculateAllocatedCapacity(capacityToUseInCalculation,currentVolume,_dbClient);          _log.info(String.format("Volume [%s] has a capacity of %s on storage system type %s. " + "The calculated capacity for this volume is %s.",currentVolume.getLabel(),currentVolume.getCapacity(),currentVolumeSystemType,currentVolumeCapacity));          for (          Volume volumeToCompare : tempVolumesList) {            String volumeToCompareSystemType=volumeStorageSystemMap.get(volumeToCompare.getStorageController()).getSystemType();            if (volumeToCompareSystemType.equalsIgnoreCase(currentVolumeSystemType)) {              continue;            }            StorageSystem volumeToCompareStorageSystem=_dbClient.queryObject(StorageSystem.class,volumeToCompare.getStorageController());            volumeToCompareCapacity=capacityCalculatorFactory.getCapacityCalculator(volumeToCompareSystemType).calculateAllocatedCapacity(currentVolumeCapacity,volumeToCompare,_dbClient);            if (!currentVolumeCapacity.equals(volumeToCompareCapacity)) {              _log.warn(String.format("Storage System %s is not capable of allocating exactly %s bytes for volume [%s], keep trying...",volumeToCompareSystemType,currentVolumeCapacity,volumeToCompare.getLabel()));              matched=false;              break;            } else {              _log.info(String.format("Volume [%s] is capable of being provisioned at %s bytes on storage system of type %s, continue...",volumeToCompare.getLabel(),currentVolumeCapacity,volumeToCompareSystemType));            }          }          if (matched) {            break;          }        }        if (matched) {          capacity=currentVolumeCapacity;          _log.info("Found a capacity size that is consistent across all source/target(s) storage systems: " + capacity);          for (          Volume volume : allVolumesToUpdateCapacity) {            if (isChangeVpool && NullColumnValueGetter.isNotNullValue(volume.getPersonality()) && volume.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString())) {              continue;            }            updateVolumeCapacity(volume,capacity,isExpand);          }        } else {          throw APIException.internalServerErrors.noMatchingAllocationCapacityFound();        }      }    } else {      _log.info(String.format("All storage systems match and/or all volume sizes are consistent. No need for any capacity adjustments."));      capacity=requestedSize;    }  } else {    _log.error("There were no volumes found to compare capacities.");  }  return capacity;}  }
class C{  public JFXRippler(Node control,RipplerMask mask,RipplerPos pos){  super();  initialize();  this.maskType.set(mask);  this.position.set(pos);  setControl(control);  setCache(true);  setCacheHint(CacheHint.SPEED);  setCacheShape(true);  setSnapToPixel(false);}  }
class C{  public Vector translate(final double xOffset,final double yOffset,final double zOffset){  return new Vector(x - xOffset,y - yOffset,z - zOffset);}  }
class C{  public static int isPower(int a,int p){  if (a <= 0) {    return -1;  }  int n=0;  int d=a;  while (d > 1) {    if (d % p != 0) {      return -1;    }    d/=p;    n++;  }  return n;}  }
class C{  public static String stripDiacritics(String s){  return s;}  }
class C{  public ObjectFactory(){}  }
class C{  @SuppressWarnings({"BooleanMethodIsAlwaysInverted"}) public static boolean isPositiveDefinite(TetradMatrix matrix){  try {    new RectangularCholeskyDecomposition(matrix.getRealMatrix());  } catch (  NonPositiveDefiniteMatrixException e) {    return false;  }  return true;}  }
class C{  public LayoutBlock provideLayoutBlock(String s){  LayoutBlock blk;  if (s.length() < 1) {    if (!autoAssignBlocks) {      return null;    } else {      blk=InstanceManager.getDefault(LayoutBlockManager.class).createNewLayoutBlock();      if (blk == null) {        log.error("Unable to create a layout block");        return null;      }      blk.initializeLayoutBlock();      blk.initializeLayoutBlockRouting();      blk.setBlockTrackColor(defaultTrackColor);      blk.setBlockOccupiedColor(defaultOccupiedTrackColor);      blk.setBlockExtraColor(defaultAlternativeTrackColor);    }  } else {    blk=InstanceManager.getDefault(LayoutBlockManager.class).getByUserName(s);    if (blk == null) {      blk=InstanceManager.getDefault(LayoutBlockManager.class).createNewLayoutBlock(null,s);      if (blk == null) {        log.error("Failure to create LayoutBlock '" + s + "'.");        return null;      } else {        blk.initializeLayoutBlock();        blk.initializeLayoutBlockRouting();        blk.setBlockTrackColor(defaultTrackColor);        blk.setBlockOccupiedColor(defaultOccupiedTrackColor);        blk.setBlockExtraColor(defaultAlternativeTrackColor);      }    }  }  blk.addLayoutEditor(this);  setDirty(true);  blk.incrementUse();  return blk;}  }
class C{  @Override public double accuracyLon(){  return Math.abs(int2coord(1) - int2coord(2));}  }
class C{  private void emitMapPut(Method method,String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getMapPutterName(fieldName));  builder.append("(String k, ");  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),1));  builder.append(" v) {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".put(k, v);\n");  builder.append("    }\n\n");}  }
class C{  private boolean parseResponseData(String jsonMsg){  if (jsonMsg.startsWith("\ufeff")) {    Ln.w(" parseResponseData jsonMsg.startsWith(\\ufeff) == >>","jsonMsg error");    jsonMsg=jsonMsg.substring(1);  }  try {    JSONObject object=new JSONObject(jsonMsg);    int status=Integer.parseInt(object.getString("status"));    if (status == 200) {      if (object.isNull("res")) {        return true;      } else {        object=object.getJSONObject("res");      }      if (object.isNull("config")) {        return true;      } else {        object=object.getJSONObject("config");      }      if (object.isNull("api_path")) {        return true;      }      String apiPath=object.optString("api_path");      int policy=object.optInt("policy");      int delay=object.optInt("duration") * 1000;      if (!TextUtils.isEmpty(apiPath)) {        preUrl=apiPath;        preference.setReportApiPath(apiPath);      }      if (policy != 0) {        preference.setReportPolicy(policy,delay);      }      return true;    } else {      return false;    }  } catch (  Exception e) {    Ln.d("ServiceHelper == ","parseResponseData == ",e);    return false;  }}  }
class C{  protected int normalizeIndex(int index) throws SQLException {  if (index < 0) {    int columnCount=getResultSet().getMetaData().getColumnCount();    do {      index+=columnCount;    } while (index < 0);  }  return index + 1;}  }
class C{  public static Number tan(Number a){  return Math.tan(a.doubleValue());}  }
class C{  private synchronized void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  deserialize(ois,(Collection)bcsListeners);}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  private void showOverlay(boolean forceCheck){  if (forceCheck)   mOverlayTimeout=0;  showOverlayTimeout(0);}  }
class C{  public synchronized Relationship addRelationship(Primitive type,Primitive target,int index){  return addRelationship(this.network.createVertex(type),this.network.createVertex(target),index,false);}  }
class C{  public QuaternaryOperator(WCeMMType wt,double epsilon){  wtype4=wt;  eps=epsilon;}  }
class C{  public void addLoad(InstructionHandle handle,XField field){  getLoadStoreCount(field).loadCount++;  handleToFieldMap.put(handle,field);  loadHandleSet.set(handle.getPosition());}  }
class C{  public synchronized void addToState(BNetwork newState){  for (  ChanceNode cn : new ArrayList<ChanceNode>(newState.getChanceNodes())) {    cn.setId(cn.getId() + "'");    addNode(cn);    connectToPredictions(cn);  }}  }
class C{  public boolean hasMoreData(){  return mTail > 0;}  }
class C{  public void displaySuccess(final String message){  notificationMessage.showNotification(SPUILabelDefinitions.SP_NOTIFICATION_SUCCESS_MESSAGE_STYLE,null,message,true);}  }
class C{  public void addIncrement(String text) throws BadLocationException {  if (text == null || text.length() == 0 || text.equals("\n")) {    return;  } else   if (text.charAt(text.length() - 1) != 10) {    throw new BadLocationException("Input does not end with newline");  }  document.replace(document.getLength(),0,text);}  }
class C{  public boolean isTransferring(){  if (this.sendingConnections.size() > 0) {    return true;  }  List<Connection> connections=getConnections();  if (connections.size() == 0) {    return false;  }  for (int i=0, n=connections.size(); i < n; i++) {    Connection con=connections.get(i);    if (!con.isReadyForTransfer()) {      return true;    }  }  return false;}  }
class C{  public T computeIfAbsent(final Supplier<T> lazy){  final T val=get();  if (val == UNSET)   return setOnceFromSupplier(lazy);  return val;}  }
class C{  public void mouseExited(MouseEvent event){}  }
class C{  public static PlatformUser copyPlatformUser(PlatformUser platformUser){  PlatformUser u=new PlatformUser();  u.setUserId(platformUser.getUserId());  u.setStatus(platformUser.getStatus());  u.setFirstName(platformUser.getFirstName());  u.setAdditionalName(platformUser.getAdditionalName());  u.setLastName(platformUser.getLastName());  u.setEmail(platformUser.getEmail());  u.setAddress(platformUser.getAddress());  u.setPhone(platformUser.getPhone());  u.setLocale(platformUser.getLocale());  u.setSalutation(platformUser.getSalutation());  u.setKey(platformUser.getKey());  return u;}  }
class C{  public MaterialEditText hintScale(float scale){  mHintScale=scale;  return this;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus deactivateInstance(String instanceId,ProvisioningSettings settings) throws APPlatformException {  PropertyHandler paramHandler=new PropertyHandler(settings);  paramHandler.setState(Status.DEACTIVATION_REQUESTED);  InstanceStatus result=new InstanceStatus();  result.setChangedParameters(settings.getParameters());  return result;}  }
class C{  public static String expandName(String name){  final String testName=name.toLowerCase();  if (testName.equals("cour")) {    name="Courier";  } else   if (testName.equals("helv")) {    name="Helvetica";  } else   if (testName.equals("hebo")) {    name="Helvetica-BOLD";  } else   if (testName.equals("zadb")) {    name="ZapfDingbats";  } else   if (testName.equals("tiro")) {    name="Times";  }  return name;}  }
class C{  private void doView(){  if (txt_PubCert.getDocument().getLength() < MIN_CERT_LENGTH) {    logger.error("Illegal state! There seems to be no certificate available.");    bt_view.setEnabled(false);  }  boolean written=false;  File tmpfile=null;  try {    tmpfile=File.createTempFile(OWASP_ZAP_ROOT_CA_NAME,OWASP_ZAP_ROOT_CA_FILE_EXT);    writePubCertificateToFile(tmpfile);    written=true;  } catch (  final Exception e) {    logger.error("Error while writing certificate data into temporary file.",e);  }  if (tmpfile != null && written) {    if (Desktop.isDesktopSupported()) {      try {        Desktop.getDesktop().open(tmpfile);      } catch (      final IOException e) {        logger.error("Error while telling the Operating System to open " + tmpfile,e);      }    }  }}  }
class C{  public static String createArraySignature(String typeSignature,int arrayCount){  return new String(createArraySignature(typeSignature.toCharArray(),arrayCount));}  }
class C{  public boolean isConstant(){switch (op) {case MUL:case DIV:case REM:case ADD:case SUB:case LSHIFT:case RSHIFT:case URSHIFT:case LT:case LE:case GT:case GE:case EQ:case NE:case BITAND:case BITXOR:case BITOR:case AND:case OR:    return left.isConstant() && right.isConstant();}return false;}  }
class C{  public void testAsyncFileChannel() throws IOException {  InfoStreamListener stream=new InfoStreamListener("newAsynchronousFileChannel");  Path dir=wrap(createTempDir(),stream);  AsynchronousFileChannel channel=AsynchronousFileChannel.open(dir.resolve("foobar"),StandardOpenOption.CREATE_NEW,StandardOpenOption.READ,StandardOpenOption.WRITE);  assertTrue(stream.sawMessage());  channel.close();  try {    AsynchronousFileChannel.open(dir.resolve("foobar"),StandardOpenOption.CREATE_NEW,StandardOpenOption.READ,StandardOpenOption.WRITE);    fail("didn't get expected exception");  } catch (  IOException expected) {  }}  }
class C{  protected void prepareTable(List<MBrowseField> fields,String from,String staticWhere,String orderBy){  browserFields=fields;  StringBuffer sql=new StringBuffer("SELECT DISTINCT ");  sql.append(detail.prepareTable(browserFields,p_multiSelection));  detail.setRowSelectionAllowed(true);  detail.setMultiSelection(p_multiSelection);  detail.setShowTotals(m_Browse.isShowTotal());  sql.append(" FROM ").append(from);  sql.append(" WHERE ");  m_sqlMain=sql.toString();  m_sqlCount="SELECT COUNT(*) FROM " + from + " WHERE ";  m_sqlOrderBy=getSQLOrderBy();  if (m_keyColumnIndex == -1)   log.log(Level.WARNING,"No KeyColumn - " + sql);}  }
class C{  public boolean isRepeated(){  return this.type == TaskType.REPEATED;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:05.037 -0500",hash_original_method="64901279DBD4FD22B1D7FC340D43545B",hash_generated_method="2E0993C1A54FED366A83F6457E46B83A") public String encodeBody(){  return callId.encode();}  }
class C{  public DistributedLeaderAction(Action<S,E> action,StateMachineEnsemble<S,E> ensemble){  Assert.notNull(action,"Action must be set");  Assert.notNull(ensemble,"Ensemble must be set");  this.action=action;  this.ensemble=ensemble;}  }
class C{  public void testClasspathWar() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/classpath-war/test");  final String expected="Got class!";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public void onTouchEvent(MotionEvent event,int nestingLevel){  if (!startEvent(event,nestingLevel,EVENT_TYPE_TOUCH)) {    return;  }  final int action=event.getAction();  final boolean newStream=action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_OUTSIDE;  if (newStream && (mTouchEventStreamIsTainted || mTouchEventStreamUnhandled)) {    mTouchEventStreamIsTainted=false;    mTouchEventStreamUnhandled=false;    mTouchEventStreamPointers=0;  }  if (mTouchEventStreamIsTainted) {    event.setTainted(true);  }  try {    ensureMetaStateIsNormalized(event.getMetaState());    final int deviceId=event.getDeviceId();    final int source=event.getSource();    if (!newStream && mTouchEventStreamDeviceId != -1 && (mTouchEventStreamDeviceId != deviceId || mTouchEventStreamSource != source)) {      problem("Touch event stream contains events from multiple sources: " + "previous device id " + mTouchEventStreamDeviceId + ", previous source "+ Integer.toHexString(mTouchEventStreamSource)+ ", new device id "+ deviceId+ ", new source "+ Integer.toHexString(source));    }    mTouchEventStreamDeviceId=deviceId;    mTouchEventStreamSource=source;    final int pointerCount=event.getPointerCount();    if ((source & InputDevice.SOURCE_CLASS_POINTER) != 0) {switch (action) {case MotionEvent.ACTION_DOWN:        if (mTouchEventStreamPointers != 0) {          problem("ACTION_DOWN but pointers are already down.  " + "Probably missing ACTION_UP from previous gesture.");        }      ensureHistorySizeIsZeroForThisAction(event);    ensurePointerCountIsOneForThisAction(event);  mTouchEventStreamPointers=1 << event.getPointerId(0);break;case MotionEvent.ACTION_UP:ensureHistorySizeIsZeroForThisAction(event);ensurePointerCountIsOneForThisAction(event);mTouchEventStreamPointers=0;mTouchEventStreamIsTainted=false;break;case MotionEvent.ACTION_MOVE:{final int expectedPointerCount=Integer.bitCount(mTouchEventStreamPointers);if (pointerCount != expectedPointerCount) {problem("ACTION_MOVE contained " + pointerCount + " pointers but there are currently "+ expectedPointerCount+ " pointers down.");mTouchEventStreamIsTainted=true;}break;}case MotionEvent.ACTION_CANCEL:mTouchEventStreamPointers=0;mTouchEventStreamIsTainted=false;break;case MotionEvent.ACTION_OUTSIDE:if (mTouchEventStreamPointers != 0) {problem("ACTION_OUTSIDE but pointers are still down.");}ensureHistorySizeIsZeroForThisAction(event);ensurePointerCountIsOneForThisAction(event);mTouchEventStreamIsTainted=false;break;default :{final int actionMasked=event.getActionMasked();final int actionIndex=event.getActionIndex();if (actionMasked == MotionEvent.ACTION_POINTER_DOWN) {if (mTouchEventStreamPointers == 0) {problem("ACTION_POINTER_DOWN but no other pointers were down.");mTouchEventStreamIsTainted=true;}if (actionIndex < 0 || actionIndex >= pointerCount) {problem("ACTION_POINTER_DOWN index is " + actionIndex + " but the pointer count is "+ pointerCount+ ".");mTouchEventStreamIsTainted=true;} else {final int id=event.getPointerId(actionIndex);final int idBit=1 << id;if ((mTouchEventStreamPointers & idBit) != 0) {problem("ACTION_POINTER_DOWN specified pointer id " + id + " which is already down.");mTouchEventStreamIsTainted=true;} else {mTouchEventStreamPointers|=idBit;}}ensureHistorySizeIsZeroForThisAction(event);} else if (actionMasked == MotionEvent.ACTION_POINTER_UP) {if (actionIndex < 0 || actionIndex >= pointerCount) {problem("ACTION_POINTER_UP index is " + actionIndex + " but the pointer count is "+ pointerCount+ ".");mTouchEventStreamIsTainted=true;} else {final int id=event.getPointerId(actionIndex);final int idBit=1 << id;if ((mTouchEventStreamPointers & idBit) == 0) {problem("ACTION_POINTER_UP specified pointer id " + id + " which is not currently down.");mTouchEventStreamIsTainted=true;} else {mTouchEventStreamPointers&=~idBit;}}ensureHistorySizeIsZeroForThisAction(event);} else {problem("Invalid action " + MotionEvent.actionToString(action) + " for touch event.");}break;}}} else {problem("Source was not SOURCE_CLASS_POINTER.");}}  finally {finishEvent();}}  }
class C{  private static boolean isNullOrEmpty(String str){  return str == null || str.trim().length() == 0;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:58.232 -0500",hash_original_method="1D07A2DB88FBC8505561F98CE95D4D40",hash_generated_method="5CAB1804A992395EE26A5B382908E240") @Override public final boolean isValid(){  return isValid;}  }
class C{  public boolean is_superset_of(terminal_set other) throws internal_error {  not_null(other);  return other.is_subset_of(this);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static double sum(double[] a){  double sum=0.0;  for (int i=0; i < a.length; i++) {    sum+=a[i];  }  return sum;}  }
class C{  @SuppressWarnings("unchecked") @Nullable private GridOffHeapPartitionedMap offheap(@Nullable String spaceName){  return offheap.get(maskNull(spaceName));}  }
class C{  private static String allAs(int len){  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i++) {    sb.append('a');  }  return sb.toString();}  }
class C{  public ExecutionScope basicGetSuperScope(){  return superScope;}  }
class C{  public Converter2ITCase(String name){  super(name);}  }
class C{  @Action(value="/reports/cashCollectionReport-criteria") public String criteria(){  return INDEX;}  }
class C{  @Override public void earlyPreDelete(DeleteObjectQuery query,Object object){  for (  DatabaseMapping mapping : getReferenceDescriptor().getPreDeleteMappings()) {    Object nestedObject=getRealAttributeValueFromObject(object,query.getSession());    if (nestedObject != null) {      mapping.earlyPreDelete(query,nestedObject);    }  }}  }
class C{  boolean isSquare(int nNum){  if (g_bIsSquare == null || g_bIsSquare.length < nNum) {    g_bIsSquare=new boolean[m_nNodes * m_nNodes];    for (int i=0; i < m_nNodes; i++) {      g_bIsSquare[i * m_nNodes + i]=true;    }  }  return g_bIsSquare[nNum];}  }
class C{  public final void normalize(Matrix3d m1){  double[] tmp=new double[9];  double[] tmp_rot=new double[9];  double[] tmp_scale=new double[3];  tmp[0]=m1.m00;  tmp[1]=m1.m01;  tmp[2]=m1.m02;  tmp[3]=m1.m10;  tmp[4]=m1.m11;  tmp[5]=m1.m12;  tmp[6]=m1.m20;  tmp[7]=m1.m21;  tmp[8]=m1.m22;  compute_svd(tmp,tmp_scale,tmp_rot);  this.m00=tmp_rot[0];  this.m01=tmp_rot[1];  this.m02=tmp_rot[2];  this.m10=tmp_rot[3];  this.m11=tmp_rot[4];  this.m12=tmp_rot[5];  this.m20=tmp_rot[6];  this.m21=tmp_rot[7];  this.m22=tmp_rot[8];}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  public T top(){  int size=size();  if (size <= 0) {    return null;  }  return get(size - 1);}  }
class C{  private static int indexOf(final String s,final char searchChar,final int beginIndex,final int endIndex){  for (int i=beginIndex; i < endIndex; i++) {    if (s.charAt(i) == searchChar) {      return i;    }  }  return -1;}  }
class C{  public ScriptExecutionEvent(Script source,Type type,Object additional){  super(source);  m_Type=type;  m_Additional=additional;}  }
class C{  public static void logJVMInfo(){  RuntimeMXBean runtime=ManagementFactory.getRuntimeMXBean();  if (runtime != null) {    LOG.info("vmName=" + runtime.getVmName() + ", vmVendor="+ runtime.getVmVendor()+ ", vmVersion="+ runtime.getVmVersion());    LOG.info("vmInputArguments=" + runtime.getInputArguments());  }}  }
class C{  private void calculateEdgeCrossings(int startIndex,int endIndex,Vector3 startPoint,Vector3 endPoint){  if (startIndex >= numEdges() || endIndex >= numEdges()) {    return;  }  crossingPlane.set(startPoint,tmp1.set(startPoint).add(V3_UP),endPoint);  EdgePoint previousLast=lastPointAdded;  Edge edge=getEdge(endIndex);  EdgePoint end=new EdgePoint(new Vector3(endPoint),edge.toNode);  for (int i=startIndex; i < endIndex; i++) {    edge=getEdge(i);    if (edge.rightVertex.equals(startPoint) || edge.leftVertex.equals(startPoint)) {      previousLast.toNode=edge.toNode;      if (!previousLast.connectingEdges.contains(edge,true)) {        previousLast.connectingEdges.add(edge);      }    } else     if (edge.leftVertex.equals(endPoint) || edge.rightVertex.equals(endPoint)) {      if (!end.connectingEdges.contains(edge,true)) {        end.connectingEdges.add(edge);      }    } else     if (Intersector.intersectSegmentPlane(edge.leftVertex,edge.rightVertex,crossingPlane,tmp1) && !Float.isNaN(tmp1.x + tmp1.y + tmp1.z)) {      if (i != startIndex || i == 0) {        lastPointAdded.toNode=edge.fromNode;        EdgePoint crossing=new EdgePoint(new Vector3(tmp1),edge.toNode);        crossing.connectingEdges.add(edge);        addPoint(crossing);      }    }  }  if (endIndex < numEdges() - 1) {    end.connectingEdges.add(getEdge(endIndex));  }  if (!lastPointAdded.equals(end)) {    addPoint(end);  }}  }
class C{  public void fine(String msg){  throw new RuntimeException();}  }
class C{  @Override public void sendPacket(byte[] packet,int repeats){  if (_tc == null) {    log.error("Send Packet Called without setting traffic controller");    return;  }  XNetMessage msg=XNetMessage.getNMRAXNetMsg(packet);  for (int i=0; i < repeats; i++) {    _tc.sendXNetMessage(msg,null);  }}  }
class C{  public boolean next(){  _offset=nextOffset();  return _offset >= 0;}  }
class C{  public static void startMouseCapture(Context cx,Scriptable thisObj,Object[] args,Function funObj){  int len=args.length;  GlobalWrapper gw=(GlobalWrapper)thisObj;  SVGGlobal global=(SVGGlobal)gw.window;  if (len >= 3) {    EventTarget et=null;    if (args[0] instanceof NativeJavaObject) {      Object o=((NativeJavaObject)args[0]).unwrap();      if (o instanceof EventTarget) {        et=(EventTarget)o;      }    }    if (et == null) {      throw Context.reportRuntimeError("First argument to startMouseCapture must be an EventTarget");    }    boolean sendAll=Context.toBoolean(args[1]);    boolean autoRelease=Context.toBoolean(args[2]);    global.startMouseCapture(et,sendAll,autoRelease);  }}  }
class C{  @Override public void write(int oneByte) throws IOException {  mSingleByteArray[0]=(byte)(0xff & oneByte);  write(mSingleByteArray);}  }
class C{  public void add_return(VasaAssociationObject param){  if (local_return == null) {    local_return=new VasaAssociationObject[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(VasaAssociationObject[])list.toArray(new VasaAssociationObject[list.size()]);}  }
class C{  public static void addFiles(ArrayList<File> list,String[] args){  for (int i=0; i < args.length; i++) {    if (!args[i].equals("Exercise_12_27.java") && !args[i].equals("Exercise_12_27.class")) {      list.add(new File(args[i]));    }  }}  }
class C{  private synchronized void initializePermissionsMap(){  Field[] fields=Manifest.permission.class.getFields();  for (  Field field : fields) {    String name=null;    try {      name=(String)field.get("");    } catch (    IllegalAccessException e) {      Log.e(TAG,"Could not access field",e);    }    mPermissions.add(name);  }}  }
class C{  public static String determineStartupURL(IResource resource,boolean isExternalLaunch) throws CoreException {  ILaunchShortcutStrategy strategy=null;  IProject project=resource.getProject();  ExtensionQuery<ILaunchShortcutStrategyProvider> extQuery=new ExtensionQuery<ILaunchShortcutStrategyProvider>(GWTPlugin.PLUGIN_ID,"launchShortcutStrategy","class");  List<ExtensionQuery.Data<ILaunchShortcutStrategyProvider>> strategyProviderInfos=extQuery.getData();  for (  ExtensionQuery.Data<ILaunchShortcutStrategyProvider> data : strategyProviderInfos) {    strategy=data.getExtensionPointData().getStrategy(project);    break;  }  if (strategy == null) {    if (WebAppUtilities.isWebApp(project)) {      strategy=new WebAppLaunchShortcutStrategy();    } else {      assert (GWTNature.isGWTProject(project));      strategy=new LegacyGWTLaunchShortcutStrategy();    }  }  return strategy.generateUrl(resource,isExternalLaunch);}  }
class C{  public void parseTarHeader(byte[] header){  int offset=0;  name=TarUtils.parseName(header,offset,NAMELEN);  offset+=NAMELEN;  mode=(int)TarUtils.parseOctal(header,offset,MODELEN);  offset+=MODELEN;  userId=(int)TarUtils.parseOctal(header,offset,UIDLEN);  offset+=UIDLEN;  groupId=(int)TarUtils.parseOctal(header,offset,GIDLEN);  offset+=GIDLEN;  size=TarUtils.parseOctal(header,offset,SIZELEN);  offset+=SIZELEN;  modTime=TarUtils.parseOctal(header,offset,MODTIMELEN);  offset+=MODTIMELEN;  offset+=CHKSUMLEN;  linkFlag=header[offset++];  linkName=TarUtils.parseName(header,offset,NAMELEN);  offset+=NAMELEN;  magic=TarUtils.parseName(header,offset,MAGICLEN);  offset+=MAGICLEN;  userName=TarUtils.parseName(header,offset,UNAMELEN);  offset+=UNAMELEN;  groupName=TarUtils.parseName(header,offset,GNAMELEN);  offset+=GNAMELEN;  devMajor=(int)TarUtils.parseOctal(header,offset,DEVLEN);  offset+=DEVLEN;  devMinor=(int)TarUtils.parseOctal(header,offset,DEVLEN);}  }
class C{  protected Jerry(Jerry parent,Node... nodes){  this.parent=parent;  this.nodes=nodes;  this.builder=parent.builder;}  }
class C{  private static ContactGroupEntry buildGroup(ContactsExampleParameters parameters){  ContactGroupEntry groupEntry=new ContactGroupEntry();  ElementHelper.buildGroup(groupEntry,parameters.getElementDesc());  return groupEntry;}  }
class C{  public int doEndTag() throws JspException {  return EVAL_PAGE;}  }
class C{  public static void main(String[] args) throws Exception {  ICluster alice=Cluster.joinAwait();  ICluster bob=Cluster.joinAwait(alice.address());  Map<String,String> metadata=ImmutableMap.of("name","Carol");  ICluster carol=Cluster.joinAwait(metadata,alice.address());  ClusterConfig configWithFixedPort=ClusterConfig.builder().membershipConfig(MembershipConfig.builder().seedMembers(alice.address()).build()).transportConfig(TransportConfig.builder().portAutoIncrement(false).port(3000).build()).build();  ICluster dan=Cluster.joinAwait(configWithFixedPort);  ClusterConfig configWithSyncGroup=ClusterConfig.builder().membershipConfig(MembershipConfig.builder().seedMembers(alice.address(),bob.address(),carol.address(),dan.address()).syncGroup("another cluster").build()).build();  ICluster eve=Cluster.joinAwait(configWithSyncGroup);  System.out.println("Alice (" + alice.address() + ") cluster: "+ alice.members().stream().map(null).collect(joining("\n","\n","\n")));  System.out.println("Bob (" + bob.address() + ") cluster: "+ bob.members().stream().map(null).collect(joining("\n","\n","\n")));  System.out.println("Carol (" + carol.address() + ") cluster: "+ carol.members().stream().map(null).collect(joining("\n","\n","\n")));  System.out.println("Dan (" + dan.address() + ") cluster: "+ dan.members().stream().map(null).collect(joining("\n","\n","\n")));  System.out.println("Eve (" + eve.address() + ") cluster: "+ eve.members().stream().map(null).collect(joining("\n","\n","\n")));}  }
class C{  public void add(final short operand){  this.value+=operand;}  }
class C{  public Vertex applyASSOCIATE(Vertex operator,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex source=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex target=arguments.get(1).getTarget().applyQuotient(variables,network);  Vertex association=arguments.get(2).getTarget().applyQuotient(variables,network);  Relationship relationship=null;  if (operator.is(Primitive.DISSOCIATE)) {    if (source.hasRelationship(association,target)) {      relationship=source.removeRelationship(association,target);    } else     if (target.instanceOf(Primitive.WORD) && target.getData() instanceof String) {      if (!Utils.isCapitalized((String)target.getData())) {        Vertex capitalized=network.createWord(Utils.capitalize((String)target.getData()));        if (source.hasRelationship(association,capitalized)) {          relationship=source.removeRelationship(association,capitalized);        }      } else {        Vertex lower=network.createWord(((String)target.getData()).toLowerCase());        if (source.hasRelationship(association,lower)) {          relationship=source.removeRelationship(association,lower);        }      }    } else {      Collection<Relationship> words=target.getRelationships(Primitive.WORD);      if (words != null) {        Set<Vertex> processed=new HashSet<Vertex>();        processed.add(target);        for (        Relationship word : words) {          Collection<Relationship> otherMeanings=word.getTarget().getRelationships(Primitive.MEANING);          if (source.hasRelationship(word.getTarget())) {            relationship=source.removeRelationship(association,word.getTarget());            break;          }          if (otherMeanings != null) {            for (            Relationship meaning : otherMeanings) {              if (!processed.contains(meaning.getTarget())) {                processed.add(meaning.getTarget());                if (source.hasRelationship(meaning.getTarget())) {                  relationship=source.removeRelationship(association,meaning.getTarget());                  break;                }              }            }          }        }      }    }    if (relationship == null) {      relationship=source.removeRelationship(association,target);    }    network.getBot().log(this,"Removing relation",Level.FINE,source,association,target);  } else   if (operator.is(Primitive.WEAKASSOCIATE)) {    relationship=source.addWeakRelationship(association,target,0.1f);    network.getBot().log(this,"Adding weak relation",Level.FINE,source,association,target);  } else {    relationship=source.addRelationship(association,target);    network.getBot().log(this,"Adding relation",Level.FINE,source,association,target);  }  if (arguments.size() == 5) {    Vertex metaType=arguments.get(3).getTarget().applyQuotient(variables,network);    Vertex metaTarget=arguments.get(4).getTarget().applyQuotient(variables,network);    if (!metaTarget.is(Primitive.NULL)) {      Vertex meta=network.createMeta(relationship);      meta.addRelationship(metaType,metaTarget);      network.getBot().log(this,"Adding relation meta",Level.FINER,metaType,metaTarget);    }  }  return network.createVertex(Primitive.KNOWN);}  }
class C{  public boolean hasBytes(long bytes){  if (hasPieces == null) {    return false;  }  int pieceIndex=(int)(bytes / torrentHandle.torrentFile().pieceLength());  return hasPieces[pieceIndex];}  }
class C{  @Override public void writeState(FacesContext context,Object state) throws IOException {  RenderKit rk=context.getRenderKit();  ResponseStateManager rsm=rk.getResponseStateManager();  rsm.writeState(context,state);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMLinearGradientElement(prefix,(AbstractDocument)doc);}  }
class C{  protected double[] svmlightToArray(String row) throws Exception {  double[] result;  StringTokenizer tok;  int index;  int max;  String col;  double value;  try {    max=0;    tok=new StringTokenizer(row," \t");    tok.nextToken();    while (tok.hasMoreTokens()) {      col=tok.nextToken();      if (col.startsWith("#"))       break;      if (col.startsWith("qid:"))       continue;      index=Integer.parseInt(col.substring(0,col.indexOf(":")));      if (index > max)       max=index;    }    tok=new StringTokenizer(row," \t");    result=new double[max + 1];    result[result.length - 1]=Double.parseDouble(tok.nextToken());    while (tok.hasMoreTokens()) {      col=tok.nextToken();      if (col.startsWith("#"))       break;      if (col.startsWith("qid:"))       continue;      index=Integer.parseInt(col.substring(0,col.indexOf(":")));      value=Double.parseDouble(col.substring(col.indexOf(":") + 1));      result[index - 1]=value;    }  } catch (  Exception e) {    System.err.println("Error parsing line '" + row + "': "+ e);    throw new Exception(e);  }  return result;}  }
class C{  public void stopLoadMore(){  if (mPullLoading == true) {    mPullLoading=false;    mFooterView.setState(XListViewFooter.STATE_NORMAL);  }}  }
class C{  public VarDecl toVarDecl(){  VarDecl result=new VarDecl();  result.var=this.var;  result.val=this.val;  result.setOrigin(this.getOrigin());  result.isEq=true;  return result;}  }
class C{  public static CasualtyDetails RandomAACasualties(final Collection<Unit> planes,final DiceRoll dice,final IDelegateBridge bridge,final boolean allowMultipleHitsPerUnit){{    final Set<Unit> duplicatesCheckSet1=new HashSet<>(planes);    if (planes.size() != duplicatesCheckSet1.size()) {      throw new IllegalStateException("Duplicate Units Detected: Original List:" + planes + "  HashSet:"+ duplicatesCheckSet1);    }  }  final int hitsLeft=dice.getHits();  if (hitsLeft <= 0) {    return new CasualtyDetails();  }  final CasualtyDetails finalCasualtyDetails=new CasualtyDetails();  final int planeHP=(allowMultipleHitsPerUnit ? getTotalHitpointsLeft(planes) : planes.size());  final List<Unit> planesList=new ArrayList<>();  for (  final Unit plane : planes) {    final int hpLeft=allowMultipleHitsPerUnit ? (UnitAttachment.get(plane.getType()).getHitPoints() - plane.getHits()) : (Math.min(1,UnitAttachment.get(plane.getType()).getHitPoints() - plane.getHits()));    for (int hp=0; hp < hpLeft; ++hp) {      planesList.add(plane);    }  }  if (hitsLeft < planeHP) {    final int[] hitRandom=bridge.getRandom(planeHP,hitsLeft,null,DiceType.ENGINE,"Deciding which planes should die due to AA fire");    int pos=0;    for (    final int element : hitRandom) {      pos+=element;      final Unit unitHit=planesList.remove(pos % planesList.size());      if (allowMultipleHitsPerUnit && (Collections.frequency(finalCasualtyDetails.getDamaged(),unitHit) < (getTotalHitpointsLeft(unitHit) - 1))) {        finalCasualtyDetails.addToDamaged(unitHit);      } else {        finalCasualtyDetails.addToKilled(unitHit);      }    }  } else {    for (    final Unit plane : planesList) {      if (finalCasualtyDetails.getKilled().contains(plane)) {        finalCasualtyDetails.addToDamaged(plane);      } else {        finalCasualtyDetails.addToKilled(plane);      }    }  }  return finalCasualtyDetails;}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  public static void parseModelToContentValues(Object model,ContentValues contentValues){  if (contentValues.size() > 0)   contentValues.clear();  Class<?> clazz=model.getClass();  Field[] fields=clazz.getDeclaredFields();  Class<?> fieldType=null;  Object fieldVal=null;  for (  Field field : fields) {    try {      if (field.isAccessible() == false)       field.setAccessible(true);      Column column=field.getAnnotation(Column.class);      fieldType=field.getType();      fieldVal=field.get(model);      if (column == null || fieldVal == null)       continue;      if (fieldType.equals(int.class)) {        contentValues.put(column.name(),field.getInt(model));      } else       if (fieldType.equals(Integer.class)) {        contentValues.put(column.name(),(Integer)field.get(model));      } else       if (fieldType.equals(short.class)) {        contentValues.put(column.name(),field.getShort(model));      } else       if (fieldType.equals(Short.class)) {        contentValues.put(column.name(),(Short)field.get(model));      } else       if (fieldType.equals(long.class)) {        contentValues.put(column.name(),field.getLong(model));      } else       if (fieldType.equals(Long.class)) {        contentValues.put(column.name(),(Long)field.get(model));      } else       if (fieldType.equals(float.class)) {        contentValues.put(column.name(),field.getFloat(model));      } else       if (fieldType.equals(Float.class)) {        contentValues.put(column.name(),(Float)field.get(model));      } else       if (fieldType.equals(double.class)) {        contentValues.put(column.name(),field.getDouble(model));      } else       if (fieldType.equals(Double.class)) {        contentValues.put(column.name(),(Double)field.get(model));      } else       if (fieldType.equals(boolean.class)) {        if (field.getBoolean(model) == true) {          contentValues.put(column.name(),"1");        } else {          contentValues.put(column.name(),"0");        }      } else       if (fieldType.equals(Boolean.class)) {        if ((Boolean)field.get(model) == true) {          contentValues.put(column.name(),"1");        } else {          contentValues.put(column.name(),"0");        }      } else       if (fieldType.equals(String.class)) {        contentValues.put(column.name(),(String)field.get(model));      } else       if (fieldType.equals(byte[].class)) {        contentValues.put(column.name(),(byte[])field.get(model));      } else       if (fieldType.equals(Date.class)) {        Date date=(Date)field.get(model);        contentValues.put(column.name(),DateUtils.formatDate2Str(date));      }    } catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }  }}  }
class C{  public void close(){  if (null != inputStreamReader) {    CarbonUtil.closeStreams(inputStreamReader);  }}  }
class C{  @Override protected void onDeVoice(String target,String sourceNick,String sourceLogin,String sourceHostname,String recipient){  Message message=new Message(service.getString(R.string.message_devoice,sourceNick,recipient));  message.setColor(Message.COLOR_BLUE);  message.setIcon(R.drawable.voice);  server.getConversation(target).addMessage(message);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);  service.sendBroadcast(intent);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CONSTRAINT_BODY___CONSTRAINT_EXPR_1:    return getConstraintExpr_1();case UmplePackage.CONSTRAINT_BODY___ANONYMOUS_CONSTRAINT_BODY_11:  return getAnonymous_constraintBody_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private boolean[] computeZeroIndicatorVector() throws DMLRuntimeException {  boolean[] ret=new boolean[_numRows];  final int blksz=BitmapEncoder.BITMAP_BLOCK_SZ;  final int numVals=getNumValues();  Arrays.fill(ret,true);  for (int k=0; k < numVals; k++) {    int boff=_ptr[k];    int blen=len(k);    int off=0;    int slen;    for (int bix=0; bix < blen; bix+=slen + 1, off+=blksz) {      slen=_data[boff + bix];      for (int i=1; i <= slen; i++) {        ret[off + _data[boff + bix + i]]&=false;      }    }  }  return ret;}  }
class C{  public void ensurePositiveValue(double value,String settingName){  if (value < 0) {    throw new SettingsError("Negative value (" + value + ") not accepted for setting "+ settingName);  }}  }
class C{  private boolean canUseWindowBlitter(){  if (!isShowing() || (!(getParent() instanceof JComponent) && !(getView() instanceof JComponent))) {    return false;  }  if (isPainting()) {    return false;  }  Rectangle dirtyRegion=RepaintManager.currentManager(this).getDirtyRegion((JComponent)getParent());  if (dirtyRegion != null && dirtyRegion.width > 0 && dirtyRegion.height > 0) {    return false;  }  Rectangle clip=new Rectangle(0,0,getWidth(),getHeight());  Rectangle oldClip=new Rectangle();  Rectangle tmp2=null;  Container parent;  Component lastParent=null;  int x, y, w, h;  for (parent=this; parent != null && isLightweightComponent(parent); parent=parent.getParent()) {    x=parent.getX();    y=parent.getY();    w=parent.getWidth();    h=parent.getHeight();    oldClip.setBounds(clip);    SwingUtilities.computeIntersection(0,0,w,h,clip);    if (!clip.equals(oldClip))     return false;    if (lastParent != null && parent instanceof JComponent && !((JComponent)parent).isOptimizedDrawingEnabled()) {      Component comps[]=parent.getComponents();      int index=0;      for (int i=comps.length - 1; i >= 0; i--) {        if (comps[i] == lastParent) {          index=i - 1;          break;        }      }      while (index >= 0) {        tmp2=comps[index].getBounds(tmp2);        if (tmp2.intersects(clip))         return false;        index--;      }    }    clip.x+=x;    clip.y+=y;    lastParent=parent;  }  if (parent == null) {    return false;  }  return true;}  }
class C{  static String escapeJavaScript(String s){  if (s == null) {    return null;  }  if (s.length() == 0) {    return "";  }  StringBuilder buff=new StringBuilder(s.length());  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '"':      buff.append("\\\"");    break;case '\'':  buff.append("\\'");break;case '\\':buff.append("\\\\");break;case '\n':buff.append("\\n");break;case '\r':buff.append("\\r");break;case '\t':buff.append("\\t");break;default :buff.append(c);break;}}return buff.toString();}  }
class C{  private int[] doComplement(){  if (empty()) {    int[] result=new int[2];    result[0]=0x0000;    result[1]=0x10FFFF;    return result;  }  int[] result=new int[chars.length + 2];  int i=0;  int index=0;  if (chars[0] != 0x0000) {    result[index++]=0x0000;  }  while (i < chars.length) {    if (chars[i] != 0x0000) {      result[index++]=chars[i] - 1;    }    if (chars[i + 1] != 0x10FFFF) {      result[index++]=chars[i + 1] + 1;    }    i+=2;  }  if (chars[i - 1] != 0x10FFFF) {    result[index++]=0x10FFFF;  }  if (result.length > index) {    int[] tmpbuf=new int[index];    System.arraycopy(result,0,tmpbuf,0,index);    return tmpbuf;  }  return result;}  }
class C{  public void startFtpUpload(final String hostname,final String uri,final int fileSizeOctet,final int reportInterval){  initReportTask(reportInterval,false);  mTask.setReportInterval(true);  startFtpUpload(hostname,SpeedTestConst.FTP_DEFAULT_PORT,uri,fileSizeOctet,SpeedTestConst.FTP_DEFAULT_USER,SpeedTestConst.FTP_DEFAULT_PASSWORD);}  }
class C{  public void onJpegEncodeDone(long id,TaskImage input,TaskImage result,byte[] data,TaskInfo.Destination aDestination){  TaskInfo job=new TaskInfo(id,input,result,aDestination);  final ImageProcessorListener listener=mImageTaskManager.getProxyListener();  listener.onResultCompressed(job,new CompressedPayload(data));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static boolean runRemoteReplicationStepsOnSource(UnManagedVolume unManagedVolume,Volume srcVolume,List<UnManagedVolume> unManagedVolumes,String type,DbClient dbClient){  boolean removeUnManagedVolume=false;  StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();  StringSet targetUnManagedVolumeGuids=unManagedVolumeInformation.get(SupportedVolumeInformation.REMOTE_MIRRORS.toString());  _logger.info("Type : {} --> Source Volume {}",type,srcVolume.getNativeGuid());  if (null != targetUnManagedVolumeGuids && !targetUnManagedVolumeGuids.isEmpty()) {    StringSet targetVolumeNativeGuids=VolumeIngestionUtil.getListofVolumeIds(targetUnManagedVolumeGuids);    List<URI> targetUris=VolumeIngestionUtil.getVolumeUris(targetVolumeNativeGuids,dbClient);    _logger.info("Expected targets : {} -->Found Target URIs : {}",targetUnManagedVolumeGuids.size(),targetUris.size());    _logger.debug("Expected Targets {} : Found {}",Joiner.on("\t").join(targetVolumeNativeGuids),Joiner.on("\t").join(targetUris));    if (targetUris.size() != targetUnManagedVolumeGuids.size()) {      _logger.info("Found Target Volumes still not ingested.Skipping Remote Replication Link establishment.");    } else {      List<Volume> targetVolumes=dbClient.queryObject(Volume.class,targetUris);      for (      Volume targetVolume : targetVolumes) {        VirtualPool sourceVPool=dbClient.queryObject(VirtualPool.class,srcVolume.getVirtualPool());        Map<URI,VpoolRemoteCopyProtectionSettings> settings=sourceVPool.getRemoteProtectionSettings(sourceVPool,dbClient);        if (null == settings || settings.size() == 0 || !settings.containsKey(targetVolume.getVirtualArray())) {          _logger.info("Target Volume's VArray {} is not matching already ingested source volume virtual pool's remote VArray {}",targetVolume.getVirtualArray(),Joiner.on(",").join(settings.keySet()));          targetUris.remove(targetVolume.getId());        } else {          _logger.info("Set parent for volume {}",targetVolume.getId());          targetVolume.setSrdfParent(new NamedURI(srcVolume.getId(),srcVolume.getLabel()));          targetVolume.clearInternalFlags(INTERNAL_VOLUME_FLAGS);        }      }      if (!targetUris.isEmpty()) {        srcVolume.setSrdfTargets(VolumeIngestionUtil.convertUrisToStrings(targetUris));        dbClient.persistObject(targetVolumes);        removeUnManagedVolume=true;        List<UnManagedVolume> targetUnManagedVolumes=dbClient.queryObject(UnManagedVolume.class,VolumeIngestionUtil.getUnManagedVolumeUris(targetUnManagedVolumeGuids,dbClient));        for (        UnManagedVolume targetUnManagedVol : targetUnManagedVolumes) {          if (!targetUris.contains(targetUnManagedVol.getId())) {            _logger.info("Setting unmanaged target inactive {}",targetUnManagedVol.getId());            targetUnManagedVol.setInactive(true);            unManagedVolumes.add(targetUnManagedVol);          } else {            _logger.info("Skipping deletion of unmanaged volume {} as remote  links are not established",targetUnManagedVol.getId());          }        }        _logger.info("Source Volume successfully ingested with remote replication links",srcVolume.getNativeGuid());      } else {        _logger.info("Source Volume failed to ingest with remote replication links",srcVolume.getNativeGuid());      }    }  }  return removeUnManagedVolume;}  }
class C{  @Override public boolean onItemUse(ItemStack par1ItemStack,EntityPlayer par2EntityPlayer,World par3World,int x,int y,int z,int par7,float par8,float par9,float par10){  if (!par3World.isRemote) {    TileEntity tileEntity=par3World.getTileEntity(x,y,z);    if (tileEntity != null) {      if (tileEntity instanceof TileLauncherPrefab) {        TileLauncherPrefab missileLauncher=(TileLauncherPrefab)tileEntity;        if (missileLauncher.getFrequency() > 0) {          setFrequency(missileLauncher.getFrequency(),par1ItemStack);          par2EntityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.designator.setFreq")+ " "+ EnumColor.DARK_GREY+ getFrequency(par1ItemStack)));        } else {          par2EntityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.designator.failFreq")));        }      }    }  }  return false;}  }
class C{  private static String parseExpression(String text,int startPos,int len,OdbcEscapeType type,Pattern pattern){  String val=parseExpression(text,startPos,len);  if (!pattern.matcher(val).matches())   throw new IgniteException("Invalid " + type + " escape sequence: "+ substring(text,startPos,len));  return val;}  }
class C{  public DefaultBoundHashOperations(H key,RedisOperations<H,?> operations){  super(key,operations);  this.ops=operations.opsForHash();}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x11A1F128,version=271) public boolean sceUsbCamGetAutoImageReverseState(){  return autoImageReverseSW;}  }
class C{  public RestAssessmentDetails loadAssessmentDetails(final String applicationNo){  RestAssessmentDetails assessmentDetails=new RestAssessmentDetails();  PropertyMutation propertyMutation=getPropertyMutationByAssesmentNoAndApplicationNo(null,applicationNo);  BasicProperty basicProperty;  PropertyImpl property;  if (propertyMutation != null) {    basicProperty=propertyMutation.getBasicProperty();    if (basicProperty != null) {      assessmentDetails.setAssessmentNo(basicProperty.getUpicNo());      assessmentDetails.setPropertyAddress(basicProperty.getAddress().toString());      property=(PropertyImpl)basicProperty.getProperty();      assessmentDetails.setLocalityName(basicProperty.getPropertyID().getLocality().getName());      if (property != null) {        assessmentDetails.setOwnerDetails(prepareOwnerInfo(property));        if (property.getPropertyDetail().getTotalBuiltupArea() != null && property.getPropertyDetail().getTotalBuiltupArea().getArea() != null)         assessmentDetails.setPlinthArea(property.getPropertyDetail().getTotalBuiltupArea().getArea());        Ptdemand currentPtdemand=ptDemandDAO.getNonHistoryCurrDmdForProperty(property);        BigDecimal totalTaxDue=BigDecimal.ZERO;        if (currentPtdemand != null) {          for (          EgDemandDetails demandDetails : currentPtdemand.getEgDemandDetails()) {            if (demandDetails.getAmount().compareTo(demandDetails.getAmtCollected()) > 0) {              totalTaxDue=totalTaxDue.add(demandDetails.getAmount().subtract(demandDetails.getAmtCollected()));            }          }        }        assessmentDetails.setTotalTaxDue(totalTaxDue);      }    }    if (StringUtils.isNotBlank(propertyMutation.getReceiptNum())) {      assessmentDetails.setFeeReceipt(propertyMutation.getReceiptNum());      assessmentDetails.setIsMutationFeePaid("Y");      assessmentDetails.setMutationFee(BigDecimal.ZERO);    } else {      assessmentDetails.setIsMutationFeePaid("N");      assessmentDetails.setMutationFee(propertyMutation.getMutationFee());    }    assessmentDetails.setApplicationNo(propertyMutation.getApplicationNo());  } else {    assessmentDetails.setIsMutationFeePaid("N");  }  return assessmentDetails;}  }
class C{  public ActionList createActionList(boolean keepOffsets){  processSkipEntries();  ActionList list=new ActionList(keepOffsets);  list.grow(count);  Action a;  int length=actions.length;  if (keepOffsets) {    for (int i=0; i < length; i++) {      int offset=startOffset + i;      if ((a=actions[i]) != null)       list.insert(offset,a);      if ((a=lines[i]) != null)       list.insert(offset,a);      if ((a=registers[i]) != null)       list.insert(offset,a);      if ((a=labels[i]) != null)       list.insert(offset,a);    }    if ((a=labels[length]) != null)     list.insert(startOffset + length,a);  } else {    for (int i=0; i < length; i++) {      if ((a=labels[i]) != null)       list.append(a);      if ((a=lines[i]) != null)       list.append(a);      if ((a=registers[i]) != null)       list.append(a);      if ((a=actions[i]) != null)       list.append(a);    }    if ((a=labels[length]) != null)     list.append(a);  }  return list;}  }
class C{  @RequestMapping(value="/tagTypes/{tagTypeCode}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_TAG_TYPES_DELETE) public TagType deleteTagType(@PathVariable("tagTypeCode") String tagTypeCode){  return tagTypeService.deleteTagType(new TagTypeKey(tagTypeCode));}  }
class C{  public GetFieldMappingsRequest local(boolean local){  this.local=local;  return this;}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  protected void initialize(Instances data,int type,int[] indices){  m_Data=new Instances(data,0);  m_Type=type;  m_AllowedIndices=new int[indices.length];  System.arraycopy(indices,0,m_AllowedIndices,0,indices.length);  locate();  m_Indices=find(true);  m_LocatorIndices=find(false);}  }
class C{  @TargetApi(21) public ListItemView(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  super(context,attrs,defStyleAttr,defStyleRes);  loadThemeAttributes(attrs,defStyleAttr,defStyleRes);}  }
class C{  public GeoPoint decode(long latBits,long lonBits,GeoPoint out){  final double lat=decodeCoordinate(latBits);  final double lon=decodeCoordinate(lonBits);  return out.reset(lat,lon);}  }
class C{  public static UglifyJs uglifyJs(){  return new UglifyJs(UGLIFY);}  }
class C{  private boolean questCanBeGiven(final Player player,final Long currenttime){  if (!player.hasQuest(QUEST_SLOT)) {    return true;  }  if (player.getQuest(QUEST_SLOT,0).equals("done")) {    final String questLast=player.getQuest(QUEST_SLOT,1);    final Long time=currenttime - Long.parseLong(questLast);    if (time > questdelay) {      return true;    }  }  return false;}  }
class C{  private void checkLinkAttributes(){  log.info("analyzing network links...");  double cellWidth=((Network)this.network).getEffectiveCellSize();  int writerIndex=0;  for (  Link link : this.network.getLinks().values()) {    double geometricLength=Math.sqrt(Math.pow(link.getToNode().getCoord().getX() - link.getFromNode().getCoord().getX(),2) + Math.pow(link.getToNode().getCoord().getY() - link.getFromNode().getCoord().getY(),2));    this.geometricLengths.put(link.getId(),geometricLength);    this.totalLength+=link.getLength();    this.totalGLength+=geometricLength;    if (link.getLength() < cellWidth) {      this.lengthBelowStorageCapacity.add(link);      writerIndex++;    }  }  log.info(writerIndex + " warnings about storage capacity written...");  log.info("...done");  this.linksChecked=true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Matrix(int m,int n,double s){  this.rows=m;  this.cols=n;  data=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      data[i][j]=s;    }  }}  }
class C{  private static String appendNested(String text,int startPos,int endPos,LinkedList<OdbcEscapeParseResult> nestedRess){  StringBuilder res=new StringBuilder();  int curPos=startPos;  for (  OdbcEscapeParseResult nestedRes : nestedRess) {    res.append(text,curPos,nestedRes.originalStart());    res.append(nestedRes.result());    curPos=nestedRes.originalStart() + nestedRes.originalLength();  }  res.append(text,curPos,endPos);  return res.toString();}  }
class C{  public static Document convertToDocument(String string,boolean nameSpaceAware) throws ParserConfigurationException, SAXException, IOException {  if (string == null) {    return null;  }  DocumentBuilderFactory dfactory=DocumentBuilderFactory.newInstance();  dfactory.setNamespaceAware(nameSpaceAware);  dfactory.setValidating(false);  dfactory.setIgnoringElementContentWhitespace(true);  dfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);  DocumentBuilder builder=dfactory.newDocumentBuilder();  Document doc=builder.parse(new InputSource(new StringReader(string)));  return doc;}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){  m_listenees.remove(eventName);}  }
class C{  protected void processSequenceDefinition(SequenceDefinition definition,final boolean createTables,final boolean createSequences,final boolean replace,HashSet<String> createdTableNames,HashSet<String> droppedTableNames) throws EclipseLinkException {  try {    if (definition.isTableSequenceDefinition()) {      TableDefinition tableDefinition=((TableSequenceDefinition)definition).buildTableDefinition();      if (!createdTableNames.contains(tableDefinition.getFullName())) {        createdTableNames.add(tableDefinition.getFullName());        boolean exists=checkTableExists(tableDefinition);        if (createTables) {          if ((shouldWriteToDatabase() && !exists) || !shouldWriteToDatabase()) {            createObject(tableDefinition);          }        } else {          if (replace) {            dropObject(tableDefinition);            createObject(tableDefinition);          }        }      }    }  } catch (  DatabaseException exception) {  }  try {    if (createSequences) {      createObject(definition);    } else {      try {        if (definition.isTableSequenceDefinition()) {          if (((TableSequenceDefinition)definition).shouldDropTableDefinition()) {            String tableDefinitionTableName=((TableSequenceDefinition)definition).getSequenceTableName();            if (droppedTableNames.contains(tableDefinitionTableName)) {              return;            } else {              droppedTableNames.add(tableDefinitionTableName);            }          }        }        dropObject(definition);      } catch (      DatabaseException exception) {      }      if (replace) {        createObject(definition);      }    }  } catch (  Exception exception) {  }}  }
class C{  public void executeQuery(boolean mustExecuteOnMaster,ExecutionResult executionResult,final ClientPrepareResult clientPrepareResult,ParameterHolder[] parameters,int resultSetScrollType) throws QueryException {  cmdPrologue();  try {    if (clientPrepareResult.getParamCount() == 0 && !clientPrepareResult.isQueryMultiValuesRewritable()) {      ComExecute.sendDirect(writer,clientPrepareResult.getQueryParts().get(0));    } else {      writer.startPacket(0);      ComExecute.sendSubCmd(writer,clientPrepareResult,parameters);      writer.finishPacketWithoutRelease(true);    }    getResult(executionResult,resultSetScrollType,false,true);  } catch (  QueryException queryException) {    throw throwErrorWithQuery(parameters,queryException,clientPrepareResult);  }catch (  MaxAllowedPacketException e) {    if (e.isMustReconnect())     connect();    throw new QueryException("Could not send query: " + e.getMessage(),-1,INTERRUPTED_EXCEPTION.getSqlState(),e);  }catch (  IOException e) {    throw new QueryException("Could not send query: " + e.getMessage(),-1,CONNECTION_EXCEPTION.getSqlState(),e);  } finally {    writer.releaseBufferIfNotLogging();  }}  }
class C{  @Override public Integer next(){  int res=next;  next=iter.hasNext() ? iter.next() : null;  return res;}  }
class C{  public UTFDataFormatException(){}  }
class C{  private boolean isAtEndOfFile(BufferedReader bufferedReader) throws IOException {  bufferedReader.mark(MAX_LOOKAHEAD);  StreamTokenizer tokenizer=new StreamTokenizer(bufferedReader);  int type=tokenizer.nextToken();  if (type == StreamTokenizer.TT_EOF) {    return true;  }  bufferedReader.reset();  return false;}  }
class C{  @Override public boolean retainAll(Collection<?> c){  boolean result;  Iterator<?> iter;  Object o;  result=false;  iter=iterator();  while (iter.hasNext()) {    o=iter.next();    if (!c.contains(o)) {      result=remove(o) || result;    }  }  m_RecalcHashCode=result;  return result;}  }
class C{  public void actionPerformed(ActionEvent ae){  String command=ae.getActionCommand();  if (command == DisplayPaletteCmd) {    if (Debug.debugging("layer")) {      Debug.output(getName() + " displaying palette");    }    showPalette();  } else   if (command == HidePaletteCmd) {    if (Debug.debugging("layer")) {      Debug.output(getName() + " hiding palette");    }    hidePalette();  } else   if (command == DisplayPropertiesCmd) {    Inspector inspector=new Inspector();    inspector.inspectPropertyConsumer(this);  }}  }
class C{  public void replaceStopFacilityInRoute(TransitRoute transitRoute,Id<TransitStopFacility> toReplaceId,Id<TransitStopFacility> replaceWithId){  TransitStopFacility toReplace=schedule.getFacilities().get(toReplaceId);  TransitStopFacility replaceWith=schedule.getFacilities().get(replaceWithId);  if (toReplace == null) {    throw new IllegalArgumentException("StopFacility " + toReplaceId + " not found in schedule!");  } else   if (replaceWith == null) {    throw new IllegalArgumentException("StopFacility " + replaceWithId + " not found in schedule!");  }  replaceStopFacilityInRoute(transitRoute,toReplace,replaceWith);}  }
class C{  @Override public void enable(){  start();}  }
class C{  private int handleSC(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 2) == 'H') {    if (contains(value,index + 3,2,"OO","ER","EN","UY","ED","EM")) {      if (contains(value,index + 3,2,"ER","EN")) {        result.append("X","SK");      } else {        result.append("SK");      }    } else {      if (index == 0 && !isVowel(charAt(value,3)) && charAt(value,3) != 'W') {        result.append('X','S');      } else {        result.append('X');      }    }  } else   if (contains(value,index + 2,1,"I","E","Y")) {    result.append('S');  } else {    result.append("SK");  }  return index + 3;}  }
class C{  public static String nextGlobal(){synchronized (lock) {    return getInstance().next();  }}  }
class C{  public static int forward(HGSearchResult<?> rs,int maxSteps){  int i=0;  for (; i < maxSteps && rs.hasNext(); i++)   rs.next();  return i;}  }
class C{  public void addDataPoint(Vec v,int[] classes,int classification){  addDataPoint(v,classes,classification,1.0);}  }
class C{  @Override public void buildKernel(Instances data) throws Exception {  super.buildKernel(data);}  }
class C{  @Override protected void buildActions(final List<String> list){  list.add(ActionType.OPEN.getRepresentation());  super.buildActions(list);  list.remove(ActionType.USE.getRepresentation());}  }
class C{  public HandleException(Throwable cause){  super(cause);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,boolean strictQuotes){  this(reader,separator,quotechar,CSVParser.DEFAULT_ESCAPE_CHARACTER,DEFAULT_SKIP_LINES,strictQuotes);}  }
class C{  public boolean interiorIntersects(S2Cap other){  return !complement().contains(other);}  }
class C{  private void hot(){  if (status != Status.HOT) {    hotSize++;  }  status=Status.HOT;}  }
class C{  public void append(final Object value){  if (needsComma) {    sb.append(m_separator);  }  needsComma=true;  sb.append(value);}  }
class C{  private void handleException(Throwable exception,int requestType){  if (exception instanceof CommandException) {    CommandException.Error err=((CommandException)(exception)).getCommandError();    if (err == CommandException.Error.REQUEST_NOT_SUPPORTED) {      int id;      if (requestType == MSG_ENABLE_ICC_PIN_COMPLETE) {        id=R.string.sim_enable_disable_lock_not_supported;      } else {        id=R.string.sim_pin_change_failed_enable_sim_lock;      }      Toast.makeText(this,mRes.getString(id),Toast.LENGTH_SHORT).show();    } else {      displayRetryCounter(mRes.getString(R.string.sim_change_failed));    }  } else   if (exception instanceof RuntimeException) {    Toast.makeText(this,exception.getMessage(),Toast.LENGTH_SHORT).show();  }}  }
class C{  private JapaneseDate withYear(int year){  return withYear(getEra(),year);}  }
class C{  public String findTipText(){  return "The regular expression that the attribute names must match.";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:26.376 -0500",hash_original_method="93A82B64CE4B13442120BE4FDBB45597",hash_generated_method="EAA52092786556470D88FF60B9D59A47") public void activateCellBroadcastSms(int activate,Message response){  Log.e(LOG_TAG,"[GSMPhone] activateCellBroadcastSms() is obsolete; use SmsManager");  response.sendToTarget();}  }
class C{  public void reportStatus(Collection<Throwable> problems){  AgentStatus.Builder status=AgentStatus.newBuilder();  status.setAgent(getAgentInfo());  status.setDynamicInstrumentationEnabled(dynamic != null);  status.addAllWoven(weaveManager.woven());  for (  HardcodedTracepoint t : hardcodedTracepoints.values()) {    status.addHardcodedTracepointsBuilder().setId(t.id).addAllExport(t.exportedVariables);  }  for (  Throwable t : problems) {    status.addProblemBuilder().setName(t.getClass().getName()).setMessage(t.getMessage()).setStacktrace(ExceptionUtils.getStackTrace(t));  }  PubSub.publish(PivotTracingConfig.STATUS_TOPIC,status.build());}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  try {    if (bModel.getDocument() != null) {      JCas jCas=getJCas();      int nextSentenceAddress=BratAjaxCasUtil.getNextPageFirstSentenceAddress(jCas,bModel.getSentenceAddress(),bModel.getPreferences().getWindowSize());      if (bModel.getSentenceAddress() != nextSentenceAddress) {        updateSentenceNumber(jCas,nextSentenceAddress);        aTarget.addChildren(getPage(),FeedbackPanel.class);        annotator.bratRenderLater(aTarget);        gotoPageTextField.setModelObject(BratAjaxCasUtil.getFirstSentenceNumber(jCas,bModel.getSentenceAddress()) + 1);        updateSentenceAddress(jCas,aTarget);      } else {        aTarget.appendJavaScript("alert('This is last page!')");      }    } else {      aTarget.appendJavaScript("alert('Please open a document first!')");    }  } catch (  Exception e) {    error(e.getMessage());    aTarget.addChildren(getPage(),FeedbackPanel.class);  }}  }
class C{  public final boolean hasDataType(String type){  return mDataTypes != null && findMimeType(type);}  }
class C{  private OptionalLong(){  this.isPresent=false;  this.value=0;}  }
class C{  protected void processNamespaceData(OMElement node,boolean isSOAPElement){  super.processNamespaceData(node);  if (isSOAPElement) {    if (node.getNamespace() != null && !node.getNamespace().getNamespaceURI().equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI) && !node.getNamespace().getNamespaceURI().equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {      throw new SOAPProcessingException("invalid SOAP namespace URI. " + "Only " + SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI + " and "+ SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI+ " are supported.",SOAP12Constants.FAULT_CODE_SENDER);    }  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  schedulingSubpartId="";  datePattern=null;  unlimitedEnroll=null;  parentSubpartId=null;  parentSubpartLabel=null;  managingDeptName=null;  sameItypeAsParent=null;  creditFormat=null;  creditType=null;  creditUnitType=null;  units=null;  maxUnits=null;  fractionalIncrementsAllowed=new Boolean(false);  creditText="";  autoSpreadInTime=Boolean.FALSE;  studentAllowOverlap=Boolean.FALSE;  subpartCreditEditAllowed=ApplicationProperty.SubpartCreditEditable.isTrue();  itypeBasic=false;  instructionalType=null;  instructionalTypeLabel=null;  super.reset(mapping,request);}  }
class C{  public void clusterInput(double radius,int minimumPoints){  if (this.inputPoints.size() == 0) {    log.warn("DJCluster.clusterInput() called, but no points to cluster.");  } else {    if (!silent) {      log.info("Clustering input points. This may take a while.");    }    int clusterIndex=0;    int pointMultiplier=1;    int uPointCounter=0;    int cPointCounter=0;    double xMin=Double.POSITIVE_INFINITY;    double yMin=Double.POSITIVE_INFINITY;    double xMax=Double.NEGATIVE_INFINITY;    double yMax=Double.NEGATIVE_INFINITY;    for (    Coord c : this.inputPoints) {      if (c == null) {        log.warn("Coord is null. Number of points in list: " + inputPoints.size());      } else {        xMin=Math.min(xMin,c.getX());        yMin=Math.min(yMin,c.getY());        xMax=Math.max(xMax,c.getX());        yMax=Math.max(yMax,c.getY());      }    }    if (!silent) {      log.info("Place points in QuadTree.");    }    quadTree=new QuadTree<ClusterActivity>(xMin - 1,yMin - 1,xMax + 1,yMax + 1);    List<ClusterActivity> listOfPoints=new ArrayList<ClusterActivity>();    for (int i=0; i < this.inputPoints.size(); i++) {      double x=inputPoints.get(i).getX();      double y=inputPoints.get(i).getY();      ClusterActivity cp=new ClusterActivity(Id.create(i,Coord.class),inputPoints.get(i),null);      quadTree.put(x,y,cp);      listOfPoints.add(cp);    }    if (!silent) {      log.info("Done placing activities.");    }    int pointCounter=0;    while (pointCounter < listOfPoints.size()) {      ClusterActivity p=listOfPoints.get(pointCounter);      if (p.getCluster() == null) {        Collection<ClusterActivity> neighbourhood=quadTree.getDisk(p.getCoord().getX(),p.getCoord().getY(),radius);        List<ClusterActivity> uN=new ArrayList<ClusterActivity>(neighbourhood.size());        List<ClusterActivity> cN=new ArrayList<ClusterActivity>(neighbourhood.size());        for (        ClusterActivity cp : neighbourhood) {          if (cp.getCluster() == null) {            uN.add(cp);          } else {            cN.add(cp);          }        }        if (neighbourhood.size() < minimumPoints) {          lostPoints.put(p.getId(),p);          uPointCounter++;        } else         if (cN.size() > 0) {          List<DigicoreCluster> localClusters=new ArrayList<DigicoreCluster>();          DigicoreCluster smallestCluster=cN.get(0).getCluster();          for (int i=1; i < cN.size(); i++) {            if (Integer.parseInt(cN.get(i).getCluster().getId().toString()) < Integer.parseInt(smallestCluster.getId().toString())) {              smallestCluster=cN.get(i).getCluster();            }            if (!localClusters.contains(cN.get(i).getCluster())) {              localClusters.add(cN.get(i).getCluster());            }          }          for (          DigicoreCluster DigicoreCluster : localClusters) {            if (!DigicoreCluster.equals(smallestCluster)) {              List<ClusterActivity> thisClusterList=DigicoreCluster.getPoints();              for (int j=0; j < thisClusterList.size(); j++) {                thisClusterList.get(j).setCluster(smallestCluster);                smallestCluster.getPoints().add(thisClusterList.get(j));              }            }          }          for (          ClusterActivity cp : uN) {            smallestCluster.getPoints().add(cp);            cp.setCluster(smallestCluster);            cPointCounter++;            if (lostPoints.containsKey(cp.getId())) {              lostPoints.remove(cp.getId());              uPointCounter--;            }          }        } else {          DigicoreCluster newCluster=new DigicoreCluster(Id.create(clusterIndex,DigicoreCluster.class));          clusterIndex++;          for (          ClusterActivity cp : uN) {            cp.setCluster(newCluster);            newCluster.getPoints().add(cp);            cPointCounter++;            if (lostPoints.containsKey(cp.getId())) {              lostPoints.remove(cp.getId());              uPointCounter--;            }          }        }      }      pointCounter++;      if (!silent) {        if (pointCounter == pointMultiplier) {          log.info("   Points clustered: " + pointCounter);          pointMultiplier=(int)Math.max(pointCounter,pointMultiplier) * 2;        }      }    }    if (!silent) {      log.info("   Points clustered: " + pointCounter + " (Done)");      int sum=cPointCounter + uPointCounter;      log.info("Sum should add up: " + cPointCounter + " (clustered) + "+ uPointCounter+ " (unclustered) = "+ sum);      log.info("Unclustered points: ");      for (      ClusterActivity ca : lostPoints.values()) {        log.info(String.format("   %.6f,%.6f",ca.getCoord().getX(),ca.getCoord().getY()));      }      log.info("New way of unclustered points:");      log.info("   Number: " + lostPoints.size());    }    if (!silent) {      log.info("Building the DigicoreCluster list (2 steps)");    }    Map<DigicoreCluster,List<ClusterActivity>> clusterMap=new HashMap<DigicoreCluster,List<ClusterActivity>>();    if (!silent) {      log.info("Step 1 of 2:");      log.info("Number of ClusterPoints to process: " + listOfPoints.size());    }    int cpCounter=0;    int cpMultiplier=1;    for (    ClusterActivity ca : listOfPoints) {      DigicoreCluster theCluster=ca.getCluster();      if (theCluster != null) {        if (!clusterMap.containsKey(theCluster)) {          List<ClusterActivity> newList=new ArrayList<ClusterActivity>();          clusterMap.put(theCluster,newList);        }        clusterMap.get(theCluster).add(ca);      }      if (!silent) {        if (++cpCounter == cpMultiplier) {          log.info("   ClusterPoints processed: " + cpCounter + " ("+ String.format("%3.2f",((double)cpCounter / (double)listOfPoints.size()) * 100)+ "%)");          cpMultiplier*=2;        }      }    }    if (!silent) {      log.info("   ClusterPoints processed: " + cpCounter + " (Done)");    }    if (!silent) {      log.info("Step 2 of 2:");      log.info("Number of clusters to process: " + clusterMap.keySet().size());    }    int clusterCounter=0;    int clusterMultiplier=1;    int clusterNumber=0;    for (    DigicoreCluster DigicoreCluster : clusterMap.keySet()) {      List<ClusterActivity> listOfClusterPoints=clusterMap.get(DigicoreCluster);      if (listOfClusterPoints.size() >= minimumPoints) {        DigicoreCluster.setClusterId(Id.create(clusterNumber++,DigicoreCluster.class));        clusterNumber++;        DigicoreCluster.setCenterOfGravity();        clusterList.add(DigicoreCluster);      } else       if (!silent) {        log.warn(" ... why do we HAVE a cluster with too few points?...");      }      if (!silent) {        if (++clusterCounter == clusterMultiplier) {          log.info("   Clusters processed: " + clusterCounter + " ("+ String.format("%3.2f",((double)clusterCounter / (double)clusterMap.keySet().size()) * 100)+ "%)");          clusterMultiplier*=2;        }      }    }    if (!silent) {      log.info("   Clusters processed: " + clusterCounter + " (Done)");      log.info("DigicoreCluster list built.");    }  }}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  public File definePath(final DigestURL url,final int depth,final Date date,final String ext){  String id=ASCII.String(url.hash());  String ds=GenericFormatter.SHORT_MINUTE_FORMATTER.format(date);  File path=new File(pathToShard(url,depth),id + "." + ds+ "."+ ext);  return path;}  }
class C{  public void init(float startX,float startY,float endX,float endY){  setStart(new PointF(startX,startY));  setEnd(new PointF(endX,endY));}  }
class C{  public VerletParticle2D removeAllConstraints(){  constraints.clear();  return this;}  }
class C{  @Override public double evaluateAttribute(int attribute) throws Exception {  int i, j, ii, jj;  int ni, nj;  double sum=0.0;  ni=m_trainInstances.attribute(attribute).numValues() + 1;  nj=m_numClasses + 1;  double[] sumi, sumj;  Instance inst;  double temp=0.0;  sumi=new double[ni];  sumj=new double[nj];  double[][] counts=new double[ni][nj];  sumi=new double[ni];  sumj=new double[nj];  for (i=0; i < ni; i++) {    sumi[i]=0.0;    for (j=0; j < nj; j++) {      sumj[j]=0.0;      counts[i][j]=0.0;    }  }  for (i=0; i < m_numInstances; i++) {    inst=m_trainInstances.instance(i);    if (inst.isMissing(attribute)) {      ii=ni - 1;    } else {      ii=(int)inst.value(attribute);    }    if (inst.isMissing(m_classIndex)) {      jj=nj - 1;    } else {      jj=(int)inst.value(m_classIndex);    }    counts[ii][jj]+=inst.weight();  }  for (i=0; i < ni; i++) {    sumi[i]=0.0;    for (j=0; j < nj; j++) {      sumi[i]+=counts[i][j];      sum+=counts[i][j];    }  }  for (j=0; j < nj; j++) {    sumj[j]=0.0;    for (i=0; i < ni; i++) {      sumj[j]+=counts[i][j];    }  }  if (m_missing_merge && (sumi[ni - 1] < sum) && (sumj[nj - 1] < sum)) {    double[] i_copy=new double[sumi.length];    double[] j_copy=new double[sumj.length];    double[][] counts_copy=new double[sumi.length][sumj.length];    for (i=0; i < ni; i++) {      System.arraycopy(counts[i],0,counts_copy[i],0,sumj.length);    }    System.arraycopy(sumi,0,i_copy,0,sumi.length);    System.arraycopy(sumj,0,j_copy,0,sumj.length);    double total_missing=(sumi[ni - 1] + sumj[nj - 1] - counts[ni - 1][nj - 1]);    if (sumi[ni - 1] > 0.0) {      for (j=0; j < nj - 1; j++) {        if (counts[ni - 1][j] > 0.0) {          for (i=0; i < ni - 1; i++) {            temp=((i_copy[i] / (sum - i_copy[ni - 1])) * counts[ni - 1][j]);            counts[i][j]+=temp;            sumi[i]+=temp;          }          counts[ni - 1][j]=0.0;        }      }    }    sumi[ni - 1]=0.0;    if (sumj[nj - 1] > 0.0) {      for (i=0; i < ni - 1; i++) {        if (counts[i][nj - 1] > 0.0) {          for (j=0; j < nj - 1; j++) {            temp=((j_copy[j] / (sum - j_copy[nj - 1])) * counts[i][nj - 1]);            counts[i][j]+=temp;            sumj[j]+=temp;          }          counts[i][nj - 1]=0.0;        }      }    }    sumj[nj - 1]=0.0;    if (counts[ni - 1][nj - 1] > 0.0 && total_missing < sum) {      for (i=0; i < ni - 1; i++) {        for (j=0; j < nj - 1; j++) {          temp=(counts_copy[i][j] / (sum - total_missing)) * counts_copy[ni - 1][nj - 1];          counts[i][j]+=temp;          sumi[i]+=temp;          sumj[j]+=temp;        }      }      counts[ni - 1][nj - 1]=0.0;    }  }  return ContingencyTables.gainRatio(counts);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public boolean isBlocked(){  return blocked;}  }
class C{  public static boolean contains(String string,String substring){  return string.indexOf(substring) > -1;}  }
class C{  @SuppressWarnings({"unused"}) private void doTreeTagOld(JCas jcas){  File tmpDocument=null;  BufferedWriter tmpFileWriter;  ArrayList<Token> tokens=new ArrayList<Token>();  try {    tmpDocument=File.createTempFile("postokens",null);    tmpFileWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmpDocument),"UTF-8"));    FSIterator ai=jcas.getAnnotationIndex(Token.type).iterator();    while (ai.hasNext()) {      Token t=(Token)ai.next();      tokens.add(t);      if (!(t.getBegin() == t.getEnd())) {        tmpFileWriter.write(t.getCoveredText() + ttprops.newLineSeparator);      }    }    tmpFileWriter.close();  } catch (  IOException e) {    Logger.printError("Something went wrong creating a temporary file for the treetagger to process.");    System.exit(-1);  }  HashSet<String> hsEndOfSentenceTag=new HashSet<String>();  hsEndOfSentenceTag.add("SENT");  hsEndOfSentenceTag.add("$.");  hsEndOfSentenceTag.add("FS");  hsEndOfSentenceTag.add("_Z_Fst");  hsEndOfSentenceTag.add("_Z_Int");  hsEndOfSentenceTag.add("_Z_Exc");  hsEndOfSentenceTag.add("ew");  try {    Process p=ttprops.getTreeTaggingProcess(tmpDocument);    Logger.printDetail(component,"TreeTagger (pos tagging) with: " + ttprops.parFileName);    BufferedReader in=new BufferedReader(new InputStreamReader(p.getInputStream(),"UTF-8"));    Sentence sentence=null;    int i=0;    String s=null;    while ((s=in.readLine()) != null) {      Token token=tokens.get(i++);      while (token.getCoveredText().equals("")) {        if ((annotate_sentences) && (token.getPos() != null && token.getPos().equals("EMPTYLINE"))) {          if (sentence == null) {            sentence=new Sentence(jcas);            sentence.setBegin(token.getBegin());          }          sentence.setEnd(token.getEnd());          if (sentence.getBegin() < sentence.getEnd()) {            sentence.addToIndexes();          }          sentence=null;        }        token.removeFromIndexes();        token=tokens.get(i++);      }      token.removeFromIndexes();      if (!(token.getCoveredText().equals(""))) {        token.setPos(s);        token.addToIndexes();      }      if (annotate_sentences) {        if (sentence == null) {          sentence=new Sentence(jcas);          sentence.setBegin(token.getBegin());        }        if (hsEndOfSentenceTag.contains(s) || i == tokens.size()) {          sentence.setEnd(token.getEnd());          sentence.addToIndexes();          sentence=null;        }      }    }    while (i < tokens.size()) {      if (!(sentence == null)) {        sentence.setEnd(tokens.get(tokens.size() - 1).getEnd());        sentence.addToIndexes();      }      Token token=tokens.get(i++);      if (token.getPos() != null && token.getPos().equals("EMPTYLINE")) {        token.removeFromIndexes();      }    }    in.close();    p.destroy();  } catch (  Exception e) {    e.printStackTrace();  } finally {    tmpDocument.delete();  }}  }
class C{  public static boolean delete(File file,boolean moveToTrash){  if (!file.exists()) {    return false;  }  if (moveToTrash) {    if (OSUtils.isMacOSX()) {      return moveToTrashOSX(file);    } else     if (OSUtils.isWindows()) {      return SystemUtils.recycle(file);    } else {      throw new IllegalArgumentException("OS does not support trash");    }  } else {    return deleteRecursive(file);  }}  }
class C{  private void readPopulation(String pathToInputFile,String delimiter){  BufferedReader fileReader=IOUtils.getBufferedReader(pathToInputFile);  try {    String line=fileReader.readLine();    while (line != null) {      String[] lineArgs=line.split(delimiter);      if (lineArgs[0].equals("person")) {        String personId=lineArgs[1];        String sex=lineArgs[2];        int age=Integer.parseInt(lineArgs[3]);        String licence=lineArgs[4];        boolean employed=Boolean.parseBoolean(lineArgs[5]);        String carAvail=lineArgs[6];        Person newPerson=factory.createPerson(Id.createPersonId(personId));        PersonUtils.setSex(newPerson,sex);        PersonUtils.setAge(newPerson,age);        PersonUtils.setLicence(newPerson,licence);        PersonUtils.setEmployed(newPerson,employed);        PersonUtils.setCarAvail(newPerson,carAvail);        Plan plan=factory.createPlan();        int i=7;        while (i < lineArgs.length) {          if (i % 2 != 0) {            String activityType=lineArgs[i++];            double xCoord=Double.parseDouble(lineArgs[i++]);            double yCoord=Double.parseDouble(lineArgs[i++]);            double startTime=Double.parseDouble(lineArgs[i++]);            double endTime=Double.parseDouble(lineArgs[i++]);            Activity act=PopulationUtils.createActivityFromCoord(activityType,new Coord(xCoord,yCoord));            act.setStartTime(startTime);            act.setEndTime(endTime);            plan.addActivity(act);          } else {            String transportMode=lineArgs[i++];            Leg leg=PopulationUtils.createLeg(transportMode);            plan.addLeg(leg);          }        }        newPerson.addPlan(plan);        newPopulation.addPerson(newPerson);      } else {      }      line=fileReader.readLine();    }    fileReader.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static String toRoman(long n){  int i;  String s;  s="";  while (n > 0) {    for (i=0; i < syms.length; i++) {      if (syms[i].value <= n) {        int shift=i + (i % 2);        if (i > 0 && shift < syms.length && (syms[i - 1].value - syms[shift].value) <= n) {          s=s + syms[shift].symbol + syms[i - 1].symbol;          n=n - syms[i - 1].value + syms[shift].value;          i=-1;        } else {          s+=syms[i].symbol;          n-=syms[i].value;          i=-1;        }      }    }  }  return s;}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  protected ContactId displayPopupAndWaitResponse(Context context,ContactId contact){  Intent intent=new Intent(context,HttpsProvisioningAlertDialog.class);  intent.putExtra(EXTRA_CONTACT,(Parcelable)contact);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);  try {synchronized (sInstance) {      super.wait();    }  } catch (  InterruptedException e) {  }  return mMsisdn;}  }
class C{  private static float calcSum(float[] vals){  if (vals == null)   return 0f;  float sum=0f;  for (  float f : vals)   sum+=f;  return sum;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.FAULT__PROPERTIES:    getProperties().clear();  return;}super.eUnset(featureID);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.490 -0500",hash_original_method="380804F8BD40257E05E5F5A307273856",hash_generated_method="0EAB716246A6A39605285866B3663EF1") protected void decrementActiveClientTransactionCount(){  if (this.activeClientTransactionCount.decrementAndGet() <= this.clientTransactionTableLowaterMark && !this.unlimitedClientTransactionTableSize) {synchronized (this.clientTransactionTable) {      clientTransactionTable.notify();    }  }}  }
class C{  private void flushBuffer(ByteBuffer buffer,WritableByteChannel output) throws IOException {  buffer.flip();  output.write(buffer);  buffer.flip();  buffer.limit(buffer.capacity());}  }
class C{  void addHeader(String name,String value){  if (name == null) {    String damage="Null http header name";    HttpLog.e(damage);    throw new NullPointerException(damage);  }  if (value == null || value.length() == 0) {    String damage="Null or empty value for header \"" + name + "\"";    HttpLog.e(damage);    throw new RuntimeException(damage);  }  mHttpRequest.addHeader(name,value);}  }
class C{  public int curCP(){  if (pendingJumps != null) {    resolvePending();  }  if (pendingStatPos != Position.NOPOS) {    markStatBegin();  }  fixedPc=true;  return cp;}  }
class C{  Scope enterScope(Env<AttrContext> env){  return (env.tree.hasTag(JCTree.Tag.CLASSDEF)) ? ((JCClassDecl)env.tree).sym.members_field : env.info.scope;}  }
class C{  protected static void doConfigure(ConfigurationHTTPAdapter configuration,InputStream stream,String resourceName) throws RuntimeException {  Document document=getDocument(stream,resourceName);  doConfigure(configuration,document);}  }
class C{  private void fire(){  int weaponNum=clientgui.mechD.wPan.getSelectedWeaponNum();  Mounted mounted=ce().getEquipment(weaponNum);  if ((ce() == null) || (target == null) || (mounted == null)|| !(mounted.getType() instanceof WeaponType)) {    throw new IllegalArgumentException("current fire parameters are invalid");  }  if (GUIPreferences.getInstance().getAutoDeclareSearchlight()) {    doSearchlight();  }  WeaponAttackAction waa=new WeaponAttackAction(cen,target.getTargetType(),target.getTargetId(),weaponNum);  if (mounted.getType().hasFlag(WeaponType.F_ARTILLERY)) {    waa=new ArtilleryAttackAction(cen,target.getTargetType(),target.getTargetId(),weaponNum,clientgui.getClient().getGame());  }  if ((null != mounted.getLinked()) && (((WeaponType)mounted.getType()).getAmmoType() != AmmoType.T_NA)) {    Mounted ammoMount=mounted.getLinked();    waa.setAmmoId(ce().getEquipmentNum(ammoMount));    if (((AmmoType)ammoMount.getType()).getMunitionType() == AmmoType.M_VIBRABOMB_IV) {      VibrabombSettingDialog vsd=new VibrabombSettingDialog(clientgui.frame);      vsd.setVisible(true);      waa.setOtherAttackInfo(vsd.getSetting());    }  }  attacks.addElement(waa);  clientgui.getClient().getGame().addAction(waa);  clientgui.minimap.drawMap();  mounted.setUsedThisRound(true);  int nextWeapon=clientgui.mechD.wPan.selectNextWeapon();  if ((nextWeapon == -1) && GUIPreferences.getInstance().getAutoEndFiring()) {    ready();    return;  }  clientgui.mechD.wPan.displayMech(ce());  clientgui.mechD.wPan.selectWeapon(nextWeapon);  updateTarget();}  }
class C{  public void transformValues(TDoubleFunction function){  for (int i=_pos; i-- > 0; ) {    _data[i]=function.execute(_data[i]);  }}  }
class C{  synchronized void deliverRoleReply(long xid,OFControllerRole role){  if (!requestPending) {    String msg=String.format("Switch: [%s], State: [%s], " + "received unexpected RoleReply[%s]. " + "No roles are pending",OFSwitchHandshakeHandler.this.getSwitchInfoString(),OFSwitchHandshakeHandler.this.state.toString(),role);    throw new SwitchStateException(msg);  }  if (pendingXid == xid && pendingRole == role) {    log.debug("[{}] Received role reply message setting role to {}",getDpid(),role);    switchManagerCounters.roleReplyReceived.increment();    setSwitchRole(role,RoleRecvStatus.RECEIVED_REPLY);  } else {    log.debug("[{}] Received stale or unexpected role reply " + "{}, xid={}. Ignoring. " + "Waiting for {}, xid={}",new Object[]{getDpid(),role,xid,pendingRole,pendingXid});  }}  }
class C{  public static void addTagInitParam(WebXmlElement itemElement,String name,String value){  WebXmlTag tag=(WebXmlTag)itemElement.getTag().getDescriptorType().getTagByName("init-param");  InitParam init=new InitParam(tag,name,value);  itemElement.getChildren().add(init);}  }
class C{  private StateSet DFAEdge(StateSet start,char input){  tempStateSet.clear();  states.reset(start);  while (states.hasMoreElements())   tempStateSet.add(table[states.nextElement()][input]);  StateSet result=new StateSet(tempStateSet);  states.reset(tempStateSet);  while (states.hasMoreElements())   result.add(epsilon[states.nextElement()]);  return result;}  }
class C{  public static byte[] writeClass(ClassNode classNode) throws IOException {  ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);  classNode.accept(classWriter);  return classWriter.toByteArray();}  }
class C{  @Override protected byte[] alloc(int bucketedSize){  return new byte[bucketedSize];}  }
class C{  public DataIOException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  rooms=new ArrayList();  iSessionId=HttpSessionContext.getSessionContext(request.getSession().getServletContext()).getUser().getCurrentAcademicSessionId();}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  @Override public void checkCreate(Application application,String serverName) throws CheckException, ServiceException {  try {    if (checkAppExist(application.getUser(),application.getName())) {      throw new CheckException(messageSource.getMessage("app.exists",null,locale));    }    if (checkNameLength(application.getName())) {      throw new CheckException("This name has length equal to zero : " + application.getName());    }    if (imageService.findByName(serverName) == null)     throw new CheckException(messageSource.getMessage("image.not.found",null,locale));    imageService.findByName(serverName);  } catch (  PersistenceException e) {    logger.error("ApplicationService Error : Create Application" + e);    throw new ServiceException(e.getLocalizedMessage(),e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.289 -0500",hash_original_method="A7F055B05F3BF0E7B9EF67A5904EF45B",hash_generated_method="74F46419807A9BD28AD5DC8BEC857162") public int size(){  return mRows - mRowGapLength;}  }
class C{  public Box(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public static ManualLagGraph serializableInstance(){  return new ManualLagGraph(ManualLagGraphParams.serializableInstance());}  }
class C{  @After public void tearDown(){  realProblem=null;  properties=null;}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public Builder resultIterationBatchSize(final int size){  this.resultIterationBatchSize=size;  return this;}  }
class C{  private static PipelineOp doMergeJoin(PipelineOp left,final JoinGroupNode joinGroup,final Set<IVariable<?>> doneSet,final AtomicInteger start,final AST2BOpContext ctx){  boolean mergeJoin=true;  final int arity=joinGroup.arity();  final NamedSubqueryInclude firstInclude;  if (arity >= 2 && joinGroup.get(0) instanceof NamedSubqueryInclude) {    firstInclude=(NamedSubqueryInclude)joinGroup.get(0);  } else {    return left;  }  final List<NamedSubqueryInclude> requiredIncludes=new LinkedList<NamedSubqueryInclude>();  final List<NamedSubqueryInclude> optionalIncludes=new LinkedList<NamedSubqueryInclude>();  final List<FilterNode> joinConstraints=new LinkedList<FilterNode>();  final Set<IVariable<?>> joinVars=new LinkedHashSet<IVariable<?>>();  int j;  for (j=1; j < arity && mergeJoin; j++) {    final IGroupMemberNode child=(IGroupMemberNode)joinGroup.get(j);    if (requiredIncludes.isEmpty() && (child instanceof JoinGroupNode) && ((JoinGroupNode)child).isOptional()&& ((JoinGroupNode)child).arity() == 1 && (((JoinGroupNode)child).get(0) instanceof NamedSubqueryInclude)) {      final NamedSubqueryInclude nsi=(NamedSubqueryInclude)((JoinGroupNode)child).get(0);      final Set<IVariable<?>> theJoinVars=nsi.getJoinVarSet();      if (joinVars.isEmpty()) {        joinVars.addAll(theJoinVars);      } else       if (!joinVars.equals(theJoinVars)) {        break;      }      optionalIncludes.add(nsi);      joinConstraints.addAll(nsi.getAttachedJoinFilters());    } else     if (optionalIncludes.isEmpty() && child instanceof NamedSubqueryInclude) {      final NamedSubqueryInclude nsi=(NamedSubqueryInclude)child;      final Set<IVariable<?>> theJoinVars=nsi.getJoinVarSet();      if (joinVars.isEmpty()) {        if (theJoinVars.isEmpty()) {          break;        }        joinVars.addAll(theJoinVars);      } else       if (!joinVars.equals(theJoinVars)) {        break;      }      requiredIncludes.add(nsi);      joinConstraints.addAll(nsi.getAttachedJoinFilters());    } else {      break;    }  }  final int minIncludes=1;  if (requiredIncludes.size() < minIncludes && optionalIncludes.size() < minIncludes) {    mergeJoin=false;  }  if (!mergeJoin) {    return left;  }  final boolean optional=requiredIncludes.isEmpty();  final JoinTypeEnum joinType=optional ? JoinTypeEnum.Optional : JoinTypeEnum.Normal;  final List<NamedSubqueryInclude> includes=optional ? optionalIncludes : requiredIncludes;  final IVariable<?>[] joinvars2=joinVars.toArray(new IVariable[joinVars.size()]);  final INamedSolutionSetRef firstNamedSolutionSetRef=NamedSolutionSetRefUtility.newInstance(ctx.queryId,firstInclude.getName(),joinvars2);  if (!firstInclude.getJoinVarSet().equals(joinVars)) {    left=addNamedSubqueryInclude(left,firstInclude,doneSet,ctx);    final IHashJoinUtilityFactory joinUtilFactory;    if (ctx.nativeHashJoins) {      joinUtilFactory=HTreeHashJoinUtility.factory;    } else {      joinUtilFactory=JVMHashJoinUtility.factory;    }    left=applyQueryHints(new HashIndexOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,1),new NV(PipelineOp.Annotations.LAST_PASS,true),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(HashIndexOp.Annotations.JOIN_TYPE,joinType),new NV(HashIndexOp.Annotations.JOIN_VARS,joinvars2),new NV(HashIndexOp.Annotations.HASH_JOIN_UTILITY_FACTORY,joinUtilFactory),new NV(HashIndexOp.Annotations.NAMED_SET_REF,firstNamedSolutionSetRef),new NV(IPredicate.Annotations.RELATION_NAME,new String[]{ctx.getLexiconNamespace()})),joinGroup,ctx);  }  final INamedSolutionSetRef[] namedSolutionSetRefs;{    final List<INamedSolutionSetRef> list=new LinkedList<INamedSolutionSetRef>();    list.add(firstNamedSolutionSetRef);    for (    NamedSubqueryInclude nsi : includes) {      list.add(NamedSolutionSetRefUtility.newInstance(ctx.queryId,nsi.getName(),joinvars2));    }    namedSolutionSetRefs=list.toArray(new INamedSolutionSetRef[list.size()]);  }  boolean release=false;  final List<IConstraint> constraints=new LinkedList<IConstraint>();  for (  FilterNode filter : joinConstraints) {    constraints.add(new SPARQLConstraint<XSDBooleanIV<BigdataLiteral>>(filter.getValueExpression()));  }  final IConstraint[] c=constraints.toArray(new IConstraint[0]);  if (ctx.nativeHashJoins) {    left=applyQueryHints(new HTreeMergeJoin(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,1),new NV(PipelineOp.Annotations.LAST_PASS,true),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(HTreeMergeJoin.Annotations.NAMED_SET_REF,namedSolutionSetRefs),new NV(HTreeMergeJoin.Annotations.CONSTRAINTS,c),new NV(HTreeMergeJoin.Annotations.RELEASE,release)),joinGroup,ctx);  } else {    left=applyQueryHints(new JVMMergeJoin(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,1),new NV(PipelineOp.Annotations.LAST_PASS,true),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(JVMMergeJoin.Annotations.NAMED_SET_REF,namedSolutionSetRefs),new NV(JVMMergeJoin.Annotations.CONSTRAINTS,c),new NV(JVMMergeJoin.Annotations.RELEASE,release)),joinGroup,ctx);  }  start.set(j);  return left;}  }
class C{  public ParticleFiltering(int N,DynamicBayesianNetwork dbn){  this(N,dbn,new JavaRandomizer());}  }
class C{  public DOMAccessException(Exception e,String msg){  this.ex=e;  this.msg=msg;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.392 -0500",hash_original_method="E1A7B12278B27631DDD79E5B839DAAE3",hash_generated_method="CAEE5C71060090FC11681352624FC759") static public void assertEquals(float expected,float actual,float delta){  assertEquals(null,expected,actual,delta);}  }
class C{  SentenceType evaluateSentenceType(){  final Iterator<Expression> it=expressions.iterator();  SentenceType type=SentenceType.UNDEFINED;  boolean negate=false;  Expression first=nextValid(it);  if (first != null) {    while ((first != null) && first.isQuestion() && it.hasNext()) {      if (type == SentenceType.UNDEFINED) {        type=SentenceType.QUESTION;      }      first=nextValid(it);    }    Expression second=null;    Expression third=null;    second=nextValid(it);    third=nextValid(it);    if (second != null) {      if (first.getNormalized().equals("is")) {        if (type == SentenceType.UNDEFINED) {          type=SentenceType.QUESTION;        }      } else       if (first.getNormalized().equals("do") && (!second.getOriginal().equalsIgnoreCase("me"))) {        if (type == SentenceType.UNDEFINED) {          type=SentenceType.QUESTION;        }        if (first.isNegated()) {          if (getVerbCount() > 1) {            negate=true;            expressions.remove(first);          }        } else         expressions.remove(first);      } else       if (first.getNormalized().equals("it") && second.getNormalized().equals("is") && ((third != null) && (third.getType() != null) && third.getType().isGerund())) {        if (type == SentenceType.UNDEFINED) {          type=SentenceType.STATEMENT;        }        expressions.remove(first);        expressions.remove(second);      }    }  }  if (negate) {    Expression firstVerb=getVerb(0);    if (firstVerb != null) {      firstVerb.negate();    }  }  if ((type != SentenceType.UNDEFINED) && (sentenceType == SentenceType.UNDEFINED)) {    sentenceType=type;  }  return type;}  }
class C{  public static void main(String[] ops){  double[] doubles={1,2,3};  System.out.println("6!: " + Math.exp(SpecialFunctions.lnFactorial(6)));  System.out.println("Binomial 6 over 2: " + Math.pow(2,SpecialFunctions.log2Binomial(6,2)));  System.out.println("Multinomial 6 over 1, 2, 3: " + Math.pow(2,SpecialFunctions.log2Multinomial(6,doubles)));}  }
class C{  public Builder byWeekNo(Integer... weekNumbers){  return byWeekNo(Arrays.asList(weekNumbers));}  }
class C{  private void startMBean(Attributes atts){  String name=atts.getValue(NAME);  atts.getValue(DESCRIPTION);  pw.println("<h2><b>" + name + "</b> MBean</h2>");  pw.println("<table border=\"0\" cellpadding=\"3\">");  pw.println("<tr valign=\"top\">");  pw.println("  <th align=\"left\">Description:</th>");  pw.println("  <td colspan=\"4\">GemFire distributed system</td>");  pw.println("</tr>");}  }
class C{  public GenerateLODVisualPanel1(){  initComponents();  reductionMethod.setModel(new DefaultComboBoxModel());  reductionMethod.addItem(LodGenerator.TriangleReductionMethod.PROPORTIONAL);  reductionMethod.addItem(LodGenerator.TriangleReductionMethod.CONSTANT);  valuesFields.add(valueLevel1);  valuesFields.add(valueLevel2);  valuesFields.add(valueLevel3);  valuesFields.add(valueLevel4);  valuesFields.add(valueLevel5);  valuesFields.add(valueLevel6);  valuesFields.add(valueLevel7);  valuesFields.add(valueLevel8);  valuesFields.add(valueLevel9);  valuesFields.add(valueLevel10);  estimationFields.add(estLabel1);  estimationFields.add(estLabel2);  estimationFields.add(estLabel3);  estimationFields.add(estLabel4);  estimationFields.add(estLabel5);  estimationFields.add(estLabel6);  estimationFields.add(estLabel7);  estimationFields.add(estLabel8);  estimationFields.add(estLabel9);  estimationFields.add(estLabel10);}  }
class C{  public static String extractFromUPCE(String code){  int len=code.length();  String trimmed;  if (len == 6) {    trimmed=code;  } else   if (len == 7) {    trimmed=code.substring(0,len - 1);  } else   if (len == 8) {    trimmed=code.substring(1,len - 1);  } else {    return null;  }  char c1=trimmed.charAt(0);  char c2=trimmed.charAt(1);  char c3=trimmed.charAt(2);  char c4=trimmed.charAt(3);  char c5=trimmed.charAt(4);  char c6=trimmed.charAt(5);  String manufacturer;  String item;switch (c6) {case '0':case '1':case '2':    manufacturer=c1 + c2 + c6+ "00";  item="00" + c3 + c4+ c5;break;case '3':manufacturer=c1 + c2 + c3+ "00";item="000" + c4 + c5;break;case '4':manufacturer=c1 + c2 + c3+ c4+ "0";item="0000" + c5;break;default :manufacturer=c1 + c2 + c3+ c4+ c5+ "";item="0000" + c6;}String newCode="0" + manufacturer + item;return newCode + GTINValidator.calcChecksum(newCode.toCharArray(),newCode.length());}  }
class C{  public boolean isInsert(){  return isInsert;}  }
class C{  public static int toDP(Context context,int px){  try {    return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,px,context.getResources().getDisplayMetrics());  } catch (  Exception e) {    return px;  }}  }
class C{  public Constraints(Spring x,Spring y,Spring width,Spring height){  setX(x);  setY(y);  setWidth(width);  setHeight(height);}  }
class C{  public void windowClosed(WindowEvent e){synchronized (getTreeLock()) {    Window[] windows=getOwnedWindows();    for (    Window window : windows) {      if (window != null) {        if (window.isDisplayable()) {          return;        }        window.removeWindowListener(this);      }    }    dispose();  }}  }
class C{  ExternalClient(String authorizationID) throws SaslException {  if (authorizationID != null) {    try {      username=authorizationID.getBytes("UTF8");    } catch (    java.io.UnsupportedEncodingException e) {      throw new SaslException("Cannot convert " + authorizationID + " into UTF-8",e);    }  } else {    username=new byte[0];  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:27.309 -0500",hash_original_method="AA3C14DF1A360F6707C442D7B10D5AD3",hash_generated_method="A19296660FFFEF5084831EBC6F0048F3") public Cursor query(Query query){  Cursor underlyingCursor=query.runQuery(mResolver,UNDERLYING_COLUMNS,mBaseUri);  if (underlyingCursor == null) {    return null;  }  return new CursorTranslator(underlyingCursor,mBaseUri);}  }
class C{  protected boolean checkStorageFileSystemExistsInDB(String nativeGuid) throws IOException {  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemNativeGUIdConstraint(nativeGuid),result);  if (result.iterator().hasNext()) {    return true;  }  return false;}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  public static boolean addPartIfPossible(World world,BlockPos pos,IMultipart part){  if (!canAddPart(world,pos,part))   return false;  addPart(world,pos,part);  return true;}  }
class C{  public static void fillRectange(Graphics2D g2D,JComponent c,boolean round){  CompiereColor cc=null;  boolean stdCC=c.getClientProperty(CompiereLookAndFeel.BACKGROUND_FILL) != null;  try {    cc=(CompiereColor)c.getClientProperty(CompiereLookAndFeel.BACKGROUND);  } catch (  Exception e) {    stdCC=true;  }  if (stdCC)   cc=CompiereColor.getDefaultBackground();  if (cc != null) {    cc.paint(g2D,c);  } else {    Paint paint=c.getBackground();    g2D.setPaint(paint);    RectangularShape rec=null;    if (round)     rec=new RoundRectangle2D.Float(0,0,c.getWidth(),c.getHeight(),15,15); else     rec=new Rectangle(0,0,c.getWidth(),c.getHeight());    g2D.fill(rec);  }}  }
class C{  private boolean isSipIntentResolvedByBroadcastReceiver(Intent intent){  PackageManager packageManager=AndroidFactory.getApplicationContext().getPackageManager();  List<ResolveInfo> list=packageManager.queryBroadcastReceivers(intent,PackageManager.MATCH_DEFAULT_ONLY);  return (list.size() > 0);}  }
class C{  public static byte[] decodeLines(String s){  char[] buf=new char[s.length()];  int p=0;  for (int ip=0; ip < s.length(); ip++) {    char c=s.charAt(ip);    if (c != ' ' && c != '\r' && c != '\n' && c != '\t')     buf[p++]=c;  }  return decode(buf,0,p);}  }
class C{  public TcpProxySocket(String host,int remoteport) throws IOException {  this.host=host;  this.remoteport=remoteport;  ss=new ServerSocket(0);  this.localport=ss.getLocalPort();}  }
class C{  public boolean isFieldMatch(){  return fieldMatch;}  }
class C{  private void sendNotification(final String msg){  mNotificationManager=(NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE);  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,MainActivity.class),0);  NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_launcher).setContentTitle("MobileAssistant GCM Notification").setStyle(new NotificationCompat.BigTextStyle().bigText(msg)).setContentText(msg);  mBuilder.setContentIntent(contentIntent);  mNotificationManager.notify(NOTIFICATION_ID,mBuilder.build());}  }
class C{  public PackageReferenceMatch(IJavaElement enclosingElement,int accuracy,int offset,int length,boolean insideDocComment,SearchParticipant participant,IResource resource){  super(enclosingElement,accuracy,offset,length,insideDocComment,participant,resource);}  }
class C{  public void addStatementEventListener(StatementEventListener listener){synchronized (this.statementEventListeners) {    this.statementEventListeners.put(listener,listener);  }}  }
class C{  public static Dialog createConfirmationDialog(Context context,String title,String confirmText,String dismissText,Runnable command){  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(context);  dialogBuilder.setCancelable(true);  dialogBuilder.setIcon(R.drawable.icon);  dialogBuilder.setTitle(title);  dialogBuilder.setInverseBackgroundForced(true);  dialogBuilder.setPositiveButton(confirmText,new DialogCommandWrapper(command));  dialogBuilder.setNegativeButton(dismissText,new DialogCommandWrapper(NO_OP));  return dialogBuilder.create();}  }
class C{  public void remove(){  throw new UnsupportedOperationException("remove not supported for ListIterator");}  }
class C{  public String prettyPrintInfo(){  return PcStringUtils.renderJson(new ParallelTaskBean(this));}  }
class C{  public boolean isNewSearchRequired(){  return isNewSearchRequired;}  }
class C{  @Override public String toString(){  return new StringBuilder("EndElement: ").append(this.element).toString();}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  public double lnB(){  double lnB=-0.5 * nu * logDetOmega - 0.5 * nu * D* Math.log(2) - 0.25 * D * (D - 1)* Math.log(Math.PI);  for (int i=1; i <= D; i++) {    lnB-=Gamma.logGamma(0.5 * (nu + 1 - i));  }  return lnB;}  }
class C{  public DaemonJvmLauncherStreamRedirector(InputStream is,OutputStream os){  inputStream=is;  outputStream=os;}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"Crete","Corfu","Thassos","Skiathos"};  List<double[]> x=new ArrayList<double[]>();  for (int i=0; i < titles.length; i++) {    x.add(new double[]{1,2,3,4,5,6,7,8,9,10,11,12});  }  List<double[]> values=new ArrayList<double[]>();  values.add(new double[]{12.3,12.5,13.8,16.8,20.4,24.4,26.4,26.1,23.6,20.3,17.2,13.9});  values.add(new double[]{10,10,12,15,20,24,26,26,23,18,14,11});  values.add(new double[]{5,5.3,8,12,17,22,24.2,24,19,15,9,6});  values.add(new double[]{9,10,11,15,19,23,26,25,22,18,13,10});  int[] colors=new int[]{Color.BLUE,Color.GREEN,Color.CYAN,Color.YELLOW};  PointStyle[] styles=new PointStyle[]{PointStyle.CIRCLE,PointStyle.DIAMOND,PointStyle.TRIANGLE,PointStyle.SQUARE};  XYMultipleSeriesRenderer renderer=buildRenderer(colors,styles);  int length=renderer.getSeriesRendererCount();  for (int i=0; i < length; i++) {    ((XYSeriesRenderer)renderer.getSeriesRendererAt(i)).setFillPoints(true);  }  setChartSettings(renderer,"Average temperature","Month","Temperature",0.5,12.5,0,32,Color.LTGRAY,Color.LTGRAY);  renderer.setXLabels(12);  renderer.setYLabels(10);  renderer.setShowGrid(true);  renderer.setXLabelsAlign(Align.RIGHT);  renderer.setYLabelsAlign(Align.RIGHT);  renderer.setZoomButtonsVisible(true);  renderer.setPanLimits(new double[]{-10,20,-10,40});  renderer.setZoomLimits(new double[]{-10,20,-10,40});  Intent intent=ChartFactory.getCubicLineChartIntent(context,buildDataset(titles,x,values),renderer,0.33f,"Average temperature");  return intent;}  }
class C{  private void maybeSelectIndex(MouseEvent me,int index){  if (me.getButton() == MouseEvent.BUTTON3) {    boolean isSelected=false;    for (    int selectedIndex : this.getSelectedIndices()) {      if (selectedIndex == index) {        isSelected=true;      }    }    if (!isSelected) {      this.setSelectedIndex(index);    }  }}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  int numBuckets=s.readInt();  table=new Entry[numBuckets];  int size=s.readInt();  for (int i=0; i < size; i++) {    Object key=s.readObject();    Object value=s.readObject();    put(key,value);  }}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  WalkingIterator(Compiler compiler,int opPos,int analysis,boolean shouldLoadWalkers) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,shouldLoadWalkers);  int firstStepPos=OpMap.getFirstChildPos(opPos);  if (shouldLoadWalkers) {    m_firstWalker=WalkerFactory.loadWalkers(this,compiler,firstStepPos,0);    m_lastUsedWalker=m_firstWalker;  }}  }
class C{  public ConcurrentModificationException(){}  }
class C{  public DSAParameterGenerationParameters(int L,int N,int certainty,SecureRandom random,int usageIndex){  this.l=L;  this.n=N;  this.certainty=certainty;  this.usageIndex=usageIndex;  this.random=random;}  }
class C{  public void stepBackward(){  changeTimeBy(-timeIncrement,timeWrap,TimerStatus.STEP_BACKWARD);}  }
class C{  protected Runnable createTileRunner(Tile tile){  return new TileRunner();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.107 -0500",hash_original_method="2FDA3671927B417EA64F28FFDD680773",hash_generated_method="4C5598F3753C2A0079DD4D0DD691D05A") public void removeComment(){  comment=null;}  }
class C{  public Pointer toDenseMatrix(cusparseHandle cusparseHandle,cublasHandle cublasHandle,int rows,int cols) throws DMLRuntimeException {  long size=rows * cols * Sizeof.DOUBLE;  Pointer A=JCudaObject.allocate(size);  cusparseDcsr2dense(cusparseHandle,rows,cols,descr,val,rowPtr,colInd,A,rows);  return A;}  }
class C{  public SegmentedScanResult grab() throws ExecutionException, InterruptedException {  Future<SegmentedScanResult> ret=exec.take();  int segment=ret.get().getSegment();  ScanSegmentWorker sw=workers[segment];  if (sw.hasNext()) {    exec.submit(sw);  } else {    finishSegment(segment);  }  return ret.get();}  }
class C{  protected void appendPayload(byte payload){  appendPayload(new byte[]{payload});}  }
class C{  AlignmentPattern find() throws NotFoundException {  int startX=this.startX;  int height=this.height;  int maxJ=startX + width;  int middleI=startY + (height / 2);  int[] stateCount=new int[3];  for (int iGen=0; iGen < height; iGen++) {    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) / 2 : -((iGen + 1) / 2));    stateCount[0]=0;    stateCount[1]=0;    stateCount[2]=0;    int j=startX;    while (j < maxJ && !image.get(j,i)) {      j++;    }    int currentState=0;    while (j < maxJ) {      if (image.get(j,i)) {        if (currentState == 1) {          stateCount[currentState]++;        } else {          if (currentState == 2) {            if (foundPatternCross(stateCount)) {              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);              if (confirmed != null) {                return confirmed;              }            }            stateCount[0]=stateCount[2];            stateCount[1]=1;            stateCount[2]=0;            currentState=1;          } else {            stateCount[++currentState]++;          }        }      } else {        if (currentState == 1) {          currentState++;        }        stateCount[currentState]++;      }      j++;    }    if (foundPatternCross(stateCount)) {      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);      if (confirmed != null) {        return confirmed;      }    }  }  if (!possibleCenters.isEmpty()) {    return possibleCenters.get(0);  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public static boolean sqlSyntaxBelow_12_2(SQLSyntaxLevel sqlSyntaxLevel){  return (sqlSyntaxLevel == SODAUtils.SQLSyntaxLevel.SQL_SYNTAX_12_1);}  }
class C{  private void checkQueueSize(){  if (queue.size() > maxQueueSize && displayed.size() > 0) {    displayed.getFirst().setFallbackTimeout(shortMaxDisplayTime);  }}  }
class C{  @Override public void executeScript(List<ScriptCommand> configurationScript){  String newLine=System.getProperty("line.separator");  StringBuffer buffer=new StringBuffer();  for (  ScriptCommand configuration : configurationScript) {    buffer.append(configuration.readScript());    buffer.append(newLine);  }  buffer.append("dumpStack()");  getLogger().debug("Sending WLST script: " + newLine + buffer.toString(),this.getClass().getName());  try {    File tempFile=File.createTempFile("wlst",".py");    tempFile.deleteOnExit();    getFileHandler().writeTextFile(tempFile.getAbsolutePath(),buffer.toString(),null);    executeScriptFiles(Arrays.asList(tempFile.getAbsolutePath()));  } catch (  Exception e) {    throw new CargoException("Cannot execute WLST script.",e);  }}  }
class C{  public static String hashMD5(String str){  return hashMD5(str.getBytes());}  }
class C{  public void testExternalizable() throws Exception {  check(EntityExternalizable.class);}  }
class C{  public Map<String,String> createOutputFieldMap(){  Map<String,String> outputFieldMap=new HashMap<String,String>();  KeyValueListParser kvParser=new KeyValueListParser("\\s*,\\s*",":");  if (!Strings.isNullOrEmpty(outputFieldMappings)) {    for (    KeyValue<String,String> keyVal : kvParser.parse(outputFieldMappings)) {      String key=keyVal.getKey();      String val=keyVal.getValue();      outputFieldMap.put(key,val);    }  }  return outputFieldMap;}  }
class C{  private void checkReadable(){  if (isReadOnly()) {    throw new IllegalStateException("ContextMap is read only and can not be modified");  }}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + "[]";}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private StringBuffer buildSelectQuery(String schemaName,String tableName,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues){  StringBuffer stmt=new StringBuffer();  stmt.append("SELECT * FROM ");  stmt.append(conn.getDatabaseObjectName(schemaName) + "." + conn.getDatabaseObjectName(tableName));  stmt.append(" WHERE ");  printColumnSpec(stmt,keys,keyValues,PrintMode.ASSIGNMENT," AND ");  return stmt;}  }
class C{  public Iterable<Result<Item>> listObjects(final String bucketName,final String prefix) throws XmlPullParserException {  return listObjects(bucketName,prefix,true);}  }
class C{  public void receiveResultqueryStorageFileSystems(com.emc.storageos.vasa.VasaServiceStub.QueryStorageFileSystemsResponse result){}  }
class C{  public static Intent createIntentForSettingsPage(Context context,String fragmentName){  ChromeApplication application=(ChromeApplication)context.getApplicationContext();  String activityName=application.getSettingsActivityName();  Intent intent=new Intent();  intent.setClassName(context,activityName);  if (!(context instanceof Activity)) {    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  }  if (fragmentName != null) {    intent.putExtra(Preferences.EXTRA_SHOW_FRAGMENT,fragmentName);    intent.putExtra(Preferences.EXTRA_DISPLAY_HOME_AS_UP,false);  }  return intent;}  }
class C{  public static String detectGwtModuleLogicalName(Path folder) throws IOException {  final String resourcesDir=folder.toString();  Finder finder=new Finder("*" + GWT_MODULE_XML_SUFFIX);  Files.walkFileTree(folder,EnumSet.of(FileVisitOption.FOLLOW_LINKS),Integer.MAX_VALUE,finder);  if (finder.getFirstMatchedFile() == null) {    throw new IllegalArgumentException("GWT module descriptor (*.gwt.xml) not found.");  }  String filePath=finder.getFirstMatchedFile().toString();  filePath=filePath.substring(filePath.indexOf(resourcesDir) + resourcesDir.length() + 1,filePath.length() - GWT_MODULE_XML_SUFFIX.length());  return filePath.replace(File.separatorChar,'.');}  }
class C{  @Override public void startElement(final String namespaceURI,final String localName,final String qName,final Attributes atts) throws SAXException {  Object objectToLoad=null;  if (openNodes.size() == 0)   objectToLoad=rootObject; else   objectToLoad=createChild(qName,atts);  if (objectToLoad != null) {    if (atts.getIndex("type") < 0)     ObjectGetSetter.set(objectToLoad,"type",qName);    ObjectGetSetter.setAll(objectToLoad,atts);  }  openNodes.push(new StackedObject(objectToLoad));}  }
class C{  public VNXeCommandJob createFileSystemAsync(CreateFileSystemParam param) throws VNXeException {  _url=URL_CREATE;  return postRequestAsync(param);}  }
class C{  @Override public final void readFields(final DataInput input) throws IOException {  vertices=new HashSet<LongWritable>();  int size=input.readInt();  for (int i=0; i < size; i++) {    LongWritable e=new LongWritable();    e.readFields(input);    vertices.add(e);  }  score=input.readDouble();  innerScore=input.readDouble();  boundaryScore=input.readDouble();}  }
class C{  public static void sortIfNecessary(Object value){  if (value instanceof Object[]) {    sort((Object[])value);  } else   if (value instanceof List) {    sort((List<?>)value);  }}  }
class C{  private void replaceTop(JsonScope newTop){  stack.set(stack.size() - 1,newTop);}  }
class C{  public Long scard(final byte[] key){  checkIsInMulti();  client.scard(key);  return client.getIntegerReply();}  }
class C{  public IndTestCorrelationT(TetradMatrix data,List<Node> variables,double alpha){  this.dataSet=ColtDataSet.makeContinuousData(variables,data);  this.dataSet=DataUtils.center(dataSet);  this.covMatrix=new CovarianceMatrix(dataSet);  this._covMatrix=covMatrix.getMatrix();  this.variables=Collections.unmodifiableList(variables);  this.indexMap=indexMap(variables);  this.nameMap=mapNames(variables);  setAlpha(alpha);}  }
class C{  protected static Vec4 SphericalToCartesian(double latitude,double longitude,double radius){  latitude*=Math.PI / 180.0f;  longitude*=Math.PI / 180.0f;  double radCosLat=radius * Math.cos(latitude);  return new Vec4(radCosLat * Math.sin(longitude),radius * Math.sin(latitude),radCosLat * Math.cos(longitude));}  }
class C{  public Organization determineChargingOrganization(){  Organization vendor=getVendor();  if (vendor.getGrantedRoleTypes().contains(OrganizationRoleType.SUPPLIER) || vendor.getGrantedRoleTypes().contains(OrganizationRoleType.RESELLER)) {    return vendor;  } else   if (vendor.getGrantedRoleTypes().contains(OrganizationRoleType.BROKER)) {    return getProductTemplate().getVendor();  } else {    return null;  }}  }
class C{  public ZoneRulesBuilder addRuleToWindow(LocalDateTime transitionDateTime,TimeDefinition timeDefinition,int savingAmountSecs){  Objects.requireNonNull(transitionDateTime,"transitionDateTime");  return addRuleToWindow(transitionDateTime.getYear(),transitionDateTime.getYear(),transitionDateTime.getMonth(),transitionDateTime.getDayOfMonth(),-1,transitionDateTime.getTime(),false,timeDefinition,savingAmountSecs);}  }
class C{  private JWT signIdTokenForHs256Hs384Hs512(final ClientDetailsEntity client,final JWSAlgorithm signingAlg,final JWTClaimsSet.Builder idClaims){  final JWT idToken;  log.debug("Client {} required a signed idToken with signing alg of {}",client.getClientId(),signingAlg);  final JWSHeader header=new JWSHeader(signingAlg,null,null,null,null,null,null,null,null,null,jwtService.getDefaultSignerKeyId(),null,null);  idToken=new SignedJWT(header,idClaims.build());  final JWTSigningAndValidationService signer=symmetricCacheService.getSymmetricValidtor(client);  signer.signJwt((SignedJWT)idToken);  return idToken;}  }
class C{  private void parseText(){  final int strIndex=getLEWord(mParserOffset + (4 * WORD_SIZE));  String data=getString(strIndex);  mListener.characterData(data);  mParserOffset+=(7 * WORD_SIZE);}  }
class C{  public boolean is_AttrValueChanged(String ColumnName){  return false;}  }
class C{  public void println(Object obj){  println(InvokerHelper.toString(obj));}  }
class C{  public void addIntersections(LineIntersector li,int segmentIndex,int geomIndex){  for (int i=0; i < li.getIntersectionNum(); i++) {    addIntersection(li,segmentIndex,geomIndex,i);  }}  }
class C{  public static String evaluateTemplate(Template template,CompilationUnit compilationUnit,int position) throws CoreException, BadLocationException, TemplateException {  TemplateContextType contextType=new ContextTypeRegistry().getContextType(template.getContextTypeId());  if (!(contextType instanceof CompilationUnitContextType))   throw new CoreException(new Status(IStatus.ERROR,"",IStatus.ERROR,"Template file incomplete or has errors.",null));  Document document=new WorkerDocument();  CompilationUnitContext context=((CompilationUnitContextType)contextType).createContext(document,position,0,compilationUnit);  context.setForceEvaluation(true);  TemplateBuffer buffer=context.evaluate(template);  if (buffer == null)   return null;  return buffer.getString();}  }
class C{  private void disableSelectionButtons(){  btnAdd.setEnabled(false);  btnLeftParen.setEnabled(false);}  }
class C{  public boolean canPace(){  return false;}  }
class C{  public void windowDeactivated(WindowEvent e){}  }
class C{  public void onDragDismissed(){}  }
class C{  public static ExecutionResult runTest(TestCase test){  ExecutionResult result=new ExecutionResult(test,null);  try {    TestCaseExecutor executor=getInstance();    logger.debug("Executing test");    result=executor.execute(test);    MaxStatementsStoppingCondition.statementsExecuted(result.getExecutedStatements());  } catch (  Exception e) {    logger.error("TG: Exception caught: ",e);    throw new Error(e);  }  return result;}  }
class C{  public synchronized void activateCheckOid(){  checkOid=true;}  }
class C{  public boolean visit(WhileStatement node){  return true;}  }
class C{  public void insertFavoris(String id,int type){  ContentValues values=new ContentValues();  values.put(BaseFavoris.COL_ID,id);  values.put(BaseFavoris.COL_TYPE,type);  long last=bdd.insert(BaseFavoris.TABLE_FAVORIS,null,values);}  }
class C{  private IncomingMessageEnvelope chooseEnvelope(){  IncomingMessageEnvelope envelope=consumerMultiplexer.choose(false);  if (envelope != null) {    log.trace("Choose envelope ssp {} offset {} for processing",envelope.getSystemStreamPartition(),envelope.getOffset());    containerMetrics.envelopes().inc();  } else {    log.trace("No envelope is available");    containerMetrics.nullEnvelopes().inc();  }  return envelope;}  }
class C{  public static void saveConnection(Connection connection){  try {    Files.writeObject(connection,new File(dataDir,connection.getId() + Constants.DATA_FILE_EXTENSION));  } catch (  IOException e) {    throw new PahoException(e);  }}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  public void runTest(){  VelocityContext inner=new VelocityContext();  EventCartridge ec=new EventCartridge();  ec.addEventHandler(this);  ec.attachToContext(inner);  VelocityContext context=new VelocityContext(inner);  context.put("name","Velocity");  try {    String s="$name";    StringWriter w=new StringWriter();    Velocity.evaluate(context,w,"mystring",s);    if (!w.toString().equals(REFERENCE_VALUE)) {      fail("Reference insertion test 1");    }    s="$floobie";    w=new StringWriter();    Velocity.evaluate(context,w,"mystring",s);    if (!w.toString().equals(NO_REFERENCE_VALUE)) {      fail("Reference insertion test 2");    }    s="#set($settest = $NotAReference)";    w=new StringWriter();    logString=null;    Velocity.evaluate(context,w,"mystring",s);    if (logString != null) {      fail("NullSetEventHandler test 1");    }    s="#set($logthis = $NotAReference)";    w=new StringWriter();    logString=null;    Velocity.evaluate(context,w,"mystring",s);    if (logString == null) {      fail("NullSetEventHandler test 1");    }    exceptionSwitch=true;    context.put("this",this);    s=" $this.throwException()";    w=new StringWriter();    try {      Velocity.evaluate(context,w,"mystring",s);    } catch (    MethodInvocationException mee) {      fail("MethodExceptionEvent test 1");    }catch (    Exception e) {      fail("MethodExceptionEvent test 1");    }    exceptionSwitch=false;    s=" $this.throwException()";    w=new StringWriter();    try {      Velocity.evaluate(context,w,"mystring",s);      fail("MethodExceptionEvent test 2");    } catch (    MethodInvocationException mee) {    }catch (    Exception e) {      fail("MethodExceptionEvent test 2");    }  } catch (  ParseErrorException pee) {    fail("ParseErrorException" + pee);  }catch (  MethodInvocationException mee) {    fail("MethodInvocationException" + mee);  }catch (  Exception e) {    fail("Exception" + e);  }}  }
class C{  @Nullable @Override public Map<String,Integer> transform(List<Event> events){  final Map<String,Integer> map=new HashMap<>();  for (  Event event : events) {    map.putAll(transform(event));  }  return map;}  }
class C{  public Object read(InputNode node) throws Exception {  Instance value=factory.getInstance(node);  Object data=value.getInstance();  if (value.isReference()) {    return value.getInstance();  }  return read(node,data);}  }
class C{  public SexecFactoryImpl(){  super();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Element adapt(Element source,ElementMetadata<?,?> sourceMeta,String kind){  ElementKey<?,?> adaptorKey=sourceMeta.adapt(kind);  if (adaptorKey != null) {    try {      return adapt(adaptorKey,source);    } catch (    ContentCreationException e) {      LOGGER.log(Level.SEVERE,"Unable to adapt " + source.getClass() + " to "+ adaptorKey.getElementType(),e);    }  }  return source;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    for (    FieldNode f : fields) {      f.check(api);    }    for (    MethodNode m : methods) {      m.check(api);    }  }}  }
class C{  public FetchBitmapTask(int preferredWidth,int preferredHeight){  mPreferredWidth=preferredWidth;  mPreferredHeight=preferredHeight;}  }
class C{  public float nextFloatFromTo(float from,float to){  return (float)nextDoubleFromTo(from,to);}  }
class C{  public void start(){  tcpThread.start();  udpThread.start();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.443 -0400",hash_original_method="A737830B6A2B6F6C2620CA3298757069",hash_generated_method="9D8868FD69A1D6291C9E6928B0842C7B") protected int processChar(){  return 0;}  }
class C{  public boolean isNonsingular(){  for (int j=0; j < n; j++) {    if (LU[j][j] == 0) {      return false;    }  }  return true;}  }
class C{  public OpaqueContentPlugin locateTagPlugin(String tag){  return this.opaqueTagByName.get(tag);}  }
class C{  private static void enableOpenGLIfNecessary(){  if (OperatingSystemDetector.isMac()) {    Log.i("Enabling OpenGL.");    System.setProperty("sun.java2d.opengl","True");  } else {    Log.i("Not using OpenGL.");  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:01.629 -0500",hash_original_method="05CB0469E06BEBC8972F8D92F854C7D5",hash_generated_method="AA0F34F1CF918B76A7AD216B81334502") public static final void saveBookmark(Context c,String title,String url){  Intent i=new Intent(Intent.ACTION_INSERT,Browser.BOOKMARKS_URI);  i.putExtra("title",title);  i.putExtra("url",url);  c.startActivity(i);}  }
class C{  private void quadFullScreenVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  public static DeleteServiceSessionResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteServiceSessionResponseE object=new DeleteServiceSessionResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","deleteServiceSessionResponse").equals(reader.getName())) {          object.setDeleteServiceSessionResponse(DeleteServiceSessionResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void regexExample(View v){  Intent intent=new Intent(this,SegmentScanActivity.class);  intent.putExtra(SegmentScanActivity.EXTRAS_LICENSE_KEY,LICENSE_KEY);  BlinkOCREngineOptions engineOptions=new BlinkOCREngineOptions();  engineOptions.addAllDigitsToWhitelist(OcrFont.OCR_FONT_ANY).addUppercaseCharsToWhitelist(OcrFont.OCR_FONT_ANY);  engineOptions.setMinimumLineHeight(40);  engineOptions.setColorDropoutEnabled(true);  RegexParserSettings regexParserSettings=new RegexParserSettings("[A-Z0-9]{17}",engineOptions);  ScanConfiguration conf[]=new ScanConfiguration[]{new ScanConfiguration(R.string.vin_title,R.string.vin_msg,NAME_VIN,regexParserSettings)};  intent.putExtra(SegmentScanActivity.EXTRAS_SCAN_CONFIGURATION,conf);  Intent helpIntent=new Intent(this,HelpActivity.class);  intent.putExtra(SegmentScanActivity.EXTRAS_HELP_INTENT,helpIntent);  startActivityForResult(intent,BLINK_OCR_VIN_REQUEST_CODE);}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  private GenericDAOImpl(){}  }
class C{  public boolean scanHead(final int nscan,final T ref){  if (nscan <= 0)   throw new IllegalArgumentException();  if (ref == null)   throw new IllegalArgumentException();  int head=this.head;  int count=this.size;  for (int i=0; i < nscan && count > 0; i++) {    head=(head == 0 ? capacity - 1 : head - 1);    count--;    if (refs[head] == ref) {      return true;    }  }  return false;}  }
class C{  private boolean readMetaContinuation(ReadStream is,int crc) throws IOException {  long value=BitsUtil.readLong(is);  crc=Crc32Caucho.generate(crc,value);  int crcFile=BitsUtil.readInt(is);  if (crcFile != crc) {    log.fine("meta-segment crc mismatch");    return false;  }  long address=value & ~0xffff;  int length=(int)((value & 0xffff) << 16);  if (length != _segmentMeta[0].size()) {    throw new IllegalStateException();  }  SegmentExtent extent=new SegmentExtent(0,address,length);  _metaExtents.add(extent);  _metaAddress=address;  _metaOffset=address;  _metaTail=address + length;  return false;}  }
class C{  public MandatoryWarningHandler(Log log,boolean verbose,boolean enforceMandatory,String prefix,LintCategory lc){  this.log=log;  this.verbose=verbose;  this.prefix=prefix;  this.enforceMandatory=enforceMandatory;  this.lintCategory=lc;}  }
class C{  @Inline public static Word attemptToForward(ObjectReference object){  Word oldValue;  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    if ((byte)(oldValue.toInt() & FORWARDING_MASK) != FORWARDING_NOT_TRIGGERED_YET)     return oldValue;  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,oldValue.or(Word.fromIntZeroExtend(BEING_FORWARDED))));  return oldValue;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CategoryPointerAnnotation)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  CategoryPointerAnnotation that=(CategoryPointerAnnotation)obj;  if (this.angle != that.angle) {    return false;  }  if (this.tipRadius != that.tipRadius) {    return false;  }  if (this.baseRadius != that.baseRadius) {    return false;  }  if (this.arrowLength != that.arrowLength) {    return false;  }  if (this.arrowWidth != that.arrowWidth) {    return false;  }  if (!this.arrowPaint.equals(that.arrowPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.arrowStroke,that.arrowStroke)) {    return false;  }  if (this.labelOffset != that.labelOffset) {    return false;  }  return true;}  }
class C{  public static void doMain(String[] args){  String job="java:saveWithQueryBuilder";  String keyspaceName="test";  String inputTableName="tweets2";  final String outputTableName="counters";  String statsTableName="counters";  ContextProperties p=new ContextProperties(args);  DeepSparkContext deepContext=new DeepSparkContext(p.getCluster(),job,p.getSparkHome(),p.getJars());  CassandraDeepJobConfig<Cells> inputConfig=CassandraConfigFactory.create().host(p.getCassandraHost()).cqlPort(p.getCassandraCqlPort()).rpcPort(p.getCassandraThriftPort()).keyspace(keyspaceName).table(inputTableName).initialize();  JavaRDD<Cells> inputRDD=deepContext.createJavaRDD(inputConfig);  CassandraDeepJobConfig<Cells> outputConfig=CassandraConfigFactory.createWriteConfig().host(p.getCassandraHost()).cqlPort(p.getCassandraCqlPort()).rpcPort(p.getCassandraThriftPort()).keyspace(keyspaceName).table(outputTableName).createTableOnWrite(true);  outputConfig.initialize();  deepContext.saveRDD(inputRDD.rdd(),outputConfig,new IncreaseCountersQueryBuilder());  deepContext.stop();}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  @Override public double discretize(double value){  return value;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildKids(zone);}  }
class C{  public boolean isNonReturningCall(){  return isNonReturningCall;}  }
class C{  private void verifyMigrationInterrupted(String version){  CoordinatorClient coordinator=getCoordinator();  Assert.assertEquals(MigrationStatus.RUNNING,coordinator.getMigrationStatus());  String checkpoint=getCheckpoint(version);  log.info("Current migration checkpoint: {}",checkpoint);  Assert.assertNotNull(checkpoint);  String failedCallbackName=com.emc.storageos.db.server.upgrade.util.callbacks2.Resource3NewFlagsInitializer.class.getSimpleName();  Assert.assertNotSame(failedCallbackName,checkpoint);}  }
class C{  void recordModifications(CompilationUnit root){  if (this.modificationCount != this.originalModificationCount) {    throw new IllegalArgumentException("AST is already modified");  } else   if (this.rewriter != null) {    throw new IllegalArgumentException("AST modifications are already recorded");  } else   if ((root.getFlags() & ASTNode.PROTECT) != 0) {    throw new IllegalArgumentException("Root node is unmodifiable");  } else   if (root.getAST() != this) {    throw new IllegalArgumentException("Root node is not owned by this ast");  }  this.rewriter=new InternalASTRewrite(root);  setEventHandler(this.rewriter);}  }
class C{  private static XmlGlobal toXmlGlobal(Class<?> aClass){  JGlobalMap globalMap=aClass.getAnnotation(JGlobalMap.class);  JMapAccessor targetAccessor=aClass.getAnnotation(JMapAccessor.class);  String get=targetAccessor != null ? targetAccessor.get() : Constants.DEFAULT_ACCESSOR_VALUE;  String set=targetAccessor != null ? targetAccessor.set() : Constants.DEFAULT_ACCESSOR_VALUE;  SimplyAttribute[] targetAttributes=toTargetAttributes(globalMap.attributes());  return toXmlGlobal(globalMap.value(),get,set,targetAttributes,globalMap.classes(),globalMap.excluded());}  }
class C{  private void fillFBAbstractCommonDataSourceProperties(FBAbstractCommonDataSource instance) throws SQLException {  instance.setDescription(DESCRIPTION);  instance.setType(TYPE);  instance.setServerName(SERVER_NAME);  instance.setPortNumber(PORT_NUMBER);  instance.setDatabaseName(DATABASE_NAME);  instance.setUser(USER);  instance.setPassword(PASSWORD);  instance.setEncoding(ENCODING);  instance.setLoginTimeout(LOGIN_TIMEOUT);  instance.setRoleName(ROLE_NAME);}  }
class C{  public static void main(String args[]){  System.out.printf("==========================================================================================\n");  System.out.printf("  Averaging the normalized simulated GAP activity densities for multiple runs.\n");  System.out.printf("==========================================================================================\n\n");  int maxZones=30000;  ArrayList<ArrayList<Double>> zoneList=new ArrayList<ArrayList<Double>>(maxZones + 1);  for (int i=0; i < maxZones + 1; i++) {    ArrayList<Double> hours=new ArrayList<Double>(25);    hours.add(0.0);    for (int j=0; j < 24; j++) {      Double value=0.0;      hours.add(value);    }    zoneList.add(hours);  }  Map<Integer,ArrayList<ArrayList<Double>>> newStatsMap=new TreeMap<Integer,ArrayList<ArrayList<Double>>>();  ArrayList<Integer> zoneSequence=new ArrayList<Integer>();  boolean zoneSet=false;  String header=null;  int runIndex=0;  for (  String run : RUNS) {    String folderName=FOLDER + run + "/";    File folder=new File(folderName);    if (!folder.isDirectory()) {      System.err.printf("%s is not a directory!\n",folderName);      System.exit(0);    } else {      System.out.printf("   Reading %s... ",folder.getPath());      File[] fileList=folder.listFiles();      for (      File file : fileList) {        if (file.getName().length() > 20 && file.getName().startsWith("SimulatedCommercialMinorGAP_Normalized")) {          try {            Scanner input=new Scanner(new BufferedReader(new FileReader(file)));            header=input.nextLine();            while (input.hasNextLine()) {              String[] line=input.nextLine().split(",");              Integer zoneId=Integer.parseInt(line[0]);              if (!newStatsMap.containsKey(zoneId)) {                ArrayList<ArrayList<Double>> newZone=new ArrayList<ArrayList<Double>>(24);                for (int i=0; i < 24; i++) {                  ArrayList<Double> newHour=new ArrayList<Double>(RUNS.length);                  for (int j=0; j < RUNS.length; j++) {                    newHour.add(0.0);                  }                  newZone.add(newHour);                }                newStatsMap.put(zoneId,newZone);              }              if (!zoneSet) {                zoneSequence.add(zoneId);              }              zoneList.get(zoneId).set(0,1.);              for (int i=1; i < line.length; i++) {                Double oldValue=zoneList.get(zoneId).get(i);                zoneList.get(zoneId).set(i,oldValue + Double.parseDouble(line[i]));                newStatsMap.get(zoneId).get(i - 1).set(runIndex,Double.parseDouble(line[i]));              }            }          } catch (          FileNotFoundException e) {            e.printStackTrace();          }          zoneSet=true;        }      }      System.out.printf("Done.\n");    }    runIndex++;  }  System.out.printf("   Calculating statistics... ");  Double number=(double)RUNS.length;  for (  Integer z1 : zoneSequence) {    ArrayList<Double> theZone=zoneList.get(z1);    if (theZone.get(0) == 0) {      System.err.printf("Trying to calculate averages for zone %d that has not been set!",z1);      System.exit(0);    } else {      for (int i=1; i < theZone.size(); i++) {        double oldValue=theZone.get(i);        theZone.set(i,(oldValue / number));      }    }  }  double counter=0;  double total=0;  double avgStdDev;  double[] doubles;  System.out.printf("   Writing the average densities to file... ");  DateString ds=new DateString();  String outputFileName=ROOT + "AverageSimulatedCommercialMinorGAP_Normalized_" + ds.toString()+ ".txt";  try {    BufferedWriter output=new BufferedWriter(new FileWriter(new File(outputFileName)));    try {      output.write(header);      output.newLine();      for (      Integer z2 : zoneSequence) {        ArrayList<Double> theZone=zoneList.get(z2);        if (theZone.get(0) == 0) {          System.err.printf("Trying to write out zone %d that has not been set!",z2);          System.exit(0);        } else {          output.write(String.valueOf(z2));          output.write(",");          for (int j=1; j < theZone.size() - 1; j++) {            output.write(String.valueOf(theZone.get(j)));            output.write(",");          }          output.write(String.valueOf(theZone.get(theZone.size() - 1)));          output.newLine();        }      }    }  finally {      output.close();    }  } catch (  IOException e) {    e.printStackTrace();  }  System.out.println("Done.");  System.out.println("Completed successfully!");}  }
class C{  @Override public void writeCustom(final int key,final Object value){switch (key) {case CUSTOM_IMAGE_HANDLER:    this.customImageHandler=(org.jpedal.external.ImageHandler)value;  break;case CUSTOM_COLOR_HANDLER:this.customColorHandler=(org.jpedal.external.ColorHandler)value;break;case PAINT_BACKGROUND:paintBackground((Shape)value);break;}}  }
class C{  public boolean elementAvailable(QName elemName){  return m_availElems.containsKey(elemName);}  }
class C{  HttpPath(FilesystemPath root,String userPath,Map<String,Object> newAttributes,String path,String query){  super(root,userPath,path);  _host=((HttpPath)root)._host;  _port=((HttpPath)root)._port;  _query=query;  if (newAttributes != null) {    _virtualHost=(String)newAttributes.get("host");  }}  }
class C{  public void init(final int width,final int height){  if (this.width != width || this.height != height) {    map=null;  } else   if (map != null) {    map.clear();  }  this.width=width;  this.height=height;  clear();}  }
class C{  private Object readResolve(){switch (index) {case 0:    return LEAP_YEAR_15_BASED;case 1:  return LEAP_YEAR_16_BASED;case 2:return LEAP_YEAR_INDIAN;case 3:return LEAP_YEAR_HABASH_AL_HASIB;default :return this;}}  }
class C{  public static <T extends DataObject>void executePurging(DbClient dbClient,DbDependencyPurger purger,ScheduledExecutorService executorService,T resource,int maxIter,String taskId,int timeout){  PurgeRunnable<T> purgeRunner=new PurgeRunnable<T>(dbClient,purger,executorService,resource,maxIter,taskId,timeout);  try {    executorService.execute(purgeRunner);  } catch (  Exception e) {    _log.error(String.format("Failed to reschedule removal of the resource %s from the database",resource.getId()),e);    Operation op=new Operation(Operation.Status.error.toString(),String.format("Failed to schedule removal of the resource %s rom the Database",resource.getId()));    dbClient.updateTaskOpStatus(resource.getClass(),resource.getId(),taskId,op);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:06.931 -0500",hash_original_method="7DD74A3F0F5CC57B45BB73D025A428F5",hash_generated_method="4A45CAF2AB4D7575A1E95B4998505638") protected int consumed(){  return consumed;}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  @Override public void startIteration() throws AdeException {  if (m_trained) {    throw new AdeInternalException("Already trained");  }  m_rawScores=new ArrayList<Double>();  m_intervalCount=0;}  }
class C{  public Dimension preferredLayoutSize(Container target){synchronized (target.getTreeLock()) {    Dimension dim=new Dimension(0,0);    boolean ltr=target.getComponentOrientation().isLeftToRight();    Component c=null;    if ((c=getChild(EAST,ltr)) != null) {      Dimension d=c.getPreferredSize();      dim.width+=d.width + hgap;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(WEST,ltr)) != null) {      Dimension d=c.getPreferredSize();      dim.width+=d.width + hgap;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(CENTER,ltr)) != null) {      Dimension d=c.getPreferredSize();      dim.width+=d.width;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(NORTH,ltr)) != null) {      Dimension d=c.getPreferredSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    if ((c=getChild(SOUTH,ltr)) != null) {      Dimension d=c.getPreferredSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    Insets insets=target.getInsets();    dim.width+=insets.left + insets.right;    dim.height+=insets.top + insets.bottom;    return dim;  }}  }
class C{  public void autoForward(AjaxRequestTarget aTarget,JCas aJCas) throws UIMAException, ClassNotFoundException, IOException, BratAnnotationException {  LOG.info("BEGIN auto-forward annotation");  GetDocumentResponse response=new GetDocumentResponse();  Selection selection=getModelObject().getSelection();  AnnotationFS nextToken=BratAjaxCasUtil.getNextToken(aJCas,selection.getBegin(),selection.getEnd());  if (nextToken != null) {    Sentence firstSentence=BratAjaxCasUtil.selectSentenceAt(aJCas,getModelObject().getSentenceBeginOffset(),getModelObject().getSentenceEndOffset());    int la=BratAjaxCasUtil.getLastSentenceAddressInDisplayWindow(aJCas,firstSentence.getAddress(),getModelObject().getPreferences().getWindowSize());    Sentence ls=(Sentence)BratAjaxCasUtil.selectByAddr(aJCas.getCas(),la);    if (ls.getEnd() > nextToken.getBegin()) {      selection.clear();      selection.set(aJCas,nextToken.getBegin(),nextToken.getEnd());      editor.actionAnnotate(aTarget,getModelObject(),true);    }  }  BratAjaxCasController.render(response,getModelObject(),aJCas,annotationService);  String json=toJson(response);  LOG.info("auto-forward annotation");  aTarget.appendJavaScript("Wicket.$('" + vis.getMarkupId() + "').dispatcher.post('renderData', ["+ json+ "]);");}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.817 -0500",hash_original_method="001E874571014D08FBFC41C7A23D02C6",hash_generated_method="DAEE70F3FEC579967FE1F19DA12BDA14") public SocketException(Throwable cause){  super(cause);}  }
class C{  public void disconnectNode(short nodeId){synchronized (connections) {    Short n=Short.valueOf(nodeId);    MessageWindow mw=messageWindows.get(n);    if (mw != null) {      mw.lock.lock();      mw.disconnected=true;      try {        mw.full.signalAll();        messageWindows.remove(n);      }  finally {        mw.lock.unlock();      }    }    NodeConnection nc=connections.get(nodeId);    if (nc != null) {      nc.nuke();    }    connections.remove(nodeId);  }}  }
class C{  public void drainHeldItem(EntityPlayer player,INetworkCache cache){}  }
class C{  public void dynInit(IStatusBar statusBar){  m_staticQuery=new MQuery();  m_staticQuery.addRestriction("AD_Client_ID",MQuery.EQUAL,Env.getAD_Client_ID(Env.getCtx()));  int AD_Window_ID=223;  GridWindowVO wVO=AEnv.getMWindowVO(m_WindowNo,AD_Window_ID,0);  if (wVO == null)   return;  m_mWindow=new GridWindow(wVO);  m_mTab=m_mWindow.getTab(0);  m_mWindow.initTab(0);  m_mTab.setQuery(MQuery.getEqualQuery("1","2"));  m_mTab.query(false);  statusBar.setStatusLine(" ",false);  statusBar.setStatusDB(" ");}  }
class C{  public static <T>Iterable<T> randomIterable(Collection<T> col){  List<T> list=new ArrayList<>(col);  Collections.shuffle(list);  return list;}  }
class C{  public boolean supportsConvert(int fromType,int toType) throws SQLException {  return false;}  }
class C{  private NameUtils(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void pointerPress(float x,float y,int[] path){  if (verbose) {    log("pointerPress(" + x + ", "+ y+ ", "+ toString(path)+ ")");  }  Component c=getComponentByPath(path);  int actualX=c.getAbsoluteX() + (int)(x * c.getWidth());  int actualY=c.getAbsoluteY() + (int)(y * c.getHeight());  Display.getInstance().getCurrent().pointerPressed(actualX,actualY);  waitFor(10);}  }
class C{  public DeletingUnitWithSubscriptionsNotPermittedException(String message){  super(message);}  }
class C{  public void testBug51313() throws Exception {  this.stmt=this.conn.createStatement();  this.rs=this.stmt.executeQuery("SELECT {fn lcase('My{fn UCASE(sql)}} -- DATABASE')}, {fn ucase({fn lcase('SERVER')})}" + " -- {escape } processing test\n -- this {fn ucase('comment') is in line 2\r\n" + " -- this in line 3, and previous escape sequence was malformed\n");  assertTrue(this.rs.next());  assertEquals("my{fn ucase(sql)}} -- database",this.rs.getString(1));  assertEquals("SERVER",this.rs.getString(2));  this.rs.close();  this.rs=this.stmt.executeQuery("SELECT 'MySQL \\\\\\' testing {long \\\\\\' escape -- { \\\\\\' sequences \\\\\\' } } with escape processing '");  assertTrue(this.rs.next());  assertEquals("MySQL \\\' testing {long \\\' escape -- { \\\' sequences \\\' } } with escape processing ",this.rs.getString(1));  this.rs.close();  this.rs=this.stmt.executeQuery("SELECT 'MySQL \\'', '{ testing doubled -- } ''\\\\\\''' quotes '");  assertTrue(this.rs.next());  assertEquals("MySQL \'",this.rs.getString(1));  assertEquals("{ testing doubled -- } '\\\'' quotes ",this.rs.getString(2));  this.rs.close();  this.rs=this.stmt.executeQuery("SELECT 'MySQL \\\\\\'''', '{ testing doubled -- } ''\\''' quotes '");  assertTrue(this.rs.next());  assertEquals("MySQL \\\''",this.rs.getString(1));  assertEquals("{ testing doubled -- } '\'' quotes ",this.rs.getString(2));  this.rs.close();}  }
class C{  public synchronized MetadataRegistry registerClass(Class<? extends Element> clazz){  if (Element.class == clazz) {    return this;  }  try {    Method registerMethod=clazz.getDeclaredMethod("registerMetadata",MetadataRegistry.class);    if (!Modifier.isStatic(registerMethod.getModifiers())) {      throw new IllegalArgumentException("Class " + clazz + " had a non-static registerMetadata(MetadataRegistry) method.");    }    registerMethod.invoke(null,this);    return this;  } catch (  SecurityException e) {    throw new IllegalArgumentException(e);  }catch (  NoSuchMethodException e) {    throw new IllegalArgumentException("Class " + clazz + " doesn't support metadata registration.",e);  }catch (  IllegalAccessException e) {    throw new IllegalArgumentException(e);  }catch (  InvocationTargetException e) {    throw new IllegalArgumentException(e.getCause());  }}  }
class C{  public synchronized void tickSize(int reqId,int field,int value){  try {switch (field) {case TickType.VOLUME:{        break;      }default :{      break;    }}} catch (Exception ex) {error(reqId,3210,ex.getMessage());}}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  public GaussianBlurRed8Bit(CachableRed src,double stdDev,RenderingHints rh){  this(src,stdDev,stdDev,rh);}  }
class C{  public final void testVerifyPublicKey() throws InvalidKeyException, CertificateException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  c1.verify(null);}  }
class C{  public CassandraSessionImpl(Cluster.Builder builder,Integer fetchSize,ConsistencyLevel readConsistency,ConsistencyLevel writeConsistency,IgniteLogger log){  this.builder=builder;  this.fetchSize=fetchSize;  this.readConsistency=readConsistency;  this.writeConsistency=writeConsistency;  this.log=log;}  }
class C{  public RenameNonVirtualMethodProcessor(IMethod method,JavaRefactoringArguments arguments,RefactoringStatus status){  this(method);  RefactoringStatus initializeStatus=initialize(arguments);  status.merge(initializeStatus);}  }
class C{  public static terminal find(int indx){  Integer the_indx=new Integer(indx);  return (terminal)_all_by_index.get(the_indx);}  }
class C{  public void addAttachment(Attachment attachment){  addProperty(attachment);}  }
class C{  public Expression copyInline(Context ctx){  if (implementation != null)   return implementation.copyInline(ctx);  ThisExpression e=(ThisExpression)clone();  if (field == null) {    e.field=ctx.getLocalField(idThis);    e.field.readcount++;  } else {    e.field=field.getCurrentInlineCopy(ctx);  }  if (outerArg != null) {    e.outerArg=outerArg.copyInline(ctx);  }  return e;}  }
class C{  @Override public void stopHook(){}  }
class C{  public void applyTorque(float torque){  applyBodyTorque(physicsWorld.toMeters(torque));}  }
class C{  public Lookup(String name,int type,int dclass) throws TextParseException {  this(Name.fromString(name),type,dclass);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild=null;  Node newChild;  Node child;  String childName;  Node insertedNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newChild=doc.createElement("br");  insertedNode=employeeNode.insertBefore(newChild,refChild);  child=employeeNode.getLastChild();  childName=child.getNodeName();  assertEqualsAutoCase("element","nodeName","br",childName);}  }
class C{  protected Double wrapKey(double k){  return new Double(k);}  }
class C{  @Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {  endpoints.authenticationManager(authenticationManager);}  }
class C{  protected boolean doSaveFile(){  if (currFileName == null) {    return saveAs();  }  if (saveFileStream()) {    this.dirty=false;    updateCaption();    return true;  } else {    return false;  }}  }
class C{  public boolean endsWith(String suffix){  return str().endsWith(suffix);}  }
class C{  public boolean isLocalSite(Site site){  return site.getUuid().equals(coordinator.getSiteId());}  }
class C{  public ImageScroller(final ImageScrollerLargeView large,final ImageScrollerSmallView small){  final OverlayLayout overlay=new OverlayLayout(this);  this.setLayout(overlay);  this.add(small);  this.add(large);  small.setAlignmentX(1);  small.setAlignmentY(0);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void logInfo(String message){  logger.info(logPrefix + message);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  if (propertyChangeSupport == null) {    propertyChangeSupport=new PropertyChangeSupport(this);  }  propertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  public ConnectionPoolDataSource createPoolDataSource(CConnection connection){  throw new UnsupportedOperationException("Not supported/implemented");}  }
class C{  public static String toHex(byte[] bytes){  StringBuffer buf=new StringBuffer();  for (int i=0; i < bytes.length; i++) {    byte b=bytes[i];    buf.append(toHexDigit((b >> 4) & 0x0F));    buf.append(toHexDigit(b & 0x0F));  }  return buf.toString();}  }
class C{  public void testAddFileByInputStream(ArchiveSource src) throws IOException {  src.clear();  try {    src.startWrite();    addFileByInputStream(src,m_file1,m_data1);    addFileByInputStream(src,m_file2,m_data2);    addFileByInputStream(src,m_file3,m_data3);  }  finally {    src.finishWrite();  }  checkFilesAdded(src);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void shutdownNow() throws Exception {  log.debug("shutdownNow");  parsing.set(false);  if (parserService != null)   parserService.shutdownNow();  if (indexerService != null)   indexerService.shutdownNow();  if (indexerTask != null) {    indexerTask.cancel(true);  }  if (mmgr != null) {    mmgr.clear();  }}  }
class C{  public void createDatabaseEntitiesForBusinessObjectDataAvailabilityCollectionTesting(){  storageUnitDaoTestHelper.createStorageUnitEntity(AbstractServiceTest.STORAGE_NAME,AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.PARTITION_VALUE,AbstractServiceTest.SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID,StorageUnitStatusEntity.ENABLED,AbstractServiceTest.NO_STORAGE_DIRECTORY_PATH);}  }
class C{  private void moveWaitToBuffer(final double now){  while (hasFlowCapacityLeftAndBufferSpace()) {    QVehicle veh=this.waitingList.poll();    if (veh == null) {      return;    }    this.network.simEngine.getMobsim().getEventsManager().processEvent(new VehicleEntersTrafficEvent(now,veh.getDriver().getId(),this.getLink().getId(),veh.getId(),veh.getDriver().getMode(),1.0));    boolean handled=this.addTransitToBuffer(now,veh);    if (!handled) {      if (veh.getDriver() instanceof TransitDriverAgent) {        TransitDriverAgent trDriver=(TransitDriverAgent)veh.getDriver();        Id<Link> nextLinkId=trDriver.chooseNextLinkId();        if (nextLinkId == null || nextLinkId.equals(trDriver.getCurrentLinkId())) {          trDriver.endLegAndComputeNextState(now);          this.addParkedVehicle(veh);          this.network.simEngine.internalInterface.arrangeNextAgentState(trDriver);          this.makeVehicleAvailableToNextDriver(veh,now);          this.vehQueue.poll();          this.usedStorageCapacity-=veh.getSizeInEquivalents();          if (HOLES) {            Hole hole=new Hole();            hole.setEarliestLinkExitTime(now + this.link.getLength() * 3600. / 15. / 1000.);            holes.add(hole);          }          continue;        }      }      addToBuffer(veh,now);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document docAlt;  DocumentType docType=null;  NamedNodeMap attributes;  NodeList elementList;  Element element;  Attr attrAlt;  Node newNode;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(1);  attributes=element.getAttributes();  domImpl=doc.getImplementation();  docAlt=domImpl.createDocument(nullNS,"newDoc",docType);  attrAlt=docAlt.createAttributeNS(nullNS,"street");{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(attrAlt);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  protected String doIt() throws Exception {  resetCostsLLForLLC0();  int maxLowLevel=MPPMRP.getMaxLowLevel(getCtx(),get_TrxName());  for (int lowLevel=maxLowLevel; lowLevel >= 0; lowLevel--) {    for (    MProduct product : getProducts(lowLevel)) {      I_PP_Product_Planning pp=MPPProductPlanning.find(getCtx(),p_AD_Org_ID,0,0,product.getM_Product_ID(),get_TrxName());      int PP_Product_BOM_ID=0;      if (pp != null) {        PP_Product_BOM_ID=pp.getPP_Product_BOM_ID();      } else {        createNotice(product,"@NotFound@ @PP_Product_Planning_ID@");      }      if (PP_Product_BOM_ID <= 0) {        PP_Product_BOM_ID=MPPProductBOM.getBOMSearchKey(product);      }      MPPProductBOM bom=MPPProductBOM.get(getCtx(),PP_Product_BOM_ID);      if (bom == null) {        createNotice(product,"@NotFound@ @PP_Product_BOM_ID@");      }      rollup(product,bom);    }  }  return "@OK@";}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void deleteStreams(Transaction t,final Set<Long> streamIds){  if (streamIds.isEmpty()) {    return;  }  Set<UserPhotosStreamMetadataTable.UserPhotosStreamMetadataRow> smRows=Sets.newHashSet();  Multimap<UserPhotosStreamHashAidxTable.UserPhotosStreamHashAidxRow,UserPhotosStreamHashAidxTable.UserPhotosStreamHashAidxColumn> shToDelete=HashMultimap.create();  for (  Long streamId : streamIds) {    smRows.add(UserPhotosStreamMetadataTable.UserPhotosStreamMetadataRow.of(streamId));  }  UserPhotosStreamMetadataTable table=tables.getUserPhotosStreamMetadataTable(t);  Map<UserPhotosStreamMetadataTable.UserPhotosStreamMetadataRow,StreamMetadata> metadatas=table.getMetadatas(smRows);  Set<UserPhotosStreamValueTable.UserPhotosStreamValueRow> streamValueToDelete=Sets.newHashSet();  for (  Entry<UserPhotosStreamMetadataTable.UserPhotosStreamMetadataRow,StreamMetadata> e : metadatas.entrySet()) {    Long streamId=e.getKey().getId();    long blocks=getNumberOfBlocksFromMetadata(e.getValue());    for (long i=0; i < blocks; i++) {      streamValueToDelete.add(UserPhotosStreamValueTable.UserPhotosStreamValueRow.of(streamId,i));    }    ByteString streamHash=e.getValue().getHash();    Sha256Hash hash=Sha256Hash.EMPTY;    if (streamHash != com.google.protobuf.ByteString.EMPTY) {      hash=new Sha256Hash(streamHash.toByteArray());    } else {      log.error("Empty hash for stream " + streamId);    }    UserPhotosStreamHashAidxTable.UserPhotosStreamHashAidxRow hashRow=UserPhotosStreamHashAidxTable.UserPhotosStreamHashAidxRow.of(hash);    UserPhotosStreamHashAidxTable.UserPhotosStreamHashAidxColumn column=UserPhotosStreamHashAidxTable.UserPhotosStreamHashAidxColumn.of(streamId);    shToDelete.put(hashRow,column);  }  tables.getUserPhotosStreamHashAidxTable(t).delete(shToDelete);  tables.getUserPhotosStreamValueTable(t).delete(streamValueToDelete);  table.delete(smRows);}  }
class C{  public final void close(){  try {    log.info("Closing ...");    assert (writer != null);    writer.flush();    writer.close();    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void makeDirty(){  updateMatrix=true;}  }
class C{  public Minutes toStandardMinutes(){  long minutes=getStandardMinutes();  return Minutes.minutes(FieldUtils.safeToInt(minutes));}  }
class C{  @Override public void destroy(){  facesContextFactory=null;  lifecycle=null;  servletConfig=null;  uninitHttpMethodValidityVerification();}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public synchronized void addFailedKeys(Collection<KeyCacheObject> keys,Throwable e,GridCacheContext ctx){  if (failedKeys == null)   failedKeys=new ArrayList<>(keys.size());  failedKeys.addAll(keys);  if (err == null)   err=new IgniteCheckedException("Failed to update keys on primary node.");  err.addSuppressed(e);}  }
class C{  public void test_GET_accessPath_delete_c1() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.trig");  final long result=countResults(doGetWithAccessPath(null,null,null,new URIImpl("http://www.bigdata.com/c1")));  assertEquals(2,result);}  }
class C{  public Block(boolean multiPush,String style,String shape,List<String> sounds){  super();  this.put(Z_ORDER,8000);  this.multi=Boolean.valueOf(multiPush);  setRPClass("block");  put("type","block");  put("class","block");  this.sounds=sounds;  setResistance(100);  setDescription("You see a solid block of rock. Are you strong enough to push it away?");  if (style != null) {    put("name",style);  } else {    put("name","block");  }  if (shape != null) {    put("shape",shape);  }}  }
class C{  public boolean isShowOnlyMissingsAttributes(){  return showOnlyMissingsAttributes;}  }
class C{  public boolean prepareConnection(String server,String ports,String channel){  String username=settings.getString("username");  String password=settings.getString("password");  boolean usePassword=settings.getBoolean("usePassword");  String token=settings.getString("token");  String login="oauth:" + token;  if (token.isEmpty()) {    login="";  }  if (usePassword) {    login=password;    LOGGER.info("Using password instead of token.");  }  return prepareConnection(username,login,channel,server,ports);}  }
class C{  private void displayRank(){  lblResults.setText(getGender() + " name " + tfName.getText()+ " is ranked #"+ getRank()+ " in year "+ cboYear.getValue());}  }
class C{  public void writeRawLittleEndian64(final long value) throws IOException {  writeRawByte((int)(value) & 0xFF);  writeRawByte((int)(value >> 8) & 0xFF);  writeRawByte((int)(value >> 16) & 0xFF);  writeRawByte((int)(value >> 24) & 0xFF);  writeRawByte((int)(value >> 32) & 0xFF);  writeRawByte((int)(value >> 40) & 0xFF);  writeRawByte((int)(value >> 48) & 0xFF);  writeRawByte((int)(value >> 56) & 0xFF);}  }
class C{  public float[] values(){  crop();  return data;}  }
class C{  private void configureForTextMessage(final ConversationViewHolder convViewHolder,final Conversation.ConversationElement convElement,int position){  if (convViewHolder == null || convElement == null || convElement.text == null) {    return;  }  convViewHolder.mCid=convElement.text.getContact().getId();  convViewHolder.mMsgTxt.setText(convElement.text.getMessage());  if (convViewHolder.mPhoto != null) {    convViewHolder.mPhoto.setImageBitmap(null);  }  boolean shouldSeparateByDetails=this.shouldSeparateByDetails(convElement,position);  boolean isConfigSameAsPreviousMsg=this.isMessageConfigSameAsPrevious(convElement,position);  if (convElement.text.isIncoming() && !isConfigSameAsPreviousMsg) {    this.setImage(convViewHolder,convElement);  }  if (convElement.text.getStatus() == TextMessage.Status.SENDING) {    convViewHolder.mMsgDetailTxt.setVisibility(View.VISIBLE);    convViewHolder.mMsgDetailTxt.setText(R.string.message_sending);  } else   if (shouldSeparateByDetails) {    convViewHolder.mMsgDetailTxt.setVisibility(View.VISIBLE);    String timeSeparationString=computeTimeSeparationStringFromMsgTimeStamp(convElement.text.getTimestamp());    convViewHolder.mMsgDetailTxt.setText(timeSeparationString);  } else {    convViewHolder.mMsgDetailTxt.setVisibility(View.GONE);  }}  }
class C{  public EnableFeatureAction(final String feature){  this(feature,"");}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public Tree(Table nodes,Table edges,String sourceKey,String targetKey){  this(nodes,edges,DEFAULT_NODE_KEY,sourceKey,targetKey);}  }
class C{  protected boolean doOperation(int level,int position,double[] cellRegion,double[] itemCoords){  int bitNum=this.computeBitPosition(level,position);  this.bits.set(bitNum);  if (level < this.maxLevel)   return true;  String bitName=Integer.toString(bitNum);  List<T> regionItems=this.items.get(bitName);  if (regionItems == null) {    regionItems=new ArrayList<T>();    this.items.put(bitName,regionItems);  }  regionItems.add(this.currentItem);  if (this.currentName != null)   this.nameMap.put(this.currentName,this.currentItem);  if (!this.allowDuplicates)   this.stop();  return false;}  }
class C{  private void messageArrivedAction(Bundle data){  if (callback != null) {    String messageId=data.getString(MqttServiceConstants.CALLBACK_MESSAGE_ID);    String destinationName=data.getString(MqttServiceConstants.CALLBACK_DESTINATION_NAME);    ParcelableMqttMessage message=(ParcelableMqttMessage)data.getParcelable(MqttServiceConstants.CALLBACK_MESSAGE_PARCEL);    try {      if (messageAck == Ack.AUTO_ACK) {        callback.messageArrived(destinationName,message);        mqttService.acknowledgeMessageArrival(clientHandle,messageId);      } else {        message.messageId=messageId;        callback.messageArrived(destinationName,message);      }    } catch (    Exception e) {    }  }}  }
class C{  public void startProcessingRequest(MailboxSession session){}  }
class C{  public boolean isAllow(){  return allow;}  }
class C{  public AnnotationsAttribute(ConstPool cp,String attrname){  this(cp,attrname,new byte[]{0,0});}  }
class C{  public void buildIndex(List<DataFileFooter> footerList){  segmentProperties=new SegmentProperties(footerList.get(0).getColumnInTable(),footerList.get(0).getSegmentInfo().getColumnCardinality());  BTreeBuilderInfo indexBuilderInfo=new BTreeBuilderInfo(footerList,segmentProperties.getDimensionColumnsValueSize());  BtreeBuilder blocksBuilder=new BlockletBTreeBuilder();  blocksBuilder.build(indexBuilderInfo);  dataRefNode=blocksBuilder.get();  totalNumberOfRows=footerList.get(0).getNumberOfRows();}  }
class C{  @Override public void cancel() throws SQLException {  try {    debugCodeCall("cancel");    checkClosed();    CommandInterface c=executingCommand;    try {      if (c != null) {        c.cancel();        cancelled=true;      }    }  finally {      setExecutingStatement(null);    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void serviceAvailable(BeanContextServiceAvailableEvent bcssae){synchronized (BeanContext.globalHierarchyLock) {    if (services.containsKey(bcssae.getServiceClass()))     return;    fireServiceAdded(bcssae);    Iterator i;synchronized (children) {      i=children.keySet().iterator();    }    while (i.hasNext()) {      Object c=i.next();      if (c instanceof BeanContextServices) {        ((BeanContextServicesListener)c).serviceAvailable(bcssae);      }    }  }}  }
class C{  public T caseEntry(Entry object){  return null;}  }
class C{  public static Map<String,String> toLowerCase(Map<String,String> map){  Map<String,String> lowerCaseMap=new HashMap<String,String>(map.size());  for (  Map.Entry<String,String> entry : map.entrySet()) {    String key=entry.getKey();    key=(key == null) ? null : key.toLowerCase();    String value=entry.getValue();    value=(value == null) ? null : value.toLowerCase();    lowerCaseMap.put(key,value);  }  return lowerCaseMap;}  }
class C{  public Word loadWord(Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  public void testFieldTypes() throws Exception {  PreparedStatement ps=connection.prepareStatement("INSERT INTO test_blob(id, bin_data) VALUES (?, ?)");  for (int i=0; i < TEST_ROW_COUNT; i++) {    ps.setInt(1,i);    ps.setBytes(2,testData[i]);    ps.executeUpdate();  }  ps.close();  Statement stmt=connection.createStatement();  ResultSet rs=stmt.executeQuery("SELECT id, bin_data FROM test_blob");  try {    int counter=0;    while (rs.next()) {      int id=rs.getInt("id");      byte[] data=rs.getBytes("bin_data");      assertTrue("Data read from database for id " + id + " should be equal to generated one.",Arrays.equals(testData[id],data));      counter++;    }    assertTrue("Should read " + TEST_ROW_COUNT + " rows, read "+ counter,TEST_ROW_COUNT == counter);  }  finally {    rs.close();    stmt.close();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private String extractUserName(String emailAddress){  if (emailAddress != null) {    String[] parts=emailAddress.split("@");    if (parts.length > 0) {      if (parts[0] != null) {        return parts[0];      }    }  }  return "";}  }
class C{  public Tween targetRelative(float targetValue){  isRelative=true;  targetValues[0]=isInitialized() ? targetValue + startValues[0] : targetValue;  return this;}  }
class C{  public YesNoTableRenderer(){  super();  setHorizontalAlignment(SwingConstants.CENTER);  setOpaque(true);  setBorder(noFocusBorder);}  }
class C{  public static IFile resolveFile(IStructuredModel model){  return (IFile)ResourceUtils.getResource(new Path(model.getBaseLocation()));}  }
class C{  private int[] assignClusterDesignations(int[] designations,int clusters){  return assignClusterDesignations(designations,clusters,merges);}  }
class C{  public StringSet validateVNasServers(Project project,VirtualNasParam param,StringBuilder errorMsg){  Set<String> vNasIds=param.getVnasServers();  StringSet validNas=new StringSet();  boolean shareVNASWithMultipleProjects=Boolean.valueOf(customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.SHARE_VNAS_WITH_MULTIPLE_PROJECTS,"global",null));  _log.info("Can vNAS be shared with multiple projects? : {}",shareVNASWithMultipleProjects);  if (vNasIds != null && !vNasIds.isEmpty() && project != null) {    Set<String> projectDomains=ProjectUtility.getDomainsOfProject(_permissionsHelper,project);    for (    String id : vNasIds) {      if (project.getAssignedVNasServers().contains(id)) {        continue;      }      URI vnasURI=URI.create(id);      VirtualNAS vnas=_permissionsHelper.getObjectById(vnasURI,VirtualNAS.class);      ArgValidator.checkEntity(vnas,vnasURI,isIdEmbeddedInURL(vnasURI));      if (!shareVNASWithMultipleProjects && !vnas.isNotAssignedToProject()) {        errorMsg.append(" vNas: " + vnas.getNasName() + " is already associated to a project.");        _log.error(errorMsg.toString());        continue;      }      if (!DiscoveryStatus.VISIBLE.name().equals(vnas.getDiscoveryStatus())) {        errorMsg.append(" vNas " + vnas.getNasName() + " is not in Discovery-VISIBLE state ");        _log.error(errorMsg.toString());        continue;      }      if (!vnas.getVNasState().equalsIgnoreCase(VirtualNasState.LOADED.getNasState())) {        errorMsg.append(" vNas " + vnas.getNasName() + " is not in Loaded state");        _log.error(errorMsg.toString());        continue;      }      boolean domainMatched=ProjectUtility.doesProjectDomainMatchesWithVNASDomain(projectDomains,vnas);      if (!domainMatched) {        errorMsg.append(" vNas " + vnas.getNasName() + " domain is not matched with project domain");        _log.error(errorMsg.toString());        continue;      }      if (!shareVNASWithMultipleProjects) {        URIQueryResultList fsList=new URIQueryResultList();        boolean projectMatched=true;        StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,vnas.getStorageDeviceURI());        for (        String storagePort : vnas.getStoragePorts()) {          _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStoragePortFileshareConstraint(URI.create(storagePort)),fsList);          Iterator<URI> fsItr=fsList.iterator();          while (fsItr.hasNext()) {            FileShare fileShare=_dbClient.queryObject(FileShare.class,fsItr.next());            if (fileShare != null && !fileShare.getInactive()) {              if (fileShare.getVirtualNAS() != null && 0 == fileShare.getVirtualNAS().compareTo(vnas.getId())) {                _log.debug("Validation of assigned vNAS URI: {} and file system path : {} ",fileShare.getVirtualNAS(),fileShare.getPath());                if (!fileShare.getProject().getURI().toString().equals(project.getId().toString())) {                  projectMatched=false;                  break;                }              } else {                if (storageSystem.getSystemType().equals(StorageSystem.Type.isilon.name())) {                  if (fileShare.getPath().startsWith(vnas.getBaseDirPath() + "/") == false) {                    continue;                  }                }                _log.debug("Validation of assigned vNAS base path {} and file path : {} ",vnas.getBaseDirPath(),fileShare.getPath());                if (!fileShare.getProject().getURI().toString().equals(project.getId().toString())) {                  projectMatched=false;                  break;                }              }            }          }          if (!projectMatched) {            break;          }        }        if (!projectMatched) {          errorMsg.append(" vNas " + vnas.getNasName() + " has file systems belongs to other project");          _log.error(errorMsg.toString());          continue;        }      }      validNas.add(id);    }  } else {    throw APIException.badRequests.invalidEntryForProjectVNAS();  }  return validNas;}  }
class C{  public boolean isCanSetPhysicalNicLinkSpeed(){  return canSetPhysicalNicLinkSpeed;}  }
class C{  @Override public void columnMarginChanged(final ChangeEvent e){  if (isEditing()) {    cellEditor.stopCellEditing();  }  super.columnMarginChanged(e);}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public static <T extends DataObject>T findInCollection(Collection<T> col,String id){  if (col != null && id != null) {    for (    T t : col) {      if (t.getId().toString().equals(id)) {        return t;      }    }  }  return null;}  }
class C{  protected void uncaughtException(Exception ex){  Thread t=Thread.currentThread();  t.getThreadGroup().uncaughtException(t,ex);}  }
class C{  private void enableBackNavigation(){  sendBroadcast(new Intent(MainActivity.ENABLE_BACK));}  }
class C{  public HeadlessJsTaskConfig(String taskKey,WritableMap data,long timeout,boolean allowedInForeground){  mTaskKey=taskKey;  mData=data;  mTimeout=timeout;  mAllowedInForeground=allowedInForeground;}  }
class C{  public PydevRemoteConsoleCommunication(Project project,int port,Process process,int clientPort) throws Exception {  super(project,port,process,clientPort);}  }
class C{  public SimpleInspector(Object object,GUIState state,String name,int maxProperties){  this(Properties.getProperties(object),state,name,maxProperties);}  }
class C{  private RVMMethod resolveInternal(RVMClass declaringClass){  final boolean DBG=false;  if (!declaringClass.isResolved()) {    declaringClass.resolve();  }  for (RVMClass c=declaringClass; c != null; c=c.getSuperClass()) {    if (DBG) {      VM.sysWrite("Checking for <" + name + ","+ descriptor+ "> in class "+ c+ "...");    }    RVMMethod method=c.findDeclaredMethod(name,descriptor);    if (method != null) {      if (DBG) {        VM.sysWriteln("...found <" + name + ","+ descriptor+ "> in class "+ c);      }      resolvedMember=method;      return resolvedMember;    }    if (DBG) {      VM.sysWriteln("...NOT found <" + name + ","+ descriptor+ "> in class "+ c);    }  }  for (  RVMClass i : declaringClass.getAllImplementedInterfaces()) {    if (DBG) {      VM.sysWrite("Checking for <" + name + ","+ descriptor+ "> in interface "+ i+ "...");      VM.sysWrite("interface " + i + " is resolved: "+ i.isResolved());    }    RVMMethod method=i.findDeclaredMethod(name,descriptor);    if (method != null) {      if (DBG) {        VM.sysWriteln("...found <" + name + ","+ descriptor+ "> in interface "+ i);      }      if (VM.VerifyAssertions)       VM._assert(!method.hasOffset());      resolvedMember=declaringClass.findVirtualMethod(name,descriptor);      if (VM.VerifyAssertions)       VM._assert(resolvedMember != null);      if (VM.VerifyAssertions)       VM._assert(resolvedMember.hasOffset());      return resolvedMember;    }    if (DBG) {      VM.sysWriteln("...NOT found <" + name + ","+ descriptor+ "> in interface "+ i);    }  }  if (!VM.fullyBooted) {    VM.sysWrite("MethodReference.resolveInternal():");    VM.sysWrite(" Unable to find a method named ");    name.sysWrite();    VM.sysWrite(" with descriptor ");    descriptor.sysWrite();    VM.sysWrite(" in the class ");    declaringClass.getDescriptor().sysWrite();    if (VM.runningVM) {      VM.sysWriteln(", while booting the VM");      VM.sysFail("MethodReference.resolveInternal(): Unable to resolve a method during VM booting");    } else {      VM.sysWriteln(", while writing the boot image");      Thread.dumpStack();      throw new Error("MethodReference.resolveInternal(): Unable to resolve a method during boot image writing");    }  }  throw new NoSuchMethodError(this.toString());}  }
class C{  public static void notifyHeat(final JSONObject message){  message.put(Common.TYPE,Article.ARTICLE_T_HEAT);  final String msgStr=message.toString();  for (  final Session session : SESSIONS) {    final String viewingArticleId=(String)Channels.getHttpParameter(session,Article.ARTICLE_T_ID);    if (Strings.isEmptyOrNull(viewingArticleId) || !viewingArticleId.equals(message.optString(Article.ARTICLE_T_ID))) {      continue;    }    if (session.isOpen()) {      session.getAsyncRemote().sendText(msgStr);    }  }}  }
class C{  protected ShiftNode(NodeClass<? extends ShiftNode<OP>> c,SerializableShiftFunction<OP> getOp,ValueNode x,ValueNode s){  super(c,getOp.apply(ArithmeticOpTable.forStamp(x.stamp())).foldStamp(x.stamp(),(IntegerStamp)s.stamp()),x,s);  assert ((IntegerStamp)s.stamp()).getBits() == 32;  this.getOp=getOp;}  }
class C{  private Intent createPasswordIntent(){  mProfileSyncService.setPassphrasePrompted(true);  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.setComponent(new ComponentName(mApplicationContext,mPassphraseRequestActivity));  intent.addCategory(Intent.CATEGORY_LAUNCHER);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  return intent;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private DataChangeEvent[] takeEvents(DataChangeEvent[] events){  if (events == null || events.length == 0) {    return new DataChangeEvent[]{new DataChangeEvent(this,0,0,null,null)};  }  DataChangeEvent[] eventsTx=new DataChangeEvent[events.length + 1];  for (int i=0; i < eventsTx.length; i++) {    DataChangeEvent event;    int col, row;    if (i == 0) {      event=events[0];      col=0;      row=event.getRow();    } else {      event=events[i - 1];      col=event.getCol() + 1;      row=event.getRow();    }    Comparable valOld=event.getOld();    Comparable valNew=event.getNew();    eventsTx[i]=new DataChangeEvent(this,col,row,valOld,valNew);  }  return eventsTx;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void createNameIDFormats(Element parentEle,boolean asIdp) throws Exception {  Element nameIdEle=doc.createElement(SAMLNames.NAMEIDFORMAT);  nameIdEle.appendChild(doc.createTextNode(SAMLNames.IDFORMAT_VAL_EMAILADD.toString()));  parentEle.appendChild(nameIdEle);  nameIdEle=doc.createElement(SAMLNames.NAMEIDFORMAT);  nameIdEle.appendChild(doc.createTextNode(SAMLNames.IDFORMAT_VAL_PERSIST.toString()));  parentEle.appendChild(nameIdEle);  nameIdEle=doc.createElement(SAMLNames.NAMEIDFORMAT);  nameIdEle.appendChild(doc.createTextNode(SAMLNames.IDFORMAT_VAL_UPN.toString()));  parentEle.appendChild(nameIdEle);}  }
class C{  protected final void addTagHandler(String name,Class handlerType){  this.factories.put(name,new HandlerFactory(handlerType));}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public int hashCode(){  return (command == null ? 0 : command.hashCode());}  }
class C{  public void registerSubjectName(final String name){  registerSubjectName(name,ExpressionType.SUBJECT_NAME);}  }
class C{  public synchronized boolean unregisterFrame(JFrame frame){  frameList.removeElement(frame);  frameListDisplay.setListData(frameList);  return true;}  }
class C{  public void addAsyncEventQueueId(String asyncEventQueueId){  if (asyncEventQueueId == null) {    throw new IllegalArgumentException(LocalizedStrings.AttributesFactory_GATEWAY_SENDER_ID_IS_NULL.toLocalizedString());  }synchronized (this.regionAttributes) {    this.regionAttributes.addAsyncEventQueueId(asyncEventQueueId);  }}  }
class C{  public boolean isAnonymousVisible(){  return anonymousVisible;}  }
class C{  @Override public void onSessionIdleTimeout(GridNioSession ses){  ses.close();}  }
class C{  File writeFile(File dir,Kind k) throws Exception {  StringBuilder sb=new StringBuilder();  sb.append("public class Test {\n");  sb.append("    private Inner inner;\n");  if (k != Kind.NONE) {    sb.append("    private void m() {\n");    sb.append("        ");switch (k) {case FALSE:case TRUE:      sb.append("if (" + k.toString().toLowerCase() + ") ");  }  sb.append("new Runnable() { public void run() { } };\n");  sb.append("    }\n");}sb.append("    private void init() {\n");sb.append("        inner = new Inner();\n");sb.append("    }\n");sb.append("\n");sb.append("    private static class Inner {\n");sb.append("        private Inner() {\n");sb.append("        }\n");sb.append("    }\n");sb.append("}\n");File f=new File(dir,"Test.java");FileWriter w=new FileWriter(f);w.write(sb.toString());w.close();return f;}  }
class C{  protected void assertEquals(double expected,double actual){  if (expected != actual) {    if (Double.isNaN(expected) && Double.isNaN(actual)) {    } else {      fail("Expected: " + expected + " actual: "+ actual);    }  }}  }
class C{  protected Map<String,List<StoragePool>> sortPoolsByVPlexStorageSystem(List<StoragePool> storagePools,String varrayId){  return sortPoolsByVPlexStorageSystem(storagePools,varrayId,null);}  }
class C{  @Override public void onConfigurationChanged(Configuration newConfig){  super.onConfigurationChanged(newConfig);}  }
class C{  public void removeAllElements(){  int index1=delegate.size() - 1;  delegate.removeAllElements();  if (index1 >= 0) {    fireIntervalRemoved(this,0,index1);  }}  }
class C{  public synchronized HttpResponseBody readResponseBody(HttpHeader httpHeader){  int contentLength=httpHeader.getContentLength();  HttpResponseBody body=(contentLength > 0) ? new HttpResponseBody(contentLength) : new HttpResponseBody();  readBody(contentLength,body);  return body;}  }
class C{  public void decode(InputStream stream) throws KeyException, IOException {}  }
class C{  public _BuildUpdate(){  super();}  }
class C{  private boolean allowUploadCrashDump(){  if (isCellularExperimentEnabled())   return isUsageAndCrashReportingEnabled();  if (isMobileNetworkCapable()) {    String option=mSharedPreferences.getString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpNeverUpload);    return option.equals(mCrashDumpAlwaysUpload) || (option.equals(mCrashDumpWifiOnlyUpload) && isWiFiOrEthernetNetwork());  }  return mSharedPreferences.getBoolean(PREF_CRASH_DUMP_UPLOAD_NO_CELLULAR,false);}  }
class C{  public final boolean isConstant(){  if (this.getVariableDecls().length > 0)   return false;  this.levelCheck(1);  OpDefNode[] opDefs=this.getOpDefs();  for (int i=0; i < opDefs.length; i++) {    if (opDefs[i].getKind() != ModuleInstanceKind && opDefs[i].getBody().getLevel() != ConstantLevel)     return false;  }  for (int i=0; i < theoremVec.size(); i++) {    if (((TheoremNode)(theoremVec.elementAt(i))).getLevel() != ConstantLevel) {      return false;    }  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void readObject(){}  }
class C{  private boolean doBlastCheck(String proteinId,PIRSFHmmer2RawMatch match,Map<String,PirsfDatRecord> pirsfDatRecordMap){  String modelId=match.getModelId();  PirsfDatRecord pirsfDatRecord=pirsfDatRecordMap.get(modelId);  if (pirsfDatRecord != null && pirsfDatRecord.isBlastRequired()) {    if (LOGGER.isInfoEnabled()) {      LOGGER.info("Need to BLAST protein with identifier " + proteinId + " because model Id "+ modelId+ " is annotated with BLAST=true.");    }    return true;  }  return false;}  }
class C{  public void slashSlashComments(boolean flag){  slashSlashComments=flag;}  }
class C{  public boolean isCanAdjust(){  return (getQty().compareTo(getMinQty()) > 0);}  }
class C{  @Override public String toString(int i){  final StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  final Integer bopId=(Integer)getProperty(Annotations.BOP_ID);  if (bopId != null) {    sb.append("[" + bopId + "]");  }  sb.append("(");  int nwritten=0;  final Iterator<BOp> itr=argIterator();  while (itr.hasNext()) {    final BOp t=itr.next();    if (nwritten > 0)     sb.append(',');    if (t == null) {      sb.append("<null>");    } else {      sb.append(((IValueExpressionNode)t).toString(i + 1));    }    nwritten++;  }  sb.append(")");  annotationsToString(sb,i);  return sb.toString();}  }
class C{  public Epoch(ServerViewController controller,Consensus parent,int timestamp){  this.consensus=parent;  this.timestamp=timestamp;  this.controller=controller;  this.proof=new HashSet<>();  this.lastView=controller.getCurrentView();  this.me=controller.getStaticConf().getProcessId();  int n=controller.getCurrentViewN();  writeSetted=new boolean[n];  acceptSetted=new boolean[n];  Arrays.fill(writeSetted,false);  Arrays.fill(acceptSetted,false);  if (timestamp == 0) {    this.write=new byte[n][];    this.accept=new byte[n][];    Arrays.fill((Object[])write,null);    Arrays.fill((Object[])accept,null);  } else {    Epoch previousEpoch=consensus.getEpoch(timestamp - 1,controller);    this.write=previousEpoch.getWrite();    this.accept=previousEpoch.getAccept();  }}  }
class C{  public BackchainOwlSameAsPropertiesSPOIterator(IChunkedOrderedIterator<ISPO> src,IV s,IV p,IV o,AbstractTripleStore db,final IV sameAs){  super(src,db,sameAs);{    SPO[] spos=new SPO[chunkSize];    int numSPOs=0;    final Set<IV> sAndSames=getSelfAndSames(s);    final Set<IV> oAndSames=getSelfAndSames(o);    if (sAndSames.size() == 1 && oAndSames.size() == 1) {    }    for (    IV s1 : sAndSames) {      for (      IV o1 : oAndSames) {        final IChunkedOrderedIterator<ISPO> it=db.getAccessPath(s1,p,o1).iterator();        while (it.hasNext()) {          final IV p1=it.next().p();          if (IVUtility.equals(p1,sameAs) && IVUtility.equals(s,o)) {            continue;          }          if (numSPOs == chunkSize) {            boolean present=false;            IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);            if (absent.hasNext()) {              if (sameAs2and3 == null) {                sameAs2and3=createTempTripleStore();              }              db.addStatements(sameAs2and3,copyOnly,absent,null);            }            numSPOs=0;          }          spos[numSPOs++]=new SPO(s,p1,o,StatementEnum.Inferred);          dumpSPO(spos[numSPOs - 1]);        }      }    }    if (numSPOs > 0) {      boolean present=false;      IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);      if (absent.hasNext()) {        if (sameAs2and3 == null) {          sameAs2and3=createTempTripleStore();        }        db.addStatements(sameAs2and3,copyOnly,absent,null);      }    }  }}  }
class C{  public boolean canRequestReviewOnReviewRef(String reviewRef,String targetRef){  if (targetRef.equals(reviewRef)) {    return false;  }  return true;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  protected Dimension calculateDimensions(final int originWidth,final int originHeight,final Dimension max){  int resultWidth;  int resultHeight;  if (max.width < originWidth || max.height < originHeight) {    final double hs=(originWidth <= max.width) ? 1.0 : ((double)max.width) / ((double)originWidth);    final double vs=(originHeight <= max.height) ? 1.0 : ((double)max.height) / ((double)originHeight);    final double scale=Math.min(hs,vs);    if (scale < 1.0) {      resultWidth=Math.max(1,(int)(originWidth * scale));      resultHeight=Math.max(1,(int)(originHeight * scale));    } else {      resultWidth=Math.max(1,originWidth);      resultHeight=Math.max(1,originHeight);    }  } else {    resultWidth=originWidth;    resultHeight=originHeight;  }  return new Dimension(resultWidth,resultHeight);}  }
class C{  public InlineQueryResultCachedSticker.InlineQueryResultCachedStickerBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  private static int checkClassTypeSignature(final String signature,int pos){  pos=checkChar('L',signature,pos);  pos=checkIdentifier(signature,pos);  while (getChar(signature,pos) == '/') {    pos=checkIdentifier(signature,pos + 1);  }  if (getChar(signature,pos) == '<') {    pos=checkTypeArguments(signature,pos);  }  while (getChar(signature,pos) == '.') {    pos=checkIdentifier(signature,pos + 1);    if (getChar(signature,pos) == '<') {      pos=checkTypeArguments(signature,pos);    }  }  return checkChar(';',signature,pos);}  }
class C{  public final int readInt() throws IOException {  int ch1=this.read();  int ch2=this.read();  int ch3=this.read();  int ch4=this.read();  if ((ch1 | ch2 | ch3| ch4) < 0) {    throw new EOFException();  }  if (bigEndian) {    return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4));  } else {    return ((ch4 << 24) + (ch3 << 16) + (ch2 << 8)+ (ch1));  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CombinedDomainXYPlot result=(CombinedDomainXYPlot)super.clone();  result.subplots=(List)ObjectUtilities.deepClone(this.subplots);  for (Iterator it=result.subplots.iterator(); it.hasNext(); ) {    Plot child=(Plot)it.next();    child.setParent(result);  }  ValueAxis domainAxis=result.getDomainAxis();  if (domainAxis != null) {    domainAxis.configure();  }  return result;}  }
class C{  public ImageSelector(final Composite parent,final int style){  super(parent,style | SWT.NO_BACKGROUND | SWT.DOUBLE_BUFFERED);  final Font defaultFont=new Font(getDisplay(),"Lucida Sans",24,SWT.NONE);  font=defaultFont;  SWTGraphicUtil.addDisposer(this,defaultFont);  setSigma(0.5);  gradientStart=getDisplay().getSystemColor(SWT.COLOR_BLACK);  gradientEnd=SWTGraphicUtil.getDefaultColor(this,110,110,110);  addListeners();  SWTGraphicUtil.addDisposer(this,cachedGC);  SWTGraphicUtil.addDisposer(this,cachedImage);}  }
class C{  public void createQueryCache(FeatureTemplate t){  setFeatureTemplate(t);  Map<Span,SuffixArraySample> queryCache=sa.lookupFrequentSourceNgrams(sampleSize,RULE_CACHE_THRESHOLD);  ruleCache=new ConcurrentHashMap<>(queryCache.size());  logger.info("Extracting rules from query cache of size {}",queryCache.size());  queryCache.entrySet().parallelStream().forEach(null);}  }
class C{  protected void subscribeUnsubscribe(String nameValue) throws Throwable {  URI observerUri=URI.create(observerServiceUriForUnsubscribe);  waitForSubscriptionToAppear(observerUri,EXAMPLES_SUBSCRIPTIONS);  verifyNotification(nameValue,observerUri);  JsExecutor.executeSynchronously(null);  waitForSubscriptionToDisappear(observerUri,EXAMPLES_SUBSCRIPTIONS);}  }
class C{  public static boolean linkSequenceHasLoops(List<Link> linkSequence){  Set tmpSet=new HashSet<>(linkSequence);  return tmpSet.size() < linkSequence.size();}  }
class C{  public void invalidate(){  isValid=false;  sessionContext=null;}  }
class C{  public void remove(final int index){  if (this.widget == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (this.widget.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  this.children.remove(index);  this.widget.updateContent();}  }
class C{  public static Stream<? extends Map.Entry<String,Stream<? extends Map.Entry<String,Double>>>> flattenFeatureWithDropoutAsStream(FeatureVector featureVector,double dropout,long seed){  Stream<? extends Map.Entry<String,Stream<? extends Map.Entry<String,Double>>>> stringFeatures=Stream.empty();  if (featureVector.stringFeatures != null) {    stringFeatures=featureVector.stringFeatures.entrySet().stream().map(null);  }  Stream<? extends Map.Entry<String,Stream<? extends Map.Entry<String,Double>>>> floatFeatures=Stream.empty();  if (featureVector.floatFeatures != null) {    floatFeatures=featureVector.floatFeatures.entrySet().stream().map(null);  }  Stream<? extends Map.Entry<String,Stream<? extends Map.Entry<String,Double>>>> flatFeatures=Stream.concat(stringFeatures,floatFeatures);  if (dropout > 0) {    Random random=new Random(seed);    return flatFeatures.map(null);  } else {    return flatFeatures;  }}  }
class C{  public CbusEventFilter(){}  }
class C{  public static void close(InputStream input){  try {    if (input != null) {      input.close();    }  } catch (  IOException ioe) {  }}  }
class C{  @Override public void run(){  try {    LOGGER.log(Level.FINEST,"Start Mark-And-Sweep with {0} entries",incomingMessages.size());    sweep();  } catch (  Throwable t) {    LOGGER.log(Level.WARNING,"Exception in Mark-and-Sweep algorithm",t);  } finally {    try {      schedule();    } catch (    Throwable t) {      LOGGER.log(Level.WARNING,"Exception while scheduling Mark-and-Sweep algorithm",t);    }  }}  }
class C{  public void testFloatValuePosMaxValue(){  byte[] a={0,-1,-1,-1,0,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=1;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == Float.MAX_VALUE);}  }
class C{  public PriorClassifier(CategoricalResults cr){  this.cr=cr;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override protected Enumeration<URL> findResources(String resName){  init();  int length=mPaths.length;  ArrayList<URL> results=new ArrayList<URL>();  for (int i=0; i < length; i++) {    URL result=findResource(resName,i);    if (result != null) {      results.add(result);    }  }  return new EnumerateListArray<URL>(results);}  }
class C{  public void paintOptionPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static FluentIterable<Registrar> loadAllActiveAndPubliclyVisible(){  return FluentIterable.from(loadAll()).filter(IS_ACTIVE_AND_PUBLICLY_VISIBLE);}  }
class C{  public void addTestSuite(Class<? extends Test> testClass,Validator[] validators,Set<String> excludedContainerIds){  for (  String containerId : this.containerIds) {    if (excludedContainerIds != null && excludedContainerIds.contains(containerId)) {      continue;    }    Set<ContainerType> registeredTypes=this.registeredContainers.get(containerId);    if (registeredTypes == null) {      throw new RuntimeException("Invalid container id [" + containerId + "]");    }    for (    ContainerType type : registeredTypes) {      boolean shouldAddTest=true;      for (int i=0; i < validators.length; i++) {        if (!validators[i].validate(containerId,type)) {          shouldAddTest=false;          break;        }      }      if (shouldAddTest) {        try {          addContainerToSuite(containerId,type,testClass);        } catch (        Exception e) {          throw new RuntimeException("Failed to add container [" + containerId + "] for test case class ["+ testClass.getName()+ "]",e);        }      }    }  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public boolean isTypeModelRef(){  return (kind == CompletionKind.MODULESPEC || kind == CompletionKind.FQTYPE || kind == CompletionKind.FQMEMBER) && nodeAsFullMemberReference() != null;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsLinkIDHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsLinkIDHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsLinkIDHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streamID=new WhiteboxRaster(streamsLinkIDHeader,"r");    int rows=streamID.getNumberRows();    int cols=streamID.getNumberColumns();    double noData=streamID.getNoDataValue();    double gridResX=streamID.getCellSizeX();    double gridResY=streamID.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streamID.getMaximumValue();    double[] linkLengths=new double[(int)maxLinkID + 1];    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsLinkIDHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentID=0;    double linkLength=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streamID.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            linkLength=0;            currentID=streamID.getValue(y,x);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (streamID.getValue(y,x) != currentID) {                  linkLengths[(int)(currentID)]=linkLength;                  currentID=streamID.getValue(y,x);                  if (currentID != noData) {                    linkLength=0;                    if (linkLengths[(int)currentID] > 0) {                      flag=false;                    }                  } else {                    flag=false;                  }                }              } else {                linkLengths[(int)currentID]=linkLength;                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          currentID=streamID.getValue(row,col);          output.setValue(row,col,linkLengths[(int)currentID]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streamID.close();    output.close();    returnData(outputHeader);    String retData="Stream Link Length Output\n";    for (i=1; i <= maxLinkID; i++) {      retData=retData + i + "\t"+ linkLengths[i]+ "\n";    }    returnData(retData);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public WhitenedPCA(DataSet dataSet,double regularization,int dims){  this(regularization,dims);  fit(dataSet);}  }
class C{  final synchronized public SnmpValue duplicate(){  return (SnmpValue)clone();}  }
class C{  public FlipTransition(int bgColor,int duration){  this.bgColor=bgColor;  this.duration=duration;}  }
class C{  public String toLocalizedPattern(){  return translatePattern(pattern,DateFormatSymbols.patternChars,formatData.getLocalPatternChars());}  }
class C{  public GitlabGroup createGroup(String name,String path,String ldapCn,GitlabAccessLevel ldapAccess) throws IOException {  return createGroup(name,path,ldapCn,ldapAccess,null);}  }
class C{  public ServiceInfo updateServiceStatus(long serviceInfoId,int activeStatus,String onlineUrl,ServiceContext serviceContext) throws PortalException, SystemException {  return null;}  }
class C{  public boolean isCurrentIgnoreSpace(char c){  if (!hasNext())   return false;  int start=getPos();  removeSpace();  boolean is=isCurrent(c);  setPos(start);  return is;}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof JSONArray) {        if (!((JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  private static int compare(int fromIndex,CharSequence left,CharSequence right){  if (left == null)   return -1;  if (right == null)   return 1;  for (int i=fromIndex, n=MathLib.min(left.length(),right.length()); i < n; i++) {    char c1=Character.toUpperCase(left.charAt(i));    char c2=Character.toUpperCase(right.charAt(i));    if (c1 != c2)     return c1 - c2;  }  return left.length() - right.length();}  }
class C{  public void cancel(){  try {    bluetoothSocket.close();  } catch (  IOException e) {    Log.e(TAG,"Unable to close bluetooth socket.",e);  }}  }
class C{  public static String stripHtmlTags(String string){  if ((string == null) || "".equals(string)) {    return string;  }  return htmlTagPattern.matcher(string).replaceAll("");}  }
class C{  public ItemHit itemPrice(Double value){  setDouble(ITEM_PRICE,value);  return this;}  }
class C{  @SuppressWarnings("unchecked") private SELF castThis(){  return (SELF)this;}  }
class C{  public void print(PrintStream out){  String className=getClass().getName();  int lastDotPos=className.lastIndexOf('.');  String name=className.substring(lastDotPos + 1);  out.print("  " + name + ": "+ p0+ " - "+ p1+ " "+ quadrant+ ":"+ angle);}  }
class C{  public FacebookAuthorizationException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  @Override public void handleError(Exception cause) throws Exception {  logger.logWarn(Log4jLogger.SYSTEM_LOG,cause,LogMessageIdentifier.ERROR_NOTIFY_PROVISIONING_SERVICE_FAILED,payload.getInfo());  if (!payload.isDeactivate()) {    Subscription subscription=serviceFacade.getDataService().getReference(Subscription.class,payload.getTkey());    informOwnerAndTechProviders(subscription,EmailType.NOTIFY_PROVISIONING_SERVICE_FAILED);  }}  }
class C{  public ArchivedFilter(boolean matchPasses){  super(matchPasses);}  }
class C{  public static ArchiveFlds createArchiveFlds(){  return new ArchiveFldsImpl();}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  deserialize(ois,bcsListeners);}  }
class C{  public boolean hasBatchStatus(){  return hasExtension(BatchStatus.class);}  }
class C{  @Override public void saveComponent(){  m_Printer.saveComponent();}  }
class C{  private ServiceRequestBuffer createPropertiesSRB(FbService service,int options){  return createRequestBuffer(service,isc_action_svc_properties,options);}  }
class C{  public void zSetAppropriateTextFieldMinimumWidth(){  Integer programmerSuppliedWidth=settings.getSizeTextFieldMinimumWidth();  int minimumWidthPixels=CalculateMinimumTimeFieldSize.getFormattedTimeWidthInPixels(settings.getFormatForDisplayTime(),settings.fontValidTime,0);  if (programmerSuppliedWidth != null) {    if (settings.getSizeTextFieldMinimumWidthDefaultOverride()) {      minimumWidthPixels=Math.max(programmerSuppliedWidth,minimumWidthPixels);    } else {      minimumWidthPixels=programmerSuppliedWidth;    }  }  Dimension newMinimumSize=timeTextField.getMinimumSize();  newMinimumSize.width=minimumWidthPixels;  timeTextField.setMinimumSize(newMinimumSize);  Dimension newPreferredSize=timeTextField.getPreferredSize();  newPreferredSize.width=minimumWidthPixels;  timeTextField.setPreferredSize(newPreferredSize);  this.validate();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.504 -0400",hash_original_method="1A0B00948441763B793BD010E76AFF12",hash_generated_method="FADCDE1FA7B5A5823923AE00A5D5E82C") public Cache(){  this(28,9);}  }
class C{  public TexturePaint(BufferedImage txtr,Rectangle2D anchor){  this.bufImg=txtr;  this.tx=anchor.getX();  this.ty=anchor.getY();  this.sx=anchor.getWidth() / bufImg.getWidth();  this.sy=anchor.getHeight() / bufImg.getHeight();}  }
class C{  public static File torrents(){  return get().systemPaths().torrents();}  }
class C{  public final void mulTransposeRight(Matrix4f m1,Matrix4f m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m01 * m2.m01 + m1.m02 * m2.m02 + m1.m03 * m2.m03;    this.m01=m1.m00 * m2.m10 + m1.m01 * m2.m11 + m1.m02 * m2.m12 + m1.m03 * m2.m13;    this.m02=m1.m00 * m2.m20 + m1.m01 * m2.m21 + m1.m02 * m2.m22 + m1.m03 * m2.m23;    this.m03=m1.m00 * m2.m30 + m1.m01 * m2.m31 + m1.m02 * m2.m32 + m1.m03 * m2.m33;    this.m10=m1.m10 * m2.m00 + m1.m11 * m2.m01 + m1.m12 * m2.m02 + m1.m13 * m2.m03;    this.m11=m1.m10 * m2.m10 + m1.m11 * m2.m11 + m1.m12 * m2.m12 + m1.m13 * m2.m13;    this.m12=m1.m10 * m2.m20 + m1.m11 * m2.m21 + m1.m12 * m2.m22 + m1.m13 * m2.m23;    this.m13=m1.m10 * m2.m30 + m1.m11 * m2.m31 + m1.m12 * m2.m32 + m1.m13 * m2.m33;    this.m20=m1.m20 * m2.m00 + m1.m21 * m2.m01 + m1.m22 * m2.m02 + m1.m23 * m2.m03;    this.m21=m1.m20 * m2.m10 + m1.m21 * m2.m11 + m1.m22 * m2.m12 + m1.m23 * m2.m13;    this.m22=m1.m20 * m2.m20 + m1.m21 * m2.m21 + m1.m22 * m2.m22 + m1.m23 * m2.m23;    this.m23=m1.m20 * m2.m30 + m1.m21 * m2.m31 + m1.m22 * m2.m32 + m1.m23 * m2.m33;    this.m30=m1.m30 * m2.m00 + m1.m31 * m2.m01 + m1.m32 * m2.m02 + m1.m33 * m2.m03;    this.m31=m1.m30 * m2.m10 + m1.m31 * m2.m11 + m1.m32 * m2.m12 + m1.m33 * m2.m13;    this.m32=m1.m30 * m2.m20 + m1.m31 * m2.m21 + m1.m32 * m2.m22 + m1.m33 * m2.m23;    this.m33=m1.m30 * m2.m30 + m1.m31 * m2.m31 + m1.m32 * m2.m32 + m1.m33 * m2.m33;  } else {    float m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;    m00=m1.m00 * m2.m00 + m1.m01 * m2.m01 + m1.m02 * m2.m02 + m1.m03 * m2.m03;    m01=m1.m00 * m2.m10 + m1.m01 * m2.m11 + m1.m02 * m2.m12 + m1.m03 * m2.m13;    m02=m1.m00 * m2.m20 + m1.m01 * m2.m21 + m1.m02 * m2.m22 + m1.m03 * m2.m23;    m03=m1.m00 * m2.m30 + m1.m01 * m2.m31 + m1.m02 * m2.m32 + m1.m03 * m2.m33;    m10=m1.m10 * m2.m00 + m1.m11 * m2.m01 + m1.m12 * m2.m02 + m1.m13 * m2.m03;    m11=m1.m10 * m2.m10 + m1.m11 * m2.m11 + m1.m12 * m2.m12 + m1.m13 * m2.m13;    m12=m1.m10 * m2.m20 + m1.m11 * m2.m21 + m1.m12 * m2.m22 + m1.m13 * m2.m23;    m13=m1.m10 * m2.m30 + m1.m11 * m2.m31 + m1.m12 * m2.m32 + m1.m13 * m2.m33;    m20=m1.m20 * m2.m00 + m1.m21 * m2.m01 + m1.m22 * m2.m02 + m1.m23 * m2.m03;    m21=m1.m20 * m2.m10 + m1.m21 * m2.m11 + m1.m22 * m2.m12 + m1.m23 * m2.m13;    m22=m1.m20 * m2.m20 + m1.m21 * m2.m21 + m1.m22 * m2.m22 + m1.m23 * m2.m23;    m23=m1.m20 * m2.m30 + m1.m21 * m2.m31 + m1.m22 * m2.m32 + m1.m23 * m2.m33;    m30=m1.m30 * m2.m00 + m1.m31 * m2.m01 + m1.m32 * m2.m02 + m1.m33 * m2.m03;    m31=m1.m30 * m2.m10 + m1.m31 * m2.m11 + m1.m32 * m2.m12 + m1.m33 * m2.m13;    m32=m1.m30 * m2.m20 + m1.m31 * m2.m21 + m1.m32 * m2.m22 + m1.m33 * m2.m23;    m33=m1.m30 * m2.m30 + m1.m31 * m2.m31 + m1.m32 * m2.m32 + m1.m33 * m2.m33;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m03=m03;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m13=m13;    this.m20=m20;    this.m21=m21;    this.m22=m22;    this.m23=m23;    this.m30=m30;    this.m31=m31;    this.m32=m32;    this.m33=m33;  }}  }
class C{  @Override public void performBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState){  if (VERBOSE)   Log.v(TAG,"onBackup");  Journal in=readJournal(oldState);  if (!launcherIsReady()) {    writeJournal(newState,in);    return;  }  Log.v(TAG,"lastBackupTime = " + in.t);  mKeys.clear();  applyJournal(in);  long newBackupTime=System.currentTimeMillis();  try {    backupFavorites(data);    backupScreens(data);    backupIcons(data);    backupWidgets(data);    HashSet<String> validKeys=new HashSet<String>();    for (    Key key : mKeys) {      validKeys.add(keyToBackupKey(key));    }    mExistingKeys.removeAll(validKeys);    for (    String deleted : mExistingKeys) {      if (VERBOSE)       Log.v(TAG,"dropping deleted item " + deleted);      data.writeEntityHeader(deleted,-1);    }    mExistingKeys.clear();    mLastBackupRestoreTime=newBackupTime;    Journal state=getCurrentStateJournal();    writeRowToBackup(JOURNAL_KEY,state,data);  } catch (  IOException e) {    Log.e(TAG,"launcher backup has failed",e);  }  writeNewStateDescription(newState);}  }
class C{  public static String find(CharSequence self,CharSequence regex,@ClosureParams(value=SimpleType.class,options="java.lang.String[]") Closure closure){  return find(self,Pattern.compile(regex.toString()),closure);}  }
class C{  protected boolean startTag(String tag){  return true;}  }
class C{  private static String repeatCharacter(char c,int frequency){  StringBuilder output=new StringBuilder(frequency);  for (int i=0; i < frequency; i++) {    output.append(c);  }  return output.toString();}  }
class C{  public boolean generate(Projection proj){  setNeedToRegenerate(true);  if (proj == null) {    Debug.message("omspline","OMSpline: null projection in generate!");    return false;  }  float[][] splinePoints;switch (renderType) {case RENDERTYPE_XY:    if (xs == null) {      Debug.message("omspline","OMSpline x/y rendertype null coordinates");      setNeedToRegenerate(true);      return false;    }  splinePoints=NatCubicSpline.calc(xs,ys,isGeometryClosed(),nsegs);xpoints=new float[1][0];xpoints[0]=splinePoints[0];ypoints=new float[1][0];ypoints[0]=splinePoints[1];break;case RENDERTYPE_OFFSET:if (xs == null) {Debug.message("omspline","OMSpline offset rendertype null coordinates");setNeedToRegenerate(true);return false;}int npts=xs.length;float[] _x=new float[npts];float[] _y=new float[npts];Point origin=new Point();if (proj instanceof GeoProj) {((GeoProj)proj).forward(lat,lon,origin,true);} else {proj.forward(Math.toDegrees(lat),Math.toDegrees(lon),origin);}if (coordMode == COORDMODE_ORIGIN) {for (int i=0; i < npts; i++) {_x[i]=(float)(xs[i] + origin.getX());_y[i]=(float)(ys[i] + origin.getY());}} else {_x[0]=xs[0] + origin.x;_y[0]=ys[0] + origin.y;for (int i=1; i < npts; i++) {_x[i]=xs[i] + _x[i - 1];_y[i]=ys[i] + _y[i - 1];}}splinePoints=NatCubicSpline.calc(_x,_y,isGeometryClosed(),nsegs);xpoints=new float[1][0];xpoints[0]=splinePoints[0];ypoints=new float[1][0];ypoints[0]=splinePoints[1];break;case RENDERTYPE_LATLON:if (rawllpts == null) {Debug.message("omspline","OMSpline latlon rendertype null coordinates");setNeedToRegenerate(true);return false;}double[] splinellpts=NatCubicSpline.calc(rawllpts,1e-8f,isGeometryClosed(),nsegs);ArrayList<float[]> vector;if (proj instanceof GeoProj) {vector=((GeoProj)proj).forwardPoly(splinellpts,lineType,nsegs,isPolygon());} else {vector=proj.forwardPoly(rawllpts,isPolygon());}int size=vector.size();xpoints=new float[(int)(size / 2)][0];ypoints=new float[xpoints.length][0];for (int i=0, j=0; i < size; i+=2, j++) {xpoints[j]=vector.get(i);ypoints[j]=vector.get(i + 1);}if (!doShapes && size > 1) {setNeedToRegenerate(false);initLabelingDuringGenerate();setLabelLocation(xpoints[0],ypoints[0],proj);return true;}break;case RENDERTYPE_UNKNOWN:Debug.error("OMSpline.generate: invalid RenderType");return false;}setNeedToRegenerate(false);setShape(createShape());setLabelLocation(getShape(),proj);return true;}  }
class C{  protected DoubleLiteralImpl(){  super();}  }
class C{  public void stop(){  m_debugger.removeListener(m_debuglistener);  final ProcessManager processManager=m_debugger.getProcessManager();  processManager.removeListener(m_processListener);  for (  final TargetProcessThread thread : processManager.getThreads()) {    thread.removeListener(m_threadEventListener);  }}  }
class C{  public void zoomIn(){  if (mZoomIn != null) {    mZoomIn.apply(Zoom.ZOOM_AXIS_XY);    repaint();  }}  }
class C{  @Override public void onDestroyFloatView(View floatView){  ((ImageView)floatView).setImageDrawable(null);  mFloatBitmap.recycle();  mFloatBitmap=null;}  }
class C{  private void initialize(){  idealPoint=new double[numberOfObjectives];  Arrays.fill(idealPoint,Double.POSITIVE_INFINITY);  weights=new NormalBoundaryIntersectionGenerator(numberOfObjectives,divisionsOuter,divisionsInner).generate();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:29.734 -0500",hash_original_method="20BE396DAB95918DA62C140FCD4BD874",hash_generated_method="28C47D9E2EBF624C6615213B8BB557A5") private static String readVersion(){  try {    byte[] bytes=IoUtils.readFileAsByteArray(ZONE_DIRECTORY_NAME + "zoneinfo.version");    return new String(bytes,0,bytes.length,Charsets.ISO_8859_1).trim();  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static void showToast(final Context context,final int resId,final boolean isLong){  if (isLong) {    LENGTH=Toast.LENGTH_LONG;  } else {    LENGTH=Toast.LENGTH_SHORT;  }  showToast(context,context.getString(resId));}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  public PathImpl lookupNative(String name,Map<String,Object> attributes){  return getWrappedPath().lookupNative(name,attributes);}  }
class C{  public static QueryUniqueIdentifiersForLunsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryUniqueIdentifiersForLunsResponse object=new QueryUniqueIdentifiersForLunsResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryUniqueIdentifiersForLunsResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryUniqueIdentifiersForLunsResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.set_return((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public Matrix4f translationRotateTowards(Vector3fc pos,Vector3fc dir,Vector3fc up){  return translationRotateTowards(pos.x(),pos.y(),pos.z(),dir.x(),dir.y(),dir.z(),up.x(),up.y(),up.z());}  }
class C{  public static void showView(Activity context,int id){  if (context != null) {    View view=context.findViewById(id);    if (view != null) {      view.setVisibility(View.VISIBLE);    } else {      Log.e("PercolateAndroidUtils","View does not exist.  Could not hide it.");    }  }}  }
class C{  public TwoPointCrossover(double probability){  this.probability=probability;}  }
class C{  private boolean crossCheckDiagonal(int startI,int centerJ,int maxCount,int originalStateCountTotal){  int[] stateCount=getCrossCheckStateCount();  int i=0;  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i)) {    stateCount[2]++;    i++;  }  if (startI < i || centerJ < i) {    return false;  }  while (startI >= i && centerJ >= i && !image.get(centerJ - i,startI - i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (startI < i || centerJ < i || stateCount[1] > maxCount) {    return false;  }  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i++;  }  if (stateCount[0] > maxCount) {    return false;  }  int maxI=image.getHeight();  int maxJ=image.getWidth();  i=1;  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i)) {    stateCount[2]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i,startI + i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return false;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && foundPatternCross(stateCount);}  }
class C{  public PassageScorer(float k1,float b,float pivot){  this.k1=k1;  this.b=b;  this.pivot=pivot;}  }
class C{  protected Size2D arrangeRR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D s1=arrangeNN(container,g2);  if (constraint.getWidthRange().contains(s1.width)) {    return s1;  } else {    RectangleConstraint c=constraint.toFixedWidth(constraint.getWidthRange().getUpperBound());    return arrangeFR(container,g2,c);  }}  }
class C{  public static String formatDuration(final long durationMillis,final String format){  return formatDuration(durationMillis,format,true);}  }
class C{  public boolean moveTaskToBack(boolean nonRoot){  try {    return ActivityManagerNative.getDefault().moveActivityTaskToBack(mToken,nonRoot);  } catch (  RemoteException e) {  }  return false;}  }
class C{  public static boolean isPortableRuntimeClass(String className){  return PORTABLE_RUNTIME_PACKAGE_PATTERN.matcher(className).matches();}  }
class C{  public void remove(String key){  walletPreferences.remove(key);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  return builder.build();}  }
class C{  private boolean checkAdd(String key,boolean add){  int hits=0;  long a=unsigned(Murmur2.hash32(key,0x9747b28c));  long b=unsigned(Murmur2.hash32(key,(int)a));  for (int i=0; i < hashes; i++) {    long x=unsigned((int)(a + i * b)) % bits;    long bt=x >> 3;    byte c=bf[(int)bt];    byte mask=(byte)(1 << (x % 8));    if ((c & mask) != 0) {      hits++;    } else {      if (add) {        bf[(int)bt]=(byte)(c | mask);      }    }  }  return hits == hashes;}  }
class C{  public Credential authorize(String code,@Nullable String userId) throws IOException {  String redirectUri=getRedirectUrl();  AuthorizationCodeFlow codeFlow=createCodeFlow();  TokenResponse response=codeFlow.newTokenRequest(code).setRedirectUri(redirectUri).setScopes(scopes).execute();  return codeFlow.createAndStoreCredential(response,userId);}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public boolean isMatch(String str,String pattern){  if (str == null && pattern == null)   return true;  if (str == null || pattern == null)   return false;  int s=0, p=0, match=0, astroIdx=-1;  while (s < str.length()) {    if (p < pattern.length() && (pattern.charAt(p) == '?' || str.charAt(s) == pattern.charAt(p))) {      s++;      p++;    } else     if (p < pattern.length() && pattern.charAt(p) == '*') {      astroIdx=p;      match=s;      p++;    } else     if (astroIdx != -1) {      p=astroIdx + 1;      match++;      s=match;    } else     return false;  }  while (p < pattern.length() && pattern.charAt(p) == '*')   p++;  return p == pattern.length();}  }
class C{  public static Scale percentiles(){  return scale(100);}  }
class C{  private CStepEndHelper(){}  }
class C{  public LSHMinHash(final int s,final int b,final int n){  super(s,b);  int signature_size=computeSignatureSize(s,n);  this.mh=new MinHash(signature_size,n);}  }
class C{  public final void write(final int new_name){  if (current_item + 1 >= max_size) {    checkSize(current_item + 1);  }  items[current_item]=(byte)(new_name & 255);  current_item++;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final Object[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    final Object item=array[i];    if (i > 0) {      buffer.append(arraySeparator);    }    if (item == null) {      appendNullText(buffer,fieldName);    } else {      appendInternal(buffer,fieldName,item,arrayContentDetail);    }  }  buffer.append(arrayEnd);}  }
class C{  @SuppressWarnings("synthetic-access") public void add(final Class<? extends Fragment> className,final Bundle params){  final Holder mHolder=new Holder();  mHolder.mClassName=className.getName();  mHolder.mParams=params;  final int mPosition=mHolderList.size();  mHolderList.add(mPosition,mHolder);  notifyDataSetChanged();}  }
class C{  public void resendTransfer() throws RcsPermissionDeniedException, RcsGenericException {  try {    mTransferInf.resendTransfer();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    RcsUnsupportedOperationException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public String boolToEqOrIn(boolean iseq){  if (iseq) {    return "\"=\"";  } else {    return "\"\\\\in\"";  }}  }
class C{  public String encodeBody(){  StringBuffer retval=new StringBuffer();  String s1=getTimeStampAsString();  String s2=getDelayAsString();  if (s1.equals("") && s2.equals(""))   return "";  if (!s1.equals(""))   retval.append(s1);  if (!s2.equals(""))   retval.append(" ").append(s2);  return retval.toString();}  }
class C{  public AttributeNotFoundError(Operator operator,String key,String attributeName){  this(operator,ATTRIBUTE_NOT_FOUND,key,attributeName);}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){}  }
class C{  public InvalidConfigurationException(final Throwable cause){  super(cause);}  }
class C{  public void testByteArraySlice() throws IOException {  final byte[] a=new byte[]{0,1,2,3,4,5,6,7,8,9};  final InputBitStream ibs=new InputBitStream(a,2,6);  assertEquals(0,ibs.readBits());  assertEquals(2,ibs.readInt(8));  assertEquals(8,ibs.readBits());  assertEquals(3,ibs.readInt(8));  assertEquals(16,ibs.readBits());  ibs.position(0);  assertEquals(2,ibs.readInt(8));  try {    ibs.position(6 << 3 + 1);    fail("Expecting: " + UnsupportedOperationException.class);  } catch (  UnsupportedOperationException ex) {    System.err.println("Ignoring expected exception: " + ex);  }}  }
class C{  protected int determineColumnCount(int gridItemWidth){  RecyclerView recyclerView=parent.get();  if (recyclerView == null) {    return 1;  }  if (recyclerView.getWidth() == 0) {    ViewTreeObserver observer=recyclerView.getViewTreeObserver();    observer.addOnGlobalLayoutListener(new LayoutListener(recyclerView));    return 1;  }  int columnCount=getColumnCount(recyclerView,gridItemWidth);  resetRecyclerPadding(recyclerView);  updateSpacing(recyclerView,gridItemWidth,columnCount);  return columnCount;}  }
class C{  public static String ask(final String title,final String text,final String defaultValue){  return ask(null,title,text,defaultValue);}  }
class C{  public static boolean placeImageUrl(Link link){  String url=link.getUrl();  if (!url.startsWith("http")) {    url+="http://";  }  String domain=link.getDomain();  if (domain.contains("imgur")) {    if (url.contains(",")) {      return false;    } else     if (endsWithImageExtension(url,GIFV)) {      return false;    } else     if (url.contains(".com/gallery")) {      return false;    } else     if (url.contains(".com/a/")) {      return false;    } else     if (!checkIsImageUrl(url)) {      if (url.charAt(url.length() - 1) == '/') {        url=url.substring(0,url.length() - 2);      }      url+=".jpg";    }  }  boolean isImage=checkIsImageUrl(url);  if (!isImage) {    return false;  }  link.setUrl(url);  return true;}  }
class C{  public static byte[] encode(BufferedImage image,String format,float quality,boolean encodeAlpha) throws IOException {  ImageEncoder imageEncoder=ImageEncoderFactory.newInstance(format,quality,encodeAlpha);  return imageEncoder.encode(image);}  }
class C{  public static boolean[] join(boolean[]... arrays){  if (arrays.length == 0) {    return EMPTY_BOOLEANS;  }  if (arrays.length == 1) {    return arrays[0];  }  if (arrays.length == 2) {    return join(arrays[0],arrays[1]);  }  boolean[] notNull=null;  int finalSize=0;  int nullArrays=0;  BooleanArrayList list=new BooleanArrayList(arrays.length * 10);  for (  boolean[] array : arrays) {    if ((array == null) || (array.length == 0)) {      nullArrays++;    } else {      notNull=array;      finalSize+=array.length;      list.addElements(list.size(),array);    }  }  if (nullArrays == arrays.length) {    return EMPTY_BOOLEANS;  }  if (nullArrays == (arrays.length - 1)) {    return notNull;  }  return list.toArray(new boolean[list.size()]);}  }
class C{  public void addElement(PrintElement element){  if (element != null)   m_elements.add(element);  m_pe=null;}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  final int bitmapSize=getBitmapSize(bitmap) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public static String quoteRemarkSQL(String sql){  sql=replaceAll(sql,"*/","++/");  return replaceAll(sql,"/*","/++");}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  return asByteSource(url).read();}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public Builder play(Animator anim){  if (anim != null) {    mNeedsSort=true;    return new Builder(anim);  }  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ASSOCIATION_CLASS_CONTENT___COMMENT_1:    return getComment_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___CLASS_DEFINITION_1:  return getClassDefinition_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___POSITION_1:return getPosition_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___DISPLAY_COLOR_1:return getDisplayColor_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___INVARIANT_1:return getInvariant_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___SOFTWARE_PATTERN_1:return getSoftwarePattern_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___DEPEND_1:return getDepend_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___SINGLE_ASSOCIATION_END_1:return getSingleAssociationEnd_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___STATE_MACHINE_1:return getStateMachine_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___ATTRIBUTE_1:return getAttribute_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___ASSOCIATION_1:return getAssociation_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___INLINE_ASSOCIATION_1:return getInlineAssociation_1();case UmplePackage.ASSOCIATION_CLASS_CONTENT___EXTRA_CODE_1:return getExtraCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static QueryTask createQueryToGetExistingNetworkStatesFilteredByDiscoveredVPCs(Set<String> vpcIds,List<String> tenantLinks){  QueryTask q=new QueryTask();  q.setDirect(true);  q.querySpec=new QueryTask.QuerySpecification();  q.querySpec.options.add(QueryOption.EXPAND_CONTENT);  q.querySpec.query=Query.Builder.create().addKindFieldClause(NetworkService.NetworkState.class).build();  QueryTask.Query networkStateIdFilterParentQuery=new QueryTask.Query();  networkStateIdFilterParentQuery.occurance=Occurance.MUST_OCCUR;  for (  String vpcId : vpcIds) {    QueryTask.Query networkStateIdFilter=new QueryTask.Query().setTermPropertyName(ComputeState.FIELD_NAME_ID).setTermMatchValue(vpcId);    networkStateIdFilter.occurance=QueryTask.Query.Occurance.SHOULD_OCCUR;    networkStateIdFilterParentQuery.addBooleanClause(networkStateIdFilter);  }  q.querySpec.query.addBooleanClause(networkStateIdFilterParentQuery);  q.documentSelfLink=UUID.randomUUID().toString();  q.tenantLinks=tenantLinks;  return q;}  }
class C{  public static SignerInformation addCounterSigners(SignerInformation signerInformation,SignerInformationStore counterSigners){  SignerInfo sInfo=signerInformation.info;  AttributeTable unsignedAttr=signerInformation.getUnsignedAttributes();  ASN1EncodableVector v;  if (unsignedAttr != null) {    v=unsignedAttr.toASN1EncodableVector();  } else {    v=new ASN1EncodableVector();  }  ASN1EncodableVector sigs=new ASN1EncodableVector();  for (Iterator it=counterSigners.getSigners().iterator(); it.hasNext(); ) {    sigs.add(((SignerInformation)it.next()).toASN1Structure());  }  v.add(new Attribute(CMSAttributes.counterSignature,new DERSet(sigs)));  return new SignerInformation(new SignerInfo(sInfo.getSID(),sInfo.getDigestAlgorithm(),sInfo.getAuthenticatedAttributes(),sInfo.getDigestEncryptionAlgorithm(),sInfo.getEncryptedDigest(),new DERSet(v)),signerInformation.contentType,signerInformation.content,null);}  }
class C{  public HttpRequestException(Exception e,HttpResponse httpResponse){  super(e);  this.httpResponse=httpResponse;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static boolean isChildOf(Element child,Elements possibleParents){  for (  Element parent : child.parents()) {    if (possibleParents.contains(parent)) {      return true;    }  }  return false;}  }
class C{  protected void deleteProximityBrowsingNodes(){  m_internallyDisabled=true;  for (  final Node node : m_proximityMap.keySet()) {    m_graph.getGraph().removeNode(node);  }  m_proximityMap.clear();  for (  final Entry<ZyProximityNode<?>,InternalNodeListener> entry : m_nodeListeners.entrySet()) {    ((IViewNode<?>)entry.getKey().getRawNode().getAttachedNode()).removeListener(entry.getValue());  }  m_nodeListeners.clear();  m_internallyDisabled=false;}  }
class C{  public void runAnimation(View view){  mAnimator.cancel();  mAnimator.setInterpolator(mVisualizer.getInterpolator());  mAnimator.setDuration(mDuration);  mAnimator.start();}  }
class C{  public boolean hasPickerInfo(){  return (mPickerInfo != null);}  }
class C{  public static void copyToClipboard(final String text){  try {    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(text),null);  } catch (  final IllegalStateException ise) {  }}  }
class C{  static int decimalPlaces(final double x){  double y=x * 10.0;  int dp=1;  while (true) {    if (dp == 10) {      return 10;    }    final double z=MathUtils.round(y);    final double del=Math.abs(z - y);    if (del < 0.0000001) {      return dp;    }    dp++;    y=y * 10.0;  }}  }
class C{  public String tax(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  String column=mField.getColumnName();  if (value == null)   return "";  if (steps)   log.warning("init");  int M_Product_ID=0;  if (column.equals("M_Product_ID"))   M_Product_ID=((Integer)value).intValue(); else   M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  int C_Charge_ID=0;  if (column.equals("C_Charge_ID"))   C_Charge_ID=((Integer)value).intValue(); else   C_Charge_ID=Env.getContextAsInt(ctx,WindowNo,"C_Charge_ID");  log.fine("Product=" + M_Product_ID + ", C_Charge_ID="+ C_Charge_ID);  if (M_Product_ID == 0 && C_Charge_ID == 0)   return amt(ctx,WindowNo,mTab,mField,value);  int shipC_BPartner_Location_ID=0;  if (column.equals("C_BPartner_Location_ID"))   shipC_BPartner_Location_ID=((Integer)value).intValue(); else   shipC_BPartner_Location_ID=Env.getContextAsInt(ctx,WindowNo,"C_BPartner_Location_ID");  if (shipC_BPartner_Location_ID == 0)   return amt(ctx,WindowNo,mTab,mField,value);  log.fine("Ship BP_Location=" + shipC_BPartner_Location_ID);  Timestamp billDate=Env.getContextAsDate(ctx,WindowNo,"DateOrdered");  log.fine("Bill Date=" + billDate);  Timestamp shipDate=Env.getContextAsDate(ctx,WindowNo,"DatePromised");  log.fine("Ship Date=" + shipDate);  int AD_Org_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Org_ID");  log.fine("Org=" + AD_Org_ID);  int M_Warehouse_ID=Env.getContextAsInt(ctx,WindowNo,"M_Warehouse_ID");  log.fine("Warehouse=" + M_Warehouse_ID);  int billC_BPartner_Location_ID=Env.getContextAsInt(ctx,WindowNo,"Bill_Location_ID");  if (billC_BPartner_Location_ID == 0)   billC_BPartner_Location_ID=shipC_BPartner_Location_ID;  log.fine("Bill BP_Location=" + billC_BPartner_Location_ID);  int C_Tax_ID=Tax.get(ctx,M_Product_ID,C_Charge_ID,billDate,shipDate,AD_Org_ID,M_Warehouse_ID,billC_BPartner_Location_ID,shipC_BPartner_Location_ID,"Y".equals(Env.getContext(ctx,WindowNo,"IsSOTrx")));  log.info("Tax ID=" + C_Tax_ID);  if (C_Tax_ID == 0)   mTab.fireDataStatusEEvent(CLogger.retrieveError()); else   mTab.setValue("C_Tax_ID",new Integer(C_Tax_ID));  if (steps)   log.warning("fini");  return amt(ctx,WindowNo,mTab,mField,value);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public synchronized void clearAnnouncements(){  if (announcements != null)   announcements=new Vector();}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.901 -0500",hash_original_method="2E3B808D4A6B84F6D09D6182416A5594",hash_generated_method="B6ABE100F1B770B81F87112251BB7552") public ViewPropertyAnimator xBy(float value){  animatePropertyBy(X,value);  return this;}  }
class C{  @Override synchronized void doClose() throws SQLException {  this.currentConnection.close();}  }
class C{  protected void addNewDTMID(int nodeIndex){  try {    if (m_mgr == null)     throw new ClassCastException();    DTMManagerDefault mgrD=(DTMManagerDefault)m_mgr;    int id=mgrD.getFirstFreeDTMID();    mgrD.addDTM(this,id,nodeIndex);    m_dtmIdent.addElement(id << DTMManager.IDENT_DTM_NODE_BITS);  } catch (  ClassCastException e) {    error(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DTMIDS_AVAIL,null));  }}  }
class C{  public BlobStore openBlobStore(File dir) throws IOException {  return openBlobStore(dir.toURI().toString());}  }
class C{  public AbstractColumn(Class columnType,Object defaultValue){  m_columnType=columnType;  DataParser p=ParserFactory.getDefaultFactory().getParser(columnType);  m_parser=(p == null ? new ObjectParser() : p);  setDefaultValue(defaultValue);  m_readOnly=false;  m_listeners=new CopyOnWriteArrayList();}  }
class C{  public void terminate(){  for (int i=0; i < threads; i++) {    servers[i].terminate();  }}  }
class C{  public RDFObject createObject(String uri){  if (connection == null)   throw new IllegalStateException("No ObjectConnection");  ValueFactory vf=connection.getValueFactory();  return createObject(vf.createURI(uri));}  }
class C{  static byte[] discardWhitespace(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {switch (data[i]) {case (byte)' ':case (byte)'\n':case (byte)'\r':case (byte)'\t':      break;default :    groomedData[bytesCopied++]=data[i];}}byte packedData[]=new byte[bytesCopied];System.arraycopy(groomedData,0,packedData,0,bytesCopied);return packedData;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case CHALLENGE:    return isSetChallenge();case RESPONSE:  return isSetResponse();}throw new IllegalStateException();}  }
class C{  public MajorityVote(List<Classifier> voters){  this.voters=voters.toArray(new Classifier[0]);}  }
class C{  public QueryStringDecoder(URI uri,Charset charset,int maxParams){  if (uri == null) {    throw new NullPointerException("getUri");  }  if (charset == null) {    throw new NullPointerException("charset");  }  if (maxParams <= 0) {    throw new IllegalArgumentException("maxParams: " + maxParams + " (expected: a positive integer)");  }  String rawPath=uri.getRawPath();  if (rawPath != null) {    hasPath=true;  } else {    rawPath="";    hasPath=false;  }  this.uri=rawPath + (uri.getRawQuery() == null ? "" : '?' + uri.getRawQuery());  this.charset=charset;  this.maxParams=maxParams;}  }
class C{  public void testBug17248345() throws Exception {  Connection testConn;  createProcedure("testBug17248345","(IN proccol INT) SELECT 1");  createFunction("testBug17248345","(funccol INT) RETURNS INT DETERMINISTIC RETURN 1");  assertFalse("Property useInformationSchema should be false",((ConnectionProperties)this.conn).getUseInformationSchema());  assertTrue("Property getProceduresReturnsFunctions should be true",((ConnectionProperties)this.conn).getGetProceduresReturnsFunctions());  checkMetaDataInfoForBug17248345(this.conn);  testConn=getConnectionWithProps("useInformationSchema=true");  assertTrue("Property useInformationSchema should be true",((ConnectionProperties)testConn).getUseInformationSchema());  assertTrue("Property getProceduresReturnsFunctions should be true",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkMetaDataInfoForBug17248345(testConn);  testConn.close();  testConn=getConnectionWithProps("getProceduresReturnsFunctions=false");  assertFalse("Property useInformationSchema should be false",((ConnectionProperties)testConn).getUseInformationSchema());  assertFalse("Property getProceduresReturnsFunctions should be false",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkMetaDataInfoForBug17248345(testConn);  testConn.close();  testConn=getConnectionWithProps("useInformationSchema=true,getProceduresReturnsFunctions=false");  assertTrue("Property useInformationSchema should be true",((ConnectionProperties)testConn).getUseInformationSchema());  assertFalse("Property getProceduresReturnsFunctions should be false",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkMetaDataInfoForBug17248345(testConn);  testConn.close();}  }
class C{  public X500Principal(byte[] name){  if (name == null) {    throw new IllegalArgumentException("Name cannot be null");  }  try {    dn=(Name)Name.ASN1.decode(name);  } catch (  IOException e) {    throw incorrectInputEncoding(e);  }}  }
class C{  public static float pxToDp(float px,Context context){  return px / context.getResources().getDisplayMetrics().density;}  }
class C{  public static void deleteDirectory(File dir) throws IOException {  if (!dir.isDirectory()) {    throw new IllegalArgumentException(dir.getPath() + " should always be a directory!");  }  String[] children=dir.list();  for (  String childname : children) {    File child=new File(dir,childname);    if (child.isDirectory()) {      deleteDirectory(child);      if (!child.delete()) {        throw new IOException("Failed to delete file : " + child.getPath());      }    } else {      if (!child.delete()) {        throw new IOException("Failed to delete file : " + child.getPath());      }    }  }  if (!dir.delete()) {    throw new IOException("Failed to delete directory : " + dir.getPath());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOMTest/level2","dom:elem");{    boolean success=false;    try {      element.setAttributeNS("http://www.w3.org/DOMTest/level2","xmlns","test");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("elementsetattributens08_Err1",success);  }{    boolean success=false;    try {      element.setAttributeNS("http://www.w3.org/DOMTest/level2","xmlns:root","test");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("elementsetattributens08_Err2",success);  }}  }
class C{  public void updateObservaciones(String id,String observaciones){  final String qual=new StringBuffer().append("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,id)).toString();  HashMap mapColumnsToUpdate=new HashMap();  mapColumnsToUpdate.put(CAMPO_OBSERVACIONES,observaciones);  updateFields(qual,mapColumnsToUpdate,TABLE_NAME);}  }
class C{  public static void writeVarLong(OutputStream out,long x) throws IOException {  while ((x & ~0x7f) != 0) {    out.write((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  out.write((byte)x);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  Log.i(TAG,"called onCreate");  super.onCreate(savedInstanceState);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  setContentView(R.layout.activity_face_detection);  mOpenCvCameraView=(CameraBridgeViewBase)findViewById(R.id.fd_activity_surface_view);  mOpenCvCameraView.setCvCameraViewListener(this);}  }
class C{  private void dropStudent(int index){  String[] s=new String[students.length - 1];  for (int i=0, j=0; i < s.length; i++, j++) {    if (i == index) {      j++;    }    s[i]=students[j];  }  this.students=s;  numberOfStudents--;}  }
class C{  private void calculateRanges(Population population){  if (population.size() < 2) {    throw new IllegalArgumentException("requires at least two solutions");  }  for (int i=0; i < problem.getNumberOfObjectives(); i++) {    minimum[i]=Double.POSITIVE_INFINITY;    maximum[i]=Double.NEGATIVE_INFINITY;  }  for (int i=0; i < population.size(); i++) {    Solution solution=population.get(i);    if (solution.violatesConstraints()) {      continue;    }    for (int j=0; j < problem.getNumberOfObjectives(); j++) {      minimum[j]=Math.min(minimum[j],solution.getObjective(j));      maximum[j]=Math.max(maximum[j],solution.getObjective(j));    }  }  if (referencePoint != null) {    for (int j=0; j < problem.getNumberOfObjectives(); j++) {      maximum[j]=referencePoint[j >= referencePoint.length ? referencePoint.length - 1 : j];    }    System.err.println("Using reference point: " + Arrays.toString(maximum));  } else   if (delta > 0.0) {    for (int j=0; j < problem.getNumberOfObjectives(); j++) {      maximum[j]+=delta * (maximum[j] - minimum[j]);    }    System.err.println("Using reference point: " + Arrays.toString(maximum));  }}  }
class C{  private void debugAssist(Throwable e){  System.out.flush();  e.printStackTrace();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.AUTO_TRANSITION_BLOCK___GUARD_1:    return guard_1 != null && !guard_1.isEmpty();case UmplePackage.AUTO_TRANSITION_BLOCK___ACTION_1:  return action_1 != null && !action_1.isEmpty();case UmplePackage.AUTO_TRANSITION_BLOCK___STATE_NAME_1:return STATE_NAME_1_EDEFAULT == null ? stateName_1 != null : !STATE_NAME_1_EDEFAULT.equals(stateName_1);}return super.eIsSet(featureID);}  }
class C{  public boolean userCanAssingUserToGroup(int connectedUserId,int userId,int groupId,String entidad) throws Exception {  boolean can=false;  try {    if (existsUserInGroup(userId,groupId,entidad))     ISicresAdminBasicException.throwException(ISicresAdminUserKeys.EC_USER_EXITS);    can=this.userCanEditGroup(connectedUserId,groupId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAbstractMethodDeclaration_();}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public void toPrecedenceFreeEPL(StringWriter writer,EPStatementFormatter formatter){  guarded.get(0).toEPL(writer,getPrecedence(),formatter);  if (GuardEnum.isWhile(this.getNamespace(),this.getName())) {    writer.write(" while (");    this.getParameters().get(0).toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    writer.write(")");  } else {    writer.write(" where ");    super.toEPL(writer);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.GATEWAY__NAME:    setName((String)newValue);  return;case EipPackage.GATEWAY__TO_CHANNELS:getToChannels().clear();getToChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.GATEWAY__FROM_CHANNELS:getFromChannels().clear();getFromChannels().addAll((Collection<? extends Channel>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  static String buildOrigin(URI uri){  return String.format("%s:%d",uri.getHost(),uri.getPort());}  }
class C{  public void beginSeq(int tag){  if (curSeqIndex >= seqOffset.length) {    int[] seqOffsetTmp=new int[seqOffset.length * 2];    for (int i=0; i < seqOffset.length; i++) {      seqOffsetTmp[i]=seqOffset[i];    }    seqOffset=seqOffsetTmp;  }  encodeByte(tag);  seqOffset[curSeqIndex]=offset;  ensureFreeBytes(3);  offset+=3;  curSeqIndex++;}  }
class C{  public OVector(Object[] v){  if (v.length == 0)   vector=new Object[defaultCapacity]; else {    vector=v;    size=vector.length;  }}  }
class C{  public <T extends JCTree>void printExprs(List<T> trees,String sep) throws IOException {  if (trees.nonEmpty()) {    printExpr(trees.head);    for (List<T> l=trees.tail; l.nonEmpty(); l=l.tail) {      print(sep);      printExpr(l.head);    }  }}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);  linearLayout.removeAllViews();  linearLayout.invalidate();}  }
class C{  public Spring addSpring(ForceItem item1,ForceItem item2){  return addSpring(item1,item2,-1.f,-1.f);}  }
class C{  @Override public synchronized int handleTelegram(char[] buffer){  int result=0;  String bufferStr=new String(buffer);  log.debug(this.toString() + " RX:'" + bufferStr+ "'");  if (buffer.length == 0) {    return result;  }  if (lastTxMsg.compareToIgnoreCase(bufferStr) == 0) {    return result;  }switch (getResponseId(bufferStr)) {case SEARCH:    setStatus(status != STAT.ECU_DETECT ? STAT.CONNECTING : status);case QMARK:case NODATA:case OK:case ERROR:case NOCONN:case NOCONN2:case CANERROR:case BUSERROR:case BUSINIERR:case BUSINIERR2:case BUSINIERR3:case BUSBUSY:case FBERROR:case DATAERROR:case BUFFERFULL:case RXERROR:case STOPPED:  lastRxMsg=bufferStr;log.info("ELM rx:'" + bufferStr + "' ("+ lastTxMsg+ ")");break;case MODEL:initialize();break;case PROMPT:switch (getResponseId(lastRxMsg)) {case NOCONN:case NOCONN2:case CANERROR:case BUSERROR:case BUSINIERR:case BUSINIERR2:case BUSINIERR3:case BUSBUSY:case FBERROR:setStatus(STAT.DISCONNECTED);cmdQueue.add(String.valueOf(lastCommand));mAdaptiveTiming.initialize();sendCommand(CMD.SETPROT,PROT.ELM_PROT_AUTO.ordinal());break;case DATAERROR:setStatus(STAT.DATAERROR);sendCommand(CMD.RESET,0);break;case BUFFERFULL:case RXERROR:setStatus(STAT.RXERROR);sendCommand(CMD.RESET,0);break;case ERROR:setStatus(STAT.ERROR);sendCommand(CMD.RESET,0);break;case NODATA:setStatus(STAT.NODATA);if (service != OBD_SVC_NONE) cmdQueue.add(String.valueOf(createTelegram(emptyBuffer,service,getNextSupportedPid())));mAdaptiveTiming.adapt(true);case MODEL:case SEARCH:case STOPPED:case QMARK:case OK:default :if (responsePending) {result=handleDataMessage(lastRxMsg);}if (cmdQueue.size() > 0) {String cmd=cmdQueue.lastElement();cmdQueue.remove(cmd);sendTelegram(cmd.toCharArray());} else {if (status == STAT.INITIALIZING) {setStatus(STAT.INITIALIZED);queryEcus();break;}setStatus(status == STAT.ECU_DETECT ? STAT.ECU_DETECTED : status);switch (service) {case OBD_SVC_VEH_INFO:if (pidsWrapped) {break;}case OBD_SVC_DATA:case OBD_SVC_FREEZEFRAME:{writeTelegram(emptyBuffer,service,getNextSupportedPid());mAdaptiveTiming.adapt(false);}break;case OBD_SVC_NONE:default :}}}break;default :switch (status) {case ECU_DETECT:{int adrEnd=bufferStr.indexOf("41");if (adrEnd > 0) {if (adrEnd % 2 != 0) adrEnd=3;String address=bufferStr.substring(0,adrEnd);log.debug(String.format("Found ECU address: 0x%s",address));ecuAddresses.add(Integer.valueOf(address,16));}return lastRxMsg.length();}default :break;}setStatus(STAT.CONNECTED);if (buffer[0] == '0' && buffer.length == 3) {charsExpected=Integer.valueOf(bufferStr,16) * 2;lastRxMsg="";return (result);}int idx=bufferStr.indexOf(':');if (idx >= 0) {responsePending=(charsExpected == 0);if (buffer[0] == '0') {lastRxMsg=bufferStr.substring(idx + 1);} else {lastRxMsg+=bufferStr.substring(idx + 1);}} else {lastRxMsg=bufferStr;charsExpected=0;responsePending=false;}if (lastRxMsg.length() < charsExpected) {return (result);}if (!responsePending) {result=handleDataMessage(lastRxMsg);}}return (result);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mItemName=getArguments().getString(Constants.KEY_LIST_ITEM_NAME);  mItemId=getArguments().getString(Constants.KEY_LIST_ITEM_ID);}  }
class C{  public FloatMatrix(){  this(0,0,(float[])null);}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool name: " + this.getClass().getName());  LOG.info(" - inputDir: " + args.input);  LOG.info(" - outputDir: " + args.output);  Job job=Job.getInstance(getConf());  job.setJobName(String.format("FindReachableNodes:[input: %s, output: %s]",args.input,args.output));  job.setJarByClass(FindReachableNodes.class);  job.setNumReduceTasks(0);  job.getConfiguration().setInt("mapred.min.split.size",1024 * 1024 * 1024);  FileInputFormat.addInputPath(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setInputFormatClass(SequenceFileInputFormat.class);  job.setOutputFormatClass(TextOutputFormat.class);  job.setMapOutputKeyClass(IntWritable.class);  job.setMapOutputValueClass(BfsNode.class);  job.setOutputKeyClass(IntWritable.class);  job.setOutputValueClass(BfsNode.class);  job.setMapperClass(MyMapper.class);  FileSystem.get(job.getConfiguration()).delete(new Path(args.output),true);  job.waitForCompletion(true);  return 0;}  }
class C{  static String hex(final byte[] input){  final StringBuffer sb=new StringBuffer(input.length * 2);  for (  final byte element : input) {    sb.append(CollectionConstants.AXIS_HEX_TABLE[element >> 4 & 0xf]);    sb.append(CollectionConstants.AXIS_HEX_TABLE[element & 0xf]);  }  return sb.toString();}  }
class C{  public static FileResource createFileResourceByArtifactId(final Long artifactId){  final FileResource resource=new FileResource();  resource.artifactId=artifactId;  return resource;}  }
class C{  protected static Bitmap createBitmapAndGcIfNecessary(int width,int height){  try {    return Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  } catch (  OutOfMemoryError e) {    System.gc();    return Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  }}  }
class C{  protected ExecutionExitImpl(){  super();}  }
class C{  public void onPackagesAvailable(String[] packageNames){}  }
class C{  public ExtractLocalDescriptor(){  super(IJavaRefactorings.EXTRACT_LOCAL_VARIABLE);}  }
class C{  public void addProvider(String name,ContentProvider provider){  mProviders.put(name,provider);}  }
class C{  public Builder enabledCipherSuites(final List<String> enabledCipherSuites){  clientConfig.setEnabledCipherSuites(enabledCipherSuites.toArray(new String[enabledCipherSuites.size()]));  return this;}  }
class C{  public boolean leave() throws KeeperException, InterruptedException {  zooKeeper.delete(rootPath + "/" + name,0);  while (true) {synchronized (mutex) {      List<String> list=zooKeeper.getChildren(rootPath,true);      if (list.size() > 0) {        mutex.wait();      } else {        return true;      }    }  }}  }
class C{  public FileStoreDataSet(String filestorePath,String dataSetPath,String configFilePath){  if (filestorePath == null || dataSetPath == null || configFilePath == null) {    String message=Logging.getMessage("nullValue.FileStorePathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.filestorePath=filestorePath;  this.dataSetPath=dataSetPath;  this.configFilePath=configFilePath;  this.setValue(AVKey.COLOR,ColorAllocator.getNextColor());  this.attachMetadata();}  }
class C{  public byte byteValue(){  return value;}  }
class C{  public static double[] mbDistribution(Node Xi,Map<RandomVariable,Object> event){  FiniteDomain fd=(FiniteDomain)Xi.getRandomVariable().getDomain();  double[] X=new double[fd.size()];  for (int i=0; i < fd.size(); i++) {    double cprob=1.0;    for (    Node Yj : Xi.getChildren()) {      cprob*=Yj.getCPD().getValue(getEventValuesForXiGivenParents(Yj,event));    }    X[i]=Xi.getCPD().getValue(getEventValuesForXiGivenParents(Xi,fd.getValueAt(i),event)) * cprob;  }  return Util.normalize(X);}  }
class C{  public void read(InputStream is) throws FitsException {  if (is instanceof ArrayDataInput) {    this.dataStr=(ArrayDataInput)is;  } else {    this.dataStr=new BufferedDataInputStream(is);  }  read();}  }
class C{  public TraceNodeExecutedItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @SuppressWarnings("unchecked") @Override public void initGui(){  Keyboard.enableRepeatEvents(true);  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 72 + 12,"Steal Session"));  buttonList.add(new GuiButton(2,width / 2 - 100,height / 4 + 96 + 12,"How to Use"));  buttonList.add(new GuiButton(1,width / 2 - 100,height / 4 + 120 + 12,"Cancel"));  tokenBox=new GuiTextField(1,fontRendererObj,width / 2 - 100,60,200,20);  tokenBox.setMaxStringLength(65);  tokenBox.setFocused(true);  WurstClient.INSTANCE.analytics.trackPageView("/session-stealer","Session Stealer");}  }
class C{  public SuballocatedIntVector(int blocksize){  this(blocksize,NUMBLOCKS_DEFAULT);}  }
class C{  @Override public String[] indices(){  return indices;}  }
class C{  public INPUT_STREAM(String mimeType){  super(mimeType,"java.io.InputStream");}  }
class C{  public static float dpToPx(float dp){  float px=dp * (Resources.getSystem().getDisplayMetrics().densityDpi / DisplayMetrics.DENSITY_DEFAULT);  return px;}  }
class C{  public static GeoTimeSerie crop(GeoTimeSerie gts){  if (!isBucketized(gts)) {    return gts.clone();  }  sort(gts,false);  long firstbucket=gts.lastbucket - (gts.bucketcount - 1) * gts.bucketspan;  GeoTimeSerie cropped=new GeoTimeSerie(4);  cropped.setName(gts.getName());  cropped.setLabels(gts.getLabels());  for (int i=0; i < gts.values; i++) {    if (gts.ticks[i] >= firstbucket && gts.ticks[i] <= gts.lastbucket && (gts.ticks[i] % gts.bucketspan == gts.lastbucket % gts.bucketspan)) {      setValue(cropped,gts.ticks[i],null != gts.locations ? gts.locations[i] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[i] : GeoTimeSerie.NO_ELEVATION,valueAtIndex(gts,i),false);    }  }  cropped.bucketspan=gts.bucketspan;  cropped.lastbucket=cropped.ticks[cropped.values - 1];  cropped.bucketcount=1 + (int)((cropped.lastbucket - cropped.ticks[0]) / cropped.bucketspan);  return cropped;}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  public AccountHeader build(){  if (mAccountHeaderContainer == null) {    withAccountHeader(-1);  }  mAccountHeader=mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header);  int height;  if (mHeight != null) {    height=mHeight.asPixel(mActivity);  } else {    if (mCompactStyle) {      height=mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_account_header_height_compact);    } else {      height=(int)(DrawerUIUtils.getOptimalDrawerWidth(mActivity) * AccountHeader.NAVIGATION_DRAWER_ACCOUNT_ASPECT_RATIO);      if (Build.VERSION.SDK_INT < 19) {        int tempHeight=height - UIUtils.getStatusBarHeight(mActivity,true);        if (UIUtils.convertPixelsToDp(tempHeight,mActivity) > 140) {          height=tempHeight;        }      }    }  }  if (mTranslucentStatusBar) {    mAccountHeader.setPadding(mAccountHeader.getPaddingLeft(),mAccountHeader.getPaddingTop() + UIUtils.getStatusBarHeight(mActivity),mAccountHeader.getPaddingRight(),mAccountHeader.getPaddingBottom());    if (mCompactStyle) {      height=height + UIUtils.getStatusBarHeight(mActivity);    }  }  setHeaderHeight(height);  mAccountHeaderBackground=(ImageView)mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header_background);  ImageHolder.applyTo(mHeaderBackground,mAccountHeaderBackground,DrawerImageLoader.Tags.ACCOUNT_HEADER.name());  if (mHeaderBackgroundScaleType != null) {    mAccountHeaderBackground.setScaleType(mHeaderBackgroundScaleType);  }  int textColor=ColorHolder.color(mTextColor,mActivity,R.attr.material_drawer_header_selection_text,R.color.material_drawer_header_selection_text);  if (mCompactStyle) {    mAccountHeaderTextSection=mAccountHeader;  } else {    mAccountHeaderTextSection=mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header_text_section);  }  mAccountHeaderTextSectionBackgroundResource=DrawerUIUtils.getSelectableBackground(mActivity);  handleSelectionView(mCurrentProfile,true);  mAccountSwitcherArrow=(ImageView)mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header_text_switcher);  mAccountSwitcherArrow.setImageDrawable(new IconicsDrawable(mActivity,MaterialDrawerFont.Icon.mdf_arrow_drop_down).sizeRes(R.dimen.material_drawer_account_header_dropdown).paddingRes(R.dimen.material_drawer_account_header_dropdown_padding).color(textColor));  mCurrentProfileView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_current);  mCurrentProfileName=(TextView)mAccountHeader.findViewById(R.id.material_drawer_account_header_name);  mCurrentProfileEmail=(TextView)mAccountHeader.findViewById(R.id.material_drawer_account_header_email);  if (mNameTypeface != null) {    mCurrentProfileName.setTypeface(mNameTypeface);  } else   if (mTypeface != null) {    mCurrentProfileName.setTypeface(mTypeface);  }  if (mEmailTypeface != null) {    mCurrentProfileEmail.setTypeface(mEmailTypeface);  } else   if (mTypeface != null) {    mCurrentProfileEmail.setTypeface(mTypeface);  }  mCurrentProfileName.setTextColor(textColor);  mCurrentProfileEmail.setTextColor(textColor);  mProfileFirstView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_small_first);  mProfileSecondView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_small_second);  mProfileThirdView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_small_third);  calculateProfiles();  buildProfiles();  if (mSavedInstance != null) {    int selection=mSavedInstance.getInt(AccountHeader.BUNDLE_SELECTION_HEADER,-1);    if (selection != -1) {      if (mProfiles != null && (selection) > -1 && selection < mProfiles.size()) {        switchProfiles(mProfiles.get(selection));      }    }  }  if (mDrawer != null) {    mDrawer.setHeader(mAccountHeaderContainer,mPaddingBelowHeader,mDividerBelowHeader);  }  mActivity=null;  return new AccountHeader(this);}  }
class C{  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {  SolrInputDocument doc=new SolrInputDocument();  String attrName="";  for (int i=0; i < parser.getAttributeCount(); i++) {    attrName=parser.getAttributeLocalName(i);    if ("boost".equals(attrName)) {      doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));    } else {      log.warn("XML element <doc> has invalid XML attr:" + attrName);    }  }  StringBuilder text=new StringBuilder();  String name=null;  float boost=1.0f;  boolean isNull=false;  String update=null;  Collection<SolrInputDocument> subDocs=null;  Map<String,Map<String,Object>> updateMap=null;  boolean complete=false;  while (!complete) {    int event=parser.next();switch (event) {case XMLStreamConstants.SPACE:case XMLStreamConstants.CDATA:case XMLStreamConstants.CHARACTERS:      text.append(parser.getText());    break;case XMLStreamConstants.END_ELEMENT:  if ("doc".equals(parser.getLocalName())) {    if (subDocs != null && !subDocs.isEmpty()) {      doc.addChildDocuments(subDocs);      subDocs=null;    }    complete=true;    break;  } else   if ("field".equals(parser.getLocalName())) {    Object v=isNull ? null : text.toString();    if (update != null) {      if (updateMap == null)       updateMap=new HashMap<>();      Map<String,Object> extendedValues=updateMap.get(name);      if (extendedValues == null) {        extendedValues=new HashMap<>(1);        updateMap.put(name,extendedValues);      }      Object val=extendedValues.get(update);      if (val == null) {        extendedValues.put(update,v);      } else {        if (val instanceof List) {          List list=(List)val;          list.add(v);        } else {          List<Object> values=new ArrayList<>();          values.add(val);          values.add(v);          extendedValues.put(update,values);        }      }      break;    }    doc.addField(name,v,boost);    boost=1.0f;    name=null;  }break;case XMLStreamConstants.START_ELEMENT:text.setLength(0);String localName=parser.getLocalName();if ("doc".equals(localName)) {if (subDocs == null) subDocs=Lists.newArrayList();subDocs.add(readDoc(parser));} else {if (!"field".equals(localName)) {String msg="XML element <doc> has invalid XML child element: " + localName;log.warn(msg);throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,msg);}boost=1.0f;update=null;isNull=false;String attrVal="";for (int i=0; i < parser.getAttributeCount(); i++) {attrName=parser.getAttributeLocalName(i);attrVal=parser.getAttributeValue(i);if ("name".equals(attrName)) {name=attrVal;} else if ("boost".equals(attrName)) {boost=Float.parseFloat(attrVal);} else if ("null".equals(attrName)) {isNull=StrUtils.parseBoolean(attrVal);} else if ("update".equals(attrName)) {update=attrVal;} else {log.warn("XML element <field> has invalid XML attr: " + attrName);}}}break;}}if (updateMap != null) {for (Map.Entry<String,Map<String,Object>> entry : updateMap.entrySet()) {name=entry.getKey();Map<String,Object> value=entry.getValue();doc.addField(name,value,1.0f);}}return doc;}  }
class C{  public void init(float startX,float startY,float endX,float endY){  setStart(new PointF(startX,startY));  setEnd(new PointF(endX,endY));}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private SSLEngineResult unwrap0() throws SSLException {  SSLEngineResult res;  do {    res=sslEngine.unwrap(inNetBuf,appBuf);    if (log.isDebugEnabled())     log.debug("Unwrapped raw data [status=" + res.getStatus() + ", handshakeStatus="+ res.getHandshakeStatus()+ ']');    if (res.getStatus() == Status.BUFFER_OVERFLOW)     appBuf=expandBuffer(appBuf,appBuf.capacity() * 2);  } while ((res.getStatus() == OK || res.getStatus() == Status.BUFFER_OVERFLOW) && (handshakeFinished && res.getHandshakeStatus() == NOT_HANDSHAKING || res.getHandshakeStatus() == NEED_UNWRAP));  return res;}  }
class C{  private JarHell(){}  }
class C{  public boolean isConstructor(){  return constructor;}  }
class C{  public HessianRuntimeException(Throwable rootCause){  super(String.valueOf(rootCause));  this.rootCause=rootCause;}  }
class C{  public String formatDate(Date date){  return dateFormat.format(date);}  }
class C{  private void syncBuddyListToDB(DBTransaction transaction,String charname,String relationtype,Collection<String> oldList,Collection<String> newList) throws SQLException {  Map<String,Object> params=new HashMap<String,Object>();  params.put("charname",charname);  params.put("relationtype",relationtype);  Set<String> toAdd=new TreeSet<String>(newList);  toAdd.removeAll(oldList);  String query="INSERT INTO buddy (charname, relationtype, buddy) VALUES ('[charname]', '[relationtype]', '[buddy]')";  for (  String buddy : toAdd) {    params.put("buddy",buddy);    transaction.execute(query,params);  }  Set<String> toDel=new TreeSet<String>(oldList);  toDel.removeAll(newList);  query="DELETE FROM buddy WHERE charname='[charname]' AND buddy='[buddy]' AND relationtype='[relationtype]'";  for (  String buddy : toDel) {    params.put("buddy",buddy);    transaction.execute(query,params);  }}  }
class C{  public static int[][] subtract(int[][] input1,int[][] input2) throws Exception {  int rows=input1.length;  int columns=input1[0].length;  if (input2.length != rows) {    throw new Exception("Row length of arrays are not equal");  }  if (input2[0].length != columns) {    throw new Exception("Column length of arrays are not equal");  }  int[][] returnValues=new int[rows][columns];  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      returnValues[r][c]=input1[r][c] - input2[r][c];    }  }  return returnValues;}  }
class C{  private boolean isMessageEligibleForMyOs(UpdateMessage msg){  if (msg.getOs() == null)   return true;  boolean im_mac_msg_for_me=msg.getOs().equals("mac") && OSUtils.isMacOSX();  boolean im_windows_msg_for_me=msg.getOs().equals("windows") && (OSUtils.isWindows() || OSUtils.isWindowsXP() || OSUtils.isWindowsNT()|| OSUtils.isWindows98()|| OSUtils.isWindows95()|| OSUtils.isWindowsMe()|| OSUtils.isWindowsVista());  boolean im_linux_msg_for_me=msg.getOs().equals("linux") && OSUtils.isLinux();  return im_mac_msg_for_me || im_windows_msg_for_me || im_linux_msg_for_me;}  }
class C{  public EntityLoadingException(){}  }
class C{  private void drawLeftPart(final Point buttonSize){  this.gc.setForeground(this.unselectedBackgroundColor);  this.gc.setBackground(this.unselectedBackgroundColor);  if (this.round) {    this.gc.fillRoundRectangle(2,2,buttonSize.x,buttonSize.y,5,5);  } else {    this.gc.fillRectangle(2,2,buttonSize.x,buttonSize.y);  }  this.gc.setForeground(GamaColors.getTextColorForBackground(unselectedBackgroundColor).color());  final Point textSize=this.gc.textExtent(this.textForUnselect);  this.gc.drawString(this.textForUnselect,buttonSize.x / 2 + (buttonSize.x / 2 - textSize.x) / 2 + 3,(buttonSize.y - textSize.y) / 2 + 3);}  }
