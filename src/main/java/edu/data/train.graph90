class C{  protected void removeLastFieldSeparator(final StringBuffer buffer){  final int len=buffer.length();  final int sepLen=fieldSeparator.length();  if (len > 0 && sepLen > 0 && len >= sepLen) {    boolean match=true;    for (int i=0; i < sepLen; i++) {      if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {        match=false;        break;      }    }    if (match) {      buffer.setLength(len - sepLen);    }  }}  }
class C{  public int id(){  return id;}  }
class C{  @Override public void run(){  amIActive=true;  String inputStreamsFile;  int row, col;  int i;  int topRow, bottomRow, leftCol, rightCol;  float progress;  double decrement;  double decayCoefficient=0;  double elevation;  double infVal=9999999;  double value;  double rowYCoord, colXCoord;  double[][] geometry;  BoundingBox box;  int numPoints, numParts, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputStreamsFile=args[1];  outputHeader=args[2];  decrement=Double.parseDouble(args[3]);  if (!args[4].toLowerCase().contains("not specified")) {    decayCoefficient=Double.parseDouble(args[4]);    if (decayCoefficient < 0) {      decayCoefficient=0;    }  }  if ((demHeader == null) || (inputStreamsFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    if (inputStreamsFile.toLowerCase().endsWith(".dep")) {      streamsHeader=inputStreamsFile;      streams=new WhiteboxRaster(streamsHeader,"r");    } else     if (inputStreamsFile.toLowerCase().endsWith(".shp")) {      streamsHeader=inputStreamsFile.replace(".shp","_temp.dep");      ShapeFile input=new ShapeFile(inputStreamsFile);      int numRecs=input.getNumberOfRecords();      if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {        showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");        return;      }      streams=new WhiteboxRaster(streamsHeader,"rw",demHeader,WhiteboxRasterBase.DataType.INTEGER,0);      streams.isTemporaryFile=true;      ArrayList<RecordInfo> myList=new ArrayList<RecordInfo>();      for (      ShapeFileRecord record : input.records) {        i=record.getRecordNumber();        box=getBoundingBoxFromShapefileRecord(record);        myList.add(new RecordInfo(box.getMaxY(),i));      }      Collections.sort(myList);      long heapSize=Runtime.getRuntime().totalMemory();      int flushSize=(int)(heapSize / 32);      int j, numCellsToWrite;      PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<RowPriorityGridCell>(flushSize);      RowPriorityGridCell cell;      int numRecords=input.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      progress=0;      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=input.getRecord(ri.recNumber - 1);        value=record.getRecordNumber();        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][0] < box.getMinX()) {              box.setMinX(geometry[i][0]);            }            if (geometry[i][0] > box.getMaxX()) {              box.setMaxX(geometry[i][0]);            }            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=streams.getRowFromYCoordinate(box.getMaxY());          bottomRow=streams.getRowFromYCoordinate(box.getMinY());          leftCol=streams.getColumnFromXCoordinate(box.getMinX());          rightCol=streams.getColumnFromXCoordinate(box.getMaxX());          for (row=topRow; row <= bottomRow; row++) {            rowYCoord=streams.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                  col=streams.getColumnFromXCoordinate(xPrime);                  pq.add(new RowPriorityGridCell(row,col,value));                }              }            }          }          for (col=leftCol; col <= rightCol; col++) {            colXCoord=streams.getXCoordinateFromColumn(col);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                if (x1 != x2) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                  row=streams.getRowFromYCoordinate(yPrime);                  pq.add(new RowPriorityGridCell(row,col,value));                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            streams.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress((int)progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        streams.setValue(cell.row,cell.col,cell.z);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      streams.flush();    } else {      showFeedback("The input streams file must be either a Whitebox raster or shapefile.");      return;    }    if (streams.getNumberColumns() != cols || streams.getNumberRows() != rows) {      showFeedback("The input files must have the same dimensions.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,infVal);    output.setPreferredPalette(DEM.getPreferredPalette());    if (decayCoefficient > 0) {      if (!CalculateDistance()) {        showFeedback("An error was encountered calculating distances.");        return;      }      double distVal=0;      double[] data;      for (row=0; row < rows; row++) {        data=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            distVal=output.getValue(row,col);            elevation=data[col] - (Math.pow((gridRes / (gridRes + distVal)),decayCoefficient) * decrement);            output.setValue(row,col,elevation);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Burning Streams:",(int)progress);      }    } else {      double[] demData;      double[] streamData;      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        streamData=streams.getRowValues(row);        for (col=0; col < cols; col++) {          if (demData[col] != noData && streamData[col] > 0) {            elevation=demData[col] - decrement;            output.setValue(row,col,elevation);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Burning Streams:",(int)progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void close(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        if (!mDiskLruCache.isClosed()) {          mDiskLruCache.close();        }      } catch (      Throwable e) {        LogUtils.e(e.getMessage(),e);      }      mDiskLruCache=null;    }  }}  }
class C{  @RequestMapping(value="/{uname}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("uname") String username,Principal principal){  RestWrapper restWrapper=null;  try {    usersDAO.delete(username);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with name:" + username + " deleted from Users by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  protected void debugCodeCall(String methodName){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + methodName+ "();");  }}  }
class C{  public static Bundle saveState(SslCertificate certificate){  if (certificate == null) {    return null;  }  Bundle bundle=new Bundle();  bundle.putString(ISSUED_TO,certificate.getIssuedTo().getDName());  bundle.putString(ISSUED_BY,certificate.getIssuedBy().getDName());  bundle.putString(VALID_NOT_BEFORE,certificate.getValidNotBefore());  bundle.putString(VALID_NOT_AFTER,certificate.getValidNotAfter());  X509Certificate x509Certificate=certificate.mX509Certificate;  if (x509Certificate != null) {    try {      bundle.putByteArray(X509_CERTIFICATE,x509Certificate.getEncoded());    } catch (    CertificateEncodingException ignored) {    }  }  return bundle;}  }
class C{  public AnnotatableElement createAnnotatableElement(){  AnnotatableElementImpl annotatableElement=new AnnotatableElementImpl();  return annotatableElement;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public JavaxDOMOutput(DOMFactory factory) throws IOException {  this.factory=factory;}  }
class C{  public byte[] receive() throws NetworkException {  try {    packet.setLength(DatagramConnection.DEFAULT_DATAGRAM_SIZE);    connection.receive(packet);    int packetLength=packet.getLength();    byte[] data=new byte[packetLength];    System.arraycopy(packet.getData(),0,data,0,packetLength);    return data;  } catch (  IOException e) {    throw new NetworkException("Failed to receive datagram packet!",e);  }}  }
class C{  public static void checkFieldSignature(final String signature){  int pos=checkFieldTypeSignature(signature,0);  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public static void checkEquals(long expected,BigDecimal actual){  checkEqualsWithScaleOfTen("",BigDecimal.valueOf(expected),actual);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void reset(){  _bufferPos=0;  Arrays.fill(_bitCount,(short)0);  Arrays.fill(_buffer,(byte)0);  Arrays.fill(_hash,0);  Arrays.fill(_K,0);  Arrays.fill(_L,0);  Arrays.fill(_block,0);  Arrays.fill(_state,0);}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ValuePreference.NAME)) {    if (MRole.getDefault().isShowPreference())     ValuePreference.start(m_mField,getValue());    return;  } else   if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND)) {    FieldRecordInfo.start(m_mField);    return;  } else   if (e.getSource() == mEditor) {    String s=Editor.startEditor(this,Msg.translate(Env.getCtx(),m_columnName),getText(),m_text.isEditable(),m_fieldLength);    setText(s);  } else   if (e.getSource() == m_button) {    action_button();    return;  }  try {    fireVetoableChange(m_columnName,m_oldText,getText());  } catch (  PropertyVetoException pve) {  }}  }
class C{  protected void filterValidDataSources(List<ApplicationResource> resources,List<DataSourceInfo> dataSources){  for (  ApplicationResource res : resources) {    if (res.isLookedUp() && res.getDataSourceInfo() != null && res.getDataSourceInfo().getJdbcUrl() != null) {      dataSources.add(res.getDataSourceInfo());    }  }}  }
class C{  public Vertex mostConscious(Vertex type){  return nextMostConscious(type,(Vertex)null,0,false);}  }
class C{  public final AlertDialog initiateScan(int cameraId){  return initiateScan(ALL_CODE_TYPES,cameraId);}  }
class C{  public int superPow(int a,int[] b){  return superPow(a,b,b.length);}  }
class C{  public static byte[] resize(byte buffer[],int newSize){  byte temp[]=new byte[newSize];  System.arraycopy(buffer,0,temp,0,buffer.length >= newSize ? newSize : buffer.length);  return temp;}  }
class C{  protected void paintTabArea(SeaGlassContext ss,Graphics g,int tabPlacement,int selectedIndex,Rectangle tabAreaBounds){  Rectangle clipRect=g.getClipBounds();  ss.setComponentState(SynthConstants.ENABLED);  SeaGlassLookAndFeel.updateSubregion(ss,g,tabAreaBounds);  ss.getPainter().paintTabbedPaneTabAreaBackground(ss,g,tabAreaBounds.x,tabAreaBounds.y,tabAreaBounds.width,tabAreaBounds.height,tabPlacement);  ss.getPainter().paintTabbedPaneTabAreaBorder(ss,g,tabAreaBounds.x,tabAreaBounds.y,tabAreaBounds.width,tabAreaBounds.height,tabPlacement);  iconRect.setBounds(0,0,0,0);  textRect.setBounds(0,0,0,0);  if (runCount == 0) {    return;  }  if (scrollBackwardButton.isVisible()) {    paintScrollButtonBackground(ss,g,scrollBackwardButton);  }  if (scrollForwardButton.isVisible()) {    paintScrollButtonBackground(ss,g,scrollForwardButton);  }  for (int i=leadingTabIndex; i <= trailingTabIndex; i++) {    if (rects[i].intersects(clipRect) && selectedIndex != i) {      paintTab(tabContext,g,rects,i,iconRect,textRect);    }  }  if (selectedIndex >= 0) {    if (rects[selectedIndex].intersects(clipRect)) {      paintTab(tabContext,g,rects,selectedIndex,iconRect,textRect);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long l=getLong(stack);  if (l > 0) {    try {      Thread.sleep(l);    } catch (    Exception e) {    }  }  return null;}  }
class C{  private void showTimeSendingStrategyValidationMessage(){  sendingValueDecoration.setDescriptionText("Time sending strategy must define a positive number of milliseconds.");}  }
class C{  private boolean initializeIntrospection(){  try {    actionListeners=new java.lang.Class[1];    actionArgs=new java.lang.Object[1];    actionListeners[0]=Class.forName("java.awt.event.ActionListener");    actionArgs[0]=this;    itemListeners=new java.lang.Class[1];    itemArgs=new java.lang.Object[1];    itemListeners[0]=Class.forName("java.awt.event.ItemListener");    itemArgs[0]=this;    textListeners=new java.lang.Class[1];    textArgs=new java.lang.Object[1];    textListeners[0]=Class.forName("java.awt.event.TextListener");    textArgs[0]=this;    windowListeners=new java.lang.Class[1];    windowArgs=new java.lang.Object[1];    windowListeners[0]=Class.forName("java.awt.event.WindowListener");    windowArgs[0]=this;    return true;  } catch (  ClassNotFoundException e) {    System.out.println("EXCEPTION - Class 'java.awt.event.*' not in CLASSPATH");    return false;  }}  }
class C{  public static boolean isValidWithNetMask(String address){  return isValidIPv4WithNetmask(address) || isValidIPv6WithNetmask(address);}  }
class C{  public static double[][] makeDelayEmbeddingVector(double[] data,int k,int startKthPoint,int numEmbeddingVectors) throws Exception {  if (startKthPoint < k - 1) {    throw new Exception("Start point t=" + startKthPoint + " is too early for a "+ k+ " length embedding vector");  }  if (numEmbeddingVectors + startKthPoint > data.length) {    throw new Exception("Too many embedding vectors " + numEmbeddingVectors + " requested for the given startPoint "+ startKthPoint+ " and time series length "+ data.length);  }  double[][] embeddingVectors=new double[numEmbeddingVectors][k];  for (int t=startKthPoint; t < numEmbeddingVectors + startKthPoint; t++) {    for (int i=0; i < k; i++) {      embeddingVectors[t - startKthPoint][i]=data[t - i];    }  }  return embeddingVectors;}  }
class C{  public SColor(){  this((short)0,(short)0,(short)0);}  }
class C{  public synchronized void addActionListener(ActionListener l){  listenerList.add(ActionListener.class,l);}  }
class C{  public GeoLat(Double lat) throws IllegalArgumentException {  super(Namespaces.W3C_GEO_NAMESPACE,"lat",null,null);  setRequired(true);  if (lat != null) {    setLatitude(lat);    setImmutable(true);  }}  }
class C{  public static List<Pair<String,Integer>> splitDecls(String s,int separatorChar){  List<Pair<String,Integer>> args=new ArrayList<Pair<String,Integer>>();  _splitArgumentList(s,0,-1,separatorChar,args);  return args;}  }
class C{  public COperandUpdater(final ZyGraph graph){  this.graph=Preconditions.checkNotNull(graph,"Error: graph argument can not be null.");}  }
class C{  TimesyncResponse(){  senderTimer=new Date();}  }
class C{  public void updateNetworkSelections(){  boolean networkSelected=String.valueOf(CommService.MEDIUM.NETWORK.ordinal()).equals(prefs.getString(KEY_COMM_MEDIUM,""));  boolean bluetoothSelected=String.valueOf(CommService.MEDIUM.BLUETOOTH.ordinal()).equals(prefs.getString(KEY_COMM_MEDIUM,""));  for (  String key : networkKeys) {    Preference pref=findPreference(key);    pref.setEnabled(networkSelected);  }  for (  String key : bluetoothKeys) {    Preference pref=findPreference(key);    pref.setEnabled(bluetoothSelected);  }}  }
class C{  public void niceText(){  niceText(OS.getNative().winMacLinux("9.0","11.0","10.0"));}  }
class C{  private TileStore(final SpriteStore store){  this.store=store;  tiles=new ArrayList<Sprite>();  tiles.add(store.getEmptySprite());}  }
class C{  protected Equation newEquation(){  return new Equation(this,getCurrentActor());}  }
class C{  static int createVector(final int x,final int y){  return ((x & 0xFFFF) << 16) + (y & 0xFFFF);}  }
class C{  void writeToByteBuffer(ByteBuffer buffer,boolean mb,boolean me){  boolean sr=mPayload.length < 256;  boolean il=mId.length > 0;  byte flags=(byte)((mb ? FLAG_MB : 0) | (me ? FLAG_ME : 0) | (sr ? FLAG_SR : 0)| (il ? FLAG_IL : 0)| mTnf);  buffer.put(flags);  buffer.put((byte)mType.length);  if (sr) {    buffer.put((byte)mPayload.length);  } else {    buffer.putInt(mPayload.length);  }  if (il) {    buffer.put((byte)mId.length);  }  buffer.put(mType);  buffer.put(mId);  buffer.put(mPayload);}  }
class C{  public void addObjectArraySuperType(String eventTypeName,String supertypeName){  ConfigurationEventTypeObjectArray current=objectArrayTypeConfigurations.get(eventTypeName);  if (current == null) {    current=new ConfigurationEventTypeObjectArray();    objectArrayTypeConfigurations.put(eventTypeName,current);  }  Set<String> superTypes=current.getSuperTypes();  if (!superTypes.isEmpty()) {    throw new ConfigurationException("Object-array event types may not have multiple supertypes");  }  superTypes.add(supertypeName);}  }
class C{  public static double[] clone(double[] array){  if (array == null) {    return null;  }  return (double[])array.clone();}  }
class C{  private static boolean hasOfflineColocatedChildRegions(PartitionedRegion region){  boolean hasOfflineChildren=false;  int oldLevel=LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT);  try {    GemFireCacheImpl cache=region.getCache();    Collection<DiskStoreImpl> stores=cache.listDiskStores();    for (    DiskStoreImpl diskStore : stores) {      for (      Map.Entry<String,PRPersistentConfig> entry : diskStore.getAllPRs().entrySet()) {        PRPersistentConfig config=entry.getValue();        String childName=entry.getKey();        if (region.getFullPath().equals(config.getColocatedWith())) {          PartitionedRegion childRegion=(PartitionedRegion)cache.getRegion(childName);          if (childRegion == null) {            if (!ignoreUnrecoveredQueue(region,childName)) {              region.addMissingColocatedRegionLogger(childName);              hasOfflineChildren=true;            }          } else {            if (hasOfflineColocatedChildRegions(childRegion)) {              hasOfflineChildren=true;              region.addMissingColocatedRegionLogger(childRegion);            }          }        }      }    }  }  finally {    LocalRegion.setThreadInitLevelRequirement(oldLevel);  }  return hasOfflineChildren;}  }
class C{  @Override public void input(Object input,Network network){  if (!isEnabled()) {    return;  }  try {    if (input instanceof Message) {      Message message=(Message)input;      String fromUser=message.getFrom().getName();      String text=message.getMessage().trim();      log("Processing message.",Level.INFO,text,fromUser);      this.messagesProcessed++;      inputSentence(text,fromUser,this.userName,message.getId(),network);    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  @Override public void configure(HttpSecurity http) throws Exception {  http.requestMatchers().antMatchers("/**").and().authorizeRequests().anyRequest().authenticated().antMatchers(HttpMethod.GET,"/**").access("#oauth2.hasScope('read')").antMatchers(HttpMethod.OPTIONS,"/**").access("#oauth2.hasScope('read')").antMatchers(HttpMethod.POST,"/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.PUT,"/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.PATCH,"/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.DELETE,"/**").access("#oauth2.hasScope('write')");}  }
class C{  public static void main(String[] args){  info("SimplePostTool version " + VERSION_OF_THIS_TOOL);  if (0 < args.length && ("-help".equals(args[0]) || "--help".equals(args[0]) || "-h".equals(args[0]))) {    usage();  } else {    final SimplePostTool t=parseArgsAndInit(args);    t.execute();  }}  }
class C{  public static LastEverProjectionExpression lastEver(String propertyName){  return new LastEverProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  public Vset clearDeadEnd(){  if (this == DEAD_END) {    return new Vset(-1,-1,fullX);  }  return this;}  }
class C{  private void sincronizarBase(int emprestimo){  listaEmprestimoItens=ControleDAO.getBanco().getEmprestimoDAO().listarItens(emprestimo);}  }
class C{  static GLUhalfEdge MakeEdge(GLUhalfEdge eNext){  GLUhalfEdge e;  GLUhalfEdge eSym;  GLUhalfEdge ePrev;  e=new GLUhalfEdge(true);  eSym=new GLUhalfEdge(false);  if (!eNext.first) {    eNext=eNext.Sym;  }  ePrev=eNext.Sym.next;  eSym.next=ePrev;  ePrev.Sym.next=e;  e.next=eNext;  eNext.Sym.next=eSym;  e.Sym=eSym;  e.Onext=e;  e.Lnext=eSym;  e.Org=null;  e.Lface=null;  e.winding=0;  e.activeRegion=null;  eSym.Sym=e;  eSym.Onext=eSym;  eSym.Lnext=e;  eSym.Org=null;  eSym.Lface=null;  eSym.winding=0;  eSym.activeRegion=null;  return e;}  }
class C{  private void adjustRoots(JComponent root,java.util.List<Component> roots,int index){  for (int i=roots.size() - 1; i >= index; i--) {    Component c=roots.get(i);    for (; ; ) {      if (c == root || c == null || !(c instanceof JComponent)) {        break;      }      c=c.getParent();    }    if (c == root) {      roots.remove(i);    }  }}  }
class C{  public static void showMessageBox(final String message,boolean buttonVisible){  if (MESSAGE_BOX == null)   initMessageBox();  MESSAGE_BOX.setVisible(false);  MESSAGE_LABEL.setText(message);  MESSAGE_OK_BUTTON.setVisible(buttonVisible);  MESSAGE_BOX.setVisible(true);}  }
class C{  public void testDeployWhenContainerConfigurationDoesNotExist(){  try {    new TestableCopyingDeployer(createContainer(createContainerCapability(DeployableType.WAR),"non-existing"));    fail("Should have thrown a CargoException here");  } catch (  CargoException expected) {    assertTrue("Incorrect message: " + expected.getMessage(),expected.getMessage().contains("ram:///non-existing"));  }}  }
class C{  public double weightedAreaUnderPRC(){  double[] classCounts=new double[m_NumClasses];  double classCountSum=0;  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      classCounts[i]+=m_ConfusionMatrix[i][j];    }    classCountSum+=classCounts[i];  }  double auprcTotal=0;  for (int i=0; i < m_NumClasses; i++) {    double temp=areaUnderPRC(i);    if (!Utils.isMissingValue(temp)) {      auprcTotal+=(temp * classCounts[i]);    }  }  return auprcTotal / classCountSum;}  }
class C{  public Coast(){  super();}  }
class C{  public final void testPhoneNumberWithContextParameter(){  assertNotNull(Validators.phoneNumber(getContext()));}  }
class C{  public static void main(final String[] args) throws Exception {  handleCommandLineArgs(args);  final File gameXmlFile=new FileOpen("Select xml file",s_mapFolderLocation,".xml").getFile();  if (gameXmlFile == null) {    System.out.println("No file selected");    return;  }  final InputStream source=XmlUpdater.class.getResourceAsStream("gameupdate.xslt");  if (source == null) {    throw new IllegalStateException("Could not find xslt file");  }  final Transformer trans=TransformerFactory.newInstance().newTransformer(new StreamSource(source));  ByteArrayOutputStream resultBuf;  try (final FileInputStream fileInputStream=new FileInputStream(gameXmlFile);final InputStream gameXmlStream=new BufferedInputStream(fileInputStream)){    final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    factory.setValidating(true);    final URL url=XmlUpdater.class.getResource("");    final String system=url.toExternalForm();    final Source xmlSource=new StreamSource(gameXmlStream,system);    resultBuf=new ByteArrayOutputStream();    trans.transform(xmlSource,new StreamResult(resultBuf));  }   gameXmlFile.renameTo(new File(gameXmlFile.getAbsolutePath() + ".backup"));  final FileOutputStream outStream=new FileOutputStream(gameXmlFile);  outStream.write(resultBuf.toByteArray());  outStream.close();  System.out.println("Successfully updated:" + gameXmlFile);}  }
class C{  public void insert(Transaction transaction){  LOG.debug("about to insert: " + transaction);  if (!transaction.isEmpty()) {    List<Transaction> tail=new ArrayList<>(mTransactions.size() + 2);    mTransactions.drainTo(tail);    mTransactions.add(transaction);    mTransactions.addAll(tail);  }}  }
class C{  @Override public boolean hasState(final GraphNode node){  return mapping.containsKey(Preconditions.checkNotNull(node,"Error: node argument can not be null"));}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  return unsupportedCritExt;}  }
class C{  private void processResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {  if (innerState.mContinuingDownload) {    return;  }  readResponseHeaders(state,innerState,response);  try {    state.mFilename=mService.generateSaveFile(mInfo.mFileName,mInfo.mTotalBytes);  } catch (  DownloaderService.GenerateSaveFileError exc) {    throw new StopRequest(exc.mStatus,exc.mMessage);  }  try {    state.mStream=new FileOutputStream(state.mFilename);  } catch (  FileNotFoundException exc) {    File pathFile=new File(Helpers.getSaveFilePath(mService));    try {      if (pathFile.mkdirs()) {        state.mStream=new FileOutputStream(state.mFilename);      }    } catch (    Exception ex) {      throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"while opening destination file: " + exc.toString(),exc);    }  }  if (Constants.LOGV) {    Log.v(Constants.TAG,"writing " + mInfo.mUri + " to "+ state.mFilename);  }  updateDatabaseFromHeaders(state,innerState);  checkConnectivity(state);}  }
class C{  public static void loadRoomMemberAvatar(Context context,MXSession session,ImageView imageView,RoomMember roomMember){  if (null != roomMember) {    VectorUtils.loadUserAvatar(context,session,imageView,roomMember.avatarUrl,roomMember.getUserId(),roomMember.displayname);  }}  }
class C{  public void configHelp(){  PrintStream out=System.out;  Properties props=AgentConfigImpl.getDefaultValuesForAllProperties();  out.println("\n");  out.println(LocalizedStrings.AgentLauncher_AGENT_CONFIGURATION_PROPERTIES.toString());  SortedMap<String,String> map=new TreeMap<String,String>();  int maxLength=0;  for (Iterator<Object> iter=props.keySet().iterator(); iter.hasNext(); ) {    String prop=(String)iter.next();    int length=prop.length();    if (length > maxLength) {      maxLength=length;    }    map.put(prop,AgentConfigImpl.getPropertyDescription(prop) + " (" + LocalizedStrings.AgentLauncher_DEFAULT.toLocalizedString()+ "  \""+ props.getProperty(prop)+ "\")");  }  Iterator<Entry<String,String>> entries=map.entrySet().iterator();  while (entries.hasNext()) {    Entry<String,String> entry=entries.next();    String prop=entry.getKey();    out.print("  ");    out.println(prop);    String description=entry.getValue();    StringTokenizer st=new StringTokenizer(description," ");    out.print("    ");    int printed=6;    while (st.hasMoreTokens()) {      String word=st.nextToken();      if (printed + word.length() > 72) {        out.print("\n    ");        printed=6;      }      out.print(word);      out.print(" ");      printed+=word.length() + 1;    }    out.println("");  }  out.println("");  System.exit(1);}  }
class C{  void selectType(Environment env,Context ctx,int tm){  if ((tm & TM_DOUBLE) != 0) {    type=Type.tDouble;  } else   if ((tm & TM_FLOAT) != 0) {    type=Type.tFloat;  } else   if ((tm & TM_LONG) != 0) {    type=Type.tLong;  } else {    type=Type.tInt;  }  right=convert(env,ctx,type,right);}  }
class C{  public int calcAvailability(AvailabilityRating ar,int rating,int ratingLevels,int year){  int retVal=ar.adjustForRating(rating,ratingLevels);  if (introYear == year) {    retVal-=2;  }  if (introYear == year + 1) {    retVal-=1;  }  if (retVal < 0) {    return 0;  }  return retVal;}  }
class C{  public T instantiateAnonymousSubclass(){  Class<T> proxyClass=giveDynamicSubclass(type);  return objenesis.newInstance(proxyClass);}  }
class C{  public static UiObjectMatcher withClass(Class klass){  UiSelector uiSelector=new UiSelector().className(klass);  BySelector bySelector=By.clazz(klass);  return new UiObjectMatcher(uiSelector,bySelector);}  }
class C{  public void push(int value) throws IOException {  pushValues.add(new Integer(value));  if (flashVersion < 5) {    flushPushValues();  }}  }
class C{  protected SkillRefImpl(){  super();}  }
class C{  protected void prepareRequestContextMetaDataUri() throws Exception {  context=createODataRequestContext(GET,createODataUriForMetaData(),entityDataModel);}  }
class C{  public static synchronized void removeClosable(Closable it){  for (int i=0; i < closableList.size(); i++) {    Object o=closableList.elementAt(i).get();    if ((o == it) || (o == null)) {      closableList.removeElementAt(i);      i--;    }  }}  }
class C{  private void heapifyDown(int cur){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    int best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best < twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur >= best) {      break;    }    twoheap[twopos]=best;    twopos=bestchild;  }  twoheap[twopos]=cur;}  }
class C{  public Distribution(Instances source) throws Exception {  m_perClassPerBag=new double[1][0];  m_perBag=new double[1];  totaL=0;  m_perClass=new double[source.numClasses()];  m_perClassPerBag[0]=new double[source.numClasses()];  Enumeration<Instance> enu=source.enumerateInstances();  while (enu.hasMoreElements()) {    add(0,enu.nextElement());  }}  }
class C{  public JsonPrimitive(Boolean bool){  setValue(bool);}  }
class C{  public void addCollectedWithTolerance(BigDecimal amount,BigDecimal tolerance){  BigDecimal collected=getAmtCollected() != null ? getAmtCollected() : BigDecimal.ZERO;  if (amount.compareTo(getAmount().subtract(collected).add(tolerance)) > 0) {    throw new ApplicationRuntimeException("Amount being added " + amount + " is greater than "+ getAmount()+ " - "+ collected+ " + tolerance "+ tolerance+ ", for demand detail "+ this.toString());  } else {    setAmtCollected(collected.add(amount));  }}  }
class C{  protected void showResult(P result){  locResult=result;  gotResult=true;  repaint();}  }
class C{  @Override public void addInterface(char[] buffer,int offset,int length){}  }
class C{  public static final List<Vec2D> splitIntoSegments(Vec2D a,Vec2D b,float stepLength,List<Vec2D> segments,boolean addFirst){  if (segments == null) {    segments=new ArrayList<Vec2D>();  }  if (addFirst) {    segments.add(a.copy());  }  float dist=a.distanceTo(b);  if (dist > stepLength) {    Vec2D pos=a.copy();    Vec2D step=b.sub(a).limit(stepLength);    while (dist > stepLength) {      pos.addSelf(step);      segments.add(pos.copy());      dist-=stepLength;    }  }  segments.add(b.copy());  return segments;}  }
class C{  @Override protected void finalize() throws Throwable {  mTexture=null;  super.finalize();}  }
class C{  public void removeCompressedThumbnail(){  mData.setCompressedThumbnail(null);}  }
class C{  public V valueAt(int index){  return (V)mArray[(index << 1) + 1];}  }
class C{  public static boolean substringMatchesNte(String source,int startIndex,String match){  if (startIndex + match.length() > source.length())   return false;  sourceStringLoop:   for (int i=0; i < match.length(); i++) {    char s=source.charAt(startIndex + i);    char m=match.charAt(i);    char[] nteChars=getNteChars(m);    if (nteChars != null) {      for (int j=0; j < nteChars.length; j++) {        if (s == nteChars[j])         continue sourceStringLoop;        if (Character.toLowerCase(s) == nteChars[j])         continue sourceStringLoop;      }      return false;    } else {      if (s == m)       continue sourceStringLoop;      if (Character.toLowerCase(s) == m)       continue sourceStringLoop;      return false;    }  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public AnimationBuilder interpolator(Interpolator interpolator){  viewAnimator.interpolator(interpolator);  return this;}  }
class C{  private void build(MethodPart read,MethodPart write) throws Exception {  Annotation label=read.getAnnotation();  String name=read.getName();  if (!write.getAnnotation().equals(label)) {    throw new MethodException("Annotations do not match for '%s' in %s",name,detail);  }  Class type=read.getType();  if (type != write.getType()) {    throw new MethodException("Method types do not match for %s in %s",name,type);  }  add(new MethodContact(read,write));}  }
class C{  private void initBuildIdAndDate(){  if (buildId != null) {    return;  }  buildId="-1";  buildDate="";  final InputStream in=FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream("/META-INF/MANIFEST.MF");  String str=null;  if (in != null) {    final Properties prop=PropertiesLoader.loadProperties(in);    str=prop.getProperty("Implementation-Version");  }  if (str == null) {    return;  }  final int sep=str.lastIndexOf("-");  buildId=str.substring(0,sep);  SimpleDateFormat inFormat=new SimpleDateFormat("yyyyMMddHHmmss");  SimpleDateFormat outFormat=new SimpleDateFormat("yyyy/MM/dd");  try {    buildDate=outFormat.format(inFormat.parse(str.substring(sep + 1)));  } catch (  ParseException e) {    logger.error(e.getMessage());  }}  }
class C{  public void sendToDrone(final ARDrone drone) throws IOException {switch (command) {case PLAY_ANIMATION:    drone.playAnimation(anim,duration);  break;case PLAY_LED:drone.playLED(led,frequency,duration);break;case CLEAR_EMERGENCY:drone.clearEmergencySignal();break;case TRIM:drone.trim();break;case TAKEOFF:drone.takeOff();break;case LAND:drone.land();break;case RESET:drone.clearEmergencySignal();drone.trim();break;case VIDEO_CYCLE:cycleVideoChannel(drone);break;case FRONTAL_CAM:drone.selectVideoChannel(ARDrone.VideoChannel.VERTICAL_ONLY);break;case BOTTOM_CAM:drone.selectVideoChannel(ARDrone.VideoChannel.HORIZONTAL_ONLY);break;case BOTTOM_CAM_SMALL:drone.selectVideoChannel(ARDrone.VideoChannel.VERTICAL_IN_HORIZONTAL);break;case FRONTAL_CAM_SMALL:drone.selectVideoChannel(ARDrone.VideoChannel.HORIZONTAL_IN_VERTICAL);break;case TAKE_SNAPSHOT:break;case RECORD_VIDEO:break;}}  }
class C{  public Error(){}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      boolean old=isRootPaneCheckingEnabled();      try {        setRootPaneCheckingEnabled(false);        ui.installUI(this);      }  finally {        setRootPaneCheckingEnabled(old);      }    }  }}  }
class C{  public static boolean isPrimary(ICompilationUnit cu){  return cu.getOwner() == null;}  }
class C{  public static void deleteImage(final IdocScanInterface ui){  FileVO ele=(FileVO)ui.getFileVO();  ele.getListImage().remove(ele.getImageSelectIndex());  ele.setImageSelectIndex(0);}  }
class C{  public void testAwaitAdvance1(){  final Phaser phaser=new Phaser(1);  assertEquals(0,phaser.arrive());  assertEquals(1,phaser.awaitAdvance(0));}  }
class C{  public static Method findDeclaredMethod(Class<?> cl,Method testMethod){  if (cl == null)   return null;  for (  Method method : cl.getDeclaredMethods()) {    if (isMatch(method,testMethod))     return method;  }  return null;}  }
class C{  public Log(){  super(Number.class,Number.class);}  }
class C{  public void sort(int columnIndex){  sort(columnIndex,true);}  }
class C{  public boolean isError(){  Object oo=get_Value(COLUMNNAME_IsError);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static <T>List<List<T>> partitionBySize(List<T> list,int size){  if (size < 1) {    throw new IllegalArgumentException("Size of sub-lists must be greater than zero");  }  List<List<T>> result=new ArrayList<List<T>>();  int index=0;  int elementsRemaining=list.size();  while (elementsRemaining > 0) {    int listSize=Math.min(elementsRemaining,size);    List<T> subList=list.subList(index,index + listSize);    result.add(subList);    elementsRemaining-=listSize;    index+=listSize;  }  if (elementsRemaining != 0) {    throw new IllegalStateException(String.format("Loop exited with %d elements still remaining",elementsRemaining));  }  return result;}  }
class C{  public MMovementLine(Properties ctx,int M_MovementLine_ID,String trxName){  super(ctx,M_MovementLine_ID,trxName);  if (M_MovementLine_ID == 0) {    setM_AttributeSetInstance_ID(0);    setMovementQty(Env.ZERO);    setTargetQty(Env.ZERO);    setScrappedQty(Env.ZERO);    setConfirmedQty(Env.ZERO);    setProcessed(false);  }}  }
class C{  public void addRow(ImpFormatRow row){  m_rows.add(row);}  }
class C{  void commit(int sessionId){  if (trace.isDebugEnabled()) {    trace.debug("log commit s: " + sessionId);  }  if (store.getDatabase().getPageStore() == null) {    return;  }  Data buffer=getBuffer();  buffer.writeByte((byte)COMMIT);  buffer.writeVarInt(sessionId);  write(buffer);  if (store.getDatabase().getFlushOnEachCommit()) {    flush();  }}  }
class C{  public Boolean isForgedTransmits(){  return forgedTransmits;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public InlineQueryResponse.InlineQueryResponseBuilder results(List<InlineQueryResult> results){  this.results=results;  return this;}  }
class C{  public static String toTypeName(Object o){  if (o == null)   return "null"; else   if (o instanceof String)   return "string"; else   if (o instanceof Boolean)   return "boolean"; else   if (o instanceof Number)   return "int"; else   if (o instanceof Array)   return "array"; else   if (o instanceof Component)   return "component"; else   if (o instanceof Struct)   return "struct"; else   if (o instanceof Query)   return "query"; else   if (o instanceof DateTime)   return "datetime"; else   if (o instanceof byte[])   return "binary"; else   if (o instanceof ObjectWrap) {    return toTypeName(((ObjectWrap)o).getEmbededObject(null));  }  Class clazz=o.getClass();  String className=clazz.getName();  if (className.startsWith("java.lang.")) {    return className.substring(10);  }  return toClassName(clazz);}  }
class C{  public boolean mouseReleased(MouseEvent e){  return false;}  }
class C{  public void saveModel(String fileName) throws IOException {  logger.info("Save Model to {} .....",fileName);  numFeatuerBit=SLParameters.HASHING_MASK;  ObjectOutputStream oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)));  oos.writeObject(this);  oos.close();  logger.info("Done!");}  }
class C{  public float distanceTo2(AnimatableValue other){  AnimatableTransformListValue o=(AnimatableTransformListValue)other;  if (transforms.isEmpty() || o.transforms.isEmpty()) {    return 0f;  }  AbstractSVGTransform t1=(AbstractSVGTransform)transforms.lastElement();  AbstractSVGTransform t2=(AbstractSVGTransform)o.transforms.lastElement();  short type1=t1.getType();  if (type1 != t2.getType()) {    return 0f;  }  SVGMatrix m1=t1.getMatrix();  SVGMatrix m2=t2.getMatrix();switch (type1) {case SVGTransform.SVG_TRANSFORM_TRANSLATE:    return Math.abs(m1.getF() - m2.getF());case SVGTransform.SVG_TRANSFORM_SCALE:  return Math.abs(m1.getD() - m2.getD());case SVGTransform.SVG_TRANSFORM_ROTATE:return Math.abs(t1.getX() - t2.getX());}return 0f;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.STATE___STATE_INTERNAL_1:    return ((InternalEList<?>)getStateInternal_1()).basicRemove(otherEnd,msgs);case UmplePackage.STATE___ANONYMOUS_STATE_11:  return ((InternalEList<?>)getAnonymous_state_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private boolean checkUrl(String uriToCheck){  try {    new URI(uriToCheck);  } catch (  URISyntaxException ex) {    return false;  }  return true;}  }
class C{  public java.lang.StringBuffer append(long l){  return null;}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearPrevFetchTime(){  fieldSetFlags()[3]=false;  return this;}  }
class C{  private HttpURLConnection makeConnection(DataSpec dataSpec) throws IOException {  URL url=new URL(dataSpec.uri.toString());  byte[] postBody=dataSpec.postBody;  long position=dataSpec.position;  long length=dataSpec.length;  boolean allowGzip=(dataSpec.flags & DataSpec.FLAG_ALLOW_GZIP) != 0;  if (!allowCrossProtocolRedirects) {    HttpURLConnection connection=makeConnection(url,postBody,position,length,allowGzip,true);    return connection;  }  int redirectCount=0;  while (redirectCount++ <= MAX_REDIRECTS) {    HttpURLConnection connection=makeConnection(url,postBody,position,length,allowGzip,false);    int responseCode=connection.getResponseCode();    if (responseCode == HttpURLConnection.HTTP_MULT_CHOICE || responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_SEE_OTHER || (postBody == null && (responseCode == 307 || responseCode == 308))) {      postBody=null;      String location=connection.getHeaderField("Location");      connection.disconnect();      url=handleRedirect(url,location);    } else {      return connection;    }  }  throw new NoRouteToHostException("Too many redirects: " + redirectCount);}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private HttpToHttp2ConnectionHandler makeHttp2ConnectionHandler(){  Http2Connection connection=new DefaultHttp2Connection(true);  InboundHttp2ToHttpAdapter inboundAdapter=new InboundHttp2ToHttpAdapterBuilder(connection).maxContentLength(this.responsePayloadSizeLimit).propagateSettings(false).build();  DelegatingDecompressorFrameListener frameListener=new DelegatingDecompressorFrameListener(connection,inboundAdapter);  Http2Settings settings=new Http2Settings();  settings.initialWindowSize(NettyChannelContext.INITIAL_HTTP2_WINDOW_SIZE);  HttpToHttp2ConnectionHandlerBuilder builder=new HttpToHttp2ConnectionHandlerBuilder().frameListener(frameListener).initialSettings(settings).connection(connection);  if (debugLogging) {    Http2FrameLogger frameLogger=new Http2FrameLogger(LogLevel.INFO,NettyHttpClientRequestInitializer.class);    builder.frameLogger(frameLogger);  }  HttpToHttp2ConnectionHandler connectionHandler=builder.build();  return connectionHandler;}  }
class C{  @Override public String toString(){  return Base62.fromBase10(value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.675 -0500",hash_original_method="D508FA29014931CB6CD29F8DFC756262",hash_generated_method="82DEBC56EC102C62B4D2895CE19E9638") public boolean rspIsInactive(Message response){  boolean retVal=response.arg1 == 1;  if (DBG)   log("rspIsInactive=" + retVal);  return retVal;}  }
class C{  public void clear(){  indexToEntry.clear();  keyToEntry.clear();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void registerScheme(ResourceSet resourceSet){  registerScheme(resourceSet,classLoader);}  }
class C{  OutputThread(PircBot bot,Queue outQueue){  _bot=bot;  _outQueue=outQueue;  this.setName(this.getClass() + "-Thread");}  }
class C{  public VLADBuilder(IndexReader reader,LireFeature lireFeature){  this.reader=reader;  this.lireFeature=lireFeature;}  }
class C{  private void validatePageNumber(int pageNumber) throws IOException {  int nextPageNumber=getNextPageNumber(_channel.size());  if ((pageNumber <= INVALID_PAGE_NUMBER) || (pageNumber >= nextPageNumber)) {    throw new IllegalStateException("invalid page number " + pageNumber);  }}  }
class C{  public Query like(int docNum) throws IOException {  Map<String,Map<String,Flt>> fieldTermFreq=retrieveTerms(docNum);  BooleanQuery query=new BooleanQuery();  for (  String fieldName : fieldTermFreq.keySet()) {    Map<String,Flt> words=fieldTermFreq.get(fieldName);    PriorityQueue<USField> queue=createQueue(fieldName,words);    buildQueryForField(fieldName,queue,query);  }  return query;}  }
class C{  public boolean writePaneChanges(){  if (log.isDebugEnabled()) {    log.debug("writePaneChanges starts");  }  prepWritePane(true);  boolean val=nextWrite();  if (log.isDebugEnabled()) {    log.debug("writePaneChanges returns " + val);  }  return val;}  }
class C{  public final TextBuilder append(CharSequence csq){  return (csq == null) ? append("null") : append(csq,0,csq.length());}  }
class C{  public MaximumSubscribersReachedException(){  super("Maximum subscriptions reached.");}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public SelectResults evaluateCollection(ExecutionContext context) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  if (this.collection != UNINITIALIZED && !this.cmpIteratorDefn.isDependentOnAnyIteratorOfScopeLessThanItsOwn(context) && this.scopeID != IndexCreationHelper.INDEX_QUERY_SCOPE_ID) {    return this.collection;  }  this.collection=this.cmpIteratorDefn.evaluateCollection(context,this);  if (this.collection == null) {    return null;  }  if (!this.elementType.equals(TypeUtils.OBJECT_TYPE)) {    this.collection.setElementType(elementType);  } else {    this.elementType=collection.getCollectionType().getElementType();  }  return this.collection;}  }
class C{  public void resetTimestamp(){  timestamp=0;}  }
class C{  public static void filterLine(URL self,Writer writer,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure predicate) throws IOException {  IOGroovyMethods.filterLine(newReader(self),writer,predicate);}  }
class C{  public static byte[] encodeBase64(byte[] binaryData,boolean isChunked){  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  int encodedDataLength=0;  int nbrChunks=0;  if (fewerThan24bits != 0) {    encodedDataLength=(numberTriplets + 1) * 4;  } else {    encodedDataLength=numberTriplets * 4;  }  if (isChunked) {    nbrChunks=(CHUNK_SEPARATOR.length == 0 ? 0 : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));    encodedDataLength+=nbrChunks * CHUNK_SEPARATOR.length;  }  encodedData=new byte[encodedDataLength];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  int nextSeparatorIndex=CHUNK_SIZE;  int chunksSoFar=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];    encodedIndex+=4;    if (isChunked) {      if (encodedIndex == nextSeparatorIndex) {        System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedIndex,CHUNK_SEPARATOR.length);        chunksSoFar++;        nextSeparatorIndex=(CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);        encodedIndex+=CHUNK_SEPARATOR.length;      }    }  }  dataIndex=i * 3;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  if (isChunked) {    if (chunksSoFar < nbrChunks) {      System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedDataLength - CHUNK_SEPARATOR.length,CHUNK_SEPARATOR.length);    }  }  return encodedData;}  }
class C{  public void prepare(){  checkNotClosed();  status=STATUS_PREPARED;  store.storeTransaction(this);}  }
class C{  public static String format(long[] a){  return (a == null) ? "null" : (a.length == 0) ? "" : formatTo(new StringBuilder(),a,", ").toString();}  }
class C{  private List<WorkFlowMatrixDetails> prepareWorkFlowResult(final List<WorkFlowMatrixDetails> matrixdetList){  for (  final WorkFlowMatrixDetails det : matrixdetList) {    det.setObjectTypeDisplay(getobjectTypebyName(det.getObjectType()).getDisplayName());    final List<WorkFlowMatrix> workFlowdet=getMatrixdetails(det);    List<WorkFlowMatrixDetails> detailsList=new LinkedList();    detailsList=prepareWorkFlowMatrixDetailsList(sortListbyActions(workFlowdet),detailsList,Boolean.TRUE);    det.setMatrixdetails(detailsList);  }  return matrixdetList;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.991 -0500",hash_original_method="BC4245492A96EB743D1DE4975B9A07C3",hash_generated_method="53F05455B3731AE5C218A16907CA0CAC") public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    e.getQueue().poll();    e.execute(r);  }}  }
class C{  private void buildDecorForPage1(SparkleViewPagerLayout parent,SparkleMotion sparkleMotion){  int windowWidth=ScreenConfig.getWindowSize(this)[0];  View view=LayoutInflater.from(parent.getContext()).inflate(R.layout.sparkle_page_1,parent,false);  Decor standDecor=new Decor.Builder(view).setPage(Page.pageRange(0,2)).withLayer().build();  TranslationAnimation standTranslationAnim=new TranslationAnimation(Page.singlePage(0),windowWidth,0,0,0,true);  sparkleMotion.animate(standTranslationAnim).on(standDecor);  View notes=LayoutInflater.from(parent.getContext()).inflate(R.layout.sparkle_page_1_notes,parent,false);  Decor notesDecor=new Decor.Builder(notes).setPage(Page.pageRange(0,2)).withLayer().build();  TranslationAnimation noteTranslationAnim=new TranslationAnimation(Page.singlePage(0),windowWidth,0,0,0,true);  noteTranslationAnim.setInterpolator(new AccelerateInterpolator());  sparkleMotion.animate(noteTranslationAnim).on(notesDecor);  int windowHeight=ScreenConfig.getWindowSize(this)[1];  TranslationAnimation slideDownAnim=new TranslationAnimation(Page.singlePage(1),0,0,0,windowHeight,true);  sparkleMotion.animate(slideDownAnim).on(standDecor,notesDecor);}  }
class C{  public MqttCallbackHandler(Context context,String clientHandle){  this.context=context;  this.clientHandle=clientHandle;}  }
class C{  public void print(String s){  writer.print(s);}  }
class C{  public void closeLock(long id){  Lock lock=lockMap.remove(id);  assert lock != null : "Failed to unregister lock: " + id;}  }
class C{  public static boolean isJavaVersionAtLeast(String expectedVersion){  String actualVersionDigits;  if (isAzulJVM()) {    actualVersionDigits=StringUtils.getDigitsOnly(System.getProperty("java.specification.version"));    int dotIdx=expectedVersion.indexOf('.');    if (dotIdx != -1) {      dotIdx=expectedVersion.indexOf('.',dotIdx + 1);      if (dotIdx != -1) {        expectedVersion=expectedVersion.substring(0,dotIdx);      }    }  } else {    actualVersionDigits=StringUtils.getDigitsOnly(System.getProperty("java.version"));  }  String expectedVersionDigits=StringUtils.padEnding(StringUtils.getDigitsOnly(expectedVersion),'0',actualVersionDigits.length());  try {    return (Long.parseLong(actualVersionDigits) >= Long.parseLong(expectedVersionDigits));  } catch (  NumberFormatException ignore) {    return false;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.825 -0500",hash_original_method="C380EF026EE3B754782A4E35FA9663AC",hash_generated_method="96D654C442956B5ACD941E2D99AEE102") public int countTestCases(){  return 1;}  }
class C{  ITypeBinding resolveArrayType(ITypeBinding typeBinding,int dimensions){  if (typeBinding instanceof RecoveredTypeBinding)   throw new IllegalArgumentException("Cannot be called on a recovered type binding");  ITypeBinding leafComponentType=typeBinding;  int actualDimensions=dimensions;  if (typeBinding.isArray()) {    leafComponentType=typeBinding.getElementType();    actualDimensions+=typeBinding.getDimensions();  }  org.eclipse.che.ide.ext.java.jdt.internal.compiler.lookup.TypeBinding leafTypeBinding=null;  if (leafComponentType.isPrimitive()) {    String name=leafComponentType.getBinaryName();switch (name.charAt(0)) {case 'I':      leafTypeBinding=org.eclipse.che.ide.ext.java.jdt.internal.compiler.lookup.TypeBinding.INT;    break;case 'B':  leafTypeBinding=org.eclipse.che.ide.ext.java.jdt.internal.compiler.lookup.TypeBinding.BYTE;break;case 'Z':leafTypeBinding=org.eclipse.che.ide.ext.java.jdt.internal.compiler.lookup.TypeBinding.BOOLEAN;break;case 'C':leafTypeBinding=org.eclipse.che.ide.ext.java.jdt.internal.compiler.lookup.TypeBinding.CHAR;break;case 'J':leafTypeBinding=org.eclipse.che.ide.ext.java.jdt.internal.compiler.lookup.TypeBinding.LONG;break;case 'S':leafTypeBinding=org.eclipse.che.ide.ext.java.jdt.internal.compiler.lookup.TypeBinding.SHORT;break;case 'D':leafTypeBinding=org.eclipse.che.ide.ext.java.jdt.internal.compiler.lookup.TypeBinding.DOUBLE;break;case 'F':leafTypeBinding=org.eclipse.che.ide.ext.java.jdt.internal.compiler.lookup.TypeBinding.FLOAT;break;case 'V':throw new IllegalArgumentException();}} else {if (!(leafComponentType instanceof TypeBinding)) return null;leafTypeBinding=((TypeBinding)leafComponentType).binding;}return this.getTypeBinding(lookupEnvironment().createArrayType(leafTypeBinding,actualDimensions));}  }
class C{  public void discardUpstreamSamples(int discardFromIndex){  totalBytesWritten=infoQueue.discardUpstreamSamples(discardFromIndex);  dropUpstreamFrom(totalBytesWritten);}  }
class C{  public PlayerSlot(final String name){  super(name,name);}  }
class C{  private boolean eqTest(Object obj1,Object obj2){  if (obj1 == obj2) {    return true;  }  return obj1 != null && obj1.equals(obj2);}  }
class C{  public void test_rangeQuery_staticPartitions_unbounded_1entry_2partitions_02() throws IOException {  final String name="testIndex";  final IndexMetadata metadata=new IndexMetadata(name,UUID.randomUUID());  fed.registerIndex(metadata,new byte[][]{new byte[]{},new byte[]{5}},new UUID[]{dataService0.getServiceUUID(),dataService1.getServiceUUID()});  IIndex ndx=fed.getIndex(name,ITx.UNISOLATED);  ndx.insert(new byte[]{5},new byte[]{5});{    final ITupleIterator itr=ndx.rangeIterator(null,null);    assertTrue("hasNext",itr.hasNext());    final ITuple tuple=itr.next();    assertEquals("getKey()",new byte[]{5},tuple.getKey());    assertEquals("getValue()",new byte[]{5},tuple.getValue());    assertFalse("hasNext",itr.hasNext());  }}  }
class C{  public String clusterSubTypeTipText(){  return "The sub-type of cluster to use.";}  }
class C{  public Vector2f negateLocal(){  x=-x;  y=-y;  return this;}  }
class C{  public Boolean isChapInherited(){  return chapInherited;}  }
class C{  public void testDispose_ThrottleListener(){  ThrottleListener l=null;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.dispose(l);}  }
class C{  public static MethodInvocationStream create(String className,String methodName,String optStreamName){  return new MethodInvocationStream(className,methodName,optStreamName);}  }
class C{  protected static final void checkArguments(final SQLProvider provider,final CTagManager viewTagManager){  Preconditions.checkNotNull(provider,"IE00639: Provider argument can not be null");  Preconditions.checkNotNull(viewTagManager,"IE00640: Tag manager argument can not be null");  Preconditions.checkArgument(viewTagManager.inSameDatabase(provider),"IE00641: Tag manager is not part of this database");}  }
class C{  @Override public void visitVarInsn(int opcode,int var){  check(var >= 0);  if ((ILOAD <= opcode) && (opcode <= ALOAD) || (ISTORE <= opcode) && (opcode <= ASTORE)) {    stack.pushInt(var);    mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],I_V);  } else {    mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],V_V);  }  super.visitVarInsn(opcode,var);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public static boolean isHgRoot(@Nullable VirtualFile dir){  return dir != null && dir.findChild(DOT_HG) != null;}  }
class C{  private IntegerConstant parseIntegerConstant(int index) throws IOException {  int value=readInt();  return new IntegerConstant(_class.getConstantPool(),index,value);}  }
class C{  private void createProductSessionAndResolve(long subscriptionTKey,String sessionId) throws Exception {  sessionMgmt.createServiceSession(subscriptionTKey,sessionId,"someToken");  sessionMgmt.resolveUserToken(subscriptionTKey,sessionId,"someToken");}  }
class C{  @Override public int read(byte[] buffer,int offset,int length) throws IOException {  long start=System.currentTimeMillis();  int read;  while (true) {    logger.log(Level.FINER,"Read Recv");    try {      read=pseudoTcp.recv(buffer,offset,length);      if (logger.isLoggable(Level.FINER)) {        logger.log(Level.FINER,"Read Recv read count: " + read);      }      if (read > 0) {        return read;      }      logger.log(Level.FINER,"Read wait for data available");      if (readTimeout > 0) {        long elapsed=System.currentTimeMillis() - start;        long left=readTimeout - elapsed;        if (left <= 0) {          IOException exc=new IOException("Read operation timeout");          pseudoTcp.closedown(exc);          throw exc;        }synchronized (read_notify) {          if (pseudoTcp.getAvailable() == 0) {            read_notify.wait(left);          }        }      } else {synchronized (read_notify) {          if (pseudoTcp.getAvailable() == 0) {            read_notify.wait();          }        }      }      if (logger.isLoggable(Level.FINER)) {        logger.log(Level.FINER,"Read notified: " + pseudoTcp.getAvailable());      }      if (exception != null) {        throw exception;      }    } catch (    InterruptedException ex) {      if (exception != null) {        throw new IOException("Read aborted",exception);      } else {        throw new IOException("Read aborted");      }    }  }}  }
class C{  private static Set<String> createCategoriesSet(Set<String> categories){  Set<String> result=new HashSet<>();  for (  String cat : categories) {    result.add(StringUtil.toLowerCase(cat));  }  return result;}  }
class C{  public static synchronized String[] bootstrapList(List<Peer> peers){  List<String> l=new ArrayList<String>();  for (  Peer p : peers)   l.add(p.get(Peer.Schema.address));  return l.toArray(new String[l.size()]);}  }
class C{  public static double[] newVector(int m,double val){  double[] res=new double[m];  for (int i=0; i < m; ++i) {    res[i]=val;  }  return (res);}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  @Override public void testSendReceive() throws Exception {  super.testSendReceive();  messages.clear();  Destination consumerDestination=consumeSession.createQueue("FOO.BAR.HUMBUG2");  LOG.info("Created  consumer destination: " + consumerDestination + " of type: "+ consumerDestination.getClass());  MessageConsumer consumer=null;  if (durable) {    LOG.info("Creating durable consumer");    consumer=consumeSession.createDurableSubscriber((Topic)consumerDestination,getName());  } else {    consumer=consumeSession.createConsumer(consumerDestination);  }  consumer.setMessageListener(this);  assertMessagesAreReceived();  LOG.info("" + data.length + " messages(s) received, closing down connections");}  }
class C{  public DrawFigureFactory(){  for (  Object[] o : classTagArray) {    addStorableClass((String)o[1],(Class)o[0]);  }  for (  Object[] o : enumTagArray) {    addEnumClass((String)o[1],(Class)o[0]);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.573 -0500",hash_original_method="B3FA7CC1597D63764316082CF6F63FFB",hash_generated_method="E9BDD5CAF80A503C8D79391D18792CDB") public boolean decodeLongInteger(int startIndex){  int lengthMultiOctet=wspData[startIndex] & 0xff;  if (lengthMultiOctet > WAP_PDU_SHORT_LENGTH_MAX) {    return false;  }  unsigned32bit=0;  for (int i=1; i <= lengthMultiOctet; i++) {    unsigned32bit=(unsigned32bit << 8) | (wspData[startIndex + i] & 0xff);  }  dataLength=1 + lengthMultiOctet;  return true;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (exclLowerBound: ");  result.append(exclLowerBound);  result.append(", exclUpperBound: ");  result.append(exclUpperBound);  result.append(')');  return result.toString();}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  TextView syncRxSaveTV=(TextView)this.findViewById(R.id.rx_sync_save_tv);  syncRxSaveTV.setText(OBJECT_IMAGE_URL);  this.syncRxIV=(ImageView)this.findViewById(R.id.rx_sync_iv);  this.syncRxJustTV=(TextView)this.findViewById(R.id.rx_sync_just_tv);  this.syncRxFromTV=(TextView)this.findViewById(R.id.rx_sync_from_tv);  this.syncRxSaveBT=(Button)this.findViewById(R.id.rx_sync_save_bt);  this.dialog=new CustomProgressBarDialog(this);}  }
class C{  public String locatorTailLog(File directory){  File logFile=new File(directory,DistributionLocator.DEFAULT_LOG_FILE);  if (!logFile.exists()) {    return LocalizedStrings.SystemAdmin_LOG_FILE_0_DOES_NOT_EXIST.toLocalizedString(logFile);  }  try {    return TailLogResponse.tailSystemLog(logFile);  } catch (  IOException ex) {    StringWriter sw=new StringWriter();    PrintWriter pw=new PrintWriter(sw,true);    sw.write(LocalizedStrings.SystemAdmin_AN_IOEXCEPTION_WAS_THROWN_WHILE_TAILING_0.toLocalizedString(logFile));    ex.printStackTrace(pw);    pw.flush();    return sw.toString();  }}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public void sort(){  QuickSort.sort(new QuickSortProxy());}  }
class C{  private void initListeners(){  listViewProperty().addListener(null);}  }
class C{  public MAttachmentEntry(String name,byte[] data){  this(name,data,0);}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(8).putLong(get(rowNumber)).array();}  }
class C{  public RecoverPointCGResponse addReplicationSetsToCG(CGRequestParams request,boolean metropoint,boolean attachAsClean) throws RecoverPointException {  if (null == _endpoint.toASCIIString()) {    throw RecoverPointException.exceptions.noRecoverPointEndpoint();  }  RecoverPointCGResponse response=new RecoverPointCGResponse();  List<ConsistencyGroupCopySettings> groupCopySettings=null;  ConsistencyGroupUID cgUID=null;  try {    List<ConsistencyGroupUID> allCgs=functionalAPI.getAllConsistencyGroups();    for (    ConsistencyGroupUID cg : allCgs) {      ConsistencyGroupSettings settings=functionalAPI.getGroupSettings(cg);      if (settings.getName().toString().equalsIgnoreCase(request.getCgName())) {        cgUID=settings.getGroupUID();        groupCopySettings=settings.getGroupCopiesSettings();        break;      }    }    if (cgUID == null) {      throw RecoverPointException.exceptions.failedToAddReplicationSetCgDoesNotExist(request.getCgName());    }    response.setCgId(cgUID.getId());    Map<String,ClusterUID> clusterIdCache=new HashMap<String,ClusterUID>();    List<ClusterUID> prodSites=new ArrayList<ClusterUID>();    Map<Long,ConsistencyGroupCopyUID> productionCopiesUID=new HashMap<Long,ConsistencyGroupCopyUID>();    Map<Long,ConsistencyGroupCopyUID> nonProductionCopiesUID=new HashMap<Long,ConsistencyGroupCopyUID>();    List<ConsistencyGroupCopyUID> productionCopiesUIDs=functionalAPI.getGroupSettings(cgUID).getProductionCopiesUIDs();    for (    ConsistencyGroupCopySettings copySettings : groupCopySettings) {      GlobalCopyUID globalCopyUID=copySettings.getCopyUID().getGlobalCopyUID();      ConsistencyGroupCopyUID copyUID=copySettings.getCopyUID();      if (RecoverPointUtils.isProductionCopy(copyUID,productionCopiesUIDs)) {        productionCopiesUID.put(Long.valueOf(globalCopyUID.getClusterUID().getId()),copySettings.getCopyUID());        prodSites.add(globalCopyUID.getClusterUID());      } else {        nonProductionCopiesUID.put(Long.valueOf(globalCopyUID.getClusterUID().getId()),copySettings.getCopyUID());      }    }    StringBuffer sb=new StringBuffer();    for (    ClusterUID prodSite : prodSites) {      sb.append(prodSite.getId());      sb.append(" ");    }    logger.info("RecoverPointClient: Adding replication set(s) to consistency group " + request.getCgName() + " for endpoint: "+ _endpoint.toASCIIString()+ " and production sites: "+ sb.toString());    ConsistencyGroupSettingsChangesParam cgSettingsParam=configureCGSettingsChangeParams(request,cgUID,prodSites,clusterIdCache,productionCopiesUID,nonProductionCopiesUID,attachAsClean);    logger.info("Adding journals and rsets for CG " + request.getCgName());    functionalAPI.setConsistencyGroupSettings(cgSettingsParam);    waitForRpOperation();    RecoverPointImageManagementUtils rpiMgmt=new RecoverPointImageManagementUtils();    logger.info("Waiting for links to become active for CG " + request.getCgName());    rpiMgmt.waitForCGLinkState(functionalAPI,cgUID,RecoverPointImageManagementUtils.getPipeActiveState(functionalAPI,cgUID),PipeState.PAUSED);    logger.info(String.format("Replication sets have been added to consistency group %s.",request.getCgName()));    response.setReturnCode(RecoverPointReturnCode.SUCCESS);    return response;  } catch (  Exception e) {    logger.info("Failed to add replication set(s) to CG");    throw RecoverPointException.exceptions.failedToAddReplicationSetToConsistencyGroup(request.getCgName(),getCause(e));  }}  }
class C{  @Override public synchronized void acceptInstance(InstanceEvent e){  m_busy=true;  if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {    m_throughput=new StreamThroughput(statusMessagePrefix());    Instances structure=e.getStructure();    m_mr=new SubstringReplacerRules(m_matchReplaceDetails,structure,statusMessagePrefix(),m_log,m_env);    if (!e.m_formatNotificationOnly) {      if (m_log != null) {        m_log.statusMessage(statusMessagePrefix() + "Processing stream...");      }    }    m_ie.setStructure(structure);    m_ie.m_formatNotificationOnly=e.m_formatNotificationOnly;    notifyInstanceListeners(m_ie);  } else {    Instance inst=e.getInstance();    if (inst != null) {      m_throughput.updateStart();      m_mr.applyRules(inst);      m_throughput.updateEnd(m_log);    }    m_ie.setInstance(inst);    m_ie.setStatus(e.getStatus());    notifyInstanceListeners(m_ie);    if (e.getStatus() == InstanceEvent.BATCH_FINISHED || inst == null) {      m_throughput.finished(m_log);    }  }  m_busy=false;}  }
class C{  public static CharSequence concat(CharSequence left,CharSequence right){  if (left instanceof Appendable) {    try {      ((Appendable)left).append(right);      return left;    } catch (    IOException e) {    }  }  return new StringBuilder(left).append(right);}  }
class C{  public static int footerStartAbsolute(BinaryPositionReadable in,int start){  return footerStartRelative(in,start) + start;}  }
class C{  public BadPartitioningException(String message){  super(message);}  }
class C{  public void increment(double seconds){  this.second+=seconds;  while (this.second >= 60.0) {    this.second-=60.0;    this.minute+=1;  }  while (this.minute >= 60) {    this.minute-=60;    this.hour+=1;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node createdNode;  Node lchild;  String childName;  Node appendedChild;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  createdNode=doc.createElement("newChild");  appendedChild=employeeNode.appendChild(createdNode);  lchild=employeeNode.getLastChild();  childName=lchild.getNodeName();  assertEquals("nodeAppendChildAssert1","newChild",childName);}  }
class C{  public long position(final Blob pattern,final long start) throws SQLException {  return position(pattern.getBytes(1,(int)pattern.length()),start);}  }
class C{  public NicknameEntry retrieveNickname(String nickname) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving nickname '" + nickname + "'.");  URL retrieveUrl=new URL(domainUrlBase + "nickname/" + SERVICE_VERSION+ "/"+ nickname);  return nicknameService.getEntry(retrieveUrl,NicknameEntry.class);}  }
class C{  public long itrealvalue(){  return Long.parseLong(fields[20]);}  }
class C{  @SuppressWarnings("unchecked") public static List<LiveRecord> parseGetLiveChannelHistory(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    List<LiveRecord> liveRecords=new ArrayList<LiveRecord>();    List<Element> recordElements=root.getChildren("LiveRecord");    for (    Element recordElem : recordElements) {      LiveRecord record=new LiveRecord();      record.setStartDate(DateUtil.parseIso8601Date(recordElem.getChildText("StartTime")));      record.setEndDate(DateUtil.parseIso8601Date(recordElem.getChildText("EndTime")));      record.setRemoteAddress(recordElem.getChildText("RemoteAddr"));      liveRecords.add(record);    }    return liveRecords;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public static MouseMotionListener add(MouseMotionListener a,MouseMotionListener b){  return (MouseMotionListener)addInternal(a,b);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"popfw");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a popfw instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final String result=environment.getNextVariableString();  Helpers.generateLoadFromStack(environment,offset,OperandSize.WORD,result,instructions);  offset=baseOffset + instructions.size();  Helpers.shiftValueIntoFlags(environment,offset,result,OperandSize.WORD,instructions);}  }
class C{  public String subscribe(String remoteName,String sdpOffer,String participantId) throws RoomException {  log.debug("Request [SUBSCRIBE] remoteParticipant={} sdpOffer={} ({})",remoteName,sdpOffer,participantId);  Participant participant=getParticipant(participantId);  String name=participant.getName();  Room room=participant.getRoom();  Participant senderParticipant=room.getParticipantByName(remoteName);  if (senderParticipant == null) {    log.warn("PARTICIPANT {}: Requesting to recv media from user {} " + "in room {} but user could not be found",name,remoteName,room.getName());    throw new RoomException(Code.USER_NOT_FOUND_ERROR_CODE,"User '" + remoteName + " not found in room '"+ room.getName()+ "'");  }  if (!senderParticipant.isStreaming()) {    log.warn("PARTICIPANT {}: Requesting to recv media from user {} " + "in room {} but user is not streaming media",name,remoteName,room.getName());    throw new RoomException(Code.USER_NOT_STREAMING_ERROR_CODE,"User '" + remoteName + " not streaming media in room '"+ room.getName()+ "'");  }  String sdpAnswer=participant.receiveMediaFrom(senderParticipant,sdpOffer);  if (sdpAnswer == null) {    throw new RoomException(Code.MEDIA_SDP_ERROR_CODE,"Unable to generate SDP answer when subscribing '" + name + "' to '"+ remoteName+ "'");  }  return sdpAnswer;}  }
class C{  public static Pair<Reader,String> guessCharset(InputStream in) throws IOException {  ByteArrayOutputStream buffered=new ByteArrayOutputStream();  byte[] buf=new byte[1024];  boolean isAscii=true;  int len=in.read(buf);  if (len <= 0) {    return Pair.pair((Reader)new StringReader(""),UTF8);  }  String charset=findCharset(buf,len);  if (charset != null) {    buffered.write(buf,0,len);  } else   if (hasUtf8BOM(buf,len)) {    charset=UTF8;    buffered.write(buf,3,len - 3);  } else   if (hasUtf32BEBOM(buf,len)) {    charset=UTF32BE;    buffered.write(buf,4,len - 4);  } else   if (hasUtf32LEBOM(buf,len)) {    charset=UTF32LE;    buffered.write(buf,4,len - 4);  } else   if (hasUtf16BEBOM(buf,len)) {    charset=UTF16BE;    buffered.write(buf,2,len - 2);  } else   if (hasUtf16LEBOM(buf,len)) {    charset=UTF16LE;    buffered.write(buf,2,len - 2);  } else   if (hasUtf7BOM(buf,len)) {    charset=UTF7;    buffered.write(buf,4,len - 4);  } else   if (hasUtf1BOM(buf,len)) {    charset=UTF1;    buffered.write(buf,3,len - 3);  } else {    nsDetector det=new nsDetector(nsPSMDetector.ALL);    Observer observer=new Observer();    det.Init(observer);    do {      buffered.write(buf,0,len);      if (isAscii) {        isAscii=det.isAscii(buf,len);      }      if (!isAscii) {        if (det.DoIt(buf,len,false)) {          break;        }      }    } while ((len=in.read(buf)) > 0);    det.DataEnd();    charset=observer.charset;  }  if (charset != null) {    charset=supportedCharsetName(charset);  }  if (charset == null) {    charset=UTF8;  }  return Pair.pair(joinStreamsWithCharset(buffered.toByteArray(),in,charset),charset);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.617 -0500",hash_original_method="9121421793EC5D37F14A312213FF0274",hash_generated_method="0E38B803B5F7EA7FC3B7A952B8C48B78") public String toString(){  return this.encode();}  }
class C{  public synchronized void panAbs(double dx,double dy){  damageReport();  m_transform.translate(dx,dy);  try {    m_itransform=m_transform.createInverse();  } catch (  Exception e) {  }}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceDescription createInstance(ProvisioningSettings settings) throws APPlatformException {  PropertyHandler paramHandler=new PropertyHandler(settings);  paramHandler.setState(Status.CREATION_REQUESTED);  InstanceDescription id=new InstanceDescription();  id.setInstanceId("Instance_" + System.currentTimeMillis());  id.setChangedParameters(settings.getParameters());  return id;}  }
class C{  public byte[] bytes(){  return bytes;}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public void clearCache(){synchronized (mDiskCacheLock) {    mDiskCacheStarting=true;    mDiskCacheReady=false;    if (mDiskLruCache != null && !mDiskLruCache.isClosed()) {      try {        mDiskLruCache.delete();        if (DEBUG) {          Log.d(TAG,"Disk cache cleared");        }      } catch (      IOException e) {        e.printStackTrace();        Log.e(TAG,"clearCache - " + e);      }      mDiskLruCache=null;      initDiskCache();    }  }}  }
class C{  public void saveAsPDF(File file) throws IOException, TranscoderException, ClassNotFoundException {  try {    Object t=Class.forName("org.apache.fop.svg.PDFTranscoder").newInstance();    transcode(file,(Transcoder)t);  } catch (  InstantiationException|IllegalAccessException e) {    throw new ClassNotFoundException("Could not instantiate PDF transcoder - is Apache FOP installed?",e);  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @Deprecated public boolean isModifyAcceptEncodingHeader(){  return isRemoveUnsupportedEncodings();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static Instances makeOutcomeClassesCompatible(Instances trainData,Instances testData,boolean multilabel) throws Exception {  Instances compTestData=null;  if (!multilabel) {    Enumeration trainOutcomeValues=trainData.classAttribute().enumerateValues();    Enumeration testOutcomeValues=testData.classAttribute().enumerateValues();    ArrayList trainLabels=Collections.list(trainOutcomeValues);    ArrayList testLabels=Collections.list(testOutcomeValues);    Add addFilter=new Add();    addFilter.setNominalLabels(StringUtils.join(trainLabels,','));    addFilter.setAttributeName(Constants.CLASS_ATTRIBUTE_NAME + COMPATIBLE_OUTCOME_CLASS);    addFilter.setInputFormat(testData);    testData=Filter.useFilter(testData,addFilter);    compTestData=new Instances(testData,testData.numInstances());    for (int i=0; i < testData.numInstances(); i++) {      weka.core.Instance instance=testData.instance(i);      String label=(String)testLabels.get((int)instance.value(testData.classAttribute()));      if (trainLabels.indexOf(label) != -1) {        instance.setValue(testData.attribute(Constants.CLASS_ATTRIBUTE_NAME + COMPATIBLE_OUTCOME_CLASS),label);      } else {        instance.setMissing(testData.classIndex());      }      compTestData.add(instance);    }    Remove remove=new Remove();    remove.setAttributeIndices(Integer.toString(compTestData.attribute(Constants.CLASS_ATTRIBUTE_NAME).index() + 1));    remove.setInvertSelection(false);    remove.setInputFormat(compTestData);    compTestData=Filter.useFilter(compTestData,remove);    compTestData.setClass(compTestData.attribute(Constants.CLASS_ATTRIBUTE_NAME + COMPATIBLE_OUTCOME_CLASS));  } else {    int numTrainLabels=trainData.classIndex();    int numTestLabels=testData.classIndex();    ArrayList<String> trainLabels=getLabels(trainData);    Add filter=new Add();    for (int i=0; i < numTrainLabels; i++) {      filter.setAttributeIndex(new Integer(numTestLabels + i + 1).toString());      filter.setNominalLabels("0,1");      filter.setAttributeName(trainData.attribute(i).name() + COMPATIBLE_OUTCOME_CLASS);      filter.setInputFormat(testData);      testData=Filter.useFilter(testData,filter);    }    compTestData=new Instances(testData,testData.numInstances());    for (int i=0; i < testData.numInstances(); i++) {      weka.core.Instance instance=testData.instance(i);      for (int j=0; j < numTrainLabels; j++) {        instance.setValue(j + numTestLabels,0.);      }      for (int j=0; j < numTestLabels; j++) {        if (trainLabels.indexOf(instance.attribute(j).name()) != -1) {          int index=trainLabels.indexOf(instance.attribute(j).name());          instance.setValue(index + numTestLabels,instance.value(j));        }      }      compTestData.add(instance);    }    for (int i=0; i < numTestLabels; i++) {      Remove remove=new Remove();      remove.setAttributeIndices("1");      remove.setInvertSelection(false);      remove.setInputFormat(compTestData);      compTestData=Filter.useFilter(compTestData,remove);    }    String relationTag=compTestData.relationName();    compTestData.setRelationName(relationTag.substring(0,relationTag.indexOf("-C") + 2) + " " + numTrainLabels+ " ");    compTestData.setClassIndex(numTrainLabels);  }  return compTestData;}  }
class C{  public ShareToMessengerParams build(){  return new ShareToMessengerParams(this);}  }
class C{  protected void showAlertDialog(@Nullable String title,@Nullable String message,@Nullable DialogInterface.OnClickListener onPositiveButtonClickListener,@NonNull String positiveText,@Nullable DialogInterface.OnClickListener onNegativeButtonClickListener,@NonNull String negativeText){  AlertDialog.Builder builder=new AlertDialog.Builder(this);  builder.setTitle(title);  builder.setMessage(message);  builder.setPositiveButton(positiveText,onPositiveButtonClickListener);  builder.setNegativeButton(negativeText,onNegativeButtonClickListener);  mAlertDialog=builder.show();}  }
class C{  public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){  openFileChooser(uploadMsg,acceptType);}  }
class C{  private static String convertFieldValueToString(final JBBPAbstractArrayField<?> field){  final StringBuilder result;  if (field instanceof JBBPFieldArrayBit) {    final JBBPFieldArrayBit array=(JBBPFieldArrayBit)field;    result=new StringBuilder(array.size());    for (    final byte b : array.getArray()) {      result.append((char)(b & 0xFF));    }  } else   if (field instanceof JBBPFieldArrayByte) {    final JBBPFieldArrayByte array=(JBBPFieldArrayByte)field;    result=new StringBuilder(array.size());    for (    final byte b : array.getArray()) {      result.append((char)(b & 0xFF));    }  } else   if (field instanceof JBBPFieldArrayUByte) {    final JBBPFieldArrayUByte array=(JBBPFieldArrayUByte)field;    result=new StringBuilder(array.size());    for (    final byte b : array.getArray()) {      result.append((char)(b & 0xFF));    }  } else   if (field instanceof JBBPFieldArrayShort) {    final JBBPFieldArrayShort array=(JBBPFieldArrayShort)field;    result=new StringBuilder(array.size());    for (    final short b : array.getArray()) {      result.append((char)b);    }  } else   if (field instanceof JBBPFieldArrayUShort) {    final JBBPFieldArrayUShort array=(JBBPFieldArrayUShort)field;    result=new StringBuilder(array.size());    for (    final short b : array.getArray()) {      result.append((char)b);    }  } else {    result=null;  }  return result == null ? null : result.toString();}  }
class C{  public void selectByBaseType(final BaseType baseType){  final int index=filteredTypes.indexOf(baseType);  if (index != -1) {    setSelectedItem(baseType);  }}  }
class C{  public void addQueryExecuteListener(QueryExecuteListener l){  m_QueryPanel.addQueryExecuteListener(l);}  }
class C{  @Override public void select(int start,int end){  super.select(start,end);}  }
class C{  private void passAttempt(Team offense,PlayerWR selWR,int[] selWRStats,int yardsGain){  offense.getQB(0).statsPassAtt++;  selWR.statsTargets++;  if (gamePoss) {    homeYards+=yardsGain;    HomeQBStats[4]+=yardsGain;    HomeQBStats[1]++;    selWRStats[2]+=yardsGain;    selWRStats[1]++;  } else {    awayYards+=yardsGain;    AwayQBStats[4]+=yardsGain;    AwayQBStats[1]++;    selWRStats[2]+=yardsGain;    selWRStats[1]++;  }}  }
class C{  int update(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  return cipher.update(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public PacketExtension parseExtension(XmlPullParser parser) throws Exception {  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      if (parser.getName().equals("event")) {      } else       if (parser.getName().equals("items")) {        String node=parser.getAttributeValue("","node");        PacketExtensionProvider nodeParser=nodeParsers.get(node);        if (nodeParser != null) {          pepItem=nodeParser.parseExtension(parser);        }      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("event")) {        done=true;      }    }  }  return pepItem;}  }
class C{  public Vertex parseState(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  List<String> comments=null;  Vertex state=parseElement(stream,elements,debug,network);  stream.skipWhitespace();  ensureNext('{',stream);  stream.skipWhitespace();  String element=stream.peekWord();  while (!("}".equals(element))) {    if (element == null) {      throw new SelfParseException("Unexpected end of state, missing '}'",stream);    }    Vertex vertex=state;    element=element.toLowerCase();    if (element.equals(CASE)) {      vertex=parseCase(stream,elements,debug,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);    } else     if (element.equals(PATTERN)) {      vertex=parsePattern(stream,elements,debug,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);    } else     if (element.equals(STATE)) {      vertex=parseState(stream,elements,debug,network);    } else     if (element.equals(VAR) || element.equals(VARIABLE)) {      vertex=parseVariable(stream,elements,debug,network);    } else     if (element.equals(QUOTIENT) || element.equals(ANSWER)) {      parseQuotient(state,stream,elements,debug,network);    } else     if (element.equals(EQUATION) || element.equals(FUNCTION)) {      vertex=parseEquation(stream,elements,debug,network);    } else     if (element.equals(DO)) {      vertex=network.createInstance(Primitive.DO);      Vertex equation=parseOperator(stream,elements,debug,network);      vertex.addRelationship(Primitive.DO,equation,Integer.MAX_VALUE);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      ensureNext(';',stream);    } else     if (element.equals(GOTO)) {      vertex=parseGoto(stream,elements,debug,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      ensureNext(';',stream);    } else     if (element.equals(PUSH)) {      vertex=parsePush(stream,elements,debug,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      ensureNext(';',stream);    } else     if (element.equals(RETURN)) {      vertex=parseReturn(stream,elements,debug,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      ensureNext(';',stream);    } else     if (element.equals("/")) {      comments=getComments(stream);      if (comments.isEmpty()) {        throw new SelfParseException("Unknown element: " + element,stream);      }      vertex=null;    } else {      throw new SelfParseException("Unknown element: " + element,stream);    }    if (debug && (comments != null) && (vertex != null)) {      for (      String comment : comments) {        vertex.addRelationship(Primitive.COMMENT,network.createVertex(comment),Integer.MAX_VALUE);      }      comments=null;    }    element=stream.peekWord();  }  ensureNext('}',stream);  return state;}  }
class C{  public SnapshotException(String message){  super(message);}  }
class C{  public String convertParameterTypesToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static long[] ensureCapacity(long[] array,int minCapacity){  int oldCapacity=array.length;  long[] newArray;  if (minCapacity > oldCapacity) {    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    newArray=new long[newCapacity];    System.arraycopy(array,0,newArray,0,oldCapacity);  } else {    newArray=array;  }  return newArray;}  }
class C{  public void testRedeployContinuousMode() throws Exception {  depMode=DeploymentMode.CONTINUOUS;  processTest(true,false);}  }
class C{  public void resetCursor(){  if (this.map != null)   map.setCursor(fallbackMapBeanCursor);}  }
class C{  public CChildTagsModel(final IDatabase database,final ITreeNode<CTag> tagTreeNode){  m_tagTreeNode=Preconditions.checkNotNull(tagTreeNode,"IE01996: Tag argument can't be null");  m_database=Preconditions.checkNotNull(database,"IE01997: Database argument can't be null");  m_database.getContent().getViewTagManager().addListener(m_tagManagerListener);  m_tagTreeNode.getObject().addListener(m_tagListener);}  }
class C{  private void loadAgentMappings(){  log.info("|-Loading the existing Configuration interface agent mappings..");  AgentMappings agentMappings;  Path path=pathResolver.getAgentMappingFilePath();  if (Files.notExists(path)) {    log.info("||-The agent mappings file does not exists. Creating default mapping.");    agentMappings=new AgentMappings(Collections.<AgentMapping>emptyList());    if (MapUtils.isNotEmpty(existingEnvironments)) {      Environment environment=existingEnvironments.values().iterator().next();      if (null != environment) {        AgentMapping mapping=new AgentMapping("*","*");        mapping.setEnvironmentId(environment.getId());        Collection<AgentMapping> mappings=new ArrayList<>();        mappings.add(mapping);        agentMappings.setMappings(mappings);      }    }  } else {    try {      agentMappings=transformator.unmarshall(path,pathResolver.getSchemaPath(),AgentMappings.class);    } catch (    JAXBException|IOException|SAXException e) {      agentMappings=new AgentMappings(Collections.<AgentMapping>emptyList());      log.error("Error loading Configuration interface agent mappings file. File path: " + path.toString() + ".",e);    }  }  agentMappingsReference.set(agentMappings);  if (checkEnvironments(agentMappings)) {    try {      saveAgentMapping(agentMappings);      log.info("Agent mappings configuration is auto-updated as it was referencing the non-existing environment(s).");    } catch (    JAXBException|IOException e) {      log.error("Error save Configuration interface agent mappings file. File path: " + path.toString() + ".",e);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private iTunesMediator(){  if (OSUtils.isWindows()) {    createiTunesJavaScript(JS_IMPORT_SCRIPT_NAME);    createiTunesJavaScript(JS_REMOVE_PLAYLIST_SCRIPT_NAME);  }}  }
class C{  private void init(int textMode){  if (cutAction == null) {    createPopupMenuActions();  }  undoManager=new RUndoManager(this);  getDocument().addUndoableEditListener(undoManager);  Color markAllHighlightColor=getDefaultMarkAllHighlightColor();  markAllHighlightPainter=new ChangeableHighlightPainter(markAllHighlightColor);  setMarkAllHighlightColor(markAllHighlightColor);  carets=new int[2];  setCaretStyle(INSERT_MODE,ConfigurableCaret.THICK_VERTICAL_LINE_STYLE);  setCaretStyle(OVERWRITE_MODE,ConfigurableCaret.BLOCK_STYLE);  setDragEnabled(true);  setTextMode(textMode);  fixCtrlH();}  }
class C{  public boolean isPOEExists(final String id,final Date controlTime){  List<Date> dates=poe.get(id);  if (dates != null) {    for (    Date date : dates) {      if (date.compareTo(controlTime) < 0) {        return true;      }    }  }  return false;}  }
class C{  public static byte[] zipBytes(byte[] input) throws IOException {  return zipBytes(input,DFLT_BUFFER_SIZE);}  }
class C{  static void parseClass(String clazz,ModuleCandidate candidate){  try {    Class c=Class.forName(clazz);    if (ToastModule.class.isAssignableFrom(c) && classLoadable(c)) {      log.debug("Toast Module Class Found: " + clazz + " for candidate: "+ candidate.getModuleFile());      ModuleContainer container=new ModuleContainer(c,candidate);      getContainers().add(container);    }  } catch (  Throwable e) {    log.debug("Could not parse module class: " + clazz);    log.debugException(e);  }}  }
class C{  public Box(Vec4 point){  if (point == null) {    String msg=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.ru=new Vec4(1,0,0,1);  this.su=new Vec4(0,1,0,1);  this.tu=new Vec4(0,0,1,1);  this.r=this.ru;  this.s=this.su;  this.t=this.tu;  this.rLength=1;  this.sLength=1;  this.tLength=1;  this.planes=new Plane[6];  double d=0.5 * point.getLength3();  this.planes[0]=new Plane(-this.ru.x,-this.ru.y,-this.ru.z,-(d + 0.5));  this.planes[1]=new Plane(+this.ru.x,+this.ru.y,+this.ru.z,-(d + 0.5));  this.planes[2]=new Plane(-this.su.x,-this.su.y,-this.su.z,-(d + 0.5));  this.planes[3]=new Plane(+this.su.x,+this.su.y,+this.su.z,-(d + 0.5));  this.planes[4]=new Plane(-this.tu.x,-this.tu.y,-this.tu.z,-(d + 0.5));  this.planes[5]=new Plane(+this.tu.x,+this.tu.y,+this.tu.z,-(d + 0.5));  this.center=ru.add3(su).add3(tu).multiply3(0.5);  Vec4 rHalf=r.multiply3(0.5);  this.topCenter=this.center.add3(rHalf);  this.bottomCenter=this.center.subtract3(rHalf);}  }
class C{  public Builder withOffset(int offset){  request.offset=Assert.argNot(offset,offset < 0,"offset must be positive");  return this;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void openMenu(String direction,int time,int dest,boolean transition){  if (Display.getInstance().getCurrent() == parent) {    menu=createMenu(direction);    out=parent.getTransitionOutAnimator();    in=parent.getTransitionInAnimator();    parent.setTransitionInAnimator(new SideMenuBar.MenuTransition(getUIManager().getThemeConstant("sideMenuAnimSpeedInt",300),false,-1,direction));    if (transition) {      parent.setTransitionOutAnimator(new SideMenuBar.MenuTransition(dest,true,time,direction));      menu.show();    } else {      parent.setTransitionOutAnimator(new SideMenuBar.MenuTransition(0,true,dest,direction));      menu.show();      parent.setTransitionOutAnimator(new SideMenuBar.MenuTransition(dest,true,time,direction));    }  }}  }
class C{  public static void escapeJava(Writer out,String str) throws IOException {  escapeJavaStyleString(out,str,false,false);}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  return map;}  }
class C{  public Task<BucketRestRep> deleteBucketACL(URI id){  return deleteTask(getBucketACLUrl(),id);}  }
class C{  public Message(String text,String sender,int type){  this.text=text;  this.sender=sender;  this.timestamp=new Date().getTime();  this.type=type;}  }
class C{  public void stepStoreData(String stepId){  try {    URI workflowURI=workflowService.getWorkflowFromStepId(stepId).getWorkflowURI();    workflowService.storeStepData(workflowURI.toString(),"workflow-data");    workflowService.storeStepData(stepId,"step-data");    workflowService.storeStepData(stepId,"keya","keya-data");    workflowService.storeStepData(stepId,"keyb","keyb-data");    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  Exception ex) {    log.error("Exception in stepSaveData: ",ex.getMessage(),ex);    ServiceCoded coded=WorkflowException.errors.unforeseen();    WorkflowStepCompleter.stepFailed(stepId,coded);  }}  }
class C{  public UISAMLAttacker(){  initComponents();}  }
class C{  final public int lastIndexOf(final char c){  final char[] a=array;  int i=length();  while (i-- != 0)   if (a[i] == c)   return i;  return -1;}  }
class C{  public static Element appendElementPath(Element context,String path){  if (context == null) {    String message=Logging.getMessage("nullValue.ContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (WWUtil.isEmpty(path)) {    return context;  }  String[] names=path.split("/");  if (names == null || names.length == 0) {    return context;  }  Document doc=context.getOwnerDocument();  Element cur=context;  for (  String s : names) {    if (s != null && s.length() > 0) {      Element el=doc.createElementNS(null,s);      cur.appendChild(el);      cur=el;    }  }  return cur;}  }
class C{  public double[][] computeLocal(int states[][],int[] offsetOfDestFromSources){  initialise();  int[] cleanedSourcesOffsets=cleanOffsetOfDestFromSources(offsetOfDestFromSources);  addObservations(states,cleanedSourcesOffsets,true);  return computeLocalFromPreviousObservations(states,cleanedSourcesOffsets,true);}  }
class C{  public BaseOperationExecutor(JestClient client){  notNull(client);  this.client=client;}  }
class C{  public static void loadModel() throws IOException, TException, UnknownWordException {  final Word2VecModel model;  try (ProfilingTimer timer=ProfilingTimer.create(LOG,"Loading model")){    String json=Common.readFileToString(new File("text8.model"));    model=Word2VecModel.fromThrift(ThriftUtils.deserializeJson(new Word2VecModelThrift(),json));  }   interact(model.forSearch());}  }
class C{  public ConnectionFactory createConnectionFactory() throws Exception {  return new ActiveMQConnectionFactory(serverUri);}  }
class C{  public final void storeCellsScanResults(final ArrayList<CellRecord> cells,final PositionRecord begin,final PositionRecord end){  if (cells == null || cells.size() == 0) {    return;  }  final ArrayList<ContentProviderOperation> operations=new ArrayList<>();  operations.add(ContentProviderOperation.newInsert(ContentProvider.CONTENT_URI_POSITION).withValue(Schema.COL_LATITUDE,begin.getLatitude()).withValue(Schema.COL_LONGITUDE,begin.getLongitude()).withValue(Schema.COL_ALTITUDE,begin.getAltitude()).withValue(Schema.COL_TIMESTAMP,begin.getOpenBmapTimestamp()).withValue(Schema.COL_ACCURACY,begin.getAccuracy()).withValue(Schema.COL_BEARING,begin.getBearing()).withValue(Schema.COL_SPEED,begin.getSpeed()).withValue(Schema.COL_SESSION_ID,begin.getSession()).withValue(Schema.COL_SOURCE,begin.getSource()).build());  operations.add(ContentProviderOperation.newInsert(ContentProvider.CONTENT_URI_POSITION).withValue(Schema.COL_LATITUDE,end.getLatitude()).withValue(Schema.COL_LONGITUDE,end.getLongitude()).withValue(Schema.COL_ALTITUDE,end.getAltitude()).withValue(Schema.COL_TIMESTAMP,end.getOpenBmapTimestamp()).withValue(Schema.COL_ACCURACY,end.getAccuracy()).withValue(Schema.COL_BEARING,end.getBearing()).withValue(Schema.COL_SPEED,end.getSpeed()).withValue(Schema.COL_SESSION_ID,end.getSession()).withValue(Schema.COL_SOURCE,end.getSource()).build());  for (  final CellRecord cell : cells) {    if (!cell.isCdma()) {      operations.add(ContentProviderOperation.newInsert(ContentProvider.CONTENT_URI_CELL).withValue(Schema.COL_NETWORKTYPE,cell.getNetworkType()).withValue(Schema.COL_IS_CDMA,cell.isCdma()).withValue(Schema.COL_IS_SERVING,cell.isServing()).withValue(Schema.COL_IS_NEIGHBOR,cell.isNeighbor()).withValue(Schema.COL_LOGICAL_CELLID,cell.getLogicalCellId()).withValue(Schema.COL_ACTUAL_CELLID,cell.getActualCellId()).withValue(Schema.COL_UTRAN_RNC,cell.getUtranRnc()).withValue(Schema.COL_PSC,cell.getPsc()).withValue(Schema.COL_AREA,cell.getArea()).withValue(Schema.COL_MCC,cell.getMcc()).withValue(Schema.COL_MNC,cell.getMnc()).withValue(Schema.COL_OPERATORNAME,cell.getOperatorName()).withValue(Schema.COL_OPERATOR,cell.getOperator()).withValue(Schema.COL_STRENGTHDBM,cell.getStrengthdBm()).withValue(Schema.COL_STRENGTHASU,cell.getStrengthAsu()).withValue(Schema.COL_TIMESTAMP,cell.getOpenBmapTimestamp()).withValueBackReference(Schema.COL_BEGIN_POSITION_ID,0).withValueBackReference(Schema.COL_END_POSITION_ID,1).withValue(Schema.COL_SESSION_ID,cell.getSessionId()).withValue(Schema.COL_CDMA_BASEID,-1).withValue(Schema.COL_CDMA_NETWORKID,-1).withValue(Schema.COL_CDMA_SYSTEMID,-1).withValue(Schema.COL_CDMA_BASEID,-1).build());    } else {      operations.add(ContentProviderOperation.newInsert(ContentProvider.CONTENT_URI_CELL).withValue(Schema.COL_NETWORKTYPE,cell.getNetworkType()).withValue(Schema.COL_IS_CDMA,cell.isCdma()).withValue(Schema.COL_IS_SERVING,cell.isServing()).withValue(Schema.COL_IS_NEIGHBOR,cell.isNeighbor()).withValue(Schema.COL_AREA,cell.getArea()).withValue(Schema.COL_MCC,cell.getMcc()).withValue(Schema.COL_MNC,cell.getMnc()).withValue(Schema.COL_PSC,cell.getPsc()).withValue(Schema.COL_CDMA_BASEID,cell.getBaseId()).withValue(Schema.COL_CDMA_NETWORKID,cell.getNetworkId()).withValue(Schema.COL_CDMA_SYSTEMID,cell.getSystemId()).withValue(Schema.COL_PSC,cell.getPsc()).withValue(Schema.COL_PSC,cell.getPsc()).withValue(Schema.COL_OPERATORNAME,cell.getOperatorName()).withValue(Schema.COL_OPERATOR,cell.getOperator()).withValue(Schema.COL_STRENGTHDBM,cell.getStrengthdBm()).withValue(Schema.COL_TIMESTAMP,cell.getOpenBmapTimestamp()).withValueBackReference(Schema.COL_BEGIN_POSITION_ID,0).withValueBackReference(Schema.COL_END_POSITION_ID,1).withValue(Schema.COL_SESSION_ID,cell.getSessionId()).withValue(Schema.COL_LOGICAL_CELLID,-1).withValue(Schema.COL_AREA,-1).build());    }  }  try {    final ContentProviderResult[] results=contentResolver.applyBatch("org.openbmap.provider",operations);  } catch (  final RemoteException e) {    Log.e(TAG,e.toString(),e);  }catch (  final OperationApplicationException e) {    Log.e(TAG,e.toString(),e);  }}  }
class C{  public void testCase23(){  byte rBytes[]={0};  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(0,result.signum());}  }
class C{  public void addRowSet(Joinable rowset) throws SQLException {  boolean boolColId, boolColName;  boolColId=false;  boolColName=false;  CachedRowSetImpl cRowset;  if (!(rowset instanceof RowSet)) {    throw new SQLException(resBundle.handleGetObject("joinrowsetimpl.notinstance").toString());  }  if (rowset instanceof JdbcRowSetImpl) {    cRowset=new CachedRowSetImpl();    cRowset.populate((RowSet)rowset);    if (cRowset.size() == 0) {      throw new SQLException(resBundle.handleGetObject("joinrowsetimpl.emptyrowset").toString());    }    try {      int matchColumnCount=0;      for (int i=0; i < rowset.getMatchColumnIndexes().length; i++) {        if (rowset.getMatchColumnIndexes()[i] != -1)         ++matchColumnCount; else         break;      }      int[] pCol=new int[matchColumnCount];      for (int i=0; i < matchColumnCount; i++)       pCol[i]=rowset.getMatchColumnIndexes()[i];      cRowset.setMatchColumn(pCol);    } catch (    SQLException sqle) {    }  } else {    cRowset=(CachedRowSetImpl)rowset;    if (cRowset.size() == 0) {      throw new SQLException(resBundle.handleGetObject("joinrowsetimpl.emptyrowset").toString());    }  }  try {    iMatchKey=(cRowset.getMatchColumnIndexes())[0];  } catch (  SQLException sqle) {    boolColId=true;  }  try {    strMatchKey=(cRowset.getMatchColumnNames())[0];  } catch (  SQLException sqle) {    boolColName=true;  }  if (boolColId && boolColName) {    throw new SQLException(resBundle.handleGetObject("joinrowsetimpl.matchnotset").toString());  } else {    if (boolColId) {      ArrayList<Integer> indices=new ArrayList<>();      for (int i=0; i < cRowset.getMatchColumnNames().length; i++) {        if ((strMatchKey=(cRowset.getMatchColumnNames())[i]) != null) {          iMatchKey=cRowset.findColumn(strMatchKey);          indices.add(iMatchKey);        } else         break;      }      int[] indexes=new int[indices.size()];      for (int i=0; i < indices.size(); i++)       indexes[i]=indices.get(i);      cRowset.setMatchColumn(indexes);    } else {    }  }  initJOIN(cRowset);}  }
class C{  private boolean isValidAuthorityHostNoDot(String authority){  Perl5Util authorityMatcher=new Perl5Util();  if (authority != null && authorityMatcher.match("/^([a-zA-Z\\d\\-\\.]*)(:\\d*)?(.*)?/",authority)) {    String hostIP=authorityMatcher.group(1);    if (hostIP.indexOf('.') < 0) {      DomainValidator domainValidator=DomainValidator.getInstance(true);      if (!domainValidator.isValid(hostIP)) {        return false;      }      String port=authorityMatcher.group(2);      if (!isValidPort(port)) {        return false;      }      String extra=authorityMatcher.group(3);      return GenericValidator.isBlankOrNull(extra);    } else {      return false;    }  } else {    return false;  }}  }
class C{  public void testAckedMessageAreConsumed() throws Exception {  connection.start();  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  Queue queue=session.createQueue("test");  MessageProducer producer=session.createProducer(queue);  producer.send(session.createTextMessage("Hello"));  MessageConsumer consumer=session.createConsumer(queue);  consumer.setMessageListener(this);  Thread.sleep(10000);  session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNull(msg);  session.close();}  }
class C{  public void unlockUI(ProcessInfo pi){  this.setEnabled(true);  m_isLocked=false;}  }
class C{  @Override public boolean isFactoryForType(Object type){  return supportedTypes.contains(type) || super.isFactoryForType(type);}  }
class C{  public boolean hasPinCode(Context context){  return encryptionProvider.hasPinCode(context);}  }
class C{  private RegionAttributes createAtts(){  AttributesFactory factory=new AttributesFactory();{    factory.setDataPolicy(DataPolicy.REPLICATE);    factory.setScope(Scope.DISTRIBUTED_ACK);  }  return factory.create();}  }
class C{  private void consolidateData(final DataContainer data){synchronized (data) {    if (data.needsConsolidation) {      TravelTimeData r=data.ttData;      double prevTravelTime=r.getTravelTime(0,0.0);      for (int i=1; i < this.numSlots; i++) {        double travelTime=r.getTravelTime(i,i * this.timeSlice);        double minTravelTime=prevTravelTime - this.timeSlice;        if (travelTime < minTravelTime) {          r.setTravelTime(i,minTravelTime);        }        prevTravelTime=r.getTravelTime(i,i * this.timeSlice);      }      data.needsConsolidation=false;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.166 -0500",hash_original_method="3974450583A9023F24B778633D301E40",hash_generated_method="7AFD4FCB838EC4FF242FA38F36F5CAD1") public void rotateZ(float deg){  addTaint(deg);}  }
class C{  public Flux<T> flux(String key){  if (!pipes.get(key).isPresent())   pipes.register(key,factory.build());  return Flux.from(pipes.reactiveSeq(key).get());}  }
class C{  public static IFitsHeader create(String key){  IFitsHeader result=STANDARD_KEYS.get(key);  if (result == null) {    result=new FitsHeaderImpl(key,SOURCE.UNKNOWN,HDU.ANY,VALUE.ANY,"");  }  return result;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static ValidationResult validateNetworkRoutes(final TransitSchedule schedule,final Network network){  ValidationResult result=new ValidationResult();  if (network == null || network.getLinks().size() == 0) {    result.addWarning("Cannot validate network routes: No network given!");    return result;  }  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      NetworkRoute netRoute=route.getRoute();      if (netRoute == null) {        result.addIssue(new ValidationResult.ValidationIssue(ValidationResult.Severity.ERROR,"Transit line " + line.getId() + ", route "+ route.getId()+ " has no network route.",ValidationResult.Type.OTHER,Collections.singleton(route.getId())));      } else {        Link prevLink=network.getLinks().get(netRoute.getStartLinkId());        for (        Id<Link> linkId : netRoute.getLinkIds()) {          Link link=network.getLinks().get(linkId);          if (link == null) {            result.addIssue(new ValidationResult.ValidationIssue(ValidationResult.Severity.ERROR,"Transit line " + line.getId() + ", route "+ route.getId()+ " contains a link that is not part of the network: "+ linkId,ValidationResult.Type.OTHER,Collections.singleton(route.getId())));          } else           if (prevLink != null && !prevLink.getToNode().equals(link.getFromNode())) {            result.addIssue(new ValidationResult.ValidationIssue(ValidationResult.Severity.ERROR,"Transit line " + line.getId() + ", route "+ route.getId()+ " has inconsistent network route, e.g. between link "+ prevLink.getId()+ " and "+ linkId,ValidationResult.Type.OTHER,Collections.singleton(route.getId())));          }          prevLink=link;        }      }    }  }  return result;}  }
class C{  private void inflateLayers(Resources r,XmlPullParser parser,AttributeSet attrs,Resources.Theme theme) throws XmlPullParserException, IOException {  final LayerState state=mLayerState;  final int innerDepth=parser.getDepth() + 1;  int type;  int depth;  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && ((depth=parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {    if (type != XmlPullParser.START_TAG) {      continue;    }    if (depth > innerDepth || !parser.getName().equals("item")) {      continue;    }    final ChildDrawable layer=new ChildDrawable();    final TypedArray a=obtainAttributes(r,theme,attrs,R.styleable.LayerDrawableItem);    updateLayerFromTypedArray(layer,a);    a.recycle();    if (layer.mDrawable == null && (layer.mThemeAttrs == null || layer.mThemeAttrs[R.styleable.LayerDrawableItem_android_drawable] == 0)) {      while ((type=parser.next()) == XmlPullParser.TEXT) {      }      if (type != XmlPullParser.START_TAG) {        throw new XmlPullParserException(parser.getPositionDescription() + ": <item> tag requires a 'drawable' attribute or " + "child tag defining a drawable");      }      layer.mDrawable=LollipopDrawablesCompat.createFromXmlInner(r,parser,attrs,theme);    }    if (layer.mDrawable != null) {      state.mChildrenChangingConfigurations|=layer.mDrawable.getChangingConfigurations();      layer.mDrawable.setCallback(this);    }    addLayer(layer);  }}  }
class C{  public SecondBestScoringFunctionFactory(ScoringFunctionFactory delegate,EventsManager events,ScoreTracker scoreTracker,MatsimServices controler){  this.delegate=delegate;  this.events=events;  this.scoreTracker=scoreTracker;  this.controler=controler;}  }
class C{  public void actionPerformed(ActionEvent event){}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  IntervalXYDataset intervalDataset=(IntervalXYDataset)dataset;  double y0;  double y1;  if (getUseYInterval()) {    y0=intervalDataset.getStartYValue(series,item);    y1=intervalDataset.getEndYValue(series,item);  } else {    y0=getBase();    y1=intervalDataset.getYValue(series,item);  }  if (Double.isNaN(y0) || Double.isNaN(y1)) {    return;  }  double yy0=rangeAxis.valueToJava2D(y0,dataArea,plot.getRangeAxisEdge());  double yy1=rangeAxis.valueToJava2D(y1,dataArea,plot.getRangeAxisEdge());  RectangleEdge xAxisLocation=plot.getDomainAxisEdge();  double x0=intervalDataset.getStartXValue(series,item);  double xx0=domainAxis.valueToJava2D(x0,dataArea,xAxisLocation);  double x1=intervalDataset.getEndXValue(series,item);  double xx1=domainAxis.valueToJava2D(x1,dataArea,xAxisLocation);  double intervalW=xx1 - xx0;  double baseX=xx0;  if (this.centerBarAtStartValue) {    baseX=baseX - intervalW / 2.0;  }  double m=getMargin();  if (m > 0.0) {    double cut=intervalW * getMargin();    intervalW=intervalW - cut;    baseX=baseX + (cut / 2);  }  double intervalH=Math.abs(yy0 - yy1);  PlotOrientation orientation=plot.getOrientation();  int numSeries=dataset.getSeriesCount();  double seriesBarWidth=intervalW / numSeries;  Rectangle2D bar=null;  if (orientation == PlotOrientation.HORIZONTAL) {    double barY0=baseX + (seriesBarWidth * series);    double barY1=barY0 + seriesBarWidth;    double rx=Math.min(yy0,yy1);    double rw=intervalH;    double ry=Math.min(barY0,barY1);    double rh=Math.abs(barY1 - barY0);    bar=new Rectangle2D.Double(rx,ry,rw,rh);  } else   if (orientation == PlotOrientation.VERTICAL) {    double barX0=baseX + (seriesBarWidth * series);    double barX1=barX0 + seriesBarWidth;    double rx=Math.min(barX0,barX1);    double rw=Math.abs(barX1 - barX0);    double ry=Math.min(yy0,yy1);    double rh=intervalH;    bar=new Rectangle2D.Double(rx,ry,rw,rh);  } else {    throw new IllegalStateException();  }  boolean positive=(y1 > 0.0);  boolean inverted=rangeAxis.isInverted();  RectangleEdge barBase;  if (orientation == PlotOrientation.HORIZONTAL) {    if (positive && inverted || !positive && !inverted) {      barBase=RectangleEdge.RIGHT;    } else {      barBase=RectangleEdge.LEFT;    }  } else {    if (positive && !inverted || !positive && inverted) {      barBase=RectangleEdge.BOTTOM;    } else {      barBase=RectangleEdge.TOP;    }  }  if (pass == 0 && getShadowsVisible()) {    getBarPainter().paintBarShadow(g2,this,series,item,bar,barBase,!getUseYInterval());  }  if (pass == 1) {    getBarPainter().paintBar(g2,this,series,item,bar,barBase);    if (isItemLabelVisible(series,item)) {      XYItemLabelGenerator generator=getItemLabelGenerator(series,item);      drawItemLabel(g2,dataset,series,item,plot,generator,bar,y1 < 0.0);    }    if (info != null) {      EntityCollection entities=info.getOwner().getEntityCollection();      if (entities != null) {        addEntity(entities,bar,dataset,series,item,bar.getCenterX(),bar.getCenterY());      }    }  }}  }
class C{  protected SSLContext(SSLContextSpi contextSpi,Provider provider,String protocol){  this.contextSpi=contextSpi;  this.provider=provider;  this.protocol=protocol;}  }
class C{  public Packed64(int valueCount,int bitsPerValue){  super(valueCount,bitsPerValue);  final PackedInts.Format format=PackedInts.Format.PACKED;  final int longCount=format.longCount(PackedInts.VERSION_CURRENT,valueCount,bitsPerValue);  this.blocks=new long[longCount];  maskRight=~0L << (BLOCK_SIZE - bitsPerValue) >>> (BLOCK_SIZE - bitsPerValue);  bpvMinusBlockSize=bitsPerValue - BLOCK_SIZE;}  }
class C{  public void removeTestProvider(String provider){  try {    mService.removeTestProvider(provider);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException",e);  }}  }
class C{  public NegativeConstraint_ createNegativeConstraint_(){  NegativeConstraint_Impl negativeConstraint_=new NegativeConstraint_Impl();  return negativeConstraint_;}  }
class C{  public static int nextInt(int n){synchronized (random) {    return random.nextInt(n);  }}  }
class C{  public boolean isGraphic(){  String m_lowname=m_name.toLowerCase();  return m_lowname.endsWith(".gif") || m_lowname.endsWith(".jpg") || m_lowname.endsWith(".png");}  }
class C{  public AffineTransform3D inverse(){  final double det=this.determinant();  return new AffineTransform3D((m11 * m22 - m21 * m12) / det,(m21 * m01 - m01 * m22) / det,(m01 * m12 - m11 * m02) / det,(m01 * (m22 * m13 - m12 * m23) + m02 * (m11 * m23 - m21 * m13) - m03 * (m11 * m22 - m21 * m12)) / det,(m20 * m12 - m10 * m22) / det,(m00 * m22 - m20 * m02) / det,(m10 * m02 - m00 * m12) / det,(m00 * (m12 * m23 - m22 * m13) - m02 * (m10 * m23 - m20 * m13) + m03 * (m10 * m22 - m20 * m12)) / det,(m10 * m21 - m20 * m11) / det,(m20 * m01 - m00 * m21) / det,(m00 * m11 - m10 * m01) / det,(m00 * (m21 * m13 - m11 * m23) + m01 * (m10 * m23 - m20 * m13) - m03 * (m10 * m21 - m20 * m11)) / det);}  }
class C{  AudioCapabilities(int[] supportedEncodings,int maxChannelCount){  if (supportedEncodings != null) {    this.supportedEncodings=Arrays.copyOf(supportedEncodings,supportedEncodings.length);    Arrays.sort(this.supportedEncodings);  } else {    this.supportedEncodings=new int[0];  }  this.maxChannelCount=maxChannelCount;}  }
class C{  public double[] computeLocal(int states[][],int iCol,int jCol){  initialise();  addObservations(states,iCol,jCol);  return computeLocalFromPreviousObservations(states,iCol,jCol);}  }
class C{  public void play(){  if (mLocalPlayer != null) {    if (mAudioManager.getStreamVolume(mStreamType) != 0) {      mLocalPlayer.start();    }  } else   if (mAllowRemote) {    final Uri canonicalUri=mUri.getCanonicalUri();    try {      mRemotePlayer.play(mRemoteToken,canonicalUri,mStreamType);    } catch (    RemoteException e) {      if (!playFallbackRingtone()) {        Log.w(TAG,"Problem playing ringtone: " + e);      }    }  } else {    if (!playFallbackRingtone()) {      Log.w(TAG,"Neither local nor remote playback available");    }  }}  }
class C{  T register(ICalPropertyScribe<? extends ICalProperty> scribe){  if (index == null) {    index=new ScribeIndex();  }  index.register(scribe);  return this_;}  }
class C{  public void blockContact(ContactId contact) throws RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.blockContact(contact);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void testResourceELEvalAfterPrematureClosureOfStream() throws Exception {  ResourceHandler handler=getFacesContext().getApplication().getResourceHandler();  handler.createResource("simple-with-el.css").getInputStream().close();  testResourceELEval();}  }
class C{  @Override public LayoutParams generateLayoutParams(AttributeSet attrs){  return new MarginLayoutParams(this.getContext(),attrs);}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numAttr,AttrTypes attrTypes,int numClasses,int classType) throws Exception {  return makeTestDataset(seed,numInstances,numAttr,attrTypes,numClasses,classType,TestInstances.CLASS_IS_LAST);}  }
class C{  public Group findGroup(String tenantName,PrincipalId groupId) throws Exception {  return getService().findGroup(tenantName,groupId,this.getServiceContext());}  }
class C{  public void write(OutputStream out,Integer indent) throws TransformerException {  write(out,indent,null);}  }
class C{  @Transactional public Collection<T> insert(Collection<T> newInstances){  for (  T newInstance : newInstances) {    if (entityManager.contains(newInstance)) {      LOGGER.debug("The Entity that you are attempting to store has already been persisted.");      continue;    }    entityManager.persist(newInstance);  }  return newInstances;}  }
class C{  private void loadCreateCardFragment(Bundle extras){  loadFragment(R.id.frame_content,(AbstractYeloFragment)Fragment.instantiate(this,CreateOpenCardFragment.class.getName(),extras),AppConstants.FragmentTags.CREATE_CARD,false,null);}  }
class C{  protected int doRead(ByteBuffer destinationBuffer) throws IOException {  int bytesRead;  bytesRead=this.socketChannel.read(destinationBuffer);  return bytesRead;}  }
class C{  public boolean canEvaluate(){  if (problem instanceof MasterProblem)   return ((MasterProblem)problem).canEvaluate(); else   return true;}  }
class C{  public void addRow(Iterable<?> columnValues){  int start=rowCount * columnCount;  int end=start + columnCount;  ensureCapacity(end);  if (columnValues instanceof ArrayList<?>) {    addRow((ArrayList<?>)columnValues,start);    return;  }  int current=start;  Object[] localData=data;  for (  Object columnValue : columnValues) {    if (current == end) {      throw new IllegalArgumentException("columnValues.size() > columnNames.length");    }    localData[current++]=columnValue;  }  if (current != end) {    throw new IllegalArgumentException("columnValues.size() < columnNames.length");  }  rowCount++;}  }
class C{  public Map<Integer,Double> compute(double... dataset){  return computeInPlace(dataset.clone());}  }
class C{  public void endPaint(){}  }
class C{  public Money addAssign(final Money money){  if (this.currency_.eq(money.currency_)) {    this.value_+=money.value_;  } else   if (conversionType == Money.ConversionType.BaseCurrencyConversion) {    this.convertToBase();    final Money tmp=money.clone();    tmp.convertToBase();    this.addAssign(tmp);  } else   if (conversionType == Money.ConversionType.AutomatedConversion) {    final Money tmp=money.clone();    tmp.convertTo(currency_);    this.addAssign(tmp);  } else   throw new LibraryException("currency mismatch and no conversion specified");  return this;}  }
class C{  private byte[] generateDerivedKey(int idByte,int n){  byte[] D=new byte[v];  byte[] dKey=new byte[n];  for (int i=0; i != D.length; i++) {    D[i]=(byte)idByte;  }  byte[] S;  if ((salt != null) && (salt.length != 0)) {    S=new byte[v * ((salt.length + v - 1) / v)];    for (int i=0; i != S.length; i++) {      S[i]=salt[i % salt.length];    }  } else {    S=new byte[0];  }  byte[] P;  if ((password != null) && (password.length != 0)) {    P=new byte[v * ((password.length + v - 1) / v)];    for (int i=0; i != P.length; i++) {      P[i]=password[i % password.length];    }  } else {    P=new byte[0];  }  byte[] I=new byte[S.length + P.length];  System.arraycopy(S,0,I,0,S.length);  System.arraycopy(P,0,I,S.length,P.length);  byte[] B=new byte[v];  int c=(n + u - 1) / u;  byte[] A=new byte[u];  for (int i=1; i <= c; i++) {    digest.update(D,0,D.length);    digest.update(I,0,I.length);    digest.doFinal(A,0);    for (int j=1; j < iterationCount; j++) {      digest.update(A,0,A.length);      digest.doFinal(A,0);    }    for (int j=0; j != B.length; j++) {      B[j]=A[j % A.length];    }    for (int j=0; j != I.length / v; j++) {      adjust(I,j * v,B);    }    if (i == c) {      System.arraycopy(A,0,dKey,(i - 1) * u,dKey.length - ((i - 1) * u));    } else {      System.arraycopy(A,0,dKey,(i - 1) * u,A.length);    }  }  return dKey;}  }
class C{  public org.dom4j.ProcessingInstruction createProcessingInstruction(ProcessingInstruction pi){  return factory.createProcessingInstruction(pi.getTarget(),pi.getData());}  }
class C{  private void checkInteriorIntersections(){  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {    SegmentString ss0=(SegmentString)i.next();    for (Iterator j=segStrings.iterator(); j.hasNext(); ) {      SegmentString ss1=(SegmentString)j.next();      checkInteriorIntersections(ss0,ss1);    }  }}  }
class C{  public static int nextPowerOf2(int x){  long i=1;  while (i < x && i < (Integer.MAX_VALUE / 2)) {    i+=i;  }  return (int)i;}  }
class C{  public map addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public DrawerBuilder withHeader(@NonNull View headerView){  this.mHeaderView=headerView;  return this;}  }
class C{  public static ActiveMQBuffer wrappedBuffer(final byte[] underlying){  return new ChannelBufferWrapper(Unpooled.wrappedBuffer(underlying));}  }
class C{  @Override public float floatValue(){  return value;}  }
class C{  public static List<Header> spdy3HeadersList(Request request){  Headers headers=request.headers();  List<Header> result=new ArrayList<>(headers.size() + 5);  result.add(new Header(TARGET_METHOD,request.method()));  result.add(new Header(TARGET_PATH,RequestLine.requestPath(request.url())));  result.add(new Header(VERSION,"HTTP/1.1"));  result.add(new Header(TARGET_HOST,Util.hostHeader(request.url())));  result.add(new Header(TARGET_SCHEME,request.url().scheme()));  Set<ByteString> names=new LinkedHashSet<>();  for (int i=0, size=headers.size(); i < size; i++) {    ByteString name=ByteString.encodeUtf8(headers.name(i).toLowerCase(Locale.US));    if (SPDY_3_SKIPPED_REQUEST_HEADERS.contains(name))     continue;    String value=headers.value(i);    if (names.add(name)) {      result.add(new Header(name,value));      continue;    }    for (int j=0; j < result.size(); j++) {      if (result.get(j).name.equals(name)) {        String concatenated=joinOnNull(result.get(j).value.utf8(),value);        result.set(j,new Header(name,concatenated));        break;      }    }  }  return result;}  }
class C{  private void reevaluateHealth(){  if (!this.poorHealth.isEmpty()) {    this.overallHealth=POOR_HEALTH;  } else   if (!this.okayHealth.isEmpty()) {    this.overallHealth=OKAY_HEALTH;  } else {    this.overallHealth=GOOD_HEALTH;  }}  }
class C{  private static boolean IsNextIn(PCalLocation locA,PCalLocation locB,Vector<Vector<MappingObject>> vec){  return (locA != null) && (locB != null) && (((locA.getLine() == locB.getLine()) && (locA.getColumn() + 1 == locB.getColumn())) || ((locA.getLine() == locB.getLine() - 1) && (locA.getColumn() == vec.elementAt(locA.getLine()).size()) && (locB.getColumn() == 0)));}  }
class C{  public static void prettyPrintVideoItem(YouTubeVideo playlistEntry){  Log.d(TAG,"*************************************************************");  Log.d(TAG,"\t\tItem:");  Log.d(TAG,"*************************************************************");  Log.d(TAG," video name  = " + playlistEntry.getTitle());  Log.d(TAG," video id    = " + playlistEntry.getId());  Log.d(TAG," duration    = " + playlistEntry.getDuration());  Log.d(TAG," thumbnail   = " + playlistEntry.getThumbnailURL());  Log.d(TAG,"\n*************************************************************\n");}  }
class C{  @RequestMapping(UiConstants.DISPLAY_INFO_MESSAGE_URL) public ModelAndView displayInfoMessage(@RequestParam(UiConstants.MODEL_KEY_MESSAGE) String message){  String viewName=UiConstants.DISPLAY_INFO_MESSAGE_PAGE;  if (message == null) {    return new ModelAndView(viewName);  } else {    return new ModelAndView(viewName,UiConstants.MODEL_KEY_MESSAGE,HtmlUtils.htmlEscape(message));  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.795 -0500",hash_original_method="715F84C962A7921497F55D5349A2140A",hash_generated_method="EA919FD7BE7C474CE83983166A9CD5B1") private boolean nativeParse(String s){  addTaint(s.getTaint());  return getTaintBoolean();}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static int writeByteArray(final byte[] tgt,final int tgtOffset,final byte[] src,final int srcOffset,final int srcLength){  byte[] vint=vintToBytes(srcLength);  System.arraycopy(vint,0,tgt,tgtOffset,vint.length);  int offset=tgtOffset + vint.length;  System.arraycopy(src,srcOffset,tgt,offset,srcLength);  return offset + srcLength;}  }
class C{  public h6 removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public boolean containsNearbyAlmostDuplicate(int[] nums,int k,int t){  if (t < 0)   return false;  Map<Long,Long> bucketMap=new HashMap<>();  long width=(long)t + 1;  for (int i=0; i < nums.length; ++i) {    long id=getBucketId(nums[i],width);    if (bucketMap.containsKey(id))     return true;    if (bucketMap.containsKey(id - 1) && Math.abs(nums[i] - bucketMap.get(id - 1)) < width)     return true;    if (bucketMap.containsKey(id + 1) && Math.abs(nums[i] - bucketMap.get(id + 1)) < width)     return true;    bucketMap.put(id,(long)nums[i]);    if (i >= k)     bucketMap.remove(getBucketId(nums[i - k],width));  }  return false;}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public void update(long datum){  long[] data={datum};  updateWithHash(hash(data,DEFAULT_UPDATE_SEED));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void uploadNotes(Context context,String host,String hash) throws IOException, JSONException, AuthenticatorException {  NoteDataSource dataSource=NoteDataSource.getInstance(context);  List<Note> notSyncedNotes=dataSource.getNotes(DatabaseContract.NoteEntry.NOTE_STATUS.not_synced);  for (  Note note : notSyncedNotes) {    Note newNote=createNote(host,hash,note);    if (newNote != null) {      dataSource.deleteNote(note);      dataSource.insertNote(newNote);    } else {      Log.d(LOG_TAG,"Creating note failed");    }  }}  }
class C{  private void listEvents(String fileName,boolean pureSQL,boolean headersOnly,boolean json,String charset,boolean hex,boolean specs) throws ReplicatorException, IOException, InterruptedException {  if (!fileName.startsWith("thl.data.")) {    fatal("File name must be a THL log file name like thl.data.0000000001",null);  }  prepare(true);  LogConnection conn=diskLog.connect(true);  if (!conn.seek(fileName)) {    logger.error("File not found: " + fileName);    fail();  }  if (json)   println("[");  THLEvent thlEvent=null;  boolean first=true;  while ((thlEvent=conn.next(false)) != null) {    if (!pureSQL) {      StringBuilder sb=new StringBuilder();      if (json && !first)       sb.append(",\n");      int format=0;      if (json)       format=1; else       if (headersOnly && !json)       format=2;      printHeader(sb,thlEvent,format);      print(sb.toString());    }    if (!headersOnly) {      ReplEvent replEvent=thlEvent.getReplEvent();      if (replEvent instanceof ReplDBMSEvent) {        ReplDBMSEvent event=(ReplDBMSEvent)replEvent;        StringBuilder sb=new StringBuilder();        printReplDBMSEvent(sb,event,pureSQL,charset,hex,specs);        print(sb.toString());      } else {        println("# " + replEvent.getClass().getName() + ": not supported.");      }    }    first=false;  }  if (json)   println("\n]");  release();}  }
class C{  public CSaveFormattedField(final DefaultFormatterFactory factory){  super(factory);}  }
class C{  private void cancelPrecaching(){  Log.v(TAG,"Cancel precaching");  prepareNativeLibraries();  mPrecacheLauncher.cancel();  shutdownPrecaching(true);}  }
class C{  @Bean public FanoutExchange dmfSenderExchange(){  return new FanoutExchange(AmqpSettings.DMF_EXCHANGE);}  }
class C{  public DummyTokenBuilder(String value){  this.value=value;}  }
class C{  public ResolvedEvent(EventStoreClientMessages.ResolvedIndexedEvent event){  this.event=(event.hasEvent()) ? new RecordedEvent(event.getEvent()) : null;  this.link=(event.hasLink()) ? new RecordedEvent(event.getLink()) : null;  this.originalPosition=null;}  }
class C{  static private void initConvertMap(){  s_mysql.put("\\bNUMBER[^\\(]\\b","DECIMAL(22, 10) ");  s_mysql.put("\\bNUMBER[\\s]?\\(","DECIMAL(");  s_mysql.put("\\bVARCHAR2\\b","VARCHAR");  s_mysql.put("\\bNVARCHAR2\\b","VARCHAR");  s_mysql.put("\\bNCHAR\\b","CHAR");  s_mysql.put("\\bCLOB\\b","TEXT");  s_mysql.put("\\bLIMIT\\b","`limit`");  s_mysql.put("\\bSEPARATOR\\b","`separator`");  s_mysql.put("\\bUNDO\\b","`undo`");  s_mysql.put("\\bLINES\\b","`lines`");  s_mysql.put("\\bCACHE\\b","");  s_mysql.put("\\bUSING INDEX\\b","");  s_mysql.put("\\bTABLESPACE\\s\\w+\\b","");  s_mysql.put("\\bSTORAGE\\([\\w\\s]+\\)","");  s_mysql.put("\\bBITMAP INDEX\\b","INDEX");  s_mysql.put("\\bSYSDATE\\b","SysDate()");  s_mysql.put("\\bUSER\\b","user()");  s_mysql.put("\\bDUMP\\b","MD5");  s_mysql.put("END CASE","END");  s_mysql.put("\\bgetDate\\b\\(\\)","CURRENT_TIMESTAMP");  s_mysql.put("\\bNVL\\b","COALESCE");  s_mysql.put("\\bTO_DATE\\b","TO_DATE");  s_mysql.put("\\bDBMS_OUTPUT.PUT_LINE\\b","");  s_mysql.put("\\bTO_NCHAR\\b","");  s_mysql.put("\\bGLOBAL TEMPORARY\\b","TEMPORARY");  s_mysql.put("\\bON COMMIT DELETE ROWS\\b","");  s_mysql.put("\\bON COMMIT PRESERVE ROWS\\b","");  s_mysql.put("\\bCASCADE CONSTRAINTS\\b","");  s_mysql.put("\\sFROM\\s+DUAL\\b","");  s_mysql.put("\\bELSIF\\b","ELSEIF");  s_mysql.put("\\bREC \\b","AS REC ");  s_mysql.put("\\bSTART WITH\\b","START");  s_mysql.put("\\bINCREMENT BY\\b","INCREMENT");}  }
class C{  public Expression copyInline(Context ctx){  ConditionalExpression e=(ConditionalExpression)clone();  e.cond=cond.copyInline(ctx);  e.left=left.copyInline(ctx);  e.right=(right == null) ? null : right.copyInline(ctx);  return e;}  }
class C{  @Override public void addSerie(Serie serie){  seriesAdapter.addItem(serie);}  }
class C{  public void add(String expr,Font font){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,font);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.976 -0400",hash_original_method="333A7F04CF3A5003336C33F84636E75C",hash_generated_method="A7D097E660BDE50719F2B8F0F95F3690") public FileAlterationObserver(File directory,FileFilter fileFilter,IOCase caseSensitivity){  this(new FileEntry(directory),fileFilter,caseSensitivity);}  }
class C{  @DSComment("no suspicious activity") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:07.707 -0500",hash_original_method="2EEDDDEB8BA1CD500E3647BC397BF54F",hash_generated_method="10C0B8E2B9DF49DDBC078E9919A022F7") public boolean isClosed(){  return isClosed;}  }
class C{  public boolean hasNext() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.FEATURE_CONFIGURATION__PARAMETER_VALUES:    return ((InternalEList<?>)getParameterValues()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public double nextDouble(){  double result=super.nextDouble();  println("nextDouble=" + result);  return result;}  }
class C{  public boolean containsOnly(String string){  return containsOnly(string,0);}  }
class C{  public void removeRosterListener(RosterListener rosterListener){  rosterListeners.remove(rosterListener);}  }
class C{  private Transform matchArray(Class entry) throws Exception {  Transform transform=primary.match(entry);  if (transform == null) {    return null;  }  return new ArrayTransform(transform,entry);}  }
class C{  public JBoss7xRuntimeConfigurationCapability(){  this.propertySupportMap.put(JBossPropertySet.CONFIGURATION,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.CLUSTERED,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.PROFILE,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_HTTP_PORT,Boolean.FALSE);  this.propertySupportMap.remove(GeneralPropertySet.RMI_PORT);}  }
class C{  public boolean equals(Object obj){  return super.equals(obj) && schema.equals(((ValidateAction)obj).schema);}  }
class C{  public static <T>Filter<T> orFilter(Filter<T> f1,Filter<T> f2){  return (new CombinedFilter<T>(f1,f2,false));}  }
class C{  public boolean visit(SimpleName node){  collectTaint(node,true);  return false;}  }
class C{  public area addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override final public boolean isInline(){  return false;}  }
class C{  public LshImageSearcher(int maximumHits,String featureFieldName,String hashesFieldName,GlobalFeature feature){  this.maximumHits=maximumHits;  this.featureFieldName=featureFieldName;  this.hashesFieldName=hashesFieldName;  this.feature=feature;  try {    LocalitySensitiveHashing.readHashFunctions();  } catch (  IOException e) {    System.err.println("Error reading hash functions from default location.");    e.printStackTrace();  }}  }
class C{  private void checkComplete(){  if (initialized() && !isDone() && lsnrCalls == futuresCount()) {    try {      onDone(rdc != null ? rdc.reduce() : null);    } catch (    RuntimeException e) {      U.error(null,"Failed to execute compound future reducer: " + this,e);      onDone(e);    }catch (    AssertionError e) {      U.error(null,"Failed to execute compound future reducer: " + this,e);      onDone(e);      throw e;    }  }}  }
class C{  public static String gensalt(int log_rounds,SecureRandom random){  StringBuffer rs=new StringBuffer();  byte rnd[]=new byte[BCRYPT_SALT_LEN];  random.nextBytes(rnd);  rs.append("$2a$");  if (log_rounds < 10)   rs.append("0");  rs.append(Integer.toString(log_rounds));  rs.append("$");  rs.append(encode_base64(rnd,rnd.length));  return rs.toString();}  }
class C{  @Override protected void initListeners(){}  }
class C{  public boolean sendEMail(String to,String subject,String message,File attachment,boolean html){  EMail email=createEMail(to,subject,message,html);  if (email == null)   return false;  if (attachment != null)   email.addAttachment(attachment);  try {    String msg=email.send();    if (EMail.SENT_OK.equals(msg)) {      log.info("Sent EMail " + subject + " to "+ to);      return true;    } else {      log.warning("Could NOT Send Email: " + subject + " to "+ to+ ": "+ msg+ " ("+ getName()+ ")");      return false;    }  } catch (  Exception ex) {    log.severe(getName() + " - " + ex.getLocalizedMessage());    return false;  }}  }
class C{  private String badArrive(long s){  return "Attempted arrival of unregistered party for " + stateToString(s);}  }
class C{  public SAXException(Exception e){  this.exception=e;}  }
class C{  public void requestDumbPTY() throws IOException {  requestPTY("dumb",0,0,0,0,null);}  }
class C{  public static FieldDataTermsQueryBuilder fieldDataTermsQuery(String name,byte[] value,int cacheKey){  return new FieldDataTermsQueryBuilder(name,value,cacheKey);}  }
class C{  @GuardedBy("lock") private void updateStats(){  mInternalStatFs=updateStatsHelper(mInternalStatFs,mInternalPath);  mExternalStatFs=updateStatsHelper(mExternalStatFs,mExternalPath);  mLastRestatTime=SystemClock.elapsedRealtime();}  }
class C{  public void testJavaTypeTablesMatch() throws Exception {  FieldDescriptor.JavaType[] values1=FieldDescriptor.JavaType.values();  WireFormat.JavaType[] values2=WireFormat.JavaType.values();  assertEquals(values1.length,values2.length);  for (int i=0; i < values1.length; i++) {    assertEquals(values1[i].toString(),values2[i].toString());  }}  }
class C{  private long scheduleReadyPeriodicSyncs(){  final boolean backgroundDataUsageAllowed=getConnectivityManager().getBackgroundDataSetting();  long earliestFuturePollTime=Long.MAX_VALUE;  if (!backgroundDataUsageAllowed) {    return earliestFuturePollTime;  }  AccountAndUser[] accounts=mRunningAccounts;  final long nowAbsolute=System.currentTimeMillis();  final long shiftedNowAbsolute=(0 < nowAbsolute - mSyncRandomOffsetMillis) ? (nowAbsolute - mSyncRandomOffsetMillis) : 0;  ArrayList<SyncStorageEngine.AuthorityInfo> infos=mSyncStorageEngine.getAuthorities();  for (  SyncStorageEngine.AuthorityInfo info : infos) {    if (!containsAccountAndUser(accounts,info.account,info.userId)) {      continue;    }    if (!mSyncStorageEngine.getMasterSyncAutomatically(info.userId) || !mSyncStorageEngine.getSyncAutomatically(info.account,info.userId,info.authority)) {      continue;    }    if (getIsSyncable(info.account,info.userId,info.authority) == 0) {      continue;    }    SyncStatusInfo status=mSyncStorageEngine.getOrCreateSyncStatus(info);    for (int i=0, N=info.periodicSyncs.size(); i < N; i++) {      final Bundle extras=info.periodicSyncs.get(i).first;      final Long periodInMillis=info.periodicSyncs.get(i).second * 1000;      if (periodInMillis <= 0) {        continue;      }      final long lastPollTimeAbsolute=status.getPeriodicSyncTime(i);      long remainingMillis=periodInMillis - (shiftedNowAbsolute % periodInMillis);      if (remainingMillis == periodInMillis || lastPollTimeAbsolute > nowAbsolute || (nowAbsolute - lastPollTimeAbsolute >= periodInMillis)) {        final Pair<Long,Long> backoff=mSyncStorageEngine.getBackoff(info.account,info.userId,info.authority);        final RegisteredServicesCache.ServiceInfo<SyncAdapterType> syncAdapterInfo;        syncAdapterInfo=mSyncAdapters.getServiceInfo(SyncAdapterType.newKey(info.authority,info.account.type),info.userId);        if (syncAdapterInfo == null) {          continue;        }        scheduleSyncOperation(new SyncOperation(info.account,info.userId,SyncOperation.REASON_PERIODIC,SyncStorageEngine.SOURCE_PERIODIC,info.authority,extras,0,backoff != null ? backoff.first : 0,mSyncStorageEngine.getDelayUntilTime(info.account,info.userId,info.authority),syncAdapterInfo.type.allowParallelSyncs()));        status.setPeriodicSyncTime(i,nowAbsolute);      }      final long nextPollTimeAbsolute=nowAbsolute + remainingMillis;      if (nextPollTimeAbsolute < earliestFuturePollTime) {        earliestFuturePollTime=nextPollTimeAbsolute;      }    }  }  if (earliestFuturePollTime == Long.MAX_VALUE) {    return Long.MAX_VALUE;  }  return SystemClock.elapsedRealtime() + ((earliestFuturePollTime < nowAbsolute) ? 0 : (earliestFuturePollTime - nowAbsolute));}  }
class C{  private void cmd_deleteSelection(){  if (m_curTab.isReadOnly())   return;  JPanel messagePanel=new JPanel();  JList list=new JList();  JScrollPane scrollPane=new JScrollPane(list);  Vector<String> data=new Vector<String>();  final String keyColumnName=m_curTab.getKeyColumnName();  String sql=null;  if (!"".equals(keyColumnName)) {    sql=MLookupFactory.getLookup_TableDirEmbed(Env.getLanguage(m_ctx),keyColumnName,"[?","?]").replace("[?.?]","?");  }  int noOfRows=m_curTab.getRowCount();  for (int i=0; i < noOfRows; i++) {    StringBuffer displayValue=new StringBuffer();    if ("".equals(keyColumnName)) {      ArrayList<String> parentColumnNames=m_curTab.getParentColumnNames();      for (Iterator<String> iter=parentColumnNames.iterator(); iter.hasNext(); ) {        String columnName=iter.next();        GridField field=m_curTab.getField(columnName);        if (field.isLookup()) {          Lookup lookup=field.getLookup();          if (lookup != null) {            displayValue=displayValue.append(lookup.getDisplay(m_curTab.getValue(i,columnName))).append(" | ");          } else {            displayValue=displayValue.append(m_curTab.getValue(i,columnName)).append(" | ");          }        } else {          displayValue=displayValue.append(m_curTab.getValue(i,columnName)).append(" | ");        }      }    } else {      final int id=m_curTab.getKeyID(i);      String value=DB.getSQLValueStringEx(null,sql,id);      if (value != null)       value=value.replace(" - "," | ");      displayValue.append(value);      if (displayValue.length() == 0 || CLogMgt.isLevelFine()) {        if (displayValue.length() > 0)         displayValue.append(" | ");        displayValue.append("<").append(id).append(">");      }    }    data.add(displayValue.toString());  }  list.setListData(data);  list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);  messagePanel.add(scrollPane);  final JOptionPane pane=new JOptionPane(messagePanel,JOptionPane.QUESTION_MESSAGE,JOptionPane.OK_CANCEL_OPTION);  final JDialog deleteDialog=pane.createDialog(this.getParent(),Msg.getMsg(m_ctx,"DeleteSelection"));  deleteDialog.setVisible(true);  Integer okCancel=(Integer)pane.getValue();  if (okCancel != null && okCancel == JOptionPane.OK_OPTION) {    log.fine("ok");    Object[] selectedValues=list.getSelectedValues();    for (int i=0; i < selectedValues.length; i++) {      log.fine(selectedValues[i].toString());    }    int[] indices=list.getSelectedIndices();    Arrays.sort(indices);    int offset=0;    for (int i=0; i < indices.length; i++) {      m_curTab.navigate(indices[i] - offset);      int keyID=m_curTab.getRecord_ID();      if (m_curTab.dataDelete()) {        m_curGC.rowChanged(false,keyID);        offset++;      }    }    m_curGC.dynamicDisplay(0);  } else {    log.fine("cancel");  }}  }
class C{  public boolean isForceUpdate(){  return getForceUpdate();}  }
class C{  public static double bytesToDouble(byte[] bytes,int off){  return Double.longBitsToDouble(bytesToLong(bytes,off));}  }
class C{  public void addRequestTags(Span span,String url,String host,String path,String method){  tagSpan(span,this.traceKeys.getHttp().getUrl(),url);  tagSpan(span,this.traceKeys.getHttp().getHost(),host);  tagSpan(span,this.traceKeys.getHttp().getPath(),path);  tagSpan(span,this.traceKeys.getHttp().getMethod(),method);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.FUNCTION__ACTION:    return getAction();case GamlPackage.FUNCTION__PARAMETERS:  return getParameters();case GamlPackage.FUNCTION__ARGS:return getArgs();case GamlPackage.FUNCTION__TYPE:return getType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @LargeTest public void testAllEffects() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "MPEG4_SP_640x480_30fps_512Kbps_0_27.mp4";  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem1);  final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect1",1000,1000,EffectColor.TYPE_COLOR,EffectColor.PINK);  mediaVideoItem1.addEffect(effectColor1);  assertEquals("Associated Media Item",mediaVideoItem1,effectColor1.getMediaItem());  assertTrue("Effect Id",effectColor1.getId().equals("effect1"));  assertEquals("Effect StartTime",1000,effectColor1.getStartTime());  assertEquals("Effect EndTime",1000,effectColor1.getDuration());  assertEquals("Effect Type",EffectColor.TYPE_COLOR,effectColor1.getType());  assertEquals("Effect Color",EffectColor.PINK,effectColor1.getColor());  final EffectColor effectColor2=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect2",2000,1000,EffectColor.TYPE_COLOR,EffectColor.GRAY);  mediaVideoItem1.addEffect(effectColor2);  assertEquals("Associated Media Item",mediaVideoItem1,effectColor2.getMediaItem());  assertTrue("Effect Id",effectColor2.getId().equals("effect2"));  assertEquals("Effect StartTime",2000,effectColor2.getStartTime());  assertEquals("Effect EndTime",1000,effectColor2.getDuration());  assertEquals("Effect Type",EffectColor.TYPE_COLOR,effectColor2.getType());  assertEquals("Effect Color",EffectColor.GRAY,effectColor2.getColor());  final EffectColor effectColor3=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect3",3000,1000,EffectColor.TYPE_COLOR,EffectColor.GREEN);  mediaVideoItem1.addEffect(effectColor3);  assertEquals("Associated Media Item",mediaVideoItem1,effectColor3.getMediaItem());  assertTrue("Effect Id",effectColor3.getId().equals("effect3"));  assertEquals("Effect StartTime",3000,effectColor3.getStartTime());  assertEquals("Effect EndTime",1000,effectColor3.getDuration());  assertEquals("Effect Type",EffectColor.TYPE_COLOR,effectColor3.getType());  assertEquals("Effect Color",EffectColor.GREEN,effectColor3.getColor());  final EffectColor effectColor4=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect4",4000,1000,EffectColor.TYPE_GRADIENT,EffectColor.PINK);  mediaVideoItem1.addEffect(effectColor4);  assertEquals("Associated Media Item",mediaVideoItem1,effectColor4.getMediaItem());  assertTrue("Effect Id",effectColor4.getId().equals("effect4"));  assertEquals("Effect StartTime",4000,effectColor4.getStartTime());  assertEquals("Effect EndTime",1000,effectColor4.getDuration());  assertEquals("Effect Type",EffectColor.TYPE_GRADIENT,effectColor4.getType());  assertEquals("Effect Color",EffectColor.PINK,effectColor4.getColor());  final EffectColor effectColor5=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect5",5000,1000,EffectColor.TYPE_GRADIENT,EffectColor.GRAY);  mediaVideoItem1.addEffect(effectColor5);  assertEquals("Associated Media Item",mediaVideoItem1,effectColor5.getMediaItem());  assertTrue("Effect Id",effectColor5.getId().equals("effect5"));  assertEquals("Effect StartTime",5000,effectColor5.getStartTime());  assertEquals("Effect EndTime",1000,effectColor5.getDuration());  assertEquals("Effect Type",EffectColor.TYPE_GRADIENT,effectColor5.getType());  assertEquals("Effect Color",EffectColor.GRAY,effectColor5.getColor());  final EffectColor effectColor6=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect6",6000,1000,EffectColor.TYPE_GRADIENT,EffectColor.GREEN);  mediaVideoItem1.addEffect(effectColor6);  assertEquals("Associated Media Item",mediaVideoItem1,effectColor6.getMediaItem());  assertTrue("Effect Id",effectColor6.getId().equals("effect6"));  assertEquals("Effect StartTime",6000,effectColor6.getStartTime());  assertEquals("Effect EndTime",1000,effectColor6.getDuration());  assertEquals("Effect Type",EffectColor.TYPE_GRADIENT,effectColor6.getType());  assertEquals("Effect Color",EffectColor.GREEN,effectColor6.getColor());  final EffectColor effectColor7=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect7",7000,1000,EffectColor.TYPE_FIFTIES,0);  mediaVideoItem1.addEffect(effectColor7);  assertEquals("Associated Media Item",mediaVideoItem1,effectColor7.getMediaItem());  assertTrue("Effect Id",effectColor7.getId().equals("effect7"));  assertEquals("Effect StartTime",7000,effectColor7.getStartTime());  assertEquals("Effect EndTime",1000,effectColor7.getDuration());  assertEquals("Effect Type",EffectColor.TYPE_FIFTIES,effectColor7.getType());  assertEquals("Effect Color",-1,effectColor7.getColor());  final EffectColor effectColor8=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect8",8000,1000,EffectColor.TYPE_SEPIA,0);  mediaVideoItem1.addEffect(effectColor8);  assertEquals("Associated Media Item",mediaVideoItem1,effectColor8.getMediaItem());  assertTrue("Effect Id",effectColor8.getId().equals("effect8"));  assertEquals("Effect StartTime",8000,effectColor8.getStartTime());  assertEquals("Effect EndTime",1000,effectColor8.getDuration());  assertEquals("Effect Type",EffectColor.TYPE_SEPIA,effectColor8.getType());  assertEquals("Effect Color",-1,effectColor8.getColor());  final EffectColor effectColor9=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect9",9000,1000,EffectColor.TYPE_NEGATIVE,0);  mediaVideoItem1.addEffect(effectColor9);  assertEquals("Associated Media Item",mediaVideoItem1,effectColor9.getMediaItem());  assertTrue("Effect Id",effectColor9.getId().equals("effect9"));  assertEquals("Effect StartTime",9000,effectColor9.getStartTime());  assertEquals("Effect EndTime",1000,effectColor9.getDuration());  assertEquals("Effect Type",EffectColor.TYPE_NEGATIVE,effectColor9.getType());  assertEquals("Effect Color",-1,effectColor9.getColor());  try {    mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect9",9000,1000,EffectColor.TYPE_COLOR - 1,0);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Effect type Invalid",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect9",9000,1000,EffectColor.TYPE_FIFTIES + 1,0);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Effect type Invalid",flagForException);  try {    mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect10",10000,1000,EffectColor.TYPE_FIFTIES + EffectColor.TYPE_GRADIENT,0);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Effect type Invalid",flagForException);}  }
class C{  public static List<ItemStack> requestItem(Object matcher,int itemCount,ICorporeaSpark spark,boolean checkNBT,boolean doit){  List<ItemStack> stacks=new ArrayList<>();  CorporeaRequestEvent event=new CorporeaRequestEvent(matcher,itemCount,spark,checkNBT,doit);  if (MinecraftForge.EVENT_BUS.post(event))   return stacks;  List<InvWithLocation> inventories=getInventoriesOnNetwork(spark);  List<IWrappedInventory> inventoriesW=BotaniaAPI.internalHandler.wrapInventory(inventories);  Map<ICorporeaInterceptor,ICorporeaSpark> interceptors=new HashMap<ICorporeaInterceptor,ICorporeaSpark>();  CorporeaRequest request=new CorporeaRequest(matcher,checkNBT,itemCount);  for (  IWrappedInventory inv : inventoriesW) {    ICorporeaSpark invSpark=inv.getSpark();    InvWithLocation originalInventory=inv.getWrappedObject();    if (originalInventory.world.getTileEntity(originalInventory.pos) instanceof ICorporeaInterceptor) {      ICorporeaInterceptor interceptor=(ICorporeaInterceptor)originalInventory.world.getTileEntity(originalInventory.pos);      interceptor.interceptRequest(matcher,itemCount,invSpark,spark,stacks,inventories,doit);      interceptors.put(interceptor,invSpark);    }    if (doit) {      stacks.addAll(inv.extractItems(request));    } else {      stacks.addAll(inv.countItems(request));    }  }  lastRequestMatches=request.foundItems;  lastRequestExtractions=request.extractedItems;  for (  ICorporeaInterceptor interceptor : interceptors.keySet())   interceptor.interceptRequestLast(matcher,itemCount,interceptors.get(interceptor),spark,stacks,inventories,doit);  return stacks;}  }
class C{  protected ShaderVar addConst(String name,double value){  return addConst(name,(float)value);}  }
class C{  @Override public UpdateResponse addBeans(Collection<?> beans) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.addBeans(beans);  return ur;}  }
class C{  public static Uri buildRowAccessUri(Long id){  return ContentUris.withAppendedId(WEATHER_CONDITIONS_CONTENT_URI,id);}  }
class C{  private void saveManagedDialogs(Bundle outState){  if (mManagedDialogs == null) {    return;  }  final int numDialogs=mManagedDialogs.size();  if (numDialogs == 0) {    return;  }  Bundle dialogState=new Bundle();  int[] ids=new int[mManagedDialogs.size()];  for (int i=0; i < numDialogs; i++) {    final int key=mManagedDialogs.keyAt(i);    ids[i]=key;    final ManagedDialog md=mManagedDialogs.valueAt(i);    dialogState.putBundle(savedDialogKeyFor(key),md.mDialog.onSaveInstanceState());    if (md.mArgs != null) {      dialogState.putBundle(savedDialogArgsKeyFor(key),md.mArgs);    }  }  dialogState.putIntArray(SAVED_DIALOG_IDS_KEY,ids);  outState.putBundle(SAVED_DIALOGS_TAG,dialogState);}  }
class C{  public boolean isImmutable(){  return this.immutable || (this.htmlTagIndex != -1 && (this.htmlTagIndex & JAVADOC_TAGS_ID_MASK) == JAVADOC_IMMUTABLE_TAGS_ID);}  }
class C{  public void testFull(Codec codec,Path path,IndexOptions options,boolean withPayloads) throws Exception {  Directory dir=LuceneTestCase.newFSDirectory(path);  FieldsProducer fieldsProducer=buildIndex(codec,dir,options,withPayloads,true);  testFields(fieldsProducer);  IndexOptions[] allOptions=IndexOptions.values();  int maxIndexOption=Arrays.asList(allOptions).indexOf(options);  for (int i=0; i <= maxIndexOption; i++) {    testTerms(fieldsProducer,EnumSet.allOf(Option.class),allOptions[i],options,true);    if (withPayloads) {      testTerms(fieldsProducer,EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)),allOptions[i],options,true);    }  }  fieldsProducer.close();  dir.close();}  }
class C{  public TwoDCircle[] generate(int size){  TwoDCircle[] circles=new TwoDCircle[size];  for (int i=0; i < size; i++) {    double x=Math.random();    double y=Math.random();    circles[i]=new TwoDCircle(new TwoDPoint(x,y),radius);  }  return circles;}  }
class C{  public void testCameraPairwiseScenario25() throws Exception {  genericPairwiseTestCase(Flash.AUTO,Exposure.MAX,WhiteBalance.DAYLIGHT,SceneMode.AUTO,PictureSize.MEDIUM,Geotagging.OFF);}  }
class C{  protected ScriptList(RandomAccessFile raf,int offset) throws IOException {  raf.seek(offset);  scriptCount=raf.readUnsignedShort();  scriptRecords=new ScriptRecord[scriptCount];  scripts=new Script[scriptCount];  for (int i=0; i < scriptCount; i++) {    scriptRecords[i]=new ScriptRecord(raf);  }  for (int i=0; i < scriptCount; i++) {    scripts[i]=new Script(raf,offset + scriptRecords[i].getOffset());  }}  }
class C{  public Interval(long startInstant,long endInstant,Chronology chronology){  super(startInstant,endInstant,chronology);}  }
class C{  public static boolean isSQL99Keyword(String identifier){  return isSQL99ReservedKeyword(identifier) || isSQL99NonReservedKeyword(identifier);}  }
class C{  private static StringBuffer convertToXML(final Map<String,Collection<String>> connections){  final StringBuffer output=new StringBuffer();  output.append("<!-- Territory Connections -->\r\n");  final List<String> allTerritories=new ArrayList<>(connections.keySet());  Collections.sort(allTerritories,new AlphanumComparator());  for (  final String t1 : allTerritories) {    for (    final String t2 : connections.get(t1)) {      output.append("<connection t1=\"").append(t1).append("\" t2=\"").append(t2).append("\"/>\r\n");    }  }  return output;}  }
class C{  public boolean isApplyBackgroundColor(){  return mApplyBackgroundColor;}  }
class C{  public void cleanup(boolean deleteAll){  long currentTime=System.currentTimeMillis();  File file=new File(getOutputDirectoryString());  if (file.isDirectory()) {    File[] files=file.listFiles();    for (int i=0; i < files.length; i++) {      File f=files[i];      if (!deleteAll) {        try {          long ft=getTimeForFileName(f.getName());          long tdiff=currentTime - ft;          if (DEBUG) {            Debug.output("MagicPlanetImageComponent considering deleting " + f.getName() + ", file time:"+ ft+ ", current time:"+ currentTime+ ", interval:"+ getCleanupInterval()+ ", diff:"+ tdiff);          }          if (tdiff > getCleanupInterval()) {            if (DEBUG)             Debug.output("   deleting...");            f.delete();          }        } catch (        NumberFormatException nfe) {        }      } else {        f.delete();      }    }  }}  }
class C{  public final boolean isFinal(){  return (this.modifiers & ClassFileConstants.AccFinal) != 0;}  }
class C{  public void arrayValue(int numValues) throws IOException {  output.write('[');  write16bit(numValues);}  }
class C{  private SnapshotUtils(){}  }
class C{  private void updateInfo(){  if (info == null) {    info=owner.getOptionInfo(name);  }}  }
class C{  public static char lowSurrogate(int c){  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  public static void addStrut(JComponent b,boolean horiz,int size){  if (size < 1)   return;  b.add(horiz ? Box.createHorizontalStrut(size) : Box.createVerticalStrut(size));}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  public MethodParametersAttribute(ConstPool cp,String[] names,int[] flags){  super(cp,tag);  byte[] data=new byte[names.length * 4 + 1];  data[0]=(byte)names.length;  for (int i=0; i < names.length; i++) {    ByteArray.write16bit(cp.addUtf8Info(names[i]),data,i * 4 + 1);    ByteArray.write16bit(flags[i],data,i * 4 + 3);  }  set(data);}  }
class C{  private static Color BVColor(double BV){  if (BV < 0)   return new Color(.635f,.764f,.929f); else   if (BV < .5)   return new Color(1f,1f,1f); else   if (BV < 1)   return new Color(1f,.984f,.266f); else   if (BV < 1.5)   return new Color(.964f,.725f,.0784f); else   return new Color(.921f,.376f,.0392f);}  }
class C{  public boolean isFrozenAt(int row,int column){  if (row < 1 || row > NUM_ROWS || column < 1 || column > NUM_COLS) {    return false;  }  return frozen[row - 1][column - 1];}  }
class C{  private long readLong(byte[] b){  return (((long)(b[0] & 0xff)) << 56) | (((long)(b[1] & 0xff)) << 48) | (((long)(b[2] & 0xff)) << 40)| (((long)(b[3] & 0xff)) << 32)| (((long)(b[4] & 0xff)) << 24)| ((b[5] & 0xff) << 16)| ((b[6] & 0xff) << 8)| ((b[7] & 0xff));}  }
class C{  public boolean hasSendEmail(){  return hasExtension(SendEmail.class);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public GitlabUser createUser(String email,String password,String username,String fullName,String skypeId,String linkedIn,String twitter,String website_url,Integer projects_limit,String extern_uid,String extern_provider_name,String bio,Boolean isAdmin,Boolean can_create_group,Boolean skip_confirmation) throws IOException {  Query query=new Query().append("email",email).appendIf("confirm",skip_confirmation == null ? null : !skip_confirmation).appendIf("password",password).appendIf("username",username).appendIf("name",fullName).appendIf("skype",skypeId).appendIf("linkedin",linkedIn).appendIf("twitter",twitter).appendIf("website_url",website_url).appendIf("projects_limit",projects_limit).appendIf("extern_uid",extern_uid).appendIf("provider",extern_provider_name).appendIf("bio",bio).appendIf("admin",isAdmin).appendIf("can_create_group",can_create_group);  String tailUrl=GitlabUser.USERS_URL + query.toString();  return dispatch().to(tailUrl,GitlabUser.class);}  }
class C{  private GridClientNodeImpl prepareNode(final GridClientNodeImpl node){  final boolean noAttrsAndMetrics=(metricsCache && attrCache) || (node.attributes().isEmpty() && node.metrics() == null);  if (noAttrsAndMetrics && routerAddrs == null && node.connectable())   return node;  GridClientNodeImpl.Builder nodeBuilder=GridClientNodeImpl.builder(node,!attrCache,!metricsCache);  for (  InetSocketAddress addr : node.availableAddresses(prot,true)) {    boolean router=routerAddrs == null || routerAddrs.contains(addr.getHostName() + ":" + addr.getPort()) || routerAddrs.contains(addr.getAddress().getHostAddress() + ":" + addr.getPort());    boolean reachable=noAttrsAndMetrics || !addr.getAddress().isLoopbackAddress() || F.containsAny(U.allLocalMACs(),node.attribute(ATTR_MACS).toString().split(", "));    if (router && reachable) {      nodeBuilder.connectable(true);      break;    }  }  return nodeBuilder.build();}  }
class C{  public Vec4 computeSurfaceNormalAtLocation(Angle latitude,Angle longitude){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return this.computeEllipsoidalNormalAtLocation(latitude,longitude);}  }
class C{  @Override protected void sendFunctionGroup1(){  XNetMessage msg=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),0,f0);  queueMessage(msg,THROTTLEFUNCSENT);  XNetMessage msg1=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),1,f1);  queueMessage(msg1,THROTTLEFUNCSENT);  XNetMessage msg2=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),2,f2);  queueMessage(msg2,THROTTLEFUNCSENT);  XNetMessage msg3=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),3,f3);  queueMessage(msg3,THROTTLEFUNCSENT);  XNetMessage msg4=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),4,f4);  queueMessage(msg4,THROTTLEFUNCSENT);}  }
class C{  public CacheObject load(Object key,int x,int y,int zoomLevel,Projection proj){  try {    Class.forName(testClass);  } catch (  Exception e) {    logger.warning("can't locate sqlite JDBC components");    return null;  }  try {    Connection conn=DriverManager.getConnection(rootDir);    Statement stat=conn.createStatement();    StringBuilder statement=new StringBuilder("select tile_data from map, images where");    statement.append(" zoom_level = ").append(zoomLevel);    statement.append(" and tile_column = ").append(x);    statement.append(" and tile_row = ").append(Math.pow(2,zoomLevel) - y - 1);    statement.append(" and map.tile_id = images.tile_id;");    ResultSet rs=stat.executeQuery(statement.toString());    while (rs.next()) {      byte[] imageBytes=rs.getBytes("tile_data");      ImageIcon ii=new ImageIcon(imageBytes);      BufferedImage bi=BufferedImageHelper.getBufferedImage(ii.getImage(),0,0,-1,-1);      OMGraphic raster=createOMGraphicFromBufferedImage(bi,x,y,zoomLevel,proj);      if (raster != null) {        return new CacheObject((String)key,raster);      }    }    rs.close();    conn.close();  } catch (  Exception e) {    logger.warning("something went wrong fetching image from database: " + e.getMessage());    e.printStackTrace();  }  return null;}  }
class C{  public int indexOf(final AbstractInsnNode insn){  if (cache == null) {    cache=toArray();  }  return insn.index;}  }
class C{  public boolean ge(final Period another){  return another.le(this);}  }
class C{  public boolean hasUrl(){  return hasValue();}  }
class C{  protected void uninstallListeners(){  if (propertyChangeListener != null) {    splitPane.removePropertyChangeListener(propertyChangeListener);    propertyChangeListener=null;  }  if (focusListener != null) {    splitPane.removeFocusListener(focusListener);    focusListener=null;  }  keyboardUpLeftListener=null;  keyboardDownRightListener=null;  keyboardHomeListener=null;  keyboardEndListener=null;  keyboardResizeToggleListener=null;  handler=null;}  }
class C{  private JClassLoaderWrapper(ClassLoader loader){  _loader=loader;}  }
class C{  public int[] predictLeaf(FVec feat,int ntree_limit){  return gbm.predictLeaf(feat,ntree_limit);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.191 -0400",hash_original_method="37E18D6091DD86C4F55F7BB9AFCA20CB",hash_generated_method="FAA93137DFB5245C7236F92D10A3457C") public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  public PsiEllipsisType(@NotNull PsiType componentType){  super(componentType);}  }
class C{  private void deleteEntry(ContactsExampleParameters parameters) throws IOException, ServiceException {  if (parameters.isGroupFeed()) {    ContactGroupEntry group=getGroupInternal(parameters.getId());    if (group == null) {      System.err.println("No Group found with id: " + parameters.getId());      return;    }    group.delete();  } else {    ContactEntry contact=getContactInternal(parameters.getId());    if (contact == null) {      System.err.println("No contact found with id: " + parameters.getId());      return;    }    contact.delete();  }}  }
class C{  private void drawHexes(Graphics g,Rectangle view,boolean saveBoardImage){  int drawX=(int)(view.x / (HEX_WC * scale)) - 1;  int drawY=(int)(view.y / (HEX_H * scale)) - 1;  int drawWidth=(int)(view.width / (HEX_WC * scale)) + 3;  int drawHeight=(int)(view.height / (HEX_H * scale)) + 3;  if (useIsometric()) {    IBoard board=game.getBoard();    final int minElev=board.getMinElevation();    final int maxElev=board.getMaxElevation();    for (int i=0; i < drawHeight; i++) {      for (int x=minElev; x <= maxElev; x++) {        for (int j=0; j < drawWidth; j++) {          Coords c=new Coords(j + drawX,i + drawY);          IHex hex=board.getHex(c);          if ((hex != null) && (hex.getLevel() == x)) {            drawHex(c,g,saveBoardImage);            if (GUIPreferences.getInstance().getShowFieldOfFire()) {              drawHexSpritesForHex(c,g,fieldofFireSprites);            }            drawHexSpritesForHex(c,g,moveEnvSprites);            drawHexSpritesForHex(c,g,moveModEnvSprites);            if ((en_Deployer != null) && board.isLegalDeployment(c,en_Deployer.getStartingPos())) {              drawHexBorder(g,getHexLocation(c),Color.yellow);            }          }        }      }      for (int k=0; k < drawWidth; k++) {        Coords c=new Coords(k + drawX,i + drawY);        IHex hex=board.getHex(c);        if (hex != null) {          drawOrthograph(c,g);          if (!saveBoardImage) {            drawIsometricWreckSpritesForHex(c,g,isometricWreckSprites);            drawIsometricSpritesForHex(c,g,isometricSprites);          }        }      }    }    if (!saveBoardImage) {      drawIsometricSprites(g,isometricSprites);    }  } else {    for (int i=0; i < drawHeight; i++) {      for (int j=0; j < drawWidth; j++) {        Coords c=new Coords(j + drawX,i + drawY);        drawHex(c,g,saveBoardImage);      }    }  }}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  protected String decode(final String encodedValue){  return UriUtils.decode(encodedValue);}  }
class C{  public MockCharFilterFactory(Map<String,String> args){  super(args);  remainder=requireInt(args,"remainder");  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static int generate(int crc,long value){  crc=next(crc,(byte)(value >> 56));  crc=next(crc,(byte)(value >> 48));  crc=next(crc,(byte)(value >> 40));  crc=next(crc,(byte)(value >> 32));  crc=next(crc,(byte)(value >> 24));  crc=next(crc,(byte)(value >> 16));  crc=next(crc,(byte)(value >> 8));  crc=next(crc,(byte)(value >> 0));  return crc;}  }
class C{  private void updateCrc(Buffer buffer,long byteCount){  for (Segment head=buffer.head; byteCount > 0; head=head.next) {    int segmentLength=(int)Math.min(byteCount,head.limit - head.pos);    crc.update(head.data,head.pos,segmentLength);    byteCount-=segmentLength;  }}  }
class C{  @Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){  double result=0;  double tmp;  int xpos=x_index.length - 1;  int ypos=y_index.length - 1;  int zeros=dim;  while ((xpos >= 0) && (ypos >= 0)) {    if (x_index[xpos] == y_index[ypos]) {      tmp=x_att[xpos] - y_att[ypos];      result+=Math.exp(-sigma * tmp * tmp);      xpos--;      ypos--;    } else     if (x_index[xpos] > y_index[ypos]) {      tmp=x_att[xpos];      result+=Math.exp(-sigma * tmp * tmp);      xpos--;    } else {      tmp=y_att[ypos];      result+=Math.exp(-sigma * tmp * tmp);      ypos--;    }    zeros--;  }  while (xpos >= 0) {    tmp=x_att[xpos];    result+=Math.exp(-sigma * tmp * tmp);    xpos--;    zeros--;  }  while (ypos >= 0) {    tmp=y_att[ypos];    result+=Math.exp(-sigma * tmp * tmp);    ypos--;    zeros--;  }  result+=zeros;  return Math.pow(result,degree);}  }
class C{  private byte[] padPlaintext(byte[] plaintext){  int plaintextLength=plaintext.length;  int numOfZerosToAppend=(8 - (plaintextLength % 8)) % 8;  byte[] paddedPlaintext=new byte[plaintextLength + numOfZerosToAppend];  System.arraycopy(plaintext,0,paddedPlaintext,0,plaintextLength);  if (numOfZerosToAppend != 0) {    byte[] zeros=new byte[numOfZerosToAppend];    System.arraycopy(zeros,0,paddedPlaintext,plaintextLength,numOfZerosToAppend);  }  return paddedPlaintext;}  }
class C{  public Quantity subtract(Quantity quantity){  assertDefined();  if (null == m_value) {    return (quantity);  }  Integer value=m_value - quantity.getIntegerValue();  return new Quantity(value);}  }
class C{  public static final String marshall(Object toMarshall) throws JAXBException {  JAXBContext ctx=JAXBContext.newInstance(toMarshall.getClass().getPackage().getName());  StringWriter sw=new StringWriter();  Marshaller marshaller=ctx.createMarshaller();  marshaller.setProperty("jaxb.formatted.output",true);  marshaller.marshal(toMarshall,sw);  return sw.toString();}  }
class C{  public synchronized void initializeCommands(){  Set<String> ignoredPlugins=new HashSet<String>(yaml.getIgnoredPlugins());  if (ignoredPlugins.contains("All")) {    return;  }  outer:   for (  Command command : server.getCommandMap().getCommands()) {    if (commandInIgnoredPlugin(command,ignoredPlugins)) {      continue;    }    for (    Class c : topicFactoryMap.keySet()) {      if (c.isAssignableFrom(command.getClass())) {        HelpTopic t=topicFactoryMap.get(c).createTopic(command);        if (t != null)         addTopic(t);        continue outer;      }      if (command instanceof PluginCommand && c.isAssignableFrom(((PluginCommand)command).getExecutor().getClass())) {        HelpTopic t=topicFactoryMap.get(c).createTopic(command);        if (t != null)         addTopic(t);        continue outer;      }    }    addTopic(new GenericCommandHelpTopic(command));  }  for (  Command command : server.getCommandMap().getCommands()) {    if (commandInIgnoredPlugin(command,ignoredPlugins)) {      continue;    }    for (    String alias : command.getAliases()) {      if (server.getCommandMap().getCommand(alias) == command) {        addTopic(new CommandAliasHelpTopic("/" + alias,"/" + command.getLabel(),this));      }    }  }  Collection<HelpTopic> filteredTopics=Collections2.filter(helpTopics.values(),Predicates.instanceOf(CommandAliasHelpTopic.class));  if (!filteredTopics.isEmpty()) {    addTopic(new IndexHelpTopic("Aliases","Lists command aliases",null,filteredTopics));  }  Map<String,Set<HelpTopic>> pluginIndexes=new HashMap<String,Set<HelpTopic>>();  fillPluginIndexes(pluginIndexes,server.getCommandMap().getCommands());  for (  Map.Entry<String,Set<HelpTopic>> entry : pluginIndexes.entrySet()) {    addTopic(new IndexHelpTopic(entry.getKey(),"All commands for " + entry.getKey(),null,entry.getValue(),"Below is a list of all " + entry.getKey() + " commands:"));  }  for (  HelpTopicAmendment amendment : yaml.getTopicAmendments()) {    if (helpTopics.containsKey(amendment.getTopicName())) {      helpTopics.get(amendment.getTopicName()).amendTopic(amendment.getShortText(),amendment.getFullText());      if (amendment.getPermission() != null) {        helpTopics.get(amendment.getTopicName()).amendCanSee(amendment.getPermission());      }    }  }}  }
class C{  int arity(){  return arity;}  }
class C{  public Heap(Comparator<? super E> comparator){  this.comparator=comparator;}  }
class C{  public static void assertWarningsLists(List<List<String>> warningsLists,int... expectedSizes){  assertEquals(warningsLists.toString(),expectedSizes.length,warningsLists.size());  for (int i=0; i < expectedSizes.length; i++) {    int expectedSize=expectedSizes[i];    List<String> warnings=warningsLists.get(i);    assertWarnings(expectedSize,warnings);  }}  }
class C{  public final int readUnsignedByte() throws IOException {  int ch=in.read();  if (ch < 0)   throw new EOFException();  return ch;}  }
class C{  private SourceInfo(String source,DebuggableScript[] functions,String normilizedUrl){  this.source=source;  this.url=normilizedUrl;  int N=functions.length;  int[][] lineArrays=new int[N][];  for (int i=0; i != N; ++i) {    lineArrays[i]=functions[i].getLineNumbers();  }  int minAll=0, maxAll=-1;  int[] firstLines=new int[N];  for (int i=0; i != N; ++i) {    int[] lines=lineArrays[i];    if (lines == null || lines.length == 0) {      firstLines[i]=-1;    } else {      int min, max;      min=max=lines[0];      for (int j=1; j != lines.length; ++j) {        int line=lines[j];        if (line < min) {          min=line;        } else         if (line > max) {          max=line;        }      }      firstLines[i]=min;      if (minAll > maxAll) {        minAll=min;        maxAll=max;      } else {        if (min < minAll) {          minAll=min;        }        if (max > maxAll) {          maxAll=max;        }      }    }  }  if (minAll > maxAll) {    this.breakableLines=EMPTY_BOOLEAN_ARRAY;    this.breakpoints=EMPTY_BOOLEAN_ARRAY;  } else {    if (minAll < 0) {      throw new IllegalStateException(String.valueOf(minAll));    }    int linesTop=maxAll + 1;    this.breakableLines=new boolean[linesTop];    this.breakpoints=new boolean[linesTop];    for (int i=0; i != N; ++i) {      int[] lines=lineArrays[i];      if (lines != null && lines.length != 0) {        for (int j=0; j != lines.length; ++j) {          int line=lines[j];          this.breakableLines[line]=true;        }      }    }  }  this.functionSources=new FunctionSource[N];  for (int i=0; i != N; ++i) {    String name=functions[i].getFunctionName();    if (name == null) {      name="";    }    this.functionSources[i]=new FunctionSource(this,firstLines[i],name);  }}  }
class C{  public void performPersistCursorRequest(String name,long key,Request request){  persistentRequests.send(new PersistentRequestsActor.PerformCursorRequest(name,key,request));}  }
class C{  public static String toString(final byte[] bytes){  final StringBuilder builder=new StringBuilder();  builder.append("{ ");  for (  final byte b : bytes) {    builder.append(String.format("%02X ",(byte)(0xFF & b)));  }  builder.append("}");  return builder.toString();}  }
class C{  public double shortestDistance(V v1,V v2){  return d[index(v1)][index(v2)];}  }
class C{  @Override public void writeValueEdit(Object value){  Object[] customer=(Object[])value;  m_oId=customer[0];  m_jTaxID.setText((String)customer[1]);  m_jSearchkey.setText((String)customer[2]);  m_jName.setText((String)customer[3]);  String test=m_jName.getText();  m_jNotes.setText((String)customer[4]);  m_jVisible.setSelected(((Boolean)customer[5]));  jcard.setText((String)customer[6]);  txtMaxdebt.setText(Formats.CURRENCY.formatValue(customer[7]));  txtCurdate.setText(Formats.DATE.formatValue(customer[8]));  txtCurdebt.setText(Formats.CURRENCY.formatValue(customer[9]));  txtFirstName.setText(Formats.STRING.formatValue(customer[10]));  txtLastName.setText(Formats.STRING.formatValue(customer[11]));  txtEmail.setText(Formats.STRING.formatValue(customer[12]));  txtPhone.setText(Formats.STRING.formatValue(customer[13]));  txtPhone2.setText(Formats.STRING.formatValue(customer[14]));  txtFax.setText(Formats.STRING.formatValue(customer[15]));  txtAddress.setText(Formats.STRING.formatValue(customer[16]));  txtAddress2.setText(Formats.STRING.formatValue(customer[17]));  txtPostal.setText(Formats.STRING.formatValue(customer[18]));  txtCity.setText(Formats.STRING.formatValue(customer[19]));  txtRegion.setText(Formats.STRING.formatValue(customer[20]));  txtCountry.setText(Formats.STRING.formatValue(customer[21]));  m_CategoryModel.setSelectedKey(customer[22]);  m_jImage.setImage((BufferedImage)customer[23]);  j_mDOB.setText(Formats.DATE.formatValue(customer[24]));  txtDiscount.setText(Formats.PERCENT.formatValue(customer[25]));  m_jTaxID.setEnabled(true);  m_jSearchkey.setEnabled(true);  m_jName.setEnabled(true);  m_jNotes.setEnabled(true);  txtMaxdebt.setEnabled(true);  txtDiscount.setEnabled(true);  txtCurdebt.setEnabled(true);  txtCurdate.setEnabled(true);  m_jVisible.setEnabled(true);  jcard.setEnabled(true);  txtFirstName.setEnabled(true);  txtLastName.setEnabled(true);  txtEmail.setEnabled(true);  txtPhone.setEnabled(true);  txtPhone2.setEnabled(true);  txtFax.setEnabled(true);  m_jImage.setEnabled(true);  txtAddress.setEnabled(true);  txtAddress2.setEnabled(true);  txtPostal.setEnabled(true);  txtCity.setEnabled(true);  txtRegion.setEnabled(true);  txtCountry.setEnabled(true);  j_mDOB.setEnabled(true);  m_jCategory.setEnabled(true);  jButton2.setEnabled(true);  jButton3.setEnabled(true);  txtCurdate.repaint();  txtCurdebt.repaint();  updateDoB();  repaint();  refresh();}  }
class C{  public FastqWriterWrapper(File baseOutput,SdfReaderWrapper reader,int lineLength,boolean rename,boolean gzip,int def,boolean interleavePaired) throws IOException {  super(baseOutput,reader,lineLength,rename,gzip,interleavePaired,EXTS);  if (reader.type() != SequenceType.DNA) {    throw new InvalidParamsException(ErrorType.INFO_ERROR,"The input SDF contains protein data, which cannot be converted to FASTQ.");  }  if (!reader.hasQualityData()) {    if (def >= (int)'!') {      mDefaultQualities=StringUtils.getCharString((char)def,reader.maxLength());    } else {      throw new InvalidParamsException(ErrorType.INFO_ERROR,"The input SDF does not have quality data and no default was provided.");    }  }}  }
class C{  public static List<AngularJSCompletionProposal> findAndFilterAutocompletions(AngularJSQuery query){  String prefix=query.getPrefix();  List<AngularJSCompletionProposal> searchedProposals=angularJSTrie.search(prefix);  List<AngularJSCompletionProposal> result=new ArrayList<>();  for (  AngularJSCompletionProposal proposal : searchedProposals) {    if (!query.getExistingAttributes().contains(proposal.getName())) {      result.add(proposal);    }  }  return result;}  }
class C{  public static float dot(Vector3 a,Vector3 b){  return a.getX() * b.getX() + a.getY() * b.getY() + a.getZ() * b.getZ();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  Node nameNode;  Node firstChild;  String childValue;  doc=(Document)load("staff",false);  nameList=doc.getElementsByTagName("name");  nameNode=nameList.item(3);  firstChild=nameNode.getFirstChild();  childValue=firstChild.getNodeValue();  assertEquals("documentGetElementsByTagNameValueAssert","Jeny Oconnor",childValue);}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public void testSameNodeInFromToSetNotCheapest(){  Fixture f=new Fixture();  TestTimeCost tc=new TestTimeCost();  tc.setData(Id.create(1,Link.class),2.0,2.0);  tc.setData(Id.create(2,Link.class),1.0,1.0);  tc.setData(Id.create(3,Link.class),3.0,3.0);  tc.setData(Id.create(4,Link.class),2.0,2.0);  tc.setData(Id.create(5,Link.class),1.0,1.0);  tc.setData(Id.create(6,Link.class),3.0,3.0);  tc.setData(Id.create(7,Link.class),4.0,4.0);  MultiNodeDijkstra dijkstra=new MultiNodeDijkstra(f.network,tc,tc);  Map<Node,InitialNode> fromNodes=new HashMap<Node,InitialNode>();  fromNodes.put(f.network.getNodes().get(Id.create(2,Node.class)),new InitialNode(2.0,2.0));  fromNodes.put(f.network.getNodes().get(Id.create(4,Node.class)),new InitialNode(10.0,10.0));  Map<Node,InitialNode> toNodes=new HashMap<Node,InitialNode>();  toNodes.put(f.network.getNodes().get(Id.create(4,Node.class)),new InitialNode(8.0,8.0));  toNodes.put(f.network.getNodes().get(Id.create(6,Node.class)),new InitialNode(3.0,3.0));  Path p=dijkstra.calcLeastCostPath(fromNodes,toNodes,null);  assertNotNull("no path found!",p);  assertEquals(3,p.links.size());  assertEquals("2",p.links.get(0).getId().toString());  assertEquals("7",p.links.get(1).getId().toString());  assertEquals("6",p.links.get(2).getId().toString());}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Starting service");  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  validateStartState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      sendStageProgressPatch(startState.taskState.stage);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public Boolean isAes(){  return aes;}  }
class C{  public void testSenderWithSpringXmlUsingJNDI() throws Exception {  String config="spring-jndi.xml";  assertSenderConfig(config);}  }
class C{  public SimpleString concat(final char c){  byte[] bytes=new byte[data.length + 2];  System.arraycopy(data,0,bytes,0,data.length);  bytes[data.length]=(byte)(c & 0xFF);  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);  return new SimpleString(bytes);}  }
class C{  void startQuery(final int taskId,final Object tag,final Object cookie,final boolean distinct,final String table,final String[] columns,final String selection,final String[] selectionArgs,final String groupBy,final String having,final String orderBy,final String limit,final AsyncDbQueryCallback callback){  final QueryTask task=new QueryTask(Type.QUERY,taskId,tag,cookie,callback);  task.mDistinct=distinct;  task.mTableName=table;  task.mColumns=columns;  task.mSelection=selection;  task.mSelectionArgs=selectionArgs;  task.mGroupBy=groupBy;  task.mHaving=having;  task.mOrderBy=orderBy;  task.mLimit=limit;  mTaskQueue.add(task);  new QueryAsyncTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,task);}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X509Name subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,subject,key,attributes,signingKey,BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  protected Color GetColorFromString(String token){  String tokstring=(String)token;  Color result=Color.black;  if (Debug.debugging("areas")) {    Debug.output("AreaHandler: GetColorFromString(" + tokstring + ")");  }  if (tokstring.equals("black"))   result=Color.black; else   if (tokstring.equals("blue"))   result=Color.blue; else   if (tokstring.equals("cyan"))   result=Color.cyan; else   if (tokstring.equals("darkGray"))   result=Color.darkGray; else   if (tokstring.equals("gray"))   result=Color.gray; else   if (tokstring.equals("green"))   result=Color.green; else   if (tokstring.equals("lightGray"))   result=Color.lightGray; else   if (tokstring.equals("magenta"))   result=Color.magenta; else   if (tokstring.equals("orange"))   result=Color.orange; else   if (tokstring.equals("pink"))   result=Color.pink; else   if (tokstring.equals("red"))   result=Color.red; else   if (tokstring.equals("white"))   result=Color.white; else   if (tokstring.equals("yellow"))   result=Color.yellow; else   result=Color.decode(tokstring);  if (Debug.debugging("areas")) {    Debug.output("AreaHandler.GetColorFromToken returns (" + result + ")");  }  return result;}  }
class C{  public EnglishWikipediaPage(){  super();}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  Node n=m_currentNode.getLastChild();  if (n instanceof CDATASection)   ((CDATASection)n).appendData(s); else   if (n instanceof Comment)   ((Comment)n).appendData(s);}  }
class C{  public static void start(String pathToScript) throws InstantiationException, IllegalAccessException, IOException {  ClassLoader parent=ExperimentStarter.class.getClassLoader();  GroovyClassLoader loader=new GroovyClassLoader(parent);  StringWriter writer=new StringWriter();  IOUtils.copy(parent.getResourceAsStream(pathToScript),writer,"UTF-8");  Class<?> groovyClass=loader.parseClass(writer.toString());  GroovyObject groovyObject=(GroovyObject)groovyClass.newInstance();  Object[] a={};  groovyObject.invokeMethod("run",a);  loader.close();}  }
class C{  public void test_problem3_buildOrder3() throws Exception {  final BTree btree=getProblem3();  btree.dump(Level.DEBUG,System.err);  doBuildAndDiscardCache(btree,3);  final IndexSegment seg=new IndexSegmentStore(outFile).loadIndexSegment();  try {    assertEquals(3,seg.getBranchingFactor());    assertEquals(2,seg.getHeight());    assertEquals(7,seg.getLeafCount());    assertEquals(4,seg.getNodeCount());    assertEquals(20,seg.getEntryCount());    dumpIndexSegment(seg);{      final Node D=(Node)seg.getRoot();      final Node A=(Node)D.getChild(0);      final Node B=(Node)D.getChild(1);      final Node C=(Node)D.getChild(2);      final Leaf a=(Leaf)A.getChild(0);      final Leaf b=(Leaf)A.getChild(1);      final Leaf c=(Leaf)A.getChild(2);      final Leaf d=(Leaf)B.getChild(0);      final Leaf e=(Leaf)B.getChild(1);      final Leaf f=(Leaf)C.getChild(0);      final Leaf g=(Leaf)C.getChild(1);      assertKeys(new int[]{10,16},D);      assertEntryCounts(new int[]{9,6,5},D);      assertKeys(new int[]{4,7},A);      assertEntryCounts(new int[]{3,3,3},A);      assertKeys(new int[]{13},B);      assertEntryCounts(new int[]{3,3},B);      assertKeys(new int[]{19},C);      assertEntryCounts(new int[]{3,2},C);      assertKeys(new int[]{1,2,3},a);      assertKeys(new int[]{4,5,6},b);      assertKeys(new int[]{7,8,9},c);      assertKeys(new int[]{10,11,12},d);      assertKeys(new int[]{13,14,15},e);      assertKeys(new int[]{16,17,18},f);      assertKeys(new int[]{19,20},g);    }    assertSameBTree(btree,seg);  }  finally {    seg.close();  }}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  private static String findPrefix(final PyElement element,final int offset){  return TextRange.create(element.getTextRange().getStartOffset(),offset).substring(element.getContainingFile().getText());}  }
class C{  public static ResultSet testCall(Connection conn,int a,String b,Timestamp c,Timestamp d) throws SQLException {  SimpleResultSet rs=new SimpleResultSet();  rs.addColumn("A",Types.INTEGER,0,0);  rs.addColumn("B",Types.VARCHAR,0,0);  rs.addColumn("C",Types.TIMESTAMP,0,0);  rs.addColumn("D",Types.TIMESTAMP,0,0);  if ("jdbc:columnlist:connection".equals(conn.getMetaData().getURL())) {    return rs;  }  rs.addRow(a * 2,b.toUpperCase(),new Timestamp(c.getTime() + 1),d);  return rs;}  }
class C{  public static void extract(File zipFile,File destDir) throws IOException {  ZipFile zf=new ZipFile(zipFile);  try {    extract(zf,destDir);  }  finally {    zf.close();  }}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public void unregister(){  baseMessage.getBotInstance().getInlineMenuRegistry().unregister(this);}  }
class C{  @SuppressWarnings("unchecked") public static <T,U>Flux<U> ofType(final Flux<T> stream,final Class<? extends U> type){  return stream.filter(null).map(null);}  }
class C{  public void addMaxConnections(int maxConnectionsDelta){  setMaxConnections(getMaxConnections() + maxConnectionsDelta);}  }
class C{  private void mapAbsoluteToRelative(float[] destPoints,float[] srcPoints,int numPoints){  for (int i=0; i < numPoints; i++) {    destPoints[i * 2 + 0]=(srcPoints[i * 2 + 0] - mImageBounds.left) / mImageBounds.width();    destPoints[i * 2 + 1]=(srcPoints[i * 2 + 1] - mImageBounds.top) / mImageBounds.height();  }}  }
class C{  public static void delete(File f){  delete_(f,false);}  }
class C{  public SimpleInspector(Properties properties,GUIState state,String name){  this(properties,state,name,state.getMaximumPropertiesForInspector());}  }
class C{  public BatchScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  private static File createFile(String filepath,boolean recursion) throws IOException {  File f=null;  if (!TextUtils.isEmpty(filepath))   f=new File(filepath);  if (f != null && !f.exists()) {    try {      f.createNewFile();    } catch (    IOException e) {      if (!recursion) {        throw e;      }      File parent=f.getParentFile();      if (!parent.exists()) {        parent.mkdirs();      }      try {        f.createNewFile();      } catch (      IOException e1) {        throw e1;      }    }  }  return f;}  }
class C{  public boolean isCellEditable(int row,int col){  int numParents=getDirichletBayesIm().getNumParents(getNodeIndex());  int numColumns=getDirichletBayesIm().getNumColumns(getNodeIndex());  return !(col < numParents) && col < numParents + numColumns + 1;}  }
class C{  public int doEndTag() throws JspException {  return EVAL_PAGE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.097 -0400",hash_original_method="12A02A287ADE8B8C967BB9DD34A9FF2E",hash_generated_method="C71A0F98834D59EAB17314599B7E441B") public DeferredFileOutputStream(int threshold,File outputFile){  this(threshold,outputFile,null,null,null);}  }
class C{  public int fieldIndex(String field){  Integer ret=mIndex.get(field);  if (ret == null) {    throw new IllegalArgumentException(field + " does not exist");  }  return ret;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void modifyEnergyStored(int energy){  this.energy+=energy;  if (this.energy > capacity) {    this.energy=capacity;  } else   if (this.energy < 0) {    this.energy=0;  }}  }
class C{  public Plot withSize(float size){  if (chart.getPlot() instanceof XYPlot) {    XYPlot plot=chart.getXYPlot();    XYItemRenderer renderer=plot.getRenderer(currentDataset);    if (renderer instanceof XYDotRenderer) {      ((XYDotRenderer)renderer).setDotWidth((int)(size * 2));      ((XYDotRenderer)renderer).setDotHeight((int)(size * 2));    } else     if (renderer.getBaseStroke() instanceof BasicStroke) {      BasicStroke oldStroke=(BasicStroke)renderer.getBaseStroke();      BasicStroke newStroke=new BasicStroke(size,oldStroke.getEndCap(),oldStroke.getLineJoin(),oldStroke.getMiterLimit(),oldStroke.getDashArray(),oldStroke.getDashPhase());      renderer.setBaseStroke(newStroke);    } else {      renderer.setBaseStroke(new BasicStroke(size,1,1));    }  }  return this;}  }
class C{  public int read(byte[] buf,int offset,int length) throws IOException {  if (_stream != null)   return _stream.read(buf,offset,length); else   return -1;}  }
class C{  protected final void ATTEMPT_INT_IFCMP(MemoryOperand mo,Operand oldValue,Operand newValue,ConditionOperand cond,BranchOperand target,BranchProfileOperand bp){  RegisterOperand temp=regpool.makeTempInt();  EMIT(MIR_Move.create(IA32_MOV,temp,newValue.copy()));  EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),oldValue.copy()));  EMIT(MIR_CompareExchange.create(IA32_LOCK_CMPXCHG,new RegisterOperand(getEAX(),TypeReference.Int),mo,temp.copyRO()));  EMIT(MIR_CondBranch.create(IA32_JCC,COND(cond),target.copy().asBranch(),(BranchProfileOperand)bp.copy()));}  }
class C{  public String attributeIndexesTipText(){  return "Sets a range attributes to process. Any non-nominal " + "attributes in the range are left untouched (\"first\" and \"last\" are valid values)";}  }
class C{  public void beginArray() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_BEGIN_ARRAY) {    push(JsonScope.EMPTY_ARRAY);    pathIndices[stackSize - 1]=0;    peeked=PEEKED_NONE;  } else {    throw new IllegalStateException("Expected BEGIN_ARRAY but was " + peek() + locationString());  }}  }
class C{  private static boolean isBulk(Method m){  if (!m.getName().startsWith("bulkTest"))   return false;  if (m.getReturnType() != BulkTest.class)   return false;  if (m.getParameterTypes().length != 0)   return false;  int mods=m.getModifiers();  if (Modifier.isStatic(mods))   return false;  if (Modifier.isAbstract(mods))   return false;  return true;}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  boxBorderStroke=(Stroke)SerializationUtils.unwrap((Serializable)in.readObject());  whiskerStroke=(Stroke)SerializationUtils.unwrap((Serializable)in.readObject());  centerBarStroke=(Stroke)SerializationUtils.unwrap((Serializable)in.readObject());}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void onCharacteristicRead(BluetoothGatt gatt,BluetoothGattCharacteristic characteristic,int status){}  }
class C{  public boolean contains(VirtualFile file){  if (file.getFileName().equals(shareName) || file.getFileName().equals(File.separator + shareName)) {    return true;  }  if (file.getFile() == null) {    return false;  }  String vfilename=file.getFile().getAbsolutePath();  String vrootname=backend.getRoot().getFile().getAbsolutePath();  if (vfilename.startsWith(vrootname + File.separator) || vfilename.equals(vrootname)) {    return true;  }  return false;}  }
class C{  public void addPath(Path path){  autoClear();  this.overlayGraphics.add(new PathGraphic(path));  this.updateField();}  }
class C{  public BigInteger optBigInteger(int index,BigInteger defaultValue){  try {    return this.getBigInteger(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private void applyUseSchema(String schema) throws SQLException {  boolean schemaSet=false;  if (schema != null && schema.length() > 0 && !schema.equals(this.currentSchema)) {    currentSchema=schema;    if (conn.supportsUseDefaultSchema()) {      String useQuery=conn.getUseSchemaQuery(schema);      if (logger.isDebugEnabled()) {        logger.debug("Setting default schema: " + useQuery);      }      statement.addBatch(useQuery);      schemaSet=true;    }  }  if (!schemaSet) {    if (logger.isDebugEnabled()) {      logger.debug("Schema was not set: schema=" + schema + " currentSchema="+ currentSchema);    }  }}  }
class C{  public PrivateKey engineLookupAndResolvePrivateKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Can I resolve " + element.getTagName() + "?");  }  if (privateKey != null && XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_KEYNAME)) {    String name=element.getFirstChild().getNodeValue();    if (keyName.equals(name)) {      return privateKey;    }  }  log.log(java.util.logging.Level.FINE,"I can't");  return null;}  }
class C{  public AppendToCertificateChainAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("AppendToCertificateChainAction.statusbar"));  putValue(NAME,res.getString("AppendToCertificateChainAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("AppendToCertificateChainAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("AppendToCertificateChainAction.image")))));}  }
class C{  public void assertNotEqual(int expected,int actual){  TestUtils.assertNotEqual(expected,actual);}  }
class C{  public Name wild(int n){  if (n < 1)   throw new IllegalArgumentException("must replace 1 or more " + "labels");  try {    Name newname=new Name();    copy(wild,newname);    newname.append(name,offset(n),getlabels() - n);    return newname;  } catch (  NameTooLongException e) {    throw new IllegalStateException("Name.wild: concatenate failed");  }}  }
class C{  public static ImageIcon loadImageFromURL(URL url){  URI uri=null;  if (url == null) {    return EMPTY_IMAGE;  }  try {    uri=url.toURI();    if (uri == null) {      return EMPTY_IMAGE;    }  } catch (  Exception e) {    return EMPTY_IMAGE;  }  ImageIcon icon=ICON_CACHE.get(uri);  if (icon == null) {    try {      icon=new ImageIcon(url);    } catch (    Exception ignored) {    } finally {      if (icon == null) {        icon=EMPTY_IMAGE;      }    }    ICON_CACHE.put(uri,icon);  }  return icon;}  }
class C{  public static boolean isDataFrameWithIDColumn(FrameMetadata frameMetadata){  return (frameMetadata != null && frameMetadata.getFrameFormat() != null && frameMetadata.getFrameFormat().hasIDColumn());}  }
class C{  public boolean process() throws ResourceNotFoundException, ParseErrorException, Exception {  data=null;  InputStream is=null;  errorCondition=null;  try {    is=resourceLoader.getResourceStream(name);  } catch (  ResourceNotFoundException rnfe) {    errorCondition=rnfe;    throw rnfe;  }  if (is != null) {    try {      BufferedReader br=new BufferedReader(new InputStreamReader(is,encoding));      data=rsvc.parse(br,name);      initDocument();      return true;    } catch (    UnsupportedEncodingException uce) {      String msg="Template.process : Unsupported input encoding : " + encoding + " for template "+ name;      errorCondition=new ParseErrorException(msg);      throw errorCondition;    }catch (    ParseException pex) {      errorCondition=new ParseErrorException(pex.getMessage());      throw errorCondition;    }catch (    Exception e) {      errorCondition=e;      throw e;    } finally {      is.close();    }  } else {    errorCondition=new ResourceNotFoundException("Unknown resource error for resource " + name);    throw errorCondition;  }}  }
class C{  public SnackbarWrapper appendMessage(CharSequence message,@ColorInt int color){  Spannable spannable=new SpannableString(message);  spannable.setSpan(new ForegroundColorSpan(color),0,spannable.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  messageView.append(spannable);  return this;}  }
class C{  protected void heapModified(){  modCount++;}  }
class C{  public static ServerListPingEvent callServerListPingEvent(Server craftServer,InetAddress address,String motd,int numPlayers,int maxPlayers){  ServerListPingEvent event=new ServerListPingEvent(address,motd,numPlayers,maxPlayers);  craftServer.getPluginManager().callEvent(event);  return event;}  }
class C{  public PeriodConverter addPeriodConverter(PeriodConverter converter) throws SecurityException {  checkAlterPeriodConverters();  if (converter == null) {    return null;  }  PeriodConverter[] removed=new PeriodConverter[1];  iPeriodConverters=iPeriodConverters.add(converter,removed);  return removed[0];}  }
class C{  public void addArchiveFailure(ArchiveFailure archiveFailure){  getArchiveFailures().add(archiveFailure);}  }
class C{  private void extractWithRadiusOne(BufferedImage image){  double o1, o2, o3;  int colorPos=0;  WritableRaster raster=ImageUtils.getGrayscaleImage(image).getRaster();  WritableRaster rasterColor=image.getRaster();  int[] pixel=new int[9];  int[] pattern=new int[8];  int[] px=new int[3];  for (int x=0; x < raster.getWidth() - 2; x++) {    for (int y=0; y < raster.getHeight() - 2; y++) {      Arrays.fill(pattern,0);      raster.getPixels(x,y,3,3,pixel);      if (pixel[0] >= pixel[4])       pattern[0]=1;      if (pixel[1] >= pixel[4])       pattern[1]=1;      if (pixel[2] >= pixel[4])       pattern[2]=1;      if (pixel[5] >= pixel[4])       pattern[3]=1;      if (pixel[8] >= pixel[4])       pattern[4]=1;      if (pixel[7] >= pixel[4])       pattern[5]=1;      if (pixel[6] >= pixel[4])       pattern[6]=1;      if (pixel[3] >= pixel[4])       pattern[7]=1;      rasterColor.getPixel(x,y,px);      o1=(double)(px[0] - px[1]) / sq2;      o2=(double)(px[0] + px[1] - 2 * px[2]) / sq6;      o3=(double)(px[0] + px[1] + px[2]) / sq3;      o1=(o1 + 255d / sq2) / (510d / sq2);      o2=(o2 + 510d / sq6) / (1020d / sq6);      o3=o3 / (3d * 255d / sq3);      colorPos=(int)Math.min(Math.floor(o1 * 2d),1d) + (int)Math.min(Math.floor(o2 * 2d),1d) * 2 + (int)Math.min(Math.floor(o3 * 2d),1d) * 2 * 2;      histogram[colorPos * 36 + getBin(pattern)]++;    }  }  double max=0;  for (int i=0; i < histogram.length; i++) {    max=Math.max(histogram[i],max);  }  for (int i=0; i < histogram.length; i++) {    histogram[i]=Math.floor((histogram[i] / max) * 8);  }}  }
class C{  public Statement crossJoin(Object table){  statement.append(" CROSS JOIN ").append(table);  return this;}  }
class C{  public static void onFlowActivityResult(Activity activity,int requestCode,int resultCode,Intent data){  if (AddAccountAlertDialog.FALLBACK_LOGIN_ACTIVITY_REQUEST_CODE == requestCode) {    if (resultCode == Activity.RESULT_OK) {      String homeServer=data.getStringExtra("homeServer");      String homeServerUrl=data.getStringExtra("homeServerUrl");      String userId=data.getStringExtra("userId");      String accessToken=data.getStringExtra("accessToken");      Credentials credentials=new Credentials();      credentials.userId=userId;      credentials.homeServer=homeServer;      credentials.accessToken=accessToken;      final HomeserverConnectionConfig hsConfig=new HomeserverConnectionConfig(Uri.parse(homeServerUrl),credentials);      MXSession session=Matrix.getInstance(activity).createSession(hsConfig);      Matrix.getInstance(activity).addSession(session);      activity.startActivity(new Intent(activity,SplashActivity.class));      activity.finish();    }  }}  }
class C{  private void siftUp(int k,RunnableScheduledFuture<?> key){  while (k > 0) {    int parent=(k - 1) >>> 1;    RunnableScheduledFuture<?> e=queue[parent];    if (key.compareTo(e) >= 0)     break;    queue[k]=e;    setIndex(e,k);    k=parent;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  public long create_esd_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  esd_descriptor=MP4Descriptor.createDescriptor(bitstream);  readed+=esd_descriptor.getReaded();  return readed;}  }
class C{  public static int deleteMovementLineMA(int M_MovementLine_ID,String trxName){  String sql="DELETE FROM M_MovementLineMA WHERE M_MovementLine_ID=" + M_MovementLine_ID;  return DB.executeUpdate(sql,trxName);}  }
class C{  private static void usage(){  System.out.println("Syntax: ProjectHostingWriteDemo --project <project> " + "--username <username> --password <password>\n" + "\t<project>\tProject on which the demo will run. This demo will "+ "create a new issue in the given project and add comments to it.\n"+ "\t<username>\tGoogle Account username\n"+ "\t<password>\tGoogle Account password\n");}  }
class C{  public void update(int n,byte[] b,int off,int len,ManifestEntryVerifier mev) throws IOException {  if (n != -1) {    if (parsingBlockOrSF) {      baos.write(b,off,n);    } else {      mev.update(b,off,n);    }  } else {    processEntry(mev);  }}  }
class C{  private void pushContext(BaseContext c){  contextStack.push(c);}  }
class C{  public final static String formatStatusLine(final StatusLine statline,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatStatusLine(null,statline).toString();}  }
class C{  public static final HashMap readThisMapXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, java.io.IOException {  HashMap map=new HashMap();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      if (name[0] != null) {        map.put(name[0],val);      } else {        throw new XmlPullParserException("Map value without name attribute: " + parser.getName());      }    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return map;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public double distance(final Int2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static String toString(final short value){  return Short.toString(value);}  }
class C{  public static double scalb(double value,int scaleFactor){  if (scaleFactor > -MAX_DOUBLE_EXPONENT && scaleFactor <= MAX_DOUBLE_EXPONENT) {    return value * twoPowNormal(scaleFactor);  }  final int MAX_SCALE=2 * MAX_DOUBLE_EXPONENT + 52 + 1;  final int exponentAdjust;  final int scaleIncrement;  final double exponentDelta;  if (scaleFactor < 0) {    scaleFactor=Math.max(scaleFactor,-MAX_SCALE);    scaleIncrement=-512;    exponentDelta=TWO_POW_N512;  } else {    scaleFactor=Math.min(scaleFactor,MAX_SCALE);    scaleIncrement=512;    exponentDelta=TWO_POW_512;  }  final int t=scaleFactor >> 9 - 1 >>> 32 - 9;  exponentAdjust=(scaleFactor + t & 512 - 1) - t;  value*=twoPowNormal(exponentAdjust);  scaleFactor-=exponentAdjust;  while (scaleFactor != 0) {    value*=exponentDelta;    scaleFactor-=scaleIncrement;  }  return value;}  }
class C{  public UncheckedExecutionException(@Nullable Throwable cause){  super(cause);}  }
class C{  public ScrollPaneWindowSupport(Component content,String windowTitle){  super(content,windowTitle);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public ActionNode(String nodeId){  super(nodeId);  actionValues=new HashSet<Value>();  sampler=new Random();  actionValues.add(ValueFactory.none());}  }
class C{  public ProjectTargetSettings(final INaviProject project){  this.project=project;}  }
class C{  public ReflectionToStringBuilder reflectionAppendArray(final Object array){  this.getStyle().reflectionAppendArrayDetail(this.getStringBuffer(),null,array);  return this;}  }
class C{  public boolean addEdit(UndoableEdit anEdit){  return false;}  }
class C{  public static double noise(double x,double y){  double n0=0, n1=0, n2=0;  double s=(x + y) * F2;  int i=fastfloor(x + s);  int j=fastfloor(y + s);  double t=(i + j) * G2;  double x0=x - (i - t);  double y0=y - (j - t);  int i1, j1;  if (x0 > y0) {    i1=1;    j1=0;  } else {    i1=0;    j1=1;  }  double x1=x0 - i1 + G2;  double y1=y0 - j1 + G2;  double x2=x0 + G22;  double y2=y0 + G22;  int ii=i & 0xff;  int jj=j & 0xff;  double t0=0.5 - x0 * x0 - y0 * y0;  if (t0 > 0) {    t0*=t0;    int gi0=perm[ii + perm[jj]] % 12;    n0=t0 * t0 * dot(grad3[gi0],x0,y0);  }  double t1=0.5 - x1 * x1 - y1 * y1;  if (t1 > 0) {    t1*=t1;    int gi1=perm[ii + i1 + perm[jj + j1]] % 12;    n1=t1 * t1 * dot(grad3[gi1],x1,y1);  }  double t2=0.5 - x2 * x2 - y2 * y2;  if (t2 > 0) {    t2*=t2;    int gi2=perm[ii + 1 + perm[jj + 1]] % 12;    n2=t2 * t2 * dot(grad3[gi2],x2,y2);  }  return 70.0 * (n0 + n1 + n2);}  }
class C{  protected void close() throws IOException {  shutdownEntry();  if (connection.isOpen())   connection.close();}  }
class C{  private boolean isSpecialCase(TypeVariable<?> typeVariable){  for (  Type bound : typeVariable.getBounds()) {    Class<?> clazz=GenericTypeReflector.erase(bound);    if (specialCases.contains(clazz))     return true;  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MOrder[").append(get_ID()).append("-").append(getDocumentNo()).append(",IsSOTrx=").append(isSOTrx()).append(",C_DocType_ID=").append(getC_DocType_ID()).append(", GrandTotal=").append(getGrandTotal()).append("]");  return sb.toString();}  }
class C{  protected static <A extends Annotation,T>Set<PersistentResource<T>> filter(Class<A> permission,Set<PersistentResource<T>> resources){  return filter(permission,resources,false);}  }
class C{  SamlTokenSpec buildRenewTokenSpec(Request req,Result authResult) throws InvalidRequestException, InvalidTimeRangeException {  assert req != null && req.getSamlToken() != null && req.getSignature() != null && req.getRst().getRenewTarget() != null && req.getRst().getRenewTarget().getAssertion() != null;  assert authResult != null && authResult.completed();  final ServerValidatableSamlToken renewToken=req.getSamlToken();  if (renewToken.isExternal()) {    throw new InvalidRequestException("Cannot renew external assertion. It must be renewed at it's issuer.");  }  final AssertionType renewAssertion=getRenewAssertion(req);  assert renewToken != null && renewAssertion != null;  assert renewToken.getConfirmationCertificate() != null && renewToken.getConfirmationCertificate().equals(req.getSignature().getCertificate());  final Confirmation confirmation=new Confirmation(req.getSignature().getCertificate());  final DelegationSpec delSpec=buildDelegationSpec(renewToken,renewAssertion,null,renewToken.isDelegable());  final RenewSpec renewSpec=RenewSpecExtractor.extractRenew(renewAssertion);  final Set<String> audience=renewToken.getAudience();  final List<Advice> presentAdvice=renewToken.getAdvice();  final List<Advice> requestedAdvice=presentAdvice;  return buildTokenSpec(req,authResult,confirmation,delSpec,renewSpec,audience,requestedAdvice,presentAdvice);}  }
class C{  public MutableShort(){  super();}  }
class C{  public static CCLabel makeLabel(String string,final CGSize dimensions,TextAlignment alignment,String fontname,float fontsize){  return new CCLabel(string,dimensions,alignment,fontname,fontsize);}  }
class C{  public static long sizeOf(Object obj,Accumulator accumulator){  return measureObjectSize(obj,accumulator);}  }
class C{  @Override public SmileGenerator createJsonGenerator(OutputStream out) throws IOException {  IOContext ctxt=_createContext(out,false);  return _createJsonGenerator(out,ctxt);}  }
class C{  protected void onShow(){}  }
class C{  public static void validateXML(URL schemaFileURL,Document xmlContent) throws SAXException, IOException, TransformerException {  SchemaFactory factory=SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");  Schema schema=factory.newSchema(schemaFileURL);  Validator validator=schema.newValidator();  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();  printDocument(xmlContent,byteArrayOutputStream);  ByteArrayInputStream bis=new ByteArrayInputStream(byteArrayOutputStream.toByteArray());  validator.validate(new StreamSource(bis));}  }
class C{  private void refreshBuffer() throws IOException {  if (output == null) {    throw new OutOfSpaceException();  }  output.write(buffer,0,position);  position=0;}  }
class C{  public boolean isPreferred(){  return preferred;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String redo(){  String name=getDelegator().getUndo().redo();  getDelegator().dirty();  return name;}  }
class C{  @Deprecated @Override public void recycle(){  LOG.trace("enter GetMethod.recycle()");  super.recycle();  setFollowRedirects(true);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_TYPE_REF:    return getDeclaredTypeRef();case N4JSPackage.N4_FIELD_DECLARATION__BOGUS_TYPE_REF:  return getBogusTypeRef();case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_NAME:return getDeclaredName();case N4JSPackage.N4_FIELD_DECLARATION__DEFINED_FIELD:if (resolve) return getDefinedField();return basicGetDefinedField();case N4JSPackage.N4_FIELD_DECLARATION__EXPRESSION:return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void dynInit(){  int row=addAttributes();  boolean isGuarantee=true;  boolean isSerial=true;  boolean isLot=true;  if (p_M_AttributeSet_ID > 0) {    MAttributeSet as=new MAttributeSet(Env.getCtx(),p_M_AttributeSet_ID,null);    isGuarantee=as.isGuaranteeDate();    isSerial=as.isSerNo();    isLot=as.isLot();  }  String s=Msg.translate(Env.getCtx(),"GuaranteeDate");  guaranteeDateSelection=new VComboBox(new Object[]{s + " <",s + " =",s + " >"});  initLotSelection();  if (isSerial) {    centerPanel.add(serNoLabel,new ALayoutConstraint(row++,0));    centerPanel.add(serNoField,null);  }  if (isLot) {    centerPanel.add(lotLabel,new ALayoutConstraint(row++,0));    centerPanel.add(lotField,null);    centerPanel.add(lotLabel2,new ALayoutConstraint(row++,0));    centerPanel.add(lotSelection,null);  }  if (isGuarantee) {    centerPanel.add(guaranteeDateSelection,new ALayoutConstraint(row++,0));    centerPanel.add(guaranteeDateField,null);  }  Dimension d=centerPanel.getPreferredSize();  d.width=400;  centerPanel.setPreferredSize(d);}  }
class C{  public static TransactionID createNewTransactionID(){  TransactionID tid=new TransactionID();  generateTransactionID(tid,12);  return tid;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private List<String> findCities(String input){  ArrayList<Prediction> syncPredictionList=RestClientManager.getInstance().getSyncPredictionList(input);  if (syncPredictionList != null) {    return ContentManager.getInstance().getPredictionDescriptionList();  }  return null;}  }
class C{  public MultiplexingSocket(InetAddress address,int port){  this((Socket)null);}  }
class C{  public void testStore2(){  store.put("A",Arrays.asList(new String[]{"E","D","E"}));  store.put("B",Arrays.asList(new String[]{"C","E","D","E"}));  List cModules=store.getListOfModulesToReparse("C");  List dModules=store.getListOfModulesToReparse("D");  List eModules=store.getListOfModulesToReparse("E");  assertEquals(1,cModules.size());  assertTrue(cModules.contains("B"));  assertEquals(2,dModules.size());  assertTrue(dModules.contains("A") && dModules.contains("B"));  assertEquals(2,eModules.size());  assertTrue(eModules.contains("B") && eModules.contains("A"));}  }
class C{  protected Set<NodePortTuple> identifyBroadcastDomainPorts(){  Set<NodePortTuple> broadcastDomainPorts=new HashSet<NodePortTuple>();  broadcastDomainPorts.addAll(this.portBroadcastDomainLinks.keySet());  Set<NodePortTuple> additionalNpt=new HashSet<NodePortTuple>();  Map<NodePortTuple,Set<Link>> spLinks=new HashMap<NodePortTuple,Set<Link>>();  for (  NodePortTuple npt : switchPortLinks.keySet()) {    spLinks.put(npt,new HashSet<Link>(switchPortLinks.get(npt)));  }  for (  NodePortTuple npt : spLinks.keySet()) {    Set<Link> links=spLinks.get(npt);    boolean bdPort=false;    ArrayList<Link> linkArray=new ArrayList<Link>();    if (links.size() > 2) {      bdPort=true;    } else     if (links.size() == 2) {      for (      Link l : links) {        linkArray.add(l);      }      Link l1=linkArray.get(0);      Link l2=linkArray.get(1);      if (!l1.getSrc().equals(l2.getDst()) || !l1.getSrcPort().equals(l2.getDstPort()) || !l1.getDst().equals(l2.getSrc())|| !l1.getDstPort().equals(l2.getSrcPort())) {        bdPort=true;      }    }    if (bdPort && (broadcastDomainPorts.contains(npt) == false)) {      additionalNpt.add(npt);    }  }  if (additionalNpt.size() > 0) {    log.warn("The following switch ports have multiple " + "links incident on them, so these ports will be treated " + " as braodcast domain ports. {}",additionalNpt);    broadcastDomainPorts.addAll(additionalNpt);  }  return broadcastDomainPorts;}  }
class C{  public static AsymmetricKeyParameter createKey(byte[] privateKeyInfoData) throws IOException {  return createKey(PrivateKeyInfo.getInstance(ASN1Primitive.fromByteArray(privateKeyInfoData)));}  }
class C{  static private String generateSalt(){  final int SALT_LENGTH=16;  final String SALT_BASE_CHARS="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./";  SecureRandom random=new SecureRandom();  StringBuilder salt=new StringBuilder(SALT_LENGTH);  for (int i=0; i < SALT_LENGTH; i++) {    salt.append(SALT_BASE_CHARS.charAt(random.nextInt(SALT_BASE_CHARS.length())));  }  return salt.toString();}  }
class C{  public void circularShift(int shift){  circularShift(x,shift);}  }
class C{  public DownloadTouchIcon(Tab tab,Context ctx,ContentResolver cr,WebView view){  mTab=tab;  mContext=ctx.getApplicationContext();  mContentResolver=cr;  mOriginalUrl=view.getOriginalUrl();  mUrl=view.getUrl();  mUserAgent=view.getSettings().getUserAgentString();}  }
class C{  public static boolean findMenuItem(String menuName,boolean click){  instrumentation.waitForIdleSync();  boolean findResult=false;  boolean isMoreMenuOpened=false;  if (hasActionBar) {    View button=getButtonOnScreen(menuName,false,false);    if (button != null) {      findResult=true;      if (click) {        SOLO.clickOnView(button);        instrumentation.waitForIdleSync();      }      return findResult;    }    showMenuItem();    findResult=SOLO.waitForText(menuName,1,LONG_WAIT_TIME,true);  } else {    SOLO.sendKey(KeyEvent.KEYCODE_MENU);    if (SOLO.searchText(menuName,1,true)) {      findResult=true;    } else     if (getMoreOptionView() != null) {      SOLO.clickOnView(getMoreOptionView());      findResult=SOLO.searchText(menuName,1,true);      isMoreMenuOpened=true;    }  }  if (findResult && click) {    SOLO.clickOnView(SOLO.getText(menuName));    instrumentation.waitForIdleSync();  } else {    if (isMoreMenuOpened) {      SOLO.goBack();    }    SOLO.goBack();  }  return findResult;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void addWorkerIfNecessary(){  if (idleWorkers.get() == 0) {synchronized (workers) {      if (workers.isEmpty() || (idleWorkers.get() == 0)) {        addWorker();      }    }  }}  }
class C{  protected void initConnectors() throws Exception {  if (!_disableHTTP) {    if (_unsecuredConnector == null) {      _unsecuredConnector=new SelectChannelConnector();    }    if (_unsecurePort != null) {      _unsecuredConnector.setPort(Integer.parseInt(_unsecurePort));    } else {      _unsecuredConnector.setPort(_serviceInfo.getEndpoint().getPort());    }    if (_httpBindAddress != null) {      _unsecuredConnector.setHost(_httpBindAddress);    }    if (lowResourcesConnections != null) {      _unsecuredConnector.setLowResourcesConnections(lowResourcesConnections);    }    if (lowResourcesMaxIdleTime != null) {      _unsecuredConnector.setLowResourcesMaxIdleTime(lowResourcesMaxIdleTime);    }    if (threadPool != null) {      _unsecuredConnector.setThreadPool(threadPool);    }    _server.addConnector(_unsecuredConnector);  }  if (!_disableSSL) {    SslContextFactory sslFac=new SslContextFactory();    sslFac.setIncludeCipherSuites(_ciphers);    KeyStore ks=KeyStoreUtil.getViPRKeystore(_coordinatorClient);    _log.debug("The certificates in Jetty is {}. ",ks.getCertificateChain(KeystoreEngine.ViPR_KEY_AND_CERTIFICATE_ALIAS));    sslFac.setCertAlias(KeystoreEngine.ViPR_KEY_AND_CERTIFICATE_ALIAS);    sslFac.setKeyStore(ks);    _securedConnector=new SslSelectChannelConnector(sslFac);    if (_securePort != null) {      _securedConnector.setPort(Integer.parseInt(_securePort));    } else {      _securedConnector.setPort(_serviceInfo.getEndpoint().getPort());    }    if (_bindAddress != null) {      _securedConnector.setHost(_bindAddress);    }    if (lowResourcesConnections != null) {      _securedConnector.setLowResourcesConnections(lowResourcesConnections);    }    if (lowResourcesMaxIdleTime != null) {      _securedConnector.setLowResourcesMaxIdleTime(lowResourcesMaxIdleTime);    }    if (threadPool != null) {      _securedConnector.setThreadPool(threadPool);    }    _server.addConnector(_securedConnector);  }  _server.setSendServerVersion(false);}  }
class C{  public void executeQuery(String query) throws IOException {  try {    log.debug("Using in-process Hive instance.");    String[] argv=getHiveArgs("-S","-e",query);    int status=cliDriver.run(argv);    if (status != 0) {      throw new IOException("Hive CliDriver exited with status=" + status);    }  } catch (  Exception e) {    throw new IOException("Exception thrown in Hive",e);  }}  }
class C{  private static void removeTrackers(EntityPlayerMP watcher,Entity target){  List<EntityCapability<?,?,Entity>> entityCapabilities=getEntityCapabilities(target);  for (  EntityCapability<?,?,Entity> capability : entityCapabilities) {    if (capability.getTrackingTime() >= 0) {      List<EntityCapabilityTracker> trackers=TRACKER_MAP.get(watcher);      if (trackers != null) {        Iterator<EntityCapabilityTracker> it=trackers.iterator();        while (it.hasNext()) {          EntityCapabilityTracker tracker=it.next();          if (tracker.getWatcher() == watcher)           it.remove();        }        if (trackers.isEmpty()) {          TRACKER_MAP.remove(watcher);        }      }    }  }}  }
class C{  protected void deleteSessionVariables(String sessionId,String... varNames){  if (sessionId.equals("")) {    return;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    Entity.Builder builder=Entity.builder(stateEntity);    StringBuilder delNames=new StringBuilder();    for (    String varName : varNames) {      delNames.append(varName + " ");      builder=builder.remove(varName);    }    datastore.update(builder.build());  } catch (  NullPointerException e) {  } finally {    if (transaction.active()) {      transaction.rollback();    }  }}  }
class C{  public Loader(ClassPool cp){  init(cp);}  }
class C{  public Placeholder convertToPlaceholder(Uri uri){  return createSessionFromUri(uri);}  }
class C{  private static boolean expect(StringTokenizer tokenizer,String token){  if (!tokenizer.hasMoreTokens()) {    return false;  }  String s=tokenizer.nextToken();  if (DEBUG) {    System.out.println("token=" + s);  }  return s.equals(token);}  }
class C{  private static <T>void findNonUbiquitousGoals(Map<TestCase,Set<T>> testToGoals){  Map<TestCase,Set<T>> goalMapCopy=new LinkedHashMap<>();  Set<T> commonGoals=new LinkedHashSet<>();  for (  Map.Entry<TestCase,Set<T>> entry : testToGoals.entrySet()) {    commonGoals.addAll(entry.getValue());  }  for (  Map.Entry<TestCase,Set<T>> entry : testToGoals.entrySet()) {    commonGoals.retainAll(entry.getValue());  }  for (  Map.Entry<TestCase,Set<T>> entry : testToGoals.entrySet()) {    Set<T> goalSet=new LinkedHashSet<T>(entry.getValue());    goalSet.removeAll(commonGoals);    goalMapCopy.put(entry.getKey(),goalSet);  }  testToGoals.putAll(goalMapCopy);}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW) public void removeOverdueOrganization(Organization organization) throws DeletionConstraintException, ObjectNotFoundException, TechnicalServiceNotAliveException, TechnicalServiceOperationException {  Organization savedOrganization=dm.getReference(Organization.class,organization.getKey());  deregisterOrganization(savedOrganization);}  }
class C{  private void annotate(StatementData sdata,String schema,String table,String operation){  sdata.setOption(ReplOptionParams.SCHEMA_NAME,schema);  if (table != null)   sdata.setOption(ReplOptionParams.TABLE_NAME,table);  sdata.setOption(ReplOptionParams.OPERATION_NAME,operation);}  }
class C{  public static Matrix33 matrixMultiply(Matrix33 m1,Matrix33 m2){  return new Matrix33(m1.xx * m2.xx + m1.xy * m2.yx + m1.xz * m2.zx,m1.xx * m2.xy + m1.xy * m2.yy + m1.xz * m2.zy,m1.xx * m2.xz + m1.xy * m2.yz + m1.xz * m2.zz,m1.yx * m2.xx + m1.yy * m2.yx + m1.yz * m2.zx,m1.yx * m2.xy + m1.yy * m2.yy + m1.yz * m2.zy,m1.yx * m2.xz + m1.yy * m2.yz + m1.yz * m2.zz,m1.zx * m2.xx + m1.zy * m2.yx + m1.zz * m2.zx,m1.zx * m2.xy + m1.zy * m2.yy + m1.zz * m2.zy,m1.zx * m2.xz + m1.zy * m2.yz + m1.zz * m2.zz);}  }
class C{  public static WrappedByteBuffer allocate(int capacity){  return new WrappedByteBuffer(capacity);}  }
class C{  Node[] genTrees(int depth,int ntrees){  Node[] trees=new Node[ntrees];  for (int i=0; i < ntrees; i++) {    trees[i]=new Node(null,depth);  }  return trees;}  }
class C{  public List<Address> listAddresses(int confirmations) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  params.put("confirmations",String.valueOf(confirmations));  String response=HttpClient.getInstance().get(String.format("merchant/%s/list",identifier),params);  JsonObject topElem=parseResponse(response);  List<Address> addresses=new ArrayList<Address>();  for (  JsonElement jAddr : topElem.get("addresses").getAsJsonArray()) {    JsonObject a=jAddr.getAsJsonObject();    Address address=new Address(a.get("balance").getAsLong(),a.get("address").getAsString(),a.has("label") && !a.get("label").isJsonNull() ? a.get("label").getAsString() : null,a.get("total_received").getAsLong());    addresses.add(address);  }  return addresses;}  }
class C{  public AddReferencesResponse clone(){  AddReferencesResponse result=new AddReferencesResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  private void speakWithCompletion(String text,SpeechController.UtteranceCompleteRunnable completedAction){  if ((mTelephonyManager != null) && (mTelephonyManager.getCallState() != TelephonyManager.CALL_STATE_IDLE)) {    mHandler.post(new SpeechController.CompletionRunner(completedAction,SpeechController.STATUS_INTERRUPTED));    return;  }  mSpeechController.speak(text,null,null,SpeechController.QUEUE_MODE_QUEUE,0,SpeechController.UTTERANCE_GROUP_DEFAULT,null,null,completedAction);}  }
class C{  public void dump(String msg){  if (true) {    System.err.println(msg + ": " + AsciiString.create(buf)+ " "+ pos+ "/"+ (len + 4));  }  int max=pos;  if (len + 4 > pos)   max=len + 4;  if (max > 1000)   max=1000;  if (true) {    for (int j=0; j < max; j+=16) {      System.err.println(hexLine(buf,j,len));    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof sage.vfs.MediaNode)   o=((sage.vfs.MediaNode)o).getDataObject();  return Boolean.valueOf(o instanceof MediaFile && (Wizard.getInstance().isMediaFileOK((MediaFile)o) || ((MediaFile)o).getGeneralType() == MediaFile.MEDIAFILE_LOCAL_PLAYBACK));}  }
class C{  public void onConfiguration(Activity activity,boolean firstTimeIn){  final String time=firstTimeIn ? "first time" : "second+ time";  Log.d(TAG,"onConfiguration() called the " + time + " with activity = "+ activity);  mActivity=new WeakReference<>((AcronymActivity)activity);  if (firstTimeIn) {    mAcronymCache=new ContentProviderTimeoutCache(activity.getApplicationContext());    mAcronymWebServiceProxy=null;  } else   updateResultsDisplay();}  }
class C{  public String globalInfo(){  return "Only outputs the significance indicators. Can be used for spotting patterns.";}  }
class C{  private void cmd_updateArchive(){  MArchive ar=m_archives[m_index];  boolean update=false;  if (!isSame(nameField.getText(),ar.getName())) {    String newText=nameField.getText();    if (newText != null && newText.length() > 0) {      ar.setName(newText);      update=true;    }  }  if (!isSame(descriptionField.getText(),ar.getDescription())) {    ar.setDescription(descriptionField.getText());    update=true;  }  if (!isSame(helpField.getText(),ar.getHelp())) {    ar.setHelp(helpField.getText());    update=true;  }  log.info("Update=" + update);  if (update)   ar.saveEx();  m_index++;  updateVDisplay(false);}  }
class C{  private static long perm6464(long c,long[][] p){  long out=0L;  for (int i=8; --i >= 0; ) {    int t=(int)(0x00ff & c);    c>>=8;    long tp=p[i << 1][t & 0x0f];    out|=tp;    tp=p[(i << 1) + 1][t >> 4];    out|=tp;  }  return out;}  }
class C{  public BasicStroke unwrap(){  return new BasicStroke(width,cap,join,miterlimit,dash,dash_phase);}  }
class C{  public static IPath toPath(URI uri){  if (uri == null)   return null;  final String scheme=uri.getScheme();  if (scheme == null || EFS.SCHEME_FILE.equals(scheme))   return new Path(uri.getSchemeSpecificPart());  return null;}  }
class C{  public File document(){  return document;}  }
class C{  public NtlmPasswordAuthentication(String domain,String username,byte[] challenge,byte[] ansiHash,byte[] unicodeHash){  if (domain == null || username == null || ansiHash == null || unicodeHash == null) {    throw new IllegalArgumentException("External credentials cannot be null");  }  this.domain=domain;  this.username=username;  this.password=null;  this.challenge=challenge;  this.ansiHash=ansiHash;  this.unicodeHash=unicodeHash;  hashesExternal=true;}  }
class C{  public RetryAfterHeader createRetryAfterHeader(int retryAfter) throws InvalidArgumentException {  if (retryAfter < 0)   throw new InvalidArgumentException("bad retryAfter arg");  RetryAfter r=new RetryAfter();  r.setRetryAfter(retryAfter);  return r;}  }
class C{  private static boolean isZip(File file) throws IOException {  try {    (new ZipFile(file)).close();  } catch (  ZipException e) {    return false;  }  return true;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus activateInstance(String instanceId,ProvisioningSettings settings) throws APPlatformException {  LOGGER.info("activateInstance({})",LogAndExceptionConverter.getLogText(instanceId,settings));  try {    PropertyHandler ph=PropertyHandler.withSettings(settings);    ph.setOperation(Operation.EC2_ACTIVATION);    ph.setState(FlowState.ACTIVATION_REQUESTED);    InstanceStatus result=new InstanceStatus();    result.setChangedParameters(settings.getParameters());    return result;  } catch (  Throwable t) {    throw LogAndExceptionConverter.createAndLogPlatformException(t,Context.ACTIVATION);  }}  }
class C{  protected EquationRefImpl(){  super();}  }
class C{  public static Query<AppResult> generateSearchQuery(String selectParams,Map<String,String> searchParams){  if (searchParams == null || searchParams.isEmpty()) {    return AppResult.find.select(selectParams).order().desc(AppResult.TABLE.FINISH_TIME);  }  ExpressionList<AppResult> query=AppResult.find.select(selectParams).where();  String username=searchParams.get(USERNAME);  if (Utils.isSet(username)) {    query=query.eq(AppResult.TABLE.USERNAME,username);  }  String queuename=searchParams.get(QUEUE_NAME);  if (Utils.isSet(queuename)) {    query=query.eq(AppResult.TABLE.QUEUE_NAME,queuename);  }  String jobType=searchParams.get(JOB_TYPE);  if (Utils.isSet(jobType)) {    query=query.eq(AppResult.TABLE.JOB_TYPE,jobType);  }  String severity=searchParams.get(SEVERITY);  if (Utils.isSet(severity)) {    String analysis=searchParams.get(ANALYSIS);    if (Utils.isSet(analysis)) {      query=query.eq(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.HEURISTIC_NAME,analysis).ge(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.SEVERITY,severity);    } else {      query=query.ge(AppResult.TABLE.SEVERITY,severity);    }  }  String startedTimeBegin=searchParams.get(STARTED_TIME_BEGIN);  if (Utils.isSet(startedTimeBegin)) {    long time=parseTime(startedTimeBegin);    if (time > 0) {      query=query.ge(AppResult.TABLE.START_TIME,time);    }  }  String startedTimeEnd=searchParams.get(STARTED_TIME_END);  if (Utils.isSet(startedTimeEnd)) {    long time=parseTime(startedTimeEnd);    if (time > 0) {      query=query.le(AppResult.TABLE.START_TIME,time);    }  }  String finishedTimeBegin=searchParams.get(FINISHED_TIME_BEGIN);  if (Utils.isSet(finishedTimeBegin)) {    long time=parseTime(finishedTimeBegin);    if (time > 0) {      query=query.ge(AppResult.TABLE.FINISH_TIME,time);    }  }  String finishedTimeEnd=searchParams.get(FINISHED_TIME_END);  if (Utils.isSet(finishedTimeEnd)) {    long time=parseTime(finishedTimeEnd);    if (time > 0) {      query=query.le(AppResult.TABLE.FINISH_TIME,time);    }  }  if (Utils.isSet(startedTimeBegin) || Utils.isSet(startedTimeEnd)) {    return query.order().desc(AppResult.TABLE.START_TIME);  } else {    return query.order().desc(AppResult.TABLE.FINISH_TIME);  }}  }
class C{  public void removeVolumeFromStorageGroupsIfVolumeIsNotInAnyMV(StorageSystem storage,BlockObject bo){  CloseableIterator<CIMObjectPath> mvPathItr=null;  CloseableIterator<CIMInstance> sgInstancesItr=null;  boolean isSGInAnyMV=true;  try {    _log.info("Checking if device {} needs to be removed from Storage Groups which is not in any Masking View",bo.getNativeGuid());    CIMObjectPath volumePath=_cimPath.getBlockObjectPath(storage,bo);    mvPathItr=getAssociatorNames(storage,volumePath,null,SYMM_LUN_MASKING_VIEW,null,null);    if (!mvPathItr.hasNext()) {      isSGInAnyMV=false;    }    if (!isSGInAnyMV) {      _log.info("Device {} is not in any Masking View, hence removing it from Storage Groups if any",bo.getNativeGuid());      boolean forceFlag=ExportUtils.useEMCForceFlag(_dbClient,bo.getId());      sgInstancesItr=getAssociatorInstances(storage,volumePath,null,SmisConstants.SE_DEVICE_MASKING_GROUP,null,null,PS_ELEMENT_NAME);      while (sgInstancesItr.hasNext()) {        CIMInstance sgPath=sgInstancesItr.next();        String storageGroupName=CIMPropertyFactory.getPropertyValue(sgPath,SmisConstants.CP_ELEMENT_NAME);        if (!checkStorageGroupInAnyMaskingView(storage,sgPath.getObjectPath())) {          int sgVolumeCount=getVMAXStorageGroupVolumeCount(storage,storageGroupName);          if (sgVolumeCount == 1) {            WBEMClient client=getConnection(storage).getCimClient();            removeVolumeGroupFromPolicyAndLimitsAssociation(client,storage,sgPath.getObjectPath());          }          removeVolumesFromStorageGroup(storage,storageGroupName,Collections.singletonList(bo.getId()),forceFlag);          if (sgVolumeCount == 1) {            _log.info("Deleting Empty Storage Group {}",storageGroupName);            deleteMaskingGroup(storage,storageGroupName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);          }        }      }    } else {      _log.info("Found that Device {} is part of Masking View {}",bo.getNativeGuid(),mvPathItr.next());    }  } catch (  Exception e) {    _log.warn("Exception while trying to remove device {} from Storage Groups which is not in any Masking View",bo.getNativeGuid(),e);  } finally {    closeCIMIterator(mvPathItr);    closeCIMIterator(sgInstancesItr);  }}  }
class C{  public void onResume(boolean multitasking){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onResume(multitasking);    }  }}  }
class C{  public ThrowStmt newThrowStmt(Value op){  return new JThrowStmt(op);}  }
class C{  public FastStringReader(String s){  this.str=s;  this.length=s.length();}  }
class C{  private void handleHtmlCloseAccount(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleCloseAccount();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("account");  pageWrapper.addHeader();  if (isUserALocalAdminOrNotClosed(requestAndResponse)) {    try {      final String userId=getURIParameterOrUserId(requestAndResponse);      final User currentUser=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));      final User editedUser=dbLogic.getUserById(userId);      if (editedUser == null) {        requestAndResponse.print(servletText.errorNoAccountFound());      } else {        final boolean currentIsEditedUser=isCurrentUserTheEditedUser(currentUser,editedUser);        final boolean isUserAdmin=isUserAnAdmin(requestAndResponse);        if (!isUserAdmin && !currentIsEditedUser) {          requestAndResponse.print(servletText.errorPageNotAllowed());        } else {          boolean needsForm=true;          boolean needsCurrentPassword=isCurrentPasswordNeeded(editedUser,currentIsEditedUser,isUserAdmin);          final String submitted=requestAndResponse.request.getParameter("save");          if (submitted != null) {            boolean needsChange=false;            boolean hasErrors=false;            if (isTheCsrftWrong(requestAndResponse,requestAndResponse.request.getParameter("csrft"))) {              requestAndResponse.print(servletText.errorRequiresSignIn(false));              needsForm=false;            } else {              if (needsCurrentPassword) {                final String realPassword=editedUser.getPassword();                final String currentPassword=requestAndResponse.request.getParameter("currentpassword");                if (currentPassword == null || currentPassword.isEmpty()) {                  addErrorMessage(requestAndResponse,servletText.errorPasswordMustNotBeBlank());                  hasErrors=true;                } else                 if (!AccountAttributeValidator.isPasswordValid(currentPassword)) {                  addErrorMessage(requestAndResponse,servletText.errorCurrentPasswordIsIncorrect());                  hasErrors=true;                } else                 if (realPassword == null || !realPassword.equals(DigestUtils.sha1Hex(currentPassword))) {                  addErrorMessage(requestAndResponse,servletText.errorCurrentPasswordIsIncorrect());                  hasErrors=true;                }              }              needsChange=!editedUser.getIsAccountClosed();              if (needsChange && !hasErrors) {                final Long time=new Long(System.currentTimeMillis());                editedUser.setModTime(time);                editedUser.setIsAccountClosed(true);                addSuccessMessage(requestAndResponse,servletText.sentenceChangesWereSaved());                needsForm=false;              } else               if (hasErrors) {                addErrorMessage(requestAndResponse,servletText.errorChangesWereNotSaved());              } else {                addErrorMessage(requestAndResponse,servletText.errorNoChangesToSave());                needsForm=false;              }            }          }          if (needsForm) {            needsCurrentPassword=isCurrentPasswordNeeded(editedUser,currentIsEditedUser,isUserAdmin);            requestAndResponse.print("<form action=\"/closeAccount/" + (currentIsEditedUser ? "" : userId) + "\" method=\"POST\"><div class=\"account\">"+ "<input type=\"hidden\" name=\"csrft\" value=\""+ getCsrft(requestAndResponse)+ "\">"+ "<div class=\"infoheader\">"+ servletText.sentenceSureYouWantToCloseAccount(currentIsEditedUser,StringEscapeUtils.escapeHtml4(editedUser.getUserName()))+ "</div>");            if (needsCurrentPassword) {              requestAndResponse.print("<input type=\"password\" id=\"currentpassword\" name=\"currentpassword\" placeholder=\"" + servletText.sentenceCurrentPassword(currentIsEditedUser) + "\" maxlength=\"20\"><br>");            }            requestAndResponse.print("<table class=\"responseAndSave\"><tr>" + "<td><div id=\"response\"></div></td>" + "<td><button onclick=\"replacePaneForForm(event, '" + servletText.buttonCloseAccount() + "'); return false;\" id=\"save\" name=\"save\" class=\"specialbutton\" style=\"float:right; margin-top:10px;\">"+ servletText.buttonCloseAccount()+ "</button></td>"+ "</tr></table></div>"+ "</form>");          }        }      }      dbLogic.commit();    } catch (    final PersistenceException e) {      requestAndResponse.print(servletText.errorInternalDatabase());    }  }  pageWrapper.addFooter();}  }
class C{  private void jbInit(){  CompiereColor.setBackground(mainPanel);  mainPanel.setLayout(mainLayout);  mainPanel.setPreferredSize(new Dimension(1000,400));  parameterPanel.setLayout(parameterLayout);  labelProcess.setLabelFor(fieldProcess);  labelProcess.setText(Msg.translate(Env.getCtx(),"HR_Process_ID"));  labelEmployee.setLabelFor(fieldEmployee);  labelEmployee.setText(Msg.translate(Env.getCtx(),"HR_Employee_ID"));  labelConcept.setLabelFor(fieldConcept);  labelConcept.setText(Msg.translate(Env.getCtx(),"HR_Concept_ID"));  labelValidFrom.setLabelFor(fieldValidFrom);  labelValidFrom.setText(Msg.translate(Env.getCtx(),"Date"));  labelDescription.setLabelFor(fieldDescription);  labelDescription.setText(Msg.translate(Env.getCtx(),"Description"));  labelColumnType.setLabelFor(fieldColumnType);  labelColumnType.setText(Msg.translate(Env.getCtx(),"ColumnType"));  mainPanel.add(parameterPanel,BorderLayout.NORTH);  parameterPanel.add(labelProcess,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldProcess,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelEmployee,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldEmployee,new GridBagConstraints(3,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelValidFrom,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldValidFrom,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelConcept,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldConcept,new GridBagConstraints(3,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelColumnType,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldColumnType,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelValue,new GridBagConstraints(2,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldQty,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldAmount,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldDate,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldText,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelDescription,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldDescription,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(bOk,new GridBagConstraints(3,3,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  mainPanel.add(dataStatus,BorderLayout.SOUTH);  mainPanel.add(dataPane,BorderLayout.CENTER);  dataPane.getViewport().add(miniTable,null);  commandPanel.setLayout(commandLayout);  commandLayout.setAlignment(FlowLayout.RIGHT);  commandLayout.setHgap(10);}  }
class C{  public void readFile() throws JDOMException, IOException {  readFile(defaultConsistFilename());}  }
class C{  public Set<N> nodes(){  rw.readLock().lock();  try {    return new HashSet<>(nodes);  }  finally {    rw.readLock().unlock();  }}  }
class C{  public static String formatTime(Context context,long timestamp){  if (sCalendar == null) {    sCalendar=(GregorianCalendar)GregorianCalendar.getInstance();  }  if (sOffset == null) {    sOffset=new SantaPreferences(context).getOffset();  }  sCalendar.setTimeInMillis(timestamp - sOffset);  return String.format(TIME_FORMAT,sCalendar.get(GregorianCalendar.HOUR),sCalendar.get(GregorianCalendar.MINUTE));}  }
class C{  boolean postDominates(BasicBlock a,BasicBlock b,IR ir){  boolean res;  if (a == b) {    return true;  }  DominatorInfo info=ir.getDominators().getDominatorInfo(b);  res=info.isDominatedBy(a);  return res;}  }
class C{  public CRemoveConnectedFunctionAction(final Window parent,final INaviFunction function){  super("Remove function forwarding");  parentWindow=parent;  this.function=function;}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  protected void drawOrderedRenderable(DrawContext dc,OrderedLabel olbl){  this.beginDrawing(dc);  try {    this.doDrawOrderedRenderable(dc,this.pickSupport,olbl);    if (this.isEnableBatchRendering())     this.drawBatched(dc,olbl);  }  finally {    this.endDrawing(dc);  }}  }
class C{  public static MemoryUsage from(CompositeData cd){  if (cd == null) {    return null;  }  if (cd instanceof MemoryUsageCompositeData) {    return ((MemoryUsageCompositeData)cd).getMemoryUsage();  } else {    return new MemoryUsage(cd);  }}  }
class C{  public byte[] toArray(){  return (Arrays.copyOf(buffer,position));}  }
class C{  private static String dayToString(int day,int dayOfWeekLength){  return DateUtils.getDayOfWeekString(dayToUtilDay(day),dayOfWeekLength);}  }
class C{  static void sort(float[] a,int left,int right,float[] work,int workBase,int workLen){  while (left <= right && Float.isNaN(a[right])) {    --right;  }  for (int k=right; --k >= left; ) {    float ak=a[k];    if (ak != ak) {      a[k]=a[right];      a[right]=ak;      --right;    }  }  doSort(a,left,right,work,workBase,workLen);  int hi=right;  while (left < hi) {    int middle=(left + hi) >>> 1;    float middleValue=a[middle];    if (middleValue < 0.0f) {      left=middle + 1;    } else {      hi=middle;    }  }  while (left <= right && Float.floatToRawIntBits(a[left]) < 0) {    ++left;  }  for (int k=left, p=left - 1; ++k <= right; ) {    float ak=a[k];    if (ak != 0.0f) {      break;    }    if (Float.floatToRawIntBits(ak) < 0) {      a[k]=0.0f;      a[++p]=-0.0f;    }  }}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  public void ChangeSelector(LocalDateTime mSelectedDate){  LocalDateTime startDate=AppController.getInstance().getDate();  int addDays=datePosition * 7;  startDate=startDate.plusDays(addDays);  for (int i=0; i < 7; i++) {    if (mSelectedDate.getDayOfMonth() == startDate.getDayOfMonth()) {      textViewArray[i].setBackgroundResource(selectorDateIndicatorValue);      mDateSelectedBackground(i);    }    startDate=startDate.plusDays(1);  }}  }
class C{  private boolean isSameCharacter(char c1,char c2){  return c1 != NULL_CHARACTER && c1 == c2;}  }
class C{  public ClusteredPatterns(){}  }
class C{  public void clearChart(){  dataset.clear();}  }
class C{  public CloseableStaticBitmap(Bitmap bitmap,ResourceReleaser<Bitmap> resourceReleaser,QualityInfo qualityInfo,int rotationAngle){  mBitmap=Preconditions.checkNotNull(bitmap);  mBitmapReference=CloseableReference.of(mBitmap,Preconditions.checkNotNull(resourceReleaser));  mQualityInfo=qualityInfo;  mRotationAngle=rotationAngle;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.851 -0500",hash_original_method="47F03A4B7607EC42FAB580BDD530C12C",hash_generated_method="FE92A991493A370A91578410E0107D1F") public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  private boolean isRequiredPasswordFields(){  String fieldRequired=getString(R.string.Required_field);  boolean currentCheck=Utils.checkTextInputLayoutValueRequirement(currentPasswordWrapper,fieldRequired);  boolean newCheck=Utils.checkTextInputLayoutValueRequirement(newPasswordWrapper,fieldRequired);  boolean newAgainCheck=Utils.checkTextInputLayoutValueRequirement(newPasswordAgainWrapper,fieldRequired);  if (newCheck && newAgainCheck) {    if (!Utils.getTextFromInputLayout(newPasswordWrapper).equals(Utils.getTextFromInputLayout(newPasswordAgainWrapper))) {      Timber.d("The entries for the new password must match");      newPasswordWrapper.setErrorEnabled(true);      newPasswordAgainWrapper.setErrorEnabled(true);      newPasswordWrapper.setError(getString(R.string.The_entries_must_match));      newPasswordAgainWrapper.setError(getString(R.string.The_entries_must_match));      return false;    } else {      newPasswordWrapper.setErrorEnabled(false);      newPasswordAgainWrapper.setErrorEnabled(false);    }  }  return currentCheck && newCheck && newAgainCheck;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String grassFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      grassFile=whiteboxHeaderFile.replace(".dep",".txt");      (new File(grassFile)).delete();      fw=new FileWriter(grassFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="north: " + String.valueOf(wbr.getNorth());      out.println(str1);      str1="south: " + String.valueOf(wbr.getSouth());      out.println(str1);      str1="east: " + String.valueOf(wbr.getEast());      out.println(str1);      str1="west: " + String.valueOf(wbr.getWest());      out.println(str1);      str1="rows: " + String.valueOf(wbr.getNumberRows());      out.println(str1);      str1="cols: " + String.valueOf(wbr.getNumberColumns());      out.println(str1);      double[] data=null;      String line="";      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } else {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean isStarted(){  try {    CoordinatorClient coordinator=getCoordinator();    List<Service> service=coordinator.locateAllServices(serviceName,SVC_VERSION,null,null);    if (service.iterator().hasNext()) {      Service svc=service.iterator().next();      URI hostUri=svc.getEndpoint();      log.info("Found " + svc.getName() + "; host = "+ hostUri.getHost()+ "; port = "+ hostUri.getPort());      return true;    }  } catch (  RetryableCoordinatorException e) {    log.warn("no {} instance running. Coordinator exception message: {}",serviceName,e.getMessage());  }catch (  Exception e) {    log.error("service lookup failure",e);  }  return false;}  }
class C{  private void multAddMe(int iv,int addend){  long v=iv & LONG_MASK;  long p=v * (data[0] & LONG_MASK) + (addend & LONG_MASK);  data[0]=(int)p;  p>>>=32;  for (int i=1; i < nWords; i++) {    p+=v * (data[i] & LONG_MASK);    data[i]=(int)p;    p>>>=32;  }  if (p != 0L) {    data[nWords++]=(int)p;  }}  }
class C{  public void marshal(CacheObjectContext ctx,Marshaller marsh) throws IgniteCheckedException {  if (keyBytes == null) {    key.prepareMarshal(ctx);    keyBytes=marsh.marshal(key);  }  if (valBytes == null && val != null) {    val.prepareMarshal(ctx);    valBytes=marsh.marshal(val);  }}  }
class C{  public void addError(String msg){  addError(msg,null);}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  instance=(Instance)instance.copy();  instance.setDataset(m_numericDataHeader);  return probs(getFs(instance));}  }
class C{  public MirroredTypesException(List<? extends TypeMirror> types){  super("Attempt to access Class objects for TypeMirrors " + (types=new ArrayList<TypeMirror>(types)).toString());  this.types=Collections.unmodifiableList(types);}  }
class C{  protected void addURL(URL url){  try {    originalUrls.add(url);    searchList.add(createSearchURL(url));  } catch (  MalformedURLException e) {  }}  }
class C{  @SuppressLint("SetTextI18n") @Override public void update(){  clickText.setText("ClickObservable: " + UUID.randomUUID().toString());}  }
class C{  private Map<String,TField> computeFieldNameMap(Class<?> clazz){  Map<String,TField> map=new HashMap<>();  if (isTBase(clazz)) {    @SuppressWarnings("unchecked") Map<? extends TFieldIdEnum,FieldMetaData> metaDataMap=FieldMetaData.getStructMetaDataMap((Class<? extends TBase<?,?>>)clazz);    for (    Entry<? extends TFieldIdEnum,FieldMetaData> e : metaDataMap.entrySet()) {      final String fieldName=e.getKey().getFieldName();      final FieldMetaData metaData=e.getValue();      final FieldValueMetaData elementMetaData;      if (metaData.valueMetaData.isContainer()) {        if (metaData.valueMetaData instanceof SetMetaData) {          elementMetaData=((SetMetaData)metaData.valueMetaData).elemMetaData;        } else         if (metaData.valueMetaData instanceof ListMetaData) {          elementMetaData=((ListMetaData)metaData.valueMetaData).elemMetaData;        } else         if (metaData.valueMetaData instanceof MapMetaData) {          elementMetaData=((MapMetaData)metaData.valueMetaData).valueMetaData;        } else {          elementMetaData=metaData.valueMetaData;        }      } else {        elementMetaData=metaData.valueMetaData;      }      if (elementMetaData instanceof EnumMetaData) {        classMap.put(fieldName,((EnumMetaData)elementMetaData).enumClass);      } else       if (elementMetaData instanceof StructMetaData) {        classMap.put(fieldName,((StructMetaData)elementMetaData).structClass);      }      byte type=TType.ENUM == metaData.valueMetaData.type ? TType.I32 : metaData.valueMetaData.type;      map.put(fieldName,new TField(fieldName,type,e.getKey().getThriftFieldId()));    }  } else {    map.put("message",new TField("message",(byte)11,(short)1));    map.put("type",new TField("type",(byte)8,(short)2));  }  return map;}  }
class C{  public String addStepForUpdateConsistencyGroupReadOnlyState(Workflow workflow,List<URI> vplexVolumeURIs,boolean setToReadOnly,String stepDescription,String argWaitFor){  String waitFor=argWaitFor;  if (vplexVolumeURIs.isEmpty()) {    return waitFor;  }  Volume vplexVolume=dbClient.queryObject(Volume.class,vplexVolumeURIs.get(0));  BlockConsistencyGroup cg=null;  if (!NullColumnValueGetter.isNullURI(vplexVolume.getConsistencyGroup())) {    cg=dbClient.queryObject(BlockConsistencyGroup.class,vplexVolume.getConsistencyGroup());  }  StorageSystem vplexSystem=dbClient.queryObject(StorageSystem.class,vplexVolume.getStorageController());  Workflow.Method readOnlyExecuteMethod=updateConsistencyGroupReadOnlyStateMethod(vplexVolumeURIs,setToReadOnly);  Workflow.Method readOnlyRollbackMethod=updateConsistencyGroupReadOnlyStateMethod(vplexVolumeURIs,!setToReadOnly);  waitFor=workflow.createStep(null,String.format("CG: %s: %s",(cg != null ? cg.getLabel() : ""),stepDescription),waitFor,vplexSystem.getId(),vplexSystem.getSystemType(),this.getClass(),readOnlyExecuteMethod,readOnlyRollbackMethod,null);  return waitFor;}  }
class C{  public void testRollingRestart() throws InterruptedException {  awaitPartitionMapExchange();  rollingRestartThread.join();  assertEquals(getMaxRestarts(),rollingRestartThread.getRestartTotal());}  }
class C{  private synchronized static void removeChildCharacterData(Node node,boolean deep){  NodeList list=node.getChildNodes();  for (int i=list.getLength(); i >= 0; i--) {    Node n=list.item(i);    if (n == null)     continue;    if (n instanceof CharacterData)     node.removeChild(XMLCaster.toRawNode(n)); else     if (deep)     removeChildCharacterData(n,deep);  }}  }
class C{  public ProfileOption(){  access=new ArrayList<>();  itinerary=new ArrayList<>();}  }
class C{  public static Scale scale(int scale){  return new Scale(scale);}  }
class C{  protected String paramString(){  String viewportBorderString=(viewportBorder != null ? viewportBorder.toString() : "");  String viewportString=(viewport != null ? viewport.toString() : "");  String verticalScrollBarPolicyString;  if (verticalScrollBarPolicy == VERTICAL_SCROLLBAR_AS_NEEDED) {    verticalScrollBarPolicyString="VERTICAL_SCROLLBAR_AS_NEEDED";  } else   if (verticalScrollBarPolicy == VERTICAL_SCROLLBAR_NEVER) {    verticalScrollBarPolicyString="VERTICAL_SCROLLBAR_NEVER";  } else   if (verticalScrollBarPolicy == VERTICAL_SCROLLBAR_ALWAYS) {    verticalScrollBarPolicyString="VERTICAL_SCROLLBAR_ALWAYS";  } else   verticalScrollBarPolicyString="";  String horizontalScrollBarPolicyString;  if (horizontalScrollBarPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED) {    horizontalScrollBarPolicyString="HORIZONTAL_SCROLLBAR_AS_NEEDED";  } else   if (horizontalScrollBarPolicy == HORIZONTAL_SCROLLBAR_NEVER) {    horizontalScrollBarPolicyString="HORIZONTAL_SCROLLBAR_NEVER";  } else   if (horizontalScrollBarPolicy == HORIZONTAL_SCROLLBAR_ALWAYS) {    horizontalScrollBarPolicyString="HORIZONTAL_SCROLLBAR_ALWAYS";  } else   horizontalScrollBarPolicyString="";  String horizontalScrollBarString=(horizontalScrollBar != null ? horizontalScrollBar.toString() : "");  String verticalScrollBarString=(verticalScrollBar != null ? verticalScrollBar.toString() : "");  String columnHeaderString=(columnHeader != null ? columnHeader.toString() : "");  String rowHeaderString=(rowHeader != null ? rowHeader.toString() : "");  String lowerLeftString=(lowerLeft != null ? lowerLeft.toString() : "");  String lowerRightString=(lowerRight != null ? lowerRight.toString() : "");  String upperLeftString=(upperLeft != null ? upperLeft.toString() : "");  String upperRightString=(upperRight != null ? upperRight.toString() : "");  return super.paramString() + ",columnHeader=" + columnHeaderString+ ",horizontalScrollBar="+ horizontalScrollBarString+ ",horizontalScrollBarPolicy="+ horizontalScrollBarPolicyString+ ",lowerLeft="+ lowerLeftString+ ",lowerRight="+ lowerRightString+ ",rowHeader="+ rowHeaderString+ ",upperLeft="+ upperLeftString+ ",upperRight="+ upperRightString+ ",verticalScrollBar="+ verticalScrollBarString+ ",verticalScrollBarPolicy="+ verticalScrollBarPolicyString+ ",viewport="+ viewportString+ ",viewportBorder="+ viewportBorderString;}  }
class C{  public SimplexNoiseGenerator(Random rand){  super(rand);  offsetW=rand.nextDouble() * 256;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  int nodeType;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation1");  assertNotNull("notationNotNull",notationNode);  nodeType=(int)notationNode.getNodeType();  assertEquals("nodeNotationNodeTypeAssert1",12,nodeType);}  }
class C{  private ByteArrayOutputStream exportReportToBytes(JasperPrint jasperPrint,JRExporter exporter) throws JRException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  exporter.setParameter(JRExporterParameter.JASPER_PRINT,jasperPrint);  exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,baos);  if (delimiter != null) {    exporter.setParameter(JRCsvExporterParameter.FIELD_DELIMITER,delimiter);  }  exporter.exportReport();  return baos;}  }
class C{  GitLogParser(Project project,NameStatus nameStatusOption,GitLogOption... options){  myFormat=makeFormatFromOptions(options);  myOptions=options;  myNameStatusOption=nameStatusOption;  GitVcs vcs=GitVcs.getInstance(project);  mySupportsRawBody=vcs != null && GitVersionSpecialty.STARTED_USING_RAW_BODY_IN_FORMAT.existsIn(vcs.getVersion());}  }
class C{  public void addRunConfiguration(Project project,String name,String label,String runTarget,String debugTarget,String cleanTarget){  try {    EditableProperties properties=new EditableProperties(true);    properties.setProperty("$label",label);    properties.setProperty("$target.run",runTarget);    properties.setProperty("$target.debug",debugTarget);    properties.setProperty("$target.clean",cleanTarget);    J2SEProjectConfigurations.createConfigurationFiles(project,name,properties,null);  } catch (  IOException ex) {    Exceptions.printStackTrace(ex);  }catch (  IllegalArgumentException ex) {    Exceptions.printStackTrace(ex);  }}  }
class C{  @Override public void close() throws IOException {  while (in != null) {    nextStream();  }  e=null;}  }
class C{  public Source newSource(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return fileSystem.source(entry.cleanFiles[index]);    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public static Color disable(Color color){  int alpha=color.getAlpha();  alpha/=2;  return new Color((color.getRGB() & 0xFFFFFF) | (alpha << 24),true);}  }
class C{  @Override public Class<Model> modelType(){  return Model.class;}  }
class C{  protected int height(TreeNode<E> root){  if (root == null)   return 0;  return 1 + Math.max(height(root.left),height(root.right));}  }
class C{  public void showErrorDialog(final int errorCode,final Activity activity,final int requestCode,final OnCancelListener onCancelListener){  final Dialog dialog=GoogleApiAvailability.getInstance().getErrorDialog(activity,errorCode,requestCode,onCancelListener);  if (dialog != null) {    dialog.show();  }}  }
class C{  static String normalize(String identifier){  if (null == identifier)   return identifier;  String normalized=WORD_SEP_PATTERN.matcher(identifier.toLowerCase(Locale.ENGLISH)).replaceAll("");  return normalized.replace(':','=');}  }
class C{  public final void loadLibrary(final String strPath) throws IOException {  if (s_classLoader == null) {    try {      s_classProvider=new JARClassProvider();      s_classLoader=new ClassLoaderEx(s_classProvider);    } catch (    Throwable th) {      throw new JIPJVMException(th);    }  }  String strFileName[]=new String[1];  String strCurDir[]=new String[1];  InputStream ins1=StreamManager.getStreamManager().getInputStream(strPath,getSearchPath(),strFileName,strCurDir);  ins1.close();  final File libf=new File(strPath);  final String strBasePath=strCurDir[0];  final ZipFile library=new ZipFile(libf);  Enumeration en=library.entries();  ZipEntry entry;  while (en.hasMoreElements()) {    entry=(ZipEntry)en.nextElement();    if (entry.getName().endsWith(".pl")) {      String strCurSarchPath="";      final InputStream ins=library.getInputStream(entry);      try {        strCurSarchPath=getSearchPath();        setSearchPath(strBasePath);        Consult1.consult(ins,strPath,this,0,getEnvVariable("enable_clause_check").equals("true"));        setSearchPath(strCurSarchPath);      } catch (      RuntimeException ex) {        setSearchPath(strCurSarchPath);        library.close();        throw ex;      }catch (      IOException ex) {        setSearchPath(strCurSarchPath);        library.close();        throw ex;      }    }  }  library.close();  s_classProvider.addJarPath(strPath);}  }
class C{  private static Url resolveUrl(final Url baseUrl,final String relativeUrl){  final Url url=parseUrl(relativeUrl);  if (baseUrl == null) {    return url;  }  if (relativeUrl.isEmpty()) {    return new Url(baseUrl);  }  if (url.scheme_ != null) {    return url;  }  url.scheme_=baseUrl.scheme_;  if (url.location_ != null) {    return url;  }  url.location_=baseUrl.location_;  if ((url.path_ != null) && ((!url.path_.isEmpty()) && (url.path_.charAt(0) == '/'))) {    url.path_=removeLeadingSlashPoints(url.path_);    return url;  }  if (url.path_ == null) {    url.path_=baseUrl.path_;    if (url.parameters_ != null) {      return url;    }    url.parameters_=baseUrl.parameters_;    if (url.query_ != null) {      return url;    }    url.query_=baseUrl.query_;    return url;  }  final String basePath=baseUrl.path_;  String path="";  if (basePath != null) {    final int lastSlashIndex=basePath.lastIndexOf('/');    if (lastSlashIndex >= 0) {      path=basePath.substring(0,lastSlashIndex + 1);    }  } else {    path="/";  }  path=path.concat(url.path_);  int pathSegmentIndex;  while ((pathSegmentIndex=path.indexOf("/./")) >= 0) {    path=path.substring(0,pathSegmentIndex + 1).concat(path.substring(pathSegmentIndex + 3));  }  if (path.endsWith("/.")) {    path=path.substring(0,path.length() - 1);  }  while ((pathSegmentIndex=path.indexOf("/../")) > 0) {    final String pathSegment=path.substring(0,pathSegmentIndex);    final int slashIndex=pathSegment.lastIndexOf('/');    if (slashIndex < 0) {      continue;    }    if (!"..".equals(pathSegment.substring(slashIndex))) {      path=path.substring(0,slashIndex + 1).concat(path.substring(pathSegmentIndex + 4));    }  }  if (path.endsWith("/..")) {    final String pathSegment=path.substring(0,path.length() - 3);    final int slashIndex=pathSegment.lastIndexOf('/');    if (slashIndex >= 0) {      path=path.substring(0,slashIndex + 1);    }  }  path=removeLeadingSlashPoints(path);  url.path_=path;  return url;}  }
class C{  public static void initialize(SettingsManager settingsMgr){  sSettingsMgr=settingsMgr;}  }
class C{  protected void trimEdits(int from,int to){  if (from <= to) {    for (int i=to; from <= i; i--) {      UndoableEdit e=edits.elementAt(i);      e.die();      edits.removeElementAt(i);    }    if (indexOfNextAdd > to) {      indexOfNextAdd-=to - from + 1;    } else     if (indexOfNextAdd >= from) {      indexOfNextAdd=from;    }  }}  }
class C{  protected static Filter createEmptyFilter(Element filterElement,Rectangle2D filterRegion,Element filteredElement,GraphicsNode filteredNode,BridgeContext ctx){  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(null,filterElement,filteredElement,filteredNode,filterRegion,filterRegion,ctx);  return new FloodRable8Bit(primitiveRegion,TRANSPARENT_BLACK);}  }
class C{  public static void inZoom(final IdocFrame ui){  FileVO file=(FileVO)ui.getFileVO();  ImageVO imageVO=(ImageVO)file.getListImage().get(file.getImageSelectIndex());  ImageIcon icono=getIcon(imageVO.getImage());  Image img=icono.getImage();  int w=imageVO.getWidth();  int h=imageVO.getHeight();  int wZoom=(int)(w * 0.1);  int hZoom1=(int)(h * 0.1);  img=img.getScaledInstance(w + wZoom,h + hZoom1,java.awt.Image.SCALE_SMOOTH);  ImageIcon icon=new ImageIcon(img);  JLabel jl=new JLabel(icon);  jl.setBounds(1,1,icon.getIconWidth() - 1,icon.getIconHeight() - 1);  try {    BufferedImage buffer=createBufferedImage(img);    ui.crop=new Cropping(buffer);  } catch (  Exception e) {  }  ui.getJScrollPaneIcon().setViewportView(ui.crop);  ui.repaint();  imageVO.setWidth(icon.getIconWidth());  imageVO.setHeight(icon.getIconHeight());}  }
class C{  private String adjustSpacing(IDocument doc,int position,char character){  if (character == BRACECHAR) {    if (position > 0 && position <= doc.getLength()) {      int pos=position - 1;      if (looksLike(doc,pos,")") || looksLike(doc,pos,"=") || looksLike(doc,pos,"]")|| looksLike(doc,pos,"try")|| looksLike(doc,pos,"else")|| looksLike(doc,pos,"synchronized")|| looksLike(doc,pos,"static")|| looksLike(doc,pos,"finally")|| looksLike(doc,pos,"do"))       return new String(new char[]{' ',character});    }  }  return new String(new char[]{character});}  }
class C{  public static void main(String a[]) throws Throwable {  final String main="CollectionUsageThreshold$TestMain";  RunUtil.runTestKeepGcOpts(main);  RunUtil.runTestClearGcOpts(main,"-XX:+UseSerialGC");  RunUtil.runTestClearGcOpts(main,"-XX:+UseParallelGC");  RunUtil.runTestClearGcOpts(main,"-XX:+UseG1GC");  RunUtil.runTestClearGcOpts(main,"-XX:+UseConcMarkSweepGC");}  }
class C{  private static SpeechletResponse buildSpeechletResponse(ZaxStateMachine state){  String title="Colossal Cave";  String output=state.getLastText();  System.out.println(output);  for (  String[] sub : SUBS)   output=output.replace(sub[0],sub[1]);  System.out.println(output);  boolean shouldEndSession=state.isDone();  SimpleCard card=new SimpleCard();  card.setTitle(title);  card.setContent(output);  PlainTextOutputSpeech speech=new PlainTextOutputSpeech();  speech.setText(output);  SpeechletResponse response=new SpeechletResponse();  response.setShouldEndSession(shouldEndSession);  response.setOutputSpeech(speech);  response.setCard(card);  return response;}  }
class C{  private void checkField(PojoField field,String name,boolean primitive,Class<?> cls){  assertEquals("Name of field should be " + name,name,field.javaName());  assertEquals("Type of field should be " + cls.getName(),cls.getName(),field.javaTypeName());  assertEquals("Field primitive should be " + primitive,primitive,field.primitive());}  }
class C{  public void makeBlocking() throws IOException {  SelectableChannel c=this.theSocket.getChannel();  c.configureBlocking(true);}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  public <K>T ajax(String url,Class<K> type,long expire,AjaxCallback<K> callback){  callback.type(type).url(url).fileCache(true).expire(expire);  return ajax(callback);}  }
class C{  @Override protected void preWait(){  this.thread=Thread.currentThread();  super.preWait();}  }
class C{  public Result(final String ordernum,final String shippingnum){  this(ordernum,shippingnum,Result.OK,null,null);}  }
class C{  public Builder withAccepted(boolean accepted){  response.accepted=accepted;  return this;}  }
class C{  protected void afterWriting(){  if (session != null) {  }}  }
class C{  protected void initializeTraversalContext(KMLTraversalContext tc){  tc.initialize();  tc.setDetailHint(this.kmlRoot.getDetailHint());}  }
class C{  @Override public void clear(){  _fields.clear();  if (_childDocuments != null) {    _childDocuments.clear();  }}  }
class C{  public Rendon(){  super(2,2);}  }
class C{  @SafeVarargs public final void addAllConstraints(@NonNull final Constraint<CharSequence>... constraints){  ensureNotNull(constraints,"The array may not be null");  addAllConstraints(Arrays.asList(constraints));}  }
class C{  protected void retrieveMostUsedValues(int numValue,final String... attrNames) throws ServiceException, IOException {  URL url=urlFactory.getAttributesFeedURL();  GoogleBaseQuery query=new GoogleBaseQuery(url);  StringBuffer queryString=createQueryString(attrNames);  query.setGoogleBaseQuery(queryString.toString());  query.setMaxValues(numValue);  int numResults=0;  int lastNumResults=0;  Collection<String> attrToRetrieve=new ArrayList<String>(Arrays.asList(attrNames));  do {    numResults+=STEP_MAXRESULTS;    query.setMaxResults(numResults);    GoogleBaseFeed feed=service.query(query);    if (lastNumResults == feed.getTotalResults()) {      break;    }    lastNumResults=feed.getTotalResults();    Iterator<String> attrIter=attrToRetrieve.iterator();    while (attrIter.hasNext()) {      String attrName=attrIter.next();      String entryTitle=attrName + TEXT_TYPE;      for (      GoogleBaseEntry entry : feed.getEntries()) {        if (entryTitle.equals(entry.getTitle().getPlainText())) {          extractValuesFromEntry(numValue,attrName,entry);          attrIter.remove();        }      }    }  } while (!attrToRetrieve.isEmpty() && numResults <= MAX_MAXRESULTS);  if (!attrToRetrieve.isEmpty()) {    throw new ServiceException("The retrieved histograms do not contain" + "some of the attributes. The most used values of these attributes " + "have not been refreshed.");  }}  }
class C{  public BifocalDistortion(double range,double mag){  this(range,mag,range,mag);}  }
class C{  private void fixMenuBackground(){  if (UIUtil.isUnderAlloyLookAndFeel() && getMenuCount() > 0) {    final JMenu menu=getMenu(0);    if (menu != null) {      menu.updateUI();      setBackground(menu.getBackground());    }  }}  }
class C{  protected void initializeWorld(){  Body ground=new SimulationBody();{    Convex c=Geometry.createRectangle(100.0,1.0);    BodyFixture bf=new BodyFixture(c);    ground.addFixture(bf);  }  ground.translate(new Vector2(0.6875,-8.75));  ground.setMass(MassType.INFINITE);  world.addBody(ground);  Body head=new SimulationBody();{    Convex c=Geometry.createCircle(0.25);    BodyFixture bf=new BodyFixture(c);    head.addFixture(bf);  }  head.setMass(MassType.NORMAL);  world.addBody(head);  Body torso=new SimulationBody();{    Convex c=Geometry.createRectangle(0.5,1.0);    BodyFixture bf=new BodyFixture(c);    torso.addFixture(bf);  }{    Convex c=Geometry.createRectangle(1.0,0.25);    c.translate(new Vector2(0.00390625,0.375));    BodyFixture bf=new BodyFixture(c);    torso.addFixture(bf);  }  torso.translate(new Vector2(0.0234375,-0.8125));  torso.setMass(MassType.NORMAL);  world.addBody(torso);  Body rightHumerus=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.5);    BodyFixture bf=new BodyFixture(c);    rightHumerus.addFixture(bf);  }  rightHumerus.translate(new Vector2(0.4375,-0.609375));  rightHumerus.setMass(MassType.NORMAL);  world.addBody(rightHumerus);  Body rightUlna=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.4);    BodyFixture bf=new BodyFixture(c);    rightUlna.addFixture(bf);  }  rightUlna.translate(new Vector2(0.44140625,-0.98828125));  rightUlna.setMass(MassType.NORMAL);  world.addBody(rightUlna);  Body neck=new SimulationBody();{    Convex c=Geometry.createRectangle(0.15,0.2);    BodyFixture bf=new BodyFixture(c);    neck.addFixture(bf);  }  neck.translate(new Vector2(0.015625,-0.2734375));  neck.setMass(MassType.NORMAL);  world.addBody(neck);  Body leftHumerus=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.5);    BodyFixture bf=new BodyFixture(c);    leftHumerus.addFixture(bf);  }  leftHumerus.translate(new Vector2(-0.3828125,-0.609375));  leftHumerus.setMass(MassType.NORMAL);  world.addBody(leftHumerus);  Body leftUlna=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.4);    BodyFixture bf=new BodyFixture(c);    leftUlna.addFixture(bf);  }  leftUlna.translate(new Vector2(-0.3828125,-0.9765625));  leftUlna.setMass(MassType.NORMAL);  world.addBody(leftUlna);  Body rightFemur=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.75);    BodyFixture bf=new BodyFixture(c);    rightFemur.addFixture(bf);  }  rightFemur.translate(new Vector2(0.1796875,-1.5703125));  rightFemur.setMass(MassType.NORMAL);  world.addBody(rightFemur);  Body leftFemur=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.75);    BodyFixture bf=new BodyFixture(c);    leftFemur.addFixture(bf);  }  leftFemur.translate(new Vector2(-0.1328125,-1.5703125));  leftFemur.setMass(MassType.NORMAL);  world.addBody(leftFemur);  Body rightTibia=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.5);    BodyFixture bf=new BodyFixture(c);    rightTibia.addFixture(bf);  }  rightTibia.translate(new Vector2(0.18359375,-2.11328125));  rightTibia.setMass(MassType.NORMAL);  world.addBody(rightTibia);  Body leftTibia=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.5);    BodyFixture bf=new BodyFixture(c);    leftTibia.addFixture(bf);  }  leftTibia.translate(new Vector2(-0.1328125,-2.1171875));  leftTibia.setMass(MassType.NORMAL);  world.addBody(leftTibia);  RevoluteJoint headToNeck=new RevoluteJoint(head,neck,new Vector2(0.01,-0.2));  headToNeck.setLimitEnabled(false);  headToNeck.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  headToNeck.setReferenceAngle(Math.toRadians(0.0));  headToNeck.setMotorEnabled(false);  headToNeck.setMotorSpeed(Math.toRadians(0.0));  headToNeck.setMaximumMotorTorque(0.0);  headToNeck.setCollisionAllowed(false);  world.addJoint(headToNeck);  RevoluteJoint neckToTorso=new RevoluteJoint(neck,torso,new Vector2(0.01,-0.35));  neckToTorso.setLimitEnabled(false);  neckToTorso.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  neckToTorso.setReferenceAngle(Math.toRadians(0.0));  neckToTorso.setMotorEnabled(false);  neckToTorso.setMotorSpeed(Math.toRadians(0.0));  neckToTorso.setMaximumMotorTorque(0.0);  neckToTorso.setCollisionAllowed(false);  world.addJoint(neckToTorso);  RevoluteJoint torsoToLeftHumerus=new RevoluteJoint(torso,leftHumerus,new Vector2(-0.4,-0.4));  torsoToLeftHumerus.setLimitEnabled(false);  torsoToLeftHumerus.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  torsoToLeftHumerus.setReferenceAngle(Math.toRadians(0.0));  torsoToLeftHumerus.setMotorEnabled(false);  torsoToLeftHumerus.setMotorSpeed(Math.toRadians(0.0));  torsoToLeftHumerus.setMaximumMotorTorque(0.0);  torsoToLeftHumerus.setCollisionAllowed(false);  world.addJoint(torsoToLeftHumerus);  RevoluteJoint torsoToRightHumerus=new RevoluteJoint(torso,rightHumerus,new Vector2(0.4,-0.4));  torsoToRightHumerus.setLimitEnabled(false);  torsoToRightHumerus.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  torsoToRightHumerus.setReferenceAngle(Math.toRadians(0.0));  torsoToRightHumerus.setMotorEnabled(false);  torsoToRightHumerus.setMotorSpeed(Math.toRadians(0.0));  torsoToRightHumerus.setMaximumMotorTorque(0.0);  torsoToRightHumerus.setCollisionAllowed(false);  world.addJoint(torsoToRightHumerus);  RevoluteJoint rightHumerusToRightUlna=new RevoluteJoint(rightHumerus,rightUlna,new Vector2(0.43,-0.82));  rightHumerusToRightUlna.setLimitEnabled(false);  rightHumerusToRightUlna.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  rightHumerusToRightUlna.setReferenceAngle(Math.toRadians(0.0));  rightHumerusToRightUlna.setMotorEnabled(false);  rightHumerusToRightUlna.setMotorSpeed(Math.toRadians(0.0));  rightHumerusToRightUlna.setMaximumMotorTorque(0.0);  rightHumerusToRightUlna.setCollisionAllowed(false);  world.addJoint(rightHumerusToRightUlna);  RevoluteJoint leftHumerusToLeftUlna=new RevoluteJoint(leftHumerus,leftUlna,new Vector2(-0.4,-0.81));  leftHumerusToLeftUlna.setLimitEnabled(false);  leftHumerusToLeftUlna.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  leftHumerusToLeftUlna.setReferenceAngle(Math.toRadians(0.0));  leftHumerusToLeftUlna.setMotorEnabled(false);  leftHumerusToLeftUlna.setMotorSpeed(Math.toRadians(0.0));  leftHumerusToLeftUlna.setMaximumMotorTorque(0.0);  leftHumerusToLeftUlna.setCollisionAllowed(false);  world.addJoint(leftHumerusToLeftUlna);  RevoluteJoint torsoToRightFemur=new RevoluteJoint(torso,rightFemur,new Vector2(0.16,-1.25));  torsoToRightFemur.setLimitEnabled(false);  torsoToRightFemur.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  torsoToRightFemur.setReferenceAngle(Math.toRadians(0.0));  torsoToRightFemur.setMotorEnabled(false);  torsoToRightFemur.setMotorSpeed(Math.toRadians(0.0));  torsoToRightFemur.setMaximumMotorTorque(0.0);  torsoToRightFemur.setCollisionAllowed(false);  world.addJoint(torsoToRightFemur);  RevoluteJoint torsoToLeftFemur=new RevoluteJoint(torso,leftFemur,new Vector2(-0.13,-1.25));  torsoToLeftFemur.setLimitEnabled(false);  torsoToLeftFemur.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  torsoToLeftFemur.setReferenceAngle(Math.toRadians(0.0));  torsoToLeftFemur.setMotorEnabled(false);  torsoToLeftFemur.setMotorSpeed(Math.toRadians(0.0));  torsoToLeftFemur.setMaximumMotorTorque(0.0);  torsoToLeftFemur.setCollisionAllowed(false);  world.addJoint(torsoToLeftFemur);  RevoluteJoint rightFemurToRightTibia=new RevoluteJoint(rightFemur,rightTibia,new Vector2(0.17,-1.9));  rightFemurToRightTibia.setLimitEnabled(false);  rightFemurToRightTibia.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  rightFemurToRightTibia.setReferenceAngle(Math.toRadians(0.0));  rightFemurToRightTibia.setMotorEnabled(false);  rightFemurToRightTibia.setMotorSpeed(Math.toRadians(0.0));  rightFemurToRightTibia.setMaximumMotorTorque(0.0);  rightFemurToRightTibia.setCollisionAllowed(false);  world.addJoint(rightFemurToRightTibia);  RevoluteJoint leftFemurToLeftTibia=new RevoluteJoint(leftFemur,leftTibia,new Vector2(-0.14,-1.9));  leftFemurToLeftTibia.setLimitEnabled(false);  leftFemurToLeftTibia.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  leftFemurToLeftTibia.setReferenceAngle(Math.toRadians(0.0));  leftFemurToLeftTibia.setMotorEnabled(false);  leftFemurToLeftTibia.setMotorSpeed(Math.toRadians(0.0));  leftFemurToLeftTibia.setMaximumMotorTorque(0.0);  leftFemurToLeftTibia.setCollisionAllowed(false);  world.addJoint(leftFemurToLeftTibia);}  }
class C{  public Vm(int id,int userId,double mips,int numberOfPes,int ram,long bw,long size,String vmm,CloudletScheduler cloudletScheduler){  setId(id);  setUserId(userId);  setUid(getUid(userId,id));  setMips(mips);  setNumberOfPes(numberOfPes);  setRam(ram);  setBw(bw);  setSize(size);  setVmm(vmm);  setCloudletScheduler(cloudletScheduler);  setInMigration(false);  setBeingInstantiated(true);  setCurrentAllocatedBw(0);  setCurrentAllocatedMips(null);  setCurrentAllocatedRam(0);  setCurrentAllocatedSize(0);}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,"|");  String nextToken=tokenizer.nextToken();  ver=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  int size=Integer.parseInt(nextToken.substring(nextToken.lastIndexOf(',') + 1,nextToken.length()));  StringBuffer buffer=new StringBuffer();  buffer.append(nextToken);  for (int i=0; i < size; i++) {    buffer.append("|");    buffer.append(tokenizer.nextToken());    if (i != size - 1) {      buffer.append("|");    }  }  dlgDef=new TDlgDef(buffer.toString());  nextToken=tokenizer.nextToken();  String aux1=nextToken;  if (aux1.indexOf(",") == -1) {    nextToken=tokenizer.nextToken();  }  StringTokenizer tokenizer2=new StringTokenizer(nextToken,",");  int aux=Integer.parseInt(tokenizer2.nextToken());  if (aux != 0) {    size=Integer.parseInt(tokenizer2.nextToken());    buffer=new StringBuffer();    buffer.append(size);    for (int i=0; i < size; i++) {      buffer.append("|");      buffer.append(tokenizer.nextToken());      if (i != size - 1) {        buffer.append("|");      }    }    tbdef=new TBDef(buffer.toString());  }  relFrmFmtId=Integer.parseInt(tokenizer.nextToken());  size=Integer.parseInt(tokenizer.nextToken());  buffer=new StringBuffer();  buffer.append(size);  for (int i=0; i < size; i++) {    buffer.append("|");    buffer.append(tokenizer.nextToken());    if (i != size - 1) {      buffer.append("|");    }  }  eventsDef=new TEventsDef(buffer.toString());}  }
class C{  @Override public void onCardboardTrigger(){  Log.i(TAG,"onCardboardTrigger");  renderSereo=!renderSereo;  if (renderSereo)   overlayView.show3DToast("Stereo 3D On"); else   overlayView.show3DToast("Stereo 3D Off");  vibrator.vibrate(50);}  }
class C{  public String toStringX(Properties ctx){  StringBuffer sb=new StringBuffer();  sb.append(Msg.translate(ctx,"AD_Client_ID")).append("=").append(getClientName()).append(" - ").append(Msg.translate(ctx,"AD_Org_ID")).append("=").append(getOrgName());  return sb.toString();}  }
class C{  private void onCompleteDrawRipple(){  mHandler.removeMessages(MSG_DRAW_COMPLETE);  if (mTimer != null) {    if (mTask != null) {      mTask.cancel();    }    mTimer.cancel();  }  mRippleRadius=0;}  }
class C{  public Matrix4x3f rotationXYZ(float angleX,float angleY,float angleZ){  float cosX=(float)Math.cos(angleX);  float sinX=(float)Math.sin(angleX);  float cosY=(float)Math.cos(angleY);  float sinY=(float)Math.sin(angleY);  float cosZ=(float)Math.cos(angleZ);  float sinZ=(float)Math.sin(angleZ);  float m_sinX=-sinX;  float m_sinY=-sinY;  float m_sinZ=-sinZ;  float nm11=cosX;  float nm12=sinX;  float nm21=m_sinX;  float nm22=cosX;  float nm00=cosY;  float nm01=nm21 * m_sinY;  float nm02=nm22 * m_sinY;  m20=sinY;  m21=nm21 * cosY;  m22=nm22 * cosY;  m00=nm00 * cosZ;  m01=nm01 * cosZ + nm11 * sinZ;  m02=nm02 * cosZ + nm12 * sinZ;  m10=nm00 * m_sinZ;  m11=nm01 * m_sinZ + nm11 * cosZ;  m12=nm02 * m_sinZ + nm12 * cosZ;  m30=0.0f;  m31=0.0f;  m32=0.0f;  properties=0;  return this;}  }
class C{  private void filterHistoryStats(){synchronized (mStatsLock) {    Map<String,Map<String,Long>> tmpLastResumeTimes=new HashMap<String,Map<String,Long>>(mLastResumeTimes);    mLastResumeTimes.clear();    for (    PackageInfo info : mContext.getPackageManager().getInstalledPackages(0)) {      if (tmpLastResumeTimes.containsKey(info.packageName)) {        mLastResumeTimes.put(info.packageName,tmpLastResumeTimes.get(info.packageName));      }    }  }}  }
class C{  private void closeWriter(Writer writer){  if (writer != null) {    try {      writer.close();    } catch (    IOException e) {      log.error(e);    }  }}  }
class C{  @SuppressWarnings("deprecation") public boolean isPortableFilename(String filename){  return (filename.startsWith(PROGRAM) || filename.startsWith(HOME) || filename.startsWith(PREFERENCES)|| filename.startsWith(SCRIPTS)|| filename.startsWith(PROFILE)|| filename.startsWith(SETTINGS)|| filename.startsWith(FILE)|| filename.startsWith(RESOURCE));}  }
class C{  private void traceRoots(){  for (  Mutator m : Mutators.getAll()) {    for (    Address root : m.getRootAddresses()) {      traceObject(root.loadObjectReference(),true);    }  }}  }
class C{  private String buildQuerySelectionClause(){switch (mFragmentId) {case Common.ARTISTS_FLIPPED_SONGS_FRAGMENT:    mQuerySelection=" AND " + DBAccessHelper.SONG_ALBUM + "="+ "'"+ mHeaderText.replace("'","''")+ "'"+ " AND "+ DBAccessHelper.SONG_ARTIST+ "="+ "'"+ mHeaderSubText.replace("'","''")+ "'";  break;case Common.ALBUM_ARTISTS_FLIPPED_SONGS_FRAGMENT:mQuerySelection=" AND " + DBAccessHelper.SONG_ALBUM + "="+ "'"+ mHeaderText.replace("'","''")+ "'"+ " AND "+ DBAccessHelper.SONG_ALBUM_ARTIST+ "="+ "'"+ mHeaderSubText.replace("'","''")+ "'";break;case Common.ALBUMS_FLIPPED_FRAGMENT:mQuerySelection=" AND " + DBAccessHelper.SONG_ALBUM + "="+ "'"+ mHeaderText.replace("'","''")+ "'"+ " AND "+ DBAccessHelper.SONG_ARTIST+ "="+ "'"+ mHeaderSubText.replace("'","''")+ "'";break;case Common.GENRES_FLIPPED_SONGS_FRAGMENT:mQuerySelection=" AND " + DBAccessHelper.SONG_ALBUM + "="+ "'"+ mHeaderText.replace("'","''")+ "'"+ " AND "+ DBAccessHelper.SONG_GENRE+ "="+ "'"+ mHeaderSubText.replace("'","''")+ "'"+ " AND "+ DBAccessHelper.SONG_ARTIST+ "="+ "'"+ mField2.replace("'","''")+ "'";break;}return mQuerySelection;}  }
class C{  public void push(Type type){  stack[top++]=type;}  }
class C{  public EngineRosterMenu(String pMenuName,int pMenuType,EnginesTableFrame pWho){  super(pMenuName);  AbstractAction importRosterAction=new ImportRosterEngineAction(Bundle.getMessage("MenuItemImportRoster"),pWho);  importRosterAction.setEnabled(false);  AbstractAction exportAction=new ExportEngineRosterAction(Bundle.getMessage("MenuItemExport"),pWho);  exportAction.setEnabled(false);  AbstractAction importAction=new ImportEngineAction(Bundle.getMessage("MenuItemImport"),pWho);  importAction.setEnabled(false);  AbstractAction deleteAction=new DeleteEngineRosterAction(Bundle.getMessage("MenuItemDelete"),pWho);  deleteAction.setEnabled(false);  AbstractAction resetMovesAction=new ResetEngineMovesAction(Bundle.getMessage("MenuItemResetMoves"),pWho);  resetMovesAction.setEnabled(false);  Frame newFrame=new Frame();  AbstractAction printAction=new PrintEngineRosterAction(Bundle.getMessage("MenuItemPrint"),newFrame,false,pWho);  printAction.setEnabled(false);  AbstractAction previewAction=new PrintEngineRosterAction(Bundle.getMessage("MenuItemPreview"),newFrame,true,pWho);  printAction.setEnabled(false);  add(importRosterAction);  add(importAction);  add(exportAction);  add(deleteAction);  add(resetMovesAction);  add(printAction);  add(previewAction);switch (pMenuType) {case MAINMENU:    importRosterAction.setEnabled(true);  exportAction.setEnabled(true);importAction.setEnabled(true);deleteAction.setEnabled(true);resetMovesAction.setEnabled(true);printAction.setEnabled(true);previewAction.setEnabled(true);break;case SELECTMENU:case ENTRYMENU:printAction.setEnabled(true);previewAction.setEnabled(true);break;default :log.error("RosterMenu constructed without a valid menuType parameter: " + pMenuType);}}  }
class C{  public boolean declaresField(String subsignature){  checkLevel(SIGNATURES);  for (Iterator<SootField> fieldIt=this.getFields().iterator(); fieldIt.hasNext(); ) {    final SootField field=fieldIt.next();    if (field.getSubSignature().equals(subsignature))     return true;  }  return false;}  }
class C{  public void put(int key,long value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      growKeyAndValueArrays(mSize + 1);    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public ChannelBinding(InetAddress initAddr,InetAddress acceptAddr,byte[] appData){  initiator=initAddr;  acceptor=acceptAddr;  if (appData != null) {    this.appData=new byte[appData.length];    java.lang.System.arraycopy(appData,0,this.appData,0,appData.length);  }}  }
class C{  protected void updateViewTitle(View v,JInternalFrame f){  URI uri=v.getURI();  String title;  if (uri == null) {    title=labels.getString("unnamedFile");  } else {    title=URIUtil.getName(uri);  }  if (v.hasUnsavedChanges()) {    title+="*";  }  v.setTitle(labels.getFormatted("internalFrame.title",title,getName(),v.getMultipleOpenId()));  f.setTitle(v.getTitle());}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.DELEGATING_MEMBER;}  }
class C{  @NamespacePermission(fields="#namespaces",permissions={NamespacePermissionEnum.READ}) private void mockMethod(List<String> namespaces){}  }
class C{  static private int minPositive(int a,int b){  if (a >= 0 && b >= 0) {    return (a < b) ? a : b;  } else   if (a >= 0) {    return a;  } else   if (b >= 0) {    return b;  } else {    return -1;  }}  }
class C{  public static void compileAllMethods(){  if (!(Controller.options.ENABLE_BULK_COMPILE || Controller.options.ENABLE_PRECOMPILE)) {    VM.sysFail("Attempt to perform bulk compilation without setting either -X:aos:enable_bulk_compile=true or -X:aos:enable_precompile=true");  }  EdgeCounts.loadCountsFromFileIfAvailable(VM.EdgeCounterFile);  CompilerAdvice.readCompilerAdvice();  if (Controller.options.BULK_COMPILATION_VERBOSITY >= 1)   VM.sysWriteln(Controller.options.ENABLE_PRECOMPILE ? "Start precompile" : "Start bulk compile");  for (  CompilerAdviceAttribute value : CompilerAdviceAttribute.values()) {    if (value.getOptLevel() == -1) {      if (Controller.options.BULK_COMPILATION_VERBOSITY > 1) {        VM.sysWrite("Skipping base method: ");        VM.sysWriteln(value.toString());      } else       if (Controller.options.BULK_COMPILATION_VERBOSITY == 1) {        VM.sysWrite(".");      }      continue;    }    ClassLoader cl=RVMClassLoader.findWorkableClassloader(value.getClassName());    if (cl == null)     continue;    TypeReference tRef=TypeReference.findOrCreate(cl,value.getClassName());    RVMClass cls=(RVMClass)tRef.peekType();    if (cls != null) {      if (!cls.isInstantiated()) {        if (!cls.isResolved()) {          if (Controller.options.BULK_COMPILATION_VERBOSITY > 1) {            VM.sysWriteln("Resolving class: ",cls.toString());          } else           if (Controller.options.BULK_COMPILATION_VERBOSITY == 1) {            VM.sysWrite("R");          }          cls.resolve();        }        if (Controller.options.BULK_COMPILATION_VERBOSITY > 1) {          VM.sysWriteln("Instantiating class: ",cls.toString());        } else         if (Controller.options.BULK_COMPILATION_VERBOSITY == 1) {          VM.sysWrite("I");        }        cls.instantiate();      }      RVMMethod method=cls.findDeclaredMethod(value.getMethodName(),value.getMethodSig());      if ((method != null) && !method.hasNoOptCompileAnnotation() && (method instanceof org.jikesrvm.classloader.NormalMethod)) {        if (value.getOptLevel() > Controller.options.DERIVED_MAX_OPT_LEVEL) {          if (Controller.options.BULK_COMPILATION_VERBOSITY > 1) {            VM.sysWrite("Replay advice overriden by default opt levels.  Wanted ");            VM.sysWrite(value.getOptLevel());            VM.sysWrite(", but Controller.options.DERIVED_MAX_OPT_LEVEL: ");            VM.sysWrite(Controller.options.DERIVED_MAX_OPT_LEVEL);            VM.sysWrite(" ");            VM.sysWriteln(value.toString());          } else           if (Controller.options.BULK_COMPILATION_VERBOSITY == 1) {            VM.sysWrite(value.getOptLevel(),"!");          }          method.compile();        } else {          CompilationPlan compPlan;          if (Controller.options.counters()) {            compPlan=InvocationCounts.createCompilationPlan((NormalMethod)method);            AOSLogging.logger.recompilationStarted(compPlan);            if (Controller.options.BULK_COMPILATION_VERBOSITY > 1) {              VM.sysWrite("Bulk compiling for counters ");              VM.sysWriteln(value.toString());            }            RuntimeCompiler.recompileWithOpt(compPlan);            AOSLogging.logger.recompilationCompleted(compPlan);          } else           if (Controller.options.sampling()) {            compPlan=Controller.recompilationStrategy.createCompilationPlan((NormalMethod)method,value.getOptLevel(),null);            if (Controller.options.BULK_COMPILATION_VERBOSITY > 1) {              VM.sysWrite("Bulk compiling for sampling ");              VM.sysWriteln(value.toString());            }            if (Controller.options.BULK_COMPILATION_VERBOSITY == 1) {              VM.sysWrite(value.getOptLevel());            }            AOSLogging.logger.recompilationStarted(compPlan);            RuntimeCompiler.recompileWithOpt(compPlan);            AOSLogging.logger.recompilationCompleted(compPlan);          } else {            if (Controller.options.BULK_COMPILATION_VERBOSITY > 1) {              VM.sysWrite("Compiler advice file overridden ");              VM.sysWriteln(value.toString());            }            method.compile();          }        }      } else {        if (Controller.options.BULK_COMPILATION_VERBOSITY > 1) {          VM.sysWrite("Replay failed for ");          VM.sysWrite(value.toString());          VM.sysWrite(" ");          VM.sysWriteln(cl.toString());        } else         if (Controller.options.BULK_COMPILATION_VERBOSITY == 1) {          VM.sysWrite("*");        }      }    }  }  AOSLogging.logger.compileAllMethodsCompleted();  if (Controller.options.BULK_COMPILATION_VERBOSITY >= 1)   VM.sysWriteln();  if (Controller.options.BULK_COMPILATION_VERBOSITY >= 1)   VM.sysWriteln("Recompilation complete");}  }
class C{  public NeuronNode(final NetworkPanel net,final Neuron neuron){  super(net);  this.neuron=neuron;  this.centerFullBoundsOnPoint(neuron.getX(),neuron.getY());  init();}  }
class C{  private void finishCompletion(){  for (WaitNode q; (q=waiters) != null; ) {    if (UNSAFE.compareAndSwapObject(this,waitersOffset,q,null)) {      for (; ; ) {        Thread t=q.thread;        if (t != null) {          q.thread=null;          LockSupport.unpark(t);        }        WaitNode next=q.next;        if (next == null)         break;        q.next=null;        q=next;      }      break;    }  }  done();  callable=null;}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenee=source;  }}  }
class C{  public double linearDistanceSquared(final PlanetModel planetModel,final GeoPoint v,final Membership... bounds){  return linearDistanceSquared(planetModel,v.x,v.y,v.z,bounds);}  }
class C{  @Override public void doDeleteChild(BaseSolrResource endpoint,String childId){  throw new ResourceException(Status.SERVER_ERROR_NOT_IMPLEMENTED);}  }
class C{  static public Sphere computeBoundingSphere(Globe globe,double verticalExaggeration,Sector sector){  if (globe == null) {    String msg=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  LatLon center=sector.getCentroid();  double[] minAndMaxElevations=globe.getMinAndMaxElevations(sector);  double minHeight=minAndMaxElevations[0] * verticalExaggeration;  double maxHeight=minAndMaxElevations[1] * verticalExaggeration;  Vec4[] points=new Vec4[9];  points[0]=globe.computePointFromPosition(center.getLatitude(),center.getLongitude(),maxHeight);  points[1]=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMinLongitude(),maxHeight);  points[2]=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMaxLongitude(),maxHeight);  points[3]=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMinLongitude(),maxHeight);  points[4]=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMaxLongitude(),maxHeight);  points[5]=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMinLongitude(),minHeight);  points[6]=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMaxLongitude(),minHeight);  points[7]=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMinLongitude(),minHeight);  points[8]=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMaxLongitude(),minHeight);  return Sphere.createBoundingSphere(points);}  }
class C{  protected void notifyMeasurementPeriod(){  super.notifyMeasurementPeriod();  maxSum=Integer.MIN_VALUE;}  }
class C{  @Override public void onMouseDown(MouseDownEvent event){  if (!enabled) {    return;  }  if (selected) {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanelSelectedDown());  } else {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanelDown());  }}  }
class C{  @Override public boolean removeFromWorld(){  removeNPC("Caroline");  final StendhalRPZone zone=SingletonRepository.getRPWorld().getZone("int_ados_carolines_house_0");  new FishermansDaughterNPC().createFishermansDaughterSellingNPC(zone);  return true;}  }
class C{  public static ContentFragment newInstance(String type){  ContentFragment fragment=new ContentFragment();  Bundle bundle=new Bundle();  bundle.putString(KEY_CONTENT_TYPE,type);  fragment.setArguments(bundle);  return fragment;}  }
class C{  public boolean empty(){  return isEmpty();}  }
class C{  static public double betaComplemented(double a,double b,double x){  return incompleteBeta(b,a,x);}  }
class C{  public static void saveAsocRegsSec(UseCaseConf useCaseConf,List listaRegsSec,Integer bookIdPrim,Integer folderIdPrim) throws Exception {  if (listaRegsSec != null && !listaRegsSec.isEmpty()) {    for (Iterator iterator=listaRegsSec.iterator(); iterator.hasNext(); ) {      AsocRegsResults asocRegsResults=(AsocRegsResults)iterator.next();      saveAsocRegsSec(useCaseConf,bookIdPrim,folderIdPrim,asocRegsResults.getBookId(),asocRegsResults.getFolderId());    }  }}  }
class C{  private void initViews(final Context context,AttributeSet attrs){  TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.MinimalDivider,0,0);  readStyledAttributes(a);  LayoutInflater.from(context).inflate(R.layout.minimaldivider_layout,this);  setOrientation(VERTICAL);  topTextView=(TextView)findViewById(R.id.topText);  dividerView=findViewById(R.id.divider);  bottomTextView=(TextView)findViewById(R.id.bottomText);  topImageView=(ImageView)findViewById(R.id.topImage);  bottomImageView=(ImageView)findViewById(R.id.bottomImage);  setupTopImageView();  setupBottomImageView();  setupTextViews();  setupDividerView();}  }
class C{  public static String readText(File file) throws IOException {  String thisLine;  StringBuffer strb=new StringBuffer("");  FileInputStream fin=new FileInputStream(file);  BufferedReader br=new BufferedReader(new InputStreamReader(fin));  while ((thisLine=br.readLine()) != null) {    strb.append(thisLine + "\r\n");  }  String result=strb.toString();  return result;}  }
class C{  public void close(Object packet){  if (!isClosed()) {    closed=true;    ch.writeAndFlush(packet).addListeners(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE,ChannelFutureListener.CLOSE);  }}  }
class C{  public ModbusIOException(String message,Throwable cause){  super(message,cause);}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("acq") @Valid ArchiveConsumpQueue archiveConsumpQueue,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    archiveConsumpQueue.setStartTs(DateConverter.stringToDate(archiveConsumpQueue.getTableStartTS()));    archiveConsumpQueue.setEndTs(DateConverter.stringToDate(archiveConsumpQueue.getTableEndTS()));    archiveConsumpQueue.setInsertTs(DateConverter.stringToDate(archiveConsumpQueue.getTableInsertTS()));    com.wipro.ats.bdre.md.dao.jpa.ArchiveConsumpQueue jpaAcq=new com.wipro.ats.bdre.md.dao.jpa.ArchiveConsumpQueue();    jpaAcq.setQueueId(archiveConsumpQueue.getQueueId());    jpaAcq.setSourceProcessId(archiveConsumpQueue.getSourceProcessId());    jpaAcq.setInsertTs(archiveConsumpQueue.getInsertTs());    jpaAcq.setStartTs(archiveConsumpQueue.getStartTs());    jpaAcq.setEndTs(archiveConsumpQueue.getEndTs());    if (archiveConsumpQueue.getSourceBatchId() != null) {      Batch sourceBatch=new Batch();      sourceBatch.setBatchId(archiveConsumpQueue.getSourceBatchId());      jpaAcq.setBatchBySourceBatchId(sourceBatch);    }    if (archiveConsumpQueue.getSourceBatchId() != null) {      Batch targetBatch=new Batch();      targetBatch.setBatchId(archiveConsumpQueue.getTargetBatchId());      jpaAcq.setBatchByTargetBatchId(targetBatch);    }    com.wipro.ats.bdre.md.dao.jpa.Process process=new com.wipro.ats.bdre.md.dao.jpa.Process();    process.setProcessId(archiveConsumpQueue.getProcessId());    jpaAcq.setProcess(process);    BatchStatus batchStatus=new BatchStatus();    batchStatus.setBatchStateId(archiveConsumpQueue.getBatchState());    jpaAcq.setBatchStatus(batchStatus);    jpaAcq.setBatchMarking(archiveConsumpQueue.getBatchMarking());    archiveConsumpQueueDAO.update(jpaAcq);    archiveConsumpQueue.setTableStartTS(DateConverter.dateToString(archiveConsumpQueue.getStartTs()));    archiveConsumpQueue.setTableEndTS(DateConverter.dateToString(archiveConsumpQueue.getEndTs()));    archiveConsumpQueue.setTableInsertTS(DateConverter.dateToString(archiveConsumpQueue.getInsertTs()));    restWrapper=new RestWrapper(archiveConsumpQueue,RestWrapper.OK);    LOGGER.info(RECORDWITHID + archiveConsumpQueue.getQueueId() + " updated from ArchiveConsumpQueue by User:"+ principal.getName()+ archiveConsumpQueue);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public long total(){  return success + failure;}  }
class C{  public AgentSnapshotInfo createAgentSnapshotInfo(Id<Person> agentId,Link link,double distanceOnLink,int lane){  PositionInfo info=new PositionInfo();  info.setId(agentId);  double lanePosition=this.linkWidthCalculator.calculateLanePosition(lane);  calculateAndSetPosition(info,link.getFromNode().getCoord(),link.getToNode().getCoord(),distanceOnLink,link.getLength(),lanePosition);  return info;}  }
class C{  public Index column(String column){  this.column=column;  return this;}  }
class C{  public void split(int fieldVehId,int fieldTime,int fieldLong,int fieldLat,int fieldStatus,int fieldSpeed){  long line=0;  Counter lineCounter=new Counter("   lines: ");  BufferedReader input=null;  BufferedWriter output=null;  String vehicleFile=null;  DateString ds=new DateString();  try {    File inputFolder=(new File(inputFilename)).getParentFile();    BufferedWriter logRecords=IOUtils.getBufferedWriter(inputFolder.getAbsolutePath() + "/logRecordsRead_" + ds.toString()+ ".txt");    input=IOUtils.getBufferedReader(inputFilename);    try {      String inputLine=null;      while ((inputLine=input.readLine()) != null) {        if (++line >= startLine && lineCounter.getCounter() <= numberOfLinesToRead) {          String[] inputString=inputLine.split(delimiter);          if (inputString.length == 6) {            earliest=Math.min(earliest,Long.parseLong(inputString[fieldTime]));            latest=Math.max(latest,Long.parseLong(inputString[fieldTime]));            vehicleFile=outputFolder + "Vehicles/" + inputString[fieldVehId]+ ".txt";            output=IOUtils.getAppendingBufferedWriter(vehicleFile);            output.write(inputString[fieldVehId]);            output.write(delimiter);            output.write(inputString[fieldTime]);            output.write(delimiter);            output.write(inputString[fieldLong]);            output.write(delimiter);            output.write(inputString[fieldLat]);            output.write(delimiter);            output.write(inputString[fieldStatus]);            output.write(delimiter);            output.write(inputString[fieldSpeed]);            output.newLine();            logRecords.write(String.valueOf(lineCounter.getCounter()));            logRecords.newLine();            lineCounter.incCounter();          } else {            log.warn("Line " + line + " does not contain 6 entries.");          }          String vehID=inputString[fieldVehId];          while ((inputLine=input.readLine()) != null) {            inputString=inputLine.split(delimiter);            lineCounter.incCounter();            if (++line >= startLine && lineCounter.getCounter() <= numberOfLinesToRead) {              if (inputString.length == 6) {                earliest=Math.min(earliest,Long.parseLong(inputString[fieldTime]));                latest=Math.max(latest,Long.parseLong(inputString[fieldTime]));                if (!vehID.equalsIgnoreCase(inputString[fieldVehId])) {                  output.close();                  vehicleFile=outputFolder + "Vehicles/" + inputString[fieldVehId]+ ".txt";                  output=IOUtils.getAppendingBufferedWriter(vehicleFile);                  if (output == null) {                    log.info("Stop here");                  }                }                output.write(inputString[fieldVehId]);                output.write(delimiter);                output.write(inputString[fieldTime]);                output.write(delimiter);                output.write(inputString[fieldLong]);                output.write(delimiter);                output.write(inputString[fieldLat]);                output.write(delimiter);                output.write(inputString[fieldStatus]);                output.write(delimiter);                output.write(inputString[fieldSpeed]);                output.newLine();                logRecords.write(String.valueOf(lineCounter.getCounter()));                logRecords.newLine();                vehID=inputString[fieldVehId];              }            }          }        }      }    }  finally {      logRecords.close();      output.close();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  lineCounter.printCounter();}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getGenericDataDBDao() : null;}  }
class C{  public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  private void finalizeProjectCreation(Project project,String visibility) throws ServerException, ForbiddenException {  final ProjectMisc misc=project.getMisc();  misc.setCreationDate(System.currentTimeMillis());  misc.save();  if (visibility != null) {    project.setVisibility(visibility);  }}  }
class C{  public static void putFloat(long addr,float val){  if (UNALIGNED)   UNSAFE.putFloat(addr,val); else   putIntByByte(addr,Float.floatToIntBits(val),BIG_ENDIAN);}  }
class C{  public DrawerBuilder withStickyHeader(@LayoutRes int stickyHeaderRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (stickyHeaderRes != -1) {    this.mStickyHeaderView=mActivity.getLayoutInflater().inflate(stickyHeaderRes,null,false);  }  return this;}  }
class C{  public TestUtils(List<ConnectionListener> cl,List<MessageListener> ml,TestSettings settings){  this.conListeners=cl;  this.msgListeners=ml;  this.allHosts=new ArrayList<DTNHost>();  this.settings=settings;  this.mr=new PassiveRouter(settings);  this.comBus=new ModuleCommunicationBus();}  }
class C{  public static boolean isJ9VM(){  return isJVM(IBM_J9_JVM_NAME);}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  super.declareExtensions(extProfile);  extProfile.declare(MailItemEntry.class,Email.getDefaultDescription());  extProfile.declare(MailItemEntry.class,Label.getDefaultDescription());  extProfile.declare(MailItemEntry.class,MailItemProperty.getDefaultDescription());  extProfile.declare(MailItemEntry.class,Rfc822Msg.getDefaultDescription());}  }
class C{  @Override public String toString(){  return "" + average;}  }
class C{  @Override public boolean supportsGroupByUnrelated(){  debugCodeCall("supportsGroupByUnrelated");  return true;}  }
class C{  protected void loadOrder(int C_Order_ID,boolean forInvoice){  loadTableOIS(getOrderData(C_Order_ID,forInvoice));}  }
class C{  public void printBlock(List<? extends JCTree> stats) throws IOException {  print("{");  println();  indent();  printStats(stats);  undent();  align();  print("}");}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> m){  int numKeysToBeAdded=m.size();  if (numKeysToBeAdded == 0)   return;  if (numKeysToBeAdded > threshold) {    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);    if (targetCapacity > MAXIMUM_CAPACITY)     targetCapacity=MAXIMUM_CAPACITY;    int newCapacity=table.length;    while (newCapacity < targetCapacity)     newCapacity<<=1;    if (newCapacity > table.length)     resize(newCapacity);  }  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbefore.class,args);}  }
class C{  public UserPrincipal(String username,PrincipType principType){  super();  this.username=username;  this.principType=principType;}  }
class C{  ByteBuffer stringToCString(final String string){  byte[] stringBytes=string.getBytes(Charsets.US_ASCII);  ByteBuffer result=ByteBuffer.allocate(stringBytes.length + 1);  result.put(stringBytes).put((byte)0);  result.flip();  return result;}  }
class C{  @RequestProcessing(value="/",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showIndex(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("index.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final int pageSize=Symphonys.getInt("indexArticlesCnt");  final List<JSONObject> indexArticles=articleQueryService.getIndexArticles(pageSize);  dataModel.put(Common.INDEX_ARTICLES,indexArticles);  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  public void testLongText() throws Exception {  final int LEN=96000;  StringBuilder sb=new StringBuilder(LEN + 100);  Random r=new Random(99);  while (sb.length() < LEN) {    sb.append(r.nextInt());    sb.append(" xyz foo");    if (r.nextBoolean()) {      sb.append(" and \"bar\"");    } else     if (r.nextBoolean()) {      sb.append(" [whatever].... ");    } else {      sb.append(" UTF-8-fu: try this {\u00E2/\u0BF8/\uA123!} (look funny?)");    }    if (r.nextBoolean()) {      if (r.nextBoolean()) {        sb.append('\n');      } else       if (r.nextBoolean()) {        sb.append('\r');      } else {        sb.append("\r\n");      }    }  }  final String VALUE=sb.toString();  JsonFactory jf=new JsonFactory();  StringWriter sw=new StringWriter(LEN + (LEN >> 2));  JsonGenerator jg=jf.createJsonGenerator(sw);  jg.writeStartObject();  jg.writeFieldName("doc");  jg.writeString(VALUE);  jg.writeEndObject();  jg.close();  final String DOC=sw.toString();  for (int type=0; type < 3; ++type) {    JsonParser jp;switch (type) {default :      jp=jf.createJsonParser(DOC.getBytes("UTF-8"));    break;case 1:  jp=jf.createJsonParser(DOC);break;case 2:jp=jf.createJsonParser(encodeInUTF32BE(DOC));break;}assertToken(JsonToken.START_OBJECT,jp.nextToken());assertToken(JsonToken.FIELD_NAME,jp.nextToken());assertEquals("doc",jp.getCurrentName());assertToken(JsonToken.VALUE_STRING,jp.nextToken());String act=getAndVerifyText(jp);if (act.length() != VALUE.length()) {fail("Expected length " + VALUE.length() + ", got "+ act.length());}if (!act.equals(VALUE)) {fail("Long text differs");}assertEquals("doc",jp.getCurrentName());assertToken(JsonToken.END_OBJECT,jp.nextToken());assertNull(jp.nextToken());jp.close();}}  }
class C{  public Directions destination(LatLon latLon){  request.destination(latLon.toLatLng());  return this;}  }
class C{  public int recordParams(CtClass[] params,boolean isStatic,String prefix,String paramVarName,String paramsName,SymbolTable tbl) throws CompileError {  return recordParams(params,isStatic,prefix,paramVarName,paramsName,!isStatic,0,getThisName(),tbl);}  }
class C{  public boolean isAllow_Info_Order(){  Object oo=get_Value(COLUMNNAME_Allow_Info_Order);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testBug21215151() throws Exception {  createDatabase("z_testBug21215151");  createDatabase("j_testBug21215151");  createDatabase("h_testBug21215151");  createDatabase("i_testBug21215151");  createDatabase("a_testBug21215151");  DatabaseMetaData dbmd=this.conn.getMetaData();  this.rs=dbmd.getCatalogs();  System.out.println("Catalogs:");  System.out.println("--------------------------------------------------");  while (this.rs.next()) {    System.out.println("\t" + this.rs.getString(1));  }  this.rs.beforeFirst();  String previousDb="";  while (this.rs.next()) {    assertTrue("'" + this.rs.getString(1) + "' is lexicographically lower than the previous catalog. Check the system output to see the catalogs list.",previousDb.compareTo(this.rs.getString(1)) < 0);    previousDb=this.rs.getString(1);  }}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  FLog.v(TAG,"onTouchEvent: action: ",event.getAction());  if (mIsEnabled) {    return mGestureDetector.onTouchEvent(event);  }  return false;}  }
class C{  public DexDataWriter(@Nonnull OutputStream output,int filePosition){  this(output,filePosition,256 * 1024);}  }
class C{  public Builder(ThreadPolicy policy){  mMask=policy.mask;}  }
class C{  @Override public void draw(Graphics2D g2,DialPlot plot,Rectangle2D frame,Rectangle2D view){  g2.setPaint(this.paint);  g2.setStroke(this.stroke);  Rectangle2D arcRect=DialPlot.rectangleByRadius(frame,this.radius,this.radius);  double value=plot.getValue(this.datasetIndex);  DialScale scale=plot.getScaleForDataset(this.datasetIndex);  double angle=scale.valueToAngle(value);  Arc2D arc=new Arc2D.Double(arcRect,angle,0,Arc2D.OPEN);  Point2D pt=arc.getEndPoint();  Line2D line=new Line2D.Double(frame.getCenterX(),frame.getCenterY(),pt.getX(),pt.getY());  g2.draw(line);}  }
class C{  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {  ois.defaultReadObject();  boolean hasFont=ois.readBoolean();  if (hasFont) {    String name=(String)ois.readObject();    int size=ois.readInt();    int style=ois.readInt();    font=new Font(name,style,size);  } else {    font=OMText.DEFAULT_FONT;  }}  }
class C{  public boolean hasSVUID(){  return hasSVUID;}  }
class C{  private void storeRequestId(String requestId,String key){  requestIds.put(requestId,key);}  }
class C{  protected void removeRange(int fromIndex,int toIndex){  modCount++;  int numMoved=elementCount - toIndex;  System.arraycopy(elementData,toIndex,elementData,fromIndex,numMoved);  int newElementCount=elementCount - (toIndex - fromIndex);  while (elementCount != newElementCount)   elementData[--elementCount]=null;}  }
class C{  public JDBCSentence(Session s){  super();  m_s=s;}  }
class C{  public TestNodeGroupManager joinNodeGroupAndWaitForConvergence(){  long startTime=Utils.getNowMicrosUtc();  int quorum=this.hosts.size();  updateQuorum(quorum);  String nodeGroupPath=getNodeGroupPath();  ServiceHost peer=getHost();  List<Operation> ops=this.hosts.stream().filter(null).map(null).collect(toList());  TestRequestSender sender=new TestRequestSender(peer);  sender.sendAndWait(ops);  waitFor(this.timeout,null,"membershipUpdateTimeMicros has not updated.");  getHost().log(Level.INFO,"membershipUpdateTimeMicros has updated");  waitForConvergence();  return this;}  }
class C{  public static NotExpression not(Expression inner){  return new NotExpression(inner);}  }
class C{  public final Key doPhase(Key key,boolean lastPhase) throws InvalidKeyException, IllegalStateException {  return spiImpl.engineDoPhase(key,lastPhase);}  }
class C{  protected KeySpec engineGetKeySpec(SecretKey key,Class<?> keySpecCl) throws InvalidKeySpecException {  if ((key instanceof SecretKey) && (validTypes.contains(key.getAlgorithm().toUpperCase(Locale.ENGLISH))) && (key.getFormat().equalsIgnoreCase("RAW"))) {    if ((keySpecCl != null) && PBEKeySpec.class.isAssignableFrom(keySpecCl)) {      byte[] passwdBytes=key.getEncoded();      char[] passwdChars=new char[passwdBytes.length];      for (int i=0; i < passwdChars.length; i++)       passwdChars[i]=(char)(passwdBytes[i] & 0x7f);      PBEKeySpec ret=new PBEKeySpec(passwdChars);      java.util.Arrays.fill(passwdChars,' ');      java.util.Arrays.fill(passwdBytes,(byte)0x00);      return ret;    } else {      throw new InvalidKeySpecException("Invalid key spec");    }  } else {    throw new InvalidKeySpecException("Invalid key " + "format/algorithm");  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private void clearViaUpcl(){  updateBaudRateGenerator();  ssr=0b0000_0011;}  }
class C{  public static Long toLong(CharSequence self){  return Long.valueOf(self.toString().trim());}  }
class C{  public View create(Element elem){  Document doc=elem.getDocument();  Object i18nFlag=doc.getProperty("i18n");  if ((i18nFlag != null) && i18nFlag.equals(Boolean.TRUE)) {    return createI18N(elem);  } else {    return new WrappedPlainView(elem);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.588 -0500",hash_original_method="406F98BDE206F12612B0B50954C0A2D7",hash_generated_method="7461A2B81E86EC49BAF71719D92CF9E9") public boolean isUnmappable(){  return ((this.type) == 1);}  }
class C{  public Integer call(){  printDebugMessages();  currentState=stateKernel.closure(grammarInfo);  for (  LR1Item item : currentState.getItems()) {    if (item.isShiftable()) {      Symbol symbol=item.getNextSymbol();      if (symbol == EndOfInputStream) {        dfaEdges.add(Edge.createAcceptEdge(stateKernel,symbol));      } else {        LR1State shiftedState=currentState.goTo(symbol);        if (dfaStates.add(shiftedState)) {          threadPool.submit(new WorkerTaskLR1(shiftedState,threadPool,taskCountLock));        }        dfaEdges.add(new Edge(stateKernel,symbol,shiftedState,item.getLR0Kernel()));      }    }  }  decrementTaskCount();  return 0;}  }
class C{  public void fromArray(int... array){  nodes.clear();  for (int i=0; i < array.length; i++) {    nodes.add(array[i]);  }}  }
class C{  private void mergeElementStore(final int index,final String type,final Element element){  final String elementType=type.equals(Types.OBJECT) ? determineLeastSpecificType(element.getTypes().toArray(new String[element.getTypes().size()])) : type;  final Element created=new Element(elementType);  created.merge(element);  localVariables.merge(index,created,null);}  }
class C{  public Writer buildCreationWriter(AbstractSession session,Writer writer) throws ValidationException {  try {    writer.write(getCreationPrefix() + getFullName() + " (");    for (Iterator<FieldDefinition> itetrator=getFields().iterator(); itetrator.hasNext(); ) {      FieldDefinition field=itetrator.next();      field.appendDBString(writer,session,this);      if (itetrator.hasNext()) {        writer.write(", ");      }    }    List<String> keyFields=getPrimaryKeyFieldNames();    if ((!keyFields.isEmpty()) && session.getPlatform().supportsPrimaryKeyConstraint()) {      writer.write(", ");      if (session.getPlatform().requiresNamedPrimaryKeyConstraints()) {        writer.write("CONSTRAINT " + getFullName() + "_PK ");      }      writer.write("PRIMARY KEY (");      for (Iterator<String> iterator=keyFields.iterator(); iterator.hasNext(); ) {        writer.write(iterator.next());        if (iterator.hasNext()) {          writer.write(", ");        }      }      writer.write(")");    }    if (session.getPlatform().requiresUniqueConstraintCreationOnTableCreate()) {      for (      UniqueKeyConstraint constraint : getUniqueKeys()) {        writer.write(", ");        constraint.appendDBString(writer,session);      }    }    writer.write(")");    session.getPlatform().writeTableCreationSuffix(writer,getCreationSuffix());  } catch (  IOException ioException) {    throw ValidationException.fileError(ioException);  }  return writer;}  }
class C{  public <A extends Annotation>List<Class<? extends ConstraintValidator<A,?>>> findValidatorClasses(Class<A> annotationType,ValidationTarget validationTarget){  List<Class<? extends ConstraintValidator<A,?>>> validatorClasses=getAllValidatorClasses(annotationType);  List<Class<? extends ConstraintValidator<A,?>>> matchingValidatorClasses=newArrayList();  for (  Class<? extends ConstraintValidator<A,?>> validatorClass : validatorClasses) {    if (supportsValidationTarget(validatorClass,validationTarget)) {      matchingValidatorClasses.add(validatorClass);    }  }  return matchingValidatorClasses;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:45.834 -0500",hash_original_method="6E785AECA168F3220756C0C7D730B7FB",hash_generated_method="EEEAAD5A170D7CCE5625A72FA61DF131") public void notifyChange(boolean selfChange){synchronized (mObservers) {    for (    ContentObserver observer : mObservers) {      observer.onChange(selfChange);    }  }}  }
class C{  public void terminate() throws IOException {  try {    try {synchronized (mJobs) {        while (mBusy || !mJobs.isEmpty()) {          mJobs.wait(NOT_DONE_SLEEP_TIME);        }      }    } catch (    final InterruptedException e) {      ProgramState.setAbort();    } finally {      shutdown();    }    rethrow();  }  finally {    ProgramState.clearAbort();    try {synchronized (mQueueThread) {        while (!mQueueDone) {          mQueueThread.wait(NOT_DONE_SLEEP_TIME);        }      }    } catch (    final InterruptedException e) {    }  }}  }
class C{  public boolean containsValue(Object value){  return indexOfValue(value) >= 0;}  }
class C{  public void clear(){  lastElementIndex=-1;}  }
class C{  @Override public synchronized void addDataSourceListener(DataSourceListener dsl){  super.addDataSourceListener(dsl);  m_dataSetEventTargets++;  try {    if ((m_Loader instanceof DatabaseLoader && m_dbSet && m_dataFormat == null) || (!(m_Loader instanceof DatabaseLoader) && m_dataFormat == null)) {      m_dataFormat=m_Loader.getStructure();      m_dbSet=false;    }  } catch (  Exception ex) {  }  notifyStructureAvailable(m_dataFormat);}  }
class C{  public RestoreSnapshotRequest source(byte[] source){  return source(source,0,source.length);}  }
class C{  private Solution select(Population population){  Solution winner=population.get(PRNG.nextInt(population.size()));  for (int i=1; i < size; i++) {    Solution candidate=population.get(PRNG.nextInt(population.size()));    int flag=comparator.compare(winner,candidate);    if (flag > 0) {      winner=candidate;    }  }  return winner;}  }
class C{  @Override public String toString(){  return "CUDA_MEMCPY2D[" + createString(",") + "]";}  }
class C{  public void startDocument(){  AttributesImpl attrs=new AttributesImpl();  try {    handler.startDocument();    handler.startElement("",TAG_PVLIST,TAG_PVLIST,attrs);    documentStarted=true;  } catch (  Throwable e) {    e.printStackTrace();  }}  }
class C{  public Continent(){  super();}  }
class C{  public float filter(float[] in){  float amp=0;  for (int i=0; i < in.length; i++) {    final float yn=a0 * (b0 * in[i] + b1 * in1 + b2 * in2 - a1 * out1 - a2 * out2);    in2=in1;    in1=in[i];    out2=out1;    out1=yn;    in[i]=yn;    if (amp < MathUtils.abs(in[i])) {      amp=in[i];    } else {      amp*=decay;    }  }  return amp;}  }
class C{  public ArrayList<V> values(){  ArrayList<V> list=New.arrayList(size);  int len=keys.length;  for (int i=0; i < len; i++) {    Value k=keys[i];    if (k != null && k != ValueNull.DELETED) {      list.add(values[i]);    }  }  return list;}  }
class C{  public DistributedLogClientBuilder redirectBackoffMaxMs(int ms){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setRedirectBackoffMaxMs(ms);  return newBuilder;}  }
class C{  private void renameKeyClassNames(Collection<PojoDescriptor> selPojos,String regex,String replace){  for (  PojoDescriptor pojo : selPojos)   pojo.keyClassName(pojo.keyClassName().replaceAll(regex,replace));}  }
class C{  public synchronized void disconnect(){  if (_zkConnection.isStarted()) {    _zkConnection.close();  }}  }
class C{  public CSVParserBuilder withIgnoreLeadingWhiteSpace(final boolean ignoreLeadingWhiteSpace){  this.ignoreLeadingWhiteSpace=ignoreLeadingWhiteSpace;  return this;}  }
class C{  public ApplierException(String message){  super(message);}  }
class C{  public void flip(int x,int y){  int offset=y * rowSize + (x >> 5);  bits[offset]^=1 << (x & 0x1f);}  }
class C{  @Override public void close(){  super.close();  simpleDao=null;  simpleRuntimeDao=null;}  }
class C{  public void clear(){  container.clear();  cache.clear();}  }
class C{  public void incAggregatedValue(final String field,final String fieldValue,final long inc) throws RequiredInputMissingException {  if (StringUtils.isBlank(field))   throw new RequiredInputMissingException("Missing required input for parameter 'field'");  if (StringUtils.isBlank(fieldValue))   throw new RequiredInputMissingException("Missing required input for parameter 'fieldValue'");  String fieldKey=StringUtils.lowerCase(StringUtils.trim(field));  String fieldValueKey=StringUtils.lowerCase(StringUtils.trim(fieldValue));  Map<String,Long> fieldAggregationValues=this.aggregatedValues.get(fieldKey);  if (fieldAggregationValues == null)   fieldAggregationValues=new HashMap<>();  long aggregationValue=(fieldAggregationValues.containsKey(fieldValueKey) ? fieldAggregationValues.get(fieldValueKey) : 0);  aggregationValue=aggregationValue + inc;  fieldAggregationValues.put(fieldValueKey,aggregationValue);  this.aggregatedValues.put(fieldKey,fieldAggregationValues);}  }
class C{  public static String escapeHTML(String string){  return StringEscapeUtils.escapeHtml(string);}  }
class C{  public void testStructuredDataViaBaseWriters() throws IOException {  SolrQueryResponse rsp=new SolrQueryResponse();  rsp.add(RawResponseWriter.CONTENT,"test");  rsp.add("foo","bar");  assertEquals("application/xml; charset=UTF-8",writerNoBase.getContentType(req(),rsp));  assertEquals("application/xml; charset=UTF-8",writerXmlBase.getContentType(req(),rsp));  assertEquals("application/json; charset=UTF-8",writerJsonBase.getContentType(req(),rsp));  assertEquals("application/octet-stream",writerBinBase.getContentType(req(),rsp));  String xml="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n<str name=\"content\">test</str><str name=\"foo\">bar</str>\n</response>\n";  StringWriter xmlSout=new StringWriter();  writerXmlBase.write(xmlSout,req(),rsp);  assertEquals(xml,xmlSout.toString());  ByteArrayOutputStream xmlBout=new ByteArrayOutputStream();  writerXmlBase.write(xmlBout,req(),rsp);  assertEquals(xml,xmlBout.toString(StandardCharsets.UTF_8.toString()));  StringWriter noneSout=new StringWriter();  writerNoBase.write(noneSout,req(),rsp);  assertEquals(xml,noneSout.toString());  ByteArrayOutputStream noneBout=new ByteArrayOutputStream();  writerNoBase.write(noneBout,req(),rsp);  assertEquals(xml,noneBout.toString(StandardCharsets.UTF_8.toString()));  String json="{\"content\":\"test\",\"foo\":\"bar\"}\n";  StringWriter jsonSout=new StringWriter();  writerJsonBase.write(jsonSout,req(),rsp);  assertEquals(json,jsonSout.toString());  ByteArrayOutputStream jsonBout=new ByteArrayOutputStream();  writerJsonBase.write(jsonBout,req(),rsp);  assertEquals(json,jsonBout.toString(StandardCharsets.UTF_8.toString()));  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  writerBinBase.write(bytes,req(),rsp);  BinaryResponseParser parser=new BinaryResponseParser();  NamedList<Object> out=parser.processResponse(new ByteArrayInputStream(bytes.toByteArray()),null);  assertEquals(RawResponseWriter.CONTENT,out.getName(0));  assertEquals("test",out.getVal(0));  assertEquals("foo",out.getName(1));  assertEquals("bar",out.getVal(1));}  }
class C{  public HttpBufferStore(int urlLengthMax,int headerSizeMax,int headerCountMax){  _uri=new byte[urlLengthMax];  _headerBuffer=new char[headerSizeMax];  _headerCapacity=headerCountMax;  _headerKeys=new CharSegment[_headerCapacity];  _headerValues=new CharSegment[_headerCapacity];  for (int i=0; i < _headerCapacity; i++) {    _headerKeys[i]=new CharSegment();    _headerValues[i]=new CharSegment();  }}  }
class C{  private JsonObject broadlinkExecuteCommand(int api_id,String command){  JsonObject initJsonObjectParams=broadlinkStandardParams(api_id,command);  return broadlinkExecuteCommand(initJsonObjectParams);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (typingStrategy: ");  result.append(typingStrategy);  result.append(')');  return result.toString();}  }
class C{  public InputStream fetchFileExportInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating File Export info query.");  InputStream iStream=null;  try {    Query query=new Query();    NfsExportQueryParams nfsExportQueryParam=new NfsExportQueryParams();    query.getQueryRequestChoice().add(nfsExportQueryParam);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(nfsExportQueryParam,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for file export info",jaxbException.getCause());  }  return iStream;}  }
class C{  public static void shuffle(Object[] a){  if (a == null)   throw new NullPointerException("argument array is null");  int n=a.length;  for (int i=0; i < n; i++) {    int r=i + uniform(n - i);    Object temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public void transpose(){  float tmp;  tmp=xy;  xy=yx;  yx=tmp;  tmp=xz;  xz=zx;  zx=tmp;  tmp=yz;  yz=zy;  zy=tmp;}  }
class C{  public static FilePosition fromLinePositions(InputSource source,int startLineNo,int startCharInLine,int endLineNo,int endCharInLine){  int lineNo=startLineNo - 1;  SourceBreaks b=new SourceBreaks(source,lineNo);  int charInFile=1;  int charInLine=1;  while (lineNo < startLineNo) {    b.lineStartsAt(++charInFile);    ++lineNo;  }  int delta=startCharInLine - charInLine;  charInFile+=delta;  charInLine+=delta;  int startCharInFile=charInFile;  while (lineNo < endLineNo) {    charInLine=1;    b.lineStartsAt(++charInFile);    ++lineNo;  }  delta=endCharInLine - charInLine;  charInFile+=delta;  charInLine+=delta;  int endCharInFile=charInFile;  return b.toFilePosition(startCharInFile,endCharInFile);}  }
class C{  public static List<LatLon> makeDatelineCrossingLocationsPositive(Iterable<? extends LatLon> locations){  if (locations == null) {    throw new IllegalArgumentException("Locations List Is Null");  }  Iterator<? extends LatLon> iter=locations.iterator();  if (!iter.hasNext())   return Collections.emptyList();  ArrayList<LatLon> newLocations=new ArrayList<LatLon>();  for (  LatLon location : locations) {    if (location == null)     continue;    if (location.getLongitude().degrees < 0) {      newLocations.add(LatLon.fromDegrees(location.getLatitude().degrees,location.getLongitude().degrees + 360));    } else {      newLocations.add(location);    }  }  return newLocations;}  }
class C{  @Override public String next(){  curr=nextLine;  try {    nextLine=file.readLine();  } catch (  IOException|NullPointerException e) {    nextLine=null;  }  return curr;}  }
class C{  public void beginTask(String name,int totalWork){}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HOST:    return isSetHost();case PORT:  return isSetPort();case ID:return isSetId();case V_NODES:return isSetVNodes();case PING_FREQUENCY:return isSetPingFrequency();case SERVICE_NAME:return isSetServiceName();case STATE:return isSetState();case TIMESTAMP:return isSetTimestamp();}throw new IllegalStateException();}  }
class C{  @NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> components){  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();  if (components.isEmpty()) {    return siblingLists;  }  if (components.size() == 1) {    RadComponent component=components.get(0);    siblingLists.put(component.getParent(),Collections.singletonList(component));    return siblingLists;  }  for (  RadComponent component : components) {    RadComponent parent=component.getParent();    List<RadComponent> children=siblingLists.get(parent);    if (children == null) {      children=new ArrayList<RadComponent>();      siblingLists.put(parent,children);    }    children.add(component);  }  return siblingLists;}  }
class C{  public void unlockMeta(Session session){  meta.unlock(session);}  }
class C{  public boolean isDeclared(String uri,String localName){  int idx=getIndex(uri,localName);  if (idx < 0) {    throw new IllegalArgumentException("");  }  return ((mItems[(idx << 3) + 5]) != null);}  }
class C{  private void discoverControlStation(StorageSystem system) throws VNXFileCollectionException {  _logger.info("Start Control Station discovery for storage system {}",system.getId());  VNXControlStation tmpSystem=null;  try {    tmpSystem=getControlStation(system);  } catch (  VNXException e) {    throw new VNXFileCollectionException("Get control station op failed",e);  }  if (tmpSystem != null) {    String sysNativeGuid=NativeGUIDGenerator.generateNativeGuid(DiscoveredDataObject.Type.vnxfile.toString(),tmpSystem.getSerialNumber());    system.setNativeGuid(sysNativeGuid);    system.setSerialNumber(tmpSystem.getSerialNumber());    String firmwareVersion=tmpSystem.getSoftwareVersion();    String minimumSupportedVersion=VersionChecker.getMinimumSupportedVersion(Type.valueOf(system.getSystemType()));    firmwareVersion=firmwareVersion.replaceAll("-",".").trim();    minimumSupportedVersion=minimumSupportedVersion.replaceAll("-",".");    system.setFirmwareVersion(firmwareVersion);    _logger.info("Verifying version details : Minimum Supported Version {} - Discovered VNX Version {}",minimumSupportedVersion,firmwareVersion);    if (VersionChecker.verifyVersionDetails(minimumSupportedVersion,firmwareVersion) < 0) {      system.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.INCOMPATIBLE.name());      system.setReachableStatus(false);      DiscoveryUtils.setSystemResourcesIncompatible(_dbClient,_coordinator,system.getId());      VNXFileCollectionException vnxe=new VNXFileCollectionException(String.format(" ** This version of VNX File is not supported ** Should be a minimum of %s",minimumSupportedVersion));      throw vnxe;    }    system.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    system.setReachableStatus(true);  } else {    _logger.error("Failed to retrieve control station info!");    system.setReachableStatus(false);  }  _logger.info("Control Station discovery for storage system {} complete",system.getId());}  }
class C{  public void registerSpaceObjectType(String str,Class<? extends Object> clazz){  nameToClass.put(str,clazz);  classToString.put(clazz,str);}  }
class C{  public Builder<VType> fRemove(int key){  map.remove(key);  return this;}  }
class C{  public boolean hasDataSources(){  return hasRepeatingExtension(DataSource.class);}  }
class C{  public static int convertDayOfWeekFromTimeToCalendar(int timeDayOfWeek){switch (timeDayOfWeek) {case Time.MONDAY:    return Calendar.MONDAY;case Time.TUESDAY:  return Calendar.TUESDAY;case Time.WEDNESDAY:return Calendar.WEDNESDAY;case Time.THURSDAY:return Calendar.THURSDAY;case Time.FRIDAY:return Calendar.FRIDAY;case Time.SATURDAY:return Calendar.SATURDAY;case Time.SUNDAY:return Calendar.SUNDAY;default :throw new IllegalArgumentException("Argument must be between Time.SUNDAY and " + "Time.SATURDAY");}}  }
class C{  public int readAgain(){  return lastChar;}  }
class C{  private static boolean showCheatSheet(View view,CharSequence text){  if (TextUtils.isEmpty(text)) {    return false;  }  final int[] screenPos=new int[2];  final Rect displayFrame=new Rect();  view.getLocationOnScreen(screenPos);  view.getWindowVisibleDisplayFrame(displayFrame);  final Context context=view.getContext();  final int viewWidth=view.getWidth();  final int viewHeight=view.getHeight();  final int viewCenterX=screenPos[0] + viewWidth / 2;  final int screenWidth=context.getResources().getDisplayMetrics().widthPixels;  final int estimatedToastHeight=(int)(ESTIMATED_TOAST_HEIGHT_DIPS * context.getResources().getDisplayMetrics().density);  Toast cheatSheet=Toast.makeText(context,text,Toast.LENGTH_SHORT);  boolean showBelow=screenPos[1] < estimatedToastHeight;  if (showBelow) {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top + viewHeight);  } else {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top - estimatedToastHeight);  }  cheatSheet.show();  return true;}  }
class C{  public static <E>boolean listIsSubset(List<E> list1,List<E> list2){  int size1=list1.size();  int size2=list2.size();  if (size1 > size2) {    return false;  }  if (size1 == 1) {    return list2.contains(list1.get(0));  }  if (size2 == 1) {    return list1.contains(list2.get(0));  }  for (int i=0; i < size2; i++) {    if (list2.get(i).equals(list1.get(0))) {      if (i < size2 - 1 && list1.get(1).equals(list2.get(i + 1))) {        for (int j=1; j < list1.size(); j++) {          if ((i + j) == size2) {            return false;          }          if (!list1.get(j).equals(list2.get(i + j))) {            return false;          }        }        return true;      } else       if (list1.get(1).equals(list2.get(i - 1))) {        for (int j=1; j < size1; j++) {          if ((i - j) == -1) {            return false;          }          if (!list1.get(j).equals(list2.get(i - j))) {            return false;          }        }        return true;      } else {        return false;      }    }  }  return false;}  }
class C{  public SoftwareTokenWorker(TokenInfo tokenInfo,SoftwareTokenType ignored){  super(tokenInfo);}  }
class C{  public ArrestWarrant(final String criminalName,final String policeOfficer,final int minutes,final String reason){  setRPClass(RPCLASS_NAME);  store();  hide();  put(CRIMINAL,criminalName);  put(POLICE_OFFICER,policeOfficer);  put(MINUTES,minutes);  put(REASON,reason);  put(TIMESTAMP,System.currentTimeMillis());}  }
class C{  public synchronized void close(){  if (closing) {    return;  }  closing=true;  if (userSessions.size() > 0) {    Session[] all=new Session[userSessions.size()];    userSessions.toArray(all);    for (    Session s : all) {      try {        s.rollback();        s.close();      } catch (      DbException e) {        trace.error(e,"disconnecting session #{0}",s.getId());      }    }  }  dsRepository.close();  traceSystem.close();}  }
class C{  public static List<String> readLines(final InputStream input) throws IOException {  return IOUtils.readLines(input,Charset.defaultCharset());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Binomial(double[] priors,int large){  super(priors,large);}  }
class C{  private void updatePreferenceUiValues(){  String value;  String summary;  Resources resources;  if ((null == mSession) || (null == mRoom)) {    Log.w(LOG_TAG,"## updatePreferenceUiValues(): session or room may be missing");    return;  }  if (null != mRoomPhotoAvatar) {    mRoomPhotoAvatar.refreshAvatar();  }  if (null != mRoomNameEditTxt) {    value=mRoom.getLiveState().name;    mRoomNameEditTxt.setSummary(value);    mRoomNameEditTxt.setText(value);  }  if (null != mRoomTopicEditTxt) {    value=mRoom.getTopic();    mRoomTopicEditTxt.setSummary(value);    mRoomTopicEditTxt.setText(value);  }  if (null != mRoomMuteNotificationsSwitch) {    boolean isChecked=mBingRulesManager.isRoomNotificationsDisabled(mRoom);    mRoomMuteNotificationsSwitch.setChecked(isChecked);  }  if (!isAdded()) {    Log.e(LOG_TAG,"## updatePreferenceUiValues(): fragment not added to Activity - isAdded()=false");    return;  } else {    try {      resources=getResources();    } catch (    Exception ex) {      Log.e(LOG_TAG,"## updatePreferenceUiValues(): Exception in getResources() - Msg=" + ex.getLocalizedMessage());      return;    }  }  if ((null != mRoomAccessRulesListPreference) && (null != resources)) {    String joinRule=mRoom.getLiveState().join_rule;    String guestAccessRule=mRoom.getLiveState().getGuestAccess();    if (RoomState.JOIN_RULE_INVITE.equals(joinRule)) {      value=ACCESS_RULES_ONLY_PEOPLE_INVITED;      summary=resources.getString(R.string.room_settings_room_access_entry_only_invited);    } else     if (RoomState.JOIN_RULE_PUBLIC.equals(joinRule) && RoomState.GUEST_ACCESS_FORBIDDEN.equals(guestAccessRule)) {      value=ACCESS_RULES_ANYONE_WITH_LINK_APART_GUEST;      summary=resources.getString(R.string.room_settings_room_access_entry_anyone_with_link_apart_guest);    } else     if (RoomState.JOIN_RULE_PUBLIC.equals(joinRule) && RoomState.GUEST_ACCESS_CAN_JOIN.equals(guestAccessRule)) {      value=ACCESS_RULES_ANYONE_WITH_LINK_INCLUDING_GUEST;      summary=resources.getString(R.string.room_settings_room_access_entry_anyone_with_link_including_guest);    } else {      value=null;      summary=null;      Log.w(LOG_TAG,"## updatePreferenceUiValues(): unknown room access configuration joinRule=" + joinRule + " and guestAccessRule="+ guestAccessRule);    }    if (null != value) {      mRoomAccessRulesListPreference.setValue(value);      mRoomAccessRulesListPreference.setSummary(summary);    } else {      mRoomHistoryReadabilityRulesListPreference.setValue(UNKNOWN_VALUE);      mRoomHistoryReadabilityRulesListPreference.setSummary("");    }  }  if (null != mRoomTagListPreference) {    if (null != mRoom.getAccountData() && (null != resources)) {      if (null != mRoom.getAccountData().roomTag(RoomTag.ROOM_TAG_FAVOURITE)) {        value=resources.getString(R.string.room_settings_tag_pref_entry_value_favourite);        summary=resources.getString(R.string.room_settings_tag_pref_entry_favourite);      } else       if (null != mRoom.getAccountData().roomTag(RoomTag.ROOM_TAG_LOW_PRIORITY)) {        value=resources.getString(R.string.room_settings_tag_pref_entry_value_low_priority);        summary=resources.getString(R.string.room_settings_tag_pref_entry_low_priority);      } else {        value=resources.getString(R.string.room_settings_tag_pref_entry_value_none);        summary=Html.fromHtml("<i>" + getResources().getString(R.string.room_settings_tag_pref_no_tag) + "</i>").toString();      }      mRoomTagListPreference.setValue(value);      mRoomTagListPreference.setSummary(summary);    }  }  if (null != mRoomHistoryReadabilityRulesListPreference) {    value=mRoom.getLiveState().getHistoryVisibility();    summary=null;    if ((null != value) && (null != resources)) {      if (value.equals(resources.getString(R.string.room_settings_read_history_entry_value_anyone))) {        summary=resources.getString(R.string.room_settings_read_history_entry_anyone);      } else       if (value.equals(resources.getString(R.string.room_settings_read_history_entry_value_members_only_option_time_shared))) {        summary=resources.getString(R.string.room_settings_read_history_entry_members_only_option_time_shared);      } else       if (value.equals(resources.getString(R.string.room_settings_read_history_entry_value_members_only_invited))) {        summary=resources.getString(R.string.room_settings_read_history_entry_members_only_invited);      } else       if (value.equals(resources.getString(R.string.room_settings_read_history_entry_value_members_only_joined))) {        summary=resources.getString(R.string.room_settings_read_history_entry_members_only_joined);      } else {        Log.w(LOG_TAG,"## updatePreferenceUiValues(): unknown room read history value=" + value);        summary=null;      }    }    if (null != summary) {      mRoomHistoryReadabilityRulesListPreference.setValue(value);      mRoomHistoryReadabilityRulesListPreference.setSummary(summary);    } else {      mRoomHistoryReadabilityRulesListPreference.setValue(UNKNOWN_VALUE);      mRoomHistoryReadabilityRulesListPreference.setSummary("");    }  }}  }
class C{  public ZyGraphProximitySettings(final ZyGraphProximitySettings settings){  m_proximityBrowsing=settings.getProximityBrowsing();  m_proximityBrowsingActivisionThreshold=settings.getProximityBrowsingActivationThreshold();  m_proximityBrowsingChildren=settings.getProximityBrowsingChildren();  m_proximityBrowsingFrozen=settings.getProximityBrowsingFrozen();  m_proximityBrowsingParents=settings.getProximityBrowsingParents();  m_ProximityPreview=settings.getProximityBrowsingPreview();}  }
class C{  public final boolean isMissing(){  return missing;}  }
class C{  public void removeReaderListener(ReaderListener readerListener){synchronized (listeners) {    listeners.remove(readerListener);  }}  }
class C{  private EffectiveTldFinder(){  initialize(null);}  }
class C{  public void addThreadCount(int threadCount){  this.totalThreadCount+=threadCount;}  }
class C{  @GET @Path("search/fulltext") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public Response searchUsingFullText(@QueryParam("query") String query,@DefaultValue(LIMIT_OFFSET_DEFAULT) @QueryParam("limit") int limit,@DefaultValue(LIMIT_OFFSET_DEFAULT) @QueryParam("offset") int offset){  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"MetadataDiscoveryResource.searchUsingFullText(" + query + ", "+ limit+ ", "+ offset+ ")");    }    query=ParamChecker.notEmpty(query,"query cannot be null or empty");    QueryParams queryParams=validateQueryParams(limit,offset);    final String jsonResultStr=discoveryService.searchByFullText(query,queryParams);    JSONArray rowsJsonArr=new JSONArray(jsonResultStr);    JSONObject response=new FullTextJSonResponseBuilder().results(rowsJsonArr).query(query).build();    return Response.ok(response).build();  } catch (  DiscoveryException|IllegalArgumentException e) {    LOG.error("Unable to get entity list for query {}",query,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to get entity list for query {}",query,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public void init(MediaPlayer mediaPlayer,ShaderInterface shaderEffect){  if (mediaPlayer == null)   Toast.makeText(mContext,"Set MediaPlayer before continuing",Toast.LENGTH_LONG).show(); else   mMediaPlayer=mediaPlayer;  if (shaderEffect == null)   effect=new NoEffect(); else   effect=shaderEffect;}  }
class C{  public CGraphBuilderReporter(final ListenerProvider<IGraphBuilderListener> listeners){  m_listeners=listeners;}  }
class C{  protected Collection<CustomToken> tokenizeRegular(PerlStringLexer stringLexer,boolean isSecondBlock){  ArrayList<CustomToken> tokens=new ArrayList<CustomToken>();  int currentOffset=startOffset;  int blockStart=currentOffset;  boolean isEscaped=false;  boolean isCharGroup=false;  int regexEndOffset=endOffset - 1;  while (currentOffset < regexEndOffset) {    char currentChar=buffer.charAt(currentOffset);    int charsLeft=regexEndOffset - currentOffset;    if (!isEscaped && !isCharGroup && charsLeft > 3 && "(?#".equals(buffer.subSequence(currentOffset,currentOffset + 3).toString())) {      if (currentOffset > blockStart) {        stringLexer.reset(buffer,blockStart,currentOffset,0);        tokens.addAll(PerlLexer.processLexer(stringLexer));      }      int commentStart=currentOffset;      currentOffset+=2;      while (currentOffset < regexEndOffset && buffer.charAt(currentOffset) != ')') {        currentOffset++;      }      blockStart=currentOffset;      if (currentOffset == regexEndOffset) {        tokens.add(new CustomToken(commentStart,currentOffset,COMMENT_LINE));      } else {        tokens.add(new CustomToken(commentStart,currentOffset + 1,COMMENT_LINE));      }    }    if (!isSecondBlock) {      if (!isEscaped && !isCharGroup && currentChar == '[') {        isCharGroup=true;      } else       if (!isEscaped && isCharGroup && currentChar == ']') {        isCharGroup=false;      }    }    isEscaped=!isEscaped && currentChar == '\\';    currentOffset++;  }  if (currentOffset > blockStart) {    stringLexer.reset(buffer,blockStart,currentOffset,0);    tokens.addAll(PerlLexer.processLexer(stringLexer));  }  tokens.add(new CustomToken(currentOffset,currentOffset + 1,REGEX_QUOTE_CLOSE));  return tokens;}  }
class C{  public PointRDD(JavaSparkContext spark,String InputLocation,Integer Offset,String Splitter){  this.setRawPointRDD(spark.textFile(InputLocation).map(new PointFormatMapper(Offset,Splitter)));}  }
class C{  public WarningMessage(int importance,String message,CSTNode context,SourceUnit owner){  super(message,context,owner);  this.importance=importance;}  }
class C{  public String globalInfo(){  return "OneRAttributeEval :\n\nEvaluates the worth of an attribute by " + "using the OneR classifier.\n";}  }
class C{  public void removeAddressBookListener(AddressBookEventListener listener){  listeners.remove(listener);}  }
class C{  public boolean isLimitedAccess(){  return this == LIMITED_ACCESS;}  }
class C{  public static Pointer roundDown(PointerBase that,Unsigned multiple){  return (Pointer)UnsignedUtils.roundDown((Unsigned)that,multiple);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private void initializeScrollbars(){  verticalScrollbar.addAdjustmentListener(listener);  add(verticalScrollbar,BorderLayout.EAST);  horizontalScrollbar.addAdjustmentListener(listener);  add(horizontalScrollbar,BorderLayout.SOUTH);}  }
class C{  public <T>T copy(T object){  return readObject(writeObject(object).flip());}  }
class C{  public LongPolynomial5(IntegerPolynomial p){  numCoeffs=p.coeffs.length;  coeffs=new long[(numCoeffs + 4) / 5];  int cIdx=0;  int shift=0;  for (int i=0; i < numCoeffs; i++) {    coeffs[cIdx]|=((long)p.coeffs[i]) << shift;    shift+=12;    if (shift >= 60) {      shift=0;      cIdx++;    }  }}  }
class C{  void imtql2(int nm,int n,double d[],double e[],double z[]){  int index, nnm, j, last, l, m, i, k, iteration;  boolean convergence, underflow;  double b, test, g, r, s, c, p, f;  if (n == 1)   return;  ierr=0;  last=n - 1;  for (i=1; i < n; i++)   e[i - 1]=e[i];  e[last]=0.0;  nnm=n * nm;  for (l=0; l < n; l++) {    iteration=0;    while (iteration <= 30) {      for (m=l; m < n; m++) {        convergence=false;        if (m == last)         break; else {          test=fabs(d[m]) + fabs(d[m + 1]);          if (test + fabs(e[m]) == test)           convergence=true;        }        if (convergence)         break;      }      if (m != l) {        if (iteration == 30) {          ierr=l;          return;        }        p=d[l];        iteration+=1;        g=(d[l + 1] - p) / (2.0 * e[l]);        r=svd_pythag(g,1.0);        g=d[m] - p + e[l] / (g + svd_fsign(r,g));        s=1.0;        c=1.0;        p=0.0;        underflow=false;        i=m - 1;        while (underflow == false && i >= l) {          f=s * e[i];          b=c * e[i];          r=svd_pythag(f,g);          e[i + 1]=r;          if (r == 0.0)           underflow=true; else {            s=f / r;            c=g / r;            g=d[i + 1] - p;            r=(d[i] - g) * s + 2.0 * c * b;            p=s * r;            d[i + 1]=g + p;            g=c * r - b;            for (k=0; k < nnm; k+=n) {              index=k + i;              f=z[index + 1];              z[index + 1]=s * z[index] + c * f;              z[index]=c * z[index] - s * f;            }            i--;          }        }        if (underflow) {          d[i + 1]-=p;          e[m]=0.0;        } else {          d[l]-=p;          e[l]=g;          e[m]=0.0;        }      } else       break;    }  }  for (l=1; l < n; l++) {    i=l - 1;    k=i;    p=d[i];    for (j=l; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    if (k != i) {      d[k]=d[i];      d[i]=p;      for (j=0; j < nnm; j+=n) {        p=z[j + i];        z[j + i]=z[j + k];        z[j + k]=p;      }    }  }  return;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("RequestReflectionTarg");  ReferenceType targ=bpe.location().declaringType();  ThreadReference thread=bpe.thread();  Field fooField=targ.fieldByName("foo");  if (fooField == null) {    throw new Exception("test error: cannot find field foo");  }  List meths=targ.methodsByName("bar");  if (meths.size() != 1) {    throw new Exception("test error: should be one bar()");  }  Method barMethod=(Method)meths.get(0);  List exClasses=vm().classesByName("java.lang.Exception");  if (exClasses.size() != 1) {    throw new Exception("test error: should be one java.lang.Exception");  }  ReferenceType exceptionClass=(ReferenceType)exClasses.get(0);  EventRequestManager erm=eventRequestManager();  StepRequest sr=erm.createStepRequest(thread,StepRequest.STEP_MIN,StepRequest.STEP_OUT);  sr.setSuspendPolicy(EventRequest.SUSPEND_NONE);  sr.enable();  if (!sr.thread().equals(thread)) {    throw new Exception("RequestReflectionTest fail: exceptions do not match " + thread + " != "+ sr.thread());  }  if (sr.size() != StepRequest.STEP_MIN) {    throw new Exception("RequestReflectionTest fail: size does not match " + sr.size() + " != "+ StepRequest.STEP_MIN);  }  if (sr.depth() != StepRequest.STEP_OUT) {    throw new Exception("RequestReflectionTest fail: depth does not match " + sr.depth() + " != "+ StepRequest.STEP_OUT);  }  if (sr.suspendPolicy() != EventRequest.SUSPEND_NONE) {    throw new Exception("RequestReflectionTest fail: wrong suspend policy " + sr.suspendPolicy());  }  if (!sr.isEnabled()) {    throw new Exception("RequestReflectionTest fail: should be enabled");  }  sr.disable();  sr=erm.createStepRequest(thread,StepRequest.STEP_LINE,StepRequest.STEP_INTO);  sr.setSuspendPolicy(EventRequest.SUSPEND_ALL);  if (sr.size() != StepRequest.STEP_LINE) {    throw new Exception("RequestReflectionTest fail: size does not match " + sr.size() + " != "+ StepRequest.STEP_LINE);  }  if (sr.depth() != StepRequest.STEP_INTO) {    throw new Exception("RequestReflectionTest fail: depth does not match " + sr.depth() + " != "+ StepRequest.STEP_INTO);  }  if (sr.suspendPolicy() != EventRequest.SUSPEND_ALL) {    throw new Exception("RequestReflectionTest fail: wrong suspend policy " + sr.suspendPolicy());  }  if (sr.isEnabled()) {    throw new Exception("RequestReflectionTest fail: should not be enabled");  }  AccessWatchpointRequest awr=erm.createAccessWatchpointRequest(fooField);  if (!awr.field().equals(fooField)) {    throw new Exception("RequestReflectionTest fail: fields do not match " + fooField + " != "+ awr.field());  }  if (awr.suspendPolicy() != EventRequest.SUSPEND_ALL) {    throw new Exception("RequestReflectionTest fail: wrong suspend policy " + awr.suspendPolicy());  }  if (awr.isEnabled()) {    throw new Exception("RequestReflectionTest fail: should not be enabled");  }  BreakpointRequest bpr=erm.createBreakpointRequest(barMethod.location());  bpr.setSuspendPolicy(EventRequest.SUSPEND_NONE);  bpr.enable();  if (!bpr.location().method().equals(barMethod)) {    throw new Exception("RequestReflectionTest fail: methodss do not match " + barMethod + " != "+ bpr.location().method());  }  if (bpr.suspendPolicy() != EventRequest.SUSPEND_NONE) {    throw new Exception("RequestReflectionTest fail: wrong suspend policy " + bpr.suspendPolicy());  }  if (!bpr.isEnabled()) {    throw new Exception("RequestReflectionTest fail: should be enabled");  }  ExceptionRequest exr=erm.createExceptionRequest(exceptionClass,true,false);  exr.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);  exr.enable();  exr.disable();  if (!exr.exception().equals(exceptionClass)) {    throw new Exception("RequestReflectionTest fail: not java.lang.Exception " + exr.exception());  }  if (exr.suspendPolicy() != EventRequest.SUSPEND_EVENT_THREAD) {    throw new Exception("RequestReflectionTest fail: wrong suspend policy " + exr.suspendPolicy());  }  if (exr.isEnabled()) {    throw new Exception("RequestReflectionTest fail: should not be enabled");  }  listenUntilVMDisconnect();  println("RequestReflectionTest: passed");}  }
class C{  static public boolean isNaturalDocOrder(int analysis){  if (canCrissCross(analysis) || isSet(analysis,BIT_NAMESPACE) || walksFilteredList(analysis))   return false;  if (walksInDocOrder(analysis))   return true;  return false;}  }
class C{  private void computeWeights(Node node){  int wsum=0;  for (  Node child : node.children) {    computeWeights(child);    wsum+=child.weight;  }  node.weight=Math.max(1,wsum);}  }
class C{  public static LoggingFraction createDebugLoggingFraction(){  return createDefaultLoggingFraction(Level.DEBUG);}  }
class C{  private ContentValues makeWeatherDataContentValues(WeatherData wd,long expirationTime,String locationKey){  ContentValues cvs=new ContentValues();  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_LOCATION_KEY,locationKey);  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_NAME,wd.getName());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_DATE,wd.getDate());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_COD,wd.getCod());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_SUNRISE,wd.getSys().getSunrise());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_SUNSET,wd.getSys().getSunset());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_COUNTRY,wd.getSys().getCountry());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_TEMP,wd.getMain().getTemp());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_HUMIDITY,wd.getMain().getHumidity());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_PRESSURE,wd.getMain().getPressure());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_SPEED,wd.getWind().getSpeed());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_DEG,wd.getWind().getDeg());  cvs.put(WeatherContract.WeatherValuesEntry.COLUMN_EXPIRATION_TIME,expirationTime);  return cvs;}  }
class C{  public VertexPartitionCollapser(Supplier<Graph<CV,CE>> graph_factory,Supplier<CV> vertex_factory,Supplier<CE> edge_factory){  this.graph_factory=graph_factory;  this.vertex_factory=vertex_factory;  this.edge_factory=edge_factory;  this.set_collapsedv=new HashMap<Set<V>,CV>();}  }
class C{  private static Object castResult(Object result){  if (result == null) {    return null;  }  JsonNode node=JSONHelper.readJsonNode(result.toString());  return JSONHelper.transformPreserveNull(node.get("result"));}  }
class C{  public ClassPool(ClassPool parent){  this.classes=new Hashtable(INIT_HASH_SIZE);  this.source=new ClassPoolTail();  this.parent=parent;  if (parent == null) {    CtClass[] pt=CtClass.primitiveTypes;    for (int i=0; i < pt.length; ++i)     classes.put(pt[i].getName(),pt[i]);  }  this.cflow=null;  this.compressCount=0;  clearImportedPackages();}  }
class C{  public Atomic50StatisticsImpl(StatisticsType type,String textId,long numericId,long uniqueId,StatisticsManager system){  super(type,calcTextId(system,textId),calcNumericId(system,numericId),uniqueId,0);  this.dSystem=system;  StatisticsTypeImpl realType=(StatisticsTypeImpl)type;  if (realType.getDoubleStatCount() > 0) {    throw new IllegalArgumentException(LocalizedStrings.Atomic50StatisticsImpl_ATOMICS_DO_NOT_SUPPORT_DOUBLE_STATS.toLocalizedString());  }  int intCount=realType.getIntStatCount();  int longCount=realType.getLongStatCount();  if (intCount > 0) {    this.intStorage=new AtomicIntegerArray(intCount);    this.intDirty=new AtomicIntegerArray(intCount);    this.intReadPrepLock=new Object[intCount];    for (int i=0; i < intCount; i++) {      this.intReadPrepLock[i]=new Object();    }  } else {    this.intStorage=null;    this.intDirty=null;    this.intReadPrepLock=null;  }  if (longCount > 0) {    this.longStorage=new AtomicLongArray(longCount);    this.longDirty=new AtomicIntegerArray(longCount);    this.longReadPrepLock=new Object[longCount];    for (int i=0; i < longCount; i++) {      this.longReadPrepLock[i]=new Object();    }  } else {    this.longStorage=null;    this.longDirty=null;    this.longReadPrepLock=null;  }}  }
class C{  public static Properties loadProperties(ClassLoader classLoader,String classpathResource){  return loadProperties(null,classpathResource);}  }
class C{  public static <T extends SplitableByLetter>Map<String,List<T>> splitByLetter(List<T> objects,Comparator<T> comparator){  Map<String,List<T>> splitMap=new HashMap<String,List<T>>();  Vector<String> stringsToSplit=new Vector<String>(objects.size());  String commonPart=null;  for (  T object : objects) {    if (object == null)     continue;    String string=object.getTitleToSplitByLetter();    String temp=Normalizer.normalize(string,Normalizer.Form.NFD);    Pattern pattern=Pattern.compile("\\p{InCombiningDiacriticalMarks}+");    String norm=pattern.matcher(temp).replaceAll("");    string=norm;    stringsToSplit.add(string);    if (commonPart == null) {      commonPart=string.toUpperCase();    } else     if (commonPart.length() > 0) {      String tempCommonPart=commonPart;      while (tempCommonPart.length() > 0 && !string.toUpperCase().startsWith(tempCommonPart)) {        tempCommonPart=tempCommonPart.substring(0,tempCommonPart.length() - 1);      }      commonPart=tempCommonPart.toUpperCase();    }  }  int firstDifferentCharPosition=commonPart.length();  for (int i=0; i < objects.size(); i++) {    T object=objects.get(i);    if (object == null)     continue;    String string=stringsToSplit.get(i);    String discriminantPart="_";    if (Helper.isNotNullOrEmpty(string)) {      if (firstDifferentCharPosition + 1 >= string.length())       discriminantPart=string.toUpperCase(); else       discriminantPart=string.substring(0,firstDifferentCharPosition + 1).toUpperCase();      List<T> list=splitMap.get(discriminantPart);      if (list == null) {        list=new LinkedList<T>();        splitMap.put(discriminantPart,list);      }      list.add(object);    }  }  for (  String letter : splitMap.keySet()) {    List<T> objectsInThisLetter=splitMap.get(letter);    Collections.sort(objectsInThisLetter,comparator);  }  return splitMap;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isSystemLocationSettingEnabled(){  LocationManager locationManager=(LocationManager)mContext.getSystemService(Context.LOCATION_SERVICE);  return (locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER) || locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER));}  }
class C{  public static boolean notEmpty(Object[] array){  return array != null && array.length > 0;}  }
class C{  public ColorSpinnerAdapter(Context context){  super(context,layoutID);  this.productColorList=new ArrayList<>();  this.layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}  }
class C{  public void trim(double leftTrimSecond,double rightTrimSecond){  int sampleRate=waveHeader.getSampleRate();  int bitsPerSample=waveHeader.getBitsPerSample();  int channels=waveHeader.getChannels();  int leftTrimNumberOfSample=(int)(sampleRate * bitsPerSample / 8 * channels * leftTrimSecond);  int rightTrimNumberOfSample=(int)(sampleRate * bitsPerSample / 8 * channels * rightTrimSecond);  trim(leftTrimNumberOfSample,rightTrimNumberOfSample);}  }
class C{  private Workflow.Method rollbackMethodNullMethod(){  return new Workflow.Method(ROLLBACK_METHOD_NULL);}  }
class C{  public void writeText(char text[]) throws IOException {  if (text == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text);  } else {    Util.writeText(writer,buffer,text);  }}  }
class C{  public void registerRenderInformation(){}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {  ChannelOutHttp2 stream=_request.getChannelOut();  int streamId=_request.channel().getId();  if (_isHeaders) {    writeHeaders(outHttp);  }  int tailFlags;switch (getFlagsHttp()) {case END_STREAM:    tailFlags=Http2Constants.END_STREAM;  break;default :tailFlags=0;break;}if (_head != null || tailFlags != 0) {stream.addSendBuffer(_head,ChannelOutHttp2.FRAME_LENGTH,tailFlags);}stream.writeCont(outHttp);}  }
class C{  public Boolean isTLS10(){  return tls10;}  }
class C{  public XMPPError(int code,String message){  this.code=code;  this.message=message;}  }
class C{  public NoSuchAlgorithmException(String msg){  super(msg);}  }
class C{  public boolean string_constants(){  return soot.PhaseOptions.getBoolean(options,"string-constants");}  }
class C{  void doTerrainEditToolActionEnded(){  if (terrainTool != null) {    terrainTool.actionEnded(jmeRootNode,editorController.getCurrentDataObject());  }}  }
class C{  @Deprecated static CharSequence readUrl(URL url,String charset) throws IOException {  StringBuilder buffer=new StringBuilder(1024);  InputStream inputStream=url.openStream();  try {    InputStreamReader reader=new InputStreamReader(inputStream,charset);    char[] charArray=new char[1024];    int charsRead=0;    do {      charsRead=reader.read(charArray);      if (charsRead >= 0) {        buffer.append(charArray,0,charsRead);      }    } while (charsRead > 0);  }  finally {    inputStream.close();  }  return buffer;}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,byte value){  if (extras == null) {    extras=new Bundle();  }  extras.putByte(name,value);  return this;}  }
class C{  public void testClassFromModule() throws Exception {  runPythonTest(new SkeletonTestTask("dotNet/expected.skeleton.java.py","com.just.like.java","import_class_from_module.py",null));}  }
class C{  protected void clearOutEvents(){  sCIIf.clearOutEvents();}  }
class C{  public double[] eigenValues(){  double[] eigenValues=new double[eigenPairs.length];  for (int i=0; i < eigenPairs.length; i++) {    eigenValues[i]=eigenPairs[i].getEigenvalue();  }  return eigenValues;}  }
class C{  private void insert(final char[] revB,final DiffBlock curB) throws UnsupportedEncodingException {  String text=copy(revB,curB.getRevBStart(),curB.getRevBEnd());  DiffPart action=new DiffPart(DiffAction.INSERT);  action.setStart(version.length());  codecData.checkBlocksizeS(version.length());  action.setText(text);  codecData.checkBlocksizeL(text.getBytes(WIKIPEDIA_ENCODING).length);  diff.add(action);  version.append(text);}  }
class C{  @Override public void LDC(Class<?> x){  ReferenceExpression ref=env.heap.getReference(x);  env.topFrame().operandStack.pushRef(ref);}  }
class C{  public boolean isUnion(){  return true;}  }
class C{  MenuItemImpl(MenuBuilder menu,int group,int id,int categoryOrder,int ordering,CharSequence title,int showAsAction){  String lang=menu.getContext().getResources().getConfiguration().locale.toString();  if (sPrependShortcutLabel == null || !lang.equals(sLanguage)) {    sLanguage=lang;    sPrependShortcutLabel=menu.getContext().getResources().getString(com.android.internal.R.string.prepend_shortcut_label);    sEnterShortcutLabel=menu.getContext().getResources().getString(com.android.internal.R.string.menu_enter_shortcut_label);    sDeleteShortcutLabel=menu.getContext().getResources().getString(com.android.internal.R.string.menu_delete_shortcut_label);    sSpaceShortcutLabel=menu.getContext().getResources().getString(com.android.internal.R.string.menu_space_shortcut_label);  }  mMenu=menu;  mId=id;  mGroup=group;  mCategoryOrder=categoryOrder;  mOrdering=ordering;  mTitle=title;  mShowAsAction=showAsAction;}  }
class C{  @Override public String toString(){  String result=m_NumValues + " Normal Kernels. \nStandardDev = " + Utils.doubleToString(m_StandardDev,6,4)+ " Precision = "+ m_Precision;  if (m_NumValues == 0) {    result+="  \nMean = 0";  } else {    result+="  \nMeans =";    for (int i=0; i < m_NumValues; i++) {      result+=" " + m_Values[i];    }    if (!m_AllWeightsOne) {      result+="\nWeights = ";      for (int i=0; i < m_NumValues; i++) {        result+=" " + m_Weights[i];      }    }  }  return result + "\n";}  }
class C{  public VectorSeries(Comparable key){  this(key,false,true);}  }
class C{  public boolean isNumericDatatype(DataType dataType){switch (dataType) {case INT:case LONG:case DOUBLE:case DECIMAL:    return true;default :  return false;}}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),true,false);  return child == null ? NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  private static Pair<UUID,byte[]> parsePsshAtom(byte[] atom){  ParsableByteArray atomData=new ParsableByteArray(atom);  if (atomData.limit() < Atom.FULL_HEADER_SIZE + 16 + 4) {    return null;  }  atomData.setPosition(0);  int atomSize=atomData.readInt();  if (atomSize != atomData.bytesLeft() + 4) {    return null;  }  int atomType=atomData.readInt();  if (atomType != Atom.TYPE_pssh) {    return null;  }  int atomVersion=Atom.parseFullAtomVersion(atomData.readInt());  if (atomVersion > 1) {    Log.w(TAG,"Unsupported pssh version: " + atomVersion);    return null;  }  UUID uuid=new UUID(atomData.readLong(),atomData.readLong());  if (atomVersion == 1) {    int keyIdCount=atomData.readUnsignedIntToInt();    atomData.skipBytes(16 * keyIdCount);  }  int dataSize=atomData.readUnsignedIntToInt();  if (dataSize != atomData.bytesLeft()) {    return null;  }  byte[] data=new byte[dataSize];  atomData.readBytes(data,0,dataSize);  return Pair.create(uuid,data);}  }
class C{  public FollowAdapter(Context context,NavigationHandler navigationHandler,UserHandler userHandler,PLYAndroid client,int avatarSizePx,DialogFragment dismissableDialog,boolean showFollowButton,User[] users){  this.context=context;  this.navigationHandler=navigationHandler;  this.userHandler=userHandler;  this.client=client;  this.avatarSizePx=avatarSizePx;  this.dismissableDialog=dismissableDialog;  this.showFollowButton=showFollowButton;  this.users=users == null ? new User[0] : users;  setHasStableIds(true);}  }
class C{  public Future<?> registerEventProcessorFactory(IEventProcessorFactory<?> factory) throws Exception {  return registerEventProcessorFactory(factory,EventProcessorOptions.getDefaultOptions());}  }
class C{  ChunkedIntArray(int slotsize){  if (this.slotsize < slotsize)   throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CHUNKEDINTARRAY_NOT_SUPPORTED,new Object[]{Integer.toString(slotsize)})); else   if (this.slotsize > slotsize)   System.out.println("*****WARNING: ChunkedIntArray(" + slotsize + ") wasting "+ (this.slotsize - slotsize)+ " words per slot");  chunks.addElement(fastArray);}  }
class C{  public boolean blockInternalToLevelXing(LevelXing x,Block block){  if ((x == null) || (block == null)) {    return false;  }  LayoutBlock lBlock=layoutBlockManager.getByUserName(block.getUserName());  if (lBlock == null) {    return false;  }  if ((x.getConnectA() == null) || (x.getConnectB() == null) || (x.getConnectC() == null)|| (x.getConnectD() == null)) {    return false;  }  if ((x.getLayoutBlockAC() != lBlock) && (x.getLayoutBlockBD() != lBlock)) {    return false;  }  if (((TrackSegment)x.getConnectA()).getLayoutBlock() == lBlock) {    return false;  }  if (((TrackSegment)x.getConnectB()).getLayoutBlock() == lBlock) {    return false;  }  if (((TrackSegment)x.getConnectC()).getLayoutBlock() == lBlock) {    return false;  }  if (((TrackSegment)x.getConnectD()).getLayoutBlock() == lBlock) {    return false;  }  return true;}  }
class C{  public static <V>Map lowercaseKeys(Map<String,V> map){  Map<String,V> result=new HashMap<String,V>(map.size());  for (Iterator<String> it=map.keySet().iterator(); it.hasNext(); ) {    String key=it.next();    if (result.containsKey(key.toLowerCase())) {      throw new IllegalArgumentException("Duplicate string key in map when lower casing");    }    result.put(key.toLowerCase(),map.get(key));  }  return result;}  }
class C{  public boolean isConnected(){  return _coordinator.isConnected();}  }
class C{  public void cut(){  copy();  deleteSelected();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_DECLS_OR_BINDINGS:    return varDeclsOrBindings != null && !varDeclsOrBindings.isEmpty();case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_STMT_KEYWORD:  return varStmtKeyword != VAR_STMT_KEYWORD_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static void writeObject(final Value object,final Set<Resource> contexts,final JsonGenerator jg) throws JsonGenerationException, IOException {  jg.writeStartObject();  if (object instanceof Literal) {    jg.writeObjectField(RDFJSONUtility.VALUE,object.stringValue());    jg.writeObjectField(RDFJSONUtility.TYPE,RDFJSONUtility.LITERAL);    final Literal l=(Literal)object;    if (Literals.isLanguageLiteral(l)) {      jg.writeObjectField(RDFJSONUtility.LANG,l.getLanguage().orElse(null));    } else {      jg.writeObjectField(RDFJSONUtility.DATATYPE,l.getDatatype().stringValue());    }  } else   if (object instanceof BNode) {    jg.writeObjectField(RDFJSONUtility.VALUE,resourceToString((BNode)object));    jg.writeObjectField(RDFJSONUtility.TYPE,RDFJSONUtility.BNODE);  } else   if (object instanceof IRI) {    jg.writeObjectField(RDFJSONUtility.VALUE,resourceToString((IRI)object));    jg.writeObjectField(RDFJSONUtility.TYPE,RDFJSONUtility.URI);  }  if (contexts != null && !contexts.isEmpty() && !(contexts.size() == 1 && contexts.iterator().next() == null)) {    jg.writeArrayFieldStart(RDFJSONUtility.GRAPHS);    for (    final Resource nextContext : contexts) {      if (nextContext == null) {        jg.writeNull();      } else {        jg.writeString(resourceToString(nextContext));      }    }    jg.writeEndArray();  }  jg.writeEndObject();}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL:    return createRegularExpressionLiteral();case RegularExpressionPackage.REGULAR_EXPRESSION_BODY:  return createRegularExpressionBody();case RegularExpressionPackage.PATTERN:return createPattern();case RegularExpressionPackage.ASSERTION:return createAssertion();case RegularExpressionPackage.LINE_START:return createLineStart();case RegularExpressionPackage.LINE_END:return createLineEnd();case RegularExpressionPackage.WORD_BOUNDARY:return createWordBoundary();case RegularExpressionPackage.LOOK_AHEAD:return createLookAhead();case RegularExpressionPackage.PATTERN_CHARACTER:return createPatternCharacter();case RegularExpressionPackage.WILDCARD:return createWildcard();case RegularExpressionPackage.ATOM_ESCAPE:return createAtomEscape();case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE:return createCharacterClassEscapeSequence();case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE:return createCharacterEscapeSequence();case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE:return createControlLetterEscapeSequence();case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE:return createHexEscapeSequence();case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE:return createUnicodeEscapeSequence();case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE:return createIdentityEscapeSequence();case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE:return createDecimalEscapeSequence();case RegularExpressionPackage.CHARACTER_CLASS:return createCharacterClass();case RegularExpressionPackage.CHARACTER_CLASS_ELEMENT:return createCharacterClassElement();case RegularExpressionPackage.CHARACTER_CLASS_ATOM:return createCharacterClassAtom();case RegularExpressionPackage.ESCAPED_CHARACTER_CLASS_ATOM:return createEscapedCharacterClassAtom();case RegularExpressionPackage.BACKSPACE:return createBackspace();case RegularExpressionPackage.GROUP:return createGroup();case RegularExpressionPackage.QUANTIFIER:return createQuantifier();case RegularExpressionPackage.SIMPLE_QUANTIFIER:return createSimpleQuantifier();case RegularExpressionPackage.EXACT_QUANTIFIER:return createExactQuantifier();case RegularExpressionPackage.REGULAR_EXPRESSION_FLAGS:return createRegularExpressionFlags();case RegularExpressionPackage.DISJUNCTION:return createDisjunction();case RegularExpressionPackage.SEQUENCE:return createSequence();case RegularExpressionPackage.CHARACTER_CLASS_RANGE:return createCharacterClassRange();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchilddocfragment.class,args);}  }
class C{  public void testDeleteAddSameAction() throws Exception {  HtmlPage page=getPage("/faces/state/dynamicAdditionDeletion.xhtml");  HtmlSubmitInput submit=(HtmlSubmitInput)getInputContainingGivenId(page,"form:render");  page=submit.click();  assertTrue(page.asText().contains("dynamically added button"));  for (int i=0; i < 5; i++) {    submit=(HtmlSubmitInput)getInputContainingGivenId(page,"form:render");    page=submit.click();    assertTrue(page.asText().contains("dynamically added button"));  }}  }
class C{  public static void putObject_test1() throws Exception {  println("Test: putObject(String bucketName, String objectName, String fileName)");  String fileName=createFile(3 * MB);  client.putObject(bucketName,fileName,fileName);  Files.delete(Paths.get(fileName));  client.removeObject(bucketName,fileName);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  public ComputeTaskCancelledCheckedException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public void start() throws IOException {  TransportMapping transport=new DefaultUdpTransportMapping();  snmp=new Snmp(transport);  if ("3".equals(this.version)) {    USM usm=new USM(SecurityProtocols.getInstance(),new OctetString(MPv3.createLocalEngineID()),0);    SecurityModels.getInstance().addSecurityModel(usm);  }  transport.listen();}  }
class C{  public void stop(int width,int height,RectF clip){  ImageInfo info=new ImageInfo(width,height,clip);synchronized (renderers) {    WeakReference rendererRef=renderers.get(info);    if (rendererRef != null) {      PDFRenderer renderer=(PDFRenderer)rendererRef.get();      if (renderer != null) {        renderer.stop();      }    }  }}  }
class C{  public String numClustersTipText(){  return "Set number of clusters. -1 means number of clusters is determined by " + "T2 distance";}  }
class C{  public boolean isChannelOpen(String channel){  return c.isChannelOpen(channel);}  }
class C{  public Stoppable scheduleRepeatingImmediatelyBefore(Steppable event){  return _scheduleImmediateRepeat(false,event);}  }
class C{  @Override public Point findPreviousViewCenter(ViewData nextViewData,int previousViewHalfViewHeight){  Point nextViewCenter=nextViewData.getCenterPoint();  Point previousViewCenter;  boolean foundNextViewCenter;  do {    if (SHOW_LOGS)     Log.v(TAG,"findPreviousViewCenter, nextViewCenter " + nextViewCenter);    previousViewCenter=getPreviousViewCenter(nextViewCenter);    if (SHOW_LOGS)     Log.v(TAG,"findPreviousViewCenter, previousViewCenter " + previousViewCenter);    int previousViewBottom=previousViewCenter.getY() + previousViewHalfViewHeight;    if (SHOW_LOGS)     Log.v(TAG,"findPreviousViewCenter, previousViewBottom " + previousViewBottom);    boolean previousViewBottomIsAboveNextViewTop=previousViewBottom < nextViewData.getViewTop();    foundNextViewCenter=previousViewBottomIsAboveNextViewTop;    nextViewCenter=previousViewCenter;  } while (!foundNextViewCenter);  if (SHOW_LOGS)   Log.v(TAG,"<< findPreviousViewCenter, findPreviousViewCenter " + foundNextViewCenter);  return nextViewCenter;}  }
class C{  public static List<Challenge> parseChallenges(Headers responseHeaders,String challengeHeader){  List<Challenge> result=new ArrayList<>();  for (int i=0, size=responseHeaders.size(); i < size; i++) {    if (!challengeHeader.equalsIgnoreCase(responseHeaders.name(i))) {      continue;    }    String value=responseHeaders.value(i);    int pos=0;    while (pos < value.length()) {      int tokenStart=pos;      pos=HeaderParser.skipUntil(value,pos," ");      String scheme=value.substring(tokenStart,pos).trim();      pos=HeaderParser.skipWhitespace(value,pos);      if (!value.regionMatches(true,pos,"realm=\"",0,"realm=\"".length())) {        break;      }      pos+="realm=\"".length();      int realmStart=pos;      pos=HeaderParser.skipUntil(value,pos,"\"");      String realm=value.substring(realmStart,pos);      pos++;      pos=HeaderParser.skipUntil(value,pos,",");      pos++;      pos=HeaderParser.skipWhitespace(value,pos);      result.add(new Challenge(scheme,realm));    }  }  return result;}  }
class C{  public void flush(){synchronized (mCache) {    mCache.clear();  }}  }
class C{  public void removeBreakpointListener(final BreakpointListener listener){  breakpointListeners.remove(listener);}  }
class C{  public void sendAction(String actionmessage) throws IOException {  PacketACTION p=new PacketACTION(actionmessage);  p.send(hostAddress,hostPort);}  }
class C{  protected void showAlertDialog(@Nullable String title,@Nullable String message,@Nullable DialogInterface.OnClickListener onPositiveButtonClickListener,@NonNull String positiveText,@Nullable DialogInterface.OnClickListener onNegativeButtonClickListener,@NonNull String negativeText){  AlertDialog.Builder builder=new AlertDialog.Builder(this);  builder.setTitle(title);  builder.setMessage(message);  builder.setPositiveButton(positiveText,onPositiveButtonClickListener);  builder.setNegativeButton(negativeText,onNegativeButtonClickListener);  mAlertDialog=builder.show();}  }
class C{  void addAttachments(final MimeMessageHelper helper,final Map<String,byte[]> attachments) throws MessagingException, IOException {  if (MapUtils.isNotEmpty(attachments)) {    for (    final Map.Entry<String,byte[]> attach : attachments.entrySet()) {      final Pair<String,String> contentTypeAndFile=convertAttachmentKeyIntoContentTypeAndFilename(attach.getKey());      if (contentTypeAndFile != null) {        helper.addAttachment(contentTypeAndFile.getSecond(),new ByteArrayResource(attach.getValue()),contentTypeAndFile.getFirst());      }    }  }}  }
class C{  protected static DbException wrapException(String operation,String shardName,String sql,Exception ex){  SQLException e=DbException.toSQLException(ex);  return DbException.get(ErrorCode.ERROR_ACCESSING_DATABASE_TABLE_2,e,operation,shardName,sql,e.toString());}  }
class C{  private void readButtonActionPerformed(){  if (numUr92 == 0) {    scanButtonActionPerformed();    return;  }  swingNameValueField.setForeground(COLOR_OK);  swingChannelValueField.setForeground(COLOR_OK);  swingPasswordValueField.setForeground(COLOR_OK);  swingIdValueField.setForeground(COLOR_OK);  swingNameValueField.setText(rb.getString("ValueUnknownGroupName"));  swingChannelValueField.setText(rb.getString("ValueUnknownGroupChannel"));  swingPasswordValueField.setText(rb.getString("ValueUnknownGroupPassword"));  swingIdValueField.setText(rb.getString("ValueUnknownGroupID"));  updateStatusLineMessage("ProcessingReadingInfo",COLOR_STATUS_OK);  duplexGroupImplementation.queryDuplexGroupIdentity();  updateStatusLineMessage("ProcessingWaitingForReport",COLOR_STATUS_OK);}  }
class C{  public static double max(double... M){  double max=M[0];  for (int i=1; i < M.length; i++)   max=Math.max(max,M[i]);  return max;}  }
class C{  public static void openInformation(final Shell parent,final String title,final String message,final String toggleMessage,final boolean defaultToggleState,final String preferenceKey){  final IPreferenceStore prefStore=TFSCommonUIClientPlugin.getDefault().getPreferenceStore();  final boolean toggleState=MessageDialogWithToggle.ALWAYS.equals(prefStore.getString(preferenceKey));  if (!toggleState) {    MessageDialogWithToggle.openInformation(parent,title,message,toggleMessage,defaultToggleState,prefStore,preferenceKey);    TFSCommonUIClientPlugin.getDefault().savePluginPreferences();  }}  }
class C{  public synchronized List<Vertex> findAllLike(String filter){  return findAllLike(filter,1000,0);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String referenceHistoFile=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  referenceHistoFile=args[1];  outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null) || (referenceHistoFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    int i=0;    WhiteboxRasterInfo inputFile=new WhiteboxRasterInfo(inputHeader);    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    String line;    String[] str;    String[] delimiters={"\t"," ",",",":",";"};    int delimiterNum=0;    File file=new File(referenceHistoFile);    RandomAccessFile raf=null;    raf=new RandomAccessFile(file,"r");    int numLines=0;    while ((line=raf.readLine()) != null) {      if (!line.trim().equals("")) {        numLines++;      }    }    double[][] referenceCDF=new double[numLines][2];    raf.seek(0);    i=0;    while ((line=raf.readLine()) != null) {      str=line.split(delimiters[delimiterNum]);      while (str.length < 2) {        delimiterNum++;        if (delimiterNum == delimiters.length) {          showFeedback("the histogram file does not appear to be properly formated.\n" + "It must be delimited using a tab, space, comma, colon, or semicolon.");          return;        }        str=line.split(delimiters[delimiterNum]);      }      referenceCDF[i][0]=Double.parseDouble(str[0]);      referenceCDF[i][1]=Double.parseDouble(str[1]);      i++;    }    raf.close();    for (i=1; i < numLines; i++) {      referenceCDF[i][1]+=referenceCDF[i - 1][1];    }    double totalFrequency=referenceCDF[numLines - 1][1];    for (i=0; i < numLines; i++) {      referenceCDF[i][1]=referenceCDF[i][1] / totalFrequency;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numLines; i++) {      pVal=referenceCDF[i][1];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numLines; i++) {            if (referenceCDF[i][1] > pVal) {              if (i > 0) {                x1=referenceCDF[i - 1][0];                x2=referenceCDF[i][0];                p1=referenceCDF[i - 1][1];                p2=referenceCDF[i][1];                if (p1 != p2) {                  xVal=x1 + ((x2 - x1) * ((pVal - p1) / (p2 - p1)));                } else {                  xVal=x1;                }              } else {                xVal=referenceCDF[i][0];              }              break;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static byte[] keyGenPrivate(byte[] randomBytes){  if (randomBytes.length < 32) {    throw new RuntimeException("Random bytes too small");  }  byte[] privateKey=new byte[32];  SHA256 sha256=new SHA256();  sha256.update(randomBytes,0,randomBytes.length);  sha256.doFinal(privateKey,0);  privateKey[0]&=248;  privateKey[31]&=127;  privateKey[31]|=64;  return privateKey;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + String.valueOf(progress) + "%");  }  previousProgress=progress;}  }
class C{  public UnknownServiceException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public RFF_RBF(double sigma,int dim,boolean inMemory){  setSigma(sigma);  setDimensions(dim);  setInMemory(inMemory);}  }
class C{  public Camera(){  super();  mLocalOrientation=Quaternion.getIdentity();  mIsCamera=true;  mFrustum=new Frustum();  mFrustumCorners=new Vector3[8];  for (int i=0; i < 8; i++) {    mFrustumCorners[i]=new Vector3();  }}  }
class C{  private void saveWalletAndWalletInfo(WalletData perWalletModelData,String walletFilename,String walletInfoFilename){  File walletFile=new File(walletFilename);  WalletInfoData walletInfo=perWalletModelData.getWalletInfo();  FileOutputStream fileOutputStream=null;  try {    if (perWalletModelData.getWallet() != null) {      if (walletInfo != null) {        String walletDescriptionInInfoFile=walletInfo.getProperty(WalletInfoData.DESCRIPTION_PROPERTY);        if (walletDescriptionInInfoFile != null) {          perWalletModelData.getWallet().setDescription(walletDescriptionInInfoFile);        }      }      String oldBackupFilename=perWalletModelData.getWalletInfo().getProperty(BitcoinModel.WALLET_BACKUP_FILE);      File oldBackupFile=null;      String newBackupFilename=null;      if (null != oldBackupFilename && !"".equals(oldBackupFilename)) {        oldBackupFile=new File(oldBackupFilename);      }      if (walletInfo != null && (MultiBitWalletVersion.PROTOBUF == walletInfo.getWalletVersion() || MultiBitWalletVersion.PROTOBUF_ENCRYPTED == walletInfo.getWalletVersion())) {        newBackupFilename=copyExistingWalletToBackupAndDeleteOriginal(walletFile);      }      log.debug("Saving wallet file '" + walletFile.getAbsolutePath() + "' ...");      if (walletInfo != null && MultiBitWalletVersion.SERIALIZED == walletInfo.getWalletVersion()) {        throw new WalletSaveException("Cannot save wallet '" + walletFile.getAbsolutePath() + "'. Serialized wallets are no longer supported.");      } else {        boolean walletIsActuallyEncrypted=false;        Wallet wallet=perWalletModelData.getWallet();        for (        ECKey key : wallet.getKeychain()) {          if (key.isEncrypted()) {            walletIsActuallyEncrypted=true;            break;          }        }        if (walletIsActuallyEncrypted) {          walletInfo.setWalletVersion(MultiBitWalletVersion.PROTOBUF_ENCRYPTED);        }        if (MultiBitWalletVersion.PROTOBUF == walletInfo.getWalletVersion()) {          perWalletModelData.getWallet().saveToFile(walletFile);        } else         if (MultiBitWalletVersion.PROTOBUF_ENCRYPTED == walletInfo.getWalletVersion()) {          fileOutputStream=new FileOutputStream(walletFile);          walletProtobufSerializer.writeWallet(perWalletModelData.getWallet(),fileOutputStream);        } else {          throw new WalletVersionException("Cannot save wallet '" + perWalletModelData.getWalletFilename() + "'. Its wallet version is '"+ walletInfo.getWalletVersion().toString()+ "' but this version of MultiBit does not understand that format.");        }      }      log.debug("... done saving wallet file. Wallet file size is " + walletFile.length() + " bytes.");      if (MultiBitWalletVersion.PROTOBUF == walletInfo.getWalletVersion() || MultiBitWalletVersion.PROTOBUF_ENCRYPTED == walletInfo.getWalletVersion()) {        perWalletModelData.getWalletInfo().put(BitcoinModel.WALLET_BACKUP_FILE,newBackupFilename);        boolean userHasOpenedBackupFile=false;        List<WalletData> perWalletModelDataList=this.bitcoinController.getModel().getPerWalletModelDataList();        if (perWalletModelDataList != null) {          for (          WalletData perWalletModelDataLoop : perWalletModelDataList) {            if ((oldBackupFilename != null && oldBackupFilename.equals(perWalletModelDataLoop.getWalletFilename())) || (newBackupFilename != null && newBackupFilename.equals(perWalletModelDataLoop.getWalletFilename()))) {              userHasOpenedBackupFile=true;              break;            }          }        }        if (!userHasOpenedBackupFile) {          secureDelete(oldBackupFile);        }      }    }  } catch (  IOException ioe) {    throw new WalletSaveException("Cannot save wallet '" + perWalletModelData.getWalletFilename(),ioe);  } finally {    if (fileOutputStream != null) {      try {        fileOutputStream.flush();        fileOutputStream.close();      } catch (      IOException e) {        throw new WalletSaveException("Cannot save wallet '" + perWalletModelData.getWalletFilename(),e);      }    }  }  walletInfo.writeToFile(walletInfoFilename,walletInfo.getWalletVersion());}  }
class C{  private void computeSquaringMatrix(){  GF2Polynomial[] d=new GF2Polynomial[mDegree - 1];  int i, j;  squaringMatrix=new GF2Polynomial[mDegree];  for (i=0; i < squaringMatrix.length; i++) {    squaringMatrix[i]=new GF2Polynomial(mDegree,"ZERO");  }  for (i=0; i < mDegree - 1; i++) {    d[i]=new GF2Polynomial(1,"ONE").shiftLeft(mDegree + i).remainder(fieldPolynomial);  }  for (i=1; i <= Math.abs(mDegree >> 1); i++) {    for (j=1; j <= mDegree; j++) {      if (d[mDegree - (i << 1)].testBit(mDegree - j)) {        squaringMatrix[j - 1].setBit(mDegree - i);      }    }  }  for (i=Math.abs(mDegree >> 1) + 1; i <= mDegree; i++) {    squaringMatrix[(i << 1) - mDegree - 1].setBit(mDegree - i);  }}  }
class C{  public static boolean isNetworkUri(Uri uri){  final String scheme=getSchemeOrNull(uri);  return FrescoUri.HTTPS_SCHEME.equals(scheme) || FrescoUri.HTTP_SCHEME.equals(scheme);}  }
class C{  public QueryStringQueryBuilder quoteAnalyzer(String analyzer){  this.quoteAnalyzer=analyzer;  return this;}  }
class C{  public String intern(@NotNull final Bytes bytes,int length){  try {    int hash32=BytesStoreHash.hash32(bytes,length);    int h=hash32 & mask;    String s=interner[h];    long position=bytes.readPosition();    if (BytesUtil.bytesEqual(s,bytes,position,length))     return s;    int h2=(hash32 >> shift) & mask;    String s2=interner[h2];    if (BytesUtil.bytesEqual(s2,bytes,position,length))     return s2;    char[] chars=toCharArray(bytes,position,length);    return interner[s == null || (s2 != null && toggle()) ? h : h2]=StringUtils.newString(chars);  }  finally {    bytes.readSkip(length);  }}  }
class C{  public MMTSJType checkTransposeSelf(){  MMTSJType ret=MMTSJType.NONE;  Hop in1=getInput().get(0);  Hop in2=getInput().get(1);  if (in1 instanceof ReorgOp && ((ReorgOp)in1).getOp() == ReOrgOp.TRANSPOSE && in1.getInput().get(0) == in2) {    ret=MMTSJType.LEFT;  }  if (in2 instanceof ReorgOp && ((ReorgOp)in2).getOp() == ReOrgOp.TRANSPOSE && in2.getInput().get(0) == in1) {    ret=MMTSJType.RIGHT;  }  return ret;}  }
class C{  EbmlElement(){  id=NO_VALUE;  payload=null;  childElements=null;}  }
class C{  private static void addHotkey(final JButton button,final KeyStroke keyStroke,final AbstractAction action,final String name){  final InputMap windowImap=button.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);  windowImap.put(keyStroke,name);  button.getActionMap().put(name,action);}  }
class C{  protected FHTreeStateNode createChildFor(Object userObject){  int newChildIndex=treeModel.getIndexOfChild(getUserObject(),userObject);  if (newChildIndex < 0)   return null;  FHTreeStateNode aNode;  FHTreeStateNode child=createNodeForValue(userObject,newChildIndex);  int childRow;  if (isVisible()) {    childRow=getRowToModelIndex(newChildIndex);  } else {    childRow=-1;  }  child.row=childRow;  for (int counter=0, maxCounter=getChildCount(); counter < maxCounter; counter++) {    aNode=(FHTreeStateNode)getChildAt(counter);    if (aNode.childIndex > newChildIndex) {      insert(child,counter);      return child;    }  }  add(child);  return child;}  }
class C{  public void restoreState(){  for (  Map.Entry<Field,Object> entry : valueMap.entrySet()) {    try {      entry.getKey().set(null,entry.getValue());    } catch (    IllegalAccessException e) {      throw new BugInRandoopException("unable to save value of field " + entry.getKey());    }  }}  }
class C{  public static boolean doesBlockHaveSpark(World world,BlockPos pos){  return getSparkForBlock(world,pos) != null;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case KEYS:return isSetKeys();}throw new IllegalStateException();}  }
class C{  public synchronized AttributeSet removeAttributes(AttributeSet old,AttributeSet attrs){  if (old.getAttributeCount() <= getCompressionThreshold()) {    search.removeAttributes(search);    search.addAttributes(old);    search.removeAttributes(attrs);    reclaim(old);    return getImmutableUniqueSet();  }  MutableAttributeSet ma=getMutableAttributeSet(old);  ma.removeAttributes(attrs);  return ma;}  }
class C{  private void runScenario(int libraryIndex,int sourceIndex,boolean useDrawee) throws Exception {  disableAnimatedImages();  setUseDrawee(useDrawee);  selectFramework(libraryIndex);  selectSource(sourceIndex);  TouchUtils.tapView(this,mImageList);  waitForImages();  scrollMultipleTimes(SCROLLS);  Thread.sleep(WAIT_BEFORE_TEST_END_MS);}  }
class C{  public void init(InputStream is,OutputStream os,boolean isClient){  this.is=is;  this.os=os;  this.isClient=isClient;}  }
class C{  @CanIgnoreReturnValue @Override public Builder<K,V> put(K key,V value){  builderMultimap.put(checkNotNull(key),checkNotNull(value));  return this;}  }
class C{  @Override protected void ensureNumberOfColumns(int numberOfColumns){  if (data.length >= numberOfColumns) {    return;  }  long[] newData=new long[numberOfColumns];  System.arraycopy(data,0,newData,0,data.length);  data=newData;}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    this.encrypting=encrypting;    this.workingKey=((KeyParameter)params).getKey();    setKey(this.workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to Blowfish init - " + params.getClass().getName());}  }
class C{  @Override public int read() throws IOException {  if (buf == null) {    throw new IOException();  }  if (pos < buf.length) {    return (buf[pos++] & 0xFF);  }  return in.read();}  }
class C{  public List<ExportsRuleInfo> listNFSExportRules(String pathName){  FlexFileShare share=new FlexFileShare(server.getNaServer(),null);  return share.listNFSExportRules(pathName);}  }
class C{  public boolean containsValue(Object value){  if (value == null)   return containsNullValue();  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   for (Entry e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  public long insert(IChunkedOrderedIterator<BigdataValue> itr){  throw new UnsupportedOperationException();}  }
class C{  public Address allocateArray(RVMArray array,int numElements,boolean needsIdentityHash,int identityHashValue,int alignCode){  numObjects++;  BootImageWriter.logAllocation(array,array.getInstanceSize(numElements));  return ObjectModel.allocateArray(this,array,numElements,needsIdentityHash,identityHashValue,alignCode);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void playSampleTune(){  if (!sampleTuneThread.isAlive()) {    sampleTuneThread=new SampleTuneThread();    sampleTuneThread.start();  }}  }
class C{  public boolean isCountryCode(){  Object oo=get_Value(COLUMNNAME_CountryCode);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static org.oscm.internal.vo.VOParameterOption convertToUp(org.oscm.vo.VOParameterOption oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOParameterOption newVO=new org.oscm.internal.vo.VOParameterOption();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setOptionId(oldVO.getOptionId());  newVO.setOptionDescription(oldVO.getOptionDescription());  newVO.setParamDefId(oldVO.getParamDefId());  return newVO;}  }
class C{  public void onDestroy(){  closeDialog();}  }
class C{  protected void addMissingResources(){  WebLogicResourceRules.addMissingJmsResources(this);}  }
class C{  public Long addRoomWithModerationAndRecordingFlags(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,String externalRoomType,Boolean allowUserQuestions,Boolean isAudioOnly,Boolean waitForRecording,Boolean allowRecording){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      return roommanagement.addExternalRoom(name,roomtypes_id,comment,numberOfPartizipants,ispublic,null,appointment,isDemoRoom,demoTime,isModeratedRoom,null,null,externalRoomType,allowUserQuestions,isAudioOnly,false,"",waitForRecording,allowRecording,false);    } else {      return -26L;    }  } catch (  Exception err) {    log.error("[addRoomWithModeration] ",err);  }  return new Long(-1);}  }
class C{  @Deprecated public URI fetchConsistencyGroup(){  if (getConsistencyGroups() != null && !getConsistencyGroups().isEmpty()) {    return URI.create(getConsistencyGroups().iterator().next());  }  return null;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static void close(){  Log.getLog().info("closing DAO");  message_dump.close();  account_dump.close();  import_profile_dump.close();  user_dump.close();  followers_dump.close();  following_dump.close();  access.close();  messages.close();  messages_hour.close();  messages_day.close();  messages_week.close();  users.close();  accounts.close();  queries.close();  importProfiles.close();  elasticsearch_client.close();  Log.getLog().info("closed DAO");}  }
class C{  public static EWMA fifteenMinuteEWMA(){  return new EWMA(M15_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    View v=mView.get();    if (v != null) {      v.invalidate();    }  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      setValue(values.mNameConstant,value);    }  }  View v=mView.get();  if (v != null) {    v.invalidate();  }}  }
class C{  protected AbstractMethodDeclaration_Impl(){  super();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static int countNumColumnsCSV(InputSplit[] splits,InputFormat informat,JobConf job,String delim) throws IOException {  LongWritable key=new LongWritable();  Text value=new Text();  int ncol=-1;  for (int i=0; i < splits.length && ncol <= 0; i++) {    RecordReader<LongWritable,Text> reader=informat.getRecordReader(splits[i],job,Reporter.NULL);    try {      if (reader.next(key,value)) {        String row=value.toString().trim();        if (row.startsWith(TfUtils.TXMTD_MVPREFIX))         reader.next(key,value);        if (row.startsWith(TfUtils.TXMTD_NDPREFIX))         reader.next(key,value);        if (!row.isEmpty())         ncol=IOUtilFunctions.countTokensCSV(row,delim);      }    }  finally {      closeSilently(reader);    }  }  return ncol;}  }
class C{  protected BeforeCode_Impl(){  super();}  }
class C{  @NotNull public static GitVersion parse(String output) throws ParseException {  if (StringUtil.isEmptyOrSpaces(output)) {    throw new ParseException("Empty git --version output: " + output,0);  }  Matcher m=FORMAT.matcher(output.trim());  if (!m.matches()) {    throw new ParseException("Unsupported format of git --version output: " + output,0);  }  int major=getIntGroup(m,1);  int minor=getIntGroup(m,2);  int rev=getIntGroup(m,3);  int patch=getIntGroup(m,4);  boolean msys=(m.groupCount() >= 5) && m.group(5) != null && m.group(5).toLowerCase().contains("msysgit");  Type type;  if (SystemInfo.isWindows) {    type=msys ? Type.MSYS : Type.CYGWIN;  } else {    type=Type.UNIX;  }  return new GitVersion(major,minor,rev,patch,type);}  }
class C{  protected int mapDragOperationFromModifiers(MouseEvent e){  int mods=e.getModifiersEx();  int btns=mods & ButtonMask;  if (!(btns == InputEvent.BUTTON1_DOWN_MASK || btns == InputEvent.BUTTON2_DOWN_MASK || btns == InputEvent.BUTTON3_DOWN_MASK)) {    return DnDConstants.ACTION_NONE;  }  return SunDragSourceContextPeer.convertModifiersToDropAction(mods,getSourceActions());}  }
class C{  private void parseNamespace(boolean start){  final int prefixIdx=getLEWord(mParserOffset + (4 * WORD_SIZE));  final int uriIdx=getLEWord(mParserOffset + (5 * WORD_SIZE));  final String uri=getString(uriIdx);  final String prefix=getString(prefixIdx);  if (start) {    mListener.startPrefixMapping(prefix,uri);    mNamespaces.put(uri,prefix);  } else {    mListener.endPrefixMapping(prefix,uri);    mNamespaces.remove(uri);  }  mParserOffset+=(6 * WORD_SIZE);}  }
class C{  public boolean isAddressedModePossible(){  return false;}  }
class C{  public void sFeature1Init(int y,int yp,Map fmap){  sFeature1Init(y,cp);  strId2IdxAdd(fmap);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public void endVisit(FieldAccess node){}  }
class C{  public void testBasics() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  document.add(new IntRangeField(FIELD_NAME,new int[]{-10,-10},new int[]{9,10}));  writer.addDocument(document);  document=new Document();  document.add(new IntRangeField(FIELD_NAME,new int[]{10,-10},new int[]{20,10}));  writer.addDocument(document);  document=new Document();  document.add(new IntRangeField(FIELD_NAME,new int[]{-20,-20},new int[]{30,30}));  writer.addDocument(document);  document=new Document();  document.add(new IntRangeField(FIELD_NAME,new int[]{-11,-11},new int[]{1,11}));  writer.addDocument(document);  document=new Document();  document.add(new IntRangeField(FIELD_NAME,new int[]{12,1},new int[]{15,29}));  writer.addDocument(document);  document=new Document();  document.add(new IntRangeField(FIELD_NAME,new int[]{-122,1},new int[]{-115,29}));  writer.addDocument(document);  document=new Document();  document.add(new IntRangeField(FIELD_NAME,new int[]{Integer.MIN_VALUE,1},new int[]{-11,29}));  writer.addDocument(document);  document=new Document();  document.add(new IntRangeField(FIELD_NAME,new int[]{-11,-15},new int[]{15,20}));  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(7,searcher.count(IntRangeField.newIntersectsQuery(FIELD_NAME,new int[]{-11,-15},new int[]{15,20})));  assertEquals(3,searcher.count(IntRangeField.newWithinQuery(FIELD_NAME,new int[]{-11,-15},new int[]{15,20})));  assertEquals(2,searcher.count(IntRangeField.newContainsQuery(FIELD_NAME,new int[]{-11,-15},new int[]{15,20})));  reader.close();  writer.close();  dir.close();}  }
class C{  public SnmpOid toOid(){  long[] ids=new long[value.length];  for (int i=0; i < value.length; i++) {    ids[i]=(long)(value[i] & 0xFF);  }  return new SnmpOid(ids);}  }
class C{  protected void addAnnotationsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_AnnotatableElement_annotations_feature"),getString("_UI_PropertyDescriptor_description","_UI_AnnotatableElement_annotations_feature","_UI_AnnotatableElement_type"),TypesPackage.Literals.ANNOTATABLE_ELEMENT__ANNOTATIONS,true,false,true,null,null,null));}  }
class C{  public boolean hasShell(){  return shell != null;}  }
class C{  public static void failNotSame(String message,Object expected,Object actual){  fail(format(message,expected,actual,true));}  }
class C{  protected void preparePoint(OMPoint point){  rrAttributes.setTo(point);}  }
class C{  public static void sendIndividualToMaster(Chromosome individual) throws IllegalArgumentException {  if (individual == null) {    throw new IllegalArgumentException("No defined individual to send");  }  if (!Properties.NEW_STATISTICS)   return;  ClientServices.getInstance().getClientNode().updateStatistics(individual);}  }
class C{  public KeyDefinition_ createKeyDefinition_(){  KeyDefinition_Impl keyDefinition_=new KeyDefinition_Impl();  return keyDefinition_;}  }
class C{  public void writeLong(long value,int bitsPerValue) throws IOException {  assert bitsPerValue == 64 || (value >= 0 && value <= PackedInts.maxValue(bitsPerValue));  while (bitsPerValue > 0) {    if (remainingBits == 0) {      out.writeByte((byte)current);      current=0L;      remainingBits=8;    }    final int bits=Math.min(remainingBits,bitsPerValue);    current=current | (((value >>> (bitsPerValue - bits)) & ((1L << bits) - 1)) << (remainingBits - bits));    bitsPerValue-=bits;    remainingBits-=bits;  }}  }
class C{  public static synchronized long deleteManyMsg(Context c,ArrayList<String> idList){  StringBuilder buider=new StringBuilder();  for (int i=0; i < idList.size(); i++) {    buider.append("'");    buider.append(idList.get(i));    buider.append("'");    buider.append(",");  }  String list=buider.toString().substring(0,buider.length() - 1);  DBProvider provider=DBProvider.getDBProvider(c);  int deleteCount=provider.delete(DBHelp.TABLE_STATISTICS,DBHelp.COLUMN_ID + " in ( " + list+ " )",null);  return deleteCount;}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){}  }
class C{  public String encode(byte aBuffer[]){  ByteArrayOutputStream outStream=new ByteArrayOutputStream();  ByteArrayInputStream inStream=new ByteArrayInputStream(aBuffer);  String retVal=null;  try {    encode(inStream,outStream);    retVal=outStream.toString("8859_1");  } catch (  Exception IOException) {    throw new Error("CharacterEncoder.encode internal error");  }  return (retVal);}  }
class C{  public static FloatBuffer createFloatBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 4);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asFloatBuffer();}  }
class C{  public void storeHoney(double honey){  setHoneyAmount(getHoneyAmount() + honey);}  }
class C{  public Instances generate(String namePrefix) throws Exception {  if (getMultiInstance()) {    TestInstances bag=(TestInstances)this.clone();    bag.setMultiInstance(false);    bag.setNumInstances(0);    bag.setSeed(m_Random.nextInt());    Instances bagFormat=bag.generate("bagAtt_");    bagFormat.setClassIndex(-1);    bagFormat.deleteAttributeAt(bagFormat.numAttributes() - 1);    TestInstances structure=new TestInstances();    structure.setSeed(m_Random.nextInt());    structure.setNumNominal(1);    structure.setNumRelational(1);    structure.setRelationalFormat(0,bagFormat);    structure.setClassType(getClassType());    structure.setNumClasses(getNumClasses());    structure.setRelationalClassFormat(getRelationalClassFormat());    structure.setNumInstances(getNumInstances());    m_Data=structure.generate();    bag.setNumInstances(getNumInstancesRelational());    for (int i=0; i < getNumInstances(); i++) {      bag.setSeed(m_Random.nextInt());      Instances bagData=new Instances(bag.generate("bagAtt_"));      bagData.setClassIndex(-1);      bagData.deleteAttributeAt(bagData.numAttributes() - 1);      double val=m_Data.attribute(1).addRelation(bagData);      m_Data.instance(i).setValue(1,val);    }  } else {    int clsIndex=m_ClassIndex;    if (clsIndex == CLASS_IS_LAST) {      clsIndex=getNumAttributes() - 1;    }    ArrayList<Attribute> attributes=new ArrayList<Attribute>(getNumAttributes());    for (int i=0; i < getNumNominal(); i++) {      attributes.add(generateAttribute(i,Attribute.NOMINAL,namePrefix));    }    for (int i=0; i < getNumNumeric(); i++) {      attributes.add(generateAttribute(i,Attribute.NUMERIC,namePrefix));    }    for (int i=0; i < getNumString(); i++) {      attributes.add(generateAttribute(i,Attribute.STRING,namePrefix));    }    for (int i=0; i < getNumDate(); i++) {      attributes.add(generateAttribute(i,Attribute.DATE,namePrefix));    }    for (int i=0; i < getNumRelational(); i++) {      attributes.add(generateAttribute(i,Attribute.RELATIONAL,namePrefix));    }    if (clsIndex != NO_CLASS) {      attributes.add(clsIndex,generateAttribute(CLASS_IS_LAST,getClassType(),namePrefix));    }    m_Data=new Instances(getRelation(),attributes,getNumInstances());    m_Data.setClassIndex(clsIndex);    for (int i=0; i < getNumInstances(); i++) {      Instance current=new DenseInstance(getNumAttributes());      current.setDataset(m_Data);      double classVal;      if (clsIndex != NO_CLASS) {        classVal=generateClassValue(m_Data);        current.setClassValue(classVal);      } else {        classVal=m_Random.nextFloat();      }      for (int n=0; n < getNumAttributes(); n++) {        if (clsIndex == n) {          continue;        }        current.setValue(n,generateAttributeValue(m_Data,n,classVal));      }      m_Data.add(current);    }  }  if (m_Data.classIndex() == NO_CLASS) {    m_Data.setClassIndex(-1);  }  return getData();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void compileScript(String url,String text){  DimIProxy action=new DimIProxy(this,IPROXY_COMPILE_SCRIPT);  action.url=url;  action.text=text;  action.withContext();}  }
class C{  private void removeUnreachableCode(IR ir){  boolean removedCode=false;  BasicBlock entry=ir.cfg.entry();  ir.cfg.clearDFS();  entry.sortDFS();  for (BasicBlock node=entry; node != null; ) {    BasicBlock nextNode=(BasicBlock)node.getNext();    if (!node.dfsVisited()) {      for (Enumeration<BasicBlock> e=node.getOut(); e.hasMoreElements(); ) {        BasicBlock target=e.nextElement();        if (target != node && !target.isExit() && target.dfsVisited()) {          SSA.purgeBlockFromPHIs(node,target);        }      }      ir.cfg.removeFromCFGAndCodeOrder(node);      removedCode=true;    }    node=nextNode;  }  if (removedCode) {    ir.cfg.compactNodeNumbering();    ir.HIRInfo.dominatorTree=null;    ir.HIRInfo.dominatorsAreComputed=false;  }}  }
class C{  public static Border createInsetBorder(int thickness){  return createCSSBorder(TYPE_INSET,thickness);}  }
class C{  public Matrix arrayTimes(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] * B.A[i][j];    }  }  return X;}  }
class C{  public final void addMethod2(MethodInfo minfo){  methods.add(minfo);}  }
class C{  public static String makeDescriptor(String params,Class retType){  StringBuffer sbuf=new StringBuffer(params);  makeDesc(sbuf,retType);  return sbuf.toString();}  }
class C{  public AnimatedFlowContainer(Duration duration,ContainerAnimations animation){  this(duration,animation.getAnimationProducer());}  }
class C{  public JMenuBar createMenus(){  JMenuItem mi;  JMenuBar menuBar=new JMenuBar();  menuBar.getAccessibleContext().setAccessibleName(getString("MenuBar.accessible_description"));  JMenu fileMenu=(JMenu)menuBar.add(new JMenu(getString("FileMenu.file_label")));  fileMenu.setMnemonic(getMnemonic("FileMenu.file_mnemonic"));  fileMenu.getAccessibleContext().setAccessibleDescription(getString("FileMenu.accessible_description"));  createMenuItem(fileMenu,"FileMenu.about_label","FileMenu.about_mnemonic","FileMenu.about_accessible_description",new AboutAction(this));  fileMenu.addSeparator();  createMenuItem(fileMenu,"FileMenu.open_label","FileMenu.open_mnemonic","FileMenu.open_accessible_description",null);  createMenuItem(fileMenu,"FileMenu.save_label","FileMenu.save_mnemonic","FileMenu.save_accessible_description",null);  createMenuItem(fileMenu,"FileMenu.save_as_label","FileMenu.save_as_mnemonic","FileMenu.save_as_accessible_description",null);  if (!isApplet()) {    fileMenu.addSeparator();    createMenuItem(fileMenu,"FileMenu.exit_label","FileMenu.exit_mnemonic","FileMenu.exit_accessible_description",new ExitAction(this));  }  if (numSSs == 0) {    lafMenu=(JMenu)menuBar.add(new JMenu(getString("LafMenu.laf_label")));    lafMenu.setMnemonic(getMnemonic("LafMenu.laf_mnemonic"));    lafMenu.getAccessibleContext().setAccessibleDescription(getString("LafMenu.laf_accessible_description"));    mi=createLafMenuItem(lafMenu,"LafMenu.java_label","LafMenu.java_mnemonic","LafMenu.java_accessible_description",metal);    mi.setSelected(true);    createLafMenuItem(lafMenu,"LafMenu.windows_label","LafMenu.windows_mnemonic","LafMenu.windows_accessible_description",windows);    createLafMenuItem(lafMenu,"LafMenu.gtk_label","LafMenu.gtk_mnemonic","LafMenu.gtk_accessible_description",gtk);    themesMenu=(JMenu)menuBar.add(new JMenu(getString("ThemesMenu.themes_label")));    themesMenu.setMnemonic(getMnemonic("ThemesMenu.themes_mnemonic"));    themesMenu.getAccessibleContext().setAccessibleDescription(getString("ThemesMenu.themes_accessible_description"));    audioMenu=(JMenu)themesMenu.add(new JMenu(getString("AudioMenu.audio_label")));    audioMenu.setMnemonic(getMnemonic("AudioMenu.audio_mnemonic"));    audioMenu.getAccessibleContext().setAccessibleDescription(getString("AudioMenu.audio_accessible_description"));    createAudioMenuItem(audioMenu,"AudioMenu.on_label","AudioMenu.on_mnemonic","AudioMenu.on_accessible_description",new OnAudioAction(this));    mi=createAudioMenuItem(audioMenu,"AudioMenu.default_label","AudioMenu.default_mnemonic","AudioMenu.default_accessible_description",new DefaultAudioAction(this));    mi.setSelected(true);    createAudioMenuItem(audioMenu,"AudioMenu.off_label","AudioMenu.off_mnemonic","AudioMenu.off_accessible_description",new OffAudioAction(this));    JMenu fontMenu=(JMenu)themesMenu.add(new JMenu(getString("FontMenu.fonts_label")));    fontMenu.setMnemonic(getMnemonic("FontMenu.fonts_mnemonic"));    fontMenu.getAccessibleContext().setAccessibleDescription(getString("FontMenu.fonts_accessible_description"));    ButtonGroup fontButtonGroup=new ButtonGroup();    mi=createButtonGroupMenuItem(fontMenu,"FontMenu.plain_label","FontMenu.plain_mnemonic","FontMenu.plain_accessible_description",new ChangeFontAction(this,true),fontButtonGroup);    mi.setSelected(true);    mi=createButtonGroupMenuItem(fontMenu,"FontMenu.bold_label","FontMenu.bold_mnemonic","FontMenu.bold_accessible_description",new ChangeFontAction(this,false),fontButtonGroup);    mi=createThemesMenuItem(themesMenu,"ThemesMenu.ocean_label","ThemesMenu.ocean_mnemonic","ThemesMenu.ocean_accessible_description",new OceanTheme());    mi.setSelected(true);    createThemesMenuItem(themesMenu,"ThemesMenu.steel_label","ThemesMenu.steel_mnemonic","ThemesMenu.steel_accessible_description",new DefaultMetalTheme());    createThemesMenuItem(themesMenu,"ThemesMenu.aqua_label","ThemesMenu.aqua_mnemonic","ThemesMenu.aqua_accessible_description",new AquaTheme());    createThemesMenuItem(themesMenu,"ThemesMenu.charcoal_label","ThemesMenu.charcoal_mnemonic","ThemesMenu.charcoal_accessible_description",new CharcoalTheme());    createThemesMenuItem(themesMenu,"ThemesMenu.contrast_label","ThemesMenu.contrast_mnemonic","ThemesMenu.contrast_accessible_description",new ContrastTheme());    createThemesMenuItem(themesMenu,"ThemesMenu.emerald_label","ThemesMenu.emerald_mnemonic","ThemesMenu.emerald_accessible_description",new EmeraldTheme());    createThemesMenuItem(themesMenu,"ThemesMenu.ruby_label","ThemesMenu.ruby_mnemonic","ThemesMenu.ruby_accessible_description",new RubyTheme());    optionsMenu=(JMenu)menuBar.add(new JMenu(getString("OptionsMenu.options_label")));    optionsMenu.setMnemonic(getMnemonic("OptionsMenu.options_mnemonic"));    optionsMenu.getAccessibleContext().setAccessibleDescription(getString("OptionsMenu.options_accessible_description"));    mi=createCheckBoxMenuItem(optionsMenu,"OptionsMenu.tooltip_label","OptionsMenu.tooltip_mnemonic","OptionsMenu.tooltip_accessible_description",new ToolTipAction());    mi.setSelected(true);    createCheckBoxMenuItem(optionsMenu,"OptionsMenu.dragEnabled_label","OptionsMenu.dragEnabled_mnemonic","OptionsMenu.dragEnabled_accessible_description",new DragSupportAction());  }  if (!isApplet()) {    GraphicsDevice[] screens=GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();    if (screens.length > 1) {      JMenu multiScreenMenu=(JMenu)menuBar.add(new JMenu(getString("MultiMenu.multi_label")));      multiScreenMenu.setMnemonic(getMnemonic("MultiMenu.multi_mnemonic"));      multiScreenMenu.getAccessibleContext().setAccessibleDescription(getString("MultiMenu.multi_accessible_description"));      createMultiscreenMenuItem(multiScreenMenu,MultiScreenAction.ALL_SCREENS);      for (int i=0; i < screens.length; i++) {        createMultiscreenMenuItem(multiScreenMenu,i);      }    }  }  return menuBar;}  }
class C{  public boolean isDeclaredFinal(){  return declaredFinal;}  }
class C{  public boolean contains(GroupCategory category){  return fContent.contains(category);}  }
class C{  private void closeConnection(Connection conn){  U.closeQuiet(conn);  if (testMode)   closed.increment();}  }
class C{  private void resetBounds(){  bottomProteinId=null;  topProteinId=null;}  }
class C{  public AnimatableAngleValue(AnimationTarget target){  super(target);}  }
class C{  public static void main(String[] args) throws KeywordOptimizerException {  Options options=createCommandLineOptions();  try {    run(args);  } catch (  KeywordOptimizerException e) {    if (e.getCause() != null && e.getCause() instanceof ParseException) {      printHelp(options);    }    log("An error occurred: " + e.getMessage());    throw e;  }}  }
class C{  public boolean isStreamingSupported(){  return httpStreamHandler != null;}  }
class C{  public static void main(String[] args){  if (args.length == 0) {    System.out.println("Groovy present: " + isPresent());  } else {    Groovy groovy=new Groovy();    if (groovy.getClassLoader() == null) {      System.err.println("Cannot instantiate Groovy ClassLoader!");    } else {      Object groovyObject=Groovy.newInstance(new File(args[0]),Object.class);      Groovy.invoke(groovyObject,"run",new Class[]{},new Object[]{});    }  }}  }
class C{  @RequestMapping(method=RequestMethod.GET) public String prepareDeletionForms(Model model){  model.addAttribute("markPodcastByIdForm",new PodcastByIdForm());  model.addAttribute("markPodcastByUrlForm",new PodcastByFeedUrlForm());  model.addAttribute("deletePodcastByIdForm",new PodcastByIdForm());  model.addAttribute("deletePodcastByFeedUrlForm",new PodcastByFeedUrlForm());  model.addAttribute("deleteUserByEmailForm",new UserByEmailForm());  return "delete_podcasts_def";}  }
class C{  protected Caret createCaret(){  return MotifTextUI.createCaret();}  }
class C{  public void addActionListener(ActionListener l){  listenerList.add(ActionListener.class,l);}  }
class C{  public UniformGraphGenerator(int structure){switch (structure) {case ANY_DAG:case CONNECTED_DAG:    break;default :  throw new IllegalArgumentException("Unrecognized structure.");}this.structure=structure;this.numNodes=4;this.maxInDegree=3;this.maxOutDegree=3;this.maxDegree=6;this.maxEdges=numNodes - 1;this.numIterations=6 * numNodes * numNodes;}  }
class C{  public void addException(long millisecond){  addException(new Segment(millisecond));}  }
class C{  static int findDominantColorByHue(Bitmap bitmap,int samples){  final int height=bitmap.getHeight();  final int width=bitmap.getWidth();  int sampleStride=(int)Math.sqrt((height * width) / samples);  if (sampleStride < 1) {    sampleStride=1;  }  float[] hsv=new float[3];  float[] hueScoreHistogram=new float[360];  float highScore=-1;  int bestHue=-1;  for (int y=0; y < height; y+=sampleStride) {    for (int x=0; x < width; x+=sampleStride) {      int argb=bitmap.getPixel(x,y);      int alpha=0xFF & (argb >> 24);      if (alpha < 0x80) {        continue;      }      int rgb=argb | 0xFF000000;      Color.colorToHSV(rgb,hsv);      int hue=(int)hsv[0];      if (hue < 0 || hue >= hueScoreHistogram.length) {        continue;      }      float score=hsv[1] * hsv[2];      hueScoreHistogram[hue]+=score;      if (hueScoreHistogram[hue] > highScore) {        highScore=hueScoreHistogram[hue];        bestHue=hue;      }    }  }  SparseArray<Float> rgbScores=new SparseArray<Float>();  int bestColor=0xff000000;  highScore=-1;  for (int y=0; y < height; y+=sampleStride) {    for (int x=0; x < width; x+=sampleStride) {      int rgb=bitmap.getPixel(x,y) | 0xff000000;      Color.colorToHSV(rgb,hsv);      int hue=(int)hsv[0];      if (hue == bestHue) {        float s=hsv[1];        float v=hsv[2];        int bucket=(int)(s * 100) + (int)(v * 10000);        float score=s * v;        Float oldTotal=rgbScores.get(bucket);        float newTotal=oldTotal == null ? score : oldTotal + score;        rgbScores.put(bucket,newTotal);        if (newTotal > highScore) {          highScore=newTotal;          bestColor=rgb;        }      }    }  }  return bestColor;}  }
class C{  public int computeTaskJobResult(long taskPtr,long jobPtr,long memPtr){  enter();  try {    return PlatformCallbackUtils.computeTaskJobResult(envPtr,taskPtr,jobPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public InputVenueMessageContent.InputVenueMessageContentBuilder longitude(double longitude){  this.longitude=longitude;  return this;}  }
class C{  public synchronized VasaAssociationObject[] queryAssociatedLUNsForPort(String[] portUniqueIds) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryAssociatedLUNsForPort(): ";  log.debug(methodName + "Entry");  List<VasaAssociationObject> returnList=null;  List<String> inputPortIdList=null;  log.info(methodName + "Input:[" + portUniqueIds+ "]");  try {    Boolean supportsBlock=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-block-profile"));    if (!supportsBlock) {      log.error(methodName + " This function is not implemented");      throw FaultUtil.NotImplemented("This function is not implemented");    }    String csvSeparatedInitiatorList=this.getCSVListOfInitiatorsFromUsageContext();    Hashtable<String,List<String>> portToVolumeTable=_syncManager.getStoragePortToVolumeTable(csvSeparatedInitiatorList);    returnList=new ArrayList<VasaAssociationObject>();    if (Util.isEmpty(portUniqueIds)) {      for (      String portId : portToVolumeTable.keySet()) {        VasaAssociationObject associationObject=new VasaAssociationObject();        BaseStorageEntity storagePort=new BaseStorageEntity();        storagePort.setUniqueIdentifier(portId);        associationObject.addEntityId(storagePort);        for (        String volumeId : portToVolumeTable.get(portId)) {          BaseStorageEntity associatedVolume=new BaseStorageEntity();          associatedVolume.setUniqueIdentifier(volumeId);          associationObject.addAssociatedId(associatedVolume);        }        returnList.add(associationObject);      }    } else {      inputPortIdList=Arrays.asList(portUniqueIds);      log.debug(methodName + "Input port ids: " + inputPortIdList);      for (      String inputPortId : inputPortIdList) {        if (!Util.isEmpty(inputPortId)) {          if (!inputPortId.startsWith(STORAGEPORT_IDENTIFIER_PREFIX)) {            throw FaultUtil.InvalidArgument("Given port Id is invalid[" + inputPortId + "]");          } else {            List<String> volumeIdList=portToVolumeTable.get(inputPortId);            if (volumeIdList != null && !volumeIdList.isEmpty()) {              VasaAssociationObject associationObject=new VasaAssociationObject();              BaseStorageEntity storagePort=new BaseStorageEntity();              storagePort.setUniqueIdentifier(inputPortId);              associationObject.addEntityId(storagePort);              for (              String volumeId : volumeIdList) {                BaseStorageEntity associatedVolume=new BaseStorageEntity();                associatedVolume.setUniqueIdentifier(volumeId);                associationObject.addAssociatedId(associatedVolume);              }              returnList.add(associationObject);            }          }        }      }    }    return returnList.toArray(new VasaAssociationObject[0]);  } catch (  SOSFailure e) {    log.error("StorageOSFailure occured",e);    throw FaultUtil.StorageFault("StorageOSFailure occured",e);  }catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured ",e);    throw e;  }catch (  NotImplemented e) {    log.error(methodName + "NotImplemented occured ",e);    throw e;  }}  }
class C{  @Override public VolumeBulkRep queryBulkResourceReps(List<URI> ids){  Iterator<Volume> _dbIterator=_dbClient.queryIterativeObjects(getResourceClass(),ids);  return new VolumeBulkRep(BulkList.wrapping(_dbIterator,MapVolume.getInstance(_dbClient)));}  }
class C{  private InterpreterResult processDelete(String[] urlItems){  if (urlItems.length != 3 || StringUtils.isEmpty(urlItems[0]) || StringUtils.isEmpty(urlItems[1]) || StringUtils.isEmpty(urlItems[2])) {    return new InterpreterResult(InterpreterResult.Code.ERROR,"Bad URL (it should be /index/type/id)");  }  final DeleteResponse response=client.prepareDelete(urlItems[0],urlItems[1],urlItems[2]).get();  if (response.isFound()) {    return new InterpreterResult(InterpreterResult.Code.SUCCESS,InterpreterResult.Type.TEXT,response.getId());  }  return new InterpreterResult(InterpreterResult.Code.ERROR,"Document not found");}  }
class C{  public void add(String key,String value){  if (key != null && value != null) {    Object params=urlParamsWithObjects.get(key);    if (params == null) {      params=new HashSet<String>();      this.put(key,params);    }    if (params instanceof List) {      ((List<Object>)params).add(value);    } else     if (params instanceof Set) {      ((Set<Object>)params).add(value);    }  }}  }
class C{  public void updateDomoticzServer(@Nullable UpdateDomoticzServerReceiver receiver){  UpdateDomoticzServerParser parser=new UpdateDomoticzServerParser(receiver);  String url=mDomoticzUrls.constructGetUrl(DomoticzValues.Json.Url.Request.UPDATE_DOMOTICZ_SERVER);  RequestUtil.makeJsonPutRequest(parser,getUserCredentials(Authentication.USERNAME),getUserCredentials(Authentication.PASSWORD),url,mSessionUtil,true,3,queue);}  }
class C{  protected Instances selectWeightQuantile(Instances data,double quantile){  int numInstances=data.numInstances();  Instances trainData=new Instances(data,numInstances);  double[] weights=new double[numInstances];  double sumOfWeights=0;  for (int i=0; i < numInstances; i++) {    weights[i]=data.instance(i).weight();    sumOfWeights+=weights[i];  }  double weightMassToSelect=sumOfWeights * quantile;  int[] sortedIndices=Utils.sort(weights);  sumOfWeights=0;  for (int i=numInstances - 1; i >= 0; i--) {    Instance instance=(Instance)data.instance(sortedIndices[i]).copy();    trainData.add(instance);    sumOfWeights+=weights[sortedIndices[i]];    if ((sumOfWeights > weightMassToSelect) && (i > 0) && (weights[sortedIndices[i]] != weights[sortedIndices[i - 1]])) {      break;    }  }  if (m_Debug) {    System.err.println("Selected " + trainData.numInstances() + " out of "+ numInstances);  }  return trainData;}  }
class C{  public void addToIndex(AlignmentTemplate alTemp){  if (sourceFilter.isEnabled()) {    boolean add=sourceFilter.allows(alTemp);    addToIndex(alTemp,add);  } else {    addToIndex(alTemp,true);  }}  }
class C{  public EventAdapter(ClusterNode node,String msg,int type){  assert tstamp > 0;  A.ensure(type > 0,"Event type ID must be greater than zero.");  this.node=node;  this.msg=msg;  this.type=type;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.095 -0500",hash_original_method="EB97CF4ACDD4FD35B8071D1AF529F576",hash_generated_method="CB1C0BC3484AD50060A745ABB0C4D97D") public Animator onCreateAnimator(int transit,boolean enter,int nextAnim){  return null;}  }
class C{  public boolean isCheckLower(){  return lowerCheck;}  }
class C{  @SuppressWarnings("unchecked") public <T>void queryByConstraint(Constraint constraint,QueryResultList<T> result) throws Exception {  ConstraintDescriptor constrainDescriptor=constraint.toConstraintDescriptor();  WebResource rRoot=createRequest(GEOVISIBLE_URI + "constraint/" + result.getClass().getName());  rRoot.accept(MediaType.APPLICATION_OCTET_STREAM);  ClientResponse resp=addSignature(rRoot).post(ClientResponse.class,constrainDescriptor);  InputStream input=resp.getEntityInputStream();  ObjectInputStream objInputStream=new ObjectInputStream(input);  ResourcesResponse<?> resources=(ResourcesResponse<?>)objInputStream.readObject();  List<Object> queryResult=(List<Object>)resources.getObjects();  List<T> ret=new ArrayList<T>();  for (  Object obj : queryResult) {    ret.add((T)obj);  }  result.setResult(ret.iterator());}  }
class C{  public void register(){  for (  String sysName : sysNameList) {    Route r=manager.getBySystemName(sysName);    String turnoutsAlignedSensor=r.getTurnoutsAlignedSensor();    if (!turnoutsAlignedSensor.equals("")) {      Sensor sensor=InstanceManager.sensorManagerInstance().provideSensor(turnoutsAlignedSensor);      NamedBeanHandle<Sensor> routeAligned=nbhm.getNamedBeanHandle(turnoutsAlignedSensor,sensor);      if (routeAligned != null) {        indication.put(routeAligned,r);        sensor.addPropertyChangeListener(this,routeAligned.getName(),"Wi Throttle Route Controller");        if (log.isDebugEnabled()) {          log.debug("Add listener to Sensor: " + routeAligned.getName() + " for Route: "+ r.getSystemName());        }      }    }  }}  }
class C{  public void notifyListener(TableModelEvent e){  Iterator<TableModelListener> iter;  TableModelListener l;  if (!isNotificationEnabled()) {    return;  }  iter=m_Listeners.iterator();  while (iter.hasNext()) {    l=iter.next();    l.tableChanged(e);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void enableReadButtons(){  readChangesButton.setToolTipText(SymbolicProgBundle.getMessage("TipReadChangesSheet"));  readAllButton.setToolTipText(SymbolicProgBundle.getMessage("TipReadAllSheet"));  if (_cvModel.getProgrammer() != null && !_cvModel.getProgrammer().getCanRead()) {    readChangesButton.setEnabled(false);    readAllButton.setEnabled(false);    readChangesButton.setToolTipText(SymbolicProgBundle.getMessage("TipNoRead"));    readAllButton.setToolTipText(SymbolicProgBundle.getMessage("TipNoRead"));  } else {    readChangesButton.setEnabled(true);    readAllButton.setEnabled(true);  }}  }
class C{  public void testMySQLPlugins() throws Exception {  TungstenProperties tp=new TungstenProperties();  tp.setString(ReplicatorConf.SERVICE_NAME,"test");  tp.setString(ReplicatorConf.ROLE,ReplicatorConf.ROLE_MASTER);  tp.setString(ReplicatorConf.PIPELINES,"master");  tp.setString(ReplicatorConf.PIPELINE_ROOT + ".master","extract");  tp.setString(ReplicatorConf.STAGE_ROOT + ".extract",SingleThreadStageTask.class.toString());  tp.setString(ReplicatorConf.STAGE_ROOT + ".extract.extractor","mysql");  tp.setString(ReplicatorConf.STAGE_ROOT + ".extract.applier","mysql");  String mysqlExtractor=ReplicatorConf.EXTRACTOR_ROOT + ".mysql";  tp.setString(ReplicatorConf.EXTRACTOR_ROOT,"mysql");  tp.setString(mysqlExtractor,MySQLExtractor.class.getName());  tp.setString(mysqlExtractor + ".binlog_dir","/var/lib/mysql");  tp.setString(mysqlExtractor + ".binlog_file_pattern","mysql-bin");  tp.setString(mysqlExtractor + ".dataSource","ds1");  String mysqlApplier=ReplicatorConf.APPLIER_ROOT + ".mysql";  tp.setString(ReplicatorConf.APPLIER_ROOT,"mysql");  tp.setString(mysqlApplier,MySQLApplier.class.getName());  tp.setString(mysqlApplier + ".dataSource","global");  ReplicatorRuntime runtime=new ReplicatorRuntime(tp,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  Stage stage=runtime.getPipeline().getStages().get(0);  Assert.assertNotNull("Extractor not null",stage.getExtractor0());  Assert.assertNotNull("Applier not null",stage.getApplier0());  runtime.release();}  }
class C{  public void testGetInstanceStringProvider01() throws NoSuchAlgorithmException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    KeyAgreement.getInstance(null,defaultProvider);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyAgreement.getInstance(invalidValues[i],defaultProvider);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public static int[] shuffle(int[] intArray){  if (intArray == null) {    return null;  }  return shuffle(intArray,intArray.length);}  }
class C{  private Hex(){}  }
class C{  @Override protected char[] escape(int cp){  if (cp < safeOctets.length && safeOctets[cp]) {    return null;  } else   if (cp == ' ' && plusForSpace) {    return URI_ESCAPED_SPACE;  } else   if (cp <= 0x7F) {    char[] dest=new char[3];    dest[0]='%';    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];    return dest;  } else   if (cp <= 0x7ff) {    char[] dest=new char[6];    dest[0]='%';    dest[3]='%';    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | cp & 0x3];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[1]=UPPER_HEX_DIGITS[0xC | cp];    return dest;  } else   if (cp <= 0xffff) {    char[] dest=new char[9];    dest[0]='%';    dest[1]='E';    dest[3]='%';    dest[6]='%';    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | cp & 0x3];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | cp & 0x3];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp];    return dest;  } else   if (cp <= 0x10ffff) {    char[] dest=new char[12];    dest[0]='%';    dest[1]='F';    dest[3]='%';    dest[6]='%';    dest[9]='%';    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[10]=UPPER_HEX_DIGITS[0x8 | cp & 0x3];    cp>>>=2;    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | cp & 0x3];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | cp & 0x3];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];    return dest;  } else {    throw new IllegalArgumentException("Invalid unicode character value " + cp);  }}  }
class C{  public void writeText(Object text,String componentPropertyName) throws IOException {  if (text == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text.toString());  } else {    Util.writeText(writer,buffer,text.toString());  }}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static <T>TSink<T> publish(TStream<T> stream,String topic,Class<? super T> streamType){  return stream.sink(new Publish<>(topic,streamType));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.246 -0500",hash_original_method="6074674D7A01ED6AECC5FC14865BC8F8",hash_generated_method="BDB7EEC2F311DC2505B8F3ADEB750EE8") public static int rotateRight(int i,int distance){  return i + distance;}  }
class C{  public boolean isPolygonal(){  Enumeration enum_=curves.elements();  while (enum_.hasMoreElements()) {    if (((Curve)enum_.nextElement()).getOrder() > 1) {      return false;    }  }  return true;}  }
class C{  public static void run(AdExchangeSeller adExchangeSeller,String savedReportId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Running saved report %s\n",savedReportId);  System.out.println("=================================================================");  Date today=new Date();  Calendar calendar=Calendar.getInstance();  calendar.setTime(today);  calendar.add(Calendar.DATE,-7);  Generate request=adExchangeSeller.reports().saved().generate(savedReportId);  Report response=request.execute();  if (response.getRows() != null && !response.getRows().isEmpty()) {    for (    Report.Headers header : response.getHeaders()) {      System.out.printf("%25s",header.getName());    }    System.out.println();    for (    List<String> row : response.getRows()) {      for (      String column : row) {        System.out.printf("%25s",column);      }      System.out.println();    }    System.out.println();  } else {    System.out.println("No rows returned.");  }  System.out.println();}  }
class C{  public XmlHttpContent(XmlNamespaceDictionary namespaceDictionary,String elementName,Object data){  super(namespaceDictionary);  this.elementName=Preconditions.checkNotNull(elementName);  this.data=Preconditions.checkNotNull(data);}  }
class C{  public static String lowerCase(String str){  if (str == null) {    return null;  }  return str.toLowerCase();}  }
class C{  public void destroy(){  this.rideRequestButtonView=null;  this.rideRequestButtonCallback=null;  cancelAllPending();}  }
class C{  public void readHeader() throws IOException {  int magic=in.readUI8();switch (magic) {case 'C':    zipCompressed=true;  break;case 'F':break;case 'Z':throw new IOException("LZMA compressed SWF file not supported");default :throw new IOException("Invalid SWF File Signature");}magic=in.readUI8();if (magic != 'W') {throw new IOException("Invalid SWF File Signature");}magic=in.readUI8();if (magic != 'S') {throw new IOException("Invalid SWF File Signature");}int version=in.readUI8();long length=in.readUI32();if (zipCompressed) {in.readCompressed();}Rect frameSize=new Rect(in);int frameRate=in.readUI16() >> 8;int frameCount=in.readUI16();consumer.header(version,length,frameSize.getMaxX(),frameSize.getMaxY(),frameRate,frameCount);}  }
class C{  public Object firstRow() throws SQLException {  List rows=rows();  if (rows.isEmpty())   return null;  return (rows.get(0));}  }
