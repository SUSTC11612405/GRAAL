class C{  public Conversion body(String body){  conversion.content=body;  return this;}  }
class C{  public final AC size(String s){  return size(s,curIx);}  }
class C{  @NotNull public QueryBuilder addArguments(Object... args){  return addArguments(asList(args));}  }
class C{  private static void insertRoleSpecificPrice(List<RoleSpecificPrice> list,VORoleDefinition role,String paramDesc,String optionDesc,BigDecimal price){  if (price.compareTo(BigDecimal.ZERO) == 0) {    return;  }  RoleSpecificPrice row=new RoleSpecificPrice();  row.setRole(role);  row.setParameterDescription(paramDesc);  row.setOptionDescription(optionDesc);  row.setPrice(price);  boolean found=false;  int i=0;  while (i < list.size()) {    if (list.get(i).getRole().getRoleId().equals(row.getRole().getRoleId())) {      found=true;    } else     if (found) {      break;    }    i++;  }  list.add(i,row);  if (optionDesc != null && (i == 0 || list.get(i - 1).getOptionDescription() == null || !paramDesc.equals(list.get(i - 1).getParameterDescription()))) {    row=new RoleSpecificPrice();    row.setRole(role);    row.setParameterDescription(paramDesc);    row.setPrice(BigDecimal.ZERO);    row.setEnumerationParameter("true");    list.add(i,row);  }}  }
class C{  public void populateCache(String query,Iterator<Map<String,Object>> rowIterator){  Map<String,Object> aRow=null;  DIHCache cache=queryVsCache.get(query);  while ((aRow=getNextFromCache(query,rowIterator)) != null) {    cache.add(aRow);  }}  }
class C{  public Object clone(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),"clone()","Entry");  }  return (new ModelMBeanOperationInfo(this));}  }
class C{  public void purgeAndNotifyRemovedLayers(){  ArrayList<Layer> rLayers=new ArrayList<Layer>(removedLayers);  removedLayers.clear();  if (rLayers.isEmpty()) {    return;  }  for (  Layer layer : rLayers) {    layer.removed(this);  }  if (Debug.debugging("helpgc")) {    System.gc();  }}  }
class C{  ContextualSearchRequest(String searchTerm){  this(searchTerm,null,false);}  }
class C{  public boolean containsSubSeq(CharSeq seq){  return indexOfSubSeq(seq) != -1;}  }
class C{  private void updateFormBody(){  clearFormBody();  if (!inputList.isEmpty()) {    treeViewer.getTree().setVisible(true);    treeViewer.getTree().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));    treeViewer.setInput(inputList);    treeViewer.expandAll();    if ((null != lastSelectedRepository) && inputList.contains(lastSelectedRepository)) {      StructuredSelection ss=new StructuredSelection(lastSelectedRepository);      treeViewer.setSelection(ss,true);    }  } else {    displayMessage("No CMR repository present. Please add the CMR repository via 'Add CMR repository' action.",Display.getDefault().getSystemImage(SWT.ICON_INFORMATION));  }  mainForm.getBody().layout();}  }
class C{  public boolean canBeLongAddress(int address){  return isLongAddress(address);}  }
class C{  protected int defaultNumCycles(){  return 4;}  }
class C{  @Override public void layoutContainer(Container parent){  JScrollPane scrollPane=(JScrollPane)parent;  vsbPolicy=scrollPane.getVerticalScrollBarPolicy();  hsbPolicy=scrollPane.getHorizontalScrollBarPolicy();  Rectangle availR=scrollPane.getBounds();  availR.x=availR.y=0;  Insets insets=parent.getInsets();  availR.x=insets.left;  availR.y=insets.top;  availR.width-=insets.left + insets.right;  availR.height-=insets.top + insets.bottom;  boolean leftToRight=false;  Rectangle colHeadR=new Rectangle(0,availR.y,0,0);  if ((colHead != null) && (colHead.isVisible())) {    int colHeadHeight=Math.min(availR.height,colHead.getPreferredSize().height);    colHeadR.height=colHeadHeight;    availR.y+=colHeadHeight;    availR.height-=colHeadHeight;  }  Rectangle rowHeadR=new Rectangle(0,0,0,0);  if ((rowHead != null) && (rowHead.isVisible())) {    int rowHeadWidth=Math.min(availR.width,rowHead.getPreferredSize().width);    rowHeadR.width=rowHeadWidth;    availR.width-=rowHeadWidth;    if (leftToRight) {      rowHeadR.x=availR.x;      availR.x+=rowHeadWidth;    } else {      rowHeadR.x=availR.x + availR.width;    }  }  Border viewportBorder=scrollPane.getViewportBorder();  Insets vpbInsets;  if (viewportBorder != null) {    vpbInsets=viewportBorder.getBorderInsets(parent);    availR.x+=vpbInsets.left;    availR.y+=vpbInsets.top;    availR.width-=vpbInsets.left + vpbInsets.right;    availR.height-=vpbInsets.top + vpbInsets.bottom;  } else {    vpbInsets=new Insets(0,0,0,0);  }  Component view=(viewport != null) ? viewport.getView() : null;  Dimension viewPrefSize=(view != null) ? view.getPreferredSize() : JBUI.emptySize();  Dimension extentSize=(viewport != null) ? viewport.toViewCoordinates(availR.getSize()) : JBUI.emptySize();  boolean viewTracksViewportWidth=false;  boolean viewTracksViewportHeight=false;  boolean isEmpty=(availR.width < 0 || availR.height < 0);  Scrollable sv;  if (!isEmpty && view instanceof Scrollable) {    sv=(Scrollable)view;    viewTracksViewportWidth=sv.getScrollableTracksViewportWidth();    viewTracksViewportHeight=sv.getScrollableTracksViewportHeight();  } else {    sv=null;  }  Rectangle vsbR=new Rectangle(0,availR.y - vpbInsets.top,0,0);  boolean vsbNeeded;  if (isEmpty) {    vsbNeeded=false;  } else   if (vsbPolicy == VERTICAL_SCROLLBAR_ALWAYS) {    vsbNeeded=true;  } else   if (vsbPolicy == VERTICAL_SCROLLBAR_NEVER) {    vsbNeeded=false;  } else {    vsbNeeded=!viewTracksViewportHeight && (viewPrefSize.height > extentSize.height);  }  if ((vsb != null) && vsbNeeded) {    adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);    extentSize=viewport.toViewCoordinates(availR.getSize());  }  Rectangle hsbR=new Rectangle(availR.x - vpbInsets.left,0,0,0);  boolean hsbNeeded;  if (isEmpty) {    hsbNeeded=false;  } else   if (hsbPolicy == HORIZONTAL_SCROLLBAR_ALWAYS) {    hsbNeeded=true;  } else   if (hsbPolicy == HORIZONTAL_SCROLLBAR_NEVER) {    hsbNeeded=false;  } else {    hsbNeeded=!viewTracksViewportWidth && (viewPrefSize.width > extentSize.width);  }  if ((hsb != null) && hsbNeeded) {    adjustForHSB(true,availR,hsbR,vpbInsets);    if ((vsb != null) && !vsbNeeded && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {      extentSize=viewport.toViewCoordinates(availR.getSize());      vsbNeeded=viewPrefSize.height > extentSize.height;      if (vsbNeeded) {        adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);      }    }  }  if (viewport != null) {    viewport.setBounds(availR);    if (sv != null) {      extentSize=viewport.toViewCoordinates(availR.getSize());      boolean oldHSBNeeded=hsbNeeded;      boolean oldVSBNeeded=vsbNeeded;      viewTracksViewportWidth=sv.getScrollableTracksViewportWidth();      viewTracksViewportHeight=sv.getScrollableTracksViewportHeight();      if (vsb != null && vsbPolicy == VERTICAL_SCROLLBAR_AS_NEEDED) {        boolean newVSBNeeded=!viewTracksViewportHeight && (viewPrefSize.height > extentSize.height);        if (newVSBNeeded != vsbNeeded) {          vsbNeeded=newVSBNeeded;          adjustForVSB(vsbNeeded,availR,vsbR,vpbInsets,leftToRight);          extentSize=viewport.toViewCoordinates(availR.getSize());        }      }      if (hsb != null && hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED) {        boolean newHSBbNeeded=!viewTracksViewportWidth && (viewPrefSize.width > extentSize.width);        if (newHSBbNeeded != hsbNeeded) {          hsbNeeded=newHSBbNeeded;          adjustForHSB(hsbNeeded,availR,hsbR,vpbInsets);          if ((vsb != null) && !vsbNeeded && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {            extentSize=viewport.toViewCoordinates(availR.getSize());            vsbNeeded=viewPrefSize.height > extentSize.height;            if (vsbNeeded) {              adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);            }          }        }      }      if (oldHSBNeeded != hsbNeeded || oldVSBNeeded != vsbNeeded) {        viewport.setBounds(availR);      }    }  }  vsbR.height=availR.height + vpbInsets.top + vpbInsets.bottom;  hsbR.width=availR.width + vpbInsets.left + vpbInsets.right;  rowHeadR.height=availR.height + vpbInsets.top + vpbInsets.bottom;  rowHeadR.y=availR.y - vpbInsets.top;  colHeadR.width=availR.width + vpbInsets.left + vpbInsets.right;  colHeadR.x=availR.x - vpbInsets.left;  if (rowHead != null) {    rowHead.setBounds(rowHeadR);  }  if (colHead != null) {    colHead.setBounds(colHeadR);  }  if (vsb != null) {    if (vsbNeeded) {      vsb.setVisible(true);      vsb.setBounds(vsbR);    } else {      vsb.setVisible(false);    }  }  if (hsb != null) {    if (hsbNeeded) {      hsb.setVisible(true);      hsb.setBounds(hsbR);    } else {      hsb.setVisible(false);    }  }  if (lowerLeft != null) {    lowerLeft.setBounds(leftToRight ? rowHeadR.x : vsbR.x,hsbR.y,leftToRight ? rowHeadR.width : vsbR.width,hsbR.height);  }  if (lowerRight != null) {    lowerRight.setBounds(leftToRight ? vsbR.x : rowHeadR.x,hsbR.y,leftToRight ? vsbR.width : rowHeadR.width,hsbR.height);  }  if (upperLeft != null) {    upperLeft.setBounds(leftToRight ? rowHeadR.x : vsbR.x,colHeadR.y,leftToRight ? rowHeadR.width : vsbR.width,colHeadR.height);  }  if (upperRight != null) {    upperRight.setBounds(leftToRight ? vsbR.x : rowHeadR.x,colHeadR.y,leftToRight ? vsbR.width : rowHeadR.width,colHeadR.height);  }}  }
class C{  private void savePreferences(){  PreferencesUtils.saveCmrRepositoryDefinitions(cmrRepositoryManager.getCmrRepositoryDefinitions(),false);}  }
class C{  public boolean isLocalAndExists(){  return false;}  }
class C{  protected void createChildResources(IContainer parentHandle,IProgressMonitor monitor,int ticks) throws CoreException {  if (members != null && members.length > 0) {    for (int i=0; i < members.length; i++) {      members[i].parent=parentHandle;      members[i].createResource(new SubProgressMonitor(monitor,ticks / members.length));    }  }}  }
class C{  public synchronized void join() throws InterruptedException {  int nThreads=runners.size();  if (nThreads == 0)   return;  if (!started)   start();  semaphore.acquire(nThreads);  semaphore.release(nThreads);}  }
class C{  public void inputSentence(String text,String userName,String targetUserName,String id,Network network){  Vertex input=createInput(text.trim(),network);  Vertex user=network.createSpeaker(userName);  Vertex self=network.createVertex(Primitive.SELF);  input.addRelationship(Primitive.SPEAKER,user);  input.addRelationship(Primitive.TARGET,self);  user.addRelationship(Primitive.INPUT,input);  Vertex conversation=network.createVertex(id);  conversation.addRelationship(Primitive.INSTANTIATION,Primitive.CONVERSATION);  conversation.addRelationship(Primitive.TYPE,Primitive.DIRECTMESSAGE);  conversation.addRelationship(Primitive.ID,network.createVertex(id));  conversation.addRelationship(Primitive.SPEAKER,user);  conversation.addRelationship(Primitive.SPEAKER,self);  Language.addToConversation(input,conversation);  network.save();  getBot().memory().addActiveMemory(input);}  }
class C{  public static void downloadImageToFileSystem(String url,String fileName,SuccessCallback<Image> onSuccess,FailureCallback<Image> onFail){  ConnectionRequest cr=new ConnectionRequest();  cr.setPost(false);  cr.setFailSilently(true);  cr.setDuplicateSupported(true);  cr.setUrl(url);  cr.downloadImageToFileSystem(fileName,onSuccess,onFail);}  }
class C{  public Builder clearRotation(){  rotationDegrees=0;  rotationPivotX=0;  rotationPivotY=0;  hasRotationPivot=false;  return this;}  }
class C{  @GET @Path("{" + PARAM_NAME + "}") @ApiOperation(value="Gets a Project") public Project read(@PathParam(PARAM_NAME) String objectId,@QueryParam("deepread") Boolean deepread){  ProjectPK projectPK=new ProjectPK(userContext.getCustomerId(),objectId);  return delegate.read(userContext,projectPK);}  }
class C{  public boolean containsKey(int key){  Entry[] table=this.table;  int bucket=Math.abs(key) % table.length;  for (Entry e=table[bucket]; e != null; e=e.next) {    if (e.key == key) {      return true;    }  }  return false;}  }
class C{  public MatchCondition docValues(Boolean docValues){  this.docValues=docValues;  return this;}  }
class C{  private synchronized void switchAddedToStore(IOFSwitch sw){  if (floodlightProvider.getRole() != HARole.STANDBY) {    return;  }  DatapathId dpid=sw.getId();  IOFSwitch oldSw=syncedSwitches.put(dpid,sw);  if (oldSw == null) {    addUpdateToQueue(new SwitchUpdate(dpid,SwitchUpdateType.ADDED));  } else {    sendNotificationsIfSwitchDiffers(oldSw,sw);  }}  }
class C{  public JsonUnflattener withSeparator(char separator){  this.separator=separator;  return this;}  }
class C{  public static String format(double[] d){  return d == null ? "null" : (d.length == 0) ? "" : formatTo(new StringBuilder(),d,", ").toString();}  }
class C{  public AnalyzingSuggester(Directory tempDir,String tempFileNamePrefix,Analyzer indexAnalyzer,Analyzer queryAnalyzer,int options,int maxSurfaceFormsPerAnalyzedForm,int maxGraphExpansions,boolean preservePositionIncrements){  this.indexAnalyzer=indexAnalyzer;  this.queryAnalyzer=queryAnalyzer;  if ((options & ~(EXACT_FIRST | PRESERVE_SEP)) != 0) {    throw new IllegalArgumentException("options should only contain EXACT_FIRST and PRESERVE_SEP; got " + options);  }  this.exactFirst=(options & EXACT_FIRST) != 0;  this.preserveSep=(options & PRESERVE_SEP) != 0;  if (maxSurfaceFormsPerAnalyzedForm <= 0 || maxSurfaceFormsPerAnalyzedForm > 256) {    throw new IllegalArgumentException("maxSurfaceFormsPerAnalyzedForm must be > 0 and < 256 (got: " + maxSurfaceFormsPerAnalyzedForm + ")");  }  this.maxSurfaceFormsPerAnalyzedForm=maxSurfaceFormsPerAnalyzedForm;  if (maxGraphExpansions < 1 && maxGraphExpansions != -1) {    throw new IllegalArgumentException("maxGraphExpansions must -1 (no limit) or > 0 (got: " + maxGraphExpansions + ")");  }  this.maxGraphExpansions=maxGraphExpansions;  this.preservePositionIncrements=preservePositionIncrements;  this.tempDir=tempDir;  this.tempFileNamePrefix=tempFileNamePrefix;}  }
class C{  private ICloseableIterator<IBindingSet[]> doServiceCall(final ServiceCall<? extends Object> serviceCall,final IBindingSet[] left) throws Exception {  try {    final ICloseableIterator<IBindingSet> itr;    if (serviceCall instanceof BigdataServiceCall) {      itr=doBigdataServiceCall((BigdataServiceCall)serviceCall,left);    } else     if (serviceCall instanceof ExternalServiceCall) {      itr=doExternalServiceCall((ExternalServiceCall)serviceCall,left);    } else     if (serviceCall instanceof RemoteServiceCall) {      itr=doRemoteServiceCall((RemoteServiceCall)serviceCall,left);    } else     if (serviceCall instanceof MockIVReturningServiceCall) {      itr=doExternalMockIVServiceCall((MockIVReturningServiceCall)serviceCall,left);    } else {      throw new AssertionError();    }    final ICloseableIterator<IBindingSet[]> itr2=new Chunkerator<IBindingSet>(itr,op.getChunkCapacity(),IBindingSet.class);    return itr2;  } catch (  Throwable t) {    if (silent && !InnerCause.isInnerCause(t,InterruptedException.class)) {      log.warn("Service call: serviceUri=" + serviceURI + " :"+ t);      return null;    }    throw new RuntimeException(t);  }}  }
class C{  protected boolean isDefaultField(CharSequence fld){  if (this.toQueryStringIgnoreFields)   return true;  if (fld == null)   return true;  if (QueryNodeImpl.PLAINTEXT_FIELD_NAME.equals(StringUtils.toString(fld)))   return true;  return false;}  }
class C{  public boolean isStateActive(State state){switch (state) {case entryReactionAction_r2_B:    return stateVector[0].ordinal() >= State.entryReactionAction_r2_B.ordinal() && stateVector[0].ordinal() <= State.entryReactionAction_r2_B_r_BB.ordinal();case entryReactionAction_r2_B_r_BA:  return stateVector[0] == State.entryReactionAction_r2_B_r_BA;case entryReactionAction_r2_B_r_BB:return stateVector[0] == State.entryReactionAction_r2_B_r_BB;case entryReactionAction_r2_D:return stateVector[0] == State.entryReactionAction_r2_D;case entryReactionAction_r1_A:return stateVector[1] == State.entryReactionAction_r1_A;default :return false;}}  }
class C{  @SuppressWarnings("unchecked") protected void saveMessage(String msg){  List messages=(List)getRequest().getSession().getAttribute("messages");  if (messages == null) {    messages=new ArrayList();  }  messages.add(msg);  getRequest().getSession().setAttribute("messages",messages);}  }
class C{  public long updateTop(){  downHeap();  return heap[1];}  }
class C{  public final void addElements(int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_firstFree+=numberOfElements;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.NUM_EXPR___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_11:getAnonymous_numExpr_1_1().clear();getAnonymous_numExpr_1_1().addAll((Collection<? extends Anonymous_numExpr_1_>)newValue);return;case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_21:getAnonymous_numExpr_2_1().clear();getAnonymous_numExpr_2_1().addAll((Collection<? extends Anonymous_numExpr_2_>)newValue);return;case UmplePackage.NUM_EXPR___ORDINAL_OP_1:getOrdinalOp_1().clear();getOrdinalOp_1().addAll((Collection<? extends OrdinalOp_>)newValue);return;case UmplePackage.NUM_EXPR___NAME_2:setName_2((String)newValue);return;case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_31:getAnonymous_numExpr_3_1().clear();getAnonymous_numExpr_3_1().addAll((Collection<? extends Anonymous_numExpr_3_>)newValue);return;case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_41:getAnonymous_numExpr_4_1().clear();getAnonymous_numExpr_4_1().addAll((Collection<? extends Anonymous_numExpr_4_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public JBBPOut Bits(final JBBPBitNumber numberOfBits,final int... value) throws IOException {  assertNotEnded();  JBBPUtils.assertNotNull(value,"Array must not be null");  if (this.processCommands) {    for (    final int v : value) {      _writeBits(numberOfBits,v);    }  }  return this;}  }
class C{  public static void simulateLogic(Gate g){  if (g.is_unvisited()) {    ArrayList<Gate> children=g.getChildren();    for (    Gate child : children) {      if (child.is_unvisited()) {        simulateLogic(child);      }    }    g.set_unvisited(false);    g.set_logics(GateUtil.computeGateLogics(g));  }}  }
class C{  public CCheckBox(){  super();  init();}  }
class C{  public synchronized void clear(){  queue.clear();}  }
class C{  public void editButtonActionPerformed(){  nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeAddrStatic.setText(Integer.toString(nodeAddress));  nodeAddrField.setVisible(false);  nodeAddrStatic.setVisible(true);  nodeType=curNode.getNodeType();  nodeTypeBox.setSelectedIndex(nodeType);  editMode=true;  addButton.setVisible(false);  editButton.setVisible(false);  deleteButton.setVisible(false);  doneButton.setVisible(false);  updateButton.setVisible(true);  cancelButton.setVisible(true);  statusText1.setText(editStatus1);  statusText2.setText(editStatus2);  statusText3.setText(editStatus3);}  }
class C{  public ShowFrameAction(InternalFrameDemo demo,Icon icon){  this.demo=demo;  this.icon=icon;}  }
class C{  public static Instruction findInstruction(final CodeNode codeNode,final IInstruction searchInstruction){  Preconditions.checkNotNull(codeNode,"IE02027: Code node argument can not be null");  Preconditions.checkNotNull(searchInstruction,"IE02033: Instruction argument can not be null");  for (  final Instruction instruction : codeNode.getInstructions()) {    if (instruction.getNative() == searchInstruction) {      return instruction;    }  }  throw new IllegalStateException("IE01273: Could not determine what instruction could not be translated");}  }
class C{  public void end(String key,String message){  Date end=new Date();  Date start=startTimes.get(key);  if (start != null) {    message="" + message;    String elapsed="" + (end.getTime() - start.getTime()) + " ms";    log(end,"<- " + key + " (\u001b[36m"+ elapsed+ "\u001b[0m)"+ (message.isEmpty() ? "" : ": " + message));  }}  }
class C{  public static void writeJSONString(Map map,Writer out) throws IOException {  if (map == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=map.entrySet().iterator();  out.write('{');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Map.Entry entry=(Map.Entry)iter.next();    out.write('\"');    out.write(escape(String.valueOf(entry.getKey())));    out.write('\"');    out.write(':');    JSONValue.writeJSONString(entry.getValue(),out);  }  out.write('}');}  }
class C{  public ConverterBean(){  this.converters.setFast(false);  this.deregister();  this.converters.setFast(true);}  }
class C{  public void paintMenuBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  synchronized public void updateBest(FinalSolution candidate){  if (this.best == null) {    this.best=candidate;    return;  }  Double bestPerformance=best.getTrainingPerformances().get("match f-measure");  Double candidatePerformance=candidate.getTrainingPerformances().get("match f-measure");  if ((candidatePerformance > bestPerformance) || ((candidatePerformance.equals(bestPerformance)) && (candidate.getSolution().length() < best.getSolution().length()))) {    this.best=candidate;  }}  }
class C{  private void fireMessageScanned(List<ReleaseMessage> messages){  for (  ReleaseMessage message : messages) {    for (    ReleaseMessageListener listener : listeners) {      try {        listener.handleMessage(message,Topics.APOLLO_RELEASE_TOPIC);      } catch (      Throwable ex) {        Cat.logError(ex);        logger.error("Failed to invoke message listener {}",listener.getClass(),ex);      }    }  }}  }
class C{  public static ObjectNamesRequest create(){  ObjectNamesRequest m=new ObjectNamesRequest();  return m;}  }
class C{  private void computeCandidateRelatedness(String measure){  for (  WCProblem wcp : wordChoiceProblems) {    wcp.setRelatedness1(measure,getCandidateRelatedness(measure,wcp.getTarget(),wcp.getCand1(),wcp.getCandList1()));    wcp.setRelatedness2(measure,getCandidateRelatedness(measure,wcp.getTarget(),wcp.getCand2(),wcp.getCandList2()));    wcp.setRelatedness3(measure,getCandidateRelatedness(measure,wcp.getTarget(),wcp.getCand3(),wcp.getCandList3()));    wcp.setRelatedness4(measure,getCandidateRelatedness(measure,wcp.getTarget(),wcp.getCand4(),wcp.getCandList4()));  }}  }
class C{  public StoredBlock build(Block block) throws VerificationException {  BigInteger chainWork=this.chainWork.add(block.getWork());  int height=this.height + 1;  return new StoredBlock(block,chainWork,height);}  }
class C{  public InfoResponse info(final InfoRequest request) throws SubversionException, UnauthorizedException {  final List<String> args=defaultArgs();  if (request.getRevision() != null && !request.getRevision().trim().isEmpty()) {    addOption(args,"--revision",request.getRevision());  }  if (request.getChildren()) {    addOption(args,"--depth","immediates");  }  args.add("info");  List<String> paths=new ArrayList<>();  paths.add(request.getTarget());  final CommandLineResult result=runCommand(null,args,new File(request.getProjectPath()),addWorkingCopyPathIfNecessary(paths),request.getUsername(),request.getPassword());  final InfoResponse response=DtoFactory.getInstance().createDto(InfoResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrorOutput(result.getStderr());  if (result.getExitCode() == 0) {    List<SubversionItem> items=new ArrayList<>();    response.withItems(items);    Iterator<String> iterator=result.getStdout().iterator();    List<String> itemProperties=new ArrayList<>();    while (iterator.hasNext()) {      String propertyLine=iterator.next();      if (propertyLine.isEmpty()) {        String repositoryRoot=getRepositoryRoot(itemProperties);        String relativeUrl=getRelativeUrl(itemProperties);        final SubversionItem item=DtoFactory.getInstance().createDto(SubversionItem.class).withPath(InfoUtils.getPath(itemProperties)).withName(InfoUtils.getName(itemProperties)).withURL(InfoUtils.getUrl(itemProperties)).withRelativeURL(relativeUrl).withRepositoryRoot(repositoryRoot).withRepositoryUUID(InfoUtils.getRepositoryUUID(itemProperties)).withRevision(InfoUtils.getRevision(itemProperties)).withNodeKind(InfoUtils.getNodeKind(itemProperties)).withSchedule(InfoUtils.getSchedule(itemProperties)).withLastChangedRev(InfoUtils.getLastChangedRev(itemProperties)).withLastChangedDate(InfoUtils.getLastChangedDate(itemProperties)).withProjectUri(recognizeProjectUri(repositoryRoot,relativeUrl));        items.add(item);        itemProperties.clear();      } else {        itemProperties.add(propertyLine);      }    }  } else {    response.withErrorOutput(result.getStderr());  }  return response;}  }
class C{  public void process() throws InterruptedException {  requestQueue.take().run();}  }
class C{  @Override public boolean shouldExecute(){  if (theMinion.targetEntityToGrab != null) {    target=theMinion.targetEntityToGrab;    return true;  }  target=null;  return false;}  }
class C{  public void scanAndSetupDb(boolean waitForSchema){  int retryIntervalSecs=DBINIT_RETRY_INTERVAL;  int retryTimes=0;  while (true) {    retryTimes++;    try {      KeyspaceDefinition kd=clientContext.getCluster().describeKeyspace(_keyspaceName);      boolean inited=false;      if (onStandby) {        inited=checkAndInitSchemaOnStandby(kd);      } else {        inited=checkAndInitSchemaOnActive(kd,waitForSchema);      }      if (inited) {        return;      }    } catch (    ConnectionException e) {      _log.warn("Unable to verify DB keyspace, will retry in {} secs",retryIntervalSecs,e);    }catch (    InterruptedException e) {      _log.warn("DB keyspace verification interrupted, will retry in {} secs",retryIntervalSecs,e);    }catch (    IllegalStateException e) {      _log.warn("IllegalStateException: ",e);      throw e;    }    if (retryTimes > DBINIT_RETRY_MAX) {      throw new IllegalStateException("Unable to setup schema");    }    try {      Thread.sleep(retryIntervalSecs * 1000);    } catch (    InterruptedException ex) {      _log.warn("Thread is interrupted during wait for retry",ex);    }  }}  }
class C{  public static void initGoogleAnalytics(Context context){}  }
class C{  public synchronized void addListener(ExceptionEventListener listener){  if (!this.listeners.contains(listener)) {    this.listeners.add(listener);  }}  }
class C{  public void releaseEglSurface(){  mEglCore.releaseSurface(mEGLSurface);  mEGLSurface=EGL14.EGL_NO_SURFACE;  mWidth=mHeight=-1;}  }
class C{  private boolean isSubpath(List<Node> path,List<Node> subpath){  boolean isSubpath=false;  int subpathLast=subpath.size() - 1;  for (int k=0; k < path.size() - subpathLast; k++) {    if (path.get(k).equals(subpath.get(0))) {      isSubpath=true;      for (int m=1; m < subpath.size(); m++) {        if (!path.get(k + m).equals(subpath.get(m))) {          isSubpath=false;          break;        }      }      if (isSubpath) {        break;      }    }    if (path.get(k).equals(subpath.get(subpathLast))) {      isSubpath=true;      for (int m=subpathLast - 1; m >= 0; m--) {        if (!path.get(k + subpathLast - m).equals(subpath.get(m))) {          isSubpath=false;          break;        }      }      if (isSubpath) {        break;      }    }  }  return isSubpath;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildKotochSmitherArea(zone);}  }
class C{  @Override void animateValue(float fraction){  super.animateValue(fraction);  int numValues=mValues.length;  for (int i=0; i < numValues; ++i) {    mValues[i].setAnimatedValue(mTarget);  }}  }
class C{  @Override public T findByNamedQuery(final String namedQuery,final Object... params){  return persistenceService.findByNamedQuery(namedQuery,params);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenFlds[");  for (int i=0; i < m_al.size(); i++) {    buffer.append(" [Field").append(i + 1);    buffer.append(" = ").append((m_al.get(i)).toString());    buffer.append("] ");  }  buffer.append("]");  return buffer.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.692 -0500",hash_original_method="4CDC3279EB2015FFF1E8970655E8006E",hash_generated_method="E942CE3FCDFD5B8FC3A18A55AD7302D6") protected BasicPooledConnAdapter(ThreadSafeClientConnManager tsccm,AbstractPoolEntry entry){  super(tsccm,entry);  markReusable();}  }
class C{  public static boolean isPropositionSymbol(String symbol){  return SourceVersion.isIdentifier(symbol);}  }
class C{  public void markCompletelyDirty(JComponent aComponent){  RepaintManager delegate=getDelegate(aComponent);  if (delegate != null) {    delegate.markCompletelyDirty(aComponent);    return;  }  addDirtyRegion(aComponent,0,0,Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  private String[] splitOutGameEnd(String wordToken){  if (wordToken.startsWith(Result.BLACK_WON.getDescription())) {    return splitOutStartString(wordToken,Result.BLACK_WON.getDescription());  } else   if (wordToken.startsWith(Result.WHITE_WON.getDescription())) {    return splitOutStartString(wordToken,Result.WHITE_WON.getDescription());  } else   if (wordToken.startsWith(Result.DRAW.getDescription())) {    return splitOutStartString(wordToken,Result.DRAW.getDescription());  } else   if (wordToken.startsWith(Result.ON_GOING.getDescription())) {    return splitOutStartString(wordToken,Result.ON_GOING.getDescription());  } else {    return null;  }}  }
class C{  private void sendMessageCalibrationDoneToUI(){  Log.i("medtronicCGMService","Calibration done");  for (int i=mClients.size() - 1; i >= 0; i--) {    try {      Message mSend=null;      mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CALIBRATION_DONE);      mClients.get(i).send(mSend);    } catch (    RemoteException e) {      mClients.remove(i);    }  }}  }
class C{  public static void main(String[] args){  Random r=new Random();  UnivariateNormalEstimator e=new UnivariateNormalEstimator();  System.out.println(e);  double sum=0;  for (int i=0; i < 100000; i++) {    sum+=Math.exp(e.logDensity(r.nextDouble() * 10.0 - 5.0));  }  System.out.println("Approximate integral: " + 10.0 * sum / 100000);  for (int i=0; i < 100000; i++) {    e.addValue(r.nextGaussian(),1);    e.addValue(r.nextGaussian() * 2.0,3);  }  System.out.println(e);  sum=0;  for (int i=0; i < 100000; i++) {    sum+=Math.exp(e.logDensity(r.nextDouble() * 10.0 - 5.0));  }  System.out.println("Approximate integral: " + 10.0 * sum / 100000);  e=new UnivariateNormalEstimator();  for (int i=0; i < 100000; i++) {    e.addValue(r.nextGaussian(),1);    e.addValue(r.nextGaussian() * 2.0,1);    e.addValue(r.nextGaussian() * 2.0,1);    e.addValue(r.nextGaussian() * 2.0,1);  }  System.out.println(e);  sum=0;  for (int i=0; i < 100000; i++) {    sum+=Math.exp(e.logDensity(r.nextDouble() * 10.0 - 5.0));  }  System.out.println("Approximate integral: " + 10.0 * sum / 100000);  e=new UnivariateNormalEstimator();  for (int i=0; i < 100000; i++) {    e.addValue(r.nextGaussian() * 5.0 + 3.0,1);  }  System.out.println(e);  double[][] intervals=e.predictIntervals(0.95);  System.out.println("Lower: " + intervals[0][0] + " Upper: "+ intervals[0][1]);  double covered=0;  for (int i=0; i < 100000; i++) {    double val=r.nextGaussian() * 5.0 + 3.0;    if (val >= intervals[0][0] && val <= intervals[0][1]) {      covered++;    }  }  System.out.println("Coverage: " + covered / 100000);  intervals=e.predictIntervals(0.8);  System.out.println("Lower: " + intervals[0][0] + " Upper: "+ intervals[0][1]);  covered=0;  for (int i=0; i < 100000; i++) {    double val=r.nextGaussian() * 5.0 + 3.0;    if (val >= intervals[0][0] && val <= intervals[0][1]) {      covered++;    }  }  System.out.println("Coverage: " + covered / 100000);}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF_ITERABLE:    return convertParameterizedTypeRefIterableToString(eDataType,instanceValue);default :  throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public int readString(char[] buffer,int offset,int length) throws IOException {  int readLength=0;  if (_chunkLength == END_OF_DATA) {    _chunkLength=0;    return -1;  } else   if (_chunkLength == 0) {    int tag=read();switch (tag) {case 'N':      return -1;case 'S':case BC_STRING_CHUNK:    _isLastChunk=tag == 'S';  _chunkLength=(read() << 8) + read();break;case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:_isLastChunk=true;_chunkLength=tag - 0x00;break;case 0x30:case 0x31:case 0x32:case 0x33:_isLastChunk=true;_chunkLength=(tag - 0x30) * 256 + read();break;default :throw expect("string",tag);}}while (length > 0) {if (_chunkLength > 0) {buffer[offset++]=(char)parseUTF8Char();_chunkLength--;length--;readLength++;} else if (_isLastChunk) {if (readLength == 0) return -1; else {_chunkLength=END_OF_DATA;return readLength;}} else {int tag=read();switch (tag) {case 'S':case BC_STRING_CHUNK:_isLastChunk=tag == 'S';_chunkLength=(read() << 8) + read();break;case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:_isLastChunk=true;_chunkLength=tag - 0x00;break;case 0x30:case 0x31:case 0x32:case 0x33:_isLastChunk=true;_chunkLength=(tag - 0x30) * 256 + read();break;default :throw expect("string",tag);}}}if (readLength == 0) return -1; else if (_chunkLength > 0 || !_isLastChunk) return readLength; else {_chunkLength=END_OF_DATA;return readLength;}}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="dvfs";  String vmSelectionPolicy="";  String parameter="";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static boolean matches(String regex,CharSequence input){  return compile(regex).matcher(input).matches();}  }
class C{  @Override public void removeMetadataListener(){  mMetadataListener=null;}  }
class C{  public static void checkEquals(String expected,BigDecimal actual){  checkEqualsWithScaleOfExpected("",new BigDecimal(expected),actual);}  }
class C{  public int compare(Object arg0,Object arg1){  if (arg0 instanceof DefaultMutableTreeNode && arg1 instanceof DefaultMutableTreeNode) {    DefaultMutableTreeNode firstNode=(DefaultMutableTreeNode)arg0;    DefaultMutableTreeNode secondNode=(DefaultMutableTreeNode)arg1;    Object o1=firstNode.getUserObject();    Object o2=secondNode.getUserObject();    if (o1 instanceof ThreadInfo && o2 instanceof ThreadInfo) {      return ((ThreadInfo)o2).getChildCount() - ((ThreadInfo)o1).getChildCount();    }    return (secondNode.getChildCount() - firstNode.getChildCount());  }  return (0);}  }
class C{  public boolean hasPendingReq(@NonNull Jedis jedis,@NonNull UUID playerUuid) throws ProcessingException {  try {    return jedis.hexists(RedisKeys.TRANSPORT.toString(),playerUuid.toString());  } catch (  Exception ex) {    throw new ProcessingException("There was an error checking if \"" + playerUuid + "\" has an owner!",ex);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ZoneRecord build(int character){  ZoneRecord zoneRecord=new ZoneRecord();  zoneRecord.numZoneData=2;  zoneRecord.zoneData=new long[]{0,0};  zoneRecord.zoneMask=0;  return zoneRecord;}  }
class C{  public Alarm(String name,AlarmListener listener,long delta,ClassLoader loader){  this(name);  setListener(listener);  setContextLoader(loader);  runAfter(delta);}  }
class C{  public static void showInfoNotification(Project project,String text){  showNotification(project,MessageType.INFO,text);}  }
class C{  public void println(boolean x){  m_Owner.append(x + m_LineFeed);}  }
class C{  public PickedObject resolvePick(DrawContext dc,Point pickPoint,Layer layer){  if (!this.hasPickableObjects())   return null;  PickedObject po=null;  if (pickPoint != null)   po=this.doResolvePick(dc,pickPoint,layer);  if (dc.getPickRectangle() != null && !dc.getPickRectangle().isEmpty())   this.doResolvePick(dc,dc.getPickRectangle(),layer);  this.clearPickList();  return po;}  }
class C{  public static void copyToKillRing(@NotNull final Editor editor,int startOffset,int endOffset,boolean cut){  Document document=editor.getDocument();  String s=document.getCharsSequence().subSequence(startOffset,endOffset).toString();  s=StringUtil.convertLineSeparators(s);  CopyPasteManager.getInstance().setContents(new KillRingTransferable(s,document,startOffset,endOffset,cut));  if (editor instanceof EditorEx) {    EditorEx ex=(EditorEx)editor;    if (ex.isStickySelection()) {      ex.setStickySelection(false);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static char[] toCharArray(CharSequence cs){  if (cs instanceof String) {    return ((String)cs).toCharArray();  } else {    int sz=cs.length();    char[] array=new char[cs.length()];    for (int i=0; i < sz; i++) {      array[i]=cs.charAt(i);    }    return array;  }}  }
class C{  public Map<URI,List<URI>> assignStoragePorts(StorageSystem storage,URI virtualArray,List<Initiator> initiators,ExportPathParams pathParams,StringSetMap existingZoningMap,Collection<URI> volumeURIs) throws DeviceControllerException {  Map<URI,List<URI>> assignmentMap=null;  boolean backend=ExportMaskUtils.areBackendInitiators(initiators);  if (!allocateFromPrezonedPortsOnly(virtualArray,storage.getSystemType(),backend)) {    try {      assignmentMap=internalAssignStoragePorts(storage,virtualArray,initiators,volumeURIs,pathParams,existingZoningMap);    } catch (    PlacementException e) {      _log.error("Unable to assign storage Ports",e);      throw DeviceControllerException.exceptions.exceptionAssigningStoragePorts(e.getMessage(),e);    }catch (    Exception e) {      _log.error("Unable to assign Storage Ports",e);      throw DeviceControllerException.exceptions.unexpectedExceptionAssigningPorts(e);    }  } else {    _log.info("Manual zoning is specified for this virtual array and the system configuration is to use " + "existing zones. Assign port storage will not add any additional ports.");    assignmentMap=new HashMap<URI,List<URI>>();  }  return assignmentMap;}  }
class C{  static char[] toCharArray(final CharSequence cs){  if (cs instanceof String) {    return ((String)cs).toCharArray();  }  final int sz=cs.length();  final char[] array=new char[cs.length()];  for (int i=0; i < sz; i++) {    array[i]=cs.charAt(i);  }  return array;}  }
class C{  private void drawSquare(Canvas canvas,Paint paint,float x,float y){  canvas.drawRect(x - size,y - size,x + size,y + size,paint);}  }
class C{  public SimplePathEnumerator enumerate(){  Iterator<Edge> entryOut=cfg.outgoingEdgeIterator(cfg.getEntry());  if (!entryOut.hasNext()) {    throw new IllegalStateException();  }  Edge entryEdge=entryOut.next();  LinkedList<Edge> init=new LinkedList<Edge>();  init.add(entryEdge);  work(init);  if (DEBUG && work == maxWork) {    System.out.println("**** Reached max work! ****");  }  return this;}  }
class C{  @Override public void dispose(){  setEditor(null);}  }
class C{  private static int minimum(int a,int b,int c){  int minimum;  minimum=a;  if (b < minimum)   minimum=b;  if (c < minimum)   minimum=c;  return minimum;}  }
class C{  public void inc(){  if (running)   inc(1);}  }
class C{  public PropertyNotFoundException(Throwable cause){  super(cause);}  }
class C{  public Page addItem(ItemStack item){  pageItems.add(item);  return this;}  }
class C{  public void updateUI(){  m_graph.updateViews();}  }
class C{  public static RowRange rowRange(Optional<ByteString> start,Optional<ByteString> end){  return new RowRange(start,end);}  }
class C{  @Override public int executeUpdate(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Vector3d fma(double a,Vector3fc b){  x+=a * b.x();  y+=a * b.y();  z+=a * b.z();  return this;}  }
class C{  protected void tearDown() throws Exception {}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void fixHyphens(){  NodeList list;  Vector<Element> hyphens;  int i;  Node node;  Node tmpNode;  boolean isLast;  list=m_XMLDocument.findNodes("//" + TAG_OPTION);  hyphens=new Vector<Element>();  for (i=0; i < list.getLength(); i++) {    if (((Element)list.item(i)).getAttribute(ATT_TYPE).equals(VAL_TYPE_HYPHENS)) {      hyphens.add((Element)list.item(i));    }  }  for (i=0; i < hyphens.size(); i++) {    node=hyphens.get(i);    isLast=true;    tmpNode=node;    while (tmpNode.getNextSibling() != null) {      if (tmpNode.getNextSibling().getNodeType() == Node.ELEMENT_NODE) {        isLast=false;        break;      }      tmpNode=tmpNode.getNextSibling();    }    if (!isLast) {      tmpNode=node.getParentNode();      tmpNode.removeChild(node);      tmpNode.appendChild(node);    }  }}  }
class C{  public boolean hasKey(String key){  return this.map.containsKey(key);}  }
class C{  @Deprecated public static String[] readStrings(String filename){  return new In(filename).readAllStrings();}  }
class C{  protected AboutAction(SwingSet2 swingset){  super("AboutAction");  this.swingset=swingset;}  }
class C{  public static long size(String fileName){  return FilePath.get(fileName).size();}  }
class C{  public void addTrainSkipsLocation(String locationId){  if (_skipLocationsList.contains(locationId)) {    return;  }  _skipLocationsList.add(0,locationId);  log.debug("train does not stop at " + locationId);  setDirtyAndFirePropertyChange(STOPS_CHANGED_PROPERTY,_skipLocationsList.size() - 1,_skipLocationsList.size());}  }
class C{  public static ArrayList<String> cleanAirprobeOutput(ArrayList<String> toProcess){  ArrayList<String> toReturn=toProcess;  for (int liste=0; liste < toReturn.size(); liste++) {    String i=toReturn.get(liste);    if (RGX_FRAME_DEC.matcher(i).matches()) {    }    if (!(RGX_FRAME_CCCH.matcher(i).matches())) {      Pattern pat=Pattern.compile("(.*)(" + RGX_PARITY + ")");      Matcher recup_err=pat.matcher(i);      if (recup_err.find() && !(recup_err.group(1).equals(""))) {        toReturn.set(liste,i.substring(0,i.length() - recup_err.group(2).length()));        toReturn.add(++liste,recup_err.group(2));      }    }    if (RGX_CONVDEC_ERR.matcher(i).matches()) {      Matcher recup_err=RGX_CONVDEC_ERR.matcher(i);      if (recup_err.find()) {        if (i.length() - recup_err.group(2).length() == 0) {          toReturn.remove(liste);          liste--;        } else {          toReturn.set(liste,i.substring(0,i.length() - recup_err.group(2).length()));        }      }    }    if (RGX_WRN_ERR.matcher(i).matches()) {      Matcher recup_err=RGX_WRN_ERR.matcher(i);      if (recup_err.find()) {        if (i.length() - recup_err.group(2).length() == 0) {          toReturn.remove(liste);          liste--;        } else {          toReturn.set(liste,i.substring(0,i.length() - recup_err.group(2).length()));        }      }    }  }  for (int liste=0; liste < toReturn.size(); liste++) {    String i=toReturn.get(liste);    int framelenght;    if (i.length() < 133 && !(RGX_WRN_ERR.matcher(i).matches() || RGX_CONVDEC_ERR.matcher(i).matches() || RGX_FRAME_DEC.matcher(i).matches()|| RGX_PARITY.matcher(i).matches()|| RGX_CANNOT_DEC.matcher(i).matches())) {      System.out.println(i + " captured");      for (int subList=liste; liste + 20 < toReturn.size() && subList < liste + 20; subList++) {        if (!(RGX_WRN_ERR.matcher(toReturn.get(subList)).matches() || RGX_CONVDEC_ERR.matcher(toReturn.get(subList)).matches() || RGX_FRAME_DEC.matcher(toReturn.get(subList)).matches()|| RGX_PARITY.matcher(toReturn.get(subList)).matches()|| RGX_CANNOT_DEC.matcher(toReturn.get(subList)).matches())) {          if (RGX_FRAME_CCCH.matcher(i + toReturn.get(subList)).matches()) {            toReturn.set(liste,i + toReturn.get(subList));            toReturn.remove(subList);          }        }      }    }  }  return toReturn;}  }
class C{  private void negotiateSSLConnection(String user,String password,String database,int packLength) throws SQLException {  if (!ExportControlled.enabled()) {    throw new ConnectionFeatureNotAvailableException(this.connection,this.lastPacketSentTimeMs,null);  }  if ((this.serverCapabilities & CLIENT_SECURE_CONNECTION) != 0) {    this.clientParam|=CLIENT_SECURE_CONNECTION;  }  this.clientParam|=CLIENT_SSL;  Buffer packet=new Buffer(packLength);  if (this.use41Extensions) {    packet.writeLong(this.clientParam);    packet.writeLong(this.maxThreeBytes);    appendCharsetByteForHandshake(packet,getEncodingForHandshake());    packet.writeBytesNoNull(new byte[23]);  } else {    packet.writeInt((int)this.clientParam);  }  send(packet,packet.getPosition());  ExportControlled.transformSocketToSSLSocket(this);}  }
class C{  public void add(Permission permission){  if (!(permission instanceof ServicePermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");synchronized (this) {    perms.add(0,permission);  }}  }
class C{  public XMLString toLowerCase(){  return new XString(str().toLowerCase());}  }
class C{  public double[] computeLocalInfoDistanceOfPreviousObservations(){  return computeLocalInfoDistanceUsingPreviousObservations(observations,true);}  }
class C{  public void removeArea(final TimeSection AREA){  if (null == AREA)   return;  areas.remove(AREA);  Collections.sort(areas,new TimeSectionComparator());  fireUpdateEvent(SECTION_EVENT);}  }
class C{  @Nullable public static NumPyDocString forFunction(@NotNull PyFunction function,@Nullable PsiElement reference){  return forFunction(function,reference,null);}  }
class C{  public UnitNumberTurn(int playerId,short unit){  super(playerId);  unitNumber=unit;}  }
class C{  private boolean isCI(){  return Objects.equals(System.getenv("CI"),"true");}  }
class C{  @Override public String scrollToPositionAtProgress(float touchFraction){  int rowCount=mApps.getNumAppRows();  if (rowCount == 0) {    return "";  }  stopScroll();  List<AlphabeticalAppsList.FastScrollSectionInfo> fastScrollSections=mApps.getFastScrollerSections();  AlphabeticalAppsList.FastScrollSectionInfo lastInfo=fastScrollSections.get(0);  for (int i=1; i < fastScrollSections.size(); i++) {    AlphabeticalAppsList.FastScrollSectionInfo info=fastScrollSections.get(i);    if (info.touchFraction > touchFraction) {      break;    }    lastInfo=info;  }  int scrollY=getScrollTop(mScrollPosState);  int availableScrollHeight=getAvailableScrollHeight(mApps.getNumAppRows());  mFastScrollHelper.smoothScrollToSection(scrollY,availableScrollHeight,lastInfo);  return lastInfo.sectionName;}  }
class C{  public void updateInventory(UpdateInventoryInput input) throws Exception {  int sleep=ran.nextInt(1000);  Thread.sleep(sleep);  System.out.println("Inventory " + input.getPartId() + " updated");}  }
class C{  public static boolean isNorthern(int quad){  return quad == NE || quad == NW;}  }
class C{  public static File taskLocalDir(UUID locNodeId,HadoopTaskInfo info) throws IgniteCheckedException {  File jobLocDir=jobLocalDir(locNodeId,info.jobId());  return new File(jobLocDir,info.type() + "_" + info.taskNumber()+ "_"+ info.attempt());}  }
class C{  public Uri addIncomingGeolocSharing(ContactId contact,String sharingId,GeolocSharing.State state,GeolocSharing.ReasonCode reasonCode,long timestamp){  ContentValues values=new ContentValues();  values.put(GeolocSharingData.KEY_SHARING_ID,sharingId);  values.put(GeolocSharingData.KEY_CONTACT,contact.toString());  values.put(GeolocSharingData.KEY_MIME_TYPE,MimeType.GEOLOC_MESSAGE);  values.put(GeolocSharingData.KEY_DIRECTION,Direction.INCOMING.toInt());  values.put(GeolocSharingData.KEY_STATE,state.toInt());  values.put(GeolocSharingData.KEY_REASON_CODE,reasonCode.toInt());  values.put(GeolocSharingData.KEY_TIMESTAMP,timestamp);  return mLocalContentResolver.insert(GeolocSharingData.CONTENT_URI,values);}  }
class C{  @Bean(name=CacheConstants.DOWNLOAD_ID_CACHE) public Cache downloadIdCache(){  if (cacheManager instanceof TenancyCacheManager) {    return ((TenancyCacheManager)cacheManager).getDirectCache(CacheConstants.DOWNLOAD_ID_CACHE);  }  return cacheManager.getCache(CacheConstants.DOWNLOAD_ID_CACHE);}  }
class C{  public void prePreBreedingExchangeStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].prePreBreedingExchangeStatistics(state);}  }
class C{  public static MGRSPoint LLtoMGRS(LatLonPoint llpoint,MGRSPoint mgrsp){  return LLtoMGRS(llpoint,Ellipsoid.WGS_84,mgrsp);}  }
class C{  private void onTrigger7(){  addInstruction(R.string.accessibility_tutorial_lesson_5_text_8,true,getContext().getString(R.string.accessibility_tutorial_finish));}  }
class C{  private void loadAgentVocabularies(){  languages=vocabManager.getI18nVocab(Constants.VOCAB_URI_LANGUAGE,getLocaleLanguage(),true);  countries=new LinkedHashMap<String,String>();  countries.put("",getText("eml.country.selection"));  countries.putAll(vocabManager.getI18nVocab(Constants.VOCAB_URI_COUNTRY,getLocaleLanguage(),true));  roles=new LinkedHashMap<String,String>();  roles.put("",getText("eml.agent.role.selection"));  roles.putAll(vocabManager.getI18nVocab(Constants.VOCAB_URI_ROLES,getLocaleLanguage(),false));  if (resource != null && resource.getEml() != null) {    Agent current=new Agent();    current.setFirstName(getCurrentUser().getFirstname());    current.setLastName(getCurrentUser().getLastname());    current.setEmail(getCurrentUser().getEmail());    Agent firstContact=null;    if (!resource.getEml().getContacts().isEmpty()) {      for (      Agent contact : resource.getEml().getContacts()) {        if (firstContact == null) {          firstContact=contact;        }        String countryValue=contact.getAddress().getCountry();        if (countryValue != null) {          ParseResult<Country> result=COUNTRY_PARSER.parse(countryValue);          if (result.isSuccessful()) {            contact.getAddress().setCountry(result.getPayload().getIso2LetterCode());          }        }      }    }    if (firstContact == null) {      firstContact=new Agent();    }    if (firstContact.getUserIds().isEmpty()) {      firstContact.setUserIds(Lists.newArrayList(new UserId()));    }    setPrimaryContact(firstContact);    if (!resource.getEml().getCreators().isEmpty()) {      for (      Agent creator : resource.getEml().getCreators()) {        String countryValue=creator.getAddress().getCountry();        if (countryValue != null) {          ParseResult<Country> result=COUNTRY_PARSER.parse(countryValue);          creator.getAddress().setCountry(result.getPayload().getIso2LetterCode());        }      }    }    if (!resource.getEml().getMetadataProviders().isEmpty()) {      for (      Agent metadataProvider : resource.getEml().getMetadataProviders()) {        String countryValue=metadataProvider.getAddress().getCountry();        if (countryValue != null) {          ParseResult<Country> result=COUNTRY_PARSER.parse(countryValue);          metadataProvider.getAddress().setCountry(result.getPayload().getIso2LetterCode());        }      }    } else {      resource.getEml().addMetadataProvider(current);    }    if (!resourceManager.isEmlExisting(resource.getShortname()) && resource.getEml().getAssociatedParties().isEmpty()) {      current.setRole("user");      resource.getEml().getAssociatedParties().add(current);    } else     if (!resource.getEml().getAssociatedParties().isEmpty()) {      for (      Agent party : resource.getEml().getAssociatedParties()) {        String countryValue=party.getAddress().getCountry();        if (countryValue != null) {          ParseResult<Country> result=COUNTRY_PARSER.parse(countryValue);          if (result.isSuccessful()) {            party.getAddress().setCountry(result.getPayload().getIso2LetterCode());          }        }      }    }  }}  }
class C{  public static RelationalOpExpression neq(String propertyName,Object value){  return new RelationalOpExpression(getPropExpr(propertyName),"!=",new ConstantExpression(value));}  }
class C{  public void loadDefaults(Object[] keysAndValues){  for (int i=keysAndValues.length - 2; i >= 0; i=i - 2) {    if (UIManager.getLookAndFeelDefaults().get(keysAndValues[i]) == null) {      UIManager.getLookAndFeelDefaults().put(keysAndValues[i],keysAndValues[i + 1]);    }  }}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  private void checkLaunchCoordinator(DiscoveryEvent discoEvt){  rw.readLock();  try {    if (stopping)     return;    if (fragmentizerCrd == null) {      long minNodeOrder=Long.MAX_VALUE;      Collection<ClusterNode> nodes=discoEvt.topologyNodes();      for (      ClusterNode node : nodes) {        if (node.order() < minNodeOrder && igfsCtx.igfsNode(node))         minNodeOrder=node.order();      }      ClusterNode locNode=igfsCtx.kernalContext().grid().localNode();      if (locNode.order() == minNodeOrder) {        if (log.isDebugEnabled())         log.debug("Detected local node to be the eldest IGFS node in topology, starting fragmentizer " + "coordinator thread [discoEvt=" + discoEvt + ", locNode="+ locNode+ ']');synchronized (this) {          if (fragmentizerCrd == null && !stopping) {            fragmentizerCrd=new FragmentizerCoordinator();            new IgniteThread(fragmentizerCrd).start();          }        }      }    }  }  finally {    rw.readUnlock();  }}  }
class C{  public static void cancelByTag(String tag){  netClient.cancel(tag);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public String toString(){  return String.format("%-10s %10s %8.2f",who,when,amount);}  }
class C{  public void saveDimensions(String filePath){  NBTTagCompound nbt=new NBTTagCompound();  NBTTagCompound dimListnbt=new NBTTagCompound();  NBTTagCompound solarSystem=new NBTTagCompound();  for (  Entry<Integer,StellarBody> stars : starList.entrySet()) {    NBTTagCompound solarNBT=new NBTTagCompound();    stars.getValue().writeToNBT(solarNBT);    solarSystem.setTag(stars.getKey().toString(),solarNBT);  }  nbt.setTag("starSystems",solarSystem);  nbt.setLong("nextSatelliteId",nextSatelliteId);  NBTTagCompound dimNbt=new NBTTagCompound();  overworldProperties.writeToNBT(dimNbt);  dimListnbt.setTag("0",dimNbt);  for (  Entry<Integer,DimensionProperties> dimSet : dimensionList.entrySet()) {    dimNbt=new NBTTagCompound();    dimSet.getValue().writeToNBT(dimNbt);    dimListnbt.setTag(dimSet.getKey().toString(),dimNbt);  }  nbt.setTag("dimList",dimListnbt);  NBTTagCompound stats=new NBTTagCompound();  stats.setBoolean("hasReachedMoon",hasReachedMoon);  stats.setBoolean("hasReachedWarp",hasReachedWarp);  nbt.setTag("stat",stats);  NBTTagCompound nbtTag=new NBTTagCompound();  SpaceObjectManager.getSpaceManager().writeToNBT(nbtTag);  nbt.setTag("spaceObjects",nbtTag);  FileOutputStream outStream;  try {    File file=new File(net.minecraftforge.common.DimensionManager.getCurrentSaveRootDirectory(),filePath);    if (!file.exists())     file.createNewFile();    outStream=new FileOutputStream(file);    CompressedStreamTools.writeCompressed(nbt,outStream);    outStream.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public int hashCode(){  int hash=1;  hash=hash * 31 + (this.getId() == null ? 0 : this.getId().hashCode());  hash=hash + (this.getVersion() == null ? 0 : this.getVersion().hashCode());  return hash;}  }
class C{  public static void CF5(double[] x,double[] f,double[] c,int nx){  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    if (j % 2 == 1) {      yj=x[j - 1] - 0.8 * x[0] * Math.cos(6.0 * PI * x[0] + j * PI / nx);      sum1+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;    } else {      yj=x[j - 1] - 0.8 * x[0] * Math.sin(6.0 * PI * x[0] + j * PI / nx);      if (j == 2) {        sum2+=yj < 1.5 - 0.75 * Math.sqrt(2.0) ? Math.abs(yj) : (0.125 + (yj - 1) * (yj - 1));      } else {        sum2+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;      }    }  }  f[0]=x[0] + sum1;  f[1]=1.0 - x[0] + sum2;  c[0]=x[1] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - 0.5 * x[0] + 0.25;}  }
class C{  public int size(){  return super.size();}  }
class C{  protected void forwardCommandChangeToLayout(int s){  if ((s & Turnout.CLOSED) != 0) {    if ((s & Turnout.THROWN) != 0) {      log.error("Cannot command both CLOSED and THROWN " + s);      return;    } else {      sendMessage(true ^ getInverted());    }  } else {    sendMessage(false ^ getInverted());  }}  }
class C{  private void creatureCheck(int x,int y){  if (!isCreature(x,y)) {    String msg=String.format("Tried to get creature from " + "(%d, %d), but no creature exists at that spot.",x,y);    throw new IllegalArgumentException(msg);  }}  }
class C{  @Override public void addDimension(int index,double value){  throw new RuntimeException("Not implemented for wrapper.");}  }
class C{  public void addElement(Element ne){  ((ListElement)e).addElement(new TableDataElement(ne));}  }
class C{  public static void writeIndex(String fileName,Analyzer luceneAnalyzer,String indexType) throws Exception {  DataStore dataStore=null;  if (indexType.equalsIgnoreCase("trigram")) {    dataStore=new DataStore(getTrigramIndexPath(fileName.replace(".txt","")),MedlineIndexWriter.SCHEMA_MEDLINE);  } else   if (indexType.equalsIgnoreCase("standard")) {    dataStore=new DataStore(getIndexPath(fileName.replace(".txt","")),MedlineIndexWriter.SCHEMA_MEDLINE);  } else {    System.out.println("Index is not successfully written.");    System.out.println("IndexType has to be either \"standard\" or \"trigram\"  ");    return;  }  Engine writeIndexEngine=Engine.getEngine();  writeIndexEngine.evaluate(MedlineIndexWriter.getMedlineIndexPlan(fileFolder + fileName,dataStore,luceneAnalyzer));}  }
class C{  public MaximizeAction(){  super(UIManager.getString("BETitlePane.maximizeButtonText",getLocale()));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @RequestMapping(value="/property/updateProperty",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON,produces=MediaType.APPLICATION_JSON) public String updateProperty(@RequestBody String createPropertyDetails) throws IOException, ParseException {  String responseJson=StringUtils.EMPTY;  ApplicationThreadLocals.setUserId(2L);  CreatePropertyDetails createPropDetails=(CreatePropertyDetails)getObjectFromJSONRequest(createPropertyDetails,CreatePropertyDetails.class);  ErrorDetails errorDetails=validationUtil.validateCreateRequest(createPropDetails,PropertyTaxConstants.PROPERTY_MODE_MODIFY);  if (errorDetails != null) {    responseJson=JsonConvertor.convert(errorDetails);  } else {    ViewPropertyDetails viewPropertyDetails=setRequestParameters(createPropDetails);    NewPropertyDetails newPropertyDetails=propertyExternalService.updateProperty(viewPropertyDetails);    responseJson=JsonConvertor.convert(newPropertyDetails);  }  return responseJson;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.METHOD_BODY___ANONYMOUS_METHOD_BODY_11:    getAnonymous_methodBody_1_1().clear();  return;case UmplePackage.METHOD_BODY___CODE_1:setCode_1(CODE_1_EDEFAULT);return;case UmplePackage.METHOD_BODY___ANONYMOUS_METHOD_BODY_21:getAnonymous_methodBody_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.TYPE_TYPE_REF__TYPE_ARG:    return getTypeArg();case TypeRefsPackage.TYPE_TYPE_REF__CONSTRUCTOR_REF:  return isConstructorRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ToStringBuilder append(String fieldName,char[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public void addSinglePathResolver(int index,SinglePathResolver resolver){  assert resolver != null;  if (bases == null) {    bases=new ArrayList<SinglePathResolver>();  }  bases.add(index,resolver);}  }
class C{  public BinaryHeap(int n){  _n=0;  _elements=new Object[n + 1];  for (int k=0; k < n + 1; k++) {    _elements[k]=new ElementH();  }  _pos=new int[n + 1];}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public final void tunnelTarget(boolean secure){  if (!this.connected) {    throw new IllegalStateException("No tunnel unless connected.");  }  if (this.proxyChain == null) {    throw new IllegalStateException("No tunnel without proxy.");  }  this.tunnelled=TunnelType.TUNNELLED;  this.secure=secure;}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public Builder<T> store(final ChunkedHashStore<T> chunkedHashStore){  this.chunkedHashStore=chunkedHashStore;  return this;}  }
class C{  public void done(){}  }
class C{  protected void fireCommentEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_COMMENT,new String(chars,start,length));  }}  }
class C{  public void addLink(TopologicalLink edge){  linkList.add(edge);}  }
class C{  public static boolean isDefinedNSDecl(SerializationHandler serializer,int attr,DTM dtm){  if (DTM.NAMESPACE_NODE == dtm.getNodeType(attr)) {    String prefix=dtm.getNodeNameX(attr);    String uri=serializer.getNamespaceURIFromPrefix(prefix);    if ((null != uri) && uri.equals(dtm.getStringValue(attr)))     return true;  }  return false;}  }
class C{  public boolean hasDestination(){  return hasExtension(Destination.class);}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;}  }
class C{  private SynapseGroupDialog(final NetworkPanel np,final SynapseGroup sg){  networkPanel=np;  synapseGroup=sg;  init();}  }
class C{  public QuestionStep(String identifier,String title){  super(identifier,title);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.156 -0400",hash_original_method="4276555C70F21953C97B2894725A8F05",hash_generated_method="B783FCAA93D26A5952251AD52CA88D25") private void positionIcon(){  if (mIcon == null) {    return;  }  Rect tmpRect=mPositionIconOutput;  getLineBounds(0,tmpRect);  mPositionIconAvailable.set(0,0,getWidth(),tmpRect.top);  final int layoutDirection=getResolvedLayoutDirection();  Gravity.apply(Gravity.CENTER_VERTICAL | Gravity.LEFT,mIcon.getIntrinsicWidth(),mIcon.getIntrinsicHeight(),mPositionIconAvailable,mPositionIconOutput,layoutDirection);  mIcon.setBounds(mPositionIconOutput);}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  private void handleImageMapArea(HTMLElement areaTag){  if (curImageMap != null) {    String shape=areaTag.getAttributeById(HTMLElement.ATTR_SHAPE);    boolean supportedShape=false;    if (shape != null) {      String hrefStr=areaTag.getAttributeById(HTMLElement.ATTR_HREF);      if (shape.equalsIgnoreCase("default")) {        supportedShape=true;        curImageMap.setDefaultLink(hrefStr);      } else       if ((shape.equalsIgnoreCase("rect")) || (shape.equalsIgnoreCase("circle"))) {        supportedShape=true;        String coordsStr=areaTag.getAttributeById(HTMLElement.ATTR_COORDS);        if ((coordsStr != null) && (hrefStr != null)) {          String curValStr="";          int coords[]=new int[4];          int curCoord=0;          boolean error=true;          try {            for (int c=0; c < coordsStr.length(); c++) {              char ch=coordsStr.charAt(c);              if (ch != ',') {                curValStr+=ch;              } else {                coords[curCoord]=Integer.parseInt(curValStr);                curCoord++;                curValStr="";              }            }            if (curValStr.length() > 0) {              coords[curCoord]=Integer.parseInt(curValStr);              curCoord++;            }            if (shape.equalsIgnoreCase("rect")) {              if (curCoord == 4) {                curImageMap.addRectArea(new Rectangle(coords[0],coords[1],coords[2] - coords[0],coords[3] - coords[1]),hrefStr);                error=false;              }            } else             if (curCoord == 3) {              curImageMap.addRectArea(new Rectangle(coords[0] - coords[2],coords[1] - coords[2],coords[2] * 2 + 1,coords[2] * 2 + 1),hrefStr);              error=false;            }          } catch (          Exception e) {          }          if (error) {            notifyImageMapError("AREA tag 'coords' property value is invalid (should be exactly 3 comma seperated numbers for circle, 4 for rectangle): " + coordsStr,HTMLCallback.ERROR_ATTIBUTE_VALUE_INVALID,HTMLElement.ATTR_COORDS,coordsStr);          }        }      }    }    if (!supportedShape) {      notifyImageMapError("Unsupported or missing AREA tag 'shape' property: " + shape,HTMLCallback.ERROR_ATTIBUTE_VALUE_INVALID,HTMLElement.ATTR_SHAPE,shape);    }  } else {    notifyImageMapError("AREA tag is defined without a parent MAP tag - ignoring",HTMLCallback.ERROR_INVALID_TAG_HIERARCHY,-1,null);  }}  }
class C{  protected boolean expireOrUpdate(long expVal,ThreadIdentifier ti){  boolean expired=false;synchronized (this) {    if (expVal == this.lastDispatchedSequenceId && isCountersEmpty()) {      try {        owningQueue.destroyFromQueue(ti);        this.lastDispatchedSequenceId=TOKEN_DESTROYED;        owningQueue.eventsMap.remove(ti);        expired=true;        this.owningQueue.getStatistics().decThreadIdentifiers();      } catch (      RegionDestroyedException ignore) {        if (!owningQueue.destroyInProgress && logger.isDebugEnabled()) {          logger.debug("DispatchedAndCurrentEvents::expireOrUpdate: Queue found destroyed while removing expiry entry for ThreadIdentifier={} and expiry value={}",ti,expVal,ignore);        }      }catch (      EntryNotFoundException enfe) {        if (!owningQueue.destroyInProgress) {          logger.error(LocalizedMessage.create(LocalizedStrings.HARegionQueue_DISPATCHEDANDCURRENTEVENTSEXPIREORUPDATE_UNEXPECTEDLY_ENCOUNTERED_EXCEPTION_WHILE_REMOVING_EXPIRY_ENTRY_FOR_THREADIDENTIFIER_0_AND_EXPIRY_VALUE_1,new Object[]{ti,Long.valueOf(expVal),enfe}));        }      }    }  }  if (!expired) {    try {      owningQueue.region.put(ti,Long.valueOf(this.lastDispatchedSequenceId));    } catch (    CancelException e) {      throw e;    }catch (    Exception e) {      if (!owningQueue.destroyInProgress) {        logger.error(LocalizedMessage.create(LocalizedStrings.HARegionQueue_DISPATCHEDANDCURRENTEVENTSEXPIREORUPDATE_UNEXPECTEDLY_ENCOUNTERED_EXCEPTION_WHILE_UPDATING_EXPIRY_ID_FOR_THREADIDENTIFIER_0,ti),e);      }    }  }  return expired;}  }
class C{  @Override public void showMessage(String message,boolean error){  if (!error)   JOptionPane.showMessageDialog(null,message,"Info",JOptionPane.INFORMATION_MESSAGE); else   ADialog.error(m_WindowNo,panel,"Error",message);}  }
class C{  public GOV4Function<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  if (transform == null) {    if (chunkedHashStore != null)     transform=chunkedHashStore.transform(); else     throw new IllegalArgumentException("You must specify a TransformationStrategy, either explicitly or via a given ChunkedHashStore");  }  return new GOV4Function<T>(keys,transform,signatureWidth,values,outputWidth,tempDir,chunkedHashStore,indirect);}  }
class C{  public static String string(int i){  return flags.getText(i);}  }
class C{  private void initPath(){  ConfigFilePathResolverIsicres filePathResolver=ConfigFilePathResolverIsicres.getInstance();  isicresEventsConfigurationPath=filePathResolver.getISicresConfigurationEventsPath();}  }
class C{  protected AnimatablePaintValue(AnimationTarget target,float r,float g,float b){  super(target,r,g,b);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter list1: ");  int[] list1=new int[input.nextInt()];  for (int i=0; i < list1.length; i++) {    list1[i]=input.nextInt();  }  System.out.print("Enter list2: ");  int[] list2=new int[input.nextInt()];  for (int i=0; i < list2.length; i++) {    list2[i]=input.nextInt();  }  int[] list3=merge(list1,list2);  System.out.print("The merged list is");  for (  int e : list3) {    System.out.print(" " + e);  }  System.out.println();}  }
class C{  public boolean remove(int key,Object value){  if (value == null) {    return false;  }synchronized (this) {    Object[] arr=array;    if (arr.length <= key) {      return false;    }    E prev=(E)arr[key];    if (prev.equals(value)) {      arr[key]=null;      array=arr;      size--;      return true;    }    return false;  }}  }
class C{  public static RecognitionFragment newInstance(){  return new RecognitionFragment();}  }
class C{  private void attemptClaimDrag(){  mParent=getParent();  if (mParent != null) {    mParent.requestDisallowInterceptTouchEvent(true);  }}  }
class C{  private static boolean arrayEquals(Object a1,Object a2){  int len;  if ((len=Array.getLength(a1)) != Array.getLength(a2))   return false;  for (int j=0; j < len; j++) {    Object i1=Array.get(a1,j);    Object i2=Array.get(a2,j);    if (i1 == null || i2 == null) {      if (i1 != i2)       return false;    } else     if (!i1.equals(i2)) {      return false;    }  }  return true;}  }
class C{  public void fillConditionalHoles(){  ValueRange possibleCondPairs=new ValueRange(table.keySet());  if (possibleCondPairs.getNbCombinations() < 500) {    Set<Assignment> possibleCondAssignments=possibleCondPairs.linearise();    possibleCondAssignments.remove(new Assignment());    for (    Assignment possibleCond : possibleCondAssignments) {      if (!table.containsKey(possibleCond)) {        addRow(possibleCond,ValueFactory.none(),1.0);      }    }  }}  }
class C{  public boolean isWaitingForReply(){  return waitingForReply;}  }
class C{  public final static <T>Optional<ListX<T>> streamToOptional(final Stream<T> stream){  final List<T> collected=stream.collect(Collectors.toList());  if (collected.size() == 0)   return Optional.empty();  return Optional.of(ListX.fromIterable(collected));}  }
class C{  private static String quote(final String value){  return quote(value,"\"","\"");}  }
class C{  public <T>Tuple4<T,A,B,C> prepend(T t){  return Tuple4.of(t,_1,_2,_3);}  }
class C{  public JPasswordField(){  this(null,null,0);}  }
class C{  @Override public void zoomOut(){}  }
class C{  @Override public void updateBlob(int columnIndex,Blob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + columnIndex + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createBlob(x.getBinaryStream(),-1);    }    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static MetaData forIOObject(IOObject ioo,boolean shortened){  return MetaDataFactory.getInstance().createMetaDataforIOObject(ioo,shortened);}  }
class C{  public boolean isEndingLegMode(){  return (getCurrentLinkRoute().length == getLinkIndex());}  }
class C{  final public boolean endsWithIgnoreCase(final CharSequence suffix){  final int l=suffix.length();  int length=length();  if (l > length)   return false;  int i=l;  final char[] a=array;  char c, d;  while (i-- != 0) {    c=Character.toLowerCase(Character.toUpperCase(suffix.charAt(i)));    d=Character.toLowerCase(Character.toUpperCase(a[--length]));    if (c != d)     return false;  }  return true;}  }
class C{  public static void fourn(double[] data,int[] nn,int isign){  com.nr.fft.FFT.fourn(data,nn,isign);}  }
class C{  public static void closeQuietly(OutputStream os){  if (os != null) {    try {      os.flush();    } catch (    Exception e) {    }    try {      os.close();    } catch (    Exception e) {    }  }}  }
class C{  protected SVGURIReferenceTextPositioningElement(){}  }
class C{  @Override public String toString(){  return toStringBuilder().toString();}  }
class C{  public void incrementCount(){  this.count++;}  }
class C{  private static String convertToQuotedString(String string){  if (string == null || string.length() == 0) {    return null;  }  if (string.charAt(0) == '"' && string.charAt(string.length() - 1) == '"') {    return string;  }  return '\"' + string + '\"';}  }
class C{  private void push(final short value){  stack[++top]=value;  sendData();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String menuName=getString(stack);  UIManager uiMgr=stack.getUIMgrSafe();  if (uiMgr != null) {    Widget nextUI=uiMgr.getMenuTransitionTarget();    return (nextUI != null && (menuName == null || nextUI.getName().equalsIgnoreCase(menuName))) ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  private void start(){  stdError.start();  copier.start();}  }
class C{  public SchemaCommand(Session session,Schema schema){  super(session);  this.schema=schema;}  }
class C{  public boolean addAll(Collection<? extends E> c){  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityInternal(size + numNew);  System.arraycopy(a,0,elementData,size,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  public static void printVector(final double[] da){  for (int i=0; i < da.length; i++) {    System.out.print(da[i] + " ");  }  System.out.println("");}  }
class C{  static void testBytes(int numBytes,long expectedCount) throws UnsupportedEncodingException {  testBytes(numBytes,expectedCount,0,-1);}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public void generate(java.io.Writer out) throws java.io.IOException {  for (Enumeration e=v.elements(); e.hasMoreElements(); )   ((Element)e.nextElement()).generate(out);}  }
class C{  public RtcpPacket parseRtcpPacket(Packet packet){  RtcpCompoundPacket compoundPacket=new RtcpCompoundPacket(packet);  Vector<RtcpPacket> subpackets=new Vector<RtcpPacket>();  DataInputStream in=new DataInputStream(new ByteArrayInputStream(compoundPacket.data,compoundPacket.offset,compoundPacket.length));  try {    rtcpSession.updateavgrtcpsize(compoundPacket.length);    int length=0;    for (int offset=0; offset < compoundPacket.length; offset+=length) {      int firstbyte=in.readUnsignedByte();      if ((firstbyte & 0xc0) != 128) {        return null;      }      int type=in.readUnsignedByte();      length=in.readUnsignedShort();      length=length + 1 << 2;      int padlen=0;      if (offset + length > compoundPacket.length) {        return null;      }      if (offset + length == compoundPacket.length) {        if ((firstbyte & 0x20) != 0) {          padlen=compoundPacket.data[compoundPacket.offset + compoundPacket.length - 1] & 0xff;          if (padlen == 0) {            return null;          }        }      } else       if ((firstbyte & 0x20) != 0) {        return null;      }      int inlength=length - padlen;      firstbyte&=0x1f;      RtcpPacket subpacket;switch (type) {case RtcpPacket.RTCP_SR:        stats.numSrPkts++;      if (inlength != 28 + 24 * firstbyte) {        stats.numMalformedRtcpPkts++;        return null;      }    RtcpSenderReportPacket srp=new RtcpSenderReportPacket(compoundPacket);  subpacket=srp;srp.ssrc=in.readInt();srp.ntptimestampmsw=(long)in.readInt() & 0xffffffffL;srp.ntptimestamplsw=(long)in.readInt() & 0xffffffffL;srp.rtptimestamp=(long)in.readInt() & 0xffffffffL;srp.packetcount=(long)in.readInt() & 0xffffffffL;srp.octetcount=(long)in.readInt() & 0xffffffffL;srp.reports=new RtcpReport[firstbyte];RtpSource sourceSR=rtcpSession.getMySource();if (sourceSR != null) {sourceSR.receivedSenderReport(srp);}for (int i=0; i < srp.reports.length; i++) {RtcpReport report=new RtcpReport();srp.reports[i]=report;report.ssrc=in.readInt();long val=in.readInt();val&=0xffffffffL;report.fractionlost=(int)(val >> 24);report.packetslost=(int)(val & 0xffffffL);report.lastseq=(long)in.readInt() & 0xffffffffL;report.jitter=in.readInt();report.lsr=(long)in.readInt() & 0xffffffffL;report.dlsr=(long)in.readInt() & 0xffffffffL;}notifyRtcpListeners(new RtcpSenderReportEvent(srp));break;case RtcpPacket.RTCP_RR:if (inlength != 8 + 24 * firstbyte) {stats.numMalformedRtcpPkts++;return null;}RtcpReceiverReportPacket rrp=new RtcpReceiverReportPacket(compoundPacket);subpacket=rrp;rrp.ssrc=in.readInt();rrp.reports=new RtcpReport[firstbyte];for (int i=0; i < rrp.reports.length; i++) {RtcpReport report=new RtcpReport();rrp.reports[i]=report;report.ssrc=in.readInt();long val=in.readInt();val&=0xffffffffL;report.fractionlost=(int)(val >> 24);report.packetslost=(int)(val & 0xffffffL);report.lastseq=(long)in.readInt() & 0xffffffffL;report.jitter=in.readInt();report.lsr=(long)in.readInt() & 0xffffffffL;report.dlsr=(long)in.readInt() & 0xffffffffL;}notifyRtcpListeners(new RtcpReceiverReportEvent(rrp));break;case RtcpPacket.RTCP_SDES:RtcpSdesPacket sdesp=new RtcpSdesPacket(compoundPacket);subpacket=sdesp;sdesp.sdes=new RtcpSdesBlock[firstbyte];int sdesoff=4;for (int i=0; i < sdesp.sdes.length; i++) {RtcpSdesBlock chunk=new RtcpSdesBlock();sdesp.sdes[i]=chunk;chunk.ssrc=in.readInt();sdesoff+=5;Vector<RtcpSdesItem> items=new Vector<RtcpSdesItem>();boolean gotcname=false;int j;while ((j=in.readUnsignedByte()) != 0) {if (j < 1 || j > 8) {stats.numMalformedRtcpPkts++;return null;}if (j == 1) {gotcname=true;}RtcpSdesItem item=new RtcpSdesItem();items.addElement(item);item.type=j;int sdeslen=in.readUnsignedByte();item.data=new byte[sdeslen];in.readFully(item.data);sdesoff+=2 + sdeslen;}if (!gotcname) {stats.numMalformedRtcpPkts++;return null;}chunk.items=new RtcpSdesItem[items.size()];items.copyInto(chunk.items);if ((sdesoff & 3) != 0) {if (in.skip(4 - (sdesoff & 3)) != 4 - (sdesoff & 3)) {return null;}sdesoff=sdesoff + 3 & -4;}}if (inlength != sdesoff) {stats.numMalformedRtcpPkts++;return null;}notifyRtcpListeners(new RtcpSdesEvent(sdesp));break;case RtcpPacket.RTCP_BYE:RtcpByePacket byep=new RtcpByePacket(compoundPacket);subpacket=byep;byep.ssrc=new int[firstbyte];for (int i=0; i < byep.ssrc.length; i++) {byep.ssrc[i]=in.readInt();}int reasonlen;if (inlength > 4 + 4 * firstbyte) {reasonlen=in.readUnsignedByte();byep.reason=new byte[reasonlen];reasonlen++;} else {reasonlen=0;byep.reason=new byte[0];}reasonlen=reasonlen + 3 & -4;if (inlength != 4 + 4 * firstbyte + reasonlen) {stats.numMalformedRtcpPkts++;return null;}in.readFully(byep.reason);int skipBye=reasonlen - byep.reason.length;if (in.skip(skipBye) != skipBye) {return null;}notifyRtcpListeners(new RtcpByeEvent(byep));break;case RtcpPacket.RTCP_APP:if (inlength < 12) {return null;}RtcpAppPacket appp=new RtcpAppPacket(compoundPacket);subpacket=appp;appp.ssrc=in.readInt();appp.name=in.readInt();appp.subtype=firstbyte;appp.data=new byte[inlength - 12];in.readFully(appp.data);int skipApp=inlength - 12 - appp.data.length;if (in.skip(skipApp) != skipApp) {return null;}notifyRtcpListeners(new RtcpApplicationEvent(appp));break;default :stats.numUnknownTypes++;return null;}subpacket.offset=offset;subpacket.length=length;subpackets.addElement(subpacket);if (in.skipBytes(padlen) != padlen) {return null;}}} catch (Exception e) {return null;}compoundPacket.packets=new RtcpPacket[subpackets.size()];subpackets.copyInto(compoundPacket.packets);return compoundPacket;}  }
class C{  private boolean isSupported(){  return WebSocket.isSupported();}  }
class C{  public void writeRawVarint64(long value) throws IOException {  while (true) {    if ((value & ~0x7FL) == 0) {      writeRawByte((int)value);      return;    } else {      writeRawByte(((int)value & 0x7F) | 0x80);      value>>>=7;    }  }}  }
class C{  public ServiceAlreadyExistsException(){}  }
class C{  @Override public boolean isEndElement(){  log.log(Level.FINE,"isEndElement(): {0}",event == END_ELEMENT);  return event == END_ELEMENT;}  }
class C{  public boolean isVariable(){  return hasRelationship(Primitive.INSTANTIATION,Primitive.VARIABLE);}  }
class C{  @Deprecated protected void notifyPathChange(Vector<?> changedPaths,TreePath oldLeadSelection){  int cPathCount=changedPaths.size();  boolean[] newness=new boolean[cPathCount];  TreePath[] paths=new TreePath[cPathCount];  PathPlaceHolder placeholder;  for (int counter=0; counter < cPathCount; counter++) {    placeholder=(PathPlaceHolder)changedPaths.elementAt(counter);    newness[counter]=placeholder.isNew;    paths[counter]=placeholder.path;  }  TreeSelectionEvent event=new TreeSelectionEvent(this,paths,newness,oldLeadSelection,leadPath);  fireValueChanged(event);}  }
class C{  public synchronized int updatePurchase(String orderId,String productId,PurchaseState purchaseState,long purchaseTime,String developerPayload){  insertOrder(orderId,productId,purchaseState,purchaseTime,developerPayload);  Cursor cursor=mDb.query(PURCHASE_HISTORY_TABLE_NAME,HISTORY_COLUMNS,HISTORY_PRODUCT_ID_COL + "=?",new String[]{productId},null,null,null,null);  if (cursor == null) {    return 0;  }  int quantity=0;  try {    while (cursor.moveToNext()) {      int stateIndex=cursor.getInt(2);      PurchaseState state=PurchaseState.valueOf(stateIndex);      if (state == PurchaseState.PURCHASED || state == PurchaseState.REFUNDED) {        quantity+=1;      }    }    updatePurchasedItem(productId,quantity);  }  finally {    if (cursor != null) {      cursor.close();    }  }  return quantity;}  }
class C{  public void addSynapseNode(SynapseNode node){  outlinedObjects.addChild(node);}  }
class C{  public BitcoinController(CoreController coreController){  super(coreController);  this.walletBusyListeners=new ArrayList<WalletBusyListener>();  this.fileHandler=new FileHandler(this);  this.eventHandler=new EventHandler(this);  this.peerEventListener=new BitcoinPeerEventListener(this);  this.addEventHandler(this.getEventHandler());}  }
class C{  public static List<NodePair> allNodePairs(List<Node> nodes){  List<NodePair> nodePairs=new ArrayList<>();  for (int j=0; j < nodes.size() - 1; j++) {    for (int k=j + 1; k < nodes.size(); k++) {      nodePairs.add(new NodePair(nodes.get(j),nodes.get(k)));    }  }  return nodePairs;}  }
class C{  public static Optional<String> validateCanal(final Territory territory,final Route route,final Collection<Unit> units,final PlayerID player,final GameData data){  Optional<String> failureMessage=Optional.empty();  final Set<CanalAttachment> canalAttachments=CanalAttachment.get(territory);  for (  final CanalAttachment canalAttachment : canalAttachments) {    if (!isCanalOnRoute(canalAttachment,route,data)) {      continue;    }    failureMessage=canPassThroughCanal(canalAttachment,units,player,data);    final boolean canPass=!failureMessage.isPresent();    if ((!Properties.getControlAllCanalsBetweenTerritoriesToPass(data) && canPass) || (Properties.getControlAllCanalsBetweenTerritoriesToPass(data) && !canPass)) {      break;    }  }  return failureMessage;}  }
class C{  public void copyResources(String... resources) throws IOException {  getResourcesDir();  for (  String resource : resources) {    final int lastSep=resource.lastIndexOf('/');    final String fileName;    if (lastSep == -1) {      fileName=resource;    } else {      fileName=resource.substring(lastSep);    }    FileUtils.copyResource(resource,new File(mResourcesDir,fileName));  }}  }
class C{  public boolean needLogoutResponse(){  return (this.getSamlRequest() != null);}  }
class C{  public static int computeMessageSetExtensionSize(final int fieldNumber,final MessageLite value){  return computeTagSize(WireFormat.MESSAGE_SET_ITEM) * 2 + computeUInt32Size(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber) + computeMessageSize(WireFormat.MESSAGE_SET_MESSAGE,value);}  }
class C{  private static void downloadAll(SearchResultDataLine[] lines){  if (lines == null || lines.length == 0) {    return;  }  GUIMediator.instance().showTransfers(TransfersTab.FilterMode.DOWNLOADING);  for (int i=0; i < lines.length; i++) {    if (lines[i] != null) {      downloadLine(lines[i]);    }  }}  }
class C{  public void normalizeDocument(){}  }
class C{  protected static void fail(){  System.exit(1);}  }
class C{  public void verifyWarn(String substring){  verify(Level.WARNING,substring);}  }
class C{  public Log10(){  super(Number.class,Number.class);}  }
class C{  public static void link(final InstructionGraphNode source,final InstructionGraphNode target,final InstructionGraphEdge edge){  if (source == null) {    throw new IllegalArgumentException("Error: Source argument can not be null");  }  if (target == null) {    throw new IllegalArgumentException("Error: Target argument can not be null");  }  if (edge == null) {    throw new IllegalArgumentException("Error: Edge argument can not be null");  }  source.outgoingEdges.add(edge);  target.incomingEdges.add(edge);}  }
class C{  public static boolean inclusiveContains(RectF r,float x,float y){  return !(x > r.right || x < r.left || y > r.bottom || y < r.top);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TFORMAL_PARAMETER__ANNOTATIONS:    return getAnnotations();case TypesPackage.TFORMAL_PARAMETER__AST_ELEMENT:  if (resolve)   return getAstElement();return basicGetAstElement();case TypesPackage.TFORMAL_PARAMETER__VARIADIC:return isVariadic();case TypesPackage.TFORMAL_PARAMETER__TYPE_REF:return getTypeRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void reloadChildren(){synchronized (mChildren) {    for (int i=0, j=mChildren.size(); i < j; ++i)     mChildren.get(i).reload();  }}  }
class C{  public CategoryPlot findSubplot(PlotRenderingInfo info,Point2D source){  ParamChecks.nullNotPermitted(info,"info");  ParamChecks.nullNotPermitted(source,"source");  CategoryPlot result=null;  int subplotIndex=info.getSubplotIndex(source);  if (subplotIndex >= 0) {    result=(CategoryPlot)this.subplots.get(subplotIndex);  }  return result;}  }
class C{  public byte[] encodeSortKeyBytes(String value){  return value.getBytes(UTF8);}  }
class C{  protected int toRealPosition(int position){  int realCount=getRealCount();  if (realCount == 0)   return 0;  int realPosition=(position - 1) % realCount;  if (realPosition < 0)   realPosition=realPosition + realCount;  return realPosition;}  }
class C{  public void updateFileDetails(boolean transferring,boolean refresh){  if (readyToShow()) {    FileDataStorageManager storageManager=mContainerActivity.getStorageManager();    if (refresh && storageManager != null) {      setFile(storageManager.getFileByPath(getFile().getRemotePath()));    }    OCFile file=getFile();    setFilename(file.getFileName());    setFiletype(file);    setFilesize(file.getFileLength());    setTimeModified(file.getModificationTimestamp());    FileDownloaderBinder downloaderBinder=mContainerActivity.getFileDownloaderBinder();    FileUploaderBinder uploaderBinder=mContainerActivity.getFileUploaderBinder();    if (transferring || (downloaderBinder != null && downloaderBinder.isDownloading(mAccount,file)) || (uploaderBinder != null && uploaderBinder.isUploading(mAccount,file))) {      setButtonsForTransferring();    } else     if (file.isDown()) {      setButtonsForDown();    } else {      setButtonsForRemote();    }  }  getView().invalidate();}  }
class C{  public int size(){  return m_map.size();}  }
class C{  public LanguageTag(String tag) throws LanguageTagSyntaxException {  String lc=tag.toLowerCase();  List<String> subtagList=new ArrayList<String>();  int subT;  while (true) {    subT=lc.indexOf('-');    if (subT != -1) {      subtagList.add(lc.substring(0,subT));      lc=lc.substring(subT + 1);    } else     break;  }  subtagList.add(lc);  subtags=new String[subtagList.size()];  subtagList.toArray(subtags);  int lg=subtags[0].length();  if (lg == 0 || lg > 8) {    throw new LanguageTagSyntaxException("Primary subtag must be between 1 and 8 alpha characters: " + tag);  }  for (int j=0; j < lg; j++) {    int ch=subtags[0].charAt(j);    if (!('a' <= ch && ch <= 'z')) {      throw new LanguageTagSyntaxException("Primary subtag must be between 1 and 8 alpha characters: " + tag);    }  }  for (int i=1; i < subtags.length; i++) {    lg=subtags[i].length();    if (lg == 0 || lg > 8) {      throw new LanguageTagSyntaxException("Subtag " + (i + 1) + " must be between 1 and 8 alphanumeric characters: "+ tag);    }    for (int j=0; j < lg; j++) {      int ch=subtags[i].charAt(j);      if (!(('a' <= ch && ch <= 'z') || ('0' <= ch && ch <= '9'))) {        throw new LanguageTagSyntaxException("Subtag " + (i + 1) + " must be between 1 and 8 alphanumeric characters: "+ tag);      }    }  }  tagType=getTagType();  if (tagType == LT_ILLEGAL) {    throw new LanguageTagSyntaxException(getErrorMessage());  }}  }
class C{  public static boolean bernoulli(double p){  if (!(p >= 0.0 && p <= 1.0))   throw new IllegalArgumentException("Probability must be between 0.0 and 1.0");  return uniform() < p;}  }
class C{  private static Oid negotiate_mech_type(Oid[] supported_mechSet,Oid[] mechSet){  for (int i=0; i < supported_mechSet.length; i++) {    for (int j=0; j < mechSet.length; j++) {      if (mechSet[j].equals(supported_mechSet[i])) {        if (DEBUG) {          System.out.println("SpNegoContext: " + "negotiated mechanism = " + mechSet[j]);        }        return (mechSet[j]);      }    }  }  return null;}  }
class C{  public static Object spawn(Context cx,Scriptable thisObj,Object[] args,Function funObj){  Scriptable scope=funObj.getParentScope();  Runner runner;  if (args.length != 0 && args[0] instanceof Function) {    Object[] newArgs=null;    if (args.length > 1 && args[1] instanceof Scriptable) {      newArgs=cx.getElements((Scriptable)args[1]);    }    if (newArgs == null) {      newArgs=ScriptRuntime.emptyArgs;    }    runner=new Runner(scope,(Function)args[0],newArgs);  } else   if (args.length != 0 && args[0] instanceof Script) {    runner=new Runner(scope,(Script)args[0]);  } else {    throw reportRuntimeError("msg.spawn.args");  }  runner.factory=cx.getFactory();  Thread thread=new Thread(runner);  thread.start();  return thread;}  }
class C{  @Override public void HANDLER_BEGIN(int access,String className,String methName,String methDesc){  if (conf.CLINIT.equals(methName)) {    discardFramesClassInitializer(className,methName);  } else {    Member function=null;    if (conf.INIT.equals(methName))     function=resolveConstructorOverloading(className,methDesc); else     function=resolveMethodOverloading(className,methName,methDesc);    discardFrames(className,methName,function);  }  env.topFrame().operandStack.clearOperands();  ReferenceConstant exception_reference=new ReferenceConstant(Type.getType(Exception.class),-1);  env.topFrame().operandStack.pushRef(exception_reference);}  }
class C{  public LocalList finish(){  aboutToProcess(Integer.MAX_VALUE,0);  int resultSz=result.size();  int finalSz=resultSz - nullResultCount;  if (finalSz == 0) {    return EMPTY;  }  Entry[] resultArr=new Entry[finalSz];  if (resultSz == finalSz) {    result.toArray(resultArr);  } else {    int at=0;    for (    Entry e : result) {      if (e != null) {        resultArr[at++]=e;      }    }  }  Arrays.sort(resultArr);  LocalList resultList=new LocalList(finalSz);  for (int i=0; i < finalSz; i++) {    resultList.set(i,resultArr[i]);  }  resultList.setImmutable();  return resultList;}  }
class C{  public static boolean startDocumentPrint(int type,int Record_ID,ASyncProcess parent,int WindowNo,boolean IsDirectPrint){  return (startDocumentPrint(type,null,Record_ID,parent,WindowNo,IsDirectPrint,null));}  }
class C{  protected JarPackageFragment(PackageFragmentRoot root,JavaModelManager manager,String[] names){  super(root,manager,names);}  }
class C{  @LargeTest public void testSelectionOfInputElements5() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<div>"+ "First"+ "<input type=\"hidden\">"+ "<input type=\"hidden\">"+ "<input type=\"hidden\">"+ "<input type=\"hidden\">"+ "<input type=\"text\">"+ "<span>"+ "<span>"+ "<input type=\"submit\">"+ "</span>"+ "</span>"+ "</div>"+ "</body>"+ "Second"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"text\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"submit\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Second");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("Second");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<input type=\"submit\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<input type=\"text\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");}  }
class C{  public FilenameUtils(){  super();}  }
class C{  public static synchronized RootNode updateDirectory(){  if (ServerHistory.getCurSTR() == null) {    Logging.error("Trying to update a server without a history.");    return null;  }  RootNode curRoot=ServerHistory.getCurTree();  long curEpoch=ServerHistory.getCurEpoch();  RootNode newRoot=TreeBuilder.copyExtendTree(curRoot,pendingQueue);  pendingQueue.clear();  return newRoot;}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public Schema createSchema(InputSource in) throws IOException, SAXException, IncorrectSchemaException {  SchemaReader r=compactSyntax ? CompactSchemaReader.getInstance() : autoSchemaLanguage;  return r.createSchema(in,properties.toPropertyMap());}  }
class C{  public SmsMwiMessage(String text){  this(text,SmsAlphabet.ASCII);}  }
class C{  public static void editSectionComment(final SQLProvider provider,final int moduleId,final Integer commentId,final Integer userId,final String commentText) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"Error: provider argument can not be null");  Preconditions.checkArgument(moduleId > 0,"Error: module id must be greater then zero");  Preconditions.checkNotNull(commentId,"Error: commentId argument can not be null");  Preconditions.checkNotNull(userId,"Error: userId argument can not be null");  Preconditions.checkNotNull(commentText,"Error: newComment argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,commentText);}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public void bitXor() throws IOException {  writeCode(BIT_XOR);}  }
class C{  public FacebookOperationCanceledException(String message){  super(message);}  }
class C{  public boolean isReboot(){  return reboot;}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  public boolean isISnsDiscoveryEnabled(){  return iSnsDiscoveryEnabled;}  }
class C{  void add(EmitterDescriptor ed){  emitters.add(ed);}  }
class C{  public MethodInfo findMethodHere(MethodInfo mproto){  return (isMissing ? null : getDetails().findMethodHere(mproto));}  }
class C{  public static int binarySearch(double[] array,double value){  return binarySearch(array,0,array.length,value);}  }
class C{  public static double[] values(Double[] array){  double[] dest=new double[array.length];  for (int i=0; i < array.length; i++) {    Double v=array[i];    if (v != null) {      dest[i]=v.doubleValue();    }  }  return dest;}  }
class C{  public MissingQueryBuilder nullValue(boolean nullValue){  this.nullValue=nullValue;  return this;}  }
class C{  public void createKalavanNPC(StendhalRPZone zone){  final SpeakerNPC npc=new KalavanHouseseller("Barrett Holmes","kalavan",houseTax);  zone.add(npc);}  }
class C{  private void rebuildChat(){  if (tableViewCheckBox.isSelected()) {    if (!chatTableWrapperBox.isVisible()) {      chatBrowserScrollPane.setVisible(false);      chatTableWrapperBox.setVisible(true);    }    rebuildTableChat();  } else {    if (!chatBrowserScrollPane.isVisible()) {      chatTableWrapperBox.setVisible(false);      chatBrowserScrollPane.setVisible(true);    }    rebuildBrowserChat();  }}  }
class C{  private static void buildOperand(final INaviInstruction instruction,final INaviOperandTree operandTree,final ZyGraphViewSettings graphSettings,final StringBuffer line,final List<CStyleRunData> styleRun,final INodeModifier modifier,final int counter){  final OperandOrderIterator iter=new OperandOrderIterator(operandTree.getRootNode());  final boolean isVariableAccess=graphSettings.getDisplaySettings().getSimplifiedVariableAccess() && isVariableAccess(operandTree.getRootNode());  boolean hasMemderef=false;  boolean hasExpressionList=false;  boolean needsComma=false;  boolean hasExclamationMark=false;  COperandTreeNode memParent=null;  final ColorsConfigItem colors=ConfigManager.instance().getColorSettings();  while (iter.next()) {    if (isVariableAccess) {      skipMemoryAccess(iter);    }    final COperandTreeNode treeNode=(COperandTreeNode)iter.current();    hasExclamationMark="!".equals(treeNode.getValue());    if (skipOperand(treeNode,hasExpressionList)) {      continue;    }    if (needsComma) {      styleRun.add(new CStyleRunData(line.length(),1,colors.getOperandSeparatorColor()));      line.append(',');    }    if (hasExpressionList) {      needsComma=true;    }    if (hasMemderef && !isAncestor(treeNode,memParent)) {      styleRun.add(new CStyleRunData(line.length(),1,colors.getMemRefColor()));      line.append(']');      hasMemderef=false;    }    hasExpressionList=(treeNode.getType() == ExpressionType.EXPRESSION_LIST) || hasExpressionList;    if (treeNode.getType() == ExpressionType.MEMDEREF) {      memParent=treeNode;      hasMemderef=true;    }    addOperand(line,styleRun,treeNode,modifier);  }  addClosingDelimiters(line,styleRun,hasMemderef,hasExpressionList,hasExclamationMark);  addCommaSeparator(line,styleRun,instruction.getOperands(),counter);}  }
class C{  public static void apply(SharedPreferences.Editor editor){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    editor.apply();  } else {    editor.commit();  }}  }
class C{  public ChopTriangleConnector(TriangleFigure owner){  super(owner);}  }
class C{  public TypesSwitch(){  if (modelPackage == null) {    modelPackage=TypesPackage.eINSTANCE;  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tTabu list length","L",1,"-L <integer>"));  newVector.addElement(new Option("\tNumber of runs","U",1,"-U <integer>"));  newVector.addElement(new Option("\tMaximum number of parents","P",1,"-P <nr of parents>"));  newVector.addElement(new Option("\tUse arc reversal operation.\n\t(default false)","R",0,"-R"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public Course addCourse(Course input) throws CourseTopicAlreadyExistException {  if (this.courseRepository.findByCourseTopic(input.getCourseTopic()).isPresent()) {    throw new CourseTopicAlreadyExistException(input.getCourseTopic());  }  Course course=this.courseRepository.save(input);  return course;}  }
class C{  public boolean isStandby(){  return onStandby;}  }
class C{  public void deleteUdaDefinition() throws SaaSApplicationException {  ArgumentValidator.notNull("UdaDefinitionDetails",model);  VOUdaDefinition udaDefitionDetails=UdaModelConverter.convertUdaDefDetailsToVoUdaDefinition(model.getCurrentUdaDefinition());  if (model.getUdaType().equals(UdaBean.CUSTOMER)) {    udaDefitionDetails.setTargetType(UdaBean.CUSTOMER);  } else {    udaDefitionDetails.setTargetType(UdaBean.CUSTOMER_SUBSCRIPTION);  }  persistUda(udaDefitionDetails,false);}  }
class C{  @Override public Object baseServiceProcess(ProceedingJoinPoint pjp) throws AuthorityException, ServiceException, Throwable {  return pjp.proceed();}  }
class C{  private void appendSequencePath(CoordinateSequence seq,int level,boolean doIndent,Writer writer) throws IOException {  if (seq.size() == 0) {  } else {    if (doIndent)     indent(level,writer);    for (int i=0; i < seq.size(); i++) {      writer.write(" " + ((i == 0) ? "M" : "L"));      if (i > 0) {        if (coordsPerLine > 0 && i % coordsPerLine == 0) {          indent(level + 1,writer);        }      }      appendCoordinate(seq,i,writer);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.125 -0500",hash_original_method="BDCD76FD65816EABAE96959FB0B37C8A",hash_generated_method="1852DEAACE6CBD9A162B16B4EBCCD696") @DSVerified @DSSafe(DSCat.SAFE_LIST) @Override public void clear(){  super.clear();}  }
class C{  public PropertyField(String label,String initialValue){  this(label,initialValue,true);}  }
class C{  public static void startQueryHaveLockedMessages(AsyncQueryHandler handler,Collection<Long> threadIds,int token){  handler.cancelOperation(token);  Uri uri=MmsSms.CONTENT_LOCKED_URI;  String selection=null;  if (threadIds != null) {    StringBuilder buf=new StringBuilder();    int i=0;    for (    long threadId : threadIds) {      if (i++ > 0) {        buf.append(" OR ");      }      buf.append(Mms.THREAD_ID).append("=").append(Long.toString(threadId));    }    selection=buf.toString();  }  handler.startQuery(token,threadIds,uri,ALL_THREADS_PROJECTION,selection,null,Conversations.DEFAULT_SORT_ORDER);}  }
class C{  public static void i(String tag,String s,Object... args){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,String.format(s,args));}  }
class C{  public void testMergeOneSecurityConstraintIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <security-constraint>" + "    <web-resource-collection>"+ "      <web-resource-name>resource1</web-resource-name>"+ "      <url-pattern>/s1/*</url-pattern>"+ "    </web-resource-collection>"+ "    <auth-constraint>"+ "      <role-name>role1</role-name>"+ "    </auth-constraint>"+ "  </security-constraint>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertNotNull(WebXmlUtils.getSecurityConstraint(srcWebXml,"/s1/*"));  assertNull(WebXmlUtils.getSecurityConstraint(srcWebXml,"/s2/*"));}  }
class C{  public AbstractEvent cloneEvent(){  try {    AbstractEvent newEvent=(AbstractEvent)clone();    newEvent.originalEvent=this;    return newEvent;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public boolean isDefined(Object key){  if (key instanceof StyleConstants) {    Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);    if (cssKey != null) {      key=cssKey;    }  }  return super.isDefined(key);}  }
class C{  protected void load(String filename) throws FileNotFoundException {  Properties props=new Properties();  props.put("featureFactory",CRFPostprocessorFeatureFactory.class.getName());  load(filename,props);}  }
class C{  protected void rankMedianPosition(int rankValue,mxGraphHierarchyModel model,int nextRankValue){  mxGraphHierarchyRank rankSet=(mxGraphHierarchyRank)model.ranks.get(new Integer(rankValue));  Object[] rank=rankSet.toArray();  WeightedCellSorter[] weightedValues=new WeightedCellSorter[rank.length];  Map<mxGraphAbstractHierarchyCell,WeightedCellSorter> cellMap=new Hashtable<mxGraphAbstractHierarchyCell,WeightedCellSorter>(rank.length);  for (int i=0; i < rank.length; i++) {    mxGraphAbstractHierarchyCell currentCell=(mxGraphAbstractHierarchyCell)rank[i];    weightedValues[i]=new WeightedCellSorter();    weightedValues[i].cell=currentCell;    weightedValues[i].rankIndex=i;    cellMap.put(currentCell,weightedValues[i]);    Collection<mxGraphAbstractHierarchyCell> nextLayerConnectedCells=null;    if (nextRankValue < rankValue) {      nextLayerConnectedCells=currentCell.getPreviousLayerConnectedCells(rankValue);    } else {      nextLayerConnectedCells=currentCell.getNextLayerConnectedCells(rankValue);    }    weightedValues[i].weightedValue=calculatedWeightedValue(currentCell,nextLayerConnectedCells);  }  Arrays.sort(weightedValues);  for (int i=0; i < weightedValues.length; i++) {    int numConnectionsNextLevel=0;    mxGraphAbstractHierarchyCell cell=weightedValues[i].cell;    Object[] nextLayerConnectedCells=null;    int medianNextLevel=0;    if (nextRankValue < rankValue) {      nextLayerConnectedCells=cell.getPreviousLayerConnectedCells(rankValue).toArray();    } else {      nextLayerConnectedCells=cell.getNextLayerConnectedCells(rankValue).toArray();    }    if (nextLayerConnectedCells != null) {      numConnectionsNextLevel=nextLayerConnectedCells.length;      if (numConnectionsNextLevel > 0) {        medianNextLevel=medianXValue(nextLayerConnectedCells,nextRankValue);      } else {        medianNextLevel=cell.getGeneralPurposeVariable(rankValue);      }    }    double leftBuffer=0.0;    double leftLimit=-100000000.0;    for (int j=weightedValues[i].rankIndex - 1; j >= 0; ) {      WeightedCellSorter weightedValue=(WeightedCellSorter)cellMap.get(rank[j]);      if (weightedValue != null) {        mxGraphAbstractHierarchyCell leftCell=weightedValue.cell;        if (weightedValue.visited) {          leftLimit=leftCell.getGeneralPurposeVariable(rankValue) + leftCell.width / 2.0 + intraCellSpacing + leftBuffer + cell.width / 2.0;          j=-1;        } else {          leftBuffer+=leftCell.width + intraCellSpacing;          j--;        }      }    }    double rightBuffer=0.0;    double rightLimit=100000000.0;    for (int j=weightedValues[i].rankIndex + 1; j < weightedValues.length; ) {      WeightedCellSorter weightedValue=(WeightedCellSorter)cellMap.get(rank[j]);      if (weightedValue != null) {        mxGraphAbstractHierarchyCell rightCell=weightedValue.cell;        if (weightedValue.visited) {          rightLimit=rightCell.getGeneralPurposeVariable(rankValue) - rightCell.width / 2.0 - intraCellSpacing - rightBuffer - cell.width / 2.0;          j=weightedValues.length;        } else {          rightBuffer+=rightCell.width + intraCellSpacing;          j++;        }      }    }    if (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit) {      cell.setGeneralPurposeVariable(rankValue,(int)medianNextLevel);    } else     if (medianNextLevel < leftLimit) {      cell.setGeneralPurposeVariable(rankValue,(int)leftLimit);      currentXDelta+=leftLimit - medianNextLevel;    } else     if (medianNextLevel > rightLimit) {      cell.setGeneralPurposeVariable(rankValue,(int)rightLimit);      currentXDelta+=medianNextLevel - rightLimit;    }    weightedValues[i].visited=true;  }}  }
class C{  public DateTime withYear(int year){  return withMillis(getChronology().year().set(getMillis(),year));}  }
class C{  public synchronized void put(final CacheKey key,final EncodedImage encodedImage){  Preconditions.checkNotNull(key);  Preconditions.checkArgument(EncodedImage.isValid(encodedImage));  final EncodedImage oldEntry=mMap.put(key,EncodedImage.cloneOrNull(encodedImage));  EncodedImage.closeSafely(oldEntry);  logStats();}  }
class C{  public static boolean hasChanges(@NotNull VirtualFile file,@NotNull Project project){  final Collection<Change> changes=ChangeListManager.getInstance(project).getChangesIn(file);  for (  Change change : changes) {    if (change.getType() == Change.Type.NEW || change.getType() == Change.Type.MODIFICATION) {      return true;    }  }  return false;}  }
class C{  public boolean isUnbound(){  return isUnbound;}  }
class C{  protected void marshalObject(Object item,HierarchicalStreamWriter writer,MarshallingContext context){  String nodeLabel=mapper.serializedClass(item.getClass());  writer.startNode(nodeLabel);  context.convertAnother(item);  writer.endNode();}  }
class C{  public String normalizeNumber(String number){  try {    BigDecimal normalizedNumber=parseNumber(new NumberBuffer(number));    if (normalizedNumber == null) {      return number;    }    return normalizedNumber.stripTrailingZeros().toPlainString();  } catch (  NumberFormatException|ArithmeticException e) {    return number;  }}  }
class C{  public static void onResolveClass(ObjectStreamClass streamClass){  String name=streamClass.getName();  if (RO0Agent.config.isBlacklisted(name)) {    String message="Likely exploit gadget encoutered during deserialization: " + name;    RO0Agent.out(message);    throw new SecurityException(message);  }  if (!RO0Agent.config.isWhitelisted(name)) {    String message="Non-whitelisted class found during deserialization: " + name;    RO0Agent.out(message);    throw new SecurityException(message);  }  if (!RO0Agent.config.includeInReport(name)) {    return;  }  RO0Agent.out("Deserializing " + name + ": "+ Thread.currentThread().getStackTrace().toString());}  }
class C{  public boolean markSupported(){  return fInputStream.markSupported();}  }
class C{  public PolynomialKernel(double degree){  this(degree,1,1);}  }
class C{  protected boolean beforeDelete(){  return delete_Accounting("C_BP_Group_Acct");}  }
class C{  public DGetNewPassword(JFrame parent,String title,PasswordQualityConfig passwordQualityConfig){  super(parent,title,ModalityType.DOCUMENT_MODAL);  this.passwordQualityConfig=passwordQualityConfig;  initComponents();}  }
class C{  public void addTextProperty(String propertyName,TextNode node){  addChild(node);}  }
class C{  public String toString(){  return "ofaction" + ";t=" + this.getType() + ";l="+ this.getLength();}  }
class C{  @HLEFunction(nid=0x0D188658,version=150) public int strstr(PspString s1,PspString s2){  int index=s1.getString().indexOf(s2.getString());  if (index < 0) {    return 0;  }  return s1.getAddress() + index;}  }
class C{  public Collection<Plugin> plugins(){  return pluginByIdMap.values();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == JSDocNode.class) {switch (baseOperationID) {case DomPackage.JS_DOC_NODE___TO_STRING:      return DomPackage.INLINE_TAG___TO_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == Tag.class) {switch (baseOperationID) {case DomPackage.TAG___GET_VALUE_BY_KEY__STRING:  return DomPackage.INLINE_TAG___GET_VALUE_BY_KEY__STRING;case DomPackage.TAG___TO_STRING:return DomPackage.INLINE_TAG___TO_STRING;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  final Vector processQNAMESRNU(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nQNames=tokenizer.countTokens();  Vector qnames=new Vector(nQNames);  String defaultURI=handler.getNamespaceForPrefix("");  for (int i=0; i < nQNames; i++) {    String tok=tokenizer.nextToken();    if (tok.indexOf(':') == -1) {      qnames.addElement(new QName(defaultURI,tok));    } else {      qnames.addElement(new QName(tok,handler));    }  }  return qnames;}  }
class C{  public void testUnivariateTEforCoupledVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/2coupledRandomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={4};  double[] expectedFromTRENTOOL={0.3058006};  System.out.println("Kraskov Cond MI as TE comparison 1 - univariate coupled data 1");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{-0.0029744};  System.out.println("  reverse direction:");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{1}),MatrixUtils.selectColumns(data,new int[]{0}),kNNs,expectedFromTRENTOOL);}  }
class C{  @UiHandler("firstChoiceButton") public void handleFirstChoiceClick(final ClickEvent event){  this.actionDelegate.firstChoiceClicked();}  }
class C{  public void main(){  openIntentWithClear(new Intent(mContext,MainActivity.class));}  }
class C{  @Override public void doUpdateVisitedHistory(WebView view,String url,boolean isReload){  mWebViewController.doUpdateVisitedHistory(Tab.this,isReload);}  }
class C{  public void testOmitTF() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);  Document doc=new Document();  FieldType ft=new FieldType(TextField.TYPE_NOT_STORED);  ft.setIndexOptions(IndexOptions.DOCS);  ft.freeze();  Field f=newField("foo","bar",ft);  doc.add(f);  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher is=newSearcher(ir);  for (  Similarity sim : sims) {    is.setSimilarity(sim);    BooleanQuery.Builder query=new BooleanQuery.Builder();    query.add(new TermQuery(new Term("foo","bar")),BooleanClause.Occur.SHOULD);    assertEquals(1,is.search(query.build(),10).totalHits);  }  ir.close();  dir.close();}  }
class C{  public void testRoundTrip() throws Exception {  assertParseFormatEquals("1995-12-31T23:59:59.999666Z","1995-12-31T23:59:59.999Z");  assertParseFormatEquals("1995-12-31T23:59:59.999Z","1995-12-31T23:59:59.999Z");  assertParseFormatEquals("1995-12-31T23:59:59.99Z","1995-12-31T23:59:59.990Z");  assertParseFormatEquals("1995-12-31T23:59:59.9Z","1995-12-31T23:59:59.900Z");  assertParseFormatEquals("1995-12-31T23:59:59Z","1995-12-31T23:59:59Z");  assertParseFormatEquals("1995-12-31T23:59:59.990Z","1995-12-31T23:59:59.990Z");  assertParseFormatEquals("1995-12-31T23:59:59.900Z","1995-12-31T23:59:59.900Z");  assertParseFormatEquals("1995-12-31T23:59:59.90Z","1995-12-31T23:59:59.900Z");  assertParseFormatEquals("1995-12-31T23:59:59.000Z","1995-12-31T23:59:59Z");  assertParseFormatEquals("1995-12-31T23:59:59.00Z","1995-12-31T23:59:59Z");  assertParseFormatEquals("1995-12-31T23:59:59.0Z","1995-12-31T23:59:59Z");  assertParseFormatEquals("1995-12-31T23:59:59Z/DAY","1995-12-31T00:00:00Z");  assertParseFormatEquals("1995-12-31T23:59:59.123Z/DAY","1995-12-31T00:00:00Z");  assertParseFormatEquals("1995-12-31T23:59:59.123999Z/DAY","1995-12-31T00:00:00Z");  assertParseFormatEquals("1995-12-31T23:59:59.987Z",null);  assertParseFormatEquals("1995-12-31T23:59:59.98Z","1995-12-31T23:59:59.980Z");  assertParseFormatEquals("1995-12-31T23:59:59.9Z","1995-12-31T23:59:59.900Z");  assertParseFormatEquals("1995-12-31T23:59:59Z",null);  assertParseFormatEquals("1976-03-06T03:06:00Z",null);  assertParseFormatEquals("1995-12-31T23:59:59.987654Z","1995-12-31T23:59:59.987Z");  assertParseFormatEquals("0001-01-01T01:01:01Z",null);  assertParseFormatEquals("+12021-12-01T03:03:03Z",null);  assertParseFormatEquals("0000-04-04T04:04:04Z",null);  assertParseFormatEquals("-0005-05-05T05:05:05Z",null);  assertParseFormatEquals("-2021-12-01T04:04:04Z",null);  assertParseFormatEquals("-12021-12-01T02:02:02Z",null);}  }
class C{  public final int invoke(@NonNull final ChronosOperation<?> operation,@NonNull final String tag,final boolean broadcastResult){  logd("invoking tagged operation, tag=" + tag);  final Integer savedId=mTaggedRequests.get(tag);  if (savedId != null && isRunning(savedId)) {    logd("operation with tag=" + tag + " is running, do nothing");    return savedId;  }  logd("operation with tag=" + tag + " is not running, start it");  final int id=ChronosService.getInstance().runAsync(operation,broadcastResult);  mTaggedRequests.put(tag,id);  return id;}  }
class C{  public static Brew registerBrew(Brew brew){  brewMap.put(brew.getKey(),brew);  return brew;}  }
class C{  public static <T extends NbtSerializable>void register(Function<NbtTagCompound,T> function,Class<T> clazz){  Validate.isTrue(NbtSerializable.class.isAssignableFrom(clazz),"Class must implements NbtSerializable");  if (tag.containsKey(clazz)) {    aliases.entrySet().removeIf(null);  }  tag.put(clazz,(Function)function);}  }
class C{  private void updateMemberAvatarUi(){  if (null != mMemberAvatarImageView) {    if (null != mRoomMember) {      String displayname=mRoomMember.displayname;      String avatarUrl=mRoomMember.avatarUrl;      if (TextUtils.isEmpty(avatarUrl) || TextUtils.isEmpty(displayname)) {        User user=mSession.getDataHandler().getStore().getUser(mRoomMember.getUserId());        if (null != user) {          if (TextUtils.isEmpty(avatarUrl)) {            avatarUrl=user.avatar_url;          }          if (TextUtils.isEmpty(displayname)) {            displayname=user.displayname;          }        }      }      VectorUtils.loadUserAvatar(this,mSession,mMemberAvatarImageView,avatarUrl,mRoomMember.getUserId(),displayname);    } else {      User user=mSession.getDataHandler().getStore().getUser(mMemberId);      if (null != user) {        VectorUtils.loadUserAvatar(this,mSession,mMemberAvatarImageView,user);      } else {        VectorUtils.loadUserAvatar(this,mSession,mMemberAvatarImageView,null,mMemberId,mMemberId);      }    }  }}  }
class C{  public int append(final char lhs,final char rhs,final String fieldName){  int comparison=((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));  fieldComparisons.setAt(fieldName).value(comparison);  return comparison;}  }
class C{  public boolean sampleNextElement(){  if (n == 0)   return false;  if (skip-- > 0)   return false;  n--;  if (bufferPosition < buffer.length - 1) {    skip=buffer[bufferPosition + 1] - buffer[bufferPosition++];    --skip;  } else {    fetchNextBlock();  }  return true;}  }
class C{  static String randomFieldContents(){  StringBuilder sb=new StringBuilder();  int numTerms=random().nextInt(15);  for (int i=0; i < numTerms; i++) {    if (sb.length() > 0) {      sb.append(' ');    }    sb.append(randomChar());  }  return sb.toString();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Instrumenter attachElapsedTimeCollector(){  includeElapsedTime=true;  return this;}  }
class C{  public void testExport_kml(){  testExport(TrackFileFormat.KML);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMLAL");  translateAll(environment,instruction,"SMLAL",instructions);}  }
class C{  public static void main(String[] args){  Date today=new Date();  Calendar calendar=Calendar.getInstance();  calendar.setTime(today);  calendar.add(Calendar.DATE,-7);  Date oneWeekAgo=calendar.getTime();  String startDate=DATE_FORMATTER.format(oneWeekAgo);  String endDate=DATE_FORMATTER.format(today);  try {    httpTransport=GoogleNetHttpTransport.newTrustedTransport();    dataStoreFactory=new FileDataStoreFactory(DATA_STORE_DIR);    Dfareporting reporting=initializeDfareporting();    UserProfileList userProfiles=GetAllUserProfiles.list(reporting);    Long userProfileId=userProfiles.getItems().get(0).getProfileId();    DimensionValueList advertisers=GetDimensionValues.query(reporting,"dfa:advertiser",userProfileId,startDate,endDate,MAX_LIST_PAGE_SIZE);    if ((advertisers.getItems() != null) && !advertisers.getItems().isEmpty()) {      DimensionValue advertiser=advertisers.getItems().get(0);      Report standardReport=CreateStandardReport.insert(reporting,userProfileId,advertiser,startDate,endDate);      GetCompatibleFields.run(reporting,userProfileId,standardReport);      File file=GenerateReportFile.run(reporting,userProfileId,standardReport,true);      if (file != null) {        DownloadReportFile.run(reporting,file);      }    }    DimensionValueList floodlightConfigIds=GetDimensionValues.query(reporting,"dfa:floodlightConfigId",userProfileId,startDate,endDate,MAX_LIST_PAGE_SIZE);    if ((floodlightConfigIds.getItems() != null) && !floodlightConfigIds.getItems().isEmpty()) {      DimensionValue floodlightConfigId=floodlightConfigIds.getItems().get(0);      Report floodlightReport=CreateFloodlightReport.insert(reporting,userProfileId,floodlightConfigId,startDate,endDate);      File file=GenerateReportFile.run(reporting,userProfileId,floodlightReport,false);      if (file != null) {        DownloadReportFile.run(reporting,file);      }    }    GetAllReports.list(reporting,userProfileId,MAX_REPORT_PAGE_SIZE);  } catch (  GoogleJsonResponseException e) {    System.err.println(e.getMessage());  }catch (  HttpResponseException e) {    System.err.println(e.getMessage());  }catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  private ValueLobDb(Reader in,long remaining) throws IOException {  this.type=Value.CLOB;  this.small=null;  this.lobId=0;  this.fileName=createTempLobFileName();  long tmpPrecision=0;  try {    char[] buff=new char[Constants.IO_BUFFER_SIZE];    while (true) {      int len=getBufferSize(remaining);      len=IOUtils.readFully(in,buff,len);      if (len == 0) {        break;      }    }  }  finally {  }  this.precision=tmpPrecision;}  }
class C{  private static byte divmod(byte[] number,int firstDigit,int base,int divisor){  int remainder=0;  for (int i=firstDigit; i < number.length; i++) {    int digit=(int)number[i] & 0xFF;    int temp=remainder * base + digit;    number[i]=(byte)(temp / divisor);    remainder=temp % divisor;  }  return (byte)remainder;}  }
class C{  @Control private int isTouchingControls(float x,float y){  if (mShowControls) {    if (mControlsBacks.get(ARR_LEFT).getBounds().contains((int)x,(int)y)) {      return ARR_LEFT;    } else     if (mControlsBacks.get(ARR_RIGHT).getBounds().contains((int)x,(int)y)) {      return ARR_RIGHT;    }  }  if (mShowFastControls) {    if (mControlsBacks.get(FAST_ARR_LEFT).getBounds().contains((int)x,(int)y)) {      return FAST_ARR_LEFT;    } else     if (mControlsBacks.get(FAST_ARR_RIGHT).getBounds().contains((int)x,(int)y)) {      return FAST_ARR_RIGHT;    }  }  return CONTROL_NONE;}  }
class C{  public static void assertInterchangedArraysEquals(String[] expecteds,String[] actuals){  assertEquals("different number of elements in arrays",expecteds.length,actuals.length);  ArrayList<Integer> foundIndexes=new ArrayList<Integer>();  expactation:   for (int i=0; i < expecteds.length; i++) {    for (int j=0; j < actuals.length; j++) {      if (expecteds[i] == actuals[j] && !foundIndexes.contains(Integer.valueOf(j))) {        foundIndexes.add(Integer.valueOf(j));        continue expactation;      }    }    fail("Missing element " + expecteds[i]);  }}  }
class C{  public HeatException(String message){  super(message);}  }
class C{  @Parameterized.Parameters(name="{index}: PaymentChannelServerTest(version {0})") public static Collection<Integer> data(){  return Arrays.asList(1,2);}  }
class C{  public ConsoleProgressBar withFormat(final String outputFormat){  Preconditions.checkNotNull(outputFormat);  this.outputFormat=outputFormat;  return this;}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator<String> keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  public static Tree buildTree(Rule rule,DerivationState[] derivationStates,int maxDepth){  Tree tree=getFragmentFromYield(rule.getEnglishWords());  if (tree == null) {    return null;  }  tree=tree.shallowClone();  if (LOG.isDebugEnabled()) {    LOG.debug("buildTree({})",tree);    for (int i=0; i < derivationStates.length; i++) {      LOG.debug("  -> {}: {}",i,derivationStates[i]);    }  }  List<Tree> frontier=tree.getNonterminalYield();  ArrayList<Integer> tailIndices=new ArrayList<>();  int[] englishInts=rule.getEnglish();  for (  int englishInt : englishInts)   if (englishInt < 0)   tailIndices.add(-(englishInt + 1));  for (int i=0; i < derivationStates.length; i++) {    Tree frontierTree=frontier.get(tailIndices.get(i));    frontierTree.setBoundary(true);    HyperEdge nextEdge=derivationStates[i].edge;    if (nextEdge != null) {      DerivationState[] nextStates=null;      if (nextEdge.getTailNodes() != null && nextEdge.getTailNodes().size() > 0) {        nextStates=new DerivationState[nextEdge.getTailNodes().size()];        for (int j=0; j < nextStates.length; j++)         nextStates[j]=derivationStates[i].getChildDerivationState(nextEdge,j);      }      Tree childTree=buildTree(nextEdge.getRule(),nextStates,maxDepth - 1);      if (childTree != null)       frontierTree.children=childTree.children;    } else {      frontierTree.children=tree.children;    }  }  return tree;}  }
class C{  static public void put(String msg){  put(msg,(Throwable)null);}  }
class C{  public LocalRasterServerElevationModel(Document dom,AVList params){  super(dom,params);  this.createRasterServer(params != null ? params : (AVList)this.getValue(AVKey.CONSTRUCTION_PARAMETERS));}  }
class C{  public int hashCode(){  return data.hashCode();}  }
class C{  public boolean hasTableId(){  return hasExtension(TableId.class);}  }
class C{  public QuickTheory withExamples(int examples){  return new QuickTheory(null);}  }
class C{  private void updateFont(Font font){  StyledDocument doc=(StyledDocument)getComponent().getDocument();  Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);  if (style == null) {    return;  }  if (font == null) {    style.removeAttribute(StyleConstants.FontFamily);    style.removeAttribute(StyleConstants.FontSize);    style.removeAttribute(StyleConstants.Bold);    style.removeAttribute(StyleConstants.Italic);  } else {    StyleConstants.setFontFamily(style,font.getName());    StyleConstants.setFontSize(style,font.getSize());    StyleConstants.setBold(style,font.isBold());    StyleConstants.setItalic(style,font.isItalic());  }}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  approveIt();  log.info(toString());  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  return DocAction.STATUS_Completed;}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.ls.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public DateTime addToCopy(int value){  return iInstant.withMillis(iField.add(iInstant.getMillis(),value));}  }
class C{  public String toString(){  return SerializationUtils.toString(histogram);}  }
class C{  public boolean visitVariableRef(ExpressionOwner owner,Variable var){  m_refs.addElement(var.getQName());  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.404 -0400",hash_original_method="9BAAB904C2908A20E6C8F3394417762C",hash_generated_method="24806FF8D625B99124D895020EF2BD66") private Log discoverLogImplementation(String logCategory) throws LogConfigurationException {  if (isDiagnosticsEnabled()) {    logDiagnostic("Discovering a Log implementation...");  }  initConfiguration();  Log result=null;  String specifiedLogClassName=findUserSpecifiedLogClassName();  if (specifiedLogClassName != null) {    if (isDiagnosticsEnabled()) {      logDiagnostic("Attempting to load user-specified log class '" + specifiedLogClassName + "'...");    }    result=createLogFromClass(specifiedLogClassName,logCategory,true);    if (result == null) {      StringBuffer messageBuffer=new StringBuffer("User-specified log class '");      messageBuffer.append(specifiedLogClassName);      messageBuffer.append("' cannot be found or is not useable.");      if (specifiedLogClassName != null) {        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LOG4J_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_JDK14_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LUMBERJACK_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_SIMPLE_LOGGER);      }      throw new LogConfigurationException(messageBuffer.toString());    }    return result;  }  if (isDiagnosticsEnabled()) {    logDiagnostic("No user-specified Log implementation; performing discovery" + " using the standard supported logging implementations...");  }  for (int i=0; (i < classesToDiscover.length) && (result == null); ++i) {    result=createLogFromClass(classesToDiscover[i],logCategory,true);  }  if (result == null) {    throw new LogConfigurationException("No suitable Log implementation");  }  return result;}  }
class C{  private static double builtin(double[] a,int ai,final double init,final int len,Builtin aggop){  double val=init;  for (int i=0; i < len; i++, ai++)   val=aggop.execute2(val,a[ai]);  return val;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  public final Vec3D modSelf(float base){  x%=base;  y%=base;  z%=base;  return this;}  }
class C{  protected boolean includeAuthorityInRequestLine(){  return connection == null ? policy.usingProxy() : connection.getRoute().getProxy().type() == Proxy.Type.HTTP;}  }
class C{  public boolean isGeneratedFromCookie(){  return generatedFromCookie;}  }
class C{  private static <T,R>R accessSafely(Lock lock,List<T> list,Function<List<T>,R> listFunction){  final R returnValue;  lock.lock();  try {    returnValue=listFunction.apply(list);  }  finally {    lock.unlock();  }  return returnValue;}  }
class C{  public void apply(Instance inst){  for (int i=0; i < m_selectedAtts.length; i++) {    int numStringVals=inst.attribute(m_selectedAtts[i]).numValues();    if (!inst.isMissing(m_selectedAtts[i])) {      String value=inst.stringValue(m_selectedAtts[i]);      value=apply(value);      inst.dataset().attribute(m_selectedAtts[i]).setStringValue(value);      if (numStringVals > 1) {        inst.setValue(m_selectedAtts[i],0);      }    }  }}  }
class C{  @Override public void focusGained(FocusEvent e){}  }
class C{  private void startAppListActivity(){  Intent intent=new Intent(ServerDetails.this,AppListActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);}  }
class C{  @Override public void onConfigurationChanged(Configuration newConfig){  super.onConfigurationChanged(newConfig);  if (mDrawerToggle != null)   mDrawerToggle.onConfigurationChanged(newConfig);}  }
class C{  protected void validateUsers(org.oscm.xsd.User[] param){}  }
class C{  public final OutputStream openOutputStream(int index){  Column column=_row.columns()[index];  return column.openOutputStream(this);}  }
class C{  public SymbolReference<TypeDeclaration> solveTypeInType(TypeDeclaration typeDeclaration,String name){  if (typeDeclaration instanceof JavaParserClassDeclaration) {    return ((JavaParserClassDeclaration)typeDeclaration).solveType(name,typeSolver);  }  if (typeDeclaration instanceof JavaParserInterfaceDeclaration) {    return ((JavaParserInterfaceDeclaration)typeDeclaration).solveType(name,typeSolver);  }  return SymbolReference.unsolved(TypeDeclaration.class);}  }
class C{  public boolean isValidOffset(ZoneOffset offset){  return isGap() ? false : (getOffsetBefore().equals(offset) || getOffsetAfter().equals(offset));}  }
class C{  public MemoryExampleTable(List<Attribute> attributes,DataRowReader i){  this(attributes,i,false);}  }
class C{  public int size(){  int x=0;  for (  Segment<V> s : segments) {    x+=s.mapSize - s.queue2Size;  }  return x;}  }
class C{  public void addNew(CtClass clazz){  addOpcode(NEW);  addIndex(constPool.addClassInfo(clazz));}  }
class C{  public CreateAppGroupDialog(final Activity activity){  super(activity,DEFAULT_REQUEST_CODE);}  }
class C{  public final void testEmailAddressWithCharSequenceParameter(){  assertNotNull(Validators.emailAddress("foo"));}  }
class C{  private boolean isMineshafterPresent(){  try {    Class.forName("mineshafter.MineServer");    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public void testClusterConnection() throws Exception {  String url=System.getProperty("com.mysql.jdbc.testsuite.ClusterUrl");  if ((url != null) && (url.length() > 0)) {    Object versionNumObj=getSingleValueWithQuery("SHOW VARIABLES LIKE 'version'");    if ((versionNumObj != null) && (versionNumObj.toString().indexOf("cluster") != -1)) {      Connection clusterConn=null;      Statement clusterStmt=null;      try {        clusterConn=new NonRegisteringDriver().connect(url,null);        clusterStmt=clusterConn.createStatement();        clusterStmt.executeUpdate("DROP TABLE IF EXISTS testClusterConn");        clusterStmt.executeUpdate("CREATE TABLE testClusterConn (field1 INT) " + getTableTypeDecl() + " =ndbcluster");        clusterStmt.executeUpdate("INSERT INTO testClusterConn VALUES (1)");        clusterConn.setAutoCommit(false);        clusterStmt.execute("SELECT * FROM testClusterConn");        clusterStmt.executeUpdate("UPDATE testClusterConn SET field1=4");        @SuppressWarnings("unused") String connectionId=getSingleValueWithQuery("SELECT CONNECTION_ID()").toString();        System.out.println("Please kill the MySQL server now and press return...");        System.in.read();        System.out.println("Waiting for TCP/IP timeout...");        Thread.sleep(10);        System.out.println("Attempting auto reconnect");        try {          clusterConn.setAutoCommit(true);          clusterConn.setAutoCommit(false);        } catch (        SQLException sqlEx) {          System.out.println(sqlEx);        }        clusterStmt.executeUpdate("UPDATE testClusterConn SET field1=5");        ResultSet rset=clusterStmt.executeQuery("SELECT * FROM testClusterConn WHERE field1=5");        assertTrue("One row should be returned",rset.next());      }  finally {        if (clusterStmt != null) {          clusterStmt.executeUpdate("DROP TABLE IF EXISTS testClusterConn");          clusterStmt.close();        }        if (clusterConn != null) {          clusterConn.close();        }      }    }  }}  }
class C{  private void printClustering(List<int[]> clustering){  for (  int[] cluster : clustering) {    printClusterNames(cluster);  }}  }
class C{  public boolean isEdt(){  return edt == Thread.currentThread();}  }
class C{  public String type(){  return type;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == VariableDeclarationContainer.class) {switch (derivedFeatureID) {case N4JSPackage.VARIABLE_STATEMENT__VAR_DECLS_OR_BINDINGS:      return N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_DECLS_OR_BINDINGS;case N4JSPackage.VARIABLE_STATEMENT__VAR_STMT_KEYWORD:    return N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_STMT_KEYWORD;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static void decNumWorkers(){  incNumWorkers(-1);}  }
class C{  public static <T>DecomposableMatchBuilder0<List<T>> headNil(MatchesExact<T> head){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(head.t));  return new DecomposableMatchBuilder0<List<T>>(matchers,new ListConsHeadFieldExtractor<>());}  }
class C{  public void cancelled(){}  }
class C{  public static boolean canWrite(String fileName){  return FilePath.get(fileName).canWrite();}  }
class C{  public static PropertyValuesHolder ofInt(Property<?,Integer> property,int... values){  return new IntPropertyValuesHolder(property,values);}  }
class C{  public void perRaceWorkerInit(WorkerThread wt){  if (verbose)   System.out.println(wt.getName() + ": perRaceWorkerInit() called");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  final void performAppGcsLocked(){  final int N=mProcessesToGc.size();  if (N <= 0) {    return;  }  if (canGcNowLocked()) {    while (mProcessesToGc.size() > 0) {      ProcessRecord proc=mProcessesToGc.remove(0);      if (proc.curRawAdj > ProcessList.PERCEPTIBLE_APP_ADJ || proc.reportLowMemory) {        if ((proc.lastRequestedGc + GC_MIN_INTERVAL) <= SystemClock.uptimeMillis()) {          performAppGcLocked(proc);          scheduleAppGcsLocked();          return;        } else {          addProcessToGcListLocked(proc);          break;        }      }    }    scheduleAppGcsLocked();  }}  }
class C{  public static CGAttribute valueOfAttribute(String name){  CGAttribute[] cgAtts=values();  for (int i=0; i < cgAtts.length; i++) {    if (cgAtts[i].getAttributeName().equals(name)) {      return cgAtts[i];    }  }  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected static boolean readYes() throws IOException {  return (System.in.read() == 'y');}  }
class C{  public void verifyPath_orThrowException(String pathToSnapshot){  if (null == pathToSnapshot || 0 == pathToSnapshot.length())   throw new Profiler4JError("File path for snapshotOnExit feature is empty.");  File file=new File(pathToSnapshot);  if (!file.exists()) {    try {      file.createNewFile();    } catch (    IOException e) {      throw new Profiler4JError("Could not create a file for the snapshotOnExit feature: " + pathToSnapshot);    } finally {      file.delete();    }  } else {    if (!file.isFile() || !file.canWrite())     throw new Profiler4JError("Cannot open file for snapshotOnExit feature: " + pathToSnapshot);  }}  }
class C{  public void nextPage(GuiManualHerblore manual){  if (currentPage + 2 <= visiblePages.size()) {    setPage(currentPage + 2,manual);  }}  }
class C{  private void handleCollectionResource(final String targetUri,final HttpServerRequest req,final int recursionLevel,final AtomicInteger subRequestCounter,final RecursiveHandlerFactory.RecursiveHandlerTypes recursionHandlerType,final DeltaHandler<ResourceNode> handler,final Buffer data,final String eTag) throws ResourceCollectionException {  CollectionResourceContainer collectionResourceContainer=ExpansionDeltaUtil.verifyCollectionResponse(targetUri,data,null);  Logger log=RequestLoggerFactory.getLogger(ExpansionHandler.class,req);  if (log.isTraceEnabled()) {    log.trace("Collection resource: " + collectionResourceContainer.getCollectionName());    log.trace("actual recursion level: " + recursionLevel);  }  List<String> subResourceNames=collectionResourceContainer.getResourceNames();  if (subResourceNames.size() == 0) {    if (log.isTraceEnabled()) {      log.trace("No sub resource available for: " + collectionResourceContainer.getCollectionName());    }    ResourceNode node=new ResourceNode(collectionResourceContainer.getCollectionName(),new JsonArray(),eTag);    handler.handle(node);  } else {    boolean maxRecursionLevelReached=recursionLevel == MAX_RECURSION_LEVEL;    if (!maxRecursionLevelReached) {      if (log.isTraceEnabled()) {        log.trace("max. recursion reached for " + collectionResourceContainer.getCollectionName());      }      final DeltaHandler<ResourceNode> parentHandler=RecursiveHandlerFactory.createHandler(recursionHandlerType,subResourceNames,collectionResourceContainer.getCollectionName(),eTag,handler);      if (isStorageExpand(targetUri)) {        makeStorageExpandRequest(targetUri,subResourceNames,req,handler);      } else {        for (        String childResourceName : subResourceNames) {          if (log.isTraceEnabled()) {            log.trace("processing child resource: " + childResourceName);          }          boolean collection=isCollection(childResourceName);          final String collectionURI=ExpansionDeltaUtil.constructRequestUri(targetUri,req.params(),parameter_to_remove_after_initial_request,childResourceName,SlashHandling.END_WITHOUT_SLASH);          makeResourceSubRequest((collection ? collectionURI : removeParameters(collectionURI)),req,recursionLevel - DECREMENT_BY_ONE,subRequestCounter,recursionHandlerType,parentHandler,collection);        }      }    } else {      JsonArray jsonArray=new JsonArray();      for (      String childResourceName : subResourceNames) {        if (log.isTraceEnabled()) {          log.trace("(max level reached) processing child resource: " + childResourceName);        }        jsonArray.add(childResourceName);      }      handler.handle(new ResourceNode(collectionResourceContainer.getCollectionName(),jsonArray,eTag));    }  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public MarkdownDialog(Frame owner,String title,boolean modal){  super(owner,title,modal);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void doPost(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  final PrintWriter writer=response.getWriter();  final boolean allowWrite=userService.isAuthorable(request.getResourceResolver().adaptTo(Session.class));  response.setCharacterEncoding(CharEncoding.UTF_8);  response.setContentType("application/json");  if (allowWrite) {    final String blogName=request.getParameter(BLOG_NAME_PROPERTY);    final boolean extensionlessUrls=Boolean.parseBoolean(request.getParameter(EXTENSIONLESS_URLS_PROPERTY));    final String tempDir=request.getParameter(TEMPORARY_DIRECTORY_PROPERTY);    final Map<String,Object> properties=new HashMap<String,Object>();    properties.put(SystemSettingsService.SYSTEM_BLOG_NAME,blogName);    properties.put(SystemSettingsService.SYSTEM_EXTENSIONLESS_URLS,extensionlessUrls);    properties.put(SystemSettingsService.SYSTEM_TEMPORARY_DIRECTORY,tempDir);    boolean result=systemSettingsService.setProperties(properties);    if (result) {      response.setStatus(SlingHttpServletResponse.SC_OK);      sendResponse(writer,"OK","Settings successfully updated.");    } else {      response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);      sendResponse(writer,"Error","Settings failed to update.");    }  } else {    response.setStatus(SlingHttpServletResponse.SC_FORBIDDEN);    sendResponse(writer,"Error","Current user not authorized.");  }}  }
class C{  public boolean validatePassword(char[] password,String goodHash){  String[] params=goodHash.split(":");  int iterations=Integer.parseInt(params[ITERATION_INDEX]);  byte[] salt=fromHex(params[SALT_INDEX]);  byte[] hash=fromHex(params[PBKDF2_INDEX]);  byte[] testHash=pbkdf2(password,salt,iterations,hash.length);  return slowEquals(hash,testHash);}  }
class C{  public static String createUTFStringFromC(Address stringAddress){  final boolean USE_LIBRARY_CODEC=false;  byte[] tmp;  ByteBuffer bbuf;  if (VM.fullyBooted) {    try {      bbuf=java.nio.JikesRVMSupport.newDirectByteBuffer(stringAddress,strlen(stringAddress));      if (USE_LIBRARY_CODEC) {        CharsetDecoder csd=Charset.forName("UTF8").newDecoder();        return createString(csd,bbuf);      } else {        return UTF8Convert.fromUTF8(bbuf);      }    } catch (    Exception ex) {    }  }  tmp=createByteArrayFromC(stringAddress);  return StringUtilities.asciiBytesToString(tmp);}  }
class C{  private static RequestBuilder.Factory resetFocusExposureModes(RequestBuilder.Factory template){  RequestTemplate result=new RequestTemplate(template);  result.setParam(CaptureRequest.CONTROL_MODE,CaptureRequest.CONTROL_MODE_AUTO);  result.setParam(CaptureRequest.CONTROL_AF_MODE,CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);  result.setParam(CaptureRequest.CONTROL_AF_TRIGGER,CaptureRequest.CONTROL_AF_TRIGGER_IDLE);  result.setParam(CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER,CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER_IDLE);  return result;}  }
class C{  public void reset(){synchronized (mLock) {    if (mLatestRunRequest != null) {      mLatestRunRequest.cancel(false);    }  }}  }
class C{  public Asn1Dump(){  indentSequence=new IndentSequence(IndentChar.SPACE,4);}  }
class C{  public LambdaFactoryConfiguration withParentClassLoader(ClassLoader parentClassLoader){  return copy().setParentClassLoader(parentClassLoader);}  }
class C{  void addChild(@SuppressWarnings("hiding") Iterable<Object> children){  addChild(from(children).toArray(Object.class));}  }
class C{  public static <T>Predicate<T> and(Iterable<? extends Predicate<? super T>> components){  return new AndPredicate(components);}  }
class C{  public void removeNotify(){  super.removeNotify();  KeyboardManager.getCurrentManager().unregisterMenuBar(this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int compare(EventPoint o1,EventPoint o2){  double fp=FloatingPoint.value(o1.point.getY() - o2.point.getY());  if (fp > 0) {    return -1;  }  if (fp < 0) {    return +1;  }  fp=FloatingPoint.value(o1.point.getX() - o2.point.getX());  if (fp < 0) {    return -1;  }  if (fp > 0) {    return +1;  }  return 0;}  }
class C{  public boolean isPropertyTaxArrearAccountHead(final String glcode,final String description){  final List<AppConfigValues> list=appConfigValuesService.getConfigValuesByModuleAndKey(CollectionConstants.MODULE_NAME_PROPERTYTAX,"ISARREARACCOUNT");  final AppConfigValues penaltyGlCode=appConfigValuesService.getAppConfigValueByDate(CollectionConstants.MODULE_NAME_PROPERTYTAX,"PTPENALTYGLCODE",new Date());  boolean retValue=false;  LOGGER.debug("isPropertyTaxArrearAccountHead glcode " + glcode + " description "+ description);  if (penaltyGlCode != null && penaltyGlCode.getValue().equals(glcode)) {    final Module module=moduleService.getModuleByName(CollectionConstants.MODULE_NAME_PROPERTYTAX);    final String currInst=installmentHibDao.getInsatllmentByModuleForGivenDate(module,new Date()).getDescription();    if (currInst.equals(description.substring(16,description.length())))     retValue=false; else     retValue=true;  } else {    final ArrayList<String> accValues=new ArrayList<String>(0);    for (    final AppConfigValues value : list)     accValues.add(value.getValue());    if (accValues.contains(glcode))     retValue=true; else     retValue=false;  }  return retValue;}  }
class C{  @Override public void disconnectStorage(URI storage) throws ControllerException {  StorageSystem storageObj=null;  try {    storageObj=_dbClient.queryObject(StorageSystem.class,storage);  } catch (  Exception e) {    throw DeviceControllerException.exceptions.disconnectStorageFailedDb(e);  }  if (storageObj == null) {    throw DeviceControllerException.exceptions.disconnectStorageFailedNull();  }  BlockStorageDevice storageDevice=getDevice(storageObj.getSystemType());  if (storageDevice == null) {    throw DeviceControllerException.exceptions.disconnectStorageFailedNull();  }  storageDevice.doDisconnect(storageObj);  _log.info("Removing storage device from work pool: {}",storageObj.getId());}  }
class C{  public void resetControlRolls(Entity entity){  PilotingRollData roll;  Vector<Integer> rollsToRemove=new Vector<Integer>();  int i=0;  for (i=0; i < controlRolls.size(); i++) {    roll=controlRolls.elementAt(i);    if (roll.getEntityId() == entity.getId()) {      rollsToRemove.addElement(new Integer(i));    }  }  for (i=rollsToRemove.size() - 1; i > -1; i--) {    controlRolls.removeElementAt(rollsToRemove.elementAt(i).intValue());  }}  }
class C{  public static void reverse(Object[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  Object tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public EaseOut(float a,float p){  this.a=a;  this.p=p;}  }
class C{  public void user_init() throws java.lang.Exception {  scanner.init();}  }
class C{  void run() throws Exception {  log("starting test");  setup();  Scope[] scopes={createScope(rgen.nextInt(MAX_SYMBOLS_COUNT)),createScope(rgen.nextInt(MAX_SYMBOLS_COUNT)),createScope(rgen.nextInt(MAX_SYMBOLS_COUNT))};  boolean[][] scopeNesting={{false,true,false,true},{false,true,true,true},{false,false,true,true}};  for (int i=0; i < 4; i++) {    CompoundScope root=new CompoundScope(symtab.noSymbol);    CompoundScope sub=new CompoundScope(symtab.noSymbol);    boolean subAdded=false;    for (int sc=0; sc < 3; sc++) {      if (scopeNesting[sc][i]) {        sub.addSubScope(scopes[sc]);        if (!subAdded) {          root.addSubScope(sub);          subAdded=true;        }      } else {        root.addSubScope(scopes[sc]);      }    }    log("testing scope: " + root);    checkElems(root,null);    checkElems(root,new OddFilter());    checkShadowed(root,null);    checkShadowed(root,new OddFilter());  }}  }
class C{  public Value read(Type type,NodeMap<InputNode> node,Map map) throws Exception {  Value value=strategy.read(type,node,map);  if (isReference(value)) {    return value;  }  return read(type,node,value);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static ScriptContext createContext(final Object... args){  final SimpleScriptContext context=new SimpleScriptContext();  if (args.length % 2 != 0)   throw new ApplicationRuntimeException("Number of arguments must be even");  for (int i=0; i < args.length; i+=2)   context.setAttribute((String)args[i],args[i + 1],ScriptContext.ENGINE_SCOPE);  return context;}  }
class C{  @CanIgnoreReturnValue public Builder<K,V> put(Range<K> range,V value){  checkNotNull(range);  checkNotNull(value);  checkArgument(!range.isEmpty(),"Range must not be empty, but was %s",range);  if (!keyRanges.complement().encloses(range)) {    for (    Entry<Range<K>,V> entry : rangeMap.asMapOfRanges().entrySet()) {      Range<K> key=entry.getKey();      if (key.isConnected(range) && !key.intersection(range).isEmpty()) {        throw new IllegalArgumentException("Overlapping ranges: range " + range + " overlaps with entry "+ entry);      }    }  }  keyRanges.add(range);  rangeMap.put(range,value);  return this;}  }
class C{  public List<NamedRelatedResourceRep> listMatchingStoragePools(ObjectVirtualPoolParam input){  StoragePoolList response=client.post(StoragePoolList.class,input,baseUrl + "/matching-pools");  return defaultList(response.getPools());}  }
class C{  public void joinChat(View view){  String username=mUsername.getText().toString();  if (!validUsername(username))   return;  SharedPreferences sp=getSharedPreferences(Constants.SHARED_PREFS,MODE_PRIVATE);  SharedPreferences.Editor edit=sp.edit();  edit.putString(Constants.USER_NAME,username);  edit.apply();  Intent intent=new Intent(this,MainActivity.class);  startActivity(intent);}  }
class C{  public void backup(int amount){  inBuf+=amount;  if ((bufpos-=amount) < 0)   bufpos+=bufsize;}  }
class C{  public static IO<String> readLine(String prompt){  return printLine(prompt).flatMap(null);}  }
class C{  private String[] diff_halfMatchI(String longtext,String shorttext,int i){  String seed=longtext.substring(i,i + longtext.length() / 4);  int j=-1;  String best_common="";  String best_longtext_a="", best_longtext_b="";  String best_shorttext_a="", best_shorttext_b="";  while ((j=shorttext.indexOf(seed,j + 1)) != -1) {    int prefixLength=diff_commonPrefix(longtext.substring(i),shorttext.substring(j));    int suffixLength=diff_commonSuffix(longtext.substring(0,i),shorttext.substring(0,j));    if (best_common.length() < suffixLength + prefixLength) {      best_common=shorttext.substring(j - suffixLength,j) + shorttext.substring(j,j + prefixLength);      best_longtext_a=longtext.substring(0,i - suffixLength);      best_longtext_b=longtext.substring(i + prefixLength);      best_shorttext_a=shorttext.substring(0,j - suffixLength);      best_shorttext_b=shorttext.substring(j + prefixLength);    }  }  if (best_common.length() * 2 >= longtext.length()) {    return new String[]{best_longtext_a,best_longtext_b,best_shorttext_a,best_shorttext_b,best_common};  } else {    return null;  }}  }
class C{  protected void writeCentralDirectoryEnd() throws IOException {  writeOut(EOCD_SIG.getBytes());  writeOut(ZERO);  writeOut(ZERO);  byte[] num=(new ZipShort(entries.size())).getBytes();  writeOut(num);  writeOut(num);  writeOut(cdLength.getBytes());  writeOut(cdOffset.getBytes());  byte[] data=getBytes(comment);  writeOut((new ZipShort(data.length)).getBytes());  writeOut(data);}  }
class C{  public static void ensureFolderHierarchyExists(IFolder folder){  if (!folder.exists()) {    if (folder.getParent() instanceof IFolder) {      ensureFolderHierarchyExists((IFolder)folder.getParent());    }    try {      folder.create(true,true,null);    } catch (    CoreException e) {      String message=String.format("Cannot create folder %s.",folder);      throw new GradlePluginsRuntimeException(message,e);    }  }}  }
class C{  public final Object newInstance(Object[] args) throws CannotCreateException {  int n=constructors.length;  for (int i=0; i < n; ++i) {    try {      return constructors[i].newInstance(args);    } catch (    IllegalArgumentException e) {    }catch (    InstantiationException e) {      throw new CannotCreateException(e);    }catch (    IllegalAccessException e) {      throw new CannotCreateException(e);    }catch (    InvocationTargetException e) {      throw new CannotCreateException(e);    }  }  throw new CannotCreateException("no constructor matches");}  }
class C{  public static boolean canUseElectricItem(ItemStack aStack,int aCharge){  try {    if (isElectricItem(aStack)) {      return ic2.api.item.ElectricItem.manager.canUse(aStack,aCharge);    }  } catch (  Throwable e) {  }  return false;}  }
class C{  public boolean isDeleteNonDurableQueue(){  return deleteNonDurableQueue;}  }
class C{  public CLEvent copyTo(CLQueue queue,long srcOffset,long length,CLMem destination,long destOffset,CLEvent... eventsToWaitFor){}  }
class C{  public static boolean isAddToHomeIntentSupported(Context context){  PackageManager pm=context.getPackageManager();  Intent i=new Intent(INSTALL_SHORTCUT);  List<ResolveInfo> receivers=pm.queryBroadcastReceivers(i,PackageManager.GET_INTENT_FILTERS);  return !receivers.isEmpty();}  }
class C{  protected boolean isKeepAliveChanged(){  return true;}  }
class C{  public boolean canLoadFolder(AcsAccessObject acs,ArchiveObject arch,int fdrId,String entidad) throws Exception {  boolean can=false;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    can=FolderMdoFdr.canLoadFolder(dbConn,acs.getAccessToken(),arch.getArchiveToken(),fdrId);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public static final double[] times(final double[] v1,final double s1){  final double[] v=new double[v1.length];  for (int i=0; i < v1.length; i++) {    v[i]=v1[i] * s1;  }  return v;}  }
class C{  private void rule_AlgebraicSimplification(Hop hop,boolean descendFirst) throws HopsException {  if (hop.getVisited() == Hop.VisitStatus.DONE)   return;  for (int i=0; i < hop.getInput().size(); i++) {    Hop hi=hop.getInput().get(i);    if (descendFirst)     rule_AlgebraicSimplification(hi,descendFirst);    hi=removeEmptyRightIndexing(hop,hi,i);    hi=removeUnnecessaryRightIndexing(hop,hi,i);    hi=removeEmptyLeftIndexing(hop,hi,i);    hi=removeUnnecessaryLeftIndexing(hop,hi,i);    hi=fuseLeftIndexingChainToAppend(hop,hi,i);    hi=removeUnnecessaryCumulativeOp(hop,hi,i);    hi=removeUnnecessaryReorgOperation(hop,hi,i);    hi=removeUnnecessaryOuterProduct(hop,hi,i);    hi=fuseDatagenAndReorgOperation(hop,hi,i);    hi=simplifyColwiseAggregate(hop,hi,i);    hi=simplifyRowwiseAggregate(hop,hi,i);    hi=simplifyColSumsMVMult(hop,hi,i);    hi=simplifyRowSumsMVMult(hop,hi,i);    hi=simplifyUnnecessaryAggregate(hop,hi,i);    hi=simplifyEmptyAggregate(hop,hi,i);    hi=simplifyEmptyUnaryOperation(hop,hi,i);    hi=simplifyEmptyReorgOperation(hop,hi,i);    hi=simplifyEmptySortOperation(hop,hi,i);    hi=simplifyEmptyMatrixMult(hop,hi,i);    hi=simplifyIdentityRepMatrixMult(hop,hi,i);    hi=simplifyScalarMatrixMult(hop,hi,i);    hi=simplifyMatrixMultDiag(hop,hi,i);    hi=simplifyDiagMatrixMult(hop,hi,i);    hi=simplifySumDiagToTrace(hi);    hi=pushdownBinaryOperationOnDiag(hop,hi,i);    hi=pushdownSumOnAdditiveBinary(hop,hi,i);    hi=simplifyWeightedSquaredLoss(hop,hi,i);    hi=simplifyWeightedSigmoidMMChains(hop,hi,i);    hi=simplifyWeightedDivMM(hop,hi,i);    hi=simplifyWeightedCrossEntropy(hop,hi,i);    hi=simplifyWeightedUnaryMM(hop,hi,i);    hi=simplifyDotProductSum(hop,hi,i);    hi=fuseSumSquared(hop,hi,i);    hi=fuseAxpyBinaryOperationChain(hop,hi,i);    hi=reorderMinusMatrixMult(hop,hi,i);    hi=simplifySumMatrixMult(hop,hi,i);    hi=simplifyEmptyBinaryOperation(hop,hi,i);    hi=simplifyScalarMVBinaryOperation(hi);    hi=simplifyNnzComputation(hop,hi,i);    if (!descendFirst)     rule_AlgebraicSimplification(hi,descendFirst);  }  hop.setVisited(Hop.VisitStatus.DONE);}  }
class C{  @Override public void resolve(DeserializationConfig config,DeserializerProvider provider) throws JsonMappingException {  if (_valueInstantiator.canCreateUsingDelegate()) {    JavaType delegateType=_valueInstantiator.getDelegateType();    if (delegateType == null) {      throw new IllegalArgumentException("Invalid delegate-creator definition for " + _mapType + ": value instantiator ("+ _valueInstantiator.getClass().getName()+ ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");    }    AnnotatedWithParams delegateCreator=_valueInstantiator.getDelegateCreator();    BeanProperty.Std property=new BeanProperty.Std(null,delegateType,null,delegateCreator);    _delegateDeserializer=findDeserializer(config,provider,delegateType,property);  }  if (_propertyBasedCreator != null) {    for (    SettableBeanProperty prop : _propertyBasedCreator.getCreatorProperties()) {      if (!prop.hasValueDeserializer()) {        _propertyBasedCreator.assignDeserializer(prop,findDeserializer(config,provider,prop.getType(),prop));      }    }  }}  }
class C{  public OptInTemplateClassResolver(Set allowedClasses,List trustedTemplates){  this.allowedClasses=allowedClasses != null ? allowedClasses : Collections.EMPTY_SET;  if (trustedTemplates != null) {    trustedTemplateNames=new HashSet();    trustedTemplatePrefixes=new ArrayList();    Iterator it=trustedTemplates.iterator();    while (it.hasNext()) {      String li=(String)it.next();      if (li.startsWith("/"))       li=li.substring(1);      if (li.endsWith("*")) {        trustedTemplatePrefixes.add(li.substring(0,li.length() - 1));      } else {        trustedTemplateNames.add(li);      }    }  } else {    trustedTemplateNames=Collections.EMPTY_SET;    trustedTemplatePrefixes=Collections.EMPTY_LIST;  }}  }
class C{  public GitHubRepositoryList createRepositoriesList(PagedIterable<GHRepository> ghRepositoriesList) throws ApiException, IOException {  GitHubRepositoryList dtoRepositoriesList=DtoFactory.getInstance().createDto(GitHubRepositoryList.class);  List<GitHubRepository> dtoRepositories=new ArrayList<>();  for (  GHRepository ghRepository : ghRepositoriesList) {    dtoRepositories.add(createRepository(ghRepository));  }  dtoRepositoriesList.setRepositories(dtoRepositories);  return dtoRepositoriesList;}  }
class C{  @Override public NormalCard menuItem(@AnyRes int menuItem){  if (menuItem == 0) {    Log.e("MenuItem","Impossible to set Menu Item to 0! Please Check it");  } else {    mMenuItem=menuItem;    isMenuItem=true;  }  return this;}  }
class C{  protected ServiceRequestContextWrapper(ServiceRequestContext delegate){  super(delegate);}  }
class C{  public long manhattanDistance(final Int3D p){  return Math.abs((long)this.x - p.x) + Math.abs((long)this.y - p.y) + Math.abs((long)this.z - p.z);}  }
class C{  public FunctionInput(Category category,String categoryName,String name,int type,String additionalInformation){  this(category,categoryName,name,type,additionalInformation,false);}  }
class C{  public static EntityMappings isolateEntityMapping(EntityMappings mappings,Entity entity){  EntityMappings mappingClone=cloneObject(mappings);  Entity entityClone=mappingClone.getEntity(entity.getId());  Set<Entity> relationClasses=getRelationClass(entityClone.getAttributes());  mappingClone.getEntity().stream().filter(null).forEach(null);  relationClasses.remove(entityClone);  relationClasses.stream().map(null).forEach(null);  relationClasses.add(entityClone);  mappingClone.setEntity(new ArrayList<>());  relationClasses.stream().forEach(null);  mapToOrignalObject(mappings,mappingClone);  return mappingClone;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:55.731 -0500",hash_original_method="5E81A38D35A2865AC1654F506B5D7265",hash_generated_method="29E1CC4E517C946B1446A45E81028CA5") private void handleCancelMessage(){  if (!checkOpenConnection()) {    return;  }  try {    mService.cancel(mListener);    if (DBG)     Log.d(TAG,"service cancel command succeded");  } catch (  final RemoteException e) {    Log.e(TAG,"cancel() failed",e);    mListener.onError(ERROR_CLIENT);  }}  }
class C{  public void removeRtcpListener(RtcpEventListener listener){  if (sLogger.isActivated()) {    sLogger.debug("Remove a RTCP event listener");  }  mListeners.removeElement(listener);}  }
class C{  public static QueryExp and(QueryExp q1,QueryExp q2){  return new AndQueryExp(q1,q2);}  }
class C{  @PostConstruct public void init(){  super.init(distributionTagHeader,distributionTagButtons,distributionTagButtonClick);  eventbus.subscribe(this);}  }
class C{  public static boolean check(String option){  if (table == null)   return false;  return (table.get(option.toLowerCase()) != null);}  }
class C{  protected OperationDefinitionImpl(){  super();}  }
class C{  public static Output serializeDocumentForIndexing(Object o,int maxSize){  Kryo k=getKryoThreadLocalForDocuments();  byte[] buffer=getBuffer(OUTPUT_BUFFER_SIZE_BYTES);  Output out=new OutputWithRoot(buffer,maxSize,o);  k.writeClassAndObject(out,o);  return out;}  }
class C{  public void futureByteResult(long futPtr,int res){  enter();  try {    PlatformCallbackUtils.futureByteResult(envPtr,futPtr,res);  }  finally {    leave();  }}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  public static void main(String[] args){  if (args.length < 1) {    System.out.println("Usage: java Exercise_12_28 *");    System.exit(1);  }  ArrayList<File> list=getFiles(args);  System.out.println(list.toString());  for (int i=0; i < list.size(); i++) {    padFileName(list.get(i));  }}  }
class C{  private void injectViews(View view){  ButterKnife.inject(this,view);}  }
class C{  public void add(String name,LogSegmentMetadata metadata){synchronized (logSegments) {    if (!logSegments.containsKey(name)) {      logSegments.put(name,metadata);      LOG.info("{} added log segment ({} : {}) to cache.",new Object[]{streamName,name,metadata});    }    LogSegmentMetadata oldMetadata=lid2LogSegments.remove(metadata.getLedgerId());    if (null == oldMetadata) {      lid2LogSegments.put(metadata.getLedgerId(),metadata);    } else {      if (oldMetadata.isInProgress() && !metadata.isInProgress()) {        lid2LogSegments.put(metadata.getLedgerId(),metadata);      } else {        lid2LogSegments.put(oldMetadata.getLedgerId(),oldMetadata);      }    }  }}  }
class C{  void messageDuplicateConditionalUserName(String svName){  javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Error30"),new Object[]{svName}),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);}  }
class C{  public AutoMove(IMove m){  this.move=m;}  }
class C{  private static void addToLibrary(BooksService service,String volumeId) throws IOException, ServiceException {  VolumeEntry newEntry=new VolumeEntry();  newEntry.setId(volumeId);  try {    service.insert(new URL(USER_LIBRARY_FEED),newEntry);  } catch (  ServiceException se) {    System.out.println("There was an error adding your volume.\n");    return;  }  System.out.println("Added " + volumeId);}  }
class C{  public void active(){  super.set(Boolean.TRUE);}  }
class C{  public void calculateAlphas() throws Exception {  if (!m_isLeaf) {    double errorDiff=m_numIncorrectModel - m_numIncorrectTree;    if (errorDiff <= 0) {      m_isLeaf=true;      m_sons=null;      m_alpha=Double.MAX_VALUE;    } else {      errorDiff/=m_totalInstanceWeight;      m_alpha=errorDiff / (getNumLeaves() - 1);      for (      LMTNode m_son : m_sons) {        m_son.calculateAlphas();      }    }  } else {    m_alpha=Double.MAX_VALUE;  }}  }
class C{  public static void assertSame(String message,Object expected,Object actual){  if (expected == actual) {    return;  }  failNotSame(message,expected,actual);}  }
class C{  public Instance readInstance(Instances structure,boolean flag) throws IOException {  return getInstance(structure,flag);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.666 -0500",hash_original_method="62A908C41BE62BCE0C6AA4E6495535A3",hash_generated_method="C4202B21989B2CD8AAFF9A5EDC7022BB") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public String toString(){  StringBuffer header=new StringBuffer();  if (__headerFields.length() > 0)   header.append(__headerFields.toString());  header.append("From: ");  header.append(__from);  header.append("\nTo: ");  header.append(__to);  if (__cc != null) {    header.append("\nCc: ");    header.append(__cc.toString());  }  if (__subject != null) {    header.append("\nSubject: ");    header.append(__subject);  }  header.append('\n');  header.append('\n');  return header.toString();}  }
class C{  private void runInitFunctionIfRequired(String url,Connection connection) throws SQLException {  Matcher matcher=INITFUNCTION_MATCHING_PATTERN.matcher(url);  if (matcher.matches()) {    String className=matcher.group(2);    String methodName=matcher.group(4);    try {      Class<?> initFunctionClazz=Class.forName(className);      Method method=initFunctionClazz.getMethod(methodName,Connection.class);      method.invoke(null,connection);    } catch (    ClassNotFoundException|NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {      LOGGER.error("Error while executing init function: {}::{}",className,methodName,e);      throw new SQLException("Error while executing init function: " + className + "::"+ methodName,e);    }  }}  }
class C{  public Double(double value){}  }
class C{  public static int reverse(int i){  i=(i & 0x55555555) << 1 | (i >> 1) & 0x55555555;  i=(i & 0x33333333) << 2 | (i >> 2) & 0x33333333;  i=(i & 0x0F0F0F0F) << 4 | (i >> 4) & 0x0F0F0F0F;  return reverseBytes(i);}  }
class C{  @Description(summary="Build H2 release jars and upload to file:///data/h2database/m2-repo.") public void mavenDeployCentral(){  FileList files=files("src/main");  copy("docs",files,"src/main");  files=files("docs").keep("docs/org/*").keep("*.java");  files.addAll(files("docs").keep("docs/META-INF/*"));  String manifest=new String(readFile(new File("src/installer/source-manifest.mf")));  manifest=replaceAll(manifest,"${version}",getVersion());  writeFile(new File("docs/META-INF/MANIFEST.MF"),manifest.getBytes());  jar("docs/h2-" + getVersion() + "-sources.jar",files,"docs");  delete("docs/org");  delete("docs/META-INF");  execScript("mvn",args("deploy:deploy-file","-Dfile=docs/h2-" + getVersion() + "-sources.jar","-Durl=file:///data/h2database/m2-repo","-Dpackaging=jar","-Dclassifier=sources","-Dversion=" + getVersion(),"-DartifactId=h2","-DgroupId=com.h2database"));  javadocImpl();  files=files("docs/javadocImpl2");  jar("docs/h2-" + getVersion() + "-javadoc.jar",files,"docs/javadocImpl2");  execScript("mvn",args("deploy:deploy-file","-Dfile=docs/h2-" + getVersion() + "-javadoc.jar","-Durl=file:///data/h2database/m2-repo","-Dpackaging=jar","-Dclassifier=javadoc","-Dversion=" + getVersion(),"-DartifactId=h2","-DgroupId=com.h2database"));  jar();  String pom=new String(readFile(new File("src/installer/pom-template.xml")));  pom=replaceAll(pom,"@version@",getVersion());  writeFile(new File("bin/pom.xml"),pom.getBytes());  execScript("mvn",args("deploy:deploy-file","-Dfile=bin/h2" + getJarSuffix(),"-Durl=file:///data/h2database/m2-repo","-Dpackaging=jar","-Dversion=" + getVersion(),"-DpomFile=bin/pom.xml","-DartifactId=h2","-DgroupId=com.h2database"));  files=files("src/main");  copy("docs",files,"src/main");  files=files("docs").keep("docs/org/h2/mvstore/*").exclude("docs/org/h2/mvstore/db/*").keep("*.java");  files.addAll(files("docs").keep("docs/META-INF/*"));  manifest=new String(readFile(new File("src/installer/source-manifest.mf")));  manifest=replaceAll(manifest,"${version}",getVersion());  writeFile(new File("docs/META-INF/MANIFEST.MF"),manifest.getBytes());  jar("docs/h2-mvstore-" + getVersion() + "-sources.jar",files,"docs");  delete("docs/org");  delete("docs/META-INF");  execScript("mvn",args("deploy:deploy-file","-Dfile=docs/h2-mvstore-" + getVersion() + "-sources.jar","-Durl=file:///data/h2database/m2-repo","-Dpackaging=jar","-Dclassifier=sources","-Dversion=" + getVersion(),"-DartifactId=h2-mvstore","-DgroupId=com.h2database"));  javadocImpl();  files=files("docs/javadocImpl3");  jar("docs/h2-mvstore-" + getVersion() + "-javadoc.jar",files,"docs/javadocImpl3");  execScript("mvn",args("deploy:deploy-file","-Dfile=docs/h2-mvstore-" + getVersion() + "-javadoc.jar","-Durl=file:///data/h2database/m2-repo","-Dpackaging=jar","-Dclassifier=javadoc","-Dversion=" + getVersion(),"-DartifactId=h2-mvstore","-DgroupId=com.h2database"));  jarMVStore();  pom=new String(readFile(new File("src/installer/pom-mvstore-template.xml")));  pom=replaceAll(pom,"@version@",getVersion());  writeFile(new File("bin/pom.xml"),pom.getBytes());  execScript("mvn",args("deploy:deploy-file","-Dfile=bin/h2-mvstore" + getJarSuffix(),"-Durl=file:///data/h2database/m2-repo","-Dpackaging=jar","-Dversion=" + getVersion(),"-DpomFile=bin/pom.xml","-DartifactId=h2-mvstore","-DgroupId=com.h2database"));}  }
class C{  public void boot(){  if (Controller.options.LOGGING_LEVEL >= 1) {    try {      log=new PrintStream(new FileOutputStream(Controller.options.LOGFILE_NAME));synchronized (log) {        log.println(getTime() + " Logging enabled\n");        log.println(Controller.options);      }    } catch (    IOException e) {      VM.sysWrite("IOException caught in AOSLogging.java while trying to create and start log file.\n");      VM.sysWrite("Please check for file permission problems\n");    }  }  booted=true;}  }
class C{  public Array createArrayOf(final String typeName,final Object[] elements) throws SQLException {  throw ExceptionMapper.getFeatureNotSupportedException("Not yet supported");}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public Date lastModified(){  return DateFormat.RESPONSE_DATE_FORMAT.parseDateTime(lastModified).toDate();}  }
class C{  @Deprecated public Fits(URL myURL,boolean compressed) throws FitsException {  this(myURL);  LOG.log(Level.INFO,"compression ignored, will be autodetected. was set to " + compressed);}  }
class C{  private void repaintLine(LineHighlightInfo lhi){  int offs=lhi.getOffset();  if (offs >= 0 && offs <= textArea.getDocument().getLength()) {    try {      int y=textArea.yForLineContaining(offs);      if (y > -1) {        textArea.repaint(0,y,textArea.getWidth(),textArea.getLineHeight());      }    } catch (    BadLocationException ble) {      ble.printStackTrace();    }  }}  }
class C{  public static long weeksToMillis(double weeks){  return (long)(weeks * 1000 * 7* 24* 60* 60);}  }
class C{  static boolean generateMagic(BC2IR bc2ir,GenerationContext gc,MethodReference meth) throws MagicNotImplementedException {  if (gc.getMethod().hasNoInlinePragma())   gc.forceFrameAllocation();  Atom methodName=meth.getName();  boolean address=(meth.getType() == TypeReference.Address);  TypeReference[] types=meth.getParameterTypes();  TypeReference returnType=meth.getReturnType();  if (address && isLoad(methodName)) {    Operand offset=(types.length == 0) ? AC(Address.zero()) : bc2ir.popAddress();    Operand base=bc2ir.popAddress();    RegisterOperand result=gc.getTemps().makeTemp(returnType);    bc2ir.appendInstruction(Load.create(getOperator(returnType,LOAD_OP),result,base,offset,null));    bc2ir.push(result.copyD2U(),returnType);  } else   if (address && isPrepare(methodName)) {    Operand offset=(types.length == 0) ? AC(Address.zero()) : bc2ir.popAddress();    Operand base=bc2ir.popAddress();    RegisterOperand result=gc.getTemps().makeTemp(returnType);    bc2ir.appendInstruction(Prepare.create(getOperator(returnType,PREPARE_OP),result,base,offset,null));    bc2ir.push(result.copyD2U(),returnType);  } else   if (address && methodName == MagicNames.attempt) {    TypeReference attemptType=types[0];    Operand offset=(types.length == 2) ? AC(Address.zero()) : bc2ir.popAddress();    Operand newVal=bc2ir.pop();    Operand oldVal=bc2ir.pop();    Operand base=bc2ir.popAddress();    RegisterOperand test=gc.getTemps().makeTempInt();    bc2ir.appendInstruction(Attempt.create(getOperator(attemptType,ATTEMPT_OP),test,base,offset,oldVal,newVal,null));    bc2ir.push(test.copyD2U(),returnType);  } else   if (address && methodName == MagicNames.store) {    TypeReference storeType=types[0];    Operand offset=(types.length == 1) ? AC(Address.zero()) : bc2ir.popAddress();    Operand val=bc2ir.pop(storeType);    Operand base=bc2ir.popAddress();    bc2ir.appendInstruction(Store.create(getOperator(storeType,STORE_OP),val,base,offset,null));  } else   if (methodName == MagicNames.getThreadRegister) {    RegisterOperand rop=gc.getTemps().makeTROp();    bc2ir.markGuardlessNonNull(rop);    bc2ir.push(rop);  } else   if (methodName == MagicNames.setThreadRegister) {    Operand val=bc2ir.popRef();    if (val instanceof RegisterOperand) {      bc2ir.appendInstruction(Move.create(REF_MOVE,gc.getTemps().makeTROp(),val));    } else {      String msg=" Unexpected operand Magic.setThreadRegister";      throw MagicNotImplementedException.UNEXPECTED(msg);    }  } else   if (methodName == MagicNames.addressArrayCreate) {    Instruction s=bc2ir.generateAnewarray(null,meth.getType().getArrayElementType());    bc2ir.appendInstruction(s);  } else   if (methodName == MagicNames.addressArrayLength) {    Operand op1=bc2ir.pop();    bc2ir.clearCurrentGuard();    if (bc2ir.do_NullCheck(op1)) {      return true;    }    RegisterOperand t=gc.getTemps().makeTempInt();    Instruction s=GuardedUnary.create(ARRAYLENGTH,t,op1,bc2ir.getCurrentGuard());    bc2ir.push(t.copyD2U());    bc2ir.appendInstruction(s);  } else   if (methodName == MagicNames.addressArrayGet) {    TypeReference elementType=meth.getReturnType();    Operand index=bc2ir.popInt();    Operand ref=bc2ir.popRef();    RegisterOperand offsetI=gc.getTemps().makeTempInt();    RegisterOperand offset=gc.getTemps().makeTempOffset();    RegisterOperand result;    if (meth.getType().isCodeArrayType()) {      if (VM.BuildForIA32) {        result=gc.getTemps().makeTemp(TypeReference.Byte);        bc2ir.appendInstruction(Load.create(BYTE_LOAD,result,ref,index,new LocationOperand(elementType),new TrueGuardOperand()));      } else       if (VM.BuildForPowerPC) {        result=gc.getTemps().makeTemp(TypeReference.Int);        bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new IntConstantOperand(LOG_BYTES_IN_INT)));        bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));        bc2ir.appendInstruction(Load.create(INT_LOAD,result,ref,offset.copy(),new LocationOperand(elementType),new TrueGuardOperand()));      }    } else {      result=gc.getTemps().makeTemp(elementType);      bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new IntConstantOperand(LOG_BYTES_IN_ADDRESS)));      bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));      bc2ir.appendInstruction(Load.create(REF_LOAD,result,ref,offset.copy(),new LocationOperand(elementType),new TrueGuardOperand()));    }    bc2ir.push(result.copyD2U());  } else   if (methodName == MagicNames.addressArraySet) {    TypeReference elementType=meth.getParameterTypes()[1];    Operand val=bc2ir.pop();    Operand index=bc2ir.popInt();    Operand ref=bc2ir.popRef();    RegisterOperand offsetI=gc.getTemps().makeTempInt();    RegisterOperand offset=gc.getTemps().makeTempOffset();    if (meth.getType().isCodeArrayType()) {      if (VM.BuildForIA32) {        bc2ir.appendInstruction(Store.create(BYTE_STORE,val,ref,index,new LocationOperand(elementType),new TrueGuardOperand()));      } else       if (VM.BuildForPowerPC) {        bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new IntConstantOperand(LOG_BYTES_IN_INT)));        bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));        bc2ir.appendInstruction(Store.create(INT_STORE,val,ref,offset.copy(),new LocationOperand(elementType),new TrueGuardOperand()));      }    } else {      bc2ir.appendInstruction(Binary.create(INT_SHL,offsetI,index,new IntConstantOperand(LOG_BYTES_IN_ADDRESS)));      bc2ir.appendInstruction(Unary.create(INT_2ADDRZerExt,offset,offsetI.copy()));      bc2ir.appendInstruction(Store.create(REF_STORE,val,ref,offset.copy(),new LocationOperand(elementType),new TrueGuardOperand()));    }  } else   if (methodName == MagicNames.getIntAtOffset) {    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTempInt();    bc2ir.appendInstruction(Load.create(INT_LOAD,val,object,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setIntAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 4) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand val=bc2ir.popInt();    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    bc2ir.appendInstruction(Store.create(INT_STORE,val,object,offset,loc));  } else   if (methodName == MagicNames.getFloatAtOffset) {    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTempFloat();    bc2ir.appendInstruction(Load.create(FLOAT_LOAD,val,object,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setFloatAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 4) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand val=bc2ir.popFloat();    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    bc2ir.appendInstruction(Store.create(FLOAT_STORE,val,object,offset,loc));  } else   if (methodName == MagicNames.getWordAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 3) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Word);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,loc));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.getAddressAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 3) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Address);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,loc));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.getExtentAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 3) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Extent);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,loc));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.getOffsetAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 3) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Offset);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,loc));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setWordAtOffset || methodName == MagicNames.setAddressAtOffset || methodName == MagicNames.setOffsetAtOffset || methodName == MagicNames.setExtentAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 4) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand val=bc2ir.popRef();    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    bc2ir.appendInstruction(Store.create(REF_STORE,val,object,offset,loc));  } else   if (methodName == MagicNames.getLongAtOffset) {    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTempLong();    bc2ir.appendInstruction(Load.create(LONG_LOAD,val,object,offset,null));    bc2ir.pushDual(val.copyD2U());  } else   if (methodName == MagicNames.setLongAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 4) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand val=bc2ir.popLong();    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    bc2ir.appendInstruction(Store.create(LONG_STORE,val,object,offset,loc));  } else   if (methodName == MagicNames.getDoubleAtOffset) {    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTempDouble();    bc2ir.appendInstruction(Load.create(DOUBLE_LOAD,val,object,offset,null));    bc2ir.pushDual(val.copyD2U());  } else   if (methodName == MagicNames.setDoubleAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 4) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand val=bc2ir.popDouble();    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    bc2ir.appendInstruction(Store.create(DOUBLE_STORE,val,object,offset,loc));  } else   if (methodName == MagicNames.getObjectAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 3) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.JavaLangObject);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,loc));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.getTIBAtOffset) {    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.TIB);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,object,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setObjectAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 4) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand val=bc2ir.popRef();    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    bc2ir.appendInstruction(Store.create(REF_STORE,val,object,offset,loc));  } else   if (methodName == MagicNames.getByteAtOffset) {    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Byte);    bc2ir.appendInstruction(Load.create(BYTE_LOAD,val,object,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.getUnsignedByteAtOffset) {    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Byte);    bc2ir.appendInstruction(Load.create(UBYTE_LOAD,val,object,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setByteAtOffset || methodName == MagicNames.setBooleanAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 4) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand val=bc2ir.popInt();    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    bc2ir.appendInstruction(Store.create(BYTE_STORE,val,object,offset,loc));  } else   if (methodName == MagicNames.getShortAtOffset) {    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Char);    bc2ir.appendInstruction(Load.create(SHORT_LOAD,val,object,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.getCharAtOffset) {    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Char);    bc2ir.appendInstruction(Load.create(USHORT_LOAD,val,object,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setCharAtOffset || methodName == MagicNames.setShortAtOffset) {    LocationOperand loc=null;    if (meth.getParameterTypes().length == 4) {      loc=mapToMetadata(bc2ir.popInt());    }    Operand val=bc2ir.popInt();    Operand offset=bc2ir.popAddress();    Operand object=bc2ir.popRef();    bc2ir.appendInstruction(Store.create(SHORT_STORE,val,object,offset,loc));  } else   if (methodName == MagicNames.getMemoryInt) {    Operand memAddr=bc2ir.popAddress();    RegisterOperand val=gc.getTemps().makeTempInt();    bc2ir.appendInstruction(Load.create(INT_LOAD,val,memAddr,AC(Offset.zero()),null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.getMemoryWord) {    Operand memAddr=bc2ir.popAddress();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Word);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,memAddr,AC(Offset.zero()),null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.getMemoryAddress) {    Operand memAddr=bc2ir.popAddress();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Address);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,memAddr,AC(Offset.zero()),null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setMemoryInt) {    Operand val=bc2ir.popInt();    Operand memAddr=bc2ir.popAddress();    bc2ir.appendInstruction(Store.create(INT_STORE,val,memAddr,AC(Offset.zero()),null));  } else   if (methodName == MagicNames.setMemoryWord) {    Operand val=bc2ir.popRef();    Operand memAddr=bc2ir.popAddress();    bc2ir.appendInstruction(Store.create(REF_STORE,val,memAddr,AC(Offset.zero()),null));  } else   if (meth.isSysCall()) {    TypeReference[] args=meth.getParameterTypes();    Instruction call=Call.create(SYSCALL,null,null,null,null,args.length - 1);    for (int i=args.length - 1; i >= 1; i--) {      Call.setParam(call,i - 1,bc2ir.pop(args[i]));    }    Operand functionAddress=bc2ir.pop(args[0]);    Call.setAddress(call,functionAddress);    if (!returnType.isVoidType()) {      RegisterOperand op0=gc.getTemps().makeTemp(returnType);      Call.setResult(call,op0);      bc2ir.push(op0.copyD2U(),returnType);    }    Call.setMethod(call,MethodOperand.STATIC(meth,meth.peekResolvedMethod()));    bc2ir.appendInstruction(call);  } else   if (meth.isSpecializedInvoke()) {    Instruction call=Call.create(CALL,null,null,null,null,types.length - 1);    for (int i=types.length - 1; i >= 2; i--) {      Call.setParam(call,i - 1,bc2ir.pop(types[i]));    }    Operand objectOperand=bc2ir.pop(types[1]);    Call.setParam(call,0,objectOperand);    Operand guard=BC2IR.copyGuardFromOperand(objectOperand);    if (guard == null) {      guard=new TrueGuardOperand();    }    Call.setGuard(call,guard);    RegisterOperand tibObject=gc.getTemps().makeTemp(TypeReference.TIB);    bc2ir.appendInstruction(GuardedUnary.create(GET_OBJ_TIB,tibObject,objectOperand.copy(),guard.copy()));    Operand methodId=bc2ir.popInt();    RegisterOperand tibOffset=gc.getTemps().makeTemp(TypeReference.Int);    bc2ir.appendInstruction(Binary.create(INT_ADD,tibOffset,methodId,new IntConstantOperand(TIB_FIRST_SPECIALIZED_METHOD_INDEX)));    bc2ir.appendInstruction(Binary.create(INT_SHL,tibOffset.copyRO(),tibOffset.copyD2U(),new IntConstantOperand(LOG_BYTES_IN_ADDRESS)));    RegisterOperand codeAddress=gc.getTemps().makeTemp(TypeReference.Address);    bc2ir.appendInstruction(Load.create(REF_LOAD,codeAddress,tibObject.copyD2U(),tibOffset.copyD2U(),null));    Call.setAddress(call,codeAddress.copyD2U());    if (!returnType.isVoidType()) {      RegisterOperand op0=gc.getTemps().makeTemp(returnType);      Call.setResult(call,op0);      bc2ir.push(op0.copyD2U(),returnType);    }    bc2ir.appendInstruction(call);  } else   if (methodName == MagicNames.objectAsType) {    RegisterOperand reg=gc.getTemps().makeTemp(TypeReference.Type);    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));    bc2ir.push(reg.copyD2U());  } else   if (methodName == MagicNames.objectAsThread) {    RegisterOperand reg=gc.getTemps().makeTemp(TypeReference.Thread);    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));    bc2ir.push(reg.copyD2U());  } else   if (methodName == MagicNames.objectAsAddress) {    RegisterOperand reg=gc.getTemps().makeTemp(TypeReference.Address);    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));    bc2ir.push(reg.copyD2U());  } else   if (methodName == MagicNames.addressAsObject) {    RegisterOperand reg=gc.getTemps().makeTemp(TypeReference.JavaLangObject);    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popAddress()));    bc2ir.push(reg.copyD2U());  } else   if (methodName == MagicNames.addressAsTIB) {    RegisterOperand reg=gc.getTemps().makeTemp(TypeReference.TIB);    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popAddress()));    bc2ir.push(reg.copyD2U());  } else   if (methodName == MagicNames.addressAsByteArray) {    RegisterOperand reg=gc.getTemps().makeTemp(TypeReference.ByteArray);    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popAddress()));    bc2ir.push(reg.copyD2U());  } else   if (methodName == MagicNames.objectAsShortArray) {    RegisterOperand reg=gc.getTemps().makeTemp(TypeReference.ShortArray);    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));    bc2ir.push(reg.copyD2U());  } else   if (methodName == MagicNames.objectAsIntArray) {    RegisterOperand reg=gc.getTemps().makeTemp(TypeReference.IntArray);    bc2ir.appendInstruction(Move.create(REF_MOVE,reg,bc2ir.popRef()));    bc2ir.push(reg.copyD2U());  } else   if (methodName == MagicNames.floatAsIntBits) {    Operand val=bc2ir.popFloat();    RegisterOperand op0=gc.getTemps().makeTempInt();    bc2ir.appendInstruction(Unary.create(FLOAT_AS_INT_BITS,op0,val));    bc2ir.push(op0.copyD2U());  } else   if (methodName == MagicNames.intBitsAsFloat) {    Operand val=bc2ir.popInt();    RegisterOperand op0=gc.getTemps().makeTempFloat();    bc2ir.appendInstruction(Unary.create(INT_BITS_AS_FLOAT,op0,val));    bc2ir.push(op0.copyD2U());  } else   if (methodName == MagicNames.doubleAsLongBits) {    Operand val=bc2ir.popDouble();    RegisterOperand op0=gc.getTemps().makeTempLong();    bc2ir.appendInstruction(Unary.create(DOUBLE_AS_LONG_BITS,op0,val));    bc2ir.pushDual(op0.copyD2U());  } else   if (methodName == MagicNames.longBitsAsDouble) {    Operand val=bc2ir.popLong();    RegisterOperand op0=gc.getTemps().makeTempDouble();    bc2ir.appendInstruction(Unary.create(LONG_BITS_AS_DOUBLE,op0,val));    bc2ir.pushDual(op0.copyD2U());  } else   if (methodName == MagicNames.sqrt) {    TypeReference[] args=meth.getParameterTypes();    if (args[0] == TypeReference.Float) {      Operand val=bc2ir.popFloat();      RegisterOperand op0=gc.getTemps().makeTempFloat();      bc2ir.appendInstruction(Unary.create(FLOAT_SQRT,op0,val));      bc2ir.push(op0.copyD2U());    } else     if (args[0] == TypeReference.Double) {      Operand val=bc2ir.popDouble();      RegisterOperand op0=gc.getTemps().makeTempDouble();      bc2ir.appendInstruction(Unary.create(DOUBLE_SQRT,op0,val));      bc2ir.pushDual(op0.copyD2U());    } else {      if (VM.VerifyAssertions)       VM._assert(VM.NOT_REACHED,"SQRT only handles Double or Float operands");    }  } else   if (methodName == MagicNames.getObjectType) {    Operand val=bc2ir.popRef();    if (val.isObjectConstant()) {      bc2ir.push(new ObjectConstantOperand(val.getType().peekType(),Offset.zero()));    } else {      Operand guard=BC2IR.copyGuardFromOperand(val);      if (guard == null) {        guard=new TrueGuardOperand();      }      RegisterOperand tibPtr=gc.getTemps().makeTemp(TypeReference.TIB);      bc2ir.appendInstruction(GuardedUnary.create(GET_OBJ_TIB,tibPtr,val,guard));      RegisterOperand op0;      TypeReference argType=val.getType();      if (argType.isArrayType()) {        op0=gc.getTemps().makeTemp(TypeReference.RVMArray);      } else {        if (argType == TypeReference.JavaLangObject || argType == TypeReference.JavaLangCloneable || argType == TypeReference.JavaIoSerializable) {          op0=gc.getTemps().makeTemp(TypeReference.Type);        } else {          op0=gc.getTemps().makeTemp(TypeReference.Class);        }      }      bc2ir.markGuardlessNonNull(op0);      bc2ir.appendInstruction(Unary.create(GET_TYPE_FROM_TIB,op0,tibPtr.copyD2U()));      bc2ir.push(op0.copyD2U());    }  } else   if (methodName == MagicNames.getArrayLength) {    Operand val=bc2ir.popRef();    RegisterOperand op0=gc.getTemps().makeTempInt();    bc2ir.appendInstruction(GuardedUnary.create(ARRAYLENGTH,op0,val,new TrueGuardOperand()));    bc2ir.push(op0.copyD2U());  } else   if (methodName == MagicNames.invokeClassInitializer) {    Instruction s=Call.create0(CALL,null,bc2ir.popRef(),null);    bc2ir.appendInstruction(s);  } else   if ((methodName == MagicNames.invokeMethodReturningObject) || (methodName == MagicNames.invokeMethodReturningVoid) || (methodName == MagicNames.invokeMethodReturningLong)|| (methodName == MagicNames.invokeMethodReturningDouble)|| (methodName == MagicNames.invokeMethodReturningFloat)|| (methodName == MagicNames.invokeMethodReturningInt)) {    Operand spills=bc2ir.popRef();    Operand fprmeta=bc2ir.popRef();    Operand fprs=bc2ir.popRef();    Operand gprs=bc2ir.popRef();    Operand code=bc2ir.popRef();    RegisterOperand res=null;    if (methodName == MagicNames.invokeMethodReturningObject) {      res=gc.getTemps().makeTemp(TypeReference.JavaLangObject);      bc2ir.push(res.copyD2U());    } else     if (methodName == MagicNames.invokeMethodReturningLong) {      res=gc.getTemps().makeTemp(TypeReference.Long);      bc2ir.push(res.copyD2U(),TypeReference.Long);    } else     if (methodName == MagicNames.invokeMethodReturningDouble) {      res=gc.getTemps().makeTempDouble();      bc2ir.push(res.copyD2U(),TypeReference.Double);    } else     if (methodName == MagicNames.invokeMethodReturningFloat) {      res=gc.getTemps().makeTempFloat();      bc2ir.push(res.copyD2U(),TypeReference.Float);    } else     if (methodName == MagicNames.invokeMethodReturningInt) {      res=gc.getTemps().makeTempInt();      bc2ir.push(res.copyD2U());    }    RVMField target=ArchEntrypoints.reflectiveMethodInvokerInstructionsField;    MethodOperand met=MethodOperand.STATIC(target);    Instruction s=Call.create5(CALL,res,AC(target.getOffset()),met,code,gprs,fprs,fprmeta,spills);    bc2ir.appendInstruction(s);  } else   if (methodName == MagicNames.saveThreadState) {    Operand p1=bc2ir.popRef();    RVMField target=ArchEntrypoints.saveThreadStateInstructionsField;    MethodOperand mo=MethodOperand.STATIC(target);    bc2ir.appendInstruction(Call.create1(CALL,null,AC(target.getOffset()),mo,p1));  } else   if (methodName == MagicNames.threadSwitch) {    Operand p2=bc2ir.popRef();    Operand p1=bc2ir.popRef();    RVMField target=ArchEntrypoints.threadSwitchInstructionsField;    MethodOperand mo=MethodOperand.STATIC(target);    bc2ir.appendInstruction(Call.create2(CALL,null,AC(target.getOffset()),mo,p1,p2));  } else   if (methodName == MagicNames.restoreHardwareExceptionState) {    RVMField target=ArchEntrypoints.restoreHardwareExceptionStateInstructionsField;    MethodOperand mo=MethodOperand.STATIC(target);    bc2ir.appendInstruction(Call.create1(CALL,null,AC(target.getOffset()),mo,bc2ir.popRef()));  } else   if (methodName == MagicNames.prepareInt) {    Operand offset=bc2ir.popAddress();    Operand base=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTempInt();    bc2ir.appendInstruction(Prepare.create(PREPARE_INT,val,base,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.prepareLong) {    Operand offset=bc2ir.popAddress();    Operand base=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTempLong();    bc2ir.appendInstruction(Prepare.create(PREPARE_LONG,val,base,offset,null));    bc2ir.pushDual(val.copyD2U());  } else   if (methodName == MagicNames.prepareObject) {    Operand offset=bc2ir.popAddress();    Operand base=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.JavaLangObject);    bc2ir.appendInstruction(Prepare.create(PREPARE_ADDR,val,base,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.prepareAddress) {    Operand offset=bc2ir.popAddress();    Operand base=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Address);    bc2ir.appendInstruction(Prepare.create(PREPARE_ADDR,val,base,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.prepareWord) {    Operand offset=bc2ir.popAddress();    Operand base=bc2ir.popRef();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Word);    bc2ir.appendInstruction(Prepare.create(PREPARE_ADDR,val,base,offset,null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.attemptInt) {    Operand newVal=bc2ir.popInt();    Operand oldVal=bc2ir.popInt();    Operand offset=bc2ir.popAddress();    Operand base=bc2ir.popRef();    RegisterOperand test=gc.getTemps().makeTempBoolean();    bc2ir.appendInstruction(Attempt.create(ATTEMPT_INT,test,base,offset,oldVal,newVal,null));    bc2ir.push(test.copyD2U());  } else   if (methodName == MagicNames.attemptLong) {    Operand newVal=bc2ir.popLong();    Operand oldVal=bc2ir.popLong();    Operand offset=bc2ir.popAddress();    Operand base=bc2ir.popRef();    RegisterOperand test=gc.getTemps().makeTempBoolean();    bc2ir.appendInstruction(Attempt.create(ATTEMPT_LONG,test,base,offset,oldVal,newVal,null));    bc2ir.push(test.copyD2U());  } else   if (methodName == MagicNames.attemptObject) {    Operand newVal=bc2ir.popRef();    Operand oldVal=bc2ir.popRef();    Operand offset=bc2ir.popAddress();    Operand base=bc2ir.popRef();    RegisterOperand test=gc.getTemps().makeTempBoolean();    bc2ir.appendInstruction(Attempt.create(ATTEMPT_ADDR,test,base,offset,oldVal,newVal,null));    bc2ir.push(test.copyD2U());  } else   if (methodName == MagicNames.attemptAddress) {    Operand newVal=bc2ir.popAddress();    Operand oldVal=bc2ir.popAddress();    Operand offset=bc2ir.popAddress();    Operand base=bc2ir.popRef();    RegisterOperand test=gc.getTemps().makeTempBoolean();    bc2ir.appendInstruction(Attempt.create(ATTEMPT_ADDR,test,base,offset,oldVal,newVal,null));    bc2ir.push(test.copyD2U());  } else   if (methodName == MagicNames.attemptWord) {    Operand newVal=bc2ir.pop();    Operand oldVal=bc2ir.pop();    Operand offset=bc2ir.popAddress();    Operand base=bc2ir.popRef();    RegisterOperand test=gc.getTemps().makeTempBoolean();    bc2ir.appendInstruction(Attempt.create(ATTEMPT_ADDR,test,base,offset,oldVal,newVal,null));    bc2ir.push(test.copyD2U());  } else   if (methodName == MagicNames.fence) {    bc2ir.appendInstruction(Empty.create(FENCE));  } else   if (methodName == MagicNames.combinedLoadBarrier) {    bc2ir.appendInstruction(Empty.create(READ_CEILING));  } else   if (methodName == MagicNames.storeStoreBarrier) {    bc2ir.appendInstruction(Empty.create(WRITE_FLOOR));  } else   if (generatePolymorphicMagic(bc2ir,gc,meth,methodName)) {    return true;  } else   if (methodName == MagicNames.getTimeBase) {    RegisterOperand op0=gc.getTemps().makeTempLong();    bc2ir.appendInstruction(Nullary.create(GET_TIME_BASE,op0));    bc2ir.pushDual(op0.copyD2U());  } else   if (methodName == MagicNames.getInlineDepth) {    bc2ir.push(new IntConstantOperand(gc.getInlineSequence().getInlineDepth()));  } else   if (methodName == MagicNames.isConstantParameter) {    Operand requestedOperand=bc2ir.pop();    if (!(requestedOperand instanceof IntConstantOperand)) {      throw new OptimizingCompilerException("Must supply constant to Magic.isConstantParameter");    }    int requested=((IntConstantOperand)(requestedOperand)).value;    boolean isConstant=gc.getArguments()[requested].isConstant();    bc2ir.push(new IntConstantOperand(isConstant ? 1 : 0));  } else {    if (VM.BuildForIA32) {      return org.jikesrvm.compilers.opt.bc2ir.ia32.GenerateMachineSpecificMagic.generateMagic(bc2ir,gc,meth);    } else {      if (VM.VerifyAssertions)       VM._assert(VM.BuildForPowerPC);      return org.jikesrvm.compilers.opt.bc2ir.ppc.GenerateMachineSpecificMagic.generateMagic(bc2ir,gc,meth);    }  }  return true;}  }
class C{  public boolean hasRole(OrganizationRoleType roleToCheckFor){  for (  OrganizationToRole orgToRole : grantedRoles) {    if (orgToRole.getOrganizationRole().getRoleName() == roleToCheckFor) {      return true;    }  }  return false;}  }
class C{  public AnnotatedTypeCopier(final boolean copyAnnotations){  this.copyAnnotations=copyAnnotations;}  }
class C{  @Override public Move makeMove(int startSquare,int endSquare) throws IllegalArgumentException {  Move move=null;  Move[] legals=getLegalMoves().asArray();  for (int i=0; move == null && i < legals.length; i++) {    Move candidate=legals[i];    if (candidate.getFrom() == startSquare && candidate.getTo() == endSquare && !(candidate.isCastleLong() || candidate.isCastleShort())) {      move=candidate;    }  }  if (move == null) {    throw new IllegalArgumentException("Invalid move: " + getSan(startSquare) + " "+ getSan(endSquare)+ " \n"+ toString());  } else {    forceMove(move);  }  return move;}  }
class C{  public synchronized VisualGraph addGraph(String group,Graph graph){  return addGraph(group,graph,null);}  }
class C{  private boolean shouldSeparateByDetails(final Conversation.ConversationElement convElement,int position){  if (convElement == null || convElement.text == null) {    return false;  }  boolean shouldSeparateMsg=false;  TextMessage previousTextMessage=this.getPreviousMessageFromPosition(position);  if (previousTextMessage != null) {    shouldSeparateMsg=true;    TextMessage nextTextMessage=this.getNextMessageFromPosition(position);    if (nextTextMessage != null) {      long diff=nextTextMessage.getTimestamp() - convElement.text.getTimestamp();      if (diff < MINUTE) {        shouldSeparateMsg=false;      }    }  }  return shouldSeparateMsg;}  }
class C{  public void registerUnregisteredNamespaces(){  for (int i=0; i < m_unregisteredExtensions.size(); i++) {    String ns=(String)m_unregisteredExtensions.get(i);    ExtensionNamespaceSupport extNsSpt=defineJavaNamespace(ns);    if (extNsSpt != null)     m_extensions.add(extNsSpt);  }}  }
class C{  public static void printDetail(Class<?> c,String msg){  if (Logger.printDetails) {    String preamble;    if (c != null)     preamble="[" + c.getSimpleName() + "]"; else     preamble="";synchronized (System.err) {      System.err.println(preamble + " " + msg);    }  }}  }
class C{  protected final synchronized void repaint(){  if (component != null) {    component.repaint(x,y,width,height);  }}  }
class C{  public final void testGetPrivateExponent(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPrivateExponent()));}  }
class C{  public Vector2f(){  x=y=0;}  }
class C{  public void initialize() throws IOException {  cache.initialize();}  }
class C{  public SVGOMAElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  private void doForm(PDFObject obj) throws IOException {  PDFPage formCmds=(PDFPage)obj.getCache();  if (formCmds == null) {    Matrix at;    RectF bbox;    PDFObject matrix=obj.getDictRef("Matrix");    if (matrix == null) {      at=new Matrix();    } else {      float elts[]=new float[6];      for (int i=0; i < elts.length; i++) {        elts[i]=((PDFObject)matrix.getAt(i)).getFloatValue();      }      at=new Matrix();      Utils.setMatValues(at,elts);    }    PDFObject bobj=obj.getDictRef("BBox");    bbox=new RectF(bobj.getAt(0).getFloatValue(),bobj.getAt(1).getFloatValue(),bobj.getAt(2).getFloatValue(),bobj.getAt(3).getFloatValue());    formCmds=new PDFPage(bbox,0);    formCmds.addXform(at);    HashMap<String,PDFObject> r=new HashMap<String,PDFObject>(resources);    PDFObject rsrc=obj.getDictRef("Resources");    if (rsrc != null) {      r.putAll(rsrc.getDictionary());    }    PDFParser form=new PDFParser(formCmds,obj.getStream(),r);    form.go(true);    obj.setCache(formCmds);  }  cmds.addPush();  cmds.addCommands(formCmds);  cmds.addPop();}  }
class C{  public HTMLSerializer(final Writer writer){  this.writer=writer;}  }
class C{  private void resumeExpiration(){  boolean isNoAccess=getMembershipAttributes().getLossAction().isNoAccess();  boolean isLimitedAccess=getMembershipAttributes().getLossAction().isLimitedAccess();  if (!(isNoAccess || isLimitedAccess)) {    return;  }  if (getEntryTimeToLive().getTimeout() > 0 && (isNoAccess || (isLimitedAccess && getEntryTimeToLive().getAction().isDistributed()))) {    rescheduleEntryExpiryTasks();  } else   if (getEntryIdleTimeout().getTimeout() > 0 && (isNoAccess || (isLimitedAccess && getEntryIdleTimeout().getAction().isDistributed()))) {    rescheduleEntryExpiryTasks();  } else   if (getCustomEntryTimeToLive() != null || getCustomEntryIdleTimeout() != null) {    rescheduleEntryExpiryTasks();  }  if (getRegionTimeToLive().getTimeout() > 0 && (isNoAccess || (isLimitedAccess && getRegionTimeToLive().getAction().isDistributed()))) {    addTTLExpiryTask();  }  if (getRegionIdleTimeout().getTimeout() > 0 && (isNoAccess || (isLimitedAccess && getRegionIdleTimeout().getAction().isDistributed()))) {    addIdleExpiryTask();  }}  }
class C{  public void dequeueOneToOneFileInfo(String fileTransferId,String fileInfo,boolean displayReportsEnabled,boolean deliverReportsEnabled,OneToOneFileTransferImpl oneToOneFileTransfer) throws PayloadException, NetworkException, SessionUnavailableException {  mImService.acceptStoreAndForwardMessageSessionIfSuchExists(mContact);  OneToOneChatSession session=mImService.getOneToOneChatSession(mContact);  if (session == null) {    if (mImService.isChatSessionAvailable()) {      sendFileInfoInNewSession(fileTransferId,fileInfo,oneToOneFileTransfer);    } else {      throw new SessionUnavailableException("There is no available chat session for contact '" + mContact + "'!");    }  } else   if (session.isMediaEstablished()) {    session.sendFileInfo(oneToOneFileTransfer,fileTransferId,fileInfo,displayReportsEnabled,deliverReportsEnabled);  } else   if (session.isInitiatedByRemote()) {    if (sLogger.isActivated()) {      sLogger.debug("Accept one-to-one chat session with contact ".concat(mContact.toString()));    }    session.acceptSession();  } else {    if (mImService.isChatSessionAvailable()) {      sendFileInfoInNewSession(fileTransferId,fileInfo,oneToOneFileTransfer);    } else {      throw new SessionUnavailableException("There is no available chat session for contact '" + mContact + "'!");    }  }}  }
class C{  public void addDirectionsBulletinPane(String message){  Label l=new Label(message);  l.setBackground(new Background(new BackgroundFill(Color.color(Color.YELLOW.getRed(),Color.YELLOW.getGreen(),Color.YELLOW.getBlue(),0.4d),new CornerRadii(5),null)));  l.setWrapText(true);  l.setPrefWidth(200);  l.setPadding(new Insets(5,5,5,5));  directionsBox.getChildren().add(l);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected void clearCoRoutine(SAXException ex){  if (null != ex)   m_transformer.setExceptionThrown(ex);  if (m_dtm instanceof SAX2DTM) {    if (DEBUG)     System.err.println("In clearCoRoutine...");    try {      SAX2DTM sax2dtm=((SAX2DTM)m_dtm);      if (null != m_contentHandler && m_contentHandler instanceof IncrementalSAXSource_Filter) {        IncrementalSAXSource_Filter sp=(IncrementalSAXSource_Filter)m_contentHandler;        sp.deliverMoreNodes(false);      }      sax2dtm.clearCoRoutine(true);      m_contentHandler=null;      m_dtdHandler=null;      m_entityResolver=null;      m_errorHandler=null;      m_lexicalHandler=null;    } catch (    Throwable throwable) {      throwable.printStackTrace();    }    if (DEBUG)     System.err.println("...exiting clearCoRoutine");  }}  }
class C{  public static boolean compileClasses(String nameRoot){  return false;}  }
class C{  public final void mulTransposeBoth(Matrix4f m1,Matrix4f m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m10 * m2.m01 + m1.m20 * m2.m02 + m1.m30 * m2.m03;    this.m01=m1.m00 * m2.m10 + m1.m10 * m2.m11 + m1.m20 * m2.m12 + m1.m30 * m2.m13;    this.m02=m1.m00 * m2.m20 + m1.m10 * m2.m21 + m1.m20 * m2.m22 + m1.m30 * m2.m23;    this.m03=m1.m00 * m2.m30 + m1.m10 * m2.m31 + m1.m20 * m2.m32 + m1.m30 * m2.m33;    this.m10=m1.m01 * m2.m00 + m1.m11 * m2.m01 + m1.m21 * m2.m02 + m1.m31 * m2.m03;    this.m11=m1.m01 * m2.m10 + m1.m11 * m2.m11 + m1.m21 * m2.m12 + m1.m31 * m2.m13;    this.m12=m1.m01 * m2.m20 + m1.m11 * m2.m21 + m1.m21 * m2.m22 + m1.m31 * m2.m23;    this.m13=m1.m01 * m2.m30 + m1.m11 * m2.m31 + m1.m21 * m2.m32 + m1.m31 * m2.m33;    this.m20=m1.m02 * m2.m00 + m1.m12 * m2.m01 + m1.m22 * m2.m02 + m1.m32 * m2.m03;    this.m21=m1.m02 * m2.m10 + m1.m12 * m2.m11 + m1.m22 * m2.m12 + m1.m32 * m2.m13;    this.m22=m1.m02 * m2.m20 + m1.m12 * m2.m21 + m1.m22 * m2.m22 + m1.m32 * m2.m23;    this.m23=m1.m02 * m2.m30 + m1.m12 * m2.m31 + m1.m22 * m2.m32 + m1.m32 * m2.m33;    this.m30=m1.m03 * m2.m00 + m1.m13 * m2.m01 + m1.m23 * m2.m02 + m1.m33 * m2.m03;    this.m31=m1.m03 * m2.m10 + m1.m13 * m2.m11 + m1.m23 * m2.m12 + m1.m33 * m2.m13;    this.m32=m1.m03 * m2.m20 + m1.m13 * m2.m21 + m1.m23 * m2.m22 + m1.m33 * m2.m23;    this.m33=m1.m03 * m2.m30 + m1.m13 * m2.m31 + m1.m23 * m2.m32 + m1.m33 * m2.m33;  } else {    float m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;    m00=m1.m00 * m2.m00 + m1.m10 * m2.m01 + m1.m20 * m2.m02 + m1.m30 * m2.m03;    m01=m1.m00 * m2.m10 + m1.m10 * m2.m11 + m1.m20 * m2.m12 + m1.m30 * m2.m13;    m02=m1.m00 * m2.m20 + m1.m10 * m2.m21 + m1.m20 * m2.m22 + m1.m30 * m2.m23;    m03=m1.m00 * m2.m30 + m1.m10 * m2.m31 + m1.m20 * m2.m32 + m1.m30 * m2.m33;    m10=m1.m01 * m2.m00 + m1.m11 * m2.m01 + m1.m21 * m2.m02 + m1.m31 * m2.m03;    m11=m1.m01 * m2.m10 + m1.m11 * m2.m11 + m1.m21 * m2.m12 + m1.m31 * m2.m13;    m12=m1.m01 * m2.m20 + m1.m11 * m2.m21 + m1.m21 * m2.m22 + m1.m31 * m2.m23;    m13=m1.m01 * m2.m30 + m1.m11 * m2.m31 + m1.m21 * m2.m32 + m1.m31 * m2.m33;    m20=m1.m02 * m2.m00 + m1.m12 * m2.m01 + m1.m22 * m2.m02 + m1.m32 * m2.m03;    m21=m1.m02 * m2.m10 + m1.m12 * m2.m11 + m1.m22 * m2.m12 + m1.m32 * m2.m13;    m22=m1.m02 * m2.m20 + m1.m12 * m2.m21 + m1.m22 * m2.m22 + m1.m32 * m2.m23;    m23=m1.m02 * m2.m30 + m1.m12 * m2.m31 + m1.m22 * m2.m32 + m1.m32 * m2.m33;    m30=m1.m03 * m2.m00 + m1.m13 * m2.m01 + m1.m23 * m2.m02 + m1.m33 * m2.m03;    m31=m1.m03 * m2.m10 + m1.m13 * m2.m11 + m1.m23 * m2.m12 + m1.m33 * m2.m13;    m32=m1.m03 * m2.m20 + m1.m13 * m2.m21 + m1.m23 * m2.m22 + m1.m33 * m2.m23;    m33=m1.m03 * m2.m30 + m1.m13 * m2.m31 + m1.m23 * m2.m32 + m1.m33 * m2.m33;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m03=m03;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m13=m13;    this.m20=m20;    this.m21=m21;    this.m22=m22;    this.m23=m23;    this.m30=m30;    this.m31=m31;    this.m32=m32;    this.m33=m33;  }}  }
class C{  public static boolean isPertinentToApplicability(PsiExpression expr,PsiMethod method){  return isPertinentToApplicability(expr,method,null);}  }
class C{  public ArrayDeque<E> clone(){  try {    @SuppressWarnings("unchecked") ArrayDeque<E> result=(ArrayDeque<E>)super.clone();    result.elements=Arrays.copyOf(elements,elements.length);    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  private PostgreSQLProjectMixedGraphsLoader(){}  }
class C{  public int prestartAllCoreThreads(){  int n=0;  while (addWorker(null,true))   ++n;  return n;}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  private void createHostEntitiesAndAllocateVmsAndContainers(int mgmtCount,int cloudCount) throws Throwable {  for (int i=0; i < mgmtCount; i++) {    TestHelper.createHostService(cloudStoreMachine,Collections.singleton(UsageTag.MGMT.name()));  }  for (int i=0; i < cloudCount; i++) {    TestHelper.createHostService(cloudStoreMachine,Collections.singleton(UsageTag.CLOUD.name()));  }  CreateManagementPlaneLayoutWorkflowService.State workflowStartState=new CreateManagementPlaneLayoutWorkflowService.State();  workflowStartState.taskPollDelay=10;  workflowStartState.hostQuerySpecification=MiscUtils.generateHostQuerySpecification(null,UsageTag.MGMT.name());  CreateManagementPlaneLayoutWorkflowService.State finalState=machine.callServiceAndWaitForState(CreateManagementPlaneLayoutWorkflowFactoryService.SELF_LINK,workflowStartState,CreateManagementPlaneLayoutWorkflowService.State.class,null);  TestHelper.assertTaskStateFinished(finalState.taskState);  TestHelper.createDeploymentService(cloudStoreMachine);}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public Object clone(){  try {    X509CRLSelector copy=(X509CRLSelector)super.clone();    if (issuerNames != null) {      copy.issuerNames=new HashSet<Object>(issuerNames);      copy.issuerX500Principals=new HashSet<X500Principal>(issuerX500Principals);    }    return copy;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString(),e);  }}  }
class C{  public org.codehaus.cargo.container.configuration.Configuration createConfiguration(String containerId,ContainerType containerType,Deployable[] deployables,CargoProject project) throws MojoExecutionException {  ConfigurationFactory factory=new DefaultConfigurationFactory();  if (getImplementation() != null) {    try {      Class configurationClass=Class.forName(getImplementation(),true,this.getClass().getClassLoader());      factory.registerConfiguration(containerId,containerType,getType(),configurationClass);    } catch (    ClassNotFoundException cnfe) {      throw new MojoExecutionException("Custom configuration implementation [" + getImplementation() + "] cannot be loaded",cnfe);    }  }  org.codehaus.cargo.container.configuration.Configuration configuration;  if (getHome() == null) {    if (project.isDaemonRun()) {      configuration=factory.createConfiguration(containerId,containerType,getType(),"");    } else     if (ConfigurationType.RUNTIME.equals(getType())) {      configuration=factory.createConfiguration(containerId,containerType,getType(),null);    } else {      File home=new File(project.getBuildDirectory(),"cargo/configurations/" + containerId);      configuration=factory.createConfiguration(containerId,containerType,getType(),home.getAbsolutePath());    }  } else {    configuration=factory.createConfiguration(containerId,containerType,getType(),getHome());  }  if (getPropertiesFile() != null) {    Properties properties=new Properties();    try {      InputStream inputStream=new FileInputStream(getPropertiesFile());      try {        properties.load(new BufferedInputStream(inputStream));      }  finally {        inputStream.close();      }      for (Enumeration<?> propertyNames=properties.propertyNames(); propertyNames.hasMoreElements(); ) {        String propertyName=(String)propertyNames.nextElement();        String propertyValue=properties.getProperty(propertyName);        configuration.setProperty(propertyName,propertyValue);      }    } catch (    FileNotFoundException e) {      configuration.getLogger().warn("Configuration property file [" + getPropertiesFile() + "] cannot be read",getClass().getName());    }catch (    IOException ioe) {      throw new MojoExecutionException("Configuration property file [" + getPropertiesFile() + "] cannot be loaded",ioe);    }  }  if (getProperties() != null) {    for (    Map.Entry<String,String> property : getProperties().entrySet()) {      String propertyValue=property.getValue();      if (propertyValue == null) {        propertyValue="";      }      configuration.setProperty(property.getKey(),propertyValue);    }  }  if (configuration instanceof StandaloneLocalConfiguration && getXmlReplacements() != null) {    StandaloneLocalConfiguration standaloneLocalConfiguration=(StandaloneLocalConfiguration)configuration;    for (    XmlReplacement xmlReplacement : getXmlReplacements()) {      standaloneLocalConfiguration.addXmlReplacement(xmlReplacement);    }  }  if (configuration instanceof LocalConfiguration) {    LocalConfiguration localConfiguration=(LocalConfiguration)configuration;    if (deployables != null) {      addStaticDeployables(containerId,localConfiguration,deployables,project);    }    if (getResources() != null) {      addResources(containerId,localConfiguration,project);    }    if (getUsers() != null) {      addUsers(getUsers(),localConfiguration);    }    if (getConfigfiles() != null) {      for (int i=0; i < getConfigfiles().length; i++) {        FileConfig fileConfig=getConfigfiles()[i];        localConfiguration.setConfigFileProperty(fileConfig);      }    }    if (getFiles() != null) {      for (int i=0; i < getFiles().length; i++) {        FileConfig fileConfig=getFiles()[i];        localConfiguration.setFileProperty(fileConfig);      }    }  }  return configuration;}  }
class C{  @Override public int read() throws IOException {  if (closed) {    throw new FileUploadException(ItemSkippedException);  }  if (available() == 0 && makeAvailable() == 0) {    return -1;  }  ++total;  int b=buffer[head++];  if (b >= 0) {    return b;  }  return b + BYTE_POSITIVE_OFFSET;}  }
class C{  private List<Runnable> drainQueue(){  BlockingQueue<Runnable> q=workQueue;  ArrayList<Runnable> taskList=new ArrayList<Runnable>();  q.drainTo(taskList);  if (!q.isEmpty()) {    for (    Runnable r : q.toArray(new Runnable[0])) {      if (q.remove(r))       taskList.add(r);    }  }  return taskList;}  }
class C{  @Override public void removeLafManagerListener(@NotNull final LafManagerListener l){  myListenerList.remove(LafManagerListener.class,l);}  }
class C{  @Override public synchronized final int read() throws IOException {  if (buf_pos >= buf_end) {    if (fillBuffer() < 0)     return -1;  }  return buf_end == 0 ? -1 : buffer[buf_pos++];}  }
class C{  private String processNodeName(Tree node){  String code=node.getText();  try {    NodeName nodeName=NodeName.findByCode(code);    return nodeName.getName();  } catch (  NodeNameForCodeDoesNotExistException e) {  }  return code;}  }
class C{  public void on(boolean on){  isOn=on;}  }
class C{  public CompiereColor(){  this(TYPE_GRADIENT);}  }
class C{  private synchronized void block() throws IOException {  int n=selector.select();  selector.selectedKeys().clear();  available();}  }
class C{  public void onDownloadCompleted(DownloadInfo downloadInfo,String notifyURI){  long downloadId=downloadInfo.getDownloadId();  OMAInfo omaInfo=mPendingOMADownloads.get(downloadId);  if (omaInfo == null) {    omaInfo=new OMAInfo();    omaInfo.addAttributeValue(OMA_INSTALL_NOTIFY_URI,notifyURI);  }  sendInstallNotificationAndNextStep(omaInfo,downloadInfo,DOWNLOAD_STATUS_SUCCESS);  mPendingOMADownloads.remove(downloadId);}  }
class C{  public static PrintStream systemDotErr(){  return System.err;}  }
class C{  public static void showScreen(Window window,String position){  SessionManager.getAppDesktop().showWindow(window,position);}  }
class C{  public final boolean lessEquals(ProtocolVersion version){  return isComparable(version) && (compareToVersion(version) <= 0);}  }
class C{  public void handleEvent(Event evt){  Element target=(Element)evt.getTarget();  Cursor cursor=CSSUtilities.convertCursor(target,BridgeContext.this);  if (cursor != null) {    userAgent.setSVGCursor(cursor);  }}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  m_ModelBuilt=false;  if (!m_checksTurnedOff) {    getCapabilities().testWithFail(data);    if (m_outputAdditionalStats) {      boolean ok=true;      for (int i=0; i < data.numInstances(); i++) {        if (data.instance(i).weight() != 1) {          ok=false;          break;        }      }      if (!ok) {        throw new Exception("Can only compute additional statistics on unweighted data");      }    }    data=new Instances(data);    data.deleteWithMissingClass();    m_TransformFilter=new NominalToBinary();    m_TransformFilter.setInputFormat(data);    data=Filter.useFilter(data,m_TransformFilter);    m_MissingFilter=new ReplaceMissingValues();    m_MissingFilter.setInputFormat(data);    data=Filter.useFilter(data,m_MissingFilter);    data.deleteWithMissingClass();  } else {    m_TransformFilter=null;    m_MissingFilter=null;  }  m_ClassIndex=data.classIndex();  m_TransformedData=data;  m_Coefficients=null;  m_SelectedAttributes=new boolean[data.numAttributes()];  m_Means=new double[data.numAttributes()];  m_StdDevs=new double[data.numAttributes()];  for (int j=0; j < data.numAttributes(); j++) {    if (j != m_ClassIndex) {      m_SelectedAttributes[j]=true;      m_Means[j]=data.meanOrMode(j);      m_StdDevs[j]=Math.sqrt(data.variance(j));      if (m_StdDevs[j] == 0) {        m_SelectedAttributes[j]=false;      }    }  }  m_ClassStdDev=Math.sqrt(data.variance(m_TransformedData.classIndex()));  m_ClassMean=data.meanOrMode(m_TransformedData.classIndex());  findBestModel();  if (m_outputAdditionalStats) {    int k=1;    for (int i=0; i < data.numAttributes(); i++) {      if (i != data.classIndex()) {        if (m_SelectedAttributes[i]) {          k++;        }      }    }    m_df=m_TransformedData.numInstances() - k;    double se=calculateSE(m_SelectedAttributes,m_Coefficients);    m_RSquared=RegressionAnalysis.calculateRSquared(m_TransformedData,se);    m_RSquaredAdj=RegressionAnalysis.calculateAdjRSquared(m_RSquared,m_TransformedData.numInstances(),k);    m_FStat=RegressionAnalysis.calculateFStat(m_RSquared,m_TransformedData.numInstances(),k);    m_StdErrorOfCoef=RegressionAnalysis.calculateStdErrorOfCoef(m_TransformedData,m_SelectedAttributes,se,m_TransformedData.numInstances(),k);    m_TStats=RegressionAnalysis.calculateTStats(m_Coefficients,m_StdErrorOfCoef,k);  }  if (m_Minimal) {    m_TransformedData=null;    m_Means=null;    m_StdDevs=null;  } else {    m_TransformedData=new Instances(data,0);  }  m_ModelBuilt=true;}  }
class C{  public synchronized void deliverHighPriorityTasks(WorkerCategory category){  Collection<GenericClusterRequest> tasks=newHighPriorityTasks.get(category);  if (tasks.isEmpty())   return;  Collection<WrappedResponse> wrs=singlePointChannels.get(category);  if (!wrs.isEmpty()) {    WrappedResponse wr=wrs.iterator().next();    try {      wr.response.setContentType("application/json");      OutputStream os=wr.response.getOutputStream();      mapper.writeValue(os,tasks);      os.close();      wr.response.resume();      newHighPriorityTasks.removeAll(category);      return;    } catch (    Exception e) {      LOG.info("Failed to deliver single point job via side channel, reverting to normal channel",e);    } finally {      removeSinglePointChannel(category,wr);    }  }  tasks.forEach(null);  LOG.info("No side channel available for graph {}, delivering {} tasks via normal channel",category,tasks.size());  newHighPriorityTasks.removeAll(category);  notify();}  }
class C{  GeneralRange<T> reverse(){  GeneralRange<T> result=reverse;  if (result == null) {    result=new GeneralRange<T>(Ordering.from(comparator).reverse(),hasUpperBound,getUpperEndpoint(),getUpperBoundType(),hasLowerBound,getLowerEndpoint(),getLowerBoundType());    result.reverse=this;    return this.reverse=result;  }  return result;}  }
class C{  @Override protected void checkNumberOfInputs(int inputLength){  if (inputLength != 3) {    throw new FunctionInputException("expression_parser.function_wrong_input",getFunctionName(),3,inputLength);  }}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  traceHandler.traceDebug(TAG,"onUpgrade");  try {    db.execSQL("DROP TABLE IF EXISTS " + ARRIVED_MESSAGE_TABLE_NAME);  } catch (  SQLException e) {    traceHandler.traceException(TAG,"onUpgrade",e);    throw e;  }  onCreate(db);  traceHandler.traceDebug(TAG,"onUpgrade complete");}  }
class C{  public static final boolean isValidExpression(@Nonnull String value){  boolean ret=StringUtils.isNotBlank(value);  if (ret) {    try {      evaluateExpression(value,TEST_VALUE,TEST_VALUE,TEST_VALUE);    } catch (    Exception e) {      ret=false;    }  }  return ret;}  }
class C{  protected double estimateMaximumTickLabelHeight(Graphics2D g2){  RectangleInsets tickLabelInsets=getTickLabelInsets();  double result=tickLabelInsets.getTop() + tickLabelInsets.getBottom();  Font tickLabelFont=getTickLabelFont();  FontRenderContext frc=g2.getFontRenderContext();  result+=tickLabelFont.getLineMetrics("123",frc).getHeight();  return result;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8){  return construct(e1,e2,e3,e4,e5,e6,e7,e8);}  }
class C{  public boolean isQueued(){  return _bucket >= 0;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:20.658 -0500",hash_original_method="0EFE42460BC7E37E4F419C0570A5DDF5",hash_generated_method="C853337CD32C4B29B5CE9F3D93BA12E8") private UnsafeAccess(){}  }
class C{  public void constValueIndex(String value) throws IOException {  constValueIndex('s',pool.addUtf8Info(value));}  }
class C{  protected double computeSize(double size,String units,double containerDimension){  if (AVKey.FRACTION.equals(units))   return size * containerDimension; else   return size;}  }
class C{  public static long deserializeLong(byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  long val=((((long)buffer[0 + offsetInt]) & 0xFFL) << 56) | ((((long)buffer[1 + offsetInt]) & 0xFFL) << 48) | ((((long)buffer[2 + offsetInt]) & 0xFFL) << 40)| ((((long)buffer[3 + offsetInt]) & 0xFFL) << 32)| ((((long)buffer[4 + offsetInt]) & 0xFFL) << 24)| ((((long)buffer[5 + offsetInt]) & 0xFFL) << 16)| ((((long)buffer[6 + offsetInt]) & 0xFFL) << 8)| (((long)buffer[7 + offsetInt]) & 0xFFL);  offset.add(Type.LONG.getByteSize());  return val;}  }
class C{  public ShortVector(short[] values){  this.values=values.clone();}  }
class C{  @SuppressWarnings({"cast","unchecked"}) public List<Note> listNote(User user) throws UnauthorizedException {  if (user == null) {    throw new UnauthorizedException("missing user");  }  EntityManager mgr=getEntityManager();  List<Note> result=new ArrayList<Note>();  try {    Query query=mgr.createQuery("select n from Note n where n.emailAddress = :emailAddress");    query.setParameter("emailAddress",user.getEmail());    for (    Object obj : (List<Object>)query.getResultList()) {      result.add(((Note)obj));    }  }  finally {    mgr.close();  }  return result;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public byte[] loadAsBytes(){  try {    InputStream inputStream=new FileInputStream(location);    return FileCopyUtils.copyToByteArray(inputStream);  } catch (  IOException e) {    throw new CassandraMigrationException("Unable to load filesystem resource: " + location.getPath(),e);  }}  }
class C{  public CDatabaseLoaderOperation(final IDatabase database){  m_database=database;  m_loadProgressPanel.start();  database.addListener(m_databaseListener);  CGlobalProgressManager.instance().add(this);}  }
class C{  public PlayerHandler(Looper looper){  super(looper);}  }
class C{  private void calculateGTPointQualities(){  for (int p=0; p < numPoints; p++) {    CMMPoint cmdp=cmmpoints.get(p);    if (!cmdp.isNoise()) {      cmdp.connectivity=getConnectionValue(cmdp,cmdp.workclass());      cmdp.p.setMeasureValue("Connectivity",cmdp.connectivity);    }  }}  }
class C{  public GeneralizeTypeDescriptor(){  super(IJavaRefactorings.GENERALIZE_TYPE);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static NumericEntityEscaper below(final int codepoint){  return outsideOf(codepoint,Integer.MAX_VALUE);}  }
class C{  private static void uaColSumEqNe(MatrixBlock in1Val,MatrixBlock outVal,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  if (in1Val.isInSparseFormat())   s_uaColSumEqNe(in1Val,outVal,bv,bOp); else   d_uaColSumEqNe(in1Val,outVal,bv,bOp);}  }
class C{  public void finished(long chainLength){}  }
class C{  public T href(String value){  return attr("href",value);}  }
class C{  public RotationControl(int mouseButton){  m_button=mouseButton;}  }
class C{  public void putPrintableString(String s) throws IOException {  writeString(s,DerValue.tag_PrintableString,"ASCII");}  }
class C{  public float readFloat(){  return scanner.nextFloat();}  }
class C{  private void resetClosedCaptioning(){  try {    TextView subTitlesTv=(TextView)getActivity().findViewById(R.id.txtSubtitles_tv);    if (subTitlesTv != null) {      subTitlesTv.setText("");      subTitlesTv.setVisibility(View.INVISIBLE);    }  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize,int index,int length,boolean useSystemDefault){  if (useSystemDefault) {    return;  }  int textLength=text.length();  int textLengthToProcessMax=textLength - index;  int textLengthToProcess=length < 0 || length >= textLengthToProcessMax ? textLength : (length + index);  EmojiconSpan[] oldSpans=text.getSpans(0,textLength,EmojiconSpan.class);  for (int i=0; i < oldSpans.length; i++) {    text.removeSpan(oldSpans[i]);  }  int skip;  for (int i=index; i < textLengthToProcess; i+=skip) {    skip=0;    int icon=0;    char c=text.charAt(i);    if (isSoftBankEmoji(c)) {      icon=getSoftbankEmojiResource(c);      skip=icon == 0 ? 0 : 1;    }    if (icon == 0) {      int unicode=Character.codePointAt(text,i);      skip=Character.charCount(unicode);      if (unicode > 0xff) {        icon=getEmojiResource(context,unicode);      }      if (i + skip < textLengthToProcess) {        int followUnicode=Character.codePointAt(text,i + skip);        if (followUnicode == 0xfe0f) {          int followSkip=Character.charCount(followUnicode);          if (i + skip + followSkip < textLengthToProcess) {            int nextFollowUnicode=Character.codePointAt(text,i + skip + followSkip);            if (nextFollowUnicode == 0x20e3) {              int nextFollowSkip=Character.charCount(nextFollowUnicode);              int tempIcon=getKeyCapEmoji(unicode);              if (tempIcon == 0) {                followSkip=0;                nextFollowSkip=0;              } else {                icon=tempIcon;              }              skip+=(followSkip + nextFollowSkip);            }          }        } else         if (followUnicode == 0x20e3) {          int followSkip=Character.charCount(followUnicode);          int tempIcon=getKeyCapEmoji(unicode);          if (tempIcon == 0) {            followSkip=0;          } else {            icon=tempIcon;          }          skip+=followSkip;        } else {          int followSkip=Character.charCount(followUnicode);          String hexUnicode=Integer.toHexString(unicode);          String hexFollowUnicode=Integer.toHexString(followUnicode);          String resourceName="emoji_" + hexUnicode + "_"+ hexFollowUnicode;          int resourceId=0;          if (sEmojisModifiedMap.containsKey(resourceName)) {            resourceId=sEmojisModifiedMap.get(resourceName);          } else {            resourceId=context.getResources().getIdentifier(resourceName,"drawable",context.getApplicationContext().getPackageName());            if (resourceId != 0) {              sEmojisModifiedMap.put(resourceName,resourceId);            }          }          if (resourceId == 0) {            followSkip=0;          } else {            icon=resourceId;          }          skip+=followSkip;        }      }    }    if (icon > 0) {      text.setSpan(new EmojiconSpan(context,icon,emojiSize),i,i + skip,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    }  }}  }
class C{  private int round(double a){  return ((a < 0) ? (int)(a - 0.5) : (int)(a + 0.5));}  }
class C{  public static Validator<CharSequence> phoneNumber(@NonNull final Context context,@StringRes final int resourceId){  return new PhoneNumberValidator(context,resourceId);}  }
class C{  public void testService() throws MessagingException, IOException {  Mailet mailet;  FakeMailetConfig mci;  MimeMessage message;  Mail mail;  mailet=new OnlyText();  mci=new FakeMailetConfig("Test",FakeMailContext.defaultContext());  mailet.init(mci);  message=new MimeMessage(Session.getDefaultInstance(new Properties()));  message.setSubject("prova");  message.setText("Questa \u00E8 una prova");  message.saveChanges();  mail=FakeMail.builder().mimeMessage(message).build();  mailet.service(mail);  assertEquals("prova",mail.getMessage().getSubject());  assertEquals("Questa \u00E8 una prova",mail.getMessage().getContent());  message=new MimeMessage(Session.getDefaultInstance(new Properties()));  message.setSubject("prova");  MimeMultipart mp=new MimeMultipart();  MimeBodyPart bp=new MimeBodyPart();  bp.setText("Questo \u00E8 un part interno1");  mp.addBodyPart(bp);  bp=new MimeBodyPart();  bp.setText("Questo \u00E8 un part interno2");  mp.addBodyPart(bp);  bp=new MimeBodyPart();  MimeMessage message2=new MimeMessage(Session.getDefaultInstance(new Properties()));  bp.setContent(message2,"message/rfc822");  mp.addBodyPart(bp);  message.setContent(mp);  message.saveChanges();  mail=FakeMail.builder().mimeMessage(message).build();  mailet.service(mail);  assertEquals("prova",mail.getMessage().getSubject());  assertEquals("Questo \u00E8 un part interno1",mail.getMessage().getContent());  message=new MimeMessage(Session.getDefaultInstance(new Properties()));  message.setSubject("prova");  mp=new MimeMultipart();  bp=new MimeBodyPart();  bp.setText("Questo \u00E8 un part interno1");  mp.addBodyPart(bp);  bp=new MimeBodyPart();  bp.setText("Questo \u00E8 un part interno2");  mp.addBodyPart(bp);  bp=new MimeBodyPart();  message2=new MimeMessage(Session.getDefaultInstance(new Properties()));  bp.setContent(message2,"message/rfc822");  mp.addBodyPart(bp);  MimeMultipart mpext=new MimeMultipart();  bp=new MimeBodyPart();  bp.setContent(mp);  mpext.addBodyPart(bp);  message.setContent(mpext);  message.saveChanges();  mail=FakeMail.builder().mimeMessage(message).build();  mailet.service(mail);  assertEquals("prova",mail.getMessage().getSubject());  assertEquals("Questo \u00E8 un part interno1",mail.getMessage().getContent());  message=new MimeMessage(Session.getDefaultInstance(new Properties()));  message.setSubject("prova");  message.setContent("<p>Questa \u00E8 una prova<br />di html</p>","text/html");  message.saveChanges();  mail=FakeMail.builder().mimeMessage(message).build();  mailet.service(mail);  assertEquals("prova",mail.getMessage().getSubject());  assertEquals("Questa \u00E8 una prova\ndi html\n",mail.getMessage().getContent());  assertTrue(mail.getMessage().isMimeType("text/plain"));  message=new MimeMessage(Session.getDefaultInstance(new Properties()));  message.setSubject("prova");  mp=new MimeMultipart();  bp=new MimeBodyPart();  message2=new MimeMessage(Session.getDefaultInstance(new Properties()));  bp.setContent(message2,"message/rfc822");  mp.addBodyPart(bp);  bp=new MimeBodyPart();  bp.setContent("<p>Questa \u00E8 una prova<br />di html</p>","text/html");  mp.addBodyPart(bp);  message.setContent(mp);  message.saveChanges();  mail=FakeMail.builder().mimeMessage(message).build();  mailet.service(mail);  assertEquals("prova",mail.getMessage().getSubject());  assertEquals("Questa \u00E8 una prova\ndi html\n",mail.getMessage().getContent());  assertTrue(mail.getMessage().isMimeType("text/plain"));}  }
class C{  private void basicReleaseLock(){  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockToken.basicReleaseLock] releasing ownership: {}",this);  }  this.leaseId=-1;  this.lesseeThread=null;  this.leaseExpireTime=-1;  this.thread=null;  this.recursion=0;  this.ignoreForRecovery=false;  decUsage();}  }
class C{  public void beginAccept1(WebRequest theRequest){  theRequest.addHeader("Accept","text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c");}  }
class C{  public void endCompoundEdit(){}  }
class C{  public boolean isFilled(){  return cnt > 0 && cnt == msgSize;}  }
class C{  public List<String> allValues(String cssClass){  Elements elements=element.getElementsByClass(cssClass);  List<String> values=new ArrayList<String>(elements.size());  for (  Element element : elements) {    values.add(value(element));  }  return values;}  }
class C{  public int dimension(){  return d;}  }
class C{  public AbstractMRMessage createOutPacket(){  return null;}  }
class C{  public int size(){  return mMap.size();}  }
class C{  protected void recalculateBounds(){  posScaled.x=(int)(pos.x * scale);  posScaled.y=(int)(pos.y * scale);  int width=0;  int height=0;  if (drawable == null)   return;  width=drawable.getIntrinsicWidth();  height=drawable.getIntrinsicHeight();  if (!isScalable) {    drawable.setBounds(posScaled.x - pivotPoint.x,posScaled.y - pivotPoint.y,posScaled.x + width - pivotPoint.x,posScaled.y + height - pivotPoint.y);  } else {    drawable.setBounds(posScaled.x - (int)(pivotPoint.x * scale),posScaled.y - (int)(pivotPoint.y * scale),posScaled.x + (int)(width * scale) - (int)(pivotPoint.x * scale),posScaled.y + (int)(height * scale) - (int)(pivotPoint.y * scale));  }  if (isTouchable) {    touchRect.set(drawable.getBounds());  }}  }
class C{  protected static double rawQuantile(double p,double alpha,double beta,final double logbeta){  double x;{    double tmp=Math.sqrt(-2 * Math.log(p));    double y=tmp - (2.30753 + 0.27061 * tmp) / (1. + (0.99229 + 0.04481 * tmp) * tmp);    if (alpha > 1 && beta > 1) {      double r=(y * y - 3.) / 6.;      double s=1. / (alpha + alpha - 1.);      double t=1. / (beta + beta - 1.);      double h=2. / (s + t);      double w=y * Math.sqrt(h + r) / h - (t - s) * (r + 5. / 6. - 2. / (3. * h));      x=alpha / (alpha + beta * Math.exp(w + w));    } else {      double r=beta + beta;      double t=1. / (9. * beta);      final double a=1. - t + y * Math.sqrt(t);      t=r * a * a* a;      if (t <= 0.) {        x=1. - Math.exp((Math.log1p(-p) + Math.log(beta) + logbeta) / beta);      } else {        t=(4. * alpha + r - 2.) / t;        if (t <= 1.) {          x=Math.exp((Math.log(p * alpha) + logbeta) / alpha);        } else {          x=1. - 2. / (t + 1.);        }      }    }    if (x < 3e-308 || x > 1 - 2.22e-16) {      x=0.5;    }  }{    final double ialpha=1 - alpha;    final double ibeta=1 - beta;    final double acu=Math.max(1e-300,Math.pow(10.,-13 - 2.5 / (alpha * alpha) - .5 / (p * p)));    double prevstep=0., y=0., stepsize=1;    for (int outer=0; outer < 1000; outer++) {      double ynew=cdf(x,alpha,beta);      if (Double.isInfinite(ynew)) {        return Double.NaN;      }      ynew=(ynew - p) * Math.exp(logbeta + ialpha * Math.log(x) + ibeta * Math.log1p(-x));      if (ynew * y <= 0.) {        prevstep=Math.max(Math.abs(stepsize),3e-308);      }      double g=1, xnew=0.;      for (int inner=0; inner < 1000; inner++) {        stepsize=g * ynew;        if (Math.abs(stepsize) < prevstep) {          xnew=x - stepsize;          if (xnew >= 0. && xnew <= 1.) {            if (prevstep <= acu || Math.abs(ynew) <= acu) {              return x;            }            if (xnew != 0. && xnew != 1.) {              break;            }          }        }        g/=3.;      }      if (Math.abs(xnew - x) < 1e-15 * x) {        return x;      }      x=xnew;      y=ynew;    }  }  throw new AbortException("Beta quantile computation did not converge.");}  }
class C{  public VariableConfigResource(TextResource baseResource){  variableSubstitutions=new LinkedList<>();  this.baseResource=baseResource;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DefaultKeyedChannelPool(EventLoop eventLoop,Function<K,Future<Channel>> channelFactory,ChannelHealthChecker healthCheck,KeyedChannelPoolHandler<K> channelPoolHandler,boolean releaseHealthCheck){  this.eventLoop=requireNonNull(eventLoop,"eventLoop");  this.channelFactory=requireNonNull(channelFactory,"channelFactory");  this.healthCheck=requireNonNull(healthCheck,"healthCheck");  this.channelPoolHandler=new SafeKeyedChannelPoolHandler<>(requireNonNull(channelPoolHandler,"channelPoolHandler"));  this.releaseHealthCheck=releaseHealthCheck;  pool=new ConcurrentHashMap<>();}  }
class C{  private AuditServiceThread createMockAuditServiceThread(AuditServiceThreadQueueImpl instance){  AuditServiceThread auditServiceThread=EasyMock.createMock(AuditServiceThread.class);  auditServiceThread.add(instance);  EasyMock.expectLastCall().once();  auditServiceThread.run();  EasyMock.expectLastCall().once();  EasyMock.replay(auditServiceThread);  return auditServiceThread;}  }
class C{  public final void alignInvokeInterface(){  if (VM.VerifyAssertions)   VM._assert(opcode == JBC_invokeinterface);  bcIndex+=2;}  }
class C{  public final void put(long k,int tidx,long elem){  if (this.count >= this.thresh) {    this.grow();  }  int loc=((int)k & 0x7FFFFFFF) % this.length;  while (true) {    int[] node=this.nodes[loc];    if (node == null) {      this.nodes[loc]=addElem(k,tidx,elem);      this.count++;      return;    }    if (getKey(node) == k) {      int cloc=getIdx(node,tidx);      if (cloc == -1) {        this.nodes[loc]=appendElem(node,tidx,elem);      } else {        putElem(this.nodes[loc],elem,cloc);      }      return;    }    loc=(loc + 1) % this.length;  }}  }
class C{  public void put(String key,long value){  if (key != null) {    urlParams.put(key,String.valueOf(value));  }}  }
class C{  public Type build(final String hs){  TypeLexer lexer=new TypeLexer(new ANTLRInputStream(hs));  CommonTokenStream tokens=new CommonTokenStream(lexer);  TypeParser parser=new TypeParser(tokens);  ParserRuleContext tree=parser.type();  ParseTreeWalker walker=new ParseTreeWalker();  TypeBuilderListener extractor;  extractor=new TypeBuilderListener(this.typeClasses);  walker.walk(extractor,tree);  return extractor.result();}  }
class C{  protected UnixLikeTTYTerminal(File ttyDev,InputStream terminalInput,OutputStream terminalOutput,Charset terminalCharset,CtrlCBehaviour terminalCtrlCBehaviour) throws IOException {  super(terminalInput,terminalOutput,terminalCharset,terminalCtrlCBehaviour);  this.ttyDev=ttyDev;  realAquire();}  }
class C{  public String toString(){  return "(" + col + ","+ row+ ")";}  }
class C{  public synchronized void performUnjoin(Node node){  createCheckpoint(R.string.undo_action_unjoin_ways);  getDelegator().unjoinWays(node);  map.invalidate();}  }
class C{  protected void addKeywordsToJCas(JCas jCas,List<String> keywords,List<String> additionalBuzzwords){  Metadata md=new Metadata(jCas);  md.setKey("keywords");  md.setValue(keywords.stream().collect(Collectors.joining(";")));  addToJCasIndex(md);  if (addBuzzwords) {    Set<String> allKeywords=new HashSet<>(keywords);    allKeywords.addAll(additionalBuzzwords);    for (    String keyword : allKeywords) {      Matcher m=Pattern.compile("\\b" + Pattern.quote(keyword) + "\\b",Pattern.CASE_INSENSITIVE).matcher(jCas.getDocumentText());      while (m.find()) {        Buzzword bw=new Buzzword(jCas,m.start(),m.end());        bw.setTags(UimaTypesUtils.toArray(jCas,Arrays.asList("keyword")));        addToJCasIndex(bw);      }    }  }}  }
class C{  public void message(LocoNetMessage m){  notify(m);}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  public static String generateTransportZoneNativeGuid(String transportType,String deviceType,String fabricId){  return String.format("%s+%s+%s",transportType,_deviceTypeMap.get(deviceType),fabricId);}  }
class C{  public static void addFindBugsNature(IProject project,IProgressMonitor monitor) throws CoreException {  if (hasFindBugsNature(project)) {    return;  }  IProjectDescription description=project.getDescription();  String[] prevNatures=description.getNatureIds();  for (int i=0; i < prevNatures.length; i++) {    if (FindbugsPlugin.NATURE_ID.equals(prevNatures[i])) {      return;    }  }  String[] newNatures=new String[prevNatures.length + 1];  System.arraycopy(prevNatures,0,newNatures,0,prevNatures.length);  newNatures[prevNatures.length]=FindbugsPlugin.NATURE_ID;  if (DEBUG) {    for (int i=0; i < newNatures.length; i++) {      System.out.println(newNatures[i]);    }  }  description.setNatureIds(newNatures);  project.setDescription(description,monitor);}  }
class C{  public boolean allowsCoreThreadTimeOut(){  return allowCoreThreadTimeOut;}  }
class C{  public ActivityMap(){  this(null);}  }
class C{  public DateMidnight withDayOfMonth(int dayOfMonth){  return withMillis(getChronology().dayOfMonth().set(getMillis(),dayOfMonth));}  }
class C{  public RecordableImpl(){}  }
class C{  @Override public boolean supportsCatalogsInPrivilegeDefinitions(){  debugCodeCall("supportsCatalogsInPrivilegeDefinitions");  return true;}  }
class C{  EmptyExceptionCheck(Throwable exception,int statementIndex,String catchClassName){  super(exception,statementIndex,catchClassName);}  }
class C{  public boolean isSuccess(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:35.527 -0500",hash_original_method="C4C15952E1E232D46597A87ECAFE1945",hash_generated_method="E356C934ED20FD22E083A4A134DC00E7") public float confidence(){  return mConfidence;}  }
class C{  private static void exportTenantConfiguration(String tenantName,String xmlFile) throws Exception {  CasIdmClient idmClient=new CasIdmClient(HOSTNAME);  if (xmlFile.isEmpty()) {    throw new InvalidParameterException();  }  if (tenantName.isEmpty()) {    tenantName=idmClient.getDefaultTenant().toString();  }  Document tenantDoc=idmClient.exportTenantConfiguration(tenantName,true);  writeDomDoc(tenantDoc,xmlFile);}  }
class C{  public static boolean isDescendantOf(@NotNull ASTNode node,@NotNull IElementType type,@Nullable String textContent){  return getFirstAncestorOfType(node,type,textContent) != null;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.507 -0500",hash_original_method="749D6A41C446C63F668941511653896B",hash_generated_method="55879D13B87CD3A5D8B928E5CF1696FB") public void putLongArray(String key,long[] value){  unparcel();  mMap.put(key,value);}  }
class C{  <T>boolean checkOneToMany(boolean conditional,@Nullable Object source,Iterable<T> targets,@Nullable String message){  return checkManyToMany(conditional,ImmutableList.of((source == null) ? NULL_STRING : source),targets,message);}  }
class C{  private void checkOnClickListener(View view,AttributeSet attrs){  final Context context=view.getContext();  if (!(context instanceof ContextWrapper) || (Build.VERSION.SDK_INT >= 15 && !ViewCompat.hasOnClickListeners(view))) {    return;  }  final TypedArray a=context.obtainStyledAttributes(attrs,sOnClickAttrs);  final String handlerName=a.getString(0);  if (handlerName != null) {    view.setOnClickListener(new DeclaredOnClickListener(view,handlerName));  }  a.recycle();}  }
class C{  public String printLogicRPU(){  String s=String.format("Circuit_score = %-8.5f",_scores.get_score());  s+="    " + String.format("Cell_growth = %-8.5f",Toxicity.mostToxicRow(this));  s+="\n\n";  for (  Gate gate : _Gates) {    s+=printLogicRPU(gate);  }  return s;}  }
class C{  public boolean isFinal(){  return getRawClass().isFinal();}  }
class C{  private static void checkCreateFailureId(int foundId,int expectedId){  if (foundId != expectedId)   throw new AssertionError("Wrong resource creation failed. Found ID " + foundId + " expected "+ expectedId);}  }
class C{  static File mapAlternativeName(File lib){  return null;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TENUM_LITERAL__NAME:    setName((String)newValue);  return;case TypesPackage.TENUM_LITERAL__VALUE:setValue((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static String snippetize(String content,String displayName,String query,char snippetStartMatch,char snippetEndMatch,String snippetEllipsis,int snippetMaxTokens){  String lowerQuery=query != null ? query.toLowerCase() : null;  if (TextUtils.isEmpty(content) || TextUtils.isEmpty(query) || TextUtils.isEmpty(displayName)|| !content.toLowerCase().contains(lowerQuery)) {    return null;  }  String lowerDisplayName=displayName != null ? displayName.toLowerCase() : "";  List<String> nameTokens=new ArrayList<String>();  List<Integer> nameTokenOffsets=new ArrayList<Integer>();  split(lowerDisplayName.trim(),nameTokens,nameTokenOffsets);  for (  String nameToken : nameTokens) {    if (nameToken.startsWith(lowerQuery)) {      return null;    }  }  String[] contentLines=content.split("\n");  for (  String contentLine : contentLines) {    if (contentLine.toLowerCase().contains(lowerQuery)) {      List<String> lineTokens=new ArrayList<String>();      List<Integer> tokenOffsets=new ArrayList<Integer>();      split(contentLine,lineTokens,tokenOffsets);      List<String> markedTokens=new ArrayList<String>();      int firstToken=-1;      int lastToken=-1;      for (int i=0; i < lineTokens.size(); i++) {        String token=lineTokens.get(i);        String lowerToken=token.toLowerCase();        if (lowerToken.startsWith(lowerQuery)) {          markedTokens.add(snippetStartMatch + token + snippetEndMatch);          if (firstToken == -1) {            firstToken=Math.max(0,i - (int)Math.floor(Math.abs(snippetMaxTokens) / 2.0));            lastToken=Math.min(lineTokens.size(),firstToken + Math.abs(snippetMaxTokens));          }        } else {          markedTokens.add(token);        }      }      if (firstToken > -1) {        StringBuilder sb=new StringBuilder();        if (firstToken > 0) {          sb.append(snippetEllipsis);        }        for (int i=firstToken; i < lastToken; i++) {          String markedToken=markedTokens.get(i);          String originalToken=lineTokens.get(i);          sb.append(markedToken);          if (i < lastToken - 1) {            sb.append(contentLine.substring(tokenOffsets.get(i) + originalToken.length(),tokenOffsets.get(i + 1)));          }        }        if (lastToken < lineTokens.size()) {          sb.append(snippetEllipsis);        }        return sb.toString();      }    }  }  return null;}  }
class C{  protected void incorporateCertificateValues(final Element parentDom,final List<CertificateToken> toIncludeCertificates){  if (!toIncludeCertificates.isEmpty()) {    final Element certificateValuesDom=DSSXMLUtils.addElement(documentDom,parentDom,XAdES,XADES_CERTIFICATE_VALUES);    final CertificatePool certificatePool=getCertificatePool();    final boolean trustAnchorBPPolicy=params.bLevel().isTrustAnchorBPPolicy();    boolean trustAnchorIncluded=false;    for (    final CertificateToken certificateToken : toIncludeCertificates) {      if (trustAnchorBPPolicy && (certificatePool != null)) {        final List<CertificateToken> certificateTokens=certificatePool.get(certificateToken.getSubjectX500Principal());        if (certificateTokens.size() > 0) {          trustAnchorIncluded=true;        }      }      final byte[] bytes=certificateToken.getEncoded();      final String base64EncodeCertificate=Base64.encodeBase64String(bytes);      DSSXMLUtils.addTextElement(documentDom,certificateValuesDom,XAdES,XADES_ENCAPSULATED_X509_CERTIFICATE,base64EncodeCertificate);    }    if (trustAnchorBPPolicy && !trustAnchorIncluded) {      LOG.warn("The trust anchor is missing but its inclusion is required by the signature policy!");    }  }}  }
class C{  public boolean canPace(){  return false;}  }
class C{  public boolean isTrueFor(double value){switch (operator) {case '<':    return value < this.number;case '>':  return value > this.number;case '=':return value == this.number;default :throw new SettingsError("Invalid operator");}}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public ManagedIntArray(final int[] array){  if (array == null)   throw new IllegalArgumentException();  this.buf=array;}  }
class C{  public SamFilterParamsBuilder excludeDuplicates(final boolean val){  mExcludeDuplicates=val;  return this;}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  super.onChangedRemoved(object,changes);  if (changes.has("metamorphosis")) {    metamorphosis=null;    fireChange(PROP_METAMORPHOSIS);  }}  }
class C{  public DistributedLogNamespaceBuilder uri(URI uri){  this._uri=uri;  return this;}  }
class C{  public RegisterRequestMessage(RegisterRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }}  }
class C{  public String globalInfo(){  return "Normalizes all numeric values in the given dataset (apart from the " + "class attribute, if set). The resulting values are by default " + "in [0,1] for the data used to compute the normalization intervals. "+ "But with the scale and translation parameters one can change that, "+ "e.g., with scale = 2.0 and translation = -1.0 you get values in the "+ "range [-1,+1].";}  }
class C{  public Chat fromChat(){  return getMessage().getBotInstance().getChat(((MigrateFromChatIDContent)getMessage().getContent()).getContent());}  }
class C{  protected ByteBufferIndexInput buildSlice(String sliceDescription,long offset,long length){  if (buffers == null) {    throw new AlreadyClosedException("Already closed: " + this);  }  final ByteBuffer newBuffers[]=buildSlice(buffers,offset,length);  final int ofs=(int)(offset & chunkSizeMask);  final ByteBufferIndexInput clone=newCloneInstance(getFullSliceDescription(sliceDescription),newBuffers,ofs,length);  clone.isClone=true;  return clone;}  }
class C{  public final BulkRequest timeout(TimeValue timeout){  this.timeout=timeout;  return this;}  }
class C{  public static StderrStream create(){  if (_stderr == null) {    _stderr=new StderrStream();    ConstPath path=new ConstPath(null,_stderr);    path.setScheme("stderr");  }  return _stderr;}  }
class C{  public RenderedImage createTile(RenderContext rc){  AffineTransform usr2dev=rc.getTransform();  RenderingHints rcHints=rc.getRenderingHints();  RenderingHints hints=new RenderingHints(null);  if (rcHints != null) {    hints.add(rcHints);  }  Rectangle2D tiledRect=getBounds2D();  Shape aoiShape=rc.getAreaOfInterest();  Rectangle2D aoiRect=aoiShape.getBounds2D();  if (!tiledRect.intersects(aoiRect))   return null;  Rectangle2D.intersect(tiledRect,aoiRect,tiledRect);  Rectangle2D tileRect=(Rectangle2D)tileRegion.clone();  if ((tileRect.getWidth() <= 0) || (tileRect.getHeight() <= 0) || (tiledRect.getWidth() <= 0)|| (tiledRect.getHeight() <= 0))   return null;  double tileX=tileRect.getX();  double tileY=tileRect.getY();  double tileWidth=tileRect.getWidth();  double tileHeight=tileRect.getHeight();  double tiledX=tiledRect.getX();  double tiledY=tiledRect.getY();  double tiledWidth=tiledRect.getWidth();  double tiledHeight=tiledRect.getHeight();  double w=Math.min(tileWidth,tiledWidth);  double h=Math.min(tileHeight,tiledHeight);  double dx=(tiledX - tileX) % tileWidth;  double dy=(tiledY - tileY) % tileHeight;  if (dx > 0) {    dx=tileWidth - dx;  } else {    dx*=-1;  }  if (dy > 0) {    dy=tileHeight - dy;  } else {    dy*=-1;  }  double scaleX=usr2dev.getScaleX();  double scaleY=usr2dev.getScaleY();  double tdx=Math.floor(scaleX * dx);  double tdy=Math.floor(scaleY * dy);  dx=tdx / scaleX;  dy=tdy / scaleY;  Rectangle2D.Double A=new Rectangle2D.Double(tileX + tileWidth - dx,tileY + tileHeight - dy,dx,dy);  Rectangle2D.Double B=new Rectangle2D.Double(tileX,tileY + tileHeight - dy,w - dx,dy);  Rectangle2D.Double C=new Rectangle2D.Double(tileX + tileWidth - dx,tileY,dx,h - dy);  Rectangle2D.Double D=new Rectangle2D.Double(tileX,tileY,w - dx,h - dy);  Rectangle2D realTileRect=new Rectangle2D.Double(tiledRect.getX(),tiledRect.getY(),w,h);  RenderedImage ARed=null, BRed=null, CRed=null, DRed=null;  Filter source=getSource();  if (A.getWidth() > 0 && A.getHeight() > 0) {    Rectangle devA=usr2dev.createTransformedShape(A).getBounds();    if (devA.width > 0 && devA.height > 0) {      AffineTransform ATxf=new AffineTransform(usr2dev);      ATxf.translate(-A.x + tiledX,-A.y + tiledY);      Shape aoi=A;      if (overflow) {        aoi=new Rectangle2D.Double(A.x,A.y,tiledWidth,tiledHeight);      }      hints.put(RenderingHintsKeyExt.KEY_AREA_OF_INTEREST,aoi);      RenderContext arc=new RenderContext(ATxf,aoi,hints);      ARed=source.createRendering(arc);    }  }  if (B.getWidth() > 0 && B.getHeight() > 0) {    Rectangle devB=usr2dev.createTransformedShape(B).getBounds();    if (devB.width > 0 && devB.height > 0) {      AffineTransform BTxf=new AffineTransform(usr2dev);      BTxf.translate(-B.x + (tiledX + dx),-B.y + tiledY);      Shape aoi=B;      if (overflow) {        aoi=new Rectangle2D.Double(B.x - tiledWidth + w - dx,B.y,tiledWidth,tiledHeight);      }      hints.put(RenderingHintsKeyExt.KEY_AREA_OF_INTEREST,aoi);      RenderContext brc=new RenderContext(BTxf,aoi,hints);      BRed=source.createRendering(brc);    }  }  if (C.getWidth() > 0 && C.getHeight() > 0) {    Rectangle devC=usr2dev.createTransformedShape(C).getBounds();    if (devC.width > 0 && devC.height > 0) {      AffineTransform CTxf=new AffineTransform(usr2dev);      CTxf.translate(-C.x + tiledX,-C.y + (tiledY + dy));      Shape aoi=C;      if (overflow) {        aoi=new Rectangle2D.Double(C.x,C.y - tileHeight + h - dy,tiledWidth,tiledHeight);      }      hints.put(RenderingHintsKeyExt.KEY_AREA_OF_INTEREST,aoi);      RenderContext crc=new RenderContext(CTxf,aoi,hints);      CRed=source.createRendering(crc);    }  }  if (D.getWidth() > 0 && D.getHeight() > 0) {    Rectangle devD=usr2dev.createTransformedShape(D).getBounds();    if (devD.width > 0 && devD.height > 0) {      AffineTransform DTxf=new AffineTransform(usr2dev);      DTxf.translate(-D.x + (tiledX + dx),-D.y + (tiledY + dy));      Shape aoi=D;      if (overflow) {        aoi=new Rectangle2D.Double(D.x - tileWidth + w - dx,D.y - tileHeight + h - dy,tiledWidth,tiledHeight);      }      hints.put(RenderingHintsKeyExt.KEY_AREA_OF_INTEREST,aoi);      RenderContext drc=new RenderContext(DTxf,aoi,hints);      DRed=source.createRendering(drc);    }  }  final Rectangle realTileRectDev=usr2dev.createTransformedShape(realTileRect).getBounds();  if (realTileRectDev.width == 0 || realTileRectDev.height == 0) {    return null;  }  BufferedImage realTileBI=new BufferedImage(realTileRectDev.width,realTileRectDev.height,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=GraphicsUtil.createGraphics(realTileBI,rc.getRenderingHints());  g.translate(-realTileRectDev.x,-realTileRectDev.y);  AffineTransform redTxf=new AffineTransform();  Point2D.Double redVec=new Point2D.Double();  RenderedImage refRed=null;  if (ARed != null) {    g.drawRenderedImage(ARed,redTxf);    refRed=ARed;  }  if (BRed != null) {    if (refRed == null) {      refRed=BRed;    }    redVec.x=dx;    redVec.y=0;    usr2dev.deltaTransform(redVec,redVec);    redVec.x=Math.floor(redVec.x) - (BRed.getMinX() - refRed.getMinX());    redVec.y=Math.floor(redVec.y) - (BRed.getMinY() - refRed.getMinY());    g.drawRenderedImage(BRed,redTxf);  }  if (CRed != null) {    if (refRed == null) {      refRed=CRed;    }    redVec.x=0;    redVec.y=dy;    usr2dev.deltaTransform(redVec,redVec);    redVec.x=Math.floor(redVec.x) - (CRed.getMinX() - refRed.getMinX());    redVec.y=Math.floor(redVec.y) - (CRed.getMinY() - refRed.getMinY());    g.drawRenderedImage(CRed,redTxf);  }  if (DRed != null) {    if (refRed == null) {      refRed=DRed;    }    redVec.x=dx;    redVec.y=dy;    usr2dev.deltaTransform(redVec,redVec);    redVec.x=Math.floor(redVec.x) - (DRed.getMinX() - refRed.getMinX());    redVec.y=Math.floor(redVec.y) - (DRed.getMinY() - refRed.getMinY());    g.drawRenderedImage(DRed,redTxf);  }  CachableRed realTile;  realTile=new BufferedImageCachableRed(realTileBI,realTileRectDev.x,realTileRectDev.y);  return realTile;}  }
class C{  public static boolean isPrime(BigInteger n){  for (BigInteger d=new BigInteger("2"); d.compareTo(n.divide(new BigInteger("2"))) <= 0; d=d.add(new BigInteger("1"))) {    if (n.remainder(d).compareTo(new BigInteger("0")) == 0) {      return false;    }  }  return true;}  }
class C{  public static String replaceElementText(String xmlFile,Map elements,boolean all,boolean overwrite) throws DOMException {  if ((xmlFile == null) || (elements == null))   return null;  File file=null;  FileWriter fw=null;  Document doc=null;  try {    doc=_docBuilder.parse(xmlFile);    String xmlStr=print(doc,false,false);    Set allElements=elements.keySet();    if (allElements.size() > 0) {      Iterator iterator=allElements.iterator();      while (iterator.hasNext()) {        String tagName=(String)iterator.next();        String value=(String)elements.get(tagName);        NodeList nodes=doc.getDocumentElement().getElementsByTagName(tagName);        if (value != null) {          for (int i=0; i < nodes.getLength(); i++) {            if ((!all) && (i > 0))             break;            Node element=nodes.item(i);            String eText=getText(element);            element=removeChildren(element);            Text textNode=doc.createTextNode(value);            element.appendChild(textNode);          }        }      }      String newXMLStr=print(doc,false,false);      if (overwrite) {        file=new File(xmlFile);        file.renameTo(new File(xmlFile + ".bak"));        fw=new FileWriter(file);        fw.write(newXMLStr);        fw.flush();      }      return newXMLStr;    }  } catch (  Exception ex) {    ex.printStackTrace(System.out);    throw new DOMException(DOMException.INVALID_MODIFICATION_ERR,"Error replacing Element text " + ex.toString());  } finally {    try {      if (fw != null)       fw.close();    } catch (    IOException ex) {    }    file=null;    fw=null;    doc=null;  }  return null;}  }
class C{  public void stepSystem(int nstep){  root=null;  makeTree(nstep);  for (Enumeration<Body> e=bodyTabRev.elementsRev(); e.hasMoreElements(); ) {    Body b=e.nextElement();    b.hackGravity(rsize,root);  }  vp(bodyTabRev,nstep);}  }
class C{  @After @Override public void tearDown() throws Exception {  final URI externalRootLocation=getResourceUri(PROBANDS,EXT_LOC);  externalLibraryPreferenceStore.remove(externalRootLocation);  final IStatus result=externalLibraryPreferenceStore.save(new NullProgressMonitor());  assertTrue("Error while saving external library preference changes.",result.isOK());  waitForAutoBuild();  super.tearDown();}  }
class C{  public void initialize(UimaContext aContext){  annotate_tokens=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_TOKENS);  annotate_sentences=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_SENTENCES);  annotate_pos=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_POS);  this.language=Language.getLanguageFromString((String)aContext.getConfigParameterValue(PARAM_LANGUAGE));  String hunposPath=(String)aContext.getConfigParameterValue(PARAM_PATH);  String modelPath=(String)aContext.getConfigParameterValue(PARAM_MODEL_PATH);  HunPosWrapper.initialize(modelPath,hunposPath);}  }
class C{  private static void addQueryIndexes(Document doc,Node parent,Collection<PojoField> fields,Collection<QueryIndex> idxs){  if (!idxs.isEmpty()) {    boolean firstIdx=true;    Element list=null;    for (    QueryIndex idx : idxs) {      Set<Map.Entry<String,Boolean>> dbIdxFlds=idx.getFields().entrySet();      int sz=dbIdxFlds.size();      List<T2<String,Boolean>> idxFlds=new ArrayList<>(sz);      for (      Map.Entry<String,Boolean> idxFld : dbIdxFlds) {        PojoField field=GeneratorUtils.findFieldByName(fields,idxFld.getKey());        if (field != null)         idxFlds.add(new T2<>(field.javaName(),idxFld.getValue())); else         break;      }      if (idxFlds.size() == sz) {        if (firstIdx) {          Element prop=addProperty(doc,parent,"indexes",null);          list=addElement(doc,prop,"list");          firstIdx=false;        }        Element idxBean=addBean(doc,list,QueryIndex.class);        addProperty(doc,idxBean,"name",idx.getName());        Element idxType=addProperty(doc,idxBean,"indexType",null);        addElement(doc,idxType,"util:constant","static-field","org.apache.ignite.cache.QueryIndexType." + idx.getIndexType());        Element flds=addProperty(doc,idxBean,"fields",null);        Element fldsMap=addElement(doc,flds,"map");        for (        T2<String,Boolean> fld : idxFlds)         addElement(doc,fldsMap,"entry","key",fld.getKey(),"value",fld.getValue().toString());      }    }  }}  }
class C{  public byte[] rpop(final byte[] key){  checkIsInMulti();  client.rpop(key);  return client.getBinaryBulkReply();}  }
class C{  static int readTypeRef(TypeReference typeRef,DataInputStream input,int[] constantPool) throws IOException, ClassFormatError {  int myTypeIndex=input.readUnsignedShort();  TypeReference myTypeRef=getTypeRef(constantPool,myTypeIndex);  if (myTypeRef != typeRef) {    if (!VM.VerifyAssertions) {      throw new ClassFormatError("expected class \"" + typeRef.getName() + "\" but found \""+ myTypeRef.getName()+ "\"");    } else {      throw new ClassFormatError("expected class \"" + typeRef.getName() + "\" but found \""+ myTypeRef.getName()+ "\"\n"+ typeRef+ " != "+ myTypeRef);    }  }  return myTypeIndex;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TYPE_PARAMETER__BOUND:    setBound((Type)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public int hashCode(){  int h=hash;  if (h == 0) {    final int n=arity();    for (int i=0; i < n; i++) {      final BOp arg=get(i);      h=31 * h + (arg == null ? 0 : arg.hashCode());    }    hash=h;  }  return h;}  }
class C{  private void insertMyVdcInfo(DbClient dbClient) throws UnknownHostException {  if (!getCfMap().containsKey(TypeMap.getDoType(VirtualDataCenter.class).getCF().getName())) {    _log.error("Unable to find VirtualDataCenter CF in current keyspace");    return;  }  VirtualDataCenter localVdc=queryLocalVdc(dbClient);  if (localVdc != null) {    return;  }  _log.info("insert vdc info of current site...");  VirtualDataCenter vdc=new VirtualDataCenter();  vdc.setId(URIUtil.createVirtualDataCenterId(_vdcShortId));  vdc.setShortId(_vdcShortId);  vdc.setLabel(_vdcShortId);  vdc.setConnectionStatus(VirtualDataCenter.ConnectionStatus.ISOLATED);  vdc.setRepStatus(VirtualDataCenter.GeoReplicationStatus.REP_NONE);  vdc.setVersion(new Date().getTime());  vdc.setApiEndpoint(_vdcEndpoint);  vdc.setLocal(true);  dbClient.createObject(vdc);}  }
class C{  IdleManager(Connector<?> connector,ScheduledExecutorService schedExecitor){  this.connector=connector;  this.schedExecutor=schedExecitor;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthTokenDept[");  buffer.append("m_id = ").append(m_id);  buffer.append("]");  return buffer.toString();}  }
class C{  @Override public void stop(TimerContext context){  Signature sig=context.getJoinPoint().getSignature();  String className=sig.getDeclaringTypeName();  String methodName=sig.getName();  String label=className + "." + methodName;  statsdClient.recordExecutionTime(label,context.stop());}  }
class C{  public boolean isAbstractInherited(){  for (int i=0; i < LENGTH; i++) {    if (members[i] != null) {      if (!members[i].isAbstract() || sources[i] == MemberSource.OWNED) {        return false;      }    }  }  return true;}  }
class C{  private static String relationalMapperName(Class<?> configuredClass,String resource){  String className=configuredClass.getName().replaceAll("\\.","");  if (isEmpty(resource))   return className;  if (!isPath(resource))   return write(className,String.valueOf(resource.hashCode()));  String[] dep=resource.split("\\\\");  if (dep.length <= 1)   dep=resource.split("/");  String xml=dep[dep.length - 1];  return write(className,xml.replaceAll("\\.","").replaceAll(" ",""));}  }
class C{  public HasParentQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public IntervalConverter addIntervalConverter(IntervalConverter converter) throws SecurityException {  checkAlterIntervalConverters();  if (converter == null) {    return null;  }  IntervalConverter[] removed=new IntervalConverter[1];  iIntervalConverters=iIntervalConverters.add(converter,removed);  return removed[0];}  }
class C{  public JobEvent(ClusterNode node,String msg,int type){  super(node,msg,type);}  }
class C{  public ColumnItem(final ColumnBrowserWidget widget){  if (widget == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (widget.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  this.widget=widget;  this.parent=null;  this.children=new ArrayList<ColumnItem>();  if (widget.getRootItem() != null) {    widget.getRootItem().children.add(this);  }  widget.updateContent();}  }
class C{  public static void sinAndCos(double angle,DoubleWrapper sine,DoubleWrapper cosine){  if (USE_JDK_MATH) {    sine.value=STRICT_MATH ? StrictMath.sin(angle) : Math.sin(angle);    cosine.value=STRICT_MATH ? StrictMath.cos(angle) : Math.cos(angle);    return;  }  boolean negateResult;  if (angle < 0.0) {    angle=-angle;    negateResult=true;  } else {    negateResult=false;  }  if (angle > SIN_COS_MAX_VALUE_FOR_INT_MODULO) {    angle=remainderTwoPi(angle);    if (angle < 0.0) {      angle+=2 * Math.PI;    }  }  int index=(int)(angle * SIN_COS_INDEXER + 0.5);  double delta=(angle - index * SIN_COS_DELTA_HI) - index * SIN_COS_DELTA_LO;  index&=(SIN_COS_TABS_SIZE - 2);  double indexSin=sinTab[index];  double indexCos=cosTab[index];  double result=indexSin + delta * (indexCos + delta * (-indexSin * ONE_DIV_F2 + delta * (-indexCos * ONE_DIV_F3 + delta * indexSin * ONE_DIV_F4)));  sine.value=negateResult ? -result : result;  cosine.value=indexCos + delta * (-indexSin + delta * (-indexCos * ONE_DIV_F2 + delta * (indexSin * ONE_DIV_F3 + delta * indexCos * ONE_DIV_F4)));}  }
class C{  private void updateLocation(){  int lvi=0;  location[0]=java.lang.Integer.MAX_VALUE;  location[1]=java.lang.Integer.MAX_VALUE;  location[2]=java.lang.Integer.MIN_VALUE;  location[3]=java.lang.Integer.MIN_VALUE;  if (zero != null) {    for (lvi=0; lvi < zero.length; lvi++) {      if ((zero[lvi].location[0] < location[0]) || (zero[lvi].location[0] == location[0] && zero[lvi].location[1] < location[1])) {        location[0]=zero[lvi].location[0];        location[1]=zero[lvi].location[1];      }      if ((zero[lvi].location[2] > location[2]) || (zero[lvi].location[2] == location[2] && zero[lvi].location[3] > location[3])) {        location[2]=zero[lvi].location[2];        location[3]=zero[lvi].location[3];      }    }  }  if (one != null) {    for (lvi=0; lvi < one.length; lvi++) {      if ((one[lvi].location[0] < location[0]) || (one[lvi].location[0] == location[0] && one[lvi].location[1] < location[1])) {        location[0]=one[lvi].location[0];        location[1]=one[lvi].location[1];      }      if ((one[lvi].location[2] > location[2]) || (one[lvi].location[2] == location[2] && one[lvi].location[3] > location[3])) {        location[2]=one[lvi].location[2];        location[3]=one[lvi].location[3];      }    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.STATECHART__SCOPES:    getScopes().clear();  getScopes().addAll((Collection<? extends Scope>)newValue);return;case SGraphPackage.STATECHART__NAMESPACE:setNamespace((String)newValue);return;case SGraphPackage.STATECHART__REGIONS:getRegions().clear();getRegions().addAll((Collection<? extends Region>)newValue);return;case SGraphPackage.STATECHART__NAME:setName((String)newValue);return;case SGraphPackage.STATECHART__DOCUMENTATION:setDocumentation((String)newValue);return;case SGraphPackage.STATECHART__DOMAIN_ID:setDomainID((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void addTable(Hashtable<String,Object> table){  if ((table != null) && !table.isEmpty()) {    getTable().putAll(table);  }}  }
class C{  protected int lookupBackwardState(int state,int category){  return backwardsStateTable[state * numCategories + category];}  }
class C{  public ArrayList<String> serialize(){  ArrayList<String> params=new ArrayList<>();  for (  ParameterPair pair : parameters) {    params.add("-" + pair.option.toString());    if (pair.value instanceof String) {      params.add((String)pair.value);    } else     if (pair.value instanceof Class) {      params.add(((Class<?>)pair.value).getCanonicalName());    } else {      params.add(pair.value.toString());    }  }  return params;}  }
class C{  protected void emit_DoStatement_SemiParserRuleCall_6_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public final void negate(){  this.m00=-this.m00;  this.m01=-this.m01;  this.m02=-this.m02;  this.m10=-this.m10;  this.m11=-this.m11;  this.m12=-this.m12;  this.m20=-this.m20;  this.m21=-this.m21;  this.m22=-this.m22;}  }
class C{  public static final String hashKeyForDisk(final String key){  String cacheKey;  try {    final MessageDigest digest=MessageDigest.getInstance("MD5");    digest.update(key.getBytes());    cacheKey=bytesToHexString(digest.digest());  } catch (  final NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.601 -0500",hash_original_method="8E606864EB91DBB174E2D5FEBC80C80F",hash_generated_method="76FDD9C51E94F6BC1244035CA9FD99B3") private void doScrollY(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      smoothScrollBy(0,delta);    } else {      scrollBy(0,delta);    }  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void brokerRoleChanged(ValueChangeEvent event){  Boolean checkBoxChecked=(Boolean)event.getNewValue();  setBroker((checkBoxChecked.booleanValue()));}  }
class C{  private void rotate(int degree){  if (mListener != null) {    mListener.rotate(degree);  }}  }
class C{  @GET @Produces({"text/html;qs=0.9","application/xhtml+xml"}) @Path("multiple_produces1") public String multipleProduces1(){  return "hello.jsp";}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.ACCESS__ARGS:    return basicSetArgs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private static ArrayList<EdgeInfo> generateEdges(VertexInfo[] vertices,int L,int K,int fanout,boolean backwardEdges,int minCapacity,int maxCapacity){  ArrayList<EdgeInfo> edges=new ArrayList<EdgeInfo>();  int last=lastVertex(L,K,0);  for (int f=firstVertex(L,K,0); f <= last; f++) {    int cap=(int)(rnd.nextDouble() * (maxCapacity - minCapacity));    EdgeInfo ei=new EdgeInfo(0,f,minCapacity + cap);    edges.add(ei);  }  ArrayList<Integer> nextOnes=new ArrayList<Integer>();  for (int i=0; i < L / 2; i++) {    int id=firstVertex(L,K,i);    last=lastVertex(L,K,i);    while (id <= last) {      nextOnes.clear();      int nextFirst=firstVertex(L,K,i + 1);      int nextLast=lastVertex(L,K,i + 1);      int t=-1;      do {        t=nextFirst + (int)(rnd.nextDouble() * (nextLast - nextFirst + 1));        if (nextOnes.contains(t)) {          continue;        }        nextOnes.add(t);      } while (nextOnes.size() != fanout);      for (int f=0; f < nextOnes.size(); f++) {        int cap=(int)(rnd.nextDouble() * (maxCapacity - minCapacity));        EdgeInfo ei=new EdgeInfo(id,nextOnes.get(f),minCapacity + cap);        edges.add(ei);      }      id++;    }  }  for (int i=L / 2; i < L - 1; i++) {    int id=firstVertex(L,K,i);    last=lastVertex(L,K,i);    while (id <= last) {      nextOnes.clear();      int nextFirst=firstVertex(L,K,i + 1);      int nextLast=lastVertex(L,K,i + 1);      int t=-1;      do {        t=nextFirst + (int)(rnd.nextDouble() * (nextLast - nextFirst + 1));        if (nextOnes.contains(t)) {          continue;        }        nextOnes.add(t);      } while (nextOnes.size() != fanout);      for (int f=0; f < nextOnes.size(); f++) {        int cap=(int)(rnd.nextDouble() * (maxCapacity - minCapacity));        EdgeInfo ei=new EdgeInfo(id,nextOnes.get(f),minCapacity + cap);        edges.add(ei);      }      id++;    }  }  if (backwardEdges) {    for (int i=2; i < L / 2; i++) {      int id=firstVertex(L,K,i);      last=lastVertex(L,K,i);      while (id <= last) {        nextOnes.clear();        int nextFirst=firstVertex(L,K,i - 1);        int nextLast=lastVertex(L,K,i - 1);        int t=-1;        do {          t=nextFirst + (int)(rnd.nextDouble() * (nextLast - nextFirst + 1));          if (nextOnes.contains(t)) {            continue;          }          nextOnes.add(t);        } while (nextOnes.size() != fanout);        for (int f=0; f < nextOnes.size(); f++) {          int cap=(int)(rnd.nextDouble() * (maxCapacity - minCapacity));          EdgeInfo ei=new EdgeInfo(id,nextOnes.get(f),minCapacity + cap);          edges.add(ei);        }        id++;      }    }    for (int i=L / 2; i < L; i++) {      int id=firstVertex(L,K,i);      last=lastVertex(L,K,i);      while (id <= last) {        nextOnes.clear();        int nextFirst=firstVertex(L,K,i - 1);        int nextLast=lastVertex(L,K,i - 1);        int t=-1;        do {          t=nextFirst + (int)(rnd.nextDouble() * (nextLast - nextFirst + 1));          if (nextOnes.contains(t)) {            continue;          }          nextOnes.add(t);        } while (nextOnes.size() != fanout);        for (int f=0; f < nextOnes.size(); f++) {          int cap=(int)(rnd.nextDouble() * (maxCapacity - minCapacity));          EdgeInfo ei=new EdgeInfo(id,nextOnes.get(f),minCapacity + cap);          edges.add(ei);        }        id++;      }    }  }  last=lastVertex(L,K,L - 1);  for (int f=firstVertex(L,K,L - 1); f <= last; f++) {    int cap=(int)(rnd.nextDouble() * (maxCapacity - minCapacity));    EdgeInfo ei=new EdgeInfo(f,vertices.length - 1,minCapacity + cap);    edges.add(ei);  }  return edges;}  }
class C{  protected void fireValueChanged(boolean isAdjusting){  if (lastChangedIndex == MIN) {    return;  }  int oldFirstChangedIndex=firstChangedIndex;  int oldLastChangedIndex=lastChangedIndex;  firstChangedIndex=MAX;  lastChangedIndex=MIN;  fireValueChanged(oldFirstChangedIndex,oldLastChangedIndex,isAdjusting);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationfeaturenoversion.class,args);}  }
class C{  protected void duplicateClass(DiagnosticPosition pos,ClassSymbol c){  log.error(pos,"duplicate.class",c.fullname);}  }
class C{  public GroupLayer(float width,float height){  super(width,height);  disableClip=false;}  }
class C{  public short randomValueFromClosedInterval(short min,short max,MersenneTwisterFast random){  if (max - min < 0) {    short l=0;    do     l=(short)random.nextInt(); while (l < min || l > max);    return l;  } else   return (short)(min + random.nextInt(max - min + 1));}  }
class C{  private boolean isHeartRateInUINT16(final byte value){  return ((value & 0x01) != 0);}  }
class C{  public synchronized boolean deleteType(final BaseType baseType) throws CouldntDeleteException {  Preconditions.checkNotNull(baseType,"IE02786: Base type can not be null.");  if (!canDeletePointerType(baseType)) {    return false;  }  final Set<BaseType> affectedTypes=typesContainer.getAffectedTypes(baseType);  clearMembers(baseType,affectedTypes);  clearTypeSubstitutions(baseType);  typesContainer.deleteBaseType(baseType);  backend.deleteType(baseType);  notifyTypeDeleted(baseType);  return true;}  }
class C{  public static boolean isPrimitivePropertyDescriptor(PropertyDescriptor desc){  return PropertyMappingHelper.JAVA_TO_CASSANDRA_MAPPING.containsKey(desc.getPropertyType());}  }
class C{  public void addWarning(int code,Object... args){  warnings.add(Warning.parse(code,args));}  }
class C{  UndoLogRecord(Table table,short op,Row row){  this.table=table;  this.row=row;  this.operation=op;  this.state=IN_MEMORY;}  }
class C{  final int strengthOrder(int order){  int s=owner.getStrength();  if (s == Collator.PRIMARY) {    order&=RBCollationTables.PRIMARYDIFFERENCEONLY;  } else   if (s == Collator.SECONDARY) {    order&=RBCollationTables.SECONDARYDIFFERENCEONLY;  }  return order;}  }
class C{  private VOUser lockUser(VOUser voUser){  identityServiceClient.lockUserAccount(voUser);  voUser=identityServiceClient.refreshUserValue(voUser);  System.out.println("After lock user, user's status is \"" + voUser.getStatus().toString() + "\"");  return voUser;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  return canonicalForm;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistindexgetlength.class,args);}  }
class C{  private static boolean isUserPermBook(Session session,AuthenticationUser user,Iuserusertype userusertype,Idocarchhdr idoccarchhdr,Integer perm,boolean oficAsoc) throws HibernateException {  boolean includeBook=false;  if (userusertype.getType() == IDocKeys.IUSERUSERTYPE_USER_TYPE_ADMIN) {    includeBook=true;  } else   if (userusertype.getType() == IDocKeys.IUSERUSERTYPE_USER_TYPE_BOOK_ADMIN) {    includeBook=idoccarchhdr.getCrtrid() == user.getId().intValue() || checkScrBookAdmin(session,user.getId(),idoccarchhdr.getId());    if (!includeBook) {      includeBook=checkDeptPerm(session,idoccarchhdr.getId(),user.getDeptid(),perm);      if (!includeBook) {        includeBook=checkUserPerm(session,idoccarchhdr.getId(),user.getId(),perm);      }    }  } else   if (userusertype.getType() == IDocKeys.IUSERUSERTYPE_USER_TYPE_OPERATOR) {    includeBook=checkUserPerm(session,idoccarchhdr.getId(),user.getId(),perm);    if (!includeBook) {      includeBook=checkDeptPerm(session,idoccarchhdr.getId(),user.getDeptid(),perm);      if (!includeBook && oficAsoc) {        includeBook=checkDeptListPerm(session,idoccarchhdr.getId(),user.getDeptList(),perm);      }    }  }  return includeBook;}  }
class C{  @Override protected void injectComponent(BrainPhaserComponent component){  component.inject(this);}  }
class C{  public final void reset(){  onValidationSuccess=false;  onValidationFailure=false;}  }
class C{  public FilterOperand clone(){  FilterOperand result=new FilterOperand();  return result;}  }
class C{  public CellularAutomatonRNG(final byte[] seed){  if (seed == null || seed.length != SEED_SIZE_BYTES) {    throw new IllegalArgumentException("Cellular Automaton RNG requires a 32-bit (4-byte) seed.");  }  this.seed=seed.clone();  cells[AUTOMATON_LENGTH - 1]=seed[0] + 128;  cells[AUTOMATON_LENGTH - 2]=seed[1] + 128;  cells[AUTOMATON_LENGTH - 3]=seed[2] + 128;  cells[AUTOMATON_LENGTH - 4]=seed[3] + 128;  int seedAsInt=convertBytesToInt(seed,0);  if (seedAsInt != 0xFFFFFFFF) {    seedAsInt++;  }  for (int i=0; i < AUTOMATON_LENGTH - 4; i++) {    cells[i]=0x000000FF & seedAsInt >> i % 32;  }  for (int i=0; i < AUTOMATON_LENGTH * AUTOMATON_LENGTH / 4; i++) {    next(32);  }}  }
class C{  public CronThreadPoolExecutor(int corePoolSize){  super(corePoolSize);  this.cronJobWatchDogs=new ArrayList<>();  this.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);}  }
class C{  public void put(String key,File files[],String contentType,String customFileName) throws FileNotFoundException {  if (key != null) {    List<FileWrapper> fileWrappers=new ArrayList<FileWrapper>();    for (int i=0; i < files.length; i++) {      if (files[i] == null || !files[i].exists()) {        throw new FileNotFoundException();      }      fileWrappers.add(new FileWrapper(files[i],contentType,customFileName));    }    fileArrayParams.put(key,fileWrappers);  }}  }
class C{  public Instruction instruction(){  return _instr;}  }
class C{  protected NamedBean createInstance(){  return new DefaultLogix("IX 0");}  }
class C{  @Override public String toString(){  char[] chars=new char[10];  int v=value;  chars[0]='0';  chars[1]='x';  for (int x=9; x > 1; x--) {    int thisValue=v & 0x0F;    if (thisValue > 9) {      chars[x]=(char)('A' + thisValue - 10);    } else {      chars[x]=(char)('0' + thisValue);    }    v>>>=4;  }  return new String(chars);}  }
class C{  public CacheAtomicUpdateTimeoutException(String msg){  super(msg);}  }
class C{  protected String nextID(){  return "_" + contextUuid + nextID++;}  }
class C{  public void addListener(@Service TableListener listener){  _listeners.add(listener);}  }
class C{  protected boolean graphicGestureReaction(OMGraphic graphic,int descriptor,MouseEvent e){  LinkProperties props=(LinkProperties)graphic.getAttribute(OMGraphic.APP_OBJECT);  boolean mc=LinkUtil.isMask(descriptor,MOUSE_CLICKED_MASK);  boolean mr=LinkUtil.isMask(descriptor,MOUSE_RELEASED_MASK);  boolean mm=LinkUtil.isMask(descriptor,MOUSE_MOVED_MASK);  boolean si=LinkUtil.isMask(getGestureDescriptor(),SERVER_NOTIFICATION_MASK);  boolean ret=true;  if (mr || mc) {    String url=props.getProperty(LPC_URL);    if (url != null) {      if (Debug.debugging("link")) {        System.out.println("LinkLayer:graphicGestureReaction: displaying url: " + url);      }      fireRequestURL(url);      ret=si;    } else {      String html=props.getProperty(LPC_HTML);      if (html != null) {        fireRequestBrowserContent(html);        ret=si;      }    }    url=props.getProperty(LPC_MESSAGE);    if (url != null) {      fireRequestMessage(url);      ret=si;    }  }  if (mr || mm || mc) {    String info=props.getProperty(LPC_INFO);    if (info != null) {      if (Debug.debugging("link")) {        System.out.println("LinkLayer:graphicGestureReaction: displaying info line: " + info);      }      fireRequestInfoLine(info);      ret=si;    }  }  return ret;}  }
class C{  public static void writeHttpResponse(OutputStream out,String contentType,String response) throws IOException {  OutputStreamWriter osw=new OutputStreamWriter(out);  writeHttpResponseHeader(osw,contentType,response.length());  osw.write(response);  osw.flush();}  }
class C{  public void pixelsToValue(float[] pixels){  Matrix tmp=new Matrix();  mMatrixOffset.invert(tmp);  tmp.mapPoints(pixels);  mViewPortHandler.getMatrixTouch().invert(tmp);  tmp.mapPoints(pixels);  mMatrixValueToPx.invert(tmp);  tmp.mapPoints(pixels);}  }
class C{  public boolean stop(){  boolean isLDAPServerStopped=true;  if (_isRunning) {    _inMemoryDS.shutDown(true);    _isRunning=false;    _log.info("Stopping LDAP Service");  } else {    _log.debug("LDAP Service is not running");    isLDAPServerStopped=false;  }  return isLDAPServerStopped;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  Attr newAttr1;  Attr newAttr2;  Attr newAttribute;  String attrName;  doc=(Document)load("staffNS",false);  element=doc.createElementNS("http://www.w3.org/DOM/Test","root");  newAttr1=doc.createAttributeNS("http://www.w3.org/DOM/L1","L1:att");  newAttribute=((Element)element).setAttributeNodeNS(newAttr1);  newAttr2=doc.createAttributeNS("http://www.w3.org/DOM/L2","L2:att");  newAttribute=((Element)element).setAttributeNodeNS(newAttr2);  attributes=element.getAttributes();  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L2","att");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemns03","L2:att",attrName);}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  public EdgeWeightedDigraph(In in){  this(in.readInt());  int E=in.readInt();  if (E < 0)   throw new IllegalArgumentException("Number of edges must be nonnegative");  for (int i=0; i < E; i++) {    int v=in.readInt();    int w=in.readInt();    if (v < 0 || v >= V)     throw new IndexOutOfBoundsException("vertex " + v + " is not between 0 and "+ (V - 1));    if (w < 0 || w >= V)     throw new IndexOutOfBoundsException("vertex " + w + " is not between 0 and "+ (V - 1));    double weight=in.readDouble();    addEdge(new DirectedEdge(v,w,weight));  }}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  private void addSpecialInput(String rawText){  String specialInput=rawText.split("=")[0].trim();  rawText=rawText.split("=")[1].trim();  Map<String,Double> table=StringUtils.getTableFromInput(rawText);  CategoricalTable.Builder builder=new CategoricalTable.Builder(specialInput);  for (  String value : table.keySet()) {    builder.addRow(value,table.get(value));  }  new Thread(null).start();}  }
class C{  public BufferedFile(File file,String mode) throws IOException {  this(file,mode,BufferedFile.DEFAULT_BUFFER_SIZE);}  }
class C{  private FeatureExtractor populateFex(FeatureCollection fex) throws EdisonException {  Map<String,FeatureExtractor> cf=new HashMap<>();  for (  Tree<String> defn : parser.getDefinitions()) {    if (defn.getNumberOfChildren() != 2) {      throw new EdisonException("Invalid definition. Expecting (define name body)\n" + defn);    }    String name=defn.getChild(0).getLabel();    FeatureExtractor body=this.createFex(defn.getChild(1),cf);    cf.put(definition(name),new CachedFeatureCollection("",body));  }  fex.addFeatureExtractor(this.createFex(parser.getFeatureDescriptor(),cf));  return fex;}  }
class C{  @Override public void updateArray(int columnIndex,Array x) throws SQLException {  throw unsupported("setArray");}  }
class C{  @Override public void run(){  amIActive=true;  int progress;  int row, col, i;  int baseCol, baseRow, appendCol, appendRow;  double x, y, z, zN, zBase, zAppend;  double w1, w2, dist1, dist2, sumDist;  double r1, g1, b1, r2, g2, b2;  int r, g, b;  boolean performHistoMatching=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputBaseHeader=args[0];  String inputHeader=args[1];  String outputHeader=args[2];  String resampleMethod=args[3].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.contains("cubic")) {    showFeedback("Resample method not recognized");    return;  }  if (args[4].toLowerCase().contains("true")) {    performHistoMatching=true;  } else {    performHistoMatching=false;  }  double power=Double.parseDouble(args[5]);  if (power > 15.0) {    power=15.0;  }  if (power < 1.0) {    power=1.0;  }  try {    if (performHistoMatching) {      String inputHeaderAdjusted=StringUtilities.replaceLast(inputHeader,".dep","_temp1.dep");      histogramMatching(inputHeader,inputBaseHeader,inputHeaderAdjusted);      inputHeader=inputHeaderAdjusted;    }    WhiteboxRaster baseRaster=new WhiteboxRaster(inputBaseHeader,"r");    WhiteboxRaster appendRaster=new WhiteboxRaster(inputHeader,"r");    boolean rgbMode=((baseRaster.getDataScale() == WhiteboxRasterBase.DataScale.RGB) & (appendRaster.getDataScale() == WhiteboxRasterBase.DataScale.RGB));    double cellSizeX=baseRaster.getCellSizeX();    double cellSizeY=baseRaster.getCellSizeY();    double baseNoData=baseRaster.getNoDataValue();    double appendNoData=appendRaster.getNoDataValue();    double outputNoData=baseNoData;    int baseCols=baseRaster.getNumberColumns();    int baseRows=baseRaster.getNumberRows();    int appendCols=appendRaster.getNumberColumns();    int appendRows=appendRaster.getNumberRows();    double baseNorth=baseRaster.getNorth();    double baseSouth=baseRaster.getSouth();    double baseEast=baseRaster.getEast();    double baseWest=baseRaster.getWest();    double baseNSRange=baseNorth - baseSouth;    double baseEWRange=baseEast - baseWest;    double appendNorth=appendRaster.getNorth();    double appendSouth=appendRaster.getSouth();    double appendEast=appendRaster.getEast();    double appendWest=appendRaster.getWest();    double appendNSRange=appendNorth - appendSouth;    double appendEWRange=appendEast - appendWest;    double north, south, east, west;    if (baseNorth > baseSouth) {      north=Double.NEGATIVE_INFINITY;      south=Double.POSITIVE_INFINITY;      if (baseNorth > north) {        north=baseNorth;      }      if (appendNorth > north) {        north=appendNorth;      }      if (baseSouth < south) {        south=baseSouth;      }      if (appendSouth < south) {        south=appendSouth;      }    } else {      north=Double.POSITIVE_INFINITY;      south=Double.NEGATIVE_INFINITY;      if (baseNorth < north) {        north=baseNorth;      }      if (appendNorth < north) {        north=appendNorth;      }      if (baseSouth > south) {        south=baseSouth;      }      if (appendSouth > south) {        south=appendSouth;      }    }    if (baseEast > baseWest) {      east=Double.NEGATIVE_INFINITY;      west=Double.POSITIVE_INFINITY;      if (baseEast > east) {        east=baseEast;      }      if (appendEast > east) {        east=appendEast;      }      if (baseWest < west) {        west=baseWest;      }      if (appendWest < west) {        west=appendWest;      }    } else {      east=Double.POSITIVE_INFINITY;      west=Double.NEGATIVE_INFINITY;      if (baseEast < east) {        east=baseEast;      }      if (appendEast < east) {        east=appendEast;      }      if (baseWest > west) {        west=baseWest;      }      if (appendWest > west) {        west=appendWest;      }    }    int nRows=(int)Math.round(Math.abs(north - south) / cellSizeY);    int nCols=(int)Math.round(Math.abs(east - west) / cellSizeX);    WhiteboxRaster destination=new WhiteboxRaster(outputHeader,north,south,east,west,nRows,nCols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,outputNoData,outputNoData);    if (rgbMode) {      destination.setDataScale(WhiteboxRasterBase.DataScale.RGB);    }    int nRowsLessOne=nRows - 1;    String distToEdgeBaseHeader=StringUtilities.replaceLast(inputBaseHeader,".dep","_temp1.dep");    WhiteboxRaster distToEdgeBase=new WhiteboxRaster(distToEdgeBaseHeader,"rw",inputBaseHeader,WhiteboxRaster.DataType.FLOAT,Float.POSITIVE_INFINITY);    distToEdgeBase.isTemporaryFile=true;    double[] data;    for (row=0; row < baseRows; row++) {      data=baseRaster.getRowValues(row);      for (col=0; col < baseCols; col++) {        if (row == 0 || row == baseRows - 1) {          distToEdgeBase.setValue(row,col,0.0);        } else         if (col == 0 || col == baseCols - 1) {          distToEdgeBase.setValue(row,col,0.0);        } else {          if (data[col] != baseNoData) {            if (data[col - 1] == baseNoData || data[col + 1] == baseNoData) {              distToEdgeBase.setValue(row,col,0.0);            }          } else {            distToEdgeBase.setValue(row,col,0.0);          }        }      }    }    calculateDistance(distToEdgeBase);    String distToEdgeAppendHeader=whitebox.utilities.StringUtilities.replaceLast(inputBaseHeader,".dep","_temp2.dep");    WhiteboxRaster distToEdgeAppend=new WhiteboxRaster(distToEdgeAppendHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,Float.POSITIVE_INFINITY);    distToEdgeAppend.isTemporaryFile=true;    for (row=0; row < appendRows; row++) {      data=appendRaster.getRowValues(row);      for (col=0; col < appendCols; col++) {        if (row == 0 || row == appendRows - 1) {          distToEdgeAppend.setValue(row,col,0.0);        } else         if (col == 0 || col == appendCols - 1) {          distToEdgeAppend.setValue(row,col,0.0);        } else {          if (data[col] != appendNoData) {            if (data[col - 1] == appendNoData || data[col + 1] == appendNoData) {              distToEdgeAppend.setValue(row,col,0.0);            }          } else {            distToEdgeAppend.setValue(row,col,0.0);          }        }      }    }    calculateDistance(distToEdgeAppend);    if (resampleMethod.contains("nearest")) {      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          x=destination.getXCoordinateFromColumn(col);          y=destination.getYCoordinateFromRow(row);          baseCol=baseRaster.getColumnFromXCoordinate(x);          baseRow=baseRaster.getRowFromYCoordinate(y);          appendCol=appendRaster.getColumnFromXCoordinate(x);          appendRow=appendRaster.getRowFromYCoordinate(y);          zBase=baseRaster.getValue(baseRow,baseCol);          zAppend=appendRaster.getValue(appendRow,appendCol);          if (zBase != baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,zBase);          } else           if (zBase == baseNoData && zAppend != appendNoData) {            destination.setValue(row,col,zAppend);          } else           if (zBase == baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,outputNoData);          } else {            dist1=distToEdgeBase.getValue(baseRow,baseCol);            dist2=distToEdgeAppend.getValue(appendRow,appendCol);            sumDist=Math.pow(dist1,power) + Math.pow(dist2,power);            w1=Math.pow(dist1,power) / sumDist;            w2=Math.pow(dist2,power) / sumDist;            if (!rgbMode) {              z=w1 * zBase + w2 * zAppend;            } else {              r1=(double)((int)zBase & 0xFF);              g1=(double)(((int)zBase >> 8) & 0xFF);              b1=(double)(((int)zBase >> 16) & 0xFF);              r2=(double)((int)zAppend & 0xFF);              g2=(double)(((int)zAppend >> 8) & 0xFF);              b2=(double)(((int)zAppend >> 16) & 0xFF);              r=(int)((r1 * w1) + (r2 * w2));              g=(int)((g1 * w1) + (g2 * w2));              b=(int)((b1 * w1) + (b2 * w2));              z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            }            destination.setValue(row,col,z);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / nRowsLessOne);        updateProgress("Resampling images: ",progress);      }    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.contains("cubic")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[numNeighbours][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[numNeighbours][2];      }      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          x=destination.getXCoordinateFromColumn(col);          y=destination.getYCoordinateFromRow(row);          baseCol=baseRaster.getColumnFromXCoordinate(x);          baseRow=baseRaster.getRowFromYCoordinate(y);          srcRow=(baseNorth - y) / baseNSRange * (baseRows - 0.5);          srcCol=(x - baseWest) / baseEWRange * (baseCols - 0.5);          originRow=Math.floor(srcRow);          originCol=Math.floor(srcCol);          sumOfDist=0;          for (i=0; i < numNeighbours; i++) {            rowN=originRow + shiftY[i];            colN=originCol + shiftX[i];            neighbour[i][0]=baseRaster.getValue((int)rowN,(int)colN);            dY=rowN - srcRow;            dX=colN - srcCol;            if ((dX + dY) != 0 && neighbour[i][0] != baseNoData) {              neighbour[i][1]=1 / (dX * dX + dY * dY);              sumOfDist+=neighbour[i][1];            } else             if (neighbour[i][0] == baseNoData) {              neighbour[i][1]=0;            } else {              neighbour[i][1]=99999999;              sumOfDist+=neighbour[i][1];            }          }          if (sumOfDist > 0) {            z=0;            for (i=0; i < numNeighbours; i++) {              z+=neighbour[i][0] * neighbour[i][1] / sumOfDist;            }            zBase=z;          } else {            zBase=baseNoData;          }          appendCol=appendRaster.getColumnFromXCoordinate(x);          appendRow=appendRaster.getRowFromYCoordinate(y);          srcRow=(appendNorth - y) / appendNSRange * (appendRows - 0.5);          srcCol=(x - appendWest) / appendEWRange * (appendCols - 0.5);          originRow=Math.floor(srcRow);          originCol=Math.floor(srcCol);          sumOfDist=0;          for (i=0; i < numNeighbours; i++) {            rowN=originRow + shiftY[i];            colN=originCol + shiftX[i];            neighbour[i][0]=appendRaster.getValue((int)rowN,(int)colN);            dY=rowN - srcRow;            dX=colN - srcCol;            if ((dX + dY) != 0 && neighbour[i][0] != appendNoData) {              neighbour[i][1]=1 / (dX * dX + dY * dY);              sumOfDist+=neighbour[i][1];            } else             if (neighbour[i][0] == appendNoData) {              neighbour[i][1]=0;            } else {              neighbour[i][1]=99999999;              sumOfDist+=neighbour[i][1];            }          }          if (sumOfDist > 0) {            z=0;            for (i=0; i < numNeighbours; i++) {              z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;            }            zAppend=z;          } else {            zAppend=appendNoData;          }          if (zBase != baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,zBase);          } else           if (zBase == baseNoData && zAppend != appendNoData) {            destination.setValue(row,col,zAppend);          } else           if (zBase == baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,outputNoData);          } else {            dist1=distToEdgeBase.getValue(baseRow,baseCol);            dist2=distToEdgeAppend.getValue(appendRow,appendCol);            sumDist=dist1 + dist2;            w1=dist1 / sumDist;            w2=dist2 / sumDist;            z=w1 * zBase + w2 * zAppend;            destination.setValue(row,col,z);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / nRowsLessOne);        updateProgress("Resampling images: ",progress);      }    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    distToEdgeBase.close();    distToEdgeAppend.close();    baseRaster.close();    if (performHistoMatching) {      File header=new File(inputHeader);      if (header.exists()) {        header.delete();      }      File dataFile=new File(StringUtilities.replaceLast(inputHeader,".dep",".tas"));      if (dataFile.exists()) {        dataFile.delete();      }    } else {      appendRaster.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void sort(char[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  public boolean isManage(){  return manage;}  }
class C{  public CloudObject[] queryGreaterThan(String type,int index,String value,int page,int limit,int visibilityScope) throws CloudException {  return (CloudObject[])queryImpl(type,value,index,page,limit,visibilityScope,2,0,false,false,false,null);}  }
class C{  public synchronized boolean isCancelled(int taskId){  return taskInfo[taskId].isCancelled();}  }
class C{  public EventBus(){  this("default");}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    WorkingKey=generateWorkingKey(((KeyParameter)params).getKey(),forEncryption);    this.forEncryption=forEncryption;    return;  }  throw new IllegalArgumentException("invalid parameter passed to AES init - " + params.getClass().getName());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_4__INDEX_1:    return getIndex_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  void evaluate(){  double T1r, T1i, T3r, T3i;  double Rr, Ri, Sr, Si;  Xr[m0]=xr[n0] + xr[n4];  Xi[m0]=xi[n0] + xi[n4];  Xr[m1]=xr[n0] - xr[n4];  Xi[m1]=xi[n0] - xi[n4];  Rr=xr[n2] + xr[n6];  Ri=xi[n2] + xi[n6];  Sr=xi[n6] - xi[n2];  Si=xr[n2] - xr[n6];  Xr[m2]=Xr[m0] - Rr;  Xi[m2]=Xi[m0] - Ri;  Xr[m3]=Xr[m1] + Sr;  Xi[m3]=Xi[m1] + Si;  Xr[m0]+=Rr;  Xi[m0]+=Ri;  Xr[m1]-=Sr;  Xi[m1]-=Si;  Xr[m4]=xr[n1] + xr[n5];  Xi[m4]=xi[n1] + xi[n5];  Xr[m5]=xr[n1] - xr[n5];  Xi[m5]=xi[n1] - xi[n5];  Xr[m6]=xr[n3] + xr[n7];  Xi[m6]=xi[n3] + xi[n7];  Xr[m7]=xr[n3] - xr[n7];  Xi[m7]=xi[n3] - xi[n7];  Rr=Xr[m4] + Xr[m6];  Ri=Xi[m4] + Xi[m6];  Sr=Xi[m6] - Xi[m4];  Si=Xr[m4] - Xr[m6];  Xr[m4]=Xr[m0] - Rr;  Xi[m4]=Xi[m0] - Ri;  Xr[m6]=Xr[m2] + Sr;  Xi[m6]=Xi[m2] + Si;  Xr[m0]+=Rr;  Xi[m0]+=Ri;  Xr[m2]-=Sr;  Xi[m2]-=Si;  T1r=SQRT2BY2 * (Xr[m5] + Xi[m5]);  T1i=SQRT2BY2 * (Xi[m5] - Xr[m5]);  T3r=SQRT2BY2 * (Xi[m7] - Xr[m7]);  T3i=-SQRT2BY2 * (Xi[m7] + Xr[m7]);  Rr=T1r + T3r;  Ri=T1i + T3i;  Sr=T3i - T1i;  Si=T1r - T3r;  Xr[m5]=Xr[m1] - Rr;  Xi[m5]=Xi[m1] - Ri;  Xr[m7]=Xr[m3] + Sr;  Xi[m7]=Xi[m3] + Si;  Xr[m1]+=Rr;  Xi[m1]+=Ri;  Xr[m3]-=Sr;  Xi[m3]-=Si;}  }
class C{  private void updateTitle(){  Log.v(TAG,"Setting title to " + getTitle());  final CollapsingToolbarLayout appBarLayout=(CollapsingToolbarLayout)getActivity().findViewById(R.id.toolbar_layout);  if (appBarLayout != null) {    appBarLayout.setTitle(getTitle());  } else {    ActionBar actionBar=((AppCompatActivity)getActivity()).getSupportActionBar();    if (actionBar != null)     actionBar.setTitle(getTitle());  }}  }
class C{  public int nextObjectId(){  return objectId++;}  }
class C{  public DOMSignatureProperty(Element propElem,XMLCryptoContext context) throws MarshalException {  target=DOMUtils.getAttributeValue(propElem,"Target");  if (target == null) {    throw new MarshalException("target cannot be null");  }  Attr attr=propElem.getAttributeNodeNS(null,"Id");  if (attr != null) {    id=attr.getValue();    propElem.setIdAttributeNode(attr,true);  } else {    id=null;  }  NodeList nodes=propElem.getChildNodes();  int length=nodes.getLength();  List<XMLStructure> content=new ArrayList<XMLStructure>(length);  for (int i=0; i < length; i++) {    content.add(new javax.xml.crypto.dom.DOMStructure(nodes.item(i)));  }  if (content.isEmpty()) {    throw new MarshalException("content cannot be empty");  } else {    this.content=Collections.unmodifiableList(content);  }}  }
class C{  public static void addMimeType(String mimeType,int regLevel) throws RegisterFailedException {  String temMimeKey=getMimeTypeKey(mimeType,regLevel);  if (temMimeKey != null) {    regCreateKeyEx(temMimeKey,regLevel);  }}  }
class C{  public JCTree translateTopLevelClass(JCTree cdef,TreeMaker make){  this.make=make;  pt=null;  return translate(cdef,null);}  }
class C{  public static boolean isFailure(int status){  return isError(status) && !isCancelled(status);}  }
class C{  private Region<String,String> createClientRegion(String name,Compressor compressor,ClientRegionShortcut shortcut){  ClientCacheFactory factory=getClientCacheFactory(getLocatorPort());  return getClientCache(factory).<String,String>createClientRegionFactory(shortcut).setCloningEnabled(true).setCompressor(compressor).create(name);}  }
class C{  private void clearAll(){  steppableObjects.clear();  objectSelection.removeAll();  objectsInCombo.clear();  selectedObject=null;  occurrence=0;  inputChanged();}  }
class C{  public boolean isCommentDirective(String line){  return false;}  }
class C{  public void addHandler(String path,ElementHandler handler){  getDispatchHandler().addHandler(path,handler);}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  private boolean copy(File infile,File outfile){  FileInputStream fis=null;  try {    fis=new FileInputStream(infile);  } catch (  FileNotFoundException fnfe) {    System.err.println(fnfe);    return false;  }  FileOutputStream fos=null;  try {    fos=new FileOutputStream(outfile,false);  } catch (  FileNotFoundException fnfe) {    System.err.println(fnfe);    return false;  }  int noIn=0;  int noOut=0;  int noLines=1;  try {    int c;    while ((c=fis.read()) != -1) {      noIn++;      if (c != 10) {        fos.write(c);        noOut++;      }      if (c == 13)       noLines++;    }    fis.close();    fos.close();  } catch (  IOException ioe) {    System.err.println(ioe);    return false;  }  System.out.println("  read: " + noIn + ", written: "+ noOut+ " - lines: "+ noLines);  return true;}  }
class C{  private void createFullScreenVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  public TraceEntity_ createTraceEntity_(){  TraceEntity_Impl traceEntity_=new TraceEntity_Impl();  return traceEntity_;}  }
class C{  public <T extends View>T findViewByIdEfficient(int parentId,int id){  View viewRetrieve=retrieveFromCache(parentId,id);  if (viewRetrieve == null) {    viewRetrieve=findViewById(parentId,id);    if (viewRetrieve != null) {      storeView(parentId,id,viewRetrieve);    }  }  return (T)viewRetrieve;}  }
class C{  private static void checkArguments(final AbstractSQLProvider provider,final ITreeNode<CTag> tag){  Preconditions.checkNotNull(provider,"IE00551: Provider argument can not be null");  Preconditions.checkNotNull(tag,"IE00552: Tag argument can not be null");  Preconditions.checkArgument(tag.getObject().inSameDatabase(provider),"IE00553: Tag is not part of this database");}  }
class C{  void remove(int fieldNumber){  int i=binarySearch(fieldNumber);  if (i >= 0 && mData[i] != DELETED) {    mData[i]=DELETED;    mGarbage=true;  }}  }
class C{  public static String join(String sep,String... parts){  StringBuilder sb=new StringBuilder();  for (  String part : parts) {    sb.append(part).append(sep);  }  return sb.subSequence(0,sb.length() - sep.length()).toString();}  }
class C{  private void adjustFocus(boolean inWindow){  if ((panel != null) && panel.isEnabled() && panel.isRequestFocusEnabled()) {    if (inWindow) {      panel.requestFocusInWindow();    } else {      panel.requestFocus();    }  }}  }
class C{  public boolean needToCheck(){  return this.needToCheck;}  }
class C{  protected void paintImage(Graphics g,int x,int y){  if (bgImage != null)   g.drawImage(bgImage,x,y,null);}  }
class C{  @Override public void repaint(){  if (textPane != null) {    textPane.repaint();  }}  }
class C{  @Override public void nodeChanged(){  _log.info("systerm property changed");  loadParameterFromZK();}  }
class C{  public void startProximityDetection(float threshold,ProximityListener proximityListener){  startLibrarySensorDetection(new ProximityDetector(threshold,proximityListener),proximityListener);}  }
class C{  public SQLNonTransientException(Throwable cause){  super(cause);}  }
class C{  public static boolean equals(IBinding b1,IBinding b2){  return b1.isEqualTo(b2);}  }
class C{  private boolean addAllChangesFor(SearchResultGroup rg,ICompilationUnit unitHandle,CompilationUnitChange unitChange) throws CoreException {  Assert.isTrue(rg == null || rg.getCompilationUnit() == unitHandle);  CompilationUnit unit=getASTFor(unitHandle);  ASTRewrite unitRewriter=ASTRewrite.create(unit.getAST());  MultiTextEdit root=new MultiTextEdit();  boolean someChange=false;  unitChange.setEdit(root);  fImportRewriter=StubUtility.createImportRewrite(unit,true);  if (unitHandle.equals(fFactoryUnitHandle)) {    TextEditGroup factoryGD=new TextEditGroup(RefactoringCoreMessages.IntroduceFactory_addFactoryMethod);    createFactoryChange(unitRewriter,unit,factoryGD);    unitChange.addTextEditGroup(factoryGD);    someChange=true;  }  if (rg != null)   if (replaceConstructorCalls(rg,unit,unitRewriter,unitChange))   someChange=true;  if (shouldProtectConstructor() && isConstructorUnit(unitHandle)) {    TextEditGroup declGD=new TextEditGroup(RefactoringCoreMessages.IntroduceFactory_protectConstructor);    if (protectConstructor(unit,unitRewriter,declGD)) {      unitChange.addTextEditGroup(declGD);      someChange=true;    }  }  if (someChange) {    root.addChild(unitRewriter.rewriteAST());    root.addChild(fImportRewriter.rewriteImports(null));  }  return someChange;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isApplication(){  return (applet == null);}  }
class C{  public static Object valueFromClassConstant(String key,Object defaultValue){  Configuration conf=instance();  String val=valueFor(key);  if (val == null) {    return defaultValue;  }  int idx=val.lastIndexOf(".");  String klassname;  String cnst;  try {    klassname=val.substring(0,idx);    cnst=val.substring(idx + 1);  } catch (  IndexOutOfBoundsException e) {    conf.warning("Property key " + key + " for object value constant is not properly formatted; "+ "should be FQN<dot>constant, is "+ val);    return defaultValue;  }  Class klass;  try {    klass=Class.forName(klassname);  } catch (  ClassNotFoundException e) {    conf.warning("Property for object value constant " + key + " is not a FQN: "+ klassname);    return defaultValue;  }  Object cnstVal;  try {    Field fld=klass.getDeclaredField(cnst);    try {      cnstVal=fld.get(klass);    } catch (    IllegalAccessException e) {      conf.warning("Property for object value constant " + key + ", field is not public: "+ klassname+ "."+ cnst);      return defaultValue;    }  } catch (  NoSuchFieldException e) {    conf.warning("Property for object value constant " + key + " is not a FQN: "+ klassname);    return defaultValue;  }  return cnstVal;}  }
class C{  public PlaylistItem(sage.io.SageDataFile inStream) throws java.io.IOException {  java.util.ArrayList angles=new java.util.ArrayList();  int dataLength=inStream.readUnsignedShort();  long startPos=inStream.position();  byte[] strHolder=new byte[5];  inStream.readFully(strHolder);  clipInfoName=new String(strHolder,BluRayParser.BLURAY_CHARSET);  inStream.readFully(strHolder,0,4);  String codecID=new String(strHolder,0,4,BluRayParser.BLURAY_CHARSET);  int flags=inStream.readUnsignedShort();  boolean multiAngle=(flags & 0x10) != 0;  int stcId=inStream.read();  angles.add(new ClipInfo(0,clipInfoName,codecID,stcId));  inTime=inStream.readInt();  outTime=inStream.readInt();  duration=(outTime - inTime) / 45;  inStream.skipBytes(12);  if (multiAngle) {    int numAngles=inStream.read();    inStream.skipBytes(1);    for (int i=1; i < numAngles; i++) {      inStream.readFully(strHolder);      String angleInfoName=new String(strHolder,BluRayParser.BLURAY_CHARSET);      inStream.readFully(strHolder,0,4);      codecID=new String(strHolder,0,4,BluRayParser.BLURAY_CHARSET);      stcId=inStream.read();      angles.add(new ClipInfo(i,angleInfoName,codecID,stcId));    }  }  itemClips=(ClipInfo[])angles.toArray(new ClipInfo[0]);  int numStreams=inStream.readUnsignedShort();  inStream.skipBytes(2);  int primaryVideoStreamLength=inStream.readByte();  int primaryAudioStreamLength=inStream.readByte();  int pgTextStStreamLength=inStream.readByte();  int igStreamLength=inStream.readByte();  int secondaryAudioStreamLength=inStream.readByte();  int secondaryVideoStreamLength=inStream.readByte();  int pipPGTextStStreamLength=inStream.readByte();  inStream.skipBytes(5);  primaryVideoStreams=new sage.media.format.VideoFormat[primaryVideoStreamLength];  primaryAudioStreams=new sage.media.format.AudioFormat[primaryAudioStreamLength];  java.util.ArrayList subtitleVec=new java.util.ArrayList();  for (int i=0; i < primaryVideoStreams.length; i++) {    primaryVideoStreams[i]=new sage.media.format.VideoFormat();    inStream.skipBytes(1);    int entryType=inStream.read();    if (entryType == 1) {      int pid=inStream.readUnsignedShort();      primaryVideoStreams[i].setId(Integer.toString(pid,16));      inStream.skipBytes(6);      inStream.skipBytes(1);      int streamType=inStream.read();switch (streamType) {case 0x02:        primaryVideoStreams[i].setFormatName(sage.media.format.MediaFormat.MPEG2_VIDEO);      break;case 0x1b:    primaryVideoStreams[i].setFormatName(sage.media.format.MediaFormat.H264);  break;case 0xea:primaryVideoStreams[i].setFormatName(sage.media.format.MediaFormat.VC1);break;default :primaryVideoStreams[i].setFormatName("Video");if (sage.Sage.DBG) System.out.println("ERROR in BluRay parsing, unknown video stream type of " + streamType);break;}int formatFlags=inStream.read();int frameRate=formatFlags & 0xF;int dimen=formatFlags >> 4;switch (frameRate) {case 1:primaryVideoStreams[i].setFpsNum(24000);primaryVideoStreams[i].setFpsDen(1001);primaryVideoStreams[i].setFps(24000.0f / 1001.0f);break;case 2:primaryVideoStreams[i].setFpsNum(24);primaryVideoStreams[i].setFpsDen(1);primaryVideoStreams[i].setFps(24);break;case 3:primaryVideoStreams[i].setFpsNum(25);primaryVideoStreams[i].setFpsDen(1);primaryVideoStreams[i].setFps(25);break;case 4:primaryVideoStreams[i].setFpsNum(30000);primaryVideoStreams[i].setFpsDen(1001);primaryVideoStreams[i].setFps(30000.0f / 1001.0f);break;case 6:primaryVideoStreams[i].setFpsNum(50);primaryVideoStreams[i].setFpsDen(1);primaryVideoStreams[i].setFps(50);break;case 7:primaryVideoStreams[i].setFpsNum(60000);primaryVideoStreams[i].setFpsDen(1001);primaryVideoStreams[i].setFps(60000.0f / 1001.0f);break;default :if (sage.Sage.DBG) System.out.println("ERROR in BluRay parsing; invalid frame rate of " + frameRate);break;}switch (dimen) {case 1:primaryVideoStreams[i].setWidth(720);primaryVideoStreams[i].setHeight(480);primaryVideoStreams[i].setInterlaced(true);break;case 2:primaryVideoStreams[i].setWidth(720);primaryVideoStreams[i].setHeight(576);primaryVideoStreams[i].setInterlaced(true);break;case 3:primaryVideoStreams[i].setWidth(720);primaryVideoStreams[i].setHeight(480);primaryVideoStreams[i].setInterlaced(false);break;case 4:primaryVideoStreams[i].setWidth(1920);primaryVideoStreams[i].setHeight(1080);primaryVideoStreams[i].setInterlaced(true);break;case 5:primaryVideoStreams[i].setWidth(1280);primaryVideoStreams[i].setHeight(720);primaryVideoStreams[i].setInterlaced(false);break;case 6:primaryVideoStreams[i].setWidth(1920);primaryVideoStreams[i].setHeight(1080);primaryVideoStreams[i].setInterlaced(false);break;case 7:primaryVideoStreams[i].setWidth(720);primaryVideoStreams[i].setHeight(576);primaryVideoStreams[i].setInterlaced(false);break;default :if (sage.Sage.DBG) System.out.println("ERROR in BluRay parsing; invalid frame size of " + dimen);break;}inStream.skipBytes(3);} else {inStream.skipBytes(14);}}for (int i=0; i < primaryAudioStreams.length; i++) {primaryAudioStreams[i]=new sage.media.format.AudioFormat();primaryAudioStreams[i].setOrderIndex(i);inStream.skipBytes(1);int entryType=inStream.read();if (entryType == 1) {int pid=inStream.readUnsignedShort();primaryAudioStreams[i].setId(Integer.toString(pid,16));inStream.skipBytes(6);inStream.skipBytes(1);int streamType=inStream.read();switch (streamType) {case 0x80:primaryAudioStreams[i].setFormatName("PCM_BD");break;case 0x81:primaryAudioStreams[i].setFormatName(sage.media.format.MediaFormat.AC3);break;case 0x82:primaryAudioStreams[i].setFormatName(sage.media.format.MediaFormat.DTS);break;case 0x83:primaryAudioStreams[i].setFormatName(sage.media.format.MediaFormat.DOLBY_HD);break;case 0x84:primaryAudioStreams[i].setFormatName(sage.media.format.MediaFormat.EAC3);break;case 0x85:primaryAudioStreams[i].setFormatName(sage.media.format.MediaFormat.DTS_HD);break;case 0x86:primaryAudioStreams[i].setFormatName(sage.media.format.MediaFormat.DTS_MA);break;default :primaryAudioStreams[i].setFormatName("Audio");if (sage.Sage.DBG) System.out.println("ERROR in BluRay parsing, unknown audio stream type of " + streamType);break;}int formatFlags=inStream.read();int sampling=formatFlags & 0xF;int channels=formatFlags >> 4;if (channels == 3) channels=2;primaryAudioStreams[i].setChannels(channels);switch (sampling) {case 1:primaryAudioStreams[i].setSamplingRate(48000);break;case 4:primaryAudioStreams[i].setSamplingRate(96000);break;case 5:primaryAudioStreams[i].setSamplingRate(192000);break;case 12:primaryAudioStreams[i].setSamplingRate(192000);break;case 14:primaryAudioStreams[i].setSamplingRate(96000);break;default :if (sage.Sage.DBG) System.out.println("ERROR in BluRay parsing; invalid audio sampling of " + sampling);break;}inStream.readFully(strHolder,0,3);primaryAudioStreams[i].setLanguage(new String(strHolder,0,3,BluRayParser.BLURAY_CHARSET));} else {inStream.skipBytes(14);}}for (int i=0; i < pipPGTextStStreamLength + pgTextStStreamLength; i++) {inStream.skipBytes(1);int entryType=inStream.read();if (entryType == 1) {int pid=inStream.readUnsignedShort();inStream.skipBytes(6);inStream.skipBytes(1);int streamType=inStream.read();if (streamType == 0x93 || streamType == 0x90) {sage.media.format.SubpictureFormat subpicFormat=new sage.media.format.SubpictureFormat();subtitleVec.add(subpicFormat);subpicFormat.setId(Integer.toString(pid,16));if (streamType == 0x90) {inStream.readFully(strHolder,0,3);subpicFormat.setLanguage(new String(strHolder,0,3,BluRayParser.BLURAY_CHARSET));inStream.skipBytes(1);} else {int charCode=inStream.read();inStream.readFully(strHolder,0,3);subpicFormat.setLanguage(new String(strHolder,0,3,BluRayParser.BLURAY_CHARSET));if (sage.Sage.DBG) System.out.println("Read char code for subpicstream of " + charCode + " lang="+ subpicFormat.getLanguage()+ " pid="+ subpicFormat.getId());}} else {inStream.skipBytes(4);}} else {inStream.skipBytes(14);}}subtitleStreams=(sage.media.format.SubpictureFormat[])subtitleVec.toArray(new sage.media.format.SubpictureFormat[0]);inStream.skipBytes((int)(dataLength - (inStream.position() - startPos)));}  }
class C{  public List<VolumeRestRep> findByName(String name){  return search().byName(name).run();}  }
class C{  public Set<ApiResourceMetadata> extractControllers(RamlRoot raml){  Set<ApiResourceMetadata> controllers=new LinkedHashSet<>();  if (raml == null) {    return controllers;  }  Set<String> names=new LinkedHashSet<>();  Set<String> namesToDisable=new LinkedHashSet<>();  for (  Entry<String,RamlResource> resource : raml.getResources().entrySet()) {    Set<ApiResourceMetadata> resources=checkResource(startUrl,resource.getValue(),null,raml);    for (    ApiResourceMetadata resourceMetadata : resources) {      if (names.contains(resourceMetadata.getResourceName())) {        namesToDisable.add(resourceMetadata.getResourceName());      }      names.add(resourceMetadata.getResourceName());      controllers.add(resourceMetadata);    }  }  for (  ApiResourceMetadata resourceMetadata : controllers) {    if (namesToDisable.contains(resourceMetadata.getResourceName())) {      resourceMetadata.setSingularizeName(false);    }  }  return controllers;}  }
class C{  public String serialize(Object object) throws ConverterException {  deep=0;  StringBuilder sb=new StringBuilder();  if (xmlConform)   sb.append("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>");  sb.append("<wddxPacket version=" + del + "1.0"+ del+ ">");  deep++;  sb.append(goIn() + "<header/>");  sb.append(goIn() + "<data>");  sb.append(_serialize(object,new HashSet<Object>()));  sb.append(goIn() + "</data>");  deep--;  sb.append("</wddxPacket>");  return sb.toString();}  }
class C{  public static String trimSpaces(String in){  if (in.indexOf(' ') == -1) {    return in;  }  final char[] c=in.toCharArray();  int start=0;  while (start < c.length && c[start] == ' ') {    start++;  }  int end=c.length;  while (end > start && c[end - 1] == ' ') {    end--;  }  return new String(c,start,end - start);}  }
class C{  public static ActorTaskContext currentFor(Thread thread){  TaskContext current=TaskContext.currentFor(thread);  if (current instanceof ActorTaskContext) {    return (ActorTaskContext)current;  }  return null;}  }
class C{  public boolean isDust(){  if (getScriptPubKey().isOpReturn())   return false;  return getValue().isLessThan(getMinNonDustValue());}  }
class C{  @Override public DummyProjectBuilder withName(String name){  return this;}  }
class C{  private static <T>void legacyMergeSort(T[] a,int fromIndex,int toIndex,Comparator<? super T> c){  T[] aux=copyOfRange(a,fromIndex,toIndex);  if (c == null)   mergeSort(aux,a,fromIndex,toIndex,-fromIndex); else   mergeSort(aux,a,fromIndex,toIndex,-fromIndex,c);}  }
class C{  public int length(){  return _count;}  }
class C{  private JPanel createMainPanel(){  JPanel panel=new JPanel();  panel.setLayout(new GridBagLayout());  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridheight=1;  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy=0;  c.weightx=0.33f;  c.weighty=0;  panel.add(new JLabel("Pixel matrix"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  PixelMatrix pixelMatrix=visionWorld.getModel().getPixelMatrix();  panel.add(new JLabel(pixelMatrix.getWidth() + "x" + pixelMatrix.getHeight()),c);  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  panel.add(Box.createVerticalStrut(6),c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridy++;  c.weightx=0.33f;  panel.add(new JLabel("Sensor matrix"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  panel.add(sensorMatrices,c);  c.gridwidth=GridBagConstraints.REMAINDER;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  sensorMatrixEditorPlaceholder.add("Center",sensorMatrixEditor.getEditorComponent());  panel.add(sensorMatrixEditorPlaceholder,c);  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  panel.add(Box.createVerticalStrut(6),c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridy++;  c.weightx=0.33f;  panel.add(new JLabel("Default filter"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  panel.add(filters,c);  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  panel.add(Box.createVerticalStrut(6),c);  c.insets=FIELD_INSETS;  c.gridy++;  filterEditorPlaceholder.add("Center",filterEditor.getEditorComponent());  panel.add(filterEditorPlaceholder,c);  c.anchor=GridBagConstraints.NORTHWEST;  c.fill=GridBagConstraints.BOTH;  c.gridheight=1;  c.insets=EMPTY_INSETS;  c.gridy++;  c.weighty=1.0f;  c.weightx=1.0f;  panel.add(Box.createVerticalStrut(6),c);  return panel;}  }
class C{  public Links(Map<String,Link> linkMap){  this.links=new HashMap<>(linkMap);}  }
class C{  public static MediaType parse(String input){  checkNotNull(input);  Tokenizer tokenizer=new Tokenizer(input);  try {    String type=tokenizer.consumeToken(TOKEN_MATCHER);    tokenizer.consumeCharacter('/');    String subtype=tokenizer.consumeToken(TOKEN_MATCHER);    ImmutableListMultimap.Builder<String,String> parameters=ImmutableListMultimap.builder();    while (tokenizer.hasMore()) {      tokenizer.consumeCharacter(';');      tokenizer.consumeTokenIfPresent(LINEAR_WHITE_SPACE);      String attribute=tokenizer.consumeToken(TOKEN_MATCHER);      tokenizer.consumeCharacter('=');      final String value;      if ('"' == tokenizer.previewChar()) {        tokenizer.consumeCharacter('"');        StringBuilder valueBuilder=new StringBuilder();        while ('"' != tokenizer.previewChar()) {          if ('\\' == tokenizer.previewChar()) {            tokenizer.consumeCharacter('\\');            valueBuilder.append(tokenizer.consumeCharacter(ascii()));          } else {            valueBuilder.append(tokenizer.consumeToken(QUOTED_TEXT_MATCHER));          }        }        value=valueBuilder.toString();        tokenizer.consumeCharacter('"');      } else {        value=tokenizer.consumeToken(TOKEN_MATCHER);      }      parameters.put(attribute,value);    }    return create(type,subtype,parameters.build());  } catch (  IllegalStateException e) {    throw new IllegalArgumentException("Could not parse '" + input + "'",e);  }}  }
class C{  public void printCDATASection(char[] data) throws IOException {  printString("<![CDATA[");  printCharacters(data);  printString("]]>");}  }
class C{  public static void main(String[] args){  if (args.length < 1) {    System.out.println("No query string as argument found.");    System.out.println("Call the main method with one argument, the query string,");    System.out.println("while YaCy is running on localhost.");  } else {    for (    String query : args) {      try {        long t=System.currentTimeMillis();        YaCySearchClient search=new YaCySearchClient("localhost",8090,query);        System.out.println("Search result for '" + query + "':");        System.out.print(search.next().toString());        System.out.println("Search Time: " + (System.currentTimeMillis() - t) + " milliseconds\n");      } catch (      final IOException e) {        e.printStackTrace();      }    }  }}  }
class C{  @Override public String fillSlots(Assignment fillers){  if (slots.isEmpty()) {    return rawString;  }  String filled=rawString;  for (  String slot : slots.keySet()) {    Value v=fillers.getValue(slot);    if (v != ValueFactory.none()) {      String strval=v.toString();      filled=filled.replace("{" + slot + "}",strval);    }  }  return filled;}  }
class C{  public JFrmConfig(AppProperties props){  initComponents();  try {    this.setIconImage(ImageIO.read(JRootFrame.class.getResourceAsStream("/uk/chromis/fixedimages/smllogo.png")));  } catch (  IOException e) {  }  setTitle(AppLocal.APP_NAME + " - " + AppLocal.APP_VERSION+ " - "+ AppLocal.getIntString("Menu.Configuration"));  setPreferredSize(new Dimension(900,750));  addWindowListener(new MyFrameListener());  config=new JPanelConfiguration();  getContentPane().add(config,BorderLayout.CENTER);  try {    config.activate();  } catch (  BasicException e) {  }}  }
class C{  public void turnRight(){switch (direction) {case NORTH:    direction=Direction.EAST;  break;case SOUTH:direction=Direction.WEST;break;case EAST:direction=Direction.SOUTH;break;case WEST:direction=Direction.NORTH;break;default :throw new IllegalStateException();}remainingMoves--;}  }
class C{  public FastValueGridPortrayal2D(boolean immutableField){  super();  setImmutableField(immutableField);}  }
class C{  public TreeMaker at(DiagnosticPosition pos){  this.pos=(pos == null ? Position.NOPOS : pos.getStartPosition());  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.LOOK_AHEAD__NOT:    setNot(NOT_EDEFAULT);  return;case RegularExpressionPackage.LOOK_AHEAD__PATTERN:setPattern((Pattern)null);return;}super.eUnset(featureID);}  }
class C{  public boolean isKeywordTopicOnly(){  String kt=getKeywordTopic();  String dn=getDisplayName();  return kt != null && kt.length() > 0 && (dn == null || dn.length() > 0) && getAS().isEmpty() && getXS().isEmpty() && getExactTopics().isEmpty();}  }
class C{  public void paintPlot(Graphics2D g2,double xScale,double yScale,double xOffset,double yOffset){  if (gradients == null || intercepts == null) {    return;  }  super.paintPlot(g2,xScale,yScale,xOffset,yOffset);  if (!isCalibrated) {    x1=xAxis.getMinAxis();    x2=xAxis.getMaxAxis();    lineCount=gradients.getCount();    y1=new double[lineCount];    y2=new double[lineCount];    for (int i=0; i < lineCount; i++) {      y1[i]=((Double)gradients.get(i) * x1) + (Double)intercepts.get(i);      y2[i]=((Double)gradients.get(i) * x2) + (Double)intercepts.get(i);    }    isCalibrated=true;  }  Paint paint=new Color((float)0.1,(float)0.1,(float)0.1,(float)(50.0 / lineCount));  g2.setPaint(paint);  g2.setStroke(lineStroke);  for (int i=0; i < lineCount; i++) {    drawLine(g2,x1,y1[i],x2,y2[i]);  }}  }
class C{  ValueForKeyIterator(@Nullable Object key){  this.key=key;  KeyList<K,V> keyList=keyToKeyList.get(key);  next=(keyList == null) ? null : keyList.head;}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes,boolean ignoreLeadingWhiteSpace,boolean ignoreQuotations){  this(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace,ignoreQuotations,DEFAULT_NULL_FIELD_INDICATOR);}  }
class C{  public boolean hasLatitude(){  return mHasLatitude;}  }
class C{  @Override @CanIgnoreReturnValue public boolean add(E e){  checkNotNull(e);  if (maxSize == 0) {    return true;  }  if (size() == maxSize) {    delegate.remove();  }  delegate.add(e);  return true;}  }
class C{  static Object unmaskNull(Object key){  return (key == NULL_KEY ? null : key);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.DECLARATION__TYPE_SPECIFIER:    setTypeSpecifier((TypeSpecifier)null);  return;case TypesPackage.DECLARATION__NAME:setName(NAME_EDEFAULT);return;case TypesPackage.DECLARATION__ANNOTATIONS:getAnnotations().clear();return;}super.eUnset(featureID);}  }
class C{  protected boolean verifySignature(HttpServletRequest req){  return verifySignature(req,SignatureKeyType.INTERNAL_API);}  }
class C{  protected void onMovePointerTo(String projectName){}  }
class C{  public void moveTo(final ManagedWindow window,final int x,final int y){  final WindowConfiguration config=getConfig(window);  config.x=x;  config.y=y;}  }
class C{  protected boolean hasUncompressedStrip(){  return mStripBytes.size() != 0;}  }
class C{  public boolean interiorContains(S2Point p){  return isFull() || S2Point.sub(axis,p).norm2() < 2 * height;}  }
class C{  public static boolean containsAnyUuid(ParcelUuid[] uuidA,ParcelUuid[] uuidB){  if (uuidA == null && uuidB == null)   return true;  if (uuidA == null) {    return uuidB.length == 0 ? true : false;  }  if (uuidB == null) {    return uuidA.length == 0 ? true : false;  }  HashSet<ParcelUuid> uuidSet=new HashSet<ParcelUuid>(Arrays.asList(uuidA));  for (  ParcelUuid uuid : uuidB) {    if (uuidSet.contains(uuid))     return true;  }  return false;}  }
class C{  private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){  boolean bothLinksHaveSameLinkStats=true;  if (!linkA.getAllowedModes().equals(linkB.getAllowedModes())) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getFreespeed() != linkB.getFreespeed()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getCapacity() != linkB.getCapacity()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getNumberOfLanes() != linkB.getNumberOfLanes()) {    bothLinksHaveSameLinkStats=false;  }  return bothLinksHaveSameLinkStats;}  }
class C{  public void cancel(){  if (pressedPointer == -1)   return;  cancelled=true;  pressed=false;}  }
class C{  public void checkForCompleteDeployment(){  setDeploymentComplete(lastDeploymentRound < getRoundCount());}  }
class C{  public static MatrixBlock convertToMatrixBlock(double[] data,boolean columnVector) throws DMLRuntimeException {  int rows=columnVector ? data.length : 1;  int cols=columnVector ? 1 : data.length;  MatrixBlock mb=new MatrixBlock(rows,cols,false);  try {    mb.init(data,rows,cols);  } catch (  Exception e) {  }  mb.examSparsity();  return mb;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer();  if (parent != null) {    sb.append(parent.toString());    sb.append(" | ");  }  if (type.equals(Type.PARAMETER)) {    sb.append("[");  }  sb.append(key);  if (type.equals(Type.PARAMETER)) {    sb.append("]");  }  return sb.toString();}  }
class C{  public void stop(){}  }
class C{  public ActivatableRef(ActivationID id,RemoteRef ref){  this.id=id;  this.ref=ref;}  }
class C{  @Override public String toString(){  StringBuffer buf=new StringBuffer();  String indent="    ";  buf.append(indent + "Version: " + this.getVersion()+ "\n");  buf.append(indent + "NumMaps: " + this.getNumberSubtables()+ "\n");  for (Iterator i=subtables.keySet().iterator(); i.hasNext(); ) {    CmapSubtable key=(CmapSubtable)i.next();    buf.append(indent + "Map: platformID: " + key.platformID+ " PlatformSpecificID: "+ key.platformSpecificID+ "\n");    CMap map=(CMap)subtables.get(key);    buf.append(map.toString());  }  return buf.toString();}  }
class C{  public void run(){  PythonInterpreter p=new PythonInterpreter();  for (  String name : this.locals.keySet()) {    p.set(name,this.locals.get(name));  }  URL jarUrl=JythonServer.class.getProtectionDomain().getCodeSource().getLocation();  String jarPath=jarUrl.getPath();  if (jarUrl.getProtocol().equals("file")) {    jarPath=jarPath + "../../src/main/python/";  }  p.exec("import sys");  p.exec("sys.path.append('" + jarPath + "')");  p.exec("from debugserver import run_server");  if (this.host == null) {    p.exec("run_server(port=" + this.port + ", locals=locals())");  } else {    p.exec("run_server(port=" + this.port + ", host='"+ this.host+ "', locals=locals())");  }}  }
class C{  private void checkEntriesInMemory(Region r,int start,int end,Object invalid,boolean inMemory){  LocalRegion region=(LocalRegion)r;  for (int i=start; i < end; i++) {    Object inMemoryValue=region.getValueInVM(i);    if (inMemory) {      if (inMemoryValue instanceof VMCachedDeserializable) {        inMemoryValue=((VMCachedDeserializable)inMemoryValue).getDeserializedForReading();      }      assertEquals("Failed on entry " + i,invalid,inMemoryValue);    } else {      assertEquals("Failed on entry " + i,null,inMemoryValue);    }  }}  }
class C{  public static void persistUpdatedPackingPlan(String topologyName,PackingPlan updatedPackingPlan,SchedulerStateManagerAdaptor stateManager){  LOG.log(Level.INFO,"Updating scheduled-resource in packing plan: {0}",topologyName);  PackingPlanProtoSerializer serializer=new PackingPlanProtoSerializer();  if (!stateManager.updatePackingPlan(serializer.toProto(updatedPackingPlan),topologyName)) {    throw new RuntimeException(String.format("Failed to update packing plan for topology %s",topologyName));  }}  }
class C{  public AuthenticatorException(List<String> messages,Throwable nested){  super(messages,nested);}  }
class C{  public boolean checkRootBySuperUserApk(){  File suApk=new File(SU_APK);  if (suApk != null && suApk.exists()) {    return true;  }  return false;}  }
class C{  public void push(final V value) throws IndexOutOfBoundsException {  if (top + locals >= values.length) {    throw new IndexOutOfBoundsException("Insufficient maximum stack size.");  }  values[top++ + locals]=value;}  }
class C{  @NonNull public static Animator fadeIn(float duration,@Nullable Interpolator interpolator){  return alpha(1,duration,interpolator);}  }
class C{  public JpegSegmentReader(byte[] fileContents) throws JpegProcessingException {  _file=null;  _data=fileContents;  _stream=null;  readSegments();}  }
class C{  public static AnnotatedType buildAnnotatedSuperclass(byte[] rawAnnotations,ConstantPool cp,Class<?> decl){  Type supertype=decl.getGenericSuperclass();  if (supertype == null)   return AnnotatedTypeFactory.EMPTY_ANNOTATED_TYPE;  return buildAnnotatedType(rawAnnotations,cp,decl,decl,supertype,TypeAnnotationTarget.CLASS_EXTENDS);}  }
class C{  String readStartupCommandFile(String dir,String fname,String canonPath){  File dotInitFile=new File(dir,fname);  if (!dotInitFile.exists()) {    return null;  }  String myCanonFile;  try {    myCanonFile=dotInitFile.getCanonicalPath();  } catch (  IOException ee) {    MessageOutput.println("Could not open:",dotInitFile.getPath());    return null;  }  if (canonPath == null || !canonPath.equals(myCanonFile)) {    if (!readCommandFile(dotInitFile)) {      MessageOutput.println("Could not open:",dotInitFile.getPath());    }  }  return myCanonFile;}  }
class C{  public ThreadedListenerManager(){  managerNumber=MANAGER_COUNT.getAndIncrement();  BasicThreadFactory factory=new BasicThreadFactory.Builder().namingPattern("listenerPool" + managerNumber + "-thread%d").daemon(true).build();  ThreadPoolExecutor defaultPool=(ThreadPoolExecutor)Executors.newCachedThreadPool(factory);  defaultPool.allowCoreThreadTimeOut(true);  this.pool=defaultPool;}  }
class C{  @SuppressWarnings("unchecked") @Override public JMenu createViewMenu(final View view){  Object object=view.getComponent().getClientProperty("toolBarActions");  LinkedList<Action> viewActions=(LinkedList<Action>)object;  JMenu m, m2;  JMenuItem mi;  JCheckBoxMenuItem cbmi;  m=new JMenu();  labels.configureMenu(m,"view");  if (viewActions != null && viewActions.size() > 0) {    m2=(viewActions.size() == 1) ? m : new JMenu(labels.getString("toolBars"));    for (    Action a : viewActions) {      cbmi=new JCheckBoxMenuItem(a);      ActionUtil.configureJCheckBoxMenuItem(cbmi,a);      m2.add(cbmi);    }    if (m2 != m) {      m.add(m2);    }  }  MenuBuilder mb=model.getMenuBuilder();  mb.addOtherViewItems(m,this,view);  return (m.getItemCount() > 0) ? m : null;}  }
class C{  public void validateDeductionAmount(final BudgetReAppropriation appropriation){  BigDecimal multiplicationFactor;  if (appropriation.getBudgetDetail().getPlanningPercent() != null) {    multiplicationFactor=appropriation.getBudgetDetail().getPlanningPercent().divide(new BigDecimal(String.valueOf(100)));    if (LOGGER.isDebugEnabled())     LOGGER.debug("Calculating multiplicationFactor from PlanningPercent : " + multiplicationFactor);  } else {    multiplicationFactor=new BigDecimal(Double.parseDouble(getAppConfigFor("EGF","planning_budget_multiplication_factor")));    if (LOGGER.isDebugEnabled())     LOGGER.debug("MultiplicationFactor from AppConfig(planning_budget_multiplication_factor) : " + multiplicationFactor);  }  final BigDecimal deductionAmount=appropriation.getOriginalDeductionAmount();  if (deductionAmount != null && BigDecimal.ZERO.compareTo(deductionAmount) == -1)   if (deductionAmount.compareTo(appropriation.getBudgetDetail().getBudgetAvailable().divide(multiplicationFactor)) == 1 || !canDeduct(appropriation))   throw new ValidationException(Arrays.asList(new ValidationError("budget.deduction.greater.than.available","budget.deduction.greater.than.available")));}  }
class C{  @EnsuresQualifier(expression="f1",qualifier=Odd.class) void oddF1(){  f1=null;}  }
class C{  private void deleteImageToImageDatastoreMappings(List<String> documentLinks){  if (documentLinks == null || documentLinks.size() == 0) {    TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FINISHED,0,null));    return;  }  OperationJoin.create(documentLinks.stream().map(null)).setCompletion(null).sendWith(this,DATASTORE_MAPPING_DELETE_BATCH_SIZE);}  }
class C{  void updateContent(){  if (this.columns == null) {    return;  }  for (int i=0; i < this.columns.size(); i++) {    final Table table=this.columns.get(i);    final int index=table.getSelectionIndex();    table.removeAll();    if (table.getData() == null) {      continue;    }    for (    final ColumnItem c : ((ColumnItem)table.getData()).getItems()) {      final TableItem item=new TableItem(table,SWT.NONE);      item.setData(c);      if (c.getText() != null) {        item.setText(c.getText());      }      if (c.getImage() != null) {        item.setImage(c.getImage());      }    }    table.setSelection(index);  }}  }
class C{  private static boolean isMimeType(final MimePart part,final String mimeType) throws MessagingException {  try {    final ContentType ct=new ContentType(part.getDataHandler().getContentType());    return ct.match(mimeType);  } catch (  final ParseException ex) {    return part.getContentType().equalsIgnoreCase(mimeType);  }}  }
class C{  public Interpolator(int rate,int designFactor,int blockSize){  this.rate=rate;  int half=rate * designFactor;  int N=2 * half + 1;  double[] kernel=(new HammingWindow(N)).getArray();  for (int i=1; i <= half; i++) {    kernel[half + i]*=(double)(Math.sin(Math.PI * i / rate) / (Math.PI * i / rate));    kernel[half - i]=kernel[half + i];  }  overlapAdd=new OverlapAdd(kernel,blockSize * rate);  buffer=new double[blockSize * rate];}  }
class C{  public PcMaxLocalRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);  this.sourceGraph=dataWrapper.getSourceGraph();}  }
class C{  public RequestTargetParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_REQUEST_TARGET);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_INVARIANT_2__CONSTRAINT_1:    getConstraint_1().clear();  getConstraint_1().addAll((Collection<? extends Constraint_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void destroy(){  clear();  this.client.operate(null,key,Operation.put(Bin.asNull(binName)));}  }
class C{  @Override public double distance(final Envelope env){  if (intersects(env)) {    return 0;  }  double dx=0.0;  if (getMaxX() < env.getMinX()) {    dx=env.getMinX() - getMaxX();  } else   if (getMinX() > env.getMaxX()) {    dx=getMinX() - env.getMaxX();  }  double dy=0.0;  if (getMaxY() < env.getMinY()) {    dy=env.getMinY() - getMaxY();  } else   if (getMinY() > env.getMaxY()) {    dy=getMinY() - env.getMaxY();  }  double dz=0.0;  final double otherMinZ=getMinZOf(env);  final double otherMaxZ=getMaxZOf(env);  if (maxz < otherMinZ) {    dz=otherMinZ - maxz;  } else   if (minz > otherMaxZ) {    dz=minz - otherMaxZ;  }  if (dx == 0.0 && dz == 0.0) {    return dy;  }  if (dy == 0.0 && dz == 0.0) {    return dx;  }  if (dx == 0.0 && dy == 0.0) {    return dz;  }  return FastMath.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  public static int pickFromDistribution(final float[] probabilities,final float prob){  return pickFromDistribution(probabilities,prob,CHECKBOUNDARY);}  }
class C{  public static long findRevision(final List<String> output,final Pattern pattern){  long revision=-1;  for (  final String line : output) {    final Matcher matcher=pattern.matcher(line);    if (matcher.find()) {      revision=Long.parseLong(matcher.group(1));      break;    }  }  return revision;}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  public boolean isRTL(char c){  return impl.isRTL(c);}  }
class C{  public Time add(Time t2){  Time sum=new Time();  sum.hour=this.hour + t2.hour;  sum.minute=this.minute + t2.minute;  sum.second=this.second + t2.second;  if (sum.second >= 60.0) {    sum.second-=60.0;    sum.minute+=1;  }  if (sum.minute >= 60) {    sum.minute-=60;    sum.hour+=1;  }  return sum;}  }
class C{  void validate(){  if (keyField.isEmpty()) {    throw new IllegalArgumentException("The 'keyField' property must be set.");  } else   if (nameField.isEmpty()) {    throw new IllegalArgumentException("The 'nameField' property must be set.");  } else   if (valueField.isEmpty()) {    throw new IllegalArgumentException("The 'valueField' property must be set.");  } else   if (outputFields.isEmpty()) {    throw new IllegalArgumentException("The 'outputFields' property must be set.");  }}  }
class C{  public boolean hasStructuralChanges(byte[] newBytes,boolean orderRequired,boolean excludesSynthetic){  try {    ClassFileReader newClassFile=new ClassFileReader(newBytes,this.classFileName);    if (getModifiers() != newClassFile.getModifiers())     return true;    long OnlyStructuralTagBits=TagBits.AnnotationTargetMASK | TagBits.AnnotationDeprecated | TagBits.AnnotationRetentionMASK| TagBits.HierarchyHasProblems;    if ((getTagBits() & OnlyStructuralTagBits) != (newClassFile.getTagBits() & OnlyStructuralTagBits))     return true;    if (hasStructuralAnnotationChanges(getAnnotations(),newClassFile.getAnnotations()))     return true;    if (!CharOperation.equals(getGenericSignature(),newClassFile.getGenericSignature()))     return true;    if (!CharOperation.equals(getSuperclassName(),newClassFile.getSuperclassName()))     return true;    char[][] newInterfacesNames=newClassFile.getInterfaceNames();    if (this.interfaceNames != newInterfacesNames) {      int newInterfacesLength=newInterfacesNames == null ? 0 : newInterfacesNames.length;      if (newInterfacesLength != this.interfacesCount)       return true;      for (int i=0, max=this.interfacesCount; i < max; i++)       if (!CharOperation.equals(this.interfaceNames[i],newInterfacesNames[i]))       return true;    }    IBinaryNestedType[] currentMemberTypes=getMemberTypes();    IBinaryNestedType[] otherMemberTypes=newClassFile.getMemberTypes();    if (currentMemberTypes != otherMemberTypes) {      int currentMemberTypeLength=currentMemberTypes == null ? 0 : currentMemberTypes.length;      int otherMemberTypeLength=otherMemberTypes == null ? 0 : otherMemberTypes.length;      if (currentMemberTypeLength != otherMemberTypeLength)       return true;      for (int i=0; i < currentMemberTypeLength; i++)       if (!CharOperation.equals(currentMemberTypes[i].getName(),otherMemberTypes[i].getName()) || currentMemberTypes[i].getModifiers() != otherMemberTypes[i].getModifiers())       return true;    }    FieldInfo[] otherFieldInfos=(FieldInfo[])newClassFile.getFields();    int otherFieldInfosLength=otherFieldInfos == null ? 0 : otherFieldInfos.length;    boolean compareFields=true;    if (this.fieldsCount == otherFieldInfosLength) {      int i=0;      for (; i < this.fieldsCount; i++)       if (hasStructuralFieldChanges(this.fields[i],otherFieldInfos[i]))       break;      if ((compareFields=i != this.fieldsCount) && !orderRequired && !excludesSynthetic)       return true;    }    if (compareFields) {      if (this.fieldsCount != otherFieldInfosLength && !excludesSynthetic)       return true;      if (orderRequired) {        if (this.fieldsCount != 0)         Arrays.sort(this.fields);        if (otherFieldInfosLength != 0)         Arrays.sort(otherFieldInfos);      }      if (excludesSynthetic) {        if (hasNonSyntheticFieldChanges(this.fields,otherFieldInfos))         return true;      } else {        for (int i=0; i < this.fieldsCount; i++)         if (hasStructuralFieldChanges(this.fields[i],otherFieldInfos[i]))         return true;      }    }    MethodInfo[] otherMethodInfos=(MethodInfo[])newClassFile.getMethods();    int otherMethodInfosLength=otherMethodInfos == null ? 0 : otherMethodInfos.length;    boolean compareMethods=true;    if (this.methodsCount == otherMethodInfosLength) {      int i=0;      for (; i < this.methodsCount; i++)       if (hasStructuralMethodChanges(this.methods[i],otherMethodInfos[i]))       break;      if ((compareMethods=i != this.methodsCount) && !orderRequired && !excludesSynthetic)       return true;    }    if (compareMethods) {      if (this.methodsCount != otherMethodInfosLength && !excludesSynthetic)       return true;      if (orderRequired) {        if (this.methodsCount != 0)         Arrays.sort(this.methods);        if (otherMethodInfosLength != 0)         Arrays.sort(otherMethodInfos);      }      if (excludesSynthetic) {        if (hasNonSyntheticMethodChanges(this.methods,otherMethodInfos))         return true;      } else {        for (int i=0; i < this.methodsCount; i++)         if (hasStructuralMethodChanges(this.methods[i],otherMethodInfos[i]))         return true;      }    }    char[][][] missingTypes=getMissingTypeNames();    char[][][] newMissingTypes=newClassFile.getMissingTypeNames();    if (missingTypes != null) {      if (newMissingTypes == null) {        return true;      }      int length=missingTypes.length;      if (length != newMissingTypes.length) {        return true;      }      for (int i=0; i < length; i++) {        if (!CharOperation.equals(missingTypes[i],newMissingTypes[i])) {          return true;        }      }    } else     if (newMissingTypes != null) {      return true;    }    return false;  } catch (  ClassFormatException e) {    return true;  }}  }
class C{  public void fireSelectedComponentChanged(){  final ComponentSelectionListener[] listeners=myListenerList.getListeners(ComponentSelectionListener.class);  for (  ComponentSelectionListener listener : listeners) {    listener.selectedComponentChanged(this);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Iterator<M> sequence(){  return new Sequence();}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  if (unit instanceof BattleArmor) {    result=true;  }  if (currentSpace < 1) {    result=false;  }  if (doors < loadedThisTurn) {    result=false;  }  return result;}  }
class C{  public T clicked(OnClickListener listener){  if (view != null) {    view.setOnClickListener(listener);  }  return self();}  }
class C{  private static void SetStaticCharField(JNIEnvironment env,int classJREF,int fieldID,char fieldValue){  if (traceJNI)   VM.sysWrite("JNI called: SetStaticCharField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setCharValueUnchecked(null,fieldValue);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public Builder(Role role){  super(role);  type=role.type;}  }
class C{  public void addMatching(final ConversationStates state,final String trigger,final ExpressionMatcher matcher,final ChatCondition condition,final ConversationStates nextState,final String reply,final ChatAction action){  engine.addMatching(state,trigger,matcher,condition,false,nextState,reply,action);}  }
class C{  public void putInteger(long v){  putInteger(v,IntegerTag);}  }
class C{  private int parseEncryptedDataKeyCount(final byte[] b,final int off) throws ParseException {  cipherKeyCount_=PrimitivesParser.parseUnsignedShort(b,off);  if (cipherKeyCount_ < 0) {    throw new BadCiphertextException("Invalid cipher key count in ciphertext");  }  return Short.SIZE / Byte.SIZE;}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mCurrentPos == POS_START)) {    if (DEBUG) {      CLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mCurrentPos + (int)deltaY;  if (to < POS_START) {    if (DEBUG) {      CLog.e(LOG_TAG,String.format("over top"));    }    to=POS_START;  }  mCurrentPos=to;  updatePos();  mLastPos=mCurrentPos;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.CHECK_REF__CHECK:    if (resolve)     return getCheck();  return basicGetCheck();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean removeMultiply(Object o){  int numObjs=this.numObjs;  Object[] objs=this.objs;  boolean flag=false;  for (int x=0; x < numObjs; x++)   if (o == null ? objs[x] == null : o == objs[x] || o.equals(objs[x])) {    flag=true;    remove(x);    x--;  }  return flag;}  }
class C{  protected void cleanUpNetwork(){  for (  Link l : this.redundantLinks) {    this.network.removeLink(l.getId());  }  log.info(this.redundantLinks.size() + " links outside the evacuation area have been removed.");  for (  Node n : this.redundantNodes) {    this.network.removeNode(n.getId());  }  log.info(this.redundantNodes.size() + " nodes outside the evacuation area have been removed.");  log.info("adding dummy links");  List<Link> dummies=new ArrayList<Link>();  int dCnt=0;  for (  Node n : this.network.getNodes().values()) {    if (!this.safeNodes.contains(n) && !this.redundantNodes.contains(n)) {      NetworkFactory fac=this.network.getFactory();      Link l=fac.createLink(Id.create("dummy" + dCnt++,Link.class),this.network.getNodes().get(this.safeNodeBId),n);      this.network.addLink(l);      dummies.add(l);    }  }  new NetworkCleaner().run(this.network);  log.info("removing dummy links");  for (  Link dummy : dummies) {    this.network.removeLink(dummy.getId());  }  this.redundantLinks.clear();  this.redundantNodes.clear();}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public void debug(String s,Object... params){  if (isEnabled(TraceSystem.DEBUG)) {    s=MessageFormat.format(s,params);    traceWriter.write(TraceSystem.DEBUG,s,null);  }}  }
class C{  public boolean isCommandKey(final String key){  return cmdKeys.contains(key);}  }
class C{  public MosaicLevy(final Deserializer deserializer){  this.type=MosaicTransferFeeType.fromValue(deserializer.readInt("type"));  this.recipient=Account.readFrom(deserializer,"recipient");  this.mosaicId=deserializer.readObject("mosaicId",null);  this.fee=Quantity.readFrom(deserializer,"fee");  this.validate();}  }
class C{  @Override public void writeValueDelete(Object value){  System.out.println("delete");  Object[] customer=(Object[])value;  m_oId=customer[0];  m_jTaxID.setText((String)customer[1]);  m_jSearchkey.setText((String)customer[2]);  m_jName.setText((String)customer[3]);  m_jNotes.setText((String)customer[4]);  m_jVisible.setSelected(((Boolean)customer[5]));  jcard.setText((String)customer[6]);  txtMaxdebt.setText(Formats.CURRENCY.formatValue(customer[7]));  txtCurdate.setText(Formats.DATE.formatValue(customer[8]));  txtCurdebt.setText(Formats.CURRENCY.formatValue(customer[9]));  txtFirstName.setText(Formats.STRING.formatValue(customer[10]));  txtLastName.setText(Formats.STRING.formatValue(customer[11]));  txtEmail.setText(Formats.STRING.formatValue(customer[12]));  txtPhone.setText(Formats.STRING.formatValue(customer[13]));  txtPhone2.setText(Formats.STRING.formatValue(customer[14]));  txtFax.setText(Formats.STRING.formatValue(customer[15]));  txtAddress.setText(Formats.STRING.formatValue(customer[16]));  txtAddress2.setText(Formats.STRING.formatValue(customer[17]));  txtPostal.setText(Formats.STRING.formatValue(customer[18]));  txtCity.setText(Formats.STRING.formatValue(customer[19]));  txtRegion.setText(Formats.STRING.formatValue(customer[20]));  txtCountry.setText(Formats.STRING.formatValue(customer[21]));  m_CategoryModel.setSelectedKey(customer[22]);  m_jImage.setImage((BufferedImage)customer[23]);  j_mDOB.setText(Formats.DATE.formatValue(customer[24]));  txtDiscount.setText(Formats.PERCENT.formatValue(customer[25]));  m_jTaxID.setEnabled(false);  m_jSearchkey.setEnabled(false);  m_jName.setEnabled(false);  m_jNotes.setEnabled(false);  txtMaxdebt.setEnabled(false);  txtCurdebt.setEnabled(false);  txtDiscount.setEnabled(false);  txtCurdate.setEnabled(false);  m_jVisible.setEnabled(false);  jcard.setEnabled(false);  txtFirstName.setEnabled(false);  txtLastName.setEnabled(false);  txtEmail.setEnabled(false);  txtPhone.setEnabled(false);  txtPhone2.setEnabled(false);  txtFax.setEnabled(false);  m_jImage.setEnabled(true);  j_mDOB.setEnabled(false);  txtAddress.setEnabled(false);  txtAddress2.setEnabled(false);  txtPostal.setEnabled(false);  txtCity.setEnabled(false);  txtRegion.setEnabled(false);  txtCountry.setEnabled(false);  m_jCategory.setEnabled(false);  jButton2.setEnabled(false);  jButton3.setEnabled(false);  transactionModel=new TransactionTableModel(getTransactionOfName((String)customer[3]));  jTable1.setModel(transactionModel);  jTable1.setEnabled(false);}  }
class C{  public static String millisToText(long millis){  return Strings.millisToString(millis,true);}  }
class C{  public Notification create(Integer notificationID,NotificationAttributes notificationAttributes){  Notification notification=new Notification(context,notificationID,notificationAttributes);  notification.create();  return notification;}  }
class C{  public static int allocateNewContainer(ArrayList<Container> containers,Resource capacity,int paddingPercentage){  containers.add(new Container(capacity,paddingPercentage));  return containers.size();}  }
class C{  public static void main(String[] args){  try {    if (args.length == 2) {      Struct.defaultPackageName=null;    } else     if (args.length == 3) {      Struct.defaultPackageName=args[2];    } else {      throw new IllegalArgumentException();    }    Struct[] structs=ReadFromFile(args[0]);    String[] structNames=new String[structs.length];    BufferedWriter fileWriter;    for (int i=0; i < structs.length; i++) {      structNames[i]=structs[i].getStructName();    }    for (int i=0; i < structs.length; i++) {      fileWriter=new BufferedWriter(new FileWriter(args[1] + structNames[i] + ".java"));      fileWriter.write(structs[i].toClass());      fileWriter.close();    }    System.out.println("Parsing Successful!");  } catch (  IllegalArgumentException e) {    if (args.length < 2) {      System.out.println("too few arguments");    } else     if (args.length > 2) {      System.out.println("too many arguments");    }  }catch (  FileNotFoundException e) {    System.out.println(args[0] + " not found!\nParsing Failed!\n");  }catch (  IOException e) {    e.printStackTrace();  }catch (  VerifierException e) {    System.out.println(e.getMessage());  }}  }
class C{  @Override public boolean startSensorialRotation(){  if (!mIsValidForSensorialRotation) {    if (this.activateGyroscope()) {      mHasFirstGyroscopePitch=false;      mGyroscopeLastTime=0;      mGyroscopeRotationX=mGyroscopeRotationY=0.0f;      mSensorialRotationType=PLSensorialRotationType.PLSensorialRotationTypeGyroscope;      mIsValidForSensorialRotation=true;    } else {      PLLog.debug("PLView::startSensorialRotation","Gyroscope sensor is not available on device!");      if (mSensorManager != null && mSensorManager.getSensorList(Sensor.TYPE_ACCELEROMETER).size() > 0 && mSensorManager.getSensorList(Sensor.TYPE_MAGNETIC_FIELD).size() > 0) {        mSensorialRotationThresholdTimestamp=0;        mSensorialRotationThresholdFlag=false;        mSensorialRotationAccelerometerData=new float[3];        mSensorialRotationRotationMatrix=new float[16];        mSensorialRotationOrientationData=new float[3];        mHasFirstAccelerometerPitch=mHasFirstMagneticHeading=false;        mFirstAccelerometerPitch=mLastAccelerometerPitch=mAccelerometerPitch=0.0f;        mFirstMagneticHeading=mLastMagneticHeading=mMagneticHeading=0.0f;        mSensorialRotationType=PLSensorialRotationType.PLSensorialRotationTypeAccelerometerAndMagnetometer;        mIsValidForSensorialRotation=true;        this.activateMagnetometer();      } else       PLLog.debug("PLView::startSensorialRotation","Accelerometer or/and magnetometer sensor/s is/are not available on device!");    }    return mIsValidForSensorialRotation;  }  return false;}  }
class C{  public AbstractElementName2(String[] segments,String separator){  this(StringUtil.collToString(segments,separator),separator,segments);}  }
class C{  public Matrix4x3f sub(Matrix4x3fc subtrahend){  return sub(subtrahend,this);}  }
class C{  @Override public String toString(){  JsonNodeFactory nodeFactory=JsonNodeFactory.instance;  ObjectNode object=nodeFactory.objectNode();  object.set(APPLICATION_BUILD_VERSION,nodeFactory.numberNode(appBuildVersion));  object.set(WWW_FOLDER_INSTALLED_FLAG,nodeFactory.booleanNode(wwwFolderInstalled));  object.set(CURRENT_RELEASE_VERSION_NAME,nodeFactory.textNode(currentReleaseVersionName));  object.set(PREVIOUS_RELEASE_VERSION_NAME,nodeFactory.textNode(previousReleaseVersionName));  object.set(READY_FOR_INSTALLATION_RELEASE_VERSION_NAME,nodeFactory.textNode(readyForInstallationReleaseVersionName));  return object.toString();}  }
class C{  public String decode(AbstractMessage msg,Boolean ext,int header){  String str=CbusOpCodes.decode(msg,ext,header);  return (str);}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  functionValueMap.add(this,de.qaware.chronix.solr.query.analysis.functions.math.Percentile.evaluate(timeSeries.getValues(),percentile));}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public String toFormattedString(){  return "Parameters for cudaMemcopy3D:\n    " + createString("\n    ");}  }
class C{  public void keyReturned(MPOSKey key){  if (p_posPanel.m_order != null && p_posPanel.m_order.isProcessed())   return;  p_posPanel.f_curLine.setM_Product_ID(key.getM_Product_ID());  p_posPanel.f_curLine.setPrice();  p_posPanel.f_curLine.setQty(key.getQty());  if (!p_posPanel.f_curLine.saveLine()) {    ADialog.error(0,this,"Could not save order line");  }  p_posPanel.updateInfo();  return;}  }
class C{  public void injectedScore(Text url,CrawlDatum datum) throws ScoringFilterException {  for (int i=0; i < this.filters.length; i++) {    this.filters[i].injectedScore(url,datum);  }}  }
class C{  public void info(){  DecimalFormat format=DisplayType.getNumberFormat(DisplayType.Amount);  BigDecimal total=new BigDecimal(0.0);  int rows=dialog.getMiniTable().getRowCount();  int count=0;  for (int i=0; i < rows; i++) {    if (((Boolean)dialog.getMiniTable().getValueAt(i,0)).booleanValue()) {      total=total.add((BigDecimal)dialog.getMiniTable().getValueAt(i,4));      count++;    }  }  dialog.setStatusLine(count,Msg.getMsg(Env.getCtx(),"Sum") + "  " + format.format(total));}  }
class C{  public static void loge(String s,Object... params){  if (PDKClient.isDebugMode())   Log.e(TAG,String.format(s,params));}  }
class C{  public Boolean isUseAutoDetect(){  return useAutoDetect;}  }
class C{  public MyGraph(List<V> vertices,List<Edge> edges){  super(vertices,edges);}  }
class C{  public void dump(){  System.out.println("Size: " + objects.length);  System.out.println("Elements: " + elements);  System.out.println("Free cells: " + freecells);  System.out.println();  for (int ix=0; ix < objects.length; ix++)   System.out.println("[" + ix + "]: "+ objects[ix]);}  }
class C{  private static boolean checkForExcessOpenNetworkAndSave(final WifiManager wifiMgr,final int numOpenNetworksKept){  final List<WifiConfiguration> configurations=wifiMgr.getConfiguredNetworks();  sortByPriority(configurations);  boolean modified=false;  int tempCount=0;  for (int i=configurations.size() - 1; i >= 0; i--) {    final WifiConfiguration config=configurations.get(i);    if (ConfigSec.isOpenNetwork(ConfigSec.getWifiConfigurationSecurity(config))) {      tempCount++;      if (tempCount >= numOpenNetworksKept) {        modified=true;        wifiMgr.removeNetwork(config.networkId);      }    }  }  if (modified) {    return wifiMgr.saveConfiguration();  }  return true;}  }
class C{  private int appendNextCharacterAndAdvanceLoop(String line,StringBuilder sb,int i){  sb.append(line.charAt(i + 1));  i++;  return i;}  }
class C{  public boolean isConfigurable(){  return configurable;}  }
class C{  public static MAttributeSetInstance create(Properties ctx,MProduct product,String trxName){  MAttributeSetInstance asi=new MAttributeSetInstance(ctx,0,trxName);  asi.setClientOrg(product.getAD_Client_ID(),0);  asi.setM_AttributeSet_ID(product.getM_AttributeSet_ID());  if (asi.getM_AttributeSet_ID() > 0) {    asi.getLot(true,product.get_ID());    asi.getSerNo(true);    asi.getGuaranteeDate(true);  }  asi.saveEx();  return asi;}  }
class C{  public AuthorizationInterceptor(final IAuthenticator authenticator,final ILogger logger){  mAuthenticator=authenticator;  mLogger=logger;}  }
class C{  public double norm1(){  double s=0;  for (int i=0; i < size(); i++) {    s+=Math.abs(V[i]);  }  return s;}  }
class C{  public HttpWaitStrategy forPath(String path){  this.path=path;  return this;}  }
class C{  @Override public void removeConnectionEventListener(final ConnectionEventListener l){  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("removeConnectionEventListener(" + l + ")");  }  eventListeners.remove(l);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void genOvfenvIsoImage(String ovfenvPropKVStr,String isoFilePath){  byte[] bOvfenvPropKVStr=ovfenvPropKVStr.getBytes();  String propFilePath="/tmp/ovf-env.properties";  File propFile=new File(propFilePath);  try {    FileUtils.writePlainFile(propFilePath,bOvfenvPropKVStr);  } catch (  Exception e1) {    propFile.delete();    log.error("Write to prop file failed with exception: {}",e1.getMessage());    throw new IllegalStateException("Failed to generate ovfenv prop file.");  }  try {    File isoFile=new File(isoFilePath);    String[] genISOImageCommand={GENISO_CMD,"--label","CDROM","-f",propFilePath,"-o",isoFilePath,"ovf-env.properties","4096"};    Exec.Result result=Exec.sudo(CMD_TIMEOUT,genISOImageCommand);    if (!result.exitedNormally() || result.getExitValue() != 0) {      log.error("Generating ISO image failed with exit value: {}, error: {}",result.getExitValue(),result.getStdError());      throw new IllegalStateException("Failed to generate ISO image.");    }  } catch (  Exception e) {    throw e;  } finally {    propFile.delete();  }}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  @Override public void onAdded(final StendhalRPZone zone){  super.onAdded(zone);  zone.notifyEntered(this,getX(),getY());}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  static void checkOpcode(final int opcode,final int type){  if (opcode < 0 || opcode > 199 || TYPE[opcode] != type) {    throw new IllegalArgumentException("Invalid opcode: " + opcode);  }}  }
class C{  void prevWeapon(){  if (ce() == null) {    return;  }  int weaponId=clientgui.mechD.wPan.selectPrevWeapon();  if (ce().getId() != clientgui.mechD.wPan.getSelectedEntityId()) {    clientgui.mechD.wPan.displayMech(ce());  }  if (weaponId == -1) {    setFireModeEnabled(false);  } else {    Mounted m=ce().getEquipment(weaponId);    setFireModeEnabled(m.isModeSwitchable());  }  updateTarget();}  }
class C{  private void load() throws IOException, RepositoryException {  tutorials=new ArrayList<>();  try (InputStream rawIn=getInputStream()){    NonClosingZipInputStream zip=new NonClosingZipInputStream(rawIn);    try {      ZipEntry entry;      String localeFileName=getPropertyFileName();      Properties defaultProps=new Properties();      Properties localProps=new Properties();      while ((entry=zip.getNextEntry()) != null) {        if (entry.getName().replaceFirst("/","").contains("/")) {          continue;        }        String entryName=entry.getName();        if (entry.isDirectory()) {          if (path != null) {            tutorials.add(new Tutorial(this,path,entryName));          } else {            tutorials.add(new Tutorial(this,entryName));          }        } else         if (DEFAULT_PROPERTY_FILE.equals(entryName)) {          defaultProps.load(zip);        } else         if (localeFileName.equals(entryName)) {          localProps.load(zip);        }      }      title=defaultProps.getProperty(KEY_GROUP_NAME,NO_TITLE);      description=defaultProps.getProperty(KEY_GROUP_DESCRIPTION,NO_DESCRIPTION);      if (!localProps.isEmpty()) {        title=localProps.getProperty(KEY_GROUP_NAME,title);        description=localProps.getProperty(KEY_GROUP_DESCRIPTION,description);      }      if (title.isEmpty()) {        title=NO_TITLE;      }      if (description.isEmpty()) {        description=NO_DESCRIPTION;      }      Collections.sort(tutorials,TUTORIAL_COMPARATOR);    }  finally {      zip.close();      zip.close2();    }  } }  }
class C{  public void reset(){  initialized=false;}  }
class C{  public int[] validBaudNumber(){  return new int[]{38400};}  }
class C{  public String repository(){  return this.repository;}  }
class C{  public JCheckBox(String text,boolean selected){  this(text,null,selected);}  }
class C{  public ExportDirectorImplService(final String pathToExportDirectory,final DataDescriptorResolver<ExportDescriptor> dataDescriptorResolver,final TaskExecutor executor,final NodeService nodeService,final AsyncContextFactory asyncContextFactory,final SystemService systemService,final FederationFacade federationFacade){  super(executor);  this.pathToExportDirectory=pathToExportDirectory;  this.nodeService=nodeService;  this.asyncContextFactory=asyncContextFactory;  this.systemService=systemService;  this.dataDescriptorResolver=dataDescriptorResolver;  this.federationFacade=federationFacade;}  }
class C{  public WritableRaster createCompatibleWritableRaster(int w,int h){  int[] bOffs={2,1,0};  return Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,w,h,w * 3,3,bOffs,null);}  }
class C{  public static void keyRelease(int keyCode){  if (verbose) {    log("keyRelease(" + keyCode + ")");  }  Display.getInstance().getCurrent().keyReleased(keyCode);  waitFor(10);}  }
class C{  public LabeledComponent(final String key,final Component comp,final int glue,final int alignment){  assert (alignment == LEFT || alignment == RIGHT || alignment == TOP_LEFT || alignment == TOP_CENTER || alignment == TOP_RIGHT || alignment == BOTTOM_LEFT || alignment == BOTTOM_CENTER || alignment == BOTTOM_RIGHT);  assert (glue == LEFT_GLUE || glue == RIGHT_GLUE || glue == SURROUND_GLUE || glue == NO_GLUE);  String text=I18n.tr(key);  JLabel label=new JLabel(text);  if (alignment == LEFT || alignment == RIGHT) {    if (glue == LEFT_GLUE || glue == SURROUND_GLUE) {      PANEL.add(Box.createHorizontalGlue());    }  }  if (alignment == TOP_LEFT || alignment == TOP_CENTER || alignment == TOP_RIGHT || alignment == BOTTOM_LEFT || alignment == BOTTOM_CENTER || alignment == BOTTOM_RIGHT) {    PANEL.setOrientation(BoxPanel.Y_AXIS);    if (glue == TOP_GLUE || glue == SURROUND_GLUE) {      PANEL.add(Box.createVerticalGlue());    }  }  if (alignment == LEFT) {    PANEL.add(label);    PANEL.add(Box.createRigidArea(new Dimension(6,0)));    PANEL.add(comp);  } else   if (alignment == RIGHT) {    PANEL.add(comp);    PANEL.add(Box.createRigidArea(new Dimension(6,0)));    PANEL.add(label);  } else   if (alignment == TOP_LEFT) {    PANEL.setOrientation(BoxPanel.Y_AXIS);    BoxPanel labelPanel=new BoxPanel(BoxPanel.X_AXIS);    labelPanel.add(label);    labelPanel.add(Box.createHorizontalGlue());    PANEL.add(labelPanel);    PANEL.add(Box.createRigidArea(new Dimension(0,6)));    PANEL.add(comp);  } else   if (alignment == TOP_CENTER) {    PANEL.setOrientation(BoxPanel.Y_AXIS);    BoxPanel labelPanel=new BoxPanel(BoxPanel.X_AXIS);    labelPanel.add(Box.createHorizontalGlue());    labelPanel.add(label);    labelPanel.add(Box.createHorizontalGlue());    PANEL.add(labelPanel);    PANEL.add(Box.createRigidArea(new Dimension(0,6)));    PANEL.add(comp);  } else   if (alignment == TOP_RIGHT) {    PANEL.setOrientation(BoxPanel.Y_AXIS);    BoxPanel labelPanel=new BoxPanel(BoxPanel.X_AXIS);    labelPanel.add(Box.createHorizontalGlue());    labelPanel.add(label);    PANEL.add(labelPanel);    PANEL.add(Box.createRigidArea(new Dimension(0,6)));    PANEL.add(comp);  } else   if (alignment == BOTTOM_LEFT) {    PANEL.setOrientation(BoxPanel.Y_AXIS);    PANEL.add(comp);    PANEL.add(Box.createRigidArea(new Dimension(0,6)));    BoxPanel labelPanel=new BoxPanel(BoxPanel.X_AXIS);    labelPanel.add(label);    labelPanel.add(Box.createHorizontalGlue());    PANEL.add(labelPanel);  } else   if (alignment == BOTTOM_CENTER) {    PANEL.setOrientation(BoxPanel.Y_AXIS);    PANEL.add(comp);    PANEL.add(Box.createRigidArea(new Dimension(0,6)));    BoxPanel labelPanel=new BoxPanel(BoxPanel.X_AXIS);    labelPanel.add(Box.createHorizontalGlue());    labelPanel.add(label);    labelPanel.add(Box.createHorizontalGlue());    PANEL.add(labelPanel);  } else   if (alignment == BOTTOM_RIGHT) {    PANEL.setOrientation(BoxPanel.Y_AXIS);    PANEL.add(comp);    PANEL.add(Box.createRigidArea(new Dimension(0,6)));    BoxPanel labelPanel=new BoxPanel(BoxPanel.X_AXIS);    labelPanel.add(Box.createHorizontalGlue());    labelPanel.add(label);    PANEL.add(labelPanel);  } else {    String msg="The specified alignment is invalid.";    throw new IllegalArgumentException(msg);  }  if (alignment == LEFT || alignment == RIGHT) {    if (glue == RIGHT_GLUE || glue == SURROUND_GLUE) {      PANEL.add(Box.createHorizontalGlue());    }  }  if (alignment == TOP_LEFT || alignment == TOP_CENTER || alignment == TOP_RIGHT || alignment == BOTTOM_LEFT || alignment == BOTTOM_CENTER || alignment == BOTTOM_RIGHT) {    PANEL.setOrientation(BoxPanel.Y_AXIS);    if (glue == BOTTOM_GLUE || glue == SURROUND_GLUE) {      PANEL.add(Box.createVerticalGlue());    }  }}  }
class C{  public boolean hasGmlPoint(){  return hasExtension(GmlPoint.class);}  }
class C{  private Dimension validateSize(final Dimension size){  if (size.width == 0 || size.height == 0) {    final FontMetrics fm=getFontMetrics(getFont());    size.width=fm.charWidth(WIDE_CHAR);    size.height=fm.getHeight();  }  return size;}  }
class C{  public Shapefile(InputStream shpStream,InputStream shxStream,InputStream dbfStream,InputStream prjStream,AVList params){  if (shpStream == null) {    String message=Logging.getMessage("nullValue.InputStreamIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    this.setValue(AVKey.DISPLAY_NAME,shpStream.toString());    this.initializeFromStreams(shpStream,shxStream,dbfStream,prjStream,params);  } catch (  Exception e) {    String message=Logging.getMessage("SHP.ExceptionAttemptingToReadShapefile",shpStream);    Logging.logger().log(Level.SEVERE,message,e);    throw new WWRuntimeException(message,e);  }}  }
class C{  static boolean is2_2(){  return IS_22;}  }
class C{  private void angularUnwatch(String name,String noteId){  AngularObjectRegistry registry=interpreterContext.getAngularObjectRegistry();  if (registry.get(name,noteId,null) != null) {    registry.get(name,noteId,null).clearAllWatchers();  }}  }
class C{  public WriteMultipleCoilsResponse(){  super();  setDataLength(4);}  }
class C{  @Override public void onClick(View v){  animationCardUp(card,toolbar,duration);}  }
class C{  public static String addParameterNameToEndOfUrl(@NonNull String url,@NonNull String parameterId){  return url + "/{" + parameterId+ "}";}  }
class C{  public void testFindUsersSunDirectoryManager() throws Exception {  LdapManager mgr=getLdapSunDirectoryServer();  List ret=null;  AndFilter filter=new AndFilter();  filter.and(new LikeFilter(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_GIVEN_NAME),"*a*"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setAddUserClasses(true);    ret=mgr.findUsers(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(11,ret.size());}  }
class C{  public BasicManagedEntity(HttpEntity entity,ManagedClientConnection conn,boolean reuse){  super(entity);  if (conn == null)   throw new IllegalArgumentException("Connection may not be null.");  this.managedConn=conn;  this.attemptReuse=reuse;}  }
class C{  protected Expression literal(int opPos){  opPos=getFirstChildPos(opPos);  return (XString)getTokenQueue().elementAt(getOp(opPos));}  }
class C{  public String toJSONString(){  return new Gson().toJson(this);}  }
class C{  protected void free(){synchronized (localCandidates) {    CandidateType[] candidateTypes=new CandidateType[]{CandidateType.RELAYED_CANDIDATE,CandidateType.PEER_REFLEXIVE_CANDIDATE,CandidateType.SERVER_REFLEXIVE_CANDIDATE};    for (    CandidateType candidateType : candidateTypes) {      Iterator<LocalCandidate> localCandidateIter=localCandidates.iterator();      while (localCandidateIter.hasNext()) {        LocalCandidate localCandidate=localCandidateIter.next();        if (candidateType.equals(localCandidate.getType())) {          free(localCandidate);          localCandidateIter.remove();        }      }    }    Iterator<LocalCandidate> localCandidateIter=localCandidates.iterator();    while (localCandidateIter.hasNext()) {      LocalCandidate localCandidate=localCandidateIter.next();      free(localCandidate);      localCandidateIter.remove();    }  }}  }
class C{  @Override protected boolean canAfford(final IntegerMap<Resource> costs,final PlayerID player){  final ResourceCollection bidCollection=new ResourceCollection(getData());  bidCollection.addResource(getData().getResourceList().getResource(Constants.PUS),m_bid);  return bidCollection.has(costs);}  }
class C{  public boolean isNoSuchInstanceValue(){  return (tag == SnmpDataTypeEnums.errNoSuchInstanceTag);}  }
class C{  private static int parseFullAtomFlags(int fullAtomInt){  return 0x00FFFFFF & fullAtomInt;}  }
class C{  protected void onRemoveChannelKey(String channel,String sourceNick,String sourceLogin,String sourceHostname,String key){}  }
class C{  private static long[] divRemNegativeLong(long n,long d){  assert n < 0 : "Non-negative numerator " + n;  assert d != 1 : "Unity denominator";  long q=(n >>> 1) / (d >>> 1);  long r=n - q * d;  while (r < 0) {    r+=d;    q--;  }  while (r >= d) {    r-=d;    q++;  }  return new long[]{r,q};}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public static int IAND(int a,int b){  return Math.min(a,b);}  }
class C{  final float nextFloat(){  return (nextInt() >>> 8) * INT_TO_FLOAT;}  }
class C{  public Builder retryOnException(Predicate<Throwable> predicate){  this.exceptionPredicate=predicate;  return this;}  }
class C{  public void dump(Printer pw,String prefix){  pw.println(prefix + "activity: " + activity);  pw.println(prefix + "cause: " + cause);  pw.println(prefix + "info: " + info);}  }
class C{  public long toEpochSecond(){  return transition.toEpochSecond(offsetBefore);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.angleGridlineStroke=SerialUtilities.readStroke(stream);  this.angleGridlinePaint=SerialUtilities.readPaint(stream);  this.radiusGridlineStroke=SerialUtilities.readStroke(stream);  this.radiusGridlinePaint=SerialUtilities.readPaint(stream);  this.angleLabelPaint=SerialUtilities.readPaint(stream);  int rangeAxisCount=this.axes.size();  for (int i=0; i < rangeAxisCount; i++) {    Axis axis=(Axis)this.axes.get(i);    if (axis != null) {      axis.setPlot(this);      axis.addChangeListener(this);    }  }  int datasetCount=this.datasets.size();  for (int i=0; i < datasetCount; i++) {    Dataset dataset=(Dataset)this.datasets.get(i);    if (dataset != null) {      dataset.addChangeListener(this);    }  }  int rendererCount=this.renderers.size();  for (int i=0; i < rendererCount; i++) {    PolarItemRenderer renderer=(PolarItemRenderer)this.renderers.get(i);    if (renderer != null) {      renderer.addChangeListener(this);    }  }}  }
class C{  private void ensureSorted(){  if (null == this.sortedNodes) {    this.sortedNodes=new ArrayList<>(this.nodesSigTbl.size());    for (    HGNode node : this.nodesSigTbl.values()) {      this.sortedNodes.add(node);    }    this.sortedNodes.sort(HGNode.inverseLogPComparator);    for (    SuperNode superNode : this.superNodesTbl.values()) {      superNode.nodes.clear();    }    for (    HGNode node : this.sortedNodes) {      SuperNode superNode=this.superNodesTbl.get(node.lhs);      checkNotNull(superNode,"Does not have super Item, have to exist");      superNode.nodes.add(node);    }    for (Iterator<Entry<Integer,SuperNode>> it=this.superNodesTbl.entrySet().iterator(); it.hasNext(); ) {      Entry<Integer,SuperNode> entry=it.next();      if (entry.getValue().nodes.isEmpty()) {        it.remove();      }    }  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return STORE_NAME;case 2:  return SCOPE;case 3:return PERSIST;default :return null;}}  }
class C{  public void onUpdateNotification(NotificationView view,View contentView,NotificationEntry entry,int layoutId){  if (DBG)   Log.v(TAG,"onUpdateNotification - " + entry.ID);  final Drawable icon=entry.iconDrawable;  final CharSequence title=entry.title;  final CharSequence text=entry.text;  final CharSequence when=entry.showWhen ? entry.whenFormatted : null;  ChildViewManager mgr=view.getChildViewManager();  mgr.setImageDrawable(ICON,icon,false);  mgr.setText(TITLE,title,false);  mgr.setText(TEXT,text,false);  mgr.setText(WHEN,when,false);}  }
class C{  public boolean isMandatory(){  Object oo=get_Value(COLUMNNAME_IsMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void stopMovement(){  final RPAction stopAction=new RPAction();  stopAction.put(TYPE,WALK);  stopAction.put(MODE,"stop");  ClientSingletonRepository.getClientFramework().send(stopAction);}  }
class C{  public ParseRole(String name,ParseACL acl){  this(name);  setACL(acl);}  }
class C{  public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  tupleExpr.visit(new TreeSanitizer());}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("LdapConnCfg[");  buffer.append("engine = ").append(m_engine);  buffer.append(", provider = ").append(m_provider);  buffer.append(", url = ").append(m_url);  buffer.append(", user = ").append(m_user);  buffer.append(", pwd = ").append(m_pwd);  buffer.append(", pool = ").append(m_pool);  buffer.append(", poolTimeOut = ").append(m_poolTO);  buffer.append("]");  return buffer.toString();}  }
class C{  public Trace(final com.google.security.zynamics.binnavi.debug.models.trace.TraceList trace){  this.trace=trace;  for (  final ITraceEvent event : this.trace) {    events.add(new TraceEvent(event));  }  this.trace.addListener(listener);}  }
class C{  public AlgVector(double[] array){  m_Elements=new double[array.length];  for (int i=0; i < array.length; i++) {    m_Elements[i]=array[i];  }}  }
class C{  protected static int makeMarkAndDotEqual(JTextArea textArea,boolean forward){  Caret c=textArea.getCaret();  int val=forward ? Math.min(c.getDot(),c.getMark()) : Math.max(c.getDot(),c.getMark());  c.setDot(val);  return val;}  }
class C{  protected final void sendMessageAtFrontOfQueue(int what,int arg1,int arg2){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageAtFrontOfQueue(obtainMessage(what,arg1,arg2));}  }
class C{  protected boolean isEmptyValue(Object rawValue){  return rawValue == null || StringUtils.isBlank(String.valueOf(rawValue));}  }
class C{  public final void hideToolButton(@NotNull IsWidget button){  if (button != null) {    toolbarHeader.setWidgetHidden(button.asWidget(),true);  }}  }
class C{  Authenticator(ProtocolVersion protocolVersion){  if (protocolVersion.v >= ProtocolVersion.TLS10.v) {    block=new byte[BLOCK_SIZE_TLS];    block[9]=protocolVersion.major;    block[10]=protocolVersion.minor;  } else {    block=new byte[BLOCK_SIZE_SSL];  }}  }
class C{  protected void insert(DBID id,double dt,int k){  if (nn.size() < k) {    DoubleDBIDPair entry=DBIDUtil.newPair(dt,id);    nn.add(entry);    nn_keys.add(id);    sum_nn+=dt;  } else {    DoubleDBIDPair head=nn.peek();    if (dt < head.doubleValue()) {      head=nn.poll();      sum_nn-=head.doubleValue();      nn_keys.remove(head);      DoubleDBIDPair entry=DBIDUtil.newPair(dt,id);      nn.add(entry);      nn_keys.add(id);      sum_nn+=dt;    }  }}  }
class C{  @SkipValidation @Action(value="/modifyProperty-printAck") public String printAck(){  final HttpServletRequest request=ServletActionContext.getRequest();  final String url=WebUtils.extractRequestDomainURL(request,false);  final String imagePath=url.concat(PropertyTaxConstants.IMAGE_CONTEXT_PATH).concat((String)request.getSession().getAttribute("citylogo"));  final String cityName=request.getSession().getAttribute("citymunicipalityname").toString();  final PropertyAckNoticeInfo ackBean=new PropertyAckNoticeInfo();  final Map<String,Object> reportParams=new HashMap<String,Object>();  ackBean.setOwnerName(basicProp.getFullOwnerName());  ackBean.setOwnerAddress(basicProp.getAddress().toString());  ackBean.setApplicationDate(new SimpleDateFormat("dd/MM/yyyy").format(basicProp.getCreatedDate()));  ackBean.setApplicationNo(propertyModel.getApplicationNo());  ackBean.setApprovedDate(new SimpleDateFormat("dd/MM/yyyy").format(propWF.getState().getCreatedDate()));  final Date noticeDueDate=DateUtils.add(propWF.getState().getCreatedDate(),Calendar.DAY_OF_MONTH,15);  ackBean.setNoticeDueDate(noticeDueDate);  ackBean.setCreationReason(modifyRsn);  reportParams.put("logoPath",imagePath);  reportParams.put("cityName",cityName);  reportParams.put("loggedInUsername",propertyTaxUtil.getLoggedInUser(getSession()).getName());  ReportRequest reportInput=null;  if (modifyRsn.equals(PROPERTY_MODIFY_REASON_GENERAL_REVISION_PETITION))   reportInput=new ReportRequest(GRP_ACK_TEMPLATE,ackBean,reportParams); else   reportInput=new ReportRequest(MODIFY_ACK_TEMPLATE,ackBean,reportParams);  reportInput.setReportFormat(FileFormat.PDF);  final ReportOutput reportOutput=reportService.createReport(reportInput);  reportId=reportViewerUtil.addReportToTempCache(reportOutput);  return PRINT_ACK;}  }
class C{  public <T extends DataObject>Joiner join(String joinToAlias,Class<T> clazz,String alias,String field){  JClass jc=new JClass(clazz,alias,jClasses.size());  jc.setJoinToAlias(joinToAlias);  jc.setField(field);  jClasses.add(jc);  lastJClass=jc;  aliasMap.put(alias,jc);  return this;}  }
class C{  XPathFactory createInstance(String className){  try {    if (debug)     debugPrintln("instantiating " + className);    Class clazz;    if (classLoader != null)     clazz=classLoader.loadClass(className); else     clazz=Class.forName(className);    if (debug)     debugPrintln("loaded it from " + which(clazz));    Object o=clazz.newInstance();    if (o instanceof XPathFactory)     return (XPathFactory)o;    if (debug)     debugPrintln(className + " is not assignable to " + SERVICE_CLASS.getName());  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    if (debug) {      debugPrintln("failed to instantiate " + className);      t.printStackTrace();    }  }  return null;}  }
class C{  public boolean remove(Object ok){  return rem((((Character)(ok))));}  }
class C{  private static Double[] double2DToDouble(double[][] dd){  Double[] d=new Double[dd.length * dd[0].length];  for (int n=0; n < dd[0].length; n++) {    for (int m=0; m < dd.length; m++) {      d[m + n * dd.length]=dd[m][n];    }  }  return d;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.BINARY_LOGICAL_EXPRESSION__LHS:    return basicSetLhs(null,msgs);case N4JSPackage.BINARY_LOGICAL_EXPRESSION__RHS:  return basicSetRhs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void finalize(){  try {    this.closeDDLWriter();  } catch (  ValidationException exception) {  }}  }
class C{  public long size(){  return length;}  }
class C{  public SalsaSubgraphInternalState(LeftIndexedBipartiteGraph leftIndexedBipartiteGraph,SalsaStats salsaStats,int expectedNodesToHit,int expectedNumLeftNodes){  super(salsaStats,expectedNodesToHit);  this.leftIndexedBipartiteGraph=leftIndexedBipartiteGraph;  this.subgraphLeftNodes=new long[expectedNumLeftNodes];  this.subgraphLeftNodeDegree=new int[expectedNumLeftNodes];  this.subgraphEdgesArray=new long[expectedNodesToHit];  this.subgraphEdgeTypesArray=new byte[expectedNodesToHit];  this.subgraphRightNodeDegreeReciprocal=new Long2DoubleOpenHashMap(expectedNodesToHit);}  }
class C{  private void stopIndeterminate(){  animation.cancel();  ViewHelper.setX(progressView,0);  runAnimation=false;}  }
class C{  public static void main(final String[] args){  final CFlags cli=new CFlags("CFlags",System.out,System.err);  cli.registerRequired(String.class,"ARGS","these are some extra required args");  cli.registerRequired(String.class,"BARGS","these are some extra required args");  final Flag intFlag=cli.registerRequired('i',"int",Integer.class,"my_int","This sets an int value.");  intFlag.setMaxCount(5);  intFlag.setMinCount(2);  cli.registerOptional('s',"switch","this is a toggle flag.");  cli.registerOptional('b',"boolean",Boolean.class,"true/false","this sets a boolean value.",Boolean.TRUE);  final Flag f=cli.registerOptional('f',"float",Float.class,null,"this sets a float value.",(float)20);  f.setParameterRange(new String[]{"0.2","0.4","0.6"});  cli.registerOptional("string",String.class,null,"this sets a string value. and for this one I'm going to have quite a long description. Possibly long enough to need wrapping.","myDefault");  cli.setFlags(args);  System.out.println("--switch: " + cli.getValue("switch"));  System.out.println("--boolean: " + cli.getValue("boolean"));  System.out.println("--int: " + cli.getValue("int"));  System.out.println("--float: " + cli.getValue("float"));  System.out.println("--string: " + cli.getValue("string"));  System.out.println(LS + "Multi-occurrence flag:");  System.out.println("--int: " + cli.getValues("int"));  System.out.println(LS + "Received values in order:");  for (  FlagValue fv : cli.getReceivedValues()) {    System.out.println(fv);  }}  }
class C{  public DebugOutputBitStream(final OutputBitStream obs,final PrintStream pw){  this.obs=obs;  this.pw=pw;  pw.print("[");}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (e.getValueIsAdjusting())   return;  String value=(String)infoList.getSelectedValue();  if (value == null)   return;  int pos=value.indexOf("==");  if (pos == -1) {    contextHeader.setText("");    contextDetail.setText(value);  } else {    contextHeader.setText(value.substring(0,pos).replace('|','\n'));    contextDetail.setText(value.substring(pos + 3));  }}  }
class C{  public JSONObject put(@NotNull String key,@Nullable Object value){  if (value != null) {    try {      testValidity(value);      super.put(key,value);    } catch (    JSONException e) {    }  } else {    remove(key);  }  return this;}  }
class C{  public final void testRenderingOfRebuiltConditionals() throws ParseException {  assertEquals(render(js(fromString("if (foo) { if (bar);} else baz"))),render(stripBlocks(js(fromString("if (foo) { if (bar) {} } else baz")))));  assertEquals(render(js(fromString("if (foo) { while (foo) if (bar) break; } else baz"))),render(stripBlocks(js(fromString("if (foo) { while (foo) if (bar) break; } else baz")))));}  }
class C{  public void alignItemsHorizontally(float padding){  float width=-padding;  for (  CCNode item : children_) {    width+=item.getContentSize().width * item.getScaleX() + padding;  }  float x=-width / 2.0f;  for (  CCNode item : children_) {    item.setPosition(CGPoint.make(x + item.getContentSize().width * item.getScaleX() / 2.0f,0));    x+=item.getContentSize().width * item.getScaleX() + padding;  }}  }
class C{  public void removeFolder(AcsAccessObject acs,int userId,ArchiveObject arch,int fdrId,String entidad) throws Exception {  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (acs == null)     FolderMdoFdr.removeFolder(dbConn,null,userId,arch.getArchiveToken(),fdrId,entidad); else     FolderMdoFdr.removeFolder(dbConn,acs.getAccessToken(),userId,arch.getArchiveToken(),fdrId,entidad);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }}  }
class C{  public static boolean isRPTargetReplicationGroup(String group){  if (group != null) {    String[] parts=StringUtils.split(group,'-');    if (parts.length > 1 && parts[parts.length - 1].equals("RPTARGET")) {      return true;    }  }  return false;}  }
class C{  public DoubleProperty oscillationsProperty(){  return oscillations;}  }
class C{  public void sendInBackground(SendCallback callback){  ParseTaskUtils.callbackOnMainThreadAsync(sendInBackground(),callback);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  ParentModelDao.createTable(db,ifNotExists);}  }
class C{  public static final void run(DBIDs ids,Processor... procs){  new SingleThreadedRunner(ids,procs).run();}  }
class C{  private boolean skipScope(){switch (fToken) {case Symbols.TokenRPAREN:    return skipScope(Symbols.TokenLPAREN,Symbols.TokenRPAREN);case Symbols.TokenRBRACKET:  return skipScope(Symbols.TokenLBRACKET,Symbols.TokenRBRACKET);case Symbols.TokenRBRACE:return skipScope(Symbols.TokenLBRACE,Symbols.TokenRBRACE);case Symbols.TokenGREATERTHAN:if (!fPrefs.prefHasGenerics) return false;int storedPosition=fPosition;int storedToken=fToken;nextToken();switch (fToken) {case Symbols.TokenIDENT:boolean isGenericStarter;try {isGenericStarter=!JavaHeuristicScanner.isGenericStarter(getTokenContent());} catch (BadLocationException e) {return false;}if (isGenericStarter) break;case Symbols.TokenQUESTIONMARK:case Symbols.TokenGREATERTHAN:if (skipScope(Symbols.TokenLESSTHAN,Symbols.TokenGREATERTHAN)) return true;}fPosition=storedPosition;fToken=storedToken;return false;default :Assert.isTrue(false);return false;}}  }
class C{  @Deprecated public static void enable(){  OddBus.getInstance().register(INSTANCE);}  }
class C{  public StringBufferInputStream(String s){  this.buffer=s;  count=s.length();}  }
class C{  protected SVGOMFilterPrimitiveStandardAttributes(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public T caseVariable(Variable object){  return null;}  }
class C{  public StorageCenterAPIException(String message,int statusCode){  this(message);  this.statusCode=statusCode;}  }
class C{  public void testBug13048() throws Exception {  Connection profileConn=null;  PrintStream oldErr=System.err;  try {    ByteArrayOutputStream bOut=new ByteArrayOutputStream();    System.setErr(new PrintStream(bOut));    Properties props=new Properties();    props.setProperty("profileSQL","true");    props.setProperty("maxQuerySizeToLog","2");    props.setProperty("logger","com.mysql.jdbc.log.StandardLogger");    profileConn=getConnectionWithProps(props);    StringBuilder queryBuf=new StringBuilder("SELECT '");    for (int i=0; i < 500; i++) {      queryBuf.append("a");    }    queryBuf.append("'");    this.rs=profileConn.createStatement().executeQuery(queryBuf.toString());    this.rs.close();    String logString=new String(bOut.toString("ISO8859-1"));    assertTrue(logString.indexOf("... (truncated)") != -1);    bOut=new ByteArrayOutputStream();    System.setErr(new PrintStream(bOut));    this.rs=profileConn.prepareStatement(queryBuf.toString()).executeQuery();    logString=new String(bOut.toString("ISO8859-1"));    assertTrue(logString.indexOf("... (truncated)") != -1);  }  finally {    System.setErr(oldErr);    if (profileConn != null) {      profileConn.close();    }    if (this.rs != null) {      ResultSet toClose=this.rs;      this.rs=null;      toClose.close();    }  }}  }
class C{  public static String generateDigest(String str){  if (str == null || str.isEmpty())   return "00000000";  try {    java.security.MessageDigest md=java.security.MessageDigest.getInstance("SHA1");    md.update(str.getBytes());    byte[] digest=md.digest();    StringBuilder sb=new StringBuilder();    for (    byte b : digest) {      sb.append(HEXES[(b & 0xF0) >> 4]).append(HEXES[(b & 0x0F)]);    }    return sb.toString();  } catch (  Exception ex) {  }  return "00000000";}  }
class C{  public static void tryToBackupAccount(String account){  File userProfile=new File(Environment.getDataDirectory().toString() + DATABASE_LOCATION);  try {    saveUserProfile(userProfile,account);  } catch (  FileNotFoundException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }  }catch (  IOException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }    try {      FileUtils.deleteDirectory(new File(userProfile,account));    } catch (    IOException ex) {      if (sLogger.isActivated()) {        sLogger.debug(ex.getMessage());      }    }    try {      FileUtils.deleteDirectory(userProfile);    } catch (    IOException ex) {      if (sLogger.isActivated()) {        sLogger.debug(ex.getMessage());      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  this.subject=subject;  this.callbackHandler=callbackHandler;  this.sharedState=(Map<String,Object>)sharedState;  this.options=options;  ldapEnvironment=new Hashtable<String,Object>(9);  ldapEnvironment.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");  for (  String key : options.keySet()) {    if (key.indexOf(".") > -1) {      ldapEnvironment.put(key,options.get(key));    }  }  userProvider=(String)options.get(USER_PROVIDER);  if (userProvider != null) {    ldapEnvironment.put(Context.PROVIDER_URL,userProvider);  }  authcIdentity=(String)options.get(AUTHC_IDENTITY);  if (authcIdentity != null && (authcIdentity.indexOf(USERNAME_TOKEN) != -1)) {    identityMatcher=USERNAME_PATTERN.matcher(authcIdentity);  }  userFilter=(String)options.get(USER_FILTER);  if (userFilter != null) {    if (userFilter.indexOf(USERNAME_TOKEN) != -1) {      filterMatcher=USERNAME_PATTERN.matcher(userFilter);    }    constraints=new SearchControls();    constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);    constraints.setReturningAttributes(new String[0]);    constraints.setReturningObjFlag(true);  }  authzIdentity=(String)options.get(AUTHZ_IDENTITY);  if (authzIdentity != null && authzIdentity.startsWith("{") && authzIdentity.endsWith("}")) {    if (constraints != null) {      authzIdentityAttr=authzIdentity.substring(1,authzIdentity.length() - 1);      constraints.setReturningAttributes(new String[]{authzIdentityAttr});    }    authzIdentity=null;  }  if (authcIdentity != null) {    if (userFilter != null) {      authFirst=true;    } else {      authOnly=true;    }  }  if ("false".equalsIgnoreCase((String)options.get("useSSL"))) {    useSSL=false;    ldapEnvironment.remove(Context.SECURITY_PROTOCOL);  } else {    ldapEnvironment.put(Context.SECURITY_PROTOCOL,"ssl");  }  tryFirstPass="true".equalsIgnoreCase((String)options.get("tryFirstPass"));  useFirstPass="true".equalsIgnoreCase((String)options.get("useFirstPass"));  storePass="true".equalsIgnoreCase((String)options.get("storePass"));  clearPass="true".equalsIgnoreCase((String)options.get("clearPass"));  debug="true".equalsIgnoreCase((String)options.get("debug"));  if (debug) {    if (authFirst) {      System.out.println("\t\t[LdapLoginModule] " + "authentication-first mode; " + (useSSL ? "SSL enabled" : "SSL disabled"));    } else     if (authOnly) {      System.out.println("\t\t[LdapLoginModule] " + "authentication-only mode; " + (useSSL ? "SSL enabled" : "SSL disabled"));    } else {      System.out.println("\t\t[LdapLoginModule] " + "search-first mode; " + (useSSL ? "SSL enabled" : "SSL disabled"));    }  }}  }
class C{  public boolean more(){  return pos < in.length();}  }
class C{  public static <E,S extends SortedSet<E>>MutableSortedSet<E> of(S set,Object lock){  return new SynchronizedSortedSet<>(SortedSetAdapter.adapt(set),lock);}  }
class C{  public DirScpOperation(File root){  File[] dirContent=root.listFiles();  assert root.isDirectory() && dirContent != null;  myDirName=root.getName();  for (  File file : dirContent) {    if (file.isDirectory()) {      myOps.add(new DirScpOperation(file));    } else {      myOps.add(new FileScpOperation(file));    }  }}  }
class C{  private static Writer makeWriter(OutputStream out,String enc) throws java.io.UnsupportedEncodingException {  if ("UTF-8".equals(enc)) {    enc="UTF8";  }  Writer writer=new BufferedWriter((new OutputStreamWriter(new BufferedOutputStream(out),enc)));  return writer;}  }
class C{  public BasicVertex(Vertex original){  this.id=original.getId();  this.name=original.getName();  this.data=original.getData();  this.creationDate=original.getCreationDate();  this.accessCount=original.getAccessCount();  this.accessDate=original.getAccessDate();  this.consciousnessLevel=original.getConsciousnessLevel();  this.original=original;}  }
class C{  @Override protected void copyItem(Positionable p){  if (log.isDebugEnabled()) {    log.debug("Enter copyItem: _selectionGroup {}",_selectionGroup != null ? "size=" + _selectionGroup.size() : "null");  }  if (_pastePending) {    pasteItems();  }  if (_selectionGroup != null && !_selectionGroup.contains(p)) {    deselectSelectionGroup();  }  if (_selectionGroup == null) {    _selectionGroup=new ArrayList<Positionable>();    _selectionGroup.add(p);  }  ArrayList<Positionable> selectionGroup=new ArrayList<Positionable>();  for (  Positionable comp : _selectionGroup) {    Positionable pos=comp.deepClone();    selectionGroup.add(pos);  }  _selectionGroup=selectionGroup;  _pastePending=true;}  }
class C{  public DD(double hi,double lo){  init(hi,lo);}  }
class C{  public boolean isOnParent(){  return onParent;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public LinkedHashMapPro(Map<? extends K,? extends V> m){  super(m);  accessOrder=false;}  }
class C{  @Override public void addMatch(Hmmer2HmmPfamSearchRecord methodMatches,Map<String,RawProtein<SmartRawMatch>> rawResults) throws IOException {  for (  String sequenceId : methodMatches.getSequenceMatches().keySet()) {    Hmmer2HmmPfamSequenceMatch sequenceMatch=methodMatches.getSequenceMatches().get(sequenceId);    for (    Hmmer2HmmPfamDomainMatch domainMatch : sequenceMatch.getDomainMatches()) {      final RawProtein<SmartRawMatch> rawProtein;      if (rawResults.keySet().contains(methodMatches.getSequenceId())) {        rawProtein=rawResults.get(methodMatches.getSequenceId());      } else {        rawProtein=new RawProtein<SmartRawMatch>(methodMatches.getSequenceId());        rawResults.put(methodMatches.getSequenceId(),rawProtein);      }      rawProtein.addMatch(new SmartRawMatch(methodMatches.getSequenceId(),sequenceMatch.getModelAccession(),SignatureLibrary.SMART,signatureLibraryRelease,domainMatch.getSeqFrom(),domainMatch.getSeqTo(),sequenceMatch.getEValue(),sequenceMatch.getSequenceScore(),domainMatch.getHmmFrom(),domainMatch.getHmmTo(),domainMatch.getHmmBounds(),domainMatch.getEValue(),domainMatch.getScore()));    }  }}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  final DistanceQuery<O> distanceQuery=database.getDistanceQuery(relation,getDistanceFunction());  KNNQuery<O> knnQuery=database.getKNNQuery(distanceQuery,k + 1);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Compute Local Isolation Coefficients",relation.size(),LOG) : null;  DoubleMinMax minmax=new DoubleMinMax();  WritableDoubleDataStore lic_score=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    final KNNList knn=knnQuery.getKNNForDBID(iditer,k + 1);    double skn=0;    int i=0;    for (DoubleDBIDListIter neighbor=knn.iter(); i < k && neighbor.valid(); neighbor.advance()) {      if (DBIDUtil.equal(iditer,neighbor)) {        continue;      }      skn+=neighbor.doubleValue();      ++i;    }    double lic=knn.getKNNDistance() + (i > 0 ? skn / i : 0);    lic_score.putDouble(iditer,lic);    minmax.put(skn);    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  DoubleRelation res=new MaterializedDoubleRelation("Local Isolation Coefficient","lic-outlier",lic_score,relation.getDBIDs());  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.,Double.POSITIVE_INFINITY,0.);  return new OutlierResult(meta,res);}  }
class C{  @Override public void addAttribute(String name,int value){  current.setAttribute(name,Integer.toString(value));}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  double[] imageTotals;  long[] imageNs;  double[] imageAverages;  String[] shortNames=null;  String[] units=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one image must be specified for an image correlation.");    return;  }  try {    imageTotals=new double[numImages];    imageNs=new long[numImages];    imageAverages=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    double[] data;    for (a=0; a < numImages; a++) {      updateProgress("Image " + (a + 1) + ", Calculating image averages:",-1);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];            imageNs[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();      imageAverages[a]=imageTotals[a] / imageNs[a];      progress=(int)(100f * (a + 1) / numImages);      updateProgress("Image " + (a + 1) + ", Calculating image average:",(int)progress);    }    String retstr=null;    retstr="IMAGE AVERAGE\n";    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      if (units[a].equals("")) {        retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageAverages[a]);      } else {        retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageAverages[a])+ units[a];      }    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static void insertLibraryPath(Properties p){  String jlp=CommandLineArgs.getEnvironmentArg("java.library.path");  String snp=CommandLineArgs.getEnvironmentArg("java.home");  if (jlp == null)   jlp=".";  p.put("java.library.path",snp + p.get("path.separator") + jlp);}  }
class C{  public static IIdmAuthStatRecorder createIdmAuthStatRecorderInstance(String tenantName,String providerType,String providerId,int providerFlags,IIdmAuthStat.ActivityKind opType,IIdmAuthStat.EventLevel eventLevel,String userId){  if (PerformanceMonitorFactory.getPerformanceMonitor().getCache(tenantName).isEnabled()) {    return new IdmAuthStatRecorder(tenantName,providerType,providerId,providerFlags,opType,eventLevel,userId,PerformanceMonitorFactory.getPerformanceMonitor().summarizeLdapQueries(),DiagnosticsContextFactory.getCurrentDiagnosticsContext().getCorrelationId());  } else {    return NoopIdmAuthStatRecorder.getInstance();  }}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.189 -0400",hash_original_method="996B698723280386FF0BD2EC46551473",hash_generated_method="2F25CF4B5E25E2F18EA070F4452DFA7B") public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  public static int[] findBitErrors(int checksumError){  for (int x=0; x < 48; x++) {    if (CHECKSUMS[x] == checksumError) {      int[] errors=new int[1];      errors[0]=x;      return errors;    }  }  for (int x=0; x < 48; x++) {    for (int y=0; y < 48; y++) {      if (x != y && (CHECKSUMS[x] ^ CHECKSUMS[y]) == checksumError) {        int[] errors=new int[2];        errors[0]=x;        errors[1]=y;        return errors;      }    }  }  return null;}  }
class C{  protected boolean seekTypesInType(String prefix,int firstDot,IType type,IJavaElementRequestor requestor,int acceptFlags){  IType[] types=null;  try {    types=type.getTypes();  } catch (  JavaModelException npe) {    return false;  }  int length=types.length;  if (length == 0)   return false;  String memberPrefix=prefix;  boolean isMemberTypePrefix=false;  if (firstDot != -1) {    memberPrefix=prefix.substring(0,firstDot);    isMemberTypePrefix=true;  }  for (int i=0; i < length; i++) {    if (requestor.isCanceled())     return false;    IType memberType=types[i];    if (memberType.getElementName().toLowerCase().startsWith(memberPrefix))     if (isMemberTypePrefix) {      String subPrefix=prefix.substring(firstDot + 1,prefix.length());      return seekTypesInType(subPrefix,subPrefix.indexOf('.'),memberType,requestor,acceptFlags);    } else {      if (acceptType(memberType,acceptFlags,true)) {        requestor.acceptMemberType(memberType);        return true;      }    }  }  return false;}  }
class C{  public void addActionListener(ActionListener l){  applyButton.addActionListener(l);}  }
class C{  protected static final boolean canStoreConstant(JavaConstant c){  return true;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getMask(actions));}  }
class C{  public DelayabilityAnalysis(DirectedGraph dg,EarliestnessComputation earliest,Map equivRhsMap,BoundedFlowSet set){  super(dg);  UnitGraph g=(UnitGraph)dg;  this.set=set;  unitToKillValue=equivRhsMap;  this.earliest=earliest;  doAnalysis();{    Iterator unitIt=g.iterator();    while (unitIt.hasNext()) {      Unit currentUnit=(Unit)unitIt.next();      FlowSet beforeSet=(FlowSet)getFlowBefore(currentUnit);      beforeSet.union((FlowSet)earliest.getFlowBefore(currentUnit));    }  }}  }
class C{  public static String createIndentString(int indentationUnits,IJavaProject project){  Map<String,String> options=project != null ? project.getOptions(true) : JavaCore.getOptions();  return ToolFactory.createCodeFormatter(options).createIndentationString(indentationUnits);}  }
class C{  public final void testHashCode(){  CertPath cp1=new MyCertPath(testEncoding);  CertPath cp2=new MyCertPath(testEncoding);  CertPath cp3=new MyCertPath(testEncoding1);  assertTrue(cp1.hashCode() == cp2.hashCode());  assertTrue(cp1.hashCode() != cp3.hashCode());}  }
class C{  public static final String intToHexString(int a){  StringBuffer sb=new StringBuffer(8);  for (int i=0; i < 8; i++)   sb.append(NIBBLE[(a >>> (60 - 4 * i)) & 0xf]);  return sb.toString();}  }
class C{  public InputTextMessageContent.InputTextMessageContentBuilder messageText(String messageText){  this.message_text=messageText;  return this;}  }
class C{  public <T extends VCardProperty>List<T> removeProperties(Class<T> clazz){  List<VCardProperty> removed=properties.removeAll(clazz);  return castList(removed,clazz);}  }
class C{  public boolean belongsToCustodyArchive(String custodyArchiveId){  Object[] arrayOrdenado=custodyArchiveList.toArray();  Arrays.sort(arrayOrdenado);  if (Arrays.binarySearch(arrayOrdenado,custodyArchiveId) >= 0)   return true;  return false;}  }
class C{  public static void main(String[] args){  TestConstructorIndent tester=new TestConstructorIndent();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public int toGraph(StringBuffer text,int num) throws Exception {  int maxIndex=Utils.maxIndex(m_ClassDistribution);  String classValue=m_Info.classAttribute().isNominal() ? m_Info.classAttribute().value(maxIndex) : Utils.doubleToString(m_ClassDistribution[0],2);  num++;  if (m_Attribute == -1) {    text.append("N" + Integer.toHexString(hashCode()) + " [label=\""+ num+ ": "+ classValue+ "\""+ "shape=box]\n");  } else {    text.append("N" + Integer.toHexString(hashCode()) + " [label=\""+ num+ ": "+ classValue+ "\"]\n");    for (int i=0; i < m_Successors.length; i++) {      text.append("N" + Integer.toHexString(hashCode()) + "->"+ "N"+ Integer.toHexString(m_Successors[i].hashCode())+ " [label=\""+ m_Info.attribute(m_Attribute).name());      if (m_Info.attribute(m_Attribute).isNumeric()) {        if (i == 0) {          text.append(" < " + Utils.doubleToString(m_SplitPoint,2));        } else {          text.append(" >= " + Utils.doubleToString(m_SplitPoint,2));        }      } else {        text.append(" = " + m_Info.attribute(m_Attribute).value(i));      }      text.append("\"]\n");      num=m_Successors[i].toGraph(text,num);    }  }  return num;}  }
class C{  @Override public void reply(Z21Reply msg){  if (msg.isRailComDataChangedMessage()) {    int tags=msg.getNumRailComDataEntries();    for (int i=0; i < tags; i++) {      DccLocoAddress l=msg.getRailComLocoAddress(i);      RailCom tag=InstanceManager.getDefault(RailComManager.class).provideIdTag("" + l.getNumber());      tag.setAddressType(l.isLongAddress() ? RailCom.LONG_ADDRESS : RailCom.SHORT_ADDRESS);      tag.setActualSpeed(msg.getRailComSpeed(i));      tag.setActualTemperature(msg.getRailComTemp(i));      notify(tag);    }  }}  }
class C{  public IconLayer(){}  }
class C{  public static LowPassBuilder lowPassBuilder(){  return new LowPassBuilder();}  }
class C{  public static final void writeListXml(List val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"list");  if (name != null) {    out.attribute(null,"name",name);  }  int N=val.size();  int i=0;  while (i < N) {    writeValueXml(val.get(i),null,out);    i++;  }  out.endTag(null,"list");}  }
class C{  public boolean forEachEntry(TFloatDoubleProcedure procedure){  byte[] states=_states;  float[] keys=_set;  double[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public static State registerState(String name){  State state=new SimpleState(name);  registerState(state);  return state;}  }
class C{  public void delete(){  GL11.glDeleteTextures(textureId);  textureId=-1;  name=null;  metric=null;}  }
class C{  public DBUserName(DBIdentity identity,String name){  this.identity=identity;  this.email=name;}  }
class C{  public byte[] handleMapRequest(Properties requestProperties) throws IOException, MapRequestFormatException {  Proj projection=ImageServerUtils.createOMProjection(requestProperties,defaultProjection);  Paint bgPaint=ImageServerUtils.getBackground(requestProperties,getBackground());  boolean formatFound=false;  String format=requestProperties.getProperty(FORMAT);  if (format != null) {    formatFound=setFormatter(format.toUpperCase());    formatFound=true;    Debug.message("imageserver","Format requested " + format);  }  if (Debug.debugging("imageserver")) {    if (format == null || formatFound == false) {      Debug.output("MRH: no formatter defined, using default");    }    Debug.output("Creating image with projection: " + projection);  }  byte[] image;  String strLayers=requestProperties.getProperty(LAYERS);  if (strLayers != null) {    Vector<String> layers=PropUtils.parseMarkers(strLayers,",");    if (Debug.debugging("imageserver")) {      Debug.output("MRH.handleMapRequest: requested layers >> " + layers);    }    image=createImage(projection,-1,-1,layers,bgPaint);  } else {    if (getUseVisibility()) {      if (Debug.debugging("imageserver")) {        Debug.output("MRH.handleMapRequest: Using visibility to determine layers");      }      image=createImage(projection,-1,-1,calculateVisibleLayerMask(),bgPaint);    } else {      Vector<String> layers=PropUtils.parseMarkers(defaultLayers," ");      if (Debug.debugging("imageserver")) {        Debug.output("MRH.handleMapRequest: requested layers >> " + layers + " out of "+ getAllLayerNames());      }      image=createImage(projection,-1,-1,layers,bgPaint);    }  }  return image;}  }
class C{  protected boolean checkParticle(DLAParticle p){  List<Vec3D> parts=octree.getPointsWithinSphere(p,config.snapDistance);  float stickiness=config.getStickiness();  if (parts != null) {    float minDist=Integer.MAX_VALUE;    Vec3D found=null;    for (    Vec3D pp : parts) {      float d=pp.distanceToSquared(p);      if (d < minDist) {        minDist=d;        found=pp;      }    }    if (minDist < config.getSnapDistanceSquared() && Math.random() < stickiness) {      alignAttachedParticle(p,found);      addParticle(p);      return true;    }  }  if (p.sub(currCurvePoint).magSquared() < config.getCurveAttachDistanceSquared()) {    parts=octreeGuides.getPointsWithinSphere(p,config.getCurveAttachDistance());    if (parts != null) {      for (int i=parts.size(); i > 0; i--) {        if (Math.random() < stickiness) {          addParticle(p);          return true;        }      }    }  }  return false;}  }
class C{  public void run(){  ((TLAEditor)getTextEditor()).getViewer().prependVerifyKeyListener(this);  statusLine.setMessage("Example Command");}  }
class C{  private static Cell[] interpret(String string){  Cell[] cells=new Cell[9];  for (int i=0; i < string.length(); i++) {    int dig=string.charAt(i) - '1';    int col=dig % 3;    int row=dig / 3;    cells[i]=new Cell(col,row);  }  return cells;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.673 -0500",hash_original_method="493973B7C3E0E7D72E4F9CB95002E20E",hash_generated_method="A1BC58B5414298479A45B46DF4D67064") public void removeTempGruuParam(){  if (parameters != null)   parameters.delete(ParameterNames.TEMP_GRUU);}  }
class C{  protected void sendInfoSql(final byte[] requestItems,final int bufferLength) throws IOException, SQLException {  final XdrOutputStream xdrOut=getXdrOut();  xdrOut.writeInt(WireProtocolConstants.op_info_sql);  xdrOut.writeInt(getHandle());  xdrOut.writeInt(0);  xdrOut.writeBuffer(requestItems);  xdrOut.writeInt(bufferLength);}  }
class C{  public void unpinConnection(String host,Integer port){  connectionLock.lock();  try {    String hostAndPort=ConnectionManager.generateConnectionCacheKey(host,port);    if (pinnedConnections.containsKey(hostAndPort)) {      Integer count=pinnedConnections.get(hostAndPort) - 1;      if (count == 0) {        s_logger.info("CimConnection {} pin count has reached zero; it will be unpinned",hostAndPort);        pinnedConnections.remove(hostAndPort);      } else {        s_logger.info("CimConnection {} pin count set to {}",hostAndPort,count);        pinnedConnections.put(hostAndPort,count);      }    }  }  finally {    connectionLock.unlock();  }}  }
class C{  protected void configureWithJson(JSONObject root) throws JSONException, AssemblyException {  JSONArray layers=root.optJSONArray("layers");  if (layers != null) {    for (int i=0; i < layers.length(); i++) {      JSONObject layerObject=layers.getJSONObject(i);      String layerName=layerObject.getString("name");      LayerDeclaration layerDeclaration=withLayer(layerName);      JSONArray using=layerObject.optJSONArray("uses");      if (using != null) {        for (int j=0; j < using.length(); j++) {          layerDeclaration.using(using.getString(j));        }      }      JSONArray modules=layerObject.optJSONArray("modules");      if (modules != null) {        for (int k=0; k < modules.length(); k++) {          JSONObject moduleObject=modules.getJSONObject(k);          String moduleName=moduleObject.getString("name");          ModuleDeclaration moduleDeclaration=layerDeclaration.withModule(moduleName);          JSONArray assemblers=moduleObject.optJSONArray("assemblers");          if (assemblers != null) {            for (int m=0; m < assemblers.length(); m++) {              String string=assemblers.getString(m);              moduleDeclaration.withAssembler(string);            }          }        }      }    }  }}  }
class C{  public boolean isRowEditable(int row){  if (m_readOnly || row < 0)   return false;  if (m_indexActiveColumn > 0) {    Object value=getValueAt(row,m_indexActiveColumn);    if (value instanceof Boolean) {      if (!((Boolean)value).booleanValue())       return false;    } else     if ("N".equals(value))     return false;  }  if (m_indexProcessedColumn > 0) {    Object processed=getValueAt(row,m_indexProcessedColumn);    if (processed instanceof Boolean) {      if (((Boolean)processed).booleanValue())       return false;    } else     if ("Y".equals(processed))     return false;  }  int[] co=getClientOrg(row);  int AD_Client_ID=co[0];  int AD_Org_ID=co[1];  int Record_ID=getKeyID(row);  return MRole.getDefault(m_ctx,false).canUpdate(AD_Client_ID,AD_Org_ID,m_AD_Table_ID,Record_ID,false);}  }
class C{  public void insertFmtPrefFicha(FmtPrefFichaVO fmtPrefFicha){  fmtPrefDBEntity.insertFmtPrefFicha(fmtPrefFicha);}  }
class C{  @PostMapping("/forgot-password") public void forgotPassword(@RequestParam String email){  log.debug("Received forgot password request for: " + email);  lemonService.forgotPassword(email);}  }
class C{  public void ignoreAttKeys(String[] attKeys,boolean ignorePathKeys){  ignoredAttKeys.clear();  for (  String key : attKeys)   ignoredAttKeys.add(key);  this.ignorePathKeys=ignorePathKeys;}  }
class C{  public static ImportException convertToApi(org.oscm.internal.types.exception.ImportException oldEx){  org.oscm.internal.types.exception.beans.ImportExceptionBean bean=(org.oscm.internal.types.exception.beans.ImportExceptionBean)getFaultInfo(oldEx);  ImportExceptionBean v13Bean=convertBeanToApi(bean,ImportExceptionBean.class);  if (bean != null) {    v13Bean.setDetails(bean.getDetails());  }  return newApiException(ImportException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  public synchronized static void stopBackgroundThread(long timeoutMillis){  backgroundThreadMayRun=false;  fifo.notify();  if (backgroundThread != null && timeoutMillis > 0) {    try {      backgroundThread.join(timeoutMillis);    } catch (    InterruptedException e) {    }    backgroundThread=null;  }}  }
class C{  private void playTrack(SoundCloudTrack track){  pauseTimer();  try {    mWifiLock.acquire();    mIsPaused=false;    mIsPausedAfterAudioFocusChanged=false;    mHasAlreadyPlayed=true;    updateNotification();    mMediaSession.setPlaybackState(MediaSessionWrapper.PLAYBACK_STATE_PLAYING);    loadArtwork(this,SoundCloudArtworkHelper.getArtworkUrl(track,SoundCloudArtworkHelper.XXXLARGE));    Intent intent=new Intent(PlaybackListener.ACTION_ON_TRACK_PLAYED);    intent.putExtra(PlaybackListener.EXTRA_KEY_TRACK,track);    mLocalBroadcastManager.sendBroadcast(intent);    Intent bufferingStart=new Intent(PlaybackListener.ACTION_ON_BUFFERING_STARTED);    mLocalBroadcastManager.sendBroadcast(bufferingStart);    mMediaPlayer.reset();    mMediaPlayer.setDataSource(track.getStreamUrl() + SOUND_CLOUD_CLIENT_ID_PARAM + mSoundCloundClientId);    if (mAudioManager.requestAudioFocus(this,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN) == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {      mIsPreparing=true;      mMediaPlayer.prepareAsync();    }  } catch (  IOException e) {    Log.e(TAG,"File referencing not exist : " + track);  }}  }
class C{  protected void paintExpandControl(final Graphics g,final Rectangle clipBounds,final Insets insets,final Rectangle bounds,final TreePath path,final int row,final boolean isExpanded,final boolean hasBeenExpanded,final boolean isLeaf){  final Object value=path.getLastPathComponent();  if (isLeaf || (hasBeenExpanded && treeModel.getChildCount(value) <= 0))   return;  final boolean isLeftToRight=AquaUtils.isLeftToRight(tree);  final State state=getState(path);  if (fAnimationFrame == -1 && state != State.PRESSED) {    super.paintExpandControl(g,clipBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);    return;  }  final Icon icon=isExpanded ? getExpandedIcon() : getCollapsedIcon();  if (!(icon instanceof UIResource)) {    super.paintExpandControl(g,clipBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);    return;  }  int middleXOfKnob;  if (isLeftToRight) {    middleXOfKnob=bounds.x - (getRightChildIndent() - 1);  } else {    middleXOfKnob=clipBounds.x + clipBounds.width / 2;  }  final int middleYOfKnob=bounds.y + (bounds.height / 2);  final int x=middleXOfKnob - icon.getIconWidth() / 2;  final int y=middleYOfKnob - icon.getIconHeight() / 2;  final int height=icon.getIconHeight();  final int width=20;  setupPainter(state,isExpanded,isLeftToRight);  painter.paint(g,tree,x,y,width,height);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.695 -0400",hash_original_method="B0EA15F3C965ED431DBF52EB2A883915",hash_generated_method="151E73FAD20C64CC13421985E0F5E921") public SuffixFileFilter(List<String> suffixes){  this(suffixes,IOCase.SENSITIVE);}  }
class C{  public T caseProjectDescription(ProjectDescription object){  return null;}  }
class C{  public void writeByte(final byte octet){  if (remaining() < 1) {    if (index == blocks.size() - 1) {      allocateNewBlock();    }    index++;    current=blocks.get(index);  }  final Block block=current;  block.data[block.limit]=octet;  block.limit++;}  }
class C{  public void removeColumnListener(ColumnListener listener){  return;}  }
class C{  public Recipe(){  this(null,null,null,null,null,null,null);}  }
class C{  protected Map<String,QName> createMap(){  return Collections.synchronizedMap(new HashMap<String,QName>());}  }
class C{  public final boolean inside(double e,double n){  return northing <= n && n < northing + SIZE_M && easting <= e && e < easting + SIZE_M;}  }
class C{  private void basicClear(LocalRegion region,DiskRegion dr,RegionVersionVector rvv){  if (LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER) {    CacheObserverHolder.getInstance().beforeDiskClear();  }  if (region != null) {    clearAsyncQueue(region,false,rvv);    clearDrainList(region,rvv);  }  if (rvv == null) {    dr.statsClear(region);  }  if (dr.isBackup()) {    PersistentOplogSet oplogSet=getPersistentOplogSet(dr);    oplogSet.clear(dr,rvv);  } else   if (rvv == null) {    dr.freeAllEntriesOnDisk(region);  }}  }
class C{  public void publish(final CoreDescriptor cd,final String state,boolean updateLastState,boolean forcePublish) throws KeeperException, InterruptedException {  if (!forcePublish) {    try (SolrCore core=cc.getCore(cd.getName())){      if (core == null || core.isClosed()) {        return;      }    }   }  String collection=cd.getCloudDescriptor().getCollectionName();  log.info("publishing core={} state={} collection={}",cd.getName(),state,collection);  Integer numShards=cd.getCloudDescriptor().getNumShards();  if (numShards == null) {    log.info("numShards not found on descriptor - reading it from system property");    numShards=Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);  }  assert collection != null && collection.length() > 0;  String shardId=cd.getCloudDescriptor().getShardId();  String coreNodeName=cd.getCloudDescriptor().getCoreNodeName();  if (!ZkStateReader.DOWN.equals(state)) {    String lirState=getLeaderInitiatedRecoveryState(collection,shardId,coreNodeName);    if (lirState != null) {      if ("active".equals(state)) {        if (ZkStateReader.RECOVERING.equals(lirState)) {          updateLeaderInitiatedRecoveryState(collection,shardId,coreNodeName,ZkStateReader.ACTIVE);        } else         if (ZkStateReader.DOWN.equals(lirState)) {          throw new SolrException(ErrorCode.SERVER_ERROR,"Cannot publish state of core '" + cd.getName() + "' as active without recovering first!");        }      } else       if (ZkStateReader.RECOVERING.equals(state)) {        if (ZkStateReader.DOWN.equals(lirState)) {          updateLeaderInitiatedRecoveryState(collection,shardId,coreNodeName,ZkStateReader.RECOVERING);        }      }    }  }  Map<String,Object> props=new HashMap<String,Object>();  props.put(Overseer.QUEUE_OPERATION,"state");  props.put(ZkStateReader.STATE_PROP,state);  props.put(ZkStateReader.BASE_URL_PROP,getBaseUrl());  props.put(ZkStateReader.CORE_NAME_PROP,cd.getName());  props.put(ZkStateReader.ROLES_PROP,cd.getCloudDescriptor().getRoles());  props.put(ZkStateReader.NODE_NAME_PROP,getNodeName());  props.put(ZkStateReader.SHARD_ID_PROP,cd.getCloudDescriptor().getShardId());  props.put(ZkStateReader.COLLECTION_PROP,collection);  if (numShards != null) {    props.put(ZkStateReader.NUM_SHARDS_PROP,numShards.toString());  }  if (coreNodeName != null) {    props.put(ZkStateReader.CORE_NODE_NAME_PROP,coreNodeName);  }  if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(),collection)) {    try (SolrCore core=cc.getCore(cd.getName())){      if (core != null && core.getDirectoryFactory().isSharedStorage()) {        props.put("dataDir",core.getDataDir());        UpdateLog ulog=core.getUpdateHandler().getUpdateLog();        if (ulog != null) {          props.put("ulogDir",ulog.getLogDir());        }      }    }   }  ZkNodeProps m=new ZkNodeProps(props);  if (updateLastState) {    cd.getCloudDescriptor().lastPublished=state;  }  overseerJobQueue.offer(ZkStateReader.toJSON(m));}  }
class C{  public static void initialize(){  MockFramework.disable();  AgentLoader.loadAgent();}  }
class C{  public static void close(Closeable... objects) throws IOException {  close(Arrays.asList(objects));}  }
class C{  public IV deserializeKey(final ITuple tuple){  final byte[] key=tuple.getKeyBuffer().array();  return IVUtility.decode(key);}  }
class C{  public void start(){  stop=false;  startMonitoringLogcat();}  }
class C{  protected static void print(int depth,CoverTreeNode top_node){  print_space(depth);  println(top_node.p());  if (top_node.num_children > 0) {    print_space(depth);    print("scale = " + top_node.scale + "\n");    print_space(depth);    print("num children = " + top_node.num_children + "\n");    System.out.flush();    for (int i=0; i < top_node.num_children; i++) {      print(depth + 1,top_node.children.element(i));    }  }}  }
class C{  public FastBooleanBuffer append(boolean[] array,int off,int len){  int end=off + len;  if ((off < 0) || (len < 0) || (end > array.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return this;  }  int newSize=size + len;  int remaining=len;  if (currentBuffer != null) {    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    remaining-=part;    offset+=part;    size+=part;  }  if (remaining > 0) {    needNewBuffer(newSize);    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    offset+=part;    size+=part;  }  return this;}  }
class C{  public static double F1(int s1[],int s2[]){  double p=P_Precision(s1,s2);  double r=P_Recall(s1,s2);  if (Double.isNaN(r) || Double.isNaN(p)) {    return Double.NaN;  }  if (p == 0.0 && r == 0.0)   return 0.0;  return 2. * p * r / (p + r);}  }
class C{  @Override public void displayResults(List<AcronymExpansion> results,String errorMessage){  if (results == null)   Utils.showToast(this,errorMessage); else {    Log.d(TAG,"displayResults() with number of acronyms = " + results.size());    final Intent intent=DisplayExpansionActivity.makeIntent(results);    if (intent.resolveActivity(getPackageManager()) != null)     startActivity(intent); else     Utils.showToast(this,"No Activity found to display Acronym Expansions");  }}  }
class C{  private void reloadChildren(){synchronized (mChildren) {    for (int i=0, j=mChildren.size(); i < j; ++i)     mChildren.get(i).reload();  }}  }
class C{  public LengthParser(){  lengthHandler=DefaultLengthHandler.INSTANCE;}  }
class C{  @Override public PLShakeData clone(){  return new PLShakeData(this);}  }
class C{  public void testCreateIdForEJB() throws Exception {  EJB ejb=createEJB();  String name=deployer.createIdForDeployable(ejb);  assertEquals("cargo.war",name);}  }
class C{  @SuppressWarnings("LockAcquiredButNotSafelyReleased") private long writeLock(int hash){  lock.writeLock().lock();  return binAddress(hash);}  }
class C{  public int[] doChoiceDialog(String title,String question,String[] choices){  ChoiceDialog choice=new ChoiceDialog(frame,title,question,choices);  choice.setVisible(true);  return choice.getChoices();}  }
class C{  protected Object finish(Map settings) throws WizardException {  return provider.finish(settings);}  }
class C{  public JasperReportsResult(String location){  super(location);}  }
