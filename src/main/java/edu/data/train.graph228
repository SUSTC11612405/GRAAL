class C{  public void flush() throws JSONException {  pad(8);}  }
class C{  public static DeleteServiceSessionsForSubscriptionResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteServiceSessionsForSubscriptionResponseE object=new DeleteServiceSessionsForSubscriptionResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","deleteServiceSessionsForSubscriptionResponse").equals(reader.getName())) {          object.setDeleteServiceSessionsForSubscriptionResponse(DeleteServiceSessionsForSubscriptionResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private boolean holdsProvidedByRuntime(PolyfillValidationState state){  if (!state.polyType.isProvidedByRuntime()) {    final String msg=getMessageForCLF_POLYFILL_NOT_PROVIDEDBYRUNTIME(state.name);    addIssue(state,msg,CLF_POLYFILL_NOT_PROVIDEDBYRUNTIME);    return false;  }  if (!state.filledType.isProvidedByRuntime()) {    final String msg=getMessageForCLF_POLYFILL_FILLED_NOT_PROVIDEDBYRUNTIME(state.name);    addIssue(state,msg,CLF_POLYFILL_FILLED_NOT_PROVIDEDBYRUNTIME);    return false;  }  return true;}  }
class C{  public boolean isLoaded(){  return entityState == EntityState.LOADED;}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  public Transcripts(String userID,List<Transcripts.TranscriptSummary> summaries){  this.userID=userID;  this.summaries=summaries;}  }
class C{  public Vector4d mul(Matrix4x3dc mat){  return mul(mat,this);}  }
class C{  public static boolean isDescendingFrom(@Nullable Component child,@NotNull Component parent){  while (child != null && child != parent) {    child=child instanceof JPopupMenu ? ((JPopupMenu)child).getInvoker() : child.getParent();  }  return child == parent;}  }
class C{  public EmissionLinkAnalyzer(final double simulationEndTime,final String emissionEventFile,final int noOfTimeBins){  this(simulationEndTime,emissionEventFile,noOfTimeBins,null,null);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.410 -0500",hash_original_method="8C7B174379DD3B2C843811B1130834BD",hash_generated_method="366EB0889C106AAC3E31EE9BAED51380") public ArrayDeque(){  elements=(E[])new Object[16];}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  WhiteboxRaster image;  int cols, rows;  double z;  float progress=0;  int col, row;  int a, i;  double classSize=-9999;  double startingClass=-9999;  double endingClass=-9999;  int numClasses=-9999;  double[] histo;  boolean blnCumulative=false;  int classVal=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      classSize=Double.parseDouble(args[i]);    } else     if (i == 2) {      if (!args[i].toLowerCase().equals("not specified")) {        startingClass=Double.parseDouble(args[i]);      }    } else     if (i == 3) {      if (!args[i].toLowerCase().equals("not specified")) {        endingClass=Double.parseDouble(args[i]);      }    } else     if (i == 4) {      if (args[i].toLowerCase().equals("true")) {        blnCumulative=true;      }    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (classSize <= 0) {    showFeedback("Class size must be larger than zero.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (startingClass == -9999) {      startingClass=image.getMinimumValue();    }    if (endingClass == -9999) {      endingClass=image.getMaximumValue();    }    double endingClassEndingVal=endingClass + classSize;    numClasses=(int)((endingClassEndingVal - startingClass) / classSize);    histo=new double[numClasses];    updateProgress("Calculating histogram:",0);    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          classVal=(int)(Math.floor((data[col] - startingClass) / classSize));          if (classVal < numClasses && classVal > 0) {            histo[classVal]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    image.close();    if (blnCumulative) {      for (a=1; a < numClasses; a++) {        histo[a]=histo[a] + histo[a - 1];      }      for (a=0; a < numClasses; a++) {        histo[a]=histo[a] / histo[numClasses - 1];      }    }    String retstr=null;    retstr="HISTOGRAM\n";    retstr=retstr + "Input image:\t" + image.getShortHeaderFile()+ "\n";    retstr=retstr + "Cumulative:\t" + Boolean.toString(blnCumulative)+ "\n\n";    retstr=retstr + "Bin\t" + "Freq.\t"+ "\n";    if (!blnCumulative) {      for (a=0; a < numClasses; a++) {        z=a * classSize + startingClass;        retstr=retstr + z + "\t"+ (int)(histo[a])+ "\n";      }    } else {      DecimalFormat df=new DecimalFormat("0.0000");      for (a=0; a < numClasses; a++) {        z=a * classSize + startingClass;        retstr=retstr + z + "\t"+ df.format(histo[a])+ "\n";      }    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final void testKnownCustomTransformation(){  CoordinateTransformation transformation=TransformationFactory.getCoordinateTransformation(TransformationFactory.GK4,TransformationFactory.WGS84);  assertNotNull(transformation);  assertTrue(transformation instanceof GK4toWGS84);}  }
class C{  @CreateSwarm public static Swarm newContainer() throws Exception {  return new Swarm().component(ProjectStageInjectable.class);}  }
class C{  public final void testValidateLowercaseNotAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.LOWERCASE,false,allowedCharacters);  assertTrue(characterValidator.validate("abc-"));}  }
class C{  public static Blob fromDataURI(String dataURI){  String[] strings=dataURI.split(",");  String byteString=getByteString(strings[1],strings[0]);  String mimeString=strings[0].split(":")[1].split(";")[0];  int length=byteString.length();  ArrayBuffer ab=ArrayBufferNative.create(length);  Uint8Array ia=Uint8ArrayNative.create(ab);  for (int i=0; i < length; i++) {    ia.set(i,StringUtils.charCodeAt(byteString,i));  }  return Blob.createIfSupported(ab,mimeString);}  }
class C{  public SimpleSoundCloudUserView(Context context){  super(context);  if (!isInEditMode()) {    init();  }}  }
class C{  public static void warn(final String message,final Throwable t){  if (JQuantLib.logger != null) {    JQuantLib.logger.warn(message,t);  } else {    System.err.printf("WARN: %s : %s\n",message,t.getMessage());    t.printStackTrace(System.err);  }}  }
class C{  public SendableVoiceMessage.SendableVoiceMessageBuilder replyMarkup(ReplyMarkup replyMarkup){  this.replyMarkup=replyMarkup;  return this;}  }
class C{  public static Kind individual(){  return new Kind(INDIVIDUAL);}  }
class C{  @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  @Parameterized.Parameters(name="{index}: ChannelConnectionTest({0})") public static Collection<PaymentChannelClient.VersionSelector> data(){  return Arrays.asList(PaymentChannelClient.VersionSelector.VERSION_1,PaymentChannelClient.VersionSelector.VERSION_2_ALLOW_1);}  }
class C{  public Matrix4x3f scaleLocal(float x,float y,float z){  return scaleLocal(x,y,z,this);}  }
class C{  protected void buildUserId(ApplicationUser applicationUser,Map<String,String> httpHeaders,String headerName){  String userId=getHeaderValueString(headerName,httpHeaders);  if (userId == null) {    throw new IllegalArgumentException("userId is required. No value for userId was found in the header " + headerName);  }  applicationUser.setUserId(userId);}  }
class C{  public Reflect call(String name) throws ReflectException {  return call(name,new Object[0]);}  }
class C{  public DiffRowGenerator build(){  return new DiffRowGenerator(this);}  }
class C{  protected Node newNode(){  return new SVGStyleSheetProcessingInstruction();}  }
class C{  public DitherPanel(Ditherer ditherer,Color nonDitherBackgroundColor){  super();  DITHERER=ditherer;  this.nonDitherBackgroundColor=nonDitherBackgroundColor;}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  @RequestMapping(value="/{urid}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("urid") Integer userRoleId,Principal principal){  RestWrapper restWrapper=null;  try {    userRolesDAO.delete(userRoleId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + userRoleId + " deleted from UserRoles by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public int cancelAllForTag(@NonNull String tag){  return cancelAllInner(tag);}  }
class C{  public FileShareExport(List<String> clients,String securityType,String permissions,String rootUserMapping,String protocol,String storagePortName,String storagePort,String path){  _clients=clients;  for (  String secType : securityType.split(SEC_SEPARATOR)) {    if (_securityType == null) {      _securityType=new HashSet<SecurityTypes>();    }    _securityType.add(Enum.valueOf(SecurityTypes.class,secType.trim()));  }  _permissions=Enum.valueOf(Permissions.class,permissions);  _rootUserMapping=rootUserMapping;  _storagePortName=storagePortName;  _protocol=Enum.valueOf(StorageProtocol.File.class,protocol);  _storagePort=storagePort;  _path=path;}  }
class C{  public void parse() throws IOException {  long length=0;  try {    length=file.length();  } catch (  IOException e) {    throw new IOException("Wrong size");  }  try {    parse("",length);  } catch (  IOException e) {    throw new IOException("Parse error: malformed mp4 file");  }}  }
class C{  protected Object openObject(){  if (m_FileChooser == null) {    createFileChooser();  }  int returnVal=m_FileChooser.showOpenDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    File selected=m_FileChooser.getSelectedFile();    try {      ObjectInputStream oi=new ObjectInputStream(new BufferedInputStream(new FileInputStream(selected)));      Object obj=oi.readObject();      oi.close();      if (!m_ClassType.isAssignableFrom(obj.getClass())) {        throw new Exception("Object not of type: " + m_ClassType.getName());      }      return obj;    } catch (    Exception ex) {      JOptionPane.showMessageDialog(this,"Couldn't read object: " + selected.getName() + "\n"+ ex.getMessage(),"Open object file",JOptionPane.ERROR_MESSAGE);    }  }  return null;}  }
class C{  public static void makePostfix(CSTNode node,boolean throwIfInvalid){switch (node.getMeaning()) {case PLUS_PLUS:    node.setMeaning(POSTFIX_PLUS_PLUS);  break;case MINUS_MINUS:node.setMeaning(POSTFIX_MINUS_MINUS);break;default :if (throwIfInvalid) {throw new GroovyBugError("cannot convert to postfix for type [" + node.getMeaning() + "]");}}}  }
class C{  public static NodeConfig loadNodeConfig(Path solrHome,Properties nodeProperties){  SolrResourceLoader loader=new SolrResourceLoader(solrHome,null,nodeProperties);  if (!StringUtils.isEmpty(System.getProperty("solr.solrxml.location"))) {    log.warn("Solr property solr.solrxml.location is no longer supported. " + "Will automatically load solr.xml from ZooKeeper if it exists");  }  String zkHost=System.getProperty("zkHost");  if (!StringUtils.isEmpty(zkHost)) {    try (SolrZkClient zkClient=new SolrZkClient(zkHost,30000)){      if (zkClient.exists("/solr.xml",true)) {        log.info("solr.xml found in ZooKeeper. Loading...");        byte[] data=zkClient.getData("/solr.xml",null,null,true);        return SolrXmlConfig.fromInputStream(loader,new ByteArrayInputStream(data));      }    } catch (    Exception e) {      throw new SolrException(ErrorCode.SERVER_ERROR,"Error occurred while loading solr.xml from zookeeper",e);    }    log.info("Loading solr.xml from SolrHome (not found in ZooKeeper)");  }  return SolrXmlConfig.fromSolrHome(loader,loader.getInstancePath());}  }
class C{  public boolean isTextPresent(final String text){  findElement();  return element.getText().contains(text);}  }
class C{  private boolean isTheCsrftWrong(RequestAndResponse requestAndResponse,String csrft){  if (csrft == null || csrft.isEmpty() || csrft.length() > 100) {    return true;  }  return !csrft.equals(getCsrft(requestAndResponse));}  }
class C{  public void createExperimentIndex() throws Exception {  if (m_Debug) {    System.err.println("Creating experiment index table...");  }  String query;  query="CREATE TABLE " + EXP_INDEX_TABLE + " ( "+ EXP_TYPE_COL+ " "+ m_stringType+ ","+ "  "+ EXP_SETUP_COL+ " "+ m_stringType+ ","+ "  "+ EXP_RESULT_COL+ " "+ m_intType+ " )";  update(query);  close();}  }
class C{  public static byte[] stripChunkedEncoding(byte[] input){  final String HEADER_BODY_SEPERATOR="\r\n\r\n";  String initialPart=new String(input,0,Math.min(MAX_HEADER_SIZE,input.length));  int headerLocation=initialPart.toLowerCase().indexOf("transfer-encoding: chunked\r\n");  if (headerLocation >= 0) {    int bodyOffset=initialPart.indexOf(HEADER_BODY_SEPERATOR) + HEADER_BODY_SEPERATOR.length();    if (headerLocation >= bodyOffset) {      return input;    }    ByteArrayOutputStream baos=new ByteArrayOutputStream(input.length);    baos.write(input,0,bodyOffset);    ByteArrayInputStream bais=new ByteArrayInputStream(input,bodyOffset,input.length - bodyOffset);    byte nextByte=0;    while (nextByte != -1) {      StringBuffer hexBuffer=new StringBuffer(100);      while (nextByte != (byte)'\r' && nextByte != (byte)';') {        nextByte=(byte)bais.read();        hexBuffer.append((char)nextByte);        if (hexBuffer.length() > 99) {          return input;        }      }      while (nextByte != (byte)'\n') {        nextByte=(byte)bais.read();      }      hexBuffer.setLength(hexBuffer.length() - 1);      int chunkSize=Integer.parseInt(hexBuffer.toString(),16);      if (chunkSize == 0) {        return baos.toByteArray();      }      try {        byte[] nextChunk=new byte[chunkSize];        bais.read(nextChunk);        baos.write(nextChunk);      } catch (      IOException e) {        BurpExtender.callbacks.printError("Unable to copy between streams.");        e.printStackTrace(System.err);      }      if (bais.read() != (byte)'\r' || bais.read() != (byte)'\n') {        BurpExtender.callbacks.printError("Unexpected end to chunk - returning raw data");        return input;      }    }    BurpExtender.callbacks.printError("Incomplete chunked encoding - returning raw data");    return input;  } else {    return input;  }}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public static boolean isBLESupported(Context context){  return context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE);}  }
class C{  private Expression expression() throws ParserException, IOException {  Expression e=addExpression();  log(pdebug,"Parsed: expression -> " + e);  return e;}  }
class C{  public GradientPaint(Point2D pt1,Color color1,Point2D pt2,Color color2){  if ((color1 == null) || (color2 == null) || (pt1 == null)|| (pt2 == null)) {    throw new NullPointerException("Colors and points should be non-null");  }  p1=new Point2D.Float((float)pt1.getX(),(float)pt1.getY());  p2=new Point2D.Float((float)pt2.getX(),(float)pt2.getY());  this.color1=color1;  this.color2=color2;}  }
class C{  public long toHours(){  return seconds / SECONDS_PER_HOUR;}  }
class C{  public Detector2[] instantiateDetector2sInPass(BugReporter bugReporter){  Detector2[] detectorList=new Detector2[orderedFactoryList.size()];  int count=0;  for (Iterator<DetectorFactory> j=iterator(); j.hasNext(); ) {    detectorList[count++]=j.next().createDetector2(bugReporter);  }  return detectorList;}  }
class C{  public ScheduledThreadPoolExecutor(int corePoolSize,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,NANOSECONDS,new DelayedWorkQueue(),handler);}  }
class C{  public PartitionPack(ByteProvider byteProvider,Long byteOffset,boolean checkForSucceedingKLVFillItem,@Nullable IMFErrorLogger imfErrorLogger) throws IOException {  this.header=new KLVPacket.Header(byteProvider,byteOffset);  validateHeaderKey();  this.partitionPackType=PartitionPackType.getPartitionPackTypeKey(this.header.getSetOrPackKindKey());  MXFPropertyPopulator.populateField(byteProvider,this,"major_version");  MXFPropertyPopulator.populateField(byteProvider,this,"minor_version");  MXFPropertyPopulator.populateField(byteProvider,this,"KAG_size");  MXFPropertyPopulator.populateField(byteProvider,this,"this_partition");  if (this.this_partition < 0) {    String errorMessage=String.format("Value of this_partition = %d(0x%x) which is outside the supported range 0-0x%x",this.this_partition,this.this_partition,Long.MAX_VALUE);    handleError(imfErrorLogger,errorMessage);  }  MXFPropertyPopulator.populateField(byteProvider,this,"previous_partition");  if (this.previous_partition < 0) {    String errorMessage=String.format("Value of previous_partition = %d(0x%x) which is outside the supported range 0-0x%x",this.previous_partition,this.previous_partition,Long.MAX_VALUE);    handleError(imfErrorLogger,errorMessage);  }  MXFPropertyPopulator.populateField(byteProvider,this,"footer_partition");  if (this.footer_partition < 0) {    String errorMessage=String.format("Value of footer_partition = %d(0x%x) which is outside the supported range 0-0x%x",this.footer_partition,this.footer_partition,Long.MAX_VALUE);    handleError(imfErrorLogger,errorMessage);  }  MXFPropertyPopulator.populateField(byteProvider,this,"header_byte_count");  if (this.header_byte_count < 0) {    String errorMessage=String.format("Value of header_byte_count = %d(0x%x) which is outside the supported range 0-0x%x",this.header_byte_count,this.header_byte_count,Long.MAX_VALUE);    handleError(imfErrorLogger,errorMessage);  }  MXFPropertyPopulator.populateField(byteProvider,this,"index_byte_count");  if (this.index_byte_count < 0) {    String errorMessage=String.format("Value of index_byte_count = %d(0x%x) which is outside the supported range 0-0x%x",this.index_byte_count,this.index_byte_count,Long.MAX_VALUE);    handleError(imfErrorLogger,errorMessage);  }  MXFPropertyPopulator.populateField(byteProvider,this,"index_SID");  MXFPropertyPopulator.populateField(byteProvider,this,"body_offset");  if (this.body_offset < 0) {    String errorMessage=String.format("Value of body_offset = %d(0x%x) which is outside the supported range 0-0x%x",this.body_offset,this.body_offset,Long.MAX_VALUE);    handleError(imfErrorLogger,errorMessage);  }  MXFPropertyPopulator.populateField(byteProvider,this,"body_SID");  MXFPropertyPopulator.populateField(byteProvider,this,"operational_pattern");  CompoundDataTypes.MXFCollections.Header cHeader=new CompoundDataTypes.MXFCollections.Header(byteProvider);  List<UL> cList=new ArrayList<>();  if ((cHeader.getNumberOfElements() != 0) && (cHeader.getSizeOfElement() != KLVPacket.KEY_FIELD_SIZE)) {    throw new MXFException(String.format("Element size = %d in EssenceContainerBatch header is different from expected size = %d",cHeader.getSizeOfElement(),KLVPacket.KEY_FIELD_SIZE));  }  for (long i=0; i < cHeader.getNumberOfElements(); i++) {    cList.add(new UL(byteProvider.getBytes(KLVPacket.KEY_FIELD_SIZE)));  }  this.essenceContainerBatch=new CompoundDataTypes.MXFCollections.MXFCollection<UL>(cHeader,cList,"EssenceContainerBatch");  if (checkForSucceedingKLVFillItem) {    this.nextHeader=new KLVPacket.Header(byteProvider,byteOffset + this.header.getKLSize() + this.header.getVSize());  } else {    this.nextHeader=null;  }}  }
class C{  public boolean isStaticPolyfill(){  return false;}  }
class C{  @Override public void updateCharacterStream(String columnLabel,Reader x) throws SQLException {  updateCharacterStream(columnLabel,x,-1);}  }
class C{  public static OutputStream outputStream(String out) throws IOException {  if (out.equals("-")) {    return ForbiddenOk.systemDotOut();  }  Files.createParentDirs(new File(out));  OutputStream stream=new BufferedOutputStream(new FileOutputStream(out));  if (out.endsWith(".gz")) {    stream=new GZIPOutputStream(stream);  }  return stream;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() == 0) {    int context_AD_Org_ID=Env.getAD_Org_ID(getCtx());    if (context_AD_Org_ID != 0) {      setAD_Org_ID(context_AD_Org_ID);      log.warning("Changed Org to Context=" + context_AD_Org_ID);    }  }  if (getAD_Client_ID() == 0) {    m_processMsg="AD_Client_ID = 0";    return false;  }  if (newRecord && getC_DocType_ID() == 0)   setC_DocType_ID(0);  if (getM_Warehouse_ID() == 0) {    int ii=Env.getContextAsInt(getCtx(),"#M_Warehouse_ID");    if (ii != 0)     setM_Warehouse_ID(ii); else {      throw new FillMandatoryException(COLUMNNAME_M_Warehouse_ID);    }  }  if (newRecord || is_ValueChanged("AD_Org_ID") || is_ValueChanged("M_Warehouse_ID")) {    MWarehouse wh=MWarehouse.get(getCtx(),getM_Warehouse_ID());    if (wh.getAD_Org_ID() != getAD_Org_ID())     log.saveWarning("WarehouseOrgConflict","");  }  if (!newRecord && is_ValueChanged("M_Warehouse_ID")) {    MOrderLine[] lines=getLines(false,null);    for (int i=0; i < lines.length; i++) {      if (!lines[i].canChangeWarehouse())       return false;    }  }  if (getC_BPartner_ID() == 0)   setBPartner(MBPartner.getTemplate(getCtx(),getAD_Client_ID()));  if (getC_BPartner_Location_ID() == 0)   setBPartner(new MBPartner(getCtx(),getC_BPartner_ID(),null));  if (getBill_BPartner_ID() == 0) {    setBill_BPartner_ID(getC_BPartner_ID());    setBill_Location_ID(getC_BPartner_Location_ID());  }  if (getBill_Location_ID() == 0)   setBill_Location_ID(getC_BPartner_Location_ID());  if (getM_PriceList_ID() == 0) {    int ii=DB.getSQLValueEx(null,"SELECT M_PriceList_ID FROM M_PriceList " + "WHERE AD_Client_ID=? AND IsSOPriceList=? AND IsActive=?" + "ORDER BY IsDefault DESC",getAD_Client_ID(),isSOTrx(),true);    if (ii != 0)     setM_PriceList_ID(ii);  }  if (getC_Currency_ID() == 0) {    String sql="SELECT C_Currency_ID FROM M_PriceList WHERE M_PriceList_ID=?";    int ii=DB.getSQLValue(null,sql,getM_PriceList_ID());    if (ii != 0)     setC_Currency_ID(ii); else     setC_Currency_ID(Env.getContextAsInt(getCtx(),"#C_Currency_ID"));  }  if (getSalesRep_ID() == 0) {    int ii=Env.getContextAsInt(getCtx(),"#SalesRep_ID");    if (ii != 0)     setSalesRep_ID(ii);  }  if (getC_DocTypeTarget_ID() == 0)   setC_DocTypeTarget_ID(DocSubTypeSO_Standard);  if (getC_PaymentTerm_ID() == 0) {    int ii=Env.getContextAsInt(getCtx(),"#C_PaymentTerm_ID");    if (ii != 0)     setC_PaymentTerm_ID(ii); else {      String sql="SELECT C_PaymentTerm_ID FROM C_PaymentTerm WHERE AD_Client_ID=? AND IsDefault='Y'";      ii=DB.getSQLValue(null,sql,getAD_Client_ID());      if (ii != 0)       setC_PaymentTerm_ID(ii);    }  }  return true;}  }
class C{  public static <K,V>SynchronizedSetMultimap<K,V> of(MutableSetMultimap<K,V> multimap,Object lock){  if (multimap == null) {    throw new IllegalArgumentException("cannot create a SynchronizedSetMultimap for null");  }  return new SynchronizedSetMultimap<>(multimap,lock);}  }
class C{  public static CommonTransitions createDialogPulsate(){  CommonTransitions c=new CommonTransitions(TYPE_PULSATE_DIALOG);  return c;}  }
class C{  public static final XResourceBundle loadResourceBundle(String className,Locale locale) throws MissingResourceException {  String suffix=getResourceSuffix(locale);  try {    String resourceName=className + suffix;    return (XResourceBundle)ResourceBundle.getBundle(resourceName,locale);  } catch (  MissingResourceException e) {    try {      return (XResourceBundle)ResourceBundle.getBundle(XSLT_RESOURCE,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles.",className,"");    }  }}  }
class C{  private void fillViewData(List<T> originalData){  List<ViewObject<T>> tempList=new ArrayList<ViewObject<T>>();  if (mViewData == null) {    mViewData=new ArrayList<ViewObject<T>>();  }  if (originalData != null) {    if (!mViewData.isEmpty()) {      for (      T data : originalData) {        ViewObject<T> viewObject=contain(data);        if (viewObject != null) {          tempList.add(new ViewObject<T>(data,viewObject.mExtraData));        } else {          tempList.add(new ViewObject<T>(data));        }      }    } else {      for (      T data : originalData) {        tempList.add(new ViewObject<T>(data));      }    }    mViewData.clear();    mViewData.addAll(tempList);  }}  }
class C{  private void loadDataSet(final RemoteRepository rep,final String datasetFile) throws Exception {  final URL datasetUri=TestFederatedQuery.class.getClass().getResource(TEST_RESOURCE_PATH + datasetFile);  if (log.isInfoEnabled()) {    log.info("datasetFile: " + datasetFile);    log.info("datasetUri: " + datasetUri);  }  rep.add(new AddOp(datasetUri.toExternalForm()));}  }
class C{  public boolean isShowOnlyMinMaxEnabled(){  return mShowOnlyMinMax;}  }
class C{  public MySQLConnection(Configuration config,Operations initialOperations){  super(config,FACTORY,initialOperations,null);}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  String command=e.getActionCommand();  if (logger.isLoggable(Level.FINE)) {    logger.fine(command);  }  try {    LayerPane pane=findSelectedPane();    if (pane != null) {      moveLayer(pane,command);    }  } catch (  NullPointerException npe) {  }catch (  ArrayIndexOutOfBoundsException aioobe) {  }}  }
class C{  private boolean ruleR10(Node a,Node c,Graph graph){  List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);  for (  Node b : intoCArrows) {    if (b == a)     continue;    if (!(graph.getEndpoint(c,b) == Endpoint.TAIL))     continue;    for (    Node d : intoCArrows) {      if (d == a || d == b)       continue;      if (!(graph.getEndpoint(d,c) == Endpoint.TAIL))       continue;      List<List<Node>> ucPdPsToB=getUcPdPaths(a,b,graph);      List<List<Node>> ucPdPsToD=getUcPdPaths(a,d,graph);      for (      List<Node> u1 : ucPdPsToB) {        Node m=u1.get(1);        for (        List<Node> u2 : ucPdPsToD) {          Node n=u2.get(1);          if (m.equals(n))           continue;          if (graph.isAdjacentTo(m,n))           continue;          logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R10",graph.getEdge(c,a)));          graph.setEndpoint(c,a,Endpoint.TAIL);          changeFlag=true;          return true;        }      }    }  }  return false;}  }
class C{  int importFolder(Object folderObject,int policy) throws CoreException {  IContainer containerResource;  try {    containerResource=getDestinationContainerFor(folderObject);  } catch (  CoreException e) {    errorTable.add(e.getStatus());    return policy;  }  if (containerResource == null) {    return policy;  }  monitor.subTask(provider.getFullPath(folderObject));  IWorkspace workspace=destinationContainer.getWorkspace();  IPath containerPath=containerResource.getFullPath();  IPath resourcePath=containerPath.append(provider.getLabel(folderObject));  if (resourcePath.equals(containerPath)) {    return policy;  }  if (workspace.getRoot().exists(resourcePath)) {    if (rejectedFiles.contains(resourcePath)) {      return POLICY_SKIP_CHILDREN;    }    IFolder folder=workspace.getRoot().getFolder(resourcePath);    if (createVirtualFolder || createLinks || folder.isVirtual()|| folder.isLinked()) {      folder.delete(true,null);    } else     return POLICY_FORCE_OVERWRITE;  }  try {    if (createVirtualFolder)     workspace.getRoot().getFolder(resourcePath).create(IResource.VIRTUAL,true,null); else     if (createLinks) {      IFolder newFolder=workspace.getRoot().getFolder(resourcePath);      newFolder.createLink(createRelativePath(new Path(provider.getFullPath(folderObject)),newFolder),0,null);      policy=POLICY_SKIP_CHILDREN;    } else     workspace.getRoot().getFolder(resourcePath).create(false,true,null);  } catch (  CoreException e) {    errorTable.add(e.getStatus());  }  return policy;}  }
class C{  String name(int iAttribute){  return m_instances.attribute(iAttribute).name();}  }
class C{  @Override public boolean addAll(int index,Collection<? extends E> that){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public IdeaJHelpContentViewer(TextHelpModel model){  super(model);}  }
class C{  public GetRepositoriesRequest repositories(String[] repositories){  this.repositories=repositories;  return this;}  }
class C{  public T addScriptField(String name,Script script){  sourceBuilder().scriptField(name,script);  return (T)this;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @Override public boolean hasShield(){  for (  Mounted m : getMisc()) {    boolean isShield=(m.getType() instanceof MiscType) && ((MiscType)m.getType()).isShield();    if (((m.getLocation() == Mech.LOC_LARM) || (m.getLocation() == Mech.LOC_RARM)) && isShield && !m.isInoperable()&& (getInternal(m.getLocation()) > 0)) {      for (int slot=0; slot < this.getNumberOfCriticals(m.getLocation()); slot++) {        CriticalSlot cs=getCritical(m.getLocation(),slot);        if ((cs != null) && (cs.getType() == CriticalSlot.TYPE_EQUIPMENT) && cs.getMount().equals(m)&& !cs.isDestroyed()&& !cs.isMissing()) {          return true;        }      }    }  }  return false;}  }
class C{  protected final void sendMessageAtFrontOfQueue(Message msg){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageAtFrontOfQueue(msg);}  }
class C{  public static void sign(File jarFile,File signedJarFile,PrivateKey privateKey,X509Certificate[] certificateChain,SignatureType signatureType,String signatureName,String signer,DigestType digestType,String tsaUrl,Provider provider) throws IOException, CryptoException {  JarFile jar=null;  JarOutputStream jos=null;  try {    signatureName=convertSignatureName(signatureName);    jar=new JarFile(jarFile);    StringBuilder sbManifest=new StringBuilder();    String manifestMainAttrs=getManifestMainAttrs(jar,signer);    sbManifest.append(manifestMainAttrs);    String entryManifestAttrs=getManifestEntriesAttrs(jar);    if (entryManifestAttrs.length() > 0) {      sbManifest.append(entryManifestAttrs);      sbManifest.append(CRLF);    }    StringBuilder sbSf=new StringBuilder();    for (Enumeration<?> jarEntries=jar.entries(); jarEntries.hasMoreElements(); ) {      JarEntry jarEntry=(JarEntry)jarEntries.nextElement();      if (!jarEntry.isDirectory()) {        if (!ignoreJarEntry(jarEntry)) {          String manifestEntry=getDigestManifestAttrs(jar,jarEntry,digestType);          sbManifest.append(manifestEntry);          byte[] mdSf=DigestUtil.getMessageDigest(manifestEntry.getBytes(),digestType);          byte[] mdSf64=Base64.encode(mdSf);          String mdSf64Str=new String(mdSf64);          sbSf.append(createAttributeText(NAME_ATTR,jarEntry.getName()));          sbSf.append(CRLF);          sbSf.append(createAttributeText(MessageFormat.format(DIGEST_ATTR,digestType.jce()),mdSf64Str));          sbSf.append(CRLF);          sbSf.append(CRLF);        }      }    }    byte[] manifest=sbManifest.toString().getBytes();    byte[] digestMf=DigestUtil.getMessageDigest(manifest,digestType);    String digestMfStr=new String(Base64.encode(digestMf));    byte[] mainfestMainAttrs=manifestMainAttrs.getBytes();    byte[] digestMfMainAttrs=DigestUtil.getMessageDigest(mainfestMainAttrs,digestType);    String digestMfMainAttrsStr=new String(Base64.encode(digestMfMainAttrs));    sbSf.insert(0,CRLF);    sbSf.insert(0,CRLF);    sbSf.insert(0,createAttributeText(MessageFormat.format(DIGEST_MANIFEST_ATTR,digestType.jce()),digestMfStr));    sbSf.insert(0,CRLF);    sbSf.insert(0,createAttributeText(MessageFormat.format(DIGEST_MANIFEST_MAIN_ATTRIBUTES_ATTR,digestType.jce()),digestMfMainAttrsStr));    sbSf.insert(0,CRLF);    sbSf.insert(0,createAttributeText(CREATED_BY_ATTR,signer));    sbSf.insert(0,CRLF);    sbSf.insert(0,createAttributeText(SIGNATURE_VERSION_ATTR,SIGNATURE_VERSION));    byte[] sf=sbSf.toString().getBytes();    jos=new JarOutputStream(new FileOutputStream(signedJarFile));    writeJarEntries(jar,jos,signatureName);    writeManifest(manifest,jos);    writeSignatureFile(sf,signatureName,jos);    byte[] sigBlock=createSignatureBlock(sf,privateKey,certificateChain,signatureType,tsaUrl,provider);    writeSignatureBlock(sigBlock,signatureType,signatureName,jos);  }  finally {    IOUtils.closeQuietly(jar);    IOUtils.closeQuietly(jos);  }}  }
class C{  private void putParameterIntoS3(String s3BucketName,String s3ObjectKey,Parameter parameter){  String content=parameter.getName() + "=" + parameter.getValue();  byte[] bytes=content.getBytes();  ByteArrayInputStream inputStream=new ByteArrayInputStream(bytes);  ObjectMetadata metadata=new ObjectMetadata();  metadata.setContentLength(content.length());  PutObjectRequest putObjectRequest=new PutObjectRequest(s3BucketName,s3ObjectKey,inputStream,metadata);  s3Operations.putObject(putObjectRequest,null);}  }
class C{  public NotificationChain basicSetLeft(Expression newLeft,NotificationChain msgs){  Expression oldLeft=left;  left=newLeft;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.EXPRESSION__LEFT,oldLeft,newLeft);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public <X>X session(Class<X> type){  String address=services().address(type);  if (address.startsWith("/")) {    address="session://" + address;  }  return sessionImpl(address + "/").as(type);}  }
class C{  public int compareTo(ByteArrayWritable that){  return WritableComparator.compareBytes(this.data,this.offset,this.length,that.data,that.offset,that.length);}  }
class C{  public CScrollPane(Component view){  this(view,VERTICAL_SCROLLBAR_AS_NEEDED,HORIZONTAL_SCROLLBAR_AS_NEEDED);}  }
class C{  public Annotation(int type,ConstPool cp){  pool=cp;  typeIndex=type;  members=null;}  }
class C{  private void resetNextProxy(HttpUrl url,Proxy proxy){  if (proxy != null) {    proxies=Collections.singletonList(proxy);  } else {    proxies=new ArrayList<>();    List<Proxy> selectedProxies=address.proxySelector().select(url.uri());    if (selectedProxies != null)     proxies.addAll(selectedProxies);    proxies.removeAll(Collections.singleton(Proxy.NO_PROXY));    proxies.add(Proxy.NO_PROXY);  }  nextProxyIndex=0;}  }
class C{  @Entrypoint public static void modifyCheck(Object object){  if (Plan.gcInProgressProper()) {    ObjectReference ref=ObjectReference.fromObject(object);    if (Space.isMovable(ref)) {      VM.sysWriteln("GC modifying a potentially moving object via Java (i.e. not magic)");      VM.sysWriteln("  obj = ",ref);      RVMType t=Magic.getObjectType(object);      VM.sysWrite(" type = ");      VM.sysWriteln(t.getDescriptor());      VM.sysFail("GC modifying a potentially moving object via Java (i.e. not magic)");    }  }}  }
class C{  public static RuntimeException initCause(RuntimeException ex,Throwable cause){  if (Throwable_initCause != null) {    Object[] args={cause};    try {      Throwable_initCause.invoke(ex,args);    } catch (    Exception e) {    }  }  return ex;}  }
class C{  @Override public byte[] readByteArray(String filePath,int length){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,length);  return byteBffer.array();}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public Partial withFieldAddWrapped(DurationFieldType fieldType,int amount){  int index=indexOfSupported(fieldType);  if (amount == 0) {    return this;  }  int[] newValues=getValues();  newValues=getField(index).addWrapPartial(this,index,newValues,amount);  return new Partial(this,newValues);}  }
class C{  protected final Class<?> findSystemClass(String className) throws ClassNotFoundException {  return Class.forName(className,false,getSystemClassLoader());}  }
class C{  public DragSortController(DragSortListView dslv,int dragHandleId,int dragInitMode,int removeMode,int clickRemoveId,int flingHandleId){  super(dslv);  mDslv=dslv;  mDetector=new GestureDetector(dslv.getContext(),this);  mFlingRemoveDetector=new GestureDetector(dslv.getContext(),mFlingRemoveListener);  mFlingRemoveDetector.setIsLongpressEnabled(false);  mTouchSlop=ViewConfiguration.get(dslv.getContext()).getScaledTouchSlop();  mDragHandleId=dragHandleId;  mClickRemoveId=clickRemoveId;  mFlingHandleId=flingHandleId;  setRemoveMode(removeMode);  setDragInitMode(dragInitMode);}  }
class C{  public static Number mod(Number left,Number right){  return NumberMath.mod(left,right);}  }
class C{  ItemInputStream(){  findSeparator();}  }
class C{  public void startObject(int numfields){  notNested();  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];  vtable_in_use=numfields;  Arrays.fill(vtable,0,vtable_in_use,0);  nested=true;  object_start=offset();}  }
class C{  public final CharBuffer append(char ch){  int length=length();  ensureCapacity(length + 1);  buffer()[length]=ch;  length(length + 1);  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public NodeFinder(ASTNode root,int start,int length){  NodeFinderVisitor nodeFinderVisitor=new NodeFinderVisitor(start,length);  root.accept(nodeFinderVisitor);  this.fCoveredNode=nodeFinderVisitor.getCoveredNode();  this.fCoveringNode=nodeFinderVisitor.getCoveringNode();}  }
class C{  private static List<Method> findAllMethodsInHierarchy(Class<?> clazz,MethodSortOrder sortOrder){  Preconditions.notNull(clazz,"Class must not be null");  Preconditions.notNull(sortOrder,"MethodSortOrder must not be null");  List<Method> localMethods=Arrays.asList(clazz.getDeclaredMethods());  List<Method> superclassMethods=getSuperclassMethods(clazz,sortOrder).stream().filter(null).collect(toList());  List<Method> interfaceMethods=getInterfaceMethods(clazz,sortOrder).stream().filter(null).collect(toList());  List<Method> methods=new ArrayList<>();  if (sortOrder == MethodSortOrder.HierarchyDown) {    methods.addAll(superclassMethods);    methods.addAll(interfaceMethods);  }  methods.addAll(localMethods);  if (sortOrder == MethodSortOrder.HierarchyUp) {    methods.addAll(interfaceMethods);    methods.addAll(superclassMethods);  }  return methods;}  }
class C{  public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort == OBJECT || sort == ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  protected void addAllGrouping(String child,String parent,String streamId){  TopologyAPI.InputStream.Builder builder=TopologyAPI.InputStream.newBuilder();  builder.setStream(TopologyAPI.StreamId.newBuilder().setId(streamId).setComponentName(parent));  builder.setGtype(TopologyAPI.Grouping.ALL);  bolts.get(child).addInputs(builder);}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  private boolean checkCarForDestinationAndTrack(Car car,RouteLocation rl,int routeIndex) throws BuildFailedException {  if (car.getDestination() == null) {    return false;  }  addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarHasAssignedDest"),new Object[]{car.toString(),(car.getDestinationName() + ", " + car.getDestinationTrackName())}));  RouteLocation rld=_train.getRoute().getLastLocationByName(car.getDestinationName());  if (rld == null) {    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildExcludeCarDestNotPartRoute"),new Object[]{car.toString(),car.getDestinationName(),_train.getRoute().getName()}));    return true;  }  if (car.getRouteLocation() != null) {    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildCarAlreadyAssigned"),new Object[]{car.toString()}));  }  int locCount=0;  for (int k=routeIndex; k < _routeList.size(); k++) {    rld=_routeList.get(k);    if (checkForLaterPickUp(rl,rld,car)) {      break;    }    if (!rld.getName().equals(car.getDestinationName())) {      continue;    }    if (!_train.isAllowThroughCarsEnabled() && !_train.isLocalSwitcher() && !car.isCaboose()&& !car.hasFred()&& !car.isPassenger()&& splitString(car.getLocationName()).equals(splitString(_departLocation.getName()))&& splitString(car.getDestinationName()).equals(splitString(_terminateLocation.getName()))&& !splitString(_departLocation.getName()).equals(splitString(_terminateLocation.getName()))) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarHasDestination"),new Object[]{car.toString(),_departLocation.getName(),_terminateLocation.getName()}));      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildThroughTrafficNotAllow"),new Object[]{_departLocation.getName(),_terminateLocation.getName()}));      addLine(_buildReport,FIVE,BLANK_LINE);      return true;    }    locCount++;    log.debug("Car ({}) found a destination in train's route",car.toString());    if (!rld.isDropAllowed()) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildRouteNoDropsStop"),new Object[]{_train.getRoute().getName(),rld.getName(),rld.getId(),locCount}));      continue;    }    if (rld.getCarMoves() >= rld.getMaxCarMoves()) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildNoAvailableMovesStop"),new Object[]{_train.getRoute().getName(),rld.getId(),rld.getName(),locCount}));      continue;    }    if (!checkTrainLength(car,rl,rld)) {      continue;    }    if (car.getDestinationTrack() == null) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarDoesNotHaveDest"),new Object[]{car.toString()}));      if (rld == _train.getTrainTerminatesRouteLocation() && _terminateStageTrack != null) {        String status=car.testDestination(car.getDestination(),_terminateStageTrack);        if (status.equals(Track.OKAY)) {          addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarAssignedToStaging"),new Object[]{car.toString(),_terminateStageTrack.getName()}));          addCarToTrain(car,rl,rld,_terminateStageTrack);          return true;        } else {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarBecause"),new Object[]{car.toString(),_terminateStageTrack.getName(),status,_terminateStageTrack.getTrackTypeName()}));          continue;        }      } else {        List<Track> tracks=car.getDestination().getTrackByMovesList(null);        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildSearchForTrack"),new Object[]{tracks.size(),car.getDestinationName(),car.toString(),car.getLoadName()}));        for (        Track testTrack : tracks) {          if (testTrack == car.getTrack()) {            addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarSameTrack"),new Object[]{car.toString(),testTrack.getName()}));            continue;          }          if (!checkDropTrainDirection(car,rld,testTrack)) {            continue;          }          if (!checkTrainCanDrop(car,testTrack)) {            continue;          }          String status=car.testDestination(car.getDestination(),testTrack);          if (!status.equals(Track.OKAY) && status.startsWith(Track.LENGTH) && testTrack.checkSchedule(car).equals(Track.OKAY)&& testTrack.getTrackType().equals(Track.SPUR)&& testTrack.getAlternateTrack() != null) {            addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrackFullHasAlternate"),new Object[]{testTrack.getLocation().getName(),testTrack.getName(),testTrack.getAlternateTrack().getName()}));            String altStatus=car.testDestination(car.getDestination(),testTrack.getAlternateTrack());            if (altStatus.equals(Track.OKAY) || (altStatus.contains(Track.CUSTOM) && altStatus.contains(Track.LOAD))) {              addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildUseAlternateTrack"),new Object[]{car.toString(),testTrack.getAlternateTrack().getName()}));              car.setFinalDestination(car.getDestination());              car.setFinalDestinationTrack(testTrack);              car.setNextLoadName(car.getLoadName());              addCarToTrain(car,rl,rld,testTrack.getAlternateTrack());              testTrack.setMoves(testTrack.getMoves() + 1);              return true;            } else {              addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarBecause"),new Object[]{car.toString(),testTrack.getAlternateTrack().getName(),altStatus,testTrack.getTrackTypeName()}));            }          }          if (!status.equals(Track.OKAY)) {            addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarBecause"),new Object[]{car.toString(),testTrack.getName(),status,testTrack.getTrackTypeName()}));            continue;          }          addCarToTrain(car,rl,rld,testTrack);          return true;        }      }    } else {      log.debug("Car ({}) has a destination track ({})",car.toString(),car.getDestinationTrack().getName());      if (rld.equals(_train.getTrainTerminatesRouteLocation()) && _terminateStageTrack != null && _terminateStageTrack != car.getDestinationTrack()) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarDestinationStaging"),new Object[]{car.toString(),car.getDestinationName(),car.getDestinationTrackName()}));        car.setDestination(_terminateStageTrack.getLocation(),_terminateStageTrack);      }      if (!rld.equals(_train.getTrainTerminatesRouteLocation()) || _terminateStageTrack == null || _terminateStageTrack == car.getDestinationTrack()) {        if (checkDropTrainDirection(car,rld,car.getDestinationTrack())) {          if (checkTrainCanDrop(car,car.getDestinationTrack())) {            String status=car.testDestination(car.getDestination(),car.getDestinationTrack());            if (status.equals(Track.OKAY) && checkDropTrainDirection(car,rld,car.getDestinationTrack())) {              addCarToTrain(car,rl,rld,car.getDestinationTrack());              return true;            } else {              addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarBecause"),new Object[]{car.toString(),car.getDestinationTrackName(),status,car.getDestinationTrack().getTrackTypeName()}));            }          }        }      } else {        throw new BuildFailedException(MessageFormat.format(Bundle.getMessage("buildCarDestinationStaging"),new Object[]{car.toString(),car.getDestinationName(),car.getDestinationTrackName()}));      }    }    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCanNotDropCar"),new Object[]{car.toString(),car.getDestinationName(),rld.getId(),locCount}));    if (car.getDestinationTrack() == null) {      log.debug("Could not find a destination track for location ({})",car.getDestinationName());    }  }  log.debug("car ({}) not added to train",car.toString());  addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildDestinationNotReachable"),new Object[]{car.getDestinationName(),rl.getName(),rl.getId()}));  if (car.getDestinationTrack() != null) {    Track destTrack=car.getDestinationTrack();    if (destTrack.getSchedule() != null && destTrack.getScheduleMode() == Track.SEQUENTIAL) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildPickupCancelled"),new Object[]{destTrack.getLocation().getName(),destTrack.getName()}));    }  }  car.setFinalDestination(car.getPreviousFinalDestination());  car.setFinalDestinationTrack(car.getPreviousFinalDestinationTrack());  car.setDestination(null,null);  car.updateKernel();  checkCarOrder(car);  return true;}  }
class C{  public SE8cSignalHead(NamedBeanHandle<Turnout> lowTO,NamedBeanHandle<Turnout> highTO,String userName){  super(makeSystemName(lowTO,highTO),userName);  this.lowTurnout=lowTO;  this.highTurnout=highTO;  systemName=makeSystemName(lowTO,highTO);  init();  addListeners();}  }
class C{  public static boolean isUrlString(String string){  if (string == null) {    return false;  }  try {    new URL(string);    return true;  } catch (  MalformedURLException ignored) {    return false;  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     m_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("PA_ReportLineSet_ID"))     m_PA_ReportLineSet_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeleteOldImported"))     m_deleteOldImported="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (m_DateValue == null)   m_DateValue=new Timestamp(System.currentTimeMillis());}  }
class C{  Date toDate(Calendar calendar){  return calendar.getTime();}  }
class C{  protected Pair<Long,DLSN> readLastTxIdInLedger(LogSegmentMetadata l) throws IOException {  LogRecordWithDLSN record=recoverLastRecordInLedger(l,false,false,true);  if (null == record) {    return Pair.of(DistributedLogConstants.EMPTY_LOGSEGMENT_TX_ID,DLSN.InvalidDLSN);  } else {    return Pair.of(record.getTransactionId(),record.getDlsn());  }}  }
class C{  private void appendSelection(){}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NODE;default :return null;}}  }
class C{  public BugObject(boolean deleted){  this.deleted=deleted;}  }
class C{  Expression(final String str){  original=str;}  }
class C{  private void createDenverStraight(final int HOME_END_TIME){  int currentId=1;  int duration=(int)(0.5 * 3600);  final int DEFAULT_CARS_PER_HOUR_PER_LANE=500;  currentId=addCommodity("125","127",HOME_END_TIME,duration,4 * DEFAULT_CARS_PER_HOUR_PER_LANE,"7 8 9 10 11 12",currentId);  currentId=addCommodity("133","135",HOME_END_TIME,duration,4 * DEFAULT_CARS_PER_HOUR_PER_LANE,"19 20 21 22 23 24",currentId);  currentId=addCommodity("124","122",HOME_END_TIME,duration,2 * DEFAULT_CARS_PER_HOUR_PER_LANE,"6 5 4 3 2 1",currentId);  currentId=addCommodity("132","130",HOME_END_TIME,duration,3 * DEFAULT_CARS_PER_HOUR_PER_LANE,"18 17 16 15 14 13",currentId);  currentId=addCommodity("144","142",HOME_END_TIME,duration,3 * DEFAULT_CARS_PER_HOUR_PER_LANE,"36 35 34 33 32 31",currentId);  currentId=addCommodity("137","139",HOME_END_TIME,duration,1 * DEFAULT_CARS_PER_HOUR_PER_LANE,"25 26 27 28 29 30",currentId);  currentId=addCommodity("140","138",HOME_END_TIME,duration,1 * DEFAULT_CARS_PER_HOUR_PER_LANE,"30 29 28 27 26 25",currentId);  currentId=addCommodity("145","147",HOME_END_TIME,duration,2 * DEFAULT_CARS_PER_HOUR_PER_LANE,"1 7 13 19 25 31",currentId);  currentId=addCommodity("153","155",HOME_END_TIME,duration,3 * DEFAULT_CARS_PER_HOUR_PER_LANE,"3 9 15 21 27 33",currentId);  currentId=addCommodity("161","163",HOME_END_TIME,duration,3 * DEFAULT_CARS_PER_HOUR_PER_LANE,"5 11 17 23 29 35",currentId);  currentId=addCommodity("152","150",HOME_END_TIME,duration,3 * DEFAULT_CARS_PER_HOUR_PER_LANE,"32 26 20 14 8 2",currentId);  currentId=addCommodity("160","158",HOME_END_TIME,duration,3 * DEFAULT_CARS_PER_HOUR_PER_LANE,"34 28 22 16 10 4",currentId);  currentId=addCommodity("168","166",HOME_END_TIME,duration,2 * DEFAULT_CARS_PER_HOUR_PER_LANE,"36 30 24 18 12 6",currentId);}  }
class C{  private boolean run(){  try {    if (processSockets) {      processSockets();    } else     if (processFiles) {      processFiles();    } else {      processOnce();    }    return true;  } catch (  CompilationFailedException e) {    System.err.println(e);    return false;  }catch (  Throwable e) {    if (e instanceof InvokerInvocationException) {      InvokerInvocationException iie=(InvokerInvocationException)e;      e=iie.getCause();    }    System.err.println("Caught: " + e);    if (!debug) {      StackTraceUtils.deepSanitize(e);    }    e.printStackTrace();    return false;  }}  }
class C{  public static ColorMatrixRable buildLuminanceToAlpha(){  ColorMatrixRable8Bit filter=new ColorMatrixRable8Bit();  filter.type=TYPE_LUMINANCE_TO_ALPHA;  filter.matrix=MATRIX_LUMINANCE_TO_ALPHA;  return filter;}  }
class C{  public ThreadSafeClientConnManager(HttpParams params,SchemeRegistry schreg){  if (params == null) {    throw new IllegalArgumentException("HTTP parameters may not be null");  }  this.schemeRegistry=schreg;  this.connOperator=createConnectionOperator(schreg);  this.connectionPool=createConnectionPool(params);}  }
class C{  public static <T>void copy(List<? super T> dest,List<? extends T> src){  int srcSize=src.size();  if (srcSize > dest.size())   throw new IndexOutOfBoundsException("Source does not fit in dest");  if (srcSize < COPY_THRESHOLD || (src instanceof RandomAccess && dest instanceof RandomAccess)) {    for (int i=0; i < srcSize; i++)     dest.set(i,src.get(i));  } else {    ListIterator<? super T> di=dest.listIterator();    ListIterator<? extends T> si=src.listIterator();    for (int i=0; i < srcSize; i++) {      di.next();      di.set(si.next());    }  }}  }
class C{  protected static EventBean addProperty(EventBean originalEvent,String[] propertyNames,Object propertyValues,EventType targetEventType,EventAdapterService eventAdapterService){  Map<String,Object> values=new HashMap<String,Object>();  if (propertyValues instanceof MultiKeyUntyped) {    MultiKeyUntyped props=(MultiKeyUntyped)propertyValues;    Object[] propertyValuesArr=props.getKeys();    for (int i=0; i < propertyNames.length; i++) {      values.put(propertyNames[i],propertyValuesArr[i]);    }  } else {    values.put(propertyNames[0],propertyValues);  }  return eventAdapterService.adapterForTypedWrapper(originalEvent,values,targetEventType);}  }
class C{  @Override public void run(){  while (!this.stopUpdates) {    try {      if (!this.updateData()) {        this.stale++;      } else {        this.stale=0;      }    } catch (    Exception e) {      if (LOGGER.infoEnabled()) {        LOGGER.info("Exception Occurred while updating cluster data : " + e.getMessage());      }    }    try {      Thread.sleep(POLL_INTERVAL);    } catch (    InterruptedException e) {      if (LOGGER.infoEnabled()) {        LOGGER.info("InterruptedException Occurred : " + e.getMessage());      }    }  }  if (LOGGER.infoEnabled()) {    LOGGER.info(resourceBundle.getString("LOG_MSG_STOP_THREAD_UPDATES") + " :: " + this.serverName+ ":"+ this.port);  }}  }
class C{  public void connect(boolean autoReconnect,OnConnectionChangedListener connectionCallback,OnBondingChangedListener bondingCallback){  mPeripheral.connect(autoReconnect,connectionCallback,bondingCallback);}  }
class C{  protected void removeHandle(final ActiveMQRASession handle){  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("removeHandle(" + handle + ")");  }  handles.remove(handle);}  }
class C{  @SuppressWarnings({"unchecked"}) private static <T>String toStringImpl(Class<T> cls,SB buf,T obj,Object[] addNames,Object[] addVals,int addLen){  assert cls != null;  assert buf != null;  assert obj != null;  assert addNames != null;  assert addVals != null;  assert addNames.length == addVals.length;  assert addLen <= addNames.length;  try {    GridToStringClassDescriptor cd=getClassDescriptor(cls);    assert cd != null;    buf.setLength(0);    buf.a(cd.getSimpleClassName()).a(" [");    boolean first=true;    for (    GridToStringFieldDescriptor fd : cd.getFields()) {      if (!first)       buf.a(", "); else       first=false;      String name=fd.getName();      Field field=cls.getDeclaredField(name);      field.setAccessible(true);      buf.a(name).a('=');      if (field.getType().isArray()) {        if (field.getType().equals(byte[].class))         buf.a(Arrays.toString((byte[])field.get(obj))); else         if (field.getType().equals(boolean[].class))         buf.a(Arrays.toString((boolean[])field.get(obj))); else         if (field.getType().equals(short[].class))         buf.a(Arrays.toString((short[])field.get(obj))); else         if (field.getType().equals(int[].class))         buf.a(Arrays.toString((int[])field.get(obj))); else         if (field.getType().equals(long[].class))         buf.a(Arrays.toString((long[])field.get(obj))); else         if (field.getType().equals(float[].class))         buf.a(Arrays.toString((float[])field.get(obj))); else         if (field.getType().equals(double[].class))         buf.a(Arrays.toString((double[])field.get(obj))); else         if (field.getType().equals(char[].class))         buf.a(Arrays.toString((char[])field.get(obj))); else         buf.a(Arrays.toString((Object[])field.get(obj)));      } else {        Object val=field.get(obj);        if (val instanceof Collection && ((Collection)val).size() > MAX_COL_SIZE)         val=F.retain((Collection)val,true,MAX_COL_SIZE); else         if (val instanceof Map && ((Map)val).size() > MAX_COL_SIZE) {          Map tmp=U.newHashMap(MAX_COL_SIZE);          int cntr=0;          for (          Object o : ((Map)val).entrySet()) {            Map.Entry e=(Map.Entry)o;            tmp.put(e.getKey(),e.getValue());            if (++cntr >= MAX_COL_SIZE)             break;          }          val=tmp;        }        buf.a(val);      }    }    if (addLen > 0)     for (int i=0; i < addLen; i++) {      if (!first)       buf.a(", "); else       first=false;      buf.a(addNames[i]).a('=').a(addVals[i]);    }    buf.a(']');    return buf.toString();  } catch (  Exception e) {    rwLock.writeLock().lock();    try {      classCache.remove(cls.getName() + System.identityHashCode(cls.getClassLoader()));    }  finally {      rwLock.writeLock().unlock();    }    throw new IgniteException(e);  }}  }
class C{  public void compactBuffer(){  if (offset != buffer.length) {    byte[] newBuffer=new byte[offset];    System.arraycopy(buffer,0,newBuffer,0,offset);    buffer=newBuffer;  }}  }
class C{  private File[] searchAllFiles(File file){  ArrayList<File> file_array=new ArrayList<File>();  if (file.isDirectory()) {    for (    File temp : file.listFiles()) {      Collections.addAll(file_array,searchAllFiles(temp));    }  } else {    if (file.getAbsolutePath().endsWith("-penn.xml"))     file_array.add(file);  }  File[] result=new File[file_array.size()];  file_array.toArray(result);  return result;}  }
class C{  public int saveAnswer(IAnswerData answer,FormIndex index,boolean evaluateConstraints) throws JavaRosaException {  FormController formController=Collect.getInstance().getFormController();  if (evaluateConstraints) {    return formController.answerQuestion(index,answer);  } else {    formController.saveAnswer(index,answer);    return FormEntryController.ANSWER_OK;  }}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  @Provides @Config("rdeUploadUrl") public static URI provideRdeUploadUrl(RegistryEnvironment environment){switch (environment) {case PRODUCTION:    return URI.create("sftp://GoogleTLD@sftpipm2.ironmountain.com/Outbox");default :  return URI.create("sftp://google@ppftpipm.ironmountain.com/Outbox");}}  }
class C{  public void query(WebSocket session,HeadersAmp headers,String from,long qid,String address,String methodName,PodRef podCaller,Object... args) throws IOException {}  }
class C{  @Override protected void flush() throws IOException {  zipOutputStream.flush();  zipOutputStream.finish();  finished=true;  super.flush();}  }
class C{  private static String decodeBase900toBase10(int[] codewords,int count) throws FormatException {  BigInteger result=BigInteger.ZERO;  for (int i=0; i < count; i++) {    result=result.add(EXP900[count - i - 1].multiply(BigInteger.valueOf(codewords[i])));  }  String resultString=result.toString();  if (resultString.charAt(0) != '1') {    throw FormatException.getFormatInstance();  }  return resultString.substring(1);}  }
class C{  HasColumnView(Document parent,Map<String,Object> data,Class<? extends Document> mainInterface){  super(parent,data,mainInterface);}  }
class C{  public void showCertificateSelectedEntry(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStore keyStore=history.getCurrentState().getKeyStore();    String alias=kseFrame.getSelectedEntryAlias();    X509Certificate[] certs=new X509Certificate[1];    certs[0]=X509CertUtil.convertCertificate(keyStore.getCertificate(alias));    DViewCertificate dViewCertificate=new DViewCertificate(frame,MessageFormat.format(res.getString("TrustedCertificateDetailsAction.CertDetailsEntry.Title"),alias),certs,kseFrame,DViewCertificate.EXPORT);    dViewCertificate.setLocationRelativeTo(frame);    dViewCertificate.setVisible(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  private int viewIndexForColumn(TableColumn aColumn){  TableColumnModel cm=table.getColumnModel();  for (int column=0; column < cm.getColumnCount(); column++) {    if (cm.getColumn(column) == aColumn) {      return column;    }  }  return -1;}  }
class C{  private void internalInit() throws Exception {  logger=Category.getInstance("");  logger.setAdditivity(false);  logger.setPriority(Priority.DEBUG);  String pattern=rsvc.getString(RuntimeConstants.LOGSYSTEM_LOG4J_PATTERN);  if (pattern == null || pattern.length() == 0) {    pattern="%d - %m%n";  }  layout=new PatternLayout(pattern);  configureFile();  configureRemote();  configureSyslog();  configureEmail();}  }
class C{  public static int divide(int dividend,int divisor){  return (int)(toLong(dividend) / toLong(divisor));}  }
class C{  public MovAvgBuilder window(int window){  this.window=window;  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attr;  Element element;  Element ownerElement;  String ownerElementName;  NodeList elementList;  NamedNodeMap attributes;  String nullNS=null;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=(Element)elementList.item(1);  attributes=element.getAttributes();  attr=(Attr)attributes.getNamedItemNS(nullNS,"defaultAttr");  ownerElement=attr.getOwnerElement();  ownerElementName=ownerElement.getNodeName();  assertEquals("attrgetownerelement01","emp:employee",ownerElementName);}  }
class C{  private void updateCustomGroupForRow(int row){  int startEndMargin=row == ROW_MAIN ? mMargin : 0;  mCustomGroup.setHorizontalMode(mMargin,startEndMargin,startEndMargin);  mCustomGroup.gravity=Gravity.START;  if (row == ROW_OTHER && mCustomGroup.views.length == 2) {    int extraWidth=availableWidth() - getWidthWithMargins(mCustomGroup);    if (extraWidth < 0) {      mCustomGroup.setVerticalMode(0,mMargin);      mCustomGroup.gravity=Gravity.FILL_HORIZONTAL;    } else {      View view0=mCustomGroup.views[0];      View view1=mCustomGroup.views[1];      int extraWidth0=extraWidth / 2;      int extraWidth1=extraWidth - extraWidth0;      measureChildWithFixedWidth(view0,view0.getMeasuredWidth() + extraWidth0);      measureChildWithFixedWidth(view1,view1.getMeasuredWidth() + extraWidth1);    }  }  if (row == ROW_OTHER && mCustomGroup.views.length == 1) {    mCustomGroup.gravity=Gravity.FILL_HORIZONTAL;  }}  }
class C{  public static boolean remove(String name,String key){  SharedPreferences.Editor editor=getSharedPreferences(name).edit();  editor.remove(key);  return editor.commit();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void drawRangeGridlines(Graphics2D g2,Rectangle2D dataArea,List ticks){  if (!isRangeGridlinesVisible()) {    return;  }  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  Iterator iterator=ticks.iterator();  while (iterator.hasNext()) {    ValueTick tick=(ValueTick)iterator.next();    double v=this.rangeAxis.valueToJava2D(tick.getValue(),dataArea,RectangleEdge.LEFT);    Line2D line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);    g2.setPaint(getRangeGridlinePaint());    g2.setStroke(getRangeGridlineStroke());    g2.draw(line);  }  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.917 -0500",hash_original_method="16D562DE8E79921485CB55DC774779E3",hash_generated_method="082DE4EAFD44B15BE8DF996B0E89B7B5") public boolean matchesLocation(String plmn,int lac,int cid){switch (mHeader.geographicalScope) {case SmsCbMessage.GEOGRAPHICAL_SCOPE_CELL_WIDE:case SmsCbMessage.GEOGRAPHICAL_SCOPE_CELL_WIDE_IMMEDIATE:    if (mCid != cid) {      return false;    }case SmsCbMessage.GEOGRAPHICAL_SCOPE_LA_WIDE:  if (mLac != lac) {    return false;  }case SmsCbMessage.GEOGRAPHICAL_SCOPE_PLMN_WIDE:return mPlmn != null && mPlmn.equals(plmn);}return false;}  }
class C{  public void deleteRepository(final String namespace) throws Exception {  deleteRepository(namespace,UUID.randomUUID());}  }
class C{  public boolean isStateActive(State state){switch (state) {case mainRegion_State1:    return stateVector[0] == State.mainRegion_State1;case mainRegion_State2:  return stateVector[0].ordinal() >= State.mainRegion_State2.ordinal() && stateVector[0].ordinal() <= State.mainRegion_State2__region0_State5.ordinal();case mainRegion_State2__region0_State3:return stateVector[0] == State.mainRegion_State2__region0_State3;case mainRegion_State2__region0_State4:return stateVector[0].ordinal() >= State.mainRegion_State2__region0_State4.ordinal() && stateVector[0].ordinal() <= State.mainRegion_State2__region0_State4__region0_State7__region0_State9.ordinal();case mainRegion_State2__region0_State4__region0_State6:return stateVector[0] == State.mainRegion_State2__region0_State4__region0_State6;case mainRegion_State2__region0_State4__region0_State7:return stateVector[0].ordinal() >= State.mainRegion_State2__region0_State4__region0_State7.ordinal() && stateVector[0].ordinal() <= State.mainRegion_State2__region0_State4__region0_State7__region0_State9.ordinal();case mainRegion_State2__region0_State4__region0_State7__region0_State8:return stateVector[0] == State.mainRegion_State2__region0_State4__region0_State7__region0_State8;case mainRegion_State2__region0_State4__region0_State7__region0_State9:return stateVector[0] == State.mainRegion_State2__region0_State4__region0_State7__region0_State9;case mainRegion_State2__region0_State5:return stateVector[0] == State.mainRegion_State2__region0_State5;default :return false;}}  }
class C{  public static long copyAndCloseInput(Reader in,Writer out,long length) throws IOException {  try {    long copied=0;    int len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);    char[] buffer=new char[len];    while (length > 0) {      len=in.read(buffer,0,len);      if (len < 0) {        break;      }      if (out != null) {        out.write(buffer,0,len);      }      length-=len;      len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);      copied+=len;    }    return copied;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    in.close();  }}  }
class C{  public void diff_cleanupMerge(LinkedList<Diff> diffs){  diffs.add(new Diff(Operation.EQUAL,""));  ListIterator<Diff> pointer=diffs.listIterator();  int count_delete=0;  int count_insert=0;  String text_delete="";  String text_insert="";  Diff thisDiff=pointer.next();  Diff prevEqual=null;  int commonlength;  while (thisDiff != null) {switch (thisDiff.operation) {case INSERT:      count_insert++;    text_insert+=thisDiff.text;  prevEqual=null;break;case DELETE:count_delete++;text_delete+=thisDiff.text;prevEqual=null;break;case EQUAL:if (count_delete + count_insert > 1) {boolean both_types=count_delete != 0 && count_insert != 0;pointer.previous();while (count_delete-- > 0) {pointer.previous();pointer.remove();}while (count_insert-- > 0) {pointer.previous();pointer.remove();}if (both_types) {commonlength=diff_commonPrefix(text_insert,text_delete);if (commonlength != 0) {if (pointer.hasPrevious()) {thisDiff=pointer.previous();assert thisDiff.operation == Operation.EQUAL : "Previous diff should have been an equality.";thisDiff.text+=text_insert.substring(0,commonlength);pointer.next();} else {pointer.add(new Diff(Operation.EQUAL,text_insert.substring(0,commonlength)));}text_insert=text_insert.substring(commonlength);text_delete=text_delete.substring(commonlength);}commonlength=diff_commonSuffix(text_insert,text_delete);if (commonlength != 0) {thisDiff=pointer.next();thisDiff.text=text_insert.substring(text_insert.length() - commonlength) + thisDiff.text;text_insert=text_insert.substring(0,text_insert.length() - commonlength);text_delete=text_delete.substring(0,text_delete.length() - commonlength);pointer.previous();}}if (text_delete.length() != 0) {pointer.add(new Diff(Operation.DELETE,text_delete));}if (text_insert.length() != 0) {pointer.add(new Diff(Operation.INSERT,text_insert));}thisDiff=pointer.hasNext() ? pointer.next() : null;} else if (prevEqual != null) {prevEqual.text+=thisDiff.text;pointer.remove();thisDiff=pointer.previous();pointer.next();}count_insert=0;count_delete=0;text_delete="";text_insert="";prevEqual=thisDiff;break;}thisDiff=pointer.hasNext() ? pointer.next() : null;}if (diffs.getLast().text.length() == 0) {diffs.removeLast();}boolean changes=false;pointer=diffs.listIterator();Diff prevDiff=pointer.hasNext() ? pointer.next() : null;thisDiff=pointer.hasNext() ? pointer.next() : null;Diff nextDiff=pointer.hasNext() ? pointer.next() : null;while (nextDiff != null) {if (prevDiff.operation == Operation.EQUAL && nextDiff.operation == Operation.EQUAL) {if (thisDiff.text.endsWith(prevDiff.text)) {thisDiff.text=prevDiff.text + thisDiff.text.substring(0,thisDiff.text.length() - prevDiff.text.length());nextDiff.text=prevDiff.text + nextDiff.text;pointer.previous();pointer.previous();pointer.previous();pointer.remove();pointer.next();thisDiff=pointer.next();nextDiff=pointer.hasNext() ? pointer.next() : null;changes=true;} else if (thisDiff.text.startsWith(nextDiff.text)) {prevDiff.text+=nextDiff.text;thisDiff.text=thisDiff.text.substring(nextDiff.text.length()) + nextDiff.text;pointer.remove();nextDiff=pointer.hasNext() ? pointer.next() : null;changes=true;}}prevDiff=thisDiff;thisDiff=nextDiff;nextDiff=pointer.hasNext() ? pointer.next() : null;}if (changes) {diff_cleanupMerge(diffs);}}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(3);  newVector.addElement(new Option("\tSpecify a starting set of attributes.\n" + "\tEg. 1,3,5-7.\n" + "\tAny starting attributes specified are\n"+ "\tignored during the ranking.","P",1,"-P <start set>"));  newVector.addElement(new Option("\tSpecify a theshold by which attributes\n" + "\tmay be discarded from the ranking.","T",1,"-T <threshold>"));  newVector.addElement(new Option("\tSpecify number of attributes to select","N",1,"-N <num to select>"));  return newVector.elements();}  }
class C{  public static String createPath(FModel fmodel){  return fmodel.getName().replace(".","/");}  }
class C{  public synchronized int failureCount(){  return fFailures.size();}  }
class C{  Graphics(Object nativeGraphics){  setGraphics(nativeGraphics);  impl=Display.impl;}  }
class C{  public TraceRate(){  super(Options.set,"Trace Rate","The granularity of the trace being produced.  By default, the trace has the maximum possible granularity.",Integer.MAX_VALUE);}  }
class C{  public static boolean distribute(EntryEventImpl event,long lastModified,boolean ifNew,boolean ifOld,Object expectedOldValue,boolean requireOldValue,boolean onlyPersistent){  boolean successful=false;  DistributedRegion r=(DistributedRegion)event.getRegion();  Collection replicates=onlyPersistent ? r.getCacheDistributionAdvisor().adviseInitializedPersistentMembers().keySet() : r.getCacheDistributionAdvisor().adviseInitializedReplicates();  if (replicates.isEmpty()) {    return false;  }  if (replicates.size() > 1) {    ArrayList l=new ArrayList(replicates);    Collections.shuffle(l);    replicates=l;  }  int attempts=0;  if (logger.isDebugEnabled()) {    logger.debug("performing remote put messaging for {}",event);  }  for (Iterator<InternalDistributedMember> it=replicates.iterator(); it.hasNext(); ) {    InternalDistributedMember replicate=it.next();    try {      attempts++;      final boolean posDup=(attempts > 1);      RemotePutResponse response=send(replicate,event.getRegion(),event,lastModified,ifNew,ifOld,expectedOldValue,requireOldValue,false,DistributionManager.SERIAL_EXECUTOR,posDup);      PutResult result=response.waitForResult();      event.setOldValue(result.oldValue,true);      event.setOperation(result.op);      if (result.versionTag != null) {        event.setVersionTag(result.versionTag);        if (event.getRegion().getVersionVector() != null) {          event.getRegion().getVersionVector().recordVersion(result.versionTag.getMemberID(),result.versionTag);        }      }      event.setInhibitDistribution(true);      return true;    } catch (    TransactionDataNotColocatedException enfe) {      throw enfe;    }catch (    CancelException e) {      event.getRegion().getCancelCriterion().checkCancelInProgress(e);    }catch (    CacheException e) {      if (logger.isDebugEnabled()) {        logger.debug("RemotePutMessage caught CacheException during distribution",e);      }      successful=true;    }catch (    RemoteOperationException e) {      if (logger.isTraceEnabled(LogMarker.DM)) {        logger.trace(LogMarker.DM,"RemotePutMessage caught an unexpected exception during distribution",e);      }    }  }  return successful;}  }
class C{  @Override public void extractAndApply(){  methodType.setElement(methodSymbol);  if (methodType.getReturnType() instanceof AnnotatedTypeVariable) {    applyTypeVarUseOnReturnType();  }  addAnnotationsFromElement(methodType.getReturnType(),methodSymbol.getAnnotationMirrors());  final List<AnnotatedTypeMirror> params=methodType.getParameterTypes();  for (int i=0; i < params.size(); ++i) {    addAnnotationsFromElement(params.get(i),methodSymbol.getParameters().get(i).getAnnotationMirrors());  }  super.extractAndApply();  applyAllElementAnnotations(methodType.getParameterTypes(),methodSymbol.getParameters(),typeFactory);  applyAllElementAnnotations(methodType.getTypeVariables(),methodSymbol.getTypeParameters(),typeFactory);}  }
class C{  public Factory(int k,DistanceFunction<? super O> distanceFunction){  super(k,distanceFunction);}  }
class C{  public static void addCookieWebUser(HttpServletRequest request,HttpServletResponse response,String webUser){  Cookie cookie=new Cookie(COOKIE_NAME,webUser);  cookie.setComment("Adempiere Web User");  cookie.setPath(request.getContextPath());  cookie.setMaxAge(2592000);  response.addCookie(cookie);}  }
class C{  public static boolean connect(final String ssid,WifiCipherType type,String... password) throws InterruptedException {  return WifiAdmin.getInstance().connect(ssid,type,password);}  }
class C{  public int writeRemuxer(ByteBuffer data){  if (closed)   return -1;  int bytesRead=data.remaining();  while (data.hasRemaining()) {    if (containerFormat == null) {      int writeLimit=Math.min(transferBuffer.length - initOffset,data.remaining());      data.get(transferBuffer,initOffset,writeLimit);      pushData(transferBuffer,initOffset,writeLimit);      containerFormat=remuxer2.getContainerFormat();      initOffset+=writeLimit;      if (containerFormat != null) {        partialTransferIndex=0;        VideoFormat videoFormat=remuxer2.getContainerFormat().getVideoFormat();        if (videoFormat != null) {          h264=videoFormat.getFormatName().equals(MediaFormat.H264);          mpeg2=videoFormat.getFormatName().equals(MediaFormat.MPEG2_VIDEO);          videoPid=Integer.parseInt(videoFormat.getId(),16);        } else {          if (Sage.DBG)           System.out.println("Video format does not exist." + " Transition points will not be able to be determined.");        }      } else       if (initOffset == transferBuffer.length) {        if (transferBuffer.length < MAX_INIT_BUFFER_SIZE) {          byte[] newBuffer=new byte[Math.min(transferBuffer.length * 2,MAX_INIT_BUFFER_SIZE)];          System.arraycopy(transferBuffer,0,newBuffer,0,transferBuffer.length);          transferBuffer=newBuffer;          if (Sage.DBG)           System.out.println("Container format not detected," + " expanding buffer. transferBuffer=" + transferBuffer.length);        } else         if (transferBuffer.length == MAX_INIT_BUFFER_SIZE) {          initOffset=0;          remuxer2.close();          tuneStringType=MPEGParser2.TuneStringType.CHANNEL;          channel=0;          tsid=0;          data1=0;          data2=0;          data3=0;          remuxer2=MPEGParser2.openRemuxer(inputFormat,outputFormat,streamFormat,subFormat,tuneStringType,channel,tsid,data1,data2,data3,writer);          if (Sage.DBG)           System.out.println("Container format not detected," + " clearing buffer, setting channel to 0." + " transferBuffer="+ transferBuffer.length);        }      }      if (containerFormat != null) {        VideoFormat videoFormat=containerFormat.getVideoFormat();        String formatName=videoFormat != null ? videoFormat.getFormatName() : null;        if (formatName != null && outputFormat == MPEGParser2.REMUX_PS && !formatName.equals(MediaFormat.MPEG1_VIDEO) && !formatName.equals(MediaFormat.MPEG2_VIDEO)) {          remuxer2.close();          outputFormat=MPEGParser2.REMUX_TS;          remuxer2=MPEGParser2.openRemuxer(inputFormat,outputFormat,streamFormat,subFormat,tuneStringType,channel,tsid,data1,data2,data3,writer);          if (remuxer2 == null) {            return -1;          }          int offset=0;          int length;          while (offset < initOffset) {            length=Math.min(MAX_TRANSFER,initOffset - offset);            if (remuxer2.pushInitData(transferBuffer,offset,length))             break;            offset+=length;          }          containerFormat=remuxer2.getContainerFormat();          if (containerFormat == null) {            continue;          }        }        pushData(transferBuffer,0,initOffset);        transferBuffer=new byte[65536];        if (!data.hasRemaining()) {          break;        }      }    }    if (containerFormat != null) {      int totalLength=data.remaining();      int bufferOffset=0;      byte currentBuffer[];      if (transferBuffer == null || data.remaining() > transferBuffer.length) {        transferBuffer=new byte[data.remaining() * 2];      }      data.get(transferBuffer,0,totalLength);      currentBuffer=transferBuffer;      pushData(currentBuffer,bufferOffset,totalLength);    }  }  return bytesRead;}  }
class C{  public void reportSeverity(double incr){  bgMonitor.incrCompactionSeverity(incr);}  }
class C{  public void remove(Drawable drawable){  mOverlayViewGroup.remove(drawable);}  }
class C{  @Override public LifecycleListener[] findLifecycleListeners(){  return lifecycle.findLifecycleListeners();}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public void testCompare12To12() throws Exception {  assertTrue(ApplicationXmlVersion.V1_2.compareTo(ApplicationXmlVersion.V1_2) == 0);}  }
class C{  public void testExtraDirectory() throws Exception {  Path dir=wrap(createTempDir(),true,true);  Files.createDirectory(dir.resolve("foobar"));  List<String> seen=new ArrayList<>();  try (DirectoryStream<Path> stream=Files.newDirectoryStream(dir.resolve("foobar"))){    for (    Path path : stream) {      seen.add(path.getFileName().toString());    }  }   assertEquals(Arrays.asList("extra0"),seen);  assertTrue(Files.isDirectory(dir.resolve("foobar").resolve("extra0")));}  }
class C{  private void addButton(JToggleButton button,String name){  button.setIcon(new ImageIcon(ImageUtils.getImage(this,name + "3.gif")));  button.setMaximumSize(new Dimension(80,40));  button.setPreferredSize(new Dimension(80,40));  buttonsPanel.add(button);  buttonsPanel.add(Box.createVerticalStrut(5));  group.add(button);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.670 -0500",hash_original_method="69EBEDDBEBD5610928D56ADB554A973E",hash_generated_method="373724F1F422F41885B691E997E2DD7B") public void removeHeaders(){  qheaders=new NameValueList();}  }
class C{  @GwtIncompatible <K,V>MapMakerInternalMap<K,V> makeCustomMap(){  return new MapMakerInternalMap<K,V>(this);}  }
class C{  public UnsupportedDigestAlgorithmException(String message){  super(message);}  }
class C{  public BulkRequest add(Iterable<ActionRequest> requests){  for (  ActionRequest request : requests) {    add(request);  }  return this;}  }
class C{  public static long simHash(Set<Integer> hashValues){  int[] v=new int[HASH_LENGTH];  long simhash=0;  for (  Integer hash : hashValues) {    for (int i=0; i < HASH_LENGTH; i++) {      boolean bitSet=((hash >> i) & 1L) == 1L;      if (bitSet) {        v[i]+=1;      } else {        v[i]-=1;      }    }  }  for (int i=0; i < HASH_LENGTH; ++i) {    if (v[i] > 0) {      simhash|=(1L << i);    }  }  return simhash;}  }
class C{  public void applySettings(boolean loadCoreComponents) throws ApplySettingsException {  List<String> errors=new ArrayList<String>(2);  applyTorrentDataSaveFolderSettings(errors);  applyTorrentSeedingSettings(errors);  if (!errors.isEmpty()) {    throw new ApplySettingsException(StringUtils.explode(errors,"\n\n"));  }}  }
class C{  protected final void restoreState(){  likelihoodKnown=false;}  }
class C{  public static Revision now(){  return new Revision(new Date());}  }
class C{  protected static ComponentUI[] uisToArray(Vector uis){  if (uis == null) {    return new ComponentUI[0];  } else {    int count=uis.size();    if (count > 0) {      ComponentUI[] u=new ComponentUI[count];      for (int i=0; i < count; i++) {        u[i]=(ComponentUI)uis.elementAt(i);      }      return u;    } else {      return null;    }  }}  }
class C{  public static PVector lerp(PVector v1,PVector v2,float amt){  PVector v=v1.get();  v.lerp(v2,amt);  return v;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.420 -0400",hash_original_method="7C45A482387B2B2D8B9E8C359B519B1D",hash_generated_method="712972C9606AAB3F46E99D327614741D") public static float readSwappedFloat(InputStream input) throws IOException {  return Float.intBitsToFloat(readSwappedInteger(input));}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryDRSMigrationCapabilityForPerformanceResponse queryDRSMigrationCapabilityForPerformance(com.emc.storageos.vasa.VasaServiceStub.QueryDRSMigrationCapabilityForPerformance queryDRSMigrationCapabilityForPerformance35) throws java.rmi.RemoteException, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.NotFound, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[17].getName());    _operationClient.getOptions().setAction("urn:queryDRSMigrationCapabilityForPerformance");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryDRSMigrationCapabilityForPerformance35,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryDRSMigrationCapabilityForPerformance")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryDRSMigrationCapabilityForPerformanceResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryDRSMigrationCapabilityForPerformanceResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.NotFound) {            throw (com.emc.storageos.vasa.NotFound)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @Override public void writeString(String s){  byte[] bytes=s.getBytes(StandardCharsets.UTF_8);  writeVarInt(bytes.length);  write(bytes);}  }
class C{  public cite addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Nullable Boolean hasPathToCenter(Key key){  return cache.get(key);}  }
class C{  public synchronized byte[] toByteArray(){  byte[] newArray=new byte[count];  System.arraycopy(buf,0,newArray,0,count);  return newArray;}  }
class C{  public static void main(String... a) throws Exception {  System.setProperty("h2.storeLocalTime","true");  TestBase.createCaller().init().test();}  }
class C{  private String outputClustering(HTMLFile f,Collection<Cluster> allClusters,int maxSize){  int[] distribution=new int[maxSize + 1];  int max=0;  for (int i=0; i <= maxSize; i++)   distribution[i]=0;  f.println("<TABLE CELLPADDING=2 CELLSPACING=2>");  f.println("<TR><TH ALIGN=center BGCOLOR=#8080ff>" + msg.getString("Clusters.Cluster_number") + "<TH ALIGN=center BGCOLOR=#8080ff>"+ msg.getString("Clusters.Size")+ "<TH ALIGN=center BGCOLOR=#8080ff>"+ msg.getString("Clusters.Threshold")+ "<TH ALIGN=center BGCOLOR=#8080ff>"+ msg.getString("Clusters.Cluster_members")+ "<TH ALIGN=center BGCOLOR=#8080ff>"+ msg.getString("Clusters.Most_frequent_words")+ "</TR>");  Iterator<Cluster> clusterI=allClusters.iterator();  for (int i=1; clusterI.hasNext(); i++) {    Cluster cluster=clusterI.next();    if (max < ++distribution[cluster.size()])     max=distribution[cluster.size()];    if (cluster.size() == 1)     continue;    f.print("<TR><TD ALIGN=center BGCOLOR=#8080ff>" + i + "<TD ALIGN=center BGCOLOR=#c0c0ff>"+ cluster.size()+ "<TD ALIGN=center BGCOLOR=#c0c0ff>"+ cluster.getSimilarity()+ "<TD ALIGN=left BGCOLOR=#c0c0ff>");    TreeSet<Submission> sortedSubmissions=new TreeSet<Submission>();    for (int x=0; x < cluster.size(); x++) {      sortedSubmissions.add(submissions.elementAt(cluster.getSubmissionAt(x)));    }    for (Iterator<Submission> iter=sortedSubmissions.iterator(); iter.hasNext(); ) {      Submission sub=iter.next();      int index=submissions.indexOf(sub);      f.print("<A HREF=\"submission" + index + ".html\">"+ sub.name+ "</A>");      if (iter.hasNext())       f.print(", ");      neededSubmissions.add(sub);    }    if (this.program.get_language() instanceof jplag.text.Language) {      f.println("<TD ALIGN=left BGCOLOR=#c0c0ff>" + ThemeGenerator.generateThemes(sortedSubmissions,this.program.get_themewords(),true,this.program));    } else {      f.println("<TD ALIGN=left BGCOLOR=#c0c0ff>-");    }    f.println("</TR>");  }  f.println("</TABLE>\n<P>\n");  f.println("<H5>" + msg.getString("Clusters.Distribution_of_cluster_size") + ":</H5>");  String text;  text="<TABLE CELLPADDING=1 CELLSPACING=1>\n";  text+="<TR><TH ALIGN=center BGCOLOR=#8080ff>" + msg.getString("Clusters.Cluster_size") + "<TH ALIGN=center BGCOLOR=#8080ff>"+ msg.getString("Clusters.Number_of_clusters")+ "<TH ALIGN=center BGCOLOR=#8080ff>.</TR>\n";  for (int i=0; i <= maxSize; i++) {    if (distribution[i] == 0)     continue;    text+="<TR><TD ALIGN=center BGCOLOR=#c0c0ff>" + i + "<TD ALIGN=right BGCOLOR=#c0c0ff>"+ distribution[i]+ "<TD BGCOLOR=#c0c0ff>\n";    for (int j=(distribution[i] * barLength / max); j > 0; j--)     text+=("#");    if (distribution[i] * barLength / max == 0) {      if (distribution[i] == 0)       text+=("."); else       text+=("#");    }    text+=("</TR>\n");  }  text+=("</TABLE>\n");  f.print(text);  return text;}  }
class C{  @Override protected boolean sameOriginDisabled(){  return true;}  }
class C{  public RoutableDestination(T destination,Map<String,String> groupNameValues){  this.destination=destination;  this.groupNameValues=groupNameValues;}  }
class C{  public TreeModelEvent(Object source,TreePath path,int[] childIndices,Object[] children){  super(source);  this.path=path;  this.childIndices=childIndices;  this.children=children;}  }
class C{  public String format(Calendar calendar,Calendar smscCalendar){  if (calendar == null || smscCalendar == null) {    return null;  }  long diffTimeInMillis=calendar.getTimeInMillis() - smscCalendar.getTimeInMillis();  if (diffTimeInMillis < 0) {    throw new IllegalArgumentException("The requested relative time has already past.");  }  Calendar offsetEpoch=Calendar.getInstance(utcTimeZone);  offsetEpoch.setTimeInMillis(diffTimeInMillis);  int years=offsetEpoch.get(Calendar.YEAR) - 1970;  int months=offsetEpoch.get(Calendar.MONTH);  int days=offsetEpoch.get(Calendar.DAY_OF_MONTH) - 1;  int hours=offsetEpoch.get(Calendar.HOUR_OF_DAY);  int minutes=offsetEpoch.get(Calendar.MINUTE);  int seconds=offsetEpoch.get(Calendar.SECOND);  if (years >= 100) {    throw new IllegalArgumentException("The requested relative time is more then a century (" + years + " years).");  }  return format(years,months,days,hours,minutes,seconds);}  }
class C{  public void paintSplitPaneDividerBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private RequestSecurityTokenResponseType parseIntermediateGssResponse(Node response) throws ParserException {  RequestSecurityTokenResponseType parsedResponse=null;  boolean hasRSTRC=hasRSTRC(response);  if (hasRSTRC) {    log.debug("Intermediate response contains RSTRC. Parsing RSTR from there.");    RequestSecurityTokenResponseCollectionType rstrc=responseUnmarshaller.parseStsResponse(response,RequestSecurityTokenResponseCollectionType.class,true);    parsedResponse=rstrc.getRequestSecurityTokenResponse();  } else {    log.debug("Intermediate response does not contain RSTRC. Should be direct RSTR.");    parsedResponse=responseUnmarshaller.parseStsResponse(response,RequestSecurityTokenResponseType.class,true);  }  if (parsedResponse == null) {    log.error("Unable to get RSTR element from response.");    throw new ParserException(PROCESS_RSTR_ERROR);  }  validateContextId(parsedResponse);  return parsedResponse;}  }
class C{  private void countCalledFunctions(Tree node,FunctionInterface function,CodeAnalysisResults results){  CalledFunctionVerifier verifyer=new CalledFunctionVerifier(results);  if (verifyer.verify(node)) {    FunctionInterface calledFunction=verifyer.fetchCalledFunction();    if (verifyer.isUnresolvedFunctionCall()) {      UnresolvedFunctionCall unresolvedCall=new UnresolvedFunctionCall(function,calledFunction,results.getActiveUnit());      results.addUnresolvedCall(calledFunction.getName(),unresolvedCall);    } else {      function.addCalledFunction(calledFunction);    }  }  for (int i=0; i < node.getChildCount(); ++i) {    countCalledFunctions(node.getChild(i),function,results);  }}  }
class C{  public boolean isSetResponseTo(){  return EncodingUtils.testBit(__isset_bitfield,__RESPONSETO_ISSET_ID);}  }
class C{  public static boolean isPrime(int value){  for (int divisor=2; divisor <= value / 2; divisor++) {    if (value % divisor == 0)     return false;  }  return true;}  }
class C{  public int loadInt(Offset offset){  return 0;}  }
class C{  public static TestDiagnostic fromDiagnosticFileString(String stringFromDiagnosticFile){  return fromPatternMatching(DIAGNOSTIC_FILE_PATTERN,DIAGNOSTIC_WARNING_IN_JAVA_PATTERN,"",null,stringFromDiagnosticFile);}  }
class C{  public Query orderBy(String column,int direction){  if (direction != ORDER_ASCENDING && direction != ORDER_DESCENDING) {    throw new IllegalArgumentException("Invalid direction: " + direction);  }  if (column.equals(COLUMN_LAST_MODIFIED_TIMESTAMP)) {    mOrderByColumn=Downloads.Impl.COLUMN_LAST_MODIFICATION;  } else   if (column.equals(COLUMN_TOTAL_SIZE_BYTES)) {    mOrderByColumn=Downloads.Impl.COLUMN_TOTAL_BYTES;  } else {    throw new IllegalArgumentException("Cannot order by " + column);  }  mOrderDirection=direction;  return this;}  }
class C{  public void menuSelectionChanged(boolean isIncluded){  if (DEBUG) {    System.out.println("In JPopupMenu.menuSelectionChanged " + isIncluded);  }  if (invoker instanceof JMenu) {    JMenu m=(JMenu)invoker;    if (isIncluded)     m.setPopupMenuVisible(true); else     m.setPopupMenuVisible(false);  }  if (isPopupMenu() && !isIncluded)   setVisible(false);}  }
class C{  public void handle(){  try {    String folderId=requestParams.get("folder");    if (!StringUtils.isEmpty(folderId)) {      AbstractSearchFolder folder=loadFolder(UUID.fromString(folderId));      if (folder != null) {        folders.openFolder(folder);      } else {        log.warn("Folder not found: {}",folderId);      }      return;    }    String screenName=requestParams.get("screen");    if (screenName == null) {      log.warn("ScreenId not found in request parameters");      return;    }    WindowConfig windowConfig=AppBeans.get(WindowConfig.NAME);    final WindowInfo windowInfo=windowConfig.getWindowInfo(screenName);    if (windowInfo == null) {      log.warn("WindowInfo not found for screen: {}",screenName);      return;    }    UUID userId=getUUID(requestParams.get("user"));    UserSession userSession=app.getConnection().getSession();    if (userSession == null) {      log.warn("No user session");      return;    }    if (!(userId == null || userSession.getCurrentOrSubstitutedUser().getId().equals(userId))) {      substituteUserAndOpenWindow(windowInfo,userId);    } else {      openWindow(windowInfo,requestParams);    }  } catch (  AccessDeniedException e) {    accessDeniedHandler.handle(e,app.getWindowManager());  }catch (  NoSuchScreenException e) {    noSuchScreenHandler.handle(e,app.getWindowManager());  }catch (  EntityAccessException e) {    entityAccessExceptionHandler.handle(e,app.getWindowManager());  } finally {    requestParams.clear();  }}  }
class C{  public synchronized void addIterationNotificationListener(IterationNotificationListener l){  if (m_IterationNotficationListeners == null)   m_IterationNotficationListeners=new HashSet<>();  m_IterationNotficationListeners.add(l);}  }
class C{  public RegisterRequestMessage(RegisterRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }}  }
class C{  public void testSeedConstructor(){  for (long seed=2; seed < MAX_LONG_BOUND; seed+=15485863) {    SplittableRandom sr1=new SplittableRandom(seed);    SplittableRandom sr2=new SplittableRandom(seed);    for (int i=0; i < REPS; ++i)     assertEquals(sr1.nextLong(),sr2.nextLong());  }}  }
class C{  @SuppressWarnings("unchecked") private static ArrayList<Path> collectInputFiles(String input,FileSystem fs) throws FileNotFoundException, IOException {  Path path=new Path(input);  ArrayList<Path> files=new ArrayList<Path>();  if (fs.isDirectory(path)) {    for (    FileStatus stat : fs.listStatus(path,CSVReblockMR.hiddenFileFilter))     files.add(stat.getPath());    Collections.sort(files);  } else   files.add(path);  return files;}  }
class C{  @Override protected String toExternalForm(URL url){  StringBuilder sb=new StringBuilder();  sb.append("jar:");  sb.append(url.getFile());  String ref=url.getRef();  if (ref != null) {    sb.append(ref);  }  return sb.toString();}  }
class C{  public void java_lang_Class_getSuperclass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public void remove(final AbstractInsnNode insn){  --size;  AbstractInsnNode next=insn.next;  AbstractInsnNode prev=insn.prev;  if (next == null) {    if (prev == null) {      first=null;      last=null;    } else {      prev.next=null;      last=prev;    }  } else {    if (prev == null) {      first=next;      next.prev=null;    } else {      prev.next=next;      next.prev=prev;    }  }  cache=null;  insn.index=-1;  insn.prev=null;  insn.next=null;}  }
class C{  public static byte[] toMACAddress(String macAddress){  return MacAddress.of(macAddress).getBytes();}  }
class C{  public void dump(){  dump(this);}  }
class C{  public ServiceCall<Ranking> rank(final String rankerID,final InputStream answers,Integer topAnswers){  Validator.isTrue((rankerID != null) && !rankerID.isEmpty(),"rankerID cannot be null or empty");  Validator.notNull(answers,"answers file cannot be null");  final ByteArrayOutputStream answersBuffer=new ByteArrayOutputStream();  int bytesRead;  final byte[] data=new byte[10000];  try {    while ((bytesRead=answers.read(data,0,data.length)) != -1) {      answersBuffer.write(data,0,bytesRead);    }  } catch (  final IOException e) {    throw new RuntimeException("Error reading search results input",e);  }  final okhttp3.MultipartBody.Builder builder=new MultipartBody.Builder().setType(MultipartBody.FORM).addPart(Headers.of(HttpHeaders.CONTENT_DISPOSITION,"form-data; name=\"answer_data\""),RequestBody.create(HttpMediaType.BINARY_FILE,answersBuffer.toByteArray()));  if (topAnswers != null) {    builder.addFormDataPart(ANSWERS,topAnswers.toString());  }  final String path=String.format(PATH_RANK,rankerID);  final Request request=RequestBuilder.post(path).body(builder.build()).build();  return createServiceCall(request,ResponseConverterUtils.getObject(Ranking.class));}  }
class C{  public void writePatternList(PartitionData partition,XMLWriter writer){  writer.writeText("");  AncestralStatesComponentOptions ancestralStatesOptions=(AncestralStatesComponentOptions)options.getComponentOptions(AncestralStatesComponentOptions.class);  SequenceErrorModelComponentOptions sequenceErrorOptions=(SequenceErrorModelComponentOptions)options.getComponentOptions(SequenceErrorModelComponentOptions.class);  PartitionSubstitutionModel model=partition.getPartitionSubstitutionModel();  String codonHeteroPattern=model.getCodonHeteroPattern();  int partitionCount=model.getCodonPartitionCount();  boolean isAncestralStatesModel=(!ancestralStatesOptions.usingAncestralStates(partition) && !sequenceErrorOptions.usingSequenceErrorModel(partition));  boolean isCovarionModel=model.getDataType().getType() == DataType.COVARION && model.getBinarySubstitutionModel() == BinaryModelType.BIN_COVARION;  boolean unique=isAncestralStatesModel || isCovarionModel;  boolean strip=isAncestralStatesModel || isCovarionModel;  if (model.getDataType().getType() == DataType.NUCLEOTIDES && codonHeteroPattern != null && partitionCount > 1) {    if (codonHeteroPattern.equals("112")) {      writer.writeComment("The " + (unique ? "unique " : "") + "patterns for codon positions 1 & 2");      writer.writeOpenTag(MergePatternsParser.MERGE_PATTERNS,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,partition.getPrefix() + model.getPrefixCodon(1) + SitePatternsParser.PATTERNS)});      writePatternList(partition,0,3,null,unique,strip,writer);      writePatternList(partition,1,3,null,unique,strip,writer);      writer.writeCloseTag(MergePatternsParser.MERGE_PATTERNS);      writer.writeComment("The " + (unique ? "unique " : "") + "patterns for codon position 3");      writePatternList(partition,2,3,model.getPrefixCodon(2),unique,strip,writer);    } else {      for (int i=1; i <= 3; i++) {        writer.writeComment("The " + (unique ? "unique " : "") + "patterns for codon position "+ i);        writePatternList(partition,i - 1,3,model.getPrefixCodon(i),unique,strip,writer);      }    }  } else {    writePatternList(partition,0,1,"",unique,strip,writer);  }}  }
class C{  public void addOperationCallListeners(Map<String,Map<String,Map<String,Object>>> descriptor){  if (descriptor == null)   return;  for (  Map.Entry<String,Map<String,Map<String,Object>>> item : descriptor.entrySet()) {    if (item.getValue().containsKey("methodListener")) {      Map<String,Object> listener=item.getValue().get("methodListener");      String target=(String)listener.get("target");      methodListeners.add(target);      String listenerType=(String)listener.get("type");      listener.put("managedObject",this.managedObject);      if (listenerType.equals("attributeChangeListener")) {        try {          this.addAttributeChangeNotificationListener(AttributeChangedListener.getListener(),(String)listener.get("attribute"),listener);        } catch (        MBeanException e) {          throw new JmxBuilderException(e);        }      }      if (listenerType.equals("operationCallListener")) {        String eventType="jmx.operation.call." + target;        NotificationFilterSupport filter=new NotificationFilterSupport();        filter.enableType(eventType);        this.addNotificationListener(JmxEventListener.getListener(),filter,listener);      }    }  }}  }
class C{  public Closure addPreInstantiateDelegate(Closure delegate){  getProxyBuilder().preInstantiateDelegates.addFirst(delegate);  return delegate;}  }
class C{  public static char[] readFile(String filename){  BinaryIn in=new BinaryIn(filename);  ArrayList<Character> chars=new ArrayList<Character>();  while (!in.isEmpty()) {    chars.add(in.readChar());  }  char[] input=new char[chars.size()];  for (int i=0; i < input.length; i+=1) {    input[i]=chars.get(i);  }  return input;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public AxisAngle4f(float x,float y,float z,float angle){  this.x=x;  this.y=y;  this.z=z;  this.angle=angle;}  }
class C{  public void onSearch(String text){}  }
class C{  public static void launchBrowser(String browserName,String url) throws CoreException, IOException {  IBrowserDescriptor browser=findBrowser(browserName);  if (browser == null) {    throw new CoreException(StatusUtilities.newErrorStatus("Could not find browser \"" + browserName + "\".",CorePlugin.PLUGIN_ID));  }  if (browser instanceof SystemBrowserDescriptor) {    Program p=Program.findProgram("html");    boolean launched=false;    if (p != null) {      launched=p.execute(url);    }    if (!launched) {      String msg="Could not launch the default " + "browser, please configure a browser in " + "Preferences -> General -> Web Browsers";      MessageBox mb=new MessageBox(Display.getCurrent().getActiveShell());      mb.setMessage(msg);      mb.open();      throw new CoreException(StatusUtilities.newErrorStatus(msg,CorePlugin.PLUGIN_ID));    }  } else {    List<String> command=computeCommandLine(browser,url);    new ProcessBuilder(command).start();  }}  }
class C{  @Override public Object onClockTick() throws Exception {  bitNumberBeingTransferred++;  if (bitNumberBeingTransferred == getNumBits()) {    bitNumberBeingTransferred=0;    if (!isScrTxeSet()) {      if (isScrRxeSet()) {        targetDevice.readHalfDuplex();        if (isScrRxeSet()) {          return null;        }      }    } else {      Integer value=read();      if (value != null) {        super.valueReady(value);        if (isScrTxeSet()) {          return null;        }      }    }    platform.getMasterClock().remove(this);  }  return null;}  }
class C{  public boolean isValid(Validator validator,ExceptionMessageListener receiver){  return validator.isValid(m_value,m_invalidValue,null,receiver);}  }
class C{  public boolean isErrors(){  return errors;}  }
class C{  @ReactMethod public void openURL(String url,Promise promise){  if (url == null || url.isEmpty()) {    promise.reject(new JSApplicationIllegalArgumentException("Invalid URL: " + url));    return;  }  try {    Activity currentActivity=getCurrentActivity();    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));    String selfPackageName=getReactApplicationContext().getPackageName();    ComponentName componentName=intent.resolveActivity(getReactApplicationContext().getPackageManager());    String otherPackageName=(componentName != null ? componentName.getPackageName() : "");    if (currentActivity == null || !selfPackageName.equals(otherPackageName)) {      intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    }    if (currentActivity != null) {      currentActivity.startActivity(intent);    } else {      getReactApplicationContext().startActivity(intent);    }    promise.resolve(true);  } catch (  Exception e) {    promise.reject(new JSApplicationIllegalArgumentException("Could not open URL '" + url + "': "+ e.getMessage()));  }}  }
class C{  static float reduce(float startValue,float endValue,float time){  if (startValue < endValue)   throw new IllegalArgumentException("End size can't be larger than start size.");  return endValue + (startValue - endValue) * (1 - time);}  }
class C{  public CstMethodRef(CstType definingClass,CstNat nat){  super(definingClass,nat);}  }
class C{  public final void pushPair(int v1,int v2){  if (null == m_map) {    m_map=new int[m_blocksize];    m_mapSize=m_blocksize;  } else {    if ((m_firstFree + 2) >= m_mapSize) {      m_mapSize+=m_blocksize;      int newMap[]=new int[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree);      m_map=newMap;    }  }  m_map[m_firstFree]=v1;  m_map[m_firstFree + 1]=v2;  m_firstFree+=2;}  }
class C{  private double[] correctFrequencyResponse(double[] frequencyResponse){  double filterLength=mSpecification.getFilterLength();switch (mSpecification.getFilterType()) {case TYPE_1_ODD_LENGTH_EVEN_ORDER_SYMMETRICAL:    break;case TYPE_2_EVEN_LENGTH_ODD_ORDER_SYMMETRICAL:  break;case TYPE_3_ODD_LENGTH_EVEN_ORDER_ANTI_SYMMETRICAL:for (int x=0; x < frequencyResponse.length; x++) {  double frequencyRadians=Math.PI * (((double)x) / filterLength);  frequencyResponse[x]*=Math.sin(TWO_PI * frequencyRadians);}break;case TYPE_4_EVEN_LENGTH_ODD_ORDER_ANTI_SYMMETRICAL:for (int x=0; x < frequencyResponse.length; x++) {double frequencyRadians=Math.PI * (((double)x) / filterLength);frequencyResponse[x]*=Math.sin(Math.PI * frequencyRadians);}break;default :break;}return frequencyResponse;}  }
class C{  public void handleManageChildren(ReactShadowNode nodeToManage,int[] indicesToRemove,int[] tagsToRemove,ViewAtIndex[] viewsToAdd,int[] tagsToDelete){  if (!ENABLED) {    mUIViewOperationQueue.enqueueManageChildren(nodeToManage.getReactTag(),indicesToRemove,viewsToAdd,tagsToDelete);    return;  }  for (int i=0; i < tagsToRemove.length; i++) {    int tagToRemove=tagsToRemove[i];    boolean delete=false;    for (int j=0; j < tagsToDelete.length; j++) {      if (tagsToDelete[j] == tagToRemove) {        delete=true;        break;      }    }    ReactShadowNode nodeToRemove=mShadowNodeRegistry.getNode(tagToRemove);    removeNodeFromParent(nodeToRemove,delete);  }  for (int i=0; i < viewsToAdd.length; i++) {    ViewAtIndex toAdd=viewsToAdd[i];    ReactShadowNode nodeToAdd=mShadowNodeRegistry.getNode(toAdd.mTag);    addNodeToNode(nodeToManage,nodeToAdd,toAdd.mIndex);  }}  }
class C{  private void editFile(FilePath file) throws VcsException, IOException {  editFiles(file);  setFileContent(file,CONTENT_3);  assertFile(file,CONTENT_3,true);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public Injector shardInjectorSafe(int shardId){  IndexShardInjectorPair indexShardInjectorPair=shards.get(shardId);  if (indexShardInjectorPair == null) {    throw new ShardNotFoundException(new ShardId(index,shardId));  }  return indexShardInjectorPair.getInjector();}  }
class C{  public boolean contains(int x,int y){  return x >= 0 && y >= 0 && x < getWidth() && y < getHeight();}  }
class C{  @Override public synchronized String format(LogRecord record){  StringBuilder sb=new StringBuilder();  dat.setTime(record.getMillis());  args[0]=dat;  StringBuffer text=new StringBuffer();  if (formatter == null) {    formatter=new MessageFormat(format);  }  formatter.format(args,text,null);  sb.append(text);  sb.append(" ");  if (record.getSourceClassName() != null) {    sb.append(record.getSourceClassName());  } else {    sb.append(record.getLoggerName());  }  if (record.getSourceMethodName() != null) {    sb.append(" ");    sb.append(record.getSourceMethodName());  }  sb.append(" - ");  String message=formatMessage(record);  sb.append(record.getLevel().getLocalizedName());  sb.append(": ");  int iOffset=(1000 - record.getLevel().intValue()) / 100;  for (int i=0; i < iOffset; i++) {    sb.append(" ");  }  sb.append(message);  sb.append(lineSeparator);  if (record.getThrown() != null) {    try (StringWriter sw=new StringWriter();PrintWriter pw=new PrintWriter(sw)){      record.getThrown().printStackTrace(pw);      pw.close();      sb.append(sw.toString());    } catch (    Exception ex) {    }  }  return sb.toString();}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return (getClassifier(history,index) instanceof MultiLabelDrawable);}  }
class C{  public void addAnnotation(Class<?> ann,URI type) throws ObjectStoreConfigException {  if (ann.getDeclaredMethods().length != 1)   throw new ObjectStoreConfigException("Annotation class must have exactly one method: " + ann);  addAnnotation(ann.getDeclaredMethods()[0],type);}  }
class C{  public static Global toGlobal(XmlGlobal xmlGlobal){  String name=!isNull(xmlGlobal.value) && !isNull(xmlGlobal.value.name) ? xmlGlobal.value.name : null;  String get=!isNull(xmlGlobal.value) && !isNull(xmlGlobal.value.get) ? xmlGlobal.value.get : null;  String set=!isNull(xmlGlobal.value) && !isNull(xmlGlobal.value.set) ? xmlGlobal.value.set : null;  SimplyAttribute[] attributes=null;  Class<?>[] classes=null;  String[] excluded=null;  if (!isEmpty(xmlGlobal.attributes)) {    attributes=new SimplyAttribute[xmlGlobal.attributes.size()];    for (int i=xmlGlobal.attributes.size(); i-- > 0; )     attributes[i]=new SimplyAttribute(xmlGlobal.attributes.get(i));  }  if (!isEmpty(xmlGlobal.classes)) {    classes=new Class<?>[xmlGlobal.classes.size()];    for (int i=xmlGlobal.classes.size(); i-- > 0; )     try {      classes[i]=Class.forName(xmlGlobal.classes.get(i).name);    } catch (    Exception e) {      Error.classInexistent(xmlGlobal.classes.get(i).name);    }  }  if (!isEmpty(xmlGlobal.excluded)) {    excluded=new String[xmlGlobal.excluded.size()];    for (int i=xmlGlobal.excluded.size(); i-- > 0; )     excluded[i]=xmlGlobal.excluded.get(i).name;  }  return new Global(name,get,set,attributes,classes,excluded);}  }
class C{  public StoryExample(StoryObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getPre() != null) {    criteria.andPreEqualTo(sample.getPre());  }  if (sample.getPost() != null) {    criteria.andPostEqualTo(sample.getPost());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getCompletedTime() != null) {    criteria.andCompletedTimeEqualTo(sample.getCompletedTime());  }  if (sample.getCompleted() != null) {    criteria.andCompletedEqualTo(sample.getCompleted());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getDescription() != null) {    criteria.andDescriptionEqualTo(sample.getDescription());  }  if (sample.getAcceptanceLevel() != null) {    criteria.andAcceptanceLevelEqualTo(sample.getAcceptanceLevel());  }  if (sample.getPriority() != null) {    criteria.andPriorityEqualTo(sample.getPriority());  }  if (sample.getParentStoryId() != null) {    criteria.andParentStoryIdEqualTo(sample.getParentStoryId());  }  if (sample.getCompletable() != null) {    criteria.andCompletableEqualTo(sample.getCompletable());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  public void config(String msg,Throwable thrown){  log(Level.CONFIG,thrown,msg,thrown);}  }
class C{  public void addDataPoint(long timestamp,List<Double> values){  if (timestamp < startTime || timestamp > endTime) {    LOG.warn("timestamp<startTime or timestamp>endTime, ignore this datapoint." + timestamp + ","+ startTime+ ":"+ endTime);    return;  }  int located=(int)((timestamp - startTime) / interval);  int index=0;  for (  Double src : values) {    double[] timeSeriesValues=aggregatedValues.get(index);    timeSeriesValues[located]+=src;    index++;  }}  }
class C{  static WindowsPath fromUri(WindowsFileSystem fs,URI uri){  if (!uri.isAbsolute())   throw new IllegalArgumentException("URI is not absolute");  if (uri.isOpaque())   throw new IllegalArgumentException("URI is not hierarchical");  String scheme=uri.getScheme();  if ((scheme == null) || !scheme.equalsIgnoreCase("file"))   throw new IllegalArgumentException("URI scheme is not \"file\"");  if (uri.getFragment() != null)   throw new IllegalArgumentException("URI has a fragment component");  if (uri.getQuery() != null)   throw new IllegalArgumentException("URI has a query component");  String path=uri.getPath();  if (path.equals(""))   throw new IllegalArgumentException("URI path component is empty");  String auth=uri.getAuthority();  if (auth != null && !auth.equals("")) {    String host=uri.getHost();    if (host == null)     throw new IllegalArgumentException("URI authority component has undefined host");    if (uri.getUserInfo() != null)     throw new IllegalArgumentException("URI authority component has user-info");    if (uri.getPort() != -1)     throw new IllegalArgumentException("URI authority component has port number");    if (host.startsWith("[")) {      host=host.substring(1,host.length() - 1).replace(':','-').replace('%','s');      host+=IPV6_LITERAL_SUFFIX;    }    path="\\\\" + host + path;  } else {    if ((path.length() > 2) && (path.charAt(2) == ':')) {      path=path.substring(1);    }  }  return WindowsPath.parse(fs,path);}  }
class C{  public void draw(GL10 gl,int n){  texture_.loadTexture(gl);  gl.glBindTexture(GL10.GL_TEXTURE_2D,texture_.name());  gl.glTexParameterx(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_REPEAT);  gl.glTexParameterx(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_REPEAT);  gl.glVertexPointer(3,GL10.GL_FLOAT,0,vertexCoordinates);  gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,textureCoordinates);  if (withColorArray_)   gl.glColorPointer(4,GL10.GL_FLOAT,0,colors);  if (ccConfig.CC_TEXTURE_ATLAS_USE_TRIANGLE_STRIP) {    gl.glDrawElements(GL10.GL_TRIANGLE_STRIP,n * 6,GL10.GL_UNSIGNED_SHORT,indices);  } else {    gl.glDrawElements(GL10.GL_TRIANGLES,n * 6,GL10.GL_UNSIGNED_SHORT,indices);  }}  }
class C{  private static BitMatrix bitMatrixFromEncoder(PDF417 encoder,String contents,int width,int height) throws WriterException {  int errorCorrectionLevel=2;  encoder.generateBarcodeLogic(contents,errorCorrectionLevel);  int lineThickness=2;  int aspectRatio=4;  byte[][] originalScale=encoder.getBarcodeMatrix().getScaledMatrix(lineThickness,aspectRatio * lineThickness);  boolean rotated=false;  if ((height > width) ^ (originalScale[0].length < originalScale.length)) {    originalScale=rotateArray(originalScale);    rotated=true;  }  int scaleX=width / originalScale[0].length;  int scaleY=height / originalScale.length;  int scale;  if (scaleX < scaleY) {    scale=scaleX;  } else {    scale=scaleY;  }  if (scale > 1) {    byte[][] scaledMatrix=encoder.getBarcodeMatrix().getScaledMatrix(scale * lineThickness,scale * aspectRatio * lineThickness);    if (rotated) {      scaledMatrix=rotateArray(scaledMatrix);    }    return bitMatrixFrombitArray(scaledMatrix);  }  return bitMatrixFrombitArray(originalScale);}  }
class C{  public void toWire(DNSOutput out,Compression c,boolean canonical){  if (canonical)   toWireCanonical(out); else   toWire(out,c);}  }
class C{  public SafeCalendar(){  clear();}  }
class C{  public LongArray(boolean ordered,long[] array){  this(ordered,array.length);  size=array.length;  System.arraycopy(array,0,items,0,size);}  }
class C{  public static String internString(String str){  String s=InternedStrings.findInternedString(str);  if (s != null)   return s;  s=InternedStrings.findAtomString(str);  if (s != null)   return s;  return InternedStrings.internUnfoundString(str);}  }
class C{  public byte[] toByteArray(){  int length=getByteArrayLength();  ByteBuffer buffer=ByteBuffer.allocate(length);  for (int i=0; i < mRecords.length; i++) {    boolean mb=(i == 0);    boolean me=(i == mRecords.length - 1);    mRecords[i].writeToByteBuffer(buffer,mb,me);  }  return buffer.array();}  }
class C{  protected Anonymous_moreGuards_1_Impl(){  super();}  }
class C{  public static synchronized void closeDiskLruCache(){  if (objectCache != null && !objectCache.isClosed()) {    try {      objectCache.close();    } catch (    IOException ignored) {    }  }}  }
class C{  public static <T>T eachLine(URL url,String charset,int firstLine,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return IOGroovyMethods.eachLine(newReader(url,charset),firstLine,closure);}  }
class C{  private boolean incrementCombination(int[] setTo){  setTo[0]++;  int carryPos=0;  while (carryPos < setTo.length - 1 && setTo[carryPos] >= searchValues.get(carryPos).size()) {    setTo[carryPos]=0;    setTo[++carryPos]++;  }  return setTo[setTo.length - 1] >= searchValues.get(setTo.length - 1).size();}  }
class C{  private static byte[] calculateMd5sum(final File file) throws IOException {  try (final FileInputStream inputStream=new FileInputStream(file)){    final MessageDigest md5=MessageDigest.getInstance("md5");    final byte[] buffer=new byte[1024];    int read=inputStream.read(buffer);    while (read > -1) {      md5.update(buffer,0,read);      read=inputStream.read(buffer);    }    return md5.digest();  } catch (  NoSuchAlgorithmException nsae) {    throw new IllegalArgumentException(nsae);  }}  }
class C{  public DeleteRequest(String index,String type,String id){  this.index=index;  this.type=type;  this.id=id;}  }
class C{  Iterator<GridH2Row> rows(){  return doFind(null,false,null);}  }
class C{  public AnimatableBooleanValue(AnimationTarget target,boolean b){  super(target);  value=b;}  }
class C{  public void addPropertyChangeListener(final PropertyChangeListener listener){  m_PropertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  private void throwIfDestroyed(boolean destroyed){  if (destroyed) {    throw new LockGrantorDestroyedException(LocalizedStrings.DLockGrantor_GRANTOR_IS_DESTROYED.toLocalizedString());  }}  }
class C{  public synchronized byte[] remove(final long handle) throws IOException, SpaceExceededException {  byte[] k=NaturalOrder.encodeLong(handle,8);  byte[] b=this.stack.get(k);  if (b == null)   return null;  this.stack.delete(k);  return b;}  }
class C{  public static ModifiableHyperBoundingBox union(SpatialComparable box1,SpatialComparable box2){  final int dim=assertSameDimensionality(box1,box2);  double[] min=new double[dim];  double[] max=new double[dim];  for (int i=0; i < dim; i++) {    min[i]=Math.min(box1.getMin(i),box2.getMin(i));    max[i]=Math.max(box1.getMax(i),box2.getMax(i));  }  return new ModifiableHyperBoundingBox(min,max);}  }
class C{  public boolean isDistributedJoins(){  return distributedJoins;}  }
class C{  public double applyMissingValueTreatment(double value) throws Exception {  double newVal=value;  if (m_missingValueTreatmentMethod != Missing.ASIS && Utils.isMissingValue(value)) {    if (m_missingValueReplacementNominal != null) {      Attribute att=m_miningSchemaI.attribute(m_index);      int valIndex=att.indexOfValue(m_missingValueReplacementNominal);      if (valIndex < 0) {        throw new Exception("[MiningSchema] Nominal missing value replacement value doesn't " + "exist in the mining schema Instances!");      }      newVal=valIndex;    } else {      newVal=m_missingValueReplacementNumeric;    }  }  return newVal;}  }
class C{  public static int binarySearchFromTo(float[] list,float key,int from,int to){  float midVal;  while (from <= to) {    int mid=(from + to) / 2;    midVal=list[mid];    if (midVal < key)     from=mid + 1; else     if (midVal > key)     to=mid - 1; else     return mid;  }  return -(from + 1);}  }
class C{  public void handleProblemMarkers(boolean switchToErrorPage){  int errorPageIndex=-1;  int currentPageIndex=getActivePage();  try {    IMarker[] modelProblemMarkers=model.getMarkers();    DataBindingManager dm=getDataBindingManager();    for (int i=0; i < this.pagesToAdd.length; i++) {      IMessageManager mm=this.pagesToAdd[i].getManagedForm().getMessageManager();      mm.setAutoUpdate(false);    }    for (int j=0; j < getPageCount(); j++) {      if (pages.get(j) instanceof BasicFormPage) {        BasicFormPage page=(BasicFormPage)pages.get(j);        Assert.isNotNull(page.getManagedForm(),"Page not initialized, this is a bug.");        for (int i=0; i < modelProblemMarkers.length; i++) {          String attributeName=modelProblemMarkers[i].getAttribute(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_NAME,IModelConfigurationDefaults.EMPTY_STRING);          int bubbleType=-1;          if (modelProblemMarkers[i].getType().equals(Model.TLC_MODEL_ERROR_MARKER_SANY)) {            bubbleType=IMessageProvider.ERROR;          } else           if (modelProblemMarkers[i].getType().equals(ModelHelper.TLC_MODEL_ERROR_MARKER_TLC)) {            bubbleType=IMessageProvider.WARNING;          } else {            bubbleType=IMessageProvider.INFORMATION;          }          if (ModelHelper.EMPTY_STRING.equals(attributeName)) {            final String message=modelProblemMarkers[i].getAttribute(IMarker.MESSAGE,IModelConfigurationDefaults.EMPTY_STRING);            final int pageId=modelProblemMarkers[i].getAttribute(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_PAGE,-1);            if (pageId != -1 && bubbleType == IMessageProvider.WARNING && !IModelConfigurationDefaults.EMPTY_STRING.equals(message)) {              this.pagesToAdd[pageId].addGlobalTLCErrorMessage(ResultPage.RESULT_PAGE_PROBLEM,message);            } else             if (bubbleType == IMessageProvider.WARNING) {              this.pagesToAdd[0].addGlobalTLCErrorMessage("modelProblem_" + i);              this.pagesToAdd[1].addGlobalTLCErrorMessage("modelProblem_" + i);            } else {              IMessageManager mm=this.pagesToAdd[0].getManagedForm().getMessageManager();              mm.addMessage("modelProblem_" + i,message,null,bubbleType);            }          } else {            String sectionId=dm.getSectionForAttribute(attributeName);            Assert.isNotNull(sectionId,"Page is either not initialized or attribute not bound, this is a bug.");            String pageId=dm.getSectionPage(sectionId);            IMessageManager mm=page.getManagedForm().getMessageManager();            String message=modelProblemMarkers[i].getAttribute(IMarker.MESSAGE,IModelConfigurationDefaults.EMPTY_STRING);            Control widget=UIHelper.getWidget(dm.getAttributeControl(attributeName));            if (widget != null) {              mm.addMessage("modelProblem_" + i,message,pageId,bubbleType,widget);            }            dm.expandSection(sectionId);            if (page.getId().equals(pageId) && errorPageIndex < j) {              errorPageIndex=j;            }          }        }      }    }    for (int i=0; i < this.pagesToAdd.length; i++) {      final IMessageManager mm=this.pagesToAdd[i].getManagedForm().getMessageManager();      mm.setAutoUpdate(true);    }    if (switchToErrorPage && errorPageIndex != -1 && currentPageIndex != errorPageIndex) {      setActivePage(errorPageIndex);    }  } catch (  CoreException e) {    TLCUIActivator.getDefault().logError("Error retrieving model error markers",e);  }}  }
class C{  public void produceMsg(String text,int num,boolean purgeFirst) throws Exception {  String[] array=new String[num];  for (int i=0; i < num; i++) {    array[i]=text;  }  produceMsg(array,purgeFirst);}  }
class C{  public void java_lang_System_setIn0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable sysIn=helper.staticField("java.lang.System","in");  helper.assign(sysIn,params[0]);}  }
class C{  protected AbstractResourceUndoState(IResource resource){  parent=resource.getParent();  if (resource.isAccessible()) {    modificationStamp=resource.getModificationStamp();    localTimeStamp=resource.getLocalTimeStamp();    resourceAttributes=resource.getResourceAttributes();    try {      IMarker[] markers=resource.findMarkers(null,true,IResource.DEPTH_INFINITE);      markerDescriptions=new MarkerUndoState[markers.length];      for (int i=0; i < markers.length; i++) {        markerDescriptions[i]=new MarkerUndoState(markers[i]);      }    } catch (    CoreException e) {    }  }}  }
class C{  public String queryTipText(){  return "The SQL query to execute against the database.";}  }
class C{  public void trimToSize(){  if (count < value.length) {    char[] newValue=new char[count];    System.arraycopy(value,0,newValue,0,count);    value=newValue;    shared=false;  }}  }
class C{  private Object readResolve(){  return getInstance(getZone(),iCutoverInstant,getMinimumDaysInFirstWeek());}  }
class C{  @SuppressWarnings("unchecked") public static <E>Function<E,E> identity(){  return (Function<E,E>)IdentityFunction.INSTANCE;}  }
class C{  public void threadAssertEquals(Object x,Object y){  if (x != y && (x == null || !x.equals(y))) {    threadFailed=true;    assertEquals(x,y);  }}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Class_info cc=(CONSTANT_Class_info)(constant_pool[class_index]);  CONSTANT_NameAndType_info cn=(CONSTANT_NameAndType_info)(constant_pool[name_and_type_index]);  return cc.toString(constant_pool) + "." + cn.toString(constant_pool);}  }
class C{  @Override public int hashCode(){  return lowerBound.hashCode() * 31 + upperBound.hashCode();}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public GetMusicVideos(String... properties){  super();  addParameterToRequest("properties",properties);}  }
class C{  public static String millisToString(long millis){  boolean negative=millis < 0;  millis=Math.abs(millis);  millis/=1000;  int sec=(int)(millis % 60);  millis/=60;  int min=(int)(millis % 60);  millis/=60;  int hours=(int)millis;  String time;  DecimalFormat format=(DecimalFormat)NumberFormat.getInstance(Locale.US);  format.applyPattern("00");  if (millis > 0) {    time=(negative ? "-" : "") + hours + ":"+ format.format(min)+ ":"+ format.format(sec);  } else {    time=(negative ? "-" : "") + min + ":"+ format.format(sec);  }  return time;}  }
class C{  public static void serializeFloat(float valf,byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  int val=Float.floatToIntBits(valf);  buffer[0 + offsetInt]=(byte)((val >> 24) & 0xFF);  buffer[1 + offsetInt]=(byte)((val >> 16) & 0xFF);  buffer[2 + offsetInt]=(byte)((val >> 8) & 0xFF);  buffer[3 + offsetInt]=(byte)(val & 0xFF);  offset.add(Type.FLOAT.getByteSize());}  }
class C{  public void validate(File logDir) throws LogConsistencyException {  long prevEndSeqno=-1;  for (  LogIndexEntry entry : this.index) {    File f=new File(logDir,entry.fileName);    if (!f.exists()) {      throw new LogConsistencyException("Indexed file is missing: " + entry.toString());    }    if (prevEndSeqno >= 0 && (prevEndSeqno + 1) != entry.startSeqno) {      throw new LogConsistencyException("Start seqno does not match previous entry's end seqno value: prev end seqno=" + prevEndSeqno + " "+ entry.toString());    }    if (entry.startSeqno > entry.endSeqno) {      throw new LogConsistencyException("Start seqno greater than end seqno: " + entry.toString());    }    prevEndSeqno=entry.endSeqno;  }}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public RangedUri(String baseUri,String referenceUri,long start,long length){  Assertions.checkArgument(baseUri != null || referenceUri != null);  this.baseUri=baseUri;  this.referenceUri=referenceUri;  this.start=start;  this.length=length;}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1,3,4}) public static void arraycopy(byte[] src,int srcIdx,byte[] dst,int dstIdx,int len){  if (srcIdx >= 0 && dstIdx >= 0 && len >= 0 && (srcIdx + len) >= 0 && (srcIdx + len) <= src.length && (dstIdx + len) >= 0 && (dstIdx + len) <= dst.length) {    if ((src != dst || srcIdx >= (dstIdx + BYTES_IN_ADDRESS)) && BYTE_BULK_COPY_SUPPORTED) {      if (NEEDS_BYTE_ASTORE_BARRIER || NEEDS_BYTE_ALOAD_BARRIER) {        Offset srcOffset=Offset.fromIntZeroExtend(srcIdx);        Offset dstOffset=Offset.fromIntZeroExtend(dstIdx);        Barriers.byteBulkCopy(src,srcOffset,dst,dstOffset,len);      } else {        Memory.arraycopy8Bit(src,srcIdx,dst,dstIdx,len);      }    } else {      arraycopyPiecemeal(src,srcIdx,dst,dstIdx,len);    }  } else {    failWithIndexOutOfBoundsException();  }}  }
class C{  public void enforceContext(Resource context){  this.context=context;  enforceContext=true;}  }
class C{  public PluginWrapper(SageTVPlugin inPluggy){  pluggy=inPluggy;}  }
class C{  @Override public void process(HashMap<V,ArrayList<K>> tuple){  for (  Map.Entry<V,ArrayList<K>> e : tuple.entrySet()) {    ArrayList<K> keys;    if (map.containsKey(e.getKey())) {      keys=map.remove(e.getKey());    } else {      keys=new ArrayList<K>();    }    keys.addAll(e.getValue());  }}  }
class C{  public void paintSpinnerBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void testExpBeta2(){  this.config.planCalcScore().setBrainExpBeta(2.0);  Person person=PopulationUtils.getFactory().createPerson(Id.create(1,Person.class));  Plan plan1=PersonUtils.createAndAddPlan(person,false);  plan1.setScore(96.0);  Plan plan2=PersonUtils.createAndAddPlan(person,false);  plan2.setScore(97.0);  Plan plan3=PersonUtils.createAndAddPlan(person,false);  plan3.setScore(98.0);  Plan plan4=PersonUtils.createAndAddPlan(person,false);  plan4.setScore(99.0);  Plan plan5=PersonUtils.createAndAddPlan(person,false);  plan5.setScore(100.0);  ExpBetaPlanSelector<Plan,Person> selector=new ExpBetaPlanSelector<Plan,Person>(this.config.planCalcScore());  int cnt1=0;  int cnt2=0;  int cnt3=0;  int cnt4=0;  int cnt5=0;  for (int i=0; i < 10000; i++) {    Plan plan=selector.selectPlan(person);    if (plan == plan1)     cnt1++;    if (plan == plan2)     cnt2++;    if (plan == plan3)     cnt3++;    if (plan == plan4)     cnt4++;    if (plan == plan5)     cnt5++;  }  log.info("Plan 1 was returned " + cnt1 + " times.");  log.info("Plan 2 was returned " + cnt2 + " times.");  log.info("Plan 3 was returned " + cnt3 + " times.");  log.info("Plan 4 was returned " + cnt4 + " times.");  log.info("Plan 5 was returned " + cnt5 + " times.");  assertEquals(4,cnt1);  assertEquals(17,cnt2);  assertEquals(141,cnt3);  assertEquals(1115,cnt4);  assertEquals(8723,cnt5);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node entRef;  Node createdNode;  Node insertedNode;  Node refChild=null;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  createdNode=doc.createElement("text3");{    boolean success=false;    try {      insertedNode=entRef.insertBefore(createdNode,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  private Response changeVolumeStatus(Volume vol,String jsonInput){  String vol_status=getRequestedStatusFromRequest(jsonInput);  _log.info("Changing the status of volume : " + vol + " to "+ vol_status);  StringMap extensions=vol.getExtensions();  extensions.put(STATUS,vol_status);  _dbClient.updateObject(vol);  return Response.status(202).build();}  }
class C{  public double distance(Instance first,Instance second,double cutOffValue,PerformanceStats stats){  try {    m_Remove.input(first);    m_Filter.input(m_Remove.output());    Instance firstFiltered=m_Filter.output();    m_Remove.input(second);    m_Filter.input(m_Remove.output());    Instance secondFiltered=m_Filter.output();    return m_Distance.distance(firstFiltered,secondFiltered,cutOffValue,stats);  } catch (  Exception e) {    e.printStackTrace();    return -1;  }}  }
class C{  protected void throttleDispose(){  active=false;  stopStatusTimer();  finishRecord();}  }
class C{  public SingleStepSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public static void playLastAdded(final Context context){  playAll(getSongListForLastAdded(context),0,false);}  }
class C{  private DSAParameters generateParameters_FIPS186_3(){  Digest d=digest;  int outlen=d.getDigestSize() * 8;  int seedlen=N;  byte[] seed=new byte[seedlen / 8];  int n=(L - 1) / outlen;  int b=(L - 1) % outlen;  byte[] output=new byte[d.getDigestSize()];  for (; ; ) {    random.nextBytes(seed);    hash(d,seed,output);    BigInteger U=new BigInteger(1,output).mod(ONE.shiftLeft(N - 1));    BigInteger q=ONE.shiftLeft(N - 1).add(U).add(ONE).subtract(U.mod(TWO));    if (!q.isProbablePrime(certainty)) {      continue;    }    byte[] offset=Arrays.clone(seed);    int counterLimit=4 * L;    for (int counter=0; counter < counterLimit; ++counter) {      BigInteger W=ZERO;      for (int j=0, exp=0; j <= n; ++j, exp+=outlen) {        inc(offset);        hash(d,offset,output);        BigInteger Vj=new BigInteger(1,output);        if (j == n) {          Vj=Vj.mod(ONE.shiftLeft(b));        }        W=W.add(Vj.shiftLeft(exp));      }      BigInteger X=W.add(ONE.shiftLeft(L - 1));      BigInteger c=X.mod(q.shiftLeft(1));      BigInteger p=X.subtract(c.subtract(ONE));      if (p.bitLength() != L) {        continue;      }      if (p.isProbablePrime(certainty)) {        if (usageIndex >= 0) {          BigInteger g=calculateGenerator_FIPS186_3_Verifiable(d,p,q,seed,usageIndex);          if (g != null) {            return new DSAParameters(p,q,g,new DSAValidationParameters(seed,counter,usageIndex));          }        }        BigInteger g=calculateGenerator_FIPS186_3_Unverifiable(p,q,random);        return new DSAParameters(p,q,g,new DSAValidationParameters(seed,counter));      }    }  }}  }
class C{  public void init(GuiManualHerblore manual,boolean force){  if (currentPageLeft == null || currentPageRight == null || force) {    visiblePages.clear();    for (    Page page : pages)     if (!page.isHidden || ManualManager.hasFoundPage(manual.player,page.unlocalizedPageName,manual.manualType))     visiblePages.add(page);    if (!visiblePages.isEmpty()) {      currentPageLeft=this.visiblePages.get(0);      if (this.visiblePages.size() > 1)       currentPageRight=this.visiblePages.get(1); else       currentPageRight=blankPage;      currentPageRight.setPageToRight();    }  }  if (currentPageLeft != null)   currentPageLeft.init(manual);  if (currentPageRight != null) {    currentPageRight.init(manual);  }}  }
class C{  public static RefactoringStatus createInputFatalStatus(final Object element,final String name,final String id){  Assert.isNotNull(name);  Assert.isNotNull(id);  if (element != null)   return RefactoringStatus.createFatalErrorStatus(Messages.format(RefactoringCoreMessages.InitializableRefactoring_input_not_exists,new String[]{JavaElementLabels.getTextLabel(element,JavaElementLabels.ALL_FULLY_QUALIFIED),name,id})); else   return RefactoringStatus.createFatalErrorStatus(Messages.format(RefactoringCoreMessages.InitializableRefactoring_inputs_do_not_exist,new String[]{name,id}));}  }
class C{  public int passes(){  return soot.PhaseOptions.getInt(options,"passes");}  }
class C{  public boolean checkSignatureValue(X509Certificate cert) throws XMLSignatureException {  if (cert != null) {    return this.checkSignatureValue(cert.getPublicKey());  }  Object exArgs[]={"Didn't get a certificate"};  throw new XMLSignatureException("empty",exArgs);}  }
class C{  public static String updateSourcesAnalysisGroup(String sourceName){  final DetermineSourceGroupAtomic atomicAction=new DetermineSourceGroupAtomic(sourceName);  ExtDataStoreUtils.executeAtomicTransaction(atomicAction);  return atomicAction.getAssignedGroupName();}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public static OpenSpan startSpan(String operation,String parentSpanId,SpanType type){  Preconditions.checkState(currentTrace.get().isEmpty(),"Cannot start a span with explicit parent if the current thread's trace is non-empty");  validateId(parentSpanId,"parentTraceId must be non-empty: %s");  OpenSpan span=OpenSpan.builder().spanId(Tracers.randomId()).operation(operation).parentSpanId(parentSpanId).type(type).build();  currentTrace.get().push(span);  return span;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void putInt(long pos,int val){  unsafe.putInt(pos + addr,val);}  }
class C{  @Override public boolean queueBuild(final Shell shell,final IBuildDefinition buildDefinition,final String shelvesetName,final String gatedCheckinTicket){  return queueBuild(shell,buildDefinition,buildDefinition.getURI(),shelvesetName,gatedCheckinTicket);}  }
class C{  private boolean readQueryString(){  _currentUrlMarker.setIndex(UrlPart.QUERY,_buffer.length() - 1);  while (!_reader.eof()) {    char curr=_reader.read();    if (curr == '#') {      _buffer.append(curr);      return readFragment();    } else     if (curr == ' ' || checkMatchingCharacter(curr) != CharacterMatch.CharacterNotMatched) {      return readEnd(ReadEndState.ValidUrl);    } else {      _buffer.append(curr);    }  }  return readEnd(ReadEndState.ValidUrl);}  }
class C{  Restriction(String columnName,Object code,Object code_to,String infoName,String infoDisplay,String infoDisplay_to,boolean andCondition,int depth){  this(columnName,MQuery.BETWEEN,code,infoName,infoDisplay,andCondition,depth);  Code_to=code_to;  if (Code_to instanceof String) {    if (Code_to.toString().startsWith("'"))     Code_to=Code_to.toString().substring(1);    if (Code_to.toString().endsWith("'"))     Code_to=Code_to.toString().substring(0,Code_to.toString().length() - 2);  }  if (infoDisplay_to != null)   InfoDisplay_to=infoDisplay_to.trim(); else   if (Code_to != null)   InfoDisplay_to=Code_to.toString();}  }
class C{  public static <V>Map<String,V> removeMultiFormParameters(Map<String,V> parameters){  Map<String,V> filteredParameters=new HashMap<String,V>();  for (  Map.Entry<String,V> entry : parameters.entrySet()) {    String key=entry.getKey();    if (key != null && (key.indexOf(MULTI_ROW_DELIMITER) != -1 || key.indexOf("_useRowSubmit") != -1 || key.indexOf("_rowCount") != -1)) {      continue;    }    filteredParameters.put(key,entry.getValue());  }  return filteredParameters;}  }
class C{  private Key selectKeyFromKeyInfo(String name) throws Exception {  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();  docBuilderFactory.setNamespaceAware(true);  DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();  Document doc=builder.parse(getClass().getResourceAsStream("/" + TEST_FIXTURE_PREFIX + name+ ".xml"));  XMLSignatureFactory dsFactory=XMLSignatureFactory.getInstance("DOM");  KeyInfo keyInfo=dsFactory.getKeyInfoFactory().unmarshalKeyInfo(new DOMStructure(doc.getDocumentElement()));  return new X509TrustChainKeySelector(CERT_ROOT_CA,CERT_CA1).select(keyInfo,KeySelector.Purpose.VERIFY,null,null).getKey();}  }
class C{  @Override public Joiner join(Class<? extends DataObject> clazz,String alias){  return new Joiner(getDbClient()).join(clazz,alias);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setMute(evalBool(stack.pop()));  return null;}  }
class C{  public VelocityPartitionScanner(){  List<IPredicateRule> rules=new ArrayList<>();  rules.add(new EndOfLineRule("##",new Token(SINGLE_LINE_COMMENT)));  rules.add(new SingleLineRule("\"","\"",new Token(PARSED_STRING),'\\'));  rules.add(new SingleLineRule("'","'",new Token(UNPARSED_STRING),'\\'));  rules.add(new MultiLineRule("#**","*#",new Token(DOC_COMMENT)));  rules.add(new MultiLineRule("#*","*#",new Token(MULTI_LINE_COMMENT)));  rules.add(new WordPatternRule(new EmptyCommentDetector(),"#***#",null,new Token(DOC_COMMENT)));  rules.add(new WordPatternRule(new EmptyCommentDetector(),"#**#",null,new Token(MULTI_LINE_COMMENT)));  IPredicateRule[] result=new IPredicateRule[rules.size()];  rules.toArray(result);  setPredicateRules(result);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF__DECLARED_TYPE:    if (resolve)     return getDeclaredType();  return basicGetDeclaredType();case TypeRefsPackage.PARAMETERIZED_TYPE_REF__TYPE_ARGS:return getTypeArgs();case TypeRefsPackage.PARAMETERIZED_TYPE_REF__ARRAY_TYPE_LITERAL:return isArrayTypeLiteral();case TypeRefsPackage.PARAMETERIZED_TYPE_REF__DEFINED_TYPING_STRATEGY:return getDefinedTypingStrategy();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean isAssociatedToRpVplexType(Volume volume,DbClient dbClient,PersonalityTypes... types){  final List<Volume> vplexVirtualVolumes=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Volume.class,getVolumesByAssociatedId(volume.getId().toString()));  for (  Volume vplexVirtualVolume : vplexVirtualVolumes) {    if (NullColumnValueGetter.isNotNullValue(vplexVirtualVolume.getPersonality())) {      for (      PersonalityTypes type : types) {        if (vplexVirtualVolume.checkPersonality(type)) {          return true;        }      }    }  }  return false;}  }
class C{  private boolean checkForIvrZoneSession(String[] lines,Integer retryCount) throws NetworkDeviceControllerException {  return checkForZoneSession(lines,retryCount,true);}  }
class C{  public void valueChanged(int value){  mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG,value,0));}  }
class C{  public static void warning(ErrorMessages message,int line){  warnings++;  String msg=NL + "Warning";  if (line > 0)   msg=msg + " in line " + (line + 1);  err(msg + ": " + ErrorMessages.get(message));}  }
class C{  public void add(int i,int data){  if (_length + 1 > _capacity)   ensureCapacity(_length + 1);  System.arraycopy(_buffer,i,_buffer,i + 1,_length - i);  _buffer[i]=(byte)data;  _length+=1;}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_splitThread != null) {    newVector.addElement("Stop");  }  return newVector.elements();}  }
class C{  protected StringBuffer inlineValueSB(Environment env,Context ctx,StringBuffer buffer){  if (type != Type.tString) {    return super.inlineValueSB(env,ctx,buffer);  }  buffer=left.inlineValueSB(env,ctx,buffer);  if (buffer != null) {    buffer=right.inlineValueSB(env,ctx,buffer);  }  return buffer;}  }
class C{  private void trainDocVectors() throws IOException {  VerbatimLogger.info("Building document vectors ... ");  Enumeration<ObjectVector> termEnum=termVectors.getAllVectors();  try {    int tc=0;    while (termEnum.hasMoreElements()) {      if ((tc % 10000 == 0) || (tc < 10000 && tc % 1000 == 0)) {        VerbatimLogger.info("Processed " + tc + " terms ... ");      }      tc++;      ObjectVector termVectorObject=termEnum.nextElement();      Vector termVector=termVectorObject.getVector();      String word=(String)termVectorObject.getObject();      for (      String fieldName : flagConfig.contentsfields()) {        Term term=new Term(fieldName,word);        float globalweight=luceneUtils.getGlobalTermWeight(term);        float fieldweight=1;        DocsEnum docsEnum=this.luceneUtils.getDocsForTerm(term);        if (docsEnum == null) {          continue;        }        while (docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS) {          String externalDocID=luceneUtils.getExternalDocId(docsEnum.docID());          Vector docVector=this.docVectors.getVector(externalDocID);          float localweight=docsEnum.freq();          if (flagConfig.fieldweight()) {            TermsEnum terms=luceneUtils.getTermVector(docsEnum.docID(),fieldName).iterator(null);            int numTerms=0;            while (terms.next() != null) {              numTerms++;            }            fieldweight=(float)(1 / Math.sqrt(numTerms));          }          docVector.superpose(termVector,localweight * globalweight * fieldweight,null);        }      }    }  } catch (  IOException e) {    e.printStackTrace();  }  VerbatimLogger.info("\nNormalizing doc vectors ...\n");  Enumeration<ObjectVector> docEnum=docVectors.getAllVectors();  while (docEnum.hasMoreElements())   docEnum.nextElement().getVector().normalize();}  }
class C{  public boolean inLearnMoreUrl(Point point){  double urlYStart=GOOGLE_IMAGE_NORTH + googleImageLabel.getIcon().getIconHeight() + WELCOME_LABEL_NORTH+ (generalFontHeight * 2)+ 3;  double urlYEnd=urlYStart + learnMoreLabelDimension.getHeight();  double urlXStart=GOOGLE_IMAGE_WEST;  double urlXEnd=urlXStart + learnMoreLabelDimension.getWidth();  return (point.getX() > urlXStart) && (point.getX() < urlXEnd) && (point.getY() > urlYStart)&& (point.getY() < urlYEnd);}  }
class C{  protected static byte[] createBuffer(final int initialCapacity){  if (initialCapacity < 0) {    throw new IllegalArgumentException("initialCapacity must be non-negative");  }  final int capacity=initialCapacity == 0 ? DEFAULT_INITIAL_CAPACITY : initialCapacity;  return new byte[capacity];}  }
class C{  private void putCommitTimestamp(long commitTimestamp,LockRefreshToken locksToken,TransactionService transactionService) throws TransactionFailedException {  Validate.isTrue(commitTimestamp > getStartTimestamp(),"commitTs must be greater than startTs");  try {    transactionService.putUnlessExists(getStartTimestamp(),commitTimestamp);  } catch (  KeyAlreadyExistsException e) {    handleKeyAlreadyExistsException(commitTimestamp,e,locksToken);  }catch (  Exception e) {    TransactionCommitFailedException commitFailedEx=new TransactionCommitFailedException("This transaction failed writing the commit timestamp. " + "It might have been committed, but it may not have.",e);    log.error("failed to commit an atlasdb transaction",commitFailedEx);    throw commitFailedEx;  }}  }
class C{  protected synchronized void damage(Rectangle r){  if (r != null) {    int damageWidth=getCaretWidth(r.height);    x=r.x - 4 - (damageWidth >> 1);    y=r.y;    width=9 + damageWidth;    height=r.height;    repaint();  }}  }
class C{  public boolean isAlive(){  return alive || pendingJumps != null;}  }
class C{  private int parseStreams(String json,Set<StreamInfo> streamInfos){  try {    JSONParser parser=new JSONParser();    JSONArray streamsArray;    try {      JSONObject root=(JSONObject)parser.parse(json);      streamsArray=(JSONArray)root.get("streams");    } catch (    ClassCastException ex) {      LOGGER.warning("Error parsing streams: unexpected type");      streamsRequestError(streamInfos);      return -1;    }    if (streamsArray == null) {      LOGGER.warning("Error parsing streams: streams array not found");      streamsRequestError(streamInfos);      return -1;    }    for (    Object obj : streamsArray) {      if (obj instanceof JSONObject) {        StreamInfo parsedInfo=parseStream((JSONObject)obj,streamInfos == null);        if (parsedInfo == null) {          LOGGER.warning("Error parsing stream " + (JSONObject)obj);        }        if (streamInfos != null) {          streamInfos.remove(parsedInfo);        }      } else {        LOGGER.warning("Element in array wasn't JSONObject " + obj);      }    }    if (streamInfos != null) {      for (      StreamInfo info : streamInfos) {        info.setOffline();      }    }    return streamsArray.size();  } catch (  ParseException ex) {    LOGGER.warning("Error parsing streams info: " + ex.getLocalizedMessage());    streamsRequestError(streamInfos);    return -1;  }}  }
class C{  private void save(TemplatePersistenceData[] templates,StreamResult result) throws IOException {  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder builder=factory.newDocumentBuilder();    Document document=builder.newDocument();    Node root=document.createElement(TEMPLATE_ROOT);    document.appendChild(root);    for (int i=0; i < templates.length; i++) {      TemplatePersistenceData data=templates[i];      Template template=data.getTemplate();      Node node=document.createElement(TEMPLATE_ELEMENT);      root.appendChild(node);      NamedNodeMap attributes=node.getAttributes();      String id=data.getId();      if (id != null) {        Attr idAttr=document.createAttribute(ID_ATTRIBUTE);        idAttr.setValue(id);        attributes.setNamedItem(idAttr);      }      if (template != null) {        Attr name=document.createAttribute(NAME_ATTRIBUTE);        name.setValue(validateXML(template.getName()));        attributes.setNamedItem(name);      }      if (template != null) {        Attr description=document.createAttribute(DESCRIPTION_ATTRIBUTE);        description.setValue(validateXML(template.getDescription()));        attributes.setNamedItem(description);      }      if (template != null) {        Attr context=document.createAttribute(CONTEXT_ATTRIBUTE);        context.setValue(validateXML(template.getContextTypeId()));        attributes.setNamedItem(context);      }      Attr enabled=document.createAttribute(ENABLED_ATTRIBUTE);      enabled.setValue(data.isEnabled() ? Boolean.toString(true) : Boolean.toString(false));      attributes.setNamedItem(enabled);      Attr deleted=document.createAttribute(DELETED_ATTRIBUTE);      deleted.setValue(data.isDeleted() ? Boolean.toString(true) : Boolean.toString(false));      attributes.setNamedItem(deleted);      if (template != null) {        Attr autoInsertable=document.createAttribute(AUTO_INSERTABLE_ATTRIBUTE);        autoInsertable.setValue(template.isAutoInsertable() ? Boolean.toString(true) : Boolean.toString(false));        attributes.setNamedItem(autoInsertable);      }      if (template != null) {        Text pattern=document.createTextNode(validateXML(template.getPattern()));        node.appendChild(pattern);      }    }    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.METHOD,"xml");    transformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");    DOMSource source=new DOMSource(document);    transformer.transform(source,result);  } catch (  ParserConfigurationException e) {    Assert.isTrue(false);  }catch (  TransformerException e) {    if (e.getException() instanceof IOException)     throw (IOException)e.getException();    Assert.isTrue(false);  }}  }
class C{  private static void buildElevationGrid(Network network,double delta){  LOG.info("Generating a regular grid for the network...");  CoordinateTransformation ct=TransformationFactory.getCoordinateTransformation("WGS84_SA_Albers","WGS84");  double gridSize=0.001;  double xMin=Double.POSITIVE_INFINITY;  double xMax=Double.NEGATIVE_INFINITY;  double yMin=Double.POSITIVE_INFINITY;  double yMax=Double.NEGATIVE_INFINITY;  for (  Node n : network.getNodes().values()) {    Coord c=ct.transform(n.getCoord());    xMin=Math.min(xMin,c.getX());    xMax=Math.max(xMax,c.getX());    yMin=Math.min(yMin,c.getY());    yMax=Math.max(yMax,c.getY());  }  Coord blc=Utils3D.getBottomLeftCoordinate(network);  LOG.info("Bottom-left corner: " + blc.toString());  String tileName=Utils3D.getSrtmTile(blc);  File srtmFile=new File(path + "data/tiles/" + tileName+ ".hgt");  if (!srtmFile.exists() || !srtmFile.canRead()) {    LOG.error("Cannot read SRTM tile from " + srtmFile.getAbsolutePath());  } else {    LOG.info("Can read SRTM file from " + srtmFile.getAbsolutePath());  }  SrtmTile srtmTile=new SrtmTile(srtmFile);  Counter counter=new Counter("  cells # ");  BufferedWriter bw=IOUtils.getBufferedWriter(path + "/data/pta_grid.csv.gz");  try {    bw.write("x,y,z");    bw.newLine();    for (double x=xMin - 0.5 * gridSize; x <= xMax + 0.5 * gridSize; x+=gridSize) {      for (double y=yMin - 0.5 * gridSize; y <= yMax + 0.5 * gridSize; y+=gridSize) {        double z=srtmTile.getElevation(x,y);        bw.write(String.format("%.5f,%.5f,%.0f\n",x,y,z + delta));        counter.incCounter();      }    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to grid file.");  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close grid file.");    }  }  counter.printCounter();  LOG.info("Done with grid.");}  }
class C{  public boolean inBubble(Geo v2,double forwardRadius,double backRadius,Geo p){  return distance(p) <= ((v2.subtract(this).normalize().dot(p.subtract(this)) > 0.0) ? forwardRadius : backRadius);}  }
class C{  public boolean handles(Intent intent){  IAppSuggestManager mgr=getService();  if (mgr == null)   return false;  try {    return mgr.handles(intent);  } catch (  RemoteException e) {    return false;  }}  }
class C{  static MortarScope createScope(MortarScope parentScope,Stackable stackable,String scopeName){  MortarScope.Builder scopeBuilder=parentScope.buildChild();  stackable.configureScope(scopeBuilder,parentScope);  return scopeBuilder.build(scopeName);}  }
class C{  public int size(){  return probabilities.length;}  }
class C{  public int recordParams(CtClass[] params,boolean isStatic) throws CompileError {  return gen.recordParams(params,isStatic,"$","$args","$$",stable);}  }
class C{  void scheduleHeronWorkers(Set<ContainerPlan> containers) throws ContainerAllocationException {  for (  ContainerPlan containerPlan : containers) {    if (containerPlans.containsKey(containerPlan.getId())) {      throw new ContainerAllocationException("Received duplicate allocation request for " + containerPlan.getId());    }    containerPlans.put(containerPlan.getId(),containerPlan);    Resource reqResource=containerPlan.getRequiredResource();    int mem=getMemInMBForExecutor(reqResource);    int cores=getCpuForExecutor(reqResource);    launchContainerForExecutor(containerPlan.getId(),cores,mem);  }}  }
class C{  protected Anonymous_guard_2_Impl(){  super();}  }
class C{  private MPInstance fillParameter(HttpServletRequest request,MProcess process){  MPInstance pInstance=new MPInstance(process,0);  MPInstancePara[] iParams=pInstance.getParameters();  for (int pi=0; pi < iParams.length; pi++) {    MPInstancePara iPara=iParams[pi];    String key=iPara.getParameterName();    MProcessPara pPara=process.getParameter(key);    if (pPara == null) {      log.log(Level.SEVERE,"Parameter not found: " + key);      continue;    }    String valueString=MobileUtil.getParameter(request,key);    log.fine("fillParameter - " + key + " = "+ valueString);    Object value=valueString;    if (valueString != null && valueString.length() == 0)     value=null;    if (value == null) {    } else {      try {        if (DisplayType.isNumeric(pPara.getAD_Reference_ID()) || DisplayType.isID(pPara.getAD_Reference_ID())) {          BigDecimal bd=null;          if (value instanceof BigDecimal)           bd=(BigDecimal)value; else           if (value instanceof Integer)           bd=new BigDecimal(((Integer)value).intValue()); else           bd=new BigDecimal(value.toString());          iPara.setP_Number(bd);          log.fine("fillParameter - " + key + " = "+ valueString+ " (="+ bd+ "=)");        } else         if (DisplayType.isDate(pPara.getAD_Reference_ID())) {          Timestamp ts=null;          if (value instanceof Timestamp)           ts=(Timestamp)value; else           ts=Timestamp.valueOf(value.toString());          iPara.setP_Date(ts);          log.fine("fillParameter - " + key + " = "+ valueString+ " (="+ ts+ "=)");        } else {          if (pPara.getAD_Reference_ID() == DisplayType.YesNo)           value="true".equalsIgnoreCase(value.toString()) ? "Y" : "N";          iPara.setP_String(value.toString());        }        iPara.saveEx();      } catch (      Exception e) {        log.warning("fillParameter - " + key + " = "+ valueString+ " ("+ value+ ") "+ value.getClass().getName()+ " - "+ e.getLocalizedMessage());      }    }  }  return pInstance;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public boolean isPinned(){  return (true);}  }
class C{  public Object withBuilder(Map attributes,FactoryBuilderSupport builder,String name,Closure closure){  if (name == null) {    return null;  }  Object result=getProxyBuilder().withBuilder(builder,closure);  return getProxyBuilder().invokeMethod(name,new Object[]{attributes,result});}  }
class C{  public OperatorList(){  this(false,true);}  }
class C{  public boolean equals(java.lang.Object obj){  return false;}  }
class C{  private void loadPolygons(){  System.out.println("Load a polygon file");  final String polyName=new FileOpen("Load A Polygon File",s_mapFolderLocation,".txt").getPathString();  try {    if (polyName == null) {      return;    }    final FileInputStream in=new FileInputStream(polyName);    m_polygons=PointFileReaderWriter.readOneToManyPolygons(in);    repaint();  } catch (  final FileNotFoundException ex) {    ClientLogger.logQuietly("file name = " + polyName,ex);  }catch (  final HeadlessException ex) {    ClientLogger.logQuietly(ex);  }}  }
class C{  protected byte[] ftpGet(final String urlString){  InputStream inputStream=null;  try {    final URL url=new URL(urlString);    inputStream=url.openStream();    return DSSUtils.toByteArray(inputStream);  } catch (  Exception e) {    LOG.warn(e.getMessage());  } finally {    IOUtils.closeQuietly(inputStream);  }  return null;}  }
class C{  public static boolean isValidSpace(int c){  return c <= 0x20 && (MASKS[c] & SPACE_CHARACTER) != 0;}  }
class C{  public static void saveBrokerIP(Context context,String ip){  SharedPreferences.Editor editor=getSharedPreferences(context).edit();  editor.putString(KEY_BROKER_IP,ip);  editor.commit();}  }
class C{  @Override public boolean isToolNotRequired(){  return this.requiresNoTool;}  }
class C{  protected void checkCustomComposite(){  return;}  }
class C{  public ToStringBuilder append(final String fieldName,final double[] array,final boolean fullDetail){  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));  return this;}  }
class C{  final boolean link(Index<K,V> succ,Index<K,V> newSucc){  Node<K,V> n=node;  newSucc.right=succ;  return n.value != null && casRight(succ,newSucc);}  }
class C{  @Override public void generateCode(BlockScope currentScope){  if ((this.bits & IsReachable) == 0) {    return;  }  this.expression.generateCode(this.scope,true);  if (!this.block.isEmptyBlock()) {    this.block.generateCode(this.scope);  }}  }
class C{  @Override public Properties trackSingleVideoDownload(String videoId,String courseId,String unitUrl){  SegmentAnalyticsEvent aEvent=getCommonProperties(videoId,Values.SINGLE_VIDEO_DOWNLOAD);  aEvent.setCourseContext(courseId,unitUrl,Values.DOWNLOAD_MODULE);  tracker.track(Events.SINGLE_VIDEO_DOWNLOAD,aEvent.properties);  return aEvent.properties;}  }
class C{  public static void put(SystemPreferenceKey key,String value){  putNoFlush(key,value);  flush();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static ConditionEvaluationResult enabled(String reason){  return new ConditionEvaluationResult(true,reason);}  }
class C{  public void appendTo(StringBuilder out,Charset encoding){  try {    appendTo((Appendable)out,encoding);  } catch (  IOException e) {    throw new AssertionError(e);  }}  }
class C{  public TermSuggestionBuilder maxInspections(Integer maxInspections){  this.maxInspections=maxInspections;  return this;}  }
class C{  public static RVMType objectAsType(Object object){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  return (RVMType)object;}  }
class C{  public static BufferedWriter newWriter(Path self,boolean append) throws IOException {  if (append) {    return Files.newBufferedWriter(self,Charset.defaultCharset(),CREATE,APPEND);  }  return Files.newBufferedWriter(self,Charset.defaultCharset());}  }
class C{  private void addFillet(Coordinate p,double startAngle,double endAngle,int direction,double radius){  int directionFactor=direction == CGAlgorithms.CLOCKWISE ? -1 : 1;  double totalAngle=Math.abs(startAngle - endAngle);  int nSegs=(int)(totalAngle / filletAngleQuantum + 0.5);  if (nSegs < 1)   return;  double initAngle, currAngleInc;  initAngle=0.0;  currAngleInc=totalAngle / nSegs;  double currAngle=initAngle;  Coordinate pt=new Coordinate();  while (currAngle < totalAngle) {    double angle=startAngle + directionFactor * currAngle;    pt.x=p.x + radius * Math.cos(angle);    pt.y=p.y + radius * Math.sin(angle);    segList.addPt(pt);    currAngle+=currAngleInc;  }}  }
class C{  public ExecutionEnvironmentBuilder(@NotNull ExecutionEnvironment copySource){  myTarget=copySource.getExecutionTarget();  myProject=copySource.getProject();  myRunnerAndConfigurationSettings=copySource.getRunnerAndConfigurationSettings();  myRunProfile=copySource.getRunProfile();  myRunnerSettings=copySource.getRunnerSettings();  myConfigurationSettings=copySource.getConfigurationSettings();  myRunner=copySource.getRunner();  myContentToReuse=copySource.getContentToReuse();  myExecutor=copySource.getExecutor();}  }
class C{  public boolean containsViewClass(Class<? extends BindableLayout> viewClass){  return viewClasses().contains(viewClass);}  }
class C{  public void selectNewPhoto(){  removeFromCache();  final Intent intent=new Intent();  if (Build.VERSION.SDK_INT < 19) {    intent.setAction(Intent.ACTION_GET_CONTENT);  } else {    intent.setAction("android.intent.action.OPEN_DOCUMENT");    intent.addCategory(Intent.CATEGORY_OPENABLE);  }  intent.setType("image/*");  startActivityForResult(intent,NEW_PHOTO);}  }
class C{  protected JCCompilationUnit parse(JavaFileObject filename,CharSequence content){  long msec=now();  JCCompilationUnit tree=make.TopLevel(List.<JCTree.JCAnnotation>nil(),null,List.<JCTree>nil());  if (content != null) {    if (verbose) {      log.printVerbose("parsing.started",filename);    }    if (!taskListener.isEmpty()) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.PARSE,filename);      taskListener.started(e);      keepComments=true;      genEndPos=true;    }    Parser parser=parserFactory.newParser(content,keepComments(),genEndPos,lineDebugInfo);    tree=parser.parseCompilationUnit();    if (verbose) {      log.printVerbose("parsing.done",Long.toString(elapsed(msec)));    }  }  tree.sourcefile=filename;  if (content != null && !taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.PARSE,tree);    taskListener.finished(e);  }  return tree;}  }
class C{  private void sendServerMessage() throws NoSuchAlgorithmException, IOException {  if (mRemoteClientMessage == null) {    throw new IOException("Remote client message was null in sendServerMessage.");  } else   if (mRemoteClientMessage.blindedFriends == null) {    throw new IOException("Remove client message blinded friends is null in sendServerMessage.");  }  ArrayList<byte[]> remoteBlindedItems;  remoteBlindedItems=Crypto.byteStringsToArrays(mRemoteClientMessage.blindedFriends);  ServerReplyTuple srt;  try {    srt=mServerPSI.replyToBlindedItems(remoteBlindedItems);  } catch (  NoSuchAlgorithmException e) {    Log.wtf(TAG,"No such algorithm in replyToBlindedItems: " + e);    setExchangeStatus(Status.ERROR);    setErrorMessage("PSI subsystem is broken, NoSuchAlgorithmException");    throw e;  }catch (  IllegalArgumentException e) {    Log.wtf(TAG,"Null passed to replyToBlindedItems on serverPSI? " + e);    setExchangeStatus(Status.ERROR);    setErrorMessage("Bad argument to server PSI subsystem. (null remoteBlindedItems?)");    throw e;  }  ArrayList<ByteString> doubleBlindedStrings=Crypto.byteArraysToStrings(srt.doubleBlindedItems);  ArrayList<ByteString> hashedBlindedStrings=Crypto.byteArraysToStrings(srt.hashedBlindedItems);  ServerMessage sm=new ServerMessage.Builder().doubleBlindedFriends(doubleBlindedStrings).hashedBlindedFriends(hashedBlindedStrings).build();  boolean success=lengthValueWrite(out,sm);  if (!success) {    setExchangeStatus(Status.ERROR);    setErrorMessage("Length/value write of server message failed.");    throw new IOException("Length/value write of server message failed, but exception is hidden (see Exchange.java)");  }}  }
class C{  static StreamTestStreamStore of(StreamTestTableFactory tables){  return new StreamTestStreamStore(null,tables);}  }
class C{  public static boolean assertCumulative(final double[] da){  final double tolerance=0.000001;  Exam.assertTrue(Utils.realFormatArray(da),da.length > 0);  double prev=Double.NEGATIVE_INFINITY;  for (  final double d : da) {    Exam.assertTrue(Utils.realFormat(d),d >= 0.0 && d <= (1.0 + tolerance) && !Double.isNaN(d));    Exam.assertTrue(prev <= d);    prev=d;  }  if (checkEquals(1.0,prev,tolerance)) {    return true;  }  throw new Exam.ExamException(Utils.realFormatArray(da));}  }
class C{  @Override public String toString(){  return value != null ? String.format("Optional[%s]",value) : "Optional.empty";}  }
class C{  public long nextLong(){  return 0l;}  }
class C{  @Override public final void addBezierCurveV(final float x2,final float y2,final float x3,final float y3){  elements.add(new CubicCurveTo(currentPos[0],currentPos[1],x2,y2,x3,y3));  currentPos[0]=x3;  currentPos[1]=y3;}  }
class C{  protected double calculateLogLikelihood(){  if (reconstructTree) {    reconstructTree();  }  NodeRef root=tree.getRoot();  if (rootPartials == null) {    rootPartials=new double[patternCount * stateCount];  }  if (patternLogLikelihoods == null) {    patternLogLikelihoods=new double[patternCount];  }  if (!integrateAcrossCategories) {    if (siteCategories == null) {      siteCategories=new int[patternCount];    }    for (int i=0; i < patternCount; i++) {      siteCategories[i]=siteModel.getCategoryOfSite(i);    }  }  try {    traverse(tree,root);  } catch (  NegativeBranchLengthException e) {    System.err.println("Negative branch length found, trying to return 0 likelihood");    return Double.NEGATIVE_INFINITY;  }  for (int i=0; i < nodeCount; i++) {    updateNode[i]=false;  }  double logL=0.0;  for (int i=0; i < patternCount; i++) {    logL+=patternLogLikelihoods[i] * patternWeights[i];  }  return logL;}  }
class C{  public static double chisqRand(double df){  return (2.0 * gammaRand(df / 2.0));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int oldProgress;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int rowsLessOne=rows - 1;    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    if (myHost != null) {      DEM.setCommunicator(myHost);      output.setCommunicator(myHost);    }    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          dist=diagGridRes;          maxSlope=-99999999;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope > maxSlope) {                maxSlope=slope;                flowDir=1 << i;              }            }            if (dist == gridRes) {              dist=diagGridRes;            } else {              dist=gridRes;            }          }          if (maxSlope > 0) {            output.setValue(row,col,flowDir);          } else {            output.setValue(row,col,0);          }        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void removeAll(final boolean mark){  if (mark) {    AbstractInsnNode insn=first;    while (insn != null) {      AbstractInsnNode next=insn.next;      insn.index=-1;      insn.prev=null;      insn.next=null;      insn=next;    }  }  size=0;  first=null;  last=null;  cache=null;}  }
class C{  public void readTstData(String dataFile){  if (tstData != null) {    tstData.clear();  } else {    tstData=new ArrayList();  }  BufferedReader fin=null;  try {    fin=new BufferedReader(new InputStreamReader(new FileInputStream(dataFile),"UTF-8"));    System.out.println("Reading testing data ...");    String line;    while ((line=fin.readLine()) != null) {      StringTokenizer strTok=new StringTokenizer(line," \t\r\n");      int len=strTok.countTokens();      if (len <= 1) {        continue;      }      List strCps=new ArrayList();      for (int i=0; i < len - 1; i++) {        strCps.add(strTok.nextToken());      }      String labelStr=strTok.nextToken();      List intCps=new ArrayList();      for (int i=0; i < strCps.size(); i++) {        String cpStr=(String)strCps.get(i);        Integer cpInt=(Integer)cpStr2Int.get(cpStr);        if (cpInt != null) {          intCps.add(cpInt);        } else {        }      }      Integer labelInt=(Integer)lbStr2Int.get(labelStr);      if (labelInt == null) {        System.out.println("Reading testing observation, label not found or invalid");        return;      }      int[] cps=new int[intCps.size()];      for (int i=0; i < cps.length; i++) {        cps[i]=((Integer)intCps.get(i)).intValue();      }      Observation obsr=new Observation(labelInt.intValue(),cps);      tstData.add(obsr);    }    System.out.println("Reading " + Integer.toString(tstData.size()) + " testing data examples completed!");  } catch (  IOException e) {    System.out.println(e.toString());    return;  }  option.numTestExps=tstData.size();}  }
class C{  private String updateConfigurationOnly(DeployConfig config){  UpdateFunctionConfigurationRequest updateFunctionConfigurationRequest=new UpdateFunctionConfigurationRequest().withFunctionName(config.getFunctionName()).withDescription(config.getDescription()).withHandler(config.getHandler()).withMemorySize(config.getMemorySize()).withTimeout(config.getTimeout()).withRole(config.getRole()).withRuntime(config.getRuntime());  if (config.getSubnets().size() > 0 && config.getSecurityGroups().size() > 0) {    VpcConfig vpcConfig=new VpcConfig().withSubnetIds(config.getSubnets()).withSecurityGroupIds(config.getSecurityGroups());    updateFunctionConfigurationRequest.withVpcConfig(vpcConfig);  }  logger.log("Lambda update configuration request:%n%s%n",updateFunctionConfigurationRequest.toString());  UpdateFunctionConfigurationResult updateFunctionConfigurationResult=client.updateFunctionConfiguration(updateFunctionConfigurationRequest);  logger.log("Lambda update configuration response:%n%s%n",updateFunctionConfigurationResult.toString());  return updateFunctionConfigurationResult.getVersion();}  }
class C{  public void securedNetworkCall(final APIResultCallBack callBack,int requestCode,final EndPointInfo apiUtilities,Context context){  if (IdentityProxy.getInstance().getContext() == null) {    IdentityProxy.getInstance().setContext(context);  }  setRequestMethod(apiUtilities.getHttpMethod());  IdentityProxy.getInstance().setRequestCode(requestCode);  if (apiUtilities.getRequestParamsMap() != null) {    sendStringRequest(callBack,apiUtilities,true);  } else   if (apiUtilities.getRequestParams() != null) {    if (isJSONObject(apiUtilities.getRequestParams())) {      sendJsonObjectRequest(callBack,apiUtilities,true);    } else {      sendJsonArrayRequest(callBack,apiUtilities,true);    }  } else   if (apiUtilities.isJSONArrayRequest()) {    sendJsonArrayRequest(callBack,apiUtilities,true);  } else {    sendJsonObjectRequest(callBack,apiUtilities,true);  }}  }
class C{  private void processProvisioningResult(HttpsProvisioningResult result) throws RcsAccountException {  boolean logActivated=sLogger.isActivated();  if (HttpURLConnection.HTTP_OK == result.code) {    mRetryAfter511ErrorCount=0;    if (result.waitingForSMSOTP) {      if (logActivated) {        sLogger.debug("Waiting for SMS with OTP.");      }      return;    }    if (logActivated) {      sLogger.debug("Provisioning request successful");    }    ProvisioningParser parser=new ProvisioningParser(result.content,mRcsSettings);    GsmaRelease gsmaRelease=mRcsSettings.getGsmaRelease();    MessagingMode messagingMode=mRcsSettings.getMessagingMode();    mRcsSettings.setGsmaRelease(GsmaRelease.ALBATROS);    mRcsSettings.setMessagingMode(MessagingMode.NONE);    try {      parser.parse(gsmaRelease,messagingMode,mFirstProvAfterBoot);      mFirstProvAfterBoot=false;      ProvisioningInfo info=parser.getProvisioningInfo();      int version=info.getVersion();      long validity=info.getValidity();      if (logActivated) {        sLogger.debug("Provisioning version=" + version + ", validity="+ validity);      }      LauncherUtils.saveProvisioningVersion(mCtx,version);      LauncherUtils.saveProvisioningValidity(mCtx,validity);      mRcsSettings.setProvisioningVersion(version);      String token=info.getToken();      mRcsSettings.setProvisioningToken(token);      mRcsSettings.setFileTransferHttpSupported(mRcsSettings.getFtHttpServer() != null && mRcsSettings.getFtHttpLogin() != null && mRcsSettings.getFtHttpPassword() != null);      mRetryCount=0;      if (Version.DISABLED_DORMANT.toInt() == version) {        if (logActivated) {          sLogger.debug("Provisioning: RCS client in dormant state");        }        if (validity > 0) {          HttpsProvisioningService.startRetryAlarm(mCtx,mRetryIntent,validity);        }        mRcsSettings.setConfigurationValid(true);        LauncherUtils.stopRcsCoreService(mCtx);      } else       if (Version.DISABLED_NOQUERY.toInt() == version) {        if (logActivated) {          sLogger.debug("Provisioning: disable RCS client");        }        mRcsSettings.setConfigurationValid(true);        mRcsSettings.setServiceActivationState(false);        LauncherUtils.stopRcsService(mCtx);      } else       if (Version.RESETED_NOQUERY.toInt() == version) {        if (logActivated) {          sLogger.debug("Provisioning forbidden: reset account");        }        LauncherUtils.resetRcsConfig(mCtx,mLocalContentResolver,mRcsSettings,mMessagingLog,mContactManager);        mRcsSettings.setProvisioningVersion(version);        mRcsSettings.setServiceActivationState(false);      } else       if (Version.RESETED.toInt() == version) {        if (logActivated) {          sLogger.debug("Provisioning forbidden: no account");        }        LauncherUtils.resetRcsConfig(mCtx,mLocalContentResolver,mRcsSettings,mMessagingLog,mContactManager);      } else {        if (validity > 0) {          HttpsProvisioningService.startRetryAlarm(mCtx,mRetryIntent,validity);        }        boolean tcNotAnswered=TermsAndConditionsResponse.NO_ANSWER == mRcsSettings.getTermsAndConditionsResponse();        boolean requestTermsAndConditions=mRcsSettings.isProvisioningAcceptButton() || mRcsSettings.isProvisioningRejectButton();        if (requestTermsAndConditions && tcNotAnswered) {          TermsAndConditionsRequest.showTermsAndConditions(mCtx);        } else {          if (tcNotAnswered) {            if (logActivated) {              sLogger.debug("Terms and conditions implicitly accepted");            }            mRcsAccountManager.createRcsAccount(mCtx.getString(R.string.rcs_core_account_username),true);            mRcsSettings.setTermsAndConditionsResponse(TermsAndConditionsResponse.ACCEPTED);          }          mRcsSettings.setConfigurationValid(true);          LauncherUtils.launchRcsCoreService(mCtx,mRcsSettings);        }      }      IntentUtils.sendBroadcastEvent(mCtx,RcsService.ACTION_SERVICE_PROVISIONING_DATA_CHANGED);    } catch (    SAXException e) {      if (logActivated) {        sLogger.debug("Can't parse provisioning document");      }      mRcsSettings.setGsmaRelease(gsmaRelease);      mRcsSettings.setMessagingMode(messagingMode);      if (mFirstProvAfterBoot) {        if (logActivated) {          sLogger.debug("As this is first launch and we do not have a valid configuration yet, retry later");        }        provisioningFails(ProvisioningFailureReasons.INVALID_CONFIGURATION);        retry();      } else {        if (logActivated) {          sLogger.debug("This is not first launch, use old configuration to register");        }        tryLaunchRcsCoreService(mCtx,-1);      }    }  } else   if (HttpURLConnection.HTTP_UNAVAILABLE == result.code) {    if (logActivated) {      sLogger.debug("Server Unavailable. Retry after: " + result.retryAfter + "ms");    }    if (mFirstProvAfterBoot) {      provisioningFails(ProvisioningFailureReasons.UNABLE_TO_GET_CONFIGURATION);      if (result.retryAfter > 0) {        HttpsProvisioningService.startRetryAlarm(mCtx,mRetryIntent,result.retryAfter);      }    } else {      tryLaunchRcsCoreService(mCtx,result.retryAfter);    }  } else   if (HttpURLConnection.HTTP_FORBIDDEN == result.code) {    if (logActivated) {      sLogger.debug("Provisioning forbidden: reset account");    }    mRcsSettings.setProvisioningVersion(Version.RESETED.toInt());    LauncherUtils.resetRcsConfig(mCtx,mLocalContentResolver,mRcsSettings,mMessagingLog,mContactManager);    provisioningFails(ProvisioningFailureReasons.PROVISIONING_FORBIDDEN);  } else   if (HTTP_STATUS_ERROR_NETWORK_AUTHENTICATION_REQUIRED == result.code) {    if (logActivated) {      sLogger.debug("Provisioning authentication required");    }    mRcsSettings.setProvisioningToken(null);    if (!retryAfter511Error()) {      provisioningFails(ProvisioningFailureReasons.PROVISIONING_AUTHENTICATION_REQUIRED);    }  } else {    if (logActivated) {      sLogger.debug("Provisioning error " + result.code);    }    if (mFirstProvAfterBoot) {      provisioningFails(ProvisioningFailureReasons.CONNECTIVITY_ISSUE);      retry();    } else {      tryLaunchRcsCoreService(mCtx,-1);    }  }}  }
class C{  public boolean rejectIt(){  if (!isValidAction(ACTION_Reject))   return false;  if (m_document != null) {    if (m_document.rejectIt()) {      m_status=STATUS_NotApproved;      m_document.setDocStatus(m_status);      return true;    }    return false;  }  m_status=STATUS_NotApproved;  return true;}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  public TaskConvertImageToRGBPreview createTaskConvertImageToRGBPreview(ImageToProcess image,Executor executor,ImageBackend imageBackend,CaptureSession session,Size targetSize,TaskConvertImageToRGBPreview.ThumbnailShape thumbnailShape){  return new TaskConvertImageToRGBPreview(image,executor,imageBackend,TaskImageContainer.ProcessingPriority.FAST,session,mTinyThumbnailTargetSize,thumbnailShape);}  }
class C{  public void runTo(int index){  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_CANNOT_INDEX,null));  if ((index >= 0) && (m_next < m_firstFree))   m_next=index; else   m_next=m_firstFree - 1;}  }
class C{  public long insert(String table,ContentValues values){  try {    openDB();    return mSQLiteDatabase.insertOrThrow(table,null,values);  } catch (  Exception ex) {    ex.printStackTrace();    return -1;  }}  }
class C{  private byte[] decodePEM(InputStream inStream,byte[] boundary_suffix) throws IOException {  int ch;  for (int i=1; i < PEM_BEGIN.length; ++i) {    if (PEM_BEGIN[i] != (ch=inStream.read())) {      throw new IOException("Incorrect PEM encoding: '-----BEGIN" + ((boundary_suffix == null) ? "" : new String(boundary_suffix)) + "' is expected as opening delimiter boundary.");    }  }  if (boundary_suffix == null) {    while ((ch=inStream.read()) != '\n') {      if (ch == -1) {        throw new IOException("Incorrect PEM encoding: EOF before content");      }    }  } else {    for (int i=0; i < boundary_suffix.length; i++) {      if (boundary_suffix[i] != inStream.read()) {        throw new IOException("Incorrect PEM encoding: '-----BEGIN" + new String(boundary_suffix) + "' is expected as opening delimiter boundary.");      }    }    if ((ch=inStream.read()) == '\r') {      ch=inStream.read();    }    if (ch != '\n') {      throw new IOException("Incorrect PEM encoding: newline expected after " + "opening delimiter boundary");    }  }  int size=1024;  byte[] buff=new byte[size];  int index=0;  while ((ch=inStream.read()) != '-') {    if (ch == -1) {      throw new IOException("Incorrect Base64 encoding: EOF without closing delimiter");    }    buff[index++]=(byte)ch;    if (index == size) {      byte[] newbuff=new byte[size + 1024];      System.arraycopy(buff,0,newbuff,0,size);      buff=newbuff;      size+=1024;    }  }  if (buff[index - 1] != '\n') {    throw new IOException("Incorrect Base64 encoding: newline expected before " + "closing boundary delimiter");  }  for (int i=1; i < PEM_END.length; ++i) {    if (PEM_END[i] != inStream.read()) {      throw badEnd(boundary_suffix);    }  }  if (boundary_suffix == null) {    while (((ch=inStream.read()) != -1) && (ch != '\n') && (ch != '\r')) {    }  } else {    for (int i=0; i < boundary_suffix.length; i++) {      if (boundary_suffix[i] != inStream.read()) {        throw badEnd(boundary_suffix);      }    }  }  inStream.mark(1);  while (((ch=inStream.read()) != -1) && (ch == '\n' || ch == '\r')) {    inStream.mark(1);  }  inStream.reset();  buff=Base64.decode(buff,index);  if (buff == null) {    throw new IOException("Incorrect Base64 encoding");  }  return buff;}  }
class C{  public boolean isIdleTimeFromValid(){  return idleTimeFrom == null || idleTimeFromSec != null;}  }
class C{  public static boolean hasBeenCreated(){  return sInstance != null;}  }
class C{  public static PropertyValuesHolder ofFloat(Property<?,Float> property,float... values){  return new FloatPropertyValuesHolder(property,values);}  }
class C{  protected void oneTouchExpandableChanged(){  if (!DefaultLookup.getBoolean(splitPane,splitPaneUI,"SplitPane.supportsOneTouchButtons",true)) {    return;  }  if (splitPane.isOneTouchExpandable() && leftButton == null && rightButton == null) {    leftButton=createLeftOneTouchButton();    if (leftButton != null)     leftButton.addActionListener(new OneTouchActionHandler(true));    rightButton=createRightOneTouchButton();    if (rightButton != null)     rightButton.addActionListener(new OneTouchActionHandler(false));    if (leftButton != null && rightButton != null) {      add(leftButton);      add(rightButton);    }  }  revalidateSplitPane();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ModelPackage.MODEL_REFERENCE__VERSION:    setVersion(VERSION_EDEFAULT);  return;case ModelPackage.MODEL_REFERENCE__IMPORTED_NAMESPACE:setImportedNamespace(IMPORTED_NAMESPACE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public ScriptsPublisher(){  super();}  }
class C{  public static void filterLine(Path self,Writer writer,String charset,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  IOGroovyMethods.filterLine(newReader(self,charset),writer,closure);}  }
class C{  private final int inBuffer(final long index) throws IOException {  final long fs=filesize();  if ((index >= fs) && (index < fs + this.buffercount)) {    return (int)(index - fs);  }  return -1;}  }
class C{  public static void assertEquals(String message,Attributes expected,Attributes actual,boolean compareDefaultValues){  Assert.assertEquals(message + " (number of attributes)",expected.allSize(),actual.allSize());  Assert.assertEquals(message + " (number of special attributes)",expected.specialSize(),actual.specialSize());  Iterator<AttributeRole> expectedRoleIt=expected.regularAttributes();  Iterator<AttributeRole> actualRoleIt=actual.regularAttributes();  while (expectedRoleIt.hasNext()) {    AttributeRole expectedRole=expectedRoleIt.next();    AttributeRole actualRole=actualRoleIt.next();    RapidAssert.assertEquals(message,expectedRole,actualRole,compareDefaultValues);  }  expectedRoleIt=expected.specialAttributes();  while (expectedRoleIt.hasNext()) {    AttributeRole expectedRole=expectedRoleIt.next();    AttributeRole actualRole=actual.getRole(actual.getSpecial(expectedRole.getSpecialName()));    RapidAssert.assertEquals(message,expectedRole,actualRole,compareDefaultValues);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.871 -0500",hash_original_method="48BA5600C2E0D1ED619B576E3555D97D",hash_generated_method="0CC713B470916D3231056DE79519FD81") public void readSequenceOf(ASN1SequenceOf sequenceOf) throws IOException {  if (tag != ASN1Constants.TAG_C_SEQUENCEOF) {    throw expected("sequenceOf");  }  decodeValueCollection(sequenceOf);}  }
class C{  public void init() throws Exception {  this.inits.add(new ResourceHandler());  this.inits.add(new LengthFieldPrepender(CodecHeader.DEFAULT));  this.inits.add(new ExportedHandler());  this.bootstrap.group(new NioEventLoopGroup(DefaultServer.EVENTLOOP_PARENT),new NioEventLoopGroup(DefaultServer.EVENTLOOP_CHILD)).channelFactory(DefaultServer.FACTORY).childHandler(this.inits.factory()).option(ChannelOption.SO_REUSEADDR,true).bind(DefaultServer.BINDING,this.local.port()).sync();  DefaultServer.LOGGER.info("Server " + this.local + " started ... ");}  }
class C{  <T extends JCTree>void attribStats(List<T> trees,Env<AttrContext> env){  for (List<T> l=trees; l.nonEmpty(); l=l.tail)   attribStat(l.head,env);}  }
class C{  public Word minus(Extent w2){  return null;}  }
class C{  private static void run(String benchmark,CacheAtomicityMode atomicityMode) throws Exception {  run(benchmark,4,true,atomicityMode,CacheWriteSynchronizationMode.PRIMARY_SYNC);  run(benchmark,4,true,atomicityMode,CacheWriteSynchronizationMode.FULL_SYNC);  run(benchmark,4,false,atomicityMode,CacheWriteSynchronizationMode.PRIMARY_SYNC);  run(benchmark,4,false,atomicityMode,CacheWriteSynchronizationMode.FULL_SYNC);}  }
class C{  public static void clearTrace(){  sTraceMap.clear();  Log.v(TAG_DEBUG,"trace is cleared.");}  }
class C{  protected void updateTotalReturns(){synchronized (PR_TOTAL_RETURNS) {    TOTAL_RETURNS++;    System.out.println("TOTAL_RETURNS is " + TOTAL_RETURNS);  }  if (TOTAL_RETURNS == TOTAL_THREADS) {synchronized (CREATE_COMPLETE_LOCK) {      createComplete=true;      CREATE_COMPLETE_LOCK.notifyAll();    }  }}  }
class C{  public WekaException(String message){  super(message);}  }
class C{  public int[] variableUseageCounts(){  GEPSpecies species=(GEPSpecies)this.myGEPIndividual.species;  int counts[]=new int[species.symbolSet.numberOfTerminals];  if (parsedGeneExpressions == null)   parseGenes();  for (int i=0; i < parsedGeneExpressions.length; i++)   parsedGeneExpressions[i].variableUseageCounts(counts);  return counts;}  }
class C{  public boolean isSupplierDisabled(){  return isSupplier() && isPersistedRole(OrganizationRoleType.SUPPLIER);}  }
class C{  public MethodInvocationException(String message,Throwable e,String methodName){  super(message);  this.wrapped=e;  this.methodName=methodName;}  }
class C{  public void release(){  semaphore.release();}  }
class C{  public static Account generateRandomAccount(){  return new Account(new KeyPair());}  }
class C{  @Override public void onContentChanged(){  super.onContentChanged();  View emptyView=findViewById(com.android.internal.R.id.empty);  mList=(ListView)findViewById(com.android.internal.R.id.list);  if (mList == null) {    throw new RuntimeException("Your content must have a ListView whose id attribute is " + "'android.R.id.list'");  }  if (emptyView != null) {    mList.setEmptyView(emptyView);  }  mList.setOnItemClickListener(mOnClickListener);  if (mFinishedStart) {    setListAdapter(mAdapter);  }  mHandler.post(mRequestFocus);  mFinishedStart=true;}  }
class C{  private boolean addNewObservations(){  List<String> newObsVars=new ArrayList<String>();  for (  String var : simulatorState.getChanceNodeIds()) {    if (var.contains("^o'")) {      newObsVars.add(var);    }  }  if (!newObsVars.isEmpty()) {    MultivariateDistribution newObs=simulatorState.queryProb(newObsVars);    for (    String newObsVar : newObsVars) {      newObs.modifyVariableId(newObsVar,newObsVar.replace("^o'",""));    }    while (system.isPaused()) {      try {        Thread.sleep(50);      } catch (      InterruptedException e) {      }    }    if (!newObs.getValues().isEmpty()) {      if (newObs.getVariables().contains(system.getSettings().userInput)) {        log.fine("Simulator output: " + newObs + "\n --------------");        system.addContent(newObs);        return true;      } else {        log.fine("Contextual variables: " + newObs);        system.addContent(newObs);      }    }  }  return false;}  }
class C{  public void parse(final char[] text){  parse(text,0,text.length);}  }
class C{  public void clear(){  for (int i=0; i < segs.length; ++i)   segs[i].clear();}  }
class C{  protected int findTokenStart(int from){  if (from < 0) {    throw new IllegalArgumentException("Search position must not be negative: " + from);  }  boolean found=false;  while (!found && (this.currentHeader != null)) {    final int to=this.currentHeader.length();    while (!found && (from < to)) {      final char ch=this.currentHeader.charAt(from);      if (isTokenSeparator(ch) || isWhitespace(ch)) {        from++;      } else       if (isTokenChar(this.currentHeader.charAt(from))) {        found=true;      } else {        throw new ParseException("Invalid character before token (pos " + from + "): "+ this.currentHeader);      }    }    if (!found) {      if (this.headerIt.hasNext()) {        this.currentHeader=this.headerIt.nextHeader().getValue();        from=0;      } else {        this.currentHeader=null;      }    }  }  return found ? from : -1;}  }
class C{  private void extract(Extractor extractor,Annotation value) throws Exception {  Label label=extractor.getLabel(value);  Class type=extractor.getType(value);  if (registry != null) {    registry.register(type,label);  }}  }
class C{  public void ReInit(JavaCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  protected boolean isImmediateInputMode(String mode){  return "123".equals(mode);}  }
class C{  public GridNode(String id){  this.id=id;}  }
class C{  public void dispose(){  this.removeAll();  iconList=null;  buttonList=null;  catalog=null;}  }
class C{  public static <U>Stream<U> read(String path,Parser<U> up) throws IOException {  return read(new FileInputStream(path),up);}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean isResetted(){  return (pitch == 0.0f && yaw == 0.0f && roll == 0.0f);}  }
class C{  public void removeNeuron(final Neuron toDelete){  updatePriorityList();  toDelete.deleteConnectedSynapses();  if (toDelete.getParentGroup() != null) {    ((NeuronGroup)toDelete.getParentGroup()).removeNeuron(toDelete);    if (toDelete.getParentGroup().isEmpty()) {      removeGroup(toDelete.getParentGroup());    }  } else {    neuronList.remove(toDelete);  }  fireNeuronRemoved(toDelete);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.376 -0500",hash_original_method="F5C8CCF0AB5FDE49DF63CF243C328D9F",hash_generated_method="2CE099AC4E18C8F8257DDF5B3D90A566") public static String stringForQuery(SQLiteStatement prog,String[] selectionArgs){  prog.bindAllArgsAsStrings(selectionArgs);  return prog.simpleQueryForString();}  }
class C{  public void addContributionItem(IContributionItem contributionItem){  menuManager.add(contributionItem);}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){  final SpeciesDescription sd=getType().getContentType().getSpecies();  if (sd != null) {    meta.put(GamlProperties.PLUGINS,sd.getDefiningPlugin());    if (sd.isBuiltIn()) {      meta.put(GamlProperties.SPECIES,(String)value);    }  }}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  public Variable remove(Object key) throws Exception {  return registry.remove(key);}  }
class C{  public void testClientTransactionMaxRetransmisssionsConfigurationParameter() throws Exception {  System.setProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,"2");  System.setProperty(StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS,"true");  stunStack.addRequestListener(serverAddress,requestCollector);  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  Thread.sleep(1600);  Vector<StunMessageEvent> reqs=requestCollector.getRequestsForTransaction(bindingRequest.getTransactionID());  assertTrue("No retransmissions of the request have been received",reqs.size() > 1);  assertEquals("The MAX_RETRANSMISSIONS param was not taken into account!",reqs.size(),3);}  }
class C{  public void addRecurring(DateTimeZoneBuilder builder,String nameFormat){  for (int i=0; i < iRules.size(); i++) {    Rule rule=iRules.get(i);    rule.addRecurring(builder,nameFormat);  }}  }
class C{  @Override public int length(final IScope scope){  int result=0;  for (  final IPopulationSet p : populationSets) {    result+=p.length(scope);  }  return result;}  }
class C{  private InvitationsMonitor(Connection connection){  this.connection=connection;}  }
class C{  public void testGlobalClearAllReplicated() throws Exception {  cacheMode=REPLICATED;  startNodes();  performTest();}  }
class C{  private String[] splitOutNag(String wordToken){  if (wordToken.startsWith("$")) {    int digitEndIndex=1;    for (int i=1; i < wordToken.length(); i++) {      if (!Character.isDigit(wordToken.charAt(i))) {        break;      } else {        digitEndIndex++;      }    }    if (digitEndIndex <= 1) {      return null;    } else     if (wordToken.length() == digitEndIndex) {      return new String[]{wordToken};    } else {      return new String[]{wordToken.substring(0,digitEndIndex),wordToken.substring(digitEndIndex,wordToken.length())};    }  }  return null;}  }
class C{  public final void yypushStream(java.io.Reader reader){  zzStreams.push(new ZzFlexStreamInfo(zzReader,zzEndRead,zzStartRead,zzCurrentPos,zzMarkedPos,zzBuffer,zzAtEOF,yyline,yycolumn));  zzAtEOF=false;  zzBuffer=new char[ZZ_BUFFERSIZE];  zzReader=reader;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yycolumn=0;}  }
class C{  public static int[] decodeClasses(String a){  String s[]=new String(a.substring(a.indexOf('_') + 1)).split("\\+");  int vals[]=new int[s.length];  for (int j=0; j < vals.length; j++) {    vals[j]=Integer.parseInt(s[j]);  }  return vals;}  }
class C{  public void removeCount(int recursionLevel){  if (recursionLevel < m_counts.size()) {    m_counts.remove(recursionLevel);  }}  }
class C{  private void initDirectoryService(File workDir){  try {    service=new DefaultDirectoryService();  } catch (  Exception e1) {    System.out.println("Error creating DefaultDirectoryService. " + e1.getMessage());  }  service.setWorkingDirectory(workDir);  initSchemaPartition();  Partition systemPartition=null;  try {    systemPartition=addPartition("system",ServerDNConstants.SYSTEM_DN);  } catch (  Exception e1) {    System.out.println("Error addPartition system. " + e1.getMessage());  }  service.setSystemPartition(systemPartition);  service.getChangeLog().setEnabled(false);  service.setDenormalizeOpAttrsEnabled(true);  Partition fooPartition=null;  try {    fooPartition=addPartition("foo","dc=foo,dc=com");  } catch (  Exception e1) {    System.out.println("Error addPartition foo. " + e1.getMessage());  }  Partition barPartition=null;  try {    barPartition=addPartition("bar","dc=bar,dc=com");  } catch (  Exception e1) {    System.out.println("Error addPartition bar. " + e1.getMessage());  }  Partition apachePartition=null;  try {    apachePartition=addPartition("apache","dc=apache,dc=org");  } catch (  Exception e1) {    System.out.println("Error addPartition apache. " + e1.getMessage());  }  addIndex(apachePartition,"objectClass","ou","uid");  try {    service.startup();  } catch (  Exception e) {    System.out.println("Error at LDAP startup: " + e.getMessage());  }  try {    service.getAdminSession().lookup(fooPartition.getSuffixDn());  } catch (  Exception lnnfe) {    try {      DN dnFoo=new DN("dc=foo,dc=com");      ServerEntry entryFoo=service.newEntry(dnFoo);      entryFoo.add("objectClass","top","domain","extensibleObject");      entryFoo.add("dc","foo");      service.getAdminSession().add(entryFoo);    } catch (    Exception e) {      System.out.println("Error creating new DN.");    }  }  try {    service.getAdminSession().lookup(barPartition.getSuffixDn());  } catch (  Exception lnnfe) {    try {      DN dnBar=new DN("dc=bar,dc=com");      ServerEntry entryBar=service.newEntry(dnBar);      entryBar.add("objectClass","top","domain","extensibleObject");      entryBar.add("dc","bar");      service.getAdminSession().add(entryBar);    } catch (    Exception e) {      System.out.println("Error creating new DN.");    }  }  try {    if (!service.getAdminSession().exists(apachePartition.getSuffixDn())) {      try {        DN dnApache=new DN("dc=Apache,dc=Org");        ServerEntry entryApache=service.newEntry(dnApache);        entryApache.add("objectClass","top","domain","extensibleObject");        entryApache.add("dc","Apache");        service.getAdminSession().add(entryApache);      } catch (      Exception e) {        System.out.println("Error creating new DN.");      }    }  } catch (  Exception e) {    System.out.println("Error when checking if partition exists.");  }}  }
class C{  public NodeId(int namespaceIndex,byte[] value){  if (namespaceIndex < 0 || namespaceIndex > 65535)   throw new IllegalArgumentException("namespaceIndex out of bounds");  if (value != null && value.length > 4096)   throw new IllegalArgumentException("The length is restricted to 4096 bytes");  type=IdType.Opaque;  this.value=value;  this.namespaceIndex=namespaceIndex;}  }
class C{  protected void forward(int fromLayer){  int curLayerIdx=fromLayer + 1;  FloatMatrix weightMatrix=this.weightMatrixList.get(fromLayer);  FloatFunction squashingFunction=getSquashingFunction(fromLayer);  FloatVector vec=new DenseFloatVector(weightMatrix.getRowCount());  for (int row=0; row < weightMatrix.getRowCount(); row++) {    Neuron<?> n;    if (curLayerIdx == finalLayerIdx)     n=neurons.get(curLayerIdx)[row]; else     n=neurons.get(curLayerIdx)[row + 1];    try {      Iterable msgs=new InputMessageIterable(fromLayer,row);      n.setIterationNumber(iterations);      n.forward(msgs);    } catch (    IOException e) {      e.printStackTrace();    }    vec.set(row,n.getOutput());  }  if (squashingFunction.getFunctionName().equalsIgnoreCase(SoftMax.class.getSimpleName())) {    IntermediateOutput interlayer=(IntermediateOutput)ReflectionUtils.newInstance(SoftMax.SoftMaxOutputComputer.class);    try {      vec=interlayer.interlayer(vec);      for (int i=0; i < vec.getDimension(); i++) {        neurons.get(curLayerIdx)[i].setOutput(vec.get(i));      }    } catch (    IOException e) {      e.printStackTrace();    }  }  if (curLayerIdx != finalLayerIdx)   neurons.get(curLayerIdx)[0].setOutput(1);}  }
class C{  private TemplateSubPatternAssociation insertAssociationIntoList(TemplateSubPatternAssociation head,TemplateSubPatternAssociation item,boolean isWildCardInsert){  double priority=getPriorityOrScore(item);  double workPriority;  int importLevel=item.getImportLevel();  int docOrder=item.getDocOrderPos();  TemplateSubPatternAssociation insertPoint=head;  TemplateSubPatternAssociation next;  boolean insertBefore;  while (true) {    next=insertPoint.getNext();    if (null == next)     break; else {      workPriority=getPriorityOrScore(next);      if (importLevel > next.getImportLevel())       break; else       if (importLevel < next.getImportLevel())       insertPoint=next; else       if (priority > workPriority)       break; else       if (priority < workPriority)       insertPoint=next; else       if (docOrder >= next.getDocOrderPos())       break; else       insertPoint=next;    }  }  if ((null == next) || (insertPoint == head)) {    workPriority=getPriorityOrScore(insertPoint);    if (importLevel > insertPoint.getImportLevel())     insertBefore=true; else     if (importLevel < insertPoint.getImportLevel())     insertBefore=false; else     if (priority > workPriority)     insertBefore=true; else     if (priority < workPriority)     insertBefore=false; else     if (docOrder >= insertPoint.getDocOrderPos())     insertBefore=true; else     insertBefore=false;  } else   insertBefore=false;  if (isWildCardInsert) {    if (insertBefore) {      item.setNext(insertPoint);      String key=insertPoint.getTargetString();      item.setTargetString(key);      putHead(key,item);      return item;    } else {      item.setNext(next);      insertPoint.setNext(item);      return head;    }  } else {    if (insertBefore) {      item.setNext(insertPoint);      if (insertPoint.isWild() || item.isWild())       m_wildCardPatterns=item; else       putHead(item.getTargetString(),item);      return item;    } else {      item.setNext(next);      insertPoint.setNext(item);      return head;    }  }}  }
class C{  public JToolTip createToolTip(){  if (m_customToolTip == null) {    return super.createToolTip();  } else {    return m_customToolTip;  }}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public InputNode remove(String name){  return super.remove(name);}  }
class C{  private boolean scrollAndFocus(int direction,int top,int bottom){  boolean handled=true;  int height=getHeight();  int containerTop=getScrollY();  int containerBottom=containerTop + height;  boolean up=direction == View.FOCUS_UP;  View newFocused=findFocusableViewInBounds(up,top,bottom);  if (newFocused == null) {    newFocused=this;  }  if (top >= containerTop && bottom <= containerBottom) {    handled=false;  } else {    int delta=up ? (top - containerTop) : (bottom - containerBottom);    doScrollY(delta);  }  if (newFocused != findFocus())   newFocused.requestFocus(direction);  return handled;}  }
class C{  public static QueryResult forError(Throwable error){  QueryResult result=new QueryResult();  result.error=error;  return result;}  }
class C{  public WebSession(String name,HttpState state){  this.name=name;  this.state=state;}  }
class C{  protected void boundsCheck(int i){  if (i < 0)   throw new ArrayIndexOutOfBoundsException("Attempted to access negative index of IVector.");}  }
class C{  @SuppressWarnings("unused") @Subscribe public void onEvent(NothingToInstallEvent event){  Log.d("CHCP","Nothing to install");  PluginResult jsResult=PluginResultHelper.pluginResultFromEvent(event);  if (installJsCallback != null) {    installJsCallback.sendPluginResult(jsResult);    installJsCallback=null;  }  sendMessageToDefaultCallback(jsResult);}  }
class C{  private void resetAttempts(){  for (  final PoliticalActionAttachment paa : PoliticalActionAttachment.getPoliticalActionAttachments(m_player)) {    paa.resetAttempts(getBridge());  }}  }
class C{  public boolean containsValue(Object value){  if (value == null)   throw new NullPointerException();  final Segment<V>[] segments=this.segments;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      mcsum+=mc[i]=segments[i].modCount;      if (segments[i].containsValue(value))       return true;    }    boolean cleanSweep=true;    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        if (mc[i] != segments[i].modCount) {          cleanSweep=false;          break;        }      }    }    if (cleanSweep)     return false;  }  for (int i=0; i < segments.length; ++i)   segments[i].lock();  boolean found=false;  try {    for (int i=0; i < segments.length; ++i) {      if (segments[i].containsValue(value)) {        found=true;        break;      }    }  }  finally {    for (int i=0; i < segments.length; ++i)     segments[i].unlock();  }  return found;}  }
class C{  private void leaveRoom(MultiUserChat muc) throws SmackException.NotConnectedException {  mMucHelper.deleteMUC(muc.getRoom());  if (muc.isJoined()) {    muc.leave();  }  if (mRooms.size() > 0) {    Integer i=getRoomInt(muc.getRoom());    String number=mMucHelper.getNumber(muc.getRoom());    mRoomNumbers.remove(i);    mRooms.remove(number);  }}  }
class C{  public static serverObjects respond(final RequestHeader header,final serverObjects post,final serverSwitch env){  final serverObjects prop=new serverObjects();  final boolean yacyonly=env.getConfigBool(SwitchboardConstants.PROXY_YACY_ONLY,false);  final String hostSocket=header.get(HeaderFramework.HOST);  String host=hostSocket;  int port=80;  final int pos=hostSocket.indexOf(':',0);  if (pos != -1) {    port=NumberTools.parseIntDecSubstring(hostSocket,pos + 1);    host=hostSocket.substring(0,pos);  }  prop.put("yacy",yacyonly ? "0" : "1");  prop.put("yacy_host",host);  prop.put("yacy_port",port);  return prop;}  }
class C{  public void registerCommand(String noteName,Class<? extends Command> command){  controller.registerCommand(noteName,command);}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  private Long initMasterData() throws Exception {  Long initialCustomerAdminKey=null;  Organization organization=Organizations.createOrganization(mgr,OrganizationRoleType.SUPPLIER,OrganizationRoleType.TECHNOLOGY_PROVIDER);  createTechnicalProducts(organization);  supplier=organization;  Organization cust=null;  for (int i=1; i <= 2; i++) {    cust=Organizations.createOrganization(mgr,OrganizationRoleType.CUSTOMER);    OrganizationReference supplierToCustomer=new OrganizationReference(organization,cust,OrganizationReferenceType.SUPPLIER_TO_CUSTOMER);    List<OrganizationReference> sources=cust.getSources();    if (sources == null) {      sources=new LinkedList<>();    }    sources.add(supplierToCustomer);    cust.setSources(sources);    mgr.persist(supplierToCustomer);    Organization addCust=(Organization)ReflectiveClone.clone(cust);    testOrganizations.add(addCust);    ArrayList<PlatformUser> userlist=new ArrayList<>();    testUsers.put(addCust,userlist);    PlatformUser admin=createAdmin(cust);    if (initialCustomerAdminKey == null) {      initialCustomerAdminKey=Long.valueOf(admin.getKey());    }    userlist.add((PlatformUser)ReflectiveClone.clone(admin));    for (int j=1; j <= 2; j++) {      PlatformUser usr1=createNonAdminPlatformUser(cust,j);      mgr.persist(usr1);      userlist.add((PlatformUser)ReflectiveClone.clone(usr1));    }  }  createAdmin(organization);  return initialCustomerAdminKey;}  }
class C{  public Second(Date time){  this(time,TimeZone.getDefault(),Locale.getDefault());}  }
class C{  public void treeNodesInserted(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    FHTreeStateNode changedParent=getNodeForPath(SwingUtilities2.getTreePath(e,getModel()),false,false);    int maxCounter;    changedIndexs=e.getChildIndices();    if (changedParent != null && changedIndexs != null && (maxCounter=changedIndexs.length) > 0) {      boolean isVisible=(changedParent.isVisible() && changedParent.isExpanded());      for (int counter=0; counter < maxCounter; counter++) {        changedParent.childInsertedAtModelIndex(changedIndexs[counter],isVisible);      }      if (isVisible && treeSelectionModel != null)       treeSelectionModel.resetRowSelection();      if (changedParent.isVisible())       this.visibleNodesChanged();    }  }}  }
class C{  @Override public String toString(){  return "[" + this.getClass() + " dimensions="+ this.getDimensions()+ ","+ " linearLength="+ this.getLength()+ ","+ " lengths="+ Arrays.toString(_lengths)+ ","+ " fromMATLAB="+ _fromMatlab+ "]";}  }
class C{  public void transpose(){  float temp;  temp=m01;  m01=m10;  m10=temp;  temp=m02;  m02=m20;  m20=temp;  temp=m03;  m03=m30;  m30=temp;  temp=m12;  m12=m21;  m21=temp;  temp=m13;  m13=m31;  m31=temp;  temp=m23;  m23=m32;  m32=temp;}  }
class C{  public static MGRSCoord fromString(String MGRSString){  if (MGRSString == null || MGRSString.length() == 0) {    throw new IllegalArgumentException("String Is Null");  }  MGRSString=MGRSString.toUpperCase().replaceAll(" ","");  final MGRSCoordConverter converter=new MGRSCoordConverter();  long err=converter.convertMGRSToGeodetic(MGRSString);  if (err != MGRSCoordConverter.MGRS_NO_ERROR) {    throw new IllegalArgumentException("MGRS Conversion Error");  }  return new MGRSCoord(Angle.fromRadians(converter.getLatitude()),Angle.fromRadians(converter.getLongitude()),MGRSString);}  }
class C{  public void removeAllRenderers(){  mRenderers.clear();}  }
class C{  public static boolean clear(){  try {    tableList.clear();  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public AWTGVTFont(Font font){  this.size=font.getSize2D();  this.awtFont=font.deriveFont(FONT_SIZE);  this.scale=size / awtFont.getSize2D();  initializeFontCache(awtFont);}  }
class C{  private static byte[] pbkdf2(char[] password,byte[] salt,int iterations,int bytes) throws NoSuchAlgorithmException, InvalidKeySpecException {  PBEKeySpec spec=new PBEKeySpec(password,salt,iterations,bytes * 8);  SecretKeyFactory skf=SecretKeyFactory.getInstance(PBKDF2_ALGORITHM);  return skf.generateSecret(spec).getEncoded();}  }
class C{  private int addStaticItem(LayoutInflater inflater,@LayoutRes int layout,CharSequence text){  TextView textView=(TextView)inflater.inflate(layout,null,false);  textView.setText(text);  XpHeaderViewListAdapter.FixedViewInfo item=new XpHeaderViewListAdapter.FixedViewInfo();  item.view=textView;  item.isSelectable=true;  mStaticItems.add(item);  return mStaticItems.size() - 1;}  }
class C{  public static void restore(ThreadContext oldContext) throws NullPointerException, IllegalArgumentException {  if (oldContext == null)   throw new NullPointerException();  for (ThreadContext context=getContext(); context != oldContext; context=context.previous) {    if (context == null) {      throw new IllegalArgumentException("Restored context is not " + "contained in current " + "context");    }  }  if (oldContext.key == null)   oldContext=null;  setContext(oldContext);}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  public static Map<String,List<String>> toParameterMap(String queryString){  String[] parameters=queryString.split(quote("&"));  Map<String,List<String>> parameterMap=new LinkedHashMap<>(parameters.length);  for (  String parameter : parameters) {    if (parameter.contains("=")) {      String[] pair=parameter.split(quote("="));      String key=decodeURL(pair[0]);      String value=(pair.length > 1 && !isEmpty(pair[1])) ? decodeURL(pair[1]) : "";      List<String> values=parameterMap.get(key);      if (values == null) {        values=new ArrayList<>(1);        parameterMap.put(key,values);      }      values.add(value);    }  }  return parameterMap;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.GENERATE_PATH___LANGUAGE_1:    return getLanguage_1();case UmplePackage.GENERATE_PATH___OUTPUT_1:  return getOutput_1();case UmplePackage.GENERATE_PATH___OVERRIDE_1:return getOverride_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public TestHarness(SolrResourceLoader loader,String solrXml){  this(SolrXmlConfig.fromString(loader,solrXml));}  }
class C{  public void clearPool(){  for (  Progress progress : pool) {    if (progress.isEncapsulated()) {      progress.hideProgress();    }  }  pool.clear();}  }
class C{  public static ECPoint.F2m tau(ECPoint.F2m p){  if (p.isInfinity()) {    return p;  }  ECFieldElement x=p.getX();  ECFieldElement y=p.getY();  return new ECPoint.F2m(p.getCurve(),x.square(),y.square(),p.isCompressed());}  }
class C{  private byte[] ungzip(byte[] body){  ByteArrayInputStream bytein=new ByteArrayInputStream(body);  try (GZIPInputStream gzin=new GZIPInputStream(bytein);ByteArrayOutputStream byteout=new ByteArrayOutputStream()){    int res=0;    byte buf[]=new byte[1024];    while (res >= 0) {      res=gzin.read(buf,0,buf.length);      if (res > 0) {        byteout.write(buf,0,res);      }    }    byte uncompressed[]=byteout.toByteArray();    return uncompressed;  } catch (  IOException e) {  }  return null;}  }
class C{  void createLoginConfig(){  HashMap<String,String> sslConfigOptions=new HashMap<>();  HashMap<String,String> configOptions=new HashMap<>();  sslConfigOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY,"true");  sslConfigOptions.put(StubLoginModule.USERS_PROPERTY,DN_USERNAME);  sslConfigOptions.put(StubLoginModule.GROUPS_PROPERTY,DN_GROUP);  AppConfigurationEntry sslConfigEntry=new AppConfigurationEntry("org.apache.activemq.security.StubLoginModule",AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,sslConfigOptions);  configOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY,"true");  configOptions.put(StubLoginModule.USERS_PROPERTY,INSECURE_USERNAME);  configOptions.put(StubLoginModule.GROUPS_PROPERTY,INSECURE_GROUP);  AppConfigurationEntry configEntry=new AppConfigurationEntry("org.apache.activemq.security.StubLoginModule",AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,configOptions);  StubDualJaasConfiguration jaasConfig=new StubDualJaasConfiguration(configEntry,sslConfigEntry);  Configuration.setConfiguration(jaasConfig);}  }
class C{  void add(Rule rule){  String name=rule.getName();  rules.put(name,rule);}  }
class C{  public String toString(){  return toString(false);}  }
class C{  public List<TaxonNode> depthFirstTraversal(){  final ArrayList<TaxonNode> nodes=new ArrayList<>();  depthFirstTraversal(nodes);  return nodes;}  }
class C{  public static Set notifyListeners(Set cacheOpReceivers,Set adjunctRecipients,FilterRoutingInfo filterRoutingInfo,PartitionedRegion r,EntryEventImpl event,DirectReplyProcessor processor){  InvalidateMessage msg=new InvalidateMessage(Collections.EMPTY_SET,true,r.getPRId(),processor,event);  msg.versionTag=event.getVersionTag();  return msg.relayToListeners(cacheOpReceivers,adjunctRecipients,filterRoutingInfo,event,r,processor);}  }
class C{  public int read(char ch[],int offset,int length) throws IOException {  int byteLength=length << ((fEncoding >= 4) ? 2 : 1);  if (byteLength > fBuffer.length) {    byteLength=fBuffer.length;  }  int count=fInputStream.read(fBuffer,0,byteLength);  if (count == -1)   return -1;  if (fEncoding >= 4) {    int numToRead=(4 - (count & 3) & 3);    for (int i=0; i < numToRead; i++) {      int charRead=fInputStream.read();      if (charRead == -1) {        for (int j=i; j < numToRead; j++)         fBuffer[count + j]=0;        break;      } else {        fBuffer[count + i]=(byte)charRead;      }    }    count+=numToRead;  } else {    int numToRead=count & 1;    if (numToRead != 0) {      count++;      int charRead=fInputStream.read();      if (charRead == -1) {        fBuffer[count]=0;      } else {        fBuffer[count]=(byte)charRead;      }    }  }  int numChars=count >> ((fEncoding >= 4) ? 2 : 1);  int curPos=0;  for (int i=0; i < numChars; i++) {    int b0=fBuffer[curPos++] & 0xff;    int b1=fBuffer[curPos++] & 0xff;    if (fEncoding >= 4) {      int b2=fBuffer[curPos++] & 0xff;      int b3=fBuffer[curPos++] & 0xff;      if (fEncoding == UCS4BE)       ch[offset + i]=(char)((b0 << 24) + (b1 << 16) + (b2 << 8)+ b3); else       ch[offset + i]=(char)((b3 << 24) + (b2 << 16) + (b1 << 8)+ b0);    } else {      if (fEncoding == UCS2BE)       ch[offset + i]=(char)((b0 << 8) + b1); else       ch[offset + i]=(char)((b1 << 8) + b0);    }  }  return numChars;}  }
class C{  private void navigate(String url){  InputMethodManager imm=(InputMethodManager)this.cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(edittext.getWindowToken(),0);  if (!url.startsWith("http") && !url.startsWith("file:")) {    this.inAppWebView.loadUrl("http://" + url);  } else {    this.inAppWebView.loadUrl(url);  }  this.inAppWebView.requestFocus();}  }
class C{  public SearchColumn(int model,final String id,final String name,int width,boolean vis,Class<?> clazz){  this(model,id,name,null,width,vis,clazz);}  }
class C{  public FaultyHeader(){  requestFileName="faulty-header.query";  monitorAgent.expectFailure();}  }
class C{  public void writeFigTreeBlock(Map<String,Object> settings) throws IOException {  writer.println("\nbegin figtree;");  for (  String key : settings.keySet()) {    Object value=settings.get(key);    writer.println("\tset " + key + "="+ createString(value)+ ";");  }  writer.println("end;\n");}  }
class C{  private static void reverse(int first,int last,Swapper swapper){  while (first < --last) {    swapper.swap(first++,last);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return KEYS;default :return null;}}  }
class C{  public NullModifier createNullModifierFromString(EDataType eDataType,String initialValue){  NullModifier result=NullModifier.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public synchronized void pauseForReadingThreads(){  boolean updateIsWriting=isWriting;  if (updateIsWriting) {    isWriting=false;    notifyAll();  }  while (numReadingThreads > 0) {    try {      wait();    } catch (    InterruptedException e) {      throw new IllegalStateException(e);    }  }  if (updateIsWriting) {    isWriting=true;  }}  }
class C{  public h3 addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.EVENT__DIRECTION:    setDirection(DIRECTION_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private static boolean checkFunctionalMockUsage(Statement st,TestCase tc){  if (!(st instanceof MethodStatement)) {    return true;  }  MethodStatement ms=(MethodStatement)st;  VariableReference callee=ms.getCallee();  if (callee == null) {    return true;  }  Statement source=tc.getStatement(callee.getStPosition());  if (source instanceof FunctionalMockStatement) {    logger.error("Mock object created at position " + source.getPosition() + " has a method called in position "+ st.getPosition());    return false;  }  return true;}  }
class C{  public TrashObject(){  super();}  }
class C{  public boolean removeServerFromSystem(ObjectName objectName,CacheServerMXBean proxy,FederationComponent oldState){  if (mapOfServers != null) {    mapOfServers.remove(objectName);    serverSetSize=mapOfServers.values().size();    if (mapOfServers.values().size() == 0) {      serverSetSize=0;      return true;    }  }  updateCacheServer(objectName,null,oldState);  return false;}  }
class C{  public MergePropertiesEvent(Object source){  super(source);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.981 -0500",hash_original_method="1671E7A24B213A5C550B79186B0002D8",hash_generated_method="D8D832B7B9642A12311BA120932EEB0C") public static String valueOf(char[] data,int start,int length){  return new String(data,start,length);}  }
class C{  public static GeoArea makeGeoArea(final PlanetModel planetModel,final double minX,final double maxX,final double minY,final double maxY,final double minZ,final double maxZ){  return XYZSolidFactory.makeXYZSolid(planetModel,minX,maxX,minY,maxY,minZ,maxZ);}  }
class C{  public OverlayIcon(final Icon back,final Icon front,final int x,final int y){  m_back=back;  m_front=front;  m_x_offset=x;  m_y_offset=y;}  }
class C{  @Override public int hashCode(){  int yearValue=prolepticYear;  int monthValue=monthOfYear;  int dayValue=dayOfMonth;  return getChronology().getId().hashCode() ^ (yearValue & 0xFFFFF800) ^ ((yearValue << 11) + (monthValue << 6) + (dayValue));}  }
class C{  public <T>T unmarshal(final HierarchicalStreamReader reader,final T root){  return unmarshal(reader,root,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.011 -0500",hash_original_method="55CFE9AF663FFFA3410902143F42A33C",hash_generated_method="EDA90A27A7B84BE384B1B9B462023515") public synchronized Reference<? extends T> remove(long timeoutMillis) throws InterruptedException {  if (timeoutMillis < 0) {    throw new IllegalArgumentException("timeout < 0: " + timeoutMillis);  }  if (head != null) {    return poll();  }  if (timeoutMillis == 0 || (timeoutMillis > Long.MAX_VALUE / NANOS_PER_MILLI)) {    do {      wait(0);    } while (head == null);    return poll();  }  long nanosToWait=timeoutMillis * NANOS_PER_MILLI;  int timeoutNanos=0;  long startTime=System.nanoTime();  while (true) {    wait(timeoutMillis,timeoutNanos);    if (head != null) {      break;    }    long nanosElapsed=System.nanoTime() - startTime;    long nanosRemaining=nanosToWait - nanosElapsed;    if (nanosRemaining <= 0) {      break;    }    timeoutMillis=nanosRemaining / NANOS_PER_MILLI;    timeoutNanos=(int)(nanosRemaining - timeoutMillis * NANOS_PER_MILLI);  }  return poll();}  }
class C{  protected void doPick(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  try {    this.pickSupport.clearPickList();    this.pickSupport.beginPicking(dc);    gl.glBegin(GL2.GL_QUADS);    this.drawPickableQuad(dc,this.scrollDownControl,this.scrollDownControlBounds);    this.drawPickableQuad(dc,this.scrollUpControl,this.scrollUpControlBounds);    this.drawPickableQuad(dc,this.scrollDownBlockControl,this.scrollDownBarBounds);    this.drawPickableQuad(dc,this.scrollUpBlockControl,this.scrollUpBarBounds);    this.drawPickableQuad(dc,this.scrollKnobControl,this.scrollKnobBounds);  }  finally {    gl.glEnd();    this.pickSupport.endPicking(dc);    this.pickSupport.resolvePick(dc,dc.getPickPoint(),dc.getCurrentLayer());  }}  }
class C{  public Time(Calendar cal){  TimeZone timeZone=cal.getTimeZone();  tz=cal.getTimeZone().getID();  display=displayFormat.format(cal.getTime());  utc=utcFormat.format(new Date(cal.getTimeInMillis() - timeZone.getOffset(cal.getTimeInMillis())));}  }
class C{  public Position add(Position position){  if (this.index() < 0) {    return position.index() < 0 ? EMPTY_CONTENT_POSITION : position;  }  if (position.index() < 0) {    return this;  }  int index=this.index() + position.index();  int line=position.line() + this.line() - 1;  int column=this.line() == 1 ? this.column() + position.column() : this.column();  return new Position(index,line,column);}  }
class C{  ArrayList<ArrayList<String>> solveNQueens(int n){  ArrayList<ArrayList<String>> rst=new ArrayList<ArrayList<String>>();  if (n <= 0) {    return rst;  }  search(n,new ArrayList<Integer>(),rst);  return rst;}  }
class C{  protected void validateAgainstPasswordHistory(String rawPassword,PasswordEncoder encoder) throws InvalidPasswordException {  for (  UserPassword up : passwords) {    if (encoder.matches(rawPassword,up.getPassword())) {      throw new InvalidPasswordException("Password is not confirm with defined rules");    }  }}  }
class C{  private Object produceEvent() throws InvocationTargetException {  if (!valid) {    throw new IllegalStateException(toString() + " has been invalidated and can no longer produce events.");  }  try {    return method.invoke(target);  } catch (  IllegalAccessException e) {    throw new AssertionError(e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof Error) {      throw (Error)e.getCause();    }    throw e;  }}  }
class C{  @Override public int nodeSize(){  return this.numberOfKeys;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Vset checkLHS(Environment env,Context ctx,Vset vset,Hashtable exp){  boolean hadField=(field != null);  checkCommon(env,ctx,vset,exp,null,true);  if (implementation != null) {    return super.checkLHS(env,ctx,vset,exp);  }  if (field != null && field.isFinal() && !hadField) {    if (field.isBlankFinal()) {      if (field.isStatic()) {        if (right != null) {          env.error(where,"qualified.static.final.assign");        }      } else {        if ((right != null) && (right.op != THIS)) {          env.error(where,"bad.qualified.final.assign",field.getName());          return vset;        }      }      vset=checkFinalAssign(env,ctx,vset,where,field);    } else {      env.error(where,"assign.to.final",id);    }  }  return vset;}  }
class C{  public static boolean isEmail(String email){  Pattern pattern=Pattern.compile("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)" + "+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$");  Matcher matcher=pattern.matcher(email);  return matcher.matches();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_ENUM_DECLARATION___GET_DEFINED_TYPE_AS_ENUM:    return getDefinedTypeAsEnum();}return super.eInvoke(operationID,arguments);}  }
class C{  public DigitalOut createDigitalOut(boolean b){  return new SimpleDigitalOut(b);}  }
class C{  public void addAchievementBox(String title,String description,String category){  final Sprite sprite=getAchievementFactory().createAchievementBox(title,description,category);  addStaticSprite(sprite,2 * RemovableSprite.STANDARD_PERSISTENCE_TIME,0);}  }
class C{  private JavaSparkContext createContext(){  SparkConf conf=new SparkConf();  conf.set("spark.executor.instances",String.valueOf(GRID_CNT));  return new JavaSparkContext("local[" + GRID_CNT + "]","test",conf);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep deleteInitiator(@PathParam("id") URI id){  _log.info("Delete initiator {}",id);  Initiator initiator=queryObject(Initiator.class,id,isIdEmbeddedInURL(id));  if (!initiator.getIsManualCreation()) {    throw APIException.badRequests.initiatorNotCreatedManuallyAndCannotBeDeleted();  }  ArgValidator.checkReference(Initiator.class,id,checkForDelete(initiator));  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Initiator.class,initiator.getId(),taskId,ResourceOperationTypeEnum.DELETE_INITIATOR);  if (ComputeSystemHelper.isInitiatorInUse(_dbClient,id.toString())) {    ComputeSystemController controller=getController(ComputeSystemController.class,null);    controller.removeInitiatorFromExport(initiator.getHost(),initiator.getId(),taskId);  } else {    _dbClient.ready(Initiator.class,initiator.getId(),taskId);    _dbClient.markForDeletion(initiator);  }  auditOp(OperationTypeEnum.DELETE_HOST_INITIATOR,true,null,initiator.auditParameters());  return toTask(initiator,taskId,op);}  }
class C{  public WindowsCodePageData(){  codePageData=new ArrayList<WindowsCodePageDataBean>();  WindowsCodePageDataBean bean=null;  bean=new WindowsCodePageDataBean("1200","Unicode (BMP of ISO 10646)",false,false,true,true,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("1251","Windows 3.1 Cyrillic",true,false,true,true,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("1250","Windows 3.1 Eastern European",true,false,true,true,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("1252","Windows 3.1 US (ANSI)",true,false,true,true,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("1253","Windows 3.1 Greek",true,false,true,true,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("1254","Windows 3.1 Turkish",true,false,true,true,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("1255","Hebrew",true,false,false,false,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("1256","Arabic",true,false,false,false,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("1257","Baltic",true,false,false,false,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("1361","Korean (Johab)",true,false,false,true,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("437","MS-DOS United States",false,true,true,true,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("708","Arabic (ASMO 708)",false,true,false,false,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("709","Arabic (ASMO 449+, BCON V4)",false,true,false,false,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("710","Arabic (Transparent Arabic)",false,true,false,false,true);  codePageData.add(bean);  bean=new WindowsCodePageDataBean("720","Arabic (Transparent ASMO)",false,true,false,false,true);  codePageData.add(bean);}  }
class C{  private void verifyExportSecurity(ExportRule exportRule){  _log.info("Validating Export Security");  try {    List<String> secTypes=new ArrayList<String>();    exportRule.setIsToProceed(true,ExportOperationErrorType.NO_ERROR);    for (    String securityType : exportRule.getSecFlavor().split(",")) {      if (!securityType.trim().isEmpty()) {        secTypes.add(securityType.trim());        ExportSecurityType secType=ExportSecurityType.valueOf(securityType.trim().toUpperCase());        if (secType == null) {          exportRule.setIsToProceed(false,ExportOperationErrorType.INVALID_SECURITY_TYPE);        }      }    }    if (secTypes.size() > 1) {      StorageSystem system=null;      if (fs != null) {        system=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());      } else       if (snapshot != null) {        FileShare fileSystem=_dbClient.queryObject(FileShare.class,snapshot.getParent());        system=_dbClient.queryObject(StorageSystem.class,fileSystem.getStorageDevice());      }      if (!DiscoveredDataObject.Type.isilon.name().equals(system.getSystemType())) {        exportRule.setIsToProceed(false,ExportOperationErrorType.STORAGE_SYSTEM_NOT_SUPPORT_MUL_SECS);      }    }  } catch (  Exception e) {    _log.info("Invalid Security Type found in Request {}",exportRule.getSecFlavor());    exportRule.setIsToProceed(false,ExportOperationErrorType.INVALID_SECURITY_TYPE);  }}  }
class C{  public Xpp3Driver(final NameCoder nameCoder){  super(nameCoder);}  }
class C{  public final AssertSubscriber<T> assertNoValues(){  if (valueCount != 0) {    throw new AssertionError("No values expected but received: [length = " + values.size() + "] "+ values,null);  }  return this;}  }
class C{  public static void reorderVisually(byte[] levels,int levelStart,Object[] objects,int objectStart,int count){  BidiBase.reorderVisually(levels,levelStart,objects,objectStart,count);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public boolean checkAllQueriedMessages(boolean check,String query){  if (query == null || query.length() == 0) {    return checkAllMessages(check,false);  }  SQLiteDatabase db=getWritableDatabase();  if (db != null) {    String parentOnly=" AND (" + COL_BIGPARENT + " IS NULL OR "+ COL_BIGPARENT+ " NOT IN (SELECT "+ COL_MESSAGE_ID+ " FROM "+ TABLE+ " WHERE "+ COL_DELETED+ "="+ FALSE+ ") AND "+ COL_PARENT+ " NOT IN (SELECT "+ COL_MESSAGE_ID+ " FROM "+ TABLE+ " WHERE "+ COL_DELETED+ "="+ FALSE+ "))";    db.execSQL("UPDATE " + TABLE + " SET "+ COL_CHECKED+ "="+ (check ? TRUE : FALSE)+ " WHERE "+ COL_DELETED+ " ="+ FALSE+ " "+ query+ parentOnly+ ";");    return true;  }  return false;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public <T>MappingIterator<T> readValues(JsonParser jp,Class<T> valueType) throws IOException, JsonProcessingException {  return readValues(jp,_typeFactory.constructType(valueType));}  }
class C{  public boolean isMethodHandleInvoke(){  final int bits=MH_INVOKE_MODS & ~Modifier.PUBLIC;  final int negs=Modifier.STATIC;  if (testFlags(bits | negs,bits) && clazz == MethodHandle.class) {    return isMethodHandleInvokeName(name);  }  return false;}  }
class C{  protected void removeWarmupID(String id){  this.warmupIDs.remove(id);}  }
class C{  public KeyRing(){  super("keyring",2,4);  setCloseable(false);}  }
class C{  public void sendWallpaperCommand(IBinder windowToken,String action,int x,int y,int z,Bundle extras){  try {    WindowManagerGlobal.getWindowSession().sendWallpaperCommand(windowToken,action,x,y,z,extras,false);  } catch (  RemoteException e) {  }}  }
class C{  public static ConstParameter string(String s){  return new StringConstParameter(s);}  }
class C{  @Nullable public static PsiComment addOrReplaceJavadoc(PsiMethod method,String javadoc,boolean replace){  final Project project=method.getProject();  PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();  PsiComment comment=factory.createCommentFromText(javadoc,null);  PsiDocComment doc=method.getDocComment();  if (doc != null) {    if (replace) {      doc.replace(comment);      final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);      codeStyleManager.reformat(method);      return comment;    } else {      return null;    }  } else {    method.addBefore(comment,method.getFirstChild());    final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);    codeStyleManager.reformat(method);    return comment;  }}  }
class C{  public static IsNullValue pathSensitiveNonNullValue(){  return instanceByFlagsList[0][CHECKED_NN];}  }
class C{  public Shape createTabCloseIcon(int x,int y,int w,int h){  final double xMid=x + w / 2.0;  final double yMid=y + h / 2.0;  path.reset();  final double xOffsetL=w / 2.0;  final double xOffsetS=w / 2.0 - 1;  final double yOffsetL=h / 2.0;  final double yOffsetS=h / 2.0 - 1;  final double offsetC=1;  path.moveTo(xMid,yMid - offsetC);  path.lineTo(xMid + xOffsetS,yMid - yOffsetL);  path.lineTo(yMid + xOffsetL,yMid - yOffsetS);  path.lineTo(xMid + offsetC,yMid);  path.lineTo(xMid + xOffsetL,yMid + yOffsetS);  path.lineTo(xMid + xOffsetS,yMid + yOffsetL);  path.lineTo(xMid,yMid + offsetC);  path.lineTo(xMid - xOffsetS,yMid + yOffsetL);  path.lineTo(xMid - xOffsetL,yMid + yOffsetS);  path.lineTo(xMid - offsetC,yMid);  path.lineTo(xMid - xOffsetL,yMid - yOffsetS);  path.lineTo(xMid - xOffsetS,yMid - yOffsetL);  path.closePath();  return path;}  }
class C{  public final void removeAllElements(){  for (int i=0; i < m_firstFree; i++) {    m_map[i]=java.lang.Integer.MIN_VALUE;  }  m_firstFree=0;}  }
class C{  public static String replaceIgnoreCase(String source,String substring,String newsubstring){  StringBuffer sb=new StringBuffer(source);  int idx=-1;  int len1=substring.length();  int len2=newsubstring.length();  while ((idx=(sb.toString().toLowerCase().indexOf(substring.toLowerCase(),idx))) >= 0) {    sb.replace(idx,idx + len1,newsubstring);    idx+=len2;  }  return sb.toString();}  }
class C{  public LoggingScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:09.917 -0500",hash_original_method="487E11DF64E483CD2A017195603FADD0",hash_generated_method="70F3AF058A1932CBC6406A58EB67A151") public String toLocalizedPattern(){  return dform.toLocalizedPattern();}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  protected static void remoteCreateRegion(String name,Scope scope) throws CacheException {  Region root=getRootRegion();  AttributesFactory factory=new AttributesFactory();  factory.setScope(scope);  Region newRegion=root.createSubregion(name,factory.create());  LogWriterUtils.getLogWriter().info("Created Region '" + newRegion.getFullPath() + "'");}  }
class C{  private double trans(double value,Rectangle2D area,RectangleEdge edge){  double min=0.0;  double max=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    min=area.getX();    max=area.getX() + area.getWidth();  } else   if (RectangleEdge.isLeftOrRight(edge)) {    min=area.getMaxY();    max=area.getMaxY() - area.getHeight();  }  if (isInverted()) {    return max - ((value - this.displayStart) / (this.displayEnd - this.displayStart)) * (max - min);  } else {    return min + ((value - this.displayStart) / (this.displayEnd - this.displayStart)) * (max - min);  }}  }
class C{  public Perceptron(double learningRate,int iteratinLimit){  if (learningRate <= 0 || learningRate > 1)   throw new RuntimeException("Preceptron learning rate must be in the range (0,1]");  this.learningRate=learningRate;  this.iteratinLimit=iteratinLimit;}  }
class C{  public int length(){  int i;  for (i=bits.length - 1; i >= 0; i--) {    if (bits[i] != 0L)     break;  }  if (i < 0)   return 0;  long j=bits[i];  i++;  i<<=6;  for (long k=1L << 63; (k & j) == 0L; k>>=1, i--)   ;  return i;}  }
class C{  public void configure(JobConf conf){  try {    this.conf=conf;    this.dampingFactor=conf.getFloat("link.analyze.damping.factor",0.85f);    this.rankOne=conf.getFloat("link.analyze.rank.one",0.0f);    this.itNum=conf.getInt("link.analyze.iteration",0);    limitPages=conf.getBoolean("link.ignore.limit.page",true);    limitDomains=conf.getBoolean("link.ignore.limit.domain",true);  } catch (  Exception e) {    LOG.error(StringUtils.stringifyException(e));    throw new IllegalArgumentException(e);  }}  }
class C{  public String toString(){  return "ArchiveManager:\t[" + this.size() + "]";}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public static void writeVarLong(ByteBuffer buff,long x){  while ((x & ~0x7f) != 0) {    buff.put((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  buff.put((byte)x);}  }
class C{  boolean enabledInAndroid(Context context){  return enabledGlobally() && enabledForChrome(context);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.220 -0500",hash_original_method="2EE45E1B1B1F9797465CA7143D35DB76",hash_generated_method="972BE3736CB2D8DD7338471E5787D8D4") public String toString(){  return String.valueOf(get());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS:    return getAstStructuralMembers();case TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE:  if (resolve)   return getStructuralType();return basicGetStructuralType();case TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS:return getGenStructuralMembers();case TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS:return getPostponedSubstitutions();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean isGroupChat(String chatId,ContactId contact){  return (contact == null) || !chatId.equals(contact.toString());}  }
class C{  public void start(BundleContext context) throws Exception {  super.start(context);  plugin=this;}  }
class C{  public void addActionListener(ActionListener actionListener){  this.listenerList.add(ActionListener.class,actionListener);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  getPropertyChangeManager().addPropertyChangeListener(l);}  }
class C{  public SVG12RhinoInterpreter(URL documentURL){  super(documentURL);}  }
class C{  public static <T>T[] singletonArray(T element,Class<T> componentType){  if (element == null) {    return create(componentType,0);  }  T[] newArray=create(componentType,1);  newArray[0]=element;  return newArray;}  }
class C{  public void test_deleteInsertSolutions_01() throws Exception {  if (!isSolutionSetUpdateEnabled()) {    return;  }  loadDataset(packagePath + "dataset-01.trig");{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("INSERT INTO %namedSet1\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  ?x rdf:type foaf:Person .\n");    sb.append("  ?x rdfs:label ?name .\n");    sb.append("}\n");    con.prepareUpdate(QueryLanguage.SPARQL,sb.toString()).execute();  }{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("DELETE FROM %namedSet1\n");    sb.append("  SELECT ?x ?name\n");    sb.append("INSERT INTO %namedSet2\n");    sb.append("  SELECT ?x ?name\n");    sb.append("WHERE { \n");    sb.append("  ?x rdfs:label ?name .\n");    sb.append("  FILTER (?x = <http://www.bigdata.com/Bryan> ) .\n");    sb.append("}\n");    con.prepareUpdate(QueryLanguage.SPARQL,sb.toString()).execute();  }{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  INCLUDE %namedSet1 .\n");    sb.append("}\n");    final TupleQueryResult ret=con.prepareTupleQuery(QueryLanguage.SPARQL,sb.toString()).evaluate();    final TupleQueryResult expected=readExpectedTupleQueryResult(packagePath + "test_deleteInsertSolutions_01a.srx");    compareTupleQueryResults(ret,expected);  }{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  INCLUDE %namedSet2 .\n");    sb.append("}\n");    final TupleQueryResult ret=con.prepareTupleQuery(QueryLanguage.SPARQL,sb.toString()).evaluate();    final TupleQueryResult expected=readExpectedTupleQueryResult(packagePath + "test_deleteInsertSolutions_01b.srx");    compareTupleQueryResults(ret,expected);  }}  }
class C{  public void unregisterSlave(SlaveConnection slave){synchronized (allSlaves) {    if (allSlaves.contains(slave)) {      allSlaves.remove(slave);      notifyMonitor(allSlaves);    }  }synchronized (availableSlaves) {    if (availableSlaves.contains(slave)) {      availableSlaves.remove(slave);      notifyMonitor(availableSlaves);    }  }}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){  if (ownsSelection) {    ownsSelection=false;    if (component != null && !component.hasFocus()) {      setSelectionVisible(false);    }  }}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.635 -0400",hash_original_method="86AA9C59ED40178E51985D4D12BA68D0",hash_generated_method="2A75AA41DE19506BB1DEB703F27B1912") public WeakHashtable(){}  }
class C{  public MutableDateTime(long instant,Chronology chronology){  super(instant,chronology);}  }
class C{  public void waitForMessagesToArrive(int messageCount){  waitForMessagesToArrive(messageCount,120 * 1000);}  }
class C{  public int size(){  return count;}  }
class C{  public static long[] xorI(long[] v,long[] o,int off){  if (off == 0) {    return xorI(v,o);  }  if (off < 0) {    throw new UnsupportedOperationException("Negative shifts are not supported.");  }  final int shiftWords=off >>> LONG_LOG2_SIZE;  final int shiftBits=off & LONG_LOG2_MASK;  if (shiftWords >= v.length) {    return v;  }  if (shiftBits == 0) {    final int end=Math.min(v.length,o.length + shiftWords);    for (int i=shiftWords; i < end; i++) {      v[i]^=o[i - shiftWords];    }    return v;  }  final int unshiftBits=Long.SIZE - shiftBits;  final int end=Math.min(v.length,o.length + shiftWords) - 1;  for (int i=end; i > shiftWords; i--) {    final int src=i - shiftWords;    v[i]^=(o[src] << shiftBits) | (o[src - 1] >>> unshiftBits);  }  v[shiftWords]^=o[0] << shiftBits;  return v;}  }
class C{  public static boolean equals(byte[] array1,byte[] array2,int length){  if (length < 0) {    throw new IllegalArgumentException();  }  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length < length || array2.length < length) {    return false;  }  for (int i=0; i < length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @Override public Builder<K,V> put(K key,V value){  builderMultimap.put(checkNotNull(key),checkNotNull(value));  return this;}  }
class C{  public void testBug3873() throws Exception {  PreparedStatement batchStmt=null;  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3873");    this.stmt.executeUpdate("CREATE TABLE testBug3873 (keyField INT NOT NULL PRIMARY KEY AUTO_INCREMENT, dataField VARCHAR(32))");    batchStmt=this.conn.prepareStatement("INSERT INTO testBug3873 (dataField) VALUES (?)",Statement.RETURN_GENERATED_KEYS);    batchStmt.setString(1,"abc");    batchStmt.addBatch();    batchStmt.setString(1,"def");    batchStmt.addBatch();    batchStmt.setString(1,"ghi");    batchStmt.addBatch();    @SuppressWarnings("unused") int[] updateCounts=batchStmt.executeBatch();    this.rs=batchStmt.getGeneratedKeys();    while (this.rs.next()) {      System.out.println(this.rs.getInt(1));    }    this.rs=batchStmt.getGeneratedKeys();    assertTrue(this.rs.next());    assertTrue(1 == this.rs.getInt(1));    assertTrue(this.rs.next());    assertTrue(2 == this.rs.getInt(1));    assertTrue(this.rs.next());    assertTrue(3 == this.rs.getInt(1));    assertTrue(!this.rs.next());  }  finally {    if (batchStmt != null) {      batchStmt.close();    }    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3873");  }}  }
class C{  public void onListItemUnSelected(View view,int parentIndex){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.121 -0500",hash_original_method="E5BF1B41F12B83B703EDEDC6C20A8D2E",hash_generated_method="10F8E2945ED87E2DEC22E9498B408452") public static void sort(byte[] array){  DualPivotQuicksort.sort(array);}  }
class C{  @Deprecated public AlgorithmId(){}  }
class C{  public JBBPCompiledBlock build(){  JBBPUtils.assertNotNull(source,"Source is not defined");  JBBPUtils.assertNotNull(compiledData,"Compiled data is not defined");  return new JBBPCompiledBlock(this.source,this.namedFields.toArray(new JBBPNamedFieldInfo[this.namedFields.size()]),this.varLenProcessors.isEmpty() ? null : this.varLenProcessors.toArray(new JBBPIntegerValueEvaluator[this.varLenProcessors.size()]),this.compiledData,this.hasVarFields,this.customTypeFields.toArray(new JBBPFieldTypeParameterContainer[this.customTypeFields.size()]));}  }
class C{  void debugCode(String java){  if (isEnabled(TraceSystem.DEBUG)) {    traceWriter.write(TraceSystem.DEBUG,java,null);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowMediaPlayer.setUseOverlay();  return null;}  }
class C{  public Stack(Sentence sentence,JoshuaConfiguration config){  this.sentence=sentence;  this.config=config;  this.candidates=new PriorityQueue<Candidate>(1);  this.coverages=new HashMap<Coverage,ArrayList<Hypothesis>>();  this.visitedStates=new HashSet<Candidate>();  this.deduper=new HashMap<Hypothesis,Hypothesis>();}  }
class C{  public static String toJson(Map<String,String> map){  if (map == null || map.size() == 0) {    return null;  }  StringBuilder paras=new StringBuilder();  paras.append("{");  Iterator<Entry<String,String>> ite=map.entrySet().iterator();  while (ite.hasNext()) {    Entry<String,String> entry=(Entry<String,String>)ite.next();    paras.append("\"").append(entry.getKey()).append("\":\"").append(entry.getValue()).append("\"");    if (ite.hasNext()) {      paras.append(",");    }  }  paras.append("}");  return paras.toString();}  }
class C{  public ImprovedOrientationSensor1Provider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE));  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR));}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    throw new RuntimeException("Usage: [path to conf file]");  }  File configuration=new File(args[0]);  if (configuration.isDirectory() || !configuration.exists()) {    throw new RuntimeException("Configuration file" + configuration.getAbsolutePath() + " is a directory or "+ "doesn't exist");  }  InputStream is=null;  try {    is=new FileInputStream(configuration);    Properties props=new Properties();    props.load(is);    String server=props.getProperty("sendemails.server");    String from=props.getProperty("sendemails.from");    String subject=props.getProperty("sendemails.subject");    String mimeType=props.getProperty("sendemails.mimetype");    String replyTo=props.getProperty("sendemails.replyto");    String templateName=props.getProperty("sendemails.file.template");    String recipientsFileName=props.getProperty("sendemails.file.to");    String template=getTemplate(templateName);    sendMails(server,from,recipientsFileName,replyTo,subject,mimeType,template);  } catch (  ApiException|IOException|MessagingException|InterruptedException e) {    LOG.error("Mails sending failed - {}",e.getLocalizedMessage(),e);    throw new RuntimeException(e.getLocalizedMessage(),e);  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {        LOG.error("Mails sending failed - {}",e.getLocalizedMessage(),e);        throw new RuntimeException(e.getLocalizedMessage(),e);      }    }  }}  }
class C{  public static long createFakeThreadIDForParallelGateway(int index,long originatingThreadId,int gatewayIndex){  return WanType.PARALLEL.generateWanId(originatingThreadId,index,gatewayIndex);}  }
class C{  private void requestStreamsInfo2(Set<String> streams,boolean special){  Set<String> streamsForRequest=new HashSet<>();  Set<StreamInfo> streamInfosForRequest=new HashSet<>();  for (  String stream : streams) {    StreamInfo cached=getStreamInfo(stream);    if (!cached.isRequested() && (!special || cached.recheckOffline())) {      streamsForRequest.add(stream);      streamInfosForRequest.add(cached);      cached.setRequested();    }  }  if (special) {    specialCheckLastDone=System.currentTimeMillis();  }  if (!streamsForRequest.isEmpty()) {    if (!special) {      streamsInfoLastRequested=System.currentTimeMillis();    }    String url=api.requestStreamsInfo(streamsForRequest);    pendingRequests.put(url,streamInfosForRequest);  }}  }
class C{  private void slinkstep3(DBIDRef id,DBIDArrayIter it,int n,WritableDBIDDataStore pi,WritableDoubleDataStore lambda,WritableDoubleDataStore m){  DBIDVar p_i=DBIDUtil.newVar();  for (it.seek(0); it.getOffset() < n; it.advance()) {    double l_i=lambda.doubleValue(it);    double m_i=m.doubleValue(it);    p_i.from(pi,it);    double mp_i=m.doubleValue(p_i);    if (l_i >= m_i) {      if (l_i < mp_i) {        m.putDouble(p_i,l_i);      }      lambda.putDouble(it,m_i);      pi.put(it,id);    } else {      if (m_i < mp_i) {        m.putDouble(p_i,m_i);      }    }  }}  }
class C{  private void addCSSClasses(SVGPlot svgp){  final StyleLibrary style=context.getStyleLibrary();  if (!svgp.getCSSClassManager().contains(SELECTDIMENSIONORDER)) {    CSSClass cls=new CSSClass(this,SELECTDIMENSIONORDER);    cls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,0.1);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_BLUE_VALUE);    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(SDO_BORDER)) {    CSSClass cls=new CSSClass(this,SDO_BORDER);    cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,SVGConstants.CSS_GREY_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT) / 3.0);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_NONE_VALUE);    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(SDO_BUTTON)) {    CSSClass cls=new CSSClass(this,SDO_BUTTON);    cls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,0.01);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_GREY_VALUE);    cls.setStatement(SVGConstants.CSS_CURSOR_PROPERTY,SVGConstants.CSS_POINTER_VALUE);    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(SDO_ARROW)) {    CSSClass cls=new CSSClass(this,SDO_ARROW);    cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,SVGConstants.CSS_DARKGREY_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT) / 3);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_BLACK_VALUE);    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  private void copy(){  if (elems.nonEmpty()) {    List<A> orig=elems;    elems=last=List.<A>of(orig.head);    while ((orig=orig.tail).nonEmpty()) {      last.tail=List.<A>of(orig.head);      last=last.tail;    }  }}  }
class C{  public static Element createElementInEncryption11Space(Document doc,String elementName){  if (doc == null) {    throw new RuntimeException("Document is null");  }  if ((xenc11Prefix == null) || (xenc11Prefix.length() == 0)) {    return doc.createElementNS(EncryptionConstants.EncryptionSpec11NS,elementName);  }  return doc.createElementNS(EncryptionConstants.EncryptionSpec11NS,xenc11Prefix + ":" + elementName);}  }
class C{  public void writeExternal(ObjectOutput os) throws IOException {  if (os instanceof ObjectOutputStream) {    ObjectOutputStream oos=(ObjectOutputStream)os;    FastBufferedDataOutputStream fos=new FastBufferedDataOutputStream(oos);    writeHeaderAndPayload(fos);    fos.flush();  } else {    writeHeaderAndPayload(os);  }}  }
class C{  public static Match createCopy(Match m){  return m.createBuilder().build();}  }
class C{  @Override public Object readObject(int index) throws IOException {  openElement(index);  Object o;  String ref=getAttribute("ref",null);  String id=getAttribute("id",null);  if (ref != null && id != null) {    throw new IOException("Element has both an id and a ref attribute: <" + getTagName() + " id="+ id+ " ref="+ ref+ ">");  }  if (id != null && idobjects.containsKey(id)) {    throw new IOException("Duplicate id attribute: <" + getTagName() + " id="+ id+ ">");  }  if (ref != null && !idobjects.containsKey(ref)) {    throw new IOException("Illegal ref attribute value: <" + getTagName() + " ref="+ ref+ ">");  }  if (ref != null) {    o=idobjects.get(ref);  } else {    o=factory.read(this);    if (id != null) {      idobjects.put(id,o);    }    if (o instanceof DOMStorable) {      ((DOMStorable)o).read(this);    }  }  closeElement();  return o;}  }
class C{  private void determineCoverageGoals(){  List<OutputCoverageTestFitness> goals=new OutputCoverageFactory().getCoverageGoals();  for (  OutputCoverageTestFitness goal : goals) {    outputCoverageGoals.add(goal);    if (Properties.TEST_ARCHIVE)     TestsArchive.instance.addGoalToCover(this,goal);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void resetVersion(boolean isSource){  String version=getAdempiereVersion(isSource);  if (isSource) {    m_sourceVersion.setText(version);  } else {    m_targetVersion.setText(version);  }}  }
class C{  static TypedArray obtainAttributes(Resources res,Resources.Theme theme,AttributeSet set,int[] attrs){  if (theme == null) {    return res.obtainAttributes(set,attrs);  }  return theme.obtainStyledAttributes(set,attrs,0,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.869 -0500",hash_original_method="DFBFAEBB83F5AF41A1E2404555B650EF",hash_generated_method="1F8065DFF7079B0FB9B0EBE12A159F62") public final Iterator<PatternMatcher> pathsIterator(){  return mDataPaths != null ? mDataPaths.iterator() : null;}  }
class C{  public ClientEntityDescriptor(@Nonnull final String clientIdentifier){  this.clientId=Constraint.isNotNull(clientIdentifier,"Client cannot be null");  this.objectMetadata=new LockableClassToInstanceMultiMap(true);}  }
class C{  public synchronized void pause(){  if (!_isRunning || _isPaused) {    return;  }  s_logger.info("Pausing Listener.");  _isPaused=true;}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final long value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public void putOID(ObjectIdentifier oid) throws IOException {  oid.encode(this);}  }
class C{  public void notifyObservers(){  notifyObservers(null);}  }
class C{  public Scheduler scheduler(String queueName){  return new GoroScheduler(goro,queueName);}  }
class C{  public static final CButton createHelpButton(boolean withText){  if (withText)   return createHelpButton(Msg.getMsg(Env.getCtx(),A_HELP));  return createHelpButton(null);}  }
class C{  private void handleMouseMove(final Event e){  final int x=e.x, y=e.y;  final Image img=orientation == SWT.HORIZONTAL ? slider : vSlider;  upperHover=x >= coordUpper.x && x <= coordUpper.x + img.getBounds().width && y >= coordUpper.y && y <= coordUpper.y + img.getBounds().height;  lowerHover=x >= coordLower.x && x <= coordLower.x + img.getBounds().width && y >= coordLower.y && y <= coordLower.y + img.getBounds().height;  if (dragInProgress) {    if (orientation == SWT.HORIZONTAL) {      final int mouseValue=(int)((x - 9f) / computePixelSizeForHorizonalSlider()) + minimum;      if (lastSelected == SELECTED_KNOB.UPPER) {        upperValue=(int)(Math.ceil(mouseValue / increment) * increment) - increment;        checkUpperValue();      } else {        lowerValue=(int)(Math.ceil(mouseValue / increment) * increment) - increment;        checkLowerValue();      }    } else {      final int mouseValue=(int)((y - 9f) / computePixelSizeForVerticalSlider()) + minimum;      if (lastSelected == SELECTED_KNOB.UPPER) {        upperValue=(int)(Math.ceil(mouseValue / increment) * increment) - increment;        checkUpperValue();      } else {        lowerValue=(int)(Math.ceil(mouseValue / increment) * increment) - increment;        checkLowerValue();      }    }  }  redraw();}  }
class C{  public void startElement(String uri,String name,String qName,Attributes atts) throws SAXException {  if (name.equalsIgnoreCase(GMLConstants.GML_POLYGON)) {    currGeomHandler=new GMLHandler(fact,null);  }  if (currGeomHandler != null)   currGeomHandler.startElement(uri,name,qName,atts);  if (currGeomHandler == null) {    lastEltName=name;  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  protected boolean beforeSave(boolean newRecord){  return true;}  }
class C{  public boolean screenPointToGroundPosition(float screenX,float screenY,Position result){  if (this.wwd.rayThroughScreenPoint(screenX,screenY,ray)) {    Globe globe=wwd.getGlobe();    if (globe.intersect(ray,this.pickPoint)) {      globe.cartesianToGeographic(pickPoint.x,this.pickPoint.y,this.pickPoint.z,result);      return true;    }  }  return false;}  }
class C{  private void startStream() throws IOException {  startStream(encode);}  }
class C{  public static String dumpCurrentRowToString(Cursor cursor){  StringBuilder sb=new StringBuilder();  dumpCurrentRow(cursor,sb);  return sb.toString();}  }
class C{  public static int nextChar(String s,char needle,int startIndex){  boolean inSingleQuote=false;  boolean inDoubleQuote=false;  for (int i=startIndex; i < s.length(); ++i) {    char c=s.charAt(i);    if (!inSingleQuote && !inDoubleQuote && c == needle) {      return i;    }    if (!inSingleQuote && c == '"') {      inDoubleQuote^=true;    } else     if (!inDoubleQuote && c == '\'') {      inSingleQuote^=true;    }  }  return -1;}  }
class C{  @JsfTest(JsfVersion.JSF_2_2_1) @Test public void testAjaxToOnBody() throws Exception {  webClient.getOptions().setThrowExceptionOnFailingStatusCode(true);  webClient.getOptions().setThrowExceptionOnScriptError(false);  HtmlPage page=webClient.getPage(webUrl + "faces/body.xhtml");  assertEquals(200,page.getWebResponse().getStatusCode());}  }
class C{  public static <A,B,T extends Transform<A,B>>Stream<T> create(TransformFactory factory,Class<A> from,Class<B> to){  return create(factory,new BridgeTransform<>(from,to,factory));}  }
class C{  public DrawerBuilder(@NonNull Activity activity){  this.mRootView=(ViewGroup)activity.findViewById(android.R.id.content);  this.mActivity=activity;  this.mLayoutManager=new LinearLayoutManager(mActivity);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static StorageSizes computeSizes(Frame<BasicValue> frame){  Validate.notNull(frame);  int intsSize=0;  int longsSize=0;  int floatsSize=0;  int doublesSize=0;  int objectsSize=0;  for (int i=0; i < frame.getLocals(); i++) {    BasicValue basicValue=frame.getLocal(i);    Type type=basicValue.getType();    if (type == null) {      continue;    }    if ("Lnull;".equals(type.getDescriptor())) {      continue;    }switch (type.getSort()) {case Type.BOOLEAN:case Type.BYTE:case Type.SHORT:case Type.CHAR:case Type.INT:      intsSize++;    break;case Type.FLOAT:  floatsSize++;break;case Type.LONG:longsSize++;break;case Type.DOUBLE:doublesSize++;break;case Type.ARRAY:case Type.OBJECT:objectsSize++;break;case Type.METHOD:case Type.VOID:default :throw new IllegalStateException();}}return new StorageSizes(intsSize,longsSize,floatsSize,doublesSize,objectsSize);}  }
class C{  protected void paintSquiggle(Graphics g,Rectangle r){  int x=r.x;  int y=r.y + r.height - 1;  int delta=-AMT;  while (x < r.x + r.width) {    g.drawLine(x,y,x + AMT,y + delta);    y+=delta;    delta=-delta;    x+=AMT;  }}  }
class C{  public int loadInt(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  @Override public synchronized void acceptText(TextEvent textEvent){  String content=textEvent.getText();  if (m_fileName != null && m_fileName.length() > 0) {    if (m_env == null) {      m_env=Environment.getSystemWide();    }    String filename=m_fileName;    try {      filename=m_env.substitute(m_fileName);    } catch (    Exception ex) {    }    if (filename.toLowerCase().indexOf(".txt") < 0) {      filename+=".txt";    }    File file=new File(filename);    if (!file.isDirectory()) {      BufferedWriter writer=null;      try {        writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file,m_append),"utf-8"));        writer.write(content);        writer.close();      } catch (      IOException e) {        if (m_logger != null) {          m_logger.statusMessage(statusMessagePrefix() + "WARNING: " + "an error occurred whilte trying to write text (see log)");          m_logger.logMessage("[" + getCustomName() + "] "+ "an error occurred whilte trying to write text: "+ e.getMessage());        } else {          e.printStackTrace();        }      }    } else {      String message="Can't write text to file because supplied filename" + " is a directory!";      if (m_logger != null) {        m_logger.statusMessage(statusMessagePrefix() + "WARNING: " + message);        m_logger.logMessage("[" + getCustomName() + "] "+ message);      }    }  } else {    String message="Can't write text because no file has been supplied is a directory!";    if (m_logger != null) {      m_logger.statusMessage(statusMessagePrefix() + "WARNING: " + message);      m_logger.logMessage("[" + getCustomName() + "] "+ message);    }  }}  }
class C{  public Task<FileShareRestRep> updateShareACL(URI id,String shareName,FileCifsShareACLUpdateParams param){  UriBuilder builder=client.uriBuilder(getShareACLsUrl());  URI targetUri=builder.build(id,shareName);  return putTaskURI(param,targetUri);}  }
class C{  public SymbolTableEntryInternal steFor_N4Interface(){  return getSymbolTableEntryInternal("N4Interface",true);}  }
class C{  public ColladaScene(String ns){  super(ns);}  }
class C{  public void putLong(String key,long value){  sharedPreferences.edit().putLong(key,value).commit();}  }
class C{  protected void writeHeader() throws ConfigurationException, IOException {  if (writer != null) {    writer.close();  }  this.fileCounter++;  String filePath=PATH_OUTPUT_SQL_FILES + this.outputName + "_"+ fileCounter+ ".sql";  SQLConsumerLogMessages.logFileCreation(logger,filePath);  this.sqlFile=new File(filePath);  this.writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filePath),WIKIPEDIA_ENCODING));  ;  String[] revTable=this.sqlEncoder.getTable();  for (  String sTable : revTable) {    this.writer.write(sTable + "\r\n");  }  this.writer.flush();}  }
class C{  public boolean isWorking(){  boolean result=false;  if (getNumberOfFailedHosts() == 0) {    result=true;  }  return result;}  }
class C{  public void mouseDragged(MouseEvent e){  if (AWTEventMonitor.mouseMotionListener_private != null) {    AWTEventMonitor.mouseMotionListener_private.mouseDragged(e);  }}  }
class C{  public SVGOMToBeImplementedElement(String prefix,AbstractDocument owner,String localName){  super(prefix,owner);  this.localName=localName;}  }
class C{  public NotificationChain basicSetDomain(Domain newDomain,NotificationChain msgs){  Domain oldDomain=domain;  domain=newDomain;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.PACKAGE__DOMAIN,oldDomain,newDomain);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void addChangeListener(ChangeListener l){  m_ChangeListeners.add(l);}  }
class C{  public static float[] copyOfRange(float[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      float[] copy=new float[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public boolean printCharacterData(char[] data,boolean first,boolean preceedingSpace) throws IOException {  if (!prettyPrinter.getFormat()) {    printCharacters(data);    return false;  }  canIndent=true;  if (isWhiteSpace(data)) {    int nl=newlines(data);    for (int i=0; i < nl - 1; i++) {      printNewline();    }    return true;  }  if (xmlSpace.get(0) == Boolean.TRUE) {    printCharacters(data);    canIndent=false;    return false;  }  if (first) {    printNewline();    printString(margin.toString());  }  return formatText(data,margin.toString(),preceedingSpace);}  }
class C{  public AnonymousTypeProposalInfo(CompletionProposal proposal,String projectId,String docContext,String vfsId){  super(proposal,projectId,docContext,vfsId);}  }
class C{  @Override public boolean okPressed(){  int[] index=configList.getSelectedIndices();  if ((index == null) || (index.length == 0)) {    if (delete) {      configFilePath=null;    } else {      configFilePath=new String[]{landscapePath};    }  } else {    configFilePath=new String[index.length];    for (int i=0; i < index.length; ++i) {      configFilePath[i]=fileList[index[i]];    }  }  setLastPath(fileChooser.getCurrentDirectory().getAbsolutePath());  return (configFilePath != null);}  }
class C{  public static Short toShort(Object o) throws PageException {  if (o instanceof Short)   return (Short)o;  return Short.valueOf(toShortValue(o));}  }
class C{  public static boolean isLastActivitySupported(Connection connection,String jid){  try {    DiscoverInfo result=ServiceDiscoveryManager.getInstanceFor(connection).discoverInfo(jid);    return result.containsFeature(LastActivity.NAMESPACE);  } catch (  XMPPException e) {    return false;  }}  }
class C{  public static void loadVietnameseDict(String filename){  try {    FileInputStream in=new FileInputStream(filename);    if (hsVietnameseDict == null) {      hsVietnameseDict=new HashSet();      BufferedReader reader=new BufferedReader(new InputStreamReader(in,"UTF-8"));      String line;      while ((line=reader.readLine()) != null) {        if (line.substring(0,2).equals("##")) {          String word=line.substring(2);          word=word.toLowerCase();          hsVietnameseDict.add(word);        }      }    }  } catch (  Exception e) {    System.err.print(e.getMessage());    e.printStackTrace();  }}  }
class C{  public Connector(PluginContext context,String remoteURI,int resetPeriod,long lastSeqno,long lastEpochNumber,int heartbeatMillis) throws ReplicatorException {  this.pluginContext=context;  this.remoteURI=remoteURI;  this.lastSeqno=lastSeqno;  this.lastEpochNumber=lastEpochNumber;  this.heartbeatMillis=heartbeatMillis;  this.resetPeriod=resetPeriod;}  }
class C{  public T instantiate() throws Throwable {  return instantiate(new HashMap<>());}  }
class C{  public void add(SortField sortField){  map.put(sortField.getField(),sortField);}  }
class C{  public int size(){  return this.size;}  }
class C{  static boolean verify(InputStream in,boolean allSigned,IgniteLogger log) throws IOException {  assert in != null;  return verify0(in,null,allSigned,log);}  }
class C{  public Throwable(){  super();  fillInStackTrace();}  }
class C{  private SubMap<K,V> newSubMap(K fromKey,boolean fromInclusive,K toKey,boolean toInclusive){  if (isDescending) {    K tk=fromKey;    fromKey=toKey;    toKey=tk;    boolean ti=fromInclusive;    fromInclusive=toInclusive;    toInclusive=ti;  }  if (lo != null) {    if (fromKey == null) {      fromKey=lo;      fromInclusive=loInclusive;    } else {      int c=m.compare(fromKey,lo);      if (c < 0 || (c == 0 && !loInclusive && fromInclusive))       throw new IllegalArgumentException("key out of range");    }  }  if (hi != null) {    if (toKey == null) {      toKey=hi;      toInclusive=hiInclusive;    } else {      int c=m.compare(toKey,hi);      if (c > 0 || (c == 0 && !hiInclusive && toInclusive))       throw new IllegalArgumentException("key out of range");    }  }  return new SubMap<K,V>(m,fromKey,fromInclusive,toKey,toInclusive,isDescending);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:50.776 -0500",hash_original_method="850D5E92CAC6694D83599DC96343182A",hash_generated_method="4739EC0EC8671BD7C3709BF4002A041F") public static boolean disjoint(Collection<?> c1,Collection<?> c2){  if ((c1 instanceof Set) && !(c2 instanceof Set) || (c2.size()) > c1.size()) {    Collection<?> tmp=c1;    c1=c2;    c2=tmp;  }  Iterator<?> it=c1.iterator();  while (it.hasNext()) {    if (c2.contains(it.next())) {      return false;    }  }  return true;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @Override public String toString(){  return name + ": " + cipherSuiteCode[0]+ " "+ cipherSuiteCode[1];}  }
class C{  public boolean isUninstall(){  Object oo=get_Value(COLUMNNAME_Uninstall);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public float adjustScaling(final float scaling){  return scaling * (dpi / 72f);}  }
class C{  public StartTlsRequest(){}  }
class C{  private SystemPropertiesReflection(){}  }
class C{  public DHParameterSpec(BigInteger p,BigInteger g,int l){  this.p=p;  this.g=g;  this.l=l;}  }
class C{  public static void main(String[] args) throws Throwable {  Loader cl=new Loader();  cl.run(args);}  }
class C{  protected Locale findMatch(FacesContext context,Locale pref){  Locale result=null;  Iterator<Locale> it=context.getApplication().getSupportedLocales();  while (it.hasNext()) {    Locale supportedLocale=it.next();    if (pref.equals(supportedLocale)) {      result=supportedLocale;      break;    } else {      if (pref.getLanguage().equals(supportedLocale.getLanguage()) && supportedLocale.getCountry().length() == 0) {        result=supportedLocale;      }    }  }  if (null == result) {    Locale defaultLocale=context.getApplication().getDefaultLocale();    if (defaultLocale != null) {      if (pref.equals(defaultLocale)) {        result=defaultLocale;      } else {        if (pref.getLanguage().equals(defaultLocale.getLanguage()) && defaultLocale.getCountry().length() == 0) {          result=defaultLocale;        }      }    }  }  return result;}  }
class C{  private ColorPickerContainer(){}  }
class C{  protected Task<T> postTask(String path,Object... args){  TaskResourceRep task=client.post(TaskResourceRep.class,path,args);  return new Task<T>(client,task,resourceClass);}  }
class C{  @Override public void putAll(Map t){  Iterator i=t.entrySet().iterator();  while (i.hasNext()) {    Map.Entry e=(Map.Entry)i.next();    put(e.getKey(),e.getValue());  }}  }
class C{  private int firstNonzeroIntNum(){  int fn=firstNonzeroIntNum - 2;  if (fn == -2) {    fn=0;    int i;    int mlen=mag.length;    for (i=mlen - 1; i >= 0 && mag[i] == 0; i--)     ;    fn=mlen - i - 1;    firstNonzeroIntNum=fn + 2;  }  return fn;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(type.toString());  sb.append(' ');  sb.append(loadedClass.toString());  if (subops.size() > 0) {    sb.append(" (");    sb.append(subops.size());    sb.append(" sub ops)");  }  return sb.toString();}  }
class C{  @Override public String toString(){  return new String(b,0,i);}  }
class C{  public double[][] dissimilarityMatrix(){  return m_czech;}  }
class C{  DatasetInfo(SeriesDataset data,int series){  this.data=data;  this.series=series;}  }
class C{  private String scanFlowScalarNonSpaces(boolean doubleQuoted,Mark startMark){  StringBuilder chunks=new StringBuilder();  while (true) {    int length=0;    while (Constant.NULL_BL_T_LINEBR.hasNo(reader.peek(length),"\'\"\\")) {      length++;    }    if (length != 0) {      chunks.append(reader.prefixForward(length));    }    char ch=reader.peek();    if (!doubleQuoted && ch == '\'' && reader.peek(1) == '\'') {      chunks.append("'");      reader.forward(2);    } else     if ((doubleQuoted && ch == '\'') || (!doubleQuoted && "\"\\".indexOf(ch) != -1)) {      chunks.append(ch);      reader.forward();    } else     if (doubleQuoted && ch == '\\') {      reader.forward();      ch=reader.peek();      if (ESCAPE_REPLACEMENTS.containsKey(Character.valueOf(ch))) {        chunks.append(ESCAPE_REPLACEMENTS.get(Character.valueOf(ch)));        reader.forward();      } else       if (ESCAPE_CODES.containsKey(Character.valueOf(ch))) {        length=ESCAPE_CODES.get(Character.valueOf(ch)).intValue();        reader.forward();        String hex=reader.prefix(length);        if (NOT_HEXA.matcher(hex).find()) {          throw new ScannerException("while scanning a double-quoted scalar",startMark,"expected escape sequence of " + length + " hexadecimal numbers, but found: "+ hex,reader.getMark());        }        int decimal=Integer.parseInt(hex,16);        String unicode=new String(Character.toChars(decimal));        chunks.append(unicode);        reader.forward(length);      } else       if (scanLineBreak().length() != 0) {        chunks.append(scanFlowScalarBreaks(startMark));      } else {        throw new ScannerException("while scanning a double-quoted scalar",startMark,"found unknown escape character " + ch + "("+ ((int)ch)+ ")",reader.getMark());      }    } else {      return chunks.toString();    }  }}  }
class C{  public void addOnReconnectListener(OnReconnect listener){  if (listener != null) {synchronized (reconnectListeners) {      reconnectListeners.add(listener);      log.debug("Added new OnReconnect listener " + listener);    }  }}  }
class C{  public Element writeMap(Element parent,Object o,String name) throws Exception {  Map<?,?> map;  Object key;  Element node;  Element child;  Iterator<?> iter;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  map=(Map<?,?>)o;  iter=map.keySet().iterator();  node=addElement(parent,name,o.getClass().getName(),false);  while (iter.hasNext()) {    key=iter.next();    child=addElement(node,VAL_MAPPING,Object.class.getName(),false);    invokeWriteToXML(child,key,VAL_KEY);    invokeWriteToXML(child,map.get(key),VAL_VALUE);  }  return node;}  }
class C{  public static Object generateExample(AbstractSerializableParameter parameter){switch (parameter.getType()) {case "integer":    return 0;case "number":  return 0.0;case "boolean":return true;case "string":return "string";default :return parameter.getType();}}  }
class C{  public void testCreateElementNS1() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  doc=(Document)load("staffNS",builder);{    boolean success=false;    try {      doc.createElementNS(namespaceURI,malformedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public static Point transformPoint(Point point,MathTransform transform){  if (geoFactory == null)   geoFactory=new GeometryFactory();  double[] points=new double[]{point.getCoordinate().x,point.getCoordinate().y};  try {    transform.transform(points,0,points,0,1);  } catch (  TransformException e) {    e.printStackTrace();  }  Point p=geoFactory.createPoint(new Coordinate(points[0],points[1]));  return p;}  }
class C{  public static Date evenMinuteDateAfterNow(){  return evenMinuteDate(null);}  }
class C{  public VisualizerContext newContext(ResultHierarchy hier,Result start){  Collection<Relation<?>> rels=ResultUtil.filterResults(hier,Relation.class);  for (  Relation<?> rel : rels) {    if (samplesize == 0) {      continue;    }    if (!ResultUtil.filterResults(hier,rel,SamplingResult.class).isEmpty()) {      continue;    }    if (rel.size() > samplesize) {      SamplingResult sample=new SamplingResult(rel);      sample.setSample(DBIDUtil.randomSample(sample.getSample(),samplesize,rnd));      ResultUtil.addChildResult(rel,sample);    }  }  return new VisualizerContext(hier,start,stylelib,factories);}  }
class C{  static <T>List<T> cast(Iterable<T> iterable){  return (List<T>)iterable;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public void testSplitRR() throws Exception {  MultiPassIndexSplitter splitter=new MultiPassIndexSplitter();  Directory[] dirs=new Directory[]{newDirectory(),newDirectory(),newDirectory()};  splitter.split(input,dirs,false);  IndexReader ir;  ir=DirectoryReader.open(dirs[0]);  assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);  Document doc=ir.document(0);  assertEquals("0",doc.get("id"));  TermsEnum te=MultiFields.getTerms(ir,"id").iterator();  assertEquals(TermsEnum.SeekStatus.NOT_FOUND,te.seekCeil(new BytesRef("1")));  assertNotSame("1",te.term().utf8ToString());  ir.close();  ir=DirectoryReader.open(dirs[1]);  assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);  doc=ir.document(0);  assertEquals("1",doc.get("id"));  te=MultiFields.getTerms(ir,"id").iterator();  assertEquals(TermsEnum.SeekStatus.NOT_FOUND,te.seekCeil(new BytesRef("0")));  assertNotSame("0",te.term().utf8ToString());  ir.close();  ir=DirectoryReader.open(dirs[2]);  assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);  doc=ir.document(0);  assertEquals("2",doc.get("id"));  te=MultiFields.getTerms(ir,"id").iterator();  assertEquals(TermsEnum.SeekStatus.NOT_FOUND,te.seekCeil(new BytesRef("1")));  assertNotSame("1",te.term());  assertEquals(TermsEnum.SeekStatus.NOT_FOUND,te.seekCeil(new BytesRef("0")));  assertNotSame("0",te.term().utf8ToString());  ir.close();  for (  Directory d : dirs)   d.close();}  }
class C{  public NoAvailableLocatorsException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Object eval(String statements,NameSpace nameSpace) throws EvalError {  String s=(statements.endsWith(";") ? statements : statements + ";");  return eval(new StringReader(s),nameSpace,"inline evaluation of: ``" + showEvalString(s) + "''");}  }
class C{  public static Boolean isConvertable(RelNode node){  return !(node instanceof EnumerableAggregate || node instanceof EnumerableCalc || node instanceof EnumerableLimit|| node instanceof EnumerableSort);}  }
class C{  public RepositoryDocumentImpl(final BigdataFileSystem repo,final String id,final ITPS tps){  if (repo == null)   throw new IllegalArgumentException();  if (id == null)   throw new IllegalArgumentException();  this.repo=repo;  this.id=id;  this.tps=tps;  if (tps != null) {    ITPV tmp=tps.get(FileMetadataSchema.VERSION);    if (tmp.getValue() != null) {      this.version=(Integer)tmp.getValue();      this.metadata=tps.asMap();      BigdataFileSystem.log.info("id=" + id + ", current version="+ version);    } else {      this.version=-1;      this.metadata=null;      BigdataFileSystem.log.warn("id=" + id + " : no current version");    }  } else {    this.version=-1;    this.metadata=null;    BigdataFileSystem.log.warn("id=" + id + " : no record of any version(s)");  }  if (BigdataFileSystem.DEBUG && metadata != null) {    Iterator<Map.Entry<String,Object>> itr=metadata.entrySet().iterator();    while (itr.hasNext()) {      Map.Entry<String,Object> entry=itr.next();      BigdataFileSystem.log.debug("id=" + id + ", version="+ getVersion()+ ", ["+ entry.getKey()+ "]=["+ entry.getValue()+ "]");    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.FUNCTIONBLOCK_MODEL;}  }
class C{  protected final V unwrapValue(V value){  return value;}  }
class C{  public synchronized void create(long seqno) throws ReplicatorException, InterruptedException {  if (file.exists()) {    throw new THLException("Cannot create new log file; file already exists: " + file.getName());  }  try {    dataOutput=new BufferedFileDataOutput(file,bufferSize);  } catch (  IOException e) {    throw new THLException("Failed to open new file for writing: " + file.getName(),e);  }  mode=AccessMode.write;  try {    write(MAGIC_NUMBER);    write(MAJOR_VERSION);    write(MINOR_VERSION);    write(seqno);    flush();  } catch (  IOException e) {    throw new THLException("Unable to write file header: " + file.getName(),e);  }  baseSeqno=seqno;  if (logFlushTask != null)   logFlushTask.addLogFile(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.508 -0500",hash_original_method="72EA6E7457D3D683764F409EAD8192E1",hash_generated_method="5E98BC2231DB84048368921DC1664049") public static ProgramStore BLEND_ALPHA_DEPTH_NONE(RenderScript rs){  if (rs.mProgramStore_BLEND_ALPHA_DEPTH_NO_DEPTH == null) {    ProgramStore.Builder builder=new ProgramStore.Builder(rs);    builder.setDepthFunc(ProgramStore.DepthFunc.ALWAYS);    builder.setBlendFunc(BlendSrcFunc.SRC_ALPHA,BlendDstFunc.ONE_MINUS_SRC_ALPHA);    builder.setDitherEnabled(false);    builder.setDepthMaskEnabled(false);    rs.mProgramStore_BLEND_ALPHA_DEPTH_NO_DEPTH=builder.create();  }  return rs.mProgramStore_BLEND_ALPHA_DEPTH_NO_DEPTH;}  }
class C{  private Optional(T value){  this.value=Objects.requireNonNull(value);}  }
class C{  @Benchmark public long factorialPatternMatching(){  return factMatching(n);}  }
class C{  public Network(boolean directed){  this.directed=directed;}  }
class C{  public static void assertAlmostEquals(String message,String expected,String actual,int decimals){  String exp1;  String exp2;  String act1;  String act2;  double e1;  double e2;  double a1;  double a2;  if (expected.contains(PLUS_MINUS) && (actual.contains(PLUS_MINUS))) {    exp1=expected.substring(0,expected.indexOf(PLUS_MINUS)).trim();    exp2=expected.substring(expected.indexOf(PLUS_MINUS) + PLUS_MINUS.length()).trim();    act1=actual.substring(0,actual.indexOf(PLUS_MINUS)).trim();    act2=actual.substring(actual.indexOf(PLUS_MINUS) + PLUS_MINUS.length()).trim();    e1=toDouble(exp1);    e2=toDouble(exp2);    a1=toDouble(act1);    a2=toDouble(act2);    assertAlmostEquals(message + " (1st part)",e1,a1,decimals);    assertAlmostEquals(message + " (2nd part)",e2,a2,decimals);  } else {    e1=toDouble(expected);    a1=toDouble(actual);    assertAlmostEquals(message,e1,a1,decimals);  }}  }
class C{  public CardException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void addDebuggerTemplate(final DebuggerTemplate debuggerTemplate) throws CouldntSaveDataException {  Preconditions.checkNotNull(debuggerTemplate,"Error: Debugger template argument can not be null");  try {    m_project.getConfiguration().addDebugger(debuggerTemplate.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public double correlation(final ColumnVector vector){  if (this.size != vector.size) {    throw new IllegalArgumentException("cannot determine the correlation between vectors with different sizes");  }  final ColumnVector meanAdjustedX=this.meanAdjust();  final ColumnVector meanAdjustedY=vector.meanAdjust();  final double squaredDeviationX=meanAdjustedX.multiplyElementWise(meanAdjustedX).sum();  final double squaredDeviationY=meanAdjustedY.multiplyElementWise(meanAdjustedY).sum();  final double deviationProduct=meanAdjustedX.multiplyElementWise(meanAdjustedY).sum();  return deviationProduct / Math.sqrt(squaredDeviationX * squaredDeviationY);}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  private void onwardRecipients(MqttPublishMessage msg,MqttPublishPayload payload){  String topicName=msg.variableHeader().topicName();  List<String> topicLevels=Topics.sanitizeTopicName(topicName);  logger.trace("Onward PUBLISH message to recipients for topic {}",topicName);  Map<String,MqttQoS> subscriptions=new HashMap<>();  this.storage.getMatchSubscriptions(topicLevels,subscriptions);  subscriptions.forEach(null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getVideoFrame().getVideoOffsetY(VideoFrame.getAspectRatioCode(getString(stack))));}  }
class C{  @SuppressWarnings("serial") public void testSimpleJoinGroup(){  final JoinGroupNode jgn=(JoinGroupNode)new Helper(){{      tmp=joinGroupNode(statementPatternNode(varNode(x),constantNode(b),constantNode(c)),statementPatternNode(constantNode(a),varNode(y),constantNode(c)),statementPatternNode(constantNode(a),varNode(y),varNode(z),OPTIONAL));    }  }.getTmp();  final Set<IVariable<?>> requiredBound=new HashSet<IVariable<?>>();  final Set<IVariable<?>> desiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("x"));      add(Var.var("y"));      add(Var.var("z"));    }  };  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),null);  assertEquals(requiredBound,jgn.getRequiredBound(sa));  assertEquals(desiredBound,jgn.getDesiredBound(sa));}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  private void fixDescendants(int id){  if (descendants.get(id)) {    return;  }  for (Iterator parentIt=parents.iterator(); parentIt.hasNext(); ) {    final TypeNode parent=(TypeNode)parentIt.next();    parent.fixDescendants(id);  }  descendants.set(id);}  }
class C{  @SuppressWarnings("unchecked") final E itemAt(int i){  return (E)items[i];}  }
class C{  public void logDebug(Object message,Throwable exception){  logInternal(DEBUG,message,exception);}  }
class C{  private int decodeIcsInfo(IndividualChannelStream ics){  int aot=ac.oc[1].m4ac.objectType;  if (aot != AOT_ER_AAC_ELD) {    if (br.readBool()) {      log.error(String.format("Reserved bit set"));      return AAC_ERROR;    }    ics.windowSequence[1]=ics.windowSequence[0];    ics.windowSequence[0]=br.read(2);    if (aot == AOT_ER_AAC_LD && ics.windowSequence[0] != ONLY_LONG_SEQUENCE) {      log.error(String.format("AAC LD is only defined for ONLY_LONG_SEQUENCE but window sequence %d found",ics.windowSequence[0]));      ics.windowSequence[0]=ONLY_LONG_SEQUENCE;      return AAC_ERROR;    }    ics.useKbWindow[1]=ics.useKbWindow[0];    ics.useKbWindow[0]=br.readBool();  }  ics.numWindowGroups=1;  ics.groupLen[0]=1;  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {    ics.maxSfb=br.read(4);    for (int i=0; i < 7; i++) {      if (br.readBool()) {        ics.groupLen[ics.numWindowGroups - 1]++;      } else {        ics.numWindowGroups++;        ics.groupLen[ics.numWindowGroups - 1]=1;      }    }    ics.numWindows=8;    ics.swbOffset=ff_swb_offset_128[ac.oc[1].m4ac.samplingIndex];    ics.numSwb=ff_aac_num_swb_128[ac.oc[1].m4ac.samplingIndex];    ics.tnsMaxBands=ff_tns_max_bands_128[ac.oc[1].m4ac.samplingIndex];    ics.predictorPresent=false;  } else {    ics.maxSfb=br.read(6);    ics.numWindows=1;    if (aot == AOT_ER_AAC_LD || aot == AOT_ER_AAC_ELD) {      ics.swbOffset=ff_swb_offset_512[ac.oc[1].m4ac.samplingIndex];      ics.numSwb=ff_aac_num_swb_512[ac.oc[1].m4ac.samplingIndex];      ics.tnsMaxBands=ff_tns_max_bands_512[ac.oc[1].m4ac.samplingIndex];      if (ics.numSwb == 0 || ics.swbOffset == null) {        return AAC_ERROR;      }    } else {      ics.swbOffset=ff_swb_offset_1024[ac.oc[1].m4ac.samplingIndex];      ics.numSwb=ff_aac_num_swb_1024[ac.oc[1].m4ac.samplingIndex];      ics.tnsMaxBands=ff_tns_max_bands_1024[ac.oc[1].m4ac.samplingIndex];    }    if (aot != AOT_ER_AAC_ELD) {      ics.predictorPresent=br.readBool();      ics.predictorResetGroup=0;    }    if (ics.predictorPresent) {      if (aot == AOT_AAC_MAIN) {        if (decodePrediction(ics) != 0) {          ics.maxSfb=0;          return AAC_ERROR;        }      } else       if (aot == AOT_AAC_LC || aot == AOT_ER_AAC_LC) {        log.error(String.format("Prediction is not allowed in AAC-LC"));        ics.maxSfb=0;        return AAC_ERROR;      } else {        if (aot == AOT_ER_AAC_LD) {          log.error(String.format("LTP in ER AAC LD not yet implemented"));          return AAC_ERROR;        }        ics.ltp.present=br.readBool();        if (ics.ltp.present) {          decodeLtp(ics.ltp,ics.maxSfb);        }      }    }  }  if (ics.maxSfb > ics.numSwb) {    log.error(String.format("Number of scalefactor bands in group (%d) exceeds limit (%d)",ics.maxSfb,ics.numSwb));    ics.maxSfb=0;    return AAC_ERROR;  }  return 0;}  }
class C{  @ObjectiveCName("changeShowNotificationTextEnabledWithValue:") public void changeShowNotificationTextEnabled(boolean val){  modules.getSettingsModule().changeShowNotificationTextEnabled(val);}  }
class C{  public NegMaxEvaluation(int ply){  this.ply=ply;}  }
class C{  protected static void ensureDoubleExecution(TestSuiteChromosome individual,LocalSearchObjective<TestSuiteChromosome> objective){  logger.debug("Ensuring double execution");  Set<TestChromosome> duplicates=new HashSet<TestChromosome>();  TestSuiteFitnessFunction defaultFitness=(TestSuiteFitnessFunction)objective.getFitnessFunctions().get(0);  Map<Integer,Integer> covered=new HashMap<Integer,Integer>();  Map<Integer,TestChromosome> testMap=new HashMap<Integer,TestChromosome>();  for (  TestChromosome test : individual.getTestChromosomes()) {    if (test.getLastExecutionResult() == null || test.isChanged()) {      ExecutionResult result=test.executeForFitnessFunction(defaultFitness);      test.setLastExecutionResult(result);      test.setChanged(false);    }    for (    Entry<Integer,Integer> entry : test.getLastExecutionResult().getTrace().getPredicateExecutionCount().entrySet()) {      if (!covered.containsKey(entry.getKey())) {        covered.put(entry.getKey(),0);      }      covered.put(entry.getKey(),covered.get(entry.getKey()) + entry.getValue());      testMap.put(entry.getKey(),test);    }  }  for (  Entry<Integer,Integer> entry : covered.entrySet()) {    int branchId=entry.getKey();    int count=entry.getValue();    if (count == 1) {      TestChromosome duplicate=(TestChromosome)testMap.get(branchId).clone();      ExecutionResult result=duplicate.executeForFitnessFunction(defaultFitness);      duplicate.setLastExecutionResult(result);      duplicate.setChanged(false);      duplicates.add(duplicate);    }  }  if (!duplicates.isEmpty()) {    logger.info("Adding " + duplicates.size() + " tests to cover branches sufficiently");    for (    TestChromosome test : duplicates) {      individual.addTest(test);    }    individual.setChanged(true);    for (    FitnessFunction<? extends Chromosome> ff : objective.getFitnessFunctions()) {      ((TestSuiteFitnessFunction)ff).getFitness(individual);    }  }}  }
class C{  public PropertySetterDeclaration createPropertySetterDeclaration(){  PropertySetterDeclarationImpl propertySetterDeclaration=new PropertySetterDeclarationImpl();  return propertySetterDeclaration;}  }
class C{  private CimConnectionInfo createConnectionInfo(){  CimConnectionInfo connectionInfo=new CimConnectionInfo();  connectionInfo.setType(CimConstants.ECOM_CONNECTION_TYPE);  connectionInfo.setHost(PROVIDER_IP);  connectionInfo.setPort(Integer.parseInt(PROVIDER_PORT));  connectionInfo.setUser(PROVIDER_USER);  connectionInfo.setPassword(PROVIDER_PW);  connectionInfo.setInteropNS(PROVIDER_INTEROP_NS);  connectionInfo.setImplNS(PROVIDER_IMPL_NS);  connectionInfo.setUseSSL(isProviderSslEnabled);  return connectionInfo;}  }
class C{  public Matrix4x3f fma(Matrix4x3fc other,float otherFactor){  return fma(other,otherFactor,this);}  }
class C{  public void normalizeDocument(){}  }
class C{  public RequestHandle put(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(null,url,params,responseHandler);}  }
class C{  private static void drawLine(int x0,int y0,int x1,int y1,boolean[][] pic){  final int xres=pic.length, yres=pic[0].length;  y0=(y0 < 0) ? 0 : (y0 >= yres) ? (yres - 1) : y0;  y1=(y1 < 0) ? 0 : (y1 >= yres) ? (yres - 1) : y1;  x0=(x0 < 0) ? 0 : (x0 >= xres) ? (xres - 1) : x0;  x1=(x1 < 0) ? 0 : (x1 >= xres) ? (xres - 1) : x1;  final int dx=+Math.abs(x1 - x0), sx=x0 < x1 ? 1 : -1;  final int dy=-Math.abs(y1 - y0), sy=y0 < y1 ? 1 : -1;  int err=dx + dy;  for (; ; ) {    pic[x0][y0]=true;    if (x0 == x1 && y0 == y1) {      break;    }    final int e2=err << 1;    if (e2 > dy) {      err+=dy;      x0+=sx;    }    if (e2 < dx) {      err+=dx;      y0+=sy;    }  }}  }
class C{  public FilterJoinBuilder orderBy(TermsByQueryRequest.Ordering orderBy){  this.orderBy=orderBy;  return this;}  }
class C{  OptimizedObjectInputStream acquireIn(){  return inAcquireCnt++ > 0 ? createIn() : in;}  }
class C{  public void modifyContacts(){  mCommands[ContactsCommandType.MODIFY_COMMAND.ordinal()].execute(mModifyContacts.iterator());}  }
class C{  public static <T>void retainAll(Collection<T> elems,Filter<T> filter){  for (  T elem : elems) {    if (!filter.accept(elem)) {      elems.remove(elem);    }  }}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public static URL toURL(CharSequence self) throws MalformedURLException {  return new URL(self.toString());}  }
class C{  public static String unescape(String string){  int length=string.length();  StringBuilder sb=new StringBuilder(length);  for (int i=0; i < length; ++i) {    char c=string.charAt(i);    if (c == '+') {      c=' ';    } else     if (c == '%' && i + 2 < length) {      int d=JSONTokener.dehexchar(string.charAt(i + 1));      int e=JSONTokener.dehexchar(string.charAt(i + 2));      if (d >= 0 && e >= 0) {        c=(char)(d * 16 + e);        i+=2;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  public SearchStats stats(String... groups){  SearchStats.Stats total=totalStats.stats();  Map<String,SearchStats.Stats> groupsSt=null;  if (groups != null && groups.length > 0) {    groupsSt=new HashMap<>(groupsStats.size());    if (groups.length == 1 && groups[0].equals("_all")) {      for (      Map.Entry<String,StatsHolder> entry : groupsStats.entrySet()) {        groupsSt.put(entry.getKey(),entry.getValue().stats());      }    } else {      for (      Map.Entry<String,StatsHolder> entry : groupsStats.entrySet()) {        if (Regex.simpleMatch(groups,entry.getKey())) {          groupsSt.put(entry.getKey(),entry.getValue().stats());        }      }    }  }  return new SearchStats(total,openContexts.count(),groupsSt);}  }
class C{  private void calculateView(int x,int y){  int cvx=(int)((x * SIZE_UNIT_PIXELS) + (SIZE_UNIT_PIXELS / 2) - (sw / 2) / scale);  int cvy=(int)((y * SIZE_UNIT_PIXELS) + (SIZE_UNIT_PIXELS / 2) - (sh / 2) / scale);  final int maxX=(int)(ww * SIZE_UNIT_PIXELS - sw / scale);  cvx=MathHelper.clamp(cvx,0,maxX);  final int maxY=(int)(wh * SIZE_UNIT_PIXELS - sh / scale);  cvy=MathHelper.clamp(cvy,0,maxY);  dvx=cvx - svx;  dvy=cvy - svy;}  }
class C{  public ShortTag(short value){  super(TagType.SHORT);  this.value=value;}  }
class C{  public static DBIDVar newVar(){  return DBIDFactory.FACTORY.newVar(DBIDFactory.FACTORY.invalid());}  }
class C{  private void handleAutoNumbersForUpdate(Object[] row,ByteBuffer rowBuffer,RowState rowState) throws IOException {  if (_autoNumColumns.isEmpty()) {    return;  }  boolean enableInsert=isAllowAutoNumberInsert();  rowState.resetAutoNumber();  for (  ColumnImpl col : _autoNumColumns) {    Object inRowValue=getInputAutoNumberRowValue(enableInsert,col,row);    Object rowValue=((inRowValue == null) ? getRowColumn(getFormat(),rowBuffer,col,rowState,null) : col.getAutoNumberGenerator().handleInsert(rowState,inRowValue));    col.setRowValue(row,rowValue);  }}  }
class C{  public PopupMenuEvent(Object source){  super(source);}  }
class C{  public int mapOutParamIndexToPosition(int index,boolean compatibilityMode) throws SQLException {  int position=-1;  for (  FBProcedureParam param : outputParams) {    if (param != null && param.isParam()) {      position++;      if (param.getIndex() == index) {        return position + 1;      }    }  }  if (compatibilityMode) {    return index;  } else {    throw new FBSQLException("Specified parameter does not exist.",SQLStateConstants.SQL_STATE_INVALID_COLUMN);  }}  }
class C{  boolean partialIsVariable(MultistepExprHolder testee,int lengthToTest){  if (1 == lengthToTest) {    WalkingIterator wi=(WalkingIterator)testee.m_exprOwner.getExpression();    if (wi.getFirstWalker() instanceof FilterExprWalker)     return true;  }  return false;}  }
class C{  public X509Certificate generate(PrivateKey key,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=generateTbsCert();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  try {    return generateJcaObject(tbsCert,signature);  } catch (  CertificateParsingException e) {    throw new ExtCertificateEncodingException("exception producing certificate object",e);  }}  }
class C{  @Override public int update(Uri uri,ContentValues values,String where,String[] whereArgs){  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  int count;  String finalWhere;switch (mUriMatcher.match(uri)) {case MAIN:    count=db.update(MainTable.TABLE_NAME,values,where,whereArgs);  break;case MAIN_ID:finalWhere=DatabaseUtils.concatenateWhere(MainTable._ID + " = " + ContentUris.parseId(uri),where);count=db.update(MainTable.TABLE_NAME,values,finalWhere,whereArgs);break;default :throw new IllegalArgumentException("Unknown URI " + uri);}getContext().getContentResolver().notifyChange(uri,null);return count;}  }
class C{  public static int gluProject(double objX,double objY,double objZ,double[] model,int modelOffset,double[] project,int projectOffset,int[] view,int viewOffset,double[] win,int winOffset){  double[] scratch=sScratch;synchronized (scratch) {    final int M_OFFSET=0;    final int V_OFFSET=16;    final int V2_OFFSET=20;    Matrix.multiplyMM(scratch,M_OFFSET,project,projectOffset,model,modelOffset);    scratch[V_OFFSET + 0]=objX;    scratch[V_OFFSET + 1]=objY;    scratch[V_OFFSET + 2]=objZ;    scratch[V_OFFSET + 3]=1.0;    Matrix.multiplyMV(scratch,V2_OFFSET,scratch,M_OFFSET,scratch,V_OFFSET);    double w=scratch[V2_OFFSET + 3];    if (w == 0.0) {      return GL10.GL_FALSE;    }    double rw=1.0 / w;    win[winOffset]=view[viewOffset] + view[viewOffset + 2] * (scratch[V2_OFFSET + 0] * rw + 1.0) * 0.5;    win[winOffset + 1]=view[viewOffset + 1] + view[viewOffset + 3] * (scratch[V2_OFFSET + 1] * rw + 1.0) * 0.5;    win[winOffset + 2]=(scratch[V2_OFFSET + 2] * rw + 1.0) * 0.5;  }  return GL10.GL_TRUE;}  }
class C{  public String expressionTipText(){  return "Set the math expression to apply. Eg. a1^2*a5/log(a7*4.0)";}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void waitForAllSlavesToFinishEvaluating(final EvolutionState state){synchronized (allSlaves) {    Iterator iter=allSlaves.iterator();    while (iter.hasNext()) {      SlaveConnection slaveConnection=(SlaveConnection)(iter.next());      try {        slaveConnection.dataOut.flush();      } catch (      java.io.IOException e) {      }    }    notifyMonitor(allSlaves);  }  boolean shouldCycle=true;synchronized (allSlaves) {    while (shouldCycle) {      shouldCycle=false;      Iterator iter=allSlaves.iterator();      while (iter.hasNext()) {        SlaveConnection slaveConnection=(SlaveConnection)(iter.next());        int jobs=slaveConnection.numJobs();        if (jobs != 0) {          debug("Slave " + slaveConnection + " has "+ jobs+ " more jobs to finish.");          shouldCycle=true;          break;        }      }      if (shouldCycle) {        debug("Waiting for slaves to finish their jobs.");        waitOnMonitor(allSlaves);        debug("At least one job has been finished.");      }    }    notifyMonitor(allSlaves);  }  debug("All slaves have finished their jobs.");}  }
class C{  public static _RecursionType fromString(final String value) throws SOAPSerializationException {  return (_RecursionType)Enumeration.fromString(value,_RecursionType.VALUES_TO_INSTANCES);}  }
class C{  public ProcessRunner(Process proc,boolean hasInput) throws IOException {  this.proc=proc;  this.stdoutStream=proc.getInputStream();  this.stderrStream=proc.getErrorStream();  this.stdinStream=proc.getOutputStream();  if (!hasInput) {    this.stdinStream.close();    this.stdinStream=null;  }}  }
class C{  private void calculateNextIteration(){  boolean[][] nextIter=new boolean[_size][_size];  for (int j=0; j < _size; j++) {    for (int k=0; k < _size; k++) {      nextIter[j][k]=iterateCell(j,k);    }  }  displayIteration(nextIter);}  }
class C{  @TearDown public void tearDown() throws Exception {  Ignition.stopAll(true);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TINTERFACE___IS_ABSTRACT:    return isAbstract();case TypesPackage.TINTERFACE___GET_SUPER_CLASSIFIER_REFS:  return getSuperClassifierRefs();case TypesPackage.TINTERFACE___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:return getImplementedOrExtendedInterfaceRefs();}return super.eInvoke(operationID,arguments);}  }
class C{  public static View text(int position,Context context,String text,int desiredHeight){  TextView result=new TextView(context);  result.setHeight(desiredHeight);  result.setText(text);  final ViewGroup.LayoutParams lp=new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  result.setLayoutParams(lp);  result.setId(position);  result.setTag("text");  return result;}  }
class C{  void addEntry(int hash,Object key,Object value,int bucketIndex){  createEntry(hash,key,value,bucketIndex);  Entry eldest=header.after;  if (removeEldestEntry(eldest)) {    removeEntryForKey(eldest.key);  } else {    if (size >= threshold)     resize(2 * table.length);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected int height(TreeNode<E> root){  if (root == null)   return 0;  return 1 + Math.max(height(root.left),height(root.right));}  }
class C{  public void finishedTestCase(UnitTest test,boolean passed){  if (passed) {    Log.p(test.getClass().getName() + " passed");    testsExecuted.put(test.getClass().getName(),Boolean.TRUE);  } else {    Log.p(test.getClass().getName() + " failed");    testsExecuted.put(test.getClass().getName(),Boolean.FALSE);  }}  }
class C{  public static String selectFolder(RepositoryLocation resolveRelativeTo,Component c){  return selectLocation(resolveRelativeTo,null,c,false,true);}  }
class C{  protected void deactivateTx(final Tx localState) throws IllegalStateException {  if (localState == null)   throw new IllegalArgumentException();  localState.lock.lock();  try {    if (!localState.isReadOnly() && !localState.isComplete())     throw new IllegalStateException("Not complete: " + localState);    localState.releaseResources();    if (activeTx.remove(localState.getStartTimestamp()) == null) {      throw new IllegalStateException("Not in local tables: tx=" + localState);    }  }  finally {    localState.lock.unlock();  }}  }
class C{  private void editPost(final String selectedWallId,final String selectedTagId){  final Intent editWallPostIntent=new Intent(getActivity(),EditWallPostActivity.class);  editWallPostIntent.putExtra(AppConstants.Keys.EDIT_POST,true);  editWallPostIntent.putExtra(AppConstants.Keys.WALL_ID,selectedWallId);  editWallPostIntent.putExtra(AppConstants.Keys.TAG_ID,selectedTagId);  startActivity(editWallPostIntent);}  }
class C{  public CommentResource(String taskId,String comment,Date posted){  super();  this.taskId=taskId;  this.comment=comment;  this.posted=posted;}  }
class C{  public void broadcast(String channel,RealTimeMessage message,boolean withoutMe){  Map<String,Object> paramsToSend=prepareData(channel,message);  broadcast(channel,withoutMe,paramsToSend);}  }
class C{  public boolean isRemove(){  return isRemove;}  }
class C{  public String toString(){  return value + " (" + locale+ ")";}  }
class C{  protected void validate(){  super.validate();  updateGrid();}  }
class C{  private int updateCheckpoint(Connection conn,String key,byte[] state,Time expTime) throws SQLException {  PreparedStatement st=null;  try {    st=conn.prepareStatement(updateSql);    st.setBytes(1,state);    st.setTime(2,expTime);    st.setString(3,key);    return st.executeUpdate();  }  finally {    U.close(st,log);  }}  }
class C{  public void removeActionListener(ActionListener al){  emblem.removeActionListener(al);}  }
class C{  @Override public int size(Object instance){  if (instance == null) {    return 0;  }  return this.size;}  }
class C{  public final void shiftRange(int from,int to,Instances source,int startIndex,int lastPlusOne) throws Exception {  int classIndex;  double weight;  Instance instance;  int i;  for (i=startIndex; i < lastPlusOne; i++) {    instance=source.instance(i);    classIndex=(int)instance.classValue();    weight=instance.weight();    m_perClassPerBag[from][classIndex]-=weight;    m_perClassPerBag[to][classIndex]+=weight;    m_perBag[from]-=weight;    m_perBag[to]+=weight;  }}  }
class C{  public void callArgVisitors(XPathVisitor visitor){}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();}  }
class C{  public CloseOthersAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,null);  putValue(LONG_DESCRIPTION,res.getString("CloseOthersAction.statusbar"));  putValue(NAME,res.getString("CloseOthersAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("CloseOthersAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("CloseOthersAction.image")))));}  }
class C{  private void collectSourceMethods(SourceCallChainInfo cci,Set<SootMethod> result){  result.add(cci.method);  for (  SourceCallChainInfo callee : cci.contents) {    collectSourceMethods(callee,result);  }}  }
class C{  public void verifyExceptionSegments(SegmentedTimeline timeline,String[] exceptionString,Format fmt) throws ParseException {  long[] exception=verifyFillInExceptions(timeline,exceptionString,fmt);  int m=exception.length;  assertEquals(exception.length,timeline.getExceptionSegments().size());  SegmentedTimeline.Segment lastSegment=timeline.getSegment(exception[m - 1]);  for (int i=0; i < m; i++) {    SegmentedTimeline.Segment segment=timeline.getSegment(exception[i]);    assertTrue(segment.inExceptionSegments());    assertEquals(m - i,timeline.getExceptionSegmentCount(segment.getSegmentStart(),lastSegment.getSegmentEnd()));    assertEquals(Math.max(0,m - i - 2),timeline.getExceptionSegmentCount(exception[i] + 1,exception[m - 1] - 1));  }}  }
class C{  static public boolean handleRestart(){  return AppsBase.handleRestart();}  }
class C{  public BasicSplitPaneDivider createDefaultDivider(){  return new CompiereSplitPaneDivider(this);}  }
class C{  private void drawTexts(Canvas canvas,float textSize,Typeface typeface,String[] texts,float[] textGridWidths,float[] textGridHeights){  mPaint.setTextSize(textSize);  mPaint.setTypeface(typeface);  canvas.drawText(texts[0],textGridWidths[3],textGridHeights[0],Integer.parseInt(texts[0]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[1],textGridWidths[4],textGridHeights[1],Integer.parseInt(texts[1]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[2],textGridWidths[5],textGridHeights[2],Integer.parseInt(texts[2]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[3],textGridWidths[6],textGridHeights[3],Integer.parseInt(texts[3]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[4],textGridWidths[5],textGridHeights[4],Integer.parseInt(texts[4]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[5],textGridWidths[4],textGridHeights[5],Integer.parseInt(texts[5]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[6],textGridWidths[3],textGridHeights[6],Integer.parseInt(texts[6]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[7],textGridWidths[2],textGridHeights[5],Integer.parseInt(texts[7]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[8],textGridWidths[1],textGridHeights[4],Integer.parseInt(texts[8]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[9],textGridWidths[0],textGridHeights[3],Integer.parseInt(texts[9]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[10],textGridWidths[1],textGridHeights[2],Integer.parseInt(texts[10]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[11],textGridWidths[2],textGridHeights[1],Integer.parseInt(texts[11]) == selection ? mSelectedPaint : mPaint);}  }
class C{  public Boolean isUserConfigurable(){  return userConfigurable;}  }
class C{  public long forceGetValueAsLong(long defaultValue){  long[] l=getValueAsLongs();  if (l != null && l.length >= 1) {    return l[0];  }  byte[] b=getValueAsBytes();  if (b != null && b.length >= 1) {    return b[0];  }  Rational[] r=getValueAsRationals();  if (r != null && r.length >= 1 && r[0].getDenominator() != 0) {    return (long)r[0].toDouble();  }  return defaultValue;}  }
class C{  public static String[] splitNoCoalesce(String s,char delimiter){  return splitNoCoalesce(s,Character.toString(delimiter));}  }
class C{  public void initialize(GridKernalContext ctx,boolean convertBinary) throws IgniteCheckedException {  A.ensure(typName != null || nativeFactory != null,"Either typName or nativeFactory must be set in PlatformDotNetCacheStore");  platformCtx=PlatformUtils.platformContext(ctx.grid());  try (PlatformMemory mem=platformCtx.memory().allocate()){    PlatformOutputStream out=mem.output();    BinaryRawWriterEx writer=platformCtx.writer(out);    write(writer,convertBinary);    out.synchronize();    ptr=platformCtx.gateway().cacheStoreCreate(mem.pointer());  } }  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Message sendMessageSynchronously(int what,int arg1,int arg2){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  Message resultMsg=sendMessageSynchronously(msg);  return resultMsg;}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitParameter(name,access);}  }
class C{  private void commercialResult(String stream,String text,RequestResult result){  String channel="#" + stream;  if (isChannelOpen(channel)) {    g.printLine(channel,text);  } else {    g.printLine(text + " (" + stream+ ")");  }  g.commercialResult(stream,text,result);}  }
class C{  private void addLenient(String fieldName,String value){  namesAndValues.add(fieldName);  namesAndValues.add(value.trim());}  }
class C{  public Source<T> andAlternateWithSource(Source<T> rhs){  return Compositions.interleave(this,rhs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:45.987 -0400",hash_original_method="EC306B886409E33C7187B4E052188C9E",hash_generated_method="E1A9B248B3601041B560DA28AF5958D1") public InetUnixAddress(byte[] path){  super(AF_UNIX,path,null);}  }
class C{  private String[] copyOfRange(final String[] original,int from,int to){  int newLength=to - from;  if (newLength < 0) {    throw new IllegalArgumentException(from + " > " + to);  }  String[] copy=new String[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public static MonitorComposite combine(Collection<MonitorComposite> monitorCompositeList){  Date previousDate=null;  Date finalDate=null;  Iterator<MonitorComposite> iter=monitorCompositeList.iterator();  List<MonitorComposite> monitorCompositeResultsList=new ArrayList<MonitorComposite>();  List<String> instanceNameList=new ArrayList<String>();  while (iter.hasNext()) {    MonitorComposite mc=iter.next();    instanceNameList.add(mc.getInstanceName());    monitorCompositeResultsList.add(mc);    if (previousDate == null || mc.getDateCreated().after(previousDate)) {      finalDate=mc.getDateCreated();    }    previousDate=mc.getDateCreated();  }  MonitorComposite mc=new MonitorCompositeIterator(monitorCompositeResultsList).toMonitorComposite().setDateCreated(finalDate);  return mc.setInstanceName(Misc.getAsString(instanceNameList));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:57.209 -0400",hash_original_method="4BFE8A5DE4FE06221223B0828088CB22",hash_generated_method="6FF71AD905FA6A6D3810CABF223622E3") public void createGLEnvironment(){  GLEnvironment glEnvironment=new GLEnvironment();  glEnvironment.initWithNewContext();  setGLEnvironment(glEnvironment);}  }
class C{  static TBigInteger modInverseHars(TBigInteger a,TBigInteger m){  TBigInteger u, v, r, s, temp;  if (a.compareTo(m) == TBigInteger.LESS) {    u=m;    v=a;    r=TBigInteger.ZERO;    s=TBigInteger.ONE;  } else {    v=m;    u=a;    s=TBigInteger.ZERO;    r=TBigInteger.ONE;  }  int uLen=u.bitLength();  int vLen=v.bitLength();  int f=uLen - vLen;  while (vLen > 1) {    if (u.sign == v.sign) {      u=u.subtract(v.shiftLeft(f));      r=r.subtract(s.shiftLeft(f));    } else {      u=u.add(v.shiftLeft(f));      r=r.add(s.shiftLeft(f));    }    uLen=u.abs().bitLength();    vLen=v.abs().bitLength();    f=uLen - vLen;    if (f < 0) {      temp=u;      u=v;      v=temp;      temp=r;      r=s;      s=temp;      f=-f;      vLen=uLen;    }  }  if (v.sign == 0) {    return TBigInteger.ZERO;  }  if (v.sign < 0) {    s=s.negate();  }  if (s.compareTo(m) == TBigInteger.GREATER) {    return s.subtract(m);  }  if (s.sign < 0) {    return s.add(m);  }  return s;}  }
class C{  public void addAll(long... values){  for (  long value : values) {    add(value);  }}  }
class C{  public Certificado(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void createStores(){  stream1Store=new ManagedTimeStateImpl();  stream2Store=new ManagedTimeStateImpl();  stream1Store.setNumBuckets(noOfBuckets);  stream2Store.setNumBuckets(noOfBuckets);  if (bucketSpanTime != null) {    stream1Store.getTimeBucketAssigner().setBucketSpan(Duration.millis(bucketSpanTime));    stream2Store.getTimeBucketAssigner().setBucketSpan(Duration.millis(bucketSpanTime));  }  stream1Store.getTimeBucketAssigner().setExpireBefore(Duration.millis(getExpiryTime()));  stream2Store.getTimeBucketAssigner().setExpireBefore(Duration.millis(getExpiryTime()));  stream1Data=new ManagedTimeStateMultiValue(stream1Store,!isLeftKeyPrimary());  stream2Data=new ManagedTimeStateMultiValue(stream2Store,!isRightKeyPrimary());}  }
class C{  public boolean isNamespaceNode(Node n){  if (Node.ATTRIBUTE_NODE == n.getNodeType()) {    String attrName=n.getNodeName();    return (attrName.startsWith("xmlns:") || attrName.equals("xmlns"));  }  return false;}  }
class C{  public static SystemCfg createSystem(){  return new SystemCfgImpl();}  }
class C{  public static void write(Writer self,Writable writable) throws IOException {  writable.writeTo(self);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean emitCachedSignals(){  if (this.item != null) {    this.writeSubscriber.onNext(this.item);  }  if (this.error != null) {    this.writeSubscriber.onError(this.error);    return true;  }  if (this.completed) {    this.writeSubscriber.onComplete();    return true;  }  return false;}  }
class C{  public String levelDataToString(){  return "Dummy level string";}  }
class C{  private FactorAnalysisRunner(DataWrapper dataWrapper,Parameters pc){  super(dataWrapper,pc,null);}  }
class C{  public Builder initializeAsRecovery(IndexMetaData indexMetaData){  return initializeEmpty(indexMetaData,new UnassignedInfo(UnassignedInfo.Reason.CLUSTER_RECOVERED,null));}  }
class C{  public final double cos(){  return Math.cos(this.radians);}  }
class C{  private static ScreenshotImpl create(Context context,Bundle args,HostFileSender hostFileSender){  String mode=args.getString("screenshot_mode");  Album album=AlbumImpl.createStreaming(context,"default",hostFileSender);  album.cleanup();  return new ScreenshotImpl(album,new ViewHierarchy());}  }
class C{  public void testTrackName_date_local(){  PreferencesUtils.setString(getContext(),R.string.track_name_key,getContext().getString(R.string.settings_recording_track_name_date_local_value));  assertEquals(StringUtils.formatDateTime(getContext(),START_TIME),TrackNameUtils.getTrackName(getContext(),TRACK_ID,START_TIME,null));}  }
class C{  public static Tradestrategy parseContractLine(String csvLine) throws PersistentModelException, ParseException {  Tradestrategy tradestrategy=null;  Contract contract=null;  Tradingday tradingday=null;  Scanner scanLine=new Scanner(csvLine);  scanLine.useDelimiter("\\,");  int tokenNumber=0;  while (scanLine.hasNext()) {    tokenNumber++;    String token=scanLine.next().trim();    if (token.length() == 0)     continue;switch (tokenNumber) {case 1:{        if ("DES".equals(token.toUpperCase())) {          tradestrategy=new Tradestrategy();          contract=new Contract();          contract.setCurrency(Currency.USD);          tradestrategy.setContract(contract);        } else {          throw new PersistentModelException(1,200,"Incorrect file format! CSV file format is: DES, Underlying, Sec Type, Exchange, Expiration (yyyyMM, or yyyyMMdd opt),Strike Price(opt),PUT/CALL(opt),Multiplier(opt),BOT/SLD(opt)|DATE(MM/dd/yyyy) (opt)| Tier(Opt)| Mkt Bias(opt)| Mkt Bar(opt)| Mkt Gap(opt)");        }        break;      }case 2:{      contract.setSymbol(token.toUpperCase());      break;    }case 3:{    contract.setSecType(token.toUpperCase());    break;  }case 4:{  if (token.contains("/")) {    String[] exchanges=token.split("/");    contract.setExchange(exchanges[0].toUpperCase());    contract.setPrimaryExchange(exchanges[1].toUpperCase());  } else {    contract.setExchange(token.toUpperCase());  }  break;}case 5:{if (token.length() == 6) {  contract.setExpiry(TradingCalendar.getZonedDateTimeFromDateString(token,"yyyyMM",TradingCalendar.MKT_TIMEZONE));} else if (token.length() == 8) {  contract.setExpiry(TradingCalendar.getZonedDateTimeFromDateString(token,"yyyyMMdd",TradingCalendar.MKT_TIMEZONE));}break;}case 6:{break;}case 7:{break;}case 8:{if (token.length() > 0) contract.setPriceMultiplier(new BigDecimal(token));break;}case 9:{if (token.length() > 0) contract.setCurrency(token);break;}case 10:{Scanner custScan=new Scanner(token);custScan.useDelimiter("\\|");int custTokenNumber=0;while (custScan.hasNext()) {custTokenNumber++;String custToken=custScan.next().trim();if (custToken.length() == 0) continue;switch (custTokenNumber) {case 1:{tradestrategy.setSide(custToken.toUpperCase());break;}case 2:{;ZonedDateTime todayOpen=TradingCalendar.getTradingDayStart(TradingCalendar.getZonedDateTimeFromDateString(custToken,"MM/dd/yyyy",TradingCalendar.MKT_TIMEZONE));tradingday=Tradingday.newInstance(todayOpen);tradestrategy.setTradingday(tradingday);break;}case 3:{tradestrategy.setTier(custToken.toUpperCase());break;}case 4:{tradingday.setMarketGap(custToken.toUpperCase());break;}case 5:{tradingday.setMarketBias(custToken.toUpperCase());break;}case 6:{tradingday.setMarketBar(custToken.toUpperCase());break;}default :{}}}custScan.close();break;}default :{}}}scanLine.close();return tradestrategy;}  }
class C{  protected void addSocket(IceSocketWrapper socket,TransportAddress remoteAddress){  Transport transport=socket.getUDPSocket() != null ? Transport.UDP : Transport.TCP;  TransportAddress localAddress=new TransportAddress(socket.getLocalAddress(),socket.getLocalPort(),transport);  final Map<TransportAddress,Map<TransportAddress,Connector>> connectorsMap=(transport == Transport.UDP) ? udpConnectors : tcpConnectors;synchronized (connectorsMap) {    Map<TransportAddress,Connector> connectorsForLocalAddress=connectorsMap.get(localAddress);    if (connectorsForLocalAddress == null) {      connectorsForLocalAddress=new HashMap<>();      connectorsMap.put(localAddress,connectorsForLocalAddress);    }    if (!connectorsForLocalAddress.containsKey(remoteAddress)) {      Connector connector=new Connector(socket,remoteAddress,messageQueue,this);      connectorsForLocalAddress.put(remoteAddress,connector);      connector.start();    } else {      logger.info("Not creating a new Connector, because we already " + "have one for the given address pair: " + localAddress + " -> "+ remoteAddress);    }  }}  }
class C{  public void addResponseHeader(NamedList<Object> header){  values.add(RESPONSE_HEADER_KEY,header);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  XMLTokener x=new XMLTokener(string);  while (x.more() && x.skipPast("<")) {    parse(x,jo,null);  }  return jo;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public Vector4d mulProject(Matrix4dc mat){  return mulProject(mat,this);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public HttpTransport(final String host){  super("http://" + host + ":"+ PORT+ "/");  this.host=host;  cookies=null;  stop=false;}  }
class C{  public static WebElement findElementClickableAfter(SearchContext parent,By by,int timeoutInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(by);  try {    WebElementWait wait=new WebElementWait(parent,timeoutInSeconds);    return wait.until(null);  } catch (  TimeoutException e) {    throw new TimeoutException(String.format("Element %s is not clickable after %s seconds",by,timeoutInSeconds),e);  }}  }
class C{  private void loadFiles(boolean needsOplogs){  String partialFileName=getName();  boolean foundIfFile=false;{    int ifDirIdx=0;    int idx=0;    String ifName="BACKUP" + name + DiskInitFile.IF_FILE_EXT;    for (    DirectoryHolder dh : this.directories) {      File f=new File(dh.getDir(),ifName);      if (f.exists()) {        if (foundIfFile) {          throw new IllegalStateException("Detected multiple disk store initialization files named \"" + ifName + "\". This disk store directories must only contain one initialization file.");        } else {          foundIfFile=true;          ifDirIdx=idx;        }      }      idx++;    }    this.infoFileDirIndex=ifDirIdx;  }  createLockFile(partialFileName);  boolean finished=false;  try {    Map<File,DirectoryHolder> persistentBackupFiles=persistentOplogs.findFiles(partialFileName);{      boolean backupFilesExist=!persistentBackupFiles.isEmpty();      boolean ifRequired=backupFilesExist || isOffline();      this.initFile=new DiskInitFile(partialFileName,this,ifRequired,persistentBackupFiles.keySet());      if (this.upgradeVersionOnly) {        if (Version.CURRENT.compareTo(getRecoveredGFVersion()) <= 0) {          if (getCache() != null) {            getCache().close();          }          throw new IllegalStateException("Recovered version = " + getRecoveredGFVersion() + ": "+ LocalizedStrings.DiskStoreAlreadyInVersion_0.toLocalizedString(getRecoveredGFVersionName()));        }      } else {        if (Version.GFE_70.compareTo(getRecoveredGFVersion()) > 0) {          if (getCache() != null) {            getCache().close();          }          throw new IllegalStateException("Recovered version = " + getRecoveredGFVersion() + ": "+ LocalizedStrings.DiskStoreStillAtVersion_0.toLocalizedString(getRecoveredGFVersionName()));        }      }    }{      FilenameFilter overflowFileFilter=new DiskStoreFilter(OplogType.OVERFLOW,true,partialFileName);      for (      DirectoryHolder dh : this.directories) {        File dir=dh.getDir();        File[] files=FileUtil.listFiles(dir,overflowFileFilter);        for (        File file : files) {          boolean deleted=file.delete();          if (!deleted && file.exists() && logger.isDebugEnabled()) {            logger.debug("Could not delete file {}",file);          }        }      }    }    persistentOplogs.createOplogs(needsOplogs,persistentBackupFiles);    finished=true;    if (foundIfFile) {      logger.info(LocalizedMessage.create(LocalizedStrings.DiskStoreImpl_RecoveredDiskStore_0_With_Id_1,new Object[]{getName(),getDiskStoreID()}));    } else {      logger.info(LocalizedMessage.create(LocalizedStrings.DiskStoreImpl_CreatedDiskStore_0_With_Id_1,new Object[]{getName(),getDiskStoreID()}));    }  }  finally {    if (!finished) {      closeLockFile();      if (getDiskInitFile() != null) {        getDiskInitFile().close();      }    }  }}  }
class C{  static List<Map<String,Object>> query(ResultSet rs) throws SQLException {  List<Map<String,Object>> list=new ArrayList<Map<String,Object>>();  ResultSetMetaData meta=rs.getMetaData();  int columnCount=meta.getColumnCount();  while (rs.next()) {    HashMap<String,Object> map=new HashMap<String,Object>();    for (int i=0; i < columnCount; i++) {      map.put(meta.getColumnLabel(i + 1),rs.getObject(i + 1));    }    list.add(map);  }  return list;}  }
class C{  public boolean isOmitEmptyAttributes(){  return omitEmptyAttributes;}  }
class C{  public static void main(String... a) throws Exception {  System.setProperty("h2.delayWrongPasswordMin","0");  System.setProperty("h2.delayWrongPasswordMax","0");  TestBase.createCaller().init().test();}  }
class C{  public ESRITileFactory(){  super(new ESRITileProviderInfo());  ((ESRITileProviderInfo)super.getInfo()).factory=this;  datasource="ArcWeb:TA.Streets.NA";}  }
class C{  public void initialize(){  canvas.init();  if (!initialized) {    SceneFramework.getInstance().getFrameHandler().addCanvas(canvas);    SceneFramework.getInstance().getFrameHandler().addUpdater(SceneCanvasPanel.this);    initialized=true;  }}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public MultDatasourceTransactionInterceptor(){}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  boolean appendMarker(Node<K,V> f){  return casNext(f,new Node<K,V>(f));}  }
class C{  public static void e(String tag,String msg,Throwable tr){  println(ERROR,tag,msg,tr);}  }
class C{  private double recalculateInterval(){  double result=Double.POSITIVE_INFINITY;  int seriesCount=this.dataset.getSeriesCount();  for (int series=0; series < seriesCount; series++) {    result=Math.min(result,calculateIntervalForSeries(series));  }  return result;}  }
class C{  public static boolean isInBuilding(IGame game,Entity entity,Coords coords){  if (game == null) {    return false;  }  if (entity == null) {    return false;  }  if (coords == null) {    return false;  }  return Compute.isInBuilding(game,entity.getElevation(),coords);}  }
class C{  public Vertex checkRelationRelationshipForAllWords(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,Vertex left,Vertex right,Vertex relation,Collection<Relationship> words){  if (words != null && !right.instanceOf(Primitive.WORD)) {    Set<Vertex> processed=new HashSet<Vertex>();    processed.add(right);    for (    Relationship word : words) {      Collection<Relationship> otherMeanings=word.getTarget().getRelationships(Primitive.MEANING);      if (otherMeanings != null) {        for (        Relationship meaning : otherMeanings) {          if (!processed.contains(meaning.getTarget())) {            processed.add(meaning.getTarget());            if (left.hasOrInheritsRelationship(meaning.getTarget(),right)) {              return network.createVertex(Primitive.TRUE);            } else             if (left.hasOrInheritsInverseRelationship(meaning.getTarget(),right)) {              return network.createVertex(Primitive.FALSE);            }          }        }      }    }  }  return null;}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public static void showFinishedNotification(String content,int time,boolean error,Context context,Intent intent){  if (context == null)   return;  NotificationManager mNotMan=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  int icon=R.drawable.icon;  CharSequence title=String.format((String)context.getText(R.string.Utils_DownloadFinishedTitle),time);  CharSequence ticker=context.getText(R.string.Utils_DownloadFinishedTicker);  CharSequence text=content;  if (content == null)   text=context.getText(R.string.Utils_DownloadFinishedText);  if (error) {    icon=R.drawable.icon;    title=context.getText(R.string.Utils_DownloadErrorTitle);    ticker=context.getText(R.string.Utils_DownloadErrorTicker);  }  Notification notification=buildNotification(context,icon,ticker,title,text,true,intent);  mNotMan.notify(ID_FINISHED,notification);}  }
class C{  public static final void clearLoggingBehaviors(){synchronized (loggingBehaviors) {    loggingBehaviors.clear();  }}  }
class C{  public void release(){  CassandraHelper.closeSession(ses);  ses=null;}  }
class C{  public static ReferenceElement.ReferenceElementResult parseStrict(PsiBuilder builder,boolean expressionPossible){  if (TokenSets.BUILT_IN_TYPES.contains(builder.getTokenType())) {    return parseBuiltInTypeStrict(builder);  } else   if (builder.getTokenType() == GroovyTokenTypes.mIDENT) {    return parseClassOrInterfaceTypeStrict(builder,expressionPossible);  }  return ReferenceElement.ReferenceElementResult.FAIL;}  }
class C{  @Override public synchronized void writeCustom(final int section,final Object str){switch (section) {case RESET_COLORSPACE:    fillSet=false;  strokeSet=false;break;case FLUSH_ADDITIONAL_OBJECTS_ON_PAGE:flushAdditionalObjOnPage();break;case FLUSH:flush();break;default :super.writeCustom(section,str);}}  }
class C{  protected void assertMessagesAreReceived() throws JMSException {  waitForMessagesToBeDelivered();  assertMessagesReceivedAreValid(messages);}  }
class C{  private static boolean eq(long v1,long v2){  return v1 == v2;}  }
class C{  public ZipEntry(ZipEntry entry){  this((java.util.zip.ZipEntry)entry);  setInternalAttributes(entry.getInternalAttributes());  setExternalAttributes(entry.getExternalAttributes());  setExtraFields(entry.getExtraFields());}  }
class C{  public BayesImEditorObs(BayesImWrapperObs bayesImWrapperObs){  this(bayesImWrapperObs,bayesImWrapperObs.getBayesIm());}  }
class C{  public InlineQueryResultMpeg4Gif.InlineQueryResultMpeg4GifBuilder mpeg4Height(int mpeg4Height){  this.mpeg4_height=mpeg4Height;  return this;}  }
class C{  public void enableSpeakerOnTheNextCall(){  mEnableSpeakerOnTheNextCall=true;}  }
class C{  private static <T extends AbstractBlockBase<T>>PriorityQueue<T> initializeWorklist(T startBlock,BitSet visitedBlocks){  PriorityQueue<T> result=new PriorityQueue<>(INITIAL_WORKLIST_CAPACITY,new BlockOrderComparator<>());  result.add(startBlock);  visitedBlocks.set(startBlock.getId());  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public LegendItemBlockContainer(Arrangement arrangement,Dataset dataset,Comparable seriesKey){  super(arrangement);  this.dataset=dataset;  this.seriesKey=seriesKey;}  }
class C{  public boolean unregisterResource(Long rsrcId,Closeable rsrc){  return rsrcMap.remove(rsrcId,rsrc);}  }
class C{  public ChangePropertiesCommand(final TFSRepository repository,final ItemProperties[] properties,final RecursionType recursion,final LockLevel lockLevel,final PendChangesOptions options,final String[] itemPropertyFilters){  Check.notNull(repository,"repository");  Check.notNull(properties,"properties");  Check.notNull(recursion,"recursion");  Check.notNull(lockLevel,"lockLevel");  Check.notNull(options,"options");  this.repository=repository;  this.properties=properties;  this.recursion=recursion;  this.lockLevel=lockLevel;  this.options=options;  this.itemPropertyFilters=itemPropertyFilters;  nonFatalHelper=new NonFatalCommandHelper(repository);}  }
class C{  public Set<String> addContent(Assignment assign){  if (!paused) {    curState.addToState(assign);    return update();  } else {    log.info("system is paused, ignoring content " + assign);    return Collections.emptySet();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Level genericLogLevelToLog4j(LogLevel logLevel){  Level level=Level.ALL;  if (logLevel.equals(LogLevel.OFF)) {    level=Level.OFF;  } else   if (logLevel.equals(LogLevel.FATAL)) {    level=Level.FATAL;  } else   if (logLevel.equals(LogLevel.ERROR)) {    level=Level.ERROR;  } else   if (logLevel.equals(LogLevel.WARN)) {    level=Level.WARN;  } else   if (logLevel.equals(LogLevel.INFO)) {    level=Level.INFO;  } else   if (logLevel.equals(LogLevel.DEBUG)) {    level=Level.DEBUG;  } else   if (logLevel.equals(LogLevel.TRACE)) {    level=Level.TRACE;  } else   if (logLevel.equals(LogLevel.ALL)) {    level=Level.ALL;  } else {    LOGGER.warn("Unsupported log level encountered: " + logLevel.toString() + ". Using ALL.");  }  return level;}  }
class C{  private void initializeControl(){  DataSetDesign dataSetDesign=getInitializationDesign();  if (dataSetDesign == null)   return;  String queryText=dataSetDesign.getQueryText();  String setupQueryText=((dataSetDesign.getPrivateProperties() != null) ? dataSetDesign.getPrivateProperties().getProperty(Query.PROP_SETUP_QUERY_TEXT) : null);  if (queryText == null && setupQueryText == null)   return;  m_queryTextField.setText((queryText == null ? "" : queryText));  m_setupQueryTextField.setText((setupQueryText == null ? "" : setupQueryText));  validateData();  setMessage(DEFAULT_MESSAGE);}  }
class C{  public static Request createBindingRequest(long priority,boolean controlling,long tieBreaker) throws StunException {  Request bindingRequest=createBindingRequest();  PriorityAttribute attribute=AttributeFactory.createPriorityAttribute(priority);  bindingRequest.putAttribute(attribute);  if (controlling) {    IceControllingAttribute iceControllingAttribute=AttributeFactory.createIceControllingAttribute(tieBreaker);    bindingRequest.putAttribute(iceControllingAttribute);  } else {    IceControlledAttribute iceControlledAttribute=AttributeFactory.createIceControlledAttribute(tieBreaker);    bindingRequest.putAttribute(iceControlledAttribute);  }  return bindingRequest;}  }
class C{  public boolean isQuiesceGuestEnabled(){  return quiesceGuestEnabled;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument03.class,args);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object val=stack.pop();  int elemNum=getInt(stack);  Object obj=stack.pop();  if (obj instanceof java.util.List)   ((java.util.List)obj).set(elemNum,val); else   if (obj.getClass().isArray())   java.lang.reflect.Array.set(obj,elemNum,val);  return obj;}  }
class C{  @Override public void startProcessingRequest(MailboxSession session){}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public boolean admits(int numInt,int numLong,int numDouble,int numString){  return (numInt == numberOfInts) && (numLong == numberOfLongs) && (numDouble == numberOfDoubles)&& (numString == numberOfStrings);}  }
class C{  public void executeQuery(){  KeyNamePair docTypeKNPair=cmbDocType.getSelectedItem().toKeyNamePair();  executeQuery(docTypeKNPair,form.getMiniTable());  form.getMiniTable().repaint();  form.invalidate();}  }
class C{  public EsriLayer(String name,URL dbf,URL shp,URL shx){  this(name,dbf,shp,shx,DrawingAttributes.getDefaultClone());}  }
class C{  public boolean isFreeHand(){  return this.freeHand;}  }
class C{  public int hashCode(){  return fShape.hashCode();}  }
class C{  public static boolean startsWith(BytesRef ref,BytesRef prefix){  return sliceEquals(ref,prefix,0);}  }
class C{  public TypeDeclaration canonicalize(){  List<Type> sts=getSatisfiedTypes();  if (sts.isEmpty()) {    return unit.getAnythingDeclaration();  } else   if (sts.size() == 1) {    Type st=sts.get(0);    if (st.isExactlyNothing()) {      return unit.getNothingDeclaration();    }  }  for (  Type st : sts) {    if (st.isUnion()) {      List<Type> caseTypes=st.getCaseTypes();      List<Type> ulist=new ArrayList<Type>(caseTypes.size());      for (      Type ct : caseTypes) {        List<Type> ilist=new ArrayList<Type>(sts.size());        for (        Type pt : sts) {          if (pt == st) {            addToIntersection(ilist,ct,unit);          } else {            addToIntersection(ilist,pt,unit);          }        }        Type it=canonicalIntersection(ilist,unit);        addToUnion(ulist,it);      }      TypeDeclaration result=new UnionType(unit);      result.setCaseTypes(ulist);      return result;    }  }  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TYPE__CONSTRAINT:    return constraint != null && !constraint.isEmpty();case TypesPackage.TYPE__ABSTRACT:  return abstract_ != ABSTRACT_EDEFAULT;case TypesPackage.TYPE__VISIBLE:return visible != VISIBLE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static boolean isOdd(int x){  return (x % 2) != 0;}  }
class C{  @Around("restMethods()") public Object blockRestMethods(ProceedingJoinPoint pjp) throws Throwable {  return checkAllowedMethodAdvice.checkNotAllowedMethods(pjp);}  }
class C{  public InlineQueryResultVenue.InlineQueryResultVenueBuilder address(String address){  this.address=address;  return this;}  }
class C{  public boolean isThreadsInheritInitializersClassLoadContext(){  return threadsInheritInitializersClassLoadContext;}  }
class C{  public final void updateInRange(){  Key key=new Key(block.getChunk().getX(),block.getChunk().getZ());  block.getWorld().getRawPlayers().stream().filter(null).forEach(null);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TYPE_PARAMETER__BOUND:    if (resolve)     return getBound();  return basicGetBound();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:    return ((InternalEList<?>)getTypeVars()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void debugWhatToShow(int whatToShow){  java.util.Vector v=new java.util.Vector();  if (0 != (whatToShow & DTMFilter.SHOW_ATTRIBUTE))   v.addElement("SHOW_ATTRIBUTE");  if (0 != (whatToShow & DTMFilter.SHOW_NAMESPACE))   v.addElement("SHOW_NAMESPACE");  if (0 != (whatToShow & DTMFilter.SHOW_CDATA_SECTION))   v.addElement("SHOW_CDATA_SECTION");  if (0 != (whatToShow & DTMFilter.SHOW_COMMENT))   v.addElement("SHOW_COMMENT");  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT))   v.addElement("SHOW_DOCUMENT");  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT_FRAGMENT))   v.addElement("SHOW_DOCUMENT_FRAGMENT");  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT_TYPE))   v.addElement("SHOW_DOCUMENT_TYPE");  if (0 != (whatToShow & DTMFilter.SHOW_ELEMENT))   v.addElement("SHOW_ELEMENT");  if (0 != (whatToShow & DTMFilter.SHOW_ENTITY))   v.addElement("SHOW_ENTITY");  if (0 != (whatToShow & DTMFilter.SHOW_ENTITY_REFERENCE))   v.addElement("SHOW_ENTITY_REFERENCE");  if (0 != (whatToShow & DTMFilter.SHOW_NOTATION))   v.addElement("SHOW_NOTATION");  if (0 != (whatToShow & DTMFilter.SHOW_PROCESSING_INSTRUCTION))   v.addElement("SHOW_PROCESSING_INSTRUCTION");  if (0 != (whatToShow & DTMFilter.SHOW_TEXT))   v.addElement("SHOW_TEXT");  int n=v.size();  for (int i=0; i < n; i++) {    if (i > 0)     System.out.print(" | ");    System.out.print(v.elementAt(i));  }  if (0 == n)   System.out.print("empty whatToShow: " + whatToShow);  System.out.println();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.233 -0500",hash_original_method="5ADE199AB33D628FF4C86910DA36B8AB",hash_generated_method="42E12700736BB9E065543D5A29400F0E") public static boolean isDigit(char c){  return isDigit((int)c);}  }
class C{  public Connection putConnection(Connection connection){  return connections.put(connection.getIdentifier(),connection);}  }
class C{  public Address plus(Extent extent){  return null;}  }
class C{  public void addInstanceof(String classname){  addOpcode(INSTANCEOF);  addIndex(constPool.addClassInfo(classname));}  }
class C{  public static CPreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency,String trxName){  if (sql == null || sql.length() == 0)   throw new IllegalArgumentException("No SQL");  return ProxyFactory.newCPreparedStatement(resultSetType,resultSetConcurrency,sql,trxName);}  }
class C{  public StepPattern(int whatToShow,String namespace,String name,int axis,int axisForPredicate){  super(whatToShow,namespace,name);  m_axis=axis;}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "INVALID CUipcMem_flags: " + n;  }  String result="";  if ((n & CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS) != 0)   result+="CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS";  return result;}  }
class C{  <T,R>IgniteInternalFuture<R> executeAsync(IgfsTask<T,R> task,@Nullable IgfsRecordResolver rslvr,Collection<IgfsPath> paths,@Nullable T arg){  return executeAsync(task,rslvr,paths,true,cfg.getMaximumTaskRangeLength(),arg);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.014 -0500",hash_original_method="588E30C769F46315FA0899538D14C7E2",hash_generated_method="D856B998DECD43338AFD989E289B53ED") public boolean hasParm(String pname){  return parameters.hasNameValue(pname);}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  return src.createCompatibleWritableRaster();}  }
class C{  public VcpcAltRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public boolean isDrawBarShadowEnabled(){  return mDrawBarShadow;}  }
class C{  public boolean execute(IGameState gameState){  boolean rc=super.execute(gameState);  TicTacToeState state=(TicTacToeState)gameState;  NeighborState neighbor=(NeighborState)state.storedData();  neighbor.updateLast(player,new Cell(col,row));  return rc;}  }
class C{  public static boolean isTransient(int mod){  return (mod & TRANSIENT) != 0;}  }
class C{  public static LatLon rhumbEndPosition(LatLon p,double rhumbAzimuthRadians,double pathLengthRadians){  if (p == null) {    throw new IllegalArgumentException("LatLon Is Null");  }  return rhumbEndPosition(p,Angle.fromRadians(rhumbAzimuthRadians),Angle.fromRadians(pathLengthRadians));}  }
class C{  public static int[] centroid(int w,int h,BoundingBox v,final Way way){  float XY[]=centroidXY(w,h,v,way);  if (XY == null) {    return null;  }  int lat=GeoMath.yToLatE7(h,w,v,XY[1]);  int lon=GeoMath.xToLonE7(w,v,XY[0]);  int result[]={lat,lon};  return result;}  }
class C{  public boolean isAtEndOfFile(){  return endOfFile;}  }
class C{  protected String mountObb(String obbFilePath,String key,int expectedState){  return doMountObb(obbFilePath,key,expectedState);}  }
class C{  public String toString(){  StringBuffer sb;  if (serverPrepareResult != null) {    sb=new StringBuffer("sql : '" + serverPrepareResult.getSql() + "'");    if (parameterCount > 0) {      sb.append(", parameters : [");      for (int i=0; i < parameterCount; i++) {        ParameterHolder holder=currentParameterHolder.get(i);        if (holder == null) {          sb.append("null");        } else {          sb.append(holder.toString());        }        if (i != parameterCount - 1) {          sb.append(",");        }      }      sb.append("]");    }  } else {    sb=new StringBuffer("sql : '" + sql + "'");    sb.append(", parameters : [");    for (int i=0; i < currentParameterHolder.size(); i++) {      ParameterHolder holder=currentParameterHolder.get(i);      if (holder == null) {        sb.append("null");      } else {        sb.append(holder.toString());      }      if (i != currentParameterHolder.size() - 1) {        sb.append(",");      }    }    sb.append("]");  }  return sb.toString();}  }
class C{  public void lock(V v,boolean state){  for (  Layout<V,E> layout : layouts.keySet()) {    if (layout.getGraph().getVertices().contains(v)) {      layout.lock(v,state);    }  }  delegate.lock(v,state);}  }
class C{  @SuppressWarnings("nullness") static <T extends Object>T[] toArrayImpl(Collection<?> c,T[] array){  int size=c.size();  if (array.length < size) {    array=newArray(array,size);  }  fillArray(c,array);  if (array.length > size) {    array[size]=null;  }  return array;}  }
class C{  @Override public Iterator<Solution> iterator(){  return new PopulationIterator();}  }
class C{  public synchronized void checkAccess(LicenseCheckerCallback callback){  if (mPolicy.allowAccess()) {    Log.i(TAG,"Using cached license response");    callback.allow(Policy.LICENSED);  } else {    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);    if (mService == null) {      Log.i(TAG,"Binding to licensing service.");      try {        boolean bindResult=mContext.bindService(new Intent("com.android.vending.licensing.ILicensingService"),this,Context.BIND_AUTO_CREATE);        if (bindResult) {          mPendingChecks.offer(validator);        } else {          Log.e(TAG,"Could not bind to service.");          handleServiceConnectionError(validator);        }      } catch (      Exception e) {        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);      }    } else {      mPendingChecks.offer(validator);      runChecks();    }  }}  }
class C{  public InvalidCredentialsException(String message){  super(message);}  }
class C{  private void checkCache(Container parent){  if (parent == null)   return;  if (dirty)   grid=null;  int mc=PlatformDefaults.getModCount();  if (lastModCount != mc) {    grid=null;    lastModCount=mc;  }  if (parent.isValid() == false) {    if (lastWasInvalid == false) {      lastWasInvalid=true;      int hash=0;      boolean resetLastInvalidOnParent=false;      for (      ComponentWrapper wrapper : ccMap.keySet()) {        Object component=wrapper.getComponent();        if (component instanceof JTextArea || component instanceof JEditorPane)         resetLastInvalidOnParent=true;        hash^=wrapper.getLayoutHashCode();        hash+=285134905;      }      if (resetLastInvalidOnParent)       resetLastInvalidOnParent(parent);      if (hash != lastHash) {        grid=null;        lastHash=hash;      }      Dimension ps=parent.getSize();      if (lastInvalidSize == null || !lastInvalidSize.equals(ps)) {        if (grid != null)         grid.invalidateContainerSize();        lastInvalidSize=ps;      }    }  } else {    lastWasInvalid=false;  }  ContainerWrapper par=checkParent(parent);  setDebug(par,getDebugMillis() > 0);  if (grid == null)   grid=new Grid(par,lc,rowSpecs,colSpecs,ccMap,callbackList);  dirty=false;}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  if (bModel.getDocument() != null) {    JCas mergeJCas=null;    try {      mergeJCas=repository.readCurationCas(bModel.getDocument());      int nextSentenceAddress=getNextPageFirstSentenceAddress(mergeJCas,bModel.getSentenceAddress(),bModel.getPreferences().getWindowSize());      if (bModel.getSentenceAddress() != nextSentenceAddress) {        aTarget.add(getFeedbackPanel());        updateSentenceNumber(mergeJCas,nextSentenceAddress);        aTarget.add(numberOfPages);        curationPanel.updatePanel(aTarget,curationContainer);        updatePanel(curationContainer,aTarget);      } else {        aTarget.appendJavaScript("alert('This is last page!')");      }    } catch (    UIMAException e) {      error(ExceptionUtils.getRootCauseMessage(e));    }catch (    ClassNotFoundException e) {      error(e.getMessage());    }catch (    IOException e) {      error(e.getMessage());    }catch (    BratAnnotationException e) {      error(e.getMessage());    }  } else {    aTarget.appendJavaScript("alert('Please open a document first!')");  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WZoom.init");}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public void lockDevice(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  operation.setStatus(resources.getString(R.string.operation_value_completed));  resultBuilder.build(operation);  JSONObject inputData;  String message=null;  boolean isHardLockEnabled=false;  try {    if (operation.getPayLoad() != null) {      inputData=new JSONObject(operation.getPayLoad().toString());      message=inputData.getString(Constants.ADMIN_MESSAGE);      isHardLockEnabled=inputData.getBoolean(Constants.IS_HARD_LOCK_ENABLED);    }  } catch (  JSONException e) {    operation.setStatus(resources.getString(R.string.operation_value_error));    operation.setOperationResponse("Error in parsing LOCK payload.");    resultBuilder.build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }  if (isHardLockEnabled && Constants.SYSTEM_APP_ENABLED) {    if (message == null || message.isEmpty()) {      message=resources.getString(R.string.txt_lock_activity);    }    Preference.putBoolean(context,Constants.IS_LOCKED,true);    Preference.putString(context,Constants.LOCK_MESSAGE,message);    operation.setStatus(resources.getString(R.string.operation_value_completed));    resultBuilder.build(operation);    enableHardLock(message,operation);  } else {    operation.setStatus(resources.getString(R.string.operation_value_completed));    resultBuilder.build(operation);    NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.drawable.ic_launcher).setContentTitle(context.getString(R.string.alert_message)).setContentText(message).setAutoCancel(true).setContentIntent(PendingIntent.getActivity(context,0,new Intent(),0));    NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);    notificationManager.notify(0,mBuilder.build());    devicePolicyManager.lockNow();  }  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"Device locked");  }}  }
class C{  public static NotFoundE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  NotFoundE object=new NotFoundE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement()) {        reader.next();      }      return null;    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"NotFound".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (NotFoundE)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","NotFound").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.setNotFound(null);        reader.next();        reader.next();      } else {        object.setNotFound(NotFound.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static byte[][] generateMultiplicationTable(){  byte[][] result=new byte[256][256];  for (int a=0; a < FIELD_SIZE; a++) {    for (int b=0; b < FIELD_SIZE; b++) {      result[a][b]=multiply((byte)a,(byte)b);    }  }  return result;}  }
class C{  public ThreadPool(int size){  this.size=size;  taskPool=new LinkedBlockingQueue<Runnable>();  initPool();}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Boolean isVrNfcNicSelectionSupported(){  return vrNfcNicSelectionSupported;}  }
class C{  public static void start(){  hold=true;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void testUCIHistory() throws ChessParseError {  Game game=new Game(null,new TimeControlData());  Pair<Position,ArrayList<Move>> hist=game.getUCIHistory();  assertEquals(0,hist.second.size());  Position expectedPos=new Position(game.currPos());  assertEquals(expectedPos,hist.first);  game.processString("Nf3");  hist=game.getUCIHistory();  assertEquals(1,hist.second.size());  assertEquals(TextIO.UCIstringToMove("g1f3"),hist.second.get(0));  assertEquals(expectedPos,hist.first);  game.processString("e5");  hist=game.getUCIHistory();  expectedPos=new Position(game.currPos());  assertEquals(0,hist.second.size());  assertEquals(expectedPos,hist.first);  game.processString("Nc3");  hist=game.getUCIHistory();  assertEquals(1,hist.second.size());  assertEquals(TextIO.UCIstringToMove("b1c3"),hist.second.get(0));  assertEquals(expectedPos,hist.first);  game.processString("Nc6");  hist=game.getUCIHistory();  assertEquals(2,hist.second.size());  assertEquals(TextIO.UCIstringToMove("b1c3"),hist.second.get(0));  assertEquals(TextIO.UCIstringToMove("b8c6"),hist.second.get(1));  assertEquals(expectedPos,hist.first);  game.processString("--");  hist=game.getUCIHistory();  expectedPos=new Position(game.currPos());  assertEquals(0,hist.second.size());  assertEquals(expectedPos,hist.first);  game.processString("Nf6");  hist=game.getUCIHistory();  assertEquals(1,hist.second.size());  assertEquals(TextIO.UCIstringToMove("g8f6"),hist.second.get(0));  assertEquals(expectedPos,hist.first);  for (int i=0; i < 6; i++)   game.undoMove();  hist=game.getUCIHistory();  assertEquals(0,hist.second.size());  expectedPos=TextIO.readFEN(TextIO.startPosFEN);  assertEquals(expectedPos,hist.first);}  }
class C{  private String _cleanSelectorString(String selector){  SearchBuffer sb=SearchBuffer.obtainSearchBuffer();  StringBuffer buff=sb.getStringBuffer();  boolean lastWasSpace=true;  int lastIndex=0;  char[] chars=selector.toCharArray();  int numChars=chars.length;  String retValue=null;  try {    for (int counter=0; counter < numChars; counter++) {switch (chars[counter]) {case ' ':        if (!lastWasSpace) {          lastWasSpace=true;          if (lastIndex < counter) {            buff.append(chars,lastIndex,1 + counter - lastIndex);          }        }      lastIndex=counter + 1;    break;case '\n':case '\r':case '\t':  if (!lastWasSpace) {    lastWasSpace=true;    if (lastIndex < counter) {      buff.append(chars,lastIndex,counter - lastIndex);      buff.append(' ');    }  }lastIndex=counter + 1;break;default :lastWasSpace=false;break;}}if (lastWasSpace && buff.length() > 0) {buff.setLength(buff.length() - 1);} else if (lastIndex < numChars) {buff.append(chars,lastIndex,numChars - lastIndex);}retValue=buff.toString();}  finally {SearchBuffer.releaseSearchBuffer(sb);}return retValue;}  }
class C{  public DenseMatrix(double[][] matrix){  this.matrix=new double[matrix.length][matrix[0].length];  for (int i=0; i < this.matrix.length; i++)   if (matrix[i].length != this.matrix[i].length)   throw new RuntimeException("Given matrix was not of consistent size (rows have diffrent lengths)"); else   System.arraycopy(matrix[i],0,this.matrix[i],0,this.matrix[i].length);}  }
class C{  private String extractHandName(final Player instance,final String handSlot){  if (instance != null && handSlot != null) {    if (instance.hasSlot(handSlot)) {      final RPSlot rpslot=instance.getSlot(handSlot);      for (      final RPObject object : rpslot) {        if (object instanceof Item) {          final Item item=(Item)object;          return item.getName();        }      }      return null;    }    return null;  }  return null;}  }
class C{  private String streamAttachment(HttpServletRequest request,HttpServletResponse response){  int AD_Note_ID=WebUtil.getParameterAsInt(request,P_Note_ID);  if (AD_Note_ID == 0) {    log.fine("No AD_Note_ID)");    return "No Notice ID";  }  int attachmentIndex=WebUtil.getParameterAsInt(request,P_ATTACHMENT_INDEX);  if (attachmentIndex == 0) {    log.fine("No index)");    return "No Request Attachment index";  }  log.info("AD_Notice_ID=" + AD_Note_ID + " / "+ attachmentIndex);  Properties ctx=JSPEnv.getCtx(request);  MNote doc=new MNote(ctx,AD_Note_ID,null);  if (doc.getAD_Note_ID() != AD_Note_ID) {    log.fine("Note not found - ID=" + AD_Note_ID);    return "Notice not found";  }  MAttachment attachment=doc.getAttachment(false);  if (attachment == null) {    log.fine("No Attachment for AD_Note_ID=" + AD_Note_ID);    return "Notice Attachment not found";  }  HttpSession session=request.getSession(true);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu.getAD_User_ID() != doc.getAD_User_ID()) {    log.warning("AD_Note_ID=" + AD_Note_ID + " - User_ID="+ doc.getAD_User_ID()+ " = Web_User="+ wu.getAD_User_ID());    return "Your Notice not found";  }  return WebUtil.streamAttachment(response,attachment,attachmentIndex);}  }
class C{  public MultiServer(){  this(NetworkConfig.DEFAULT_TCP_PORT,NetworkConfig.DEFAULT_UDP_PORT);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tFull class name of classifier to use, followed\n" + "\tby scheme options. eg:\n" + "\t\t\"weka.classifiers.bayes.NaiveBayes -D\"\n"+ "\t(default: weka.classifiers.rules.ZeroR)","W",1,"-W <classifier specification>"));  result.addElement(new Option("\tInstead of training a classifier on the data, one can also provide\n" + "\ta serialized model and use that for tagging the data.","serialized",1,"-serialized <file>"));  result.addElement(new Option("\tAdds an attribute with the actual classification.\n" + "\t(default: off)","classification",0,"-classification"));  result.addElement(new Option("\tRemoves the old class attribute.\n" + "\t(default: off)","remove-old-class",0,"-remove-old-class"));  result.addElement(new Option("\tAdds attributes with the distribution for all classes \n" + "\t(for numeric classes this will be identical to the attribute \n" + "\toutput with '-classification').\n"+ "\t(default: off)","distribution",0,"-distribution"));  result.addElement(new Option("\tAdds an attribute indicating whether the classifier output \n" + "\ta wrong classification (for numeric classes this is the numeric \n" + "\tdifference).\n"+ "\t(default: off)","error",0,"-error"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public static boolean checkSHA(final String shaHash,final File file){  if (TextUtils.isEmpty(shaHash) || file == null || !FileUtils.isReadable(file)) {    Log.e("Given String is NULL or File is NULL or File is not readable");    return false;  }  final String hash=getSHA(file);  if (hash == null) {    Log.e("calculated hash is NULL");    return false;  }  return hash.equalsIgnoreCase(shaHash);}  }
class C{  public ScanQuery(int part){  this(part,null);}  }
class C{  public void addAll(List<SoftWrapImpl> softWraps){  myWraps.addAll(softWraps);}  }
class C{  protected CDDRawMatch(){}  }
class C{  public static Script createOutputScript(ECKey key){  return new ScriptBuilder().data(key.getPubKey()).op(OP_CHECKSIG).build();}  }
class C{  public NotificationChain basicSetDeclaredElementType(TypeRef newDeclaredElementType,NotificationChain msgs){  TypeRef oldDeclaredElementType=declaredElementType;  declaredElementType=newDeclaredElementType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.PRIMITIVE_TYPE__DECLARED_ELEMENT_TYPE,oldDeclaredElementType,newDeclaredElementType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:20.462 -0400",hash_original_method="F0050DB3C23864EC2EC73B2F8ADFE920",hash_generated_method="EB7EF1851021BB80B98A26BB23902B4B") public boolean importFile(int objectHandle,String destPath){  return native_import_file(objectHandle,destPath);}  }
class C{  public static double maxNorm(double[] x1,double[] x2){  double distance=0.0;  for (int d=0; d < x1.length; d++) {    double difference=x1[d] - x2[d];    if (difference < 0) {      difference=-difference;    }    if (difference > distance) {      distance=difference;    }  }  return distance;}  }
class C{  void saveSettings(){  GUIPreferences.getInstance().setWindowPosX(frame.getLocation().x);  GUIPreferences.getInstance().setWindowPosY(frame.getLocation().y);  GUIPreferences.getInstance().setWindowSizeWidth(frame.getSize().width);  GUIPreferences.getInstance().setWindowSizeHeight(frame.getSize().height);}  }
class C{  public TickLabelEntity(Shape area,String toolTipText,String urlText){  super(area,toolTipText,urlText);}  }
class C{  public void endElement(String namespaceURI,String localName,String name) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  m_prefixMap.popNamespaces(m_elemContext.m_currentElemDepth,null);  try {    final java.io.Writer writer=m_writer;    if (m_elemContext.m_startTagOpen) {      if (m_tracer != null)       super.fireStartElem(m_elemContext.m_elementName);      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        processAttributes(m_writer,nAttrs);        m_attributes.clear();      }      if (m_spaceBeforeClose)       writer.write(" />"); else       writer.write("/>");    } else {      if (m_cdataTagOpen)       closeCDATA();      if (shouldIndent())       indent(m_elemContext.m_currentElemDepth - 1);      writer.write('<');      writer.write('/');      writer.write(name);      writer.write('>');    }  } catch (  IOException e) {    throw new SAXException(e);  }  if (!m_elemContext.m_startTagOpen && m_doIndent) {    m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop();  }  m_isprevtext=false;  if (m_tracer != null)   super.fireEndElem(name);  m_elemContext=m_elemContext.m_prev;}  }
class C{  public void unregisterClient(ClientProxyMembershipID memberId,boolean normalShutdown){  if (logger.isDebugEnabled()) {    logger.debug("CacheClientNotifier: Unregistering all clients with member id: {}",memberId);  }  CacheClientProxy proxy=getClientProxy(memberId);  if (proxy != null) {    final boolean isTraceEnabled=logger.isTraceEnabled();    if (isTraceEnabled) {      logger.trace("CacheClientNotifier: Potential client: {}",proxy);    }    if (!proxy.startRemoval()) {      if (isTraceEnabled) {        logger.trace("CacheClientNotifier: Potential client: {} matches {}",proxy,memberId);      }      closeDeadProxies(Collections.singletonList(proxy),normalShutdown);    }  }}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  private double arcLengthRecursive(int indexLeft,double remainderLeft,int indexRight,double remainderRight){switch (indexRight - indexLeft) {case 0:    return arcLengthRecursive(indexLeft,remainderLeft,remainderRight);case 1:  return arcLengthRecursive(indexLeft,remainderLeft,1.0) + arcLengthRecursive(indexRight,0.0,remainderRight);default :return arcLengthRecursive(indexLeft,remainderLeft,indexRight - 1,1.0) + arcLengthRecursive(indexRight,0.0,remainderRight);}}  }
class C{  public PropertyPermission(String name,String actions){  super(name,actions);  init(getMask(actions));}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        v=OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      v=OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public boolean isMenuPopup(){  return menuPopup;}  }
class C{  protected void loadTableOIS(Vector<?> data){  dialog.getMiniTable().removeMiniTableSelectionListener(dialog);  DefaultTableModel model=new DefaultTableModel(data,getOISColumnNames());  dialog.getMiniTable().setModel(model);  configureMiniTable(dialog.getMiniTable());  dialog.getMiniTable().addMiniTableSelectionListener(dialog);}  }
class C{  public synchronized void stop(){  if (!isRunning()) {    return;  }  try {    this.serverSocket.close();  } catch (  IOException e) {  }  if (this.serverThread != null && this.serverThread.isAlive()) {    try {      this.serverThread.interrupt();      this.serverThread.join();    } catch (    InterruptedException e) {    }  }  this.serverThread=null;  this.serverSocket=null;}  }
class C{  public QueueException(String message){  super(message);}  }
class C{  public TestTree(final ID sessionId,final Collection<? extends TestSuite> suites){  this(sessionId,suites,valueOf(sessionId));}  }
class C{  public Closure<V> curry(final Object argument){  return curry(new Object[]{argument});}  }
class C{  public boolean isBlockScoped(){  boolean _switchResult=false;  VariableStatementKeyword _varStmtKeyword=this.getVarStmtKeyword();  if (_varStmtKeyword != null) {switch (_varStmtKeyword) {case LET:      _switchResult=true;    break;case CONST:  _switchResult=true;break;case VAR:_switchResult=false;break;default :VariableStatementKeyword _varStmtKeyword_1=this.getVarStmtKeyword();String _plus=("unsupported enum literal: " + _varStmtKeyword_1);throw new UnsupportedOperationException(_plus);}} else {VariableStatementKeyword _varStmtKeyword_1=this.getVarStmtKeyword();String _plus=("unsupported enum literal: " + _varStmtKeyword_1);throw new UnsupportedOperationException(_plus);}return _switchResult;}  }
class C{  public Operation copyTo(Extent target){  BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());  ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),target,original.getOrigin());  copy.setTransform(transform);  return copy;}  }
class C{  public String addStaticImport(String qualifiedMemberName){  if (isReadOnly())   return qualifiedMemberName;  ICompilationUnit cu=getCompilationUnit();  if (cu == null)   return qualifiedMemberName;  int memberOffset=qualifiedMemberName.lastIndexOf('.');  if (memberOffset == -1)   return qualifiedMemberName;  String typeName=qualifiedMemberName.substring(0,memberOffset);  String memberName=qualifiedMemberName.substring(memberOffset + 1,qualifiedMemberName.length());  try {    boolean isField;    if ("*".equals(memberName)) {      isField=true;    } else {      IJavaProject javaProject=cu.getJavaProject();      IType type=javaProject.findType(typeName);      if (type == null)       return qualifiedMemberName;      IField field=type.getField(memberName);      if (field.exists()) {        isField=true;      } else       if (hasMethod(type,memberName)) {        isField=false;      } else {        return qualifiedMemberName;      }    }    CompilationUnit root=getASTRoot(cu);    if (fImportRewrite == null) {      if (root == null) {        fImportRewrite=StubUtility.createImportRewrite(cu,true);      } else {        fImportRewrite=StubUtility.createImportRewrite(root,true);      }    }    ImportRewriteContext context;    if (root == null)     context=null; else     context=new ContextSensitiveImportRewriteContext(root,getCompletionOffset(),fImportRewrite);    return fImportRewrite.addStaticImport(typeName,memberName,isField,context);  } catch (  JavaModelException e) {    handleException(null,e);    return typeName;  }}  }
class C{  public ReplicationJob createJobForRenameTable(long auditLogId,long auditLogEntryCreateTime,Table renameFromTable,Table renameToTable) throws StateUpdateException {  ReplicationOperation replicationOperation=ReplicationOperation.RENAME_TABLE;  Map<String,String> extras=new HashMap<>();  extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId));  extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime));  HiveObjectSpec renameFromTableSpec=new HiveObjectSpec(renameFromTable);  HiveObjectSpec renameToTableSpec=new HiveObjectSpec(renameToTable);  Optional<Path> renameFromPath=ReplicationUtils.getLocation(renameFromTable);  Optional<Path> renameToPath=ReplicationUtils.getLocation(renameToTable);  PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,renameFromPath,srcCluster.getName(),renameFromTableSpec,new ArrayList<>(),ReplicationUtils.getTldt(renameFromTable),Optional.of(renameToTableSpec),renameToPath,extras);  return new ReplicationJob(conf,new RenameTableTask(conf,srcCluster,destCluster,destinationObjectFactory,objectConflictHandler,renameFromTableSpec,renameToTableSpec,renameFromPath,renameToPath,ReplicationUtils.getTldt(renameFromTable),copyPartitionJobExecutor,directoryCopier),onStateChangeHandler,persistedJobInfo);}  }
class C{  public void edit(){  DataViewerDialog dialog;  int result;  Instances copy;  Instances newInstances;  copy=new Instances(m_Data);  dialog=new DataViewerDialog(GUIHelper.getParentFrame(this),ModalityType.DOCUMENT_MODAL);  dialog.setSize(800,600);  dialog.setLocationRelativeTo(this);  result=dialog.showDialog(copy);  if (result == DataViewerDialog.APPROVE_OPTION) {    addUndoPoint();    newInstances=dialog.getInstances();    notifyTabsDataChanged(null,newInstances);  }}  }
class C{  public void putIntegerArrayList(String key,ArrayList<Integer> value){  unparcel();  mMap.put(key,value);}  }
class C{  public static void addGlideProgressListener(ProgressListener listener){  if (listener != null) {    if (findGlideProgressListener(listener) != null) {      return;    } else {      glideProgressListeners.add(new WeakReference<ProgressListener>(listener));      Log.d(GlideProgressListener.class.getSimpleName(),"Glide download listener add");    }  }}  }
class C{  public int executeForChangedRowCount(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return 0;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForChangedRowCount(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  public void testSimplePipeline() throws Exception {  TungstenProperties config=helper.createSimpleRuntime();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  Pipeline pipeline=runtime.getPipeline();  pipeline.release(runtime);}  }
class C{  boolean isLoadedAscanrulesSet(){  return loadedAscanRulesSet;}  }
class C{  public static WsSecuritySignature createWsSecuritySignatureAssertion(HolderOfKeyConfig config,String assertionId){  return new WsSecuritySignatureAssertion(config,assertionId);}  }
class C{  public int deinterleave(int dimensions,long scalar,int dim){  int bitsPerValue=getBitsPerValue(dimensions);  int value=0;  for (int i=0; i < bitsPerValue; i++) {    value|=(scalar >> (dim + (dimensions - 1) * i)) & (1L << i);  }  return value;}  }
class C{  private static void __trustAllHttpsCertificates(){  com.sun.net.ssl.SSLContext context;  if (__trustManagers == null) {    __trustManagers=new com.sun.net.ssl.TrustManager[]{new _FakeX509TrustManager()};  }  try {    context=com.sun.net.ssl.SSLContext.getInstance("SSL");    context.init(null,__trustManagers,new SecureRandom());  } catch (  GeneralSecurityException gse) {    throw new IllegalStateException(gse.getMessage());  }  com.sun.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());}  }
class C{  public Vec2D subtract(Vec2D otherVector){  return new Vec2D(x() - otherVector.x(),y() - otherVector.y());}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  public void clearSolrData(){  try {    solrClient.deleteByQuery("*:*");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void putSiteAssignedVirtualArrayEntry(String internalSiteName,StringSet virtualArrays){  if (this.siteAssignedVirtualArrays == null) {    this.siteAssignedVirtualArrays=new StringSetMap();  }  this.siteAssignedVirtualArrays.put(internalSiteName,virtualArrays);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private static UnitValue parseUnitValue(String s,UnitValue emptyReplacement,boolean isHor){  if (s == null || s.length() == 0)   return emptyReplacement;  String cs=s;  char c0=s.charAt(0);  if (c0 == '(' && s.charAt(s.length() - 1) == ')')   s=s.substring(1,s.length() - 1);  if (c0 == 'n' && (s.equals("null") || s.equals("n")))   return null;  if (c0 == 'i' && s.equals("inf"))   return UnitValue.INF;  int oper=getOper(s);  boolean inline=oper == UnitValue.ADD || oper == UnitValue.SUB || oper == UnitValue.MUL || oper == UnitValue.DIV;  if (oper != UnitValue.STATIC) {    String[] uvs;    if (inline == false) {      String sub=s.substring(4,s.length() - 1).trim();      uvs=toTrimmedTokens(sub,',');      if (uvs.length == 1)       return parseUnitValue(sub,null,isHor);    } else {      char delim;      if (oper == UnitValue.ADD) {        delim='+';      } else       if (oper == UnitValue.SUB) {        delim='-';      } else       if (oper == UnitValue.MUL) {        delim='*';      } else {        delim='/';      }      uvs=toTrimmedTokens(s,delim);      if (uvs.length > 2) {        String last=uvs[uvs.length - 1];        String first=s.substring(0,s.length() - last.length() - 1);        uvs=new String[]{first,last};      }    }    if (uvs.length != 2)     throw new IllegalArgumentException("Malformed UnitValue: '" + s + "'");    UnitValue sub1=parseUnitValue(uvs[0],null,isHor);    UnitValue sub2=parseUnitValue(uvs[1],null,isHor);    if (sub1 == null || sub2 == null)     throw new IllegalArgumentException("Malformed UnitValue. Must be two sub-values: '" + s + "'");    return new UnitValue(isHor,oper,sub1,sub2,cs);  } else {    try {      String[] numParts=getNumTextParts(s);      float value=numParts[0].length() > 0 ? Float.parseFloat(numParts[0]) : 1;      return new UnitValue(value,numParts[1],isHor,oper,cs);    } catch (    Exception e) {      throw new IllegalArgumentException("Malformed UnitValue: '" + s + "'",e);    }  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEListUI();}  }
class C{  public void cancelAllMessage(){  logD("cancelAllMessage %B %B %d",isDead,isPause,list.size());  list.clear();  handler.removeCallbacksAndMessages(null);}  }
class C{  public boolean handlePrack(SIPRequest prackRequest){  if (!this.isServer()) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- not a server Dialog");    return false;  }  SIPServerTransaction sipServerTransaction=(SIPServerTransaction)this.getFirstTransaction();  SIPResponse sipResponse=sipServerTransaction.getReliableProvisionalResponse();  if (sipResponse == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- ReliableResponse not found");    return false;  }  RAck rack=(RAck)prackRequest.getHeader(RAckHeader.NAME);  if (rack == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- rack header not found");    return false;  }  CSeq cseq=(CSeq)sipResponse.getCSeq();  if (!rack.getMethod().equals(cseq.getMethod())) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- CSeq Header does not match PRACK");    return false;  }  if (rack.getCSeqNumberLong() != cseq.getSeqNumber()) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- CSeq Header does not match PRACK");    return false;  }  RSeq rseq=(RSeq)sipResponse.getHeader(RSeqHeader.NAME);  if (rack.getRSequenceNumber() != rseq.getSeqNumber()) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- RSeq Header does not match PRACK");    return false;  }  return sipServerTransaction.prackRecieved();}  }
class C{  public static boolean isSystemApplication(PackageManager packageManager,String packageName){  if (packageManager == null || packageName == null || packageName.length() == 0) {    return false;  }  try {    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);  } catch (  NameNotFoundException e) {    e.printStackTrace();  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.CHECK_REF__CHECK:    return check != null;}return super.eIsSet(featureID);}  }
class C{  public T caseTraceCaseDef_(TraceCaseDef_ object){  return null;}  }
class C{  public void addValue(BigDecimal bd){  if (bd != null) {    m_sum=m_sum.add(bd);    m_count++;    if (m_min == null)     m_min=bd;    m_min=m_min.min(bd);    if (m_max == null)     m_max=bd;    m_max=m_max.max(bd);    m_sumSquare=m_sumSquare.add(bd.multiply(bd));  }  m_totalCount++;}  }
class C{  public boolean contains(int value){  return indexOf(value) >= 0;}  }
class C{  public int intValue(){  return 0;}  }
class C{  public Builder updateProfileUrl(String profileUrl){  this.profileUrl=profileUrl;  return this;}  }
class C{  public void focusGained(FocusEvent e){  if (component.isEnabled()) {    if (component.isEditable()) {      setVisible(true);    }    setSelectionVisible(true);  }}  }
class C{  public synchronized void disconnect(){  if (connection != null && connection.isConnected()) {    connection.close();    transaction=null;    setTransaction(null);  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  for (int i=0; i < m_patterns.length; i++) {    m_patterns[i].fixupVariables(vars,globalsSize);  }}  }
class C{  public void linkResultDirectedEdges(){  getResultAreaEdges();  DirectedEdge firstOut=null;  DirectedEdge incoming=null;  int state=SCANNING_FOR_INCOMING;  for (int i=0; i < resultAreaEdgeList.size(); i++) {    DirectedEdge nextOut=(DirectedEdge)resultAreaEdgeList.get(i);    DirectedEdge nextIn=nextOut.getSym();    if (!nextOut.getLabel().isArea())     continue;    if (firstOut == null && nextOut.isInResult())     firstOut=nextOut;switch (state) {case SCANNING_FOR_INCOMING:      if (!nextIn.isInResult())       continue;    incoming=nextIn;  state=LINKING_TO_OUTGOING;break;case LINKING_TO_OUTGOING:if (!nextOut.isInResult()) continue;incoming.setNext(nextOut);state=SCANNING_FOR_INCOMING;break;}}if (state == LINKING_TO_OUTGOING) {if (firstOut == null) throw new TopologyException("no outgoing dirEdge found",getCoordinate());Assert.isTrue(firstOut.isInResult(),"unable to link last incoming dirEdge");incoming.setNext(firstOut);}}  }
class C{  NamespaceService(ArgusHttpClient client){  super(client);}  }
class C{  public void removeRelation(String relationId) throws RelationServiceNotRegisteredException, IllegalArgumentException, RelationNotFoundException {  isActive();  if (relationId == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"removeRelation",relationId);  Object result=getRelation(relationId);  if (result instanceof ObjectName) {    List<ObjectName> obsRefList=new ArrayList<ObjectName>();    obsRefList.add((ObjectName)result);    updateUnregistrationListener(null,obsRefList);  }  sendRelationRemovalNotification(relationId,null);  List<ObjectName> refMBeanList=new ArrayList<ObjectName>();  List<ObjectName> nonRefObjNameList=new ArrayList<ObjectName>();synchronized (myRefedMBeanObjName2RelIdsMap) {    for (    ObjectName currRefObjName : myRefedMBeanObjName2RelIdsMap.keySet()) {      Map<String,List<String>> relIdMap=myRefedMBeanObjName2RelIdsMap.get(currRefObjName);      if (relIdMap.containsKey(relationId)) {        relIdMap.remove(relationId);        refMBeanList.add(currRefObjName);      }      if (relIdMap.isEmpty()) {        nonRefObjNameList.add(currRefObjName);      }    }    for (    ObjectName currRefObjName : nonRefObjNameList) {      myRefedMBeanObjName2RelIdsMap.remove(currRefObjName);    }  }synchronized (myRelId2ObjMap) {    myRelId2ObjMap.remove(relationId);  }  if (result instanceof ObjectName) {synchronized (myRelMBeanObjName2RelIdMap) {      myRelMBeanObjName2RelIdMap.remove((ObjectName)result);    }  }  String relTypeName;synchronized (myRelId2RelTypeMap) {    relTypeName=myRelId2RelTypeMap.get(relationId);    myRelId2RelTypeMap.remove(relationId);  }synchronized (myRelType2RelIdsMap) {    List<String> relIdList=myRelType2RelIdsMap.get(relTypeName);    if (relIdList != null) {      relIdList.remove(relationId);      if (relIdList.isEmpty()) {        myRelType2RelIdsMap.remove(relTypeName);      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"removeRelation");  return;}  }
class C{  public static byte[] toPrimitive(final Byte[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_BYTE_ARRAY;  }  final byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].byteValue();  }  return result;}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  protected SuspensionRecord(){  super(null);}  }
class C{  @Override public boolean isSearchable(int columnIndex){  return true;}  }
class C{  public FBTpbMapper(Map<String,String> stringMapping) throws FBResourceException {  this();  processMapping(stringMapping);}  }
class C{  public String pathInfo(){  return _pathInfo;}  }
class C{  protected void addDomainIDPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DomainElement_domainID_feature"),getString("_UI_PropertyDescriptor_description","_UI_DomainElement_domainID_feature","_UI_DomainElement_type"),BasePackage.Literals.DOMAIN_ELEMENT__DOMAIN_ID,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  protected static <T>T checkNotNull(T object){  if (object == null) {    setInvalid();  }  return object;}  }
class C{  @NotNull protected List<RatedResolveResult> resolveInner(){  final ResolveResultList ret=new ResolveResultList();  final String referencedName=myElement.getReferencedName();  if (referencedName == null)   return ret;  if (myElement instanceof PyTargetExpression) {    if (PsiTreeUtil.getParentOfType(myElement,PyComprehensionElement.class) != null) {      ret.poke(myElement,getRate(myElement));      return ret;    }  }  ResolveProcessor processor=new ResolveProcessor(referencedName);  final PsiElement realContext=PyPsiUtils.getRealContext(myElement);  PsiElement roof=findResolveRoof(referencedName,realContext);  PyResolveUtil.scopeCrawlUp(processor,myElement,referencedName,roof);  return getResultsFromProcessor(referencedName,processor,realContext,roof);}  }
class C{  private List<Statement> joinAdjacentExprs(List<Statement> stmts){  if (stmts.isEmpty()) {    return null;  }  boolean changed=false;  boolean progress;  do {    progress=false;    Statement last=stmts.get(0);    for (int i=1, n=stmts.size(); i < n; ++i) {      Statement next=stmts.get(i);      if (isExpressionListTerminator(next) && last instanceof Conditional) {        Conditional combined=condAndImplicitElse((Conditional)last,next);        if (combined != null) {          ParseTreeNode optCond=optimize(combined,false);          if (isExpressionListTerminator(optCond)) {            stmts.subList(i - 1,i + 1).clear();            stmts.add(i - 1,last=(Statement)optCond);            --n;            --i;            progress=true;            continue;          }        }      }      last=next;    }    int firstExprStmt=-1;    for (int i=0, n=stmts.size(); ; ++i) {      Statement s=i != n ? stmts.get(i) : null;      if (firstExprStmt != -1 && (i == n || !(s instanceof ExpressionStmt))) {        int start=firstExprStmt;        int end=i;        firstExprStmt=-1;        if (isExpressionListTerminator(s)) {          ++end;        }        if (end - start >= 2) {          progress=true;          Expression joined=null;          for (          Statement toJoin : stmts.subList(start,end)) {            List<? extends ParseTreeNode> tjChildren=toJoin.children();            Expression e=tjChildren.isEmpty() ? undef(FilePosition.endOf(toJoin.getFilePosition())) : (Expression)tjChildren.get(0);            joined=joined == null ? e : commaOp(joined,e);          }          Statement newChild;          assert joined != null;          FilePosition exprPos=joined.getFilePosition();          if (s instanceof ReturnStmt) {            newChild=new ReturnStmt(exprPos,joined);          } else           if (s instanceof ThrowStmt) {            newChild=new ThrowStmt(exprPos,joined);          } else {            newChild=new ExpressionStmt(exprPos,joined);          }          stmts.subList(start,end).clear();          stmts.add(start,newChild);          n-=end - start;          i=start;        }      } else       if (s instanceof ExpressionStmt && firstExprStmt == -1) {        firstExprStmt=i;      }      if (i == n) {        break;      }    }    if (progress) {      changed=true;    }  } while (progress);  return changed ? stmts : null;}  }
class C{  public void abortAllocationContext(final IAllocationContext context,RWWriteCacheService writeCacheService){  if (m_pendingContextCommit) {    throw new IllegalStateException("Already pending commit");  }  if (m_context != null) {    for (    AllocBlock allocBlock : m_allocBlocks) {      allocBlock.abortshadow(writeCacheService);    }    m_freeBits=calcFreeBits();    m_context=context;  } else {    throw new IllegalArgumentException();  }}  }
class C{  public String name(){  return this.name;}  }
class C{  @NoInline @NoOptCompile public void broadcast(){  sysCall.sysMonitorBroadcast(monitor);}  }
class C{  @After public void cleanUp(){  FileUtils.deleteQuietly(new File(ASYNC_LOG_PATH));}  }
class C{  private boolean isValid(String to){  if (p_SetFutureCostTo.length() == 0)   return true;  String toTarget=to;  if (to.equals(TO_AverageInvoiceHistory))   to=TO_AverageInvoice;  if (to.equals(TO_AveragePOHistory))   to=TO_AveragePO;  if (to.equals(TO_FutureStandardCost))   to=TO_StandardCost;  if (to.equals(TO_AverageInvoice) || to.equals(TO_AveragePO) || to.equals(TO_FiFo)|| to.equals(TO_LiFo)|| to.equals(TO_StandardCost)) {    MCostElement ce=MCostElement.getByMaterialCostElementType(client);    return ce != null;  }  return true;}  }
class C{  public static <K,V>V atomicGetOrCreate(ConcurrentMap<K,V> map,K key,Callable<V> ctor){  V value=map.get(key);  if (value == null) {    try {      value=ctor.call();    } catch (    Exception e) {      throw new RuntimeException("Element constructor should now throw an exception",e);    }    V existing=map.putIfAbsent(key,value);    if (existing != null) {      return existing;    }  }  return value;}  }
class C{  public AuthenticationToken removeAuthenticationToken(String host,String realm){  return this.authenticationTokens.remove(host.concat(realm));}  }
class C{  public QueryStringDecoderUtil(String uri,Charset charset,boolean hasPath){  this(uri,charset,hasPath,DEFAULT_MAX_PARAMS);}  }
class C{  private PropertyEditor loadPropertyEditor(Class clz){  PropertyEditor editor=null;  try {    editor=(PropertyEditor)clz.newInstance();  } catch (  Exception e) {    e.printStackTrace();  }  return editor;}  }
class C{  public boolean onCoverRightclickClient(byte aSide,ICoverable aTileEntity,EntityPlayer aPlayer,float aX,float aY,float aZ){  return false;}  }
class C{  public SandboxRay(String name,Vector2 start,double direction){  super(start,direction);  this.name=name;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  private void switchMapType(MapType newMapType){  assert !locked;  T[] oldKeys=keys;  V[] oldValues=values;  mapType=newMapType;  allocate(getCapacity(num,true));  numCollisions=0;  if (newMapType == MapType.SORTED_LIST) {    List<FullEntry> entries=new ArrayList<FullEntry>(num);    for (int i=0; i < oldKeys.length; i++)     if (oldKeys[i] != null)     entries.add(new FullEntry(oldKeys[i],oldValues[i]));    Collections.sort(entries);    for (int i=0; i < num; i++) {      keys[i]=entries.get(i).key;      values[i]=entries.get(i).value;    }  } else   if (mapType == MapType.HASH_TABLE) {    num=0;    for (int i=0; i < oldKeys.length; i++) {      if (oldKeys[i] != null)       put(oldKeys[i],oldValues[i]);    }  }}  }
class C{  @Override public void mouseExited(MouseEvent e){  if (this.ownToolTipDelaysActive) {    ToolTipManager ttm=ToolTipManager.sharedInstance();    ttm.setInitialDelay(this.originalToolTipInitialDelay);    ttm.setReshowDelay(this.originalToolTipReshowDelay);    ttm.setDismissDelay(this.originalToolTipDismissDelay);    this.ownToolTipDelaysActive=false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:54.329 -0500",hash_original_method="C6730356D790440CF3C53B1796ADEA2C",hash_generated_method="0CAD47B083AF93FFE9E90E4101142A11") public AttributeTypeAndValue(String sOid,AttributeValue value) throws IOException {  if (sOid.charAt(0) >= '0' && sOid.charAt(0) <= '9') {    int[] array=org.apache.harmony.security.asn1.ObjectIdentifier.toIntArray(sOid);    ObjectIdentifier thisOid=getOID(array);    if (thisOid == null) {      thisOid=new ObjectIdentifier(array);    }    this.oid=thisOid;  } else {    this.oid=KNOWN_NAMES.get(sOid.toUpperCase(Locale.US));    if (this.oid == null) {      throw new IOException("Unrecognizable attribute name: " + sOid);    }  }  this.value=value;}  }
class C{  @Override protected final int next(int bits){  return (int)(nextLong() & ((1L << bits) - 1));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.876 -0500",hash_original_method="8593963787440F0A1F5CC05E2CC3EB6D",hash_generated_method="16077805191F7D77C37AE6EE44605C7C") public void readSetOf(ASN1SetOf setOf) throws IOException {  if (tag != ASN1Constants.TAG_C_SETOF) {    throw expected("setOf");  }  decodeValueCollection(setOf);}  }
class C{  public GeeTestResultParser(String testRunName,ITestRunListener listener){  mTestRunName=testRunName;  mTestListeners=new ArrayList<ITestRunListener>(1);  mTestListeners.add(listener);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean equals(Object post){  if (post instanceof Post && this.mId == ((Post)post).getId()) {    return true;  } else   return false;}  }
class C{  public void migrateProperties(){  Network memory=getBot().memory().newMemory();  Vertex twitter=memory.createVertex(getPrimitive());  Vertex user=twitter.getRelationship(Primitive.USER);  if (user != null) {    this.userName=(String)user.getData();  }  Vertex token=twitter.getRelationship(Primitive.TOKEN);  if (token != null) {    this.token=(String)token.getData();  }  Vertex secret=twitter.getRelationship(Primitive.SECRET);  if (secret != null) {    String data=(String)secret.getData();    if (data.startsWith("&&")) {      try {        this.tokenSecret=Utils.decrypt(Utils.KEY,data.substring(2,data.length()));      } catch (      Exception exception) {        this.tokenSecret=data;      }    } else {      this.tokenSecret=data;    }    setIsEnabled(true);  }  Vertex property=twitter.getRelationship(Primitive.TWEETCHATS);  if (property != null) {    this.tweetChats=(Boolean)property.getData();  }  property=twitter.getRelationship(Primitive.WELCOME);  if (property != null) {    this.welcomeMessage=(String)property.getData();  }  property=twitter.getRelationship(Primitive.AUTOFOLLOW);  if (property != null) {    this.autoFollow=(Boolean)property.getData();  }  property=twitter.getRelationship(Primitive.AUTOFOLLOWFRIENDSFRIENDS);  if (property != null) {    this.autoFollowFriendsFriends=(Boolean)property.getData();  }  property=twitter.getRelationship(Primitive.AUTOFOLLOWFRIENDSFOLLOWERS);  if (property != null) {    this.autoFollowFriendsFollowers=(Boolean)property.getData();  }  property=twitter.getRelationship(Primitive.FOLLOWMESSAGES);  if (property != null) {    this.followMessages=(Boolean)property.getData();  }  property=twitter.getRelationship(Primitive.MAXFRIENDS);  if (property != null) {    this.maxFriends=((Number)property.getData()).intValue();  }  property=twitter.getRelationship(Primitive.MAXSTATUSCHECKS);  if (property != null) {    this.maxStatus=((Number)property.getData()).intValue();  }  property=twitter.getRelationship(Primitive.PROCESSSTATUS);  if (property != null) {    this.processStatus=(Boolean)property.getData();  }  this.statusKeywords=new ArrayList<String>();  List<Relationship> keywords=twitter.orderedRelationships(Primitive.STATUSKEYWORDS);  if (keywords != null) {    for (    Relationship relationship : keywords) {      String text=((String)relationship.getTarget().getData()).trim();      if (!text.isEmpty()) {        this.statusKeywords.add(text);      }    }  }  this.retweet=new ArrayList<String>();  keywords=twitter.orderedRelationships(Primitive.RETWEET);  if (keywords != null) {    for (    Relationship relationship : keywords) {      String text=((String)relationship.getTarget().getData()).trim();      if (!text.isEmpty()) {        this.retweet.add(text);      }    }  }  this.autoFollowKeywords=new ArrayList<String>();  List<Relationship> search=twitter.orderedRelationships(Primitive.AUTOFOLLOWKEYWORDS);  if (search != null) {    for (    Relationship relationship : search) {      String text=((String)relationship.getTarget().getData()).trim();      if (!text.isEmpty()) {        this.autoFollowKeywords.add(text);      }    }  }  this.autoFollowSearch=new ArrayList<String>();  search=twitter.orderedRelationships(Primitive.AUTOFOLLOWSEARCH);  if (search != null) {    for (    Relationship relationship : search) {      String text=((String)relationship.getTarget().getData()).trim();      if (!text.isEmpty()) {        this.autoFollowSearch.add(text);      }    }  }  this.tweetSearch=new ArrayList<String>();  search=twitter.orderedRelationships(Primitive.TWEETSEARCH);  if (search != null) {    for (    Relationship relationship : search) {      String text=((String)relationship.getTarget().getData()).trim();      if (!text.isEmpty()) {        this.tweetSearch.add(text);      }    }  }  this.tweetRSS=new ArrayList<String>();  List<Relationship> rss=twitter.orderedRelationships(Primitive.TWEETRSS);  if (rss != null) {    for (    Relationship relationship : rss) {      String text=((String)relationship.getTarget().getData()).trim();      if (!text.isEmpty()) {        this.tweetRSS.add(text);      }    }  }  this.rssKeywords=new ArrayList<String>();  keywords=twitter.orderedRelationships(Primitive.RSSKEYWORDS);  if (keywords != null) {    for (    Relationship relationship : keywords) {      String text=((String)relationship.getTarget().getData()).trim();      this.rssKeywords.add(text);    }  }  property=twitter.getRelationship(Primitive.REPLYTOMENTIONS);  if (property != null) {    this.replyToMentions=(Boolean)property.getData();  }  property=twitter.getRelationship(Primitive.REPLYTOMESSAGES);  if (property != null) {    this.replyToMessages=(Boolean)property.getData();  }  property=twitter.getRelationship(Primitive.AUTOTWEET);  if (property != null) {    this.autoTweet=(Boolean)property.getData();  }  property=twitter.getRelationship(Primitive.AUTOTWEETHOURS);  if (property != null) {    this.autoTweetHours=((Number)property.getData()).intValue();  }  twitter.internalRemoveRelationships(Primitive.USER);  twitter.internalRemoveRelationships(Primitive.TOKEN);  twitter.internalRemoveRelationships(Primitive.SECRET);  twitter.internalRemoveRelationships(Primitive.TWEETCHATS);  twitter.internalRemoveRelationships(Primitive.WELCOME);  twitter.internalRemoveRelationships(Primitive.AUTOFOLLOW);  twitter.internalRemoveRelationships(Primitive.AUTOFOLLOWFRIENDSFOLLOWERS);  twitter.internalRemoveRelationships(Primitive.FOLLOWMESSAGES);  twitter.internalRemoveRelationships(Primitive.MAXFRIENDS);  twitter.internalRemoveRelationships(Primitive.MAXSTATUSCHECKS);  twitter.internalRemoveRelationships(Primitive.PROCESSSTATUS);  twitter.internalRemoveRelationships(Primitive.REPLYTOMENTIONS);  twitter.internalRemoveRelationships(Primitive.REPLYTOMESSAGES);  twitter.internalRemoveRelationships(Primitive.AUTOTWEET);  twitter.internalRemoveRelationships(Primitive.AUTOTWEETHOURS);  memory.save();  saveProperties(null);}  }
class C{  protected URI doRewriteURI(final HttpServletRequest request){  final IHALoadBalancerPolicy policy=policyRef.get();  if (policy == null) {    throw CAUSE_NO_LBS_POLICY;  }  final String originalRequestURI=request.getRequestURI();  if (!originalRequestURI.startsWith(prefix)) {    throw CAUSE_BAD_REQUEST_URI;  }  final Boolean isLeaderRequest=isLeaderRequest(request);  if (isLeaderRequest == null) {    throw CAUSE_BAD_REQUEST_URI;  }  final String proxyToRequestURI;{    if (isLeaderRequest) {      proxyToRequestURI=policy.getLeaderURI(request);    } else {      proxyToRequestURI=policy.getReaderURI(request);    }    if (log.isDebugEnabled())     log.debug("proxyToRequestURI=" + proxyToRequestURI);    if (proxyToRequestURI == null) {      return null;    }  }  final String full_prefix=getFullPrefix(isLeaderRequest,prefix);  final IHARequestURIRewriter rewriter=rewriterRef.get();  if (rewriter == null) {    throw CAUSE_NO_REWRITER_POLICY;  }  final StringBuilder uri=rewriter.rewriteURI(isLeaderRequest,full_prefix,originalRequestURI,proxyToRequestURI,request);  final URI rewrittenURI=URI.create(uri.toString()).normalize();  if (!validateDestination(rewrittenURI.getHost(),rewrittenURI.getPort())) {    throw CAUSE_DESTINATION_NOT_VALID;  }  if (log.isInfoEnabled())   log.info("rewrote: " + originalRequestURI + " => "+ rewrittenURI);  return rewrittenURI;}  }
class C{  public void actionPerformed(ActionEvent e){  if ((e.getSource() instanceof JButton) && (((JButton)e.getSource()).getText().equals("OK"))) {    m_Current=m_Editor.getValue();    m_Result=APPROVE_OPTION;    setVisible(false);  }}  }
class C{  public static String determineClasspathSeleniumVersion(){  Set<String> seleniumVersions=new HashSet<>();  try {    ClassLoader classLoader=Thread.currentThread().getContextClassLoader();    Enumeration<URL> manifests=classLoader.getResources("META-INF/MANIFEST.MF");    while (manifests.hasMoreElements()) {      URL manifestURL=manifests.nextElement();      try (InputStream is=manifestURL.openStream()){        Manifest manifest=new Manifest();        manifest.read(is);        Attributes buildInfo=manifest.getAttributes("Build-Info");        if (buildInfo != null) {          String seleniumVersion=buildInfo.getValue("Selenium-Version");          if (seleniumVersion != null) {            seleniumVersions.add(seleniumVersion);            LOGGER.info("Selenium API version {} detected on classpath",seleniumVersion);          }        }      }     }  } catch (  Exception e) {    LOGGER.debug("Failed to determine Selenium-Version from selenium-api JAR Manifest",e);  }  if (seleniumVersions.size() == 0) {    LOGGER.warn("Failed to determine Selenium version from classpath - will use default version of {}",DEFAULT_SELENIUM_VERSION);    return DEFAULT_SELENIUM_VERSION;  }  String foundVersion=seleniumVersions.iterator().next();  if (seleniumVersions.size() > 1) {    LOGGER.warn("Multiple versions of Selenium API found on classpath - will select {}, but this may not be reliable",foundVersion);  }  return foundVersion;}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  protected void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {  m_inDTD=false;}  }
class C{  public EffectTracker(ZPseudoComp inComp,long inDelay,long inDuration,byte inEasing,byte inTimescale){  srcComp=inComp;  trigger=TRIGGER_STATIC;  easing=inEasing;  timescale=inTimescale;  preDelay=inDelay;  duration=inDuration;}  }
class C{  private void verifyProtectionSystemResults() throws Exception {  log.info("Verifying migration of ProtectionSystems.");  List<URI> protectionSystemURIs=_dbClient.queryByType(ProtectionSystem.class,false);  int count=0;  Iterator<ProtectionSystem> protectionSystemIter=_dbClient.queryIterativeObjects(ProtectionSystem.class,protectionSystemURIs);  while (protectionSystemIter.hasNext()) {    ProtectionSystem protectionSystem=protectionSystemIter.next();    count++;    Assert.assertTrue("ProtectionSystem associated storage systems should be empty",protectionSystem.getAssociatedStorageSystems().isEmpty());  }  Assert.assertTrue("Should still have 2 ProtectionSystems after migration, not " + count,count == 2);}  }
class C{  public void nullPassword(){  if (wrappedPassword == null) {    return;  }  for (int i=0; i < wrappedPassword.length; i++) {    wrappedPassword[i]=0;  }  nulled=true;}  }
class C{  private static void mapResource(WorkItem resource,Map<IProject,List<WorkItem>> projectsMap,boolean checkJavaProject){  IProject project=resource.getProject();  if (checkJavaProject && !ProjectUtilities.isJavaProject(project)) {    return;  }  List<WorkItem> resources=projectsMap.get(project);  if (resources == null) {    resources=new ArrayList<WorkItem>();    projectsMap.put(project,resources);  }  if (!containsParents(resources,resource)) {    resources.add(resource);  }}  }
class C{  public void delete(E value){}  }
class C{  String scheme(){  return scheme;}  }
class C{  private void unregisterTx(long id){  Transaction tx=txMap.remove(id);  assert tx != null : "Failed to unregister transaction: " + id;}  }
class C{  public StrBuilder insert(final int index,final char chars[]){  validateIndex(index);  if (chars == null) {    return insert(index,nullText);  }  final int len=chars.length;  if (len > 0) {    ensureCapacity(size + len);    System.arraycopy(buffer,index,buffer,index + len,size - index);    System.arraycopy(chars,0,buffer,index,len);    size+=len;  }  return this;}  }
class C{  public NormalAnnotationExpr addPair(String key,String value){  return addPair(key,name(value));}  }
class C{  public static void arraycopy(Object[] src,int srcIdx,Object[] dst,int dstIdx,int len){  if (srcIdx >= 0 && dstIdx >= 0 && len >= 0 && (srcIdx + len) >= 0 && (srcIdx + len) <= src.length && (dstIdx + len) >= 0 && (dstIdx + len) <= dst.length) {    RVMType lhs=Magic.getObjectType(dst).asArray().getElementType();    RVMType rhs=Magic.getObjectType(src).asArray().getElementType();    if ((lhs == rhs) || (lhs == RVMType.JavaLangObjectType) || RuntimeEntrypoints.isAssignableWith(lhs,rhs)) {      arraycopyNoCheckcast(src,srcIdx,dst,dstIdx,len);    } else {      arraycopyPiecemeal(src,srcIdx,dst,dstIdx,len);    }  } else {    failWithIndexOutOfBoundsException();  }}  }
class C{  public boolean shouldStripWhiteSpace(XPathContext support,int targetElement) throws TransformerException {  if (null != m_whiteSpaceInfoList) {    while (DTM.NULL != targetElement) {      DTM dtm=support.getDTM(targetElement);      WhiteSpaceInfo info=(WhiteSpaceInfo)m_whiteSpaceInfoList.getTemplate(support,targetElement,null,false,dtm);      if (null != info)       return info.getShouldStripSpace();      int parent=dtm.getParent(targetElement);      if (DTM.NULL != parent && DTM.ELEMENT_NODE == dtm.getNodeType(parent))       targetElement=parent; else       targetElement=DTM.NULL;    }  }  return false;}  }
class C{  public static <E>WorkQueueProcessor<E> share(String name,int bufferSize,WaitStrategy strategy){  return share(name,bufferSize,strategy,true);}  }
class C{  public static void main(String[] args){  try {    new TestNamedGraphs().test();  } catch (  Exception ex) {    ex.printStackTrace(System.err);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNodeNS01.class,args);}  }
class C{  public String readMatchingFlags(String text){  clear();  if (text.startsWith(PM_SEPARATOR)) {    final StringTokenizer tok=new StringTokenizer(text,PM_SEPARATOR);    while (tok.hasMoreTokens()) {      final String flag=tok.nextToken();      if (flag.equals(PM_TYPE_MATCH)) {        typeMatching=true;      } else       if (flag.equals(PM_EXACT_MATCH)) {        exactMatching=true;      } else       if (flag.equals(PM_SIMILAR_MATCH)) {        similarMatching=true;      } else       if (flag.equals(PM_ICASE_MATCH)) {        caseInsensitive=true;      } else       if (flag.equals(PM_JOKER_MATCH)) {        jokerMatching=true;      } else {        break;      }      text=text.substring(flag.length() + 1);    }    if (isAnyFlagSet()) {      text=text.substring(1);    }  }  return text;}  }
class C{  private void writeEntries(int entries){  for (int i=0; i < entries; i++) {    try (TestEntry entry=log.create(TestEntry.class)){      entry.setTerm(1);      entry.setPadding(1);      if (entry.getIndex() % 2 == 0) {        entry.setCompactionMode(Compaction.Mode.SEQUENTIAL);      } else {        entry.setCompactionMode(Compaction.Mode.QUORUM);      }      log.append(entry);    }   }}  }
class C{  @Override protected void free(Bitmap value){  Preconditions.checkNotNull(value);  value.recycle();}  }
class C{  public void startServer() throws Exception {  server=new LdapServer();  int serverPort=10389;  server.setTransports(new TcpTransport(serverPort));  server.setDirectoryService(service);  server.setSaslPrincipal(ADS_SECURITY_PRINCIPAL);  server.start();}  }
class C{  public String populateStreets(){  try {    streetList=boundaryService.getChildBoundariesByBoundaryId(Long.valueOf(locationId));  } catch (  final Exception e) {    LOGGER.error("populateStreets() - Error while loading streets.",e);    addFieldError(LOCATION,"Unable to load street information");    throw new ApplicationRuntimeException("Unable to load street information",e);  }  return STREETS;}  }
class C{  public ZoomAction(@Nullable DrawingView view,double scaleFactor,@Nullable AbstractButton button){  super(view);  this.scaleFactor=scaleFactor;  this.button=button;  label=(int)(scaleFactor * 100) + " %";  putValue(Action.DEFAULT,label);  putValue(Action.NAME,label);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public final String sourceExpression(int index,Instances data){  return "";}  }
class C{  public int double_set_new(){  String s=soot.PhaseOptions.getString(options,"double-set-new");  if (s.equalsIgnoreCase("hash"))   return double_set_new_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_new_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_new_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_new_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_new_heintze;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-new");}  }
class C{  private void syncRestaurant(ContentProviderClient cp,Sync<Restaurant> sync) throws RemoteException {  Restaurant restaurant=sync.object;switch (sync.action) {case INSERT:    ContentValues vals=Restaurants.values(restaurant);  vals.put(Restaurants.COLOR,Restaurants.defaultColor());restaurant.localId=ContentUris.parseId(cp.insert(RESTAURANTS_URI,vals));if (restaurant.localId > 0 && restaurant.status == ACTIVE) {RestaurantService.download(restaurant.localId);try {  RestaurantService.photo(restaurant.localId,vals);} catch (IOException e) {  Log.e(TAG,"downloading Street View image",e);  exception(e);}}break;case UPDATE:restaurant.localId=Restaurants.idForGlobalId(restaurant.globalId);if (restaurant.localId > 0) {vals=Restaurants.values(restaurant);try {cp.update(ContentUris.withAppendedId(RESTAURANTS_URI,restaurant.localId),vals,null,null);} catch (SQLiteConstraintException e) {Log.e(TAG,"updating restaurant from sync",e);exception(e);}try {RestaurantService.photo(restaurant.localId,vals);} catch (IOException e) {Log.e(TAG,"downloading Street View image",e);exception(e);}} else {sync.action=INSERT;syncRestaurant(cp,sync);}break;}}  }
class C{  public EntityDialog(final OdorWorldEntity we){  entityRef=we;  init();  this.pack();  this.setLocationRelativeTo(null);}  }
class C{  public static <T>void assertCollectionContains(Collection<T> actual,T... expectedElements){  assertEquals(expectedElements.length,actual.size());  Collection<T> actualCopy=new ArrayList<T>(actual);  for (  T expectedElement : expectedElements) {    assertTrue("Collection did not contain: " + expectedElement,actualCopy.remove(expectedElement));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
