class C{  public boolean containsKey(Object key){  return getLocation(key,null) == null;}  }
class C{  @Override public boolean canRead(){  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.269 -0500",hash_original_method="E2E9E79308A321DB0305128A17F8E66B",hash_generated_method="AA19067AA7A96EBCD61A9CD10B053F4E") public void transform(Matrix matrix){  addTaint(matrix.getTaint());}  }
class C{  private void writeScalarToHDFS(ExecutionContext ec,String fname) throws DMLRuntimeException {  try {    ScalarObject scalar=ec.getScalarInput(input1.getName(),input1.getValueType(),input1.isLiteral());    MapReduceTool.writeObjectToHDFS(scalar.getValue(),fname);    MapReduceTool.writeScalarMetaDataFile(fname + ".mtd",input1.getValueType());  } catch (  IOException e) {    throw new DMLRuntimeException(e);  }}  }
class C{  private void caseFoldLower(char word[],int length){  lowerBuffer=ArrayUtil.grow(lowerBuffer,length);  System.arraycopy(word,0,lowerBuffer,0,length);  lowerBuffer[0]=dictionary.caseFold(lowerBuffer[0]);}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  static private String BYTE_Min(){  byte tempValue=Byte.MIN_VALUE;  return String.valueOf(tempValue);}  }
class C{  public static boolean isReadable(Path path){  return isAccessible(path,AccessMode.READ);}  }
class C{  public void add(Predicate p,ShapeAction f){  super.add(p,f);}  }
class C{  static void checkIdentifier(final String name,final String msg){  checkIdentifier(name,0,-1,msg);}  }
class C{  public List<SyslogHandler> syslogHandlers(){  return subresources().syslogHandlers();}  }
class C{  public static String encodeBase64(byte[] data){  return encodeBase64(data,false);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.UNSCHEDULE_TIME_EVENT__TIME_EVENT:    setTimeEvent((TimeEvent)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void pause(final FileDownloadListener listener){  FileDownloadEventPool.getImpl().shutdownSendPool(listener);  final List<BaseDownloadTask> downloadList=FileDownloadList.getImpl().copy(listener);synchronized (pauseLock) {    for (    BaseDownloadTask baseDownloadTask : downloadList) {      baseDownloadTask.pause();    }  }}  }
class C{  public h6 addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public int remove(K key){  int prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  protected void sequence_Block(ISerializationContext context,Block semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private static String parseToken(String pattern,int[] indexRef){  StringBuffer buf=new StringBuffer();  int i=indexRef[0];  int length=pattern.length();  char c=pattern.charAt(i);  if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {    buf.append(c);    while (i + 1 < length) {      char peek=pattern.charAt(i + 1);      if (peek == c) {        buf.append(c);        i++;      } else {        break;      }    }  } else {    buf.append('\'');    boolean inLiteral=false;    for (; i < length; i++) {      c=pattern.charAt(i);      if (c == '\'') {        if (i + 1 < length && pattern.charAt(i + 1) == '\'') {          i++;          buf.append(c);        } else {          inLiteral=!inLiteral;        }      } else       if (!inLiteral && (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {        i--;        break;      } else {        buf.append(c);      }    }  }  indexRef[0]=i;  return buf.toString();}  }
class C{  private Region find(long size){  validate(!VALIDATING || Long.bitCount(size) == 1);  Region current=this.root;  if ((current.available() & size) == 0) {    return null;  } else {    while (true) {      if (current.left != null && (current.left.available() & size) != 0) {        current=current.left;      } else       if ((current.availableHere() & size) != 0) {        long mask=size - 1;        long a=(current.start() + mask) & ~mask;        return new Region(a,a + size - 1);      } else       if (current.right != null && (current.right.available() & size) != 0) {        current=current.right;      } else {        throw new AssertionError();      }    }  }}  }
class C{  private static void findDeaths(){  if (MERLIN_ANALYSIS) {    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(worklist.isEmpty());    for (int allocator=0; allocator < ALLOCATORS; allocator++) {      ObjectReference thisRef=objectLinks.get(allocator);      while (!thisRef.isNull()) {        if (!getTraceLocal().isReachable(thisRef))         worklist.push(thisRef);        thisRef=VM.traceInterface.getLink(thisRef);      }    }    if (!worklist.isEmpty())     worklist.sort();    computeTransitiveClosure();  }  for (int allocator=0; allocator < ALLOCATORS; allocator++) {    ObjectReference thisRef=objectLinks.get(allocator);    ObjectReference prevRef=ObjectReference.nullReference();    while (!thisRef.isNull()) {      ObjectReference nextRef=VM.traceInterface.getLink(thisRef);      if (getTraceLocal().isReachable(thisRef)) {        thisRef=getTraceLocal().getForwardedReference(thisRef);        VM.traceInterface.setLink(thisRef,prevRef);        prevRef=thisRef;      } else {        Word deadTime;        if (MERLIN_ANALYSIS)         deadTime=VM.traceInterface.getDeathTime(thisRef); else         deadTime=lastGC;        trace.push(TRACE_DEATH);        trace.push(VM.traceInterface.getOID(thisRef));        trace.push(deadTime);      }      thisRef=nextRef;    }    objectLinks.set(allocator,prevRef);  }}  }
class C{  private boolean addTrackInfo(SpreadsheetService spreadsheetService,URL worksheetUrl,Track track) throws IOException, ServiceException {  if (isCancelled()) {    return false;  }  TripStatistics tripStatistics=track.getTripStatistics();  boolean metricUnits=PreferencesUtils.isMetricUnits(context);  String distanceUnit=context.getString(metricUnits ? R.string.unit_kilometer : R.string.unit_mile);  String speedUnit=context.getString(metricUnits ? R.string.unit_kilometer_per_hour : R.string.unit_mile_per_hour);  String elevationUnit=context.getString(metricUnits ? R.string.unit_meter : R.string.unit_feet);  ListEntry row=new ListEntry();  row.getCustomElements().setValueLocal("name",track.getName());  row.getCustomElements().setValueLocal("description",track.getDescription());  row.getCustomElements().setValueLocal("date",StringUtils.formatDateTime(context,tripStatistics.getStartTime()));  row.getCustomElements().setValueLocal("totaltime",StringUtils.formatElapsedTimeWithHour(tripStatistics.getTotalTime()));  row.getCustomElements().setValueLocal("movingtime",StringUtils.formatElapsedTimeWithHour(tripStatistics.getMovingTime()));  row.getCustomElements().setValueLocal("distance",SendSpreadsheetsUtils.getDistance(tripStatistics.getTotalDistance(),metricUnits));  row.getCustomElements().setValueLocal("distanceunit",distanceUnit);  row.getCustomElements().setValueLocal("averagespeed",SendSpreadsheetsUtils.getSpeed(tripStatistics.getAverageSpeed(),metricUnits));  row.getCustomElements().setValueLocal("averagemovingspeed",SendSpreadsheetsUtils.getSpeed(tripStatistics.getAverageMovingSpeed(),metricUnits));  row.getCustomElements().setValueLocal("maxspeed",SendSpreadsheetsUtils.getSpeed(tripStatistics.getMaxSpeed(),metricUnits));  row.getCustomElements().setValueLocal("speedunit",speedUnit);  row.getCustomElements().setValueLocal("elevationgain",SendSpreadsheetsUtils.getElevation(tripStatistics.getTotalElevationGain(),metricUnits));  row.getCustomElements().setValueLocal("minelevation",SendSpreadsheetsUtils.getElevation(tripStatistics.getMinElevation(),metricUnits));  row.getCustomElements().setValueLocal("maxelevation",SendSpreadsheetsUtils.getElevation(tripStatistics.getMaxElevation(),metricUnits));  row.getCustomElements().setValueLocal("elevationunit",elevationUnit);  ListEntry result=spreadsheetService.insert(worksheetUrl,row);  return result != null;}  }
class C{  public boolean isSetChallenge(){  return this.challenge != null;}  }
class C{  protected void sendFunctionGroup2(){  setSpeedSetting(this.speedSetting);  if (sendA2command) {    int locoAddr=address.getNumber();    if (address.isLongAddress()) {      locoAddr+=0xC000;    }    int data=0x00 | (f8 ? 0x08 : 0) | (f7 ? 0x04 : 0)| (f6 ? 0x02 : 0)| (f5 ? 0x01 : 0);    byte[] bl=NceBinaryCommand.nceLocoCmd(locoAddr,NceBinaryCommand.LOCO_CMD_FG2,(byte)data);    NceMessage m=NceMessage.createBinaryMessage(tc,bl);    tc.sendNceMessage(m,null);  } else {    byte[] result=jmri.NmraPacket.function5Through8Packet(address.getNumber(),address.isLongAddress(),getF5(),getF6(),getF7(),getF8());    NceMessage m=NceMessage.sendPacketMessage(tc,result);    tc.sendNceMessage(m,null);  }}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(20 + infoPackage.length() + infoModule.length()+ infoRelease.length()+ infoTimestamp.length()+ infoClassloader.length());  sb.append("VersionInfo(").append(infoPackage).append(':').append(infoModule);  if (!UNAVAILABLE.equals(infoRelease))   sb.append(':').append(infoRelease);  if (!UNAVAILABLE.equals(infoTimestamp))   sb.append(':').append(infoTimestamp);  sb.append(')');  if (!UNAVAILABLE.equals(infoClassloader))   sb.append('@').append(infoClassloader);  return sb.toString();}  }
class C{  public void check(int opCode){  for (Iterator nodeit=graph.getNodeIterator(); nodeit.hasNext(); ) {    Node node=(Node)nodeit.next();    testLinkResultDirectedEdges((DirectedEdgeStar)node.getEdges(),opCode);  }}  }
class C{  protected void configureBalloon(Balloon balloon,KMLAbstractFeature feature){  if (feature instanceof KMLAbstractContainer) {    BalloonAttributes attrs=new BasicBalloonAttributes();    Size size=new Size(Size.NATIVE_DIMENSION,0.0,null,Size.NATIVE_DIMENSION,0.0,null);    Size maxSize=new Size(Size.EXPLICIT_DIMENSION,0.8,AVKey.FRACTION,Size.EXPLICIT_DIMENSION,0.8,AVKey.FRACTION);    attrs.setSize(size);    attrs.setMaximumSize(maxSize);    attrs.setOffset(new Offset(0.5,0.5,AVKey.FRACTION,AVKey.FRACTION));    attrs.setLeaderShape(AVKey.SHAPE_NONE);    balloon.setAttributes(attrs);  } else {    BalloonAttributes attrs=new BasicBalloonAttributes();    Size size=new Size(Size.NATIVE_DIMENSION,0.0,null,Size.NATIVE_DIMENSION,0.0,null);    Size maxSize=new Size(Size.EXPLICIT_DIMENSION,0.5,AVKey.FRACTION,Size.EXPLICIT_DIMENSION,0.4,AVKey.FRACTION);    attrs.setSize(size);    attrs.setMaximumSize(maxSize);    balloon.setAttributes(attrs);  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof CharRange == false) {    return false;  }  CharRange other=(CharRange)obj;  return start == other.start && end == other.end && negated == other.negated;}  }
class C{  private void generateJavaFile() throws IOException {  CustomLogger.log("Generating the following file " + javaFileName);  File mainActivityFile=new File(javaFolder,javaFileName);  BufferedWriter mainActivityBW=createIt(mainActivityFile);  CustomLogger.log("Generating the following file " + mainActivityFile.getAbsolutePath());  mainActivityBW.write(javaCode);  mainActivityBW.flush();  mainActivityBW.close();  CustomLogger.log("Generating the following file " + mainLayoutName);  File mainLayoutFile=new File(javaFolder,mainLayoutName);  BufferedWriter mainLayoutBW=createIt(mainLayoutFile);  CustomLogger.log("Generating the following file " + mainLayoutFile.getAbsolutePath());  mainLayoutBW.write(layoutContent);  mainLayoutBW.flush();  mainLayoutBW.close();}  }
class C{  private static boolean isZip(File file) throws IOException {  try {    (new ZipFile(file)).close();  } catch (  ZipException e) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.744 -0500",hash_original_method="AAD200E4835E6912540E5A2C7F9552F9",hash_generated_method="9901A624D879B442C50B5CD979A1224F") public void reqGetApnList(ApnContext apnContext){  Message response=sendMessageSynchronously(REQ_GET_APNCONTEXT_LIST);  if (DBG)   log("reqGetApnList");}  }
class C{  static final int advanceProbe(int probe){  probe^=probe << 13;  probe^=probe >>> 17;  probe^=probe << 5;  UNSAFE.putInt(Thread.currentThread(),PROBE,probe);  return probe;}  }
class C{  public void pln() throws IOException {  newLine();}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (conversation.getType() != Conversation.TYPE_CHANNEL) {    throw new CommandException(service.getString(R.string.only_usable_from_channel));  }  if (params.length == 2) {    service.getConnection(server.getId()).voice(conversation.getName(),params[1]);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  public static void updateCartCountNotification(){  MainActivity instance=MainActivity.getInstance();  if (instance != null) {    instance.getCartCount(false);  } else {    Timber.e(MSG_MAIN_ACTIVITY_INSTANCE_IS_NULL);  }}  }
class C{  public void selectMediaType(NamedMediaType type){  JToggleButton mediaTypeButton=buttonsMap.get(type);  if (mediaTypeButton != null) {    mediaTypeButton.doClick();  }}  }
class C{  public static org.oscm.internal.types.exception.PaymentDataException convertToUp(org.oscm.types.exceptions.PaymentDataException oldEx){  return convertExceptionToUp(oldEx,org.oscm.internal.types.exception.PaymentDataException.class);}  }
class C{  public static void main(String[] args){  TeddyApplicationModel tam=new TeddyApplicationModel();  tam.setCopyright(COPYRIGHT);  tam.setName(NAME);  tam.setViewClassName("org.jhotdraw.samples.teddy.TeddyView");  tam.setVersion(Main.class.getPackage().getImplementationVersion());  Application app;  if (System.getProperty("os.name").toLowerCase().startsWith("mac os x")) {    app=new OSXApplication();  } else   if (System.getProperty("os.name").toLowerCase().startsWith("win")) {    app=new SDIApplication();  } else {    app=new SDIApplication();  }  app.setModel(tam);  app.launch(args);}  }
class C{  public void putShardRoutingState(final String index,final ShardRoutingState shardRoutingState) throws JsonGenerationException, JsonMappingException, IOException {  this.discovery.putShardRoutingState(index,shardRoutingState);}  }
class C{  public void add(byte b){  requestFreeSize(1);  data[size++]=b;}  }
class C{  public Knowledge2(Collection<String> nodes){  for (  String MyNode : nodes) {    if (!checkVarName(MyNode)) {      throw new IllegalArgumentException("Bad variable node " + MyNode);    }  }  for (  String name : nodes) {    addVariable(name);  }  this.forbiddenRulesSpecs=new ArrayList<>();  this.requiredRulesSpecs=new ArrayList<>();  this.knowledgeGroupRules=new HashMap<>();  this.tierSpecs=new ArrayList<>();}  }
class C{  protected void paintContentBorder(Graphics g,int tabPlacement,int selectedIndex){  int width=tabPane.getWidth();  int height=tabPane.getHeight();  Insets insets=tabPane.getInsets();  int x=insets.left;  int y=insets.top;  int w=width - insets.right - insets.left;  int h=height - insets.top - insets.bottom;switch (tabPlacement) {case LEFT:    x+=calculateTabAreaWidth(tabPlacement,runCount,maxTabWidth);  w-=(x - insets.left);break;case RIGHT:w-=calculateTabAreaWidth(tabPlacement,runCount,maxTabWidth);break;case BOTTOM:h-=calculateTabAreaHeight(tabPlacement,runCount,maxTabHeight);break;case TOP:default :y+=calculateTabAreaHeight(tabPlacement,runCount,maxTabHeight);h-=(y - insets.top);}Component comp=null;if (selectedIndex != -1) comp=tabPane.getComponentAt(selectedIndex);if (comp != null && comp instanceof JComponent) {JComponent jc=(JComponent)comp;CompiereColor bg=null;try {if (jc != null) bg=(CompiereColor)jc.getClientProperty(CompiereLookAndFeel.BACKGROUND);} catch (Exception e) {System.err.println("AdempiereTabbedPaneUI - ClientProperty: " + e.getMessage());}if (bg == null) {bg=new CompiereColor(jc.getBackground());jc.putClientProperty(CompiereLookAndFeel.BACKGROUND,bg);}bg.paintRect(g,jc,x,y,w,h);} else if (comp != null) {g.setColor(comp.getBackground());g.fillRect(x,y,w,h);}paintContentBorderTopEdge(g,tabPlacement,selectedIndex,x,y,w,h);paintContentBorderLeftEdge(g,tabPlacement,selectedIndex,x,y,w,h);paintContentBorderBottomEdge(g,tabPlacement,selectedIndex,x,y,w,h);paintContentBorderRightEdge(g,tabPlacement,selectedIndex,x,y,w,h);}  }
class C{  @Override protected void onMessageOnProducerThread(T msg){synchronized (_batchLock) {    K key=_keyResolver.convert(msg);    if (_pending == null) {      _pending=new HashMap<>();      _context.schedule(_flushRunner,_flushIntervalInMs,_timeUnit);    }    _pending.put(key,msg);  }}  }
class C{  public static DigestAlgorithm forOID(final String oid){  final DigestAlgorithm algorithm=Registry.OID_ALGORITHMS.get(oid);  if (algorithm == null) {    throw new DSSException("Unsupported algorithm: " + oid);  }  return algorithm;}  }
class C{  private void listenAndTimer(final BleCallback bleCallback,int what,BluetoothGattCallback callback){  bleCallback.setBluetoothGattCallback(callback);  liteBluetooth.addGattCallback(callback);  Message msg=handler.obtainMessage(what,bleCallback);  handler.sendMessageDelayed(msg,timeOutMillis);}  }
class C{  public boolean isInside(Entity entity){  for (  AxisAlignedBB boundingBox : this.boundingBoxes) {    if (boundingBox.isVecInside(entity.getPositionVector())) {      return true;    }  }  return false;}  }
class C{  public void update(){  if (optimizer == null) {    return;  }  optimizer.updateLocation(this);  for (int i=0; i < this.connections.size(); ) {    Connection con=this.connections.get(i);    NetworkInterface anotherInterface=con.getOtherInterface(this);    assert con.isUp() : "Connection " + con + " was down!";    if (!isWithinRange(anotherInterface)) {      disconnect(con,anotherInterface);      connections.remove(i);    } else {      i++;    }  }  Collection<NetworkInterface> interfaces=optimizer.getNearInterfaces(this);  for (  NetworkInterface i : interfaces) {    connect(i);  }}  }
class C{  public void testMakeMap(){  Map em=makeEmptyMap();  assertTrue("failure in test: makeEmptyMap must return a non-null map.",em != null);  Map em2=makeEmptyMap();  assertTrue("failure in test: makeEmptyMap must return a non-null map.",em != null);  assertTrue("failure in test: makeEmptyMap must return a new map " + "with each invocation.",em != em2);  Map fm=makeFullMap();  assertTrue("failure in test: makeFullMap must return a non-null map.",fm != null);  Map fm2=makeFullMap();  assertTrue("failure in test: makeFullMap must return a non-null map.",fm != null);  assertTrue("failure in test: makeFullMap must return a new map " + "with each invocation.",fm != fm2);}  }
class C{  public void readStructEnd() throws TException {  lastFieldId_=lastField_.pop();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toStringKey(){  String result;  int i;  result="Key,\n";  for (i=0; i < getColCount(); i++) {    if (getColHidden(i))     continue;    result+=LEFT_PARENTHESES + (i + 1) + RIGHT_PARENTHESES+ ","+ Utils.quote(removeFilterName(m_ColNames[i]))+ "\n";  }  return result;}  }
class C{  private void initSearchByPatternFields(){  if (!TextUtils.isEmpty(mDisplayName)) {    mLowerCaseDisplayName=mDisplayName.toLowerCase();  }  if (!TextUtils.isEmpty(mUserId)) {    int sepPos=mUserId.indexOf(":");    if (sepPos > 0) {      mLowerCaseMatrixId=mUserId.substring(0,sepPos).toLowerCase();    }  }}  }
class C{  public BiosCommandResult addRemoveZones(URI exportGroupUri,List<NetworkFCZoneInfo> fabricInfos,boolean doRemove) throws ControllerException {  Map<URI,NetworkSystem> deviceId2NetworkSystem=new HashMap<URI,NetworkSystem>();  Map<URI,List<NetworkFCZoneInfo>> deviceId2NetworkFabricInfos=new HashMap<URI,List<NetworkFCZoneInfo>>();  for (  NetworkFCZoneInfo fabricInfo : fabricInfos) {    URI deviceId=fabricInfo.getNetworkDeviceId();    URI altDeviceId=fabricInfo.getAltNetworkDeviceId();    NetworkSystem device=null;    device=deviceId2NetworkSystem.get(deviceId);    if (device == null) {      device=getDeviceObject(deviceId);      if (device != null && device.getInactive() == false) {        deviceId2NetworkSystem.put(deviceId,device);      } else       if (altDeviceId != null) {        device=deviceId2NetworkSystem.get(altDeviceId);        if (device == null) {          device=getDeviceObject(altDeviceId);          if (device != null && device.getInactive() == false) {            deviceId2NetworkSystem.put(altDeviceId,device);          }        }      }    }    if (device == null) {      throw NetworkDeviceControllerException.exceptions.addRemoveZonesFailedNoDev(deviceId.toString());    }    List<NetworkFCZoneInfo> finfos=deviceId2NetworkFabricInfos.get(device.getId());    if (finfos == null) {      finfos=new ArrayList<NetworkFCZoneInfo>();      deviceId2NetworkFabricInfos.put(device.getId(),finfos);    }    finfos.add(fabricInfo);  }  StringBuilder messageBuffer=new StringBuilder();  for (  URI deviceId : deviceId2NetworkFabricInfos.keySet()) {    NetworkSystem device=deviceId2NetworkSystem.get(deviceId);    Map<String,List<NetworkFCZoneInfo>> fabric2FabricInfos=new HashMap<String,List<NetworkFCZoneInfo>>();    Map<String,NetworkLite> fabricId2Network=new HashMap<String,NetworkLite>();    List<NetworkFCZoneInfo> finfos=deviceId2NetworkFabricInfos.get(deviceId);    for (    NetworkFCZoneInfo fabricInfo : finfos) {      String fabricId=fabricInfo.getFabricId();      String fabricWwn=fabricInfo.getFabricWwn();      String key=(fabricWwn != null) ? fabricWwn : fabricId;      updateAltDeviceid(fabricInfo,fabricId,fabricWwn,key,fabricId2Network);      List<NetworkFCZoneInfo> singleFabricInfos=fabric2FabricInfos.get(key);      if (singleFabricInfos == null) {        singleFabricInfos=new ArrayList<NetworkFCZoneInfo>();        fabric2FabricInfos.put(key,singleFabricInfos);      }      singleFabricInfos.add(fabricInfo);    }    for (    String key : fabric2FabricInfos.keySet()) {      List<NetworkFCZoneInfo> singleFabricInfos=fabric2FabricInfos.get(key);      String fabricId=singleFabricInfos.get(0).getFabricId();      String fabricWwn=singleFabricInfos.get(0).getFabricWwn();      BiosCommandResult rslt=addRemoveZones(device,fabricId,fabricWwn,exportGroupUri,singleFabricInfos,doRemove,true);      if (messageBuffer.length() > 0) {        messageBuffer.append("; ");      }      messageBuffer.append(rslt.getMessage());    }  }  BiosCommandResult result=BiosCommandResult.createSuccessfulResult();  return result;}  }
class C{  public static double clampAngle360(double degrees){  return degrees > 360 ? 360 : (degrees < 0 ? 0 : degrees);}  }
class C{  public void putAll(Map t){  Iterator it=t.keySet().iterator();  while (it.hasNext()) {    Object key=it.next();    Object value=t.get(key);    put(key,value);  }}  }
class C{  public void internalFrameActivated(InternalFrameEvent e){}  }
class C{  public ServerSocket createServerSocket(int nport,int backlog,InetAddress bindAddr) throws IOException {  return createServerSocket(nport,backlog,bindAddr,-1,sslConfig.isEnabled());}  }
class C{  public void testBug9206() throws Exception {  Properties props=new Properties();  props.setProperty("characterSetResults","UTF-8");  getConnectionWithProps(props).close();}  }
class C{  public static long parseMemorySize(String arg){  if (arg.endsWith("g") || arg.endsWith("G"))   return Long.parseLong(arg.substring(0,arg.length() - 1)) * 1024 * 1024* 1024; else   if (arg.endsWith("m") || arg.endsWith("M"))   return Long.parseLong(arg.substring(0,arg.length() - 1)) * 1024 * 1024; else   if (arg.endsWith("k") || arg.endsWith("K"))   return Long.parseLong(arg.substring(0,arg.length() - 1)) * 1024; else   return Long.parseLong(arg.substring(0,arg.length()));}  }
class C{  public boolean isInSegment(double angle){  if (angle >= mStartAngle && angle <= mEndAngle) {    return true;  }  double cAngle=angle % 360;  double startAngle=mStartAngle;  double stopAngle=mEndAngle;  while (stopAngle > 360) {    startAngle-=360;    stopAngle-=360;  }  return cAngle >= startAngle && cAngle <= stopAngle;}  }
class C{  public void testUrlInValidWithASimpleParameter(){  setParameterToInitMockMethod("http://myurl.com/a/b/c/index.html?myParam",TestSolution.FAILED);  SeoRule01071 test=new SeoRule01071();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public Vector4f mul(Vector4fc v){  x*=v.x();  y*=v.y();  z*=v.z();  w*=v.w();  return this;}  }
class C{  public static IntRange upTo(int endpoint,BoundType boundType){switch (boundType) {case OPEN:    return lessThan(endpoint);case CLOSED:  return atMost(endpoint);default :throw new AssertionError();}}  }
class C{  public synchronized long processVehicle(){  long processedCount=0l;  while (true) {    if (locationQueue.size() > 0) {    }    GPSPoint gpsPoint=locationQueue.peek();    if (gpsPoint == null)     break;    Fun.Tuple2<Integer,Integer> currentTile=gpsPoint.getTile();    if (!currentTile.equals(tile)) {      vehicleStates.placeVehicleInTile(tile,vehicleId);      tile=currentTile;      break;    }    processedCount++;    locationQueue.poll();    long zoneOffset=this.vehicleStates.osmData.checkOsm(gpsPoint.lat,gpsPoint.lon).zoneOffset;    this.vehicleStates.incrementProcessedCount();    this.queueSize.decrementAndGet();    gpsPoint.offsetTime(zoneOffset);    GPSPoint p0=lastPoint;    lastPoint=gpsPoint;    lastUpdate=System.currentTimeMillis();    if (p0 == null) {      continue;    }    if (gpsPoint.time - p0.time > MAX_GPS_PAIR_DURATION * 1000000) {      continue;    }    GPSSegment gpsSegment=new GPSSegment(p0,gpsPoint);    if (vehicleStates.debug)     vehicleStates.debugGpsSegment=gpsSegment;    if (gpsSegment.isStill()) {      continue;    }    List<Crossing> segCrossings=getCrossingsInOrder(gpsSegment);    if (vehicleStates.debug)     vehicleStates.debugCrossings=segCrossings;    List<SpeedSample> speedSamples=new ArrayList<>();    for (    Crossing crossing : segCrossings) {      Crossing lastCrossing=getLastCrossingAndUpdatePendingCrossings(gpsPoint.vehicleId,crossing);      SpeedSample speedSample=getAdmissibleSpeedSample(lastCrossing,crossing);      if (speedSample == null) {        continue;      }      StreetSegment currentSegment=vehicleStates.osmData.getStreetSegmentById(speedSample.getSegmentId());      if (currentSegment != null && lastSegment != null) {        if (lastSegment.endNodeId != currentSegment.startNodeId) {          Jumper jumper=vehicleStates.osmData.jumperDataStore.getJumper(lastSegment.endNodeId,currentSegment.startNodeId);          if (jumper != null)           speedSamples.addAll(jumper.getSpeedSamples(lastSegmentTime,speedSample.getTime()));        }      }      lastSegmentTime=speedSample.getTime();      lastSegment=currentSegment;      speedSamples.add(speedSample);    }    speedSamples.forEach(null);  }  return processedCount;}  }
class C{  public int suspendReason(){  DSuspendInfo info=getSuspendInfo();  return info.getReason();}  }
class C{  public void testBug15464() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("testInOutParam","(IN p1 VARCHAR(255), INOUT p2 INT)\nbegin\n DECLARE z INT;\n" + "SET z = p2 + 1;\nSET p2 = z;\nSELECT p1;\nSELECT CONCAT('zyxw', p1);\nend\n");  CallableStatement storedProc=null;  storedProc=this.conn.prepareCall("{call testInOutParam(?, ?)}");  storedProc.setString(1,"abcd");  storedProc.setInt(2,4);  storedProc.registerOutParameter(2,Types.INTEGER);  storedProc.execute();  assertEquals(5,storedProc.getInt(2));}  }
class C{  public synchronized int available() throws IOException {  if (in < 0)   return 0; else   if (in == out)   return buffer.length; else   if (in > out)   return in - out; else   return in + buffer.length - out;}  }
class C{  public Comparable findMax(){  if (isEmpty())   return null;  RedBlackNode itr=header.right;  while (itr.right != nullNode)   itr=itr.right;  return itr.element;}  }
class C{  static public void qsort(long[] array){  qsort_h(array,0,array.length - 1);}  }
class C{  public static boolean isValidJavaClassName(String input){  if (!StringUtils.hasText(input)) {    return false;  }  if (!Character.isJavaIdentifierStart(input.charAt(0))) {    return false;  }  if (input.length() > 1) {    for (int i=1; i < input.length(); i++) {      if (!Character.isJavaIdentifierPart(input.charAt(i))) {        return false;      }    }  }  return true;}  }
class C{  protected static <T extends DataObject>List<NamedElementQueryResultList.NamedElement> listChildren(DbClient dbClient,URI id,Class<T> clzz,String nameField,String linkField){  @SuppressWarnings("deprecation") List<URI> uris=dbClient.queryByConstraint(ContainmentConstraint.Factory.getContainedObjectsConstraint(id,clzz,linkField));  if (uris != null && !uris.isEmpty()) {    List<T> dataObjects=dbClient.queryObjectField(clzz,nameField,uris);    List<NamedElementQueryResultList.NamedElement> elements=new ArrayList<NamedElementQueryResultList.NamedElement>(dataObjects.size());    for (    T dataObject : dataObjects) {      Object name=DataObjectUtils.getPropertyValue(clzz,dataObject,nameField);      elements.add(NamedElementQueryResultList.NamedElement.createElement(dataObject.getId(),name == null ? "" : name.toString()));    }    return elements;  } else {    return new ArrayList<NamedElementQueryResultList.NamedElement>();  }}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  @GET @Path("language1") @Produces("text/html") public Response language1(){  return Response.ok(new Viewable("hello.jsp"),"application/xhtml+xml").language("es").build();}  }
class C{  @operator(value="moment",can_be_const=true,type=IType.FLOAT,expected_content_type={IType.INT,IType.FLOAT},concept={IConcept.STATISTIC}) @doc(value="Returns the moment of k-th order with constant c of a data sequence",comment="",examples={}) public static Double opMoment(final IScope scope,final IContainer data,final Integer k,final Double c){  return Descriptive.moment(from(scope,data),k,c);}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.336 -0500",hash_original_method="4853EB704C822ED076EB467B9C8220F5",hash_generated_method="5C477B01822E6EE3822AEB748CCC49C7") public Location(Location l){  set(l);}  }
class C{  public void startGame(){  try {    final boolean gameHasBeenSaved=m_data.getProperties().get(GAME_HAS_BEEN_SAVED_PROPERTY,false);    if (!gameHasBeenSaved) {      m_data.getProperties().set(GAME_HAS_BEEN_SAVED_PROPERTY,Boolean.TRUE);    }    startPersistentDelegates();    if (gameHasBeenSaved) {      runStep(gameHasBeenSaved);    }    while (!m_isGameOver) {      if (m_delegateExecutionStopped) {        try {          m_delegateExecutionStoppedLatch.await();        } catch (        final InterruptedException e) {        }      } else {        runStep(false);      }    }  } catch (  final GameOverException e) {    if (!m_isGameOver) {      ClientLogger.logQuietly(e);    }  }}  }
class C{  public static boolean constantTimeAreEqual(byte[] a,byte[] b){  if (a == b) {    return true;  }  if (a == null || b == null) {    return false;  }  if (a.length != b.length) {    return false;  }  int nonEqual=0;  for (int i=0; i != a.length; i++) {    nonEqual|=(a[i] ^ b[i]);  }  return nonEqual == 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens04.class,args);}  }
class C{  private void collapseProperty(final int index){  final int selectedRow=getSelectedRow();  final Property property=myProperties.get(index);  LOG.assertTrue(isPropertyExpanded(property,property.getParent()));  myExpandedProperties.remove(getDottedName(property));  final Property[] children=getPropChildren(property);  for (int i=0; i < children.length; i++) {    myProperties.remove(index + 1);  }  myModel.fireTableDataChanged();  if (selectedRow != -1) {    getSelectionModel().setSelectionInterval(selectedRow,selectedRow);  }}  }
class C{  public VanillaCompatibilityGenerator(IChunkGenerator vanilla,ICubicWorld world){  this.vanilla=vanilla;  this.world=world;  lastChunk=vanilla.provideChunk(0,0);  worldHeightBlocks=world.getActualHeight();  worldHeightCubes=worldHeightBlocks / Cube.SIZE;  Map<IBlockState,Integer> blockHistogramBottom=new HashMap<>();  Map<IBlockState,Integer> blockHistogramTop=new HashMap<>();  for (int x=0; x < Cube.SIZE; x++) {    for (int z=0; z < Cube.SIZE; z++) {      for (int y=0; y < 3; y++) {        IBlockState blockState=lastChunk.getBlockState(x,y,z);        if (blockState.getBlock() == Blocks.BEDROCK)         continue;        int count=blockHistogramBottom.getOrDefault(blockState,0);        blockHistogramBottom.put(blockState,count + 1);      }      for (int y=worldHeightBlocks - 1; y > worldHeightBlocks - 4; y--) {        IBlockState blockState=lastChunk.getBlockState(x,y,z);        if (blockState.getBlock() == Blocks.BEDROCK)         continue;        int count=blockHistogramTop.getOrDefault(blockState,0);        blockHistogramTop.put(blockState,count + 1);      }    }  }  CubicChunks.LOGGER.debug("Block histograms: \nTop: " + blockHistogramTop + "\nBottom: "+ blockHistogramBottom);  int topcount=0;  for (  Map.Entry<IBlockState,Integer> entry : blockHistogramBottom.entrySet()) {    if (entry.getValue() > topcount) {      extensionBlockBottom=entry.getKey();      topcount=entry.getValue();    }  }  CubicChunks.LOGGER.info("Detected filler block " + extensionBlockBottom.getBlock().getUnlocalizedName() + " "+ "from layers [0, 2]");  topcount=0;  for (  Map.Entry<IBlockState,Integer> entry : blockHistogramTop.entrySet()) {    if (entry.getValue() > topcount) {      extensionBlockTop=entry.getKey();      topcount=entry.getValue();    }  }  CubicChunks.LOGGER.info("Detected filler block " + extensionBlockTop.getBlock().getUnlocalizedName() + " from"+ " layers ["+ (worldHeightBlocks - 3)+ ", "+ (worldHeightBlocks - 1)+ "]");}  }
class C{  public void stopDownload() throws DownloadNotStartedException, InterruptedException {  if (downloadProgress == null || downloadProgress.isDownloadingFinished()) {    throw new DownloadNotStartedException();  }  downloadProgress.getDownloadThread().interrupt();  downloadProgress.getDownloadThread().join();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QSUB8");  translateAll(environment,instruction,"QSUB8",instructions);}  }
class C{  public boolean contains(Vec4 p){  if (p == null)   return false;  Vec4 v0=this.c.subtract3(this.a);  Vec4 v1=this.b.subtract3(this.a);  Vec4 v2=p.subtract3(this.a);  double dot00=v0.dotSelf3();  double dot01=v0.dot3(v1);  double dot02=v0.dot3(v2);  double dot11=v1.dotSelf3();  double dot12=v1.dot3(v2);  double det=(dot00 * dot11 - dot01 * dot01);  double detInv=1 / det;  double u=(dot11 * dot02 - dot01 * dot12) * detInv;  double v=(dot00 * dot12 - dot01 * dot02) * detInv;  return (u >= 0d) && (v >= 0d) && (u + v <= 1d);}  }
class C{  public void onLoad(ClassPool pool,String classname) throws CannotCompileException, NotFoundException {  CtClass clazz=pool.get(classname);  clazz.instrument(converter);}  }
class C{  @Override public void onDetailLoadSuccess(final Media item){  MediaDetailActivity.startActivity(mContext,item);}  }
class C{  synchronized void printBuffer() throws IOException {  int len=sb.length();  if (len > 0) {    char[] chars=new char[len];    sb.getChars(0,len,chars,0);    sb.setLength(0);    super.write(chars,0,chars.length);  }}  }
class C{  public boolean canDeleteIndexContents(Index index,Settings indexSettings,boolean closed){  final IndexServiceInjectorPair indexServiceInjectorPair=this.indices.get(index.name());  if (IndexMetaData.isOnSharedFilesystem(indexSettings) == false || closed) {    if (indexServiceInjectorPair == null && nodeEnv.hasNodeFile()) {      return true;    }  } else {    logger.trace("{} skipping index directory deletion due to shadow replicas",index);  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Expression numberlit(int opPos){  opPos=getFirstChildPos(opPos);  return (XNumber)getTokenQueue().elementAt(getOp(opPos));}  }
class C{  protected void processDataExpressionBindings(SourcePrinter out,WidgetCreatorContext context){  Iterator<ExpressionDataBinding> expressionBindings=context.iterateExpressionBindings();  try {    while (expressionBindings.hasNext()) {      ExpressionDataBinding expressionBinding=expressionBindings.next();      String expressionBinder=ViewFactoryCreator.createVariableName("expressionBinder");      out.println(ExpressionBinder.class.getCanonicalName() + " " + expressionBinder+ " = "+ "new "+ ExpressionBinder.class.getCanonicalName()+ "<"+ expressionBinding.getWidgetClassName()+ ">(){");      for (      String converterDeclaration : expressionBinding.getConverterDeclarations()) {        out.println(converterDeclaration);      }      out.println("public void updateExpression(" + BindingContext.class.getCanonicalName() + " context){");      out.println(expressionBinding.getWriteExpression("context"));      out.println("}");      out.println("};");      Iterator<String> dataObjects=expressionBinding.iterateDataObjects();      while (dataObjects.hasNext()) {        String dataObjectAlias=dataObjects.next();        String dataObjectBinder=getDataObjectBinderVariable(dataObjectAlias,out);        out.println(dataObjectBinder + ".addExpressionBinder(" + EscapeUtils.quote(context.getWidgetId())+ ", "+ expressionBinder+ ");");      }    }  } catch (  NoSuchFieldException e) {    throw new CruxGeneratorException("Error processing data binding expression.",e);  }}  }
class C{  public Collection<Statement> fetchRdfForEntity(String entityId) throws RetryableException {  URI uri=uris.rdf(entityId);  long start=System.currentTimeMillis();  log.debug("Fetching rdf from {}",uri);  RDFParser parser=Rio.createParser(RDFFormat.TURTLE);  StatementCollector collector=new StatementCollector();  parser.setRDFHandler(new NormalizingRdfHandler(collector));  HttpGet request=new HttpGet(uri);  HttpClientUtils.ignoreCookies(request);  try {    try (CloseableHttpResponse response=client.execute(request)){      if (response.getStatusLine().getStatusCode() == 404) {        return Collections.emptyList();      }      if (response.getStatusLine().getStatusCode() >= 300) {        throw new ContainedException("Unexpected status code fetching RDF for " + uri + ":  "+ response.getStatusLine().getStatusCode());      }      parser.parse(new InputStreamReader(response.getEntity().getContent(),Charsets.UTF_8),uri.toString());    }   } catch (  UnknownHostException|SocketException|SSLHandshakeException e) {    throw new RuntimeException(e);  }catch (  IOException e) {    throw new RetryableException("Error fetching RDF for " + uri,e);  }catch (  RDFParseException|RDFHandlerException e) {    throw new ContainedException("RDF parsing error for " + uri,e);  }  log.debug("Done in {} ms",System.currentTimeMillis() - start);  return collector.getStatements();}  }
class C{  public static String toString(Throwable throwable){  StringWriter stringWriter=new StringWriter();  throwable.printStackTrace(new PrintWriter(stringWriter));  return stringWriter.toString();}  }
class C{  public LiveRangeSplitting(){  super("LIR SSA Live Range Splitting",new OptimizationPlanElement[]{new OptimizationPlanAtomicElement(new BranchOptimizations(2,true,true)),new OptimizationPlanAtomicElement(new CoalesceMoves()),new OptimizationPlanAtomicElement(new LiveRangeSplittingPhase()),new OptimizationPlanAtomicElement(new BranchOptimizations(2,true,true)),new OptimizationPlanAtomicElement(new DominatorsPhase(true)),new OptimizationPlanAtomicElement(new DominanceFrontier()),new OptimizationPlanAtomicElement(new RenamePreparation()),new OptimizationPlanAtomicElement(new EnterSSA()),new OptimizationPlanAtomicElement(new LeaveSSA())});}  }
class C{  public final void leaveModeration(String subreddit){  String requesturl=ApiURL + Endpoints.LEAVE_MODERATOR;  String subFullId=this.getSubreddit(subreddit).getName();  List<NameValuePair> urlParameters=new ArrayList<>();  urlParameters.add(new BasicNameValuePair("id",subFullId));  this.makeHttpRequest(requesturl,urlParameters);}  }
class C{  public SendableAudioMessage.SendableAudioMessageBuilder replyTo(long replyTo){  this.replyTo=replyTo;  return this;}  }
class C{  public XmlPullParser newPullParser() throws XmlPullParserException {  if (parserClasses == null)   throw new XmlPullParserException("Factory initialization was incomplete - has not tried " + classNamesLocation);  if (parserClasses.size() == 0)   throw new XmlPullParserException("No valid parser classes found in " + classNamesLocation);  final StringBuilder issues=new StringBuilder();  for (int i=0; i < parserClasses.size(); i++) {    final Class ppClass=(Class)parserClasses.get(i);    try {      final XmlPullParser pp=(XmlPullParser)ppClass.newInstance();      for (Iterator iter=features.keySet().iterator(); iter.hasNext(); ) {        final String key=(String)iter.next();        final Boolean value=(Boolean)features.get(key);        if (value != null && value.booleanValue()) {          pp.setFeature(key,true);        }      }      return pp;    } catch (    Exception ex) {      issues.append(ppClass.getName() + ": " + ex.toString()+ "; ");    }  }  throw new XmlPullParserException("could not create parser: " + issues);}  }
class C{  public Classification(String modelDir){  option=new Option(modelDir);  option.readOptions();  init();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", description: ");  result.append(description);  result.append(')');  return result.toString();}  }
class C{  private boolean isSecondOrderModel(DependencyPipe aPipe){  for (  Object key : aPipe.dataAlphabet.toArray()) {    if (key instanceof String) {      String sKey=(String)key;      if (sKey.startsWith("POS_TRIP=")) {        return true;      }    }  }  return false;}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  @Override public MessageConsumer createConsumer(final Destination destination) throws JMSException {  lock();  try {    Session session=getSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createConsumer " + session + " dest="+ destination);    }    MessageConsumer result=session.createConsumer(destination);    result=new ActiveMQRAMessageConsumer(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdConsumer " + session + " consumer="+ result);    }    addConsumer(result);    return result;  }  finally {    unlock();  }}  }
class C{  protected Double wrapKey(double k){  return new Double(k);}  }
class C{  public boolean hasArchiveTotalComplete(){  return hasExtension(ArchiveTotalComplete.class);}  }
class C{  @Bean public ConnectionFactory jmsConnectionFactory(){  AwsParamsDto awsParamsDto=awsHelper.getAwsParamsDto();  ClientConfiguration clientConfiguration=new ClientConfiguration();  if (StringUtils.isNotBlank(awsParamsDto.getHttpProxyHost())) {    clientConfiguration.setProxyHost(awsParamsDto.getHttpProxyHost());  }  if (awsParamsDto.getHttpProxyPort() != null) {    clientConfiguration.setProxyPort(awsParamsDto.getHttpProxyPort());  }  return SQSConnectionFactory.builder().withClientConfiguration(clientConfiguration).build();}  }
class C{  public boolean isGradientEnabled(){  return mGradientEnabled;}  }
class C{  @ApiMethod(httpMethod="POST") public final Place insertPlace(final Place place,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  ofy().save().entity(place).now();  return place;}  }
class C{  public int size(){  return keys.length;}  }
class C{  @GET @Path("check-compatibility") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response checkGeoVersionCompatibility(@QueryParam("expect_version") String expectVersion){  if (!isValidateVersion(expectVersion)) {    _log.warn("invalid Geo version {} : only support major and minor ",expectVersion);    throw APIException.badRequests.invalidParameter("invalid Geo version {} : only support major and minor ",expectVersion);  }  Boolean versionSupported=this._dbClient.checkGeoCompatible(expectVersion);  return Response.ok(versionSupported.toString(),MediaType.APPLICATION_OCTET_STREAM).build();}  }
class C{  private static List<MetaMethod> rankMethods(String name,Object[] original,List<MetaMethod> methods){  List<RankableMethod> rm=new ArrayList<RankableMethod>(methods.size());  if (original == null)   original=EMPTY_OBJECT_ARRAY;  Class[] ta=new Class[original.length];  Class nullC=NullObject.class;  for (int i=0; i < original.length; i++) {    ta[i]=original[i] == null ? nullC : original[i].getClass();  }  for (  MetaMethod m : methods) {    rm.add(new RankableMethod(name,ta,m));  }  Collections.sort(rm);  List<MetaMethod> l=new ArrayList<MetaMethod>(rm.size());  for (  RankableMethod m : rm) {    if (l.size() > MAX_RECOMENDATIONS)     break;    if (m.score > MAX_METHOD_SCORE)     break;    l.add(m.m);  }  return l;}  }
class C{  private void openWifiSettings(){  Intent intent=new Intent(Settings.ACTION_WIFI_SETTINGS);  final PackageManager packageManager=getActivity().getPackageManager();  if (packageManager.resolveActivity(intent,PackageManager.MATCH_DEFAULT_ONLY) != null) {    startActivity(intent);    return;  }  intent=new Intent(Settings.ACTION_WIRELESS_SETTINGS);  if (packageManager.resolveActivity(intent,PackageManager.MATCH_DEFAULT_ONLY) != null) {    startActivity(intent);  }}  }
class C{  public boolean parseKMLFile(File file){  mLocalFile=file;  Log.d(BonusPackHelper.LOG_TAG,"KmlProvider.parseKMLFile:" + mLocalFile.getAbsolutePath());  InputStream stream;  boolean ok;  try {    stream=new BufferedInputStream(new FileInputStream(mLocalFile));    ok=parseKMLStream(stream,null);    stream.close();  } catch (  Exception e) {    e.printStackTrace();    ok=false;  }  return ok;}  }
class C{  public static void main(String[] args){  try {    String rootDirPath=".";    if (args.length == 1) {      if (args[0].startsWith(GeneratorUtils.ROOT_DIR_PARAMETER)) {        rootDirPath=args[0].substring(GeneratorUtils.ROOT_DIR_PARAMETER.length());      } else {        System.err.print("Wrong usage. There is only one allowed argument : " + GeneratorUtils.ROOT_DIR_PARAMETER);        System.exit(1);      }    }    File rootFolder=new File(rootDirPath);    System.out.println(" ------------------------------------------------------------------------ ");    System.out.println(String.format("Searching for Extensions in %s",rootFolder.getAbsolutePath()));    System.out.println(" ------------------------------------------------------------------------ ");    findExtensions();    generateExtensionManager(rootFolder);  } catch (  IOException e) {    System.err.println(e.getMessage());    System.exit(1);  }}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public ComputeImageServerRestRep updateComputeImageServer(@PathParam("id") URI id,ComputeImageServerUpdate param){  log.info("Update computeImageServer id {} ",id);  ComputeImageServer imageServer=_dbClient.queryObject(ComputeImageServer.class,id);  if (null == imageServer || imageServer.getInactive()) {    throw APIException.notFound.unableToFindEntityInURL(id);  } else {    StringSet availImages=imageServer.getComputeImages();    checkActiveJobsForImageServer(id);    String imageServerName=param.getName();    String imageServerAddress=param.getImageServerIp();    String bootDir=param.getTftpBootDir();    String osInstallAddress=param.getImageServerSecondIp();    String username=param.getImageServerUser();    String password=param.getImageServerPassword();    Integer installTimeout=param.getOsInstallTimeout();    Integer sshTimeout=param.getSshTimeout();    Integer imageImportTimeout=param.getImageImportTimeout();    if (StringUtils.isNotBlank(imageServerName) && !imageServerName.equalsIgnoreCase(imageServer.getLabel())) {      checkDuplicateLabel(ComputeImageServer.class,imageServerName);      imageServer.setLabel(param.getName());    }    if (StringUtils.isNotBlank(imageServerAddress) && !imageServerAddress.equalsIgnoreCase(imageServer.getImageServerIp())) {      checkDuplicateImageServer(id,imageServerAddress,null);      disassociateComputeImages(imageServer);      imageServer.setImageServerIp(imageServerAddress);    }    if (StringUtils.isNotBlank(osInstallAddress)) {      imageServer.setImageServerSecondIp(osInstallAddress);    }    if (StringUtils.isNotBlank(username)) {      imageServer.setImageServerUser(username);    }    if (null != installTimeout) {      ArgValidator.checkFieldRange(installTimeout,0,2147483,"seconds","osInstallTimeout");      imageServer.setOsInstallTimeoutMs(new Long(TimeUnit.SECONDS.toMillis(installTimeout)).intValue());    }    if (null != sshTimeout) {      ArgValidator.checkFieldRange(sshTimeout,0,2147483,"seconds","sshTimeout");      imageServer.setSshTimeoutMs(new Long(TimeUnit.SECONDS.toMillis(sshTimeout)).intValue());    }    if (null != imageImportTimeout) {      ArgValidator.checkFieldRange(imageImportTimeout,0,2147483,"seconds","imageImportTimeout");      imageServer.setImageImportTimeoutMs(new Long(TimeUnit.SECONDS.toMillis(imageImportTimeout)).intValue());    }    if (StringUtils.isNotBlank(bootDir)) {      if (!CollectionUtils.isEmpty(availImages) && !imageServer.getTftpBootDir().equals(bootDir)) {        log.info("Cannot update TFTPBOOT directory, while " + "an image server has associated successful import images.");        throw APIException.badRequests.cannotUpdateTFTPBOOTDirectory();      } else {        imageServer.setTftpBootDir(bootDir);      }    }    if (StringUtils.isNotBlank(password)) {      imageServer.setImageServerPassword(password);    }    auditOp(OperationTypeEnum.IMAGESERVER_VERIFY_IMPORT_IMAGES,true,null,imageServer.getId().toString(),imageServer.getImageServerIp());    _dbClient.updateObject(imageServer);    ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);    String taskId=UUID.randomUUID().toString();    AsyncTask task=new AsyncTask(ComputeImageServer.class,imageServer.getId(),taskId);    tasks.add(task);    Operation op=new Operation();    op.setResourceType(ResourceOperationTypeEnum.UPDATE_VERIFY_COMPUTE_IMAGE_SERVER);    _dbClient.createTaskOpStatus(ComputeImageServer.class,imageServer.getId(),taskId,op);    ImageServerController controller=getController(ImageServerController.class,null);    controller.verifyImageServerAndImportExistingImages(task,op.getName());  }  return map(_dbClient,imageServer);}  }
class C{  private CInstructionGraphConverter(){}  }
class C{  public LatinHypercube(){  super();}  }
class C{  public boolean remove(E e){  if (e == null) {    return false;  }  if (head == null) {    return false;  }  if (head.value == e) {    removeFirst();    return true;  }  if (last.value == e) {    removeLast();    return true;  }  if (head.next == null) {    return false;  }  DoubleNode<E> prev=head;  DoubleNode<E> n=head.next;  while (n != null) {    if (n.value == e) {      prev.next=n.next;      if (prev.next != null) {        prev.next.prev=prev;      }      size--;      return true;    }    n=n.next;    prev=prev.next;  }  return false;}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public boolean isWrap(){  return wrap != null;}  }
class C{  public static Map<String,String> addAuthHeader(String username,String password,Map<String,String> params){  String creds=String.format("%s:%s",username,password);  String encoded=Base64.encodeToString(creds.getBytes(),Base64.NO_WRAP);  params.put("Authorization","Basic " + encoded);  return params;}  }
class C{  public void update(WifiP2pDevice device){  updateSupplicantDetails(device);  status=device.status;}  }
class C{  public <V>Tuple deserialise(BiFunction<V,Type,Object> deserialiser,Map<String,V> values){  checkNotNull(deserialiser,"deserialiser must not be null");  checkNotNull(values,"values must not be null");  checkMatchingKeys(values);  Object[] valueArray=new Object[slots.length];  getIndices().forEach(null);  return make(valueArray);}  }
class C{  private DeferredResult<WordCountsResponse> countWordsInLocalDocuments(){  return fetchLocalDocumentLinks().thenCompose(null).thenApply(null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().getMute());}  }
class C{  public boolean isUsed(String name){  return ((Boolean)used.get(name)).booleanValue();}  }
class C{  public Map<Integer,Integer> exifGetMinimalTags(ExifInterface exif){  Map<Integer,Integer> map=new HashMap<>();  map.put(ExifInterface.TAG_ORIENTATION,ExifInterface.getRotationForOrientationValue((short)Exif.getOrientation(exif)));  map.put(ExifInterface.TAG_PIXEL_X_DIMENSION,exif.getTagIntValue(ExifInterface.TAG_PIXEL_X_DIMENSION));  map.put(ExifInterface.TAG_PIXEL_Y_DIMENSION,exif.getTagIntValue(ExifInterface.TAG_PIXEL_Y_DIMENSION));  return map;}  }
class C{  private NameValue phone_context() throws ParseException {  lexer.match('=');  char la=lexer.lookAhead(0);  Object value;  if (la == '+') {    lexer.consume(1);    value="+" + base_phone_number();  } else   if (Lexer.isAlphaDigit(la)) {    Token t=lexer.match(Lexer.ID);    value=t.getTokenValue();  } else {    throw new ParseException("Invalid phone-context:" + la,-1);  }  return new NameValue("phone-context",value,false);}  }
class C{  public static Element drawManhattan(SVGPlot svgp,Projection2D proj,NumberVector mid,double radius){  final double[] v_mid=mid.toArray();  final long[] dims=proj.getVisibleDimensions2D();  SVGPath path=new SVGPath();  for (int dim=BitsUtil.nextSetBit(dims,0); dim >= 0; dim=BitsUtil.nextSetBit(dims,dim + 1)) {    v_mid[dim]+=radius;    double[] p1=proj.fastProjectDataToRenderSpace(v_mid);    v_mid[dim]-=radius;    v_mid[dim]-=radius;    double[] p2=proj.fastProjectDataToRenderSpace(v_mid);    v_mid[dim]+=radius;    for (int dim2=BitsUtil.nextSetBit(dims,0); dim2 >= 0; dim2=BitsUtil.nextSetBit(dims,dim2 + 1)) {      if (dim < dim2) {        v_mid[dim2]+=radius;        double[] p3=proj.fastProjectDataToRenderSpace(v_mid);        v_mid[dim2]-=radius;        v_mid[dim2]-=radius;        double[] p4=proj.fastProjectDataToRenderSpace(v_mid);        v_mid[dim2]+=radius;        path.moveTo(p1[0],p1[1]);        path.drawTo(p3[0],p3[1]);        path.moveTo(p1[0],p1[1]);        path.drawTo(p4[0],p4[1]);        path.moveTo(p2[0],p2[1]);        path.drawTo(p3[0],p3[1]);        path.moveTo(p2[0],p2[1]);        path.drawTo(p4[0],p4[1]);        path.close();      }    }  }  return path.makeElement(svgp);}  }
class C{  static DirectCompactSketch wrapInstance(Memory srcMem,long pre0,long seed){  int preLongs=extractPreLongs(pre0);  int flags=extractFlags(pre0);  boolean empty=(flags & EMPTY_FLAG_MASK) > 0;  short memSeedHash=(short)extractSeedHash(pre0);  short computedSeedHash=computeSeedHash(seed);  checkSeedHashes(memSeedHash,computedSeedHash);  int curCount=(preLongs > 1) ? srcMem.getInt(RETAINED_ENTRIES_INT) : 0;  long thetaLong=(preLongs > 2) ? srcMem.getLong(THETA_LONG) : Long.MAX_VALUE;  DirectCompactSketch dcs=new DirectCompactSketch(empty,memSeedHash,curCount,thetaLong);  dcs.preLongs_=extractPreLongs(pre0);  dcs.mem_=srcMem;  return dcs;}  }
class C{  public static com.google.security.zynamics.reil.ReilGraph convert(final ReilGraph graph){  Preconditions.checkNotNull(graph,"IE01050: Graph argument can not be null");  final List<com.google.security.zynamics.reil.ReilBlock> nodes=new ArrayList<com.google.security.zynamics.reil.ReilBlock>();  final Map<ReilBlock,com.google.security.zynamics.reil.ReilBlock> blockMap=new HashMap<ReilBlock,com.google.security.zynamics.reil.ReilBlock>();  for (  final ReilBlock reilBlock : graph) {    final com.google.security.zynamics.reil.ReilBlock convertedBlock=new com.google.security.zynamics.reil.ReilBlock(convert(reilBlock.getInstructions()));    blockMap.put(reilBlock,convertedBlock);    nodes.add(convertedBlock);  }  final List<com.google.security.zynamics.reil.ReilEdge> edges=new ArrayList<com.google.security.zynamics.reil.ReilEdge>();  for (  final ReilEdge edge : graph.getEdges()) {    final com.google.security.zynamics.reil.ReilEdge convertedEdge=new com.google.security.zynamics.reil.ReilEdge(blockMap.get(edge.getSource()),blockMap.get(edge.getTarget()),edge.getType().getNative());    edges.add(convertedEdge);    com.google.security.zynamics.reil.ReilBlock.link(blockMap.get(edge.getSource()),blockMap.get(edge.getTarget()),convertedEdge);  }  return new com.google.security.zynamics.reil.ReilGraph(nodes,edges);}  }
class C{  public static Entity entityFromTargetNameAnyZone(final String target,final Entity player){  if ((target == null) || (player == null)) {    return null;  }  final StendhalRPZone zone=player.getZone();  Entity entity=null;  if ((target.length() > 1) && (target.charAt(0) == '#') && Character.isDigit(target.charAt(1))) {    final int objectId=Integer.parseInt(target.substring(1));    entity=entityFromZoneByID(objectId,zone);  }  if (entity == null) {    entity=SingletonRepository.getRuleProcessor().getPlayer(target);  }  if (entity == null) {    entity=SingletonRepository.getNPCList().get(target);  }  return entity;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.start_bt:{      this.startActivity(new Intent(this,LActivity.class));      break;    }}}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6,K k7,V v7){  return new ImmutableCollections.MapN<K,V>(k1,v1,k2,v2,k3,v3,k4,v4,k5,v5,k6,v6,k7,v7);}  }
class C{  public SnmpIndex(SnmpOid oid){  oids.addElement(oid);  size=1;}  }
class C{  public JoinQuery(JavaSparkContext sc,RectangleRDD objectRDD,RectangleRDD rectangleRDDUnpartitioned){  if (objectRDD.gridRectangleRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  this.rectangleRDD=rectangleRDDUnpartitioned;  this.rectangleRDD.rawRectangleRDD=rectangleRDDUnpartitioned.rawRectangleRDD;  this.rectangleRDD.SpatialPartition(objectRDD.grids);  this.sc=sc;}  }
class C{  public StopwatchCPU(){  threadTimer=ManagementFactory.getThreadMXBean();  start=threadTimer.getCurrentThreadCpuTime();}  }
class C{  public final synchronized void gotoMove(int moveNr){  boolean needUpdate=false;  while (game.currPos().fullMoveCounter > moveNr) {    int before=game.currPos().fullMoveCounter * 2 + (game.currPos().whiteMove ? 0 : 1);    undoMoveNoUpdate();    int after=game.currPos().fullMoveCounter * 2 + (game.currPos().whiteMove ? 0 : 1);    if (after >= before)     break;    needUpdate=true;  }  while (game.currPos().fullMoveCounter < moveNr) {    int before=game.currPos().fullMoveCounter * 2 + (game.currPos().whiteMove ? 0 : 1);    redoMoveNoUpdate();    int after=game.currPos().fullMoveCounter * 2 + (game.currPos().whiteMove ? 0 : 1);    if (after <= before)     break;    needUpdate=true;  }  if (needUpdate) {    abortSearch();    updateComputeThreads();    setSelection();    updateGUI();  }}  }
class C{  public boolean isRunning(){  return timerQueue().containsTimer(this);}  }
class C{  public void test_DELETE_accessPath_delete_p_o_URI() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,RDF.TYPE,new URIImpl("http://xmlns.com/foaf/0.1/Person"));  assertEquals(3,mutationResult);}  }
class C{  public String displayOutputs(){  return MLContextUtil.displayOutputs("Outputs",outputVariables,symbolTable);}  }
class C{  public int code(){  return code;}  }
class C{  public UF2(){  this(30);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:55.349 -0500",hash_original_method="E919388D461770C5E68C050C2BB6D626",hash_generated_method="EC5B8CE311535EBE2BDBBE66475CBE8D") @Override public int compare(EngineInfo lhs,EngineInfo rhs){  if (lhs.system && !rhs.system) {    return -1;  } else   if (rhs.system && !lhs.system) {    return 1;  } else {    return rhs.priority - lhs.priority;  }}  }
class C{  @Override public Object clone(){  AttributeValue a=new AttributeValue(getValue(),isHidden());  return a;}  }
class C{  public void sendMessage(int what,int arg1){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  sendMessage(msg);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MSort[");  sb.append("Index=").append(index).append(",Data=").append(data);  sb.append("]");  return sb.toString();}  }
class C{  public void mapArguments(PyCallExpression.PyMarkedCallee resolved_callee,@NotNull TypeEvalContext context){  PyExpression[] arguments=myArgumentList.getArguments();  myMarkedCallee=resolved_callee;  final List<PyExpression> unmatched_subargs=new LinkedList<PyExpression>();  List<PyExpression> unmatched_args=verifyArguments();  final List<PyParameter> parameters=PyUtil.getParameters(myMarkedCallee.getCallable(),context);  Map<PyNamedParameter,PyExpression> slots=new LinkedHashMap<PyNamedParameter,PyExpression>();  PyNamedParameter kwd_par=null;  PyNamedParameter tuple_par=null;  Set<PyExpression> mapped_args=new HashSet<PyExpression>();  final int implicitOffset=resolved_callee.getImplicitOffset();  int positional_index=0;  int i=0;  for (  PyParameter par : parameters) {    if (tuple_par == null && kwd_par == null && positional_index < implicitOffset) {      positional_index+=1;      continue;    }    PyNamedParameter n_par=par.getAsNamed();    if (n_par != null) {      if (n_par.isPositionalContainer())       tuple_par=n_par; else       if (n_par.isKeywordContainer())       kwd_par=n_par; else {        slots.put(n_par,null);        if (tuple_par == null && kwd_par == null) {          positional_index+=1;        }      }    } else {      PyTupleParameter t_par=par.getAsTuple();      if (t_par != null)       positional_index+=1;    }    i+=1;  }  for (i=0; i < implicitOffset && i < parameters.size(); i+=1) {    slots.remove(parameters.get(i).getAsNamed());    positional_index+=1;  }  int cnt=implicitOffset;  int positional_bound=arguments.length;  ListIterator<PyExpression> unmatched_arg_iter=unmatched_args.listIterator();  while (unmatched_arg_iter.hasNext()) {    PyExpression arg=unmatched_arg_iter.next();    if (arg instanceof PyStarArgument || arg instanceof PyKeywordArgument) {      positional_bound=cnt;      break;    }    if (cnt < parameters.size() && cnt < positional_index) {      final PyParameter par=parameters.get(cnt);      PyNamedParameter n_par=par.getAsNamed();      if (n_par != null) {        cnt+=1;        slots.put(n_par,PyUtil.peelArgument(arg));        mapped_args.add(arg);      } else {        PyTupleParameter t_par=par.getAsTuple();        if (t_par != null) {          if (arg instanceof PyParenthesizedExpression) {            mapped_args.add(arg);          } else {            PyType arg_type=context.getType(arg);            if (arg_type != null && arg_type.isBuiltin() && "list".equals(arg_type.getName())) {              mapped_args.add(arg);            }          }          unmatched_arg_iter.previous();          MyParamVisitor visitor=new MyParamVisitor(unmatched_arg_iter,this);          visitor.enterTuple(t_par.getAsTuple());          unmatched_subargs.addAll(visitor.getUnmatchedSubargs());          cnt+=1;        }      }    } else     break;  }  for (  Map.Entry<PyExpression,List<PyNamedParameter>> pair : myNestedMappedParams.entrySet()) {    PyExpression arg=pair.getKey();    List<PyNamedParameter> params=pair.getValue();    mapped_args.add(arg);    for (    PyNamedParameter n_par : params)     slots.remove(n_par);  }  for (  PyExpression arg : unmatched_subargs) {    markArgument(arg,ArgFlag.IS_UNMAPPED);  }  boolean seen_named_args=false;  Map<String,PyNamedParameter> parameter_by_name=new LinkedHashMap<String,PyNamedParameter>();  for (  PyParameter par : parameters) {    PyNamedParameter n_par=par.getAsNamed();    if (n_par != null)     parameter_by_name.put(n_par.getName(),n_par);  }  for (  PyExpression arg : arguments) {    if (arg instanceof PyKeywordArgument) {      String arg_name=((PyKeywordArgument)arg).getKeyword();      PyNamedParameter respective_par=parameter_by_name.get(arg_name);      if (respective_par != null && !respective_par.isKeywordContainer() && !respective_par.isPositionalContainer()) {        if (slots.get(respective_par) != null)         markArgument(arg,ArgFlag.IS_DUP); else         slots.put(respective_par,arg);      } else {        if (kwd_par != null) {          myPlainMappedParams.put(arg,kwd_par);          mapped_args.add(arg);        }      }      seen_named_args=true;    }  }  boolean tuple_arg_not_exhausted=false;  boolean tuple_dup_found=false;  if (cnt < parameters.size() && cnt < positional_index && myTupleArg != null) {    PyType tuple_arg_type=null;    final PyExpression expression=PsiTreeUtil.getChildOfType(myTupleArg,PyExpression.class);    if (expression != null) {      tuple_arg_type=context.getType(expression);    }    int tuple_length;    boolean tuple_length_known;    if (tuple_arg_type instanceof PyTupleType) {      tuple_length=((PyTupleType)tuple_arg_type).getElementCount();      tuple_length_known=true;    } else {      tuple_length=2000000;      tuple_length_known=false;    }    int mapped_params_count=0;    while (cnt < parameters.size() && cnt < positional_index && mapped_params_count < tuple_length) {      PyParameter par=parameters.get(cnt);      if (par instanceof PySingleStarParameter)       break;      PyNamedParameter n_par=par.getAsNamed();      if (slots.containsKey(n_par)) {        final PyExpression arg_here=slots.get(n_par);        if (arg_here != null) {          if (tuple_length_known) {            final EnumSet<ArgFlag> flags=myArgFlags.get(arg_here);            if (flags == null || flags.isEmpty()) {              markArgument(arg_here,ArgFlag.IS_DUP);              tuple_dup_found=true;            }          }          break;        } else         if (n_par != null) {          myTupleMappedParams.add(n_par);          mapped_args.add(myTupleArg);          slots.remove(n_par);        }      } else       if (n_par == tuple_par) {        mapped_params_count=tuple_length;        break;      }      cnt+=1;      mapped_params_count+=1;    }    if (tuple_length_known && (mapped_params_count < tuple_length) || mapped_params_count == 0) {      tuple_arg_not_exhausted=true;    }  }  if (tuple_par != null) {    i=0;    while (i < arguments.length && mapped_args.contains(arguments[i]) && isPositionalArg(arguments[i])) {      i+=1;    }    if (i < arguments.length && isPositionalArg(arguments[i])) {      while (i < arguments.length && !mapped_args.contains(arguments[i]) && isPositionalArg(arguments[i])) {        myPlainMappedParams.put(arguments[i],tuple_par);        mapped_args.add(arguments[i]);        i+=1;      }    }  }  if (myTupleArg != null && tuple_par != null) {    if (!mapped_args.contains(myTupleArg)) {      myTupleMappedParams.add(tuple_par);      mapped_args.add(myTupleArg);    } else     if (!seen_named_args && tuple_arg_not_exhausted) {      myTupleMappedParams.add(tuple_par);      mapped_args.add(myTupleArg);      tuple_arg_not_exhausted=false;    }  }  if (tuple_arg_not_exhausted && !tuple_dup_found) {    markArgument(myTupleArg,ArgFlag.IS_TOO_LONG);  }  if (myKwdArg != null) {    for (int j=implicitOffset; j < parameters.size(); ++j) {      final PyParameter par=parameters.get(j);      final PyNamedParameter namedParameter=par.getAsNamed();      if (namedParameter != null && !namedParameter.isKeywordContainer() && !namedParameter.isPositionalContainer() && slots.get(namedParameter) == null) {        slots.put(namedParameter,myKwdArg);      }    }  }  if (myKwdArg != null && kwd_par != null && !mapped_args.contains(myKwdArg)) {    myKwdMappedParams.add(kwd_par);    mapped_args.add(myKwdArg);  }  for (  Map.Entry<PyNamedParameter,PyExpression> pair : slots.entrySet()) {    PyNamedParameter n_par=pair.getKey();    PyExpression arg=pair.getValue();    if (arg == null) {      if (!n_par.hasDefaultValue())       myUnmappedParams.add(n_par);    } else {      if (arg == myTupleArg) {        myTupleMappedParams.add(n_par);      } else       if (arg == myKwdArg) {        myKwdMappedParams.add(n_par);      } else {        myPlainMappedParams.put(arg,n_par);      }    }  }  for (  PyExpression arg : slots.values()) {    if (arg != null)     mapped_args.add(arg);  }  for (  PyExpression arg : arguments) {    if (!mapped_args.contains(arg)) {      final EnumSet<ArgFlag> flags=myArgFlags.get(arg);      if (flags == null || flags.isEmpty()) {        markArgument(arg,ArgFlag.IS_UNMAPPED);      }    }  }}  }
class C{  public static void sortDecreasing(String[] strs,int[] nums){  for (int i=0; i < nums.length; i++) {    int max=nums[i];    int maxIndex=i;    String temp;    for (int j=i + 1; j < nums.length; j++) {      if (nums[j] > max) {        max=nums[j];        maxIndex=j;      }    }    if (maxIndex != i) {      temp=strs[i];      strs[i]=strs[maxIndex];      strs[maxIndex]=temp;      nums[maxIndex]=nums[i];      nums[i]=max;    }  }}  }
class C{  @Override public boolean hasValuesDescription(){  return true;}  }
class C{  private void stopDrag(MotionEvent ev){  mTouchMode=TOUCH_MODE_IDLE;  boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled();  cancelSuperTouch(ev);  if (commitChange) {    boolean newState;    mVelocityTracker.computeCurrentVelocity(1000);    float xvel=mVelocityTracker.getXVelocity();    if (Math.abs(xvel) > mMinFlingVelocity) {      newState=xvel > 0;    } else {      newState=getTargetCheckedState();    }    animateThumbToCheckedState(newState);  } else {    animateThumbToCheckedState(isChecked());  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_SETTER_DECLARATION__OWNER:    return basicSetOwner(null,msgs);case N4JSPackage.N4_SETTER_DECLARATION__ANNOTATION_LIST:  return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  private int skipToStatementStart(boolean danglingElse,boolean isInBlock){  final int NOTHING=0;  final int READ_PARENS=1;  final int READ_IDENT=2;  int mayBeMethodBody=NOTHING;  boolean isTypeBody=false;  while (true) {    nextToken();    if (isInBlock) {switch (fToken) {case Symbols.TokenIF:case Symbols.TokenELSE:case Symbols.TokenCATCH:case Symbols.TokenDO:case Symbols.TokenWHILE:case Symbols.TokenFINALLY:case Symbols.TokenFOR:case Symbols.TokenTRY:        return fPosition;case Symbols.TokenSTATIC:      mayBeMethodBody=READ_IDENT;    break;case Symbols.TokenSYNCHRONIZED:  if (mayBeMethodBody != READ_IDENT)   return fPosition;break;case Symbols.TokenCLASS:case Symbols.TokenINTERFACE:case Symbols.TokenENUM:isTypeBody=true;break;case Symbols.TokenSWITCH:fIndent=fPrefs.prefCaseIndent;return fPosition;}}switch (fToken) {case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:case Symbols.TokenSEMICOLON:case Symbols.TokenEOF:if (isInBlock) fIndent=getBlockIndent(mayBeMethodBody == READ_IDENT,isTypeBody);return fPreviousPos;case Symbols.TokenCOLON:int pos=fPreviousPos;if (!isConditional()) return pos;break;case Symbols.TokenRBRACE:pos=fPreviousPos;if (skipScope() && looksLikeArrayInitializerIntro()) {continue;} else {if (isInBlock) fIndent=getBlockIndent(mayBeMethodBody == READ_IDENT,isTypeBody);return pos;}case Symbols.TokenRPAREN:if (isInBlock) mayBeMethodBody=READ_PARENS;case Symbols.TokenRBRACKET:case Symbols.TokenGREATERTHAN:pos=fPreviousPos;if (skipScope()) break; else return pos;case Symbols.TokenIF:if (danglingElse) return fPosition; else break;case Symbols.TokenELSE:pos=fPosition;if (skipNextIF()) break; else return pos;case Symbols.TokenCATCH:case Symbols.TokenFINALLY:pos=fPosition;if (skipNextTRY()) break; else return pos;case Symbols.TokenDO:return fPosition;case Symbols.TokenWHILE:pos=fPosition;if (hasMatchingDo()) {break;} else {fPosition=pos;break;}case Symbols.TokenIDENT:if (mayBeMethodBody == READ_PARENS) mayBeMethodBody=READ_IDENT;break;default :}}}  }
class C{  public SwitchAccessNodeCompat obtainCopy(){  SwitchAccessNodeCompat obtainedInstance=new SwitchAccessNodeCompat(AccessibilityNodeInfo.obtain((AccessibilityNodeInfo)getInfo()),mWindowsAbove);  if (mVisibilityCalculated) {    obtainedInstance.mVisibilityCalculated=true;    obtainedInstance.mVisibleBoundsInScreen=new Rect(mVisibleBoundsInScreen);  }  return obtainedInstance;}  }
class C{  private void scale(BufferedImage srcImg,byte[][] workPixels,BufferedImage outImage){  final int[] tempPixels=new int[srcWidth];  final byte[] srcPixels=new byte[srcWidth * nrChannels];  final byte[] dstPixels=new byte[dstWidth * nrChannels];  final BitSet isRowInitialized=new BitSet(srcHeight);  for (int dstY=dstHeight - 1; dstY >= 0; dstY--) {    final int yTimesNumContributors=dstY * verticalSubsamplingData.numContributors;    final int max=verticalSubsamplingData.arrN[dstY];{      int index=yTimesNumContributors;      for (int j=max - 1; j >= 0; j--) {        int valueLocation=verticalSubsamplingData.arrPixel[index];        index++;        if (!isRowInitialized.get(valueLocation)) {          isRowInitialized.set(valueLocation);          ImageUtils.getPixelsBGR(srcImg,valueLocation,srcWidth,srcPixels,tempPixels);          for (int channel=nrChannels - 1; channel >= 0; channel--) {            getSamplesHorizontal(srcPixels,channel,tempPixels);            for (int i=dstWidth - 1; i >= 0; i--) {              int sampleLocation=i * nrChannels;              final int horizontalMax=horizontalSubsamplingData.arrN[i];              float sample=0.0f;              int horizontalIndex=i * horizontalSubsamplingData.numContributors;              for (int jj=horizontalMax - 1; jj >= 0; jj--) {                sample+=tempPixels[horizontalSubsamplingData.arrPixel[horizontalIndex]] * horizontalSubsamplingData.arrWeight[horizontalIndex];                horizontalIndex++;              }              putSample(workPixels[valueLocation],channel,(int)sample,sampleLocation);            }          }        }      }    }    for (int x=0; x < dstWidth; x++) {      final int xLocation=x * nrChannels;      final int sampleLocation=x * nrChannels;      for (int channel=nrChannels - 1; channel >= 0; channel--) {        float sample=0.0f;        int index=yTimesNumContributors;        for (int j=max - 1; j >= 0; j--) {          int valueLocation=verticalSubsamplingData.arrPixel[index];          sample+=(workPixels[valueLocation][xLocation + channel] & 0xff) * verticalSubsamplingData.arrWeight[index];          index++;        }        putSample(dstPixels,channel,sample,sampleLocation);      }    }    ImageUtils.setBGRPixels(dstPixels,outImage,0,dstY,dstWidth,1);    setProgress(processedItems++,totalItems);  }}  }
class C{  public static void writeLongInteger(OutputStream theOs,long theValue) throws IOException {  int nOctets=0;  while ((theValue >> (8 * nOctets)) > 0) {    nOctets++;  }  theOs.write((byte)nOctets);  for (int i=nOctets; i > 0; i--) {    byte octet=(byte)(theValue >> (8 * (i - 1)));    byte byteValue=(byte)(octet & (byte)(0xff));    theOs.write(byteValue);  }}  }
class C{  public void testBug25379() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createTable("testBug25379","(col char(40))");  createProcedure("sp_testBug25379","(INOUT invalue char(255))\nBEGIN" + "\ninsert into testBug25379(col) values(invalue);\nEND");  CallableStatement cstmt=this.conn.prepareCall("{call sp_testBug25379(?)}");  cstmt.setString(1,"'john'");  cstmt.executeUpdate();  assertEquals("'john'",cstmt.getString(1));  assertEquals("'john'",getSingleValue("testBug25379","col","").toString());}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) private void handleTouchInteractionEnd(){  if (mFirstFocusedItem == null) {    return;  }  if (mSingleTapEnabled && mMaybeSingleTap) {    mHandler.cancelRefocusTimeout(false);    performClick(mFirstFocusedItem);  }  mFirstFocusedItem.recycle();  mFirstFocusedItem=null;}  }
class C{  public boolean isItem(){  if (m_isItem != null)   return m_isItem.booleanValue();  m_isItem=Boolean.FALSE;  if (getM_Product_ID() != 0) {    MProduct product=MProduct.get(Env.getCtx(),getM_Product_ID());    if (product.get_ID() == getM_Product_ID() && product.isItem())     m_isItem=Boolean.TRUE;  }  return m_isItem.booleanValue();}  }
class C{  public TargetInformation(final com.google.security.zynamics.binnavi.debug.models.targetinformation.TargetInformation targetInformation){  Preconditions.checkNotNull(targetInformation,"Error: Target information argument can not be null");  this.targetInformation=targetInformation;}  }
class C{  @SuppressWarnings("unchecked") @Nullable private <R>R cast(@Nullable Object obj,Class<R> cls) throws IgniteCheckedException {  if (obj == null)   return null;  if (cls.isInstance(obj))   return (R)obj; else   throw new IgniteCheckedException("Failed to cast object [expected=" + cls + ", actual="+ obj.getClass()+ ']');}  }
class C{  protected MyAbstractList(E[] objects){  for (int i=0; i < objects.length; i++)   add(objects[i]);}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  private static Class<?>[] types(Object... values){  if (values == null) {    return new Class[0];  }  Class<?>[] result=new Class[values.length];  for (int i=0; i < values.length; i++) {    Object value=values[i];    result[i]=value == null ? NULL.class : value.getClass();  }  return result;}  }
class C{  void downcase(final StringBuffer text,final int leng){  for (int i=0; i < leng; i++) {    if (Character.isUpperCase(text.charAt(i))) {      text.setCharAt(i,Character.toLowerCase(text.charAt(i)));    }  }}  }
class C{  public DeviceBuilder deviceName(@NonNull String deviceName){  this.deviceName=deviceName;  return this;}  }
class C{  public boolean isFieldExisting(int fieldMarker){  return fieldMap.containsKey(fieldMarker);}  }
class C{  public void recordBulkOpStart(ThreadIdentifier tid){  if (logger.isDebugEnabled()) {    logger.debug("recording bulkOp start for {}",tid.expensiveToString());  }  this.recordedBulkOpVersionTags.remove(tid);}  }
class C{  @Transactional public void unfollowTag(final String followerId,final String followingTagId) throws ServiceException {  try {    unfollow(followerId,followingTagId,Follow.FOLLOWING_TYPE_C_TAG);  } catch (  final RepositoryException e) {    final String msg="User[id=" + followerId + "] unfollows a tag[id="+ followingTagId+ "] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public ReaderAccessibleInfo(RegularDegreeEdgePool[] edgePools,int[] poolDegrees,int[] nodeDegrees){  this.edgePools=edgePools;  this.poolDegrees=poolDegrees;  this.nodeDegrees=nodeDegrees;}  }
class C{  public void removeLayoutComponent(Component comp){  if (comp == null)   return;  invalidateLayout();}  }
class C{  public boolean typeIsReferenceToManifest(){  if (Reference.MANIFEST_URI.equals(this.getType())) {    return true;  }  return false;}  }
class C{  public void paste(){  if (!myClipboard.hasContents())   return;  handleSelectedPreModify();  long caretPos=getCaretPos();  long total=myClipboard.getContents(content,caretPos,isInserting);  startPosition=caretPos;  endPosition=caretPos + total;  caretStickToStart=false;  redrawTextAreas(true);  restoreStateAfterModify();}  }
class C{  public MediaSize(float x,float y,int units,MediaSizeName media){  super(x,y,units);  if (x > y) {    throw new IllegalArgumentException("X dimension > Y dimension");  }  if (media != null && mediaMap.get(media) == null) {    mediaName=media;    mediaMap.put(mediaName,this);  }  sizeVector.add(this);}  }
class C{  @Deprecated public void createSearch(SavedSearch search,OnClientCallback<SavedSearch> callback){  AsyncReflector.execute(mClient,callback,"createSearch",mAuthenticationToken,search);}  }
class C{  public optgroup removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void removeAllVersionQueryCallbacks(){  versionQueryCallbacks.clear();}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public PushPullBlockingQueue(final int capacity,final SpinPolicy spinPolicy){  super(capacity);switch (spinPolicy) {case BLOCKING:    queueNotFullCondition=new QueueNotFull();  queueNotEmptyCondition=new QueueNotEmpty();break;case SPINNING:queueNotFullCondition=new SpinningQueueNotFull();queueNotEmptyCondition=new SpinningQueueNotEmpty();break;case WAITING:default :queueNotFullCondition=new WaitingQueueNotFull();queueNotEmptyCondition=new WaitingQueueNotEmpty();}}  }
class C{  public EOFException(){}  }
class C{  public static ResourceFilter exclude(){  return new ResourceFilter(Kind.EXCLUDE_ALL);}  }
class C{  public void parseTarHeader(byte[] bh){  int offset=0;  header.name=TarHeader.parseName(bh,offset,TarHeader.NAMELEN);  offset+=TarHeader.NAMELEN;  header.mode=(int)Octal.parseOctal(bh,offset,TarHeader.MODELEN);  offset+=TarHeader.MODELEN;  header.userId=(int)Octal.parseOctal(bh,offset,TarHeader.UIDLEN);  offset+=TarHeader.UIDLEN;  header.groupId=(int)Octal.parseOctal(bh,offset,TarHeader.GIDLEN);  offset+=TarHeader.GIDLEN;  header.size=Octal.parseOctal(bh,offset,TarHeader.SIZELEN);  offset+=TarHeader.SIZELEN;  header.modTime=Octal.parseOctal(bh,offset,TarHeader.MODTIMELEN);  offset+=TarHeader.MODTIMELEN;  header.checkSum=(int)Octal.parseOctal(bh,offset,TarHeader.CHKSUMLEN);  offset+=TarHeader.CHKSUMLEN;  header.linkFlag=bh[offset++];  header.linkName=TarHeader.parseName(bh,offset,TarHeader.NAMELEN);  offset+=TarHeader.NAMELEN;  header.magic=TarHeader.parseName(bh,offset,TarHeader.MAGICLEN);  offset+=TarHeader.MAGICLEN;  header.userName=TarHeader.parseName(bh,offset,TarHeader.UNAMELEN);  offset+=TarHeader.UNAMELEN;  header.groupName=TarHeader.parseName(bh,offset,TarHeader.GNAMELEN);  offset+=TarHeader.GNAMELEN;  header.devMajor=(int)Octal.parseOctal(bh,offset,TarHeader.DEVLEN);  offset+=TarHeader.DEVLEN;  header.devMinor=(int)Octal.parseOctal(bh,offset,TarHeader.DEVLEN);}  }
class C{  public NodesInfoRequest transport(boolean transport){  this.transport=transport;  return this;}  }
class C{  public CategoryMarker(Comparable key){  this(key,Color.gray,new BasicStroke(1.0f));}  }
class C{  public int findSlotFromMessage(LocoNetMessage m){  int i=-1;switch (m.getOpCode()) {case LnConstants.OPC_WR_SL_DATA:case LnConstants.OPC_SL_RD_DATA:    i=m.getElement(2);  break;case LnConstants.OPC_LOCO_DIRF:case LnConstants.OPC_LOCO_SND:case LnConstants.OPC_LOCO_SPD:case LnConstants.OPC_SLOT_STAT1:i=m.getElement(1);break;case LnConstants.OPC_MOVE_SLOTS:return i;default :return i;}return i;}  }
class C{  public static Metrics isBoring(CharSequence text,TextPaint paint,TextDirectionHeuristic textDir){  return isBoring(text,paint,textDir,null);}  }
class C{  private void initializeMBean() throws org.apache.geode.admin.AdminException {  this.mbeanName=new StringBuffer("GemFire.Statistic:").append("source=").append(MBeanUtil.makeCompliantMBeanNameProperty(this.member.getId())).append(",type=").append(MBeanUtil.makeCompliantMBeanNameProperty(getType())).append(",name=").append(MBeanUtil.makeCompliantMBeanNameProperty(getName())).append(",uid=").append(getUniqueId()).toString();  this.objectName=MBeanUtil.createMBean(this,addDynamicAttributes(MBeanUtil.lookupManagedBean(this)));  AdminDistributedSystemJmxImpl sysJmx=(AdminDistributedSystemJmxImpl)this.member.getDistributedSystem();  if (sysJmx.getRefreshInterval() > 0)   this.refreshInterval=sysJmx.getRefreshInterval();}  }
class C{  public void end() throws IOException {  socket.close();}  }
class C{  private void unionEmail(String email1,String email2,Set union){  if (email1.indexOf('@') != -1) {    String _sub=email1.substring(email1.indexOf('@') + 1);    if (email2.indexOf('@') != -1) {      if (email1.equalsIgnoreCase(email2)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(_sub,email2)) {        union.add(email2);      } else {        union.add(email1);        union.add(email2);      }    } else {      if (_sub.equalsIgnoreCase(email2)) {        union.add(email2);      } else {        union.add(email1);        union.add(email2);      }    }  } else   if (email1.startsWith(".")) {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email1.indexOf('@') + 1);      if (withinDomain(_sub,email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2) || email1.equalsIgnoreCase(email2)) {        union.add(email2);      } else       if (withinDomain(email2,email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else {      if (withinDomain(email2,email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    }  } else {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email1.indexOf('@') + 1);      if (_sub.equalsIgnoreCase(email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2)) {        union.add(email2);      } else {        union.add(email1);        union.add(email2);      }    } else {      if (email1.equalsIgnoreCase(email2)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    }  }}  }
class C{  public static Object call2(Callable fun,Scriptable thisObj,Object arg0,Object arg1,Context cx,Scriptable scope){  return fun.call(cx,scope,thisObj,new Object[]{arg0,arg1});}  }
class C{  private static File[] findFiles(String fileName,String path,boolean isDirectory){  File projectRootFolder=null;  if (path != null) {    File pathFile=new File(path);    if (pathFile.isAbsolute() || pathFile.isDirectory()) {      projectRootFolder=pathFile;    } else {      projectRootFolder=new File(DEPLOYED_CONFIG_ROOT,path);    }  } else {    projectRootFolder=new File(DEPLOYED_CONFIG_ROOT);  }  ArrayList<File> locatedFiles=new ArrayList<File>();  locateFiles(fileName,locatedFiles,projectRootFolder,false,isDirectory);  if (locatedFiles.size() == 0) {    try {      Enumeration<URL> enumeration=FileLocator.class.getClassLoader().getResources(fileName);      while (enumeration.hasMoreElements()) {        locatedFiles.add(new File(enumeration.nextElement().getFile()));      }    } catch (    IOException e) {      LOGGER.error("Unable to locate files that match: " + fileName,e);    }  }  return (File[])locatedFiles.toArray(new File[locatedFiles.size()]);}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  @Override public synchronized void configure() throws ReplicatorException, InterruptedException {  super.configure();}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y){  insertBitmap(bitmap,x,y,-1);}  }
class C{  private void createRasterProgram() throws IOException {  int program=glCreateProgram();  int vshader=createShader("org/lwjgl/demo/opengl/raytracing/raster.vs",GL_VERTEX_SHADER);  int fshader=createShader("org/lwjgl/demo/opengl/raytracing/raster.fs",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertexPosition");  glBindAttribLocation(program,1,"vertexNormal");  glBindFragDataLocation(program,0,"worldPosition_out");  glBindFragDataLocation(program,1,"worldNormal_out");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.rasterProgram=program;}  }
class C{  private static void checkUpdate(){  System.out.println("Checking update...");  Planet p1=new Planet(1.0,1.0,3.0,4.0,5.0,"jupiter.gif");  p1.update(2.0,1.0,-0.5);  checkEquals(7.8,p1.xxPos,"update()",0.01);  checkEquals(8.6,p1.yyPos,"update()",0.01);  checkEquals(3.4,p1.xxVel,"update()",0.01);  checkEquals(3.8,p1.yyVel,"update()",0.01);}  }
class C{  private double norm(double x,int i){  if (Double.isNaN(m_Min[i]) || Utils.eq(m_Max[i],m_Min[i])) {    return 0;  } else {    return (x - m_Min[i]) / (m_Max[i] - m_Min[i]);  }}  }
class C{  public PredictiveInfoCalculatorKraskov(int algorithm) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(algorithm == 1 ? MI_CALCULATOR_KRASKOV1 : MI_CALCULATOR_KRASKOV2);  if ((algorithm != 1) && (algorithm != 2)) {    throw new ClassNotFoundException("Algorithm must be 1 or 2");  }}  }
class C{  @Override public Request<BuilderStatus> cancel(ProjectReference projectReference,long taskId){  checkNotNull(projectReference);  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("cancel").path(String.valueOf(taskId)).request().accept(APPLICATION_JSON).buildGet();  return new SimpleRequest<BuilderStatus>(request,DefaultBuilderStatus.class,getAuthenticationManager());}  }
class C{  private static String normalizePath(final String path){  return path.replace("%7E","~").replace(" ","%20");}  }
class C{  public File dataFile(String path){  if (dataDir == null) {    throw new IllegalStateException("No data dir has been configured yet");  }  File f=new File(dataDir,path);  assureParentExists(f);  return f;}  }
class C{  public <T>Flag registerOptional(final Character nameChar,final String name,final Class<T> type,final String usage,final String description,final T defaultValue){  return register(new Flag(nameChar,name,description,0,1,type,usage,defaultValue,""));}  }
class C{  void placeAtFirstPossiblePosition(final IGroupMemberNode node,final Set<IVariable<?>> additionalKnownBound,final boolean requiresAllBound){  placeAtPosition(node,getFirstPossiblePosition(node,additionalKnownBound,requiresAllBound));  definitelyProduced.addAll(bindingInfoMap.get(node).getDefinitelyProduced());}  }
class C{  public String buildCommandLine(SBJob job,File workingDir,FilePathMapper filePathMapper) throws BindingException {  SBCommandLineTool commandLineTool=(SBCommandLineTool)job.getApp();  List<Object> commandLineParts=buildCommandLineParts(job,workingDir,filePathMapper);  StringBuilder builder=new StringBuilder();  for (  Object commandLinePart : commandLineParts) {    builder.append(commandLinePart).append(PART_SEPARATOR);  }  String stdin=null;  try {    stdin=commandLineTool.getStdin(job);  } catch (  SBExpressionException e) {    logger.error("Failed to extract standard input.",e);    throw new BindingException("Failed to extract standard input.",e);  }  if (!StringUtils.isEmpty(stdin)) {    builder.append(PART_SEPARATOR).append("<").append(PART_SEPARATOR).append(stdin);  }  String stdout=null;  try {    stdout=commandLineTool.getStdout(job);  } catch (  SBExpressionException e) {    logger.error("Failed to extract standard output.",e);    throw new BindingException("Failed to extract standard outputs.",e);  }  if (!StringUtils.isEmpty(stdout)) {    builder.append(PART_SEPARATOR).append(">").append(PART_SEPARATOR).append(stdout);  }  String commandLine=normalizeCommandLine(builder.toString());  logger.info("Command line built. CommandLine = {}",commandLine);  return commandLine;}  }
class C{  @Override public UpdateResponse deleteByQuery(String query) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.deleteByQuery(query);  if (this.solr1 != null)   ur=this.solr1.deleteByQuery(query);  return ur;}  }
class C{  public String nextCDATA() throws JSONException {  char c;  int i;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=next();    if (end()) {      throw syntaxError("Unclosed CDATA");    }    sb.append(c);    i=sb.length() - 3;    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {      sb.setLength(i);      return sb.toString();    }  }}  }
class C{  public static void initMap(ExtendableMap map){  map.clear();  map.addBidirectionalLink(ORADEA,ZERIND,71.0);  map.addBidirectionalLink(ORADEA,SIBIU,151.0);  map.addBidirectionalLink(ZERIND,ARAD,75.0);  map.addBidirectionalLink(ARAD,TIMISOARA,118.0);  map.addBidirectionalLink(ARAD,SIBIU,140.0);  map.addBidirectionalLink(TIMISOARA,LUGOJ,111.0);  map.addBidirectionalLink(LUGOJ,MEHADIA,70.0);  map.addBidirectionalLink(MEHADIA,DOBRETA,75.0);  map.addBidirectionalLink(DOBRETA,CRAIOVA,120.0);  map.addBidirectionalLink(SIBIU,FAGARAS,99.0);  map.addBidirectionalLink(SIBIU,RIMNICU_VILCEA,80.0);  map.addBidirectionalLink(RIMNICU_VILCEA,PITESTI,97.0);  map.addBidirectionalLink(RIMNICU_VILCEA,CRAIOVA,146.0);  map.addBidirectionalLink(CRAIOVA,PITESTI,138.0);  map.addBidirectionalLink(FAGARAS,BUCHAREST,211.0);  map.addBidirectionalLink(PITESTI,BUCHAREST,101.0);  map.addBidirectionalLink(GIURGIU,BUCHAREST,90.0);  map.addBidirectionalLink(BUCHAREST,URZICENI,85.0);  map.addBidirectionalLink(NEAMT,IASI,87.0);  map.addBidirectionalLink(URZICENI,VASLUI,142.0);  map.addBidirectionalLink(URZICENI,HIRSOVA,98.0);  map.addBidirectionalLink(IASI,VASLUI,92.0);  map.addBidirectionalLink(HIRSOVA,EFORIE,86.0);  map.setDistAndDirToRefLocation(ARAD,366,117);  map.setDistAndDirToRefLocation(BUCHAREST,0,360);  map.setDistAndDirToRefLocation(CRAIOVA,160,74);  map.setDistAndDirToRefLocation(DOBRETA,242,82);  map.setDistAndDirToRefLocation(EFORIE,161,282);  map.setDistAndDirToRefLocation(FAGARAS,176,142);  map.setDistAndDirToRefLocation(GIURGIU,77,25);  map.setDistAndDirToRefLocation(HIRSOVA,151,260);  map.setDistAndDirToRefLocation(IASI,226,202);  map.setDistAndDirToRefLocation(LUGOJ,244,102);  map.setDistAndDirToRefLocation(MEHADIA,241,92);  map.setDistAndDirToRefLocation(NEAMT,234,181);  map.setDistAndDirToRefLocation(ORADEA,380,131);  map.setDistAndDirToRefLocation(PITESTI,100,116);  map.setDistAndDirToRefLocation(RIMNICU_VILCEA,193,115);  map.setDistAndDirToRefLocation(SIBIU,253,123);  map.setDistAndDirToRefLocation(TIMISOARA,329,105);  map.setDistAndDirToRefLocation(URZICENI,80,247);  map.setDistAndDirToRefLocation(VASLUI,199,222);  map.setDistAndDirToRefLocation(ZERIND,374,125);}  }
class C{  public Composer reboundLeft(boolean reboundLeft){  mReboundLeft=reboundLeft;  return this;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public void afterLast(){  currentIndex=bindingSets.size() + 1;}  }
class C{  public ShapeData(DrawContext dc,RadarVolume shape){  super(dc,shape.minExpiryTime,shape.maxExpiryTime);}  }
class C{  public void fail(String errorMessage){  TestUtils.fail(errorMessage);}  }
class C{  public void transitionTo(int state){  mTaskQueue.offer(Task.obtainTask(Task.CODE_TRANSITION,null,state));  if (!mQueueProcessed)   processTaskQueue();}  }
class C{  public GenericAttr(CP name,byte data[]){  attr_name=name;  this.data=data;}  }
class C{  public ReadMEIResponse(){  super();  setFunctionCode(Modbus.READ_MEI);}  }
class C{  public void animateToVideoStop(int resId){  if (mOverLayBottomBar && mAnimatedCircleDrawable != null) {    mAnimatedCircleDrawable.animateToSmallRadius();    mDrawCircle=true;  }  TransitionDrawable transitionDrawable=crossfadeDrawable(mShutterButton.getDrawable(),getResources().getDrawable(resId));  mShutterButton.setImageDrawable(transitionDrawable);  transitionDrawable.startTransition(CIRCLE_ANIM_DURATION_MS);}  }
class C{  public CharBuffer insert(int offset,float f){  return insert(offset,String.valueOf(f));}  }
class C{  public boolean deleteCount(Link link,int h){  Count<Link> c=counts.getCount(link.getId());  if (c == null)   return false;  if (c.getVolume(h) == null)   return false;  c.getVolumes().remove(h);  return true;}  }
class C{  public synchronized static String formatLocal(long gmtTime,String format){  _localDate.setGMTTime(gmtTime);  return _localDate.format(new CharBuffer(),format).toString();}  }
class C{  protected void sayByeWhileInQuestion1(){  concreteQuest.getNPC().add(ConversationStates.QUESTION_1,ConversationPhrases.GOODBYE_MESSAGES,null,ConversationStates.IDLE,"Bye.",null);}  }
class C{  public CMSSignedData generate(String eContentType,CMSProcessable content,boolean encapsulate,String sigProvider,boolean addDefaultAttributes) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return generate(eContentType,content,encapsulate,CMSUtils.getProvider(sigProvider),addDefaultAttributes);}  }
class C{  public static Drawable bitmapToDrawable(Bitmap b){  return b == null ? null : new BitmapDrawable(b);}  }
class C{  public static String removeSubstring(String inString,String substring){  StringBuffer result=new StringBuffer();  int oldLoc=0, loc=0;  while ((loc=inString.indexOf(substring,oldLoc)) != -1) {    result.append(inString.substring(oldLoc,loc));    oldLoc=loc + substring.length();  }  result.append(inString.substring(oldLoc));  return result.toString();}  }
class C{  @Override public void applyChanges(){  if (changed) {    changed=false;    update();  }}  }
class C{  @Override public int size(){  int locations=0;  for (  final Locations service : this.services.values()) {    locations+=service.size();  }  return locations;}  }
class C{  public void maskPassword(Parameter parameter){  if (parameter.getName() != null) {    String name=parameter.getName().toUpperCase();    if (name.contains("PASSWORD")) {      parameter.setValue("****");    }  }}  }
class C{  private void definition(Detail detail) throws Exception {  if (root == null) {    root=detail.getRoot();  }  if (order == null) {    order=detail.getOrder();  }}  }
class C{  public Weeks minus(int weeks){  return plus(FieldUtils.safeNegate(weeks));}  }
class C{  public void sendChangeCollectionRequest(final String variable,final List<String> childList,final String value){  final StringBuilder requestJson=new StringBuilder();  requestJson.append("{\"" + variable + "\":[");  for (int i=0; i < childList.size(); i++) {    requestJson.append("\"" + childList.get(i) + "\",");  }  requestJson.append("\"" + value + "\"]}");  sendEventToAgent(requestJson.toString());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns06.class,args);}  }
class C{  protected void filter(final IBindingSet[] a){  for (  IBindingSet bset : a) {    if (bset == null)     throw new IllegalArgumentException();    nsolutions++;    currentVars.clear();{      @SuppressWarnings("rawtypes") final Iterator<IVariable> vitr=bset.vars();      while (vitr.hasNext()) {        final IVariable<?> v=vitr.next();        if (usedVars.add(v) && nsolutions > 1) {          notAlwaysBound.add(v);        }        currentVars.add(v);        @SuppressWarnings("unchecked") final IConstant<IV<?,?>> c=bset.get(v);        if (nsolutions == 1) {          firstBoundValue.put(v,c);        } else {          if (!notConstant.contains(v)) {            final IConstant<?> c2=firstBoundValue.get(v);            if (c2 == null || !c2.equals(c)) {              notConstant.add(v);            }          }        }        if (!notMaterialized.contains(v)) {          if (c != null) {            final IV<?,?> iv=c.get();            if (!iv.hasValue()) {              notMaterialized.add(v);            }          }        }      }    }    notBoundThisSolution.clear();    notBoundThisSolution.addAll(usedVars);    notBoundThisSolution.removeAll(currentVars);    notAlwaysBound.addAll(notBoundThisSolution);    notConstant.addAll(notBoundThisSolution);  }}  }
class C{  private void paintAttack(Graphics g,AttackAction attack){  Entity source=m_game.getEntity(attack.getEntityId());  Targetable target=m_game.getTarget(attack.getTargetType(),attack.getTargetId());  if ((null == source) || (null == target)) {    return;  }  if (attack.getTargetType() == Targetable.TYPE_INARC_POD) {    return;  }  if (attack instanceof WeaponAttackAction) {    WeaponAttackAction waa=(WeaponAttackAction)attack;    if ((attack.getTargetType() == Targetable.TYPE_HEX_ARTILLERY) && (waa.getEntity(m_game).getOwner().getId() != m_client.getLocalPlayer().getId())) {      return;    }  }  Color oldColor=g.getColor();  int[] xPoints=new int[4];  int[] yPoints=new int[4];  xPoints[0]=((source.getPosition().getX() * (hexSide[zoom] + hexSideBySin30[zoom])) + leftMargin + ((int)1.5 * hexSide[zoom])) - 2;  yPoints[0]=(((2 * source.getPosition().getY()) + 1 + (source.getPosition().getX() % 2)) * hexSideByCos30[zoom]) + topMargin;  xPoints[1]=((target.getPosition().getX() * (hexSide[zoom] + hexSideBySin30[zoom])) + leftMargin + ((int)1.5 * hexSide[zoom])) - 2;  yPoints[1]=(((2 * target.getPosition().getY()) + 1 + (target.getPosition().getX() % 2)) * hexSideByCos30[zoom]) + topMargin;  xPoints[2]=xPoints[1] + 2;  xPoints[3]=xPoints[0] + 2;  if (((source.getPosition().getX() > target.getPosition().getX()) && (source.getPosition().getY() < target.getPosition().getY())) || ((source.getPosition().getX() < target.getPosition().getX()) && (source.getPosition().getY() > target.getPosition().getY()))) {    yPoints[3]=yPoints[0] + 2;    yPoints[2]=yPoints[1] + 2;  } else {    yPoints[3]=yPoints[0] - 2;    yPoints[2]=yPoints[1] - 2;  }  g.setColor(PlayerColors.getColor(source.getOwner().getColorIndex()));  g.fillPolygon(xPoints,yPoints,4);  g.setColor(Color.black);  g.drawPolygon(xPoints,yPoints,4);  for (Enumeration<EntityAction> iter=m_game.getActions(); iter.hasMoreElements(); ) {    EntityAction action=iter.nextElement();    if (action instanceof AttackAction) {      AttackAction otherAttack=(AttackAction)action;      if ((attack.getEntityId() == otherAttack.getTargetId()) && (otherAttack.getEntityId() == attack.getTargetId())) {        Entity attackTarget=m_game.getEntity(otherAttack.getEntityId());        g.setColor(PlayerColors.getColor(attackTarget.getOwner().getColorIndex()));        xPoints[0]=xPoints[3];        yPoints[0]=yPoints[3];        xPoints[1]=xPoints[2];        yPoints[1]=yPoints[2];        xPoints[2]=xPoints[1] + 2;        xPoints[3]=xPoints[0] + 2;        if (((source.getPosition().getX() > target.getPosition().getX()) && (source.getPosition().getY() < target.getPosition().getY())) || ((source.getPosition().getX() < target.getPosition().getX()) && (source.getPosition().getY() > target.getPosition().getY()))) {          yPoints[3]=yPoints[0] + 2;          yPoints[2]=yPoints[1] + 2;        } else {          yPoints[3]=yPoints[0] - 2;          yPoints[2]=yPoints[1] - 2;        }        g.fillPolygon(xPoints,yPoints,4);        g.setColor(Color.black);        g.drawPolygon(xPoints,yPoints,4);        break;      }    }  }  g.setColor(oldColor);}  }
class C{  public boolean isFieldSeparatorAtEnd(){  return super.isFieldSeparatorAtEnd();}  }
class C{  public boolean contains(double val){  return index(val) >= 0;}  }
class C{  public static synchronized void it(String description,Function<ExampleConfiguration.Builder,ExampleConfiguration.Builder> collector,UnsafeBlock block){  isValidContext("it");  ExampleConfiguration config=collector.apply(new ExampleConfiguration.Builder()).description(description).executionFlag(DEFAULT).build();  contexts.get().current().addExample(config,block);}  }
class C{  private void staticInit() throws Exception {  this.getContentPane().add(mainPanel);  historyText.setPreferredSize(new Dimension(350,300));  historyText.setReadWrite(false);  historyText.setMargin(new Insets(2,2,2,2));  newText.setPreferredSize(new Dimension(350,200));  newText.setMargin(new Insets(2,2,2,2));  JSplitPane textPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,historyText,newText);  mainPanel.add(textPane,BorderLayout.CENTER);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case BasePackage.NAMED_ELEMENT__NAME:    setName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public synchronized long skip(long n){  if (n < 0) {    return 0;  }  if (n > count - pos) {    n=count - pos;  }  pos+=n;  return n;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.045 -0500",hash_original_method="8E8D9564EE0B9256E101864557DD238B",hash_generated_method="A1B021345B0502A87394E4382A6C7523") private int read(byte[] buffer,int offset,int byteCount) throws IOException {  if (byteCount == 0) {    return 0;  }  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (shutdownInput) {    return -1;  }  int readCount=IoBridge.recvfrom(true,fd,buffer,offset,byteCount,0,null,false);  if (readCount == 0) {    throw new SocketTimeoutException();  }  if (readCount == -1) {    shutdownInput=true;  }  return readCount;}  }
class C{  public static <E>Set<E> synchronizedSet(Set<E> set){  if (set == null) {    throw new NullPointerException();  }  return new SynchronizedSet<E>(set);}  }
class C{  public T caseEnumPropertySource(EnumPropertySource object){  return null;}  }
class C{  public static List<RawTypeInstance> loadRawTypeInstances(final Connection connection,final INaviModule module) throws CouldntLoadDataException {  final List<RawTypeInstance> instances=new ArrayList<RawTypeInstance>();  try {    final String query="SELECT * FROM load_type_instances(?)";    final PreparedStatement statement=connection.prepareStatement(query);    statement.setInt(1,module.getConfiguration().getId());    try {      final ResultSet result=statement.executeQuery();      while (result.next()) {        final int id=result.getInt("id");        final String name=result.getString("name");        Integer commentId=result.getInt("comment_id");        if (result.wasNull()) {          commentId=null;        }        final int typeId=result.getInt("type_id");        final int sectionId=result.getInt("section_id");        final long sectionOffset=result.getLong("section_offset");        instances.add(new RawTypeInstance(module.getConfiguration().getId(),id,name,commentId,typeId,sectionId,sectionOffset));      }    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }  return instances;}  }
class C{  void convertExportAssignment(Node assign,String exportedNamespace,String exportedSymbol,String fileName){  checkState(assign.isAssign());  checkState(assign.getParent().isExprResult());  Node exprNode=assign.getParent();  Node lhs=assign.getFirstChild();  Node rhs=assign.getLastChild();  JSDocInfo jsDoc=NodeUtil.getBestJSDocInfo(assign);  ExportedSymbol symbolToExport=ExportedSymbol.fromExportAssignment(rhs,exportedNamespace,exportedSymbol,fileName);  if (exportedNamespace.equals(lhs.getQualifiedName())) {    rhs.detachFromParent();    Node exportSpecNode;    if (rhs.isName() && exportsToNodes.containsKey(symbolToExport)) {      Node namedNode=exportsToNodes.get(symbolToExport);      Node next=namedNode.getNext();      Node parent=namedNode.getParent();      namedNode.detachFromParent();      Node export=new Node(Token.EXPR_RESULT,new Node(Token.EXPORT,namedNode));      nodeComments.moveComment(namedNode,export);      parent.addChildBefore(export,next);      exprNode.detachFromParent();      compiler.reportCodeChange();      return;    } else     if (rhs.isName() && exportedSymbol.equals(rhs.getString())) {      exportSpecNode=new Node(Token.EXPORT_SPECS,new Node(Token.EXPORT_SPEC,rhs));    } else {      exportSpecNode=IR.constNode(IR.name(exportedSymbol),rhs);    }    exportSpecNode.setJSDocInfo(jsDoc);    Node exportNode=new Node(Token.EXPORT,exportSpecNode);    nodeComments.replaceWithComment(exprNode,exportNode);  } else {    nameUtil.replacePrefixInName(lhs,exportedNamespace,exportedSymbol);  }  compiler.reportCodeChange();}  }
class C{  public static boolean compare(final Double me,final Double you){  if (me == you) {    return true;  }  if (me == null) {    return false;  }  return me.equals(you);}  }
class C{  public static NERAnnotator buildNerAnnotator(String nonDefaultConfig,String viewName) throws IOException {  return NerAnnotatorManager.buildNerAnnotator(new ResourceManager(nonDefaultConfig),viewName);}  }
class C{  protected void fireSwitchEvent(ChangeEvent evt){  Object[] listeners=listenerList.getListenerList();  for (int i=0; i < listeners.length; i+=2) {    if (listeners[i] == ChangeListener.class) {      ((ChangeListener)listeners[i + 1]).stateChanged(evt);    }  }}  }
class C{  public void init(){  Objects.requireNonNull(_os);  _state=StateJsonOut.FIRST;}  }
class C{  public void messageReceived(String message){  if (message.startsWith("$GPGGA")) {    String[] mparts=message.split(",");    if (mparts.length != 15)     return;    boolean posOK=true;    float lat;    float lon;    if (mparts[6].equals("0"))     posOK=false;    float deg=Float.parseFloat(mparts[2].substring(0,2));    float min=Float.parseFloat(mparts[2].substring(2));    lat=deg + min / 60.0f;    if (mparts[3].equals("S"))     lat=-lat;    deg=Float.parseFloat(mparts[4].substring(0,3));    min=Float.parseFloat(mparts[4].substring(3));    lon=deg + min / 60.0f;    if (mparts[5].equals("W"))     lon=-lon;    currPosition=new GpsFix(posOK,lat,lon);    for (    GpsPositionListener listener : listeners)     listener.positionUpdated(currPosition);  }}  }
class C{  static String to_String(final Bytes bytes){  return to_String(bytes.toArray());}  }
class C{  private boolean drawLines(AreaPanelSpaceTimeBox apStBox,int minDepth){  if (1 == 1)   return false;  Log.d(GTG.TAG,"vn drawLines ----");  boolean removedLines=false;  for (Iterator<Entry<Integer,ViewLine>> i=GTG.cacheCreator.startTimeToViewLine.entrySet().iterator(); i.hasNext(); ) {    Entry<Integer,ViewLine> e=i.next();    ViewLine vl=e.getValue();    if (vl.endTimeSec > apStBox.minZ && vl.startTimeSec < apStBox.maxZ) {      AreaPanel priorAp=vl.getStartAp();      if (priorAp.getDepth() == minDepth) {        AreaPanel nextAp=vl.getEndAp();        if (apStBox.contains(priorAp.getX(),priorAp.getY()) || apStBox.contains(nextAp.getX(),nextAp.getY())) {          drawLine(priorAp,nextAp,apStBox);          continue;        }      }    }    i.remove();    GTG.cacheCreator.endTimeToViewLine.remove(vl.endTimeSec);    removedLines=true;  }  return removedLines;}  }
class C{  static final String formatForSource(String s){  return formatForSource(s,"        ");}  }
class C{  public UTMGCT(){}  }
class C{  public <R>R doTransactionless(Work<R> work){  try {    com.googlecode.objectify.ObjectifyService.push(com.googlecode.objectify.ObjectifyService.ofy().transactionless());    return work.run();  }  finally {    com.googlecode.objectify.ObjectifyService.pop();  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public void acquireReadLock(){  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(ACQUIRE_TEXT + " read ",lock);  }  lock.readLock().lock();  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(ACQUIRED_TEXT + " read ",lock);  }}  }
class C{  public void addSequence(final Array datum){  for (int i=0; i < datum.size(); i++) {    add(datum.get(i));  }}  }
class C{  private static void cleanupNativeFolder(){  if (ReleaseInfo.isSvnBuild()) {    return;  }  try {    File[] nativeFiles=new File("native").listFiles();    if (nativeFiles == null) {      return;    }    for (    File file : nativeFiles) {      if (!file.isDirectory()) {        continue;      }      if (Platform.isWindows() && !"windows-x86".equals(file.getName()) && !"windows-x64".equals(file.getName())) {        FileUtils.deleteQuietly(file);      } else       if (Platform.isLinux() && !"linux-x86".equals(file.getName()) && !"linux-x64".equals(file.getName())) {        FileUtils.deleteQuietly(file);      } else       if (Platform.isMac() && !"mac-x86".equals(file.getName()) && !"mac-x64".equals(file.getName())) {        FileUtils.deleteQuietly(file);      }    }  } catch (  Exception e) {    LOGGER.warn("failed to cleanup native folder: " + e.getMessage());  }}  }
class C{  public ServiceParameterException(){  super();}  }
class C{  private void importTracks(TrackFileFormat trackFileFormat){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_import_all),true);  EndToEndTestUtils.SOLO.clickOnText(trackFileFormat.name());  EndToEndTestUtils.getButtonOnScreen(EndToEndTestUtils.trackListActivity.getString(R.string.generic_ok),true,true);}  }
class C{  protected BusinessObjectDataAttribute updateBusinessObjectDataAttributeImpl(BusinessObjectDataAttributeKey businessObjectDataAttributeKey,BusinessObjectDataAttributeUpdateRequest request){  businessObjectDataAttributeHelper.validateBusinessObjectDataAttributeKey(businessObjectDataAttributeKey);  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(new BusinessObjectFormatKey(businessObjectDataAttributeKey.getNamespace(),businessObjectDataAttributeKey.getBusinessObjectDefinitionName(),businessObjectDataAttributeKey.getBusinessObjectFormatUsage(),businessObjectDataAttributeKey.getBusinessObjectFormatFileType(),businessObjectDataAttributeKey.getBusinessObjectFormatVersion()));  if (businessObjectDataAttributeHelper.isBusinessObjectDataAttributeRequired(businessObjectDataAttributeKey.getBusinessObjectDataAttributeName(),businessObjectFormatEntity)) {    Assert.hasText(request.getBusinessObjectDataAttributeValue(),String.format("A business object data attribute value must be specified since \"%s\" is a required attribute for business object format {%s}.",businessObjectDataAttributeKey.getBusinessObjectDataAttributeName(),businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(businessObjectFormatEntity)));  }  BusinessObjectDataAttributeEntity businessObjectDataAttributeEntity=businessObjectDataAttributeDaoHelper.getBusinessObjectDataAttributeEntity(businessObjectDataAttributeKey);  businessObjectDataAttributeEntity.setValue(request.getBusinessObjectDataAttributeValue());  businessObjectDataAttributeEntity=businessObjectDataAttributeDao.saveAndRefresh(businessObjectDataAttributeEntity);  return createBusinessObjectDataAttributeFromEntity(businessObjectDataAttributeEntity);}  }
class C{  private void showDialogIfNeeded(Bundle savedInstanceState){  if (getIntent().getBooleanExtra(IconColorReceiver.EXTRA_ICON_COLOR_CHANGED,false)) {    getIntent().putExtra(IconColorReceiver.EXTRA_ICON_COLOR_CHANGED,false);    ImageView imageView=new ImageView(this);    PackageManager manager=getPackageManager();    try {      ComponentInfo info=manager.getActivityInfo(getComponentName(),0);      imageView.setImageDrawable(ContextCompat.getDrawable(getBaseContext(),info.getIconResource()));    } catch (    PackageManager.NameNotFoundException ignored) {    }    new QKDialog().setContext(this).setTitle(getString(R.string.icon_ready)).setMessage(R.string.icon_ready_message).setCustomView(imageView).setPositiveButton(R.string.okay,null).show();  } else   if (!wasMmsSetupFragmentDismissed(savedInstanceState)) {    beginMmsSetup();  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public DLSet(){}  }
class C{  @Override public void run(){  amIActive=true;  try {    int i, j, progress, oldProgress;    ShapeFileRecord rec;    com.vividsolutions.jts.geom.Geometry jtsGeom;    com.vividsolutions.jts.geom.Geometry[] geomArray;    List<com.vividsolutions.jts.geom.Geometry> geomList=new ArrayList<>();    GeometryFactory factory=new GeometryFactory();    if (args.length != 3) {      showFeedback("Incorrect number of arguments given to tool.");      return;    }    String inputFile=args[0];    String clipFile=args[1];    String outputFile=args[2];    ShapeFile input=new ShapeFile(inputFile);    ShapeType shapeType=input.getShapeType().getBaseType();    ShapeFile clipRegion=new ShapeFile(clipFile);    if (clipRegion.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input clip shapefile must be of a POLYGON base ShapeType.");      return;    }    numFeatures=input.getNumberOfRecords();    AttributeTable table=input.getAttributeTable();    DBFField[] fields=table.getAllFields();    ShapeFile output=new ShapeFile(outputFile,shapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    int numClipFeatures=clipRegion.getNumberOfRecords();    BoundingBox[] clipBoxes=new BoundingBox[numClipFeatures];    for (i=0; i < numClipFeatures; i++) {      rec=clipRegion.getRecord(i);      clipBoxes[i]=rec.getGeometry().getBox();      geomArray=rec.getGeometry().getJTSGeometries();      for (int k=0; k < geomArray.length; k++) {        geomList.add(geomArray[k]);      }    }    com.vividsolutions.jts.geom.Geometry clipGeom=factory.buildGeometry(geomList);    if (!clipGeom.isValid()) {      com.vividsolutions.jts.geom.Geometry jtsGeom2=clipGeom.buffer(0d);      clipGeom=(com.vividsolutions.jts.geom.Geometry)jtsGeom2.clone();    }    ArrayList<DoWork> tasks=new ArrayList<>();    int numProcessors=Runtime.getRuntime().availableProcessors();    ExecutorService executor=Executors.newFixedThreadPool(numProcessors);    oldProgress=-1;    for (i=0; i < numFeatures; i++) {      rec=input.getRecord(i);      BoundingBox box=rec.getGeometry().getBox();      boolean isContained=false;      for (j=0; j < numClipFeatures; j++) {        if (clipBoxes[j].overlaps(box)) {          isContained=true;          break;        }      }      if (isContained) {        geomArray=rec.getGeometry().getJTSGeometries();        geomList.clear();        geomList.addAll(Arrays.asList(geomArray));        jtsGeom=factory.buildGeometry(geomList);        tasks.add(new DoWork(i,jtsGeom,clipGeom,shapeType));      }      progress=(int)(100f * i / (numFeatures - 1));      if (progress != oldProgress) {        updateProgress("Loop 1 of 2:",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    List<Future<WorkData>> results=executor.invokeAll(tasks);    executor.shutdown();    oldProgress=-1;    i=0;    for (    Future<WorkData> result : results) {      WorkData data=result.get();      int recNum=data.recordNum;      List<whitebox.geospatialfiles.shapefile.Geometry> wbGeometries=data.wbGeometries;      for (      whitebox.geospatialfiles.shapefile.Geometry geom : wbGeometries) {        Object[] rowData=table.getRecord(recNum);        output.addRecord(geom,rowData);      }      i++;      progress=(int)(100f * i / (numFeatures - 1));      if (progress != oldProgress) {        updateProgress("Writing Output:",progress);        oldProgress=progress;        if (cancelOp) {          if (!cancelOpMessagePlayed) {            showFeedback("Operation cancelled");          }          return;        }      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testInputOpen() throws Exception {  File f=initFile("testInputOpen");  FileOutputStream fos=new FileOutputStream(f);  fos.close();  BufferedFileDataInput bfdi=new BufferedFileDataInput(f);  assertEquals("Should be at offset 0",0,bfdi.getOffset());  bfdi.close();}  }
class C{  public void testToBigIntegerPos1(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigInteger bNumber=new BigInteger("123809648392384754573567356745735635678902957849027687");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  private static FileTime creationTime(Path file) throws IOException {  return Files.readAttributes(file,BasicFileAttributes.class).creationTime();}  }
class C{  private static void removeInvalidPools(VirtualPool vpool,StringSet newInvalidPools,String poolIdStr){  if (null != vpool.getInvalidMatchedPools() && vpool.getInvalidMatchedPools().contains(poolIdStr)) {    _logger.debug("Invalid Pool {} became active now.",poolIdStr);    newInvalidPools.remove(poolIdStr);  }}  }
class C{  public void sendBack(final WorkflowAnnotation anno){  if (anno == null) {    throw new IllegalArgumentException("anno must not be null!");  }  model.getProcessAnnotations(anno.getProcess()).sendBack(anno);  fireProcessUpdate(anno);  model.fireAnnotationMiscChanged(anno);}  }
class C{  public Time(){  super("time",TextTemplateMessages.MESSAGES.variableDescriptionTime());}  }
class C{  public boolean isPaused(){  return false;}  }
class C{  private PaginationContext(Integer pageAsked,Integer itemsPerPage){  if (pageAsked != null)   this.pageAsked=pageAsked;  if (itemsPerPage != null)   this.itemsPerPage=itemsPerPage;}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKeyString02() throws Exception {  boolean performed=false;  for (int i=0; i < algName.length; i++) {    for (int l=0; l < provider.length; l++) {      if (provider[l] == null) {        continue;      }      TestDataGenerator g;      try {        g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfoDamaged,provider[l]);      } catch (      TestDataGenerator.AllowedFailure allowedFailure) {        continue;      }      try {        EncryptedPrivateKeyInfo epki;        if (g.ap() == null) {          epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());        } else {          epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());        }        try {          epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK(),provider[l].getName());          fail(algName[i][0] + ", " + algName[i][1]);        } catch (        InvalidKeyException e) {        }        performed=true;      } catch (      NoSuchAlgorithmException allowedFailure) {      }    }  }  assertTrue("Test not performed",performed);}  }
class C{  public boolean isNXRRSET(){  return (type == NXRRSET);}  }
class C{  public static void writeJSONString(Collection collection,Writer out) throws IOException {  if (collection == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=collection.iterator();  out.write('[');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Object value=iter.next();    if (value == null) {      out.write("null");      continue;    }    JSONValue.writeJSONString(value,out);  }  out.write(']');}  }
class C{  public boolean isShowCustomTextGridX(){  return mShowCustomTextGridX;}  }
class C{  public static <A>MonoTSeq<A> of(final Mono<A> mono){  return MonoT.fromIterable(ListX.of(mono));}  }
class C{  public Boolean isD5On(){  return this.isDigitalOn(5);}  }
class C{  @Override public String toString(){  return "StoreMessageCommand [source=" + source + ", target="+ target+ ", message="+ message+ ", messagetype="+ messagetype+ ", accountName="+ accountName+ "]";}  }
class C{  private int increase(int[] p,int cnt){  return lc.isFlowX() ? (p[0]+=cnt) : (p[1]+=cnt);}  }
class C{  void replaceGetStringVariableArgs(StmtBody stmtBody,Stmt stmt){  if (stmt.getInvokeExpr() instanceof InstanceInvokeExpr) {    InstanceInvokeExpr iInvokeExpr=(InstanceInvokeExpr)stmt.getInvokeExpr();    Chain<Unit> units=stmtBody.getUnits();    List<ValueBox> defBoxList=stmt.getDefBoxes();    ValueBox callerObjectBox=iInvokeExpr.getBaseBox();    ValueBox idValueBox=iInvokeExpr.getArgBox(0);    ValueBox objArrayBox=iInvokeExpr.getArgBox(1);    ValueBox assignToBox=null;    Value objectArray=objArrayBox.getValue();    if (defBoxList != null && defBoxList.size() > 0)     assignToBox=defBoxList.get(0);    if (assignToBox == null) {      logger.warn("Cannot replace {} ",stmt);      AnalysisReport.v().addEntry("Could not replace resource getString() because non-constant argument.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    if (callerObjectBox == null || idValueBox == null) {      logger.warn("Couldnot get boxes for replacement ");      AnalysisReport.v().addEntry("Could not replace resource getString() because non-constant argument.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    Integer intId;    String stringId=idValueBox.getValue().toString();    try {      intId=new Integer(stringId);    } catch (    Exception ex) {      logger.info("Couldn't replace getString()  - {} NOT an integer constant",stringId);      AnalysisReport.v().addEntry("Could not replace resource getString() because cannot find resource.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    SootMethod getStringMethod=ResourcesSoot.v().addGetCharSequence_ID(intId);    if (getStringMethod == null) {      logger.warn("Could not replace {}, id={} ",stmt,String.format("%x",intId));      logger.warn("Class {} ",stmtBody.getMethod().getDeclaringClass());      AnalysisReport.v().addEntry("Could not replace resource getString() because cannot find resource.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    InvokeExpr invokeExpr=stmt.getInvokeExpr();    logger.debug("invokeExpr args {} ",invokeExpr.getArgs());    Object[] paramList=extractVariableArguments(stmtBody,stmt);    if (paramList == null) {      AnalysisReport.v().addEntry("Could not replace resource getString() because cannot find resource.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    String localStringName=String.format("_$%s%03d","localString",localStringIndex++);    Local localString=Jimple.v().newLocal(localStringName,RefType.v("java.lang.String"));    stmtBody.getLocals().add(localString);    Local localCond=Jimple.v().newLocal("_$localCond",BooleanType.v());    stmtBody.getLocals().add(localCond);    FieldRef fieldRef=Jimple.v().newStaticFieldRef(ResourcesSoot.v().getConditionField().makeRef());    units.insertBefore(Jimple.v().newAssignStmt(localCond,fieldRef),stmt);    ConditionExpr condExpr=Jimple.v().newEqExpr(localCond,IntConstant.v(0));    Stmt afterStmt=(Stmt)units.getSuccOf(stmt);    for (    String stringValue : ResourcesSoot.v().getStringValues(intId)) {      String resolvedString=null;      try {        resolvedString=String.format(stringValue,paramList);      } catch (      Exception ex) {        AnalysisReport.v().addEntry("Could not replace resource getString() because of unknown error.",stmt,AnalysisReport.Level.ELEVATED);        return;      }      Stmt ifStmt=Jimple.v().newIfStmt(condExpr,afterStmt);      units.insertBefore(ifStmt,stmt);      Stmt localAssign=Jimple.v().newAssignStmt(localString,StringConstant.v(resolvedString));      units.insertBefore(localAssign,stmt);    }    Stmt lookupStmt;    lookupStmt=Jimple.v().newAssignStmt(assignToBox.getValue(),localString);    logger.info("replaced {} ",stmt);    try {      units.swapWith(stmt,lookupStmt);      logger.info("replacing with {}, OK ",lookupStmt);    } catch (    Exception ex) {      logger.warn("replacing with {} => NOT OK",lookupStmt);      AnalysisReport.v().addEntry("Could not replace resource getString() because of unknown error.",stmt,AnalysisReport.Level.ELEVATED);    }  } else {    logger.warn("InvokeExpr in {} is not an InstanceInvokeExpr",stmt);    AnalysisReport.v().addEntry("Could not replace resource getString() because of unknown error.",stmt,AnalysisReport.Level.ELEVATED);  }}  }
class C{  public WWWAuthenticateHeader createWWWAuthenticateHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("null scheme");  WWWAuthenticate www=new WWWAuthenticate();  www.setScheme(scheme);  return www;}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  public static void main(String[] args){  (new Input()).run(args);}  }
class C{  public GF2Polynomial(int length,Random rand){  int l=length;  if (l < 1) {    l=1;  }  blocks=((l - 1) >> 5) + 1;  value=new int[blocks];  len=l;  randomize(rand);}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  try {    dynInit();    jbInit();    frame.getContentPane().add(panel,BorderLayout.CENTER);    frame.getContentPane().add(confirmPanel,BorderLayout.SOUTH);    m_frame.setIconImage(Env.getImage("Archive16.gif"));  } catch (  Exception e) {    log.log(Level.SEVERE,"init",e);  }}  }
class C{  public GenericObject first(){  return (NetObject)super.first();}  }
class C{  public Builder style(int style){  this.style=style;  return this;}  }
class C{  public static SecretKeys keys(String keysStr) throws InvalidKeyException {  String[] keysArr=keysStr.split(":");  if (keysArr.length != 2) {    throw new IllegalArgumentException("Cannot parse aesKey:hmacKey");  } else {    byte[] confidentialityKey=Base64.decode(keysArr[0],BASE64_FLAGS);    if (confidentialityKey.length != AES_KEY_LENGTH_BITS / 8) {      throw new InvalidKeyException("Base64 decoded key is not " + AES_KEY_LENGTH_BITS + " bytes");    }    byte[] integrityKey=Base64.decode(keysArr[1],BASE64_FLAGS);    if (integrityKey.length != HMAC_KEY_LENGTH_BITS / 8) {      throw new InvalidKeyException("Base64 decoded key is not " + HMAC_KEY_LENGTH_BITS + " bytes");    }    return new SecretKeys(new SecretKeySpec(confidentialityKey,0,confidentialityKey.length,CIPHER),new SecretKeySpec(integrityKey,HMAC_ALGORITHM));  }}  }
class C{  public void reset(int i){  int wd=i / 64;  if (wd >= this.word.length)   this.grow(wd);  int bit=i % 64;  this.word[wd]&=~(1L << bit);}  }
class C{  public void testCreateConfigurationWithNoProperties() throws Exception {  Configuration configuration=new Configuration();  configuration.setImplementation(StandaloneLocalConfigurationStub.class.getName());  configuration.setHome("/some/path");  configuration.createConfiguration("testcontainer",ContainerType.INSTALLED,null,null);}  }
class C{  public Instances applyCostMatrix(Instances data,Random random) throws Exception {  double sumOfWeightFactors=0, sumOfMissClassWeights, sumOfWeights;  double[] weightOfInstancesInClass, weightFactor, weightOfInstances;  if (data.classIndex() < 0) {    throw new Exception("Class index is not set!");  }  if (size() != data.numClasses()) {    throw new Exception("Misclassification cost matrix has wrong format!");  }  if (replaceStrings()) {    if (data.classAttribute().numValues() > 2) {      throw new Exception("Can't resample/reweight instances using " + "non-fixed cost values when there are more " + "than two classes!");    } else {      weightOfInstances=new double[data.numInstances()];      for (int i=0; i < data.numInstances(); i++) {        Instance inst=data.instance(i);        int classValIndex=(int)inst.classValue();        double factor=1.0;        Object element=(classValIndex == 0) ? getCell(classValIndex,1) : getCell(classValIndex,0);        if (element instanceof Double) {          factor=((Double)element).doubleValue();        } else {          factor=((AttributeExpression)element).evaluateExpression(inst);        }        weightOfInstances[i]=inst.weight() * factor;      }      if (random != null) {        return data.resampleWithWeights(random,weightOfInstances);      } else {        Instances instances=new Instances(data);        for (int i=0; i < data.numInstances(); i++) {          instances.instance(i).setWeight(weightOfInstances[i]);        }        return instances;      }    }  }  weightFactor=new double[data.numClasses()];  weightOfInstancesInClass=new double[data.numClasses()];  for (int j=0; j < data.numInstances(); j++) {    weightOfInstancesInClass[(int)data.instance(j).classValue()]+=data.instance(j).weight();  }  sumOfWeights=Utils.sum(weightOfInstancesInClass);  for (int i=0; i < m_size; i++) {    if (!Utils.eq(((Double)getCell(i,i)).doubleValue(),0)) {      CostMatrix normMatrix=new CostMatrix(this);      normMatrix.normalize();      return normMatrix.applyCostMatrix(data,random);    }  }  for (int i=0; i < data.numClasses(); i++) {    sumOfMissClassWeights=0;    for (int j=0; j < data.numClasses(); j++) {      if (Utils.sm(((Double)getCell(i,j)).doubleValue(),0)) {        throw new Exception("Neg. weights in misclassification " + "cost matrix!");      }      sumOfMissClassWeights+=((Double)getCell(i,j)).doubleValue();    }    weightFactor[i]=sumOfMissClassWeights * sumOfWeights;    sumOfWeightFactors+=sumOfMissClassWeights * weightOfInstancesInClass[i];  }  for (int i=0; i < data.numClasses(); i++) {    weightFactor[i]/=sumOfWeightFactors;  }  weightOfInstances=new double[data.numInstances()];  for (int i=0; i < data.numInstances(); i++) {    weightOfInstances[i]=data.instance(i).weight() * weightFactor[(int)data.instance(i).classValue()];  }  if (random != null) {    return data.resampleWithWeights(random,weightOfInstances);  } else {    Instances instances=new Instances(data);    for (int i=0; i < data.numInstances(); i++) {      instances.instance(i).setWeight(weightOfInstances[i]);    }    return instances;  }}  }
class C{  public static String formatGuid(final String engine,final Object guidObj){  String guidStr=null;  if (LdapEngineConstants.ENGINE_ACTIVE_DIRECTORY.equals(engine)) {    guidStr=formatAdGuid((byte[])guidObj);  } else {    guidStr=guidObj.toString();  }  return guidStr;}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder(host.length() + 8);  if (host.indexOf(':') >= 0) {    builder.append('[').append(host).append(']');  } else {    builder.append(host);  }  if (hasPort()) {    builder.append(':').append(port);  }  return builder.toString();}  }
class C{  public void resetLayers(){  detachChild(contents);  contents=null;  quadTree=null;  factory.dispose();  factory=null;  System.gc();  if (!layerManager.initialize(source)) {    return;  }  layerList=layerManager.getLayers();  initialize();}  }
class C{  @SuppressWarnings("rawtypes") public void renderTreeString(Appendable writer,Map<String,Object> context,TreeStringRenderer treeStringRenderer) throws GeneralException {  Map<String,Object> parameters=UtilGenerics.checkMap(context.get("parameters"));  ModelNode node=nodeMap.get(rootNodeName);  String trailName=trailNameExdr.expandString(context);  String treeString=(String)context.get(trailName);  if (UtilValidate.isEmpty(treeString)) {    treeString=(String)parameters.get(trailName);  }  List<String> trail=null;  if (UtilValidate.isNotEmpty(treeString)) {    trail=StringUtil.split(treeString,"|");    if (UtilValidate.isEmpty(trail))     throw new RuntimeException("Tree 'trail' value is empty.");    context.put("rootEntityId",trail.get(0));    context.put(getDefaultPkName(context),trail.get(0));  } else {    trail=new LinkedList<String>();  }  context.put("targetNodeTrail",trail);  context.put("currentNodeTrail",new LinkedList());  try {    node.renderNodeString(writer,context,treeStringRenderer,0);  } catch (  IOException e2) {    String errMsg="Error rendering included label with name [" + getName() + "] : "+ e2.toString();    Debug.logError(e2,errMsg,module);    throw new RuntimeException(errMsg);  }}  }
class C{  private Cluster<T> expandCluster(final Cluster<T> cluster,final T point,final List<T> neighbors,final Collection<T> points,final Map<Clusterable,PointStatus> visited){  cluster.addPoint(point);  visited.put(point,PointStatus.PART_OF_CLUSTER);  List<T> seeds=new ArrayList<T>(neighbors);  int index=0;  while (index < seeds.size()) {    final T current=seeds.get(index);    PointStatus pStatus=visited.get(current);    if (pStatus == null) {      final List<T> currentNeighbors=getNeighbors(current,points);      if (currentNeighbors.size() >= minPts) {        seeds=merge(seeds,currentNeighbors);      }    }    if (pStatus != PointStatus.PART_OF_CLUSTER) {      visited.put(current,PointStatus.PART_OF_CLUSTER);      cluster.addPoint(current);    }    index++;  }  return cluster;}  }
class C{  public static boolean isInClockwiseDomain(double startAngRad,double angSpanRad,double angRad){  if (Math.abs(angRad) < -TWO_MATH_PI_IN_MINUS_PI_PI) {    if (angSpanRad < 0.0) {      return false;    } else     if (angSpanRad <= 2 * Math.PI) {      startAngRad=FastMath.normalizeMinusPiPi(startAngRad);      double endAngRad=FastMath.normalizeMinusPiPi(startAngRad + angSpanRad);      if (startAngRad <= endAngRad) {        return (angRad >= startAngRad) && (angRad <= endAngRad);      } else {        return (angRad >= startAngRad) || (angRad <= endAngRad);      }    } else     if (angSpanRad != angSpanRad) {      return false;    } else {      return true;    }  } else {    return (FastMath.normalizeZeroTwoPi(angRad - startAngRad) <= angSpanRad);  }}  }
class C{  public ActionErrors validateForm(MotivoConsultaForm motivosForm,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isEmpty(motivosForm.getMotivo())) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_DESCRIPCION,request.getLocale())));  }  if (motivosForm.getTipoEntidad() == 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_TIPO_ENTIDAD,request.getLocale())));  }  if (motivosForm.getTipoConsulta() == 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_TIPO_CONSULTA,request.getLocale())));  }  if (motivosForm.getTipoEntidad() == ConsultasConstants.TIPO_ENTIDAD_CONSULTORA_INVESTIGADOR_INT && motivosForm.getVisibilidad() == 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_VISIBILIDAD,request.getLocale())));  }  if (errors.isEmpty() && motivosForm.getTipoConsulta() == ConsultasConstants.TIPO_CONSULTA_DIRECTA && motivosForm.getTipoEntidad() != ConsultasConstants.TIPO_ENTIDAD_CONSULTORA_INVESTIGADOR_INT) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_TIPO_ENTIDAD_INVALIDO));  }  return errors;}  }
class C{  public CallSpec<Void,HttpError> likePost(String postId){  return Resource.<Void,HttpError>newPutSpec(api,"/v1/groups/forums/posts/{post_id}/like",false).responseAs(Void.class).pathParam("post_id",postId).build();}  }
class C{  String validateLogixReference(String name){  Logix l=null;  if (name != null) {    if (name.length() > 0) {      l=_logixManager.getByUserName(name);      if (l != null) {        return name;      }    }    l=_logixManager.getBySystemName(name);  }  if (l == null) {    messageInvalidActionItemName(name,"Logix");    return null;  }  return name;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.451 -0500",hash_original_method="45B7AAA172C2FB7B4FDF9001755F4630",hash_generated_method="323CF2BAA2501BCBF8D1D678B872A121") void ackReceived(SIPRequest sipRequest){  if (this.ackSeen)   return;  SIPServerTransaction tr=this.getInviteTransaction();  if (tr != null) {    if (tr.getCSeq() == sipRequest.getCSeq().getSeqNumber()) {      acquireTimerTaskSem();      try {        if (this.timerTask != null) {          this.timerTask.cancel();          this.timerTask=null;        }      }  finally {        releaseTimerTaskSem();      }      this.ackSeen=true;      if (this.dialogDeleteTask != null) {        this.dialogDeleteTask.cancel();        this.dialogDeleteTask=null;      }      this.setLastAckReceived(sipRequest);      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("ackReceived for " + ((SIPTransaction)tr).getMethod());        this.ackLine=sipStack.getStackLogger().getLineCount();        this.printDebugInfo();      }      if (this.isBackToBackUserAgent) {        this.releaseAckSem();      }      this.setState(CONFIRMED_STATE);    }  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public void clearTaken(){  flags2&=~TAKEN;}  }
class C{  public static boolean isSystemApplication(Context context,String packageName){  if (context == null) {    return false;  }  return isSystemApplication(context.getPackageManager(),packageName);}  }
class C{  @Uninterruptible public static boolean validType(ObjectReference typeAddress){  if (!Space.isMappedObject(typeAddress)) {    return false;  }  TIB typeTib=ObjectModel.getTIB(typeAddress);  return ((typeTib == tibForClassType) || (typeTib == tibForArrayType) || (typeTib == tibForPrimitiveType));}  }
class C{  public void connectionClosed(ConnectionEvent ce){  try {    ((FBManagedConnection)ce.getSource()).destroy();  } catch (  ResourceException e) {    if (log != null)     log.debug("Exception closing unmanaged connection: ",e);  }}  }
class C{  public static Map<String,Object> createContentAssoc(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  context.put("entityOperation","_CREATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_CREATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  context.put("skipPermissionCheck",null);  Map<String,Object> result=null;  try {    result=createContentAssocMethod(dctx,context);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericEntityException e2) {    return ServiceUtil.returnError(e2.getMessage());  }catch (  Exception e3) {    return ServiceUtil.returnError(e3.getMessage());  }  return result;}  }
class C{  @Override public <U extends Comparable<? super U>>CompletableFuture<Optional<T>> maxBy(final Function<? super T,? extends U> function){  return CompletableFuture.supplyAsync(null);}  }
class C{  protected int next() throws IOException, ExifInvalidFormatException {  if (!mContainExifData) {    return EVENT_END;  }  int offset=mTiffStream.getReadByteCount();  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  if (offset < endOfTags) {    mTag=readTag();    if (mTag == null) {      return next();    }    if (mNeedToParseOffsetsInCurrentIfd) {      checkOffsetOrImageTag(mTag);    }    return EVENT_NEW_TAG;  } else   if (offset == endOfTags) {    if (mIfdType == IfdId.TYPE_IFD_0) {      long ifdOffset=readUnsignedLong();      if (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested()) {        if (ifdOffset != 0) {          registerIfd(IfdId.TYPE_IFD_1,ifdOffset);        }      }    } else {      int offsetSize=4;      if (mCorrespondingEvent.size() > 0) {        offsetSize=mCorrespondingEvent.firstEntry().getKey() - mTiffStream.getReadByteCount();      }      if (offsetSize < 4) {        Log.w(TAG,"Invalid size of link to next IFD: " + offsetSize);      } else {        long ifdOffset=readUnsignedLong();        if (ifdOffset != 0) {          Log.w(TAG,"Invalid link to next IFD: " + ifdOffset);        }      }    }  }  while (mCorrespondingEvent.size() != 0) {    Entry<Integer,Object> entry=mCorrespondingEvent.pollFirstEntry();    Object event=entry.getValue();    try {      skipTo(entry.getKey());    } catch (    IOException e) {      Log.w(TAG,"Failed to skip to data at: " + entry.getKey() + " for "+ event.getClass().getName()+ ", the file may be broken.");      continue;    }    if (event instanceof IfdEvent) {      mIfdType=((IfdEvent)event).ifd;      mNumOfTagInIfd=mTiffStream.readUnsignedShort();      mIfdStartOffset=entry.getKey();      if (mNumOfTagInIfd * TAG_SIZE + mIfdStartOffset + OFFSET_SIZE > mApp1End) {        Log.w(TAG,"Invalid size of IFD " + mIfdType);        return EVENT_END;      }      mNeedToParseOffsetsInCurrentIfd=needToParseOffsetsInCurrentIfd();      if (((IfdEvent)event).isRequested) {        return EVENT_START_OF_IFD;      } else {        skipRemainingTagsInCurrentIfd();      }    } else     if (event instanceof ImageEvent) {      mImageEvent=(ImageEvent)event;      return mImageEvent.type;    } else {      ExifTagEvent tagEvent=(ExifTagEvent)event;      mTag=tagEvent.tag;      if (mTag.getDataType() != ExifTag.TYPE_UNDEFINED) {        readFullTagValue(mTag);        checkOffsetOrImageTag(mTag);      }      if (tagEvent.isRequested) {        return EVENT_VALUE_OF_REGISTERED_TAG;      }    }  }  return EVENT_END;}  }
class C{  public Data(){}  }
class C{  protected static boolean SI16(int value){  return (value <= 32767) && (value >= -32768);}  }
class C{  public void testExpressionRefersToExpression() throws Exception {  Expression expr1=JavascriptCompiler.compile("_score");  Expression expr2=JavascriptCompiler.compile("2*expr1");  SimpleBindings bindings=new SimpleBindings();  bindings.add(new SortField("_score",SortField.Type.SCORE));  bindings.add("expr1",expr1);  Sort sort=new Sort(expr2.getSortField(bindings,true));  Query query=new TermQuery(new Term("body","contents"));  TopFieldDocs td=searcher.search(query,3,sort,true,true);  for (int i=0; i < 3; i++) {    FieldDoc d=(FieldDoc)td.scoreDocs[i];    float expected=2 * d.score;    float actual=((Double)d.fields[0]).floatValue();    assertEquals(expected,actual,CheckHits.explainToleranceDelta(expected,actual));  }}  }
class C{  private void messageMissingOverrideAnnotation(MemberMatrix mm,Collection<TMember> missingOverrideAnnotationMembers){  if (mm.hasOwned() && missingOverrideAnnotationMembers.size() > 0) {    Iterable<TMember> overriddenMembers=Iterables.concat(mm.inherited(),mm.implemented());    for (    TMember overriding : mm.owned()) {      if (!missingOverrideAnnotationMembers.contains(overriding)) {        continue;      }      if (overriding.isConstructor()) {        continue;      }      if (JavaScriptVariant.getVariant(overriding).equals(JavaScriptVariant.strict) || JavaScriptVariant.getVariant(overriding).equals(JavaScriptVariant.unrestricted)) {        continue;      }      Iterable<TMember> filteredOverriddenMembers=MemberRedefinitionUtils.getMetatypeCompatibleOverriddenMembers(overriding,overriddenMembers);      String redefinitionVerb=MemberRedefinitionUtils.getRedefinitionVerb(filteredOverriddenMembers,getCurrentClassifier());      String message=getMessageForCLF_OVERRIDE_ANNOTATION(validatorMessageHelper.descriptionDifferentFrom(overriding,overriddenMembers),redefinitionVerb,validatorMessageHelper.descriptions(filteredOverriddenMembers));      addIssue(message,overriding.getAstElement(),N4JSPackage.Literals.PROPERTY_NAME_OWNER__DECLARED_NAME,CLF_OVERRIDE_ANNOTATION);    }  }}  }
class C{  public void remove(String key){  mValues.remove(key);}  }
class C{  public VALUE remove(int key){  IntEntry<VALUE> e=removeEntryForKey(key);  return (e == null ? null : e.value);}  }
class C{  static void handleNewMessages(IMAPFolder folder) throws MessagingException {  Long lastUIDValidity=Property.getLong(Property.Name.MAILBOX_LAST_UID_VALIDITY);  Long lastSeenUID=Property.getLong(Property.Name.MAILBOX_LAST_SEEN_UID);  long uidValidity=folder.getUIDValidity();  if (lastUIDValidity != null && lastUIDValidity.equals(uidValidity) && lastSeenUID != null) {    handleMessages(folder,folder.getMessagesByUID(lastSeenUID + 1,folder.getUIDNext()));  }  Property.set(Property.Name.MAILBOX_LAST_UID_VALIDITY,uidValidity);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (dag == null) {    throw new NullPointerException();  }  if (nodesToVariables == null) {    throw new NullPointerException();  }}  }
class C{  public MCashLine(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public void onResume(Activity activity){synchronized (activities) {    for (int i=activities.size() - 1; i >= 0; i--) {      if (activities.get(i).getActivity().equals(activity)) {        activities.get(i).resume();        break;      }    }  }}  }
class C{  public MockTransaction(final int customField,final TimeInstant timeStamp){  this(Utils.generateRandomAccount(),customField,timeStamp);}  }
class C{  final public void println(char[] s){  Writer out=this.out;  if (out == null)   return;  try {    out.write(s,0,s.length);    out.write(_newline,0,_newline.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public void addHost(String hostPortPair){  addHost(hostPortPair,false);}  }
class C{  public static int dipToPixels(Context context,int dip){  Resources r=context.getResources();  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,r.getDisplayMetrics());  return (int)px;}  }
class C{  @Override public String toString(){  return format("%s AS %s",object,alias);}  }
class C{  public static boolean isMacOSX107(){  return _isMacOSX107;}  }
class C{  static public void print(Pageable pageable,PrintRequestAttributeSet prats){  PrinterJob job=CPrinter.getPrinterJob();  job.setPageable(pageable);  print(job,prats,true,false);}  }
class C{  public void storeSerializable(final String key,final IBean bean){  m_map.put(key,bean);}  }
class C{  protected void stopTimer(){  if (timer != null) {    timer.stop();  }}  }
class C{  private static List<ErrorInformation> checkPasswordForADComplexity(final ADPolicyComplexity complexityLevel,final UserInfoBean userInfoBean,final String password,final PasswordCharCounter charCounter,final int maxGroupViolationCount){  final List<ErrorInformation> errorList=new ArrayList<>();  if (password == null || password.length() < 6) {    errorList.add(new ErrorInformation(PwmError.PASSWORD_TOO_SHORT));    return errorList;  }  final int maxLength=complexityLevel == ADPolicyComplexity.AD2003 ? 128 : 512;  if (password.length() > maxLength) {    errorList.add(new ErrorInformation(PwmError.PASSWORD_TOO_LONG));    return errorList;  }  if (userInfoBean != null && userInfoBean.getCachedPasswordRuleAttributes() != null) {    final Map<String,String> userAttrs=userInfoBean.getCachedPasswordRuleAttributes();    final String samAccountName=userAttrs.get("sAMAccountName");    if (samAccountName != null && samAccountName.length() > 2 && samAccountName.length() >= password.length()) {      if (password.toLowerCase().contains(samAccountName.toLowerCase())) {        errorList.add(new ErrorInformation(PwmError.PASSWORD_INWORDLIST));        LOGGER.trace("Password violation due to ADComplexity check: Password contains sAMAccountName");      }    }    final String displayName=userAttrs.get("displayName");    if (displayName != null && displayName.length() > 2) {      if (checkContainsTokens(password,displayName)) {        errorList.add(new ErrorInformation(PwmError.PASSWORD_INWORDLIST));        LOGGER.trace("Password violation due to ADComplexity check: Tokens from displayName used in password");      }    }  }  int complexityPoints=0;  if (charCounter.getUpperCharCount() > 0) {    complexityPoints++;  }  if (charCounter.getLowerCharCount() > 0) {    complexityPoints++;  }  if (charCounter.getNumericCharCount() > 0) {    complexityPoints++;  }switch (complexityLevel) {case AD2003:    if (charCounter.getSpecialCharsCount() > 0 || charCounter.getOtherLetterCharCount() > 0) {      complexityPoints++;    }  break;case AD2008:if (charCounter.getSpecialCharsCount() > 0) {  complexityPoints++;}if (charCounter.getOtherLetterCharCount() > 0) {complexityPoints++;}break;}switch (complexityLevel) {case AD2008:final int totalGroups=5;final int violations=totalGroups - complexityPoints;if (violations <= maxGroupViolationCount) {return errorList;}break;case AD2003:if (complexityPoints >= 3) {return errorList;}break;}if (charCounter.getUpperCharCount() < 1) {errorList.add(new ErrorInformation(PwmError.PASSWORD_NOT_ENOUGH_UPPER));}if (charCounter.getLowerCharCount() < 1) {errorList.add(new ErrorInformation(PwmError.PASSWORD_NOT_ENOUGH_LOWER));}if (charCounter.getNumericCharCount() < 1) {errorList.add(new ErrorInformation(PwmError.PASSWORD_NOT_ENOUGH_NUM));}if (charCounter.getSpecialCharsCount() < 1) {errorList.add(new ErrorInformation(PwmError.PASSWORD_NOT_ENOUGH_SPECIAL));}if (charCounter.getOtherLetterCharCount() < 1) {errorList.add(new ErrorInformation(PwmError.PASSWORD_UNKNOWN_VALIDATION));}return errorList;}  }
class C{  protected final void addInvalidType(T t){  invalidTypes.add(t);}  }
class C{  private boolean equalShapes(Shape[] s1,Shape[] s2){  if (s1 == null) {    return s2 == null;  }  if (s2 == null) {    return false;  }  if (s1.length != s2.length) {    return false;  }  for (int i=0; i < s1.length; i++) {    if (!ShapeUtilities.equal(s1[i],s2[i])) {      return false;    }  }  return true;}  }
class C{  public void testPathMatcherTermNextMatchNonRecursive(){  GraphModel graph=new GraphModel();  GraphNode[] nodes=fillGraphModel(graph);  MultipleDirectedRelationFinder finder=new MultipleDirectedRelationFinder();  finder.addRelation(MockRelation.DIRECTORY,true,false);  RelationshipSetAdapter setAdapter=new RelationshipSetAdapter("Temporary",finder,relations);  PathMatcherTerm term=new PathMatcherTerm(setAdapter,false,false);  Collection<GraphNode> output=term.getPathMatcher().nextMatch(graph,buildSingleSet(nodes[0]));  assertEquals(1,output.size());  assertGraphContainsElement(output,nodes,1);}  }
class C{  public static void createBasicTestData(final boolean basicSetupRequired) throws Exception {  setDateFactoryInstance(DateTimeHandling.calculateMillis("2010-01-01 00:00:00"));  basicDataSetup(basicSetupRequired);  createOperatorOrganization();  container.login(basicSetup.getPlatformOperatorUserKey(),ROLE_PLATFORM_OPERATOR);  addCurrencies();  createSupplierOrganization();  savePaymentConfiguration();  createCustomerOrganizations();  createTechnicalService(container);  createAsyncTechnicalService(container);}  }
class C{  public _BuildUpdate(final String[] flagStrings){  super(flagStrings);}  }
class C{  public static void hasMarketingPermission(TechnicalProduct technicalProduct,Organization supplier,DataService ds,Log4jLogger logger) throws OperationNotPermittedException {  Query query=ds.createNamedQuery("MarketingPermission.findForSupplierIds");  query.setParameter("tp",technicalProduct);  List<String> searchList=new ArrayList<>();  searchList.add(supplier.getOrganizationId());  query.setParameter("orgIds",searchList);  query.setParameter("refType",OrganizationReferenceType.TECHNOLOGY_PROVIDER_TO_SUPPLIER);  try {    query.getSingleResult();  } catch (  NoResultException|NonUniqueResultException e) {    logAndThrowMarketingPermissionException(logger,String.valueOf(technicalProduct.getKey()),supplier.getOrganizationId());  }}  }
class C{  public void delete(String file){  Util.getImplementation().deleteFile(file);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.264 -0400",hash_original_method="48E9953E5ABFFECEE441290BB1EC6E5E",hash_generated_method="B433D0EE54A3BE547F9E4EAB8F43DF64") private void addIndex(Index<K,V> idx,HeadIndex<K,V> h,int indexLevel){  int insertionLevel=indexLevel;  Comparable<? super K> key=comparable(idx.node.key);  if (key == null)   throw new NullPointerException();  for (; ; ) {    int j=h.level;    Index<K,V> q=h;    Index<K,V> r=q.right;    Index<K,V> t=idx;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        int c=key.compareTo(n.key);        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (c > 0) {          q=r;          r=r.right;          continue;        }      }      if (j == insertionLevel) {        if (t.indexesDeletedNode()) {          findNode(key);          return;        }        if (!q.link(r,t))         break;        if (--insertionLevel == 0) {          if (t.indexesDeletedNode())           findNode(key);          return;        }      }      if (--j >= insertionLevel && j < indexLevel)       t=t.down;      q=q.down;      r=q.right;    }  }}  }
class C{  public boolean isNextLine(){  Object oo=get_Value(COLUMNNAME_IsNextLine);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void actionPerformed(ActionEvent e){  Box b=Box.createVerticalBox();  int numLatents=0;  for (  Node node : getGraph().getNodes()) {    if (node.getNodeType() == NodeType.LATENT) {      numLatents++;    }  }  int maxIndegree=0;  for (  Node node : getGraph().getNodes()) {    int indegree=getGraph().getNodesInTo(node,Endpoint.ARROW).size();    if (indegree > maxIndegree) {      maxIndegree=indegree;    }  }  int maxOutdegree=0;  for (  Node node : getGraph().getNodes()) {    int outdegree=getGraph().getNodesOutTo(node,Endpoint.ARROW).size();    if (outdegree > maxOutdegree) {      maxOutdegree=outdegree;    }  }  int numDirectedEdges=0;  int numBidirectedEdges=0;  int numUndirectedEdges=0;  for (  Edge edge : getGraph().getEdges()) {    if (Edges.isDirectedEdge(edge))     numDirectedEdges++; else     if (Edges.isBidirectedEdge(edge))     numBidirectedEdges++; else     if (Edges.isUndirectedEdge(edge))     numUndirectedEdges++;  }  boolean cyclic=getGraph().existsDirectedCycle();  JTextArea textArea=new JTextArea();  JScrollPane scroll=new JScrollPane(textArea);  scroll.setPreferredSize(new Dimension(300,300));  textArea.append("\nNumber of nodes: " + String.valueOf(getGraph().getNumNodes()));  textArea.append("\nNumber of latents: " + String.valueOf(numLatents));  textArea.append("\nNumber of edges: " + String.valueOf(getGraph().getNumEdges()));  textArea.append("\nNumber of directed edges: " + String.valueOf(numDirectedEdges));  textArea.append("\nNumber of bidirected edges: " + String.valueOf(numBidirectedEdges));  textArea.append("\nNumber of undirected edges: " + String.valueOf(numUndirectedEdges));  textArea.append("\nMax degree: " + String.valueOf(getGraph().getConnectivity()));  textArea.append("\nMax indegree: " + String.valueOf(maxIndegree));  textArea.append("\nMax outdegree: " + String.valueOf(maxOutdegree));  textArea.append("\nNumber of latents: " + String.valueOf(numLatents));  textArea.append("\n" + (cyclic ? "Cyclic" : "Acyclic"));  Box b2=Box.createHorizontalBox();  b2.add(scroll);  textArea.setCaretPosition(0);  b.add(b2);  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  panel.add(b);  EditorWindow window=new EditorWindow(panel,"Graph Properties","Close",false,workbench);  DesktopController.getInstance().addEditorWindow(window,JLayeredPane.PALETTE_LAYER);  window.setVisible(true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node commentNode;  int nodeType;  String commentNodeName;  doc=(Document)load("staff",false);  elementList=doc.getChildNodes();  for (int indexN10040=0; indexN10040 < elementList.getLength(); indexN10040++) {    commentNode=(Node)elementList.item(indexN10040);    nodeType=(int)commentNode.getNodeType();    if (equals(8,nodeType)) {      commentNodeName=commentNode.getNodeName();      assertEquals("commentNodeName","#comment",commentNodeName);    }  }}  }
class C{  public void addAddress(PeerAddress peerAddress){  int newMax;  lock.lock();  try {    addInactive(peerAddress);    newMax=getMaxConnections() + 1;  }  finally {    lock.unlock();  }  setMaxConnections(newMax);}  }
class C{  public static TypeStack v(){  TypeStack typeStack=new TypeStack();  typeStack.types=new Type[0];  return typeStack;}  }
class C{  protected ByteBuffer convert(AudioPacket packet){  if (packet.hasAudioBuffer()) {    float[] samples=packet.getAudioBuffer().getSamples();    ByteBuffer buffer=ByteBuffer.allocate(samples.length * 4).order(ByteOrder.LITTLE_ENDIAN);    ShortBuffer shortBuffer=buffer.asShortBuffer();    if (getMixerChannel() == MixerChannel.LEFT) {      for (      float sample : samples) {        shortBuffer.put((short)(sample * Short.MAX_VALUE));        shortBuffer.put((short)0);      }    } else {      for (      float sample : samples) {        shortBuffer.put((short)0);        shortBuffer.put((short)(sample * Short.MAX_VALUE));      }    }    return buffer;  }  return null;}  }
class C{  @SafeVarargs public static <T>Set<T> asSet(final T... array){  Set<T> arraySet=new HashSet<T>(array.length);  Collections.addAll(arraySet,array);  return arraySet;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node childNode;  Node newChild;  Node lchild;  Node fchild;  String lchildName;  String fchildName;  Node appendedChild;  String initialName;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  childNode=elementList.item(1);  newChild=childNode.getFirstChild();  initialName=newChild.getNodeName();  appendedChild=childNode.appendChild(newChild);  fchild=childNode.getFirstChild();  fchildName=fchild.getNodeName();  lchild=childNode.getLastChild();  lchildName=lchild.getNodeName();  if (equals("employeeId",initialName)) {    assertEquals("assert1_nowhitespace","name",fchildName);    assertEquals("assert2_nowhitespace","employeeId",lchildName);  } else {    assertEquals("assert1","employeeId",fchildName);    assertEquals("assert2","#text",lchildName);  }}  }
class C{  private void removeUnnecessaryWhitespaceAroundDiagram(){  Rectangle diaWithoutWhite=getContentBounds(0,getGridElements());  Dimension viewSize=getViewableDiagrampanelSize();  int horSbPos=_scr.getHorizontalScrollBar().getValue();  int verSbPos=_scr.getVerticalScrollBar().getValue();  horSbPos=handler.realignToGrid(false,horSbPos);  verSbPos=handler.realignToGrid(false,verSbPos);  int newX=0;  if (_scr.getHorizontalScrollBar().isShowing()) {    if (horSbPos > diaWithoutWhite.getX()) {      newX=diaWithoutWhite.getX();    } else {      newX=horSbPos;    }  }  int newY=0;  if (_scr.getVerticalScrollBar().isShowing()) {    if (verSbPos > diaWithoutWhite.getY()) {      newY=diaWithoutWhite.getY();    } else {      newY=verSbPos;    }  }  int newWidth=(int)(horSbPos + viewSize.getWidth());  if (diaWithoutWhite.getX() + diaWithoutWhite.getWidth() > horSbPos + viewSize.getWidth()) {    newWidth=diaWithoutWhite.getX() + diaWithoutWhite.getWidth();  }  int newHeight=(int)(verSbPos + viewSize.getHeight());  if (diaWithoutWhite.getY() + diaWithoutWhite.getHeight() > verSbPos + viewSize.getHeight()) {    newHeight=diaWithoutWhite.getY() + diaWithoutWhite.getHeight();  }  moveOrigin(newX,newY);  for (  GridElement ge : getGridElements()) {    ge.setLocation(handler.realignToGrid(false,ge.getRectangle().x - newX),handler.realignToGrid(false,ge.getRectangle().y - newY));  }  changeViewPosition(-newX,-newY);  setPreferredSize(new Dimension(newWidth - newX,newHeight - newY));  checkIfScrollbarsAreNecessary();}  }
class C{  public DefaultRequest eventCategory(String value){  setString(EVENT_CATEGORY,value);  return this;}  }
class C{  @Provides @Config("gcsBufferSize") public static int provideGcsBufferSize(){  return 1024 * 1024;}  }
class C{  public void testGetElementsByTagNameNS1() throws Throwable {  Document doc;  Element element;  NodeList elementList;  doc=(Document)load("staffNS",builder);  element=doc.getDocumentElement();  elementList=element.getElementsByTagNameNS("**","*");  assertEquals("elementgetelementsbytagnamens02",0,elementList.getLength());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.470 -0500",hash_original_method="43C05B8A0FF5CBFFF8E027DF94B104CB",hash_generated_method="BEA9506A49791E09E851664F93E1DBF1") public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static List<Integer> createListOfNonExistentFields(List<String> list,EclipseNode type,boolean excludeStandard,boolean excludeTransient){  boolean[] matched=new boolean[list.size()];  for (  EclipseNode child : type.down()) {    if (list.isEmpty())     break;    if (child.getKind() != Kind.FIELD)     continue;    if (excludeStandard) {      if ((((FieldDeclaration)child.get()).modifiers & ClassFileConstants.AccStatic) != 0)       continue;      if (child.getName().startsWith("$"))       continue;    }    if (excludeTransient && (((FieldDeclaration)child.get()).modifiers & ClassFileConstants.AccTransient) != 0)     continue;    int idx=list.indexOf(child.getName());    if (idx > -1)     matched[idx]=true;  }  List<Integer> problematic=new ArrayList<Integer>();  for (int i=0; i < list.size(); i++) {    if (!matched[i])     problematic.add(i);  }  return problematic;}  }
class C{  public boolean hasAnyPermission(String[] rights){  if (ArrayUtils.isEmpty(rights))   return false;  Arrays.sort(permissions);  if (Arrays.binarySearch(permissions,AppPermissions.ADMINISTRACION_TOTAL_SISTEMA) >= 0)   return true;  for (int i=0; i < rights.length; i++)   if (Arrays.binarySearch(permissions,rights[i]) >= 0)   return true;  return false;}  }
class C{  private static String[] parseWebSite(String link,String tag) throws IOException {  return Jsoup.connect(link).userAgent("Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36").cookie("realauth","SvBD85dINu3").get().select(tag).text().split(" ");}  }
class C{  @Override public void handle(ReadyEvent event){  try {    IGuild guild=event.getClient().getGuilds().get(0);    RoleBuilder roleBuilder=new RoleBuilder(guild);    roleBuilder.withName("Awesome Role");    roleBuilder.withColor(Color.GREEN);    roleBuilder.setHoist(true);    roleBuilder.setMentionable(true);    roleBuilder.withPermissions(EnumSet.of(Permissions.ADMINISTRATOR));    IRole role=roleBuilder.build();    IUser ourUser=event.getClient().getOurUser();    guild.editUserRoles(ourUser,new IRole[]{role});  } catch (  MissingPermissionsException|RateLimitException|DiscordException e) {    e.printStackTrace();  }}  }
class C{  private void startProcess(int AD_Process_ID,String IsSOTrx){  SwingUtilities.invokeLater(m_updatePB);  boolean isSO=false;  if (IsSOTrx != null && IsSOTrx.equals("Y"))   isSO=true;  m_timer.stop();  ProcessDialog pd=new ProcessDialog(m_menu.getGraphicsConfiguration(),AD_Process_ID,isSO);  if (!pd.init())   return;  m_timer.start();  m_menu.getWindowManager().add(pd);  SwingUtilities.invokeLater(m_updatePB);  pd.getContentPane().invalidate();  pd.getContentPane().validate();  pd.pack();  SwingUtilities.invokeLater(m_updatePB);  AEnv.showCenterScreen(pd);}  }
class C{  public boolean isUseSiteStructuralTyping(){  return ((this.getTypingStrategy() != TypingStrategy.NOMINAL) && (this.getTypingStrategy() != TypingStrategy.DEFAULT));}  }
class C{  public ModelException(Throwable baseEx){  super(baseEx);}  }
class C{  public void addRepaintNotify(Component c){  m_Repainters.add(c);}  }
class C{  public Address minus(int v){  return new Address(value.minus(v));}  }
class C{  public V remove(Object key){  Entry<K,V> e=removeEntryForKey(key);  return (e == null ? null : e.value);}  }
class C{  @Override public void touchFile(String name) throws IOException {  ensureOpen();  throw new IllegalStateException(name);}  }
class C{  public static final boolean isValid(ForceItem item){  return !(Float.isNaN(item.location[0]) || Float.isNaN(item.location[1]) || Float.isNaN(item.plocation[0])|| Float.isNaN(item.plocation[1])|| Float.isNaN(item.velocity[0])|| Float.isNaN(item.velocity[1])|| Float.isNaN(item.force[0])|| Float.isNaN(item.force[1]));}  }
class C{  public boolean isAllowSmallerIntervalsForMarshmallow(){  return mAllowSmallerIntervals && Build.VERSION.SDK_INT < Build.VERSION_CODES.N;}  }
class C{  public void reportFailure(long waitTime){  mSumOfWaitTime+=waitTime;  mFailedRequests++;}  }
class C{  protected void SetVector(NodeVector v){  setObject(v);}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.write(client_version);  out.write(random);  out.writeUint8(session_id.length);  out.write(session_id);  int size=cipher_suites.length << 1;  out.writeUint16(size);  for (int i=0; i < cipher_suites.length; i++) {    out.write(cipher_suites[i].toBytes());  }  out.writeUint8(compression_methods.length);  for (int i=0; i < compression_methods.length; i++) {    out.write(compression_methods[i]);  }}  }
class C{  public void addUnsupportedCondition(){  addCondition(Condition.createUnsupportedCondition());}  }
class C{  public MagnifyTransformer(Component component,MutableTransformer delegate){  super(component,delegate);  this.magnification=3.f;}  }
class C{  public void beginHandshake(){  Preconditions.checkState(state instanceof InitState,"must be in InitState");  if (this.featuresReply.getNTables() > 1) {    log.debug("Have {} table(s) for switch {}",this.featuresReply.getNTables(),getSwitchInfoString());  }  if (this.featuresReply.getVersion().compareTo(OFVersion.OF_13) < 0) {    setState(new WaitConfigReplyState());  } else {    setState(new WaitPortDescStatsReplyState());  }}  }
class C{  @Override public void assign(Tester tester){  setInstances(tester.getInstances());  setResultMatrix(tester.getResultMatrix());  setShowStdDevs(tester.getShowStdDevs());  setResultsetKeyColumns(tester.getResultsetKeyColumns());  setDisplayedResultsets(tester.getDisplayedResultsets());  setSignificanceLevel(tester.getSignificanceLevel());  setDatasetKeyColumns(tester.getDatasetKeyColumns());  setRunColumn(tester.getRunColumn());  setFoldColumn(tester.getFoldColumn());  setSortColumn(tester.getSortColumn());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.ArrayList rv=new java.util.ArrayList();  java.util.Iterator walker=UIManager.getUIIterator();  while (walker.hasNext()) {    UIManager foo=(UIManager)walker.next();    if (Sage.isHeadless() && Seeker.LOCAL_PROCESS_CLIENT.equals(foo.getLocalUIClientName()))     continue;    rv.add(foo.getLocalUIClientName());  }  if (Sage.EMBEDDED && !Sage.client) {    return NetworkClient.getConnectedClientIDs();  }  return rv.toArray(Pooler.EMPTY_STRING_ARRAY);}  }
class C{  public void consume(){  consumed=true;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.151 -0500",hash_original_method="52BF089D22903982B0C882C52DE70EC3",hash_generated_method="3B749C8EC23DB82A54E30BDF71BEA1E8") @Override public void send(HandshakeIODataStream out){}  }
class C{  @Override public String toString(){  return toSummaryString();}  }
class C{  public void put(int key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=Math.max(mSize + 1,mKeys.length * 2);      int[] nkeys=new int[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public static String shortDebugString(final UnknownFieldSet fields){  try {    final StringBuilder sb=new StringBuilder();    SINGLE_LINE_PRINTER.printUnknownFields(fields,new TextGenerator(sb));    return sb.toString().trim();  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  public Map<String,Properties> mapAllProperties(String uri) throws IOException {  Map<String,Properties> propertiesMap=new HashMap<>();  Map<String,URL> map=getResourcesMap(uri);  for (Iterator<Entry<String,URL>> iterator=map.entrySet().iterator(); iterator.hasNext(); ) {    Entry<String,URL> entry=iterator.next();    String string=entry.getKey();    URL url=entry.getValue();    Properties properties=loadProperties(url);    propertiesMap.put(string,properties);  }  return propertiesMap;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.340 -0400",hash_original_method="854753638CC0197CC47838DCD9FB66E4",hash_generated_method="A0088BD4733B7FC8F6BFA14F91107A67") @Override public void reset(){  idx=mark;}  }
class C{  public double optDouble(String key,double defaultValue){  try {    Object o=opt(key);    return o instanceof Number ? ((Number)o).doubleValue() : new Double((String)o).doubleValue();  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private void saveTouchStart(MotionEvent event){  mSavedMatrix.set(mMatrix);  mTouchStartPoint.set(event.getX(),event.getY());  mClosestDataSetToTouch=mChart.getDataSetByTouchPoint(event.getX(),event.getY());}  }
class C{  public boolean isSetters(){  return fSetters;}  }
class C{  public DataSourceSpringImpl(){}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  protected static void markSides(Point p1,Point p2,int upperInc,int lowerInc,int elevationMap[][],int height){  for (int x=p1.x; x < p2.x; x++) {    for (int y=0; y < height; y++) {      int point=(p2.y - p1.y) / (p2.x - p1.x) * (x - p1.x) + p1.y;      if (y > point) {        elevationMap[x][y]+=upperInc;      } else       if (y < point) {        elevationMap[x][y]+=lowerInc;      }    }  }}  }
class C{  public void stopAutoScroll(){  mHandler.removeCallbacks(ScrollRunnable);  mHandler=null;  ScrollRunnable=null;}  }
class C{  public RelativeStrengthIndexDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  public final boolean isStopCodon(int state){  return geneticCode.isStopCodon(state);}  }
class C{  public boolean isMarkedDeleted(){  return markedAsDeleted;}  }
class C{  public void sendMessage(String message,String userName,String roomName,ParticipantRequest request){  log.debug("Request [SEND_MESSAGE] message={} ({})",message,request);  try {    if (!internalManager.getParticipantName(request.getParticipantId()).equals(userName)) {      throw new RoomException(Code.USER_NOT_FOUND_ERROR_CODE,"Provided username '" + userName + "' differs from the participant's name");    }    if (!internalManager.getRoomName(request.getParticipantId()).equals(roomName)) {      throw new RoomException(Code.ROOM_NOT_FOUND_ERROR_CODE,"Provided room name '" + roomName + "' differs from the participant's room");    }    notificationRoomHandler.onSendMessage(request,message,userName,roomName,internalManager.getParticipants(roomName),null);  } catch (  RoomException e) {    log.warn("PARTICIPANT {}: Error sending message",userName,e);    notificationRoomHandler.onSendMessage(request,null,null,null,null,e);  }}  }
class C{  private static void assertPollMessageFor(HistoryEntry historyEntry,String clientId,String msg){  PollMessage.OneTime pollMessage=(OneTime)getOnlyPollMessageForHistoryEntry(historyEntry);  assertThat(msg).isEqualTo(pollMessage.getMsg());  assertThat(clientId).isEqualTo(pollMessage.getClientId());  assertThat(pollMessage.getClientId()).isEqualTo(clientId);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  InvertIndex<String,String> oper=new InvertIndex<String,String>();  CollectorTestSink indexSink=new CollectorTestSink();  Sink inSink=oper.data.getSink();  oper.index.setSink(indexSink);  oper.beginWindow(0);  HashMap<String,String> input=new HashMap<String,String>();  input.put("a","str");  input.put("b","str");  inSink.put(input);  input.clear();  input.put("a","str1");  input.put("b","str1");  inSink.put(input);  input.clear();  input.put("c","blah");  inSink.put(input);  input.clear();  input.put("c","str1");  inSink.put(input);  oper.endWindow();  Assert.assertEquals("number emitted tuples",3,indexSink.collectedTuples.size());  for (  Object o : indexSink.collectedTuples) {    log.debug(o.toString());    HashMap<String,ArrayList<String>> output=(HashMap<String,ArrayList<String>>)o;    for (    Map.Entry<String,ArrayList<String>> e : output.entrySet()) {      String key=e.getKey();      ArrayList<String> alist=e.getValue();      if (key.equals("str1")) {        Assert.assertEquals("Index for \"str1\" contains \"a\"",true,alist.contains("a"));        Assert.assertEquals("Index for \"str1\" contains \"b\"",true,alist.contains("b"));        Assert.assertEquals("Index for \"str1\" contains \"c\"",true,alist.contains("c"));      } else       if (key.equals("str")) {        Assert.assertEquals("Index for \"str1\" contains \"a\"",true,alist.contains("a"));        Assert.assertEquals("Index for \"str1\" contains \"b\"",true,alist.contains("b"));        Assert.assertEquals("Index for \"str1\" contains \"c\"",false,alist.contains("c"));      } else       if (key.equals("blah")) {        Assert.assertEquals("Index for \"str1\" contains \"a\"",false,alist.contains("a"));        Assert.assertEquals("Index for \"str1\" contains \"b\"",false,alist.contains("b"));        Assert.assertEquals("Index for \"str1\" contains \"c\"",true,alist.contains("c"));      }    }  }}  }
class C{  @PUT @Path("/{uuid}") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) public Response updateSite(@PathParam("uuid") String uuid,SiteUpdateParam siteParam){  log.info("Begin to update site information for {}",uuid);  Site site=null;  try {    site=drUtil.getSiteFromLocalVdc(uuid);  } catch (  RetryableCoordinatorException e) {    log.error("Can't find site with specified site UUID {}",uuid);    throw APIException.badRequests.siteIdNotFound();  }  if (!validSiteName(siteParam.getName())) {    throw APIException.internalServerErrors.updateSiteFailed(site.getName(),String.format("Site name should not be empty or longer than %d characters.",SITE_NAME_LENGTH_LIMIT));  }  for (  Site eachSite : drUtil.listSites()) {    if (eachSite.getUuid().equals(uuid)) {      continue;    }    if (eachSite.getName().equals(siteParam.getName())) {      throw APIException.internalServerErrors.addStandbyPrecheckFailed("Duplicate site name");    }  }  try {    site.setName(siteParam.getName());    site.setDescription(siteParam.getDescription());    coordinator.persistServiceConfiguration(site.toConfiguration());    auditDisasterRecoveryOps(OperationTypeEnum.UPDATE_SITE,AuditLogManager.AUDITLOG_SUCCESS,null,site.getName(),site.getVipEndPoint(),site.getUuid());    return Response.status(Response.Status.ACCEPTED).build();  } catch (  Exception e) {    log.error("Error happened when update site %s",uuid,e);    auditDisasterRecoveryOps(OperationTypeEnum.UPDATE_SITE,AuditLogManager.AUDITLOG_FAILURE,null,site.getName(),site.getVipEndPoint(),site.getUuid());    throw APIException.internalServerErrors.updateSiteFailed(site.getName(),e.getMessage());  }}  }
class C{  public AugmentedNode<ILineSegment> leftNeighbor(EventPoint ep){  AugmentedNode<ILineSegment> n=state.root();  if (n == null) {    return null;  }  while (n.key() == null) {    AugmentedNode<ILineSegment> rt=n.right();    if (rt.min.pointOnRight(ep.point)) {      n=n.right();    } else {      n=n.left();    }  }  if (n.key().pointOnRight(ep.point)) {    return n;  }  return null;}  }
class C{  public static final int binarySearch(int[] a,int key,int length){  int x1=0;  int x2=length;  int i=x2 / 2;  while (x1 < x2) {    if (a[i] == key) {      return i;    } else     if (a[i] < key) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public void testOneOne(){  BigInteger aNumber=BigInteger.ONE;  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.and(bNumber);  assertTrue(result.equals(BigInteger.ONE));  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public NSSet(NSObject... objects){  set=new LinkedHashSet<NSObject>();  set.addAll(Arrays.asList(objects));}  }
class C{  public static BigDecimal minPositive(final BigDecimal first,final BigDecimal second){  if (first == null || notNull(first).equals(BigDecimal.ZERO)) {    return notNull(second);  } else   if (second == null || notNull(second).equals(BigDecimal.ZERO)) {    return notNull(first);  } else   if (isFirstBiggerThanSecond(notNull(first),notNull(second))) {    return notNull(second);  }  return notNull(first);}  }
class C{  @Inject private SingletonTSDBService(SystemConfiguration config,MonitorService monitorService){  super(config,monitorService);}  }
class C{  private void doNotify(Event e){  latestEvents.offer(e);}  }
class C{  @Override protected void finalize() throws Throwable {  this.deleteImage();  super.finalize();}  }
class C{  private void endArg(){  function.setArg(arg);  insideAttribute=false;}  }
class C{  public boolean abort(){  if (this.bitcoinController.getModel().thereIsNoActiveWallet()) {    MessageManager.INSTANCE.addMessage(new Message(controller.getLocaliser().getString("multiBitSubmitAction.thereIsNoActiveWallet")));    return true;  }  WalletData perWalletModelData=this.bitcoinController.getModel().getActivePerWalletModelData();  boolean haveFilesChanged=this.bitcoinController.getFileHandler().haveFilesChanged(perWalletModelData);  if (haveFilesChanged) {    perWalletModelData.setFilesHaveBeenChangedByAnotherProcess(true);    this.bitcoinController.fireFilesHaveBeenChangedByAnotherProcess(perWalletModelData);    return true;  }  return false;}  }
class C{  public static int binarySearchFromTo(double[] list,double key,int from,int to){  double midVal;  while (from <= to) {    int mid=(from + to) / 2;    midVal=list[mid];    if (midVal < key)     from=mid + 1; else     if (midVal > key)     to=mid - 1; else     return mid;  }  return -(from + 1);}  }
class C{  private void addVolumeToBlockConsistencyGroup(URI cgUri,Volume volume){  volume.addConsistencyGroup(cgUri.toString());  _dbClient.persistObject(volume);}  }
class C{  protected void addDeprecatedPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DeprecatableElement_deprecated_feature"),getString("_UI_PropertyDescriptor_description","_UI_DeprecatableElement_deprecated_feature","_UI_DeprecatableElement_type"),SGenPackage.Literals.DEPRECATABLE_ELEMENT__DEPRECATED,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void postUnmarshallingInit(){  fanOut=new HashMap<Neuron,Synapse>();  fanIn=new ArrayList<Synapse>();  if (polarity == null) {    polarity=Polarity.BOTH;  }}  }
class C{  public static void writeMetadata(ByteBuf buf,List<Entry> entries) throws IOException {  for (  Entry entry : entries) {    MetadataIndex index=entry.index;    Object value=entry.value;    int type=index.getType().getId();    int id=index.getIndex();    buf.writeByte(id);    buf.writeByte(type);    if (!index.getType().isOptional() && value == null) {      continue;    }    if (index.getType().isOptional()) {      buf.writeBoolean(value != null);      if (value == null) {        continue;      }    }switch (index.getType()) {case BYTE:      buf.writeByte((Byte)value);    break;case INT:  ByteBufUtils.writeVarInt(buf,(Integer)value);break;case FLOAT:buf.writeFloat((Float)value);break;case STRING:ByteBufUtils.writeUTF8(buf,(String)value);break;case CHAT:writeChat(buf,(TextMessage)value);break;case ITEM:writeSlot(buf,(ItemStack)value);break;case BOOLEAN:buf.writeBoolean((Boolean)value);break;case VECTOR:EulerAngle angle=(EulerAngle)value;buf.writeFloat((float)Math.toDegrees(angle.getX()));buf.writeFloat((float)Math.toDegrees(angle.getY()));buf.writeFloat((float)Math.toDegrees(angle.getZ()));break;case POSITION:case OPTPOSITION:BlockVector vector=(BlockVector)value;buf.writeLong(Position.getPosition(vector));break;case DIRECTION:ByteBufUtils.writeVarInt(buf,(Integer)value);break;case OPTUUID:writeUuid(buf,(UUID)value);break;case BLOCKID:ByteBufUtils.writeVarInt(buf,(Integer)value);break;}}buf.writeByte(0xff);}  }
class C{  public static String uNibble(int v){  char[] result=new char[1];  result[0]=Character.forDigit(v & 0x0f,16);  return new String(result);}  }
class C{  public Text subtext(int start){  return subtext(start,length());}  }
class C{  public AdempiereButtonListener(AbstractButton b){  super(b);}  }
class C{  public boolean validatePhysicalTurnout(String turnoutName,Component openPane){  if (turnoutName.length() < 1) {    return false;  }  LayoutTurnout t=null;  for (int i=0; i < turnoutList.size(); i++) {    t=turnoutList.get(i);    log.debug("LT '" + t.getName() + "', Turnout tested '"+ t.getTurnoutName()+ "' ");    Turnout to=t.getTurnout();    Turnout to2=null;    if (t.getTurnoutType() >= LayoutTurnout.DOUBLE_XOVER) {      to2=t.getSecondTurnout();    }    if (to != null) {      String uname=to.getUserName();      if ((to.getSystemName().equals(turnoutName.toUpperCase())) || ((uname != null) && (uname.equals(turnoutName)))) {        JOptionPane.showMessageDialog(openPane,java.text.MessageFormat.format(rb.getString("Error4"),new Object[]{turnoutName}),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);        return false;      }    }    if (to2 != null) {      String uname=to2.getUserName();      if ((to2.getSystemName().equals(turnoutName.toUpperCase())) || ((uname != null) && (uname.equals(turnoutName)))) {        JOptionPane.showMessageDialog(openPane,java.text.MessageFormat.format(rb.getString("Error4"),new Object[]{turnoutName}),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);        return false;      }    }  }  for (  LayoutSlip slip : slipList) {    Turnout to=slip.getTurnout();    if (to != null) {      String uname=to.getUserName();      if (to.getSystemName().equals(turnoutName) || (uname != null && uname.equals(turnoutName))) {        JOptionPane.showMessageDialog(openPane,java.text.MessageFormat.format(rb.getString("Error4"),new Object[]{turnoutName}),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);        return false;      }    }    to=slip.getTurnoutB();    if (to != null) {      String uname=to.getUserName();      if (to.getSystemName().equals(turnoutName) || (uname != null && uname.equals(turnoutName))) {        JOptionPane.showMessageDialog(openPane,java.text.MessageFormat.format(rb.getString("Error4"),new Object[]{turnoutName}),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);        return false;      }    }  }  Turnout to=InstanceManager.turnoutManagerInstance().getTurnout(turnoutName);  if (to == null) {    JOptionPane.showMessageDialog(openPane,java.text.MessageFormat.format(rb.getString("Error8"),new Object[]{turnoutName}),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    return false;  }  return true;}  }
class C{  public EventBean await(){  if (!earlier.isCompleted) {synchronized (this) {      if (!earlier.isCompleted) {        try {          this.wait(msecTimeout);        } catch (        InterruptedException e) {          log.error("Interrupted: " + e.getMessage(),e);        }      }    }  }  if (!earlier.isCompleted) {    log.info("Wait timeout exceeded for insert-into dispatch with notify");  }  return payload;}  }
class C{  @Group(name="renderEntitiesFix",max=3) @Inject(method="renderEntities",at=@At(value="INVOKE",target=WORLD_CLIENT_GET_CHUNK_FROM_BLOCK_COORDS),locals=LocalCapture.CAPTURE_FAILHARD,require=1) public void onGetPosition(Entity renderViewEntity,ICamera camera,float partialTicks,CallbackInfo ci,int pass,double d0,double d1,double d2,Entity entity,double d3,double d4,double d5,List<Entity> list,List<Entity> list1,List<Entity> list2,BlockPos.PooledMutableBlockPos pos,Iterator<RenderGlobal.ContainerLocalRenderInformation> var21,RenderGlobal.ContainerLocalRenderInformation info){  ICubicWorld world=(ICubicWorld)info.renderChunk.getWorld();  if (world.isCubicWorld()) {    this.position=info.renderChunk.getPosition();  } else {    this.position=null;  }}  }
class C{  private String justifyTextLine(TextPaint textPaint,String lineString,int textAreaWidth){  int gapIndex=0;  float lineWidth=textPaint.measureText(lineString);  while (lineWidth < textAreaWidth && lineWidth > 0) {    gapIndex=lineString.indexOf(" ",gapIndex + 2);    if (gapIndex == -1) {      gapIndex=0;      gapIndex=lineString.indexOf(" ",gapIndex + 1);      if (gapIndex == -1)       return lineString;    }    lineString=lineString.substring(0,gapIndex) + "  " + lineString.substring(gapIndex + 1,lineString.length());    lineWidth=textPaint.measureText(lineString);  }  return lineString;}  }
class C{  public C45Split(int attIndex,int minNoObj,double sumOfWeights,boolean useMDLcorrection){  m_attIndex=attIndex;  m_minNoObj=minNoObj;  m_sumOfWeights=sumOfWeights;  m_useMDLcorrection=useMDLcorrection;}  }
class C{  public MNote(Properties ctx,int AD_Message_ID,int AD_User_ID,int AD_Table_ID,int Record_ID,String Reference,String TextMsg,String trxName){  this(ctx,AD_Message_ID,AD_User_ID,trxName);  setRecord(AD_Table_ID,Record_ID);  setReference(Reference);  setTextMsg(TextMsg);}  }
class C{  public void transformScale(Object nativeTransform,float x,float y,float z){  ((AffineTransform)nativeTransform).scale(x,y);  clamp((AffineTransform)nativeTransform);}  }
class C{  public String nextToken(){  currentPosition=(newPosition >= 0 && !delimsChanged) ? newPosition : skipDelimiters(currentPosition);  delimsChanged=false;  newPosition=-1;  if (currentPosition >= maxPosition)   throw new NoSuchElementException();  int start=currentPosition;  currentPosition=scanToken(currentPosition);  return str.substring(start,currentPosition);}  }
class C{  public static final List<PrintableComponent> findExportComponents(){  List<PrintableComponent> components=new LinkedList<>();  for (  DockableState state : RapidMinerGUI.getMainFrame().getDockingDesktop().getDockables()) {    if (state.isHidden()) {      continue;    }    Dockable dockable=state.getDockable();    Component component=dockable.getComponent();    if (component.isShowing()) {      findExportComponents(component,components);    }  }  Perspective currentPerspective=RapidMinerGUI.getMainFrame().getPerspectiveController().getModel().getSelectedPerspective();  String perspectiveName=I18N.getGUIMessage("gui.action.workspace_" + currentPerspective.getName() + ".label");  components.add(new SimplePrintableComponent(RapidMinerGUI.getMainFrame(),perspectiveName,I18N.getGUIMessage("gui.action.workspace_" + currentPerspective.getName() + ".icon")));  return components;}  }
class C{  public boolean evaluate(int fileCount,long aggregateFileSize){  return (this.fileCount > 0 && fileCount > this.fileCount) || (this.aggregateFileSize > 0 && aggregateFileSize > this.aggregateFileSize);}  }
class C{  public MrcMenu(MrcSystemConnectionMemo memo){  super();  if (memo == null) {    new Exception().printStackTrace();    return;  }  setText(memo.getUserName());  jmri.util.swing.WindowInterface wi=new jmri.util.swing.sdi.JmriJFrameInterface();  for (  Item item : panelItems) {    if (item == null) {      add(new javax.swing.JSeparator());    } else {      MrcNamedPaneAction a=new MrcNamedPaneAction(Bundle.getMessage(item.name),wi,item.load,memo);      add(a);    }  }  setEnabled(memo.getMrcTrafficController() != null);  add(new javax.swing.JSeparator());}  }
class C{  public NettyServer(URL url,ChannelHandler handler) throws RemotingException {  super(url,ChannelHandlers.wrap(handler,url.addParameterIfAbsent(Constants.THREAD_NAME_KEY,SERVER_THREAD_POOL_NAME + "-" + url.getPath())));}  }
class C{  private void updatePresentation(TextPresentation textPresentation,List<AttributedPosition> addedPositions,List<AttributedPosition> removedPositions){  Runnable runnable=presenter.createUpdateRunnable(textPresentation,addedPositions,removedPositions);  if (runnable == null)   return;  Display display=Display.getDefault();  display.asyncExec(runnable);}  }
class C{  public static boolean zkPathExists(ZooKeeper zkHandle,String path) throws KeeperException, InterruptedException {  if (zkHandle.exists(path,false) == null) {    return false;  } else {    return true;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  java.util.Vector rv=new java.util.Vector();  if (tun != null) {    SFIRTuner.Remote rem=tun.getRemoteInfo(remoteName);    if (rem != null) {      SFIRTuner.Command cmd=rem.command;      while (cmd != null) {        rv.add(cmd.name);        cmd=cmd.next;      }    }  }  return rv;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:08.032 -0400",hash_original_method="27C4960199EA96FF5815C63B3264D107",hash_generated_method="FDC56AD90C69FF26B7A4600FDFE5832B") @Override public void flush(){  if (this.os != null) {    try {      if (this.writer != null) {        this.writer.flush();      } else {        this.os.flush();      }    } catch (    Exception e) {      getErrorManager().error("Exception occurred when flushing the output stream",e,ErrorManager.FLUSH_FAILURE);    }  }}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  public boolean isOverWriteExistingData(){  return overWriteExistingData;}  }
class C{  private void initConnection() throws AdeException {  if (!dbPropertiesInitialized) {    throw new AdeInternalException("DB configuration is undefined.");  }  mLogger.debug("Loading driver " + dbDriver);  try {    Class.forName(dbDriver);  } catch (  ClassNotFoundException e) {    throw new AdeInternalException("Loading driver failed.",e);  }  mLogger.debug("Connecting to database " + dbURL);  try {    if (dbUserName == null || dbUserPassword == null) {      dbConnection=DriverManager.getConnection(dbURL);    } else {      dbConnection=DriverManager.getConnection(dbURL,dbUserName,dbUserPassword);    }  } catch (  SQLException e) {    throw new AdeInternalException("Failed obtaining connection.",e);  }catch (  Throwable t) {    throw new AdeInternalException("Failed obtaining connection.",t);  }}  }
class C{  protected void removeEventListeners(Document doc){  AbstractNode n=(AbstractNode)doc;  XBLEventSupport es=(XBLEventSupport)n.getEventSupport();  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"click",mouseclickListener,true);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseover",mouseoverListener,true);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseout",mouseoutListener,true);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusIn",domFocusInListener,true);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusOut",domFocusOutListener,true);}  }
class C{  public static void printConcatLine(Object... messages){  if (!isDisabled()) {    buffer.setLength(0);    for (int i=0; i < messages.length; i++) {      buffer.append(String.valueOf(messages[i]));    }    printLine(buffer);  }}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames) throws RuntimeCopyException {  try {    return new StackMapTable(newCp,new Copier(this.constPool,info,newCp,classnames).doit());  } catch (  BadBytecode e) {    throw new RuntimeCopyException("bad bytecode. fatal?");  }}  }
class C{  protected void backgroundImpl(){  pushStyle();  pushMatrix();  resetMatrix();  fill(backgroundColor);  rect(0,0,width,height);  popMatrix();  popStyle();}  }
class C{  private static img createImage(String AD_Language,String name){  return createImage(AD_Language,name,null,true,false);}  }
class C{  private SaveAction(){  super("Save");}  }
class C{  private int[] findNearestArea(int cellX,int cellY,int spanX,int spanY,int[] direction,boolean[][] occupied,boolean blockOccupied[][],int[] result){  final int[] bestXY=result != null ? result : new int[2];  float bestDistance=Float.MAX_VALUE;  int bestDirectionScore=Integer.MIN_VALUE;  final int countX=mCountX;  final int countY=mCountY;  for (int y=0; y < countY - (spanY - 1); y++) {    inner:     for (int x=0; x < countX - (spanX - 1); x++) {      for (int i=0; i < spanX; i++) {        for (int j=0; j < spanY; j++) {          if (occupied[x + i][y + j] && (blockOccupied == null || blockOccupied[i][j])) {            continue inner;          }        }      }      float distance=(float)Math.hypot(x - cellX,y - cellY);      int[] curDirection=mTmpPoint;      computeDirectionVector(x - cellX,y - cellY,curDirection);      int curDirectionScore=direction[0] * curDirection[0] + direction[1] * curDirection[1];      boolean exactDirectionOnly=false;      boolean directionMatches=direction[0] == curDirection[0] && direction[0] == curDirection[0];      if ((directionMatches || !exactDirectionOnly) && Float.compare(distance,bestDistance) < 0 || (Float.compare(distance,bestDistance) == 0 && curDirectionScore > bestDirectionScore)) {        bestDistance=distance;        bestDirectionScore=curDirectionScore;        bestXY[0]=x;        bestXY[1]=y;      }    }  }  if (bestDistance == Float.MAX_VALUE) {    bestXY[0]=-1;    bestXY[1]=-1;  }  return bestXY;}  }
class C{  public void onFormResubmission(WebView view,Message dontResend,Message resend){  dontResend.sendToTarget();}  }
class C{  public StringToIntTable(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new String[blocksize];  m_values=new int[m_blocksize];}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.903 -0500",hash_original_method="6AC23ECE2D15FE0B2F16B84D01FE289F",hash_generated_method="7D5E0FFC8DC0D0D6A5025A88A960BF73") public ViewPropertyAnimator y(float value){  animateProperty(Y,value);  return this;}  }
class C{  public TransformObjectivePenalize(BBOBFunction function,double factor){  super(function);  this.factor=factor;}  }
class C{  public String toString(){  return signature + ' ' + name;}  }
class C{  private int computeDepths(int startIndex,int endIndex,int startDepth){  int currDepth=startDepth;  for (int i=startIndex; i < endIndex; i++) {    DirectedEdge nextDe=(DirectedEdge)edgeList.get(i);    Label label=nextDe.getLabel();    nextDe.setEdgeDepths(Position.RIGHT,currDepth);    currDepth=nextDe.getDepth(Position.LEFT);  }  return currDepth;}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  private boolean updateProjects(){  if (!MEASURETYPE_Project.equals(getMeasureType()) || getC_ProjectType_ID() == 0)   return false;  MGoal[] goals=MGoal.getMeasureGoals(getCtx(),getPA_Measure_ID());  for (int i=0; i < goals.length; i++) {    MGoal goal=goals[i];    MRole role=null;    if (goal.getAD_Role_ID() != 0)     role=MRole.get(getCtx(),goal.getAD_Role_ID()); else     if (goal.getAD_User_ID() != 0) {      MUser user=MUser.get(getCtx(),goal.getAD_User_ID());      MRole[] roles=user.getRoles(goal.getAD_Org_ID());      if (roles.length > 0)       role=roles[0];    }    if (role == null)     role=MRole.getDefault(getCtx(),false);    MProjectType pt=MProjectType.get(getCtx(),getC_ProjectType_ID());    String sql=pt.getSqlPI(goal.getRestrictions(false),goal.getMeasureScope(),getMeasureDataType(),null,role);    BigDecimal ManualActual=DB.getSQLValueBD(null,sql,new Object[]{});    if (ManualActual == null) {      ManualActual=Env.ZERO;      log.fine("No Value = " + sql);    }    goal.setMeasureActual(ManualActual);    goal.save(get_TrxName());  }  return true;}  }
class C{  public void addPermission(AddPermissionRequest addPermissionRequest) throws AmazonServiceException, AmazonClientException {  amazonSqsToBeExtended.addPermission(addPermissionRequest);}  }
class C{  public static void e(String msg){  if (!allowE)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  @Override public boolean canHandle(URI uri){  return isDockerfileFile(uri);}  }
class C{  @Override public String eat(){  return "Mosquito consumes blood";}  }
class C{  public GroupChatMessageDeleteTask(ChatServiceImpl chatService,InstantMessagingService imService,LocalContentResolver contentResolver){  super(contentResolver,MessageData.CONTENT_URI,MessageData.KEY_MESSAGE_ID,MessageData.KEY_CHAT_ID,SELECTION_GROUP_CHATMESSAGES);  mChatService=chatService;  mImService=imService;}  }
class C{  public byte executeAttack(int i) throws NoColumnFoundException {  errorBytes=new LinkedList<>();  correctBytes=new LinkedList<>();  final byte originalByte=iv[i];  int column=findColumn(iv,c1,i);  byte byteCausingEvent;  byte plainTextByte;  if (column == FIRST_COLUMN) {    boolean searchedForAllBytes=false;    if (correctBytes.isEmpty()) {      searchedForAllBytes=findCorrectByteInFirstColumn(i);    }    byteCausingEvent=identifyCorrectByteInFirstColumn(i,searchedForAllBytes);    plainTextByte=(byte)(byteCausingEvent ^ originalByte ^ correctBytes.get(0));  } else {    byteCausingEvent=identifyErrorByteInSecondColumn(i);    plainTextByte=(byte)(byteCausingEvent ^ originalByte ^ errorBytes.get(0));  }  iv[i]=originalByte;  return plainTextByte;}  }
class C{  public boolean hasExactlyOneStep(){  return this.m_steps.size() == 1;}  }
class C{  public int incAndGetFailCnt(){  return failCnt.incrementAndGet();}  }
class C{  public JTabbedPane(int tabPlacement){  this(tabPlacement,WRAP_TAB_LAYOUT);}  }
class C{  public static void highlightAndBoldText(TextView textView,int highlightColor){  final String string=textView.getText().toString();  textView.setText(getHighlightText(textView.getContext(),string,highlightColor,true));}  }
class C{  public JParamsReason(){  initComponents();  m_ReasonModel=new ComboBoxValModel();  m_ReasonModel.add(null);  m_ReasonModel.add(MovementReason.IN_PURCHASE);  m_ReasonModel.add(MovementReason.IN_REFUND);  m_ReasonModel.add(MovementReason.IN_MOVEMENT);  m_ReasonModel.add(MovementReason.OUT_SALE);  m_ReasonModel.add(MovementReason.OUT_REFUND);  m_ReasonModel.add(MovementReason.OUT_BREAK);  m_ReasonModel.add(MovementReason.OUT_MOVEMENT);  m_ReasonModel.add(MovementReason.IN_OPEN_PACK);  m_ReasonModel.add(MovementReason.OUT_OPEN_PACK);  m_ReasonModel.add(MovementReason.IN_STOCKCHANGE);  m_ReasonModel.add(MovementReason.OUT_STOCKCHANGE);  m_jreason.setModel(m_ReasonModel);}  }
class C{  public String toGnuStepASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCIIGnuStep(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  @Override public void clear(){  try {    this.table.clear();    this.columnames.clear();  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }}  }
class C{  private void addImagesThumbnails(){  final String[] projection={MediaStore.Images.ImageColumns._ID,MediaStore.Images.ImageColumns.DATE_TAKEN,MediaStore.Images.ImageColumns.MIME_TYPE};  Cursor thumbnailsCursor=null;  try {    thumbnailsCursor=this.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,projection,null,null,MediaStore.Images.ImageColumns.DATE_TAKEN + " DESC LIMIT " + GALLERY_TABLE_ITEM_SIZE);  } catch (  Exception e) {    Log.e(LOG_TAG,"addImagesThumbnails" + e.getLocalizedMessage());  }  if (null != thumbnailsCursor) {    int timeIndex=thumbnailsCursor.getColumnIndex(MediaStore.Images.ImageColumns.DATE_TAKEN);    int idIndex=thumbnailsCursor.getColumnIndex(MediaStore.Images.ImageColumns._ID);    int mimeTypeIndex=thumbnailsCursor.getColumnIndex(MediaStore.Images.ImageColumns.MIME_TYPE);    if (thumbnailsCursor.moveToFirst()) {      do {        try {          RecentMedia recentMedia=new RecentMedia();          recentMedia.mIsVideo=false;          String id=thumbnailsCursor.getString(idIndex);          String dateAsString=thumbnailsCursor.getString(timeIndex);          recentMedia.mMimeType=thumbnailsCursor.getString(mimeTypeIndex);          recentMedia.mCreationTime=Long.parseLong(dateAsString);          recentMedia.mThumbnail=MediaStore.Images.Thumbnails.getThumbnail(this.getContentResolver(),Long.parseLong(id),MediaStore.Images.Thumbnails.MINI_KIND,null);          recentMedia.mFileUri=Uri.parse(MediaStore.Images.Media.EXTERNAL_CONTENT_URI.toString() + "/" + id);          int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,recentMedia.mFileUri);          if (0 != rotationAngle) {            android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();            bitmapMatrix.postRotate(rotationAngle);            recentMedia.mThumbnail=Bitmap.createBitmap(recentMedia.mThumbnail,0,0,recentMedia.mThumbnail.getWidth(),recentMedia.mThumbnail.getHeight(),bitmapMatrix,false);          }          mMediaStoreImagesList.add(recentMedia);        } catch (        Exception e) {          Log.e(LOG_TAG,"## addImagesThumbnails(): Msg=" + e.getMessage());        }      } while (thumbnailsCursor.moveToNext());    }    thumbnailsCursor.close();  }  Log.d(LOG_TAG,"## addImagesThumbnails(): Added count=" + mMediaStoreImagesList.size());}  }
class C{  public static boolean hasBody(Response response){  if (response.request().method().equals("HEAD")) {    return false;  }  int responseCode=response.code();  if ((responseCode < HTTP_CONTINUE || responseCode >= 200) && responseCode != HTTP_NO_CONTENT && responseCode != HTTP_NOT_MODIFIED) {    return true;  }  if (OkHeaders.contentLength(response) != -1 || "chunked".equalsIgnoreCase(response.header("Transfer-Encoding"))) {    return true;  }  return false;}  }
class C{  private BlockSnapshot prepareInternalSnapshotForVolume(Volume volume){  BlockSnapshot snapshot=new BlockSnapshot();  snapshot.setId(URIUtil.createId(BlockSnapshot.class));  snapshot.setLabel(String.format("temp-for-cloning-%s",UUID.randomUUID().toString()));  snapshot.setSourceNativeId(CephUtils.createNativeId(snapshot));  snapshot.setParent(new NamedURI(volume.getId(),volume.getLabel()));  snapshot.setStorageController(volume.getStorageController());  snapshot.setSystemType(volume.getSystemType());  snapshot.setVirtualArray(volume.getVirtualArray());  snapshot.setProtocol(new StringSet());  snapshot.getProtocol().addAll(volume.getProtocol());  snapshot.setProject(new NamedURI(volume.getProject().getURI(),volume.getProject().getName()));  snapshot.setSnapsetLabel(ResourceOnlyNameGenerator.removeSpecialCharsForName(snapshot.getLabel(),SmisConstants.MAX_SNAPSHOT_NAME_LENGTH));  snapshot.addInternalFlags(Flag.INTERNAL_OBJECT);  return snapshot;}  }
class C{  @Override public void displayView(DisplayHint displayHint){  if (DisplayHint.WALLET_TRANSACTIONS_HAVE_CHANGED == displayHint) {    return;  }  originalShowTicker=!Boolean.FALSE.toString().equals(controller.getModel().getUserPreference(ExchangeModel.TICKER_SHOW));  showTicker.setSelected(originalShowTicker);  originalShowBitcoinConvertedToFiat=!Boolean.FALSE.toString().equals(controller.getModel().getUserPreference(ExchangeModel.SHOW_BITCOIN_CONVERTED_TO_FIAT));  showBitcoinConvertedToFiat.setSelected(originalShowBitcoinConvertedToFiat);  String showDialogString=controller.getModel().getUserPreference(BitcoinModel.OPEN_URI_SHOW_DIALOG);  String useUriString=controller.getModel().getUserPreference(BitcoinModel.OPEN_URI_USE_URI);  if (!(Boolean.FALSE.toString().equalsIgnoreCase(showDialogString))) {    askEveryTime.setSelected(true);  } else {    if (!(Boolean.FALSE.toString().equalsIgnoreCase(useUriString))) {      fillAutomatically.setSelected(true);    } else {      ignoreAll.setSelected(true);    }  }  String fontNameString=controller.getModel().getUserPreference(CoreModel.FONT_NAME);  if (fontNameString == null || "".equals(fontNameString)) {    fontNameString=ColorAndFontConstants.MULTIBIT_DEFAULT_FONT_NAME;  }  originalFontName=fontNameString;  int fontStyle=ColorAndFontConstants.MULTIBIT_DEFAULT_FONT_STYLE;  String fontStyleString=controller.getModel().getUserPreference(CoreModel.FONT_STYLE);  if (fontStyleString != null && !"".equals(fontStyleString)) {    try {      fontStyle=Integer.parseInt(fontStyleString);    } catch (    NumberFormatException nfe) {    }  }  originalFontStyle="" + fontStyle;  int fontSize=ColorAndFontConstants.MULTIBIT_DEFAULT_FONT_SIZE;  String fontSizeString=controller.getModel().getUserPreference(CoreModel.FONT_SIZE);  if (fontSizeString != null && !"".equals(fontSizeString)) {    try {      fontSize=Integer.parseInt(fontSizeString);    } catch (    NumberFormatException nfe) {    }  }  originalFontSize="" + fontSize;  setSelectedFont(new Font(fontNameString,fontStyle,fontSize));  String canUndoPreferencesChanges=controller.getModel().getUserPreference(CoreModel.CAN_UNDO_PREFERENCES_CHANGES);  if (Boolean.TRUE.toString().equals(canUndoPreferencesChanges)) {    undoChangesButton.setEnabled(true);    String previousUndoChangesText=controller.getModel().getUserPreference(CoreModel.PREVIOUS_UNDO_CHANGES_TEXT);    if (previousUndoChangesText != null && !"".equals(previousUndoChangesText)) {      undoChangesButton.setText(previousUndoChangesText);    }    String previousFontName=controller.getModel().getUserPreference(CoreModel.PREVIOUS_FONT_NAME);    if (previousFontName != null && !"".equals(previousFontName)) {      undoChangesButton.setFont(new Font(previousFontName,FontSizer.INSTANCE.getAdjustedDefaultFont().getStyle(),FontSizer.INSTANCE.getAdjustedDefaultFont().getSize()));    }  } else {    undoChangesButton.setEnabled(false);  }  originalOERApiCode=controller.getModel().getUserPreference(ExchangeModel.OPEN_EXCHANGE_RATES_API_CODE);  oerApiCodeTextField.setText(originalOERApiCode);  invalidate();  validate();  repaint();}  }
class C{  protected void copySelectedBean(){  if (Debug.debugging("beanbox"))   Debug.output("Enter> copySelectedBean");  if (selectedBean == null || selectedBeanLocation == null) {    clearSelection();    if (Debug.debugging("beanbox"))     Debug.output("selectedBean=" + selectedBean);    if (Debug.debugging("beanbox"))     Debug.output("selectedBeanLocation=" + selectedBeanLocation);    return;  }  try {    serBean=new ByteArrayOutputStream();    ObjectOutputStream oos=new ObjectOutputStream(serBean);    oos.writeObject(selectedBean);  } catch (  Exception e) {    e.printStackTrace();    clearSelection();    if (Debug.debugging("beanbox"))     Debug.output("Exit> copySelectedBean");    return;  }  cutBean=null;  if (Debug.debugging("beanbox"))   Debug.output("Exit> copySelectedBean");}  }
class C{  public void print(){  for (int i=0; i < numArguments; i++) {    System.out.println("arg: " + arg(i) + " type: "+ Op.humanName(type(i))+ " size: "+ size(i));  }}  }
class C{  public Text padRight(int len,char c){  final int padSize=(len <= length()) ? 0 : len - length();  return concat(Text.valueOf(c,padSize));}  }
class C{  public EjbRef(String name,String ejbInterface,String ejbHomeInterface){  this.name=name;  this.ejbInterface=ejbInterface;  this.ejbHomeInterface=ejbHomeInterface;}  }
class C{  private boolean isExpectedThread(Thread thread){  for (  String known : knownThreads) {    if (thread.getName().contains(known)) {      return true;    }  }  return false;}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("SizeCriterion ( ").append("operator = ").append(this.operator).append(TAB).append(" )");  return retValue.toString();}  }
class C{  private static void generateSphere(float radius,int rings,int sectors,MDAbsObject3D object3D){  final float PI=(float)Math.PI;  final float PI_2=(float)(Math.PI / 2);  float R=1f / (float)rings;  float S=1f / (float)sectors;  short r, s;  float x, y, z;  int numPoint=(rings + 1) * (sectors + 1);  float[] vertexs=new float[numPoint * 3];  float[] texcoords=new float[numPoint * 2];  short[] indices=new short[numPoint * 6];  int t=0, v=0;  for (r=0; r < rings + 1; r++) {    for (s=0; s < sectors + 1; s++) {      x=(float)(Math.cos(2 * PI * s* S) * Math.sin(PI * r * R));      y=-(float)Math.sin(-PI_2 + PI * r * R);      z=(float)(Math.sin(2 * PI * s* S) * Math.sin(PI * r * R));      texcoords[t++]=s * S;      texcoords[t++]=r * R;      vertexs[v++]=x * radius;      vertexs[v++]=y * radius;      vertexs[v++]=z * radius;    }  }  int counter=0;  int sectorsPlusOne=sectors + 1;  for (r=0; r < rings; r++) {    for (s=0; s < sectors; s++) {      indices[counter++]=(short)(r * sectorsPlusOne + s);      indices[counter++]=(short)((r + 1) * sectorsPlusOne + (s));      indices[counter++]=(short)((r) * sectorsPlusOne + (s + 1));      indices[counter++]=(short)((r) * sectorsPlusOne + (s + 1));      indices[counter++]=(short)((r + 1) * sectorsPlusOne + (s));      indices[counter++]=(short)((r + 1) * sectorsPlusOne + (s + 1));    }  }  ByteBuffer bb=ByteBuffer.allocateDirect(vertexs.length * 4);  bb.order(ByteOrder.nativeOrder());  FloatBuffer vertexBuffer=bb.asFloatBuffer();  vertexBuffer.put(vertexs);  vertexBuffer.position(0);  ByteBuffer cc=ByteBuffer.allocateDirect(texcoords.length * 4);  cc.order(ByteOrder.nativeOrder());  FloatBuffer texBuffer=cc.asFloatBuffer();  texBuffer.put(texcoords);  texBuffer.position(0);  ByteBuffer dlb=ByteBuffer.allocateDirect(indices.length * 2);  dlb.order(ByteOrder.nativeOrder());  ShortBuffer indexBuffer=dlb.asShortBuffer();  indexBuffer.put(indices);  indexBuffer.position(0);  object3D.setIndicesBuffer(indexBuffer);  object3D.setTexCoordinateBuffer(0,texBuffer);  object3D.setTexCoordinateBuffer(1,texBuffer);  object3D.setVerticesBuffer(0,vertexBuffer);  object3D.setVerticesBuffer(1,vertexBuffer);  object3D.setNumIndices(indices.length);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public BlazeGraphReadOnly readOnlyConnection(){  if (closed)   throw Exceptions.alreadyClosed();  final BigdataSailRepositoryConnection cxn=Code.wrapThrow(null);  return new BlazeGraphReadOnly(repo,cxn,config);}  }
class C{  public boolean isConfigurationValid(){  return readBoolean(RcsSettingsData.CONFIGURATION_VALID);}  }
class C{  public JMenuItem add(String s){  return add(new JMenuItem(s));}  }
class C{  public void connect(BluetoothDevice device){  if (mService != null) {    mService.connect(device);  }}  }
class C{  public VariableGridLayout(int rows,int cols){  this(rows,cols,0,0);  if (rows != 0) {    rowsSet=new BitSet(rows);    stdRowFractions(rows);  }  if (cols != 0) {    colsSet=new BitSet(cols);    stdColFractions(cols);  }}  }
class C{  public Model removeProperty(String name){  if (properties().remove(requireNonNull(name,"Property name should not be null")) != null) {    removePropertyFromXML(name);  }  return this;}  }
class C{  public ExternalHostSystem(ImapFeatures features,String host,int port,Monitor monitor,String shabang,UserAdder userAdder){  super(host,port,monitor,shabang);  this.features=features;  this.userAdder=userAdder;}  }
class C{  public static ScrollViewLicenseFragment newInstance(int[] licenseIDs){  return (ScrollViewLicenseFragment)onNewInstance(new ScrollViewLicenseFragment(),licenseIDs);}  }
class C{  public void actionPerformed(ActionEvent e){  log.info(e.getActionCommand() + " - " + e.getModifiers());  if (m_disposing || isUILocked())   return;  m_lastModifiers=e.getModifiers();  String cmd=e.getActionCommand();  if (cmd.equals("ScreenShot")) {    AEnv.actionPerformed(e.getActionCommand(),m_curWindowNo,this);    return;  }  if (!cmd.equals(aShowAllWindow.getName()))   setBusy(true,true);  if (e.getSource() instanceof VButton) {    setStatusLine(processButtonCallout((VButton)e.getSource()),true);    actionButton((VButton)e.getSource());    setBusy(false,true);    return;  }  try {    if (cmd.equals(aReport.getName()))     cmd_report(); else     if (cmd.equals(aPrint.getName()))     cmd_print(); else     if (cmd.equals(aPrintPreview.getName()))     cmd_print(true); else     if (aExport != null && cmd.equals(aExport.getName()))     cmd_export(); else     if (cmd.equals(aEnd.getName()))     cmd_end(false); else     if (cmd.equals(aExit.getName()))     cmd_end(true); else     if (cmd.equals(aNew.getName()))     cmd_new(false); else     if (cmd.equals(aSave.getName()))     cmd_save(true); else     if (cmd.equals(aCopy.getName()))     cmd_new(true); else     if (cmd.equals(aDelete.getName()))     cmd_delete(); else     if (cmd.equals(aDeleteSelection.getName()))     cmd_deleteSelection(); else     if (cmd.equals(aIgnore.getName()))     cmd_ignore(); else     if (cmd.equals(aRefresh.getName()))     cmd_refresh(); else     if (cmd.equals(aFind.getName()))     cmd_find(); else     if (m_isPersonalLock && cmd.equals(aLock.getName()))     cmd_lock(); else     if (cmd.equals(aAttachment.getName()))     cmd_attachment(); else     if (cmd.equals(aChat.getName()))     cmd_chat(); else     if (cmd.equals(aHistory.getName()))     cmd_history(); else     if (cmd.equals(aMulti.getName()))     m_curGC.switchRowPresentation(); else     if (cmd.equals(aHome.getName())) {      setBusy(false,false);      AEnv.showWindow(Env.getWindow(0));      return;    } else     if (cmd.equals(aFirst.getName())) {      m_curGC.getTable().removeEditor();      m_curGC.acceptEditorChanges();      m_curTab.navigate(0);    } else     if (cmd.equals(aSwitchLinesUpAction.getName())) {      m_curGC.getTable().removeEditor();      m_curTab.switchRows(m_curTab.getCurrentRow(),m_curTab.getCurrentRow() - 1,m_curGC.getTable().getSortColumn(),m_curGC.getTable().isSortAscending());      m_curGC.getTable().requestFocus();    } else     if (cmd.equals(aPrevious.getName())) {      m_curGC.getTable().removeEditor();      m_curGC.acceptEditorChanges();      if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0) {        m_curTab.switchRows(m_curTab.getCurrentRow(),m_curTab.getCurrentRow() - 1,m_curGC.getTable().getSortColumn(),m_curGC.getTable().isSortAscending());      } else {        m_curTab.navigateRelative(-1);      }    } else     if (cmd.equals(aSwitchLinesDownAction.getName())) {      m_curGC.getTable().removeEditor();      m_curTab.switchRows(m_curTab.getCurrentRow(),m_curTab.getCurrentRow() + 1,m_curGC.getTable().getSortColumn(),m_curGC.getTable().isSortAscending());      m_curGC.getTable().requestFocus();    } else     if (cmd.equals(aNext.getName())) {      m_curGC.getTable().removeEditor();      m_curGC.acceptEditorChanges();      if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0) {        m_curTab.switchRows(m_curTab.getCurrentRow(),m_curTab.getCurrentRow() + 1,m_curGC.getTable().getSortColumn(),m_curGC.getTable().isSortAscending());      } else {        m_curTab.navigateRelative(+1);      }    } else     if (cmd.equals(aLast.getName())) {      m_curGC.getTable().removeEditor();      m_curGC.acceptEditorChanges();      m_curTab.navigate(m_curTab.getRowCount() - 1);    } else     if (cmd.equals(aParent.getName()))     cmd_parent(); else     if (cmd.equals(aDetail.getName()))     cmd_detail(); else     if (cmd.equals(aZoomAcross.getName()))     cmd_zoomAcross(); else     if (cmd.equals(aRequest.getName()))     cmd_request(); else     if (cmd.equals(aArchive.getName()))     cmd_archive(); else     if (aWorkflow != null && cmd.equals(aWorkflow.getName())) {      if (m_curTab.getRecord_ID() <= 0)       ; else       if (m_curTab.getTabNo() == 0 && m_mWorkbench.getMWindow(getWindowIndex()).isTransaction())       AEnv.startWorkflowProcess(m_curTab.getAD_Table_ID(),m_curTab.getRecord_ID()); else       AEnv.startWorkflowProcess(m_curTab.getAD_Table_ID(),m_curTab.getRecord_ID());    } else     if (aWinSize != null && cmd.equals(aWinSize.getName()))     cmd_winSize(); else     if (cmd.equals(aHelp.getName()))     cmd_help(); else     if (cmd.equals(aLogout.getName()))     cmd_logout(); else     if (cmd.equals(aShowAllWindow.getName()))     m_WindowMenu.expose(); else     if (!AEnv.actionPerformed(e.getActionCommand(),m_curWindowNo,this))     log.log(Level.SEVERE,"No action for: " + cmd);  } catch (  Exception ex) {    log.log(Level.SEVERE,cmd,ex);    String msg=ex.getMessage();    if (msg == null || msg.length() == 0)     msg=ex.toString();    msg=Msg.parseTranslation(m_ctx,msg);    ADialog.error(m_curWindowNo,this,"Error",msg);  }  m_curWinTab.requestFocusInWindow();  setBusy(false,true);}  }
class C{  public void requestInfoLine(InfoDisplayEvent event){  displayInfoLine(event.getInformation(),event.getPreferredLocation());}  }
class C{  public String toClassDetailsString(String title) throws Exception {  if (!m_ClassIsNominal) {    throw new Exception("Evaluation: No per class statistics possible!");  }  boolean displayTP=m_metricsToDisplay.contains("tp rate");  boolean displayFP=m_metricsToDisplay.contains("fp rate");  boolean displayP=m_metricsToDisplay.contains("precision");  boolean displayR=m_metricsToDisplay.contains("recall");  boolean displayFM=m_metricsToDisplay.contains("f-measure");  boolean displayMCC=m_metricsToDisplay.contains("mcc");  boolean displayROC=m_metricsToDisplay.contains("roc area");  boolean displayPRC=m_metricsToDisplay.contains("prc area");  StringBuffer text=new StringBuffer(title + "\n                 " + (displayTP ? "TP Rate  " : "")+ (displayFP ? "FP Rate  " : "")+ (displayP ? "Precision  " : "")+ (displayR ? "Recall   " : "")+ (displayFM ? "F-Measure  " : "")+ (displayMCC ? "MCC      " : "")+ (displayROC ? "ROC Area  " : "")+ (displayPRC ? "PRC Area  " : ""));  if (m_pluginMetrics != null && m_pluginMetrics.size() > 0) {    for (    AbstractEvaluationMetric m : m_pluginMetrics) {      if (m instanceof InformationRetrievalEvaluationMetric && m.appliesToNominalClass()) {        String metricName=m.getMetricName().toLowerCase();        if (m_metricsToDisplay.contains(metricName)) {          List<String> statNames=m.getStatisticNames();          for (          String name : statNames) {            if (m_metricsToDisplay.contains(name.toLowerCase())) {              if (name.length() < 7) {                name=Utils.padRight(name,7);              }              text.append(name).append("  ");            }          }        }      }    }  }  text.append("Class\n");  for (int i=0; i < m_NumClasses; i++) {    text.append("                 ");    if (displayTP) {      text.append(String.format("%-9.3f",truePositiveRate(i)));    }    if (displayFP) {      text.append(String.format("%-9.3f",falsePositiveRate(i)));    }    if (displayP) {      text.append(String.format("%-11.3f",precision(i)));    }    if (displayR) {      text.append(String.format("%-9.3f",recall(i)));    }    if (displayFM) {      text.append(String.format("%-11.3f",fMeasure(i)));    }    if (displayMCC) {      double mat=matthewsCorrelationCoefficient(i);      if (Utils.isMissingValue(mat)) {        text.append("?       ");      } else {        text.append(String.format("%-9.3f",matthewsCorrelationCoefficient(i)));      }    }    if (displayROC) {      double rocVal=areaUnderROC(i);      if (Utils.isMissingValue(rocVal)) {        text.append("?         ");      } else {        text.append(String.format("%-10.3f",rocVal));      }    }    if (displayPRC) {      double prcVal=areaUnderPRC(i);      if (Utils.isMissingValue(prcVal)) {        text.append("?         ");      } else {        text.append(String.format("%-10.3f",prcVal));      }    }    if (m_pluginMetrics != null && m_pluginMetrics.size() > 0) {      for (      AbstractEvaluationMetric m : m_pluginMetrics) {        if (m instanceof InformationRetrievalEvaluationMetric && m.appliesToNominalClass()) {          String metricName=m.getMetricName().toLowerCase();          if (m_metricsToDisplay.contains(metricName)) {            List<String> statNames=m.getStatisticNames();            for (            String name : statNames) {              if (m_metricsToDisplay.contains(name.toLowerCase())) {                double stat=((InformationRetrievalEvaluationMetric)m).getStatistic(name,i);                if (name.length() < 7) {                  name=Utils.padRight(name,7);                }                if (Utils.isMissingValue(stat)) {                  Utils.padRight("?",name.length());                } else {                  text.append(String.format("%-" + name.length() + ".3f",stat)).append("  ");                }              }            }          }        }      }    }    text.append(m_ClassNames[i]).append('\n');  }  text.append("Weighted Avg.    ");  if (displayTP) {    text.append(String.format("%-9.3f",weightedTruePositiveRate()));  }  if (displayFP) {    text.append(String.format("%-9.3f",weightedFalsePositiveRate()));  }  if (displayP) {    text.append(String.format("%-11.3f",weightedPrecision()));  }  if (displayR) {    text.append(String.format("%-9.3f",weightedRecall()));  }  if (displayFM) {    text.append(String.format("%-11.3f",weightedFMeasure()));  }  if (displayMCC) {    text.append(String.format("%-9.3f",weightedMatthewsCorrelation()));  }  if (displayROC) {    text.append(String.format("%-10.3f",weightedAreaUnderROC()));  }  if (displayPRC) {    text.append(String.format("%-10.3f",weightedAreaUnderPRC()));  }  if (m_pluginMetrics != null && m_pluginMetrics.size() > 0) {    for (    AbstractEvaluationMetric m : m_pluginMetrics) {      if (m instanceof InformationRetrievalEvaluationMetric && m.appliesToNominalClass()) {        String metricName=m.getMetricName().toLowerCase();        if (m_metricsToDisplay.contains(metricName)) {          List<String> statNames=m.getStatisticNames();          for (          String name : statNames) {            if (m_metricsToDisplay.contains(name.toLowerCase())) {              double stat=((InformationRetrievalEvaluationMetric)m).getClassWeightedAverageStatistic(name);              if (name.length() < 7) {                name=Utils.padRight(name,7);              }              if (Utils.isMissingValue(stat)) {                Utils.padRight("?",name.length());              } else {                text.append(String.format("%-" + name.length() + ".3f",stat)).append("  ");              }            }          }        }      }    }  }  text.append("\n");  return text.toString();}  }
class C{  public static Certificate loadCertificate(HashMap<String,String> data){  Certificate cert=new Certificate();  cert.fingerprint=data.get("fingerprint");  cert.commonName=data.get("commonName");  cert.organization=data.get("organization");  try {    cert.validFrom=cert.dateFormat.parse(data.get("validFrom"));    cert.validTo=cert.dateFormat.parse(data.get("validTo"));  } catch (  ParseException e) {    cert.validFrom=new Date(0);    cert.validTo=new Date(0);    log.error("Unable to parse certificate date",e);  }  cert.valid=Boolean.parseBoolean(data.get("valid"));  return cert;}  }
class C{  @Override public void clear(){  Arrays.fill(elements,null);  size=0;}  }
class C{  public Collection<TMemberEntry> memberEntries(ContainerType<?> type){  return new MemberEntriesCollector(type,true,true).getResult();}  }
class C{  public final void clear(){  mItems.clear();  mSorted=true;}  }
class C{  private void removeOccupant(int x,int y){  if (isEmpty(x,y) || !inBounds(x,y)) {    throw new IllegalArgumentException(String.format("Tried to remove (%d, %d), but " + " space is empty or out of bounds.",x,y));  }  occupants[y][x]=new Empty();}  }
class C{  public void ReInit(JavaCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  @Override public void execute(Player admin,List<String> args){  super.execute(admin,args);  TurnNotifier.get().dontNotify(this);  StendhalRPWorld world=SingletonRepository.getRPWorld();  keepFreeAreas.add(new KeepFreeArea(new Area(world.getZone("0_semos_city"),17,23,3,2),23,25));  keepFreeAreas.add(new KeepFreeArea(new Area(world.getZone("int_semos_bank"),8,28,11,29),24,27));  keepFreeAreas.add(new KeepFreeArea(new Area(world.getZone("0_semos_city"),40,38,4,3),50,40));  keepFreeAreas.add(new KeepFreeArea(new Area(world.getZone("int_semos_tavern_0"),21,15,3,2),22,11));  TurnNotifier.get().notifyInSeconds(CHECK_INTERVAL,this);}  }
class C{  private void checkEnabledCipherSuites() throws SSLException {  for (  String enabledCipherSuite : enabledCipherSuites) {    if (enabledCipherSuite.equals(NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {      continue;    }    String keyType=CipherSuite.getByName(enabledCipherSuite).getServerKeyType();    if (keyType == null) {      return;    }    if (keyType.equals(CipherSuite.KEY_TYPE_RSA) || keyType.equals(CipherSuite.KEY_TYPE_DH_RSA)) {      if (checkForPrivateKey(keyType,RSAPrivateKey.class)) {        return;      }      continue;    }    if (keyType.equals(CipherSuite.KEY_TYPE_DSA) || keyType.equals(CipherSuite.KEY_TYPE_DH_DSA)) {      if (checkForPrivateKey(keyType,DSAPrivateKey.class)) {        return;      }      continue;    }    if (keyType.equals(CipherSuite.KEY_TYPE_EC) || keyType.equals(CipherSuite.KEY_TYPE_EC_RSA) || keyType.equals(CipherSuite.KEY_TYPE_EC_EC)) {      if (checkForPrivateKey(keyType,ECPrivateKey.class)) {        return;      }      continue;    }    throw new IllegalStateException("Unknown key type " + keyType);  }  throw new SSLException("Could not find any key store entries " + "to support the enabled cipher suites.");}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, loadingHeader, efficiencyHeader, absorptionHeader, outputHeader;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  double gridRes;  double flowDir=0;  double efficiencyMultiplier=1d;  double eff, absorp;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  loadingHeader=args[1];  efficiencyHeader=args[2];  absorptionHeader=args[3];  outputHeader=args[4];  if (pointerHeader.isEmpty() || outputHeader.isEmpty() || loadingHeader.isEmpty()|| efficiencyHeader.isEmpty()|| absorptionHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    gridRes=pntr.getCellSizeX();    WhiteboxRaster loading=new WhiteboxRaster(loadingHeader,"r");    if (loading.getNumberRows() != rows || loading.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataLoading=loading.getNoDataValue();    WhiteboxRaster efficiency=new WhiteboxRaster(efficiencyHeader,"r");    if (efficiency.getNumberRows() != rows || efficiency.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataEfficiency=efficiency.getNoDataValue();    if (efficiency.getMaximumValue() > 1) {      efficiencyMultiplier=0.01;    }    WhiteboxRaster absorption=new WhiteboxRaster(absorptionHeader,"r");    if (absorption.getNumberRows() != rows || absorption.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataAbsorption=absorption.getNoDataValue();    double outputNoData=-32768.0;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,outputNoData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData && loading.getValue(row,col) != noDataLoading && efficiency.getValue(row,col) != noDataEfficiency && absorption.getValue(row,col) != noDataAbsorption) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i] && loading.getValue(row + dY[i],col + dX[i]) != noDataLoading && efficiency.getValue(row + dY[i],col + dX[i]) != noDataEfficiency && absorption.getValue(row + dY[i],col + dX[i]) != noDataAbsorption) {              z++;            }          }          tmpGrid.setValue(row,col,z);          output.setValue(row,col,loading.getValue(row,col));        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    loading.close();    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          x=col;          y=row;          do {            z=output.getValue(y,x);            eff=efficiency.getValue(y,x) * efficiencyMultiplier;            absorp=absorption.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              x+=dX[i];              y+=dY[i];              z2=output.getValue(y,x);              z=((z - absorp) * eff);              if (z < 0) {                z=0;              }              output.setValue(y,x,z2 + z);              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    efficiency.close();    absorption.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Image modifyAlpha(byte alpha,int removeColor){  removeColor=removeColor & 0xffffff;  int w=getWidth();  int h=getHeight();  int size=w * h;  int[] arr=new int[size];  getRGB(arr,0,0,0,w,h);  int alphaInt=(((int)alpha) << 24) & 0xff000000;  for (int iter=0; iter < size; iter++) {    if ((arr[iter] & 0xff000000) != 0) {      arr[iter]=(arr[iter] & 0xffffff) | alphaInt;      if (removeColor == (0xffffff & arr[iter])) {        arr[iter]=0;      }    }  }  Image i=new Image(arr,w,h);  i.opaqueTested=true;  i.opaque=false;  return i;}  }
class C{  public NotificationChain basicSetLiteral(Literal newLiteral,NotificationChain msgs){  Literal oldLiteral=literal;  literal=newLiteral;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.LITERAL_ANNOTATION_ARGUMENT__LITERAL,oldLiteral,newLiteral);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public String toString(){  return getClass().getName() + "[color=" + color+ (italic ? ",italic" : "")+ (bold ? ",bold" : "")+ "]";}  }
class C{  public long awaitNanos(long timeout) throws InterruptedException {  if (timeout <= 0)   return 0;  Thread t=Thread.currentThread();  if (!ownerAccess.compareAndSet(this,null,t)) {    throw new IllegalStateException("A second thread tried to acquire a signal barrier is already owned.");  }  long start=System.nanoTime();  LockSupport.parkNanos(this,timeout);  ownerAccess.compareAndSet(this,t,null);  long stop=System.nanoTime();  if (t.isInterrupted())   throw new InterruptedException();  return Math.max(timeout - stop + start,0L);}  }
class C{  public JobManagerException(String msg){  super(msg);}  }
class C{  public boolean isEnabled(){  return association.isRegistered();}  }
class C{  private double wmTransform(double alpha,double f1,double f2,double f3,int x){  double s=alpha * Math.abs(f3 - f1) / 2.0;  double l=(x != 0) ? (f1 + s) : f1;  while ((l + 2 * s) < f2) {    l+=2 * s;  }  return ((f2 - l) < (l + 2 * s - f2)) ? l : (l + 2 * s);}  }
class C{  public DoubleIteratorSpliterator(java8.util.PrimitiveIterator.OfDouble iterator,long size,int characteristics){  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  @Override public void onTokenRefresh(){  Intent intent=new Intent(this,RocketRegistrationIntentService.class);  startService(intent);}  }
class C{  public void testNonConformingCompositeIds() throws Exception {  DocRouter router=DocRouter.getDocRouter(CompositeIdRouter.NAME);  DocCollection coll=createCollection(4,router);  String[] ids={"A!B!C!D","!!!!!!","A!!!!B","A!!B!!C","A/59!B","A/8/!B/19/","A!B/-5","!/130!","!!A/1000","A//8!B///10!C////"};  for (int i=0; i < ids.length; ++i) {    try {      Slice targetSlice=coll.getRouter().getTargetSlice(ids[i],null,null,null,coll);      assertNotNull(targetSlice);    } catch (    Exception e) {      throw new Exception("Exception routing id '" + ids[i] + "'",e);    }  }}  }
class C{  public static CCTileMapAtlas tilemap(String tile,String map,int w,int h){  return new CCTileMapAtlas(tile,map,w,h);}  }
class C{  private void initialize(@Nullable final AttributeSet attributeSet){  constraints=new ArrayList<>();  helperTexts=new ArrayList<>();  helperTextColors=new ArrayList<>();  regularHelperText=getHelperText();  regularHelperTextColor=getHelperTextColor();  obtainStyledAttributes(attributeSet);  setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);  getView().addTextChangedListener(createTextChangeListener());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.250 -0400",hash_original_method="721D9E4B3E01AE935EF1F89789CA6337",hash_generated_method="B64F8EC69B91C0CCEA03E71C6B4B7057") final boolean unlink(Index<K,V> succ){  return !indexesDeletedNode() && casRight(succ,succ.right);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public char[] constantPoolName(){  if (this.constantPoolName != null)   return this.constantPoolName;  char[] brackets=new char[this.dimensions];  for (int i=this.dimensions - 1; i >= 0; i--)   brackets[i]='[';  return this.constantPoolName=CharOperation.concat(brackets,this.leafComponentType.signature());}  }
class C{  public FlightBookingExample(DialogueSystem system){  this.system=system;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.287 -0500",hash_original_method="167631196A2C66990E7F61BE07899D2B",hash_generated_method="C6783A608B0F532475DDA84D780EA823") public static int forkAndSpecialize(int uid,int gid,int[] gids,int debugFlags,int[][] rlimits){  preFork();  int pid=nativeForkAndSpecialize(uid,gid,gids,debugFlags,rlimits);  postFork();  return pid;}  }
class C{  public void testMissingApplication() throws Exception {  mEnabled.add(LauncherActivityDetector.ISSUE_MORE_THAN_ONE_LAUNCHER);  mEnabled.add(LauncherActivityDetector.ISSUE_MISSING_LAUNCHER);  mEnabled.add(LauncherActivityDetector.ISSUE_LAUNCHER_ACTIVITY_IN_LIBRARY);  String expected="No warnings.";  String result=lintProject(xml(FN_ANDROID_MANIFEST_XML,"" + "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest package=\"com.example.android.custom-lint-rules\"\n"+ "          >\n"+ "</manifest>"));  assertEquals(expected,result);}  }
class C{  public static Product updateProduct(final Product productToUpdate,final VOService product) throws ValidationException, ConcurrentModificationException {  verifyVersionAndKey(productToUpdate,product);  copyAttributes(productToUpdate,product);  return productToUpdate;}  }
class C{  public Packet(int command,Object[] data){  this.command=command;  this.data=data;}  }
class C{  public synchronized void close(){  if (!this.logWriter.isClosed()) {    this.logWriter.close();  }}  }
class C{  protected void initClassDefaults(UIDefaults table){  super.initClassDefaults(table);  putDefault(table,"ComboBoxUI");  putDefault(table,"LabelUI");  putDefault(table,"TabbedPaneUI");}  }
class C{  public Dimension preferredLayoutSize(Container parent){  Dimension cpd, mbd, tpd;  int cpWidth=0;  int cpHeight=0;  int mbWidth=0;  int mbHeight=0;  int tpWidth=0;  int tpHeight=0;  Insets i=parent.getInsets();  JRootPane root=(JRootPane)parent;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getPreferredSize();  } else {    cpd=root.getSize();  }  if (cpd != null) {    cpWidth=cpd.width;    cpHeight=cpd.height;  }  if (root.getMenuBar() != null) {    mbd=root.getMenuBar().getPreferredSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof MetalRootPaneUI)) {    JComponent titlePane=((MetalRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getPreferredSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  return new Dimension(Math.max(Math.max(cpWidth,mbWidth),tpWidth) + i.left + i.right,cpHeight + mbHeight + tpWidth+ i.top+ i.bottom);}  }
class C{  protected void closeDialogOk(){  wta.setK(Integer.parseInt(kValue.getText()));  super.closeDialogOk();}  }
class C{  public IllegalMonitorStateException(String s){  super(s);}  }
class C{  public boolean contains(A x){  List<A> l=this;  while (l.tail != null) {    if (x == null) {      if (l.head == null)       return true;    } else {      if (x.equals(l.head))       return true;    }    l=l.tail;  }  return false;}  }
class C{  public static FilterServiceSPI newService(ConfigurationEngineDefaults.FilterServiceProfile filterServiceProfile,boolean allowIsolation){  if (filterServiceProfile == ConfigurationEngineDefaults.FilterServiceProfile.READMOSTLY) {    return new FilterServiceLockCoarse(allowIsolation);  } else {    return new FilterServiceLockFine(allowIsolation);  }}  }
class C{  public static boolean await(CountDownLatch latch,long timeout,TimeUnit unit) throws IgniteInterruptedCheckedException {  try {    return latch.await(timeout,unit);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IgniteInterruptedCheckedException(e);  }}  }
class C{  public CRootNodeMenuBuilder(final JTree projectTree){  super(projectTree);}  }
class C{  public static Set<PsiFile> findIncludedFiles(PsiFile file,boolean followNestedFiles){  Set<PsiFile> files=Sets.newLinkedHashSet();  collectIncludedFiles(file,files,followNestedFiles);  return files;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.970 -0500",hash_original_method="63EE6428D057E56283BE6B5B9916525D",hash_generated_method="34E134139BD75D64FCA74CAA33B9DB05") final synchronized void _requestDo(int option) throws IOException {  if ((_doResponse[option] == 0 && _stateIsDo(option)) || _requestedDo(option)) {    return;  }  _setWantDo(option);  ++_doResponse[option];  _sendDo(option);}  }
class C{  public static final double[] columnPackedCopy(final double[][] m1){  final int columndimension=m1[0].length;  final double[] vals=new double[m1.length * columndimension];  for (int i=0; i < m1.length; i++) {    for (int j=0; j < columndimension; j++) {      vals[i + j * m1.length]=m1[i][j];    }  }  return vals;}  }
class C{  ActionMap createActionMap(){  ActionMap map=super.createActionMap();  if (map.get(DefaultEditorKit.selectWordAction) != null) {    Action a=map.get(DefaultEditorKit.selectLineAction);    if (a != null) {      map.remove(DefaultEditorKit.selectWordAction);      map.put(DefaultEditorKit.selectWordAction,a);    }  }  return map;}  }
class C{  public static boolean isCreated(){  return m_adeExt != null;}  }
class C{  public IntDict(int length){  count=0;  keys=new String[length];  values=new int[length];}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  process(response);}  }
class C{  public boolean equals(Object other){  if (other == null || !(other instanceof GF2nONBElement)) {    return false;  }  GF2nONBElement otherElem=(GF2nONBElement)other;  for (int i=0; i < mLength; i++) {    if (mPol[i] != otherElem.mPol[i]) {      return false;    }  }  return true;}  }
class C{  public static <T extends MessageSchema>Pipe<T>[] allPipesOfType(GraphManager gm,T targetSchema){  return pipesOfType(0,gm.pipeIdToPipe.length,gm,targetSchema);}  }
class C{  private HttpURLConnection makeConnection(URL url,byte[] postBody,long position,long length,boolean allowGzip,boolean followRedirects) throws IOException {  HttpURLConnection connection=(HttpURLConnection)url.openConnection();  connection.setConnectTimeout(connectTimeoutMillis);  connection.setReadTimeout(readTimeoutMillis);synchronized (requestProperties) {    for (    Map.Entry<String,String> property : requestProperties.entrySet()) {      connection.setRequestProperty(property.getKey(),property.getValue());    }  }  if (!(position == 0 && length == C.LENGTH_UNBOUNDED)) {    String rangeRequest="bytes=" + position + "-";    if (length != C.LENGTH_UNBOUNDED) {      rangeRequest+=(position + length - 1);    }    connection.setRequestProperty("Range",rangeRequest);  }  connection.setRequestProperty("User-Agent",userAgent);  if (!allowGzip) {    connection.setRequestProperty("Accept-Encoding","identity");  }  connection.setInstanceFollowRedirects(followRedirects);  connection.setDoOutput(postBody != null);  if (postBody != null) {    connection.setFixedLengthStreamingMode(postBody.length);    connection.connect();    OutputStream os=connection.getOutputStream();    os.write(postBody);    os.close();  } else {    connection.connect();  }  return connection;}  }
class C{  public boolean hasBytesUsedExt(){  return hasExtension(GphotoBytesUsed.class);}  }
class C{  public void clear(){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.clear();      mObjects.clear();    }  } else {    mObjects.clear();  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  @Override @SuppressWarnings("unchecked") public boolean equals(final Object o){  if (this == o) {    return true;  }  if (o == null || !(o instanceof LinkedIntegerMap)) {    return false;  }  final LinkedIntegerMap<T> map=(LinkedIntegerMap<T>)o;  if (!map.keySet().equals(this.keySet())) {    return false;  }  if (!map.m_values.equals(this.m_values)) {    return false;  }  for (  final T key : map.keySet()) {    if (!(this.getInt(key) == map.getInt(key))) {      return false;    }  }  return true;}  }
class C{  public static List<String> readFile(File file){  List<String> content=new LinkedList<String>();  try {    Reader reader=new InputStreamReader(new FileInputStream(file),"utf-8");    BufferedReader in=new BufferedReader(reader);    try {      String str;      while ((str=in.readLine()) != null) {        content.add(str);      }    }  finally {      in.close();    }  } catch (  Exception e) {    logger.error("Error while reading file " + file.getName() + " , "+ e.getMessage(),e);  }  return content;}  }
class C{  private void triggerDatastoreDeleteTasksForBatch(List<String> batch){  for (  String datastoreLink : batch) {    DatastoreDeleteService.State startState=new DatastoreDeleteService.State();    startState.parentServiceLink=getSelfLink();    String[] components=datastoreLink.split("/");    startState.datastoreId=components[components.length - 1];    sendRequest(Operation.createPost(this,DatastoreDeleteFactoryService.SELF_LINK).setBody(startState));  }}  }
class C{  public static double initialBearingInRadians(LatLng start,LatLng end){  double lat1R=Math.toRadians(start.getLatitude());  double lat2R=Math.toRadians(end.getLatitude());  double dLngR=Math.toRadians(end.getLongitude() - start.getLongitude());  double a=Math.sin(dLngR) * Math.cos(lat2R);  double b=Math.cos(lat1R) * Math.sin(lat2R) - Math.sin(lat1R) * Math.cos(lat2R) * Math.cos(dLngR);  return Math.atan2(a,b);}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 p){  final long startTime=getTimestamp();  FetchEntriesResponse processor=(FetchEntriesResponse)p;  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"FetchEntriesReplyMessage processor not found");    }    return;  }  processor.processChunk(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public TechnicalInformation add(Type type){  TechnicalInformation result;  result=new TechnicalInformation(type);  add(result);  return result;}  }
class C{  private void extractSRLInfo(JCas jCas,List<TOKEN_TYPE> tokens,DEPTree tree){  Map<Integer,PREDICATE_TYPE> headIdToPredicate=Maps.newHashMap();  Map<PREDICATE_TYPE,List<ARGUMENT_TYPE>> predicateArguments=Maps.newHashMap();  for (int i=1; i < tree.size(); i++) {    DEPNode parserNode=tree.get(i);    TOKEN_TYPE token=tokens.get(i - 1);    List<SRLArc> semanticHeads=parserNode.getSemanticHeadArcList();    if (semanticHeads.isEmpty()) {      continue;    }    for (    SRLArc shead : semanticHeads) {      int headId=shead.getNode().getID();      TOKEN_TYPE headToken=tokens.get(headId - 1);      PREDICATE_TYPE pred;      List<ARGUMENT_TYPE> args;      if (!headIdToPredicate.containsKey(headId)) {        String rolesetId=shead.getNode().getFeat(DEPLib.FEAT_PB);        pred=this.srlOps.createPredicate(jCas,headToken,rolesetId);        headIdToPredicate.put(headId,pred);        args=Lists.newArrayList();        predicateArguments.put(pred,args);      } else {        pred=headIdToPredicate.get(headId);        args=predicateArguments.get(pred);      }      args.add(this.srlOps.createArgument(jCas,token,shead.getLabel()));    }  }  for (  Map.Entry<PREDICATE_TYPE,List<ARGUMENT_TYPE>> entry : predicateArguments.entrySet()) {    PREDICATE_TYPE predicate=entry.getKey();    List<ARGUMENT_TYPE> arguments=entry.getValue();    this.srlOps.setPredicateArguments(jCas,predicate,arguments);  }}  }
class C{  public PTBTokenizerFactory(boolean tokenizeCRs){  this.tokenizeCRs=tokenizeCRs;}  }
class C{  public int calcTotal(){  return level_DEBUG + level_INFO + level_TRACE+ level_WARN+ level_FATAL+ level_ERROR;}  }
class C{  public String toString(){  return xml.toString();}  }
class C{  public UnicastRef(){}  }
class C{  public void initialScore(Text url,CrawlDatum datum) throws ScoringFilterException {  datum.setScore(0.0f);}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  if (mFileNames != null) {    boolean mustAddDelimiter=false;    for (    String item : mFileNames) {      if (item != null) {        if (mustAddDelimiter) {          result.append(DELIMITER);        }        mustAddDelimiter=true;        result.append(SORUNDER).append(item).append(SORUNDER);      }    }  }  return result.toString();}  }
class C{  public static double length(Vector3 v){  return length(v.x,v.y,v.z);}  }
class C{  @Scheduled(initialDelayString="${batch.greeting.initialdelay}",fixedDelayString="${batch.greeting.fixeddelay}") public void fixedDelayJobWithInitialDelay(){  logger.info("> fixedDelayJobWithInitialDelay");  long pause=5000;  long start=System.currentTimeMillis();  do {    if (start + pause < System.currentTimeMillis()) {      break;    }  } while (true);  logger.info("Processing time was {} seconds.",pause / 1000);  logger.info("< fixedDelayJobWithInitialDelay");}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  private void updateVolumeHLUInfo(VolumeURIHLU[] volumeURIHLUs,List<Path> pathList,ExportMask exportMask){  if (null != exportMask.getVolumes() && !exportMask.getVolumes().isEmpty()) {    Map<String,URI> deviceIdToURI=new HashMap<String,URI>();    Map<URI,Integer> hluMap=new HashMap<URI,Integer>();    for (    VolumeURIHLU vuh : volumeURIHLUs) {      BlockObject volume=BlockObject.fetch(dbClient,vuh.getVolumeURI());      exportMask.addToUserCreatedVolumes(volume);      deviceIdToURI.put(volume.getNativeId(),volume.getId());    }    if (!deviceIdToURI.isEmpty()) {      for (      Path path : pathList) {        if (deviceIdToURI.containsKey(path.getDevNum())) {          URI volumeURI=deviceIdToURI.get(path.getDevNum());          log.info("updating volume {} info in exportmask.",volumeURI);          hluMap.put(volumeURI,Integer.parseInt(path.getLun()));        }      }      exportMask.addVolumes(hluMap);    } else {      log.error("No HLU's found for the volumes.");    }  }}  }
class C{  public FileParameter(OptionID optionID,FileType fileType,boolean optional){  this(optionID,fileType);  setOptional(optional);}  }
class C{  public int readBigUleb128(){  int end=offset;  int currentByteValue;  int result;  byte[] buf=dexBuf.buf;  result=buf[end++] & 0xff;  if (result > 0x7f) {    currentByteValue=buf[end++] & 0xff;    result=(result & 0x7f) | ((currentByteValue & 0x7f) << 7);    if (currentByteValue > 0x7f) {      currentByteValue=buf[end++] & 0xff;      result|=(currentByteValue & 0x7f) << 14;      if (currentByteValue > 0x7f) {        currentByteValue=buf[end++] & 0xff;        result|=(currentByteValue & 0x7f) << 21;        if (currentByteValue > 0x7f) {          currentByteValue=buf[end++];          if (currentByteValue < 0) {            throw new ExceptionWithContext("Invalid uleb128 integer encountered at offset 0x%x",offset);          }          result|=currentByteValue << 28;        }      }    }  }  offset=end;  return result;}  }
class C{  public static byte[] encodeSignedLong(long value){  value=(value << 1) ^ (value >> 63);  return encodeUnsignedLong(value);}  }
class C{  private String abbreviateScript(String script){  if (script == null) {    return null;  }  if (script.length() <= 1000) {    return script;  }  return "..." + script.substring(3,1000);}  }
class C{  private GlassoRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  private void populate(Ignite ignite) throws Exception {  resetCounters();  for (int i=0; i < ENTRY_CNT; i++) {    ignite.<Integer,CacheValue>cache(null).put(i,new CacheValue(i));    CacheValue val=ignite.<Integer,CacheValue>cache(null).localPeek(i);    assert val != null;    assert val.value() == i;    GridCacheEntryEx entry=((IgniteKernal)ignite).internalCache().peekEx(i);    assert entry != null;    versions.put(i,entry.version());  }  assert swapCnt.get() == 0;  assert unswapCnt.get() == 0;}  }
class C{  private void sendServerMessage() throws NoSuchAlgorithmException, IOException {  log.debug("sending server message");  if (remoteBlindedFriends == null) {    throw new IOException("Remove client message blinded friends is null in sendServerMessage.");  }  ServerReplyTuple srt;  try {    srt=mServerPSI.replyToBlindedItems(remoteBlindedFriends);  } catch (  NoSuchAlgorithmException e) {    log.info("No such algorithm in replyToBlindedItems: " + e);    setExchangeStatus(Status.ERROR);    setErrorMessage("PSI subsystem is broken, NoSuchAlgorithmException");    throw e;  }catch (  IllegalArgumentException e) {    log.info("Null passed to replyToBlindedItems on serverPSI? " + e);    setExchangeStatus(Status.ERROR);    setErrorMessage("Bad argument to server PSI subsystem. (null remoteBlindedItems?)");    throw e;  }  log.debug("formatting server message");  ArrayList<ByteString> doubleBlindedStrings=Crypto.byteArraysToStrings(srt.doubleBlindedItems);  ArrayList<ByteString> hashedBlindedStrings=Crypto.byteArraysToStrings(srt.hashedBlindedItems);  ServerMessage sm=new ServerMessage(doubleBlindedStrings,hashedBlindedStrings);  boolean success=lengthValueWrite(out,sm.toJson());  if (!success) {    setExchangeStatus(Status.ERROR);    setErrorMessage("Length/value write of server message failed.");    throw new IOException("Length/value write of server message failed, but exception is hidden (see Exchange.java)");  }  log.debug("server message was sent");}  }
class C{  public Vertex synthesizeResponse(Vertex input,Vertex sentence,Vertex conversation,boolean random,Map<Vertex,Vertex> variables,Network network){  Vertex topic=null;  if (topic == null && sentence != null) {    if (sentence.instanceOf(Primitive.WORD)) {      topic=sentence;    } else {      Collection<Relationship> words=sentence.getRelationships(Primitive.WORD);      if (words != null && !words.isEmpty()) {        for (        Relationship relationship : words) {          Vertex word=relationship.getTarget();          Vertex meaning=word.mostConscious(Primitive.MEANING);          if (meaning != null && meaning.instanceOf(Primitive.THING)) {            if (topic == null || (meaning.getConsciousnessLevel() > topic.getConsciousnessLevel())) {              topic=word;            }          }        }        if (topic == null) {          for (          Relationship relationship : words) {            Vertex word=relationship.getTarget();            Vertex meaning=word.mostConscious(Primitive.MEANING);            if (meaning != null && meaning.instanceOf(Primitive.DESCRIPTION)) {              if (topic == null || (meaning.getConsciousnessLevel() > topic.getConsciousnessLevel())) {                topic=word;              }            }          }        }        if (topic == null) {          for (          Relationship relationship : words) {            Vertex word=relationship.getTarget();            Vertex meaning=word.mostConscious(Primitive.MEANING);            if (meaning != null && meaning.instanceOf(Primitive.ACTION)) {              if (topic == null || (meaning.getConsciousnessLevel() > topic.getConsciousnessLevel())) {                topic=word;              }            }          }        }        if (topic == null) {          for (          Relationship relationship : words) {            Vertex word=relationship.getTarget();            if (topic == null || (word.getConsciousnessLevel() > topic.getConsciousnessLevel())) {              topic=word;            }          }        }      }    }  }  List<Vertex> words=new ArrayList<Vertex>();  Set<Vertex> usedWords=new HashSet<Vertex>();  if (topic != null && !topic.instanceOf(Primitive.WORD)) {    topic=topic.mostConscious(Primitive.WORD);  }  boolean loop=false;  if (topic != null) {    int count=0;    words.add(topic);    usedWords.add(topic);    Vertex current=topic;    while (count < 5) {      Vertex previous=null;      if (random) {        Collection<Relationship> relationships=current.getRelationships(Primitive.PREVIOUS);        if (relationships != null) {          previous=Utils.random(relationships).getTarget();          if (loop && usedWords.contains(previous)) {            previous=Utils.random(relationships).getTarget();          }        }      } else {        if (loop) {          previous=current.nextMostConscious(Primitive.PREVIOUS,usedWords);        } else {          previous=current.mostConscious(Primitive.PREVIOUS);        }      }      if (previous == null || previous.is(Primitive.NULL)) {        break;      }      if (usedWords.contains(previous)) {        loop=true;      } else {        usedWords.add(previous);      }      words.add(0,previous);      current=previous;      count++;    }    if (count == 5) {      count=0;      while (count < 5) {        if (current.hasRelationship(Primitive.PREVIOUS,Primitive.NULL)) {          break;        }        Vertex previous=null;        if (random) {          Collection<Relationship> relationships=current.getRelationships(Primitive.PREVIOUS);          if (relationships != null) {            previous=Utils.random(relationships).getTarget();            if (loop && usedWords.contains(previous)) {              previous=Utils.random(relationships).getTarget();            }          }        } else {          previous=current.nextMostConscious(Primitive.PREVIOUS,usedWords);        }        if (previous == null || previous.is(Primitive.NULL)) {          break;        }        words.add(0,previous);        usedWords.add(previous);        current=previous;        count++;      }    }  }  if (topic == null) {    topic=network.createVertex(Primitive.NULL);  }  int count=0;  Vertex current=topic;  while (count < 5) {    Vertex next=null;    if (random) {      Collection<Relationship> relationships=current.getRelationships(Primitive.NEXT);      if (relationships != null) {        next=Utils.random(relationships).getTarget();        if (loop && usedWords.contains(next)) {          next=Utils.random(relationships).getTarget();        }      }    } else {      if (loop) {        next=current.nextMostConscious(Primitive.NEXT,usedWords);      } else {        next=current.mostConscious(Primitive.NEXT);      }    }    if (next == null || next.is(Primitive.NULL)) {      break;    }    if (usedWords.contains(next)) {      loop=true;    } else {      usedWords.add(next);    }    words.add(next);    current=next;    count++;  }  if (count == 5) {    count=0;    while (count < 5) {      if (current.hasRelationship(Primitive.PREVIOUS,Primitive.NULL)) {        break;      }      Vertex next=null;      if (random) {        Collection<Relationship> relationships=current.getRelationships(Primitive.NEXT);        if (relationships != null) {          next=Utils.random(relationships).getTarget();          if (loop && usedWords.contains(next)) {            next=Utils.random(relationships).getTarget();          }        }      } else {        next=current.nextMostConscious(Primitive.NEXT,usedWords);      }      if (next == null || next.is(Primitive.NULL)) {        break;      }      words.add(next);      usedWords.add(next);      current=next;      count++;    }  }  if (words.isEmpty()) {    return null;  }  Vertex response=network.createInstance(Primitive.SENTENCE);  int index=0;  for (  Vertex word : words) {    response.addRelationship(Primitive.WORD,word,index);    index++;  }  return response;}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  findAndInit(bcme.iterator());}  }
class C{  public float nextFloat(){  return next(24) / ((float)(1 << 24));}  }
class C{  public static void unpackKey(StorageDescription storageDescription,byte[] rawKey,Key key){  assert storageDescription instanceof MemoryStorageDescription : storageDescription;  assert rawKey != null;  assert rawKey.length > 16 : rawKey.length;  key.clear();  System.arraycopy(rawKey,16,key.getEncodedBytes(),0,rawKey.length - 16);  key.setEncodedSize(rawKey.length - 16);}  }
class C{  public RDFInserter(RepositoryConnection con){  super(con.getValueFactory());  this.con=con;}  }
class C{  public RemoveContainerParams withRemoveVolumes(boolean removeVolumes){  this.removeVolumes=removeVolumes;  return this;}  }
class C{  private BusinessObjectDataNotificationRegistration createBusinessObjectDataNotificationFromEntity(BusinessObjectDataNotificationRegistrationEntity businessObjectDataNotificationRegistrationEntity){  BusinessObjectDataNotificationRegistration businessObjectDataNotificationRegistration=new BusinessObjectDataNotificationRegistration();  businessObjectDataNotificationRegistration.setId(businessObjectDataNotificationRegistrationEntity.getId());  businessObjectDataNotificationRegistration.setBusinessObjectDataNotificationRegistrationKey(new NotificationRegistrationKey(businessObjectDataNotificationRegistrationEntity.getNamespace().getCode(),businessObjectDataNotificationRegistrationEntity.getName()));  businessObjectDataNotificationRegistration.setBusinessObjectDataEventType(businessObjectDataNotificationRegistrationEntity.getNotificationEventType().getCode());  BusinessObjectDataNotificationFilter filter=new BusinessObjectDataNotificationFilter();  businessObjectDataNotificationRegistration.setBusinessObjectDataNotificationFilter(filter);  filter.setNamespace(businessObjectDataNotificationRegistrationEntity.getBusinessObjectDefinition().getNamespace().getCode());  filter.setBusinessObjectDefinitionName(businessObjectDataNotificationRegistrationEntity.getBusinessObjectDefinition().getName());  filter.setBusinessObjectFormatUsage(businessObjectDataNotificationRegistrationEntity.getUsage());  filter.setBusinessObjectFormatFileType(businessObjectDataNotificationRegistrationEntity.getFileType() != null ? businessObjectDataNotificationRegistrationEntity.getFileType().getCode() : null);  filter.setBusinessObjectFormatVersion(businessObjectDataNotificationRegistrationEntity.getBusinessObjectFormatVersion());  filter.setStorageName(businessObjectDataNotificationRegistrationEntity.getStorage() != null ? businessObjectDataNotificationRegistrationEntity.getStorage().getName() : null);  filter.setNewBusinessObjectDataStatus(businessObjectDataNotificationRegistrationEntity.getNewBusinessObjectDataStatus() != null ? businessObjectDataNotificationRegistrationEntity.getNewBusinessObjectDataStatus().getCode() : null);  filter.setOldBusinessObjectDataStatus(businessObjectDataNotificationRegistrationEntity.getOldBusinessObjectDataStatus() != null ? businessObjectDataNotificationRegistrationEntity.getOldBusinessObjectDataStatus().getCode() : null);  List<JobAction> jobActions=new ArrayList<>();  businessObjectDataNotificationRegistration.setJobActions(jobActions);  for (  NotificationActionEntity notificationActionEntity : businessObjectDataNotificationRegistrationEntity.getNotificationActions()) {    if (notificationActionEntity instanceof NotificationJobActionEntity) {      NotificationJobActionEntity notificationJobActionEntity=(NotificationJobActionEntity)notificationActionEntity;      JobAction jobAction=new JobAction();      jobActions.add(jobAction);      jobAction.setNamespace(notificationJobActionEntity.getJobDefinition().getNamespace().getCode());      jobAction.setJobName(notificationJobActionEntity.getJobDefinition().getName());      jobAction.setCorrelationData(notificationJobActionEntity.getCorrelationData());    }  }  businessObjectDataNotificationRegistration.setNotificationRegistrationStatus(businessObjectDataNotificationRegistrationEntity.getNotificationRegistrationStatus().getCode());  return businessObjectDataNotificationRegistration;}  }
class C{  private JPanel createDescriptiveStatsDialog(Node selected){  DataSet dataSet=(DataSet)dataEditor.getSelectedDataModel();  if (selected == null && dataSet.getNumColumns() != 0) {    selected=dataSet.getVariable(0);  }  DescriptiveStatsEditorPanel editorPanel=new DescriptiveStatsEditorPanel(selected,dataSet);  JTextArea display=new JTextArea(DescriptiveStats.generateDescriptiveStats(dataSet,selected),20,65);  display.setEditable(false);  display.setFont(new Font("Monospaced",Font.PLAIN,12));  editorPanel.addPropertyChangeListener(new DescriptiveStatsListener(display));  Box box=Box.createHorizontalBox();  box.add(display);  box.add(Box.createHorizontalStrut(3));  box.add(editorPanel);  box.add(Box.createHorizontalStrut(5));  box.add(Box.createHorizontalGlue());  Box vBox=Box.createVerticalBox();  vBox.add(Box.createVerticalStrut(15));  vBox.add(box);  vBox.add(Box.createVerticalStrut(5));  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  panel.add(vBox,BorderLayout.CENTER);  return panel;}  }
class C{  public DefaultTransformFactory(String name){  this.name=requireNonNull(name);  this.transforms=new ConcurrentHashMap<>();}  }
class C{  public static <I>Stream<I> read(String path,Parser<I> ip) throws IOException {  return read(new FileInputStream(path),ip);}  }
class C{  protected String paramString(){  String paintBorderString=(paintBorder ? "true" : "false");  String marginString=(margin != null ? margin.toString() : "");  return super.paramString() + ",margin=" + marginString+ ",paintBorder="+ paintBorderString;}  }
class C{  protected void animatePickedColor(int pickedColor){  mLastPickedColor=pickedColor;  if (mPickedColorProgressAnimator.isRunning()) {    mPickedColorProgressAnimator.cancel();  }  mPickedColorProgressAnimator.start();}  }
class C{  private void testString(SortField.Type sortType) throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  Type type=sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",type));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",sortType));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals("bar",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("foo",searcher.doc(td.scoreDocs[1].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  @Override public void windowClosing(java.awt.event.WindowEvent e){  setVisible(false);}  }
class C{  public static void addEdge(Graph graph,OctopusNode src,OctopusNode dst,String edgeType){  for (  Edge edge : src.getBaseVertex().getEdges(Direction.OUT,edgeType)) {    if (edge.getVertex(Direction.IN).equals(dst.getBaseVertex())) {      return;    }  }  graph.addEdge(0,src.getBaseVertex(),dst.getBaseVertex(),edgeType);}  }
class C{  @VisibleForTesting public ResultAddress(String name,String phoneNumber,String streetAddress,String locality,String dependentLocality,String administrativeArea,String postalCode,String sortingCode,String countryCode,String languageCode){  mName=name;  mPhoneNumber=phoneNumber;  mStreetAddress=streetAddress;  mLocality=locality;  mDependentLocality=dependentLocality;  mAdministrativeArea=administrativeArea;  mPostalCode=postalCode;  mSortingCode=sortingCode;  mCountryCode=countryCode;  mLanguageCode=languageCode;}  }
class C{  @ReflectiveCtor public GetterProperty(FilePosition pos,Void value,List<? extends Expression> children){  super(pos,(StringLiteral)children.get(0),(FunctionConstructor)children.get(1));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.909 -0500",hash_original_method="6313F45FC494FF406CD3064C58B63747",hash_generated_method="C370A03C37745247C8F94146A819EC26") public AttributesImpl(){  length=0;  data=null;}  }
class C{  public boolean merge(final Frame<? extends V> frame,final Interpreter<V> interpreter) throws AnalyzerException {  if (top != frame.top) {    throw new AnalyzerException(null,"Incompatible stack heights");  }  boolean changes=false;  for (int i=0; i < locals + top; ++i) {    V v=interpreter.merge(values[i],frame.values[i]);    if (!v.equals(values[i])) {      values[i]=v;      changes=true;    }  }  return changes;}  }
class C{  public static boolean isResponse(final int code){  return code >= RESPONSE_CODE_LOWER_BOUND && code <= RESPONSE_CODE_UPPER_BOUND;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.129 -0500",hash_original_method="9CCB47DAF369299C60002AA9C328CEC6",hash_generated_method="69726288CF275F5FB44F90DC86D658A5") public BasicPoolEntry(ClientConnectionOperator op,HttpRoute route,ReferenceQueue<Object> queue){  super(op,route);  if (route == null) {    throw new IllegalArgumentException("HTTP route may not be null");  }  this.reference=new BasicPoolEntryRef(this,queue);}  }
class C{  private void cyclicCircularGradientFillRaster(int pixels[],int off,int adjust,int x,int y,int w,int h){  final double constC=-radiusSq + (centerX * centerX) + (centerY * centerY);  double A, B, C;  double slope, yintcpt;  double solutionX, solutionY;  final float constX=(a00 * x) + (a01 * y) + a02;  final float constY=(a10 * x) + (a11 * y) + a12;  final float precalc2=2 * centerY;  final float precalc3=-2 * centerX;  float g;  float det;  float currentToFocusSq;  float intersectToFocusSq;  float deltaXSq, deltaYSq;  int indexer=off;  int pixInc=w + adjust;  for (int j=0; j < h; j++) {    float X=(a01 * j) + constX;    float Y=(a11 * j) + constY;    for (int i=0; i < w; i++) {      if (X == focusX) {        solutionX=focusX;        solutionY=centerY;        solutionY+=(Y > focusY) ? trivial : -trivial;      } else {        slope=(Y - focusY) / (X - focusX);        yintcpt=Y - (slope * X);        A=(slope * slope) + 1;        B=precalc3 + (-2 * slope * (centerY - yintcpt));        C=constC + (yintcpt * (yintcpt - precalc2));        det=(float)Math.sqrt((B * B) - (4 * A * C));        solutionX=-B;        solutionX+=(X < focusX) ? -det : det;        solutionX=solutionX / (2 * A);        solutionY=(slope * solutionX) + yintcpt;      }      deltaXSq=X - focusX;      deltaXSq=deltaXSq * deltaXSq;      deltaYSq=Y - focusY;      deltaYSq=deltaYSq * deltaYSq;      currentToFocusSq=deltaXSq + deltaYSq;      deltaXSq=(float)solutionX - focusX;      deltaXSq=deltaXSq * deltaXSq;      deltaYSq=(float)solutionY - focusY;      deltaYSq=deltaYSq * deltaYSq;      intersectToFocusSq=deltaXSq + deltaYSq;      g=(float)Math.sqrt(currentToFocusSq / intersectToFocusSq);      pixels[indexer + i]=indexIntoGradientsArrays(g);      X+=a00;      Y+=a10;    }    indexer+=pixInc;  }}  }
class C{  protected InnerBuilder addHeader(String key,String value){  String url=NULL_KEY_FOR_URL;  addOrReplaceWithUrl(url,key,value,false);  return this;}  }
class C{  private void init(){  Box mainVertical=Box.createVerticalBox();  fillFieldValues();  weightSizeMaxSlider.setMajorTickSpacing(25);  weightSizeMaxSlider.setPaintTicks(true);  weightSizeMaxSlider.setPaintLabels(true);  weightSizeMinSlider.setMajorTickSpacing(25);  weightSizeMinSlider.setPaintTicks(true);  weightSizeMinSlider.setPaintLabels(true);  addActionListeners();  colorPanel.add(cbChangeColor);  colorIndicator.setSize(20,20);  colorPanel.add(colorIndicator);  colorPanel.add(changeColorButton);  setIndicatorColor();  LabelledItemPanel guiPanel=new LabelledItemPanel();  guiPanel.addItem("Color:",colorPanel);  guiPanel.addItem("Weight size max",weightSizeMaxSlider);  guiPanel.addItem("Weight size min",weightSizeMinSlider);  mainVertical.add(guiPanel);  mainVertical.add(new JSeparator(JSeparator.HORIZONTAL));  LabelledItemPanel miscPanel=new LabelledItemPanel();  miscPanel.addItem("Network time step",timeStepField);  miscPanel.addItem("Synapse visibility threshold",tfSynapseVisibilityThreshold);  nudgeAmountField.setColumns(3);  miscPanel.addItem("Nudge Amount",nudgeAmountField);  miscPanel.addItem("Wand radius",wandRadiusField);  miscPanel.add(new JSeparator(JSeparator.HORIZONTAL));  miscPanel.addItem("Use Subsampling for large neuron groups",cbUseSubSampling);  miscPanel.addItem("Number of Subsamples / Subsampling Threshold",tfNumSubSamples);  updateSubSamplingStuff();  mainVertical.add(miscPanel);  add(mainVertical);}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  public void testNextLongBounded(){  for (long bound=2; bound < MAX_LONG_BOUND; bound+=15485863) {    long f=ThreadLocalRandom.current().nextLong(bound);    assertTrue(0 <= f && f < bound);    int i=0;    long j;    while (i < NCALLS && (j=ThreadLocalRandom.current().nextLong(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  private int insertKeyRehash(T key,int index,int hash,Object cur){  final Object[] set=_set;  final int length=set.length;  final int probe=1 + (hash % (length - 2));  final int loopIndex=index;  int firstRemoved=-1;  do {    if (cur == REMOVED && firstRemoved == -1)     firstRemoved=index;    index-=probe;    if (index < 0) {      index+=length;    }    cur=set[index];    if (cur == FREE) {      if (firstRemoved != -1) {        _set[firstRemoved]=key;        return firstRemoved;      } else {        consumeFreeSlot=true;        _set[index]=key;        return index;      }    }    if (cur == key || equals(key,cur)) {      return -index - 1;    }  } while (index != loopIndex);  if (firstRemoved != -1) {    _set[firstRemoved]=key;    return firstRemoved;  }  throw new IllegalStateException("No free or removed slots available. Key set full?!!");}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  @Override public boolean onItemUse(ItemStack itemStack,EntityPlayer entityPlayer,World world,int x,int y,int z,int par7,float par8,float par9,float par10){  TileEntity tileEntity=world.getTileEntity(x,y,z);  if (entityPlayer.isSneaking() && tileEntity != null) {    if (this.isValidExplosive(tileEntity)) {      if (this.getEnergy(itemStack) > ENERGY) {        this.setSavedCoords(itemStack,new Pos3D(x,y,z));        this.setEnergy(itemStack,this.getEnergy(itemStack) - ENERGY);        if (world.isRemote) {          entityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.detonator.locked").replaceAll("%x","" + x).replace("%y","" + y).replace("%z","" + z)));        }      } else       if (world.isRemote) {        entityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.detonator.nopower")));      }      return true;    }  }  return false;}  }
class C{  public TwoEpochDemographic(DemographicFunction epoch1,DemographicFunction epoch2,Type units){  super(units);  this.epoch1=epoch1;  this.epoch2=epoch2;}  }
class C{  public void updateGUI(RosterEntry r){  roadName.setText(r.getRoadName());  roadNumber.setText(r.getRoadNumber());  mfg.setText(r.getMfg());  owner.setText(r.getOwner());  model.setText(r.getModel());  comment.setText(r.getComment());  decoderModel.setText(r.getDecoderModel());  decoderFamily.setText(r.getDecoderFamily());  decoderComment.setText(r.getDecoderComment());  dateUpdated.setText(r.getDateUpdated());  maxSpeedSpinner.setValue(Integer.valueOf(r.getMaxSpeedPCT()));}  }
class C{  public void sendActivateHidden(int nEntity,IGame.Phase phase){  Object[] data={new Integer(nEntity),phase};  send(new Packet(Packet.COMMAND_ENTITY_ACTIVATE_HIDDEN,data));}  }
class C{  static boolean hasClass(@NonNull String className){  return getClass(className) != null;}  }
class C{  private void handleCompressedResources(final FacesContext context,final boolean provideJQuery,final boolean provideBootstrap,final List<UIComponent> resources,final UIViewRoot view){  removeAllResourcesFromViewRoot(context,resources,view);  if (provideBootstrap && provideJQuery) {    this.addGeneratedCSSResource(context,"dist-butterfaces-bootstrap.min.css",view);    this.addGeneratedJSResource(context,"butterfaces-all-with-jquery-and-bootstrap-bundle.min.js","butterfaces-dist-bundle-js",view);  } else   if (provideBootstrap) {    this.addGeneratedCSSResource(context,"dist-butterfaces-bootstrap.min.css",view);    this.addGeneratedJSResource(context,"butterfaces-all-with-bootstrap-bundle.min.js","butterfaces-dist-bundle-js",view);  } else   if (provideJQuery) {    this.addGeneratedCSSResource(context,"dist-butterfaces-only.min.css",view);    this.addGeneratedJSResource(context,"butterfaces-all-with-jquery-bundle.min.js","butterfaces-dist-bundle-js",view);  } else {    this.addGeneratedCSSResource(context,"dist-butterfaces-only.min.css",view);    this.addGeneratedJSResource(context,"butterfaces-all-bundle.min.js","butterfaces-dist-bundle-js",view);  }  for (  UIComponent resource : resources) {    context.getViewRoot().addComponentResource(context,resource,HEAD);  }}  }
class C{  public void remove(){  set.remove(list.get(current));  list.remove(current);}  }
class C{  public FilePath(List<String> base,boolean absolute){  this.elements=new LinkedList<String>(base);  this.absolute=absolute;}  }
class C{  public ResultSet executeQuery() throws SQLException {  procedureCall.checkParameters();synchronized (getSynchronizationObject()) {    notifyStatementStarted();    prepareFixedStatement(procedureCall.getSQL(isSelectableProcedure()));    if (!internalExecute(!isSelectableProcedure()))     throw new FBSQLException("No resultset for sql",SQLStateConstants.SQL_STATE_NO_RESULT_SET);    getResultSet();    setRequiredTypes();    return getCurrentResultSet();  }}  }
class C{  public boolean removeItem(ForceItem item){  return items.remove(item);}  }
class C{  public void removeNew(int where) throws CannotCompileException {  try {    byte[] data=new NewRemover(this.get(),where).doit();    this.set(data);  } catch (  BadBytecode e) {    throw new CannotCompileException("bad stack map table",e);  }}  }
class C{  private void updateRingsProperties(){  String[] dRingsRadiiRaw=gs.getString(GUIPreferences.FOV_HIGHLIGHT_RINGS_RADII).trim().split("\\s+");  String[] dRingsColorsRaw=gs.getString(GUIPreferences.FOV_HIGHLIGHT_RINGS_COLORS_HSB).split(";");  final int highlight_alpha=gs.getInt(GUIPreferences.FOV_HIGHLIGHT_ALPHA);  final int max_dist=60;  ringsRadii=new ArrayList<>();  ringsColors=new ArrayList<>();  for (  String rrRaw : dRingsRadiiRaw) {    try {      int rr=Integer.parseInt(rrRaw.trim());      ringsRadii.add(Math.min(rr,max_dist));    } catch (    NumberFormatException e) {      System.err.printf("%s parameter unparsable '%s'",GUIPreferences.FOV_HIGHLIGHT_RINGS_RADII,rrRaw);      e.printStackTrace();      System.err.flush();      break;    }  }  for (  String rcr : dRingsColorsRaw) {    try {      String[] hsbr=rcr.trim().split("\\s+");      float h=Float.parseFloat(hsbr[0]);      float s=Float.parseFloat(hsbr[1]);      float b=Float.parseFloat(hsbr[2]);      Color tc=new Color(Color.HSBtoRGB(h,s,b));      ringsColors.add(new Color(tc.getRed(),tc.getGreen(),tc.getBlue(),highlight_alpha));    } catch (    NumberFormatException e) {      System.err.printf("%s parameter unparsable '%s'",GUIPreferences.FOV_HIGHLIGHT_RINGS_COLORS_HSB,rcr);      e.printStackTrace();      System.err.flush();      break;    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (extraCode_1: ");  result.append(extraCode_1);  result.append(')');  return result.toString();}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  @Override public void putNextEntry(ZipEntry ze) throws IOException {  super.putNextEntry(ze);}  }
class C{  private static ServerStatus determineServerStatus(final @Nullable PendingChange pendingChange){  if (pendingChange.isCandidate()) {    return ServerStatus.Unversioned.INSTANCE;  }  final List<ServerStatusType> types=pendingChange.getChangeTypes();  if (types.contains(ServerStatusType.ADD)) {    return new ServerStatus.ScheduledForAddition(pendingChange);  } else   if (types.contains(ServerStatusType.EDIT) && types.contains(ServerStatusType.RENAME)) {    return new ServerStatus.RenamedCheckedOut(pendingChange);  } else   if (types.contains(ServerStatusType.EDIT)) {    return new ServerStatus.CheckedOutForEdit(pendingChange);  } else   if (types.contains(ServerStatusType.RENAME)) {    return new ServerStatus.Renamed(pendingChange);  } else   if (types.contains(ServerStatusType.DELETE)) {    return new ServerStatus.ScheduledForDeletion(pendingChange);  } else   if (types.contains(ServerStatusType.UNDELETE)) {    return new ServerStatus.Undeleted(pendingChange);  } else   if (types.contains(ServerStatusType.BRANCH)) {    return new ServerStatus.ScheduledForAddition(pendingChange);  } else {    logger.error("Unhandled status type: " + Arrays.toString(pendingChange.getChangeTypes().toArray()));    return null;  }}  }
class C{  public static boolean containsIngoreCase(final String text,final String searchText){  if (text == null || searchText == null)   return false;  final int searchLength=searchText.length();  if (searchLength == 0)   return true;  final char firstCharLow=Character.toLowerCase(searchText.charAt(0));  final char firstCharUpp=Character.toUpperCase(searchText.charAt(0));  for (int i=text.length() - searchLength; i >= 0; i--) {    final char ch=text.charAt(i);    if (ch != firstCharLow && ch != firstCharUpp)     continue;    if (text.regionMatches(true,i,searchText,0,searchLength))     return true;  }  return false;}  }
class C{  public double[] keys(){  double[] keys=new double[size()];  double[] k=_set;  Object[] values=_values;  for (int i=k.length, j=0; i-- > 0; ) {    if (isFull(values,i)) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public void onGenericMotionEvent(MotionEvent event,int nestingLevel){  if (!startEvent(event,nestingLevel,EVENT_TYPE_GENERIC_MOTION)) {    return;  }  try {    ensureMetaStateIsNormalized(event.getMetaState());    final int action=event.getAction();    final int source=event.getSource();    if ((source & InputDevice.SOURCE_CLASS_POINTER) != 0) {switch (action) {case MotionEvent.ACTION_HOVER_ENTER:        ensurePointerCountIsOneForThisAction(event);      mHoverEntered=true;    break;case MotionEvent.ACTION_HOVER_MOVE:  ensurePointerCountIsOneForThisAction(event);break;case MotionEvent.ACTION_HOVER_EXIT:ensurePointerCountIsOneForThisAction(event);if (!mHoverEntered) {problem("ACTION_HOVER_EXIT without prior ACTION_HOVER_ENTER");}mHoverEntered=false;break;case MotionEvent.ACTION_SCROLL:ensureHistorySizeIsZeroForThisAction(event);ensurePointerCountIsOneForThisAction(event);break;default :problem("Invalid action for generic pointer event.");break;}} else if ((source & InputDevice.SOURCE_CLASS_JOYSTICK) != 0) {switch (action) {case MotionEvent.ACTION_MOVE:ensurePointerCountIsOneForThisAction(event);break;default :problem("Invalid action for generic joystick event.");break;}}}  finally {finishEvent();}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.687 -0500",hash_original_method="43938CC724FD99A90F694F02FE52F3C1",hash_generated_method="D31B0EF2E9A540230850D4E0F43BB51C") public boolean isLoopback() throws SocketException {  return hasFlag(IFF_LOOPBACK);}  }
class C{  public void incrementActiveRequests(){  if (!_statsOn) {    return;  }  if (_activeRequests.incrementAndGet() >= HIGH_NUMBER_REQUESTS) {    _alertLog.warn(MessageFormat.format("Number of concurrent requests is high: {0}.  Avg response time recently is: {1}ms",_activeRequests,_reqRspPerMin._avg));  }  _reqsLstMin.incrementAndGet();}  }
class C{  @Override public Double incrByFloat(final String key,final double value){  checkIsInMultiOrPipeline();  client.incrByFloat(key,value);  String dval=client.getBulkReply();  return (dval != null ? new Double(dval) : null);}  }
class C{  public JsonObject add(String name,JsonValue value){  if (name == null) {    throw new NullPointerException("name is null");  }  if (value == null) {    throw new NullPointerException("value is null");  }  table.add(name,names.size());  names.add(name);  values.add(value);  return this;}  }
class C{  protected int hashEntry(Object key,Object value){  return (key == null ? 0 : key.hashCode()) ^ (value == null ? 0 : value.hashCode());}  }
class C{  private TaskRecord readTaskRecord(ResultSet rs) throws SQLException {  String taskId=rs.getString("taskId");  long firstSeen=rs.getTimestamp("firstSeen").getTime();  long lastUpdated=rs.getTimestamp("lastUpdated").getTime();  String title=rs.getString("title");  int numReports=rs.getInt("numReports");  String tagstring=rs.getString("tags");  if (tagstring == null)   tagstring="";  List<String> tags=Arrays.asList(tagstring.split(","));  return new TaskRecord(taskId,firstSeen,lastUpdated,numReports,title,tags);}  }
class C{  public synchronized void saveData(String mPath,String mFileName){  File outFile;  new File(mPath).mkdirs();  outFile=new File(mFileName);  ObdItemAdapter.allowDataUpdates=false;  try {    outFile.createNewFile();    FileOutputStream fStr=new FileOutputStream(outFile);    ObjectOutputStream oStr=new ObjectOutputStream(fStr);    oStr.writeInt(elm.getService());    oStr.writeObject(ObdProt.PidPvs);    oStr.writeObject(ObdProt.VidPvs);    oStr.writeObject(ObdProt.tCodes);    oStr.close();    fStr.close();    String msg=String.format("%s %d Bytes to %s",context.getString(R.string.saved),outFile.length(),mPath);    Log.i(context.getString(R.string.saved),msg);    Toast.makeText(context,msg,Toast.LENGTH_SHORT).show();  } catch (  Exception e) {    Toast.makeText(context,e.toString(),Toast.LENGTH_SHORT).show();    e.printStackTrace();  }  ObdItemAdapter.allowDataUpdates=true;}  }
class C{  public boolean isValid(TicTacToeBoard board){  if (board.isClear(col,row)) {    return false;  }  if (board.get(col,row) == player.getMark()) {    return false;  }  return (neighbors(board) >= 2);}  }
class C{  public LabelView(Element elem){  super(elem);}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  if (bModel.getDocument() != null) {    JCas mergeJCas=null;    try {      aTarget.addChildren(getPage(),FeedbackPanel.class);      mergeJCas=repository.readCorrectionCas(bModel.getDocument());      int address=getAddr(selectSentenceAt(mergeJCas,bModel.getSentenceBeginOffset(),bModel.getSentenceEndOffset()));      int nextSentenceAddress=getNextPageFirstSentenceAddress(mergeJCas,address,bModel.getPreferences().getWindowSize());      if (address != nextSentenceAddress) {        bModel.setSentenceAddress(nextSentenceAddress);        Sentence sentence=selectByAddr(mergeJCas,Sentence.class,nextSentenceAddress);        bModel.setSentenceBeginOffset(sentence.getBegin());        bModel.setSentenceEndOffset(sentence.getEnd());        SuggestionBuilder builder=new SuggestionBuilder(repository,annotationService,userRepository);        curationContainer=builder.buildCurationContainer(bModel);        setCurationSegmentBeginEnd();        curationContainer.setBratAnnotatorModel(bModel);        update(aTarget);        annotator.bratRenderLater(aTarget);      } else {        aTarget.appendJavaScript("alert('This is last page!')");      }    } catch (    UIMAException e) {      aTarget.addChildren(getPage(),FeedbackPanel.class);      error(ExceptionUtils.getRootCause(e));    }catch (    ClassNotFoundException e) {      aTarget.addChildren(getPage(),FeedbackPanel.class);      error(e.getMessage());    }catch (    IOException e) {      aTarget.addChildren(getPage(),FeedbackPanel.class);      error(e.getMessage());    }catch (    BratAnnotationException e) {      aTarget.addChildren(getPage(),FeedbackPanel.class);      error(e.getMessage());    }catch (    Exception e) {      aTarget.addChildren(getPage(),FeedbackPanel.class);      error(e.getMessage());    }  } else {    aTarget.appendJavaScript("alert('Please open a document first!')");  }}  }
class C{  @Nonnull public BugInstance addClassAndMethod(MethodAnnotation methodAnnotation){  addClass(methodAnnotation.getClassName());  addMethod(methodAnnotation);  return this;}  }
class C{  public boolean contains(Key key){  return get(key) != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.718 -0500",hash_original_method="142EC47724C15FE9B1D0347516282D9A",hash_generated_method="EF227FDC3F1D7E747D5CE0A86B18FB30") private static boolean checkPrefixIsIgnorable(final String str,int forwardIndex,int backwardIndex){  boolean trunk_prefix_was_read=false;  while (backwardIndex >= forwardIndex) {    if (tryGetISODigit(str.charAt(backwardIndex)) >= 0) {      if (trunk_prefix_was_read) {        return false;      } else {        trunk_prefix_was_read=true;      }    } else     if (isDialable(str.charAt(backwardIndex))) {      return false;    }    backwardIndex--;  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Toast makeText(Context context,int resId,int duration) throws Resources.NotFoundException {  return makeText(context,context.getResources().getText(resId),duration);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.843 -0500",hash_original_method="FC31CC7FA89B702CE4ED1283F0D70C24",hash_generated_method="462576926F46335C8BC9D3C56B690F44") public int match(Uri data){  String host=data.getHost();  if (host == null) {    return NO_MATCH_DATA;  }  if (false)   Log.v("IntentFilter","Match host " + host + ": "+ mHost);  if (mWild) {    if (host.length() < mHost.length()) {      return NO_MATCH_DATA;    }    host=host.substring(host.length() - mHost.length());  }  if (host.compareToIgnoreCase(mHost) != 0) {    return NO_MATCH_DATA;  }  if (mPort >= 0) {    if (mPort != data.getPort()) {      return NO_MATCH_DATA;    }    return MATCH_CATEGORY_PORT;  }  return MATCH_CATEGORY_HOST;}  }
class C{  static Element createUser(RenderScript rs,DataType dt){  DataKind dk=DataKind.USER;  boolean norm=false;  int vecSize=1;  int id=rs.nElementCreate(dt.mID,dk.mID,norm,vecSize);  return new Element(id,rs,dt,dk,norm,vecSize);}  }
class C{  public void removeAllParameters(){  this.parameters.clear();}  }
class C{  public void writeMessage(final int fieldNumber,final MessageNano value) throws IOException {  writeTag(fieldNumber,WireFormatNano.WIRETYPE_LENGTH_DELIMITED);  writeMessageNoTag(value);}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Number must be non-null");  }  double doubleValue=number.doubleValue();  JSON.checkDouble(doubleValue);  if (number.equals(NEGATIVE_ZERO)) {    return "-0";  }  long longValue=number.longValue();  if (doubleValue == (double)longValue) {    return Long.toString(longValue);  }  return number.toString();}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @Override public void testAddWhileQuerying() throws Exception {  con.addStatement(painter,RDF.TYPE,RDFS.CLASS);  con.addStatement(painting,RDF.TYPE,RDFS.CLASS);  con.addStatement(picasso,RDF.TYPE,painter);  con.addStatement(guernica,RDF.TYPE,painting);  con.addStatement(picasso,paints,guernica);  con.commit();  CloseableIteration<? extends BindingSet,QueryEvaluationException> iter;  iter=evaluate("SELECT ?C where { ?s <" + RDF.TYPE + ">  ?C}",con);  while (iter.hasNext()) {    BindingSet bindings=iter.next();    Value c=bindings.getValue("C");    if (c instanceof Resource) {      con.addStatement((Resource)c,RDF.TYPE,RDFS.CLASS);    }  }  con.commit();  assertEquals(3,countElements(con.getStatements(null,RDF.TYPE,RDFS.CLASS,false)));  iter=evaluate("SELECT ?P where {?s ?P ?o}",con);  while (iter.hasNext()) {    BindingSet bindings=iter.next();    Value p=bindings.getValue("P");    if (p instanceof URI) {      con.addStatement((URI)p,RDF.TYPE,RDF.PROPERTY);      con.commit();    }  }  assertEquals(2,countElements(con.getStatements(null,RDF.TYPE,RDF.PROPERTY,false)));}  }
class C{  public BasicUserImpl(){  _id=Defs.NULL_ID;  _name="(Vacio)";}  }
class C{  public Element store(Object o){  Element layoutblocks=new Element("layoutblocks");  setStoreElementClass(layoutblocks);  LayoutBlockManager tm=(LayoutBlockManager)o;  if (tm.isAdvancedRoutingEnabled()) {    layoutblocks.setAttribute("blockrouting","yes");  }  if (tm.getNamedStabilisedSensor() != null) {    layoutblocks.setAttribute("routingStablisedSensor",tm.getNamedStabilisedSensor().getName());  }  java.util.Iterator<String> iter=tm.getSystemNameList().iterator();  if (!iter.hasNext()) {    return null;  }  while (iter.hasNext()) {    String sname=iter.next();    if (sname == null) {      log.error("System name null during LayoutBlock store");    } else {      log.debug("layoutblock system name is " + sname);      LayoutBlock b=tm.getBySystemName(sname);      if (b.getUseCount() > 0) {        Element elem=new Element("layoutblock").setAttribute("systemName",sname);        elem.addContent(new Element("systemName").addContent(sname));        storeCommon(b,elem);        if (!b.getOccupancySensorName().equals("")) {          elem.setAttribute("occupancysensor",b.getOccupancySensorName());        }        elem.setAttribute("occupiedsense","" + b.getOccupiedSense());        elem.setAttribute("trackcolor",ColorUtil.colorToString(b.getBlockTrackColor()));        elem.setAttribute("occupiedcolor",ColorUtil.colorToString(b.getBlockOccupiedColor()));        elem.setAttribute("extracolor",ColorUtil.colorToString(b.getBlockExtraColor()));        layoutblocks.addContent(elem);        if (!b.getMemoryName().equals("")) {          elem.setAttribute("memory",b.getMemoryName());        }        if (!b.useDefaultMetric()) {          elem.addContent(new Element("metric").addContent("" + b.getBlockMetric()));        }      }    }  }  return (layoutblocks);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (key == null || key.trim().length() == 0)   errors.add("key",new ActionMessage("errors.required","")); else {    Settings setting=Settings.getSetting(key);    if (op.equals("Save") && setting != null && setting.getDefaultValue().toString().trim().length() > 0)     errors.add("key",new ActionMessage("errors.exists",key));  }  if (defaultValue == null || defaultValue.trim().length() == 0)   errors.add("defaultValue",new ActionMessage("errors.required",""));  if (allowedValues == null || allowedValues.trim().length() == 0)   errors.add("allowedValues",new ActionMessage("errors.required",""));  if (description == null || description.trim().length() == 0)   errors.add("description",new ActionMessage("errors.required",""));  return errors;}  }
class C{  public boolean isNullInitialization(){  return isPrimitiveInitialization() && operation.getValue() == null;}  }
class C{  public String toString(){  String crlfString="\r\n";  String content="";  String tabString="\t";  content=content.concat(tabString);  content=content.concat("Description: ");  if (this.description != null) {    content=content.concat(description);  }  content=content.concat(crlfString);  content=content.concat(tabString);  content=content.concat("Verb: ");  if (this.verb != null) {    content=content.concat(verb);  }  content=content.concat(crlfString);  content=content.concat(tabString);  content=content.concat("Command: ");  if (this.command != null) {    content=content.concat(command);  }  content=content.concat(crlfString);  return content;}  }
class C{  public static Complex exp(Complex c){  double r=Math.exp(c.real);  return new Complex(r * Math.cos(c.imag),r * Math.sin(c.imag));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.194 -0400",hash_original_method="5460C1BF4694AF8E70CA165118B96A98",hash_generated_method="70B24E9524D2610955AE19CBC0B320C2") static boolean isAppXml(String mime){  return mime != null && (mime.equals("application/xml") || mime.equals("application/xml-dtd") || mime.equals("application/xml-external-parsed-entity")|| mime.startsWith("application/") && mime.endsWith("+xml"));}  }
class C{  protected boolean isDragAndDropOperation(int x,int y){  return draggable;}  }
class C{  protected void loge(String s){  Log.e(mName,s);}  }
class C{  protected void updateNodeAndDescendents(NodeRef node){  if (COUNT_TOTAL_OPERATIONS)   totalRateUpdateSingleCount++;  treeTraversalDelegate.updateNodeAndDescendents(node);  likelihoodKnown=false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1__CODE_LANGS_1:  return codeLangs_1 != null && !codeLangs_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public Interval(ReadableInstant start,ReadablePeriod period){  super(start,period);}  }
class C{  @Override public void createMetaVolumes(StorageSystem storageSystem,StoragePool storagePool,List<Volume> volumes,VirtualPoolCapabilityValuesWrapper capabilities,TaskCompleter taskCompleter) throws Exception {  String label=null;  Volume volume=volumes.get(0);  Long capacity=volume.getTotalMetaMemberCapacity();  Integer metaMemberCount=volume.getMetaMemberCount();  String metaVolumeType=volume.getCompositionType();  boolean opCreationFailed=false;  try {    CIMObjectPath elementCompositionServicePath=_cimPath.getElementCompositionSvcPath(storageSystem);    boolean isThinlyProvisioned=volume.getThinlyProvisioned();    _log.info(String.format("Create Meta Volumes Start - Array: %s, Count: %s, MetaType: %s",storageSystem.getSerialNumber(),volumes.size(),metaVolumeType));    CIMArgument[] inArgs;    CIMInstance poolSetting=null;    if (isThinlyProvisioned && volume.getThinVolumePreAllocationSize() > 0) {      poolSetting=_smisStorageDevicePreProcessor.createStoragePoolSetting(storageSystem,storagePool,volume.getThinVolumePreAllocationSize());    }    inArgs=_helper.getCreateMetaVolumesInputArguments(storageSystem,storagePool,label,capacity,volumes.size(),isThinlyProvisioned,metaVolumeType,metaMemberCount,poolSetting);    CIMArgument[] outArgs=new CIMArgument[5];    StorageSystem forProvider=_helper.getStorageSystemForProvider(storageSystem,volume);    _log.info("Selected Provider : {}",forProvider.getNativeGuid());    SmisAbstractCreateVolumeJob smisJobCompleter=new SmisCreateMultiVolumeJob(null,forProvider.getId(),storagePool.getId(),volumes.size(),taskCompleter);    smisJobCompleter.setCimPath(_cimPath);    _helper.invokeMethodSynchronously(forProvider,elementCompositionServicePath,SmisConstants.CREATE_OR_MODIFY_COMPOSITE_ELEMENT,inArgs,outArgs,smisJobCompleter);  } catch (  WBEMException e) {    _log.error("Problem making SMI-S call: ",e);    opCreationFailed=true;    ServiceError serviceError=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,serviceError);  }catch (  Exception e) {    _log.error("Problem in createMetaVolumes: ",e);    opCreationFailed=true;    ServiceError serviceError=DeviceControllerErrors.smis.methodFailed("createMetaVolumes",e.getMessage());    taskCompleter.error(_dbClient,serviceError);  }  if (opCreationFailed) {    for (    Volume vol : volumes) {      vol.setInactive(true);      _dbClient.persistObject(vol);    }  }  StringBuilder logMsgBuilder=new StringBuilder(String.format("Create meta volumes End - Array:%s, Pool:%s",storageSystem.getSerialNumber(),storagePool.getNativeGuid()));  for (  Volume vol : volumes) {    logMsgBuilder.append(String.format("%nVolume:%s",vol.getLabel()));  }  _log.info(logMsgBuilder.toString());}  }
class C{  private static int[] computeBoundingLengths(Object array){  DoubleArrayType<?> type=DoubleArrayType.getInstanceUnsafe(array.getClass());  int[] maxLengths=new int[type.getDimensions()];  int arrayLength=Array.getLength(array);  maxLengths[0]=arrayLength;  if (!array.getClass().getComponentType().equals(double.class)) {    for (int i=0; i < arrayLength; i++) {      int[] childLengths=computeBoundingLengths(Array.get(array,i));      for (int j=0; j < childLengths.length; j++) {        maxLengths[j + 1]=Math.max(maxLengths[j + 1],childLengths[j]);      }    }  }  return maxLengths;}  }
class C{  public boolean belongsToMethod(BytecodeInstruction instruction){  if (instruction == null)   throw new IllegalArgumentException("null given");  if (!className.equals(instruction.getClassName()))   return false;  if (!methodName.equals(instruction.getMethodName()))   return false;  return true;}  }
class C{  public static void fill(boolean[] array,int start,int end,boolean value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public long next(long startTime,long fromTime,long currentCount){  if (startTime == 0)   startTime=RecurrenceUtil.now();  if (fromTime == 0)   fromTime=startTime;  if (getEndTime() != 0 && getEndTime() <= RecurrenceUtil.now())   return 0;  Debug.logVerbose("Rule NOT expired by end time.",module);  if (getCount() != -1 && currentCount >= getCount())   return 0;  Debug.logVerbose("Rule NOT expired by max count.",module);  boolean isSeeking=true;  long nextRuntime=0;  long seekTime=fromTime;  int loopProtection=0;  int maxLoop=(10 * 10 * 10* 10* 10);  while (isSeeking && loopProtection < maxLoop) {    Date nextRun=getNextFreq(startTime,seekTime);    seekTime=nextRun.getTime();    if (validByRule(nextRun)) {      isSeeking=false;      nextRuntime=nextRun.getTime();    }    loopProtection++;  }  return nextRuntime;}  }
class C{  public void removeBookmark(final Address address){  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  final CBookmark bookmark=m_bookmarkManager.getBookmark(new CAddress(address.toLong()));  Preconditions.checkNotNull(bookmark,"Error: No bookmark exists at the specified address");  m_bookmarkManager.removeBookmark(bookmark);}  }
class C{  public void testCase20(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=-1;  int bSign=1;  byte rBytes[]={-13,20,-74,-57,-27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  protected void sendFunctionGroup2(){  byte[] result=jmri.NmraPacket.function5Through8Packet(address.getNumber(),address.isLongAddress(),getF5(),getF6(),getF7(),getF8());  station.sendPacket(result,1);}  }
class C{  public static Boolean isRequestedWithXHR(Http.Request request){  String requestedWith=request.getHeader("X-Requested-With");  return (requestedWith != null && requestedWith.toLowerCase().equals("xmlhttprequest"));}  }
class C{  public static void drawShapeWithLeader(DrawContext dc,String shape,double width,double height,Point leaderOffset,double leaderGapWidth,int glMode,int cornerRadius){  if (!shape.equals(AVKey.SHAPE_NONE))   drawBuffer(dc,glMode,createShapeWithLeaderBuffer(shape,width,height,leaderOffset,leaderGapWidth,cornerRadius,null));}  }
class C{  public GPUImageCrosshatchFilter(){  this(0.03f,0.003f);}  }
class C{  protected long handleSuspendTimeouts(){  long smallestTimeout=Long.MAX_VALUE;synchronized (suspendLock) {    if (suspendQueue.isEmpty())     return smallestTimeout;    if (isDestroyed())     return smallestTimeout;  }  List timeouts=new ArrayList();  List copySuspendQueue=null;synchronized (suspendLock) {    copySuspendQueue=new ArrayList(suspendQueue);  }  for (Iterator iter=copySuspendQueue.iterator(); iter.hasNext(); ) {    DLockRequestMessage req=(DLockRequestMessage)iter.next();    if (req.checkForTimeout()) {      cleanupSuspendState(req);      timeouts.add(req);    } else {      long timeout=req.getTimeoutTS();      if (timeout < smallestTimeout) {        smallestTimeout=timeout;      }    }  }  int localDebugHandleSuspendTimeouts=0;synchronized (suspendLock) {    localDebugHandleSuspendTimeouts=debugHandleSuspendTimeouts;  }  if (localDebugHandleSuspendTimeouts > 0) {    try {      logger.info(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.DLockGrantor_DEBUGHANDLESUSPENDTIMEOUTS_SLEEPING_FOR__0,localDebugHandleSuspendTimeouts));      Thread.sleep(localDebugHandleSuspendTimeouts);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }  if (!timeouts.isEmpty()) {synchronized (suspendLock) {      if (writeLockWaiters > 0) {        for (Iterator iter=timeouts.iterator(); iter.hasNext(); ) {          DLockRequestMessage req=(DLockRequestMessage)iter.next();          if (suspendQueue.remove(req)) {            if (req.isSuspendLockingRequest()) {              writeLockWaiters--;            }          }        }      } else {        Assert.assertTrue(writeLockWaiters == 0,"Grantor state writeLockWaiters changed while holding suspendLock");        suspendQueue.removeAll(timeouts);      }      checkWriteLockWaiters();    }  }  return smallestTimeout;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ViewPropertyAction(Application app,@Nullable View view,String propertyName,Object propertyValue){  this(app,view,propertyName,propertyValue.getClass(),propertyValue);}  }
class C{  public IpcOutOfSystemResourcesException(Throwable cause){  super(cause);}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  IWorkbenchPart view=HandlerUtil.getActivePart(event);  IWorkbenchWindow window=HandlerUtil.getActiveWorkbenchWindow(event);  IWorkbenchPage activePage=window.getActivePage();  if (view instanceof IndicatorViewPart) {    IndicatorViewPart jsonView=(IndicatorViewPart)view;    ISelection topSelection=activePage.getSelection();    if (topSelection != null && topSelection instanceof IStructuredSelection) {      IStructuredSelection structuredSelection=(IStructuredSelection)topSelection;      NewFilterWizard wizard=new NewFilterWizard();      wizard.init(jsonView,structuredSelection);      WizardDialog dialog=new WizardDialog(window.getShell(),wizard);      dialog.open();    }  }  return null;}  }
class C{  public static TupleQueryResult parseTuple(InputStream in,QueryResultFormat format) throws IOException, QueryResultParseException, TupleQueryResultHandlerException, UnsupportedQueryResultFormatException {  TupleQueryResultParser parser=createTupleParser(format);  TupleQueryResultBuilder qrBuilder=new TupleQueryResultBuilder();  parser.setQueryResultHandler(qrBuilder);  try {    parser.parseQueryResult(in);  } catch (  QueryResultHandlerException e) {    if (e instanceof TupleQueryResultHandlerException) {      throw (TupleQueryResultHandlerException)e;    } else {      throw new TupleQueryResultHandlerException(e);    }  }  return qrBuilder.getQueryResult();}  }
class C{  public void compMult(DoubleVector dv){  for (int i=0; i < len; i++) {    vect[i]*=dv.vect[i];  }}  }
class C{  public void destroy(){}  }
class C{  public Handshake handshake(){  return handshake;}  }
class C{  public byte[] datatypeLiteral2key(final URI datatype,final String value){  if (datatype == null)   throw new IllegalArgumentException();  if (value == null)   throw new IllegalArgumentException();  if (false && datatype.equals(XMLSchema.STRING)) {    return plainLiteral2key(value);  }  keyBuilder.reset().append(TERM_CODE_DTL);  keyBuilder.append(datatype.stringValue());  keyBuilder.append(value);  keyBuilder.appendNul();  return keyBuilder.getKey();}  }
class C{  private void saveResultAndClose(){  lastLocationText=text.getText();  finalResult=tempResult;  dialogShell.close();}  }
class C{  public static String rightPad(String s,int length){  StringBuffer sb=new StringBuffer(s);  for (int i=length - s.length(); i > 0; i--)   sb.append(" ");  return sb.toString();}  }
class C{  private long uniqueKey(){  long uniqueKey;  if ((uniqueKey=this.uniqueKey) == 0) {synchronized (this) {      while ((uniqueKey=this.uniqueKey) == 0) {        this.uniqueKey=ThreadLocalRandom.current().nextLong();      }    }  }  return uniqueKey;}  }
class C{  public ServiceStateException(ServiceStatus expected,ServiceStatus current){  super("Service operation tried on a service with invalid status",new Object[]{expected.name(),current.name()});}  }
class C{  public boolean isMaxYSet(){  return isMaxYSet(0);}  }
class C{  public static String compressChars(String s,char c){  int len=s.length();  StringBuilder sb=new StringBuilder(len);  boolean wasChar=false;  for (int i=0; i < len; i++) {    char c1=s.charAt(i);    if (c1 == c) {      if (wasChar) {        continue;      }      wasChar=true;    } else {      wasChar=false;    }    sb.append(c1);  }  if (sb.length() == len) {    return s;  }  return sb.toString();}  }
class C{  @Override protected boolean removeFromOtherLists(Long position){  return this.durableIDsList.remove(position);}  }
class C{  public static void main(Consumer<Runnable> task,BooleanSupplier terminated){  AtomicBoolean resumed=new AtomicBoolean(false);  Runnable reset=null;  Bukkit.getScheduler().scheduleSyncDelayedTask(Computers.getInstance(),null);  try {    while (!resumed.get()) {      if (terminated.getAsBoolean())       break;      Thread.sleep(40);    }  } catch (  InterruptedException e) {    throw new LuaError(e);  }}  }
class C{  public DataEditor(boolean showMenus){  this.showMenus=showMenus;  this.parameters=new Parameters();}  }
class C{  public InflaterOutputStream(OutputStream out,Inflater infl,int bufLen){  super(out);  if (out == null)   throw new NullPointerException("Null output");  if (infl == null)   throw new NullPointerException("Null inflater");  if (bufLen <= 0)   throw new IllegalArgumentException("Buffer size < 1");  inf=infl;  buf=new byte[bufLen];}  }
class C{  public static void showMessageSheet(Component parentComponent,Object message,SheetListener listener){  showMessageSheet(parentComponent,message,JOptionPane.INFORMATION_MESSAGE,listener);}  }
class C{  public static int[] toIntArray(String str){  return toIntArray(str,true);}  }
class C{  public static double normalizeHours(double time){  double remainder=time % 24;  if (remainder < 0)   remainder+=24;  return remainder;}  }
class C{  public void makeDirty(){  super.makeDirty();  updateAllPatterns();}  }
class C{  @Deprecated public Operation(String op){  operation=op;}  }
class C{  private void addPairedMethodsOfMyHierarchy(){  ITypeHierarchy myHierarchy;  try {    myHierarchy=typeContainer.getBaseType().newTypeHierarchy(new NullProgressMonitor());  } catch (  JavaModelException e) {    GWTPluginLog.logWarning(e,"There may be some GWT RPC methods that were not renamed.");    return;  }  for (  IType curInterface : myHierarchy.getAllInterfaces()) {    try {      TypeContainer curTypeContainer=TypeContainer.createTypeContainer(curInterface);      if (curTypeContainer == null) {        continue;      }      IMethod curPairedMethod=computePairedMethod(curTypeContainer,baseMethod);      if (curPairedMethod == null) {        continue;      }      if (!refactoringContext.visitedMethods.contains(curPairedMethod) && !refactoringContext.toRefactorMethods.contains(curPairedMethod)) {        refactoringContext.toRefactorMethods.add(curPairedMethod);        addMethodsFromTopmostHierarchyToSet(curPairedMethod,refactoringContext.visitedMethods);      }    } catch (    JavaModelException e) {      GWTPluginLog.logWarning(e,String.format("Could not search the hierarchy of %1$s for RPC methods to rename.",curInterface.getElementName()));      continue;    }catch (    RemoteServiceException e) {      GWTPluginLog.logWarning(e,String.format("Could not search the hierarchy of %1$s for RPC methods to rename.",curInterface.getElementName()));      continue;    }catch (    CoreException e) {      GWTPluginLog.logWarning(e,String.format("Could not search the hierarchy of %1$s for RPC methods to rename.",curInterface.getElementName()));    }  }}  }
class C{  public TXRegionLockRequestImpl(String regionPath,Set<Object> entryKeys){  this.regionPath=regionPath;  this.entryKeys=entryKeys;}  }
class C{  protected void removeCycles(){  int visited[]=new int[m_nodes.size()];  for (int i=0; i < graphMatrix.length; i++) {    if (visited[i] == 0) {      removeCycles2(i,visited);      visited[i]=1;    }  }}  }
class C{  Iterator<T> iterator(QueryEngine engine){  if (cacheValid) {    return cachedObjects.values().iterator();  } else {    return new JClassIterator<T>(this,engine);  }}  }
class C{  public int write(byte[] b,int off){  return 0;}  }
class C{  public void printStat(JCTree tree) throws IOException {  printExpr(tree,TreeInfo.notExpression);}  }
class C{  protected void handleStartedStage(final State current,final State patch){switch (current.taskInfo.subStage) {case TRIGGER_COPIES:    handleTriggerCopies(current);  break;case AWAIT_COMPLETION:processAwaitCompletion(current,patch);break;default :throw new IllegalStateException("Un-supported substage" + current.taskInfo.subStage.toString());}}  }
class C{  public boolean isIdent(){  return isIdent;}  }
class C{  public PrintfFormat(final Locale locale,final String fmtArg) throws IllegalArgumentException {  dfs=new DecimalFormatSymbols(locale);  int ePos;  ConversionSpecification sFmt;  String unCS=this.nonControl(fmtArg,0);  if (unCS != null) {    sFmt=new ConversionSpecification();    sFmt.setLiteral(unCS);    vFmt.add(sFmt);  }  while (cPos != -1 && cPos < fmtArg.length()) {    for (ePos=cPos + 1; ePos < fmtArg.length(); ePos++) {      final char c;      c=fmtArg.charAt(ePos);      if (c == 'i') {        break;      }      if (c == 'd') {        break;      }      if (c == 'f') {        break;      }      if (c == 'g') {        break;      }      if (c == 'G') {        break;      }      if (c == 'o') {        break;      }      if (c == 'x') {        break;      }      if (c == 'X') {        break;      }      if (c == 'e') {        break;      }      if (c == 'E') {        break;      }      if (c == 'c') {        break;      }      if (c == 's') {        break;      }      if (c == '%') {        break;      }    }    ePos=Math.min(ePos + 1,fmtArg.length());    sFmt=new ConversionSpecification(fmtArg.substring(cPos,ePos));    vFmt.add(sFmt);    unCS=this.nonControl(fmtArg,ePos);    if (unCS != null) {      sFmt=new ConversionSpecification();      sFmt.setLiteral(unCS);      vFmt.add(sFmt);    }  }}  }
class C{  protected void visitCompareAssertion(CompareAssertion assertion){  VariableReference source=assertion.getSource();  VariableReference dest=assertion.getDest();  Object value=assertion.getValue();  if (source.getType().equals(Integer.class)) {    if ((Integer)value == 0)     testCode+="assertTrue(" + getVariableName(source) + " == "+ getVariableName(dest)+ ");"; else     if ((Integer)value < 0)     testCode+="assertTrue(" + getVariableName(source) + " < "+ getVariableName(dest)+ ");"; else     testCode+="assertTrue(" + getVariableName(source) + " > "+ getVariableName(dest)+ ");";  } else {    testCode+="assertEquals(" + getVariableName(source) + ".compareTo("+ getVariableName(dest)+ "), "+ value+ ");";  }}  }
class C{  public static String generateKey(String algo) throws NoSuchAlgorithmException {  KeyGenerator keyGenerator=KeyGenerator.getInstance(algo);  SecretKey key=keyGenerator.generateKey();  return new String(Base64.encodeBase64(key.getEncoded()),UTF_8);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  WordDelimiterIterator(byte[] charTypeTable,boolean splitOnCaseChange,boolean splitOnNumerics,boolean stemEnglishPossessive){  this.charTypeTable=charTypeTable;  this.splitOnCaseChange=splitOnCaseChange;  this.splitOnNumerics=splitOnNumerics;  this.stemEnglishPossessive=stemEnglishPossessive;}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);}  }
class C{  BulkOpHolder(){}  }
class C{  public Collection<GridClientNodeImpl> nodes() throws GridClientException {  lock.readLock().lock();  try {    if (lastError != null)     throw new GridClientDisconnectedException("Latest topology update failed.",lastError);    return Collections.unmodifiableCollection(nodes.values());  }  finally {    lock.readLock().unlock();  }}  }
class C{  public E putInt(final String key,final int value){  this.bundle.putInt(key,value);  return (E)this;}  }
class C{  public void registerExtension(ExtensionNamespaceSupport extNsSpt){  String namespace=extNsSpt.getNamespace();  if (namespaceIndex(namespace,m_extensions) == -1) {    m_extensions.add(extNsSpt);    if (m_unregisteredExtensions.contains(namespace))     m_unregisteredExtensions.remove(namespace);  }}  }
class C{  public static int parseCombiningClass(String s) throws Exception {  int combining=-1;  if (s.length() > 0) {    combining=Integer.parseInt(s,10);  }  return combining;}  }
class C{  private void initializeFunction(StellarFunction function,String functionName){  try {    if (!function.isInitialized()) {      function.initialize(context);    }  } catch (  Throwable t) {    String error=format("Unable to initialize function '%s'",functionName);    throw new ParseException(error,t);  }}  }
class C{  public TIntFloatIterator(TIntFloatHashMap map){  super(map);  _map=map;}  }
class C{  void addTestsWithStatus(Collection<TestIdentifier> tests,Deque<String> parentSuiteNames,CtsTestStatus resultFilter){  if (getName() != null) {    parentSuiteNames.addLast(getName());  }  String fullClassName=ArrayUtil.join(".",parentSuiteNames);  for (  Test test : mChildTestMap.values()) {    if (resultFilter.equals(test.getResult())) {      tests.add(new TestIdentifier(fullClassName,test.getName()));    }  }  if (getName() != null) {    parentSuiteNames.removeLast();  }}  }
class C{  public Profile createDefaultProfile() throws IllegalArgumentException, IOException {  if (this.getAllProfiles().isEmpty()) {    String pn=Bundle.getMessage("defaultProfileName");    String pid=FileUtil.sanitizeFilename(pn);    File pp=new File(FileUtil.getPreferencesPath() + pid);    Profile profile=new Profile(pn,pid,pp);    this.addProfile(profile);    this.setAutoStartActiveProfile(true);    log.info("Created default profile \"{}\"",pn);    return profile;  } else {    return null;  }}  }
class C{  public static ImageSource bitmap(Bitmap bitmap){  if (bitmap == null) {    throw new NullPointerException("Bitmap must not be null");  }  return new ImageSource(bitmap,false);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testMemberUpdate(){  Instant instant=Instant.now();  ServerMember member=new ServerMember(Member.Type.ACTIVE,new Address("localhost",5000),null,instant);  instant=Instant.now();  member.update(Member.Type.INACTIVE,instant);  assertEquals(member.type(),Member.Type.INACTIVE);  assertEquals(member.updated(),instant);  member.update(ServerMember.Status.UNAVAILABLE,instant);  instant=Instant.now();  assertEquals(member.status(),ServerMember.Status.UNAVAILABLE);  assertNull(member.clientAddress());  assertEquals(member.updated(),instant);  instant=Instant.now();  member.update(new Address("localhost",6000),instant);  assertEquals(member.clientAddress(),new Address("localhost",6000));  assertEquals(member.updated(),instant);}  }
class C{  public boolean changeEmail(String user,String newEmail){  if (user == null)   return false;  String sql2="update " + APPUSER_TABLENAME + " set EMAIL=? where USERNAME=?";  Connection conn=null;  PreparedStatement pstmt=null;  try {    conn=getConnection();    AppUser appUser=this.retrieveUserInfo(conn,user);    if (appUser == null)     return false;    pstmt=conn.prepareStatement(sql2);    pstmt.setString(1,newEmail);    pstmt.setString(2,appUser.getName().toLowerCase());    pstmt.execute();    conn.commit();    return true;  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Exception",ex);    if (conn != null)     try {      conn.rollback();    } catch (    Exception iex) {    }    throw new RuntimeException(ex);  } finally {    DBUtils.close(pstmt);    DBUtils.close(conn);  }}  }
class C{  public void doRefresh(){  int row=m_tradingdayTable.getSelectedRow();  if (row > -1) {    org.trade.core.valuetype.Date openDate=(org.trade.core.valuetype.Date)m_tradingdayModel.getValueAt(m_tradingdayTable.convertRowIndexToModel(row),0);    org.trade.core.valuetype.Date closeDate=(org.trade.core.valuetype.Date)m_tradingdayModel.getValueAt(m_tradingdayTable.convertRowIndexToModel(row),1);    Tradingday tradingday=m_tradingdayModel.getData().getTradingday(openDate.getZonedDateTime(),closeDate.getZonedDateTime());    doRefresh(tradingday);    this.doRefreshTradingdayTable(tradingday);  }}  }
class C{  public static String findCommonPrefix(String... strings){  StringBuilder prefix=new StringBuilder();  int index=0;  char c=0;  loop:   while (true) {    for (int i=0; i < strings.length; i++) {      String s=strings[i];      if (index == s.length()) {        break loop;      }      if (i == 0) {        c=s.charAt(index);      } else {        if (s.charAt(index) != c) {          break loop;        }      }    }    index++;    prefix.append(c);  }  return prefix.length() == 0 ? StringPool.EMPTY : prefix.toString();}  }
class C{  public boolean areAllSegmentPresent(int datasetSize){  return mPieSegmentList.size() == datasetSize;}  }
class C{  public DataControl(int _maxRows,int _maxColumns,String _rowName,String _columnName){  this(_maxRows,_maxColumns,_rowName,_columnName,true);}  }
class C{  final void tryTerminate(){  for (; ; ) {    int c=ctl.get();    if (isRunning(c) || runStateAtLeast(c,TIDYING) || (runStateOf(c) == SHUTDOWN && !workQueue.isEmpty()))     return;    if (workerCountOf(c) != 0) {      interruptIdleWorkers(ONLY_ONE);      return;    }    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      if (ctl.compareAndSet(c,ctlOf(TIDYING,0))) {        try {          terminated();        }  finally {          ctl.set(ctlOf(TERMINATED,0));          termination.signalAll();        }        return;      }    }  finally {      mainLock.unlock();    }  }}  }
class C{  private void activeDownload(View view,int position){  int status=Variable.getVariable().getDownloadStatus();  MyMap myMap=myDownloadAdapter.getItem(position);  int pausedMapPosition=myDownloadAdapter.getPosition(Variable.getVariable().getPausedMapName());  if (position == pausedMapPosition) {    FloatingActionButton itemIcon=(FloatingActionButton)view.findViewById(R.id.my_download_item_flag);    if (status == Constant.DOWNLOADING) {      Variable.getVariable().setDownloadStatus(Constant.PAUSE);      itemIcon.setImageResource(R.drawable.ic_play_arrow_light_green_a700_24dp);      DownloadFiles.getDownloader().cancelAsyncTask();      downloadStatusTV.setText("Paused ..." + String.format("%1$" + 3 + "s",Variable.getVariable().getMapFinishedPercentage()) + "%");    } else     if (status == Constant.PAUSE && DownloadFiles.getDownloader().isAsytaskFinished()) {      Variable.getVariable().setDownloadStatus(Constant.DOWNLOADING);      itemIcon.setImageResource(R.drawable.ic_pause_orange_24dp);      downloadStatusTV.setText("Downloading ..." + String.format("%1$" + 3 + "s",Variable.getVariable().getMapFinishedPercentage()) + "%");      DownloadFiles.getDownloader().startDownload(Variable.getVariable().getMapsFolder(),myMap.getMapName(),myMap.getUrl());    }  } else   if (vh != view) {    if (status != Constant.DOWNLOADING && status != Constant.PAUSE) {      vh=view;      if (myMap.getStatus() == Constant.ON_SERVER) {        FloatingActionButton itemIcon=(FloatingActionButton)view.findViewById(R.id.my_download_item_flag);        itemIcon.setImageResource(R.drawable.ic_pause_orange_24dp);        this.downloadStatusTV=(TextView)vh.findViewById(R.id.my_download_item_download_status);        downloadStatusTV.setText("Downloading ..." + String.format("%1$" + 3 + "s",0 + "%"));        myDownloadAdapter.getItem(itemPosition).setStatus(Constant.DOWNLOADING);        initProgressBar((ProgressBar)vh.findViewById(R.id.my_download_item_progress_bar));        DownloadFiles.getDownloader().startDownload(Variable.getVariable().getMapsFolder(),myMap.getMapName(),myMap.getUrl());      }    }  }}  }
class C{  public void clearHandlers(){  _problemHandlers=null;}  }
class C{  public static Matrix random(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=Math.random();    }  }  return A;}  }
class C{  public SleepingLockWrapper(Directory delegate,long lockWaitTimeout){  this(delegate,lockWaitTimeout,DEFAULT_POLL_INTERVAL);}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  TableXYDataset tdataset=(TableXYDataset)dataset;  PlotOrientation orientation=plot.getOrientation();  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  if (Double.isNaN(y1)) {    y1=0.0;  }  double[] stack1=getStackValues(tdataset,series,item);  double x0=dataset.getXValue(series,Math.max(item - 1,0));  double y0=dataset.getYValue(series,Math.max(item - 1,0));  if (Double.isNaN(y0)) {    y0=0.0;  }  double[] stack0=getStackValues(tdataset,series,Math.max(item - 1,0));  int itemCount=dataset.getItemCount(series);  double x2=dataset.getXValue(series,Math.min(item + 1,itemCount - 1));  double y2=dataset.getYValue(series,Math.min(item + 1,itemCount - 1));  if (Double.isNaN(y2)) {    y2=0.0;  }  double[] stack2=getStackValues(tdataset,series,Math.min(item + 1,itemCount - 1));  double xleft=(x0 + x1) / 2.0;  double xright=(x1 + x2) / 2.0;  double[] stackLeft=averageStackValues(stack0,stack1);  double[] stackRight=averageStackValues(stack1,stack2);  double[] adjStackLeft=adjustedStackValues(stack0,stack1);  double[] adjStackRight=adjustedStackValues(stack1,stack2);  RectangleEdge edge0=plot.getDomainAxisEdge();  float transX1=(float)domainAxis.valueToJava2D(x1,dataArea,edge0);  float transXLeft=(float)domainAxis.valueToJava2D(xleft,dataArea,edge0);  float transXRight=(float)domainAxis.valueToJava2D(xright,dataArea,edge0);  if (this.roundXCoordinates) {    transX1=Math.round(transX1);    transXLeft=Math.round(transXLeft);    transXRight=Math.round(transXRight);  }  float transY1;  RectangleEdge edge1=plot.getRangeAxisEdge();  GeneralPath left=new GeneralPath();  GeneralPath right=new GeneralPath();  if (y1 >= 0.0) {    transY1=(float)rangeAxis.valueToJava2D(y1 + stack1[1],dataArea,edge1);    float transStack1=(float)rangeAxis.valueToJava2D(stack1[1],dataArea,edge1);    float transStackLeft=(float)rangeAxis.valueToJava2D(adjStackLeft[1],dataArea,edge1);    if (y0 >= 0.0) {      double yleft=(y0 + y1) / 2.0 + stackLeft[1];      float transYLeft=(float)rangeAxis.valueToJava2D(yleft,dataArea,edge1);      if (orientation == PlotOrientation.VERTICAL) {        left.moveTo(transX1,transY1);        left.lineTo(transX1,transStack1);        left.lineTo(transXLeft,transStackLeft);        left.lineTo(transXLeft,transYLeft);      } else {        left.moveTo(transY1,transX1);        left.lineTo(transStack1,transX1);        left.lineTo(transStackLeft,transXLeft);        left.lineTo(transYLeft,transXLeft);      }      left.closePath();    } else {      if (orientation == PlotOrientation.VERTICAL) {        left.moveTo(transX1,transStack1);        left.lineTo(transX1,transY1);        left.lineTo(transXLeft,transStackLeft);      } else {        left.moveTo(transStack1,transX1);        left.lineTo(transY1,transX1);        left.lineTo(transStackLeft,transXLeft);      }      left.closePath();    }    float transStackRight=(float)rangeAxis.valueToJava2D(adjStackRight[1],dataArea,edge1);    if (y2 >= 0.0) {      double yright=(y1 + y2) / 2.0 + stackRight[1];      float transYRight=(float)rangeAxis.valueToJava2D(yright,dataArea,edge1);      if (orientation == PlotOrientation.VERTICAL) {        right.moveTo(transX1,transStack1);        right.lineTo(transX1,transY1);        right.lineTo(transXRight,transYRight);        right.lineTo(transXRight,transStackRight);      } else {        right.moveTo(transStack1,transX1);        right.lineTo(transY1,transX1);        right.lineTo(transYRight,transXRight);        right.lineTo(transStackRight,transXRight);      }      right.closePath();    } else {      if (orientation == PlotOrientation.VERTICAL) {        right.moveTo(transX1,transStack1);        right.lineTo(transX1,transY1);        right.lineTo(transXRight,transStackRight);      } else {        right.moveTo(transStack1,transX1);        right.lineTo(transY1,transX1);        right.lineTo(transStackRight,transXRight);      }      right.closePath();    }  } else {    transY1=(float)rangeAxis.valueToJava2D(y1 + stack1[0],dataArea,edge1);    float transStack1=(float)rangeAxis.valueToJava2D(stack1[0],dataArea,edge1);    float transStackLeft=(float)rangeAxis.valueToJava2D(adjStackLeft[0],dataArea,edge1);    if (y0 >= 0.0) {      if (orientation == PlotOrientation.VERTICAL) {        left.moveTo(transX1,transStack1);        left.lineTo(transX1,transY1);        left.lineTo(transXLeft,transStackLeft);      } else {        left.moveTo(transStack1,transX1);        left.lineTo(transY1,transX1);        left.lineTo(transStackLeft,transXLeft);      }      left.clone();    } else {      double yleft=(y0 + y1) / 2.0 + stackLeft[0];      float transYLeft=(float)rangeAxis.valueToJava2D(yleft,dataArea,edge1);      if (orientation == PlotOrientation.VERTICAL) {        left.moveTo(transX1,transY1);        left.lineTo(transX1,transStack1);        left.lineTo(transXLeft,transStackLeft);        left.lineTo(transXLeft,transYLeft);      } else {        left.moveTo(transY1,transX1);        left.lineTo(transStack1,transX1);        left.lineTo(transStackLeft,transXLeft);        left.lineTo(transYLeft,transXLeft);      }      left.closePath();    }    float transStackRight=(float)rangeAxis.valueToJava2D(adjStackRight[0],dataArea,edge1);    if (y2 >= 0.0) {      if (orientation == PlotOrientation.VERTICAL) {        right.moveTo(transX1,transStack1);        right.lineTo(transX1,transY1);        right.lineTo(transXRight,transStackRight);      } else {        right.moveTo(transStack1,transX1);        right.lineTo(transY1,transX1);        right.lineTo(transStackRight,transXRight);      }      right.closePath();    } else {      double yright=(y1 + y2) / 2.0 + stackRight[0];      float transYRight=(float)rangeAxis.valueToJava2D(yright,dataArea,edge1);      if (orientation == PlotOrientation.VERTICAL) {        right.moveTo(transX1,transStack1);        right.lineTo(transX1,transY1);        right.lineTo(transXRight,transYRight);        right.lineTo(transXRight,transStackRight);      } else {        right.moveTo(transStack1,transX1);        right.lineTo(transY1,transX1);        right.lineTo(transYRight,transXRight);        right.lineTo(transStackRight,transXRight);      }      right.closePath();    }  }  Paint itemPaint=getItemPaint(series,item);  if (pass == 0) {    g2.setPaint(itemPaint);    g2.fill(left);    g2.fill(right);  }  if (entities != null) {    Area dataAreaHotspot=new Area(left);    dataAreaHotspot.add(new Area(right));    dataAreaHotspot.intersect(new Area(dataArea));    if (!dataAreaHotspot.isEmpty()) {      addEntity(entities,dataAreaHotspot,dataset,series,item,transX1,transY1);    }  }}  }
class C{  public static void passedBranch(int val1,int val2,int opcode,int branch,int bytecode_id){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  checkTimeout();  ConstantPoolManager.getInstance().addDynamicConstant(val1);  ConstantPoolManager.getInstance().addDynamicConstant(val2);  double distance_true=0;  double distance_false=0;switch (opcode) {case Opcodes.IF_ICMPEQ:    distance_true=Math.abs((double)val1 - (double)val2);  distance_false=distance_true == 0 ? 1.0 : 0.0;break;case Opcodes.IF_ICMPNE:distance_false=Math.abs((double)val1 - (double)val2);distance_true=distance_false == 0 ? 1.0 : 0.0;break;case Opcodes.IF_ICMPLT:distance_true=val1 >= val2 ? (double)val1 - (double)val2 + 1.0 : 0.0;distance_false=val1 < val2 ? (double)val2 - (double)val1 + 1.0 : 0.0;break;case Opcodes.IF_ICMPGE:distance_true=val1 < val2 ? (double)val2 - (double)val1 + 1.0 : 0.0;distance_false=val1 >= val2 ? (double)val1 - (double)val2 + 1.0 : 0.0;break;case Opcodes.IF_ICMPGT:distance_true=val1 <= val2 ? (double)val2 - (double)val1 + 1.0 : 0.0;distance_false=val1 > val2 ? (double)val1 - (double)val2 + 1.0 : 0.0;break;case Opcodes.IF_ICMPLE:distance_true=val1 > val2 ? (double)val1 - (double)val2 + 1.0 : 0.0;distance_false=val1 <= val2 ? (double)val2 - (double)val1 + 1.0 : 0.0;break;default :logger.error("Unknown opcode: " + opcode);}tracer.trace.branchPassed(branch,bytecode_id,distance_true,distance_false);}  }
class C{  public Object callFunction(Object[] inputs,int function,int numFunctions){  float[] arg=new float[inputs.length];  for (int i=0; i < inputs.length; i++)   if (!(inputs[i] instanceof Float))   arg[i]=0f; else   arg[i]=(Float)inputs[i];  if (function == F_ADD) {    return arg[0] + arg[1];  } else   if (function == F_SUB) {    return arg[0] - arg[1];  } else   if (function == F_MUL) {    return arg[0] * arg[1];  } else   if (function == F_DIV) {    if (arg[1] == 0)     return 1f;    return arg[0] / arg[1];  } else   if (function == F_LT) {    return b2f(arg[0] < arg[1]);  } else   if (function == F_LTE) {    return b2f(arg[0] <= arg[1]);  } else   if (function == F_GT) {    return b2f(arg[0] > arg[1]);  } else   if (function == F_GTE) {    return b2f(arg[0] >= arg[1]);  } else   if (function == F_EQ) {    return b2f(arg[0] == arg[1]);  } else   if (function == F_AND) {    return b2f(f2b(arg[0]) & f2b(arg[1]));  } else   if (function == F_OR) {    return b2f(f2b(arg[0]) | f2b(arg[1]));  } else   if (function == F_NOT) {    return b2f(!f2b(arg[0]));  } else   if (function == F_NOR) {    return b2f(!(f2b(arg[0]) | f2b(arg[1])));  } else   if (function == F_NAND) {    return b2f(!(f2b(arg[0]) & f2b(arg[1])));  } else   if (function == F_NEG) {    return -arg[0];  } else   if (function == F_IF) {    if (f2b(arg[0]))     return arg[1]; else     return arg[2];  } else   if (function == F_IFLEZ) {    if (arg[0] <= 0)     return arg[1]; else     return arg[2];  } else   throw new IllegalArgumentException("Function #" + function + " is unknown.");}  }
class C{  public static List<ConstraintViolation> check(Resource resource,ProgressMonitor monitor){  return check(resource,SPIN.constraint,null,monitor);}  }
class C{  public Method suspendSRDFGroupMethod(final URI systemURI,final RemoteDirectorGroup group,final List<URI> sourceVolumes,final List<URI> targetVolumes){  return new Workflow.Method(SUSPEND_SRDF_GROUP_METHOD,systemURI,group,sourceVolumes,targetVolumes);}  }
class C{  public static int isEqual(Object o1,Object o2,int opcode){  if (opcode == Opcodes.IF_ACMPEQ)   return o1 == o2 ? K : -K; else   return o1 != o2 ? K : -K;}  }
class C{  @Override public void installUI(JComponent c){  buttonHandler=new ButtonHandler();  super.installUI(c);}  }
class C{  public void removeProcessStepByProcessId(long processStepId) throws PortalException, SystemException {  List<StepAllowance> stepAllowances=stepAllowancePersistence.findByprocessStepId(processStepId);  for (  StepAllowance step : stepAllowances) {    stepAllowancePersistence.remove(step);  }}  }
class C{  public void testReplaceFirst(){  Instances result;  m_Filter=getFilter("t","_",false,"first-last",false);  result=performTest();  assertEquals("S_ringAtt1",result.attribute(0).name());}  }
class C{  public boolean isMaxValueSet(){  return mMaxValue != -MathHelper.NULL_VALUE;}  }
class C{  public void resetValues(){  delegate.resetValues();}  }
class C{  private int decipher(long cypherlong){  int cypher=0;  if (cypherlong > Integer.MAX_VALUE) {    cypher=(int)(cypherlong - LARGE_VAL);  } else {    cypher=(int)cypherlong;  }  int rhs=cypher & LOW_16_MASK;  int lhs=cypher >>> HALF_SHIFT;  for (int i=0; i < NUM_ROUNDS; ++i) {    if (i > 0) {      final int temp=lhs;      lhs=rhs;      rhs=temp;    }    rhs^=F(lhs,NUM_ROUNDS - 1 - i);  }  return (lhs << HALF_SHIFT) + (rhs & LOW_16_MASK);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.963 -0500",hash_original_method="87C77E071BDF35E1C91859D8F7A3EF45",hash_generated_method="24B5D2DD8D4071995BF1156D8E7C81EE") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte[] decodedData=new byte[numberQuadruple];  decodedData.addTaint(base64Data.getTaint());  return decodedData;}  }
class C{  void deregisterSpring(Spring spring){  if (spring == null) {    throw new IllegalArgumentException("spring is required");  }  mActiveSprings.remove(spring);  mSpringRegistry.remove(spring.getId());}  }
class C{  @NotNull public static List<SQFVariable> findConfigFunctionVariablesWithTag(@NotNull Module module,@NotNull String tag){  List<SQFVariable> result=new ArrayList<>();  GlobalSearchScope searchScope=module.getModuleContentScope();  Collection<VirtualFile> files=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,SQFFileType.INSTANCE,searchScope);  for (  VirtualFile virtualFile : files) {    PsiFile file=PsiManager.getInstance(module.getProject()).findFile(virtualFile);    if (!(file instanceof SQFFile)) {      continue;    }    SQFFile sqfFile=(SQFFile)file;    ArrayList<SQFVariable> vars=PsiUtil.<SQFVariable>findDescendantElementsOfInstance(sqfFile,SQFVariable.class,null);    if (vars == null) {      continue;    }    for (    SQFVariable var : vars) {      IElementType type=var.getVariableType();      if (type != SQFTypes.GLOBAL_VAR) {        continue;      }      if (SQFStatic.followsSQFFunctionNameRules(var.getVarName())) {        SQFStatic.SQFFunctionTagAndName tagAndName=SQFStatic.getFunctionTagAndName(var.getVarName());        if (tagAndName.tagName.equals(tag)) {          result.add(var);        }      }    }  }  return result;}  }
class C{  public void pop2(){  mv.visitInsn(Opcodes.POP2);}  }
class C{  public boolean isCacheable(){  return true;}  }
class C{  @Override public ResourceProvider init(String scheme,Map arguments){  if (!StringUtil.isEmpty(scheme))   this.scheme=scheme;  if (arguments != null) {    this.arguments=arguments;    Object oCaseSensitive=arguments.get("case-sensitive");    if (oCaseSensitive != null) {      caseSensitive=Caster.toBooleanValue(oCaseSensitive,true);    }    Object oTimeout=arguments.get("lock-timeout");    if (oTimeout != null) {      lockTimeout=Caster.toLongValue(oTimeout,lockTimeout);    }  }  lock.setLockTimeout(lockTimeout);  lock.setCaseSensitive(caseSensitive);  return this;}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  return m_bagger.distributionForInstance(instance);}  }
class C{  public void incCqsStopped(){  this._stats.incLong(_numCqsStoppedId,1);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  protected static void initFilters(boolean loader,Vector<String> classnames){  int i;  int n;  String classname;  Class<?> cls;  String[] ext;  String desc;  FileSourcedConverter converter;  ExtensionFileFilter filter;  if (loader) {    m_LoaderFileFilters=new Vector<ExtensionFileFilter>();  } else {    m_SaverFileFilters=new Vector<ExtensionFileFilter>();  }  for (i=0; i < classnames.size(); i++) {    classname=classnames.get(i);    try {      cls=Class.forName(classname);      converter=(FileSourcedConverter)cls.newInstance();      ext=converter.getFileExtensions();      desc=converter.getFileDescription();    } catch (    Exception e) {      cls=null;      converter=null;      ext=new String[0];      desc="";    }    if (converter == null) {      continue;    }    if (loader) {      for (n=0; n < ext.length; n++) {        filter=new ExtensionFileFilter(ext[n],desc + " (*" + ext[n]+ ")");        m_LoaderFileFilters.add(filter);      }    } else {      for (n=0; n < ext.length; n++) {        filter=new ExtensionFileFilter(ext[n],desc + " (*" + ext[n]+ ")");        m_SaverFileFilters.add(filter);      }    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_INVARIANT_2__CONSTRAINT_1:    return constraint_1 != null && !constraint_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {  this.random=random;}  }
class C{  @Override public String toString(){  return name;}  }
class C{  @Override public String toString(){  return "[SSLServerSocketImpl]";}  }
class C{  private static void initializeLogging(){switch (ConfigManager.instance().getGeneralSettings().getLogLevel()) {case 0:    NaviLogger.setLevel(Level.OFF);  break;case 1:NaviLogger.setLevel(Level.INFO);break;case 2:NaviLogger.setLevel(Level.ALL);break;default :throw new IllegalStateException("IE00844: Unknown log level read from configuration file");}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  @Override public AppUsageViewHolder newViewHolder(ViewGroup viewGroup){  View appUsageView=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.data_app_usage,viewGroup,false);  return new AppUsageViewHolder(appUsageView);}  }
class C{  public static String buildSqlList(final List<? extends Object> paramsIn,final List<Object> paramsOut){  Check.assumeNotNull(paramsOut,"paramsOut not null");  if (paramsIn == null || paramsIn.isEmpty()) {    return SQL_EmptyList;  }  final StringBuilder sql=new StringBuilder("?");  final int len=paramsIn.size();  for (int i=1; i < len; i++) {    sql.append(",?");  }  paramsOut.addAll(paramsIn);  return sql.insert(0,"(").append(")").toString();}  }
class C{  public static String readUTF(DataInput in) throws IOException {  return DataInputStream.readUTF(in);}  }
class C{  private Map<Member,String[]> inspectClass(Class<?> clazz){  InputStream is=clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz));  if (is == null) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Cannot find '.class' file for class [" + clazz + "] - unable to determine constructors/methods parameter names");    }    return NO_DEBUG_INFO_MAP;  }  try {    ClassReader classReader=new ClassReader(is);    Map<Member,String[]> map=new ConcurrentHashMap<Member,String[]>();    classReader.accept(new ParameterNameDiscoveringVisitor(clazz,map),false);    return map;  } catch (  IOException ex) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Exception thrown while reading '.class' file for class [" + clazz + "] - unable to determine constructors/methods parameter names",ex);    }  } finally {    try {      is.close();    } catch (    IOException ex) {    }  }  return NO_DEBUG_INFO_MAP;}  }
class C{  public int findUniqueInt(@NotNull SqlQuery query){  return executeQuery(rowMapperForClass(int.class).unique(),query);}  }
class C{  public Object assign(Object val,boolean strictJava) throws UtilEvalError {  if (type == VARIABLE) {    if (localVar)     nameSpace.setLocalVariableOrProperty(varName,val,strictJava); else     nameSpace.setVariableOrProperty(varName,val,strictJava);  } else   if (type == FIELD) {    try {      ReflectManager.RMSetAccessible(field);      field.set(object,Primitive.unwrap(val));      return val;    } catch (    NullPointerException e) {      throw new UtilEvalError("LHS (" + field.getName() + ") not a static field.");    }catch (    IllegalAccessException e2) {      throw new UtilEvalError("LHS (" + field.getName() + ") can't access field: "+ e2);    }catch (    IllegalArgumentException e3) {      String type=val instanceof Primitive ? ((Primitive)val).getType().getName() : val.getClass().getName();      throw new UtilEvalError("Argument type mismatch. " + (val == null ? "null" : type) + " not assignable to field "+ field.getName());    }  } else   if (type == PROPERTY) {    CollectionManager cm=CollectionManager.getCollectionManager();    if (cm.isMap(object))     cm.putInMap(object,propName,Primitive.unwrap(val)); else     try {      Reflect.setObjectProperty(object,propName,val);    } catch (    ReflectError e) {      Interpreter.debug("Assignment: " + e.getMessage());      throw new UtilEvalError("No such property: " + propName);    }  } else   if (type == INDEX)   try {    Reflect.setIndex(object,index,val);  } catch (  UtilTargetError e1) {    throw e1;  }catch (  Exception e) {    throw new UtilEvalError("Assignment: " + e.getMessage());  } else   throw new InterpreterError("unknown lhs");  return val;}  }
class C{  private int drain(byte[] b,int off,int len){  int remaining=Math.min(len,byteBuffer.remaining());  byteBuffer.get(b,off,remaining);  return remaining;}  }
class C{  public HexaBugs(long seed){  super(seed);  bugs=new HexaBug[bugCount];}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:57.058 -0400",hash_original_method="7D17F81E638A846F421770650AC3E44B",hash_generated_method="7C998523724D05B511B4730D6C0D04B6") public int addGraph(FilterGraph graph){  GraphHandle graphHandle=new GraphHandle(graph);  mGraphs.add(graphHandle);  return mGraphs.size() - 1;}  }
class C{  private void pause(){switch (mMediaPlayerState) {case MediaPlayerState.STATE_PLAYING:    pausePlayback();  break;default :Timber.w("Trying to pause an episode, but player is in state: %s",mPlaybackState);break;}}  }
class C{  public boolean wasPurchased(String sku){  throw new RuntimeException("Unsupported");}  }
class C{  public A next(){  A x=elems.head;  if (!elems.isEmpty()) {    elems=elems.tail;    if (elems.isEmpty())     last=null;    count--;  }  return x;}  }
class C{  private byte[] encode(DexFile file,String prefix,PrintWriter debugPrint,AnnotatedOutput out,boolean consume){  byte[] result=encode0(file,prefix,debugPrint,out,consume);  if (ENABLE_ENCODER_SELF_CHECK && (file != null)) {    try {      DebugInfoDecoder.validateEncode(result,file,ref,code,isStatic);    } catch (    RuntimeException ex) {      encode0(file,"",new PrintWriter(System.err,true),null,false);      throw ex;    }  }  return result;}  }
class C{  public static ShortestPathFinder newInstanceOfAStar(final Coords destination,final MoveStepType stepType,final IGame game){  final ShortestPathFinder spf=new ShortestPathFinder(new ShortestPathFinder.MovePathRelaxer(),new ShortestPathFinder.MovePathAStarComparator(destination,stepType,game.getBoard()),stepType,game);  spf.addStopCondition(new DestinationReachedStopCondition(destination));  spf.addFilter(new MovePathLegalityFilter(game));  return spf;}  }
class C{  public boolean isFillPoints(){  return mFillPoints;}  }
class C{  public static boolean exists(SearchContext searchContext,Query query,EarlyTerminatingCollector collector) throws IOException {  collector.reset();  try {    searchContext.searcher().search(query,collector);  } catch (  EarlyTerminationException e) {  } finally {    searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION);  }  return collector.exists();}  }
class C{  public DetectorResult detect() throws NotFoundException, FormatException {  return detect(null);}  }
class C{  public TableViewerBuilder(Composite parent,int style){  if (parent.getChildren().length > 0) {    throw new IllegalArgumentException("The parent composite for the table needs to be empty for TableColumnLayout.");  }  mappings=Collections.emptyMap();  checkable=(style & SWT.CHECK) == SWT.CHECK;  if (checkable) {    viewer=CheckboxTableViewer.newCheckList(parent,style);  } else {    viewer=new TableViewer(parent,style);  }  viewer.setContentProvider(new ArrayContentProvider());  viewer.setUseHashlookup(true);  ColumnViewerToolTipSupport.enableFor(viewer,ToolTip.NO_RECREATE);  Table table=viewer.getTable();  table.getParent().setLayout(new TableColumnLayout());  table.setHeaderVisible(true);  table.setLinesVisible(true);}  }
class C{  public PageStore(Database database,String fileName,String accessMode,int cacheSizeDefault){  this.fileName=fileName;  this.accessMode=accessMode;  this.database=database;  trace=database.getTrace(Trace.PAGE_STORE);  String cacheType=database.getCacheType();  this.cache=CacheLRU.getCache(this,cacheType,cacheSizeDefault);  pageStoreSession=new Session(database,null,0);}  }
class C{  private void killsRecorder(Player player,final RPEntity victim){  final String str=victim.getName();  final int i=RAT_TYPES.indexOf(str);  if (i == -1) {    logger.warn("Unknown creature killed: " + victim.getName());    return;  }  if ((player.getQuest(QUEST_SLOT) == null) || (player.getQuest(QUEST_SLOT).equals("done") || (player.getQuest(QUEST_SLOT).equals("")))) {    player.setQuest(QUEST_SLOT,"rats;0;0;0;0;0;0");  }  if ("".equals(player.getQuest(QUEST_SLOT,i + 1))) {    player.setQuest(QUEST_SLOT,"rats;0;0;0;0;0;0");  }  int kills;  try {    kills=Integer.parseInt(player.getQuest(QUEST_SLOT,i + 1)) + 1;  } catch (  NumberFormatException nfe) {    kills=1;  }  player.setQuest(QUEST_SLOT,i + 1,Integer.toString(kills));}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  public static boolean createFile(String fileName){  return FilePath.get(fileName).createFile();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.258 -0400",hash_original_method="939173B17A4E542E965C87886AEB52AA",hash_generated_method="939173B17A4E542E965C87886AEB52AA") boolean inOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) <= 0));}  }
class C{  @SafeVarargs public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10,E e11,E e12,E... others){  Object[] array=new Object[12 + others.length];  array[0]=e1;  array[1]=e2;  array[2]=e3;  array[3]=e4;  array[4]=e5;  array[5]=e6;  array[6]=e7;  array[7]=e8;  array[8]=e9;  array[9]=e10;  array[10]=e11;  array[11]=e12;  System.arraycopy(others,0,array,12,others.length);  return construct(array);}  }
class C{  public void firePropertyChange(PropertyChangeID id,Object oldProp,Object newProp){  String pcname;  pcname=PCIDMap.get(id);  firePropertyChange(new PropertyChangeEvent(this,pcname,oldProp,newProp));}  }
class C{  public int model(){  return theModel;}  }
class C{  public static String readAll(final InputStream input) throws IOException {  return readAll(new InputStreamReader(input));}  }
class C{  private void makeInhibitory(final Neuron source,List<Synapse> syns,boolean looseSynapses){  for (  Neuron target : getNeuronsInRadius(source,inhibitoryRadius)) {    if (!sourceNeurons.contains(target)) {      continue;    }    if (Network.getSynapse(source,target) != null) {      continue;    }    if (!allowSelfConnections) {      if (source == target) {        continue;      }    }    if (Math.random() < inhibitoryProbability) {      Synapse synapse=new Synapse(source,target);      synapse.setStrength(-1);      if (looseSynapses) {        network.addSynapse(synapse);      }      syns.add(synapse);    }  }}  }
class C{  protected QuickAdapter(Context context,MultiItemTypeSupport<T> multiItemTypeSupport){  super(context,multiItemTypeSupport);}  }
class C{  private void retrieveResourcePools(){  Query.Builder queryBuilder=Query.Builder.create().addKindFieldClause(ResourcePoolState.class);  if (this.resourcePoolLinks != null && !this.resourcePoolLinks.isEmpty()) {    queryBuilder.addInClause(ServiceDocument.FIELD_NAME_SELF_LINK,this.resourcePoolLinks);  }  QueryTask queryTask=QueryTask.Builder.createDirectTask().setQuery(queryBuilder.build()).addOption(QueryOption.EXPAND_CONTENT).build();  this.host.sendRequest(Operation.createPost(this.host,ServiceUriPaths.CORE_QUERY_TASKS).setBody(queryTask).setReferer(this.host.getUri()).setCompletion(null));}  }
class C{  public AppsForYourDomainClient(String adminEmail,String adminPassword,String domain) throws Exception {  this(domain);  userService=new UserService("gdata-sample-AppsForYourDomain-UserService");  userService.setUserCredentials(adminEmail,adminPassword);  nicknameService=new NicknameService("gdata-sample-AppsForYourDomain-NicknameService");  nicknameService.setUserCredentials(adminEmail,adminPassword);  emailListService=new EmailListService("gdata-sample-AppsForYourDomain-EmailListService");  emailListService.setUserCredentials(adminEmail,adminPassword);  emailListRecipientService=new EmailListRecipientService("gdata-sample-AppsForYourDomain-EmailListRecipientService");  emailListRecipientService.setUserCredentials(adminEmail,adminPassword);  groupService=new AppsGroupsService(adminEmail,adminPassword,domain,"gdata-sample-AppsForYourDomain-AppsGroupService");}  }
class C{  public void paintButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void serveStaticResources(String prefix,Map<String,Resource> resources){  for (  Map.Entry<String,Resource> staticResource : resources.entrySet()) {    String path=staticResource.getKey();    Resource resource=staticResource.getValue();    serve(prefix + path).with(new ResourceServlet(resource));  }}  }
class C{  public SearchSourceBuilder postFilter(String postFilterString){  return postFilter(postFilterString.getBytes(Charsets.UTF_8));}  }
class C{  public void load(String prefix,Properties in) throws GridClientException {  while (prefix.endsWith("."))   prefix=prefix.substring(0,prefix.length() - 1);  if (!prefix.isEmpty())   prefix+=".";  String balancer=in.getProperty(prefix + "balancer");  String connectTimeout=in.getProperty(prefix + "connectTimeout");  String cred=in.getProperty(prefix + "credentials");  String autoFetchMetrics=in.getProperty(prefix + "autoFetchMetrics");  String autoFetchAttrs=in.getProperty(prefix + "autoFetchAttributes");  String maxConnIdleTime=in.getProperty(prefix + "idleTimeout");  String proto=in.getProperty(prefix + "protocol");  String srvrs=in.getProperty(prefix + "servers");  String tcpNoDelay=in.getProperty(prefix + "tcp.noDelay");  String topRefreshFreq=in.getProperty(prefix + "topology.refresh");  String sslEnabled=in.getProperty(prefix + "ssl.enabled");  String sslProto=in.getProperty(prefix + "ssl.protocol","TLS");  String sslKeyAlg=in.getProperty(prefix + "ssl.key.algorithm","SunX509");  String keyStorePath=in.getProperty(prefix + "ssl.keystore.location");  String keyStorePwd=in.getProperty(prefix + "ssl.keystore.password");  String keyStoreType=in.getProperty(prefix + "ssl.keystore.type");  String trustStorePath=in.getProperty(prefix + "ssl.truststore.location");  String trustStorePwd=in.getProperty(prefix + "ssl.truststore.password");  String trustStoreType=in.getProperty(prefix + "ssl.truststore.type");  String dataCfgs=in.getProperty(prefix + "data.configurations");  setBalancer(resolveBalancer(balancer));  if (!F.isEmpty(connectTimeout))   setConnectTimeout(Integer.parseInt(connectTimeout));  if (!F.isEmpty(cred)) {    int idx=cred.indexOf(':');    if (idx >= 0 && idx < cred.length() - 1) {      setSecurityCredentialsProvider(new SecurityCredentialsBasicProvider(new SecurityCredentials(cred.substring(0,idx),cred.substring(idx + 1))));    } else {      setSecurityCredentialsProvider(new SecurityCredentialsBasicProvider(new SecurityCredentials(null,null,cred)));    }  }  if (!F.isEmpty(autoFetchMetrics))   setAutoFetchMetrics(Boolean.parseBoolean(autoFetchMetrics));  if (!F.isEmpty(autoFetchAttrs))   setAutoFetchAttributes(Boolean.parseBoolean(autoFetchAttrs));  if (!F.isEmpty(maxConnIdleTime))   setMaxConnectionIdleTime(Integer.parseInt(maxConnIdleTime));  if (!F.isEmpty(proto))   setProtocol(GridClientProtocol.valueOf(proto));  if (!F.isEmpty(srvrs))   setServers(Arrays.asList(srvrs.replaceAll("\\s+","").split(",")));  if (!F.isEmpty(tcpNoDelay))   setTcpNoDelay(Boolean.parseBoolean(tcpNoDelay));  if (!F.isEmpty(topRefreshFreq))   setTopologyRefreshFrequency(Long.parseLong(topRefreshFreq));  if (!F.isEmpty(sslEnabled) && Boolean.parseBoolean(sslEnabled)) {    GridSslBasicContextFactory factory=new GridSslBasicContextFactory();    factory.setProtocol(F.isEmpty(sslProto) ? "TLS" : sslProto);    factory.setKeyAlgorithm(F.isEmpty(sslKeyAlg) ? "SunX509" : sslKeyAlg);    if (F.isEmpty(keyStorePath))     throw new IllegalArgumentException("SSL key store location is not specified.");    factory.setKeyStoreFilePath(keyStorePath);    if (keyStorePwd != null)     factory.setKeyStorePassword(keyStorePwd.toCharArray());    factory.setKeyStoreType(F.isEmpty(keyStoreType) ? "jks" : keyStoreType);    if (F.isEmpty(trustStorePath))     factory.setTrustManagers(GridSslBasicContextFactory.getDisabledTrustManager()); else {      factory.setTrustStoreFilePath(trustStorePath);      if (trustStorePwd != null)       factory.setTrustStorePassword(trustStorePwd.toCharArray());      factory.setTrustStoreType(F.isEmpty(trustStoreType) ? "jks" : trustStoreType);    }    setSslContextFactory(factory);  }  if (!F.isEmpty(dataCfgs)) {    String[] names=dataCfgs.replaceAll("\\s+","").split(",");    Collection<GridClientDataConfiguration> list=new ArrayList<>();    for (    String cfgName : names) {      if (F.isEmpty(cfgName))       continue;      String name=in.getProperty(prefix + "data." + cfgName+ ".name");      String bal=in.getProperty(prefix + "data." + cfgName+ ".balancer");      String aff=in.getProperty(prefix + "data." + cfgName+ ".affinity");      GridClientDataConfiguration dataCfg=new GridClientDataConfiguration();      dataCfg.setName(F.isEmpty(name) ? null : name);      dataCfg.setBalancer(resolveBalancer(bal));      dataCfg.setAffinity(resolveAffinity(aff));      list.add(dataCfg);    }    setDataConfigurations(list);  }}  }
class C{  public static String normalize_vi(String text){  Matcher m=ALPHABET_WITH_DMARK.matcher(text);  StringBuffer buf=new StringBuffer();  while (m.find()) {    int alphabet=TO_NORMALIZE_VI_CHARS.indexOf(m.group(1));    int dmark=DMARK_CLASS.indexOf(m.group(2));    m.appendReplacement(buf,NORMALIZED_VI_CHARS[dmark].substring(alphabet,alphabet + 1));  }  if (buf.length() == 0)   return text;  m.appendTail(buf);  return buf.toString();}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ", "+ resultSetHoldability+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkHoldability(resultSetHoldability);    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public double optDouble(String key){  return optDouble(key,Double.NaN);}  }
class C{  public SafeHtml sanitize(@Nullable String html){  return sanitize(html,null,null);}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("prepareStatement(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    return prepareStatement(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static String formatSecondsToHMS(long seconds){  if (null == mHourMinSecFormat) {    mHourMinSecFormat=new SimpleDateFormat("HH:mm:ss");    mHourMinSecFormat.setTimeZone(TimeZone.getTimeZone("UTC"));    mMinSecFormat=new SimpleDateFormat("mm:ss");    mMinSecFormat.setTimeZone(TimeZone.getTimeZone("UTC"));  }  if (seconds < 3600) {    return mMinSecFormat.format(new Date(seconds * 1000));  } else {    return mHourMinSecFormat.format(new Date(seconds * 1000));  }}  }
class C{  public T6(V1 v1,V2 v2,V3 v3,V4 v4,V5 v5,V6 v6){  super(v1,v2,v3,v4,v5,v6);}  }
class C{  public synchronized void add(Integer i){  value.add(i);  setValue(value);}  }
class C{  public static void runStart(){  running=true;  for (  SimEntity ent : entities) {    ent.startEntity();  }  printMessage("Entities started.");}  }
class C{  public Response lockoutUser(String username){  return restClient.post("lockouts/" + username,null,new HashMap<String,String>());}  }
class C{  protected void logSizes(){  StringBuilder buf=new StringBuilder();  final int cols=widths.size();  final int rows=heights.size();{    buf.append("Widths: ");    for (int x=0; x < cols; x++) {      if (x > 0) {        buf.append(", ");      }      buf.append(widths.get(x));    }    buf.append('\n');  }{    buf.append("Heights: ");    for (int y=0; y < rows; y++) {      if (y > 0) {        buf.append(", ");      }      buf.append(heights.get(y));    }    buf.append('\n');  }{    for (int y=0; y < rows; y++) {      for (int x=0; x < cols; x++) {        buf.append(usage.get(y).get(x) != null ? "X" : "_");      }      buf.append("|\n");    }    for (int x=0; x < cols; x++) {      buf.append('-');    }    buf.append("+\n");  }  LOG.debug(buf);}  }
class C{  public void testFourNodeSubmitQueryWithSequentialConsistency() throws Throwable {  testSubmitQuery(4,Query.ConsistencyLevel.SEQUENTIAL);}  }
class C{  public final CC shrinkPrio(int... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  shrinkPrioY(widthHeight[1]);case 1:shrinkPrioX(widthHeight[0]);}return this;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T cloneReflective(T value){  try {    return (T)value.getClass().getMethod("clone").invoke(value);  } catch (  Exception e) {    throw new IllegalArgumentException("clone failed for value type " + value.getClass().getName() + ", e="+ e,e);  }}  }
class C{  public void success(String message){  write(message,MSG_WARNING);}  }
class C{  public void testSyncFailedDialog_RetryButtonActuallyRetries(){  expectVisible(viewWithText(R.string.sync_failed_retry));  App.getInstance().getUserManager().setAutoCancelEnabled(false);  click(viewWithText(R.string.sync_failed_retry));  waitForProgressFragment();  expectVisible(viewWithText("GU"));}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @ParamsNoField public File outFile(String name){  return mOutputParams.outFile(name);}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  mAlphabetIndexer.setCursor(newCursor);  return super.swapCursor(newCursor);}  }
class C{  public final long consumption(){  return ((long)pages.size()) << 12;}  }
class C{  public String toValue(){  return value;}  }
class C{  @Override public synchronized void insertRow(T row){  if (writeRowData == null) {    writeRowData=new byte[GTG.crypt.crypt.getNumOutputBytesForEncryption(row.data2.length)];  }  byte[] encryptedData=row.encryptRow(writeRowData);  SQLiteStatement s=DbUtil.createOrGetStatement(GTG.db,tableInfo.insertStatementStr);  s.bindLong(1,row.id);  s.bindLong(2,GTG.crypt.userDataKeyId);  s.bindBlob(3,encryptedData);  row.id=(int)s.executeInsert();}  }
class C{  public ZipParser(){}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public int createMessages(){  String[][] initMsgs=new String[][]{new String[]{MMailMsg.MAILMSGTYPE_UserVerification,"EMail Verification","EMail Verification ","Dear ","\nYou requested the Verification Code: ","\nPlease enter the verification code to get access."},new String[]{MMailMsg.MAILMSGTYPE_UserPassword,"Password Request","Password Request ","Dear ","\nWe received a 'Send Password' request from: ","\nYour password is: "},new String[]{MMailMsg.MAILMSGTYPE_Subscribe,"Subscription New","New Subscription ","Dear ","\nYou requested to be added to the list: ","\nThanks for your interest."},new String[]{MMailMsg.MAILMSGTYPE_UnSubscribe,"Subscription Removed","Remove Subscription ","Dear ","\nYou requested to be removed from the list: ","\nSorry to see you go.  This is effictive immediately."},new String[]{MMailMsg.MAILMSGTYPE_OrderAcknowledgement,"Order Acknowledgement","Adempiere Web - Order ","Dear ","\nThank you for your purchase: ","\nYou can view your Orders, Invoices, Payments in the Web Store." + "\nFrom there, you also download your Assets (Documentation, etc.)"},new String[]{MMailMsg.MAILMSGTYPE_PaymentAcknowledgement,"Payment Success","Adempiere Web - Payment ","Dear ","\nThank you for your payment of ","\nYou can view your Orders, Invoices, Payments in the Web Store." + "\nFrom there you also download your Assets (Documentation, etc.)"},new String[]{MMailMsg.MAILMSGTYPE_PaymentError,"Payment Error","Adempiere Web - Declined Payment ","Dear ","\nUnfortunately your payment was declined: ","\nPlease check and try again. You can pay later by going to 'My Orders' or 'My Invoices' - or by directly creating a payment in 'My Payments'"},new String[]{MMailMsg.MAILMSGTYPE_Request,"Request","Request ","Dear ","\nThank you for your request: " + MRequest.SEPARATOR,MRequest.SEPARATOR + "\nPlease check back for updates."},new String[]{MMailMsg.MAILMSGTYPE_UserAccount,"Welcome Message","Welcome","Welcome to our Web Store","This is the Validation Code to access information:",""}};  if (m_msgs == null)   getMailMsgs(false);  if (m_msgs.length == initMsgs.length)   return 0;  int counter=0;  for (int i=0; i < initMsgs.length; i++) {    boolean found=false;    for (int m=0; m < m_msgs.length; m++) {      if (initMsgs[i][0].equals(m_msgs[m].getMailMsgType())) {        found=true;        break;      }    }    if (found)     continue;    MMailMsg msg=new MMailMsg(this,initMsgs[i][0],initMsgs[i][1],initMsgs[i][2],initMsgs[i][3],initMsgs[i][4],initMsgs[i][5]);    if (msg.save())     counter++; else     log.severe("Not created MailMsgType=" + initMsgs[i][0]);  }  log.info("#" + counter);  m_msgs=null;  return counter;}  }
class C{  public void test_DivideBigDecimalRoundingModeHALF_EVEN(){  String a="3736186567876876578956958765675671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.HALF_EVEN;  String c="50000260373164286401361913";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  public void keyPressed(KeyEvent e){  if (tree != null && isNavigationKey(e)) {    prefix="";    typedString="";    lastTime=0L;  }}  }
class C{  @Description(summary="Create jaqu.jar with only the Java Query implementation.") public void jarJaqu(){  compile(true,false,true);  manifest("H2 JaQu","");  FileList files=files("temp/org/h2/jaqu");  files.addAll(files("temp/META-INF/MANIFEST.MF"));  files.exclude("*.DS_Store");  files=excludeTestMetaInfFiles(files);  jar("bin/h2jaqu" + getJarSuffix(),files,"temp");}  }
class C{  public void start(DaemonStart start) throws DaemonException, IOException {  DaemonParameters parameters=new DaemonParameters();  String handleId=start.getHandleId();  parameters.setParameter("handleId",handleId);  InstalledLocalContainer container=start.getContainer();  if (container != null) {    boolean autostart=start.isAutostart();    String installerZipFile=start.getInstallerZipFile();    String logFile=start.getLogFile();    List<Deployable> deployables=start.getDeployables();    LocalConfiguration configuration=container.getConfiguration();    parameters.setParameter("autostart",String.valueOf(autostart));    parameters.setParameter("containerId",container.getId());    parameters.setParameter("configurationType",configuration.getType().toString());    parameters.setParameter("timeout",String.valueOf(container.getTimeout()));    if (container.getHome() != null) {      parameters.setParameter("containerHome",container.getHome());    }    if (configuration.getHome() != null) {      parameters.setParameter("configurationHome",configuration.getHome());    }    if (installerZipFile != null) {      if (!installed(installerZipFile)) {        parameters.setFile("installerZipFileData",installerZipFile);      }      parameters.setParameter("installerZipFile",fileHandler.getName(installerZipFile));    }    if (deployables != null) {      parameters.setParameter("deployableFiles",setupDeployables(parameters,deployables));    }    setupConfigFiles(parameters,configuration);    if (container instanceof InstalledLocalContainer) {      setupExtraClasspath(parameters,(InstalledLocalContainer)container);      setupSharedClasspath(parameters,(InstalledLocalContainer)container);    }    setupAdditionalClasspath(parameters,start.getAdditionalClasspathEntries());    parameters.setParameter("configurationProperties",setupConfigurationProperties(configuration));    parameters.setParameter("containerProperties",setupContainerProperties(container));    parameters.setParameter("xmlReplacements",setupXmlReplacements(container));    parameters.setParameter("containerOutput",container.getOutput());    if (logFile != null) {      parameters.setParameter("containerLogFile",logFile);    }    parameters.setParameter("containerLogLevel",container.getLogger().getLevel().toString());    if (container.isAppend()) {      parameters.setParameter("containerAppend","on");    } else {      parameters.setParameter("containerAppend","off");    }  }  invoke("start",parameters);}  }
class C{  protected boolean checkTemplateTable(){  int[] tableKeys=X_CM_TemplateTable.getAllIDs("CM_TemplateTable","CM_Template_ID=" + this.getCM_Template_ID(),get_TrxName());  if (tableKeys != null) {    for (int i=0; i < tableKeys.length; i++) {      X_CM_TemplateTable thisTemplateTable=new X_CM_TemplateTable(getCtx(),tableKeys[i],get_TrxName());      int[] existingKeys=X_CM_CStageTTable.getAllIDs("CM_CStageTTable","CM_TemplateTable_ID=" + thisTemplateTable.get_ID(),get_TrxName());      if (existingKeys == null || existingKeys.length == 0) {        X_CM_CStageTTable newCStageTTable=new X_CM_CStageTTable(getCtx(),0,get_TrxName());        newCStageTTable.setAD_Client_ID(getAD_Client_ID());        newCStageTTable.setAD_Org_ID(getAD_Org_ID());        newCStageTTable.setCM_CStage_ID(get_ID());        newCStageTTable.setCM_TemplateTable_ID(thisTemplateTable.get_ID());        newCStageTTable.setDescription(thisTemplateTable.getDescription());        newCStageTTable.setName(thisTemplateTable.getName());        newCStageTTable.setOtherClause(thisTemplateTable.getOtherClause());        newCStageTTable.setWhereClause(thisTemplateTable.getWhereClause());        newCStageTTable.saveEx();      }    }  }  return true;}  }
class C{  private void ungzipResponse(){  if (_isGziped) {    if (_gzipedBytes.length == 0) {      _bytes=new byte[0];      return;    }    try {      MyByteArrayInputStream bais=new MyByteArrayInputStream(_gzipedBytes);      GZIPInputStream is=new GZIPInputStream(bais);      byte[] buff=new byte[16 * 10240];      ByteArrayOutputStream os=new ByteArrayOutputStream(_gzipedBytes.length * 2);      int n;      while (bais.getPos() < _gzipedBytes.length && (n=is.read(buff)) >= 0)       os.write(buff,0,n);      _bytes=os.toByteArray();      is.close();      os.close();    } catch (    IOException exc) {      exc.printStackTrace();    }  } else   if (_isDeflated) {    if (_gzipedBytes.length == 0) {      _bytes=new byte[0];      return;    }    try {      InflaterInputStream is=new InflaterInputStream(new ByteArrayInputStream(_gzipedBytes),new Inflater(true));      byte[] buff=new byte[16 * 10240];      ByteArrayOutputStream os=new ByteArrayOutputStream(_gzipedBytes.length * 2);      int n;      while ((n=is.read(buff)) >= 0)       os.write(buff,0,n);      _bytes=os.toByteArray();      is.close();      os.close();    } catch (    IOException exc) {      exc.printStackTrace();    }  }}  }
class C{  @Override public long position(String searchstr,long start) throws SQLException {  return stringData.indexOf(searchstr,(int)start);}  }
class C{  public ToStringBuilder(Object object,ToStringStyle style,StringBuffer buffer){  if (style == null) {    style=getDefaultStyle();  }  if (buffer == null) {    buffer=new StringBuffer(512);  }  this.buffer=buffer;  this.style=style;  this.object=object;  style.appendStart(buffer,object);}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  doneButtonActionPerformed();  super.windowClosing(e);}  }
class C{  public static Builder builder(PollRequest request){  return new Builder(request);}  }
class C{  public VirtualFile resolve(String relative){  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.517 -0400",hash_original_method="5F71C7E0A5593F392A0806A3CE200AF9",hash_generated_method="3D876F5F04348BCFF0BE874605FB00BE") public Iterator<E> iterator(){  return m.navigableKeySet().iterator();}  }
class C{  public void actionPerformed(ActionEvent e){  log.config("");  if (e.getSource().equals(multiCurrency))   loadBPartner(); else   if (e.getSource().equals(allocateButton)) {    allocateButton.setEnabled(false);    saveData();    loadBPartner();    allocateButton.setEnabled(true);  }}  }
class C{  public ReadWriteMultipleResponse(){  super();  setFunctionCode(Modbus.READ_WRITE_MULTIPLE);}  }
class C{  private AlarmEvent deactivation(AlarmPoint alarm){  AlarmStatus oldStatus=alarm.currentStatus();  if (oldStatus.name(null).equals(AlarmPoint.STATUS_ACTIVATED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_NORMAL);    return createEvent(alarm.identity().get(),oldStatus,newStatus,AlarmPoint.EVENT_DEACTIVATION);  }  return null;}  }
class C{  public ComponentBuilder event(ClickEvent clickEvent){  this.current.setClickEvent(clickEvent);  return this;}  }
class C{  void debug(){  logger.info(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.TESTING,"[DLockGrantor.debug] svc=" + this.dlock.getName() + "; state="+ this.state+ "; initLatch.ct="+ this.whileInitializing.getCount()));}  }
class C{  private void logFailure(Throwable e){  ServiceUtils.logSevere(this,e);}  }
class C{  public int value(){  return value;}  }
class C{  @Override public void configure(Binder binder){}  }
class C{  public void removeProgressListener(ProgressListener list){  getProgressSupport().remove(list);}  }
class C{  public void deleteAllProperties(){  String query=new MessageFormat(deletellAQuery).format(new Object[]{tableName});  jdbcTemplate.execute(query);}  }
class C{  public static ValueTime fromNanos(long nanos){  return (ValueTime)Value.cache(new ValueTime(nanos));}  }
class C{  public MessageWaitingDataCoding(IndicationSense indicationSense,IndicationType indicationType){  this(indicationSense,indicationType,null);}  }
class C{  protected String doIt() throws java.lang.Exception {  StringBuffer sql=new StringBuffer("SELECT * " + "FROM S_TimeExpense e " + "WHERE e.Processed='Y'"+ " AND e.AD_Client_ID=?");  if (m_C_BPartner_ID != 0)   sql.append(" AND e.C_BPartner_ID=?");  if (m_DateFrom != null)   sql.append(" AND e.DateReport >= ?");  if (m_DateTo != null)   sql.append(" AND e.DateReport <= ?");  sql.append(" AND EXISTS (SELECT * FROM S_TimeExpenseLine el " + "WHERE e.S_TimeExpense_ID=el.S_TimeExpense_ID" + " AND el.C_InvoiceLine_ID IS NULL"+ " AND el.ConvertedAmt<>0) "+ "ORDER BY e.C_BPartner_ID, e.S_TimeExpense_ID");  int old_BPartner_ID=-1;  MInvoice invoice=null;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    int par=1;    pstmt.setInt(par++,getAD_Client_ID());    if (m_C_BPartner_ID != 0)     pstmt.setInt(par++,m_C_BPartner_ID);    if (m_DateFrom != null)     pstmt.setTimestamp(par++,m_DateFrom);    if (m_DateTo != null)     pstmt.setTimestamp(par++,m_DateTo);    rs=pstmt.executeQuery();    while (rs.next()) {      MTimeExpense te=new MTimeExpense(getCtx(),rs,get_TrxName());      if (te.getC_BPartner_ID() != old_BPartner_ID) {        completeInvoice(invoice);        MBPartner bp=new MBPartner(getCtx(),te.getC_BPartner_ID(),get_TrxName());        log.info("New Invoice for " + bp);        invoice=new MInvoice(getCtx(),0,null);        invoice.setClientOrg(te.getAD_Client_ID(),te.getAD_Org_ID());        invoice.setC_DocTypeTarget_ID(MDocType.DOCBASETYPE_APInvoice);        invoice.setDocumentNo(te.getDocumentNo());        invoice.setBPartner(bp);        if (invoice.getC_BPartner_Location_ID() == 0) {          log.log(Level.SEVERE,"No BP Location: " + bp);          addLog(0,te.getDateReport(),null,"No Location: " + te.getDocumentNo() + " "+ bp.getName());          invoice=null;          break;        }        invoice.setM_PriceList_ID(te.getM_PriceList_ID());        invoice.setSalesRep_ID(te.getDoc_User_ID());        String descr=Msg.translate(getCtx(),"S_TimeExpense_ID") + ": " + te.getDocumentNo()+ " "+ DisplayType.getDateFormat(DisplayType.Date).format(te.getDateReport());        invoice.setDescription(descr);        if (!invoice.save())         new IllegalStateException("Cannot save Invoice");        old_BPartner_ID=bp.getC_BPartner_ID();      }      MTimeExpenseLine[] tel=te.getLines(false);      for (int i=0; i < tel.length; i++) {        MTimeExpenseLine line=tel[i];        if (line.getC_InvoiceLine_ID() != 0 || Env.ZERO.compareTo(line.getQtyReimbursed()) == 0 || Env.ZERO.compareTo(line.getPriceReimbursed()) == 0)         continue;        if (line.getC_Activity_ID() != 0 && line.getC_Activity_ID() != invoice.getC_Activity_ID())         invoice.setC_Activity_ID(line.getC_Activity_ID());        if (line.getC_Campaign_ID() != 0 && line.getC_Campaign_ID() != invoice.getC_Campaign_ID())         invoice.setC_Campaign_ID(line.getC_Campaign_ID());        if (line.getC_Project_ID() != 0 && line.getC_Project_ID() != invoice.getC_Project_ID())         invoice.setC_Project_ID(line.getC_Project_ID());        if (!invoice.save())         new IllegalStateException("Cannot save Invoice");        MInvoiceLine il=new MInvoiceLine(invoice);        if (line.getM_Product_ID() != 0)         il.setM_Product_ID(line.getM_Product_ID(),true);        il.setQty(line.getQtyReimbursed());        il.setDescription(line.getDescription());        il.setC_Project_ID(line.getC_Project_ID());        il.setC_ProjectPhase_ID(line.getC_ProjectPhase_ID());        il.setC_ProjectTask_ID(line.getC_ProjectTask_ID());        il.setC_Activity_ID(line.getC_Activity_ID());        il.setC_Campaign_ID(line.getC_Campaign_ID());        il.setPrice(line.getPriceReimbursed());        il.setTax();        if (!il.save())         new IllegalStateException("Cannot save Invoice Line");        line.setC_InvoiceLine_ID(il.getC_InvoiceLine_ID());        line.saveEx();      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql.toString(),e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  completeInvoice(invoice);  return "@Created@=" + m_noInvoices;}  }
class C{  public Matrix(int m,int n,double s){  this.m=m;  this.n=n;  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s;    }  }}  }
class C{  public void finishEvaluating(final EvolutionState state,final int threadnum){}  }
class C{  @Override public void importVolume(URI vplexURI,List<VolumeDescriptor> volumeDescriptors,URI vplexSystemProject,URI vplexSystemTenant,URI newCosURI,String newLabel,String setTransferSpeed,Boolean markInactive,String opId) throws ControllerException {  List<VolumeDescriptor> vplexDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{Type.VPLEX_VIRT_VOLUME},new VolumeDescriptor.Type[]{});  Assert.isTrue(vplexDescriptors.size() == 1);  VolumeDescriptor vplexDescriptor=vplexDescriptors.get(0);  URI vplexVolumeURI=vplexDescriptor.getVolumeURI();  List<URI> volumeURIs=new ArrayList<URI>();  volumeURIs.add(vplexVolumeURI);  List<VolumeDescriptor> blockDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{Type.BLOCK_DATA},new VolumeDescriptor.Type[]{});  URI createdVolumeURI=null;  if (blockDescriptors.size() == 1) {    createdVolumeURI=blockDescriptors.get(0).getVolumeURI();  }  Map<URI,StorageSystem> arrayMap=buildArrayMap(null,blockDescriptors,null);  Map<URI,Volume> volumeMap=buildVolumeMap(null,blockDescriptors,null);  if (!blockDescriptors.isEmpty()) {    volumeURIs.addAll(VolumeDescriptor.getVolumeURIs(blockDescriptors));  }  List<VolumeDescriptor> importDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{Type.VPLEX_IMPORT_VOLUME},new VolumeDescriptor.Type[]{});  URI importedVolumeURI=null;  if (!importDescriptors.isEmpty()) {    importedVolumeURI=importDescriptors.get(0).getVolumeURI();    volumeURIs.add(importedVolumeURI);  }  StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);  Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);  StorageSystem importedArray=null;  Volume importedVolume=null;  if (importedVolumeURI != null) {    importedVolume=getDataObject(Volume.class,importedVolumeURI,_dbClient);    importedArray=getDataObject(StorageSystem.class,importedVolume.getStorageController(),_dbClient);    arrayMap.put(importedArray.getId(),importedArray);    volumeMap.put(importedVolumeURI,importedVolume);  }  try {    Workflow workflow=_workflowService.getNewWorkflow(this,IMPORT_VOLUMES_WF_NAME,false,opId);    String waitFor=null;    List<URI> vplexVolumeURIs=new ArrayList<URI>();    vplexVolumeURIs.add(vplexVolumeURI);    if (importedVolumeURI != null) {      Workflow.Method nullMethod=rollbackMethodNullMethod();      Workflow.Method virtVolInactiveMethod=markVolumesInactiveMethod(vplexVolumeURIs);      waitFor=workflow.createStep(null,"Mark virtual volume inactive on rollback",waitFor,vplexURI,vplexSystem.getSystemType(),this.getClass(),nullMethod,virtVolInactiveMethod,null);    }    if (createdVolumeURI != null) {      waitFor=_blockDeviceController.addStepsForCreateVolumes(workflow,waitFor,volumeDescriptors,opId);    }    Volume firstVolume=volumeMap.values().iterator().next();    URI projectURI=firstVolume.getProject().getURI();    URI tenantURI=firstVolume.getTenant().getURI();    Project project=_dbClient.queryObject(Project.class,projectURI);    if (!project.checkInternalFlags(Flag.INTERNAL_OBJECT) && vplexSystemProject != null && vplexSystemTenant != null) {      createWorkflowStepsForBlockVolumeExport(workflow,vplexSystem,arrayMap,volumeMap,vplexSystemProject,vplexSystemTenant,waitFor);    } else {      createWorkflowStepsForBlockVolumeExport(workflow,vplexSystem,arrayMap,volumeMap,projectURI,tenantURI,waitFor);    }    String transferSize=null;    if (setTransferSpeed != null) {      transferSize=migrationSpeedToTransferSizeMap.get(setTransferSpeed);      if (transferSize == null) {        _log.info("Transfer speed parameter {} is invalid",setTransferSpeed);      }    }    if (transferSize == null) {      String speed=customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.MIGRATION_SPEED,vplexSystem.getSystemType(),null);      _log.info("Migration speed is {}",speed);      transferSize=migrationSpeedToTransferSizeMap.get(speed);    }    String stepId=workflow.createStepId();    Workflow.Method vplexExecuteMethod=createVirtualVolumeFromImportMethod(vplexVolume.getStorageController(),vplexVolumeURI,importedVolumeURI,createdVolumeURI,vplexSystemProject,vplexSystemTenant,newCosURI,newLabel,transferSize);    Workflow.Method vplexRollbackMethod=null;    if (importedVolumeURI != null) {      vplexRollbackMethod=deleteVirtualVolumesMethod(vplexURI,vplexVolumeURIs,null);    } else {      vplexRollbackMethod=rollbackUpgradeVirtualVolumeLocalToDistributedMethod(vplexURI,vplexVolume.getDeviceLabel(),vplexVolume.getNativeId(),stepId);    }    workflow.createStep(VPLEX_STEP,String.format("VPlex %s creating virtual volume",vplexSystem.getId().toString()),EXPORT_STEP,vplexURI,vplexSystem.getSystemType(),this.getClass(),vplexExecuteMethod,vplexRollbackMethod,stepId);    if (createdVolumeURI != null) {      createWorkflowStepForWaitOnRebuild(workflow,vplexSystem,vplexVolumeURI,VPLEX_STEP);    }    if (importedVolume != null && importedVolume.getConsistencyGroup() != null) {      ConsistencyGroupManager consistencyGroupManager=getConsistencyGroupManager(vplexVolume);      List<URI> volsForCG=Arrays.asList(vplexVolumeURI);      consistencyGroupManager.addStepsForCreateConsistencyGroup(workflow,VPLEX_STEP,vplexSystem,volsForCG,false);    }    String successMessage;    if (importedVolumeURI != null) {      successMessage="Import volume to VPLEX virtual volume successful for: " + vplexVolumeURIs.toString();    } else {      successMessage="Upgrade local VPLEX volume to distributed successful for: " + vplexVolumeURIs.toString();    }    TaskCompleter completer=new VPlexTaskCompleter(Volume.class,volumeURIs,opId,null);    ImportRollbackHandler importRollbackHandler=new ImportRollbackHandler();    Object[] importRollbackHandlerArgs=new Object[]{importedVolumeURI,createdVolumeURI,vplexVolumeURI};    workflow.executePlan(completer,successMessage,null,null,importRollbackHandler,importRollbackHandlerArgs);  } catch (  Exception ex) {    ServiceError serviceError;    if (importedVolumeURI != null) {      _log.error("Could not import volume for vplex: " + vplexURI,ex);      String opName=ResourceOperationTypeEnum.IMPORT_BLOCK_VOLUME.getName();      serviceError=VPlexApiException.errors.importVolumeFailedException(opName,ex);    } else {      _log.error("Could not upgrade volume for vplex: " + vplexURI,ex);      String opName=ResourceOperationTypeEnum.UPGRADE_VPLEX_LOCAL_TO_DISTRIBUTED.getName();      serviceError=VPlexApiException.errors.upgradeLocalToDistributedFailedException(opName,ex);    }    TaskCompleter completer=new VPlexTaskCompleter(Volume.class,volumeURIs,opId,null);    completer.error(_dbClient,serviceError);    if (markInactive) {      if ((importedVolumeURI != null) && (vplexVolume != null)) {        _dbClient.markForDeletion(vplexVolume);      }      if (createdVolumeURI != null) {        Volume createdVolume=_dbClient.queryObject(Volume.class,createdVolumeURI);        if (createdVolume != null) {          _dbClient.markForDeletion(createdVolume);        }      }      if ((importedVolume != null) && (importedVolume.checkInternalFlags(DataObject.Flag.INTERNAL_OBJECT))) {        _dbClient.markForDeletion(importedVolume);      }    }  }}  }
class C{  public XMLString substring(int beginIndex,int endIndex){  return new XMLStringDefault(m_str.substring(beginIndex,endIndex));}  }
class C{  protected Reader composeXml() throws IOException {  XmlBuffer xb=new XmlBuffer();  xb.writeXmlHeader("UTF-8");  xb.openElement("class");  xb.openElement("table");  if (title != null) {    xb.write(title);  }  xb.closeElement("table");  for (  FieldSet fieldset : form) {    xb.openElement("tableData");    xb.openElement("rows");    for (    Field field : fieldset.fields()) {      xb.openElement("row");      xb.openElement("nameColumn");      xb.write(field.getLabel());      xb.closeElement("nameColumn");      xb.openElement("value");      xb.write(field.getStringValue());      xb.closeElement("value");      xb.closeElement("row");    }    xb.closeElement("rows");    xb.closeElement("tableData");  }  xb.closeElement("class");  return new StringReader(xb.toString());}  }
class C{  private static int gcd(int a,int b){  if (b == 0)   return a;  return gcd(b,a % b);}  }
class C{  public String thresholdTipText(){  return "Threshold for the max allowable error when predicting a numeric class. Should be >= 0.";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:36.176 -0500",hash_original_method="EA2451DCCE3D57D72B2D978A02AB8CBE",hash_generated_method="194B276AA366D5A4E4FE69CFF40373CA") public boolean allocRow(){  acquireReference();  try {    return nativeAllocRow(mWindowPtr);  }  finally {    releaseReference();  }}  }
class C{  public boolean add(final long[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public static int compareTo(Character left,Character right){  return compareTo(Integer.valueOf(left),right);}  }
class C{  public DateTimeComponents(DateTimeComponents original){  this(original,null,null,null,null,null,null,null);}  }
class C{  @Override public void process(){  CompiledMethod compiledMethod=CompiledMethods.getCompiledMethod(CMID);  NormalMethod todoMethod=(NormalMethod)compiledMethod.getMethod();  double priority;  OptOptions options;  OptimizationPlanElement[] optimizationPlan;  ControllerPlan oldPlan=ControllerMemory.findLatestPlan(todoMethod);  if (oldPlan != null) {    CompilationPlan oldCompPlan=oldPlan.getCompPlan();    priority=oldPlan.getPriority();    options=oldCompPlan.options;    optimizationPlan=oldCompPlan.optimizationPlan;  } else {    priority=5.0;    options=(OptOptions)RuntimeCompiler.options;    optimizationPlan=(OptimizationPlanElement[])RuntimeCompiler.optimizationPlan;  }  CompilationPlan compPlan=new CompilationPlan(todoMethod,optimizationPlan,null,options);  OnStackReplacementPlan plan=new OnStackReplacementPlan(this.suspendedThread,compPlan,this.CMID,this.whereFrom,this.tsFromFPoff,this.ypTakenFPoff,priority);  Controller.compilationQueue.insert(priority,plan);  AOSLogging.logger.logOsrEvent("OSR inserts compilation plan successfully!");  suspendedThread=null;  CMID=0;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  protected CCTransitionScene(float t,CCScene s){  assert s != null : "Argument scene must be non-null";  duration=t;  inScene=s;  outScene=CCDirector.sharedDirector().getRunningScene();  if (inScene == outScene) {    throw new TransitionWithInvalidSceneException("Incoming scene must be different from the outgoing scene");  }  CCTouchDispatcher.sharedDispatcher().setDispatchEvents(false);  sceneOrder();}  }
class C{  private void run() throws Exception {  DevelopmentProvider tp=new DevelopmentProvider();  Topology t=tp.newTopology("mqttSampleSubscriber");  MqttConfig mqttConfig=createMqttConfig();  MqttStreams mqtt=new MqttStreams(t,null);  TStream<String> msgs=mqtt.subscribe(topic,0);  msgs.sink(null);  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(t);}  }
class C{  private void ensurePvChangeListeners(){  if (PvChangeListeners == null)   PvChangeListeners=new HashMap<PvChangeListener,Integer>();}  }
class C{  private String createKey(String url){  return String.valueOf(url.hashCode());}  }
class C{  public static boolean invertM(double[] mInv,int mInvOffset,double[] m,int mOffset){  final double src0=m[mOffset + 0];  final double src4=m[mOffset + 1];  final double src8=m[mOffset + 2];  final double src12=m[mOffset + 3];  final double src1=m[mOffset + 4];  final double src5=m[mOffset + 5];  final double src9=m[mOffset + 6];  final double src13=m[mOffset + 7];  final double src2=m[mOffset + 8];  final double src6=m[mOffset + 9];  final double src10=m[mOffset + 10];  final double src14=m[mOffset + 11];  final double src3=m[mOffset + 12];  final double src7=m[mOffset + 13];  final double src11=m[mOffset + 14];  final double src15=m[mOffset + 15];  final double atmp0=src10 * src15;  final double atmp1=src11 * src14;  final double atmp2=src9 * src15;  final double atmp3=src11 * src13;  final double atmp4=src9 * src14;  final double atmp5=src10 * src13;  final double atmp6=src8 * src15;  final double atmp7=src11 * src12;  final double atmp8=src8 * src14;  final double atmp9=src10 * src12;  final double atmp10=src8 * src13;  final double atmp11=src9 * src12;  final double dst0=(atmp0 * src5 + atmp3 * src6 + atmp4 * src7) - (atmp1 * src5 + atmp2 * src6 + atmp5 * src7);  final double dst1=(atmp1 * src4 + atmp6 * src6 + atmp9 * src7) - (atmp0 * src4 + atmp7 * src6 + atmp8 * src7);  final double dst2=(atmp2 * src4 + atmp7 * src5 + atmp10 * src7) - (atmp3 * src4 + atmp6 * src5 + atmp11 * src7);  final double dst3=(atmp5 * src4 + atmp8 * src5 + atmp11 * src6) - (atmp4 * src4 + atmp9 * src5 + atmp10 * src6);  final double dst4=(atmp1 * src1 + atmp2 * src2 + atmp5 * src3) - (atmp0 * src1 + atmp3 * src2 + atmp4 * src3);  final double dst5=(atmp0 * src0 + atmp7 * src2 + atmp8 * src3) - (atmp1 * src0 + atmp6 * src2 + atmp9 * src3);  final double dst6=(atmp3 * src0 + atmp6 * src1 + atmp11 * src3) - (atmp2 * src0 + atmp7 * src1 + atmp10 * src3);  final double dst7=(atmp4 * src0 + atmp9 * src1 + atmp10 * src2) - (atmp5 * src0 + atmp8 * src1 + atmp11 * src2);  final double btmp0=src2 * src7;  final double btmp1=src3 * src6;  final double btmp2=src1 * src7;  final double btmp3=src3 * src5;  final double btmp4=src1 * src6;  final double btmp5=src2 * src5;  final double btmp6=src0 * src7;  final double btmp7=src3 * src4;  final double btmp8=src0 * src6;  final double btmp9=src2 * src4;  final double btmp10=src0 * src5;  final double btmp11=src1 * src4;  final double dst8=(btmp0 * src13 + btmp3 * src14 + btmp4 * src15) - (btmp1 * src13 + btmp2 * src14 + btmp5 * src15);  final double dst9=(btmp1 * src12 + btmp6 * src14 + btmp9 * src15) - (btmp0 * src12 + btmp7 * src14 + btmp8 * src15);  final double dst10=(btmp2 * src12 + btmp7 * src13 + btmp10 * src15) - (btmp3 * src12 + btmp6 * src13 + btmp11 * src15);  final double dst11=(btmp5 * src12 + btmp8 * src13 + btmp11 * src14) - (btmp4 * src12 + btmp9 * src13 + btmp10 * src14);  final double dst12=(btmp2 * src10 + btmp5 * src11 + btmp1 * src9) - (btmp4 * src11 + btmp0 * src9 + btmp3 * src10);  final double dst13=(btmp8 * src11 + btmp0 * src8 + btmp7 * src10) - (btmp6 * src10 + btmp9 * src11 + btmp1 * src8);  final double dst14=(btmp6 * src9 + btmp11 * src11 + btmp3 * src8) - (btmp10 * src11 + btmp2 * src8 + btmp7 * src9);  final double dst15=(btmp10 * src10 + btmp4 * src8 + btmp9 * src9) - (btmp8 * src9 + btmp11 * src10 + btmp5 * src8);  final double det=src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;  if (det == 0.0f) {    return false;  }  final double invdet=1.0f / det;  mInv[mInvOffset]=dst0 * invdet;  mInv[1 + mInvOffset]=dst1 * invdet;  mInv[2 + mInvOffset]=dst2 * invdet;  mInv[3 + mInvOffset]=dst3 * invdet;  mInv[4 + mInvOffset]=dst4 * invdet;  mInv[5 + mInvOffset]=dst5 * invdet;  mInv[6 + mInvOffset]=dst6 * invdet;  mInv[7 + mInvOffset]=dst7 * invdet;  mInv[8 + mInvOffset]=dst8 * invdet;  mInv[9 + mInvOffset]=dst9 * invdet;  mInv[10 + mInvOffset]=dst10 * invdet;  mInv[11 + mInvOffset]=dst11 * invdet;  mInv[12 + mInvOffset]=dst12 * invdet;  mInv[13 + mInvOffset]=dst13 * invdet;  mInv[14 + mInvOffset]=dst14 * invdet;  mInv[15 + mInvOffset]=dst15 * invdet;  return true;}  }
class C{  public String createFolder(String title,String parentFolderId) throws IOException {  return drive.files().insert(createFileReference(title,GOOGLE_FOLDER,parentFolderId)).execute().getId();}  }
class C{  public boolean isVisible(){  if (face != null) {    return face.isVisible();  } else {    return visible;  }}  }
class C{  public boolean isStripWhitespaceText(){  return stripWhitespaceText;}  }
class C{  public int size(){  return store.size();}  }
class C{  @Override public void printElement(Vertex vertex,Writer writer,String indent,List<Vertex> functions,List<Vertex> variables,Set<Vertex> elements,Network network) throws IOException {  if (vertex == null) {    writer.write("null");    return;  }  if (vertex.instanceOf(Primitive.STATE)) {  } else   if (vertex.instanceOf(Primitive.VARIABLE)) {  } else   if (vertex.instanceOf(Primitive.FORMULA)) {    if (vertex.hasData()) {      writer.write(String.valueOf(vertex.getData()));    } else {      printTemplate(vertex,writer,indent,functions,variables,elements,network);    }    return;  } else   if (vertex.instanceOf(Primitive.PATTERN)) {    writer.write(String.valueOf(vertex.getData()));    return;  } else   if (vertex.instanceOf(Primitive.FUNCTION)) {    if (!elements.contains(vertex)) {      functions.add(vertex);      elements.add(vertex);    }  } else   if (vertex.instanceOf(Primitive.EXPRESSION)) {    if (vertex.getData() instanceof BinaryData) {      Vertex detached=parseExpressionByteCode(vertex,(BinaryData)vertex.getData(),network);      elements.add(detached);      vertex=detached;    }    printOperator(vertex,writer,indent,functions,variables,elements,network);    return;  } else   if (vertex.instanceOf(Primitive.PARAGRAPH)) {    writer.write("\"");    String text=vertex.printString();    if (text.indexOf('"') != -1) {      text=text.replace("\"","\"\"");    }    writer.write(text);    writer.write("\"");    return;  } else   if (vertex.hasData()) {    Object data=vertex.getData();    if (data instanceof Primitive) {      if (!data.equals(Primitive.NULL) && !data.equals(Primitive.TRUE) && !data.equals(Primitive.FALSE)) {        writer.write("#");      }      writer.write(((Primitive)vertex.getData()).getIdentity());    } else     if (data instanceof String) {      writer.write("\"");      String text=(String)vertex.getData();      if (text.indexOf('"') != -1) {        text=text.replace("\"","\\\"");      }      writer.write(text);      writer.write("\"");    } else     if (data instanceof Number) {      writer.write(vertex.getData().toString());    } else {      writer.write(vertex.getDataType());      writer.write("(\"");      writer.write(vertex.getDataValue());      writer.write("\")");    }    return;  } else   if (vertex.instanceOf(Primitive.ARRAY)) {    writer.write("[");    List<Vertex> values=vertex.orderedRelations(Primitive.ELEMENT);    if (values != null) {      boolean first=true;      for (      Vertex value : values) {        if (!first) {          writer.write(", ");        } else {          first=false;        }        printElement(value,writer,indent,functions,variables,elements,network);      }    }    writer.write("]");    return;  } else {    writer.write("Object(");    writer.write(vertex.getId().toString());    writer.write(")");    return;  }  if (vertex.hasName()) {    String name=Utils.compress(vertex.getName(),100);    writer.write(name);  } else {    writer.write("v");    writer.write(vertex.getId().toString());  }  if (vertex.instanceOf(Primitive.FUNCTION)) {    List<Relationship> arguments=vertex.orderedRelationships(Primitive.ARGUMENT);    if (arguments == null) {      writer.write("()");    } else {      printArguments(vertex,Primitive.ARGUMENT,0,null,false,false,false,true,writer,indent + "\t",variables,functions,elements,false,network);    }  }}  }
class C{  public java.lang.StringBuilder append(long l){  return null;}  }
class C{  @Override public String toString(String field){  StringBuilder buffer=new StringBuilder();  if (!term.field().equals(field)) {    buffer.append(term.field());    buffer.append(":");  }  buffer.append(term.text());  return buffer.toString();}  }
class C{  public short readShort(){  return (short)((buf[position++] & 0xff) + ((buf[position++] & 0xff) << 8));}  }
class C{  public IMethodBinding resolveMethodBinding(){  return this.ast.getBindingResolver().resolveMethod(this);}  }
class C{  public BattleListing(final Map<BattleType,Collection<Territory>> battles){  m_battles=battles;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public BooleanNode booleanNode(boolean v){  return v ? BooleanNode.getTrue() : BooleanNode.getFalse();}  }
class C{  public PathMatchingResourcePatternResolver(){  this.resourceLoader=new DefaultResourceLoader();}  }
class C{  public static final long mortonEncode(final long geoHashLong){  final int level=(int)(geoHashLong & 15);  final short odd=(short)(level & 1);  return BitUtil.flipFlop((geoHashLong >>> 4) << odd) << (((12 - level) * 5) + (MORTON_OFFSET - odd));}  }
class C{  @Override protected double estimateRemainingTravelCost(final Node fromNode,final Node toNode){  PreProcessLandmarks.LandmarksData fromRole=getPreProcessData(fromNode);  PreProcessLandmarks.LandmarksData toRole=getPreProcessData(toNode);  double tmpTravCost;  double travCost=0;  for (int i=0, n=this.activeLandmarkIndexes.length; i < n; i++) {    tmpTravCost=estimateRemainingTravelCost(fromRole,toRole,this.activeLandmarkIndexes[i]);    if (tmpTravCost > travCost) {      travCost=tmpTravCost;    }  }  tmpTravCost=super.estimateRemainingTravelCost(fromNode,toNode);  if (travCost > tmpTravCost) {    return travCost;  }  return tmpTravCost;}  }
class C{  public int size(){  return _size;}  }
class C{  public static <T>T jsonToObject(String jsonString,Class<T> klass){  T objectFromJson=null;  try {    GfJsonObject jsonObject=new GfJsonObject(jsonString);    objectFromJson=klass.newInstance();    Method[] declaredMethods=klass.getDeclaredMethods();    Map<String,Method> methodsMap=new HashMap<String,Method>();    for (    Method method : declaredMethods) {      methodsMap.put(method.getName(),method);    }    int noOfFields=jsonObject.size();    Iterator<String> keys=jsonObject.keys();    while (keys.hasNext()) {      String key=keys.next();      Method method=methodsMap.get("set" + capitalize(key));      if (method != null) {        Class<?>[] parameterTypes=method.getParameterTypes();        if (parameterTypes.length == 1) {          Class<?> parameterType=parameterTypes[0];          Object value=jsonObject.get(key);          if (isPrimitiveOrWrapper(parameterType)) {            value=getPrimitiveOrWrapperValue(parameterType,value);          } else           if (isArray(parameterType)) {            value=toArray(value,parameterType);          } else           if (isList(parameterType)) {            value=toList(value,parameterType);          } else           if (isMap(parameterType)) {            value=toMap(value,parameterType);          } else           if (isSet(parameterType)) {            value=toSet(value,parameterType);          } else {            value=jsonToObject(value.toString(),parameterType);          }          method.invoke(objectFromJson,new Object[]{value});          noOfFields--;        }      }    }    if (noOfFields != 0) {      throw new IllegalArgumentException("Not enough setter methods for fields in given JSON String : " + jsonString + " in class : "+ klass);    }  } catch (  InstantiationException e) {    throw new IllegalArgumentException("Couldn't convert JSON to Object of type " + klass,e);  }catch (  IllegalAccessException e) {    throw new IllegalArgumentException("Couldn't convert JSON to Object of type " + klass,e);  }catch (  GfJsonException e) {    throw new IllegalArgumentException("Couldn't convert JSON to Object of type " + klass,e);  }catch (  IllegalArgumentException e) {    throw new IllegalArgumentException("Couldn't convert JSON to Object of type " + klass,e);  }catch (  InvocationTargetException e) {    throw new IllegalArgumentException("Couldn't convert JSON to Object of type " + klass,e);  }  return objectFromJson;}  }
class C{  private void ensureOpen() throws IOException {  if (in == null)   throw new IOException("Stream closed");}  }
class C{  protected void halfsort(Stack<d_node> cover_set){  if (cover_set.length <= 1) {    return;  }  int start=0;  int hi=cover_set.length - 1;  int right=hi;  int left;  while (right > start) {    int mid=start + ((hi - start) >> 1);    boolean jumpover=false;    if (compare(mid,start,cover_set) < 0.0) {      SWAP(mid,start,cover_set);    }    if (compare(hi,mid,cover_set) < 0.0) {      SWAP(mid,hi,cover_set);    } else {      jumpover=true;    }    if (!jumpover && compare(mid,start,cover_set) < 0.0) {      SWAP(mid,start,cover_set);    }    ;    left=start + 1;    right=hi - 1;    do {      while (compare(left,mid,cover_set) < 0.0) {        left++;      }      while (compare(mid,right,cover_set) < 0.0) {        right--;      }      if (left < right) {        SWAP(left,right,cover_set);        if (mid == left) {          mid=right;        } else         if (mid == right) {          mid=left;        }        left++;        right--;      } else       if (left == right) {        left++;        right--;        break;      }    } while (left <= right);    hi=right;  }}  }
class C{  public GridClientException(String msg){  super(msg);}  }
class C{  private void insertProof(ConsensusMessage cm,Epoch epoch){  ByteArrayOutputStream bOut=new ByteArrayOutputStream(248);  try {    new ObjectOutputStream(bOut).writeObject(cm);  } catch (  IOException ex) {    ex.printStackTrace();  }  byte[] data=bOut.toByteArray();  TOMMessage[] msgs=epoch.deserializedPropValue;  boolean hasReconf=false;  for (  TOMMessage msg : msgs) {    if (msg.getReqType() == TOMMessageType.RECONFIG && msg.getViewID() == controller.getCurrentViewId()) {      hasReconf=true;      break;    }  }  if (hasReconf) {    PrivateKey RSAprivKey=controller.getStaticConf().getRSAPrivateKey();    byte[] signature=TOMUtil.signMessage(RSAprivKey,data);    cm.setProof(signature);  } else {    int[] processes=this.controller.getCurrentViewAcceptors();    HashMap<Integer,byte[]> macVector=new HashMap<>();    for (    int id : processes) {      try {        SecretKey key=null;        do {          key=communication.getServersConn().getSecretKey(id);          if (key == null) {            System.out.println("(Acceptor.insertProof) I don't have yet a secret key with " + id + ". Retrying.");            Thread.sleep(1000);          }        } while (key == null);        this.mac.init(key);        macVector.put(id,this.mac.doFinal(data));      } catch (      InterruptedException ex) {        ex.printStackTrace();      }catch (      InvalidKeyException ex) {        System.out.println("Problem with secret key from " + id);        ex.printStackTrace();      }    }    cm.setProof(macVector);  }}  }
class C{  public void prepare(boolean majorGC){  int ordinal=VM.activePlan.collector().parallelWorkerOrdinal();  if (majorGC) {    if (immixSpace.inImmixDefragCollection()) {      short threshold=Defrag.defragSpillThreshold;      resetLineMarksAndDefragStateTable(ordinal,threshold);    }  }}  }
class C{  public int hashCode(){  return getName().hashCode();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.591 -0500",hash_original_method="106989DF67000CA038D75C5F0732B905",hash_generated_method="8B4A91D4CE3A9FF3A63694FAF9AD4684") public Header onGetInitialHeader(){  return mHeaders.get(0);}  }
class C{  public static boolean[] ensureCapacity(boolean[] array,int minCapacity){  int oldCapacity=array.length;  boolean[] newArray;  if (minCapacity > oldCapacity) {    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    newArray=new boolean[newCapacity];    System.arraycopy(array,0,newArray,0,oldCapacity);  } else {    newArray=array;  }  return newArray;}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  public static byte[] stringToBytesASCII(String str){  byte[] b=new byte[str.length()];  for (int i=0; i < b.length; i++) {    b[i]=(byte)str.charAt(i);  }  return b;}  }
class C{  protected void performAction(final ActionEvent e){  if (TabForm.CMD_CREATE_NEW_ITEM.equals(e.getActionCommand())) {    model.createNewItem();  } else   if (TabForm.CMD_REFRESH.equals(e.getActionCommand())) {    model.loadData();    tab.refresh();  } else   if (TabForm.CMD_OPEN_SELECTED_ITEM_IN_BROWSER.equals(e.getActionCommand())) {    model.openSelectedItemsLink();  } else   if (TabForm.CMD_STATUS_LINK.equals(e.getActionCommand())) {    if (model.getTabStatus() == VcsTabStatus.NOT_TF_GIT_REPO) {      model.importIntoTeamServicesGit();    } else     if (model.getTabStatus() == VcsTabStatus.NO_AUTH_INFO) {      model.loadData();    } else {      model.openGitRepoLink();    }  } else   if (TabForm.CMD_AUTO_REFRESH_CHANGED.equals(e.getActionCommand())) {    model.setAutoRefresh(tab.getAutoRefresh());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:57.397 -0500",hash_original_method="C391ED719773BAF357B5BB149771DE74",hash_generated_method="8D0CAC92E9DA3E6B0A9A91571B01C257") public boolean willOverlap(){  return mDelay < 1.0f;}  }
class C{  protected int[] colorSubSampleFromYuvImage(ImageProxy img,int subsample,boolean enableSquareInscribe){  Rect defaultCrop=new Rect(0,0,img.getWidth(),img.getHeight());  return colorSubSampleFromYuvImage(img,defaultCrop,subsample,enableSquareInscribe);}  }
class C{  public Boolean isRecommended3D(){  return recommended3D;}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:37.713 -0500",hash_original_method="313D7507D012D5A754A21F769BA1BB3D",hash_generated_method="E61F57DB8C58E56E795CC1C73527316C") public static byte[] toByteArray(SmsHeader smsHeader){  if ((smsHeader.portAddrs == null) && (smsHeader.concatRef == null) && (smsHeader.miscEltList.isEmpty())&& (smsHeader.languageShiftTable == 0)&& (smsHeader.languageTable == 0)) {    return null;  }  ByteArrayOutputStream outStream=new ByteArrayOutputStream(SmsMessage.MAX_USER_DATA_BYTES);  ConcatRef concatRef=smsHeader.concatRef;  if (concatRef != null) {    if (concatRef.isEightBits) {      outStream.write(ELT_ID_CONCATENATED_8_BIT_REFERENCE);      outStream.write(3);      outStream.write(concatRef.refNumber);    } else {      outStream.write(ELT_ID_CONCATENATED_16_BIT_REFERENCE);      outStream.write(4);      outStream.write(concatRef.refNumber >>> 8);      outStream.write(concatRef.refNumber & 0x00FF);    }    outStream.write(concatRef.msgCount);    outStream.write(concatRef.seqNumber);  }  PortAddrs portAddrs=smsHeader.portAddrs;  if (portAddrs != null) {    if (portAddrs.areEightBits) {      outStream.write(ELT_ID_APPLICATION_PORT_ADDRESSING_8_BIT);      outStream.write(2);      outStream.write(portAddrs.destPort);      outStream.write(portAddrs.origPort);    } else {      outStream.write(ELT_ID_APPLICATION_PORT_ADDRESSING_16_BIT);      outStream.write(4);      outStream.write(portAddrs.destPort >>> 8);      outStream.write(portAddrs.destPort & 0x00FF);      outStream.write(portAddrs.origPort >>> 8);      outStream.write(portAddrs.origPort & 0x00FF);    }  }  if (smsHeader.languageShiftTable != 0) {    outStream.write(ELT_ID_NATIONAL_LANGUAGE_SINGLE_SHIFT);    outStream.write(1);    outStream.write(smsHeader.languageShiftTable);  }  if (smsHeader.languageTable != 0) {    outStream.write(ELT_ID_NATIONAL_LANGUAGE_LOCKING_SHIFT);    outStream.write(1);    outStream.write(smsHeader.languageTable);  }  for (  MiscElt miscElt : smsHeader.miscEltList) {    outStream.write(miscElt.id);    outStream.write(miscElt.data.length);    outStream.write(miscElt.data,0,miscElt.data.length);  }  return outStream.toByteArray();}  }
class C{  @SuppressWarnings("unchecked") @Override public void onStreamRouteBoltSpecChange(RouterSpec spec,Map<String,StreamDefinition> sds){  sanityCheck(spec);  Map<StreamPartition,StreamSortSpec> newSSS=new HashMap<>();  spec.getRouterSpecs().forEach(null);  Set<StreamPartition> newStreamIds=newSSS.keySet();  Set<StreamPartition> cachedStreamIds=cachedSSS.keySet();  Collection<StreamPartition> addedStreamIds=CollectionUtils.subtract(newStreamIds,cachedStreamIds);  Collection<StreamPartition> removedStreamIds=CollectionUtils.subtract(cachedStreamIds,newStreamIds);  Collection<StreamPartition> modifiedStreamIds=CollectionUtils.intersection(newStreamIds,cachedStreamIds);  Map<StreamPartition,StreamSortSpec> added=new HashMap<>();  Map<StreamPartition,StreamSortSpec> removed=new HashMap<>();  Map<StreamPartition,StreamSortSpec> modified=new HashMap<>();  addedStreamIds.forEach(null);  removedStreamIds.forEach(null);  modifiedStreamIds.forEach(null);  if (LOG.isDebugEnabled()) {    LOG.debug("added StreamSortSpec " + added);    LOG.debug("removed StreamSortSpec " + removed);    LOG.debug("modified StreamSortSpec " + modified);  }  router.onStreamSortSpecChange(added,removed,modified);  cachedSSS=newSSS;  Map<StreamPartition,List<StreamRouterSpec>> newSRS=new HashMap<>();  spec.getRouterSpecs().forEach(null);  Set<StreamPartition> newStreamPartitions=newSRS.keySet();  Set<StreamPartition> cachedStreamPartitions=cachedSRS.keySet();  Collection<StreamPartition> addedStreamPartitions=CollectionUtils.subtract(newStreamPartitions,cachedStreamPartitions);  Collection<StreamPartition> removedStreamPartitions=CollectionUtils.subtract(cachedStreamPartitions,newStreamPartitions);  Collection<StreamPartition> modifiedStreamPartitions=CollectionUtils.intersection(newStreamPartitions,cachedStreamPartitions);  Collection<StreamRouterSpec> addedRouterSpecs=new ArrayList<>();  Collection<StreamRouterSpec> removedRouterSpecs=new ArrayList<>();  Collection<StreamRouterSpec> modifiedRouterSpecs=new ArrayList<>();  addedStreamPartitions.forEach(null);  removedStreamPartitions.forEach(null);  modifiedStreamPartitions.forEach(null);  if (LOG.isDebugEnabled()) {    LOG.debug("added StreamRouterSpec " + addedRouterSpecs);    LOG.debug("removed StreamRouterSpec " + removedRouterSpecs);    LOG.debug("modified StreamRouterSpec " + modifiedRouterSpecs);  }  routeCollector.onStreamRouterSpecChange(addedRouterSpecs,removedRouterSpecs,modifiedRouterSpecs,sds);  cachedSRS=newSRS;  sdf=sds;  specVersion=spec.getVersion();}  }
class C{  public boolean isSupportedByServer(){  try {    DiscoverInfo result=ServiceDiscoveryManager.getInstanceFor(connection).discoverInfo(connection.getServiceName());    return result.containsFeature(Carbon.NAMESPACE);  } catch (  XMPPException e) {    return false;  }}  }
class C{  public void clear(){  refSet.clear();  numValues=0;}  }
class C{  @Override public boolean queueAudioBuffers(Queue<AudioBuffer> audioBuffers){  if (!_initialised) {    return false;  }  int[] bids=new int[1];  int i=0;  AudioBuffer b;  while ((b=audioBuffers.poll()) != null) {    if (b instanceof JoalAudioBuffer) {      bids[0]=((JoalAudioBuffer)b).getDataStorageBuffer()[0];    } else {      throw new IllegalArgumentException(b.getSystemName() + " is not a JoalAudioBuffer");    }    al.alSourceQueueBuffers(_source[0],1,bids,0);    if (log.isDebugEnabled()) {      log.debug("Queueing Buffer [" + i + "] "+ b.getSystemName());    }    i++;    if (JoalAudioFactory.checkALError()) {      log.warn("Error queueing JoalSource (" + this.getSystemName() + ") to AudioBuffers ("+ b.getDisplayName()+ ") etc.");      return false;    }  }  return true;}  }
class C{  protected void engineInit(int opmode,Key key,SecureRandom random) throws InvalidKeyException {  core.init(opmode,key,random);}  }
class C{  public CertificateException(String msg){  super(msg);}  }
class C{  @SuppressWarnings("unchecked") private void registerListener(Buffer buffer){  JsonObject storageObject=new JsonObject(buffer.toString());  String requestUrl=storageObject.getString(REQUESTURL);  if (log.isTraceEnabled()) {    log.trace("Request URL: " + requestUrl);  }  String target=getListenerUrlSegment(requestUrl);  String listenerId=getUniqueListenerId(requestUrl);  if (log.isTraceEnabled()) {    log.trace("Target (1st): " + target);  }  JsonObject jsonHook=storageObject.getJsonObject(HOOK);  JsonArray jsonMethods=jsonHook.getJsonArray("methods");  HttpHook hook=new HttpHook(jsonHook.getString("destination"));  if (jsonMethods != null) {    hook.setMethods(jsonMethods.getList());  }  if (jsonHook.containsKey("filter")) {    hook.setFilter(jsonHook.getString("filter"));  }  if (jsonHook.containsKey("filter")) {    hook.setFilter(jsonHook.getString("filter"));  }  if (jsonHook.getInteger(EXPIRE_AFTER) != null) {    hook.setExpireAfter(jsonHook.getInteger(EXPIRE_AFTER));  } else {    hook.setExpireAfter(DEFAULT_HOOK_LISTENERS_EXPIRE_AFTER_TIME);  }  if (jsonHook.getInteger(QUEUE_EXPIRE_AFTER) != null) {    hook.setQueueExpireAfter(jsonHook.getInteger(QUEUE_EXPIRE_AFTER));  }  if (jsonHook.getString(HOOK_TRIGGER_TYPE) != null) {    try {      hook.setHookTriggerType(HookTriggerType.valueOf(jsonHook.getString(HOOK_TRIGGER_TYPE).toUpperCase()));    } catch (    IllegalArgumentException e) {      log.warn("Listener " + listenerId + " for target "+ target+ " has an invalid trigger type "+ jsonHook.getString(HOOK_TRIGGER_TYPE)+ " and will not be registred!",e);      return;    }  }  extractAndAddStaticHeadersToHook(jsonHook,hook);  String expirationTimeExpression=storageObject.getString(EXPIRATION_TIME);  LocalDateTime expirationTime=null;  if (expirationTimeExpression != null) {    try {      expirationTime=ExpiryCheckHandler.parseDateTime(expirationTimeExpression);    } catch (    Exception e) {      log.warn("Listener " + listenerId + " for target "+ target+ " has an invalid expiration time "+ expirationTimeExpression+ " and will not be registred!",e);      return;    }  } else {    log.warn("Listener " + listenerId + " for target "+ target+ " has no expiration time and will not be registred!");    return;  }  log.debug("Register listener and  route " + target + " with expiration at "+ expirationTime);  hook.setExpirationTime(expirationTime);  boolean fullUrl=jsonHook.getBoolean(FULL_URL,false);  hook.setFullUrl(fullUrl);  if (hook.getDestination().startsWith("/")) {    if (log.isTraceEnabled()) {      log.trace("internal target, switching target!");    }    target=hook.getDestination();  } else {    String urlPattern=hookRootUri + LISTENER_HOOK_TARGET_PATH + target;    routeRepository.addRoute(urlPattern,createRoute(urlPattern,hook));    if (log.isTraceEnabled()) {      log.trace("external target, add route for urlPattern: " + urlPattern);    }  }  if (log.isTraceEnabled()) {    log.trace("Target (2nd): " + target);  }  listenerRepository.addListener(new Listener(listenerId,getMonitoredUrlSegment(requestUrl),target,hook));}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  public SafePath(final SafePath previous,final GeoPoint lastPoint,final int lastPointIndex,final Plane lastPlane){  this.lastPoint=lastPoint;  this.lastPointIndex=lastPointIndex;  this.lastPlane=lastPlane;  this.previous=previous;}  }
class C{  private void createSentences(String... lines){  this.jCas.setDocumentText(Joiner.on("\n").join(lines));  int offset=0;  for (  String line : lines) {    int length=line.length();    int start=0;    while (start < length && Character.isWhitespace(line.charAt(start))) {      ++start;    }    int end=length;    while (end > 0 && Character.isWhitespace(line.charAt(end - 1))) {      --end;    }    if (start != length && end != 0) {      Sentence sentence=new Sentence(this.jCas,offset + start,offset + end);      sentence.addToIndexes();    }    offset+=length + 1;  }}  }
class C{  public int makeSphere(final Vector pos,final Pattern block,final double radius,final boolean filled) throws MaxChangedBlocksException {  return this.makeSphere(pos,block,radius,radius,radius,filled);}  }
class C{  public CNAMERecord(Name name,int dclass,long ttl,Name alias){  super(name,Type.CNAME,dclass,ttl,alias,"alias");}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  private int readHexPair() throws IOException {  int first=readHexDigit();  if (first < 0) {    buf.position(buf.position() - 1);    return -1;  }  int second=readHexDigit();  if (second < 0) {    buf.position(buf.position() - 1);    return (first << 4);  } else {    return (first << 4) + second;  }}  }
class C{  static public QuestionWidget createWidgetFromPrompt(FormEntryPrompt fep,Context context,boolean readOnlyOverride){  String appearance=fep.getAppearanceHint();  if (appearance == null)   appearance="";  appearance=appearance.toLowerCase(Locale.ENGLISH);  QuestionWidget questionWidget;switch (fep.getControlType()) {case Constants.CONTROL_INPUT:switch (fep.getDataType()) {case Constants.DATATYPE_DATE_TIME:      questionWidget=new DateTimeWidget(context,fep);    break;case Constants.DATATYPE_DATE:  questionWidget=new DateWidget(context,fep);break;case Constants.DATATYPE_TIME:questionWidget=new TimeWidget(context,fep);break;case Constants.DATATYPE_DECIMAL:if (appearance.startsWith("ex:")) {questionWidget=new ExDecimalWidget(context,fep);} else if (appearance.equals("bearing")) {questionWidget=new BearingWidget(context,fep);} else {questionWidget=new DecimalWidget(context,fep,readOnlyOverride);}break;case Constants.DATATYPE_INTEGER:if (appearance.startsWith("ex:")) {questionWidget=new ExIntegerWidget(context,fep);} else {questionWidget=new IntegerWidget(context,fep,readOnlyOverride);}break;case Constants.DATATYPE_GEOPOINT:questionWidget=new GeoPointWidget(context,fep);break;case Constants.DATATYPE_BARCODE:questionWidget=new BarcodeWidget(context,fep);break;case Constants.DATATYPE_TEXT:String query=fep.getQuestion().getAdditionalAttribute(null,"query");if (query != null) {questionWidget=new ItemsetWidget(context,fep,readOnlyOverride);} else if (appearance.startsWith("printer")) {questionWidget=new ExPrinterWidget(context,fep);} else if (appearance.startsWith("ex:")) {questionWidget=new ExStringWidget(context,fep);} else if (appearance.equals("numbers")) {questionWidget=new StringNumberWidget(context,fep,readOnlyOverride);} else if (appearance.equals("url")) {questionWidget=new UrlWidget(context,fep);} else {questionWidget=new StringWidget(context,fep,readOnlyOverride);}break;default :questionWidget=new StringWidget(context,fep,readOnlyOverride);break;}break;case Constants.CONTROL_IMAGE_CHOOSE:if (appearance.equals("web")) {questionWidget=new ImageWebViewWidget(context,fep);} else if (appearance.equals("signature")) {questionWidget=new SignatureWidget(context,fep);} else if (appearance.equals("annotate")) {questionWidget=new AnnotateWidget(context,fep);} else if (appearance.equals("draw")) {questionWidget=new DrawWidget(context,fep);} else if (appearance.startsWith("align:")) {questionWidget=new AlignedImageWidget(context,fep);} else {questionWidget=new ImageWidget(context,fep);}break;case Constants.CONTROL_AUDIO_CAPTURE:questionWidget=new AudioWidget(context,fep);break;case Constants.CONTROL_VIDEO_CAPTURE:questionWidget=new VideoWidget(context,fep);break;case Constants.CONTROL_SELECT_ONE:if (appearance.startsWith("compact") || appearance.startsWith("quickcompact")) {int numColumns=-1;try {String firstWord=appearance.split("\\s+")[0];int idx=firstWord.indexOf("-");if (idx != -1) {numColumns=Integer.parseInt(firstWord.substring(idx + 1));}} catch (Exception e) {Log.e("WidgetFactory","Exception parsing numColumns");}if (appearance.startsWith("quick")) {questionWidget=new GridWidget(context,fep,numColumns,true);} else {questionWidget=new GridWidget(context,fep,numColumns,false);}} else if (appearance.startsWith("minimal")) {questionWidget=new SpinnerWidget(context,fep);} else if (appearance.startsWith("quick")) {questionWidget=new SelectOneAutoAdvanceWidget(context,fep);} else if (appearance.equals("list-nolabel")) {questionWidget=new ListWidget(context,fep,false);} else if (appearance.equals("list")) {questionWidget=new ListWidget(context,fep,true);} else if (appearance.equals("label")) {questionWidget=new LabelWidget(context,fep);} else {questionWidget=new SelectOneWidget(context,fep);}break;case Constants.CONTROL_SELECT_MULTI:if (appearance.startsWith("compact")) {int numColumns=-1;try {String firstWord=appearance.split("\\s+")[0];int idx=firstWord.indexOf("-");if (idx != -1) {numColumns=Integer.parseInt(firstWord.substring(idx + 1));}} catch (Exception e) {Log.e("WidgetFactory","Exception parsing numColumns");}questionWidget=new GridMultiWidget(context,fep,numColumns);} else if (appearance.startsWith("minimal")) {questionWidget=new SpinnerMultiWidget(context,fep);} else if (appearance.startsWith("list-nolabel")) {questionWidget=new ListMultiWidget(context,fep,false);} else if (appearance.startsWith("list")) {questionWidget=new ListMultiWidget(context,fep,true);} else if (appearance.startsWith("label")) {questionWidget=new LabelWidget(context,fep);} else {questionWidget=new SelectMultiWidget(context,fep);}break;case Constants.CONTROL_TRIGGER:questionWidget=new TriggerWidget(context,fep);break;default :questionWidget=new StringWidget(context,fep,readOnlyOverride);break;}return questionWidget;}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  Context context=this.getApplicationContext();  MessageProcessor messageProcessor=new MessageProcessor(context);  try {    messageProcessor.getMessages();  } catch (  AndroidAgentException e) {    Log.e(TAG,"Failed to perform operation",e);  }  if (Constants.SYSTEM_APP_ENABLED && Preference.getBoolean(context,context.getResources().getString(R.string.firmware_upgrade_failed))) {    Preference.putBoolean(context,context.getResources().getString(R.string.firmware_upgrade_failed),false);    CommonUtils.callSystemApp(context,Constants.Operation.UPGRADE_FIRMWARE,null,null);  }}  }
class C{  public static String replaceMisusedApostropheSymbol(String origText_){  return origText_.replaceAll("\"s(\\s+)","'s$1");}  }
class C{  private void previous(long qAddr,long prev){  mem.writeLong(qAddr + 11,prev);}  }
class C{  public void removeAccessibleSelection(int i){  TreeModel model=JTree.this.getModel();  if (model != null) {    if (i == 0) {      Object[] objPath={model.getRoot()};      if (objPath[0] == null)       return;      TreePath path=new TreePath(objPath);      JTree.this.removeSelectionPath(path);    }  }}  }
class C{  public Shape modelToView(int p0,Position.Bias b0,int p1,Position.Bias b1,Shape a) throws BadLocationException {  return m_view.modelToView(p0,b0,p1,b1,a);}  }
class C{  public void deleteUser(String username) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Deleting user '" + username + "'.");  URL deleteUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  userService.delete(deleteUrl);}  }
class C{  @Nullable public UnassignedInfo unassignedInfo(){  return unassignedInfo;}  }
class C{  public boolean columnUpdated(String columnName) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public void registerDataSetObserver(DataSetObserver observer){  listAdapterObservable.registerObserver(observer);}  }
class C{  public TObjectDoubleHashMap<Vertex> values(Set<? extends Vertex> vertices){  TObjectDoubleHashMap<Vertex> values=new TObjectDoubleHashMap<Vertex>();  for (  Vertex v : vertices)   values.put(v,v.getEdges().size());  return values;}  }
class C{  public DtoCustomerWishListServiceImpl(final DtoFactory dtoFactory,final GenericService<CustomerWishList> customerWishListGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,customerWishListGenericService,adaptersRepository);}  }
class C{  static int remainder(TBigInteger dividend,int divisor){  return remainderArrayByInt(dividend.digits,dividend.numberLength,divisor);}  }
class C{  public static void openURLIntent(Context context,String link){  try {    context.startActivity(getURLIntent(link));  } catch (  Exception e) {    logThis(TAG,"Unable to open website!",e);  }}  }
class C{  private String filenameFromLabel(String label){  return label.toLowerCase().replaceAll("[^a-zA-Z0-9_.\\[\\]-]","_");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private S2LatLng(double latRadians,double lngRadians){  this.latRadians=latRadians;  this.lngRadians=lngRadians;}  }
class C{  public static Object evaluateOutputEval(Draft2Job job,Object output,Object binding) throws Draft2ExpressionException {  Object outputEval=getOutputEval(binding);  if (Draft2ExpressionBeanHelper.isExpression(outputEval)) {    try {      return Draft2ExpressionBeanHelper.evaluate(job,output,outputEval);    } catch (    Draft2ExpressionException e) {      throw new Draft2ExpressionException("Failed to evaluate outputEval.",e);    }  }  return output;}  }
class C{  public int compareTo(java.lang.String anotherString){  return 0;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Client_ID() == 0)   setUserLevel(USERLEVEL_System); else   if (getUserLevel().equals(USERLEVEL_System)) {    log.saveWarning("AccessTableNoUpdate",Msg.getElement(getCtx(),"UserLevel"));    return false;  }  return true;}  }
class C{  public static boolean fits(int val,int bits){  val=val >> bits - 1;  return (val == 0 || val == -1);}  }
class C{  public Matrix4d rotateXYZ(double angleX,double angleY,double angleZ){  return rotateXYZ(angleX,angleY,angleZ,this);}  }
class C{  public void startScanAllInScope(){  Target target=new Target(true);  target.setRecurse(true);  this.startScan(target,null,null);}  }
class C{  public void paintColorChooserBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void requestRaces(){  if (!requestPending) {    requestPending=true;    new Thread(new SpeedrunsLiveRequest()).start();  }}  }
class C{  public void logInstructionsIn(String className,String methodName){  logger.debug("Printing instructions in " + className + "."+ methodName+ ":");  List<BytecodeInstruction> instructions=getInstructionsIn(className,methodName);  if (instructions == null) {    logger.debug("..unknown method");  } else {    for (    BytecodeInstruction instruction : instructions) {      logger.debug("\t" + instruction);    }  }}  }
class C{  public static PlatformUser createAdmin(DataService mgr,String userId) throws NonUniqueBusinessKeyException, ObjectNotFoundException {  Organization org=Organizations.createOrganization(mgr);  return createAdmin(mgr,userId,org);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case SESSION_IDS:    return isSetSessionIDs();case PACKET:  return isSetPacket();}throw new IllegalStateException();}  }
class C{  public PutIndexTemplateRequest mapping(String type,XContentBuilder source){  try {    mappings.put(type,source.string());  } catch (  IOException e) {    throw new IllegalArgumentException("Failed to build json for mapping request",e);  }  return this;}  }
class C{  public static void addRange(Collection<Integer> c,int start,int to,int step){  if (step <= 0)   throw new RuntimeException("Would create an infinite loop");  for (int i=start; i < to; i+=step)   c.add(i);}  }
class C{  public void projectionChanged(ProjectionEvent e){  setProjection(e);}  }
class C{  public void addChart(String filename){  this.chartNames.add(filename);}  }
class C{  @Override protected void configureList(){  list.setFont(comboBox.getFont());  list.setBorder(null);  list.setCellRenderer(comboBox.getRenderer());  list.setFocusable(false);  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  int selectedIndex=comboBox.getSelectedIndex();  if (selectedIndex == -1) {    list.clearSelection();  } else {    list.setSelectedIndex(selectedIndex);    list.ensureIndexIsVisible(selectedIndex);  }  installListListeners();}  }
class C{  boolean isLocal(Operand op,int i,TypeReference type){  if (op instanceof RegisterOperand) {    if (getPool(type)[i] == ((RegisterOperand)op).getRegister())     return true;  }  return false;}  }
class C{  public static IndexColorModel createIndexColorModel(RenderedImage img){  PaletteBuilder pb=new PaletteBuilder(img);  pb.buildPalette();  return pb.getIndexColorModel();}  }
class C{  public static Map<TopologyAPI.StreamId,StreamConsumers> populateStreamConsumers(TopologyAPI.Topology topology,Map<String,List<Integer>> componentToTaskIds){  Map<TopologyAPI.StreamId,TopologyAPI.StreamSchema> streamToSchema=new HashMap<>();  for (  TopologyAPI.Spout spout : topology.getSpoutsList()) {    for (    TopologyAPI.OutputStream outputStream : spout.getOutputsList()) {      streamToSchema.put(outputStream.getStream(),outputStream.getSchema());    }  }  for (  TopologyAPI.Bolt bolt : topology.getBoltsList()) {    for (    TopologyAPI.OutputStream outputStream : bolt.getOutputsList()) {      streamToSchema.put(outputStream.getStream(),outputStream.getSchema());    }  }  Map<TopologyAPI.StreamId,StreamConsumers> populatedStreamConsumers=new HashMap<>();  for (  TopologyAPI.Bolt bolt : topology.getBoltsList()) {    for (    TopologyAPI.InputStream inputStream : bolt.getInputsList()) {      TopologyAPI.StreamSchema schema=streamToSchema.get(inputStream.getStream());      String componentName=bolt.getComp().getName();      List<Integer> taskIds=componentToTaskIds.get(componentName);      if (!populatedStreamConsumers.containsKey(inputStream.getStream())) {        populatedStreamConsumers.put(inputStream.getStream(),new StreamConsumers());      }      populatedStreamConsumers.get(inputStream.getStream()).newConsumer(inputStream,schema,taskIds);    }  }  return populatedStreamConsumers;}  }
class C{  private static boolean shouldHeldItemRevealHiddenBlocks(EntityPlayer player){  for (  final EnumHand hand : EnumHand.values()) {    final IHiddenBlockRevealer hiddenBlockRevealer=CapabilityHiddenBlockRevealer.getHiddenBlockRevealer(player.getHeldItem(hand));    if (hiddenBlockRevealer != null && hiddenBlockRevealer.revealHiddenBlocks()) {      return true;    }  }  return false;}  }
class C{  public boolean toWeatherState(){  return to;}  }
class C{  private Object _evaluateLeftContainsRight(Object element,String lvalue,String rvalue){  if (element instanceof List) {    return evaluateLeftContainsRight((List)element,lvalue,rvalue);  } else {    return evaluateLeftContainsRight((StructuredContent)element,lvalue,rvalue);  }}  }
class C{  protected void addNode(DefaultMapNode node){  nodes.put(node.getId(),node);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  if (null != m_argVec) {    int nArgs=m_argVec.size();    for (int i=0; i < nArgs; i++) {      Expression arg=(Expression)m_argVec.elementAt(i);      arg.fixupVariables(vars,globalsSize);    }  }}  }
class C{  public boolean isPsuedoVarRef(){  java.lang.String ns=m_qname.getNamespaceURI();  if ((null != ns) && ns.equals(PSUEDOVARNAMESPACE)) {    if (m_qname.getLocalName().startsWith("#"))     return true;  }  return false;}  }
class C{  public DefaultShadowGenerator(int size,Color color,float opacity,int distance,double angle){  ParamChecks.nullNotPermitted(color,"color");  this.shadowSize=size;  this.shadowColor=color;  this.shadowOpacity=opacity;  this.distance=distance;  this.angle=angle;}  }
class C{  public ExceptionResponse(){  setDataLength(1);}  }
class C{  public static void reverse(final short[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  short tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case mr_A:    return stateVector[0] == State.mr_A;case mr_B:  return stateVector[0].ordinal() >= State.mr_B.ordinal() && stateVector[0].ordinal() <= State.mr_B_r2_W.ordinal();case mr_B_r1_X:return stateVector[0] == State.mr_B_r1_X;case mr_B_r1_Y:return stateVector[0] == State.mr_B_r1_Y;case mr_B_r1_Z:return stateVector[0] == State.mr_B_r1_Z;case mr_B_r1_V:return stateVector[0] == State.mr_B_r1_V;case mr_B_r1_W:return stateVector[0] == State.mr_B_r1_W;case mr_B_r1_S:return stateVector[0] == State.mr_B_r1_S;case mr_B_r1_T:return stateVector[0] == State.mr_B_r1_T;case mr_B_r1_U:return stateVector[0] == State.mr_B_r1_U;case mr_B_r2_S:return stateVector[1] == State.mr_B_r2_S;case mr_B_r2_T:return stateVector[1] == State.mr_B_r2_T;case mr_B_r2_U:return stateVector[1] == State.mr_B_r2_U;case mr_B_r2_V:return stateVector[1] == State.mr_B_r2_V;case mr_B_r2_W:return stateVector[1] == State.mr_B_r2_W;default :return false;}}  }
class C{  public void closeCursor(Cursor cursor){  cursor.close();  cursorMap.remove(Integer.valueOf(cursor.getCursorId()));}  }
class C{  private List reduceToGeometries(List geomTree){  List geoms=new ArrayList();  for (Iterator i=geomTree.iterator(); i.hasNext(); ) {    Object o=i.next();    Geometry geom=null;    if (o instanceof List) {      geom=unionTree((List)o);    } else     if (o instanceof Geometry) {      geom=(Geometry)o;    }    geoms.add(geom);  }  return geoms;}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  if (m_zeroR != null) {    return m_zeroR.distributionForInstance(instance);  } else {    return m_Tree.distributionForInstance(instance);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  WhiteboxRaster image;  int cols, rows;  double z;  float progress=0;  int col, row;  int a, i;  double classSize=-9999;  double startingClass=-9999;  double endingClass=-9999;  int numClasses=-9999;  double[] histo;  boolean blnCumulative=false;  int classVal=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      classSize=Double.parseDouble(args[i]);    } else     if (i == 2) {      if (!args[i].toLowerCase().equals("not specified")) {        startingClass=Double.parseDouble(args[i]);      }    } else     if (i == 3) {      if (!args[i].toLowerCase().equals("not specified")) {        endingClass=Double.parseDouble(args[i]);      }    } else     if (i == 4) {      if (args[i].toLowerCase().equals("true")) {        blnCumulative=true;      }    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (classSize <= 0) {    showFeedback("Class size must be larger than zero.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (startingClass == -9999) {      startingClass=image.getMinimumValue();    }    if (endingClass == -9999) {      endingClass=image.getMaximumValue();    }    double endingClassEndingVal=endingClass + classSize;    numClasses=(int)((endingClassEndingVal - startingClass) / classSize);    histo=new double[numClasses];    updateProgress("Calculating histogram:",0);    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          classVal=(int)(Math.floor((data[col] - startingClass) / classSize));          if (classVal < numClasses && classVal > 0) {            histo[classVal]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    image.close();    if (blnCumulative) {      for (a=1; a < numClasses; a++) {        histo[a]=histo[a] + histo[a - 1];      }      for (a=0; a < numClasses; a++) {        histo[a]=histo[a] / histo[numClasses - 1];      }    }    String retstr=null;    retstr="HISTOGRAM\n";    retstr=retstr + "Input image:\t" + image.getShortHeaderFile()+ "\n";    retstr=retstr + "Cumulative:\t" + Boolean.toString(blnCumulative)+ "\n\n";    retstr=retstr + "Bin\t" + "Freq.\t"+ "\n";    if (!blnCumulative) {      for (a=0; a < numClasses; a++) {        z=a * classSize + startingClass;        retstr=retstr + z + "\t"+ (int)(histo[a])+ "\n";      }    } else {      DecimalFormat df=new DecimalFormat("0.0000");      for (a=0; a < numClasses; a++) {        z=a * classSize + startingClass;        retstr=retstr + z + "\t"+ df.format(histo[a])+ "\n";      }    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  boolean selectNetwork(int netId){  if (netId == INVALID_NETWORK_ID)   return false;  if (mLastPriority == -1 || mLastPriority > 1000000) {    for (    WifiConfiguration config : mConfiguredNetworks.values()) {      if (config.networkId != INVALID_NETWORK_ID) {        config.priority=0;        addOrUpdateNetworkNative(config);      }    }    mLastPriority=0;  }  WifiConfiguration config=new WifiConfiguration();  config.networkId=netId;  config.priority=++mLastPriority;  addOrUpdateNetworkNative(config);  mWifiNative.saveConfig();  enableNetworkWithoutBroadcast(netId,true);  return true;}  }
class C{  public static boolean isContent(int c){  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public static void verifyScript(ExpressionScriptProvided script) throws ExprValidationException {  Object parserContext=MVELInvoker.newParserContext();  try {    MVELInvoker.analysisCompile(script.getExpression(),parserContext);  } catch (  InvocationTargetException ex) {    throw handleTargetException(script.getName(),ex);  }catch (  Exception ex) {    throw handleGeneralException(script.getName(),ex);  }  Map<String,Class> scriptRequiredInputs=MVELInvoker.getParserContextInputs(parserContext);  for (  Map.Entry<String,Class> input : scriptRequiredInputs.entrySet()) {    if (input.getKey().toLowerCase().trim().equals(ExprNodeScript.CONTEXT_BINDING_NAME)) {      continue;    }    if (script.getParameterNames().contains(input.getKey())) {      continue;    }    throw new ExprValidationException("For script '" + script.getName() + "' the variable '"+ input.getKey()+ "' has not been declared and is not a parameter");  }}  }
class C{  public Card last(){  int i=size() - 1;  return cards.get(i);}  }
class C{  public <U extends T>OngoingMatchingR0<T,U,R> when(MatchesExact<U> o){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(o.t));  return new OngoingMatchingR0<>(this,new DecomposableMatchBuilder0<>(matchers,new IdentityFieldExtractor<U>()).build());}  }
class C{  public static Intent makeDownloadCompleteIntent(Uri pathToImageFile){  return new Intent(MainActivity.ACTION_VIEW_LOCAL).putExtra("URI",pathToImageFile.toString());}  }
class C{  public static String stripOfFinalUnderScore(final String identifier){  final int finalUndescorePos=identifier.lastIndexOf('_');  if (finalUndescorePos < 1) {    throw new IllegalStateException("Appear to have a protein accession without _N appended to it!: " + identifier);  }  return identifier.substring(0,finalUndescorePos);}  }
class C{  public CreateCustomMetric(Monitoring monitoringService,String projectResource){  this.monitoringService=monitoringService;  this.projectResource=projectResource;  this.metricType=CUSTOM_METRIC_DOMAIN + "/" + DEFAULT_METRIC_TYPE;  this.metricName=projectResource + "/metricDescriptors/" + metricType;}  }
class C{  public void observeFocus(Object nil,Object node){  if (node instanceof VisualNode) {    VisualNode visualNode=(VisualNode)node;    vis.setFocus(visualNode);  }}  }
class C{  public void checkOnSolicitarAprobacion(EliminacionSerieVO eliminacion) throws EliminacionActionNotAllowedException {  if (eliminacion.getEstado() != ValoracionConstants.ESTADO_ELIMINACION_ABIERTA)   throw new EliminacionActionNotAllowedException(ArchivoErrorCodes.ERROR_SOLICITUD_APROBACION_NO_CREABLE_XESTADO);}  }
class C{  public WeakValueMap(int initialCapacity,float loadFactor){  hash=new HashMap<K,WeakEntry>(initialCapacity,loadFactor);}  }
class C{  public void clearTextLabels(){  clearXTextLabels();}  }
class C{  public static void copyToIOS(String from,String to){  Process p=null;  File fromFile=new File(from);  String[] dirs=null;  String curDir=null;  String finalDir=null;  try {    if (!fromFile.exists()) {      System.out.println("source " + from + " not found.");    }    if (to.trim().compareTo("") == 0) {      System.out.println("dest " + to + " is not valid.");    }    if (new File(from).isFile()) {      curDir=to.substring(0,to.lastIndexOf("/"));      String[] cmdMkdir={"ssh","-p","2222","root@localhost","mkdir","-p",curDir};      p=Runtime.getRuntime().exec(cmdMkdir);      p.waitFor();    }    String[] cmdCopy={"scp","-P","2222","-r",from,"root@localhost:" + to};    p=Runtime.getRuntime().exec(cmdCopy);    p.waitFor();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  String sourceFormForInitializer(AnnotationValue annotationValue,ProcessingEnvironment processingEnv,String memberName,Element context){  SourceFormVisitor visitor=new InitializerSourceFormVisitor(processingEnv,memberName,context);  StringBuilder sb=new StringBuilder();  visitor.visit(annotationValue,sb);  return sb.toString();}  }
class C{  public final void testSetSeedbyteArray03() throws NoSuchFieldException, SecurityException, IllegalAccessException {  byte[] seed=new byte[LENGTH];  byte[] bytes1;  byte[] bytes2;  for (int i=0; i < seed.length; i++) {    seed[i]=(byte)i;  }  for (int i=0; i < LENGTH; i++) {    bytes1=new byte[i];    bytes2=new byte[i];    sr.setSeed(seed);    sr.setSeed(new byte[0]);    sr.nextBytes(bytes1);    sr2.setSeed(seed);    sr2.nextBytes(bytes2);    for (int j=0; j < bytes1.length; j++) {      assertEquals("bytes1[j] != bytes2[j] :: j=" + j,bytes1[j],bytes2[j]);    }  }  for (int i=1; i < LENGTH; i++) {    bytes1=new byte[i];    bytes2=new byte[i];    sr.setSeed(seed);    sr.nextBytes(bytes1);    sr.setSeed(new byte[0]);    sr.nextBytes(bytes2);    boolean b=true;    for (int j=0; j < bytes1.length; j++) {      b&=bytes1[j] == bytes2[j];    }    assertFalse("sequences are equal i=" + i,b);  }}  }
class C{  public static void validate(String xml) throws Exception {  validate(new StreamSource(new StringReader(xml)));}  }
class C{  private void add(long n){  value.addAndGet(n);  dirty.afterModification();}  }
class C{  @Override public V put(K key,V value){  return putImpl(key,value);}  }
class C{  public void addNativeTypeMapping(int jdbcTypeCode,String nativeType){  this.nativeTypes.put(new Integer(jdbcTypeCode),nativeType);}  }
class C{  private static int capAtMaximumSize(int queueSize,int maximumSize){  return Math.min(queueSize - 1,maximumSize) + 1;}  }
class C{  public static List<INaviEdge> loadEdges(final AbstractSQLProvider provider,final INaviView view,final Collection<INaviViewNode> nodes) throws CouldntLoadDataException {  final Map<Integer,INaviViewNode> nodeLookup=new HashMap<Integer,INaviViewNode>();  final List<Integer> nodeIdList=new ArrayList<Integer>();  for (  final INaviViewNode viewNode : nodes) {    nodeLookup.put(viewNode.getId(),viewNode);    nodeIdList.add(viewNode.getId());  }  final Map<Integer,ArrayList<IComment>> edgeToGlobalCommentMap=loadGlobalEdgeComments(provider,view.getConfiguration().getId());  return loadEdges(provider,view,nodeLookup,edgeToGlobalCommentMap);}  }
class C{  private void readXmlDeclaration() throws IOException, XmlPullParserException {  if (bufferStartLine != 0 || bufferStartColumn != 0 || position != 0) {    checkRelaxed("processing instructions must not start with xml");  }  read(START_PROCESSING_INSTRUCTION);  parseStartTag(true,true);  if (attributeCount < 1 || !"version".equals(attributes[2])) {    checkRelaxed("version expected");  }  version=attributes[3];  int pos=1;  if (pos < attributeCount && "encoding".equals(attributes[2 + 4])) {    encoding=attributes[3 + 4];    pos++;  }  if (pos < attributeCount && "standalone".equals(attributes[4 * pos + 2])) {    String st=attributes[3 + 4 * pos];    if ("yes".equals(st)) {      standalone=Boolean.TRUE;    } else     if ("no".equals(st)) {      standalone=Boolean.FALSE;    } else {      checkRelaxed("illegal standalone value: " + st);    }    pos++;  }  if (pos != attributeCount) {    checkRelaxed("unexpected attributes in XML declaration");  }  isWhitespace=true;  text=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static <A>StreamableTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  public static PrintRequestAttributeSet unmodifiableView(PrintRequestAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new UnmodifiablePrintRequestAttributeSet(attributeSet);}  }
class C{  private boolean isDecimalPoint(char c){}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character '%c' in array position %d",source[i],i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Deprecated public void createTag(Tag tag,OnClientCallback<Tag> callback){  AsyncReflector.execute(mClient,callback,"createTag",mAuthenticationToken,tag);}  }
class C{  @Override public synchronized boolean containsAll(Collection<?> collection){  return super.containsAll(collection);}  }
class C{  public PiecewiseLinearPopulation(double[] intervals,double[] thetas,Type units){  super(intervals,thetas,units);}  }
class C{  @NotNull public PyFunctionBuilder parameterWithType(@NotNull final String name,@NotNull final String type,@NotNull final StructuredDocStringBase docStyle){  parameter(name);  docString(docStyle.createParameterType(name,type));  return this;}  }
class C{  public static void onErrorDropped(Throwable e,Throwable root){  if (root != null) {    e.addSuppressed(root);  }  onErrorDropped(e);}  }
class C{  private void printAlbumLocation(String uname) throws IOException, ServiceException {  String albumsUrl=API_PREFIX + uname;  String fields="entry(title,gphoto:id,gphoto:location)";  Query albumQuery=new Query(new URL(albumsUrl));  albumQuery.setFields(fields);  AlbumFeed feed=service.query(albumQuery,AlbumFeed.class);  for (  GphotoEntry entry : feed.getEntries()) {    if (entry instanceof AlbumEntry) {      AlbumEntry albumEntry=(AlbumEntry)entry;      OUT.println(albumEntry.getGphotoId() + ":" + albumEntry.getTitle().getPlainText()+ " ("+ albumEntry.getLocation()+ ")");    }  }}  }
class C{  public static boolean ask(int WindowNo,Container c,String AD_Message,String msg){  log.info(AD_Message + " - " + msg);  Properties ctx=Env.getCtx();  StringBuffer out=new StringBuffer();  if (AD_Message != null && !AD_Message.equals(""))   out.append(Msg.getMsg(ctx,AD_Message));  if (msg != null && msg.length() > 0)   out.append("\n").append(msg);  Window parent=Env.getParent(c);  if (parent == null)   parent=Env.getWindow(WindowNo);  boolean retValue=false;  if (showDialog && parent != null) {    if (parent instanceof JFrame) {      ADialogDialog d=new ADialogDialog((JFrame)parent,Env.getHeader(ctx,WindowNo),out.toString(),JOptionPane.QUESTION_MESSAGE);      retValue=d.getReturnCode() == ADialogDialog.A_OK;    } else {      ADialogDialog d=new ADialogDialog((JDialog)parent,Env.getHeader(ctx,WindowNo),out.toString(),JOptionPane.QUESTION_MESSAGE);      retValue=d.getReturnCode() == ADialogDialog.A_OK;    }  } else {    Object[] optionsOC={Util.cleanAmp(Msg.getMsg(ctx,"OK")),Util.cleanAmp(Msg.getMsg(ctx,"Cancel"))};    int i=JOptionPane.showOptionDialog(parent,out.toString() + "\n",Env.getHeader(ctx,WindowNo),JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,optionsOC,optionsOC[0]);    retValue=i == JOptionPane.YES_OPTION;  }  return retValue;}  }
class C{  private void addAlignmentFormatting(final boolean estimateParagraphs,final int middlePage,final float[] f_x1,final float[] f_x2,final int quarter,final int child){  final float left_gap=middlePage - f_x1[child];  final float right_gap=f_x2[child] - middlePage;  if ((!estimateParagraphs) && (isXMLExtraction) && (left_gap > 0)&& (right_gap > 0)&& (f_x1[child] > quarter)&& (f_x1[child] < (middlePage + quarter))) {    float ratio=left_gap / right_gap;    if (ratio > 1) {      ratio=1 / ratio;    }    if (ratio > 0.95) {      content[child]=new StringBuilder(Fonts.cleanupTokens(content[child].toString()));      content[child].insert(0,"<center>");      content[child].append("</center>\n");    } else     if ((right_gap < 10) & (left_gap > 30)) {      content[child]=new StringBuilder(Fonts.cleanupTokens(content[child].toString()));      content[child].insert(0,"<right>");      content[child].append("</right>\n");    }  }}  }
class C{  public void closeConnection(){  restClient.post("/ApiConnection/Logout","{}");  restClient=null;}  }
class C{  public static void closeSilently(Closeable out){  if (out != null) {    try {      trace("closeSilently",null,out);      out.close();    } catch (    Exception e) {    }  }}  }
class C{  public static void main(String[] args) throws Exception {  Project.initialize();  GenericObjectEditor.registerAllEditors();  EvaluationStatisticsExporterFileChooser fchooser=new EvaluationStatisticsExporterFileChooser();  int retVal=fchooser.showSaveDialog(null);  System.out.println("OK? " + (retVal == EvaluationStatisticsExporterFileChooser.APPROVE_OPTION));  System.out.println("file: " + fchooser.getSelectedFile());  System.out.println("writer: " + OptionUtils.toCommandLine(fchooser.getWriter()));}  }
class C{  public void flush() throws IOException {  if (generator == null) {    return;  }  generator.flush();}  }
class C{  public static void post(int what,Object obj){  Message msg=new Message();  msg.what=what;  msg.obj=obj;  post(msg);}  }
class C{  public MalformedURIException(String message,String nuri){  super(message);  uri=nuri;}  }
class C{  private static String isExpectedCommandOutput(ArrayList<String> command,Map<String,Object> expectedOutput,boolean toLowerCase){  boolean found=false;  String expectedLine=null;  try {    Process proc=Runtime.getRuntime().exec(command.toArray(new String[1]));    BufferedReader in=new BufferedReader(new InputStreamReader(proc.getInputStream()));    String line=null;    while ((line=in.readLine()) != null && !found) {      for (      String key : expectedOutput.keySet()) {        if (key.indexOf("*") != -1) {          if (line.isEmpty()) {            found=false;            break;          } else {            found=true;          }        } else {          if (toLowerCase)           line=line.toLowerCase();          if (line.indexOf(key) != -1) {            found=true;          }        }        if (found) {          expectedLine=line;          break;        }      }    }    line=null;    BufferedReader err=new BufferedReader(new InputStreamReader(proc.getErrorStream()));    while ((line=err.readLine()) != null) {    }    int result=proc.waitFor();    if (result != 0) {    }  } catch (  Exception e) {    e.printStackTrace();  }  return expectedLine;}  }
class C{  static AttackStrategy create(String params){  String[] arg=params.split(",",-1);  if (arg.length != 3) {    throw new IllegalArgumentException("Invalid compound description: '" + params + "'");  }  Pair<String,String> desc=parseStrategy(arg[1]);  TargetSelectionStrategy targeter=TargetSelectionStrategyFactory.get(desc.first(),desc.second());  desc=parseStrategy(arg[2]);  PositioningStrategy positioner=PositioningStrategyFactory.get(desc.first(),desc.second());  return new CompoundAttackStrategy(getSubStrategy(arg[0]),targeter,positioner);}  }
class C{  public static CassandraPaths create(final String version){  return new CassandraPaths(version);}  }
class C{  public static void logError(String logEntry){}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.Rooms);  RoomListForm roomListForm=(RoomListForm)form;  roomListForm.save(request.getSession());  ActionMessages errors=new ActionMessages();  String dept=(String)request.getAttribute("deptCode");  if (dept != null) {    roomListForm.setDeptCodeX(dept);  }  if (sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom) != null && roomListForm.getDeptCodeX() == null)   roomListForm.setDeptCodeX((String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom));  if (roomListForm.getDeptCodeX() != null && !roomListForm.getDeptCodeX().isEmpty()) {    sessionContext.setAttribute(SessionAttribute.DepartmentCodeRoom,roomListForm.getDeptCodeX());  }  LookupTables.setupDepartments(request,sessionContext,true);  LookupTables.setupExamTypes(request,sessionContext.getUser(),DepartmentStatusType.Status.ExamView,DepartmentStatusType.Status.ExamTimetable);  errors=roomListForm.validate(mapping,request);  if (errors.size() > 0) {    saveErrors(request,errors);    return mapping.findForward("showRoomSearch");  }  lookupRooms(roomListForm,request.getParameter("op"));  if (roomListForm.getRooms() == null || roomListForm.getRooms().isEmpty()) {    errors.add("searchResult",new ActionMessage("errors.generic","No room matching the above criteria was found."));    request.setAttribute("colspan","7");    saveErrors(request,errors);    return mapping.findForward("showRoomSearch");  }  ExamType examType=null;  if (roomListForm.getDeptCodeX() != null && roomListForm.getDeptCodeX().matches("Exam[0-9]*"))   examType=ExamTypeDAO.getInstance().get(Long.valueOf(roomListForm.getDeptCodeX().substring(4)));  if ("Export PDF".equals(request.getParameter("op"))) {    OutputStream out=ExportUtils.getPdfOutputStream(response,"rooms");    buildPdfWebTable(out,roomListForm,CommonValues.Yes.eq(UserProperty.RoomFeaturesInOneColumn.get(sessionContext.getUser())),examType);    out.flush();    out.close();    return null;  }  if ("Export CSV".equals(request.getParameter("op"))) {    PrintWriter pw=ExportUtils.getCsvWriter(response,"rooms");    buildCsvWebTable(pw,roomListForm,CommonValues.Yes.eq(UserProperty.RoomFeaturesInOneColumn.get(sessionContext.getUser())),examType);    pw.flush();    pw.close();    return null;  }  buildWebTable(request,roomListForm,CommonValues.Yes.eq(UserProperty.RoomFeaturesInOneColumn.get(sessionContext.getUser())),examType);  return mapping.findForward("showRoomList");}  }
class C{  public void ReInit(JavaCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  @Override public boolean isRemovableListener(){  return false;}  }
class C{  protected void onHideAnimationStart(){  setResultsBarVisibility(false);}  }
class C{  public String tojstring(){  return value().tojstring();}  }
class C{  protected void startBridgeServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=getCache();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.setNotifyBySubscription(notifyBySubscription);  bridge.start();  bridgeServerPort=bridge.getPort();}  }
class C{  public boolean hasPropertyCaption(MetaProperty property){  Class<?> declaringClass=property.getDeclaringClass();  if (declaringClass == null)   return false;  String caption=getPropertyCaption(property);  int i=caption.indexOf('.');  if (i > 0 && declaringClass.getSimpleName().equals(caption.substring(0,i)))   return false; else   return true;}  }
class C{  @NonNull public static ApiService createApiService(){  OkLogInterceptor okLogInterceptor=OkLogInterceptor.builder().build();  OkHttpClient okHttpClient=createOkHttpClient(okLogInterceptor);  return new RestAdapter.Builder().setClient(new OkClient(okHttpClient)).setEndpoint(Endpoints.newFixedEndpoint(Constants.ENDPOINT)).setLogLevel(LogLevel.FULL).build().create(ApiService.class);}  }
class C{  public void dropActionChanged(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dropActionChanged(dsde);  }  getDragSource().processDropActionChanged(dsde);  updateCurrentCursor(getSourceActions(),dsde.getTargetActions(),CHANGED);}  }
class C{  public JaasConfiguration(AppConfigurationEntry entry){  this.entry=new AppConfigurationEntry[]{entry};}  }
class C{  public static final String createXPATHWarning(String msgKey,Object args[]){  return createXPATHMsg(XPATHBundle,msgKey,args);}  }
class C{  @Override protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {  return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");}  }
class C{  public _BuildControllerUpdate(final String[] flagStrings){  super(flagStrings);}  }
