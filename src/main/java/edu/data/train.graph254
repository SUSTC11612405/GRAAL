class C{  static long advancePastNextSyncMarker(PushbackInputStream stream,byte[] syncMarker) throws IOException {  Seeker seeker=new Seeker(syncMarker);  byte[] syncBuffer=new byte[syncMarker.length];  long totalBytesConsumed=0;  int mark=-1;  int read;  do {    read=stream.read(syncBuffer);    if (read >= 0) {      mark=seeker.find(syncBuffer,read);      totalBytesConsumed+=read;    }  } while (mark < 0 && read > 0);  if (mark >= 0) {    stream.unread(syncBuffer,mark + 1,read - (mark + 1));    totalBytesConsumed=totalBytesConsumed - (read - (mark + 1));  }  return totalBytesConsumed;}  }
class C{  public void paintComponent(java.awt.Graphics g){  if (isDithering) {    Dimension size=getSize();    DITHERER.draw(g,size.height,size.width);  } else {    if (nonDitherBackgroundColor != null) {      Dimension size=getSize();      g.setColor(nonDitherBackgroundColor);      g.fillRect(0,0,size.width,size.height);    } else {      super.paintComponent(g);    }  }}  }
class C{  public byte readByte(){  return scanner.nextByte();}  }
class C{  public HttpException(final String message,final Throwable cause){  super(message);  ExceptionUtils.initCause(this,cause);}  }
class C{  public GetResult extractGetResult(final UpdateRequest request,String concreteIndex,long version,final Map<String,Object> source,XContentType sourceContentType,@Nullable final BytesReference sourceAsBytes){  if (request.fields() == null || request.fields().length == 0) {    return null;  }  boolean sourceRequested=false;  Map<String,GetField> fields=null;  if (request.fields() != null && request.fields().length > 0) {    SourceLookup sourceLookup=new SourceLookup();    sourceLookup.setSource(source);    for (    String field : request.fields()) {      if (field.equals("_source")) {        sourceRequested=true;        continue;      }      Object value=sourceLookup.extractValue(field);      if (value != null) {        if (fields == null) {          fields=newHashMapWithExpectedSize(2);        }        GetField getField=fields.get(field);        if (getField == null) {          getField=new GetField(field,new ArrayList<>(2));          fields.put(field,getField);        }        getField.getValues().add(value);      }    }  }  return new GetResult(concreteIndex,request.type(),request.id(),version,true,sourceRequested ? sourceAsBytes : null,fields);}  }
class C{  protected static void storeEventListenerNS(BridgeContext ctx,EventTarget e,String n,String t,EventListener l,boolean c){  ctx.storeEventListenerNS(e,n,t,l,c);}  }
class C{  public static final int binarySearch(Object[] a,Object key,int length){  int x1=0;  int x2=length;  int i=x2 / 2, c;  while (x1 < x2) {    c=((Comparable)a[i]).compareTo(key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public int indexOfSubSeq(CharSeq seq){  Objects.requireNonNull(seq);  if (seq.isEmpty()) {    return 0;  }  if (length() < seq.length()) {    return -1;  }  Map<Character,Integer> lastIndex=new HashMap<>();  seq.forEachChar(null);  int startI=0, size=length(), len=seq.length();  while (size - startI >= len) {    for (int i=0; ; i++) {      if (!charAt(startI + i).equals(seq.charAt(i))) {        if (startI + len >= size) {          return -1;        }        Character next=charAt(startI + len);        Integer last=lastIndex.get(next);        if (last == null) {          startI+=len + 1;        } else {          startI+=len - last;        }        break;      } else       if (i == len - 1) {        return startI;      }    }  }  return -1;}  }
class C{  private void initializeJavaContextClassLoader(){  IPackageManager pm=ActivityThread.getPackageManager();  android.content.pm.PackageInfo pi;  try {    pi=pm.getPackageInfo(mPackageName,0,UserHandle.myUserId());  } catch (  RemoteException e) {    throw new IllegalStateException("Unable to get package info for " + mPackageName + "; is system dying?",e);  }  if (pi == null) {    throw new IllegalStateException("Unable to get package info for " + mPackageName + "; is package not installed?");  }  boolean sharedUserIdSet=(pi.sharedUserId != null);  boolean processNameNotDefault=(pi.applicationInfo != null && !mPackageName.equals(pi.applicationInfo.processName));  boolean sharable=(sharedUserIdSet || processNameNotDefault);  ClassLoader contextClassLoader=(sharable) ? new WarningContextClassLoader() : mClassLoader;  Thread.currentThread().setContextClassLoader(contextClassLoader);}  }
class C{  @DSComment("potential callback called inside method") @DSSpec(DSCat.TO_MODEL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.564 -0500",hash_original_method="E1D85670162EF30644779B34B74FE79F",hash_generated_method="64961E9417B447273F7D503CADBD57C5") public void registerObserver(T observer){  if (observer == null) {    throw new IllegalArgumentException("The observer is null.");  }synchronized (mObservers) {    if (mObservers.contains(observer)) {      throw new IllegalStateException("Observer " + observer + " is already registered.");    }    mObservers.add(observer);  }}  }
class C{  public static Function<String,String> trim(){  return null;}  }
class C{  public boolean consistentWith(Assignment a){  Map<String,Value> firstMap=(a.size() < map.size()) ? a.map : map;  Map<String,Value> secondMap=(a.size() < map.size()) ? map : a.map;  for (  String evidenceVar : firstMap.keySet()) {    Value v2=secondMap.get(evidenceVar);    if (v2 == null) {      continue;    }    Value v1=firstMap.get(evidenceVar);    if (!v1.equals(v2)) {      return false;    }  }  return true;}  }
class C{  protected IJavaElement createHandle(AbstractVariableDeclaration variableDeclaration,IJavaElement parent){  boolean isParameter=true;switch (variableDeclaration.getKind()) {case AbstractVariableDeclaration.LOCAL_VARIABLE:    isParameter=false;case AbstractVariableDeclaration.PARAMETER:  if (variableDeclaration.type.resolvedType != null) {    return new LocalVariable((JavaElement)parent,new String(variableDeclaration.name),variableDeclaration.declarationSourceStart,variableDeclaration.declarationSourceEnd,variableDeclaration.sourceStart,variableDeclaration.sourceEnd,new String(variableDeclaration.type.resolvedType.signature()),variableDeclaration.annotations,variableDeclaration.modifiers,isParameter,variableDeclaration.type.getAnnotationsOnDimensions());  }break;case AbstractVariableDeclaration.TYPE_PARAMETER:return new org.eclipse.jdt.internal.core.TypeParameter((JavaElement)parent,new String(variableDeclaration.name));}return null;}  }
class C{  private static DatagramSocket allocPort(int hostPort){  log.debug("allocPort() entrance");  boolean success=false;  DatagramSocket socket=null;  if (-1 < hostPort && hostPort < 65536) {    try {      socket=new DatagramSocket(hostPort);      success=true;      log.debug(Thread.currentThread().toString() + "##allocPort(hostPort=[" + hostPort+ "]) suc");      return socket;    } catch (    SocketException e) {      log.error(Thread.currentThread().toString() + "##allocPort(hostPort=[" + hostPort+ "]) is used");    }  }  do {    try {      hostPort=1024 + new Random().nextInt(65536 - 1024);      socket=new DatagramSocket(hostPort);      success=true;    } catch (    SocketException e) {      e.printStackTrace();    }  } while (!success);  return socket;}  }
class C{  @Override public Sprite createRegion(final int x,final int y,final int width,final int height,final Object ref){  return new EmptySprite(width,height,ref);}  }
class C{  public T caseCheckRef(CheckRef object){  return null;}  }
class C{  private void recreateTable(int currentVersion){  try {    connetion.initTransaction();    if (currentVersion == 0) {      currentVersion=createNewTables();    }    if (currentVersion == 1) {      currentVersion=updateToVersion2();    }    if (currentVersion == 2) {      currentVersion=updateToVersion3();    }    if (currentVersion == 3) {      currentVersion=updateToVersion4();    }    if (currentVersion == 4) {      currentVersion=updateToVersion5();    }    if (currentVersion == 5) {      currentVersion=updateToVersion6();    }    if (currentVersion == 6) {      currentVersion=updateToVersion7();    }    if (currentVersion == 7) {      currentVersion=updateToVersion8();    }    connetion.commitTransaction();  } catch (  SQLException e) {    BotLogger.error(LOGTAG,e);  }}  }
class C{  public void continueDecoding(){  decoderState=DECODER_CONTINUE;}  }
class C{  public void renderEndingBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  if (this.widgetCommentsEnabled) {    StringWriter sr=new StringWriter();    sr.append("<@formatBoundaryComment ");    sr.append(" boundaryType=\"");    sr.append("End");    sr.append("\" widgetType=\"");    sr.append(widgetType);    sr.append("\" widgetName=\"");    sr.append(modelWidget.getBoundaryCommentName());    sr.append("\" />");    executeMacro(writer,sr.toString());  }}  }
class C{  @Override @GraphTransaction public List<Map<String,String>> searchByGremlin(String gremlinQuery) throws DiscoveryException {  LOG.debug("Executing gremlin query={}",gremlinQuery);  try {    Object o=graph.executeGremlinScript(gremlinQuery,false);    return extractResult(o);  } catch (  ScriptException se) {    throw new DiscoveryException(se);  }}  }
class C{  public Element store(Object o){  PositionableRoundRect p=(PositionableRoundRect)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("positionableRoundRect");  storeCommonAttributes(p,element);  Element elem=new Element("size");  elem.setAttribute("width","" + p.getWidth());  elem.setAttribute("height","" + p.getHeight());  elem.setAttribute("cornerRadius","" + p.getCornerRadius());  element.addContent(elem);  element.setAttribute("class","jmri.jmrit.display.controlPanelEditor.shape.configurexml.PositionableRoundRectXml");  return element;}  }
class C{  private void logAccess(int AD_Client_ID,int AD_User_ID,int R_InterestArea_ID,String info,String error){  if (error != null) {    log.log(Level.CONFIG,info);    m_error++;  } else {    log.log(Level.INFO,info);    m_ok++;  }  MLdapAccess access=new MLdapAccess(getCtx(),0,null);  access.setAD_Client_ID(AD_Client_ID);  access.setAD_User_ID(AD_User_ID);  access.setR_InterestArea_ID(R_InterestArea_ID);  access.setIsError(error != null);  access.setSummary(info);  access.save();}  }
class C{  public void deleteCookie(Cookie cookie){  String name=cookie.getName() + cookie.getDomain();  cookies.remove(name);  SharedPreferences.Editor prefsWriter=cookiePrefs.edit();  prefsWriter.remove(COOKIE_NAME_PREFIX + name);  prefsWriter.commit();}  }
class C{  void subtract(int start,int end){  final Map.Entry<Integer,Integer> floor=mIntervals.floorEntry(start);  final Map.Entry<Integer,Integer> endFloor=mIntervals.lowerEntry(end);  if (endFloor == null) {    return;  }  if (floor != null && floor.getKey() < end && floor.getValue() > start) {    if (floor.getValue() > end) {      mIntervals.put(end,floor.getValue());    }    mIntervals.put(floor.getKey(),start);  } else   if (endFloor.getKey() < end && endFloor.getValue() > end) {    mIntervals.put(end,endFloor.getValue());  }  removeContainedBy(start,end);}  }
class C{  public Zoomer(int viewportWidth,int viewportHeight){  setup(viewportWidth,viewportHeight,null);}  }
class C{  public void writeFloat(float f) throws IOException {  this.writeInt(Float.floatToIntBits(f));}  }
class C{  protected void formatFilePosition(FilePosition pos,Appendable out) throws IOException {  pos.source().format(mc,out);  out.append(":");  out.append(String.valueOf(pos.startLineNo()));}  }
class C{  public static <T>T withPrintWriter(File file,@ClosureParams(value=SimpleType.class,options="java.io.PrintWriter") Closure<T> closure) throws IOException {  return IOGroovyMethods.withWriter(newPrintWriter(file),closure);}  }
class C{  public static boolean isMonkeyRunning(){  return ActivityManager.isUserAMonkey();}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3){  return construct(e1,e2,e3);}  }
class C{  public static MMatchPO create(MInvoiceLine iLine,MInOutLine sLine,Timestamp dateTrx,BigDecimal qty){  String trxName=null;  Properties ctx=null;  int C_OrderLine_ID=0;  if (iLine != null) {    trxName=iLine.get_TrxName();    ctx=iLine.getCtx();    C_OrderLine_ID=iLine.getC_OrderLine_ID();  }  if (sLine != null) {    trxName=sLine.get_TrxName();    ctx=sLine.getCtx();    C_OrderLine_ID=sLine.getC_OrderLine_ID();  }  MMatchPO retValue=null;  String sql="SELECT * FROM M_MatchPO WHERE C_OrderLine_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    pstmt.setInt(1,C_OrderLine_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      MMatchPO mpo=new MMatchPO(ctx,rs,trxName);      if (qty.compareTo(mpo.getQty()) == 0) {        if (iLine != null) {          if (mpo.getC_InvoiceLine_ID() == 0 || mpo.getC_InvoiceLine_ID() == iLine.getC_InvoiceLine_ID()) {            mpo.setC_InvoiceLine_ID(iLine);            if (iLine.getM_AttributeSetInstance_ID() != 0) {              if (mpo.getM_AttributeSetInstance_ID() == 0)               mpo.setM_AttributeSetInstance_ID(iLine.getM_AttributeSetInstance_ID()); else               if (mpo.getM_AttributeSetInstance_ID() != iLine.getM_AttributeSetInstance_ID())               continue;            }          } else           continue;        }        if (sLine != null) {          if (mpo.getM_InOutLine_ID() == 0 || mpo.getM_InOutLine_ID() == sLine.getM_InOutLine_ID()) {            mpo.setM_InOutLine_ID(sLine.getM_InOutLine_ID());            if (sLine.getM_AttributeSetInstance_ID() != 0) {              if (mpo.getM_AttributeSetInstance_ID() == 0)               mpo.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID()); else               if (mpo.getM_AttributeSetInstance_ID() != sLine.getM_AttributeSetInstance_ID())               continue;            }          } else           continue;        }        retValue=mpo;        break;      }    }  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (retValue == null) {    if (sLine != null) {      retValue=new MMatchPO(sLine,dateTrx,qty);      if (iLine != null)       retValue.setC_InvoiceLine_ID(iLine);    } else     if (iLine != null) {      retValue=new MMatchPO(iLine,dateTrx,qty);    }  }  return retValue;}  }
class C{  public static String randomAscii(int count){  return random(count,32,127,false,false);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void clear(){  items.clear();  Iterator siter=springs.iterator();  Spring.SpringFactory f=Spring.getFactory();  while (siter.hasNext())   f.reclaim((Spring)siter.next());  springs.clear();}  }
class C{  public TvShowEpisodeScrapeTask(List<TvShowEpisode> episodes,MediaScraper mediaScraper){  super(BUNDLE.getString("tvshow.scraping"),episodes.size(),TaskType.BACKGROUND_TASK);  this.episodes=episodes;  this.mediaScraper=mediaScraper;  this.scrapeThumb=true;}  }
class C{  public Object[] toArray(){  return events.toArray();}  }
class C{  public JPEGImageWriteParam(Locale locale){  super(locale);  this.canWriteProgressive=true;  this.progressiveMode=MODE_DISABLED;  this.canWriteCompressed=true;  this.compressionTypes=compressionNames;  this.compressionType=compressionTypes[0];  this.compressionQuality=JPEG.DEFAULT_QUALITY;}  }
class C{  public boolean isPrior(){  return prior;}  }
class C{  static String methodDescriptorOf(MethodDoc method){  String desc="(";  Parameter[] parameters=method.parameters();  for (int i=0; i < parameters.length; i++) {    desc+=typeDescriptorOf(parameters[i].type());  }  desc+=")" + typeDescriptorOf(method.returnType());  return desc;}  }
class C{  public MarkdownProcessor(){  listLevel=0;}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.validation.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new BatikTestDocumentBuilderFactory(new DocumentBuilderSetting[0]);  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  protected boolean intersectsFrustum(DrawContext dc,OrderedCube orderedCube){  if (dc.isPickingMode())   return dc.getPickFrustums().intersectsAny(orderedCube.extent);  return dc.getView().getFrustumInModelCoordinates().intersects(orderedCube.extent);}  }
class C{  public void testBug22297() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createTable("tblTestBug2297_1","(id varchar(20) NOT NULL default '',Income double(19,2) default NULL)");  createTable("tblTestBug2297_2","(id varchar(20) NOT NULL default '',CreatedOn datetime default NULL)");  createProcedure("testBug22297","(pcaseid INT) BEGIN\nSET @sql = \"DROP TEMPORARY TABLE IF EXISTS tmpOrders\";" + " PREPARE stmt FROM @sql; EXECUTE stmt; DEALLOCATE PREPARE stmt;" + "\nSET @sql = \"CREATE TEMPORARY TABLE tmpOrders SELECT id, 100 AS Income FROM tblTestBug2297_1 GROUP BY id\"; PREPARE stmt FROM @sql;"+ " EXECUTE stmt; DEALLOCATE PREPARE stmt;\n SELECT id, Income FROM (SELECT e.id AS id ,COALESCE(prof.Income,0) AS Income"+ "\n FROM tblTestBug2297_2 e LEFT JOIN tmpOrders prof ON e.id = prof.id\n WHERE e.CreatedOn > '2006-08-01') AS Final ORDER BY id;\nEND");  this.stmt.executeUpdate("INSERT INTO tblTestBug2297_1 (`id`,`Income`) VALUES ('a',4094.00),('b',500.00),('c',3462.17), ('d',500.00), ('e',600.00)");  this.stmt.executeUpdate("INSERT INTO tblTestBug2297_2 (`id`,`CreatedOn`) VALUES ('d','2006-08-31 00:00:00'),('e','2006-08-31 00:00:00')," + "('b','2006-08-31 00:00:00'),('c','2006-08-31 00:00:00'),('a','2006-08-31 00:00:00')");  this.pstmt=this.conn.prepareStatement("{CALL testBug22297(?)}");  this.pstmt.setInt(1,1);  this.rs=this.pstmt.executeQuery();  String[] ids=new String[]{"a","b","c","d","e"};  int pos=0;  while (this.rs.next()) {    assertEquals(ids[pos++],this.rs.getString(1));    assertEquals(100,this.rs.getInt(2));  }  assertTrue(this.pstmt.getClass().getName().indexOf("Server") == -1);}  }
class C{  private static void validateExpectedProposals(IJavaProject javaProject,String fullyQualifiedClassName,String source,int lineNum,int numCharsCompleted,String... expectedProposals) throws CoreException, BadLocationException {  IProgressMonitor monitor=new NullProgressMonitor();  ICompilationUnit iCompilationUnit=JavaProjectUtilities.createCompilationUnit(javaProject,fullyQualifiedClassName,source);  CompilationUnitEditor cuEditor=(CompilationUnitEditor)JavaUI.openInEditor(iCompilationUnit);  ISourceViewer viewer=cuEditor.getViewer();  IDocument document=viewer.getDocument();  IRegion lineInformation=document.getLineInformation(lineNum);  JsniMethodBodyCompletionProposalComputer jcpc=new JsniMethodBodyCompletionProposalComputer();  for (int numCharsToOverwrite=0; numCharsToOverwrite <= numCharsCompleted; numCharsToOverwrite++) {    int invocationOffset=lineInformation.getOffset() + lineInformation.getLength() - numCharsToOverwrite;    JavaContentAssistInvocationContext context=new JavaContentAssistInvocationContext(viewer,invocationOffset,cuEditor);    List<ICompletionProposal> completions=jcpc.computeCompletionProposals(context,monitor);    int indentationUnits=JsniMethodBodyCompletionProposalComputer.measureIndentationUnits(document,lineNum,lineInformation.getOffset(),javaProject);    List<String> expected=createJsniBlocks(javaProject,indentationUnits,expectedProposals);    for (int i=0; i < expected.size(); i++) {      String expectedBlock=expected.get(i).substring(numCharsCompleted - numCharsToOverwrite);      expected.set(i,expectedBlock);    }    assertExpectedProposals(expected,completions,numCharsToOverwrite);  }}  }
class C{  public void testMergingServletWithInitParamsThatIsAlreadyDefined() throws Exception {  String srcXml="<web-app>".trim() + "  <servlet>".trim() + "    <servlet-name>s1</servlet-name>".trim()+ "    <servlet-class>sclass1</servlet-class>".trim()+ "    <load-on-startup>1</load-on-startup>".trim()+ "  </servlet>".trim()+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <servlet>".trim() + "    <servlet-name>s1</servlet-name>".trim()+ "    <servlet-class>sclass1</servlet-class>".trim()+ "    <init-param>".trim()+ "      <param-name>s1param1</param-name>".trim()+ "      <param-value>s1param1value</param-value>".trim()+ "    </init-param>".trim()+ "  </servlet>".trim()+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  Element servletElement=WebXmlUtils.getServlet(srcWebXml,"s1");  assertEquals("load-on-startup",((Element)servletElement.getChildren().get(servletElement.getChildren().size() - 1)).getName());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.556 -0500",hash_original_method="E88FC6AE9EAD423F2D43BC5A2B86150F",hash_generated_method="FBF9F55517D84B6FDEDD50858A77D8DD") public ColorMatrix(float[] src){  System.arraycopy(src,0,mArray,0,20);}  }
class C{  public void cleanupResource(){synchronized (this.managedStatisticsResourcesMap) {    ConfigurationParameter[] names=getConfiguration();    if (names != null) {      for (int i=0; i < names.length; i++) {        ConfigurationParameter parm=names[i];        ((ConfigurationParameterImpl)parm).removeConfigurationParameterListener(this);      }    }    this.parms.clear();    Collection<StatisticResourceJmxImpl> statisticResources=managedStatisticsResourcesMap.values();    for (    StatisticResourceJmxImpl statisticResource : statisticResources) {      MBeanUtil.unregisterMBean(statisticResource);    }    this.managedStatisticsResourcesMap.clear();  }  MBeanUtil.unregisterMBean(this.managedSystemMemberCache);  this.managedSystemMemberCache=null;}  }
class C{  public void removeHalfEdges(int index){  DoubleEdgeListHalfEdge e=this.edges.get(index);  this.removeHalfEdges(index,e);}  }
class C{  public static void error(File file,ErrorMessages message,int line,int column){  String msg=NL + "Error";  if (file != null)   msg+=" in file \"" + file + "\"";  if (line >= 0)   msg=msg + " (line " + (line + 1)+ ")";  try {    err(msg + ": " + NL+ ErrorMessages.get(message));  } catch (  ArrayIndexOutOfBoundsException e) {    err(msg);  }  errors++;  if (line >= 0) {    if (column >= 0)     showPosition(file,line,column); else     showPosition(file,line);  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void internalTransform(Body b,String phaseName,Map options){  JimpleBody body=(JimpleBody)b;  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "] Folding Jimple constructors...");  Analysis analysis=new Analysis(new BriefUnitGraph(body));  Chain units=body.getUnits();  List<Unit> stmtList=new ArrayList<Unit>();  stmtList.addAll(units);  Iterator<Unit> it;  it=stmtList.iterator();  while (it.hasNext()) {    Stmt s=(Stmt)it.next();    if (isCopy(s))     continue;    if (isConstructor(s))     continue;    Fact before=(Fact)analysis.getFlowBefore(s);    Iterator usesIt=s.getUseBoxes().iterator();    while (usesIt.hasNext()) {      ValueBox usebox=(ValueBox)usesIt.next();      Value value=usebox.getValue();      if (!(value instanceof Local))       continue;      Local local=(Local)value;      if (before.get(local) != null)       throw new RuntimeException("Use of an unitialized value " + "before constructor call; are you sure this " + "bytecode is verifiable?\n"+ s);    }  }  it=stmtList.iterator();  while (it.hasNext()) {    Stmt s=(Stmt)it.next();    if (isNew(s)) {      units.remove(s);    }  }  it=stmtList.iterator();  while (it.hasNext()) {    Stmt s=(Stmt)it.next();    Fact before=(Fact)analysis.getFlowBefore(s);    Fact after=(Fact)analysis.getFlowAfter(s);    if (isCopy(s)) {      Stmt newStmt=before.get(rhsLocal(s));      if (newStmt != null)       units.remove(s);    } else     if (after.alloc() != null) {      Stmt newStmt=before.get(base(s));      setBase(s,lhsLocal(newStmt));      units.insertBefore(newStmt,s);      Iterator copyIt=before.get(newStmt).iterator();      while (copyIt.hasNext()) {        Local l=(Local)copyIt.next();        if (l.equals(base(s)))         continue;        units.insertAfter(Jimple.v().newAssignStmt(l,base(s)),s);      }    }  }}  }
class C{  public void unpublish(String id,Handler<AsyncResult<Void>> resultHandler){  delegate.unpublish(id,resultHandler);}  }
class C{  public ParseFile(byte[] data){  this(null,data,null);}  }
class C{  private void populateSRDFPoolList(final VirtualArray sourceVarray,final Map<StoragePool,StorageSystem> destPoolStorageMap,final Set<SRDFPoolMapping> srcDestPoolList,final StoragePool sourcePool,final VirtualArray targetVarray,final VirtualPool vpool,final Volume vpoolChangeVolume,final long size){  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,sourcePool.getStorageDevice());  boolean isThinlyProvisioned=vpool.getSupportedProvisioningType().equalsIgnoreCase(VirtualPool.ProvisioningType.Thin.toString());  MetaVolumeRecommendation sourceVolumeRecommendation=MetaVolumeUtils.getCreateRecommendation(storageSystem,sourcePool,size,isThinlyProvisioned,vpool.getFastExpansion(),null);  long sourceMaxVolumeSizeLimitKb=isThinlyProvisioned ? sourcePool.getMaximumThinVolumeSize() : sourcePool.getMaximumThickVolumeSize();  _log.debug(String.format("Check which target pools match source pool %s based on the required volume configuration",sourcePool.getNativeId()));  for (  StoragePool targetPool : destPoolStorageMap.keySet()) {    if (!storageSystem.containsRemotelyConnectedTo(targetPool.getStorageDevice())) {      continue;    }    if (!validateRequiredVolumeConfiguration(sourcePool,targetPool,vpoolChangeVolume,destPoolStorageMap,sourceVolumeRecommendation,size,isThinlyProvisioned,vpool.getFastExpansion(),sourceMaxVolumeSizeLimitKb)) {      continue;    }    SRDFPoolMapping srdfPoolMapping=new SRDFPoolMapping();    srdfPoolMapping.sourceStoragePool=sourcePool;    srdfPoolMapping.sourceVarray=sourceVarray;    srdfPoolMapping.destStoragePool=targetPool;    srdfPoolMapping.destVarray=targetVarray;    srcDestPoolList.add(srdfPoolMapping);  }}  }
class C{  protected void revokeConnection(){  if (managedConn == null)   return;  log.warn(MISUSE_MESSAGE);  managedConn.detach();  try {    uniquePoolEntry.shutdown();  } catch (  IOException iox) {    log.debug("Problem while shutting down connection.",iox);  }}  }
class C{  private Uri decode(Uri uri){  BaseEncoding decoder=BaseEncoding.base64Url();  return Uri.parse(new String(decoder.decode(uri.getLastPathSegment()),Charsets.UTF_8));}  }
class C{  public List<List<AttributeTypeAndValue>> parse() throws IOException {  List<List<AttributeTypeAndValue>> list=new ArrayList<List<AttributeTypeAndValue>>();  String attType=nextAT();  if (attType == null) {    return list;  }  ObjectIdentifier oid=AttributeTypeAndValue.getObjectIdentifier(attType);  List<AttributeTypeAndValue> atav=new ArrayList<AttributeTypeAndValue>();  while (true) {    if (pos == chars.length) {      atav.add(new AttributeTypeAndValue(oid,new AttributeValue("",false,oid)));      list.add(0,atav);      return list;    }switch (chars[pos]) {case '"':      atav.add(new AttributeTypeAndValue(oid,new AttributeValue(quotedAV(),hasQE,oid)));    break;case '#':  atav.add(new AttributeTypeAndValue(oid,new AttributeValue(hexAV(),encoded)));break;case '+':case ',':case ';':atav.add(new AttributeTypeAndValue(oid,new AttributeValue("",false,oid)));break;default :atav.add(new AttributeTypeAndValue(oid,new AttributeValue(escapedAV(),hasQE,oid)));}if (pos >= chars.length) {list.add(0,atav);return list;}if (chars[pos] == ',' || chars[pos] == ';') {list.add(0,atav);atav=new ArrayList<AttributeTypeAndValue>();} else if (chars[pos] != '+') {throw new IOException("Invalid distinguished name string");}pos++;attType=nextAT();if (attType == null) {throw new IOException("Invalid distinguished name string");}oid=AttributeTypeAndValue.getObjectIdentifier(attType);}}  }
class C{  public static TransferTransaction createTransfer(){  return createTransfer(Utils.generateRandomAccount());}  }
class C{  @Override public PathImpl schemeWalk(String userPath,Map<String,Object> attributes,String filePath,int offset){  int p=filePath.indexOf('!',offset);  String backingPath;  String jarPath;  if (p > 0) {    backingPath=filePath.substring(offset,p);    jarPath=filePath.substring(p + 1);  } else {    backingPath=filePath.substring(offset);    jarPath="";  }  PathImpl backing=VfsOld.lookup(backingPath);  return JarPath.create(backing).lookup(jarPath);}  }
class C{  @Override protected void addToFrontier(Node node){  if (!explored.contains(node.getState()) && !frontierStates.contains(node.getState())) {    frontier.add(node);    frontierStates.add(node.getState());    updateMetrics(frontier.size());  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("DateExpense")) {      p_DateFrom=(Timestamp)para[i].getParameter();      m_DateTo=(Timestamp)para[i].getParameter_To();    } else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public JmsQueueScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  public final void testValidateUppercaseAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.UPPERCASE,true,allowedCharacters);  assertTrue(characterOrNumberValidator.validate("AB 1-"));}  }
class C{  static public void assertTrue(boolean condition){  assertTrue(null,condition);}  }
class C{  public void addParameterValues(org.oscm.xsd.ServiceParameter param){  if (localParameterValues == null) {    localParameterValues=new org.oscm.xsd.ServiceParameter[]{};  }  localParameterValuesTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameterValues);  list.add(param);  this.localParameterValues=(org.oscm.xsd.ServiceParameter[])list.toArray(new org.oscm.xsd.ServiceParameter[list.size()]);}  }
class C{  @Override protected void deinitialize(){  getComponentForm().deregisterAnimated(iconAnimation);  super.deinitialize();}  }
class C{  public AsyncResult CloseSecureChannelAsync(CloseSecureChannelRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public void testWritingToAndReadingFromTheDataStorage(){  StoreRetrieveData dataStorage=getDataStorage();  ArrayList<ToDoItem> retrievedItems=new ArrayList<>();  try {    dataStorage.saveToFile(mTestData);  } catch (  Exception e) {    fail("Couldn't store data: " + e.getMessage());  }  try {    retrievedItems=dataStorage.loadFromFile();  } catch (  Exception e) {    fail("Couldn't read from data storage: " + e.getMessage());  }  assertEquals(mTestData.size(),retrievedItems.size());  for (  ToDoItem retrievedItem : retrievedItems) {    boolean found=false;    for (    ToDoItem testItem : mTestData) {      if (retrievedItem.getIdentifier().equals(testItem.getIdentifier()) && retrievedItem.getToDoText().equals(testItem.getToDoText()) && retrievedItem.hasReminder() == testItem.hasReminder() && retrievedItem.getToDoDate().equals(testItem.getToDoDate())) {        found=true;        break;      }    }    if (!found) {      fail("Content mis-match between test data and data retrieved from the storage!");    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final void addValue(ScheduleUnit element,int value){  SortedSet<Integer> set=unitValues.get(element);  if (set == null) {    set=new TreeSet<Integer>();    unitValues.put(element,set);  }  set.add(value);}  }
class C{  public void scaleToFit(boolean useSymmetricScaling){  PageFormat format=getPageFormat();  Rectangle componentBounds=m_component.getBounds(null);  double scaleX=format.getImageableWidth() / componentBounds.width;  double scaleY=format.getImageableHeight() / componentBounds.height;  if ((scaleX < 1) || (scaleY < 1)) {    if (useSymmetricScaling) {      if (scaleX < scaleY) {        scaleY=scaleX;      } else {        scaleX=scaleY;      }    }    setSize((float)(componentBounds.width * scaleX),(float)(componentBounds.height * scaleY));    setScale(scaleX,scaleY);  }}  }
class C{  static void notifcation(Context context,String messageString,Intent intent,int notificationTitle){  String ns=Context.NOTIFICATION_SERVICE;  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(ns);  Calendar.getInstance().getTime().toString();  long when=System.currentTimeMillis();  CharSequence contentTitle=context.getString(notificationTitle);  String ticker=contentTitle + " " + messageString;  PendingIntent pendingIntent=PendingIntent.getActivity(context,ActivityConstants.showHistory,intent,0);  Builder notificationCompat=new Builder(context);  notificationCompat.setAutoCancel(true).setContentTitle(contentTitle).setContentIntent(pendingIntent).setContentText(messageString).setTicker(ticker).setWhen(when).setSmallIcon(R.drawable.ic_launcher);  Notification notification=notificationCompat.build();  mNotificationManager.notify(MessageID,notification);  MessageID++;}  }
class C{  private boolean doAcquireNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public boolean acceptCall(){  return super.isActive() ? mSession.accept() : false;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean hasLegacyChecksum(){  return checksum != null && (writtenBy == null || writtenBy.onOrAfter(Version.LUCENE_4_8) == false);}  }
class C{  public Boolean isSnapshotDisabled(){  return snapshotDisabled;}  }
class C{  private static int binarySearch0(long[] a,int fromIndex,int toIndex,long key){  int low=fromIndex;  int high=toIndex - 1;  while (low <= high) {    int mid=(low + high) >>> 1;    long midVal=a[mid];    if (midVal < key) {      low=mid + 1;    } else     if (midVal > key) {      high=mid - 1;    } else {      return mid;    }  }  return -(low + 1);}  }
class C{  protected int convertResolutionExToResolution(int resolutionEx){switch (resolutionEx) {case PSP_USBCAM_RESOLUTION_EX_160_120:    return PSP_USBCAM_RESOLUTION_160_120;case PSP_USBCAM_RESOLUTION_EX_176_144:  return PSP_USBCAM_RESOLUTION_176_144;case PSP_USBCAM_RESOLUTION_EX_320_240:return PSP_USBCAM_RESOLUTION_320_240;case PSP_USBCAM_RESOLUTION_EX_352_288:return PSP_USBCAM_RESOLUTION_352_288;case PSP_USBCAM_RESOLUTION_EX_360_272:return PSP_USBCAM_RESOLUTION_360_272;case PSP_USBCAM_RESOLUTION_EX_480_272:return PSP_USBCAM_RESOLUTION_480_272;case PSP_USBCAM_RESOLUTION_EX_640_480:return PSP_USBCAM_RESOLUTION_640_480;case PSP_USBCAM_RESOLUTION_EX_1024_768:return PSP_USBCAM_RESOLUTION_1024_768;case PSP_USBCAM_RESOLUTION_EX_1280_960:return PSP_USBCAM_RESOLUTION_1280_960;}return resolutionEx;}  }
class C{  LineAttrs(String lineSpec,int lineWidth){  StringBuilder specStr=new StringBuilder(lineSpec);  m_marker=getMarker(specStr);  m_style=getLineStyle(specStr.toString(),lineWidth);  m_color=getColor(specStr.toString());}  }
class C{  public CSettingsPanel(){  super(new BorderLayout());  m_clearRegisterCheckbox.setSelected(true);  m_clearRegisterField.setBorder(new LineBorder(Color.BLACK));  updateRegisterField();  m_clearRegisterCheckbox.addItemListener(new InternalItemListener());  add(m_clearRegisterCheckbox,BorderLayout.NORTH);  add(m_clearRegisterField,BorderLayout.CENTER);  setBorder(new EmptyBorder(5,5,5,5));}  }
class C{  public double toPValue(double d,int n){  double b=d / 30 + 1. / (36 * n);  double z=.5 * MathUtil.PISQUARE * MathUtil.PISQUARE* n* b;  if (z < 1.1 || z > 8.5) {    double e=Math.exp(0.3885037 - 1.164879 * z);    return (e > 1) ? 1 : (e < 0) ? 0 : e;  }  for (int i=0; i < 86; i++) {    if (TABPOS[i] >= z) {      if (TABPOS[i] == z) {        return TABVAL[i];      }      double x1=TABPOS[i], x0=TABPOS[i - 1];      double y1=TABVAL[i], y0=TABVAL[i - 1];      return y0 + (y1 - y0) * (z - x0) / (x1 - x0);    }  }  return -1;}  }
class C{  public static Element appendChild(Node ndT,String childName){  Node nd=ndT.getOwnerDocument().createElement(childName);  ndT.appendChild(nd);  return (Element)nd;}  }
class C{  public void close() throws IOException {  raf.close();}  }
class C{  public void addTrailerScraper(MediaScraper trailerScraper){  this.trailerScrapers.add(trailerScraper);}  }
class C{  public static void xml(String xml){  printer.xml(xml);}  }
class C{  public static boolean isInsideConditionList(ParserRuleContext ctx){  if (ctx == null) {    return false;  }  if (ctx instanceof ConditionListContext) {    return true;  }  return isInsideConditionList(ctx.getParent());}  }
class C{  public void addDependency(Plugin dependency){  dependencies.add(dependency);}  }
class C{  public static AbsGrammarFactory create(){  return new TextFactory();}  }
class C{  public void appendToBuffer(StringBuilder buf){  Iterator<double[]> iter=points.iterator();  while (iter.hasNext()) {    double[] data=iter.next();    for (int i=0; i < data.length; i++) {      if (i > 0) {        buf.append(",");      }      buf.append(data[i]);    }    if (iter.hasNext()) {      buf.append(" ");    }  }}  }
class C{  public static void i(String msg){  if (!allowI)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent ev){  int action=MotionEventCompat.getActionMasked(ev);  if (action == MotionEvent.ACTION_DOWN) {    stopAutoScroll();  } else   if (ev.getAction() == MotionEvent.ACTION_UP) {    startAutoScroll();  }  getParent().requestDisallowInterceptTouchEvent(true);  return super.dispatchTouchEvent(ev);}  }
class C{  public AnimationBuilder thenAnimate(View... views){  return viewAnimator.thenAnimate(views);}  }
class C{  private List extractDiscoveryInformation(HtmlResult htmlResult) throws DiscoveryException {  ArrayList htmlList=new ArrayList();  if (htmlResult.getOP2Endpoint() != null) {    DiscoveryInformation extracted=new DiscoveryInformation(htmlResult.getOP2Endpoint(),htmlResult.getClaimedId(),htmlResult.getDelegate2(),DiscoveryInformation.OPENID2);    if (DEBUG)     _log.debug("OpenID2-signon HTML discovery endpoint: " + extracted);    htmlList.add(extracted);  }  if (htmlResult.getOP1Endpoint() != null) {    DiscoveryInformation extracted=new DiscoveryInformation(htmlResult.getOP1Endpoint(),htmlResult.getClaimedId(),htmlResult.getDelegate1(),DiscoveryInformation.OPENID11);    if (DEBUG)     _log.debug("OpenID1-signon HTML discovery endpoint: " + extracted);    htmlList.add(extracted);  }  return htmlList;}  }
class C{  @Override public void switchPortChanged(DatapathId switchId,OFPortDesc port,PortChangeType type){switch (type) {case UP:    processNewPort(switchId,port.getPortNo());  break;case DELETE:case DOWN:handlePortDown(switchId,port.getPortNo());break;case OTHER_UPDATE:case ADD:break;}}  }
class C{  private final char[] findBuffer(int needed){  if (_allocator != null) {    return _allocator.allocCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER,needed);  }  return new char[Math.max(needed,MIN_SEGMENT_LEN)];}  }
class C{  public void snackBar(@StringRes int message,@StringRes int actionMessage,View.OnClickListener actionOnClick,int priority,boolean isDismissible,int secondsToTimeOut){  snackBar.message(message,actionMessage,actionOnClick,priority,isDismissible,secondsToTimeOut);}  }
class C{  public int code(){  return code;}  }
class C{  public void addZoomListener(ZoomListener listener,boolean onButtons,boolean onPinch){  if (onButtons) {    if (mZoomIn != null) {      mZoomIn.addZoomListener(listener);      mZoomOut.addZoomListener(listener);    }    if (onPinch) {      mTouchHandler.addZoomListener(listener);    }  }}  }
class C{  @Override public int lengthOfMonth(){  return isoDate.lengthOfMonth();}  }
class C{  @Override public void writeEntityRef(String name) throws XMLStreamException {  throw new UnsupportedOperationException("Not supported yet.");}  }
class C{  @Field(30) public Pointer<VARIANT> pvarVal(){  return this.io.getPointerField(this,30);}  }
class C{  @AnonymousCheck(requiresLogin=true,displaysFlashMessage=true) @IsAllowed(value=Operation.UPDATE,resourceType=ResourceType.MILESTONE) public static Result editMilestoneForm(String userName,String projectName,Long milestoneId){  Project project=Project.findByOwnerAndProjectName(userName,projectName);  Milestone milestone=Milestone.findById(milestoneId);  Form<Milestone> editForm=new Form<>(Milestone.class).fill(milestone);  return ok(edit.render("title.editMilestone",editForm,milestoneId,project));}  }
class C{  @POST @Path("/refreshUsages") public String refreshUsages(){  return "";}  }
class C{  public boolean isComplete(){  return columnMetaData != null && columnMetaData.length > 0;}  }
class C{  public synchronized long pendingMessagesRegistered(){  return pendingMsgsRegistered;}  }
class C{  private void searchViaLucene(org.apache.lucene.search.Query query,FullTextSession fts,LinkedHashMap<Long,VOService> map) throws HibernateException {  FullTextQuery ftQuery=fts.createFullTextQuery(query,Product.class);  ftQuery.setProjection("key");  List<?> result=ftQuery.list();  if (result != null) {    for (    Object item : result) {      map.put((Long)((Object[])item)[0],null);    }  }}  }
class C{  public boolean isSetMixStructlist(){  return this.mixStructlist != null;}  }
class C{  public NedFrame(){  x=0.0f;  y=0.0f;  z=0.0f;}  }
class C{  protected void finish(CreateVirtualNetworkWorkflowDocument state){  updateVirtualNetwork(state,SubnetState.READY);  try {    CreateVirtualNetworkWorkflowDocument patchState=buildPatch(TaskState.TaskStage.FINISHED,null);    patchState.taskServiceEntity=state.taskServiceEntity;    patchState.taskServiceEntity.state=SubnetState.READY;    finish(state,patchState);  } catch (  Throwable t) {    fail(state,t);  }}  }
class C{  public void onPageStarted(String url){  mAccessibilityScriptInjected=false;  if (DEBUG) {    Log.w(TAG,"[" + mWebView.hashCode() + "] Started loading new page");  }  addAccessibilityApisIfNecessary();}  }
class C{  @Deprecated public void completeTwoFactorAuthentication(final String oneTimeCode,final String deviceIdentifier,final String deviceDescription,final OnClientCallback<AuthenticationResult> callback) throws EDAMUserException, EDAMSystemException, TException {  AsyncReflector.execute(mClient,callback,"completeTwoFactorAuthentication",mAuthenticationToken,oneTimeCode,deviceIdentifier,deviceDescription);}  }
class C{  @Bean public MessageConverter jsonMessageConverter(){  return new Jackson2JsonMessageConverter();}  }
class C{  @Override public void user_init() throws java.lang.Exception {  m_Symbols=new HashMap<String,Double>();  m_Result=new JSONNode();  m_Stack=new Stack<JSONNode>();  m_Stack.push(m_Result);}  }
class C{  @LayoutlibDelegate static float floor(float value){  return (float)Math.floor(value);}  }
class C{  private static String readConfigProperty(String relativePath,String propertyKey){  String home=getRapidMinerHome();  if (home == null) {    logWarn("Property 'rapidminer.home' not set. Cannot read property file '" + relativePath + "'");    return null;  }  File propertyFile=new File(home,relativePath);  if (propertyFile.canRead()) {    Properties props=new Properties();    try (InputStreamReader reader=new InputStreamReader(new FileInputStream(propertyFile),StandardCharsets.UTF_8)){      props.load(reader);    } catch (    IOException e) {      logWarn("Error reading properties file! " + e.getLocalizedMessage());    }    return props.getProperty(propertyKey);  } else {    logWarn("Property file (" + propertyFile + ") not found or not readable!");    return null;  }}  }
class C{  @Override public void onClick(View v){  super.onClick(v);}  }
class C{  public Pragma createPragma(){  PragmaImpl pragma=new PragmaImpl();  return pragma;}  }
class C{  public static Double valueOf(double i){  return null;}  }
class C{  public WaferMapRenderer(Integer paintLimit,Integer paintIndexMethod){  super();  this.paintIndex=new HashMap();  if (paintLimit == null) {    this.paintLimit=DEFAULT_PAINT_LIMIT;  } else {    this.paintLimit=paintLimit.intValue();  }  this.paintIndexMethod=VALUE_INDEX;  if (paintIndexMethod != null) {    if (isMethodValid(paintIndexMethod.intValue())) {      this.paintIndexMethod=paintIndexMethod.intValue();    }  }}  }
class C{  public T caseTypeInfo(TypeInfo object){  return null;}  }
class C{  public static int number(){  return _all.size();}  }
class C{  public long updateSkuPrice(final SkuPriceDTO skuPriceDTO) throws UnmappedInterfaceException, UnableToCreateInstanceException {  final ProductSku sku=((ProductSkuService)getService()).getProductSkuBySkuCode(skuPriceDTO.getSkuCode());  if (federationFacade.isManageable(sku.getProduct().getProductId(),ProductDTO.class)) {    long rez=dtoProductSkuService.updateSkuPrice(skuPriceDTO);    reindexService.reindexProductSkuCode(skuPriceDTO.getSkuCode());    return rez;  } else {    throw new AccessDeniedException("Access is denied");  }}  }
class C{  @Override public void onViewAttachedToWindow(RecyclerView.ViewHolder holder){  mFastAdapter.onViewAttachedToWindow(holder);}  }
class C{  private boolean installAppEvent(Context context,AptoideDatabase db,boolean replacing,String installEvent){  boolean control=false;  try {    PackageManager mPm=context.getPackageManager();    PackageInfo pkg=mPm.getPackageInfo(installEvent,PackageManager.GET_SIGNATURES);    UpdatesApi.Package aPackage=new UpdatesApi.Package();    aPackage.signature=AptoideUtils.Algorithms.computeSHA1sumFromBytes(pkg.signatures[0].toByteArray()).toUpperCase(Locale.ENGLISH);    aPackage.vercode=pkg.versionCode;    aPackage.packageName=pkg.packageName;    db.insertInstalled(aPackage);    Logger.d("AptoideUpdates","Inserting " + aPackage.packageName);    db.deleteScheduledDownloadByPackageName(installEvent);    BusProvider.getInstance().post(new OttoEvents.InstalledApkEvent());    if (!replacing) {      String action=db.getNotConfirmedRollbackAction(pkg.packageName);      if (action != null) {        final String referrer;        if (action.contains("|")) {          referrer=action.split("\\|")[1];        } else {          referrer="";        }        if (action.split("\\|")[0].equals(RollBackItem.Action.INSTALLING.toString())) {          Logger.d("InstalledBroadcastReceiver","Installed rollback action");          db.confirmRollBackAction(pkg.packageName,action,RollBackItem.Action.INSTALLED.toString());          if (!TextUtils.isEmpty(referrer)) {            ReferrerUtils.broadcastReferrer(context,installEvent,referrer);            Analytics.ApplicationInstall.installed(pkg.packageName,true);            control=true;          } else {            Analytics.ApplicationInstall.installed(pkg.packageName,false);          }          processAbTesting(context,mPm,installEvent,db);        } else         if (action.split("\\|")[0].equals(RollBackItem.Action.DOWNGRADING.toString())) {          db.confirmRollBackAction(pkg.packageName,action,RollBackItem.Action.DOWNGRADED.toString());          Logger.d("InstalledBroadcastReceiver","Downgraded rollback action");          Analytics.ApplicationInstall.downgraded(pkg.packageName);          Analytics.Rollback.downgraded();        }      }    }    BusProvider.getInstance().post(new OttoEvents.InstalledApkEvent());    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && context.getPackageManager().getInstallerPackageName(installEvent) == null) {      context.getPackageManager().setInstallerPackageName(installEvent,context.getPackageName());    }  } catch (  Exception e) {    Logger.printException(e);  }  return control;}  }
class C{  public void handleOMADownload(DownloadInfo downloadInfo,long downloadId){  OMAParserTask task=new OMAParserTask(downloadInfo,downloadId);  task.execute();}  }
class C{  public Matrix3d scaleLocal(double x,double y,double z){  return scaleLocal(x,y,z,this);}  }
class C{  public void shouldHandleLateSetSucessRatio(){  CircuitBreaker breaker=new CircuitBreaker();  breaker.halfOpen();  HalfOpenState state=Testing.stateFor(breaker);  breaker.withSuccessThreshold(2);  state.recordSuccess();  assertTrue(breaker.isHalfOpen());  state.recordSuccess();  assertTrue(breaker.isClosed());  breaker=new CircuitBreaker().withFailureThreshold(3);  breaker.halfOpen();  state=Testing.stateFor(breaker);  state.recordFailure();  state.recordFailure();  breaker.withSuccessThreshold(2,4);  state.recordSuccess();  assertTrue(breaker.isHalfOpen());  state.recordSuccess();  assertTrue(breaker.isClosed());}  }
class C{  private AbstractProposalSorter createSorter() throws CoreException, InvalidRegistryObjectException {  return (AbstractProposalSorter)fElement.createExecutableExtension(CLASS);}  }
class C{  public OMEllipse(LatLonPoint centerPoint,int offset_x1,int offset_y1,int w,int h,double rotateAngle){  super(centerPoint.getY(),centerPoint.getX(),offset_x1,offset_y1,w,h);  setRotationAngle(rotateAngle);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tNormalize dimensions' widths.","N",0,"-N"));  return newVector.elements();}  }
class C{  public StreamAllocation close(){  if (bufferedRequestBody != null) {    closeQuietly(bufferedRequestBody);  } else   if (requestBodyOut != null) {    closeQuietly(requestBodyOut);  }  if (userResponse != null) {    closeQuietly(userResponse.body());  } else {    streamAllocation.connectionFailed(null);  }  return streamAllocation;}  }
class C{  @Override public boolean shouldPerform(OptOptions options){  if (options.getOptLevel() < 2) {    return false;  }  return options.CONTROL_TURN_WHILES_INTO_UNTILS;}  }
class C{  public boolean addRules(List<Rule> ruleList){  for (int i=0; i < ruleList.size(); i++) {    if (!validRule(ruleList.get(i))) {      return false;    }  }  if (!validateRuleProbabilities(ruleList)) {    return false;  }  this.rules=ruleList;  updateVarsAndTerminals();  return true;}  }
class C{  public ClusterOrder run(Database db,Relation<V> rel){  DBIDs ids=rel.getDBIDs();  DistanceQuery<V> dq=db.getDistanceQuery(rel,EuclideanDistanceFunction.STATIC);  reachDist=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP,UNDEFINED_DISTANCE);  index.computeSetsBounds(rel,minPts,ids);  inverseDensities=index.computeAverageDistInSet();  neighs=index.getNeighs();  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("FastOPTICS clustering",ids.size(),LOG) : null;  processed=DBIDUtil.newHashSet(ids.size());  order=new ClusterOrder(ids,"FastOPTICS Cluster Order","fast-optics");  for (DBIDIter it=ids.iter(); it.valid(); it.advance()) {    if (!processed.contains(it)) {      expandClusterOrder(DBIDUtil.deref(it),order,dq,prog);    }  }  index.logStatistics();  LOG.ensureCompleted(prog);  return order;}  }
class C{  public Matrix3d rotate(double ang,double x,double y,double z){  return rotate(ang,x,y,z,this);}  }
class C{  public static void copy(ByteBuffer buffer,OutputStream out) throws IOException {  if (buffer.hasArray()) {    out.write(buffer.array(),buffer.arrayOffset() + buffer.position(),buffer.remaining());  } else {    byte[] arr=new byte[BUFFER_SIZE];    ByteBuffer in=buffer.duplicate();    while (in.hasRemaining()) {      int len=Math.min(in.remaining(),arr.length);      in.get(arr,0,len);      out.write(arr,0,len);    }  }}  }
class C{  public ZipLong(byte[] bytes,int offset){  value=ZipLong.getValue(bytes,offset);}  }
class C{  public float[] toArray(){  return Vector3.toArray(this);}  }
class C{  @Override protected void onResume(){  super.onResume();  if (mPingReceiver != null) {    registerPingReceiver();    mPingReceiver.onReceive(this,PingReceiver.makePingIntent(this,mPingReceiver.getIteration() + 1));  }}  }
class C{  public static void dispose(){  disposeColors();  disposeImages();  disposeFonts();  disposeCursors();}  }
class C{  public boolean undo(INode n){  FreeCellNode state=(FreeCellNode)n;  state.removeFoundation(suit);  Column col=state.cols[nth];  col.add(card);  return true;}  }
class C{  public void show(){  Display.impl.onShow(this);  show(false);}  }
class C{  public boolean isProposalPopupOpen(){  if (isValid() && isProposalPopupActive())   return true;  return false;}  }
class C{  public DateTime toDateTime(){  return new DateTime(getMillis(),ISOChronology.getInstance());}  }
class C{  public ResultEntry(NondominatedPopulation population){  this(population,new Properties());}  }
class C{  public static String prettyPrintXml(Document document,String charset) throws Exception {  StringWriter stringWriter=new StringWriter();  StreamResult output=new StreamResult(stringWriter);  Transformer transformer=TransformerFactory.newInstance().newTransformer();  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  transformer.setOutputProperty(OutputKeys.ENCODING,charset);  transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");  transformer.transform(new DOMSource(document),output);  return output.getWriter().toString().trim();}  }
class C{  public SpriteSheetDrawer spriteAnimationEndCallBack(AnimCallBack callBack){  mSpriteSheet.setSpriteSheetFinishCallback(callBack);  return this;}  }
class C{  public boolean lookahead_visible() throws internal_error {  production_part part;  symbol sym;  if (dot_at_end())   return true;  for (int pos=dot_pos() + 1; pos < the_production().rhs_length(); pos++) {    part=the_production().rhs(pos);    if (!part.is_action()) {      sym=((symbol_part)part).the_symbol();      if (!sym.is_non_term())       return false;      if (!((non_terminal)sym).nullable())       return false;    }  }  return true;}  }
class C{  public static byte[] splitLong(final long value,final boolean valueInLittleEndian,final byte[] buffer){  final byte[] result;  if (buffer == null || buffer.length < 8) {    result=new byte[8];  } else {    result=buffer;  }  long tmpvalue=value;  if (valueInLittleEndian) {    for (int i=0; i < 8; i++) {      result[i]=(byte)tmpvalue;      tmpvalue>>>=8;    }  } else {    for (int i=7; i >= 0; i--) {      result[i]=(byte)tmpvalue;      tmpvalue>>>=8;    }  }  return result;}  }
class C{  public int valueAt(int index){  return mValues[index];}  }
class C{  public static String removeChars(String str,String oldchars){  int pos=indexOfChars(str,oldchars);  if (pos == -1) {    return str;  }  StringBuilder buf=new StringBuilder();  int start=0;  do {    buf.append(str.substring(start,pos));    start=pos + 1;    pos=indexOfChars(str,oldchars,start);  } while (pos != -1);  if (start < str.length()) {    buf.append(str.substring(start));  }  return buf.toString();}  }
class C{  static PageParamInfo evaluate(PageParameterDetector.PagePattern pagePattern,List<PageLinkInfo> allLinkInfo,List<PageInfo> ascendingNumbers,String firstPageUrl){  if (allLinkInfo.size() >= MIN_LINKS_TO_JUSTIFY_LINEAR_MAP) {    PageNumbersState state=getPageNumbersState(allLinkInfo,ascendingNumbers);    if (!state.mIsAdjacent)     return null;    if (!state.mIsConsecutive)     return null;    if (!isPageNumberSequence(ascendingNumbers,state))     return null;    LinearFormula linearFormula=getLinearFormula(allLinkInfo);    List<PageInfo> allPageInfo=new ArrayList<PageInfo>();    for (    PageLinkInfo link : allLinkInfo) {      allPageInfo.add(new PageInfo(link.mPageNum,ascendingNumbers.get(link.mPosInAscendingList).mUrl));    }    return new PageParamInfo(Type.PAGE_NUMBER,pagePattern.toString(),allPageInfo,linearFormula,state.mNextPagingUrl);  }  if (allLinkInfo.size() == 1 && !firstPageUrl.isEmpty()) {    final PageLinkInfo onlyLink=allLinkInfo.get(0);    boolean secondPageIsOutlink=onlyLink.mPageNum == 2 && onlyLink.mPosInAscendingList == 1;    boolean thirdPageIsOutlink=onlyLink.mPageNum == 3 && onlyLink.mPosInAscendingList == 2 && ascendingNumbers.get(1).mPageNum == 2;    if (ascendingNumbers.get(0).mPageNum == 1 && (secondPageIsOutlink || thirdPageIsOutlink) && pagePattern.isPagingUrl(firstPageUrl)) {      int coefficient;      int delta=onlyLink.mPageParamValue - onlyLink.mPageNum;      if (delta == 0 || delta == 1) {        coefficient=1;      } else {        coefficient=onlyLink.mPageParamValue;        delta=0;      }      List<PageInfo> allPageInfo=new ArrayList<PageInfo>();      allPageInfo.add(new PageInfo(1,firstPageUrl));      allPageInfo.add(new PageInfo(onlyLink.mPageNum,ascendingNumbers.get(onlyLink.mPosInAscendingList).mUrl));      return new PageParamInfo(Type.PAGE_NUMBER,pagePattern.toString(),allPageInfo,new LinearFormula(coefficient,delta),thirdPageIsOutlink ? allPageInfo.get(1).mUrl : "");    }  }  return null;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public SwfDecoder(InputStream in,int swfVersion){  super(in);  this.swfVersion=swfVersion;}  }
class C{  private void startCameraSource() throws SecurityException {  int code=GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(getApplicationContext());  if (code != ConnectionResult.SUCCESS) {    Dialog dlg=GoogleApiAvailability.getInstance().getErrorDialog(this,code,RC_HANDLE_GMS);    dlg.show();  }  if (mCameraSource != null) {    try {      mPreview.start(mCameraSource,mGraphicOverlay);    } catch (    IOException e) {      Log.e(TAG,"Unable to start camera source.",e);      mCameraSource.release();      mCameraSource=null;    }  }}  }
class C{  public static void circle(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("circle radius must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public int hashCode(){  return (int)this.impersonationToken;}  }
class C{  public boolean handleRequest(Service service,Operation inboundOp){  if (inboundOp == null && service != null) {    inboundOp=service.dequeueRequest();  }  if (inboundOp == null) {    return true;  }  if (inboundOp.getUri().getPort() != this.state.httpPort && inboundOp.getUri().getPort() != this.state.httpsPort) {    return false;  }  if (!ServiceHost.LOCAL_HOST.equals(inboundOp.getUri().getHost())) {    if (!UriUtils.isHostEqual(this,inboundOp.getUri())) {      return false;    }  }  if (!this.state.isStarted) {    failRequestServiceNotFound(inboundOp);    return true;  }  if (this.isAuthorizationEnabled()) {    if (inboundOp.getAuthorizationContext() == null) {      populateAuthorizationContext(inboundOp);    }    if (this.authorizationService != null) {      inboundOp.nestCompletion(null);      queueOrScheduleRequest(this.authorizationService,inboundOp);      return true;    }  }  handleRequestWithAuthContext(service,inboundOp);  return true;}  }
class C{  private boolean isEffectiveDelete(){  if (operation == null) {    if (pendingChange != null && pendingChange.getChangeType().contains(ChangeType.DELETE) && remoteItem != null && remoteItem.getDeletionID() > 0) {      return true;    }    return false;  }  if (operation.isDelete()) {    return true;  }  if (operation.getCurrentLocalItem() != null && operation.getTargetLocalItem() != null && !operation.getCurrentLocalItem().equals(operation.getTargetLocalItem())) {    final String source=operation.getCurrentLocalItem();    if (source.equals(resource.getLocation().toOSString())) {      return true;    }  }  return false;}  }
class C{  public void testAccessors() throws Exception {  TungstenProperties props=new TungstenProperties();  props.setString("string1","mystring");  props.setString("string2","");  assertEquals("Checking normal string","mystring",props.getString("string1"));  assertEquals("Checking empty string","",props.getString("string2"));  props.setInt("int1",13);  props.setInt("int2",0);  assertEquals("Checking normal int",13,props.getInt("int1"));  assertEquals("Checking zero",0,props.getInt("int2"));  props.setBoolean("boolean1",true);  props.setBoolean("boolean2",false);  assertEquals("Checking true",true,props.getBoolean("boolean1"));  assertEquals("Checking false",false,props.getBoolean("boolean2"));  props.setFloat("float1",Float.MIN_VALUE);  props.setFloat("float2",Float.MAX_VALUE);  props.setFloat("float3",Float.POSITIVE_INFINITY);  props.setFloat("float4",Float.NEGATIVE_INFINITY);  props.setFloat("float5",Float.NaN);  props.setFloat("float6",0);  assertEquals("Checking min float",Float.MIN_VALUE,props.getFloat("float1"));  assertEquals("Checking max float",Float.MAX_VALUE,props.getFloat("float2"));  assertEquals("Checking +inf float",Float.POSITIVE_INFINITY,props.getFloat("float3"));  assertEquals("Checking -inf float",Float.NEGATIVE_INFINITY,props.getFloat("float4"));  assertEquals("Checking NaN float",Float.NaN,props.getFloat("float5"));  assertEquals("Checking zero float",new Float(0),props.getFloat("float6"));  props.setDouble("double1",Double.MIN_VALUE);  props.setDouble("double2",Double.MAX_VALUE);  props.setDouble("double3",Double.POSITIVE_INFINITY);  props.setDouble("double4",Double.NEGATIVE_INFINITY);  props.setDouble("double5",Double.NaN);  props.setDouble("double6",0);  assertEquals("Checking min double",Double.MIN_VALUE,props.getDouble("double1"));  assertEquals("Checking max double",Double.MAX_VALUE,props.getDouble("double2"));  assertEquals("Checking +inf double",Double.POSITIVE_INFINITY,props.getDouble("double3"));  assertEquals("Checking -inf double",Double.NEGATIVE_INFINITY,props.getDouble("double4"));  assertEquals("Checking NaN double",Double.NaN,props.getDouble("double5"));  assertEquals("Checking zero double",new Double(0),props.getDouble("double6"));  Date now=new Date();  props.setDate("date1",new Date(0));  props.setDate("date2",now);  props.setDate("date3",new Date(Long.MAX_VALUE));  props.setDate("date4",new Date(Long.MIN_VALUE));  assertEquals("Checking Epoch",new Date(0),props.getDate("date1"));  assertEquals("Checking now",now,props.getDate("date2"));  assertEquals("Checking max date",new Date(Long.MAX_VALUE),props.getDate("date3"));  assertEquals("Checking min date",new Date(Long.MIN_VALUE),props.getDate("date4"));  File file1=new File("/etc/init.d");  props.setFile("file1",file1);  assertEquals("Checking File instance",file1,props.getFile("file1"));  Interval interval=new Interval(10000);  props.setInterval("interval1",interval);  assertEquals("Checking interval with object",interval,props.getInterval("interval1"));  props.setString("interval2","3m");  assertEquals("Checking string interval",180000,props.getInterval("interval2").longValue());  TungstenProperties embeddedProp=this.makeProperties();  props.setTungstenProperties("myEmbeddedProps",embeddedProp);  assertEquals("Checking TungstenProperties",embeddedProp,props.getTungstenProperties("myEmbeddedProps"));  String propsToString=props.toString();  System.out.println(propsToString);  Properties theProperties=props.getProperties();  for (  Object key : theProperties.keySet()) {    Object value=theProperties.get(key);    Assert.assertTrue(String.format("toString output contains %s=%s",key,value.toString()),propsToString.contains(String.format("%s=%s",key,value)));  }}  }
class C{  public static void saveObject(final DataMap editor,final String key,final Object o){  if (o == null) {    editor.remove(key);  } else   if (o instanceof String) {    editor.putString(key,(String)o);  } else   if (o instanceof Integer) {    editor.putInt(key,(Integer)o);  } else   if (o instanceof Boolean) {    editor.putBoolean(key,(Boolean)o);  } else   if (o instanceof Long) {    editor.putLong(key,(Long)o);  } else   if (o instanceof Float) {    editor.putFloat(key,(Float)o);  } else   if (o instanceof Set) {    final ArrayList asList=new ArrayList();    asList.addAll((Set)o);    editor.putStringArrayList(key,asList);  } else {    throw new IllegalArgumentException("SharedPreferences does not accept " + o.getClass().getName() + " objects");  }}  }
class C{  private static String handleRequestDynamic(Object element){  if (element instanceof CnATreeElement) {    CnATreeElement cnaTreeElement=(CnATreeElement)element;    PropertyType htmlProperty=cnaTreeElement.getEntityType().getObjectBrowserPropertyType();    if (htmlProperty != null) {      return Retriever.checkRetrieveElement(cnaTreeElement).getEntity().getPropertyValue(htmlProperty.getId());    }  }  return "";}  }
class C{  public static IByteSequence readAllBytesFromStream(InputStream inputStream) throws IOException {  return readAllBytesFromStream(inputStream,32);}  }
class C{  @Override public int hashCode(){  int h=0;  Iterator<Entry> i=entrySet().iterator();  while (i.hasNext()) {    h+=i.next().hashCode();  }  return h;}  }
class C{  private String escapePath(String path){  StringBuilder sb=new StringBuilder(path.length());  for (  byte b : path.getBytes(utf8)) {    if (b < 33 || b == 91 || b == 93) {      sb.append('%');      String hex=Integer.toHexString(b & 0xFF).toUpperCase(Locale.ROOT);      if (hex.length() % 2 != 0) {        sb.append('0');        sb.append(hex);      } else {        sb.append(hex);      }    } else {      sb.append((char)b);    }  }  return sb.toString();}  }
class C{  public boolean syncEnableNetwork(AsyncChannel channel,int netId,boolean disableOthers){  Message resultMsg=channel.sendMessageSynchronously(CMD_ENABLE_NETWORK,netId,disableOthers ? 1 : 0);  boolean result=(resultMsg.arg1 != FAILURE);  resultMsg.recycle();  return result;}  }
class C{  public void close(){  dequeue();}  }
class C{  public static void buildContent(final ZyLabelContent content,final INaviTextNode node){  Preconditions.checkNotNull(node,"IE00921: Node argument can not be null");  Preconditions.checkNotNull(content,"IE02732: content argument can not be null");  while (content.getLineCount() != 0) {    content.removeLine(0);  }  ZyNodeBuilder.addCommentTagLines(content,node,node.getComments(),null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.244 -0500",hash_original_method="BB6F12E082A75859BCEF500D953CB8EE",hash_generated_method="77669E5E2E2E9E3420F4EC1BD5E0EDB7") private View fillFromMiddle(int childrenTop,int childrenBottom){  int height=childrenBottom - childrenTop;  int position=reconcileSelectedPosition();  View sel=makeAndAddView(position,childrenTop,true,mListPadding.left,true);  mFirstPosition=position;  int selHeight=sel.getMeasuredHeight();  if (selHeight <= height) {    sel.offsetTopAndBottom((height - selHeight) / 2);  }  fillAboveAndBelow(sel,position);  if (!mStackFromBottom) {    correctTooHigh(getChildCount());  } else {    correctTooLow(getChildCount());  }  return sel;}  }
class C{  public Mailer(String from){  this(from,null);}  }
class C{  @Override public void transform(AffineTransform tx){  if (get(TRANSFORM) != null || (tx.getType() & (AffineTransform.TYPE_TRANSLATION)) != tx.getType()) {    if (get(TRANSFORM) == null) {      TRANSFORM.setClone(this,tx);    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    Point2D.Double anchor=getStartPoint();    Point2D.Double lead=getEndPoint();    setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));    if (get(FILL_GRADIENT) != null && !get(FILL_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=FILL_GRADIENT.getClone(this);      g.transform(tx);      set(FILL_GRADIENT,g);    }    if (get(STROKE_GRADIENT) != null && !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=STROKE_GRADIENT.getClone(this);      g.transform(tx);      set(STROKE_GRADIENT,g);    }  }  invalidate();}  }
class C{  protected void addFieldInto(int[] values,DurationFieldType field,int value){  int index=indexOf(field);  if (index == -1) {    if (value != 0 || field == null) {      throw new IllegalArgumentException("Period does not support field '" + field + "'");    }  } else {    values[index]=FieldUtils.safeAdd(values[index],value);  }}  }
class C{  private float featuresProbabilityProduct(Collection<T> features,K category){  float product=1.0f;  for (  T feature : features)   product*=this.featureWeighedAverage(feature,category);  return product;}  }
class C{  public void removeOrderItemAttribute(String name){  if (orderItemAttributes != null) {    orderItemAttributes.remove(name);  }}  }
class C{  public static List<ErrorLogger.ErrorObject> validatePKL(PayloadRecord pkl) throws IOException {  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  if (pkl.getPayloadAssetType() != PayloadRecord.PayloadAssetType.PackingList) {    throw new IMFException(String.format("Payload asset type is %s, expected asset type %s",pkl.getPayloadAssetType(),PayloadRecord.PayloadAssetType.PackingList.toString()),imfErrorLogger);  }  try {    PackingList packingList=new PackingList(new ByteArrayByteRangeProvider(pkl.getPayload()));    imfErrorLogger.addAllErrors(packingList.getErrors());  } catch (  IMFException e) {    imfErrorLogger.addAllErrors(e.getErrors());  }  return imfErrorLogger.getErrors();}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public NavMouseMode(boolean shouldConsumeEvents){  super(modeID,shouldConsumeEvents);  setModeCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));  rectAttributes.setLinePaint(Color.GRAY);  rectAttributes.setMattingPaint(Color.LIGHT_GRAY);  rectAttributes.setMatted(true);}  }
class C{  protected void fireValueChanged(TreeCheckingEvent e){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeCheckingListener.class) {      ((TreeCheckingListener)listeners[i + 1]).valueChanged(e);    }  }}  }
class C{  void onNetworkToggle(boolean up){  if (up == mIsNetworkUp) {    return;  }  mIsNetworkUp=up;  WebView w=mController.getCurrentWebView();  if (w != null) {    w.setNetworkAvailable(up);  }  Tab t=mController.getCurrentTab();  if (t != null) {    t.setNetworkAvailable(up);  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public EaseOut(){}  }
class C{  public void resetFPSCalculations(){  firstSystemTime=SystemClock.elapsedRealtime();  timeToUpdate=firstSystemTime + 1000L;  numberOfFrames=0;}  }
class C{  protected final void fireVetoableChange(String propertyName,float oldValue,float newValue) throws PropertyVetoException {  fireVetoableChange(propertyName,Float.valueOf(oldValue),Float.valueOf(newValue));}  }
class C{  boolean hasParticipant(UUID nodeId,IgniteUuid ldrId){  assert nodeId != null;  assert ldrId != null;  assert Thread.holdsLock(mux);  return classLoader().hasRegisteredNode(nodeId,ldrId);}  }
class C{  private boolean isKillable(){  return FILTER != null;}  }
class C{  public void renderDataForProjection(Projection proj,Graphics g){  Component[] layersComps=mapBean.getComponents();  for (int i=layersComps.length - 1; i >= 0; i--) {    Layer layer=(Layer)layersComps[i];    if (layer.isVisible()) {      layer.renderDataForProjection(proj,g);    }  }}  }
class C{  public RatPoly sub(RatPoly p){  if (p.isNaN() || this.isNaN()) {    return NAN;  }  RatPoly result=new RatPoly(terms.copy());  for (int i=0, size=p.terms.size(); i < size; i++) {    sortedAdd(result.terms,new RatTerm(p.terms.get(i).coeff.negate(),p.terms.get(i).expt));  }  return result;}  }
class C{  public HeapBytes reset(byte[] array){  memory.reset(array);  return this;}  }
class C{  private ReaderPanel(ReaderWorld theWorld,JToolBar toolbar){  this.world=theWorld;  openCloseToolBar=toolbar;  this.setLayout(new BorderLayout());  this.setBorder(BorderFactory.createEmptyBorder(0,10,0,10));  textArea.setLineWrap(true);  textArea.setText(world.getText());  inputScrollPane=new JScrollPane(textArea,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  add(inputScrollPane);  JPanel topToolbarPanel=new JPanel();  topToolbarPanel.setLayout(new FlowLayout(FlowLayout.LEFT));  if (openCloseToolBar != null) {    topToolbarPanel.add(openCloseToolBar);  }  JToolBar dictionaryToolBar=new JToolBar();  dictionaryToolBar.add(TextWorldActions.showDictionaryEditor(world));  topToolbarPanel.add(dictionaryToolBar);  add(topToolbarPanel,BorderLayout.NORTH);  JPanel bottomToolbarPanel=new JPanel();  bottomToolbarPanel.setLayout(new FlowLayout(FlowLayout.LEFT));  bottomToolbarPanel.add(getToolbarModeSelect());  add(bottomToolbarPanel,BorderLayout.SOUTH);  syncParseStyleButtons();}  }
class C{  public static void updateMediaNotificationForTab(Context context,int tabId,boolean audioCapture,boolean videoCapture,boolean audioPlayback,String fullUrl){  int mediaType=getMediaType(audioCapture,videoCapture,audioPlayback);  if (!shouldStartService(context,mediaType,tabId))   return;  Intent intent=new Intent(context,MediaNotificationService.class);  intent.putExtra(NOTIFICATION_ID_EXTRA,tabId);  String baseUrl=fullUrl;  try {    URL url=new URL(fullUrl);    baseUrl=url.getProtocol() + "://" + url.getHost();  } catch (  MalformedURLException e) {    Log.w(LOG_TAG,"Error parsing the webrtc url " + fullUrl);  }  intent.putExtra(NOTIFICATION_MEDIA_URL_EXTRA,baseUrl);  intent.putExtra(NOTIFICATION_MEDIA_TYPE_EXTRA,mediaType);  context.startService(intent);}  }
class C{  private Rectangle adjustSize(List<String> strings){  FontHandler fontHandler=CurrentDiagram.getInstance().getDiagramHandler().getFontHandler();  int width=0;  int height=strings.size();  double heightTweaker=0.1;  for (  String string : strings) {    if (string.isEmpty()) {      heightTweaker+=1;    } else     if (string.equals("--")) {      heightTweaker+=0.5;    }    if (fontHandler.getTextWidth(string) > width) {      width=(int)(fontHandler.getTextWidth(string) + fontHandler.getDistanceBetweenTexts()) + 10;    }  }  height=(int)(fontHandler.getFontSize() + fontHandler.getDistanceBetweenTexts()) * (height - (int)heightTweaker);  return new Rectangle(0,0,align(width),align(height));}  }
class C{  public boolean isSynthetic(){  return testAllFlags(SYNTHETIC);}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void testDirect() throws Exception {  assertEquals(SweetSpotSimilarity.class,getSimilarity("sim1text").getClass());}  }
class C{  public MethodHandle findSetter(Class<?> refc,String name,Class<?> type) throws NoSuchFieldException, IllegalAccessException {  MemberName field=resolveOrFail(REF_putField,refc,name,type);  return getDirectField(REF_putField,refc,field);}  }
class C{  public int size(){  return inputs.size();}  }
class C{  public WeakValueHashMap(){  this(1);}  }
class C{  public void removeViewFromFadeList(View view){  if (mFadeViewList != null && view != null) {    mFadeViewList.remove(view);  }}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  return new ShopSign(getShop(ctx),getTitle(ctx),getCaption(ctx),getSeller(ctx));}  }
class C{  public synchronized VisualTable addDerivedTable(String group,String source,Predicate filter,Schema override){  VisualTable src=(VisualTable)getGroup(source);  VisualTable vt=new VisualTable(src,this,group,filter,override);  addDataGroup(group,vt,getSourceData(source));  return vt;}  }
class C{  public void skipPast(String to){  this.myIndex=this.mySource.indexOf(to,this.myIndex);  if (this.myIndex < 0) {    this.myIndex=this.mySource.length();  } else {    this.myIndex+=to.length();  }}  }
class C{  public EntryChangeResponseControl(String id,boolean criticality,byte[] value) throws IOException {  super(id,criticality,value);  if ((value != null) && (value.length > 0)) {    BerDecoder ber=new BerDecoder(value,0,value.length);    ber.parseSeq(null);    changeType=ber.parseEnumeration();    if ((ber.bytesLeft() > 0) && (ber.peekByte() == Ber.ASN_OCTET_STR)) {      previousDN=ber.parseString(true);    }    if ((ber.bytesLeft() > 0) && (ber.peekByte() == Ber.ASN_INTEGER)) {      changeNumber=ber.parseInt();    }  }}  }
class C{  public void insertTab(String text,Icon icon,Component component,String tip,int index){  String title=text;  if (!title.startsWith("<html>")) {    int pos=title.indexOf('&');    if (pos != -1)     title=title.substring(0,pos) + title.substring(pos + 1);  }  if (tip == null || tip.length() == 0)   tip=title;  super.insertTab(title,icon,component,tip,index);  if (component instanceof JPanel) {    JPanel p=(JPanel)component;    if (p.getClientProperty(CompiereLookAndFeel.BACKGROUND) == null) {    }  }  if (index == 0)   getActionMap().put(ACTION_SELECT,s_action);  if (!setMnemonicAt(index,text)) {    if (index < 9)     setMnemonicAt(index,'1' + index); else     if (index == 9)     setMnemonicAt(index,'0');  } else {    if (index < 9)     getInputMap(WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_1 + index,Event.ALT_MASK),ACTION_SELECT); else     if (index == 9)     getInputMap(WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_0,Event.ALT_MASK),ACTION_SELECT);  }}  }
class C{  public void loadReferencedType(ClassfileConstantPool cp,int index,int opcode){}  }
class C{  protected boolean establishConnectionToPrimary(){  logger.info("Connecting to '{}'",replicaSet);  primaryClient=context.primaryFor(replicaSet,null);  return primaryClient != null;}  }
class C{  public void close(){  if (!_lifecycle.toDestroy()) {    return;  }  try {    closeImpl();  } catch (  Exception e) {    _lifecycle.toDestroy();  }}  }
class C{  public static void i(String msg){  if (LOGI_DEBUG && mLogAll) {    Log.i(DEFAULT_TAG,getInformation(msg));  }}  }
class C{  public DrawerBuilder withOnDrawerItemClickListener(@NonNull Drawer.OnDrawerItemClickListener onDrawerItemClickListener){  this.mOnDrawerItemClickListener=onDrawerItemClickListener;  return this;}  }
class C{  public PutRepositoryRequest source(XContentBuilder repositoryDefinition){  return source(repositoryDefinition.bytes());}  }
class C{  public Device build() throws Exception {  Device device=new Device();  LicenseInfoExt licenseInfo=_licenseManager.getLicenseInfoFromCoordinator(LicenseType.CONTROLLER);  buildDevice(licenseInfo,device);  return device;}  }
class C{  public boolean isContextSpecific(){  return ((tag & 0x0c0) == 0x080);}  }
class C{  public CSVWriter(Writer writer){  this(writer,DEFAULT_SEPARATOR);}  }
class C{  public int hashCode(){  int hash=super.hashCode();  hash=hash + (this.getOpen() == null ? 0 : this.getOpen().hashCode());  hash=hash + (this.getClose() == null ? 0 : this.getClose().hashCode());  return hash;}  }
class C{  @Override public boolean implies(ProtectionDomain pd,Permission p){  PolicyInfo pi=policyInfo.get();  ProtectionDomainCache pdMap=pi.getPdMapping();  PermissionCollection pc=pdMap.get(pd);  if (pc != null) {    return pc.implies(p);  }  pc=getPermissions(pd);  if (pc == null) {    return false;  }  pdMap.put(pd,pc);  return pc.implies(p);}  }
class C{  public LRS(int L,int R,Classifier evaluater,int folds){  setFeaturesToAdd(L);  setFeaturesToRemove(R);  setFolds(folds);  setEvaluator(evaluater);}  }
class C{  public OutputNode pop(){  int size=size();  if (size <= 0) {    return null;  }  return purge(size - 1);}  }
class C{  public static boolean parseBlockContent(PsiBuilder b,int l,PsiBuilder.Marker outerMarker,IElementType blockTokenType){  boolean r=false;  while (!b.eof() && TemplateToolkitParser.element(b,l)) {    LighterASTNode latestDoneMarker=b.getLatestDoneMarker();    if (latestDoneMarker != null && latestDoneMarker.getTokenType() == END_DIRECTIVE) {      r=true;      break;    }  }  outerMarker.done(blockTokenType);  if (!r) {    outerMarker.setCustomEdgeTokenBinders(WhitespacesBinders.DEFAULT_LEFT_BINDER,WhitespacesBinders.GREEDY_RIGHT_BINDER);    outerMarker.precede().error(PerlBundle.message("ttk2.error.unclosed.block.directive"));  }  return r;}  }
class C{  void createEdges(Integer[] v){  graph.addEdge(new Double(Math.random()),v[0],v[1],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[3],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[4],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[4],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[3],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[1],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[1],v[4],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[8],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[3],v[8],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[6],v[7],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[7],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[9],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[9],v[8],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[7],v[6],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[6],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[4],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[5],v[4],EdgeType.DIRECTED);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ComplexMixer(TargetDataLine targetDataLine,AudioFormat format,String name,ISampleAdapter sampleAdapter,Listener<ComplexBuffer> listener){  mTargetDataLine=targetDataLine;  mName=name;  mAudioFormat=format;  mSampleAdapter=sampleAdapter;  mListener=listener;}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  return updateJournalTotal();}  }
class C{  private void notifyListeners(){  for (  final IDebuggerChooserPanelListener listener : m_listeners) {    try {      listener.inputChanged();    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public static String stringFor(int n){switch (n) {case CU_CTX_SCHED_AUTO:    return "CU_CTX_SCHED_AUTO";case CU_CTX_SCHED_SPIN:  return "CU_CTX_SCHED_SPIN";case CU_CTX_SCHED_YIELD:return "CU_CTX_SCHED_YIELD";case CU_CTX_BLOCKING_SYNC:return "CU_CTX_BLOCKING_SYNC";case CU_CTX_MAP_HOST:return "CU_CTX_MAP_HOST";case CU_CTX_LMEM_RESIZE_TO_MAX:return "CU_CTX_LMEM_RESIZE_TO_MAX";case CU_CTX_FLAGS_MASK:return "[CU_CTX_FLAGS_MASK]";case CU_CTX_SCHED_MASK:return "[CU_CTX_SCHED_MASK]";}return "INVALID CUctx_flags: " + n;}  }
class C{  public boolean isValue(){  return referenceMask == 0;}  }
class C{  public SoftValueHashMap(int initialCapacity,float loadFactor){  hash=new HashMap(initialCapacity,loadFactor);}  }
class C{  protected Double wrapKey(double k){  return new Double(k);}  }
class C{  private void forwardPublishWill(WillMessage will,String clientID){  short messageId=0;  if (will.getQos() != AbstractMessage.QOSType.MOST_ONE) {    messageId=m_sessionsStore.sessionForClient(clientID).getNextMessageId();  }}  }
class C{  public final Bag elements(){  Bag bag=new Bag();  Object[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      if (fieldx[y] != null) {        assert sim.util.LocationLog.it(this,new Int2D(x,y));        bag.add(fieldx[y]);      }    }  }  return bag;}  }
class C{  public RemoteCarrierServiceImpl(final GenericDTOService<CarrierDTO> carrierDTOGenericDTOService,final FederationFacade federationFacade){  super(carrierDTOGenericDTOService);  this.federationFacade=federationFacade;}  }
class C{  public WeightedRandomSet<T> add(T item,int weight){  WeightedRandomEntry<T> e=new WeightedRandomEntry<T>(item,weight);  int num=elements.size();  boolean isInserted=false;  if (num > 0) {    for (int i=0; i < num; i++) {      if (weight < elements.get(i).weight) {        elements.add(i,e);        isInserted=true;        break;      }    }  }  if (!isInserted) {    elements.add(e);  }  totalWeight+=weight;  return this;}  }
class C{  static public JarFile jmriJarFile(){  return FileUtilSupport.getDefault().getJmriJarFile();}  }
class C{  public MailetException(String message,Exception e){  super(message,e);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.002 -0500",hash_original_method="A3F4AD10FE1FBABD5486B6D7CD090B7A",hash_generated_method="866284A0FC5071C1D7B5954B6592A2CD") public static BigInteger norm(final byte mu,ZTauElement lambda){  BigInteger norm;  BigInteger s1=lambda.u.multiply(lambda.u);  BigInteger s2=lambda.u.multiply(lambda.v);  BigInteger s3=lambda.v.multiply(lambda.v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  private void assertUploaderManifest(UploaderInputManifestDto expectedUploaderInputManifest,UploaderInputManifestDto actualUploaderInputManifest){  assertEquals(expectedUploaderInputManifest.getBusinessObjectDefinitionName(),actualUploaderInputManifest.getBusinessObjectDefinitionName());  assertEquals(expectedUploaderInputManifest.getBusinessObjectFormatUsage(),actualUploaderInputManifest.getBusinessObjectFormatUsage());  assertEquals(expectedUploaderInputManifest.getBusinessObjectFormatFileType(),actualUploaderInputManifest.getBusinessObjectFormatFileType());  assertEquals(expectedUploaderInputManifest.getBusinessObjectFormatVersion(),actualUploaderInputManifest.getBusinessObjectFormatVersion());  assertEquals(expectedUploaderInputManifest.getPartitionKey(),actualUploaderInputManifest.getPartitionKey());  assertEquals(expectedUploaderInputManifest.getPartitionValue(),actualUploaderInputManifest.getPartitionValue());  assertTrue(expectedUploaderInputManifest.getManifestFiles().containsAll(actualUploaderInputManifest.getManifestFiles()));  assertTrue(actualUploaderInputManifest.getManifestFiles().containsAll(expectedUploaderInputManifest.getManifestFiles()));  assertEquals(expectedUploaderInputManifest.getAttributes(),actualUploaderInputManifest.getAttributes());  assertEquals(expectedUploaderInputManifest.getBusinessObjectDataParents(),actualUploaderInputManifest.getBusinessObjectDataParents());}  }
class C{  public boolean isSealed(){  if (jar != null) {    init();  }  return sealBase != null;}  }
class C{  public static String tabulate(String src,int tabsCount){  char[] tabs=new char[SPACES_IN_TAB * tabsCount];  fill(tabs,' ');  final StringBuilder builder=new StringBuilder();  final String[] lines=src.split("\n");  for (int i=0; i < lines.length - 1; i++) {    builder.append(tabs).append(lines[i]).append('\n');  }  builder.append(tabs).append(lines[lines.length - 1]);  return builder.toString();}  }
class C{  private static void canonicalizeCommutativeOperator(Instruction instr){  Operand op1=Binary.getVal1(instr);  if (op1.isConstant() && !op1.isMovableObjectConstant()) {    Operand tmp=Binary.getClearVal1(instr);    Binary.setVal1(instr,Binary.getClearVal2(instr));    Binary.setVal2(instr,tmp);  }}  }
class C{  public void revertRow(int row){  changedRows.remove(row);  fireTableRowsUpdated(row,row);}  }
class C{  public X509CertImpl(Certificate certificate){  this.certificate=certificate;  this.tbsCert=certificate.getTbsCertificate();  this.extensions=tbsCert.getExtensions();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  fullyLock();  try {    s.defaultWriteObject();    for (Node<E> p=head.next; p != null; p=p.next)     s.writeObject(p.item);    s.writeObject(null);  }  finally {    fullyUnlock();  }}  }
class C{  public boolean isExportable(){  return isExportable;}  }
class C{  public void reset(){  setSceneBounds();  rotate.setIdentity();  azimuth=0;  elevation=0;  lookAt.set(Landscape.getInstance().getCenter());  location.set(0.0,0.0,sceneBounds.getRadius());  location.addLocal(lookAt);  camera.setMagnification(BasicCamera.DEFAULT_MAGNIFICATION);  camera.setFrame(location,rotate);  camera.setLookAt(lookAt);  camera.setFrustum(sceneBounds);  updateFromCamera();  updateCrosshair();  updateGeometricState(0);  Dert.getMainWindow().updateCompass(azimuth);  updateOverlay();  changed.set(true);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 13:{        addToken(Token.PREPROCESSOR);      }case 22:    break;case 3:{    addNullToken();    return firstToken;  }case 23:break;case 16:{addToken(Token.LITERAL_CHAR);}case 24:break;case 15:{if (varDepths == null) {varDepths=new Stack();} else {varDepths.clear();}varDepths.push(Boolean.FALSE);start=zzMarkedPos - 2;yybegin(VAR);}case 25:break;case 12:{if (!varDepths.empty() && varDepths.peek() == Boolean.TRUE) {varDepths.pop();if (varDepths.empty()) {addToken(start,zzStartRead,Token.VARIABLE);yybegin(YYINITIAL);}}}case 26:break;case 11:{if (!varDepths.empty() && varDepths.peek() == Boolean.FALSE) {varDepths.pop();if (varDepths.empty()) {addToken(start,zzStartRead,Token.VARIABLE);yybegin(YYINITIAL);}}}case 27:break;case 4:{addToken(Token.WHITESPACE);}case 28:break;case 21:{addToken(Token.RESERVED_WORD);}case 29:break;case 20:{varDepths.push(Boolean.FALSE);}case 30:break;case 18:{addToken(Token.LITERAL_BACKQUOTE);}case 31:break;case 19:{varDepths.push(Boolean.TRUE);}case 32:break;case 1:{addToken(Token.IDENTIFIER);}case 33:break;case 5:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 34:break;case 6:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 35:break;case 10:{int temp1=zzStartRead;int temp2=zzMarkedPos;addToken(start,zzStartRead - 1,Token.VARIABLE);addToken(temp1,temp2 - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 36:break;case 17:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 37:break;case 14:{if (varDepths == null) {varDepths=new Stack();} else {varDepths.clear();}varDepths.push(Boolean.TRUE);start=zzMarkedPos - 2;yybegin(VAR);}case 38:break;case 7:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 39:break;case 2:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 40:break;case 8:{addToken(Token.OPERATOR);}case 41:break;case 9:{}case 42:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case VAR:{addToken(start,zzStartRead - 1,Token.VARIABLE);addNullToken();return firstToken;}case 130:break;case YYINITIAL:{addNullToken();return firstToken;}case 131:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public ServerOperation(ServerSession p,InputStream in,int request,int maxSize,ServerRequestHandler listen) throws IOException {  isAborted=false;  mParent=p;  mInput=in;  mMaxPacketLength=maxSize;  mClosed=false;  requestHeader=new HeaderSet();  replyHeader=new HeaderSet();  mPrivateInput=new PrivateInputStream(this);  mResponseSize=3;  mListener=listen;  mRequestFinished=false;  mPrivateOutputOpen=false;  mHasBody=false;  int bytesReceived;  if ((request == 0x02) || (request == 0x82)) {    mGetOperation=false;    if ((request & 0x80) == 0) {      finalBitSet=false;    } else {      finalBitSet=true;      mRequestFinished=true;    }  } else   if ((request == 0x03) || (request == 0x83)) {    mGetOperation=true;    finalBitSet=false;    if (request == 0x83) {      mRequestFinished=true;    }  } else {    throw new IOException("ServerOperation can not handle such request");  }  int length=in.read();  length=(length << 8) + in.read();  if (length > ObexHelper.MAX_PACKET_SIZE_INT) {    mParent.sendResponse(ResponseCodes.OBEX_HTTP_REQ_TOO_LARGE,null);    throw new IOException("Packet received was too large");  }  if (length > 3) {    byte[] data=new byte[length - 3];    bytesReceived=in.read(data);    while (bytesReceived != data.length) {      bytesReceived+=in.read(data,bytesReceived,data.length - bytesReceived);    }    byte[] body=ObexHelper.updateHeaderSet(requestHeader,data);    if (body != null) {      mHasBody=true;    }    if (mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null) {      mListener.setConnectionId(ObexHelper.convertToLong(requestHeader.mConnectionID));    } else {      mListener.setConnectionId(1);    }    if (requestHeader.mAuthResp != null) {      if (!mParent.handleAuthResp(requestHeader.mAuthResp)) {        mExceptionString="Authentication Failed";        mParent.sendResponse(ResponseCodes.OBEX_HTTP_UNAUTHORIZED,null);        mClosed=true;        requestHeader.mAuthResp=null;        return;      }    }    if (requestHeader.mAuthChall != null) {      mParent.handleAuthChall(requestHeader);      replyHeader.mAuthResp=new byte[requestHeader.mAuthResp.length];      System.arraycopy(requestHeader.mAuthResp,0,replyHeader.mAuthResp,0,replyHeader.mAuthResp.length);      requestHeader.mAuthResp=null;      requestHeader.mAuthChall=null;    }    if (body != null) {      mPrivateInput.writeBytes(body,1);    } else {      while ((!mGetOperation) && (!finalBitSet)) {        sendReply(ResponseCodes.OBEX_HTTP_CONTINUE);        if (mPrivateInput.available() > 0) {          break;        }      }    }  }  while ((!mGetOperation) && (!finalBitSet) && (mPrivateInput.available() == 0)) {    sendReply(ResponseCodes.OBEX_HTTP_CONTINUE);    if (mPrivateInput.available() > 0) {      break;    }  }  while (mGetOperation && !mRequestFinished) {    sendReply(ResponseCodes.OBEX_HTTP_CONTINUE);  }}  }
class C{  public static Step fromCursor(Cursor cursor){  Step step=new Step();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeInstructionsTable.PHOTO_COLUMN)) {      step.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeInstructionsTable.DESCRIPTION_COLUMN)) {      step.setDescription(cursor.getString(c));    }  }  return step;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void destroy(){  stop(ShutdownModeAmp.GRACEFUL);  if (!_lifecycle.toDestroy()) {    return;  }}  }
class C{  @Override @SuppressWarnings("unchecked") public NamedList<Object> doHighlighting(DocList docs,Query query,SolrQueryRequest req,String[] defaultFields) throws IOException {  SolrParams params=req.getParams();  if (!isHighlightingEnabled(params))   return null;  SolrIndexSearcher searcher=req.getSearcher();  IndexSchema schema=searcher.getSchema();  NamedList fragments=new SimpleOrderedMap();  String[] fieldNames=getHighlightFields(query,req,defaultFields);  Set<String> fset=new HashSet<>();{    for (    String f : fieldNames) {      fset.add(f);    }    SchemaField keyField=schema.getUniqueKeyField();    if (null != keyField)     fset.add(keyField.getName());  }  FastVectorHighlighter fvh=new FastVectorHighlighter(params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER,true),params.getBool(HighlightParams.FIELD_MATCH,false));  fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT,SolrHighlighter.DEFAULT_PHRASE_LIMIT));  FieldQuery fieldQuery=fvh.getFieldQuery(query,searcher.getIndexReader());  DocIterator iterator=docs.iterator();  for (int i=0; i < docs.size(); i++) {    int docId=iterator.nextDoc();    Document doc=searcher.doc(docId,fset);    NamedList docSummaries=new SimpleOrderedMap();    for (    String fieldName : fieldNames) {      fieldName=fieldName.trim();      if (useFastVectorHighlighter(params,schema,fieldName))       doHighlightingByFastVectorHighlighter(fvh,fieldQuery,req,docSummaries,docId,doc,fieldName); else       doHighlightingByHighlighter(query,req,docSummaries,docId,doc,fieldName);    }    String printId=schema.printableUniqueKey(doc);    fragments.add(printId == null ? null : printId,docSummaries);  }  return fragments;}  }
class C{  public static void writeln(Extent e){  writeln(e,true);}  }
class C{  public static boolean hasOptimizedTreeMapPutAll(){  return optimizedTreeMapPutAll;}  }
class C{  public When addReminder(Reminder reminder){  super.addElement(Reminder.KEY,reminder);  return this;}  }
class C{  private Bitmap processBitmap(String key,int type){  Log.d(TAG,"processBitmap - " + key);  if (type == ImageData.IMAGE_TYPE_NORMAL) {    final File f=downloadBitmapToFile(mContext,key,mFetcherParams.mHttpCacheDir);    if (f != null) {      final Bitmap bitmap=decodeSampledBitmapFromFile(f.toString(),mFetcherParams.mImageWidth,mFetcherParams.mImageHeight);      f.delete();      return bitmap;    }  } else   if (type == ImageData.IMAGE_TYPE_THUMBNAIL) {    final byte[] bitmapBytes=downloadBitmapToMemory(mContext,key,mFetcherParams.mMaxThumbnailBytes);    if (bitmapBytes != null) {      return BitmapFactory.decodeByteArray(bitmapBytes,0,bitmapBytes.length);    }  } else   if (type == ImageData.IMAGE_TYPE_LOCAL) {    final Bitmap bitmap=decodeSampledBitmapFromFile(key,mFetcherParams.mImageThumbnailWidth,mFetcherParams.mImageThumbnailHeight);    return bitmap;  }  return null;}  }
class C{  public static void ensureTableExists(final AccumuloStore store) throws StoreException {  final Connector conn=store.getConnection();  if (!conn.tableOperations().exists(store.getProperties().getTable())) {    try {      TableUtils.createTable(store);    } catch (    final TableExistsException e) {    }  }}  }
class C{  public static String serviceFromConfigFileName(String configFileName){  String prefx=ReplicationServiceManager.CONFIG_FILE_PREFIX;  String suffix=ReplicationServiceManager.CONFIG_FILE_SUFFIX;  if (configFileName.contains(prefx) && configFileName.endsWith(suffix)) {    int iP=configFileName.indexOf(prefx);    return configFileName.substring(iP + prefx.length(),configFileName.length() - suffix.length());  } else   return null;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public void removeStatement() throws IncorrectOperationException {  removeStatement(this);}  }
class C{  private void readConfiguration(){  try {    FacesContext facesContext=getContext();    HttpSession session=(HttpSession)facesContext.getExternalContext().getSession(false);    username="" + session.getAttribute("loggedInUserId");    password="" + session.getAttribute("loggedInUserPassword");    Locale currentLocale=facesContext.getViewRoot().getLocale();    this.locale=currentLocale.getLanguage();    HashMap<String,String> settings=platformService.getControllerSettings(controllerAccess.getControllerId(),new PasswordAuthentication(username,password));    items=new HashMap<String,ConfigurationItem>();    for (    String key : settings.keySet()) {      addConfigurationItem(key,settings.get(key));    }    accessItems=new LinkedList<ConfigurationItem>();    List<String> core_ps=Arrays.asList(ACCESS_PARAMETERS);    for (    String key : core_ps) {      ConfigurationItem item=getConfigurationItem(key);      if (key.equals(ControllerConfigurationKey.BSS_ORGANIZATION_ID.name())) {        item.setReadOnly(true);      }      accessItems.add(item);    }    ctrlItems=new LinkedList<ConfigurationItem>();    for (    String key : controllerAccess.getControllerParameterKeys()) {      ConfigurationItem item=getConfigurationItem(key);      ctrlItems.add(item);    }    isDirty=false;  } catch (  Throwable e) {    e.printStackTrace();    LOGGER.error("Failed to load items",e);    setErrorStatus(e);  }}  }
class C{  public void actionPerformed(ActionEvent e){  log.config(e.getActionCommand());  if (ValuePreference.NAME.equals(e.getActionCommand())) {    if (MRole.getDefault().isShowPreference())     ValuePreference.start(m_mField,getValue());    return;  } else   if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND)) {    FieldRecordInfo.start(m_mField);    return;  }  if (e.getSource() == m_button) {    m_button.setEnabled(false);    String str=startCalculator(this,m_text.getText(),m_format,m_displayType,m_title,' ');    m_text.setText(str);    m_button.setEnabled(true);    try {      fireVetoableChange(m_columnName,m_oldText,getValue());    } catch (    PropertyVetoException pve) {    }    m_text.requestFocus();  }}  }
class C{  void updateLabels(){  mStartDateView.setText(formatDate(mStartDate));  String text=mGiveForDays.getText().toString().trim();  int days=text.isEmpty() ? 0 : Integer.parseInt(text);  LocalDate lastDay=mStartDate.toLocalDate().plusDays(days - 1);  mGiveForDaysLabel.setText(days == 0 ? R.string.order_give_for_days : days == 1 ? R.string.order_give_for_day : R.string.order_give_for_days);  if (days < GIVE_FOR_DAYS_STATIC_STRINGS.length) {    mDurationLabel.setText(GIVE_FOR_DAYS_STATIC_STRINGS[days]);  } else {    mDurationLabel.setText(getResources().getString(R.string.order_duration_stop_after_date,Utils.toShortString(lastDay)));  }}  }
class C{  public static String filterBssid(String data){  String[] dataSplitArray=data.split("\\.");  return dataSplitArray[1].split(" ")[0];}  }
class C{  public static String makeTitle(){  return LAUNCHER_NAME + ' ' + LAUNCHER_VERSION;}  }
class C{  public void mouseClicked(MouseEvent e){  ((MouseListener)a).mouseClicked(e);  ((MouseListener)b).mouseClicked(e);}  }
class C{  protected static double acosine(double[] line,double[] point){  return Math.acos(cosine(line,point));}  }
class C{  @PostConstruct public void init() throws ConfigException {  try {    _pathLog.init();    super.init();  } catch (  IOException e) {    throw ConfigException.wrap(e);  }}  }
class C{  public int codePointAt(int index){  if (index < 0 || index >= count) {    throw new IndexOutOfBoundsException();  }  int s=index + offset;  return Character.codePointAt(value,s,offset + count);}  }
class C{  @Override public void paintBar(final Graphics2D g2,final BarRenderer renderer,final int row,final int column,final RectangularShape bar,final RectangleEdge base){  Paint itemPaint=renderer.getItemPaint(row,column);  Color c0=null;  if (itemPaint instanceof Color) {    c0=(Color)itemPaint;  } else {    c0=SwingTools.DARK_BLUE;  }  if (c0.getAlpha() == 0) {    return;  }  g2.setPaint(c0);  g2.fill(new Rectangle2D.Double(bar.getMinX(),bar.getMinY(),bar.getWidth(),bar.getHeight()));  if (renderer.isDrawBarOutline()) {    Stroke stroke=renderer.getItemOutlineStroke(row,column);    Paint paint=renderer.getItemOutlinePaint(row,column);    if (stroke != null && paint != null) {      g2.setStroke(stroke);      g2.setPaint(paint);      g2.draw(bar);    }  }}  }
class C{  public static void putAt(Object self,String property,Object newValue){  InvokerHelper.setProperty(self,property,newValue);}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeKeys(this);}  }
class C{  private static byte[] exposeByteArrayInputStreamBytes(ByteArrayInputStream bais){  byte[] buffer;synchronized (bais) {    byte[] buf;    int pos;    try {      buf=(byte[])BAIS_BUF.get(bais);      pos=BAIS_POS.getInt(bais);    } catch (    IllegalAccessException iae) {      throw new AssertionError(iae);    }    int available=bais.available();    if (pos == 0 && buf.length == available) {      buffer=buf;    } else {      buffer=new byte[available];      System.arraycopy(buf,pos,buffer,0,available);    }    bais.skip(available);  }  return buffer;}  }
class C{  private boolean validateAttribute(InputNode node,String key) throws Exception {  String name=style.getElement(key);  InputNode child=node.getAttribute(name);  if (child == null) {    return true;  }  return root.validate(child);}  }
class C{  public int name(){  return _name;}  }
class C{  public NotificationResult(long earliestSequenceNumber,long nextSequenceNumber,TargetedNotification[] targetedNotifications){  validate(targetedNotifications,earliestSequenceNumber,nextSequenceNumber);  this.earliestSequenceNumber=earliestSequenceNumber;  this.nextSequenceNumber=nextSequenceNumber;  this.targetedNotifications=(targetedNotifications.length == 0 ? targetedNotifications : targetedNotifications.clone());}  }
class C{  public List<MaterialRevision> rootChanges(Server server) throws MalformedURLException, IOException {  List result=new ArrayList();  addChangesRecursively(server,result);  return result;}  }
class C{  private void testGetNameFromDeployableNotSupportedFor(Deployable deployable){  try {    deployer.createIdForDeployable(deployable);    fail("should have gotten an exception");  } catch (  DeployableException e) {    assertEquals("name extraction for " + deployable.getType() + " not currently supported",e.getMessage());  }catch (  Exception e) {    fail("wrong exception type: " + e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.218 -0400",hash_original_method="DE4F68C515AD9FDEF86DCFCC83AF390E",hash_generated_method="EE825901EA78D181A0B0D954DD596287") private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  @SuppressWarnings("serial") public void testComplexJoinGroup01(){  final JoinGroupNode jgn=(JoinGroupNode)new Helper(){{      tmp=joinGroupNode(statementPatternNode(varNode(x),constantNode(b),constantNode(c)),bind(varNode(y),varNode(x)),selectSubQuery(projection(bind(varNode(z),varNode(z))),where(statementPatternNode(varNode(z),constantNode(c),varNode(o)))));    }  }.getTmp();  final Set<IVariable<?>> requiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("y"));    }  };  final Set<IVariable<?>> desiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("x"));      add(Var.var("z"));    }  };  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),null);  assertEquals(requiredBound,jgn.getRequiredBound(sa));  assertEquals(desiredBound,jgn.getDesiredBound(sa));}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  timeSeries.sort();  int size=timeSeries.size();  if (size <= 3) {    return;  }  byte[] usePoint=new byte[size];  Arrays.fill(usePoint,(byte)1);  long[] rawTimeStamps=timeSeries.getTimestampsAsArray();  double[] rawValues=timeSeries.getValuesAsArray();  timeSeries.clear();  compute(rawTimeStamps,rawValues,usePoint,tolerance);  for (int i=0; i < size; i++) {    if (usePoint[i] == 1) {      timeSeries.add(rawTimeStamps[i],rawValues[i]);    }  }  functionValueMap.add(this);}  }
class C{  public MPInstance processIt(int Record_ID,Trx trx){  return processIt(Record_ID,trx,true);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.047 -0500",hash_original_method="7B7971D2835EB2D685FF89EC3D85C02A",hash_generated_method="8CAA87DB79F0EC4C38563D4D1770A0D3") public StringBuffer(int capacity){  super(capacity);}  }
class C{  public void collapseTree(){  for (int i=1; i < tree.getRowCount(); ++i) {    tree.collapseRow(i);  }}  }
class C{  public boolean hasPointValues(){  return hasPointValues;}  }
class C{  public void changeUpDown(float radians){  if (!enabled) {    return;  }  Pointing pointing=model.getPointing();  GeocentricCoordinates pointingXyz=pointing.getLineOfSight();  GeocentricCoordinates topXyz=pointing.getPerpendicular();  Vector3 deltaXyz=Geometry.scaleVector(topXyz,-radians);  Vector3 newPointingXyz=Geometry.addVectors(pointingXyz,deltaXyz);  newPointingXyz.normalize();  Vector3 deltaUpXyz=Geometry.scaleVector(pointingXyz,radians);  Vector3 newUpXyz=Geometry.addVectors(topXyz,deltaUpXyz);  newUpXyz.normalize();  model.setPointing(newPointingXyz,newUpXyz);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  void noteUsed(Locator locator){  if (whereUsed == null && locator != null)   whereUsed=new LocatorImpl(locator);}  }
class C{  @Override public ExportGroupSearchBuilder search(){  return new ExportGroupSearchBuilder(this);}  }
class C{  public static void assertNotEquals(String itemName,short notExpected,short actual){  try {    if (notExpected == actual) {      Assert.fail(itemName + " should not be equal:<" + notExpected+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  protected void restartImpl(Result<I> result){  shutdownImpl(ShutdownModeAmp.GRACEFUL,Result.ignore());  startImpl(result);}  }
class C{  private static boolean isSorted(Comparable[] a){  return isSorted(a,0,a.length - 1);}  }
class C{  @SuppressWarnings("unchecked") public void replaceCouplings(final Attribute oldAttr,final Attribute newAttr){  for (  Coupling<?> coupling : new ArrayList<Coupling<?>>(couplingList)) {    boolean replace=false;    Producer<?> producer=coupling.getProducer();    Consumer<?> consumer=coupling.getConsumer();    if (consumer == oldAttr) {      replace=true;      consumer=(Consumer)newAttr;    }    if (producer == oldAttr) {      replace=true;      producer=(Producer)newAttr;    }    if (replace) {      removeCoupling(coupling);      try {        addCoupling(new Coupling(producer,consumer));      } catch (      UmatchedAttributesException e) {        e.printStackTrace();      }    }  }}  }
class C{  private void reset(){  isXHTML=true;  nextSlot=0;  lineBreaks=new Vector_Int();  max_rows=0;  master=0;  colorExtracted=false;}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  public void write(ByteAppendable sb,char ch) throws IOException {  if (_writer == null) {    OutputStream os;    if (sb instanceof OutputStream) {      os=(OutputStream)sb;    } else {      os=new OutputStreamAdapter(sb);    }    if (_charset != null)     _writer=new OutputStreamWriter(os,_charset); else     _writer=new OutputStreamWriter(os,_encoding);  }  _writer.write(ch);  _writer.flush();}  }
class C{  private static boolean compareStringCase(final String val,final int comparator,final String attr){  final String value=comparator == APPROX ? stripWhitespaces(val) : val;  final String attribute=comparator == APPROX ? stripWhitespaces(attr) : attr;switch (comparator) {case APPROX:case EQUALS:    return RFC1960Filter.stringCompare(value.toCharArray(),0,attribute.toCharArray(),0) == 0;case GREATER:  return RFC1960Filter.stringCompare(value.toCharArray(),0,attribute.toCharArray(),0) <= 0;case LESS:return RFC1960Filter.stringCompare(value.toCharArray(),0,attribute.toCharArray(),0) >= 0;default :throw new IllegalStateException("Found illegal comparator.");}}  }
class C{  @Override public void tearDown() throws Exception {  ctag.doEndTag();  rtag.doEndTag();  ctag=null;  rtag=null;  super.tearDown();}  }
class C{  public boolean adjustNodeLocation(DBConnection dbConnection){  if (dbConnection == null || getTreeNodeTable().length() == 0 || getNodeID() == 0)   return false;  String vendorName=dbConnection.getVendor();  String catalogName=dbConnection.getCatalog();  String schemaName=dbConnection.getSchema();  int firstSeqNo=0;  String whereClause=new StringBuffer("AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND SeqNo=").append("(SELECT MIN(seqNo) FROM ").append(getTreeNodeTable()).append(" WHERE Parent_ID=").append(getParentID()).append(" AND Node_ID!=").append(getNodeID()).append(")").toString();  String sqlCommand=s_dbEngine.sql_select(vendorName,catalogName,schemaName,getTreeNodeTable(),whereClause);  Statement stmt=dbConnection.setStatement();  ResultSet rs=dbConnection.executeQuery(stmt,sqlCommand);  if (dbConnection.getResultSetNext(rs)) {    firstSeqNo=dbConnection.getResultSetInt(rs,"SeqNo");  }  dbConnection.releaseResultSet(rs);  dbConnection.releaseStatement(stmt);  int lastSeqNo=0;  whereClause=new StringBuffer("AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND SeqNo=").append("(SELECT MAX(seqNo) FROM ").append(getTreeNodeTable()).append(" WHERE Parent_ID=").append(getParentID()).append(" AND Node_ID!=").append(getNodeID()).append(")").toString();  sqlCommand=s_dbEngine.sql_select(vendorName,catalogName,schemaName,getTreeNodeTable(),whereClause);  stmt=dbConnection.setStatement();  rs=dbConnection.executeQuery(stmt,sqlCommand);  if (dbConnection.getResultSetNext(rs)) {    lastSeqNo=dbConnection.getResultSetInt(rs,"SeqNo");  }  dbConnection.releaseResultSet(rs);  dbConnection.releaseStatement(stmt);  int previousSeqNo=0;  whereClause=new StringBuffer("AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND Node_ID=").append(getPreviousNodeID()).toString();  sqlCommand=s_dbEngine.sql_select(vendorName,catalogName,schemaName,getTreeNodeTable(),whereClause);  stmt=dbConnection.setStatement();  rs=dbConnection.executeQuery(stmt,sqlCommand);  if (dbConnection.getResultSetNext(rs)) {    previousSeqNo=dbConnection.getResultSetInt(rs,"SeqNo");  }  dbConnection.releaseResultSet(rs);  dbConnection.releaseStatement(stmt);  int nextSeqNo=0;  whereClause=new StringBuffer("AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND Node_ID=").append(getNextNodeID()).toString();  sqlCommand=s_dbEngine.sql_select(vendorName,catalogName,schemaName,getTreeNodeTable(),whereClause);  stmt=dbConnection.setStatement();  rs=dbConnection.executeQuery(stmt,sqlCommand);  if (dbConnection.getResultSetNext(rs)) {    nextSeqNo=dbConnection.getResultSetInt(rs,"SeqNo");  }  dbConnection.releaseResultSet(rs);  dbConnection.releaseStatement(stmt);  int newSeqNo=getSeqNo();  if (getNextNodeID() == 0) {    newSeqNo=lastSeqNo + 1;  } else   if (getPreviousNodeID() == 0) {    newSeqNo=firstSeqNo;  } else {    if (previousSeqNo != 0) {      newSeqNo=previousSeqNo + 1;    } else     if (nextSeqNo != 0) {      newSeqNo=nextSeqNo;    } else {      newSeqNo=getSeqNo();    }  }  boolean isOccupied=false;  whereClause=new StringBuffer("AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND Node_ID!=").append(getNodeID()).append(" AND SeqNo=").append(newSeqNo).toString();  sqlCommand=s_dbEngine.sql_select(vendorName,catalogName,schemaName,getTreeNodeTable(),whereClause);  stmt=dbConnection.setStatement();  rs=dbConnection.executeQuery(stmt,sqlCommand);  if (dbConnection.getResultSetNext(rs)) {    isOccupied=true;  }  dbConnection.releaseResultSet(rs);  dbConnection.releaseStatement(stmt);  boolean isError=false;  whereClause=new StringBuffer("AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND Node_ID=").append(getNodeID()).toString();  sqlCommand=s_dbEngine.sql_update(vendorName,catalogName,schemaName,getTreeNodeTable(),null,new ArrayList<String>(Arrays.asList("SeqNo")),new ArrayList<String>(Arrays.asList(Integer.toString(newSeqNo))),new ArrayList<String>(Arrays.asList(whereClause)));  stmt=dbConnection.setStatement();  if (dbConnection.executeUpdate(stmt,sqlCommand,true,false) == null)   isError=true;  dbConnection.releaseStatement(stmt);  if (isOccupied && !isError) {    whereClause=new StringBuffer("AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND Node_ID IN ").append("(SELECT Node_ID FROM ").append(getTreeNodeTable()).append(" WHERE AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND Node_ID!=").append(getNodeID()).append(" AND SeqNo>=").append(newSeqNo).append(")").toString();    sqlCommand=s_dbEngine.sql_update(vendorName,catalogName,schemaName,getTreeNodeTable(),null,new ArrayList<String>(Arrays.asList("SeqNo")),new ArrayList<String>(Arrays.asList("SeqNo+1")),new ArrayList<String>(Arrays.asList(whereClause)));    stmt=dbConnection.setStatement();    if (dbConnection.executeUpdate(stmt,sqlCommand,true,false) == null)     isError=true;    dbConnection.releaseStatement(stmt);  }  return !isError;}  }
class C{  protected void write(Movie movie,SWFTagTypes movieTagWriter,SWFTagTypes timelineTagWriter) throws IOException {  if (actions != null) {    SWFActions acts=timelineTagWriter.tagDoAction();    acts.start(0);    acts.blob(actions.bytes);    acts.done();  }  if (stop) {    SWFActions actions=timelineTagWriter.tagDoAction();    actions.start(0);    actions.stop();    actions.end();    actions.done();  }  for (  Placement placement : placements) {    placement.write(movie,movieTagWriter,timelineTagWriter);  }  if (label != null) {    timelineTagWriter.tagFrameLabel(label);  }  timelineTagWriter.tagShowFrame();}  }
class C{  public static void cleanInternalCache(Context context){  File directory=context.getCacheDir();  deleteFilesByDirectory(directory);}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public byte[] toByteArray(){  return polynomial.toByteArray();}  }
class C{  public static void cleanup(EvolutionState state){  state.output.flush();  PrintWriter pw=new PrintWriter(System.err);  state.parameters.getBoolean(new Parameter(P_PRINTUSEDPARAMETERS),null,false);  state.parameters.getBoolean(new Parameter(P_PRINTACCESSEDPARAMETERS),null,false);  state.parameters.getBoolean(new Parameter(P_PRINTUNUSEDPARAMETERS),null,false);  state.parameters.getBoolean(new Parameter(P_PRINTUNACCESSEDPARAMETERS),null,false);  state.parameters.getBoolean(new Parameter(P_PRINTALLPARAMETERS),null,false);  if (state.parameters.getBoolean(new Parameter(P_PRINTUSEDPARAMETERS),null,false)) {    pw.println("\n\nUsed Parameters\n===============\n");    state.parameters.listGotten(pw);  }  if (state.parameters.getBoolean(new Parameter(P_PRINTACCESSEDPARAMETERS),null,false)) {    pw.println("\n\nAccessed Parameters\n===================\n");    state.parameters.listAccessed(pw);  }  if (state.parameters.getBoolean(new Parameter(P_PRINTUNUSEDPARAMETERS),null,false)) {    pw.println("\n\nUnused Parameters\n" + "================= (Ignore parent.x references) \n");    state.parameters.listNotGotten(pw);  }  if (state.parameters.getBoolean(new Parameter(P_PRINTUNACCESSEDPARAMETERS),null,false)) {    pw.println("\n\nUnaccessed Parameters\n" + "===================== (Ignore parent.x references) \n");    state.parameters.listNotAccessed(pw);  }  if (state.parameters.getBoolean(new Parameter(P_PRINTALLPARAMETERS),null,false)) {    pw.println("\n\nAll Parameters\n==============\n");    state.parameters.list(pw,false);  }  pw.flush();  System.err.flush();  System.out.flush();  state.output.close();}  }
class C{  private Chunk listWindows(){  String[] windowNames=WindowManagerGlobal.getInstance().getViewRootNames();  int responseLength=4;  for (  String name : windowNames) {    responseLength+=4;    responseLength+=name.length() * 2;  }  ByteBuffer out=ByteBuffer.allocate(responseLength);  out.order(ChunkHandler.CHUNK_ORDER);  out.putInt(windowNames.length);  for (  String name : windowNames) {    out.putInt(name.length());    putString(out,name);  }  return new Chunk(CHUNK_VULW,out);}  }
class C{  private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (c.compare(tmp[cursor2],a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight(tmp[cursor2],a,base1,len1,len1 - 1,c);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft(a[cursor1],tmp,0,len2,len2 - 1,c);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  @Override public DispatchElement consumePathFragment(String pathFragment){  boolean acceptsPathParameter=acceptsPathParameter();  if (!acceptsPathParameter || pageInstance.getParameters().isEmpty()) {    PageAction subpage=DispatcherLogic.getSubpage(portofinoConfiguration,pageInstance,pathFragment);    if (subpage != null) {      HttpServletRequest request=ElementsThreadLocals.getHttpServletRequest();      Injections.inject(subpage,request.getServletContext(),request);      return subpage;    }  }  if (acceptsPathParameter) {    pageInstance.getParameters().add(pathFragment);    return this;  } else {    return null;  }}  }
class C{  public static InternetDomainName findTldForNameOrThrow(InternetDomainName domainName){  return checkArgumentNotNull(findTldForName(domainName).orNull(),"Domain name is not under a recognized TLD: %s",domainName.toString());}  }
class C{  public void testTableMetaData() throws Exception {  Statement stmt=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);  ResultSet rs=stmt.executeQuery("SELECT * FROM master.dbo.sysdatabases");  assertNotNull(rs);  ResultSetMetaData rsmd=rs.getMetaData();  Assert.assertEquals("master",rsmd.getCatalogName(1));  Assert.assertEquals("dbo",rsmd.getSchemaName(1));  Assert.assertEquals("sysdatabases",rsmd.getTableName(1));  stmt.close();  rs.close();}  }
class C{  public static void main(String[] args){  if (args.length == 0) {    System.err.println("Syntax: Strip infile outfile");    System.exit(-1);  }  String p2=null;  if (args.length > 1)   p2=args[1];  new Strip().strip(args[0],p2);}  }
class C{  Service(String name){  _name=name;}  }
class C{  private static double[] elements(RealMatrix re){  int k=0;  double[] res=new double[re.getRowDimension() * re.getColumnDimension()];  for (int i=0; i < re.getRowDimension(); i++) {    for (int j=0; j < re.getColumnDimension(); j++) {      res[k++]=re.getEntry(i,j);    }  }  return res;}  }
class C{  public static void saveCommand(@NotNull Command command){  PropertiesComponent propertiesComponent=PropertiesComponent.getInstance();  String historyJson=propertiesComponent.getValue(HISTORY_JSON);  List<Command> commandList;  Gson gson=new Gson();  if (historyJson != null) {    commandList=gson.fromJson(historyJson,new TypeToken<List<Command>>(){    }.getType());    while (commandList.size() >= HISTORY_COUNT) {      commandList.remove(commandList.size() - 1);    }  } else {    commandList=new ArrayList<Command>();  }  commandList.add(0,command);  historyJson=gson.toJson(commandList);  propertiesComponent.setValue(HISTORY_JSON,historyJson);}  }
class C{  public void testDurableSubReconnectFromAtoB() throws JMSException {  ActiveMQConnectionFactory bConnFactory=new ActiveMQConnectionFactory(BROKER_B_TRANSPORT_URL + "?jms.prefetchPolicy.queuePrefetch=0");  Connection bConn=bConnFactory.createConnection();  bConn.start();  Session bSession=bConn.createSession(false,Session.AUTO_ACKNOWLEDGE);  MessageConsumer bSessionConsumer=bSession.createConsumer(queue);  ActiveMQConnectionFactory aConnFactory=new ActiveMQConnectionFactory(BROKER_A_TRANSPORT_URL);  Connection aProducerConn=aConnFactory.createConnection();  aProducerConn.start();  Session aProducerSession=aProducerConn.createSession(false,Session.AUTO_ACKNOWLEDGE);  MessageProducer producer=aProducerSession.createProducer(topic);  produce(producer,aProducerSession,5);  sleep();  bSessionConsumer.close();  bSession.close();  bConn.close();  sleep();  Connection aConsumerConn=aConnFactory.createConnection();  aConsumerConn.start();  Session aConsumerSession=aConsumerConn.createSession(false,Session.AUTO_ACKNOWLEDGE);  MessageConsumer aSessionConsumer=aConsumerSession.createConsumer(queue);  sleep();  consume(aSessionConsumer,5);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:09.406 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public void onDestroy(){  closeDialog();}  }
class C{  private void addSpanWatcher(){  Spannable spannable=getText();  if (spannable.getSpans(0,spannable.length(),getClass()) != null) {    spannable.setSpan(this,0,spannable.length(),Spanned.SPAN_INCLUSIVE_INCLUSIVE);  }}  }
class C{  public static void initOfy(){}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("java.util.regex.Matcher");  sb.append("[pattern=" + pattern());  sb.append(" region=");  sb.append(regionStart() + "," + regionEnd());  sb.append(" lastmatch=");  if ((first >= 0) && (group() != null)) {    sb.append(group());  }  sb.append("]");  return sb.toString();}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public ResourceImpl(){}  }
class C{  public static boolean isJavaLangObject(String signature){  return OBJECT_SIGNATURE.equals(signature);}  }
class C{  public RobustEigenDecomposition(DoubleMatrix2D A) throws ArithmeticException {  this(A,maxIterationsDefault);}  }
class C{  public void paint(Graphics g,Shape a){}  }
class C{  public void test_MultipleOperationsInSeveralTables() throws SQLException {  int id1=numOfRecords - 1;  threadPool.runTask(createTask4(id1));  int id2=numOfRecords + 1;  threadPool.runTask(createTask5(id2));  int oldID=5;  int newID=100;  threadPool.runTask(createTask6(oldID,newID));  threadPool.join();  Statement statement=conn.createStatement();  String selectQuery="SELECT * FROM " + DatabaseCreator.TEST_TABLE1 + " WHERE id=";  ResultSet result=statement.executeQuery(selectQuery + id1);  assertFalse("The record was not deleted",result.next());  result=statement.executeQuery(selectQuery + id2);  assertTrue("The record was not inserted",result.next());  assertEquals("Wrong value of field1",DatabaseCreator.defaultString + id2,result.getString("field1"));  assertEquals("Wrong value of field2",Integer.valueOf(id2).intValue(),result.getInt("field2"));  assertEquals("Wrong value of field3",Integer.valueOf(id2).intValue(),result.getInt("field3"));  result.close();  result=statement.executeQuery(selectQuery + oldID);  assertFalse("The record was not deleted",result.next());  result.close();  result=statement.executeQuery(selectQuery + newID);  assertTrue("The record was not updated",result.next());  assertEquals("Wrong value of field1",DatabaseCreator.defaultString + newID,result.getString("field1"));  assertEquals("Wrong value of field2",Integer.valueOf(newID).intValue(),result.getInt("field2"));  assertEquals("Wrong value of field3",Integer.valueOf(newID).intValue(),result.getInt("field3"));  result.close();}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public TokenResponse build(){  return new TokenResponse(mRequest,mTokenType,mAccessToken,mAccessTokenExpirationTime,mIdToken,mRefreshToken,mScope,mAdditionalParameters);}  }
class C{  public JUnitResult build(Result result){  boolean wasSuccessful=result.wasSuccessful();  int failureCount=result.getFailureCount();  int runCount=result.getRunCount();  JUnitResult junitResult=new JUnitResult(wasSuccessful,failureCount,runCount);  List<Failure> failures=result.getFailures();  for (  Failure failure : failures) {    String descriptionMethodName=failure.getDescription().getMethodName();    String exceptionClassName=failure.getException().getClass().toString();    String message=failure.getMessage();    String trace=failure.getTrace();    boolean isAssertionError=(failure.getException() instanceof java.lang.AssertionError);    JUnitFailure junitFailure=new JUnitFailure(message,exceptionClassName,descriptionMethodName,isAssertionError,trace);    for (    StackTraceElement elem : failure.getException().getStackTrace()) {      String elemToString=elem.toString();      junitFailure.addToExceptionStackTrace(elemToString);    }    junitResult.addFailure(junitFailure);  }  return junitResult;}  }
class C{  protected double dist_of_scale(int s){  return Math.pow(m_Base,s);}  }
class C{  static public ReplicatorPlugin load(String name) throws ReplicatorException {  if (name == null)   throw new PluginException("Unable to load plugin with null name");  try {    return (ReplicatorPlugin)Class.forName(name).newInstance();  } catch (  Exception e) {    throw new PluginException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.719 -0400",hash_original_method="60588CD85133525EB441900D3924F379",hash_generated_method="832E4C766BD95727C78233D06694A8D6") private void advance(Node prev){  Node r, b;  if ((r=lastRet) != null && !r.isMatched())   lastPred=r; else   if ((b=lastPred) == null || b.isMatched())   lastPred=null; else {    Node s, n;    while ((s=b.next) != null && s != b && s.isMatched() && (n=s.next) != null && n != s)     b.casNext(s,n);  }  this.lastRet=prev;  for (Node p=prev, s, n; ; ) {    s=(p == null) ? head : p.next;    if (s == null)     break; else     if (s == p) {      p=null;      continue;    }    Object item=s.item;    if (s.isData) {      if (item != null && item != s) {        nextItem=LinkedTransferQueue.<E>cast(item);        nextNode=s;        return;      }    } else     if (item == null)     break;    if (p == null)     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=null; else     p.casNext(s,n);  }  nextNode=null;  nextItem=null;}  }
class C{  public static byte[] doubleToBytes(double d){  return longToBytes(Double.doubleToLongBits(d));}  }
class C{  public void infoOCSPException(final String message){  addInfo("An exception occurred during the OCSP retrieval process : " + message);}  }
class C{  boolean addAvfRestriction(OwlClass r){  return avfRestrictions.add(r);}  }
class C{  public void testDecodeAttributeBody() throws StunException {  char offset=0;  RealmAttribute decoded=new RealmAttribute();  char length=(char)realmValue.length();  decoded.decodeAttributeBody(realmValue.getBytes(),offset,length);  assertEquals("decode failed",realmAttribute,decoded);}  }
class C{  private Coordinate findNearestPoint(Coordinate p,Coordinate[] pts){  double minDist=Double.MAX_VALUE;  Coordinate result=null;  for (int i=0; i < pts.length; i++) {    double dist=p.distance(pts[i]);    if (i == 0 || dist < minDist) {      minDist=dist;      result=pts[i];    }  }  return result;}  }
class C{  private void generateContinentName(String mapName){  String[] s=mapName.split("_");  setContinent(Character.toString(s[0].charAt(0)).toUpperCase() + s[0].substring(1));  String country="";  for (int i=1; i < s.length; i++) {    country+=Character.toString(s[i].charAt(0)).toUpperCase() + s[i].substring(1) + " ";  }  setCountry(country.substring(0,country.length() - 1));}  }
class C{  @Override public void estimateCPTs(BayesNet bayesNet) throws Exception {  initCPTs(bayesNet);  Enumeration<Instance> enumInsts=bayesNet.m_Instances.enumerateInstances();  while (enumInsts.hasMoreElements()) {    Instance instance=enumInsts.nextElement();    updateClassifier(bayesNet,instance);  }}  }
class C{  public int size(){  return ax_map.size() + kx_map.size();}  }
class C{  public char last(){  return iter.last();}  }
class C{  private void sendTaskStateQuery(final State current,final TaskState.TaskStage stage,final Operation.CompletionHandler handler){  try {    QueryTask.QuerySpecification spec=QueryTaskUtils.buildTaskStatusQuerySpec(Class.forName(current.schedulerServiceClassName).getDeclaredClasses()[0],stage);    QueryTask query=QueryTask.create(spec).setDirect(true);    Operation queryPost=Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_QUERY_TASKS)).setBody(query).setCompletion(handler);    sendRequest(queryPost);  } catch (  ClassNotFoundException e) {    logFailure(e);  }}  }
class C{  public static void close(Closeable stream){  try {    if (stream != null) {      stream.close();    }  } catch (  IOException ignore) {    logger.logError(Log4jLogger.SYSTEM_LOG,ignore,LogMessageIdentifier.ERROR_CLOSE_RESOURCE_FAILED);  }}  }
class C{  public void onSubscribeAccountUpdates(boolean subscribe,String accountNumber) throws BrokerModelException {  try {    Account account=m_tradePersistentModel.findAccountByNumber(accountNumber);    m_accountRequests.put(accountNumber,account);    if (m_client.isConnected()) {      m_client.reqAccountUpdates(subscribe,accountNumber);    } else {      throw new BrokerModelException(0,3010,"Not conected to TWS historical account data cannot be retrieved");    }  } catch (  Exception ex) {    error(0,3290,"Error requesting Account: " + accountNumber + " Msg: "+ ex.getMessage());  }}  }
class C{  public boolean remove(final CacheKey key){  Preconditions.checkNotNull(key);  final EncodedImage encodedImage;synchronized (this) {    encodedImage=mMap.remove(key);  }  if (encodedImage == null) {    return false;  }  try {    return encodedImage.isValid();  }  finally {    encodedImage.close();  }}  }
class C{  protected TransactionBuilder initializeDevice(TransactionBuilder builder){  return builder;}  }
class C{  public OptionScanSelectionNode(OptionScanNode child0,OptionScanNode child1,OptionScanNode... otherChildren){  mChildren=new OptionScanNode[otherChildren.length + 2];  mChildren[0]=child0;  mChildren[1]=child1;  System.arraycopy(otherChildren,0,mChildren,2,otherChildren.length);  for (  OptionScanNode child : mChildren) {    child.setParent(this);  }}  }
class C{  public void learn(double epsilon,int iterLimit){  ProximalGradient pg=new ProximalGradient();  setParams(new MGMParams(pg.learnBackTrack(this,params.toMatrix1D(),epsilon,iterLimit),p,lsum));}  }
class C{  public static char[] insertAt(char[] dest,char[] src,int offset){  char[] temp=new char[dest.length + src.length - 1];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);  return temp;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public StrBuilder replaceFirst(final char search,final char replace){  if (search != replace) {    for (int i=0; i < size; i++) {      if (buffer[i] == search) {        buffer[i]=replace;        break;      }    }  }  return this;}  }
class C{  public String toString(){  return "Priority[" + getName() + "/"+ getValue()+ "]";}  }
class C{  public String objectToString(Object object){  DimIProxy action=new DimIProxy(this,IPROXY_OBJECT_TO_STRING);  action.object=object;  action.withContext();  return action.stringResult;}  }
class C{  public boolean isSetTimestamp(){  return EncodingUtils.testBit(__isset_bitfield,__TIMESTAMP_ISSET_ID);}  }
class C{  public static Object sum(Object[] self,Object initialValue){  return sum(toList(self),initialValue,false);}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=HashUtilities.hashCode(result,this.key);  return result;}  }
class C{  public String request(String pathAndParams,String body) throws Exception {  String path=null;  SolrParams params=null;  int idx=pathAndParams.indexOf('?');  if (idx > 0) {    path=pathAndParams.substring(0,idx);    params=SolrRequestParsers.parseQueryString(pathAndParams.substring(idx + 1));  } else {    path=pathAndParams;    params=new MapSolrParams(new HashMap<String,String>());  }  return request(path,params,body);}  }
class C{  public void insert(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode next=location.next;  if (next == null) {    last=ilast;  } else {    next.prev=ilast;  }  location.next=ifirst;  ilast.next=next;  ifirst.prev=location;  cache=null;  insns.removeAll(false);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  float num=getFloat(stack);  java.text.DecimalFormat formatter=new java.text.DecimalFormat(getString(stack));  return formatter.format(num);}  }
class C{  static void toast(Context context,CharSequence text,int duration){  Toast toast=Toast.makeText(context,text,duration);  toast.show();}  }
class C{  void reset(Set<Attribute> attributesToDel){  Set<String> ptsToDel=new HashSet<>();  for (  Attribute attr : attributesToDel) {    ptsToDel.add(attr.getProjectType());  }  Set<String> attrNamesToDel=new HashSet<>();  for (  String pt : ptsToDel) {    ProjectTypeDef typeDef=all.get(pt);    for (    Attribute attrDef : typeDef.getAttributes()) {      attrNamesToDel.add(attrDef.getName());    }  }  for (  String typeId : ptsToDel) {    this.all.remove(typeId);    if (this.primary.getId().equals(typeId)) {      this.primary=ProjectTypeRegistry.BASE_TYPE;      this.all.put(ProjectTypeRegistry.BASE_TYPE.getId(),ProjectTypeRegistry.BASE_TYPE);    } else {      mixins.remove(typeId);    }  }  for (  String attr : attrNamesToDel) {    this.attributeDefs.remove(attr);  }}  }
class C{  public TwoEpochDemographicModel(DemographicModel demo1,DemographicModel demo2,Parameter transitionTimeParameter,Type units){  this(TwoEpochDemographicModelParser.TWO_EPOCH_MODEL,demo1,demo2,transitionTimeParameter,units);}  }
class C{  public void userAdmin(UserAdminConfig config){  config.addCredentials(this);  POST(this.url + "/user-admin",config.toXML());}  }
class C{  @Override public void aggregate(DomainStorage otherDomainStorage){  int otherNumberOfDomains=otherDomainStorage.numberOfDomains;  if (numberOfDomains == -1) {    setNumberOfDomains(otherDomainStorage.getNumberOfDomains());  }  if (numberOfDomains != otherNumberOfDomains) {    throw new RuntimeException("Different number of " + "domains: " + numberOfDomains + " vs "+ otherNumberOfDomains);  }  for (int i=0; i < numberOfDomains; ++i) {    Map<Integer,DomainEntry> thisDomainMap=domainEntries.get(i);    Map<Integer,DomainEntry> otherDomainMap=otherDomainStorage.domainEntries.get(i);    for (    Map.Entry<Integer,DomainEntry> otherDomainMapEntry : otherDomainMap.entrySet()) {      Integer otherVertexId=otherDomainMapEntry.getKey();      DomainEntry otherDomainEntry=otherDomainMapEntry.getValue();      DomainEntry thisDomainEntry=thisDomainMap.get(otherVertexId);      if (thisDomainEntry == null) {        thisDomainMap.put(otherVertexId,otherDomainEntry);      } else {        thisDomainEntry.aggregate(otherDomainEntry);      }    }  }  countsDirty=true;}  }
class C{  public static int toInt(NibbleArray nibbles){  return toInt(nibbles.get(0),nibbles.get(1),nibbles.get(2),nibbles.get(3),nibbles.get(4),nibbles.get(5),nibbles.get(6),nibbles.get(7));}  }
class C{  public static Writer leftShift(Writer self,Object value) throws IOException {  InvokerHelper.write(self,value);  return self;}  }
class C{  @Override public String toString(){  return getTitle();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 2) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {        showFeedback("This tool can only work for shapefiles of a " + "POLYLINE or POLYGON shape-type. Tool execution " + "ceased.");        return;      } else       if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {        outputShapeType=ShapeType.POLYLINE;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            recJTSGeometries[a].setUserData(record.getRecordNumber());            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (k + 1) + " of "+ numFiles+ ": Reading data:",progress);        }      }      if (k == 0) {        g1=factory.buildGeometry(inputGeometryList);        inputGeometryList.clear();      } else {        g2=factory.buildGeometry(inputGeometryList);        updateProgress("Performing operation (progress will not be updated):",-1);        try {          outputGeometry=g1.intersection(g2);        } catch (        Exception ex) {          outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.intersection(g1,g2);        }        g1=(com.vividsolutions.jts.geom.Geometry)outputGeometry.clone();        inputGeometryList.clear();      }    }    ShapeFile output=null;    DBFWriter writer=null;    if (outputGeometry instanceof GeometryCollection) {      com.vividsolutions.jts.geom.Geometry gN0=outputGeometry.getGeometryN(0);      if (gN0 instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POLYLINE) {        outputShapeType=ShapeType.POINT;      }      output=new ShapeFile(outputFile,outputShapeType);      output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      String DBFName=output.getDatabaseFile();      writer=new DBFWriter(new File(DBFName));      writer.setFields(fields);      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      for (int a=0; a < numGeometries; a++) {        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof LineString) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=(double)FID;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=(double)FID;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          com.vividsolutions.jts.geom.Point p=(com.vividsolutions.jts.geom.Point)gN;          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.getX(),p.getY());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public StyledEditorKit(){  createInputAttributeUpdated();  createInputAttributes();}  }
class C{  public ArrayList<Phone> addAliasByName(String aliasName,String name){  if (aliasName.contains("'"))   return null;  ArrayList<Phone> res;  res=ContactsManager.getMobilePhones(ctx,name);  if (res.size() == 1) {    Phone p=res.get(0);    addOrUpdate(aliasName,p.getCleanNumber(),p.getContactName());  }  return res;}  }
class C{  void addOption(Option opt){  options.add(opt);}  }
class C{  public void writeLine() throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.writeLine()");  write(CRLF);}  }
class C{  public static void disableContext(){  logger.info("disable context and trace instrumentation");  ExecutionTraceImpl.disableContext();}  }
class C{  public static long toLong(byte[] macAddress){  return MacAddress.of(macAddress).getLong();}  }
class C{  public void paint(Graphics g){  Colours draw;  if (off)   draw=offColours; else   draw=state;  g.setColor(draw.mainColour);  g.fillRect(2,2,8,8);  g.setColor(draw.outerColour);  g.drawPolyline(xOutline,yOutline,nOutline);  g.setColor(draw.shadowColour);  g.drawLine(6,11,11,11);  g.drawLine(8,10,11,10);  g.drawLine(10,9,12,9);  g.drawLine(10,8,11,8);  g.drawLine(11,6,11,7);  g.drawLine(9,12,9,12);  g.drawLine(3,1,3,1);  g.drawLine(8,1,8,1);  g.drawLine(10,3,10,3);  g.drawLine(3,10,3,10);  g.drawLine(1,8,1,8);  g.drawLine(1,3,1,3);  g.setColor(draw.highlightColour);  g.drawLine(3,3,4,4);  g.drawPolyline(xHighlight,yHighlight,nHighlight);  g.setColor(Colours.glintColour);  g.drawLine(3,4,4,3);  if (off) {    g.setColor(OfflightColour);    g.drawPolyline(xOfflight,yOfflight,nOfflight);  }}  }
class C{  public static Object demuxArray(Object src,int[] dims){  return demuxArray(src,dims,getComponentType(src.getClass()));}  }
class C{  public ConnectionMap(String username){  super(mapTransform(filterUser(AccessValve.getAccessInformationMap(),username)));}  }
class C{  public void addAll(final Iterator<? extends T> elements) throws IOException {  addAll(elements,null);}  }
class C{  @Override public boolean remove(Object o){  if (o == null || size == 0) {    return false;  }  for (int i=0; i < size; i++) {    if (o.equals(elements[i])) {      removeAt(i);      return true;    }  }  return false;}  }
class C{  public int locateIndex(int index){  int min=0, max=m_indices.size() - 1;  if (max == -1) {    return -1;  }  while ((m_indices.get(min) <= index) && (m_indices.get(max) >= index)) {    int current=(max + min) / 2;    if (m_indices.get(current) > index) {      max=current - 1;    } else     if (m_indices.get(current) < index) {      min=current + 1;    } else {      return current;    }  }  if (m_indices.get(max) < index) {    return max;  } else {    return min - 1;  }}  }
class C{  private GameInfo parseGameLine(String line) throws EndOfGameListException {  int len=line.length();  if (len == 0) {    return null;  }  if (line.endsWith(END_MESSAGE)) {    throw new EndOfGameListException(END_MESSAGE);  }  int i=0;  while ((i < len) && (Character.isWhitespace(line.charAt(i)))) {    ++i;  }  if (i >= len) {    return null;  }  StringBuilder sb=new StringBuilder();  int j=i;  while ((j < len) && Character.isDigit(line.charAt(j))) {    sb.append(line.charAt(j));    ++j;  }  if (j >= len) {    return null;  }  if (i == j) {    return null;  }  GameInfo info=new GameInfo();  info.setId(sb.toString());  sb.delete(0,sb.length());  i=j;  while ((i < len) && Character.isWhitespace(line.charAt(i))) {    ++i;  }  if (i >= len) {    return null;  }  if (line.charAt(i) == '(') {    return parseExamGame(line,len,++i,info,sb);  } else {    return parseRegularGame(line,len,i,info,sb);  }}  }
class C{  public void testValueOfDoublePos1(){  double a=65678765876567576.98788767;  BigDecimal result=BigDecimal.valueOf(a);  String res="65678765876567576";  int resScale=0;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public JsonElement parse(String json) throws JsonSyntaxException {  return parse(new StringReader(json));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.180 -0500",hash_original_method="05E62B842D0E318583ACCB4619923A88",hash_generated_method="C819474EE6118508400B6D2AD475968F") private void requestFocus(){  mCallbackProxy.onRequestFocus();}  }
class C{  private void testAddStorageFiles(boolean useSsl) throws IOException, JAXBException, URISyntaxException {  dataBridgeWebClient.regServerAccessParamsDto.setUseSsl(useSsl);  BusinessObjectDataKey businessObjectDataKey=new BusinessObjectDataKey();  UploaderInputManifestDto manifest=getUploaderInputManifestDto();  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=new S3FileTransferRequestParamsDto();  String storageName="testStorage";  BusinessObjectDataStorageFilesCreateResponse businessObjectDataStorageFilesCreateResponse=dataBridgeWebClient.addStorageFiles(businessObjectDataKey,manifest,s3FileTransferRequestParamsDto,storageName);  assertNotNull("businessObjectDataStorageFilesCreateResponse",businessObjectDataStorageFilesCreateResponse);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(((Agent)stack.pop()).isFirstRunsOnly());}  }
class C{  public NotSupportedForBotsException(){  super("Bots are not able to use this method!");}  }
class C{  MyPoint(double x,double y){  this.x=x;  this.y=y;}  }
class C{  private void validatePaymentDateAndAmount(final Client client,final ClientCharge clientCharge,final DateTimeFormatter fmt,final LocalDate transactionDate,final BigDecimal amountPaid,final boolean requiresTransactionDateValidation,final boolean requiresTransactionAmountValidation){  final List<ApiParameterError> dataValidationErrors=new ArrayList<>();  final DataValidatorBuilder baseDataValidator=new DataValidatorBuilder(dataValidationErrors).resource(ClientApiConstants.CLIENT_CHARGES_RESOURCE_NAME);  if (clientCharge.isNotActive()) {    baseDataValidator.reset().failWithCodeNoParameterAddedToErrorCode("charge.is.not.active");    if (!dataValidationErrors.isEmpty()) {      throw new PlatformApiDataValidationException(dataValidationErrors);    }  }  if (requiresTransactionDateValidation) {    validateTransactionDateOnWorkingDay(transactionDate,clientCharge,fmt);    if (client.getActivationLocalDate() != null && transactionDate.isBefore(client.getActivationLocalDate())) {      baseDataValidator.reset().parameter(ClientApiConstants.transactionDateParamName).value(transactionDate.toString(fmt)).failWithCodeNoParameterAddedToErrorCode("transaction.before.activationDate");      throw new PlatformApiDataValidationException(dataValidationErrors);    }    if (DateUtils.isDateInTheFuture(transactionDate)) {      baseDataValidator.reset().parameter(ClientApiConstants.transactionDateParamName).value(transactionDate.toString(fmt)).failWithCodeNoParameterAddedToErrorCode("transaction.is.futureDate");      throw new PlatformApiDataValidationException(dataValidationErrors);    }  }  if (clientCharge.isWaived()) {    baseDataValidator.reset().failWithCodeNoParameterAddedToErrorCode("transaction.invalid.account.charge.is.already.waived");    if (!dataValidationErrors.isEmpty()) {      throw new PlatformApiDataValidationException(dataValidationErrors);    }  } else   if (clientCharge.isPaid()) {    baseDataValidator.reset().failWithCodeNoParameterAddedToErrorCode("transaction.invalid.account.charge.is.paid");    if (!dataValidationErrors.isEmpty()) {      throw new PlatformApiDataValidationException(dataValidationErrors);    }  }  if (requiresTransactionAmountValidation) {    final Money chargePaid=Money.of(clientCharge.getCurrency(),amountPaid);    if (!clientCharge.getAmountOutstanding().isGreaterThanOrEqualTo(chargePaid)) {      baseDataValidator.reset().failWithCodeNoParameterAddedToErrorCode("transaction.invalid.charge.amount.paid.in.access");      if (!dataValidationErrors.isEmpty()) {        throw new PlatformApiDataValidationException(dataValidationErrors);      }    }  }}  }
class C{  private boolean isChildRemoved(View child){  return ((RecyclerView.LayoutParams)child.getLayoutParams()).isItemRemoved();}  }
class C{  public boolean equals(Object object){  boolean isEqual=false;  if (object instanceof DefineFont4 && super.equals(object)) {    DefineFont4 defineFont=(DefineFont4)object;    if ((defineFont.hasFontData == this.hasFontData) && (defineFont.italic == this.italic) && (defineFont.bold == this.bold)&& (defineFont.langCode == this.langCode)&& (defineFont.smallText == this.smallText)&& equals(defineFont.fontName,this.fontName)&& Arrays.equals(defineFont.data,this.data)) {      isEqual=true;    }  }  return isEqual;}  }
class C{  WindowsWatchService(WindowsFileSystem fs) throws IOException {  long port=0L;  try {    port=CreateIoCompletionPort(INVALID_HANDLE_VALUE,0,0);  } catch (  WindowsException x) {    throw new IOException(x.getMessage());  }  this.poller=new Poller(fs,this,port);  this.poller.start();}  }
class C{  public ImageWarp(BufferedImage bi,GeoCoordTransformation transform,DataBounds imageBounds){  if (bi != null) {    iwidth=bi.getWidth();    iheight=bi.getHeight();    setGeoTrans(transform);    setImageBounds(imageBounds);    pixels=getPixels(bi,0,0,iwidth,iheight);    bi=null;  }}  }
class C{  public void readFully(byte[] buff,int len) throws IOException {  int got=IOUtils.readFully(in,buff,len);  if (got < len) {    throw new FastEOFException();  }}  }
class C{  protected void sequence_TStructField(ISerializationContext context,TStructField semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public ConcurrentSkipListMap(SortedMap<K,? extends V> m){  this.comparator=m.comparator();  initialize();  buildFromSorted(m);}  }
class C{  public CircularRedirectException(){  super();}  }
class C{  public static void logToFile(String message){  File log=new File(Environment.getExternalStorageDirectory(),"myAppLogFile.txt");  BufferedWriter out=null;  try {    out=new BufferedWriter(new FileWriter(log.getAbsolutePath(),log.exists()));    out.write(message);    out.close();  } catch (  IOException e) {  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException e) {      }    }  }}  }
class C{  private void onCommitSuccess(@NotNull final Revision revision){  String date=dateTimeFormatter.getFormattedDate(revision.getCommitTime());  String message=constant.commitMessage(revision.getId(),date);  if ((revision.getCommitter() != null && revision.getCommitter().getName() != null && !revision.getCommitter().getName().isEmpty())) {    message+=" " + constant.commitUser(revision.getCommitter().getName());  }  console.printInfo(message);  Notification notification=new Notification(message,INFO);  notificationManager.showNotification(notification);  view.setMessage("");}  }
class C{  public static CHACallGraph v(boolean includeAPI){  if (v == null || v.includeAPI != includeAPI) {    v=new CHACallGraph(includeAPI);  }  return v;}  }
class C{  protected int expectedReadsPerPut(boolean isPrimary){  return 1;}  }
class C{  private int insertDetails(){  String sql="UPDATE M_DistributionRunLine SET MinQty = 0 WHERE MinQty IS NULL AND M_DistributionRun_ID=?";  int no=DB.executeUpdateEx(sql,new Object[]{p_M_DistributionRun_ID},get_TrxName());  sql="UPDATE M_DistributionListLine SET MinQty = 0 WHERE MinQty IS NULL";  no=DB.executeUpdateEx(sql,get_TrxName());  sql="UPDATE M_DistributionList l " + "SET RatioTotal = (SELECT SUM(Ratio) FROM M_DistributionListLine ll " + " WHERE l.M_DistributionList_ID=ll.M_DistributionList_ID) "+ "WHERE EXISTS (SELECT * FROM M_DistributionRunLine rl"+ " WHERE l.M_DistributionList_ID=rl.M_DistributionList_ID"+ " AND rl.M_DistributionRun_ID=?)";  no=DB.executeUpdateEx(sql,new Object[]{p_M_DistributionRun_ID},get_TrxName());  sql="DELETE FROM T_DistributionRunDetail WHERE M_DistributionRun_ID=?";  no=DB.executeUpdateEx(sql,new Object[]{p_M_DistributionRun_ID},get_TrxName());  log.fine("insertDetails - deleted #" + no);  sql="INSERT INTO T_DistributionRunDetail " + "(M_DistributionRun_ID, M_DistributionRunLine_ID, M_DistributionList_ID, M_DistributionListLine_ID," + "AD_Client_ID,AD_Org_ID, IsActive, Created,CreatedBy, Updated,UpdatedBy,"+ "C_BPartner_ID, C_BPartner_Location_ID, M_Product_ID,"+ "Ratio, MinQty, Qty) "+ "SELECT rl.M_DistributionRun_ID, rl.M_DistributionRunLine_ID,"+ "ll.M_DistributionList_ID, ll.M_DistributionListLine_ID, "+ "rl.AD_Client_ID,rl.AD_Org_ID, rl.IsActive, rl.Created,rl.CreatedBy, rl.Updated,rl.UpdatedBy,"+ "ll.C_BPartner_ID, ll.C_BPartner_Location_ID, rl.M_Product_ID, "+ "ll.Ratio, "+ "CASE WHEN rl.MinQty > ll.MinQty THEN rl.MinQty ELSE ll.MinQty END, "+ "(ll.Ratio/l.RatioTotal*rl.TotalQty)"+ "FROM M_DistributionRunLine rl"+ " INNER JOIN M_DistributionList l ON (rl.M_DistributionList_ID=l.M_DistributionList_ID)"+ " INNER JOIN M_DistributionListLine ll ON (rl.M_DistributionList_ID=ll.M_DistributionList_ID) "+ "WHERE rl.M_DistributionRun_ID=?"+ " AND l.RatioTotal<>0 AND rl.IsActive='Y' AND ll.IsActive='Y'";  no=DB.executeUpdateEx(sql,new Object[]{p_M_DistributionRun_ID},get_TrxName());  log.fine("inserted #" + no);  return no;}  }
class C{  public List<Integer> emit(String streamId,List<Object> tuple){  return emit(streamId,(Collection<Tuple>)null,tuple);}  }
class C{  public GFElement multiply(GFElement factor) throws RuntimeException {  GF2nPolynomialElement result=new GF2nPolynomialElement(this);  result.multiplyThisBy(factor);  return result;}  }
class C{  public void resetHandshake(){  state=ForgeClientHandshakeState.HELLO;  con.unsafe().sendPacket(ForgeConstants.FML_RESET_HANDSHAKE);}  }
class C{  public synchronized boolean isRunning(){  return isRunning;}  }
class C{  private boolean isRemoteDownloadAllowed(){  return tryRepoCnt <= MAX_REPO_RETRIES || System.currentTimeMillis() >= expireTime;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("(");  sb.append("Signer: " + signerCertPath.getCertificates().get(0));  if (timestamp != null) {    sb.append("timestamp: " + timestamp);  }  sb.append(")");  return sb.toString();}  }
class C{  public Polygon(PolygonPoint p1,PolygonPoint p2,PolygonPoint p3){  p1._next=p2;  p2._next=p3;  p3._next=p1;  p1._previous=p3;  p2._previous=p1;  p3._previous=p2;  _points.add(p1);  _points.add(p2);  _points.add(p3);}  }
class C{  public BST(){}  }
class C{  private String loadEULA(){  String pathToEula=I18N.getMessage(I18N.getGUIBundle(),"gui.resource.eula_file");  String eulaText=null;  try (InputStream inputStream=Tools.getResourceInputStream(pathToEula)){    eulaText=Tools.readTextFile(inputStream);  } catch (  IOException|RepositoryException e1) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.dialog.EULADialog.cannot_open_translated_eula");    try (InputStream inputStream=Tools.getResourceInputStream(DEFAULT_EULA)){      eulaText=Tools.readTextFile(inputStream);    } catch (    IOException|RepositoryException e2) {      LogService.getRoot().log(Level.SEVERE,"com.rapidminer.gui.dialog.EULADialog.cannot_open_default_eula");    }  }  return eulaText;}  }
class C{  public boolean isAvailable(){synchronized (this) {    return mIsAvailable;  }}  }
class C{  public boolean isNativeVideoPlayerControlsIncluded(){  return impl.isNativeVideoPlayerControlsIncluded();}  }
class C{  public LnLight(String systemName,LnTrafficController tc,LnLightManager mgr){  super(systemName);  this.tc=tc;  this.mgr=mgr;  initializeLight(systemName);}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void testCase20(){  byte bBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={1,2,3,4,5,6,7};  int bSign=1;  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void processBackendClones(URI vplexUri,Map<String,String> backendVolumeGuidToVvolGuidMap){  URIQueryResultList results=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageSystemUnManagedVolumeConstraint(vplexUri),results);  List<UnManagedVolume> changedVolumes=new ArrayList<UnManagedVolume>();  Iterator<UnManagedVolume> allUnmanagedVolumes=_dbClient.queryIterativeObjects(UnManagedVolume.class,results,true);  while (allUnmanagedVolumes.hasNext()) {    UnManagedVolume unManagedVolume=allUnmanagedVolumes.next();    String isFullCopyStr=unManagedVolume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_FULL_COPY.toString());    boolean isFullCopy=(null != isFullCopyStr && Boolean.parseBoolean(isFullCopyStr));    if (isFullCopy) {      String backendFullCopySource=VplexBackendIngestionContext.extractValueFromStringSet(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.name(),unManagedVolume.getVolumeInformation());      if (backendFullCopySource != null && !backendFullCopySource.isEmpty()) {        String frontendFullCopySource=backendVolumeGuidToVvolGuidMap.get(backendFullCopySource);        StringSet replacementSet=new StringSet();        replacementSet.add(frontendFullCopySource);        unManagedVolume.putVolumeInfo(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.name(),replacementSet);        changedVolumes.add(unManagedVolume);      }    }    String hasReplicasStr=unManagedVolume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.HAS_REPLICAS.toString());    boolean hasReplicas=(null != hasReplicasStr && Boolean.parseBoolean(hasReplicasStr));    if (hasReplicas) {      StringSet backendfullCopyTargets=unManagedVolume.getVolumeInformation().get(SupportedVolumeInformation.FULL_COPIES.name());      if (backendfullCopyTargets != null && !backendfullCopyTargets.isEmpty()) {        StringSet replacementSet=new StringSet();        for (        String backendfullCopyTarget : backendfullCopyTargets) {          String frontendfullCopyTarget=backendVolumeGuidToVvolGuidMap.get(backendfullCopyTarget);          replacementSet.add(frontendfullCopyTarget);        }        unManagedVolume.putVolumeInfo(SupportedVolumeInformation.FULL_COPIES.name(),replacementSet);        changedVolumes.add(unManagedVolume);      }    }    persistUnManagedVolumes(null,changedVolumes,false);  }  persistUnManagedVolumes(null,changedVolumes,true);}  }
class C{  public void insertFirst(ASTNode node,TextEditGroup editGroup){  if (node == null) {    throw new IllegalArgumentException();  }  internalInsertAt(node,0,false,editGroup);}  }
class C{  public RdKNNDirectoryEntry(int id,ModifiableHyperBoundingBox mbr,double knnDistance){  super(id,mbr);  this.knnDistance=knnDistance;}  }
class C{  public static Collection<KeyType> all(){  return enums.all();}  }
class C{  public boolean hasUriPort(){  return uri_port != null;}  }
class C{  public synchronized void updateNCharacterStream(String columnName,java.io.Reader reader,int length) throws SQLException {  updateNCharacterStream(findColumn(columnName),reader,length);}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.520 -0500",hash_original_method="F3ABD31C8A8A675CAB7BDC7D39B74873",hash_generated_method="8B68C7DCD271490F38F6EC2B5AA72D48") public final Message obtainMessage(int what){  if (mSmHandler == null)   return null;  return Message.obtain(mSmHandler,what);}  }
class C{  public void onDestroy(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onDestroy();    }  }}  }
class C{  protected void failIf(boolean condition,String message){  if (condition)   set.fail(this,message);}  }
class C{  protected int indexFirstOf(final char[] s,final char delim){  return indexFirstOf(s,delim,0);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  } else   if (obj instanceof String) {    String theString=(String)obj;    return toString().equalsIgnoreCase(theString);  } else   if (obj instanceof MailAddress) {    MailAddress addr=(MailAddress)obj;    return getLocalPart().equalsIgnoreCase(addr.getLocalPart()) && getDomain().equalsIgnoreCase(addr.getDomain());  }  return false;}  }
class C{  java.sql.Time toSqlTime(Calendar calendar){  return new java.sql.Time(getTimeInMillis(calendar));}  }
class C{  static double fabs(double a){  return Math.abs(a);}  }
class C{  public boolean destroyFromAvailableIDs(Long position) throws InterruptedException {  boolean removedOK=false;  acquireWriteLock();  try {    removedOK=this.idsAvailable.remove(position);    if (!removedOK) {      removedOK=this.removeFromOtherLists(position);    }    if (removedOK) {      this.incrementTakeSidePutPermits();    }  }  finally {    releaseWriteLock();  }  return removedOK;}  }
class C{  @Override public void perform(IR ir){  ir.cfg.entry().clearInfrequent();  if (ir.options.REORDER_CODE_PH) {    doPettisHansenAlgo2(ir);  } else {    exileInfrequentBlocks(ir);  }}  }
class C{  public boolean isHostname(){  return _is_hostname;}  }
class C{  public void clearCanvas(){  previousPoint=null;  startPoint=null;  currentPoint=null;  lastVelocity=0;  lastWidth=0;  newBitmapCanvas(layoutLeft,layoutTop,layoutRight,layoutBottom);  postInvalidate();}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){  paint.setColor(renderer.getColor());  paint.setStyle(Style.FILL);  int length=points.size();  XYValueSeries series=(XYValueSeries)mDataset.getSeriesAt(seriesIndex);  double max=series.getMaxValue();  double coef=MAX_BUBBLE_SIZE / max;  for (int i=0; i < length; i+=2) {    double size=series.getValue(startIndex + i / 2) * coef + MIN_BUBBLE_SIZE;    drawCircle(canvas,paint,points.get(i),points.get(i + 1),(float)size);  }}  }
class C{  public final void faceToward(final Entity entity){  setDirection(getDirectionToward(entity));}  }
class C{  public static boolean evaluate(final NaviNode node,final VisibilityState visibilityState){  return node.getRawNode().isVisible() == (visibilityState == VisibilityState.VISIBLE);}  }
class C{  public static boolean isContiguousZipCode(String s){  boolean retval=false;  if (isZipCode(s)) {    if (isEmpty(s))     retval=defaultEmptyOK; else {      String normalizedZip=s.substring(0,5);      int iZip=Integer.parseInt(normalizedZip);      if ((iZip >= 96701 && iZip <= 96898) || (iZip >= 99501 && iZip <= 99950))       retval=false; else       retval=true;    }  }  return retval;}  }
class C{  private void populateMetadata(){  StringBuilder sb=new StringBuilder();  int trackTitleLength=0;  if (!TextUtils.isEmpty(mMetadata.trackTitle)) {    sb.append(mMetadata.trackTitle);    trackTitleLength=mMetadata.trackTitle.length();  }  if (!TextUtils.isEmpty(mMetadata.artist)) {    if (sb.length() != 0) {      sb.append(" - ");    }    sb.append(mMetadata.artist);  }  if (!TextUtils.isEmpty(mMetadata.albumTitle)) {    if (sb.length() != 0) {      sb.append(" - ");    }    sb.append(mMetadata.albumTitle);  }  mTrackTitle.setText(sb.toString(),TextView.BufferType.SPANNABLE);  Spannable str=(Spannable)mTrackTitle.getText();  if (trackTitleLength != 0) {    str.setSpan(new ForegroundColorSpan(0xffffffff),0,trackTitleLength,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    trackTitleLength++;  }  if (sb.length() > trackTitleLength) {    str.setSpan(new ForegroundColorSpan(0x7fffffff),trackTitleLength,sb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  }  mAlbumArt.setImageBitmap(mMetadata.bitmap);  final int flags=mTransportControlFlags;  setVisibilityBasedOnFlag(mBtnPrev,flags,RemoteControlClient.FLAG_KEY_MEDIA_PREVIOUS);  setVisibilityBasedOnFlag(mBtnNext,flags,RemoteControlClient.FLAG_KEY_MEDIA_NEXT);  setVisibilityBasedOnFlag(mBtnPlay,flags,RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE| RemoteControlClient.FLAG_KEY_MEDIA_STOP);  updatePlayPauseState(mCurrentPlayState);}  }
class C{  public boolean startDownloadAndWait(String targetUrl,long timeout){  if (targetUrl.length() == 0 || targetUrl == null) {    Log.v(LOG_TAG,"Empty or Null target url requested to DownloadManager");    return true;  }  Request request=new Request(Uri.parse(targetUrl));  long enqueue=mDownloadManager.enqueue(request);  Log.v(LOG_TAG,"Sending download request of " + targetUrl + " to DownloadManager");  long startTime=System.currentTimeMillis();  while (true) {    if ((System.currentTimeMillis() - startTime) > timeout) {      Log.v(LOG_TAG,"startDownloadAndWait timed out, failed to fetch " + targetUrl + " within "+ timeout);      return downloadSuccessful(enqueue);    }    Log.v(LOG_TAG,"Waiting for the download to finish " + targetUrl);synchronized (mDownloadMonitor) {      try {        mDownloadMonitor.wait(SHORT_TIMEOUT);      } catch (      InterruptedException e) {        e.printStackTrace();      }      if (!downloadSuccessful(enqueue)) {        continue;      }      return true;    }  }}  }
class C{  private static boolean isURL(String input){  return input.toLowerCase().startsWith("http");}  }
class C{  protected void startAndStop(URL warPingURL){  getLocalContainer().start();  PingUtils.assertPingTrue(warPingURL.getPath() + " not started",warPingURL,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse(warPingURL.getPath() + " not stopped",warPingURL,getLogger());}  }
class C{  public void execute(Runnable command,long timeout,TimeUnit unit){  submittedCount.incrementAndGet();  try {    super.execute(command);  } catch (  RejectedExecutionException rx) {    if (super.getQueue() instanceof TaskQueue) {      final TaskQueue queue=(TaskQueue)super.getQueue();      try {        if (!queue.force(command,timeout,unit)) {          submittedCount.decrementAndGet();          throw new RejectedExecutionException("Queue capacity is full.");        }      } catch (      InterruptedException x) {        submittedCount.decrementAndGet();        throw new RejectedExecutionException(x);      }    } else {      submittedCount.decrementAndGet();      throw rx;    }  }}  }
class C{  private boolean doRedundantLoadElimination(){  if (!REDUNDANT_LOAD_ELIMINATION) {    return false;  }  XField xfield=loadedFieldSet.getField(handle);  if (xfield == null) {    return false;  }  if (xfield.getSignature().equals("D") || xfield.getSignature().equals("J")) {    return false;  }  return true;}  }
class C{  public SubReqClientHandler(){}  }
class C{  public SuballocatedIntVector(int blocksize,int numblocks){  for (m_SHIFT=0; 0 != (blocksize>>>=1); ++m_SHIFT)   ;  m_blocksize=1 << m_SHIFT;  m_MASK=m_blocksize - 1;  m_numblocks=numblocks;  m_map0=new int[m_blocksize];  m_map=new int[numblocks][];  m_map[0]=m_map0;  m_buildCache=m_map0;  m_buildCacheStartIndex=0;}  }
class C{  public String toString(){  return super.toString() + "\nOffice: " + office+ "\nSalary: $"+ getSalary()+ "\nDate hired: "+ getDateHired();}  }
class C{  protected int clipCode(double degreesLatitude,double degreesLongitude){  int code=0;  code|=(degreesLatitude < this.clipDegrees[0] ? 0x0001 : 0x0);  code|=(degreesLatitude > this.clipDegrees[1] ? 0x0010 : 0x0);  code|=(degreesLongitude < this.clipDegrees[2] ? 0x0100 : 0x0);  code|=(degreesLongitude > this.clipDegrees[3] ? 0x1000 : 0x0);  return code;}  }
class C{  public TemporaryListener(@NonNull PircBotX bot){  this.bot=bot;}  }
class C{  public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Object obj){  IgniteLogger log=logRef.get();  if (log == null) {    logRef.compareAndSet(null,ctx.log(obj.getClass()));    log=logRef.get();  }  return log;}  }
class C{  private void writeFiles(){  OperationsXml.save();}  }
class C{  private void fireDataChangedOnSwingThread(DisplayHint displayHint){  updateHeader();  updateMenuItemsOnWalletChange();  if (walletsView != null) {    walletsView.displayView(displayHint);  }  Viewable currentViewView=viewFactory.getView(controller.getCurrentView());  if (currentViewView != null) {    currentViewView.displayView(displayHint);  }}  }
class C{  private void calculateYear(){  long days=_dayOfEpoch;  days+=(1970 - 1601) * 365 + (1970 - 1601) / 4 - 3;  long n400=divFloor(days,400 * 365 + 100 - 3);  days-=n400 * (400 * 365 + 100 - 3);  long n100=divFloor(days,100 * 365 + 25 - 1);  if (n100 == 4)   n100=3;  days-=n100 * (100 * 365 + 25 - 1);  long n4=divFloor(days,4 * 365 + 1);  if (n4 == 25)   n4=24;  days-=n4 * (4 * 365 + 1);  long n1=divFloor(days,365);  if (n1 == 4)   n1=3;  _year=400 * n400 + 100 * n100 + 4 * n4 + n1 + 1601;  _dayOfYear=(int)(days - 365 * n1);  _isLeapYear=isLeapYear(_year);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public HGSearchResult<HGPersistentHandle> find(HGPersistentHandle key){  if (key instanceof HGAtomRef) {    HGAtomRef ref=(HGAtomRef)key;    HGPersistentHandle pHandle=graph.getPersistentHandle(ref.getReferent());switch (ref.getMode()) {case hard:      return getHardIdx().find(pHandle);case symbolic:    return getSymbolicIdx().find(pHandle);case floating:  return getFloatingIdx().find(pHandle);}}HGPersistentHandle referent=graph.getPersistentHandle((HGHandle)key);return new UnionResult<HGPersistentHandle>(getHardIdx().find(referent),new UnionResult<HGPersistentHandle>(getSymbolicIdx().find(referent),getFloatingIdx().find(referent)));}  }
class C{  protected boolean isLockingSuspendedWithSync(){synchronized (this.suspendLock) {    return this.lockingSuspendedBy != null;  }}  }
class C{  private boolean isCoveredTwoWays(TestChromosome test,int branchIndex){  Set<Integer> trueIndexes=new HashSet<Integer>();  Set<Integer> falseIndexes=new HashSet<Integer>();  if (suite != null) {    for (    ExecutionResult execResult : this.suite.getLastExecutionResults()) {      Set<Integer> trueIndexesInTrace=execResult.getTrace().getCoveredTrueBranches();      Set<Integer> falseIndexesInTrace=execResult.getTrace().getCoveredFalseBranches();      trueIndexes.addAll(trueIndexesInTrace);      falseIndexes.addAll(falseIndexesInTrace);    }  } else {    ExecutionResult execResult=test.getLastExecutionResult();    Set<Integer> trueIndexesInTest=execResult.getTrace().getCoveredTrueBranches();    Set<Integer> falseIndexesInTest=execResult.getTrace().getCoveredFalseBranches();    trueIndexes.addAll(trueIndexesInTest);    falseIndexes.addAll(falseIndexesInTest);  }  final boolean trueIsCovered=trueIndexes.contains(branchIndex);  final boolean falseIsCovered=falseIndexes.contains(branchIndex);  return trueIsCovered && falseIsCovered;}  }
class C{  public Boolean isFullDay(){  return isFullDay;}  }
class C{  Object cloneReset() throws CloneNotSupportedException {  StrTokenizer cloned=(StrTokenizer)super.clone();  if (cloned.chars != null) {    cloned.chars=(char[])cloned.chars.clone();  }  cloned.reset();  return cloned;}  }
class C{  private boolean onComplete(){  Throwable err0=err;  if (err0 == null || tx.needCheckBackup())   tx.state(PREPARED);  if (super.onDone(tx,err0)) {    if (err0 != null)     tx.setRollbackOnly();    cctx.mvcc().removeMvccFuture(this);    return true;  }  return false;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public static boolean isFileNewer(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileNewer(file,date.getTime());}  }
class C{  public void addLocalTempTable(Table table){  if (localTempTables == null) {    localTempTables=database.newStringMap();  }  if (localTempTables.get(table.getName()) != null) {    throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1,table.getSQL());  }  localTempTables.put(table.getName(),table);}  }
class C{  public int codeSize(){  int sz=size();  if (sz == 0) {    return 0;  }  DalvInsn last=get(sz - 1);  return last.getNextAddress();}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void indexDense(DBIDRef ref,V obj){  double len=0.;  for (int dim=0, max=obj.getDimensionality(); dim < max; dim++) {    final double val=obj.doubleValue(dim);    if (val == 0. || val != val) {      continue;    }    len+=val * val;    getOrCreateColumn(dim).add(val,ref);  }  length.put(ref,Math.sqrt(len));}  }
class C{  public static <T extends CharSequence>StringMap<T> synchronize(final StringMap<T> stringMap){  return stringMap instanceof PrefixMap ? new SynchronizedPrefixMap<T>((PrefixMap<T>)stringMap) : new SynchronizedStringMap<T>(stringMap);}  }
class C{  public static void main(String[] args){  char[][] answers={{'A','B','A','C','C','D','E','E','A','D'},{'D','B','A','B','C','A','E','E','A','D'},{'E','D','D','A','C','B','E','E','A','D'},{'C','B','A','E','D','C','E','E','A','D'},{'A','B','D','C','C','D','E','E','A','D'},{'B','B','E','C','C','D','E','E','A','D'},{'B','B','A','C','C','D','E','E','A','D'},{'E','B','E','C','C','D','E','E','A','D'}};  char[] keys={'D','B','D','C','C','D','A','E','A','D'};  int[][] correctCounts=new int[answers.length][2];  for (int i=0; i < answers.length; i++) {    for (int j=0; j < answers[i].length; j++) {      if (answers[i][j] == keys[j]) {        correctCounts[i][0]=i;        correctCounts[i][1]++;      }    }  }  sort(correctCounts);  for (int row=0; row < correctCounts.length; row++) {    System.out.println("Student " + correctCounts[row][0] + "'s correct count is "+ correctCounts[row][1]);  }}  }
class C{  @Override public void generateRss(XmlWriter w,ExtensionProfile extProfile) throws IOException {  if (getType() == Content.Type.OTHER_TEXT) {    w.simpleElement(Namespaces.rssNs,"description",null,text);  } else {    generateAtom(w,extProfile);  }}  }
class C{  public static boolean parseGlobOrElement(PsiBuilder b,int l){  PsiBuilder.Marker m=b.mark();  if (PerlParserImpl.glob_primitive(b,l)) {    if (PerlParserImpl.hash_index(b,l)) {      m.done(GLOB_SLOT);    } else {      m.drop();    }    return true;  }  m.drop();  return false;}  }
class C{  public BasicStroke(float width,int cap,int join,float miterlimit){  this(width,cap,join,miterlimit,null,0.0f);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private List<Entity> listNetwork(int connID,Entity e,boolean planned){  List<Entity> novaNetworkMembers=new LinkedList<Entity>();  List<Entity> novaUnits=getMyNovaUnits(connID);  for (  Entity ent : novaUnits) {    if (planned) {      if (ent.getNewRoundNovaNetworkString() == e.getNewRoundNovaNetworkString()) {        novaNetworkMembers.add(ent);      }    } else {      if (ent.getC3NetId() == e.getC3NetId()) {        novaNetworkMembers.add(ent);      }    }  }  return novaNetworkMembers;}  }
class C{  public static OperandExpression create(final Module module,final String value,final ExpressionType type){  return new OperandExpression(module.getNative().createOperandExpression(value,type.getNative()));}  }
class C{  @Override public void debug(String format,Object... argArray){  if (logger.isLoggable(Level.FINE)) {    FormattingTuple ft=MessageFormatter.arrayFormat(format,argArray);    log(SELF,Level.FINE,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public static boolean isJWT(String data){  String[] base64=data.split("\\.");  boolean val=false;  try {    val=isBase64Encoded(base64[0]) && isBase64Encoded(base64[1]) && isBase64Encoded(base64[2]);  } catch (  IndexOutOfBoundsException e) {    return false;  }  return val;}  }
class C{  public boolean disposeThrottle(jmri.DccThrottle t,jmri.ThrottleListener l){  if (super.disposeThrottle(t,l)) {    currentThrottle=null;    return true;  }  return false;}  }
class C{  public String toString(){  return ":lang(" + lang + ')';}  }
class C{  public void testCreateAndSendTrack_send(){  EndToEndTestUtils.createSimpleTrack(1,false);  instrumentation.waitForIdleSync();  checkSendTrackToGoogle();}  }
class C{  public GeneratedPasswordSavedInfoBar(int iconDrawableId,String messageText,int inlineLinkRangeStart,int inlineLinkRangeEnd,String buttonLabel){  super(null,iconDrawableId,null,null);  mMessageText=messageText;  mInlineLinkRangeStart=inlineLinkRangeStart;  mInlineLinkRangeEnd=inlineLinkRangeEnd;  mButtonLabel=buttonLabel;}  }
class C{  public NoClassDefFoundError(){}  }
class C{  public void removeHeader(String name){  headers.remove(name);}  }
class C{  @Override public byte[] serialize(){  short padding=0;  if (paddingMap.containsKey(this.icmpType))   padding=paddingMap.get(this.icmpType);  int length=4 + padding;  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();    length+=payloadData.length;  }  byte[] data=new byte[length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.put(this.icmpType);  bb.put(this.icmpCode);  bb.putShort(this.checksum);  for (int i=0; i < padding; i++)   bb.put((byte)0);  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IpProtocol.ICMP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    for (int i=0; i < length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(2,this.checksum);  }  return data;}  }
class C{  public void ensureCapacity(int minCapacity){  elements=cern.colt.Arrays.ensureCapacity(elements,minCapacity);}  }
class C{  public void rejectInvitation() throws RcsPersistentStorageException, RcsPermissionDeniedException, RcsGenericException {  try {    mTransferInf.rejectInvitation();  } catch (  Exception e) {    RcsUnsupportedOperationException.assertException(e);    RcsPersistentStorageException.assertException(e);    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void aliasField(final String alias,final Class<?> definedIn,final String fieldName){  if (fieldAliasingMapper == null) {    throw new InitializationException("No " + FieldAliasingMapper.class.getName() + " available");  }  fieldAliasingMapper.addFieldAlias(alias,definedIn,fieldName);}  }
class C{  private List<Overlay> adjustOverlays(){  final List<Overlay> adjustedOverlays=new ArrayList<Overlay>();  final List<Overlay> overlays=getAllOverlays();  for (  Overlay overlay : overlays) {    final long overlayStartTimeMs;    if (overlay.getStartTime() > getDuration()) {      overlayStartTimeMs=0;    } else {      overlayStartTimeMs=overlay.getStartTime();    }    final long overlayDurationMs;    if (overlayStartTimeMs + overlay.getDuration() > getDuration()) {      overlayDurationMs=getDuration() - overlayStartTimeMs;    } else {      overlayDurationMs=overlay.getDuration();    }    if (overlayStartTimeMs != overlay.getStartTime() || overlayDurationMs != overlay.getDuration()) {      overlay.setStartTimeAndDuration(overlayStartTimeMs,overlayDurationMs);      adjustedOverlays.add(overlay);    }  }  return adjustedOverlays;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MRC");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  public String escapeDN(String name){  StringBuilder sb=new StringBuilder();  if ((name.length() > 0) && ((name.charAt(0) == ' ') || (name.charAt(0) == '#'))) {    sb.append('\\');  }  for (int i=0; i < name.length(); i++) {    char curChar=name.charAt(i);switch (curChar) {case '\\':      sb.append("\\\\");    break;case ',':  sb.append("\\,");break;case '+':sb.append("\\+");break;case '"':sb.append("\\\"");break;case '<':sb.append("\\<");break;case '>':sb.append("\\>");break;case ';':sb.append("\\;");break;default :sb.append(curChar);}}if ((name.length() > 1) && (name.charAt(name.length() - 1) == ' ')) {sb.insert(sb.length() - 1,'\\');}return sb.toString();}  }
class C{  public boolean isControlClusterUpgradable(){  ClusterInfo.ClusterState state=_coordinator.getControlNodesState();  return (state != null && (state.equals(ClusterInfo.ClusterState.STABLE) || state.equals(ClusterInfo.ClusterState.INITIALIZING)));}  }
class C{  boolean success(){  return success;}  }
class C{  public static double RHrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum,double precision){  double expectedResult;  double predictedValue;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double sumOfHits=0.0;  int len=dvValues.length;  if (precision < 0.0) {    precision=-precision;    System.err.println("Warning: precision (" + precision + ") < 0 in call to RHfitness, setting to -precision.");  }  for (int i=0; i < len; i++) {    predictedValue=ind.eval(chromosomeNum,useTrainingData,i);    expectedResult=dvValues[i];    if (expectedResult == 0.0) {      expectedResult=RELATIVE_ERROR_ZERO_FACTOR;      predictedValue+=RELATIVE_ERROR_ZERO_FACTOR;      System.err.println("Warning: expected result = 0 in calculation of RHfitness, adjusting to avoid division by zero.");    }    if (Math.abs(((predictedValue - expectedResult) / expectedResult) * 100.0) <= precision)     sumOfHits+=1.0;  }  return sumOfHits;}  }
class C{  public FilterColorSpinnerAdapter(Context context){  super(context,layoutID);  this.colorValuesList=new ArrayList<>();  this.layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}  }
class C{  public void recordMirrorOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){  try {    boolean opStatus=(Operation.Status.ready == status) ? true : false;    String evType;    evType=opType.getEvType(opStatus);    String evDesc=opType.getDescription();    String opStage=AuditLogManager.AUDITOP_END;    _logger.info("opType: {} detail: {}",opType.toString(),evType.toString() + ':' + evDesc);    recordBourneMirrorEvent(dbClient,getId(),evType,status,evDesc);switch (opType) {case CREATE_FILE_MIRROR:case START_FILE_MIRROR:case SUSPEND_FILE_MIRROR:case DETACH_FILE_MIRROR:case PAUSE_FILE_MIRROR:case RESUME_FILE_MIRROR:case FAILOVER_FILE_MIRROR:case STOP_FILE_MIRROR:case FAILBACK_FILE_MIRROR:case RESYNC_FILE_MIRROR:case REFRESH_FILE_MIRROR:case MODIFY_FILE_MIRROR_RPO:      auditFile(dbClient,opType,opStatus,opStage,extParam);    break;default :  _logger.error("unrecognized Mirror operation type");}} catch (Exception e) {_logger.error("Failed to record Mirror operation {}, err: {}",opType.toString(),e);}}  }
class C{  public T caseAnonymous_guard_2_(Anonymous_guard_2_ object){  return null;}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  private boolean rangeCheck(final int aoff,final int alen){  if (aoff < 0)   throw new IndexOutOfBoundsException();  if (alen < 0)   throw new IndexOutOfBoundsException();  if ((aoff + alen) > len) {    throw new IndexOutOfBoundsException();  }  return true;}  }
class C{  protected File createDirectory(File parent,String directoryName){  File tempDirectory=new File(parent,directoryName);  tempDirectory.mkdirs();  tempDirectory.deleteOnExit();  return tempDirectory;}  }
class C{  public Address toAddress(NetworkParameters params){  return new Address(params,getPubKeyHash());}  }
class C{  protected static String[] ensureEssentialFieldsIncluded(String[] fields){  if (fields != null && fields.length > 0) {    Set<String> f=new HashSet<String>();    for (    String s : fields)     f.add(s);    f.add(CollectionSchema.id.getSolrFieldName());    f.add(CollectionSchema.load_date_dt.getSolrFieldName());    fields=f.toArray(new String[f.size()]);  }  return fields;}  }
class C{  public MysqlDriverManagerDataSource(String url,Properties conProps){  setUrl(url);  setConnectionProperties(conProps);}  }
class C{  public long total(){  return this.total;}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_text_DecimalFormatSymbols(){  try {    DecimalFormatSymbols dfs=new DecimalFormatSymbols(Locale.CANADA);    DecimalFormat format1=new DecimalFormat("'$'1000.0000",dfs);    DecimalFormat format2=new DecimalFormat();    format2.applyPattern("'$'1000.0000");    format2.setDecimalFormatSymbols(dfs);    assertTrue("Constructed format did not match applied format object",format2.equals(format1));    assertTrue("Constructed format did not match applied format object",!format1.equals(new DecimalFormat("'$'1000.0000",new DecimalFormatSymbols(Locale.CHINA))));    try {      new DecimalFormat("'$'1000.0000",(DecimalFormatSymbols)null);      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }    try {      new DecimalFormat(null,new DecimalFormatSymbols());      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }    try {      new DecimalFormat(null,(DecimalFormatSymbols)null);      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }    try {      new DecimalFormat("$'",new DecimalFormatSymbols());      fail("Expected IllegalArgumentException was not thrown");    } catch (    IllegalArgumentException e) {    }  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:59.518 -0500",hash_original_method="C83F44B9F19EF99C9FE0202DE345EC32",hash_generated_method="744132E1B36703B77D181E917FFD7267") private static boolean matchDns(X509Certificate certificate,String thisDomain){  boolean hasDns=false;  try {    Collection subjectAltNames=certificate.getSubjectAlternativeNames();    if (subjectAltNames != null) {      Iterator i=subjectAltNames.iterator();      while (i.hasNext()) {        List altNameEntry=(List)(i.next());        if (altNameEntry != null && 2 <= altNameEntry.size()) {          Integer altNameType=(Integer)(altNameEntry.get(0));          if (altNameType != null) {            if (altNameType.intValue() == ALT_DNS_NAME) {              hasDns=true;              String altName=(String)(altNameEntry.get(1));              if (altName != null) {                if (matchDns(thisDomain,altName)) {                  return true;                }              }            }          }        }      }    }  } catch (  CertificateParsingException e) {    String errorMessage=e.getMessage();    if (errorMessage == null) {      errorMessage="failed to parse certificate";    }    Log.w(TAG,"DomainNameValidator.matchDns(): " + errorMessage);    return false;  }  if (!hasDns) {    final String cn=new DNParser(certificate.getSubjectX500Principal()).find("cn");    if (LOG_ENABLED) {      Log.v(TAG,"Validating subject: DN:" + certificate.getSubjectX500Principal().getName(X500Principal.CANONICAL) + "  CN:"+ cn);    }    if (cn != null) {      return matchDns(thisDomain,cn);    }  }  return false;}  }
class C{  @Override public void mousePressed(MouseEvent e){  if (!slider.isEnabled()) {    return;  }  currentMouseX=e.getX();  currentMouseY=e.getY();  if (slider.isRequestFocusEnabled()) {    slider.requestFocus();  }  if (thumbRect.contains(currentMouseX,currentMouseY)) {    super.mousePressed(e);  } else {switch (slider.getOrientation()) {case JSlider.VERTICAL:      slider.setValue(valueForYPosition(currentMouseY));    break;case JSlider.HORIZONTAL:  slider.setValue(valueForXPosition(currentMouseX));break;}}}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Playlist p=getPlaylist(stack);  return p == null ? "" : p.getName();}  }
class C{  public void init(File sqlFile,String sqlDefsSection,Connection conn,Map<String,String> configParameters) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  Document sqlDoc=builder.parse(sqlFile);  init(sqlDoc,sqlDefsSection,conn,configParameters);}  }
class C{  protected COPACModel computeLocalModel(DBIDRef id,DoubleDBIDList knnneighbors,Relation<V> relation){  SortedEigenPairs epairs=settings.pca.processIds(knnneighbors,relation).getEigenPairs();  int pdim=settings.filter.filter(epairs.eigenValues());  PCAFilteredResult pcares=new PCAFilteredResult(epairs,pdim,1.,0.);  double[][] mat=pcares.similarityMatrix();  double[] vecP=relation.get(id).toArray();  if (pdim == vecP.length) {    return new COPACModel(pdim,DBIDUtil.EMPTYDBIDS);  }  HashSetModifiableDBIDs survivors=DBIDUtil.newHashSet();  for (DBIDIter neighbor=relation.iterDBIDs(); neighbor.valid(); neighbor.advance()) {    double[] diff=minusEquals(relation.get(neighbor).toArray(),vecP);    double cdistP=transposeTimesTimes(diff,mat,diff);    if (cdistP <= epsilonsq) {      survivors.add(neighbor);    }  }  return new COPACModel(pdim,survivors);}  }
class C{  private static boolean loadXformFromCache(final Activity callingActivity,final EventBus eventBus,final String uuidToShow,final int requestCode,@Nullable final org.odk.collect.android.model.Patient patient,@Nullable final Preset fields){  List<OpenMrsXformIndexEntry> entries=getLocalFormEntries();  OpenMrsXformIndexEntry formToShow=findUuid(entries,uuidToShow);  if (!formToShow.makeFileForForm().exists())   return false;  LOG.i(format("Using form %s from local cache.",uuidToShow));  showForm(callingActivity,eventBus,requestCode,patient,fields,formToShow);  return true;}  }
class C{  protected void log(int type,Object message,Throwable t){  StringBuffer buf=new StringBuffer();  if (showDateTime) {    buf.append(dateFormatter.format(new Date()));    buf.append(" ");  }switch (type) {case SimpleLog.LOG_LEVEL_TRACE:    buf.append("[TRACE] ");  break;case SimpleLog.LOG_LEVEL_DEBUG:buf.append("[DEBUG] ");break;case SimpleLog.LOG_LEVEL_INFO:buf.append("[INFO] ");break;case SimpleLog.LOG_LEVEL_WARN:buf.append("[WARN] ");break;case SimpleLog.LOG_LEVEL_ERROR:buf.append("[ERROR] ");break;case SimpleLog.LOG_LEVEL_FATAL:buf.append("[FATAL] ");break;}if (showShortName) {if (shortLogName == null) {shortLogName=logName.substring(logName.lastIndexOf(".") + 1);shortLogName=shortLogName.substring(shortLogName.lastIndexOf("/") + 1);}buf.append(String.valueOf(shortLogName)).append(" - ");} else if (showLogName) {buf.append(String.valueOf(logName)).append(" - ");}buf.append(String.valueOf(message));if (t != null) {buf.append(" <");buf.append(t.toString());buf.append(">");java.io.StringWriter sw=new java.io.StringWriter(1024);java.io.PrintWriter pw=new java.io.PrintWriter(sw);t.printStackTrace(pw);pw.close();buf.append(sw.toString());}write(buf);}  }
class C{  private void enqueueRepaint(int top,int bottom){  ListIterator<Integer> i=tops.listIterator();  ListIterator<Integer> j=bottoms.listIterator();  if (!i.hasNext()) {    Insets insets=getInsets();    repaint(insets.left + frw,insets.top + frw + top,getWidth() - insets.left - insets.right- frw * 2,bottom - top);  }  while (i.hasNext()) {    int etop=i.next();    int ebtm=j.next();    if (top < etop) {      if (bottom > ebtm) {        i.remove();        j.remove();      } else {        bottom=Math.min(bottom,etop);      }    } else     if (bottom > ebtm) {      top=Math.max(top,ebtm);    } else {      return;    }  }  tops.add(top);  bottoms.add(bottom);}  }
class C{  private static boolean isPrintable(int c){  return c > 31 && c < 127;}  }
class C{  public <T>T cached(){  T ret=(T)delegate.cached();  return ret;}  }
class C{  public static List<String> toList(String s){  List<String> newList=new LinkedList<String>();  if (s.startsWith("[") && s.endsWith("]")) {    s=s.substring(1,s.length() - 1);    String[] entries=s.split("\\,\\s");    for (    String entry : entries) {      newList.add(entry);    }  } else {    throw new IllegalArgumentException("String is not from List.toString()");  }  return newList;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public ComparatorBasic(int[] aiOrderBy){  m_aiOrderBy=aiOrderBy;}  }
class C{  public SparseVector(int d){  this.d=d;  this.st=new ST<Integer,Double>();}  }
class C{  private IntegerPolynomial MGF(byte[] seed,int N,int minCallsR,boolean hashSeed){  Digest hashAlg=params.hashAlg;  int hashLen=hashAlg.getDigestSize();  byte[] buf=new byte[minCallsR * hashLen];  byte[] Z=hashSeed ? calcHash(hashAlg,seed) : seed;  int counter=0;  while (counter < minCallsR) {    hashAlg.update(Z,0,Z.length);    putInt(hashAlg,counter);    byte[] hash=calcHash(hashAlg);    System.arraycopy(hash,0,buf,counter * hashLen,hashLen);    counter++;  }  IntegerPolynomial i=new IntegerPolynomial(N);  while (true) {    int cur=0;    for (int index=0; index != buf.length; index++) {      int O=(int)buf[index] & 0xFF;      if (O >= 243) {        continue;      }      for (int terIdx=0; terIdx < 4; terIdx++) {        int rem3=O % 3;        i.coeffs[cur]=rem3 - 1;        cur++;        if (cur == N) {          return i;        }        O=(O - rem3) / 3;      }      i.coeffs[cur]=O - 1;      cur++;      if (cur == N) {        return i;      }    }    if (cur >= N) {      return i;    }    hashAlg.update(Z,0,Z.length);    putInt(hashAlg,counter);    byte[] hash=calcHash(hashAlg);    buf=hash;    counter++;  }}  }
class C{  public void initializeStatusResistancesList(Map<StatusType,Double> resistanceList){}  }
class C{  public static int ENOMEM(){  return Errno.ENOMEM.intValue();}  }
class C{  public static String linkHTML(String text){  if (text == null || text.length() == 0) {    return "";  }  boolean http=text.indexOf("http") != -1;  boolean www=text.indexOf("www.") != -1;  boolean email=text.indexOf("@") != -1;  if (!http && !www && !email) {    return text;  }  if (text.indexOf("<") != -1 && text.indexOf(">") != -1) {    return text;  }  if (http) {    Matcher matcher=httpRegex.matcher(text);    StringBuffer sb=new StringBuffer();    while (matcher.find()) {      String url=matcher.group();      if (url.indexOf(".png") != -1 || url.indexOf(".jpg") != -1 || url.indexOf(".jpeg") != -1 || url.indexOf(".gif") != -1) {        url="<a href='" + url + "' target='_blank'><img src='"+ url+ "' height='50'></a>";      } else       if (url.indexOf(".mp4") != -1 || url.indexOf(".webm") != -1 || url.indexOf(".ogg") != -1) {        url="<a href='" + url + "' target='_blank'><video src='"+ url+ "' height='50'></a>";      } else       if (url.indexOf(".wav") != -1 || url.indexOf(".mp3") != -1) {        url="<a href='" + url + "' target='_blank'><audio src='"+ url+ "' controls>audio</a>";      } else {        url="<a href='" + url + "' target='_blank'>"+ url+ "</a>";      }      matcher.appendReplacement(sb,url);    }    matcher.appendTail(sb);    text=sb.toString();  } else   if (www) {    Matcher matcher=wwwRegex.matcher(text);    StringBuffer sb=new StringBuffer();    while (matcher.find()) {      String url=matcher.group();      matcher.appendReplacement(sb,"<a href='http://" + url + "' target='_blank'>"+ url+ "</a>");    }    matcher.appendTail(sb);    text=sb.toString();  }  if (email) {    Matcher matcher=emailRegex.matcher(text);    StringBuffer sb=new StringBuffer();    while (matcher.find()) {      String address=matcher.group();      matcher.appendReplacement(sb,"<a href='mailto://" + address + "' target='_blank'>"+ address+ "</a>");    }    matcher.appendTail(sb);    text=sb.toString();  }  return text;}  }
class C{  public JsonPrimitive(Character c){  setValue(c);}  }
class C{  public static void print(int[][] m){  for (int i=0; i < m.length; i++) {    for (int j=0; j < m[i].length; j++) {      System.out.print(m[i][j]);    }    System.out.println();  }}  }
class C{  private ImageDescriptor createImageDescriptor(String imageFilePath){  ImageDescriptor imageDescriptor=AbstractUIPlugin.imageDescriptorFromPlugin(PLUGINID,imageFilePath);  if (imageDescriptor != null) {    getImageDescriptorRegistry().put(imageFilePath,imageDescriptor);  } else {    imageDescriptor=ImageDescriptor.getMissingImageDescriptor();  }  return imageDescriptor;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.036 -0500",hash_original_method="927B2B273DA104E012B994771AF82E33",hash_generated_method="927B2B273DA104E012B994771AF82E33") DatagramPacket _newDatagram(DatagramPacket datagram,byte[] data){  data[0]=0;  data[1]=(byte)_type;  data[2]=(byte)((_blockNumber & 0xffff) >> 8);  data[3]=(byte)(_blockNumber & 0xff);  datagram.setAddress(_address);  datagram.setPort(_port);  datagram.setData(data);  datagram.setLength(4);  return datagram;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private double[] exogenousData(TetradMatrix cholesky,RandomUtil randomUtil){  double exoData[]=new double[cholesky.rows()];  for (int i=0; i < exoData.length; i++) {    exoData[i]=randomUtil.nextNormal(0,1);  }  double point[]=new double[exoData.length];  for (int i=0; i < exoData.length; i++) {    double sum=0.0;    for (int j=0; j <= i; j++) {      sum+=cholesky.get(i,j) * exoData[j];    }    point[i]=sum;  }  return point;}  }
class C{  public Matrix4f reflection(Vector3fc normal,Vector3fc point){  return reflection(normal.x(),normal.y(),normal.z(),point.x(),point.y(),point.z());}  }
class C{  public void run() throws FileNotFoundException {  if (!enabled)   return;  timer.start();  fp=new PrintStream(Project.v().getOutputDir() + "/catch_blocks.json");  fp.printf("{\n");  fp.printf("  %s,\n",json_field("indicator-type","Catch Blocks"));  fp.printf("  %s {\n",json_field("visibility"));  fp.printf("    %s,\n",json_field("direct-call",true));  fp.printf("    %s,\n",json_field("call-chain",false));  fp.printf("    %s\n",json_field("syscall",true));  fp.printf("  },\n");  fp.printf("  %s {\n",json_field("display"));  fp.printf("    %s,\n",json_field("calls",false));  fp.printf("    %s,\n",json_field("syscalls",false));  fp.printf("    %s\n",json_field("score",false));  fp.printf("  },\n");  fp.printf(" %s [\n",json_field("contents"));  for (  SootClass clz : Scene.v().getClasses()) {    if (!Project.v().isSrcClass(clz.toString()))     continue;    logger.info("processing class {}",clz);    if (filter_source && !clz.getShortName().equals("FetchForecast")) {      logger.info("skipping class {}",clz);      continue;    }    for (    SootMethod method : clz.getMethods()) {      if (filter_source && !method.getName().equals("run")) {        logger.info("  skipping method {}",method);        continue;      }      if (method.isConcrete()) {        proc_method(method);      }    }  }  fp.println("  {}");  if (timeout())   fp.printf("], %s}\n",json_field("timeout",true)); else   fp.println("]}");  fp.close();  timer.stop();}  }
class C{  private boolean isOutsideDocElem(){  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);}  }
class C{  ArgusService(ArgusHttpClient client){  if (client == null) {    throw new IllegalArgumentException("The HTTP client cannot be null.");  }  _client=client;}  }
class C{  public void markAsProcessed(Object element){  fProcessedElements.add(element);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public CouchbaseMessage message(){  return message;}  }
class C{  public synchronized Enumeration keys(){  return new CacheEnumerator(table,true);}  }
class C{  private void logFailure(Throwable e){  ServiceUtils.logSevere(this,e);}  }
class C{  public static String entitySpecificCacheKey(final String entityId,final String cacheKey){  return entityId + "." + cacheKey;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.954 -0400",hash_original_method="1288124DBF43C46402FB70C838950E72",hash_generated_method="AF1DB86BCA89272EBF3D0D2068FF9ECA") @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public void adjustCostDetail(MCostDetail costDetail){  Properties ctx=costDetail.getCtx();  String trxName=costDetail.get_TrxName();  int transactionId=costDetail.getM_Transaction_ID();  int clientId=costDetail.getAD_Client_ID();  MTransaction transaction=new MTransaction(ctx,transactionId,trxName);  MCostType costType=(MCostType)costDetail.getM_CostType();  MCostElement costElement=(MCostElement)costDetail.getM_CostElement();  MAcctSchema accountSchema=(MAcctSchema)costDetail.getC_AcctSchema();  CostEngineFactory.getCostEngine(accountSchema.getAD_Client_ID()).clearAccounting(accountSchema,transaction);  if (MTransaction.MOVEMENTTYPE_VendorReceipts.equals(transaction.getMovementType())) {    MInOutLine line=(MInOutLine)transaction.getDocumentLine();    if (MCostElement.COSTELEMENTTYPE_Material.equals(costElement.getCostElementType())) {      if (costDetail.getM_InOutLine_ID() > 0 && costDetail.getQty().signum() != 0) {        CostEngineFactory.getCostEngine(clientId).createCostDetail(accountSchema,costType,costElement,transaction,line,true);      } else       if (costDetail.getM_InOutLine_ID() > 0 && costDetail.getQty().signum() != 0 && costDetail.getC_OrderLine_ID() > 0) {        List<MMatchPO> orderMatches=MMatchPO.getInOutLine(line);        for (        MMatchPO match : orderMatches) {          if (match.getM_InOutLine_ID() == line.getM_InOutLine_ID() && match.getM_Product_ID() == transaction.getM_Product_ID()) {            CostEngineFactory.getCostEngine(clientId).createCostDetail(accountSchema,costType,costElement,transaction,match,true);          }        }      } else       if (costDetail.getM_InOutLine_ID() > 0 && costDetail.getQty().signum() == 0 && costDetail.getC_InvoiceLine_ID() > 0) {        List<MMatchInv> invoiceMatches=MMatchInv.getInOutLine(line);        for (        MMatchInv match : invoiceMatches) {          if (match.getM_Product_ID() == transaction.getM_Product_ID()) {            CostEngineFactory.getCostEngine(clientId).createCostDetail(accountSchema,costType,costElement,transaction,match,true);          }        }      }    }    for (    MLandedCostAllocation allocation : MLandedCostAllocation.getOfInOuline(line,costElement.getM_CostElement_ID())) {      CostEngineFactory.getCostEngine(clientId).createCostDetail(accountSchema,costType,costElement,transaction,allocation,true);    }  } else   CostEngineFactory.getCostEngine(clientId).createCostDetail(accountSchema,costType,costElement,transaction,transaction.getDocumentLine(),true);}  }
class C{  private Paint createTexture(int textureId,Color foreground,Color background){  BufferedImage img=new BufferedImage(SIZE,SIZE,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2d=img.createGraphics();  Rectangle2D rec=new Rectangle2D.Float(0,0,SIZE,SIZE);  Paint paint=null;  boolean ok=false;  if (background != null) {    g2d.setColor(background);    g2d.fillRect(0,0,SIZE,SIZE);  }  if (foreground == null)   g2d.setColor(Color.black); else   g2d.setColor(foreground);  if (textureId == WMFConstants.HS_VERTICAL) {    for (int i=0; i < 5; i++) {      g2d.drawLine(i * 10,0,i * 10,SIZE);    }    ok=true;  } else   if (textureId == WMFConstants.HS_HORIZONTAL) {    for (int i=0; i < 5; i++) {      g2d.drawLine(0,i * 10,SIZE,i * 10);    }    ok=true;  } else   if (textureId == WMFConstants.HS_BDIAGONAL) {    for (int i=0; i < 5; i++) {      g2d.drawLine(0,i * 10,i * 10,0);    }    ok=true;  } else   if (textureId == WMFConstants.HS_FDIAGONAL) {    for (int i=0; i < 5; i++) {      g2d.drawLine(0,i * 10,SIZE - i * 10,SIZE);    }    ok=true;  } else   if (textureId == WMFConstants.HS_DIAGCROSS) {    for (int i=0; i < 5; i++) {      g2d.drawLine(0,i * 10,i * 10,0);      g2d.drawLine(0,i * 10,SIZE - i * 10,SIZE);    }    ok=true;  } else   if (textureId == WMFConstants.HS_CROSS) {    for (int i=0; i < 5; i++) {      g2d.drawLine(i * 10,0,i * 10,SIZE);      g2d.drawLine(0,i * 10,SIZE,i * 10);    }    ok=true;  }  img.flush();  if (ok)   paint=new TexturePaint(img,rec);  return paint;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  Point theScreenResolution=new Point();  display.getSize(theScreenResolution);  screenResolution=theScreenResolution;  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  private void createConstellationToTribitMap(){  INPUT_FROM_CONSTELLATION_MAP=new HashMap<Con,Tribit[]>();  INPUT_FROM_CONSTELLATION_MAP.put(Con.CB,new Tribit[]{null,null,Tribit.T5,Tribit.T3,Tribit.T1,Tribit.T7,null,null});  INPUT_FROM_CONSTELLATION_MAP.put(Con.CC,new Tribit[]{Tribit.T3,Tribit.T1,null,null,null,null,Tribit.T7,Tribit.T5});  INPUT_FROM_CONSTELLATION_MAP.put(Con.C0,new Tribit[]{Tribit.T0,Tribit.T6,null,null,null,null,Tribit.T4,Tribit.T2});  INPUT_FROM_CONSTELLATION_MAP.put(Con.C7,new Tribit[]{null,null,Tribit.T6,Tribit.T4,Tribit.T2,Tribit.T0,null,null});  INPUT_FROM_CONSTELLATION_MAP.put(Con.CE,new Tribit[]{Tribit.T7,Tribit.T5,null,null,null,null,Tribit.T3,Tribit.T1});  INPUT_FROM_CONSTELLATION_MAP.put(Con.C9,new Tribit[]{null,null,Tribit.T1,Tribit.T7,Tribit.T5,Tribit.T3,null,null});  INPUT_FROM_CONSTELLATION_MAP.put(Con.C5,new Tribit[]{null,null,Tribit.T2,Tribit.T0,Tribit.T6,Tribit.T4,null,null});  INPUT_FROM_CONSTELLATION_MAP.put(Con.C2,new Tribit[]{Tribit.T4,Tribit.T2,null,null,null,null,Tribit.T0,Tribit.T6});  INPUT_FROM_CONSTELLATION_MAP.put(Con.CA,new Tribit[]{Tribit.T5,Tribit.T3,null,null,null,null,Tribit.T1,Tribit.T7});  INPUT_FROM_CONSTELLATION_MAP.put(Con.CD,new Tribit[]{null,null,Tribit.T3,Tribit.T1,Tribit.T7,Tribit.T5,null,null});  INPUT_FROM_CONSTELLATION_MAP.put(Con.C1,new Tribit[]{null,null,Tribit.T0,Tribit.T6,Tribit.T4,Tribit.T2,null,null});  INPUT_FROM_CONSTELLATION_MAP.put(Con.C6,new Tribit[]{Tribit.T6,Tribit.T4,null,null,null,null,Tribit.T2,Tribit.T0});  INPUT_FROM_CONSTELLATION_MAP.put(Con.CF,new Tribit[]{null,null,Tribit.T7,Tribit.T5,Tribit.T3,Tribit.T1,null,null});  INPUT_FROM_CONSTELLATION_MAP.put(Con.C8,new Tribit[]{Tribit.T1,Tribit.T7,null,null,null,null,Tribit.T5,Tribit.T3});  INPUT_FROM_CONSTELLATION_MAP.put(Con.C4,new Tribit[]{Tribit.T2,Tribit.T0,null,null,null,null,Tribit.T6,Tribit.T4});  INPUT_FROM_CONSTELLATION_MAP.put(Con.C3,new Tribit[]{null,null,Tribit.T4,Tribit.T2,Tribit.T0,Tribit.T6,null,null});  ;}  }
class C{  private double calculateSmoothingMA(double close,double prevSignalSmoothingEMA,Double sum){  double ma=0;  if (this.getSimpleMAType()) {    ma=sum / getSignalSmoothing();  } else {    if (this.signalSmoothingMultiplyer == Double.MAX_VALUE) {      ma=sum / getSignalSmoothing();      this.signalSmoothingMultiplyer=2 / (getSignalSmoothing() + 1.0d);    } else {      ma=((close - prevSignalSmoothingEMA) * this.signalSmoothingMultiplyer) + prevSignalSmoothingEMA;    }  }  return ma;}  }
class C{  protected Image loadImage(String image){  Image img=imageCache.get(image);  if (img == null) {    img=mxUtils.loadImage(image);    if (img != null) {      imageCache.put(image,img);    }  }  return img;}  }
class C{  public boolean isCustomViewShowing(){  return mCustomView != null;}  }
class C{  public static int ELIBMAX(){  return 82;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public void reassociateCommand(){  sendMessage(CMD_REASSOCIATE);}  }
class C{  public static BridgeServerRequest createForInfo(CacheInfo cache,int id){  BridgeServerRequest request=new BridgeServerRequest();  request.cacheId=cache.getId();  request.operation=INFO_OPERATION;  request.friendlyName=LocalizedStrings.BridgeServerRequest_GET_INFO_ABOUT_BRIDGE_SERVER_0.toLocalizedString(Integer.valueOf(id));  request.bridgeId=id;  request.bridgeInfo=null;  return request;}  }
class C{  public void generateSmap(Node.Nodes pageNodes) throws IOException {  classInfos=new ArrayList<ClassInfo>();  String className=ctxt.getFullClassName();  SmapStratum s=new SmapStratum("JSP");  classInfos.add(new ClassInfo(className,s));  evaluateNodes(pageNodes,s,ctxt.getOptions().getMappedFile());  String classFileName=ctxt.getClassFileName();  for (  ClassInfo entry : classInfos) {    s=entry.getSmapStratum();    s.optimizeLineSection();    SmapGenerator g=new SmapGenerator();    g.setOutputFileName(unqualify(ctxt.getServletJavaFileName()));    g.addStratum(s,true);    String name=entry.getClassName();    if (!className.equals(name)) {      classFileName=ctxt.getOutputDir() + name.substring(name.lastIndexOf('.') + 1) + ".class";    }    entry.setClassFileName(classFileName);    entry.setSmap(g.getString());    if (ctxt.getOptions().isSmapDumped()) {      File outSmap=new File(classFileName + ".smap");      PrintWriter so=new PrintWriter(new OutputStreamWriter(new FileOutputStream(outSmap),SMAP_ENCODING));      so.print(g.getString());      so.close();    }  }}  }
class C{  public SRNNetworkNode(final NetworkPanel networkPanel,final SimpleRecurrentNetwork group){  super(networkPanel,group);  setContextMenu();}  }
class C{  @Override public void bindView(ViewHolder viewHolder,List payloads){  super.bindView(viewHolder,payloads);  viewHolder.checkBox.setChecked(isSelected());  StringHolder.applyTo(name,viewHolder.name);  StringHolder.applyToOrHide(description,viewHolder.description);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  if (firstToken == null) {    firstToken=tokenFactory.createToken(array,start,end,startOffset,tokenType);    currentToken=firstToken;  } else {    currentToken.setNextToken(tokenFactory.createToken(array,start,end,startOffset,tokenType));    previousToken=currentToken;    currentToken=currentToken.getNextToken();  }  currentToken.setHyperlink(hyperlink);}  }
class C{  public void show(){  mStartTime=-1;  mDismissed=false;  removeCallbacks(mDelayedHide);  if (!mPostedShow) {    postDelayed(mDelayedShow,MIN_DELAY);    mPostedShow=true;  }}  }
class C{  public boolean isInBadState(){  return inBadState || labels == null;}  }
class C{  public boolean isFitLegend(){  return mFitLegend;}  }
class C{  void checkLabel(final Label label,final boolean checkVisited,final String msg){  if (label == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null)");  }  if (checkVisited && labels.get(label) == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must be visited first)");  }}  }
class C{  private void verifyXmlForModificationType(String xmlString) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  Document document=builder.parse(new InputSource(new StringReader(xmlString)));  assertEquals(1,document.getChildNodes().getLength());  Element root=document.getDocumentElement();  assertEquals("tns:TechnicalServices",root.getNodeName());  List<?> productNodes=XMLConverter.getNodeList(root.getChildNodes(),"tns:TechnicalService");  assertEquals(1,productNodes.size());  Node n=(Node)productNodes.get(0);  List<Node> serviceNode=XMLConverter.getNodeList(n.getChildNodes(),"ParameterDefinition");  assertEquals(1,serviceNode.size());  NamedNodeMap parameterDefinitionAttrs=serviceNode.get(0).getAttributes();  if (currentModificationType == null || currentModificationType.equals(ParameterModificationType.STANDARD)) {    assertNull(parameterDefinitionAttrs.getNamedItem("modificationType"));  } else {    assertEquals(currentModificationType.name(),parameterDefinitionAttrs.getNamedItem("modificationType").getTextContent());  }}  }
class C{  boolean isSameTransition(ZoneRec zrec,int save,int gmtOffset){  long until, transition;  if (zrec.getUntilTime().getType() != atTime.getType()) {    until=zrec.getLocalUntilTime(save,gmtOffset);    transition=Time.getLocalTime(zrec.getUntilYear(),getMonth(),getDay(),save,gmtOffset,atTime);  } else {    until=zrec.getLocalUntilTime();    transition=Time.getLocalTime(zrec.getUntilYear(),getMonth(),getDay(),atTime.getTime());  }  return until == transition;}  }
class C{  public static float calculateRight(float left,float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float right=(targetAspectRatio * height) + left;  return right;}  }
class C{  protected File assertMkdirs(File parent,String name){  File file=new File(parent,name);  assertMkdirs(file);  return file;}  }
class C{  @Override public void scale(float s){  scaleImpl(s,s,s);}  }
class C{  void checkSingleColumnCell(int axis,int col,View v){  SizeRequirements req=columnRequirements[col];  req.minimum=Math.max((int)v.getMinimumSpan(axis),req.minimum);  req.preferred=Math.max((int)v.getPreferredSpan(axis),req.preferred);}  }
class C{  public int pos(){  return pos;}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  this.s=new Segment();}  }
class C{  public boolean isWild(){  return expression != null && (expression.indexOf(getFreeWildcard()) >= 0 || expression.indexOf(getLocalWildcard()) >= 0);}  }
class C{  protected void triggerPreferredLeaderElection(ZkUtils zkUtils,List<PartitionInfo> partitionInfoList){  scala.collection.mutable.HashSet<TopicAndPartition> scalaPartitionInfoSet=new scala.collection.mutable.HashSet<>();  for (  PartitionInfo javaPartitionInfo : partitionInfoList) {    scalaPartitionInfoSet.add(new TopicAndPartition(_topic,javaPartitionInfo.partition()));  }  PreferredReplicaLeaderElectionCommand.writePreferredReplicaElectionData(zkUtils,scalaPartitionInfoSet);}  }
class C{  public static File createMinimalSplit(String inputFolder,int numFolds,int numAvailableJCas,boolean isSequence) throws Exception {  File outputFolder=new File(inputFolder,"output");  int splitNum=(int)Math.ceil(numFolds / (double)numAvailableJCas);  CollectionReaderDescription createReader=CollectionReaderFactory.createReaderDescription(BinaryCasReader.class,BinaryCasReader.PARAM_SOURCE_LOCATION,inputFolder,BinaryCasReader.PARAM_PATTERNS,"*.bin");  AnalysisEngineDescription multiplier=AnalysisEngineFactory.createEngineDescription(FoldClassificationUnitCasMultiplier.class,FoldClassificationUnitCasMultiplier.PARAM_REQUESTED_SPLITS,splitNum,FoldClassificationUnitCasMultiplier.PARAM_USE_SEQUENCES,isSequence);  AnalysisEngineDescription xmiWriter=AnalysisEngineFactory.createEngineDescription(BinaryCasWriter.class,BinaryCasWriter.PARAM_TARGET_LOCATION,outputFolder.getAbsolutePath(),BinaryCasWriter.PARAM_FORMAT,"6+");  AnalysisEngineDescription both=AnalysisEngineFactory.createEngineDescription(multiplier,xmiWriter);  SimplePipeline.runPipeline(createReader,both);  isNumberOfCasCreatedLargerEqualNumFolds(outputFolder,numFolds);  return outputFolder;}  }
class C{  public static EncryptionKey[] acquireSecretKeys(char[] password,String salt) throws KrbException {  int[] etypes=EType.getDefaults("default_tkt_enctypes");  EncryptionKey[] encKeys=new EncryptionKey[etypes.length];  for (int i=0; i < etypes.length; i++) {    if (EType.isSupported(etypes[i])) {      encKeys[i]=new EncryptionKey(stringToKey(password,salt,null,etypes[i]),etypes[i],null);    } else {      if (DEBUG) {        System.out.println("Encryption Type " + EType.toString(etypes[i]) + " is not supported/enabled");      }    }  }  return encKeys;}  }
class C{  private static final int bestPivot(int rank,int m1,int m2,int m3,int m4,int m5){  if (rank < m1) {    return m1;  }  if (rank > m5) {    return m5;  }  if (rank < m2) {    return m2;  }  if (rank > m4) {    return m4;  }  return m3;}  }
class C{  private static int bigDigitLength(BigInteger b){  if (b.signum == 0)   return 1;  int r=(int)((((long)b.bitLength() + 1) * 646456993) >>> 31);  return b.compareMagnitude(bigTenToThe(r)) < 0 ? r : r + 1;}  }
class C{  public void addRowToTrainingSet(){  if (this instanceof Trainable) {    ((Trainable)this).getTrainingSet().addRow(getNeuronGroupList().get(getNeuronGroupList().size() - 1).getActivations());  }}  }
class C{  protected PDLOverrideSupported(int value){  super(value);}  }
class C{  public int dechargerSlotStartIndex(){  return 0;}  }
class C{  @Override public boolean isEmpty(){  return getText() == null || getText().length() == 0;}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize,byte[] iv,int offset){  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;  if (iv == null)   throw new IllegalArgumentException("IV missing");  int blockSize=(wordSize / 8) * 2;  if (iv.length - offset < blockSize) {    throw new IllegalArgumentException("IV too short");  }  this.iv=new byte[blockSize];  System.arraycopy(iv,offset,this.iv,0,blockSize);}  }
class C{  public Chronology withZone(DateTimeZone zone){  if (zone == null) {    zone=DateTimeZone.getDefault();  }  if (zone == getZone()) {    return this;  }  return getInstance(zone);}  }
class C{  public SesionesException(String message){  this(message,null);}  }
class C{  public static boolean containsSameIgnoringValues(Collection<? extends AnnotationMirror> c,AnnotationMirror anno){  for (  AnnotationMirror an : c) {    if (AnnotationUtils.areSameIgnoringValues(an,anno)) {      return true;    }  }  return false;}  }
class C{  @RequestMapping(value="/SAML2/SSO/{tenant:.*}",method=RequestMethod.GET,params=Shared.PASSWORD_ENTRY) public String ssoPasswordEntry(Locale locale,@PathVariable(value="tenant") String tenant,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  logger.info("Welcome to SP-initiated AuthnRequest handler, PASSWORD entry form! " + "The client locale is " + locale.toString() + ", tenant is "+ tenant);  try {    if (Shared.hasSessionCookie(request,this.getSessionManager(),tenant)) {      sso(locale,tenant,model,request,response);      return null;    }    model.addAttribute("tenant",tenant);    model.addAttribute("protocol","websso");    setupAuthenticationModel(model,locale,tenant,request,null);  } catch (  Exception e) {    logger.error("Found exception while populating model object ",e);    sendError(locale,response,e.getLocalizedMessage());    return null;  }  return "unpentry";}  }
class C{  public static boolean isLandscape(Context context){  return context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;}  }
class C{  public static Date parseIso8601Date(String dateString) throws ParseException {  try {    return getIso8601DateFormat().parse(dateString);  } catch (  ParseException e) {    return getAlternativeIso8601DateFormat().parse(dateString);  }}  }
class C{  public void registerNodes(final Iterable<IGroupMemberNode> nodeList){  for (  Class<?> clazz : clazzez) {    classifiedNodes.put(clazz,new LinkedList<IGroupMemberNode>());  }  for (  IGroupMemberNode node : nodeList) {    boolean classified=false;    for (int i=0; i < clazzez.length && !classified; i++) {      Class<?> clazz=clazzez[i];      if (clazz.isInstance(node)) {        final ASTTypeBasedNodeClassifierConstraint constraint=clazzConstraints.get(clazz);        if (constraint == null || constraint.appliesTo(node)) {          classifiedNodes.get(clazz).add(node);          classified=true;        }      }    }    if (!classified) {      unclassifiedNodes.add(node);    }  }}  }
class C{  static Map<TargetType,List<TypeCompound>> partitionByTargetType(Collection<TypeCompound> annos,List<TypeCompound> unmatched,TargetType... targetTypes){  final Map<TargetType,List<TypeCompound>> targetTypeToAnnos=new HashMap<>();  for (  TargetType targetType : targetTypes) {    targetTypeToAnnos.put(targetType,new ArrayList<TypeCompound>(10));  }  for (  final TypeCompound anno : annos) {    final List<TypeCompound> annoSet=targetTypeToAnnos.get(anno.getPosition().type);    if (annoSet != null) {      annoSet.add(anno);    } else     if (unmatched != null) {      unmatched.add(anno);    }  }  return targetTypeToAnnos;}  }
class C{  public static <T extends ServiceDocument>boolean updateCollections(T currentState,ServiceStateCollectionUpdateRequest patchBody) throws NoSuchFieldException, IllegalAccessException {  boolean hasChanged=false;  if (patchBody.itemsToRemove != null) {    for (    Entry<String,Collection<Object>> collectionItem : patchBody.itemsToRemove.entrySet()) {      hasChanged|=processCollection(collectionItem.getValue(),collectionItem.getKey(),currentState,CollectionOperation.REMOVE);    }  }  if (patchBody.itemsToAdd != null) {    for (    Entry<String,Collection<Object>> collectionItem : patchBody.itemsToAdd.entrySet()) {      hasChanged|=processCollection(collectionItem.getValue(),collectionItem.getKey(),currentState,CollectionOperation.ADD);    }  }  return hasChanged;}  }
class C{  private static final String[] inferCaller(){  StackTraceElement[] stack=(new Throwable()).getStackTrace();  int ix=0;  while (ix < stack.length) {    StackTraceElement frame=stack[ix];    if (!frame.getClassName().equals(LoggingUtil.class.getCanonicalName())) {      return new String[]{frame.getClassName(),frame.getMethodName()};    }    ix++;  }  return null;}  }
class C{  public RelativeSquaredError(){  super();}  }
class C{  public boolean createDatasetIfNeeded(String datasetName) throws IOException {  if (!checkDatasetExists(datasetName)) {    bigquery.datasets().insert(getProjectId(),new Dataset().setDatasetReference(new DatasetReference().setProjectId(getProjectId()).setDatasetId(datasetName))).execute();    System.err.printf("Created dataset: %s:%s\n",getProjectId(),datasetName);    return true;  }  return false;}  }
class C{  public Handle(int tag,String owner,String name,String desc){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;}  }
class C{  @Override public String toString(){  return "ImageBackend Status BEGIN:\n" + "Shadow Image Map Size = " + mShadowTaskMap.size() + "\n"+ "Image Semaphore Map Size = "+ mImageSemaphoreMap.size()+ "\n"+ "OutstandingImageRefs = "+ mOutstandingImageRefs+ "\n"+ "Proxy Listener Map Size = "+ mProxyListener.getMapSize()+ "\n"+ "Proxy Listener = "+ mProxyListener.getNumRegisteredListeners()+ "\n"+ "ImageBackend Status END:\n";}  }
class C{  @Override public double approximatedValueAt(int k){  return approximation.getValueAt(k);}  }
class C{  public static void main(String[] args){  TestUnnamedPackage tester=new TestUnnamedPackage();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static Task convertBackEndToFrontEnd(TaskService.State taskState){  Task task=new Task();  Task.Entity entity=new Task.Entity();  entity.setId(taskState.entityId);  entity.setKind(taskState.entityKind);  task.setEntity(entity);  task.setId(ServiceUtils.getIDFromDocumentSelfLink(taskState.documentSelfLink));  task.setState(taskState.state.toString());  task.setOperation(taskState.operation);  task.setQueuedTime(taskState.queuedTime);  task.setStartedTime(taskState.startedTime);  task.setEndTime(taskState.endTime);  if (StringUtils.isNotBlank(taskState.resourceProperties)) {    try {      Object resourceProperties=objectMapper.readValue(taskState.resourceProperties,Object.class);      task.setResourceProperties(resourceProperties);    } catch (    IOException e) {      throw new IllegalArgumentException(String.format("Error deserializing resourceProperties %s, error %s",taskState.resourceProperties,e.getMessage()));    }  }  if (taskState.steps != null && !taskState.steps.isEmpty()) {    List<Step> steps=new ArrayList<>();    taskState.steps.stream().sorted(null).forEach(null);    task.setSteps(steps);  }  return task;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean hasSectionId(){  return hasExtension(GwoSectionId.class);}  }
class C{  private static void addId(final StringBuilder buf,final byte[] id){  buf.append("\\Q");  boolean backslash=false;  for (  final byte b : id) {    buf.append((char)(b & 0xFF));    if (b == 'E' && backslash) {      buf.append("\\\\E\\Q");    } else {      backslash=b == '\\';    }  }  buf.append("\\E");}  }
class C{  public static boolean isUnix(){  return (getOperatingSystem() & OS_UNIX_MASK) != 0;}  }
class C{  public N4GetterDeclaration createN4GetterDeclaration(){  N4GetterDeclarationImpl n4GetterDeclaration=new N4GetterDeclarationImpl();  return n4GetterDeclaration;}  }
class C{  public void testDoConfigureSetsDefaultDomainVersion() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathExists("//weblogic:domain-version",config);  XMLAssert.assertXpathExists("//weblogic:configuration-version",config);  XMLAssert.assertXpathExists("//weblogic:server",config);  XMLAssert.assertXpathExists("//weblogic:server/weblogic:name",config);  XMLAssert.assertXpathExists("//weblogic:security-configuration",config);  XMLAssert.assertXpathExists("//weblogic:security-configuration/weblogic:credential-encrypted",config);  XMLAssert.assertXpathExists("//weblogic:embedded-ldap",config);  XMLAssert.assertXpathExists("//weblogic:embedded-ldap/weblogic:credential-encrypted",config);  XMLAssert.assertXpathExists("//weblogic:admin-server-name",config);}  }
class C{  protected void dumpBlockedThreads(){  VM.sysWrite(" entering: ");  entering.dump();}  }
class C{  public GOETreeNode(Object userObject,boolean allowsChildren){  super(userObject,allowsChildren);}  }
class C{  private CallbackHandler createDefaultCallbackHandler() throws AuthException {  String callBackClassName=System.getProperty(CALLBACK_HANDLER_PROPERTY_NAME);  if (callBackClassName == null) {    throw new AuthException("No default handler set via system property: " + CALLBACK_HANDLER_PROPERTY_NAME);  }  try {    return (CallbackHandler)Thread.currentThread().getContextClassLoader().loadClass(callBackClassName).newInstance();  } catch (  Exception e) {    throw new AuthException(e.getMessage());  }}  }
class C{  public EntityMigrationBuilder renameNamedAssociation(String from,String to){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new RenameNamedAssociation(from,to)));  return this;}  }
class C{  protected void packetFromThisVMReceived(Map<String,String> payload){  receivedJDPpackets++;  final String jdpName=payload.get("INSTANCE_NAME");  log.fine("Received correct JDP packet #" + String.valueOf(receivedJDPpackets) + ", jdp.name="+ jdpName);}  }
class C{  public static JsonElement deepSort(JsonElement el){  if (el == null) {    return null;  } else   if (el.isJsonArray()) {    JsonArray sortedArray=new JsonArray();    for (    JsonElement subEl : (JsonArray)el) {      sortedArray.add(deepSort(subEl));    }    return sortedArray;  } else   if (el.isJsonObject()) {    List<Entry<String,JsonElement>> entrySet=new ArrayList<Entry<String,JsonElement>>(((JsonObject)el).entrySet());    Collections.sort(entrySet,JSON_OBJECT_ENTRY_SET_COMPARATOR);    JsonObject sortedObject=new JsonObject();    for (    Entry<String,JsonElement> entry : entrySet) {      sortedObject.add(entry.getKey(),deepSort(entry.getValue()));    }    return sortedObject;  } else {    return el;  }}  }
class C{  @Override public void prependBefore(String before){  String oldBefore=before();  setBefore(before + oldBefore);}  }
class C{  public static Globals standardGlobals(){  Globals globals=new Globals();  globals.load(new JseBaseLib());  globals.load(new PackageLib());  globals.load(new Bit32Lib());  globals.load(new TableLib());  globals.load(new StringLib());  globals.load(new CoroutineLib());  globals.load(new JseMathLib());  globals.load(new JseOsLib());  LoadState.install(globals);  LuaC.install(globals);  return globals;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  if (serialVersionOnStream < 1) {    setAlignment(this.align);  }  serialVersionOnStream=currentSerialVersion;}  }
class C{  @Override public Blob createBlob() throws SQLException {  try {    int id=getNextId(TraceObject.BLOB);    debugCodeAssign("Blob",TraceObject.BLOB,id,"createClob()");    checkClosedForWrite();    try {      Value v=ValueLobDb.createTempBlob(new ByteArrayInputStream(Utils.EMPTY_BYTES),0);      session.addTemporaryLob(v);      return new JdbcBlob(this,v,id);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.648 -0500",hash_original_method="EA9D71906AA8F5EAFC46BDFADD14632A",hash_generated_method="8E0909FC1BE211C52A82B36CE39A28C7") public HttpParams copy(){  return this;}  }
class C{  public void testMT() throws Exception {  tryMT(2);}  }
class C{  public HostCandidate(IceSocketWrapper socket,Component parentComponent,Transport transport){  super(new TransportAddress(socket.getLocalAddress(),socket.getLocalPort(),transport),parentComponent,CandidateType.HOST_CANDIDATE,CandidateExtendedType.HOST_CANDIDATE,null);  this.socket=socket;  setBase(this);}  }
class C{  public static boolean copyToClipBoard(Context context,String text){  if (text == null || text.isEmpty()) {    return false;  } else {    if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {      android.text.ClipboardManager clipboard=(android.text.ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);      clipboard.setText(text);    } else {      android.content.ClipboardManager clipboard=(android.content.ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);      android.content.ClipData clip=android.content.ClipData.newPlainText(text,text);      clipboard.setPrimaryClip(clip);    }  }  return true;}  }
class C{  protected void updateStatsForIntervalEstimator(IntervalEstimator classifier,Instance classMissing,double classValue) throws Exception {  double[][] preds=classifier.predictIntervals(classMissing,m_ConfLevel);  if (m_Predictions != null) {    ((NumericPrediction)m_Predictions.get(m_Predictions.size() - 1)).setPredictionIntervals(preds);  }  for (  double[] pred : preds) {    m_TotalSizeOfRegions+=(pred[1] - pred[0]) / (m_MaxTarget - m_MinTarget);  }  for (  double[] pred : preds) {    if ((pred[1] >= classValue) && (pred[0] <= classValue)) {      m_TotalCoverage+=classMissing.weight();      break;    }  }  if (m_pluginMetrics != null) {    for (    AbstractEvaluationMetric m : m_pluginMetrics) {      if (m instanceof IntervalBasedEvaluationMetric) {        ((IntervalBasedEvaluationMetric)m).updateStatsForIntervalEstimator(classifier,classMissing,classValue);      }    }  }}  }
class C{  public boolean killJob(String jobIdFile){  List<String> jobIdFileContent=readFromFile(jobIdFile);  if (jobIdFileContent.size() > 0) {    String[] slurmCmd=new String[]{"scancel",jobIdFileContent.get(0)};    return runProcess(null,slurmCmd,new StringBuilder(),new StringBuilder());  } else {    LOG.log(Level.SEVERE,"Failed to read the Slurm Job id from file: {0}",jobIdFile);    return false;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static CGPoint ccpSub(final CGPoint v1,final CGPoint v2){  return ccp(v1.x - v2.x,v1.y - v2.y);}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void deleteInventoryMove(Properties ctx,int movementId){  MMovement movement=new MMovement(ctx,movementId,null);  movement.delete(true);}  }
class C{  @Override public String mapSafeElement(String name){  String lowerName=name.toLowerCase(Locale.ROOT);  return (lowerName.equals("br") || lowerName.equals("body")) ? null : lowerName;}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new AbsListView.LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public Vector3 ceil(){  return new Vector3(Math.ceil(x),Math.ceil(y),Math.ceil(z));}  }
class C{  private void synchronizeData(){  resetDBObjects(DBObject_Table.class);  m_objectType=s_logger.localizeMessage("record");  m_objectTypes=s_logger.localizeMessage("records");  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"synchronizeData",new Object[]{m_objectTypes,m_direction});  m_counterUpd=new Integer(0);  m_totalUpd=new Integer(0);  m_counterAdd=new Integer(0);  m_totalAdd=new Integer(0);  String sourceVendor=m_source.getVendor();  String sourceCatalog=m_source.getCatalog();  String sourceSchema=m_source.getSchema();  String targetVendor=m_target.getVendor();  String targetCatalog=m_target.getCatalog();  String targetSchema=m_target.getSchema();  Vector<String> v=new Vector<String>(m_sourceMap.keySet());  java.util.Collections.sort(v);  for (Iterator<String> it=v.iterator(); it.hasNext(); ) {    String key=it.next();    DBObject table=m_sourceMap.get(key);    String tableName=table.getName();    if (isCopy() || !tableName.equalsIgnoreCase("AD_System")) {      s_logger.log(Level.FINE,"transferRecords",new Object[]{m_objectTypes,tableName,m_direction});      ArrayList<String> insertColumnNames=new ArrayList<String>();      ArrayList<Integer> insertColumnTypes=new ArrayList<Integer>();      ArrayList<String> updateColumnNames=new ArrayList<String>();      ArrayList<Integer> updateColumnTypes=new ArrayList<Integer>();      HashMap<String,Integer> columnTypeMap=new HashMap<String,Integer>();      Vector<Integer> v2=new Vector<Integer>(table.getContents().keySet());      java.util.Collections.sort(v2);      for (Iterator<Integer> i=v2.iterator(); i.hasNext(); ) {        Integer j=i.next();        DBObject_Table_Column col=(DBObject_Table_Column)table.getContents().get(j);        String columnName=col.getName();        int columnType=s_dbEngine.getDataTypeID(sourceVendor,col.getType());        insertColumnNames.add(columnName);        insertColumnTypes.add(columnType);        if (!(tableName.equalsIgnoreCase("AD_USER") && columnName.equalsIgnoreCase("password"))) {          updateColumnNames.add(columnName);          updateColumnTypes.add(columnType);        }        columnTypeMap.put(columnName.toUpperCase(),columnType);      }      boolean isPkFound=false;      ArrayList<String> pkColumns=new ArrayList<String>();      ArrayList<Integer> pkTypes=new ArrayList<Integer>();      if (m_source.getPrimaryKeys() != null) {        for (Iterator<String> i=m_source.getPrimaryKeys().keySet().iterator(); i.hasNext(); ) {          String j=i.next();          DBObject obj=m_source.getPrimaryKeys().get(j);          DBObject_PrimaryKey_Table objHeader=(DBObject_PrimaryKey_Table)obj.getHeaders().get(0);          if (objHeader.getTable().equalsIgnoreCase(tableName)) {            isPkFound=true;            v2=new Vector<Integer>(obj.getContents().keySet());            java.util.Collections.sort(v2);            for (Iterator<Integer> m=v2.iterator(); m.hasNext(); ) {              Integer n=m.next();              DBObject_PrimaryKey_Column col=(DBObject_PrimaryKey_Column)obj.getContents().get(n);              pkColumns.add(col.getColumn());              pkTypes.add(columnTypeMap.get(col.getColumn().toUpperCase()));            }          }        }      }      if (!isPkFound) {        if (m_source.getUniques() != null) {          for (Iterator<String> i=m_source.getUniques().keySet().iterator(); i.hasNext(); ) {            String j=i.next();            DBObject obj=m_source.getUniques().get(j);            DBObject_Unique_Table objHeader=(DBObject_Unique_Table)obj.getHeaders().get(0);            if (objHeader.getTable().equalsIgnoreCase(tableName)) {              v2=new Vector<Integer>(obj.getContents().keySet());              java.util.Collections.sort(v2);              for (Iterator<Integer> m=v2.iterator(); m.hasNext(); ) {                Integer n=m.next();                DBObject_Unique_Column col=(DBObject_Unique_Column)obj.getContents().get(n);                pkColumns.add(col.getColumn());                pkTypes.add(columnTypeMap.get(col.getColumn().toUpperCase()));              }            }          }        }      }      Savepoint sp=m_target.setSavepoint(tableName);      ArrayList<String> existingRecords=new ArrayList<String>();      if (isUpgrade()) {        String targetSqlCheckExists=s_dbEngine.sql_selectPreparedStatement(targetVendor,targetCatalog,targetSchema,tableName,pkColumns);        PreparedStatementWrapper targetStmtCheckExists=m_target.setPreparedStatement(targetSqlCheckExists);        Statement sourceStmt=m_source.setStatement(true);        String sourceSql=s_dbEngine.sql_select(sourceVendor,sourceCatalog,sourceSchema,tableName);        ResultSet sourceRs=m_source.executeQuery(sourceStmt,sourceSql);        while (m_source.getResultSetNext(sourceRs)) {          StringBuffer pksb=new StringBuffer();          for (int i=0; i < pkColumns.size(); i++) {            String colName=pkColumns.get(i);            int colType=pkTypes.get(i);            String colValue=m_source.getResultSetString(sourceRs,colName);            pksb.append(colValue).append("-");            int colIndex=i + 1;            if (colType >= s_dbEngine.CLOB && colType <= s_dbEngine.NCLOB) {              m_target.setPreparedStatementClob(targetStmtCheckExists,colIndex,m_source.getResultSetClob(sourceRs,colName));            } else             if (colType >= s_dbEngine.BINTYPE_START && colType <= s_dbEngine.BINTYPE_END) {              m_target.setPreparedStatementBytes(targetStmtCheckExists,colIndex,m_source.getResultSetBytes(sourceRs,colName));            } else {              m_target.setPreparedStatementObject(targetStmtCheckExists,colIndex,m_source.getResultSetObject(sourceRs,colName));            }          }          String pkStringIdentifier=pksb.toString();          if (pkColumns.size() > 0) {            ResultSet targetRs=m_target.executeQuery(targetStmtCheckExists);            if (m_target.getResultSetNext(targetRs)) {              if (!existingRecords.contains(pkStringIdentifier))               existingRecords.add(pkStringIdentifier);            }            m_target.releaseResultSet(targetRs);          }        }        m_source.releaseResultSet(sourceRs);        m_source.releaseStatement(sourceStmt);        m_target.releasePreparedStatement(targetStmtCheckExists);      }      PreparedStatementWrapper targetStmtUpdateRecord=m_target.setPreparedStatement(s_dbEngine.sql_updatePreparedStatement(targetVendor,targetCatalog,targetSchema,tableName,updateColumnNames,pkColumns));      PreparedStatementWrapper targetStmtInsertRecord=m_target.setPreparedStatement(s_dbEngine.sql_insertPreparedStatement(targetVendor,targetCatalog,targetSchema,tableName,insertColumnNames));      Statement sourceStmt=m_source.setStatement(true);      String sourceSql=s_dbEngine.sql_select(sourceVendor,sourceCatalog,sourceSchema,tableName);      ResultSet sourceRs=m_source.executeQuery(sourceStmt,sourceSql);      while (m_source.getResultSetNext(sourceRs)) {        StringBuffer pksb=new StringBuffer();        for (int i=0; i < pkColumns.size(); i++) {          String colName=pkColumns.get(i);          int colType=pkTypes.get(i);          String colValue=m_source.getResultSetString(sourceRs,colName);          pksb.append(colValue).append("-");          int colIndex=updateColumnNames.size() + i + 1;          if (colType >= s_dbEngine.CLOB && colType <= s_dbEngine.NCLOB) {            m_target.setPreparedStatementClob(targetStmtUpdateRecord,colIndex,m_source.getResultSetClob(sourceRs,colName));          } else           if (colType >= s_dbEngine.BINTYPE_START && colType <= s_dbEngine.BINTYPE_END) {            m_target.setPreparedStatementBytes(targetStmtUpdateRecord,colIndex,m_source.getResultSetBytes(sourceRs,colName));          } else {            m_target.setPreparedStatementObject(targetStmtUpdateRecord,colIndex,m_source.getResultSetObject(sourceRs,colName));          }        }        String pkStringIdentifier=pksb.toString();        if (existingRecords.contains(pkStringIdentifier)) {          boolean processThis=true;          if (tableName.equalsIgnoreCase("AD_Language")) {            String currentLanguage=pkStringIdentifier.substring(0,5);            if (m_target.getSystemLanguages().contains(currentLanguage)) {              processThis=false;            }          }          if (processThis) {            for (int i=0; i < updateColumnNames.size(); i++) {              String colName=updateColumnNames.get(i);              int colType=updateColumnTypes.get(i);              int colIndex=i + 1;              if (colType >= s_dbEngine.CLOB && colType <= s_dbEngine.NCLOB) {                m_target.setPreparedStatementClob(targetStmtUpdateRecord,colIndex,m_source.getResultSetClob(sourceRs,colName));              } else               if (colType >= s_dbEngine.BINTYPE_START && colType <= s_dbEngine.BINTYPE_END) {                m_target.setPreparedStatementBytes(targetStmtUpdateRecord,colIndex,m_source.getResultSetBytes(sourceRs,colName));              } else {                m_target.setPreparedStatementObject(targetStmtUpdateRecord,colIndex,m_source.getResultSetObject(sourceRs,colName));              }            }            Integer sqlResult=m_target.executeUpdate(targetStmtUpdateRecord,false);            if (sqlResult != null) {              if (pkStringIdentifier.endsWith("-"))               pkStringIdentifier=pkStringIdentifier.substring(0,pkStringIdentifier.length() - 1);              logUpdateDetail(sqlResult,new StringBuffer("(").append(tableName).append(": ").append(pkStringIdentifier).append(")").toString());              m_counterUpd=new Integer(m_counterUpd.intValue() + 1);            }            m_totalUpd=new Integer(m_totalUpd.intValue() + 1);          }        } else {          for (int i=0; i < insertColumnNames.size(); i++) {            String colName=insertColumnNames.get(i);            int colType=insertColumnTypes.get(i);            int colIndex=i + 1;            if (colType >= s_dbEngine.CLOB && colType <= s_dbEngine.NCLOB) {              m_target.setPreparedStatementClob(targetStmtInsertRecord,colIndex,m_source.getResultSetClob(sourceRs,colName));            } else             if (colType >= s_dbEngine.BINTYPE_START && colType <= s_dbEngine.BINTYPE_END) {              m_target.setPreparedStatementBytes(targetStmtInsertRecord,colIndex,m_source.getResultSetBytes(sourceRs,colName));            } else {              m_target.setPreparedStatementObject(targetStmtInsertRecord,colIndex,m_source.getResultSetObject(sourceRs,colName));            }          }          Integer sqlResult=m_target.executeUpdate(targetStmtInsertRecord,false);          if (sqlResult != null) {            if (pkStringIdentifier.endsWith("-"))             pkStringIdentifier=pkStringIdentifier.substring(0,pkStringIdentifier.length() - 1);            logAddDetail(sqlResult,new StringBuffer("(").append(tableName).append(": ").append(pkStringIdentifier).append(")").toString());            m_counterAdd=new Integer(m_counterAdd.intValue() + 1);          }          m_totalAdd=new Integer(m_totalAdd.intValue() + 1);        }      }      m_source.releaseResultSet(sourceRs);      m_source.releaseStatement(sourceStmt);      m_target.releasePreparedStatement(targetStmtUpdateRecord);      m_target.releasePreparedStatement(targetStmtInsertRecord);      m_target.releaseSavepoint(sp);    }  }  logResults();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute1;  Attr attribute2;  String name;  String nodeName;  String nodeValue;  String prefix;  String namespaceURI;  doc=(Document)load("staffNS",false);  attribute1=doc.createAttributeNS("http://www.w3.org/XML/1998/namespace","xml:xml");  name=attribute1.getName();  nodeName=attribute1.getNodeName();  nodeValue=attribute1.getNodeValue();  prefix=attribute1.getPrefix();  namespaceURI=attribute1.getNamespaceURI();  assertEquals("documentcreateattributeNS02_att1_name","xml:xml",name);  assertEquals("documentcreateattributeNS02_att1_nodeName","xml:xml",nodeName);  assertEquals("documentcreateattributeNS02_att1_nodeValue","",nodeValue);  assertEquals("documentcreateattributeNS02_att1_prefix","xml",prefix);  assertEquals("documentcreateattributeNS02_att1_namespaceURI","http://www.w3.org/XML/1998/namespace",namespaceURI);  attribute2=doc.createAttributeNS("http://www.w3.org/2000/xmlns/","xmlns");  name=attribute2.getName();  nodeName=attribute2.getNodeName();  nodeValue=attribute2.getNodeValue();  prefix=attribute2.getPrefix();  namespaceURI=attribute2.getNamespaceURI();  assertEquals("documentcreateattributeNS02_att2_name","xmlns",name);  assertEquals("documentcreateattributeNS02_att2_nodeName","xmlns",nodeName);  assertEquals("documentcreateattributeNS02_att2_nodeValue","",nodeValue);  assertEquals("documentcreateattributeNS02_att2_namespaceURI","http://www.w3.org/2000/xmlns/",namespaceURI);}  }
class C{  public boolean isVisible(){  return user.isInternalUser() || groupBackend.isVisibleToAll(group.getGroupUUID()) || user.getEffectiveGroups().contains(group.getGroupUUID())|| user.getCapabilities().canAdministrateServer()|| isOwner();}  }
class C{  protected GenericEntity(){}  }
class C{  public ConnectionConfig(RaspberryPiAdapter p){  super();  adapter=p;}  }
class C{  public static TimeRangeBound inclusive(Instant instant){  return new TimeRangeBound(instant,true);}  }
class C{  public TraceLogger(final ITraceListProvider traceProvider,final IDebugger debugger){  this.traceProvider=Preconditions.checkNotNull(traceProvider,"IE00785: Trace provider can not be null");  this.debugger=Preconditions.checkNotNull(debugger,"IE00786: Debugger can not be null");  breakpointManager=debugger.getBreakpointManager();}  }
class C{  public void pushMatrix(){  g.pushMatrix();}  }
class C{  public void traceOff() throws IOException {  this.traceStream=null;}  }
class C{  public static RTLExpression nondet(int bitWidth){  if (nondetArray[bitWidth - 1] == null)   nondetArray[bitWidth - 1]=new RTLNondet(bitWidth);  return nondetArray[bitWidth - 1];}  }
class C{  static public Result doConcurrentClientTest(final Journal journal,final long timeout,final int nresources,final int minLocks,final int maxLocks,final int ntrials,final int keyLen,final int nops,final double failureRate,final double commitRate) throws InterruptedException {  if (journal == null)   throw new IllegalArgumentException();  if (timeout <= 0)   throw new IllegalArgumentException();  if (nresources <= 0)   throw new IllegalArgumentException();  if (minLocks < 0)   throw new IllegalArgumentException();  if (maxLocks < minLocks || maxLocks > nresources)   throw new IllegalArgumentException();  if (ntrials < 1)   throw new IllegalArgumentException();  if (keyLen < 1)   throw new IllegalArgumentException();  if (nops < 0)   throw new IllegalArgumentException();  if (failureRate < 0.0 || failureRate > 1.0)   throw new IllegalArgumentException();  if (commitRate < 0.0 || commitRate > 1.0)   throw new IllegalArgumentException();  final Random r=new Random();  final String[] resources=new String[nresources];{    for (int i=0; i < nresources; i++) {      resources[i]="index#" + i;      journal.registerIndex(resources[i],BTree.create(journal,new IndexMetadata(resources[i],UUID.randomUUID())));    }    journal.commit();  }  if (log.isInfoEnabled())   log.info("Created indices: " + Arrays.toString(resources));  final Collection<Callable<Void>> tasks=new HashSet<Callable<Void>>();  final ConcurrentHashSet<Thread> threads=new ConcurrentHashSet<Thread>();  for (int i=0; i < ntrials; i++) {    final int nlocks=r.nextInt(maxLocks + 1 - minLocks) + minLocks;    assert nlocks >= minLocks && nlocks <= maxLocks;    final Collection<String> tmp=new HashSet<String>(nlocks);    while (tmp.size() < nlocks) {      tmp.add(resources[r.nextInt(nresources)]);    }    final String[] resource=tmp.toArray(new String[nlocks]);    tasks.add(new WriteTask(journal,resource,i,keyLen,nops,failureRate,commitRate,threads));  }  if (log.isInfoEnabled())   log.info("Submitting " + tasks.size() + " tasks");  final long begin=System.currentTimeMillis();  final List<Future<Void>> results=journal.getExecutorService().invokeAll(tasks,timeout,TimeUnit.SECONDS);  final long elapsed=System.currentTimeMillis() - begin;  final Iterator<Future<Void>> itr=results.iterator();  int nfailed=0;  int ninterrupt=0;  int ncompleted=0;  int nuncompleted=0;  while (itr.hasNext()) {    final Future<Void> future=itr.next();    if (future.isCancelled()) {      nuncompleted++;      continue;    }    try {      future.get();      ncompleted++;    } catch (    ExecutionException ex) {      if (isInnerCause(ex,InterruptedException.class) || isInnerCause(ex,ClosedByInterruptException.class)) {        log.warn("Interrupted: " + ex);        ninterrupt++;      } else       if (isInnerCause(ex,SpuriousException.class)) {        nfailed++;      } else {        fail("Not expecting: " + ex,ex);      }    }  }  final WriteExecutorService writeService=journal.getConcurrencyManager().getWriteService();  journal.shutdownNow();  final long seconds=TimeUnit.SECONDS.convert(elapsed,TimeUnit.MILLISECONDS);  final long bytesWrittenPerSecond=journal.getRootBlockView().getNextOffset() / (seconds == 0 ? 1 : seconds);  final Result ret=new Result();  ret.put("nfailed","" + nfailed);  ret.put("ncompleted","" + ncompleted);  ret.put("ninterrupt","" + ninterrupt);  ret.put("nuncompleted","" + nuncompleted);  ret.put("elapsed(ms)","" + elapsed);  ret.put("bytesWrittenPerSec","" + bytesWrittenPerSecond);  ret.put("tasks/sec","" + (ncompleted * 1000 / elapsed));  ret.put("maxRunning","" + writeService.getMaxRunning());  ret.put("maxPoolSize","" + writeService.getMaxPoolSize());  ret.put("maxLatencyUntilCommit","" + writeService.getMaxCommitWaitingTime());  ret.put("maxCommitLatency","" + writeService.getMaxCommitServiceTime());  System.err.println(ret.toString(true));  journal.deleteResources();  return ret;}  }
class C{  public ProviderNotFoundException(String name){  this(name,null);}  }
class C{  private double[][] clusterCenters(ArrayList<GeneratorInterface> generators,ClassLabel[] labels){  final int l=generators.size();  double[][] vs=new double[l][];  for (int i=0; i < l; i++) {    if (labels[i] == null) {      continue;    }    vs[i]=generators.get(i).computeMean();  }  return vs;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public Object exec(List arguments) throws TemplateModelException {  if (arguments.size() < 1)   throw new TemplateModelException("No message key was specified");  Iterator it=arguments.iterator();  String key=unwrap((TemplateModel)it.next()).toString();  try {    if (!it.hasNext()) {      return wrap(((ResourceBundle)object).getObject(key));    }    int args=arguments.size() - 1;    Object[] params=new Object[args];    for (int i=0; i < args; ++i)     params[i]=unwrap((TemplateModel)it.next());    return new StringModel(format(key,params),wrapper);  } catch (  MissingResourceException e) {    throw new TemplateModelException("No such key: " + key);  }catch (  Exception e) {    throw new TemplateModelException(e.getMessage());  }}  }
class C{  public String toName(char uc){  for (int i=0; i < ntables; i++) {    String name=tables[i].toName(uc);    if (name != null)     return (name);  }  return (null);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  @Override public String lastString(){  if (_laststring == null) {    nextString();  }  return _laststring;}  }
class C{  public static void v(String msg){  if (DEBUG)   Log.v(TAG,buildMessage(msg));}  }
class C{  public Object createValue(UIDefaults table){  if (value == null) {    value=configureValue(getValueFromDesktop());    if (value == null) {      value=configureValue(getDefaultValue());    }  }  return value;}  }
class C{  public void testAddFilterToDocumentWithTheSameFilter() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlElement filterElement=createFilterElement(webXml.getDescriptorType(),"f1","f1class");  try {    webXml.addTag(filterElement);    fail("Expected IllegalStateException");  } catch (  IllegalStateException ise) {  }}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_INVARIANT_1__NAME_1:    setName_1(NAME_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public PubsubFuture<List<ReceivedMessage>> pull(final String canonicalSubscriptionName,final boolean returnImmediately){  return pull(canonicalSubscriptionName,returnImmediately,DEFAULT_PULL_MAX_MESSAGES);}  }
class C{  static int applyMaskPenaltyRule2(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height - 1; y++) {    for (int x=0; x < width - 1; x++) {      int value=array[y][x];      if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {        penalty++;      }    }  }  return N2 * penalty;}  }
class C{  public ProductFilterReport(){  Font font=new Font("Arial",0,12);  setFont(font);  panel=new JPanel(new MigLayout());  GroupLayout layout=new GroupLayout(this);  setLayout(layout);  layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(panel,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addContainerGap(319,Short.MAX_VALUE)));  layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(panel,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE));  jLabel1=new JLabel(AppLocal.getIntString("label.prodcategory"));  jLabel1.setFont(font);  jLabel2=new JLabel(AppLocal.getIntString("label.prodname"));  jLabel2.setFont(font);  jLabel3=new JLabel(AppLocal.getIntString("label.prodpricesellexcludingtax"));  jLabel3.setFont(font);  jLabel4=new JLabel(AppLocal.getIntString("label.prodpricebuy"));  jLabel4.setFont(font);  jLabel5=new JLabel(AppLocal.getIntString("label.prodbarcode"));  jLabel5.setFont(font);  m_jBarcode.setFont(font);  m_jBarcode.setPreferredSize(new Dimension(200,25));  m_jCategory.setFont(font);  m_jCboName.setFont(font);  m_jName.setFont(font);  m_jName.setPreferredSize(new Dimension(200,25));  m_jPriceBuy.setFont(font);  m_jPriceBuy.setPreferredSize(new Dimension(60,25));  m_jCboPriceBuy.setFont(font);  m_jCboPriceSell.setFont(font);  m_jPriceSell.setFont(font);  m_jPriceSell.setPreferredSize(new Dimension(60,25));  jLabel2.setFont(font);  jLabel2.setText(AppLocal.getIntString("label.prodname"));  panel.add(jLabel1,"w 80");  panel.add(m_jCategory,"w 220, gapright 5");  panel.add(jLabel4,"w 90");  panel.add(m_jCboPriceBuy,"w 120");  panel.add(m_jPriceBuy,"w 50, gapright 10");  panel.add(jLabel5,"w 80");  panel.add(m_jBarcode,"w 220, wrap");  panel.add(jLabel2,"w 80");  panel.add(m_jCboName,"w 220");  panel.add(jLabel3,"w 90");  panel.add(m_jCboPriceSell,"w 120");  panel.add(m_jPriceSell,"w 50, gapright 10, wrap");  panel.add(new JLabel(),"w 80");  panel.add(m_jName,"w 220, gapright 5");}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  public Response createCorrespondingErrorResponse(char requestType,char errorCode,String reasonPhrase,char... unknownAttributes){  if (requestType == Message.BINDING_REQUEST) {    if (unknownAttributes != null) {      return MessageFactory.createBindingErrorResponse(errorCode,reasonPhrase,unknownAttributes);    } else {      return MessageFactory.createBindingErrorResponse(errorCode,reasonPhrase);    }  } else {    return null;  }}  }
class C{  public void outputDDLToWriter(Writer schemaWriter){  this.createSchemaWriter=schemaWriter;}  }
class C{  public TextEventFilter(){  super(InputEvent.BUTTON1_MASK);}  }
class C{  public boolean expandable(){  return NotificationData.getIsExpandable(row);}  }
class C{  private void deleteSnapshotSchedule(URI url) throws IsilonException {  ClientResponse resp=null;  try {    resp=_client.delete(url);    if (resp.getStatus() != 200 && resp.getStatus() != 204 && resp.getStatus() != 404) {      processErrorResponse("delete","URL =" + url,resp.getStatus(),resp.hasEntity() ? resp.getEntity(JSONObject.class) : null);    }  } catch (  IsilonException ie) {    throw ie;  }catch (  Exception e) {    String response=String.format("%1$s",(resp == null) ? "" : resp);    throw IsilonException.exceptions.deletePolicyFailedOnIsilonArray(url.toString(),response,e);  } finally {    if (resp != null) {      resp.close();    }  }}  }
class C{  public PlotData2D(Instances insts){  m_plotInstances=insts;  m_xIndex=m_yIndex=m_cIndex=0;  m_pointLookup=new double[m_plotInstances.numInstances()][4];  m_shapeSize=new int[m_plotInstances.numInstances()];  m_shapeType=new int[m_plotInstances.numInstances()];  m_connectPoints=new boolean[m_plotInstances.numInstances()];  for (int i=0; i < m_plotInstances.numInstances(); i++) {    m_shapeSize[i]=Plot2D.DEFAULT_SHAPE_SIZE;    m_shapeType[i]=Plot2D.CONST_AUTOMATIC_SHAPE;  }  determineBounds();}  }
class C{  public void testCertificateFactory18() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    try {      CertificateFactory certF=CertificateFactory.getInstance(validValues[i]);      assertEquals("Incorrect type: ",validValues[i],certF.getType());      certF=CertificateFactory.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect type",certF.getType(),validValues[i]);      certF=CertificateFactory.getInstance(validValues[i],defaultProvider);      assertEquals("Incorrect provider",certF.getProvider(),defaultProvider);      assertEquals("Incorrect type",certF.getType(),validValues[i]);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchProviderException " + e.getMessage());    }  }}  }
class C{  public static void isPortFree(String port,Application application) throws CheckException {  Long numberOfThisPort=application.getPortsToOpen().stream().filter(null).count();  if (numberOfThisPort != 0) {    String messageTranslated=messageSource.getMessage("port.already.used",null,Locale.ENGLISH);    throw new CheckException(messageTranslated + " : " + port);  }}  }
class C{  public void addAnchor(){  addAnchor(currentPoint);}  }
class C{  @Override protected void validateModuleSpecifier() throws ValidationException {  String effectiveModuleSpecifier=getModel().getEffectiveModuleSpecifier();  doValidateModuleSpecifier(effectiveModuleSpecifier);  if (isFileSpecifyingModuleSpecifier(effectiveModuleSpecifier)) {    IProject moduleProject=ResourcesPlugin.getWorkspace().getRoot().getProject(getModel().getProject().toString());    IPath effectiveModulePath=new Path(getModel().getEffectiveModuleSpecifier());    IPath n4jsdPath=getModel().getSourceFolder().append(effectiveModulePath.addFileExtension(N4JSGlobals.N4JSD_FILE_EXTENSION));    IPath n4jsPath=getModel().getSourceFolder().append(effectiveModulePath.addFileExtension(N4JSGlobals.N4JS_FILE_EXTENSION));    if (getModel().isDefinitionFile() && moduleProject.exists(n4jsPath)) {      throw new ValidationException(String.format(ErrorMessages.THE_NEW_DEFINITION_MODULE_COLLIDES_WITH_THE_SOURCE_FILE,moduleProject.getFullPath().append(n4jsPath)));    } else     if (!getModel().isDefinitionFile() && moduleProject.exists(n4jsdPath)) {      throw new ValidationException(String.format(ErrorMessages.THE_NEW_SOURCE_MODULE_COLLIDES_WITH_THE_DEFINITION_FILE,moduleProject.getFullPath().append(n4jsdPath)));    }  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_matchPattern)   m_matchPattern.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());  cstate.resetStackFrameSize();  m_inArgsSize=0;}  }
class C{  public boolean isDefinitelyNull(){  int baseKind=getBaseKind();  return baseKind == NULL || baseKind == CHECKED_NULL;}  }
class C{  protected void onExit(){  if (getMap() != null)   getMap().close();}  }
class C{  private void verifyCopyIDs(CopiesParam param){  boolean rpEmpty=false;  boolean rpSet=false;  boolean nativeEmpty=false;  boolean nativeSet=false;  boolean srdfEmpty=false;  boolean srdfSet=false;  for (  Copy copy : param.getCopies()) {    URI copyID=copy.getCopyID();    if (URIUtil.isValid(copyID)) {      if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {        rpEmpty=true;      } else       if (copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {        nativeEmpty=true;      } else       if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {        srdfEmpty=true;      }    } else {      if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {        rpSet=true;      } else       if (copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {        nativeSet=true;      } else       if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {        srdfSet=true;      }    }  }  if (rpEmpty && rpSet) {    throw APIException.badRequests.invalidCopyIDCombination(TechnologyType.RP.toString());  } else   if (nativeEmpty && nativeSet) {    throw APIException.badRequests.invalidCopyIDCombination(TechnologyType.NATIVE.toString());  } else   if (srdfEmpty && srdfSet) {    throw APIException.badRequests.invalidCopyIDCombination(TechnologyType.SRDF.toString());  }}  }
class C{  public ParenthesizedExpression createParenthesizedExpression(){  ParenthesizedExpressionImpl parenthesizedExpression=new ParenthesizedExpressionImpl();  return parenthesizedExpression;}  }
class C{  public boolean forEachKey(TLongProcedure procedure){  return forEach(procedure);}  }
class C{  public ConfirmPanel(boolean withCancelButton){  this(withCancelButton,false,false,false,false,false,true);}  }
class C{  public JPaymentCheque(JPaymentNotifier notifier){  m_notifier=notifier;  initComponents();  m_jTendered.addPropertyChangeListener("Edition",new RecalculateState());  m_jTendered.addEditorKeys(m_jKeys);}  }
class C{  public void defaultInit(){  addDataSources(INITIAL_DATA_SOURCES);}  }
class C{  public void addColumn(String name,Expression expr){  addColumn(name,ColumnFactory.getColumn(this,expr));}  }
class C{  public DiscoveryEvent(ClusterNode node,String msg,int type,ClusterNode evtNode){  super(node,msg,type);  this.evtNode=evtNode;}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (!isSeriesVisible(row)) {    return;  }  Shape entityArea;  EntityCollection entities=state.getEntityCollection();  double y1=0.0;  Number n=dataset.getValue(row,column);  if (n != null) {    y1=n.doubleValue();    if (this.renderAsPercentages) {      double total=DataUtilities.calculateColumnTotal(dataset,column,state.getVisibleSeriesArray());      y1=y1 / total;    }  }  double[] stack1=getStackValues(dataset,row,column,state.getVisibleSeriesArray());  double xx1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  double y0=0.0;  n=dataset.getValue(row,Math.max(column - 1,0));  if (n != null) {    y0=n.doubleValue();    if (this.renderAsPercentages) {      double total=DataUtilities.calculateColumnTotal(dataset,Math.max(column - 1,0),state.getVisibleSeriesArray());      y0=y0 / total;    }  }  double[] stack0=getStackValues(dataset,row,Math.max(column - 1,0),state.getVisibleSeriesArray());  double xx0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  int itemCount=dataset.getColumnCount();  double y2=0.0;  n=dataset.getValue(row,Math.min(column + 1,itemCount - 1));  if (n != null) {    y2=n.doubleValue();    if (this.renderAsPercentages) {      double total=DataUtilities.calculateColumnTotal(dataset,Math.min(column + 1,itemCount - 1),state.getVisibleSeriesArray());      y2=y2 / total;    }  }  double[] stack2=getStackValues(dataset,row,Math.min(column + 1,itemCount - 1),state.getVisibleSeriesArray());  double xx2=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  double xxLeft=xx0;  double xxRight=xx2;  double[] stackLeft=averageStackValues(stack0,stack1);  double[] stackRight=averageStackValues(stack1,stack2);  double[] adjStackLeft=adjustedStackValues(stack0,stack1);  double[] adjStackRight=adjustedStackValues(stack1,stack2);  float transY1;  RectangleEdge edge1=plot.getRangeAxisEdge();  GeneralPath left=new GeneralPath();  GeneralPath right=new GeneralPath();  if (y1 >= 0.0) {    transY1=(float)rangeAxis.valueToJava2D(y1 + stack1[1],dataArea,edge1);    float transStack1=(float)rangeAxis.valueToJava2D(stack1[1],dataArea,edge1);    float transStackLeft=(float)rangeAxis.valueToJava2D(adjStackLeft[1],dataArea,edge1);    if (y0 >= 0.0) {      double yleft=(y0 + y1) / 2.0 + stackLeft[1];      float transYLeft=(float)rangeAxis.valueToJava2D(yleft,dataArea,edge1);      left.moveTo((float)xx1,transY1);      left.lineTo((float)xx1,transStack1);      left.lineTo((float)xxLeft,transStackLeft);      left.lineTo((float)xxLeft,transYLeft);      left.closePath();    } else {      left.moveTo((float)xx1,transStack1);      left.lineTo((float)xx1,transY1);      left.lineTo((float)xxLeft,transStackLeft);      left.closePath();    }    float transStackRight=(float)rangeAxis.valueToJava2D(adjStackRight[1],dataArea,edge1);    if (y2 >= 0.0) {      double yright=(y1 + y2) / 2.0 + stackRight[1];      float transYRight=(float)rangeAxis.valueToJava2D(yright,dataArea,edge1);      right.moveTo((float)xx1,transStack1);      right.lineTo((float)xx1,transY1);      right.lineTo((float)xxRight,transYRight);      right.lineTo((float)xxRight,transStackRight);      right.closePath();    } else {      right.moveTo((float)xx1,transStack1);      right.lineTo((float)xx1,transY1);      right.lineTo((float)xxRight,transStackRight);      right.closePath();    }  } else {    transY1=(float)rangeAxis.valueToJava2D(y1 + stack1[0],dataArea,edge1);    float transStack1=(float)rangeAxis.valueToJava2D(stack1[0],dataArea,edge1);    float transStackLeft=(float)rangeAxis.valueToJava2D(adjStackLeft[0],dataArea,edge1);    if (y0 >= 0.0) {      left.moveTo((float)xx1,transStack1);      left.lineTo((float)xx1,transY1);      left.lineTo((float)xxLeft,transStackLeft);      left.clone();    } else {      double yleft=(y0 + y1) / 2.0 + stackLeft[0];      float transYLeft=(float)rangeAxis.valueToJava2D(yleft,dataArea,edge1);      left.moveTo((float)xx1,transY1);      left.lineTo((float)xx1,transStack1);      left.lineTo((float)xxLeft,transStackLeft);      left.lineTo((float)xxLeft,transYLeft);      left.closePath();    }    float transStackRight=(float)rangeAxis.valueToJava2D(adjStackRight[0],dataArea,edge1);    if (y2 >= 0.0) {      right.moveTo((float)xx1,transStack1);      right.lineTo((float)xx1,transY1);      right.lineTo((float)xxRight,transStackRight);      right.closePath();    } else {      double yright=(y1 + y2) / 2.0 + stackRight[0];      float transYRight=(float)rangeAxis.valueToJava2D(yright,dataArea,edge1);      right.moveTo((float)xx1,transStack1);      right.lineTo((float)xx1,transY1);      right.lineTo((float)xxRight,transYRight);      right.lineTo((float)xxRight,transStackRight);      right.closePath();    }  }  if (pass == 0) {    Paint itemPaint=getItemPaint(row,column);    g2.setPaint(itemPaint);    g2.fill(left);    g2.fill(right);    if (entities != null) {      GeneralPath gp=new GeneralPath(left);      gp.append(right,false);      entityArea=gp;      addItemEntity(entities,dataset,row,column,entityArea);    }  } else   if (pass == 1) {    drawItemLabel(g2,plot.getOrientation(),dataset,row,column,xx1,transY1,y1 < 0.0);  }}  }
class C{  public static void encodeVaxLong(OutputStream stream,long value) throws IOException {  stream.write(8);  encodeVaxLongWithoutLength(stream,value);}  }
class C{  @Override protected RrdBackend open(String path,boolean readOnly) throws IOException {  return new RrdNioBackend(path,readOnly,syncPeriod);}  }
class C{  public void addToCustomCategories(Category cat){}  }
class C{  public TunerChannelSource(Tuner tuner,TunerChannel tunerChannel) throws RejectedExecutionException, SourceException {  mTuner=tuner;  mTuner.getTunerController().addListener((IFrequencyChangeProcessor)this);  mTunerChannel=tunerChannel;  mTunerFrequency=mTuner.getTunerController().getFrequency();  long frequencyOffset=mTunerFrequency - mTunerChannel.getFrequency();  mMixer=new Oscillator(frequencyOffset,mTuner.getTunerController().getSampleRate());  frequencyChanged(new FrequencyChangeEvent(Event.NOTIFICATION_SAMPLE_RATE_CHANGE,mTuner.getTunerController().getSampleRate()));}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  public static String toHTML(final String markdownText){  if (Strings.isEmptyOrNull(markdownText)) {    return "";  }  final StringWriter writer=new StringWriter();  final Markdown markdown=new Markdown();  try {    markdown.transform(new StringReader(markdownText),writer);  } catch (  final ParseException e) {    return markdownText;  }  return writer.toString();}  }
class C{  public ImdnParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(mInputSource,this);    return this;  } catch (  IOException e) {    throw new ParseFailureException("Failed to parse input source!",e);  }}  }
class C{  protected ASN1Encodable encodeStringValue(ASN1ObjectIdentifier oid,String value){  return new DERUTF8String(value);}  }
class C{  private static CharSequence replaceIgnoreCase(CharSequence string,CharSequence sequence1,CharSequence escapeChar,Locale locale){  if (escapeChar == null || sequence1 == null || string == null)   throw new NullPointerException();  int count=string.length();  int sequence1Length=sequence1.length();  if (sequence1Length == 0) {    StringBuilder result=new StringBuilder((count + 1) * escapeChar.length());    result.append(escapeChar);    for (int i=0; i < count; i++) {      result.append(string.charAt(i));      result.append(escapeChar);    }    return result.toString();  }  StringBuilder result=new StringBuilder();  char first=sequence1.charAt(0);  int start=0, copyStart=0, firstIndex;  while (start < count) {    if ((firstIndex=string.toString().toLowerCase(locale).indexOf(first,start)) == -1)     break;    boolean found=true;    if (sequence1.length() > 1) {      if (firstIndex + sequence1Length > count)       break;      for (int i=1; i < sequence1Length; i++) {        if (string.toString().toLowerCase(locale).charAt(firstIndex + i) != sequence1.charAt(i)) {          found=false;          break;        }      }    }    if (found) {      result.append(string.toString().substring(copyStart,firstIndex));      result.append(escapeChar);      result.append(string.toString().substring(firstIndex,firstIndex + sequence1Length));      copyStart=start=firstIndex + sequence1Length;    } else {      start=firstIndex + 1;    }  }  if (result.length() == 0 && copyStart == 0)   return string;  result.append(string.toString().substring(copyStart));  return result.toString();}  }
class C{  public OrganizationAuthoritiesException(){  super();}  }
class C{  public static URI uriFrom(String handle){  if (handle.startsWith(N4FBPRJ)) {    return URI.createURI(handle.substring(N4FBPRJ.length()));  }  return null;}  }
class C{  public void bind(Class type,Class converter) throws Exception {  cache.cache(type,converter);}  }
class C{  public final static VersionInfo[] loadVersionInfo(String[] pckgs,ClassLoader clsldr){  if (pckgs == null) {    throw new IllegalArgumentException("Package identifier list must not be null.");  }  ArrayList vil=new ArrayList(pckgs.length);  for (int i=0; i < pckgs.length; i++) {    VersionInfo vi=loadVersionInfo(pckgs[i],clsldr);    if (vi != null)     vil.add(vi);  }  return (VersionInfo[])vil.toArray(new VersionInfo[vil.size()]);}  }
class C{  public SoftReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);  this.timestamp=clock;}  }
class C{  public static boolean isArray(Object obj){  return (obj != null && obj.getClass().isArray());}  }
class C{  private void design(){  mGrid=new Grid(mSpecification);  mExtremalIndices=getInitialExtremalIndices();  int iterationCount=0;  try {    do {      calculateGridFrequencyResponse();      calculateGridError();      findExtremalIndices();      checkConvergence();      iterationCount++;    } while (!mConverged && iterationCount < MAXIMUM_ITERATION_COUNT);  } catch (  FilterDesignException fde) {    mLog.error("Filter design error - couldn't find extremal indices at count [" + iterationCount + "] try changing filter order up/down from ["+ mSpecification.getOrder()+ "]");    mConverged=false;  }  if (mConverged) {    calculateGridFrequencyResponse();  }}  }
class C{  public int size(){  return n;}  }
class C{  public String pluralize(String word){  for (  String uncountable : uncountables) {    if (uncountable.equals(word)) {      return word;    }  }  for (  Replacer replacer : plurals) {    if (replacer.matches(word)) {      return replacer.replacement();    }  }  return word;}  }
class C{  public Object eval(CallStack callstack,Interpreter interpreter) throws EvalError {  throw new InterpreterError("Unimplemented or inappropriate for " + getClass().getName());}  }
class C{  public void doSearch(){  try {    this.clearStatusBarMessage();    ZonedDateTime startDate=TradingCalendar.getZonedDateTimeFromMilli(((java.util.Date)spinnerStart.getValue()).getTime());    startDate=TradingCalendar.getDateAtTime(startDate,0,0,0);    ZonedDateTime endDate=TradingCalendar.getZonedDateTimeFromMilli(((java.util.Date)spinnerEnd.getValue()).getTime());    endDate=TradingCalendar.getDateAtTime(endDate,23,59,59);    if (endDate.isBefore(startDate)) {      startDate=TradingCalendar.getDateAtTime(endDate,0,0,0);      spinnerStart.setValue((new Date(startDate)).getDate());    }    Tradingdays tradingdays=m_tradePersistentModel.findTradingdaysByDateRange(startDate,endDate);    Tradingday todayTradingday=tradingdays.getTradingday(TradingCalendar.getTradingDayStart(TradingCalendar.getDateTimeNowMarketTimeZone()),TradingCalendar.getTradingDayEnd(TradingCalendar.getDateTimeNowMarketTimeZone()));    if (null != todayTradingday) {      Tradingday currTodayTradingday=m_tradingdays.getTradingday(TradingCalendar.getTradingDayStart(TradingCalendar.getDateTimeNowMarketTimeZone()),TradingCalendar.getTradingDayEnd(TradingCalendar.getDateTimeNowMarketTimeZone()));      if (null != currTodayTradingday && !currTodayTradingday.getTradestrategies().isEmpty() && this.isConnected()) {        todayTradingday.populateStrategyData(currTodayTradingday);      }    }    m_tradingdays.getTradingdays().clear();    if (tradingdays.getTradingdays().isEmpty()) {      m_tradestrategyModel.setData(new Tradingday());      this.setStatusBarMessage("Did not find data for period From Date: " + TradingCalendar.getFormattedDate(startDate.toLocalDate(),DATEFORMAT) + " To Date: "+ TradingCalendar.getFormattedDate(endDate.toLocalDate(),DATEFORMAT),BasePanel.INFORMATION);    } else {      for (      Tradingday tradingday : tradingdays.getTradingdays()) {        m_tradingdays.add(tradingday);      }    }    m_tradingdayModel.setData(m_tradingdays);    RowSorter<?> rsDetail=m_tradingdayTable.getRowSorter();    rsDetail.setSortKeys(null);    RowSorter<?> rsSummary=m_tradestrategyTable.getRowSorter();    rsSummary.setSortKeys(null);    if (m_tradingdays.getTradingdays().size() > 0) {      m_tradingdayTable.setRowSelectionInterval(0,0);    } else {      m_tradestrategyModel.setData(new Tradingday());    }    m_tradestrategyTable.enablePopupMenu(true);    enableTradestrategyButtons(null);  } catch (  Exception ex) {    this.setErrorMessage("Error finding Tradingday.",ex.getMessage(),ex);  }}  }
class C{  public TranscoderOutput(XMLFilter xmlFilter){  this.xmlFilter=xmlFilter;}  }
class C{  public void persist(){  OutputStream os=null;  try {    os=new FileOutputStream(fallbackStorageFile);    fallbackStorage.store(os,"Generated");    LOG.debug("fallback storage written to {}",fallbackStorageFile);  } catch (  final IOException e) {    LOG.warn("Cannot persist fallback storage: {}.",fallbackStorageFile,e);  } finally {    IOUtils.closeQuietly(os);  }}  }
class C{  public FadeInAnimation(View view){  this.view=view;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  private void parseIsolationClause(){  if (readIf("WITH")) {    if (readIf("RR") || readIf("RS")) {      if (readIf("USE")) {        read("AND");        read("KEEP");        if (readIf("SHARE") || readIf("UPDATE") || readIf("EXCLUSIVE")) {        }        read("LOCKS");      }    } else     if (readIf("CS") || readIf("UR")) {    }  }}  }
class C{  public static String xmlComment(String data){  int idx=0;  while (true) {    idx=data.indexOf("--",idx);    if (idx < 0) {      break;    }    data=data.substring(0,idx + 1) + " " + data.substring(idx + 1);  }  if (data.indexOf('\n') >= 0) {    return "<!--\n" + indent(data) + "-->\n";  }  return "<!-- " + data + " -->\n";}  }
class C{  public static String utf8Encode(String str,String defultReturn){  if (!isEmpty(str) && str.getBytes().length != str.length()) {    try {      return URLEncoder.encode(str,"UTF-8");    } catch (    UnsupportedEncodingException e) {      return defultReturn;    }  }  return str;}  }
class C{  public static Date evenHourDate(Date date){  if (date == null) {    date=new Date();  }  Calendar c=Calendar.getInstance();  c.setTime(date);  c.setLenient(true);  c.set(Calendar.HOUR_OF_DAY,c.get(Calendar.HOUR_OF_DAY) + 1);  c.set(Calendar.MINUTE,0);  c.set(Calendar.SECOND,0);  c.set(Calendar.MILLISECOND,0);  return c.getTime();}  }
class C{  private boolean isParentLoader(ClassLoader parent,ClassLoader child){  for (; child != null; child=child.getParent()) {    if (child == parent)     return true;  }  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.UNARY_EXPRESSION__OP:    setOp((UnaryOperator)newValue);  return;case N4JSPackage.UNARY_EXPRESSION__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Path("info") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public InfoResponse info(final InfoRequest request) throws ApiException, IOException {  request.withProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.info(request);}  }
class C{  public static String createExtId(Attachment attachment){  String extId=attachment.getExtId();  if (extId == null || extId.isEmpty()) {    extId=attachment.getEntity().getId();  }  return extId;}  }
class C{  private void synchronizeDebugger(final IDebugger oldDebugger,final IDebugger newDebugger){  if (oldDebugger != null) {    oldDebugger.getProcessManager().removeListener(m_processListener);  }  m_model.reset();  if (newDebugger != null) {    for (    final TargetProcessThread thread : newDebugger.getProcessManager().getThreads()) {      m_model.addThread(thread);    }    newDebugger.getProcessManager().addListener(m_processListener);  }}  }
class C{  protected String paramString(){  String labelString=(label != null ? label : "");  String paintBorderString=(paintBorder ? "true" : "false");  String marginString=(margin != null ? margin.toString() : "");  String lightWeightPopupEnabledString=(isLightWeightPopupEnabled() ? "true" : "false");  return super.paramString() + ",desiredLocationX=" + desiredLocationX+ ",desiredLocationY="+ desiredLocationY+ ",label="+ labelString+ ",lightWeightPopupEnabled="+ lightWeightPopupEnabledString+ ",margin="+ marginString+ ",paintBorder="+ paintBorderString;}  }
class C{  @Override public boolean shouldExecute(){  if (entity.getCurrentTask() != null || entity.riddenByEntity != null) {    return false;  } else   if (nextMoveTime < System.currentTimeMillis()) {    Vec3 vec3=RandomPositionGenerator.findRandomTarget(this.entity,6,4);    if (vec3 == null) {      return false;    } else {      this.xPosition=vec3.xCoord;      this.yPosition=vec3.yCoord;      this.zPosition=vec3.zCoord;      nextMoveTime=System.currentTimeMillis() + (long)(moveTimeIntervals * entity.getRNG().nextFloat());      return true;    }  }  return false;}  }
class C{  private String decryptPassword(String password,String settingValue) throws Exception {  String decryptedPassword=null;  if (password.startsWith(CRYTO_PREFIX)) {    decryptedPassword=password.substring(password.indexOf(":") + 1,password.length());    encryptPasswordInDatabase(decryptedPassword,settingValue);  } else {    decryptedPassword=AESEncrypter.decrypt(password);  }  return decryptedPassword;}  }
class C{  private boolean loadCache(Class cfg,String basename,ConfigurationFilter filter){  int count=0;  Method methods[]=cfg.getMethods();  for (int m=0; m < methods.length; ++m) {    Method method=methods[m];    if (method.getName().startsWith(SET_PREFIX)) {      Class[] pt=method.getParameterTypes();      if ((pt.length > 1) && (pt[0] == ConfigurationValue.class)) {        ConfigurationInfo info=createInfo(method);        String leafname=c2h(method.getName().substring(SET_PREFIX.length()));        String name=varname(leafname,basename);        if (filter == null || filter.select(name)) {          varCache.put(name,info);          varList.add(name);          if (info.isRequired()) {            requiredList.add(name);          }          ++count;        }      }    }  }  for (int m=0; m < methods.length; ++m) {    Method method=methods[m];    if (method.getName().startsWith(GET_PREFIX) && method.getName().endsWith(CONFIGURATION_SUFFIX)) {      String leafname=c2h(method.getName().substring(GET_PREFIX.length(),method.getName().length() - CONFIGURATION_SUFFIX.length()));      String fullname=varname(leafname,basename);      if (loadCache(method.getReturnType(),fullname,filter)) {        childCache.put(fullname,method.getReturnType());        ++count;      }    } else {      continue;    }  }  assert (count > 0 || filter != null) : "coding error: config class " + cfg.getName() + " did not define any setters or child configs";  return (count > 0);}  }
class C{  private boolean collectRemoteMethods(ClassDefinition interfaceDef,Hashtable<String,Method> table){  if (!interfaceDef.isInterface()) {    throw new Error("expected interface, not class: " + interfaceDef.getName());  }  boolean errors=false;  nextMember:   for (MemberDefinition member=interfaceDef.getFirstMember(); member != null; member=member.getNextMember()) {    if (member.isMethod() && !member.isConstructor() && !member.isInitializer()) {      ClassDeclaration[] exceptions=member.getExceptions(env);      boolean hasRemoteException=false;      for (int i=0; i < exceptions.length; i++) {        try {          if (defRemoteException.subClassOf(env,exceptions[i])) {            hasRemoteException=true;            break;          }        } catch (        ClassNotFound e) {          env.error(0,"class.not.found",e.name,interfaceDef.getName());          continue nextMember;        }      }      if (!hasRemoteException) {        env.error(0,"rmic.must.throw.remoteexception",interfaceDef.getName(),member.toString());        errors=true;        continue nextMember;      }      try {        MemberDefinition implMethod=implClassDef.findMethod(env,member.getName(),member.getType());        if (implMethod != null) {          exceptions=implMethod.getExceptions(env);          for (int i=0; i < exceptions.length; i++) {            if (!defException.superClassOf(env,exceptions[i])) {              env.error(0,"rmic.must.only.throw.exception",implMethod.toString(),exceptions[i].getName());              errors=true;              continue nextMember;            }          }        }      } catch (      ClassNotFound e) {        env.error(0,"class.not.found",e.name,implClassDef.getName());        continue nextMember;      }      Method newMethod=new Method(member);      String key=newMethod.getNameAndDescriptor();      Method oldMethod=table.get(key);      if (oldMethod != null) {        newMethod=newMethod.mergeWith(oldMethod);        if (newMethod == null) {          errors=true;          continue nextMember;        }      }      table.put(key,newMethod);    }  }  try {    ClassDeclaration[] superDefs=interfaceDef.getInterfaces();    for (int i=0; i < superDefs.length; i++) {      ClassDefinition superDef=superDefs[i].getClassDefinition(env);      if (!collectRemoteMethods(superDef,table))       errors=true;    }  } catch (  ClassNotFound e) {    env.error(0,"class.not.found",e.name,interfaceDef.getName());    return false;  }  return !errors;}  }
class C{  public String entityToType(final Killer entity){  if (entity instanceof Player) {    return "P";  } else   if (entity instanceof Creature) {    return "C";  } else {    return "E";  }}  }
class C{  public String sqlObject_dropView(String vendorName,String catalogName,String schemaName,String viewName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_dropView(catalogName,schemaName,viewName);}  }
class C{  public LocationPK(String area,String aisle,String x,String y,String z){  this.area=area;  this.aisle=aisle;  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public DelegatingResourceLoader(){  this(null,null);}  }
class C{  public synchronized boolean isExpired(long now){  if (expirationTime == -1)   return false; else   if (expirationTime < now)   return true; else   return expired;}  }
class C{  private boolean shouldBeAutoAccepted(){  long ftWarnSize=mRcsSettings.getWarningMaxFileTransferSize();  if (ftWarnSize > 0 && getContent().getSize() > ftWarnSize) {    return false;  }  if (getImsService().getImsModule().isInRoaming()) {    return mRcsSettings.isFileTransferAutoAcceptedInRoaming();  }  return mRcsSettings.isFileTransferAutoAccepted();}  }
class C{  @SuppressWarnings("unchecked") private BoundStatement recordToBoundStatement(Record record) throws StageException {  ImmutableList.Builder<Object> values=new ImmutableList.Builder<>();  SortedSet<String> columnsPresent=Sets.newTreeSet(columnMappings.keySet());  for (  Map.Entry<String,String> mapping : columnMappings.entrySet()) {    String columnName=mapping.getKey();    String fieldPath=mapping.getValue();    if (!record.has(fieldPath)) {      columnsPresent.remove(columnName);      continue;    }    final Object value=record.get(fieldPath).getValue();    if (value instanceof List) {      List<Object> unpackedList=new ArrayList<>();      for (      Field item : (List<Field>)value) {        unpackedList.add(item.getValue());      }      values.add(unpackedList);    } else     if (value instanceof Map) {      Map<Object,Object> unpackedMap=new HashMap<>();      for (      Map.Entry<String,Field> entry : ((Map<String,Field>)value).entrySet()) {        unpackedMap.put(entry.getKey(),entry.getValue().getValue());      }      values.add(unpackedMap);    } else {      values.add(value);    }  }  PreparedStatement stmt=statementCache.getUnchecked(columnsPresent);  Object[] valuesArray=values.build().toArray();  BoundStatement boundStmt=null;  try {    boundStmt=stmt.bind(valuesArray);  } catch (  CodecNotFoundException|InvalidTypeException|NullPointerException e) {    errorRecordHandler.onError(new OnRecordErrorException(record,Errors.CASSANDRA_06,record.getHeader().getSourceId(),e.toString(),e));  }  return boundStmt;}  }
class C{  public static double[][] floydWarshallShortestPathsMatrix(final Network network,final EdgeMetric computer){  final int N=getNumberNodes(network);  double[][] result=new double[N][N];  for (int i=0; i < N; i++)   for (int j=0; j < N; j++)   result[i][j]=Double.POSITIVE_INFINITY;  for (int i=0; i < N; i++) {    Bag bag=network.getEdgesOut(network.allNodes.objs[i]);    for (int j=0; j < bag.numObjs; j++) {      Edge edge=(Edge)(bag.objs[j]);      result[i][network.getNodeIndex(edge.getOtherNode(network.allNodes.objs[i]))]=computer.getWeight(edge);    }  }  for (int i=0; i < N; i++)   result[i][i]=0;  for (int k=0; k < N; k++)   for (int i=0; i < N; i++)   for (int j=0; j < N; j++)   if (result[i][j] > result[i][k] + result[k][j])   result[i][j]=result[i][k] + result[k][j];  return result;}  }
class C{  public boolean hasChildNodes(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  public vec3 div(vec3 a,vec3 b){  this.m[0]=a.m[0] / b.m[0];  this.m[1]=a.m[1] / b.m[1];  this.m[2]=a.m[2] / b.m[2];  return this;}  }
class C{  ResultPanelModel(){  super(SearchResultDataLine.class);}  }
class C{  public UserEntry removeAdminPrivilege(String username) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Removing admin privileges for user '" + username + "'.");  URL retrieveUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  UserEntry userEntry=userService.getEntry(retrieveUrl,UserEntry.class);  userEntry.getLogin().setAdmin(false);  URL updateUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  return userService.update(updateUrl,userEntry);}  }
class C{  private void createProduction(){  int noProds=0;  String info="";  MProduction production=null;  MWarehouse wh=null;  X_T_Replenish[] replenishs=getReplenish("M_WarehouseSource_ID IS NULL " + "AND EXISTS (SELECT * FROM M_Product p WHERE p.M_Product_ID=T_Replenish.M_Product_ID " + "AND p.IsBOM='Y' AND p.IsManufactured='Y') ");  for (int i=0; i < replenishs.length; i++) {    X_T_Replenish replenish=replenishs[i];    if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())     wh=MWarehouse.get(getCtx(),replenish.getM_Warehouse_ID());    BigDecimal batchQty=null;    BigDecimal qtyToProduce=replenish.getQtyToOrder();    while (qtyToProduce.compareTo(Env.ZERO) > 0) {      BigDecimal qty=qtyToProduce;      if (batchQty != null && batchQty.compareTo(Env.ZERO) > 0 && qtyToProduce.compareTo(batchQty) > 0) {        qty=batchQty;        qtyToProduce=qtyToProduce.subtract(batchQty);      } else {        qtyToProduce=Env.ZERO;      }      production=new MProduction(getCtx(),0,get_TrxName());      production.setDescription(Msg.getMsg(getCtx(),"Replenishment"));      production.setAD_Org_ID(wh.getAD_Org_ID());      production.setM_Locator_ID(wh.getDefaultLocator().get_ID());      production.setM_Product_ID(replenish.getM_Product_ID());      production.setProductionQty(qty);      production.setMovementDate(Env.getContextAsDate(getCtx(),"#Date"));      production.saveEx();      production.createLines(false);      production.setIsCreated("Y");      production.save(get_TrxName());      log.fine(production.toString());      noProds++;      info+=" - " + production.getDocumentNo();    }  }  m_info="#" + noProds + info;  log.info(m_info);}  }
class C{  public void bind(String name,java.lang.Object obj) throws NamingException {  bind(new CompositeName(name),obj);}  }
class C{  public void testClearBitPositiveInside5(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=63;  byte rBytes[]={1,-128,56,100,-2,52,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void uploadSucceeded(final String filename,final SoftwareModule softwareModule){  final Item item=uploads.getItem(getItemid(filename,softwareModule));  final String status="Finished";  if (item != null) {    item.getItemProperty(STATUS).setValue(status);  }  final List<UploadStatusObject> uploadStatusObjectList=artifactUploadState.getUploadedFileStatusList().stream().filter(null).collect(Collectors.toList());  if (!uploadStatusObjectList.isEmpty()) {    final UploadStatusObject uploadStatusObject=uploadStatusObjectList.get(0);    uploadStatusObject.setStatus(status);    uploadStatusObject.setProgress(1d);  }}  }
class C{  public static void addCloseListener(AutoCloseable obj){  addClassLoaderListener(new CloseListener(obj));}  }
class C{  @CanIgnoreReturnValue public Builder<C> addAll(RangeSet<C> ranges){  for (  Range<C> range : ranges.asRanges()) {    add(range);  }  return this;}  }
class C{  public StrBuilder deleteFirst(char ch){  for (int i=0; i < size; i++) {    if (buffer[i] == ch) {      deleteImpl(i,i + 1,1);      break;    }  }  return this;}  }
class C{  public SQLTransientConnectionException(Throwable cause){  super(cause);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private SolutionSetStream _create(final String fqn,final ISPO[] params){  SolutionSetStream sset=getSolutionSet(fqn);  if (sset != null)   throw new RuntimeException("Exists: " + fqn);  if (log.isInfoEnabled())   log.info("Create: fqn=" + fqn + ", params="+ Arrays.toString(params));  final StreamIndexMetadata md=new StreamIndexMetadata(fqn,UUID.randomUUID());  md.setStreamClassName(SolutionSetStream.class.getName());  sset=(SolutionSetStream)getStore().register(fqn,md);  return sset;}  }
class C{  public static int min(int x,int y){  return (x < y) ? x : y;}  }
class C{  public static void main(String[] args){  StdDraw.square(.2,.8,.1);  StdDraw.filledSquare(.8,.8,.2);  StdDraw.circle(.8,.2,.2);  StdDraw.setPenColor(StdDraw.BOOK_RED);  StdDraw.setPenRadius(.02);  StdDraw.arc(.8,.2,.1,200,45);  StdDraw.setPenRadius();  StdDraw.setPenColor(StdDraw.BOOK_BLUE);  double[] x={.1,.2,.3,.2};  double[] y={.2,.3,.2,.1};  StdDraw.filledPolygon(x,y);  StdDraw.setPenColor(StdDraw.BLACK);  StdDraw.text(0.2,0.5,"black text");  StdDraw.setPenColor(StdDraw.WHITE);  StdDraw.text(0.8,0.8,"white text");}  }
class C{  public static int convertFillRule(Element e){  Value v=getComputedStyle(e,SVGCSSEngine.FILL_RULE_INDEX);  return (v.getStringValue().charAt(0) == 'n') ? GeneralPath.WIND_NON_ZERO : GeneralPath.WIND_EVEN_ODD;}  }
class C{  public void testGetDataLength(){  char expectedReturn=(char)nonceValue.length();  char actualReturn=nonceAttribute.getDataLength();  assertEquals("getDataLength - failed",expectedReturn,actualReturn);}  }
class C{  public Object put(Object key,Object value){  checkKey(key);  return map.put(key,value);}  }
class C{  public void testStringValReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new BinaryDocValuesField("value",new BytesRef("bar")));  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new BinaryDocValuesField("value",new BytesRef("foo")));  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.STRING_VAL,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals("foo",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("bar",searcher.doc(td.scoreDocs[1].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public static Point[] toPointArray(Collection points){  Point[] pointArray=new Point[points.size()];  return (Point[])points.toArray(pointArray);}  }
class C{  @Override public void trace(String msg){  if (logger.isLoggable(Level.FINEST)) {    log(SELF,Level.FINEST,msg,null);  }}  }
class C{  public static FSInfo instance(Context context){  FSInfo instance=context.get(FSInfo.class);  if (instance == null)   instance=new FSInfo();  return instance;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isInitialRangeSet(int scale){  return initialRange.get(scale) != null;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"STR");  translateAll(environment,instruction,"STR",instructions);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TFloatObjectHashMap)) {    return false;  }  TFloatObjectHashMap that=(TFloatObjectHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure<V>(that));}  }
class C{  public synchronized void flushBuffer() throws IOException {  flushBuffer0();  if (this.efs != null)   this.efs.flushBuffer();}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required){  this.m_has_required=has_required;  build(namespace,name,nameAlias,elements,attributes,contentHandler,classObject);  if ((null != namespace) && (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || namespace.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {    schema.addAvailableElement(new QName(namespace,name));    if (null != nameAlias)     schema.addAvailableElement(new QName(namespace,nameAlias));  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  public synchronized void cp(String sessionID,String sourcePath,String destinationPath) throws DirectoryException, DirectoryNotFoundException {  ResourceNode destination=null;  ResourceNode source=null;  if (sourcePath == null || destinationPath == null) {    throw new DirectoryException("cp: <source> <destination>: missing operand");  }  try {    source=locate(sessionID,sourcePath);  } catch (  DirectoryNotFoundException c) {    throw new DirectoryException(String.format("cp: the source element '%s' does not exist",sourcePath));  }  try {    destination=locate(sessionID,destinationPath);    if (!destination.getResource().isContainer() || destination.getResource().getType() == source.getResource().getType()) {      throw new DirectoryException(String.format("cp: cannot copy over an existing element '%s'",destinationPath));    }  } catch (  DirectoryNotFoundException c) {  }  if (destination == null) {    if (lastElement(destinationPath).equals(elementPrefix(destinationPath))) {      destination=getCurrentNode(sessionID);    } else {      destination=locate(sessionID,elementPrefix(destinationPath));    }  }  Resource copy=null;  try {    copy=ResourceFactory.copyInstance(source,lastElement(destinationPath),destination,this);  } catch (  ResourceException c) {    throw new DirectoryException(String.format("unable to create a copy of '%s', reason='%s'",sourcePath,c.getMessage()));  }  destination.addChild(copy);  flush();}  }
class C{  public static long toLong(int a,int b){  return ((long)b << INT_SIZE) | (a & INT_MASK);}  }
class C{  public FastStringBuffer fsb(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FSB_NOT_SUPPORTED_XSTRINGFORCHARS,null));}  }
class C{  public void add(EventBean[] events){  if (events != null) {    remainEvents.add(events);  }}  }
class C{  public static <T>FutureW<T> ofSupplier(final Supplier<T> s,final Executor ex){  return FutureW.of(CompletableFuture.supplyAsync(s,ex));}  }
class C{  public Boolean isDigestValueMatch(){  return digestValueMatch;}  }
class C{  public boolean isSetSyncOffer(){  return this.syncOffer != null;}  }
class C{  public HAVING HAVING(String having){  return new HAVING(this,having);}  }
class C{  public RangeQueryBuilder(String name){  this.name=name;}  }
class C{  static void listConfig(){  try {    byte[] buf=new byte[256];    int len;    while ((len=confstr.read(buf)) != -1)     repstr.write(buf,0,len);  } catch (  IOException e) {    die("Error: failed to list config file");  }}  }
class C{  @Override public final Iterator<Map.Entry<K,V>> iterator(){  return entrySet().iterator();}  }
class C{  @RequestMapping(value="/businessObjectData/restore/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}" + "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}" + "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}"+ "/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_RESTORE_POST) public BusinessObjectData restoreBusinessObjectData(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestParam(value="subPartitionValues",required=false) DelimitedFieldValues subPartitionValues){  return businessObjectDataService.restoreBusinessObjectData(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,getList(subPartitionValues),businessObjectDataVersion));}  }
class C{  public boolean isMissingValue(Object value){  if (value instanceof Double) {    double doubleValue=(Double)value;    return Double.isNaN(doubleValue);  }  return false;}  }
class C{  public static int applyColorAlpha(int color,float alpha){  final int originalAlpha=Color.alpha(color);  return (color & 0x00ffffff) | (Math.round(originalAlpha * alpha) << 24);}  }
class C{  public static Date dayBefore(final Date date){  return dateFrom(date,1,CalendarUnit.DAY,Occurrence.BEFORE);}  }
class C{  public static double[] one(int m){  return fill(m,1.0);}  }
class C{  private void storeOriginal(Pair<String,Object> keyValue){  String key=SharedPreferenceUtils.keyTestMode + keyValue.first;  if (!preferenceUtils.isValueExistForKey(key)) {    preferenceUtils.put(key,keyValue.second);  }}  }
class C{  @Override @SuppressWarnings("UnnecessaryBoxing") public void resetFrame(){synchronized (lock) {    sysName.setText("IAB" + counter++);  }  userName.setText(null);  url.setText(null);  stream.setSelected(false);  stream.setEnabled(false);  loopStart.setValue(Long.valueOf(0));  loopEnd.setValue(Long.valueOf(0));  this.newBuffer=true;}  }
class C{  public static void C_OrderLine(MOrderLine ol){  if (ol.isConsumesForecast())   return;  MPPMRP mrp=getQuery(ol,null,null).firstOnly();  if (mrp == null) {    mrp=new MPPMRP(ol.getCtx(),0,ol.get_TrxName());    mrp.setC_OrderLine_ID(ol.getC_OrderLine_ID());  }  mrp.setAD_Org_ID(ol.getAD_Org_ID());  mrp.setC_Order(ol.getParent());  mrp.setDescription(ol.getDescription());  mrp.setName("MRP");  mrp.setDatePromised(ol.getDatePromised());  mrp.setDateStartSchedule(ol.getDatePromised());  mrp.setDateFinishSchedule(ol.getDatePromised());  mrp.setDateOrdered(ol.getDateOrdered());  mrp.setM_Warehouse_ID(ol.getM_Warehouse_ID());  mrp.setM_Product_ID(ol.getM_Product_ID());  mrp.setQty(ol.getQtyOrdered().subtract(ol.getQtyDelivered()));  mrp.saveEx();  MOrder o=ol.getParent();  MDocType dt=MDocType.get(o.getCtx(),o.getC_DocTypeTarget_ID());  String DocSubTypeSO=dt.getDocSubTypeSO();  MProduct product=(MProduct)ol.getM_Product();  if (MDocType.DOCSUBTYPESO_StandardOrder.equals(DocSubTypeSO) && product.isBOM() && !product.isPurchased()&& IsProductMakeToOrder(ol.getCtx(),ol.getM_Product_ID(),ol.get_TrxName())) {    MPPMRP.createMOMakeTo(ol,ol.getQtyOrdered());  }  return;}  }
class C{  final long internalNextLong(long origin,long bound){  long r=mix64(nextSeed());  if (origin < bound) {    long n=bound - origin, m=n - 1;    if ((n & m) == 0L)     r=(r & m) + origin; else     if (n > 0L) {      for (long u=r >>> 1; u + m - (r=u % n) < 0L; u=mix64(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=mix64(nextSeed());    }  }  return r;}  }
class C{  public void nextBytes(byte[] bytes){  int numRequested=bytes.length;  int numGot=0, rnd=0;  while (true) {    for (int i=0; i < BYTES_PER_INT; i++) {      if (numGot == numRequested) {        return;      }      rnd=(i == 0 ? next(BITS_PER_BYTE * BYTES_PER_INT) : rnd >> BITS_PER_BYTE);      bytes[numGot++]=(byte)rnd;    }  }}  }
class C{  @Deprecated public List<Reference> listByTimeRange(Long startTime,Long endTime){  UriBuilder builder=client.uriBuilder(baseUrl + "/all");  if (startTime != null) {    builder.queryParam("startTime",startTime);  }  if (endTime != null) {    builder.queryParam("endTime",endTime);  }  return getApiListUri(client,new GenericType<List<Reference>>(){  },builder.build());}  }
class C{  public static void checkIngestionRequestValidForUnManagedVolumes(List<URI> unManagedVolumes,VirtualPool vPool,DbClient dbClient) throws IngestionException {  for (  URI unManagedVolumeUri : unManagedVolumes) {    UnManagedVolume unManagedVolume=dbClient.queryObject(UnManagedVolume.class,unManagedVolumeUri);    checkUnmanagedVolumePartiallyDiscovered(unManagedVolume,unManagedVolumeUri);    StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();    try {      if (checkUnManagedResourceAddedToConsistencyGroup(unManagedVolume) && !vPool.getMultivolumeConsistency()) {        _logger.error(String.format("The requested Virtual Pool %s does not have the Multi-Volume Consistency flag set, and unmanage volume %s is part of a consistency group.",vPool.getLabel(),unManagedVolume.getLabel()));        throw APIException.internalServerErrors.unmanagedVolumeVpoolConsistencyGroupMismatch(vPool.getLabel(),unManagedVolume.getLabel());      }      if (isSnapshot(unManagedVolume) && 0 == vPool.getMaxNativeSnapshots()) {        throw APIException.internalServerErrors.noMaxSnapshotsDefinedInVirtualPool(vPool.getLabel(),unManagedVolume.getLabel());      }      if (!isVplexVolume(unManagedVolume) && !isSnapshot(unManagedVolume)) {        checkStoragePoolValidForUnManagedVolumeUri(unManagedVolumeInformation,dbClient,unManagedVolumeUri);      }      if (!isVplexBackendVolume(unManagedVolume)) {        checkVPoolValidForGivenUnManagedVolumeUris(unManagedVolumeInformation,unManagedVolume,vPool.getId(),dbClient);      }    } catch (    APIException ex) {      _logger.error(ex.getLocalizedMessage());      throw IngestionException.exceptions.validationException(ex.getLocalizedMessage());    }  }}  }
class C{  @RequestMapping(value="/authenticate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public String isAuthenticated(HttpServletRequest request){  log.debug("REST request to check if the current user is authenticated");  return request.getRemoteUser();}  }
class C{  public void rerouteViaLink(TransitRoute transitRoute,Id<Link> oldLinkId,Id<Link> newLinkId){  List<TransitRouteStop> stopSequence=transitRoute.getStops();  List<Id<Link>> linkSequence=transitRoute.getRoute().getLinkIds();  List<Id<Link>> refLinkIds=stopSequence.stream().map(null).collect(Collectors.toList());  if (refLinkIds.contains(oldLinkId)) {    throw new IllegalArgumentException("Link is referenced to a stop facility, rerouteViaLink cannot be performed. Use changeRefLink instead.");  } else {    int i=0;    TransitRouteStop fromRouteStop=stopSequence.get(i);    for (    Id<Link> linkId : linkSequence) {      if (linkId.equals(oldLinkId)) {        rerouteFromStop(transitRoute,fromRouteStop,newLinkId);        break;      }      if (linkId.equals(refLinkIds.get(i))) {        fromRouteStop=stopSequence.get(i++);        i++;      }    }  }}  }
class C{  public JDIPermission(String name,String actions) throws IllegalArgumentException {  super(name);  if (!name.equals("virtualMachineManager")) {    throw new IllegalArgumentException("name: " + name);  }  if (actions != null && actions.length() > 0) {    throw new IllegalArgumentException("actions: " + actions);  }}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return decode((byte[])pObject);  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be URL decoded");  }}  }
class C{  public void characters(char[] ch,int start,int length) throws SAXException {  if (currentElement.compareTo("URLBase") == 0)   device.setURLBase(new String(ch,start,length)); else   if (state <= 1) {    if (state == 0) {      if ("friendlyName".compareTo(currentElement) == 0)       device.setFriendlyName(new String(ch,start,length)); else       if ("manufacturer".compareTo(currentElement) == 0)       device.setManufacturer(new String(ch,start,length)); else       if ("modelDescription".compareTo(currentElement) == 0)       device.setModelDescription(new String(ch,start,length)); else       if ("presentationURL".compareTo(currentElement) == 0)       device.setPresentationURL(new String(ch,start,length)); else       if ("modelNumber".compareTo(currentElement) == 0)       device.setModelNumber(new String(ch,start,length)); else       if ("modelName".compareTo(currentElement) == 0)       device.setModelName(new String(ch,start,length));    }    if (currentElement.compareTo("serviceType") == 0)     device.setServiceTypeCIF(new String(ch,start,length)); else     if (currentElement.compareTo("controlURL") == 0)     device.setControlURLCIF(new String(ch,start,length)); else     if (currentElement.compareTo("eventSubURL") == 0)     device.setEventSubURLCIF(new String(ch,start,length)); else     if (currentElement.compareTo("SCPDURL") == 0)     device.setSCPDURLCIF(new String(ch,start,length)); else     if (currentElement.compareTo("deviceType") == 0)     device.setDeviceTypeCIF(new String(ch,start,length));  } else   if (state == 2) {    if (currentElement.compareTo("serviceType") == 0)     device.setServiceType(new String(ch,start,length)); else     if (currentElement.compareTo("controlURL") == 0)     device.setControlURL(new String(ch,start,length)); else     if (currentElement.compareTo("eventSubURL") == 0)     device.setEventSubURL(new String(ch,start,length)); else     if (currentElement.compareTo("SCPDURL") == 0)     device.setSCPDURL(new String(ch,start,length)); else     if (currentElement.compareTo("deviceType") == 0)     device.setDeviceType(new String(ch,start,length));  }}  }
class C{  public void attemptCreate(){  String name=edit_nome.getText().toString();  String email=edit_email.getText().toString();  String password=edit_password.getText().toString();  boolean cancel=false;  View focusView=null;  ValidateUserInfo validate=new ValidateUserInfo();  if (TextUtils.isEmpty(name)) {    edit_nome.setError(getString(R.string.error_field_required));    focusView=edit_nome;    cancel=true;  } else   if (TextUtils.isEmpty(email)) {    edit_email.setError(getString(R.string.error_field_required));    focusView=edit_email;    cancel=true;  } else   if (!validate.isEmailValid(email)) {    edit_email.setError(getString(R.string.error_invalid_email));    focusView=edit_email;    cancel=true;  } else   if (TextUtils.isEmpty(password)) {    edit_password.setError(getString(R.string.error_field_required));    focusView=edit_password;    cancel=true;  } else   if (!validate.isPasswordValid(password)) {    edit_password.setError(getString(R.string.error_invalid_password));    focusView=edit_password;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    mCreateTask=new CreateUserTask(name,email,password);    mCreateTask.execute((Void)null);  }}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  private static AxSf loadAxSfInOutAttributes(Session session,AxSf axsfAux,Map map,String language,String entidad) throws HibernateException, SQLException, Exception {  if (axsfAux instanceof AxSfIn) {    if (axsfAux.getAttributeValueAsString(AxSf.FLD13_FIELD) != null) {      try {        Integer id=new Integer(axsfAux.getAttributeValueAsString(AxSf.FLD13_FIELD));        ScrOrg org=null;        if (map.containsKey(HIBERNATE_ScrOrg + id)) {          org=(ScrOrg)map.get(HIBERNATE_ScrOrg + id);        } else {          org=ISUnitsValidator.getEntRegById(session,id);          map.put(HIBERNATE_ScrOrg + id,org);        }        if (!language.equals("es")) {          ((AxSfIn)axsfAux).setFld13Name(DBEntityDAOFactory.getCurrentDBEntityDAO().getDescriptionByLocale(org.getId(),false,false,language,EntityByLanguage.getTableName(13),entidad));        } else {          ((AxSfIn)axsfAux).setFld13Name(org.getName());        }        ((AxSfIn)axsfAux).setFld13(org);      } catch (      ValidationException VE) {      }    }    if (axsfAux.getAttributeValueAsString(AxSf.FLD16_FIELD) != null) {      try {        Integer id=new Integer(axsfAux.getAttributeValueAsString(AxSf.FLD16_FIELD));        ScrCa ca=null;        if (map.containsKey(HIBERNATE_ScrCa + id)) {          ca=(ScrCa)map.get(HIBERNATE_ScrCa + id);        } else {          ca=ISSubjectsValidator.getSubjectById(session,id);          map.put(HIBERNATE_ScrCa + id,ca);        }        if (!language.equals("es")) {          ((AxSfIn)axsfAux).setFld16Name(DBEntityDAOFactory.getCurrentDBEntityDAO().getDescriptionByLocale(ca.getId(),false,true,language,EntityByLanguage.getTableName(16),entidad));        } else {          ((AxSfIn)axsfAux).setFld16Name(ca.getMatter());        }        ((AxSfIn)axsfAux).setFld16(ca);      } catch (      ValidationException VE) {      }    }  } else {    if (axsfAux.getAttributeValueAsString(AxSf.FLD12_FIELD) != null) {      try {        Integer id=new Integer(axsfAux.getAttributeValueAsString(AxSf.FLD12_FIELD));        ScrCa ca=null;        if (map.containsKey(HIBERNATE_ScrCa + id)) {          ca=(ScrCa)map.get(HIBERNATE_ScrCa + id);        } else {          ca=ISSubjectsValidator.getSubjectById(session,id);          map.put(HIBERNATE_ScrCa + id,ca);        }        if (!language.equals("es")) {          ((AxSfOut)axsfAux).setFld12Name(DBEntityDAOFactory.getCurrentDBEntityDAO().getDescriptionByLocale(ca.getId(),false,true,language,EntityByLanguage.getTableName(12),entidad));        } else {          ((AxSfOut)axsfAux).setFld12Name(ca.getMatter());        }        ((AxSfOut)axsfAux).setFld12(ca);      } catch (      ValidationException VE) {      }    }  }  return axsfAux;}  }
class C{  public static void evictAllBitmap(){  final ANImageLoader.ImageCache imageCache=ANImageLoader.getInstance().getImageCache();  if (imageCache != null) {    imageCache.evictAllBitmap();  }}  }
class C{  public static byte[] toUnsignedByteArray(BigInteger bi){  if (bi == null) {    return null;  }  byte[] bb=bi.toByteArray();  if (bb[0] == 0) {    byte[] noZero=new byte[bb.length - 1];    System.arraycopy(bb,1,noZero,0,noZero.length);    return noZero;  } else {    return bb;  }}  }
class C{  public void asXML(final Writer w,final String encoding,final Pattern filter) throws IOException {  w.write("<?xml version=\"1.0\" encoding=\"" + encoding + "\" ?>");  asXML(w,filter);}  }
class C{  public static <R>Observable<R> toggleRetrofitCall(Call<R> call){  return Observable.create((null));}  }
class C{  public boolean isSide(){  return this.side;}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  public void notifyAdapter(){  try {    mGridAdapter.notifyDataSetChanged();  } catch (  NullPointerException e) {    e.printStackTrace();  }}  }
class C{  public MemcacheClientBuilder<V> withRetry(final boolean retry){  this.retry=retry;  return this;}  }
class C{  public void fireQueueSimulationAfterSimStepEvent(final double simTime){  MobsimAfterSimStepEvent<Mobsim> event=new MobsimAfterSimStepEvent<>(sim,simTime);  MobsimAfterSimStepListener[] listener=this.listenerList.getListeners(MobsimAfterSimStepListener.class);  for (  MobsimAfterSimStepListener aListener : listener) {    aListener.notifyMobsimAfterSimStep(event);  }}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (c == null)   throw new NullPointerException("c == null");  if (c == this)   throw new IllegalArgumentException("c == this");  boolean modified=false;  for (  E e : c)   if (add(e))   modified=true;  return modified;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.119 -0500",hash_original_method="6929FD851823CABACBBA56CA25293DF7",hash_generated_method="C4E4AC3662EE8D02DA0C6E726D1236E4") @DSSafe(DSCat.SAFE_OTHERS) public static String shaHex(String data){  return Hex.encodeHexString(sha(data));}  }
class C{  int[] maxSubArray(int[] A){  int beginTemp=0;  int begin=0;  int end=0;  int maxSoFar=A[0];  int maxEndingHere=A[0];  for (int i=1; i < A.length; i++) {    if (maxEndingHere < 0) {      maxEndingHere=A[i];      beginTemp=i;    } else {      maxEndingHere+=A[i];    }    if (maxEndingHere >= maxSoFar) {      maxSoFar=maxEndingHere;      begin=beginTemp;      end=i;    }  }  return new int[]{begin,end,maxSoFar};}  }
class C{  public IllegalFormatPrecisionException(int p){  this.p=p;}  }
class C{  public int writeChar(int index,byte c){  return this.writeByte(index,c);}  }
class C{  public Map<String,AggregatedOperation> aggregationMap(){  return aggregationMap;}  }
class C{  public static <C extends Comparable<?>>List<Range<C>> remove(Range<C> self,Range<C> other){  if (other == null || !self.isConnected(other)) {    return Collections.singletonList(self);  }  Range<C> share=self.intersection(other);  if (share.isEmpty()) {    return Collections.singletonList(self);  }  List<Range<C>> ret=Lists.newArrayList();  if (!self.hasLowerBound()) {    if (share.hasLowerBound()) {      if (share.lowerBoundType() == BoundType.CLOSED) {        ret.add(Range.lessThan(share.lowerEndpoint()));      } else {        ret.add(Range.atMost(share.lowerEndpoint()));      }    }  } else {    if (self.lowerEndpoint() != share.lowerEndpoint()) {      if (self.lowerBoundType() == BoundType.CLOSED) {        if (share.lowerBoundType() == BoundType.CLOSED) {          ret.add(Range.closedOpen(self.lowerEndpoint(),share.lowerEndpoint()));        } else {          ret.add(Range.closed(self.lowerEndpoint(),share.lowerEndpoint()));        }      } else {        if (share.lowerBoundType() == BoundType.CLOSED) {          ret.add(Range.open(self.lowerEndpoint(),share.lowerEndpoint()));        } else {          ret.add(Range.openClosed(self.lowerEndpoint(),share.lowerEndpoint()));        }      }    } else {      if (self.lowerBoundType() == BoundType.CLOSED && share.lowerBoundType() == BoundType.OPEN) {        ret.add(Range.closed(self.lowerEndpoint(),share.lowerEndpoint()));      }    }  }  if (!self.hasUpperBound()) {    if (share.hasUpperBound()) {      if (share.upperBoundType() == BoundType.CLOSED) {        ret.add(Range.greaterThan(share.upperEndpoint()));      } else {        ret.add(Range.atLeast(share.upperEndpoint()));      }    }  } else {    if (self.upperEndpoint() != share.upperEndpoint()) {      if (self.upperBoundType() == BoundType.CLOSED) {        if (share.upperBoundType() == BoundType.CLOSED) {          ret.add(Range.openClosed(share.upperEndpoint(),self.upperEndpoint()));        } else {          ret.add(Range.closed(share.upperEndpoint(),self.upperEndpoint()));        }      } else {        if (share.upperBoundType() == BoundType.CLOSED) {          ret.add(Range.open(share.upperEndpoint(),self.upperEndpoint()));        } else {          ret.add(Range.closedOpen(share.upperEndpoint(),self.upperEndpoint()));        }      }    } else {      if (self.upperBoundType() == BoundType.CLOSED && share.upperBoundType() == BoundType.OPEN) {        ret.add(Range.closed(self.upperEndpoint(),share.upperEndpoint()));      }    }  }  return ret;}  }
class C{  public LiteralElementAttributes(){}  }
class C{  public Library(){  super();}  }
class C{  public void open(File file) throws IOException {  this.open(new FileOutputStream(file));}  }
class C{  public boolean canZoomOut(){  return zoomLevel > MIN_ZOOM_LEVEL;}  }
class C{  public MultisigTransaction(final TimeInstant timeStamp,final Account sender,final Transaction otherTransaction){  super(TransactionTypes.MULTISIG,1,timeStamp,sender);  this.otherTransaction=otherTransaction;  this.otherTransactionHash=HashUtils.calculateHash(otherTransaction.asNonVerifiable());}  }
class C{  public void registerImmutable(final Class<?>... c){  for (  final Class<?> cl : c) {    ignored.add(cl);  }}  }
class C{  public void render(Graphics g){  if (!isRenderable(getShape())) {    return;  }  if (arrowhead != null && isMatted() && g instanceof Graphics2D && stroke instanceof BasicStroke) {    ((Graphics2D)g).setStroke(new BasicStroke(((BasicStroke)stroke).getLineWidth() + 2f));    setGraphicsColor(g,Color.black);    arrowhead.render(g);  }  super.render(g);  if (arrowhead != null) {    setGraphicsForEdge(g);    arrowhead.render(g);  }  if (arc != null) {    arc.render(g);  }}  }
class C{  void dispatchModifyRemoved(final RPObject object,final RPObject changes){  if (object != null) {    try {      logger.debug("Object(" + object.getID() + ") modified in client");      logger.debug("Original(" + object + ") modified in client");      fireChangedRemoved(object,changes);      object.applyDifferences(null,changes);      logger.debug("Modified(" + object + ") modified in client");      logger.debug("Changes(" + changes + ") modified in client");    } catch (    final Exception e) {      logger.error("dispatchModifyRemoved failed, object is " + object + ", changes is "+ changes,e);    }  } else {    logger.error("dispatchModifyRemoved failed, object is null, changes is " + changes);  }}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String indent="    ";  buf.append(indent + "Version          : " + Integer.toHexString(getVersion())+ "\n");  buf.append(indent + "NumGlyphs        : " + getNumGlyphs()+ "\n");  buf.append(indent + "MaxPoints        : " + getMaxPoints()+ "\n");  buf.append(indent + "MaxContours      : " + getMaxContours()+ "\n");  buf.append(indent + "MaxCompPoints    : " + getMaxComponentPoints()+ "\n");  buf.append(indent + "MaxCompContours  : " + getMaxComponentContours()+ "\n");  buf.append(indent + "MaxZones         : " + getMaxZones()+ "\n");  buf.append(indent + "MaxTwilightPoints: " + getMaxTwilightPoints()+ "\n");  buf.append(indent + "MaxStorage       : " + getMaxStorage()+ "\n");  buf.append(indent + "MaxFuncDefs      : " + getMaxFunctionDefs()+ "\n");  buf.append(indent + "MaxInstDefs      : " + getMaxInstructionDefs()+ "\n");  buf.append(indent + "MaxStackElements : " + getMaxStackElements()+ "\n");  buf.append(indent + "MaxSizeInst      : " + getMaxSizeOfInstructions()+ "\n");  buf.append(indent + "MaxCompElements  : " + getMaxComponentElements()+ "\n");  buf.append(indent + "MaxCompDepth     : " + getMaxComponentDepth()+ "\n");  return buf.toString();}  }
class C{  public static SynapsePropertiesPanel createSynapsePropertiesPanel(final Collection<Synapse> synapseList,final Window parent){  return createSynapsePropertiesPanel(synapseList,parent,DEFAULT_DISPLAY_PARAMS);}  }
class C{  public final void finish(){  while (true)   try {    this.cache.put(poisonEntry);    break;  } catch (  final InterruptedException e) {    continue;  }}  }
class C{  protected boolean isSkippedElement(String uri,String localName,boolean startElement){  Set<String> skippedElements=versionHandler.getSkippedElements(uri);  if (skippedElements != null) {    if (skippedElements.contains(FXGConstants.FXG_PRIVATE_ELEMENT)) {      validatePrivateElement(localName,startElement);    }    if (skippedElements.contains(localName)) {      return true;    }  }  return false;}  }
class C{  public static Monitor addException(Monitor mon,Throwable throwable){  return factory.addException(mon,throwable);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  private void loadProfile(String userId,String name){  final Intent userProfileIntent=new Intent(getActivity(),UserProfileActivity.class);  userProfileIntent.putExtra(AppConstants.Keys.USER_ID,userId);  userProfileIntent.putExtra(AppConstants.Keys.USER_NAME,name);  userProfileIntent.putExtra(AppConstants.Keys.SERVICE_SCREEN_TYPE,AppConstants.ServiceScreenType.PROFILE);  startActivity(userProfileIntent);}  }
class C{  protected void installListeners(){  focusListener=createFocusListener();  keyListener=createKeyListener();  mouseInputListener=createMouseInputListener();  table.addFocusListener(focusListener);  table.addKeyListener(keyListener);  table.addMouseListener(mouseInputListener);  table.addMouseMotionListener(mouseInputListener);  table.addPropertyChangeListener(getHandler());  if (isFileList) {    table.getSelectionModel().addListSelectionListener(getHandler());  }}  }
class C{  private Operation buildDatastoreSetQuery(final State current){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(DatastoreService.State.class));  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  querySpecification.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  return ((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(QueryTask.create(querySpecification).setDirect(true));}  }
class C{  public int translateSourceIndexToWrapperPosition(int sourcePos,int fetchedAdsCount){  int adSpacesCount=0;  if (sourcePos >= getOffsetValue() && getNoOfDataBetweenAds() > 0)   adSpacesCount=(sourcePos - getOffsetValue()) / getNoOfDataBetweenAds() + 1;  adSpacesCount=Math.min(fetchedAdsCount,adSpacesCount);  adSpacesCount=Math.max(0,adSpacesCount);  adSpacesCount=Math.min(adSpacesCount,getLimitOfAds());  int wrappedPosition=sourcePos + adSpacesCount;  return wrappedPosition;}  }
class C{  public void testCase25(){  byte aBytes[]={-1,-1,-1,-1,-1,-1,-1,-1};  byte bBytes[]={-128,-128,-128,-128,-128,-128,-128,-128,-128};  int aSign=1;  int bSign=1;  byte rBytes[]={-128,127,127,127,127,127,127,127,127};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public static void putBoolean(byte[] arr,long off,boolean val){  UNSAFE.putBoolean(arr,off,val);}  }
class C{  public static int dp2px(Context context,int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());}  }
class C{  public T caseReferenceSlot(ReferenceSlot object){  return null;}  }
class C{  public boolean isReceiverPointer(){  return PTABridge.v().isPointer(getReceiver());}  }
class C{  private void addToSearchCriteriaParameterMap(String key,String value){  if (searchCriteriaParameterMap.containsKey(key)) {    ArrayList<String> arrayList=searchCriteriaParameterMap.get(key);    arrayList.add(value);    searchCriteriaParameterMap.put(key,arrayList);  } else {    ArrayList<String> arrayList=new ArrayList<>();    arrayList.add(value);    searchCriteriaParameterMap.put(key,arrayList);  }}  }
class C{  public T caseSetterDeclaration(SetterDeclaration object){  return null;}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  @UiHandler("firstChoiceButton") public void handleFirstChoiceClick(final ClickEvent event){  this.actionDelegate.firstChoiceClicked();}  }
class C{  public void addOutputValues(Entry entry,ValueNumber[] outputValueList){  ValueNumber[] old=entryToOutputMap.put(entry,outputValueList);  if (old != null) {    throw new IllegalStateException("overwriting output values for entry!");  }}  }
class C{  public boolean intersects(){  return hasIntersection;}  }
class C{  public SubspaceClusterDefinition(){  super();}  }
class C{  public void updateSmellSource(){  if (smellSource != null) {    smellSource.update();  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static long toLong(byte[] macAddress){  return MacAddress.of(macAddress).getLong();}  }
class C{  public void clear(){  for (int i=0; i < this.numBuckets; i++) {    if (this.buckets[i] != null)     this.buckets[i].length=0;  }  this.size=0;}  }
class C{  public static SourceLineAnnotation fromVisitedMethod(MethodGen methodGen,String sourceFile){  LineNumberTable lineNumberTable=methodGen.getLineNumberTable(methodGen.getConstantPool());  String className=methodGen.getClassName();  int codeSize=methodGen.getInstructionList().getLength();  if (lineNumberTable == null) {    return createUnknown(className,sourceFile,0,codeSize - 1);  }  return forEntireMethod(className,sourceFile,lineNumberTable,codeSize);}  }
class C{  public String toString(){  String modelString="value=" + getValue() + ", "+ "extent="+ getExtent()+ ", "+ "min="+ getMinimum()+ ", "+ "max="+ getMaximum()+ ", "+ "adj="+ getValueIsAdjusting();  return getClass().getName() + "[" + modelString+ "]";}  }
class C{  public static void clearThreadLocalLogData(){  BournePatternConverter.s_patternData.set(new ArrayList<String>());}  }
class C{  public TraceScope newScope(String description,SpanId parentId){  TraceScope parentScope=threadLocalScope.get();  ThreadContext context=threadContext.get();  if (parentScope != null) {    if (parentId.isValid() && (!parentId.equals(parentScope.getSpan().getSpanId()))) {      return newScopeImpl(context,description,parentScope,parentId);    } else {      return newScopeImpl(context,description,parentScope);    }  } else   if (parentId.isValid()) {    return newScopeImpl(context,description,parentId);  }  if (!context.isTopLevel()) {    context.pushScope();    return nullScope;  }  if (!sample()) {    context.pushScope();    return nullScope;  }  return newScopeImpl(context,description);}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator){  float density;  if (keys.length == 0) {    density=0;  } else {    density=(float)keys.length / (keys[keys.length - 1] - keys[0] + 1);  }  tableSwitch(keys,generator,density >= 0.5f);}  }
class C{  @Override public String valueToString(double value){  return this.formatter.format(value);}  }
class C{  public void addListener(final PropertyChangeListener listener,final String mapHash){  pcs.addPropertyChangeListener(listener);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  protected void destroy(Long position,Object key,String rName){  this.destroy(position);  ConcurrentMap conflationMap=(ConcurrentMap)owningQueue.indexes.get(rName);  Assert.assertTrue(conflationMap != null);  conflationMap.remove(key,position);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getGenerate_path_();}  }
class C{  @Override public boolean containsKey(final K k){  final WeakReference<V> ref=map.get(k);  if (ref != null) {    final V v=ref.get();    if (v != null) {      if (queue != null) {synchronized (queue) {          queue.add(v);        }      }      return true;    }  }  return false;}  }
class C{  private void constructLopsCentralMoment() throws HopsException, LopsException {  if (_op != OpOp3.CENTRALMOMENT)   throw new HopsException("Unexpected operation: " + _op + ", expecting "+ OpOp3.CENTRALMOMENT);  ExecType et=optFindExecType();  if (et == ExecType.MR) {    CombineBinary combine=CombineBinary.constructCombineLop(OperationTypes.PreCentralMoment,getInput().get(0).constructLops(),getInput().get(1).constructLops(),DataType.MATRIX,getValueType());    combine.getOutputParameters().setDimensions(getInput().get(0).getDim1(),getInput().get(0).getDim2(),getInput().get(0).getRowsInBlock(),getInput().get(0).getColsInBlock(),getInput().get(0).getNnz());    CentralMoment cm=new CentralMoment(combine,getInput().get(2).constructLops(),DataType.MATRIX,getValueType(),et);    cm.getOutputParameters().setDimensions(1,1,0,0,-1);    setLineNumbers(cm);    UnaryCP unary1=new UnaryCP(cm,HopsOpOp1LopsUS.get(OpOp1.CAST_AS_SCALAR),getDataType(),getValueType());    unary1.getOutputParameters().setDimensions(0,0,0,0,-1);    setLineNumbers(unary1);    setLops(unary1);  } else {    CentralMoment cm=new CentralMoment(getInput().get(0).constructLops(),getInput().get(1).constructLops(),getInput().get(2).constructLops(),getDataType(),getValueType(),et);    cm.getOutputParameters().setDimensions(0,0,0,0,-1);    setLineNumbers(cm);    setLops(cm);  }}  }
class C{  private void addNodesDF(ArrayList<MWFNode> list,int AD_WF_Node_ID,int AD_Client_ID){  MWFNode node=getNode(AD_WF_Node_ID);  if (node != null && !list.contains(node)) {    list.add(node);    MWFNodeNext[] nexts=node.getTransitions(AD_Client_ID);    for (int i=0; i < nexts.length; i++) {      if (nexts[i].isActive())       addNodesDF(list,nexts[i].getAD_WF_Next_ID(),AD_Client_ID);    }  }}  }
class C{  static void printParents(JComponent c){  if (c.getName() == null)   c.setName("C" + String.valueOf(s_no++));  System.out.print(c.getName());  System.out.print(" - " + c.getClass().getName());  System.out.println(" ** " + c.isOpaque() + " bg="+ (c.getClientProperty(CompiereLookAndFeel.BACKGROUND) != null));  Container container=c.getParent();  while (container != null) {    System.out.print(" - " + container.getName() + " "+ container.getClass().getName()+ " ** "+ container.isOpaque());    if (container instanceof JComponent)     System.out.print(" bg=" + (((JComponent)container).getClientProperty(CompiereLookAndFeel.BACKGROUND) != null));    System.out.println();    container=container.getParent();  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  private void createTables() throws DatabaseException {  Logger.getLogger(this.getClass()).debug("Create tables.");  Collection<String> list=source.listTables();  for (  String table : list) {    try {      Logger.getLogger(this.getClass()).debug("Create table: " + table);      createTable(table);      tables.add(table);    } catch (    DatabaseException e) {      LOG.error("Error while creating table",e);    }  }}  }
class C{  public void doPost(String url,String requestBody) throws IOException {  Log.i(LoggingService.LOG_TAG,"HTTP request. body: " + requestBody);  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();  conn.setDoOutput(true);  conn.setUseCaches(false);  conn.setFixedLengthStreamingMode(requestBody.getBytes().length);  conn.setRequestMethod("POST");  for (int i=0; i < mHeaders.size(); i++) {    conn.setRequestProperty(mHeaders.keyAt(i),mHeaders.valueAt(i));  }  OutputStream out=null;  try {    out=conn.getOutputStream();    out.write(requestBody.getBytes());  }  finally {    if (out != null) {      try {        out.close();      } catch (      IOException e) {      }    }  }  responseCode=conn.getResponseCode();  InputStream inputStream=null;  try {    if (responseCode == 200) {      inputStream=conn.getInputStream();    } else {      inputStream=conn.getErrorStream();    }    responseBody=getString(inputStream);  }  finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {      }    }  }  Log.i(LoggingService.LOG_TAG,"HTTP response. body: " + responseBody);  conn.disconnect();}  }
class C{  public boolean match(final ServiceReference reference){  try {    return match(((ServiceReferenceImpl)reference).properties);  } catch (  final ClassCastException ce) {    final Dictionary<String,Object> dict=new Hashtable<String,Object>();    final String[] keys=reference.getPropertyKeys();    for (int i=0; i < keys.length; i++) {      dict.put(keys[i],reference.getProperty(keys[i]));    }    return match(dict);  }}  }
class C{  public void endRequest(){  repository.logout(mSession);}  }
class C{  DESKey(byte[] key) throws InvalidKeyException {  this(key,0);}  }
class C{  public SecP192R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y,boolean withCompression){  super(curve,x,y);  if ((x == null) != (y == null)) {    throw new IllegalArgumentException("Exactly one of the field elements is null");  }  this.withCompression=withCompression;}  }
class C{  @POST @Path("image/remove/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response removeImage(@QueryParam("version") String versionStr,@QueryParam("force") String forceRemove) throws IOException {  _log.info("removeImage({})",versionStr);  final SoftwareVersion version;  try {    version=new SoftwareVersion(versionStr);  } catch (  InvalidSoftwareVersionException e) {    throw APIException.badRequests.parameterIsNotValid("version");  }  RepositoryInfo targetInfo=null;  try {    targetInfo=_coordinator.getTargetInfo(RepositoryInfo.class);  } catch (  Exception e) {    throw APIException.internalServerErrors.getObjectFromError("target repository info","coordinator",e);  }  final SyncInfo remoteSyncInfo=SyncInfoBuilder.removableVersions(targetInfo,FORCE.equals(forceRemove));  if (remoteSyncInfo.isEmpty() || remoteSyncInfo.getToRemove() == null || !remoteSyncInfo.getToRemove().contains(version)) {    throw APIException.badRequests.versionIsNotRemovable(versionStr);  }  List<SoftwareVersion> newList=new ArrayList<SoftwareVersion>(targetInfo.getVersions());  newList.remove(version);  try {    _coordinator.setTargetInfo(new RepositoryInfo(targetInfo.getCurrentVersion(),newList),!FORCE.equals(forceRemove));  } catch (  Exception e) {    throw APIException.internalServerErrors.setObjectToError("target versions","coordinator",e);  }  auditUpgrade(OperationTypeEnum.REMOVE_IMAGE,AuditLogManager.AUDITLOG_SUCCESS,null,versionStr,FORCE.equals(forceRemove));  ClusterInfo clusterInfo=_coordinator.getClusterInfo();  if (clusterInfo == null) {    throw APIException.internalServerErrors.targetIsNullOrEmpty("Cluster info");  }  return toClusterResponse(clusterInfo);}  }
class C{  public void addSeparator(){  if (log.isLoggable(PlatformLogger.Level.FINER)) {    log.finer("addSeparator is not implemented");  }}  }
class C{  public void incEventsRemoved(){  this._stats.incLong(_eventsRemovedId,1);}  }
class C{  private static Photo replaceFullnameToActual(Photo photo,Map<String,String> users){  photo.setUsername(users.get(photo.getUsername()));  return photo;}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public static boolean isJavaBuiltinDataType(Class clazz){  if (clazz == null) {    return true;  }  Class clazzBoxed=getBoxedType(clazz);  if (isNumeric(clazzBoxed)) {    return true;  }  if (isBoolean(clazzBoxed)) {    return true;  }  if (clazzBoxed.equals(String.class)) {    return true;  }  if ((clazzBoxed.equals(char.class)) || (clazzBoxed.equals(Character.class))) {    return true;  }  if (clazzBoxed.equals(void.class)) {    return true;  }  return false;}  }
class C{  public boolean removeCourseOffering(CourseOffering co){  Set s=getCourseOfferings();  Iterator it=s.iterator();  CourseOffering tempCo=null;  while (it.hasNext()) {    tempCo=(CourseOffering)it.next();    if (tempCo.getUniqueId().intValue() == co.getUniqueId().intValue()) {      Debug.debug("Removing course from instructional offering");      s.remove(tempCo);      tempCo.setInstructionalOffering(null);      setCourseOfferings(s);      return true;    }  }  return false;}  }
class C{  public static boolean isUnidadInstalacionBloqueada(int marcas){  return isBitActivoInMarca(MarcaUInstalacionConstants.POSICION_BIT_MARCA_BLOQUEADA_TRANSFERENCIA,marcas) || isBitActivoInMarca(MarcaUInstalacionConstants.POSICION_BIT_MARCA_BLOQUEADA_DIVISIONFS,marcas);}  }
class C{  protected void testInterruptedPeriodWithManyEventsBase(int testMonth,int testDay,BigDecimal etalonPrice) throws Exception {  final long billingTime=getBillingTime(testYear,testMonth,testDay);  creSub(P_1_ID,getDate(testYear,testMonth,-2,20,0));  createTestGatheredEventsObject(testMonth);  updSub(SubscriptionStatus.EXPIRED,getDate(testYear,testMonth,5,19,59));  updSub(SubscriptionStatus.EXPIRED,getDate(testYear,testMonth,5,20,0));  updSub(SubscriptionStatus.ACTIVE,getDate(testYear,testMonth,10,8,0));  updSub(SubscriptionStatus.DEACTIVATED,getDate(testYear,testMonth,20,20,0));  startBillingRun(billingTime);  Date periods[][]=new Date[][]{{getStartDate(testYear,testMonth),getDate(testYear,testMonth,5,19,59)},{getDate(testYear,testMonth,10,8,0),getDate(testYear,testMonth,20,20,0)}};  verify(periods,etalonPrice,testMonth);}  }
class C{  public String addItemGroup(String groupName,String parentGroupNumber){  ShoppingCart.ShoppingCartItemGroup parentGroup=this.getItemGroupByNumber(parentGroupNumber);  ShoppingCart.ShoppingCartItemGroup newGroup=new ShoppingCart.ShoppingCartItemGroup(this.nextGroupNumber,groupName,parentGroup);  this.nextGroupNumber++;  this.itemGroupByNumberMap.put(newGroup.getGroupNumber(),newGroup);  return newGroup.getGroupNumber();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public EsriLayer(String name,URL dbf,URL shp,URL shx,DrawingAttributes da){  setName(name);  drawingAttributes=da;  setModel(DbfTableModel.getDbfTableModel(dbf));  setList(EsriGraphicList.getEsriGraphicList(shp,drawingAttributes,getModel(),coordTransform));}  }
class C{  @Override public void run(){  amIActive=true;  int numDecimalPlaces=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  numDecimalPlaces=Integer.parseInt(args[1]);  if (numDecimalPlaces < 0) {    numDecimalPlaces=0;  }  String outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          BigDecimal bd=new BigDecimal(z);          bd=bd.setScale(numDecimalPlaces,BigDecimal.ROUND_FLOOR);          outputFile.setValue(row,col,bd.doubleValue());        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ASCIIDecoder(InputStream is){  super(is);}  }
class C{  public static boolean hasPermission(int role,int permission,int mode){  return (mode & (role * permission)) > 0;}  }
class C{  @Override protected void onManagedUpdate(float pSecondsElapsed){  super.onManagedUpdate(pSecondsElapsed);  if (isDrawBodies()) {    mBodiesActiveSet.clear();    mBodiesInactiveSet.clear();    Iterator<Body> iterator=mWorld.getBodies();    while (iterator.hasNext()) {      Body body=iterator.next();      RenderOfBody renderOfBody;      if (!mBodiesToBeRenderred.containsKey(body)) {        renderOfBody=new RenderOfBody(body,mVBO);        mBodiesToBeRenderred.put(body,renderOfBody);        this.attachChild(renderOfBody);      } else {        renderOfBody=mBodiesToBeRenderred.get(body);      }      mBodiesActiveSet.add(renderOfBody);      renderOfBody.updateColor();      renderOfBody.setRotationCenter(body.getMassData().center.x * PhysicsConnector.PIXEL_TO_METER_RATIO_DEFAULT,body.getMassData().center.y * PhysicsConnector.PIXEL_TO_METER_RATIO_DEFAULT);      renderOfBody.setRotation((float)(360 - body.getAngle() * (180 / Math.PI)));      renderOfBody.setPosition(body.getPosition().x * PhysicsConnector.PIXEL_TO_METER_RATIO_DEFAULT,body.getPosition().y * PhysicsConnector.PIXEL_TO_METER_RATIO_DEFAULT);    }    mBodiesInactiveSet.addAll(mBodiesToBeRenderred.values());    mBodiesInactiveSet.removeAll(mBodiesActiveSet);    for (    RenderOfBody killme : mBodiesInactiveSet) {      this.detachChild(killme);    }    mBodiesToBeRenderred.values().removeAll(mBodiesInactiveSet);  }  if (isDrawJoints()) {    mJointsActiveSet.clear();    mJointsInactiveSet.clear();    Iterator<Joint> iteratorJoints=mWorld.getJoints();    while (iteratorJoints.hasNext()) {      Joint joint=iteratorJoints.next();      IRenderOfJoint renderOfJoint;      if (!mJointsToBeRenderred.containsKey(joint)) {        renderOfJoint=new RenderOfJointPolyline(joint,mVBO,mJointMarkerSize);        mJointsToBeRenderred.put(joint,renderOfJoint);        this.attachChild(renderOfJoint.getEntity());      } else {        renderOfJoint=mJointsToBeRenderred.get(joint);      }      mJointsActiveSet.add(renderOfJoint);      renderOfJoint.update();      renderOfJoint.getEntity().setColor(jointToColor(renderOfJoint.getJoint()));    }    mJointsInactiveSet.addAll(mJointsToBeRenderred.values());    mJointsInactiveSet.removeAll(mJointsActiveSet);    for (    IRenderOfJoint killme : mJointsInactiveSet) {      this.detachChild(killme.getEntity());    }    mJointsToBeRenderred.values().removeAll(mJointsInactiveSet);  }}  }
class C{  public LwjglAppletCustomizerPanel(ProjectExtensionProperties properties){  this.properties=properties;  initComponents();  loadProperties();  HelpCtx.setHelpIDString(this,"sdk.application_deployment");}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  if (!LibsChecker.checkVitamioLibs(this))   return;  setContentView(R.layout.mediaplayer_2);  mPreview=(SurfaceView)findViewById(R.id.surface);  holder=mPreview.getHolder();  holder.addCallback(this);  holder.setFormat(PixelFormat.RGBA_8888);  extras=getIntent().getExtras();}  }
class C{  private void gcspyGatherData(int event){  if (DEBUG) {    Log.writeln("SSGCspy.gcspyGatherData, event=",event);    Log.writeln("SSGCspy.gcspyGatherData, port=",GCspy.getGCspyPort());  }  if (GCspy.getGCspyPort() == 0)   return;  if (DEBUG)   Log.writeln("SSGCspy safepoint");  GCspy.server.serverSafepoint(event);}  }
class C{  public static boolean checkUrl(String urlAsString){  if (urlAsString == null) {    logger.error("can not check null URL");    return false;  }  URL url;  try {    url=new URL(urlAsString);  } catch (  MalformedURLException e) {    logger.error(urlAsString + " is not a valid url, can not check.");    return false;  }  int responseCode;  String responseMessage="NO RESPONSE MESSAGE";  Object content="NO CONTENT";  HttpURLConnection huc;  try {    huc=(HttpURLConnection)url.openConnection();    huc.setRequestMethod("HEAD");    responseCode=huc.getResponseCode();    content=huc.getContent();    responseMessage=huc.getResponseMessage();  } catch (  ProtocolException e) {    logger.error("can not check url " + e.getMessage(),e);    return false;  }catch (  IOException e) {    logger.error("can not check url " + e.getMessage(),e);    return false;  }  if (responseCode == 200 || (responseCode > 300 && responseCode < 400)) {    logger.info("URL " + urlAsString + " exists");    return true;  } else {    logger.error(urlAsString + " return a " + responseCode+ " : "+ content+ "/"+ responseMessage);    return false;  }}  }
class C{  public FilterProxyListModel(ListModel<T> underlying){  this.underlying=underlying;  underlying.addDataChangedListener(this);}  }
class C{  public void testConstructor_II() throws Exception {  mySSLServerSocket ssl=new mySSLServerSocket(0,1);  int[] port_invalid={-1,Integer.MIN_VALUE,Integer.MAX_VALUE};  for (int i=0; i < port_invalid.length; i++) {    try {      new mySSLServerSocket(port_invalid[i],1);      fail("IllegalArgumentException should be thrown");    } catch (    IllegalArgumentException expected) {    }  }  try {    new mySSLServerSocket(ssl.getLocalPort(),1);    fail("IOException should be thrown");  } catch (  IOException expected) {  }}  }
class C{  public UserError(Operator operator,Throwable cause,int code,Object... arguments){  super(getErrorMessage(code,arguments),cause);  this.code=code;  this.operator=operator;  this.arguments=arguments;}  }
class C{  private double calcBIC(CentroidClusterModel bestModel){  double loglike=0;  int numCenters=bestModel.getNumberOfClusters();  int numDimensions=bestModel.getCentroidCoordinates(0).length;  int numParameters=numCenters - 1 + numCenters * numDimensions + numCenters;  for (  Cluster c : bestModel.getClusters()) {    int current_id=c.getClusterId();    loglike+=logLikelihoodEstimate(c,bestModel.getCentroidCoordinates(current_id),bestModel.getClusterAssignments(exampleSet),numCenters);  }  loglike-=numParameters / 2.0 * Math.log(examplesize);  return loglike;}  }
class C{  public TaskDescriptionCompat(TaskDescriptionCompat td){  mLabel=td.mLabel;  mIcon=td.mIcon;  mColorPrimary=td.mColorPrimary;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:32.724 -0500",hash_original_method="0BD8B4210E063DA673A9D4D2CF1851E6",hash_generated_method="54ABC94F488C001CBD8DF02BC337AE93") public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  H5=0xc3d2e1f0;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public final void negate(){  m00=-m00;  m01=-m01;  m02=-m02;  m03=-m03;  m10=-m10;  m11=-m11;  m12=-m12;  m13=-m13;  m20=-m20;  m21=-m21;  m22=-m22;  m23=-m23;  m30=-m30;  m31=-m31;  m32=-m32;  m33=-m33;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];        fileCount++;      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public static void checkFieldValidIPV6(final String ip,final String fieldName){  checkFieldNotEmpty(ip,fieldName);  if (!isValidIPV6(ip)) {    throw APIException.badRequests.invalidParameterInvalidIPV6(fieldName,ip);  }}  }
class C{  protected Iterator createKeySetIterator(){  if (size() == 0) {    return EmptyIterator.INSTANCE;  }  return new KeySetIterator(this);}  }
class C{  public int strId2IdxAdd(Map fmap){  strId2Idx(fmap);  if (idx < 0) {    idx=fmap.size();    fmap.put(strId,new Integer(idx));  }  return idx;}  }
class C{  public static synchronized long deleteMsgByID(Context c,String id){  DBProvider provider=DBProvider.getDBProvider(c);  int deleteCount=provider.delete(DBHelp.TABLE_STATISTICS,DBHelp.COLUMN_ID + "= ?",new String[]{id});  return deleteCount;}  }
class C{  static void checkMethodIdentifier(int version,final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if ((version & 0xFFFF) >= Opcodes.V1_5) {    for (int i=0; i < name.length(); ++i) {      if (".;[/<>".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }    return;  }  if (!Character.isJavaIdentifierStart(name.charAt(0))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a '<init>', '<clinit>' or a valid Java identifier): "+ name);  }  for (int i=1; i < name.length(); ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be '<init>' or '<clinit>' or a valid Java identifier): "+ name);    }  }}  }
class C{  boolean checkOptions(GrammarAST parent,Token optionID,GrammarAST valueAST){  boolean ok=true;  if (parent.getType() == ANTLRParser.BLOCK) {    if (g.isLexer() && !Grammar.LexerBlockOptions.contains(optionID.getText())) {      g.tool.errMgr.grammarError(ErrorType.ILLEGAL_OPTION,g.fileName,optionID,optionID.getText());      ok=false;    }    if (!g.isLexer() && !Grammar.ParserBlockOptions.contains(optionID.getText())) {      g.tool.errMgr.grammarError(ErrorType.ILLEGAL_OPTION,g.fileName,optionID,optionID.getText());      ok=false;    }  } else   if (parent.getType() == ANTLRParser.RULE) {    if (!Grammar.ruleOptions.contains(optionID.getText())) {      g.tool.errMgr.grammarError(ErrorType.ILLEGAL_OPTION,g.fileName,optionID,optionID.getText());      ok=false;    }  } else   if (parent.getType() == ANTLRParser.GRAMMAR && !legalGrammarOption(optionID.getText())) {    g.tool.errMgr.grammarError(ErrorType.ILLEGAL_OPTION,g.fileName,optionID,optionID.getText());    ok=false;  }  return ok;}  }
class C{  public Iterable<Integer> pre(){  return preorder;}  }
class C{  public AuthorizationException(int type,int code,@Nullable String error,@Nullable String errorDescription,@Nullable Uri errorUri,@Nullable Throwable rootCause){  super(errorDescription,rootCause);  this.type=type;  this.code=code;  this.error=error;  this.errorDescription=errorDescription;  this.errorUri=errorUri;}  }
class C{  public void clear(){  final Object[] items=this.items;  final ReentrantLock lock=this.lock;  lock.lock();  try {    int k=count;    if (k > 0) {      final int putIndex=this.putIndex;      int i=takeIndex;      do {        items[i]=null;      } while ((i=inc(i)) != putIndex);      takeIndex=putIndex;      count=0;      if (itrs != null)       itrs.queueIsEmpty();      for (; k > 0 && lock.hasWaiters(notFull); k--)       notFull.signal();    }  }  finally {    lock.unlock();  }}  }
class C{  public static <T>T checkArgumentNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  checkArgument(reference != null,errorMessageTemplate,errorMessageArgs);  return reference;}  }
class C{  public Isolate(){  this(Integer.MAX_VALUE);}  }
class C{  public void increaseRefcount(){  refcount++;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:34.357 -0500",hash_original_method="B75A0123EB9E93271674922114827A6A",hash_generated_method="2C67034D5A4E1466D6D1F951CC1C5CFB") private static State rilStateToState(String s){  if (s.equals("unknown")) {    return State.UNKNOWN;  } else   if (s.equals("available")) {    return State.AVAILABLE;  } else   if (s.equals("current")) {    return State.CURRENT;  } else   if (s.equals("forbidden")) {    return State.FORBIDDEN;  } else {    throw new RuntimeException("RIL impl error: Invalid network state '" + s + "'");  }}  }
class C{  public void message(CanMessage f){  if (addrActive.match(f)) {    setOwnState(Sensor.ACTIVE);    if (addrInactive == null) {      setTimeout();    }  } else   if (addrInactive != null && addrInactive.match(f)) {    setOwnState(Sensor.INACTIVE);  }}  }
class C{  public Calendar selectCalendar(Connection conn,String calendarName) throws ClassNotFoundException, IOException, SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    String selCal=rtp(SELECT_CALENDAR);    ps=conn.prepareStatement(selCal);    ps.setString(1,calendarName);    rs=ps.executeQuery();    Calendar cal=null;    if (rs.next()) {      cal=(Calendar)getObjectFromBlob(rs,COL_CALENDAR);    }    if (null == cal) {      logger.warn("Couldn't find calendar with name '" + calendarName + "'.");    }    return cal;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  protected void addResourceDelta(IResourceDelta child){switch (this.kind) {case ADDED:case REMOVED:    return;case CHANGED:  this.changeFlags|=F_CONTENT;break;default :this.kind=CHANGED;this.changeFlags|=F_CONTENT;}if (this.resourceDeltas == null) {this.resourceDeltas=new IResourceDelta[5];this.resourceDeltas[this.resourceDeltasCounter++]=child;return;}if (this.resourceDeltas.length == this.resourceDeltasCounter) {System.arraycopy(this.resourceDeltas,0,(this.resourceDeltas=new IResourceDelta[this.resourceDeltasCounter * 2]),0,this.resourceDeltasCounter);}this.resourceDeltas[this.resourceDeltasCounter++]=child;}  }
class C{  private static int GetSuperclass(JNIEnvironment env,int classJREF){  if (traceJNI)   VM.sysWrite("JNI called: GetSuperclass  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);    Class<?> supercls=cls.getSuperclass();    return supercls == null ? 0 : env.pushJNIRef(supercls);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public Optional<Long> fetch(@Nonnull final String username,@Nonnull final String cursorName) throws NotificationStoreException {  Objects.requireNonNull(username);  Preconditions.checkArgument(!username.isEmpty(),"username cannot be empty");  Objects.requireNonNull(cursorName);  Preconditions.checkArgument(!cursorName.isEmpty(),"cursorName cannot be empty");  final String key=getCursorKey(username,cursorName);  final Location location=new Location(NAMESPACE,key);  LOGGER.debug("Fetching key: {}",location);  final CursorObject cursor;  final FetchValue fv=new FetchValue.Builder(location).build();  try (Timer.Context context=fetchTimer.time()){    final FetchValue.Response response=client.execute(fv);    if (response.isNotFound()) {      return Optional.empty();    }    cursor=response.getValue(CursorObject.class);  } catch (  UnresolvedConflictException e) {    LOGGER.error("Unable to resolve siblings for key: " + location,e);    throw new NotificationStoreException(e);  }catch (  ExecutionException e) {    LOGGER.error("Unable to fetch key: " + location,e);    throw new NotificationStoreException(e);  }catch (  InterruptedException e) {    LOGGER.warn("Interrupted fetching key: " + location,e);    Thread.currentThread().interrupt();    throw new NotificationStoreException(e);  }  if (cursor == null) {    return Optional.empty();  }  return Optional.of(cursor.getValue());}  }
class C{  private void scheduleSettingsSave(){  if (!mLoadingSettings) {    if (mSettingsSavePending.compareAndSet(false,true)) {      mThreadPoolManager.scheduleOnce(new SettingsSaveTask(),2,TimeUnit.SECONDS);    }  }}  }
class C{  public Gau2(){  super("gau2",2);}  }
class C{  public static String toChar(byte b){  if (b >= 0x20) {    return Character.toString((char)b);  } else {    return String.format("%02x",b);  }}  }
class C{  public static DateTimeFormatter year(){  return Constants.ye;}  }
class C{  @Override public boolean isSupportedLookAndFeel(){  return true;}  }
class C{  @JsonCreator public ClockEntry(@JsonProperty("nodeId") short nodeId,@JsonProperty("version") long version){  if (nodeId < 0)   throw new IllegalArgumentException("Node id " + nodeId + " is not in the range (0, "+ Short.MAX_VALUE+ ").");  if (version < 1)   throw new IllegalArgumentException("Version " + version + " is not in the range (1, "+ Short.MAX_VALUE+ ").");  this.nodeId=nodeId;  this.version=version;}  }
class C{  public float floatValue(){  return 0.0f;}  }
class C{  public JDisclosureToolBar(){  setUI(PaletteToolBarUI.createUI(this));  initComponents();}  }
class C{  public void deleteObserver(Observer observer){  observers.remove(observer);}  }
class C{  public NemAnnounceResult(final ValidationResult result){  this(result,null,null);}  }
class C{  public void join(Object[] pieces){  int sum=0;  for (int x=0; x < pieces.length; x++)   sum+=((long[])(pieces[x])).length;  int runningsum=0;  long[] newgenome=new long[sum];  for (int x=0; x < pieces.length; x++) {    System.arraycopy(pieces[x],0,newgenome,runningsum,((long[])(pieces[x])).length);    runningsum+=((long[])(pieces[x])).length;  }  genome=newgenome;}  }
class C{  public StringPrintWriter(StringBuilder sb){  this(sb,null);}  }
class C{  private void expandTree(){  if (treeExpand.isSelected()) {    for (int row=0; row < m_tree.getRowCount(); row++)     m_tree.expandRow(row);  } else {    for (int row=m_tree.getRowCount(); row > 0; row--)     m_tree.collapseRow(row);  }}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot,CronTrigger struct) throws org.apache.thrift.TException {  struct.validate();  oprot.writeStructBegin(STRUCT_DESC);  if (struct.isSetTriggerId()) {    oprot.writeFieldBegin(TRIGGER_ID_FIELD_DESC);    oprot.writeI32(struct.triggerId);    oprot.writeFieldEnd();  }  if (struct.triggerName != null) {    oprot.writeFieldBegin(TRIGGER_NAME_FIELD_DESC);    oprot.writeString(struct.triggerName);    oprot.writeFieldEnd();  }  if (struct.isSetCreateTime()) {    oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);    oprot.writeI64(struct.createTime);    oprot.writeFieldEnd();  }  if (struct.isSetOperatorId()) {    oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);    oprot.writeI32(struct.operatorId);    oprot.writeFieldEnd();  }  if (struct.triggerType != null) {    if (struct.isSetTriggerType()) {      oprot.writeFieldBegin(TRIGGER_TYPE_FIELD_DESC);      oprot.writeString(struct.triggerType);      oprot.writeFieldEnd();    }  }  if (struct.cronExpression != null) {    oprot.writeFieldBegin(CRON_EXPRESSION_FIELD_DESC);    oprot.writeString(struct.cronExpression);    oprot.writeFieldEnd();  }  oprot.writeFieldStop();  oprot.writeStructEnd();}  }
class C{  public boolean removeTransactionConfidenceEventListener(TransactionConfidenceEventListener listener){  return ListenerRegistration.removeFromList(listener,transactionConfidenceListeners);}  }
class C{  public Location(int line,int column,int offset){  this(line,column);  this.offset=offset;}  }
class C{  public void applyForceToCenter(Vector2 force,boolean wake){  tmp.set(force.x,force.y);  body.applyForceToCenter(tmp);}  }
class C{  @Override public boolean drawImage(Image img,int x,int y,ImageObserver observer){  return drawImage(img,x,y,Color.WHITE,observer);}  }
class C{  public boolean isSetEchoRequest(){  return this.echoRequest != null;}  }
class C{  @Ignore(value={IE,MARIONETTE},reason="IEDriver does not disable automatic proxy caching, causing this test to fail.",issues=6629) @Test @NeedsLocalEnvironment public void navigationWhenProxyInterceptsASpecificUrl(){  testServer1.start();  proxyServer.start();  String page1Url=buildPage1Url(testServer1,buildPage2Url(testServer1));  String page2Url=buildPage2Url(testServer1,buildPage3Url(testServer1));  String page3Url=buildPage3Url(testServer1);  proxyServer.setPacFileContents(Joiner.on('\n').join("function FindProxyForURL(url, host) {","  if (url.indexOf('/page2.html?next') != -1) {","    return 'PROXY " + proxyServer.getHostAndPort() + "';","  }","  return 'DIRECT';"," }"));  WebDriver driver=customDriverFactory.createDriver(proxyServer.getPacUrl());  performNavigation(driver,page1Url);  assertEquals(ImmutableList.of(new HttpRequest(page1Url,null),new HttpRequest(page3Url,page2Url)),testServer1.getRequests());  assertEquals(ImmutableList.of(new HttpRequest(page2Url,page1Url)),proxyServer.getRequests());}  }
class C{  public boolean match(ThrowStatement node,Object other){  if (!(other instanceof ThrowStatement)) {    return false;  }  ThrowStatement o=(ThrowStatement)other;  return safeSubtreeMatch(node.getExpression(),o.getExpression());}  }
class C{  @Override public int read(){  return this.pos < this.count ? this.buf[this.pos++] & 0xff : -1;}  }
class C{  private PendingBlock writeBlock(int prefixLength,boolean isFloor,int floorLeadLabel,int start,int end,boolean hasTerms,boolean hasSubBlocks) throws IOException {  assert end > start;  long startFP=termsOut.getFilePointer();  boolean hasFloorLeadLabel=isFloor && floorLeadLabel != -1;  final BytesRef prefix=new BytesRef(prefixLength + (hasFloorLeadLabel ? 1 : 0));  System.arraycopy(lastTerm.get().bytes,0,prefix.bytes,0,prefixLength);  prefix.length=prefixLength;  int numEntries=end - start;  int code=numEntries << 1;  if (end == pending.size()) {    code|=1;  }  termsOut.writeVInt(code);  boolean isLeafBlock=hasSubBlocks == false;  final List<FST<BytesRef>> subIndices;  boolean absolute=true;  if (isLeafBlock) {    subIndices=null;    for (int i=start; i < end; i++) {      PendingEntry ent=pending.get(i);      assert ent.isTerm : "i=" + i;      PendingTerm term=(PendingTerm)ent;      assert StringHelper.startsWith(term.termBytes,prefix) : "term.term=" + term.termBytes + " prefix="+ prefix;      BlockTermState state=term.state;      final int suffix=term.termBytes.length - prefixLength;      suffixWriter.writeVInt(suffix);      suffixWriter.writeBytes(term.termBytes,prefixLength,suffix);      assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;      statsWriter.writeVInt(state.docFreq);      if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {        assert state.totalTermFreq >= state.docFreq : state.totalTermFreq + " vs " + state.docFreq;        statsWriter.writeVLong(state.totalTermFreq - state.docFreq);      }      postingsWriter.encodeTerm(longs,bytesWriter,fieldInfo,state,absolute);      for (int pos=0; pos < longsSize; pos++) {        assert longs[pos] >= 0;        metaWriter.writeVLong(longs[pos]);      }      bytesWriter.writeTo(metaWriter);      bytesWriter.reset();      absolute=false;    }  } else {    subIndices=new ArrayList<>();    for (int i=start; i < end; i++) {      PendingEntry ent=pending.get(i);      if (ent.isTerm) {        PendingTerm term=(PendingTerm)ent;        assert StringHelper.startsWith(term.termBytes,prefix) : "term.term=" + term.termBytes + " prefix="+ prefix;        BlockTermState state=term.state;        final int suffix=term.termBytes.length - prefixLength;        suffixWriter.writeVInt(suffix << 1);        suffixWriter.writeBytes(term.termBytes,prefixLength,suffix);        statsWriter.writeVInt(state.docFreq);        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {          assert state.totalTermFreq >= state.docFreq;          statsWriter.writeVLong(state.totalTermFreq - state.docFreq);        }        postingsWriter.encodeTerm(longs,bytesWriter,fieldInfo,state,absolute);        for (int pos=0; pos < longsSize; pos++) {          assert longs[pos] >= 0;          metaWriter.writeVLong(longs[pos]);        }        bytesWriter.writeTo(metaWriter);        bytesWriter.reset();        absolute=false;      } else {        PendingBlock block=(PendingBlock)ent;        assert StringHelper.startsWith(block.prefix,prefix);        final int suffix=block.prefix.length - prefixLength;        assert StringHelper.startsWith(block.prefix,prefix);        assert suffix > 0;        suffixWriter.writeVInt((suffix << 1) | 1);        suffixWriter.writeBytes(block.prefix.bytes,prefixLength,suffix);        assert floorLeadLabel == -1 || (block.prefix.bytes[prefixLength] & 0xff) >= floorLeadLabel : "floorLeadLabel=" + floorLeadLabel + " suffixLead="+ (block.prefix.bytes[prefixLength] & 0xff);        assert block.fp < startFP;        suffixWriter.writeVLong(startFP - block.fp);        subIndices.add(block.index);      }    }    assert subIndices.size() != 0;  }  termsOut.writeVInt((int)(suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1 : 0));  suffixWriter.writeTo(termsOut);  suffixWriter.reset();  termsOut.writeVInt((int)statsWriter.getFilePointer());  statsWriter.writeTo(termsOut);  statsWriter.reset();  termsOut.writeVInt((int)metaWriter.getFilePointer());  metaWriter.writeTo(termsOut);  metaWriter.reset();  if (hasFloorLeadLabel) {    prefix.bytes[prefix.length++]=(byte)floorLeadLabel;  }  return new PendingBlock(prefix,startFP,hasTerms,isFloor,floorLeadLabel,subIndices);}  }
class C{  public void deleteOrder(CrudEventBus bus,String orderUuid){  mTaskFactory.newDeleteOrderTask(orderUuid,bus).execute();}  }
class C{  public BitIntSet(int max){  bits=Bits.makeBitSet(max);}  }
class C{  @Override public void publish(IProject project,HttpServletRequest request) throws PublishException {  try {    final ICollection targetContainer=getTargetProjectContainer(getRegistryLocation(),request);    final IFolder sourceFolder=getSourceFolder(project,ICommonConstants.ARTIFACT_TYPE.SCRIPTING_SERVICES);    copyAllFromTo(sourceFolder,targetContainer,request);  } catch (  Exception ex) {    throw new PublishException(ex.getMessage(),ex);  }}  }
class C{  protected AtomEscapeImpl(){  super();}  }
class C{  public ISDNRecord(Name name,int dclass,long ttl,String address,String subAddress){  super(name,Type.ISDN,dclass,ttl);  try {    this.address=byteArrayFromString(address);    if (subAddress != null)     this.subAddress=byteArrayFromString(subAddress);  } catch (  TextParseException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  public JavaTextSelection(ITypeRoot element,IDocument document,int offset,int length){  super(document,offset,length);  fElement=element;}  }
class C{  public void multiplyByQuat(Quaternion input,Quaternion output){  Vector4f inputCopy=new Vector4f();  if (input != output) {    output.points[3]=(points[3] * input.points[3] - points[0] * input.points[0] - points[1] * input.points[1] - points[2] * input.points[2]);    output.points[0]=(points[3] * input.points[0] + points[0] * input.points[3] + points[1] * input.points[2] - points[2] * input.points[1]);    output.points[1]=(points[3] * input.points[1] + points[1] * input.points[3] + points[2] * input.points[0] - points[0] * input.points[2]);    output.points[2]=(points[3] * input.points[2] + points[2] * input.points[3] + points[0] * input.points[1] - points[1] * input.points[0]);  } else {    inputCopy.points[0]=input.points[0];    inputCopy.points[1]=input.points[1];    inputCopy.points[2]=input.points[2];    inputCopy.points[3]=input.points[3];    output.points[3]=(points[3] * inputCopy.points[3] - points[0] * inputCopy.points[0] - points[1] * inputCopy.points[1] - points[2] * inputCopy.points[2]);    output.points[0]=(points[3] * inputCopy.points[0] + points[0] * inputCopy.points[3] + points[1] * inputCopy.points[2] - points[2] * inputCopy.points[1]);    output.points[1]=(points[3] * inputCopy.points[1] + points[1] * inputCopy.points[3] + points[2] * inputCopy.points[0] - points[0] * inputCopy.points[2]);    output.points[2]=(points[3] * inputCopy.points[2] + points[2] * inputCopy.points[3] + points[0] * inputCopy.points[1] - points[1] * inputCopy.points[0]);  }}  }
class C{  public static void main(String[] args){  runJavadoc(new GlobalInfoJavadoc(),args);}  }
class C{  private static String formatExecStatus(TungstenProperties props){  EchoStatus echoStatus=(EchoStatus)props.getObject(STATUS_KEY);  String statusMessage=props.getString(STATUS_MESSAGE_KEY);  return String.format("%s\n%s",echoStatus.toString(),statusMessage);}  }
class C{  protected void doAnimation(BaseAnim anim){switch (anim.animType) {case FRAME:    s_frame=anim.adjustFrame(s_frame);  break;case ALPHA:s_alpha=anim.adjustAlpha(s_alpha);break;case SCALE:s_scale=anim.adjustScale(s_scale);break;case ROTATION:s_rotation=anim.adjustRotation(s_rotation);break;case POSITION:s_position=anim.adjustPosition(s_position);break;case ALIVE:s_alive=anim.adjustAlive(s_alive);break;case SHOOT:s_position=anim.adjustPosition(s_position);s_alive=anim.adjustAlive(s_alive);break;}if (afterAnimation != null) afterAnimation.afterAnimation();}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public boolean isAssignableFrom(Key<? super T> key){  Objects.requireNonNull(key);  for (  Class<? extends Annotation> annType : _annTypes) {    if (!containsType(annType,key._annTypes)) {      return false;    }  }  if (_type instanceof ParameterizedType) {    if (!(key._type instanceof ParameterizedType)) {      return false;    }    if (!isAssignableFrom((ParameterizedType)_type,(ParameterizedType)key._type)) {      return false;    }  }  if (_anns.length > 0 && key._anns.length > 0) {    return isAssignableFrom(_anns,key._anns);  }  return true;}  }
class C{  public void destroy(){  lock.lock();  try {    if (isOpen()) {      close();    }    deleteResources();  }  finally {    lock.unlock();  }}  }
class C{  public boolean handleMessage(Message m,Object o){  if (!super.handleMessage(m,o)) {    if (m.getType().equals(M_EVALUATE)) {      ((MasterEvaluator)evaluator).receiveEvaluatorData((EvaluatorData)o);    } else     if (m.getType().equals(M_READY_SLAVE)) {      ((MasterEvaluator)evaluator).receiveReadySlave(m.getSender());    } else     return false;  }  return true;}  }
class C{  public FeatureCallItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static StreamPipe plugTogether(InputStream in,OutputStream out){  String name;synchronized (countLock) {    name="java.rmi.testlibrary.StreamPipe-" + (count++);  }  StreamPipe pipe=new StreamPipe(in,out,name);  pipe.setDaemon(true);  pipe.start();  return pipe;}  }
class C{  CloseAction(){  super("Close");  putValue(Action.LONG_DESCRIPTION,"Close");  KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_W,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());  putValue(Action.ACCELERATOR_KEY,keyStroke);}  }
class C{  @Override public boolean supportsAlterTableWithDropColumn(){  debugCodeCall("supportsAlterTableWithDropColumn");  return true;}  }
class C{  public BaleenAnnotation_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_internalId=jcas.getRequiredFeatureDE(casType,"internalId","uima.cas.Long",featOkTst);  casFeatCode_internalId=(null == casFeat_internalId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_internalId).getCode();}  }
class C{  protected void dispatchContentSelectionChangedEvent(XBLOMContentElement e){  xblManager.invalidateChildNodes(e.getXblParentNode());  ContentSelectionChangedEvent evt=new ContentSelectionChangedEvent(e);  EventListenerList ll=(EventListenerList)listeners.get(e);  if (ll != null) {    Object[] ls=ll.getListenerList();    for (int i=ls.length - 2; i >= 0; i-=2) {      ContentSelectionChangedListener l=(ContentSelectionChangedListener)ls[i + 1];      l.contentSelectionChanged(evt);    }  }  Object[] ls=xblManager.getContentSelectionChangedListeners();  for (int i=ls.length - 2; i >= 0; i-=2) {    ContentSelectionChangedListener l=(ContentSelectionChangedListener)ls[i + 1];    l.contentSelectionChanged(evt);  }}  }
class C{  public Set<String> availableMetrics(){  return output.keySet();}  }
class C{  private void checkBoundedTypeParameter(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  assertEquals("T",typeParameter.getName());  assertEquals(method,typeParameter.getGenericDeclaration());  Type[] bounds=typeParameter.getBounds();  assertLenghtOne(bounds);  Type bound=bounds[0];  assertEquals(BoundedGenericMethods.class,bound);}  }
class C{  public static int determineUnsignedBitSize(long value){  int topBit=32;  long mask=0x80000000L;  while (topBit > 0) {    if ((value & mask) != 0) {      return topBit;    }    mask>>=1;    topBit--;  }  return 0;}  }
class C{  @Override public TermVectorsRequest realtime(Boolean realtime){  this.realtime=realtime;  return this;}  }
class C{  public boolean beginsWith(final Path p){  if (p == null)   throw new IllegalArgumentException();  if (vertices.length < p.vertices.length) {    return false;  }  for (int i=0; i < p.vertices.length; i++) {    final Vertex vSelf=vertices[i];    final Vertex vOther=p.vertices[i];    if (vSelf != vOther) {      return false;    }  }  return true;}  }
class C{  public Parameter push(String[] s){  return new Parameter(param,s);}  }
class C{  public void addLicense(License license) throws LocalRepositoryException, CoordinatorClientException, ELMLicenseException {  if (getTargetInfoLock()) {    try {      License fullLicense=buildLicenseObjectFromText(license.getLicenseText());      if (fullLicense != null) {        boolean isTrial=false;        for (        LicenseFeature feature : fullLicense.getLicenseFeatures()) {          if (feature.getModelId().startsWith(LicenseConstants.VIPR_CONTROLLER) && feature.isTrialLicense()) {            isTrial=true;          }        }        if (!isTrial) {          for (          LicenseFeature licenseFeature : fullLicense.getLicenseFeatures()) {            if (licenseFeature.getModelId().contains(LicenseFeature.OLD_LICENSE_SUBMODEL)) {              _log.info("The license file contains a feature which is not supported any more. The license was not added to the system.");              throw APIException.badRequests.licenseIsNotValid("The license file contains a feature which is not supported any more. The license was not added to the system.");            }          }        }      }      updateCoordinatorWithLicenseFeatures(fullLicense,true);      updateCoordinatorWithLicenseText(license);      _sendEventScheduler.run();    }  finally {      releaseTargetVersionLock();    }  } else {    _log.warn("Cannot acquire lock for adding license");    throw APIException.serviceUnavailable.postLicenseBusy();  }}  }
class C{  public void handleSslErrorResponse(boolean proceed){  HttpsConnection connection=(HttpsConnection)(mConnection);  if (connection != null) {    connection.restartConnection(proceed);  }}  }
class C{  private Rectangle2D[] splitHorizontalBar(RectangularShape bar,double a,double b,double c){  Rectangle2D[] result=new Rectangle2D[4];  double y0=bar.getMinY();  double y1=Math.rint(y0 + (bar.getHeight() * a));  double y2=Math.rint(y0 + (bar.getHeight() * b));  double y3=Math.rint(y0 + (bar.getHeight() * c));  result[0]=new Rectangle2D.Double(bar.getMinX(),bar.getMinY(),bar.getWidth(),y1 - y0);  result[1]=new Rectangle2D.Double(bar.getMinX(),y1,bar.getWidth(),y2 - y1);  result[2]=new Rectangle2D.Double(bar.getMinX(),y2,bar.getWidth(),y3 - y2);  result[3]=new Rectangle2D.Double(bar.getMinX(),y3,bar.getWidth(),bar.getMaxY() - y3);  return result;}  }
class C{  public void pull(final PullParams params,final ProgressMonitor progressMonitor) throws IOException {  pull(params,progressMonitor,dockerDaemonUri);}  }
class C{  protected String doIt() throws Exception {  MCashFlow cashflow=new MCashFlow(getCtx(),getRecord_ID(),get_TrxName());  if (cashflow.isProcessed())   cashflow.setProcessed(false); else   cashflow.setProcessed(true);  cashflow.saveEx();  return "@Ok@";}  }
class C{  public synchronized boolean canThreadDecoding(Thread t){  ThreadStatus status=mThreadStatus.get(t);  if (status == null) {    return true;  }  return (status.mState != State.CANCEL);}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  public Relationship nextMostConsciousRelationship(Primitive type,Vertex ignoring,float min){  return nextMostConsciousRelationship(this.network.createVertex(type),ignoring,min,false);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  return toJSONObject(new XMLTokener(string));}  }
class C{  public void println(){  m_out.print("\n");}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  protected void addNode(FHTreeStateNode newChild){  boolean added=false;  int childIndex=newChild.getChildIndex();  for (int counter=0, maxCounter=getChildCount(); counter < maxCounter; counter++) {    if (((FHTreeStateNode)getChildAt(counter)).getChildIndex() > childIndex) {      added=true;      insert(newChild,counter);      counter=maxCounter;    }  }  if (!added)   add(newChild);}  }
class C{  private static void jcmd(String target,final Consumer<String> c,String... command) throws IOException, InterruptedException {  dbg_print("[jcmd] " + (command.length > 0 ? command[0] : "list"));  JDKToolLauncher l=JDKToolLauncher.createUsingTestJDK("jcmd");  l.addToolArg(target);  for (  String cmd : command) {    l.addToolArg(cmd);  }  Process p=ProcessTools.startProcess("jcmd",new ProcessBuilder(l.getCommand()),c);  p.waitFor();  dbg_print("[jcmd] --------");}  }
class C{  public long skip(long n) throws IOException {  if (_s == null)   return -1;  return _is.skip(n);}  }
class C{  private final void rehash(){  long min=this.count, max=0;  long[][] oldTable=this.table;  int oldCapacity=oldTable.length;  long[][] newTable=new long[oldCapacity * 2][];  final int onebitmask=oldCapacity;  for (int i=0; i < oldCapacity; i++) {    long[] list=oldTable[i];    if (list != null) {      int cnt0=0;      int cnt1=0;      int listlen=list.length;      if (listlen < min)       min=listlen;      if (listlen > max)       max=listlen;      for (int j=0; j < listlen; j++) {        if ((list[j] & onebitmask) == 0)         cnt0++; else         cnt1++;      }      if (cnt0 == 0) {        newTable[i + oldCapacity]=list;      } else       if (cnt1 == 0) {        newTable[i]=list;      } else {        long[] list0=new long[cnt0];        long[] list1=new long[cnt1];        for (int j=0; j < listlen; j++) {          if ((list[j] & onebitmask) == 0)           list0[--cnt0]=list[j]; else           list1[--cnt1]=list[j];        }        newTable[i]=list0;        newTable[i + oldCapacity]=list1;      }    }  }  this.threshold*=2;  this.table=newTable;  this.mask=newTable.length - 1;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  Attr attribute;  String namespaceURI=null;  String qualifiedName="abc:def";  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","dom:doc",docType);{    boolean success=false;    try {      attribute=newDoc.createAttributeNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("documentcreateattributeNS05",success);  }}  }
class C{  @Override public Object clone(){  return new IntVector(this);}  }
class C{  public long mask(){  return (1L << width) - 1;}  }
class C{  private static void prepareRNG(final Random rng){  for (int i=0; i < 100; i++) {    rng.nextDouble();  }}  }
class C{  public Vector3f subtractLocal(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x-=vec.x;  y-=vec.y;  z-=vec.z;  return this;}  }
class C{  public void buildTree(Instances train,Instances test,boolean keepData) throws Exception {  Instances[] localTrain, localTest;  int i;  if (keepData) {    m_train=train;  }  m_isLeaf=false;  m_isEmpty=false;  m_sons=null;  m_localModel=m_toSelectModel.selectModel(train,test);  m_test=new Distribution(test,m_localModel);  if (m_localModel.numSubsets() > 1) {    localTrain=m_localModel.split(train);    localTest=m_localModel.split(test);    train=test=null;    m_sons=new ClassifierTree[m_localModel.numSubsets()];    for (i=0; i < m_sons.length; i++) {      m_sons[i]=getNewTree(localTrain[i],localTest[i]);      localTrain[i]=null;      localTest[i]=null;    }  } else {    m_isLeaf=true;    if (Utils.eq(train.sumOfWeights(),0)) {      m_isEmpty=true;    }    train=test=null;  }}  }
class C{  public FolderUpIcon(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  public void testRLE() throws IOException {  ArrayList<File> files=FileUtils.getAllImageFiles(new File("testdata/ferrari"),true);  int sum=0, saved=0;  for (Iterator<File> iterator=files.iterator(); iterator.hasNext(); ) {    File next=iterator.next();    BufferedImage image=ImageIO.read(next);    CEDD f1=new CEDD();    f1.extract(image);    double[] hist=f1.getDoubleHistogram();    int[] rep=new int[hist.length];    int actualLength=0;    for (int i=0; i < hist.length; i++) {      if (hist[i] == 0) {        int count=0;        while (i + count < hist.length && hist[i + count] == 0 && count < 8)         count++;        if (count == 0)         rep[actualLength]=0; else {          rep[actualLength]=7 + count;          i+=count - 1;        }      } else {        rep[actualLength]=(int)hist[i];      }      actualLength++;    }    for (int i=0; i < actualLength; i++) {      System.out.print(rep[i] + " ");    }    System.out.println();    double[] hist2=new double[144];    int pos=0;    for (int i=0; i < actualLength; i++) {      if (rep[i] < 8) {        hist2[pos]=rep[i];        pos++;      } else {        for (int j=7; j < rep[i]; j++) {          hist2[pos]=0;          pos++;        }      }    }    sum+=144;    saved+=actualLength;    assertTrue(Arrays.equals(hist2,f1.getDoubleHistogram()));  }  System.out.println("sum of dimensions = " + sum);  System.out.println("actual dimensions = " + saved);}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitParameter(name,access);}  }
class C{  public static Collection<Role> all(){  return enums.all();}  }
class C{  protected boolean isSmall(){  return this.scale * this.textSizeInMeters < this.pixelSizeInMeters;}  }
class C{  private static Attr[] sortAttributes(NamedNodeMap attrs){  int len=(attrs != null) ? attrs.getLength() : 0;  Attr[] array=new Attr[len];  for (int i=0; i < len; i++) {    array[i]=(Attr)attrs.item(i);  }  for (int i=0; i < (len - 1); i++) {    String name=array[i].getNodeName();    int index=i;    for (int j=i + 1; j < len; j++) {      String curName=array[j].getNodeName();      if (curName.compareTo(name) < 0) {        name=curName;        index=j;      }    }    if (index != i) {      Attr temp=array[i];      array[i]=array[index];      array[index]=temp;    }  }  return (array);}  }
class C{  private void verifyTldCreation(String tldName,String roidSuffix,TldState tldState,String premiumList){  verifyTldCreation(tldName,roidSuffix,tldState,premiumList,Registry.DEFAULT_ADD_GRACE_PERIOD,Registry.DEFAULT_REDEMPTION_GRACE_PERIOD,Registry.DEFAULT_PENDING_DELETE_LENGTH);}  }
class C{  static String escapeStringForASCII(String s){  StringBuilder out=new StringBuilder();  char[] cArray=s.toCharArray();  for (int i=0; i < cArray.length; i++) {    char c=cArray[i];    if (c > 127) {      out.append("\\U");      String hex=Integer.toHexString(c);      while (hex.length() < 4)       hex="0" + hex;      out.append(hex);    } else     if (c == '\\') {      out.append("\\\\");    } else     if (c == '\"') {      out.append("\\\"");    } else     if (c == '\b') {      out.append("\\b");    } else     if (c == '\n') {      out.append("\\n");    } else     if (c == '\r') {      out.append("\\r");    } else     if (c == '\t') {      out.append("\\t");    } else {      out.append(c);    }  }  return out.toString();}  }
class C{  public void testGetNameWhenEarHasNoExtension(){  EAR ear=new EAR("/some/path/to/ejb/test");  assertEquals("test",ear.getName());}  }
class C{  protected int updateCharStats(final DBTransaction transaction,final Player player) throws SQLException {  final String query="UPDATE character_stats SET " + " admin=[admin], sentence='[sentence]', age=[age], level=[level]," + " outfit=[outfit], outfit_colors='[outfit_colors]', xp=[xp], money='[money]',"+ " married='[married]', atk='[atk]', def='[def]', hp='[hp]', karma='[karma]',"+ " head='[head]', armor='[armor]', lhand='[lhand]', rhand='[rhand]',"+ " legs='[legs]', feet='[feet]', cloak='[cloak]', lastseen='[lastseen]',"+ " finger='[finger]', zone='[zone]'"+ " WHERE name='[name]'";  Map<String,Object> params=getParamsFromPlayer(player);  logger.debug("storeCharacter is running: " + query);  final int count=transaction.execute(query,params);  return count;}  }
class C{  public static void writeGraphic(ActivityHistogram actHistogram,final String filename,final String actType){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(actHistogram.getDataForType(actType),actType,actHistogram.getIteration()),1024,768);  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  private ReplDBMSEvent filter(FilterVerificationHelper filterHelper,long seqno,String defaultSchema,String query) throws ReplicatorException, InterruptedException {  ReplDBMSEvent e=eventHelper.eventFromStatement(seqno,defaultSchema,query);  return filter(filterHelper,e);}  }
class C{  public void invokeCommand(NodeCommand command){  newCommands.add(command);}  }
class C{  protected void addTargetPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Transition_target_feature"),getString("_UI_PropertyDescriptor_description","_UI_Transition_target_feature","_UI_Transition_type"),SGraphPackage.Literals.TRANSITION__TARGET,true,false,true,null,null,null));}  }
class C{  public NodeProbe(String host,int port) throws IOException {  this.host=host;  this.port=port;  connect();}  }
class C{  public static AdUnits run(AdExchangeSeller adExchangeSeller,String adClientId,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all ad units for ad client %s\n",adClientId);  System.out.println("=================================================================");  String pageToken=null;  AdUnits adUnits=null;  do {    adUnits=adExchangeSeller.adunits().list(adClientId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (adUnits.getItems() != null && !adUnits.getItems().isEmpty()) {      for (      AdUnit unit : adUnits.getItems()) {        System.out.printf("Ad unit with code \"%s\", name \"%s\" and status \"%s\" was found.\n",unit.getCode(),unit.getName(),unit.getStatus());      }    } else {      System.out.println("No ad units found.");    }    pageToken=adUnits.getNextPageToken();  } while (pageToken != null);  System.out.println();  return adUnits;}  }
class C{  private ChangeAnalysis condense(List<IChange> changes){  List<IAtomicChange> atomicResult=changeManager.flattenAndOrganized(changes);  if (atomicResult.isEmpty()) {    return new ChangeAnalysis(atomicResult,true);  }  URI uri=atomicResult.get(0).getURI();  if (!(atomicResult.get(0) instanceof Replacement)) {    return new ChangeAnalysis(atomicResult,false);  }  Replacement rText=null;  for (  IAtomicChange nxt : atomicResult) {    if (!(nxt instanceof Replacement) || !uri.equals(nxt.getURI())) {      return new ChangeAnalysis(atomicResult,false);    }    Replacement rplc=(Replacement)nxt;    if (rplc.getText() != null && rplc.getText().length() > 0) {      if (rText == null) {        rText=rplc;      } else {        return new ChangeAnalysis(atomicResult,false);      }    }  }  Replacement current=null;  for (int i=atomicResult.size() - 1; i >= 0; i--) {    IAtomicChange nxt=atomicResult.get(i);    if (nxt == rText) {      continue;    }    Replacement rplc=(Replacement)nxt;    if (current == null) {      current=rplc;      continue;    }    if (current.getOffset() + current.getLength() == rplc.getOffset()) {      current=new Replacement(uri,current.getOffset(),current.getLength() + rplc.getLength(),"");    } else {      return new ChangeAnalysis(atomicResult,false);    }  }  if (current == null || rText == null || current.getLength() != rText.getText().length()) {    return new ChangeAnalysis(atomicResult,false);  }  List<IAtomicChange> orderedChanges=null;  if (rText == atomicResult.get(0)) {    orderedChanges=Arrays.asList(rText,current);  } else   if (rText == atomicResult.get(atomicResult.size() - 1)) {    orderedChanges=Arrays.asList(current,rText);  } else {    System.out.println("XXX");    return new ChangeAnalysis(atomicResult,false);  }  ChangeAnalysis result=new ChangeAnalysis(orderedChanges,true);  result.deletion=current;  result.newText=rText;  return result;}  }
class C{  public static ConfigurationResponse requestConfigurationFromLocators(DistributionConfig config,List<String> locatorList) throws ClusterConfigurationNotAvailableException, UnknownHostException {  List<String> groups=ClusterConfigurationLoader.getGroups(config);  ConfigurationRequest request=new ConfigurationRequest();  request.addGroups(SharedConfiguration.CLUSTER_CONFIG);  for (  String group : groups) {    request.addGroups(group);  }  request.setNumAttempts(10);  ConfigurationResponse response=null;  TcpClient client=new TcpClient();  for (  String locatorInfo : locatorList) {    DistributionLocatorId dlId=new DistributionLocatorId(locatorInfo);    String ipaddress=dlId.getBindAddress();    InetAddress locatorInetAddress=null;    if (!StringUtils.isBlank(ipaddress)) {      locatorInetAddress=InetAddress.getByName(ipaddress);    } else {      locatorInetAddress=dlId.getHost();    }    int port=dlId.getPort();    try {      response=(ConfigurationResponse)client.requestToServer(locatorInetAddress,port,request,10000);    } catch (    UnknownHostException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }catch (    ClassNotFoundException e) {      e.printStackTrace();    }  }  if (response == null || response.failedToGetSharedConfig()) {    throw new ClusterConfigurationNotAvailableException(LocalizedStrings.Launcher_Command_FAILED_TO_GET_SHARED_CONFIGURATION.toLocalizedString());  }  return response;}  }
class C{  public Vector3f divideLocal(Vector3f scalar){  x/=scalar.x;  y/=scalar.y;  z/=scalar.z;  return this;}  }
class C{  @Override protected void configure(){}  }
class C{  static IoBuffer copy(ByteBuffer src){  IoBuffer copy=IoBuffer.allocate(src.remaining());  copy.put(src);  copy.flip();  return copy;}  }
class C{  private void addListenerToSortedList(final Listener listener){  if (this.listeners.contains(listener)) {    this.listeners.remove(listener);  }  for (int i=0; i < this.listeners.size(); i++) {    if (listener.getLevel().compareTo(this.listeners.get(i).getLevel()) >= 0) {      this.listeners.add(i,listener);      return;    }  }  this.listeners.add(listener);}  }
class C{  @Deprecated public CSVStrategy(char delimiter,char encapsulator,char commentStart,char escape,boolean ignoreLeadingWhitespaces,boolean ignoreTrailingWhitespaces,boolean interpretUnicodeEscapes,boolean ignoreEmptyLines){  this(delimiter,encapsulator,commentStart,escape,ignoreLeadingWhitespaces,ignoreTrailingWhitespaces,interpretUnicodeEscapes,ignoreEmptyLines,DEFAULT_PRINTER_NEWLINE);}  }
class C{  public CLEvent copyElementsTo(CLQueue queue,CLBuffer destination,long sourceElementOffset,long destinationElementOffset,long elementCount,CLEvent... eventsToWaitFor){  long elementSize=getElementSize();  return copyBytesTo(queue,destination,sourceElementOffset * elementSize,destinationElementOffset * elementSize,elementCount * elementSize,eventsToWaitFor);}  }
class C{  @Override public void close() throws XMLStreamException {  this.parser=null;}  }
class C{  private static final String toXml(SandboxRay ray){  StringBuilder sb=new StringBuilder();  sb.append("<Ray Name=\"").append(ray.getName()).append("\">").append(XmlGenerator.toXml(ray.getStart(),"Start")).append("<Direction>").append(ray.getDirection()).append("</Direction>").append("<Length>").append(ray.getLength()).append("</Length>").append("<IgnoreSensors>").append(ray.isIgnoreSensors()).append("</IgnoreSensors>").append("<TestAll>").append(ray.isAll()).append("</TestAll>").append("</Ray>");  return sb.toString();}  }
class C{  IfdData(int ifdId){  mIfdId=ifdId;}  }
class C{  @Override public Cursor queryCharacter(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  final MatrixCursor cursor=new MatrixCursor(CharacterContract.CharacterEntry.sColumnsToDisplay);  long requestId=ContentUris.parseId(uri);synchronized (this) {    CharacterRecord cr=mCharacterMap.get(requestId);    if (cr != null) {      buildCursorConditionally(cursor,cr,selection,selectionArgs);    }  }  return cursor;}  }
class C{  public Builder includeRetweets(Boolean includeRetweets){  this.includeRetweets=includeRetweets;  return this;}  }
class C{  protected void onSampleRead(MediaChunk mediaChunk,SampleHolder sampleHolder){}  }
class C{  public void load(HttpServletRequest request){  Cookie[] cookies=request.getCookies();  if (cookies != null && cookies.length > 0) {    for (    Cookie cookie : cookies) {      String name=cookie.getName();      String value=cookie.getValue();      if (name.startsWith("configuration.")) {        if (IS_QUICK_SALES.equalsIgnoreCase(name)) {          try {            isQuickSales=Boolean.parseBoolean(value);          } catch (          Exception e) {            log.log(Level.WARNING,"Invalid value for: " + IS_QUICK_SALES + " Using default: "+ isQuickSales,e);          }        }        if (IS_CUSTOMER_COMPULSORY.equalsIgnoreCase(name)) {          try {            isCustomerCompulsory=Boolean.parseBoolean(value);          } catch (          Exception e) {            log.log(Level.WARNING,"Invalid value for: " + IS_CUSTOMER_COMPULSORY + " Using default: "+ isCustomerCompulsory,e);          }        }        if (ALLOW_CREDIT_SALES.equalsIgnoreCase(name)) {          try {            allowCreditSales=Boolean.parseBoolean(value);          } catch (          Exception e) {            log.log(Level.WARNING,"Invalid value for: " + ALLOW_CREDIT_SALES + " Using default: "+ allowCreditSales,e);          }        }        if (ALLOW_CUSTOMER_RETURN_ORDER.equalsIgnoreCase(name)) {          try {            allowCustomerReturnOrder=Boolean.parseBoolean(value);          } catch (          Exception e) {            log.log(Level.WARNING,"Invalid value for: " + ALLOW_CUSTOMER_RETURN_ORDER + " Using default: "+ allowCustomerReturnOrder,e);          }        }        if (ALLOW_INVOKE_CUSTOMER_RETURN_ORDER.equalsIgnoreCase(name)) {          try {            allowInvokeCustomerReturnOrder=Boolean.parseBoolean(value);          } catch (          Exception e) {            log.log(Level.WARNING,"Invalid value for: " + ALLOW_INVOKE_CUSTOMER_RETURN_ORDER + " Using default: "+ allowInvokeCustomerReturnOrder,e);          }        }        if (PAYMENT_RULE.equalsIgnoreCase(name)) {          if (value.equalsIgnoreCase(Constants.PAYMENT_RULE_CASH) || value.equalsIgnoreCase(Constants.PAYMENT_RULE_CARD) || value.equalsIgnoreCase(Constants.PAYMENT_RULE_CHEQUE)|| value.equalsIgnoreCase(Constants.PAYMENT_RULE_MIXED)) {            paymentRule=value;          } else {            log.log(Level.WARNING,"Invalid value for: " + PAYMENT_RULE + " Using default: "+ paymentRule);          }        }        if (SEARCH_PRODUCT_BY.equalsIgnoreCase(name)) {          if (value.equalsIgnoreCase("barcode") || value.equalsIgnoreCase("name") || value.equalsIgnoreCase("description")) {            searchProductBy=value;          } else {            log.log(Level.WARNING,"Invalid value for: " + SEARCH_PRODUCT_BY + " Using default: "+ searchProductBy);          }        }      }    }  }}  }
class C{  private boolean verifyPlacement(ProtectionSystem ps,RPProtectionRecommendation recommendation,int resourceCount){  if (!this.fireProtectionPlacementRules(ps,recommendation,resourceCount)) {    _log.warn(String.format("Although we found a solution using RP system %s, the protection placement rules " + "found there aren't enough available resource on the appliance to satisfy the request.",ps.getLabel()));    recommendation.setPlacementStepsCompleted(PlacementProgress.PROTECTION_SYSTEM_CANNOT_FULFILL_REQUEST);    if (secondaryPlacementStatus != null && secondaryPlacementStatus.isBestSolutionToDate(recommendation)) {      secondaryPlacementStatus.setLatestInvalidRecommendation(recommendation);    }    return false;  }  return true;}  }
class C{  public void writeSkyLight(ByteBuf output){  output.writeBytes(skyLight.getHandle());}  }
class C{  @Override public String checkForSnapshotsToCopyToTarget(Workflow workflow,StorageSystem storageSystem,String previousStep,Map<URI,Integer> volumeMap,Collection<Map<URI,Integer>> volumesToAdd){  String step=previousStep;  ListMultimap<String,URI> snaps=getBlockSnapshotsRequiringCopyToTarget(volumeMap,volumesToAdd);  if (snaps != null && !snaps.isEmpty()) {    for (    Map.Entry<String,Collection<URI>> entries : snaps.asMap().entrySet()) {      List<URI> snapshots=new ArrayList<URI>();      snapshots.addAll(entries.getValue());      _log.info(String.format("Need to run copy-to-target snapshots in snap set %s:%n%s",entries.getKey(),Joiner.on(',').join(snapshots)));      step=SnapshotWorkflowEntryPoints.generateCopySnapshotsToTargetWorkflow(workflow,step,storageSystem,snapshots);    }  } else {    _log.info("There are no block snapshots that require copy-to-target.");  }  return step;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrgetownerelement01.class,args);}  }
