class C{  private TextRenderInfo(TextRenderInfo parent,PdfString string,float horizontalOffset){  this.string=string;  this.textToUserSpaceTransformMatrix=new Matrix(horizontalOffset,0).multiply(parent.textToUserSpaceTransformMatrix);  this.gs=parent.gs;  this.canvasTagHierarchy=parent.canvasTagHierarchy;  this.fontMatrix=gs.getFont().getFontMatrix();}  }
class C{  public void invalidateSession(Object session,HttpServletRequest request,HttpServletResponse response) throws SessionException {  try {    SSOToken token=(SSOToken)session;    AuthUtils.logout(token.getTokenID().toString(),request,response);    if ((request != null) && (response != null)) {      AuthUtils.clearAllCookies(request,response);    }  } catch (  SSOException se) {    throw new SessionException(se);  }}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public KeyStoreJwtTokenConfig withEncryptionKeyPairAlias(String encryptionKeyPairAlias){  this.encryptionKeyPairAlias=encryptionKeyPairAlias;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildnomodificationallowederr.class,args);}  }
class C{  @Override public boolean ready() throws IOException {  return false;}  }
class C{  public void transformJson(final JsonValue jsonValue,final Subject callingSubject,final String realm) throws EntitlementException {  final Map<String,Boolean> actions=new HashMap<>();  final Set<String> resources=new HashSet<>();  final Collection<String> resourceTypeUuids=jsonValue.get(RESOURCE_TYPE_UUIDS).required().asCollection(String.class);  for (  String resourceTypeUuid : resourceTypeUuids) {    final ResourceType resourceType=resourceTypeService.getResourceType(callingSubject,realm,resourceTypeUuid);    if (resourceType == null) {      throw new EntitlementException(EntitlementException.NO_SUCH_RESOURCE_TYPE,resourceTypeUuid);    }    actions.putAll(resourceType.getActions());    resources.addAll(resourceType.getPatterns());  }  jsonValue.remove(RESOURCE_TYPE_UUIDS);  jsonValue.remove(APPLICATION_DISPLAY_NAME);  jsonValue.add(ACTIONS,actions);  jsonValue.add(RESOURCES,resources);  jsonValue.add(REALM,realm);}  }
class C{  public ExpandRoomComplete calculate(ExpandRoom p_room){  int net_no=r_engine.get_net_no();  SortedRoomsList room_neighbours=calculate_neighbours(p_room,net_no,r_engine.art_search_tree,r_engine.new_room_id_no());  if (room_neighbours == null)   return null;  boolean edge_removed=room_neighbours.try_remove_edge(net_no,r_engine.art_search_tree);  ExpandRoomComplete result=room_neighbours.completed_room;  if (edge_removed) {    r_engine.remove_all_doors(result);    return calculate(p_room);  }  if (room_neighbours.sorted_neighbours.isEmpty()) {    if (result instanceof ExpandRoomObstacle) {      calculate_incomplete_rooms_with_empty_neighbours((ExpandRoomObstacle)p_room);    }  } else {    room_neighbours.calculate_new_incomplete_rooms(r_engine);    if (!result.get_shape().dimension().is_area()) {      System.out.println("AutorouteEngine.calculate_new_incomplete_rooms_with_mmore_than_1_neighbour: unexpected dimension for smoothened_shape");    }  }  if (result instanceof ExpandRoomFreespaceComplete) {    calculate_target_doors((ExpandRoomFreespaceComplete)result,room_neighbours.own_net_objects,r_engine);  }  return result;}  }
class C{  Context(){  copyTables();}  }
class C{  public static void putString(String key,String value){  if (mSharedPreferences == null) {    return;  }  Editor editor=mSharedPreferences.edit();  editor.putString(key,value);  editor.apply();}  }
class C{  public int responseCode(){  return responseCode;}  }
class C{  protected void shiftGapEndUp(int newGapEnd){  int adjustIndex=findMarkAdjustIndex(getGapEnd());  int n=marks.size();  for (int i=adjustIndex; i < n; i++) {    MarkData mark=marks.elementAt(i);    if (mark.index >= newGapEnd) {      break;    }    mark.index=newGapEnd;  }  super.shiftGapEndUp(newGapEnd);  resetMarksAtZero();}  }
class C{  public int hashCode(){  return value.hashCode() ^ locale.hashCode();}  }
class C{  @DataProvider(name="invalidRules") public Object[][] inValidData(){  return new Object[][]{{"128.33.23.xx"},{"128.33.23.22++"},{"128.33.23.22+"},{"128.33.23.22+56"},{"128.33.23.22+255.255.45"},{"128.33.23.22+255.255.45.45"},{"128.33.23.22/-1"},{"128..33.23"},{"128.33.23.66.88"},{"128.33.600.66"},{"128.33.9.66/33"},{"."},{"foo"}};}  }
class C{  private boolean matchHostName(final String remoteHostName){  final String[] s=remoteHostName.split("\\.",-1);  if (s.length != hostName.length) {    return false;  }  if (ruleType == RuleType.ALLWILDCARD) {    return true;  }  for (int i=0; i < s.length; i++) {    if (!"*".equals(hostName[i]) && !s[i].equalsIgnoreCase(hostName[i])) {      return false;    }  }  return true;}  }
class C{  public ObjectVector(int blocksize,int increaseSize){  m_blocksize=increaseSize;  m_mapSize=blocksize;  m_map=new Object[blocksize];}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  return callId.encode(retval);}  }
class C{  boolean update(CSN csn){  return state.update(csn);}  }
class C{  public static String parseDITContentRuleOID(String definition) throws DirectoryException {  return parseOID(definition,ERR_PARSING_DIT_CONTENT_RULE_OID);}  }
class C{  public boolean append(String p_button_name,String p_window_title,PrintableInfo p_object){  Collection<PrintableInfo> object_list=new LinkedList<PrintableInfo>();  object_list.add(p_object);  return append_objects(p_button_name,p_window_title,object_list);}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration(perms);  }}  }
class C{  static int lookupLanguageItem(XMPNode arrayNode,String language) throws XMPException {  if (!arrayNode.getOptions().isArray()) {    throw new XMPException("Language item must be used on array",XMPError.BADXPATH);  }  for (int index=1; index <= arrayNode.getChildrenLength(); index++) {    XMPNode child=arrayNode.getChild(index);    if (!child.hasQualifier() || !XML_LANG.equals(child.getQualifier(1).getName())) {      continue;    } else     if (language.equals(child.getQualifier(1).getValue())) {      return index;    }  }  return -1;}  }
class C{  @Override protected void onRestoreInstanceState(Parcelable state){  Bundle savedState=(Bundle)state;  Parcelable superState=savedState.getParcelable("PARENT");  super.onRestoreInstanceState(superState);  this.mAngleStart=savedState.getFloat("mAngleStart");  this.mAngleSweep=savedState.getFloat("mAngleSweep");}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  super.insertUpdate(changes,adjustAllocation(a),f);  updateVisibilityModel();}  }
class C{  public void read(ByteBuffer byteBuffer) throws TagNotFoundException {  if (!seek(byteBuffer)) {    throw new TagNotFoundException("ID3v1 tag not found");  }  logger.finer("Reading v1.1 tag");  byte[] dataBuffer=new byte[TAG_LENGTH];  byteBuffer.position(0);  byteBuffer.get(dataBuffer,0,TAG_LENGTH);  title=Utils.getString(dataBuffer,FIELD_TITLE_POS,FIELD_TITLE_LENGTH,"ISO-8859-1").trim();  Matcher m=AbstractID3v1Tag.endofStringPattern.matcher(title);  if (m.find()) {    title=title.substring(0,m.start());  }  artist=Utils.getString(dataBuffer,FIELD_ARTIST_POS,FIELD_ARTIST_LENGTH,"ISO-8859-1").trim();  m=AbstractID3v1Tag.endofStringPattern.matcher(artist);  if (m.find()) {    artist=artist.substring(0,m.start());  }  album=Utils.getString(dataBuffer,FIELD_ALBUM_POS,FIELD_ALBUM_LENGTH,"ISO-8859-1").trim();  m=AbstractID3v1Tag.endofStringPattern.matcher(album);  if (m.find()) {    album=album.substring(0,m.start());  }  year=Utils.getString(dataBuffer,FIELD_YEAR_POS,FIELD_YEAR_LENGTH,"ISO-8859-1").trim();  m=AbstractID3v1Tag.endofStringPattern.matcher(year);  if (m.find()) {    year=year.substring(0,m.start());  }  comment=Utils.getString(dataBuffer,FIELD_COMMENT_POS,FIELD_COMMENT_LENGTH,"ISO-8859-1").trim();  m=AbstractID3v1Tag.endofStringPattern.matcher(comment);  if (m.find()) {    comment=comment.substring(0,m.start());  }  track=dataBuffer[FIELD_TRACK_POS];  genre=dataBuffer[FIELD_GENRE_POS];}  }
class C{  public void decrement(){  int counterVal=counter.decrementAndGet();  if (counterVal == 0) {    if (null != resourceCallback) {      resourceCallback.onTransitionToIdle();    }  }  if (counterVal < 0) {    throw new IllegalArgumentException("Counter has been corrupted!");  }}  }
class C{  public final boolean checkTag(int identifier){  return true;}  }
class C{  public Phaser(Phaser parent,int parties){  if (parties >>> PARTIES_SHIFT != 0)   throw new IllegalArgumentException("Illegal number of parties");  int phase=0;  this.parent=parent;  if (parent != null) {    final Phaser root=parent.root;    this.root=root;    this.evenQ=root.evenQ;    this.oddQ=root.oddQ;    if (parties != 0)     phase=parent.doRegister(1);  } else {    this.root=this;    this.evenQ=new AtomicReference<QNode>();    this.oddQ=new AtomicReference<QNode>();  }  this.state=(parties == 0) ? (long)EMPTY : ((long)phase << PHASE_SHIFT) | ((long)parties << PARTIES_SHIFT) | ((long)parties);}  }
class C{  public LineString asLineString(int precision){  return LineString.fromPolyline(getGeometry(),precision);}  }
class C{  public java.lang.String signXML(java.lang.String xmlString,java.lang.String certAlias,java.lang.String algorithm,java.lang.String idAttrName,java.lang.String id,boolean includeCert) throws XMLSignatureException {  if (xmlString == null || xmlString.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: xmlString is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  Document doc=null;  try {    doc=XMLUtils.toDOMDocument(xmlString,SAMLUtilsCommon.debug);  } catch (  Exception e) {    SAMLUtilsCommon.debug.error("signXML Exception: ",e);    throw new XMLSignatureException(e.getMessage());  }  Element el=signXML(doc,certAlias,algorithm,idAttrName,id,includeCert,null);  return XMLUtils.print(el);}  }
class C{  public void componentMoved(ComponentEvent e){}  }
class C{  protected void handleEndTag(TagElement tag){  Element elem=tag.getElement();  if (elem == dtd.body) {    inbody--;  } else   if (elem == dtd.title) {    intitle--;    seentitle=true;  } else   if (elem == dtd.head) {    inhead--;  } else   if (elem == dtd.style) {    instyle--;  } else   if (elem == dtd.script) {    inscript--;  }  if (debugFlag) {    debug("End Tag: " + tag.getHTMLTag() + " pos: "+ getCurrentPos());  }  callback.handleEndTag(tag.getHTMLTag(),getBlockStartPosition());}  }
class C{  public static boolean containsFullWorkflow(TlsContext tlsContext){  List<ProtocolMessage> protocolMessages=tlsContext.getWorkflowTrace().getProtocolMessages();  List<ProtocolMessageTypeHolder> configuredProtocolMessageOrder=tlsContext.getPreconfiguredProtocolMessages();  if (protocolMessages.size() != configuredProtocolMessageOrder.size()) {    return false;  }  for (int i=0; i < protocolMessages.size(); i++) {    ProtocolMessage pm=protocolMessages.get(i);    ProtocolMessageTypeHolder typeConfigured=configuredProtocolMessageOrder.get(i);    if (!typeConfigured.equals(new ProtocolMessageTypeHolder(pm))) {      return false;    }  }  return true;}  }
class C{  public ClientRegistrationFilter(final ClientRegistrationRepository repository,final Handler registrationHandler,final JsonValue config){  this.registrations=checkNotNull(repository);  this.registrationHandler=registrationHandler;  this.config=config;}  }
class C{  private int nextInt(StringTokenizer tok,String errorMsg) throws SAXException {  if (!tok.hasMoreTokens()) {    throw new SAXException(errorMsg);  }  try {    return Integer.parseInt(tok.nextToken());  } catch (  NumberFormatException nfe) {    throw new SAXException(errorMsg);  }}  }
class C{  public static float signum(float f){  return (f == 0.0f || Float.isNaN(f)) ? f : copySign(1.0f,f);}  }
class C{  private URL createSearchURL(URL url) throws MalformedURLException {  if (url == null) {    return url;  }  String protocol=url.getProtocol();  if (isDirectory(url) || protocol.equals("jar")) {    return url;  }  if (factory == null) {    return new URL("jar","",-1,url.toString() + "!/");  }  return new URL("jar","",-1,url.toString() + "!/",factory.createURLStreamHandler("jar"));}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public boolean stopCellEditing(){  return delegate.stopCellEditing();}  }
class C{  public boolean isSecure(){  return true;}  }
class C{  private static void writeToConsole(LDIFEntryWriter writer,Entry entry) throws IOException {  writer.writeEntry(entry);  writer.flush();}  }
class C{  public XMLString toLowerCase(Locale locale){  return new XString(str().toLowerCase(locale));}  }
class C{  private static int marker(int marker){  for (int i=0; i < VALID_MARKERS.length; i++) {    if (marker == VALID_MARKERS[i]) {      return VALID_MARKER;    }  }  for (int i=0; i < NOPARAM_MARKERS.length; i++) {    if (marker == NOPARAM_MARKERS[i]) {      return NOPARAM_MARKER;    }  }  for (int i=0; i < UNSUPPORTED_MARKERS.length; i++) {    if (marker == UNSUPPORTED_MARKERS[i]) {      return UNSUPPORTED_MARKER;    }  }  return NOT_A_MARKER;}  }
class C{  public X509Certificate generate(PrivateKey key) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,(SecureRandom)null);}  }
class C{  public void incSAML1Cache(String assertOrArtifact,String rWHM){  if (sSAML1Svc != null) {    sSAML1Svc.incSAML1Cache(assertOrArtifact,rWHM);  }}  }
class C{  private void deleteDir(File dirhandle) throws SMSException {  File[] files=dirhandle.listFiles();  if (files != null && files.length > 0) {    for (int i=0; i < files.length; i++) {      if (files[i].isDirectory()) {        deleteDir(files[i]);      } else       if (!files[i].delete()) {        String errmsg="SMSFlatFileObject.delete: File " + files[i].getPath() + " could not be removed!";        mDebug.error(errmsg);        throw new SMSException(errmsg);      }    }  }  dirhandle.delete();}  }
class C{  public Pair<Boolean,Record<K,V>> seekToRecord(final K key,final KeyMatchingStrategy matchStrategy,final PositionStrategy positionStrategy) throws ChangelogException {  Reject.ifNull(key);  final long markerPosition=searchClosestBlockStartToKey(key);  if (markerPosition >= 0) {    return positionToKey(markerPosition,key,matchStrategy,positionStrategy);  }  return Pair.of(false,null);}  }
class C{  public void createFederation(String realm,FederationElement federation) throws WSFederationMetaException {  String federationId=federation.getFederationID();  if (federationId == null) {    federationId=WSFederationConstants.DEFAULT_FEDERATION_ID;  }  if (realm == null) {    realm="/";  }  String[] objs={federationId,realm};  try {    Map attrs=WSFederationMetaUtils.convertJAXBToAttrMap(ATTR_METADATA,federation);    configInst.createConfiguration(realm,federationId,attrs);    LogUtil.access(Level.INFO,LogUtil.ENTITY_DESCRIPTOR_CREATED,objs,null);  } catch (  ConfigurationException e) {    debug.error("WSFederationMetaManager.createFederation:",e);    String[] data={e.getMessage(),federationId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_ENTITY_DESCRIPTOR,data,null);    throw new WSFederationMetaException(e);  }catch (  JAXBException jaxbe) {    debug.error("WSFederationMetaManager.createFederation:",jaxbe);    LogUtil.error(Level.INFO,LogUtil.CREATE_INVALID_ENTITY_DESCRIPTOR,objs,null);    throw new WSFederationMetaException("invalid_descriptor",objs);  }}  }
class C{  private static boolean isMisroutedRequest(HttpServletRequest request,HttpServletResponse response,PrintWriter out,Object session) throws SAML2Exception, SessionException {  String classMethod="IDPSingleLogout.isMisroutedRequest : ";  String idpSessionIndex=IDPSSOUtil.getSessionIndex(session);  if (idpSessionIndex == null) {    if (debug.messageEnabled()) {      debug.message(classMethod + "No SP session participant(s)");    }    MultiProtocolUtils.invalidateSession(session,request,response,SingleLogoutManager.SAML2);    return true;  }  String serverId=idpSessionIndex.substring(idpSessionIndex.length() - 2);  if (debug.messageEnabled()) {    debug.message(classMethod + "idpSessionIndex=" + idpSessionIndex+ ", id="+ serverId);  }  if (!serverId.equals(SAML2Utils.getLocalServerID())) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "SLO request is mis-routed, we are " + SAML2Utils.getLocalServerID()+ " and request is owned by "+ serverId);    }    String remoteServiceURL=SAML2Utils.getRemoteServiceURL(serverId);    String remoteLogoutURL=remoteServiceURL + SAML2Utils.removeDeployUri(request.getRequestURI());    String queryString=request.getQueryString();    if (queryString != null) {      remoteLogoutURL=remoteLogoutURL + QUESTION_MARK + queryString;    }    HashMap remoteRequestData=SAML2Utils.sendRequestToOrigServer(request,response,remoteLogoutURL);    String redirect_url=null;    String output_data=null;    if (remoteRequestData != null && !remoteRequestData.isEmpty()) {      redirect_url=(String)remoteRequestData.get(SAML2Constants.AM_REDIRECT_URL);      output_data=(String)remoteRequestData.get(SAML2Constants.OUTPUT_DATA);    }    if (debug.messageEnabled()) {      debug.message(classMethod + "redirect_url : " + redirect_url);      debug.message(classMethod + "output_data : " + output_data);    }    if ((redirect_url != null) && !redirect_url.equals("")) {      if (debug.messageEnabled()) {        debug.message(classMethod + "Redirecting the response, " + "redirect actioned by the JSP");      }      try {        response.sendRedirect(redirect_url);      } catch (      IOException ex) {        debug.error(classMethod + "Error when redirecting",ex);      }      return true;    }    if ((output_data != null) && (!output_data.equals(""))) {      if (debug.messageEnabled()) {        debug.message(classMethod + "Printing the forwarded response");      }      response.setContentType("text/html; charset=UTF-8");      out.println(output_data);      return true;    }  }  return false;}  }
class C{  @SafeVarargs public static <A>ImmutableList<A> of(final A x1,final A... rest){  return new ImmutableList<>(x1,from(rest));}  }
class C{  public boolean isCommitted(){  return committed;}  }
class C{  public static void main(final String[] args){  if (args.length < 4 || args.length > 5) {    System.err.println("Usage: host port username password [ldifFileName]");    System.exit(1);  }  final String hostName=args[0];  final int port=Integer.parseInt(args[1]);  final String userName=args[2];  final String password=args[3];  InputStream ldif;  if (args.length > 4) {    try {      ldif=new FileInputStream(args[4]);    } catch (    final FileNotFoundException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue());      return;    }  } else {    ldif=System.in;  }  final LDIFChangeRecordReader reader=new LDIFChangeRecordReader(ldif);  final LDAPConnectionFactory factory=new LDAPConnectionFactory(hostName,port);  Connection connection=null;  try {    connection=factory.getConnection();    connection.bind(userName,password.toCharArray());    final ConnectionChangeRecordWriter writer=new ConnectionChangeRecordWriter(connection);    while (reader.hasNext()) {      ChangeRecord changeRecord=reader.readChangeRecord();      writer.writeChangeRecord(changeRecord);      System.err.println("Successfully modified entry " + changeRecord.getName());    }  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  }catch (  final IOException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    return;  } finally {    if (connection != null) {      connection.close();    }    try {      reader.close();    } catch (    final IOException ignored) {    }  }}  }
class C{  public void paintArrowButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  public void testIsUnderflow(){  assertTrue(CoderResult.UNDERFLOW.isUnderflow());  assertFalse(CoderResult.OVERFLOW.isUnderflow());  assertFalse(CoderResult.malformedForLength(1).isUnderflow());  assertFalse(CoderResult.unmappableForLength(1).isUnderflow());}  }
class C{  public final void putAll(final Problems problems){  if (problems == this) {    throw new IllegalArgumentException("putAll to self");  }  this.problems.addAll(problems.problems);}  }
class C{  @Override public void processResults(T result){  store.addTokenOperation(null,operation,true);  handler.processResults(result);}  }
class C{  private void copyZipEntry(ZipEntry entry,File destination,ZipInputStream is,int ratioBeforeCompleted,int ratioWhenCompleted,Map<String,List<String>> permissions) throws IOException {  if (application != null) {    LocalizableMessage progressSummary=INFO_PROGRESS_EXTRACTING.get(Utils.getPath(destination));    if (application.isVerbose()) {      application.notifyListenersWithPoints(ratioBeforeCompleted,progressSummary);    } else {      application.notifyListenersRatioChange(ratioBeforeCompleted);    }  }  logger.info(LocalizableMessage.raw("extracting " + Utils.getPath(destination)));  if (!Utils.ensureParentsExist(destination)) {    throw new IOException("Could not create parent path: " + destination);  }  if (entry.isDirectory()) {    String perm=getDirectoryFileSystemPermissions(destination);    addPermission(destination,permissions,perm);    if (!Utils.createDirectory(destination)) {      throw new IOException("Could not create path: " + destination);    }  } else {    String perm=Utils.getFileSystemPermissions(destination);    addPermission(destination,permissions,perm);    Utils.createFile(destination,is);  }  if (application != null && application.isVerbose()) {    application.notifyListenersDone(ratioWhenCompleted);  }}  }
class C{  public static boolean isMethodReturnTypeGeneric(String desc){  return desc.contains(")T");}  }
class C{  public int viewToModel(Point pt){  return getUI().viewToModel(this,pt);}  }
class C{  private Math(){}  }
class C{  @Override public synchronized Set<Map.Entry<Object,Object>> entrySet(){  checkInitialized();  if (entrySet == null) {    if (entrySetCallCount++ == 0)     entrySet=Collections.unmodifiableMap(this).entrySet(); else     return super.entrySet();  }  if (entrySetCallCount != 2)   throw new RuntimeException("Internal error.");  return entrySet;}  }
class C{  public PdfNameTree(PdfCatalog catalog,PdfName treeType){  this.treeType=treeType;  this.catalog=catalog;  items=getNames();}  }
class C{  @Override protected Object createSsoServerLoggingSvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   loggingSvcGroup=new SsoServerLoggingSvcImpl(this,server); else   loggingSvcGroup=new SsoServerLoggingSvcImpl(this);  return loggingSvcGroup;}  }
class C{  @Override protected synchronized void beforeWrite(int n){  count+=n;}  }
class C{  public Label(){}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  @Override public Principal authenticate(String username,String clientDigest,String nonce,String nc,String cnonce,String qop,String realmName,String md5a2){  Principal authenticatedUser=null;  for (  Realm realm : realms) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("combinedRealm.authStart",username,realm.getClass().getName()));    }    authenticatedUser=realm.authenticate(username,clientDigest,nonce,nc,cnonce,qop,realmName,md5a2);    if (authenticatedUser == null) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("combinedRealm.authFail",username,realm.getClass().getName()));      }    } else {      if (log.isDebugEnabled()) {        log.debug(sm.getString("combinedRealm.authSuccess",username,realm.getClass().getName()));      }      break;    }  }  return authenticatedUser;}  }
class C{  public boolean beginContentImageDisplay(ChildDisplayEvent event){  return ((pageImage != null) && (pageImage.length() > 0));}  }
class C{  @Override public void onTokenAvailable(Context context,String token,boolean updated){  Core.registerDeviceToken(context,token);  Log.d("HSRL","New token available, setting it to helpshift");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.WrittenConsentElement createWrittenConsentElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.WrittenConsentElementImpl();}  }
class C{  private void loadDefinitionClasses(final InputStream is) throws ConfigException {  final BufferedReader reader=new BufferedReader(new InputStreamReader(is));  final List<AbstractManagedObjectDefinition<?,?>> definitions=new LinkedList<>();  while (true) {    String className;    try {      className=reader.readLine();    } catch (    final IOException e) {      final LocalizableMessage msg=ERR_CLASS_LOADER_CANNOT_READ_MANIFEST_FILE.get(e.getMessage());      throw new ConfigException(msg,e);    }    if (className == null) {      break;    }    className=className.trim();    if (className.isEmpty() || className.startsWith("#")) {      continue;    }    debugLogger.trace("Loading class " + className);    Class<?> theClass;    try {      theClass=Class.forName(className,true,loader);    } catch (    final Exception e) {      final LocalizableMessage msg=ERR_CLASS_LOADER_CANNOT_LOAD_CLASS.get(className,e.getMessage());      throw new ConfigException(msg,e);    }    if (AbstractManagedObjectDefinition.class.isAssignableFrom(theClass)) {      Method method;      try {        method=theClass.getMethod("getInstance");      } catch (      final Exception e) {        final LocalizableMessage msg=ERR_CLASS_LOADER_CANNOT_FIND_GET_INSTANCE_METHOD.get(className,e.getMessage());        throw new ConfigException(msg,e);      }      AbstractManagedObjectDefinition<?,?> d;      try {        d=(AbstractManagedObjectDefinition<?,?>)method.invoke(null);      } catch (      final Exception e) {        final LocalizableMessage msg=ERR_CLASS_LOADER_CANNOT_INVOKE_GET_INSTANCE_METHOD.get(className,e.getMessage());        throw new ConfigException(msg,e);      }      definitions.add(d);    }  }  for (  final AbstractManagedObjectDefinition<?,?> d : definitions) {    try {      d.initialize();    } catch (    final Exception e) {      final LocalizableMessage msg=ERR_CLASS_LOADER_CANNOT_INITIALIZE_DEFN.get(d.getName(),d.getClass().getName(),e.getMessage());      throw new ConfigException(msg,e);    }  }}  }
class C{  public void rectangle(float x,float y,float w,float h){  moveTo(x,y);  lineTo(x + w,y);  lineTo(x + w,y + h);  lineTo(x,y + h);  closeSubpath();}  }
class C{  public String toString(org.w3c.dom.Node n){  int nodeHandle=getDTMHandleFromNode(n);  DTM dtm=getDTM(nodeHandle);  XMLString strVal=dtm.getStringValue(nodeHandle);  return strVal.toString();}  }
class C{  public void appendNodes(NodeSet nodes){  int nNodes=nodes.size();  if (null == m_map) {    m_mapSize=nNodes + m_blocksize;    m_map=new Node[m_mapSize];  } else   if ((m_firstFree + nNodes) >= m_mapSize) {    m_mapSize+=(nNodes + m_blocksize);    Node newMap[]=new Node[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + nNodes);    m_map=newMap;  }  System.arraycopy(nodes.m_map,0,m_map,m_firstFree,nNodes);  m_firstFree+=nNodes;}  }
class C{  public boolean hasListeners(String propertyName){  return this.map.hasListeners(propertyName);}  }
class C{  public int length(){  return text == null ? 0 : text.end - text.start;}  }
class C{  public double[] board_to_dsn_rel(PlaPointFloat[] p_points){  double[] result=new double[2 * p_points.length];  for (int i=0; i < p_points.length; ++i) {    result[2 * i]=board_to_dsn(p_points[i].v_x);    result[2 * i + 1]=board_to_dsn(p_points[i].v_y);  }  return result;}  }
class C{  public static void main(final String[] args){  System.out.println(divide(10.1,30));}  }
class C{  public void put(String key,Object value){  globalScope.put(key,value);}  }
class C{  public boolean matchesPattern(DN dn){  return patternDN.matchesDN(dn);}  }
class C{  public final static AudioClip newAudioClip(URL url){  return new sun.applet.AppletAudioClip(url);}  }
class C{  private long acquireRead(boolean interruptible,long deadline){  WNode node=null, p;  for (int spins=-1; ; ) {    WNode h;    if ((h=whead) == (p=wtail)) {      for (long m, s, ns; ; ) {        if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L))         return ns; else         if (m >= WBIT) {          if (spins > 0) {            if (LockSupport.nextSecondarySeed() >= 0)             --spins;          } else {            if (spins == 0) {              WNode nh=whead, np=wtail;              if ((nh == h && np == p) || (h=nh) != (p=np))               break;            }            spins=SPINS;          }        }      }    }    if (p == null) {      WNode hd=new WNode(WMODE,null);      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;    } else     if (node == null)     node=new WNode(RMODE,p); else     if (h == p || p.mode != RMODE) {      if (node.prev != p)       node.prev=p; else       if (U.compareAndSwapObject(this,WTAIL,p,node)) {        p.next=node;        break;      }    } else     if (!U.compareAndSwapObject(p,WCOWAIT,node.cowait=p.cowait,node))     node.cowait=null; else {      for (; ; ) {        WNode pp, c;        Thread w;        if ((h=whead) != null && (c=h.cowait) != null && U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);        if (h == (pp=p.prev) || h == p || pp == null) {          long m, s, ns;          do {            if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L))             return ns;          } while (m < WBIT);        }        if (whead == h && p.prev == pp) {          long time;          if (pp == null || h == p || p.status > 0) {            node=null;            break;          }          if (deadline == 0L)           time=0L; else           if ((time=deadline - System.nanoTime()) <= 0L)           return cancelWaiter(node,p,false);          Thread wt=Thread.currentThread();          U.putObject(wt,PARKBLOCKER,this);          node.thread=wt;          if ((h != pp || (state & ABITS) == WBIT) && whead == h && p.prev == pp)           U.park(false,time);          node.thread=null;          U.putObject(wt,PARKBLOCKER,null);          if (interruptible && Thread.interrupted())           return cancelWaiter(node,p,true);        }      }    }  }  for (int spins=-1; ; ) {    WNode h, np, pp;    int ps;    if ((h=whead) == p) {      if (spins < 0)       spins=HEAD_SPINS; else       if (spins < MAX_HEAD_SPINS)       spins<<=1;      for (int k=spins; ; ) {        long m, s, ns;        if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L)) {          WNode c;          Thread w;          whead=node;          node.prev=null;          while ((c=node.cowait) != null) {            if (U.compareAndSwapObject(node,WCOWAIT,c,c.cowait) && (w=c.thread) != null)             U.unpark(w);          }          return ns;        } else         if (m >= WBIT && LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;      }    } else     if (h != null) {      WNode c;      Thread w;      while ((c=h.cowait) != null) {        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);      }    }    if (whead == h) {      if ((np=node.prev) != p) {        if (np != null)         (p=np).next=node;      } else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING); else       if (ps == CANCELLED) {        if ((pp=p.prev) != null) {          node.prev=pp;          pp.next=node;        }      } else {        long time;        if (deadline == 0L)         time=0L; else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);        Thread wt=Thread.currentThread();        U.putObject(wt,PARKBLOCKER,this);        node.thread=wt;        if (p.status < 0 && (p != h || (state & ABITS) == WBIT) && whead == h && node.prev == p)         U.park(false,time);        node.thread=null;        U.putObject(wt,PARKBLOCKER,null);        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);      }    }  }}  }
class C{  public String toString(){  return (isRelative() ? "" : "(not relative)") + getName() + ": "+ getClassName();}  }
class C{  public void resetChoosableFileFilters(){  FileFilter[] oldValue=getChoosableFileFilters();  setFileFilter(null);  filters.removeAllElements();  if (isAcceptAllFileFilterUsed()) {    addChoosableFileFilter(getAcceptAllFileFilter());  }  firePropertyChange(CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY,oldValue,getChoosableFileFilters());}  }
class C{  public void access(Level level,String messageId,String data[],Object session,Map props) throws LogException {  if (isAccessLoggable(level)) {    LogRecord lr=new LogRecord(level,formatMessage(messageId,data,session));    accessLogger.log(lr);  }}  }
class C{  private void endText(){  eventOccurred(null,EventType.END_TEXT);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public ModifyResponseProtocolOp(int resultCode){  this.resultCode=resultCode;}  }
class C{  private static ResultPoint[] findVertices(BitMatrix matrix,int startRow,int startColumn){  int height=matrix.getHeight();  int width=matrix.getWidth();  ResultPoint[] result=new ResultPoint[8];  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,START_PATTERN),INDEXES_START_PATTERN);  if (result[4] != null) {    startColumn=(int)result[4].getX();    startRow=(int)result[4].getY();  }  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,STOP_PATTERN),INDEXES_STOP_PATTERN);  return result;}  }
class C{  protected boolean isIDPProxyEnabled(FSAuthnRequest authnRequest) throws FSException {  if (authnRequest.getMinorVersion() != IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    return false;  }  FSScoping scoping=authnRequest.getScoping();  if (scoping != null && scoping.getProxyCount() == 0) {    return false;  }  String enabledString=IDFFMetaUtils.getFirstAttributeValueFromConfig(spConfig,IFSConstants.ENABLE_IDP_PROXY);  if (enabledString != null && enabledString.equalsIgnoreCase("true")) {    return true;  } else {    return false;  }}  }
class C{  private void copyMembers(DateFormatSymbols src,DateFormatSymbols dst){  dst.eras=Arrays.copyOf(src.eras,src.eras.length);  dst.months=Arrays.copyOf(src.months,src.months.length);  dst.shortMonths=Arrays.copyOf(src.shortMonths,src.shortMonths.length);  dst.weekdays=Arrays.copyOf(src.weekdays,src.weekdays.length);  dst.shortWeekdays=Arrays.copyOf(src.shortWeekdays,src.shortWeekdays.length);  dst.ampms=Arrays.copyOf(src.ampms,src.ampms.length);  if (src.zoneStrings != null) {    dst.zoneStrings=src.getZoneStringsImpl(true);  } else {    dst.zoneStrings=null;  }  dst.localPatternChars=src.localPatternChars;  dst.cachedHashCode=0;}  }
class C{  public static boolean validateCertificate(X509Certificate cert){  String method="validateCertificate : ";  boolean certgood=true;  if (!checkCertStatus) {    if (debug.messageEnabled()) {      debug.message(method + " CRL check is not configured. Just return it is good.");    }    return certgood;  }  certgood=CRLValidator.validateCertificate(cert,checkCAStatus);  if (debug.messageEnabled()) {    debug.message(method + " certificate is validated to " + certgood);  }  return certgood;}  }
class C{  private boolean isLoggable(Operation operation){  return operation.getResultCode() == SUCCESS && isResponseLoggable(operation);}  }
class C{  public Set searchGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {  String filter="(|" + getSearchFilter(AMObject.GROUP) + getSearchFilter(AMObject.DYNAMIC_GROUP)+ getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP)+ ")";  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),filter,wildcard,avPairs,level);}  }
class C{  public String toStringImpl(){  return zone;}  }
class C{  public static KeyStore createKeyStore(){  try {    KeyStore keyStore=KeyStore.getInstance(StandardNames.KEY_STORE_ALGORITHM);    keyStore.load(null,null);    return keyStore;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private static int priority(Tree tree){  String indexName=tree.getName().getIndexId();  if (indexName.endsWith(SuffixContainer.ID2ENTRY_INDEX_NAME)) {    return 1;  } else   if (indexName.endsWith(SuffixContainer.DN2ID_INDEX_NAME)) {    return 2;  } else {    return 3;  }}  }
class C{  public void callVisitors(ExpressionOwner owner,XPathVisitor visitor){  if (visitor.visitStep(owner,this)) {    callPredicateVisitors(visitor);    if (null != m_nextWalker) {      m_nextWalker.callVisitors(this,visitor);    }  }}  }
class C{  private ChatFormat(char character){  this(character,false);}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("ellipse iterator out of bounds");  }  if (index == 5) {    return SEG_CLOSE;  }  if (index == 0) {    double ctrls[]=ctrlpts[3];    coords[0]=x + ctrls[4] * w;    coords[1]=y + ctrls[5] * h;    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_MOVETO;  }  double ctrls[]=ctrlpts[index - 1];  coords[0]=x + ctrls[0] * w;  coords[1]=y + ctrls[1] * h;  coords[2]=x + ctrls[2] * w;  coords[3]=y + ctrls[3] * h;  coords[4]=x + ctrls[4] * w;  coords[5]=y + ctrls[5] * h;  if (affine != null) {    affine.transform(coords,0,coords,0,3);  }  return SEG_CUBICTO;}  }
class C{  @Override public boolean readChunk() throws IOException {  byte[] buf=new byte[(int)bytesLeft];  raf.read(buf);  chunkText=new String(buf,"ISO-8859-1");  return true;}  }
class C{  int CountCharset(int Offset,int NumofGlyphs){  int format;  int Length=0;  seek(Offset);  format=getCard8();switch (format) {case 0:    Length=1 + 2 * NumofGlyphs;  break;case 1:Length=1 + 3 * CountRange(NumofGlyphs,1);break;case 2:Length=1 + 4 * CountRange(NumofGlyphs,2);break;default :break;}return Length;}  }
class C{  public static boolean isIdeographic(int codePoint){  return CharacterData.of(codePoint).isIdeographic(codePoint);}  }
class C{  protected void deactivateFrame(JInternalFrame f){  getDesktopManager().deactivateFrame(f);}  }
class C{  public CharArrayWriter(int initialSize){  if (initialSize < 0) {    throw new IllegalArgumentException("Negative initial size: " + initialSize);  }  buf=new char[initialSize];}  }
class C{  public boolean wasNull() throws SQLException {  return lastValueWasNull;}  }
class C{  public void paintTabbedPaneContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public int rtf(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(compression).toString();}  }
class C{  public ServletException(Throwable rootCause){  super(rootCause);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelement.class,args);}  }
class C{  @Override public boolean ready() throws IOException {synchronized (lock) {    if (isOpen()) {      return true;    }    throw new IOException("StringReader is closed");  }}  }
class C{  public static String accountRealmFromUserAgent(String uaHeader,String accountRealmCookieName){  String classMethod="WSFederationUtils.accountRealmFromUserAgent";  int leftBracket=uaHeader.indexOf('(');  if (leftBracket == -1) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "Can't find left bracket");    }    return null;  }  int rightBracket=uaHeader.lastIndexOf(')');  if (rightBracket == -1 || rightBracket < leftBracket) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "Can't find right bracket");    }    return null;  }  String insideBrackets=uaHeader.substring(leftBracket + 1,rightBracket);  if (insideBrackets.length() == 0) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "zero length between brackets");    }    return null;  }  String uaFields[]=insideBrackets.split("[\\s]*;[\\s]*");  if (uaFields == null) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "zero length between brackets");    }    return null;  }  for (int i=0; i < uaFields.length; i++) {    if (uaFields[i].indexOf(accountRealmCookieName) != -1) {      String keyValue[]=uaFields[i].split("[\\s]*:[\\s]*");      if (keyValue.length < 2) {        if (debug.warningEnabled()) {          debug.warning(classMethod + "can't see accountRealm in " + uaFields[i]);        }        return null;      }      if (!keyValue[0].equals(accountRealmCookieName)) {        if (debug.warningEnabled()) {          debug.warning(classMethod + "can't understand " + uaFields[i]);        }        return null;      }      return keyValue[1];    }  }  return null;}  }
class C{  public void insert_ulong(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulong",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_ulong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testSerializationCompatibility() throws Exception {  TestUtils.initCertPathSSCertChain();  CertPath certPath=TestUtils.buildCertPathSSCertChain();  SerializationTest.verifyGolden(this,certPath);}  }
class C{  public Enumeration oids(){  return ordering.elements();}  }
class C{  @Override public void onDrawFrame(GL10 gl10){  GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);  GLES20.glEnable(GLES20.GL_CULL_FACE);  GLES20.glEnable(GLES20.GL_BLEND);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  long currentTimeMillis=System.currentTimeMillis();  updateWithDelta(currentTimeMillis - lastTimeMillis);  lastTimeMillis=currentTimeMillis;}  }
class C{  public HexDump(){  super();}  }
class C{  public void Logi(String tag,String msg){  if (mDebug) {    if (TextUtils.isEmpty(msg)) {      throw new NullPointerException("The message is null!");    }    Log.i(tag == null ? Constants.DEBUG_TAG : tag,msg);  }}  }
class C{  public int next(){  int current;  int node;  int type;  final int nodeType=_nodeType;  int currentNodeID=makeNodeIdentity(_currentNode);  if (nodeType >= DTM.NTYPES) {    do {      node=currentNodeID;      current=node;      do {        current++;        type=_type2(current);      } while (type != NULL && (ATTRIBUTE_NODE == type || NAMESPACE_NODE == type));      currentNodeID=(type != NULL) ? current : NULL;    } while (node != DTM.NULL && _exptype2(node) != nodeType);  } else {    do {      node=currentNodeID;      current=node;      do {        current++;        type=_type2(current);      } while (type != NULL && (ATTRIBUTE_NODE == type || NAMESPACE_NODE == type));      currentNodeID=(type != NULL) ? current : NULL;    } while (node != DTM.NULL && (_exptype2(node) != nodeType && _type2(node) != nodeType));  }  _currentNode=makeNodeHandle(currentNodeID);  return (node == DTM.NULL ? DTM.NULL : returnNode(makeNodeHandle(node)));}  }
class C{  public void testCertStore18() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    certS=CertStore.getInstance(dValid[i],dParams);    assertEquals("Incorrect parameters",((CollectionCertStoreParameters)certS.getCertStoreParameters()).getCollection(),((CollectionCertStoreParameters)dParams).getCollection());    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderCol);      assertEquals("Incorrect parameters",((CollectionCertStoreParameters)certS.getCertStoreParameters()).getCollection(),((CollectionCertStoreParameters)dParams).getCollection());    } catch (    IllegalArgumentException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderColName);      assertEquals("Incorrect parameters",((CollectionCertStoreParameters)certS.getCertStoreParameters()).getCollection(),((CollectionCertStoreParameters)dParams).getCollection());    } catch (    NoSuchProviderException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }  }}  }
class C{  public Cursor fetchAll(String appName,String pkgName,Boolean enabled){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (appName != null) {    qb.appendWhere(" AND " + KEY_APPNAME + " = ");    qb.appendWhereEscapeString(appName);  }  if (pkgName != null) {    qb.appendWhere(" AND " + KEY_PKGNAME + " = ");    qb.appendWhereEscapeString(pkgName);  }  if (enabled != null) {    qb.appendWhere(" AND " + KEY_ENABLED + " = "+ (enabled ? 1 : 0));  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  public synchronized void ensureRestExpressRunning(boolean mockCassandra) throws IOException, IllegalAccessException, InstantiationException {  if (restExpressRunning == false) {    LOGGER.info("Starting RestExpress server...");    if (mockCassandra) {      String[] params=new String[1];      params[0]="local_test";      server=Main.initializeServer(params,null);    } else {      server=Main.initializeServer(new String[0],null);    }    restExpressRunning=true;  }}  }
class C{  protected int findTokenSeparator(int from){  if (from < 0) {    throw new IllegalArgumentException("Search position must not be negative: " + from);  }  boolean found=false;  final int to=this.currentHeader.length();  while (!found && (from < to)) {    final char ch=this.currentHeader.charAt(from);    if (isTokenSeparator(ch)) {      found=true;    } else     if (isWhitespace(ch)) {      from++;    } else     if (isTokenChar(ch)) {      throw new ParseException("Tokens without separator (pos " + from + "): "+ this.currentHeader);    } else {      throw new ParseException("Invalid character after token (pos " + from + "): "+ this.currentHeader);    }  }  return from;}  }
class C{  public Object[] keys(){  if (arrayTable == null) {    return null;  }  return arrayTable.getKeys(null);}  }
class C{  public IsindexView(Element elem){  super(elem);}  }
class C{  public void destroy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("destroy",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.destroy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void pushElemAttributeSet(ElemAttributeSet attrSet){  m_attrSetStack.push(attrSet);}  }
class C{  public void startServer() throws ApplicationException {  startServer(true,false);}  }
class C{  @Override public Promise<Void,AuthenticationException> cleanSubject(MessageInfoContext messageInfo,Subject subject){  return newResultPromise(null);}  }
class C{  @Inject public UmaIdRepoCreationListener(UmaPolicyApplicationListener policyApplicationListener,CoreWrapper coreWrapper){  this.policyApplicationListener=policyApplicationListener;  this.coreWrapper=coreWrapper;}  }
class C{  @Override protected void toASCIIGnuStep(StringBuilder ascii,int level){  indent(ascii,level);  NSObject[] array=allObjects();  ascii.append(ASCIIPropertyListParser.ARRAY_BEGIN_TOKEN);  int indexOfLastNewLine=ascii.lastIndexOf(NEWLINE);  for (int i=0; i < array.length; i++) {    Class<?> objClass=array[i].getClass();    if ((objClass.equals(NSDictionary.class) || objClass.equals(NSArray.class) || objClass.equals(NSData.class)) && indexOfLastNewLine != ascii.length()) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();      array[i].toASCIIGnuStep(ascii,level + 1);    } else {      if (i != 0)       ascii.append(" ");      array[i].toASCIIGnuStep(ascii,0);    }    if (i != array.length - 1)     ascii.append(ASCIIPropertyListParser.ARRAY_ITEM_DELIMITER_TOKEN);    if (ascii.length() - indexOfLastNewLine > ASCII_LINE_LENGTH) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();    }  }  ascii.append(ASCIIPropertyListParser.ARRAY_END_TOKEN);}  }
class C{  public PlaDirection add(PlaDirection p_other){  long new_x=dir_x + p_other.dir_x;  long new_y=dir_y + p_other.dir_y;  return new PlaDirection(BigInteger.valueOf(new_x),BigInteger.valueOf(new_y));}  }
class C{  public void testNegNegSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,1,2,3,3,0,65,-96,-48,-124,-60,12,-40,-31,97};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.AttributeElement createAttributeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.AttributeElementImpl();}  }
class C{  @Override public ShapeTileSimplex[] cutout_from(ShapeTileSimplex p_outer_simplex){  if (!dimension().is_area()) {    System.out.println("Simplex.cutout_from only implemented for 2-dim simplex");    return null;  }  ShapeTileSimplex inner_simplex=intersection(p_outer_simplex);  if (!inner_simplex.dimension().is_area()) {    ShapeTileSimplex[] result=new ShapeTileSimplex[1];    result[0]=p_outer_simplex;    return result;  }  int inner_corner_count=inner_simplex.lines_size();  PlaLineInt[][] division_line_arr=new PlaLineInt[inner_corner_count][];  for (int inner_corner_no=0; inner_corner_no < inner_corner_count; ++inner_corner_no) {    division_line_arr[inner_corner_no]=inner_simplex.calc_division_lines(inner_corner_no,p_outer_simplex);    if (division_line_arr[inner_corner_no] == null) {      System.out.println("Simplex.cutout_from: division line is null");      ShapeTileSimplex[] result=new ShapeTileSimplex[1];      result[0]=p_outer_simplex;      return result;    }  }  boolean check_cross_first_line=false;  PlaLineInt prev_division_line=null;  PlaLineInt first_division_line=division_line_arr[0][0];  PlaDirection first_direction=first_division_line.direction();  Collection<ShapeTileSimplex> result_list=new LinkedList<ShapeTileSimplex>();  for (int inner_corner_no=0; inner_corner_no < inner_corner_count; ++inner_corner_no) {    PlaLineInt next_division_line;    if (inner_corner_no == inner_simplex.lines_size() - 1)     next_division_line=division_line_arr[0][0]; else     next_division_line=division_line_arr[inner_corner_no + 1][0];    PlaLineInt[] curr_division_lines=division_line_arr[inner_corner_no];    if (curr_division_lines.length == 2) {      PlaDirection curr_dir=curr_division_lines[0].direction();      boolean merge_prev_division_line=false;      boolean merge_first_division_line=false;      if (prev_division_line != null) {        PlaDirection prev_dir=prev_division_line.direction();        if (curr_dir.determinant(prev_dir) > 0) {          merge_prev_division_line=true;        }      }      if (!check_cross_first_line) {        check_cross_first_line=(inner_corner_no > 0 && curr_dir.determinant(first_direction) > 0);      }      if (check_cross_first_line) {        PlaDirection curr_dir2=curr_division_lines[1].direction();        if (curr_dir2.determinant(first_direction) < 0) {          merge_first_division_line=true;        }      }      int piece_line_count=2;      if (merge_prev_division_line)       ++piece_line_count;      if (merge_first_division_line)       ++piece_line_count;      PlaLineIntAlist piece_lines=new PlaLineIntAlist(piece_line_count);      piece_lines.add(new PlaLineInt(curr_division_lines[1].point_b,curr_division_lines[1].point_a));      piece_lines.add(curr_division_lines[0]);      if (merge_prev_division_line) {        piece_lines.add(prev_division_line);      }      if (merge_first_division_line) {        piece_lines.add(new PlaLineInt(first_division_line.point_b,first_division_line.point_a));      }      ShapeTileSimplex curr_piece=new ShapeTileSimplex(piece_lines);      result_list.add(curr_piece.intersection(p_outer_simplex));    }    boolean merge_next_division_line=!next_division_line.point_b.equals(next_division_line.point_a);    PlaLineInt last_curr_division_line=curr_division_lines[curr_division_lines.length - 1];    PlaDirection last_curr_dir=last_curr_division_line.direction();    boolean merge_last_curr_division_line=!last_curr_division_line.point_b.equals(last_curr_division_line.point_a);    boolean merge_prev_division_line=false;    boolean merge_first_division_line=false;    if (prev_division_line != null) {      PlaDirection prev_dir=prev_division_line.direction();      if (last_curr_dir.determinant(prev_dir) > 0) {        merge_prev_division_line=true;      }    }    if (!check_cross_first_line) {      check_cross_first_line=inner_corner_no > 0 && last_curr_dir.determinant(first_direction) > 0 && last_curr_dir.projection_value(first_direction) < 0;    }    if (check_cross_first_line) {      PlaDirection next_dir=next_division_line.direction();      if (next_dir.determinant(first_direction) < 0) {        merge_first_division_line=true;      }    }    ArrayList<PlaLineInt> piece_lines=new ArrayList<PlaLineInt>(6);    PlaLineInt curr_line=inner_simplex.tline_get(inner_corner_no);    piece_lines.add(new PlaLineInt(curr_line.point_b,curr_line.point_a));    if (merge_next_division_line) {      piece_lines.add(new PlaLineInt(next_division_line.point_b,next_division_line.point_a));    }    if (merge_last_curr_division_line) {      piece_lines.add(last_curr_division_line);    }    if (merge_prev_division_line) {      piece_lines.add(prev_division_line);    }    if (merge_first_division_line) {      piece_lines.add(new PlaLineInt(first_division_line.point_b,first_division_line.point_a));    }    ShapeTileSimplex curr_piece=new ShapeTileSimplex(piece_lines);    result_list.add(curr_piece.intersection(p_outer_simplex));    next_division_line=prev_division_line;  }  ShapeTileSimplex[] result=new ShapeTileSimplex[result_list.size()];  Iterator<ShapeTileSimplex> it=result_list.iterator();  for (int i=0; i < result.length; ++i) {    result[i]=it.next();  }  return result;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String appName=getStringOptionValue(PARAM_APPL_NAME);  String appTypeName=getStringOptionValue(PARAM_APPL_TYPE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map<String,Set<String>> attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  ApplicationType applicationType=getApplicationType(appTypeName);  String[] params={realm,appName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_APPLICATION",params);  try {    Application appl=EntitlementUtils.newApplication(appName,applicationType);    setApplicationAttributes(appl,attributeValues,true);    applicationServiceFactory.create(getAdminSubject(),realm).saveApplication(appl);    String[] param={appName};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("create-application-succeeded"),(Object[])param));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_APPLICATION",params);  } catch (  EntitlementException e) {    String[] paramExs={realm,appName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_CREATE_APPLICATION",paramExs);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  CLIException e) {    String[] paramExs={realm,appName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_CREATE_APPLICATION",paramExs);    throw e;  }}  }
class C{  public UndoableEdit insertString(int where,String str) throws BadLocationException {  if (where > length() || where < 0) {    throw new BadLocationException("Invalid insert",length());  }  char[] chars=str.toCharArray();  replace(where,0,chars,chars.length);  return new InsertUndo(where,str.length());}  }
class C{  public void testStringy() throws Exception {  String src="The quick brown fox\u00A0\u00FF" + "\uFFFC\uD7C5\uDC03bloof";  String[] enc=new String[]{"utf-8","us-ascii","iso-8859-1","utf-16be","utf-16le","utf-16"};  for (int i=0; i < enc.length; i++) {    byte[] ba=src.getBytes(enc[i]);    String s1=new String(ba,enc[i]);    ByteArrayInputStream bais=new ByteArrayInputStream(ba);    InputStreamReader r=new InputStreamReader(bais,enc[i]);    try {      char[] ca=new char[600];      int n=r.read(ca,0,600);      String s2=new String(ca,0,n);      assertEquals(s1,s2);    }  finally {      r.close();    }  }}  }
class C{  public static MatchedValuesFilter createApproximateFilter(String rawAttributeType,ByteString rawAssertionValue){  Reject.ifNull(rawAttributeType,rawAssertionValue);  return new MatchedValuesFilter(APPROXIMATE_MATCH_TYPE,rawAttributeType,rawAssertionValue,null,null,null,null);}  }
class C{  public SASLRequest(Element element) throws AuthnSvcException {  Element dataE=null;  NodeList nl=element.getChildNodes();  int length=nl.getLength();  for (int i=0; i < length; i++) {    Node child=nl.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)child;      String localName=childElement.getLocalName();      String namespaceURI=childElement.getNamespaceURI();      if (AuthnSvcConstants.NS_AUTHN_SVC.equals(namespaceURI) && AuthnSvcConstants.TAG_DATA.equals(localName)) {        if (dataE != null) {          throw new AuthnSvcException("tooManyDataInReq");        } else         if (requestAuthnContext != null) {          throw new AuthnSvcException("invalidSeqInReq");        }        dataE=childElement;      } else       if (AuthnSvcConstants.NS_PROTOCOLS_SCHEMA.equals(namespaceURI) && AuthnSvcConstants.TAG_REQUEST_AUTHN_CONTEXT.equals(localName)) {        if (requestAuthnContext != null) {          throw new AuthnSvcException("tooManyReqAuthnCon");        }        requestAuthnContext=childElement;      } else {        throw new AuthnSvcException("invalidChildReq");      }    }  }  data=AuthnSvcUtils.decodeDataElement(dataE);  mechanism=XMLUtils.getNodeAttributeValue(element,AuthnSvcConstants.ATTR_MECHANISM);  if (mechanism == null) {    String msg=AuthnSvcUtils.getString("missingMechanism");    AuthnSvcUtils.debug.error("SASLRequest: " + msg);    throw new AuthnSvcException(msg);  }  id=XMLUtils.getNodeAttributeValue(element,AuthnSvcConstants.ATTR_id);  authzID=XMLUtils.getNodeAttributeValue(element,AuthnSvcConstants.ATTR_AUTHZ_ID);  advisoryAuthnID=XMLUtils.getNodeAttributeValue(element,AuthnSvcConstants.ATTR_ADVISORY_AUTHN_ID);}  }
class C{  public boolean isComplete(){  return this.complete;}  }
class C{  void reportError(String message) throws SAXException {  if (errorHandler != null)   errorHandler.error(makeException(message));}  }
class C{  public synchronized <T>Observable<T> observeEvent(Class<T> eventClass,Integer key){  return observeEvent(new RXQueueKey(eventClass,key));}  }
class C{  public static WhoAmIExtendedRequest copyOfWhoAmIExtendedRequest(final WhoAmIExtendedRequest request){  return new WhoAmIExtendedRequestImpl(request);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case MENU_HELP:    help();  return true;}return super.onOptionsItemSelected(item);}  }
class C{  public void initialize(Map configParams){  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);  if (delimiterConfig != null) {    this.delimiter=delimiterConfig;  }  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);  if (caseConfig != null) {    if (caseConfig.equals("true")) {      this.caseSensitive=true;    } else     if (caseConfig.equals("false")) {      this.caseSensitive=false;    } else {      this.caseSensitive=false;    }  }  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);  if (wildcardConfig != null) {    this.wildcard=wildcardConfig;  }  return;}  }
class C{  private PrivilegeUtils(){}  }
class C{  public ConfigParameters serverInstanceDirectory(String dir){  serverInstanceDirectory=dir;  return this;}  }
class C{  public Encoding(String name){  this.name=name;}  }
class C{  public Chunk(final GUID headerGuid,final long pos,final BigInteger chunkLen){  if (headerGuid == null) {    throw new IllegalArgumentException("GUID must not be null");  }  if (pos < 0) {    throw new IllegalArgumentException("Position of header can't be negative.");  }  if (chunkLen == null || chunkLen.compareTo(BigInteger.ZERO) < 0) {    throw new IllegalArgumentException("chunkLen must not be null nor negative.");  }  this.guid=headerGuid;  this.position=pos;  this.chunkLength=chunkLen;}  }
class C{  public UIHello(){}  }
class C{  public JOptionPane(Object message,int messageType,int optionType,Icon icon){  this(message,messageType,optionType,icon,null);}  }
class C{  private FractionalConfig(DN baseDN){  this.baseDN=baseDN;}  }
class C{  public void addNumberProperty(String key,Number value){  getProperties().addProperty(key,value);}  }
class C{  static String[] splitNameAndValue(String selector){  int eq=selector.indexOf('=');  int pos=1;  if (selector.charAt(pos) == '?') {    pos++;  }  String name=selector.substring(pos,eq);  pos=eq + 1;  char quote=selector.charAt(pos);  pos++;  int end=selector.length() - 2;  StringBuffer value=new StringBuffer(end - eq);  while (pos < end) {    value.append(selector.charAt(pos));    pos++;    if (selector.charAt(pos) == quote) {      pos++;    }  }  return new String[]{name,value.toString()};}  }
class C{  public void testClearBitPositiveInside5(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=63;  byte rBytes[]={1,-128,56,100,-2,52,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void removeByUuid_C(java.lang.String uuid,long companyId){  getPersistence().removeByUuid_C(uuid,companyId);}  }
class C{  public static boolean hasDependency(MavenProject project,String groupId){  Set<Artifact> artifacts=project.getArtifacts();  if (artifacts != null) {    for (    Artifact artifact : artifacts) {      String scope=artifact.getScope();      if (Objects.equal("test",scope)) {        continue;      }      if (Objects.equal(groupId,artifact.getGroupId())) {        return true;      }    }  }  return false;}  }
class C{  public boolean verifyXMLSignature(java.lang.String xmlString,java.lang.String idAttrName,java.lang.String certAlias) throws XMLSignatureException {  if (xmlString == null || xmlString.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: xmlString is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  Document doc=XMLUtils.toDOMDocument(xmlString,SAMLUtilsCommon.debug);  try {    return verifyXMLSignature(doc,idAttrName,certAlias);  } catch (  Exception ex) {    SAMLUtilsCommon.debug.error("verifyXMLSignature Exception: ",ex);    throw new XMLSignatureException(ex.getMessage());  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssSamlV20Token11Element createWssSamlV20Token11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssSamlV20Token11ElementImpl();}  }
class C{  public static boolean isDigit(final char c){  return com.forgerock.opendj.util.StaticUtils.isDigit(c);}  }
class C{  public Lyrics3v2(){}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SignedEncryptedSupportingTokensElement createSignedEncryptedSupportingTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignedEncryptedSupportingTokensElementImpl();}  }
class C{  public ProcessBuilder command(String... command){  return command(new ArrayList<String>(Arrays.asList(command)));}  }
class C{  void checkEndMethod(){  if (endMethod) {    throw new IllegalStateException("Cannot visit elements after visitEnd has been called.");  }}  }
class C{  public void addArgument(final Argument argument){  if (!args.contains(argument)) {    args.add(argument);  }}  }
class C{  public static void access(Level level,String msgid,String data[]){  access(level,msgid,data,null);}  }
class C{  public void changePassword(String entryDN,String attrName,String oldPassword,String newPassword) throws UMSException {  DataLayer.getInstance().changePassword(getGuid(),attrName,oldPassword,newPassword);}  }
class C{  private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException {  try {    stream.defaultReadObject();    m_clones=new IteratorPool(this);  } catch (  ClassNotFoundException cnfe) {    throw new javax.xml.transform.TransformerException(cnfe);  }}  }
class C{  private boolean verifyLogRecord(String[] record,int macPos) throws Exception {  StringBuilder data=new StringBuilder();  for (int m=0; m < record.length - 2; m++) {    data.append(record[m]);  }  curMAC=record[macPos];  verified=helper.verifyMAC(data.toString(),helper.toByteArray(curMAC));  return verified;}  }
class C{  public void paintCheckBoxMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void assignStaticGroup(AMStaticGroup group) throws AMException, SSOException {  assignStaticGroup(group.getDN());}  }
class C{  public Task delete(String tokenId,String etag,ResultHandler<String,?> handler){  return new DeleteTask(tokenId,etag,handler);}  }
class C{  public void reloadSessionHandleAndRestrictedIds(InternalSession session){  if (internalSessionCache.getBySessionID(session.getSessionID()) == null) {    throw new IllegalStateException("Tried to reload metadata for a session that was not stored.");  }  internalSessionCache.put(session);}  }
class C{  public ReplicationServerListener(ReplicationSynchronizationProviderCfg configuration,DSRSShutdownSync dsrsShutdownSync) throws ConfigException {  configuration.addReplicationServerAddListener(this);  configuration.addReplicationServerDeleteListener(this);  this.dsrsShutdownSync=dsrsShutdownSync;  if (configuration.hasReplicationServer()) {    final ReplicationServerCfg cfg=configuration.getReplicationServer();    replicationServer=new ReplicationServer(cfg,dsrsShutdownSync);  }}  }
class C{  public static UIInput createInput(final String label,final Class type){  UIInput input=null;  if (JKObjectUtil.isTime(type)) {    input=(javax.faces.component.UIInput)JSFComponentFactory.createComponent(TimePicker.COMPONENT_TYPE);  } else   if (JKObjectUtil.isTimeStamp(type)) {    input=(javax.faces.component.UIInput)JSFComponentFactory.createComponent(Calendar.COMPONENT_TYPE);  } else   if (JKObjectUtil.isDate(type)) {    input=(javax.faces.component.UIInput)JSFComponentFactory.createComponent(Calendar.COMPONENT_TYPE);  } else   if (JKObjectUtil.isBoolean(type)) {    input=(javax.faces.component.UIInput)JSFComponentFactory.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);  } else {    input=JSFComponentFactory.createInputText(null);  }  input.getAttributes().put("label",label);  return input;}  }
class C{  private void clear(){  valid=false;  if ((listenerObjects == null) || listenerObjects.isEmpty()) {    deregisterListener();  }  ssm=null;  if (SMSEntry.cacheSMSEntries) {    orgConfigs.clear();    globalConfigs.clear();  }}  }
class C{  @Override public JSONObject toJSONObject() throws JSONException {  JSONObject jo=new JSONObject();  jo.put("pSubjectName",pSubjectName);  if (eSubject != null) {    JSONObject subjo=new JSONObject();    subjo.put("className",eSubject.getClass().getName());    subjo.put("state",eSubject.getState());    jo.put("memberESubject",subjo);  }  return jo;}  }
class C{  public static String encode(final List<Position> path,int precision){  long lastLat=0;  long lastLng=0;  final StringBuffer result=new StringBuffer();  double factor=Math.pow(10,precision);  for (  final Position point : path) {    long lat=Math.round(point.getLatitude() * factor);    long lng=Math.round(point.getLongitude() * factor);    long dLat=lat - lastLat;    long dLng=lng - lastLng;    encode(dLat,result);    encode(dLng,result);    lastLat=lat;    lastLng=lng;  }  return result.toString();}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void remove(int pos){  if (pos < 0) {    throw new IllegalArgumentException("index less than zero.");  }  if (pos > getItemCount()) {    throw new IllegalArgumentException("index greater than the number of items.");  }  if (popupMenu != null)   popupMenu.remove(pos);}  }
class C{  private void updateConfiguration(AccessControlHandlerCfg newConfiguration) throws ConfigException, InitializationException {  String newHandlerClass=null;  boolean enabledOld=false, enabledNew=newConfiguration.isEnabled();  if (currentConfiguration == null) {    if (enabledNew) {      newHandlerClass=newConfiguration.getJavaClass();    } else {      newHandlerClass=DefaultAccessControlHandler.class.getName();    }    accessControlHandler.getAndSet(getHandler(newHandlerClass,newConfiguration,true,false));  } else {    enabledOld=currentConfiguration.isEnabled();    if (enabledNew) {      newHandlerClass=newConfiguration.getJavaClass();      String oldHandlerClass=currentConfiguration.getJavaClass();      if (!enabledOld) {        AccessControlHandler<?> oldHandler=accessControlHandler.getAndSet(getHandler(newHandlerClass,newConfiguration,true,true));        oldHandler.finalizeAccessControlHandler();      } else {        if (!newHandlerClass.equals(oldHandlerClass)) {          AccessControlHandler<?> oldHandler=accessControlHandler.getAndSet(getHandler(newHandlerClass,newConfiguration,true,true));          oldHandler.finalizeAccessControlHandler();        } else {          getHandler(newHandlerClass,newConfiguration,false,false);        }      }    } else     if (enabledOld && !enabledNew) {      newHandlerClass=DefaultAccessControlHandler.class.getName();      AccessControlHandler<?> oldHandler=accessControlHandler.getAndSet(getHandler(newHandlerClass,newConfiguration,false,true));      oldHandler.finalizeAccessControlHandler();    }  }  currentConfiguration=newConfiguration;}  }
class C{  protected void tearDown(){  hs=null;  objArray=null;}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  tabBase=alloc.x + getLeftInset();  super.paint(g,a);  if (firstLineIndent < 0) {    Shape sh=getChildAllocation(0,a);    if ((sh != null) && sh.intersects(alloc)) {      int x=alloc.x + getLeftInset() + firstLineIndent;      int y=alloc.y + getTopInset();      Rectangle clip=g.getClipBounds();      tempRect.x=x + getOffset(X_AXIS,0);      tempRect.y=y + getOffset(Y_AXIS,0);      tempRect.width=getSpan(X_AXIS,0) - firstLineIndent;      tempRect.height=getSpan(Y_AXIS,0);      if (tempRect.intersects(clip)) {        tempRect.x=tempRect.x - firstLineIndent;        paintChild(g,tempRect,0);      }    }  }}  }
class C{  Ser(byte type,Object object){  this.type=type;  this.object=object;}  }
class C{  public TabStop(float tabPosition,TabAlignment tabAlignment,ILineDrawer tabLeader){  this.tabPosition=tabPosition;  this.tabAlignment=tabAlignment;  this.tabLeader=tabLeader;  this.tabAnchor='.';}  }
class C{  private void indentAndWrap(StringBuilder buffer,String indent,LocalizableMessage text){  int actualSize=MAX_LINE_WIDTH - indent.length() - COLUMN_ADJUST;  indentAndWrap(indent,buffer,actualSize,text);}  }
class C{  private static String property(String string){  int length=string.length();  if (length == 0) {    return "";  } else   if (length == 1) {    return string.toLowerCase();  } else {    return string.substring(0,1).toLowerCase() + string.substring(1);  }}  }
class C{  @Override public synchronized void load(InputStream inStream) throws IOException {  check("putProviderProperty." + name);  if (debug != null) {    debug.println("Load " + name + " provider properties");  }  Properties tempProperties=new Properties();  tempProperties.load(inStream);  implPutAll(tempProperties);}  }
class C{  public boolean removeElement(int s){  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    int node=m_map[i];    if (node == s) {      if (i > m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else       m_map[i]=DTM.NULL;      m_firstFree--;      return true;    }  }  return false;}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=(Rectangle)a;  tabBase=alloc.x;  JTextComponent host=(JTextComponent)getContainer();  sel0=host.getSelectionStart();  sel1=host.getSelectionEnd();  unselected=(host.isEnabled()) ? host.getForeground() : host.getDisabledTextColor();  Caret c=host.getCaret();  selected=c.isSelectionVisible() && host.getHighlighter() != null ? host.getSelectedTextColor() : unselected;  g.setFont(host.getFont());  super.paint(g,a);}  }
class C{  private static boolean itemValuesMatch(XMPNode leftNode,XMPNode rightNode) throws XMPException {  PropertyOptions leftForm=leftNode.getOptions();  PropertyOptions rightForm=rightNode.getOptions();  if (leftForm.equals(rightForm)) {    return false;  }  if (leftForm.getOptions() == 0) {    if (!leftNode.getValue().equals(rightNode.getValue())) {      return false;    }    if (leftNode.getOptions().getHasLanguage() != rightNode.getOptions().getHasLanguage()) {      return false;    }    if (leftNode.getOptions().getHasLanguage() && !leftNode.getQualifier(1).getValue().equals(rightNode.getQualifier(1).getValue())) {      return false;    }  } else   if (leftForm.isStruct()) {    if (leftNode.getChildrenLength() != rightNode.getChildrenLength()) {      return false;    }    for (Iterator it=leftNode.iterateChildren(); it.hasNext(); ) {      XMPNode leftField=(XMPNode)it.next();      XMPNode rightField=XMPNodeUtils.findChildNode(rightNode,leftField.getName(),false);      if (rightField == null || !itemValuesMatch(leftField,rightField)) {        return false;      }    }  } else {    assert leftForm.isArray();    for (Iterator il=leftNode.iterateChildren(); il.hasNext(); ) {      XMPNode leftItem=(XMPNode)il.next();      boolean match=false;      for (Iterator ir=rightNode.iterateChildren(); ir.hasNext(); ) {        XMPNode rightItem=(XMPNode)ir.next();        if (itemValuesMatch(leftItem,rightItem)) {          match=true;          break;        }      }      if (!match) {        return false;      }    }  }  return true;}  }
class C{  public synchronized Object[] toArray(){  return Arrays.copyOf(elementData,elementCount);}  }
class C{  public void addResourceType(ResourceType resourceType){  resourceTypes.add(resourceType);}  }
class C{  private static int[] stripLeadingZeroBytes(byte a[]){  int byteLength=a.length;  int keep;  for (keep=0; keep < byteLength && a[keep] == 0; keep++)   ;  int intLength=((byteLength - keep) + 3) >>> 2;  int[] result=new int[intLength];  int b=byteLength - 1;  for (int i=intLength - 1; i >= 0; i--) {    result[i]=a[b--] & 0xff;    int bytesRemaining=b - keep + 1;    int bytesToTransfer=Math.min(3,bytesRemaining);    for (int j=8; j <= (bytesToTransfer << 3); j+=8)     result[i]|=((a[b--] & 0xff) << j);  }  return result;}  }
class C{  public static Foo findByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_First(uuid,companyId,orderByComparator);}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(flags);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);  unchecked(null);}  }
class C{  public boolean isTagged(){  return structTreeRoot != null;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public Wildcard(String pattern){  this(pattern,Pattern.CASE_INSENSITIVE);}  }
class C{  public static void test_diff_callInstanceMethod(){  Target2 target=new Target2();  assertSame("fizmo",target.fizmo());}  }
class C{  public Builder withBlackList(final List<Pattern> blackList){  Reject.ifNull(blackList);  this.blackList=blackList;  return this;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  super.handleButton2Request(event);}  }
class C{  public static Fragment1 newInstance(int sectionNumber){  Fragment1 fragment=new Fragment1();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  private void modifyRoleMembership(String roleDN,Set<String> memberDNs,int operation) throws IdRepoException {  Attribute attr=new LinkedAttribute(roleDNAttr,roleDN);  Modification mod;  if (ADDMEMBER == operation) {    mod=new Modification(ModificationType.ADD,attr);  } else {    mod=new Modification(ModificationType.DELETE,attr);  }  Connection conn=null;  try {    conn=createConnection();    for (    String memberDN : memberDNs) {      ModifyRequest modifyRequest=LDAPRequests.newModifyRequest(memberDN);      modifyRequest.addModification(mod);      conn.modify(modifyRequest);    }  } catch (  LdapException ere) {    DEBUG.error("An error occurred while trying to modify role membership. Name: " + roleDN + " memberDNs: "+ memberDNs,ere);    handleErrorResult(ere);  } finally {    IOUtils.closeIfNotNull(conn);  }}  }
class C{  public com.sun.identity.federation.jaxb.entityconfig.AttributeElement createAttributeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.federation.jaxb.entityconfig.impl.AttributeElementImpl();}  }
class C{  protected ASCIIPropertyListParser(){}  }
class C{  public void firePropertyChange(String propertyName,long oldValue,long newValue){}  }
class C{  Node<E> node(int index){  if (index < (size >> 1)) {    Node<E> x=first;    for (int i=0; i < index; i++)     x=x.next;    return x;  } else {    Node<E> x=last;    for (int i=size - 1; i > index; i--)     x=x.prev;    return x;  }}  }
class C{  StartSessionMsg(byte[] in,short version) throws DataFormatException {  if (version <= ProtocolVersion.REPLICATION_PROTOCOL_V3) {    decode_V23(in);  } else {    decode_V45(in,version);  }}  }
class C{  public void handleTblSubConfigHrefNameRequest(RequestInvocationEvent event){  String configName=(String)getDisplayFieldValue(AMPropertySheetModel.TBL_SUB_CONFIG_HREF_NAME);  SubConfigEditViewBean vb=(SubConfigEditViewBean)getViewBean(SubConfigEditViewBean.class);  ArrayList subConfigNames=(ArrayList)getPageSessionAttribute(AMServiceProfile.PG_SESSION_SUB_CONFIG_IDS);  if (subConfigNames == null) {    subConfigNames=new ArrayList();    subConfigNames.add("/");    setPageSessionAttribute(AMServiceProfile.PG_SESSION_SUB_CONFIG_IDS,subConfigNames);  }  subConfigNames.add(0,configName);  addViewBeanClassToPageSession();  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public boolean removeElement(Object key){  return false;}  }
class C{  public static int findWordEnd(String line,int pos,String noWordSep,boolean joinNonWordChars,boolean camelCasedWords,boolean eatWhitespace){  return findWordEnd((CharSequence)line,pos,noWordSep,joinNonWordChars,camelCasedWords,eatWhitespace);}  }
class C{  public void addUrlLink(String value){  TextEncodedStringSizeTerminated text=(TextEncodedStringSizeTerminated)getObject(DataTypes.OBJ_URLLINK);  text.addValue(value);}  }
class C{  private static void create(Principal p,String dn,Map attrs) throws SMSException, SSOException {  int retry=0;  Entry entry=copyMapToEntry(attrs).setName(dn);  while (retry <= connNumRetry) {    debug.message("SMSLdapObject.create() retry: {}",retry);    try (Connection conn=getConnection(p)){      conn.add(LDAPRequests.newAddRequest(entry));      debug.message("SMSLdapObject.create Successfully created entry: {}",dn);      break;    } catch (    LdapException e) {      ResultCode errorCode=e.getResult().getResultCode();      if (errorCode.equals(ResultCode.ENTRY_ALREADY_EXISTS) && retry > 0) {        debug.warning("SMSLdapObject.create() Entry Already Exists Error for DN {}",dn);        break;      }      if (!retryErrorCodes.contains(errorCode) || retry >= connNumRetry) {        debug.error("SMSLdapObject.create() Error in creating: {} By Principal: {}",dn,p.getName(),e);        throw new SMSException(e,"sms-entry-cannot-create");      }      retry++;      try {        Thread.sleep(connRetryInterval);      } catch (      InterruptedException ex) {      }    }  }}  }
class C{  EntryID(long id){  this.id=id;}  }
class C{  public void testGetIssuerNames(){  X509CRLSelector selector=new X509CRLSelector();  byte[] iss1=new byte[]{48,21,49,19,48,17,6,3,85,4,10,19,10,70,105,114,115,116,32,79,114,103,46};  byte[] iss2=new byte[]{48,22,49,20,48,18,6,3,85,4,10,19,11,83,101,99,111,110,100,32,79,114,103,46};  assertNull("The collection should be null.",selector.getIssuerNames());  try {    selector.addIssuerName(iss1);    selector.addIssuerName(iss2);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  Collection<Object> result=selector.getIssuerNames();  assertEquals("The collection should contain all of the specified DNs.",2,result.size());}  }
class C{  public String toString(){  return Boolean.toString(get());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  String version="";  String version1="1.0";  String version2="2.0";  String featureCore;  String featureXML;  boolean success;  java.util.List featuresXML=new java.util.ArrayList();  featuresXML.add("XML");  featuresXML.add("xmL");  java.util.List featuresCore=new java.util.ArrayList();  featuresCore.add("Core");  featuresCore.add("CORE");  doc=(Document)load("staffNS",false);  attribute=doc.createAttribute("TestAttr");  for (int indexN10064=0; indexN10064 < featuresXML.size(); indexN10064++) {    featureXML=(String)featuresXML.get(indexN10064);    success=attribute.isSupported(featureXML,version);    assertTrue("nodeissupported02_XML1",success);    success=attribute.isSupported(featureXML,version1);    assertTrue("nodeissupported02_XML2",success);  }  for (int indexN1007D=0; indexN1007D < featuresCore.size(); indexN1007D++) {    featureCore=(String)featuresCore.get(indexN1007D);    success=attribute.isSupported(featureCore,version);    assertTrue("nodeissupported02_Core1",success);    success=attribute.isSupported(featureCore,version1);    success=attribute.isSupported(featureCore,version2);    assertTrue("nodeissupported02_Core3",success);  }}  }
class C{  public E take() throws InterruptedException {  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null)       available.await(); else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        first=null;        if (leader != null)         available.await(); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            available.awaitNanos(delay);          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  public String lookupPrefix(String namespaceURI){  if (namespaceURI == null) {    return null;  }  short type=this.getNodeType();switch (type) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:    return null;case Node.ATTRIBUTE_NODE:{    if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {      return getOwnerElement().lookupPrefix(namespaceURI);    }    return null;  }default :{  return null;}}}  }
class C{  protected KeyListener createKeyListener(){  return null;}  }
class C{  public static void fill(char[] array,int start,int end,char value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public XBoolean(Boolean b){  super();  m_val=b.booleanValue();  setObject(b);}  }
class C{  public void processSubscribe(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("notifier: got an Subscribe sending OK");    logger.info("notifier:  " + request);    logger.info("notifier : dialog = " + requestEvent.getDialog());    EventHeader eventHeader=(EventHeader)request.getHeader(EventHeader.NAME);    if (eventHeader == null) {      logger.info("Cannot find event header.... dropping request.");      return;    }    Response response=null;    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    boolean isInitial=requestEvent.getDialog() == null;    if (isInitial) {      String toTag=Integer.toHexString((int)(Math.random() * Integer.MAX_VALUE));      response=messageFactory.createResponse(202,request);      ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);      if (toHeader.getTag() != null) {        System.err.println("####ERROR: To-tag!=null but no dialog match! My dialog=" + dialog.getState());      }      toHeader.setTag(toTag);      this.dialog=st.getDialog();      this.dialog.terminateOnBye(false);      if (dialog != null) {        logger.info("Dialog " + dialog);        logger.info("Dialog state " + dialog.getState());      }    } else {      response=messageFactory.createResponse(200,request);    }    Address address=addressFactory.createAddress("Notifier <sip:127.0.0.1>");    ((SipURI)address.getURI()).setPort(udpProvider.getListeningPoint("udp").getPort());    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ExpiresHeader expires=(ExpiresHeader)request.getHeader(ExpiresHeader.NAME);    if (expires == null) {      expires=headerFactory.createExpiresHeader(30);    }    response.addHeader(expires);    st.sendResponse(response);    Request notifyRequest=dialog.createRequest("NOTIFY");    ((SipURI)contactHeader.getAddress().getURI()).setParameter("id","not");    SubscriptionStateHeader sstate=headerFactory.createSubscriptionStateHeader(isInitial ? SubscriptionStateHeader.PENDING : SubscriptionStateHeader.TERMINATED);    if (sstate.getState().equalsIgnoreCase("terminated")) {      sstate.setReasonCode("deactivated");    }    notifyRequest.addHeader(sstate);    notifyRequest.setHeader(eventHeader);    notifyRequest.setHeader(contactHeader);    ClientTransaction ct=udpProvider.getNewClientTransaction(notifyRequest);    dialog.sendRequest(ct);    logger.info("NOTIFY Branch ID " + ((ViaHeader)request.getHeader(ViaHeader.NAME)).getParameter("branch"));    logger.info("Dialog " + dialog);    logger.info("Dialog state after pending NOTIFY: " + dialog.getState());    if (isInitial) {      Thread myEventSource=new Thread(new MyEventSource(this,eventHeader));      myEventSource.start();    }  } catch (  Throwable ex) {    ex.printStackTrace();  }}  }
class C{  public void parseInstructionFromSynchronized(AST.Synchronized aSynchronized,STypeDef methodReturnType,SemanticScope scope,List<Instruction> instructions,List<ExceptionTable> exceptionTable,Ins.Nop breakIns,Ins.Nop continueIns) throws SyntaxException {  SemanticScope subScope=new SemanticScope(scope);  Stack<Ins.MonitorEnter> stack=new Stack<>();  for (  Expression exp : aSynchronized.toSync) {    Value v=parseValueFromExpression(exp,null,subScope);    Ins.MonitorEnter enter=new Ins.MonitorEnter(v,subScope,exp.line_col());    stack.push(enter);    instructions.add(enter);  }  List<Instruction> instructionList=new ArrayList<>();  for (  Statement stmt : aSynchronized.statements) {    parseStatement(stmt,methodReturnType,subScope,instructionList,exceptionTable,breakIns,continueIns,false);  }  if (instructionList.size() == 0)   instructionList.add(new Ins.Nop());  int returnCount=0;  int continueCount=0;  int breakCount=0;  for (  Instruction ins : instructionList) {    if (ins instanceof Ins.TReturn)     ++returnCount; else     if (breakIns != null) {      assert continueIns != null;      if (ins instanceof Ins.Goto) {        if (((Ins.Goto)ins).gotoIns() == breakIns)         ++breakCount; else         if (((Ins.Goto)ins).gotoIns() == continueIns)         ++continueCount;      }    }  }  List<Ins.MonitorExit> exitNormal=new ArrayList<>(stack.size());  List<Ins.MonitorExit> exitForExceptions=new ArrayList<>(stack.size());  List<List<Ins.MonitorExit>> exitForReturn=new ArrayList<>();  List<List<Ins.MonitorExit>> exitForBreak=new ArrayList<>();  List<List<Ins.MonitorExit>> exitForContinue=new ArrayList<>();  for (int i=0; i < returnCount; ++i)   exitForReturn.add(new ArrayList<>());  for (int i=0; i < continueCount; ++i)   exitForContinue.add(new ArrayList<>());  for (int i=0; i < breakCount; ++i)   exitForBreak.add(new ArrayList<>());  while (!stack.empty()) {    Ins.MonitorEnter monitorEnter=stack.pop();    exitNormal.add(new Ins.MonitorExit(monitorEnter));    exitForExceptions.add(new Ins.MonitorExit(monitorEnter));    for (    List<Ins.MonitorExit> list : exitForReturn)     list.add(new Ins.MonitorExit(monitorEnter));    for (    List<Ins.MonitorExit> list : exitForContinue)     list.add(new Ins.MonitorExit(monitorEnter));    for (    List<Ins.MonitorExit> list : exitForBreak)     list.add(new Ins.MonitorExit(monitorEnter));  }  returnCount=0;  continueCount=0;  breakCount=0;  for (int i=0; i < instructionList.size(); ++i) {    Instruction ins=instructionList.get(i);    if (ins instanceof Ins.TReturn) {      i+=insertInstructionsBeforeReturn(instructionList,i,exitForReturn.get(returnCount++),subScope);    } else     if (breakIns != null) {      if (ins instanceof Ins.Goto) {        List<Ins.MonitorExit> exitList=null;        if (((Ins.Goto)ins).gotoIns() == breakIns) {          exitList=exitForBreak.get(breakCount++);        } else         if (((Ins.Goto)ins).gotoIns() == continueIns) {          exitList=exitForContinue.get(continueCount++);        }        if (exitList != null) {          instructionList.addAll(i,exitList);          i+=exitList.size();        }      }    }  }  instructions.addAll(instructionList);  instructions.addAll(exitNormal);  LocalVariable localVariable=new LocalVariable(getTypeWithName("java.lang.Throwable",aSynchronized.line_col()),false);  subScope.putLeftValue(subScope.generateTempName(),localVariable);  Ins.AThrow aThrow=new Ins.AThrow(new Ins.TLoad(localVariable,subScope,aSynchronized.line_col()),aSynchronized.line_col());  Ins.ExStore exStore=new Ins.ExStore(localVariable,subScope);  Ins.Nop nop=new Ins.Nop();  Ins.Goto aGoto=new Ins.Goto(nop);  instructions.add(aGoto);  instructions.add(exStore);  instructions.addAll(exitForExceptions);  instructions.add(aThrow);  instructions.add(nop);  ExceptionTable table=new ExceptionTable(instructionList.get(0),exitNormal.get(0),exStore,null);  exceptionTable.add(table);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  private void fieldInsn(final int opcode,final Type ownerType,final String name,final Type fieldType){  mv.visitFieldInsn(opcode,ownerType.getInternalName(),name,fieldType.getDescriptor());}  }
class C{  @Override public void run(){  if (PolicyConstants.DEBUG.messageEnabled()) {    PolicyConstants.DEBUG.message("WorkerThread.run started for " + getName());  }  while (!shouldTerminate) {    Runnable task=null;    try {      pool.lock.lock();      if (!pool.taskList.isEmpty()) {        task=taskList.remove(0);      } else {        pool.hasTasks.await();      }    } catch (    InterruptedException ex) {      PolicyConstants.DEBUG.error("WorkerThread.run",ex);      shouldTerminate=true;    } finally {      pool.lock.unlock();    }    if (!shouldTerminate && task != null) {      task.run();    }  }  if (PolicyConstants.DEBUG.messageEnabled()) {    PolicyConstants.DEBUG.message("WorkerThread.run finished for " + getName());  }}  }
class C{  private boolean via_try_snap_smd_center(int p_layer){  ItemSelectionFilter selection_filter=new ItemSelectionFilter(ItemSelectionChoice.PINS);  Collection<BrdItem> picked_items=r_board.pick_items(prev_corner,p_layer,selection_filter);  BrdAbitPin found_smd_pin=null;  for (  BrdItem curr_item : picked_items) {    if (!(curr_item instanceof BrdAbitPin))     continue;    BrdAbitPin a_pin=(BrdAbitPin)curr_item;    if (!a_pin.shares_net_no(net_nos))     continue;    if (a_pin.first_layer() == p_layer && a_pin.last_layer() == p_layer) {      found_smd_pin=a_pin;      break;    }  }  if (found_smd_pin == null)   return false;  PlaPointInt pin_center=found_smd_pin.center_get();  if (itera_connect(prev_corner,pin_center)) {    prev_corner=pin_center;  }  return true;}  }
class C{  public SizeLimitExceededException(String explanation){  super(explanation);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String substring;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  substring=child.substringData(0,8);  assertEquals("characterdataSubStringValueAssert","Margaret",substring);}  }
class C{  private void findOcsp(ASN1Sequence seq) throws IOException {  basicResp=(BasicOCSPResp)null;  boolean ret=false;  while (true) {    if (seq.getObjectAt(0) instanceof ASN1ObjectIdentifier && ((ASN1ObjectIdentifier)seq.getObjectAt(0)).getId().equals(OCSPObjectIdentifiers.id_pkix_ocsp_basic.getId())) {      break;    }    ret=true;    for (int k=0; k < seq.size(); ++k) {      if (seq.getObjectAt(k) instanceof ASN1Sequence) {        seq=(ASN1Sequence)seq.getObjectAt(0);        ret=false;        break;      }      if (seq.getObjectAt(k) instanceof ASN1TaggedObject) {        ASN1TaggedObject tag=(ASN1TaggedObject)seq.getObjectAt(k);        if (tag.getObject() instanceof ASN1Sequence) {          seq=(ASN1Sequence)tag.getObject();          ret=false;          break;        } else         return;      }    }    if (ret)     return;  }  ASN1OctetString os=(ASN1OctetString)seq.getObjectAt(1);  ASN1InputStream inp=new ASN1InputStream(os.getOctets());  BasicOCSPResponse resp=BasicOCSPResponse.getInstance(inp.readObject());  basicResp=new BasicOCSPResp(resp);}  }
class C{  public void removeAttributes(Enumeration names){  while (names.hasMoreElements()) {    Object name=names.nextElement();    removeAttribute(name);  }}  }
class C{  public void shareToWeiXin(String webpageUrl,String title,String description){  WXWebpageObject webpage=new WXWebpageObject();  webpage.webpageUrl=webpageUrl;  WXMediaMessage msg=new WXMediaMessage(webpage);  msg.title=title;  msg.description=description;  Bitmap thumb=BitmapFactory.decodeResource(context.getResources(),R.drawable.app_ico);  msg.thumbData=Util.bmpToByteArray(thumb,true);  SendMessageToWX.Req req=new SendMessageToWX.Req();  req.transaction=buildTransaction("webpage");  req.message=msg;  req.scene=SendMessageToWX.Req.WXSceneSession;  api.sendReq(req);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.KeyValueElement createKeyValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.KeyValueElementImpl();}  }
class C{  private boolean serviceContains(String serviceName,String moduleInstance){  boolean returnValue=false;  Map dataMap=null;  if (serviceName != null) {    try {      dataMap=AMAuthConfigUtils.getNamedConfig(serviceName,realm,this.token);    } catch (    Exception e) {      if (DEBUG.messageEnabled()) {        DEBUG.message("Failed to get named sub config attrs.");      }    }  }  if (dataMap != null) {    Set xmlConfigValues=(Set)dataMap.get(AMAuthConfigUtils.ATTR_NAME);    if (xmlConfigValues != null && !xmlConfigValues.isEmpty()) {      String xmlConfig=(String)xmlConfigValues.iterator().next();      if (DEBUG.messageEnabled()) {        DEBUG.message("service config for " + serviceName + "  = "+ xmlConfig);      }      if (xmlConfig != null && xmlConfig.length() != 0) {        Document doc=XMLUtils.toDOMDocument(xmlConfig,DEBUG);        if (doc != null) {          Element vPair=doc.getDocumentElement();          Set values=XMLUtils.getAttributeValuePair(vPair);          for (Iterator it=values.iterator(); it.hasNext(); ) {            String value=(String)it.next();            String[] moduleInfo=value.split(" ");            if (moduleInfo.length > 0 && moduleInfo[0].equals(moduleInstance)) {              returnValue=true;              break;            }          }        }      }    }  }  return returnValue;}  }
class C{  public void bindKeyStore(final KeyStoreService keyStoreService){  this.keyStore=keyStoreService;}  }
class C{  public String toString(){  String modelString="value=" + getValue() + ", "+ "extent="+ getExtent()+ ", "+ "min="+ getMinimum()+ ", "+ "max="+ getMaximum()+ ", "+ "adj="+ getValueIsAdjusting();  return getClass().getName() + "[" + modelString+ "]";}  }
class C{  public static byte[] allocSecondary(byte[] curr){  return new byte[SECONDARY_BUFFER_LENGTH];}  }
class C{  public CoordinationDemo(){}  }
class C{  public NSNumber(String text){  if (text == null)   throw new IllegalArgumentException("The given string is null and cannot be parsed as number.");  try {    long l=Long.parseLong(text);    doubleValue=longValue=l;    type=INTEGER;  } catch (  Exception ex) {    try {      doubleValue=Double.parseDouble(text);      longValue=Math.round(doubleValue);      type=REAL;    } catch (    Exception ex2) {      try {        boolValue=text.toLowerCase().equals("true") || text.toLowerCase().equals("yes");        if (!boolValue && !(text.toLowerCase().equals("false") || text.toLowerCase().equals("no"))) {          throw new Exception("not a boolean");        }        type=BOOLEAN;        doubleValue=longValue=boolValue ? 1 : 0;      } catch (      Exception ex3) {        throw new IllegalArgumentException("The given string neither represents a double, an int nor a boolean value.");      }    }  }}  }
class C{  public static ImageTypeSpecifier createBanded(ColorSpace colorSpace,int[] bankIndices,int[] bandOffsets,int dataType,boolean hasAlpha,boolean isAlphaPremultiplied){  return new ImageTypeSpecifier.Banded(colorSpace,bankIndices,bandOffsets,dataType,hasAlpha,isAlphaPremultiplied);}  }
class C{  public void incrementTotalWrites(){  totalWrites++;  totalRequests++;}  }
class C{  public final void testCertificate() throws Exception {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertTrue(Arrays.equals(testEncoding,c1.getEncoded()));  assertEquals("TEST",c1.getPublicKey().getAlgorithm());  assertTrue(Arrays.equals(new byte[]{(byte)1,(byte)2,(byte)3},c1.getPublicKey().getEncoded()));  assertEquals("TEST_FORMAT",c1.getPublicKey().getFormat());  assertEquals("TEST_TYPE",c1.getType());}  }
class C{  public String doSimpleBind(int ldapVersion,ByteSequence bindDN,ByteSequence bindPassword,List<Control> requestControls,List<Control> responseControls) throws ClientException, LDAPException {  if (bindPassword == null) {    bindPassword=ByteString.empty();  }  if (bindDN == null) {    bindDN=ByteString.empty();  }  sendSimpleBindRequest(ldapVersion,bindDN,bindPassword,requestControls);  LDAPMessage responseMessage=readBindResponse(ERR_LDAPAUTH_CANNOT_READ_BIND_RESPONSE);  responseControls.addAll(responseMessage.getControls());  checkConnected(responseMessage);  return checkSuccessfulSimpleBind(responseMessage);}  }
class C{  final boolean casRight(Index<K,V> cmp,Index<K,V> val){  return UNSAFE.compareAndSwapObject(this,rightOffset,cmp,val);}  }
class C{  public DsnWriteScopeParameter(RoutingBoard p_board,autoroute.ArtSettings p_autoroute_settings,IndentFileWriter p_file,String p_string_quote,DsnCoordinateTransform p_coordinate_transform,boolean p_compat_mode){  board=p_board;  autoroute_settings=p_autoroute_settings;  file=p_file;  coordinate_transform=p_coordinate_transform;  compat_mode=p_compat_mode;  String[] reserved_chars={"(",")"," ",";","-","_"};  identifier_type=new DsnIdentifier(reserved_chars,p_string_quote);}  }
class C{  public LDAPConnectionException(LocalizableMessage message){  super(message);  resultCode=-1;  matchedDN=null;  errorMessage=null;}  }
class C{  public void remove(Component comp){  if (comp == rootPane) {    super.remove(comp);  } else {    getContentPane().remove(comp);  }}  }
class C{  public void increasePermits(int increase){  this.release(increase);}  }
class C{  public boolean isVisible(){  if (relativePosition == 0) {    return true;  } else {    return false;  }}  }
class C{  public MLet(URL[] urls,ClassLoader parent,URLStreamHandlerFactory factory){  this(urls,parent,factory,true);}  }
class C{  public LongHolder(long initial){  value=initial;}  }
class C{  public boolean isBound(){  return bound;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public ResponseSet process(PLLAuditor auditor,List<Request> requests,HttpServletRequest servletRequest,HttpServletResponse servletResponse,ServletContext servletContext){  ResponseSet rset=new ResponseSet(AuthXMLTags.AUTH_SERVICE);  auditor.setComponent(AUTHENTICATION);  for (  Request req : requests) {    Response res=processRequest(auditor,req,servletRequest,servletResponse);    rset.addResponse(res);  }  return rset;}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<?> createUser(@RequestBody ManagedUserVM managedUserVM,HttpServletRequest request) throws URISyntaxException {  log.debug("REST request to save User : {}",managedUserVM);  if (userRepository.findOneByLogin(managedUserVM.getLogin().toLowerCase()).isPresent()) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","userexists","Login already in use")).body(null);  } else   if (userRepository.findOneByEmail(managedUserVM.getEmail()).isPresent()) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","emailexists","Email already in use")).body(null);  } else {    User newUser=userService.createUser(managedUserVM);    String baseUrl=request.getScheme() + "://" + request.getServerName()+ ":"+ request.getServerPort()+ request.getContextPath();    mailService.sendCreationEmail(newUser,baseUrl);    return ResponseEntity.created(new URI("/api/users/" + newUser.getLogin())).headers(HeaderUtil.createAlert("userManagement.created",newUser.getLogin())).body(newUser);  }}  }
class C{  public boolean equals(String obj2){  return str().equals(obj2);}  }
class C{  public ItemSelectionFilter(ItemSelectionChoice[] p_item_types){  java.util.Arrays.fill(sel_array,false);  for (int i=0; i < p_item_types.length; ++i) {    sel_array[p_item_types[i].ordinal()]=true;  }  sel_array[ItemSelectionChoice.FIXED.ordinal()]=true;  sel_array[ItemSelectionChoice.UNFIXED.ordinal()]=true;}  }
class C{  void multiply(MutableBigInteger y,MutableBigInteger z){  int xLen=intLen;  int yLen=y.intLen;  int newLen=xLen + yLen;  if (z.value.length < newLen)   z.value=new int[newLen];  z.offset=0;  z.intLen=newLen;  long carry=0;  for (int j=yLen - 1, k=yLen + xLen - 1; j >= 0; j--, k--) {    long product=(y.value[j + y.offset] & LONG_MASK) * (value[xLen - 1 + offset] & LONG_MASK) + carry;    z.value[k]=(int)product;    carry=product >>> 32;  }  z.value[xLen - 1]=(int)carry;  for (int i=xLen - 2; i >= 0; i--) {    carry=0;    for (int j=yLen - 1, k=yLen + i; j >= 0; j--, k--) {      long product=(y.value[j + y.offset] & LONG_MASK) * (value[i + offset] & LONG_MASK) + (z.value[k] & LONG_MASK) + carry;      z.value[k]=(int)product;      carry=product >>> 32;    }    z.value[i]=(int)carry;  }  z.normalize();}  }
class C{  public AMCRLStore(AMLDAPCertStoreParameters param){  super(param);}  }
class C{  @Override public void onMessageReceived(RemoteMessage remoteMessage){  Log.d(TAG,"From: " + remoteMessage.getFrom());  if (remoteMessage.getData().size() > 0) {    Log.d(TAG,"Message data payload: " + remoteMessage.getData());  }  if (remoteMessage.getNotification() != null) {    Log.d(TAG,"Message Notification Body: " + remoteMessage.getNotification().getBody());  }}  }
class C{  public static AztecCode encode(byte[] data){  return encode(data,DEFAULT_EC_PERCENT,DEFAULT_AZTEC_LAYERS);}  }
class C{  public String[] expiredKeys() throws IOException {  return keys();}  }
class C{  public static boolean checkIfDirIsHidden(final String dirName,final IConfiguration conf){  if (dirName == null || dirName.equals("")) {    return false;  }  String dir=PathUtils.removeSlashFromEnd(PathUtils.escape(dirName));  Scanner sc=new Scanner(dir).useDelimiter("/");  while (sc.hasNext()) {    boolean check=Pattern.compile(getHiddenFileOrFolderRegex(conf.getHiddenFolders())).matcher(sc.next()).matches();    if (check) {      return true;    }  }  return false;}  }
class C{  @ForceInline @SuppressWarnings("unchecked") static <T,U>T castReference(Class<? extends T> t,U x){  if (x != null && !t.isInstance(x))   throw newClassCastException(t,x);  return (T)x;}  }
class C{  @SuppressWarnings("rawtypes") public Iterator iterator(){  return children.iterator();}  }
class C{  public PWResetViewBeanBase(String pageName){  super(pageName);}  }
class C{  public Tuple2<T2,T1> swap(){  return new Tuple2<>(_2,_1);}  }
class C{  public void testFlipBitNegativeOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=150;  byte rBytes[]={-65,-1,-1,-1,-1,-1,-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getSource() == splitPane) {    if (e.getPropertyName() == JSplitPane.ORIENTATION_PROPERTY) {      orientation=splitPane.getOrientation();      setCursor((orientation == JSplitPane.HORIZONTAL_SPLIT) ? Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR) : Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR));      revalidateSplitPane();    } else     if (e.getPropertyName() == JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY) {      oneTouchExpandableChanged();    }  }}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  putAllImpl(map);}  }
class C{  public void terminate(){  shouldTerminate=true;}  }
class C{  @Override protected void constructApplication(String[] args){  try {    controlPanel=new ControlPanel();    controlPanel.initialize(args);  } catch (  Throwable t) {    if (ControlPanelLog.isInitialized()) {      logger.error(LocalizableMessage.raw("Error launching GUI: " + t,t));    }    InternalError error=new InternalError("Failed to invoke initialize method");    error.initCause(t);    throw error;  }}  }
class C{  protected StartMsg(){}  }
class C{  public void windowStateChanged(WindowEvent e){  ((WindowStateListener)a).windowStateChanged(e);  ((WindowStateListener)b).windowStateChanged(e);}  }
class C{  @SuppressWarnings("rawtypes") public void store(String pid,Dictionary properties) throws IOException {  logger.debug("Store call for {} {}",pid,properties);  if (pid.startsWith("org.apache.felix.fileinstall")) {    tempStore.put(pid,properties);    return;  }  try {    if (isReady(0) && requireRepository) {      String id=pidToId(pid);      Map<String,Object> obj=dictToMap(properties);      JsonValue content=new JsonValue(obj);      String configResourceId=ConfigBootstrapHelper.getId(content.get(ConfigBootstrapHelper.CONFIG_ALIAS).asString(),content.get(ConfigBootstrapHelper.SERVICE_PID).asString(),content.get(ConfigBootstrapHelper.SERVICE_FACTORY_PID).asString());      String configString=(String)obj.get(JSONEnhancedConfig.JSON_CONFIG_PROPERTY);      Map<Object,Object> configMap=deserializeConfig(configString);      if (configMap != null) {        configMap.put("_id",configResourceId);      }      obj.put(JSONEnhancedConfig.JSON_CONFIG_PROPERTY,configMap);      Map<String,Object> existing=null;      try {        ReadRequest readRequest=Requests.newReadRequest(id);        existing=repo.read(readRequest).getContent().asMap();      } catch (      NotFoundException ex) {      }      if (existing != null) {        String rev=(String)existing.get("_rev");        existing.remove("_rev");        existing.remove("_id");        obj.remove("_rev");        obj.remove("_id");        obj.remove(RepoPersistenceManager.BUNDLE_LOCATION);        obj.remove(RepoPersistenceManager.FELIX_FILEINSTALL_FILENAME);        if (!existing.equals(obj)) {          logger.trace("Not matching {} {}",existing,obj);          boolean retry;          do {            retry=false;            try {              UpdateRequest r=Requests.newUpdateRequest(id,new JsonValue(obj));              r.setRevision(rev);              repo.update(r);            } catch (            PreconditionFailedException ex) {              logger.debug("Concurrent change during update, retrying {} {}",pid,rev);              ReadRequest readRequest=Requests.newReadRequest(id);              existing=repo.read(readRequest).getContent().asMap();              rev=(String)existing.get("_rev");              retry=true;            }          } while (retry);          logger.debug("Updated existing config {} {} {}",new Object[]{pid,rev,obj});        } else {          logger.debug("Existing config same as store request, ignoring {} {} {}",new Object[]{pid,rev,obj});        }      } else {        logger.trace("Creating: {} {} ",id,obj);        String newResourceId=id.substring(CONFIG_CONTEXT_PREFIX.length());        CreateRequest createRequest=Requests.newCreateRequest(CONFIG_CONTEXT_PREFIX,new JsonValue(obj));        createRequest.setNewResourceId(newResourceId);        obj=repo.create(createRequest).getContent().asMap();        logger.debug("Stored new config in repository {} {}",pid,obj);      }    } else {      tempStore.put(pid,properties);      logger.debug("Stored in memory {} {}",pid,properties);    }  } catch (  ResourceException ex) {    throw new IOException("Failed to store configuration in repository: " + ex.getMessage(),ex);  }}  }
class C{  @PostConstruct public void initApplication(){  log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));  Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());  if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {    log.error("You have misconfigured your application! It should not run " + "with both the 'dev' and 'prod' profiles at the same time.");  }  if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {    log.error("You have misconfigured your application! It should not" + "run with both the 'dev' and 'cloud' profiles at the same time.");  }}  }
class C{  private void acceptCertificate(final X509Certificate[] chain,final boolean permanent){  if (permanent) {    LOG.debug(LocalizableMessage.raw("Permanently accepting certificate chain to " + "truststore"));  } else {    LOG.debug(LocalizableMessage.raw("Accepting certificate chain for this session"));  }  for (  final X509Certificate aChain : chain) {    try {      final String alias=aChain.getSubjectDN().getName();      inMemoryTrustStore.setCertificateEntry(alias,aChain);      if (permanent) {        onDiskTrustStore.setCertificateEntry(alias,aChain);      }    } catch (    final Exception e) {      LOG.warn(LocalizableMessage.raw("Error setting certificate to store: " + e + "\nCert: "+ aChain));    }  }  if (permanent) {    try {      final File truststoreFile=new File(DEFAULT_PATH);      if (!truststoreFile.exists()) {        createFile(truststoreFile);      }      try (final FileOutputStream fos=new FileOutputStream(truststoreFile)){        onDiskTrustStore.store(fos,DEFAULT_PASSWORD);      }     } catch (    final Exception e) {      LOG.warn(LocalizableMessage.raw("Error saving store to disk: " + e));    }  }}  }
class C{  public static boolean hasDescriptor(LocalizableMessage msg,LocalizableMessageDescriptor.Arg0 desc){  return msg.ordinal() == desc.ordinal() && msg.resourceName().equals(desc.resourceName());}  }
class C{  @Deprecated public boolean isPlaceHolder(){  return isPlaceHolder;}  }
class C{  public void append(ByteBuffer anotherBuffer){  append(anotherBuffer.buffer,0,anotherBuffer.length);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.YEAR_TYPE,this);}  }
class C{  public static ArgumentException missingSeparatorInPropertyArgument(String arg){  LocalizableMessage msg=ERR_DSCFG_ERROR_NO_SEPARATOR_IN_PROPERTY_VALUE.get(arg);  return new ArgumentException(msg);}  }
class C{  private String listToString(List roleNames){  StringBuffer sb=new StringBuffer();  for (Iterator i=roleNames.iterator(); i.hasNext(); ) {    String role=(String)i.next();    if (sb.length() > 0) {      sb.append("; ");    }    sb.append(getLocalizedString(role));  }  return sb.toString();}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  public static <A,B>Pair<A,B> create(A a,B b){  return new Pair<A,B>(a,b);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix02.class,args);}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  public boolean memberAlive(Member member){  if (member.equals(local)) {    return false;  }  boolean result=false;synchronized (membersLock) {    MbrEntry entry=map.get(member);    if (entry == null) {      entry=addMember(member);      result=true;    } else {      Member updateMember=entry.getMember();      if (updateMember.getMemberAliveTime() != member.getMemberAliveTime()) {        updateMember.setMemberAliveTime(member.getMemberAliveTime());        updateMember.setPayload(member.getPayload());        updateMember.setCommand(member.getCommand());        Member[] newMembers=members.clone();        Arrays.sort(newMembers,memberComparator);        members=newMembers;      }    }    entry.accessed();  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_entitiessetnameditemns1.class,args);}  }
class C{  public void replaceText(int startIndex,int endIndex,String s){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.replaceText(startIndex,endIndex,s);  }}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  boolean isUpgradeCompleted(){  return AMSetupServlet.isUpgradeCompleted();}  }
class C{  public SslRMIServerSocketFactory(){  this(null,null,false);}  }
class C{  boolean checkDecryptedBytes(final byte[] msg){  boolean conform=false;  byte[] tmpMsg=msg;  if (oracleType == OracleType.BigIP && tmpMsg[1] == 0x02) {    conform=true;  }  if (tmpMsg[0] == 0x00) {    byte[] tmp=new byte[tmpMsg.length - 1];    System.arraycopy(tmpMsg,1,tmp,0,tmp.length);    tmpMsg=tmp;  }  if (oracleType == OracleType.MANGER_0x00 && tmpMsg.length == (blockSize - 1)) {    conform=true;  }  if (tmpMsg[0] == 0x02 && tmpMsg.length == (blockSize - 1)) {switch (oracleType) {case TTT:case BigIP:      conform=true;    break;case FTT:  if (checkFirst(tmpMsg)) {    conform=true;  }break;case TFT:if (checkSecond(tmpMsg)) {conform=true;}break;case FFT:if (checkFirst(tmpMsg) && checkSecond(tmpMsg)) {conform=true;}break;case FFF:if (checkFirst(tmpMsg) && checkSecond(tmpMsg) && checkThird(tmpMsg)) {conform=true;}break;case JSSE:if (checkJSSE(tmpMsg)) {conform=true;}break;case XMLENC:if (checkXMLENC(tmpMsg)) {conform=true;}break;default :break;}}if (conform) {LOGGER.debug("-------- Valid message by query number {} -----------",numberOfQueries);}return conform;}  }
class C{  public void addColumn(final Object columnName,final Object[] columnData){  addColumn(columnName,convertToVector(columnData));}  }
class C{  public static SSLEngine[] connect(final TestSSLContext c,Hooks hooks) throws IOException {  if (hooks == null) {    hooks=new Hooks();  }  SSLSession session=c.clientContext.createSSLEngine().getSession();  int packetBufferSize=session.getPacketBufferSize();  ByteBuffer clientToServer=ByteBuffer.allocate(packetBufferSize);  ByteBuffer serverToClient=ByteBuffer.allocate(packetBufferSize);  int applicationBufferSize=session.getApplicationBufferSize();  ByteBuffer scratch=ByteBuffer.allocate(applicationBufferSize);  SSLEngine client=c.clientContext.createSSLEngine();  SSLEngine server=c.serverContext.createSSLEngine();  client.setUseClientMode(true);  server.setUseClientMode(false);  hooks.beforeBeginHandshake(client,server);  client.beginHandshake();  server.beginHandshake();  while (true) {    boolean clientDone=client.getHandshakeStatus() == HandshakeStatus.NOT_HANDSHAKING;    boolean serverDone=server.getHandshakeStatus() == HandshakeStatus.NOT_HANDSHAKING;    if (clientDone && serverDone) {      break;    }    boolean progress=false;    if (!clientDone) {      progress|=handshakeCompleted(client,clientToServer,serverToClient,scratch);    }    if (!serverDone) {      progress|=handshakeCompleted(server,serverToClient,clientToServer,scratch);    }    if (!progress) {      break;    }  }  return new SSLEngine[]{server,client};}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public static PdfAction createGoToR(String filename,String destination,boolean newWindow){  return createGoToR(new PdfStringFS(filename),new PdfStringDestination(destination),newWindow);}  }
class C{  public static <K,V>Map<K,V> singletonMap(K key,V value){  return new SingletonMap<K,V>(key,value);}  }
class C{  protected void parseDOMElement(Element element) throws SAML2Exception {  parseDOMAttributes(element);  List childElementList=new ArrayList();  NodeList nList=element.getChildNodes();  if ((nList != null) && (nList.getLength() > 0)) {    for (int i=0; i < nList.getLength(); i++) {      Node childNode=nList.item(i);      if (childNode.getNodeType() == Node.ELEMENT_NODE) {        childElementList.add(childNode);      }    }  }  ListIterator iter=childElementList.listIterator();  parseDOMChileElements(iter);  if (iter.hasNext()) {    if (SAML2SDKUtils.debug.messageEnabled()) {      SAML2SDKUtils.debug.message("RequestAbstractImpl." + "parseDOMElement: Unexpected child element found");    }    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("schemaViolation"));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechild.class,args);}  }
class C{  public void modify(SSOToken token,String dn,ModificationItem mods[]) throws SMSException, SSOException {  SMSAuditor auditor=newAuditor(token,dn,readCurrentState(dn));  ModifyRequest request=org.forgerock.opendj.ldap.requests.Requests.newModifyRequest(dn);  copyModItemsToLDAPModifyRequest(mods,request);  ModifyOperation mo=icConn.processModify(request);  ResultCode resultCode=mo.getResultCode();  if (resultCode == ResultCode.SUCCESS) {    if (debug.messageEnabled()) {      debug.message("SMSEmbeddedLdapObject.modify: Successfully " + "modified entry: " + dn);    }    if (auditor != null) {      auditor.auditModify(mods);    }  } else {    debug.error("SMSEmbeddedLdapObject.modify: Error modifying entry " + dn + " by Principal: "+ token.getPrincipal().getName()+ ", error code = "+ resultCode);    throw new SMSException("","sms-entry-cannot-modify");  }}  }
class C{  static void clearRootClientConnectionAtShutdown(){  rootConnection=null;}  }
class C{  public static boolean isThirdPartyRequest(String requestUrl,String referrer){  String domainName=getSecondLevelDomainName(requestUrl);  String refDomainName=getSecondLevelDomainName(referrer);  return referrer != null && !StringUtils.equals(domainName,refDomainName);}  }
class C{  public void appendCell(float value){  appendCell(String.valueOf(value));}  }
class C{  public static String toASCII(String input,int flag){  int p=0, q=0;  StringBuffer out=new StringBuffer();  if (isRootLabel(input)) {    return ".";  }  while (p < input.length()) {    q=searchDots(input,p);    out.append(toASCIIInternal(input.substring(p,q),flag));    if (q != (input.length())) {      out.append('.');    }    p=q + 1;  }  return out.toString();}  }
class C{  protected void closeSocket(){  if (isConnected()) {    if (socket != null) {      try {        socket.close();      } catch (      IOException x) {      } finally {        socket=null;        soOut=null;        soIn=null;      }    }    setRequestCount(0);    setConnected(false);    if (log.isDebugEnabled())     log.debug(sm.getString("bioSender.closeSocket",getAddress().getHostAddress(),Integer.valueOf(getPort()),Long.valueOf(0)));  }}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragDropEnd(dsde);  }  getDragSource().processDragDropEnd(dsde);}  }
class C{  public void testPosPosFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-2,-76,88,44,1,2,17,35,16,9,2,5,6,21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Override public void onStop(){  FmRadioService.setActivityIsOnStop(true);  Log.d(TAG,"start FmRadioActivity.onStop");  if (mIsServiceBinded) {    unbindService(mServiceConnection);    mIsServiceBinded=false;  }  mIsNeedShowNoAntennaDlg=false;  Log.d(TAG,"end FmRadioActivity.onStop");  super.onStop();  Log.d(TAG,"FMRadio onStop stopPsensor()");  if (isFmRadioGestureSupport()) {    stopPsensor();  }}  }
class C{  protected void zoneWasLoaded(View zone){  loadedZones.addElement(zone);  unloadOldZones();}  }
class C{  public boolean isReferral(){  return hasObjectClassOrAttribute(OC_REFERRAL,ATTR_REFERRAL_URL);}  }
class C{  protected void checkOptionFlags() throws ChannelException {  StringBuilder conflicts=new StringBuilder();  ChannelInterceptor first=interceptors;  while (first != null) {    int flag=first.getOptionFlag();    if (flag != 0) {      ChannelInterceptor next=first.getNext();      while (next != null) {        int nflag=next.getOptionFlag();        if (nflag != 0 && (((flag & nflag) == flag) || ((flag & nflag) == nflag))) {          conflicts.append("[");          conflicts.append(first.getClass().getName());          conflicts.append(":");          conflicts.append(flag);          conflicts.append(" == ");          conflicts.append(next.getClass().getName());          conflicts.append(":");          conflicts.append(nflag);          conflicts.append("] ");        }        next=next.getNext();      }    }    first=first.getNext();  }  if (conflicts.length() > 0)   throw new ChannelException(sm.getString("groupChannel.optionFlag.conflict",conflicts.toString()));}  }
class C{  private static boolean checkValue(String val) throws MalformedObjectNameException {  if (val == null)   throw new NullPointerException("Invalid value (null)");  final int len=val.length();  if (len == 0)   return false;  final char[] s=val.toCharArray();  final int[] result=parseValue(s,0);  final int endValue=result[0];  final boolean value_pattern=result[1] == 1;  if (endValue < len)   throw new MalformedObjectNameException("Invalid character in value: `" + s[endValue] + "'");  return value_pattern;}  }
class C{  public void run(){  if (Debug.messageEnabled()) {    Debug.message(fileName + ":FileHandler:TimeBufferingTask.run() called");  }  nonBlockingFlush();}  }
class C{  public void testMinLess(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.min(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  protected final boolean isDescendant(int identity){  return (_parent2(identity) >= _startNode) || (_startNode == identity);}  }
class C{  public URI parseServerAuthority() throws URISyntaxException {  if (!serverAuthority) {    parseAuthority(true);  }  return this;}  }
class C{  protected void resetChildrenPaths(TreePath parentPath){  removeMapping(this);  if (parentPath == null)   path=new TreePath(getUserObject()); else   path=parentPath.pathByAddingChild(getUserObject());  addMapping(this);  for (int counter=getChildCount() - 1; counter >= 0; counter--)   ((FHTreeStateNode)getChildAt(counter)).resetChildrenPaths(path);}  }
class C{  private void sendServerInternalErrorResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  if (transaction.getState() != TransactionState.TERMINATED) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Sending 500 response for out of sequence message");    SIPResponse sipResponse=sipRequest.createResponse(Response.SERVER_INTERNAL_ERROR);    sipResponse.setReasonPhrase("Request out of order");    if (MessageFactoryImpl.getDefaultServerHeader() != null) {      ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();      sipResponse.setHeader(serverHeader);    }    try {      RetryAfter retryAfter=new RetryAfter();      retryAfter.setRetryAfter(10);      sipResponse.setHeader(retryAfter);      sipStack.addTransactionPendingAck(transaction);      transaction.sendResponse(sipResponse);      transaction.releaseSem();    } catch (    Exception ex) {      logger.logError("Problem sending response",ex);      transaction.releaseSem();      sipStack.removeTransaction(transaction);    }  }}  }
class C{  public void deleteAgentGroups(String realmName,Set agentGroups) throws AMConsoleException {  if ((agentGroups != null) && !agentGroups.isEmpty()) {    String idNames=AMFormatUtils.toCommaSeparatedFormat(agentGroups);    String[] params={realmName,idNames};    logEvent("ATTEMPT_DELETE_AGENT_GROUP",params);    try {      AgentConfiguration.deleteAgentGroups(getUserSSOToken(),realmName,getAMIdentity(agentGroups));      logEvent("SUCCEED_DELETE_AGENT_GROUP",params);    } catch (    IdRepoException e) {      String[] paramsEx={realmName,idNames,getErrorString(e)};      logEvent("EXCEPTION_DELETE_AGENT_GROUP",paramsEx);      throw new AMConsoleException(getErrorString(e));    }catch (    SSOException e) {      String[] paramsEx={realmName,idNames,getErrorString(e)};      logEvent("EXCEPTION_DELETE_AGENT_GROUP",paramsEx);      throw new AMConsoleException(getErrorString(e));    }catch (    SMSException e) {      String[] paramsEx={realmName,idNames,getErrorString(e)};      logEvent("EXCEPTION_DELETE_AGENT_GROUP",paramsEx);      throw new AMConsoleException(getErrorString(e));    }  }}  }
class C{  void addToProjectDirectory(final Path path,final Path projectDir) throws IOException {  copyNewFile(path,projectDir.resolve(path.toString() + NEW_SUFFIX + timestamp));}  }
class C{  @SuppressWarnings("unchecked") public void writeBlob(Blob x) throws SQLException {  if (x == null) {    attribs.add(null);  } else {    attribs.add(new SerialBlob(x));  }}  }
class C{  void executeAugmentationScript(ScriptEntry augmentScript,MessageInfoContext messageInfo,JsonValue properties,SecurityContextMapper securityContextMapper) throws ResourceException, AuthenticationException {  if (augmentScript == null) {    return;  }  try {    if (!augmentScript.isActive()) {      throw new ServiceUnavailableException("Failed to execute inactive script: " + augmentScript.getName().toString());    }    Context context=ContextUtil.createInternalContext();    final Script script=augmentScript.getScript(context);    script.put("context",messageInfo);    script.put("httpRequest",messageInfo.getRequest());    script.put("properties",properties);    JsonValue security=json(object(field(SecurityContextMapper.AUTHENTICATION_ID,securityContextMapper.getAuthenticationId()),field(SecurityContextMapper.AUTHORIZATION,securityContextMapper.getAuthorizationId())));    script.put("security",security);    JsonValue updatedSecurityContext=new JsonValue(script.eval());    if (!updatedSecurityContext.get(SecurityContextMapper.AUTHENTICATION_ID).isNull()) {      securityContextMapper.setAuthenticationId(updatedSecurityContext.get(SecurityContextMapper.AUTHENTICATION_ID).asString());    }    if (!updatedSecurityContext.get(SecurityContextMapper.AUTHORIZATION).isNull()) {      securityContextMapper.setAuthorizationId((updatedSecurityContext.get(SecurityContextMapper.AUTHORIZATION).asMap()));    }  } catch (  ScriptThrownException e) {    final ResourceException re=e.toResourceException(ResourceException.INTERNAL_ERROR,e.getMessage());    logger.debug("Augmentation script {} threw {} when augmenting security context for {}",augmentScript.getName(),securityContextMapper.getAuthenticationId(),re.toString(),re);    throw re;  }catch (  ScriptException e) {    logger.error("Failure executing augmentation script {}",augmentScript.getName(),e);    throw new AuthenticationException(e.getMessage(),e);  }}  }
class C{  public ConfigurationFramework initialize() throws ConfigException {  return initialize(null);}  }
class C{  public void test_getPrimeExponentQ(){  assertEquals("invalid prime exponent Q",Util.rsaCrtParam.getPrimeExponentQ(),key.getPrimeExponentQ());}  }
class C{  public void writeRaw(byte b) throws IOException {  _writeByte(b);}  }
class C{  protected void init() throws IOException {  if (appDataIS != null) {    return;  }  initTransportLayer();  appDataIS=new SSLSocketInputStream(this);  appDataOS=new SSLSocketOutputStream(this);}  }
class C{  public final Polyline to_polyline(){  PlaLineIntAlist lines=new PlaLineIntAlist(3);  lines.add(start);  lines.add(middle);  lines.add(end);  return new Polyline(lines);}  }
class C{  static void signAssertion(String realm,String pdpEntityID,Assertion assertion) throws SAML2Exception {  String classMethod="QueryHandlerServlet.signAssertion: ";  KeyProvider keyProvider=KeyUtil.getKeyProviderInstance();  if (keyProvider == null) {    debug.error(classMethod + "Unable to get a key provider instance.");    throw new SAML2Exception("nullKeyProvider");  }  String pdpSignCertAlias=SAML2Utils.getAttributeValueFromXACMLConfig(realm,SAML2Constants.PDP_ROLE,pdpEntityID,SAML2Constants.SIGNING_CERT_ALIAS);  if (pdpSignCertAlias == null) {    debug.error(classMethod + "Unable to get the hosted PDP signing certificate alias.");    String[] data={realm,pdpEntityID};    LogUtil.error(Level.INFO,LogUtil.NULL_PDP_SIGN_CERT_ALIAS,data);    throw new SAML2Exception("missingSigningCertAlias");  }  assertion.sign(keyProvider.getPrivateKey(pdpSignCertAlias),keyProvider.getX509Certificate(pdpSignCertAlias));}  }
class C{  public final boolean hasResponseBody(){  int responseCode=responseHeaders.getHeaders().getResponseCode();  if (method.equals("HEAD")) {    return false;  }  if ((responseCode < HTTP_CONTINUE || responseCode >= 200) && responseCode != HttpURLConnectionImpl.HTTP_NO_CONTENT && responseCode != HttpURLConnectionImpl.HTTP_NOT_MODIFIED) {    return true;  }  if (responseHeaders.getContentLength() != -1 || responseHeaders.isChunked()) {    return true;  }  return false;}  }
class C{  void outputDocTypeDecl(String name,boolean closeDecl) throws SAXException {  if (m_cdataTagOpen)   closeCDATA();  try {    final java.io.Writer writer=m_writer;    writer.write("<!DOCTYPE ");    writer.write(name);    String doctypePublic=getDoctypePublic();    if (null != doctypePublic) {      writer.write(" PUBLIC \"");      writer.write(doctypePublic);      writer.write('\"');    }    String doctypeSystem=getDoctypeSystem();    if (null != doctypeSystem) {      if (null == doctypePublic)       writer.write(" SYSTEM \""); else       writer.write(" \"");      writer.write(doctypeSystem);      if (closeDecl) {        writer.write("\">");        writer.write(m_lineSep,0,m_lineSepLen);        closeDecl=false;      } else       writer.write('\"');    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XMLString s1=m_arg0.execute(xctxt).xstr();  XMLString s2=m_arg1.execute(xctxt).xstr();  int index=s1.indexOf(s2);  return (-1 == index) ? XString.EMPTYSTRING : (XString)s1.substring(index + s2.length());}  }
class C{  public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  @Override public void onItemRangeMoved(T sender,int fromPosition,int toPosition,int itemCount){  for (int i=0; i < itemCount; ++i) {    this.adapter.notifyItemMoved(fromPosition + i,toPosition + i);  }}  }
class C{  public PlaSide side_of(PlaVectorInt p_other){  return PlaSide.get_side_of(determinant(p_other));}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  onBeforeResetProfile();  propertySheetModel.clear();  forwardTo();}  }
class C{  public static String stripSession(String url){  StringBuilder u=new StringBuilder(url);  int sessionStart;  while ((sessionStart=u.toString().indexOf(";" + Constants.SESSION_PARAMETER_NAME + "=")) != -1) {    int sessionEnd=u.toString().indexOf(';',sessionStart + 1);    if (sessionEnd == -1)     sessionEnd=u.toString().indexOf('?',sessionStart + 1);    if (sessionEnd == -1)     sessionEnd=u.length();    u.delete(sessionStart,sessionEnd);  }  return u.toString();}  }
class C{  protected int drawSelectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  g.setColor(selected);  Document doc=getDocument();  Segment segment=SegmentCache.getSharedSegment();  doc.getText(p0,p1 - p0,segment);  int ret=Utilities.drawTabbedText(this,segment,x,y,g,this,p0);  SegmentCache.releaseSharedSegment(segment);  return ret;}  }
class C{  public boolean keepProcessingEntry(){  return keepProcessingEntry;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  Node gen;  NodeList gList;  Element genElement;  int nodeType;  doc=(Document)load("staffNS",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  gen=gender.getFirstChild();  nodeType=(int)gen.getNodeType();  if (equals(1,nodeType)) {    gen=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",gen);  }  gList=gen.getChildNodes();  genElement=(Element)gList.item(0);  assertNotNull("notnull",genElement);{    boolean success=false;    try {      genElement.removeAttributeNS("www.xyz.com","local1");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  static void blur(byte[] srcPixels,byte[] dstPixels,int width,int height,float[] kernel,int radius){  float p;  int cp;  for (int y=0; y < height; y++) {    int index=y;    int offset=y * width;    for (int x=0; x < width; x++) {      p=0.0f;      for (int i=-radius; i <= radius; i++) {        int subOffset=x + i;        if (subOffset < 0 || subOffset >= width) {          subOffset=(x + width) % width;        }        int pixel=srcPixels[offset + subOffset] & 0xFF;        float blurFactor=kernel[radius + i];        p+=blurFactor * pixel;      }      cp=(int)(p + 0.5f);      dstPixels[index]=(byte)(cp > 255 ? 255 : cp);      index+=height;    }  }}  }
class C{  public void flush(){}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (!(object instanceof DateFormatSymbols)) {    return false;  }  DateFormatSymbols rhs=(DateFormatSymbols)object;  return localPatternChars.equals(rhs.localPatternChars) && Arrays.equals(ampms,rhs.ampms) && Arrays.equals(eras,rhs.eras)&& Arrays.equals(months,rhs.months)&& Arrays.equals(shortMonths,rhs.shortMonths)&& Arrays.equals(shortWeekdays,rhs.shortWeekdays)&& Arrays.equals(weekdays,rhs.weekdays)&& timeZoneStringsEqual(this,rhs);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(localName04.class,args);}  }
class C{  public String toString(){  return (toString(true,false));}  }
class C{  public void paintTreeCellBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private Identity doAuth(String username,String password){  Set<String> memberships=LDAPHelper.validate(username,password,config.getLdap());  if (memberships != null) {    return new UserIdentity(username,memberships).applyResolvePermissions(config);  } else {    return null;  }}  }
class C{  public boolean isSecured(){  return secured;}  }
class C{  public Set entrySet(){  if (entrySet == null)   entrySet=new SynchronizedSet(new EntrySet(),this);  return entrySet;}  }
class C{  public void removeAttributes(Enumeration<?> names){  while (names.hasMoreElements())   removeAttribute(names.nextElement());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodenotationnodevalue.class,args);}  }
class C{  public OpenSSLSignatureRawRSA() throws NoSuchAlgorithmException {  super("NONEwithRSA");}  }
class C{  public JobWrapper(JobDetail jobDetail,boolean paused) throws JobPersistenceException {  this.key=jobDetail.getKey().toString();  this.serialized=RepoJobStoreUtils.serialize(jobDetail);  this.paused=paused;}  }
class C{  public static String formatTime(Date time,Locale locale){  return new SimpleDateFormat("HH:mm",locale).format(time).replaceFirst("^0?","");}  }
class C{  public UUID toUUID(){  ByteString normDN=toNormalizedByteString();  if (!normDN.isEmpty()) {    normDN=normDN.subSequence(1,normDN.length());  }  return UUID.nameUUIDFromBytes(normDN.toByteArray());}  }
class C{  public void schemaChanged(String serviceName,String version){  if (debug.messageEnabled()) {    debug.message("Global config changed " + serviceName);  }  try {    AuthD authd=AuthD.getAuth();    if (serviceName.equals(ISAuthConstants.AUTH_SERVICE_NAME)) {      authd.updateAuthServiceGlobals(schemaManager);    } else     if (serviceName.equals(ISAuthConstants.AUTHCONFIG_SERVICE_NAME)) {      authd.updateAuthConfigGlobals(schemaManager);    } else     if (serviceName.equals(ISAuthConstants.PLATFORM_SERVICE_NAME)) {      authd.updatePlatformServiceGlobals(schemaManager);    } else     if (serviceName.equals(ISAuthConstants.SESSION_SERVICE_NAME)) {      authd.updateSessionServiceDynamics(schemaManager);    }  } catch (  Exception e) {    debug.error("Error schemaChanged : " + e.getMessage());    if (debug.messageEnabled()) {      debug.message("Stack trace: ",e);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Node psNode;  String psName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(1);  psNode=nameNode.getPreviousSibling();  psName=psNode.getNodeName();  assertEquals("whitespace","#text",psName);}  }
class C{  public boolean wildcard(){  return wildcard;}  }
class C{  protected BaseURLResourceName(Debug debug,T exactMatch,T noMatch,T subResourceMatch,T superResourceMatch,T wildcardMatch){  super(debug,exactMatch,noMatch,subResourceMatch,superResourceMatch,wildcardMatch);}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  public static boolean isValidSessionInRealm(String realm,Object session){  String classMethod="IDPSSOUtil.isValidSessionInRealm: ";  boolean isValidSessionInRealm=false;  try {    String sessionRealm=SAML2Utils.getSingleValuedSessionProperty(session,SAML2Constants.ORGANIZATION);    if (sessionRealm != null && !sessionRealm.isEmpty()) {      if (realm.equalsIgnoreCase(sessionRealm)) {        isValidSessionInRealm=true;      } else {        if (SAML2Utils.debug.warningEnabled()) {          SAML2Utils.debug.warning(classMethod + "Invalid realm for the session:" + sessionRealm+ ", while the realm of the IdP is:"+ realm);        }      }    }  } catch (  SessionException ex) {    SAML2Utils.debug.error(classMethod + "Could not retrieve the session information",ex);  }  return isValidSessionInRealm;}  }
class C{  public static boolean isValidCredentials(String dsHost,String dsPort,String bindDN,String bindPass){  try (Connection conn=factory.getConnection()){    return true;  } catch (  Exception e) {    System.out.println(bundle.getString("upg-error-credentials") + " !! ");  }  return false;}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  if (elems.elementAt(0) instanceof Level) {    level=((Level)elems.elementAt(0)).str;  } else {    level="800";  }  msg=((RecMsg)elems.elementAt(1)).str;  logInfoMap=null;  parameters=null;  if (elems.size() == 3) {    if (elems.elementAt(2) instanceof LogInfoMap) {      logInfoMap=((LogInfoMap)elems.elementAt(2)).logInfoMap;    } else {      parameters=((Parameters)elems.elementAt(2)).parameters;    }  } else   if (elems.size() == 4) {    logInfoMap=((LogInfoMap)elems.elementAt(2)).logInfoMap;    parameters=((Parameters)elems.elementAt(3)).parameters;  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  type=null;  types=null;}  }
class C{  public Xml2SomDatasets(Node n){  order=new ArrayList<>();  name2Node=new HashMap<>();  stack=new Stack<>();  anform=0;  inverseSearch=new HashMap<>();  processDatasetsInternal(n);}  }
class C{  public BatchAutorouter(BrdActionThread p_thread,boolean p_with_preferred_directions,int p_start_ripup_costs){  s_thread=p_thread;  hdlg=p_thread.hdlg;  routing_board=hdlg.get_routing_board();  itera_settings=hdlg.itera_settings;  resources=hdlg.newGuiResources("interactive.resources.InteractiveState");  if (p_with_preferred_directions) {    trace_cost_arr=itera_settings.autoroute_settings.get_trace_cost_arr();  } else {    trace_cost_arr=new ExpandCostFactor[this.routing_board.get_layer_count()];    for (int i=0; i < trace_cost_arr.length; ++i) {      double curr_min_cost=itera_settings.autoroute_settings.get_preferred_direction_trace_costs(i);      this.trace_cost_arr[i]=new ExpandCostFactor(curr_min_cost,curr_min_cost);    }  }  this.start_ripup_costs=p_start_ripup_costs;}  }
class C{  public JPanel(LayoutManager layout){  this(layout,true);}  }
class C{  public boolean isNasAssigned(){  return networkNumber == UN_NUMBERED;}  }
class C{  public void testNext() throws SQLException {  assertTrue(target.next());  assertTrue(target.next());  assertFalse(target.next());  assertTrue(target.isAfterLast());  assertFalse(target.next());  assertFalse(emptyTarget.next());  target.close();  try {    target.next();    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  public void test_checkClientTrusted_02() throws Exception {  X509TrustManagerImpl xtm=new X509TrustManagerImpl();  X509Certificate[] xcert=setInvalid();  try {    xtm.checkClientTrusted(xcert,"SSL");    fail("CertificateException wasn't thrown");  } catch (  CertificateException expected) {  }}  }
class C{  public static Condition isPresent(String propertyName){  return new IsPresentCondition(propertyName);}  }
class C{  public Reference<? extends T> remove() throws InterruptedException {  return remove(0L);}  }
class C{  public void dirtyCache(String dn,int eventType,boolean cosType,boolean aciChange,Set attrNames){  IdCacheBlock cb;  String originalDN=dn;  dn=DNUtils.normalizeDN(dn);  String cachedID=getCacheId(dn);switch (eventType) {case AMEvent.OBJECT_ADDED:    cb=getFromCache(dn);  if (cb != null) {    cb.setExists(true);  }if (cosType) {  removeCachedAttributes(cachedID,attrNames);}break;case AMEvent.OBJECT_REMOVED:cb=idRepoCache.getIfPresent(cachedID);idRepoCache.invalidate(cachedID);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(cachedID,attrNames);}break;case AMEvent.OBJECT_RENAMED:cb=idRepoCache.getIfPresent(cachedID);idRepoCache.invalidate(cachedID);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(cachedID,attrNames);}break;case AMEvent.OBJECT_CHANGED:cb=getFromCache(dn);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(cachedID,attrNames);} else if (aciChange) {clearCachedEntries(cachedID);}break;}if (DEBUG.messageEnabled()) {DEBUG.message("IdCachedServicesImpl.dirtyCache(): Cache " + "dirtied because of Event Notification. Parameters - " + "eventType: " + eventType + ", cosType: "+ cosType+ ", aciChange: "+ aciChange+ ", fullDN: "+ originalDN+ "; rfcDN ="+ dn+ "; cachedID="+ cachedID);}}  }
class C{  public org.w3c.dom.Document encryptAndReplaceWSSElements(org.w3c.dom.Document doc,java.util.Map elmMap,java.lang.String encDataEncAlg,int encDataEncAlgStrength,String certAlias,int kekStrength,java.lang.String tokenType,java.lang.String providerID) throws EncryptionException {  return ep.encryptAndReplaceWSSElements(doc,elmMap,encDataEncAlg,encDataEncAlgStrength,certAlias,kekStrength,tokenType,providerID);}  }
class C{  public static int pixelToDp(Context context,int pixel){  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();  return pixel < 0 ? pixel : Math.round(pixel / displayMetrics.density);}  }
class C{  public boolean isUserIDGeneratorEnabled(){  return userIDGeneratorEnabled;}  }
class C{  private void readAttributes() throws IOException, ClassFormatException {  final int attributes_count=dataInputStream.readUnsignedShort();  for (int i=0; i < attributes_count; i++) {    ConstantUtf8 c;    String name;    int name_index;    int length;    name_index=dataInputStream.readUnsignedShort();    c=(ConstantUtf8)constant_pool.getConstant(name_index,Const.CONSTANT_Utf8);    name=c.getBytes();    length=dataInputStream.readInt();    if (name.equals("RuntimeVisibleAnnotations")) {      if (runtimeVisibleAnnotations != null) {        throw new ClassFormatException("RuntimeVisibleAnnotations attribute is not allowed more than once in a class file");      }      runtimeVisibleAnnotations=new Annotations(dataInputStream,constant_pool);    } else {      Utility.skipFully(dataInputStream,length);    }  }}  }
class C{  public final void push(Node value){  int ff=m_firstFree;  if ((ff + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new Node[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      Node newMap[]=new Node[m_mapSize];      System.arraycopy(m_map,0,newMap,0,ff + 1);      m_map=newMap;    }  }  m_map[ff]=value;  ff++;  m_firstFree=ff;}  }
class C{  public void testKeyPairGenerator07() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  Provider provider=null;  for (int i=0; i < algs.length; i++) {    try {      KeyPairGenerator.getInstance(algs[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public JwtClaimsSet validateJwt(String jwtValue) throws AuthLoginException {  final SignedJwt signedJwt=getSignedJwt(jwtValue);  JwtClaimsSet jwtClaimSet=signedJwt.getClaimsSet();  final String jwtClaimSetIssuer=jwtClaimSet.getIssuer();  if (!config.getConfiguredIssuer().equals(jwtClaimSetIssuer)) {    logger.error("The issuer configured for the module, " + config.getConfiguredIssuer() + ", and the "+ "issuer found in the token, "+ jwtClaimSetIssuer+ ", do not match. This means that the token "+ "authentication was directed at the wrong module, or the targeted module is mis-configured.");    throw new AuthLoginException(RESOURCE_BUNDLE_NAME,BUNDLE_KEY_TOKEN_ISSUER_MISMATCH,null);  }  OpenIdResolver resolver=openIdResolverCache.getResolverForIssuer(config.getCryptoContextValue());  if (resolver == null) {    if (logger.messageEnabled()) {      if (CRYPTO_CONTEXT_TYPE_CLIENT_SECRET.equals(config.getCryptoContextType())) {        logger.message("Creating OpenIdResolver for issuer " + jwtClaimSetIssuer + " using client secret");      } else {        logger.message("Creating OpenIdResolver for issuer " + jwtClaimSetIssuer + " using config url "+ config.getCryptoContextValue());      }    }    try {      resolver=openIdResolverCache.createResolver(jwtClaimSetIssuer,config.getCryptoContextType(),config.getCryptoContextValue(),config.getCryptoContextUrlValue());    } catch (    IllegalStateException e) {      logger.error("Could not create OpenIdResolver for issuer " + jwtClaimSetIssuer + " using crypto context value "+ config.getCryptoContextValue()+ " :"+ e);      throw new AuthLoginException(RESOURCE_BUNDLE_NAME,BUNDLE_KEY_ISSUER_MISMATCH,null);    }catch (    FailedToLoadJWKException e) {      logger.error("Could not create OpenIdResolver for issuer " + jwtClaimSetIssuer + " using crypto context value "+ config.getCryptoContextValue()+ " :"+ e,e);      throw new AuthLoginException(RESOURCE_BUNDLE_NAME,BUNDLE_KEY_JWK_NOT_LOADED,null);    }  }  try {    resolver.validateIdentity(signedJwt);    List<String> audienceClaim=jwtClaimSet.getAudience();    if (!jwtHasAudienceClaim(jwtClaimSet)) {      logger.error("No audience claim present in ID token.");      throw new AuthLoginException(RESOURCE_BUNDLE_NAME,BUNDLE_KEY_NO_AUDIENCE_CLAIM,null);    }    if (jwtHasAuthorizedPartyClaim(jwtClaimSet)) {      String authorizedPartyClaim=(String)jwtClaimSet.getClaim(AUTHORIZED_PARTY_CLAIM_KEY);      if (!audienceClaim.contains(authorizedPartyClaim)) {        logger.error("Authorized party was present in ID token, but its value was not found in the " + "audience claim.");        throw new AuthLoginException(RESOURCE_BUNDLE_NAME,BUNDLE_KEY_AUTHORIZED_PARTY_NOT_IN_AUDIENCE,null);      }    }  } catch (  OpenIdConnectVerificationException oice) {    logger.warning("Verification of ID Token failed: " + oice);    throw new AuthLoginException(RESOURCE_BUNDLE_NAME,BUNDLE_KEY_VERIFICATION_FAILED,null);  }catch (  JwsSigningException jse) {    logger.error("JwsSigningException",jse);    throw new AuthLoginException(RESOURCE_BUNDLE_NAME,BUNDLE_KEY_JWS_SIGNING_EXCEPTION,null);  }  return jwtClaimSet;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  ObjectOutputStream.PutField fields=out.putFields();  fields.put("language",baseLocale.getLanguage());  fields.put("script",baseLocale.getScript());  fields.put("country",baseLocale.getRegion());  fields.put("variant",baseLocale.getVariant());  fields.put("extensions",localeExtensions == null ? "" : localeExtensions.getID());  fields.put("hashcode",-1);  out.writeFields();}  }
class C{  @Override public void initialize(Map<String,String> conf,int taskId) throws Exception {  super.initialize(conf,taskId);}  }
class C{  private void doAcquireInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void clear(){  cache.edit().clear().apply();}  }
class C{  protected Container createContainer(){  return new EditorContainer();}  }
class C{  private void resetPolicyConfig(Map env) throws PolicyException, SSOException {  if (currentTimeMillis() > policyConfigExpiresAt) {    String realmDn=CollectionHelper.getMapAttr(env,PolicyEvaluator.REALM_DN);    if (realmDn == null) {      debug.error("LDAPFilterCondition.resetPolicyConfig(): realmDn is null");      throw new PolicyException(ResBundleUtils.rbName,"ldapfiltercondition_resetpolicyconfig_null_realm_dn",null,null);    }    Map policyConfigParams=PolicyConfig.getPolicyConfig(realmDn);    setPolicyConfig(policyConfigParams,realmDn);  }}  }
class C{  public SyncProviderException(String msg){  super(msg);}  }
class C{  public ServicesEditViewBean(){  super("ServicesEdit",DEFAULT_DISPLAY_URL,null);  String lserviceName=(String)getPageSessionAttribute(SERVICE_NAME);  if (lserviceName != null) {    initialize(lserviceName);  }}  }
class C{  public Map<String,Set<String>> marshalToAttributeMap(){  Map<String,Object> preMap=toJson().asMap();  Map<String,Set<String>> finalMap=MapMarshallUtils.toSmsMap(preMap);  Object attributesObject=preMap.get(ATTRIBUTE_MAP);  if (attributesObject instanceof Map) {    finalMap.remove(ATTRIBUTE_MAP);    Set<String> attributeValues=new LinkedHashSet<>();    finalMap.put(ATTRIBUTE_MAP,attributeValues);    for (    Map.Entry<String,String> entry : ((Map<String,String>)attributesObject).entrySet()) {      attributeValues.add(entry.getKey() + EQUALS + entry.getValue());    }  } else {    throw new IllegalStateException("Type corresponding to " + ATTRIBUTE_MAP + " key unexpected. Type: "+ (attributesObject != null ? attributesObject.getClass().getName() : " null"));  }  return finalMap;}  }
class C{  public void queueThread(WaitingThread wt){  if (wt == null) {    throw new IllegalArgumentException("Waiting thread must not be null.");  }  this.waitingThreads.add(wt);}  }
class C{  public void toLDIF(StringBuilder buffer,int wrapColumn){  String dnString=dn.toString();  int colsRemaining;  if (needsBase64Encoding(dnString)) {    dnString=Base64.encode(getBytes(dnString));    buffer.append("dn:: ");    colsRemaining=wrapColumn - 5;  } else {    buffer.append("dn: ");    colsRemaining=wrapColumn - 4;  }  int dnLength=dnString.length();  if (dnLength <= colsRemaining || colsRemaining <= 0) {    buffer.append(dnString);    buffer.append(EOL);  } else {    buffer.append(dnString,0,colsRemaining);    buffer.append(EOL);    int startPos=colsRemaining;    while (dnLength - startPos > wrapColumn - 1) {      buffer.append(" ");      buffer.append(dnString,startPos,startPos + wrapColumn - 1);      buffer.append(EOL);      startPos+=wrapColumn - 1;    }    if (startPos < dnLength) {      buffer.append(" ");      buffer.append(dnString.substring(startPos));      buffer.append(EOL);    }  }  for (  LDAPAttribute a : getAttributes()) {    String name=a.getAttributeType();    int nameLength=name.length();    for (    ByteString v : a.getValues()) {      String valueString;      if (needsBase64Encoding(v)) {        valueString=Base64.encode(v);        buffer.append(name);        buffer.append(":: ");        colsRemaining=wrapColumn - nameLength - 3;      } else {        valueString=v.toString();        buffer.append(name);        buffer.append(": ");        colsRemaining=wrapColumn - nameLength - 2;      }      int valueLength=valueString.length();      if (valueLength <= colsRemaining || colsRemaining <= 0) {        buffer.append(valueString);        buffer.append(EOL);      } else {        buffer.append(valueString,0,colsRemaining);        buffer.append(EOL);        int startPos=colsRemaining;        while (valueLength - startPos > wrapColumn - 1) {          buffer.append(" ");          buffer.append(valueString,startPos,startPos + wrapColumn - 1);          buffer.append(EOL);          startPos+=wrapColumn - 1;        }        if (startPos < valueLength) {          buffer.append(" ");          buffer.append(valueString.substring(startPos));          buffer.append(EOL);        }      }    }  }  buffer.append(EOL);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(attrs.size());  Enumeration<Attribute> attrEnum=attrs.elements();  while (attrEnum.hasMoreElements()) {    s.writeObject(attrEnum.nextElement());  }}  }
class C{  public ImageView(Element elem){  super(elem);  fBounds=new Rectangle();  imageObserver=new ImageHandler();  state=RELOAD_FLAG | RELOAD_IMAGE_FLAG;}  }
class C{  public static final byte[] intToBytes(int value,int size){  if (size < 1) {    throw new IllegalArgumentException("The array must be at least of size 1");  }  byte[] result=new byte[size];  int shift=0;  for (int i=size - 1; i >= 0; i--) {    result[i]=(byte)(value >>> shift);    shift+=8;  }  return result;}  }
class C{  public boolean move_drill_item(BrdAbit p_drill_item,PlaVectorInt p_vector,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){  shove_fail_clear();  Collection<BrdItem> contact_list=p_drill_item.get_normal_contacts();  Iterator<BrdItem> it=contact_list.iterator();  while (it.hasNext()) {    BrdItem curr_contact=it.next();    if (curr_contact.get_fixed_state() == ItemFixState.SHOVE_FIXED) {      curr_contact.set_fixed_state(ItemFixState.UNFIXED);    }  }  NetNosList net_no_arr=p_drill_item.net_nos;  changed_area_clear();  if (!move_drill_algo.insert(p_drill_item,p_vector,p_max_recursion_depth,p_max_via_recursion_depth,null)) {    return false;  }  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? net_no_arr : NetNosList.EMPTY;  TimeLimitStoppable t_limit=new TimeLimitStoppable(p_pull_tight_time_limit);  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  childData=child.getData();  assertEquals("characterdataGetDataAssert","Margaret Martin",childData);}  }
class C{  private void fixScaleTrans(){  fixTrans();  matrix.getValues(m);  if (getImageWidth() < viewWidth) {    m[Matrix.MTRANS_X]=(viewWidth - getImageWidth()) / 2;  }  if (getImageHeight() < viewHeight) {    m[Matrix.MTRANS_Y]=(viewHeight - getImageHeight()) / 2;  }  matrix.setValues(m);}  }
class C{  public static boolean isServerMode(){  return Boolean.valueOf(System.getProperty(PROP_SERVER_MODE,getProperty(PROP_SERVER_MODE,"false"))).booleanValue();}  }
class C{  public static boolean isMultipleProtocolSession(HttpServletRequest request,String protocol){  try {    SessionProvider provider=SessionManager.getProvider();    Object session=provider.getSession(request);    return isMultipleProtocolSession(session,protocol);  } catch (  SessionException ex) {    SingleLogoutManager.debug.message("MPUtils.isMPSession?",ex);    return false;  }}  }
class C{  public void addAncestorListener(AncestorListener listener){  AncestorNotifier ancestorNotifier=getAncestorNotifier();  if (ancestorNotifier == null) {    ancestorNotifier=new AncestorNotifier(this);    putClientProperty(JComponent_ANCESTOR_NOTIFIER,ancestorNotifier);  }  ancestorNotifier.addAncestorListener(listener);}  }
class C{  public void registers(SSOToken adminToken,boolean bUseExtUMDS) throws IOException, SMSException, SSOException {  Map map=ServicesDefaultValues.getDefaultValues();  String basedir=(String)map.get(SetupConstants.CONFIG_VAR_BASE_DIR);  String dirXML=basedir + "/config/xml";  (new File(dirXML)).mkdirs();  for (Iterator i=serviceNames.iterator(); i.hasNext(); ) {    String serviceFileName=(String)i.next();    boolean tagswap=true;    if (serviceFileName.startsWith("*")) {      serviceFileName=serviceFileName.substring(1);      tagswap=false;    }    Object[] params={serviceFileName};    SetupProgress.reportStart("emb.registerservice",params);    String strXML=IOUtils.readStream(getClass().getClassLoader().getResourceAsStream(serviceFileName));    String content=strXML;    if (tagswap) {      content=StringUtils.strReplaceAll(content,"@UM_DS_DIRMGRPASSWD@","********");      content=ServicesDefaultValues.tagSwap(content,true);    }    if (tagswap) {      strXML=ServicesDefaultValues.tagSwap(strXML,true);    }    writeToFile(dirXML + "/" + serviceFileName,content);    registerService(strXML,adminToken);    SetupProgress.reportEnd("emb.success",null);  }  if (!bUseExtUMDS) {    addSubConfigForEmbeddedDS(adminToken);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypepublicid01.class,args);}  }
class C{  public QName(String qname,Element namespaceContext,PrefixResolver resolver){  this(qname,namespaceContext,resolver,false);}  }
class C{  public Map(java.util.Map<?,?> map){  super(map);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.AttributedUnsignedLongType createAttributedUnsignedLongType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.AttributedUnsignedLongTypeImpl();}  }
class C{  public JobService delayedCount(String type,Handler<AsyncResult<Long>> handler){  delegate.delayedCount(type,handler);  return this;}  }
class C{  static void filterNonDisclosableMatchedDN(Operation operation){  if (operation.getMatchedDN() == null) {    return;  }  try {    if (!getAccessControlHandler().canDiscloseInformation(null,operation.getMatchedDN(),operation)) {      operation.setMatchedDN(null);    }  } catch (  DirectoryException de) {    logger.traceException(de);    operation.setResponseData(de);    operation.setMatchedDN(null);  }}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (dtdHandler != null) {    dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);  }}  }
class C{  public static void checkVersionMismatch() throws InitializationException {  if (!BuildVersion.binaryVersion().equals(BuildVersion.instanceVersion())) {    throw new InitializationException(ERR_BUILDVERSION_MISMATCH.get(BuildVersion.binaryVersion(),BuildVersion.instanceVersion()));  }}  }
class C{  public void callVisitors(ExpressionOwner owner,XPathVisitor visitor){  m_mainExp.callVisitors(this,visitor);}  }
class C{  public void unregisterKeyboardAction(KeyStroke aKeyStroke){  ActionMap am=getActionMap(false);  for (int counter=0; counter < 3; counter++) {    InputMap km=getInputMap(counter,false);    if (km != null) {      Object actionID=km.get(aKeyStroke);      if (am != null && actionID != null) {        am.remove(actionID);      }      km.remove(aKeyStroke);    }  }}  }
class C{  @JsonIgnore public boolean isNeverExpiring(){  return this.expiryTimeSeconds == Long.MAX_VALUE;}  }
class C{  public RESTEndpointBuilder path(String incoming){  if (StringUtils.isBlank(incoming)) {    return this;  }  if (incoming.startsWith("/")) {    incoming=incoming.substring(1);  }  if (incoming.endsWith("/")) {    incoming=incoming.substring(0,incoming.length() - 1);  }  if (this.path.length() > 0) {    this.path.append("/");  }  this.path.append(incoming);  return this;}  }
class C{  public TimeFieldParser(String timeField){  lexer=new Lexer("charLexer",timeField);}  }
class C{  public org.omg.CORBA.Any to_any(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("to_any",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.to_any();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public SQLFeatureNotSupportedException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  @Override public void log(String message,Throwable exception){  myLogWriter.println(message);  exception.printStackTrace(myLogWriter);}  }
class C{  public DataLengthException(String message){  super(message);}  }
class C{  public DownloadInfo(){}  }
class C{  public static String prepend(final String value,final String... prepends){  return prependArray(value,prepends);}  }
class C{  public void newDataAvailable(TableModelEvent event){  fireTableChanged(event);}  }
class C{  LambdaFormBuffer replaceParameterByNewExpression(int pos,Name binding){  assert (!binding.isParam());  assert (lastIndexOf(binding) < 0);  replaceName(pos,binding);  return this;}  }
class C{  public String chooseEngineServerAlias(String keyType,Principal[] issuers,SSLEngine engine){  return null;}  }
class C{  public WSFederationMetaException(String message){  super(message);}  }
class C{  int size(){  return pendingChanges.size();}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.w3.org/2000/xmlns/";  String localName="local1";  Document doc;  NodeList elementList;  Node testAddress;  NodeList nList;  Node child;  NodeList n2List;  Node child2;  NamedNodeMap attributes;  Node arg;  Node setNode;  int nodeType;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("gender");  testAddress=elementList.item(2);  nList=testAddress.getChildNodes();  child=nList.item(0);  nodeType=(int)child.getNodeType();  if (equals(1,nodeType)) {    child=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",child);  }  n2List=child.getChildNodes();  child2=n2List.item(0);  assertNotNull("notnull",child2);  attributes=child2.getAttributes();  arg=attributes.getNamedItemNS(namespaceURI,localName);{    boolean success=false;    try {      setNode=attributes.setNamedItemNS(arg);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public NSSet(){  set=new LinkedHashSet<NSObject>();}  }
class C{  public AMSearchResults searchRoles(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ROLE),getSearchFilter(AMObject.ROLE),wildcard,avPairs,searchControl);}  }
class C{  public void destroyToken(SSOToken destroyer,SSOToken destroyed) throws SSOException {  getProvider(destroyer).destroyToken(destroyer,destroyed);}  }
class C{  public ObjectIdentifier(int[] oid){  validate(oid);  this.oid=oid;}  }
class C{  public void testDivideRoundUpPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public boolean validate(){  boolean result=true;  if (this.left_triangle == null) {    if (this.start_corner.object != null || this.end_corner.object != null) {      System.out.println("Edge.validate: left triangle may be null only for bounding edges");      result=false;    }  } else {    boolean found=false;    for (int i=0; i < 3; ++i) {      if (left_triangle.edge_lines[i] == this) {        found=true;        break;      }    }    if (!found) {      System.out.println("Edge.validate: left triangle does not contain this edge");      result=false;    }  }  if (this.right_triangle == null) {    if (this.start_corner.object != null || this.end_corner.object != null) {      System.out.println("Edge.validate: right triangle may be null only for bounding edges");      result=false;    }  } else {    boolean found=false;    for (int i=0; i < 3; ++i) {      if (right_triangle.edge_lines[i] == this) {        found=true;        break;      }    }    if (!found) {      System.out.println("Edge.validate: right triangle does not contain this edge");      result=false;    }  }  return result;}  }
class C{  private OctetUtils(){}  }
class C{  public Vector(int initialCapacity,int capacityIncrement){  super();  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  this.elementData=new Object[initialCapacity];  this.capacityIncrement=capacityIncrement;}  }
class C{  void build(String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject){  this.m_namespace=namespace;  this.m_name=name;  this.m_nameAlias=nameAlias;  this.m_elements=elements;  this.m_attributes=attributes;  setElementProcessor(contentHandler);  this.m_classObject=classObject;  if (hasRequired() && m_elements != null) {    int n=m_elements.length;    for (int i=0; i < n; i++) {      XSLTElementDef def=m_elements[i];      if (def != null && def.getRequired()) {        if (m_requiredFound == null)         m_requiredFound=new Hashtable();        m_requiredFound.put(def.getName(),"xsl:" + def.getName());      }    }  }}  }
class C{  public JPopupMenu(){  this(null);}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  public SimpleCountingIdlingResource(@NonNull String resourceName){  mResourceName=resourceName;}  }
class C{  public final AMAccessAuditEventBuilder forHttpServletRequest(HttpServletRequest request){  String clientIpAddress=ClientUtils.getClientIPAddress(request);  String ipAddrHeader=SystemPropertiesManager.get(Constants.CLIENT_IP_ADDR_HEADER);  if (ipAddressHeaderPropertyIsSet(ipAddrHeader) && requestHasIpAddressHeader(request,ipAddrHeader)) {    client(clientIpAddress);  } else {    client(clientIpAddress,request.getRemotePort());  }  server(request.getLocalAddr(),request.getLocalPort());  httpRequest(request.isSecure(),request.getMethod(),request.getRequestURL().toString(),getQueryParametersAsMap(request),getHeadersAsMap(request));  return this;}  }
class C{  public int find(String key){  int len=key.length();  char[] strkey=new char[len + 1];  key.getChars(0,len,strkey,0);  strkey[len]=0;  return find(strkey,0);}  }
class C{  public static Fragment7 newInstance(int sectionNumber){  Fragment7 fragment=new Fragment7();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public MinimalHTMLWriter(Writer w,StyledDocument doc,int pos,int len){  super(w,doc,pos,len);}  }
class C{  public DiskFileItemFactory(){  this(DEFAULT_SIZE_THRESHOLD,null);}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(id).append(", ").append(str).toString();}  }
class C{  public URIReferenceException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  acks++;  if (acks == 5) {    try {      System.out.println("shootme: got an ACK! ");      System.out.println("Dialog State = " + dialog.getState());      SipProvider provider=(SipProvider)requestEvent.getSource();      Request messageRequest=dialog.createRequest(Request.MESSAGE);      CSeqHeader cseq=(CSeqHeader)messageRequest.getHeader(CSeqHeader.NAME);      ClientTransaction ct=provider.getNewClientTransaction(messageRequest);      cseq.setSeqNumber(1);      ct.sendRequest();    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  public void clearParameters(){  if (null == m_params)   return;  m_params.clear();}  }
class C{  public int addPadding(byte[] in,int inOff){  int count=in.length - inOff;  byte code;  if (inOff > 0) {    code=(byte)((in[inOff - 1] & 0x01) == 0 ? 0xff : 0x00);  } else {    code=(byte)((in[in.length - 1] & 0x01) == 0 ? 0xff : 0x00);  }  while (inOff < in.length) {    in[inOff]=code;    inOff++;  }  return count;}  }
class C{  public synchronized boolean isNotificationEnabled(Notification notif) throws IllegalArgumentException {  if (notif == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled",notif);  String ntfType=notif.getType();  Vector<String> enabledTypes=getEnabledTypes();  if (!(enabledTypes.contains(ntfType))) {    RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","Type not selected, exiting");    return false;  }  MBeanServerNotification mbsNtf=(MBeanServerNotification)notif;  ObjectName objName=mbsNtf.getMBeanName();  boolean isSelectedFlg=false;  if (selectedNames != null) {    if (selectedNames.size() == 0) {      RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","No ObjectNames selected, exiting");      return false;    }    isSelectedFlg=selectedNames.contains(objName);    if (!isSelectedFlg) {      RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","ObjectName not in selected list, exiting");      return false;    }  }  if (!isSelectedFlg) {    if (deselectedNames == null) {      RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","ObjectName not selected, and all " + "names deselected, exiting");      return false;    } else     if (deselectedNames.contains(objName)) {      RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","ObjectName explicitly not selected, exiting");      return false;    }  }  RELATION_LOGGER.logp(Level.FINER,MBeanServerNotificationFilter.class.getName(),"isNotificationEnabled","ObjectName selected, exiting");  return true;}  }
class C{  public double function_value_approx(double p_x){  if (line_dir.is_vertical) {    System.out.println("function_value_approx: line is vertical");    return 0;  }  PlaPointFloat p1=point_a.to_float();  PlaPointFloat p2=point_b.to_float();  double dx=p2.v_x - p1.v_x;  double dy=p2.v_y - p1.v_y;  double det=p1.v_x * p2.v_y - p2.v_x * p1.v_y;  double result=(dy * p_x - det) / dx;  return result;}  }
class C{  @AfterClass @Override public void classCleanUp() throws Exception {  callParanoiaCheck=false;  super.classCleanUp();  replicationServer.getChangelogDB().removeDB();  shutdown();  paranoiaCheck();}  }
class C{  @SuppressWarnings("null") private JspPropertyGroup selectProperty(JspPropertyGroup prev,JspPropertyGroup curr){  if (prev == null) {    return curr;  }  if (prev.getExtension() == null) {    return prev;  }  if (curr.getExtension() == null) {    return curr;  }  String prevPath=prev.getPath();  String currPath=curr.getPath();  if (prevPath == null && currPath == null) {    return prev;  }  if (prevPath == null && currPath != null) {    return curr;  }  if (prevPath != null && currPath == null) {    return prev;  }  if (prevPath.length() >= currPath.length()) {    return prev;  }  return curr;}  }
class C{  public void deleteFavorite(){  FmRadioStation.updateStationToDb(mContext,mDlgStationName,FmRadioStation.STATION_TYPE_SEARCHED,mDlgStationFreq);  mAdapter.notifyDataSetChanged();}  }
class C{  public DefaultTableModel(Vector columnNames,int rowCount){  setDataVector(newVector(rowCount),columnNames);}  }
class C{  public RmiAuthenticator(JmxConnectionHandler jmxConnectionHandler){  this.jmxConnectionHandler=jmxConnectionHandler;}  }
class C{  @Override public void schemaChanged(String serviceName,String version){}  }
class C{  private boolean validateProperties() throws PolicyException {  if ((properties == null) || (properties.keySet() == null)) {    throw new PolicyException(ResBundleUtils.rbName,"properties_can_not_be_null_or_empty",null,null);  }  if (DEBUG.messageEnabled()) {    DEBUG.message("LEAuthLevelCondition.setProperties()," + "properties=" + properties);  }  Set keySet=properties.keySet();  if (!keySet.contains(AUTH_LEVEL)) {    String args[]={AUTH_LEVEL};    throw new PolicyException(ResBundleUtils.rbName,"property_value_not_defined",args,null);  }  Iterator keys=keySet.iterator();  while (keys.hasNext()) {    String key=(String)keys.next();    if (!AUTH_LEVEL.equals(key)) {      String args[]={key};      throw new PolicyException(ResBundleUtils.rbName,"attempt_to_set_invalid_property ",args,null);    }  }  Set authLevelSet=(Set)properties.get(AUTH_LEVEL);  if (authLevelSet != null) {    validateAuthLevels(authLevelSet);  }  if (DEBUG.messageEnabled()) {    DEBUG.message("LEAuthLevelCondition.setProperties()," + "authLevel=" + authLevel + ",authRealm="+ authRealm+ ",authLevelInt="+ authLevelInt);  }  return true;}  }
class C{  public static List<Entry> sortHashTable(final Hashtable<?,?> hash,final boolean asc){  final ArrayList<Entry> myArrayList=new ArrayList(hash.entrySet());  Collections.sort(myArrayList,new HashComparator(asc));  return myArrayList;}  }
class C{  public static net.aimeizi.person.Person.Builder newBuilder(){  return new net.aimeizi.person.Person.Builder();}  }
class C{  protected void recalcWidthCache(){  Enumeration enumeration=getColumns();  totalColumnWidth=0;  while (enumeration.hasMoreElements()) {    totalColumnWidth+=((TableColumn)enumeration.nextElement()).getWidth();  }}  }
class C{  public static boolean isAnyBlank(final Set<String> xs){  if (xs == null || xs.isEmpty()) {    return true;  }  for (  String x : xs) {    if (isBlank(x)) {      return true;    }  }  return false;}  }
class C{  public static String encodeForRedirect(final String str){  String classMethod="SAML2Utils.encodeForRedirect: ";  byte[] input;  try {    input=str.getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    debug.error(classMethod + "cannot get byte array: ",uee);    return null;  }  Deflater deflater=new Deflater(Deflater.DEFAULT_COMPRESSION,true);  ByteArrayOutputStream out=new ByteArrayOutputStream();  DeflaterOutputStream deflaterOutputStream=new DeflaterOutputStream(out,deflater);  try {    deflaterOutputStream.write(input);  } catch (  IOException e) {    debug.error(classMethod + "There was a problem compressing the input",e);    return null;  } finally {    IOUtils.closeIfNotNull(deflaterOutputStream);  }  String encoded=URLEncDec.encode(Base64.encode(out.toByteArray()));  if (debug.messageEnabled()) {    debug.message(classMethod + "out string length : " + encoded.length());    debug.message(classMethod + "out string is ===>" + encoded+ "<===");  }  return encoded;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    logger.info("shootme: got an Invite sending OK");    Response response=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      logger.info("This is a RE INVITE ");      ReInviteAllowInterleavingTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);    }    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    ReInviteAllowInterleavingTest.fail(s);  }}  }
class C{  public ParameterMap(){  super();}  }
class C{  public void ifPresent(Consumer<? super T> consumer){  if (value != null)   consumer.accept(value);}  }
class C{  public LDAPListener(final int port,final ServerConnectionFactory<LDAPClientContext,Integer> factory) throws IOException {  this(port,factory,Options.defaultOptions());}  }
class C{  public GZIPOutputStream(OutputStream out,int size,boolean syncFlush) throws IOException {  super(out,new Deflater(Deflater.DEFAULT_COMPRESSION,true),size,syncFlush);  usesDefaultDeflater=true;  writeHeader();  crc.reset();}  }
class C{  private void initializeSASLMechanisms() throws ConfigException, InitializationException {  saslConfigManager=new SASLConfigManager(serverContext);  saslConfigManager.initializeSASLMechanismHandlers();}  }
class C{  public BasicListHeaderIterator(List headers,String name){  if (headers == null) {    throw new IllegalArgumentException("Header list must not be null.");  }  this.allHeaders=headers;  this.headerName=name;  this.currentIndex=findNext(-1);  this.lastIndex=-1;}  }
class C{  public JKHttpException(){  super();}  }
class C{  public boolean isSerializing(){  return serializing;}  }
class C{  public void mergeWith(PropertyOptions options) throws XMPException {  if (options != null) {    setOptions(getOptions() | options.getOptions());  }}  }
class C{  public INITIALIZE(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public RSAPublicKeySpec(BigInteger modulus,BigInteger publicExponent){  this.modulus=modulus;  this.publicExponent=publicExponent;}  }
class C{  public boolean isIPAddress(){  return addressType != HOSTNAME;}  }
class C{  @Override public StringBuffer format(double value,StringBuffer buffer,FieldPosition field){  for (int i=choiceLimits.length - 1; i >= 0; i--) {    if (choiceLimits[i] <= value) {      return buffer.append(choiceFormats[i]);    }  }  return choiceFormats.length == 0 ? buffer : buffer.append(choiceFormats[0]);}  }
class C{  public void testValueOfNegScalePos(){  long a=-98374823947823578L;  int scale=12;  BigDecimal aNumber=BigDecimal.valueOf(a,scale);  String result="-98374.823947823578";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  public boolean isContinuousLayout(){  return continuousLayout;}  }
class C{  public boolean add(Object o){  if (!list.contains(o)) {    list.add(o);    return true;  }  return false;}  }
class C{  private List<Record<Integer,Integer>> records(int... keys){  List<Record<Integer,Integer>> records=new ArrayList<>();  for (  int key : keys) {    records.add(Record.from(key,key));  }  return records;}  }
class C{  @Override public void firePropertyChange(String propertyName,int oldValue,int newValue){}  }
class C{  private ByteString unixCryptEncodePassword(ByteSequence plaintext) throws DirectoryException {  byte[] plaintextBytes=null;  byte[] digestBytes;  try {    plaintextBytes=plaintext.toByteArray();    digestBytes=crypt.crypt(plaintextBytes,randomSalt());  } catch (  Exception e) {    LocalizableMessage message=ERR_PWSCHEME_CANNOT_ENCODE_PASSWORD.get(CLASS_NAME,stackTraceToSingleLineString(e));    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);  } finally {    if (plaintextBytes != null) {      Arrays.fill(plaintextBytes,(byte)0);    }  }  return ByteString.wrap(digestBytes);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  java.io.ObjectInputStream.GetField fields=s.readFields();  content=((byte[])fields.get("content",null)).clone();  signature=((byte[])fields.get("signature",null)).clone();  thealgorithm=(String)fields.get("thealgorithm",null);}  }
class C{  public Entry readEntry(boolean checkSchema) throws IOException, LDIFException {  while (true) {    LinkedList<StringBuilder> lines=readEntryLines();    if (lines == null) {      return null;    }    lastEntryBodyLines=lines;    lastEntryHeaderLines=new LinkedList<>();    DN entryDN=readDN(lines);    if (entryDN == null) {      continue;    }    entriesRead.incrementAndGet();    Pair<Boolean,LocalizableMessage> includeResult=importConfig.includeEntry(entryDN);    if (!includeResult.getFirst()) {      logToSkipWriter(lines,includeResult.getSecond());      continue;    }    final Entry entry=createEntry(entryDN,lines,checkSchema);    if (!isIncludedInImport(entry,lines) || !invokeImportPlugins(entry,lines)) {      continue;    }    validateAgainstSchemaIfNeeded(checkSchema,entry,lines);    return entry;  }}  }
class C{  private Policy privilegeToPolicy(PolicyManager pm,DelegationPrivilege priv,String orgName) throws DelegationException {  try {    String prefix=null;    if (orgName != null) {      prefix=orgName.toLowerCase() + NAME_DELIMITER;      prefix=prefix.replace(',',REPLACEMENT_FOR_COMMA);    } else {      prefix=NAME_DELIMITER;    }    String name=prefix + priv.getName();    Policy policy=new Policy(name);    Set permissions=priv.getPermissions();    if ((permissions != null) && (!permissions.isEmpty())) {      Iterator pmit=permissions.iterator();      int seqNum=0;      while (pmit.hasNext()) {        DelegationPermission perm=(DelegationPermission)pmit.next();        String resourceName=getResourceName(perm);        Map actions=new HashMap();        Set permActions=perm.getActions();        if (permActions != null) {          Set values=new HashSet();          values.add(ACTION_ALLOW);          Iterator it=permActions.iterator();          while (it.hasNext()) {            String actionName=(String)it.next();            actions.put(actionName,values);          }        }        String ruleName=DELEGATION_RULE;        if (seqNum != 0) {          ruleName+=seqNum;        }        Rule rule=new Rule(ruleName,DelegationManager.DELEGATION_SERVICE,resourceName,actions);        policy.addRule(rule);        seqNum++;      }    }    Set sv=new HashSet(priv.getSubjects());    if ((sv != null) && (sv.contains(AUTHN_USERS_ID))) {      Subject allauthNUsers=pm.getSubjectTypeManager().getSubject(AUTHENTICATED_USERS_SUBJECT);      policy.addSubject(DELEGATION_AUTHN_USERS,allauthNUsers);      sv.remove(AUTHN_USERS_ID);    }    if ((sv != null) && (!sv.isEmpty())) {      Subject subject=pm.getSubjectTypeManager().getSubject(POLICY_SUBJECT);      subject.setValues(sv);      policy.addSubject(DELEGATION_SUBJECT,subject);    }    return policy;  } catch (  Exception e) {    DelegationManager.debug.error("unable to convert a privilege to a policy",e);    throw new DelegationException(e);  }}  }
class C{  private void disableWindowsService() throws ApplicationException {  notifyListeners(getFormattedWithPoints(INFO_PROGRESS_DISABLING_WINDOWS_SERVICE.get()));  int code=disableService(System.out,System.err);switch (code) {case SERVICE_DISABLE_SUCCESS:case SERVICE_ALREADY_DISABLED:    break;default :  LocalizableMessage errorMessage=INFO_ERROR_DISABLING_WINDOWS_SERVICE.get(getInstallationPath());throw new ApplicationException(ReturnCode.WINDOWS_SERVICE_ERROR,errorMessage,null);}notifyListeners(getLineBreak());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addrList;  Node addrNode;  boolean state;  doc=(Document)load("staff",false);  addrList=doc.getElementsByTagName("name");  addrNode=addrList.item(0);  state=addrNode.hasAttributes();  assertFalse("throw_False",state);}  }
class C{  public LongMap(){  this(32,0.8f);}  }
class C{  public static String trim(CharSequence s){  if (s == null) {    return null;  }  Matcher m=sTrimPattern.matcher(s);  return m.replaceAll("$1");}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(Math.max(2,size + 1));  for (int i=0; i < size; i++)   s.writeObject(queue[i]);}  }
class C{  public CompareResponseProtocolOp(int resultCode,LocalizableMessage errorMessage){  this.resultCode=resultCode;  this.errorMessage=errorMessage;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.AllElement createAllElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.AllElementImpl();}  }
class C{  private static void readLSD(GifParameters gif) throws java.io.IOException {  gif.image.setLogicalWidth(readShort(gif));  gif.image.setLogicalHeight(readShort(gif));  int packed=gif.input.read();  gif.gctFlag=(packed & 0x80) != 0;  gif.m_gbpc=(packed & 7) + 1;  gif.bgIndex=gif.input.read();  gif.pixelAspect=gif.input.read();}  }
class C{  public static int calculateShadowColorRightBottom(int baseColor){  return Color.rgb((int)(Color.red(baseColor) * 193f / 214),(int)(Color.green(baseColor) * 219f / 230),(int)(Color.blue(baseColor) * 93f / 133));}  }
class C{  public NullWriter(){}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_CACHE_ENTITY'";  db.execSQL(sql);}  }
class C{  public URIReferenceException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  public Set createRoles(Map roles) throws AMException, SSOException {  Iterator iter=roles.keySet().iterator();  Set result=new HashSet();  while (iter.hasNext()) {    String roleName=(String)iter.next();    String roleDN=AMNamingAttrManager.getNamingAttr(ROLE) + "=" + roleName+ ","+ super.entryDN;    Map attributes=(Map)roles.get(roleName);    AMRoleImpl roleImpl=new AMRoleImpl(super.token,roleDN);    Set aciSet=new HashSet();    if (!attributes.isEmpty()) {      aciSet=(Set)attributes.remove("iplanet-am-role-aci-list");    }    if ((aciSet != null) && (!aciSet.isEmpty())) {      Iterator iter2=aciSet.iterator();      Set newAciSet=new HashSet();      while (iter2.hasNext()) {        String acis=(String)iter2.next();        StringTokenizer stz=new StringTokenizer(acis,"##");        while (stz.hasMoreTokens()) {          newAciSet.add(stz.nextToken());        }      }      attributes.put("iplanet-am-role-aci-list",replaceAciListMacros(newAciSet,roleDN,entryDN,null,null));    }    roleImpl.setAttributes(attributes);    roleImpl.create();    result.add(roleImpl);  }  return result;}  }
class C{  public void testPutEntry() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  cache.putEntry(testEntriesList.get(0),b,1);  assertNotNull(cache.getEntry(testEntriesList.get(0).getName()),"Expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  assertNotNull(cache.getEntry(b,1),"Expected to find entry id " + -1 + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  @Override public String toString(){  return "[SSLServerSocketImpl]";}  }
class C{  public void endDocument() throws SAXException {  charactersFlush();  m_nextsib.setElementAt(NULL,m_currentDocumentNode);  if (m_firstch.elementAt(m_currentDocumentNode) == NOTPROCESSED)   m_firstch.setElementAt(NULL,m_currentDocumentNode);  if (DTM.NULL != m_previous)   m_nextsib.setElementAt(DTM.NULL,m_previous);  m_parents=null;  m_prefixMappings=null;  m_contextIndexes=null;  m_currentDocumentNode=NULL;  m_endDocumentOccured=true;}  }
class C{  private void updateTriggerInRepo(String group,String name,TriggerWrapper tw,String rev) throws JobPersistenceException {synchronized (lock) {    try {      if (logger.isTraceEnabled()) {        logger.trace("Getting trigger {}",getTriggersRepoId(group,name));      }      String repoId=getTriggersRepoId(group,name);      UpdateRequest r=Requests.newUpdateRequest(repoId,tw.getValue());      r.setRevision(rev);      getRepositoryService().update(r);    } catch (    ResourceException e) {      logger.warn("Error updating trigger in repo",e);      throw new JobPersistenceException("Error updating trigger in repo",e);    }  }}  }
class C{  public TriggerWrapper(final Trigger trigger,final boolean paused,final boolean acquired,final String nodeId) throws JobPersistenceException {  this(trigger.getName(),trigger.getGroup(),RepoJobStoreUtils.serialize(trigger),paused,acquired,nodeId);}  }
class C{  protected void emptyTag(Element elem) throws BadLocationException, IOException {  if (!inContent && !inPre) {    indentSmart();  }  AttributeSet attr=elem.getAttributes();  closeOutUnwantedEmbeddedTags(attr);  writeEmbeddedTags(attr);  if (matchNameAttribute(attr,HTML.Tag.CONTENT)) {    inContent=true;    text(elem);  } else   if (matchNameAttribute(attr,HTML.Tag.COMMENT)) {    comment(elem);  } else {    boolean isBlock=isBlockTag(elem.getAttributes());    if (inContent && isBlock) {      writeLineSeparator();      indentSmart();    }    Object nameTag=(attr != null) ? attr.getAttribute(StyleConstants.NameAttribute) : null;    Object endTag=(attr != null) ? attr.getAttribute(HTML.Attribute.ENDTAG) : null;    boolean outputEndTag=false;    if (nameTag != null && endTag != null && (endTag instanceof String) && endTag.equals("true")) {      outputEndTag=true;    }    if (completeDoc && matchNameAttribute(attr,HTML.Tag.HEAD)) {      if (outputEndTag) {        writeStyles(((HTMLDocument)getDocument()).getStyleSheet());      }      wroteHead=true;    }    write('<');    if (outputEndTag) {      write('/');    }    write(elem.getName());    writeAttributes(attr);    write('>');    if (matchNameAttribute(attr,HTML.Tag.TITLE) && !outputEndTag) {      Document doc=elem.getDocument();      String title=(String)doc.getProperty(Document.TitleProperty);      write(title);    } else     if (!inContent || isBlock) {      writeLineSeparator();      if (isBlock && inContent) {        indentSmart();      }    }  }}  }
class C{  Iter(){  while ((next=findFirst()) != null) {    Object x=next.value;    if (x != null && x != next) {      @SuppressWarnings("unchecked") V vv=(V)x;      nextValue=vv;      break;    }  }}  }
class C{  public void removeLanguage(final int index){  this.languages.remove(index);}  }
class C{  protected void processAttribute(java.io.Writer writer,String name,String value,ElemDesc elemDesc) throws IOException {  writer.write(' ');  if (((value.length() == 0) || value.equalsIgnoreCase(name)) && elemDesc != null && elemDesc.isAttrFlagSet(name,ElemDesc.ATTREMPTY)) {    writer.write(name);  } else {    writer.write(name);    writer.write("=\"");    if (elemDesc != null && elemDesc.isAttrFlagSet(name,ElemDesc.ATTRURL))     writeAttrURI(writer,value,m_specialEscapeURLs); else     writeAttrString(writer,value,this.getEncoding());    writer.write('"');  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>Iterator<T> emptyIterator(){  return (Iterator<T>)EMPTY_ITERATOR;}  }
class C{  public static JKPrivilige createPrivilige(String name,JKPrivilige parent){  return createPrivilige(name,parent,0);}  }
class C{  public OutputProperties(){  this(org.apache.xml.serializer.Method.XML);}  }
class C{  public static Foo findByUuid_First(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_First(uuid,orderByComparator);}  }
class C{  public static boolean isXML11ValidLiteral(int c){  return ((c < 0x10000 && ((XML11CHARS[c] & MASK_XML11_VALID) != 0 && (XML11CHARS[c] & MASK_XML11_CONTROL) == 0)) || (0x10000 <= c && c <= 0x10FFFF));}  }
class C{  public void addPluginInterface(String interfaceName,String interfaceClass,String i18nKey) throws SMSException, SSOException {  SMSEntry.validateToken(token);  validateServiceSchemaManagerImpl();  if ((interfaceName == null) || (interfaceClass == null)) {    throw (new IllegalArgumentException());  }  StringBuilder sb=new StringBuilder(100);  sb.append("<").append(SMSUtils.PLUGIN_INTERFACE).append(" ").append(SMSUtils.NAME).append("=\"").append(interfaceName).append("\" ").append(SMSUtils.PLUGIN_INTERFACE_CLASS).append("=\"").append(interfaceClass).append("\"");  if (i18nKey != null) {    sb.append(" ").append(SMSUtils.I18N_KEY).append("=\"").append(i18nKey).append("\"");  }  sb.append("></").append(SMSUtils.PLUGIN_INTERFACE).append(">");  Document pluginDoc=SMSSchema.getXMLDocument(sb.toString(),false);  Node node=XMLUtils.getRootNode(pluginDoc,SMSUtils.PLUGIN_INTERFACE);  Document schemaDoc=ssm.getDocumentCopy();  Node pluginNode=schemaDoc.importNode(node,true);  Node schemaNode=XMLUtils.getRootNode(schemaDoc,SMSUtils.SCHEMA);  schemaNode.appendChild(pluginNode);  replaceSchema(schemaDoc);}  }
class C{  public void testFlipBitNegativeInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=15;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,92,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private boolean handleRuleStart(ParserRule checkRule){  if (null == checkRule.upHashChars) {    if (checkRule.upHashChar != null && (pos + checkRule.upHashChar.length < line.array.length) && !checkHashString(checkRule)) {      return false;    }  } else {    if (-1 == Arrays.binarySearch(checkRule.upHashChars,Character.toUpperCase(line.array[pos]))) {      return false;    }  }  int offset=(checkRule.action & ParserRule.MARK_PREVIOUS) != 0 ? lastOffset : pos;  if (!offsetMatches(offset,checkRule.startPosMatch)) {    return false;  }  int matchedChars;  Matcher match=null;  if ((checkRule.action & ParserRule.REGEXP) == 0) {    pattern.array=checkRule.start;    pattern.offset=0;    pattern.count=pattern.array.length;    matchedChars=pattern.count;    if (!SyntaxUtilities.regionMatches(context.rules.getIgnoreCase(),line,pos,pattern.array)) {      return false;    }  } else {    CharSequence charSeq=new SegmentCharSequence(line,pos - line.offset,line.count - (pos - line.offset));    match=checkRule.startRegexp.matcher(charSeq);    if (!match.lookingAt()) {      return false;    } else     if (match.start() != 0) {      throw new InternalError("Can't happen");    } else {      matchedChars=match.end();      if (matchedChars == 0)       matchedChars=1;    }  }  if ((checkRule.action & ParserRule.IS_ESCAPE) == ParserRule.IS_ESCAPE) {    pos+=pattern.count;  } else {    if (context.inRule != null)     handleRuleEnd(context.inRule);    markKeyword((checkRule.action & ParserRule.MARK_PREVIOUS) != ParserRule.MARK_PREVIOUS);switch (checkRule.action & ParserRule.MAJOR_ACTIONS) {case ParserRule.SEQ:      context.spanEndSubst=null;    context.spanEndSubstRegex=null;  if ((checkRule.action & ParserRule.REGEXP) != 0) {    handleTokenWithSpaces(tokenHandler,checkRule.token,pos - line.offset,matchedChars,context);  } else {    tokenHandler.handleToken(line,checkRule.token,pos - line.offset,matchedChars,context);  }if (checkRule.delegate != null) {  context=new LineContext(checkRule.delegate,context.parent);  keywords=context.rules.getKeywords();}break;case ParserRule.SPAN:case ParserRule.EOL_SPAN:context.setInRule(checkRule);byte tokenType=matchToken(checkRule,context.inRule,context);if ((checkRule.action & ParserRule.REGEXP) != 0) {handleTokenWithSpaces(tokenHandler,tokenType,pos - line.offset,matchedChars,context);} else {tokenHandler.handleToken(line,tokenType,pos - line.offset,matchedChars,context);}char[] spanEndSubst=null;Pattern spanEndSubstRegex=null;if (match != null && match.groupCount() > 0) {if (checkRule.end != null) {spanEndSubst=substitute(match,checkRule.end,false);} else if (checkRule.endRegexp != null) {char[] pattern=checkRule.endRegexp.pattern().toCharArray();pattern=substitute(match,pattern,true);spanEndSubstRegex=Pattern.compile(new String(pattern));}}context.spanEndSubst=spanEndSubst;context.spanEndSubstRegex=spanEndSubstRegex;context=new LineContext(checkRule.delegate,context);keywords=context.rules.getKeywords();break;case ParserRule.MARK_FOLLOWING:tokenHandler.handleToken(line,matchToken(checkRule,checkRule,context),pos - line.offset,pattern.count,context);context.spanEndSubst=null;context.spanEndSubstRegex=null;context.setInRule(checkRule);break;case ParserRule.MARK_PREVIOUS:context.spanEndSubst=null;context.spanEndSubstRegex=null;if (pos != lastOffset) {tokenHandler.handleToken(line,checkRule.token,lastOffset - line.offset,pos - lastOffset,context);}tokenHandler.handleToken(line,matchToken(checkRule,checkRule,context),pos - line.offset,pattern.count,context);break;default :throw new InternalError("Unhandled major action");}pos+=matchedChars - 1;lastOffset=pos + 1;}return true;}  }
class C{  public void revalidate(){}  }
class C{  final void deregisterRelationDefinition(RelationDefinition<?,?> d){  String relName=d.getName();  relationDefinitions.remove(relName);  allRelationDefinitions.remove(relName);  d.getChildDefinition().reverseRelationDefinitions.remove(d);}  }
class C{  public R visitClass(ClassPropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,BlockCipherPadding padding){  this(cipher,(cipher.getBlockSize() * 8) / 2,padding);}  }
class C{  @Override public void scan(JarScanType scanType,ServletContext context,JarScannerCallback callback){  if (log.isTraceEnabled()) {    log.trace(sm.getString("jarScan.webinflibStart"));  }  Set<URL> processedURLs=new HashSet<>();  Set<String> dirList=context.getResourcePaths(Constants.WEB_INF_LIB);  if (dirList != null) {    Iterator<String> it=dirList.iterator();    while (it.hasNext()) {      String path=it.next();      if (path.endsWith(Constants.JAR_EXT) && getJarScanFilter().check(scanType,path.substring(path.lastIndexOf('/') + 1))) {        if (log.isDebugEnabled()) {          log.debug(sm.getString("jarScan.webinflibJarScan",path));        }        URL url=null;        try {          url=context.getResource(path);          processedURLs.add(url);          process(scanType,callback,url,path,true,null);        } catch (        IOException e) {          log.warn(sm.getString("jarScan.webinflibFail",url),e);        }      } else {        if (log.isTraceEnabled()) {          log.trace(sm.getString("jarScan.webinflibJarNoScan",path));        }      }    }  }  try {    URL webInfURL=context.getResource(Constants.WEB_INF_CLASSES);    if (webInfURL != null) {      processedURLs.add(webInfURL);      if (isScanAllDirectories()) {        URL url=context.getResource(Constants.WEB_INF_CLASSES + "/META-INF");        if (url != null) {          try {            callback.scanWebInfClasses();          } catch (          IOException e) {            log.warn(sm.getString("jarScan.webinfclassesFail"),e);          }        }      }    }  } catch (  MalformedURLException e) {  }  if (isScanClassPath()) {    if (log.isTraceEnabled()) {      log.trace(sm.getString("jarScan.classloaderStart"));    }    ClassLoader stopLoader=null;    if (!isScanBootstrapClassPath()) {      stopLoader=ClassLoader.getSystemClassLoader().getParent();    }    ClassLoader classLoader=context.getClassLoader();    boolean isWebapp=true;    while (classLoader != null && classLoader != stopLoader) {      if (classLoader instanceof URLClassLoader) {        if (isWebapp) {          isWebapp=isWebappClassLoader(classLoader);        }        Deque<URL> classPathUrlsToProcess=new LinkedList<>();        classPathUrlsToProcess.addAll(Arrays.asList(((URLClassLoader)classLoader).getURLs()));        while (!classPathUrlsToProcess.isEmpty()) {          URL url=classPathUrlsToProcess.pop();          if (processedURLs.contains(url)) {            continue;          }          ClassPathEntry cpe=new ClassPathEntry(url);          if ((cpe.isJar() || scanType == JarScanType.PLUGGABILITY || isScanAllDirectories()) && getJarScanFilter().check(scanType,cpe.getName())) {            if (log.isDebugEnabled()) {              log.debug(sm.getString("jarScan.classloaderJarScan",url));            }            try {              processedURLs.add(url);              process(scanType,callback,url,null,isWebapp,classPathUrlsToProcess);            } catch (            IOException ioe) {              log.warn(sm.getString("jarScan.classloaderFail",url),ioe);            }          } else {            if (log.isTraceEnabled()) {              log.trace(sm.getString("jarScan.classloaderJarNoScan",url));            }          }        }      }      classLoader=classLoader.getParent();    }  }}  }
class C{  private void installClientDecorations(JRootPane root){  installBorder(root);  JComponent titlePane=createTitlePane(root);  setTitlePane(root,titlePane);  installWindowListeners(root,root.getParent());  installLayout(root);  if (window != null) {    root.revalidate();    root.repaint();  }}  }
class C{  public boolean seek(ByteBuffer byteBuffer){  byte[] buffer=new byte[FIELD_TAGID_LENGTH];  byteBuffer.get(buffer,0,FIELD_TAGID_LENGTH);  if (!(Arrays.equals(buffer,TAG_ID))) {    return false;  }  byteBuffer.position(FIELD_TRACK_INDICATOR_POS);  if (byteBuffer.get() != END_OF_FIELD) {    return false;  }  return byteBuffer.get() != END_OF_FIELD;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.AutomaticPseudonymsElement createAutomaticPseudonymsElement(boolean value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AutomaticPseudonymsElementImpl(value);}  }
class C{  public void ReInit(SimpleCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  public void error(String msg,Throwable t){  getDebugServiceInstance().error(msg,t);}  }
class C{  public static NodeIterator selectNodeIterator(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodeset();}  }
class C{  public void transform(Source xmlSource,Result outputTarget) throws TransformerException {  transform(xmlSource,outputTarget,true);}  }
class C{  public boolean accept(File file){  return false;}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  private String fieldParamComment(Field field,String paramComment){  String commentType=fieldTypeCardinalityComment(field);  String comment=String.format("@param %s [%s]",wrapIfKeywordOrBuiltIn(field.getSimpleName()),commentType);  if (paramComment == null) {    paramComment=DocumentationUtil.getScopedDescription(field);  }  if (!Strings.isNullOrEmpty(paramComment)) {    paramComment=RDocCommentFixer.rdocify(paramComment);    comment+="\n  " + paramComment.replaceAll("(\\r?\\n)","\n  ");  }  return comment + "\n";}  }
class C{  private static byte[] xor(byte[] password){  if (password != null) {    int len=password.length;    byte[] retPassword=new byte[len];    for (int i=0; i < len; i++) {      retPassword[i]=(byte)(password[i] ^ 1);    }    return retPassword;  } else {    return null;  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.QueryResponseType.DataType createQueryResponseTypeDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.QueryResponseTypeImpl.DataTypeImpl();}  }
class C{  public int next(){  final int node=_currentNode;  if (node != NULL) {    _currentNode=getNextAttributeIdentity(node);    return returnNode(makeNodeHandle(node));  }  return NULL;}  }
class C{  private void processSessionResponseException(Session session,SessionResponse sres) throws SessionException {  try {    String exceptionMessage=sres.getException();    sessionDebug.message("Session. processSessionResponseException: exception received  from server:{}",sres.getException());    if (exceptionMessage.contains("SessionTimedOutException")) {      session.timeout();    }    if (exceptionMessage.contains(SessionBundle.getString("appTokenInvalid"))) {      sessionDebug.message("Requests.processSessionResponseException: AppTokenInvalid = TRUE");      if (!SystemProperties.isServerMode()) {        sessionDebug.message("Requests.processSessionResponseException: Destroying AppToken");        AdminTokenAction.invalid();        RestrictedTokenContext.clear();        sessionDebug.warning("Requests.processSessionResponseException: server responded with app " + "token invalid error, refetching the app sso token");        SSOToken newAppSSOToken=AccessController.doPrivileged(AdminTokenAction.getInstance());        sessionDebug.message("Requests.processSessionResponseException: creating New AppToken TokenID = {}",newAppSSOToken);        session.createContext(newAppSSOToken);      } else {        sessionDebug.message("Requests.processSessionResponseException: AppToken invalid in server mode; " + "throwing exception");        RestrictedTokenContext.clear();        throw new SessionException(sres.getException());      }    } else {      throw new SessionException(sres.getException());    }  } catch (  Exception ex) {    throw new SessionException(ex);  }}  }
class C{  public void moveToFront(){  if (isIcon()) {    if (getDesktopIcon().getParent() instanceof JLayeredPane) {      ((JLayeredPane)getDesktopIcon().getParent()).moveToFront(getDesktopIcon());    }  } else   if (getParent() instanceof JLayeredPane) {    ((JLayeredPane)getParent()).moveToFront(this);  }}  }
class C{  public ListBuffer<A> appendList(final ListBuffer<A> xs){  return appendList(xs.toList());}  }
class C{  private void checkThreadLocalMapForLeaks(Object map,Field internalTableField) throws IllegalAccessException, NoSuchFieldException {  if (map != null) {    Object[] table=(Object[])internalTableField.get(map);    if (table != null) {      for (int j=0; j < table.length; j++) {        Object obj=table[j];        if (obj != null) {          boolean keyLoadedByWebapp=false;          boolean valueLoadedByWebapp=false;          Object key=((Reference<?>)obj).get();          if (this.equals(key) || loadedByThisOrChild(key)) {            keyLoadedByWebapp=true;          }          Field valueField=obj.getClass().getDeclaredField("value");          valueField.setAccessible(true);          Object value=valueField.get(obj);          if (this.equals(value) || loadedByThisOrChild(value)) {            valueLoadedByWebapp=true;          }          if (keyLoadedByWebapp || valueLoadedByWebapp) {            Object[] args=new Object[5];            args[0]=getContextName();            if (key != null) {              args[1]=getPrettyClassName(key.getClass());              try {                args[2]=key.toString();              } catch (              Exception e) {                log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaks.badKey",args[1]),e);                args[2]=sm.getString("webappClassLoader.checkThreadLocalsForLeaks.unknown");              }            }            if (value != null) {              args[3]=getPrettyClassName(value.getClass());              try {                args[4]=value.toString();              } catch (              Exception e) {                log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaks.badValue",args[3]),e);                args[4]=sm.getString("webappClassLoader.checkThreadLocalsForLeaks.unknown");              }            }            if (valueLoadedByWebapp) {              log.error(sm.getString("webappClassLoader.checkThreadLocalsForLeaks",args));            } else             if (value == null) {              if (log.isDebugEnabled()) {                log.debug(sm.getString("webappClassLoader.checkThreadLocalsForLeaksNull",args));              }            } else {              if (log.isDebugEnabled()) {                log.debug(sm.getString("webappClassLoader.checkThreadLocalsForLeaksNone",args));              }            }          }        }      }    }  }}  }
class C{  public CompositeContext createContext(ColorModel srcColorModel,ColorModel dstColorModel,RenderingHints hints){  return new SunCompositeContext(this,srcColorModel,dstColorModel);}  }
class C{  public boolean containsSelectAccount(){  return prompts.contains(PROMPT_SELECT_ACCOUNT);}  }
class C{  private void updateSchemaFile(SchemaElement schemaElement) throws OpenDsException {  String schemaFile=getSchemaFile(schemaElement);  try (LDIFExportConfig exportConfig=new LDIFExportConfig(schemaFile,OVERWRITE);LDIFReader reader=new LDIFReader(new LDIFImportConfig(schemaFile))){    Entry schemaEntry=reader.readEntry();    Modification mod=new Modification(ModificationType.DELETE,Attributes.create(getAttributeConfigName(schemaElement),getSchemaFileAttributeValue(schemaElement)));    schemaEntry.applyModification(mod);    try (LDIFWriter writer=new LDIFWriter(exportConfig)){      writer.writeEntry(schemaEntry);      exportConfig.getWriter().newLine();    }   } catch (  IOException e) {    throw new OfflineUpdateException(ERR_CTRL_PANEL_ERROR_UPDATING_SCHEMA.get(e),e);  }}  }
class C{  public void paintMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public StringToIntTable(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new String[blocksize];  m_values=new int[m_blocksize];}  }
class C{  public boolean isTopDown(){  return topDown;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  if (jdate == null) {    jdate=jcal.newCalendarDate(getZone());    cachedFixedDate=Long.MIN_VALUE;  }}  }
class C{  public ReedSolomonGenerator(int degree){  if (degree < 1 || degree > 255)   throw new IllegalArgumentException("Degree out of range");  coefficients=new byte[degree];  coefficients[degree - 1]=1;  int root=1;  for (int i=0; i < degree; i++) {    for (int j=0; j < coefficients.length; j++) {      coefficients[j]=(byte)multiply(coefficients[j] & 0xFF,root);      if (j + 1 < coefficients.length)       coefficients[j]^=coefficients[j + 1];    }    root=(root << 1) ^ ((root >>> 7) * 0x11D);  }}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public void removeMethod(){  if (uriParms != null)   uriParms.delete(METHOD);}  }
class C{  protected void handleExpandControlClick(TreePath path,int mouseX,int mouseY){  toggleExpandState(path);}  }
class C{  public void addSetProperties(String pattern){  addRule(pattern,new SetPropertiesRule());}  }
class C{  public static StringArgument usePKCS12KeyStoreArgument() throws ArgumentException {  return StringArgument.builder("usePkcs12keyStore").description(INFO_ARGUMENT_DESCRIPTION_USE_PKCS12.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildArgument();}  }
class C{  public void updateReadTime(long time){  if (time > 0 && time < readTimeMin) {    readTimeMin=time;  }  if (time > readTimeMax) {    readTimeMax=time;  }  readCumulativeCount+=time;  readTimeAverage=readCumulativeCount / totalReads;}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new OutputLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    bufOff=0;    len-=gapLen;    inOff+=gapLen;    while (len > buf.length) {      resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  public FrameBodyTIPL(){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);}  }
class C{  public static Attribute create(AttributeType attributeType,String name,ByteString value){  return AttributeBuilder.create(attributeType,name,Collections.singleton(value));}  }
class C{  private ReplicationServerCfg createReplicationServerConfigWithNewWeight(int rsIndex,int weight,String testCase){  SortedSet<String> replServers=new TreeSet<>();  if ("testFailoversAndWeightChanges".equals(testCase) || "testSpreadLoad".equals(testCase)) {    for (int i=0; i < NRS; i++) {      if (i != rsIndex) {        replServers.add("localhost:" + rsPort[i]);      }    }  } else {    fail("Unknown test case: " + testCase);  }  String dir="replicationServerLoadBalancingTest" + rsIndex + testCase+ "Db";  return new ReplServerFakeConfiguration(rsPort[rsIndex],dir,0,rsIndex + 501,0,100,replServers,1,1000,5000,weight);}  }
class C{  public void addBitrateRecord(final int streamNum,final long averageBitrate){  this.streamNumbers.add(streamNum);  this.bitRates.add(averageBitrate);}  }
class C{  private void handleClientConnection() throws Exception {  debugInfo("handleClientConnection " + testcase + " "+ scenario);  if (!performHandshake()) {    session.close();    return;  }  handshakeOk=true;switch (scenario) {case NOT_ASSURED_SCENARIO:    executeNotAssuredScenario();  break;case TIMEOUT_SCENARIO:executeTimeoutScenario();break;case NO_TIMEOUT_SCENARIO:executeNoTimeoutScenario();break;case SAFE_READ_MANY_ERRORS:executeSafeReadManyErrorsScenario();break;case SAFE_DATA_MANY_ERRORS:executeSafeDataManyErrorsScenario();break;case NO_READ:while (!shutdown) {try {sleep(5000);} catch (InterruptedException ex) {break;}}break;default :fail("Unknown scenario: " + scenario);}debugInfo("handleClientConnection " + testcase + " "+ scenario+ " done");}  }
class C{  public synchronized Enumeration elements(){  return new Enumerator(VALUES,false);}  }
class C{  private boolean processCompareRequest(LDAPMessage message,List<Control> controls){  if (ldapVersion == 2 && !controls.isEmpty()) {    CompareResponseProtocolOp responseOp=new CompareResponseProtocolOp(LDAPResultCode.PROTOCOL_ERROR,ERR_LDAPV2_CONTROLS_NOT_ALLOWED.get());    sendLDAPMessage(message,responseOp);    disconnectControlsNotAllowed();    return false;  }  CompareRequestProtocolOp protocolOp=message.getCompareRequestProtocolOp();  CompareOperationBasis compareOp=new CompareOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls,protocolOp.getDN(),protocolOp.getAttributeType(),protocolOp.getAssertionValue());  try {    addOperationInProgress(compareOp);  } catch (  DirectoryException de) {    logger.traceException(de);    CompareResponseProtocolOp responseOp=new CompareResponseProtocolOp(de.getResultCode().intValue(),de.getMessageObject(),de.getMatchedDN(),de.getReferralURLs());    sendLDAPMessage(new LDAPMessage(message.getMessageID(),responseOp,compareOp.getResponseControls()));  }  return connectionValid;}  }
class C{  public StopMsg(){}  }
class C{  public AuthenticatedViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public boolean isNullStrokeFill(boolean isRectangle){  MetaPen pen=state.getCurrentPen();  MetaBrush brush=state.getCurrentBrush();  boolean noPen=pen.getStyle() == MetaPen.PS_NULL;  int style=brush.getStyle();  boolean isBrush=style == MetaBrush.BS_SOLID || style == MetaBrush.BS_HATCHED && state.getBackgroundMode() == MetaState.OPAQUE;  boolean result=noPen && !isBrush;  if (!noPen) {    if (isRectangle)     state.setLineJoinRectangle(cb); else     state.setLineJoinPolygon(cb);  }  return result;}  }
class C{  public void postTopic(String title,String body,String nodeId,String access_token,Callback<TopicResponse> callback){  topicApi=getRetrofitForSimpleJson().create(TopicApi.class);  topicApi.postTopic(title,body,nodeId,access_token).enqueue(callback);}  }
class C{  private void initLookAndFeel() throws Throwable {  UIFactory.initialize();}  }
class C{  private static void decodeHanziSegment(BitSource bits,StringBuilder result,int count) throws FormatException {  if (count * 13 > bits.available()) {    throw FormatException.getFormatInstance();  }  byte[] buffer=new byte[2 * count];  int offset=0;  while (count > 0) {    int twoBytes=bits.readBits(13);    int assembledTwoBytes=((twoBytes / 0x060) << 8) | (twoBytes % 0x060);    if (assembledTwoBytes < 0x003BF) {      assembledTwoBytes+=0x0A1A1;    } else {      assembledTwoBytes+=0x0A6A1;    }    buffer[offset]=(byte)((assembledTwoBytes >> 8) & 0xFF);    buffer[offset + 1]=(byte)(assembledTwoBytes & 0xFF);    offset+=2;    count--;  }  try {    result.append(new String(buffer,StringUtils.GB2312));  } catch (  UnsupportedEncodingException ignored) {    throw FormatException.getFormatInstance();  }}  }
class C{  public static WindowFocusListener add(WindowFocusListener a,WindowFocusListener b){  return (WindowFocusListener)addInternal(a,b);}  }
class C{  public SocketChannel sendBytes(InetAddress senderAddress,InetAddress receiverAddress,int contactPort,String transport,byte[] bytes,boolean isClient,NioTcpMessageChannel messageChannel) throws IOException {  int retry_count=0;  int max_retry=isClient ? 2 : 1;  int length=bytes.length;  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("sendBytes " + transport + " inAddr "+ receiverAddress.getHostAddress()+ " port = "+ contactPort+ " length = "+ length+ " isClient "+ isClient);  }  if (logger.isLoggingEnabled(LogLevels.TRACE_INFO) && sipStack.isLogStackTraceOnMessageSend()) {    logger.logStackTrace(StackLogger.TRACE_INFO);  }  String key=makeKey(receiverAddress,contactPort);  SocketChannel clientSock=null;  keyedSemaphore.enterIOCriticalSection(key);  boolean newSocket=false;  try {    clientSock=getSocket(key);    while (retry_count < max_retry) {      if (clientSock != null && (!clientSock.isConnected() || !clientSock.isOpen())) {        removeSocket(key);        clientSock=null;        newSocket=true;      }      if (clientSock == null) {        if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {          logger.logDebug("inaddr = " + receiverAddress);          logger.logDebug("port = " + contactPort);        }        try {          clientSock=messageProcessor.blockingConnect(new InetSocketAddress(receiverAddress,contactPort),10000);          if (messageChannel instanceof NioTlsMessageChannel) {            HandshakeCompletedListenerImpl listner=new HandshakeCompletedListenerImpl((NioTlsMessageChannel)messageChannel,clientSock);            ((NioTlsMessageChannel)messageChannel).setHandshakeCompletedListener(listner);          }          newSocket=true;        } catch (        SocketException e) {          logger.logError("Problem connecting " + receiverAddress + " "+ contactPort+ " "+ senderAddress+ " for message "+ (messageChannel.isSecure() ? "<<<ENCRYPTED MESSAGE>>>" : new String(bytes,"UTF-8")));          removeSocket(key);          throw new SocketException(e.getClass() + " " + e.getMessage()+ " "+ e.getCause()+ " Problem connecting "+ receiverAddress+ " "+ contactPort+ " "+ senderAddress+ " for message "+ new String(bytes,"UTF-8"));        }        putSocket(key,clientSock);        break;      } else {        break;      }    }  } catch (  IOException ex) {    if (logger.isLoggingEnabled(LogWriter.TRACE_ERROR)) {      logger.logError("Problem sending: sendBytes " + transport + " inAddr "+ receiverAddress.getHostAddress()+ " port = "+ contactPort+ " remoteHost "+ messageChannel.getPeerAddress()+ " remotePort "+ messageChannel.getPeerPort()+ " peerPacketPort "+ messageChannel.getPeerPacketSourcePort()+ " isClient "+ isClient);    }    removeSocket(key);    if (!isClient) {      receiverAddress=InetAddress.getByName(messageChannel.peerAddressAdvertisedInHeaders);      contactPort=messageChannel.peerPortAdvertisedInHeaders;      if (contactPort <= 0)       contactPort=5060;      key=makeKey(receiverAddress,contactPort);      clientSock=this.getSocket(key);      if (clientSock == null || !clientSock.isConnected() || !clientSock.isOpen()) {        if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {          logger.logDebug("inaddr = " + receiverAddress + " port = "+ contactPort);        }        clientSock=messageProcessor.blockingConnect(new InetSocketAddress(receiverAddress,contactPort),10000);        newSocket=true;        messageChannel.peerPort=contactPort;        putSocket(key,clientSock);      }      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        logger.logDebug("sending to " + key);      }    } else {      logger.logError("IOException occured at ",ex);      throw ex;    }    return clientSock;  } finally {    try {      if (clientSock != null) {        if (newSocket && messageChannel instanceof NioTlsMessageChannel) {        } else {          writeChunks(clientSock,bytes,length);        }      }    }  finally {      keyedSemaphore.leaveIOCriticalSection(key);    }  }  if (clientSock == null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_ERROR)) {      logger.logError(this.socketTable.toString());      logger.logError("Could not connect to " + receiverAddress + ":"+ contactPort);    }    throw new IOException("Could not connect to " + receiverAddress + ":"+ contactPort);  } else {    return clientSock;  }}  }
class C{  @Override public ISBNParsedResult parse(Result result){  BarcodeFormat format=result.getBarcodeFormat();  if (format != BarcodeFormat.EAN_13) {    return null;  }  String rawText=getMassagedText(result);  int length=rawText.length();  if (length != 13) {    return null;  }  if (!rawText.startsWith("978") && !rawText.startsWith("979")) {    return null;  }  return new ISBNParsedResult(rawText);}  }
class C{  public void requestTopDownLeftRightResend(ImageConsumer ic){}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public ZoneOffsetTransition nextTransition(Instant instant){  if (savingsInstantTransitions.length == 0) {    return null;  }  long epochSec=instant.getEpochSecond();  if (epochSec >= savingsInstantTransitions[savingsInstantTransitions.length - 1]) {    if (lastRules.length == 0) {      return null;    }    int year=findYear(epochSec,wallOffsets[wallOffsets.length - 1]);    ZoneOffsetTransition[] transArray=findTransitionArray(year);    for (    ZoneOffsetTransition trans : transArray) {      if (epochSec < trans.toEpochSecond()) {        return trans;      }    }    if (year < Year.MAX_VALUE) {      transArray=findTransitionArray(year + 1);      return transArray[0];    }    return null;  }  int index=Arrays.binarySearch(savingsInstantTransitions,epochSec);  if (index < 0) {    index=-index - 1;  } else {    index+=1;  }  return new ZoneOffsetTransition(savingsInstantTransitions[index],wallOffsets[index],wallOffsets[index + 1]);}  }
class C{  private boolean validateProperties() throws PolicyException {  if ((properties == null) || (properties.keySet() == null)) {    throw new PolicyException(ResBundleUtils.rbName,"properties_can_not_be_null_or_empty",null,null);  }  Set keySet=properties.keySet();  if (!keySet.contains(AUTH_SCHEME)) {    String args[]={AUTH_SCHEME};    throw new PolicyException(ResBundleUtils.rbName,"property_value_not_defined",args,null);  }  Iterator keys=keySet.iterator();  while (keys.hasNext()) {    String key=(String)keys.next();    if (!AUTH_SCHEME.equals(key) && !APPLICATION_NAME.equals(key) && !APPLICATION_IDLE_TIMEOUT.equals(key)) {      String args[]={key};      throw new PolicyException(ResBundleUtils.rbName,"attempt_to_set_invalid_property ",args,null);    }  }  Set authSchemeSet=(Set)properties.get(AUTH_SCHEME);  if (authSchemeSet != null) {    validateAuthSchemes(authSchemeSet);  }  appIdleTimeoutEnabled=false;  appName=null;  appIdleTimesoutAtSessionKey=null;  Set appNameSet=(Set)properties.get(APPLICATION_NAME);  if ((appNameSet != null) && !appNameSet.isEmpty()) {    appName=(String)(appNameSet.iterator().next());    appName=appName.trim();    if (appName.length() == 0) {      appName=null;    } else {      appIdleTimesoutAtSessionKey=APPLICATION_IDLE_TIMESOUT_AT_PREFIX + appName;    }  }  Set appIdleTimeoutSet=(Set)properties.get(APPLICATION_IDLE_TIMEOUT);  if ((appIdleTimeoutSet != null) && !appIdleTimeoutSet.isEmpty()) {    String appIdleTimeoutString=(String)(appIdleTimeoutSet.iterator().next());    appIdleTimeoutString=appIdleTimeoutString.trim();    if (appIdleTimeoutString.length() == 0) {      appIdleTimeoutString=null;    } else {      try {        appIdleTimeout=Integer.parseInt(appIdleTimeoutString);        appIdleTimeout=appIdleTimeout * 60 * 1000;      } catch (      NumberFormatException nfe) {        if (DEBUG.warningEnabled()) {          DEBUG.warning("At AuthSchemeCondition." + "validateProperties():" + "can not parse appIdleTeimout"+ "defaulting to "+ Integer.MAX_VALUE);        }        appIdleTimeout=Integer.MAX_VALUE;      }    }  }  if ((appName != null) && (appIdleTimeout != Integer.MAX_VALUE)) {    appIdleTimeoutEnabled=true;  }  return true;}  }
class C{  public void concatenate(SIPObjectList otherList,boolean topFlag){  super.concatenate(otherList,topFlag);}  }
class C{  void doPreOperation(PreOperationAddOperation addOperation){  final CSN csn=generateCSN(addOperation);  final String entryUUID=getEntryUUID(addOperation);  final AddContext ctx=new AddContext(csn,entryUUID,findEntryUUID(DirectoryServer.getParentDNInSuffix(addOperation.getEntryDN())));  addOperation.setAttachment(SYNCHROCONTEXT,ctx);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("StandardSession[");  sb.append(id);  sb.append("]");  return (sb.toString());}  }
class C{  private static ModifyDNResponseProtocolOp readModifyDNResponse(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  int resultCode;  try {    resultCode=(int)reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_RESULT_CODE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  DN matchedDN;  try {    String dnString=reader.readOctetStringAsString();    if (dnString.length() == 0) {      matchedDN=null;    } else {      matchedDN=DN.valueOf(dnString);    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_MATCHED_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  LocalizableMessage errorMessage;  try {    errorMessage=LocalizableMessage.raw(reader.readOctetStringAsString());    if (errorMessage.length() == 0) {      errorMessage=null;    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_ERROR_MESSAGE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<String> referralURLs=null;  try {    if (reader.hasNextElement()) {      reader.readStartSequence();      referralURLs=new ArrayList<>();      while (reader.hasNextElement()) {        referralURLs.add(reader.readOctetStringAsString());      }      reader.readEndSequence();    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_REFERRALS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new ModifyDNResponseProtocolOp(resultCode,errorMessage,matchedDN,referralURLs);}  }
class C{  public void testPowException(){  byte aBytes[]={1,2,3,4,5,6,7};  int aSign=1;  int exp=-5;  BigInteger aNumber=new BigInteger(aSign,aBytes);  try {    aNumber.pow(exp);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  void linkBefore(E e,Node<E> succ){  final Node<E> pred=succ.prev;  final Node<E> newNode=new Node<>(pred,e,succ);  succ.prev=newNode;  if (pred == null)   first=newNode; else   pred.next=newNode;  size++;  modCount++;}  }
class C{  public ArraySet(Collection<? extends E> collection){  items=new ArrayList<E>(collection.size());  for (  E item : collection)   if (!items.contains(item))   items.add(item);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptedDataType createEncryptedDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptedDataTypeImpl();}  }
class C{  public boolean webEnabled(){  return webSupport;}  }
class C{  public void identityDeleted(String universalId){  if (DelegationManager.debug.messageEnabled()) {    DelegationManager.debug.message("DelegationPolicyImpl: deleted universalId=" + universalId);  }  cleanupCache();}  }
class C{  private MonitorMsg createLocalTopologyMonitorMsg(int sender,int destination){  final MonitorMsg monitorMsg=new MonitorMsg(sender,destination);  monitorMsg.setReplServerDbState(getLatestServerState());  for (  DataServerHandler dsHandler : this.connectedDSs.values()) {    monitorMsg.setServerState(dsHandler.getServerId(),dsHandler.getServerState(),dsHandler.getApproxFirstMissingDate(),true);  }  for (  ReplicationServerHandler rsHandler : this.connectedRSs.values()) {    monitorMsg.setServerState(rsHandler.getServerId(),rsHandler.getServerState(),rsHandler.getApproxFirstMissingDate(),false);  }  return monitorMsg;}  }
class C{  public boolean isBearer(){  if (_statements == null || _statements.isEmpty()) {    return false;  }  Iterator iter=_statements.iterator();  while (iter.hasNext()) {    Object statement=iter.next();    if (!(statement instanceof SubjectStatement)) {      continue;    }    Subject subject=((SubjectStatement)statement).getSubject();    if (subject == null) {      continue;    }    SubjectConfirmation sc=subject.getSubjectConfirmation();    if (sc == null) {      continue;    }    Set confirmationMethods=sc.getConfirmationMethod();    if (confirmationMethods == null || confirmationMethods.isEmpty()) {      continue;    }    if (confirmationMethods.contains(SAMLConstants.CONFIRMATION_METHOD_BEARER)) {      return true;    }  }  return false;}  }
class C{  public ExpectedImpl(T value){  this.value=Objects.requireNonNull(value);}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof IntegerSyntax && value == ((IntegerSyntax)object).value);}  }
class C{  void fixCompatibility(View root){  Queue<View> queue=new LinkedList<View>();  queue.add(root);  View view=null;  while ((view=queue.poll()) != null) {    if (view instanceof ViewGroup) {      ViewGroup group=(ViewGroup)view;      for (int i=0; i < group.getChildCount(); i++) {        queue.add(group.getChildAt(i));      }    }  }}  }
class C{  @Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  StringManager smClient=StringManager.getManager(Constants.Package,request.getLocales());  String command=request.getPathInfo();  String path=request.getParameter("path");  ContextName cn=null;  if (path != null) {    cn=new ContextName(path,request.getParameter("version"));  }  String deployPath=request.getParameter("deployPath");  ContextName deployCn=null;  if (deployPath != null) {    deployCn=new ContextName(deployPath,request.getParameter("deployVersion"));  }  String deployConfig=request.getParameter("deployConfig");  String deployWar=request.getParameter("deployWar");  response.setContentType("text/html; charset=" + Constants.CHARSET);  String message="";  if (command == null || command.length() == 0) {  } else   if (command.equals("/upload")) {    message=upload(request,smClient);  } else   if (command.equals("/deploy")) {    message=deployInternal(deployConfig,deployCn,deployWar,smClient);  } else   if (command.equals("/reload")) {    message=reload(cn,smClient);  } else   if (command.equals("/undeploy")) {    message=undeploy(cn,smClient);  } else   if (command.equals("/expire")) {    message=expireSessions(cn,request,smClient);  } else   if (command.equals("/start")) {    message=start(cn,smClient);  } else   if (command.equals("/stop")) {    message=stop(cn,smClient);  } else   if (command.equals("/findleaks")) {    message=findleaks(smClient);  } else {    doGet(request,response);    return;  }  list(request,response,message,smClient);}  }
class C{  public Class<?> loadClass(String name) throws ClassNotFoundException {  int dimensions=0;  if (name.startsWith("[") && name.endsWith(";")) {    int i=0;    char[] chars=name.toCharArray();    for (; i < chars.length; ++i) {      if (chars[i] == '[') {        ++dimensions;      } else {        break;      }    }    name=name.substring(i + 1);    name=name.substring(0,name.length() - 1);  }  Class<?> cls;  try {    cls=Class.forName(name);  } catch (  ClassNotFoundException e) {    cls=classLoader.loadClass(name);  }  if (dimensions == 0) {    return cls;  } else {    int[] d=new int[dimensions];    return Array.newInstance(cls,d).getClass();  }}  }
class C{  private void updateSharedLocalOrRemotePanel(RootPaneContainer localOrRemote,ControlPanelInfo info){  LocalOrRemotePanel panel=getLocalOrRemotePanel(localOrRemote.getContentPane());  LocalOrRemotePanel panelToUpdate=getLocalOrRemotePanel(ControlCenterMainPane.getLocalOrRemoteDialog(info));  if (panel != null && panelToUpdate != null) {    panelToUpdate.setRemote(panel.isRemote());    if (panel.getHostName() != null) {      panelToUpdate.setHostName(panel.getHostName());    }    if (panel.getPort() != -1) {      panelToUpdate.setPort(panel.getPort());    }    if (panel.getBindDN() != null) {      panelToUpdate.setBindDN(panel.getBindDN());    }  }}  }
class C{  public static Foo fetchByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_C_Last(uuid,companyId,orderByComparator);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public SimpleRetrySyncFailureHandler(int syncFailureRetries,SyncFailureHandler postRetryHandler){  this.syncFailureRetries=syncFailureRetries;  this.postRetryHandler=postRetryHandler;}  }
class C{  public String toString(){  return toString(true,false);}  }
class C{  void updateFinish(){  mWXSDKInstance.onUpdateFinish();}  }
class C{  private void updateWithOneByte(byte b){  if (b != 0x0D && b != 0x0A) {    checksum+=b;  }}  }
class C{  public CheckedListIterator(ListIterator<E> i,Class<E> type){  this.i=i;  this.type=type;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattribute.class,args);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.XACMLAuthzDecisionQueryDescriptorElement createXACMLAuthzDecisionQueryDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.XACMLAuthzDecisionQueryDescriptorElementImpl();}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static int countByUUID_G(java.lang.String uuid,long groupId){  return getPersistence().countByUUID_G(uuid,groupId);}  }
class C{  public static <T>void find(ManagedObjectPath<?,?> path,PropertyDefinition<T> pd,Collection<DN> dependencies){  Visitor<T> v=new Visitor<>(dependencies);  DefaultBehaviorProvider<T> db=pd.getDefaultBehaviorProvider();  db.accept(v,path);}  }
class C{  @Descriptor("Start a new object service and register into the router service") public void mockservice(CommandSession session,@Descriptor("URL Prefix") String[] params){  try {    InteractiveObjectSetService debugRouter=new InteractiveObjectSetService(Thread.currentThread(),context,session);    context.addServiceListener(debugRouter,ServerConstants.EXTERNAL_ROUTER_SERVICE_PID_FILTER);    Dictionary<String,Object> props=new Hashtable<String,Object>();    props.put(ServerConstants.ROUTER_PREFIX,params.length > 0 ? params[0] : "debugrouter");    ServiceRegistration<?> srv=context.registerService(RequestHandler.class.getName(),debugRouter,props);    boolean run=true;    while (run) {      try {        Thread.sleep(1000000000);      } catch (      InterruptedException e) {        run=false;        session.getConsole().println("Interrupt debug server.");      }    }    context.removeServiceListener(debugRouter);    srv.unregister();    session.getConsole().println("Unregister debug server.");  } catch (  InvalidSyntaxException e) {  }}  }
class C{  public static String upperInitial(String self){  return replaceHeadTail(self,null,null);}  }
class C{  public void remove(N nodeA,N nodeB) throws NullPointerException {  theNeighbors.get(nodeA).remove(nodeB);  theNeighbors.get(nodeB).remove(nodeA);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  if ((responseAttributes != null) && (responseAttributes != Collections.EMPTY_MAP)) {    Iterator attrNames=responseAttributes.keySet().iterator();    while (attrNames.hasNext()) {      String attrName=(String)attrNames.next();      Set attrValues=(Set)responseAttributes.get(attrName);      sb.append(attrName).append("=").append(attrValues).append("\n");    }  }  Iterator actionNames=actionDecisions.keySet().iterator();  while (actionNames.hasNext()) {    String actionName=(String)actionNames.next();    ActionDecision actionDecision=(ActionDecision)actionDecisions.get(actionName);    Set actionValues=(Set)actionDecision.getValues();    sb.append(actionName).append("=").append(actionValues).append("\n");  }  return sb.toString();}  }
class C{  public void handleTblDataActionHrefRequest(RequestInvocationEvent event){  AgentsModel model=(AgentsModel)getModel();  String agentType=getDisplayIDType();  String universalId=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF));  setPageSessionAttribute(AgentProfileViewBean.UNIVERSAL_ID,universalId);  SSOToken ssoToken=model.getUserSSOToken();  String realm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  StringTokenizer st=new StringTokenizer(universalId,"=,");  st.nextToken();  String agentName=st.nextToken();  try {    AMIdentity amid=new AMIdentity(ssoToken,agentName,IdType.AGENTONLY,realm,null);    if (agentType.equals(AgentsViewBean.AGENT_WEB) || (agentType.equals(AgentsViewBean.DEFAULT_ID_TYPE))) {      if (isPropertiesLocallyStored(amid)) {        setPageSessionAttribute(LOCAL_OR_NOT,PROP_LOCAL);      } else {        setPageSessionAttribute(LOCAL_OR_NOT,PROP_CENTRAL);      }    }    Class clazz=getAgentCustomizedViewBean(model.getAgentType(amid));    AMViewBeanBase vb=(AMViewBeanBase)getViewBean(clazz);    setPageSessionAttribute(PG_SESSION_SUPERCEDE_AGENT_TYPE,model.getAgentType(amid));    removePageSessionAttribute(GenericAgentProfileViewBean.PS_TABNAME);    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  IdRepoException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getErrorString(e));    forwardTo();  }catch (  SSOException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getErrorString(e));    forwardTo();  }catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getErrorString(e));    forwardTo();  }catch (  ClassNotFoundException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getErrorString(e));    forwardTo();  }}  }
class C{  public String group(){  return group(0);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  protected void validate(){  isValid=true;  loadChildren(getElement());}  }
class C{  public Future<Long> delayedCount(String type){  Future<Long> future=Future.future();  jobService.delayedCount(type,future.completer());  return future;}  }
class C{  public boolean isSuccessful(){  return AuthContext.Status.SUCCESS.equals(authContext.getStatus());}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (s == null) {    s=new java.io.PrintWriter(System.err,true);  }  try {    String locInfo=getLocationAsString();    if (null != locInfo) {      s.println(locInfo);    }    super.printStackTrace(s);  } catch (  Throwable e) {  }}  }
class C{  public void appendBytes(MessageBytes mb){  if (mb == null) {    log.error(sm.getString("ajpmessage.null"),new NullPointerException());    appendInt(0);    appendByte(0);    return;  }  if (mb.getType() != MessageBytes.T_BYTES) {    mb.toBytes();    ByteChunk bc=mb.getByteChunk();    byte[] buffer=bc.getBuffer();    for (int i=bc.getOffset(); i < bc.getLength(); i++) {      if ((buffer[i] > -1 && buffer[i] <= 31 && buffer[i] != 9) || buffer[i] == 127) {        buffer[i]=' ';      }    }  }  appendByteChunk(mb.getByteChunk());}  }
class C{  private boolean hasBookendSpaces(String name){  return (name == null || name.isEmpty() || name.trim().length() < name.length());}  }
class C{  public void disallow(final Result result,final String message){  this.result=result;  this.message=message;}  }
class C{  public boolean asksAllowsChildren(){  return asksAllowsChildren;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String lang=m_arg0.execute(xctxt).str();  int parent=xctxt.getCurrentNode();  boolean isLang=false;  DTM dtm=xctxt.getDTM(parent);  while (DTM.NULL != parent) {    if (DTM.ELEMENT_NODE == dtm.getNodeType(parent)) {      int langAttr=dtm.getAttributeNode(parent,"http://www.w3.org/XML/1998/namespace","lang");      if (DTM.NULL != langAttr) {        String langVal=dtm.getNodeValue(langAttr);        if (langVal.toLowerCase().startsWith(lang.toLowerCase())) {          int valLen=lang.length();          if ((langVal.length() == valLen) || (langVal.charAt(valLen) == '-')) {            isLang=true;          }        }        break;      }    }    parent=dtm.getParent(parent);  }  return isLang ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public static String decode(String encoded){  return decode(encoded,encryptor);}  }
class C{  public void sendMessage(AbstractWebsocketMessage msg){synchronized (messagesToSend) {    if (!isClosing) {      if (msg instanceof CloseWebsocketMessage) {        isClosing=true;      }      if (isSendingMessage) {        if (messagesToSend.size() >= 1000 || messagesToSendLength >= 1000000) {          isClosing=true;          CloseReason cr=new CloseReason(CloseCodes.VIOLATED_POLICY,"Send Buffer exceeded");          try {            session.close(cr);          } catch (          IOException e) {          }        } else {          if (msg instanceof StringWebsocketMessage && !messagesToSend.isEmpty() && messagesToSend.getLast() instanceof StringWebsocketMessage) {            StringWebsocketMessage ms=(StringWebsocketMessage)messagesToSend.removeLast();            messagesToSendLength-=calculateMessageLength(ms);            String concatenated=ms.getString() + ";" + ((StringWebsocketMessage)msg).getString();            msg=new StringWebsocketMessage(concatenated);          }          messagesToSend.add(msg);          messagesToSendLength+=calculateMessageLength(msg);        }      } else {        isSendingMessage=true;        internalSendMessageAsync(msg);      }    }  }}  }
class C{  public AllowEventsParser(String allowEvents){  super(allowEvents);}  }
class C{  public String readString() throws SQLException {  return (String)getNextAttribute();}  }
class C{  public void testIntValuePositive2(){  byte aBytes[]={12,56,100};  int resInt=800868;  int aNumber=new BigInteger(aBytes).intValue();  assertTrue(aNumber == resInt);}  }
class C{  @AfterClass @Override public void classCleanUp() throws Exception {  callParanoiaCheck=false;  entriesToCleanup.remove(DN.valueOf(EXAMPLE_DN));  super.classCleanUp();  TestCaseUtils.clearBackend("userRoot");  TestCaseUtils.deleteDirectory(reSyncTempDir);  paranoiaCheck();}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public void testClose() throws SQLException {  PreparedStatement ps1=null;  PreparedStatement ps2=null;  try {    Statement s=conn.createStatement();    s.addBatch("create table t1 (a text);");    s.addBatch("insert into t1 values('abc');");    s.addBatch("insert into t1 values('def');");    s.addBatch("insert into t1 values('ghi');");    s.executeBatch();    s.close();    conn.commit();    ps1=conn.prepareStatement("select * from t1");    ps2=conn.prepareStatement("select * from t1 whe a like '?000'");    ResultSet rs1=ps1.executeQuery();    try {      ResultSet rs2=ps2.executeQuery();      while (rs2.next()) {      }      fail("Should get SQLException");    } catch (    SQLException sqle) {    }    while (rs1.next()) {    }    conn.commit();    rs1.close();    ps1.close();    ps2.close();  }  finally {    try {      if (ps1 != null)       ps1.close();      if (ps2 != null)       ps2.close();      conn.rollback();    } catch (    SQLException e) {      e.printStackTrace();    }  }}  }
class C{  @Get public Representation readOrListResourceSet() throws NotFoundException, ServerException {  String resourceSetId=getResourceSetId();  if (resourceSetId == null || resourceSetId.isEmpty()) {    return listResourceSets();  } else {    return readResourceSet(resourceSetId);  }}  }
class C{  public FSRemoteException(){  super();}  }
class C{  public static boolean isPad(Context context){  DisplayMetrics dm=context.getResources().getDisplayMetrics();  int width=dm.widthPixels;  int height=dm.heightPixels;  double x=Math.pow(width,2);  double y=Math.pow(height,2);  double diagonal=Math.sqrt(x + y);  int dens=dm.densityDpi;  double screenInches=diagonal / (double)dens;  if (screenInches >= 7.0) {    return true;  }  return false;}  }
class C{  public AuthenticateToServiceCondition(){  this(PrivilegeManager.debug,new CoreWrapper(),new EntitlementCoreWrapper());}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  PolicyModel model=(PolicyModel)getModel();  String formatServiceType=(String)propertySheetModel.getValue(ATTR_SERVICE_TYPE);  int idx=formatServiceType.indexOf("|");  String serviceType=formatServiceType.substring(0,idx);  boolean withResource=formatServiceType.substring(idx + 1).equals(WITH_RESOURCE_SUFFIX);  setPageSessionAttribute(RuleOpViewBeanBase.CALLING_VIEW_BEAN,(String)getPageSessionAttribute(CALLING_VIEW_BEAN));  setPageSessionAttribute(RuleOpViewBeanBase.WITH_RESOURCE,withResource ? Boolean.TRUE : Boolean.FALSE);  RuleAddViewBean vb=null;  if (withResource) {    String realmName=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    if (model.canCreateNewResource(realmName,serviceType)) {      vb=(RuleAddViewBean)getViewBean(RuleAddViewBean.class);    } else {      vb=(RuleAddViewBean)getViewBean(RuleWithPrefixAddViewBean.class);    }  } else {    vb=(RuleNoResourceAddViewBean)getViewBean(RuleNoResourceAddViewBean.class);  }  unlockPageTrailForSwapping();  passPgSessionMap(vb);  vb.serviceType=serviceType;  vb.forwardTo(getRequestContext());}  }
class C{  public void testDivideExpGreaterZero(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=20;  String c="1.647694590099337641891395686052735285121058381E+50";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void drawRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing round rect: " + new Rectangle(x,y,width,height)+ " arcWidth: "+ arcWidth+ " archHeight: "+ arcHeight);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawRoundRect(x,y,width,height,arcWidth,arcHeight);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawRoundRect(x,y,width,height,arcWidth,arcHeight);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawRoundRect(x,y,width,height,arcWidth,arcHeight);}  }
class C{  private void parseMajorVersion(String majorVer) throws FSMsgException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSFederationTerminationNotification(Element): " + "invalid MajorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSFederationTerminationNotification(Element):  " + "MajorVersion of the " + "FederationTerminationNotification is too high.");      }      throw new FSMsgException("requestVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSFederationTerminationNotification(Element): " + "MajorVersion of the " + "FederationTerminationNotification is too low.");      }      throw new FSMsgException("requestVersionTooLow",null);    }  }}  }
class C{  public static String wrapText(final LocalizableMessage message,final int width){  return wrapText(message.toString(),width,0);}  }
class C{  private JSONObject createJSONObject(MotionEvent motionEvent,int pos,int pointerIndex){  PointF screenXY, pageXY;  if (pos == CUR_EVENT) {    pageXY=getEventLocInPageCoordinate(motionEvent,pointerIndex);    screenXY=getEventLocInScreenCoordinate(motionEvent,pointerIndex);  } else {    pageXY=getEventLocInPageCoordinate(motionEvent,pointerIndex,pos);    screenXY=getEventLocInScreenCoordinate(motionEvent,pointerIndex,pos);  }  return createJSONObject(screenXY,pageXY,(float)motionEvent.getPointerId(pointerIndex));}  }
class C{  public BasicStatusLine(final ProtocolVersion version,int statusCode,final String reasonPhrase){  super();  if (version == null) {    throw new IllegalArgumentException("Protocol version may not be null.");  }  if (statusCode < 0) {    throw new IllegalArgumentException("Status code may not be negative.");  }  this.protoVersion=version;  this.statusCode=statusCode;  this.reasonPhrase=reasonPhrase;}  }
class C{  public void removeAllElements(){  if (null == m_map)   return;  for (int i=0; i < m_firstFree; i++) {    m_map[i]=null;  }  m_firstFree=0;}  }
class C{  @Override public int hashCode(){  return 1 + components.hashCode();}  }
class C{  private String fieldTypeComment(Field field,PythonImportHandler importHandler){  return typeComment(field.getType(),importHandler);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("IntermediateResponse(oid=").append(oid);  if (value != null) {    buffer.append(", value=").append(value);  }  buffer.append(")");}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.ReferenceElement createReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.ReferenceElementImpl();}  }
class C{  public void deleteArtworkField() throws KeyNotFoundException {  throw new UnsupportedOperationException(ErrorMessage.GENERIC_NOT_SUPPORTED.getMsg());}  }
class C{  public String put(String url,final int expectedStatusCode){  return put(url,null,expectedStatusCode);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapnumberofnodes.class,args);}  }
class C{  public boolean hasHybridXref(){  return hybridXref;}  }
class C{  public StateInteractive process_logfile_point(PlaPointFloat p_point){  circle_radius=circle_center.distance(p_point);  return this;}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public javax.sip.address.Address createAddress(String address) throws java.text.ParseException {  if (address == null)   throw new NullPointerException("null address");  if (address.equals("*")) {    AddressImpl addressImpl=new AddressImpl();    addressImpl.setAddressType(AddressImpl.WILD_CARD);    SipURI uri=new SipUri();    uri.setUser("*");    addressImpl.setURI(uri);    return addressImpl;  } else {    StringMsgParser smp=new StringMsgParser();    return smp.parseAddress(address);  }}  }
class C{  private void init(Context context,AttributeSet attrs,int defStyle){  final TypedArray attrArray=context.obtainStyledAttributes(attrs,R.styleable.ScComponents,defStyle,0);  float left=attrArray.getFloat(R.styleable.ScComponents_scc_left,0.0f);  float top=attrArray.getFloat(R.styleable.ScComponents_scc_top,0.0f);  float right=attrArray.getFloat(R.styleable.ScComponents_scc_right,100.0f);  float bottom=attrArray.getFloat(R.styleable.ScComponents_scc_bottom,0.0f);  left=ScWidget.valueRangeLimit(left,0.0f,100.0f);  top=ScWidget.valueRangeLimit(top,0.0f,100.0f);  right=ScWidget.valueRangeLimit(right,0.0f,100.0f);  bottom=ScWidget.valueRangeLimit(bottom,0.0f,100.0f);  this.mBounds=new RectF(left,top,right,bottom);  int orientation=attrArray.getInt(R.styleable.ScComponents_scc_orientation,Orientation.CUSTOM.ordinal());  this.internalSetOrientation(Orientation.values()[orientation]);  attrArray.recycle();}  }
class C{  public void sendRelationCreationNotification(String relationId) throws IllegalArgumentException, RelationNotFoundException {  if (relationId == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"sendRelationCreationNotification",relationId);  StringBuilder ntfMsg=new StringBuilder("Creation of relation ");  ntfMsg.append(relationId);  sendNotificationInt(1,ntfMsg.toString(),relationId,null,null,null,null);  RELATION_LOGGER.exiting(RelationService.class.getName(),"sendRelationCreationNotification");  return;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public SubResourceCollection glueObjectClasses(final String... objectClasses){  this.glueObjectClasses.add((Object[])objectClasses);  return this;}  }
class C{  public StreamCorruptedException(){  super();}  }
class C{  @Override protected void finalize(){  disconnect(DisconnectReason.OTHER,false,null);}  }
class C{  public static Tailer create(File file,TailerListener listener){  return create(file,listener,DEFAULT_DELAY_MILLIS,false);}  }
class C{  @Override protected void propertyChange(PropertyChangeEvent evt){  if (SynthLookAndFeel.shouldUpdateStyle(evt)) {    updateStyle((JTextComponent)evt.getSource());  }  super.propertyChange(evt);}  }
class C{  public void reset(){  currentPosition=0;}  }
class C{  public InputSource(String systemId){  setSystemId(systemId);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  static public void assertNotNull(Object object){  assertNotNull(null,object);}  }
class C{  public void putOnFace(BlockFace face){switch (face) {case WEST:    setData((byte)(getData() | VINE_WEST));  break;case NORTH:setData((byte)(getData() | VINE_NORTH));break;case SOUTH:setData((byte)(getData() | VINE_SOUTH));break;case EAST:setData((byte)(getData() | VINE_EAST));break;case NORTH_WEST:putOnFace(BlockFace.WEST);putOnFace(BlockFace.NORTH);break;case SOUTH_WEST:putOnFace(BlockFace.WEST);putOnFace(BlockFace.SOUTH);break;case NORTH_EAST:putOnFace(BlockFace.EAST);putOnFace(BlockFace.NORTH);break;case SOUTH_EAST:putOnFace(BlockFace.EAST);putOnFace(BlockFace.SOUTH);break;case UP:break;default :throw new IllegalArgumentException("Vines can't go on face " + face.toString());}}  }
class C{  public void auditLoginFailure(LoginState loginState,AuthenticationFailureReason failureReason){  String realm=getRealmFromState(loginState);  if (eventPublisher.isAuditing(realm,AUTHENTICATION_TOPIC,AM_LOGIN_COMPLETED)) {    String principal=getFailedPrincipal(loginState);    String moduleName=loginState == null ? null : loginState.getFailureModuleNames();    AuthenticationAuditEntry entryDetail=getAuditEntryDetail(moduleName,loginState);    if (failureReason == null) {      failureReason=findFailureReason(loginState);    }    entryDetail.addInfo(FAILURE_REASON,failureReason.name());    AMAuthenticationAuditEventBuilder builder=eventFactory.authenticationEvent(realm).transactionId(getTransactionIdValue()).component(AUTHENTICATION).eventName(AM_LOGIN_COMPLETED).result(FAILED).entry(entryDetail).trackingIds(getTrackingIds(loginState)).userId(getUserId(principal,realm)).principal(principal);    eventPublisher.tryPublish(AUTHENTICATION_TOPIC,builder.toEvent());  }}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException, HeadlessException {  GraphicsEnvironment.checkHeadless();  s.defaultReadObject();  Object keyOrNull;  while (null != (keyOrNull=s.readObject())) {    String key=((String)keyOrNull).intern();    if (itemListenerK == key)     addItemListener((ItemListener)(s.readObject())); else     if (actionListenerK == key)     addActionListener((ActionListener)(s.readObject())); else     s.readObject();  }}  }
class C{  @Override protected void finalize(){  if (dfos == null) {    return;  }  File outputFile=dfos.getFile();  if (outputFile != null && outputFile.exists()) {    outputFile.delete();  }}  }
class C{  private int findPrecedingOrAncestorOrSelf(XPathContext xctxt,XPath fromMatchPattern,XPath countMatchPattern,int context,ElemNumber namespaceContext) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(context);  while (DTM.NULL != context) {    if (null != fromMatchPattern) {      if (fromMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        context=DTM.NULL;        break;      }    }    if (null != countMatchPattern) {      if (countMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        break;      }    }    int prevSibling=dtm.getPreviousSibling(context);    if (DTM.NULL == prevSibling) {      context=dtm.getParent(context);    } else {      context=dtm.getLastChild(prevSibling);      if (context == DTM.NULL)       context=prevSibling;    }  }  return context;}  }
class C{  private void readEntityDeclaration() throws IOException, XmlPullParserException {  read(START_ENTITY);  boolean generalEntity=true;  skip();  if (peekCharacter() == '%') {    generalEntity=false;    position++;    skip();  }  String name=readName();  skip();  int quote=peekCharacter();  String entityValue;  if (quote == '"' || quote == '\'') {    position++;    entityValue=readValue((char)quote,true,false,ValueContext.ENTITY_DECLARATION);    if (peekCharacter() == quote) {      position++;    }  } else   if (readExternalId(true,false)) {    entityValue="";    skip();    if (peekCharacter() == NDATA[0]) {      read(NDATA);      skip();      readName();    }  } else {    throw new XmlPullParserException("Expected entity value or external ID",this,null);  }  if (generalEntity && processDocDecl) {    if (documentEntities == null) {      documentEntities=new HashMap<String,char[]>();    }    documentEntities.put(name,entityValue.toCharArray());  }  skip();  read('>');}  }
class C{  protected void engineInitSign(PrivateKey privateKey) throws InvalidKeyException {  DSAParams params;  BigInteger p, q, x;  int n;  if (privateKey == null || !(privateKey instanceof DSAPrivateKey)) {    throw new InvalidKeyException();  }  params=((DSAPrivateKey)privateKey).getParams();  p=params.getP();  q=params.getQ();  x=((DSAPrivateKey)privateKey).getX();  n=p.bitLength();  if (p.compareTo(BigInteger.valueOf(1)) != 1 || n < 512 || n > 1024 || (n & 077) != 0) {    throw new InvalidKeyException("bad p");  }  if (q.signum() != 1 && q.bitLength() != 160) {    throw new InvalidKeyException("bad q");  }  if (x.signum() != 1 || x.compareTo(q) != -1) {    throw new InvalidKeyException("x <= 0 || x >= q");  }  dsaKey=(DSAKey)privateKey;  msgDigest.reset();}  }
class C{  public Set searchUsers(String wildcard,int level) throws AMException, SSOException {  return searchUsers(wildcard,null,level);}  }
class C{  private static String convertToQuotedString(String s){  if (s == null || s.isEmpty()) {    return null;  }  if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"') {    return s;  }  return '\"' + s + '\"';}  }
class C{  public ChangelogBackend(final ReplicationServer replicationServer,final ECLEnabledDomainPredicate domainPredicate){  this.replicationServer=replicationServer;  this.domainPredicate=domainPredicate;  setBackendID(BACKEND_ID);  setWritabilityMode(WritabilityMode.DISABLED);  setPrivateBackend(true);}  }
class C{  void addExtraLine(final TemplateLine line){  extraLines.add(line);}  }
class C{  @AfterClass @Override public void classCleanUp() throws Exception {  callParanoiaCheck=false;  super.classCleanUp();  TestCaseUtils.clearBackend("userRoot");  paranoiaCheck();}  }
class C{  public void create_board(ShapeTileBox p_bounding_box,BrdLayerStructure p_layer_structure,ShapeSegments[] p_outline_shapes,String p_outline_clearance_class_name,BoardRules p_rules,HostCom p_communication){  if (r_board != null) {    stat.userPrintln(classname + "create_board: board already created");    return;  }  int outline_cl_class_no=0;  if (p_rules != null) {    if (p_outline_clearance_class_name != null && p_rules.clearance_matrix != null) {      outline_cl_class_no=p_rules.clearance_matrix.get_no(p_outline_clearance_class_name);      outline_cl_class_no=Math.max(outline_cl_class_no,0);    } else {      outline_cl_class_no=p_rules.get_default_net_class().default_item_clearance_classes.get(ItemClass.AREA);    }  }  r_board=new RoutingBoard(p_bounding_box,p_layer_structure,p_outline_shapes,outline_cl_class_no,p_rules,p_communication,stat);  double unit_factor=p_communication.coordinate_transform.board_to_dsn(1);  coordinate_transform=new PlaCoordTransform(1,p_communication.host_unit,unit_factor,p_communication.host_unit);  itera_settings=new IteraSettings(r_board,actlog);  Dimension panel_size=board_panel.getPreferredSize();  gdi_context=new GdiContext(p_bounding_box,panel_size,p_layer_structure,stat);}  }
class C{  public long node(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return node;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof MediaSize);}  }
class C{  public String number() throws ParseException {  int startIdx=ptr;  try {    if (!isDigit(lookAhead(0))) {      throw new ParseException(buffer + ": Unexpected token at " + lookAhead(0),ptr);    }    consume(1);    while (true) {      char next=lookAhead(0);      if (isDigit(next)) {        consume(1);      } else       break;    }    return String.valueOf(buffer,startIdx,ptr - startIdx);  } catch (  ParseException ex) {    return String.valueOf(buffer,startIdx,ptr - startIdx);  }}  }
class C{  static void useProxiedAuthV2RequestControl(Connection connection) throws LdapException {  if (isSupported(ProxiedAuthV2RequestControl.OID)) {    final String bindDN="cn=My App,ou=Apps,dc=example,dc=com";    final String targetDn="uid=bjensen,ou=People,dc=example,dc=com";    final String authzId="dn:uid=kvaughan,ou=People,dc=example,dc=com";    final ModifyRequest request=Requests.newModifyRequest(targetDn).addControl(ProxiedAuthV2RequestControl.newControl(authzId)).addModification(ModificationType.REPLACE,"description","Done with proxied authz");    connection.bind(bindDN,"password".toCharArray());    connection.modify(request);    final Entry entry=connection.readEntry(targetDn,"description");    final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);    try {      writer.writeEntry(entry);      writer.close();    } catch (    final IOException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    }  } else {    System.err.println("ProxiedAuthV2RequestControl not supported");  }}  }
class C{  public Builder names(final String... names){  return names(asList(names));}  }
class C{  public SimpleBindStrategy(ConnectionFactory connectionFactory,String bindDNTemplate,Schema schema){  this.connectionFactory=checkNotNull(connectionFactory,"connectionFactory cannot be null");  this.bindDNTemplate=checkNotNull(bindDNTemplate,"bindDNTemplate cannot be null");  this.schema=checkNotNull(schema,"schema cannot be null");}  }
class C{  @Deprecated public ItemStack(final int type,final int amount){  this(type,amount,(short)0);}  }
class C{  public Attr elementAt(int index){  return (Attr)_attrs.get(index);}  }
class C{  public void decompileFromArchive(String archivePath,String packege,String className){  start=System.currentTimeMillis();  File workingDir=new File(JavaDecompilerPlugin.getDefault().getPreferenceStore().getString(JavaDecompilerPlugin.TEMP_DIR) + "/" + System.currentTimeMillis());  try {    workingDir.mkdirs();    JarClassExtractor.extract(archivePath,packege,className,true,workingDir.getAbsolutePath());    decompile(workingDir.getAbsolutePath(),packege,className);  } catch (  Exception e) {    JavaDecompilerPlugin.logError(e,e.getMessage());    return;  } finally {    deltree(workingDir);  }}  }
class C{  private boolean shouldRoundUp(int maximumDigits,boolean alreadyRounded,boolean valueExactAsDecimal){  if (maximumDigits < count) {switch (roundingMode) {case UP:      for (int i=maximumDigits; i < count; ++i) {        if (digits[i] != '0') {          return true;        }      }    break;case DOWN:  break;case CEILING:for (int i=maximumDigits; i < count; ++i) {  if (digits[i] != '0') {    return !isNegative;  }}break;case FLOOR:for (int i=maximumDigits; i < count; ++i) {if (digits[i] != '0') {return isNegative;}}break;case HALF_UP:case HALF_DOWN:if (digits[maximumDigits] > '5') {return true;} else if (digits[maximumDigits] == '5') {if (maximumDigits != (count - 1)) {return true;} else {if (valueExactAsDecimal) {return roundingMode == RoundingMode.HALF_UP;} else {return !alreadyRounded;}}}break;case HALF_EVEN:if (digits[maximumDigits] > '5') {return true;} else if (digits[maximumDigits] == '5') {if (maximumDigits == (count - 1)) {if (alreadyRounded) return false;if (!valueExactAsDecimal) return true; else {return ((maximumDigits > 0) && (digits[maximumDigits - 1] % 2 != 0));}} else {for (int i=maximumDigits + 1; i < count; ++i) {if (digits[i] != '0') return true;}}}break;case UNNECESSARY:for (int i=maximumDigits; i < count; ++i) {if (digits[i] != '0') {throw new ArithmeticException("Rounding needed with the rounding mode being set to RoundingMode.UNNECESSARY");}}break;default :assert false;}}return false;}  }
class C{  public void start_circle(Point2D p_point){  if (board_is_read_only)   return;  PlaPointFloat location=gdi_context.coordinate_transform.screen_to_board(p_point);  set_interactive_state(StateCircleConstrut.get_instance(location,interactive_state,this,actlog));}  }
class C{  public void removePolicy(String policyName) throws SSOException, NoPermissionException, PolicyException {  if (policyName == null) {    if (debug.warningEnabled()) {      debug.warning("In PolicyManager::removePolicy(), name is null");    }    throw (new InvalidNameException(ResBundleUtils.rbName,"null_name",null,"null",PolicyException.POLICY));  }  try {    PolicyManager.initAdminSubject();    ServiceConfig oConfig=scm.getOrganizationConfig(org,null);    ServiceConfig namedPolicy=(oConfig == null) ? null : oConfig.getSubConfig(NAMED_POLICY);    if (namedPolicy != null) {      Policy policy=getPolicy(policyName);      namedPolicy.removeSubConfig(policyName);      if (policy != null) {        PrivilegeIndexStore pis=PrivilegeIndexStore.getInstance(SubjectUtils.createSuperAdminSubject(),getOrganizationDN());        if (policy.isReferralPolicy()) {          pis.deleteReferral((policyName));        } else {          pis.delete(PrivilegeUtils.policyToPrivileges(policy));        }        policyCache.sendPolicyChangeNotification(null,policy,ServiceListener.REMOVED);      }    }  } catch (  EntitlementException e) {    debug.error("Error while removing policy : " + e.getMessage());  }catch (  ServiceNotFoundException snfe) {    debug.error("Error while removing policy : " + snfe.getMessage());  }catch (  SMSException smse) {    String objs[]={policyName,org};    if (PolicyUtils.logStatus) {      PolicyUtils.logErrorMessage("UNABLE_TO_REMOVE_POLICY",objs,token);    }    debug.error("SMS error in deleting policy: " + policyName + " for org: "+ org,smse);    if (smse.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {      throw (new NoPermissionException(ResBundleUtils.rbName,"insufficient_access_rights",null));    } else {      throw (new PolicyException(ResBundleUtils.rbName,"unable_to_remove_policy",objs,smse));    }  }  String objs[]={policyName,org};  if (PolicyUtils.logStatus) {    PolicyUtils.logAccessMessage("POLICY_REMOVE_SUCCESS",objs,token);  }}  }
class C{  protected void local(TokenIterator tokens) throws ParseException {  tokens.jumpPastNext(SEMICOLON);}  }
class C{  protected void updateListBoxSelectionForEvent(MouseEvent anEvent,boolean shouldScroll){  Point location=anEvent.getPoint();  if (list == null)   return;  int index=list.locationToIndex(location);  if (index == -1) {    if (location.y < 0)     index=0; else     index=comboBox.getModel().getSize() - 1;  }  if (list.getSelectedIndex() != index) {    list.setSelectedIndex(index);    if (shouldScroll)     list.ensureIndexIsVisible(index);  }}  }
class C{  public static String decodePassword(String password){  String decodedPassword=AccessController.doPrivileged(new DecodeAction(password));  return decodedPassword == null ? password : decodedPassword;}  }
class C{  protected TokenIterator createTokenIterator(HeaderIterator hit){  return new BasicTokenIterator(hit);}  }
class C{  @Override public java.awt.Image createAwtImage(java.awt.Color foreground,java.awt.Color background){  throw new UnsupportedOperationException(PdfException.TwoBarcodeMustBeExternally);}  }
class C{  private static String replaceChars(String str){  StringBuffer buf=new StringBuffer(str);  int length=buf.length();  for (int i=0; i < length; i++) {    char currentChar=buf.charAt(i);    if (currentChar == ' ') {      buf.setCharAt(i,'%');      buf.insert(i + 1,"20");      length=length + 2;      i=i + 2;    } else     if (currentChar == '\\') {      buf.setCharAt(i,'/');    }  }  return buf.toString();}  }
class C{  public void clearFailureLockout(){  clearAuthFailureTimes();  clearFailureLockedTime();}  }
class C{  public void resetCount(){  mProgress=0.0f;  mTargetProgress=0.0f;  invalidate();}  }
class C{  private TextImpl firstTextNodeInCurrentRun(){  TextImpl firstTextInCurrentRun=this;  for (Node p=getPreviousSibling(); p != null; p=p.getPreviousSibling()) {    short nodeType=p.getNodeType();    if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) {      firstTextInCurrentRun=(TextImpl)p;    } else {      break;    }  }  return firstTextInCurrentRun;}  }
class C{  public HomesUserDatabase(){  super();}  }
class C{  public void removeRowSetListener(RowSetListener listener){  listeners.remove(listener);}  }
class C{  public void testDivideRoundHalfDownNeg2(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=15;  String c="0E+5";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.appendData(", Esquire");  childData=child.getData();  assertEquals("characterdataAppendDataGetDataAssert","Margaret Martin, Esquire",childData);}  }
class C{  public void hideFloat(){  if (mFloatMenu != null) {    mFloatMenu.hide();  }}  }
class C{  private int checkACLForFolder(final ACLEntry entry,final String folder){  int acl=0;  if (folder.contains(entry.folder) || entry.folder.equals(File.separator)) {    acl=countAclByEntry(acl,entry);  }  return acl;}  }
class C{  @Override public String toString(){  StringBuilder risul=new StringBuilder(1000);  risul.append("ShapeSearchTree \n");  risul.append("objects: ... \n");  risul.append("methods: statistics() \n");  return risul.toString();}  }
class C{  public void println(){  newline();}  }
class C{  public ConditionDecision evaluate(String realm,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  String evalKey=null;  int idxUserMacro=key.indexOf(MACRO_USER);  if (idxUserMacro != -1) {    String attrName=key.substring(MACRO_USER.length() + 1);    evalKey=getAttributeFromSubject(subject,attrName);  } else {    evalKey=key;  }  String searchKey=value.replace(MACRO_RESOURCE,resourceName);  Set<String> evalValues=environment.get(searchKey);  String evalVal=((evalValues == null) || evalValues.isEmpty()) ? null : (String)evalValues.iterator().next();  if ((evalKey == null) && (evalVal != null)) {    return getFailedDecision(key,evalVal);  } else   if ((evalVal == null) && (evalKey != null)) {    return getFailedDecision(value,evalKey);  } else   if ((evalVal == null) && (evalKey == null)) {    return getFailedDecision(key,value);  }  return new ConditionDecision(evalValues.contains(evalKey),Collections.<String,Set<String>>emptyMap());}  }
class C{  public synchronized boolean canUndoOrRedo(){  if (indexOfNextAdd == edits.size()) {    return canUndo();  } else {    return canRedo();  }}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  Rectangle alloc=(Rectangle)a;  if (x < alloc.x + (alloc.width / 2)) {    bias[0]=Position.Bias.Forward;    return getStartOffset();  }  bias[0]=Position.Bias.Backward;  return getEndOffset();}  }
class C{  public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void paintColorChooserBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private boolean copyResource(Hashtable<String,Integer> errorList,String source,String dest){  if (debug > 1)   log("Copy: " + source + " To: "+ dest);  WebResource sourceResource=resources.getResource(source);  if (sourceResource.isDirectory()) {    if (!resources.mkdir(dest)) {      WebResource destResource=resources.getResource(dest);      if (!destResource.isDirectory()) {        errorList.put(dest,Integer.valueOf(WebdavStatus.SC_CONFLICT));        return false;      }    }    String[] entries=resources.list(source);    for (    String entry : entries) {      String childDest=dest;      if (!childDest.equals("/")) {        childDest+="/";      }      childDest+=entry;      String childSrc=source;      if (!childSrc.equals("/")) {        childSrc+="/";      }      childSrc+=entry;      copyResource(errorList,childSrc,childDest);    }  } else   if (sourceResource.isFile()) {    WebResource destResource=resources.getResource(dest);    if (!destResource.exists() && !destResource.getWebappPath().endsWith("/")) {      int lastSlash=destResource.getWebappPath().lastIndexOf('/');      if (lastSlash > 0) {        String parent=destResource.getWebappPath().substring(0,lastSlash);        WebResource parentResource=resources.getResource(parent);        if (!parentResource.isDirectory()) {          errorList.put(source,Integer.valueOf(WebdavStatus.SC_CONFLICT));          return false;        }      }    }    try (InputStream is=sourceResource.getInputStream()){      if (!resources.write(dest,is,false)) {        errorList.put(source,Integer.valueOf(WebdavStatus.SC_INTERNAL_SERVER_ERROR));        return false;      }    } catch (    IOException e) {      log(sm.getString("webdavservlet.inputstreamclosefail",source),e);    }  } else {    errorList.put(source,Integer.valueOf(WebdavStatus.SC_INTERNAL_SERVER_ERROR));    return false;  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetlastchildnull.class,args);}  }
class C{  public long ticks(){  long ret=0;synchronized (eventsList) {    if (eventsList.size() > 0) {      ret=((MidiEvent)eventsList.get(eventsList.size() - 1)).getTick();    }  }  return ret;}  }
class C{  public void testHeaderParams3(){  try {    Header h=tiHeaderFactory.createHeader("From","tel:07077004201;tag=gc2zbu");    System.err.println(h);    assertTrue(h instanceof FromHeader);    FromHeader c=(FromHeader)h;    URI u=c.getAddress().getURI();    assertTrue(u instanceof TelURL);    assertFalse("URI must have no params",((TelURL)u).getParameterNames().hasNext());    assertNotNull("Parameter 'tag' must be assigned to the header",c.getTag());  } catch (  ParseException e) {    e.printStackTrace();    fail(e.getMessage());  } finally {    logTestCompleted("testHeaderParams3()");  }}  }
class C{  public byte returnByte(byte in){  oneByte[0]=in;  cipher.processBlock(oneByte,0,oneByte,0);  return oneByte[0];}  }
class C{  public final PrivateKey generatePrivate(KeySpec keySpec) throws InvalidKeySpecException {  if (serviceIterator == null) {    return spi.engineGeneratePrivate(keySpec);  }  Exception failure=null;  KeyFactorySpi mySpi=spi;  do {    try {      return mySpi.engineGeneratePrivate(keySpec);    } catch (    Exception e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi);    }  } while (mySpi != null);  if (failure instanceof RuntimeException) {    throw (RuntimeException)failure;  }  if (failure instanceof InvalidKeySpecException) {    throw (InvalidKeySpecException)failure;  }  throw new InvalidKeySpecException("Could not generate private key",failure);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node removedNode;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(2);  attributes=testAddress.getAttributes();  removedNode=attributes.removeNamedItem("street");  value=removedNode.getNodeValue();  assertEquals("namednodemapRemoveNamedItemReturnNodeValueAssert","No",value);}  }
class C{  public void internalFrameOpened(InternalFrameEvent e){}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.SubjectLocalityElement createSubjectLocalityElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityElementImpl();}  }
class C{  public StateConstuctTile(PlaPointFloat p_location,StateInteractive p_parent_state,IteraBoard p_board_handling,Actlog p_logfile){  super(p_parent_state,p_board_handling,p_logfile);  actlog_start_scope(LogfileScope.CREATING_TILE);  add_corner(p_location);}  }
class C{  private int skipDelimiters(int startPos){  if (delimiters == null)   throw new NullPointerException();  int position=startPos;  while (!retDelims && position < maxPosition) {    if (!hasSurrogates) {      char c=str.charAt(position);      if ((c > maxDelimCodePoint) || (delimiters.indexOf(c) < 0))       break;      position++;    } else {      int c=str.codePointAt(position);      if ((c > maxDelimCodePoint) || !isDelimiter(c)) {        break;      }      position+=Character.charCount(c);    }  }  return position;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void warn(String msg,Object[] args) throws TransformerException {  java.lang.String fmsg=XSLMessages.createXPATHWarning(msg,args);  if (null != m_errorHandler) {    m_errorHandler.warning(new TransformerException(fmsg,m_locator));  } else {    System.out.println(fmsg + "; file " + m_locator.getSystemId()+ "; line "+ m_locator.getLineNumber()+ "; column "+ m_locator.getColumnNumber());  }}  }
class C{  protected void flushAckAndClearBuffer() throws IOException {  stateTrackingEngine.flush();  for (  Tuple t : buffer) {    collector.ack(t);  }  buffer.clear();}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public StubNotFoundException(String s){  super(s);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.IDPListType createIDPListType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPListTypeImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataappenddatanomodificationallowederr.class,args);}  }
class C{  public void release(){  if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {    EGL14.eglMakeCurrent(mEGLDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT);    EGL14.eglDestroyContext(mEGLDisplay,mEGLContext);    EGL14.eglReleaseThread();    EGL14.eglTerminate(mEGLDisplay);  }  mEGLDisplay=EGL14.EGL_NO_DISPLAY;  mEGLContext=EGL14.EGL_NO_CONTEXT;  mEGLConfig=null;}  }
class C{  private void updateVisibleChildren(StackScrollState resultState,StackScrollAlgorithmState state){  ViewGroup hostView=resultState.getHostView();  int childCount=hostView.getChildCount();  state.visibleChildren.clear();  state.visibleChildren.ensureCapacity(childCount);  for (int i=0; i < childCount; i++) {    ExpandableView v=(ExpandableView)hostView.getChildAt(i);    if (v.getVisibility() != View.GONE) {      StackScrollState.ViewState viewState=resultState.getViewStateForView(v);      viewState.notGoneIndex=state.visibleChildren.size();      state.visibleChildren.add(v);    }  }}  }
class C{  public boolean isTimeValid(){  boolean isTimeValid=true;  Conditions conditions=getConditions();  if (conditions != null) {    isTimeValid=conditions.checkDateValidity(currentTimeMillis());  }  return isTimeValid;}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_text_DecimalFormatSymbols(){  try {    DecimalFormatSymbols dfs=new DecimalFormatSymbols(Locale.CANADA);    DecimalFormat format1=new DecimalFormat("'$'1000.0000",dfs);    DecimalFormat format2=new DecimalFormat();    format2.applyPattern("'$'1000.0000");    format2.setDecimalFormatSymbols(dfs);    assertTrue("Constructed format did not match applied format object",format2.equals(format1));    assertTrue("Constructed format did not match applied format object",!format1.equals(new DecimalFormat("'$'1000.0000",new DecimalFormatSymbols(Locale.CHINA))));    try {      new DecimalFormat("'$'1000.0000",(DecimalFormatSymbols)null);      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }    try {      new DecimalFormat(null,new DecimalFormatSymbols());      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }    try {      new DecimalFormat(null,(DecimalFormatSymbols)null);      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }    try {      new DecimalFormat("$'",new DecimalFormatSymbols());      fail("Expected IllegalArgumentException was not thrown");    } catch (    IllegalArgumentException e) {    }  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public StateAttribute(byte[] octets){  super(octets);  state=new String(octets,2,octets.length - 2,Charset.forName("utf-8"));}  }
class C{  public void create(Client client,OAuth2Request request) throws InvalidClientMetadata {  Map<String,Set<String>> attrs=createClientAttributeMap(client);  try {    final SSOToken token=AccessController.doPrivileged(AdminTokenAction.getInstance());    final String realm=request.getParameter(OAuth2Constants.Custom.REALM);    AMIdentityRepository repo=idRepoFactory.create(realm,token);    repo.createIdentity(IdType.AGENTONLY,client.getClientID(),attrs);  } catch (  Exception e) {    logger.error("ConnectClientRegistration.Validate(): Unable to create client",e);    throw new InvalidClientMetadata();  }}  }
class C{  private <R extends Response>Promise<R,ResourceException> evaluateOnFailure(final Context context,final Request request,final ResourceException error){  if (onFailure != null) {    ScriptEntry scriptEntry=onFailure.getRight();    if (!scriptEntry.isActive()) {      return new ServiceUnavailableException("Failed to execute inactive script: " + onFailure.getRight().getName()).asPromise();    }    Script script=populateScript(scriptEntry,context,request);    script.put("exception",error.includeCauseInJsonValue().toJsonValue().asMap());    try {      evalScript(script,onFailure.getLeft(),onFailure.getRight().getName());    } catch (    ResourceException e) {      return e.asPromise();    }  }  return error.asPromise();}  }
class C{  protected void incrementAnimationIndex(){  int newValue=getAnimationIndex() + 1;  if (newValue < numFrames) {    setAnimationIndex(newValue);  } else {    setAnimationIndex(0);  }}  }
class C{  public void testDivisionKnuth1(){  byte aBytes[]={-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};  byte bBytes[]={-3,-3,-3,-3};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-5,-12,-33,-96,-36,-105,-56,92,15,48,-109};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void parseMinorVersion(String reqID,String minorVer) throws SAMLException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Request(Element): invalid " + "MinorVersion",e);    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));  }  if (minorVersion > SAMLConstants.PROTOCOL_MINOR_VERSION_ONE) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Request(Element): MinorVersion" + " of the Request is too high.");    }    throw new SAMLRequestVersionTooHighException(reqID + "|" + SAMLUtils.bundle.getString("requestVersionTooHigh"));  } else   if (minorVersion < SAMLConstants.PROTOCOL_MINOR_VERSION_ZERO) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Request(Element): MinorVersion" + " of the Request is too low.");    }    throw new SAMLRequestVersionTooLowException(reqID + "|" + SAMLUtils.bundle.getString("requestVersionTooLow"));  }}  }
class C{  public OAuthVerificationException(){  super();}  }
class C{  private boolean isCauseRecordDuplicatedException(Throwable ex,int maxLevels){  return isCauseException(ex,ORecordDuplicatedException.class,maxLevels);}  }
class C{  static public void assertNotNull(String message,Object object){  assertTrue(message,object != null);}  }
class C{  public void trace(Object message,Throwable t){}  }
class C{  public static String parseMatchingRuleUseOID(String definition) throws DirectoryException {  return parseOID(definition,ERR_PARSING_MATCHING_RULE_USE_OID);}  }
class C{  public String encodeURL(String url,Session session){  return encodeURL(url,sessionCookies.getCookieName(),session);}  }
class C{  public void add(SniffMessage sniffMessage){  boolean newSession=true;  ListIterator i=super.listIterator();  while (i.hasNext()) {    SniffMessageList temp=(SniffMessageList)i.next();    if (temp.getCallID().equals(sniffMessage.getCallID())) {      temp.add(sniffMessage);      newSession=false;    }  }  if (newSession == true) {    SniffMessageList newMessageList=new SniffMessageList();    newMessageList.add(sniffMessage);    super.add(newMessageList);  }}  }
class C{  public SchemaException(final LocalizableMessage message){  super(String.valueOf(message));  this.message=message;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  forwardTo();}  }
class C{  public void removeApps(List<AppInfo> apps){  mApps.removeApps(apps);}  }
class C{  public static String decodeFromRedirect(final String str){  final String classMethod="SAML2Utils.decodeFromRedirect: ";  if (StringUtils.isEmpty(str)) {    debug.error(classMethod + "input is null.");    return null;  }  if (debug.messageEnabled()) {    debug.message(classMethod + "input string length : " + str.length());    debug.message(classMethod + "input string is ===>" + str+ "<===");  }  byte[] input=Base64.decode(removeNewLineChars(str));  if (input == null || input.length == 0) {    debug.error(classMethod + "Base64 decoded result is null");    return null;  }  input=Arrays.copyOf(input,input.length + 1);  int bufferLength=2048;  try {    if (bufferLen != null && !bufferLen.isEmpty()) {      bufferLength=Integer.parseInt(bufferLen);    }  } catch (  NumberFormatException nfe) {    debug.error(classMethod + "Unable to parse buffer length.",nfe);  }  Inflater inflater=new Inflater(true);  InflaterInputStream inflaterInputStream=new InflaterInputStream(new ByteArrayInputStream(input),inflater);  ByteArrayOutputStream bout=new ByteArrayOutputStream(bufferLength);  try {    int b=inflaterInputStream.read();    while (b != -1) {      bout.write(b);      b=inflaterInputStream.read();    }  } catch (  IOException e) {    debug.error(classMethod + "There was a problem reading the compressed input",e);    return null;  } finally {    IOUtils.closeIfNotNull(inflaterInputStream);  }  String result;  try {    result=bout.toString("UTF-8");  } catch (  UnsupportedEncodingException uee) {    debug.error(classMethod + "cannot convert byte array to string.",uee);    return null;  }  if (debug.messageEnabled()) {    debug.message(classMethod + "Return value: \n" + result);  }  return result;}  }
class C{  public static Component createGlue(){  return new Filler(new Dimension(0,0),new Dimension(0,0),new Dimension(Short.MAX_VALUE,Short.MAX_VALUE));}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec08(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public synchronized void publish(java.util.logging.LogRecord logRecord){  logName=logRecord.getLoggerName();  String xml=getFormatter().format(logRecord);  if (xml == null || xml.length() <= 0) {    if (Debug.warningEnabled()) {      Debug.warning(logName + ":RemoteHandler.publish : formatted xml is null");    }    return;  }  Request request=new Request(xml);  if (logRecord instanceof ILogRecord) {    Map logInfoMap=((ILogRecord)logRecord).getLogInfoMap();    String loggedBySid=(String)logInfoMap.get(LogConstants.LOGGED_BY_SID);    if (loggedBySid != null) {      RequestSet reqSet=(RequestSet)reqSetMap.get(loggedBySid);      if (reqSet == null) {        reqSet=new RequestSet("Logging");      }      reqSet.addRequest(request);      reqSetMap.put(loggedBySid,reqSet);    }  }  this.recCount++;  if (this.recCount >= recCountLimit) {    if (Debug.messageEnabled()) {      Debug.message(logName + ":RemoteHandler.publish(): got " + recCount+ " records, flushing all");    }    nonBlockingFlush();  }}  }
class C{  private ValueRange rangeByWeek(TemporalAccessor temporal,TemporalField field){  int dow=localizedDayOfWeek(temporal);  int offset=startOfWeekOffset(temporal.get(field),dow);  ValueRange fieldRange=temporal.range(field);  return ValueRange.of(computeWeek(offset,(int)fieldRange.getMinimum()),computeWeek(offset,(int)fieldRange.getMaximum()));}  }
class C{  public void columns(String coldata[]){  column=coldata;  ncolumns=column.length;}  }
class C{  @DataProvider public Object[][] passwordWithAllSalts() throws Exception {  File cryptFile=TestCaseUtils.getTestResource("password-with-all-crypt-salts.txt");  List<String> cryptedPasswords=TestCaseUtils.readFileToLines(cryptFile);  String[][] passwordArgs=new String[cryptedPasswords.size()][];  for (int i=0; i < cryptedPasswords.size(); i++) {    passwordArgs[i]=new String[]{cryptedPasswords.get(i)};  }  return passwordArgs;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public void paintFileChooserBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  @Override public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object handback) throws IllegalArgumentException {synchronized (entries) {    if (filter instanceof BaseAttributeFilter) {      BaseAttributeFilter newFilter=(BaseAttributeFilter)filter;      Iterator<BaseNotificationBroadcasterEntry> items=entries.iterator();      while (items.hasNext()) {        BaseNotificationBroadcasterEntry item=items.next();        if ((item.listener == listener) && (item.filter != null) && (item.filter instanceof BaseAttributeFilter)&& (item.handback == handback)) {          BaseAttributeFilter oldFilter=(BaseAttributeFilter)item.filter;          String newNames[]=newFilter.getNames();          String oldNames[]=oldFilter.getNames();          if (newNames.length == 0) {            oldFilter.clear();          } else {            if (oldNames.length != 0) {              for (int i=0; i < newNames.length; i++)               oldFilter.addAttribute(newNames[i]);            }          }          return;        }      }    }    entries.add(new BaseNotificationBroadcasterEntry(listener,filter,handback));  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeName=getStringOptionValue(IArgument.ATTRIBUTE_NAME);  String trueValue=getStringOptionValue(ARGUMENT_TRUE_VALUE);  String trueI18nKey=getStringOptionValue(ARGUMENT_TRUE_I18N_KEY);  String falseValue=getStringOptionValue(ARGUMENT_FALSE_VALUE);  String falseI18nKey=getStringOptionValue(ARGUMENT_FALSE_I18N_KEY);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  String[] params={serviceName,schemaType,subSchemaName,attributeName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_ATTRIBUTE_SCHEMA_BOOLEAN_VALUES",params);  try {    AttributeSchema attrSchema=ss.getAttributeSchema(attributeName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeName,"attribute schema does not exist"};      attributeSchemaNoExist(attributeName,"FAILED_SET_ATTRIBUTE_SCHEMA_BOOLEAN_VALUES",args);    }    attrSchema.setBooleanValues(trueValue,trueI18nKey,falseValue,falseI18nKey);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_ATTRIBUTE_SCHEMA_BOOLEAN_VALUES",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-set-boolean-values-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeName,e.getMessage()};    debugError("SetAttributeSchemaBooleanValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_ATTRIBUTE_SCHEMA_BOOLEAN_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeName,e.getMessage()};    debugError("SetAttributeSchemaBooleanValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_ATTRIBUTE_SCHEMA_BOOLEAN_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public boolean equals(Object obj){  return (obj instanceof TextLayout) && equals((TextLayout)obj);}  }
class C{  public void testTestBitPositive1(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(!aNumber.testBit(number));}  }
class C{  @Override public Foo fetchByUuid_C_Last(String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  int count=countByUuid_C(uuid,companyId);  if (count == 0) {    return null;  }  List<Foo> list=findByUuid_C(uuid,companyId,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public static String createSubTransactionIdValue(){  return get().getTransactionId().createSubTransactionId().getValue();}  }
class C{  public void configChanged(ConfigurationActionEvent event){  String componentName=event.getComponentName();  if (debug.messageEnabled()) {    debug.message("IDFFMetaServiceListener.configChanged: name=" + componentName + ", config="+ event.getConfigurationName()+ ", realm="+ event.getRealm()+ ", type="+ event.getType());  }  if (componentName == null || componentName.equals(IDFFMetaUtils.IDFF_META_SERVICE)) {    if (debug.messageEnabled()) {      debug.message("IDFFMetaListener.configChanged: update cache");    }    IDFFMetaCache.clearCache();    KeyUtil.encHash.clear();  }}  }
class C{  @Override public Object lookup(String name) throws NamingException {  if (log.isDebugEnabled()) {    log.debug(sm.getString("selectorContext.methodUsingString","lookup",name));  }  return getBoundContext().lookup(parseName(name));}  }
class C{  private Set<String> parseStringToSet(final String data){  String[] splits;  if (data != null && data.length() > 0) {    splits=data.split(",");  } else {    splits=new String[]{};  }  Set<String> set=new HashSet<>();  if (splits.length > 0) {    for (    String split : splits) {      set.add(split.trim());    }  }  return set;}  }
class C{  public FastStringBuffer fsb(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FSB_NOT_SUPPORTED_XSTRINGFORCHARS,null));}  }
class C{  public static String extendedTrim(String content){  return content.replaceAll("\\s+"," ").replace("\n"," ").replace("\r"," ").trim();}  }
class C{  public SearchResultReference(String referralURL){  referralURLs=CollectionUtils.newArrayList(referralURL);  this.controls=new ArrayList<>(0);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ApplicationFilterConfig[");  sb.append("name=");  sb.append(filterDef.getFilterName());  sb.append(", filterClass=");  sb.append(filterDef.getFilterClass());  sb.append("]");  return (sb.toString());}  }
class C{  private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {synchronized (principals) {    oos.defaultWriteObject();  }}  }
class C{  private void init(String target){  StringTokenizer t=null;  if (!target.startsWith("\"")) {    throw new IllegalArgumentException("service principal [" + target + "] syntax invalid: "+ "improperly quoted");  } else {    t=new StringTokenizer(target,"\"",false);    subordinate=t.nextToken();    if (t.countTokens() == 2) {      t.nextToken();      service=t.nextToken();    } else     if (t.countTokens() > 0) {      throw new IllegalArgumentException("service principal [" + t.nextToken() + "] syntax invalid: "+ "improperly quoted");    }  }}  }
class C{  @Override public void update(){  if (frameControl++ == 0)   super.getSpriteFrame().setImage(super.getPlayerStates().get(0)); else   if (frameControl == 8)   super.getSpriteFrame().setImage(super.getPlayerStates().get(1)); else   if (frameControl == 16)   super.getSpriteFrame().setImage(super.getPlayerStates().get(2)); else   if (frameControl == 24) {    super.getSpriteFrame().setImage(super.getPlayerStates().get(3));    frameControl=0;  }  if (auraStateComplete) {    updatePosition();    if (!main.Main.auraLoop.isPlaying())     main.Main.auraLoop.play(0.6);  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public void onConversationsButtonClick(android.view.View view){  this.navigateToConversationsActivity();}  }
class C{  final boolean casBase(long cmp,long val){  return UNSAFE.compareAndSwapLong(this,BASE,cmp,val);}  }
class C{  private void ensureOpen() throws IOException {  if (out == null)   throw new IOException("Stream closed");}  }
class C{  public void requestSecondsUntilRequiredChangeTime(){  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_REQUIRED_CHANGE_TIME);}  }
class C{  public final void testGetKeysize(){  RSAKeyGenParameterSpec rkgps=new RSAKeyGenParameterSpec(512,BigInteger.valueOf(0L));  assertEquals(512,rkgps.getKeysize());}  }
class C{  void dispatchOnLauncherTransitionEnd(View v,boolean animated,boolean toWorkspace){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionEnd(mLauncher,animated,toWorkspace);  }  dispatchOnLauncherTransitionStep(v,1f);}  }
class C{  public NotLinkException(String file,String other,String reason){  super(file,other,reason);}  }
class C{  @Override synchronized protected int next(int nbits){  fillReservoir(4);  int n=0;  for (int i=0; i < 4; i++) {    n=(n << 8) | (reservoir[pos++] & 0xff);  }  return n & (0xffffffff >> (32 - nbits));}  }
class C{  public synchronized void restartPSearches(){  List<Class<? extends IDSEventListener>> listenersClasses=getEnabledListenersClasses();  for (Iterator<Class<? extends IDSEventListener>> iterator=persistentSearches.keySet().iterator(); iterator.hasNext(); ) {    Class<? extends IDSEventListener> pSearchListenerClass=iterator.next();    if (!listenersClasses.contains(pSearchListenerClass)) {      persistentSearches.get(pSearchListenerClass).search.stopSearch();      iterator.remove();    } else {      listenersClasses.remove(pSearchListenerClass);    }  }  for (Iterator<Class<? extends IDSEventListener>> iterator=listenersClasses.iterator(); iterator.hasNext(); ) {    Class<? extends IDSEventListener> listenerClass=iterator.next();    try {      IDSEventListener listener=listenerClass.newInstance();      EventServicePersistentSearch pSearch=new EventServicePersistentSearch(RETRY_INTERVAL,DN.valueOf(listener.getBase()),Filter.valueOf(listener.getFilter()),SearchScope.valueOf(listener.getScope()),getConnectionFactory(listener.getClass()),"objectclass");      pSearch.addListener(listener,new BigInteger(130,new Random()).toString());      pSearch.startQuery();      persistentSearches.put(listenerClass,new ListenerSearch(listener,pSearch));      logger.message("EventService.restartPSearches() - successfully initialized: {}",listenerClass);      iterator.remove();    } catch (    Exception e) {      logger.error("EventService.restartPSearches() Unable to start listener {}",listenerClass,e);    }  }  if (!listenersClasses.isEmpty()) {    for (    Class<? extends IDSEventListener> listenerClass : listenersClasses) {      logger.error("EventService.restartPSearches(): unable add listener: {}",listenerClass);    }  }  isRunning=true;}  }
class C{  static DirectoryServerPlugin[] addPlugin(DirectoryServerPlugin[] pluginArray,DirectoryServerPlugin plugin,PluginType pluginType,String pluginOrder){  if (pluginOrder == null || (pluginOrder=pluginOrder.trim()).length() == 0 || pluginOrder.equals("*")) {    DirectoryServerPlugin[] newPlugins=new DirectoryServerPlugin[pluginArray.length + 1];    System.arraycopy(pluginArray,0,newPlugins,0,pluginArray.length);    newPlugins[pluginArray.length]=plugin;    return newPlugins;  } else {    boolean starFound=false;    LinkedHashSet<String> initialPluginNames=new LinkedHashSet<>();    LinkedHashSet<String> finalPluginNames=new LinkedHashSet<>();    StringTokenizer tokenizer=new StringTokenizer(pluginOrder,",");    while (tokenizer.hasMoreTokens()) {      String token=tokenizer.nextToken().trim();      if (token.length() == 0) {        if (pluginArray.length == 0) {          logger.warn(WARN_CONFIG_PLUGIN_EMPTY_ELEMENT_IN_ORDER,pluginType.getName());        }      } else       if (token.equals("*")) {        if (starFound) {          if (pluginArray.length == 0) {            logger.warn(WARN_CONFIG_PLUGIN_MULTIPLE_WILDCARDS_IN_ORDER,pluginType.getName());          }        } else {          starFound=true;        }      } else {        String lowerName=toLowerCase(token);        if (starFound) {          if (initialPluginNames.contains(lowerName) || finalPluginNames.contains(lowerName)) {            if (pluginArray.length == 0) {              logger.warn(WARN_CONFIG_PLUGIN_LISTED_MULTIPLE_TIMES,pluginType.getName(),token);            }          }          finalPluginNames.add(lowerName);        } else {          if (initialPluginNames.contains(lowerName)) {            if (pluginArray.length == 0) {              logger.warn(WARN_CONFIG_PLUGIN_LISTED_MULTIPLE_TIMES,pluginType.getName(),token);            }          }          initialPluginNames.add(lowerName);        }      }    }    if (!starFound) {      if (pluginArray.length == 0) {        logger.warn(WARN_CONFIG_PLUGIN_ORDER_NO_WILDCARD,pluginType.getName());      }    }    HashMap<String,DirectoryServerPlugin> initialPlugins=new HashMap<>(initialPluginNames.size());    HashMap<String,DirectoryServerPlugin> finalPlugins=new HashMap<>(finalPluginNames.size());    ArrayList<DirectoryServerPlugin> otherPlugins=new ArrayList<>();    for (    DirectoryServerPlugin p : pluginArray) {      DN dn=p.getPluginEntryDN();      String lowerName=toLowerCase(dn.rdn().getFirstAVA().getAttributeValue().toString());      if (initialPluginNames.contains(lowerName)) {        initialPlugins.put(lowerName,p);      } else       if (finalPluginNames.contains(lowerName)) {        finalPlugins.put(lowerName,p);      } else {        otherPlugins.add(p);      }    }    DN dn=plugin.getPluginEntryDN();    String lowerName=toLowerCase(dn.rdn().getFirstAVA().getAttributeValue().toString());    if (initialPluginNames.contains(lowerName)) {      initialPlugins.put(lowerName,plugin);    } else     if (finalPluginNames.contains(lowerName)) {      finalPlugins.put(lowerName,plugin);    } else {      otherPlugins.add(plugin);    }    ArrayList<DirectoryServerPlugin> newList=new ArrayList<>(pluginArray.length + 1);    for (    String name : initialPluginNames) {      DirectoryServerPlugin p=initialPlugins.get(name);      if (p != null) {        newList.add(p);      }    }    newList.addAll(otherPlugins);    for (    String name : finalPluginNames) {      DirectoryServerPlugin p=finalPlugins.get(name);      if (p != null) {        newList.add(p);      }    }    DirectoryServerPlugin[] newPlugins=new DirectoryServerPlugin[newList.size()];    newList.toArray(newPlugins);    return newPlugins;  }}  }
class C{  public final PlaSide side_of(PlaPointInt p_1,PlaPointInt p_2){  PlaVectorInt v1=difference_by(p_1);  PlaVectorInt v2=p_2.difference_by(p_1);  return v1.side_of(v2);}  }
class C{  private void parse(String rawdata) throws MimeTypeParseException {  int slashIndex=rawdata.indexOf('/');  int semIndex=rawdata.indexOf(';');  if ((slashIndex < 0) && (semIndex < 0)) {    throw new MimeTypeParseException("Unable to find a sub type.");  } else   if ((slashIndex < 0) && (semIndex >= 0)) {    throw new MimeTypeParseException("Unable to find a sub type.");  } else   if ((slashIndex >= 0) && (semIndex < 0)) {    primaryType=rawdata.substring(0,slashIndex).trim().toLowerCase(Locale.ENGLISH);    subType=rawdata.substring(slashIndex + 1).trim().toLowerCase(Locale.ENGLISH);    parameters=new MimeTypeParameterList();  } else   if (slashIndex < semIndex) {    primaryType=rawdata.substring(0,slashIndex).trim().toLowerCase(Locale.ENGLISH);    subType=rawdata.substring(slashIndex + 1,semIndex).trim().toLowerCase(Locale.ENGLISH);    parameters=new MimeTypeParameterList(rawdata.substring(semIndex));  } else {    throw new MimeTypeParseException("Unable to find a sub type.");  }  if (!isValidToken(primaryType)) {    throw new MimeTypeParseException("Primary type is invalid.");  }  if (!isValidToken(subType)) {    throw new MimeTypeParseException("Sub type is invalid.");  }}  }
class C{  public void destroyModuleState(){  userTokenId=null;  userPrincipal=null;}  }
class C{  public RequirementsBuilder addDefinition(String name,RequirementsBuilder builder){  Reject.ifNull(name,builder);  definitions.put(name,prepareChildJsonValue(builder));  return this;}  }
class C{  private void send(Packet packet,RADIUSServer server) throws IOException {  if (server == null) {    throw new IOException("No RADIUS server is online.");  }  byte[] buffer=new byte[4096];  DatagramPacket dp=new DatagramPacket(buffer,buffer.length);  dp.setPort(server.getPort());  dp.setAddress(InetAddress.getByName(server.getHost()));  byte[] data=packet.getOctets();  dp.setLength(data.length);  dp.setData(data);  socket.send(dp);  if (debug.messageEnabled()) {    debug.message("Sent " + packet);  }}  }
class C{  protected void scanJspConfig() throws IOException, SAXException {  JspConfigDescriptor jspConfigDescriptor=context.getJspConfigDescriptor();  if (jspConfigDescriptor == null) {    return;  }  Collection<TaglibDescriptor> descriptors=jspConfigDescriptor.getTaglibs();  for (  TaglibDescriptor descriptor : descriptors) {    String taglibURI=descriptor.getTaglibURI();    String resourcePath=descriptor.getTaglibLocation();    if (!resourcePath.startsWith("/")) {      resourcePath=WEB_INF + resourcePath;    }    if (uriTldResourcePathMap.containsKey(taglibURI)) {      log.warn(Localizer.getMessage(MSG + ".webxmlSkip",resourcePath,taglibURI));      continue;    }    if (log.isTraceEnabled()) {      log.trace(Localizer.getMessage(MSG + ".webxmlAdd",resourcePath,taglibURI));    }    URL url=context.getResource(resourcePath);    if (url != null) {      TldResourcePath tldResourcePath;      if (resourcePath.endsWith(".jar")) {        tldResourcePath=new TldResourcePath(url,resourcePath,"META-INF/taglib.tld");      } else {        tldResourcePath=new TldResourcePath(url,resourcePath);      }      TaglibXml tld=tldParser.parse(tldResourcePath);      uriTldResourcePathMap.put(taglibURI,tldResourcePath);      tldResourcePathTaglibXmlMap.put(tldResourcePath,tld);      if (tld.getListeners() != null) {        listeners.addAll(tld.getListeners());      }    } else {      log.warn(Localizer.getMessage(MSG + ".webxmlFailPathDoesNotExist",resourcePath,taglibURI));      continue;    }  }}  }
class C{  public void readAttributes(ObjectInputStream in,MutableAttributeSet a) throws ClassNotFoundException, IOException {  readAttributeSet(in,a);}  }
class C{  @Override public void close() throws NamingException {  getBoundContext().close();}  }
class C{  private int[] findNearestArea(int cellX,int cellY,int spanX,int spanY,int[] direction,boolean[][] occupied,boolean blockOccupied[][],int[] result){  final int[] bestXY=result != null ? result : new int[2];  float bestDistance=Float.MAX_VALUE;  int bestDirectionScore=Integer.MIN_VALUE;  final int countX=mCountX;  final int countY=mCountY;  for (int y=0; y < countY - (spanY - 1); y++) {    inner:     for (int x=0; x < countX - (spanX - 1); x++) {      for (int i=0; i < spanX; i++) {        for (int j=0; j < spanY; j++) {          if (occupied[x + i][y + j] && (blockOccupied == null || blockOccupied[i][j])) {            continue inner;          }        }      }      float distance=(float)Math.hypot(x - cellX,y - cellY);      int[] curDirection=mTmpPoint;      computeDirectionVector(x - cellX,y - cellY,curDirection);      int curDirectionScore=direction[0] * curDirection[0] + direction[1] * curDirection[1];      boolean exactDirectionOnly=false;      boolean directionMatches=direction[0] == curDirection[0] && direction[0] == curDirection[0];      if ((directionMatches || !exactDirectionOnly) && Float.compare(distance,bestDistance) < 0 || (Float.compare(distance,bestDistance) == 0 && curDirectionScore > bestDirectionScore)) {        bestDistance=distance;        bestDirectionScore=curDirectionScore;        bestXY[0]=x;        bestXY[1]=y;      }    }  }  if (bestDistance == Float.MAX_VALUE) {    bestXY[0]=-1;    bestXY[1]=-1;  }  return bestXY;}  }
class C{  public BooleanByte(String identifier,AbstractTagFrameBody frameBody,int bitPosition){  super(identifier,frameBody);  if ((bitPosition < 0) || (bitPosition > 7)) {    throw new IndexOutOfBoundsException("Bit position needs to be from 0 - 7 : " + bitPosition);  }  this.bitPosition=bitPosition;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this),1000);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public Artifact createArtifact(byte[] typecode,int endpointIndex,String sourceID,String messageHandle) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ARTIFACT,typecode,endpointIndex,sourceID,messageHandle);  if (obj == null) {    return new ArtifactImpl(typecode,endpointIndex,sourceID,messageHandle);  } else {    return (Artifact)obj;  }}  }
class C{  private KeyListener createKeyListener(){  if (keyListener == null) {    keyListener=new KeyHandler();  }  return keyListener;}  }
class C{  public KerberosTicket(byte[] asn1Encoding,KerberosPrincipal client,KerberosPrincipal server,byte[] sessionKey,int keyType,boolean[] flags,Date authTime,Date startTime,Date endTime,Date renewTill,InetAddress[] clientAddresses){  init(asn1Encoding,client,server,sessionKey,keyType,flags,authTime,startTime,endTime,renewTill,clientAddresses);}  }
class C{  private void invokePostResponsePlugins(boolean workflowExecuted){  if (workflowExecuted) {    List<LocalBackendDeleteOperation> localOperations=(List)getAttachment(Operation.LOCALBACKENDOPERATIONS);    if (localOperations != null) {      for (      LocalBackendDeleteOperation localOperation : localOperations) {        getPluginConfigManager().invokePostResponseDeletePlugins(localOperation);      }    }  } else {    getPluginConfigManager().invokePostResponseDeletePlugins(this);  }}  }
class C{  public int countPackages(){  return countPackages(false);}  }
class C{  public static void registerBaseDN(DN baseDN,Backend<?> backend,boolean isPrivate) throws DirectoryException {  ifNull(baseDN,backend);synchronized (directoryServer) {    List<LocalizableMessage> warnings=directoryServer.baseDnRegistry.registerBaseDN(baseDN,backend,isPrivate);    for (    LocalizableMessage warning : warnings) {      logger.error(warning);    }    if (!baseDN.equals(DN.valueOf("cn=config"))) {      createWorkflow(baseDN,backend);    }  }}  }
class C{  public JKAuditType(final int id,final String name){  this.auditTypeId=id;  setAuditTypeName(name);}  }
class C{  private BigInteger exactDivideBy3(){  int len=mag.length;  int[] result=new int[len];  long x, w, q, borrow;  borrow=0L;  for (int i=len - 1; i >= 0; i--) {    x=(mag[i] & LONG_MASK);    w=x - borrow;    if (borrow > x) {      borrow=1L;    } else {      borrow=0L;    }    q=(w * 0xAAAAAAABL) & LONG_MASK;    result[i]=(int)q;    if (q >= 0x55555556L) {      borrow++;      if (q >= 0xAAAAAAABL)       borrow++;    }  }  result=trustedStripLeadingZeroInts(result);  return new BigInteger(result,signum);}  }
class C{  @Override public void publish(LogRecord record){  super.publish(record);  super.flush();}  }
class C{  private void writePendingText() throws SAXException {  int len=textBuf.length();  if (len != 0)   writer.characters(textBuf.toString().toCharArray(),0,len);}  }
class C{  public static String queryStringFromMap(Map pmap){  Iterator iter=pmap.keySet().iterator();  StringBuilder buf=new StringBuilder();  boolean priorparam=false;  while (iter.hasNext()) {    String name=(String)iter.next();    String val=(String)pmap.get(name);    if (priorparam)     buf.append("&");    buf.append(name).append("=").append(URLEncoder.encode(val));    priorparam=true;  }  return buf.toString();}  }
class C{  public void test_toLocaleString(){  Locale loc=Locale.getDefault();  Locale.setDefault(Locale.US);  TimeZone tz=TimeZone.getDefault();  TimeZone.setDefault(TimeZone.getTimeZone("GMT"));  try {    assertEquals("Did not convert epoch to GMT string correctly","Jan 1, 1970 12:00:00 AM",new Date(0).toLocaleString());    assertEquals("Did not convert epoch + 1yr to GMT string correctly","Jan 1, 1971 12:00:00 AM",new Date((long)365 * 24 * 60* 60* 1000).toLocaleString());  }  finally {    Locale.setDefault(loc);    TimeZone.setDefault(tz);  }}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public boolean isRowSelected(int row){  return listSelectionModel.isSelectedIndex(row);}  }
class C{  public NotCondition(EntitlementCondition eCondition){  this.eCondition=eCondition;}  }
class C{  public StylesheetRoot(ErrorListener errorListener) throws TransformerConfigurationException {  super(null);  setStylesheetRoot(this);  try {    m_selectDefault=new XPath("node()",this,this,XPath.SELECT,errorListener);    initDefaultRule(errorListener);  } catch (  TransformerException se) {    throw new TransformerConfigurationException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_INIT_DEFAULT_TEMPLATES,null),se);  }}  }
class C{  public EntryChangeNotificationControl(PersistentSearchChangeType changeType,DN previousDN,long changeNumber){  this(false,changeType,previousDN,changeNumber);}  }
class C{  static void sort(float[] a,int left,int right,float[] work,int workBase,int workLen){  while (left <= right && Float.isNaN(a[right])) {    --right;  }  for (int k=right; --k >= left; ) {    float ak=a[k];    if (ak != ak) {      a[k]=a[right];      a[right]=ak;      --right;    }  }  doSort(a,left,right,work,workBase,workLen);  int hi=right;  while (left < hi) {    int middle=(left + hi) >>> 1;    float middleValue=a[middle];    if (middleValue < 0.0f) {      left=middle + 1;    } else {      hi=middle;    }  }  while (left <= right && Float.floatToRawIntBits(a[left]) < 0) {    ++left;  }  for (int k=left, p=left - 1; ++k <= right; ) {    float ak=a[k];    if (ak != 0.0f) {      break;    }    if (Float.floatToRawIntBits(ak) < 0) {      a[k]=0.0f;      a[++p]=-0.0f;    }  }}  }
class C{  boolean publish(ReplicationMsg msg,boolean retryOnFailure){  return publish(msg,false,retryOnFailure);}  }
class C{  private void retrieveResourceType(JsonValue jsonValue,Subject callingSubject,String realm) throws EntitlementException, ResourceException {  final String applicationName=jsonValue.get("applicationName").asString();  if (applicationName == null) {    throw new BadRequestException("Invalid application name defined in request");  }  final ApplicationService applicationService=applicationServiceFactory.create(callingSubject,realm);  final Application application=applicationService.getApplication(applicationName);  if (application == null) {    throw new NotFoundException("Unable to find application " + applicationName);  }  if (application.getResourceTypeUuids().size() != 1) {    throw new BadRequestException("Cannot create policy under an application with more than " + "one resource type using version 1.0 of this endpoint");  }  final String resourceTypeUuid=application.getResourceTypeUuids().iterator().next();  jsonValue.put(RESOURCE_TYPE_UUID,resourceTypeUuid);}  }
class C{  public synchronized Reference<? extends T> remove(long timeoutMillis) throws InterruptedException {  if (timeoutMillis < 0) {    throw new IllegalArgumentException("timeout < 0: " + timeoutMillis);  }  if (head != null) {    return poll();  }  if (timeoutMillis == 0 || (timeoutMillis > Long.MAX_VALUE / NANOS_PER_MILLI)) {    do {      wait(0);    } while (head == null);    return poll();  }  long nanosToWait=timeoutMillis * NANOS_PER_MILLI;  int timeoutNanos=0;  long startTime=System.nanoTime();  while (true) {    wait(timeoutMillis,timeoutNanos);    if (head != null) {      break;    }    long nanosElapsed=System.nanoTime() - startTime;    long nanosRemaining=nanosToWait - nanosElapsed;    if (nanosRemaining <= 0) {      break;    }    timeoutMillis=nanosRemaining / NANOS_PER_MILLI;    timeoutNanos=(int)(nanosRemaining - timeoutMillis * NANOS_PER_MILLI);  }  return poll();}  }
class C{  TopologyMsg(byte[] in,short version) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  final byte msgType=scanner.nextByte();  if (msgType != MSG_TYPE_TOPOLOGY) {    throw new DataFormatException("Input is not a valid " + getClass().getCanonicalName());  }  int nDsInfo=scanner.nextByte();  final Map<Integer,DSInfo> replicaInfos=new HashMap<>(Math.max(0,nDsInfo));  while (nDsInfo > 0 && !scanner.isEmpty()) {    final DSInfo dsInfo=nextDSInfo(scanner,version);    replicaInfos.put(dsInfo.getDsId(),dsInfo);    nDsInfo--;  }  int nRsInfo=scanner.nextByte();  final List<RSInfo> rsInfos=new ArrayList<>(Math.max(0,nRsInfo));  while (nRsInfo > 0 && !scanner.isEmpty()) {    rsInfos.add(nextRSInfo(scanner,version));    nRsInfo--;  }  this.replicaInfos=Collections.unmodifiableMap(replicaInfos);  this.rsInfos=Collections.unmodifiableList(rsInfos);}  }
class C{  public boolean visitUnionPath(ExpressionOwner owner,UnionPathIterator path){  return true;}  }
class C{  public void onJoinMeetingButtonClick(android.view.View view){  InputMethodHelper.hideSoftKeyBoard(this.getApplication().getApplicationContext(),view.getWindowToken());  if (meetingJoined) {    try {      this.anonymousConversation.leave();      this.meetingJoined=false;      this.updateUiState();    } catch (    SFBException e) {      e.printStackTrace();    }  } else {    final android.widget.TextView displayNameTextView=(android.widget.TextView)findViewById(R.id.displayNameEditTextId);    final android.widget.EditText joinMeetingEditText=(android.widget.EditText)findViewById(R.id.meetingUriEditTextId);    String meetingUriString=joinMeetingEditText.getText().toString();    URI meetingUri=URI.create(meetingUriString);    try {      this.anonymousConversation=this.application.joinMeetingAnonymously(displayNameTextView.getText().toString(),meetingUri);      SFBDemoApplication application=(SFBDemoApplication)getApplication();      application.setAnonymousConversation(this.anonymousConversation);      this.conversationPropertyChangeListener=new ConversationPropertyChangeListener();      this.anonymousConversation.addOnPropertyChangedCallback(this.conversationPropertyChangeListener);    } catch (    SFBException e) {      e.printStackTrace();    }  }}  }
class C{  public void testSocket_Block_BasicStatusAfterConnect() throws IOException {  this.channel1.connect(localAddr1);  DatagramSocket s1=this.channel1.socket();  assertSocketAfterConnect(s1);  DatagramSocket s2=this.channel1.socket();  assertSame(s1,s2);}  }
class C{  public boolean threadDone(TaskThread taskThread,Task completedTask,TaskState taskState){  schedulerLock.lock();  try {    completedTask.setCompletionTime(TimeThread.getTime());    completedTask.setTaskState(taskState);    addCompletedTask(completedTask);    try {      completedTask.sendNotificationEMailMessage();    } catch (    Exception e) {      logger.traceException(e);    }    String taskID=completedTask.getTaskID();    if (activeThreads.remove(taskID) == null) {      return false;    }    scheduleNextRecurringTaskIteration(completedTask,new GregorianCalendar());    writeState();    if (isRunning) {      idleThreads.add(taskThread);      return true;    } else {      return false;    }  }  finally {    schedulerLock.unlock();  }}  }
class C{  private static TypeDescription cqlStatementDescription(){  return new TypeDescription.Latent("org.apache.cassandra.cql3.CQLStatement",Modifier.INTERFACE,null,null);}  }
class C{  public MalformedCookieException(String message){  super(message);}  }
class C{  public WeakHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  protected void paintEnabledText(JLabel l,Graphics g,String s,int textX,int textY){  int mnemIndex=l.getDisplayedMnemonicIndex();  g.setColor(l.getForeground());  SwingUtilities2.drawStringUnderlineCharAt(l,g,s,mnemIndex,textX,textY);}  }
class C{  private static RMIClassLoaderSpi initializeProvider(){  String providerClassName=System.getProperty("java.rmi.server.RMIClassLoaderSpi");  if (providerClassName != null) {    if (providerClassName.equals("default")) {      return defaultProvider;    }    try {      Class<? extends RMIClassLoaderSpi> providerClass=Class.forName(providerClassName,false,ClassLoader.getSystemClassLoader()).asSubclass(RMIClassLoaderSpi.class);      return providerClass.newInstance();    } catch (    ClassNotFoundException e) {      throw new NoClassDefFoundError(e.getMessage());    }catch (    IllegalAccessException e) {      throw new IllegalAccessError(e.getMessage());    }catch (    InstantiationException e) {      throw new InstantiationError(e.getMessage());    }catch (    ClassCastException e) {      Error error=new LinkageError("provider class not assignable to RMIClassLoaderSpi");      error.initCause(e);      throw error;    }  }  Iterator<RMIClassLoaderSpi> iter=ServiceLoader.load(RMIClassLoaderSpi.class,ClassLoader.getSystemClassLoader()).iterator();  if (iter.hasNext()) {    try {      return iter.next();    } catch (    ClassCastException e) {      Error error=new LinkageError("provider class not assignable to RMIClassLoaderSpi");      error.initCause(e);      throw error;    }  }  return defaultProvider;}  }
class C{  public String toString(){  return (ss.toString());}  }
class C{  public void warn(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg,Object args[]) throws TransformerException {  String formattedMsg=XSLMessages.createWarning(msg,args);  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler)   errHandler.warning(new TransformerException(formattedMsg,srcLctr)); else   System.out.println(formattedMsg);}  }
class C{  public void addStringProperty(String key,String value){  getProperties().addProperty(key,value);}  }
class C{  public synchronized boolean isConsumer(ImageConsumer ic){  return theConsumers.contains(ic);}  }
class C{  public void add(N nodeA,N nodeB) throws NullPointerException {  theNeighbors.get(nodeA).add(nodeB);  theNeighbors.get(nodeB).add(nodeA);}  }
class C{  @BeforeMethod public void clearConfigEntries() throws Exception {  deleteAttrsEntry(configDN,dsConfigBaseDN);  deleteAttrsEntry(configDN,dsConfigEnforceIntegrity);  deleteAttrsEntry(configDN,dsConfigAttrFiltMapping);  replaceAttrEntry(configDN,dsConfigAttrType,"seeAlso");  replaceAttrEntry(configDN,dsConfigUpdateInterval,"0 seconds");  TestCaseUtils.initializeTestBackend(true);  addTestEntries("o=test");  TestCaseUtils.clearBackend("userRoot","dc=example,dc=com");  addTestEntries("dc=example,dc=com");}  }
class C{  public LockableFileWriter(File file,String encoding) throws IOException {  this(file,encoding,false,null);}  }
class C{  @Override public String format(java.util.logging.LogRecord logRecord){  Map logInfoTable=null;  if ((LogManagerUtil.isAMLoggingMode()) && (logRecord instanceof com.sun.identity.log.ILogRecord)) {    logInfoTable=((com.sun.identity.log.ILogRecord)logRecord).getLogInfoMap();  }  StringBuilder sbuffer=new StringBuilder();  StringBuilder stringForMAC=new StringBuilder();  try {    String[] allFields=lmanager.getAllFields();    Set selectedFields=lmanager.getSelectedFieldSet();    String strTime=secureTimestampGenerator.getTimestamp();    sbuffer.append("\"").append(strTime).append("\"\t");    stringForMAC.append("\"").append(strTime).append("\"");    StringBuffer message=processString(formatMessage(logRecord));    boolean escapeDone=false;    for (int i=0; i < message.length(); i++) {      if ((message.charAt(i) == ' ') || (message.charAt(i) == '\t')) {        sbuffer.append("\"").append(message).append("\"\t");        stringForMAC.append("\"").append(message).append("\"");        escapeDone=true;        break;      }    }    if (!escapeDone) {      sbuffer.append(message).append("\t");      stringForMAC.append(message);    }    String key=null;    String value=null;    for (int i=2; i < allFields.length; i++) {      key=allFields[i];      if ((key != null) && (key.length() != 0) && (selectedFields != null)&& (logInfoTable != null)&& (selectedFields.contains(key))) {        value=(String)logInfoTable.get(key);        StringBuffer valueBuffer=processString(value);        escapeDone=false;        for (int j=0; j < valueBuffer.length(); j++) {          if ((valueBuffer.charAt(j) == ' ') || (valueBuffer.charAt(j) == '\t')) {            sbuffer.append("\"").append(valueBuffer).append("\"\t");            stringForMAC.append("\"").append(valueBuffer).append("\"");            escapeDone=true;            break;          }        }        if (!escapeDone) {          sbuffer.append(valueBuffer).append("\t");          stringForMAC.append(valueBuffer);        }      } else {        sbuffer.append("-").append("\t");        stringForMAC.append("-");      }    }  } catch (  Exception e) {    Debug.error("SecureELFFormatter: Exception in String Handling",e);  }  String key=LogConstants.SIGNATURE_FIELDNAME;  if ((logInfoTable != null) && (logInfoTable.containsKey(key))) {    sbuffer.append("-\t").append(logInfoTable.get(key));  } else {    try {      Object[] obj={logRecord.getLoggerName()};      String mac=fieldGenerator.generateLogField(stringForMAC.toString(),obj);      sbuffer.append(mac).append("\t").append("-");    } catch (    Exception e) {      Debug.error("SecureLFFormatter: couldnot generate mac",e);      sbuffer.append("\"MAC NOT AVAILABLE\"").append("\t").append("-");    }  }  sbuffer.append("\n");  return sbuffer.toString();}  }
class C{  protected <V>V parseJson(InputStream stream,Type type,Type listType) throws IOException {  BufferedReader reader=new BufferedReader(new InputStreamReader(stream,CHARSET_UTF8),bufferSize);  if (listType == null)   try {    return gson.fromJson(reader,type);  } catch (  JsonParseException jpe) {    L.e(jpe);    IOException ioe=new IOException("Parse exception converting JSON to object");    ioe.initCause(jpe);    throw ioe;  } finally {    try {      reader.close();    } catch (    IOException ignored) {    }  } else {    JsonReader jsonReader=new JsonReader(reader);    try {      if (jsonReader.peek() == BEGIN_ARRAY)       return gson.fromJson(jsonReader,listType); else       return gson.fromJson(jsonReader,type);    } catch (    JsonParseException jpe) {      L.e(jpe);      IOException ioe=new IOException("Parse exception converting JSON to object");      ioe.initCause(jpe);      throw ioe;    } finally {      try {        jsonReader.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  public void testAddMultipleSpan(){  mRichTextView.formatSpan(0,5,EnumSet.of(RichTextView.FormatType.BOLD,RichTextView.FormatType.ITALIC));  Object[] spans=mRichTextView.getSpans();  assertEquals(2,spans.length);  Object firstSpan=spans[0];  assertTrue(firstSpan instanceof StyleSpan);  assertTrue(((StyleSpan)firstSpan).getStyle() == Typeface.BOLD);  Object secondSpan=spans[1];  assertTrue(secondSpan instanceof StyleSpan);  assertTrue(((StyleSpan)secondSpan).getStyle() == Typeface.ITALIC);}  }
class C{  public static MethodExpression createMethodExpression(final String expression,final Class<?> returnType){  Assert.assertNotNull(expression);  JKJsfUtil.logger.fine("createMethodEpression:".concat(expression));  final FacesContext context=FacesContext.getCurrentInstance();  return context.getApplication().getExpressionFactory().createMethodExpression(context.getELContext(),expression,returnType,new Class[0]);}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=NtConDetector.getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  @DataProvider public Object[][] superiorData() throws Exception {  Schema schema=new SchemaBuilder(schema()).buildObjectClass("1.2.3.1").names("parent1").type(ObjectClassType.ABSTRACT).addToSchema().buildObjectClass("1.2.3.2").names("parent2").type(ObjectClassType.ABSTRACT).addToSchema().buildObjectClass("1.2.3.3").names("parent3").type(ObjectClassType.STRUCTURAL).addToSchema().buildObjectClass("1.2.3.4").names("parent4").type(ObjectClassType.STRUCTURAL).addToSchema().buildObjectClass("1.2.3.5").names("parent5").type(ObjectClassType.AUXILIARY).addToSchema().buildObjectClass("1.2.3.6").names("parent6").type(ObjectClassType.AUXILIARY).addToSchema().toSchema();  return new Object[][]{{"parent1","parent2",ObjectClassType.ABSTRACT,schema},{"parent3","parent4",ObjectClassType.STRUCTURAL,schema},{"parent5","parent6",ObjectClassType.AUXILIARY,schema}};}  }
class C{  public int hashCode(){  return (9 * colorModel.hashCode()) + (14 * sampleModel.hashCode());}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=in.readFields();  String language=(String)fields.get("language","");  String script=(String)fields.get("script","");  String country=(String)fields.get("country","");  String variant=(String)fields.get("variant","");  String extStr=(String)fields.get("extensions","");  baseLocale=BaseLocale.getInstance(convertOldISOCodes(language),script,country,variant);  if (extStr.length() > 0) {    try {      InternalLocaleBuilder bldr=new InternalLocaleBuilder();      bldr.setExtensions(extStr);      localeExtensions=bldr.getLocaleExtensions();    } catch (    LocaleSyntaxException e) {      throw new IllformedLocaleException(e.getMessage());    }  } else {    localeExtensions=null;  }}  }
class C{  public boolean hasToTag(){  return hasParameter(ParameterNames.TO_TAG);}  }
class C{  public PAOSException(String message){  super(message);}  }
class C{  public static GitHubClient createClient(String url){  try {    String host=new URL(url).getHost();    if (HOST_DEFAULT.equals(host) || HOST_GISTS.equals(host))     host=HOST_API;    return new GitHubClient(host);  } catch (  IOException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public void testCompareToPosPos1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(1,aNumber.compareTo(bNumber));}  }
class C{  public void removeSelectedMarker(){  this.markers.remove(this.selectedMarker);  this.selectedMarker.remove();}  }
class C{  public static void processImage(GifImageData image){  processImage(image,-1);}  }
class C{  public UnsupportedHttpVersionException(){  super();}  }
class C{  public void append(byte[] bytes,int offset,int len){  ensureCapacity(length + len);  System.arraycopy(bytes,offset,buffer,length,len);  length+=len;}  }
class C{  public AttributeFilter(){  includeAllUserAttributes=true;}  }
class C{  public static boolean isXMLName(String name){  if (name.length() > 0 && !isNameStartChar(name.charAt(0))) {    return false;  }  for (int i=1; i < name.length(); i++) {    if (!isNameChar(name.charAt(i))) {      return false;    }  }  return true;}  }
class C{  private TrustAnchor findTrustAnchorBySubjectAndPublicKey(X509Certificate cert){  TrustAnchor trustAnchor=trustedCertificateIndex.findBySubjectAndPublicKey(cert);  if (trustAnchor != null) {    return trustAnchor;  }  if (trustedCertificateStore == null) {    return null;  }  if (trustedCertificateStore.isTrustAnchor(cert)) {    return trustedCertificateIndex.index(cert);  }  return null;}  }
class C{  void createMap(Thread t,T firstValue){  t.threadLocals=new ThreadLocalMap(this,firstValue);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthTabbedPaneUI();}  }
class C{  public void updateUI(){  setUI((ColorChooserUI)UIManager.getUI(this));}  }
class C{  public static boolean isWritable(Path path){  return isAccessible(path,AccessMode.WRITE);}  }
class C{  private void fixTrans(){  matrix.getValues(m);  float transX=m[Matrix.MTRANS_X];  float transY=m[Matrix.MTRANS_Y];  float fixTransX=getFixTrans(transX,viewWidth,getImageWidth());  float fixTransY=getFixTrans(transY,viewHeight,getImageHeight());  if (fixTransX != 0 || fixTransY != 0) {    matrix.postTranslate(fixTransX,fixTransY);  }}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    StyledEditorKit kit=getStyledEditorKit(editor);    MutableAttributeSet attr=kit.getInputAttributes();    boolean underline=(StyleConstants.isUnderline(attr)) ? false : true;    SimpleAttributeSet sas=new SimpleAttributeSet();    StyleConstants.setUnderline(sas,underline);    setCharacterAttributes(editor,sas,false);  }}  }
class C{  public FrameBodyRVA2(FrameBodyRVAD body){  setObjectValue(DataTypes.OBJ_DATA,body.getObjectValue(DataTypes.OBJ_DATA));}  }
class C{  public PrepareNotSupported(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean isEmpty(){  return parameters.isEmpty();}  }
class C{  private void save(){  try {    FileUtils.write(new File(jarName + "-Scan.html"),text);  } catch (  IOException e) {    JOptionPane.showMessageDialog(null,e.getMessage(),"Error saving file!",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public TRANSACTION_REQUIRED(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public static <E>SortedSet<E> synchronizedSortedSet(SortedSet<E> set){  if (set == null) {    throw new NullPointerException("set == null");  }  return new SynchronizedSortedSet<E>(set);}  }
class C{  public static IOFileFilter ageFileFilter(Date cutoffDate,boolean acceptOlder){  return new AgeFileFilter(cutoffDate,acceptOlder);}  }
class C{  protected ConfigAuditor(Debug debug,AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,SSOToken runAs,String realm,String objectId,Map<String,Object> initialState,Set<SMSAuditFilter> filters){  this.debug=debug;  this.auditEventPublisher=auditEventPublisher;  this.auditEventFactory=auditEventFactory;  this.objectId=objectId;  this.startTime=currentTimeMillis();  this.filters=filters;  this.runAs=runAs;  if (realm == null) {    this.realm=AuditConstants.NO_REALM;  } else {    this.realm=realm;  }  String runAsName=null;  if (runAs != null) {    runAsName=AMAuditEventBuilderUtils.getUserId(runAs);  }  this.runAsName=runAsName;  this.beforeState=convertObjectToJsonValue(initialState);}  }
class C{  public static Iterator search(SSOToken token,String dn,String filter,int numOfEntries,int timeLimit,boolean sortResults,boolean ascendingOrder,Set exclude) throws SMSException {  try {    return smsObject.search(token,dn,filter,numOfEntries,timeLimit,sortResults,ascendingOrder,exclude);  } catch (  SSOException ssoe) {    debug.error("SMSEntry: Search ERROR: " + filter,ssoe);    throw new SMSException(bundle.getString("sms-error-in-searching"),ssoe,"sms-error-in-searching");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Attr districtNode;  String attrName;  Node setNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(1);  newAttribute=doc.createAttribute("lang");  attributes=testAddress.getAttributes();  setNode=attributes.setNamedItem(newAttribute);  districtNode=(Attr)attributes.getNamedItem("lang");  attrName=districtNode.getNodeName();  assertEqualsAutoCase("attribute","nodeName","lang",attrName);}  }
class C{  protected HttpURLConnection createPost(String uri) throws IOException {  return createConnection(uri,METHOD_POST);}  }
class C{  public static int indexOf(String value,String substring){  return value != null && substring != null ? value.indexOf(substring) : -1;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.removeNamedItemNS("http://www.nist.gov","domestic");  attribute=(Attr)attributes.getNamedItemNS("http://www.nist.gov","domestic");  assertNull("namednodemapremovenameditemns01",attribute);}  }
class C{  protected void objectClassSelected(JList<?> list){  String o=(String)list.getSelectedValue();  Schema schema=getInfo().getServerDescriptor().getSchema();  if (o != null && schema != null) {    ObjectClass oc=schema.getObjectClass(o);    if (!oc.isPlaceHolder()) {      notifySchemaSelectionListeners(oc);    }  }}  }
class C{  protected PortableRemoteObject() throws RemoteException {  if (proDelegate != null) {    PortableRemoteObject.exportObject((Remote)this);  }}  }
class C{  public void paintSliderTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();    startPreview();  }}  }
class C{  @Deprecated public RMISecurityException(String name,String arg){  this(name);}  }
class C{  private static StringBuilder dump(StringBuilder _cbuffer,byte value){  for (int j=0; j < 2; j++) {    _cbuffer.append(_hexcodes[value >> _shifts[j + 6] & 15]);  }  return _cbuffer;}  }
class C{  public void testByteOverflowMetadata() throws Exception {  ByteArrayInputStream bais1=new ByteArrayInputStream(raw5);  ByteArrayInputStream bais2=new ByteArrayInputStream(raw5);  ByteArrayInputStream bais3=new ByteArrayInputStream(raw5);  WebSocketCodec codec=new WebSocketCodec(true,false);  String s=new String(codec.decode(bais1));  System.out.println(s);  assertTrue(s.startsWith("REGISTER"));  s=new String(codec.decode(bais2));  System.out.println(s);  s=new String(codec.decode(bais3));  System.out.println(s);  assertNotNull(s);  assertTrue(s.startsWith("REGISTER"));}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public String nextString() throws DataFormatException {  try {    final int offset=findZeroSeparator();    if (offset > 0) {      final String s=bytes.readStringUtf8(offset);      skipZeroSeparator();      return s;    }    skipZeroSeparator();    return null;  } catch (  IndexOutOfBoundsException e) {    throw new DataFormatException(e.getMessage());  }}  }
class C{  protected void installListeners(JPanel p){  p.addPropertyChangeListener(this);}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  if (validSession) {    super.beginDisplay(event);    SMProfileModel model=(SMProfileModel)getModel();    Map map=model.getServerNames();    OptionList optList=new OptionList();    CCDropDownMenu child=(CCDropDownMenu)getChild(CHILD_SERVER_NAME_MENU);    String value=(String)child.getValue();    if (map != null && !map.isEmpty()) {      for (Iterator iter=map.keySet().iterator(); iter.hasNext(); ) {        String str=(String)iter.next();        String val=(String)map.get(str);        optList.add(str,val);        if (value == null) {          child.setValue(val);        }      }    }    child.setOptions(optList);    value=(String)child.getValue();    model.setProfileServerName(value);    SMSessionCache cache=null;    try {      cache=model.getSessionCache(getFilterString());      if (cache != null) {        populateTableModel(cache.getSessions());        String errorMessage=cache.getErrorMessage();        if (errorMessage != null && errorMessage.length() > 0) {          setInlineAlertMessage(CCAlert.TYPE_WARNING,"message.warning",errorMessage);        }      }    } catch (    AMConsoleException ae) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",ae.getMessage());    }    if (cache == null) {      populateTableModel(Collections.EMPTY_LIST);    }    setPageSessionAttribute(SERVER_NAME,value);    addSessionsTab(model,1);  }}  }
class C{  public boolean isVisible(){  return foregroundCounter > 0;}  }
class C{  public boolean cover(ServerState covered){  for (  CSN coveredChange : covered.serverIdToCSN.values()) {    if (!cover(coveredChange)) {      return false;    }  }  return true;}  }
class C{  public BigInt(BigInteger i){  byte[] temp=i.toByteArray();  if ((temp[0] & 0x80) != 0)   throw new IllegalArgumentException("negative BigInteger");  if (temp[0] != 0)   places=temp; else {    if (temp.length == 1) {      places=new byte[1];      places[0]=(byte)0;    } else {      places=new byte[temp.length - 1];      for (int j=1; j < temp.length; j++)       places[j - 1]=temp[j];    }  }}  }
class C{  public SecurityAssertion(String assertionID,java.lang.String issuer,Date issueInstant,Conditions conditions,Set statements) throws SAMLException {  super(assertionID,issuer,issueInstant,conditions,statements);}  }
class C{  @Override public void audit(JsonValue jsonValue){}  }
class C{  private static void handleEOD(EncoderContext context,CharSequence buffer){  try {    int count=buffer.length();    if (count == 0) {      return;    }    if (count == 1) {      context.updateSymbolInfo();      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      int remaining=context.getRemainingCharacters();      if (remaining == 0 && available <= 2) {        return;      }    }    if (count > 4) {      throw new IllegalStateException("Count must not exceed 4");    }    int restChars=count - 1;    String encoded=encodeToCodewords(buffer,0);    boolean endOfSymbolReached=!context.hasMoreCharacters();    boolean restInAscii=endOfSymbolReached && restChars <= 2;    if (restChars <= 2) {      context.updateSymbolInfo(context.getCodewordCount() + restChars);      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      if (available >= 3) {        restInAscii=false;        context.updateSymbolInfo(context.getCodewordCount() + encoded.length());      }    }    if (restInAscii) {      context.resetSymbolInfo();      context.pos-=restChars;    } else {      context.writeCodewords(encoded);    }  }  finally {    context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);  }}  }
class C{  public boolean isMutable(){  return m_mutable;}  }
class C{  public void makeCurrentReadFrom(EglSurfaceBase readSurface){  mEglCore.makeCurrent(mEGLSurface,readSurface.mEGLSurface);}  }
class C{  void reset(){  offset=intLen=0;}  }
class C{  public void mousePressed(MouseEvent e){  JMenu menu=(JMenu)menuItem;  if (!menu.isEnabled())   return;  MenuSelectionManager manager=MenuSelectionManager.defaultManager();  if (menu.isTopLevelMenu()) {    if (menu.isSelected() && menu.getPopupMenu().isShowing()) {      manager.clearSelectedPath();    } else {      Container cnt=menu.getParent();      if (cnt != null && cnt instanceof JMenuBar) {        MenuElement me[]=new MenuElement[2];        me[0]=(MenuElement)cnt;        me[1]=menu;        manager.setSelectedPath(me);      }    }  }  MenuElement selectedPath[]=manager.getSelectedPath();  if (selectedPath.length > 0 && selectedPath[selectedPath.length - 1] != menu.getPopupMenu()) {    if (menu.isTopLevelMenu() || menu.getDelay() == 0) {      appendPath(selectedPath,menu.getPopupMenu());    } else {      setupPostTimer(menu);    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.QNameAssertionType createQNameAssertionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.QNameAssertionTypeImpl();}  }
class C{  public boolean equals(Object other){  if (this == other)   return (true);  if (other instanceof Oid)   return this.oid.equals((Object)((Oid)other).oid); else   if (other instanceof ObjectIdentifier)   return this.oid.equals(other); else   return false;}  }
class C{  public SearchOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,DN baseDN,SearchScope scope,DereferenceAliasesPolicy derefPolicy,int sizeLimit,int timeLimit,boolean typesOnly,SearchFilter filter,Set<String> attributes){  super(clientConnection,operationID,messageID,requestControls);  this.baseDN=baseDN;  this.scope=scope;  this.derefPolicy=derefPolicy;  this.sizeLimit=sizeLimit;  this.timeLimit=timeLimit;  this.typesOnly=typesOnly;  this.filter=filter;  this.attributes=attributes != null ? attributes : new LinkedHashSet<String>(0);  rawBaseDN=ByteString.valueOfUtf8(baseDN.toString());  rawFilter=new LDAPFilter(filter);  this.sizeLimit=getSizeLimit(sizeLimit,clientConnection);  this.timeLimit=getTimeLimit(timeLimit,clientConnection);}  }
class C{  public boolean validate(ResponseHeaders networkResponse){  if (networkResponse.headers.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {    return true;  }  if (lastModified != null && networkResponse.lastModified != null && networkResponse.lastModified.getTime() < lastModified.getTime()) {    return true;  }  return false;}  }
class C{  public Set searchOrganizationNames(String serviceName,String attrName,Set values) throws SMSException, SSOException {  try {    if (subEntries == null) {      subEntries=CachedSubEntries.getInstance(token,SMSEntry.SERVICES_RDN + SMSEntry.COMMA + SMSEntry.baseDN);    }    return (subEntries.searchOrgNames(token,serviceName.toLowerCase(),attrName,values));  } catch (  SSOException ssoe) {    debug.error("OrganizationConfigManagerImpl: Unable to " + "get sub organization names",ssoe);    throw (new SMSException(SMSEntry.bundle.getString("sms-INVALID_SSO_TOKEN"),"sms-INVALID_SSO_TOKEN"));  }}  }
class C{  public ModifyResponse modify(Modify modify) throws DiscoveryException {  Message req=createRequest();  req.setSOAPBody(DiscoSDKUtils.parseXML(modify.toString()));  return new ModifyResponse(getResponse(req));}  }
class C{  public void runtimeInit(TransformerImpl transformer) throws TransformerException {}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr districtNode;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  districtNode=(Attr)attributes.getNamedItem("district");  assertNull("namednodemapReturnNullAssert",districtNode);}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof DateTimeSyntax && value.equals(((DateTimeSyntax)object).value));}  }
class C{  protected FastDateFormat(final String pattern,final TimeZone timeZone,final Locale locale){  this(pattern,timeZone,locale,null);}  }
class C{  private final void handlePasswordPolicy() throws DirectoryException {  Entry copy=entry.duplicate(true);  AuthenticationPolicy policy=AuthenticationPolicy.forUser(copy,false);  if (!policy.isPasswordPolicy()) {    return;  }  PasswordPolicy passwordPolicy=(PasswordPolicy)policy;  AttributeType passwordAttribute=passwordPolicy.getPasswordAttribute();  List<Attribute> attrList=entry.getAllAttributes(passwordAttribute);  if (attrList.isEmpty()) {    return;  } else   if (attrList.size() > 1) {    LocalizableMessage message=ERR_PWPOLICY_ATTRIBUTE_OPTIONS_NOT_ALLOWED.get(passwordAttribute.getNameOrOID());    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);  }  Attribute passwordAttr=attrList.get(0);  if (passwordAttr.getAttributeDescription().hasOptions()) {    LocalizableMessage message=ERR_PWPOLICY_ATTRIBUTE_OPTIONS_NOT_ALLOWED.get(passwordAttribute.getNameOrOID());    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);  }  if (passwordAttr.isEmpty()) {    return;  }  if (!isInternalOperation() && !passwordPolicy.isAllowMultiplePasswordValues() && passwordAttr.size() > 1) {    addPWPolicyControl(PasswordPolicyErrorType.PASSWORD_MOD_NOT_ALLOWED);    LocalizableMessage message=ERR_PWPOLICY_MULTIPLE_PW_VALUES_NOT_ALLOWED.get(passwordAttribute.getNameOrOID());    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);  }  List<PasswordStorageScheme<?>> defaultStorageSchemes=passwordPolicy.getDefaultPasswordStorageSchemes();  AttributeBuilder builder=new AttributeBuilder(passwordAttr.getAttributeDescription());  for (  ByteString value : passwordAttr) {    boolean isPreEncoded=passwordPolicy.isAuthPasswordSyntax() ? AuthPasswordSyntax.isEncoded(value) : UserPasswordSyntax.isEncoded(value);    if (isPreEncoded) {      if (isInternalOperation() || passwordPolicy.isAllowPreEncodedPasswords()) {        builder.add(value);        continue;      } else {        addPWPolicyControl(PasswordPolicyErrorType.INSUFFICIENT_PASSWORD_QUALITY);        LocalizableMessage msg=ERR_PWPOLICY_PREENCODED_NOT_ALLOWED.get(passwordAttribute.getNameOrOID());        throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,msg);      }    }    if (!passwordPolicy.isSkipValidationForAdministrators()) {      HashSet<ByteString> currentPasswords=new HashSet<>(0);      LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();      copy.removeAttribute(passwordAttribute);      for (      PasswordValidator<?> validator : passwordPolicy.getPasswordValidators()) {        if (!validator.passwordIsAcceptable(value,currentPasswords,this,copy,invalidReason)) {          addPWPolicyControl(PasswordPolicyErrorType.INSUFFICIENT_PASSWORD_QUALITY);          throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_PWPOLICY_VALIDATION_FAILED.get(passwordAttribute.getNameOrOID(),invalidReason));        }      }    }    if (passwordPolicy.isAuthPasswordSyntax()) {      for (      PasswordStorageScheme<?> s : defaultStorageSchemes) {        builder.add(s.encodeAuthPassword(value));      }    } else {      for (      PasswordStorageScheme<?> s : defaultStorageSchemes) {        builder.add(s.encodePasswordWithScheme(value));      }    }  }  entry.replaceAttribute(builder.toAttribute());  Attribute changedTime=Attributes.create(OP_ATTR_PWPOLICY_CHANGED_TIME,TimeThread.getGeneralizedTime());  entry.putAttribute(changedTime.getAttributeDescription().getAttributeType(),newArrayList(changedTime));  if (passwordPolicy.isForceChangeOnAdd()) {    addPWPolicyControl(PasswordPolicyErrorType.CHANGE_AFTER_RESET);    Attribute reset=Attributes.create(OP_ATTR_PWPOLICY_RESET_REQUIRED,"TRUE");    entry.putAttribute(reset.getAttributeDescription().getAttributeType(),newArrayList(reset));  }}  }
class C{  public Query or(List<Query> queries){  innerQueries=queries;  return this;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  Subject adminSubject=SubjectUtils.createSubject(adminSSOToken);  String realm=getStringOptionValue(IArgument.REALM_NAME);  InputStream xacmlInputStream=getXacmlInputStream(realm);  logStart(realm);  if (!XACMLUtils.hasPermission(realm,adminSSOToken,"MODIFY")) {    String errorMessage=MessageFormat.format(getResourceString("permission-denied"),"create-xacml",getAdminID());    CLIException clie=new CLIException(errorMessage,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    logException(realm,clie);    throw clie;  }  List<ImportStep> importSteps;  try {    PrivilegeValidator privilegeValidator=new PrivilegeValidator(new RealmValidator(new OrganizationConfigManager(adminSSOToken,realm)));    ApplicationServiceFactory factory=InjectorHolder.getInstance(ApplicationServiceFactory.class);    ResourceTypeService service=InjectorHolder.getInstance(ResourceTypeService.class);    XACMLExportImport xacmlExportImport=new XACMLExportImport(new XACMLExportImport.PrivilegeManagerFactory(),new XACMLReaderWriter(),privilegeValidator,new SearchFilterFactory(),PrivilegeManager.debug,factory,service);    importSteps=xacmlExportImport.importXacml(realm,xacmlInputStream,adminSubject,isDryRun());  } catch (  EntitlementException e) {    debugError("CreateXACML.handleRequest",e);    logException(realm,e);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    debugError("CreateXACML.handleRequest",e);    logException(realm,e);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  if (importSteps.isEmpty()) {    String message=getResourceString("no-policies-provided");    logNothingToImport(realm,message);    getOutputWriter().printlnMessage(message);  } else {    logSuccess(realm);    if (isDryRun()) {      outputDryRunResults(importSteps);    } else {      getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("create-policy-in-realm-succeed"),realm));    }  }}  }
class C{  public static boolean equals(long[] a,long[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  protected void paint(SynthContext context,Graphics g){  JToolTip tip=(JToolTip)context.getComponent();  Insets insets=tip.getInsets();  View v=(View)tip.getClientProperty(BasicHTML.propertyKey);  if (v != null) {    Rectangle paintTextR=new Rectangle(insets.left,insets.top,tip.getWidth() - (insets.left + insets.right),tip.getHeight() - (insets.top + insets.bottom));    v.paint(g,paintTextR);  } else {    g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));    g.setFont(style.getFont(context));    context.getStyle().getGraphicsUtils(context).paintText(context,g,tip.getTipText(),insets.left,insets.top,-1);  }}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("DeleteRequest(dn=");  buffer.append(dn);  buffer.append(")");}  }
class C{  public static List<double[]> bezierArc(double x1,double y1,double x2,double y2,double startAng,double extent){  double tmp;  if (x1 > x2) {    tmp=x1;    x1=x2;    x2=tmp;  }  if (y2 > y1) {    tmp=y1;    y1=y2;    y2=tmp;  }  double fragAngle;  int Nfrag;  if (Math.abs(extent) <= 90f) {    fragAngle=extent;    Nfrag=1;  } else {    Nfrag=(int)Math.ceil(Math.abs(extent) / 90f);    fragAngle=extent / Nfrag;  }  double x_cen=(x1 + x2) / 2f;  double y_cen=(y1 + y2) / 2f;  double rx=(x2 - x1) / 2f;  double ry=(y2 - y1) / 2f;  double halfAng=(fragAngle * Math.PI / 360.0);  double kappa=Math.abs(4.0 / 3.0 * (1.0 - Math.cos(halfAng)) / Math.sin(halfAng));  List<double[]> pointList=new ArrayList<>();  for (int iter=0; iter < Nfrag; ++iter) {    double theta0=((startAng + iter * fragAngle) * Math.PI / 180.0);    double theta1=((startAng + (iter + 1) * fragAngle) * Math.PI / 180.0);    double cos0=Math.cos(theta0);    double cos1=Math.cos(theta1);    double sin0=Math.sin(theta0);    double sin1=Math.sin(theta1);    if (fragAngle > 0.0) {      pointList.add(new double[]{x_cen + rx * cos0,y_cen - ry * sin0,x_cen + rx * (cos0 - kappa * sin0),y_cen - ry * (sin0 + kappa * cos0),x_cen + rx * (cos1 + kappa * sin1),y_cen - ry * (sin1 - kappa * cos1),x_cen + rx * cos1,y_cen - ry * sin1});    } else {      pointList.add(new double[]{x_cen + rx * cos0,y_cen - ry * sin0,x_cen + rx * (cos0 + kappa * sin0),y_cen - ry * (sin0 - kappa * cos0),x_cen + rx * (cos1 - kappa * sin1),y_cen - ry * (sin1 + kappa * cos1),x_cen + rx * cos1,y_cen - ry * sin1});    }  }  return pointList;}  }
class C{  public RemoteObjectInvocationHandler(RemoteRef ref){  super(ref);  if (ref == null) {    throw new NullPointerException();  }}  }
class C{  public void testCase4(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127};  byte bBytes[]={-127,100,56,7,98,-1,39,-128,127};  int aSign=-1;  int bSign=1;  byte rBytes[]={-1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  @Override public void removeApplication(String name) throws EntitlementException {  try {    ServiceConfig conf=getApplicationCollectionConfig(realm);    if (conf != null) {      String[] logParams={realm,name};      OpenSSOLogger.log(OpenSSOLogger.LogLevel.MESSAGE,Level.INFO,"ATTEMPT_REMOVE_APPLICATION",logParams,subject);      conf.removeSubConfig(name);      OpenSSOLogger.log(OpenSSOLogger.LogLevel.MESSAGE,Level.INFO,"SUCCEEDED_REMOVE_APPLICATION",logParams,subject);      Map<String,String> params=new HashMap<String,String>();      params.put(NotificationServlet.ATTR_REALM_NAME,realm);      Notifier.submit(NotificationServlet.APPLICATIONS_CHANGED,params);    }  } catch (  SMSException ex) {    String[] logParams={realm,name,ex.getMessage()};    OpenSSOLogger.log(OpenSSOLogger.LogLevel.MESSAGE,Level.INFO,"FAILED_REMOVE_APPLICATION",logParams,subject);    Object[] args={name};    throw new EntitlementException(EntitlementException.REMOVE_APPLICATION_FAIL,args);  }catch (  SSOException ex) {    String[] logParams={realm,name,ex.getMessage()};    OpenSSOLogger.log(OpenSSOLogger.LogLevel.MESSAGE,Level.INFO,"FAILED_REMOVE_APPLICATION",logParams,subject);    Object[] args={name};    throw new EntitlementException(EntitlementException.REMOVE_APPLICATION_FAIL,args);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.SubjectQueryElement createSubjectQueryElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.SubjectQueryElementImpl();}  }
class C{  public static JEditorPane makeTextPane(LocalizableMessage text,TextStyle style){  String s=text != null ? String.valueOf(text) : null;  JEditorPane pane=new JEditorPane("text/plain",s);  setTextStyle(pane,style);  pane.setEditable(false);  pane.setBorder(new EmptyBorder(0,0,0,0));  pane.setOpaque(false);  return pane;}  }
class C{  public static String removeRight(final String value,final String suffix){  return removeRight(value,suffix,true);}  }
class C{  public Map mapToNativeEnvironment(Environment xacmlContextEnvironment,List xacmlContextSubjects) throws XACMLException {  return null;}  }
class C{  public String paramString(){  String typeStr;switch (id) {case WINDOW_OPENED:    typeStr="WINDOW_OPENED";  break;case WINDOW_CLOSING:typeStr="WINDOW_CLOSING";break;case WINDOW_CLOSED:typeStr="WINDOW_CLOSED";break;case WINDOW_ICONIFIED:typeStr="WINDOW_ICONIFIED";break;case WINDOW_DEICONIFIED:typeStr="WINDOW_DEICONIFIED";break;case WINDOW_ACTIVATED:typeStr="WINDOW_ACTIVATED";break;case WINDOW_DEACTIVATED:typeStr="WINDOW_DEACTIVATED";break;case WINDOW_GAINED_FOCUS:typeStr="WINDOW_GAINED_FOCUS";break;case WINDOW_LOST_FOCUS:typeStr="WINDOW_LOST_FOCUS";break;case WINDOW_STATE_CHANGED:typeStr="WINDOW_STATE_CHANGED";break;default :typeStr="unknown type";}typeStr+=",opposite=" + getOppositeWindow() + ",oldState="+ oldState+ ",newState="+ newState;return typeStr;}  }
class C{  public JKDataAccessException(final Throwable cause){  super(cause);}  }
class C{  public String readLine() throws IOException {  return readLine(false);}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    Collection<? extends GrantedAuthority> authorities=authentication.getAuthorities();    if (authorities != null) {      for (      GrantedAuthority authority : authorities) {        if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  @VisibleForTesting boolean checkPermission(DelegationPermission permissionRequest,SSOToken token,String urlLastSegment) throws DelegationException, SSOException {  boolean result=evaluator.isAllowed(token,permissionRequest,Collections.EMPTY_MAP);  String className=this.getClass().getName();  if (result) {    restLog.auditAccessGranted(className,urlLastSegment,className,token);  } else {    restLog.auditAccessDenied(className,urlLastSegment,className,token);  }  return result;}  }
class C{  public boolean matchesDN(DN dn){  return equality != null ? equalityMatchDN(dn) : substringMatchDN(dn);}  }
class C{  private void nextChunk() throws IOException {  chunkSize=getChunkSize();  if (chunkSize < 0) {    throw new MalformedChunkCodingException("Negative chunk size");  }  bof=false;  pos=0;  if (chunkSize == 0) {    eof=true;    parseTrailerHeaders();  }}  }
class C{  public void addSelectionRow(int row){  int[] rows={row};  addSelectionRows(rows);}  }
class C{  public boolean isGotoUrlValid(String url,String orgDN){  return REDIRECT_URL_VALIDATOR.isRedirectUrlValid(url,orgDN);}  }
class C{  private static <T>void siftUpComparable(int k,T x,Object[] array){  Comparable<? super T> key=(Comparable<? super T>)x;  while (k > 0) {    int parent=(k - 1) >>> 1;    Object e=array[parent];    if (key.compareTo((T)e) >= 0)     break;    array[k]=e;    k=parent;  }  array[k]=key;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  public Enumeration children(){  if (!this.isExpanded()) {    return DefaultMutableTreeNode.EMPTY_ENUMERATION;  } else {    return super.children();  }}  }
class C{  public void test_indexOfSubList2(){  ArrayList sub=new ArrayList();  sub.add(new Integer(1));  sub.add(new Integer(2));  sub.add(new Integer(3));  ArrayList sub2=new ArrayList();  sub2.add(new Integer(7));  sub2.add(new Integer(8));  ArrayList src=new ArrayList();  src.addAll(sub);  src.addAll(sub);  src.addAll(sub);  src.add(new Integer(5));  src.add(new Integer(6));  sub=new ArrayList(src.subList(3,11));  assertEquals("TestA : Returned wrong indexOfSubList, ",3,Collections.indexOfSubList(src,sub));  sub=new ArrayList(src.subList(6,11));  assertEquals("TestB : Returned wrong indexOfSubList, ",6,Collections.indexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,3));  assertEquals("TestCC : Returned wrong indexOfSubList, ",0,Collections.indexOfSubList(src,sub));  sub=new ArrayList(src.subList(9,11));  assertEquals("TestD : Returned wrong indexOfSubList, ",9,Collections.indexOfSubList(src,sub));  sub=new ArrayList(src.subList(10,11));  assertEquals("TestE : Returned wrong indexOfSubList, ",10,Collections.indexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,11));  assertEquals("TestH : Returned wrong indexIndexOfSubList, ",0,Collections.indexOfSubList(src,sub));  assertEquals("TestI : Returned wrong indexOfSubList, ",-1,Collections.indexOfSubList(src,sub2));}  }
class C{  protected static void processCRLC(X509CRL deltaCRL,X509CRL completeCRL,ExtendedPKIXParameters pkixParams) throws AnnotatedException {  if (deltaCRL == null) {    return;  }  IssuingDistributionPoint completeidp=null;  try {    completeidp=IssuingDistributionPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(completeCRL,RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT));  } catch (  Exception e) {    throw new AnnotatedException("Issuing distribution point extension could not be decoded.",e);  }  if (pkixParams.isUseDeltasEnabled()) {    if (!deltaCRL.getIssuerX500Principal().equals(completeCRL.getIssuerX500Principal())) {      throw new AnnotatedException("Complete CRL issuer does not match delta CRL issuer.");    }    IssuingDistributionPoint deltaidp=null;    try {      deltaidp=IssuingDistributionPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(deltaCRL,ISSUING_DISTRIBUTION_POINT));    } catch (    Exception e) {      throw new AnnotatedException("Issuing distribution point extension from delta CRL could not be decoded.",e);    }    boolean match=false;    if (completeidp == null) {      if (deltaidp == null) {        match=true;      }    } else {      if (completeidp.equals(deltaidp)) {        match=true;      }    }    if (!match) {      throw new AnnotatedException("Issuing distribution point extension from delta CRL and complete CRL does not match.");    }    ASN1Primitive completeKeyIdentifier=null;    try {      completeKeyIdentifier=CertPathValidatorUtilities.getExtensionValue(completeCRL,AUTHORITY_KEY_IDENTIFIER);    } catch (    AnnotatedException e) {      throw new AnnotatedException("Authority key identifier extension could not be extracted from complete CRL.",e);    }    ASN1Primitive deltaKeyIdentifier=null;    try {      deltaKeyIdentifier=CertPathValidatorUtilities.getExtensionValue(deltaCRL,AUTHORITY_KEY_IDENTIFIER);    } catch (    AnnotatedException e) {      throw new AnnotatedException("Authority key identifier extension could not be extracted from delta CRL.",e);    }    if (completeKeyIdentifier == null) {      throw new AnnotatedException("CRL authority key identifier is null.");    }    if (deltaKeyIdentifier == null) {      throw new AnnotatedException("Delta CRL authority key identifier is null.");    }    if (!completeKeyIdentifier.equals(deltaKeyIdentifier)) {      throw new AnnotatedException("Delta CRL authority key identifier does not match complete CRL authority key identifier.");    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addrList;  Node addrNode;  boolean state;  doc=(Document)load("staff",false);  addrList=doc.getElementsByTagName("address");  addrNode=addrList.item(0);  state=addrNode.hasAttributes();  assertTrue("throw_True",state);}  }
class C{  public CountingOutputstream(final OutputStream outputStream){  super();  assert outputStream != null;  this.wrapped=outputStream;}  }
class C{  private List<String> removeExactly(List<String> base,List<String> toRemove){  List<String> diff=new ArrayList<>(base);  diff.removeAll(toRemove);  return diff;}  }
class C{  public String debugDump(){  return debugDump(0);}  }
class C{  @Thunk static void playSoundEffect(int keyCode,View v){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    v.playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);  break;case KeyEvent.KEYCODE_DPAD_RIGHT:v.playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);break;case KeyEvent.KEYCODE_DPAD_DOWN:case KeyEvent.KEYCODE_PAGE_DOWN:case KeyEvent.KEYCODE_MOVE_END:v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);break;case KeyEvent.KEYCODE_DPAD_UP:case KeyEvent.KEYCODE_PAGE_UP:case KeyEvent.KEYCODE_MOVE_HOME:v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);break;default :break;}}  }
class C{  @Override public void removeSecurityReference(String name){  referencesLock.writeLock().lock();  try {    references.remove(name);  }  finally {    referencesLock.writeLock().unlock();  }  fireContainerEvent("removeSecurityReference",name);}  }
class C{  public void startDocument() throws SAXException {  try {    if (null == m_resultContentHandler)     createResultContentHandler(m_result);  } catch (  TransformerException te) {    throw new SAXException(te.getMessage(),te);  }  m_flushedStartDoc=false;  m_foundFirstElement=false;}  }
class C{  boolean deleteConfig(File f) throws Exception {  String pid[]=parsePid(f.getName());  Configuration config=getConfiguration(toConfigKey(f),pid[0],pid[1],false);  config.delete();  return true;}  }
class C{  private void buildANewArray(MethodVisitor methodVisitor,CodeInfo info,Ins.ANewArray aNewArray){  buildPrimitive(methodVisitor,info,aNewArray.count());  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,typeToInternalName(aNewArray.componentType()));  int i=0;  for (  Value v : aNewArray.initValues()) {    methodVisitor.visitInsn(Opcodes.DUP);    info.push(CodeInfo.Size._1);    methodVisitor.visitLdcInsn(i);    info.push(CodeInfo.Size._1);    buildValueAccess(methodVisitor,info,v,true);    methodVisitor.visitInsn(Opcodes.AASTORE);    info.pop(3);    ++i;  }}  }
class C{  public boolean hasMoreRequirements(){  authDebug.message("AuthContextLocal::hasMoreRequirements()");  if ((amlc.getStatus() == LoginStatus.AUTH_SUCCESS) || (amlc.getStatus() == LoginStatus.AUTH_FAILED)) {    return false;  } else {    informationRequired=amlc.getRequiredInfo();    return (informationRequired != null);  }}  }
class C{  public IPRange(){  low=0;  high=0;}  }
class C{  public Strftime(String origFormat,Locale locale){  String convertedFormat=convertDateFormat(origFormat);  simpleDateFormat=new SimpleDateFormat(convertedFormat,locale);}  }
class C{  public void preSingleSignOnRequest(String hostedEntityID,String idpEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest) throws SAML2Exception {  return;}  }
class C{  public static void deregisterPasswordValidator(DN configEntryDN){  directoryServer.passwordValidators.remove(configEntryDN);}  }
class C{  private AdviceExpression createAdviceExpression(final ResourceAttribute ra) throws EntitlementException {  AdviceExpression result=new AdviceExpression();  AttributeValue attributeValue=new AttributeValue();  attributeValue.setDataType(XACMLConstants.XS_STRING);  attributeValue.getContent().add(resourceAttributeUtil.toJSON(ra));  JAXBElement<AttributeValue> jaxbElement=new JAXBElement<AttributeValue>(QName.valueOf(AttributeValue.class.getSimpleName()),AttributeValue.class,null,attributeValue);  AttributeAssignmentExpression attributeAssignmentExpression=new AttributeAssignmentExpression();  attributeAssignmentExpression.setExpression(jaxbElement);  attributeAssignmentExpression.setAttributeId(XACMLConstants.JSON_RESOURCE_ATTRIBUTE_ADVICE_ID + ":" + ra.getClass().getName()+ ":"+ ra.getPropertyName());  result.getAttributeAssignmentExpression().add(attributeAssignmentExpression);  result.setAppliesTo(EffectType.PERMIT);  result.setAdviceId(XACMLConstants.JSON_RESOURCE_ATTRIBUTE_ADVICE_ID + ":" + ra.getClass().getName());  return result;}  }
class C{  public void rectangle(Rectangle rect){  rectangle(rect.getX(),rect.getY(),rect.getWidth(),rect.getHeight());}  }
class C{  public static Set<IPrivilege> policyToPrivileges(Object policyObject) throws SSOException, PolicyException, EntitlementException {  if (policyObject == null) {    return Collections.EMPTY_SET;  }  Set<IPrivilege> privileges=new HashSet<IPrivilege>();  if (policyObject instanceof Policy) {    policyToPrivileges((Policy)policyObject,privileges);  } else {    String[] param={policyObject.getClass().getName()};    throw new EntitlementException(329,param);  }  return privileges;}  }
class C{  public AMConsoleException(String message,Throwable initCause){  super(message,initCause);}  }
class C{  public ExtensionFileComparator(IOCase caseSensitivity){  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public final boolean check_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());  for (int index=0; index < trace_shapes.size(); ++index) {    ShapeTile curr_trace_shape=trace_shapes.get(index);    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);    if (!check_shove_ok)     return false;  }  return true;}  }
class C{  private void updateForeground(Color color){  StyledDocument doc=(StyledDocument)getComponent().getDocument();  Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);  if (style == null) {    return;  }  if (color == null) {    if (style.getAttribute(StyleConstants.Foreground) != null) {      style.removeAttribute(StyleConstants.Foreground);    }  } else {    if (!color.equals(StyleConstants.getForeground(style))) {      StyleConstants.setForeground(style,color);    }  }}  }
class C{  public void on(boolean on){  isOn=on;}  }
class C{  public ModifyResponseProtocolOp(int resultCode,LocalizableMessage errorMessage){  this.resultCode=resultCode;  this.errorMessage=errorMessage;}  }
class C{  public Builder removeAllSuperiorObjectClass(){  this.superiorClasses.clear();  return this;}  }
class C{  private void startAnimations(final ExpandableView child,StackScrollState.ViewState viewState,StackScrollState finalState,int i){  int childVisibility=child.getVisibility();  boolean wasVisible=childVisibility == View.VISIBLE;  final float alpha=viewState.alpha;  if (!wasVisible && alpha != 0 && !viewState.gone) {    child.setVisibility(View.VISIBLE);  }  boolean yTranslationChanging=child.getTranslationY() != viewState.yTranslation;  boolean zTranslationChanging=child.getTranslationZ() != viewState.zTranslation;  boolean scaleChanging=child.getScaleX() != viewState.scale;  boolean alphaChanging=alpha != child.getAlpha();  boolean heightChanging=viewState.height != child.getActualHeight();  boolean topInsetChanging=viewState.clipTopAmount != child.getClipTopAmount();  boolean wasAdded=mNewAddChildren.contains(child);  boolean hasDelays=mAnimationFilter.hasDelays;  boolean isDelayRelevant=yTranslationChanging || zTranslationChanging || scaleChanging|| alphaChanging|| heightChanging|| topInsetChanging;  boolean noAnimation=wasAdded;  long delay=0;  long duration=mCurrentLength;  if (hasDelays && isDelayRelevant || wasAdded) {    delay=mCurrentAdditionalDelay + calculateChildAnimationDelay(viewState,finalState);  }  if (wasAdded && mAnimationFilter.hasGoToFullShadeEvent) {    child.setTranslationY(child.getTranslationY() + mGoToFullShadeAppearingTranslation);    yTranslationChanging=true;    float longerDurationFactor=viewState.notGoneIndex - mCurrentLastNotAddedIndex;    longerDurationFactor=(float)Math.pow(longerDurationFactor,0.7f);    duration=ANIMATION_DURATION_APPEAR_DISAPPEAR + 50 + (long)(100 * longerDurationFactor);  }  if (yTranslationChanging) {    if (noAnimation && !mAnimationFilter.hasGoToFullShadeEvent) {      child.setTranslationY(viewState.yTranslation);    } else {      startYTranslationAnimation(child,viewState,duration,delay);    }  }  if (zTranslationChanging) {    if (noAnimation) {      child.setTranslationZ(viewState.zTranslation);    } else {      startZTranslationAnimation(child,viewState,duration,delay);    }  }  if (scaleChanging) {    if (noAnimation) {      child.setScaleX(viewState.scale);      child.setScaleY(viewState.scale);    } else {      startScaleAnimation(child,viewState,duration);    }  }  if (alphaChanging && child.getTranslationX() == 0) {    if (noAnimation) {      child.setAlpha(viewState.alpha);    } else {      startAlphaAnimation(child,viewState,duration,delay);    }  }  if (heightChanging && child.getActualHeight() != 0) {    if (noAnimation) {      child.setActualHeight(viewState.height,false);    } else {      startHeightAnimation(child,viewState,duration,delay);    }  }  if (topInsetChanging) {    if (noAnimation) {      child.setClipTopAmount(viewState.clipTopAmount);    } else {      startInsetAnimation(child,viewState,duration,delay);    }  }  child.setDimmed(viewState.dimmed,mAnimationFilter.animateDimmed && !wasAdded && !noAnimation);  child.setDark(viewState.dark,mAnimationFilter.animateDark && !noAnimation);  child.setHideSensitive(viewState.hideSensitive,mAnimationFilter.animateHideSensitive && !wasAdded && !noAnimation,delay,duration);  if (wasAdded) {    child.performAddAnimation(delay,mCurrentLength);  }}  }
class C{  private boolean validateProperties() throws PolicyException {  if ((properties == null) || (properties.keySet() == null)) {    throw new PolicyException(ResBundleUtils.rbName,"properties_can_not_be_null_or_empty",null,null);  }  Set keySet=properties.keySet();  if (!keySet.contains(IP_RANGE) && !keySet.contains(DNS_NAME) && !keySet.contains(START_IP)&& !keySet.contains(IP_VERSION)) {    String[] args={DNS_NAME + "," + START_IP};    throw new PolicyException(ResBundleUtils.rbName,"at_least_one_of_the_properties_should_be_defined",args,null);  }  Iterator keys=keySet.iterator();  while (keys.hasNext()) {    String key=(String)keys.next();    if (!IP_RANGE.equals(key) && !DNS_NAME.equals(key) && !START_IP.equals(key)&& !END_IP.equals(key)&& !IP_VERSION.equals(key)) {      String args[]={key};      throw new PolicyException(ResBundleUtils.rbName,"attempt_to_set_invalid_property ",args,null);    }  }  Set ipRangeSet=(Set)properties.get(IP_RANGE);  if (ipRangeSet != null) {    validateIpRangeSet(ipRangeSet);  }  Set dnsNameSet=(Set)properties.get(DNS_NAME);  if (dnsNameSet != null) {    validateDnsNames(dnsNameSet);  }  Set startIpSet=(Set)properties.get(START_IP);  Set endIpSet=(Set)properties.get(END_IP);  if (startIpSet != null) {    if (endIpSet == null) {      String args[]={START_IP,END_IP};      throw new PolicyException(ResBundleUtils.rbName,"pair_property_not_defined",args,null);    }    validateStartIp(startIpSet);  }  if (endIpSet != null) {    validateEndIp(endIpSet);  }  return true;}  }
class C{  public RenderContext(AffineTransform usr2dev,RenderingHints hints){  this(usr2dev,null,hints);}  }
class C{  public R visitString(StringPropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  public Object eval(String script,Bindings bindings) throws ScriptException {  ScriptContext ctxt=getScriptContext(bindings);  return eval(script,ctxt);}  }
class C{  public boolean canTraverseOutsideSubtree(){  return m_arg0.canTraverseOutsideSubtree();}  }
class C{  public StatusDetail createStatusDetail(org.w3c.dom.Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS_DETAIL,value);  if (obj == null) {    return new StatusDetailImpl(value);  } else {    return (StatusDetail)obj;  }}  }
class C{  LDAPReplicationDomain(ReplicationDomainCfg configuration,BlockingQueue<UpdateToReplay> updateToReplayQueue,DSRSShutdownSync dsrsShutdownSync) throws ConfigException {  super(configuration,-1);  this.updateToReplayQueue=updateToReplayQueue;  this.dsrsShutdownSync=dsrsShutdownSync;  readAssuredConfig(configuration,false);  fractionalConfig=new FractionalConfig(getBaseDN());  readFractionalConfig(configuration,false);  storeECLConfiguration(configuration);  solveConflictFlag=isSolveConflict(configuration);  Backend<?> backend=getBackend();  if (backend == null) {    throw new ConfigException(ERR_SEARCHING_DOMAIN_BACKEND.get(getBaseDN()));  }  try {    generationId=loadGenerationId();  } catch (  DirectoryException e) {    logger.error(ERR_LOADING_GENERATION_ID,getBaseDN(),stackTraceToSingleLineString(e));  }  state=new PersistentServerState(getBaseDN(),getServerId(),getServerState());  flushThread=new ServerStateFlush();  pendingChanges=new PendingChanges(getGenerator(),this);  remotePendingChanges=new RemotePendingChanges(getServerState());  configuration.addChangeListener(this);  DirectoryServer.registerAlertGenerator(this);  DirectoryServer.registerBackendInitializationListener(this);  DirectoryServer.registerShutdownListener(this);  startPublishService();}  }
class C{  private static int loadBuildNumber(Context context,PackageManager packageManager){  try {    ApplicationInfo appInfo=packageManager.getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);    Bundle metaData=appInfo.metaData;    if (metaData != null) {      return metaData.getInt(BUNDLE_BUILD_NUMBER,0);    }  } catch (  PackageManager.NameNotFoundException e) {    L.e("Exception thrown when accessing the application info:");    e.printStackTrace();  }  return 0;}  }
class C{  public static boolean addMapProperty(String configPath,String key,String name,String value){  boolean result=true;  boolean isExisting=false;  int index=0;  try {    index=findPropertyIndex(configPath,key);    String newLine=null;    String line=null;    String val=null;    if (index > 0) {      newLine=key + "[" + name+ "]"+ "="+ value;      line=getLineByNumber(configPath,index);      val=isPropertyValid(line);      if (val == null || val.length() == 0) {        result=result && removeLinesByNum(configPath,index + 1,1);      }      result=result && insertLineByNumber(configPath,index + 1,newLine);    } else {      String[] lines={newLine};      result=result && appendLinesToFile(configPath,lines);    }    if (result) {      Properties prop=getProperties(configPath);      if (prop != null) {        Enumeration propNames=prop.propertyNames();        while (propNames.hasMoreElements()) {          if (((String)propNames.nextElement()).startsWith(key)) {            isExisting=true;            break;          }        }        result=isExisting;      } else {        result=false;      }    }  } catch (  Exception ex) {    Debug.log("FileUtils.addMapProperty() threw exception : ",ex);    result=false;  }  Debug.log("FileUtils.addMapProperty() result : " + result);  return result;}  }
class C{  public boolean containsAll(Collection<?> c){  if (!(c instanceof JumboEnumSet))   return super.containsAll(c);  JumboEnumSet<?> es=(JumboEnumSet<?>)c;  if (es.elementType != elementType)   return es.isEmpty();  for (int i=0; i < elements.length; i++)   if ((es.elements[i] & ~elements[i]) != 0)   return false;  return true;}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener listener){  support.removePropertyChangeListener(listener);}  }
class C{  public X509Certificate generate(PrivateKey key,String provider,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=generateTbsCert();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,provider,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  try {    return generateJcaObject(tbsCert,signature);  } catch (  CertificateParsingException e) {    throw new ExtCertificateEncodingException("exception producing certificate object",e);  }}  }
class C{  protected String findleaks(StringManager smClient){  StringBuilder msg=new StringBuilder();  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.findleaks(false,printWriter,smClient);  String writerText=stringWriter.toString();  if (writerText.length() > 0) {    if (!writerText.startsWith("FAIL -")) {      msg.append(smClient.getString("htmlManagerServlet.findleaksList"));    }    msg.append(writerText);  } else {    msg.append(smClient.getString("htmlManagerServlet.findleaksNone"));  }  return msg.toString();}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("SearchReference(referralURLs={");  if (!referralURLs.isEmpty()) {    Iterator<String> iterator=referralURLs.iterator();    buffer.append(iterator.next());    while (iterator.hasNext()) {      buffer.append(", ");      buffer.append(iterator.next());    }  }  buffer.append("})");}  }
class C{  private void runPatchers(){  if (patchers != null) {    for (int i=0; i < patchersLen; i++)     patchers[i].run();  }}  }
class C{  public void changeStatusForResetGenId(long newGenId) throws IOException {  StatusMachineEvent event=getStatusMachineEvent(newGenId);  if (event == null) {    return;  }  if (event == StatusMachineEvent.TO_BAD_GEN_ID_STATUS_EVENT && status == ServerStatus.FULL_UPDATE_STATUS) {    logger.info(NOTE_BAD_GEN_ID_IN_FULL_UPDATE,replicationServer.getServerId(),getBaseDN(),serverId,generationId,newGenId);    return;  }  changeStatus(event,"for reset gen id");}  }
class C{  public SessionDescription createSessionDescription(String s) throws SdpParseException {  try {    SDPAnnounceParser sdpParser=new SDPAnnounceParser(s);    return sdpParser.parse();  } catch (  ParseException e) {    e.printStackTrace();    throw new SdpParseException(0,0,"Could not parse message");  }}  }
class C{  public java.lang.String toString(){  return toString(true,false);}  }
class C{  public void testReceive_NonBlockNoServerCloseReadonly() throws Exception {  this.channel1.configureBlocking(false);  receiveNoServerChannelCloseReadonly();}  }
class C{  private void modifyGroupMembership(String groupDN,Set<String> memberDNs,int operation) throws IdRepoException {  ModifyRequest modifyRequest=LDAPRequests.newModifyRequest(groupDN);  Attribute attr=new LinkedAttribute(uniqueMemberAttr,memberDNs);  ModificationType modType;  if (ADDMEMBER == operation) {    modType=ModificationType.ADD;  } else {    modType=ModificationType.DELETE;  }  modifyRequest.addModification(new Modification(modType,attr));  Connection conn=null;  try {    conn=createConnection();    conn.modify(modifyRequest);    if (memberOfAttr != null) {      for (      String member : memberDNs) {        ModifyRequest userMod=LDAPRequests.newModifyRequest(member);        userMod.addModification(modType,memberOfAttr,groupDN);        conn.modify(userMod);      }    }  } catch (  LdapException ere) {    DEBUG.error("An error occurred while trying to modify group membership. Name: " + groupDN + " memberDNs: "+ memberDNs+ " Operation: "+ modType,ere);    handleErrorResult(ere);  } finally {    IOUtils.closeIfNotNull(conn);  }}  }
class C{  public void stopAnimation(){  if (startAngleRotate != null) {    startAngleRotate.cancel();    startAngleRotate=null;  }  if (progressAnimator != null) {    progressAnimator.cancel();    progressAnimator=null;  }  if (indeterminateAnimator != null) {    indeterminateAnimator.cancel();    indeterminateAnimator=null;  }}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public JKReportException(String arg0){  super(arg0);}  }
class C{  @Override public void lifecycleEvent(LifecycleEvent event){  try {    context=(Context)event.getLifecycle();  } catch (  ClassCastException e) {    log.error(sm.getString("contextConfig.cce",event.getLifecycle()),e);    return;  }  if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {    configureStart();  } else   if (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) {    beforeStart();  } else   if (event.getType().equals(Lifecycle.AFTER_START_EVENT)) {    if (originalDocBase != null) {      context.setDocBase(originalDocBase);    }  } else   if (event.getType().equals(Lifecycle.CONFIGURE_STOP_EVENT)) {    configureStop();  } else   if (event.getType().equals(Lifecycle.AFTER_INIT_EVENT)) {    init();  } else   if (event.getType().equals(Lifecycle.AFTER_DESTROY_EVENT)) {    destroy();  }}  }
class C{  public void prepare(){  if (COMPILE_THRESHOLD == 0 && !isCompiled) {    compileToBytecode();  }  if (this.vmentry != null) {    return;  }  LambdaForm prep=getPreparedForm(basicTypeSignature());  this.vmentry=prep.vmentry;}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  private String generateProfileName(Date lastSelectedDate){  return "Profile: " + new SimpleDateFormat("dd/MM/yyyy HH:mm").format(lastSelectedDate);}  }
class C{  public void deleteFilteredRoles(Set roleDNs) throws AMException, SSOException {  Iterator iter=roleDNs.iterator();  while (iter.hasNext()) {    String roleDN=(String)iter.next();    AMFilteredRole role=new AMFilteredRoleImpl(token,roleDN);    role.delete();  }}  }
class C{  private ByteBuffer writeHeaderToBuffer(int padding,int size) throws IOException {  extended=false;  experimental=false;  crcDataFlag=false;  ByteBuffer headerBuffer=ByteBuffer.allocate(TAG_HEADER_LENGTH + TAG_EXT_HEADER_LENGTH + TAG_EXT_HEADER_CRC_LENGTH);  headerBuffer.put(TAG_ID);  headerBuffer.put(getMajorVersion());  headerBuffer.put(getRevision());  byte flagsByte=0;  if (isUnsynchronization()) {    flagsByte|=MASK_V23_UNSYNCHRONIZATION;  }  if (extended) {    flagsByte|=MASK_V23_EXTENDED_HEADER;  }  if (experimental) {    flagsByte|=MASK_V23_EXPERIMENTAL;  }  headerBuffer.put(flagsByte);  int additionalHeaderSize=0;  if (extended) {    additionalHeaderSize+=TAG_EXT_HEADER_LENGTH;    if (crcDataFlag) {      additionalHeaderSize+=TAG_EXT_HEADER_CRC_LENGTH;    }  }  headerBuffer.put(ID3SyncSafeInteger.valueToBuffer(padding + size + additionalHeaderSize));  if (extended) {    byte extFlagsByte1=0;    byte extFlagsByte2=0;    if (crcDataFlag) {      headerBuffer.putInt(TAG_EXT_HEADER_DATA_LENGTH + TAG_EXT_HEADER_CRC_LENGTH);      extFlagsByte1|=MASK_V23_CRC_DATA_PRESENT;      headerBuffer.put(extFlagsByte1);      headerBuffer.put(extFlagsByte2);      headerBuffer.putInt(paddingSize);      headerBuffer.putInt(crc32);    } else {      headerBuffer.putInt(TAG_EXT_HEADER_DATA_LENGTH);      headerBuffer.put(extFlagsByte1);      headerBuffer.put(extFlagsByte2);      headerBuffer.putInt(padding);    }  }  headerBuffer.flip();  return headerBuffer;}  }
class C{  public boolean isClosed(){synchronized (closeLock) {    return closed;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.CipherDataElement createCipherDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.CipherDataElementImpl();}  }
class C{  public SdpParseException(int lineNumber,int charOffset,String message,Throwable rootCause){  super(message,rootCause);  this.lineNumber=lineNumber;  this.charOffset=charOffset;}  }
class C{  @Inject public RepositoryAuditEventHandler(final RepositoryAuditEventHandlerConfiguration configuration,final EventTopicsMetaData eventTopicsMetaData,@Audit final ConnectionFactory connectionFactory){  super(configuration.getName(),eventTopicsMetaData,configuration.getTopics(),configuration.isEnabled());  RouterAuditEventHandlerConfiguration routerConfig=new RouterAuditEventHandlerConfiguration();  routerConfig.setResourcePath(configuration.getResourcePath());  routerConfig.setTopics(configuration.getTopics());  routerConfig.setName(configuration.getName());  routerConfig.setEnabled(configuration.isEnabled());  this.routerAuditEventHandler=new RouterAuditEventHandler(routerConfig,eventTopicsMetaData,connectionFactory);}  }
