class C{  public void testCreate2(){  System.out.println("create from AuditCommand");  AuditCommand auditCommand=EasyMock.createMock(AuditCommand.class);  AuditServiceThreadFactoryImpl instance=initiliseAuditServiceThreadFactory();}  }
class C{  private void drawFaceAnnotations(Canvas canvas,double scale){  Paint paint=new Paint();  paint.setColor(Color.GREEN);  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(5);  for (int i=0; i < mFaces.size(); ++i) {    Face face=mFaces.valueAt(i);    for (    Landmark landmark : face.getLandmarks()) {      int cx=(int)(landmark.getPosition().x * scale);      int cy=(int)(landmark.getPosition().y * scale);      canvas.drawCircle(cx,cy,10,paint);    }  }}  }
class C{  public static void main(String[] args){  ColorChooserDemo demo=new ColorChooserDemo(null);  demo.mainImpl();}  }
class C{  public boolean greaterEquals(final HttpVersion version){  return compareTo(version) >= 0;}  }
class C{  private static int calculateNumberOfRows(int m,int k,int c){  int r=((m + 1 + k) / c) + 1;  if (c * r >= (m + 1 + k+ c)) {    r--;  }  return r;}  }
class C{  public void execute(){  execute0(false);}  }
class C{  public MoveMethodDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.MOVE_METHOD,project,description,comment,arguments,flags);}  }
class C{  private static void copy(InputStream input,OutputStream output) throws IOException {  IOUtils.copy(input,output);}  }
class C{  public double impliedVolatility(final double price,final GeneralizedBlackScholesProcess process,final double accuracy,final int maxEvaluations,final double minVol){  return impliedVolatility(price,process,accuracy,maxEvaluations,minVol,4.0);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public boolean add(LiveSet additionList){  if (additionList == null) {    return false;  }  LiveSetEnumerator lsEnum=additionList.enumerator();  if (!lsEnum.hasMoreElements()) {    return false;  }  if (DEBUG) {    System.out.println("\t LiveSet.add called");    System.out.println("\t   currentList: " + this);    System.out.println("\t   additionList: " + additionList);  }  boolean change=false;  if (first == null) {    RegisterOperand newElem=lsEnum.nextElement();    first=new LiveSetElement(newElem);    LiveSetElement existingPtr=first;    while (lsEnum.hasMoreElements()) {      newElem=lsEnum.nextElement();      LiveSetElement elem=new LiveSetElement(newElem);      existingPtr.setNext(elem);      existingPtr=elem;    }    change=true;  } else {    LiveSetElement newPtr=additionList.first;    LiveSetElement curPtr=first;    LiveSetElement curPrevPtr=null;    while (newPtr != null && curPtr != null) {      if (newPtr.getRegister().number < curPtr.getRegister().number) {        curPrevPtr=createAndAddToCurrentList(newPtr.getRegisterOperand(),curPrevPtr);        curPtr=getNextPtr(curPrevPtr);        newPtr=newPtr.getNext();        change=true;      } else       if (newPtr.getRegister().number > curPtr.getRegister().number) {        curPrevPtr=curPtr;        curPtr=curPtr.getNext();      } else {        curPrevPtr=curPtr;        curPtr=curPtr.getNext();        newPtr=newPtr.getNext();      }    }    while (newPtr != null) {      curPrevPtr=createAndAddToCurrentList(newPtr.getRegisterOperand(),curPrevPtr);      curPtr=getNextPtr(curPrevPtr);      newPtr=newPtr.getNext();      change=true;    }  }  if (DEBUG) {    System.out.println("\tafter add:" + this + "\n Change:"+ change);  }  return change;}  }
class C{  public CertificateIssuerExtension(GeneralNames issuer) throws IOException {  this.extensionId=PKIXExtensions.CertificateIssuer_Id;  this.critical=true;  this.names=issuer;  encodeThis();}  }
class C{  public void increment(long i){  val+=i;}  }
class C{  public BufferedImage toImage(Drawing drawing,java.util.List<Figure> figures,AffineTransform transform,Dimension imageSize){  Color background=drawing.get(CANVAS_FILL_COLOR);  double opacity=drawing.get(CANVAS_FILL_OPACITY);  if (background == null) {    background=new Color(0xff,0xff,0xff,0x0);  } else {    background=new Color(background.getRed(),background.getGreen(),background.getBlue(),(int)(background.getAlpha() * opacity));  }  BufferedImage buf=new BufferedImage(Math.max(1,imageSize.width),Math.max(1,imageSize.height),(background.getAlpha() == 255) ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB);  Graphics2D g=buf.createGraphics();  Composite savedComposite=g.getComposite();  g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));  g.setColor(background);  g.fillRect(0,0,buf.getWidth(),buf.getHeight());  g.setComposite(savedComposite);  setRenderingHints(g);  g.transform(transform);  for (  Figure f : figures) {    f.draw(g);  }  g.dispose();  if (imageType != BufferedImage.TYPE_INT_ARGB) {    BufferedImage buf2=new BufferedImage(buf.getWidth(),buf.getHeight(),imageType);    g=buf2.createGraphics();    setRenderingHints(g);    g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));    g.drawImage(buf,0,0,null);    g.dispose();    buf.flush();    buf=buf2;  }  return buf;}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  public void create(Node node){  addReachable(node);  finder.findEdge(dirEdgeList);  rightMostCoord=finder.getCoordinate();}  }
class C{  @RequestMapping(value="/admin/tags",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Tag> updateTag(@Valid @RequestBody Tag tag) throws URISyntaxException {  log.debug("REST request to update Tag : {}",tag);  if (tag.getId() == null) {    return createTag(tag);  }  Tag result=tagRepository.save(tag);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("tag",tag.getId().toString())).body(result);}  }
class C{  protected StringLit_Impl(){  super();}  }
class C{  private ExportGroup findOrCreateExportGroup(IngestionRequestContext requestContext,StorageSystem array,Collection<Initiator> initiators,URI virtualArrayURI,URI projectURI,URI tenantURI,int numPaths,UnManagedExportMask unmanagedExportMask){  StorageSystem vplex=requestContext.getStorageSystem();  String arrayName=array.getSystemType().replace("block","") + array.getSerialNumber().substring(array.getSerialNumber().length() - 4);  String groupName=unmanagedExportMask.getMaskName() + "_" + arrayName;  ExportGroup exportGroup=requestContext.findExportGroup(groupName,projectURI,virtualArrayURI,null,null);  if (null != exportGroup) {    _logger.info(String.format("Returning existing ExportGroup %s",exportGroup.getLabel()));    return exportGroup;  }  List<ExportGroup> exportGroups=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,ExportGroup.class,PrefixConstraint.Factory.getFullMatchConstraint(ExportGroup.class,"label",groupName));  if (null != exportGroups && !exportGroups.isEmpty()) {    for (    ExportGroup group : exportGroups) {      if (null != group) {        _logger.info(String.format("Returning existing ExportGroup %s",group.getLabel()));        exportGroup=group;      }    }  } else {    exportGroup=new ExportGroup();    exportGroup.setLabel(groupName);    exportGroup.setProject(new NamedURI(projectURI,exportGroup.getLabel()));    exportGroup.setVirtualArray(vplex.getVirtualArray());    exportGroup.setTenant(new NamedURI(tenantURI,exportGroup.getLabel()));    exportGroup.setGeneratedName(groupName);    exportGroup.setVolumes(new StringMap());    exportGroup.setOpStatus(new OpStatusMap());    exportGroup.setVirtualArray(virtualArrayURI);    exportGroup.setNumPaths(numPaths);    for (    Initiator initiator : initiators) {      exportGroup.addInitiator(initiator);    }    _logger.info(String.format("Returning new ExportGroup %s",exportGroup.getLabel()));  }  return exportGroup;}  }
class C{  @Override public void put(String name,float value){  emulatedFields.put(name,value);}  }
class C{  private void cmd_errorSave(){  JFileChooser chooser=new JFileChooser();  chooser.setDialogType(JFileChooser.SAVE_DIALOG);  chooser.setDialogTitle("Adempiere Trace File");  chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);  chooser.setSelectedFile(new File("traceInfo.log"));  int returnVal=chooser.showSaveDialog(this);  if (returnVal != JFileChooser.APPROVE_OPTION)   return;  try {    File file=chooser.getSelectedFile();    FileWriter writer=new FileWriter(file);    writer.write(CLogErrorBuffer.get(true).getErrorInfo(Env.getCtx(),bErrorsOnly.isSelected()));    writer.flush();    writer.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  public boolean isFrameNonInterleaved(){  return (FUI_TYPE == AVC_NALTYPE_FUA);}  }
class C{  public BufferedDataInputStream(String name) throws IOException {  this(new FileInputStream(name));}  }
class C{  public void update(Double actualFutureChange,Prediction prediction){  Outcome outcome=Outcome.getOutcome(prediction,actualFutureChange);switch (outcome) {case CORRECT:    totalPercentPredicted+=Math.abs(actualFutureChange);  break;case INCORRECT:totalPercentMispredicted+=Math.abs(actualFutureChange);break;}}  }
class C{  public boolean shouldSaveContainmentFeature(EObject eObj){  if (EcorePackage.eINSTANCE.getEClassifiers().contains(eObj.eClass())) {    return false;  }  try {    eObj.eResource().getURIFragment(eObj);  } catch (  Exception ex) {    return false;  }  return true;}  }
class C{  public SessionPingedEvent(final String sessionId,final long timeout,final String comment){  super(sessionId);  this.timeout=timeout;  this.comment=fromNullable(comment);}  }
class C{  public static MappedMemory allocate(File file,long size){  return new MappedMemoryAllocator(file).allocate(size);}  }
class C{  ReasonsMask(){  this(0);}  }
class C{  public static void initMap(ExtendableMap map){  map.clear();  map.addBidirectionalLink(PERTH,ALBANY,417.0);  map.addBidirectionalLink(PERTH,KALGOORLIE,593.0);  map.addBidirectionalLink(PERTH,GERALDTON,424.0);  map.addBidirectionalLink(PERTH,PORT_HEDLAND,1637.0);  map.addBidirectionalLink(ALBANY,ESPERANCE,478.0);  map.addBidirectionalLink(KALGOORLIE,NORSEMAN,187.0);  map.addBidirectionalLink(ESPERANCE,NORSEMAN,204.0);  map.addBidirectionalLink(NORSEMAN,PORT_AUGUSTA,1668.0);  map.addBidirectionalLink(GERALDTON,CAMARVON,479.0);  map.addBidirectionalLink(CAMARVON,PORT_HEDLAND,872.0);  map.addBidirectionalLink(PORT_HEDLAND,BROOME,589.0);  map.addBidirectionalLink(BROOME,HALLS_CREEK,685.0);  map.addBidirectionalLink(HALLS_CREEK,WYNDHAM,370.0);  map.addBidirectionalLink(HALLS_CREEK,KATHERINE,874.0);  map.addBidirectionalLink(WYNDHAM,KATHERINE,613.0);  map.addBidirectionalLink(KATHERINE,DARWIN,317.0);  map.addBidirectionalLink(KATHERINE,TENNANT_CREEK,673.0);  map.addBidirectionalLink(TENNANT_CREEK,MT_ISA,663.0);  map.addBidirectionalLink(TENNANT_CREEK,ALICE_SPRINGS,508.0);  map.addBidirectionalLink(ALICE_SPRINGS,COOBER_PEDY,688.0);  map.addBidirectionalLink(COOBER_PEDY,PORT_AUGUSTA,539.0);  map.addBidirectionalLink(MT_ISA,TOWNSVILLE,918.0);  map.addBidirectionalLink(TOWNSVILLE,CAIRNS,346.0);  map.addBidirectionalLink(MT_ISA,LONGREACH,647.0);  map.addBidirectionalLink(TOWNSVILLE,MACKAY,388.0);  map.addBidirectionalLink(MACKAY,ROCKHAMPTON,336.0);  map.addBidirectionalLink(LONGREACH,ROCKHAMPTON,687.0);  map.addBidirectionalLink(ROCKHAMPTON,BRISBANE,616.0);  map.addBidirectionalLink(LONGREACH,CHARLEVILLE,515.0);  map.addBidirectionalLink(CHARLEVILLE,BRISBANE,744.0);  map.addBidirectionalLink(CHARLEVILLE,NYNGAN,657.0);  map.addBidirectionalLink(NYNGAN,BROKEN_HILL,588.0);  map.addBidirectionalLink(BROKEN_HILL,PORT_AUGUSTA,415.0);  map.addBidirectionalLink(NYNGAN,DUBBO,166.0);  map.addBidirectionalLink(DUBBO,BRISBANE,860.0);  map.addBidirectionalLink(DUBBO,SYDNEY,466.0);  map.addBidirectionalLink(BRISBANE,TAMWORTH,576.0);  map.addBidirectionalLink(BRISBANE,PORT_MACQUARIE,555.0);  map.addBidirectionalLink(PORT_MACQUARIE,NEWCASTLE,245.0);  map.addBidirectionalLink(TAMWORTH,NEWCASTLE,284.0);  map.addBidirectionalLink(NEWCASTLE,SYDNEY,159.0);  map.addBidirectionalLink(SYDNEY,CANBERRA,287.0);  map.addBidirectionalLink(CANBERRA,WAGGA_WAGGA,243.0);  map.addBidirectionalLink(DUBBO,WAGGA_WAGGA,400.0);  map.addBidirectionalLink(SYDNEY,LAKES_ENTRANCE,706.0);  map.addBidirectionalLink(LAKES_ENTRANCE,MELBOURNE,317.0);  map.addBidirectionalLink(WAGGA_WAGGA,MELBOURNE,476.0);  map.addBidirectionalLink(WAGGA_WAGGA,HAY,269.0);  map.addBidirectionalLink(MELBOURNE,WARNAMBOOL,269.0);  map.addBidirectionalLink(WARNAMBOOL,MOUNT_GAMBIER,185.0);  map.addBidirectionalLink(MOUNT_GAMBIER,ADELAIDE,449.0);  map.addBidirectionalLink(HAY,ADELAIDE,655.0);  map.addBidirectionalLink(PORT_AUGUSTA,ADELAIDE,306.0);  map.addBidirectionalLink(MELBOURNE,ADELAIDE,728.0);  map.addBidirectionalLink(PORT_AUGUSTA,PORT_LINCOLN,341.0);  map.setPosition(ADELAIDE,417,1289);  map.setPosition(ALBANY,-1559,1231);  map.setPosition(ALICE_SPRINGS,0,0);  map.setPosition(BRISBANE,1882,415);  map.setPosition(BROKEN_HILL,709,873);  map.setPosition(BROOME,-1189,-645);  map.setPosition(CAIRNS,1211,-791);  map.setPosition(CAMARVON,-2004,-34);  map.setPosition(CANBERRA,1524,1189);  map.setPosition(CHARLEVILLE,1256,268);  map.setPosition(COOBER_PEDY,86,593);  map.setPosition(DARWIN,-328,-1237);  map.setPosition(DUBBO,1474,881);  map.setPosition(ESPERANCE,-1182,1132);  map.setPosition(GERALDTON,-1958,405);  map.setPosition(HALLS_CREEK,-630,-624);  map.setPosition(HAY,985,1143);  map.setPosition(KALGOORLIE,-1187,729);  map.setPosition(KATHERINE,-183,-1025);  map.setPosition(LAKES_ENTRANCE,1412,1609);  map.setPosition(LONGREACH,1057,-49);  map.setPosition(MACKAY,1553,-316);  map.setPosition(MELBOURNE,1118,1570);  map.setPosition(MOUNT_GAMBIER,602,1531);  map.setPosition(MT_ISA,563,-344);  map.setPosition(NEWCASTLE,1841,979);  map.setPosition(NORSEMAN,-1162,881);  map.setPosition(NYNGAN,1312,781);  map.setPosition(PERTH,-1827,814);  map.setPosition(PORT_AUGUSTA,358,996);  map.setPosition(PORT_HEDLAND,-1558,-438);  map.setPosition(PORT_LINCOLN,169,1205);  map.setPosition(PORT_MACQUARIE,1884,849);  map.setPosition(ROCKHAMPTON,1693,-59);  map.setPosition(SYDNEY,1778,1079);  map.setPosition(TAMWORTH,1752,722);  map.setPosition(TENNANT_CREEK,30,-445);  map.setPosition(TOWNSVILLE,1318,-520);  map.setPosition(WAGGA_WAGGA,1322,1125);  map.setPosition(WARNAMBOOL,761,1665);  map.setPosition(WYNDHAM,-572,-932);}  }
class C{  public TDoubleFloatHashMap(int initialCapacity,TDoubleHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  private static boolean decodeIpv4Suffix(String input,int pos,int limit,byte[] address,int addressOffset){  int b=addressOffset;  for (int i=pos; i < limit; ) {    if (b == address.length)     return false;    if (b != addressOffset) {      if (input.charAt(i) != '.')       return false;      i++;    }    int value=0;    int groupOffset=i;    for (; i < limit; i++) {      char c=input.charAt(i);      if (c < '0' || c > '9')       break;      if (value == 0 && groupOffset != i)       return false;      value=(value * 10) + c - '0';      if (value > 255)       return false;    }    int groupLength=i - groupOffset;    if (groupLength == 0)     return false;    address[b++]=(byte)value;  }  if (b != addressOffset + 4)   return false;  return true;}  }
class C{  public String sqlMetadata_uniqueNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_uniqueNames(catalogName,schemaName);}  }
class C{  public static void eachObject(ObjectInputStream ois,Closure closure) throws IOException, ClassNotFoundException {  try {    while (true) {      try {        Object obj=ois.readObject();        closure.call(obj);      } catch (      EOFException e) {        break;      }    }    InputStream temp=ois;    ois=null;    temp.close();  }  finally {    closeWithWarning(ois);  }}  }
class C{  public void defaultMutate(EvolutionState state,int thread){  FloatVectorSpecies s=(FloatVectorSpecies)species;  MersenneTwisterFast rng=state.random[thread];  for (int x=0; x < genome.length; x++)   if (rng.nextBoolean(s.mutationProbability(x))) {    double old=genome[x];    for (int retries=0; retries < s.duplicateRetries(x) + 1 + 1; retries++) {switch (s.mutationType(x)) {case FloatVectorSpecies.C_GAUSS_MUTATION:        gaussianMutation(state,rng,s,x);      break;case FloatVectorSpecies.C_POLYNOMIAL_MUTATION:    polynomialMutation(state,rng,s,x);  break;case FloatVectorSpecies.C_RESET_MUTATION:floatResetMutation(rng,s,x);break;case FloatVectorSpecies.C_INTEGER_RESET_MUTATION:integerResetMutation(rng,s,x);break;case FloatVectorSpecies.C_INTEGER_RANDOM_WALK_MUTATION:integerRandomWalkMutation(rng,s,x);break;default :state.output.fatal("In DoubleVectorIndividual.defaultMutate, default case occurred when it shouldn't have");break;}if (genome[x] != old) break;}}}  }
class C{  public boolean isRealtimeBarsRunning(Contract contract){  if (m_realTimeBarsRequests.containsKey(contract.getId())) {    return true;  }  return false;}  }
class C{  public V minimum(){  BalancedBinaryNode<K,V> p=root;  if (p == null) {    return null;  }  while (p.left != null)   p=p.left;  V oldValue=p.value;  deleteEntry(p);  return oldValue;}  }
class C{  public boolean isExtenalService(){  if (ServiceAccessType.EXTERNAL.equals(getTechnicalProduct().getAccessType())) {    return true;  }  return false;}  }
class C{  @Override public void filter(ClientRequestContext requestContext,ClientResponseContext responseContext) throws IOException {  HttpResponse httpResponse=new TraceableHttpClientResponse(responseContext);  ClientResponseAdapter responseAdapter=new HttpClientResponseAdapter(httpResponse);  responseInterceptor.handle(responseAdapter);}  }
class C{  public IMouseState createBackgroundDraggedRightState(final MouseEvent event){  final CBackgroundDraggedRightState state=new CBackgroundDraggedRightState(this,m_graph);  m_factory.createBackgroundDraggedRightAction().execute(state,event);  return state;}  }
class C{  public boolean isDuplicate(){  return this.dup;}  }
class C{  public void removeAfferent(final Synapse synapse){  if (fanIn != null) {    fanIn.remove(synapse);  }}  }
class C{  public static void onError(Context context){  init(context);  CrashHandler handler=CrashHandler.getInstance();  handler.init(context);  Thread.setDefaultUncaughtExceptionHandler(handler);}  }
class C{  public Matrix3d rotateZYX(double angleZ,double angleY,double angleX){  return rotateZYX(angleZ,angleY,angleX,this);}  }
class C{  public static boolean requestManaExact(ItemStack stack,EntityPlayer player,int manaToGet,boolean remove){  if (stack == null)   return false;  IInventory mainInv=player.inventory;  IInventory baublesInv=BotaniaAPI.internalHandler.getBaublesInventory(player);  int invSize=mainInv.getSizeInventory();  int size=invSize;  if (baublesInv != null)   size+=baublesInv.getSizeInventory();  for (int i=0; i < size; i++) {    boolean useBaubles=i >= invSize;    IInventory inv=useBaubles ? baublesInv : mainInv;    int slot=i - (useBaubles ? invSize : 0);    ItemStack stackInSlot=inv.getStackInSlot(slot);    if (stackInSlot == stack)     continue;    if (stackInSlot != null && stackInSlot.getItem() instanceof IManaItem) {      IManaItem manaItemSlot=(IManaItem)stackInSlot.getItem();      if (manaItemSlot.canExportManaToItem(stackInSlot,stack) && manaItemSlot.getMana(stackInSlot) > manaToGet) {        if (stack.getItem() instanceof IManaItem && !((IManaItem)stack.getItem()).canReceiveManaFromItem(stack,stackInSlot))         continue;        if (remove)         manaItemSlot.addMana(stackInSlot,-manaToGet);        if (useBaubles)         BotaniaAPI.internalHandler.sendBaubleUpdatePacket(player,slot);        return true;      }    }  }  return false;}  }
class C{  public void testEmptyTerm() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newTextField("foo","bar",Field.Store.NO));  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher is=newSearcher(ir);  for (  Similarity sim : sims) {    is.setSimilarity(sim);    BooleanQuery.Builder query=new BooleanQuery.Builder();    query.add(new TermQuery(new Term("foo","bar")),BooleanClause.Occur.SHOULD);    query.add(new TermQuery(new Term("foo","baz")),BooleanClause.Occur.SHOULD);    assertEquals(1,is.search(query.build(),10).totalHits);  }  ir.close();  dir.close();}  }
class C{  public NTRUSigningParameters(int N,int q,int d,int B,double beta,double normBound,Digest hashAlg){  this.N=N;  this.q=q;  this.d=d;  this.B=B;  this.beta=beta;  this.normBound=normBound;  this.hashAlg=hashAlg;  init();}  }
class C{  private static Element infoAsElement(Document doc,LibraryInfo info){  Element libraryElement=doc.createElement("libraryInfo");  libraryElement.setAttribute("version",info.getVersion());  appendPathElements(doc,"bootpath",libraryElement,info.getBootpath());  appendPathElements(doc,"extensionDirs",libraryElement,info.getExtensionDirs());  appendPathElements(doc,"endorsedDirs",libraryElement,info.getEndorsedDirs());  return libraryElement;}  }
class C{  public static Collector<QueryResultPart,QueryResult> collectParts(final QueryTrace.Identifier what,final DateRange range,final AggregationCombiner combiner,final OptionalLimit groupLimit){  final QueryTrace.NamedWatch w=QueryTrace.watch(what);  return null;}  }
class C{  public boolean isValid(String s){  if (s == null || s.length() == 0)   return false;  Stack<Character> stk=new Stack<>();  for (  Character c : s.toCharArray()) {    if (!isParenthese(c))     continue;    if ("({[".indexOf(c) != -1) {      stk.push(c);    } else {      if (!stk.isEmpty() && isMatch(stk.peek(),c)) {        stk.pop();      } else {        return false;      }    }  }  return stk.isEmpty();}  }
class C{  public void pause(){  if (!mPaused) {    mPaused=true;    onStateChanged();  }}  }
class C{  public void testFindPrefixes(){  Vector<String> prefixes=m_Trie.getWithPrefix("this");  assertEquals("Different number of prefixes returned",2,prefixes.size());  prefixes=m_Trie.getWithPrefix("blah");  assertEquals("Different number of prefixes returned",0,prefixes.size());}  }
class C{  public CursorBuilder afterLast(){  _beforeFirst=false;  return this;}  }
class C{  public double remove(K key){  double prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public void onEvent(Event e) throws Exception {  if (e.getTarget().getId().equals("Cancel")) {    this.detach();  } else   if (e.getTarget().getId().equals("Ok")) {    insert();    detach();  } else   if (e.getTarget() == bDelete) {    int no=delete();    if (no == 0)     FDialog.warn(m_WindowNo,this.getTitle(),"ValuePreferenceNotFound"); else     FDialog.info(m_WindowNo,this,"ValuePreferenceDeleted",String.valueOf(no));    detach();  } else   setExplanation();}  }
class C{  public static SemIm serializableInstance(){  return new SemIm(SemPm.serializableInstance());}  }
class C{  public void entity(String name,int value){  theEntities.put(name,new Integer(value));}  }
class C{  public static UsageLogging usageLogging(String moduleName,UUID runId,boolean suppress) throws IOException {  return new UsageLogging(new Properties(),moduleName,runId,suppress);}  }
class C{  private void doParameterAveraging(boolean b){  this.doParameterAveraging=b;}  }
class C{  private void updateFromColumnVisible(boolean visible){  fromColumn=true;  setSelected(visible);  fromColumn=false;}  }
class C{  protected final Class<?> defineClass(String className,byte[] classRep,int offset,int length,ProtectionDomain protectionDomain) throws java.lang.ClassFormatError {  if (className != null && className.indexOf('/') != -1) {    throw new NoClassDefFoundError("The name is expected in binary (canonical) form," + " therefore '/' symbols are not allowed: " + className);  }  if (offset < 0 || length < 0 || offset + length > classRep.length) {    throw new IndexOutOfBoundsException("Either offset or len is outside of the data array");  }  if (protectionDomain == null) {    if (defaultDomain == null) {      defaultDomain=new ProtectionDomain(new CodeSource(null,(Certificate[])null),null,this,null);    }    protectionDomain=defaultDomain;  }  Certificate[] certs=null;  String packageName=null;  if (className != null) {    if (className.startsWith("java.")) {      throw new SecurityException("It is not allowed to define classes inside the java.* package: " + className);    }    int lastDot=className.lastIndexOf('.');    packageName=lastDot == -1 ? "" : className.substring(0,lastDot);    certs=getCertificates(packageName,protectionDomain.getCodeSource());  }  Class<?> clazz=defineClass0(className,classRep,offset,length);  clazz.setProtectionDomain(protectionDomain);  if (certs != null) {    packageCertificates.put(packageName,certs);  }  return clazz;}  }
class C{  public static String byteToString(byte[] array){  return Base64.encode(array);}  }
class C{  private void addFinally(ArrayList returnList,Stmnt finallyBlock) throws CompileError {  Bytecode bc=bytecode;  int n=returnList.size();  for (int i=0; i < n; ++i) {    final int[] ret=(int[])returnList.get(i);    int pc=ret[0];    bc.write16bit(pc,bc.currentPc() - pc + 1);    ReturnHook hook=new JsrHook2(this,ret);    finallyBlock.accept(this);    hook.remove(this);    if (!hasReturned) {      bc.addOpcode(Opcode.GOTO);      bc.addIndex(pc + 3 - bc.currentPc());    }  }}  }
class C{  private void persistData(PduPart part,Uri uri,String contentType,HashMap<Uri,InputStream> preOpenedFiles) throws MmsException {  OutputStream os=null;  InputStream is=null;  DrmConvertSession drmConvertSession=null;  Uri dataUri=null;  String path=null;  try {    byte[] data=part.getData();    if (ContentType.TEXT_PLAIN.equals(contentType) || ContentType.APP_SMIL.equals(contentType) || ContentType.TEXT_HTML.equals(contentType)) {      ContentValues cv=new ContentValues();      cv.put(Telephony.Mms.Part.TEXT,new EncodedStringValue(data).getString());      if (mContentResolver.update(uri,cv,null,null) != 1) {        throw new MmsException("unable to update " + uri.toString());      }    } else {      boolean isDrm=DownloadDrmHelper.isDrmConvertNeeded(contentType);      if (isDrm) {        if (uri != null) {          try {            path=convertUriToPath(mContext,uri);            if (LOCAL_LOGV)             Log.v(TAG,"drm uri: " + uri + " path: "+ path);            File f=new File(path);            long len=f.length();            if (LOCAL_LOGV)             Log.v(TAG,"drm path: " + path + " len: "+ len);            if (len > 0) {              return;            }          } catch (          Exception e) {            Log.e(TAG,"Can't get file info for: " + part.getDataUri(),e);          }        }        drmConvertSession=DrmConvertSession.open(mContext,contentType);        if (drmConvertSession == null) {          throw new MmsException("Mimetype " + contentType + " can not be converted.");        }      }      os=mContentResolver.openOutputStream(uri);      if (data == null) {        dataUri=part.getDataUri();        if ((dataUri == null) || (dataUri == uri)) {          Log.w(TAG,"Can't find data for this part.");          return;        }        if (preOpenedFiles != null && preOpenedFiles.containsKey(dataUri)) {          is=preOpenedFiles.get(dataUri);        }        if (is == null) {          is=mContentResolver.openInputStream(dataUri);        }        if (LOCAL_LOGV)         Log.v(TAG,"Saving data to: " + uri);        byte[] buffer=new byte[8192];        for (int len=0; (len=is.read(buffer)) != -1; ) {          if (!isDrm) {            os.write(buffer,0,len);          } else {            byte[] convertedData=drmConvertSession.convert(buffer,len);            if (convertedData != null) {              os.write(convertedData,0,convertedData.length);            } else {              throw new MmsException("Error converting drm data.");            }          }        }      } else {        if (LOCAL_LOGV)         Log.v(TAG,"Saving data to: " + uri);        if (!isDrm) {          os.write(data);        } else {          dataUri=uri;          byte[] convertedData=drmConvertSession.convert(data,data.length);          if (convertedData != null) {            os.write(convertedData,0,convertedData.length);          } else {            throw new MmsException("Error converting drm data.");          }        }      }    }  } catch (  FileNotFoundException e) {    Log.e(TAG,"Failed to open Input/Output stream.",e);    throw new MmsException(e);  }catch (  IOException e) {    Log.e(TAG,"Failed to read/write data.",e);    throw new MmsException(e);  } finally {    if (os != null) {      try {        os.close();      } catch (      IOException e) {        Log.e(TAG,"IOException while closing: " + os,e);      }    }    if (is != null) {      try {        is.close();      } catch (      IOException e) {        Log.e(TAG,"IOException while closing: " + is,e);      }    }    if (drmConvertSession != null) {      drmConvertSession.close(path);      File f=new File(path);      ContentValues values=new ContentValues(0);      SqliteWrapper.update(mContext,mContentResolver,Uri.parse("content://mms/resetFilePerm/" + f.getName()),values,null,null);    }  }}  }
class C{  @Override public boolean isRunning(){  return true;}  }
class C{  @Override public String toSource(String className) throws Exception {  StringBuffer[] source=m_root.toSource(className);  return "class " + className + " {\n\n"+ "  public static double classify(Object[] i)\n"+ "    throws Exception {\n\n"+ "    double p = Double.NaN;\n"+ source[0]+ "    return p;\n"+ "  }\n"+ source[1]+ "}\n";}  }
class C{  public void startThreads(){  int priority=Thread.currentThread().getPriority();  log.debug("startThreads current priority = " + priority + " max available = "+ Thread.MAX_PRIORITY+ " default = "+ Thread.NORM_PRIORITY+ " min available = "+ Thread.MIN_PRIORITY);  int xmtpriority=(Thread.MAX_PRIORITY - 1 > priority ? Thread.MAX_PRIORITY - 1 : Thread.MAX_PRIORITY);  if (xmtHandler == null) {    xmtHandler=new XmtHandler();  }  Thread xmtThread=new Thread(xmtHandler,"LocoNet transmit handler");  log.debug("Xmt thread starts at priority " + xmtpriority);  xmtThread.setDaemon(true);  xmtThread.setPriority(Thread.MAX_PRIORITY - 1);  xmtThread.start();  if (rcvHandler == null) {    rcvHandler=new RcvHandler(this);  }  Thread rcvThread=new Thread(rcvHandler,"LocoNet receive handler");  rcvThread.setDaemon(true);  rcvThread.setPriority(Thread.MAX_PRIORITY);  rcvThread.start();}  }
class C{  @Override public void shutdown(){  berkeleyMatchDBService.shutdown();  berkeleyMD5Service.shutdown();}  }
class C{  public void readCpMaps(BufferedReader fin) throws IOException {  if (cpStr2Int != null) {    cpStr2Int.clear();  } else {    cpStr2Int=new HashMap();  }  if (cpInt2Str != null) {    cpInt2Str.clear();  } else {    cpInt2Str=new HashMap();  }  String line;  if ((line=fin.readLine()) == null) {    System.out.println("No context predicate map size information");    return;  }  int numCps=Integer.parseInt(line);  if (numCps <= 0) {    System.out.println("Invalid mapping size");    return;  }  System.out.println("Reading the context predicate maps ...");  for (int i=0; i < numCps; i++) {    line=fin.readLine();    if (line == null) {      System.out.println("Invalid context predicate mapping line");      return;    }    StringTokenizer strTok=new StringTokenizer(line," \t\r\n");    if (strTok.countTokens() != 2) {      continue;    }    String cpStr=strTok.nextToken();    String cpInt=strTok.nextToken();    cpStr2Int.put(cpStr,new Integer(cpInt));    cpInt2Str.put(new Integer(cpInt),cpStr);  }  System.out.println("Reading context predicate maps (" + Integer.toString(cpStr2Int.size()) + " entries) completed!");  line=fin.readLine();}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.shadowPaint=SerialUtilities.readPaint(stream);}  }
class C{  public ComparableWrapper(){}  }
class C{  @Inject public ResetToCommitPresenter(ResetToCommitView view,GitServiceClient service,GitLocalizationConstant constant,GitOutputPartPresenter console,EditorAgent editorAgent,AppContext appContext,NotificationManager notificationManager,DtoUnmarshallerFactory dtoUnmarshallerFactory,ProjectExplorerPresenter projectExplorer,EventBus eventBus,ProjectServiceClient projectService){  this.view=view;  this.console=console;  this.projectExplorer=projectExplorer;  this.view.setDelegate(this);  this.service=service;  this.constant=constant;  this.editorAgent=editorAgent;  this.appContext=appContext;  this.notificationManager=notificationManager;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;  this.eventBus=eventBus;  this.projectService=projectService;}  }
class C{  public static boolean isConnectedUsingWifi(){  Context context=FeApp.getAppContext();  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo ni=cm.getActiveNetworkInfo();  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;}  }
class C{  ResultAction changeCurrentMode(Mode mode){  return new AttachAction(getModeUsage().changeCurrentMode(mode));}  }
class C{  @SuppressWarnings("unused") @Test public void testCompositeStateExitSequence_Deep(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    EventDefinition e1=_createEventDefinition("e1",s_scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);{        _createExitAssignment(v1,s1,1);        Region r_s1=_createRegion("r",s1);{          State s3=_createState("s3",r_s1);{            _createExitAssignment(v1,s3,2);            Region r_s3=_createRegion("r",s3);{              State s4=_createState("s4",r_s3);              _createExitAssignment(v1,s4,3);              FinalState fs=_createFinalState(r_s3);            }          }        }      }      State s2=_createState("s2",r);{        Region r_s1=_createRegion("r",s2);{          _createState("s6",r_s1);        }      }    }  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  ExecutionState _s3=flow.getStates().get(1);  assertEquals("sc.r.s1.r.s3",_s3.getName());  ExecutionState _s4=flow.getStates().get(2);  assertEquals("sc.r.s1.r.s3.r.s4",_s4.getName());  ExecutionState _fs=flow.getStates().get(3);  assertEquals("sc.r.s1.r.s3.r._final_",_fs.getName());  ExecutionState _s6=flow.getStates().get(5);  assertEquals("sc.r.s2.r.s6",_s6.getName());  assertNull(_fs.getEntryAction());  assertNull(_fs.getExitAction());  assertNotNull(_fs.getExitSequence());  assertEquals(2,_s1.getExitSequence().getSteps().size());  ExecutionScope _r_s1=_s1.getSubScopes().get(0);  assertCall(_s1.getExitSequence(),0,_r_s1.getExitSequence());  Step _switch=_r_s1.getExitSequence().getSteps().get(0);  assertStateSwitch(_switch,_s4,_fs);  assertCall(assertedSequence(assertedStateCase(_switch,_s4).getStep()),0,_s4.getExitSequence());  assertCall(assertedSequence(assertedStateCase(_switch,_s4).getStep()),1,_s3.getExitAction());  assertCall(assertedSequence(assertedStateCase(_switch,_fs).getStep()),0,_fs.getExitSequence());  assertCall(assertedSequence(assertedStateCase(_switch,_fs).getStep()),1,_s3.getExitAction());  assertCall(_s1.getExitSequence(),1,_s1.getExitAction());}  }
class C{  @Override public void cancel(final RunningQuery rQuery){  if (rQuery != null) {    final UUID queryId=rQuery.getQueryUuid();    cancel(queryId);  }}  }
class C{  public void pushPacket(IPacket packet,IOFSwitch sw,OFBufferId bufferId,OFPort inPort,OFPort outPort,FloodlightContext cntx,boolean flush){  if (log.isTraceEnabled()) {    log.trace("PacketOut srcSwitch={} inPort={} outPort={}",new Object[]{sw,inPort,outPort});  }  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  actions.add(sw.getOFFactory().actions().buildOutput().setPort(outPort).setMaxLen(Integer.MAX_VALUE).build());  pob.setActions(actions);  pob.setBufferId(bufferId);  pob.setInPort(inPort);  if (pob.getBufferId() == OFBufferId.NO_BUFFER) {    if (packet == null) {      log.error("BufferId is not set and packet data is null. " + "Cannot send packetOut. " + "srcSwitch={} inPort={} outPort={}",new Object[]{sw,inPort,outPort});      return;    }    byte[] packetData=packet.serialize();    pob.setData(packetData);  }  counterPacketOut.increment();  sw.write(pob.build());}  }
class C{  public Builder withCandidate(int candidate){  request.candidate=candidate;  return this;}  }
class C{  public PopulationPlotter(ExampleSet exampleSet){  this(exampleSet,1,false,true);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public RequestHandle put(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPut(getURI(url)),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public T text(CharSequence text,boolean goneIfEmpty){  if (goneIfEmpty && (text == null || text.length() == 0)) {    return gone();  } else {    return text(text);  }}  }
class C{  public void newRegSegment(){  nextreg=max_locals;}  }
class C{  private static boolean useField(){  return 0 != TestUtil.nextInt(random(),0,30);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(MetadataTest.class);}  }
class C{  protected int engineDigest(byte[] buf,int offset,int len) throws DigestException {  if (buf == null) {    throw new IllegalArgumentException("buf == null");  }  if (offset > buf.length || len > buf.length || (len + offset) > buf.length) {    throw new IllegalArgumentException();  }  if (len < DIGEST_LENGTH) {    throw new DigestException("len < DIGEST_LENGTH");  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException(offset);  }  processDigest(buf,offset);  return DIGEST_LENGTH;}  }
class C{  public void close(){  this.toplevel.removeMenu(this);}  }
class C{  public static long currentTime(){  if (_testTime > 0)   return _testTime; else   return System.currentTimeMillis();}  }
class C{  private static byte[] encrypt(byte[] s,String method){  try {    MessageDigest digest=MessageDigest.getInstance(method);    digest.update(s);    return digest.digest();  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return null;}  }
class C{  public static char[] unboundedSignature(char[] signature){  if (signature == null || signature.length < 2)   return signature;  final boolean BUG_83600=true;  if (BUG_83600) {    signature=fix83600(signature);  }  StringBuffer res=new StringBuffer("(");  char[][] parameters=Signature.getParameterTypes(signature);  for (int i=0; i < parameters.length; i++) {    char[] param=parameters[i];    res.append(getLowerBound(param));  }  res.append(')');  res.append(getUpperBound(Signature.getReturnType(signature)));  return res.toString().toCharArray();}  }
class C{  public void onEnd(){}  }
class C{  public Insert select(Query select){  this.query=select;  valuesToInsert.clear();  defaultValues=false;  invalidateCompileCache();  return this;}  }
class C{  @Deprecated @Override public void toXML(final StringBuilder builder,final ConfigVerification errors){  throw new UnsupportedOperationException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.110 -0500",hash_original_method="B8B57389921DBA1CC2428437DFD404AC",hash_generated_method="BA87E322AB32D77DC767F35C91B4FDB3") public AllowEventsParser(String allowEvents){  super(allowEvents);}  }
class C{  public static void reverseRoleDirection(OsmElement e,List<Relation> relations){  if (relations != null) {    for (    Relation r : relations) {      for (      RelationMember rm : r.getAllMembers(e)) {        if (rm.role != null && "forward".equals(rm.role)) {          rm.setRole("backward");          continue;        }        if (rm.role != null && "backward".equals(rm.role)) {          rm.setRole("forward");          continue;        }      }    }  }}  }
class C{  public static void sleep(long millis){  try {    Thread.sleep(millis);  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double eightGridRes=8 * gridRes;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            curv=(Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / (p * Math.pow(q,1.5));            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isEmpty(String str){  return (null == str || 0 == str.length());}  }
class C{  public static boolean createAsMetaVolume(URI volumeURI,DbClient dbClient,VirtualPoolCapabilityValuesWrapper capabilities){  boolean createAsMetaVolume=false;  Volume volume=dbClient.queryObject(Volume.class,volumeURI);  VirtualPool vPool=dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,volume.getStorageController());  StoragePool storagePool=dbClient.queryObject(StoragePool.class,volume.getPool());  MetaVolumeRecommendation recommendation=MetaVolumeUtils.getCreateRecommendation(storageSystem,storagePool,volume.getCapacity(),volume.getThinlyProvisioned(),vPool.getFastExpansion(),capabilities);  if (recommendation.isCreateMetaVolumes()) {    createAsMetaVolume=true;  }  return createAsMetaVolume;}  }
class C{  public static boolean verifyAsCookie(Request request,Response response){  String sToken=request.session().attribute(config.session);  if (sToken == null) {    sToken=CSRFTokenManager.createToken(request,response);    return true;  } else {    String pToken=request.cookie(config.cookie);    if (StringKit.isNotBlank(pToken) && sToken.equals(pToken)) {      return true;    }  }  return false;}  }
class C{  protected MultiDataObject.Entry createPrimaryEntry(MultiDataObject obj,FileObject primaryFile){  return new FileEntry(obj,primaryFile);}  }
class C{  @Nonnull public BugInstance addClass(String className,String sourceFileName){  ClassAnnotation classAnnotation=new ClassAnnotation(className,sourceFileName);  add(classAnnotation);  return this;}  }
class C{  public MergeMap(String currID){  push(currID);}  }
class C{  private JComponent createTitlePane(JRootPane root){  return new BETitlePane(root,this);}  }
class C{  void withJobLocalityTracking(){  this.jobLocalityTracking=true;}  }
class C{  private void populateSearchMessages(SessionSearchInfo searchInfo){  MessageSourceAccessor msa=getMessageSourceAccessor();  searchInfo.getErrorMessages().clear();  if (searchInfo.isEmpty()) {    searchInfo.addErrorMessage(msa.getMessage("probe.src.sessions.search.empty"));  } else   if (searchInfo.isValid()) {    searchInfo.setInfoMessage(msa.getMessage("probe.src.sessions.search.results.empty"));  } else {    if (!searchInfo.isSessionIdValid()) {      searchInfo.addErrorMessage(msa.getMessage("probe.src.sessions.search.invalid.sessionId",new Object[]{searchInfo.getSessionIdMsg()}));    }    if (!searchInfo.isAttrNameValid()) {      for (      String message : searchInfo.getAttrNameMsgs()) {        searchInfo.addErrorMessage(msa.getMessage("probe.src.sessions.search.invalid.attrName",new Object[]{message}));      }    }    if (!searchInfo.isAgeFromValid()) {      searchInfo.addErrorMessage(msa.getMessage("probe.src.sessions.search.invalid.ageFrom"));    }    if (!searchInfo.isAgeToValid()) {      searchInfo.addErrorMessage(msa.getMessage("probe.src.sessions.search.invalid.ageTo"));    }    if (!searchInfo.isIdleTimeFromValid()) {      searchInfo.addErrorMessage(msa.getMessage("probe.src.sessions.search.invalid.idleTimeFrom"));    }    if (!searchInfo.isIdleTimeToValid()) {      searchInfo.addErrorMessage(msa.getMessage("probe.src.sessions.search.invalid.idleTimeTo"));    }    if (searchInfo.getErrorMessages().isEmpty()) {      searchInfo.addErrorMessage(msa.getMessage("probe.src.sessions.search.invalid"));    }  }}  }
class C{  int readCorner3(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public boolean isInternalCommandKey(final String key){  return cmdInternalKeys.contains(key);}  }
class C{  public boolean compare_type_assigners(){  return soot.PhaseOptions.getBoolean(options,"compare-type-assigners");}  }
class C{  public final byte readByte(){  int ch=read();  return (byte)(ch);}  }
class C{  public boolean satisfiedByObligations(int[] obligationStateNumbers){  boolean[] childValues=new boolean[obligationStateNumbers.length];  for (int i=0; i < obligationStateNumbers.length; i++) {    long bit=1L << obligationStateNumbers[i];    childValues[i]=(bit & this.set) != 0;  }  return this.satisfiedBasedOnChildrenValues(childValues);}  }
class C{  public String numAttributesTipText(){  return "The number of attributes to choose: < 1 percentage, >= 1 absolute number.";}  }
class C{  public List<Class<?>> findAllClasses(String uri) throws IOException, ClassNotFoundException {  List<Class<?>> classes=new ArrayList<>();  List<String> strings=findAllStrings(uri);  for (  String className : strings) {    Class<?> clazz=_classLoader.loadClass(className);    classes.add(clazz);  }  return classes;}  }
class C{  public static String normalizeMatchup(final String matchup){  if (matchup == null)   return null;  final String[] teams=matchup.toLowerCase().split("v");  for (int i=0; i < teams.length; i++) {    final char[] letters=teams[i].toCharArray();    Arrays.sort(letters);    teams[i]=new String(letters);  }  Arrays.sort(teams);  final StringBuilder sb=new StringBuilder();  for (int i=0; i < teams.length; i++) {    if (i > 0)     sb.append('v');    sb.append(teams[i]);  }  return sb.toString();}  }
class C{  protected Anonymous_numExpr_3_Impl(){  super();}  }
class C{  @Override public StringBuffer format(final Object obj,final StringBuffer toAppendTo,final FieldPosition pos){  return formatter.format(obj,toAppendTo,pos);}  }
class C{  public static void gracefullyDisposeOf(final Map<?,? extends Disposable> disposables){  if (disposables != null) {    for (    final Disposable disposable : disposables.values()) {      gracefullyDisposeOf(disposable);    }  }}  }
class C{  public int hostcount(final String host){  if (host == null || host.length() == 0)   return 0;  int c=0;  for (  final DigestURL url : activeWorkerEntries().keySet()) {    if (host.equals(url.getHost())) {      c++;    }  }  return c;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean attachInView(View view){  WindowManager w=theApp.getWindowManager();  CGRect rect=CGRect.make(0,0,w.getDefaultDisplay().getWidth(),w.getDefaultDisplay().getHeight());  return initOpenGLViewWithView(view,rect);}  }
class C{  public static Bitmap decodeBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  public void clearOperatorSelection(){  this.selectedOperators=Collections.unmodifiableList(Collections.<Operator>emptyList());}  }
class C{  public static String toHexString(byte[] array){  return toHexString(ByteBuffer.wrap(array),0,array.length);}  }
class C{  private static int parseNumericFontWeight(String fontWeightString){  return fontWeightString.length() == 3 && fontWeightString.endsWith("00") && fontWeightString.charAt(0) <= '9' && fontWeightString.charAt(0) >= '1' ? 100 * (fontWeightString.charAt(0) - '0') : -1;}  }
class C{  public boolean isBorderPainted(){  return paintBorder;}  }
class C{  public boolean handleDirectory(File directory){  return true;}  }
class C{  public VerticalLayout(int gap,int alignment){  myGap=gap;switch (alignment) {case SwingConstants.LEFT:case SwingConstants.RIGHT:case SwingConstants.CENTER:    myAlignment=alignment;  break;default :throw new IllegalArgumentException("unsupported alignment: " + alignment);}}  }
class C{  @Override protected void onStartLoading(){  if (mPackageObserver == null) {    mPackageObserver=new PackageIntentReceiver(this);  }  final boolean configChange=mLastConfig.applyNewConfig(getContext().getResources());  if (takeContentChanged() || configChange) {    forceLoad();  }}  }
class C{  public BitSet isScanRequired(byte[][] blkMaxVal,byte[][] blkMinVal){  BitSet bitSet=new BitSet(1);  byte[][] filterValues=dimColumnExecuterInfo.getFilterKeys();  int columnIndex=dimColumnEvaluatorInfo.getColumnIndex();  int blockIndex=segmentProperties.getDimensionOrdinalToBlockMapping().get(columnIndex);  int[] cols=getAllColumns(columnIndex);  byte[] maxValue=getMinMaxData(cols,blkMaxVal[blockIndex],columnIndex);  byte[] minValue=getMinMaxData(cols,blkMinVal[blockIndex],columnIndex);  boolean isScanRequired=false;  for (int k=0; k < filterValues.length; k++) {    int maxCompare=ByteUtil.UnsafeComparer.INSTANCE.compareTo(filterValues[k],maxValue);    int minCompare=ByteUtil.UnsafeComparer.INSTANCE.compareTo(filterValues[k],minValue);    if (maxCompare <= 0 && minCompare >= 0) {      isScanRequired=true;      break;    }  }  if (isScanRequired) {    bitSet.set(0);  }  return bitSet;}  }
class C{  @SuppressWarnings({"unchecked"}) @Override public SelectItem next(){  if (!hasNext()) {    throw new NoSuchElementException();  }  if (items != null) {    return (items.next());  }  return next();}  }
class C{  public IStatus preCheck() throws CoreException {  ensureChecked();  if (fPreCheckStatus.hasFatalError())   return fPreCheckStatus.getEntryMatchingSeverity(RefactoringStatus.FATAL).toStatus(); else   return Status.OK_STATUS;}  }
class C{  protected Component createCell(Object value,int row,int column,boolean editable){  Component cmp=null;  if (value instanceof Component) {    cmp=(Component)value;  } else {    cmp=super.createCell(value,row,column,editable);  }  cmp.setFocusable(false);  return cmp;}  }
class C{  public void modifyBounds(Rectangle bounds){  Rectangle oldBounds=this.bounds;  if (!bounds.equals(oldBounds)) {    this.bounds=bounds;    Figure entityFigure=(Figure)getFigure();    DiagramPart parent=(DiagramPart)getParent();    parent.setLayoutConstraint(this,entityFigure,bounds);  }}  }
class C{  public static long hash64(final byte[] data,int length,int seed){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  long h=(seed & 0xffffffffl) ^ (length * m);  int length8=length / 8;  for (int i=0; i < length8; i++) {    final int i8=i * 8;    long k=((long)data[i8 + 0] & 0xff) + (((long)data[i8 + 1] & 0xff) << 8) + (((long)data[i8 + 2] & 0xff) << 16)+ (((long)data[i8 + 3] & 0xff) << 24)+ (((long)data[i8 + 4] & 0xff) << 32)+ (((long)data[i8 + 5] & 0xff) << 40)+ (((long)data[i8 + 6] & 0xff) << 48)+ (((long)data[i8 + 7] & 0xff) << 56);    k*=m;    k^=k >>> r;    k*=m;    h^=k;    h*=m;  }switch (length % 8) {case 7:    h^=(long)(data[(length & ~7) + 6] & 0xff) << 48;case 6:  h^=(long)(data[(length & ~7) + 5] & 0xff) << 40;case 5:h^=(long)(data[(length & ~7) + 4] & 0xff) << 32;case 4:h^=(long)(data[(length & ~7) + 3] & 0xff) << 24;case 3:h^=(long)(data[(length & ~7) + 2] & 0xff) << 16;case 2:h^=(long)(data[(length & ~7) + 1] & 0xff) << 8;case 1:h^=(long)(data[length & ~7] & 0xff);h*=m;};h^=h >>> r;h*=m;h^=h >>> r;return h;}  }
class C{  public AccountHeaderBuilder withHeaderBackgroundScaleType(ImageView.ScaleType headerBackgroundScaleType){  this.mHeaderBackgroundScaleType=headerBackgroundScaleType;  return this;}  }
class C{  private static void readDoubleBased(int xSize,int ySize,Band band,DoubleGrid2D grid) throws RuntimeException {  int result=0;  float[] line=new float[xSize];  for (int currRow=0; currRow < ySize; currRow++) {    if (result != gdalconstConstants.CE_None) {      throw new RuntimeException("Problem reading raster");    }    for (int currCol=0; currCol < xSize; currCol++) {      float f=line[currCol];      grid.set(currCol,currRow,f);    }  }}  }
class C{  private static boolean withinThree(INode n,INode goal){  DoubleLinkedList<IMove> moves=n.validMoves();  for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {    IMove move=it.next();    INode successor=n.copy();    move.execute(successor);    if (withinTwo(successor,goal)) {      return true;    }  }  return false;}  }
class C{  private double determineAlphaMax(int n,double[] alpha_max,HyperBoundingBox interval){  double alpha_n=extremum_alpha_n(n,alpha_max);  double lower=interval.getMin(n);  double upper=interval.getMax(n);  double[] alpha_extreme=new double[alpha_max.length];  System.arraycopy(alpha_max,n,alpha_extreme,n,alpha_extreme.length - n);  alpha_extreme[n]=alpha_n;  ExtremumType type=extremumType(n,alpha_extreme,interval);  if (type.equals(ExtremumType.MINIMUM) || type.equals(ExtremumType.CONSTANT)) {    if (lower <= alpha_n && alpha_n <= upper) {      if (alpha_n - lower <= upper - alpha_n) {        return upper;      } else {        return lower;      }    } else     if (alpha_n < lower) {      return upper;    } else {      if (alpha_n <= upper) {        throw new IllegalStateException("Should never happen!");      }      return lower;    }  } else {    if (lower <= alpha_n && alpha_n <= upper) {      return alpha_n;    } else     if (alpha_n < lower) {      return lower;    } else {      if (alpha_n <= upper) {        throw new IllegalStateException("Should never happen!");      }      return upper;    }  }}  }
class C{  public boolean isHasYears(){  return hasYears;}  }
class C{  public int hashCode(){  int hash=37;  hash+=17 * this.fromGroup.hashCode() + 37;  hash+=17 * this.toGroup.hashCode() + 37;  hash+=17 * Integer.valueOf(this.type).hashCode() + 37;  return hash;}  }
class C{  public static Map<String,String> parseQueryParams(Map<Integer,String> queryParams,Object[] args){  Map<String,String> newQueryParams=new HashMap<>();  for (  Map.Entry<Integer,String> param : queryParams.entrySet()) {    LOGGER.debug("Query param key: " + param.getValue() + " value: "+ args[param.getKey()]);    newQueryParams.putIfAbsent(param.getValue(),(String)args[param.getKey()]);  }  return newQueryParams;}  }
class C{  public VerticalNode(IPoint point){  super(point.getX(),point);}  }
class C{  private RepositoryContent readRepository(URL repo) throws RemoteRepositoryException {  return readRepository(repo,0);}  }
class C{  private void doCancel(){  getComponent().setText("");  if (cancelAction != null) {    fireAction(cancelAction);  }}  }
class C{  public static org.oscm.vo.VOParameter convertToApi(org.oscm.internal.vo.VOParameter oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOParameter newVO=new org.oscm.vo.VOParameter();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameterDefinition(convertToApi(oldVO.getParameterDefinition()));  newVO.setValue(oldVO.getValue());  newVO.setConfigurable(oldVO.isConfigurable());  return newVO;}  }
class C{  public RequestHeaders(LinkedHashMap<String,String> headers){  this(headers,headers);}  }
class C{  public boolean isComponent(){  return gm.isComponent();}  }
class C{  private void createJournalEntriesForRefund(final LoanDTO loanDTO,final LoanTransactionDTO loanTransactionDTO,final Office office){  final Long loanProductId=loanDTO.getLoanProductId();  final Long loanId=loanDTO.getLoanId();  final String currencyCode=loanDTO.getCurrencyCode();  final String transactionId=loanTransactionDTO.getTransactionId();  final Date transactionDate=loanTransactionDTO.getTransactionDate();  final BigDecimal refundAmount=loanTransactionDTO.getAmount();  final boolean isReversal=loanTransactionDTO.isReversed();  final Long paymentTypeId=loanTransactionDTO.getPaymentTypeId();  if (loanTransactionDTO.isAccountTransfer()) {    this.helper.createCashBasedJournalEntriesAndReversalsForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.OVERPAYMENT.getValue(),FINANCIAL_ACTIVITY.LIABILITY_TRANSFER.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,refundAmount,isReversal);  } else {    this.helper.createCashBasedJournalEntriesAndReversalsForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.OVERPAYMENT.getValue(),CASH_ACCOUNTS_FOR_LOAN.FUND_SOURCE.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,refundAmount,isReversal);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.ENRICHER__PART:    setPart((MessagePart)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public MultiModel1(){  for (int i=0; i < 10; i++) {    ((SimpleSequence)m_cListModel).add("Model1 value: " + Integer.toString(i));  }  ((SimpleSequence)m_cListModel).add(new MultiModel3());  ((SimpleHash)m_cHashModel).put("nested",new MultiModel3());}  }
class C{  public static SdfId createPairedReaderDNA(final String inputDnaSequenceLeft,final String inputDnaSequenceRight,final File dir,SdfId sdfId) throws IOException {  final SdfId id;  try (SequencesReader sr1=getReaderDNA(inputDnaSequenceLeft,new File(dir,"left"),sdfId)){    id=sr1.getSdfId();    final SequencesReader sr2=getReaderDNA(inputDnaSequenceRight,new File(dir,"right"),id);    sr2.close();  }   return id;}  }
class C{  public static String prepareArrayClassnameForLoading(String className){  int bracketCount=StringUtil.count(className,'[');  if (bracketCount == 0) {    return null;  }  String brackets=StringUtil.repeat('[',bracketCount);  int bracketIndex=className.indexOf('[');  className=className.substring(0,bracketIndex);  int primitiveNdx=getPrimitiveClassNameIndex(className);  if (primitiveNdx >= 0) {    className=String.valueOf(PRIMITIVE_BYTECODE_NAME[primitiveNdx]);    return brackets + className;  } else {    return brackets + 'L' + className+ ';';  }}  }
class C{  public boolean plfcEntails(KnowledgeBase kb,PropositionSymbol q){  Map<Clause,Integer> count=initializeCount(kb);  Map<PropositionSymbol,Boolean> inferred=initializeInferred(kb);  Queue<PropositionSymbol> agenda=initializeAgenda(count);  Map<PropositionSymbol,Set<Clause>> pToClausesWithPInPremise=initializeIndex(count,inferred);  while (!agenda.isEmpty()) {    PropositionSymbol p=agenda.remove();    if (p.equals(q)) {      return true;    }    if (inferred.get(p).equals(Boolean.FALSE)) {      inferred.put(p,true);      for (      Clause c : pToClausesWithPInPremise.get(p)) {        decrement(count,c);        if (count.get(c) == 0) {          agenda.add(conclusion(c));        }      }    }  }  return false;}  }
class C{  public AlgorithmInitializationException(Algorithm algorithm,String message){  super(algorithm,message);}  }
class C{  public boolean hasMeta(int key){  return meta(key) != null;}  }
class C{  public String globalInfo(){  return "A data generator that produces data points in " + "hyperrectangular subspace clusters.";}  }
class C{  @Override protected boolean convertToUppercase(){  return false;}  }
class C{  public boolean isApplyBackgroundColor(){  return mApplyBackgroundColor;}  }
class C{  public static void main(String... args){  new Profiler().run(args);}  }
class C{  public boolean hasClipChanged(){  final boolean flag=hasClipChanged;  hasClipChanged=false;  return flag;}  }
class C{  protected void updateServiceTable(){  final IHAJournal journal=getJournal();  if (journal == null) {    return;  }  final Quorum<HAGlue,QuorumService<HAGlue>> quorum=journal.getQuorum();  final UUID[] joined=quorum.getJoined();  final ServiceScore[] oldTable=serviceTableRef.get();  final ServiceScore[] serviceScores=new ServiceScore[joined.length];  for (int i=0; i < joined.length; i++) {    final UUID serviceId=joined[i];    if (oldTable != null) {      for (int j=0; j < oldTable.length; j++) {        final ServiceScore oldScore=oldTable[j];        if (oldScore != null && serviceId.equals(oldScore.getServiceUUID())) {          serviceScores[i]=oldTable[j];          break;        }      }    }    try {      serviceScores[i]=ServiceScore.newInstance(journal,contextPath.get(),serviceId);    } catch (    Exception ex) {      log.warn(ex,ex);      continue;    }  }  if (log.isInfoEnabled())   log.info("Updated servicesTable: #services=" + serviceScores.length);  this.serviceTableRef.set(serviceScores);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:10.516 -0400",hash_original_method="93BB6DC6E391C02C5576AE7FF099F252",hash_generated_method="61F7F31E3EA68FBB49C15F547333F2B9") public boolean isCompleted(){  PrintService.throwIfNotCalledOnMainThread();  return getInfo().getState() == PrintJobInfo.STATE_COMPLETED;}  }
class C{  public boolean isCompressed(){  return pub.isCompressed();}  }
class C{  public void reset(){  drawer.reset();  removeEditor();}  }
class C{  public boolean build(){  FloatArray2D img=l[0];  FloatArray2D img2;  if (state == State.STUB) {    img2=l[1];    l=new FloatArray2D[STEPS + 3];    l[STEPS]=img2;  } else   l=new FloatArray2D[STEPS + 3];  l[0]=img;  for (int i=1; i < SIGMA_DIFF.length; ++i) {    if (state == State.STUB && i == STEPS)     continue;    l[i]=Filter.convolveSeparable(l[0],KERNEL_DIFF[i],KERNEL_DIFF[i]);  }  d=new FloatArray2D[STEPS + 2];  for (int i=0; i < d.length; ++i) {    d[i]=new FloatArray2D(l[i].width,l[i].height);    int j=i + 1;    for (int k=0; k < l[i].data.length; ++k) {      d[i].data[k]=(l[j].data[k] - l[i].data[k]) * K_MIN1_INV;    }  }  l1=new FloatArray2D[STEPS + 3][];  for (int i=0; i < l1.length; ++i) {    l1[i]=null;  }  state=State.COMPLETE;  return true;}  }
class C{  protected void elements(long[] bits,int columns,int rows){  if (columns < 0 || columns < 0 || columns * rows > bits.length * QuickBitVector.BITS_PER_UNIT)   throw new IllegalArgumentException();  this.bits=bits;  this.columns=columns;  this.rows=rows;}  }
class C{  public void insert(Statement stmt,KeyQualifier keyQualifier,List<Bin> bins,int ttl){  Key key=keyQualifier.makeKey(stmt.getNamespace(),stmt.getSetName());  this.client.put(this.insertPolicy,key,bins.toArray(new Bin[0]));}  }
class C{  public static RowSpec decode(String encodedRowSpec,LayoutMap layoutMap){  checkNotBlank(encodedRowSpec,"The encoded row specification must not be null, empty or whitespace.");  checkNotNull(layoutMap,"The LayoutMap must not be null.");  String trimmed=encodedRowSpec.trim();  String lower=trimmed.toLowerCase(Locale.ENGLISH);  return decodeExpanded(layoutMap.expand(lower,false));}  }
class C{  private void updateMnemonics(){  resetMnemonics();  for (int counter=tabPane.getTabCount() - 1; counter >= 0; counter--) {    final int mnemonic=tabPane.getMnemonicAt(counter);    if (mnemonic > 0) {      addMnemonic(counter,mnemonic);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.187 -0400",hash_original_method="20839E86366C5233239C10AF83778159",hash_generated_method="618FECFBF3501EDC582AAA04082CCB35") @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public boolean isVisible(){  return false;}  }
class C{  public void removeFieldValues(int fldId) throws Exception {  int idx;  idx=m_multFlds.findIndexById(fldId);  if (idx != -1) {    m_multFlds.removeValues(idx);  } else {    throw new IeciTdException(FolderBaseError.EC_FIELD_IS_NOT_MULT,FolderBaseError.EM_FIELD_IS_NOT_MULT);  }}  }
class C{  private GridTestIoUtils(){}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  if (getC_Region_ID() != 0) {    if (m_c == null || m_c.getC_Country_ID() != getC_Country_ID())     getCountry();    if (!m_c.isHasRegion())     setC_Region_ID(0);  }  if (getC_City_ID() <= 0 && getCity() != null && getCity().length() > 0) {    int city_id=DB.getSQLValue(get_TrxName(),"SELECT C_City_ID FROM C_City WHERE C_Country_ID=? AND COALESCE(C_Region_ID,0)=? AND Name=?",new Object[]{getC_Country_ID(),getC_Region_ID(),getCity()});    if (city_id > 0)     setC_City_ID(city_id);  }  if (m_c != null && !m_c.isAllowCitiesOutOfList() && getC_City_ID() <= 0) {    log.saveError("CityNotFound",Msg.translate(getCtx(),"CityNotFound"));    return false;  }  return true;}  }
class C{  final public SyntaxTreeNode Proof() throws ParseException {  SyntaxTreeNode tn;  Token t=null;  Token t0=null;  pushProofLevel();  bpa("Proof");  if ((getToken(1).kind == BY) || (getToken(2).kind == BY)) {    tn=UseOrHideOrBy();  } else   if (jj_2_27(2)) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case PROOF:      t0=jj_consume_token(PROOF);    break;default :  jj_la1[55]=jj_gen;;}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case OBVIOUS:t=jj_consume_token(OBVIOUS);break;case OMITTED:t=jj_consume_token(OMITTED);break;default :jj_la1[56]=jj_gen;jj_consume_token(-1);throw new ParseException();}SyntaxTreeNode sn[];if (t0 != null) {sn=new SyntaxTreeNode[2];sn[0]=new SyntaxTreeNode(mn,t0);sn[1]=new SyntaxTreeNode(mn,t);} else {sn=new SyntaxTreeNode[1];sn[0]=new SyntaxTreeNode(mn,t);};tn=new SyntaxTreeNode(mn,N_TerminalProof,sn);} else if (jj_2_28(1)) {if (jj_2_26(2)) {t=jj_consume_token(PROOF);addHeir(new SyntaxTreeNode(mn,t));} else {;}label_14: while (true) {if (getToken(2).kind != QED) {;} else {break label_14;}tn=Step();addHeir(tn);expecting="a proof step";}tn=QEDStep();addHeir(tn);SyntaxTreeNode sn[]=getLastHeirs();tn=new SyntaxTreeNode(mn,N_Proof,sn);} else {jj_consume_token(-1);throw new ParseException();}epa();popProofLevel();{if (true) return tn;}throw new Error("Missing return statement in function");}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void add(String property,JsonElement value){  if (value == null) {    value=JsonNull.INSTANCE;  }  members.put($Gson$Preconditions.checkNotNull(property),value);}  }
class C{  public double presetLoss(int rssi){  if (rssi <= -90)   return 1.0;  if (rssi > 0)   return 0.0;  if (sPresetLoss == null) {    final int size=90;    sPresetLoss=new double[size];    for (int i=0; i < size; i++)     sPresetLoss[i]=1.0 / Math.pow(90 - i,1.5);  }  return sPresetLoss[-rssi];}  }
class C{  protected int next() throws IOException, ExifInvalidFormatException {  if (!mContainExifData) {    return EVENT_END;  }  int offset=mTiffStream.getReadByteCount();  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  if (offset < endOfTags) {    mTag=readTag();    if (mTag == null) {      return next();    }    if (mNeedToParseOffsetsInCurrentIfd) {      checkOffsetOrImageTag(mTag);    }    return EVENT_NEW_TAG;  } else   if (offset == endOfTags) {    if (mIfdType == IfdId.TYPE_IFD_0) {      long ifdOffset=readUnsignedLong();      if (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested()) {        if (ifdOffset != 0) {          registerIfd(IfdId.TYPE_IFD_1,ifdOffset);        }      }    } else {      int offsetSize=4;      if (mCorrespondingEvent.size() > 0) {        offsetSize=mCorrespondingEvent.firstEntry().getKey() - mTiffStream.getReadByteCount();      }      if (offsetSize < 4) {        Log.w(TAG,"Invalid size of link to next IFD: " + offsetSize);      } else {        long ifdOffset=readUnsignedLong();        if (ifdOffset != 0) {          Log.w(TAG,"Invalid link to next IFD: " + ifdOffset);        }      }    }  }  while (mCorrespondingEvent.size() != 0) {    Entry<Integer,Object> entry=mCorrespondingEvent.pollFirstEntry();    Object event=entry.getValue();    try {      skipTo(entry.getKey());    } catch (    IOException e) {      Log.w(TAG,"Failed to skip to data at: " + entry.getKey() + " for "+ event.getClass().getName()+ ", the file may be broken.");      continue;    }    if (event instanceof IfdEvent) {      mIfdType=((IfdEvent)event).ifd;      mNumOfTagInIfd=mTiffStream.readUnsignedShort();      mIfdStartOffset=entry.getKey();      if (mNumOfTagInIfd * TAG_SIZE + mIfdStartOffset + OFFSET_SIZE > mApp1End) {        Log.w(TAG,"Invalid size of IFD " + mIfdType);        return EVENT_END;      }      mNeedToParseOffsetsInCurrentIfd=needToParseOffsetsInCurrentIfd();      if (((IfdEvent)event).isRequested) {        return EVENT_START_OF_IFD;      } else {        skipRemainingTagsInCurrentIfd();      }    } else     if (event instanceof ImageEvent) {      mImageEvent=(ImageEvent)event;      return mImageEvent.type;    } else {      ExifTagEvent tagEvent=(ExifTagEvent)event;      mTag=tagEvent.tag;      if (mTag.getDataType() != ExifTag.TYPE_UNDEFINED) {        readFullTagValue(mTag);        checkOffsetOrImageTag(mTag);      }      if (tagEvent.isRequested) {        return EVENT_VALUE_OF_REGISTERED_TAG;      }    }  }  return EVENT_END;}  }
class C{  public static int rotateRight(int i,int distance){  return (i >>> distance) | (i << -distance);}  }
class C{  public void clear(){  size=0;}  }
class C{  public static String toUnicode(String name){  Info info=new Info();  StringBuilder result=new StringBuilder();  UTS46_INSTANCE.nameToUnicode(name,result,info);  return info.hasErrors() ? name : result.toString();}  }
class C{  public void searchTagsWithName(InstagramAPIResponseCallback<ArrayList<IGTag>> callback,String name){  searchTagsWithName(callback,name,0,null);}  }
class C{  public float dot(Quaternion q){  return w * q.w + x * q.x + y * q.y + z * q.z;}  }
class C{  public static boolean openUrlPrompt(Component parent,String url){  return openUrlPrompt(parent,url,false);}  }
class C{  public void selectAll(){  selectionModel.setSelection(sensorNodes.keySet());  repaint();}  }
class C{  private void testSpacing(String expectedSpacedText,String expectedOriginalText,SpacedEditText editText){  final Editable editable=editText.getText();  final ScaleXSpan[] spans=editable.getSpans(0,editText.length(),ScaleXSpan.class);  assertEquals(expectedSpacedText,editable.toString());  assertEquals(expectedOriginalText,editText.getUnspacedText().toString());  for (  ScaleXSpan span : spans) {    assertEquals(spacingPropotion,span.getScaleX());    final int spanStart=editable.getSpanStart(span);    final int spanEnd=editable.getSpanEnd(span);    assertEquals(" ",editable.toString().substring(spanStart,spanEnd));  }}  }
class C{  public mxGraphHierarchyNode(Object cell){  this.cell=cell;}  }
class C{  public X509Certificate download() throws AcmeException {  if (cert == null) {    LOG.debug("download");    try (Connection conn=getSession().provider().connect()){      int rc=conn.sendRequest(getLocation(),getSession());      if (rc == HttpURLConnection.HTTP_ACCEPTED) {        Date retryAfter=conn.getRetryAfterHeader();        if (retryAfter != null) {          throw new AcmeRetryAfterException("certificate is not available for download yet",retryAfter);        }      }      if (rc != HttpURLConnection.HTTP_OK) {        conn.throwAcmeException();      }      chainCertUri=conn.getLink("up");      cert=conn.readCertificate();    } catch (    IOException ex) {      throw new AcmeNetworkException(ex);    }  }  return cert;}  }
class C{  public TelnetTerminal acceptConnection() throws IOException {  Socket clientSocket=serverSocket.accept();  clientSocket.setTcpNoDelay(true);  return new TelnetTerminal(clientSocket,charset);}  }
class C{  private void drawTextLines(final Graphics2D g2d,final List<AttributedCharacterIterator> lines,final Color textColor,int leftMargin,int topMargin){  int y=topMargin + LINE_ASCENT;  for (  final AttributedCharacterIterator line : lines) {    if (textColor == null) {      g2d.setColor(Color.black);    }    g2d.setColor(textColor);    g2d.drawString(line,leftMargin,y);    y+=LINE_HEIGHT;  }}  }
class C{  public void writeEnum(final int fieldNumber,final int value) throws IOException {  writeTag(fieldNumber,WireFormat.WIRETYPE_VARINT);  writeEnumNoTag(value);}  }
class C{  public ConverterException(){  super();}  }
class C{  @Override public void channelDisconnected(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {  logger.debug("channel is closed. ");  int statusCodeInt=0;  String statusCode=statusCodeInt + " SUCCESSFUL";  tcpWorker.onComplete(tcpWorker.responseSb.toString(),false,null,null,statusCode,statusCodeInt);}  }
class C{  private static void checkUnManagedFileSystemAlreadyExported(UnManagedFileSystem unManagedFileSystem) throws Exception {  StringMap unManagedFileSystemCharacteristics=unManagedFileSystem.getFileSystemCharacterstics();  String isFileSystemExported=unManagedFileSystemCharacteristics.get(SupportedFileSystemCharacterstics.IS_FILESYSTEM_EXPORTED.toString());  if (null != isFileSystemExported && Boolean.parseBoolean(isFileSystemExported)) {    throw APIException.internalServerErrors.objectAlreadyExported("FileSystem",unManagedFileSystem.getId());  }}  }
class C{  public void collectStats(Block block,boolean recursive){  for (int i=0; i < block.getInputs().size(); i++) {    Input in=block.getInputs().get(i);    addConnection(in.getConnection(),recursive);    for (int j=0; j < in.getFields().size(); j++) {      Field field=in.getFields().get(j);      if (field.getType() == Field.TYPE_VARIABLE) {        FieldVariable var=(FieldVariable)field;        var.registerObserver(mVariableObserver);        if (mVariableReferences.containsKey(var.getVariable())) {          mVariableReferences.get(var.getVariable()).add(var);        } else {          List<FieldVariable> references=new ArrayList<>();          references.add(var);          mVariableReferences.put(var.getVariable(),references);        }        mVariableNameManager.addName(var.getVariable());      }    }  }  addConnection(block.getNextConnection(),recursive);  addConnection(block.getPreviousConnection(),false);  addConnection(block.getOutputConnection(),false);  if (mProcedureManager.isDefinition(block)) {    mProcedureManager.addDefinition(block);  }  if (mProcedureManager.isReference(block)) {    mProcedureManager.addReference(block);  }}  }
class C{  public IndexExistsException(String msg){  super(msg);}  }
class C{  public String prettyPrint(PrettyPrintOptions options){  if (dimension != null && dimension.getId().getDimensionId() != null) {    String name=prettyPrintObject(getDimension(),options);    if (options != null && options.getStyle() == ReferenceStyle.NAME && !options.isExplicitType()) {      Relation check=parent.findRelation(getDimension().getName());      if (check != null) {        name=prettyPrintObject(getDimension(),new PrettyPrintOptions(options).setExplicitType(true));      }    }    String pp=getParent().prettyPrint(options);    if (pp != "") {      pp+=".";    }    return pp + name;  } else   if (dimension != null && dimension.getId().getDimensionId() == null && def_cache != null) {    String pp=getParent().prettyPrint(options);    if (pp != "") {      pp+=".";    }    return pp + def_cache.prettyPrint(options);  } else   if (def_cache != null) {    return def_cache.prettyPrint(options);  } else {    return "**undefined**";  }}  }
class C{  @Override public void fromBytes(ByteBuf buf){  lastUseTime=buf.readLong();  hand=EnumHand.values()[buf.readByte()];}  }
class C{  public JettyServer(ClassLoader classLoader){}  }
class C{  DataImporter(){  this.handlerName="dataimport";}  }
class C{  public static boolean isEmpty(Iterable<?> iterable){  if (iterable == null) {    return true;  }  if (iterable instanceof RichIterable) {    return ((RichIterable<?>)iterable).isEmpty();  }  if (iterable instanceof Collection) {    return ((Collection<?>)iterable).isEmpty();  }  return IterableIterate.isEmpty(iterable);}  }
class C{  public DeviceAutomator pressEnter(){  mDevice.pressEnter();  return this;}  }
class C{  @SuppressWarnings("rawtypes") public void modifyClarPrivileges(StorageSystem storage,List<Initiator> initiators) throws Exception {  if (initiators == null || initiators.isEmpty()) {    _log.debug("No initiators ...");    return;  }  _log.info("Start -- modifyClarPrivileges");  List<String> initiatorStrings=new ArrayList<String>();  final String RP_INITIATOR_PREFIX="500124";  final int RP_INITIATOR_TYPE=31;  final int RP_INITIATOR_FAILOVERMODE=4;  final CIMProperty[] RP_CLAR_PRIVILIEGE_CIM_PROPERTY=new CIMProperty[]{new CIMProperty<UnsignedInteger16>(SmisConstants.CP_EMC_INITIATOR_TYPE,CIMDataType.UINT16_T,new UnsignedInteger16(RP_INITIATOR_TYPE)),new CIMProperty<UnsignedInteger16>(SmisConstants.CP_EMC_FAILOVER_MODE,CIMDataType.UINT16_T,new UnsignedInteger16(RP_INITIATOR_FAILOVERMODE))};  CloseableIterator<CIMInstance> privilegeInstances=null;  for (  Initiator initiator : initiators) {    if (initiator.getProtocol().equalsIgnoreCase(Initiator.Protocol.FC.name())) {      initiatorStrings.add(WwnUtils.convertWWN(initiator.getInitiatorNode(),FORMAT.NOMARKERS).toString().concat(WwnUtils.convertWWN(initiator.getInitiatorPort(),FORMAT.NOMARKERS).toString()));    }  }  if (initiatorStrings.isEmpty()) {    _log.info("There are no initiators in the list whose privileges need to be changed.");    return;  }  try {    privilegeInstances=_helper.getClarPrivileges(storage);    while (privilegeInstances.hasNext()) {      CIMInstance existingInstance=privilegeInstances.next();      String initiatorType=CIMPropertyFactory.getPropertyValue(existingInstance,SmisConstants.CP_EMC_INITIATOR_TYPE);      if (existingInstance.toString().contains(storage.getSerialNumber()) && existingInstance.toString().contains(RP_INITIATOR_PREFIX)) {        for (        String initiatorString : initiatorStrings) {          if (existingInstance.toString().contains(initiatorString) && (initiatorType != null && Integer.parseInt(initiatorType) != RP_INITIATOR_TYPE)) {            CIMInstance toUpdate=new CIMInstance(existingInstance.getObjectPath(),RP_CLAR_PRIVILIEGE_CIM_PROPERTY);            _log.info("Modifying -- " + existingInstance.toString());            _helper.modifyInstance(storage,toUpdate,SmisConstants.PS_EMC_CLAR_PRIVILEGE);            break;          }        }      }    }    _log.info("end -- modifyClarPrivileges");  } catch (  Exception e1) {    _log.error("Unexpected error: modifyClarPrivileges failed");    throw e1;  } finally {    if (null != privilegeInstances) {      privilegeInstances.close();    }  }}  }
class C{  private void drawJoints(final Graphics2D graphics,final Point[] points,final int xOffset,final int yOffset,final double scale){  final int jointsize=10;  final Point[] newPoints=points.length > 1 ? Arrays.copyOf(points,points.length - 1) : points;  for (  Point[] joints : routeOptimizer.getAllPoints(newPoints)) {    for (    final Point p : joints) {      graphics.fillOval((int)(((p.x - xOffset) - (jointsize / 2) / scale) * scale),(int)(((p.y - yOffset) - (jointsize / 2) / scale) * scale),jointsize,jointsize);    }  }}  }
class C{  public void add(RefAddr addr){  addrs.addElement(addr);}  }
class C{  public boolean removeMapComponent(Object mapComponent){  if (mapComponent != null) {    return getMapHandler().remove(mapComponent);  }  return true;}  }
class C{  protected AbstractReferenceMap(int keyType,int valueType,int capacity,float loadFactor,boolean purgeValues){  super(capacity,loadFactor);  verify("keyType",keyType);  verify("valueType",valueType);  this.keyType=keyType;  this.valueType=valueType;  this.purgeValues=purgeValues;}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  DistanceQuery<O> distFunc=database.getDistanceQuery(relation,getDistanceFunction());  RangeQuery<O> rangeQuery=database.getRangeQuery(distFunc);  DBIDs ids=relation.getDBIDs();  WritableDataStore<DoubleIntArrayList> interestingDistances=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_SORTED,DoubleIntArrayList.class);  precomputeInterestingRadii(ids,rangeQuery,interestingDistances);  FiniteProgress progressLOCI=LOG.isVerbose() ? new FiniteProgress("LOCI scores",relation.size(),LOG) : null;  WritableDoubleDataStore mdef_norm=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  WritableDoubleDataStore mdef_radius=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  DoubleMinMax minmax=new DoubleMinMax();  MeanVariance mv_n_r_alpha=new MeanVariance();  for (DBIDIter iditer=ids.iter(); iditer.valid(); iditer.advance()) {    final DoubleIntArrayList cdist=interestingDistances.get(iditer);    final double maxdist=cdist.getDouble(cdist.size() - 1);    final int maxneig=cdist.getInt(cdist.size() - 1);    double maxmdefnorm=0.0;    double maxnormr=0;    if (maxneig >= nmin) {      DoubleDBIDList maxneighbors=rangeQuery.getRangeForDBID(iditer,maxdist);      for (int i=0, size=cdist.size(); i < size; i++) {        if (cdist.getInt(i) < nmin) {          continue;        }        final double r=cdist.getDouble(i);        final double alpha_r=alpha * r;        final int n_alphar=cdist.getInt(cdist.find(alpha_r));        mv_n_r_alpha.reset();        for (DoubleDBIDListIter neighbor=maxneighbors.iter(); neighbor.valid(); neighbor.advance()) {          if (neighbor.doubleValue() > r) {            break;          }          DoubleIntArrayList cdist2=interestingDistances.get(neighbor);          int rn_alphar=cdist2.getInt(cdist2.find(alpha_r));          mv_n_r_alpha.put(rn_alphar);        }        final double nhat_r_alpha=mv_n_r_alpha.getMean();        final double sigma_nhat_r_alpha=mv_n_r_alpha.getNaiveStddev();        final double mdef=nhat_r_alpha - n_alphar;        final double sigmamdef=sigma_nhat_r_alpha;        final double mdefnorm=mdef / sigmamdef;        if (mdefnorm > maxmdefnorm) {          maxmdefnorm=mdefnorm;          maxnormr=r;        }      }    } else {      maxmdefnorm=Double.POSITIVE_INFINITY;      maxnormr=maxdist;    }    mdef_norm.putDouble(iditer,maxmdefnorm);    mdef_radius.putDouble(iditer,maxnormr);    minmax.put(maxmdefnorm);    LOG.incrementProcessed(progressLOCI);  }  LOG.ensureCompleted(progressLOCI);  DoubleRelation scoreResult=new MaterializedDoubleRelation("LOCI normalized MDEF","loci-mdef-outlier",mdef_norm,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new QuotientOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.0,Double.POSITIVE_INFINITY,0.0);  OutlierResult result=new OutlierResult(scoreMeta,scoreResult);  result.addChildResult(new MaterializedDoubleRelation("LOCI MDEF Radius","loci-critical-radius",mdef_radius,relation.getDBIDs()));  return result;}  }
class C{  public final TextBuilder append(char chars[]){  append(chars,0,chars.length);  return this;}  }
class C{  private void registerTableHotkeys(){}  }
class C{  public static void writeUintvar(OutputStream theOs,long theValue) throws IOException {  int nOctets=1;  while ((theValue >> (7 * nOctets)) > 0) {    nOctets++;  }  for (int i=nOctets; i > 0; i--) {    byte octet=(byte)(theValue >> (7 * (i - 1)));    byte byteValue=(byte)(octet & (byte)0x7f);    if (i > 1) {      byteValue=(byte)(byteValue | (byte)0x80);    }    theOs.write(byteValue);  }}  }
class C{  @Override public synchronized boolean isEmpty(){  return elementCount == 0;}  }
class C{  public TObjectHash(int initialCapacity,float loadFactor,TObjectHashingStrategy<T> strategy){  super(initialCapacity,loadFactor);  _hashingStrategy=strategy;}  }
class C{  public void kill(String pid){  send(String.format(ImageServerDialogProperties.getString("cmd.kill"),pid));  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void printRuleSet(final EvolutionState state,final int log,final int verbosity){  state.output.println(N_RULES + Code.encode(numRules),log);  for (int i=0; i < numRules; i++)   rules[i].printRule(state,log);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  default void bind(String address,ServiceRefAmp actorRef){  throw new UnsupportedOperationException(getClass().getName());}  }
class C{  protected void dispatchMouseEvent(String eventType,GraphicsNodeMouseEvent evt,boolean cancelable){  Point clientXY=evt.getClientPoint();  GraphicsNode node=evt.getGraphicsNode();  Element targetElement=getEventTarget(node,new Point2D.Float(evt.getX(),evt.getY()));  Element relatedElement=getRelatedElement(evt);  dispatchMouseEvent(eventType,targetElement,relatedElement,clientXY,evt,cancelable);}  }
class C{  public void runExperiment(){  runExperiment(false);}  }
class C{  public static boolean isZipCode(Object value){  String str=Caster.toString(value,null);  if (str == null)   return false;  if (zipPattern == null)   zipPattern=Pattern.compile("([0-9]{5,5})|([0-9]{5,5}[- ]{1}[0-9]{4,4})");  return zipPattern.matcher(str.trim()).matches();}  }
class C{  private void establecerElementosVista(HttpServletRequest request){  GestionValoracionBI valoracionService=getGestionValoracionBI(request);  GestionFondosBI fondosService=getGestionFondosBI(request);  int[] estados={IElementoCuadroClasificacion.VIGENTE};  removeInTemporalSession(request,ValoracionConstants.LISTA_FONDOS_KEY);  setInTemporalSession(request,ValoracionConstants.LISTA_FONDOS_KEY,fondosService.getFondosXEstados(estados));  request.setAttribute("estados",valoracionService.getEstadosValoracion());}  }
class C{  public void incCreateRequest(){  this.stats.incInt(createRequestId,1);}  }
class C{  public Error(java.lang.String s){  super(s);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnamespecialvalue.class,args);}  }
class C{  public void commit() throws SQLException {synchronized (getSynchronizationObject()) {    if (isClosed()) {      throw new FBSQLException("You cannot commit a closed connection.",SQLStateConstants.SQL_STATE_CONNECTION_CLOSED);    }    if (mc.inDistributedTransaction()) {      throw new FBSQLException("Connection enlisted in distributed transaction",SQLStateConstants.SQL_STATE_INVALID_TX_STATE);    }    txCoordinator.commit();    invalidateTransactionLifetimeObjects();  }}  }
class C{  public void escSymbol(EditorState editorState){  String name=argumentHelper.readCharacters(editorState);  while (name.length() > 0) {    if (metaModel.isSymbol(name)) {      delCharacters(editorState,name.length());      MetaCharacter meta=metaModel.getSymbol(name);      newCharacter(editorState,meta);      break;    } else     if (metaModel.isOperator(name)) {      delCharacters(editorState,name.length());      MetaCharacter meta=metaModel.getOperator(name);      newCharacter(editorState,meta);      break;    } else {      name=name.substring(1,name.length());    }  }}  }
class C{  @Override public IDataType onTypeFault(String typeName) throws AtlasException {  Context context=new Context();  TypesDef typesDef=getTypeFromStore(typeName,context);  if (typesDef.isEmpty()) {    return null;  }  TransientTypeSystem transientTypeSystem=typeSystem.createTransientTypeSystem(context.getTypesDef(),false);  Map<String,IDataType> typesAdded=transientTypeSystem.getTypesAdded();  putAll(typesAdded.values());  return typesAdded.get(typeName);}  }
class C{  public void resetEncoder(){  if (m_encoder != null) {    m_encoder.reset();  }}  }
class C{  private static List<String> asStrings(Class... classes){  List<String> strings=new ArrayList<>();  for (  Class c : classes) {    strings.add(c.getName());  }  return strings;}  }
class C{  public void play(){  if (isInitialized()) {    resumeSystemTimeUs=System.nanoTime() / 1000;    audioTrackUtil.play();    log.i("calling play");    audioTrack.play();  }}  }
class C{  private float snap(float value){  if (snapValues == null) {    return value;  }  for (int i=0; i < snapValues.length; i++) {    if (Math.abs(value - snapValues[i]) <= threshold) {      return snapValues[i];    }  }  return value;}  }
class C{  public String addImages(String text){  RegExp REGEXP_IMAGES=RegExp.compile("!\\[(.*?)\\]\\((.+?)\\)","g");  RegExp REGEXP_IMAGE_DETAIL=RegExp.compile("(.*?)\\s*=\\s*(\\d+)x(\\d*)","g");  MatchResult matchResult=REGEXP_IMAGES.exec(text);  if (matchResult != null && matchResult.getGroupCount() == 3) {    String alt=matchResult.getGroup(1);    String uri=matchResult.getGroup(2);    int width=-1;    int height=-1;    MatchResult imgDetails=REGEXP_IMAGE_DETAIL.exec(uri);    if (imgDetails != null && imgDetails.getGroupCount() == 4) {      uri=imgDetails.getGroup(1);      width=Integer.parseInt(imgDetails.getGroup(2));      String valHeight=imgDetails.getGroup(3);      if (!valHeight.isEmpty()) {        height=Integer.parseInt(imgDetails.getGroup(3));      }    }    StringBuilder imageData=new StringBuilder();    imageData.append("<img src='");    imageData.append(UriUtils.sanitizeUri(uri));    imageData.append("' alt='");    imageData.append(SafeHtmlUtils.fromString(alt).asString());    imageData.append("'");    if (width != -1) {      imageData.append(" width='");      imageData.append(width);      imageData.append("'");    }    if (height != -1) {      imageData.append(" height='");      imageData.append(height);      imageData.append("'");    }    imageData.append(" />");    return text.replace(matchResult.getGroup(0),imageData.toString());  }  return text;}  }
class C{  private static void addStorageSysVarray(String virtualArrayId,List<String> ids){  List<URI> storagePorts=Lists.newArrayList();  for (  URI storageSystemId : uris(ids)) {    List<StoragePortRestRep> ports=StoragePortUtils.getStoragePortsByStorageSystem(storageSystemId);    storagePorts.addAll(ResourceUtils.ids(ports));  }  VirtualArrayRestRep virtualArray=getVirtualArray(virtualArrayId);  if (!storagePorts.isEmpty()) {    updateStoragePorts(storagePorts,addVirtualArray(virtualArray));  }  updateVarrayCookie(virtualArray.getId().toString(),virtualArray.getName());  list();}  }
class C{  public Property minuteOfHour(){  return new Property(this,getChronology().minuteOfHour());}  }
class C{  public boolean shouldSelectCell(EventObject anEvent){  if (m_rc == null)   return false;  return !m_rc.isReadOnly();}  }
class C{  void requireDataLayer(){  requireData=true;}  }
class C{  public Format(int pId){  this.mId=pId;}  }
class C{  public static RowSetFactory newFactory(String factoryClassName,ClassLoader cl) throws SQLException {  trace("***In newInstance()");  if (factoryClassName == null) {    throw new SQLException("Error: factoryClassName cannot be null");  }  try {    ReflectUtil.checkPackageAccess(factoryClassName);  } catch (  java.security.AccessControlException e) {    throw new SQLException("Access Exception",e);  }  try {    Class<?> providerClass=getFactoryClass(factoryClassName,cl,false);    RowSetFactory instance=(RowSetFactory)providerClass.newInstance();    if (debug) {      trace("Created new instance of " + providerClass + " using ClassLoader: "+ cl);    }    return instance;  } catch (  ClassNotFoundException x) {    throw new SQLException("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new SQLException("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  public EliasFanoLongBigList(final LongIterable elements){  this(elements.iterator(),findMin(elements.iterator()));}  }
class C{  @SuppressLint("NewApi") @Nullable public static Drawable inflate(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){  boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible);  Log.d(LOG_TAG,String.format("Inflating resource with id #0x%s (system handling: %s)",Integer.toHexString(id),systemHandling));  if (systemHandling) {    return resources.getDrawable(id,null);  }  try {    return VectorDrawable.create(resources,id);  } catch (  Resources.NotFoundException e) {    return null;  }}  }
class C{  static void updateCurrentMousePosition(MouseEvent mouseEvent){  Point oldMousePos=currentMousePosition;  try {    Point eventPoint=mouseEvent.getPoint();    currentMouseComponent=(Component)(mouseEvent.getSource());    currentMousePosition=currentMouseComponent.getLocationOnScreen();    currentMousePosition.translate(eventPoint.x,eventPoint.y);  } catch (  Exception e) {    currentMousePosition=oldMousePos;  }}  }
class C{  public StaticEndpointGroup(Iterable<Endpoint> endpoints){  requireNonNull(endpoints,"endpoints");  this.endpoints=ImmutableList.copyOf(endpoints);}  }
class C{  @SuppressWarnings("static-access") private void resetURL(boolean isSource,String newURL){  String vendor=null;  String host=null;  String port=null;  String name=null;  String result=null;  if (isSource) {    if (newURL == null) {      vendor=s_parameters.getSourceVendor();      host=s_parameters.getSourceHost();      port=s_parameters.getSourcePort();      name=s_parameters.getSourceName();      result=s_dbEngine.getDBUrl(vendor,host,port,name);    } else     if (newURL.length() == 0) {      if (m_sourceVendor.getSelectedItem() != null)       vendor=m_sourceVendor.getSelectedItem().toString();      host=m_sourceHost.getText();      port=m_sourcePort.getText();      if (m_sourceName.getSelectedItem() != null)       name=m_sourceName.getSelectedItem().toString();      result=s_dbEngine.getDBUrl(vendor,host,port,name);    } else {      result=newURL;    }    m_sourceURL.setText(result);  } else {    if (newURL == null) {      vendor=s_parameters.getTargetVendor();      host=s_parameters.getTargetHost();      port=s_parameters.getTargetPort();      name=s_parameters.getTargetName();      result=s_dbEngine.getDBUrl(vendor,host,port,name);    } else     if (newURL.length() == 0) {      if (m_targetVendor.getSelectedItem() != null)       vendor=m_targetVendor.getSelectedItem().toString();      host=m_targetHost.getText();      port=m_targetPort.getText();      if (m_targetName.getSelectedItem() != null)       name=m_targetName.getSelectedItem().toString();      result=s_dbEngine.getDBUrl(vendor,host,port,name);    } else {      result=newURL;    }    m_targetURL.setText(result);  }}  }
class C{  public static boolean isDebugMode(){  return _debugMode;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  private static int[] inverse(int[] map){  final int[] inverse=new int[map.length];  for (int i=0; i < map.length; ++i) {    inverse[map[i]]=i;  }  return inverse;}  }
class C{  public boolean isNewline(){  return newline != null;}  }
class C{  public void initialize(Language language,DocumentType typeToProcess,OutputType outputType,String configPath,POSTagger posTagger,Boolean doIntervalTagging){  logger.log(Level.INFO,"HeidelTimeStandalone initialized with language " + this.language.getName());  this.posTagger=posTagger;  this.doIntervalTagging=doIntervalTagging;  if (!Config.isInitialized()) {    if (configPath == null)     readConfigFile(CLISwitch.CONFIGFILE.getValue().toString()); else     readConfigFile(configPath);  }  try {    heidelTime=new HeidelTime();    heidelTime.initialize(new UimaContextImpl(language,typeToProcess,CLISwitch.VERBOSITY2.getIsActive()));    logger.log(Level.INFO,"HeidelTime initialized");  } catch (  Exception e) {    e.printStackTrace();    logger.log(Level.WARNING,"HeidelTime could not be initialized");  }  logger.log(Level.FINE,"Initializing JCas factory...");  try {    TypeSystemDescription[] descriptions=new TypeSystemDescription[]{UIMAFramework.getXMLParser().parseTypeSystemDescription(new XMLInputSource(this.getClass().getClassLoader().getResource(Config.get(Config.TYPESYSTEMHOME))))};    jcasFactory=new JCasFactoryImpl(descriptions);    logger.log(Level.INFO,"JCas factory initialized");  } catch (  Exception e) {    e.printStackTrace();    logger.log(Level.WARNING,"JCas factory could not be initialized");  }}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  private double sxy(Node _node1,Node _node2){  int i=variablesHash.get(_node1);  int j=variablesHash.get(_node2);  if (cov != null) {    return cov.getValue(i,j);  } else {    double[] arr1=data[i];    double[] arr2=data[j];    return sxy(arr1,arr2,arr1.length);  }}  }
class C{  public static boolean validateElectronicTaxReceiptAccessKey(String accessKey){  boolean ret=true;  accessKey=removeNonNumeric(accessKey);  DateFormat df=new SimpleDateFormat("yyMM");  if (accessKey.length() != 44)   ret=false;  if (!isNumeric(accessKey))   ret=false;  if (!Arrays.asList(Constants.IBGE_UF_CODES).contains(accessKey.substring(0,2)))   ret=false;  try {    Calendar calendar=Calendar.getInstance();    calendar.setLenient(false);    calendar.setTime(df.parse(accessKey.substring(2,6)));    Assert.isTrue(calendar.get(Calendar.MONTH) == Integer.parseInt(accessKey.substring(4,6)) - 1);  } catch (  Exception e) {    ret=false;  }  if (!validateCNPJ(accessKey.substring(6,20)))   ret=false;  return ret;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_11:    return ((InternalEList<?>)getAnonymous_numExpr_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_21:  return ((InternalEList<?>)getAnonymous_numExpr_2_1()).basicRemove(otherEnd,msgs);case UmplePackage.NUM_EXPR___ORDINAL_OP_1:return ((InternalEList<?>)getOrdinalOp_1()).basicRemove(otherEnd,msgs);case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_31:return ((InternalEList<?>)getAnonymous_numExpr_3_1()).basicRemove(otherEnd,msgs);case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_41:return ((InternalEList<?>)getAnonymous_numExpr_4_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void clear(){  if (bean == null) {    return;  }  Class<?> beanClass=null;  try {    beanClass=bean.getClass();    bean=beanClass.newInstance();  } catch (  Exception e) {    throw new UnsupportedOperationException("Could not create new instance of class: " + beanClass);  }}  }
class C{  void parseContent() throws IOException {  Thread curThread=Thread.currentThread();  for (; ; ) {    if (curThread.isInterrupted()) {      curThread.interrupt();      break;    }    int c=ch;    currentBlockStartPos=currentPosition;    if (recent == dtd.script) {      parseScript();      last=makeTag(dtd.getElement("comment"),true);      String str=new String(getChars(0)).trim();      int minLength=START_COMMENT.length() + END_COMMENT.length();      if (str.startsWith(START_COMMENT) && str.endsWith(END_COMMENT) && str.length() >= (minLength)) {        str=str.substring(START_COMMENT.length(),str.length() - END_COMMENT.length());      }      handleComment(str.toCharArray());      endTag(false);      lastBlockStartPos=currentPosition;      continue;    } else {switch (c) {case '<':        parseTag();      lastBlockStartPos=currentPosition;    continue;case '/':  ch=readCh();if ((stack != null) && stack.net) {  endTag(false);  continue;} else if (textpos == 0) {  if (!legalElementContext(dtd.pcdata)) {    error("unexpected.pcdata");  }  if (last.breaksFlow()) {    space=false;  }}break;case -1:return;case '&':if (textpos == 0) {if (!legalElementContext(dtd.pcdata)) {error("unexpected.pcdata");}if (last.breaksFlow()) {space=false;}}char data[]=parseEntityReference();if (textpos + data.length + 1 > text.length) {char newtext[]=new char[Math.max(textpos + data.length + 128,text.length * 2)];System.arraycopy(text,0,newtext,0,text.length);text=newtext;}if (space) {space=false;text[textpos++]=' ';}System.arraycopy(data,0,text,textpos,data.length);textpos+=data.length;ignoreSpace=false;continue;case '\n':ln++;lfCount++;ch=readCh();if ((stack != null) && stack.pre) {break;}if (textpos == 0) {lastBlockStartPos=currentPosition;}if (!ignoreSpace) {space=true;}continue;case '\r':ln++;c='\n';if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}if ((stack != null) && stack.pre) {break;}if (textpos == 0) {lastBlockStartPos=currentPosition;}if (!ignoreSpace) {space=true;}continue;case '\t':case ' ':ch=readCh();if ((stack != null) && stack.pre) {break;}if (textpos == 0) {lastBlockStartPos=currentPosition;}if (!ignoreSpace) {space=true;}continue;default :if (textpos == 0) {if (!legalElementContext(dtd.pcdata)) {error("unexpected.pcdata");}if (last.breaksFlow()) {space=false;}}ch=readCh();break;}}if (textpos + 2 > text.length) {char newtext[]=new char[text.length + 128];System.arraycopy(text,0,newtext,0,text.length);text=newtext;}if (space) {if (textpos == 0) {lastBlockStartPos--;}text[textpos++]=' ';space=false;}text[textpos++]=(char)c;ignoreSpace=false;}}  }
class C{  public Property monthOfYear(){  return new Property(this,MONTH_OF_YEAR);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_noderemovechildgetnodename.class,args);}  }
class C{  public String numFoldsTipText(){  return "The number of folds to split the dataset into.";}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  @SuppressWarnings("rawtypes") public XPathType(String expression,Filter filter,Map namespaceMap){  this(expression,filter);  if (namespaceMap == null) {    throw new NullPointerException("namespaceMap cannot be null");  }  Map<?,?> copy=new HashMap<>((Map<?,?>)namespaceMap);  Iterator<? extends Map.Entry<?,?>> entries=copy.entrySet().iterator();  while (entries.hasNext()) {    Map.Entry<?,?> me=entries.next();    if (!(me.getKey() instanceof String) || !(me.getValue() instanceof String)) {      throw new ClassCastException("not a String");    }  }  @SuppressWarnings("unchecked") Map<String,String> temp=(Map<String,String>)copy;  nsMap=Collections.unmodifiableMap(temp);}  }
class C{  public Rectangle(double top,double left,double bottom,double right){  double width=Math.abs(right - left);  double height=Math.abs(bottom - top);  Point center=new Point(left + (width / 2.0),top + (height / 2.0));  setRect(new Rect((int)(center.x - (width / 2)),(int)(center.y - (height / 2)),(int)width,(int)height));}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  public static int nextInt(final int startInclusive,final int endExclusive){  Validate.isTrue(endExclusive >= startInclusive,"Start value must be smaller or equal to end value.");  Validate.isTrue(startInclusive >= 0,"Both range values must be non-negative.");  if (startInclusive == endExclusive) {    return startInclusive;  }  return startInclusive + RANDOM.nextInt(endExclusive - startInclusive);}  }
class C{  public static void startActionSingleSync(Context context,int numOfPages){  Intent intent=new Intent(context,SyncingService.class);  intent.setAction(ACTION_SYNC);  intent.putExtra(SYNC_PERIOD,numOfPages);  context.startService(intent);}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,double eccentricity,OrbitDirection direction){  this(focalPoint,periapsis,Vector3.getAxisVector(Axis.Y),eccentricity,direction);}  }
class C{  private boolean matchModes(QName m1,QName m2){  return (((null == m1) && (null == m2)) || ((null != m1) && (null != m2) && m1.equals(m2)));}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CategoryAxis clone=(CategoryAxis)super.clone();  clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);  clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);  clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);  clone.categoryLabelURLs=new HashMap(this.categoryLabelToolTips);  return clone;}  }
class C{  public static MultiException createMultiException(final Collection<Throwable> throwables){  MultiException multiException=new MultiException();  for (  Throwable t : throwables) {    multiException.add(t);  }  return multiException;}  }
class C{  public boolean removeByURLHash(final byte[] urlhashBytes){  try {    final HandleSet urlHashes=new RowHandleSet(Word.commonHashLength,Base64Order.enhancedCoder,1);    urlHashes.put(urlhashBytes);    boolean ret=false;    try {      ret|=this.noloadStack.remove(urlHashes) > 0;    } catch (    final IOException e) {    }    try {      ret|=this.coreStack.remove(urlHashes) > 0;    } catch (    final IOException e) {    }    try {      ret|=this.limitStack.remove(urlHashes) > 0;    } catch (    final IOException e) {    }    try {      ret|=this.remoteStack != null && this.remoteStack.remove(urlHashes) > 0;    } catch (    final IOException e) {    }    return ret;  } catch (  final SpaceExceededException e) {    ConcurrentLog.logException(e);    return false;  }}  }
class C{  @Override public void input(Object input,Network network) throws Exception {  if (!isEnabled()) {    return;  }  log("Input",Level.INFO,input);  URL url=null;  if (input instanceof URL) {    url=(URL)input;  } else   if (input instanceof URI) {    url=(URL)((URI)input).toURL();  } else {    return;  }  String domain=url.getHost();  Http domainSense=getDomains().get(domain);  if (domainSense != null) {    domainSense.input(url);    return;  }  Element root=parseURL(url);  processRoot(root,url,network);}  }
class C{  protected boolean internalProcessOnCancel(Change change){  return false;}  }
class C{  public void addPlot(PlotData2D newPlot) throws Exception {  m_plot.addPlot(newPlot);  if (m_plot.m_plot2D.getMasterPlot() != null) {    setUpComboBoxes(newPlot.m_plotInstances);  }  m_saveBut.setEnabled(true);  repaint();}  }
class C{  @Override public void handleClick(int x,int y,PlotRenderingInfo info){  Rectangle2D dataArea=info.getDataArea();  if (dataArea.contains(x,y)) {    for (int i=0; i < this.subplots.size(); i++) {      CategoryPlot subplot=(CategoryPlot)this.subplots.get(i);      PlotRenderingInfo subplotInfo=info.getSubplotInfo(i);      subplot.handleClick(x,y,subplotInfo);    }  }}  }
class C{  public XPathException(String message,Node styleNode,Exception e){  super(message);  m_styleNode=styleNode;  this.m_exception=e;}  }
class C{  public void treeStructureChanged(TreeModelEvent e){  TreePath path=e.getTreePath();  DefaultTreeCheckingModel.this.checkingMode.updateCheckAfterStructureChanged(path);}  }
class C{  public Long remove(final byte[] key) throws IOException {  final Row.Entry entry=table.remove(key);  if (entry == null)   return null;  return entry.getColLong(1);}  }
class C{  private ChildNodeDescriptor insertType(final DefaultMutableTreeNode parentNode,final BaseType baseType,final int index){  final BaseTypeTreeNode newNode=new BaseTypeTreeNode(baseType);  parentNode.insert(newNode,index);  createTypeNodes(newNode,baseType);  return new ChildNodeDescriptor(newNode,index);}  }
class C{  public static String readSeptets(byte[] data){  if (data == null) {    return null;  }  byte[] ba=LongMessageFrameHolder.octetStream2septetStream(data);  return unencodedSeptetsToString(ba);}  }
class C{  public Builder appendReadError(IOException exception){  segments.add(new Segment(null,exception));  return this;}  }
class C{  public static SipRequest createMultipartInvite(SipDialogPath dialog,String[] featureTags,String multipart,String boundary) throws PayloadException {  return createMultipartInvite(dialog,featureTags,featureTags,multipart,boundary);}  }
class C{  public UnicodeSpec(int codePoint){  this.codePoint=codePoint;  generalCategory=UNASSIGNED;  bidiCategory=DIRECTIONALITY_UNDEFINED;  mirrored=false;  titleMap=MAP_UNDEFINED;  upperMap=MAP_UNDEFINED;  lowerMap=MAP_UNDEFINED;  decimalValue=-1;  digitValue=-1;  numericValue="";  oldName=null;  comment=null;  name=null;}  }
class C{  @AfterMethod(alwaysRun=true) public void recoveryScenario(ITestResult rs) throws Throwable {  if (rs.getStatus() == 2) {    Reporter.log("Failed Test: " + rs.getTestName());    gotoMyVideosView();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void onMousePressed(MapMouseEvent ev){}  }
class C{  public static String throwableToString(Throwable t){  return throwableToString(t,-1);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.210 -0500",hash_original_method="9D8F65BFD86E7A18329171709CBF3046",hash_generated_method="E737365418F916A96DC7B6DCF8FED481") public static String toBinaryString(int i){  String str=new String();  str.addTaint(i);  return str;}  }
class C{  public void removeNameConflicts() throws RemoveNameConflictsException {  try {    st=new PcalSymTab(ast);  } catch (  PcalSymTabException e) {    throw new RemoveNameConflictsException(e.getMessage());  }  st.Disambiguate();  if (st.disambiguateReport.size() > 0)   PcalDebug.reportWarning("symbols were renamed.");  if (st.errorReport.length() > 0)   throw new RemoveNameConflictsException(st.errorReport);  try {    PcalFixIDs.Fix(ast,st);  } catch (  PcalFixIDException e) {    throw new RemoveNameConflictsException(e.getMessage());  }}  }
class C{  @Override protected void doAction(){  DProviderInfo dProviderInfo=new DProviderInfo(frame);  dProviderInfo.setLocationRelativeTo(frame);  dProviderInfo.setVisible(true);}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 2:case 1:    return true;default :  break;}return false;}  }
class C{  @SuppressLint("NewApi") public static String saveMediaIntoDownloads(Context context,File srcFile,String filename,String mimeType){  String fullFilePath=saveFileInto(srcFile,Environment.DIRECTORY_DOWNLOADS,filename);  if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    if (null != fullFilePath) {      DownloadManager downloadManager=(DownloadManager)context.getSystemService(Context.DOWNLOAD_SERVICE);      try {        File file=new File(fullFilePath);        downloadManager.addCompletedDownload(file.getName(),file.getName(),true,mimeType,file.getAbsolutePath(),file.length(),true);      } catch (      Exception e) {        Log.e(LOG_TAG,"## saveMediaIntoDownloads(): Exception Msg=" + e.getMessage());      }    }  }  return fullFilePath;}  }
class C{  public String toString(boolean detail){  if (!detail || this.linkResolvedObj == null)   return this.toString();  return this.toString() + "; Link Resolved Object: " + this.linkResolvedObj;}  }
class C{  public void testStringSortMissingLast() throws Exception {  checkSortMissingLast("stringdv_missinglast","a","z");}  }
class C{  public boolean isTouchScreenDevice(){  return touchScreen;}  }
class C{  public void addAll(Stats values){  if (values.count() == 0) {    return;  }  if (count == 0) {    count=values.count();    mean=values.mean();    sumOfSquaresOfDeltas=values.sumOfSquaresOfDeltas();    min=values.min();    max=values.max();  } else {    count+=values.count();    if (isFinite(mean) && isFinite(values.mean())) {      double delta=values.mean() - mean;      mean+=delta * values.count() / count;      sumOfSquaresOfDeltas+=values.sumOfSquaresOfDeltas() + delta * (values.mean() - mean) * values.count();    } else {      mean=calculateNewMeanNonFinite(mean,values.mean());      sumOfSquaresOfDeltas=NaN;    }    min=Math.min(min,values.min());    max=Math.max(max,values.max());  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.PARAM__MULTIPLICITY:    setMultiplicity(MULTIPLICITY_EDEFAULT);  return;case FunctionblockPackage.PARAM__NAME:setName(NAME_EDEFAULT);return;case FunctionblockPackage.PARAM__DESCRIPTION:setDescription(DESCRIPTION_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public AcceptLanguage acceptLanguage(){  return acceptLanguage;}  }
class C{  boolean canBeSeen(int visibility,int modifiers){  if (modifiers < 0)   return true;switch (modifiers & ExtraCompilerModifiers.AccVisibilityMASK) {case ClassFileConstants.AccPublic:    return true;case ClassFileConstants.AccProtected:  return (visibility != ClassFileConstants.AccPublic);case ClassFileConstants.AccDefault:return (visibility == ClassFileConstants.AccDefault || visibility == ClassFileConstants.AccPrivate);case ClassFileConstants.AccPrivate:return (visibility == ClassFileConstants.AccPrivate);}return true;}  }
class C{  public ToStringBuilder append(final float value){  style.append(buffer,null,value);  return this;}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public void ensureCapacity(int additionalCapacity){  int sizeNeeded=size + additionalCapacity;  if (sizeNeeded >= threshold)   resize(nextPowerOfTwo((int)(sizeNeeded / loadFactor)));}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  public StructuredText createStructuredText(){  StructuredTextImpl structuredText=new StructuredTextImpl();  return structuredText;}  }
class C{  public Task<MigrationRestRep> commit(URI id){  return postTask(getIdUrl() + "/commit",id);}  }
class C{  public void removeEffector(final Effector effector){  effectors.remove(effector);  parentWorld.fireEffectorRemoved(effector);}  }
class C{  public Select<Model> where(DataFilterClause filterClause){  this.filterCriteria.addClause(filterClause);  return this;}  }
class C{  private String processSql(String sql){  if (sql == null) {    return null;  }  if (DriverSpy.TrimSql) {    sql=sql.trim();  }  StringBuilder output=new StringBuilder();  if (DriverSpy.DumpSqlMaxLineLength <= 0) {    output.append(sql);  } else {    StringTokenizer st=new StringTokenizer(sql);    String token;    int linelength=0;    while (st.hasMoreElements()) {      token=(String)st.nextElement();      output.append(token);      linelength+=token.length();      output.append(" ");      linelength++;      if (linelength > DriverSpy.DumpSqlMaxLineLength) {        output.append("\n");        linelength=0;      }    }  }  if (DriverSpy.DumpSqlAddSemicolon) {    output.append(";");  }  String stringOutput=output.toString();  if (DriverSpy.TrimExtraBlankLinesInSql) {    LineNumberReader lineReader=new LineNumberReader(new StringReader(stringOutput));    output=new StringBuilder();    int contiguousBlankLines=0;    try {      while (true) {        String line=lineReader.readLine();        if (line == null) {          break;        }        if (line.trim().length() == 0) {          contiguousBlankLines++;          if (contiguousBlankLines > 1) {            continue;          }        } else {          contiguousBlankLines=0;          output.append(line);        }        output.append("\n");      }    } catch (    IOException e) {    }    stringOutput=output.toString();  }  if (DriverSpy.TrimSqlLines) {    String rootLine=null;    LineNumberReader lineReader=new LineNumberReader(new StringReader(stringOutput));    List<String> linesList=new ArrayList<String>();    try {      while (true) {        String line=lineReader.readLine();        if (line == null) {          break;        }        line=Utilities.rtrim(line);        if (rootLine == null && line.length() > 0) {          rootLine=line;        }        linesList.add(line);      }    } catch (    IOException e) {    }    if (rootLine == null || rootLine.length() == 0 || linesList.size() <= 1) {      return stringOutput.trim();    }    int whiteSpaceIndex=-1;    outer:     while (true) {      whiteSpaceIndex++;      for (      String line : linesList) {        if (line.equals("")) {          continue;        }        Character ch=line.charAt(whiteSpaceIndex);        if (!Character.isWhitespace(ch) || ch != rootLine.charAt(whiteSpaceIndex)) {          break outer;        }      }    }    if (whiteSpaceIndex > 0) {      output=new StringBuilder();      for (      String line : linesList) {        if (!line.equals("")) {          output.append(line.substring(whiteSpaceIndex));        }        output.append(nl);      }      stringOutput=output.toString();    }  }  return stringOutput;}  }
class C{  @Override public MemBufferHolder<BigDataMemAllocator> resizeBuffer(MemBufferHolder<BigDataMemAllocator> mholder,long size){  MemBufferHolder<BigDataMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    int bufpos=mholder.get().position();    int buflimit=mholder.get().limit();    ByteBuffer buf=m_vmasvc.resizeByteBuffer(m_nid,mholder.get(),size);    if (null == buf && m_activegc) {      forceGC();      buf=m_vmasvc.resizeByteBuffer(m_nid,mholder.get(),size);    }    if (null != buf) {      mholder.clear();      mholder.destroy();      buf.position(bufpos <= size ? bufpos : 0);      buf.limit(buflimit <= size ? buflimit : (int)size);      ret=new MemBufferHolder<BigDataMemAllocator>(this,buf);      if (ac) {        m_bufcollector.register(ret);      }    }  }  return ret;}  }
class C{  public void decimate(int decrate){  double[] tmp=new double[x.length / decrate];  decimate(x,decrate,tmp);  x=tmp;}  }
class C{  public boolean isDocumentLevel(){  Object oo=get_Value(COLUMNNAME_IsDocumentLevel);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String shortUuid(){  RandomBasedGenerator generator=Generators.randomBasedGenerator();  UUID uuid=generator.generate();  long l=ByteBuffer.wrap(uuid.toString().getBytes()).getLong();  return Long.toString(l,Character.MAX_RADIX);}  }
class C{  boolean isRequestOngoing(){  return isRequestingPermission.get();}  }
class C{  public void registerGatewayType(String type,Class<? extends Gateway> clazz){  gatewayTypes.registerExtension(type,clazz);}  }
class C{  private static String longitudeRef(double longitude){  return longitude < 0.0d ? "W" : "E";}  }
class C{  public InsertContact tertiaryEmailType(int tertiaryEmailType){  mIntent.putExtra(Insert.TERTIARY_EMAIL_TYPE,tertiaryEmailType);  return this;}  }
class C{  public DefaultValueDataset(){  this(null);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public final int readUnsignedShort() throws java.io.IOException {  return ((int)readShort()) & 0xffff;}  }
class C{  public static String removeFormatting(String line){  int length=line.length();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < length; i++) {    char ch=line.charAt(i);    if (ch != '\u000f' && ch != '\u0002' && ch != '\u001f' && ch != '\u0016')     buffer.append(ch);  }  return buffer.toString();}  }
class C{  public List<Users> searchUser(long user_level,String searchcriteria,String searchstring,int max,int start,String orderby,boolean asc){  if (authLevelManagement.checkAdminLevel(user_level)) {    try {      CriteriaBuilder cb=em.getCriteriaBuilder();      CriteriaQuery<Users> cq=cb.createQuery(Users.class);      Root<Users> c=cq.from(Users.class);      Expression<String> literal=cb.literal("%" + searchstring + "%");      Path<String> path=c.get(searchcriteria);      Predicate predicate=cb.like(path,literal);      Predicate condition=cb.notEqual(c.get("deleted"),"true");      cq.where(condition,predicate);      cq.distinct(asc);      if (asc) {        cq.orderBy(cb.asc(c.get(orderby)));      } else {        cq.orderBy(cb.desc(c.get(orderby)));      }      TypedQuery<Users> q=em.createQuery(cq);      q.setFirstResult(start);      q.setMaxResults(max);      List<Users> contactsZ=q.getResultList();      return contactsZ;    } catch (    Exception ex2) {      log.error("searchUser",ex2);    }  }  return null;}  }
class C{  @Override public void onCategoryStatisticsSelected(Category category){  Intent intent=new Intent(getActivity().getApplicationContext(),StatisticsActivity.class);  intent.putExtra(ChallengeActivity.EXTRA_CATEGORY_ID,category.getId());  startActivity(intent);}  }
class C{  public JDialog createDialog(String title) throws HeadlessException {  int style=styleFromMessageType(getMessageType());  JDialog dialog=new JDialog((Dialog)null,title,true);  initDialog(dialog,style,null);  return dialog;}  }
class C{  public UnmodifiableException(String message){  super(message);}  }
class C{  public void test_abort(){class AbortException extends RuntimeException {    private static final long serialVersionUID=1L;  }  BigdataValue s=null, p=null, o=null;  final LocalTripleStore store=(LocalTripleStore)getStore();  try {    store.abort();    final BigdataValueFactory f=store.getValueFactory();    s=f.createURI("http://www.bigdata.com/s");    p=f.createURI("http://www.bigdata.com/p");    o=f.createURI("http://www.bigdata.com/o");    final BigdataValue[] values=new BigdataValue[]{s,p,o};    store.getLexiconRelation().addTerms(values,values.length,false);    store.addStatements(new SPO[]{new SPO(s.getIV(),p.getIV(),o.getIV(),StatementEnum.Explicit)},1);    assertTrue(store.hasStatement(s.getIV(),p.getIV(),o.getIV()));    throw new AbortException();  } catch (  AbortException ex) {    store.abort();    assertFalse(store.hasStatement(s.getIV(),p.getIV(),o.getIV()));  }catch (  Throwable t) {    log.error(t);    store.abort();    fail("Unexpected exception: " + t,t);  } finally {    store.__tearDownUnitTest();  }}  }
class C{  public Board(){  this(0,0);}  }
class C{  public static boolean isFunctionalTypeMoreSpecificOnExpression(PsiType sType,PsiType tType,PsiExpression arg){  return isFunctionalTypeMoreSpecific(sType,tType,null,arg);}  }
class C{  public Graph search(Node target){  return search(Collections.singletonList(target));}  }
class C{  protected void unhandledMessageReceived(OFMessage m){  switchManagerCounters.unhandledMessage.increment();  if (log.isDebugEnabled()) {    String msg=getSwitchStateMessage(m,"Ignoring unexpected message");    log.debug(msg);  }}  }
class C{  public static boolean validateStartEnd(CFlags flags,String startFlag,String endFlag){  if (flags.isSet(startFlag)) {    if ((Long)flags.getValue(startFlag) < 0) {      flags.error("--" + startFlag + " should be positive");      return false;    }  }  if (flags.isSet(endFlag)) {    if ((Long)flags.getValue(endFlag) < 1) {      flags.error("--" + endFlag + " should be greater than 0");      return false;    }  }  if (flags.isSet(startFlag) && flags.isSet(endFlag)) {    final long start=(Long)flags.getValue(startFlag);    final long end=(Long)flags.getValue(endFlag);    if (start >= end) {      flags.error("--" + startFlag + " should be less than --"+ endFlag);      return false;    }    if (end - start > Integer.MAX_VALUE) {      flags.error("You have specified too many sequences, please specify a range of less than " + Integer.MAX_VALUE);      return false;    }  }  return true;}  }
class C{  private void printModifiers(List<IExtendedModifier> ext){  for (Iterator<IExtendedModifier> it=ext.iterator(); it.hasNext(); ) {    ASTNode p=(ASTNode)it.next();    p.accept(this);    this.fBuffer.append(" ");  }}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.REFERENCING_ELEMENT_IM;}  }
class C{  public boolean equals(Object object){  boolean isEqual=false;  if (object instanceof DefineFont2 && super.equals(object)) {    DefineFont2 defineFont=(DefineFont2)object;    if ((defineFont.hasLayout == this.hasLayout) && (defineFont.shiftJIS == this.shiftJIS) && (defineFont.ansi == this.ansi)&& (defineFont.italic == this.italic)&& (defineFont.bold == this.bold)&& (defineFont.langCode == this.langCode)&& (defineFont.ascent == this.ascent)&& (defineFont.descent == this.descent)&& (defineFont.leading == this.leading)&& (defineFont.kerningCount == this.kerningCount)&& equals(defineFont.name,this.name)&& equals(defineFont.fontName,this.fontName)&& Arrays.equals(defineFont.glyphShapeTable,this.glyphShapeTable)&& Arrays.equals(defineFont.codeTable,this.codeTable)&& Arrays.equals(defineFont.advanceTable,this.advanceTable)&& Arrays.equals(defineFont.boundsTable,this.boundsTable)&& Arrays.equals(defineFont.kerningTable,this.kerningTable)) {      isEqual=true;    }  }  return isEqual;}  }
class C{  private void goForward(){  if (this.inAppWebView.canGoForward()) {    this.inAppWebView.goForward();  }}  }
class C{  public T caseInfoModelAttributeSource(InfoModelAttributeSource object){  return null;}  }
class C{  public static void checkGlError(String op){  int error=GLES20.glGetError();  if (error != GLES20.GL_NO_ERROR) {    String msg=op + ": glError 0x" + Integer.toHexString(error);    Log.e(TAG,msg);    throw new RuntimeException(msg);  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public StatementBuilder<T,ID> updateColumnValue(String columnName,Object value) throws SQLException {  FieldType fieldType=verifyColumnName(columnName);  if (fieldType.isForeignCollection()) {    throw new SQLException("Can't update foreign colletion field: " + columnName);  }  addUpdateColumnToList(columnName,new SetValue(columnName,fieldType,value));  return this;}  }
class C{  public static String XMLEncNA(String s){  return XMLOrHTMLEnc(s,true,true,null);}  }
class C{  public boolean isFullBPAccess(){  Object oo=get_Value(COLUMNNAME_IsFullBPAccess);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public FluentBiFunction<T1,T2,R> retry(final int times,final int backoffStartTime){  return FluentFunctions.of(null);}  }
class C{  private void updateAsyncEventQueue(ObjectName mbeanName) throws IOException {  try {    String memberName=mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);    if (cluster.getMembersHMap().containsKey(memberName)) {      Cluster.Member existingMember=cluster.getMembersHMap().get(memberName);      Cluster.AsyncEventQueue asyncQ=initAsyncEventQueue(mbeanName);      for (Iterator<Cluster.AsyncEventQueue> it=existingMember.getAsyncEventQueueList().iterator(); it.hasNext(); ) {        Cluster.AsyncEventQueue exisAsyncEventQueue=it.next();        if ((exisAsyncEventQueue.getId()).equals(asyncQ.getId())) {          it.remove();          break;        }      }      existingMember.getAsyncEventQueueList().add(asyncQ);    } else {      Cluster.Member member=new Cluster.Member();      member.setName(memberName);      member.setId(memberName);      Cluster.AsyncEventQueue asyncQ=initAsyncEventQueue(mbeanName);      member.getAsyncEventQueueList().add(asyncQ);      cluster.getMembersHMap().put(memberName,member);    }  } catch (  InstanceNotFoundException infe) {    LOGGER.warning(infe);  }catch (  ReflectionException re) {    LOGGER.warning(re);  }catch (  MBeanException me) {    LOGGER.warning(me);  }catch (  AttributeNotFoundException anfe) {    LOGGER.warning(anfe);  }catch (  IntrospectionException ire) {    LOGGER.warning(ire);  }}  }
class C{  public void testUserDataHandlerNotifiedOfShallowImports(){  RecordingHandler handler=new RecordingHandler();  name.setUserData("a","apple",handler);  name.setUserData("b","banana",handler);  standard.setUserData("c","cat",handler);  waffles.setUserData("d","dog",handler);  Document newDocument=builder.newDocument();  Element importedName=(Element)newDocument.importNode(name,false);  Attr importedStandard=importedName.getAttributeNode("a:standard");  Set<String> expected=new HashSet<String>();  expected.add(notification(NODE_IMPORTED,"a","apple",name,importedName));  expected.add(notification(NODE_IMPORTED,"b","banana",name,importedName));  expected.add(notification(NODE_IMPORTED,"c","cat",standard,importedStandard));  assertEquals(expected,handler.calls);}  }
class C{  public void replace(String statement) throws CannotCompileException {  thisClass.getClassFile();  ConstPool constPool=getConstPool();  int pos=currentPos;  int index=iterator.u16bitAt(pos + 1);  Javac jc=new Javac(thisClass);  ClassPool cp=thisClass.getClassPool();  CodeAttribute ca=iterator.get();  try {    CtClass[] params=new CtClass[]{cp.get(javaLangObject)};    CtClass retType=getType();    int paramVar=ca.getMaxLocals();    jc.recordParams(javaLangObject,params,true,paramVar,withinStatic());    int retVar=jc.recordReturnType(retType,true);    jc.recordProceed(new ProceedForCast(index,retType));    checkResultValue(retType,statement);    Bytecode bytecode=jc.getBytecode();    storeStack(params,true,paramVar,bytecode);    jc.recordLocalVariables(ca,pos);    bytecode.addConstZero(retType);    bytecode.addStore(retVar,retType);    jc.compileStmnt(statement);    bytecode.addLoad(retVar,retType);    replace0(pos,bytecode,3);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  public Object invoke(Object o) throws Exception {  return new Integer(Array.getLength(o));}  }
class C{  public void destroy(){  services=null;  configurationOperations=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int n;  int featureNum, numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    outputShapeType=ShapeType.POLYLINE;    if (shapeType == ShapeType.POLYGONZ) {      outputShapeType=ShapeType.POLYLINEZ;    } else     if (shapeType == ShapeType.POLYGONM) {      outputShapeType=ShapeType.POLYLINEM;    }    ShapeFile output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    byte[] rawData;    whitebox.geospatialfiles.shapefile.Geometry recGeometry;    for (    ShapeFileRecord record : input.records) {      rawData=record.getGeometry().toByteBuffer().array();switch (outputShapeType) {case POLYLINE:        recGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(rawData);      break;case POLYLINEZ:    recGeometry=new PolyLineZ(rawData);  break;default :recGeometry=new PolyLineM(rawData);break;}output.addRecord(recGeometry);n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static boolean canTrap(int opcode){  return (flagsArray[opcode & 0xff] & TRAP) != 0;}  }
class C{  public void absorb(Hypothesis added){  assert (this.equals(added));  score=Math.max(score,added.getScore());  addHyperedgesInNode(added.hyperedges);}  }
class C{  public static void logReport(final SpeedTestReport report,final Logger logger){  if (logger.isDebugEnabled()) {    logger.debug("progress             : " + report.getProgressPercent() + "%");    logger.debug("transfer rate bit    : " + report.getTransferRateBit() + "b/s");    logger.debug("transfer rate octet  : " + report.getTransferRateOctet() + "B/s");    logger.debug("uploaded for now     : " + report.getTemporaryPacketSize() + "/"+ report.getTotalPacketSize());    if (report.getStartTime() > 0) {      logger.debug("amount of time       : " + ((report.getReportTime() - report.getStartTime()) / 1000) + "s");    }    logger.debug(LOG_REPORT_SEPARATOR);  }}  }
class C{  public SpreadsheetEntry(){  super();  getCategories().remove(DocumentListEntry.CATEGORY);  getCategories().add(CATEGORY);}  }
class C{  public Dimension findDimension(AppContext ctx,ProjectPK projectPk,Domain domain,DimensionPK dimensionPK) throws ScopeException, ComputingException, InterruptedException {  DomainHierarchy hierarchy=getHierarchy(projectPk,domain,0,true);  if (hierarchy != null) {    return hierarchy.findDimension(ctx,dimensionPK);  } else {    return null;  }}  }
class C{  @Override public void disconnect(){  if (connection != null) {    try {      connection.close();    } catch (    SQLException ex) {      throw new RuntimeException("closing database resource",ex);    }  }}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  private OMGraphicList plotDataSources(GLOBETempData temperature_data){  Debug.message("basic","PlotLayer.plotDataSources()");  int num_graphics=0;  OMGraphicList graphics=new OMGraphicList();  graphics.setTraverseMode(OMGraphicList.LAST_ADDED_ON_TOP);  Enumeration site_enum=temperature_data.getAllSites();  while (site_enum.hasMoreElements()) {    GLOBESite site=(GLOBESite)site_enum.nextElement();    graphics.add(site.getGraphic());    num_graphics++;  }  Debug.message("basic","Plotlayer found " + num_graphics + " distinct sites");  return graphics;}  }
class C{  public Period toPeriodTo(ReadableInstant endInstant,PeriodType type){  return new Period(this,endInstant,type);}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  int i;  JSONObject jo;  String key;  Iterator keys;  int length;  Object object;  StringBuffer sb=new StringBuffer();  String tagName;  String value;  tagName=ja.getString(0);  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  object=ja.opt(1);  if (object instanceof JSONObject) {    i=2;    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next().toString();      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  } else {    i=1;  }  length=ja.length();  if (i >= length) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    do {      object=ja.get(i);      i+=1;      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        }      }    } while (i < length);    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public boolean isRunning(){  return time != -1;}  }
class C{  public boolean isConfirmed(){  return m_confirmed;}  }
class C{  Session session(@Nullable Transaction tx){  Session ses;  if (tx != null) {    Map<String,Session> props=session().properties();    ses=props.get(ATTR_SES);    if (ses == null) {      ses=sesFactory.openSession();      ses.beginTransaction();      props.put(ATTR_SES,ses);      if (log.isDebugEnabled())       log.debug("Hibernate session open [ses=" + ses + ", tx="+ tx.xid()+ "]");    }  } else {    ses=sesFactory.openSession();    ses.beginTransaction();  }  return ses;}  }
class C{  public PushParams withAuthConfigs(AuthConfigs authConfigs){  this.authConfigs=authConfigs;  return this;}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  return new Instances(inputFormat,0);}  }
class C{  private static final Set<Integer> encode(String src){  if (src == null || src.length() == 0)   return new HashSet<Integer>();  StringTokenizer tokenizer=new StringTokenizer(src,";");  int size=tokenizer.countTokens();  Set<Integer> set=new HashSet<Integer>();  for (int i=0; i < size; i++)   set.add(new Integer(tokenizer.nextToken()));  return set;}  }
class C{  public void addWebModule(String uri,String context){  Element moduleElement=new Element(ApplicationXmlTag.MODULE);  Element webElement=new Element(ApplicationXmlTag.WEB);  webElement.addContent(createNestedText(getDescriptorType().getTagByName(ApplicationXmlTag.WEB_URI),uri));  webElement.addContent(createNestedText(getDescriptorType().getTagByName(ApplicationXmlTag.CONTEXT_ROOT),context));  moduleElement.addContent(webElement);  addElement(getDescriptorType().getTagByName(ApplicationXmlTag.MODULE),moduleElement,getRootElement());}  }
class C{  public ObjectLabel addVolumeLabel(String luObjectId,String name) throws Exception {  return hdsApiVolumeManager.addLabelToObject(luObjectId,name);}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MWMAreaType[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public CompositeElementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public void track(String event,Properties props){  try {    if (analytics != null) {      analytics.track(event,props);    }  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.093 -0500",hash_original_method="79737DD70253BC976180BA8757B427A8",hash_generated_method="E35A39FA6BB3D486C0447A61818648A7") private void readXmlDeclaration() throws IOException, XmlPullParserException {  if (bufferStartLine != 0 || bufferStartColumn != 0 || position != 0) {    checkRelaxed("processing instructions must not start with xml");  }  read(START_PROCESSING_INSTRUCTION);  parseStartTag(true,true);  if (attributeCount < 1 || !"version".equals(attributes[2])) {    checkRelaxed("version expected");  }  version=attributes[3];  int pos=1;  if (pos < attributeCount && "encoding".equals(attributes[2 + 4])) {    encoding=attributes[3 + 4];    pos++;  }  if (pos < attributeCount && "standalone".equals(attributes[4 * pos + 2])) {    String st=attributes[3 + 4 * pos];    if ("yes".equals(st)) {      standalone=Boolean.TRUE;    } else     if ("no".equals(st)) {      standalone=Boolean.FALSE;    } else {      checkRelaxed("illegal standalone value: " + st);    }    pos++;  }  if (pos != attributeCount) {    checkRelaxed("unexpected attributes in XML declaration");  }  isWhitespace=true;  text=null;}  }
class C{  public void loadSet(){  data.clear();  GTG.db.beginTransaction();  try {    boolean isFirst=true;    TimeZoneTimeRow lastTztr=null;    Cursor c=dbA.query(null,"_id");    while (c.moveToNext()) {      TimeZoneTimeRow tztr=new TimeZoneTimeRow();      dbA.readRow(tztr,c);      if (!isFirst) {        if (tztr.isTimeZoneEqual(lastTztr)) {          Log.d(GTG.TAG,"Deleting duplicate tztr " + lastTztr + ", "+ tztr);          GTG.db.execSQL("delete from time_zone_time where _id = ?",new Object[]{tztr.id});          continue;        }      }      isFirst=false;      data.add(tztr);      lastTztr=tztr;    }    GTG.db.setTransactionSuccessful();  }  finally {    GTG.db.endTransaction();  }}  }
class C{  private void registerBroadcastReceiver(){  IntentFilter intentFilter=new IntentFilter(MainActivity.ACTION_VIEW_LOCAL);  LocalBroadcastManager.getInstance(this).registerReceiver(mDownloadReceiver,intentFilter);}  }
class C{  public static boolean lock() throws IOException {  if (locked)   return true;  if (processExists())   return false;  locked=true;  return true;}  }
class C{  public boolean isTaxIncluded(){  MOrder order=getOriginalOrder();  if (order != null && order.get_ID() != 0) {    return order.isTaxIncluded();  }  return true;}  }
class C{  public boolean hasValue(){  return super.hasAttribute(VALUE);}  }
class C{  public LoginPanel(final String id,final boolean isCheckout){  super(id);  this.isCheckout=isCheckout;  final Pair<Class<? extends Page>,PageParameters> target=determineRedirectTarget(this.isCheckout);  add(new LoginForm(LOGIN_FORM,target.getFirst(),target.getSecond()));}  }
class C{  public static VolumeAttribute valueOfAttribute(String name){  VolumeAttribute[] volumeAtts=values();  for (int i=0; i < volumeAtts.length; i++) {    if (volumeAtts[i].getAttributeName().equals(name)) {      return volumeAtts[i];    }  }  return null;}  }
class C{  public boolean hasOfferedCourses(){  Set courses=getCourseOfferings();  for (  Object co : courses) {    if (!((CourseOffering)co).getInstructionalOffering().isNotOffered())     return true;  }  return false;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ArrayLike.class) {switch (derivedFeatureID) {case TypesPackage.PRIMITIVE_TYPE__DECLARED_ELEMENT_TYPE:      return TypesPackage.ARRAY_LIKE__DECLARED_ELEMENT_TYPE;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void fling(long time,float x,float y,float velocityX,float velocityY){  resetResizeTimeout(false);  velocityX=MathUtils.flipSignIf(velocityX,LocalizationUtils.isLayoutRtl());  if (mInReorderMode)   return;  int scrollDeltaRemaining=0;  if (!mScroller.isFinished()) {    scrollDeltaRemaining=mScroller.getFinalX() - mScrollOffset;    mInteractingTab=null;    mScroller.forceFinished(true);  }  mScroller.fling(mScrollOffset,0,(int)velocityX,0,(int)mMinScrollOffset,0,0,0,0,0,time);  mScroller.setFinalX(mScroller.getFinalX() + scrollDeltaRemaining);  mUpdateHost.requestUpdate();}  }
class C{  @Override public boolean ready() throws IOException {synchronized (lock) {    if (isOpen()) {      return true;    }    throw new IOException("StringReader is closed");  }}  }
class C{  public static Volume findVolume(DbClient dbClient,Map<String,BlockObject> createdMap,Map<String,Set<DataObject>> updatedMap,String volumeId){  if (volumeId == null) {    return null;  }  BlockObject blockObject=null;  URI volumeURI=URI.create(volumeId);  if (createdMap != null) {    for (    BlockObject bo : createdMap.values()) {      if (bo.getId() != null && volumeURI.toString().equals(bo.getId().toString())) {        blockObject=bo;        break;      }    }  }  if (updatedMap != null) {    for (    Set<DataObject> objectsToBeUpdated : updatedMap.values()) {      for (      DataObject o : objectsToBeUpdated) {        if (o.getId().equals(volumeURI)) {          blockObject=(BlockObject)o;          break;        }      }    }  }  if (dbClient != null) {    if (blockObject == null) {      blockObject=(BlockObject)dbClient.queryObject(volumeURI);    }  }  Volume volume=null;  if (blockObject != null && blockObject instanceof Volume) {    _logger.info("\t Found volume object: " + blockObject.forDisplay());    volume=(Volume)blockObject;  }  return volume;}  }
class C{  private CheerleaderClient(Context applicationContext,String clientId,String artistName){  mArtistName=artistName;  mClientKey=clientId;  mIsClosed=false;  mRequestSignatorInterceptor=new RequestSignatorInterceptor(mClientKey);  mHttpLoggingInterceptor=new HttpLoggingInterceptor();  mHttpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.NONE);  mApplicationContext=new WeakReference<>(applicationContext);  mOffliner=new Offliner(getContext(),false);  mRetrofit=new Retrofit.Builder().baseUrl(SOUND_CLOUD_API).addConverterFactory(StringConverterFactory.create()).addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).client(new OkHttpClient.Builder().addInterceptor(mRequestSignatorInterceptor).addInterceptor(mOffliner.getInterceptor()).addInterceptor(mHttpLoggingInterceptor).build()).build();  mRetrofitService=mRetrofit.create(RetrofitService.class);  mCacheRam=new CacheRam();}  }
class C{  public double distance(final MutableInt3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  private void checkAndForwardRecords(LambdaLogger logger,AggRecord aggRecord){  if (aggRecord == null) {    return;  }  logger.log("Forwarding " + aggRecord.getNumUserRecords() + " as an aggregated record.");  PutRecordRequest request=aggRecord.toPutRecordRequest(DESTINATION_STREAM_NAME);  try {    PutRecordResult result=this.kinesisForwarder.putRecord(request);    logger.log("Successfully published record Seq #" + result.getSequenceNumber() + " to shard "+ result.getShardId());  } catch (  Exception e) {    logger.log("ERROR: Failed to forward Kinesis records to destination stream: " + e.getMessage());    return;  }}  }
class C{  public MBeanPermission(String name,String actions){  super(name);  parseName();  this.actions=actions;  parseActions();}  }
class C{  public void makePrecise(Coordinate coord){  if (modelType == FLOATING)   return;  coord.x=makePrecise(coord.x);  coord.y=makePrecise(coord.y);}  }
class C{  public void updateBitmap(float lt,float ln,int w,int h,byte[] bytes,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkBitmap.write(lt,ln,w,h,bytes,properties,link.dos);}  }
class C{  public Enumeration keys() throws MqttPersistenceException {  checkIsOpen();  File[] files=getFiles();  Vector result=new Vector(files.length);  for (int i=0; i < files.length; i++) {    String filename=files[i].getName();    String key=filename.substring(0,filename.length() - MESSAGE_FILE_EXTENSION.length());    result.addElement(key);  }  return result.elements();}  }
class C{  private int showHasChangedDialog(){  Object[] options={"Save","Don't Save","Cancel"};  return JOptionPane.showOptionDialog(frame,"The workspace has changed since last save," + "\nWould you like to save these changes?","Workspace Has Changed",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);}  }
class C{  public void removeNodeFromParent(MutableTreeNode node){  MutableTreeNode parent=(MutableTreeNode)node.getParent();  if (parent == null)   throw new IllegalArgumentException("node does not have a parent.");  int[] childIndex=new int[1];  Object[] removedArray=new Object[1];  childIndex[0]=parent.getIndex(node);  parent.remove(childIndex[0]);  removedArray[0]=node;  nodesWereRemoved(parent,childIndex,removedArray);}  }
class C{  private void sendResponse(String status,String mime,Properties header,InputStream data){  try {    if (status == null)     throw new Error("sendResponse(): Status can't be null.");    OutputStream out=mySocket.getOutputStream();    PrintWriter pw=new PrintWriter(out);    pw.print("HTTP/1.0 " + status + " \r\n");    if (mime != null)     pw.print("Content-Type: " + mime + "\r\n");    if (header == null || header.getProperty("Date") == null)     pw.print("Date: " + gmtFrmt.format(new Date()) + "\r\n");    if (header != null) {      Enumeration e=header.keys();      while (e.hasMoreElements()) {        String key=(String)e.nextElement();        String value=header.getProperty(key);        pw.print(key + ": " + value+ "\r\n");      }    }    pw.print("\r\n");    pw.flush();    if (data != null) {      byte[] buff=new byte[2048];      while (true) {        int read=data.read(buff,0,2048);        if (read <= 0)         break;        out.write(buff,0,read);      }    }    out.flush();    out.close();    if (data != null)     data.close();  } catch (  IOException ioe) {    try {      mySocket.close();    } catch (    Throwable t) {    }  }}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  if (bottom - top != right - left) {    right=left + (bottom - top);  }  int matrixWidth=Math.round((right - left + 1) / moduleSize);  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  if (matrixHeight != matrixWidth) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=(int)(moduleSize / 2.0f);  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + (int)(y * moduleSize);    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + (int)(x * moduleSize),iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public FocusControl(String focusGroup,int clicks,String act){  ccount=clicks;  activity=act;  this.group=focusGroup;}  }
class C{  public void addData(Statistic data){  dataList.add(data);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public NewVariableResolver(VariableResolver original){  this.original=original;  FacesContext.getCurrentInstance().getExternalContext().getApplicationMap().put("newVR",this);}  }
class C{  public JournalFile createRemoteBackupSyncFile(long fileID) throws Exception {  return createFile(false,false,true,false,fileID);}  }
class C{  public final void flush(){  values.flushLocal();  rootLocations.flushLocal();}  }
class C{  private static void usage(){  System.out.printf("Usage: UDPWriteRecordTest address[:port[:unit]] file record registers [count]");  System.exit(1);}  }
class C{  private void writeNetworkToShapefile(String fileToWrite){  this.log.info("Reading cleaned up network from " + fileToWrite);  readNetwork(fileToWrite);  this.log.info("Writing network links to " + outputShapefile);  this.sc.getConfig().global().setCoordinateSystem("WGS84_UTM35S");  FeatureGeneratorBuilderImpl builder=new FeatureGeneratorBuilderImpl(sc.getNetwork(),"WGS84_UTM35S");  builder.setWidthCoefficient(-0.01);  builder.setFeatureGeneratorPrototype(PolygonFeatureGenerator.class);  builder.setWidthCalculatorPrototype(CapacityBasedWidthCalculator.class);  new Links2ESRIShape(sc.getNetwork(),outputShapefile,builder).write();  this.log.info("Network links written.");}  }
class C{  public void sortKeys(){  sortImpl(true,false);}  }
class C{  public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public EditSessionEvent clone(Stage stage){  EditSessionEvent clone=new EditSessionEvent(world,actor,maxBlocks,stage);  clone.setEditSession(session);  return clone;}  }
class C{  public DefaultHttpHeaders(boolean validate,int initialCapacity,boolean endOfStream){  super(ArmeriaHttpUtil.HTTP2_HEADER_NAME_HASHER,StringValueConverter.INSTANCE,validate ? HTTP2_NAME_VALIDATOR : NameValidator.NOT_NULL,initialCapacity);  this.endOfStream=endOfStream;}  }
class C{  public boolean matchSequentially(NodeIterator nodes,NodeIterator nodes2){  if (!nodes.hasNext()) {    return !nodes2.hasNext();  }  return matchContext.getPattern().getHandler(nodes.current()).matchSequentially(nodes,nodes2,matchContext);}  }
class C{  public static double logExpPlus1(double x){  return x > 10.0 ? x : Math.log(Math.exp(x) + 1);}  }
class C{  protected Node deepCopyInto(Node n){  GenericElement ge=(GenericElement)super.deepCopyInto(n);  ge.nodeName=nodeName;  return n;}  }
class C{  public static void main(String a[]){  System.out.println(binarySearch(new int[]{0,2},2));  System.out.println(binarySearch(new int[]{0,1,2,3},2));  System.out.println(binarySearch(new int[]{0,1,2,3},3));  System.out.println(binarySearch(new int[]{0,2},0));  System.out.println(binarySearch(new int[]{0,1,2,2,2,3,3},2));}  }
class C{  public Object convertToVertexId(final String vertexName){  return convertToVertexId(graph,vertexName);}  }
class C{  public Annotation(int start,int end,String text){  this.start=start;  this.end=end;  this.text=text;}  }
class C{  @Deprecated public boolean hasUsernamePassword(){  throw new MustOverrideException();}  }
class C{  private static Bitmap makeBitmap(int minSideLength,int maxNumOfPixels,Uri uri,ContentResolver cr,ParcelFileDescriptor pfd,BitmapFactory.Options options){  Bitmap b=null;  try {    if (pfd == null)     pfd=makeInputStream(uri,cr);    if (pfd == null)     return null;    if (options == null)     options=new BitmapFactory.Options();    FileDescriptor fd=pfd.getFileDescriptor();    options.inSampleSize=1;    options.inJustDecodeBounds=true;    BitmapFactory.decodeFileDescriptor(fd,null,options);    if (options.mCancel || options.outWidth == -1 || options.outHeight == -1) {      return null;    }    options.inSampleSize=computeSampleSize(options,minSideLength,maxNumOfPixels);    options.inJustDecodeBounds=false;    options.inDither=false;    options.inPreferredConfig=Bitmap.Config.ARGB_8888;    b=BitmapFactory.decodeFileDescriptor(fd,null,options);  } catch (  OutOfMemoryError ex) {    Log.e(TAG,"Got oom exception ",ex);    return null;  } finally {    closeSilently(pfd);  }  return b;}  }
class C{  public void run(){  Address target;  IRequest request;  Iterator<ContributionBox> contributions;  if (root == null) {    contributions=getDRM().getContributions().iterator();    while (contributions.hasNext()) {      target=contributions.next().contributor;      Sender child=new Sender("Sender",null,new Address(null,-1,this.name));      request=base.launch("DIRECT",child,target);      while (request.getStatus() == IRequest.WAITING) {        try {          Thread.sleep(1000);        } catch (        Exception e) {          System.err.println("Exception: " + e);        }      }      if (request.getStatus() != IRequest.DONE)       System.err.println("There was an error " + "sending an agent to " + target.name);    }  }  System.out.println("Waiting 30s to send objects...");  try {    Thread.sleep(30000);  } catch (  Exception e) {    System.err.println("Exception: " + e);  }  System.out.println("Creating object to send...");  Hashtable<String,String> data=new Hashtable<String,String>();  for (int i=0; i < 5; i++)   data.put("" + Math.random(),"" + Math.random());  Iterator<String> keys=data.keySet().iterator();  while (keys.hasNext()) {    String key=keys.next();    System.out.println(key + " - " + data.get(key));  }  contributions=collective.getContributions().iterator();  while (contributions.hasNext()) {    target=contributions.next().contributor;    System.out.println("Sending data to " + target.name);    request=fireMessage(target,DATAMESSAGE,data);    while (request.getStatus() == IRequest.WAITING) {      try {        Thread.sleep(1000);      } catch (      Exception e) {        System.err.println("Exception: " + e);      }    }    if (request.getStatus() != IRequest.DONE)     System.err.println("There was an error " + "sending the data to " + target.name);  }  System.out.println("Waiting 30s to exit...");  try {    Thread.sleep(30000);  } catch (  Exception e) {    System.err.println("Exception: " + e);  }  suicide();}  }
class C{  protected boolean processRemovedAssignments(Collection<? extends AbstractClassSensorAssignment<?>> classSensorAssignments){  Collection<ImmutableClassType> changedClassTypes=new ArrayList<>();  for (  AbstractClassSensorAssignment<?> assignment : classSensorAssignments) {    Collection<? extends ImmutableClassType> classTypes=classCacheSearchNarrower.narrowByClassSensorAssignment(getClassCache(),assignment);    IInstrumentationApplier instrumentationApplier=configurationResolver.getInstrumentationApplier(assignment,getEnvironment());    changedClassTypes.addAll(getClassCache().getInstrumentationService().removeInstrumentationPoints(classTypes,Collections.singleton(instrumentationApplier)));  }  if (CollectionUtils.isNotEmpty(changedClassTypes)) {    Collection<IInstrumentationApplier> instrumentationAppliers=getConfigurationHolder().getInstrumentationAppliers();    getClassCache().getInstrumentationService().addInstrumentationPoints(changedClassTypes,getAgentConfiguration(),instrumentationAppliers);    return true;  } else {    return false;  }}  }
class C{  public Wine waitExit() throws ScriptFailureException {  validateWineInstallationInitialized();  try {    wineVersion.getInstallation().waitAllProcesses(this.prefix);  } catch (  IOException logged) {    LOGGER.warn("Unable to wait for wine processes",logged);  }  return this;}  }
class C{  @Field(0) public cl_image_desc image_type(int image_type){  this.io.setIntField(this,0,image_type);  return this;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public void emitTuple(int i){  HashMap<String,String> stuple;  HashMap<String,ArrayList<KeyValPair>> atuple;  String key=Integer.toString(i);  if (keys == null) {    if (string_data.isConnected()) {      stuple=new HashMap<String,String>(1);      stuple.put(key,null);      string_data.emit(stuple);    }    if (keyvalpair_list.isConnected()) {      atuple=new HashMap<String,ArrayList<KeyValPair>>(1);      atuple.put(key,null);      keyvalpair_list.emit(atuple);    }    return;  }  ArrayList<KeyValPair> alist=null;  ArrayList<Integer> vlist=null;  String str=new String();  String vstr=new String();  boolean iskv=keyvalpair_list.isConnected();  boolean isvl=val_list.isConnected();  boolean issd=string_data.isConnected();  boolean isvd=val_data.isConnected();  int j=0;  for (  String s : keys) {    if (iskv) {      if (alist == null) {        alist=new ArrayList<KeyValPair>(keys.size());      }      alist.add(new KeyValPair<String,Integer>(s,new Integer(keys_min.get(j) + random.nextInt(keys_range.get(j)))));    }    if (isvl) {      if (vlist == null) {        vlist=new ArrayList<Integer>(keys.size());      }      vlist.add(new Integer(keys_min.get(j) + random.nextInt(keys_range.get(j))));    }    if (issd) {      if (!str.isEmpty()) {        str+=';';      }      str+=s + ":" + Integer.toString(keys_min.get(j) + random.nextInt(keys_range.get(j)));    }    if (isvd) {      if (!vstr.isEmpty()) {        vstr+=';';      }      vstr+=Integer.toString(keys_min.get(j) + random.nextInt(keys_range.get(j)));    }    j++;  }  if (iskv) {    atuple=new HashMap<String,ArrayList<KeyValPair>>(1);    atuple.put(key,alist);    keyvalpair_list.emit(atuple);  }  if (isvl) {    HashMap<String,ArrayList<Integer>> ituple=new HashMap<String,ArrayList<Integer>>(1);    ituple.put(key,vlist);    val_list.emit(ituple);  }  if (issd) {    stuple=new HashMap<String,String>(1);    stuple.put(key,str);    string_data.emit(stuple);  }  if (isvd) {    HashMap vtuple=new HashMap<String,String>(1);    vtuple.put(key,vstr);    val_data.emit(vtuple);  }}  }
class C{  public void postStop(){  cluster.unsubscribe(getSelf());}  }
class C{  private void buildOperationRef(PathOperation operation,MarkupDocBuilder docBuilder){  String document;  if (!config.isInterDocumentCrossReferencesEnabled() || outputPath == null)   document=null; else   if (config.isSeparatedOperationsEnabled())   document=defaultString(config.getInterDocumentCrossReferencesPrefix()) + resolveOperationDocument(operation); else   document=defaultString(config.getInterDocumentCrossReferencesPrefix()) + resolveOperationDocument(operation);  buildOperationTitle(copyMarkupDocBuilder().crossReference(document,operation.getId(),operation.getTitle()).toString(),"ref-" + operation.getId(),docBuilder);}  }
class C{  @Pure public Atom annotationInterfaceToAnnotationClass(){  byte[] annotationClassName_tmp=new byte[val.length + 2];  System.arraycopy(val,0,annotationClassName_tmp,0,val.length - 1);  annotationClassName_tmp[val.length - 1]='$';  annotationClassName_tmp[val.length]='$';  annotationClassName_tmp[val.length + 1]=';';  return Atom.findOrCreateUtf8Atom(annotationClassName_tmp);}  }
class C{  public static MovingObjectPosition rayTrace(World world,EntityPlayer player){  double reach=Mekanism.proxy.getReach(player);  Vec3 headVec=getHeadVec(player);  Vec3 lookVec=player.getLook(1);  Vec3 endVec=headVec.addVector(lookVec.xCoord * reach,lookVec.yCoord * reach,lookVec.zCoord * reach);  return world.rayTraceBlocks(headVec,endVec,true);}  }
class C{  public void delete(String idToDelete) throws IOException, ServiceException {  RecordEntry entry=entriesCached.get(idToDelete);  if (entry != null) {    entry.delete();    out.println("Deleted!");  } else {    out.println("I don't know that ID.");    out.println("In GData, you must get an entry before deleting it,");    out.println("so that you have the version ID.");    out.println("You might have to 'list' first.");  }}  }
class C{  public JSONObject(){  this.map=new HashMap<String,Object>();}  }
class C{  @ControllerMethodAuthority(programId="BSC_PROG003D0001Q") public String openWindow() throws Exception {  try {  } catch (  ControllerException e) {    this.setPageMessage(e.getMessage().toString());  }catch (  ServiceException e) {    this.setPageMessage(e.getMessage().toString());  }catch (  Exception e) {    e.printStackTrace();    this.setPageMessage(e.getMessage().toString());  }  return SUCCESS;}  }
class C{  public static Ignite start(URL springCfgUrl) throws IgniteException {  try {    return IgnitionEx.start(springCfgUrl);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(false);  WWindowStatus ws=WWindowStatus.get(request);  MobileDoc doc=null;  if (session == null || ws == null) {    doc=MobileDoc.createPopup("No Context");  } else {    String error=null;    int AD_Record_ID=MobileUtil.getParameterAsInt(request,P_Record_ID);    int AD_Table_ID=MobileUtil.getParameterAsInt(request,P_Table_ID);    if (AD_Record_ID == 0 || AD_Table_ID == 0) {      doc=MobileDoc.createPopup("Invalid Record ID or Table ID");    } else {      doc=createPage(ws.ctx,request,AD_Record_ID,AD_Table_ID);    }  }  MobileUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public void clear(){  for (Node<E> x=first; x != null; ) {    Node<E> next=x.next;    x.item=null;    x.next=null;    x.prev=null;    x=next;  }  first=last=null;  size=0;  modCount++;}  }
class C{  public T caseUndefinedType(UndefinedType object){  return null;}  }
class C{  public void testAccumulateAndGetMT(){  final int incs=1000000;  final int nthreads=4;  final ExecutorService pool=Executors.newCachedThreadPool();  DoubleAccumulator a=new DoubleAccumulator(null,0.0);  Phaser phaser=new Phaser(nthreads + 1);  for (int i=0; i < nthreads; ++i)   pool.execute(new AccTask(a,phaser,incs));  phaser.arriveAndAwaitAdvance();  phaser.arriveAndAwaitAdvance();  double expected=incs - 1;  double result=a.get();  assertEquals(expected,result);  pool.shutdown();}  }
class C{  protected <T extends SpatialComparable>void strPartition(List<T> objs,int start,int end,int depth,int dims,int maxEntries,SpatialSingleMeanComparator c,List<List<T>> ret){  final int p=(int)Math.ceil((end - start) / (double)maxEntries);  double[] mm=new double[dims * 2];  for (int d=0; d < mm.length; d+=2) {    mm[d]=Double.POSITIVE_INFINITY;    mm[d + 1]=Double.NEGATIVE_INFINITY;  }  for (int i=start; i < end; i++) {    T o=objs.get(i);    for (int d1=0, d2=0; d2 < mm.length; d1++, d2+=2) {      mm[d2]=Math.min(mm[d2],o.getMin(d1));      mm[d2 + 1]=Math.max(mm[d2 + 1],o.getMax(d1));    }  }  double maxex=0.0;  int sdim=depth;  double[] exts=new double[dims];  for (int d=0; d < mm.length; d+=2) {    final double extend=mm[d + 1] - mm[d];    if (extend > maxex) {      maxex=extend;      sdim=d >>> 1;    }    exts[d >>> 1]=extend;  }  Arrays.sort(exts);  double extsum=0.;  for (int d=depth; d < exts.length; d++) {    extsum+=exts[d];  }  final int s;  if (maxex > 0. && depth + 1 < dims) {    s=(int)Math.ceil(Math.pow(p,1.0 / (dims - depth)) * (dims - depth) * maxex / extsum);  } else {    s=(int)Math.ceil(Math.pow(p,1.0 / (dims - depth)));  }  final double len=end - start;  for (int i=0; i < s; i++) {    int s2=start + (int)((i * len) / s);    int e2=start + (int)(((i + 1) * len) / s);    if (e2 < end) {      c.setDimension(sdim);      QuickSelect.quickSelect(objs,c,s2,end,e2);    }    if (depth + 1 == dims) {      ret.add(objs.subList(s2,e2));    } else {      strPartition(objs,s2,e2,depth + 1,dims,maxEntries,c,ret);    }  }}  }
class C{  public static void checkPermissions(IUser user,IChannel channel,EnumSet<Permissions> required) throws MissingPermissionsException {  try {    EnumSet<Permissions> contained=channel.getModifiedPermissions(user);    checkPermissions(contained,required);  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public ImmutableVisionWorldModel(final PixelMatrix pixelMatrix,final SensorMatrix sensorMatrix){  super();  if (pixelMatrix == null) {    throw new IllegalArgumentException("pixelMatrix must not be null");  }  if (sensorMatrix == null) {    throw new IllegalArgumentException("sensorMatrix must not be null");  }  this.pixelMatrix=pixelMatrix;  this.sensorMatrix=sensorMatrix;}  }
class C{  public static boolean isPrivate(int flags){  return (flags & AccPrivate) != 0;}  }
class C{  public void onLeftClick(View view){  final int currentPosition=mPager.getCurrentItem();  if (currentPosition != 0) {    characterSelectedHelper(currentPosition - 1,true);  }}  }
class C{  public final static char toLowerAscii(char c){  if (isUppercaseAlpha(c)) {    c+=(char)0x20;  }  return c;}  }
class C{  public CopyTargetEdit(int offset){  super(offset,0);}  }
class C{  private static Object readFieldValue(final Object obj,final Field field){  try {    return field.get(obj);  } catch (  Exception ex) {    throw new JBBPException("Can't get falue from field [" + field + ']',ex);  }}  }
class C{  public AffineTransform(){  m00=m11=1.0;}  }
class C{  public boolean isValidForAccessToken(AccessToken accessToken){  AccessTokenAppIdPair other=new AccessTokenAppIdPair(accessToken);  return accessTokenAppId.equals(other);}  }
class C{  public void generateFigures(LogicCircuit lc,GateLibrary gate_library){  Integer a=lc.get_index();  String name_wiring_xfer=lc.get_assignment_name() + "_wiring_xfer.dot";  String name_wiring_rpu=lc.get_assignment_name() + "_wiring_rpu.dot";  String name_wiring_grn=lc.get_assignment_name() + "_wiring_grn.dot";  Gnuplot gnuplot=new Gnuplot(_options.get_home(),_options.get_output_directory(),_options.get_jobID());  Graphviz graphviz=new Graphviz(_options.get_home(),_options.get_output_directory(),_options.get_jobID());  ScriptCommands script_commands=new ScriptCommands(_options.get_home(),_options.get_output_directory(),_options.get_jobID());  logger.info("=========== Graphviz wiring diagram ==========");  Colors.setColors();  graphviz.printGraphvizDotText(lc,name_wiring_grn);  script_commands.makeDot2Png(name_wiring_grn);  if (_options.is_response_fn()) {    logger.info("=========== Graphviz Xfer figures ============");    gnuplot.printGnuplotXfer(lc,_options);    graphviz.printGraphvizXferPNG(lc,name_wiring_xfer);    script_commands.makeCircuitRPUFigure(lc.get_assignment_name());    script_commands.makeDot2Png(name_wiring_xfer);  }  if (_options.is_snr()) {    logger.info("=========== SNR figures =======================");    for (    Gate g : lc.get_logic_gates()) {      gnuplot.printGnuplotGateSNR(g,lc.get_assignment_name(),_options);    }    script_commands.makeCircuitSNRFigure(lc.get_assignment_name());  }  if (_options.is_tandem_promoter()) {    logger.info("=========== Tandem promoter figures =======================");    gnuplot.makeTandemPromoterHeatmaps(lc,gate_library,_options);    InterpolateTandemPromoter itp=new InterpolateTandemPromoter();    HistogramBins hbins=new HistogramBins();    hbins.init();    for (    Gate g : lc.get_Gates()) {      if (g.Type == GateType.INPUT) {        continue;      }      boolean tp_exists=false;      String tp_name="";      double[][] grid=new double[hbins.get_NBINS()][hbins.get_NBINS()];      Gate child1=new Gate();      Gate child2=new Gate();      ArrayList<String> fanin_gate_names=new ArrayList<>();      String var="x";      if (g.get_variable_names().size() == 1) {        var=g.get_variable_names().get(0);      }      if (g.get_variable_wires().get(var).size() == 2) {        child1=g.getChildren().get(0);        child2=g.getChildren().get(1);        if (child1.Type == Gate.GateType.INPUT) {          fanin_gate_names.add("input_" + child1.Name);        } else {          fanin_gate_names.add(child1.Name);        }        if (child2.Type == Gate.GateType.INPUT) {          fanin_gate_names.add("input_" + child2.Name);        } else {          fanin_gate_names.add(child2.Name);        }        String tandem_promoter_name_1=fanin_gate_names.get(0) + "_" + fanin_gate_names.get(1);        String tandem_promoter_name_2=fanin_gate_names.get(1) + "_" + fanin_gate_names.get(0);        tp_name=tandem_promoter_name_1;        if (gate_library.get_TANDEM_PROMOTERS().containsKey(tandem_promoter_name_1)) {          grid=gate_library.get_TANDEM_PROMOTERS().get(tandem_promoter_name_1);          tp_name=tandem_promoter_name_1;          tp_exists=true;        } else         if (gate_library.get_TANDEM_PROMOTERS().containsKey(tandem_promoter_name_2)) {          grid=gate_library.get_TANDEM_PROMOTERS().get(tandem_promoter_name_2);          tp_name=tandem_promoter_name_2;          tp_exists=true;        }      }      if (tp_exists) {        String file_points_on="grid_tp_" + tp_name + "_points_on.txt";        String file_points_off="grid_tp_" + tp_name + "_points_off.txt";        String file_interp="grid_tp_" + tp_name + ".txt";        String file_points_on_path=_options.get_output_directory() + "/" + file_points_on;        String file_points_off_path=_options.get_output_directory() + "/" + file_points_off;        String file_interp_path=_options.get_output_directory() + "/" + file_interp;        logger.info("////////////////////////////////////////// ");        logger.info("making " + file_interp);        itp.writeGridstoFiles(grid,file_interp_path,5);        String gate1_name=fanin_gate_names.get(0);        String gate2_name=fanin_gate_names.get(1);        String points_on="";        String points_off="";        String v="x";        for (int row=0; row < g.get_logics().size(); ++row) {          Double in1=0.0;          Double in2=0.0;          if (child1.Type == Gate.GateType.INPUT) {            if (child1.get_logics().get(row) == 0) {              in1=Math.pow(10,hbins.get_LOGMIN());            } else             if (child1.get_logics().get(row) == 1) {              in1=Math.pow(10,hbins.get_LOGMAX());            }          } else {            in1=child1.get_inrpus().get(v).get(row);          }          if (child2.Type == Gate.GateType.INPUT) {            if (child2.get_logics().get(row) == 0) {              in2=Math.pow(10,hbins.get_LOGMIN());            } else             if (child2.get_logics().get(row) == 1) {              in2=Math.pow(10,hbins.get_LOGMAX());            }          } else {            in2=child2.get_inrpus().get(v).get(row);          }          if (tp_name.startsWith(gate1_name) && tp_name.endsWith(gate2_name)) {          } else           if (tp_name.startsWith(gate2_name) && tp_name.endsWith(gate1_name)) {            Double temp=new Double(in1);            in1=in2;            in2=temp;          } else {            throw new IllegalStateException("Problem with tandem promoter lookup");          }          Integer bin1=HistogramUtil.bin_of_logrpu(Math.log10(in1),hbins);          Integer bin2=HistogramUtil.bin_of_logrpu(Math.log10(in2),hbins);          int logic=g.get_logics().get(row);          if (g.Type == GateType.NOR) {            logic=BooleanLogic.computeNOT(logic);          }          if (logic == 0) {            points_off+=bin1 + " " + bin2+ " 1\n";          }          if (logic == 1) {            points_on+=bin1 + " " + bin2+ " 1\n";          }        }        Util.fileWriter(file_points_on_path,points_on,false);        Util.fileWriter(file_points_off_path,points_off,false);        String cmd="perl " + _options.get_home() + "/resources/scripts/make_tandem_promoter_heatmaps.pl "+ _options.get_output_directory()+ " "+ _options.get_jobID()+ " "+ _options.get_home()+ "/resources/scripts/"+ " "+ file_interp+ " "+ file_points_on+ " "+ file_points_off+ " "+ tp_name;        String command_result=Util.executeCommand(cmd);      } else {        logger.info(tp_name + " DOES NOT EXIST ");      }    }  }  if (_options.is_truthtable_rpu()) {    logger.info("=========== Truth table figure(s) ============");    if (_options.is_histogram()) {      logger.info("=========== histogram multiplots =============");      String input_truth="";      for (int i=0; i < lc.get_input_gates().get(0).get_logics().size(); ++i) {        for (        Gate g : lc.get_input_gates()) {          input_truth+=g.get_logics().get(i);        }        input_truth+=",";      }      gnuplot.makeHistogramMultiplot(lc,"truth",input_truth);      for (      Gate g : lc.get_logic_gates()) {        gnuplot.makeHistogramMultiplotGate(g,lc.get_assignment_name(),"gate",input_truth);      }      for (      Gate g : lc.get_output_gates()) {        gnuplot.makeHistogramMultiplotGate(g,lc.get_assignment_name(),"gate",input_truth);      }      graphviz.printGraphvizDistrPNG(lc,name_wiring_rpu);      script_commands.makeDot2Png(name_wiring_rpu);    } else {      logger.info("=========== bargraph multiplots ==============");      gnuplot.makeTruthtableBargraph(lc,"truth");      for (      Gate g : lc.get_logic_gates()) {        gnuplot.makeTruthtableBargraph(g,lc.get_assignment_name(),"gate");      }      for (      Gate g : lc.get_output_gates()) {        gnuplot.makeTruthtableBargraph(g,lc.get_assignment_name(),"gate");      }      graphviz.printGraphvizDistrPNG(lc,name_wiring_rpu);      script_commands.makeDot2Png(name_wiring_rpu);    }  }  if (_options.is_toxicity() && _options.is_truthtable_tox()) {    logger.info("============== cell growth plots =============");    gnuplot.makeCellGrowthFigure(lc,"toxicity");  }  logger.info("=========== Table of predicted expression levels (RPU)");  String rpu_table=lc.printRPUTable();  String outfile_rputable=lc.get_assignment_name() + "_rputable.txt";  Util.fileWriter(_options.get_output_directory() + outfile_rputable,rpu_table,false);  logger.info(rpu_table);  if (_options.is_toxicity()) {    logger.info("=========== Table of predicted cell growth (relative OD600)");    String tox_table=Toxicity.writeToxicityTable(lc);    logger.info(tox_table);    String outfile=lc.get_assignment_name() + "_toxtable.txt";    Util.fileWriter(_options.get_output_directory() + outfile,tox_table,false);  }}  }
class C{  public boolean Arg0IsNodesetExpr(){  return (null == m_arg0) ? true : m_arg0.isNodesetExpr();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.WORD___SINGULAR_1:    return SINGULAR_1_EDEFAULT == null ? singular_1 != null : !SINGULAR_1_EDEFAULT.equals(singular_1);case UmplePackage.WORD___PLURAL_1:  return PLURAL_1_EDEFAULT == null ? plural_1 != null : !PLURAL_1_EDEFAULT.equals(plural_1);}return super.eIsSet(featureID);}  }
class C{  public Message authResponse(AuthRequest authReq,String userSelId,String userSelClaimed,boolean authenticatedAndApproved){  return authResponse(authReq,userSelId,userSelClaimed,authenticatedAndApproved,_opEndpointUrl,true);}  }
class C{  public void zonesetMember(String zoneName,boolean no) throws NetworkDeviceControllerException {  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (lastPrompt != SSHPrompt.MDS_CONFIG_ZONESET) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG_ZONESET.toString());  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG_ZONESET};  String noString=no ? MDSDialogProperties.getString("MDSDialog.zonesetMember.no.cmd") : "";  StringBuilder buf=new StringBuilder();  boolean retryNeeded=true;  for (int retryCount=0; retryCount < sessionLockRetryMax && retryNeeded; retryCount++) {    String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.zonesetMember.member.cmd"),zoneName,noString);    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);    String[] lines=getLines(buf);    retryNeeded=checkForEnhancedZoneSession(lines,retryCount);  }}  }
class C{  protected void buildSuccessful(Notification notification,String successMessage,String prefixConsole){  notification.setMessage(successMessage);  notification.setStatus(FINISHED);  console.print(prefixConsole + "::" + successMessage);}  }
class C{  @Override public void draw(Graphics2D g2,XYPlot plot,Rectangle2D dataArea,ValueAxis domainAxis,ValueAxis rangeAxis,int rendererIndex,PlotRenderingInfo info){  PlotOrientation orientation=plot.getOrientation();  RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(),orientation);  RectangleEdge rangeEdge=Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(),orientation);  double j2DX=domainAxis.valueToJava2D(getX(),dataArea,domainEdge);  double j2DY=rangeAxis.valueToJava2D(getY(),dataArea,rangeEdge);  if (orientation == PlotOrientation.HORIZONTAL) {    double temp=j2DX;    j2DX=j2DY;    j2DY=temp;  }  double startX=j2DX + Math.cos(this.angle) * this.baseRadius;  double startY=j2DY + Math.sin(this.angle) * this.baseRadius;  double endX=j2DX + Math.cos(this.angle) * this.tipRadius;  double endY=j2DY + Math.sin(this.angle) * this.tipRadius;  double arrowBaseX=endX + Math.cos(this.angle) * this.arrowLength;  double arrowBaseY=endY + Math.sin(this.angle) * this.arrowLength;  double arrowLeftX=arrowBaseX + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;  double arrowLeftY=arrowBaseY + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;  double arrowRightX=arrowBaseX - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;  double arrowRightY=arrowBaseY - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;  GeneralPath arrow=new GeneralPath();  arrow.moveTo((float)endX,(float)endY);  arrow.lineTo((float)arrowLeftX,(float)arrowLeftY);  arrow.lineTo((float)arrowRightX,(float)arrowRightY);  arrow.closePath();  g2.setStroke(this.arrowStroke);  g2.setPaint(this.arrowPaint);  Line2D line=new Line2D.Double(startX,startY,arrowBaseX,arrowBaseY);  g2.draw(line);  g2.fill(arrow);  double labelX=j2DX + Math.cos(this.angle) * (this.baseRadius + this.labelOffset);  double labelY=j2DY + Math.sin(this.angle) * (this.baseRadius + this.labelOffset);  g2.setFont(getFont());  Shape hotspot=TextUtilities.calculateRotatedStringBounds(getText(),g2,(float)labelX,(float)labelY,getTextAnchor(),getRotationAngle(),getRotationAnchor());  if (getBackgroundPaint() != null) {    g2.setPaint(getBackgroundPaint());    g2.fill(hotspot);  }  g2.setPaint(getPaint());  TextUtilities.drawRotatedString(getText(),g2,(float)labelX,(float)labelY,getTextAnchor(),getRotationAngle(),getRotationAnchor());  if (isOutlineVisible()) {    g2.setStroke(getOutlineStroke());    g2.setPaint(getOutlinePaint());    g2.draw(hotspot);  }  String toolTip=getToolTipText();  String url=getURL();  if (toolTip != null || url != null) {    addEntity(info,hotspot,rendererIndex,toolTip,url);  }}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public NamingException fillInException(NamingException e){  e.setRemainingName(remainingName);  e.setResolvedObj(resolvedObj);  if (starter == null || starter.isEmpty())   e.setResolvedName(null); else   if (remainingName == null)   e.setResolvedName(starter); else   e.setResolvedName(starter.getPrefix(starter.size() - remainingName.size()));  if ((e instanceof CannotProceedException)) {    CannotProceedException cpe=(CannotProceedException)e;    Hashtable<?,?> env=(environment == null ? new Hashtable<>(11) : (Hashtable<?,?>)environment.clone());    cpe.setEnvironment(env);    cpe.setAltNameCtx(resolvedContext);    cpe.setAltName(relativeResolvedName);  }  return e;}  }
class C{  private void generateHIR(){  if (DBG_BB || DBG_SELECTED)   db("bbl: " + printBlocks());  generateFrom(0);  for (currentBBLE=blocks.getNextEmptyBlock(currentBBLE); currentBBLE != null; currentBBLE=blocks.getNextEmptyBlock(currentBBLE)) {    currentBBLE.clearSelfRegen();    runoff=Math.min(blocks.getNextBlockBytecodeIndex(currentBBLE),currentBBLE.max);    if (currentBBLE.stackState == null) {      stack.clear();    } else {      stack=currentBBLE.stackState.deepCopy();    }    _localState=currentBBLE.copyLocalState();    if (DBG_BB || DBG_SELECTED)     db("bbl: " + printBlocks());    generateFrom(currentBBLE.low);  }  if (DBG_BB || DBG_SELECTED)   db("doing final pass over basic blocks: " + printBlocks());  blocks.finalPass(inlinedSomething);}  }
class C{  @NotNull public static <Send,Receive>MesosClientBuilder<Send,Receive> newBuilder(){  return new MesosClientBuilder<>();}  }
class C{  public void add(JMenuItem item){  getPopupMenu().add(item);  item.setFont(itemFont);}  }
class C{  public static void generateImports(StringBuilder builder){  builder.append("import com.google.inject.Inject;\n");  builder.append("import com.google.inject.Provider;\n");  builder.append("import com.google.inject.Singleton;\n");  builder.append("import java.util.HashMap;\n");  builder.append("import java.util.Map;\n");}  }
class C{  private static boolean isSegment(final String value){  return value.equals("cs") || value.equals("ds") || value.equals("es")|| value.equals("fs")|| value.equals("gs")|| value.equals("ss");}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  public synchronized boolean registerFrame(JFrame frame){  frameList.add(frame);  return true;}  }
class C{  public PixelAccumulatorEditor(){  super();  setToolTipText(DESCRIPTION);}  }
class C{  private boolean isBoldCounterpart(HTMLFont font){  if (!bold) {    return false;  }  return ((size == font.getSize()) && (isSameFamily(font)) && (italic == font.isItalic()));}  }
class C{  public static double[] readFileColumn(String filename,int columnIdx,int sizeLimit) throws IOException, SAXException {  Path path=Paths.get(filename);  if (!(Files.exists(path))) {    throw new SAXException("unable to load data - data source not found.");  }  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(filename),"UTF-8"));  return readTS(br,columnIdx,sizeLimit);}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String val) throws SAXException {  if (internalDTDsubset) {    if (includeInternalDTDDeclarations) {      addDTDDeclaration(new AttributeDecl(eName,aName,type,valueDefault,val));    }  } else {    if (includeExternalDTDDeclarations) {      addExternalDTDDeclaration(new AttributeDecl(eName,aName,type,valueDefault,val));    }  }}  }
class C{  boolean casNext(Node<K,V> cmp,Node<K,V> val){  return UNSAFE.compareAndSwapObject(this,nextOffset,cmp,val);}  }
class C{  public boolean checkAllMessages(boolean check,boolean checkReplies){  SQLiteDatabase db=getWritableDatabase();  if (db != null) {    String parentOnly=" AND (" + COL_BIGPARENT + " IS NULL OR "+ COL_BIGPARENT+ " NOT IN (SELECT "+ COL_MESSAGE_ID+ " FROM "+ TABLE+ " WHERE "+ COL_DELETED+ "="+ FALSE+ ") AND "+ COL_PARENT+ " NOT IN (SELECT "+ COL_MESSAGE_ID+ " FROM "+ TABLE+ " WHERE "+ COL_DELETED+ "="+ FALSE+ "))";    db.execSQL("UPDATE " + TABLE + " SET "+ COL_CHECKED+ "="+ (check ? TRUE : FALSE)+ " WHERE ("+ COL_DELETED+ " ="+ FALSE+ ") "+ (checkReplies ? "" : parentOnly)+ " ;");    return true;  }  return false;}  }
class C{  private List<ClusterNode> mapKey(KeyCacheObject key,AffinityTopologyVersion topVer){  GridCacheAffinityManager affMgr=cctx.affinity();  return fastMap ? cctx.topology().nodes(affMgr.partition(key),topVer) : Collections.singletonList(affMgr.primary(key,topVer));}  }
class C{  @Override public void recordGaugeValues(Map<String,? extends Number> gauges){  for (  Map.Entry<String,? extends Number> gauge : gauges.entrySet()) {    if (gauge.getValue() instanceof Long) {      client.recordGaugeValue(gauge.getKey(),gauge.getValue().longValue());    } else     if (gauge.getValue() instanceof Double) {      client.recordGaugeValue(gauge.getKey(),gauge.getValue().doubleValue());    } else {      throw new IllegalArgumentException("Unexpected Number type: " + gauge.getValue().getClass().getSimpleName());    }  }}  }
class C{  public static java.util.Random newRandom(){  return new Random(true);}  }
class C{  public void testScan(){  int iterations=BluetoothTestRunner.sScanIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.stopScan(adapter);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("scan iteration " + (i + 1) + " of "+ iterations);    mTestUtils.startScan(adapter);    mTestUtils.stopScan(adapter);  }  mTestUtils.disable(adapter);}  }
class C{  public void fillDefaultValues(){  tfActivationProbability.setText(Double.toString(PROTOTYPE_RESPONDER.getActivationProbability()));  tfResponseValue.setText(Double.toString(PROTOTYPE_RESPONDER.getActivationProbability()));}  }
class C{  public boolean isDescendantOf(Class<?> declaringClass){  if (parent == null) {    return false;  }  if (parent.className.equals(declaringClass.getName())) {    return true;  }  return parent.isDescendantOf(declaringClass);}  }
class C{  private void updateIPAddress(String ipAddress,StoragePort port){  if (null != ipAddress && !ipAddress.equalsIgnoreCase(port.getPortNetworkId())) {    port.setIpAddress(ipAddress);  }}  }
class C{  private List<MockRequest> makeRequests(int count){  Request.Priority[] allPriorities=Request.Priority.values();  Random random=new Random();  List<MockRequest> requests=new ArrayList<MockRequest>();  for (int i=0; i < count; i++) {    MockRequest request=new MockRequest();    Request.Priority priority=allPriorities[random.nextInt(allPriorities.length)];    request.setCacheKey(String.valueOf(i));    request.setPriority(priority);    requests.add(request);  }  return requests;}  }
class C{  public OperationNotSupportedException(String explanation){  super(explanation);}  }
class C{  public void prepareTimelineSettings(TimelineSettingsHandler timelineSettingsHandler){  timelineSettingsHandler.configureTimelineSettings(getSettingsTag(),new TimelineSettingsHandler.TimelineSetting[]{TimelineSettingsHandler.TimelineSetting.FRIENDS_ONLY},getDefaultSettings(),this);}  }
class C{  public static void main(String[] args){  try (Ignite g=G.start("examples/config/example-cache.xml")){    int max=30000;    IgniteDataStreamer<Integer,TestObject> ldr=g.dataStreamer("replicated");    for (int i=0; i < max; i++)     ldr.addData(i,new TestObject(i,"Test object: " + i));    ldr.close(false);    X.println("Populated replicated cache.");    g.compute().execute(new GridContinuousMapperTask1(),max);  } }  }
class C{  public void wordChars(int low,int hi){  if (low < 0)   low=0;  if (hi >= ctype.length)   hi=ctype.length - 1;  while (low <= hi)   ctype[low++]|=CT_ALPHA;}  }
class C{  private void initMLContext(SparkContext sc,boolean monitorPerformance){  if (activeMLContext == null) {    System.out.println(MLContextUtil.welcomeMessage());  }  this.sc=sc;  MLContextUtil.verifySparkVersionSupported(sc);  DMLScript.rtplatform=RUNTIME_PLATFORM.HYBRID_SPARK;  activeMLContext=this;  MLContextProxy.setActive(true);  MLContextUtil.setDefaultConfig();  MLContextUtil.setCompilerConfig();  if (monitorPerformance) {    SparkListener sparkListener=new SparkListener(sc);    sparkMonitoringUtil=new SparkMonitoringUtil(sparkListener);    sc.addSparkListener(sparkListener);  }}  }
class C{  public static JCalValue multi(List<?> values){  List<JsonValue> multiValues=new ArrayList<JsonValue>(values.size());  for (  Object value : values) {    multiValues.add(new JsonValue(value));  }  return new JCalValue(multiValues);}  }
class C{  public static void skipRefCountTracking(){  getInstance().skipRefCountTracking();}  }
class C{  public boolean isExternal(){  return external;}  }
class C{  public static boolean isJavaArtifact(IResource resource){  if (resource == null || (resource.getType() != IResource.FILE)) {    return false;  }  String ex=resource.getFileExtension();  if ("java".equalsIgnoreCase(ex) || "class".equalsIgnoreCase(ex)) {    return true;  }  String name=resource.getName();  return Archive.isArchiveFileName(name);}  }
class C{  protected void purge(Reference reference){  int hash=reference.hashCode();  int index=hashIndex(hash,data.length);  HashEntry previous=null;  HashEntry entry=data[index];  while (entry != null) {    if (((ReferenceEntry)entry).purge(reference)) {      if (previous == null) {        data[index]=entry.next;      } else {        previous.next=entry.next;      }      this.size--;      return;    }    previous=entry;    entry=entry.next;  }}  }
class C{  public Chronology withZone(DateTimeZone zone){  if (zone == null) {    zone=DateTimeZone.getDefault();  }  if (zone == getZone()) {    return this;  }  return getInstance(zone);}  }
class C{  @Field(37) public int uintVal(){  return this.io.getIntField(this,37);}  }
class C{  @Override public Document parseXml(InputStream input,EntityResolver resolver) throws JDOMException, IOException {  SAXBuilder builder=createDocumentBuilder(resolver);  return builder.build(input);}  }
class C{  private static JRadioButton createRadioButton(String key,ActionListener al){  JRadioButton rb=new JRadioButton(getMsg(key));  rb.setMnemonic(getMnemonic(key));  rb.addActionListener(al);  return rb;}  }
class C{  private void fciOrientbk(IKnowledge knowledge,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=knowledge.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.CIRCLE);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=knowledge.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  public void applyLinearImpulse(Vector2 impulse,Vector2 point,boolean wake){  tmp.set(impulse.x,impulse.y);  tmp2.set(point.x,point.y);  body.applyLinearImpulse(tmp,tmp2,wake);}  }
class C{  private void emitDeserializer(List<Method> getters,StringBuilder builder){  builder.append("    public static ").append(getImplClassName()).append(" fromJsonElement(JsonElement jsonElem) {\n");  builder.append("      return fromJsonElement(jsonElem, true);\n");  builder.append("    }\n");  builder.append("    public static ").append(getImplClassName()).append(" fromJsonElement(JsonElement jsonElem, boolean ").append(COPY_JSONS_PARAM).append(") {\n");  builder.append("      if (jsonElem == null || jsonElem.isJsonNull()) {\n");  builder.append("        return null;\n");  builder.append("      }\n\n");  builder.append("      ").append(getImplClassName()).append(" dto = new ").append(getImplClassName()).append("();\n");  if (isCompactJson()) {    builder.append("      JsonArray json = jsonElem.getAsJsonArray();\n");    for (    Method method : getters) {      emitDeserializeFieldForMethodCompact(method,builder);    }  } else {    builder.append("      JsonObject json = jsonElem.getAsJsonObject();\n");    for (    Method getter : getters) {      emitDeserializeFieldForMethod(getter,builder);    }  }  builder.append("\n      return dto;\n");  builder.append("    }\n\n");}  }
class C{  public void removeSelectionPath(TreePath path){  if (path != null) {    TreePath[] rPath=new TreePath[1];    rPath[0]=path;    removeSelectionPaths(rPath);  }}  }
class C{  public void emitDirect(int taskId,String streamId,List<Object> tuple,Object messageId){  delegate.emitDirect(taskId,streamId,tuple,messageId);}  }
class C{  @Override public boolean receiveImage(ImageToProcess img,TaskImageContainer task,boolean blockUntilImageRelease,boolean closeOnImageRelease) throws InterruptedException {  return receiveImage(img,task,blockUntilImageRelease,closeOnImageRelease,Optional.<Runnable>absent());}  }
class C{  public CatchEntry(int start,int end,int handler,CP cat){  start_off=start;  end_off=end;  handler_off=handler;  catch_cpe=cat;}  }
class C{  public CSVParser(){  this(DEFAULT_SEPARATOR,DEFAULT_QUOTE_CHARACTER,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  private static void createOperand(final SQLProvider provider,final int moduleId,final BigInteger address,final int position,final int expressionTreeId) throws SQLException {  final String query=String.format("insert into " + CTableNames.OPERANDS_TABLE + "(module_id, address, position, expression_tree_id) values(%d, %d, %d, %d)",moduleId,address,position,expressionTreeId);  provider.getConnection().executeUpdate(query,true);}  }
class C{  public TDoubleFloatHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  private void loadRegionLockedStringSetting(SQLiteStatement stmt,String name,int resId){  String mcc=SystemProperties.get(MCC_PROP_NAME);  Resources customResources=null;  if (!TextUtils.isEmpty(mcc)) {    Configuration tempConfiguration=new Configuration();    boolean useTempConfig=false;    try {      tempConfiguration.mcc=Integer.parseInt(mcc);      useTempConfig=true;    } catch (    NumberFormatException e) {      e.printStackTrace();    }    if (useTempConfig) {      AssetManager assetManager=new AssetManager();      if (!TextUtils.isEmpty(mPublicSrcDir)) {        assetManager.addAssetPath(mPublicSrcDir);      }      customResources=new Resources(assetManager,new DisplayMetrics(),tempConfiguration);    }  }  String value=customResources == null ? mContext.getResources().getString(resId) : customResources.getString(resId);  loadSetting(stmt,name,value);}  }
class C{  public static <T>Function0<T> memoizeFunction0(Function0<T> s){  Map<Object,T> lazy=new ConcurrentHashMap<>();  return null;}  }
class C{  public BadPositionCategoryException(){  super();}  }
class C{  @Transactional public Boolean updateBillingSystem(final ServiceDetails serviceDetails,final Set<BillReceiptInfo> billReceipts,BillingIntegrationService billingService) throws ApplicationRuntimeException {  if (!serviceDetails.getServiceType().equals(CollectionConstants.SERVICE_TYPE_BILLING))   return true; else   if (billingService == null && serviceDetails.getServiceType().equals(CollectionConstants.SERVICE_TYPE_BILLING))   billingService=getBillingServiceBean(serviceDetails.getCode());  if (billingService == null && serviceDetails.getServiceType().equals(CollectionConstants.SERVICE_TYPE_BILLING))   return false; else   try {    billingService.updateReceiptDetails(billReceipts);    return true;  } catch (  final Exception e) {    final String errMsg="Exception while updating billing system [" + serviceDetails.getCode() + "] with receipt details!";    LOGGER.error(errMsg,e);    throw new ApplicationRuntimeException(errMsg,e);  }}  }
class C{  public void validate(@NonNull Object object,@NonNull ExclusionStrategy exclusionStrategy) throws RaveException {  Class<?> clazz=object.getClass();  Validated validated=clazz.getAnnotation(Validated.class);  BaseValidator validator;synchronized (this) {    if (validated == null && !unannotatedModelValidator.hasSeen(clazz)) {      unannotatedModelValidator.processNonAnnotatedClasses(clazz);    }    validator=classValidatorMap.get(clazz);    if (validator == null) {      validator=getValidatorInstance(clazz);    }    if (validator == null) {      throw new UnsupportedObjectException(Collections.singletonList(new RaveError(clazz,"",RaveErrorStrings.CLASS_NOT_SUPPORTED_ERROR)));    }  }  validator.validate(object,exclusionStrategy);}  }
class C{  protected Map<String,Object> internalBind(String name,Object value) throws NamingException {  assert name != null && name.length() > 0;  Map<String,Object> newBindings=new HashMap<>();  int pos=name.indexOf('/');  if (pos == -1) {    if (treeBindings.put(name,value) != null) {      throw new NamingException("Something already bound at " + name);    }    bindings.put(name,value);    newBindings.put(name,value);  } else {    String segment=name.substring(0,pos);    assert segment != null;    assert !segment.equals("");    Object o=treeBindings.get(segment);    if (o == null) {      o=newContext();      treeBindings.put(segment,o);      bindings.put(segment,o);      newBindings.put(segment,o);    } else     if (!(o instanceof TestContext)) {      throw new NamingException("Something already bound where a subcontext should go");    }    TestContext readOnlyContext=(TestContext)o;    String remainder=name.substring(pos + 1);    Map<String,Object> subBindings=readOnlyContext.internalBind(remainder,value);    for (    Map.Entry<String,Object> entry : subBindings.entrySet()) {      String subName=segment + "/" + entry.getKey();      Object bound=entry.getValue();      treeBindings.put(subName,bound);      newBindings.put(subName,bound);    }  }  return newBindings;}  }
class C{  public static void eliminarOficinasByIdReport(int idReport,DbConnection db) throws Exception {  SicresOficinaInformesDatos informeOficinaDatos=new SicresOficinaInformesDatos();  informeOficinaDatos.setIdReport(idReport);  informeOficinaDatos.deleteByIdReport(db);}  }
class C{  public static Double toDouble(Object o) throws PageException {  if (o instanceof Double)   return (Double)o;  return new Double(toDoubleValue(o));}  }
class C{  public static org.oscm.vo.ListCriteria convertToApi(org.oscm.internal.vo.ListCriteria oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.ListCriteria newVO=new org.oscm.vo.ListCriteria();  newVO.setOffset(oldVO.getOffset());  newVO.setLimit(oldVO.getLimit());  newVO.setFilter(oldVO.getFilter());  newVO.setSorting(EnumConverter.convert(oldVO.getSorting(),org.oscm.types.enumtypes.Sorting.class));  newVO.setCategoryId(oldVO.getCategoryId());  return newVO;}  }
class C{  private void writeRef(Entry e) throws IOException {  writeRef(e,cpIndex);}  }
class C{  public AsyncResult DeleteMonitoredItemsAsync(DeleteMonitoredItemsRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public void addActionListener(ActionListener listener){  comboBox.addActionListener(listener);}  }
class C{  public static void addVolumeListener(ActionListener al){  if (volumeListener == null) {    volumeListener=new EventDispatcher();  }  volumeListener.addListener(al);}  }
class C{  public JSONNode addPrimitive(String name,String value){  return add(name,value,NodeType.PRIMITIVE);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.VERSION_CONSTRAINT__EXCL_LOWER_BOUND:    setExclLowerBound(EXCL_LOWER_BOUND_EDEFAULT);  return;case N4mfPackage.VERSION_CONSTRAINT__LOWER_VERSION:setLowerVersion((DeclaredVersion)null);return;case N4mfPackage.VERSION_CONSTRAINT__EXCL_UPPER_BOUND:setExclUpperBound(EXCL_UPPER_BOUND_EDEFAULT);return;case N4mfPackage.VERSION_CONSTRAINT__UPPER_VERSION:setUpperVersion((DeclaredVersion)null);return;}super.eUnset(featureID);}  }
class C{  @Override public X509Certificate[] clientCertificates() throws CertificateException {  return _socket.getClientCertificates();}  }
class C{  public static int compare(String ver1,String ver2){  if (ver1 == null) {    return (ver2 == null) ? 0 : -1;  } else   if (ver2 == null) {    return 1;  }  ver1=ver1.toLowerCase();  ver2=ver2.toLowerCase();  final List<String> s1=splitVersionString(ver1);  final List<String> s2=splitVersionString(ver2);  padWithNulls(s1,s2);  int res=0;  for (int i=0; i < s1.size(); i++) {    final String e1=s1.get(i);    final String e2=s2.get(i);    final VersionTokenType t1=VersionTokenType.lookup(e1);    final VersionTokenType t2=VersionTokenType.lookup(e2);    if (!t1.equals(t2)) {      res=comparePriorities(t1,t2);    } else     if (t1 == VersionTokenType._WORD) {      res=e1.compareTo(e2);    } else     if (t1 == VersionTokenType._DIGITS) {      res=compareNumbers(e1,e2);    }    if (res != 0) {      return res;    }  }  return 0;}  }
class C{  public void testGetObjectWithOffset() throws NoSuchAlgorithmException, InvalidKeyException, IOException, XmlPullParserException, MinioException {  final String expectedObject="world";  MockWebServer server=new MockWebServer();  MockResponse response=new MockResponse();  response.addHeader(CONTENT_LENGTH,"6");  response.addHeader(CONTENT_TYPE,APPLICATION_OCTET_STREAM);  response.addHeader("ETag",MD5_HASH_STRING);  response.addHeader(LAST_MODIFIED,MON_04_MAY_2015_07_58_51_GMT);  response.addHeader(ACCEPT_RANGES,BYTES);  response.addHeader(CONTENT_RANGE,"5-10/11");  response.setResponseCode(206);  response.setBody(new Buffer().writeUtf8(expectedObject));  server.enqueue(response);  server.start();  MinioClient client=new MinioClient(server.url(""));  InputStream object=client.getObject(BUCKET,"key",6);  byte[] result=new byte[5];  int read=object.read(result);  result=Arrays.copyOf(result,read);  assertEquals(expectedObject,new String(result,StandardCharsets.UTF_8));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.277 -0500",hash_original_method="B3806A07425B89767F09A244B77901C0",hash_generated_method="1D9C5D1987C90B0E55B4B8AC3A9758A5") public boolean isSipURI(){  return this instanceof SipUri;}  }
class C{  public void prepareVisit(ClassNode node){  currentClass=node;  currentScope.setClassScope(node);}  }
class C{  public LUDecomposition lu(){  return new LUDecomposition(this);}  }
class C{  @Override public BaseViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  if (viewType != VIEWTYPE_NONE) {    Binder binder=binders.get(viewType);    BaseViewHolder holder=binder.getViewHolder(parent);    binder.onCreateViewHolder(holder);    return holder;  }  return new BaseViewHolder(new View(context));}  }
class C{  public boolean hasNorms(){  return hasNorms;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void delete(List<InternalLog> logs) throws IOException {  final List<byte[]> rowkeys=RowkeyHelper.getRowkeysByLogs(logs);  deleteRowkeys(rowkeys);}  }
class C{  public static long[] clearI(long[] v,int off){  final int wordindex=off >>> LONG_LOG2_SIZE;  v[wordindex]&=~(1L << off);  return v;}  }
class C{  public void hit(){switch (status) {case HOT:    hotHit();  break;case COLD:coldHit();break;case NONRES:throw new IllegalStateException("Can't hit a non-resident entry!");default :throw new AssertionError("Hit with unknown status: " + status);}}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public SVGOMAnimateTransformElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  @Override public boolean equals(Object other){  if (other == null) {    return false;  } else   if (!(other instanceof PeerNetwork)) {    return false;  } else   if (other.getClass() != this.getClass()) {    return false;  } else   if (((PeerNetwork)other).getScanResult() == null) {    return this.getScanResult() == null;  }  return ((PeerNetwork)other).getScanResult().equals(this.getScanResult());}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);}  }
class C{  private void run() throws Exception {  DirectProvider tp=new DirectProvider();  Topology t=tp.newTopology("jdbcSampleWriter");  JdbcStreams myDb=new JdbcStreams(t,null,null);  List<PersonId> personIdList=PersonData.toPersonIds(PersonData.loadPersonData(props));  personIdList.add(new PersonId(99999));  TStream<PersonId> personIds=t.collection(personIdList);  TStream<Person> persons=myDb.executeStatement(personIds,null,null,null);  persons.sink(null);  tp.submit(t);}  }
class C{  public AugmentedNode<K> root(){  return (AugmentedNode<K>)root;}  }
class C{  private void treeify(int root,int paM[][],int paL[][],int visited[]){  int children[]=new int[]{};  for (int j=0; j < paM[root].length; j++) {    if (paM[root][j] == 1) {      if (visited[j] < 0) {        children=A.append(children,j);        paL[j]=A.append(paL[j],root);        visited[j]=visited[Utils.maxIndex(visited)] + 1;      }    }  }  for (  int child : children) {    treeify(child,paM,paL,visited);  }}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_STATUS_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}"+ "/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}"+ "/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/subPartition2Values/{subPartition2Value}"+ "/subPartition3Values/{subPartition3Value}/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.PUT) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_STATUS_PUT) public BusinessObjectDataStatusUpdateResponse updateBusinessObjectDataStatus(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("subPartition3Value") String subPartition3Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestBody BusinessObjectDataStatusUpdateRequest request){  BusinessObjectDataStatusUpdateResponse businessObjectDataStatusUpdateResponse=businessObjectDataStatusService.updateBusinessObjectDataStatus(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value,subPartition3Value),businessObjectDataVersion),request);  notificationEventService.processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG,businessObjectDataStatusUpdateResponse.getBusinessObjectDataKey(),businessObjectDataStatusUpdateResponse.getStatus(),businessObjectDataStatusUpdateResponse.getPreviousStatus());  return businessObjectDataStatusUpdateResponse;}  }
class C{  public T caseTSetter(TSetter object){  return null;}  }
class C{  protected void encodeNull(Element element){  element.setAttribute(ATTR_NULL,"true");}  }
class C{  public static boolean isClientMode(){  return clientMode.get() == null ? false : clientMode.get();}  }
class C{  public final SpecObj init(boolean preprocess,SpecObj spec){  SpecObj processSpec=super.processSpec(spec);  if (TLCGlobals.coverageInterval >= 0) {    TLCStateMutSource.init(this);  } else {    TLCStateMut.init(this);  }  if (preprocess) {    this.processConstantDefns();  }  super.processConfig();  return processSpec;}  }
class C{  private void startMainActivity(){  Intent intent=new Intent(this,MainActivity.class);  startActivity(intent);}  }
class C{  private void checkCompatibleVersionForLDAPGroupSupport(){  if (!_dbClient.checkGeoCompatible(AuthnProvider.getExpectedGeoVDCVersionForLDAPGroupSupport())) {    throw APIException.badRequests.incompatibleGeoVersions(AuthnProvider.getExpectedGeoVDCVersionForLDAPGroupSupport(),FEATURE_NAME_LDAP_GROUP_SUPPORT);  }}  }
class C{  public boolean isUseCaching(){  return useCaching;}  }
class C{  @Override public void run(){  ThreadLocalRandom rng=ThreadLocalRandom.current();  while (true) {    String user=users[rng.nextInt(users.length)];    String event=events[rng.nextInt(events.length)];    String userState=loggedOn.get(user);    if ((userState == null) || (userState != event)) {      loggedOn.put(user,event);      ProducerRecord<String,String> record=new ProducerRecord<>("logons",user,event);      producer.send(record);    }    try {      Thread.sleep(500L);    } catch (    InterruptedException e) {      ;    }  }}  }
class C{  public void addStaticHeaders(Map<String,String> staticHeaders){  this.staticHeaders=staticHeaders;}  }
class C{  public void clearDiscCache(){  checkConfiguration();  configuration.discCache.clear();}  }
class C{  private String exec(Session ses,String cmd) throws JSchException, IOException {  ChannelExec ch=null;  try {    ch=(ChannelExec)ses.openChannel("exec");    ch.setCommand(cmd);    ch.connect();    try (BufferedReader reader=new BufferedReader(new InputStreamReader(ch.getInputStream()))){      return reader.readLine();    }   }  finally {    if (ch != null && ch.isConnected())     ch.disconnect();  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN},blockProxies=true) @Path("/{uuid}/resume") public SiteRestRep resumeStandby(@PathParam("uuid") String uuid){  log.info("Begin to resume data sync to standby site identified by uuid: {}",uuid);  Site standby=validateSiteConfig(uuid);  SiteState state=standby.getState();  if (!state.equals(SiteState.STANDBY_PAUSED) && !state.equals(SiteState.ACTIVE_DEGRADED)) {    log.error("site {} is in state {}, should be STANDBY_PAUSED or ACTIVE_DEGRADED",uuid,standby.getState());    throw APIException.badRequests.operationOnlyAllowedOnPausedSite(standby.getName(),standby.getState().toString());  }  SiteNetworkState networkState=drUtil.getSiteNetworkState(uuid);  if (networkState.getNetworkHealth() == NetworkHealth.BROKEN) {    throw APIException.internalServerErrors.siteConnectionBroken(standby.getName(),"Network health state is broken.");  }  try (InternalSiteServiceClient client=createInternalSiteServiceClient(standby)){    commonPrecheck();    client.setCoordinatorClient(coordinator);    client.setKeyGenerator(apiSignatureGenerator);    client.resumePrecheck();  } catch (  APIException e) {    throw e;  }catch (  Exception e) {    throw APIException.internalServerErrors.resumeStandbyPrecheckFailed(standby.getName(),e.getMessage());  }  SecretKey secretKey=apiSignatureGenerator.getSignatureKey(SignatureKeyType.INTERVDC_API);  InterProcessLock lock=drUtil.getDROperationLock();  long vdcTargetVersion=DrUtil.newVdcConfigVersion();  try {    coordinator.startTransaction();    for (    Site site : drUtil.listStandbySites()) {      if (site.getUuid().equals(uuid)) {        log.error("Re-init the target standby",uuid);        long dataRevision=vdcTargetVersion;        List<Site> standbySites=drUtil.listStandbySites();        SiteConfigParam configParam=prepareSiteConfigParam(standbySites,ipsecConfig.getPreSharedKey(),uuid,dataRevision,vdcTargetVersion,secretKey);        try (InternalSiteServiceClient internalSiteServiceClient=new InternalSiteServiceClient()){          internalSiteServiceClient.setCoordinatorClient(coordinator);          internalSiteServiceClient.setServer(site.getVipEndPoint());          internalSiteServiceClient.initStandby(configParam);        }         site.setState(SiteState.STANDBY_RESUMING);        coordinator.persistServiceConfiguration(site.toConfiguration());        drUtil.recordDrOperationStatus(site.getUuid(),InterState.RESUMING_STANDBY);        drUtil.updateVdcTargetVersion(uuid,SiteInfo.DR_OP_CHANGE_DATA_REVISION,vdcTargetVersion,dataRevision);      } else {        drUtil.updateVdcTargetVersion(site.getUuid(),SiteInfo.DR_OP_RESUME_STANDBY,vdcTargetVersion);      }    }    drUtil.updateVdcTargetVersion(coordinator.getSiteId(),SiteInfo.DR_OP_RESUME_STANDBY,vdcTargetVersion);    coordinator.commitTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.RESUME_STANDBY,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,standby.toBriefString());    return siteMapper.map(standby);  } catch (  Exception e) {    log.error("Error resuming site {}",uuid,e);    coordinator.discardTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.RESUME_STANDBY,AuditLogManager.AUDITLOG_FAILURE,null,standby.toBriefString());    InternalServerErrorException resumeStandbyFailedException=APIException.internalServerErrors.resumeStandbyFailed(standby.getName(),e.getMessage());    throw resumeStandbyFailedException;  } finally {    try {      lock.release();    } catch (    Exception ignore) {      log.error(String.format("Lock release failed when resuming standby site: %s",uuid));    }  }}  }
class C{  public final void flushBuffer(){  try {    this.raf.seek(this.raf.length());    this.raf.write(this.buffer,0,this.recordsize * this.buffercount);  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }  this.buffercount=0;}  }
class C{  public void dispose(){  System.out.println("dispose");}  }
class C{  public static Entity stackingViolation(IGame game,Entity entering,Coords dest,Entity transport){  return stackingViolation(game,entering,entering.getElevation(),dest,transport);}  }
class C{  private static void addFileToZip(File srcFile,ZipOutputStream zip){  byte[] buf=new byte[1024];  int len;  FileInputStream in=null;  try {    in=new FileInputStream(srcFile);    while ((len=in.read(buf)) > 0) {      zip.write(buf,0,len);    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    close(in);  }}  }
class C{  public void broadcast(Message msg){synchronized (this) {    if (mReg == null) {      return;    }    int senderWhat=msg.what;    Registration start=mReg;    Registration r=start;    do {      if (r.senderWhat >= senderWhat) {        break;      }      r=r.next;    } while (r != start);    if (r.senderWhat == senderWhat) {      Handler[] targets=r.targets;      int[] whats=r.targetWhats;      int n=targets.length;      for (int i=0; i < n; i++) {        Handler target=targets[i];        Message m=Message.obtain();        m.copyFrom(msg);        m.what=whats[i];        target.sendMessage(m);      }    }  }}  }
class C{  List<Type> attribExprs(List<JCExpression> trees,Env<AttrContext> env,Type pt){  ListBuffer<Type> ts=new ListBuffer<Type>();  for (List<JCExpression> l=trees; l.nonEmpty(); l=l.tail)   ts.append(attribExpr(l.head,env,pt));  return ts.toList();}  }
class C{  public void testPhraseRelativePositions() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  PhraseQuery q1=new PhraseQuery(t1.field(),t1.bytes(),t2.bytes());  PhraseQuery.Builder builder=new PhraseQuery.Builder();  builder.add(t1,10000);  builder.add(t2,10001);  PhraseQuery q2=builder.build();  assertSameScores(q1,q2);}  }
class C{  public static byte[] readFileToByteArray(File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toByteArray(in,file.length());  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public T remove(int idx){  int index=(idx << 1);  nvPairs.remove(index);  @SuppressWarnings("unchecked") T result=(T)nvPairs.remove(index);  return result;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:26.590 -0500",hash_original_method="ED275066D7155C9928305EEFEFCB430D",hash_generated_method="ED275066D7155C9928305EEFEFCB430D") ZygoteStartFailedEx(){}  }
class C{  private static String convertToQuotedString(String s){  if (s == null || s.isEmpty()) {    return null;  }  if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"') {    return s;  }  return '\"' + s + '\"';}  }
class C{  public void put(long key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=idealLongArraySize(mSize + 1);      long[] nkeys=new long[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public Product process(Product product){  long allStart=System.currentTimeMillis();  LOGGER.info("* Ingestion started.");  long start=System.currentTimeMillis();  LOGGER.info(" - Product transfer started");  URL transferPath=transfer(product.getOrigin(),product.getPath().toString());  if (transferPath != null) {    product.setPath(transferPath);    productDao.update(product);  }  LOGGER.info(" - Product transfer done in " + (System.currentTimeMillis() - start) + "ms.");  start=System.currentTimeMillis();  LOGGER.info(" - Product information extraction started");  URL productPath=product.getPath();  File productFile=new File(productPath.getPath());  DrbNode productNode=ProcessingUtils.getNodeFromPath(productPath.getPath());  DrbCortexItemClass productClass;  try {    productClass=ProcessingUtils.getClassFromNode(productNode);  } catch (  IOException e) {    throw new UnsupportedOperationException("Cannot compute item class.",e);  }  if (!productFile.exists())   throw new UnsupportedOperationException("File not found (" + productFile.getPath() + ").");  product.setSize(size(productFile));  product.setItemClass(productClass.getOntClass().getURI());  String identifier=extractIdentifier(productNode,productClass);  if (identifier != null) {    LOGGER.debug("Found product identifier " + identifier);    product.setIdentifier(identifier);  } else {    LOGGER.warn("No defined identifier - using filename");    product.setIdentifier(productFile.getName());  }  LOGGER.info(" - Product information extraction done in " + (System.currentTimeMillis() - start) + "ms.");  start=System.currentTimeMillis();  LOGGER.info(" - Product images extraction started");  product=extractImages(productNode,product);  LOGGER.info(" - Product images extraction done in " + (System.currentTimeMillis() - start) + "ms.");  start=System.currentTimeMillis();  LOGGER.info(" - Product downloadable file creation started");  product=generateDownloadFile(product);  LOGGER.info(" - Product downloadable file creation done in " + (System.currentTimeMillis() - start) + "ms.");  start=System.currentTimeMillis();  LOGGER.info(" - Product indexes and footprint extraction started");  List<MetadataIndex> indexes=extractIndexes(productNode,productClass);  SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");  indexes.add(new MetadataIndex("Identifier",null,"",PROPERTY_IDENTIFIER,product.getIdentifier()));  if (indexes == null || indexes.isEmpty()) {    LOGGER.warn("No index processed for product " + product.getPath());  } else {    product.setIndexes(indexes);    boolean jtsValid=false;    Iterator<MetadataIndex> iterator=indexes.iterator();    while (iterator.hasNext()) {      MetadataIndex index=iterator.next();      if (index.getName().equalsIgnoreCase("Sensing start")) {        try {          product.setContentStart(df.parse(index.getValue()));        } catch (        ParseException e) {          LOGGER.warn("Cannot set correctly product 'content start' " + "from indexes",e);        }      }      if (index.getName().equalsIgnoreCase("Sensing stop")) {        try {          product.setContentEnd(df.parse(index.getValue()));        } catch (        ParseException e) {          LOGGER.warn("Cannot set correctly product 'content end' " + "from indexes",e);        }      }      if (index.getName().equalsIgnoreCase("footprint")) {        String gml_footprint=index.getValue();        if ((gml_footprint != null) && checkGMLFootprint(gml_footprint)) {          product.setFootPrint(gml_footprint);        } else {          LOGGER.error("Incorrect on empty footprint for product " + product.getPath());        }      }      if (index.getName().equalsIgnoreCase("jts footprint")) {        String jts_footprint=index.getValue();        jtsValid=checkJTSFootprint(jts_footprint);        if (jts_footprint != null && !jtsValid) {          iterator.remove();        }      }    }    if (!jtsValid) {      LOGGER.error("JTS footprint not existing or not valid, " + "removing GML footprint on " + product.getPath());      product.setFootPrint(null);    }  }  Date ingestionDate=new Date();  indexes.add(new MetadataIndex("Ingestion Date",null,"product",PROPERTY_INGESTIONDATE,df.format(ingestionDate)));  product.setIngestionDate(ingestionDate);  LOGGER.info(" - Product indexes and footprint extraction done in " + (System.currentTimeMillis() - start) + "ms.");  product.setUpdated(new Date());  product.setProcessed(true);  LOGGER.info("* Ingestion done in " + (System.currentTimeMillis() - allStart) + "ms.");  return product;}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public SignalServiceAccountManager(String url,TrustStore trustStore,String user,String password,String userAgent){  this.pushServiceSocket=new PushServiceSocket(url,trustStore,new StaticCredentialsProvider(user,password,null),userAgent);  this.user=user;  this.userAgent=userAgent;}  }
class C{  public void destroyGracefully(boolean softKill){  RunnerMediator.destroyProcess(this,softKill);}  }
class C{  public CtClass makeClass(ClassFile classfile,boolean ifNotFrozen) throws RuntimeException {  compress();  CtClass clazz=new CtClassType(classfile,this);  clazz.checkModify();  String classname=clazz.getName();  if (ifNotFrozen)   checkNotFrozen(classname);  cacheCtClass(classname,clazz,true);  return clazz;}  }
class C{  public boolean isNullable(){  return nullable;}  }
class C{  public DataSource createXtremIOInitiatorGroupNameDataSource(String hostName,StorageSystem storageSystem){  Host host=getHostByName(hostName);  return createDataSource(CustomConfigConstants.XTREMIO_INITIATOR_GROUP_NAME,new DataObject[]{host,storageSystem});}  }
class C{  public NotificationChain basicSetEffect(Effect newEffect,NotificationChain msgs){  Effect oldEffect=effect;  effect=newEffect;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SGraphPackage.TRANSITION__EFFECT,oldEffect,newEffect);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static STRUCT toSTRUCT(Datum[] attributes,String dataType,OracleConnection connection) throws SQLException {  if (dataType.startsWith("*.")) {    dataType="DRA." + dataType.substring(2);  }  StructDescriptor descriptor=StructDescriptor.createDescriptor(dataType,connection);  return new STRUCT(descriptor,connection,attributes);}  }
class C{  private void initializeAuth() throws ExternalException {  if (this.tokenHandler == null) {synchronized (this) {      if (this.tokenHandler == null) {        try {          this.tokenHandler=new AuthOIDCClient(authServerAddress,authServerPort,tenant).getTokenHandler();        } catch (        AuthException ex) {          throw new ExternalException(ErrorCode.AUTH_INITIALIZATION_FAILURE,"AuthTokenHandler initialization failed",null,ex);        }      }    }  }}  }
class C{  public boolean pointInZone(Id<ActivityFacility> zoneID,Point point){  SimpleFeature feature=this.featureMap.get(zoneID);  boolean withinZoneGeometry=((Geometry)feature.getDefaultGeometry()).contains(point);  return withinZoneGeometry;}  }
class C{  @Override public void generateAtom(XmlWriter w,String elementName) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(2);  attrs.add(new XmlWriter.Attribute("type","html"));  if (lang != null) {    attrs.add(new XmlWriter.Attribute("xml:lang",lang));  }  w.simpleElement(Namespaces.atomNs,elementName,attrs,html);}  }
class C{  private void validateBackendVolumeVpool(UnManagedVolume backendVolume,VirtualPool vpool){  URI storagePoolUri=backendVolume.getStoragePoolUri();  if (vpool.getMatchedStoragePools() == null || !vpool.getMatchedStoragePools().contains(storagePoolUri.toString())) {    String reason="virtual pool " + vpool.getLabel() + " does not contain the backend volume's storage pool URI "+ storagePoolUri;    _logger.error(reason);    throw IngestionException.exceptions.validationException(reason);  }}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(RPCLASS_NAME);  rpclass.add(DefinitionClass.ATTRIBUTE,AMOUNT,Type.INT);}  }
class C{  private void open(Intent _intent){  mContext.startActivity(_intent);}  }
class C{  public TOMMessage(int sender,int session,int sequence,int operationId,byte[] content,int view,TOMMessageType type){  super(sender);  this.session=session;  this.sequence=sequence;  this.operationId=operationId;  this.viewID=view;  buildId();  this.content=content;  this.type=type;}  }
class C{  public CoapResponseWorker(String name,Request coapRequest,HttpAsyncExchange httpExchange,HttpRequest httpRequest,Thread responseWorker){  super(name);  this.coapRequest=coapRequest;  this.httpExchange=httpExchange;  this.httpRequest=httpRequest;  this.responseWorker=responseWorker;}  }
class C{  protected synchronized void createDbIfNotExists(){  if (mOpenHelper == null) {    mOpenHelper=new DatabaseHelper(getContext());  }}  }
class C{  public int search(int o){  int i=lastIndexOf(o);  if (i >= 0) {    return size() - i;  }  return -1;}  }
class C{  public boolean isLastInvoice(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_LastInvoice) && COSTELEMENTTYPE_Material.equals(getCostElementType());}  }
class C{  public FakeClock incrementTime(long durationMs){  fakeNowMs.addAndGet(durationMs);  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static byte[] decrypt(byte[] encryptedByteData,char[] password,byte[] salt) throws EncryptionException {  byte[] saltBytes=new byte[IEncryptionService.CRYPTO_SALT_DEFAULT_LENGTH];  System.arraycopy(encryptedByteData,0,saltBytes,0,IEncryptionService.CRYPTO_SALT_DEFAULT_LENGTH);  byte[] cypherText=new byte[encryptedByteData.length - IEncryptionService.CRYPTO_SALT_DEFAULT_LENGTH];  System.arraycopy(encryptedByteData,IEncryptionService.CRYPTO_SALT_DEFAULT_LENGTH,cypherText,0,encryptedByteData.length - IEncryptionService.CRYPTO_SALT_DEFAULT_LENGTH);  return decryptData(password,salt,cypherText);}  }
class C{  public boolean isFileTransferStoreForwardSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_FILE_TRANSFER_SF);}  }
class C{  public Map<Installment,Map<String,BigDecimal>> populateTaxesForVoucherCreation(final Property property){  LOGGER.debug("Entered into populateTaxesForVoucherCreation, property: " + property);  Map<Installment,Map<String,BigDecimal>> amounts=new HashMap<Installment,Map<String,BigDecimal>>();  if (instTaxMap != null) {  } else   amounts=prepareRsnWiseDemandForOldProp(property);  LOGGER.debug("amounts: " + amounts + "\nExiting from populateTaxesForVoucherCreation");  return amounts;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(16,8);  childData=child.getData();  assertEquals("characterdataDeleteDataMiddleAssert","1230 North Ave. Texas 98551",childData);}  }
class C{  public Object clone(){  IVector2D clone=null;  try {    clone=(IVector2D)super.clone();  } catch (  Exception e) {    System.err.println("Error cloning " + getClass().getName() + ":");    e.printStackTrace();    System.exit(1);  }  clone.vector=(int[][])vector.clone();  for (int i=0; i < vector.length; ++i)   if (clone.vector[i] != null)   clone.vector[i]=(int[])vector[i].clone();  return clone;}  }
class C{  public void start(){  stunStack=new StunStack();}  }
class C{  protected void parseFromInternal(String setup){  String[] parts=setup.split(MATCH_PART_SEPARATOR);  if (parts.length < 4 || parts.length > 5) {    throw new IllegalArgumentException("Malformed match definition: " + setup);  }  m_attsToApplyTo=parts[0].trim();  m_regex=parts[1].trim().toLowerCase().equals("t");  m_ignoreCase=parts[2].trim().toLowerCase().equals("t");  m_match=parts[3].trim();  if (m_match == null || m_match.length() == 0) {    throw new IllegalArgumentException("Must provide something to match!");  }  if (parts.length == 5) {    m_label=parts[4].trim();  }}  }
class C{  public static String regexEscape(String s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if ("()|*+?.{}[]$^\\".indexOf(c) != -1) {      sb.append('\\');      sb.append(c);    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public static void waitFor(SystemProcess process,long timeout,TimeUnit unit) throws InterruptedException, TimeoutException {  log.info("Waiting for {} to finish.",process);  waitFor(process,Stopwatch.createStarted(),timeout,unit,"{} finished","%s did not finish");}  }
class C{  public void runLargeDownloadOverWiFi() throws Exception {  String filename=DOWNLOAD_10MB_FILENAME;  long filesize=DOWNLOAD_10MB_FILESIZE;  long dlRequest=-1;  doCommonDownloadSetup();  removeAllCurrentDownloads();  Uri remoteUri=getExternalFileUri(filename);  Request request=new Request(remoteUri);  request.setMimeType("application/vnd.android.package-archive");  dlRequest=mDownloadManager.enqueue(request);  waitForDownloadOrTimeout(dlRequest,WAIT_FOR_DOWNLOAD_POLL_TIME,15 * 60 * 1000);  Cursor cursor=getCursor(dlRequest);  ParcelFileDescriptor pfd=null;  try {    Log.i(LOG_TAG,"Verifying download information...");    pfd=mDownloadManager.openDownloadedFile(dlRequest);    verifyFileSize(pfd,filesize);  }  finally {    if (pfd != null) {      pfd.close();    }    mDownloadManager.remove(dlRequest);    cursor.close();  }}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.184 -0400",hash_original_method="CDEDFD984A6FD029B231EAE10904EA53",hash_generated_method="B6F4D3A3400E51E5FDCD4E8E778C2311") public static void writeStringToFile(File file,String data) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),false);}  }
class C{  public boolean isDiscontiguous(){  return type == REQUEST_DISCONTIGUOUS;}  }
class C{  public static void assertVector2fEquals(Vector2f expected,Vector2f actual,float delta){  Assert.assertEquals(expected.x,actual.x,delta);  Assert.assertEquals(expected.y,actual.y,delta);}  }
class C{  public static float bias(float a,float b){  return a / ((1.0f / b - 2) * (1.0f - a) + 1);}  }
class C{  private JCExpression makeMetafactoryIndyCall(TranslationContext<?> context,int refKind,Symbol refSym,List<JCExpression> indy_args){  JCFunctionalExpression tree=context.tree;  MethodSymbol samSym=(MethodSymbol)types.findDescriptorSymbol(tree.type.tsym);  List<Object> staticArgs=List.<Object>of(typeToMethodType(samSym.type),new Pool.MethodHandle(refKind,refSym,types),typeToMethodType(tree.getDescriptorType(types)));  ListBuffer<Type> indy_args_types=new ListBuffer<>();  for (  JCExpression arg : indy_args) {    indy_args_types.append(arg.type);  }  MethodType indyType=new MethodType(indy_args_types.toList(),tree.type,List.<Type>nil(),syms.methodClass);  Name metafactoryName=context.needsAltMetafactory() ? names.altMetafactory : names.metafactory;  if (context.needsAltMetafactory()) {    ListBuffer<Object> markers=new ListBuffer<>();    for (    Type t : tree.targets.tail) {      if (t.tsym != syms.serializableType.tsym) {        markers.append(t.tsym);      }    }    int flags=context.isSerializable() ? FLAG_SERIALIZABLE : 0;    boolean hasMarkers=markers.nonEmpty();    boolean hasBridges=context.bridges.nonEmpty();    if (hasMarkers) {      flags|=FLAG_MARKERS;    }    if (hasBridges) {      flags|=FLAG_BRIDGES;    }    staticArgs=staticArgs.append(flags);    if (hasMarkers) {      staticArgs=staticArgs.append(markers.length());      staticArgs=staticArgs.appendList(markers.toList());    }    if (hasBridges) {      staticArgs=staticArgs.append(context.bridges.length() - 1);      for (      Symbol s : context.bridges) {        Type s_erasure=s.erasure(types);        if (!types.isSameType(s_erasure,samSym.erasure(types))) {          staticArgs=staticArgs.append(s.erasure(types));        }      }    }    if (context.isSerializable()) {      int prevPos=make.pos;      try {        make.at(kInfo.clazz);        addDeserializationCase(refKind,refSym,tree.type,samSym,tree,staticArgs,indyType);      }  finally {        make.at(prevPos);      }    }  }  return makeIndyCall(tree,syms.lambdaMetafactory,metafactoryName,staticArgs,indyType,indy_args,samSym.name);}  }
class C{  public int hashCode(){  return ((table.hashCode() ^ attribute.hashCode()) ^ value.hashCode());}  }
class C{  public SaaSApplicationException(Object[] params){  super();  init(params);}  }
class C{  @JsonCreator public static Location create(@JsonProperty("rack") final String rack,@JsonProperty("data_center") final String dataCenter){  return new Location(rack,dataCenter);}  }
class C{  public Value evaluate(Like node,BindingSet bindings) throws ValueExprEvaluationException, QueryEvaluationException {  Value val=evaluate(node.getArg(),bindings);  String strVal=null;  if (val instanceof IRI) {    strVal=((IRI)val).toString();  } else   if (val instanceof Literal) {    strVal=((Literal)val).getLabel();  }  if (strVal == null) {    throw new ValueExprEvaluationException();  }  if (!node.isCaseSensitive()) {    strVal=strVal.toLowerCase();  }  int valIndex=0;  int prevPatternIndex=-1;  int patternIndex=node.getOpPattern().indexOf('*');  if (patternIndex == -1) {    return BooleanLiteral.valueOf(node.getOpPattern().equals(strVal));  }  String snippet;  if (patternIndex > 0) {    snippet=node.getOpPattern().substring(0,patternIndex);    if (!strVal.startsWith(snippet)) {      return BooleanLiteral.FALSE;    }    valIndex+=snippet.length();    prevPatternIndex=patternIndex;    patternIndex=node.getOpPattern().indexOf('*',patternIndex + 1);  }  while (patternIndex != -1) {    snippet=node.getOpPattern().substring(prevPatternIndex + 1,patternIndex);    valIndex=strVal.indexOf(snippet,valIndex);    if (valIndex == -1) {      return BooleanLiteral.FALSE;    }    valIndex+=snippet.length();    prevPatternIndex=patternIndex;    patternIndex=node.getOpPattern().indexOf('*',patternIndex + 1);  }  snippet=node.getOpPattern().substring(prevPatternIndex + 1);  if (snippet.length() > 0) {    valIndex=strVal.indexOf(snippet,valIndex);    int i;    while ((i=strVal.indexOf(snippet,valIndex + 1)) != -1) {      valIndex=i;    }    if (valIndex == -1) {      return BooleanLiteral.FALSE;    }    valIndex+=snippet.length();    if (valIndex < strVal.length()) {      return BooleanLiteral.FALSE;    }  }  return BooleanLiteral.TRUE;}  }
class C{  public boolean isHorizontal(){  return getLayout() instanceof BoxLayout && ((BoxLayout)getLayout()).getAxis() == BoxLayout.X_AXIS;}  }
class C{  public boolean hasKey(ECKey key){  lock.lock();  try {    return keychain.contains(key);  }  finally {    lock.unlock();  }}  }
class C{  public static MimeType fromFile(final File file){  final String fileName=file.getName();  final MimeType mimeType=fromFileName(fileName);  return mimeType;}  }
class C{  public boolean isForcePersistence(){  return forcePersistence;}  }
class C{  public CharBuffer append(float f){  return append(String.valueOf(f));}  }
class C{  public void testBug61203() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  Connection rootConn=null;  Connection userConn=null;  CallableStatement cStmt=null;  try {    Properties props=new NonRegisteringDriver().parseURL(dbUrl,null);    String dbname=props.getProperty(NonRegisteringDriver.DBNAME_PROPERTY_KEY);    if (dbname == null) {      assertTrue("No database selected",false);    }    createUser("'bug61203user'@'%'","identified by 'foo'");    this.stmt.executeUpdate("delete from mysql.db where user='bug61203user'");    this.stmt.executeUpdate("insert into mysql.db (Host, Db, User, Select_priv, Insert_priv, Update_priv, Delete_priv, Create_priv,Drop_priv, " + "Grant_priv, References_priv, Index_priv, Alter_priv, Create_tmp_table_priv, Lock_tables_priv, Create_view_priv," + "Show_view_priv, Create_routine_priv, Alter_routine_priv, Execute_priv, Event_priv, Trigger_priv) VALUES ('%', '" + dbname + "', 'bug61203user', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'N')");    this.stmt.executeUpdate("insert into mysql.db (Host, Db, User, Select_priv, Insert_priv, Update_priv, Delete_priv, Create_priv,Drop_priv, " + "Grant_priv, References_priv, Index_priv, Alter_priv, Create_tmp_table_priv, Lock_tables_priv, Create_view_priv," + "Show_view_priv, Create_routine_priv, Alter_routine_priv, Execute_priv, Event_priv, Trigger_priv) VALUES "+ "('%', 'information\\_schema', 'bug61203user', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', "+ "'Y', 'N', 'N')");    this.stmt.executeUpdate("flush privileges");    this.stmt.executeUpdate("DROP FUNCTION IF EXISTS testbug61203fn;");    this.stmt.executeUpdate("CREATE DEFINER='bug61203user'@'%' FUNCTION testbug61203fn(a float) RETURNS INT NO SQL BEGIN RETURN a; END");    this.stmt.executeUpdate("DROP PROCEDURE IF EXISTS testbug61203pr;");    this.stmt.executeUpdate("CREATE DEFINER='bug61203user'@'%' PROCEDURE testbug61203pr(INOUT a float, b bigint, c int) " + "NO SQL BEGIN SET @a = b + c; END");    testBug61203checks(rootConn,userConn);    this.stmt.executeUpdate("DROP FUNCTION IF EXISTS testbug61203fn;");    this.stmt.executeUpdate("DROP PROCEDURE IF EXISTS testbug61203pr;");    createFunction("testbug61203fn","(a float) RETURNS INT NO SQL BEGIN RETURN a; END");    createProcedure("testbug61203pr","(INOUT a float, b bigint, c int) NO SQL BEGIN SET @a = b + c; END");    testBug61203checks(rootConn,userConn);  }  finally {    dropFunction("testbug61203fn");    dropProcedure("testbug61203pr");    if (cStmt != null) {      cStmt.close();    }    if (rootConn != null) {      rootConn.close();    }    if (userConn != null) {      userConn.close();    }  }}  }
class C{  public byte readByte(){  return readByteArray()[0];}  }
class C{  public NTRUEncryptionPrivateKeyParameters(InputStream is,NTRUEncryptionParameters params) throws IOException {  super(true,params);  if (params.polyType == NTRUParameters.TERNARY_POLYNOMIAL_TYPE_PRODUCT) {    int N=params.N;    int df1=params.df1;    int df2=params.df2;    int df3Ones=params.df3;    int df3NegOnes=params.fastFp ? params.df3 : params.df3 - 1;    h=IntegerPolynomial.fromBinary(is,params.N,params.q);    t=ProductFormPolynomial.fromBinary(is,N,df1,df2,df3Ones,df3NegOnes);  } else {    h=IntegerPolynomial.fromBinary(is,params.N,params.q);    IntegerPolynomial fInt=IntegerPolynomial.fromBinary3Tight(is,params.N);    t=params.sparse ? new SparseTernaryPolynomial(fInt) : new DenseTernaryPolynomial(fInt);  }  init();}  }
class C{  public int[] toArray(){  return permutation.clone();}  }
class C{  public static String xhtmlToDiff(String xhtml,int width,int height) throws Exception {  Document doc=XMLUtil.documentFromFile(xhtml);  Graphics2DRenderer renderer=new Graphics2DRenderer();  renderer.setDocument(doc,new File(xhtml).toURL().toString());  BufferedImage buff=new BufferedImage(width,height,BufferedImage.TYPE_4BYTE_ABGR);  Graphics2D g=(Graphics2D)buff.getGraphics();  Dimension dim=new Dimension(width,height);  renderer.layout(g,dim);  renderer.render(g);  StringBuffer sb=new StringBuffer();  getDiff(sb,renderer.getPanel().getRootBox(),"");  return sb.toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private String createTimeUUID(long timestamp,long leastSigBits){  long mostSigBits;  long timeToUse=(timestamp * 10000) + 0x01B21DD213814000L;  mostSigBits=timeToUse << 32;  mostSigBits|=(timeToUse & 0xFFFF00000000L) >> 16;  mostSigBits|=0x1000 | ((timeToUse >> 48) & 0x0FFF);  return new UUID(mostSigBits,leastSigBits).toString();}  }
class C{  private void notifyContentChanged(final Uri uri,int uriMatch){  Long downloadId=null;  if (uriMatch == MY_DOWNLOADS_ID || uriMatch == ALL_DOWNLOADS_ID) {    downloadId=Long.parseLong(getDownloadIdFromUri(uri));  }  for (  Uri uriToNotify : baseUris) {    if (downloadId != null) {      uriToNotify=ContentUris.withAppendedId(uriToNotify,downloadId);    }    getContext().getContentResolver().notifyChange(uriToNotify,null);  }}  }
class C{  private void fireInvitationListeners(String room,String inviter,String reason,String password,Message message){  InvitationListener[] listeners;synchronized (invitationsListeners) {    listeners=new InvitationListener[invitationsListeners.size()];    invitationsListeners.toArray(listeners);  }  for (  InvitationListener listener : listeners) {    listener.invitationReceived(connection,room,inviter,reason,password,message);  }}  }
class C{  private Method resolveMethodOverloading(String owner,String name,String methDesc){  Method method=null;  final Deque<Class<?>> interfaces=new LinkedList<Class<?>>();  Class<?> claz=env.ensurePrepared(owner);  Class<?>[] argTypes=getArgumentClasses(methDesc);  while ((method == null) && (claz != null)) {    Class<?>[] ifaces=claz.getInterfaces();    for (    Class<?> iface : ifaces)     interfaces.add(iface);    try {      method=claz.getDeclaredMethod(name,argTypes);    } catch (    NoSuchMethodException nsme) {      claz=claz.getSuperclass();    }    if (claz == null && !interfaces.isEmpty())     claz=interfaces.pop();  }  if (method == null)   throw new IllegalArgumentException("Failed to resolve " + owner + "."+ name);  return method;}  }
class C{  private RhinoScriptBuilder initScriptBuilder(){  try {    RhinoScriptBuilder builder=null;    if (scope == null) {      builder=RhinoScriptBuilder.newClientSideAwareChain().addJSON().evaluateChain(getScriptAsStream(),"cjson.js");      scope=builder.getScope();    } else {      builder=RhinoScriptBuilder.newChain(scope);    }    return builder;  } catch (  final Exception e) {    LOG.error("Processing error:" + e.getMessage(),e);    throw new WroRuntimeException("Processing error",e);  }}  }
class C{  private static boolean CheckForConflictingSpecOptions(){  if ((PcalParams.SpecOption ? 1 : 0) + (PcalParams.MyspecOption ? 1 : 0) + (PcalParams.Spec2Option ? 1 : 0)+ (PcalParams.Myspec2Option ? 1 : 0)+ (PcalParams.WriteASTFlag ? 1 : 0) > 1) {    CommandLineError("\nCan have at most one of the options " + "-spec, -myspec, -spec2, -myspec2, writeAST");    return true;  }  ;  return false;}  }
class C{  public MultiChoice(final Composite parent,final int style){  this(parent,style,null);}  }
class C{  private static boolean matchIntlPrefixAndCC(String a,int len){  int state=0;  for (int i=0; i < len; i++) {    char c=a.charAt(i);switch (state) {case 0:      if (c == '+')       state=1; else       if (c == '0')       state=2; else       if (isNonSeparator(c))       return false;    break;case 2:  if (c == '0')   state=3; else   if (c == '1')   state=4; else   if (isNonSeparator(c))   return false;break;case 4:if (c == '1') state=5; else if (isNonSeparator(c)) return false;break;case 1:case 3:case 5:if (isISODigit(c)) state=6; else if (isNonSeparator(c)) return false;break;case 6:case 7:if (isISODigit(c)) state++; else if (isNonSeparator(c)) return false;break;default :if (isNonSeparator(c)) return false;}}return state == 6 || state == 7 || state == 8;}  }
class C{  @Override public void print(char c) throws IOException {  boolean isWS=Character.isWhitespace(c);  if (isWS) {    if (isFirstChar)     return;    if (c == CHAR_RETURN)     return;    if (sb.length() > 0) {      printBuffer();      lastChar=(c == CHAR_NL) ? CHAR_NL : c;      super.print(lastChar);      return;    }  }  isFirstChar=false;  if (c == CHAR_GT && sb.length() > 0)   printBuffer();  if (isWS || !addToBuffer(c)) {    if (depthSum == 0) {      if (isWS) {        if (lastChar == CHAR_NL)         return;        if (c != CHAR_NL) {          if (Character.isWhitespace(lastChar))           return;        }      }    }    lastChar=c;    super.print(c);  }}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader;  String pointerHeader;  String outputFileName;  int row, col, x, y;  double xCoord, yCoord;  int progress;  int c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag;  double flowDir;  double previousFlowDir;  double linkLength;  double streamValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  streamsHeader=args[0];  pointerHeader=args[1];  outputFileName=args[2];  if ((streamsHeader == null) || (pointerHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    double gridResX=streams.getCellSizeX();    double gridResY=streams.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double east=streams.getEast() - gridResX / 2.0;    double west=streams.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=streams.getNorth() - gridResY / 2.0;    double south=streams.getSouth() + gridResY / 2.0;    double NSRange=north - south;    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("STRM_VAL");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    fields[2]=new DBFField();    fields[2].setName("Length");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(3);    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POLYLINE,fields);    byte numNeighbouringStreamCells;    int FID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        streamValue=streams.getValue(row,col);        if (streamValue > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells != 1) {            FID++;            linkLength=0;            int[] parts={0};            PointsList points=new PointsList();            x=col;            y=row;            previousFlowDir=-99;            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                if (flowDir != previousFlowDir) {                  xCoord=west + ((double)x / cols) * EWRange;                  yCoord=north - ((double)y / rows) * NSRange;                  points.addPoint(xCoord,yCoord);                  previousFlowDir=flowDir;                }                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                linkLength+=gridLengths[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells > 1) {                    flag=false;                  }                }              } else {                flag=false;              }              if (!flag) {                xCoord=west + ((double)x / cols) * EWRange;                yCoord=north - ((double)y / rows) * NSRange;                points.addPoint(xCoord,yCoord);              }            } while (flag);            PolyLine line=new PolyLine(parts,points.getPointsArray());            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(streamValue);            rowData[2]=new Double(linkLength / 1000.0);            output.addRecord(line,rowData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.write();    pntr.close();    streams.close();    returnData(outputFileName);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private EigenvalueDecomposition eig(DoubleMatrix2D matrix){  return new EigenvalueDecomposition(matrix);}  }
class C{  public long timeout(){  return timeoutMs;}  }
class C{  public void assertReflectionRepeatedSettersRejectNull(Message.Builder builder) throws Exception {  builder.addRepeatedField(f("repeated_string"),"one");  try {    builder.setRepeatedField(f("repeated_string"),0,null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  builder.addRepeatedField(f("repeated_bytes"),toBytes("one"));  try {    builder.setRepeatedField(f("repeated_bytes"),0,null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  builder.addRepeatedField(f("repeated_nested_enum"),nestedBaz);  try {    builder.setRepeatedField(f("repeated_nested_enum"),0,null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  builder.addRepeatedField(f("repeated_nested_message"),TestAllTypes.NestedMessage.newBuilder().setBb(218).build());  try {    builder.setRepeatedField(f("repeated_nested_message"),0,null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (documentHandler != null)   documentHandler.characters(ch,start,length);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.984 -0400",hash_original_method="D3512EAF0EBFD0769AB6296F9B118176",hash_generated_method="D98A5D385C30A54F80AAD2ECE392572E") private void doMatch(FileEntry entry,File file){  if (entry.refresh(file)) {    for (    FileAlterationListener listener : listeners) {      if (entry.isDirectory()) {        listener.onDirectoryChange(file);      } else {        listener.onFileChange(file);      }    }  }}  }
class C{  @Override public void profileCreated(Profile profile){  if (profile instanceof GatewaySenderProfile) {    GatewaySenderProfile sp=(GatewaySenderProfile)profile;    checkCompatibility(sp);  }}  }
class C{  @Timed @ExceptionMetered @GET @Path("{name}/secrets") @Produces(APPLICATION_JSON) public Iterable<String> clientSecretsListing(@Auth AutomationClient automationClient,@PathParam("name") String name){  Client client=clientDAO.getClient(name).orElseThrow(null);  return aclDAO.getSanitizedSecretsFor(client).stream().map(null).collect(toSet());}  }
class C{  public <T>T giveBlack(TypeTag tag){  return this.<T>giveTuple(tag).getBlack();}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  public static boolean isFileExtExist(String fileExt,int regLevel){  String fileExtKey=getFileExtKey(fileExt,regLevel);  if (fileExtKey != null) {    return (isSubKeyExist(fileExtKey,regLevel) || isWin2kUserDefinedFileExtExist(fileExt));  } else {    return false;  }}  }
class C{  public static byte[] readByteArray(ByteBuffer... bufs){  assert !F.isEmpty(bufs);  int size=0;  for (  ByteBuffer buf : bufs)   size+=buf.remaining();  byte[] res=new byte[size];  int off=0;  for (  ByteBuffer buf : bufs) {    int len=buf.remaining();    if (len != 0) {      buf.get(res,off,len);      off+=len;    }  }  assert off == res.length;  return res;}  }
class C{  public static JPanel stackIn(JPanel container,String edge,JComponent... components){  JPanel inner=container;  for (  JComponent component : components) {    final JPanel newInner=new JPanel(new BorderLayout());    newInner.add(component,edge);    inner.add(newInner,BorderLayout.CENTER);    inner=newInner;  }  return container;}  }
class C{  private static void usage(){  System.out.printf("Usage: ReadFIFOTest connection unit fifo [repeat]");  System.exit(1);}  }
class C{  @Override public boolean equals(int id){  return id == mIdentifier;}  }
class C{  @Override public final void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("USAX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"USAX");    translateAll(environment,instruction,"USAX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"USUBADDX");    translateAll(environment,instruction,"USUBADDX",instructions);  }}  }
class C{  public void propertyChange(PropertyChangeEvent pce){  Object source=pce.getSource();  if (source instanceof DrawingAttributes && currentEditable != null) {    graphicAttributes.setTo(currentEditable.getGraphic());    if (projection != null) {      currentEditable.regenerate(projection);    }    if (canvas != null) {      canvas.repaint();    }  } else   if (source.equals(mouseDelegator)) {    Object oldValue=pce.getOldValue();    if (this.equals(oldValue)) {      deactivate();    }  }}  }
class C{  public int map(RandomAccessFile file,long offset,int addr,int len,boolean read,boolean write,boolean exec) throws MemoryMapException {  if ((addr % PAGE_SIZE) != 0) {    MemoryMapException.unalignedAddress(addr);  }  int num_pages=(len + PAGE_SIZE - 1) / PAGE_SIZE;  if (addr == 0) {    addr=findFreePages(num_pages);  }  if (logMemoryMessages) {    System.out.println("Mapping file " + file + " offset="+ offset+ " addr=0x"+ Integer.toHexString(addr)+ " len="+ len+ (read ? " r" : " -")+ (write ? "w" : "-")+ (exec ? "x" : "-"));  }  try {    int pte=getPTE(addr);    if (!HAVE_java_nio_FileChannelImpl_nio_mmap_file) {      file.seek(offset);      for (int i=0; i < num_pages; i++) {        if (getPage(pte + i) != null) {          throw new Error("Memory map of already mapped location addr=0x" + Integer.toHexString(addr) + " len="+ len);        }        byte page[]=new byte[PAGE_SIZE];        if (i == 0) {          file.read(page,getOffset(addr),PAGE_SIZE - getOffset(addr));        } else         if (i == (num_pages - 1)) {          file.read(page,0,((len - getOffset(addr)) % PAGE_SIZE));        } else {          file.read(page);        }        readableMemory[pte + i]=read ? page : new byte[0];        writableMemory[pte + i]=write ? page : new byte[0];        executableMemory[pte + i]=exec ? page : new byte[0];      }    } else {      for (int i=0; i < num_pages; i++) {        if (getPage(pte + i) != null) {          throw new Error("Memory map of already mapped location addr=0x" + Integer.toHexString(addr) + " len="+ len);        }        if (read && write) {          readableMemory[pte + i]=file.getChannel().map(FileChannel.MapMode.READ_WRITE,offset + (i * PAGE_SIZE),PAGE_SIZE).array();          writableMemory[pte + i]=readableMemory[pte + i];          if (exec) {            executableMemory[pte + i]=readableMemory[pte + i];          }        } else         if (read) {          readableMemory[pte + i]=file.getChannel().map(FileChannel.MapMode.READ_ONLY,offset + (i * PAGE_SIZE),PAGE_SIZE).array();          if (exec) {            executableMemory[pte + i]=readableMemory[pte + i];          }        } else         if (exec) {          executableMemory[pte + i]=file.getChannel().map(FileChannel.MapMode.READ_ONLY,offset + (i * PAGE_SIZE),PAGE_SIZE).array();        } else {          throw new Error("Unable to map address 0x" + Integer.toHexString(addr) + " with permissions "+ (read ? "r" : "-")+ (write ? "w" : "-")+ (exec ? "x" : "-"));        }      }    }    return addr;  } catch (  IOException e) {    throw new Error(e);  }}  }
class C{  @Nullable public static synchronized PlatformProcessor instance(@Nullable String gridName){  return instances.get(gridName);}  }
class C{  BeginWordAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public static List<TechnicalProduct> createTestData(DataService dm,Organization org,int totalNumber) throws NonUniqueBusinessKeyException {  List<TechnicalProduct> technicalProducts=new ArrayList<TechnicalProduct>();  for (int i=0; i < totalNumber; i++) {    TechnicalProduct tProd=findTechnicalProduct(dm,org,"Mass Data " + i);    if (tProd == null) {      tProd=createTechnicalProduct(dm,org,"Mass Data " + i,false,ServiceAccessType.LOGIN);      RoleDefinition roleDef1=TechnicalProducts.addRoleDefinition("Role1",tProd,dm);      LocalizedResources.localizeRoleDefinition(dm,roleDef1.getKey());      RoleDefinition roleDef2=TechnicalProducts.addRoleDefinition("Role2",tProd,dm);      LocalizedResources.localizeRoleDefinition(dm,roleDef2.getKey());      Event event1=TechnicalProducts.addEvent("Event1",EventType.SERVICE_EVENT,tProd,dm);      LocalizedResources.localizeEvent(dm,event1.getKey());      Event event2=TechnicalProducts.addEvent("Event2",EventType.SERVICE_EVENT,tProd,dm);      LocalizedResources.localizeEvent(dm,event2.getKey());      ParameterDefinition paramDefLong=TechnicalProducts.addParameterDefinition(ParameterValueType.LONG,"ParamLong",ParameterType.SERVICE_PARAMETER,tProd,dm,Long.valueOf(500),Long.valueOf(0),true);      LocalizedResources.localizeParameterDef(dm,paramDefLong.getKey());      ParameterDefinition paramDefBool=TechnicalProducts.addParameterDefinition(ParameterValueType.BOOLEAN,"ParamBool",ParameterType.SERVICE_PARAMETER,tProd,dm,null,null,true);      LocalizedResources.localizeParameterDef(dm,paramDefBool.getKey());      ParameterDefinition paramDefString=TechnicalProducts.addParameterDefinition(ParameterValueType.STRING,"ParamString",ParameterType.SERVICE_PARAMETER,tProd,dm,null,null,true);      LocalizedResources.localizeParameterDef(dm,paramDefString.getKey());      ParameterDefinition paramDefEnum=TechnicalProducts.addParameterDefinition(ParameterValueType.ENUMERATION,"ParamEnum",ParameterType.SERVICE_PARAMETER,tProd,dm,null,null,true);      LocalizedResources.localizeParameterDef(dm,paramDefEnum.getKey());      ParameterOption opt1=TechnicalProducts.addParameterOption(paramDefEnum,"ParamOption1",dm);      LocalizedResources.localizeParameterDefOption(dm,opt1.getKey());      ParameterOption opt2=TechnicalProducts.addParameterOption(paramDefEnum,"ParamOption2",dm);      LocalizedResources.localizeParameterDefOption(dm,opt2.getKey());      ParameterDefinition paramDefInt=TechnicalProducts.addParameterDefinition(ParameterValueType.INTEGER,"ParamInt",ParameterType.SERVICE_PARAMETER,tProd,dm,null,null,true);      LocalizedResources.localizeParameterDef(dm,paramDefInt.getKey());      TechnicalProducts.addTechnicalProductOperation(dm,tProd,"operation1","http://actionhost.actionDomain/action");    }    technicalProducts.add(tProd);  }  return technicalProducts;}  }
class C{  public static Sha256Hash createDouble(byte[] contents){  return new Sha256Hash(Utils.doubleDigest(contents));}  }
class C{  public static void verifyLanguage(Properties ctx,Language language){  if (language.isBaseLanguage())   return;  boolean isSystemLanguage=false;  ArrayList<String> AD_Languages=new ArrayList<String>();  String sql="SELECT DISTINCT AD_Language FROM AD_Message_Trl";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      String AD_Language=rs.getString(1);      if (AD_Language.equals(language.getAD_Language())) {        isSystemLanguage=true;        break;      }      AD_Languages.add(AD_Language);    }  } catch (  SQLException e) {    s_log.log(Level.SEVERE,"",e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (isSystemLanguage)   return;  if (AD_Languages.size() == 0) {    s_log.warning("NO System Language - Set to Base " + Language.getBaseAD_Language());    language.setAD_Language(Language.getBaseAD_Language());    return;  }  for (int i=0; i < AD_Languages.size(); i++) {    String AD_Language=(String)AD_Languages.get(i);    String lang=AD_Language.substring(0,2);    String langCompare=language.getAD_Language().substring(0,2);    if (lang.equals(langCompare)) {      s_log.fine("Found similar Language " + AD_Language);      language.setAD_Language(AD_Language);      return;    }  }  s_log.warning("Not System Language=" + language + " - Set to Base Language "+ Language.getBaseAD_Language());  language.setAD_Language(Language.getBaseAD_Language());}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private SwitchPreferences(String text){  super(text,AS_CHECK_BOX);  setImageDescriptor(InspectIT.getDefault().getImageDescriptor(InspectITImages.IMG_PREFERENCES));}  }
class C{  public static boolean encodeFileToFile(final String infile,final String outfile){  boolean success=false;  java.io.InputStream in=null;  java.io.OutputStream out=null;  try {    in=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)),Base64.ENCODE);    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    byte[] buffer=new byte[65536];    int read=-1;    while ((read=in.read(buffer)) >= 0) {      out.write(buffer,0,read);    }    success=true;  } catch (  java.io.IOException exc) {    exc.printStackTrace();  } finally {    try {      in.close();    } catch (    Exception exc) {    }    try {      out.close();    } catch (    Exception exc) {    }  }  return success;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HOST:    return isSetHost();case PORT:  return isSetPort();case ID:return isSetId();case STATE:return isSetState();case TIMESTAMP:return isSetTimestamp();case VERSION:return isSetVersion();}throw new IllegalStateException();}  }
class C{  @Override public boolean removeNode(UUID node){  return graphServer.removeVertex(node);}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState.stage != startState.taskState.stage) {    ServiceUtils.logInfo(this,"Moving to stage %s",patchState.taskState.stage);    startState.taskState=patchState.taskState;  }  if (null != patchState.loginUrl) {    startState.loginUrl=patchState.loginUrl;  }  if (null != patchState.logoutUrl) {    startState.logoutUrl=patchState.logoutUrl;  }  return startState;}  }
class C{  public PacketWrapper apply(Direction direction,State state,int index,List<Protocol> pipeline) throws Exception {  for (int i=index; i < pipeline.size(); i++) {    pipeline.get(i).transform(direction,state,this);    resetReader();  }  return this;}  }
class C{  public static void main(String[] args){  List<Integer> l=new ArrayList<>(Arrays.asList(2,3,2,128,128));  l.add(128);  l.add(128);  lessThan127(l);  explicitBoxing();  moreThan127();  deBoxing();}  }
class C{  public static XPath createXPath(String... namespaces){  Map<String,String> namespaceMap=new HashMap<String,String>();  for (  String namespace : namespaces) {    String prefix=StringUtils.substringBefore(namespace,"=");    String namespaceURI=StringUtils.substringAfter(namespace,"=");    namespaceMap.put(prefix,namespaceURI);  }  return createXPath(namespaceMap);}  }
class C{  public ModifySubscriptionRequest clone(){  ModifySubscriptionRequest result=new ModifySubscriptionRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.SubscriptionId=SubscriptionId;  result.RequestedPublishingInterval=RequestedPublishingInterval;  result.RequestedLifetimeCount=RequestedLifetimeCount;  result.RequestedMaxKeepAliveCount=RequestedMaxKeepAliveCount;  result.MaxNotificationsPerPublish=MaxNotificationsPerPublish;  result.Priority=Priority;  return result;}  }
class C{  private void init(){  long start=System.currentTimeMillis();  Driver driver=null;  try {    driver=DriverManager.getDriver(m_jdbcURL);  } catch (  SQLException ex) {  }  if (driver == null) {    try {      DriverManager.registerDriver(new oracle.jdbc.OracleDriver());    } catch (    SQLException ex) {      System.err.println("Init = register Driver: " + ex);    }  }  long end=System.currentTimeMillis();  System.out.println("(1) Driver = " + (end - start) + "ms");  start=System.currentTimeMillis();  try {    m_conn=DriverManager.getConnection(m_jdbcURL,m_uid,m_pwd);  } catch (  SQLException ex) {    System.err.println("Init = get Connection: " + ex);  }  end=System.currentTimeMillis();  System.out.println("(2) Get Connection = " + (end - start) + "ms");  start=System.currentTimeMillis();  try {    if (m_conn != null)     m_conn.close();  } catch (  SQLException ex) {    System.err.println("Init = close Connection: " + ex);  }  end=System.currentTimeMillis();  System.out.println("(3) Close Connection = " + (end - start) + "ms");}  }
class C{  @Override public void addScannedResult(List<ListBasedResultWrapper> listBasedResult){  this.currentRowPointer=listBasedResult;  totalNumberOfRecords=listBasedResult.size();  allRowsResult.add(listBasedResult);}  }
class C{  public Access passwordScopeAuth(){  DummyAccess access=new DummyAccess(accessUrl);  return access;}  }
class C{  public boolean isCreateURIVariables(){  return false;}  }
class C{  public static void d(String tag,String msg){  d(tag,msg,null);}  }
class C{  public PriceModelException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public boolean isSetBonk(){  return this.bonk != null;}  }
class C{  public static String callPayPal(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  String orderId=(String)request.getAttribute("orderId");  GenericValue orderHeader=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot get the order header for order: " + orderId,module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingOrderHeader",locale));    return "error";  }  String orderTotal=orderHeader.getBigDecimal("grandTotal").toPlainString();  String currencyUom=orderHeader.getString("currencyUom");  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (productStore == null) {    Debug.logError("ProductStore is null",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString("productStoreId"),"EXT_PAYPAL",null,true);  String configString=null;  String paymentGatewayConfigId=null;  if (paymentConfig != null) {    paymentGatewayConfigId=paymentConfig.getString("paymentGatewayConfigId");    configString=paymentConfig.getString("paymentPropertiesPath");  }  if (configString == null) {    configString="payment.properties";  }  String company=UtilFormatOut.checkEmpty(productStore.getString("companyName"),"");  String itemName=UtilProperties.getMessage(resource,"AccountingOrderNr",locale) + orderId + " "+ (company != null ? UtilProperties.getMessage(commonResource,"CommonFrom",locale) + " " + company : "");  String itemNumber="0";  String redirectUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"redirectUrl",configString,"payment.paypal.redirect");  String notifyUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"notifyUrl",configString,"payment.paypal.notify");  String returnUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"returnUrl",configString,"payment.paypal.return");  String cancelReturnUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"cancelReturnUrl",configString,"payment.paypal.cancelReturn");  String imageUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"imageUrl",configString,"payment.paypal.image");  String payPalAccount=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"businessEmail",configString,"payment.paypal.business");  if (UtilValidate.isEmpty(redirectUrl) || UtilValidate.isEmpty(notifyUrl) || UtilValidate.isEmpty(returnUrl)|| UtilValidate.isEmpty(imageUrl)|| UtilValidate.isEmpty(payPalAccount)) {    Debug.logError("Payment properties is not configured properly, some notify URL from PayPal is not correctly defined!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  Map<String,Object> parameters=new LinkedHashMap<String,Object>();  parameters.put("cmd","_xclick");  parameters.put("business",payPalAccount);  parameters.put("item_name",itemName);  parameters.put("item_number",itemNumber);  parameters.put("invoice",orderId);  parameters.put("custom",userLogin.getString("userLoginId"));  parameters.put("amount",orderTotal);  parameters.put("currency_code",currencyUom);  parameters.put("return",returnUrl);  if (UtilValidate.isNotEmpty(cancelReturnUrl))   parameters.put("cancel_return",cancelReturnUrl);  parameters.put("notify_url",notifyUrl);  parameters.put("image_url",imageUrl);  parameters.put("no_note","1");  parameters.put("no_shipping","1");  String encodedParameters=UtilHttp.urlEncodeArgs(parameters,false);  String redirectString=redirectUrl + "?" + encodedParameters;  request.getSession().setAttribute("PAYPAL_ORDER",orderId);  try {    response.sendRedirect(redirectString);  } catch (  IOException e) {    Debug.logError(e,"Problems redirecting to PayPal",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsConnectingWithPayPal",locale));    return "error";  }  return "success";}  }
class C{  @Override public boolean mayFireAgain(){  return (getNextFireTime() != null);}  }
class C{  protected void createFile(ZipEntry entry){  IPath pathname=new Path(entry.getName());  ZipEntry parent;  if (pathname.segmentCount() == 1) {    parent=root;  } else {    parent=(ZipEntry)directoryEntryCache.get(pathname.removeLastSegments(1));  }  addToChildren(parent,entry);}  }
class C{  public FastAdapterBottomSheetDialog<Item> withTitle(@StringRes int titleRes){  setTitle(titleRes);  return this;}  }
class C{  public boolean hasSource(){  return getSource() != null;}  }
class C{  public void initialise() throws Exception {  mvkeDestinationPast.initialise(k,epsilon);  mvkeDestinationNextPast.initialise(k + 1,epsilon);  mvkeDestinationPastSource.initialise(k + 1,epsilon);  mvkeDestinationNextPastSource.initialise(k + 2,epsilon);  destPastVectors=null;  destNextPastVectors=null;  destPastSourceVectors=null;  destNextPastSourceVectors=null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void initialize(){  numLabel=new Label();  numLabel.setText("Generate how many:");  numLabel.setLocation(new Point(22,300));  numLabel.setSize(new Dimension(122,23));  genLabel=new Label();  genLabel.setText("Execute Generator:");  genLabel.setLocation(new Point(10,270));  genLabel.setSize(new Dimension(220,23));  choiceLabel=new Label();  choiceLabel.setText("Selected Generator:");  choiceLabel.setLocation(new Point(10,25));  choiceLabel.setSize(new Dimension(220,23));  paramLabel=new Label();  paramLabel.setText("Construct Generator with parameters:");  paramLabel.setLocation(new Point(10,75));  paramLabel.setSize(new Dimension(220,24));  this.setPreferredSize(new Dimension(239,350));  this.setLayout(null);  this.setBackground(SystemColor.control);  this.add(paramLabel,null);  this.add(getCurrentChoice(),null);  this.add(choiceLabel,null);  this.add(getGenerateButton(),null);  this.add(genLabel,null);  this.add(numLabel,null);  this.add(getNumField(),null);  this.add(getParametersPanel(),null);}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  protected boolean isRootPaneCheckingEnabled(){  return rootPaneCheckingEnabled;}  }
class C{  public static InetAddress parseInetAddr(byte[] inetAddrBytes,int offset,int count){  InetAddress inetAddress=null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < count; i++) {    sb.append(Integer.toString(inetAddrBytes[offset + i] & 0xff));    if (i != count - 1) {      sb.append('.');    }  }  try {    inetAddress=InetAddress.getByName(sb.toString());  } catch (  UnknownHostException e) {    e.printStackTrace();  }  return inetAddress;}  }
class C{  public void elementRemoved(CnATreeElement element){  cache.remove(element);  if (LOG.isDebugEnabled()) {    LOG.debug("Element removed from cache, uuid: " + element.getUuid());  }}  }
class C{  public boolean isEquivalent(TransportConfiguration otherConfig){  if (this.getFactoryClassName().equals(otherConfig.getFactoryClassName())) {    return true;  } else   if (this.getFactoryClassName().contains("Netty") && otherConfig.getFactoryClassName().contains("Netty")) {    return true;  } else   if (this.getFactoryClassName().contains("InVM") && otherConfig.getFactoryClassName().contains("InVM")) {    return true;  } else {    return false;  }}  }
class C{  public BaggingMTTest(String name){  super(name);}  }
class C{  public CreateCustomMetric(Monitoring monitoringService,String projectResource,String metricName){  this.monitoringService=monitoringService;  this.projectResource=projectResource;  this.metricType=CUSTOM_METRIC_DOMAIN + "/" + metricName;  this.metricName=projectResource + "/metricDescriptors/" + metricType;}  }
class C{  private void recoverState(int n){  TableStack<K> s;  int len;  while ((s=stack) != null && (index+=(len=s.length)) >= n) {    n=len;    index=s.index;    tab=s.tab;    s.tab=null;    TableStack<K> next=s.next;    s.next=spare;    stack=next;    spare=s;  }  if (s == null && (index+=baseSize) >= n)   index=++baseIndex;}  }
class C{  public static LongArrayBitVector wrap(final long[] array,final long size){  if (size > array.length << LOG2_BITS_PER_WORD)   throw new IllegalArgumentException("The provided array is too short (" + array.length + " elements) for the given size ("+ size+ ")");  final LongArrayBitVector result=new LongArrayBitVector(0);  result.length=size;  result.bits=array;  final int arrayLength=array.length;  final int lastWord=(int)(size / Long.SIZE);  if (lastWord < arrayLength && (array[lastWord] & ~((1L << size % Long.SIZE) - 1)) != 0)   throw new IllegalArgumentException("Garbage beyond size in bit array");  for (int i=lastWord + 1; i < arrayLength; i++)   if (array[i] != 0)   throw new IllegalArgumentException("Garbage beyond size in bit array");  return result;}  }
class C{  @Override public void writeVertices(final OutputStream outputStream,final Iterator<Vertex> vertexIterator,final Direction direction) throws IOException {  final BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(outputStream));  try (final ByteArrayOutputStream baos=new ByteArrayOutputStream()){    if (wrapAdjacencyList)     writer.write("{\"" + GraphSONTokens.VERTICES + "\":[");    while (vertexIterator.hasNext()) {      writeVertex(baos,vertexIterator.next(),direction);      writer.write(new String(baos.toByteArray()));      if (wrapAdjacencyList) {        if (vertexIterator.hasNext())         writer.write(",");      } else {        writer.newLine();      }      baos.reset();    }    if (wrapAdjacencyList)     writer.write("]}");  }   writer.flush();}  }
class C{  public static IPackageFragmentRoot addSourceContainerWithImport(IJavaProject jproject,String containerName,File zipFile,String containerEncoding) throws InvocationTargetException, CoreException, IOException {  return addSourceContainerWithImport(jproject,containerName,zipFile,containerEncoding,new Path[0]);}  }
class C{  void authenticated(){synchronized (this) {    saslNegotiated=true;    notify();  }}  }
class C{  private int parseTime(boolean isOptional) throws ParseException {  int sec=0;  int min=0;  int tmpOffset=currentOffset;  int hour=parseNumber();  if (tmpOffset == currentOffset) {    if (!isOptional) {      throw new java.text.ParseException("Missing non-optional hours",currentOffset);    }    return 0;  }  if (hour < 0 || hour > 23)   throw new java.text.ParseException("Invalid hour",currentOffset);  if (currentOffset < maxOffset && data.charAt(currentOffset) == ':') {    tmpOffset=++currentOffset;    min=parseNumber();    if (tmpOffset == currentOffset) {      throw new java.text.ParseException("Missing non-optional minutes",currentOffset);    }    if (min < 0 || min > 59)     throw new java.text.ParseException("Invalid minute",currentOffset);    if (currentOffset < maxOffset && data.charAt(currentOffset) == ':') {      tmpOffset=++currentOffset;      sec=parseNumber();      if (tmpOffset == currentOffset) {        throw new java.text.ParseException("Missing non-optional seconds",currentOffset);      }      if (sec < 0 || sec > 59)       throw new java.text.ParseException("Invalid second",currentOffset);    }  }  int ret=((hour * 3600) + (min * 60) + sec) * 1000;  return ret;}  }
class C{  public TEAEngine(){  _initialised=false;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[inBuff >>> 18];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert e == outBuff.length;  return outBuff;}  }
class C{  public static int cs_cumsum(int[] p,int[] c,int n){  int i, nz=0;  float nz2=0;  if (p == null || c == null)   return (-1);  for (i=0; i < n; i++) {    p[i]=nz;    nz+=c[i];    nz2+=c[i];    c[i]=p[i];  }  p[n]=nz;  return (int)nz2;}  }
class C{  @Override protected int capacity(){  return _values.length;}  }
class C{  public static final Bitmap resizeAndCropCenter(final Bitmap bitmap,final int size){  final int w=bitmap.getWidth();  final int h=bitmap.getHeight();  if (w == size && h == size) {    return bitmap;  }  final float mScale=(float)size / Math.min(w,h);  final Bitmap mTarget=Bitmap.createBitmap(size,size,Bitmap.Config.ARGB_8888);  final int mWidth=Math.round(mScale * bitmap.getWidth());  final int mHeight=Math.round(mScale * bitmap.getHeight());  final Canvas mCanvas=new Canvas(mTarget);  mCanvas.translate((size - mWidth) / 2f,(size - mHeight) / 2f);  mCanvas.scale(mScale,mScale);  final Paint paint=new Paint(Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG);  mCanvas.drawBitmap(bitmap,0,0,paint);  return mTarget;}  }
class C{  public static Bitmap doParse(byte[] data,int maxWidth,int maxHeight,ImageView.ScaleType scaleType,Bitmap.Config config){  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap;  if (maxWidth == 0 && maxHeight == 0) {    decodeOptions.inPreferredConfig=config;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(maxWidth,maxHeight,actualWidth,actualHeight,scaleType);    int desiredHeight=getResizedDimension(maxHeight,maxWidth,actualHeight,actualWidth,scaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  return bitmap;}  }
class C{  @Override protected String aggregateName(){  if (!StringUtils.isEmpty(alias)) {    return alias;  }  if (isFirst) {    return "FIRST(" + column + ")";  }  return "LAST(" + column + ")";}  }
class C{  public long finish(){  byte msgLenMod256=msg_byte_counter;  while (m_idx < (LONG_BYTES - 1)) {    updateHash((byte)0);  }  updateHash(msgLenMod256);  v2^=0xff;  siphash_round();  siphash_round();  siphash_round();  siphash_round();  v0=v0 ^ v1 ^ v2^ v3;  return v0;}  }
class C{  private boolean hasUtcOffset(){  return offset != null;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final boolean addAll(int index,Collection<? extends E> newElements){  throw new UnsupportedOperationException();}  }
class C{  public void limit(float max){  if (magSq() > max * max) {    normalize();    mult(max);  }}  }
class C{  public void update(byte input){  engineUpdate(input);  state=IN_PROGRESS;}  }
class C{  public static boolean isApplicable(Object obj){  if (obj instanceof ItemStack) {    ItemStack stack=(ItemStack)obj;    Item item=stack.getItem();    return item instanceof ItemArmor || item instanceof ItemSword || item instanceof ItemBow|| item instanceof ItemTool;  } else   if (obj instanceof EntityLivingBase) {    return true;  }  return false;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","tellhowedu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  @Override public Boolean sismember(final byte[] key,final byte[] member){  checkIsInMultiOrPipeline();  client.sismember(key,member);  return client.getIntegerReply() == 1;}  }
class C{  @Override public boolean hasNext(){  log.log(Level.FINE,"hasNext()");  boolean result=(nextEvent != null);  log.log(Level.FINE,"hasNext(): {0}",result);  return result;}  }
class C{  public void writeStopTrees(OutputStream out) throws IOException {  LinkedPointSet lps=network.getLinkedGridPointSet();  if (lps.stopToPointDistanceTables == null) {    lps.makeStopToPointDistanceTables(null);  }  TIntList[] distanceTables=new TIntList[lps.pointSet.featureCount()];  int stop=-1;  for (  int[] table : lps.stopToPointDistanceTables) {    stop++;    if (table == null) {      continue;    }    for (int i=0; i < table.length; i+=2) {      if (distanceTables[table[i]] == null) {        distanceTables[table[i]]=new TIntArrayList();      }      distanceTables[table[i]].add(new int[]{stop,(table[i + 1] / 1300 / 60)});    }  }  CountingOutputStream cos=new CountingOutputStream(out);  LittleEndianDataOutputStream dos=new LittleEndianDataOutputStream(cos);  int prevStopId=0;  int prevTime=0;  for (  TIntList table : distanceTables) {    if (table == null) {      dos.writeInt(0);    } else {      dos.writeInt(table.size() / 2);      for (int i=0; i < table.size(); i+=2) {        int stopId=table.get(i);        dos.writeInt(stopId - prevStopId);        prevStopId=stopId;        int time=table.get(i + 1);        dos.writeInt(time - prevTime);        prevTime=time;      }    }  }  dos.flush();  dos.close();  LOG.info("static stop trees were {} bytes",cos.getCount());}  }
class C{  public Mat dctColumns(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dctColumns(scale);  return new Mat(dm.toArray());}  }
class C{  void parseExternalIdentifier() throws IOException {  if (parseIdentifier(false)) {    String id=getString(0);    skipParameterSpace();    if (id.equals("PUBLIC")) {      if ((ch == '\'') || (ch == '"')) {        parseAttributeValueSpecification();      } else {        error("expected","public identifier");      }      skipParameterSpace();    } else     if (!id.equals("SYSTEM")) {      error("invalid","external identifier");    }    if ((ch == '\'') || (ch == '"')) {      parseAttributeValueSpecification();    }    skipParameterSpace();  }}  }
class C{  private ArrayList<String> createKeyColumns(){  ArrayList<String> columns=new ArrayList<String>();  m_leadingColumns=0;  columns.add(sortBy1);  if (!columns.contains(sortBy2))   columns.add(sortBy2);  if (!columns.contains(sortBy3))   columns.add(sortBy3);  if (!columns.contains(sortBy4))   columns.add(sortBy4);  MAcctSchemaElement[] elements=ASchema.getAcctSchemaElements();  for (int i=0; i < elements.length; i++) {    if (m_leadingColumns == 0 && columns.contains("AD_Org_ID") && columns.contains("Account_ID"))     m_leadingColumns=columns.size();    MAcctSchemaElement ase=elements[i];    String columnName=ase.getColumnName();    if (columnName.startsWith("UserElement")) {      if (columnName.indexOf('1') != -1)       m_ref1=ase.getDisplayColumnName(); else       m_ref2=ase.getDisplayColumnName();    }    if (!columns.contains(columnName))     columns.add(columnName);  }  if (m_leadingColumns == 0 && columns.contains("AD_Org_ID") && columns.contains("Account_ID"))   m_leadingColumns=columns.size();  return columns;}  }
class C{  public static boolean isDefaultIncludeSelectCancel(){  return defaultIncludeSelectCancel;}  }
class C{  public static String escapeHtml(String s){  return escapeHtml(s,true);}  }
class C{  public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){  if (removeIndex > 0 && oldSize > 0) {    System.arraycopy(src,0,dst,0,removeIndex);  }  if (removeIndex < oldSize) {    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);  }}  }
class C{  public static List<Type> typeParametersAsArgList(Generic dec){  List<TypeParameter> params=dec.getTypeParameters();  if (params.isEmpty()) {    return NO_TYPE_ARGS;  }  int size=params.size();  List<Type> paramsAsArgs=new ArrayList<Type>(size);  for (int i=0; i < size; i++) {    TypeParameter param=params.get(i);    paramsAsArgs.add(param.getType());  }  return paramsAsArgs;}  }
class C{  void start(){  if (!mRunning) {    mTriggerPercentage=0;    mStartTime=AnimationUtils.currentAnimationTimeMillis();    mRunning=true;    mParent.postInvalidate();  }}  }
class C{  public static Warning parse(int code,Object... args){  return new Warning(Messages.INSTANCE.getParseMessage(code,args),code);}  }
class C{  public Date convertDateTime(String isodate) throws ParseException {  Date date=iso8601DateFormat.parse(isodate);  return date;}  }
class C{  public static void monitorWait(final Object monitor){synchronized (monitor) {    ExceptionUtils.propagateVoid(null);  }}  }
class C{  public static void verifyClientExists(ClientId clientId){  if (clientId != null && !clientExists(clientId)) {    throw CodedException.tr(X_UNKNOWN_MEMBER,"member_not_found","Certificate issued to an unknown member '%s'",clientId);  }}  }
class C{  public boolean needsReload(File file){  return fFilesToReoad.contains(file);}  }
class C{  private void registerExits(IR ir){  SSADictionary dictionary=ir.HIRInfo.dictionary;  for (Enumeration<BasicBlock> bbe=ir.getBasicBlocks(); bbe.hasMoreElements(); ) {    BasicBlock b=bbe.nextElement();    for (Enumeration<Instruction> e=b.forwardInstrEnumerator(); e.hasMoreElements(); ) {      Instruction s=e.nextElement();      if (Call.conforms(s)) {        continue;      }      if (Return.conforms(s) || Athrow.conforms(s) || s.isPEI()) {        dictionary.registerExit(s,b);      }    }  }}  }
class C{  public static void closeQuietly(InputStream in){  try {    if (in != null) {      in.close();    }  } catch (  IOException ignored) {  }}  }
class C{  public Builder addEncodedQueryParameter(String encodedName,String encodedValue){  if (encodedName == null)   throw new IllegalArgumentException("encodedName == null");  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();  encodedQueryNamesAndValues.add(canonicalize(encodedName,QUERY_COMPONENT_ENCODE_SET,true,true,true));  encodedQueryNamesAndValues.add(encodedValue != null ? canonicalize(encodedValue,QUERY_COMPONENT_ENCODE_SET,true,true,true) : null);  return this;}  }
class C{  public void write(Writer out,Document doc,int pos,int len) throws IOException, BadLocationException {  if ((pos < 0) || ((pos + len) > doc.getLength())) {    throw new BadLocationException("DefaultEditorKit.write",pos);  }  Segment data=new Segment();  int nleft=len;  int offs=pos;  Object endOfLineProperty=doc.getProperty(EndOfLineStringProperty);  if (endOfLineProperty == null) {    try {      endOfLineProperty=System.getProperty("line.separator");    } catch (    SecurityException se) {    }  }  String endOfLine;  if (endOfLineProperty instanceof String) {    endOfLine=(String)endOfLineProperty;  } else {    endOfLine=null;  }  if (endOfLineProperty != null && !endOfLine.equals("\n")) {    while (nleft > 0) {      int n=Math.min(nleft,4096);      doc.getText(offs,n,data);      int last=data.offset;      char[] array=data.array;      int maxCounter=last + data.count;      for (int counter=last; counter < maxCounter; counter++) {        if (array[counter] == '\n') {          if (counter > last) {            out.write(array,last,counter - last);          }          out.write(endOfLine);          last=counter + 1;        }      }      if (maxCounter > last) {        out.write(array,last,maxCounter - last);      }      offs+=n;      nleft-=n;    }  } else {    while (nleft > 0) {      int n=Math.min(nleft,4096);      doc.getText(offs,n,data);      out.write(data.array,data.offset,data.count);      offs+=n;      nleft-=n;    }  }  out.flush();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.419 -0400",hash_original_method="7EB6640C142FD363FDD2396F8FB791BB",hash_generated_method="E0B5ADE15D1426EC62B5FC3B9C060AB2") public static void writeSwappedLong(OutputStream output,long value) throws IOException {  output.write((byte)((value >> 0) & 0xff));  output.write((byte)((value >> 8) & 0xff));  output.write((byte)((value >> 16) & 0xff));  output.write((byte)((value >> 24) & 0xff));  output.write((byte)((value >> 32) & 0xff));  output.write((byte)((value >> 40) & 0xff));  output.write((byte)((value >> 48) & 0xff));  output.write((byte)((value >> 56) & 0xff));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void writeJSONString(Object value,Writer out) throws IOException {  if (value == null) {    out.write("null");    return;  }  if (value instanceof String) {    out.write('\"');    out.write(escape((String)value));    out.write('\"');    return;  }  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Number) {    out.write(value.toString());    return;  }  if (value instanceof Boolean) {    out.write(value.toString());    return;  }  if ((value instanceof JSONStreamAware)) {    ((JSONStreamAware)value).writeJSONString(out);    return;  }  if ((value instanceof JSONAware)) {    out.write(((JSONAware)value).toJSONString());    return;  }  if (value instanceof Map) {    JSONObject.writeJSONString((Map)value,out);    return;  }  if (value instanceof Collection) {    JSONArray.writeJSONString((Collection)value,out);    return;  }  if (value instanceof byte[]) {    JSONArray.writeJSONString((byte[])value,out);    return;  }  if (value instanceof short[]) {    JSONArray.writeJSONString((short[])value,out);    return;  }  if (value instanceof int[]) {    JSONArray.writeJSONString((int[])value,out);    return;  }  if (value instanceof long[]) {    JSONArray.writeJSONString((long[])value,out);    return;  }  if (value instanceof float[]) {    JSONArray.writeJSONString((float[])value,out);    return;  }  if (value instanceof double[]) {    JSONArray.writeJSONString((double[])value,out);    return;  }  if (value instanceof boolean[]) {    JSONArray.writeJSONString((boolean[])value,out);    return;  }  if (value instanceof char[]) {    JSONArray.writeJSONString((char[])value,out);    return;  }  if (value instanceof Object[]) {    JSONArray.writeJSONString((Object[])value,out);    return;  }  out.write(value.toString());}  }
class C{  public TransformationStrategy<? super T> transform(){  return transform;}  }
class C{  @Override protected String doTask() throws Exception {  ran.compareAndSet(false,true);  return getOnlyResource();}  }
class C{  public void testFieldONE(){  String oneS="1";  double oneD=1.0;  assertEquals("incorrect string value",oneS,BigDecimal.ONE.toString());  assertEquals("incorrect double value",oneD,BigDecimal.ONE.doubleValue(),0);}  }
class C{  private static void appendIntegerType(StringBuilder sb){  sb.append("INTEGER");}  }
class C{  public static String createString(final char ch,final int numChars){  final StringBuilder builder=new StringBuilder();  for (int i=0; i < numChars; ++i) {    builder.append(ch);  }  return builder.toString();}  }
class C{  public CharBuffer(){  init(new char[MIN_CAPACITY],0,0);}  }
class C{  MiniEnumSet(Class<E> elementType,E[] enums){  super(elementType);  this.enums=enums;}  }
class C{  public ScriptQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  private void validatePrimaryFixedPartitionAttributes(){  List<FixedPartitionAttributesImpl> remotePrimaryFPAs=this.pr.getRegionAdvisor().adviseRemotePrimaryFPAs();  for (  FixedPartitionAttributes fpa : this.pr.getFixedPartitionAttributesImpl()) {    if (fpa.isPrimary() && remotePrimaryFPAs.contains(fpa)) {      Object[] prms=new Object[]{this.pr.getName(),fpa.getPartitionName()};      throw new DuplicatePrimaryPartitionException(LocalizedStrings.PartitionedRegionConfigValidator_FOR_REGION_0_SAME_PARTITION_NAME_1_CANNOT_BE_DEFINED_AS_PRIMARY_ON_MORE_THAN_ONE_NODE.toString(prms));    }  }}  }
class C{  private void parse(String path) throws Exception {  if (path != null) {    count=path.length();    data=new char[count];    path.getChars(0,count,data,0);  }  path();}  }
class C{  final void moveHomeToFrontLocked(){  TaskRecord homeTask=null;  for (int i=mHistory.size() - 1; i >= 0; i--) {    ActivityRecord hr=mHistory.get(i);    if (hr.isHomeActivity) {      homeTask=hr.task;      break;    }  }  if (homeTask != null) {    moveTaskToFrontLocked(homeTask,null,null);  }}  }
class C{  public WebAppBuilderFramework(WebAppFactory factory){  super(factory);}  }
class C{  public ExceptionWithContext(Throwable cause){  this(null,cause);}  }
class C{  public BytesReference source(){  return source;}  }
class C{  private ProcessList(final List<ProcessDescription> processes){  this.processes=processes;}  }
class C{  private static Filter createFilterForObjectClassAndFilter(final String[] objectClasses,final Filter filter){  AndFilter andFilter=new AndFilter();  if (objectClasses != null) {    for (int i=0; i < objectClasses.length; i++) {      andFilter.and(new EqualsFilter(LdapConstants.OBJECT_CLASS_ATTRIBUTE,objectClasses[i]));    }  }  if (filter != null) {    andFilter.and(filter);  }  return andFilter;}  }
class C{  public void split(final int buddyOffset,final DirectoryPage oldChild){  if (true) {    throw new UnsupportedOperationException();  }  if (parent == null)   throw new IllegalArgumentException();  if (oldChild == null)   throw new IllegalArgumentException();  if (oldChild.globalDepth >= globalDepth) {    throw new IllegalStateException();  }  if (buddyOffset < 0)   throw new IllegalArgumentException();  if (buddyOffset >= (1 << htree.addressBits)) {    throw new IllegalArgumentException();  }  if (isReadOnly())   throw new IllegalStateException();  if (oldChild.isReadOnly())   throw new IllegalStateException();  if (oldChild.parent != self)   throw new IllegalStateException();  if (DEBUG)   log.debug("parent=" + toShortString() + ", buddyOffset="+ buddyOffset+ ", child="+ oldChild.toShortString());  final int oldDepth=oldChild.globalDepth;  final int newDepth=oldDepth + 1;  final DirectoryPage newChild=new DirectoryPage((HTree)htree,null,newDepth);  ((HTree)htree).nnodes++;  assert newChild.isDirty();  newChild.parent=(Reference)self;  oldChild.globalDepth=newDepth;  updatePointers(buddyOffset,oldDepth,oldChild,newChild);  redistributeBuddyTables(oldDepth,newDepth,oldChild,newChild);}  }
class C{  private static int GetStaticIntField(JNIEnvironment env,int classJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticIntField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getIntValueUnchecked(null);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public void seek(long pos){  position=Math.min(pos,document.getLength());}  }
class C{  public byte[] encode1(final String s){  final ByteArrayBuffer tmp=new ByteArrayBuffer(s.length());  final int nwritten=uc.encode(s,tmp);  final int npack=LongPacker.getByteLength(nwritten);  final byte[] a=new byte[npack + nwritten];  final DataOutputBuffer dob=new DataOutputBuffer(0,a);  try {    dob.packLong(nwritten);    dob.append(tmp.array(),0,tmp.pos());    return a;  }  finally {    try {      dob.close();    } catch (    IOException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public RecentRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  private void process2(final File file) throws InterruptedException {  if (file.isHidden()) {    return;  }  if (file.isDirectory()) {    if (log.isInfoEnabled())     log.info("Scanning directory: " + file);    final File[] files=filter == null ? file.listFiles() : file.listFiles(filter);    for (    final File f : files) {      process2(f);    }  } else {    if (log.isInfoEnabled())     log.info("Will load: " + file);    try {      submitOne((R)file,retryMillis);      count++;      return;    } catch (    InterruptedException ex) {      throw ex;    }catch (    Exception ex) {      log.error(file,ex);    }  }}  }
class C{  private void updatedReview(ProductReview productReview) throws ObjectNotFoundException, ConcurrentModificationException, OperationNotPermittedException {  checkIfAllowedToModify(productReview);  try {    dm.flush();  } catch (  EJBTransactionRolledbackException e) {    ConcurrentModificationException cme=new ConcurrentModificationException(productReview.getClass().getSimpleName(),productReview.getVersion());    cme.fillInStackTrace();    throw cme;  }}  }
class C{  private void updateFont(Font font){  StyledDocument doc=(StyledDocument)getComponent().getDocument();  Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);  if (style == null) {    return;  }  String fontFamily=(String)style.getAttribute(StyleConstants.FontFamily);  Integer fontSize=(Integer)style.getAttribute(StyleConstants.FontSize);  Boolean isBold=(Boolean)style.getAttribute(StyleConstants.Bold);  Boolean isItalic=(Boolean)style.getAttribute(StyleConstants.Italic);  Font fontAttribute=(Font)style.getAttribute(FONT_ATTRIBUTE_KEY);  if (font == null) {    if (fontFamily != null) {      style.removeAttribute(StyleConstants.FontFamily);    }    if (fontSize != null) {      style.removeAttribute(StyleConstants.FontSize);    }    if (isBold != null) {      style.removeAttribute(StyleConstants.Bold);    }    if (isItalic != null) {      style.removeAttribute(StyleConstants.Italic);    }    if (fontAttribute != null) {      style.removeAttribute(FONT_ATTRIBUTE_KEY);    }  } else {    if (!font.getName().equals(fontFamily)) {      StyleConstants.setFontFamily(style,font.getName());    }    if (fontSize == null || fontSize.intValue() != font.getSize()) {      StyleConstants.setFontSize(style,font.getSize());    }    if (isBold == null || isBold.booleanValue() != font.isBold()) {      StyleConstants.setBold(style,font.isBold());    }    if (isItalic == null || isItalic.booleanValue() != font.isItalic()) {      StyleConstants.setItalic(style,font.isItalic());    }    if (!font.equals(fontAttribute)) {      style.addAttribute(FONT_ATTRIBUTE_KEY,font);    }  }}  }
class C{  public DoubleMatrix2D assign(DoubleMatrix2D source){  if (!(source instanceof DenseDoubleMatrix2D)) {    return super.assign(source);  }  DenseDoubleMatrix2D other=(DenseDoubleMatrix2D)source;  if (other == this)   return this;  checkShape(other);  if (this.isNoView && other.isNoView) {    System.arraycopy(other.elements,0,this.elements,0,this.elements.length);    return this;  }  if (haveSharedCells(other)) {    DoubleMatrix2D c=other.copy();    if (!(c instanceof DenseDoubleMatrix2D)) {      return super.assign(other);    }    other=(DenseDoubleMatrix2D)c;  }  final double[] elems=this.elements;  final double[] otherElems=other.elements;  if (elems == null || otherElems == null)   throw new InternalError();  int cs=this.columnStride;  int ocs=other.columnStride;  int rs=this.rowStride;  int ors=other.rowStride;  int otherIndex=other.index(0,0);  int index=index(0,0);  for (int row=rows; --row >= 0; ) {    for (int i=index, j=otherIndex, column=columns; --column >= 0; ) {      elems[i]=otherElems[j];      i+=cs;      j+=ocs;    }    index+=rs;    otherIndex+=ors;  }  return this;}  }
class C{  public static String[] fileNamesFromPathPrefix(String pathPrefix){  File p=new File(pathPrefix);  final String filePrefix=p.getName();  File folder=p.getParent() == null ? new File(".") : new File(p.getParent());  if (folder.exists() && folder.isDirectory()) {    String[] fileNames=folder.list(null);    for (int i=0; i < fileNames.length; ++i) {      File path=new File(folder,fileNames[i]);      fileNames[i]=path.getPath();    }    return fileNames;  } else   if (p.exists()) {    return new String[]{p.getPath()};  } else {    return new String[0];  }}  }
class C{  @Override public void flush(){  if (!queue.isEmpty()) {    List<AlertStreamEvent> events=new ArrayList<>();    queue.drainTo(events);    events.forEach(null);    LOG.info("Flushed {} alerts",events.size());  }  lastFlushTime.set(System.currentTimeMillis());}  }
class C{  private void verify(byte[][][] docValues,int[] docIDs,int numDims,int numBytesPerDim) throws Exception {  try (Directory dir=getDirectory(docValues.length)){    while (true) {      try {        verify(dir,docValues,docIDs,numDims,numBytesPerDim,false);        return;      } catch (      IllegalArgumentException iae) {        assertTrue(iae.getMessage().contains("either increase maxMBSortInHeap or decrease maxPointsInLeafNode"));      }    }  } }  }
class C{  private void outputPriceLists(Properties ctx,PrintWriter out,boolean includeAny){  out.println("<pricelists>");  if (includeAny)   out.println("<pricelist id='-1' selected='selected'>ANY</pricelist>");  out.println("<pricelist id='1'>Standard</pricelist>");  out.println("<pricelist id='2'>Summer Specials</pricelist>");  out.println("</pricelists>");}  }
class C{  public HorizontalOverScrollBounceEffectDecorator(IOverScrollDecoratorAdapter viewAdapter){  this(viewAdapter,DEFAULT_TOUCH_DRAG_MOVE_RATIO_FWD,DEFAULT_TOUCH_DRAG_MOVE_RATIO_BCK,DEFAULT_DECELERATE_FACTOR);}  }
class C{  public Expression copyInline(Context ctx){  AssignOpExpression e=(AssignOpExpression)clone();  e.left=left.copyInline(ctx);  e.right=right.copyInline(ctx);  if (updater != null) {    e.updater=updater.copyInline(ctx);  }  return e;}  }
class C{  public static boolean makeDirectory(String directory) throws IOException {  return makeDirectory(directory,false);}  }
class C{  public int next(){  if (_currentNode == DTM.NULL) {    return DTM.NULL;  }  int node=_currentNode;  int eType;  int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    do {      node=_nextsib(node);    } while (node != DTM.NULL && _exptype(node) != nodeType);  } else {    while ((node=_nextsib(node)) != DTM.NULL) {      eType=_exptype(node);      if (eType < DTM.NTYPES) {        if (eType == nodeType) {          break;        }      } else       if (m_expandedNameTable.getType(eType) == nodeType) {        break;      }    }  }  _currentNode=node;  return (_currentNode == DTM.NULL) ? DTM.NULL : returnNode(makeNodeHandle(_currentNode));}  }
class C{  private static int decodeWeight(long encoded){  return (int)(Integer.MAX_VALUE - encoded);}  }
class C{  protected void deleteLinks(List<Link> links,String reason){  deleteLinks(links,reason,null);}  }
class C{  public static boolean isDataFrameWithIDColumn(MatrixMetadata matrixMetadata){  return (matrixMetadata != null && matrixMetadata.getMatrixFormat() != null && matrixMetadata.getMatrixFormat().hasIDColumn());}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private Contract findContractById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    Contract instance=entityManager.find(Contract.class,id);    return instance;  } catch (  Exception re) {    throw re;  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ITERATION_STATEMENT;}  }
class C{  public boolean isDepthTest(){  return this.depthTest;}  }
class C{  @Override public void deactivateLight(){  if (mActive) {    lightControlList.stream().forEach(null);    mActive=false;  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ObjectName[] manageStat(String statisticsTypeName) throws AdminException, MalformedObjectNameException {  return Helper.manageStat(this,statisticsTypeName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.167 -0400",hash_original_method="2D9CDAF56900A3E223824D5F717EC43A",hash_generated_method="33D899FBC10054E3B93503C9E493C218") public IOUtils(){  super();}  }
class C{  protected File unzipDistribution(File dir,File zip){  File exploded=new File(dir,BOOTSTRAP_DISTRIBUTION + "-exploded");  if (exploded.exists()) {    if (forceBootstrapUpdate() == false)     return exploded; else     delete(exploded);  }  try {    final ZipFile zipFile=new ZipFile(zip);    try {      final Enumeration<? extends ZipEntry> entries=zipFile.entries();      while (entries.hasMoreElements()) {        final ZipEntry ze=entries.nextElement();        final File file=new File(exploded,ze.getName());        if (ze.isDirectory()) {          if (FileUtil.mkdirs(file) == false)           throw new IllegalArgumentException("Cannot create dir: " + file);        } else {          final FileOutputStream fos=new FileOutputStream(file);          copyStream(zipFile.getInputStream(ze),fos);        }      }    }  finally {      zipFile.close();    }  } catch (  IOException e) {    throw new IllegalArgumentException(e);  }  return exploded;}  }
class C{  protected double adjustedEps(int dim){  double e=epsilons[dim];  if (e < 0) {    e=epsilons[2] * optimalBandwidth(dim) / hopttwo;    epsilons[dim]=e;  }  return e;}  }
class C{  public void clearSearch(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().clearSearch();}  }
class C{  public CbusEventFilterPanel(CbusEventFilterFrame filterFrame,int index){  super();  _index=index;  _filterFrame=filterFrame;}  }
class C{  public void detectAndSendChanges(){  super.detectAndSendChanges();  for (int i=0; i < this.crafters.size(); ++i) {    ICrafting icrafting=(ICrafting)this.crafters.get(i);    icrafting.sendProgressBarUpdate(this,1,this.entity.storage.getEnergyStored());    icrafting.sendProgressBarUpdate(this,2,this.entity.length);    icrafting.sendProgressBarUpdate(this,3,(int)this.entity.efficiency);    icrafting.sendProgressBarUpdate(this,4,(int)this.entity.fuel);    icrafting.sendProgressBarUpdate(this,5,(int)this.entity.particleEnergy);    icrafting.sendProgressBarUpdate(this,6,(int)this.entity.percentageOn);    icrafting.sendProgressBarUpdate(this,7,this.entity.storage.getEnergyStored() >> 16);    icrafting.sendProgressBarUpdate(this,8,this.entity.length >> 16);    icrafting.sendProgressBarUpdate(this,9,(int)this.entity.efficiency >> 16);    icrafting.sendProgressBarUpdate(this,10,(int)this.entity.fuel >> 16);    icrafting.sendProgressBarUpdate(this,11,(int)this.entity.particleEnergy >> 16);    icrafting.sendProgressBarUpdate(this,12,(int)this.entity.percentageOn >> 16);    icrafting.sendProgressBarUpdate(this,13,(int)this.entity.radiationPower);    icrafting.sendProgressBarUpdate(this,14,(int)this.entity.radiationPower >> 16);    icrafting.sendProgressBarUpdate(this,15,(int)this.entity.complete);    icrafting.sendProgressBarUpdate(this,16,(int)this.entity.complete >> 16);    icrafting.sendProgressBarUpdate(this,17,(int)this.entity.antimatter);    icrafting.sendProgressBarUpdate(this,18,(int)this.entity.antimatter >> 16);  }}  }
class C{  public static byte[] longToBytes(long val){  byte[] arr=new byte[8];  arr[0]=(byte)(val >>> 56);  arr[1]=(byte)(val >>> 48);  arr[2]=(byte)(val >>> 40);  arr[3]=(byte)(val >>> 32);  arr[4]=(byte)(val >>> 24);  arr[5]=(byte)(val >>> 16);  arr[6]=(byte)(val >>> 8);  arr[7]=(byte)(val);  return arr;}  }
class C{  public Set<String> keySet(){  return mValues.keySet();}  }
class C{  public void onSubscribeAccountUpdates(boolean subscribe,String accountNumber) throws BrokerModelException {}  }
class C{  public Keccak256(){}  }
class C{  public void transfer(Integer namespaceId,Integer projectId) throws IOException {  String tailUrl=GitlabNamespace.URL + "/" + namespaceId+ GitlabProject.URL+ "/"+ projectId;  dispatch().to(tailUrl,Void.class);}  }
class C{  public void add(final SocketChannel channel,final QuarantineConversation conversation){  if (channel.isBlocking()) {    throw new IllegalArgumentException("Channel is blocking");  }  m_decoder.add(channel,conversation);  m_reader.add(channel);}  }
class C{  CstMemberRef(CstType definingClass,CstNat nat){  if (definingClass == null) {    throw new NullPointerException("definingClass == null");  }  if (nat == null) {    throw new NullPointerException("nat == null");  }  this.definingClass=definingClass;  this.nat=nat;}  }
class C{  public boolean isCollapsable(){  return collapsable;}  }
class C{  public NodeId(final int nodeId){  super(nodeId,NodeId.class);  if (this.getRaw() < 0) {    throw new IllegalArgumentException("node id must be non-negative");  }}  }
class C{  protected boolean canChildScrollDown(){  if (android.os.Build.VERSION.SDK_INT < 14) {    if (mTargetView instanceof AbsListView) {      final AbsListView absListView=(AbsListView)mTargetView;      return absListView.getChildCount() > 0 && (absListView.getLastVisiblePosition() < absListView.getChildCount() - 1 || absListView.getChildAt(absListView.getChildCount() - 1).getBottom() > absListView.getPaddingBottom());    } else {      return ViewCompat.canScrollVertically(mTargetView,1) || mTargetView.getScrollY() < 0;    }  } else {    return ViewCompat.canScrollVertically(mTargetView,1);  }}  }
class C{  public MBankAccount(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  private String extractUserId(HttpServerRequest request,Logger log){  String onBehalfOf=StringUtils.getStringOrEmpty(request.headers().get(ON_BEHALF_OF_HEADER));  if (StringUtils.isNotEmpty(onBehalfOf)) {    log.debug("Using values from x-on-behalf-of header instead of taking them from x-rp-usr header");    return onBehalfOf;  } else {    return request.headers().get(USER_HEADER);  }}  }
class C{  public MekaTable(TableModel dm,TableColumnModel cm,ListSelectionModel sm){  super(dm,cm,sm);  initGUI();}  }
class C{  protected FilterWriter(Writer out){  super(out);  this.out=out;}  }
class C{  public E remove(){  if (list.size() == 0)   return null;  E removedObject=list.get(0);  list.set(0,list.get(list.size() - 1));  list.remove(list.size() - 1);  int currentIndex=0;  while (currentIndex < list.size()) {    int leftChildIndex=2 * currentIndex + 1;    int rightChildIndex=2 * currentIndex + 2;    if (leftChildIndex >= list.size())     break;    int maxIndex=leftChildIndex;    if (rightChildIndex < list.size()) {      if (list.get(maxIndex).compareTo(list.get(rightChildIndex)) > 0) {        maxIndex=rightChildIndex;      }    }    if (list.get(currentIndex).compareTo(list.get(maxIndex)) > 0) {      E temp=list.get(maxIndex);      list.set(maxIndex,list.get(currentIndex));      list.set(currentIndex,temp);      currentIndex=maxIndex;    } else     break;  }  return removedObject;}  }
class C{  private static boolean canReplace(@Nullable ItemStack replacement,@Nonnull ItemStack destroyed){  if (replacement == null) {    return false;  }  Set<String> classesSrc=destroyed.getItem().getToolClasses(destroyed);  Set<String> classesDst=replacement.getItem().getToolClasses(replacement);  if (classesSrc.size() > 0 && classesSrc.equals(classesDst)) {    return true;  }  if (destroyed.getItem() instanceof ItemSword && replacement.getItem() instanceof ItemSword) {    return true;  }  return ItemUtils.equals(replacement,destroyed,false,!destroyed.getItem().isDamageable(),true);}  }
class C{  public void removeProxy(){  proxyCount--;}  }
class C{  public void test_setILjava_lang_Object(){  Object obj;  alist.set(65,obj=new Object());  assertTrue("Failed to set object",alist.get(65) == obj);  alist.set(50,null);  assertNull("Setting to null did not work",alist.get(50));  assertTrue("Setting increased the list's size to: " + alist.size(),alist.size() == 100);  try {    alist.set(-1,null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    alist.set(alist.size() + 1,null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  private void init(){  profiles=new ArrayList<>();  profiles.add(new SecurityProfile(1).setName(R.id.radio_profile_flexible).setTimestamp(true).setPseudonyms(true).setFeedSize(0).setFriendsViaBook(true).setFriendsViaQR(true).setAutodelete(false).setAutodeleteTrust(0.05f).setAutodeleteAge(14).setShareLocation(true).setMinSharedContacts(0).setMaxMessages(1000).setCooldown(5).setEnforceLock(false).setUseTrust(false).setRandomExchange(true).setTimeboundPeriod(3).setMinContactsForHop(3));  profiles.add(new SecurityProfile(2).setName(R.id.radio_profile_strict).setTimestamp(false).setPseudonyms(false).setFeedSize(0).setFriendsViaBook(false).setFriendsViaQR(true).setAutodelete(false).setAutodeleteTrust(0.05f).setAutodeleteAge(14).setShareLocation(false).setMinSharedContacts(5).setMaxMessages(250).setCooldown(30).setEnforceLock(true).setUseTrust(true).setRandomExchange(true).setTimeboundPeriod(3).setMinContactsForHop(5));}  }
class C{  public static <T>SortedSet<T> each(SortedSet<T> self,@ClosureParams(FirstParam.FirstGenericType.class) Closure closure){  return (SortedSet<T>)each((Iterable<T>)self,closure);}  }
class C{  public boolean hasProvider(Class<?> dtoInterface){  return dtoInterface2Providers.get(dtoInterface) != null;}  }
class C{  public void read(NBTTagCompound nbtTags){  if (nbtTags.hasKey("stored")) {    stored=GasStack.readFromNBT(nbtTags.getCompoundTag("stored"));  }  if (nbtTags.hasKey("maxGas") && nbtTags.getInteger("maxGas") != 0) {    maxGas=nbtTags.getInteger("maxGas");  }}  }
class C{  private void callNumber(String number,String userId,String userName,String category){  Intent intent=new Intent(Intent.ACTION_DIAL,Uri.parse("tel:" + number));  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  getActivity().startActivity(intent);}  }
class C{  public static void main(String[] args){  TestInlineLinkLabel tester=new TestInlineLinkLabel();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static FilterStream create(String eventTypeName,String streamName,Expression filter){  return new FilterStream(Filter.create(eventTypeName,filter),streamName);}  }
class C{  public static String guessMimeTypeFromExtension(String extension){  if (extension == null || extension.isEmpty()) {    return null;  }  return extensionToMimeTypeMap.get(extension);}  }
class C{  private long currentTime(){  return clockSrc.currentTimeMillis();}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="nomatch";  Document doc;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS(namespaceURI,localName);  assertSize("throw_Size",0,elementList);}  }
class C{  public Optional<Response> simpleGet(String resourcePath){  Optional<Response> returnValue=Optional.empty();  try {    returnValue=Optional.of(getServiceRoot().path(resourcePath).request().get());  } catch (  SnoopServiceUnavailableException e) {    LOGGER.warning(null);  }  return returnValue;}  }
class C{  private Shape decodeEdge(int width,int height){  path.reset();  path.moveTo(width - 2,0);  path.lineTo(width - 2,height - 4);  path.lineTo(width - 4,height - 2);  path.lineTo(0,height - 2);  return path;}  }
class C{  @SuppressWarnings("deprecation") void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  cameraResolution=getCameraResolution(parameters,screenResolution);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  @Deactivate protected void deactivate(ComponentContext ctx){}  }
class C{  public SimpleDirectory(){}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Rule)) {    return false;  }  Rule other=(Rule)o;  if (getLHS() != other.getLHS()) {    return false;  }  if (!Arrays.equals(getFrench(),other.getFrench())) {    return false;  }  return Arrays.equals(target,other.getEnglish());}  }
class C{  public boolean isDone(){  return done;}  }
class C{  public static String toUpperCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('a' <= ch && 'z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'a' + 'A');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  public static void updateCastlingRightsForNonEpNonCastlingMove(ClassicGame game,Move move,int initialShortRookFile,int initialLongRookFile){  int shortRookSquare=game.getColorToMove() == BLACK ? getSquare(0,initialShortRookFile) : getSquare(7,initialShortRookFile);  int longRookSquare=game.getColorToMove() == BLACK ? getSquare(0,initialLongRookFile) : getSquare(7,initialLongRookFile);switch (move.getPiece()) {case KING:    game.setCastling(game.getColorToMove(),CASTLE_NONE);  break;default :if (move.getPiece() == ROOK && move.getFrom() == longRookSquare && game.getColorToMove() == WHITE || move.getCapture() == ROOK && move.getTo() == longRookSquare && game.getColorToMove() == BLACK) {  game.setCastling(WHITE,game.getCastling(WHITE) & CASTLE_SHORT);} else if (move.getPiece() == ROOK && move.getFrom() == shortRookSquare && game.getColorToMove() == WHITE || move.getCapture() == ROOK && move.getTo() == shortRookSquare && game.getColorToMove() == BLACK) {  game.setCastling(WHITE,game.getCastling(WHITE) & CASTLE_LONG);} else if (move.getPiece() == ROOK && move.getFrom() == longRookSquare && game.getColorToMove() == BLACK || move.getCapture() == ROOK && move.getTo() == longRookSquare && game.getColorToMove() == WHITE) {  game.setCastling(BLACK,game.getCastling(BLACK) & CASTLE_SHORT);} else if (move.getPiece() == ROOK && move.getFrom() == shortRookSquare && game.getColorToMove() == BLACK || move.getCapture() == ROOK && move.getTo() == shortRookSquare && game.getColorToMove() == WHITE) {  game.setCastling(BLACK,game.getCastling(BLACK) & CASTLE_LONG);}break;}}  }
class C{  @SuppressWarnings("deprecation") public static void logUrl(Logger log,StringBuffer sbRequestUrl,SignableSAMLObject samlObject,String relayStateParameter,String signatureAlgorithm,String signature,String extra) throws MarshallingException, IOException {  String samlParameterName=SamlUtils.SAML_REQUEST_PARAMETER;  boolean doCompress=true;  if (samlObject instanceof LogoutResponse || samlObject instanceof Response) {    samlParameterName=SamlUtils.SAML_RESPONSE_PARAMETER;    if (samlObject instanceof Response) {      doCompress=false;    }  }  log.info("We are going to GET URL " + sbRequestUrl.toString() + (samlObject != null ? "?" + samlParameterName + "="+ URLEncoder.encode(SamlUtils.encodeSAMLObject(samlObject,doCompress)) : "")+ (relayStateParameter != null ? ("&RelayState=" + URLEncoder.encode(relayStateParameter)) : "")+ (signatureAlgorithm != null ? ("&SigAlg=" + URLEncoder.encode(signatureAlgorithm)) : "")+ (signature != null ? ("&Signature=" + URLEncoder.encode(signature)) : "")+ (extra != null ? "&" + extra : ""));}  }
class C{  public void onPeerConnectionClosed(PnPeer peer){}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  String message=data.getString("message");  Log.d(TAG,"From: " + from);  Log.d(TAG,"Message: " + message);  if (from.startsWith("/topics/")) {  } else {  }  sendNotification(message);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFontFaceUriElement(prefix,(AbstractDocument)doc);}  }
class C{  @Override public String toString(String pre){  StringBuilder result=new StringBuilder();  result.append(super.toString(pre));  result.append('\n').append(pre).append("Coverage: ").append(coverage);  result.append('\n').append(pre).append("Units: " + "\n");  for (  CLIQUEUnit<V> denseUnit : getDenseUnits()) {    result.append(pre).append("   ").append(denseUnit.toString()).append("   ").append(denseUnit.getIds().size()).append(" objects\n");  }  return result.toString();}  }
class C{  private static void localCanExecFirst(Local local,Stmt target) throws MergeResult {switch (target.et) {case E0:case En:    throw FAIL;case E1:  localCanExecFirst(local,target.getOp());break;case E2:AssignStmt as=(AssignStmt)target;Value op1=as.getOp1();Value op2=as.getOp2();switch (op1.vt) {case LOCAL:localCanExecFirst(local,op2);break;case FIELD:localCanExecFirst(local,op1.getOp());case STATIC_FIELD:localCanExecFirst(local,op2);break;case ARRAY:localCanExecFirst(local,op1.getOp1());localCanExecFirst(local,op1.getOp2());localCanExecFirst(local,op2);break;default :}break;}throw FAIL;}  }
class C{  @Override public Vertex parseElement(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  return parseElement(stream,elements,true,debug,network);}  }
class C{  @Override public void start(){  isPaused=false;  if (audioLine != null) {    audioLine.close();  }  audioLine=AudioUtils.selectAudioLine(system.getSettings().inputMixer);  (new Thread(new SpeechRecorder())).start();  Runtime.getRuntime().addShutdownHook(new Thread(null));}  }
class C{  @Override public void releaseConnection(){  Header header=getResponseHeader("content-type");  if (header != null) {    String contentTypeHeader=header.getValue();    if (contentTypeHeader != null && contentTypeHeader.equals("text/event-stream")) {      return;    }  }  super.releaseConnection();}  }
class C{  public float x(){  return this.points[0];}  }
class C{  public CDatabaseSettingsPanel(final IDatabase database){  super(new BorderLayout());  this.database=Preconditions.checkNotNull(database,"IE01317: Database argument can't be null");  this.database.addListener(databaseListener);  final JPanel lowerPanel=new JPanel(new BorderLayout());  final JPanel outerDescriptionPanel=new JPanel(new BorderLayout(5,5));  outerDescriptionPanel.setBorder(new TitledBorder("Database"));  final JPanel innerDescriptionPanel=new JPanel(new BorderLayout());  innerDescriptionPanel.setBorder(new EmptyBorder(0,0,8,0));  ToolTipManager.sharedInstance().setDismissDelay(Integer.MAX_VALUE);  final JLabel label=new CHelpLabel("Description" + ":",new DatabaseDescriptionFieldHelp());  final int PREFERRED_LABEL_WIDTH=110;  final int PREFERRED_LABEL_HEIGHT=25;  label.setPreferredSize(new Dimension(PREFERRED_LABEL_WIDTH,PREFERRED_LABEL_HEIGHT));  innerDescriptionPanel.add(label,BorderLayout.WEST);  innerDescriptionPanel.add(databaseDescriptionField,BorderLayout.CENTER);  outerDescriptionPanel.add(innerDescriptionPanel,BorderLayout.CENTER);  final JPanel pDB4=new JPanel(new BorderLayout());  pDB4.setBorder(new EmptyBorder(0,0,0,0));  final JPanel pDB3=new JPanel(new BorderLayout());  pDB3.setBorder(new EmptyBorder(5,0,5,0));  final JPanel pDB2=new JPanel(new BorderLayout());  pDB2.setBorder(new EmptyBorder(0,0,5,0));  final JPanel pDB=new JPanel(new GridLayout(4,1,5,5));  pDB.setBorder(new EmptyBorder(0,0,5,0));  final JPanel borderHelperPanel=new JPanel(new BorderLayout());  borderHelperPanel.setBorder(new TitledBorder("Connection"));  pDB.add(new CStandardPanel("DB host:",new DatabaseHostFieldHelp(),databaseHostField));  pDB.add(new CStandardPanel("DB name:",new DatabaseNameFieldHelp(),databaseNameField));  pDB.add(new CStandardPanel("DB user:",new DatabaseUserFieldHelp(),databaseUserField));  pDB.add(new CStandardPanel("DB password:",new CPasswordHelp(),passwordField));  pDB.add(new CStandardPanel("",null,showPasswordBox));  borderHelperPanel.add(pDB,BorderLayout.CENTER);  pDB2.add(borderHelperPanel,BorderLayout.CENTER);  final JPanel mainPanel=new JPanel(new GridLayout(1,2,5,5));  final JPanel p5_h=new JPanel(new BorderLayout());  final JPanel p5_h2=new JPanel(new BorderLayout());  mainPanel.setBorder(new EmptyBorder(0,0,5,0));  final JPanel savePasswordPanel=new JPanel(new BorderLayout());  savePasswordPanel.add(savePasswordBox,BorderLayout.WEST);  mainPanel.add(savePasswordPanel);  final JPanel autoConnectPanel=new JPanel(new BorderLayout());  autoConnectPanel.add(autoConnectBox,BorderLayout.WEST);  mainPanel.add(autoConnectPanel);  p5_h.setBorder(new TitledBorder(new TitledBorder("Behavior")));  p5_h.add(mainPanel,BorderLayout.CENTER);  p5_h2.setBorder(new EmptyBorder(0,0,5,0));  p5_h2.add(p5_h,BorderLayout.CENTER);  pDB3.add(pDB2,BorderLayout.NORTH);  final JPanel identityPanel=new JPanel(new BorderLayout());  final JPanel identitySubPanel=new JPanel(new BorderLayout());  identitySubPanel.setBorder(new TitledBorder(null,"Identity",TitledBorder.LEADING,TitledBorder.TOP,null,null));  identitySubPanel.add(new CStandardPanel("Identity" + ":",new DatabaseIdentityFieldHelp(),databaseIdentityField));  identityPanel.add(identitySubPanel,BorderLayout.CENTER);  pDB3.add(identityPanel,BorderLayout.CENTER);  pDB3.add(p5_h2,BorderLayout.SOUTH);  savePasswordBox.addActionListener(new InternalActionListener());  final JPanel centerPanel=new JPanel(new BorderLayout());  final JPanel buttonPanel=new JPanel(new GridLayout(1,3,5,5));  buttonPanel.setBorder(new EmptyBorder(0,2,0,2));  buttonPanel.add(testButton);  buttonPanel.add(saveButton);  final JPanel savePanel=new JPanel(new FlowLayout());  saveLabel=new JLabel("Please hit the Save button to use the current database connection from BinNavi");  saveLabel.setBorder(new CompoundBorder(new LineBorder(Color.RED,2),new EmptyBorder(5,5,5,5)));  saveLabel.setForeground(Color.RED);  savePanel.add(saveLabel);  centerPanel.add(savePanel,BorderLayout.NORTH);  centerPanel.add(buttonPanel,BorderLayout.CENTER);  pDB4.add(pDB3,BorderLayout.NORTH);  pDB4.add(centerPanel,BorderLayout.CENTER);  lowerPanel.add(outerDescriptionPanel,BorderLayout.NORTH);  lowerPanel.add(pDB4,BorderLayout.CENTER);  add(lowerPanel);  databaseDescriptionField.setText(this.database.getConfiguration().getDescription());  databaseHostField.setText(this.database.getConfiguration().getHost());  databaseNameField.setText(this.database.getConfiguration().getName());  databaseUserField.setText(this.database.getConfiguration().getUser());  databaseIdentityField.setText(this.database.getConfiguration().getIdentity());  passwordField.setText(this.database.getConfiguration().getPassword());  savePasswordBox.setSelected(this.database.getConfiguration().isSavePassword());  autoConnectBox.setSelected(this.database.getConfiguration().isAutoConnect());  updateSaveButton();  final UpdateListener updateListener=new UpdateListener();  databaseDescriptionField.getDocument().addDocumentListener(updateListener);  databaseHostField.getDocument().addDocumentListener(updateListener);  databaseNameField.getDocument().addDocumentListener(updateListener);  databaseUserField.getDocument().addDocumentListener(updateListener);  databaseIdentityField.getDocument().addDocumentListener(updateListener);  passwordField.getDocument().addDocumentListener(updateListener);  savePasswordBox.addItemListener(updateListener);  autoConnectBox.addItemListener(updateListener);  setupHotkeys();}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  @SuppressWarnings("try") private boolean solveDataFlow(LIR lir){  try (Indent indent=Debug.logAndIndent("solve data flow")){    AbstractBlockBase<?>[] blocks=lir.linearScanOrder();    int numIter=0;    int currentValueNum=1;    boolean firstRound=true;    boolean changed;    do {      changed=false;      try (Indent indent2=Debug.logAndIndent("new iteration")){        for (        AbstractBlockBase<?> block : blocks) {          BlockData data=blockData.get(block);          if (firstRound) {            data.entryValueNum=currentValueNum;          }          int valueNum=data.entryValueNum;          assert valueNum > 0;          boolean newState=false;          if (block == blocks[0] || block.isExceptionEntry()) {            Debug.log("kill all values at entry of block %d",block.getId());            clearValues(data.entryState,valueNum);          } else {            for (            AbstractBlockBase<?> predecessor : block.getPredecessors()) {              BlockData predData=blockData.get(predecessor);              newState|=mergeState(data.entryState,predData.exitState,valueNum);            }          }          valueNum+=data.entryState.length;          if (newState || firstRound) {            try (Indent indent3=Debug.logAndIndent("update block %d",block.getId())){              int[] iterState=data.exitState;              copyState(iterState,data.entryState);              List<LIRInstruction> instructions=lir.getLIRforBlock(block);              for (              LIRInstruction op : instructions) {                valueNum=updateState(iterState,op,valueNum);              }              changed=true;            }           }          if (firstRound) {            currentValueNum=valueNum;          }        }        firstRound=false;      }       numIter++;      if (numIter > 5) {        return false;      }    } while (changed);  }   return true;}  }
class C{  public final double lengthSq(){  return x * x + y * y + z * z;}  }
class C{  public NodeId(int namespaceIndex,UUID value){  if (namespaceIndex < 0 || namespaceIndex > 65535)   throw new IllegalArgumentException("namespaceIndex out of bounds");  if (value == null)   throw new IllegalArgumentException("Numeric NodeId cannot be null");  type=IdType.Guid;  this.value=value;  this.namespaceIndex=namespaceIndex;}  }
class C{  private void init(){  final JSplitPane split=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);  inputPanel.setBorder(BorderFactory.createTitledBorder("Input data"));  targetPanel.setBorder(BorderFactory.createTitledBorder("Target data"));  split.setLeftComponent(inputPanel);  split.setRightComponent(targetPanel);  split.setResizeWeight(.5);  split.setBorder(null);  setLayout(new GridBagLayout());  GridBagConstraints wholePanelConstraints=new GridBagConstraints();  wholePanelConstraints.fill=GridBagConstraints.BOTH;  wholePanelConstraints.weightx=0.5;  wholePanelConstraints.weighty=0.5;  wholePanelConstraints.gridx=0;  wholePanelConstraints.gridy=0;  add(split,wholePanelConstraints);}  }
class C{  @RequestMapping(value="/test/{id}",produces="application/json",method=RequestMethod.DELETE) public BasicCase delete(@PathVariable("id") String id){  return null;}  }
class C{  public boolean isStartMinimized(){  return startMinimized;}  }
class C{  public int length(){  int idx=actualArrayLength - 1;  while (idx >= 0 && bits[idx] == 0) {    --idx;  }  actualArrayLength=idx + 1;  if (idx == -1) {    return 0;  }  int i=ELM_SIZE - 1;  long val=bits[idx];  while ((val & (TWO_N_ARRAY[i])) == 0 && i > 0) {    i--;  }  return (idx << OFFSET) + i + 1;}  }
class C{  public static long[] copyOfRange(long[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  long[] copy=new long[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  private KeyTab(String filename){  tabName=filename;  try {    lastModified=new File(tabName).lastModified();    try (KeyTabInputStream kis=new KeyTabInputStream(new FileInputStream(filename))){      load(kis);    }   } catch (  FileNotFoundException e) {    entries.clear();    isMissing=true;  }catch (  Exception ioe) {    entries.clear();    isValid=false;  }}  }
class C{  public String readLine(int i){  String line=new String("");  try {    FileReader fr=new FileReader(file);    BufferedReader b=new BufferedReader(fr);    boolean eof=false;    for (int j=0; j < i; j++) {      if (eof) {        throw new IllegalArgumentException("Line " + i + " is not found in the file "+ file.getName()+ ".");      }      line=b.readLine();      if (line == null) {        eof=true;      }    }    line=b.readLine();    b.close();  } catch (  IOException e) {    throw new IllegalArgumentException("File " + file.getName() + " is unreadable : "+ e.toString());  }  return line;}  }
class C{  public final void warn(final String message){  if (isWarnEnabled()) {    output(Priority.WARN,message,null);  }}  }
class C{  public void connectFailed(Connection connection,IOException failure){  Route failedRoute=connection.getRoute();  if (failedRoute.getProxy().type() != Proxy.Type.DIRECT && proxySelector != null) {    proxySelector.connectFailed(uri,failedRoute.getProxy().address(),failure);  }  routeDatabase.failed(failedRoute,failure);}  }
class C{  public void propertyChange(PropertyChangeEvent pce){  String propertyName=pce.getPropertyName();  Object newVal=pce.getNewValue();  if (propertyName.equals(TimelineLayer.PlayFilterProperty)) {    timerControl.enableForwardButton(((Boolean)newVal).booleanValue());  } else   if (propertyName.equals(TimelineLayer.MouseTimeProperty)) {    updateMouseTimeDisplay(((Long)newVal).longValue());  } else   if (propertyName.equals(TimelineLayer.EventDetailsProperty)) {    updateEventDetailsDisplay((String)newVal);  }  revalidate();}  }
class C{  public double dotProduct(double[] other) throws Exception {  double result=0;  int n1=m_values.numValues();  for (int i=0; i < n1; i++) {    int ind1=m_values.index(i);    result+=m_values.valueSparseDouble(i) * other[ind1];  }  return result;}  }
class C{  private static void printUserCalendars(CalendarService service) throws IOException, ServiceException {  CalendarFeed resultFeed=service.getFeed(metafeedUrl,CalendarFeed.class);  System.out.println("Your calendars:");  System.out.println();  for (int i=0; i < resultFeed.getEntries().size(); i++) {    CalendarEntry entry=resultFeed.getEntries().get(i);    System.out.println("\t" + entry.getTitle().getPlainText());  }  System.out.println();}  }
class C{  public boolean toggle(){  return !mIsVisibleAfter;}  }
class C{  public static InjectorImpl current(ClassLoader loader){  if (loader instanceof DynamicClassLoader) {    return _localManager.getLevel(loader);  } else {    SoftReference<InjectorImpl> injectRef=_loaderManagerMap.get(loader);    if (injectRef != null) {      return injectRef.get();    } else {      return null;    }  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.GENERATOR_MODEL__ENTRIES:    return ((InternalEList<?>)getEntries()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private Producer<CloseableReference<CloseableImage>> newBitmapCacheGetToLocalTransformSequence(Producer<EncodedImage> inputProducer){  ThumbnailProducer<EncodedImage>[] defaultThumbnailProducers=new ThumbnailProducer[1];  defaultThumbnailProducers[0]=mProducerFactory.newLocalExifThumbnailProducer();  return newBitmapCacheGetToLocalTransformSequence(inputProducer,defaultThumbnailProducers);}  }
class C{  public void clearImportedPackages(){  importedPackages=new ArrayList();  importedPackages.add("java.lang");}  }
class C{  @Override public void onReceive(Object message) throws Exception {  if (message.equals("checking")) {    List<Map<String,Object>> dueJobs=EtlJobDao.getDueJobs();    Set<Integer> whiteList=Global.getWhiteList();    Logger.info("total " + dueJobs.size() + " jobs due, white list : "+ whiteList);    for (    Map<String,Object> dueJob : dueJobs) {      Integer whEtlJobId=((Long)dueJob.get("wh_etl_job_id")).intValue();      if (whiteList != null && !whiteList.contains(whEtlJobId)) {        continue;      }      Logger.info("running job: job id :" + whEtlJobId);      EtlJobName etlJobName=EtlJobName.valueOf((String)dueJob.get("wh_etl_job_name"));      EtlType etlType=EtlType.valueOf((String)dueJob.get("wh_etl_type"));      Integer refId=(Integer)dueJob.get("ref_id");      RefIdType refIdType=RefIdType.valueOf((String)dueJob.get("ref_id_type"));      String cmdParam=(String)dueJob.get("cmd_param");      EtlJobMessage etlMsg=new EtlJobMessage(etlJobName,etlType,whEtlJobId,refId,refIdType,cmdParam);      if (dueJob.get("input_params") != null) {        etlMsg.setInputParams(Json.parse((String)dueJob.get("input_params")));      }      EtlJobDao.updateNextRun(whEtlJobId,(String)dueJob.get("cron_expr"),new Date());      Long whExecId=EtlJobDao.insertNewRun(whEtlJobId);      etlMsg.setWhEtlExecId(whExecId);      StringBuilder s=new StringBuilder("Current running jobs : ");      for (      int i : Global.getCurrentRunningJob()) {        s.append(i).append("\t");      }      Logger.info(s.toString());      if (Global.getCurrentRunningJob().contains(etlMsg.getWhEtlJobId())) {        Logger.error("The previous job is still running! Abort this job : " + etlMsg.toDebugString());        EtlJobDao.endRun(etlMsg.getWhEtlExecId(),EtlJobStatus.ERROR,"Previous is still running, Aborted!");      } else {        Global.getCurrentRunningJob().add(etlMsg.getWhEtlJobId());        Logger.info("Send message : " + etlMsg.toDebugString());        ActorRegistry.etlJobActor.tell(etlMsg,getSelf());      }    }  }}  }
class C{  @LargeTest public void testPropertiesH263QCIF() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_16kHz_32kbps_m_0_26.3gp";  final int aspectRatio=MediaProperties.ASPECT_RATIO_11_9;  final int fileType=MediaProperties.FILE_3GP;  final int videoCodecType=MediaProperties.VCODEC_H263;  final int duration=26933;  final int videoBitrate=384000;  final int audioBitrate=64000;  final int fps=15;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=16000;  final int audioChannel=1;  final int videoProfile=MediaProperties.H263Profile.H263ProfileBaseline;  final int videoLevel=MediaProperties.H263Level.H263Level10;  final int width=176;  final int height=MediaProperties.HEIGHT_144;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  protected Anonymous_constantDeclaration_2_Impl(){  super();}  }
class C{  CounterNode remove(List<String> hierarchyElements){  CounterNode cur=this;  if (hierarchyElements.isEmpty()) {    log.error("Cannot remove a CounterNode from an empty list of hierarchy elements. Returning null.");    return null;  }  String keyToRemove=hierarchyElements.remove(hierarchyElements.size() - 1);  for (  String element : hierarchyElements) {    cur=cur.children.get(element);    if (cur == null) {      break;    }  }  CounterNode removed=null;  if (cur != null) {    removed=cur.children.remove(keyToRemove);  }  return removed;}  }
class C{  public double[][] confusionMatrix(){  return m_delegate.confusionMatrix();}  }
class C{  protected Node newNode(){  return new StyleSheetProcessingInstruction();}  }
class C{  public boolean isEditing(){  return false;}  }
class C{  public float project(FloatMatrix other){  float norm=0, dot=0;  for (int i=0; i < this.length; i++) {    float x=get(i);    norm+=x * x;    dot+=x * other.get(i);  }  return dot / norm;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/full-copies") @CheckPermission(roles={Role.SYSTEM_ADMIN},acls={ACL.ANY}) public TaskList createConsistencyGroupFullCopy(@PathParam("id") URI cgURI,VolumeFullCopyCreateParam param){  List<Volume> cgVolumes=verifyCGForFullCopyRequest(cgURI);  StorageSystem storage=_permissionsHelper.getObjectById(cgVolumes.get(0).getStorageController(),StorageSystem.class);  if (Type.ibmxiv.name().equalsIgnoreCase(storage.getSystemType())) {    throw APIException.methodNotAllowed.notSupportedWithReason("Consistency Group Full Copy is not supported on IBM XIV storage systems");  }  validateVolumeNotPartOfApplication(cgVolumes,FULL_COPY);  return getFullCopyManager().createFullCopy(cgVolumes.get(0).getId(),param);}  }
class C{  public MappedFieldType unmappedFieldType(String type){  final ImmutableMap<String,MappedFieldType> unmappedFieldMappers=this.unmappedFieldTypes;  MappedFieldType fieldType=unmappedFieldMappers.get(type);  if (fieldType == null) {    final Mapper.TypeParser.ParserContext parserContext=documentMapperParser().parserContext(type);    Mapper.TypeParser typeParser=parserContext.typeParser(type);    if (typeParser == null) {      throw new IllegalArgumentException("No mapper found for type [" + type + "]");    }    final Mapper.Builder<?,?> builder=typeParser.parse("__anonymous_" + type,ImmutableMap.<String,Object>of(),parserContext);    final BuilderContext builderContext=new BuilderContext(indexSettings,new ContentPath(1));    fieldType=((FieldMapper)builder.build(builderContext)).fieldType();    this.unmappedFieldTypes=ImmutableMap.<String,MappedFieldType>builder().putAll(unmappedFieldMappers).put(type,fieldType).build();  }  return fieldType;}  }
class C{  @Override public void synchronizeChanged(){}  }
class C{  @DSComment("Data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.356 -0500",hash_original_method="8ABFD76C6BB25FBE1C10045F87B30D96",hash_generated_method="9CA28EB8591627B94C2C841FF158C3E8") public static void distanceBetween(double startLatitude,double startLongitude,double endLatitude,double endLongitude,float[] results){  if (results == null || results.length < 1) {    throw new IllegalArgumentException("results is null or has length < 1");  }  computeDistanceAndBearing(startLatitude,startLongitude,endLatitude,endLongitude,results);}  }
class C{  public String suggestBackupSetName(){  String baseName=getDate();  String fullName=null;  String[] dirNames=getBackupRoot().list();  for (int i=0; i < 99; i++) {    fullName=String.format("%s_%02d",baseName,i);    boolean foundFileNameMatch=false;    for (    String name : dirNames) {      if (name.equals(fullName)) {        foundFileNameMatch=true;        break;      }    }    if (!foundFileNameMatch) {      return fullName;    }    log.debug("Operations backup directory: {} already exists",fullName);  }  return fullName;}  }
class C{  public static void resume(final JFrame parent,final IDebugger debugger){  checkArguments(parent,debugger);  if (!debugger.isConnected()) {    return;  }  try {    debugger.getProcessManager().setActiveThread(null);    debugger.resume();  } catch (  final DebugExceptionWrapper e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00029: " + "Could not send resume command to the debug client";    final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the resume command to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The state of the debugged process remains unchanged."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  private static InetAddress tryLocalHostBeforeReturning(InetAddress preliminaryResult,SocketAddress targetAddress,boolean logging) throws IOException {  InetAddress localhostName=InetAddress.getLocalHost();  if (preliminaryResult.equals(localhostName)) {    return preliminaryResult;  } else   if (tryToConnect(localhostName,targetAddress,AddressDetectionState.SLOW_CONNECT.getTimeout(),logging)) {    LOG.debug("Preferring {} (InetAddress.getLocalHost()) for local bind point over previous candidate {}",localhostName,preliminaryResult);    return localhostName;  } else {    return preliminaryResult;  }}  }
class C{  public BufferedImage takeScreenshot(){  Debug.setDebugLevel(3);  File scrFile=driver.getScreenshotAs(OutputType.FILE);  BufferedImage bufferedImage=null;  try {    bufferedImage=ImageIO.read(scrFile);  } catch (  IOException e) {    e.printStackTrace();  }  return bufferedImage;}  }
class C{  public static void runWithAllOptimizationLevels(final ContextAction action){  runWithOptimizationLevel(action,-1);  runWithOptimizationLevel(action,0);  runWithOptimizationLevel(action,1);}  }
class C{  public Matrix4d rotationY(double ang){  double sin, cos;  sin=Math.sin(ang);  cos=Math.cos(ang);  m00=cos;  m01=0.0;  m02=-sin;  m03=0.0;  m10=0.0;  m11=1.0;  m12=0.0;  m13=0.0;  m20=sin;  m21=0.0;  m22=cos;  m23=0.0;  m30=0.0;  m31=0.0;  m32=0.0;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  public void readString(ASN1StringType type) throws IOException {  if (tag == type.id) {    readContent();  } else   if (tag == type.constrId) {    throw new ASN1Exception("Decoding constructed ASN.1 string type is not provided");  } else {    throw expected("string");  }}  }
class C{  public static final void fillElementWithBigInteger(Element element,BigInteger biginteger){  String encodedInt=encode(biginteger);  if (!XMLUtils.ignoreLineBreaks() && encodedInt.length() > BASE64DEFAULTLENGTH) {    encodedInt="\n" + encodedInt + "\n";  }  Document doc=element.getOwnerDocument();  Text text=doc.createTextNode(encodedInt);  element.appendChild(text);}  }
class C{  public boolean isPureTouch(){  return pureTouch;}  }
class C{  void onShutdown2(){}  }
class C{  public static String constructShardName(int replicaId,int dbId){  if (dbId == 0) {    return String.valueOf(replicaId);  } else {    return String.format("%dd%d",replicaId,dbId);  }}  }
class C{  private static Class<?> searchInterface(Class<?> clazz,String interfaceName,List<Class<?>> searched){  try {    if ((clazz != null) && !clazz.equals(Object.class)) {      Class<?>[] interfaces=clazz.getInterfaces();      for (      Class<?> interf : interfaces) {        if (!searched.contains(interf)) {          if (interf.getCanonicalName().equals(interfaceName)) {            return interf;          }          searched.add(interf);          Class<?> found=searchInterface(interf,interfaceName,searched);          if (null != found) {            return found;          }        }      }      return searchInterface(clazz.getSuperclass(),interfaceName,searched);    }    return null;  } catch (  Throwable t) {    LOG.warn("Unexpected error occurred checking the " + clazz.getName() + " for interface "+ interfaceName+ ".");    return null;  }}  }
class C{  public long id(){  return Long.valueOf(file.getName().substring(file.getName().lastIndexOf(PART_SEPARATOR,file.getName().lastIndexOf(PART_SEPARATOR) - 1) + 1,file.getName().lastIndexOf(PART_SEPARATOR)));}  }
class C{  private void updateWeightsNumericClass(int instNum){  int i, j;  double temp, temp2;  int[] tempSorted=null;  double[] tempDist=null;  double distNorm=1.0;  int firstI, secondI;  Instance inst=m_trainInstances.instance(instNum);  if (m_weightByDistance) {    tempDist=new double[m_stored[0]];    for (j=0, distNorm=0; j < m_stored[0]; j++) {      tempDist[j]=m_karray[0][j][0];      distNorm+=m_weightsByRank[j];    }    tempSorted=Utils.sort(tempDist);  }  for (i=0; i < m_stored[0]; i++) {    if (m_weightByDistance) {      temp=difference(m_classIndex,inst.value(m_classIndex),m_trainInstances.instance((int)m_karray[0][tempSorted[i]][1]).value(m_classIndex));      temp*=(m_weightsByRank[i] / distNorm);    } else {      temp=difference(m_classIndex,inst.value(m_classIndex),m_trainInstances.instance((int)m_karray[0][i][1]).value(m_classIndex));      temp*=(1.0 / m_stored[0]);    }    m_ndc+=temp;    Instance cmp;    cmp=(m_weightByDistance) ? m_trainInstances.instance((int)m_karray[0][tempSorted[i]][1]) : m_trainInstances.instance((int)m_karray[0][i][1]);    double temp_diffP_diffA_givNearest=difference(m_classIndex,inst.value(m_classIndex),cmp.value(m_classIndex));    for (int p1=0, p2=0; p1 < inst.numValues() || p2 < cmp.numValues(); ) {      if (p1 >= inst.numValues()) {        firstI=m_trainInstances.numAttributes();      } else {        firstI=inst.index(p1);      }      if (p2 >= cmp.numValues()) {        secondI=m_trainInstances.numAttributes();      } else {        secondI=cmp.index(p2);      }      if (firstI == m_trainInstances.classIndex()) {        p1++;        continue;      }      if (secondI == m_trainInstances.classIndex()) {        p2++;        continue;      }      temp=0.0;      temp2=0.0;      if (firstI == secondI) {        j=firstI;        temp=difference(j,inst.valueSparse(p1),cmp.valueSparse(p2));        p1++;        p2++;      } else       if (firstI > secondI) {        j=secondI;        temp=difference(j,0,cmp.valueSparse(p2));        p2++;      } else {        j=firstI;        temp=difference(j,inst.valueSparse(p1),0);        p1++;      }      temp2=temp_diffP_diffA_givNearest * temp;      if (m_weightByDistance) {        temp2*=(m_weightsByRank[i] / distNorm);      } else {        temp2*=(1.0 / m_stored[0]);      }      m_ndcda[j]+=temp2;      if (m_weightByDistance) {        temp*=(m_weightsByRank[i] / distNorm);      } else {        temp*=(1.0 / m_stored[0]);      }      m_nda[j]+=temp;    }  }}  }
class C{  public static NodeList selectNodeList(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodelist();}  }
class C{  protected Integer wrapKey(int k){  return new Integer(k);}  }
class C{  public void addAttendee(Attendee attendee){  addProperty(attendee);}  }
class C{  private boolean verifyStoragePoolAvailability(VirtualPool vpool,Volume existingVolume){  if (existingVolume.isVPlexVolume(dbClient)) {    if (null == existingVolume.getAssociatedVolumes() || existingVolume.getAssociatedVolumes().isEmpty()) {      _log.error("VPLEX volume {} has no backend volumes.",existingVolume.forDisplay());      throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(existingVolume.forDisplay());    }    int matchedPools=0;    for (    String backingVolumeId : existingVolume.getAssociatedVolumes()) {      Volume backingVolume=dbClient.queryObject(Volume.class,URI.create(backingVolumeId));      List<StoragePool> pools=new ArrayList<StoragePool>();      if (existingVolume.getVirtualArray().equals(backingVolume.getVirtualArray())) {        pools=VirtualPool.getValidStoragePools(vpool,dbClient,true);      } else {        VirtualPool haVpool=VirtualPoolChangeAnalyzer.getHaVpool(vpool,dbClient);        if (haVpool != null) {          pools=VirtualPool.getValidStoragePools(haVpool,dbClient,true);        }      }      if (!pools.isEmpty()) {        for (        StoragePool pool : pools) {          if (pool.getId().equals(backingVolume.getPool())) {            matchedPools++;          }        }      }    }    if (matchedPools == existingVolume.getAssociatedVolumes().size()) {      return true;    }  } else {    List<StoragePool> pools=VirtualPool.getValidStoragePools(vpool,dbClient,true);    if (!pools.isEmpty()) {      for (      StoragePool pool : pools) {        if (pool.getId().equals(existingVolume.getPool())) {          return true;        }      }    }  }  return false;}  }
class C{  public QueryService offset(Integer offset){  this.offset=offset;  return this;}  }
class C{  public Sound(){  this.state=RFuture.success(this);}  }
class C{  public boolean isPinned(){  return pinned;}  }
class C{  public int unionSize(BitVector v2){  return BitsUtil.unionSize(bits,v2.bits);}  }
class C{  public RemoteConnection jndiName(String jndiName){  this.jndiName=jndiName;  return this;}  }
class C{  public static String readLastMailAndSetCommonPassword(String userName) throws Exception {  String[] userKeyAndPass=getMailReader().readPassAndKeyFromEmail(userName);  String userKey=userKeyAndPass[0];  String userPwd=userKeyAndPass[1];  IdentityService id=ServiceFactory.getDefault().getIdentityService(userKey,userPwd);  id.changePassword(userPwd,DEFAULT_PASSWORD);  return userKey;}  }
class C{  private StringBuffer createColumns(int AD_Table_ID,StringBuffer mandatory){  StringBuffer sb=new StringBuffer();  String sql="SELECT c.ColumnName, c.IsUpdateable, c.IsMandatory," + " c.AD_Reference_ID, c.AD_Reference_Value_ID, DefaultValue, SeqNo, " + " c.FieldLength, c.ValueMin, c.ValueMax, c.VFormat, c.Callout, "+ " c.Name, c.Description, c.ColumnSQL, c.IsEncrypted "+ "FROM AD_Column c "+ "WHERE c.AD_Table_ID=?"+ " AND c.IsActive='Y'"+ " AND c.ColumnName <> 'AD_Client_ID'"+ " AND c.ColumnName <> 'AD_Org_ID'"+ " AND c.ColumnName <> 'IsActive'"+ " AND c.ColumnName NOT LIKE 'Created%'"+ " AND c.ColumnName NOT LIKE 'Updated%' "+ "ORDER BY c.ColumnName";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      String columnName=rs.getString(1);      boolean isUpdateable="Y".equals(rs.getString(2));      boolean isMandatory="Y".equals(rs.getString(3));      int displayType=rs.getInt(4);      int AD_Reference_Value_ID=rs.getInt(5);      String defaultValue=rs.getString(6);      int seqNo=rs.getInt(7);      int fieldLength=rs.getInt(8);      String ValueMin=rs.getString(9);      String ValueMax=rs.getString(10);      String VFormat=rs.getString(11);      String Callout=rs.getString(12);      String Name=rs.getString(13);      String Description=rs.getString(14);      String ColumnSQL=rs.getString(15);      boolean virtualColumn=ColumnSQL != null && ColumnSQL.length() > 0;      boolean IsEncrypted="Y".equals(rs.getString(16));      sb.append("@Column(name=\"" + Name + "\") ");      sb.append(createColumnMethods(mandatory,columnName,isUpdateable,isMandatory,displayType,AD_Reference_Value_ID,fieldLength,defaultValue,ValueMin,ValueMax,VFormat,Callout,Name,Description,virtualColumn,IsEncrypted));      if (seqNo == 1)       sb.append(createKeyNamePair(columnName,displayType));    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return sb;}  }
class C{  public static void downloadAsync(String url,String file,HttpCallback<File> callback){  downloadAsync(url,file,null,callback,new StrParam[0]);}  }
class C{  public void deleteRefactoringHistory(final IProject project,IProgressMonitor monitor) throws CoreException {  Assert.isNotNull(project);  if (monitor == null)   monitor=new NullProgressMonitor();  try {    monitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_deleting_refactorings,100);    final String name=project.getName();    final IFileStore stateStore=EFS.getLocalFileSystem().getStore(RefactoringCorePlugin.getDefault().getStateLocation());    if (name.equals(NAME_WORKSPACE_PROJECT)) {      final IFileStore metaStore=stateStore.getChild(NAME_HISTORY_FOLDER).getChild(name);      metaStore.delete(EFS.NONE,new SubProgressMonitor(monitor,100));    } else {      final URI uri=project.getLocationURI();      if (uri != null && project.isAccessible()) {        try {          final IFileStore metaStore=stateStore.getChild(NAME_HISTORY_FOLDER).getChild(name);          metaStore.delete(EFS.NONE,new SubProgressMonitor(monitor,20));          final IFileStore projectStore=EFS.getStore(uri).getChild(NAME_HISTORY_FOLDER);          projectStore.delete(EFS.NONE,new SubProgressMonitor(monitor,20));        }  finally {          project.refreshLocal(IResource.DEPTH_INFINITE,new SubProgressMonitor(monitor,60));        }      }    }  }  finally {    monitor.done();  }}  }
class C{  public ExecuteAction(String action){  super();  addParameterToRequest("action",action);}  }
class C{  public LeatherArmorMetaBuilder start(){  return new LeatherArmorMetaBuilder();}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix3D other){  if (other instanceof SelectedSparseObjectMatrix3D) {    SelectedSparseObjectMatrix3D otherMatrix=(SelectedSparseObjectMatrix3D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseObjectMatrix3D) {    SparseObjectMatrix3D otherMatrix=(SparseObjectMatrix3D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public void addMessage(Response response){  if (response == null) {    messageSequence.add(false);  } else   messageSequence.add(response);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.340 -0500",hash_original_method="3EEF58200AED128D87652E78B0B409B1",hash_generated_method="65F9D2852DE6B216B7C6028C7CC4DADA") private void buildSlots(ObjectStreamField[] fields){  slotsToSerialize=new ObjectSlot[fields.length];  for (int i=0; i < fields.length; i++) {    ObjectSlot s=new ObjectSlot();    slotsToSerialize[i]=s;    s.field=fields[i];  }}  }
class C{  public SearchSourceBuilder scriptField(String name,Script script){  if (scriptFields == null) {    scriptFields=new ArrayList<>();  }  scriptFields.add(new ScriptField(name,script));  return this;}  }
class C{  public FloatMatrix put(int r,int[] indices,FloatMatrix x){  if (x.isScalar()) {    return put(r,indices,x.scalar());  }  for (int i=0; i < indices.length; i++) {    put(r,indices[i],x.get(i));  }  return this;}  }
class C{  public void addOnTransactionBroadcastListener(OnTransactionBroadcastListener listener){  addOnTransactionBroadcastListener(Threading.USER_THREAD,listener);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.656 -0500",hash_original_method="C03E3395BFF21729CC93322BBC7A82DE",hash_generated_method="6D1AF7E63DEE3A9E3B5F0EF4008EBD20") private Photo(){}  }
class C{  @Override public Response listContainerTypes(){  return Response.ok().entity(gson.toJson(ContainerSize.values())).build();}  }
class C{  public boolean isStopped(){  return this.server == null || !this.server.isAlive();}  }
class C{  public Builder byMonth(Integer... months){  return byMonth(Arrays.asList(months));}  }
class C{  public static String toString(final Object... array){  final StringBuilder buffer=new StringBuilder("[");  int count=0;  if (array != null) {    for (    final Object element : array) {      buffer.append(count++ > 0 ? ", " : StringUtils.EMPTY_STRING).append(element);    }  }  buffer.append("]");  return buffer.toString();}  }
class C{  public ResourceException(IStatus status){  super(status);}  }
class C{  public static String formatFileSize(long fileSize){  return formatFileSize(fileSize,0);}  }
class C{  public boolean isShowAdjustorFunctions(){  return m_adjustorFunctionCheckbox.isSelected();}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeObject(approximation);}  }
class C{  public void testQueueViewMbean() throws Exception {  try {    addMessages();    validateCounts(MESSAGE_COUNT,MESSAGE_COUNT,MESSAGE_COUNT * 2);    List<String> tokens=Arrays.asList(new String[]{"*"});    for (    String token : tokens) {      List<ObjectInstance> queueList=JmxMBeansUtil.queryMBeans(createJmxConnection(),"type=Broker,brokerName=localbroker,destinationType=Queue,destinationName=" + token);      for (      ObjectInstance queue : queueList) {        ObjectName queueName=queue.getObjectName();        QueueViewMBean proxy=MBeanServerInvocationHandler.newProxyInstance(createJmxConnection(),queueName,QueueViewMBean.class,true);        int removed=proxy.removeMatchingMessages(MSG_SEL_WITH_PROPERTY);        LOG.info("Removed: " + removed);      }    }    validateCounts(0,MESSAGE_COUNT,MESSAGE_COUNT);  }  finally {    purgeAllMessages();  }}  }
class C{  protected final void pushCOND(ConditionOperand c){  if (VM.VerifyAssertions) {    opt_assert(cc == null);  }  cc=c;}  }
class C{  public final RelInfo traverse(RelNode relNode) throws Exception {  List<RelInfo> inputStreams=new ArrayList<>();  for (  RelNode input : relNode.getInputs()) {    inputStreams.add(traverse(input));  }  ApexRelNode.RelContext relContext=new ApexRelNode.RelContext(dag,typeFactory,tupleSchemaRegistry);  RelInfo currentNodeRelInfo;  ApexRelNode apexRelNode=ApexRelNode.relNodeMapping.get(relNode.getClass());  if (apexRelNode == null) {    throw new UnsupportedOperationException("RelNode " + relNode.getRelTypeName() + " is not supported.");  }  currentNodeRelInfo=apexRelNode.visit(relContext,relNode,inputStreams);  if (currentNodeRelInfo != null && inputStreams.size() != 0) {    for (int i=0; i < inputStreams.size(); i++) {      RelInfo inputStream=inputStreams.get(i);      Operator.OutputPort outputPort=inputStream.getOutPort();      Operator.InputPort inputPort=currentNodeRelInfo.getInputPorts().get(i);      String streamName=OperatorUtils.getUniqueStreamName(inputStream.getRelName(),currentNodeRelInfo.getRelName());      Class schema;      if (inputStream.getOutRelDataType() != null) {        schema=TupleSchemaRegistry.getSchemaForRelDataType(tupleSchemaRegistry,streamName,inputStream.getOutRelDataType());      } else       if (inputStream.getClazz() != null) {        schema=inputStream.getClazz();      } else {        throw new RuntimeException("Unexpected condition reached.");      }      dag.setOutputPortAttribute(outputPort,Context.PortContext.TUPLE_CLASS,schema);      dag.setInputPortAttribute(inputPort,Context.PortContext.TUPLE_CLASS,schema);      dag.addStream(streamName,outputPort,inputPort);    }  }  if (currentNodeRelInfo.getOutPort() == null) {    String schemaJar=tupleSchemaRegistry.generateCommonJar();    String jars=dag.getAttributes().get(Context.DAGContext.LIBRARY_JARS);    dag.setAttribute(Context.DAGContext.LIBRARY_JARS,((jars != null) && (jars.length() != 0)) ? jars + "," + schemaJar : schemaJar);  }  return currentNodeRelInfo;}  }
class C{  @GwtIncompatible CacheBuilder<K,V> lenientParsing(){  strictParsing=false;  return this;}  }
class C{  private static boolean isParameterSeparator(char c){  if (Character.isWhitespace(c)) {    return true;  }  for (  char separator : PARAMETER_SEPARATORS) {    if (c == separator) {      return true;    }  }  return false;}  }
class C{  private void createDriverTask(VolumeConsistencyGroup consistencyGroup,List<VolumeClone> clones){  String taskId=String.format("%s+%s+%s",StorageDriverSimulator.DRIVER_NAME,OP_NAME,UUID.randomUUID().toString());  _log.info("Creating task {} for operation of type {}",taskId,OP_NAME);  _task=new CreateGroupCloneDriverTask(taskId,consistencyGroup,clones);  _task.setStatus(DriverTask.TaskStatus.PROVISIONING);}  }
class C{  public static int longCompare(long lhs,long rhs){  return lhs < rhs ? -1 : (lhs == rhs ? 0 : 1);}  }
class C{  public DynamicValidationRefactoringChange(final JavaRefactoringDescriptor descriptor,final String name,final Change[] changes){  super(name,changes);  Assert.isNotNull(descriptor);  Assert.isTrue(!descriptor.validateDescriptor().hasFatalError(),RefactoringCoreMessages.DynamicValidationRefactoringChange_fatal_error);  fDescriptor=descriptor;}  }
class C{  protected Element parseCommentOrXMLDeclaration(Reader is,String endTag) throws IOException {  char endTagChars[]=endTag.toCharArray();  int endTagPos=0;  StringBuilder text=new StringBuilder();  boolean ended=false;  while (!ended) {    int in=read(is);    if (in == -1) {      break;    }    char c=(char)in;    if (c == endTagChars[endTagPos]) {      endTagPos++;      if (endTagPos == endTagChars.length) {        ended=true;      }    } else {      if (endTagPos != 0) {        if (c == endTagChars[0] && endTagPos > 1) {          text.append(c);          continue;        }        text.append(endTagChars,0,endTagPos);        endTagPos=0;      }      text.append(c);    }  }  String elementName=null;  if (endTag.equals("-->")) {    elementName="comment";  } else   if (endTag.equals(">")) {    elementName="XML declaration";  } else {    if (eventParser) {      textElement(text.toString());      return null;    }    return createNewTextElement(text.toString());  }  if (eventParser) {    return null;  }  Element comment=createNewElement(elementName);  comment.setAttribute("content",text.toString());  comment.isComment=true;  return comment;}  }
class C{  public DefaultAndCondition(Condition c1,Condition c2){  super(c1,c2);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof FBSavepoint))   return false;  FBSavepoint that=(FBSavepoint)obj;  return this.name == null ? this.savepointId == that.savepointId : this.name.equals(that.name);}  }
class C{  private void updateLockMembers(){  if (this.lockNeedsUpdate && this.lockId != null) {    TXLockService.createDTLS().updateParticipants(this.lockId,this.msgMap.keySet());  }}  }
class C{  @RequestMapping(value="/users/{login}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<Void> deleteUser(@PathVariable String login){  log.debug("REST request to delete User: {}",login);  userService.deleteUserInformation(login);  return ResponseEntity.ok().headers(HeaderUtil.createAlert("user-management.deleted",login)).build();}  }
class C{  protected boolean matchesFilter(final String input,final String[] filter){  for (  final String match : filter) {    if (!input.contains(match))     return false;  }  return true;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("Reference Class Name: " + className + "\n");  int len=addrs.size();  for (int i=0; i < len; i++)   buf.append(get(i).toString());  return buf.toString();}  }
class C{  public DBNote updateNoteAndSync(DBNote oldNote,String newContent,ICallback callback){  debugPrintFullDB();  DBNote newNote;  if (newContent == null) {    newNote=new DBNote(oldNote.getId(),oldNote.getRemoteId(),oldNote.getModified(),oldNote.getTitle(),oldNote.getContent(),DBStatus.LOCAL_EDITED);  } else {    newNote=new DBNote(oldNote.getId(),oldNote.getRemoteId(),Calendar.getInstance(),NoteUtil.generateNoteTitle(newContent),newContent,DBStatus.LOCAL_EDITED);  }  SQLiteDatabase db=this.getWritableDatabase();  ContentValues values=new ContentValues();  values.put(key_status,newNote.getStatus().getTitle());  values.put(key_title,newNote.getTitle());  values.put(key_modified,newNote.getModified(DATE_FORMAT));  values.put(key_content,newNote.getContent());  int rows=db.update(table_notes,values,key_id + " = ? AND " + key_content+ " != ?",new String[]{String.valueOf(newNote.getId()),newNote.getContent()});  db.close();  if (rows > 0) {    if (callback != null) {      serverSyncHelper.addCallbackPush(callback);    }    serverSyncHelper.scheduleSync(true);    return newNote;  } else {    if (callback != null) {      callback.onFinish();    }    return oldNote;  }}  }
class C{  public final void registerExtension(BridgeExtension ext){  @SuppressWarnings("unchecked") Iterator<String> i=ext.getImplementedExtensions();  while (i.hasNext())   extensions.add(i.next());}  }
class C{  public void addListener(Listener<ComplexBuffer> listener){synchronized (mComplexBufferBroadcaster) {    mComplexBufferBroadcaster.addListener(listener);    if (mBufferProcessor == null || !mBufferProcessor.isRunning()) {      mBufferProcessor=new BufferProcessor();      Thread thread=new Thread(mBufferProcessor);      thread.setDaemon(true);      thread.setName("HackRF Sample Processor");      thread.start();    }  }}  }
class C{  public void startDownloadRequest(final String hostname,final int port,final String uri){  mSpeedTestMode=SpeedTestMode.DOWNLOAD;  mForceCloseSocket=false;  mErrorDispatched=false;  this.mHostname=hostname;  this.mPort=port;  final String downloadRequest="GET " + uri + " HTTP/1.1\r\n"+ "Host: "+ hostname+ "\r\n\r\n";  writeDownload(downloadRequest.getBytes());}  }
class C{  public ElementCreatorImpl whitelistAttributes(AttributeKey<?>... attributeKeys){  return whitelistAttributes(Lists.newArrayList(attributeKeys));}  }
class C{  public void resumeDelegateExecution(){  if (sm_logger.isLoggable(Level.FINE)) {    sm_logger.fine(Thread.currentThread().getName() + " resumes delegate execution.");  }  m_readWriteLock.writeLock().unlock();}  }
class C{  @Override protected void next(String token){  Integer value;  if (countsByToken.containsKey(token)) {    value=countsByToken.get(token) + 1;  } else {    value=1;  }  countsByToken.put(token,value);}  }
class C{  static public boolean isPortableFilename(String filename){  return FileUtilSupport.getDefault().isPortableFilename(filename);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static double discharge(ItemStack itemStack,double amount){  if (itemStack != null) {    if (itemStack.getItem() instanceof IEnergizedItem) {      IEnergizedItem energizedItem=(IEnergizedItem)itemStack.getItem();      if (energizedItem.canSend(itemStack)) {        double energyToUse=Math.min(energizedItem.getMaxTransfer(itemStack),Math.min(energizedItem.getEnergy(itemStack),amount));        energizedItem.setEnergy(itemStack,energizedItem.getEnergy(itemStack) - energyToUse);        return energyToUse;      }    }  }  return 0;}  }
class C{  public HttpURL(final String user,final String password,final String host) throws URIException {  this(user,password,host,-1,null,null,null);}  }
class C{  public static Pair pair(final Expression left,final Expression right){  return new Pair(left,right);}  }
class C{  public static boolean isInvocable(Types types,MethodType from,MethodType target){  if (from.getParameterTypes().length() != target.getParameterTypes().length()) {    return false;  }  for (int i=0; i < from.getParameterTypes().length(); i++) {    if (!types.isAssignable(types.erasure(from.getParameterTypes().get(i)),types.erasure(target.getParameterTypes().get(i)))) {      return false;    }  }  return true;}  }
class C{  private void removeDeletedModuleFromNamespaces(final INaviModule module){  for (  final INaviProject project : m_projects) {    if (!project.isLoaded()) {      continue;    }    for (    final INaviAddressSpace addressSpace : project.getContent().getAddressSpaces()) {      if (addressSpace.isLoaded() && addressSpace.getContent().getModules().contains(module)) {        try {          addressSpace.getContent().removeModule(module);        } catch (        CouldntDeleteException|CouldntSaveDataException exception) {          CUtilityFunctions.logException(exception);        }      }    }  }}  }
class C{  public void push(final boolean value){  push(value ? 1 : 0);}  }
class C{  public java.awt.Font convertFont(final Font swtFont,final FontData[] swtFontData){  FontData fontData0=swtFontData[0];  int resolution=Toolkit.getDefaultToolkit().getScreenResolution();  int awtFontSize=(int)Math.round((double)fontData0.getHeight() * resolution / 72.0);  return new java.awt.Font(fontData0.getName(),fontData0.getStyle(),awtFontSize);}  }
class C{  public int size(){  return m_snapshotList.size();}  }
class C{  public String toString(@Nullable AbstractBlockChain chain){  StringBuilder s=new StringBuilder();  s.append(String.format("  %s: %s%n",getHashAsString(),getConfidence()));  if (isTimeLocked()) {    String time;    if (lockTime < LOCKTIME_THRESHOLD) {      time="block " + lockTime;      if (chain != null) {        time=time + " (estimated to be reached at " + chain.estimateBlockTime((int)lockTime).toString()+ ")";      }    } else {      time=new Date(lockTime * 1000).toString();    }    s.append(String.format("  time locked until %s%n",time));  }  if (inputs.size() == 0) {    s.append(String.format("  INCOMPLETE: No inputs!%n"));    return s.toString();  }  if (isCoinBase()) {    String script;    String script2;    try {      script=inputs.get(0).getScriptSig().toString();      script2=outputs.get(0).getScriptPubKey().toString();    } catch (    ScriptException e) {      script="???";      script2="???";    }    s.append("     == COINBASE TXN (scriptSig " + script + ")  (scriptPubKey "+ script2+ ")\n");    return s.toString();  }  for (  TransactionInput in : inputs) {    s.append("     ");    s.append("in   ");    try {      Script scriptSig=in.getScriptSig();      s.append(scriptSig);      s.append("\n          ");      s.append("outpoint:");      final TransactionOutPoint outpoint=in.getOutpoint();      s.append(outpoint.toString());      final TransactionOutput connectedOutput=outpoint.getConnectedOutput();      if (connectedOutput != null) {        s.append(" hash160:");        s.append(Utils.bytesToHexString(connectedOutput.getScriptPubKey().getPubKeyHash()));      }    } catch (    Exception e) {      s.append("[exception: ").append(e.getMessage()).append("]");    }    s.append(String.format("%n"));  }  for (  TransactionOutput out : outputs) {    s.append("     ");    s.append("out  ");    try {      Script scriptPubKey=out.getScriptPubKey();      s.append(scriptPubKey);      s.append(" ");      s.append(bitcoinValueToPlainString(out.getValue()));      s.append(" BTC");      if (!out.isAvailableForSpending()) {        s.append(" Spent");      }      if (out.getSpentBy() != null) {        s.append(" by ");        s.append(out.getSpentBy().getParentTransaction().getHashAsString());      }    } catch (    Exception e) {      s.append("[exception: ").append(e.getMessage()).append("]");    }    s.append(String.format("%n"));  }  return s.toString();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:49.281 -0400",hash_original_method="3387FD7633AB5B9FD9EC30B2946E89DA",hash_generated_method="C90CFEE0B41FF3D2E106BCB49C7AB059") public synchronized boolean isIndeterminate(){  return mIndeterminate;}  }
class C{  public FinderPatternFinder(BitMatrix image){  this(image,null);}  }
class C{  public static String removeUriFragment(String url){  if (url == null || url.length() == 0) {    return null;  }  String[] arr=url.split("#");  if (arr.length == 2) {    return arr[0];  } else {    return url;  }}  }
class C{  public void updateArc(float latPoint,float lonPoint,float radius,int units,float s,float e,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkArc.write(latPoint,lonPoint,radius,units,-1,s,e,properties,link.dos);}  }
class C{  public synchronized void removeAllElements(){  for (int i=0; i < elementCount; i++) {    elementData[i]=null;  }  modCount++;  elementCount=0;}  }
class C{  private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {  int codewordPosition=1 + bits.getByteOffset();  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);  int count;  if (d1 == 0) {    count=bits.available() / 8;  } else   if (d1 < 250) {    count=d1;  } else {    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);  }  if (count < 0) {    throw FormatException.getFormatInstance();  }  byte[] bytes=new byte[count];  for (int i=0; i < count; i++) {    if (bits.available() < 8) {      throw FormatException.getFormatInstance();    }    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);  }  byteSegments.add(bytes);  try {    result.append(new String(bytes,"ISO8859_1"));  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException("Platform does not support required encoding: " + uee);  }}  }
class C{  public CLIQUEUnit<V> join(CLIQUEUnit<V> other,double all,double tau){  CLIQUEInterval i1=this.intervals.get(this.intervals.size() - 1);  CLIQUEInterval i2=other.intervals.get(other.intervals.size() - 1);  if (i1.getDimension() >= i2.getDimension()) {    return null;  }  Iterator<CLIQUEInterval> it1=this.intervals.iterator();  Iterator<CLIQUEInterval> it2=other.intervals.iterator();  ArrayList<CLIQUEInterval> resultIntervals=new ArrayList<>();  for (int i=0; i < this.intervals.size() - 1; i++) {    i1=it1.next();    i2=it2.next();    if (!i1.equals(i2)) {      return null;    }    resultIntervals.add(i1);  }  resultIntervals.add(this.intervals.get(this.intervals.size() - 1));  resultIntervals.add(other.intervals.get(other.intervals.size() - 1));  HashSetModifiableDBIDs resultIDs=DBIDUtil.newHashSet(this.ids);  resultIDs.retainAll(other.ids);  if (resultIDs.size() / all >= tau) {    return new CLIQUEUnit<>(resultIntervals,resultIDs);  }  return null;}  }
class C{  public static int parseKMLColor(String sColor){  sColor=sColor.trim();  while (sColor.length() < 8)   sColor="0" + sColor;  String aa=sColor.substring(0,2);  String bb=sColor.substring(2,4);  String gg=sColor.substring(4,6);  String rr=sColor.substring(6,8);  sColor="#" + aa + rr+ gg+ bb;  int iColor=0xFF000000;  try {    iColor=Color.parseColor(sColor);  } catch (  IllegalArgumentException e) {    e.printStackTrace();  }  return iColor;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void deleteTest(TestCase testCase){  if (testCase != null) {    for (int i=0; i < tests.size(); i++) {      if (tests.get(i).getTestCase().equals((testCase))) {        tests.remove(i);      }    }  }}  }
class C{  public void removeExtension(Class<? extends Extension> extensionClass){  extPoint.removeExtension(extensionClass);}  }
class C{  public void add(LifecycleListener listener){  listeners.add(Providers.of(listener));}  }
class C{  public Chronology withUTC(){  return withZone(DateTimeZone.UTC);}  }
class C{  public void testStartFromStream() throws Exception {  String cfg="examples/config/example-cache.xml";  URL cfgLocation=U.resolveIgniteUrl(cfg);  Ignite grid=Ignition.start(new FileInputStream(cfgLocation.getFile()));  grid.cache(null).put("1","1");  assert grid.cache(null).get("1").equals("1");  IgniteConfiguration icfg=Ignition.loadSpringBean(new FileInputStream(cfgLocation.getFile()),"ignite.cfg");  assert icfg.getCacheConfiguration()[0].getAtomicityMode() == CacheAtomicityMode.ATOMIC;}  }
class C{  public Date addAssign(final Period period){  serialNumber=advance(this,period.length(),period.units());  checkSerialNumber();  delegatedObservable.notifyObservers();  return this;}  }
class C{  static private void assertLegalAddr(final IAddressManager am,final long nextOffset,final long addr,final String label){  if (addr == 0L)   return;  if (am instanceof RWAddressManager)   return;  final long offset=am.getOffset(addr);  final int nbytes=am.getByteCount(addr);  final long nextOffset2=offset + nbytes;  if (nextOffset2 > nextOffset) {    throw new IllegalArgumentException(label + " address range [" + am.getOffset(addr)+ ":"+ am.getOffset(addr)+ am.getByteCount(addr)+ "] exceeds use extent: nextOffset="+ nextOffset+ ", addr="+ am.toString(addr));  }}  }
class C{  public void start(Resource xmlFile,String saxParserCass) throws PageException {  InputStream is=null;  try {    XMLReader xmlReader=XMLUtil.createXMLReader(saxParserCass);    xmlReader.setContentHandler(this);    xmlReader.setErrorHandler(this);    xmlReader.parse(new InputSource(is=IOUtil.toBufferedInputStream(xmlFile.getInputStream())));  } catch (  Exception e) {    throw Caster.toPageException(e);  } finally {    IOUtil.closeEL(is);  }}  }
class C{  public String bind(BindParameter bindParam,long timeout) throws IOException {  try {    String smscSystemId=sendBind(bindParam.getBindType(),bindParam.getSystemId(),bindParam.getPassword(),bindParam.getSystemType(),bindParam.getInterfaceVersion(),bindParam.getAddrTon(),bindParam.getAddrNpi(),bindParam.getAddressRange(),timeout);    sessionContext.bound(bindParam.getBindType());    logger.info("Start EnquireLinkSender");    enquireLinkSender=new EnquireLinkSender();    enquireLinkSender.start();    return smscSystemId;  } catch (  PDUException e) {    logger.error("Failed sending bind command",e);    throw new IOException("Failed sending bind since some string parameter area invalid: " + e.getMessage(),e);  }catch (  NegativeResponseException e) {    String message="Receive negative bind response";    logger.error(message,e);    close();    throw new IOException(message + ": " + e.getMessage(),e);  }catch (  InvalidResponseException e) {    String message="Receive invalid response of bind";    logger.error(message,e);    close();    throw new IOException(message + ": " + e.getMessage(),e);  }catch (  ResponseTimeoutException e) {    String message="Waiting bind response take time too long";    logger.error(message,e);    close();    throw new IOException(message + ": " + e.getMessage(),e);  }catch (  IOException e) {    logger.error("IO error occurred",e);    close();    throw e;  }}  }
class C{  private final void checkSccs() throws IOException, InterruptedException, ExecutionException {  this.dg.makeNodePtrTbl();  final LongVec initNodes=this.dg.getInitNodes();  final int numOfInits=initNodes.size();  final MemIntQueue nodeQueue=new MemIntQueue(liveCheck.getMetaDir(),"root",(numOfInits / 2) * 5);  for (int j=0; j < numOfInits; j+=2) {    final long state=initNodes.elementAt(j);    final int tidx=(int)initNodes.elementAt(j + 1);    final long ptr=this.dg.getLink(state,tidx);    if (ptr >= 0) {      assert DiskGraph.isFilePointer(ptr);      nodeQueue.enqueueLong(state);      nodeQueue.enqueueInt(tidx);      nodeQueue.enqueueLong(ptr);    } else {      assert !isFinalCheck || ptr != TableauNodePtrTable.UNDONE;    }  }  final int[] eaaction=this.pem.EAAction;  final int slen=this.oos.getCheckState().length;  final int alen=this.oos.getCheckAction().length;  final IntStack dfsStack=getStack(liveCheck.getMetaDir(),"dfs" + this.myGetId());  final IntStack comStack=getStack(liveCheck.getMetaDir(),"com" + this.myGetId());  while (nodeQueue.size() > 0) {    final long state=nodeQueue.dequeueLong();    final int tidx=nodeQueue.dequeueInt();    final long loc=nodeQueue.dequeueLong();    dfsStack.reset();    dfsStack.pushLong(state);    dfsStack.pushInt(tidx);    dfsStack.pushLong(loc);    dfsStack.pushLong(DiskGraph.MAX_PTR);    long newLink=DiskGraph.MAX_PTR;    while (dfsStack.size() >= 7) {      final long lowLink=dfsStack.popLong();      final long curLoc=dfsStack.popLong();      final int curTidx=dfsStack.popInt();      final long curState=dfsStack.popLong();      assert DiskGraph.isFilePointer(curLoc);      if (curLoc == SCC_MARKER) {        final long curLink=this.dg.getLink(curState,curTidx);        assert curLink < AbstractDiskGraph.MAX_LINK;        if (curLink == lowLink) {          final boolean isOK=this.checkComponent(curState,curTidx,comStack);          if (!isOK) {            return;          }        }        final long plowLink=dfsStack.popLong();        dfsStack.pushLong(Math.min(plowLink,lowLink));      } else {        final long link=this.dg.putLink(curState,curTidx,newLink);        if (link == -1) {          dfsStack.pushLong(lowLink);          dfsStack.pushLong(curState);          dfsStack.pushInt(curTidx);          dfsStack.pushLong(SCC_MARKER);          comStack.pushLong(curLoc);          comStack.pushInt(curTidx);          comStack.pushLong(curState);          final GraphNode gnode=this.dg.getNode(curState,curTidx,curLoc);          final int succCnt=gnode.succSize();          long nextLowLink=newLink;          newLink=newLink + 1;          for (int i=0; i < succCnt; i++) {            final long nextState=gnode.getStateFP(i);            final int nextTidx=gnode.getTidx(i);            final long nextLink=this.dg.getLink(nextState,nextTidx);            if (nextLink >= 0) {              if (gnode.getCheckAction(slen,alen,i,eaaction)) {                if (DiskGraph.isFilePointer(nextLink)) {                  dfsStack.pushLong(nextState);                  dfsStack.pushInt(nextTidx);                  dfsStack.pushLong(nextLink);                } else {                  nextLowLink=Math.min(nextLowLink,nextLink);                }              } else {                if (DiskGraph.isFilePointer(nextLink)) {                  nodeQueue.enqueueLong(nextState);                  nodeQueue.enqueueInt(nextTidx);                  nodeQueue.enqueueLong(nextLink);                }              }            } else {              assert !isFinalCheck || nextLink != TableauNodePtrTable.UNDONE;            }          }          dfsStack.pushLong(nextLowLink);        } else {          assert AbstractDiskGraph.MAX_PTR <= link && link <= AbstractDiskGraph.MAX_LINK;          dfsStack.pushLong(Math.min(lowLink,link));        }      }    }  }  assert comStack.size() == 0;}  }
class C{  public void readGraphics(URL cacheURL) throws IOException {  try {    ObjectInputStream objstream=new ObjectInputStream(cacheURL.openStream());    if (Debug.debugging("omgraphics")) {      Debug.output("OMGraphicList: Opened " + cacheURL.toString());    }    readGraphics(objstream);    objstream.close();    if (Debug.debugging("omgraphics")) {      Debug.output("OMGraphicList: closed " + cacheURL.toString());    }  } catch (  ArrayIndexOutOfBoundsException aioobe) {    throw new com.bbn.openmap.util.HandleError(aioobe);  }catch (  ClassCastException cce) {    cce.printStackTrace();  }}  }
class C{  void writeTo(DataOutput out) throws IOException {  if (this.optionalFields.isEmpty()) {    DataSerializer.writeObject(null,out);  } else {    DataSerializer.writeObject(this.optionalFields,out);  }}  }
class C{  protected Boolean compute(String value){  if (value == null) {    return true;  } else {    return false;  }}  }
class C{  public String toString(){  return name.toString();}  }
class C{  public final void addTestSignature(String name,String signature){  TypeBuilder builder=new TypeBuilder(this.typeClasses);  Type type=builder.build(signature);  this.functions.put(name,new CatalogFunction(name,"!TEST!",type,"",false,false));}  }
class C{  public char readChar(){  scanner.useDelimiter(EMPTY_PATTERN);  String ch=scanner.next();  assert (ch.length() == 1) : "Internal (Std)In.readChar() error!" + " Please contact the authors.";  scanner.useDelimiter(WHITESPACE_PATTERN);  return ch.charAt(0);}  }
class C{  public In(){  scanner=new Scanner(new BufferedInputStream(System.in),CHARSET_NAME);  scanner.useLocale(LOCALE);}  }
class C{  final void reject(Runnable command){  handler.rejectedExecution(command,this);}  }
class C{  protected void validate_return(StoragePort[] param){}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static Date parseXEP0082Date(String dateString) throws ParseException {  return parseDate(dateString);}  }
class C{  public static BlockPair createFakeBlock(BlockStore blockStore,long version,long timeSeconds,Transaction... transactions){  return createFakeBlock(blockStore,version,timeSeconds,0,transactions);}  }
class C{  @Override public void initHeaderBuffer() throws IOException {  resetHTMLHead();}  }
class C{  public static int uninstallSilent(Context context,String packageName){  return uninstallSilent(context,packageName,true);}  }
class C{  public void notifyObservers(Object arg){  Object[] arrLocal;synchronized (this) {    if (!changed)     return;    arrLocal=obs.toArray();    clearChanged();  }  for (int i=arrLocal.length - 1; i >= 0; i--)   ((Observer)arrLocal[i]).update(this,arg);}  }
class C{  private static boolean pathNecessary(GraphChange path,LinkedList<HsNode> nextLevel){  boolean necessary=true;  for (  HsNode m : nextLevel) {    if ((m.getPath()).equals(path)) {      necessary=false;      break;    }  }  return necessary;}  }
class C{  public void smoothScrollBy(int dx,int dy){  mRecycler.smoothScrollBy(dx,dy);}  }
class C{  public Index(Table newTable,String name,IndexColumn[] newIndexColumns,IndexType newIndexType){  initSchemaObjectBase(newTable.getSchema(),name);  this.indexType=newIndexType;  this.table=newTable;  if (newIndexColumns != null) {    this.indexColumns=newIndexColumns;    columns=new Column[newIndexColumns.length];    int len=columns.length;    columnIds=new int[len];    for (int i=0; i < len; i++) {      Column col=newIndexColumns[i].column;      columns[i]=col;      columnIds[i]=col.getColumnId();    }  }}  }
class C{  private CGraphDebugger(){}  }
class C{  public double eval(double params[]){  return (1.0 / (1.0 + Math.pow(Math.E,-params[0])));}  }
class C{  @Deprecated public void findRelated(RelatedQuery query,RelatedResultSpec resultSpec,OnClientCallback<RelatedResult> callback){  AsyncReflector.execute(mClient,callback,"findRelated",mAuthenticationToken,query,resultSpec);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.711 -0500",hash_original_method="2B4E18996A051A13BE51394FD13F0A3C",hash_generated_method="B9625D27D362B6F4B8A75F93914A42B5") public DexFile(String fileName) throws IOException {  mCookie=openDexFile(fileName,null,0);  mFileName=fileName;  guard.open("close");}  }
class C{  public Infantry(){  super();  menStarting=0;  menShooting=0;  men=0;  setMovementMode(EntityMovementMode.INF_LEG);  setOriginalWalkMP(1);}  }
class C{  public String[] split(String javadoc){  return new String[]{javadoc,javadoc};}  }
class C{  protected SVGOMAltGlyphDefElement(){}  }
class C{  @SuppressWarnings("unchecked") public <T>T read() throws XMLStreamException {  return (T)_xml.getNext();}  }
class C{  @Override protected void onActivityResult(final int requestCode,final int resultCode,final Intent intent){  super.onActivityResult(requestCode,resultCode,intent);switch (requestCode) {case GalleryFilterActivity.resultID:    onFilterChanged(GalleryFilterActivity.getFilter(intent));  break;}}  }
class C{  public PackageJsonComparePage(String pageName){  super(pageName);  setTitle(pageName);  setMessage("Investigate changes to package.json.");}  }
class C{  public String toString(){  return "TAG_Int(\"" + name + "\"): val="+ value;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.abs(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public float[][] updateValues(float[] newValues){  int nEntries=size();  float[][] result=new float[nEntries][2];  for (int i=0; i < nEntries; i++) {    result[i][0]=mEntries.get(i).getX();    result[i][1]=mEntries.get(i).getY();    setValue(i,newValues[i]);  }  return result;}  }
class C{  @Override public void onSurfaceCreated(EGLConfig config){  Log.i(TAG,"onSurfaceCreated");  GLES20.glClearColor(1f,1f,0f,1f);  mSphere=new Sphere(this,50,5f);  mSphere.loadTexture(this,getPhotoIndex());  checkGLError("onSurfaceCreated");}  }
class C{  public static byte parseByte(CharSequence csq,int radix,Cursor cursor){  int i=parseInt(csq,radix,cursor);  if ((i < Byte.MIN_VALUE) || (i > Byte.MAX_VALUE))   throw new NumberFormatException("Overflow");  return (byte)i;}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:02.503 -0500",hash_original_method="F615398128ECEE16BD7E7D5E7CEBDFE4",hash_generated_method="7EE087A2F1F7A7223DBED2AE012727B8") public boolean copyMessageToIccEf(int status,byte[] pdu,byte[] smsc){  if (DBG)   log("copyMessageToIccEf: status=" + status + " ==> "+ "pdu=("+ Arrays.toString(pdu)+ ")");  enforceReceiveAndSend("Copying message to RUIM");synchronized (mLock) {    mSuccess=false;    Message response=mHandler.obtainMessage(EVENT_UPDATE_DONE);    mPhone.mCM.writeSmsToRuim(status,IccUtils.bytesToHexString(pdu),response);    try {      mLock.wait();    } catch (    InterruptedException e) {      log("interrupted while trying to update by index");    }  }  return mSuccess;}  }
class C{  public CSVFormat withQuoteChar(final Character quoteChar){  if (isLineBreak(quoteChar)) {    throw new IllegalArgumentException("The quoteChar cannot be a line break");  }  return new CSVFormat(delimiter,quoteChar,quotePolicy,commentStart,escape,ignoreSurroundingSpaces,ignoreEmptyLines,recordSeparator,nullString,header,skipHeaderRecord);}  }
class C{  static Document loadDocument(Resource xmlFile) throws SAXException, IOException {  InputStream is=null;  try {    return _loadDocument(is=IOUtil.toBufferedInputStream(xmlFile.getInputStream()));  }  finally {    IOUtil.closeEL(is);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static int ceilLog256(int n){  if (n == 0) {    return 1;  }  int m;  if (n < 0) {    m=-n;  } else {    m=n;  }  int d=0;  while (m > 0) {    d++;    m>>>=8;  }  return d;}  }
class C{  public long readLongUnary() throws IOException {  if (ASSERTS)   assert fill < 32 : fill + " >= " + 32;  if ((current & (1 << fill) - 1) != 0)   return readUnary();  long x=fill;  while ((current=read()) == 0)   x+=8;  x+=7 - (fill=Fast.BYTEMSB[current]);  readBits+=x + 1;  return x;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ScriptElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == AnnotableScriptElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_CLASS_DECLARATION__ANNOTATION_LIST:    return N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST;default :  return -1;}}if (baseClass == ModifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_CLASS_DECLARATION__DECLARED_MODIFIERS:return N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS;default :return -1;}}if (baseClass == ExportableElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == N4TypeDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.N4_CLASS_DECLARATION__NAME:return N4JSPackage.N4_TYPE_DECLARATION__NAME;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.N4_CLASS_DECLARATION__TYPE_VARS:return N4JSPackage.GENERIC_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == N4ClassifierDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.N4_CLASS_DECLARATION__TYPING_STRATEGY:return N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPING_STRATEGY;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static void sendGps(int number){  sendGps(number,0,-1);}  }
class C{  public List<ParallelSuffixArrayEntry> lookupTarget(String targetQuery,int numResults){  final int[] targetPhrase=toTMArray(IStrings.tokenize(targetQuery));  for (  int id : targetPhrase) {    if (id < 0)     return Collections.emptyList();  }  SuffixArraySample sample=sa.sampleTarget(targetPhrase,numResults);  return sample.samples.stream().map(null).collect(Collectors.toList());}  }
class C{  private List<T> filter(final Collection<T> collection){  final List<T> nullFreeList=new ArrayList<T>();  if (collection != null) {    for (    final T item : collection) {      if (item != null) {        nullFreeList.add(item);      }    }  }  return nullFreeList;}  }
class C{  public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  System.err.write(buf,offset,length);  System.err.flush();}  }
class C{  public OIDName(String name) throws IOException {  try {    oid=new ObjectIdentifier(name);  } catch (  Exception e) {    throw new IOException("Unable to create OIDName: " + e);  }}  }
class C{  @Deprecated @Override public void recycle(){  super.recycle();  setFollowRedirects(true);}  }
class C{  public void normalize(){  List<WbXmlContent> newContents=new ArrayList<WbXmlContent>();  StringBuilder sb=new StringBuilder();  for (  WbXmlContent content : contents) {    if (content.isString() && !content.isEntity()) {      sb.append(content.getString());    } else {      if (sb.length() > 0) {        newContents.add(new WbXmlContent(sb.toString()));        sb.setLength(0);      }      newContents.add(content);    }  }  if (sb.length() > 0) {    newContents.add(new WbXmlContent(sb.toString()));  }  contents=newContents;  compacted=false;}  }
class C{  static int applyMaskPenaltyRule1(ByteMatrix matrix){  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);}  }
class C{  public boolean isSetCursorId(){  return EncodingUtils.testBit(__isset_bitfield,__CURSORID_ISSET_ID);}  }
class C{  public DefaultDnDCatcher(DragSource ds){  this(ds,null);}  }
class C{  public NoHttpResponseException(final String message){  super(message);}  }
class C{  public boolean shouldAllowBridgeAccess(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldAllowBridgeAccess(url);      if (result != null) {        return result;      }    }  }  return url.startsWith("file://");}  }
class C{  private static File file(String alias){  File dir;  if (TrustedCertificateStore.isSystem(alias)) {    dir=DIR_SYSTEM;  } else   if (TrustedCertificateStore.isUser(alias)) {    dir=DIR_ADDED;  } else {    throw new IllegalArgumentException(alias);  }  int index=alias.lastIndexOf(":");  if (index == -1) {    throw new IllegalArgumentException(alias);  }  String filename=alias.substring(index + 1);  return new File(dir,filename);}  }
class C{  public Builder password(String password){  this.innerPassword=password;  return this;}  }
class C{  public String buildUnionSubQuery(String typeDiscriminatorColumn,String[] unionColumns,Set<String> columnsPresentInTable,int computedColumnsOffset,String typeDiscriminatorValue,String selection,String groupBy,String having){  int unionColumnsCount=unionColumns.length;  String[] projectionIn=new String[unionColumnsCount];  for (int i=0; i < unionColumnsCount; i++) {    String unionColumn=unionColumns[i];    if (unionColumn.equals(typeDiscriminatorColumn)) {      projectionIn[i]="'" + typeDiscriminatorValue + "' AS "+ typeDiscriminatorColumn;    } else     if (i <= computedColumnsOffset || columnsPresentInTable.contains(unionColumn)) {      projectionIn[i]=unionColumn;    } else {      projectionIn[i]="NULL AS " + unionColumn;    }  }  return buildQuery(projectionIn,selection,groupBy,having,null,null);}  }
class C{  public void i(Object str){  if (debug) {    if (logLevel <= Log.INFO) {      String name=getFunctionName();      if (name != null) {        Log.i(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.i(tag,str.toString());      }    }  }}  }
class C{  public static BatchStatus createCreatedStatus(){  BatchStatus status=new BatchStatus();  status.setCode(HttpURLConnection.HTTP_CREATED);  status.setReason("Created");  return status;}  }
class C{  private static Table createUniqueTable(Database db,String name,List<ColumnBuilder> columns,ResultSetMetaData md,ImportFilter filter) throws IOException, SQLException {  String baseName=name;  int counter=2;  while (db.getTable(name) != null) {    name=baseName + (counter++);  }  return new TableBuilder(name).addColumns(filter.filterColumns(columns,md)).toTable(db);}  }
class C{  public void testSetF20(){  boolean f20=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF20(f20);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F13-F20 since no command station defined");}  }
