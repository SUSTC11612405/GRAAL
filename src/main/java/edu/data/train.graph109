class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  canvas.drawText(mText,mPaddingLeft,mPaddingTop - mAscent,mTextPaint);}  }
class C{  private void sendMessage(final Message message){  sendMessage(spExchange,message);}  }
class C{  public void updateTopicProcessor(){  for (  String topic : _topics.keySet()) {    try {      final Class processorClass=Class.forName(_topics.get(topic).processor);      _topicProcessorClass.put(topic,processorClass.newInstance());      final Method method=processorClass.getDeclaredMethod("process",GenericData.Record.class,String.class);      _topicProcessorMethod.put(topic,method);      final DatabaseWriter dw=new DatabaseWriter(JdbcUtil.wherehowsJdbcTemplate,_topics.get(topic).dbTable);      _topicDbWriter.put(topic,dw);    } catch (    Exception e) {      Logger.error("Fail to create Processor for topic: " + topic,e);      _topicProcessorClass.remove(topic);      _topicProcessorMethod.remove(topic);      _topicDbWriter.remove(topic);    }  }}  }
class C{  public LabelledPortrayal2D(SimplePortrayal2D child,double offsetx,double offsety,double scalex,double scaley,Font font,int align,String label,Paint paint,boolean onlyLabelWhenSelected){  this.offsetx=offsetx;  this.offsety=offsety;  this.scalex=scalex;  this.scaley=scaley;  this.font=font;  this.align=align;  this.label=label;  this.child=child;  this.paint=paint;  this.onlyLabelWhenSelected=onlyLabelWhenSelected;}  }
class C{  public static int[][] createSparseMatrixWithHotseat(CellLayout iconLayout,CellLayout hotseatLayout,boolean isHotseatHorizontal,int allappsiconRank){  ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();  ViewGroup hotseatParent=hotseatLayout.getShortcutsAndWidgets();  boolean moreIconsInHotseatThanWorkspace=isHotseatHorizontal ? hotseatLayout.getCountX() > iconLayout.getCountX() : hotseatLayout.getCountY() > iconLayout.getCountY();  int m, n;  if (isHotseatHorizontal) {    m=hotseatLayout.getCountX();    n=iconLayout.getCountY() + hotseatLayout.getCountY();  } else {    m=iconLayout.getCountX() + hotseatLayout.getCountX();    n=hotseatLayout.getCountY();  }  int[][] matrix=createFullMatrix(m,n);  if (moreIconsInHotseatThanWorkspace) {    if (isHotseatHorizontal) {      for (int j=0; j < n; j++) {        matrix[allappsiconRank][j]=ALL_APPS_COLUMN;      }    } else {      for (int j=0; j < m; j++) {        matrix[j][allappsiconRank]=ALL_APPS_COLUMN;      }    }  }  for (int i=0; i < iconParent.getChildCount(); i++) {    View cell=iconParent.getChildAt(i);    if (!cell.isFocusable()) {      continue;    }    int cx=((CellLayout.LayoutParams)cell.getLayoutParams()).cellX;    int cy=((CellLayout.LayoutParams)cell.getLayoutParams()).cellY;    if (moreIconsInHotseatThanWorkspace) {      if (isHotseatHorizontal && cx >= allappsiconRank) {        cx++;      }      if (!isHotseatHorizontal && cy >= allappsiconRank) {        cy++;      }    }    matrix[cx][cy]=i;  }  for (int i=hotseatParent.getChildCount() - 1; i >= 0; i--) {    if (isHotseatHorizontal) {      int cx=((CellLayout.LayoutParams)hotseatParent.getChildAt(i).getLayoutParams()).cellX;      matrix[cx][iconLayout.getCountY()]=iconParent.getChildCount() + i;    } else {      int cy=((CellLayout.LayoutParams)hotseatParent.getChildAt(i).getLayoutParams()).cellY;      matrix[iconLayout.getCountX()][cy]=iconParent.getChildCount() + i;    }  }  if (DEBUG) {    printMatrix(matrix);  }  return matrix;}  }
class C{  private void createRoot(){  root=doc.createElement("project");  root.setAttribute("name",projectName);  root.setAttribute("default","build");  root.setAttribute("basedir",".");  doc.appendChild(root);}  }
class C{  public void visit(DelphiPMDNode node,RuleContext ctx){}  }
class C{  public RecordsMatcher<T> oneOfThem(){  return new RecordsMatcher<>(MatcherCombiner.one(matchers));}  }
class C{  public boolean isUnSafe(){  return (number & 2) != 0;}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  Boolean result=(Boolean)callback.call(consoleId.get().intValue(),new String(b,off,len));  if (result) {    out.write(b,off,len);  }}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  c.setOpaque(false);}  }
class C{  public boolean enableCharacteristicNotification(BleCharactCallback bleCallback){  return enableCharacteristicNotification(getCharacteristic(),bleCallback);}  }
class C{  public static String toStringValue(byte dataType){switch (dataType) {case CORE_SKIP:    return "skip";case CORE_NULL:  return "null";case CORE_BOOLEAN:return "Boolean";case CORE_NUMBER:return "Number";case CORE_STRING:return "String";case CORE_DATE:return "Date";case CORE_ARRAY:return "Array";case CORE_MAP:return "List";case CORE_XML:return "XML";case CORE_OBJECT:return "Object";case CORE_BYTEARRAY:return "ByteArray";case CORE_VECTOR_INT:return "Vector<int>";case CORE_VECTOR_UINT:return "Vector<uint>";case CORE_VECTOR_NUMBER:return "Vector<Number>";case CORE_VECTOR_OBJECT:return "Vector<Object>";case OPT_REFERENCE:return "Reference";default :}if (dataType >= CUSTOM_MOCK_MASK && dataType < CUSTOM_AMF_MASK) {return "MOCK[" + (dataType - CUSTOM_MOCK_MASK) + ']';}if (dataType >= CUSTOM_AMF_MASK && dataType < CUSTOM_RTMP_MASK) {return "AMF[" + (dataType - CUSTOM_AMF_MASK) + ']';}if (dataType >= CUSTOM_RTMP_MASK && dataType < CUSTOM_JSON_MASK) {return "RTMP[" + (dataType - CUSTOM_RTMP_MASK) + ']';}if (dataType >= CUSTOM_JSON_MASK && dataType < CUSTOM_XML_MASK) {return "JSON[" + (dataType - CUSTOM_JSON_MASK) + ']';}return "XML[" + (dataType - CUSTOM_XML_MASK) + ']';}  }
class C{  public void ReInit(SimpleCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  public static void init() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  if (!initialized) {    String bouncyCastleProviderClassName="org.bouncycastle.jce.provider.BouncyCastleProvider";    Security.addProvider((Provider)Class.forName(bouncyCastleProviderClassName).newInstance());    MailcapCommandMap mailcap=(MailcapCommandMap)CommandMap.getDefaultCommandMap();    mailcap.addMailcap("application/pkcs7-signature;; x-java-content-handler=org.bouncycastle.mail.smime.handlers.pkcs7_signature");    mailcap.addMailcap("application/pkcs7-mime;; x-java-content-handler=org.bouncycastle.mail.smime.handlers.pkcs7_mime");    mailcap.addMailcap("application/x-pkcs7-signature;; x-java-content-handler=org.bouncycastle.mail.smime.handlers.x_pkcs7_signature");    mailcap.addMailcap("application/x-pkcs7-mime;; x-java-content-handler=org.bouncycastle.mail.smime.handlers.x_pkcs7_mime");    mailcap.addMailcap("multipart/signed;; x-java-content-handler=org.bouncycastle.mail.smime.handlers.multipart_signed");    CommandMap.setDefaultCommandMap(mailcap);    initialized=true;  } else {  }}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  private int abortWait(int phase){  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  for (; ; ) {    Thread t;    QNode q=head.get();    int p=(int)(root.state >>> PHASE_SHIFT);    if (q == null || ((t=q.thread) != null && q.phase == p))     return p;    if (head.compareAndSet(q,q.next) && t != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  public boolean forEachKey(IntProcedure procedure){  for (int i=table.length; i-- > 0; ) {    if (state[i] == FULL)     if (!procedure.apply(table[i]))     return false;  }  return true;}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return encode((byte[])pObject);  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be URL encoded");  }}  }
class C{  public QuestCheckingPortal(final String questslot,final String rejectMessage){  super(rejectMessage);  this.questslot=questslot;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  if (keySize > digest.getDigestSize()) {    throw new IllegalArgumentException("Can't generate a derived key " + keySize + " bytes long.");  }  byte[] dKey=generateDerivedKey();  return new KeyParameter(dKey,0,keySize);}  }
class C{  public static void purgeSharedTextureCache(){  if (_sharedTextureCache != null) {    _sharedTextureCache.removeAllTextures();  }}  }
class C{  public static TaskExecution createSampleTaskExecutionNoArg(){  Random randomGenerator=new Random();  Date startTime=new Date();  long executionId=randomGenerator.nextLong();  String taskName=UUID.randomUUID().toString();  return new TaskExecution(executionId,0,taskName,startTime,null,null,new ArrayList<String>(),null,null);}  }
class C{  public HandlerThread(String name,int priority){  super(name);  mPriority=priority;}  }
class C{  public static void clickButtonByName(String name){  if (verbose) {    log("clickButtonByName(" + name + ")");  }  Button b=(Button)findByName(name);  waitFor(20);  b.pressed();  waitFor(20);  b.released();  waitFor(20);}  }
class C{  @Inject public DefaultDiscoveryService(SchemaService schemaService,SystemConfiguration config){  super(config);  this._schemaService=schemaService;}  }
class C{  protected void closingOK(){  StringBuffer buff=new StringBuffer();  for (int i=0; i < m_listModel.size(); i++) {    SubstringLabelerRules.SubstringLabelerMatchRule m=(SubstringLabelerRules.SubstringLabelerMatchRule)m_listModel.elementAt(i);    buff.append(m.toStringInternal());    if (i < m_listModel.size() - 1) {      buff.append("@@match-rule@@");    }  }  m_labeler.setMatchDetails(buff.toString());  m_labeler.setNominalBinary(m_nominalBinaryCheck.isSelected());  m_labeler.setConsumeNonMatching(m_consumeNonMatchingCheck.isSelected());  m_labeler.setMatchAttributeName(m_matchAttNameField.getText());  if (m_modifyL != null) {    m_modifyL.setModifiedStatus(SubstringLabelerCustomizer.this,true);  }}  }
class C{  @Override public boolean equals(Object o){  if (o == this) {    return true;  }  if (!(o instanceof ClosureConverter)) {    return false;  }  return this.type == ((ClosureConverter)o).type;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:12.123 -0500",hash_original_method="72277D8D6A4CD4D2004A6DECEFEB4DA7",hash_generated_method="30DB49AE89C5C9FED8A64249CF2111A3") public XmlSerializer newSerializer() throws XmlPullParserException {  if (serializerClasses == null) {    throw new XmlPullParserException("Factory initialization incomplete - has not tried " + classNamesLocation);  }  if (serializerClasses.size() == 0) {    throw new XmlPullParserException("No valid serializer classes found in " + classNamesLocation);  }  final StringBuilder issues=new StringBuilder();  for (int i=0; i < serializerClasses.size(); i++) {    final Class ppClass=(Class)serializerClasses.get(i);    try {      final XmlSerializer ser=(XmlSerializer)ppClass.newInstance();      return ser;    } catch (    Exception ex) {      issues.append(ppClass.getName() + ": " + ex.toString()+ "; ");    }  }  throw new XmlPullParserException("could not create serializer: " + issues);}  }
class C{  public boolean isLoggedInUserPlayingAGame(){  boolean result=false;  if (isConnected()) {    for (    Game game : getGameService().getAllActiveGames()) {      if (game.isInState(Game.PLAYING_STATE)) {        result=true;        break;      }    }  }  return result;}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Double && val instanceof Integer) {          double k=unwrapKey(key);          int v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public static double norm_inf(float[] a){  double max=Double.NEGATIVE_INFINITY;  for (int i=0; i < a.length; i++) {    if (Math.abs(a[i]) > max) {      max=Math.abs(a[i]);    }  }  return max;}  }
class C{  public TetradMatrix pruneEdgesByResampling(TetradMatrix data,int[] k){  if (k.length != data.columns()) {    throw new IllegalArgumentException("Execting a permutation.");  }  Set<Integer> set=new LinkedHashSet<>();  for (int i=0; i < k.length; i++) {    if (k[i] >= k.length) {      throw new IllegalArgumentException("Expecting a permutation.");    }    if (set.contains(i)) {      throw new IllegalArgumentException("Expecting a permutation.");    }    set.add(i);  }  TetradMatrix X=data.transpose();  int npieces=10;  int cols=X.columns();  int rows=X.rows();  int piecesize=(int)Math.floor(cols / npieces);  List<TetradMatrix> bpieces=new ArrayList<>();  for (int p=0; p < npieces; p++) {    int p0=(p) * piecesize;    int p1=(p + 1) * piecesize - 1;    int[] range=range(p0,p1);    TetradMatrix Xp=X.getSelection(k,range);    double[] Xpm=new double[rows];    for (int i=0; i < rows; i++) {      double sum=0.0;      for (int j=0; j < Xp.columns(); j++) {        sum+=Xp.get(i,j);      }      Xpm[i]=sum / Xp.columns();    }    for (int i=0; i < rows; i++) {      for (int j=0; j < Xp.columns(); j++) {        Xp.set(i,j,Xp.get(i,j) - Xpm[i]);      }    }    TetradMatrix cov=Xp.times(Xp.transpose());    boolean posDef=MatrixUtils.isPositiveDefinite(cov);    if (!posDef) {      System.out.println("Covariance matrix is not positive definite.");    }    TetradMatrix invSqrt=cov.sqrt().inverse();    QRDecomposition qr=new QRDecomposition(invSqrt.getRealMatrix());    RealMatrix r=qr.getR();    TetradVector newestdisturbancestd=new TetradVector(rows);    for (int t=0; t < rows; t++) {      newestdisturbancestd.set(t,1.0 / abs(r.getEntry(t,t)));    }    for (int s=0; s < rows; s++) {      for (int t=0; t < min(s,cols); t++) {        r.setEntry(s,t,r.getEntry(s,t) / r.getEntry(s,s));      }    }    TetradMatrix bnewest=TetradMatrix.identity(rows);    bnewest=bnewest.minus(new TetradMatrix(r));    int[] ik=iperm(k);    bnewest=bnewest.getSelection(ik,ik);    bpieces.add(bnewest);  }  TetradMatrix means=new TetradMatrix(rows,rows);  TetradMatrix stds=new TetradMatrix(rows,rows);  TetradMatrix BFinal=new TetradMatrix(rows,rows);  for (int i=0; i < rows; i++) {    for (int j=0; j < rows; j++) {      double[] b=new double[npieces];      for (int y=0; y < npieces; y++) {        b[y]=bpieces.get(y).get(i,j);      }      double themean=StatUtils.mean(b);      double thestd=StatUtils.sd(b);      means.set(i,j,themean);      stds.set(i,j,thestd);      if (abs(themean) < getPruneFactor() * thestd) {        BFinal.set(i,j,0);      } else {        BFinal.set(i,j,themean);      }    }  }  return BFinal;}  }
class C{  public void testReadTimeout() throws Exception {  int bigLogTimeout=5000;  File logDir=prepareLogDir("testReadWriteBasic");  DiskLog log=new DiskLog();  log.setReadOnly(false);  log.setLogDir(logDir.getAbsolutePath());  log.setTimeoutMillis(bigLogTimeout);  log.prepare();  writeEventsToLog(log,1);  LogConnection conn=log.connect(true);  assertTrue("Seek first record",conn.seek(0));  assertNotNull("Return first record",conn.next());  long startMillis=System.currentTimeMillis();  try {    conn.next();    throw new Exception("Read #1 did not timeout!");  } catch (  LogTimeoutException e) {  }  long intervalMillis=System.currentTimeMillis() - startMillis;  assertTrue("Took at least 5 seconds to complete",5000 <= intervalMillis);  conn.setTimeoutMillis(10);  assertTrue("Seek first record",conn.seek(0));  assertNotNull("Return first record",conn.next());  startMillis=System.currentTimeMillis();  try {    conn.next();    throw new Exception("Read #2 did not timeout!");  } catch (  LogTimeoutException e) {  }  intervalMillis=System.currentTimeMillis() - startMillis;  assertTrue("Took less than 1 second to complete",1000 > intervalMillis);  conn.release();  log.release();}  }
class C{  public static SynapseDialog createSynapseDialog(final List<Synapse> selectedSynapses){  SynapseDialog sd=new SynapseDialog(selectedSynapses);  sd.addListeners();  return sd;}  }
class C{  @Override public boolean containsAll(Collection<?> arg0){  for (  Object o : arg0) {    if (!contains(o)) {      return false;    }  }  return true;}  }
class C{  public static void fail(int errorCode,String parameter){  throw new RuntimeException(MP.getMessage(errorCode,parameter));}  }
class C{  public CacheObject load(Object key){  try {    if (key instanceof ImageReader) {      BufferedImage fileImage=((ImageReader)key).getBufferedImage();      return new CacheObject(key,fileImage);    }  } catch (  Exception e) {  }  return null;}  }
class C{  public void testBasicRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_de:[tone TO tp]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=4]","//result/doc[2]/int[@name='id'][.=7]");}  }
class C{  public boolean hasConnection(IOFConnectionBackend connection){  if (this.mainConnection.equals(connection) || this.auxConnections.get(connection.getAuxId()) == connection) {    return true;  } else {    return false;  }}  }
class C{  private void deselectAllItems(){  selected=new int[0];  repaint(PAINT_ITEMS);}  }
class C{  public synchronized DBMSEvent extract() throws ReplicatorException, InterruptedException {  String[] rowDef=null;  OneRowChange orc=null;  ArrayList<ColumnVal> columnValues=null;  ColumnSpec cDef=null;  ColumnVal cVal=null;  DBMSEvent dbmsEvent=null;  ArrayList<DBMSData> dataArray=null;  RowChangeData rowChangeData=null;  if (this.currentTableName == null) {    return this.getFinishLoadEvent();  }  try {    rowChangeData=new RowChangeData();    dataArray=new ArrayList<DBMSData>();    orc=new OneRowChange();    orc.setAction(ActionType.INSERT);    orc.setSchemaName(this.getDefaultSchema());    orc.setTableName(this.currentTableName);    orc.setColumnSpec(this.columnDefinitions.get(this.currentTableName));    try {      while ((rowDef=this.readNext(lineReader)) != null) {        columnValues=new ArrayList<ColumnVal>();        for (int i=0; i < rowDef.length; i++) {          cDef=this.columnDefinitions.get(this.currentTableName).get(i);          cVal=orc.new ColumnVal();          try {            cVal.setValue(this.parseStringValue(cDef.getType(),rowDef[i]));          } catch (          Exception e) {            throw new ReplicatorException("Unable to parse value for " + cDef.getName() + " from "+ rowDef[i]);          }          columnValues.add(cVal);        }        orc.getColumnValues().add(columnValues);        if (orc.getColumnValues().size() >= this.chunkSize) {          break;        }      }    } catch (    IOException e) {      throw new ReplicatorException("Unable to read next line from " + this.currentTableName);    }    rowChangeData.appendOneRowChange(orc);    dataArray.add(rowChangeData);    runtime.getMonitor().incrementEvents(dataArray.size());    dbmsEvent=new DBMSEvent(this.currentTableName + ":" + lineReader.getLineNumber(),null,dataArray,true,null);    dbmsEvent.setMetaDataOption(ReplOptionParams.SHARD_ID,dbmsEvent.getEventId());    if (orc.getColumnValues().size() == 0) {      return null;    }    return dbmsEvent;  }  finally {    if (hasNext == false) {      this.nextTable();    }  }}  }
class C{  private int findSelectedColumn(final TableItem tableItem){  for (int i=0; i < this.columns.size(); i++) {    if (this.columns.get(i).equals(tableItem.getParent())) {      return i;    }  }  return -1;}  }
class C{  public long copy(final InputStream from,final OutputStream to) throws IOException {  long count=0;  byte[] tmp=mByteArrayPool.get(mTempBufSize);  try {    while (true) {      int read=from.read(tmp,0,mTempBufSize);      if (read == -1) {        return count;      }      to.write(tmp,0,read);      count+=read;    }  }  finally {    mByteArrayPool.release(tmp);  }}  }
class C{  public DateTimeConverter(Object defaultValue){  super(defaultValue);}  }
class C{  public String computeSignature(Map<String,String> headers,Map<String,String> queryParameters,String bodyHash,String awsAccessKey,String awsSecretKey){  Date now=new Date();  this.dateTimeStamp=dateTimeFormat.format(now);  headers.put("x-amz-date",dateTimeStamp);  String hostHeader=endpointUrl.getHost();  int port=endpointUrl.getPort();  if (port > -1) {    hostHeader=hostHeader.concat(":" + Integer.toString(port));  }  headers.put("Host",hostHeader);  String canonicalizedHeaderNames=getCanonicalizeHeaderNames(headers);  String canonicalizedHeaders=getCanonicalizedHeaderString(headers);  String canonicalizedQueryParameters=getCanonicalizedQueryString(queryParameters);  String canonicalRequest=getCanonicalRequest(endpointUrl,httpMethod,canonicalizedQueryParameters,canonicalizedHeaderNames,canonicalizedHeaders,bodyHash);  System.out.println("--------- Canonical request --------");  System.out.println(canonicalRequest);  System.out.println("------------------------------------");  String dateStamp=dateStampFormat.format(now);  this.scope=dateStamp + "/" + regionName+ "/"+ serviceName+ "/"+ TERMINATOR;  String stringToSign=getStringToSign(SCHEME,ALGORITHM,dateTimeStamp,scope,canonicalRequest);  System.out.println("--------- String to sign -----------");  System.out.println(stringToSign);  System.out.println("------------------------------------");  byte[] kSecret=(SCHEME + awsSecretKey).getBytes();  byte[] kDate=sign(dateStamp,kSecret,"HmacSHA256");  byte[] kRegion=sign(regionName,kDate,"HmacSHA256");  byte[] kService=sign(serviceName,kRegion,"HmacSHA256");  this.signingKey=sign(TERMINATOR,kService,"HmacSHA256");  byte[] signature=sign(stringToSign,signingKey,"HmacSHA256");  lastComputedSignature=BinaryUtils.toHex(signature);  String credentialsAuthorizationHeader="Credential=" + awsAccessKey + "/"+ scope;  String signedHeadersAuthorizationHeader="SignedHeaders=" + canonicalizedHeaderNames;  String signatureAuthorizationHeader="Signature=" + lastComputedSignature;  return String.format("%s-%s %s, %s, %s",SCHEME,ALGORITHM,credentialsAuthorizationHeader,signedHeadersAuthorizationHeader,signatureAuthorizationHeader);}  }
class C{  public String thresholdTipText(){  return "The threshold option.";}  }
class C{  @Override public void cacheGameProperties(final GameData gameData){  final Map<String,Object> serializableMap=new HashMap<>();  for (  final IEditableProperty property : gameData.getProperties().getEditableProperties()) {    if (property.getValue() instanceof Serializable) {      serializableMap.put(property.getName(),property.getValue());    }  }  final File cache=getCacheFile(gameData);  try {    if (!cache.getParentFile().exists()) {      cache.getParentFile().mkdirs();    }    final ObjectOutputStream out=new ObjectOutputStream(new FileOutputStream(cache));    out.writeObject(serializableMap);    out.close();  } catch (  final IOException e) {    ClientLogger.logQuietly(e);  }}  }
class C{  @Override public List<String> parseOutput(final String stdout,final String stderr){  final String[] output=getLines(stdout);  if (StringUtils.isNotEmpty(stderr)) {    logger.error("Undo failed with the following stderr: " + stderr);    for (int i=0; i < output.length; i++) {      if (isOutputLineExpected(output[i],new String[]{UNDO_LINE_PREFIX},true)) {        throw new RuntimeException(output[i]);      }    }    logger.error("Parsing of the stdout failed to get the error message");    throw new TeamServicesException(TeamServicesException.KEY_ERROR_UNKNOWN);  }  final List<String> filesUndone=new ArrayList<String>();  String path=StringUtils.EMPTY;  for (int i=0; i < output.length; i++) {    if (isFilePath(output[i])) {      path=output[i];    } else     if (StringUtils.isNotEmpty(output[i])) {      filesUndone.add(getFilePath(path,output[i],""));    }  }  return filesUndone;}  }
class C{  public void testKeywordTokenizer() throws Exception {  Reader reader=new StringReader("What's this thing do?");  Tokenizer stream=tokenizerFactory("Keyword").create();  stream.setReader(reader);  assertTokenStreamContents(stream,new String[]{"What's this thing do?"});}  }
class C{  @SuppressWarnings("cast") @Override public void clear(){  if (status != DequeStatus.Empty) {    int cursor=front;    do {      elements[cursor]=null;      cursor=circularBiggerPos(cursor);    } while (cursor != rear);    status=DequeStatus.Empty;  }  front=rear=0;  modCount=0;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___IS_FINAL:      return TypesPackage.TFUNCTION___IS_FINAL;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == SyntaxRelatedTElement.class) {switch (baseOperationID) {default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static boolean putFloat(ContentResolver cr,String name,float value){  return putString(cr,name,Float.toString(value));}  }
class C{  public static void robotReady(){  FRCNetworkCommunicationsLibrary.FRCNetworkCommunicationObserveUserProgramStarting();}  }
class C{  public static void arrangeButtons(Context context,Window window){  LinearLayout panel=findButtonPanel(window);  if (panel == null)   return;  int paddingHorizontal=context.getResources().getDimensionPixelSize(R.dimen.gm__dialog_buttons_padding_horizontal);  panel.setPadding(paddingHorizontal,panel.getPaddingTop(),paddingHorizontal,panel.getPaddingBottom());  panel.setHorizontalGravity(Gravity.END);  int childCount=panel.getChildCount();  for (int i=0; i < childCount; i++)   removeLayoutWeight(panel.getChildAt(i));  View buttonNeutral=window.findViewById(NativeResources.getIdentifier("button3"));  if (buttonNeutral != null) {    panel.removeView(buttonNeutral);    panel.addView(buttonNeutral,0);    View space=new View(context);    LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(0,0,1f);    panel.addView(space,1,params);  }}  }
class C{  public static HadoopIgfsSecondaryFileSystemDelegate secondaryFileSystemDelegate(HadoopClassLoader ldr,IgniteHadoopIgfsSecondaryFileSystem proxy){  return newInstance(SECONDARY_FILE_SYSTEM_CLS,ldr,proxy);}  }
class C{  public void printPopulation(final EvolutionState state,final int log){  state.output.println(NUM_SUBPOPS_PREAMBLE + Code.encode(subpops.length),log);  for (int i=0; i < subpops.length; i++) {    state.output.println(SUBPOP_INDEX_PREAMBLE + Code.encode(i),log);    subpops[i].printSubpopulation(state,log);  }}  }
class C{  public ContentQueryMap(Cursor cursor,String columnNameOfKey,boolean keepUpdated,Handler handlerForUpdateNotifications){  mCursor=cursor;  mColumnNames=mCursor.getColumnNames();  mKeyColumn=mCursor.getColumnIndexOrThrow(columnNameOfKey);  mHandlerForUpdateNotifications=handlerForUpdateNotifications;  setKeepUpdated(keepUpdated);  if (!keepUpdated) {    readCursorIntoCache(cursor);  }}  }
class C{  private static String readVolumeId(VolumeFeed volumeFeed) throws IOException {  System.out.println("Input the index of one of the volumes listed above (1-" + volumeFeed.getEntries().size() + ")");  int input=readInt();  if (input == 0) {    return "";  }  return volumeFeed.getEntries().get(input - 1).getId();}  }
class C{  @Override protected int compareThis(Object o1,Object o2){  int retVal=0;  if (o1 instanceof Date && o2 instanceof Date) {    Date d1=(Date)o1;    Date d2=(Date)o2;    calendar.setTime(new Date());    calendar.add(dateField,dateToAdd);    Date dateAddValue=calendar.getTime();    int d1CompNum=d1.compareTo(dateAddValue);    int d2CompNum=d2.compareTo(dateAddValue);    if (d1CompNum <= -1 && d2CompNum <= -1)     return 0; else     if (d1CompNum >= 1 && d2CompNum >= 1)     return 0; else     if (d1CompNum == 1)     return 1; else     if (d1CompNum == -1)     return -1;  }  return retVal;}  }
class C{  public final Vec3D rotateAroundAxis(ReadonlyVec3D axis,float theta){  final float ax=axis.x();  final float ay=axis.y();  final float az=axis.z();  final float ux=ax * x;  final float uy=ax * y;  final float uz=ax * z;  final float vx=ay * x;  final float vy=ay * y;  final float vz=ay * z;  final float wx=az * x;  final float wy=az * y;  final float wz=az * z;  final double si=Math.sin(theta);  final double co=Math.cos(theta);  float xx=(float)(ax * (ux + vy + wz) + (x * (ay * ay + az * az) - ax * (vy + wz)) * co + (-wy + vz) * si);  float yy=(float)(ay * (ux + vy + wz) + (y * (ax * ax + az * az) - ay * (ux + wz)) * co + (wx - uz) * si);  float zz=(float)(az * (ux + vy + wz) + (z * (ax * ax + ay * ay) - az * (ux + vy)) * co + (-vx + uy) * si);  x=xx;  y=yy;  z=zz;  return this;}  }
class C{  public ElementRule(String name,XMLSyntaxRule[] rules){  this.name=name;  this.rules=rules;}  }
class C{  public ShapeWriter(PointTransformation pointTransformer){  this(pointTransformer,null);}  }
class C{  public RenderingHintsRenderPolicy(){  super();  setRenderingHints(new RenderingHints(null));}  }
class C{  public static void dump(BaseFeed feed,OutputStream out) throws IOException {  Writer w=new OutputStreamWriter(out);  XmlWriter xmlW=new XmlWriter(w,false);  feed.generateAtom(xmlW,new ExtensionProfile());  w.flush();}  }
class C{  private static int subtractIndent(CharSequence correct,CharSequence current,StringBuffer difference,int tabSize){  int c1=computeVisualLength(correct,tabSize);  int c2=computeVisualLength(current,tabSize);  int diff=c1 - c2;  if (diff <= 0)   return diff;  difference.setLength(0);  int len=0, i=0;  while (len < diff) {    char c=correct.charAt(i++);    difference.append(c);    len+=computeVisualLength(c,tabSize);  }  return diff;}  }
class C{  public void testLength() throws Exception {  CharacterRunAutomaton length5=new CharacterRunAutomaton(new RegExp(".{5,}").toAutomaton());  Analyzer a=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,true,length5);  assertAnalyzesTo(a,"ok toolong fine notfine",new String[]{"ok","fine"},new int[]{1,2});}  }
class C{  public static ArrayList<ASTNode> findDescendantElements(PsiElement element,IElementType toFind,ASTNode cursor,@Nullable String textContent){  ArrayList<ASTNode> list=new ArrayList<>();  traverseElement(list,element,toFind,cursor,textContent);  return list;}  }
class C{  @LargeTest public void testPreviewTheStoryBoardFromDuration() throws Exception {  final String videoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_96kbps_s_0_21.mp4";  final String videoItemFileName2=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_256kbps_0_30.mp4";  final String videoItemFileName3=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_1_17.3gp";  final Semaphore blockTillPreviewCompletes=new Semaphore(1);  previewStart=false;  previewStop=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem1.setExtractBoundaries(0,10000);  mVideoEditor.addMediaItem(mediaVideoItem1);  final MediaVideoItem mediaVideoItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem2",videoItemFileName2,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem2.setExtractBoundaries(0,10000);  mVideoEditor.addMediaItem(mediaVideoItem2);  final MediaVideoItem mediaVideoItem3=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem3",videoItemFileName3,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem3.setExtractBoundaries(0,10000);  mVideoEditor.insertMediaItem(mediaVideoItem3,mediaVideoItem1.getId());  List<MediaItem> mediaList=mVideoEditor.getAllMediaItems();  assertEquals("Media Item 1",mediaVideoItem1,mediaList.get(0));  assertEquals("Media Item 3",mediaVideoItem3,mediaList.get(1));  assertEquals("Media Item 2",mediaVideoItem2,mediaList.get(2));  mediaVideoItem1.setRenderingMode(MediaItem.RENDERING_MODE_BLACK_BORDER);  assertEquals("Media Item 1 Rendering Mode",MediaItem.RENDERING_MODE_BLACK_BORDER,mediaVideoItem1.getRenderingMode());  mediaVideoItem2.setRenderingMode(MediaItem.RENDERING_MODE_BLACK_BORDER);  assertEquals("Media Item 2 Rendering Mode",MediaItem.RENDERING_MODE_BLACK_BORDER,mediaVideoItem2.getRenderingMode());  mediaVideoItem3.setRenderingMode(MediaItem.RENDERING_MODE_STRETCH);  assertEquals("Media Item 3 Rendering Mode",MediaItem.RENDERING_MODE_STRETCH,mediaVideoItem3.getRenderingMode());  mVideoEditor.setAspectRatio(MediaProperties.ASPECT_RATIO_5_3);  assertEquals("Aspect Ratio",MediaProperties.ASPECT_RATIO_5_3,mVideoEditor.getAspectRatio());  validatePreviewProgress(10000,-1,false,mVideoEditor.getDuration());}  }
class C{  private Builder(ClusterTaskConfig config){  this.cpus=config.cpus;  this.memoryMb=config.memoryMb;  this.diskMb=config.diskMb;}  }
class C{  private boolean doSetPos(Object colValue,int col){  boolean rVal=false;  m_currentRowPos=-1;  int dataSize=m_data.size();  for (int i=0; i < dataSize; i++) {    Vector<?> row=(Vector<?>)m_data.elementAt(i);    if (row.elementAt(col).equals(colValue)) {      m_currentRowPos=i;      rVal=true;      break;    }  }  return (rVal);}  }
class C{  public void enter(){  if (!visited) {    CompilerDirectives.transferToInterpreterAndInvalidate();    visited=true;  }}  }
class C{  public void insert(int index,float v){  _insert(index,numberNode(v));}  }
class C{  public static IStatus validateTypeVariableName(String name,String sourceLevel,String complianceLevel){  return validateIdentifier(name,sourceLevel,complianceLevel);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (true);}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  public boolean acceptsURL(String url) throws SQLException {  if (url == null)   return false; else   if (url.toLowerCase().startsWith(jamonURL))   return true; else   return false;}  }
class C{  static DProtocol createFromSocket(Socket s,SessionManager sessionManager) throws IOException {  applyBaseSocketSettings(s);  int socketTimeout=sessionManager.getPreference(SessionManager.PREF_SOCKET_TIMEOUT);  boolean checkSocket=false;  if (socketTimeout > 0) {    s.setSoTimeout(socketTimeout);    checkSocket=true;  }  return createDProtocolFromSocket(s,checkSocket);}  }
class C{  public boolean isApplicationClass(JavaClass cls){  return getSubtypes2().isApplicationClass(DescriptorFactory.createClassDescriptor(cls));}  }
class C{  public void cleanupResource(){synchronized (this.managedRegionResourcesMap) {    Collection<SystemMemberRegionJmxImpl> values=managedRegionResourcesMap.values();    for (    SystemMemberRegionJmxImpl systemMemberRegionJmxImpl : values) {      MBeanUtil.unregisterMBean(systemMemberRegionJmxImpl);    }    this.managedRegionResourcesMap.clear();  }synchronized (this.managedCacheServerResourcesMap) {    Collection<SystemMemberBridgeServerJmxImpl> values=managedCacheServerResourcesMap.values();    for (    SystemMemberBridgeServerJmxImpl SystemMemberBridgeServerJmxImpl : values) {      MBeanUtil.unregisterMBean(SystemMemberBridgeServerJmxImpl);    }    this.managedCacheServerResourcesMap.clear();  }}  }
class C{  public RegistrationException(String message){  super(message);}  }
class C{  public void mapClear(String settingName){synchronized (LOCK) {    getMapInternal(settingName).clear();  }}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  XBLOMElement e=(XBLOMElement)n;  e.prefix=prefix;  return n;}  }
class C{  public ReleaseToShipmentOrderEventHandlerImpl(final PaymentProcessorFactory paymentProcessorFactory){  this.paymentProcessorFactory=paymentProcessorFactory;}  }
class C{  public SaveWorkspaceAction(SimbrainDesktop desktop){  super("Save Workspace",desktop);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Save.png"));  putValue(SHORT_DESCRIPTION,"Save workspace");  Toolkit toolkit=Toolkit.getDefaultToolkit();  KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_S,toolkit.getMenuShortcutKeyMask());  putValue(ACCELERATOR_KEY,keyStroke);}  }
class C{  public Conference(String name,League league){  confName=name;  confPrestige=75;  confTeams=new ArrayList<Team>();  this.league=league;  week=0;  robinWeek=0;  allConfPlayers=new ArrayList<Player>();}  }
class C{  public Object remove(Object key){  int hash=hash(key);  Entry[] tab=table;  int index=hash & (tab.length - 1);  Entry first=tab[index];  Entry e=first;  for (e=first; e != null; e=e.next)   if (e.hash == hash && eq(key,e.key))   break;synchronized (this) {    if (tab == table) {      if (e == null) {        if (first == tab[index])         return null;      } else {        Object oldValue=e.value;        if (first == tab[index] && oldValue != null) {          e.value=null;          count--;          Entry head=e.next;          for (Entry p=first; p != e; p=p.next)           head=new Entry(p.hash,p.key,p.value,head);          tab[index]=head;          recordModification(head);          return oldValue;        }      }    }    return sremove(key,hash);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.087 -0500",hash_original_method="210E874B3CC8A8754EDB8A64197F3EDD",hash_generated_method="87CA7DD5A7AE4AA411592B813E76CF34") public void loadData(String baseUrl,String data,String mimeType,String encoding,String historyUrl){  mLoadInitFromJava=true;  if (historyUrl == null || historyUrl.length() == 0) {    historyUrl="about:blank";  }  if (data == null) {    data="";  }  if (baseUrl == null || baseUrl.length() == 0) {    baseUrl="about:blank";  }  if (mimeType == null || mimeType.length() == 0) {    mimeType="text/html";  }  nativeLoadData(baseUrl,data,mimeType,encoding,historyUrl);  mLoadInitFromJava=false;}  }
class C{  public boolean nullsAreSortedHigh() throws SQLException {  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.678 -0500",hash_original_method="56E955925627A96DCDE69BCFADC27964",hash_generated_method="8A6643F14BD489EA94E2349ED39852F6") public static Double valueOf(String string) throws NumberFormatException {  return parseDouble(string);}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((SerialListener)client).message((SerialMessage)m);}  }
class C{  protected Vertex createInputParagraph(String text,Network network){  if (getBot().getFilterProfanity()) {    if (Utils.checkProfanity(text)) {      throw BotException.offensive();    }  }  Utils.checkScript(text);  Vertex sentence=network.createParagraph(text);  if (sentence.hasRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE)) {    throw BotException.offensive();  }  if (sentence.instanceOf(Primitive.PARAGRAPH)) {    Collection<Relationship> relationships=sentence.getRelationships(Primitive.SENTENCE);    for (    Relationship relationship : relationships) {      if (relationship.getTarget().hasRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE)) {        throw BotException.offensive();      }    }  }  Vertex input=network.createInstance(Primitive.INPUT);  input.setName(text);  input.addRelationship(Primitive.SENSE,getPrimitive());  input.addRelationship(Primitive.INPUT,sentence);  return input;}  }
class C{  public int FindSym(String id,String context){  int i=0;  while (i < symtab.size()) {    SymTabEntry se=(SymTabEntry)symtab.elementAt(i);    if (se.id.equals(id) && se.context.equals(context))     return i;    i=i + 1;  }  return i;}  }
class C{  public int update(String table,ContentValues values,String whereClause,String[] whereArgs){  verifyDbIsOpen();  if (values == null || values.size() == 0) {    throw new IllegalArgumentException("Empty values");  }  StringBuilder sql=new StringBuilder(120);  sql.append("UPDATE ");  sql.append(table);  sql.append(" SET ");  int setValuesSize=values.size();  int bindArgsSize=(whereArgs == null) ? setValuesSize : (setValuesSize + whereArgs.length);  Object[] bindArgs=new Object[bindArgsSize];  int i=0;  for (  String colName : values.keySet()) {    sql.append((i > 0) ? "," : "");    sql.append(colName);    bindArgs[i++]=values.get(colName);    sql.append("=?");  }  if (whereArgs != null) {    for (i=setValuesSize; i < bindArgsSize; i++) {      bindArgs[i]=whereArgs[i - setValuesSize];    }  }  if (!StringUtils.isEmpty(whereClause)) {    sql.append(" WHERE ");    sql.append(whereClause);  }  return executeSql(sql.toString(),bindArgs);}  }
class C{  public void popSAXLocator(){  m_saxLocations.pop();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.GROUP__NON_CAPTURING:    return isNonCapturing();case RegularExpressionPackage.GROUP__PATTERN:  return getPattern();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public KMLData(String namespaceURI){  super(namespaceURI);}  }
class C{  public void testLegacyLongMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyLongField("value",-1,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyLongField("value",4,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_LONG));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.LONG));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public synchronized void free(long pos,int length){  int start=(int)(pos / blockSize);  int required=getBlockCount(length);  BlockRange found=null;  int i=0;  for (  BlockRange pr : freeSpaceList) {    if (pr.start > start) {      found=pr;      break;    }    i++;  }  if (found == null) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,"Cannot find spot to mark as unused in free list");  }  if (start + required == found.start) {    found.start=start;    found.length+=required;    if (i > 0) {      BlockRange previous=freeSpaceList.get(i - 1);      if (previous.start + previous.length == found.start) {        previous.length+=found.length;        freeSpaceList.remove(i);      }    }    return;  }  if (i > 0) {    BlockRange previous=freeSpaceList.get(i - 1);    if (previous.start + previous.length == start) {      previous.length+=required;      return;    }  }  BlockRange newRange=new BlockRange(start,required);  freeSpaceList.add(i,newRange);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  m_Support.addPropertyChangeListener(l);}  }
class C{  HeapCompactSketch(long[] compactCache,boolean empty,short seedHash,int curCount,long thetaLong){  super(empty,seedHash,curCount,thetaLong);  assert compactCache != null;  cache_=(curCount == 0) ? new long[0] : compactCache;}  }
class C{  public static IJavaElement createFromFile(File file,IJavaProject project){  if (file == null) {    return null;  }  String name=file.getName();  if (Util.isJavaLikeFileName(name))   return createCompilationUnitFrom(file,project);  if (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(name))   return createClassFileFrom(file,project);  return createJarPackageFragmentRootFrom(file,(JavaProject)project);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.665 -0500",hash_original_method="17C4DDD354C5E051E7720776FDB1621B",hash_generated_method="8338E2915F438BB5FC2143FBC58A704E") public void removeTransport(){  if (uriParms != null)   uriParms.delete(TRANSPORT);}  }
class C{  public boolean hasKilledShared(final String name){  return killRec.hasKilledShared(name);}  }
class C{  @Override public int length(){  return data.length / (format.getFrameSize() * 8);}  }
class C{  public static void createF2L(Scenario scenario,String path2File){  createF2L(scenario.getActivityFacilities(),scenario.getNetwork(),path2File);}  }
class C{  public static SettingListFragment newInstance(String param1,String param2){  SettingListFragment fragment=new SettingListFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  protected void endTag(boolean omitted){  handleText(stack.tag);  if (omitted && !stack.elem.omitEnd()) {    error("end.missing",stack.elem.getName());  } else   if (!stack.terminate()) {    error("end.unexpected",stack.elem.getName());  }  handleEndTag(stack.tag);  stack=stack.next;  recent=(stack != null) ? stack.elem : null;}  }
class C{  private List<TransitRouteStop> routeProfilesTouch(TransitRoute transitRoute,TransitRoute refTransitRoute){  List<TransitRouteStop> stops=new ArrayList<TransitRouteStop>();  for (  TransitRouteStop stop : refTransitRoute.getStops()) {    if (transitRoute.getStops().contains(stop))     stops.add(stop);  }  return stops;}  }
class C{  public DefaultTableColumnModel(){  super();  tableColumns=new Vector<TableColumn>();  setSelectionModel(createSelectionModel());  setColumnMargin(1);  invalidateWidthCache();  setColumnSelectionAllowed(false);}  }
class C{  public Pos3D centre(){  return translate(0.5,0.5,0.5);}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  protected final void addBehavior(String name,String behaviorId){  this.factories.put(name,new BehaviorHandlerFactory(behaviorId));}  }
class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public PatternTokenizer(AttributeFactory factory,Pattern pattern,int group){  super(factory);  this.group=group;  matcher=pattern.matcher("");  if (group >= 0 && group > matcher.groupCount()) {    throw new IllegalArgumentException("invalid group specified: pattern only has: " + matcher.groupCount() + " capturing groups");  }}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  @Reference(authors="T. Vincenty",title="Direct and inverse solutions of geodesics on the ellipsoid with application of nested equations",booktitle="Survey review 23 176, 1975",url="http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf") public static double sphericalVincentyFormulaDeg(double lat1,double lon1,double lat2,double lon2){  return sphericalVincentyFormulaRad(MathUtil.deg2rad(lat1),MathUtil.deg2rad(lon1),MathUtil.deg2rad(lat2),MathUtil.deg2rad(lon2));}  }
class C{  static URL fixPureQueryTargets(URL base,String target) throws MalformedURLException {  if (!target.startsWith("?"))   return new URL(base,target);  String basePath=base.getPath();  String baseRightMost="";  int baseRightMostIdx=basePath.lastIndexOf("/");  if (baseRightMostIdx != -1) {    baseRightMost=basePath.substring(baseRightMostIdx + 1);  }  if (target.startsWith("?"))   target=baseRightMost + target;  return new URL(base,target);}  }
class C{  public void resize(){  int rowHeight=jtable.getRowHeight();  jtable.setFirstColumnWidth();  int width, height;  int cols=jtable.getData().getColumnCount();  if (cols < maxVisibleColumns) {    width=cols * columnWidth;    jtable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);  } else   if (cols <= maxVisibleColumns + 2) {    width=maxVisibleColumns * columnWidth;    jtable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);  } else {    width=maxVisibleColumns * columnWidth;    jtable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  }  int rows=jtable.getData().getRowCount();  if (rows < maxVisibleRows) {    height=(rows + 1) * rowHeight;  } else {    height=(maxVisibleRows + 1) * rowHeight;  }  setPreferredSize(new Dimension(width,height));  revalidate();}  }
class C{  public OMRangeRings(double latPoint,double lonPoint,double radius){  this(new LatLonPoint.Double(latPoint,lonPoint),radius,Length.DECIMAL_DEGREE,-1);}  }
class C{  public static boolean exchangeInt(Address address,int oldValue,int value){  return getPage(address).exchangeInt(address,oldValue,value);}  }
class C{  public void pushMatrix(){  this.matrixStack.push(this.peekMatrix());}  }
class C{  public static <T>void reverseForEachWithIndex(List<T> list,ObjectIntProcedure<? super T> objectIntProcedure){  if (!list.isEmpty()) {    ListIterate.forEachWithIndex(list,list.size() - 1,0,objectIntProcedure);  }}  }
class C{  private boolean validateUpdate(Operation request){  if (hasOption(ServiceOption.CONCURRENT_UPDATE_HANDLING)) {    return false;  }  if (request.isFromReplication()) {    return false;  }  if (request.getRequestHeader(Operation.TRANSACTION_HEADER) != null) {    return false;  }  if (!hasOption(ServiceOption.STRICT_UPDATE_CHECKING)) {    return false;  }  ServiceDocument currentState=request.getLinkedState();  Object body=request.getBodyRaw();  if (body instanceof String) {    body=request.getBody(ServiceDocument.class);  } else   if (!(body instanceof ServiceDocument)) {    request.fail(new IllegalArgumentException("request body must derive from ServiceDocument"));    return true;  }  ServiceDocument sdBody=(ServiceDocument)body;  boolean isVersionMatch=this.context.version == sdBody.documentVersion;  String errorString=null;  if (!isVersionMatch) {    errorString=String.format("current version %d, update time %d. Request version %d, update time %d",currentState.documentVersion,currentState.documentUpdateTimeMicros,sdBody.documentVersion,sdBody.documentUpdateTimeMicros);    request.fail(new IllegalArgumentException(errorString));    return true;  }  return false;}  }
class C{  protected boolean doReconcile(){  if (!flowReconcileEnabled) {    return false;  }  lastReconcileTime=new Date();  ArrayList<OFMatchReconcile> ofmRcList=new ArrayList<OFMatchReconcile>();  int reconcileCapacity=getCurrentCapacity();  if (logger.isTraceEnabled()) {    logger.trace("Reconcile capacity {} flows",reconcileCapacity);  }  while (!flowQueue.isEmpty() && reconcileCapacity > 0) {    OFMatchReconcile ofmRc=flowQueue.poll();    reconcileCapacity--;    if (ofmRc != null) {      ofmRcList.add(ofmRc);      ctrReconciledFlows.increment();      if (logger.isTraceEnabled()) {        logger.trace("Add flow {} to be the reconcileList",ofmRc.cookie);      }    } else {      break;    }  }  IFlowReconcileListener.Command retCmd;  if (ofmRcList.size() > 0) {    List<IFlowReconcileListener> listeners=flowReconcileListeners.getOrderedListeners();    if (listeners == null) {      if (logger.isTraceEnabled()) {        logger.trace("No flowReconcile listener");      }      return false;    }    for (    IFlowReconcileListener flowReconciler : flowReconcileListeners.getOrderedListeners()) {      if (logger.isTraceEnabled()) {        logger.trace("Reconciling flow: call listener {}",flowReconciler.getName());      }      retCmd=flowReconciler.reconcileFlows(ofmRcList);      if (retCmd == IFlowReconcileListener.Command.STOP) {        break;      }    }    for (    OFMatchReconcile ofmRc : ofmRcList) {      if (ofmRc.origReconcileQueryEvent != null) {        ofmRc.origReconcileQueryEvent.evType.getDebugEvent().newEventWithFlush(new FlowReconcileQueryDebugEvent(ofmRc.origReconcileQueryEvent,"Flow Reconciliation Complete",ofmRc));      }    }    updateFlush();    flowReconcileThreadRunCount.incrementAndGet();  } else {    if (logger.isTraceEnabled()) {      logger.trace("No flow to be reconciled.");    }  }  if (flowQueue.isEmpty()) {    return false;  } else {    if (logger.isTraceEnabled()) {      logger.trace("{} more flows to be reconciled.",flowQueue.size());    }    return true;  }}  }
class C{  public Task<FileShareRestRep> mountNFS(URI id,FileSystemMountParam input){  return postTask(input,getIdUrl() + "/mount",id);}  }
class C{  public FastByteArrayInputStream(byte[] buffer){  buf=buffer;  count=buffer.length;  pos=0;  mark=0;}  }
class C{  protected ReferenceBinding actualType(){  return this.type;}  }
class C{  @Override protected boolean optimizeBranchInstruction(IR ir,Instruction s,BasicBlock bb){  if (Goto.conforms(s)) {    return processGoto(ir,s,bb);  } else   if (IfCmp.conforms(s)) {    return processConditionalBranch(ir,s,bb);  } else   if (InlineGuard.conforms(s)) {    return processInlineGuard(ir,s,bb);  } else   if (IfCmp2.conforms(s)) {    return processTwoTargetConditionalBranch(ir,s,bb);  } else {    return false;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.usa.com";  String localName="domest";  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr newAttr;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  newAttr=(Attr)attributes.getNamedItemNS(namespaceURI,localName);  assertNull("throw_Null",newAttr);}  }
class C{  public static boolean checkSDCardAvailable(){  return android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED);}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.main);  mPreview=(CameraSourcePreview)findViewById(R.id.preview);  mGraphicOverlay=(GraphicOverlay)findViewById(R.id.faceOverlay);  int rc=ActivityCompat.checkSelfPermission(this,Manifest.permission.CAMERA);  if (rc == PackageManager.PERMISSION_GRANTED) {    createCameraSource();  } else {    requestCameraPermission();  }}  }
class C{  public void startSync(){}  }
class C{  public void testStartViaFaster(boolean fastRouter){  Fixture f=new Fixture();  TestTimeCost tc=new TestTimeCost();  tc.setData(Id.create(1,Link.class),2.0,2.0);  tc.setData(Id.create(2,Link.class),1.0,1.0);  tc.setData(Id.create(3,Link.class),3.0,3.0);  tc.setData(Id.create(4,Link.class),2.0,2.0);  tc.setData(Id.create(5,Link.class),1.0,1.0);  tc.setData(Id.create(6,Link.class),3.0,3.0);  tc.setData(Id.create(7,Link.class),4.0,4.0);  MultiNodeDijkstra dijkstra=makeMultiNodeDikstra(f.network,tc,tc,fastRouter);  List<InitialNode> fromNodes=new ArrayList<InitialNode>();  List<InitialNode> toNodes=new ArrayList<InitialNode>();  fromNodes.add(new InitialNode(f.network.getNodes().get(Id.create(1,Node.class)),1.0,1.0));  fromNodes.add(new InitialNode(f.network.getNodes().get(Id.create(4,Node.class)),4.0,4.0));  toNodes.add(new InitialNode(f.network.getNodes().get(Id.create(5,Node.class)),0.0,0.0));  Node fromNode=dijkstra.createImaginaryNode(fromNodes);  Node toNode=dijkstra.createImaginaryNode(toNodes);  Path p=createPath(dijkstra,fromNode,toNode);  Assert.assertNotNull("no path found!",p);  Assert.assertEquals(3,p.links.size());  Assert.assertEquals("1",p.links.get(0).getId().toString());  Assert.assertEquals("7",p.links.get(1).getId().toString());  Assert.assertEquals("5",p.links.get(2).getId().toString());}  }
class C{  public void createProject(String applicationName,String repository){  try {    logger.info("JenkinsService : createProject " + applicationName);    if (rootToken == null || rootToken.trim().length() == 0) {      logger.warn("Cannot use this feature because no token for Jenkins");      return;    }    if (jenkinsOpen) {      HttpClient httpclient=HttpClientBuilder.create().build();      File config=new File("src/main/resources/config.xml");      if (config.exists()) {        PrintWriter writer=new PrintWriter(config);        writer.print("");        writer.close();      }      createConfigFile(repository,config);      FileEntity entity=new FileEntity(config);      String uri="http://" + JENKINS_IP + "/createItem?name="+ applicationName+ "&mode=hudson.model.FreeStyleProject";      HttpPost post=new HttpPost(uri);      post.setEntity(entity);      post.setHeader("Authorization",rootToken);      post.setHeader("Content-Type","application/xml");      httpclient.execute(post);      config.delete();      if (!config.exists())       logger.info(config.getName() + " is deleted!");    }  } catch (  Exception e) {    logger.error(applicationName + ", " + repository,applicationName,e);  }}  }
class C{  public static PostRequest post(String url){  return new PostRequest(url);}  }
class C{  public ZoneRulesException(String message){  super(message);}  }
class C{  protected int _dataOrQName(int identity){  if (identity < m_size)   return m_dataOrQName.elementAt(identity);  while (true) {    boolean isMore=nextNode();    if (!isMore)     return NULL; else     if (identity < m_size)     return m_dataOrQName.elementAt(identity);  }}  }
class C{  public static double AHmaxFitness(boolean useTrainingData,GEPIndividual ind){  return (useTrainingData ? GEPDependentVariable.trainingData.getDependentVariableValues().length : GEPDependentVariable.testingData.getDependentVariableValues().length);}  }
class C{  public void clear(){  mSize=0;}  }
class C{  public static int gcd(int... numbers){  int gcd=1;  boolean isDivisor;  for (int i=2; i < min(numbers); i++) {    isDivisor=true;    for (    int e : numbers) {      if (e % i != 0)       isDivisor=false;    }    if (isDivisor)     gcd=i;  }  return gcd;}  }
class C{  public void moveLeft(float offset){  x=x - offset;  for (  final Actor actor : actors) {    actor.setX(actor.getX() - offset);  }}  }
class C{  @Override public void reportSkippedAnalysis(MethodDescriptor method){  System.err.println("Skipping " + method);}  }
class C{  protected int stride(int dimension){  if (dimension != 0)   throw new IllegalArgumentException("invalid dimension: " + dimension + "used to access"+ toStringShort());  return this.stride;}  }
class C{  @OnClick(R.id.create_sip_button) public void createSIPAccount(){  mAccountType=AccountConfig.ACCOUNT_TYPE_SIP;  mAlias=mAliasView.getText().toString();  mHostname=mHostnameView.getText().toString();  mUsername=mUsernameView.getText().toString();  mPassword=mPasswordView.getText().toString();  attemptCreation();}  }
class C{  protected void checkState(){  if (appliedState.font != currentState.font) {    appliedState.font=currentState.font;    setFont(currentState.font);  }  if (appliedState.clipX != currentState.clipX || appliedState.clipY != currentState.clipY || appliedState.clipW != currentState.clipW || appliedState.clipH != currentState.clipH) {    appliedState.clipX=currentState.clipX;    appliedState.clipY=currentState.clipY;    appliedState.clipW=currentState.clipW;    appliedState.clipH=currentState.clipH;    if (rotateOrientation != 0) {      if (currentState.bgColor.equals(currentState.fgColor)) {        double p=Math.pow(currentState.clipW,2) + Math.pow(currentState.clipH,2);        int newWidth=Math.round((float)Math.sqrt(p));        currentState.clipX=currentState.clipX - (newWidth - currentState.clipW) / 2;        currentState.clipW=newWidth;      }    }    getGraphics2D().setClip(currentState.clipX - 1,currentState.clipY - 1,currentState.clipW + 2,currentState.clipH + 2);  }  if (appliedState.alpha != currentState.alpha) {    appliedState.alpha=currentState.alpha;    setAlpha(currentState.alpha);  }  appliedState.graphicHints=currentState.graphicHints;}  }
class C{  public static <T>String join(List<T> list,String separator){  StringBuilder b=new StringBuilder();  Iterator<T> iterator=list.iterator();  if (iterator.hasNext()) {    b.append(iterator.next().toString());    while (iterator.hasNext()) {      T t=iterator.next();      b.append(separator);      b.append(t.toString());    }  }  return b.toString();}  }
class C{  public LocoIOData(int unitAddr,int unitSubAddr,LnTrafficController tc){  timeoutcounter=0;  unitAddress=unitAddr;  unitSubAddress=unitSubAddr;  validmodes=new LocoIOModeList();  for (int i=0; i < _numRows; i++) {    setMode(i,"<none>");    lim[i]=null;    setAddr(i,0);    setSV(i,0);    setV1(i,0);    setV2(i,0);    readState[i]=NONE;    writeState[i]=NONE;    capture[i]=false;  }  this.tc=tc;  if (tc != null) {    tc.addLocoNetListener(~0,this);  } else {    log.error("No LocoNet interface available");  }}  }
class C{  protected final void registerProblem(@NotNull final PsiElement psiElement,@NotNull final String descriptionTemplate,final ProblemHighlightType highlightType,@Nullable final HintAction hintAction,final LocalQuickFix... fixes){  registerProblem(psiElement,descriptionTemplate,highlightType,hintAction,null,fixes);}  }
class C{  public long executeForLong(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return 0;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForLong(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  public boolean contains(Object elem){  return delegate.contains(elem);}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  @LargeTest public void testThumbnailListForH264WVGAWithCount() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";  final int tnCount=70;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=(mediaVideoItem.getWidth() / 2);  final int outHeight=(mediaVideoItem.getHeight() / 2);  final long thumbNailStartTime=mediaVideoItem.getDuration() / 2;  final long thumbNailEndTime=thumbNailStartTime + 4000;  Bitmap thumbNailBmp[]=null;  boolean flagForException=false;  try {    thumbNailBmp=mediaVideoItem.getThumbnailList(outWidth,outHeight,thumbNailStartTime,thumbNailEndTime,tnCount);  } catch (  Exception e) {    assertTrue("Unable to get Thumbnail list",flagForException);  }  if (thumbNailBmp.length <= tnCount) {    flagForException=true;  }  assertTrue("Thumbnail count more than asked",flagForException);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  if (isUser(object)) {    if (changes.has("adminlevel")) {      adminlevel=changes.getInt("adminlevel");    }    if (changes.has("name")) {      name=changes.get("name");    }    if (changes.has("sheep")) {      sheepID=changes.getInt("sheep");    }    if (changes.hasMap("features")) {      processFeaturesAdded(changes.getMap("features"));    }  }}  }
class C{  public boolean pollSeqno(long seqno){  return seqno <= diskLog.getMaxSeqno();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:06.727 -0500",hash_original_method="63D6CE2521D05DB3C4B970CFFD748CB7",hash_generated_method="BB9F1862F706485CBF83A3C202EE37AA") public void append(byte[] src){  int length=src.length;  if (BUFFER_SIZE - (end - pos) < length) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("Could not accept income app data."));  }  if (end + length > BUFFER_SIZE) {    System.arraycopy(buffer,pos,buffer,0,end - pos);    end-=pos;    pos=0;  }  System.arraycopy(src,0,buffer,end,length);  end=end + length;}  }
class C{  private Object convertValueToValueClass(Object value,Class valueClass){  if (valueClass != null && (value instanceof Number)) {    Number numberValue=(Number)value;    if (valueClass == Integer.class) {      return Integer.valueOf(numberValue.intValue());    } else     if (valueClass == Long.class) {      return Long.valueOf(numberValue.longValue());    } else     if (valueClass == Float.class) {      return Float.valueOf(numberValue.floatValue());    } else     if (valueClass == Double.class) {      return Double.valueOf(numberValue.doubleValue());    } else     if (valueClass == Byte.class) {      return Byte.valueOf(numberValue.byteValue());    } else     if (valueClass == Short.class) {      return Short.valueOf(numberValue.shortValue());    }  }  return value;}  }
class C{  private HttpConnectionManagerParams connectionParams(){  HttpConnectionManagerParams params=new HttpConnectionManagerParams();  params.setDefaultMaxConnectionsPerHost(readMaxHostConnectionSetting());  params.setMaxTotalConnections(readMaxTotalConnectionSetting());  return params;}  }
class C{  @Beta public static <K,V>ImmutableSortedMap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries){  @SuppressWarnings("unchecked") Ordering<K> naturalOrder=(Ordering<K>)NATURAL_ORDER;  return copyOf(entries,naturalOrder);}  }
class C{  public String toShortString(StringBuilder sb){  sb.setLength(0);  sb.append('[');  sb.append(left);  sb.append(',');  sb.append(top);  sb.append("][");  sb.append(right);  sb.append(',');  sb.append(bottom);  sb.append(']');  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.563 -0500",hash_original_method="B05C371FE3D3E8ED1D5DB9B0F1B6DE4B",hash_generated_method="4473028CCD135DEA7DEAAF783BCB6AF9") public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date){  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,false);}  }
class C{  public final void clearPassword(){  if (password != null) {    for (int i=0; i < password.length; i++) {      password[i]=' ';    }    password=null;  }}  }
class C{  public char next(){  if (pos < chars.length - 1) {    pos++;    return chars[pos];  } else {    pos=chars.length;    return DONE;  }}  }
class C{  private boolean isDownloadedFileOk(@NonNull File file){  try {    long length=file.length();    if (length < 1024) {      Log.e(TAG,file + " is too small to be an audio file");      return false;    } else     if (length < 5 * 1024 * 1024) {      RandomAccessFile randomAccessFile=new RandomAccessFile(file,"r");      for (long offset=0; offset < length; offset++) {        randomAccessFile.seek(offset);        char firstChar=(char)randomAccessFile.readByte();        if (!Character.isWhitespace(firstChar)) {          if (firstChar == '<') {            break;          } else {            return true;          }        }      }      for (long offset=length - 1; offset >= 0; offset--) {        randomAccessFile.seek(offset);        char lastChar=(char)randomAccessFile.readByte();        if (!Character.isWhitespace(lastChar)) {          if (lastChar == '>') {            Log.e(TAG,file + ": XML/HTML downloaded instead of audio");            return false;          } else {            return true;          }        }      }      Log.e(TAG,file + " consists of whitespaces only");      return false;    } else {      return true;    }  } catch (  IOException exception) {    Log.e(TAG,"Error while checking downloaded file",exception);    return false;  }}  }
class C{  public void createRepository(final String namespace,final Properties properties,final UUID uuid) throws Exception {  if (namespace == null)   throw new IllegalArgumentException();  if (properties == null)   throw new IllegalArgumentException();  if (uuid == null)   throw new IllegalArgumentException();  final Properties tmp=PropertyUtil.flatCopy(properties);  tmp.setProperty(OPTION_CREATE_KB_NAMESPACE,namespace);  final ConnectOptions opts=newConnectOptions(baseServiceURL + "/namespace",uuid,null);  JettyResponseListener response=null;{    final PropertiesFormat format=PropertiesFormat.XML;    final ByteArrayOutputStream baos=new ByteArrayOutputStream();    final PropertiesWriter writer=PropertiesWriterRegistry.getInstance().get(format).getWriter(baos);    writer.write(tmp);    final byte[] data=baos.toByteArray();    final ByteArrayEntity entity=new ByteArrayEntity(data);    entity.setContentType(format.getDefaultMIMEType());    opts.entity=entity;  }  try {    checkResponseCode(response=doConnect(opts));  }  finally {    if (response != null)     response.abort();  }}  }
class C{  public URIChooser(JDialog d){  super(d);  initialize();}  }
class C{  @Override public boolean removeAll(@NonNull Collection<?> collection){  boolean removed=false;  for (  Object value : collection) {    removed|=remove(value);  }  return removed;}  }
class C{  protected boolean hasRequiredMetadata(AVList params,ErrorHandlerMode throwException) throws IllegalArgumentException {  String[] keys=this.getRequiredKeysList();  if (null == params || params.getEntries().size() == 0) {    return (null == keys || keys.length == 0);  }  if (null != keys && keys.length > 0) {    for (    String key : keys) {      Object value=params.getValue(key);      if (WWUtil.isEmpty(value)) {        if (throwException == ErrorHandlerMode.ALLOW_EXCEPTIONS) {          String message=Logging.getMessage("generic.MissingRequiredParameter",key);          Logging.logger().finest(message);          throw new IllegalArgumentException(message);        } else         return false;      }    }  }  return true;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMPolylineElement(prefix,(AbstractDocument)doc);}  }
class C{  static private String cdata(final String s){  if (s == null)   throw new IllegalArgumentException();  return HTMLUtility.escapeForXHTML(s);}  }
class C{  public static void notifyToolkitThreadFree(){  getInstance().setToolkitBusy(false);}  }
class C{  static void parseCueSettingsList(String cueSettingsList,WebvttCue.Builder builder){  Matcher cueSettingMatcher=CUE_SETTING_PATTERN.matcher(cueSettingsList);  while (cueSettingMatcher.find()) {    String name=cueSettingMatcher.group(1);    String value=cueSettingMatcher.group(2);    try {      if ("line".equals(name)) {        parseLineAttribute(value,builder);      } else       if ("align".equals(name)) {        builder.setTextAlignment(parseTextAlignment(value));      } else       if ("position".equals(name)) {        parsePositionAttribute(value,builder);      } else       if ("size".equals(name)) {        builder.setWidth(WebvttParserUtil.parsePercentage(value));      } else {        Log.w(TAG,"Unknown cue setting " + name + ":"+ value);      }    } catch (    NumberFormatException e) {      Log.w(TAG,"Skipping bad cue setting: " + cueSettingMatcher.group());    }  }}  }
class C{  public GsonBuilder registerTypeAdapterFactory(TypeAdapterFactory factory){  factories.add(factory);  return this;}  }
class C{  public ConsulTopologyFraction(String url) throws MalformedURLException {  url(url);}  }
class C{  public void handle(ConfigEvent event,Context context) throws IOException {  Regions region=Regions.fromName(System.getenv(AWS_REGION_PROPERTY));  AmazonConfig configClient=new AmazonConfigClient().withRegion(region);  AmazonIdentityManagement iamClient=new AmazonIdentityManagementClient().withRegion(region);  doHandle(event,context,configClient,iamClient,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.335 -0500",hash_original_method="3B2B065B47272EA82FEECDA7C28418A1",hash_generated_method="DCAE168E828A3CB300DD535007B50601") public int end(int group){  ensureMatch();  return matchOffsets[(group * 2) + 1];}  }
class C{  @SuppressWarnings("unchecked") protected String doIt() throws Exception {  MBrowse browseFrom=new MBrowse(getCtx(),p_AD_Browse_ID,get_TrxName());  MBrowse browseTo=new MBrowse(getCtx(),p_Record_ID,get_TrxName());  String name=browseTo.getName();  String value=browseTo.getValue();  browseTo.copyValues(browseFrom,browseTo);  browseTo.setName(name);  browseTo.setValue(value);  browseTo.saveEx();  for (  MBrowseField fieldFrom : browseFrom.getFields()) {    MBrowseField fieldTo=new MBrowseField(getCtx(),0,get_TrxName());    fieldTo.copyValues(fieldFrom,fieldTo);    fieldTo.setAD_Browse_ID(browseTo.getAD_Browse_ID());    fieldTo.saveEx();  }  return "@Ok@";}  }
class C{  @Override public final void readFully(byte ba[],int off,int len) throws IOException {  dis.readFully(ba,off,len);}  }
class C{  public CharacterData createCharacterData(Characters characters){  String data=characters.getData();  if (characters.isCData()) {    return factory.createCDATA(data);  } else {    return factory.createText(data);  }}  }
class C{  public void drawRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  addStrokeShape(new RoundRectangle2D.Float(x,y,width,height,arcWidth,arcHeight));  mPrintMetrics.draw(this);}  }
class C{  @Override public boolean standaloneSet(){  return false;}  }
class C{  private boolean onIdentityserverUrlUpdate(){  if (!TextUtils.equals(mIdentityServerUrl,getIdentityServerUrl())) {    mIdentityServerUrl=getIdentityServerUrl();    mRegistrationResponse=null;    mHomeserverConnectionConfig=null;    mRegisterButton.setVisibility(View.VISIBLE);    checkFlows();    return true;  }  return false;}  }
class C{  public JFreeChart createChart(CategoryDataset dataset,String title,MUOM uom){  JFreeChart chart=ChartFactory.createBarChart3D(title,Msg.translate(Env.getCtx(),"Day"),Msg.translate(Env.getCtx(),(uom == null) ? "" : uom.getName()),dataset,PlotOrientation.VERTICAL,true,true,false);  chart.setBackgroundPaint(Color.WHITE);  chart.setAntiAlias(true);  chart.setBorderVisible(true);  CategoryPlot plot=chart.getCategoryPlot();  plot.setRangeGridlinesVisible(true);  plot.setRangeGridlinePaint(Color.GRAY);  plot.setDomainGridlinesVisible(true);  plot.setDomainGridlinePaint(Color.GRAY);  BarRenderer3D barrenderer=(BarRenderer3D)plot.getRenderer();  barrenderer.setDrawBarOutline(false);  barrenderer.setBaseItemLabelGenerator(new LabelGenerator());  barrenderer.setBaseItemLabelsVisible(true);  barrenderer.setSeriesPaint(0,new Color(10,80,150,128));  barrenderer.setSeriesPaint(1,new Color(180,60,50,128));  ItemLabelPosition itemlabelposition=new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12,TextAnchor.TOP_CENTER);  barrenderer.setPositiveItemLabelPosition(itemlabelposition);  CategoryAxis domainAxis=plot.getDomainAxis();  domainAxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0));  return chart;}  }
class C{  public String toString(){  return "CapabilityResponse ( " + "capabilities = " + this.capabilities + " )";}  }
class C{  public static TextMessage decode(String json){  JSONParser parser=new JSONParser();  try {    Object o=parser.parse(json);    if (o instanceof JSONObject) {      return new TextMessage((JSONObject)o);    } else {      return new TextMessage(o.toString());    }  } catch (  ParseException e) {    return new TextMessage(json);  }}  }
class C{  private void registerExtensions(){  for (  final IGraphPanelExtension extension : m_extensions) {    extension.visit(m_model,m_extender);  }}  }
class C{  public static void assertEquals(String message,Object expected,Object actual){  if (expected == null && actual == null) {    return;  }  if (expected != null && expected.equals(actual)) {    return;  }  failNotEquals(message,expected,actual);}  }
class C{  protected void updateSurfaceTextureDefaultBufferSize(Size defaultBufferSize){  mSurfaceTexture.setDefaultBufferSize(defaultBufferSize.width(),defaultBufferSize.height());}  }
class C{  public static MaskedWalletRequest createMaskedWalletRequest(ItemInfo itemInfo,String publicKey){  if (publicKey == null || publicKey.contains("REPLACE_ME")) {    throw new IllegalArgumentException("Invalid public key, see README for instructions.");  }  PaymentMethodTokenizationParameters parameters=PaymentMethodTokenizationParameters.newBuilder().setPaymentMethodTokenizationType(PaymentMethodTokenizationType.NETWORK_TOKEN).addParameter("publicKey",publicKey).build();  return createMaskedWalletRequest(itemInfo,parameters);}  }
class C{  protected Expression minus(int opPos) throws TransformerException {  return compileOperation(new Minus(),opPos);}  }
class C{  private Entry attribute(Node node){  return new Entry(node);}  }
class C{  public static Intersection intersector(MatchParameters params,final Collection c){  return new Intersection(new MatchFilter.MatchParametersMF(params),new MatchCollector.CollectionMatchCollector(c));}  }
class C{  private void adoptAndCheck(Node node) throws Exception {  String original=domToString(document);  Document newDocument=builder.newDocument();  boolean isAttribute=node.getNodeType() == Node.ATTRIBUTE_NODE;  Node parent=isAttribute ? ((Attr)node).getOwnerElement() : node.getParentNode();  Node nextSibling=node.getNextSibling();  assertSame(node,newDocument.adoptNode(node));  assertDetached(parent,node);  assertSame(menu,newDocument.adoptNode(menu));  newDocument.appendChild(menu);  if (isAttribute) {    ((Element)parent).setAttributeNodeNS((Attr)node);  } else   if (nextSibling != null) {    parent.insertBefore(node,nextSibling);  } else   if (parent != document) {    parent.appendChild(node);  }  assertEquals(original,domToString(newDocument));  document=newDocument;}  }
class C{  public double remove(int i1,int i2){  boundsCheck(i1,i2);  int rows=sizes.size(), columns=sizes.get(i1);  if (i1 >= rows || i2 >= columns)   throw new ArrayIndexOutOfBoundsException("LBJ: DVector2D: Can't remove index [" + i1 + ", "+ i2+ "] as it is out of bounds ("+ rows+ ", "+ columns+ ")");  double result=vector[i1][i2];  for (int j=i2 + 1; j < columns; ++j)   vector[i1][j - 1]=vector[i1][j];  sizes.set(i1,columns - 1);  return result;}  }
class C{  public void cleanup() throws SyncException {  for (  SynchronizingStorageEngine store : storeRegistry.values()) {    store.cleanupTask();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeprocessinginstructionsetnodevalue.class,args);}  }
class C{  private void validateMail(FacesContext context,UIComponent uiComponent,String value){  EmailValidator toValidate=new EmailValidator();  toValidate.validate(context,uiComponent,value);}  }
class C{  public boolean isDisableMigrations(){  return disableMigrations;}  }
class C{  public static Instances SLTransformation(Instances D,int indices[][],int p,int n){  int L=D.classIndex();  int K=indices.length;  ArrayList<String> values[]=new ArrayList[K];  HashMap<String,Integer> counts[]=new HashMap[K];  Instances D_=new Instances(D);  for (int j=0; j < L; j++) {    D_.deleteAttributeAt(0);  }  for (int j=0; j < K; j++) {    int att[]=indices[j];    counts[j]=getCounts(D,att,p);    Set<String> vals=counts[j].keySet();    values[j]=new ArrayList(vals);    D_.insertAttributeAt(new Attribute(encodeClass(att),new ArrayList(vals)),j);  }  ArrayList<Integer> deleteList=new ArrayList<Integer>();  for (int i=0; i < D.numInstances(); i++) {    Instance x=D.instance(i);    for (int j=0; j < K; j++) {      String y=encodeValue(x,indices[j]);      try {        D_.instance(i).setValue(j,y);      } catch (      Exception e) {        deleteList.add(i);        String y_close[]=getTopNSubsets(y,counts[j],n);        for (int m=0; m < y_close.length; m++) {          Instance x_copy=(Instance)D_.instance(i).copy();          x_copy.setValue(j,y_close[m]);          x_copy.setWeight(1.0 / y_close.length);          D_.add(x_copy);        }      }    }  }  Collections.sort(deleteList,Collections.reverseOrder());  for (  int i : deleteList) {    D_.delete(i);  }  D_.setClassIndex(K);  return D_;}  }
class C{  public void actionPerformed(ActionEvent e){  DefaultMutableTreeNode lastItem=getSelectedNode();  DefaultMutableTreeNode parent;  if (lastItem != null) {    parent=(DefaultMutableTreeNode)lastItem.getParent();    if (parent == null) {      parent=(DefaultMutableTreeNode)treeModel.getRoot();      lastItem=null;    }  } else {    parent=(DefaultMutableTreeNode)treeModel.getRoot();  }  if (parent == null) {    treeModel.setRoot(createNewNode("Inserted " + Integer.toString(insertCount++)));  } else {    int newIndex;    if (lastItem == null) {      newIndex=treeModel.getChildCount(parent);    } else {      newIndex=parent.getIndex(lastItem);    }    treeModel.insertNodeInto(createNewNode("Inserted " + Integer.toString(insertCount++)),parent,newIndex);  }}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  @Override public void put(String name,byte value){  emulatedFields.put(name,value);}  }
class C{  @Override public IChatMessage sendMessage2(Geoloc geoloc) throws RemoteException {  if (geoloc == null) {    throw new ServerApiIllegalArgumentException("geoloc must not be null!");  }  String label=geoloc.getLabel();  if (label != null) {    int labelLength=label.length();    int labelMaxLength=mRcsSettings.getMaxGeolocLabelLength();    if (labelLength > labelMaxLength) {      throw new ServerApiIllegalArgumentException("geoloc message label length: " + labelLength + " exeeds max length: "+ labelMaxLength+ "!");    }  }  if (sLogger.isActivated()) {    sLogger.debug("Send geolocation message.");  }  try {    long timestamp=System.currentTimeMillis();    final ChatMessage geolocMsg=ChatUtils.createGeolocMessage(mContact,geoloc,timestamp,timestamp);    ChatMessagePersistedStorageAccessor persistentStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,geolocMsg.getMessageId(),geolocMsg.getRemoteContact(),geolocMsg.getContent(),geolocMsg.getMimeType(),mContact.toString(),Direction.OUTGOING);    addOutgoingChatMessage(geolocMsg,Status.QUEUED);    mImService.tryToDequeueOneToOneChatMessages(mContact);    return new ChatMessageImpl(persistentStorage);  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private void heapifyUp(int twopos,double cur,Object val){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    double par=twoheap[parent];    if (cur >= par) {      break;    }    twoheap[twopos]=par;    twovals[twopos]=twovals[parent];    twopos=parent;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  void fireActiveDescendantPropertyChange(TreePath oldPath,TreePath newPath){  if (oldPath != newPath) {    Accessible oldLSA=(oldPath != null) ? new AccessibleJTreeNode(JTree.this,oldPath,null) : null;    Accessible newLSA=(newPath != null) ? new AccessibleJTreeNode(JTree.this,newPath,null) : null;    firePropertyChange(AccessibleContext.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY,oldLSA,newLSA);  }}  }
class C{  public X931Signer(AsymmetricBlockCipher cipher,Digest digest,boolean implicit){  this.cipher=cipher;  this.digest=digest;  if (implicit) {    trailer=TRAILER_IMPLICIT;  } else {    Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName());    if (trailerObj != null) {      trailer=trailerObj.intValue();    } else {      throw new IllegalArgumentException("no valid trailer for digest");    }  }}  }
class C{  public JCMethodInvocation App(JCExpression meth,List<JCExpression> args){  return Apply(null,meth,args).setType(meth.type.getReturnType());}  }
class C{  public DocumentMapperForType documentMapperWithAutoCreate(String type){  DocumentMapper mapper=mappers.get(type);  if (mapper != null) {    return new DocumentMapperForType(mapper,null);  }  if (!dynamic) {    throw new TypeMissingException(index,type,"trying to auto create mapping, but dynamic mapping is disabled");  }  mapper=parse(type,null,true);  return new DocumentMapperForType(mapper,mapper.mapping());}  }
class C{  static String findAttributeInRules(String subpath,boolean isFolder,String key,List<AttributesRule> rules){  String value=null;  for (  AttributesRule rule : rules) {    if (rule.isMatch(subpath,isFolder)) {      for (      Attribute attribute : rule.getAttributes()) {        if (attribute.getKey().equals(key)) {          value=attribute.getValue();        }      }    }  }  return value;}  }
class C{  @DSComment("normal android callback") @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:35.081 -0500",hash_original_method="BF490B4BB4BD29ACC689E0297B614061",hash_generated_method="CB4D791D7A70B359EC627916815866E7") @DSVerified public void onListItemClick(ListView l,View v,int position,long id){}  }
class C{  private static CertPath verifyCertificate(X509Certificate cert,CertStore store,KeyStore trustedStore) throws InvalidAlgorithmParameterException, KeyStoreException, MessagingException, CertPathBuilderException {  if (cert == null || store == null || trustedStore == null)   throw new IllegalArgumentException("cert == " + cert + ", store == "+ store+ ", trustedStore == "+ trustedStore);  CertPathBuilder pathBuilder;  try {    pathBuilder=CertPathBuilder.getInstance("PKIX","BC");  } catch (  Exception e) {    throw new MessagingException("Error during the creation of the certpathbuilder.",e);  }  X509CertSelector xcs=new X509CertSelector();  xcs.setCertificate(cert);  PKIXBuilderParameters params=new PKIXBuilderParameters(trustedStore,xcs);  params.addCertStore(store);  params.setRevocationEnabled(false);  try {    CertPathBuilderResult result=pathBuilder.build(params);    return result.getCertPath();  } catch (  CertPathBuilderException e) {    return null;  }catch (  InvalidAlgorithmParameterException e) {    throw new MessagingException("Error during the certification path search.",e);  }}  }
class C{  public static int computeEnumSizeNoTag(final int value){  return computeRawVarint32Size(value);}  }
class C{  private TableCellRenderer installRendererIfPossible(Class objectClass,TableCellRenderer renderer){  TableCellRenderer currentRenderer=table.getDefaultRenderer(objectClass);  if (currentRenderer instanceof UIResource) {    table.setDefaultRenderer(objectClass,renderer);  }  return currentRenderer;}  }
class C{  private void drawBackground(final Graphics g){  g.setColor(m_bgColorOffset);  g.fillRect(-m_firstColumn * m_charWidth,0,m_offsetViewWidth,getHeight());}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public void clickButtonByPath(int[] path){  TestUtils.clickButtonByPath(path);}  }
class C{  public void reset(String username,String password,boolean encrypted,boolean logoutUser){  PasswordResetParam param=new PasswordResetParam();  param.setUsername(username);  if (encrypted) {    param.setEncPassword(password);  } else {    param.setPassword(password);  }  client.putURI(String.class,param,client.uriBuilder(UPDATE_PASSWORD_URL).queryParam("logout_user",logoutUser).build());}  }
class C{  public void dupX2(){  mv.visitInsn(Opcodes.DUP_X2);}  }
class C{  protected void trimForLimit(){  if (limit >= 0) {    int size=edits.size();    if (size > limit) {      int halfLimit=limit / 2;      int keepFrom=indexOfNextAdd - 1 - halfLimit;      int keepTo=indexOfNextAdd - 1 + halfLimit;      if (keepTo - keepFrom + 1 > limit) {        keepFrom++;      }      if (keepFrom < 0) {        keepTo-=keepFrom;        keepFrom=0;      }      if (keepTo >= size) {        int delta=size - keepTo - 1;        keepTo+=delta;        keepFrom+=delta;      }      trimEdits(keepTo + 1,size - 1);      trimEdits(0,keepFrom - 1);    }  }}  }
class C{  private DebuggerErrorCodes(){}  }
class C{  @Override public void test() throws ParameterException {  if (first.isDefined() && second.isDefined()) {    if (first.getValue().doubleValue() >= second.getValue().doubleValue()) {      throw new WrongParameterValueException("Global Parameter Constraint Error: \n" + "The value of parameter \"" + first.getName() + "\" has to be less than the"+ "value of parameter \""+ second.getName()+ "\""+ "(Current values: "+ first.getName()+ ": "+ first.getValue().doubleValue()+ ", "+ second.getName()+ ": "+ second.getValue().doubleValue()+ ")\n");    }  }}  }
class C{  protected void initConsole(){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(getCapDev(stack).isFunctioning());}  }
class C{  public CylinderEdgePortrayal3D(Image image,Color labelColor){  this(appearanceForImage(image,true),labelColor,null,DEFAULT_RADIUS);}  }
class C{  public MethodCall(Method method){  if (method == null) {    throw new IllegalArgumentException("method should not be null.");  }  this.method=method;  this.method.setAccessible(true);  this.isStatic=Modifier.isStatic(method.getModifiers() & Modifier.methodModifiers());}  }
class C{  public SVGOMCursorElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode21.class,args);}  }
class C{  private void writeKanjiResourceFile(File file) throws IOException {  FileOutputStream output=null;  KanjiEscapeOutputStream kanji=null;  OutputStreamWriter writer=null;  BufferedWriter w=null;  try {    output=new FileOutputStream(file);    kanji=new KanjiEscapeOutputStream(output);    writer=new OutputStreamWriter(kanji);    w=new BufferedWriter(writer);    w.write(_sb.toString());  }  finally {    Util.close(w);    Util.close(writer);    Util.close(kanji);    Util.close(output);  }}  }
class C{  public String globalInfo(){  return "The class that builds a BallTree middle out.\n\n" + "For more information see also:\n\n" + getTechnicalInformation().toString();}  }
class C{  protected void parseSoundStreamHead(boolean adpcmOnly,InStream in) throws IOException {  int playbackFreq=(int)in.readUBits(2);  boolean playback16bits=(in.readUBits(1) != 0);  boolean playbackStereo=(in.readUBits(1) != 0);  int format=(int)in.readUBits(4);  int streamFreq=(int)in.readUBits(2);  boolean stream16bits=(in.readUBits(1) != 0);  boolean streamStereo=(in.readUBits(1) != 0);  int avgSampleCount=(int)in.readUI16();  if (adpcmOnly) {    tagtypes.tagSoundStreamHead(playbackFreq,playback16bits,playbackStereo,format,streamFreq,stream16bits,streamStereo,avgSampleCount);  } else {    tagtypes.tagSoundStreamHead2(playbackFreq,playback16bits,playbackStereo,format,streamFreq,stream16bits,streamStereo,avgSampleCount);  }}  }
class C{  public static <S extends HasNoClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    NoClickEvent event=new NoClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private void updatePageComplete(){  if (fromVersion != null && toVersion != null) {    setPageComplete(true);    return;  }  setPageComplete(false);}  }
class C{  public void endEmptyTag(String tag) throws IOException {  if (state != IN_TAG)   throw new IllegalStateException();  out.write(">");  state=IN_BODY;  out.newLine();}  }
class C{  private String normalizeTypeValue(String type){  if (INSERT.equals(type))   return INSERT;  if (REMOVE.equals(type))   return REMOVE;  return null;}  }
class C{  public NodeWalker(Node rootNode){  nodes=new Stack<Node>();  nodes.add(rootNode);}  }
class C{  @Override public String toString(){  return "{JVMMetrics : gcCount = " + gcCount + " gcTimeMillis = "+ gcTimeMillis+ " initMemory = "+ initMemory+ " committedMemory = "+ committedMemory+ " usedMemory = "+ usedMemory+ " maxMemory = "+ maxMemory+ " totalThreads = "+ totalThreads+ "}";}  }
class C{  public boolean isControllerNode(){  return (controllerNodeIPLookupMap.get(getNodeId()) != null);}  }
class C{  private void loadSettings(SQLiteDatabase db){  loadSystemSettings(db);  loadSecureSettings(db);  if (mUserHandle == UserHandle.USER_OWNER) {    loadGlobalSettings(db);  }}  }
class C{  public static IStatus checkInSync(IResource[] resources){  IStatus result=null;  for (int i=0; i < resources.length; i++) {    IResource resource=resources[i];    if (!resource.isSynchronized(IResource.DEPTH_INFINITE)) {      result=addOutOfSync(result,resource);    }  }  if (result != null)   return result;  return Status.OK_STATUS;}  }
class C{  public void init(KeyGenerationParameters param){  this.random=param.getRandom();  this.strength=(param.getStrength() + 7) / 8;}  }
class C{  public void open() throws IOException {  try {    mem=new MemoryMappedFile(fileName,fileSize);  } catch (  Exception e) {    throw new IOException("Unable to open the file: " + fileName,e);  }  initialLimit=mem.getLongVolatile(Structure.Limit);}  }
class C{  public Revision remove(){  ChronoStorageBlock block=first;  this.revisionIndex=block.getRevisionIndex();  ChronoStorageBlock next=block.getIndexNext();  this.first=next;  if (next != null) {    this.first.setIndexPrev(null);  } else {    this.last=null;  }  block.setDelivered(true);  ChronoFullRevision cfr=block.getChronoFullRevision();  cfr.remove(block.getRevisionCounter());  if (storage.remove(block.getRevisionIndex()) == null) {    throw new RuntimeException("VALUE WAS NOT REMOVED FROM STORAGE");  }  Revision rev=block.getRev();  size-=rev.getRevisionText().length();  return rev;}  }
class C{  private static String geoToGml(LineString line){  StringBuilder coordString=new StringBuilder();  for (  Coordinate coor : line.getCoordinates()) {    coordString.append(" ").append(coor.x).append(" ").append(coor.y);  }  return " <gml:LineString srsName=\"http://www.opengis.net/def/crs/EPSG/0/4326\" xmlns:gml='http://www.opengis.net/gml'>\n" + "<gml:posList srsDimension=\"2\">" + coordString + "</gml:posList></gml:LineString >";}  }
class C{  public static IJavaSearchScope createReferencedScope(IJavaElement[] javaElements){  Set<IJavaProject> projects=new HashSet<IJavaProject>();  for (int i=0; i < javaElements.length; i++) {    projects.add(javaElements[i].getJavaProject());  }  IJavaProject[] prj=projects.toArray(new IJavaProject[projects.size()]);  return SearchEngine.createJavaSearchScope(prj,true);}  }
class C{  public static void broadcastStatus(Context ctx,int oldState,int newState,String currentAction){  Intent intent=new Intent(MainService.ACTION_XMPP_CONNECTION_CHANGED);  intent.putExtra("old_state",oldState);  intent.putExtra("new_state",newState);  intent.putExtra("current_action",currentAction);  if (newState == CONNECTED && sXmppManager != null && sXmppManager.mConnection != null) {    intent.putExtra("TLS",sXmppManager.mConnection.isSecureConnection());    intent.putExtra("Compression",sXmppManager.mConnection.isUsingCompression());  }  ctx.sendBroadcast(intent);}  }
class C{  public boolean boolWithSideEffects() throws javax.xml.transform.TransformerException {  return bool();}  }
class C{  public String join(String separator){  int len=this.size();  StringBuffer sb=new StringBuffer();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public FileConverter(final String optionName){  super(optionName);}  }
class C{  public Map<String,Object> processMetadata(CWLJob job,Object value,CWLOutputPort outputPort,Object outputBinding){  if (outputPort.getOutputBinding() != null) {    outputBinding=outputPort.getOutputBinding();  }  Map<String,Object> metadata=CWLFileValueHelper.getMetadata(value);  String inputId=CWLBindingHelper.getInheritMetadataFrom(outputBinding);  if (StringUtils.isEmpty(inputId)) {    logger.info("Metadata for {} is {}.",outputPort.getId(),metadata);    return metadata;  }  Object input=null;  String normalizedInputId=CWLSchemaHelper.normalizeId(inputId);  for (  Entry<String,Object> inputEntry : job.getInputs().entrySet()) {    if (inputEntry.getKey().equals(normalizedInputId)) {      input=inputEntry.getValue();      break;    }  }  List<Map<String,Object>> metadataList=findAllMetadata(input);  Map<String,Object> inheritedMetadata=intersect(metadataList);  if (inheritedMetadata == null) {    return metadata;  }  if (metadata != null) {    inheritedMetadata.putAll(metadata);  }  logger.info("Metadata for {} is {}.",outputPort.getId(),inheritedMetadata);  return inheritedMetadata;}  }
class C{  public void executeInParallel(Params... params){  this.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,params);}  }
class C{  public static PivotTracingClient newInstance(){  return new PivotTracingClient();}  }
class C{  public boolean isFolder(final String path){  try {    final entryInfo info=fileInfo(path);    if (info != null) {      return info.type == filetype.directory;    }    final String currentFolder=pwd();    send("CWD " + path);    final String reply=receive();    if (isNotPositiveCompletion(reply)) {      throw new IOException(reply);    }    final String changedPath=pwd();    if (!(changedPath.equals(path) || changedPath.equals(currentFolder + (currentFolder.endsWith("/") ? "" : "/") + path))) {      throw new IOException("folder is '" + changedPath + "' should be '"+ path+ "'");    }    send("CWD " + currentFolder);    receive();    return true;  } catch (  final IOException e) {    return false;  }}  }
class C{  public void addGenClass(SootClass clz){  genClasses.add(clz.getName());}  }
class C{  public SpannableStringBuilder(CharSequence text,int start,int end){  int srclen=end - start;  if (srclen < 0)   throw new StringIndexOutOfBoundsException();  int len=ArrayUtils.idealCharArraySize(srclen + 1);  mText=new char[len];  mGapStart=srclen;  mGapLength=len - srclen;  TextUtils.getChars(text,start,end,mText,0);  mSpanCount=0;  int alloc=ArrayUtils.idealIntArraySize(0);  mSpans=new Object[alloc];  mSpanStarts=new int[alloc];  mSpanEnds=new int[alloc];  mSpanFlags=new int[alloc];  if (text instanceof Spanned) {    Spanned sp=(Spanned)text;    Object[] spans=sp.getSpans(start,end,Object.class);    for (int i=0; i < spans.length; i++) {      if (spans[i] instanceof NoCopySpan) {        continue;      }      int st=sp.getSpanStart(spans[i]) - start;      int en=sp.getSpanEnd(spans[i]) - start;      int fl=sp.getSpanFlags(spans[i]);      if (st < 0)       st=0;      if (st > end - start)       st=end - start;      if (en < 0)       en=0;      if (en > end - start)       en=end - start;      setSpan(false,spans[i],st,en,fl);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  int progress=0;  int i, a;  long counter=0;  int loopNum=0;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{0,1,4,5,6,7},{0,1,2,5,6,7},{0,1,2,3,6,7},{0,1,2,3,4,7},{0,1,2,3,4,5},{1,2,3,4,5,6},{2,3,4,5,6,7},{0,3,4,5,6,7}};  double[] neighbours=new double[8];  boolean patternMatch=false;  int numIterations=10;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  numIterations=Integer.parseInt(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("black_white.pal");    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] > 0) {          output.setValue(row,col,1);        } else         if (data[col] == noData) {          output.setValue(row,col,noData);        } else {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.flush();    for (int k=0; k < numIterations; k++) {      loopNum++;      updateProgress("Loop Number " + loopNum + ":",0);      counter=0;      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          z=output.getValue(row,col);          if (z == 1 && z != noData) {            for (i=0; i < 8; i++) {              neighbours[i]=output.getValue(row + dY[i],col + dX[i]);            }            for (a=0; a < 8; a++) {              patternMatch=true;              for (i=0; i < elements[a].length; i++) {                if (neighbours[elements[a][i]] != 0) {                  patternMatch=false;                }              }              if (patternMatch) {                output.setValue(row,col,0);                counter++;              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      if (counter == 0) {        break;      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static List<JBBPAbstractField> fieldsAsList(final JBBPAbstractField... fields){  final List<JBBPAbstractField> result=new ArrayList<JBBPAbstractField>();  for (  final JBBPAbstractField f : fields) {    result.add(f);  }  return result;}  }
class C{  @Override public void run(){  isRunning=true;  try {    log.debug("Start of HealthCheckTimerTask");    log.debug("Checking if wallets are dirty . . .");    List<WalletData> perWalletModelDataList=bitcoinController.getModel().getPerWalletModelDataList();    if (perWalletModelDataList != null) {      Iterator<WalletData> iterator=perWalletModelDataList.iterator();      while (iterator.hasNext()) {        WalletData loopModelData=iterator.next();        if (bitcoinController.getFileHandler() != null) {          boolean haveFilesChanged=bitcoinController.getFileHandler().haveFilesChanged(loopModelData);          if (haveFilesChanged) {            boolean previousFilesHaveBeenChanged=loopModelData.isFilesHaveBeenChangedByAnotherProcess();            loopModelData.setFilesHaveBeenChangedByAnotherProcess(true);            if (!previousFilesHaveBeenChanged) {              bitcoinController.fireFilesHaveBeenChangedByAnotherProcess(loopModelData);              log.debug("Marking wallet " + loopModelData.getWalletFilename() + " as having been changed by another process.");            }          }          if (loopModelData.isDirty()) {            log.debug("Saving dirty wallet '" + loopModelData.getWalletFilename() + "'...");            try {              bitcoinController.getFileHandler().savePerWalletModelData(loopModelData,false);              log.debug("... done.");            } catch (            WalletSaveException e) {              String message=controller.getLocaliser().getString("createNewWalletAction.walletCouldNotBeCreated",new Object[]{loopModelData.getWalletFilename(),e.getMessage()});              log.error(message);              MessageManager.INSTANCE.addMessage(new Message(message));            }catch (            WalletVersionException e) {              String message=controller.getLocaliser().getString("createNewWalletAction.walletCouldNotBeCreated",new Object[]{loopModelData.getWalletFilename(),e.getMessage()});              log.error(message);              MessageManager.INSTANCE.addMessage(new Message(message));            }          }        }      }    }    log.debug("End of HealthCheckTimerTask");  } catch (  java.util.ConcurrentModificationException cme) {    log.error("The list of open wallets was changed whilst files were being written.");  } finally {    isRunning=false;  }}  }
class C{  public ProgressBar(String code){  handler=new CustomHandler(code);  init();}  }
class C{  public static void assertValue(){  try {    Region r1=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME1);    Region r2=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME2);    assertTrue(r1.containsKey("key-1"));    assertTrue(r1.get("key-1").equals("55"));    assertTrue(r2.containsKey("key-1"));    assertTrue(r2.get("key-1").equals("55"));  } catch (  Exception e) {    fail("Exception in trying to get due to " + e);  }}  }
class C{  public PendingState(DownloadInfoRunnable downloadInfoRunnable){  super(downloadInfoRunnable);}  }
class C{  void postRemove(HashMapEntry<K,V> e){}  }
class C{  public static ConstantNode forDouble(double d){  return createPrimitive(JavaConstant.forDouble(d));}  }
class C{  public JSONObject makeVerificationSmsReceivedProps(final int smsReceiveInterval){  JSONObject props;  try {    props=new JSONObject();    props.put("Delay",smsReceiveInterval);  } catch (  JSONException e) {    Logger.e(TAG,"Error building Mixpanel Props",e);    props=null;  }  return props;}  }
class C{  public String rtf(){  if (resource == null) {    return NOT_FOUND;  }  if (version == null) {    BigDecimal latestVersion=resource.getLastPublishedVersionsVersion();    if (latestVersion == null) {      return NOT_FOUND;    } else {      version=latestVersion;    }  }  data=dataDir.resourceRtfFile(resource.getShortname(),version);  mimeType="application/rtf";  StringBuilder sb=new StringBuilder();  sb.append("rtf-" + resource.getShortname());  if (version != null) {    sb.append("-v" + version.toPlainString());  }  sb.append(".rtf");  filename=sb.toString();  return execute();}  }
class C{  boolean shouldKill(int x,int y){  int xMax=_x + _width;  int yMax=_y + _height;  if (!((x >= _x) && (x <= xMax)))   return false;  if (!((y >= _y) && (y <= yMax)))   return false;  return true;}  }
class C{  public String replace(final char[] source,final int offset,final int length){  if (source == null) {    return null;  }  final StrBuilder buf=new StrBuilder(length).append(source,offset,length);  substitute(buf,0,length);  return buf.toString();}  }
class C{  @Override protected void doAction(){  File exportFile=null;  try {    String alias=kseFrame.getSelectedEntryAlias();    DExportPublicKeyOpenSsl dExportPublicKey=new DExportPublicKeyOpenSsl(frame,alias);    dExportPublicKey.setLocationRelativeTo(frame);    dExportPublicKey.setVisible(true);    if (!dExportPublicKey.exportSelected()) {      return;    }    exportFile=dExportPublicKey.getExportFile();    boolean pemEncode=dExportPublicKey.pemEncode();    PublicKey publicKey=getPublicKey(alias);    byte[] encoded=null;    if (pemEncode) {      encoded=OpenSslPubUtil.getPem(publicKey).getBytes();    } else {      encoded=OpenSslPubUtil.get(publicKey);    }    exportEncodedPublicKey(encoded,exportFile);    JOptionPane.showMessageDialog(frame,res.getString("ExportTrustedCertificatePublicKeyAction.ExportPublicKeyOpenSslSuccessful.message"),res.getString("ExportTrustedCertificatePublicKeyAction.ExportPublicKeyOpenSsl.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  FileNotFoundException ex) {    String message=MessageFormat.format(res.getString("ExportTrustedCertificatePublicKeyAction.NoWriteFile.message"),exportFile);    JOptionPane.showMessageDialog(frame,message,res.getString("ExportTrustedCertificatePublicKeyAction.ExportPublicKeyOpenSsl.Title"),JOptionPane.WARNING_MESSAGE);  }catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  @Benchmark public long test6_UsingForAndIterator() throws IOException {  long i=0;  for (Iterator<Map.Entry<Integer,Integer>> entries=map.entrySet().iterator(); entries.hasNext(); ) {    Map.Entry<Integer,Integer> entry=entries.next();    i+=entry.getKey() + entry.getValue();  }  return i;}  }
class C{  private XPathFactory loadFromServicesFile(String uri,String resourceName,InputStream in){  if (debug)   debugPrintln("Reading " + resourceName);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(in,"UTF-8"),DEFAULT_LINE_LENGTH);  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(in),DEFAULT_LINE_LENGTH);  }  String factoryClassName;  XPathFactory resultFactory=null;  while (true) {    try {      factoryClassName=rd.readLine();    } catch (    IOException x) {      break;    }    if (factoryClassName != null) {      int hashIndex=factoryClassName.indexOf('#');      if (hashIndex != -1) {        factoryClassName=factoryClassName.substring(0,hashIndex);      }      factoryClassName=factoryClassName.trim();      if (factoryClassName.length() == 0) {        continue;      }      try {        XPathFactory foundFactory=createInstance(factoryClassName);        if (foundFactory.isObjectModelSupported(uri)) {          resultFactory=foundFactory;          break;        }      } catch (      Exception ignored) {      }    } else {      break;    }  }  IoUtils.closeQuietly(rd);  return resultFactory;}  }
class C{  private boolean keysUnchanged(List<ColumnSpec> keySpecs,ArrayList<ArrayList<ColumnVal>> keyValues,List<ColumnSpec> colSpecs,ArrayList<ArrayList<ColumnVal>> colValues){  for (int k=0; k < keySpecs.size(); k++) {    ColumnSpec keySpec=keySpecs.get(k);    int keyIndex=keySpec.getIndex() - 1;    ColumnSpec colSpec=null;    if (keyIndex < colSpecs.size()) {      colSpec=colSpecs.get(keyIndex);    } else {      return false;    }    for (int row=0; row < colValues.size() || row < keyValues.size(); row++) {      ColumnVal keyValueHolder=keyValues.get(row).get(k);      Object keyValue=keyValueHolder.getValue();      ColumnVal colValueHolder=colValues.get(row).get(keyIndex);      Object colValue=colValueHolder.getValue();      if (!(keySpec.getType() == colSpec.getType() && keySpec.getIndex() == colSpec.getIndex() && ((keyValue == null && colValue == null) || (keyValue != null && keyValue.equals(colValue))))) {        return false;      } else {        logger.debug("Col " + colSpec.getIndex() + " @ Row "+ row+ " is static: "+ keyValue.toString()+ " = "+ colValue.toString());      }    }  }  return true;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  if (mHost != null) {    dest.writeByte((byte)1);    dest.writeString(mHost);    dest.writeInt(mPort);  } else {    dest.writeByte((byte)0);  }  dest.writeString(mExclusionList);  dest.writeStringArray(mParsedExclusionList);}  }
class C{  public boolean isCompleted(){  return isCompleted;}  }
class C{  public CalculatorAction(DataEditor editor){  this(editor.getDataWrapper());  this.dataEditor=editor;}  }
class C{  public BulkWriteResult writeMapBulk(final String indexName,final List<BulkEntry> jsonMapList){  long start=System.currentTimeMillis();  BulkRequestBuilder bulkRequest=elasticsearchClient.prepareBulk();  for (  BulkEntry be : jsonMapList) {    if (be.id == null)     continue;    bulkRequest.add(elasticsearchClient.prepareIndex(indexName,be.type,be.id).setSource(be.jsonMap).setVersion(be.version == null ? 1 : be.version.longValue()).setVersionType(be.version == null ? VersionType.FORCE : VersionType.EXTERNAL));  }  BulkResponse bulkResponse=bulkRequest.get();  BulkWriteResult result=new BulkWriteResult();  for (  BulkItemResponse r : bulkResponse.getItems()) {    String id=r.getId();    ActionWriteResponse response=r.getResponse();    if (response instanceof IndexResponse) {      if (((IndexResponse)response).isCreated())       result.created.add(id);    }    String err=r.getFailureMessage();    if (err != null) {      result.errors.put(id,err);    }  }  long duration=Math.max(1,System.currentTimeMillis() - start);  long regulator=0;  long ops=result.created.size() * 1000 / duration;  if (duration > throttling_time_threshold && ops < throttling_ops_threshold) {    regulator=(long)(throttling_factor * duration);    try {      Thread.sleep(regulator);    } catch (    InterruptedException e) {    }  }  Log.getLog().info("elastic write bulk to index " + indexName + ": "+ jsonMapList.size()+ " entries, "+ result.created.size()+ " created, "+ result.errors.size()+ " errors, "+ duration+ " ms"+ (regulator == 0 ? "" : ", throttled with " + regulator + " ms")+ ", "+ ops+ " objects/second");  return result;}  }
class C{  @Override public IndexInput openInput(String name,IOContext context) throws IOException {  ensureOpen();  ensureCanRead(name);  final File path=directory.resolve(name).toFile();  RandomAccessFile raf=new RandomAccessFile(path,"r");  return new RAFIndexInput("SimpleFSIndexInput(path=\"" + path.getPath() + "\")",raf,context);}  }
class C{  @Override public Collection<V> values(){  if (values == null) {    values=new ReferenceValues<V>(this);  }  return values;}  }
class C{  public void startFunction(String name,String[] paramNames) throws IOException {  if (blockStack == null) {    blockStack=new Stack();  }  writeCode(DEFINE_FUNCTION);  ByteArrayOutputStream baout=new ByteArrayOutputStream();  OutStream bout=new OutStream(baout);  bout.writeString(name);  bout.writeUI16(paramNames.length);  for (int i=0; i < paramNames.length; i++) {    bout.writeString(paramNames[i]);  }  bout.writeUI16(0);  bout.flush();  byte[] data=baout.toByteArray();  out.writeUI16(data.length);  out.write(data);  blockStack.push(new int[]{(int)out.getBytesWritten(),0});}  }
class C{  public INNER_JOIN INNER_JOIN(String tableToJoin){  return new INNER_JOIN(this,tableToJoin);}  }
class C{  public TopologyValidationError(int errorType,Coordinate pt){  this.errorType=errorType;  if (pt != null)   this.pt=(Coordinate)pt.clone();}  }
class C{  public UpdateSettingsRequest(String... indices){  this.indices=indices;}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public void append(ResultEntry entry) throws IOException {  numberOfEntries++;  List<Solution> feasibleSolutions=new ArrayList<Solution>();  for (  Solution solution : entry.getPopulation()) {    if (!solution.violatesConstraints()) {      feasibleSolutions.add(solution);    }  }  Properties properties=entry.getProperties();  if (feasibleSolutions.isEmpty() && ((properties == null) || (properties.isEmpty()))) {    writer.println("//");  }  if ((properties != null) && !properties.isEmpty()) {    printProperties(properties);  }  if (!feasibleSolutions.isEmpty()) {    for (    Solution solution : feasibleSolutions) {      printSolution(solution);    }  }  writer.println('#');}  }
class C{  public void startFixedUpload(final String hostname,final int port,final String uri,final int fileSizeOctet,final int maxDuration,final int reportInterval){  initReportTask(reportInterval,false);  mTask.setReportInterval(true);  startFixedUpload(hostname,port,uri,fileSizeOctet,maxDuration);}  }
class C{  @Override public void close() throws IOException {  try {    if (mCurrentSeq != null) {      mCurrentSeq.lastSequence();    }  }  finally {    try {      closeCurrentSequenceFilePair();    }  finally {      closeSeqIndex();      try {      }  finally {        if (mHasNames) {          try {            closeCurrentLabel();          }  finally {            try {              closeLabelIndex();            }  finally {              try {                closeCurrentLabelSuffix();              }  finally {                closeLabelSuffixIndex();              }            }          }        }      }    }  }  final boolean hasSuffixes=mMaxSuffixLength != 0;  mIndexFile=super.finish(mSizeLimit,mNumberOfSequences);  mIndexFile.setHasSuffixes(hasSuffixes);  mIndexFile.save(mOutputDir);  if (!hasSuffixes) {    removeSuffixFiles();  }  Diagnostic.userLog("Writing SDF-Id: " + mSdfId);}  }
class C{  public String read(String filename) throws IOException {  return ProcFile.readFile(String.format("/proc/%d/%s",pid,filename));}  }
class C{  private FindDialog(@Nullable Frame parent,boolean modal){  super(parent,modal);  labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.teddy.Labels");  initComponents();  buttonPanel.setBorder(new EmptyBorder(0,-5,0,-5));  setAlwaysOnTop(true);  prefs=PreferencesUtil.userNodeForPackage(getClass());  PreferencesUtil.installFramePrefsHandler(prefs,"find",this);  modeCombo.setModel(new DefaultComboBoxModel(new Object[]{labels.getString("find.contains.text"),labels.getString("find.startsWith.text"),labels.getString("find.word.text")}));  ignoreCaseCheck.setSelected(prefs.getBoolean("find.ignoreCase",true));  wrapAroundCheck.setSelected(prefs.getBoolean("find.wrapAround",true));  modeCombo.setSelectedIndex(Math.min(0,Math.max(modeCombo.getModel().getSize() - 1,prefs.getInt("find.mode",0))));  getRootPane().setDefaultButton(nextButton);  InputMap im=new InputMap();  LookAndFeel.loadKeyBindings(im,new String[]{"shift ENTER",DefaultEditorKit.insertBreakAction,"alt ENTER",DefaultEditorKit.insertBreakAction,"ENTER",JTextField.notifyAction});  im.setParent(findField.getInputMap(JComponent.WHEN_FOCUSED));  findField.setInputMap(JComponent.WHEN_FOCUSED,im);  im=new InputMap();  LookAndFeel.loadKeyBindings(im,new String[]{"shift ENTER",DefaultEditorKit.insertBreakAction,"alt ENTER",DefaultEditorKit.insertBreakAction,"ENTER",JTextField.notifyAction});  im.setParent(replaceField.getInputMap(JComponent.WHEN_FOCUSED));  replaceField.setInputMap(JComponent.WHEN_FOCUSED,im);  pack();}  }
class C{  private void grahamScan(){  if (points.size() < 3) {    return;  }  Iterator<double[]> iter=points.iterator();  Stack<double[]> stack=new Stack<>();  final double[] first=iter.next();  stack.add(first);  while (iter.hasNext()) {    double[] n=iter.next();    if (mdist(first,n) > 0) {      stack.add(n);      break;    }  }  while (iter.hasNext()) {    double[] next=iter.next();    double[] curr=stack.pop();    double[] prev=stack.peek();    while ((stack.size() > 1) && (mdist(curr,next) == 0 || !isConvex(prev,curr,next))) {      curr=stack.pop();      prev=stack.peek();    }    stack.add(curr);    stack.add(next);  }  points=stack;}  }
class C{  public ByteBuffer finishWritingAndReturnUnusedBuffer(){  finishWriting();  ByteBuffer result=this.buffer.duplicate();  if (result.remaining() == 0) {    result.limit(result.capacity());    return result;  }  int newPos=result.limit();  if ((result.capacity() - newPos) > 0) {    result.limit(result.capacity());    result.position(newPos);    return result.slice();  } else {    return null;  }}  }
class C{  public static GdbInfoLocals parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Map<String,String> variables=new HashMap<>();  for (  String line : output.split("\n")) {    Matcher matcher=GDB_VARS.matcher(line);    if (matcher.find()) {      String variable=matcher.group(1);      String value=matcher.group(2);      variables.put(variable,value);    }  }  return new GdbInfoLocals(variables);}  }
class C{  public static <A,B>Pair<A,B> of(A first,B second){  return new Pair<A,B>(first,second);}  }
class C{  public int lengthOfYear(){  return lengthOfYear(get(YEAR));}  }
class C{  public static Usericon createTwitchLikeIcon(Usericon.Type type,String channel,String urlString,int source,String title){  return createIconFromUrl(type,channel,urlString,source,getColorFromType(type),title);}  }
class C{  private SelectResults singleBaseCollectionFilterEvaluate(ExecutionContext context,SelectResults intermediateResults,final boolean completeExpansionNeeded,@Retained CompiledValue iterOperands,IndexInfo indexInfo,RuntimeIterator[] indpndntItr,boolean isIntersection,boolean conditioningNeeded,boolean evaluateProj) throws TypeMismatchException, AmbiguousNameException, FunctionDomainException, NameResolutionException, QueryInvocationTargetException {  ObjectType resultType=indexInfo._index.getResultSetType();  int indexFieldsSize=-1;  SelectResults set=null;  boolean createEmptySet=false;  Object key=indexInfo.evaluateIndexKey(context);  createEmptySet=(key != null && key.equals(QueryService.UNDEFINED));  if (resultType instanceof StructType) {    indexFieldsSize=((StructTypeImpl)resultType).getFieldNames().length;  } else {    indexFieldsSize=1;  }  int op=reflectOnOperator(indexInfo._key());  QueryObserver observer=QueryObserverHolder.getInstance();  List projAttrib=null;  try {    if (!createEmptySet) {      observer.beforeIndexLookup(indexInfo._index,op,key);      context.cachePut(CompiledValue.INDEX_INFO,indexInfo);    }    boolean useLinkedDataStructure=false;    boolean nullValuesAtStart=true;    Boolean orderByClause=(Boolean)context.cacheGet(CompiledValue.CAN_APPLY_ORDER_BY_AT_INDEX);    if (orderByClause != null && orderByClause.booleanValue()) {      List orderByAttrs=(List)context.cacheGet(CompiledValue.ORDERBY_ATTRIB);      useLinkedDataStructure=orderByAttrs.size() == 1;      nullValuesAtStart=!((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();    }    if (!conditioningNeeded) {      ObjectType projResultType=evaluateProj ? (ObjectType)context.cacheGet(RESULT_TYPE) : null;      if (projResultType != null) {        resultType=projResultType;        projAttrib=(List)context.cacheGet(PROJ_ATTRIB);        context.cachePut(RESULT_TYPE,Boolean.TRUE);      }      if (isIntersection) {        if (resultType instanceof StructType) {          context.getCache().getLogger().fine("StructType resultType.class=" + resultType.getClass().getName());          if (useLinkedDataStructure) {            set=context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) : new SortedResultsBag<Struct>((StructTypeImpl)resultType,nullValuesAtStart);          } else {            set=QueryUtils.createStructCollection(context,(StructTypeImpl)resultType);          }          indexFieldsSize=((StructTypeImpl)resultType).getFieldNames().length;        } else {          context.getCache().getLogger().fine("non-StructType resultType.class=" + resultType.getClass().getName());          if (useLinkedDataStructure) {            set=context.isDistinct() ? new LinkedResultSet(resultType) : new SortedResultsBag(resultType,nullValuesAtStart);          } else {            set=QueryUtils.createResultCollection(context,resultType);          }          indexFieldsSize=1;        }      } else {        if (intermediateResults != null && context.getQuery() != null && ((DefaultQuery)context.getQuery()).getSelect().isDistinct()) {          set=intermediateResults;          intermediateResults=null;        } else {          if (resultType instanceof StructType) {            context.getCache().getLogger().fine("StructType resultType.class=" + resultType.getClass().getName());            if (useLinkedDataStructure) {              set=context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) : new SortedResultsBag<Struct>((StructTypeImpl)resultType,nullValuesAtStart);            } else {              set=QueryUtils.createStructCollection(context,(StructTypeImpl)resultType);            }            indexFieldsSize=((StructTypeImpl)resultType).getFieldNames().length;          } else {            context.getCache().getLogger().fine("non-StructType resultType.class=" + resultType.getClass().getName());            if (useLinkedDataStructure) {              set=context.isDistinct() ? new LinkedResultSet(resultType) : new SortedResultsBag(resultType,nullValuesAtStart);            } else {              set=QueryUtils.createResultCollection(context,resultType);            }            indexFieldsSize=1;          }        }      }      if (!createEmptySet) {        indexInfo._index.query(key,op,set,iterOperands,indpndntItr != null ? indpndntItr[0] : null,context,projAttrib,intermediateResults,isIntersection);      }    } else {      if (resultType instanceof StructType) {        context.getCache().getLogger().fine("StructType resultType.class=" + resultType.getClass().getName());        if (useLinkedDataStructure) {          set=context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) : new SortedResultsBag<Struct>((StructTypeImpl)resultType,nullValuesAtStart);        } else {          set=QueryUtils.createStructCollection(context,(StructTypeImpl)resultType);        }        indexFieldsSize=((StructTypeImpl)resultType).getFieldNames().length;      } else {        context.getCache().getLogger().fine("non-StructType resultType.class=" + resultType.getClass().getName());        if (useLinkedDataStructure) {          set=context.isDistinct() ? new LinkedResultSet(resultType) : new SortedResultsBag(resultType,nullValuesAtStart);        } else {          set=QueryUtils.createResultCollection(context,resultType);        }        indexFieldsSize=1;      }      if (!createEmptySet) {        indexInfo._index.query(key,op,set,context);      }    }  }  finally {    if (!createEmptySet) {      observer.afterIndexLookup(set);    }  }  if (conditioningNeeded) {    return QueryUtils.getconditionedIndexResults(set,indexInfo,context,indexFieldsSize,completeExpansionNeeded,iterOperands,indpndntItr);  } else {    return set;  }}  }
class C{  public SymbolTableEntry basicGetRewiredTarget(){  return rewiredTarget;}  }
class C{  public Multimap<String,String> assembleAllWatchKeys(String appId,String clusterName,Set<String> namespaces,String dataCenter){  Multimap<String,String> watchedKeysMap=assembleWatchKeys(appId,clusterName,namespaces,dataCenter);  if (!(namespaces.size() == 1 && namespaces.contains(ConfigConsts.NAMESPACE_APPLICATION))) {    Set<String> namespacesBelongToAppId=namespacesBelongToAppId(appId,namespaces);    Set<String> publicNamespaces=Sets.difference(namespaces,namespacesBelongToAppId);    if (!publicNamespaces.isEmpty()) {      watchedKeysMap.putAll(findPublicConfigWatchKeys(appId,clusterName,publicNamespaces,dataCenter));    }  }  return watchedKeysMap;}  }
class C{  protected void skipComments(char delimiter) throws IOException {  char ch;  int n=1;  boolean write=false;  StringBuffer meta=null;  if (nextCharacter() == writeComment) {    read();    write=true;  } else   if (nextCharacter() == metaComment) {    read();    meta=lastMetaComment != null ? new StringBuffer(lastMetaComment + ";") : new StringBuffer();  }  lastMetaComment=null;  if (delimiter == lineComment) {    String line=readLine();    if (write && commentWriter != null) {      commentWriter.write(line,0,line.length());      commentWriter.newLine();    } else     if (meta != null) {      meta.append(line);    }  } else {    do {      ch=read();      if (ch == startComment) {        n++;      } else       if (ch == stopComment) {        if (write && commentWriter != null) {          commentWriter.newLine();        }        n--;      } else       if (write && commentWriter != null) {        commentWriter.write(ch);      } else       if (meta != null) {        meta.append(ch);      }    } while (n > 0);  }  if (meta != null) {    lastMetaComment=meta.toString();  }}  }
class C{  @SuppressWarnings("unchecked") public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection<Object>)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map<String,Object>)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public boolean containsOverlappingAttributeValues(UserAttributeParam attributeParam){  boolean containsOverlappingAttributes=false;  if (attributeParam == null) {    _log.warn("Invalid user attribute param");    return containsOverlappingAttributes;  }  _log.debug("Comparing attributes {}, {}",attributeParam.toString(),this.toString());  if (!getKey().equalsIgnoreCase(attributeParam.getKey())) {    _log.debug("Attribute key {} does not match with {}",getKey(),attributeParam.getKey());    return containsOverlappingAttributes;  }  if (getValues() == null || getValues().isEmpty() || attributeParam.getValues() == null || attributeParam.getValues().isEmpty()) {    _log.debug("Empty attribute values to compare. attributes {}, comparing attributes {}",getValues(),attributeParam.getValues());    return containsOverlappingAttributes;  }  for (  String comparingValue : attributeParam.getValues()) {    for (    String value : getValues()) {      if (value != null && comparingValue != null && comparingValue.equalsIgnoreCase(value)) {        containsOverlappingAttributes=true;        break;      }    }  }  return containsOverlappingAttributes;}  }
class C{  protected String convertKey(String key){  return key.toLowerCase(this.locale);}  }
class C{  private boolean checkDirectOwnership(final Collection<Territory> listedTerrs,final int numberNeeded,final Collection<PlayerID> players){  int numberMet=0;  boolean satisfied=false;  for (  final Territory listedTerr : listedTerrs) {    if (Matches.isTerritoryOwnedBy(players).match(listedTerr)) {      numberMet+=1;      if (numberMet >= numberNeeded) {        satisfied=true;        if (!getCountEach()) {          break;        }      }    }  }  if (getCountEach()) {    m_eachMultiple=numberMet;  }  return satisfied;}  }
class C{  public void paintSliderTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public EventTimeInputBuilder<T> flushOpenWindowsOnTermination(){  flushWindows=true;  return this;}  }
class C{  private CharsetUtils(){}  }
class C{  public void query(boolean isReport,int AD_Table_ID,int Record_ID){  log.config("Report=" + isReport + ", AD_Table_ID="+ AD_Table_ID+ ",Record_ID="+ Record_ID);  reportField.setChecked(isReport);  m_AD_Table_ID=AD_Table_ID;  m_Record_ID=Record_ID;  cmd_query();}  }
class C{  public static synchronized void addUnits(String strId,double earthRadius,double multiplierThisToDegrees){  Map<String,DistanceUnits> map=new HashMap<String,DistanceUnits>(instances);  map.put(strId,new DistanceUnits(strId,earthRadius,multiplierThisToDegrees));  instances=ImmutableMap.copyOf(map);}  }
class C{  private static void lookingAtTest() throws Exception {  Pattern p=Pattern.compile("(ab)(c*)");  Matcher m=p.matcher("abccczzzabcczzzabccc");  if (!m.lookingAt())   failCount++;  if (!m.group().equals(m.group(0)))   failCount++;  m=p.matcher("zzzabccczzzabcczzzabccczzz");  if (m.lookingAt())   failCount++;  p=Pattern.compile(toSupplementaries("(ab)(c*)"));  m=p.matcher(toSupplementaries("abccczzzabcczzzabccc"));  if (!m.lookingAt())   failCount++;  if (!m.group().equals(m.group(0)))   failCount++;  m=p.matcher(toSupplementaries("zzzabccczzzabcczzzabccczzz"));  if (m.lookingAt())   failCount++;  report("Looking At");}  }
class C{  public TXRemovalMessage(){}  }
class C{  public static Clob clob(Clob value){  return value;}  }
class C{  @Override public int compareTo(Object o1){  int result;  if (o1 instanceof Second) {    Second s=(Second)o1;    if (this.firstMillisecond < s.firstMillisecond) {      return -1;    } else     if (this.firstMillisecond > s.firstMillisecond) {      return 1;    } else {      return 0;    }  } else   if (o1 instanceof RegularTimePeriod) {    result=0;  } else {    result=1;  }  return result;}  }
class C{  private Workflow.Method createMirrorsMethod(URI vplexURI,List<URI> vplexMirrorURIs,String workflowTaskId){  return new Workflow.Method(CREATE_MIRRORS_METHOD_NAME,vplexURI,vplexMirrorURIs,workflowTaskId);}  }
class C{  @Override public Hypothesis clone(){  Rule clone=new Rule(this.literals,this.prediction);  clone.setCoveredWeight(this.getCoveredWeight());  clone.setPositiveWeight(this.getPositiveWeight());  return clone;}  }
class C{  @Override public void computeScroll(){  if (!isInEditMode() && mViewDragHelper.continueSettling(true)) {    ViewCompat.postInvalidateOnAnimation(this);  }}  }
class C{  private void emitOfflinePage(TreeLogger logger,LinkerContext context,ArtifactSet artifacts,String offlineScreenId) throws UnableToCompleteException {  permutationsUtil=new PermutationsUtil();  permutationsUtil.setupPermutationsMap(artifacts);  StringBuffer buffer=readFileToStringBuffer(getOfflinePageTemplate(logger,context),logger);  int startPos=buffer.indexOf("// __OFFLINE_SELECTION_END__");  if (startPos != -1) {    String ss=generateSelectionScript(logger,context,artifacts);    buffer.insert(startPos,ss);  }  replaceAll(buffer,"__MANIFEST_NAME__",getManifestName());  artifacts.add(emitString(logger,buffer.toString(),offlineScreenId,System.currentTimeMillis()));}  }
class C{  public DelightfulMenuDrawable(Context context){  this(getDefaultDpSize(context));}  }
class C{  private static void fillWithEmptyRows(DataTable data,int count){  while (data.getRowCount() < count) {    Double[] emptyRow=new Double[data.getColumnCount()];    Arrays.fill(emptyRow,0.0);    data.add(emptyRow);  }}  }
class C{  private Map<SoftwareVersion,URL> parseCatalog(String input) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException, InvalidSoftwareVersionException, MalformedURLException, RemoteRepositoryException {  Map<SoftwareVersion,URL> versions=new HashMap<SoftwareVersion,URL>();  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();  Document doc=dBuilder.parse(new InputSource(new StringReader(input)));  XPath xPath=XPathFactory.newInstance().newXPath();  NodeList fileList=(NodeList)xPath.compile("//File").evaluate(doc,XPathConstants.NODESET);  for (int fileItr=0; fileItr < fileList.getLength(); fileItr++) {    Node fileNode=fileList.item(fileItr);    Element element=(Element)fileNode;    Node nameNode=element.getAttributeNode("Name");    if (null != nameNode) {      String fileName=nameNode.getNodeValue();      if (fileName.endsWith(SOFTWARE_IMAGE_SUFFIX)) {        String fileVersion=fileName.replace(SOFTWARE_IMAGE_SUFFIX,"");        Node urlNode=element.getAttributeNode("URL");        String fileUrl=urlNode.getNodeValue();        versions.put(new SoftwareVersion(fileVersion),new URL(fileUrl));      }    }  }  if (versions.isEmpty()) {    throw SyssvcException.syssvcExceptions.remoteRepoError("Empty remote repository: " + _repo);  }  return versions;}  }
class C{  private void applyCommand(long index,CompletableFuture<CommandResponse> future){  context.getStateMachine().<ServerStateMachine.Result>apply(index).whenComplete(null);}  }
class C{  public static UriMatcher buildUriMatcher(){  final UriMatcher matcher=new UriMatcher(UriMatcher.NO_MATCH);  matcher.addURI(WeatherContract.AUTHORITY,WeatherContract.WeatherValuesEntry.WEATHER_VALUES_TABLE_NAME,WEATHER_VALUES_ITEMS);  matcher.addURI(WeatherContract.AUTHORITY,WeatherContract.WeatherValuesEntry.WEATHER_VALUES_TABLE_NAME + "/#",WEATHER_VALUES_ITEM);  matcher.addURI(WeatherContract.AUTHORITY,WeatherContract.WeatherConditionsEntry.WEATHER_CONDITIONS_TABLE_NAME,WEATHER_CONDITIONS_ITEMS);  matcher.addURI(WeatherContract.AUTHORITY,WeatherContract.WeatherConditionsEntry.WEATHER_CONDITIONS_TABLE_NAME + "/#",WEATHER_CONDITIONS_ITEM);  matcher.addURI(WeatherContract.AUTHORITY,WeatherContract.ACCESS_ALL_DATA_FOR_LOCATION_PATH,ACCESS_ALL_DATA_FOR_LOCATION_ITEM);  return matcher;}  }
class C{  public void stop(){  DataLine clip;  if ((clip=getClip()) == null || !clip.isActive())   return;  BooleanControl muteControl=(BooleanControl)clip.getControl(BooleanControl.Type.MUTE);  FloatControl gainControl=(FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);  for (float gain=0.0f; gain > -30.0f; gain-=6.0f)   try {    muteControl.setValue(true);    gainControl.setValue(gain);    muteControl.setValue(false);    Thread.sleep(600);  } catch (  InterruptedException e) {  }  clip.stop();  clip.flush();}  }
class C{  public boolean isEncrypted(){  Object oo=get_Value(COLUMNNAME_IsEncrypted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static TestSuite suiteWithOptionalProxy(final String name,final Set<BufferMode> bufferModes,final TestMode... testMode){  if (!proxyIndexManagerTestingHasStarted) {    proxyIndexManagerTestingHasStarted=true;    return new MultiModeTestSuite(name,bufferModes,testMode);  } else {    return new TestSuite(name);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"shld");  if (instruction.getOperands().size() != 3) {    throw new InternalTranslationException("Error: Argument instruction is not a shl instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final TranslationResult firstResult=Helpers.translateOperand(environment,offset,operands.get(0),true);  instructions.addAll(firstResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult secondResult=Helpers.translateOperand(environment,offset,operands.get(1),true);  instructions.addAll(secondResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult thirdResult=Helpers.translateOperand(environment,offset,operands.get(2),true);  instructions.addAll(thirdResult.getInstructions());  final String truncatedShiftValue=environment.getNextVariableString();  final String truncatedShiftValueZero=environment.getNextVariableString();  offset=baseOffset + instructions.size();  instructions.add(ReilHelpers.createAnd(offset++,thirdResult.getSize(),thirdResult.getRegister(),OperandSize.BYTE,"31",OperandSize.BYTE,truncatedShiftValue));  instructions.add(ReilHelpers.createBisz(offset++,OperandSize.BYTE,truncatedShiftValue,OperandSize.BYTE,truncatedShiftValueZero));  final int jumpInsertIndex1=(int)(offset - baseOffset);  offset++;  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.AUXILIARY_FLAG));  final String sizeSubtractionResult=environment.getNextVariableString();  final String sizeMaskingResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,String.valueOf(firstResult.getSize().getBitSize()),OperandSize.BYTE,truncatedShiftValue,OperandSize.WORD,sizeSubtractionResult));  instructions.add(ReilHelpers.createAnd(offset++,OperandSize.WORD,sizeSubtractionResult,OperandSize.WORD,String.valueOf(0x8000),OperandSize.WORD,sizeMaskingResult));  final int jumpInsertIndex2=(int)(offset - baseOffset);  offset++;  final String shiftedFirstInput=environment.getNextVariableString();  final String shiftMask=String.valueOf(firstResult.getSize().getBitSize());  final OperandSize combinedSize=TranslationHelpers.getNextSize(firstResult.getSize());  final OperandSize extendedSize=TranslationHelpers.getNextSize(combinedSize);  final String combinedSource=environment.getNextVariableString();  final String shiftedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createBsh(offset++,firstResult.getSize(),firstResult.getRegister(),firstResult.getSize(),shiftMask,combinedSize,shiftedFirstInput));  instructions.add(ReilHelpers.createOr(offset++,combinedSize,shiftedFirstInput,secondResult.getSize(),secondResult.getRegister(),combinedSize,combinedSource));  instructions.add(ReilHelpers.createBsh(offset++,combinedSize,combinedSource,OperandSize.BYTE,truncatedShiftValue,extendedSize,shiftedResult));  final String isolationMask=getAllButMask(combinedSize,firstResult.getSize());  final String isolationResult=environment.getNextVariableString();  final String shiftedIsolationResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset++,extendedSize,shiftedResult,combinedSize,isolationMask,combinedSize,isolationResult));  instructions.add(ReilHelpers.createBsh(offset++,combinedSize,isolationResult,OperandSize.BYTE,"-" + shiftMask,firstResult.getSize(),shiftedIsolationResult));  instructions.add(ReilHelpers.createBisz(offset++,firstResult.getSize(),shiftedIsolationResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  Helpers.generateSignFlagCode(environment,offset,shiftedIsolationResult,firstResult.getSize(),instructions);  offset=baseOffset + instructions.size() + 2;  final String tempCf=environment.getNextVariableString();  final String carryMask=String.valueOf(getCarryMask(combinedSize));  final String shiftCarryLsb=String.valueOf(-combinedSize.getBitSize());  instructions.add(ReilHelpers.createAnd(offset++,extendedSize,shiftedResult,extendedSize,carryMask,extendedSize,tempCf));  instructions.add(ReilHelpers.createBsh(offset++,extendedSize,tempCf,extendedSize,shiftCarryLsb,OperandSize.BYTE,Helpers.CARRY_FLAG));  final String tempInput=environment.getNextVariableString();  instructions.add(ReilHelpers.createStr(offset++,firstResult.getSize(),firstResult.getRegister(),firstResult.getSize(),tempInput));  Helpers.writeBack(environment,offset,operands.get(0),shiftedIsolationResult,firstResult.getSize(),firstResult.getAddress(),firstResult.getType(),instructions);  offset=baseOffset + instructions.size() + 2;  final String shiftValueOne=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,truncatedShiftValue,OperandSize.BYTE,"1",OperandSize.WORD,shiftValueOne));  final int jumpInsertIndex3=(int)(offset - baseOffset);  offset++;  final String xoredMsb=environment.getNextVariableString();  final String maskedMsb=environment.getNextVariableString();  final long msbMask=TranslationHelpers.getMsbMask(firstResult.getSize());  final long msbShift=TranslationHelpers.getShiftMsbLsbMask(firstResult.getSize());  instructions.add(ReilHelpers.createXor(offset++,firstResult.getSize(),tempInput,firstResult.getSize(),shiftedIsolationResult,firstResult.getSize(),xoredMsb));  instructions.add(ReilHelpers.createAnd(offset++,firstResult.getSize(),xoredMsb,firstResult.getSize(),String.valueOf(msbMask),firstResult.getSize(),maskedMsb));  instructions.add(ReilHelpers.createBsh(offset++,firstResult.getSize(),maskedMsb,OperandSize.BYTE,String.valueOf(msbShift),OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final int jumpInsertIndex4=(int)(offset - baseOffset);  offset++;  final String largeValueHandler=String.format("%d.%d",instruction.getAddress().toLong(),offset - baseOffset);  final IOperandTree inputOperand=operands.get(0);  if (inputOperand.getRootNode().getChildren().get(0).getType() == com.google.security.zynamics.zylib.disassembly.ExpressionType.REGISTER) {    final String operand=Helpers.getLeafValue(inputOperand.getRootNode());    final String undefRegister=Helpers.getOperandSize(inputOperand) == environment.getArchitectureSize() ? operand : Helpers.getParentRegister(operand);    instructions.add(ReilHelpers.createUndef(offset++,environment.getArchitectureSize(),undefRegister));  }  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.ZERO_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.PARITY_FLAG));  final String notOneHandler=String.format("%d.%d",instruction.getAddress().toLong(),offset - baseOffset);  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final String jmpGoalEnd=String.format("%d.%d",instruction.getAddress().toLong(),offset - baseOffset);  instructions.add(ReilHelpers.createNop(offset++));  instructions.add(jumpInsertIndex1,ReilHelpers.createJcc(baseOffset + jumpInsertIndex1,OperandSize.BYTE,truncatedShiftValueZero,OperandSize.ADDRESS,jmpGoalEnd));  instructions.add(jumpInsertIndex2,ReilHelpers.createJcc(baseOffset + jumpInsertIndex2,OperandSize.WORD,sizeMaskingResult,OperandSize.ADDRESS,largeValueHandler));  instructions.add(jumpInsertIndex3,ReilHelpers.createJcc(baseOffset + jumpInsertIndex3,OperandSize.WORD,shiftValueOne,OperandSize.ADDRESS,notOneHandler));  instructions.add(jumpInsertIndex4,ReilHelpers.createJcc(baseOffset + jumpInsertIndex4,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoalEnd));}  }
class C{  public boolean save(){  m_saveErrorMessage=null;  log.info("BP.Value=" + m_bp.getValue() + ", Name="+ m_bp.getName());  try {    if (m_bp.getC_BPartner_ID() == 0) {      String sql="SELECT * FROM C_BPartner WHERE AD_Client_ID=? AND Value=?";      PreparedStatement pstmt=null;      ResultSet rs=null;      try {        pstmt=DB.prepareStatement(sql,null);        pstmt.setInt(1,m_AD_Client_ID);        pstmt.setString(2,m_bp.getValue());        rs=pstmt.executeQuery();        if (rs.next()) {          m_bp=new MBPartner(m_ctx,m_bpc.getC_BPartner_ID(),null);          log.fine("BP loaded =" + m_bp);        }      } catch (      Exception e) {        log.log(Level.SEVERE,"save-check",e);      } finally {        DB.close(rs,pstmt);        rs=null;        pstmt=null;      }    }    if (m_bp.getName() == null || m_bp.getName().length() == 0)     m_bp.setName(m_bpc.getName());    if (m_bp.getValue() == null || m_bp.getValue().length() == 0)     m_bp.setValue(m_bpc.getEMail());    log.fine("BP=" + m_bp);    if (!m_bp.save()) {      m_saveErrorMessage="Could not save Business Partner";      return false;    }    log.fine("LOC=" + m_loc);    m_loc.save();    if (m_bpl.getC_BPartner_ID() != m_bp.getC_BPartner_ID())     m_bpl.setC_BPartner_ID(m_bp.getC_BPartner_ID());    if (m_bpl.getC_Location_ID() != m_loc.getC_Location_ID())     m_bpl.setC_Location_ID(m_loc.getC_Location_ID());    log.fine("BPL=" + m_bpl);    if (!m_bpl.save()) {      m_saveErrorMessage="Could not save Location";      return false;    }    if (m_bpc.getC_BPartner_ID() != m_bp.getC_BPartner_ID())     m_bpc.setC_BPartner_ID(m_bp.getC_BPartner_ID());    if (m_bpc.getC_BPartner_Location_ID() != m_bpl.getC_BPartner_Location_ID())     m_bpc.setC_BPartner_Location_ID(m_bpl.getC_BPartner_Location_ID());    log.fine("BPC=" + m_bpc);    if (!m_bpc.save()) {      m_saveErrorMessage="Could not save Contact";      return false;    }  } catch (  Exception ex) {    log.log(Level.SEVERE,"save",ex);    m_saveErrorMessage=ex.toString();    return false;  }  return true;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public FetchExport(final String key){  super(key);}  }
class C{  public void updateBigDecimal(int columnIndex,BigDecimal x) throws SQLException {  throw new NotUpdatable();}  }
class C{  public void prevFrame() throws IOException {  print("previousFrame",null);}  }
class C{  public Element store(Object o){  VirtualSignalMast p=(VirtualSignalMast)o;  Element e=new Element("virtualsignalmast");  e.setAttribute("class",this.getClass().getName());  e.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,e);  Element unlit=new Element("unlit");  if (p.allowUnLit()) {    unlit.setAttribute("allowed","yes");  } else {    unlit.setAttribute("allowed","no");  }  e.addContent(unlit);  List<String> disabledAspects=p.getDisabledAspects();  if (disabledAspects != null) {    Element el=new Element("disabledAspects");    for (    String aspect : disabledAspects) {      Element ele=new Element("disabledAspect");      ele.addContent(aspect);      el.addContent(ele);    }    if (disabledAspects.size() != 0) {      e.addContent(el);    }  }  return e;}  }
class C{  public static double nextDouble(){  return random.nextDouble();}  }
class C{  public static float distancePointPlane(float pointX,float pointY,float pointZ,float v0X,float v0Y,float v0Z,float v1X,float v1Y,float v1Z,float v2X,float v2Y,float v2Z){  float v1Y0Y=v1Y - v0Y;  float v2Z0Z=v2Z - v0Z;  float v2Y0Y=v2Y - v0Y;  float v1Z0Z=v1Z - v0Z;  float v2X0X=v2X - v0X;  float v1X0X=v1X - v0X;  float a=v1Y0Y * v2Z0Z - v2Y0Y * v1Z0Z;  float b=v1Z0Z * v2X0X - v2Z0Z * v1X0X;  float c=v1X0X * v2Y0Y - v2X0X * v1Y0Y;  float d=-(a * v0X + b * v0Y + c * v0Z);  return distancePointPlane(pointX,pointY,pointZ,a,b,c,d);}  }
class C{  private void jbInit() throws Exception {  mainPanel.setLayout(mainLayout);  nameLabel.setText(s_res.getString("Name"));  selectPanel.setLayout(selectLayout);  sizeLabel.setText(s_res.getString("Size"));  styleLabel.setText(s_res.getString("Style"));  fontTest.setText(s_res.getString("TestString"));  fontTest.setLineWrap(true);  fontTest.setWrapStyleWord(true);  fontTest.setBackground(AdempierePLAF.getFieldBackground_Inactive());  fontTest.setBorder(BorderFactory.createLoweredBevelBorder());  fontTest.setPreferredSize(new Dimension(220,100));  fontInfo.setText(s_res.getString("FontString"));  fontInfo.setLineWrap(true);  fontInfo.setWrapStyleWord(true);  fontInfo.setBackground(AdempierePLAF.getFieldBackground_Inactive());  fontInfo.setOpaque(false);  fontInfo.setEditable(false);  confirmPanel.setLayout(confirmLayout);  confirmLayout.setAlignment(FlowLayout.RIGHT);  confirmPanel.setOpaque(false);  selectPanel.setOpaque(false);  getContentPane().add(mainPanel);  mainPanel.add(selectPanel,BorderLayout.CENTER);  selectPanel.add(nameLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  selectPanel.add(fontName,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  selectPanel.add(sizeLabel,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  selectPanel.add(styleLabel,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  selectPanel.add(fontStyle,new GridBagConstraints(1,2,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  selectPanel.add(fontSize,new GridBagConstraints(1,1,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  selectPanel.add(fontTest,new GridBagConstraints(0,3,2,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(20,5,5,5),0,0));  selectPanel.add(fontInfo,new GridBagConstraints(0,4,2,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(10,5,10,5),0,0));  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.add(bCancel,null);  confirmPanel.add(bOK,null);  bCancel.addActionListener(this);  bOK.addActionListener(this);}  }
class C{  @Override public boolean add(Object obj){  if (!(obj instanceof StructImpl)) {    throw new IllegalArgumentException(LocalizedStrings.StructBag_THIS_SET_ONLY_ACCEPTS_STRUCTIMPL.toLocalizedString());  }  StructImpl s=(StructImpl)obj;  if (!this.elementType.equals(s.getStructType())) {    throw new IllegalArgumentException(LocalizedStrings.StructBag_OBJ_DOES_NOT_HAVE_THE_SAME_STRUCTTYPE.toLocalizedString(this.elementType,s.getStructType()));  }  return addFieldValues(s.getFieldValues());}  }
class C{  static public double gamma(double x) throws ArithmeticException {  double P[]={1.60119522476751861407E-4,1.19135147006586384913E-3,1.04213797561761569935E-2,4.76367800457137231464E-2,2.07448227648435975150E-1,4.94214826801497100753E-1,9.99999999999999996796E-1};  double Q[]={-2.31581873324120129819E-5,5.39605580493303397842E-4,-4.45641913851797240494E-3,1.18139785222060435552E-2,3.58236398605498653373E-2,-2.34591795718243348568E-1,7.14304917030273074085E-2,1.00000000000000000320E0};  double p, z;  int i;  double q=Math.abs(x);  if (q > 33.0) {    if (x < 0.0) {      p=Math.floor(q);      if (p == q)       throw new ArithmeticException("gamma: overflow");      z=q - p;      if (z > 0.5) {        p+=1.0;        z=q - p;      }      z=q * Math.sin(Math.PI * z);      if (z == 0.0)       throw new ArithmeticException("gamma: overflow");      z=Math.abs(z);      z=Math.PI / (z * stirlingFormula(q));      return -z;    } else {      return stirlingFormula(x);    }  }  z=1.0;  while (x >= 3.0) {    x-=1.0;    z*=x;  }  while (x < 0.0) {    if (x == 0.0) {      throw new ArithmeticException("gamma: singular");    } else     if (x > -1.E-9) {      return (z / ((1.0 + 0.5772156649015329 * x) * x));    }    z/=x;    x+=1.0;  }  while (x < 2.0) {    if (x == 0.0) {      throw new ArithmeticException("gamma: singular");    } else     if (x < 1.e-9) {      return (z / ((1.0 + 0.5772156649015329 * x) * x));    }    z/=x;    x+=1.0;  }  if ((x == 2.0) || (x == 3.0))   return z;  x-=2.0;  p=Polynomial.polevl(x,P,6);  q=Polynomial.polevl(x,Q,7);  return z * p / q;}  }
class C{  private void updateResultsDisplay(){  if (mResults != null)   mActivity.get().displayResults(mResults,null);}  }
class C{  public void add(String mimeType,String extension){  if (extension == null) {    return;  }  Object value=mimeMappings.get(mimeType);  String[] a=null;  if (value instanceof String[]) {    String[] old=(String[])value;    a=new String[old.length + 1];    System.arraycopy(old,0,a,0,old.length);    a[a.length - 1]=extension;    mimeMappings.put(mimeType,a);  } else   if (value instanceof String) {    a=new String[2];    a[0]=(String)value;    a[1]=extension;    mimeMappings.put(mimeType,a);  } else {    mimeMappings.put(mimeType,extension);  }}  }
class C{  public void sortByWeight(String[] attributeNames,int direction,int comparatorType){  Arrays.sort(attributeNames,new WeightComparator(direction,comparatorType));}  }
class C{  void updateGridBitmap(float viewScale){  int gridSpacing=(int)(GRID_SPACING * viewScale);  if (mGridBitmap != null) {    mGridBitmap.recycle();  }  mGridBitmap=Bitmap.createBitmap(gridSpacing,gridSpacing,Bitmap.Config.ARGB_8888);  Canvas bitmapCanvas=new Canvas(mGridBitmap);  bitmapCanvas.drawCircle(GRID_RADIUS,GRID_RADIUS,GRID_RADIUS,mCirclePaint);  mGridPaint.setShader(new BitmapShader(mGridBitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT));}  }
class C{  protected Object invoke(Method method,Object arg1,Object arg2,Object arg3){  return invoke(method,new Object[]{arg1,arg2,arg3});}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  long bottom=stepInstance.getBottomProtein();  long top=stepInstance.getTopProtein();  Set<RawProtein<PIRSFHmmer2RawMatch>> rawMatches=rawMatchDAO.getProteinsByIdRange(bottom,top,signatureLibraryRelease);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("PIRSF: Retrieved " + rawMatches.size() + " proteins to post-process.");    int matchCount=0;    for (    final RawProtein rawProtein : rawMatches) {      matchCount+=rawProtein.getMatches().size();    }    LOGGER.debug("PIRSF: A total of " + matchCount + " raw matches.");  }  final String subFamilyMatchesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,subFamilyMatchesFileName);  final String subFamilyMapFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,subFamilyMapFileName);  final Resource subFamilyMapFileResource=new FileSystemResource(subFamilyMapFilePath);  LOGGER.debug("Executing subfamily post processing...");  try {    postProcessor.process(rawMatches,subFamilyMatchesFilePath,subFamilyMapFilePath,subFamilyMapFileResource);  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to read subfamily mapping file!",e);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  if (a == null)   return new Long(0);  Watched w=Wizard.getInstance().getWatch(a);  if (stack.getUIMgrSafe() != null && stack.getUIMgrSafe().getVideoFrame().hasFile()) {    MediaFile mf=stack.getUIMgrSafe().getVideoFrame().getCurrFile();    if (mf != null && mf.getContentAiring() == a) {      return new Long(Math.max(stack.getUIMgrSafe().getVideoFrame().getMediaTimeMillis(true),(w == null) ? 0 : w.getWatchEnd()));    }  }  return (w == null) ? new Long(0) : new Long(w.getWatchEnd());}  }
class C{  public static PasswordAuthentication requestPasswordAuthentication(String rHost,InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme,URL rURL,Authenticator.RequestorType reqType){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.host=rHost;  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.url=rURL;  thisAuthenticator.rt=reqType;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public boolean isRemoteMoviePlaying() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  return mState == MediaStatus.PLAYER_STATE_BUFFERING || mState == MediaStatus.PLAYER_STATE_PLAYING;}  }
class C{  public static void sendMail(Context mContext,String mailID){  Uri uri=Uri.parse("mailto:" + mailID);  Intent intent=new Intent(Intent.ACTION_SENDTO,uri);  mContext.startActivity(intent);}  }
class C{  public static void decimate(Track track,double precision){  ArrayList<Location> decimated=new ArrayList<Location>();  decimate(precision,track.getLocations(),decimated);  track.setLocations(decimated);}  }
class C{  @NotNull public static SqlArray varchars(@NotNull String... values){  return varchars(asList(values));}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  private static InputStream cap(final Request req) throws IOException {  final Iterator<String> hdr=new RqHeaders.Base(req).header("Transfer-Encoding").iterator();  final InputStream result;  if (hdr.hasNext() && "chunked".equalsIgnoreCase(hdr.next())) {    result=new ChunkedInputStream(req.body());  } else {    result=req.body();  }  return result;}  }
class C{  public static boolean isTvUiMode(Context c){  UiModeManager uiModeManager=(UiModeManager)c.getSystemService(Context.UI_MODE_SERVICE);  if (uiModeManager.getCurrentModeType() == Configuration.UI_MODE_TYPE_TELEVISION) {    LogHelper.d(TAG,"Running in TV mode");    return true;  } else {    LogHelper.d(TAG,"Running on a non-TV mode");    return false;  }}  }
class C{  public DSAParameterGenerationParameters(int L,int N,int certainty,SecureRandom random){  this(L,N,certainty,random,-1);}  }
class C{  public PacketOutputStream writeBytes(final byte theByte,final int count){  for (int i=0; i < count; i++) {    this.writeByte(theByte);  }  return this;}  }
class C{  public double combinedDL(double expFPRate,double predicted){  double rt=0;  if (getRulesetSize() > 0) {    double[] stats=m_SimpleStats.get(m_SimpleStats.size() - 1);    for (int j=getRulesetSize() - 2; j >= 0; j--) {      stats[0]+=getSimpleStats(j)[0];      stats[2]+=getSimpleStats(j)[2];      stats[4]+=getSimpleStats(j)[4];    }    rt+=dataDL(expFPRate,stats[0],stats[1],stats[4],stats[5]);  } else {    double fn=0.0;    for (int j=0; j < m_Data.numInstances(); j++) {      if ((int)m_Data.instance(j).classValue() == (int)predicted) {        fn+=m_Data.instance(j).weight();      }    }    rt+=dataDL(expFPRate,0.0,m_Data.sumOfWeights(),0.0,fn);  }  for (int i=0; i < getRulesetSize(); i++) {    rt+=theoryDL(i);  }  return rt;}  }
class C{  public void antialiasing(final int ulx,final int uly,final int lrx,final int lry,final int bgcolor){  filter(ulx,uly,lrx,lry,FilterMode.FILTER_ANTIALIASING,bgcolor);}  }
class C{  public boolean isEmittable(){  return kind != BACKWARD_ACTION && kind != FORWARD_ACTION;}  }
class C{  public void addFieldAnnotations(CstFieldRef field,Annotations annotations){  annotationsDirectory.addFieldAnnotations(field,annotations);}  }
class C{  private static long parseUnsigned(String s,int from,int to){  long value=0;  for (int pos=from; pos < to; pos++) {    int digit=Character.digit(s.charAt(pos),16);    if (digit == -1) {      throw new NumberFormatException(s);    }    value=value * 16 + digit;  }  return value;}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.TRANSFORMER__NAME:    return getName();case EipPackage.TRANSFORMER__TO_CHANNELS:  return getToChannels();case EipPackage.TRANSFORMER__FROM_CHANNELS:return getFromChannels();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.144 -0500",hash_original_method="3FC26787C5211E44D8B34B9447EFC8D6",hash_generated_method="B838F3BEB517760673229A9E3A0C82D7") public void proceed(String username,String password){  if (handleResponseForSynchronousRequest(username,password)) {    signalRequestComplete();    return;  }  Message msg=obtainMessage(AUTH_PROCEED);  msg.getData().putString("username",username);  msg.getData().putString("password",password);  sendMessage(msg);  signalRequestComplete();}  }
class C{  public String sprintf(final long x) throws IllegalArgumentException {  final Iterator<ConversionSpecification> e=vFmt.iterator();  ConversionSpecification cs;  char c;  final StringBuilder sb=new StringBuilder();  while (e.hasNext()) {    cs=e.next();    c=cs.getConversionCharacter();    if (c == '\0') {      sb.append(cs.getLiteral());    } else     if (c == '%') {      sb.append('%');    } else {      sb.append(cs.internalsprintf(x));    }  }  return sb.toString();}  }
class C{  public void onActionModeStarted(ActionMode mode){}  }
class C{  public int bitsLeft(){  return limit - getPosition();}  }
class C{  protected void saveClusterer(String name,Clusterer clusterer,Instances trainHeader,int[] ignoredAtts){  File sFile=null;  boolean saveOK=true;  int returnVal=m_FileChooser.showSaveDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    sFile=m_FileChooser.getSelectedFile();    if (!sFile.getName().toLowerCase().endsWith(MODEL_FILE_EXTENSION)) {      sFile=new File(sFile.getParent(),sFile.getName() + MODEL_FILE_EXTENSION);    }    m_Log.statusMessage("Saving model to file...");    try {      OutputStream os=new FileOutputStream(sFile);      if (sFile.getName().endsWith(".gz")) {        os=new GZIPOutputStream(os);      }      ObjectOutputStream objectOutputStream=new ObjectOutputStream(os);      objectOutputStream.writeObject(clusterer);      if (trainHeader != null) {        objectOutputStream.writeObject(trainHeader);      }      if (ignoredAtts != null) {        objectOutputStream.writeObject(ignoredAtts);      }      objectOutputStream.flush();      objectOutputStream.close();    } catch (    Exception e) {      JOptionPane.showMessageDialog(null,e,"Save Failed",JOptionPane.ERROR_MESSAGE);      saveOK=false;    }    if (saveOK) {      m_Log.logMessage("Saved model (" + name + ") to file '"+ sFile.getName()+ "'");    }    m_Log.statusMessage("OK");  }}  }
class C{  public boolean isArray(){  return false;}  }
class C{  @Override public void stopVServer(PropertyHandler paramHandler) throws Exception {  LServerClient vserverClient=getLServerClient(paramHandler);  if (LServerStatus.RUNNING.equals(vserverClient.getStatus())) {    vserverClient.stop();  }}  }
class C{  public String[] read(String value){  return read(value,token);}  }
class C{  public void close() throws IOException {  if (solrStreams != null) {    for (    TupleStream solrStream : solrStreams) {      solrStream.close();    }  }  if ((this.streamContext == null || this.streamContext.getSolrClientCache() == null) && cloudSolrClient != null) {    cloudSolrClient.close();  }}  }
class C{  @Override public void updateNClob(String columnLabel,NClob x) throws SQLException {  throw unsupported("NClob");}  }
class C{  @Override protected void disconnect(){  ConnectionHttp conn=_request.connHttp();  if (conn != null) {    try {      _request.ok();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public void animatePop(Animator.AnimatorListener animatorListener,int duration){  ObjectAnimator animatorLayoutAlpha=ObjectAnimator.ofFloat(peekLayout,"alpha",0);  animatorLayoutAlpha.setDuration(duration);  animatorLayoutAlpha.addListener(animatorListener);  animatorLayoutAlpha.setInterpolator(new DecelerateInterpolator(1.5f));  animatorLayoutAlpha.start();  animateReturn(duration);}  }
class C{  public static <D extends TSDBEntityDto,E extends TSDBEntity>D createDtoObject(Class<D> clazz,E tsdbEntity){  D result=null;  try {    result=clazz.newInstance();    BeanUtils.copyProperties(result,tsdbEntity);  } catch (  Exception ex) {    throw new WebApplicationException("DTO transformation failed.",Status.INTERNAL_SERVER_ERROR);  }  return result;}  }
class C{  public void keyTyped(KeyEvent e){synchronized (keyLock) {    keysTyped.addFirst(e.getKeyChar());  }}  }
class C{  public Relationship nextMostConsciousRelationship(Primitive type,Vertex ignoring){  return nextMostConsciousRelationship(this.network.createVertex(type),ignoring);}  }
class C{  @Override public String toString(){  StringBuilder theString=new StringBuilder();  theString.append("[GenericEntity:");  theString.append(getEntityName());  theString.append(']');  for (  String curKey : new TreeSet<String>(fields.keySet())) {    Object curValue=fields.get(curKey);    ModelField field=this.getModelEntity().getField(curKey);    if (field.getEncryptMethod().isEncrypted() && curValue instanceof String) {      String encryptField=(String)curValue;      curValue=HashCrypt.cryptBytes(null,null,encryptField.getBytes());    }    theString.append('[');    theString.append(curKey);    theString.append(',');    theString.append(curValue);    theString.append('(');    theString.append(curValue != null ? curValue.getClass().getName() : "");    theString.append(')');    theString.append(']');  }  return theString.toString();}  }
class C{  private boolean parseBang(){  int startIndex=index;  index++;  if (peek() == '[') {    index++;    Text node=appendText("![");    addBracket(Bracket.image(node,startIndex + 1,lastBracket,lastDelimiter));  } else {    appendText("!");  }  return true;}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  public boolean isSetCreateTime(){  return EncodingUtils.testBit(__isset_bitfield,__CREATETIME_ISSET_ID);}  }
class C{  public void testDatabaseDriverPropertiesPasswordPropertySetsPasswordOnDataSource(){  String driverPropertyString="password=egg;CreateDatabase=create";  String propertyString=DatasourcePropertySet.CONNECTION_PROPERTIES + "=" + driverPropertyString;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals("egg",ds.getPassword());}  }
class C{  public void advanceSeasonPlayers(){  int qbNeeds=0, rbNeeds=0, wrNeeds=0, kNeeds=0, olNeeds=0, sNeeds=0, cbNeeds=0, f7Needs=0;  if (playersLeaving.isEmpty()) {    int i=0;    while (i < teamQBs.size()) {      if (teamQBs.get(i).year == 4 || (teamQBs.get(i).year == 3 && teamQBs.get(i).ratOvr > NFL_OVR && Math.random() < NFL_CHANCE)) {        teamQBs.remove(i);        qbNeeds++;      } else {        teamQBs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamRBs.size()) {      if (teamRBs.get(i).year == 4 || (teamRBs.get(i).year == 3 && teamRBs.get(i).ratOvr > NFL_OVR && Math.random() < NFL_CHANCE)) {        teamRBs.remove(i);        rbNeeds++;      } else {        teamRBs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamWRs.size()) {      if (teamWRs.get(i).year == 4 || (teamWRs.get(i).year == 3 && teamWRs.get(i).ratOvr > NFL_OVR && Math.random() < NFL_CHANCE)) {        teamWRs.remove(i);        wrNeeds++;      } else {        teamWRs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamKs.size()) {      if (teamKs.get(i).year == 4) {        teamKs.remove(i);        kNeeds++;      } else {        teamKs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamOLs.size()) {      if (teamOLs.get(i).year == 4 || (teamOLs.get(i).year == 3 && teamOLs.get(i).ratOvr > NFL_OVR && Math.random() < NFL_CHANCE)) {        teamOLs.remove(i);        olNeeds++;      } else {        teamOLs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamSs.size()) {      if (teamSs.get(i).year == 4 || (teamSs.get(i).year == 3 && teamSs.get(i).ratOvr > NFL_OVR && Math.random() < NFL_CHANCE)) {        teamSs.remove(i);        sNeeds++;      } else {        teamSs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamCBs.size()) {      if (teamCBs.get(i).year == 4 || (teamCBs.get(i).year == 3 && teamCBs.get(i).ratOvr > NFL_OVR && Math.random() < NFL_CHANCE)) {        teamCBs.remove(i);        cbNeeds++;      } else {        teamCBs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamF7s.size()) {      if (teamF7s.get(i).year == 4 || (teamF7s.get(i).year == 3 && teamF7s.get(i).ratOvr > NFL_OVR && Math.random() < NFL_CHANCE)) {        teamF7s.remove(i);        f7Needs++;      } else {        teamF7s.get(i).advanceSeason();        i++;      }    }    if (!userControlled) {      recruitPlayersFreshman(qbNeeds,rbNeeds,wrNeeds,kNeeds,olNeeds,sNeeds,cbNeeds,f7Needs);      resetStats();    }  } else {    int i=0;    while (i < teamQBs.size()) {      if (playersLeaving.contains(teamQBs.get(i))) {        teamQBs.remove(i);        qbNeeds++;      } else {        teamQBs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamRBs.size()) {      if (playersLeaving.contains(teamRBs.get(i))) {        teamRBs.remove(i);        rbNeeds++;      } else {        teamRBs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamWRs.size()) {      if (playersLeaving.contains(teamWRs.get(i))) {        teamWRs.remove(i);        wrNeeds++;      } else {        teamWRs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamKs.size()) {      if (playersLeaving.contains(teamKs.get(i))) {        teamKs.remove(i);        kNeeds++;      } else {        teamKs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamOLs.size()) {      if (playersLeaving.contains(teamOLs.get(i))) {        teamOLs.remove(i);        olNeeds++;      } else {        teamOLs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamSs.size()) {      if (playersLeaving.contains(teamSs.get(i))) {        teamSs.remove(i);        sNeeds++;      } else {        teamSs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamCBs.size()) {      if (playersLeaving.contains(teamCBs.get(i))) {        teamCBs.remove(i);        cbNeeds++;      } else {        teamCBs.get(i).advanceSeason();        i++;      }    }    i=0;    while (i < teamF7s.size()) {      if (playersLeaving.contains(teamF7s.get(i))) {        teamF7s.remove(i);        f7Needs++;      } else {        teamF7s.get(i).advanceSeason();        i++;      }    }    if (!userControlled) {      recruitPlayersFreshman(qbNeeds,rbNeeds,wrNeeds,kNeeds,olNeeds,sNeeds,cbNeeds,f7Needs);      resetStats();    }  }}  }
class C{  @Override public void undo(){  if (canUndo()) {    ((ArffSortedTableModel)m_TableArff.getModel()).undo();    notifyListener();  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public void start(){  Uri uri=Settings.Secure.getUriFor(Settings.Secure.ALLOWED_GEOLOCATION_ORIGINS);  mContext.getContentResolver().registerContentObserver(uri,false,mSettingObserver);  maybeApplySettingAsync();}  }
class C{  public boolean isTrustContainerAuth(){  return trustContainerAuth;}  }
class C{  OFSwitchHandshakeHandler(@Nonnull IOFConnectionBackend connection,@Nonnull OFFeaturesReply featuresReply,@Nonnull IOFSwitchManager switchManager,@Nonnull RoleManager roleManager,@Nonnull Timer timer){  Preconditions.checkNotNull(connection,"connection");  Preconditions.checkNotNull(featuresReply,"featuresReply");  Preconditions.checkNotNull(switchManager,"switchManager");  Preconditions.checkNotNull(roleManager,"roleManager");  Preconditions.checkNotNull(timer,"timer");  Preconditions.checkArgument(connection.getAuxId().equals(OFAuxId.MAIN),"connection must be MAIN connection but is %s",connection);  this.switchManager=switchManager;  this.roleManager=roleManager;  this.mainConnection=connection;  this.auxConnections=new ConcurrentHashMap<OFAuxId,IOFConnectionBackend>();  this.featuresReply=featuresReply;  this.timer=timer;  this.switchManagerCounters=switchManager.getCounters();  this.factory=OFFactories.getFactory(featuresReply.getVersion());  this.roleChanger=new RoleChanger(DEFAULT_ROLE_TIMEOUT_NS);  setState(new InitState());  this.pendingPortStatusMsg=new ArrayList<OFPortStatus>();  connection.setListener(this);}  }
class C{  private static void testJcmdDefaults(String... jcmdArgs) throws Exception {  OutputAnalyzer output=JcmdBase.jcmdNoPid(VM_ARGS,jcmdArgs);  output.shouldHaveExitValue(0);  output.shouldContain("sun.tools.jcmd.JCmd");  matchListedProcesses(output);}  }
class C{  @Override public void load(IocLoader loader){  loader.load(this);}  }
class C{  private static int calculateAttributeSizeInBytes(AttributeValue value){  int attrValSize=0;  if (value == null) {    return attrValSize;  }  if (value.getB() != null) {    ByteBuffer b=value.getB();    attrValSize+=b.remaining();  } else   if (value.getS() != null) {    String s=value.getS();    attrValSize+=s.getBytes(BootstrapConstants.UTF8).length;  } else   if (value.getN() != null) {    attrValSize+=BootstrapConstants.MAX_NUMBER_OF_BYTES_FOR_NUMBER;  } else   if (value.getBS() != null) {    List<ByteBuffer> bs=value.getBS();    for (    ByteBuffer b : bs) {      if (b != null) {        attrValSize+=b.remaining();      }    }  } else   if (value.getSS() != null) {    List<String> ss=value.getSS();    for (    String s : ss) {      if (s != null) {        attrValSize+=s.getBytes(BootstrapConstants.UTF8).length;      }    }  } else   if (value.getNS() != null) {    List<String> ns=value.getNS();    for (    String n : ns) {      if (n != null) {        attrValSize+=BootstrapConstants.MAX_NUMBER_OF_BYTES_FOR_NUMBER;      }    }  } else   if (value.getBOOL() != null) {    attrValSize+=1;  } else   if (value.getNULL() != null) {    attrValSize+=1;  } else   if (value.getM() != null) {    for (    Map.Entry<String,AttributeValue> entry : value.getM().entrySet()) {      attrValSize+=entry.getKey().getBytes(BootstrapConstants.UTF8).length;      attrValSize+=calculateAttributeSizeInBytes(entry.getValue());      attrValSize+=BootstrapConstants.BASE_LOGICAL_SIZE_OF_NESTED_TYPES;    }    attrValSize+=BootstrapConstants.LOGICAL_SIZE_OF_EMPTY_DOCUMENT;  } else   if (value.getL() != null) {    List<AttributeValue> list=value.getL();    for (Integer i=0; i < list.size(); i++) {      attrValSize+=calculateAttributeSizeInBytes(list.get(i));      attrValSize+=BootstrapConstants.BASE_LOGICAL_SIZE_OF_NESTED_TYPES;    }    attrValSize+=BootstrapConstants.LOGICAL_SIZE_OF_EMPTY_DOCUMENT;  }  return attrValSize;}  }
class C{  public String auth(final String password){  checkIsInMulti();  client.auth(password);  return client.getStatusCodeReply();}  }
class C{  protected static UpdateStatement produce(CharSequence table,CharSequence clause){  UpdateStatement updateStmt=new UpdateStatement();  updateStmt.statement.append("UPDATE");  if (clause != null)   updateStmt.statement.append(" OR ").append(clause);  updateStmt.statement.append(' ').append(table).append(" SET");  return updateStmt;}  }
class C{  Map<String,Set<String>> findClassesDeps(Map<String,ClassReader> zipClasses){  Map<String,Set<String>> dependencyMap=new TreeMap<String,Set<String>>();  DependencyVisitor visitor=getVisitor();  int count=0;  try {    for (    Entry<String,ClassReader> entry : zipClasses.entrySet()) {      String name=entry.getKey();      TreeSet<String> set=new TreeSet<String>();      dependencyMap.put(name,set);      visitor.setDependencySet(set);      ClassReader cr=entry.getValue();      cr.accept(visitor,0);      visitor.setDependencySet(null);      mLog.debugNoln("Visited %d classes\r",++count);    }  }  finally {    mLog.debugNoln("\n");  }  return dependencyMap;}  }
class C{  public void register(Injector injector){  EPackage.Registry.INSTANCE.put(N4JSPackage.eINSTANCE.getNsURI(),N4JSPackage.eINSTANCE);  EPackage.Registry.INSTANCE.put(TypeRefsPackage.eINSTANCE.getNsURI(),TypeRefsPackage.eINSTANCE);  EPackage.Registry.INSTANCE.put(TypesPackage.eINSTANCE.getNsURI(),TypesPackage.eINSTANCE);  EPackage.Registry.INSTANCE.put(N4mfPackage.eINSTANCE.getNsURI(),N4mfPackage.eINSTANCE);  EPackage.Registry.INSTANCE.put(XMLTypePackage.eINSTANCE.getNsURI(),XMLTypePackage.eINSTANCE);  org.eclipse.xtext.resource.IResourceFactory resourceFactory=injector.getInstance(org.eclipse.xtext.resource.IResourceFactory.class);  org.eclipse.xtext.resource.IResourceServiceProvider serviceProvider=injector.getInstance(org.eclipse.xtext.resource.IResourceServiceProvider.class);  Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("n4js",resourceFactory);  org.eclipse.xtext.resource.IResourceServiceProvider.Registry.INSTANCE.getExtensionToFactoryMap().put("n4js",serviceProvider);  Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("js",resourceFactory);  org.eclipse.xtext.resource.IResourceServiceProvider.Registry.INSTANCE.getExtensionToFactoryMap().put("js",serviceProvider);  Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("n4jsd",resourceFactory);  org.eclipse.xtext.resource.IResourceServiceProvider.Registry.INSTANCE.getExtensionToFactoryMap().put("n4jsd",serviceProvider);}  }
class C{  protected boolean right(Vector2 a,Vector2 b,Vector2 p){  return Segment.getLocation(p,a,b) < 0;}  }
class C{  public byte[] encodeAsBytes(String transport){  byte[] slbytes=null;  if (statusLine != null) {    try {      slbytes=statusLine.encode().getBytes("UTF-8");    } catch (    UnsupportedEncodingException ex) {      InternalErrorHandler.handleException(ex);    }  }  byte[] superbytes=super.encodeAsBytes(transport);  byte[] retval=new byte[slbytes.length + superbytes.length];  System.arraycopy(slbytes,0,retval,0,slbytes.length);  System.arraycopy(superbytes,0,retval,slbytes.length,superbytes.length);  return retval;}  }
class C{  public EnvelopeWithGrid(double x1,double x2,double y1,double y2,int grid){  super(x1,x2,y1,y2);  this.grid=grid;}  }
class C{  public static JavaUnicodeEscaper above(final int codepoint){  return outsideOf(0,codepoint);}  }
class C{  private boolean mapCerts(ArrayList<AliasInfo> matchedCerts,HashMap<String,HashSet<AliasInfo>> certMap) throws PKCS11Exception, CertificateException {  for (  AliasInfo aliasInfo : matchedCerts) {    Session session=null;    try {      session=token.getOpSession();      aliasInfo.chain=loadChain(session,aliasInfo.cert);    }  finally {      token.releaseSession(session);    }  }  boolean sharedLabel=false;  Set<String> certLabels=certMap.keySet();  for (  String certLabel : certLabels) {    HashSet<AliasInfo> infoSet=certMap.get(certLabel);    for (    AliasInfo aliasInfo : infoSet) {      if (aliasInfo.matched == true) {        aliasInfo.trusted=false;        continue;      }      if (CKA_TRUSTED_SUPPORTED) {        if (aliasInfo.trusted) {          if (mapTrustedCert(certLabel,aliasInfo,infoSet) == true) {            sharedLabel=true;          }        }        continue;      }    }  }  return sharedLabel;}  }
class C{  public static String checkNotEmpty(String string){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && TextUtils.isEmpty(string)) {    throw new IllegalArgumentException();  }  return string;}  }
class C{  public void testUnConfigWar() throws Exception {  WAR war=createWar();  testConfigWar();  deployer.removeDeployableFromDomain(war,domain);  String xml=this.xmlUtil.toString(domain);  XMLAssert.assertXpathNotExists("//weblogic:app-deployment[contains(weblogic:name,'cargo')]",xml);  XMLAssert.assertXpathNotExists("//weblogic:app-deployment[contains(weblogic:source-path,'" + deployer.getAbsolutePath(war) + "')]",xml);}  }
class C{  public static SdfId readMutationMap(File baseDir) throws IOException {  final SdfId[] mappings=readMappingFile(new File(baseDir,MUTATION_MAP_FILE));  return mappings == null ? null : mappings[0];}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int idx1=-1;  idx1=getInt(stack);  Object obj=stack.pop();  String s=(obj == null) ? "" : obj.toString();  return s.substring(0,s.length() - idx1);}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  DistinctCountAggregatorObjectSet distinctCountAggregator=(DistinctCountAggregatorObjectSet)aggregator;  agg(distinctCountAggregator.valueSetForObj);}  }
class C{  private static int clearBrandingResourceMapCache(ContentResolver cr,long providerId){  StringBuilder where=new StringBuilder();  where.append(Imps.BrandingResourceMapCache.PROVIDER_ID);  where.append('=');  where.append(providerId);  return cr.delete(Imps.BrandingResourceMapCache.CONTENT_URI,where.toString(),null);}  }
class C{  public static void bootstrap() throws Exception {  if (signingKey == null || ks == null) {    ks=KeyStore.getInstance(KeyStore.getDefaultType());    ks.load(TestUtils.class.getResourceAsStream("/sts-store.jks"),stsKeystorePassword);    Key key=ks.getKey(stsAlias,stsKeystorePassword);    signingKey=(PrivateKey)key;    signingCertificate=(X509Certificate)ks.getCertificate(stsAlias);  }}  }
class C{  public static String fmt(double v){  return v == Double.MAX_VALUE ? null : FMT2.format(v);}  }
class C{  private void initialize(){  this.setLayout(new BorderLayout());  this.fieldsPanel=new DynamicFieldsPanel(credentials.paramNames);  this.fieldsPanel.bindFieldValues(this.credentials.paramValues);  this.add(fieldsPanel,BorderLayout.CENTER);}  }
class C{  public static Validator<CharSequence> notEmpty(@NonNull final Context context){  return new NotEmptyValidator(context,R.string.default_error_message);}  }
class C{  public void finalizeNetworkConstruction(){  Set<MotifLink> keySet=nodeSetsDepartingFromLink.keySet();  nodesWithLink=new HashMap<MotifLink,ArrayList<Node>>(keySet.size());  for (  MotifLink motifLink : keySet) {    Set<Node> nodes=nodeSetsDepartingFromLink.get(motifLink);    ArrayList<Node> n=new ArrayList<Node>(nodes);    Collections.sort(n);    nodesWithLink.put(motifLink,n);  }  nodeSetsDepartingFromLink=null;}  }
class C{  @Override public Joiner join(Class<? extends DataObject> clazz,String alias,Collection filter){  return new Joiner(getDbClient()).join(clazz,alias,filter);}  }
class C{  private boolean isGeoDbsvc(){  return _schemaUtil.isGeoDbsvc();}  }
class C{  private byte[] v5Decrypt(final byte[] rawValue,final byte[] key) throws PdfSecurityException {  return decryptionMethods.v5Decrypt(rawValue,key);}  }
class C{  public void addColumnModelListener(TableColumnModelListener x){  listenerList.add(TableColumnModelListener.class,x);}  }
class C{  protected boolean validatePendingRemove(Object targetChild){  return true;}  }
class C{  public void flush(){  mmbBuf.flush();}  }
class C{  public <T>String toJson(List<T> array){  StringBuilder sb=new StringBuilder("[");  for (int i=0; i < array.size(); i++) {    T dto=array.get(i);    if (dto instanceof JsonSerializable) {      if (i > 0) {        sb.append(", ");      }      sb.append(((JsonSerializable)dto).toJson());    } else {      throw new IllegalArgumentException("JsonSerializable instance required. ");    }  }  sb.append("]");  return sb.toString();}  }
class C{  public boolean isVisible(){  return isVisible;}  }
class C{  @TargetApi(VERSION_CODES.LOLLIPOP) public static void reveal(final View view,int cx,int cy){  if (!hasLollipop()) {    view.setVisibility(View.VISIBLE);    return;  }  int finalRadius=Math.max(view.getWidth(),view.getHeight());  Animator animator=ViewAnimationUtils.createCircularReveal(view,cx,cy,0,finalRadius);  view.setVisibility(View.VISIBLE);  animator.start();}  }
class C{  static boolean moveFile(@NonNull final File source,@NonNull final File target){  if (source.renameTo(target)) {    return true;  }  boolean success=copyFile(source,target);  if (success) {    success=deleteFile(source);  }  return success;}  }
class C{  public ServiceSchemeException(String message){  super(message);}  }
class C{  public static void addChemicalInfuserRecipe(GasStack leftInput,GasStack rightInput,GasStack output){  addRecipe(Recipe.CHEMICAL_INFUSER,new ChemicalInfuserRecipe(leftInput,rightInput,output));}  }
class C{  public Request<List<RunnerStatus>> processes(ProjectReference projectReference){  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("processes").queryParam("project",projectReference.name()).request().accept(APPLICATION_JSON).buildGet();  Type collectionType=new TypeToken<List<DefaultRunnerStatus>>(){  }.getType();  return new SimpleRequest<>(request,new GenericType<List<RunnerStatus>>(collectionType){  },getAuthenticationManager());}  }
class C{  public final float[] intoArray(){  float[] m=new float[16];  m[0]=this.m00;  m[1]=this.m01;  m[2]=this.m02;  m[3]=this.m03;  m[4]=this.m10;  m[5]=this.m11;  m[6]=this.m12;  m[7]=this.m13;  m[8]=this.m20;  m[9]=this.m21;  m[10]=this.m22;  m[11]=this.m23;  m[12]=this.m30;  m[13]=this.m31;  m[14]=this.m32;  m[15]=this.m33;  return m;}  }
class C{  @Override public boolean isCheckable(){  return true;}  }
class C{  public boolean isReadWrite(){  return m_readWrite;}  }
class C{  public int hashCode(){  return (((x & 0x0000FFFF)) | ((y & 0x0000FFFF) << 16));}  }
class C{  private void initSimple() throws IOException {  pq.clear();  for (  PhrasePositions pp : phrasePositions) {    pp.firstPosition();    if (pp.position > end) {      end=pp.position;    }    pq.add(pp);  }}  }
class C{  public static double floor(double x){  long y;  if (x != x) {    return x;  }  if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {    return x;  }  y=(long)x;  if (x < 0 && y != x) {    y--;  }  if (y == 0) {    return x * y;  }  return y;}  }
class C{  static GeoPolygon fromLargePolygon(final Polygon... polygons){  if (polygons.length < 1) {    throw new IllegalArgumentException("need at least one polygon");  }  return GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.WGS84,convertToDescription(polygons));}  }
class C{  public static String s8(long v){  char[] result=new char[17];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 16; i++) {    result[16 - i]=Character.forDigit((int)v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public static List createList(Object[] array,Predicate predicate){  List list=new ArrayList();  if (array != null)   for (int i=0; i < array.length; i++) {    Object object=array[i];    if (predicate.evaluate(object))     list.add(object);  }  return list;}  }
class C{  private float checkValid(final float val){  float tempval=val;  if (val > 1) {    tempval=1;  }  if (val < 0) {    tempval=0;  }  return tempval;}  }
class C{  @Override public void onGenericMessage(final GenericMessageEvent event) throws Exception {  if (event.getMessage().startsWith("?hello"))   event.respond("Hello World!");  if (!event.getMessage().startsWith("?waitTest start"))   return;  event.respond("Started...");  WaitForQueue queue=new WaitForQueue(event.getBot());  while (true) {    MessageEvent currentEvent=queue.waitFor(MessageEvent.class);    if (currentEvent.getMessage().startsWith("?waitTest ping"))     event.respond("pong"); else     if (currentEvent.getMessage().startsWith("?waitTest end")) {      event.respond("Stopping");      queue.close();      return;    }  }}  }
class C{  @NonNull public static <T>T checkNotNull(T value,@NonNull String errorMessage){  if (value == null) {    throw new NullPointerException(errorMessage);  }  return value;}  }
class C{  protected void append(Node newNode) throws org.xml.sax.SAXException {  Node currentNode=m_currentNode;  if (null != currentNode) {    if (currentNode == m_root && m_nextSibling != null)     currentNode.insertBefore(newNode,m_nextSibling); else     currentNode.appendChild(newNode);  } else   if (null != m_docFrag) {    if (m_nextSibling != null)     m_docFrag.insertBefore(newNode,m_nextSibling); else     m_docFrag.appendChild(newNode);  } else {    boolean ok=true;    short type=newNode.getNodeType();    if (type == Node.TEXT_NODE) {      String data=newNode.getNodeValue();      if ((null != data) && (data.trim().length() > 0)) {        throw new org.xml.sax.SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANT_OUTPUT_TEXT_BEFORE_DOC,null));      }      ok=false;    } else     if (type == Node.ELEMENT_NODE) {      if (m_doc.getDocumentElement() != null) {        ok=false;        throw new org.xml.sax.SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANT_HAVE_MORE_THAN_ONE_ROOT,null));      }    }    if (ok) {      if (m_nextSibling != null)       m_doc.insertBefore(newNode,m_nextSibling); else       m_doc.appendChild(newNode);    }  }}  }
class C{  public X509CertificateHolder(byte[] certEncoding) throws IOException {  this(parseBytes(certEncoding));}  }
class C{  private void startTask(int AD_Task_ID){  SwingUtilities.invokeLater(m_updatePB);  MTask task=null;  if (AD_Task_ID > 0)   task=new MTask(Env.getCtx(),AD_Task_ID,null);  if (task.get_ID() != AD_Task_ID)   task=null;  if (task == null)   return;  SwingUtilities.invokeLater(m_updatePB);  m_menu.getWindowManager().add(new ATask(m_name,task));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static long valueAsLong(String key,long defaultVal){  String val=valueFor(key);  if (val == null) {    return defaultVal;  }  long lval;  try {    lval=Long.valueOf(val).longValue();  } catch (  NumberFormatException nex) {    XRLog.exception("Property '" + key + "' was requested as a long, but "+ "value of '"+ val+ "' is not a long. Check configuration.");    lval=defaultVal;  }  return lval;}  }
class C{  private static Script scriptFromResource(String resourcePath,ScriptType scriptType){  InputStream inputStream=ScriptFactory.class.getResourceAsStream(resourcePath);  return scriptFromInputStream(inputStream,scriptType).setName(resourcePath);}  }
class C{  public Boolean isNpivTemporaryDisabled(){  return npivTemporaryDisabled;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardPieURLGenerator)) {    return false;  }  StandardPieURLGenerator that=(StandardPieURLGenerator)obj;  if (!this.prefix.equals(that.prefix)) {    return false;  }  if (!this.categoryParamName.equals(that.categoryParamName)) {    return false;  }  if (!ObjectUtilities.equal(this.indexParamName,that.indexParamName)) {    return false;  }  return true;}  }
class C{  public void writeChars(char[] chars,int off,int n) throws IOException {  int finOff=off + n;  while (off < finOff) {    int endOff=Math.min(finOff,off + this.buff.length - this.len);    while (off < endOff)     this.buff[this.len++]=(byte)chars[off++];    if (this.buff.length == this.len) {      this.out.write(this.buff,0,this.len);      this.len=0;    }  }}  }
class C{  public XhtmlDocument appendBody(String value){  body.addElement(value);  return (this);}  }
class C{  @Override public synchronized int hashCode(){  int hashCode=getID().hashCode() + rawOffset;  if (useDaylight) {    hashCode+=startYear + startMonth + startDay+ startDayOfWeek+ startTime+ startMode+ endMonth+ endDay+ endDayOfWeek+ endTime+ endMode+ dstSavings;  }  return hashCode;}  }
class C{  @Override public final void preTearDown() throws Exception {  client1.invoke(null);  server1.invoke(null);}  }
class C{  public FluentSupplier<R> partiallyApply(final T1 param1,final T2 param2,final T3 param3){  return new FluentSupplier<>(PartialApplicator.partial3(param1,param2,param3,fn));}  }
class C{  public void encode(String type,String data){  Intent intentEncode=new Intent(ENCODE_INTENT);  intentEncode.putExtra(ENCODE_TYPE,type);  intentEncode.putExtra(ENCODE_DATA,data);  intentEncode.setPackage(this.cordova.getActivity().getApplicationContext().getPackageName());  this.cordova.getActivity().startActivity(intentEncode);}  }
class C{  @Override public List<String> alarmTriggers(){  return TRIGGER_LIST;}  }
class C{  public static boolean isSamePackage(Class<?> class1,Class<?> class2){  assert (!class1.isArray() && !class2.isArray());  if (class1 == class2)   return true;  if (class1.getClassLoader() != class2.getClassLoader())   return false;  String name1=class1.getName(), name2=class2.getName();  int dot=name1.lastIndexOf('.');  if (dot != name2.lastIndexOf('.'))   return false;  for (int i=0; i < dot; i++) {    if (name1.charAt(i) != name2.charAt(i))     return false;  }  return true;}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public WaveAudioEssenceDescriptorBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,WaveAudioEssenceDescriptor.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.audio_sampling_rate == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,WaveAudioEssenceDescriptor.ERROR_DESCRIPTION_PREFIX + "audio_sampling_rate is null");  }  if (this.channelcount == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,WaveAudioEssenceDescriptor.ERROR_DESCRIPTION_PREFIX + "channelcount is null");  }  if (this.quantization_bits == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,WaveAudioEssenceDescriptor.ERROR_DESCRIPTION_PREFIX + "quantization_bits is null");  }  if (this.block_align == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,WaveAudioEssenceDescriptor.ERROR_DESCRIPTION_PREFIX + "block_align is null");  }}  }
class C{  public int nrOfTables(){  return superSection.nrOfTables();}  }
class C{  public InstanceNotAliveException(List<LocalizedText> messages){  super(messages);}  }
class C{  public static boolean isMacOSSnowLeopard(){  return osname.startsWith("Mac") && System.getProperty("os.version").compareTo("10.6") >= 0;}  }
class C{  public static SelectorProvider create(){  return new sun.nio.ch.WindowsSelectorProvider();}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> m){  int numKeysToBeAdded=m.size();  if (numKeysToBeAdded == 0)   return;  if (numKeysToBeAdded > threshold) {    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);    if (targetCapacity > MAXIMUM_CAPACITY)     targetCapacity=MAXIMUM_CAPACITY;    int newCapacity=table.length;    while (newCapacity < targetCapacity)     newCapacity<<=1;    if (newCapacity > table.length)     resize(newCapacity);  }  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  private static void thrash(int liveSize,int iterations){  WeakHashMap<Element,Integer> map=new WeakHashMap<Element,Integer>();  Element list=new Element(null);  Integer serial=Integer.valueOf(0);  for (int i=0; i < liveSize; i++) {    list=new Element(list);    map.put(list,serial++);  }  for (int j=0; j < iterations; j++) {    Element cursor=list;    int inserts=0;    while (cursor != null) {      cursor.deleteNext();      cursor=cursor.next;      list=new Element(list);      map.put(list,serial++);      inserts++;    }    if (verbose) {      System.out.println("Map size " + map.size() + ", list length "+ list.length());    }    report(inserts);  }}  }
class C{  public void execute() throws BuildException {  if (templatePath == null && useClasspath == false) {    throw new BuildException("The template path needs to be defined if you are not using " + "the classpath for locating templates!");  }  if (controlTemplate == null) {    throw new BuildException("The control template needs to be defined!");  }  if (outputDirectory == null) {    throw new BuildException("The output directory needs to be defined!");  }  if (outputFile == null) {    throw new BuildException("The output file needs to be defined!");  }  VelocityEngine ve=new VelocityEngine();  try {    if (templatePath != null) {      log("Using templatePath: " + templatePath,project.MSG_VERBOSE);      ve.setProperty(ve.FILE_RESOURCE_LOADER_PATH,templatePath);    }    if (useClasspath) {      log("Using classpath");      ve.addProperty(VelocityEngine.RESOURCE_LOADER,"classpath");      ve.setProperty("classpath." + VelocityEngine.RESOURCE_LOADER + ".class","org.apache.flex.forks.velocity.runtime.resource.loader.ClasspathResourceLoader");      ve.setProperty("classpath." + VelocityEngine.RESOURCE_LOADER + ".cache","false");      ve.setProperty("classpath." + VelocityEngine.RESOURCE_LOADER + ".modificationCheckInterval","2");    }    ve.init();    Generator generator=Generator.getInstance();    generator.setVelocityEngine(ve);    generator.setOutputPath(outputDirectory);    generator.setInputEncoding(inputEncoding);    generator.setOutputEncoding(outputEncoding);    if (templatePath != null) {      generator.setTemplatePath(templatePath);    }    File file=new File(outputDirectory);    if (!file.exists()) {      file.mkdirs();    }    String path=outputDirectory + File.separator + outputFile;    log("Generating to file " + path,project.MSG_INFO);    Writer writer=generator.getWriter(path,outputEncoding);    Context c=initControlContext();    populateInitialContext(c);    if (contextProperties != null) {      Iterator i=contextProperties.getKeys();      while (i.hasNext()) {        String property=(String)i.next();        String value=contextProperties.getString(property);        try {          c.put(property,new Integer(value));        } catch (        NumberFormatException nfe) {          String booleanString=contextProperties.testBoolean(value);          if (booleanString != null) {            c.put(property,new Boolean(booleanString));          } else {            if (property.endsWith("file.contents")) {              value=StringUtils.fileContentsToString(project.resolveFile(value).getCanonicalPath());              property=property.substring(0,property.indexOf("file.contents") - 1);            }            c.put(property,value);          }        }      }    }    writer.write(generator.parse(controlTemplate,c));    writer.flush();    writer.close();    generator.shutdown();    cleanup();  } catch (  BuildException e) {    throw e;  }catch (  MethodInvocationException e) {    throw new BuildException("Exception thrown by '" + e.getReferenceName() + "."+ e.getMethodName()+ "'"+ ERR_MSG_FRAGMENT,e.getWrappedThrowable());  }catch (  ParseErrorException e) {    throw new BuildException("Velocity syntax error" + ERR_MSG_FRAGMENT,e);  }catch (  ResourceNotFoundException e) {    throw new BuildException("Resource not found" + ERR_MSG_FRAGMENT,e);  }catch (  Exception e) {    throw new BuildException("Generation failed" + ERR_MSG_FRAGMENT,e);  }}  }
class C{  private void removeSession(AbstractIoSession session){  sessions.remove(session);}  }
class C{  void removeFileUpload(String sessionId){  if (sLogger.isActivated()) {    sLogger.debug("Remove a file upload from the list (size=" + mFileUploadCache.size() + ")");  }  mFileUploadCache.remove(sessionId);}  }
class C{  public String sectionToString(int i){  if (i > 3)   return null;  StringBuffer sb=new StringBuffer();  Record[] records=getSectionArray(i);  for (int j=0; j < records.length; j++) {    Record rec=records[j];    if (i == Section.QUESTION) {      sb.append(";;\t" + rec.name);      sb.append(", type = " + Type.string(rec.type));      sb.append(", class = " + DClass.string(rec.dclass));    } else     sb.append(rec);    sb.append("\n");  }  return sb.toString();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.884 -0500",hash_original_method="A7C53B8C18974DA71D8345A9FB5FCA17",hash_generated_method="967AB50A93E41E01104A5FA8AA950BBA") public static void RGBToHSV(int red,int green,int blue,float hsv[]){  if (hsv.length < 3) {    throw new RuntimeException("3 components required for hsv");  }  nativeRGBToHSV(red,green,blue,hsv);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void handleEnumeratedAttribute(Instances trainInstances) throws Exception {  m_c45S=new C45Split(m_attIndex,2,m_sumOfWeights,true);  m_c45S.buildClassifier(trainInstances);  if (m_c45S.numSubsets() == 0) {    return;  }  m_errors=0;  Instance instance;  Instances[] trainingSets=new Instances[m_complexityIndex];  for (int i=0; i < m_complexityIndex; i++) {    trainingSets[i]=new Instances(trainInstances,0);  }  int subset;  for (int i=0; i < trainInstances.numInstances(); i++) {    instance=trainInstances.instance(i);    subset=m_c45S.whichSubset(instance);    if (subset > -1) {      trainingSets[subset].add((Instance)instance.copy());    } else {      double[] weights=m_c45S.weights(instance);      for (int j=0; j < m_complexityIndex; j++) {        try {          Instance temp=(Instance)instance.copy();          if (weights.length == m_complexityIndex) {            temp.setWeight(temp.weight() * weights[j]);          } else {            temp.setWeight(temp.weight() / m_complexityIndex);          }          trainingSets[j].add(temp);        } catch (        Exception ex) {          ex.printStackTrace();          System.err.println("*** " + m_complexityIndex);          System.err.println(weights.length);          System.exit(1);        }      }    }  }  Random r=new Random(1);  int minNumCount=0;  for (int i=0; i < m_complexityIndex; i++) {    if (trainingSets[i].numInstances() >= 5) {      minNumCount++;      Discretize disc=new Discretize();      disc.setInputFormat(trainingSets[i]);      trainingSets[i]=Filter.useFilter(trainingSets[i],disc);      trainingSets[i].randomize(r);      trainingSets[i].stratify(5);      NaiveBayesUpdateable fullModel=new NaiveBayesUpdateable();      fullModel.buildClassifier(trainingSets[i]);      m_errors+=NBTreeNoSplit.crossValidate(fullModel,trainingSets[i],r);    } else {      for (int j=0; j < trainingSets[i].numInstances(); j++) {        m_errors+=trainingSets[i].instance(j).weight();      }    }  }  if (minNumCount > 1) {    m_numSubsets=m_complexityIndex;  }}  }
class C{  public SwingTerminal(){  this(new TerminalScrollController.Null());}  }
class C{  private float[] createDescriptor(float[] c,int o,float octave_sigma,float orientation){  FloatArray2DScaleOctave octave=octaves[o];  FloatArray2D[] gradients=octave.getL1(Math.round(c[2]));  FloatArray2D[] region=new FloatArray2D[2];  region[0]=new FloatArray2D(FEATURE_DESCRIPTOR_WIDTH,FEATURE_DESCRIPTOR_WIDTH);  region[1]=new FloatArray2D(FEATURE_DESCRIPTOR_WIDTH,FEATURE_DESCRIPTOR_WIDTH);  float cos_o=(float)Math.cos(orientation);  float sin_o=(float)Math.sin(orientation);  for (int y=FEATURE_DESCRIPTOR_WIDTH - 1; y >= 0; --y) {    float ys=((float)y - 2.0f * (float)FEATURE_DESCRIPTOR_SIZE + 0.5f) * octave_sigma;    for (int x=FEATURE_DESCRIPTOR_WIDTH - 1; x >= 0; --x) {      float xs=((float)x - 2.0f * (float)FEATURE_DESCRIPTOR_SIZE + 0.5f) * octave_sigma;      float yr=cos_o * ys + sin_o * xs;      float xr=cos_o * xs - sin_o * ys;      int yg=Filter.flipInRange((int)(Math.round(yr + c[1])),gradients[0].height);      int xg=Filter.flipInRange((int)(Math.round(xr + c[0])),gradients[0].width);      int region_p=FEATURE_DESCRIPTOR_WIDTH * y + x;      int gradient_p=gradients[0].width * yg + xg;      region[0].data[region_p]=gradients[0].data[gradient_p] * descriptorMask[y][x];      region[1].data[region_p]=gradients[1].data[gradient_p] - orientation;    }  }  float[][][] hist=new float[FEATURE_DESCRIPTOR_SIZE][FEATURE_DESCRIPTOR_SIZE][FEATURE_DESCRIPTOR_ORIENTATION_BINS];  for (int y=FEATURE_DESCRIPTOR_SIZE - 1; y >= 0; --y) {    int yp=FEATURE_DESCRIPTOR_SIZE * 16 * y;    for (int x=FEATURE_DESCRIPTOR_SIZE - 1; x >= 0; --x) {      int xp=4 * x;      for (int ysr=3; ysr >= 0; --ysr) {        int ysrp=4 * FEATURE_DESCRIPTOR_SIZE * ysr;        for (int xsr=3; xsr >= 0; --xsr) {          float bin_location=(region[1].data[yp + xp + ysrp+ xsr] + (float)Math.PI) / (float)FEATURE_DESCRIPTOR_ORIENTATION_BIN_SIZE;          int bin_b=(int)(bin_location);          int bin_t=bin_b + 1;          float d=bin_location - (float)bin_b;          bin_b=(bin_b + 2 * FEATURE_DESCRIPTOR_ORIENTATION_BINS) % FEATURE_DESCRIPTOR_ORIENTATION_BINS;          bin_t=(bin_t + 2 * FEATURE_DESCRIPTOR_ORIENTATION_BINS) % FEATURE_DESCRIPTOR_ORIENTATION_BINS;          float t=region[0].data[yp + xp + ysrp+ xsr];          hist[y][x][bin_b]+=t * (1 - d);          hist[y][x][bin_t]+=t * d;        }      }    }  }  float[] desc=new float[FEATURE_DESCRIPTOR_SIZE * FEATURE_DESCRIPTOR_SIZE * FEATURE_DESCRIPTOR_ORIENTATION_BINS];  float max_bin_val=0;  int i=0;  for (int y=FEATURE_DESCRIPTOR_SIZE - 1; y >= 0; --y) {    for (int x=FEATURE_DESCRIPTOR_SIZE - 1; x >= 0; --x) {      for (int b=FEATURE_DESCRIPTOR_ORIENTATION_BINS - 1; b >= 0; --b) {        desc[i]=hist[y][x][b];        if (desc[i] > max_bin_val)         max_bin_val=desc[i];        ++i;      }    }  }  max_bin_val/=0.2;  for (i=0; i < desc.length; ++i) {    desc[i]=(float)Math.min(1.0,desc[i] / max_bin_val);  }  return desc;}  }
class C{  public Object clone() throws CloneNotSupportedException {  return (ObjectStack)super.clone();}  }
class C{  public Hex(final String charsetName){  this(Charset.forName(charsetName));}  }
class C{  public void add(VisualizationTask task){  tasks.add(task);}  }
class C{  final public int DirectiveArg() throws ParseException {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case IDENTIFIER:case LCURLY:    Reference();{    if (true)     return ParserTreeConstants.JJTREFERENCE;  }break;case WORD:Word();{if (true) return ParserTreeConstants.JJTWORD;}break;case STRING_LITERAL:StringLiteral();{if (true) return ParserTreeConstants.JJTSTRINGLITERAL;}break;case NUMBER_LITERAL:NumberLiteral();{if (true) return ParserTreeConstants.JJTNUMBERLITERAL;}break;default :jj_la1[4]=jj_gen;if (jj_2_3(2147483647)) {IntegerRange();{if (true) return ParserTreeConstants.JJTINTEGERRANGE;}} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LBRACKET:ObjectArray();{if (true) return ParserTreeConstants.JJTOBJECTARRAY;}break;case TRUE:True();{if (true) return ParserTreeConstants.JJTTRUE;}break;case FALSE:False();{if (true) return ParserTreeConstants.JJTFALSE;}break;default :jj_la1[5]=jj_gen;jj_consume_token(-1);throw new ParseException();}}}throw new Error("Missing return statement in function");}  }
class C{  @Override public List<QualifiedName> search(String tag,String sourceName,String databaseName,String tableName){  Connection connection=DBUtil.getReadConnection(getDataSource());  try {    String wildCardName=QualifiedName.toWildCardString(sourceName,databaseName,tableName);    String query=String.format(QUERY_SEARCH,"like ?");    Object[] params={tag == null ? 1 : 0,tag + "%",wildCardName == null ? 1 : 0,wildCardName};    return new QueryRunner().query(connection,query,new ColumnListHandler<>("name"),params);  } catch (  SQLException e) {    String message=String.format("Failed getting the list of qualified names for tag %s",tag);    log.error(message,e);    throw new UserMetadataServiceException(message,e);  } finally {    DBUtil.closeReadConnection(connection);  }}  }
class C{  private void createCrf(OverflowOplog previous) throws IOException {  File f=new File(this.diskFile.getPath() + CRF_FILE_EXT);  if (logger.isDebugEnabled()) {    logger.debug("Creating operation log file {}",f);  }  this.crf.f=f;  this.crf.raf=new RandomAccessFile(f,"rw");  this.crf.writeBuf=allocateWriteBuf(previous);  this.bbArray[0]=this.crf.writeBuf;  preblow();  logger.info(LocalizedMessage.create(LocalizedStrings.Oplog_CREATE_0_1_2,new Object[]{toString(),"crf",this.parent.getName()}));  this.crf.channel=this.crf.raf.getChannel();  this.stats.incOpenOplogs();}  }
class C{  @Override public Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  this.tag=tag;  this.settings=new Settings();  return settings;}  }
class C{  @Override @SuppressWarnings({"unchecked","rawtypes"}) public ODataResponse readEntityLinks(GetEntitySetLinksUriInfo uri_info,String content_type) throws ODataException {  ODataResponse rsp=null;  List<Map<String,Object>> building=new ArrayList<Map<String,Object>>();  EdmEntitySet targetES=uri_info.getTargetEntitySet();  KeyPredicate startKP=(uri_info.getKeyPredicates().size() == 0) ? null : uri_info.getKeyPredicates().get(0);  boolean doPagination=false;  if (targetES.getName().equals(V1Model.PRODUCT.getName()) || targetES.getName().equals(V1Model.COLLECTION.getName())) {    doPagination=true;  } else   if (!targetES.getName().equals(V1Model.NODE.getName()) && !targetES.getName().equals(V1Model.ATTRIBUTE.getName()) && !targetES.getName().equals(V1Model.CLASS.getName())) {    throw new ODataException("Target EntitySet not allowed.");  }  Navigator<Map> navigator=new Navigator<Map>(uri_info.getStartEntitySet(),startKP,uri_info.getNavigationSegments(),Map.class);  Map results=navigator.navigate();  int maxrows=configurationManager.getOdataConfiguration().getMaxRows();  int skip=(uri_info.getSkip() == null) ? 0 : uri_info.getSkip();  int top=(uri_info.getTop() == null) ? maxrows : uri_info.getTop();  FilterExpression filter=uri_info.getFilter();  if (results instanceof SubMap && (filter != null || skip != 0 || top != 0)) {    SubMapBuilder smb=((SubMap)results).getSubMapBuilder();    smb.setFilter(filter);    smb.setSkip(skip);    smb.setTop(top);    results=smb.build();  }  Iterator<V1Entity> it=results.values().iterator();  int i;  for (i=0; it.hasNext(); i++) {    building.add(it.next().toEntityResponse(makeLink().toString()));  }  if (it instanceof Closeable) {    try {      ((Closeable)it).close();    } catch (    IOException e) {      logger.warn("Cannot close iterator:",e);    }  }  ODataEntityProviderPropertiesBuilder builder=EntityProviderWriteProperties.serviceRoot(makeLink());  if (doPagination && i == top && it.hasNext()) {    i+=skip;    builder.nextLink(makeNextLink(i));  }  rsp=EntityProvider.writeLinks(content_type,targetES,building,builder.build());  return rsp;}  }
class C{  public Arg(){  m_qname=new QName("");  ;  m_val=null;  m_expression=null;  m_isVisible=true;  m_isFromWithParam=false;}  }
class C{  public final int indexOf(int elem,int index){  for (int i=index; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public static String dnaToProtein(final String dna){  final byte[] dnaBytes=new byte[dna.length()];  for (int i=0; i < dna.length(); i++) {    final byte b;switch (dna.charAt(i)) {case 'a':case 'A':      b=(byte)DNA.A.ordinal();    break;case 'C':case 'c':  b=(byte)DNA.C.ordinal();break;case 'G':case 'g':b=(byte)DNA.G.ordinal();break;case 'T':case 't':case 'U':case 'u':b=(byte)DNA.T.ordinal();break;default :b=(byte)DNA.N.ordinal();break;}dnaBytes[i]=b;}final StringBuilder ret=new StringBuilder();for (int i=0; i + 2 < dnaBytes.length; i+=3) {ret.append(Protein.values()[TranslatedFrame.codonToAmino(dnaBytes[i],dnaBytes[i + 1],dnaBytes[i + 2])].toString());}return ret.toString();}  }
class C{  public static int checkSum(int dice1,int dice2){  int sum=dice1 + dice2;switch (sum) {case 2:case 3:case 12:    return 0;case 7:case 11:  return 1;}return sum;}  }
class C{  public void testSuspend_UnregistersFromEventBus(){  mController.init();  mController.suspend();  assertEquals(0,mFakeEventBus.countRegisteredReceivers());}  }
class C{  public void send(XmppMsg msg,String to){  if (sXmppMgr != null) {    sXmppMgr.send(msg,to);  } else {    Log.w("MainService send XmppMsg: _xmppMgr == null");  }}  }
class C{  public void testForcedBlockCommit() throws Exception {  ArrayList<ReplDBMSEvent> events=new ArrayList<ReplDBMSEvent>();  for (int seqno=0; seqno < 10; seqno++) {    ReplDBMSEvent event=helper.createEvent(seqno,"db01");    event.getDBMSEvent().setMetaDataOption(ReplOptionParams.FORCE_COMMIT,"true");    events.add(event);  }  checkBlockCommitSemantics(events,BlockCommitPolicy.lax,false,null);  checkBlockCommitSemantics(events,BlockCommitPolicy.strict,false,null);}  }
class C{  public static void processResponse(TimeInfo info){  NtpV3Packet message=info.getMessage();  int stratum=message.getStratum();  String refType;  if (stratum <= 0)   refType="(Unspecified or Unavailable)"; else   if (stratum == 1)   refType="(Primary Reference; e.g., GPS)"; else   refType="(Secondary Reference; e.g. via NTP or SNTP)";  logger.debug(" Stratum: " + stratum + " "+ refType);  int version=message.getVersion();  int li=message.getLeapIndicator();  logger.debug(" leap=" + li + ", version="+ version+ ", precision="+ message.getPrecision());  logger.debug(" mode: " + message.getModeName() + " ("+ message.getMode()+ ")");  int poll=message.getPoll();  logger.debug(" poll: " + (poll <= 0 ? 1 : (int)Math.pow(2,poll)) + " seconds"+ " (2 ** "+ poll+ ")");  double disp=message.getRootDispersionInMillisDouble();  logger.debug(" rootdelay=" + numberFormat.format(message.getRootDelayInMillisDouble()) + ", rootdispersion(ms): "+ numberFormat.format(disp));  int refId=message.getReferenceId();  String refAddr=NtpUtils.getHostAddress(refId);  String refName=null;  if (refId != 0) {    if (refAddr.equals("127.127.1.0")) {      refName="LOCAL";    } else     if (stratum >= 2) {      if (!refAddr.startsWith("127.127")) {        try {          InetAddress addr=InetAddress.getByName(refAddr);          String name=addr.getHostName();          if (name != null && !name.equals(refAddr))           refName=name;        } catch (        UnknownHostException e) {          refName=NtpUtils.getReferenceClock(message);        }      }    } else     if (version >= 3 && (stratum == 0 || stratum == 1)) {      refName=NtpUtils.getReferenceClock(message);    }  }  if (refName != null && refName.length() > 1)   refAddr+=" (" + refName + ")";  logger.debug(" Reference Identifier:\t" + refAddr);  TimeStamp refNtpTime=message.getReferenceTimeStamp();  logger.debug(" Reference Timestamp:\t" + refNtpTime + "  "+ refNtpTime.toDateString());  TimeStamp origNtpTime=message.getOriginateTimeStamp();  logger.debug(" Originate Timestamp:\t" + origNtpTime + "  "+ origNtpTime.toDateString());  long destTime=info.getReturnTime();  TimeStamp rcvNtpTime=message.getReceiveTimeStamp();  logger.debug(" Receive Timestamp:\t" + rcvNtpTime + "  "+ rcvNtpTime.toDateString());  TimeStamp xmitNtpTime=message.getTransmitTimeStamp();  logger.debug(" Transmit Timestamp:\t" + xmitNtpTime + "  "+ xmitNtpTime.toDateString());  TimeStamp destNtpTime=TimeStamp.getNtpTime(destTime);  logger.debug(" Destination Timestamp:\t" + destNtpTime + "  "+ destNtpTime.toDateString());  info.computeDetails();  Long offsetValue=info.getOffset();  Long delayValue=info.getDelay();  String delay=(delayValue == null) ? "N/A" : delayValue.toString();  String offset=(offsetValue == null) ? "N/A" : offsetValue.toString();  logger.debug(" Roundtrip delay(ms)=" + delay + ", clock offset(ms)="+ offset);}  }
class C{  public boolean bool(){  return false;}  }
class C{  @Override public boolean checkStatusPENDING(Server server) throws ServiceException {  logger.info("--CHECK SERVER STATUS PENDING--");  if (server.getStatus().name().equalsIgnoreCase("PENDING")) {    return true;  } else {    return false;  }}  }
class C{  private View fillFromTop(int nextTop){  mFirstPosition=Math.min(mFirstPosition,-1);  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  return fillDown(mFirstPosition,nextTop);}  }
class C{  public void start(){  if (shutdown.get()) {    throw new IllegalStateException("Can not start an already shutdown proxy");  }  final Future<?> submit=service.submit(new ProxyServer());  futures.add(submit);}  }
class C{  protected void checkResponse() throws IOException, ServiceException {  if (isOAuthProxyErrorResponse()) {    handleOAuthProxyErrorResponse();  } else   if (httpConn.getResponseCode() >= 300) {    handleErrorResponse();  }}  }
class C{  final public boolean equals(final IResourceMetadata o){  if (this == o)   return true;  if (uuid.equals(o.getUUID()) && filename.equals(o.getFile()) && createTime == o.getCreateTime()) {    return true;  }  return false;}  }
class C{  public RSeq(){  super(NAME);}  }
class C{  public static BufferedInputStream createGzipInputStream(InputStream is,boolean async) throws IOException {  final InputStream inStream;  if (async) {    inStream=new GzipAsynchInputStream(is);  } else {    inStream=GzipUtils.createGzipInputStream(new BufferedInputStream(is));  }  return new BufferedInputStream(inStream);}  }
class C{  public double distance(Pos3D pos){  double subX=xPos - pos.xPos;  double subY=yPos - pos.yPos;  double subZ=zPos - pos.zPos;  return MathHelper.sqrt_double(subX * subX + subY * subY + subZ * subZ);}  }
class C{  public style addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void each(Closure closure) throws SQLException {  eachRow(getSql(),getParameters(),closure);}  }
class C{  public final Double3D resize(double dist){  if (dist == 0)   return new Double3D(0,0,0); else   if (dist == infinity || dist == -infinity || dist != dist)   throw new ArithmeticException("Cannot resize to distance " + dist); else   if ((x == 0 && y == 0 && z == 0) || x == infinity || x == -infinity || x != x || y == infinity || y == -infinity || y != y || z == infinity || z == -infinity || z != z)   throw new ArithmeticException("Cannot resize a vector with infinite or NaN values, or of length 0, except to length 0");  double temp=length();  return new Double3D(x * dist / temp,y * dist / temp,z * dist / temp);}  }
class C{  private AsyncToken<T> sendRequest(final URL url,final Function<URI,HttpRequestBase> requestFactory,final HttpResponseStrategy<T> responseStrategy){  try {    final URI uri=url.toURI();    final HttpMethodClientFutureCallback callback=new HttpMethodClientFutureCallback();    final HttpRequestBase request=requestFactory.apply(uri);    request.setHeader("Accept",responseStrategy.getSupportedContentType());    this.httpClient.execute(request,callback);    final CompletableFuture<T> responseFuture=callback.getFuture().thenApply(null);    SleepFuture.create(this.requestTimeout).thenAccept(null);    return new AsyncToken<>(request,responseFuture);  } catch (  final URISyntaxException e) {    throw new FatalPeerException(e);  }}  }
class C{  private static String extractErrorSummary(Throwable e){  StringBuilder errorMessageBuilder=new StringBuilder();  Throwable cause=e;  errorMessageBuilder.append(cause.getLocalizedMessage());  while (cause != null) {    StackTraceElement[] stackTraceElements=cause.getStackTrace();    errorMessageBuilder.append(stackTraceElements.length > 0 ? "\n caused by: " + stackTraceElements[0] : "");    cause=cause.getCause();  }  return errorMessageBuilder.toString();}  }
class C{  public ContactHeader createContactHeader(Address address){  if (address == null)   throw new NullPointerException("null arg address");  Contact contact=new Contact();  contact.setAddress(address);  return contact;}  }
class C{  public final void flush(){  try {    for (    final OutputStream outStream : outStreamsMap.values()) {      try {        outStream.flush();      } catch (      final IOException e) {        e.printStackTrace(System.err);      }    }  } catch (  final ConcurrentModificationException e) {    e.printStackTrace(System.err);  }}  }
class C{  private void addStorageViewVirtualVolumes(VPlexStorageViewInfo storageViewInfo,Map<String,Integer> virtualVolumeMap) throws VPlexApiException {  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_STORAGE_VIEW_ADD_VOLUMES);  StringBuilder volumeArgsBuilder=new StringBuilder();  Iterator<Entry<String,Integer>> virtualVolumesIter=virtualVolumeMap.entrySet().iterator();  while (virtualVolumesIter.hasNext()) {    Entry<String,Integer> entry=virtualVolumesIter.next();    String virtualVolumeName=entry.getKey();    Integer lunId=entry.getValue();    if (volumeArgsBuilder.length() != 0) {      volumeArgsBuilder.append(",");    }    if (lunId.intValue() == VPlexApiConstants.LUN_UNASSIGNED) {      volumeArgsBuilder.append(virtualVolumeName);    } else {      volumeArgsBuilder.append("(");      volumeArgsBuilder.append(lunId);      volumeArgsBuilder.append(",");      volumeArgsBuilder.append(virtualVolumeName);      volumeArgsBuilder.append(")");    }  }  modifyStorageViewVirtualVolumes(storageViewInfo,volumeArgsBuilder.toString(),requestURI);  updateStorageViewInfo(storageViewInfo);  Iterator<String> virtualVolumesNamesIter=virtualVolumeMap.keySet().iterator();  while (virtualVolumesNamesIter.hasNext()) {    String virtualVolumeName=virtualVolumesNamesIter.next();    s_logger.info("WWN {} for Volume {}",storageViewInfo.getWWNForStorageViewVolume(virtualVolumeName),virtualVolumeName);  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  private boolean executePageToBuildView(FacesContext context,UIViewRoot viewToExecute) throws IOException {  if (null == context) {    String message=MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"context");    throw new NullPointerException(message);  }  if (null == viewToExecute) {    String message=MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"viewToExecute");    throw new NullPointerException(message);  }  ExternalContext extContext=context.getExternalContext();  if ("/*".equals(RequestStateManager.get(context,RequestStateManager.INVOCATION_PATH))) {    throw new FacesException(MessageUtils.getExceptionMessageString(MessageUtils.FACES_SERVLET_MAPPING_INCORRECT_ID));  }  String requestURI=viewToExecute.getViewId();  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.fine("About to execute view " + requestURI);  }  if (extContext.getRequest() instanceof ServletRequest) {    Config.set((ServletRequest)extContext.getRequest(),Config.FMT_LOCALE,context.getViewRoot().getLocale());  }  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.fine("Before dispacthMessage to viewId " + requestURI);  }  Object originalResponse=extContext.getResponse();  ViewHandlerResponseWrapper wrapped=getWrapper(extContext);  extContext.setResponse(wrapped);  try {    extContext.dispatch(requestURI);    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.fine("After dispacthMessage to viewId " + requestURI);    }  }  finally {    extContext.setResponse(originalResponse);  }  if (wrapped.getStatus() < 200 || wrapped.getStatus() > 299) {    wrapped.flushContentToWrappedResponse();    return true;  }  RequestStateManager.set(context,RequestStateManager.AFTER_VIEW_CONTENT,wrapped);  return false;}  }
class C{  public FastLongBuffer append(long[] array){  return append(array,0,array.length);}  }
class C{  private void handleRespawn(){  if (getState() == 0) {    final int time=Rand.randExponential(6000);    int turn=Math.max(time,6000);    TurnNotifier.get().notifyInTurns(turn,new Refiller());  }}  }
class C{  public ImplDiscordAPI(ThreadPool pool){  this.pool=pool;}  }
class C{  public static byte[] trimZeroes(byte[] byeArray){  int count=0;  while ((count < byeArray.length - 1) && (byeArray[count] == 0)) {    count++;  }  if (count == 0) {    return byeArray;  }  byte[] trimmedByteArray=new byte[byeArray.length - count];  System.arraycopy(byeArray,count,trimmedByteArray,0,trimmedByteArray.length);  return trimmedByteArray;}  }
class C{  public void testDoubleValuePositiveInfinity2(){  String a="2746723894572364578265426346273456972283746872364768676747462342342342342342342342323423423423423423426767456345745293762384756238475634563456845634568934568347586346578648576478568456457634875673845678456786587345873645767456834756745763457863485768475678465783456702897830296720476846578634576384567845678346573465786457863";  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == Double.POSITIVE_INFINITY);}  }
class C{  public static void release(){  Collection<SessionWrapper> wrappers;synchronized (sessions) {    try {      if (sessions.isEmpty())       return;      wrappers=new LinkedList<>();      for (      SessionWrapper wrapper : sessions.values())       wrappers.add(wrapper);      sessions.clear();    }  finally {      if (!(Thread.currentThread() instanceof SessionMonitor) && monitorSingleton != null) {        try {          monitorSingleton.interrupt();        } catch (        Throwable ignored) {        }      }    }  }  for (  SessionWrapper wrapper : wrappers)   wrapper.release();}  }
class C{  public void completeSuccessfully(){  if (state == StepExecutionState.STEP_EXECUTION_FAILED) {    throw new IllegalStateException("Try to set the state of this StepExecution to 'STEP_EXECUTION_SUCCESSFUL', however has previously been set to 'FAILED'.");  }  state=StepExecutionState.STEP_EXECUTION_SUCCESSFUL;  completedTime=new Date();}  }
class C{  protected static SimpleCommand createCommand(String command,final String host,final int port,final String user,final Path privateKeyFilePath,boolean logCommand) throws AgentException {  return new SimpleCommand(command,new SecureShellAgent(host,port,user,privateKeyFilePath),null,logCommand);}  }
class C{  public static String[] encode(final String[] values){  return encode(values,DEFAULT_ENCODING);}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  protected void reorderAppDeploymentsAfterConfigurationVersion(Element domain){  List<Element> appDeployments=xmlTool.selectElementsMatchingXPath("weblogic:app-deployment",domain);  for (  Element appDeployment : appDeployments) {    domain.removeChild(appDeployment);  }  Element configurationVersion=xmlTool.selectElementMatchingXPath("weblogic:configuration-version",domain);  Node before=null;  NodeList children=domain.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    if (configurationVersion.equals(children.item(i)) && i < children.getLength() - 1) {      before=children.item(i + 1);    }  }  if (before != null) {    for (    Element appDeployment : appDeployments) {      domain.insertBefore(appDeployment,before);    }  } else {    for (    Element appDeployment : appDeployments) {      domain.appendChild(appDeployment);    }  }}  }
class C{  public static boolean isLongDistance(Particle particle){switch (particle) {case EXPLOSION_NORMAL:case EXPLOSION_LARGE:case EXPLOSION_HUGE:case MOB_APPEARANCE:    return true;}return false;}  }
class C{  protected boolean executeDefaultAction(List<UITouch> touches,PLTouchEventType eventType){  int touchCount=touches.size();  if (touchCount == mNumberOfTouchesForReset) {    mIsValidForFov=false;    if (eventType == PLTouchEventType.PLTouchEventTypeBegan)     this.executeResetAction(touches);  } else   if (touchCount == 2) {    boolean isNotCancelable=true;    if (mListener != null)     isNotCancelable=mListener.onShouldBeginZooming(this);    if (isNotCancelable) {      if (!mIsValidForFov) {        mFovCounter=0;        mIsValidForFov=true;      }      if (eventType == PLTouchEventType.PLTouchEventTypeMoved)       this.calculateFov(touches); else       if (eventType == PLTouchEventType.PLTouchEventTypeBegan) {        mAuxiliarStartPoint.setValues(touches.get(0).locationInView(mGLSurfaceView));        mAuxiliarEndPoint.setValues(touches.get(1).locationInView(mGLSurfaceView));        if (mListener != null)         mListener.onDidBeginZooming(this,mAuxiliarStartPoint,mAuxiliarEndPoint);      }    }  } else   if (touchCount == 1) {    if (eventType == PLTouchEventType.PLTouchEventTypeMoved) {      if (mIsValidForFov || (mStartPoint.x == 0.0f && mEndPoint.y == 0.0f))       mStartPoint.setValues(this.getLocationOfFirstTouch(touches));    } else     if (eventType == PLTouchEventType.PLTouchEventTypeEnded && mStartPoint.x == 0.0f && mEndPoint.y == 0.0f)     mStartPoint.setValues(this.getLocationOfFirstTouch(touches));    mIsValidForFov=false;    return false;  }  return true;}  }
class C{  private boolean isOutsideDocElem(){  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @Override public boolean hasFocus(){  return mHijackFocus || super.hasFocus();}  }
class C{  public Builder receiveBufferSize(int receiveBufferSize){  this.receiveBufferSize=receiveBufferSize;  return this;}  }
class C{  @Override public byte[] toByteArray() throws IOException {  ByteArrayDataOutput byteArrayDataOutput=ByteStreams.newDataOutput();  this.comparator.write(byteArrayDataOutput);  return byteArrayDataOutput.toByteArray();}  }
class C{  public static boolean isEmpty(final long[] array){  return array == null || array.length == 0;}  }
class C{  public boolean isEnd(){  return true;}  }
class C{  public static void xml(String xml){  createInstance();  printer.xml(xml);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.180 -0400",hash_original_method="D1F802D7FECB86E79B57E3AA0E976FC0",hash_generated_method="82510752CE2A3F5905FA0C84639DBCA7") public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public void moveAppToPosition(AppInfo app,int position){  if (mInstalledApps.contains(app)) {    try {      mInstalledApps.remove(app);      mInstalledApps.add(position,app);      notifyDataSetChanged();    } catch (    Exception e) {      StringWriter errors=new StringWriter();      e.printStackTrace(new PrintWriter(errors));      String errorReason=errors.toString();      Log.d(InstalledAppsAdapter.class.getName(),"Error while moving app: \n" + errorReason);    }  }}  }
class C{  public AudioBuffer configure(ByteBuffer data,int format,int freq){  this.data=data;  this.format=Format.getForID(format);  al.alBufferData(id,format,data,data.capacity(),freq);  return this;}  }
class C{  public String periodicPruningTipText(){  return "How often (number of instances) to prune " + "the dictionary of low frequency terms. " + "0 means don't prune. Setting a positive "+ "integer n means prune after every n instances";}  }
class C{  Delivery updateOnRouting(RouteSpecification routeSpecification,Itinerary itinerary){  Validate.notNull(routeSpecification,"Route specification is required");  return new Delivery(this.lastEvent,itinerary,routeSpecification);}  }
class C{  public static int remainderUnsigned(int dividend,int divisor){  return (int)(toUnsignedLong(dividend) % toUnsignedLong(divisor));}  }
class C{  private void systemFrequencySelect(long frequency,boolean controlI2C) throws UsbException {  writeR820TRegister(Register.LNA_TOP2,(byte)0xE5,controlI2C);  byte mixer_top;  byte cp_cur;  byte div_buf_cur;  if (frequency == 506000000 || frequency == 666000000 || frequency == 818000000) {    mixer_top=(byte)0x14;    cp_cur=(byte)0x28;    div_buf_cur=(byte)0x20;  } else {    mixer_top=(byte)0x24;    cp_cur=(byte)0x38;    div_buf_cur=(byte)0x30;  }  writeR820TRegister(Register.MIXER_TOP,mixer_top,controlI2C);  writeR820TRegister(Register.LNA_VTH_L,(byte)0x53,controlI2C);  writeR820TRegister(Register.MIXER_VTH_L,(byte)0x75,controlI2C);  writeR820TRegister(Register.AIR_CABLE1_INPUT_SELECTOR,(byte)0x00,controlI2C);  writeR820TRegister(Register.CABLE2_INPUT_SELECTOR,(byte)0x00,controlI2C);  writeR820TRegister(Register.CP_CUR,cp_cur,controlI2C);  writeR820TRegister(Register.DIVIDER_BUFFER_CURRENT,div_buf_cur,controlI2C);  writeR820TRegister(Register.FILTER_CURRENT,(byte)0x40,controlI2C);  writeR820TRegister(Register.LNA_TOP,(byte)0x00,controlI2C);  writeR820TRegister(Register.MIXER_TOP2,(byte)0x00,controlI2C);  writeR820TRegister(Register.PRE_DETECT,(byte)0x00,controlI2C);  writeR820TRegister(Register.AGC_CLOCK,(byte)0x30,controlI2C);  writeR820TRegister(Register.LNA_TOP,(byte)0x18,controlI2C);  writeR820TRegister(Register.MIXER_TOP2,mixer_top,controlI2C);  writeR820TRegister(Register.LNA_DISCHARGE_CURRENT,(byte)0x14,controlI2C);  writeR820TRegister(Register.AGC_CLOCK,(byte)0x20,controlI2C);}  }
class C{  public Model doWork(ExampleSet exampleSet) throws OperatorException {  exampleSetInput.receive(exampleSet);  doWork();  return modelOutput.getData(Model.class);}  }
class C{  public void stop(){  TurnNotifier.get().dontNotify(this);}  }
class C{  public static GaplessInfo parseId3(ExtractorInput input) throws IOException, InterruptedException {  ParsableByteArray scratch=new ParsableByteArray(10);  int peekedId3Bytes=0;  GaplessInfo metadata=null;  while (true) {    input.peekFully(scratch.data,0,10);    scratch.setPosition(0);    if (scratch.readUnsignedInt24() != ID3_TAG) {      break;    }    int majorVersion=scratch.readUnsignedByte();    int minorVersion=scratch.readUnsignedByte();    int flags=scratch.readUnsignedByte();    int length=scratch.readSynchSafeInt();    if (metadata == null && canParseMetadata(majorVersion,minorVersion,flags,length)) {      byte[] frame=new byte[length];      input.peekFully(frame,0,length);      metadata=parseGaplessInfo(new ParsableByteArray(frame),majorVersion,flags);    } else {      input.advancePeekPosition(length);    }    peekedId3Bytes+=10 + length;  }  input.resetPeekPosition();  input.advancePeekPosition(peekedId3Bytes);  return metadata;}  }
class C{  public void drawBoard(Graphics g){  if (controller != null) {    controller.drawBoard(g);  }}  }
class C{  static void clean(Configuration conf) throws IOException {  if (!debug(conf)) {    int iteration=getCurrentIteration(conf);    for (int i=0; i <= iteration; i++) {      deleteIfExists(conf,OUTPUT_BASE + i);      deleteIfExists(conf,OUTPUT_BASE + i + TEMP_SUFFIX);      deleteIfExists(conf,SCHEMA_BASE + i);    }    deleteIfExists(conf,"input");  }}  }
class C{  public static int toRotationStep(float radians){  return (int)(radians / 2d / Math.PI * 256f);}  }
class C{  public boolean isCanExport(){  Object oo=get_Value(COLUMNNAME_IsCanExport);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void handleMotion(int edge,float dx,float dy){  Rect r=computeLayout();  if (edge == GROW_NONE) {    return;  } else   if (edge == MOVE) {    moveBy(dx * (mCropRect.width() / r.width()),dy * (mCropRect.height() / r.height()));  } else {    if (((GROW_LEFT_EDGE | GROW_RIGHT_EDGE) & edge) == 0) {      dx=0;    }    if (((GROW_TOP_EDGE | GROW_BOTTOM_EDGE) & edge) == 0) {      dy=0;    }    float xDelta=dx * (mCropRect.width() / r.width());    float yDelta=dy * (mCropRect.height() / r.height());    growBy((((edge & GROW_LEFT_EDGE) != 0) ? -1 : 1) * xDelta,(((edge & GROW_TOP_EDGE) != 0) ? -1 : 1) * yDelta);  }}  }
class C{  public static void moveFileToDirectory(File srcFile,File destDir,boolean createDestDir) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  } else   if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  } else {    if (!destDir.exists() && createDestDir) {      destDir.mkdirs();    }    if (!destDir.exists()) {      throw new FileNotFoundException("Destination directory \'" + destDir + "\' does not exist [createDestDir="+ createDestDir+ "]");    } else     if (!destDir.isDirectory()) {      throw new IOException("Destination \'" + destDir + "\' is not a directory");    } else {      moveFile(srcFile,new File(destDir,srcFile.getName()));    }  }}  }
class C{  private ActionErrors validate(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionErrors errors=getErrors(request,true);  CamposTablaForm camposTablaForm=(CamposTablaForm)form;  if (StringUtils.isBlank(camposTablaForm.getNombre())) {    errors.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_NOMBRE,request.getLocale())));  }  if (StringUtils.isBlank(camposTablaForm.getEtiquetaXml())) {    errors.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_ETIQUETAXML,request.getLocale())));  } else   if (camposTablaForm.getEtiquetaXml().equalsIgnoreCase(camposTablaForm.getEtiqXmlFila())) {    errors.add(Constants.ERROR_ELEMENTOS_DISTINTOS,new ActionError(Constants.ERROR_ELEMENTOS_DISTINTOS,Messages.getString(Constants.ETIQUETA_ETIQUETAXML,request.getLocale()),Messages.getString(Constants.ETIQUETA_ETIQUETAXMLFILA,request.getLocale())));  }  return errors;}  }
class C{  public void read(InputStream in,boolean clientMode) throws SocksException, IOException {  data=null;  ip=null;  DataInputStream di=new DataInputStream(in);  version=di.readUnsignedByte();  command=di.readUnsignedByte();  if (clientMode && command != 0)   throw new SocksException(command);  di.readUnsignedByte();  addrType=di.readUnsignedByte();  byte addr[];switch (addrType) {case SOCKS_ATYP_IPV4:    addr=new byte[4];  di.readFully(addr);host=InetAddress.getByAddress(addr).getHostAddress();break;case SOCKS_ATYP_IPV6:addr=new byte[SOCKS_IPV6_LENGTH];di.readFully(addr);host=InetAddress.getByAddress(addr).getHostAddress();break;case SOCKS_ATYP_DOMAINNAME:addr=new byte[di.readUnsignedByte()];di.readFully(addr);host=AsciiString.create(addr);break;default :throw (new SocksException(SocksConstants.SOCKS_JUST_ERROR));}port=di.readUnsignedShort();if (addrType != SOCKS_ATYP_DOMAINNAME && doResolveIP) {try {ip=InetAddress.getByName(host);} catch (UnknownHostException uh_ex) {}}}  }
class C{  public static NetAppClusterFacade create(Map<String,String> connectionParams){  return new NetAppClusterFacade(connectionParams.get(NetAppDevice.IP_KEY),Integer.parseInt(connectionParams.get(NetAppDevice.PORT_KEY)),connectionParams.get(NetAppDevice.USR_KEY),connectionParams.get(NetAppDevice.PWD_KEY),Boolean.parseBoolean(connectionParams.get(NetAppDevice.SECURE_KEY)));}  }
class C{  private boolean isActionNotTheFirstElement(final RobotToken action,final List<RobotToken> elementTokens){  final FilePosition actionPosition=action.getFilePosition();  if (!actionPosition.isNotSet()) {    for (    final RobotToken tok : elementTokens) {      final FilePosition currentTokenPosition=tok.getFilePosition();      if (!currentTokenPosition.isNotSet()) {        if (currentTokenPosition.isBefore(actionPosition)) {          return true;        }      }    }  }  return false;}  }
class C{  @Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){  super.onLayout(changed,left,top,right,bottom);  int nBiggestChildHeight=0;  View biggestChild=null;  for (int nCtr=0, count=getChildCount(); nCtr < count; nCtr++) {    final View child=getChildAt(nCtr);    if (mSystemInsets != null && !ViewCompat.getFitsSystemWindows(child)) {      final int systemWindowInsetTop=mSystemInsets.getSystemWindowInsetTop();      if (child.getTop() < systemWindowInsetTop) {        child.offsetTopAndBottom(systemWindowInsetTop);      }    }    if (mfMinimumCollapsibleHeight == 0) {      CollapsibleToolbarHelper.LayoutParams params=(LayoutParams)child.getLayoutParams();      if ((params.getCollapseMode() != LayoutParams.PARALLAX_ON_SCROLL) && (params.getCollapseMode() != LayoutParams.HIDE_ON_COLLAPSE) && (child.getMeasuredHeight() > nBiggestChildHeight)&& !(child instanceof CollapsibleTextLayout)) {        nBiggestChildHeight=child.getMeasuredHeight();        biggestChild=child;      }    }    getViewOffsetHelper(child).onViewLayout();  }  if (mfMinimumCollapsibleHeight == 0) {    int margins=0;    if (biggestChild != null) {      CollapsibleToolbarHelper.LayoutParams params=(LayoutParams)biggestChild.getLayoutParams();      margins+=params.topMargin + params.bottomMargin;    }    mfMinimumCollapsibleHeight+=nBiggestChildHeight + margins;  }  setMinimumHeight((int)Math.ceil(mfMinimumCollapsibleHeight));}  }
class C{  void dispatchOnLauncherTransitionPrepare(View v,boolean animated,boolean toWorkspace){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionPrepare(mLauncher,animated,toWorkspace);  }}  }
class C{  protected <K,V>CacheBinding<K,V> cache(String name,Class<K> keyType,Class<V> valType){  return cache(name,TypeLiteral.get(keyType),TypeLiteral.get(valType));}  }
class C{  private static void treks(Graph graph,Node node1,Node node2,LinkedList<Node> path,List<List<Node>> paths){  path.addLast(node1);  for (  Edge edge : graph.getEdges(node1)) {    Node next=Edges.traverse(node1,edge);    if (next == null) {      continue;    }    if (path.size() > 1) {      Node node0=path.get(path.size() - 2);      if (next == node0) {        continue;      }      if (graph.isDefCollider(node0,node1,next)) {        continue;      }    }    if (next == node2) {      LinkedList<Node> _path=new LinkedList<>(path);      _path.add(next);      paths.add(_path);      continue;    }    if (path.contains(next)) {      continue;    }    treks(graph,next,node2,path,paths);  }  path.removeLast();}  }
class C{  public void start(){  mVibrator=(Vibrator)mContext.getSystemService(Service.VIBRATOR_SERVICE);  mIsGloballyEnabled=checkGlobalSetting(mContext);  Uri uri=Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED);  mContext.getContentResolver().registerContentObserver(uri,false,mContentObserver);}  }
class C{  public void resume(){  if (uploadState.equals(UploadState.PAUSED) || uploadState.equals(UploadState.NOT_STARTED)) {    upload(true);  }}  }
class C{  public void checkServerTrusted(X509Certificate[] cert,String authType) throws CertificateException {}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public PriorityQueue(){  this(DEFAULT_CAPACITY);}  }
class C{  public static String newInstance(){  String webUserAgent=null;  try {    Class<?> sysResCls=Class.forName("com.android.internal.R$string");    Field webUserAgentField=sysResCls.getDeclaredField("web_user_agent");    Integer resId=(Integer)webUserAgentField.get(null);    webUserAgent=NoHttp.getContext().getString(resId);  } catch (  Exception e) {  }  if (TextUtils.isEmpty(webUserAgent)) {    webUserAgent="Mozilla/5.0 (Linux; U; Android %s) AppleWebKit/533.1 (KHTML, like Gecko) Version/5.0 %sSafari/533.1";  }  Locale locale=Locale.getDefault();  StringBuffer buffer=new StringBuffer();  final String version=Build.VERSION.RELEASE;  if (version.length() > 0) {    buffer.append(version);  } else {    buffer.append("1.0");  }  buffer.append("; ");  final String language=locale.getLanguage();  if (language != null) {    buffer.append(language.toLowerCase(locale));    final String country=locale.getCountry();    if (!TextUtils.isEmpty(country)) {      buffer.append("-");      buffer.append(country.toLowerCase(locale));    }  } else {    buffer.append("en");  }  if ("REL".equals(Build.VERSION.CODENAME)) {    final String model=Build.MODEL;    if (model.length() > 0) {      buffer.append("; ");      buffer.append(model);    }  }  final String id=Build.ID;  if (id.length() > 0) {    buffer.append(" Build/");    buffer.append(id);  }  return String.format(webUserAgent,buffer,"Mobile ");}  }
class C{  public void updateObject(String columnName,Object x) throws SQLException {  updateObject(findColumn(columnName),x);}  }
class C{  private static boolean looksLikeAnonymousClassDef(IDocument document,String partitioning,JavaHeuristicScanner scanner,int position){  int previousCommaParenEqual=scanner.scanBackward(position - 1,JavaHeuristicScanner.UNBOUND,new char[]{',','(','='});  if (previousCommaParenEqual == -1 || position < previousCommaParenEqual + 5)   return false;  if (isNewMatch(document,previousCommaParenEqual + 1,position - previousCommaParenEqual - 2,partitioning))   return true;  return false;}  }
class C{  public void onStop(){  if (null != mService) {    if (null != mContext) {      mContext.unbindService(mServiceConnection);    }    mServiceConnection=null;    mService=null;  }}  }
class C{  public SQLNonTransientException(String reason){  super(reason,null,0);}  }
class C{  static void releaseBuffer(ByteBuffer bb,DMStats stats,boolean send){  if (TCPConduit.useDirectBuffers) {    BBSoftReference bbRef=new BBSoftReference(bb,send);    bufferQueue.offer(bbRef);  } else {    if (send) {      stats.incSenderBufferSize(-bb.capacity(),false);    } else {      stats.incReceiverBufferSize(-bb.capacity(),false);    }  }}  }
class C{  public JMXControlService(String domain,Hashtable<String,String> additionalKeys){  mbs=ManagementFactory.getPlatformMBeanServer();  this.domain=domain;  this.additionalKeys=additionalKeys;}  }
class C{  @Override public void updateNClob(String columnLabel,Reader x) throws SQLException {  updateClob(columnLabel,x,-1);}  }
class C{  @Override protected void validateFields(List<Throwable> errors){  super.validateFields(errors);  if (fieldsAreAnnotated()) {    List<FrameworkField> annotatedFieldsByParameter=getAnnotatedFieldsByParameter();    int[] usedIndices=new int[annotatedFieldsByParameter.size()];    for (    FrameworkField each : annotatedFieldsByParameter) {      int index=each.getField().getAnnotation(Parameter.class).value();      if (index < 0 || index > annotatedFieldsByParameter.size() - 1) {        errors.add(new Exception("Invalid @Parameter value: " + index + ". @Parameter fields counted: "+ annotatedFieldsByParameter.size()+ ". Please use an index between 0 and "+ (annotatedFieldsByParameter.size() - 1)+ "."));      } else {        usedIndices[index]++;      }    }    for (int index=0; index < usedIndices.length; index++) {      int numberOfUse=usedIndices[index];      if (numberOfUse == 0) {        errors.add(new Exception("@Parameter(" + index + ") is never used."));      } else       if (numberOfUse > 1) {        errors.add(new Exception("@Parameter(" + index + ") is used more than once ("+ numberOfUse+ ")."));      }    }  }}  }
class C{  private String readDnsName(DataInputStream dis){  StringBuffer sb=new StringBuffer();  HashMap<Integer,String> vmpack=new HashMap<Integer,String>(sVmpack);  if (mDnsQueryName != null) {    vmpack.put(0x27,mDnsQueryName);  }  try {    while (true) {      int i=dis.readUnsignedByte();      if (i == 0x00) {        return sb.toString();      } else       if (i == 0xc0) {        String ref=vmpack.get(dis.readUnsignedByte());        if (ref == null) {          return null;        }        sb.append(ref);        return sb.toString();      } else {        byte[] data=new byte[i];        dis.readFully(data);        sb.append(new String(data));        sb.append(".");      }    }  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  private static boolean lower_equal(int x,int y){  return (x & 0xFFFFFFFFL) <= ((long)y & 0xFFFFFFFF);}  }
class C{  public void removeListener(final IBookmarkListener listener){  m_listeners.removeListener(listener);}  }
class C{  public CompositeElementVisitor(ElementVisitor... visitors){  this.visitors=new ArrayList<ElementVisitor>(visitors.length);  for (  ElementVisitor visitor : visitors) {    this.visitors.add(visitor);  }}  }
class C{  public String toString(){  return "null";}  }
class C{  public String[] list(){  if (Cfg.DEBUG) {    Check.asserts(isDirectory(),"Should be a directory");  }  return file.list();}  }
class C{  private void arrayFill(Node t,NodeInfo[] l,EdgeInfo[] k){  if (t == null || l == null) {    System.exit(1);  }  Edge e;  Node r, s;  l[0]=new NodeInfo();  l[0].m_node=t;  l[0].m_parent=-1;  l[0].m_change=true;  int floater;  int free_space=1;  double height=t.getTop();  for (floater=0; floater < free_space; floater++) {    r=l[floater].m_node;    for (int noa=0; (e=r.getChild(noa)) != null; noa++) {      s=e.getTarget();      l[free_space]=new NodeInfo();      l[free_space].m_node=s;      l[free_space].m_parent=free_space - 1;      k[free_space - 1]=new EdgeInfo();      k[free_space - 1].m_edge=e;      k[free_space - 1].m_parent=floater;      k[free_space - 1].m_child=free_space;      if (height != s.getTop()) {        l[free_space].m_change=true;        height=s.getTop();      } else {        l[free_space].m_change=false;      }      free_space++;    }  }}  }
class C{  public static void createTextFile(Configuration conf,Path directory,String filename,String contents) throws IOException {  Path filePath=new Path(directory,filename);  FileSystem fs=FileSystem.get(filePath.toUri(),conf);  FSDataOutputStream file1OutputStream=fs.create(filePath);  file1OutputStream.writeBytes(contents);  file1OutputStream.close();}  }
class C{  public void addTuple(String s){  externallyAddedTuples.add(s);}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.REFERENCE_TARGET;}  }
class C{  public boolean isSetCursorRequest(){  return this.cursorRequest != null;}  }
class C{  public static List<MountInfo> queryDBHostMounts(URI host,DbClient dbClient){  _log.info("Querying NFS mounts for host {}",host);  List<MountInfo> hostMounts=new ArrayList<MountInfo>();  try {    ContainmentConstraint containmentConstraint=ContainmentConstraint.Factory.getHostFileMountsConstraint(host);    List<FileMountInfo> fileMounts=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,FileMountInfo.class,containmentConstraint);    if (fileMounts != null && !fileMounts.isEmpty()) {      for (      FileMountInfo dbMount : fileMounts) {        MountInfo mountInfo=new MountInfo();        getMountInfo(dbMount,mountInfo);        hostMounts.add(mountInfo);      }    }    return hostMounts;  } catch (  Exception e) {    _log.error("Error while querying {}",e);  }  return hostMounts;}  }
class C{  @Override public String cipherSuite(){  return _socket.cipherSuite();}  }
class C{  public static String concat(EncodedStringValue[] addr){  StringBuilder sb=new StringBuilder();  int maxIndex=addr.length - 1;  for (int i=0; i <= maxIndex; i++) {    sb.append(addr[i].getString());    if (i < maxIndex) {      sb.append(";");    }  }  return sb.toString();}  }
class C{  public boolean handleRequest(Operation inboundOp){  return handleRequest(null,inboundOp);}  }
class C{  public static int nextAllOnesInt(int x){  x|=x >>> 1;  x|=x >>> 2;  x|=x >>> 4;  x|=x >>> 8;  x|=x >>> 16;  return x;}  }
class C{  public String ncgSummaryStr(){  if (ncg.homeScore > ncg.awayScore) {    return ncg.homeTeam.name + " (" + ncg.homeTeam.wins+ "-"+ ncg.homeTeam.losses+ ") won the National Championship, "+ "winning against "+ ncg.awayTeam.name+ " ("+ ncg.awayTeam.wins+ "-"+ ncg.awayTeam.losses+ ") in the NCG "+ ncg.homeScore+ "-"+ ncg.awayScore+ ".";  } else {    return ncg.awayTeam.name + " (" + ncg.awayTeam.wins+ "-"+ ncg.awayTeam.losses+ ") won the National Championship, "+ "winning against "+ ncg.homeTeam.name+ " ("+ ncg.homeTeam.wins+ "-"+ ncg.homeTeam.losses+ ") in the NCG "+ ncg.awayScore+ "-"+ ncg.homeScore+ ".";  }}  }
class C{  public boolean isAlwaysUpdateField(){  for (int i=0; i < m_mTable.getColumnCount(); i++) {    GridField field=m_mTable.getField(i);    if (field.isAlwaysUpdateable())     return true;  }  return false;}  }
class C{  public HealthCheckTimerTask(BitcoinController bitcoinController){  this.bitcoinController=bitcoinController;  this.controller=bitcoinController;}  }
class C{  public static void close(ResultSet rs,Statement st){  close(rs);  close(st);}  }
class C{  public CronTriggerImpl(){  super();  setStartTime(new Date());  setTimeZone(TimeZone.getDefault());}  }
class C{  public void testEnd() throws IOException {  assertAnalyzesTo(sentenceAndWord,"John shook his head          ",new String[]{"John","shook","his","head"});  assertAnalyzesTo(sentenceAndWord,"John shook his head.          ",new String[]{"John","shook","his","head"});}  }
class C{  private void updateBackground(){  Color bg=UIManager.getColor("Panel.background");  if (bg == null) {    bg=new JPanel().getBackground();  }  setBackground(bg);}  }
class C{  private DomainObjectUtils(){}  }
class C{  public int readListStart() throws IOException {  return read();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 14:14:46.129 -0400",hash_original_method="D0B01D5997B64F410F6DB437DA16E0A9",hash_generated_method="02AEE9EC41D576D596F5FD26993DF478") public static SparseArray<Bundle> buildActionExtrasMap(List<Bundle> actionExtrasList){  SparseArray<Bundle> actionExtrasMap=null;  for (int i=0, count=actionExtrasList.size(); i < count; i++) {    Bundle actionExtras=actionExtrasList.get(i);    if (actionExtras != null) {      if (actionExtrasMap == null) {        actionExtrasMap=new SparseArray<Bundle>();      }      actionExtrasMap.put(i,actionExtras);    }  }  return actionExtrasMap;}  }
class C{  public int numCps(){  if (cpStr2Int == null) {    return 0;  } else {    return cpStr2Int.size();  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  default void afterInstall(){}  }
class C{  @Override public synchronized void processConnect(WebSocketChannel channel,WSURI uri,String[] protocols){  LOG.entering(CLASS_NAME,"processConnect",new Object[]{uri,protocols});  try {    WebSocketNativeChannel nativeChannel=(WebSocketNativeChannel)channel;    if (nativeChannel.getProxy() != null) {      throw new IllegalStateException("Bridge proxy previously set");    }    Proxy proxy=BridgeUtil.createProxy(uri.getURI(),this);    proxy.setPeer(channel);    nativeChannel.setProxy(proxy);    String[] params;    if (protocols != null) {      String s="";      for (int i=0; i < protocols.length; i++) {        if (i > 0) {          s+=",";        }        s+=protocols[i];      }      params=new String[]{"WEBSOCKET",uri.toString(),s,""};    } else {      params=new String[]{"WEBSOCKET",uri.toString()};    }    proxy.processEvent(XoaEventKind.CREATE,params);  } catch (  Exception e) {    LOG.log(Level.FINE,"While initializing WebSocket proxy: " + e.getMessage(),e);    listener.connectionFailed(channel,e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.627 -0500",hash_original_method="AF1EBC6D8A2DA1E39265DEC2CD9D5FBB",hash_generated_method="2DDFFB18789BDBA4467A3333F5000805") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onOtaspChanged(int otaspMode){}  }
class C{  public static SipResponse createResponse(SipRequest request,String localTag,int code) throws PayloadException {  return createResponse(request,localTag,code,null);}  }
class C{  public EnumLiteralPropertyAttribute createEnumLiteralPropertyAttribute(){  EnumLiteralPropertyAttributeImpl enumLiteralPropertyAttribute=new EnumLiteralPropertyAttributeImpl();  return enumLiteralPropertyAttribute;}  }
class C{  String visibleNameOf(String realName){  return visibleNames.get(realName);}  }
class C{  @SuppressWarnings("unchecked") public Iterable<? extends TClassifier> createIterableOfTClassifierFromString(EDataType eDataType,String initialValue){  return (Iterable<? extends TClassifier>)super.createFromString(initialValue);}  }
class C{  private void onDebuggerDisconnected(){  debuggerInfo=null;  breakpointManager.unmarkCurrentBreakpoint();  breakpointManager.removeAllBreakpoints();  Notification notification=new Notification(constant.debuggerDisconnected(host + ':' + port),INFO);  notificationManager.showNotification(notification);}  }
class C{  public SGDMomentum(double momentum,boolean nestrov){  setMomentum(momentum);  this.nestrov=nestrov;}  }
class C{  @Command(description="Deactivates a certificate") public void deactivateCertificate(@Param(name="certId",description="Certificate ID") String certId) throws Exception {  Map<String,Object> logData=new LinkedHashMap<>();  logData.put(CERT_ID_PARAM,certId);  try {    SignerClient.execute(new ActivateCert(certId,false));    AuditLogger.log(DEACTIVATE_THE_CERTIFICATE_EVENT,XROAD_USER,logData);  } catch (  Exception e) {    AuditLogger.log(DEACTIVATE_THE_CERTIFICATE_EVENT,XROAD_USER,e.getMessage(),logData);    throw e;  }}  }
class C{  public boolean initTab(boolean async){  log.fine("#" + m_vo.TabNo + " - Async="+ async+ " - Where="+ m_vo.WhereClause);  if (isLoadComplete())   return true;  if (m_loader != null && m_loader.isAlive()) {    waitLoadCompete();    if (isLoadComplete())     return true;  }  if (async) {    m_loader=new Loader();    m_loader.start();    return false;  } else {    return loadTab();  }}  }
class C{  private void validateHACapabilities(ExportPathParams pathParams,Map<Initiator,List<StoragePort>> assignments){  if (pathParams.returnExportGroupType() == null || pathParams.returnExportGroupType().equals(ExportGroup.ExportGroupType.Initiator)) {    return;  }  Set<URI> haDomains=null;  Map<URI,List<Initiator>> initiatorsByHostMap=getInitiatorsByHostMap(assignments.keySet());  for (  List<Initiator> initiators : initiatorsByHostMap.values()) {    haDomains=new HashSet<URI>();    int portCount=0;    if (pathParams.getMaxPaths() < 2) {      continue;    }    for (    Initiator initiator : initiators) {      for (      StoragePort port : assignments.get(initiator)) {        portCount++;        haDomains.add(port.getStorageHADomain());      }    }    if (portCount >= 2 && haDomains.size() < 2) {      throw PlacementException.exceptions.insufficientRedundancy(pathParams.getMaxPaths(),haDomains.size());    }  }}  }
class C{  private void clearAndReconnectWifi(ProxyChangeParams params){  try {    clearWifiConfigs();    connectToWifiNetwork(params);  } catch (  Exception e) {    Log.e(TAG,"Error resetting wifi",e);  }}  }
class C{  private ActivityManager.ProcessErrorStateInfo generateProcessError(ProcessRecord app,int condition,String activity,String shortMsg,String longMsg,String stackTrace){  ActivityManager.ProcessErrorStateInfo report=new ActivityManager.ProcessErrorStateInfo();  report.condition=condition;  report.processName=app.processName;  report.pid=app.pid;  report.uid=app.info.uid;  report.tag=activity;  report.shortMsg=shortMsg;  report.longMsg=longMsg;  report.stackTrace=stackTrace;  return report;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String fiducialHeader=args[0];  String outputHeader=args[1];  if (fiducialHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int progress=0;    ArrayList<XYPoint> fiducialMarks=new ArrayList<>();    ShapeFile fiducials=new ShapeFile(fiducialHeader);    if (fiducials.getShapeType().getBaseType() != ShapeType.POINT && fiducials.getShapeType().getBaseType() != ShapeType.MULTIPOINT) {      showFeedback("The input shapefile must be of a 'POINT' or 'MULTIPOINT' data type.");      return;    }    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(0);    fields[0].setFieldLength(10);    ShapeFile output=new ShapeFile(outputHeader,ShapeType.POINT,fields);    int oldProgress=-1;    int n=0;    int numRecords=fiducials.getNumberOfRecords();    progress=0;    for (    ShapeFileRecord record : fiducials.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));    break;case POINTZ:  PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;}}if (cancelOp) {cancelOperation();return;}n++;progress=(int)((n * 100.0) / numRecords);if (progress > oldProgress) {oldProgress=progress;updateProgress(progress);}}int numMarks=fiducialMarks.size();if (numMarks == 8) {double psi=0;double x, y;double DegreeToRad=Math.PI / 180;double[] axes=new double[2];double[][] axesEndPoints=new double[4][2];double newXAxis=0;double newYAxis=0;double longAxis;double shortAxis;final double rightAngle=Math.toRadians(90);double[] newBoundingBox=new double[4];double slope;double boxCentreX, boxCentreY;double[][] verticesRotated=new double[8][2];double east=Double.NEGATIVE_INFINITY;double west=Double.POSITIVE_INFINITY;double north=Double.NEGATIVE_INFINITY;double south=Double.POSITIVE_INFINITY;XYPoint pt;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);if (pt.x > east) {east=pt.x;}if (pt.x < west) {west=pt.x;}if (pt.y > north) {north=pt.y;}if (pt.y < south) {south=pt.y;}}double midX=west + (east - west) / 2.0;double midY=south + (north - south) / 2.0;axes[0]=9999999;axes[1]=9999999;slope=0;boxCentreX=0;boxCentreY=0;for (int m=0; m <= 180; m++) {psi=-m * 0.5 * DegreeToRad;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x - midX;y=pt.y - midY;verticesRotated[i][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));verticesRotated[i][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));}newBoundingBox[0]=Double.MAX_VALUE;newBoundingBox[1]=Double.MIN_VALUE;newBoundingBox[2]=Double.MAX_VALUE;newBoundingBox[3]=Double.MIN_VALUE;for (n=0; n < 8; n++) {x=verticesRotated[n][0];y=verticesRotated[n][1];if (x < newBoundingBox[0]) {newBoundingBox[0]=x;}if (x > newBoundingBox[1]) {newBoundingBox[1]=x;}if (y < newBoundingBox[2]) {newBoundingBox[2]=y;}if (y > newBoundingBox[3]) {newBoundingBox[3]=y;}}newXAxis=newBoundingBox[1] - newBoundingBox[0];newYAxis=newBoundingBox[3] - newBoundingBox[2];if ((newXAxis * newYAxis) < (axes[0] * axes[1])) {axes[0]=newXAxis;axes[1]=newYAxis;if (axes[0] > axes[1]) {slope=-psi;} else {slope=-(rightAngle + psi);}x=newBoundingBox[0] + newXAxis / 2;y=newBoundingBox[2] + newYAxis / 2;boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));}}longAxis=Math.max(axes[0],axes[1]);shortAxis=Math.min(axes[0],axes[1]);axesEndPoints[0][0]=boxCentreX + longAxis / 2.0 * Math.cos(slope);axesEndPoints[0][1]=boxCentreY + longAxis / 2.0 * Math.sin(slope);axesEndPoints[1][0]=boxCentreX - longAxis / 2.0 * Math.cos(slope);axesEndPoints[1][1]=boxCentreY - longAxis / 2.0 * Math.sin(slope);axesEndPoints[2][0]=boxCentreX + shortAxis / 2.0 * Math.cos(rightAngle + slope);axesEndPoints[2][1]=boxCentreY + shortAxis / 2.0 * Math.sin(rightAngle + slope);axesEndPoints[3][0]=boxCentreX - shortAxis / 2.0 * Math.cos(rightAngle + slope);axesEndPoints[3][1]=boxCentreY - shortAxis / 2.0 * Math.sin(rightAngle + slope);double dist;XYPoint p1=new XYPoint();XYPoint p2=new XYPoint();XYPoint p3=new XYPoint();XYPoint p4=new XYPoint();XYPoint p5=new XYPoint();XYPoint p6=new XYPoint();XYPoint p7=new XYPoint();XYPoint p8=new XYPoint();double minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[0][0] - x) * (axesEndPoints[0][0] - x) + (axesEndPoints[0][1] - y) * (axesEndPoints[0][1] - y);if (dist < minDist) {minDist=dist;p1=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[1][0] - x) * (axesEndPoints[1][0] - x) + (axesEndPoints[1][1] - y) * (axesEndPoints[1][1] - y);if (dist < minDist) {minDist=dist;p2=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[2][0] - x) * (axesEndPoints[2][0] - x) + (axesEndPoints[2][1] - y) * (axesEndPoints[2][1] - y);if (dist < minDist) {minDist=dist;p3=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[3][0] - x) * (axesEndPoints[3][0] - x) + (axesEndPoints[3][1] - y) * (axesEndPoints[3][1] - y);if (dist < minDist) {minDist=dist;p4=pt;}}double[][] cornerPoints=new double[4][2];cornerPoints[0][0]=axesEndPoints[0][0] + shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[0][1]=axesEndPoints[0][1] + shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[1][0]=axesEndPoints[0][0] - shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[1][1]=axesEndPoints[0][1] - shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[2][0]=axesEndPoints[1][0] - shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[2][1]=axesEndPoints[1][1] - shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[3][0]=axesEndPoints[1][0] + shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[3][1]=axesEndPoints[1][1] + shortAxis / 2.0 * Math.sin(rightAngle + slope);minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[0][0] - x) * (cornerPoints[0][0] - x) + (cornerPoints[0][1] - y) * (cornerPoints[0][1] - y);if (dist < minDist) {minDist=dist;p5=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[2][0] - x) * (cornerPoints[2][0] - x) + (cornerPoints[2][1] - y) * (cornerPoints[2][1] - y);if (dist < minDist) {minDist=dist;p6=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[1][0] - x) * (cornerPoints[1][0] - x) + (cornerPoints[1][1] - y) * (cornerPoints[1][1] - y);if (dist < minDist) {minDist=dist;p7=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[3][0] - x) * (cornerPoints[3][0] - x) + (cornerPoints[3][1] - y) * (cornerPoints[3][1] - y);if (dist < minDist) {minDist=dist;p8=pt;}}XYPoint intersection=new XYPoint();double denominator=(p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);if (denominator != 0) {double xNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.x - p4.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x);double yNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x);intersection.x=xNumerator / denominator;intersection.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}XYPoint intersection2=new XYPoint();denominator=(p5.x - p6.x) * (p7.y - p8.y) - (p5.y - p6.y) * (p7.x - p8.x);if (denominator != 0) {double xNumerator=(p5.x * p6.y - p5.y * p6.x) * (p7.x - p8.x) - (p5.x - p6.x) * (p7.x * p8.y - p7.y * p8.x);double yNumerator=(p5.x * p6.y - p5.y * p6.x) * (p7.y - p8.y) - (p5.y - p6.y) * (p7.x * p8.y - p7.y * p8.x);intersection2.x=xNumerator / denominator;intersection2.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point((intersection.x + intersection2.x) / 2,(intersection.y + intersection2.y) / 2);Object[] rowData=new Object[1];rowData[0]=new Double(1);output.addRecord(PP,rowData);output.write();} else if (numMarks == 4) {XYPoint p1=fiducialMarks.get(0);XYPoint p2=new XYPoint();XYPoint pt;double dist;double maxDist=0;int k=0;for (int a=1; a < 4; a++) {pt=fiducialMarks.get(a);dist=Math.sqrt((pt.x - p1.x) * (pt.x - p1.x) + (pt.y - p1.y) * (pt.y - p1.y));if (dist > maxDist) {maxDist=dist;p2=pt;k=a;}}int i=0, j=0;switch (k) {case 1:i=2;j=3;break;case 2:i=1;j=3;break;case 3:i=1;j=2;break;}XYPoint p3=fiducialMarks.get(i);XYPoint p4=fiducialMarks.get(j);XYPoint intersection=new XYPoint();double denominator=(p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);if (denominator != 0) {double xNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.x - p4.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x);double yNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x);intersection.x=xNumerator / denominator;intersection.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(intersection.x,intersection.y);Object[] rowData=new Object[1];rowData[0]=new Double(1);output.addRecord(PP,rowData);output.write();} else {showFeedback("There should be either 4 or 8 fiducial marks. \nThere is something wrong with the input file. \nThe operation will be terminated.");return;}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static byte[] toByteArray(final URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  private static boolean existImport(List<String> lines,Class<?> aClass){  for (  String line : lines)   if (GeneralUtility.containsAll(line,"import",aClass.getName(),";"))   return true;  return false;}  }
class C{  public static Writable filterLine(URL self,String charset,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure predicate) throws IOException {  return IOGroovyMethods.filterLine(newReader(self,charset),predicate);}  }
class C{  private void handleHtmlShowNotebooks(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String paneId="notebooks";  final String defaultTitle=servletText.pageTitleNotebooks();  final String notFoundMessage=servletText.errorNotebooksCouldNotBeFound();  final String mayNotSeeMessage=servletText.errorMayNotSeeNotebooks();  final String introMessage=servletText.introTextShowNotebooks(false);  final String touchIntroMessage=servletText.introTextShowNotebooks(true);  final String tooltipNewChild=servletText.tooltipNewNotebook();  final String buttonNewChild=servletText.buttonNewNotebook();  final String titleIfCanSee=defaultTitle;  boolean userCanSee=false;  final User user=canUserSeeUsersData(requestAndResponse,false);  Entry root=null;  if (user != null) {    root=dbLogic.getEntryById(user.getTableOfContentsId());    userCanSee=true;  }  handleHtmlShowEntryTree(requestAndResponse,paneId,defaultTitle,notFoundMessage,mayNotSeeMessage,introMessage,touchIntroMessage,tooltipNewChild,buttonNewChild,titleIfCanSee,root,userCanSee,user,false,"showPopupForCreateNotebook","notebooks",true);}  }
class C{  public AllocationRule(UnitType quantity,Product product){  super();  this.quantity=quantity;  this.product=product;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  @SuppressWarnings("static-method") protected void doAppend(Node el,Node parent){  parent.appendChild(el);}  }
class C{  public void fixRelationships(Vertex type){  int index=0;  for (  Relationship each : orderedRelationships(type)) {    if (each.getIndex() != index) {      each.setIndex(index);    }    index++;  }}  }
class C{  public void testGetTableList(){  System.out.println("getTableList");  ArrayList<TableEntry> expResult=new ArrayList<TableEntry>();  Table instance=new Table(new TableHelper(expResult),null,"123");  ArrayList<TableEntry> result=instance.getTableList();  assertEquals(expResult,result);}  }
class C{  public void removeAgedItems(boolean notify){  if (getItemCount() > 1) {    long latest=getTimePeriod(getItemCount() - 1).getSerialIndex();    boolean removed=false;    while ((latest - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {      this.data.remove(0);      removed=true;    }    if (removed) {      updateMinMaxYByIteration();      if (notify) {        fireSeriesChanged();      }    }  }}  }
class C{  public double zSum(){  double sum=0;  final double[] elems=this.elements;  if (elems == null)   throw new InternalError();  int index=index(0,0);  int cs=this.columnStride;  int rs=this.rowStride;  for (int row=rows; --row >= 0; ) {    for (int i=index, column=columns; --column >= 0; ) {      sum+=elems[i];      i+=cs;    }    index+=rs;  }  return sum;}  }
class C{  private static String generateOverallStatsTable(Set<Report> toolResults){  StringBuilder sb=new StringBuilder();  sb.append("<table class=\"table\">\n");  sb.append("<tr>");  sb.append("<th>Tool</th>");  if (mixedMode)   sb.append("<th>Benchmark Version</th>");  sb.append("<th>TPR*</th>");  sb.append("<th>FPR*</th>");  sb.append("<th>Score*</th>");  sb.append("</tr>\n");  for (  Report toolResult : toolResults) {    if (!(showAveOnlyMode && toolResult.isCommercial())) {      OverallResults or=toolResult.getOverallResults();      Counter c=or.getFindingCounts();      String style="";      if (Math.abs(or.getTruePositiveRate() - or.getFalsePositiveRate()) < .1)       style="class=\"danger\""; else       if (or.getTruePositiveRate() > .7 && or.getFalsePositiveRate() < .3)       style="class=\"success\"";      sb.append("<tr " + style + ">");      sb.append("<td>" + toolResult.getToolNameAndVersion() + "</td>");      if (mixedMode)       sb.append("<td>" + toolResult.getBenchmarkVersion() + "</td>");      sb.append("<td>" + new DecimalFormat("#0.00%").format(or.getTruePositiveRate()) + "</td>");      sb.append("<td>" + new DecimalFormat("#0.00%").format(or.getFalsePositiveRate()) + "</td>");      sb.append("<td>" + new DecimalFormat("#0.00%").format(or.getScore()) + "</td>");      sb.append("</tr>\n");    }  }  sb.append("</tr>\n");  sb.append("</table>");  sb.append("<p>*-Please refer to each tool's scorecard for the data used to calculate these values.");  return sb.toString();}  }
class C{  public void flip(int x,int y){  int offset=y * rowSize + (x >> 5);  bits[offset]^=1 << (x & 0x1f);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:08.796 -0500",hash_original_method="2D70A31B879518D60C1406E8BB394C01",hash_generated_method="E145F432B5A3501F1C005D4211538DCC") public static int primaryOrder(int order){  return ((order & PRIMARY_ORDER_MASK_) >> PRIMARY_ORDER_SHIFT_) & UNSIGNED_16_BIT_MASK_;}  }
class C{  @Override public void warning(SAXParseException exception) throws SAXException {  this.reportWarning(exception.getMessage());}  }
class C{  private void doUpdateWithBody(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final DiskFileItemFactory factory=new DiskFileItemFactory();  final ServletFileUpload upload=new ServletFileUpload(factory);  FileItem add=null, remove=null;  try {    final List<FileItem> items=upload.parseRequest(req);    for (    FileItem item : items) {      if (item.getFieldName().equals("add")) {        if (!validateItem(resp,add=item)) {          return;        }      } else       if (item.getFieldName().equals("remove")) {        if (!validateItem(resp,remove=item)) {          return;        }      }    }  } catch (  FileUploadException ex) {    throw new IOException(ex);  }  final String baseURI=req.getRequestURL().toString();  final boolean suppressTruthMaintenance=getBooleanValue(req,QueryServlet.ATTR_TRUTH_MAINTENANCE,false);  final Resource[] defaultContextInsert;{    final String[] s=req.getParameterValues("context-uri-insert");    if (s != null && s.length > 0) {      try {        defaultContextInsert=toURIs(s);      } catch (      IllegalArgumentException ex) {        buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,ex.getLocalizedMessage());        return;      }    } else {      defaultContextInsert=null;    }  }  final Resource[] defaultContextDelete;{    final String[] s=req.getParameterValues("context-uri-delete");    if (s != null && s.length > 0) {      try {        defaultContextDelete=toURIs(s);      } catch (      IllegalArgumentException ex) {        buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,ex.getLocalizedMessage());        return;      }    } else {      defaultContextDelete=null;    }  }  final String namespace=getNamespace(req);  try {    submitApiTask(new UpdateWithBodyTask(req,resp,namespace,ITx.UNISOLATED,baseURI,suppressTruthMaintenance,remove,defaultContextDelete,add,defaultContextInsert)).get();  } catch (  Throwable t) {    launderThrowable(t,resp,"UPDATE-WITH-BODY: baseURI=" + baseURI + (add == null ? null : ", add=" + add + (defaultContextInsert == null ? "" : ",context-uri-insert=" + Arrays.toString(defaultContextInsert)))+ (remove == null ? null : ", remove=" + remove + (defaultContextDelete == null ? "" : ",context-uri-delete=" + Arrays.toString(defaultContextDelete))));  }}  }
class C{  public static String formatInternal(final Date date){  final String formatedDate=(date == null) ? "N/A" : new SimpleDateFormat(DEFAULT_DATE_TIME_FORMAT).format(date);  return formatedDate;}  }
class C{  protected void damageLineRange(int line0,int line1,Shape a,Component host){  if (a != null) {    Rectangle area0=lineToRect(a,line0);    Rectangle area1=lineToRect(a,line1);    if ((area0 != null) && (area1 != null)) {      Rectangle dmg=area0.union(area1);      host.repaint(dmg.x,dmg.y,dmg.width,dmg.height);    } else     host.repaint();  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public NtpMessage(byte[] array){  leapIndicator=(byte)((array[0] >> 6) & 0x3);  version=(byte)((array[0] >> 3) & 0x7);  mode=(byte)(array[0] & 0x7);  stratum=unsignedByteToShort(array[1]);  pollInterval=array[2];  precision=array[3];  rootDelay=(array[4] * 256.0) + unsignedByteToShort(array[5]) + (unsignedByteToShort(array[6]) / 256.0)+ (unsignedByteToShort(array[7]) / 65536.0);  rootDispersion=(unsignedByteToShort(array[8]) * 256.0) + unsignedByteToShort(array[9]) + (unsignedByteToShort(array[10]) / 256.0)+ (unsignedByteToShort(array[11]) / 65536.0);  referenceIdentifier[0]=array[12];  referenceIdentifier[1]=array[13];  referenceIdentifier[2]=array[14];  referenceIdentifier[3]=array[15];  referenceTimestamp=decodeTimestamp(array,16);  originateTimestamp=decodeTimestamp(array,24);  receiveTimestamp=decodeTimestamp(array,32);  transmitTimestamp=decodeTimestamp(array,40);}  }
class C{  private static MethodType widenOperators(MethodType mt){  if (mt.parameterCount() == 2) {    Class leftType=mt.parameterType(0);    Class rightType=mt.parameterType(1);    if (isIntCategory(leftType) && isIntCategory(rightType))     return IIV;    if (isLongCategory(leftType) && isLongCategory(rightType))     return LLV;    if (isBigDecCategory(leftType) && isBigDecCategory(rightType))     return GGV;    if (isDoubleCategory(leftType) && isDoubleCategory(rightType))     return DDV;    return OOV;  } else   if (mt.parameterCount() == 1) {    Class leftType=mt.parameterType(0);    if (isIntCategory(leftType))     return IV;    if (isLongCategory(leftType))     return LV;    if (isBigDecCategory(leftType))     return GV;    if (isDoubleCategory(leftType))     return DV;  }  return mt;}  }
class C{  private String htmlFilter(String line){  if (line == null || line.equals("")) {    return "";  }  line=replace(line,"&","&#38;");  line=replace(line,"\\\\","&#92;&#92;");  line=replace(line,"" + (char)92 + (char)34,"&#92;&#34");  line=replace(line,"<","&#60;");  line=replace(line,">","&#62;");  return multiLineCommentFilter(line);}  }
class C{  private void registerVarToChildMappingInUsageMap(final IVariable<?> var,final IQueryNode child){  if (var == null)   return;  if (!usageMap.containsKey(var)) {    usageMap.put(var,new ArrayList<IQueryNode>());  }  usageMap.get(var).add(child);}  }
class C{  public static boolean isSomethingHappening(Jenkins jenkins){  if (!jenkins.getQueue().isEmpty())   return true;  for (  Computer n : jenkins.getComputers())   if (!n.isIdle())   return true;  return false;}  }
class C{  public boolean executeCommand(BufferedReader reader){  for (  String s : COMMAND_HELP_MESSAGE) {    out.println(s);  }  System.err.print("Command: ");  try {    String command=reader.readLine();    String[] parts=command.trim().split(" ",2);    String name=parts[0];    String parameters=parts.length > 1 ? parts[1] : "";    if (name.equals("load")) {      loadSheet(reader);    } else     if (name.equals("list")) {      listAllWorksheets();    } else     if (name.equals("create")) {      String[] split=parameters.split(" ",3);      createWorksheet(split[0],Integer.parseInt(split[1]),Integer.parseInt(split[2]));    } else     if (name.equals("update")) {      String[] split=parameters.split(" ",4);      updateWorksheet(split[0],split[1],Integer.parseInt(split[2]),Integer.parseInt(split[3]));    } else     if (name.equals("delete")) {      deleteWorksheet(parameters);    } else     if (name.equals("q") || name.equals("quit")) {      return false;    } else {      out.println("Unknown command.");    }  } catch (  ServiceException se) {    se.printStackTrace();  }catch (  IOException ioe) {    ioe.printStackTrace();  }  return true;}  }
class C{  public boolean isEmpty(){  return callbacks.isEmpty();}  }
class C{  private void validateMetroPointType(MetroPointType metroPointType){  StringBuffer sb=new StringBuffer();  if (metroPointType == MetroPointType.SINGLE_REMOTE) {    sb.append("Preparing volumes for a MetroPoint configuration with a single remote copy.");  } else   if (metroPointType == MetroPointType.LOCAL_ONLY) {    sb.append("Preparing volumes for a MetroPoint configuration with local only copies.");  } else   if (metroPointType == MetroPointType.ONE_LOCAL_REMOTE) {    sb.append("Preparing volumes for a MetroPoint configuration with one local and one remote copy.");  } else   if (metroPointType == MetroPointType.TWO_LOCAL_REMOTE) {    sb.append("Preparing volumes for a MetroPoint configuration with two local copies and one remote copy.");  } else   if (metroPointType == MetroPointType.INVALID) {    throw APIException.badRequests.invalidMetroPointConfiguration();  }  _log.info(sb.toString());}  }
class C{  public static boolean canOpenUri(Uri uri,Context context){  Intent intent=new Intent(Intent.ACTION_VIEW,uri);  PackageManager packageManager=context.getPackageManager();  List<ResolveInfo> resolvedActivities=packageManager.queryIntentActivities(intent,0);  if (resolvedActivities.size() > 0) {    return true;  }  return false;}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>T[] insert(T[] dest,T[] src,int offset,Class componentType){  T[] temp=(T[])Array.newInstance(componentType,dest.length + src.length);  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset,temp,src.length + offset,dest.length - offset);  return temp;}  }
class C{  public static boolean verifyCertificate(X509Certificate signedCert,X509Certificate signingCert) throws CryptoException {  try {    signedCert.verify(signingCert.getPublicKey());    return true;  } catch (  InvalidKeyException ex) {    return false;  }catch (  SignatureException ex) {    return false;  }catch (  NoSuchProviderException ex) {    throw new CryptoException(res.getString("NoVerifyCertificate.exception.message"),ex);  }catch (  NoSuchAlgorithmException ex) {    throw new CryptoException(res.getString("NoVerifyCertificate.exception.message"),ex);  }catch (  CertificateException ex) {    throw new CryptoException(res.getString("NoVerifyCertificate.exception.message"),ex);  }}  }
class C{  protected TXCommitMessage buildCompleteMessage(){  TXCommitMessage msg=new TXCommitMessage(this.proxy.getTxId(),this.proxy.getTxMgr().getDM(),this);  Iterator<Map.Entry<LocalRegion,TXRegionState>> it=this.regions.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<LocalRegion,TXRegionState> me=it.next();    LocalRegion r=me.getKey();    TXRegionState txrs=me.getValue();    txrs.buildCompleteMessage(r,msg);  }  return msg;}  }
class C{  public synchronized Iterator<Node> iterator(){  return this.list.iterator();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:57.011 -0500",hash_original_method="44F26BDA1ACBDD9862A3D8D8968B3507",hash_generated_method="15895C6225025901E093E5A729C5E4E1") public boolean hasLongitude(){  return mHasLongitude;}  }
class C{  public double distance(double[] v1,double[] v2){  final int dim1=v1.length, dim2=v2.length;  final int mindim=(dim1 < dim2) ? dim1 : dim2;  double agg=preDistance(v1,v2,0,mindim);  if (dim1 > mindim) {    agg+=preNorm(v1,mindim,dim1);  } else   if (dim2 > mindim) {    agg+=preNorm(v2,mindim,dim2);  }  return agg;}  }
class C{  private void recordRPOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){  try {    boolean opStatus=(Operation.Status.ready == status) ? true : false;    String evType;    evType=opType.getEvType(opStatus);    String evDesc=opType.getDescription();    String opStage=AuditLogManager.AUDITOP_END;    _log.info("opType: {} detail: {}",opType.toString(),evType.toString() + ':' + evDesc);    recordBourneRPEvent(dbClient,getId(),evType,status,evDesc);switch (opType) {case START_RP_LINK:case STOP_RP_LINK:case PAUSE_RP_LINK:case RESUME_RP_LINK:case FAILOVER_RP_LINK:case FAILOVER_CANCEL_RP_LINK:case CHANGE_RP_IMAGE_ACCESS_MODE:case SWAP_RP_VOLUME:      AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);    break;default :  _log.error("Unrecognized RP operation type");}} catch (Exception e) {_log.error("Failed to record RP operation {}, err: {}",opType.toString(),e);}}  }
class C{  public GF2nElement square(){  return squarePreCalc();}  }
class C{  public void removePropertyChangeListener(final PropertyChangeListener l){  propertySupport.removePropertyChangeListener(l);}  }
class C{  private void initializeSortOrderMap(){  try {    Document document=createDocumentFromDefaultSortOrderFile();    addElementsToSortOrderMap(document.getRootElement(),SORT_ORDER_BASE);  } catch (  IOException|JDOMException e) {    throw new FailureException(e.getMessage(),e);  }}  }
class C{  protected void uploadFile() throws Exception {  String ts=Long.toString(System.currentTimeMillis());  String targetUrl=BandwidthTestUtil.buildDownloadUrl(mTestServer,FILE_SIZE,mDeviceId,ts);  File tmpSaveFile=new File(BASE_DIR + File.separator + TMP_FILENAME);  assertTrue(BandwidthTestUtil.DownloadFromUrl(targetUrl,tmpSaveFile));  ts=Long.toString(System.currentTimeMillis());  NetworkStats pre_test_stats=fetchDataFromProc(mUid);  TrafficStats.startDataProfiling(mContext);  assertTrue(BandwidthTestUtil.postFileToServer(mTestServer,mDeviceId,ts,tmpSaveFile));  NetworkStats prof_stats=TrafficStats.stopDataProfiling(mContext);  Log.d(LOG_TAG,prof_stats.toString());  NetworkStats post_test_stats=fetchDataFromProc(mUid);  NetworkStats proc_stats=post_test_stats.subtract(pre_test_stats);  Bundle results=new Bundle();  results.putString("device_id",mDeviceId);  results.putString("timestamp",ts);  results.putInt("size",FILE_SIZE);  AddStatsToResults(PROF_LABEL,prof_stats,results);  AddStatsToResults(PROC_LABEL,proc_stats,results);  getInstrumentation().sendStatus(INSTRUMENTATION_IN_PROGRESS,results);  assertTrue(cleanUpFile(tmpSaveFile));}  }
class C{  public static Map groupBy(Object[] self,List<Closure> closures){  return groupBy((Iterable)Arrays.asList(self),closures);}  }
class C{  public String debugTipText(){  return "If set to true, classifier may output additional info to " + "the console.";}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3),entryOf(k4,v4));}  }
class C{  public Builder withCommitIndex(long index){  request.commitIndex=Assert.argNot(index,index < 0,"commit index must not be negative");  return this;}  }
class C{  public ESRISpecialistPointRecord(double x,double y){  super(x,y);}  }
class C{  private void removeEngineState(String engineId){  if (log.isInfoEnabled()) {    log.info("Removing engine: " + engineId);  }  try {    if (dataManager.checkExists(getOrdersPath(engineId)) != null) {      for (      String orderId : dataManager.getChildren(getOrdersPath(engineId))) {        String message="Order processing terminated during execution, order was not completed. " + "Check with your administrator. Reboot may have occurred.";        killOrder(URI.create(orderId),message);        dataManager.removeNode(getOrderPath(engineId,orderId));      }      dataManager.removeNode(getEnginePath(engineId));    }  } catch (  Exception e) {    log.error("Error whilst removing " + engineId + " engine state",e);  }}  }
class C{  public static void onPageStart(final String activityName){  log.onPageStart(activityName);}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  public void testUtf8() throws Exception {  String str="AbCdEfGhIjKlMnOpQrStUvWxYzX" + "\u00a3\u00c5\u00c9";  ByteArrayInputStream aa=new ByteArrayInputStream(str.getBytes());  InputStreamReader a=new InputStreamReader(aa);  try {    assertEquals("UTF-8",a.getEncoding());    int x=a.read();    assertEquals('A',x);    char[] c=new char[29];    x=a.read(c,0,3);    assertEquals(3,x);    assertEquals("bCd",new String(c,0,3));    x=a.read(c,3,26);    assertEquals(26,x);    assertEquals("EfGhIjKlMnOpQrStUvWxYzX\u00a3\u00c5\u00c9",new String(c,3,26));  }  finally {    a.close();  }}  }
class C{  public int oom_adj() throws IOException {  return Integer.parseInt(read("oom_adj"));}  }
class C{  public MailBuilder content(Body body){  return text(body.text()).html(body.html());}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public boolean hasSpMonitorViewPermission(){  return permissionService.hasPermission(SpPermission.SYSTEM_MONITOR);}  }
class C{  public int compare(Percent o1,Percent o2){  int returnVal=CoreUtils.nullSafeComparator(o1.getBigDecimalValue(),o2.getBigDecimalValue());  if (m_ascending.equals(Boolean.FALSE)) {    returnVal=returnVal * -1;  }  return returnVal;}  }
class C{  public void refresh(){  LOGGER.info("Refreshing styles..");  makeStyles();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.425 -0500",hash_original_method="AB29CC034AE7D29F14B7C45BD47F3CB4",hash_generated_method="B59D1AD960FA4F98A51110DB906B3FDC") @Override @Deprecated public void write(ObjectOutput output) throws IOException {  if (!output.equals(oos)) {    throw new IllegalArgumentException("Attempting to write to a different stream than the one that created this PutField");  }  for (  EmulatedFields.ObjectSlot slot : emulatedFields.slots()) {    Object fieldValue=slot.getFieldValue();    Class<?> type=slot.getField().getType();    if (type == int.class) {      output.writeInt(fieldValue != null ? ((Integer)fieldValue).intValue() : 0);    } else     if (type == byte.class) {      output.writeByte(fieldValue != null ? ((Byte)fieldValue).byteValue() : 0);    } else     if (type == char.class) {      output.writeChar(fieldValue != null ? ((Character)fieldValue).charValue() : 0);    } else     if (type == short.class) {      output.writeShort(fieldValue != null ? ((Short)fieldValue).shortValue() : 0);    } else     if (type == boolean.class) {      output.writeBoolean(fieldValue != null ? ((Boolean)fieldValue).booleanValue() : false);    } else     if (type == long.class) {      output.writeLong(fieldValue != null ? ((Long)fieldValue).longValue() : 0);    } else     if (type == float.class) {      output.writeFloat(fieldValue != null ? ((Float)fieldValue).floatValue() : 0);    } else     if (type == double.class) {      output.writeDouble(fieldValue != null ? ((Double)fieldValue).doubleValue() : 0);    } else {      output.writeObject(fieldValue);    }  }}  }
class C{  public double readDouble(){  return Double.longBitsToDouble(readLong());}  }
class C{  private void onCrashIntent(Intent intent){  int nextTestToRun=intent.getIntExtra("crashedTestIndex",-1) + 1;  if (nextTestToRun > 0 && nextTestToRun <= mTotalTestCount) {    restartExecutor(nextTestToRun);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.442 -0400",hash_original_method="4745F366B4E323504C75B60DAA491ED5",hash_generated_method="D86553B526AFFDF5221B72B98CC82A76") public String doubleMetaphone(String value,boolean alternate){  value=cleanInput(value);  if (value == null) {    return null;  }  boolean slavoGermanic=isSlavoGermanic(value);  int index=isSilentStart(value) ? 1 : 0;  DoubleMetaphoneResult result=new DoubleMetaphoneResult(this.getMaxCodeLen());  while (!result.isComplete() && index <= value.length() - 1) {switch (value.charAt(index)) {case 'A':case 'E':case 'I':case 'O':case 'U':case 'Y':      index=handleAEIOUY(value,result,index);    break;case 'B':  result.append('P');index=charAt(value,index + 1) == 'B' ? index + 2 : index + 1;break;case '\u00C7':result.append('S');index++;break;case 'C':index=handleC(value,result,index);break;case 'D':index=handleD(value,result,index);break;case 'F':result.append('F');index=charAt(value,index + 1) == 'F' ? index + 2 : index + 1;break;case 'G':index=handleG(value,result,index,slavoGermanic);break;case 'H':index=handleH(value,result,index);break;case 'J':index=handleJ(value,result,index,slavoGermanic);break;case 'K':result.append('K');index=charAt(value,index + 1) == 'K' ? index + 2 : index + 1;break;case 'L':index=handleL(value,result,index);break;case 'M':result.append('M');index=conditionM0(value,index) ? index + 2 : index + 1;break;case 'N':result.append('N');index=charAt(value,index + 1) == 'N' ? index + 2 : index + 1;break;case '\u00D1':result.append('N');index++;break;case 'P':index=handleP(value,result,index);break;case 'Q':result.append('K');index=charAt(value,index + 1) == 'Q' ? index + 2 : index + 1;break;case 'R':index=handleR(value,result,index,slavoGermanic);break;case 'S':index=handleS(value,result,index,slavoGermanic);break;case 'T':index=handleT(value,result,index);break;case 'V':result.append('F');index=charAt(value,index + 1) == 'V' ? index + 2 : index + 1;break;case 'W':index=handleW(value,result,index);break;case 'X':index=handleX(value,result,index);break;case 'Z':index=handleZ(value,result,index,slavoGermanic);break;default :index++;break;}}return alternate ? result.getAlternate() : result.getPrimary();}  }
class C{  public int fontRevision(){  return this.data.readFixed(Offset.fontRevision.offset);}  }
class C{  private void updateFileName(){  String filename=mFile.toString();  if (mFileRolloverCounter == 2) {    filename=filename.replace(".wav","_2.wav");  } else {    Matcher m=FILENAME_PATTERN.matcher(filename);    if (m.find()) {      StringBuilder sb=new StringBuilder();      sb.append(m.group(1));      sb.append(mFileRolloverCounter);      sb.append(m.group(3));      filename=sb.toString();    }  }  mFile=Paths.get(filename);}  }
class C{  public DataSource createDataSource(String configName,DataObject[] objs,Map<String,String> computedValueMap){  CustomConfigType item=configTypeProvider.getCustomConfigType(configName);  Map<Class<? extends DataObject>,DataObject> objectsMap=toMap(objs);  DataSource dataSource=new DataSource();  DataObject object=null;  Object val=null;  for (  DataSourceVariable prop : item.getDataSourceVariables().keySet()) {    if (prop instanceof ComputedDataSourceVariable) {      val=computedValueMap.get(((ComputedDataSourceVariable)prop).getComputedPropertyName());    } else {      object=objectsMap.get(prop.getSourceClass());      if (object != null) {        val=DataObjectUtils.getPropertyValue(object.getClass(),object,prop.getPropertyName());      }    }    dataSource.addProperty(prop.getDisplayName(),val == null ? "" : val.toString());  }  return dataSource;}  }
class C{  private void savePossibleSimpleKey(){  boolean required=(this.flowLevel == 0) && (this.indent == this.reader.getColumn());  if (allowSimpleKey || !required) {  } else {    throw new YAMLException("A simple key is required only if it is the first token in the current line");  }  if (this.allowSimpleKey) {    removePossibleSimpleKey();    int tokenNumber=this.tokensTaken + this.tokens.size();    SimpleKey key=new SimpleKey(tokenNumber,required,reader.getIndex(),reader.getLine(),this.reader.getColumn(),this.reader.getMark());    this.possibleSimpleKeys.put(this.flowLevel,key);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.207 -0400",hash_original_method="909FFC16C0B9FBAB3B83F42C1CD957F7",hash_generated_method="2FE42D204BB6C722AF9335E447009126") public static long checksumCRC32(File file) throws IOException {  CRC32 crc=new CRC32();  checksum(file,crc);  return crc.getValue();}  }
class C{  public static FieldInfo of(Field field){  if (field == null) {    return null;  }synchronized (CACHE) {    FieldInfo fieldInfo=CACHE.get(field);    boolean isEnumContant=field.isEnumConstant();    if (fieldInfo == null && (isEnumContant || !Modifier.isStatic(field.getModifiers()))) {      String fieldName;      if (isEnumContant) {        Value value=field.getAnnotation(Value.class);        if (value != null) {          fieldName=value.value();        } else {          NullValue nullValue=field.getAnnotation(NullValue.class);          if (nullValue != null) {            fieldName=null;          } else {            return null;          }        }      } else {        Key key=field.getAnnotation(Key.class);        if (key == null) {          return null;        }        fieldName=key.value();        field.setAccessible(true);      }      if ("##default".equals(fieldName)) {        fieldName=field.getName();      }      fieldInfo=new FieldInfo(field,fieldName);      CACHE.put(field,fieldInfo);    }    return fieldInfo;  }}  }
class C{  public void testSetF22(){  boolean f22=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF22(f22);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F21-F28 since no command station defined");}  }
class C{  private byte[] sendGetInfo(String suffix,boolean authRequired) throws IOException, NetworkException {  URL url=new URL(getHttpServerAddr().toString());  String protocol=url.getProtocol();  String host=url.getHost();  String path=url.getPath();  String query="tid=" + mTId + suffix;  Uri uri=new Uri.Builder().scheme(protocol).encodedAuthority(host).encodedPath(path).encodedQuery(query).build();  url=new URL(uri.toString());  Map<String,String> properties=new HashMap<>();  if (authRequired && mAuth != null) {    String authValue=mAuth.generateAuthorizationHeaderValue("GET",url.getPath(),"");    properties.put("Authorization",authValue);  }  HttpURLConnection connection=null;  boolean httpTraceEnabled=isHttpTraceEnabled();  try {    connection=openHttpConnection(url,properties);    connection.setReadTimeout(HTTP_READ_TIMEOUT);    if (httpTraceEnabled) {      StringBuilder trace=new StringBuilder(">>> Send HTTP request:\nGET ").append(url);      Map<String,List<String>> headers=connection.getHeaderFields();      for (      Entry<String,List<String>> header : headers.entrySet()) {        trace.append("\n").append(header.getKey()).append(" ").append(header.getValue());      }      System.out.println(trace);    }    int statusCode=connection.getResponseCode();    String message=connection.getResponseMessage();    if (sLogger.isActivated()) {      sLogger.debug("Get info (" + suffix + ") Response: "+ statusCode+ "("+ message+ ")");    }    if (httpTraceEnabled) {      StringBuilder trace=new StringBuilder("<<< Receive HTTP response: ").append(statusCode).append(" ").append(message);      Map<String,List<String>> headers=connection.getHeaderFields();      for (      Entry<String,List<String>> header : headers.entrySet()) {        trace.append("\n").append(header.getKey()).append(" ").append(header.getValue());      }      System.out.println(trace);    }switch (statusCode) {case HttpURLConnection.HTTP_UNAUTHORIZED:      if (authRequired) {        throw new IOException("Unexpected response from server, got " + statusCode + " for the second time. Authentication rejected.");      }    String authHeader=connection.getHeaderField("www-authenticate");  if (StringUtils.isEmpty(authHeader)) {    throw new IOException("headers malformed in 401 response");  }if (mAuth == null) {  mAuth=new HttpAuthenticationAgent(getHttpServerLogin(),getHttpServerPwd());}mAuth.readWwwAuthenticateHeader(authHeader);return sendGetInfo(suffix,true);case HttpURLConnection.HTTP_OK:String resp=readStream(connection.getInputStream());return resp.getBytes(UTF8);default :return null;}}  finally {if (connection != null) {connection.disconnect();}}}  }
class C{  public synchronized void release(){  index.clear();}  }
class C{  @Before public void clear(){  rdfRepository.clear();}  }
class C{  protected void showHistory(int record_id){  log.info("");  int C_BPartner_ID=record_id;  if (C_BPartner_ID <= 0)   return;  InvoiceHistory ih=new InvoiceHistory(this,C_BPartner_ID,0,0,0);  ih.setVisible(true);  ih=null;}  }
class C{  public VNXeCommandJob createLunGroupSnap(LunSnapCreateParam param) throws VNXeException {  return postRequestAsync(param);}  }
class C{  public ValidatorTestCase(String name){  super(name);}  }
class C{  public BreakpointConditionSetReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  public void stopTiming(){  stop=System.currentTimeMillis();}  }
class C{  @LargeTest public void testStressThumbnailVideoItem() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H264_BP_640x480_15fps_1200Kbps_AACLC_48KHz_64kps_m_0_27.3gp";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String[] loggingInfo=new String[1];  int i=0;  final MediaVideoItem mediaVideoItem=new MediaVideoItem(mVideoEditor,"m1",videoItemFileName,renderingMode);  writeTestCaseHeader("testStressThumbnailVideoItem");  getBeginMemory();  for (i=0; i < 50; i++) {    if (i % 4 == 0) {      final Bitmap[] thumbNails=mediaVideoItem.getThumbnailList(mediaVideoItem.getWidth() * 3,mediaVideoItem.getHeight() / 2,i,5000,2);      for (int i1=0; i1 < thumbNails.length; i1++) {        thumbNails[i1].recycle();      }    }    if (i % 4 == 1) {      final Bitmap[] thumbNails=mediaVideoItem.getThumbnailList(mediaVideoItem.getWidth() / 2,mediaVideoItem.getHeight() * 3,i,5000,2);      for (int i1=0; i1 < thumbNails.length; i1++) {        thumbNails[i1].recycle();      }    }    if (i % 4 == 2) {      final Bitmap[] thumbNails=mediaVideoItem.getThumbnailList(mediaVideoItem.getWidth() * 2,mediaVideoItem.getHeight() / 3,i,5000,2);      for (int i1=0; i1 < thumbNails.length; i1++) {        thumbNails[i1].recycle();      }    }    if (i % 4 == 3) {      final Bitmap[] thumbNails=mediaVideoItem.getThumbnailList(mediaVideoItem.getWidth(),mediaVideoItem.getHeight(),i,5000,2);      for (int i1=0; i1 < thumbNails.length; i1++) {        thumbNails[i1].recycle();      }    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,false,i);    }  }  getAfterMemory_updateLog(loggingInfo,false,i);}  }
class C{  @SuppressWarnings("unchecked") public void completeIntent(Plugin plugin){  Preconditions.checkState(intents.contains(plugin),"Plugin %s has not registered intent for event %s",plugin,this);  intents.remove(plugin);  if (fired.get()) {    if (latch.decrementAndGet() == 0) {      done.done((T)this,null);    }  } else {    latch.decrementAndGet();  }}  }
class C{  private void initPannel(){  progressBar=new WebProgressBar();  progressBar.setFont(R.getCouriernormal());  progressBar.setStringPainted(true);  mainPannel.setSize(798,224);  mainPannel.setLayout(null);  mainPannel.setBackground(R.PANELS_BACK_COLOR);  apk1.getProgressBar().setBounds(10,5,780,40);  apk1.getProgressBar().setFont(R.getCouriernormal());  apk1.getProgressBar().setBackground(Color.white);  apk1.getProgressBar().setBgBottom(new Color(236,240,241));  apk1.getProgressBar().setBgTop(new Color(189,195,199));  apk1.getProgressBar().setProgressTopColor(new Color(46,204,113));  apk1.getProgressBar().setProgressBottomColor(new Color(39,174,96));  apk2.getProgressBar().setBounds(10,49,780,40);  apk2.getProgressBar().setFont(R.getCouriernormal());  apk2.getProgressBar().setBackground(Color.white);  apk2.getProgressBar().setBgBottom(new Color(236,240,241));  apk2.getProgressBar().setBgTop(new Color(189,195,199));  apk2.getProgressBar().setProgressTopColor(new Color(46,204,113));  apk2.getProgressBar().setProgressBottomColor(new Color(39,174,96));  jar.getProgressBar().setBounds(10,93,780,40);  jar.getProgressBar().setFont(R.getCouriernormal());  jar.getProgressBar().setBackground(Color.white);  jar.getProgressBar().setBgBottom(new Color(236,240,241));  jar.getProgressBar().setBgTop(new Color(189,195,199));  jar.getProgressBar().setProgressTopColor(new Color(46,204,113));  jar.getProgressBar().setProgressBottomColor(new Color(39,174,96));  boot.progressBar.setBounds(10,137,780,40);  boot.progressBar.setFont(R.getCouriernormal());  boot.progressBar.setBackground(Color.white);  boot.progressBar.setBgBottom(new Color(236,240,241));  boot.progressBar.setBgTop(new Color(189,195,199));  boot.progressBar.setProgressTopColor(new Color(46,204,113));  boot.progressBar.setProgressBottomColor(new Color(39,174,96));  progressBar.setBounds(10,181,780,40);  progressBar.setMinimum(0);  progressBar.setMaximum(apk1.getProgressBar().getMaximum() + apk2.getProgressBar().getMaximum() + jar.getProgressBar().getMaximum()+ boot.progressBar.getMaximum());  progressBar.setBackground(Color.WHITE);  progressBar.setBgBottom(new Color(236,240,241));  progressBar.setBgTop(new Color(189,195,199));  progressBar.setProgressTopColor(new Color(155,89,182));  progressBar.setProgressBottomColor(new Color(142,68,173));  mainPannel.add(apk1.getProgressBar());  mainPannel.add(apk2.getProgressBar());  mainPannel.add(jar.getProgressBar());  mainPannel.add(boot.progressBar);  mainPannel.add(progressBar);}  }
class C{  private void validateTypeNotIn(TypeMirror t,Set<TypeKind> invalidKinds){  if (invalidKinds.contains(t.getKind()))   throw new IllegalArgumentException(t.toString());}  }
class C{  public static boolean isXPointerQuery(String uriValue,final boolean strict){  if (uriValue.isEmpty() || uriValue.charAt(0) != '#') {    return false;  }  final String decodedUri;  try {    decodedUri=URLDecoder.decode(uriValue,"utf-8");  } catch (  UnsupportedEncodingException e) {    LOG.warn("utf-8 not a valid encoding",e);    return false;  }  final String parts[]=decodedUri.substring(1).split("\\s");  if (parts.length == 1 && !parts[0].startsWith(XNS_OPEN)) {    return strict ? false : true;  }  int ii=0;  for (; ii < parts.length - 1; ++ii) {    if (!parts[ii].endsWith(")") || !parts[ii].startsWith(XNS_OPEN)) {      return false;    }  }  if (!parts[ii].endsWith(")") || !parts[ii].startsWith(XP_OPEN)) {    return false;  }  return true;}  }
class C{  protected float floatSpeed(int lSpeed){  if (lSpeed == 0) {    return 0.0f;  }  if (getSpeedStepMode() == jmri.DccThrottle.SpeedStepMode28) {    int step=(int)Math.ceil(lSpeed / 4.65);    return step * SPEED_STEP_28_INCREMENT;  }  return ((lSpeed) / 126.f);}  }
class C{  public void removeAxis(String name){  axes.remove(name);  axisRenderers.remove(name);  axisDrawables.remove(name);}  }
class C{  public void removeFromBucket(BasicBlock block){  bucket.remove(block);}  }
class C{  public void popElemAttributeSet(){  m_attrSetStack.pop();}  }
class C{  public static <I,A>Parser<I,A> choice(Parser<I,? extends A> p1,Parser<I,? extends A> p2,Parser<I,? extends A> p3,Parser<I,? extends A> p4){  return or(p1,or(p2,or(p3,p4)));}  }
class C{  private Bitmap crop(BitmapFactory.Options outOptions) throws IOException {  InputStream inputStream=openBitmapInputStream();  try {    Bitmap fullResolutionBitmap=BitmapFactory.decodeStream(inputStream,null,outOptions);    if (fullResolutionBitmap == null) {      throw new IOException("Cannot decode bitmap: " + mUri);    }    return Bitmap.createBitmap(fullResolutionBitmap,mX,mY,mWidth,mHeight);  }  finally {    if (inputStream != null) {      inputStream.close();    }  }}  }
class C{  protected boolean isGranted(boolean checkForExpiration){  if (checkForExpiration) {    checkForExpiration();  }  return isLeaseHeld();}  }
class C{  @SuppressWarnings("resource") public static <T>PersistentResource<T> createObject(PersistentResource<?> parent,Class<T> entityClass,RequestScope requestScope,String uuid){  DataStoreTransaction tx=requestScope.getTransaction();  T obj=tx.createObject(entityClass);  PersistentResource<T> newResource=new PersistentResource<>(obj,parent,uuid,requestScope);  checkPermission(CreatePermission.class,newResource);  newResource.auditClass(Audit.Action.CREATE,new ChangeSpec(newResource,null,null,newResource.getObject()));  newResource.runTriggers(OnCreate.class);  requestScope.queueCommitTrigger(newResource);  String type=newResource.getType();  requestScope.getObjectEntityCache().put(type,uuid,newResource.getObject());  requestScope.getDictionary().getRelationships(entityClass).stream().filter(null).forEach(null);  requestScope.getNewPersistentResources().add(newResource);  newResource.markDirty();  return newResource;}  }
class C{  protected void configAndStartMediaPlayer(){  if (mPlayer == null) {    throw new IllegalStateException("mPlayer is NULL");  }  if (mAudioFocus == AudioFocus.NO_FOCUS) {    if (mPlayer.isPlaying()) {      mPlayer.pause();    }  } else {    if (mAudioFocus == AudioFocus.NO_FOCUS_CAN_DUCK) {      mPlayer.setVolume(DUCK_VOLUME,DUCK_VOLUME);    } else {      mPlayer.setVolume(1.0f,1.0f);    }    if (!mPlayer.isPlaying()) {      mPlayer.start();    }  }}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ZDT4(){  super(10);}  }
class C{  public void add(String name,T val){  nvPairs.add(name);  nvPairs.add(val);}  }
class C{  private void init(){  setTitle("New LMS Network");  Box panel=Box.createVerticalBox();  inputLayer=new LayerCreationPanel("Input layer",5);  inputLayer.setComboBox("Linear");  outputLayer=new LayerCreationPanel("Output layer",5);  outputLayer.setComboBox("Linear");  panel.add(outputLayer);  panel.add(inputLayer);  setContentPane(panel);  pack();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.316 -0500",hash_original_method="0B8FC63E2385743B0CD030A74D7237E0",hash_generated_method="E4AD0EEA9BC532D70FB4390F0FDD4FED") public Picture(Picture src){  addTaint(src.getTaint());}  }
class C{  public static String escapeHTML(String aString){  String escaped=aString;  for (  Entry<Character,String> entry : HTML_ENTITIES.entrySet()) {    if (escaped.indexOf(entry.getKey()) >= 0) {      escaped=escaped.replace(entry.getKey().toString(),entry.getValue());    }  }  return escaped;}  }
class C{  @SuppressWarnings("deprecation") @Override public void onSetUp() throws Exception {  super.onSetUp();  if (!serverStarted && isMustStartServlet()) {    String separator=System.getProperty("file.separator");    String solrDataDirPropertyName="solr.data.dir";    String solrDataDirValue="./target" + separator + "classes"+ separator+ "data";    if (System.getProperty(solrDataDirPropertyName) == null || !System.getProperty(solrDataDirPropertyName).equals(solrDataDirValue)) {      logger.info("change system property from " + System.getProperty(solrDataDirPropertyName) + " to "+ solrDataDirValue);      System.setProperty(solrDataDirPropertyName,solrDataDirValue);      logger.info("System property " + solrDataDirPropertyName + " is now : "+ System.getProperty(solrDataDirPropertyName));    } else {      logger.info(solrDataDirPropertyName + "=" + System.getProperty("file.encoding"));    }    String jetty_default=new java.io.File("./start.jar").exists() ? "." : "./src/dist/";    ;    String jetty_home=System.getProperty("jetty.home",jetty_default);    Server server=new Server();    int port=generateRandomPort();    Connector connector=new SelectChannelConnector();    connector.setPort(Integer.getInteger("jetty.port",port).intValue());    server.setConnectors(new Connector[]{connector});    WebAppContext webapp=new WebAppContext();    webapp.setContextPath(FULLTEXT_SEARCH_ENGINE_CONTEXT);    webapp.setWar(jetty_home + "webapps/solr.war");    webapp.setDefaultsDescriptor(jetty_home + "etc/webdefault.xml");    server.setHandler(webapp);    server.setStopAtShutdown(true);    logger.info("will start jetty on " + port);    serverStarted=true;    server.start();    fulltextSearchUrlBinded=("http://localhost:" + port + FULLTEXT_SEARCH_ENGINE_CONTEXT);    this.solrClient.bindToUrl(fulltextSearchUrlBinded);    this.solrClient.setSolRLogLevel(Level.OFF);  }  if (isMustStartServlet()) {    this.solRSynchroniser.deleteAll();  }}  }
class C{  public static WebDoc createPage(Properties ctx,HttpServletRequest request,int AD_Record_ID,int AD_Table_ID){  WebDoc doc=null;  String TableName=null;  int AD_Window_ID=0;  int PO_Window_ID=0;  String sql="SELECT TableName, AD_Window_ID, PO_Window_ID FROM AD_Table WHERE AD_Table_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      TableName=rs.getString(1);      AD_Window_ID=rs.getInt(2);      PO_Window_ID=rs.getInt(3);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (TableName == null || AD_Window_ID == 0) {    doc=WebDoc.createPopup("No Context");    doc.addPopupClose(ctx);    return doc;  }  boolean isSOTrx=true;  if (PO_Window_ID != 0) {    String whereClause=TableName + "_ID=" + AD_Record_ID;    isSOTrx=DB.isSOTrx(TableName,whereClause);    if (!isSOTrx)     AD_Window_ID=PO_Window_ID;  }  WWindowStatus ws=WWindowStatus.get(request);  HttpSession sess=request.getSession();  WebSessionCtx wsc=WebSessionCtx.get(request);  if (ws != null) {    int WindowNo=ws.mWindow.getWindowNo();    log.fine("Disposing - WindowNo=" + WindowNo + ", ID="+ ws.mWindow.getAD_Window_ID());    ws.mWindow.dispose();    Env.clearWinContext(wsc.ctx,WindowNo);  }  GridWindowVO mWindowVO=GridWindowVO.create(ctx,s_WindowNo++,AD_Window_ID,0);  if (mWindowVO == null) {    String msg=Msg.translate(ctx,"AD_Window_ID") + " " + Msg.getMsg(ctx,"NotFound")+ ", ID="+ AD_Window_ID+ "/"+ 0;    doc=WebDoc.createPopup(msg);    doc.addPopupClose(ctx);    return doc;  }  ws=new WWindowStatus(mWindowVO);  sess.setAttribute(WWindowStatus.NAME,ws);  ws.mWindow.initTab(ws.curTab.getTabNo());  ws.curTab.setQuery(MQuery.getEqualQuery(TableName + "_ID",AD_Record_ID));  ws.curTab.query(false);  return doc;}  }
class C{  public static Typeface ostrichRegular(Context context){  return FontSourceProcessor.process(R.raw.ostrich_regular,context);}  }
class C{  public boolean client(){  return getFlag(CLIENT_FLAG_POS);}  }
class C{  public Pharmacy(){  super();}  }
class C{  public static CCIntervalAction action(float duration){  return new CCIntervalAction(duration);}  }
class C{  private void publish(){  String actionTaken=context.getString(R.string.toast_pub_success,(Object[])additionalArgs);  c.addAction(actionTaken);  Notify.toast(context,actionTaken,Toast.LENGTH_SHORT);}  }
class C{  public WebSocketTunnelRequest(UpgradeRequest request){  this.handshakeParameters=request.getParameterMap();}  }
class C{  Object processURL(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    return value;  }}  }
class C{  public static Key<Cursor> createKey(CursorType cursorType,ImmutableObject scope){  Key<? extends ImmutableObject> scopeKey=Key.create(scope);  checkValidCursorTypeForScope(cursorType,scopeKey);  return Key.create(getCrossTldKey(),Cursor.class,generateId(cursorType,scopeKey));}  }
class C{  public short readLittleEndianShort(){  return (short)((data[position++] & 0xFF) | (data[position++] & 0xFF) << 8);}  }
class C{  public static void main(final String[] args) throws IOException {  String indexPath=args[0];  int dimension=Integer.parseInt(args[1]);  IndexType indexType=null;  if (args[2].toLowerCase().equals("angular"))   indexType=IndexType.ANGULAR; else   if (args[2].toLowerCase().equals("euclidean"))   indexType=IndexType.EUCLIDEAN; else   throw new RuntimeException("wrong index type specified");  int queryItem=Integer.parseInt(args[3]);  ANNIndex annIndex=new ANNIndex(dimension,indexPath,indexType);  float[] u=annIndex.getItemVector(queryItem);  System.out.printf("vector[%d]: ",queryItem);  for (  float x : u) {    System.out.printf("%2.2f ",x);  }  System.out.printf("\n");  List<Integer> nearestNeighbors=annIndex.getNearest(u,10);  for (  int nn : nearestNeighbors) {    float[] v=annIndex.getItemVector(nn);    System.out.printf("%d %d %f\n",queryItem,nn,(indexType == IndexType.ANGULAR) ? cosineMargin(u,v) : euclideanDistance(u,v));  }}  }
class C{  private static void initArrayList(ArrayList al,String str){  StringTokenizer strTknr=new StringTokenizer(str,"|");  while (strTknr.hasMoreTokens()) {    al.add(strTknr.nextToken());  }}  }
class C{  private void analyze(File file,int burnin,double mrsd,double scale){  if (file.isFile()) {    try {      String name=file.getCanonicalPath();      report(name,burnin,mrsd,scale);    } catch (    IOException e) {    }  } else {    File[] files=file.listFiles();    for (    File f : files) {      if (f.isDirectory()) {        analyze(f,burnin,mrsd,scale);      } else       if (f.getName().endsWith(".trees")) {        analyze(f,burnin,mrsd,scale);      }    }  }}  }
class C{  private Map<URI,Map> computeMap(MapBuilderTerm term1,MapBuilderTerm term2){  Map<URI,Map> outputMap=new HashMap<URI,Map>();  for (  URI uri : term1.duples.keySet()) {    Map map=new HashMap();    Object object1=getObject(term1.alias,uri,term1.type);    if (object1 == null) {      continue;    }    Object object2=null;    object2=getObject(term2.alias,term1.duples.get(uri),term2.type,term2.map);    if (object2 == null) {      continue;    }    map.put(object1,object2);    outputMap.put(uri,map);  }  return outputMap;}  }
class C{  public synchronized boolean isValid(int timeout) throws SQLException {  try {    return ((java.sql.Connection)this.mc).isValid(timeout);  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }  return false;}  }
class C{  public boolean chunkExists(int x,int z){  return true;}  }
class C{  private String pickLowerOrUpper(String inputMode){  int pos=getCursorPosition() - 1;  if (pendingCommit) {    pos--;  }  String text=getText();  if (pos >= text.length()) {    pos=text.length() - 1;  }  while (pos > -1) {    if (text.charAt(pos) == '.') {      return inputMode.toUpperCase();    }    if (text.charAt(pos) != ' ') {      return inputMode.toLowerCase();    }    pos--;  }  return inputMode.toUpperCase();}  }
class C{  private int insertUnassignedGroup() throws SQLException {  PreparedStatement groupStatement;  final int ruleid=insertUnassignedRule();  final int evaluationOrder=getNumOfGroups() + 1;  String unassignedGroupSqlStatement="INSERT INTO " + GROUPS_TABLE + " (GROUP_NAME, "+ "GROUP_TYPE, DATA_TYPE, RULE_INTERNAL_ID, EVALUATION_ORDER) "+ "VALUES ('%s', %d, %d, %d, %d)";  unassignedGroupSqlStatement=String.format(unassignedGroupSqlStatement,UNASSIGNED_GROUP,UNASSIGNED_GROUP_TYPE,UNASSIGNED_DATA_TYPE,ruleid,evaluationOrder);  groupStatement=prepareStatement(unassignedGroupSqlStatement,new String[]{"GROUP_INTERNAL_ID"});  groupStatement.execute();  return getInternalId(groupStatement);}  }
class C{  public void addTextLabel(double x,String text){  addXTextLabel(x,text);}  }
class C{  public static String[] arraySplit(String s,char separatorChar,boolean trim){  if (s == null) {    return null;  }  int length=s.length();  if (length == 0) {    return new String[0];  }  ArrayList<String> list=New.arrayList();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == separatorChar) {      String e=buff.toString();      list.add(trim ? e.trim() : e);      buff.setLength(0);    } else     if (c == '\\' && i < length - 1) {      buff.append(s.charAt(++i));    } else {      buff.append(c);    }  }  String e=buff.toString();  list.add(trim ? e.trim() : e);  String[] array=new String[list.size()];  list.toArray(array);  return array;}  }
class C{  public void debug(String s){  if (isEnabled(TraceSystem.DEBUG)) {    traceWriter.write(TraceSystem.DEBUG,s,null);  }}  }
class C{  @Override public void onDisabled(Context context,Intent intent){  super.onDisabled(context,intent);  Toast.makeText(context,R.string.device_admin_disabled,Toast.LENGTH_LONG).show();  regId=Preference.getString(context,context.getResources().getString(R.string.shared_pref_regId));  if (regId != null && !regId.isEmpty()) {    startUnRegistration(context);  }}  }
class C{  public static boolean isEmpty(){  BaggageImpl impl=Baggage.current.get();  return impl == null || impl.isEmpty();}  }
class C{  NodeTextRep substituteInNodeText(FormalParamNode[] formalParams,String[] arguments,boolean[] isBoundedIdRenaming,SemanticNode[] argNodes,ExprNode sn,NodeTextRep nodeTextRep,Decomposition decomp){  NodeTextRep result=nodeTextRep.clone();  int numOfLines=result.nodeText.length;  Vector<Insertion>[] inserts=new Vector[numOfLines];  for (int i=0; i < numOfLines; i++) {    inserts[i]=new Vector();  }  int beginLine=sn.stn.getLocation().beginLine();  for (int i=0; i < arguments.length; i++) {    SemanticNode[] uses=ResourceHelper.getUsesOfSymbol(formalParams[i],sn);    String replacementText=arguments[i];    int sourceTextLength=getCurrentName(formalParams[i],decomp.renaming).length();    boolean mayNeedParens=false;    if (primingNeedsParens(argNodes[i]) && ((replacementText.charAt(replacementText.length() - 1) != '\'') || replacementText.startsWith("\\/") || replacementText.startsWith("/\\"))) {      mayNeedParens=true;    }    for (int j=0; j < uses.length; j++) {      if (!(uses[j] instanceof OpApplNode)) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 2842 of NewDecomposeProofHandler.");        return result;      }      Location useLocation=uses[j].stn.getLocation();      int useIdx=useLocation.beginLine() - beginLine;      int offset=colToLoc(useLocation.beginColumn(),result.mapping[useIdx]);      String thisReplaceText=replacementText;      if (mayNeedParens) {        String[] precedingSafe=new String[]{"(","[","{",",","<<","->",":"};        String[] followingSafe=new String[]{")","]","}",",",">>","->","~>"};        String testString=result.nodeText[useIdx].substring(0,offset).trim();        int line=useIdx;        while (testString.equals("") && line > 0) {          line--;          testString=result.nodeText[line];        }        boolean terminated=testString.equals("");        int k=0;        while (!terminated && k < precedingSafe.length) {          terminated=testString.endsWith(precedingSafe[k]);          k++;        }        if (terminated) {          testString=result.nodeText[useIdx].substring(offset + sourceTextLength).trim();          line=useIdx;          while (testString.equals("") && line < result.nodeText.length - 1) {            line++;            testString=result.nodeText[line];          }          terminated=testString.equals("");          k=0;          while (!terminated && k < precedingSafe.length) {            terminated=testString.startsWith(followingSafe[k]);            k++;          }        }        if (!terminated) {          thisReplaceText="(" + replacementText + ")";        }      }      result.nodeText[useIdx]=result.nodeText[useIdx].substring(0,offset) + thisReplaceText + result.nodeText[useIdx].substring(offset + sourceTextLength);      adjustMappingPairVector(useLocation.beginColumn() + 1,thisReplaceText.length() - sourceTextLength,result.mapping[useIdx]);      inserts[useIdx].add(new Insertion(offset,sourceTextLength,thisReplaceText.length()));    }    if (isBoundedIdRenaming[i]) {      Location useLocation=formalParams[i].stn.getLocation();      if (EditorUtil.locationContainment(useLocation,sn.stn.getLocation())) {        int useIdx=useLocation.beginLine() - beginLine;        int offset=colToLoc(useLocation.beginColumn(),result.mapping[useIdx]);        result.nodeText[useIdx]=result.nodeText[useIdx].substring(0,offset) + replacementText + result.nodeText[useIdx].substring(offset + sourceTextLength);        adjustMappingPairVector(useLocation.beginColumn() + 1,replacementText.length() - sourceTextLength,result.mapping[useIdx]);        inserts[useIdx].add(new Insertion(offset,sourceTextLength,replacementText.length()));      }    }  }  adjustIndentation(nodeTextRep,result,inserts);  return result;}  }
class C{  public void sendRequest() throws RequestException, RouteException, IOException {  if (cacheStrategy != null)   return;  if (httpStream != null)   throw new IllegalStateException();  Request request=networkRequest(userRequest);  InternalCache responseCache=Internal.instance.internalCache(client);  Response cacheCandidate=responseCache != null ? responseCache.get(request) : null;  long now=System.currentTimeMillis();  cacheStrategy=new CacheStrategy.Factory(now,request,cacheCandidate).get();  networkRequest=cacheStrategy.networkRequest;  cacheResponse=cacheStrategy.cacheResponse;  if (responseCache != null) {    responseCache.trackResponse(cacheStrategy);  }  if (cacheCandidate != null && cacheResponse == null) {    closeQuietly(cacheCandidate.body());  }  if (networkRequest == null && cacheResponse == null) {    userResponse=new Response.Builder().request(userRequest).priorResponse(stripBody(priorResponse)).protocol(Protocol.HTTP_1_1).code(504).message("Unsatisfiable Request (only-if-cached)").body(EMPTY_BODY).build();    return;  }  if (networkRequest == null) {    userResponse=cacheResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).cacheResponse(stripBody(cacheResponse)).build();    userResponse=unzip(userResponse);    return;  }  boolean success=false;  try {    httpStream=connect();    httpStream.setHttpEngine(this);    if (writeRequestHeadersEagerly()) {      long contentLength=OkHeaders.contentLength(request);      if (bufferRequestBody) {        if (contentLength > Integer.MAX_VALUE) {          throw new IllegalStateException("Use setFixedLengthStreamingMode() or " + "setChunkedStreamingMode() for requests larger than 2 GiB.");        }        if (contentLength != -1) {          httpStream.writeRequestHeaders(networkRequest);          requestBodyOut=new RetryableSink((int)contentLength);        } else {          requestBodyOut=new RetryableSink();        }      } else {        httpStream.writeRequestHeaders(networkRequest);        requestBodyOut=httpStream.createRequestBody(networkRequest,contentLength);      }    }    success=true;  }  finally {    if (!success && cacheCandidate != null) {      closeQuietly(cacheCandidate.body());    }  }}  }
class C{  public boolean isSingleSelection(){  return size() == 1;}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public AbSlidingTabView(Context context){  this(context,null);}  }
class C{  public static List filterRegsResultByCurrent(List listaRegs,Integer bookId,Integer folderId){  if ((listaRegs != null) && (!listaRegs.isEmpty())) {    for (Iterator iterator=listaRegs.iterator(); iterator.hasNext(); ) {      AsocRegsResults asocRegsResults=(AsocRegsResults)iterator.next();      if ((asocRegsResults.getBookId().intValue() == bookId.intValue()) && (asocRegsResults.getFolderId().intValue() == folderId.intValue())) {        iterator.remove();      }    }  }  return listaRegs;}  }
class C{  @Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){  return cacheOnDisk(cacheOnDisk);}  }
class C{  public HadoopContext context(){  return hctx;}  }
class C{  @Override int readCheckpoint(ReadStream is,byte[] blockBuffer,int rowOffset,int rowLength,int blobTail) throws IOException {  int blobLen=BitsUtil.readInt16(is);  int colOffset=rowOffset + offset();  if (blobLen != 0) {    int sublen=blobLen & ~LARGE_BLOB_MASK;    int newBlobTail=blobTail + sublen;    if (rowOffset <= newBlobTail) {      return -1;    }    is.readAll(blockBuffer,blobTail,sublen);    BitsUtil.writeInt16(blockBuffer,colOffset,blobTail);    BitsUtil.writeInt16(blockBuffer,colOffset + 2,blobLen);    return newBlobTail;  } else {    BitsUtil.writeInt16(blockBuffer,colOffset,0);    BitsUtil.writeInt16(blockBuffer,colOffset + 2,0);    return blobTail;  }}  }
class C{  public h2 addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public ComputationException(Throwable cause){  super(cause);}  }
class C{  public Tree(TreeModel model){  this.model=model;  setLayout(new BoxLayout(BoxLayout.Y_AXIS));  if (folder == null) {    folder=UIManager.getInstance().getThemeImageConstant("treeFolderImage");    openFolder=UIManager.getInstance().getThemeImageConstant("treeFolderOpenImage");    nodeImage=UIManager.getInstance().getThemeImageConstant("treeNodeImage");  }  buildBranch(null,0,this);  setScrollableY(true);  setUIID("Tree");}  }
class C{  public SetupWizardDialog(java.awt.Frame parent,boolean modal){  super(parent,modal);  bundle=ResourceBundle.getBundle("org.panbox.desktop.common.gui.Messages",Settings.getInstance().getLocale());  pattern=Pattern.compile(EMAIL_PATTERN);  initComponents();  getRootPane().setDefaultButton(nextFinishButton);  nextFinishButton.requestFocus();}  }
class C{  private final void flushBuffer() throws IOException {  if (bufferSize == 0)   return;  flushed=true;  if (nextChar == 0)   return;  writer.write(cb,0,nextChar);  nextChar=0;}  }
class C{  @RequestMapping(value="/renewals",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @RolesAllowed(AuthoritiesConstants.USER) @Transactional public ResponseEntity<Void> create(@Valid @RequestBody Renewal renewal) throws URISyntaxException {  log.debug("REST request to save Renewal : {}",renewal);  if (renewal.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new renewal cannot already have an ID").build();  }  ownerService.checkNewOwner(renewal);  renewal=renewalRepository.save(renewal);  return ResponseEntity.created(new URI("/api/renewals/" + renewal.getId())).build();}  }
class C{  @SuppressWarnings("element-type-mismatch") public boolean isTimeoutButton(Object button){  return timeoutButtons.containsKey(button);}  }
class C{  protected static byte[] parseWapString(ByteArrayInputStream pduDataStream,int stringType){  assert (null != pduDataStream);  pduDataStream.mark(1);  int temp=pduDataStream.read();  assert (-1 != temp);  if ((TYPE_QUOTED_STRING == stringType) && (QUOTED_STRING_FLAG == temp)) {    pduDataStream.mark(1);  } else   if ((TYPE_TEXT_STRING == stringType) && (QUOTE == temp)) {    pduDataStream.mark(1);  } else {    pduDataStream.reset();  }  return getWapString(pduDataStream,stringType);}  }
class C{  public Object eval(File file,ScriptContext context) throws ScriptException, FileNotFoundException, IOException {  ScriptEngine engine=this.getEngineByExtension(FilenameUtils.getExtension(file.getName()));  if (PYTHON.equals(engine.getFactory().getEngineName()) && this.jython != null) {    try (FileInputStream fi=new FileInputStream(file)){      this.jython.execfile(fi);    }     return null;  }  try (FileReader fr=new FileReader(file)){    return engine.eval(fr,context);  } }  }
class C{  public void assertArrayEqual(long[] expected,long[] actual,long maxRelativeError){  TestUtils.assertArrayEqual(expected,actual,maxRelativeError);}  }
class C{  private void checkWithKnowledge(String inputGraph,String outputGraph,IKnowledge knowledge){  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  Pc pc=new Pc(independence);  pc.setKnowledge(knowledge);  Graph resultGraph=pc.search();  Graph trueGraph=GraphConverter.convert(outputGraph);  assertTrue(resultGraph.equals(trueGraph));}  }
class C{  public boolean canSet12Or24HourClock(){  if (DEBUG_SHOW_PUBLIC_CALLS && log.isDebugEnabled()) {    log.debug("canSet12Or24HourClock");  }  return true;}  }
class C{  public void showInfo(){  VM.sysWriteln("showInfo- reference maps");  if (MCSites == null) {    VM.sysWrite(" no MCSites array - assume using cached data - can't do showInfo()");    return;  }  VM.sysWrite(" MCSites.length = ",MCSites.length);  VM.sysWrite(" mapCount = ",mapCount);  for (int i=0; i < mapCount; i++) {    VM.sysWrite("mapid = ",i);    VM.sysWrite(" - machine  code offset ",MCSites[i]);    VM.sysWrite("  -reference Map  =  ");    for (int j=0; j < bytesPerMap(); j++) {      VM.sysWriteHex(referenceMaps[(i * bytesPerMap()) + j]);    }    VM.sysWriteln();  }}  }
class C{  InputStream openClassfile(String classname) throws NotFoundException {  ClassPathList list=pathList;  InputStream ins=null;  NotFoundException error=null;  while (list != null) {    try {      ins=list.path.openClassfile(classname);    } catch (    NotFoundException e) {      if (error == null)       error=e;    }    if (ins == null)     list=list.next; else     return ins;  }  if (error != null)   throw error; else   return null;}  }
class C{  public List<StorageFileEntity> createStorageFileEntitiesFromStorageFiles(StorageUnitEntity storageUnitEntity,List<StorageFile> storageFiles){  List<StorageFileEntity> storageFileEntities=new ArrayList<>();  for (  StorageFile storageFile : storageFiles) {    StorageFileEntity storageFileEntity=new StorageFileEntity();    storageFileEntities.add(storageFileEntity);    storageFileEntity.setStorageUnit(storageUnitEntity);    storageFileEntity.setPath(storageFile.getFilePath());    storageFileEntity.setFileSizeBytes(storageFile.getFileSizeBytes());    storageFileEntity.setRowCount(storageFile.getRowCount());    storageFileDao.saveAndRefresh(storageFileEntity);  }  return storageFileEntities;}  }
class C{  public boolean isOptional(){  return optional;}  }
class C{  public Set<String> decompose(String algorithm){  if (algorithm == null || algorithm.length() == 0) {    return new HashSet<>();  }  String[] transTockens=transPattern.split(algorithm);  Set<String> elements=new HashSet<>();  for (  String transTocken : transTockens) {    if (transTocken == null || transTocken.length() == 0) {      continue;    }    String[] tokens=pattern.split(transTocken);    for (    String token : tokens) {      if (token == null || token.length() == 0) {        continue;      }      elements.add(token);    }  }  if (elements.contains("SHA1") && !elements.contains("SHA-1")) {    elements.add("SHA-1");  }  if (elements.contains("SHA-1") && !elements.contains("SHA1")) {    elements.add("SHA1");  }  if (elements.contains("SHA224") && !elements.contains("SHA-224")) {    elements.add("SHA-224");  }  if (elements.contains("SHA-224") && !elements.contains("SHA224")) {    elements.add("SHA224");  }  if (elements.contains("SHA256") && !elements.contains("SHA-256")) {    elements.add("SHA-256");  }  if (elements.contains("SHA-256") && !elements.contains("SHA256")) {    elements.add("SHA256");  }  if (elements.contains("SHA384") && !elements.contains("SHA-384")) {    elements.add("SHA-384");  }  if (elements.contains("SHA-384") && !elements.contains("SHA384")) {    elements.add("SHA384");  }  if (elements.contains("SHA512") && !elements.contains("SHA-512")) {    elements.add("SHA-512");  }  if (elements.contains("SHA-512") && !elements.contains("SHA512")) {    elements.add("SHA512");  }  return elements;}  }
class C{  @SuppressWarnings("unchecked") public static boolean isRevenueAccountHead(final CChartOfAccounts coa,final List<CChartOfAccounts> bankCOAList,final PersistenceService persistenceService){  final Long purposeId=coa.getPurposeId();  if (bankCOAList.contains(coa))   return true;  if (purposeId != null)   try {    final SQLQuery query=persistenceService.getSession().createSQLQuery("SELECT NAME FROM EGF_ACCOUNTCODE_PURPOSE WHERE ID = " + purposeId);    final List<String> purposeNames=query.list();    if (purposeNames != null && purposeNames.size() == 1) {      final String purposeName=purposeNames.get(0);      if (purposeName.equals(CollectionConstants.PURPOSE_NAME_CASH_IN_HAND) || purposeName.equals(CollectionConstants.PURPOSE_NAME_CHEQUE_IN_HAND) || purposeName.equals(CollectionConstants.PURPOSE_NAME_CASH_IN_TRANSIT)|| purposeName.equals(CollectionConstants.PURPOSE_NAME_CREDIT_CARD)|| purposeName.equals(CollectionConstants.PURPOSE_NAME_ATM_ACCOUNTCODE)|| purposeName.equals(CollectionConstants.PURPOSE_NAME_INTERUNITACCOUNT))       return true;    }  } catch (  final Exception e) {    throw new ApplicationRuntimeException("Exception in fetching purpose name for id [" + purposeId + "]",e);  }  return false;}  }
class C{  public StackSaver create(String mTitle,Location location){  return new StackSaverImpl(new File(mCameraDirectory,mTitle),location,mContentResolver);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.474 -0400",hash_original_method="639ED1CAB7330F9B0CDE6D13A14B67F4",hash_generated_method="04E6EA25C3F735EB185EFA6CEB0182D5") private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3});}  }
class C{  public int addrInt(){  return _myAddrInt;}  }
class C{  public LatLonPoint toLatLonPoint(){  return UTMtoLL(this,Ellipsoid.WGS_84,new LatLonPoint.Double());}  }
class C{  public void validateStoragePolicyKey(StoragePolicyKey key) throws IllegalArgumentException {  Assert.notNull(key,"A storage policy key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setStoragePolicyName(alternateKeyHelper.validateStringParameter("storage policy name",key.getStoragePolicyName()));}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  public SPOStarConstraint(final IVariableOrConstant<IV> p,final IVariableOrConstant<IV> o,final boolean optional){  this.p=p;  this.o=o;  this.optional=optional;}  }
class C{  public boolean isConstant(){  return isConstant;}  }
class C{  private MobileDoc(){}  }
class C{  private void rebuildNode(){  m_realizer.regenerate();  m_graph.updateViews();}  }
class C{  public boolean isSecureProcessing(){  return m_isSecureProcessing;}  }
class C{  protected String buildIDToken(OAuthTokenReqMessageContext request) throws IdentityOAuth2Exception {  String issuer=OAuth2Util.getIDTokenIssuer();  long lifetimeInMillis=OAuthServerConfiguration.getInstance().getApplicationAccessTokenValidityPeriodInSeconds() * 1000;  long curTimeInMillis=Calendar.getInstance().getTimeInMillis();  String subject=request.getAuthorizedUser().getAuthenticatedSubjectIdentifier();  if (!StringUtils.isNotBlank(subject)) {    subject=request.getAuthorizedUser().getUserName();  }  JWTClaimsSet jwtClaimsSet=new JWTClaimsSet();  jwtClaimsSet.setIssuer(issuer);  jwtClaimsSet.setSubject(subject);  jwtClaimsSet.setAudience(Arrays.asList(request.getOauth2AccessTokenReqDTO().getClientId()));  jwtClaimsSet.setClaim(Constants.AUTHORIZATION_PARTY,request.getOauth2AccessTokenReqDTO().getClientId());  jwtClaimsSet.setExpirationTime(new Date(curTimeInMillis + lifetimeInMillis));  jwtClaimsSet.setIssueTime(new Date(curTimeInMillis));  addUserClaims(jwtClaimsSet,request.getAuthorizedUser());  if (JWSAlgorithm.NONE.getName().equals(signatureAlgorithm.getName())) {    return new PlainJWT(jwtClaimsSet).serialize();  }  return signJWT(jwtClaimsSet,request);}  }
class C{  public JSONArray(Collection<Object> collection){  this.myArrayList=new ArrayList<Object>();  if (collection != null) {    Iterator<Object> iter=collection.iterator();    while (iter.hasNext()) {      this.myArrayList.add(JSONObject.wrap(iter.next()));    }  }}  }
class C{  public void connect(MqttConnectOptions options,MqttToken token) throws MqttException {  final String methodName="connect";synchronized (conLock) {    if (isDisconnected() && !closePending) {      log.fine(CLASS_NAME,methodName,"214");      conState=CONNECTING;      conOptions=options;      MqttConnect connect=new MqttConnect(client.getClientId(),conOptions.getMqttVersion(),conOptions.isCleanSession(),conOptions.getKeepAliveInterval(),conOptions.getUserName(),conOptions.getPassword(),conOptions.getWillMessage(),conOptions.getWillDestination());      this.clientState.setKeepAliveSecs(conOptions.getKeepAliveInterval());      this.clientState.setCleanSession(conOptions.isCleanSession());      this.clientState.setMaxInflight(conOptions.getMaxInflight());      tokenStore.open();      ConnectBG conbg=new ConnectBG(this,token,connect);      conbg.start();    } else {      log.fine(CLASS_NAME,methodName,"207",new Object[]{new Byte(conState)});      if (isClosed() || closePending) {        throw new MqttException(MqttException.REASON_CODE_CLIENT_CLOSED);      } else       if (isConnecting()) {        throw new MqttException(MqttException.REASON_CODE_CONNECT_IN_PROGRESS);      } else       if (isDisconnecting()) {        throw new MqttException(MqttException.REASON_CODE_CLIENT_DISCONNECTING);      } else {        throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_CLIENT_CONNECTED);      }    }  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public Wine killall() throws ScriptFailureException {  validateWineInstallationInitialized();  try {    wineVersion.getInstallation().killAllProcess(this.prefix);  } catch (  IOException logged) {    LOGGER.warn("Unable to kill wine processes",logged);  }  return this;}  }
class C{  public synchronized void deliverTasks() throws InterruptedException {  checkRedelivery();  while (noUndeliveredTasks()) {    LOG.debug("Task delivery thread is going to sleep, there are no tasks waiting for delivery.");    wait();    checkRedelivery();  }  LOG.debug("Task delivery thread is awake and there are some undelivered tasks.");  while (nWaitingConsumers == 0) {    LOG.debug("Task delivery thread is going to sleep, there are no consumers waiting.");    wait();  }  LOG.debug("Task delivery thread awake; consumers are waiting and tasks are available");  HIGHPRIORITY:   for (  Map.Entry<WorkerCategory,Collection<GenericClusterRequest>> e : stalledHighPriorityTasks.asMap().entrySet()) {    WorkerCategory workerCategory=e.getKey();    Collection<GenericClusterRequest> tasks=e.getValue();    Deque<Response> consumers;    if (!workOffline) {      consumers=workersByCategory.get(workerCategory);    } else {      Optional<Deque<Response>> opt=workersByCategory.values().stream().filter(null).findFirst();      if (opt.isPresent())       consumers=opt.get(); else       consumers=null;    }    if (consumers == null || consumers.isEmpty()) {      LOG.warn("No worker found for {}, needed for {} high-priority tasks",workerCategory,tasks.size());      continue HIGHPRIORITY;    }    Iterator<GenericClusterRequest> taskIt=tasks.iterator();    while (taskIt.hasNext() && !consumers.isEmpty()) {      Response consumer=consumers.pop();      Job job=new Job("HIGH PRIORITY");      job.workerCategory=workerCategory;      for (int i=0; i < MAX_TASKS_PER_WORKER && taskIt.hasNext(); i++) {        job.addTask(taskIt.next());        taskIt.remove();      }      deliver(job,consumer);      nWaitingConsumers--;    }  }  while (nWaitingConsumers > 0) {    jobs.advance();    Job current;    if (!workOffline) {      current=jobs.advanceToElement(null);    } else {      current=jobs.advanceToElement(null);    }    if (current == null)     break;    Deque<Response> consumers;    if (!workOffline)     consumers=workersByCategory.get(current.workerCategory); else {      Optional<Deque<Response>> opt=workersByCategory.values().stream().filter(null).findFirst();      if (opt.isPresent())       consumers=opt.get(); else       consumers=null;    }    deliver(current,consumers.pop());    nWaitingConsumers--;  }  wait();}  }
class C{  public boolean isShowLegend(){  return mShowLegend;}  }
class C{  public void updateNotify(){  fireUpdate(this);}  }
class C{  private static File createReserveDiskCacheDir(Context context){  File cacheDir=StorageUtils.getCacheDirectory(context,false);  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return cacheDir;}  }
class C{  private void addConnectionGroups(Collection<ConnectionGroup> connectionGroups){  for (  ConnectionGroup connectionGroup : connectionGroups) {    APIConnectionGroup parent=retrievedGroups.get(connectionGroup.getParentIdentifier());    if (parent != null) {      Collection<APIConnectionGroup> children=parent.getChildConnectionGroups();      if (children == null) {        children=new ArrayList<APIConnectionGroup>();        parent.setChildConnectionGroups(children);      }      APIConnectionGroup apiConnectionGroup=new APIConnectionGroup(connectionGroup);      retrievedGroups.put(connectionGroup.getIdentifier(),apiConnectionGroup);      children.add(apiConnectionGroup);    } else     logger.debug("Connection group \"{}\" cannot be added to the tree: parent \"{}\" does not actually exist.",connectionGroup.getIdentifier(),connectionGroup.getParentIdentifier());  }}  }
class C{  public long currentTime(){  long timestamp=System.currentTimeMillis();  tc=timestamp;  return timestamp;}  }
class C{  public SendMessageResult sendMessage(SendMessageRequest sendMessageRequest){  if (sendMessageRequest == null) {    String errorMessage="sendMessageRequest cannot be null.";    LOG.error(errorMessage);    throw new AmazonClientException(errorMessage);  }  sendMessageRequest.getRequestClientOptions().appendUserAgent(SQSExtendedClientConstants.USER_AGENT_HEADER);  if (!clientConfiguration.isLargePayloadSupportEnabled()) {    return super.sendMessage(sendMessageRequest);  }  if (sendMessageRequest.getMessageBody() == null || "".equals(sendMessageRequest.getMessageBody())) {    String errorMessage="messageBody cannot be null or empty.";    LOG.error(errorMessage);    throw new AmazonClientException(errorMessage);  }  if (clientConfiguration.isAlwaysThroughS3() || isLarge(sendMessageRequest)) {    sendMessageRequest=storeMessageInS3(sendMessageRequest);  }  return super.sendMessage(sendMessageRequest);}  }
class C{  public static <T extends IChained<T>>void insertAfter(T chained,T element){  T next=chained.getNext();  if (next != null) {    next.setPrevious(element);  }  chained.setNext(element);  element.setNext(next);  element.setPrevious(chained);}  }
class C{  public int byteSize(){  return this.binaryDataSize + this.query.length();}  }
class C{  public static WritableRaster makeRasterWritable(Raster ras,int minX,int minY){  WritableRaster ret=Raster.createWritableRaster(ras.getSampleModel(),ras.getDataBuffer(),new Point(0,0));  ret=ret.createWritableChild(ras.getMinX() - ras.getSampleModelTranslateX(),ras.getMinY() - ras.getSampleModelTranslateY(),ras.getWidth(),ras.getHeight(),minX,minY,null);  return ret;}  }
class C{  public QualifiedName(int namespaceIndex,String name){  if (namespaceIndex < UnsignedShort.MIN_VALUE.intValue() || namespaceIndex > UnsignedShort.MAX_VALUE.intValue())   throw new IllegalArgumentException("namespace index out of bounds");  this.namespaceIndex=namespaceIndex;  this.name=name;}  }
class C{  private Put createPut(byte[] rowKey,ColumnList cols,Durability durability,long timeToLiveMillis){  Put put=new Put(rowKey);  put.setDurability(durability);  put.setTTL(timeToLiveMillis);  addColumns(cols,put);  return put;}  }
class C{  public void addTemporaryResult(LocalResult result){  if (!result.needToClose()) {    return;  }  if (temporaryResults == null) {    temporaryResults=New.hashSet();  }  if (temporaryResults.size() < 100) {    temporaryResults.add(result);  }}  }
class C{  @Override protected void onFinishInflate(){  super.onFinishInflate();  if (!isInEditMode()) {    mapGUI(attributes);    attributes.recycle();    configDragViewHelper();    preparePosition();  }}  }
class C{  public Instances trainCV(int numFolds,int numFold){  int numInstForFold, first, offset;  Instances train;  if (numFolds < 2) {    throw new IllegalArgumentException("Number of folds must be at least 2!");  }  if (numFolds > numInstances()) {    throw new IllegalArgumentException("Can't have more folds than instances!");  }  numInstForFold=numInstances() / numFolds;  if (numFold < numInstances() % numFolds) {    numInstForFold++;    offset=numFold;  } else   offset=numInstances() % numFolds;  train=new Instances(this,numInstances() - numInstForFold);  first=numFold * (numInstances() / numFolds) + offset;  copyInstances(0,train,first);  copyInstances(first + numInstForFold,train,numInstances() - first - numInstForFold);  return train;}  }
class C{  public long position(java.sql.Blob pattern,long start) throws SQLException {  return position(pattern.getBytes(0,(int)pattern.length()),start);}  }
class C{  private Object _deserializeStruct(Element elStruct) throws ConverterException {  String type=elStruct.getAttribute("type");  Struct struct=new StructImpl();  NodeList list=elStruct.getChildNodes();  int len=list.getLength();  for (int i=0; i < len; i++) {    Node node=list.item(i);    if (node instanceof Element) {      Element var=(Element)node;      Element value=getChildElement((Element)node);      if (value != null) {        struct.setEL(var.getAttribute("name"),_deserialize(value));      }    }  }  if (struct.size() == 0 && type != null && type.length() > 0) {    return "";  }  return struct;}  }
class C{  private CalendarCache(){}  }
class C{  private double[] prepareWeights(ExampleSet exampleSet) throws OperatorException {  Attribute weightAttr=com.rapidminer.example.Tools.createWeightAttribute(exampleSet);  Attribute timesCoveredAttrib=null;  boolean additive=this.getParameterAsBoolean(PARAMETER_ADDITIVE_REWEIGHT);  if (additive && (timesCoveredAttrib=exampleSet.getAttributes().get(TIMES_COVERED)) == null) {    timesCoveredAttrib=com.rapidminer.example.Tools.createSpecialAttribute(exampleSet,TIMES_COVERED,Ontology.INTEGER);    exampleSet.getExampleTable().addAttribute(timesCoveredAttrib);  }  Iterator<Example> exRead=exampleSet.iterator();  int numPos=0;  final int positiveClass=getPosIndex(exampleSet.getAttributes().getLabel());  final int negativeClass=1 - positiveClass;  while (exRead.hasNext()) {    if ((exRead.next().getLabel()) == positiveClass) {      numPos++;    }  }  final double[] classPriors=new double[2];  classPriors[positiveClass]=((double)numPos) / exampleSet.size();  classPriors[negativeClass]=1.0d - classPriors[positiveClass];  final double posWeight=0.5 / classPriors[positiveClass];  final double negWeight=0.5 / classPriors[negativeClass];  exRead=exampleSet.iterator();  while (exRead.hasNext()) {    Example example=exRead.next();    double w=(example.getLabel() == positiveClass) ? posWeight : negWeight;    example.setValue(weightAttr,w);    if (additive) {      example.setValue(timesCoveredAttrib,0);    }  }  return classPriors;}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(AdExchangeSellerSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from " + "https://code.google.com/apis/console/?api=adexchangeseller into " + "adexchangeseller-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,Collections.singleton(AdExchangeSellerScopes.ADEXCHANGE_SELLER_READONLY)).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  public static boolean intersect(long[] x,long[] y){  final int min=(x.length < y.length) ? x.length : y.length;  for (int i=0; i < min; i++) {    if ((x[i] & y[i]) != 0L) {      return true;    }  }  return false;}  }
class C{  private void rebuildPreview(){  final StringBuilder sb=new StringBuilder();  sb.append("<html><head><style>");  sb.append(".conn{font-weight:bold}");  sb.append(".fbg{color:#777777}");  sb.append(".fby{color:blue;font-style:italic}");  sb.append(".op{font-weight:bold}");  sb.append(".fval{}");  sb.append("</style></head><body><b>Filters Structure Preview:</b><br>");  new RepSearchEngine(repFiltersBean).getStructure(sb);  sb.append("</body></html>");  previewBrowser.setText(sb.toString());  previewBrowser.setCaretPosition(0);}  }
class C{  public static long evaluateExpression(String value,long executionTime,long simulationTime,long rampTime) throws IllegalArgumentException {  if (StringUtils.isBlank(value)) {    throw new IllegalArgumentException("Expression is either null or empty.");  }  String expression=normalizeExpression(value);  try {    Calculable calc=new ExpressionBuilder(expression).withVariable(ESTIMATED_RUN_TIME,executionTime).withVariable(SIMULATION_TIME,simulationTime).withVariable(RAMP_TIME,rampTime).build();    long result=Math.round(calc.calculate());    LOG.debug(value + " --> " + expression+ " = "+ Long.toString(result));    return result;  } catch (  Exception e) {    LOG.warn(value + " is not a valid expression.");    throw new IllegalArgumentException(e);  }}  }
class C{  public boolean isCreateOptionalElements(){  return createOptionalElements;}  }
class C{  public void addDeref(ValueNumber vn,Location location){  if (UnconditionalValueDerefAnalysis.DEBUG) {    System.out.println("Adding dereference of " + vn + " to # "+ System.identityHashCode(this)+ " @ "+ location);  }  valueNumbersUnconditionallyDereferenced.set(vn.getNumber());  Set<Location> derefLocationSet=getDerefLocationSet(vn);  derefLocationSet.add(location);}  }
class C{  public static long murmur3(final BitVector bv,final long seed){  long h1=0x9368e53c2f6af274L ^ seed;  long h2=0x586dcd208f7cd3fdL ^ seed;  long c1=0x87c37b91114253d5L;  long c2=0x4cf5ad432745937fL;  long from=0;  final long length=bv.length();  long k1, k2;  while (length - from >= Long.SIZE * 2) {    k1=bv.getLong(from,from + Long.SIZE);    k2=bv.getLong(from + Long.SIZE,from+=2 * Long.SIZE);    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;  }  if (length > from) {    if (length - from > Long.SIZE) {      k1=bv.getLong(from,from + Long.SIZE);      k2=bv.getLong(from + Long.SIZE,length);    } else {      k1=bv.getLong(from,length);      k2=0;    }    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;  }  h2^=length;  h1+=h2;  h2+=h1;  h1=finalizeMurmur3(h1);  h2=finalizeMurmur3(h2);  return h1 + h2;}  }
class C{  protected void waitUntilStopped(){  boolean doneWaiting=false;  while (!doneWaiting) {    if (_autoEngineer != null) {      doneWaiting=_autoEngineer.isStopped();    } else {      doneWaiting=true;    }    if (!doneWaiting) {      try {        Thread.sleep(50);      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public Long computeVmaxVolumeProvisionedCapacity(long requestedSize,Volume volume,StorageSystem storageSystem){  Long vmaxPotentialProvisionedCapacity=0L;  StoragePool expandVolumePool=_dbClient.queryObject(StoragePool.class,volume.getPool());  long metaMemberSize=volume.getIsComposite() ? volume.getMetaMemberSize() : volume.getCapacity();  long metaCapacity=volume.getIsComposite() ? volume.getTotalMetaMemberCapacity() : volume.getCapacity();  MetaVolumeRecommendation metaRecommendation=MetaVolumeUtils.getExpandRecommendation(storageSystem,expandVolumePool,metaCapacity,requestedSize,metaMemberSize,volume.getThinlyProvisioned(),_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool()).getFastExpansion());  if (metaRecommendation.isCreateMetaVolumes()) {    long metaMemberCount=volume.getIsComposite() ? metaRecommendation.getMetaMemberCount() + volume.getMetaMemberCount() : metaRecommendation.getMetaMemberCount() + 1;    vmaxPotentialProvisionedCapacity=metaMemberCount * metaRecommendation.getMetaMemberSize();  } else {    vmaxPotentialProvisionedCapacity=requestedSize;  }  return vmaxPotentialProvisionedCapacity;}  }
class C{  public HanningWindow(int N){  super(N);  for (int i=0; i < N; i++) {    w[i]=(double)(0.5 + 0.5 * Math.cos(-Math.PI + i * 2 * Math.PI / (N - 1)));  }}  }
class C{  public void startPriority(Runnable task){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  long expire=MAX_EXPIRE;  boolean isPriority=true;  boolean isQueue=true;  boolean isWake=true;  if (!scheduleImpl(task,loader,expire,isPriority,isQueue,isWake)) {    String msg=(this + " unable to start priority thread " + task+ " pri-min="+ getPriorityIdleMin()+ " thread="+ getThreadCount()+ " idle="+ getThreadIdleCount()+ " starting="+ getThreadStartingCount()+ " max="+ getThreadMax());    log.warning(msg);    HealthSystemFacade.fireEvent(THREAD_FULL_EVENT,msg);    OverflowThread item=new OverflowThread(task);    item.start();  }}  }
class C{  public static void cleanup(){  for (  IProject project : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {    if (project.exists()) {      try {        project.close(null);        project.delete(true,true,null);      } catch (      CoreException e) {        e.printStackTrace();      }    }  }  File workingDirectory=getWorkingDirectory().toFile();  if (workingDirectory.exists()) {    for (    File child : workingDirectory.listFiles()) {      if (!child.getName().equals(".metadata")) {        try {          PathTestUtil.deleteRecursively(Path.fromOSString(child.getAbsolutePath()));        } catch (        IOException e) {          e.printStackTrace();        }      }    }  }}  }
class C{  void replaceMember(RelationMember existing,RelationMember newMember){  int idx;  while ((idx=members.indexOf(existing)) != -1) {    members.set(idx,newMember);  }}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(host);  sb.append(" ");  sb.append(admin);  if (Options.check("multiline")) {    sb.append(" (\n\t\t\t\t\t");    sb.append(serial);    sb.append("\t; serial\n\t\t\t\t\t");    sb.append(refresh);    sb.append("\t; refresh\n\t\t\t\t\t");    sb.append(retry);    sb.append("\t; retry\n\t\t\t\t\t");    sb.append(expire);    sb.append("\t; expire\n\t\t\t\t\t");    sb.append(minimum);    sb.append(" )\t; minimum");  } else {    sb.append(" ");    sb.append(serial);    sb.append(" ");    sb.append(refresh);    sb.append(" ");    sb.append(retry);    sb.append(" ");    sb.append(expire);    sb.append(" ");    sb.append(minimum);  }  return sb.toString();}  }
class C{  public void fillUpdatedObjectProperty(Object entity,Object currentNode,StructuralProperty property,Field field,String node,Map<String,Object> map) throws ODataException {  for (  Map.Entry<String,Object> entry : ((Map<String,Object>)currentNode).entrySet()) {    if (findAppropriateElement(entity,property,field,node,map,entry)) {      break;    }  }}  }
class C{  public boolean add(final Character o){  return add(o.charValue());}  }
class C{  public QueryExecutionTimeoutException(Throwable cause){  super(cause);}  }
class C{  private boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  public SubqueryInExpression(EPStatementObjectModel model,boolean isNotIn){  this.model=model;  this.notIn=isNotIn;}  }
class C{  public void enter(){synchronized (statemachine) {    statemachine.enter();  }}  }
class C{  public synchronized VisualTable addTable(String group,Schema schema){  VisualTable vt=new VisualTable(this,group,schema);  addDataGroup(group,vt,null);  return vt;}  }
class C{  public void output(String msg){  env.output(msg);}  }
class C{  public List<String> csv(){  List<String> lines=new ArrayList<String>();  String header="#RunID, ClientID, MsgCount, MsgBytes, MsgsPerSec, BytesPerSec, DurationSecs";  lines.add(header);  SampleGroup[] groups=new SampleGroup[]{subs,pubs};  String pre="S";  int i=0;  for (  SampleGroup grp : groups) {    if (i++ == 1) {      pre="P";    }    int j=0;    for (    Sample stat : grp.samples) {      String line=String.format("%s,%s%d,%d,%d,%d,%f,%f",runId,pre,j,stat.msgCnt,stat.msgBytes,stat.rate(),stat.throughput(),(double)stat.duration() / 1000000000.0);      lines.add(line);    }  }  return lines;}  }
class C{  @SuppressLint("PackageManagerGetSignatures") @Nullable public static BrowserDescriptor select(Context context,BrowserMatcher browserMatcher){  PackageManager pm=context.getPackageManager();  List<BrowserDescriptor> descriptors=new ArrayList<>();  List<ResolveInfo> resolvedActivityList=pm.queryIntentActivities(BROWSER_INTENT,PackageManager.GET_RESOLVED_FILTER);  for (  ResolveInfo info : resolvedActivityList) {    if (!isFullBrowser(info)) {      continue;    }    BrowserDescriptor descriptor;    try {      PackageInfo packageInfo=pm.getPackageInfo(info.activityInfo.packageName,PackageManager.GET_SIGNATURES);      descriptor=new BrowserDescriptor(packageInfo,hasWarmupService(pm,info.activityInfo.packageName));      descriptors.add(descriptor);    } catch (    NameNotFoundException e) {      continue;    }    if (!descriptor.useCustomTab) {      continue;    }    if (!browserMatcher.matches(descriptor)) {      continue;    }    return descriptor;  }  for (  BrowserDescriptor descriptor : descriptors) {    if (descriptor.useCustomTab) {      descriptor=descriptor.changeUseCustomTab(false);    }    if (browserMatcher.matches(descriptor)) {      return descriptor;    }  }  return null;}  }
class C{  public static SourceLineAnnotation fromVisitedInstruction(ClassContext classContext,PreorderVisitor visitor,int pc){  return fromVisitedInstructionRange(classContext,visitor,pc,pc);}  }
class C{  public void testPeekFirst(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.peekFirst());    assertEquals(i,q.pollFirst());    assertTrue(q.peekFirst() == null || !q.peekFirst().equals(i));  }  assertNull(q.peekFirst());}  }
class C{  public Object clone() throws CloneNotSupportedException {  if (this instanceof Cloneable) {    return super.clone();  } else {    throw new CloneNotSupportedException();  }}  }
class C{  public org.yakindu.base.types.Package createPackage(){  PackageImpl package_=new PackageImpl();  return package_;}  }
class C{  public boolean isClosing(){  return closing;}  }
class C{  public boolean select(final Change change){  return true;}  }
class C{  public String diff_text1(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.INSERT) {      text.append(aDiff.text);    }  }  return text.toString();}  }
class C{  private void onCollectionClicked(Long collectionId){  Intent intent=new Intent(this,ProductListActivity.class);  if (collectionId != null) {    intent.putExtra(ProductListActivity.EXTRA_COLLECTION_ID,collectionId);  }  startActivity(intent);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public boolean isReply(){  return reply;}  }
class C{  @Override public boolean hasValue(int index){  return (index >= 0 && index < mValues.size());}  }
class C{  @Override @Inline public final void collectionPhase(short phaseId,boolean primary){  if (DEBUG) {    Log.write("--Phase Collector.");    Log.writeln(Phase.getName(phaseId));  }  if (phaseId == SS.PREPARE) {    gcspyGatherData(SSGCspy.BEFORE_COLLECTION);    super.collectionPhase(phaseId,primary);    return;  }  if (phaseId == SS.FORWARD_FINALIZABLE) {    super.collectionPhase(phaseId,primary);    gcspyGatherData(SSGCspy.SEMISPACE_COPIED);    return;  }  if (phaseId == SS.RELEASE) {    super.collectionPhase(phaseId,primary);    gcspyGatherData(SSGCspy.AFTER_COLLECTION);    return;  }  super.collectionPhase(phaseId,primary);}  }
class C{  public SIPHeader parse() throws ParseException {  MinSE minse=new MinSE();  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.MINSE_TO);    String nextId=lexer.getNextId();    try {      int delta=Integer.parseInt(nextId);      minse.setExpires(delta);    } catch (    NumberFormatException ex) {      throw createParseException("bad integer format");    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    super.parse(minse);    return minse;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  public void saveChannelBotMode(BotModeConfig config){  config.addCredentials(this);  POST(this.url + "/save-channel-bot-mode",config.toXML());}  }
class C{  private Pair<BigDecimal,BigDecimal> fillPayment(final CustomerOrder order,final CustomerOrderDelivery delivery,final Payment payment,final boolean singlePay,final BigDecimal runningTotal,final BigDecimal runningTotalTax,final boolean lastDelivery){  if (payment.getTransactionReferenceId() == null) {    payment.setTransactionReferenceId(delivery.getDeliveryNum());  }  payment.setOrderShipment(singlePay ? order.getOrdernum() : delivery.getDeliveryNum());  fillPaymentItems(delivery,payment);  fillPaymentShipment(order,delivery,payment);  return fillPaymentAmount(order,delivery,payment,singlePay,runningTotal,runningTotalTax,lastDelivery);}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.199 -0400",hash_original_method="B614C74ED63189045A32D08339051EE5",hash_generated_method="7B697BADD9858F7C74DB4DF7ED5BDDB6") public static void forceMkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      String message="File " + directory + " exists and is "+ "not a directory. Unable to create directory.";      throw new IOException(message);    }  } else {    if (!directory.mkdirs()) {      if (!directory.isDirectory()) {        String message="Unable to create directory " + directory;        throw new IOException(message);      }    }  }}  }
class C{  static void validateHeaderValue(CharSequence value){  if (value == null) {    throw new NullPointerException("value");  }  for (int i=0; i < value.length(); i++) {    char c=value.charAt(i);    if (c == 0) {      throw new IllegalArgumentException("value contains null character: " + value);    }  }}  }
class C{  public boolean isCaseSensitive(){  return m_caseSensitiveBox.isSelected();}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public SubscriptionStateException(String message){  super(message);}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  private void printTrace(String trace,int level){  if (sAppenders != null && level >= traceLevel) {    trace=trace.replace("\r","");    for (    Appender appender : sAppenders) {      appender.printTrace(mClassname,level,trace);    }  }}  }
class C{  private void handleDoubleClick(final MouseEvent event){  final IProjectTreeNode selectedNode=(IProjectTreeNode)TreeHelpers.getNodeAt(this,event.getX(),event.getY());  if (selectedNode == null) {    return;  }  selectedNode.doubleClicked();}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,char escapechar){  this(writer,separator,quotechar,escapechar,DEFAULT_LINE_END);}  }
class C{  public void write(ByteBuffer buf,int length) throws IOException {  final byte[] buffer=_writeBuffer;  final int bufferLength=buffer.length;  StreamImpl source=_source;  while (length > 0) {    final int writeLength=_writeLength;    final int sublen=Math.min(length,bufferLength - writeLength);    buf.get(buffer,writeLength,sublen);    if (length == sublen) {      _writeLength=writeLength + length;      if (_implicitFlush) {        flush();      }      return;    }    if (source == null) {      return;    }    source.write(buffer,0,bufferLength,false);    _position+=bufferLength;    _writeLength=0;    length-=sublen;  }}  }
class C{  @Override public void writeComment(Object comment) throws IOException {  if (comment == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID));  }  if (writingCdata) {    return;  }  closeStartIfNecessary();  writer.write("<!--");  String str=comment.toString();  ensureTextBufferCapacity(str);  HtmlUtils.writeText(writer,true,true,buffer,str,textBuffer);  writer.write("-->");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean remount(String file,String mountType){  if (file.endsWith("/") && !file.equals("/")) {    file=file.substring(0,file.lastIndexOf("/"));  }  boolean foundMount=false;  while (!foundMount) {    try {      for (      Mount mount : RootTools.getMounts()) {        RootTools.log(mount.getMountPoint().toString());        if (file.equals(mount.getMountPoint().toString())) {          foundMount=true;          break;        }      }    } catch (    Exception e) {      if (RootTools.debugMode) {        e.printStackTrace();      }      return false;    }    if (!foundMount) {      try {        file=(new File(file).getParent());      } catch (      Exception e) {        e.printStackTrace();        return false;      }    }  }  Mount mountPoint=findMountPointRecursive(file);  if (mountPoint != null) {    RootTools.log(Constants.TAG,"Remounting " + mountPoint.getMountPoint().getAbsolutePath() + " as "+ mountType.toLowerCase());    final boolean isMountMode=mountPoint.getFlags().contains(mountType.toLowerCase());    if (!isMountMode) {      try {        CommandCapture command=new CommandCapture(0,true,"busybox mount -o remount," + mountType.toLowerCase() + " "+ mountPoint.getDevice().getAbsolutePath()+ " "+ mountPoint.getMountPoint().getAbsolutePath(),"toolbox mount -o remount," + mountType.toLowerCase() + " "+ mountPoint.getDevice().getAbsolutePath()+ " "+ mountPoint.getMountPoint().getAbsolutePath(),"mount -o remount," + mountType.toLowerCase() + " "+ mountPoint.getDevice().getAbsolutePath()+ " "+ mountPoint.getMountPoint().getAbsolutePath(),"/system/bin/toolbox mount -o remount," + mountType.toLowerCase() + " "+ mountPoint.getDevice().getAbsolutePath()+ " "+ mountPoint.getMountPoint().getAbsolutePath());        Shell.startRootShell().add(command);        commandWait(command);      } catch (      Exception e) {      }      mountPoint=findMountPointRecursive(file);    }    if (mountPoint != null) {      RootTools.log(Constants.TAG,mountPoint.getFlags() + " AND " + mountType.toLowerCase());      if (mountPoint.getFlags().contains(mountType.toLowerCase())) {        RootTools.log(mountPoint.getFlags().toString());        return true;      } else {        RootTools.log(mountPoint.getFlags().toString());        return false;      }    } else {      RootTools.log("mount is null, file was: " + file + " mountType was: "+ mountType);    }  } else {    RootTools.log("mount is null, file was: " + file + " mountType was: "+ mountType);  }  return false;}  }
class C{  protected void addMove(Move move,PriorityMoveList moves){  if (move.isCapture() || move.isPromotion()) {    moves.appendHighPriority(move);  } else {    moves.appendLowPriority(move);  }}  }
class C{  public void updateTeamHistories(){  for (int i=0; i < teamList.size(); ++i) {    teamList.get(i).updateTeamHistory();  }}  }
class C{  public String[] toTTML(){  return new FormatTTML().toFile(this);}  }
class C{  public TestableBlockGroup(Context context,WorkspaceHelper helper){  super(context,helper);}  }
class C{  protected void deleteLinks(List<Link> links,String reason){  deleteLinks(links,reason,null);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public ITurnOrdered nextAeroElement(){  return this.getTurnAeroEnum().nextElement();}  }
class C{  protected boolean shouldExtract(ZipEntry ze,String soName){  return true;}  }
class C{  @Override public void snmpV1Trap(SnmpPeer peer,SnmpIpAddress agentAddr,SnmpOid enterpOid,int generic,int specific,SnmpVarBindList varBindList,SnmpTimeticks time) throws IOException, SnmpStatusException {  SnmpParameters p=(SnmpParameters)peer.getParams();  snmpV1Trap(peer.getDestAddr(),peer.getDestPort(),agentAddr,p.getRdCommunity(),enterpOid,generic,specific,varBindList,time);}  }
class C{  public int difference(JulianDate d){  return (julian - d.julian);}  }
class C{  public Complex(){  this(0,0);}  }
class C{  public void gotoLatLon(double lat,double lon,double zoom,double heading,double pitch){  BasicOrbitView view=(BasicOrbitView)this.wwd.getView();  if (!Double.isNaN(lat) || !Double.isNaN(lon) || !Double.isNaN(zoom)) {    lat=Double.isNaN(lat) ? view.getCenterPosition().getLatitude().degrees : lat;    lon=Double.isNaN(lon) ? view.getCenterPosition().getLongitude().degrees : lon;    zoom=Double.isNaN(zoom) ? view.getZoom() : zoom;    heading=Double.isNaN(heading) ? view.getHeading().degrees : heading;    pitch=Double.isNaN(pitch) ? view.getPitch().degrees : pitch;    view.addPanToAnimator(Position.fromDegrees(lat,lon,0),Angle.fromDegrees(heading),Angle.fromDegrees(pitch),zoom,true);  }}  }
class C{  protected void sequence_TypeRef_TypeRefWithModifiers_UnionTypeExpression_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private boolean resizeAndSaveImage(int maxWidth,int maxHeight) throws IOException {  boolean saved=false;  File targetFile=configuration.diskCache.get(uri);  if (targetFile != null && targetFile.exists()) {    ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);    DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();    ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,Scheme.FILE.wrap(targetFile.getAbsolutePath()),uri,targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);    Bitmap bmp=decoder.decode(decodingInfo);    if (bmp != null && configuration.processorForDiskCache != null) {      L.d(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK,memoryCacheKey);      bmp=configuration.processorForDiskCache.process(bmp);      if (bmp == null) {        L.e(ERROR_PROCESSOR_FOR_DISK_CACHE_NULL,memoryCacheKey);      }    }    if (bmp != null) {      saved=configuration.diskCache.save(uri,bmp);      bmp.recycle();    }  }  return saved;}  }
class C{  public static void showErrorNotification(Project project,String text){  showNotification(project,MessageType.ERROR,text);}  }
class C{  protected void addToValidList(CandidatePair pair){synchronized (validList) {    if (!validList.contains(pair))     validList.add(pair);  }  pair.validate();}  }
class C{  public static int[][] deep_copy(int M[][]){  int[][] C=new int[M.length][];  for (int i=0; i < C.length; i++) {    C[i]=Arrays.copyOf(M[i],M[i].length);  }  return C;}  }
class C{  public PowerContainerVmAllocationPolicyMigrationStaticThreshold(List<? extends ContainerHost> hostList,PowerContainerVmSelectionPolicy vmSelectionPolicy,double utilizationThreshold){  super(hostList,vmSelectionPolicy);  setUtilizationThreshold(utilizationThreshold);}  }
class C{  public final int read(byte b[],int off,int len) throws IOException {  return in.read(b,off,len);}  }
class C{  public void onToggleFlat(View view){  if (!checkReady()) {    return;  }  boolean flat=mFlatBox.isChecked();  for (  Marker marker : mMarkerRainbow) {    marker.setFlat(flat);  }}  }
class C{  public static DoubleMatrix1D minusMult(DoubleMatrix1D A,DoubleMatrix1D B,double s){  return A.assign(B,F.minusMult(s));}  }
class C{  private static void doAbbreviatedMbOrientation(Graph graph,IndependenceTest test,int depth,Node target){  SearchGraphUtils.orientUsingMeekRulesLocally(new Knowledge2(),graph,test,depth);  trimToMbNodes(graph,target,false);  trimEdgesAmongParents(graph,target);  trimEdgesAmongParentsOfChildren(graph,target);}  }
class C{  Mapper mapChild(Object e){  java.util.List childAxes=new ArrayList(axes.size() + 10);  java.util.HashMap pseudoSelectors=new java.util.HashMap();  java.util.List mappedSelectors=new java.util.LinkedList();  StringBuffer key=new StringBuffer();  for (int i=0, size=axes.size(); i < size; i++) {    Selector sel=(Selector)axes.get(i);    if (sel.getAxis() == Selector.DESCENDANT_AXIS) {      childAxes.add(sel);    } else     if (sel.getAxis() == Selector.IMMEDIATE_SIBLING_AXIS) {      throw new RuntimeException();    }    if (!sel.matches(e,_attRes,_treeRes)) {      continue;    }    String pseudoElement=sel.getPseudoElement();    if (pseudoElement != null) {      java.util.List l=(java.util.List)pseudoSelectors.get(pseudoElement);      if (l == null) {        l=new java.util.LinkedList();        pseudoSelectors.put(pseudoElement,l);      }      l.add(sel);      key.append(sel.getSelectorID()).append(":");      continue;    }    if (sel.isPseudoClass(Selector.VISITED_PSEUDOCLASS)) {      _visitElements.add(e);    }    if (sel.isPseudoClass(Selector.ACTIVE_PSEUDOCLASS)) {      _activeElements.add(e);    }    if (sel.isPseudoClass(Selector.HOVER_PSEUDOCLASS)) {      _hoverElements.add(e);    }    if (sel.isPseudoClass(Selector.FOCUS_PSEUDOCLASS)) {      _focusElements.add(e);    }    if (!sel.matchesDynamic(e,_attRes,_treeRes)) {      continue;    }    key.append(sel.getSelectorID()).append(":");    Selector chain=sel.getChainedSelector();    if (chain == null) {      mappedSelectors.add(sel);    } else     if (chain.getAxis() == Selector.IMMEDIATE_SIBLING_AXIS) {      throw new RuntimeException();    } else {      childAxes.add(chain);    }  }  if (children == null)   children=new HashMap();  Mapper childMapper=(Mapper)children.get(key.toString());  if (childMapper == null) {    childMapper=new Mapper();    childMapper.axes=childAxes;    childMapper.pseudoSelectors=pseudoSelectors;    childMapper.mappedSelectors=mappedSelectors;    children.put(key.toString(),childMapper);  }  link(e,childMapper);  return childMapper;}  }
class C{  public boolean cancel(boolean mayInterruptIfRunning){  return this.request != null && request.cancel(mayInterruptIfRunning);}  }
class C{  public T caseExpression(Expression object){  return null;}  }
class C{  public static void appendMultilineText(Document htmldoc,Element parent,String text){  boolean firstline=true;  for (  String line : text.split("\n")) {    if (!firstline) {      parent.appendChild(htmldoc.createElement(HTML_BR_TAG));    }    parent.appendChild(htmldoc.createTextNode(line));    firstline=false;  }}  }
class C{  public ObjectStreamConnection(Socket socket,int id){  super(socket,id);}  }
class C{  public String statusCode(){  return this.statusCode;}  }
class C{  public static void eachFileRecurse(final Path self,final FileType fileType,@ClosureParams(value=SimpleType.class,options="java.nio.file.Path") final Closure closure) throws IOException {  checkDir(self);  try (DirectoryStream<Path> stream=Files.newDirectoryStream(self)){    for (    Path path : stream) {      if (Files.isDirectory(path)) {        if (fileType != FileType.FILES)         closure.call(path);        eachFileRecurse(path,fileType,closure);      } else       if (fileType != FileType.DIRECTORIES) {        closure.call(path);      }    }  } }  }
class C{  public static String trim(String str){  return (str == null ? null : str.trim());}  }
class C{  public synchronized boolean isEmpty(){  return index.isEmpty();}  }
class C{  private int calculateSign(double[][] jointProbabilities){  final double correlation=jointProbabilities[1][1] * jointProbabilities[0][0] - jointProbabilities[0][1] * jointProbabilities[1][0];  return (correlation >= 0) ? 1 : -1;}  }
class C{  public InputFieldDialog(final String CAPTION_KEY,final String LABEL_KEY){  String caption=I18n.tr(CAPTION_KEY);  Frame frame=GUIMediator.getAppFrame();  _dialog=new JDialog(frame,caption,true);  _dialog.setSize(340,180);  LabeledComponent component=new LabeledComponent(LABEL_KEY,TEXT_FIELD,LabeledComponent.LEFT_GLUE);  String[] buttonLabelKeys={I18n.tr("OK"),I18n.tr("Cancel")};  String[] buttonLabelTips={I18n.tr("Apply Operation"),I18n.tr("Cancel Operation")};  ActionListener[] buttonListeners={new OKListener(),new CancelListener()};  ButtonRow buttons=new ButtonRow(buttonLabelKeys,buttonLabelTips,buttonListeners,ButtonRow.X_AXIS,ButtonRow.LEFT_GLUE);  Container contentPane=_dialog.getContentPane();  BoxPanel componentPanel=new BoxPanel(BoxPanel.Y_AXIS);  componentPanel.add(Box.createVerticalGlue());  componentPanel.add(component.getComponent());  componentPanel.add(Box.createVerticalGlue());  MAIN_PANEL.add(componentPanel);  MAIN_PANEL.add(Box.createVerticalGlue());  MAIN_PANEL.add(buttons);  contentPane.add(MAIN_PANEL);}  }
class C{  public void optimize(){  for (  SparseVertex v : vertices)   v.optimize();}  }
class C{  public void testBug22848249() throws Exception {  subTestBug22848249A();  subTestBug22848249B();  subTestBug22848249C();  subTestBug22848249D();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.092 -0500",hash_original_method="7AA5CFB77F71DE2C6FFA937BCE62ADAE",hash_generated_method="EA592F68FF426205AB076E6EA28F36A8") final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  private Date advanceToNextDayOfWeekIfNecessary(Date fireTime,boolean forceToAdvanceNextDay){  TimeOfDay sTimeOfDay=getStartTimeOfDay();  Date fireTimeStartDate=sTimeOfDay.getTimeOfDayForDate(fireTime);  Calendar fireTimeStartDateCal=createCalendarTime(fireTimeStartDate);  int dayOfWeekOfFireTime=fireTimeStartDateCal.get(Calendar.DAY_OF_WEEK);  Set<Integer> daysOfWeekToFire=getDaysOfWeek();  if (forceToAdvanceNextDay || !daysOfWeekToFire.contains(dayOfWeekOfFireTime)) {    for (int i=1; i <= 7; i++) {      fireTimeStartDateCal.add(Calendar.DATE,1);      dayOfWeekOfFireTime=fireTimeStartDateCal.get(Calendar.DAY_OF_WEEK);      if (daysOfWeekToFire.contains(dayOfWeekOfFireTime)) {        fireTime=fireTimeStartDateCal.getTime();        break;      }    }  }  Date eTime=getEndTime();  if (eTime != null && fireTime.getTime() > eTime.getTime()) {    return null;  }  return fireTime;}  }
class C{  public AsyncResult ActivateSessionAsync(ActivateSessionRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  @LayoutlibDelegate static long currentTimeMicro(){  return elapsedRealtime() * 1000;}  }
class C{  protected TypeImpl(){  super();}  }
class C{  public GOCDataBuilder(){}  }
class C{  public InvalidCipherTextException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static String satelliteDataJSON(GpsStatus gpsStatus){  final Calendar calendar=Calendar.getInstance();  final JSONObject json=new JSONObject();  try {    json.put("provider",SATELLITE_PROVIDER);    json.put("timestamp",calendar.getTimeInMillis());    if (gpsStatus.getSatellites() != null) {      int count=0;      final int timeToFirstFix=gpsStatus.getTimeToFirstFix();      for (      GpsSatellite sat : gpsStatus.getSatellites()) {        final JSONObject satelliteInfo=new JSONObject();        satelliteInfo.put("PRN",sat.getPrn());        satelliteInfo.put("timeToFirstFix",timeToFirstFix);        satelliteInfo.put("usedInFix",sat.usedInFix());        satelliteInfo.put("azimuth",sat.getAzimuth());        satelliteInfo.put("elevation",sat.getElevation());        satelliteInfo.put("hasEphemeris",sat.hasEphemeris());        satelliteInfo.put("hasAlmanac",sat.hasAlmanac());        satelliteInfo.put("SNR",sat.getSnr());        json.put(Integer.toString(count),satelliteInfo);        count++;      }    }  } catch (  JSONException exc) {    logJSONException(exc);  }  return json.toString();}  }
class C{  protected boolean isPrimitive(Object obj,String getter){  try {    Class objClass=obj.getClass().getMethod(getter).getReturnType();    if (objClass.isPrimitive()) {      return true;    }  } catch (  NoSuchMethodException ex) {  }catch (  SecurityException ex) {    Exceptions.printStackTrace(ex);  }  return false;}  }
class C{  static void testChange(SelectionKey key,int from,int to) throws IOException {  Selector sel=key.selector();  assertTrue(sel.keys().size() == 1,"Only one channel should be registered");  key.interestOps(from);  sel.selectNow();  sel.selectedKeys().clear();  key.interestOps(to);  System.out.println("select...");  int selected=sel.selectNow();  System.out.println("" + selected + " channel(s) selected");  int expected=(to == 0) ? 0 : 1;  assertTrue(selected == expected,"Expected " + expected);  for (  SelectionKey k : sel.selectedKeys()) {    assertTrue(k == key,"Unexpected key selected");    boolean readable=k.isReadable();    boolean writable=k.isWritable();    System.out.println("key readable: " + readable);    System.out.println("key writable: " + writable);    if ((to & OP_READ) == 0) {      assertTrue(!readable,"Not expected to be readable");    } else {      assertTrue(readable,"Expected to be readable");    }    if ((to & OP_WRITE) == 0) {      assertTrue(!writable,"Not expected to be writable");    } else {      assertTrue(writable,"Expected to be writable");    }    sel.selectedKeys().clear();  }}  }
class C{  private void pushTerm(BytesRef text) throws IOException {  int limit=Math.min(lastTerm.length(),text.length);  int pos=0;  while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset + pos]) {    pos++;  }  for (int i=lastTerm.length() - 1; i >= pos; i--) {    int prefixTopSize=pending.size() - prefixStarts[i];    if (prefixTopSize >= minItemsInBlock) {      writeBlocks(i + 1,prefixTopSize);      prefixStarts[i]-=prefixTopSize - 1;    }  }  if (prefixStarts.length < text.length) {    prefixStarts=ArrayUtil.grow(prefixStarts,text.length);  }  for (int i=pos; i < text.length; i++) {    prefixStarts[i]=pending.size();  }  lastTerm.copyBytes(text);}  }
class C{  protected static String suggestDatasetName(File[] files){  if (null == files || files.length == 0)   return null;  StringBuilder sb=new StringBuilder();  for (  File file : files) {    String name=file.getAbsolutePath();    if (WWUtil.isEmpty(name))     continue;    name=WWIO.replaceIllegalFileNameCharacters(WWIO.replaceSuffix(name,""));    if (sb.length() == 0) {      sb.append(name);      continue;    } else {      int size=Math.min(name.length(),sb.length());      for (int i=0; i < size; i++) {        if (name.charAt(i) != sb.charAt(i)) {          sb.setLength(i);          break;        }      }    }  }  String name=sb.toString();  sb.setLength(0);  ArrayList<String> words=new ArrayList<String>();  StringTokenizer tokens=new StringTokenizer(name," _:/\\-=!@#$%^&()[]{}|\".,<>;`+");  String lastWord=null;  while (tokens.hasMoreTokens()) {    String word=tokens.nextToken();    if (WWUtil.isEmpty(word) || word.length() < 2 || word.equalsIgnoreCase(lastWord))     continue;    lastWord=word;    words.add(word);    if (words.size() > 4)     words.remove(0);  }  if (words.size() > 0) {    sb.setLength(0);    for (    String word : words) {      sb.append(word).append(' ');    }    return sb.toString().trim();  } else   return (WWUtil.isEmpty(name)) ? "change me" : name;}  }
class C{  public static <VIEW extends UiView>void assignControllerView(Controller controller,VIEW view){  controller.view=view;}  }
class C{  public String parse() throws QueryException {  return (parse(true));}  }
class C{  private boolean isAddingBackendCGForIngestedCG(BlockConsistencyGroup cg,List<URI> addVolumesList){  boolean result=false;  if (cg.getTypes().contains(Types.LOCAL.toString())) {    return result;  }  List<Volume> cgVolumes=BlockConsistencyGroupUtils.getActiveVplexVolumesInCG(cg,dbClient,null);  Set<String> cgVolumeURIs=new HashSet<String>();  for (  Volume cgVolume : cgVolumes) {    cgVolumeURIs.add(cgVolume.getId().toString());  }  if (!addVolumesList.isEmpty() && cgVolumeURIs.contains(addVolumesList.get(0).toString())) {    result=true;  }  return result;}  }
class C{  public VideoQuality(int resX,int resY,int framerate,int bitrate){  this.framerate=framerate;  this.bitrate=bitrate;  this.resX=resX;  this.resY=resY;}  }
class C{  public boolean isDisabled(){  return !this.enabled;}  }
class C{  public LdapName(List<Rdn> rdns){  this.rdns=new ArrayList<>(rdns.size());  for (int i=0; i < rdns.size(); i++) {    Object obj=rdns.get(i);    if (!(obj instanceof Rdn)) {      throw new IllegalArgumentException("Entry:" + obj + "  not a valid type;list entries must be of type Rdn");    }    this.rdns.add((Rdn)obj);  }}  }
class C{  public static Pair<IAddress,Integer> calculateRequestRange(final IDebugger debugger,final BigInteger offset,final int size){  final MemoryMap mmap=debugger.getProcessManager().getMemoryMap();  final MemorySection section=mmap.findOffset(offset);  if (section == null) {    return new Pair<IAddress,Integer>(new CAddress(offset),size);  } else {    return calculateRequestRange(offset,size,section.getStart(),section.getEnd());  }}  }
class C{  MatchPatternIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);  int firstStepPos=OpMap.getFirstChildPos(opPos);  m_pattern=WalkerFactory.loadSteps(this,compiler,firstStepPos,0);  boolean fromRoot=false;  boolean walkBack=false;  boolean walkDescendants=false;  boolean walkAttributes=false;  if (0 != (analysis & (WalkerFactory.BIT_ROOT | WalkerFactory.BIT_ANY_DESCENDANT_FROM_ROOT)))   fromRoot=true;  if (0 != (analysis & (WalkerFactory.BIT_ANCESTOR | WalkerFactory.BIT_ANCESTOR_OR_SELF | WalkerFactory.BIT_PRECEDING| WalkerFactory.BIT_PRECEDING_SIBLING| WalkerFactory.BIT_FOLLOWING| WalkerFactory.BIT_FOLLOWING_SIBLING| WalkerFactory.BIT_PARENT| WalkerFactory.BIT_FILTER)))   walkBack=true;  if (0 != (analysis & (WalkerFactory.BIT_DESCENDANT_OR_SELF | WalkerFactory.BIT_DESCENDANT | WalkerFactory.BIT_CHILD)))   walkDescendants=true;  if (0 != (analysis & (WalkerFactory.BIT_ATTRIBUTE | WalkerFactory.BIT_NAMESPACE)))   walkAttributes=true;  if (false || DEBUG) {    System.out.print("analysis: " + Integer.toBinaryString(analysis));    System.out.println(", " + WalkerFactory.getAnalysisString(analysis));  }  if (fromRoot || walkBack) {    if (walkAttributes) {      m_superAxis=Axis.ALL;    } else {      m_superAxis=Axis.DESCENDANTSFROMROOT;    }  } else   if (walkDescendants) {    if (walkAttributes) {      m_superAxis=Axis.ALLFROMNODE;    } else {      m_superAxis=Axis.DESCENDANTORSELF;    }  } else {    m_superAxis=Axis.ALL;  }  if (false || DEBUG) {    System.out.println("axis: " + Axis.getNames(m_superAxis));  }}  }
class C{  public static double calculateSimilarity(List<Leg> legs1,List<Leg> legs2,Network network,double sameModeReward,double sameRouteReward){  double simil=0.;  Iterator<Leg> it1=legs1.iterator();  Iterator<Leg> it2=legs2.iterator();  for (; it1.hasNext() && it2.hasNext(); ) {    Leg leg1=it1.next();    Leg leg2=it2.next();    if (leg1.getMode().equals(leg2.getMode())) {      simil+=sameModeReward;    }    Route route1=leg1.getRoute();    Route route2=leg2.getRoute();    NetworkRoute nr1, nr2;    if (route1 instanceof NetworkRoute) {      nr1=(NetworkRoute)route1;    } else {      continue;    }    if (route2 instanceof NetworkRoute) {      nr2=(NetworkRoute)route2;    } else {      continue;    }    simil+=sameRouteReward * RouteUtils.calculateCoverage(nr1,nr2,network);  }  return simil;}  }
class C{  public boolean exportHead(){  return !exportChain;}  }
class C{  @Override public void finish(){  if (mAccountAuthenticatorResponse != null) {    if (mResultBundle != null) {      mAccountAuthenticatorResponse.onResult(mResultBundle);    } else {      mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,"canceled");    }    mAccountAuthenticatorResponse=null;  }  super.finish();}  }
class C{  public byte ID(){  return 0;}  }
class C{  public void randomize(){  numKnots=4 + (int)(6 * Math.random());  xKnots=new int[numKnots];  yKnots=new int[numKnots];  knotTypes=new byte[numKnots];  for (int i=0; i < numKnots; i++) {    xKnots[i]=(int)(255 * Math.random());    yKnots[i]=0xff000000 | ((int)(255 * Math.random()) << 16) | ((int)(255 * Math.random()) << 8)| (int)(255 * Math.random());    knotTypes[i]=RGB | SPLINE;  }  xKnots[0]=-1;  xKnots[1]=0;  xKnots[numKnots - 2]=255;  xKnots[numKnots - 1]=256;  sortKnots();  rebuildGradient();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 160) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void processWindowEvent(WindowEvent e){  super.processWindowEvent(e);  if (e.getID() == WindowEvent.WINDOW_OPENED) {    treePanel.getSearchField().requestFocusInWindow();  }}  }
class C{  public ITPS delete(final Schema schema,Object primaryKey,final long fromTime,final long toTime,final long writeTime,final INameFilter filter){  assertArgs(schema,primaryKey,fromTime,toTime);  if (log.isInfoEnabled())   log.info("schema=" + schema + ", primaryKey="+ primaryKey+ ", timestamp="+ writeTime+ ", filter="+ (filter == null ? "N/A" : filter.getClass().getName()));  final AtomicRowDelete proc=new AtomicRowDelete(schema,primaryKey,fromTime,toTime,writeTime,filter);  final byte[] key=schema.fromKey(ndx.getIndexMetadata().getKeyBuilder(),primaryKey).getKey();  return (TPS)ndx.submit(key,proc);}  }
class C{  private static Polygon2D createTree(Polygon2D components[],int low,int high,boolean splitX){  if (low > high) {    return null;  }  final int mid=(low + high) >>> 1;  if (low < high) {    Comparator<Polygon2D> comparator;    if (splitX) {      comparator=null;    } else {      comparator=null;    }    ArrayUtil.select(components,low,high + 1,mid,comparator);  }  Polygon2D newNode=components[mid];  newNode.splitX=splitX;  newNode.left=createTree(components,low,mid - 1,!splitX);  newNode.right=createTree(components,mid + 1,high,!splitX);  if (newNode.left != null) {    newNode.maxX=Math.max(newNode.maxX,newNode.left.maxX);    newNode.maxY=Math.max(newNode.maxY,newNode.left.maxY);  }  if (newNode.right != null) {    newNode.maxX=Math.max(newNode.maxX,newNode.right.maxX);    newNode.maxY=Math.max(newNode.maxY,newNode.right.maxY);  }  return newNode;}  }
class C{  String flattenJsonResult(Object obj){  if (obj instanceof JSONArray) {    StringBuffer buf=new StringBuffer();    final JSONArray arr=(JSONArray)obj;    for (int i=0; i < arr.length(); i++) {      try {        final Object cur=arr.get(i);        if (cur != null) {          buf.append(cur.toString());        }      } catch (      Exception e) {      }    }    return buf.toString();  } else {    return obj.toString();  }}  }
class C{  public boolean isWritable(){  return isWrite;}  }
class C{  SSAOptions(){  this.scalarsOnly=true;  this.backwards=false;  this.insertUsePhis=false;  this.heapTypes=null;  this.insertPEIDeps=false;  this.excludeGuards=false;  scalarValid=false;  heapValid=false;}  }
class C{  public void closeIndeterminateProgress(){  if (progressStage != null)   progressStage.close();}  }
class C{  public static void execDotToPng(final File dotFile,final File pngFile){  String[] cmd=new String[]{"dot","-Tpng",dotFile.getAbsolutePath(),"-o",pngFile.getAbsolutePath()};  System.out.println("Printing dotFile: " + dotFile + " to loc: "+ pngFile);  System.out.flush();  ExecUtil.execute(cmd,System.out,System.err);}  }
class C{  public void evaluateClusterer(Instances test,String testFileName,boolean outputModel) throws Exception {  int i=0;  int cnum;  double loglk=0.0;  int cc=m_Clusterer.numberOfClusters();  m_numClusters=cc;  double[] instanceStats=new double[cc];  Instances testRaw=null;  boolean hasClass=(test.classIndex() >= 0);  int unclusteredInstances=0;  Vector<Double> clusterAssignments=new Vector<Double>();  Filter filter=null;  DataSource source=null;  Instance inst;  if (testFileName == null) {    testFileName="";  }  if (testFileName.length() != 0) {    source=new DataSource(testFileName);  } else {    source=new DataSource(test);  }  testRaw=source.getStructure(test.classIndex());  if (hasClass) {    if (testRaw.classAttribute().isNumeric()) {      throw new Exception("ClusterEvaluation: Class must be nominal!");    }    filter=new Remove();    ((Remove)filter).setAttributeIndices("" + (testRaw.classIndex() + 1));    ((Remove)filter).setInvertSelection(false);    filter.setInputFormat(testRaw);  }  i=0;  while (source.hasMoreElements(testRaw)) {    inst=source.nextElement(testRaw);    if (filter != null) {      filter.input(inst);      filter.batchFinished();      inst=filter.output();    }    cnum=-1;    try {      if (m_Clusterer instanceof DensityBasedClusterer) {        loglk+=((DensityBasedClusterer)m_Clusterer).logDensityForInstance(inst);        cnum=m_Clusterer.clusterInstance(inst);        clusterAssignments.add((double)cnum);      } else {        cnum=m_Clusterer.clusterInstance(inst);        clusterAssignments.add((double)cnum);      }    } catch (    Exception e) {      clusterAssignments.add(-1.0);      unclusteredInstances++;    }    if (cnum != -1) {      instanceStats[cnum]++;    }  }  double sum=Utils.sum(instanceStats);  loglk/=sum;  m_logL=loglk;  m_clusterAssignments=new double[clusterAssignments.size()];  for (i=0; i < clusterAssignments.size(); i++) {    m_clusterAssignments[i]=clusterAssignments.get(i);  }  int numInstFieldWidth=(int)((Math.log(clusterAssignments.size()) / Math.log(10)) + 1);  if (outputModel) {    m_clusteringResults.append(m_Clusterer.toString());  }  m_clusteringResults.append("Clustered Instances\n\n");  int clustFieldWidth=(int)((Math.log(cc) / Math.log(10)) + 1);  for (i=0; i < cc; i++) {    if (instanceStats[i] > 0) {      m_clusteringResults.append(Utils.doubleToString(i,clustFieldWidth,0) + "      " + Utils.doubleToString(instanceStats[i],numInstFieldWidth,0)+ " ("+ Utils.doubleToString((instanceStats[i] / sum * 100.0),3,0)+ "%)\n");    }  }  if (unclusteredInstances > 0) {    m_clusteringResults.append("\nUnclustered instances : " + unclusteredInstances);  }  if (m_Clusterer instanceof DensityBasedClusterer) {    m_clusteringResults.append("\n\nLog likelihood: " + Utils.doubleToString(loglk,1,5) + "\n");  }  if (hasClass) {    evaluateClustersWithRespectToClass(test,testFileName);  }}  }
class C{  boolean isExpandable(){  return mIsExpandable;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.445 -0500",hash_original_method="A6D730040E20DF7D0E0DA97862E3FE2F",hash_generated_method="2E54471442981D41A41E36565C1066D6") private static SparseBooleanArray parseColumns(String sequence){  SparseBooleanArray columns=new SparseBooleanArray();  Pattern pattern=Pattern.compile("\\s*,\\s*");  String[] columnDefs=pattern.split(sequence);  for (  String columnIdentifier : columnDefs) {    try {      int columnIndex=Integer.parseInt(columnIdentifier);      if (columnIndex >= 0) {        columns.put(columnIndex,true);      }    } catch (    NumberFormatException e) {    }  }  return columns;}  }
class C{  ServerMember update(Address clientAddress,Instant time){  if (clientAddress != null) {    this.clientAddress=clientAddress;    if (time.isAfter(updated)) {      this.updated=Assert.notNull(time,"time");    }  }  return this;}  }
class C{  @Override public synchronized ServerCQ executeCq(String cqName,String queryString,int cqState,ClientProxyMembershipID clientProxyId,CacheClientNotifier ccn,boolean isDurable,boolean manageEmptyRegions,int regionDataPolicy,Map emptyRegionsMap) throws CqException, RegionNotFoundException, CqClosedException {  if (!isServer()) {    throw new IllegalStateException(LocalizedStrings.CqService_SERVER_SIDE_EXECUTECQ_METHOD_IS_CALLED_ON_CLIENT_CQNAME_0.toLocalizedString(cqName));  }  String serverCqName=constructServerCqName(cqName,clientProxyId);  ServerCQImpl cQuery=null;  if (!isCqExists(serverCqName)) {    cQuery=new ServerCQImpl(this,cqName,queryString,isDurable,constructServerCqName(cqName,clientProxyId));    try {      cQuery.registerCq(clientProxyId,ccn,cqState);      if (manageEmptyRegions) {        if (emptyRegionsMap != null && emptyRegionsMap.containsKey(cQuery.getBaseRegionName())) {          regionDataPolicy=0;        }        ccn.updateMapOfEmptyRegions(ccn.getClientProxy(clientProxyId,true).getRegionsWithEmptyDataPolicy(),cQuery.getBaseRegionName(),regionDataPolicy);      }    } catch (    CqException cqe) {      logger.info(LocalizedMessage.create(LocalizedStrings.CqService_EXCEPTION_WHILE_REGISTERING_CQ_ON_SERVER_CQNAME___0,cQuery.getName()));      cQuery=null;      throw cqe;    }  } else {    cQuery=(ServerCQImpl)getCq(serverCqName);    resumeCQ(cqState,cQuery);  }  if (logger.isDebugEnabled()) {    logger.debug("Successfully created CQ on the server. CqName : {}",cQuery.getName());  }  return cQuery;}  }
class C{  public SpkacSubject(X500Name name){  cn=getRdn(name,BCStyle.CN);  ou=getRdn(name,BCStyle.OU);  o=getRdn(name,BCStyle.O);  l=getRdn(name,BCStyle.L);  st=getRdn(name,BCStyle.ST);  c=getRdn(name,BCStyle.C);}  }
class C{  public static void show(Module module){  new AnalyzeDependenciesDialog(module).show();}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Deprecated @Override public final void add(int index,E element){  throw new UnsupportedOperationException();}  }
class C{  public CommCore commCore(){  return commCore;}  }
class C{  public ColorBlobDetector(Color color,Color colorRadius){  this.colorRadius=colorRadius.convertColorScalar(ColorSpace.HSV);  setColor(color);}  }
class C{  private Promise<PeerSession> pickCachedSession(int uid,final int keyGroupId,final long ownKeyId,final long theirKeyId){  return ManagedList.of(peerSessions.getValue(uid)).flatMap(PeerSessionsStorage.SESSIONS).filter(PeerSession.BY_IDS(keyGroupId,ownKeyId,theirKeyId)).sorted(PeerSession.COMPARATOR).firstPromise();}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @Override protected void process(AnnotatedType annotatedType,Messager messager) throws IOException {  MakeGoalFactoryMetadata metadata=MakeGoalFactoryMetadata.of(annotatedType.getType(),messager);  try (Writer writer=annotatedType.openWriter(metadata.getName())){    writer.write("public class " + metadata.getName() + " {\n");    GoalExpressions expressions=new GoalExpressions(metadata.getAnnotatedType().getQualifiedName().toString(),processingEnv.getMessager());    expressions.writeInlineMethod(writer,"public static","i",metadata.getClauseMethods(),metadata.getParameters());    writer.write("  public static " + ClassNames.GOAL + " o("+ metadata.getParameters()+ ") {\n");    writer.write("    return new " + ClassNames.GOAL + "() {\n");    writer.write("      @java.lang.Override\n");    writer.write("      public " + ClassNames.STREAM + " run("+ ClassNames.SUBST+ " __subst__) {\n");    writer.write("        return i(" + metadata.getParameters().getNames() + ").run(__subst__);\n");    writer.write("      }\n");    writer.write("    };\n");    writer.write("  }\n");    writer.write("  public static " + ClassNames.GOAL + " d("+ metadata.getParameters()+ ") {\n");    writer.write("    return new " + ClassNames.DELAYED_GOAL + "(o("+ metadata.getParameters().getNames()+ "));\n");    writer.write("  }\n");    writer.write("}\n");  } }  }
class C{  public void validate() throws MessageException {  super.validate();  AssociationSessionType type;  try {    type=getType();    if (type.isVersion2() ^ isVersion2()) {      throw new MessageException("Protocol verison mismatch between association " + "session type: " + type + " and AssociationResponse message type.",OpenIDException.ASSOC_ERROR);    }  } catch (  AssociationException e) {    throw new MessageException("Error verifying association response validity.",OpenIDException.ASSOC_ERROR,e);  }  if (!isVersion2() && getAssociationType() == null) {    throw new MessageException("assoc_type cannot be omitted in OpenID1 responses",OpenIDException.ASSOC_ERROR);  }  String macKey;  if (type.getHAlgorithm() != null) {    if (!hasParameter("dh_server_public") || !hasParameter("enc_mac_key")) {      throw new MessageException("DH public key or encrypted MAC key missing.",OpenIDException.ASSOC_ERROR);    } else     macKey=getParameterValue("enc_mac_key");  } else {    if (!hasParameter("mac_key")) {      throw new MessageException("Missing MAC key.",OpenIDException.ASSOC_ERROR);    } else     macKey=getParameterValue("mac_key");  }  int macSize=Base64.decodeBase64(macKey.getBytes()).length * 8;  if (macSize != type.getKeySize()) {    throw new MessageException("MAC key size: " + macSize + " doesn't match the association/session type: "+ type,OpenIDException.ASSOC_ERROR);  }}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static FieldAnnotation fromVisitedField(PreorderVisitor visitor){  return new FieldAnnotation(visitor.getDottedClassName(),visitor.getFieldName(),visitor.getFieldSig(),visitor.getFieldIsStatic());}  }
class C{  public JTabbedPane(int tabPlacement,int tabLayoutPolicy){  setTabPlacement(tabPlacement);  setTabLayoutPolicy(tabLayoutPolicy);  pages=new ArrayList<Page>(1);  setModel(new DefaultSingleSelectionModel());  updateUI();}  }
class C{  private static RegisterOperand findOrCreateTemp(RegisterOperand rOp,java.util.HashMap<Register,Register> map,IR ir){  Register tReg=map.get(rOp.getRegister());  if (tReg == null) {    RegisterOperand tOp=ir.regpool.makeTemp(rOp.getType());    map.put(rOp.getRegister(),tOp.getRegister());    return tOp;  } else {    return new RegisterOperand(tReg,rOp.getType());  }}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  public void flushToWriter() throws IOException {  StateManager stateManager=Util.getStateManager(context);  ResponseWriter origWriter=context.getResponseWriter();  FastStringWriter state=new FastStringWriter((stateManager.isSavingStateInClient(context)) ? bufSize : 128);  context.setResponseWriter(origWriter.cloneWithWriter(state));  stateManager.writeState(context,stateManager.saveView(context));  context.setResponseWriter(origWriter);  StringBuilder builder=fWriter.getBuffer();  int totalLen=builder.length();  StringBuilder stateBuilder=state.getBuffer();  int stateLen=stateBuilder.length();  int pos=0;  int tildeIdx=getNextDelimiterIndex(builder,pos);  while (pos < totalLen) {    if (tildeIdx != -1) {      if (tildeIdx > pos && (tildeIdx - pos) > bufSize) {        builder.getChars(pos,(pos + bufSize),buf,0);        orig.write(buf);        pos+=bufSize;      } else {        builder.getChars(pos,tildeIdx,buf,0);        int len=(tildeIdx - pos);        orig.write(buf,0,len);        if (builder.indexOf(RIConstants.SAVESTATE_FIELD_MARKER,pos) == tildeIdx) {          int statePos=0;          while (statePos < stateLen) {            if ((stateLen - statePos) > bufSize) {              stateBuilder.getChars(statePos,(statePos + bufSize),buf,0);              orig.write(buf);              statePos+=bufSize;            } else {              int slen=(stateLen - statePos);              stateBuilder.getChars(statePos,stateLen,buf,0);              orig.write(buf,0,slen);              statePos+=slen;            }          }          pos+=(len + STATE_MARKER_LEN);          tildeIdx=getNextDelimiterIndex(builder,pos);        } else {          pos=tildeIdx;          tildeIdx=getNextDelimiterIndex(builder,tildeIdx + 1);        }      }    } else {      if (totalLen - pos > bufSize) {        builder.getChars(pos,(pos + bufSize),buf,0);        orig.write(buf);        pos+=bufSize;      } else {        builder.getChars(pos,totalLen,buf,0);        int len=(totalLen - pos);        orig.write(buf,0,len);        pos+=(len + 1);      }    }  }  out=orig;}  }
class C{  public static JPopupButton createEditorColorButton(DrawingEditor editor,AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches,int columnCount,String labelKey,ResourceBundleUtil labels){  return createEditorColorButton(editor,attributeKey,swatches,columnCount,labelKey,labels,null);}  }
class C{  private void removeNonadjacencies(Graph graph,List<SepsetMapDci> sepsetMaps){  List<Node> nodes=graph.getNodes();  ChoiceGenerator cg=new ChoiceGenerator(nodes.size(),2);  int[] combination;  while ((combination=cg.next()) != null) {    Node x=graph.getNode(nodes.get(combination[0]).getName());    Node y=graph.getNode(nodes.get(combination[1]).getName());    for (    SepsetMapDci sepset : sepsetMaps) {      if (sepset.get(x,y) != null && graph.isAdjacentTo(x,y)) {        graph.removeEdge(x,y);        break;      }    }  }}  }
class C{  public void addListener(final IGraphSearchSettingsListener listener){  m_listeners.addListener(listener);}  }
class C{  private CTagManager loadNodeTagManager(){  try {    return provider.loadTagManager(TagType.NODE_TAG);  } catch (  final CouldntLoadDataException e) {    CUtilityFunctions.logException(e);    final CTag root=new CTag(0,"Root Node Tag","",TagType.NODE_TAG,provider);    final Tree<CTag> tree=new Tree<CTag>(new TreeNode<CTag>(root));    return new CTagManager(tree,TagType.NODE_TAG,provider);  }}  }
class C{  public ReliefF(final ClassificationDataSet cds,int featureCount,final int m,final int n,final DistanceMetric dm,VectorCollectionFactory<Vec> vcf){  this(cds,featureCount,m,n,dm,vcf,null);}  }
class C{  @SuppressWarnings("unchecked") protected String doIt() throws Exception {  String receipts="";  if (pCreateByProduct == true) {    for (    MInOutLine inOutLine : getRecords()) {      createLandedCost(null,inOutLine);      receipts=receipts.concat(inOutLine.getParent().getDocumentNo() + " " + inOutLine.getM_Product().getValue()).concat(" ");    }  } else {    LinkedHashMap<Integer,MInOut> inOutList=new LinkedHashMap<Integer,MInOut>();    for (    MInOutLine inOutLine : getRecords()) {      MInOut inOut=inOutLine.getParent();      if (inOutList.containsKey(inOut.getM_InOut_ID()))       continue;      inOutList.put(inOut.getM_InOut_ID(),inOut);    }    for (    Entry<Integer,MInOut> entry : inOutList.entrySet()) {      MInOut inOut=entry.getValue();      createLandedCost(inOut,null);      receipts=receipts.concat(inOut.getDocumentNo()).concat(" ");    }  }  return receipts;}  }
class C{  public XmlNamespace(String uri){  this(null,uri);}  }
class C{  public static String[] explode(final String str,final char delimiter,final int limit){  int count=0;  int len=str.length();  int maxPos=0;  int countAtMaxPos=0;  int upperLimit=limit - 1;  for (int pos=0; pos < len; pos++) {    if ((str.charAt(pos) == delimiter) && (limit == 0 || count < upperLimit)) {      count++;    } else {      maxPos=pos;      countAtMaxPos=count;    }  }  if (count == 0) {    String[] parts=new String[1];    parts[0]=str;    return parts;  }  String[] parts=new String[countAtMaxPos + 1];  int startPos=0;  count=0;  for (int pos=0; pos < maxPos; pos++) {    if ((str.charAt(pos) == delimiter) && (limit == 0 || count < upperLimit)) {      parts[count]=str.substring(startPos,pos);      startPos=pos + 1;      count++;    }  }  parts[count]=str.substring(startPos,maxPos + 1);  return parts;}  }
class C{  private String parseMalformed(String urlString){  if (parts != null && !parts.isEmpty()) {    String ret;    for (    URLPart part : parts) {switch (part) {case PROTOCOL:        ret=applyPattern(REGEX_PROTOCOL,urlString);      break;case PORT:    ret=applyPattern(REGEX_PORT,urlString);  break;case QUERY:ret=applyPattern(REGEX_QUERY,urlString);break;case WHOLE:ret=urlString;break;default :ret=urlString;}if (!Strings.isNullOrEmpty(ret)) {return ret;}}}return urlString;}  }
class C{  public boolean isReadOnly(){  return m_readOnly;}  }
class C{  public static ParsedGraphQuery parseGraphQuery(QueryLanguage ql,String query,String baseURI) throws MalformedQueryException, UnsupportedQueryLanguageException {  ParsedOperation q=parseQuery(ql,query,baseURI);  if (q instanceof ParsedGraphQuery) {    return (ParsedGraphQuery)q;  }  throw new IllegalArgumentException("query is not a graph query: " + query);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public Element writeColorUIResource(Element parent,Object o,String name) throws Exception {  Element node;  ColorUIResource resource;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  resource=(ColorUIResource)o;  node=addElement(parent,name,resource.getClass().getName(),false);  invokeWriteToXML(node,new Color(resource.getRGB()),VAL_COLOR);  return node;}  }
class C{  private void submitXForm(Document doc,String xml,String pathName,boolean archive,boolean propagateErrors) throws Exception {  String xmlOriginal=xml;  try {    fillPatientIdIfMissing(doc);    saveComplexObs(doc,true);    setMultipleSelectValues(doc.getDocumentElement());    xml=XformsUtil.doc2String(doc);    if (isRemoteFormEntry()) {      FormEntryWrapper.createFormEntryQueue(xml);    } else {      processDoc(xml,pathName,propagateErrors);      String patientid=DOMUtil.getElementValue(doc,XformBuilder.NODE_PATIENT_PATIENT_ID);      Patient patient=XformObsPatientEdit.updatePatientDemographics(patientid,xml);      RelativeSubmission.submit(xml,patient);      if (archive)       saveFormInArchive(xmlOriginal,pathName);    }  } catch (  Exception e) {    log.error(e.getMessage(),e);    saveFormInError(xmlOriginal,pathName,e);    throw e;  }}  }
class C{  private int updateSelectedDay(Calendar calendar,IDayItem dayItem){  Integer currentWeekIndex=null;  if (!dayItem.equals(getSelectedDay())) {    dayItem.setSelected(true);    if (getSelectedDay() != null) {      getSelectedDay().setSelected(false);    }    setSelectedDay(dayItem);  }  for (int c=0; c < CalendarManager.getInstance().getWeeks().size(); c++) {    if (DateHelper.sameWeek(calendar,CalendarManager.getInstance().getWeeks().get(c))) {      currentWeekIndex=c;      break;    }  }  if (currentWeekIndex != null) {    if (currentWeekIndex != mCurrentListPosition) {      updateItemAtPosition(mCurrentListPosition);    }    mCurrentListPosition=currentWeekIndex;    updateItemAtPosition(currentWeekIndex);  }  return mCurrentListPosition;}  }
class C{  public void put(Value key,V value){  checkSizePut();  internalPut(key,value);}  }
class C{  @SuppressWarnings({"static-access"}) public int run(String[] args) throws Exception {  Options options=new Options();  options.addOption(OptionBuilder.withArgName("path").hasArg().withDescription("input path").create(INPUT));  options.addOption(OptionBuilder.withArgName("path").hasArg().withDescription("output path").create(OUTPUT));  options.addOption(OptionBuilder.withArgName("num").hasArg().withDescription("top n").create(TOP));  CommandLine cmdline;  CommandLineParser parser=new GnuParser();  try {    cmdline=parser.parse(options,args);  } catch (  ParseException exp) {    System.err.println("Error parsing command line: " + exp.getMessage());    return -1;  }  if (!cmdline.hasOption(INPUT) || !cmdline.hasOption(OUTPUT) || !cmdline.hasOption(TOP)) {    System.out.println("args: " + Arrays.toString(args));    HelpFormatter formatter=new HelpFormatter();    formatter.setWidth(120);    formatter.printHelp(this.getClass().getName(),options);    ToolRunner.printGenericCommandUsage(System.out);    return -1;  }  String inputPath=cmdline.getOptionValue(INPUT);  String outputPath=cmdline.getOptionValue(OUTPUT);  int n=Integer.parseInt(cmdline.getOptionValue(TOP));  LOG.info("Tool name: " + FindMaxPageRankNodes.class.getSimpleName());  LOG.info(" - input: " + inputPath);  LOG.info(" - output: " + outputPath);  LOG.info(" - top: " + n);  Configuration conf=getConf();  conf.setInt("mapred.min.split.size",1024 * 1024 * 1024);  conf.setInt("n",n);  Job job=Job.getInstance(conf);  job.setJobName(FindMaxPageRankNodes.class.getName() + ":" + inputPath);  job.setJarByClass(FindMaxPageRankNodes.class);  job.setNumReduceTasks(1);  FileInputFormat.addInputPath(job,new Path(inputPath));  FileOutputFormat.setOutputPath(job,new Path(outputPath));  job.setInputFormatClass(SequenceFileInputFormat.class);  job.setOutputFormatClass(TextOutputFormat.class);  job.setMapOutputKeyClass(IntWritable.class);  job.setMapOutputValueClass(FloatWritable.class);  job.setOutputKeyClass(IntWritable.class);  job.setOutputValueClass(FloatWritable.class);  job.setMapperClass(MyMapper.class);  job.setReducerClass(MyReducer.class);  FileSystem.get(conf).delete(new Path(outputPath),true);  job.waitForCompletion(true);  return 0;}  }
class C{  public JettySolrRunner stopJettySolrRunner(int index) throws Exception {  JettySolrRunner jetty=jettys.get(index);  jetty.stop();  jettys.remove(index);  return jetty;}  }
class C{  @Bean public AuthenticationFailureHandler authenticationFailureHandler(){  return new SimpleUrlAuthenticationFailureHandler();}  }
class C{  public void addHeader(@NonNull View view){  if (view == null) {    throw new IllegalArgumentException("You can't have a null header!");  }  mHeaders.add(view);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addAll(Collections.list(super.listOptions()));  result.addElement(new Option("\tFull name of the OptionHandler analysed.\n" + "\teg: weka.classifiers.rules.ZeroR\n" + "\t(default weka.classifiers.rules.ZeroR)","W",1,"-W"));  if (m_OptionHandler != null) {    result.addElement(new Option("","",0,"\nOptions specific to option handler " + m_OptionHandler.getClass().getName() + ":"));    result.addAll(Collections.list(m_OptionHandler.listOptions()));  }  return result.elements();}  }
class C{  public void check(Environment env) throws ClassNotFound {  if (tracing)   env.dtEnter("SourceClass.check: " + getName());  if (isInsideLocal()) {    if (tracing)     env.dtEvent("SourceClass.check: INSIDE LOCAL " + getOuterClass().getName());    getOuterClass().check(env);  } else {    if (isInnerClass()) {      if (tracing)       env.dtEvent("SourceClass.check: INNER CLASS " + getOuterClass().getName());      ((SourceClass)getOuterClass()).maybeCheck(env);    }    Vset vset=new Vset();    Context ctx=null;    if (tracing)     env.dtEvent("SourceClass.check: CHECK INTERNAL " + getName());    vset=checkInternal(setupEnv(env),ctx,vset);  }  if (tracing)   env.dtExit("SourceClass.check: " + getName());}  }
class C{  public String generateRegex(Value v) throws InterruptedException {  if (v instanceof StringConstant)   return ((StringConstant)v).value;  try {    RE regex=gv.getRE(nonterminals.get(v));    RE re=regex.simplifyOps();    regexMap.put(v,re);    return re.getString();  } catch (  NullPointerException e) {    return "";  }}  }
class C{  public boolean isAllClamped(){  boolean ret=true;  for (  Neuron n : getNeuronList()) {    if (!n.isClamped()) {      ret=false;    }  }  return ret;}  }
class C{  protected T childValue(T parentValue){  return parentValue;}  }
class C{  public static java.sql.Date toSqlDate(String date){  java.util.Date newDate=toDate(date,"00:00:00");  if (newDate != null) {    return new java.sql.Date(newDate.getTime());  } else {    return null;  }}  }
class C{  protected void startTag(int tagType,int id,boolean longTag) throws IOException {  startTag(tagType,longTag);  out.writeUI16(id);}  }
class C{  public void open(){  bdd=mBase.getWritableDatabase();  mBase.onCreate(bdd);}  }
class C{  protected void updatePathEllipsis(){  if (getGraphics() == null) {    return;  }  final FontMetrics fm=getGraphics().getFontMetrics();  m_textEllipsis=super.getText();  int maxlen=m_textEllipsis.length();  String newValue=m_textEllipsis;  final int width=getWidth();  while ((maxlen >= 12) && (fm.stringWidth(newValue) > width)) {    newValue=FileUtils.getPathEllipsis(m_textEllipsis,maxlen);    maxlen--;  }  m_textEllipsis=newValue;}  }
class C{  public QuotaOfCinder createProjectDefaultQuota(Project project,HashMap<String,String> defaultQuotaMap){  long maxQuota=0;  if (project.getQuotaEnabled()) {    maxQuota=(long)(project.getQuota().intValue());  } else {    maxQuota=Long.valueOf(defaultQuotaMap.get(CinderConstants.ResourceQuotaDefaults.GIGABYTES.getResource()));  }  QuotaOfCinder quotaObj=new QuotaOfCinder();  quotaObj.setId(URI.create(UUID.randomUUID().toString()));  quotaObj.setProject(project.getId());  quotaObj.setVolumesLimit(Long.valueOf(defaultQuotaMap.get(CinderConstants.ResourceQuotaDefaults.VOLUMES.getResource())));  quotaObj.setSnapshotsLimit(Long.valueOf(defaultQuotaMap.get(CinderConstants.ResourceQuotaDefaults.SNAPSHOTS.getResource())));  quotaObj.setTotalQuota(maxQuota);  _log.info("Creating default quota for project");  _dbClient.createObject(quotaObj);  return quotaObj;}  }
class C{  public void rectValueToPixelHorizontal(RectF r,float phaseY){  r.left*=phaseY;  r.right*=phaseY;  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public DFSenumerateByFinish(Graph net,Enumeration<GraphNode> nodes){  e=nodes;  net.compactNodeNumbering();  info=new ArrayList<Enumeration<GraphNode>>(net.numberOfNodes() + 1);  if (e.hasMoreElements()) {    theNextElement=e.nextElement();  }}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  public static long negHalfWidth(long min,long max){  if (min > max) {    throw new IllegalArgumentException("min [" + min + "] must be <= max ["+ max+ "]");  }  long mean=meanLow(min,max);  return min - mean - ((min ^ max) & 1);}  }
class C{  private boolean greater(int x,int y){  int i=x + d, j=y + d;  if (keys[i] == null)   return false;  if (keys[j] == null)   return true;  return comp.compare(keys[i],keys[j]) > 0;}  }
class C{  public void addSupportedProfile(java.lang.String param){  if (localSupportedProfile == null) {    localSupportedProfile=new java.lang.String[]{};  }  localSupportedProfileTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localSupportedProfile);  list.add(param);  this.localSupportedProfile=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public DefaultJavaMethod(String name){  setName(name);}  }
class C{  public void doneLearning(){  prune(table);  prune(firstCapitalized);  prune(notFirstCapitalized);}  }
class C{  public void updatePositionText(long pos){  if (isDisposed() || position.isDisposed())   return;  String posText=CoreMessages.editor_binary_hex_status_line_offset + pos + " (dec) = "+ Long.toHexString(pos)+ " (binary)";  position.setText(posText);}  }
class C{  public void testGetF21Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF21Momentary();  assertEquals(expResult,result);}  }
class C{  public boolean constainsInstruction(AbstractInsnNode insnNode){  for (  BytecodeInstruction instruction : instructions) {    if (instruction.getASMNode().equals(insnNode))     return true;  }  return false;}  }
class C{  public ClickableSpanEx(int foregroundColor){  this(foregroundColor,Color.TRANSPARENT);}  }
class C{  public SFTPv3Client(Connection conn) throws IOException {  this(conn,null);}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bOK)   dispose();}  }
class C{  private void addView(){  Log.i(TAG,"addView");  if (mView != null && !isViewVisible) {    isViewVisible=true;    setViewPosition();    windowManager.addView(mView,params);    if (FreeView.mListener != null) {      FreeView.mListener.onShow();    }  }}  }
class C{  @Override public void filter(final IScope scope,final IShape source,final Collection<? extends IShape> internal_results){  internal_results.remove(source);}  }
class C{  public static java.awt.Image createLeafImage(){  byte data[]={(byte)71,(byte)73,(byte)70,(byte)56,(byte)57,(byte)97,(byte)14,(byte)0,(byte)15,(byte)0,(byte)247,(byte)0,(byte)0,(byte)0,(byte)0,(byte)0,(byte)1,(byte)1,(byte)1,(byte)2,(byte)2,(byte)2,(byte)3,(byte)3,(byte)3,(byte)4,(byte)4,(byte)4,(byte)5,(byte)5,(byte)5,(byte)6,(byte)6,(byte)6,(byte)7,(byte)7,(byte)7,(byte)8,(byte)8,(byte)8,(byte)9,(byte)9,(byte)9,(byte)10,(byte)10,(byte)10,(byte)11,(byte)11,(byte)11,(byte)12,(byte)12,(byte)12,(byte)13,(byte)13,(byte)13,(byte)14,(byte)14,(byte)14,(byte)15,(byte)15,(byte)15,(byte)16,(byte)16,(byte)16,(byte)17,(byte)17,(byte)17,(byte)18,(byte)18,(byte)18,(byte)19,(byte)19,(byte)19,(byte)20,(byte)20,(byte)20,(byte)21,(byte)21,(byte)21,(byte)22,(byte)22,(byte)22,(byte)23,(byte)23,(byte)23,(byte)24,(byte)24,(byte)24,(byte)25,(byte)25,(byte)25,(byte)26,(byte)26,(byte)26,(byte)27,(byte)27,(byte)27,(byte)28,(byte)28,(byte)28,(byte)29,(byte)29,(byte)29,(byte)30,(byte)30,(byte)30,(byte)31,(byte)31,(byte)31,(byte)32,(byte)32,(byte)32,(byte)33,(byte)33,(byte)33,(byte)34,(byte)34,(byte)34,(byte)35,(byte)35,(byte)35,(byte)36,(byte)36,(byte)36,(byte)37,(byte)37,(byte)37,(byte)38,(byte)38,(byte)38,(byte)39,(byte)39,(byte)39,(byte)40,(byte)40,(byte)40,(byte)41,(byte)41,(byte)41,(byte)42,(byte)42,(byte)42,(byte)43,(byte)43,(byte)43,(byte)44,(byte)44,(byte)44,(byte)45,(byte)45,(byte)45,(byte)46,(byte)46,(byte)46,(byte)47,(byte)47,(byte)47,(byte)48,(byte)48,(byte)48,(byte)49,(byte)49,(byte)49,(byte)50,(byte)50,(byte)50,(byte)51,(byte)51,(byte)51,(byte)52,(byte)52,(byte)52,(byte)53,(byte)53,(byte)53,(byte)54,(byte)54,(byte)54,(byte)55,(byte)55,(byte)55,(byte)56,(byte)56,(byte)56,(byte)57,(byte)57,(byte)57,(byte)58,(byte)58,(byte)58,(byte)59,(byte)59,(byte)59,(byte)60,(byte)60,(byte)60,(byte)61,(byte)61,(byte)61,(byte)62,(byte)62,(byte)62,(byte)63,(byte)63,(byte)63,(byte)64,(byte)64,(byte)64,(byte)65,(byte)65,(byte)65,(byte)66,(byte)66,(byte)66,(byte)67,(byte)67,(byte)67,(byte)68,(byte)68,(byte)68,(byte)69,(byte)69,(byte)69,(byte)70,(byte)70,(byte)70,(byte)71,(byte)71,(byte)71,(byte)72,(byte)72,(byte)72,(byte)73,(byte)73,(byte)73,(byte)74,(byte)74,(byte)74,(byte)75,(byte)75,(byte)75,(byte)76,(byte)76,(byte)76,(byte)77,(byte)77,(byte)77,(byte)78,(byte)78,(byte)78,(byte)79,(byte)79,(byte)79,(byte)80,(byte)80,(byte)80,(byte)81,(byte)81,(byte)81,(byte)82,(byte)82,(byte)82,(byte)83,(byte)83,(byte)83,(byte)84,(byte)84,(byte)84,(byte)85,(byte)85,(byte)85,(byte)86,(byte)86,(byte)86,(byte)87,(byte)87,(byte)87,(byte)88,(byte)88,(byte)88,(byte)89,(byte)89,(byte)89,(byte)90,(byte)90,(byte)90,(byte)91,(byte)91,(byte)91,(byte)92,(byte)92,(byte)92,(byte)93,(byte)93,(byte)93,(byte)94,(byte)94,(byte)94,(byte)95,(byte)95,(byte)95,(byte)96,(byte)96,(byte)96,(byte)97,(byte)97,(byte)97,(byte)98,(byte)98,(byte)98,(byte)99,(byte)99,(byte)99,(byte)100,(byte)100,(byte)100,(byte)101,(byte)101,(byte)101,(byte)102,(byte)102,(byte)102,(byte)103,(byte)103,(byte)103,(byte)104,(byte)104,(byte)104,(byte)105,(byte)105,(byte)105,(byte)106,(byte)106,(byte)106,(byte)107,(byte)107,(byte)107,(byte)108,(byte)108,(byte)108,(byte)109,(byte)109,(byte)109,(byte)110,(byte)110,(byte)110,(byte)111,(byte)111,(byte)111,(byte)112,(byte)112,(byte)112,(byte)113,(byte)113,(byte)113,(byte)114,(byte)114,(byte)114,(byte)115,(byte)115,(byte)115,(byte)116,(byte)116,(byte)116,(byte)117,(byte)117,(byte)117,(byte)118,(byte)118,(byte)118,(byte)119,(byte)119,(byte)119,(byte)120,(byte)120,(byte)120,(byte)121,(byte)121,(byte)121,(byte)122,(byte)122,(byte)122,(byte)123,(byte)123,(byte)123,(byte)124,(byte)124,(byte)124,(byte)125,(byte)125,(byte)125,(byte)126,(byte)126,(byte)126,(byte)127,(byte)127,(byte)127,(byte)128,(byte)128,(byte)128,(byte)129,(byte)129,(byte)129,(byte)130,(byte)130,(byte)130,(byte)131,(byte)131,(byte)131,(byte)132,(byte)132,(byte)132,(byte)133,(byte)133,(byte)133,(byte)134,(byte)134,(byte)134,(byte)135,(byte)135,(byte)135,(byte)136,(byte)136,(byte)136,(byte)137,(byte)137,(byte)137,(byte)138,(byte)138,(byte)138,(byte)139,(byte)139,(byte)139,(byte)140,(byte)140,(byte)140,(byte)141,(byte)141,(byte)141,(byte)142,(byte)142,(byte)142,(byte)143,(byte)143,(byte)143,(byte)144,(byte)144,(byte)144,(byte)145,(byte)145,(byte)145,(byte)146,(byte)146,(byte)146,(byte)147,(byte)147,(byte)147,(byte)148,(byte)148,(byte)148,(byte)149,(byte)149,(byte)149,(byte)150,(byte)150,(byte)150,(byte)151,(byte)151,(byte)151,(byte)152,(byte)152,(byte)152,(byte)153,(byte)153,(byte)153,(byte)154,(byte)154,(byte)154,(byte)155,(byte)155,(byte)155,(byte)156,(byte)156,(byte)156,(byte)157,(byte)157,(byte)157,(byte)158,(byte)158,(byte)158,(byte)159,(byte)159,(byte)159,(byte)160,(byte)160,(byte)160,(byte)161,(byte)161,(byte)161,(byte)162,(byte)162,(byte)162,(byte)163,(byte)163,(byte)163,(byte)164,(byte)164,(byte)164,(byte)165,(byte)165,(byte)165,(byte)166,(byte)166,(byte)166,(byte)167,(byte)167,(byte)167,(byte)168,(byte)168,(byte)168,(byte)169,(byte)169,(byte)169,(byte)170,(byte)170,(byte)170,(byte)171,(byte)171,(byte)171,(byte)172,(byte)172,(byte)172,(byte)173,(byte)173,(byte)173,(byte)174,(byte)174,(byte)174,(byte)175,(byte)175,(byte)175,(byte)176,(byte)176,(byte)176,(byte)177,(byte)177,(byte)177,(byte)178,(byte)178,(byte)178,(byte)179,(byte)179,(byte)179,(byte)180,(byte)180,(byte)180,(byte)181,(byte)181,(byte)181,(byte)182,(byte)182,(byte)182,(byte)183,(byte)183,(byte)183,(byte)184,(byte)184,(byte)184,(byte)185,(byte)185,(byte)185,(byte)186,(byte)186,(byte)186,(byte)187,(byte)187,(byte)187,(byte)188,(byte)188,(byte)188,(byte)189,(byte)189,(byte)189,(byte)190,(byte)190,(byte)190,(byte)191,(byte)191,(byte)191,(byte)192,(byte)192,(byte)192,(byte)193,(byte)193,(byte)193,(byte)194,(byte)194,(byte)194,(byte)195,(byte)195,(byte)195,(byte)196,(byte)196,(byte)196,(byte)197,(byte)197,(byte)197,(byte)198,(byte)198,(byte)198,(byte)199,(byte)199,(byte)199,(byte)200,(byte)200,(byte)200,(byte)201,(byte)201,(byte)201,(byte)202,(byte)202,(byte)202,(byte)203,(byte)203,(byte)203,(byte)204,(byte)204,(byte)204,(byte)205,(byte)205,(byte)205,(byte)206,(byte)206,(byte)206,(byte)207,(byte)207,(byte)207,(byte)208,(byte)208,(byte)208,(byte)209,(byte)209,(byte)209,(byte)210,(byte)210,(byte)210,(byte)211,(byte)211,(byte)211,(byte)212,(byte)212,(byte)212,(byte)213,(byte)213,(byte)213,(byte)214,(byte)214,(byte)214,(byte)215,(byte)215,(byte)215,(byte)216,(byte)216,(byte)216,(byte)217,(byte)217,(byte)217,(byte)218,(byte)218,(byte)218,(byte)219,(byte)219,(byte)219,(byte)220,(byte)220,(byte)220,(byte)221,(byte)221,(byte)221,(byte)222,(byte)222,(byte)222,(byte)223,(byte)223,(byte)223,(byte)224,(byte)224,(byte)224,(byte)225,(byte)225,(byte)225,(byte)226,(byte)226,(byte)226,(byte)227,(byte)227,(byte)227,(byte)228,(byte)228,(byte)228,(byte)229,(byte)229,(byte)229,(byte)230,(byte)230,(byte)230,(byte)231,(byte)231,(byte)231,(byte)232,(byte)232,(byte)232,(byte)233,(byte)233,(byte)233,(byte)234,(byte)234,(byte)234,(byte)235,(byte)235,(byte)235,(byte)236,(byte)236,(byte)236,(byte)237,(byte)237,(byte)237,(byte)238,(byte)238,(byte)238,(byte)239,(byte)239,(byte)239,(byte)240,(byte)240,(byte)240,(byte)241,(byte)241,(byte)241,(byte)242,(byte)242,(byte)242,(byte)243,(byte)243,(byte)243,(byte)244,(byte)244,(byte)244,(byte)245,(byte)245,(byte)245,(byte)246,(byte)246,(byte)246,(byte)247,(byte)247,(byte)247,(byte)248,(byte)248,(byte)248,(byte)249,(byte)249,(byte)249,(byte)250,(byte)250,(byte)250,(byte)251,(byte)251,(byte)251,(byte)252,(byte)252,(byte)252,(byte)253,(byte)253,(byte)253,(byte)254,(byte)254,(byte)254,(byte)255,(byte)255,(byte)255,(byte)33,(byte)249,(byte)4,(byte)1,(byte)0,(byte)0,(byte)87,(byte)0,(byte)44,(byte)0,(byte)0,(byte)0,(byte)0,(byte)14,(byte)0,(byte)15,(byte)0,(byte)64,(byte)8,(byte)72,(byte)0,(byte)1,(byte)8,(byte)28,(byte)72,(byte)16,(byte)192,(byte)149,(byte)131,(byte)0,(byte)254,(byte)41,(byte)92,(byte)200,(byte)80,(byte)161,(byte)192,(byte)134,(byte)16,(byte)255,(byte)61,(byte)140,(byte)200,(byte)112,(byte)98,(byte)68,(byte)0,(byte)231,(byte)8,(byte)93,(byte)73,(byte)72,(byte)113,(byte)161,(byte)197,(byte)142,(byte)5,(byte)67,(byte)22,(byte)4,(byte)169,(byte)113,(byte)163,(byte)66,(byte)66,(byte)40,(byte)81,(byte)58,(byte)36,(byte)120,(byte)50,(byte)165,(byte)203,(byte)149,(byte)45,(byte)93,(byte)170,(byte)148,(byte)200,(byte)81,(byte)102,(byte)74,(byte)152,(byte)255,(byte)108,(byte)206,(byte)252,(byte)72,(byte)17,(byte)64,(byte)64,(byte)0,(byte)0,(byte)59};  return java.awt.Toolkit.getDefaultToolkit().createImage(data);}  }
class C{  public static double AEWSRrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum,double range,double precision){  double expectedResult;  double predictedValue;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  int len=dvValues.length;  if (precision < 0.0) {    precision=-precision;    System.err.println("Warning: precision (" + precision + ") < 0 in call to AEWSR fitness, setting to -precision.");  }  double totalError=0.0;  for (int i=0; i < len; i++) {    predictedValue=ind.eval(chromosomeNum,useTrainingData,i);    expectedResult=dvValues[i];    double err=Math.abs(predictedValue - expectedResult);    if (err <= precision)     err=0.0;    totalError+=range - err;  }  return totalError;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  HeapArrayOfDoublesUnion(final Memory mem,final long seed){  super(new HeapArrayOfDoublesQuickSelectSketch(mem,seed));}  }
class C{  public void lineTo(double x1,double y1){  if (size() == 0) {    throw new IllegalPathStateException("lineTo only allowed when not empty");  }  get(size() - 1).keepColinear=false;  add(new Node(x1,y1));}  }
class C{  @Override public String generateCreateTableDdl(BusinessObjectDataDdlRequest request,BusinessObjectFormatEntity businessObjectFormatEntity,CustomDdlEntity customDdlEntity,List<String> storageNames,List<StorageEntity> storageEntities,Map<StorageEntity,String> s3BucketNames){  BusinessObjectFormatKey businessObjectFormatKey=new BusinessObjectFormatKey(request.getNamespace(),request.getBusinessObjectDefinitionName(),request.getBusinessObjectFormatUsage(),request.getBusinessObjectFormatFileType(),request.getBusinessObjectFormatVersion());  List<List<String>> partitionFilters=businessObjectDataDaoHelper.buildPartitionFilters(request.getPartitionValueFilters(),request.getPartitionValueFilter(),businessObjectFormatKey,request.getBusinessObjectDataVersion(),storageNames,StoragePlatformEntity.S3,null,businessObjectFormatEntity);  boolean isPartitioned=!businessObjectFormatEntity.getPartitionKey().equalsIgnoreCase(NO_PARTITIONING_PARTITION_KEY) || partitionFilters.size() != 1 || !partitionFilters.get(0).get(0).equalsIgnoreCase(NO_PARTITIONING_PARTITION_VALUE);  GenerateDdlRequest generateDdlRequest=new GenerateDdlRequest();  generateDdlRequest.businessObjectFormatEntity=businessObjectFormatEntity;  generateDdlRequest.customDdlEntity=customDdlEntity;  generateDdlRequest.isPartitioned=isPartitioned;  generateDdlRequest.tableName=request.getTableName();  generateDdlRequest.includeDropTableStatement=request.isIncludeDropTableStatement();  generateDdlRequest.includeIfNotExistsOption=request.isIncludeIfNotExistsOption();  generateDdlRequest.includeDropPartitions=request.isIncludeDropPartitions();  generateDdlRequest.allowMissingData=request.isAllowMissingData();  generateDdlRequest.includeAllRegisteredSubPartitions=request.isIncludeAllRegisteredSubPartitions();  generateDdlRequest.partitionFilters=partitionFilters;  generateDdlRequest.businessObjectFormatVersion=request.getBusinessObjectFormatVersion();  generateDdlRequest.businessObjectDataVersion=request.getBusinessObjectDataVersion();  generateDdlRequest.storageNames=storageNames;  generateDdlRequest.storageEntities=storageEntities;  generateDdlRequest.s3BucketNames=s3BucketNames;  return generateCreateTableDdlHelper(generateDdlRequest);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.STEP__COMMENT:    setComment(COMMENT_EDEFAULT);  return;case SexecPackage.STEP__CALLER:getCaller().clear();return;}super.eUnset(featureID);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static void logException(final Logger logger,final Exception e){  logger.logException(Level.SEVERE,"Unexpected Exception",e);}  }
class C{  public static FocusEvent retarget(FocusEvent e,Component newSource){  if (e == null)   return null;  return new CausedFocusEvent(newSource,e.getID(),e.isTemporary(),e.getOppositeComponent(),(e instanceof CausedFocusEvent) ? ((CausedFocusEvent)e).getCause() : Cause.RETARGETED);}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  private String createDigest(final Credentials credentials) throws AuthenticationException {  String uri=getParameter("uri");  String realm=getParameter("realm");  String nonce=getParameter("nonce");  String method=getParameter("methodname");  String algorithm=getParameter("algorithm");  if (uri == null) {    throw new IllegalStateException("URI may not be null");  }  if (realm == null) {    throw new IllegalStateException("Realm may not be null");  }  if (nonce == null) {    throw new IllegalStateException("Nonce may not be null");  }  if (algorithm == null) {    algorithm="MD5";  }  String charset=getParameter("charset");  if (charset == null) {    charset="ISO-8859-1";  }  if (qopVariant == QOP_AUTH_INT) {    throw new AuthenticationException("Unsupported qop in HTTP Digest authentication");  }  MessageDigest md5Helper=createMessageDigest("MD5");  String uname=credentials.getUserPrincipal().getName();  String pwd=credentials.getPassword();  StringBuilder tmp=new StringBuilder(uname.length() + realm.length() + pwd.length()+ 2);  tmp.append(uname);  tmp.append(':');  tmp.append(realm);  tmp.append(':');  tmp.append(pwd);  String a1=tmp.toString();  if (algorithm.equalsIgnoreCase("MD5-sess")) {    String cnonce=getCnonce();    String tmp2=encode(md5Helper.digest(EncodingUtils.getBytes(a1,charset)));    StringBuilder tmp3=new StringBuilder(tmp2.length() + nonce.length() + cnonce.length()+ 2);    tmp3.append(tmp2);    tmp3.append(':');    tmp3.append(nonce);    tmp3.append(':');    tmp3.append(cnonce);    a1=tmp3.toString();  } else   if (!algorithm.equalsIgnoreCase("MD5")) {    throw new AuthenticationException("Unhandled algorithm " + algorithm + " requested");  }  String md5a1=encode(md5Helper.digest(EncodingUtils.getBytes(a1,charset)));  String a2=null;  if (qopVariant == QOP_AUTH_INT) {  } else {    a2=method + ':' + uri;  }  String md5a2=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(a2)));  String serverDigestValue;  if (qopVariant == QOP_MISSING) {    StringBuilder tmp2=new StringBuilder(md5a1.length() + nonce.length() + md5a2.length());    tmp2.append(md5a1);    tmp2.append(':');    tmp2.append(nonce);    tmp2.append(':');    tmp2.append(md5a2);    serverDigestValue=tmp2.toString();  } else {    String qopOption=getQopVariantString();    String cnonce=getCnonce();    StringBuilder tmp2=new StringBuilder(md5a1.length() + nonce.length() + NC.length()+ cnonce.length()+ qopOption.length()+ md5a2.length()+ 5);    tmp2.append(md5a1);    tmp2.append(':');    tmp2.append(nonce);    tmp2.append(':');    tmp2.append(NC);    tmp2.append(':');    tmp2.append(cnonce);    tmp2.append(':');    tmp2.append(qopOption);    tmp2.append(':');    tmp2.append(md5a2);    serverDigestValue=tmp2.toString();  }  String serverDigest=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(serverDigestValue)));  return serverDigest;}  }
class C{  public LongSparseArray(){  this(10);}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  public byte[] toByteArray(){  return data;}  }
class C{  @Override protected void initScenes(){  inScene.setPosition(CCDirector.sharedDirector().winSize().width,0);}  }
class C{  protected void clearBoxes(){  for (int i=0; i < mPassCodeEditTexts.length; i++) {    mPassCodeEditTexts[i].setText("");  }  mPassCodeEditTexts[0].requestFocus();}  }
class C{  private static boolean isPomFileName(final String fileName){  return "pom.xml".equals(fileName) || "pom".equals(FilenameUtils.getExtension(fileName));}  }
class C{  public boolean InsertSym(int type,String id,String context,String cType,int line,int col){  int i;  if (type == PROCEDUREVAR || type == PROCESSVAR || type == PARAMETER) {    i=FindSym(GLOBAL,id,"");    if (i < symtab.size())     return false;    i=FindSym(id,context);    if (i < symtab.size())     return false;  } else {    i=FindSym(type,id,context);    if (i < symtab.size())     return false;  }  SymTabEntry se=new SymTabEntry(type,id,context,cType,line,col);  symtab.addElement(se);  return true;}  }
class C{  public void delete() throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("delete");  GdbDelete.parse(gdbOutput);}  }
class C{  @Override protected Command createAddCommand(EditPart child,EditPart after){  return null;}  }
