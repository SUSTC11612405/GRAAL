class C{  public VariableTracker(TemplateBuffer buffer) throws MalformedTreeException, BadLocationException {  Assert.isLegal(buffer != null);  fBuffer=buffer;  fDocument=new Document(fBuffer.getString());  installJavaStuff(fDocument);  fDocument.addPositionCategory(CATEGORY);  fDocument.addPositionUpdater(new ExclusivePositionUpdater(CATEGORY));  fPositions=createRangeMarkers(fBuffer.getVariables(),fDocument);}  }
class C{  protected void resetStickyFooterSelection(){  if (mStickyFooterView instanceof LinearLayout) {    for (int i=0; i < (mStickyFooterView).getChildCount(); i++) {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {        (mStickyFooterView).getChildAt(i).setActivated(false);      }      (mStickyFooterView).getChildAt(i).setSelected(false);    }  }}  }
class C{  public static Path hfilePath(Path outputPath,int partitionIndex){  return new Path(outputPath,TerrapinUtil.formatPartitionName(partitionIndex));}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static <S>Iterator<S> providers(Class<S> service,ClassLoader loader) throws ServiceConfigurationError {  return new LazyIterator<S>(service,loader);}  }
class C{  public void resetToCheckpoint(){  if (checkPoint != -1) {    current_item=checkPoint;  }  checkPoint=-1;}  }
class C{  public void testGetVersion23() throws Exception {  String xml=WEBAPP_23_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertEquals(WebXmlVersion.V2_3,webXml.getVersion());}  }
class C{  public String item(int index){  if (index < 0 || index >= length) {    return null;  }  return list[index].toString();}  }
class C{  private boolean isNormalExecution(int i){  sequence.checkIndex(i);  return getResult(i) instanceof NormalExecution;}  }
class C{  public void flap(AdvancedModelRenderer box,float speed,float degree,boolean invert,float offset,float weight,float flap,float flapAmount){  box.flap(speed,degree,invert,offset,weight,flap,flapAmount);}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public static void generateImports(StringBuilder builder){  builder.append("import com.google.inject.Inject;\n");  builder.append("import com.google.inject.Provider;\n");  builder.append("import com.google.inject.Singleton;\n");  builder.append("import java.util.HashMap;\n");  builder.append("import java.util.Map;\n");}  }
class C{  public Cache(int initialCapacity){  init(initialCapacity,0.75f);}  }
class C{  public void paintRubberband(Point2D pt1,Point2D pt2,Graphics g){  paintLine(pt1,pt2,g);  paintCircle(pt1,pt2,g);}  }
class C{  public LinkedCaseInsensitiveMap(Locale locale){  super();  this.caseInsensitiveKeys=new HashMap<String,String>();  this.locale=(locale != null ? locale : Locale.getDefault());}  }
class C{  protected Node newNode(){  return new XBLOMImportElement();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CleanUpOptions(){  fOptions=new Hashtable<String,String>();}  }
class C{  public void trim(int leftTrimNumberOfSample,int rightTrimNumberOfSample){  long chunkSize=waveHeader.getChunkSize();  long subChunk2Size=waveHeader.getSubChunk2Size();  long totalTrimmed=leftTrimNumberOfSample + rightTrimNumberOfSample;  if (totalTrimmed > subChunk2Size) {    leftTrimNumberOfSample=(int)subChunk2Size;  }  chunkSize-=totalTrimmed;  subChunk2Size-=totalTrimmed;  if (chunkSize >= 0 && subChunk2Size >= 0) {    waveHeader.setChunkSize(chunkSize);    waveHeader.setSubChunk2Size(subChunk2Size);    byte[] trimmedData=new byte[(int)subChunk2Size];    System.arraycopy(data,(int)leftTrimNumberOfSample,trimmedData,0,(int)subChunk2Size);    data=trimmedData;  } else {    System.err.println("Trim error: Negative length");  }}  }
class C{  public void testDynDoubleSortMissingFirst() throws Exception {  checkSortMissingFirst("dyn_doubledv_missingfirst","-1.3","4.2");}  }
class C{  @Provides @Config("stackdriverMaxPointsPerRequest") public static int provideStackdriverMaxPointsPerRequest(){  return 200;}  }
class C{  public void treeNodesChanged(TreeModelEvent event){  Object[] changedNodes=event.getChildren();  if (changedNodes == null || changedNodes.length <= 0)   return;  for (  Object o : changedNodes) {    if (o == null)     continue;    if (o instanceof LayerTreeGroupNode)     this.handleGroupSelection((LayerTreeGroupNode)o); else     if (o instanceof LayerNode)     this.handleLayerSelection((LayerNode)o);  }}  }
class C{  private static void d_uarkp(double[] a,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){  for (int i=rl, aix=rl * n, cix=rl * 2; i < ru; i++, aix+=n, cix+=2) {    kbuff.set(0,0);    sum(a,aix,n,kbuff,kplus);    c[cix + 0]=kbuff._sum;    c[cix + 1]=kbuff._correction;  }}  }
class C{  public void runRaptorAsync(TIntIntMap accessTimes,PointSetTimes nonTransitTimes,TaskStatistics ts){  workerState=new RaptorWorkerState();  workerState.cumulativeMs=0;  new Thread(null).start();}  }
class C{  public static String unescapeCharPrecomposedOnly(String c){  if (c.equals("\\\\"))   return c;  Tuple2<String,List<String>> letterAndNormalDiacritics=normalizeCharSeparateDiacritics(c);  String baseLetter=letterAndNormalDiacritics._1;  List<String> diacritics=letterAndNormalDiacritics._2;  if (diacritics.isEmpty())   return baseLetter;  StringBuilder b=new StringBuilder();  String firstDiacritic=diacritics.get(0);  String precomposed=COMBINED_TO_PRECOMPOSED_MAP.get(baseLetter + firstDiacritic);  if (precomposed != null)   b.append(precomposed); else   b.append(baseLetter);  for (int i=(precomposed != null ? 1 : 0); i < diacritics.size(); ++i) {    String escape=COMBINING_TO_ESCAPE_MAP.get(diacritics.get(i));    if (escape != null)     b.insert(0,escape); else     b.append(StringHelper.toUnicode(diacritics.get(i)));  }  return b.toString();}  }
class C{  public OpenID(IHttpRequestResponse message,String protocol,IBurpExtenderCallbacks callbacks){  super(message,protocol,callbacks);  super.setToken(findToken());  super.setProtocolflowID(analyseProtocol());  add(this,getProtocolflowID());}  }
class C{  @Override public void resetNavBar(){  if (debugFX) {    System.out.println("resetNavBar");  }  if (!isSingle) {    return;  }  if (!properties.getValue("consistentTabBar").equalsIgnoreCase("true")) {    setSplitDividerLocation(collapsedSize);    tabsExpanded=false;    tabsNotInitialised=true;  }  fxButtons.setPageLayoutButtonsEnabled(false);}  }
class C{  public static <O,V>boolean isConsistent(Collection<O> sources,ParameterGetter<O,V> getter){  if (sources.size() <= 0) {    throw new IllegalArgumentException("Source list is empty.");  }  Iterator<O> sourceIter=sources.iterator();  O sourceFirst=sourceIter.next();  V val=getter.getParameter(sourceFirst);  while (sourceIter.hasNext()) {    if (!val.equals(getter.getParameter(sourceIter.next()))) {      return false;    }  }  return true;}  }
class C{  public static void cutItem(final OdorWorldEntity selectedEntity,final OdorWorldPanel parent){  setClipboardEntity(selectedEntity);  parent.repaint();}  }
class C{  public HiveMetaStoreBridge(Configuration atlasProperties,HiveConf hiveConf) throws Exception {  this(atlasProperties,hiveConf,null);}  }
class C{  public void testGetOwnerDocument1() throws Throwable {  Document doc;  Document ownerDoc;  DOMImplementation domImpl;  DocumentType docType;  String nullID=null;  doc=(Document)load("staff",builder);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("mydoc",nullID,nullID);  ownerDoc=docType.getOwnerDocument();  assertNull("nodegetownerdocument01",ownerDoc);}  }
class C{  @SuppressWarnings("unchecked") protected String doIt() throws Exception {  String whereClause="EXISTS (SELECT T_Selection_ID FROM T_Selection WHERE  T_Selection.AD_PInstance_ID=? AND T_Selection.T_Selection_ID=WM_InOutBoundLine.WM_InOutboundLine_ID)";  Collection<MWMInOutBoundLine> boundlines=new Query(getCtx(),I_WM_InOutBoundLine.Table_Name,whereClause,get_TrxName()).setClient_ID().setParameters(new Object[]{getAD_PInstance_ID()}).list();  int seq=10;  for (  MWMInOutBoundLine boundline : boundlines) {    if (boundline.getQtyToDeliver().signum() > 0 || p_IsIncludeNotAvailable) {      createMInOut(boundline);    }    seq++;  }  Enumeration shipments=m_shipments.elements();  while (shipments.hasMoreElements()) {    MInOut inout=(MInOut)shipments.nextElement();    inout.setDocAction(p_DocAction);    inout.processIt(p_DocAction);    if (!inout.processIt(p_DocAction))     log.warning("Failed: " + inout);    inout.saveEx();  }  return "";}  }
class C{  private boolean isValidPriority(double priority){  try {    MessageStore.checkPriority(priority);    return true;  } catch (  IllegalArgumentException e) {    return false;  }}  }
class C{  protected boolean useDuplicateValues(){  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static short[] clone(short[] array){  if (array == null) {    return null;  }  return (short[])array.clone();}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  int[] oldKeys=_set;  V[] oldVals=_values;  _set=new int[newCapacity];  _values=(V[])new Object[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (isFull(oldVals,i)) {      int o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  public static String forURL(String aURLFragment){  String result=null;  try {    result=URLEncoder.encode(aURLFragment,"UTF-8");  } catch (  UnsupportedEncodingException ex) {    throw new RuntimeException("UTF-8 not supported",ex);  }  return result;}  }
class C{  private FSDataInputStream updateCache(String filePath){  FSDataInputStream fileChannel=fileNameAndStreamCache.get(filePath);  try {    if (null == fileChannel) {      Path pt=new Path(filePath);      FileSystem fs=FileSystem.get(FileFactory.getConfiguration());      fileChannel=fs.open(pt);      fileNameAndStreamCache.put(filePath,fileChannel);    }  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return fileChannel;}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference entRef;  Element entElement;  NamedNodeMap attrList;  Node attrNode;  Node gender;  NodeList genderList;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  assertNotNull("genderNotNull",gender);  entRef=doc.createEntityReference("ent4");  assertNotNull("entRefNotNull",entRef);  appendedChild=gender.appendChild(entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  attrList=entElement.getAttributes();  attrNode=attrList.getNamedItem("domestic");{    boolean success=false;    try {      ((Attr)attrNode).setValue("newvalue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setValue_throws_NO_MODIFICATION",success);  }{    boolean success=false;    try {      attrNode.setNodeValue("newvalue2");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setNodeValue_throws_NO_MODIFICATION",success);  }}  }
class C{  @Override @Nullable public Query parse(QueryParseContext parseContext) throws IOException {  XContentParser parser=parseContext.parser();  Template template=parse(parser,parseContext.parseFieldMatcher());  ExecutableScript executable=this.scriptService.executable(template,ScriptContext.Standard.SEARCH,SearchContext.current());  BytesReference querySource=(BytesReference)executable.run();  try (XContentParser qSourceParser=XContentFactory.xContent(querySource).createParser(querySource)){    final QueryParseContext context=new QueryParseContext(parseContext.index(),parseContext.indexQueryParserService());    context.reset(qSourceParser);    return context.parseInnerQuery();  } }  }
class C{  public DeviceAutomator launchApp(Intent intent){  return launchApp(intent,5000);}  }
class C{  public static String hexToString(final String data) throws ConversionException {  try {    return ConversionUtils.arrayToString(Hex.decodeHex(data.toCharArray()));  } catch (  DecoderException e) {    throw new ConversionException("Cannot convert given hex text into plain text",e);  }}  }
class C{  private void emitFunction(DocComment comment){  xml.append("\n<method name='");  xml.append(comment.getName());  xml.append("' fullname='");  xml.append(comment.getFullname());  xml.append("' ");  xml.append("isStatic='");  xml.append(comment.isStatic());  xml.append("' ");  xml.append("isFinal='");  xml.append(comment.isFinal());  xml.append("' ");  xml.append("isOverride='");  xml.append(comment.isOverride());  xml.append("' ");  String[] param_names=comment.getParamNames();  if (param_names != null) {    xml.append(" param_names='");    for (int i=0; i < param_names.length; i++) {      String pname=param_names[i];      if (pname != null) {        if (i != 0)         xml.append(";");        xml.append(pname);      }    }    xml.append("'");    String[] param_types=comment.getParamTypes();    xml.append(" param_types='");    for (int i=0; i < param_types.length; i++) {      String ptype=param_types[i];      if (ptype != null) {        if (i != 0)         xml.append(";");        xml.append(ptype);      }    }    xml.append("'");    String[] param_defaults=comment.getParamDefaults();    xml.append(" param_defaults='");    for (int i=0; i < param_defaults.length; i++) {      String pdefa=param_defaults[i];      if (pdefa != null) {        if (i != 0)         xml.append(";");        xml.append(pdefa);      }    }    xml.append("'");  }  xml.append(" result_type='");  xml.append(comment.getResultType());  xml.append("'>");  String desc=comment.getDescription();  if (desc != null)   appendTag("description",comment.getDescription());  emitTags(comment.getAllTags());  if (comment.getMetadata() != null)   emitMetadata(comment.getMetadata());  xml.append("\n</method>");}  }
class C{  public void testMoveDirectorySourceParentRootDestinationMissing() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW,dir),null);  create(igfs,null,null);  igfs.rename(dir,SUBDIR_NEW);  checkExist(igfs,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,dir);}  }
class C{  private void performFrameTasks(){synchronized (mFrameTaskQueue) {    AFrameTask task=mFrameTaskQueue.poll();    while (task != null) {      task.run();      task=mFrameTaskQueue.poll();    }  }}  }
class C{  public static SpannableString typeface(CharSequence sequence,TypefaceCollection typefaceCollection,int style){  checkTypefaceStyleThrowing(style);  SpannableString s=new SpannableString(sequence);  s.setSpan(new TypefaceSpan(typefaceCollection.getTypeface(style)),0,s.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  return s;}  }
class C{  MotionEvent createMotionEventForStackScroll(MotionEvent ev){  MotionEvent pev=MotionEvent.obtainNoHistory(ev);  pev.setLocation(0,mScroller.progressToScrollRange(mScroller.getStackScroll()));  return pev;}  }
class C{  private void zEventTextFieldChanged(){  if (settings == null) {    return;  }  if (skipTextFieldChangedFunctionWhileTrue) {    return;  }  String dateText=dateTextField.getText();  boolean textIsEmpty=dateText.trim().isEmpty();  DateVetoPolicy vetoPolicy=settings.getVetoPolicy();  boolean nullIsAllowed=settings.getAllowEmptyDates();  LocalDate parsedDate=null;  if (!textIsEmpty) {    parsedDate=InternalUtilities.getParsedDateOrNull(dateText,settings.getFormatForDatesCommonEra(),settings.getFormatForDatesBeforeCommonEra(),settings.getFormatsForParsing(),settings.getLocale());  }  boolean dateIsVetoed=false;  if (parsedDate != null) {    dateIsVetoed=InternalUtilities.isDateVetoed(vetoPolicy,parsedDate);  }  if (textIsEmpty && nullIsAllowed) {    zInternalSetLastValidDateAndNotifyListeners(null);  }  if ((!textIsEmpty) && (parsedDate != null) && (dateIsVetoed == false)) {    zInternalSetLastValidDateAndNotifyListeners(parsedDate);  }  zDrawTextFieldIndicators();  firePropertyChange("text",null,dateTextField.getText());}  }
class C{  public static int reverse(int number){  String reverse="";  String n=number + "";  for (int i=n.length() - 1; i >= 0; i--) {    reverse+=n.charAt(i);  }  return Integer.parseInt(reverse);}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public static void displayErrorDialog(Shell shell,String title,String message){  MessageDialog.openError(shell,title,message);}  }
class C{  private void runList(){  String type=nextArg();  if (type == null) {    System.err.println("Error: didn't specify type of data to list");    return;  }  if ("package".equals(type) || "packages".equals(type)) {    runListPackages(false);  } else   if ("permission-groups".equals(type)) {    runListPermissionGroups();  } else   if ("permissions".equals(type)) {    runListPermissions();  } else   if ("features".equals(type)) {    runListFeatures();  } else   if ("libraries".equals(type)) {    runListLibraries();  } else   if ("instrumentation".equals(type)) {    runListInstrumentation();  } else   if ("users".equals(type)) {    runListUsers();  } else {    System.err.println("Error: unknown list type '" + type + "'");  }}  }
class C{  protected void serializeAttList(Element node) throws SAXException {  NamedNodeMap atts=node.getAttributes();  int nAttrs=atts.getLength();  for (int i=0; i < nAttrs; i++) {    Node attr=atts.item(i);    String localName=attr.getLocalName();    String attrName=attr.getNodeName();    String attrPrefix=attr.getPrefix() == null ? "" : attr.getPrefix();    String attrValue=attr.getNodeValue();    String type=null;    if (fIsLevel3DOM) {      type=((Attr)attr).getSchemaTypeInfo().getTypeName();    }    type=type == null ? "CDATA" : type;    String attrNS=attr.getNamespaceURI();    if (attrNS != null && attrNS.length() == 0) {      attrNS=null;      attrName=attr.getLocalName();    }    boolean isSpecified=((Attr)attr).getSpecified();    boolean addAttr=true;    boolean applyFilter=false;    boolean xmlnsAttr=attrName.equals("xmlns") || attrName.startsWith("xmlns:");    if ((fFeatures & WELLFORMED) != 0) {      isAttributeWellFormed(attr);    }    if ((fFeatures & NAMESPACES) != 0 && !xmlnsAttr) {      if (attrNS != null) {        attrPrefix=attrPrefix == null ? "" : attrPrefix;        String declAttrPrefix=fNSBinder.getPrefix(attrNS);        String declAttrNS=fNSBinder.getURI(attrPrefix);        if ("".equals(attrPrefix) || "".equals(declAttrPrefix) || !attrPrefix.equals(declAttrPrefix)) {          if (declAttrPrefix != null && !"".equals(declAttrPrefix)) {            attrPrefix=declAttrPrefix;            if (declAttrPrefix.length() > 0) {              attrName=declAttrPrefix + ":" + localName;            } else {              attrName=localName;            }          } else {            if (attrPrefix != null && !"".equals(attrPrefix) && declAttrNS == null) {              if ((fFeatures & NAMESPACEDECLS) != 0) {                fSerializer.addAttribute(XMLNS_URI,attrPrefix,XMLNS_PREFIX + ":" + attrPrefix,"CDATA",attrNS);                fNSBinder.declarePrefix(attrPrefix,attrNS);                fLocalNSBinder.declarePrefix(attrPrefix,attrNS);              }            } else {              int counter=1;              attrPrefix="NS" + counter++;              while (fLocalNSBinder.getURI(attrPrefix) != null) {                attrPrefix="NS" + counter++;              }              attrName=attrPrefix + ":" + localName;              if ((fFeatures & NAMESPACEDECLS) != 0) {                fSerializer.addAttribute(XMLNS_URI,attrPrefix,XMLNS_PREFIX + ":" + attrPrefix,"CDATA",attrNS);                fNSBinder.declarePrefix(attrPrefix,attrNS);                fLocalNSBinder.declarePrefix(attrPrefix,attrNS);              }            }          }        }      } else {        if (localName == null) {          String msg=Utils.messages.createMessage(MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,new Object[]{attrName});          if (fErrorHandler != null) {            fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,null,null,null));          }        } else {        }      }    }    if ((((fFeatures & DISCARDDEFAULT) != 0) && isSpecified) || ((fFeatures & DISCARDDEFAULT) == 0)) {      applyFilter=true;    } else {      addAttr=false;    }    if (applyFilter) {      if (fFilter != null && (fFilter.getWhatToShow() & NodeFilter.SHOW_ATTRIBUTE) != 0) {        if (!xmlnsAttr) {          short code=fFilter.acceptNode(attr);switch (code) {case NodeFilter.FILTER_REJECT:case NodeFilter.FILTER_SKIP:            addAttr=false;          break;default :      }    }  }}if (addAttr && xmlnsAttr) {  if ((fFeatures & NAMESPACEDECLS) != 0) {    if (localName != null && !"".equals(localName)) {      fSerializer.addAttribute(attrNS,localName,attrName,type,attrValue);    }  }} else if (addAttr && !xmlnsAttr) {  if (((fFeatures & NAMESPACEDECLS) != 0) && (attrNS != null)) {    fSerializer.addAttribute(attrNS,localName,attrName,type,attrValue);  } else {    fSerializer.addAttribute("",localName,attrName,type,attrValue);  }}if (xmlnsAttr && ((fFeatures & NAMESPACEDECLS) != 0)) {  int index;  String prefix=(index=attrName.indexOf(":")) < 0 ? "" : attrName.substring(index + 1);  if (!"".equals(prefix)) {    fSerializer.namespaceAfterStartElement(prefix,attrValue);  }}}}  }
class C{  public void endCDATA(Augmentations augs) throws XNIException {  try {    if (fLexicalHandler != null) {      fLexicalHandler.endCDATA();    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.659 -0500",hash_original_method="8E6F2519C4EF5016C5BDFABD97F81370",hash_generated_method="4ECDE48F6CDDB5198636F8451EC49FCF") public void back(){  if (--pos == -1) {    pos=0;  }}  }
class C{  public String toDebugString(){  return String.format("(jobType:%1s refIdType:%2s refId:%3d whEtlJobId:%4d whEtlExecId:%5d)",this.etlJobName.name(),this.refIdType,this.refId,this.whEtlJobId,this.whEtlExecId);}  }
class C{  public void clearHosts(){  this.portToMac.clear();}  }
class C{  public FuzzyCondition maxExpansions(Integer maxExpansions){  this.maxExpansions=maxExpansions;  return this;}  }
class C{  public DoubleVector times(DoubleVector v){  return copy().timesEquals(v);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,Math.sqrt(z1));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public MWMSectionType(Properties ctx,int WM_Section_Type_ID){  this(ctx,WM_Section_Type_ID,null);}  }
class C{  public boolean isSetOperatorId(){  return EncodingUtils.testBit(issetBitfield,OPERATORID_ISSET_ID);}  }
class C{  public void write(int b){  throw new GroovyBugError("Any write calls to this stream are invalid!");}  }
class C{  public MonitoringFilterResult clone(){  MonitoringFilterResult result=new MonitoringFilterResult();  return result;}  }
class C{  public void readNames(final PdfObject nameObject,final Javascript javascript,final boolean isKid){  final Map DestsAsList=nameObject.getOtherDictionaries();  if (!DestsAsList.isEmpty()) {    readDestList(DestsAsList);  } else {    readNamesObject(nameObject,javascript,isKid);  }}  }
class C{  public static void wtf(String tag,String msg,Throwable tr){  println(ASSERT,tag,msg,tr);}  }
class C{  public final int capacity(){  return _buffer.length;}  }
class C{  @Bean public DataSource dataSource(){  logger.info("dataSource() invoked");  DataSource dataSource=(new EmbeddedDatabaseBuilder()).addScript("classpath:testdb/schema.sql").addScript("classpath:testdb/data.sql").build();  logger.info("dataSource = " + dataSource);  JdbcTemplate jdbcTemplate=new JdbcTemplate(dataSource);  List<Map<String,Object>> accounts=jdbcTemplate.queryForList("SELECT number FROM T_ACCOUNT");  logger.info("System has " + accounts.size() + " accounts");  Random rand=new Random();  for (  Map<String,Object> item : accounts) {    String number=(String)item.get("number");    BigDecimal balance=new BigDecimal(rand.nextInt(10000000) / 100.0).setScale(2,BigDecimal.ROUND_HALF_UP);    jdbcTemplate.update("UPDATE T_ACCOUNT SET balance = ? WHERE number = ?",balance,number);  }  return dataSource;}  }
class C{  @Override default Eval<OptionalDouble> averageInt(final ToIntFunction<? super T> fn){  return Eval.later(null);}  }
class C{  public boolean isReadOnly() throws SQLException {  return false;}  }
class C{  protected static token real_next_token() throws java.io.IOException {  int sym_num;  for (; ; ) {    if (next_char == ' ' || next_char == '\t' || next_char == '\n' || next_char == '\f' || next_char == '\r') {      advance();      continue;    }    sym_num=find_single_char(next_char);    if (sym_num != -1) {      advance();      return new token(sym_num);    }    if (next_char == ':') {      if (next_char2 != ':') {        advance();        return new token(sym.COLON);      }      advance();      if (next_char2 == '=') {        advance();        advance();        return new token(sym.COLON_COLON_EQUALS);      } else {        return new token(sym.COLON);      }    }    if (next_char == '/' && (next_char2 == '*' || next_char2 == '/')) {      swallow_comment();      continue;    }    if (next_char == '{' && next_char2 == ':')     return do_code_string();    if (id_start_char(next_char))     return do_id();    if (next_char == EOF_CHAR)     return new token(sym.EOF);    emit_warn("Unrecognized character '" + new Character((char)next_char) + "'("+ next_char+ ") -- ignored");    advance();  }}  }
class C{  public String encode(){  return headerName + COLON + SP+ encodeBody()+ NEWLINE;}  }
class C{  public StyledString createStyledLabel(CompletionProposal proposal){switch (proposal.getKind()) {case CompletionProposal.METHOD_NAME_REFERENCE:case CompletionProposal.METHOD_REF:case CompletionProposal.CONSTRUCTOR_INVOCATION:case CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER:case CompletionProposal.POTENTIAL_METHOD_DECLARATION:    if (fContext != null && fContext.isInJavadoc())     return createJavadocMethodProposalLabel(proposal);  return createMethodProposalLabel(proposal);case CompletionProposal.METHOD_DECLARATION:return createOverrideMethodProposalLabel(proposal);case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:return createAnonymousTypeLabel(proposal);case CompletionProposal.TYPE_REF:return createTypeProposalLabel(proposal);case CompletionProposal.JAVADOC_TYPE_REF:return createJavadocTypeProposalLabel(proposal);case CompletionProposal.JAVADOC_FIELD_REF:case CompletionProposal.JAVADOC_VALUE_REF:case CompletionProposal.JAVADOC_BLOCK_TAG:case CompletionProposal.JAVADOC_INLINE_TAG:case CompletionProposal.JAVADOC_PARAM_REF:return createJavadocSimpleProposalLabel(proposal);case CompletionProposal.JAVADOC_METHOD_REF:return createJavadocMethodProposalLabel(proposal);case CompletionProposal.PACKAGE_REF:return createPackageProposalLabel(proposal);case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:case CompletionProposal.FIELD_REF:case CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER:return createLabelWithTypeAndDeclaration(proposal);case CompletionProposal.LOCAL_VARIABLE_REF:case CompletionProposal.VARIABLE_DECLARATION:return createSimpleLabelWithType(proposal);case CompletionProposal.KEYWORD:case CompletionProposal.LABEL_REF:return createSimpleLabel(proposal);default :Assert.isTrue(false);return null;}}  }
class C{  public RadarVolume(List<Position> positions,int[] obstructionFlags,int width,int height){  if (positions == null || obstructionFlags == null) {    String message=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (width < 2) {    String message=Logging.getMessage("generic.InvalidWidth",width);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height < 2) {    String message=Logging.getMessage("generic.InvalidHeight",height);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (positions.size() < 2 * (width * height)) {    String message=Logging.getMessage("generic.ListLengthInsufficient",positions.size());    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (obstructionFlags.length < positions.size()) {    String message=Logging.getMessage("generic.ListLengthInsufficient",obstructionFlags.length);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.positions=positions;  this.obstructionFlags=obstructionFlags;  this.width=width;  this.height=height;}  }
class C{  public static Map<String,Integer> classNamesToMapping(List<String> labels){  Map<String,Integer> mapping=new HashMap<String,Integer>();  for (int i=0; i < labels.size(); i++) {    mapping.put(labels.get(i),i);  }  return mapping;}  }
class C{  public PutResult putMetrics(List<Metric> metrics) throws IOException {  String requestUrl=COLLECTION_RESOURCE + RESOURCE;  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.POST,requestUrl,metrics);  assertValidResponse(response,requestUrl);  Map<String,Object> map=fromJson(response.getResult(),new TypeReference<Map<String,Object>>(){  });  List<String> errorMessages=(List<String>)map.get("Error Messages");  return new PutResult(String.valueOf(map.get("Success")),String.valueOf(map.get("Errors")),errorMessages);}  }
class C{  public static boolean isMetaDataAvailable(EncodedImage encodedImage){  return encodedImage.mRotationAngle >= 0 && encodedImage.mWidth >= 0 && encodedImage.mHeight >= 0;}  }
class C{  public AddMarketingPermissionException(){}  }
class C{  public boolean isUpdate(){  boolean is;  if (m_editFlag == FolderEditFlag.UPDATE)   is=true; else   is=false;  return is;}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {}  }
class C{  protected ComputeElement queryRegisteredResource(URI id){  ArgValidator.checkUri(id);  ComputeElement ce=_dbClient.queryObject(ComputeElement.class,id);  ArgValidator.checkEntityNotNull(ce,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(ce.getRegistrationStatus())) {    throw APIException.badRequests.resourceNotRegistered(ComputeElement.class.getSimpleName(),id);  }  return ce;}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  JSONTokener x=new JSONTokener(string);  while (x.more()) {    String name=Cookie.unescape(x.nextTo('='));    x.next('=');    jo.put(name,Cookie.unescape(x.nextTo(';')));    x.next();  }  return jo;}  }
class C{  public static Integer toInteger(CharSequence self){  return Integer.valueOf(self.toString().trim());}  }
class C{  @Override public void replaceRange(String txt,int s,int e){  if (jtext != null) {    jtext.getDocument().removeDocumentListener(jtext);    jtext.replaceRange(txt,s,e);    postEvent(new TextEvent(target,TextEvent.TEXT_VALUE_CHANGED));    jtext.getDocument().addDocumentListener(jtext);  }}  }
class C{  public Text plus(Object obj){  return this.concat(Text.valueOf(obj));}  }
class C{  CallerInfo markAsVoiceMail(){  mIsVoiceMail=true;  try {    String voiceMailLabel=TelephonyManager.getDefault().getVoiceMailAlphaTag();    phoneNumber=voiceMailLabel;  } catch (  SecurityException se) {    Rlog.e(TAG,"Cannot access VoiceMail.",se);  }  return this;}  }
class C{  public ObjectIdentifier(int[] oid,String name,Object oidGroup){  this(oid);  if (oidGroup == null) {    throw new NullPointerException("oidGroup == null");  }  this.group=oidGroup;  this.name=name;  toOIDString();}  }
class C{  protected void sequence_TStructGetter(ISerializationContext context,TStructGetter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void publishProfileUpdateEvent(Profile old,Profile updated){  ProfileUpdateEvent profileUpdateEvent=new ProfileUpdateEvent(this,old,updated);  eventPublisher.publishEvent(profileUpdateEvent);}  }
class C{  private String[] split(String string,String delim){  ArrayList<String> result=new ArrayList<String>();  StringTokenizer stringTokenizer=new StringTokenizer(string,delim);  while (stringTokenizer.hasMoreTokens()) {    result.add(stringTokenizer.nextToken());  }  return (String[])result.toArray(new String[result.size()]);}  }
class C{  private void loadImage(){  List<Transformation> transformations=getTransformations();  boolean hasUrl=url != null;  boolean hasResourceId=resourceId != null;  boolean hasPlaceholder=placeholderId != null;  ListenerTarget listenerTarget=getLinearTarget(listener);  if (hasUrl) {    RequestCreator bitmapRequest=Picasso.with(context).load(url).tag(PICASSO_IMAGE_LOADER_TAG);    applyPlaceholder(bitmapRequest).resize(size,size).transform(transformations).into(listenerTarget);  } else   if (hasResourceId || hasPlaceholder) {    Resources resources=context.getResources();    Drawable placeholder=null;    Drawable drawable=null;    if (hasPlaceholder) {      placeholder=resources.getDrawable(placeholderId);      listenerTarget.onPrepareLoad(placeholder);    }    if (hasResourceId) {      drawable=resources.getDrawable(resourceId);      listenerTarget.onDrawableLoad(drawable);    }  } else {    throw new IllegalArgumentException("Review your request, you are trying to load an image without a url or a resource id.");  }}  }
class C{  public LongMap(){  _keys=(K[])new Object[16];  _values=new long[16];  _flags=new byte[16];  _mask=_keys.length - 1;  _size=0;  _nullValue=NULL;}  }
class C{  @Override public WidgetsModel clone(){  return new WidgetsModel(this);}  }
class C{  @Override public boolean lockInteraction(){  if (!mIsInteractionLocked) {    mIsInteractionLocked=true;    return true;  }  return false;}  }
class C{  private static boolean isPublicTestMethod(Method m){  return isTestMethod(m) && Modifier.isPublic(m.getModifiers());}  }
class C{  public void run(){  ClusterResourceNotification notification;  int warningCount=0;  do {    try {      notification=notifications.take();      notifyListeners(notification);    } catch (    InterruptedException i) {      logger.warn("Interrupted while waiting for a notification");      warningCount++;    }catch (    ResourceNotificationException r) {      logger.warn("Exception while processing notifications" + r);      warningCount++;    }  } while (warningCount < MAX_WARNINGS);  logger.fatal("The maximum number of warnings has been exceeded. Exiting...");  System.exit(1);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_TYPE_ACCESS_MODIFIER:    return getDeclaredTypeAccessModifier();case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_PROVIDED_BY_RUNTIME:  return isDeclaredProvidedByRuntime();case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_ELEMENT_TYPE:return getDeclaredElementType();case TypesPackage.TOBJECT_PROTOTYPE__SUPER_TYPE:return getSuperType();case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_FINAL:return isDeclaredFinal();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public final void splitByMask(AbstractNode<E> newNode,long[] assignment){  assert (isLeaf() == newNode.isLeaf());  int dest=BitsUtil.nextSetBit(assignment,0);  if (dest < 0) {    throw new AbortException("No bits set in splitting mask.");  }  int pos=dest;  while (pos < numEntries) {    if (BitsUtil.get(assignment,pos)) {      newNode.addEntry(getEntry(pos));    } else {      entries[dest]=entries[pos];      dest++;    }    pos++;  }  final int rm=numEntries - dest;  while (dest < numEntries) {    entries[dest]=null;    dest++;  }  numEntries-=rm;}  }
class C{  public void add(final int tag,final Object theEvent){  matches[tag]=theEvent;}  }
class C{  public Question(String message){  this.wholeMsg=message;  this.echo=0;  this.head=getFirstSentence(message).trim();  this.desc="";  if (this.head.length() < message.length()) {    this.desc=message.substring(this.head.length());  }  this.headLastChar=head.substring(head.length() - 1);  this.timestamp=new Date().getTime();}  }
class C{  public void startDrag(DragGestureEvent trigger,Cursor dragCursor,Image dragImage,Point dragOffset,Transferable transferable,DragSourceListener dsl) throws InvalidDnDOperationException {  startDrag(trigger,dragCursor,dragImage,dragOffset,transferable,dsl,null);}  }
class C{  public void notifyListeners(){  for (  final ICriteriumListener listener : m_listeners) {    try {      listener.criteriumChanged();    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public void replacePathForRenamedFolder(Path oldPath,Path newPath){  String p=getPath();  p=p.replace(oldPath.toAbsolutePath().toString(),newPath.toAbsolutePath().toString());  setPath(p);}  }
class C{  public WindowEvent(Window source,int id,Window opposite){  this(source,id,opposite,0,0);}  }
class C{  static void errorClosingTagNotEmpty(String systemID,int lineNr) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"Closing tag must be empty");}  }
class C{  public synchronized void add(final ClassLoader classLoader){  cleanup();  if (classLoader != null) {    addInternal(classLoader);  }}  }
class C{  private int[] computeFailure(byte[] pattern){  int[] failure=new int[pattern.length];  int j=0;  for (int i=1; i < pattern.length; i++) {    while (j > 0 && pattern[j] != pattern[i]) {      j=failure[j - 1];    }    if (pattern[j] == pattern[i]) {      j++;    }    failure[i]=j;  }  return failure;}  }
class C{  public synchronized Object peek() throws RuntimeException {  if (m_Head == null) {    throw new RuntimeException("Queue is empty");  }  return m_Head.contents();}  }
class C{  public CSVParserBuilder withQuoteChar(final char quoteChar){  this.quoteChar=quoteChar;  return this;}  }
class C{  protected static String quoteDate(java.sql.Date x){  if (x == null) {    return "null";  }  return "Date.valueOf(\"" + x.toString() + "\")";}  }
class C{  protected void verifyState(DataSource<Object> dataSource,@Nullable DataSource<Object> dataSourceWithResult,boolean isClosed,boolean isFinished,boolean hasResult,Object result,boolean hasFailed,Throwable failureCause){  DataSourceTestUtils.verifyState(dataSource,isClosed,isFinished,hasResult,result,hasFailed,failureCause);  if (dataSourceWithResult != null) {    mInOrder.verify(dataSourceWithResult).getResult();  }  verifyNoMoreInteractionsAll();}  }
class C{  private int read1(byte[] b,int off,int len) throws IOException {  int avail=count - pos;  if (avail <= 0) {    if (len >= getBufIfOpen().length && markpos < 0) {      int val=getInIfOpen().read(b,off,len);      if (val < 0) {        actualAvailable=-1;      } else {        if (printInput) {          System.out.print(new String(b,off,val));        }      }      return val;    }    fill();    avail=count - pos;    if (avail <= 0) {      return -1;    }  }  int cnt=(avail < len) ? avail : len;  System.arraycopy(getBufIfOpen(),pos,b,off,cnt);  if (printInput) {    System.out.print(new String(b,off,cnt));  }  pos+=cnt;  return cnt;}  }
class C{  public void addVariable(String varName){  if (!namesToVars.containsKey(varName) && checkVarName(varName)) {    MyNode e=new MyNode(varName);    myNodes.add(e);    namesToVars.put(varName,e);  }}  }
class C{  public void clearStack(){  top=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.819 -0500",hash_original_method="D52FB5C4B4CE262D3BDE3938D1D81A5F",hash_generated_method="59B476798D21930EEFFD1F6F1580AB72") public RequestHandle(RequestQueue requestQueue,String url,WebAddress uri,String method,Map<String,String> headers,InputStream bodyProvider,int bodyLength,Request request){  if (headers == null) {    headers=new HashMap<String,String>();  }  mHeaders=headers;  mBodyProvider=bodyProvider;  mBodyLength=bodyLength;  mMethod=method == null ? "GET" : method;  mUrl=url;  mUri=uri;  mRequestQueue=requestQueue;  mRequest=request;}  }
class C{  public static byte[] qCompress(byte[] bytes) throws IOException {  Deflater deflater=new Deflater();  deflater.setInput(bytes);  ByteArrayOutputStream byteArray=new ByteArrayOutputStream();  new DataOutputStream(byteArray).writeInt(bytes.length);  try (DeflaterOutputStream deflaterOutputStream=new DeflaterOutputStream(byteArray,deflater,true)){    deflaterOutputStream.flush();  }   return byteArray.toByteArray();}  }
class C{  public void essential(final Consumer<OnComplete> fn){  this.essential=fn;  if (done) {    fn.accept(buildOnComplete());  }}  }
class C{  public static void drawKeypoints(Mat output,SceneAnalysis sceneAnalysis){  KeyPoint[] keypoints=sceneAnalysis.keypoints.toArray();  for (  KeyPoint kp : keypoints) {    Drawing.drawCircle(output,new Point(kp.pt.x,kp.pt.y),4,new ColorRGBA(255,0,0));  }}  }
class C{  public void reinit(Token prototype){  prototype.copyToWithoutPayloadClone(this);}  }
class C{  public static String byteArrayToHexString(byte in[]){  return byteArrayToHexString(in,0);}  }
class C{  public static List<Element> tidyInputStream(InputStream in) throws JDOMException, IOException {  List<Element> result=null;  if (logger.isTraceEnabled())   logger.trace("tidyInputStream: initializing tidy");  if (tidyForTidyInputStream == null) {    tidyForTidyInputStream=new Tidy();    tidyForTidyInputStream.setShowWarnings(false);    tidyForTidyInputStream.setXmlOut(true);    tidyForTidyInputStream.setInputEncoding("utf-8");    tidyForTidyInputStream.setQuiet(true);    tidyForTidyInputStream.setDropEmptyParas(false);  }  ByteArrayOutputStream out=new ByteArrayOutputStream();  if (logger.isTraceEnabled())   logger.trace("tidyInputStream: parsing with Tidy");  try {    tidyForTidyInputStream.parseDOM(in,out);  }  finally {    out.close();  }  String text2=new String(out.toByteArray());  SAXBuilder sb=new SAXBuilder(XMLReaders.NONVALIDATING,(SAXHandlerFactory)null,(JDOMFactory)null);  if (logger.isTraceEnabled())   logger.trace("tidyInputStream: building doc");  Document doc=sb.build(new StringReader(text2));  Element html=doc.getRootElement();  if (!html.getName().equalsIgnoreCase("html")) {    if (logger.isTraceEnabled())     logger.trace("tidyInputStream: no html tag found");  } else {    if (logger.isTraceEnabled())     logger.trace("tidyInputStream: found html tag");    for (    Object o : html.getChildren()) {      if (o instanceof Element) {        Element child=(Element)o;        if (!child.getName().equalsIgnoreCase("body")) {          if (logger.isTraceEnabled())           logger.trace("tidyInputStream: no body tag found");        } else {          if (logger.isTraceEnabled())           logger.trace("tidyInputStream: found body tag");          (result=new ArrayList<Element>()).addAll(child.getChildren());        }      }    }  }  if (logger.isTraceEnabled())   logger.trace("tidyInputStream: completed tidy");  return result;}  }
class C{  @Override public boolean equals(Object object){  if (object == null) {    return false;  }  if (object == this) {    return true;  }  if (object instanceof DefaultTimeline) {    return true;  }  return false;}  }
class C{  public static boolean isAutoCommit(Properties ctx,int WindowNo){  if (ctx == null)   throw new IllegalArgumentException("Require Context");  String s=getContext(ctx,WindowNo,"AutoCommit",false);  if (s != null) {    if (s.equals("Y"))     return true; else     return false;  }  return isAutoCommit(ctx);}  }
class C{  public boolean canOverride(GlowBlock block,BlockFace face,ItemStack holding){  return block.isLiquid();}  }
class C{  private boolean equalsZero(){  for (int i=0; i < coeffs.length; i++) {    if (coeffs[i] != 0) {      return false;    }  }  return true;}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitArrayMemberValue(this);}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionArgDefs=new HashMap<>();  optionArgDefs.put("input",1);  optionArgDefs.put("outdir",1);  return optionArgDefs;}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public OSTask(String cmd){  m_cmd=cmd;}  }
class C{  public Period plusYears(long yearsToAdd){  if (yearsToAdd == 0) {    return this;  }  return create(Math.toIntExact(Math.addExact(years,yearsToAdd)),months,days);}  }
class C{  @EventHandler(ignoreCancelled=true) public void onVehicleEnter(VehicleEnterEvent event){  if (event.getActor() instanceof Player && !canInteract((Player)event.getActor())) {    event.setCancelled(true);  }}  }
class C{  public void startThreads(){  int priority=Thread.currentThread().getPriority();  log.debug("startThreads current priority = " + priority + " max available = "+ Thread.MAX_PRIORITY+ " default = "+ Thread.NORM_PRIORITY+ " min available = "+ Thread.MIN_PRIORITY);  int xmtpriority=(Thread.MAX_PRIORITY - 1 > priority ? Thread.MAX_PRIORITY - 1 : Thread.MAX_PRIORITY);  if (xmtHandler == null) {    xmtHandler=new XmtHandler();  }  Thread xmtThread=new Thread(xmtHandler,"DCC++ transmit handler");  log.debug("Xmt thread starts at priority " + xmtpriority);  xmtThread.setDaemon(true);  xmtThread.setPriority(Thread.MAX_PRIORITY - 1);  xmtThread.start();  if (rcvHandler == null) {    rcvHandler=new RcvHandler(this);  }  Thread rcvThread=new Thread(rcvHandler,"DCC++ receive handler");  rcvThread.setDaemon(true);  rcvThread.setPriority(Thread.MAX_PRIORITY);  rcvThread.start();}  }
class C{  @Override protected void paintComponent(Graphics graphics){  int width=getSize().width;  int height=getSize().height;  Insets insets=getInsets();  graphics.setColor(getBackground());  graphics.fillRect(insets.left,insets.top,width - (insets.left + insets.right),height - (insets.top + insets.bottom));  int items=model.getSize();  int right=positions[positions.length - 1];  for (int i=0; i < items * 2; i++) {    int index=(i < items) ? i : i - items;    int adjust=insets.left + offset;    int head=positions[index] + adjust;    int tail=positions[index + 1] + adjust;    if (i >= items) {      head+=right;      tail+=right;    }    if ((head < width) && (tail > 0)) {      Object value=model.getElementAt(index);      JComponent component=renderer.getTickerRendererComponent(this,value);      Dimension size=component.getPreferredSize();      renderPane.paintComponent(graphics,component,this,head,insets.top,size.width,size.height);    }  }}  }
class C{  public boolean reverseCorrectIt(){  log.info("reverseCorrectIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return false;}  }
class C{  public boolean isTokenValid(){  return tokenIntern.equals(token);}  }
class C{  private S2Loop assembleLoop(S2Point v0,S2Point v1,List<S2Edge> unusedEdges){  List<S2Point> path=Lists.newArrayList();  Map<S2Point,Integer> index=Maps.newHashMap();  path.add(v0);  path.add(v1);  index.put(v1,1);  while (path.size() >= 2) {    v0=path.get(path.size() - 2);    v1=path.get(path.size() - 1);    S2Point v2=null;    boolean v2Found=false;    Multiset<S2Point> vset=edges.get(v1);    if (vset != null) {      for (      S2Point v : vset) {        if (v.equals(v0)) {          continue;        }        if (!v2Found || S2.orderedCCW(v0,v2,v,v1)) {          v2=v;        }        v2Found=true;      }    }    if (!v2Found) {      unusedEdges.add(new S2Edge(v0,v1));      eraseEdge(v0,v1);      index.remove(v1);      path.remove(path.size() - 1);    } else     if (index.get(v2) == null) {      index.put(v2,path.size());      path.add(v2);    } else {      path=path.subList(index.get(v2),path.size());      if (options.getValidate() && !S2Loop.isValid(path)) {        rejectLoop(path,path.size(),unusedEdges);        eraseLoop(path,path.size());        return null;      }      return new S2Loop(path);    }  }  return null;}  }
class C{  public Builder sslSocketFactory(SSLSocketFactory sslSocketFactory){  if (sslSocketFactory == null)   throw new NullPointerException("sslSocketFactory == null");  this.sslSocketFactory=sslSocketFactory;  return this;}  }
class C{  public JpaRepositoryState(String state,boolean initial){  this(null,state,initial);}  }
class C{  public boolean scrollToCaret(){  int line=getCaretLine();  int lineStart=getLineStartOffset(line);  int offset=Math.max(0,Math.min(getLineLength(line) - 1,getCaretPosition() - lineStart));  return scrollTo(line,offset);}  }
class C{  public void initializePresenters(){  for (  RosiePresenter presenter : presenters) {    presenter.initialize();  }}  }
class C{  public static ValueLob openLinked(int type,int tableId,int objectId,long precision){  String fileName=getFileName(tableId,objectId);  return new ValueLob(type,fileName,tableId,objectId,true,precision);}  }
class C{  public KeyPersistenceSettings(Element el){  super(el);  if (PersistenceStrategy.POJO != getStrategy()) {    init();    return;  }  NodeList keyElem=el.getElementsByTagName(PARTITION_KEY_ELEMENT);  Element partKeysNode=keyElem != null ? (Element)keyElem.item(0) : null;  Element clusterKeysNode=el.getElementsByTagName(CLUSTER_KEY_ELEMENT) != null ? (Element)el.getElementsByTagName(CLUSTER_KEY_ELEMENT).item(0) : null;  if (partKeysNode == null && clusterKeysNode != null) {    throw new IllegalArgumentException("It's not allowed to specify cluster key fields mapping, but " + "doesn't specify partition key mappings");  }  partKeyFields=detectFields(partKeysNode,getPartitionKeyDescriptors());  if (partKeyFields == null || partKeyFields.isEmpty()) {    throw new IllegalStateException("Failed to initialize partition key fields for class '" + getJavaClass().getName() + "'");  }  clusterKeyFields=detectFields(clusterKeysNode,getClusterKeyDescriptors(partKeyFields));  fields=new LinkedList<>();  fields.addAll(partKeyFields);  fields.addAll(clusterKeyFields);  checkDuplicates(fields);  init();}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (null != m_left && m_left.canTraverseOutsideSubtree())   return true;  if (null != m_right && m_right.canTraverseOutsideSubtree())   return true;  return false;}  }
class C{  public int readInt(){  return scanner.nextInt();}  }
class C{  public static double calcEndOfPlanElement(final double now,final PlanElement pe){  if (now == Time.UNDEFINED_TIME) {    throw new RuntimeException("got undefined now to update with plan element" + pe);  }  if (pe instanceof Activity) {    Activity act=(Activity)pe;    double endTime=act.getEndTime();    double startTime=act.getStartTime();    double dur=act.getMaximumDuration();    if (endTime != Time.UNDEFINED_TIME) {      return endTime;    } else     if ((startTime != Time.UNDEFINED_TIME) && (dur != Time.UNDEFINED_TIME)) {      return startTime + dur;    } else     if (dur != Time.UNDEFINED_TIME) {      return now + dur;    } else {      return Time.UNDEFINED_TIME;    }  } else {    Route route=((Leg)pe).getRoute();    double travelTime=route != null ? route.getTravelTime() : Time.UNDEFINED_TIME;    travelTime=travelTime == Time.UNDEFINED_TIME ? ((Leg)pe).getTravelTime() : travelTime;    return now + (travelTime != Time.UNDEFINED_TIME ? travelTime : 0);  }}  }
class C{  static public void createPath(String path){  createPath(new File(path));}  }
class C{  public void updateStats(){  this.numberMatches=0;  this.numberUnmatches=0;  this.numberMatchedChars=0;  this.numberUnmatchedChars=0;  this.numberUnAnnotatedChars=0;  this.numberOfChars=0;  for (  Example ex : this.examples) {    this.numberMatches+=ex.match.size();    this.numberUnmatches+=ex.unmatch.size();    this.numberMatchedChars+=ex.getNumberMatchedChars();    this.numberUnmatchedChars+=ex.getNumberUnmatchedChars();    this.numberOfChars+=ex.getNumberOfChars();  }  this.numberUnAnnotatedChars=this.numberOfChars - this.numberMatchedChars - this.numberUnmatchedChars;}  }
class C{  public boolean isQuoted(){  return quoted;}  }
class C{  public static void count(int[] counts){  Scanner input=new Scanner(System.in);  int num;  do {    num=input.nextInt();    if (num >= 1 && num <= 100)     counts[num - 1]++;  } while (num != 0);}  }
class C{  public Matrix3f m10(float m10){  this.m10=m10;  return this;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static void logError(String message,Throwable exception){  Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,message,exception));}  }
class C{  public TenantDeletionConstraintException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:33.387 -0500",hash_original_method="D2B938CFC8BBB876E5EB510A00C9CCB3",hash_generated_method="424654138E7F0D121A69909EF97DBEFA") protected ASN1Sequence readKeyPair(PemObject obj) throws IOException {  boolean isEncrypted=false;  String dekInfo=null;  List headers=obj.getHeaders();  for (Iterator it=headers.iterator(); it.hasNext(); ) {    PemHeader hdr=(PemHeader)it.next();    if (hdr.getName().equals("Proc-Type") && hdr.getValue().equals("4,ENCRYPTED")) {      isEncrypted=true;    } else     if (hdr.getName().equals("DEK-Info")) {      dekInfo=hdr.getValue();    }  }  byte[] keyBytes=obj.getContent();  if (isEncrypted) {    if (pFinder == null) {      throw new PasswordException("No password finder specified, but a password is required");    }    char[] password=pFinder.getPassword();    if (password == null) {      throw new PasswordException("Password is null, but a password is required");    }    StringTokenizer tknz=new StringTokenizer(dekInfo,",");    String dekAlgName=tknz.nextToken();    byte[] iv=Hex.decode(tknz.nextToken());    keyBytes=PEMUtilities.crypt(false,provider,keyBytes,password,dekAlgName,iv);  }  try {    return (ASN1Sequence)ASN1Object.fromByteArray(keyBytes);  } catch (  IOException e) {    if (isEncrypted) {      throw new PEMException("exception decoding - please check password and data.",e);    } else {      throw new PEMException(e.getMessage(),e);    }  }catch (  ClassCastException e) {    if (isEncrypted) {      throw new PEMException("exception decoding - please check password and data.",e);    } else {      throw new PEMException(e.getMessage(),e);    }  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private void registerHost(SimEvent ev){  NetworkHost hs=(NetworkHost)ev.getData();  hostlist.put(hs.getId(),hs);}  }
class C{  public void testEquals_unequalObjectsInEqualityGroup(){  assertTestEqualsCausesException("Unequal objects in the same equality group should cause an exception.",new EqualsTester().newEqualityGroup("a","b"));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (trace_entity_1: ");  result.append(trace_entity_1);  result.append(')');  return result.toString();}  }
class C{  public static Bitmap extractMiniThumb(Bitmap source,int width,int height){  return BitmapUtils.extractMiniThumb(source,width,height,true);}  }
class C{  @BeforeClass public static void beforeClass(){  BlockTestHelper.generateRPClasses();}  }
class C{  public void addResponse(Object response){  values.add(RESPONSE_KEY,response);}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress("Simplified LOF",3) : null;  DBIDs ids=relation.getDBIDs();  LOG.beginStep(stepprog,1,"Materializing neighborhoods w.r.t. distance function.");  KNNQuery<O> knnq=DatabaseUtil.precomputedKNNQuery(database,relation,getDistanceFunction(),k);  LOG.beginStep(stepprog,2,"Computing densities.");  WritableDoubleDataStore dens=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  computeSimplifiedLRDs(ids,knnq,dens);  LOG.beginStep(stepprog,3,"Computing SLOFs.");  WritableDoubleDataStore lofs=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_STATIC);  DoubleMinMax lofminmax=new DoubleMinMax();  computeSimplifiedLOFs(ids,knnq,dens,lofs,lofminmax);  LOG.setCompleted(stepprog);  DoubleRelation scoreResult=new MaterializedDoubleRelation("Simplified Local Outlier Factor","simplified-lof-outlier",lofs,ids);  OutlierScoreMeta scoreMeta=new QuotientOutlierScoreMeta(lofminmax.getMin(),lofminmax.getMax(),0.,Double.POSITIVE_INFINITY,1.);  OutlierResult result=new OutlierResult(scoreMeta,scoreResult);  return result;}  }
class C{  public static int geoHashLevelsForPrecision(double meters){  assert meters >= 0;  if (meters == 0) {    return GeohashPrefixTree.getMaxLevelsPossible();  } else {    final double ratio=1 + (EARTH_POLAR_DISTANCE / EARTH_EQUATOR);    final double width=Math.sqrt((meters * meters) / (ratio * ratio));    final double part=Math.ceil(EARTH_EQUATOR / width);    if (part == 1)     return 1;    final int bits=(int)Math.round(Math.ceil(Math.log(part) / Math.log(2)));    final int full=bits / 5;    final int left=bits - full * 5;    final int even=full + (left > 0 ? 1 : 0);    final int odd=full + (left > 3 ? 1 : 0);    return even + odd;  }}  }
class C{  public ImageSharingIntentService(){  super("ImageSharingIntentService");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static org.opcfoundation.ua.transport.security.KeyPair renewApplicationInstanceCertificate(String commonName,String organisation,String applicationUri,int validityTime,org.opcfoundation.ua.transport.security.KeyPair oldKeys,String... hostNames) throws IOException, IllegalStateException, GeneralSecurityException {  return renewApplicationInstanceCertificate(commonName,organisation,applicationUri,validityTime,oldKeys,null,hostNames);}  }
class C{  public void resetMocks(){  try {    Method send=repo.getClass().getMethod(RxMockerInvocationProxy.METHOD_NAME_RESET_MOCKS);    send.invoke(repo);  } catch (  NoSuchMethodException|InvocationTargetException|IllegalAccessException e) {    throw new IllegalArgumentException("with not called on a mocked object please use RxMocks.mock(Class) to generate the repo mock",e);  }}  }
class C{  public static boolean expect(final PsiBuilder builder,final TokenSet expectedTypes){  if (expectedTypes.contains(builder.getTokenType())) {    builder.advanceLexer();    return true;  }  return false;}  }
class C{  public void processUpdated(){  Operator hoveredOp=model.getHoveringOperator();  boolean hoveredOperatorFound=hoveredOp == null ? true : false;  List<Operator> movedOperators=new LinkedList<Operator>();  List<Operator> portChangedOperators=new LinkedList<Operator>();  for (  ExecutionUnit unit : model.getProcesses()) {    movedOperators=controller.ensureOperatorsHaveLocation(unit);    for (    Operator op : unit.getOperators()) {      Integer formerNumber=model.getNumberOfPorts(op);      Integer newNumber=op.getInputPorts().getNumberOfPorts() + op.getOutputPorts().getNumberOfPorts();      if (formerNumber == null || !newNumber.equals(formerNumber)) {        portChangedOperators.add(op);        model.setNumberOfPorts(op,newNumber);      }      if (!hoveredOperatorFound && hoveredOp != null && hoveredOp.equals(op)) {        hoveredOperatorFound=true;      }    }  }  for (  ExecutionUnit unit : model.getProcesses()) {    Operator op=unit.getEnclosingOperator();    Integer formerNumber=model.getNumberOfPorts(op);    Integer newNumber=op.getInputPorts().getNumberOfPorts() + op.getOutputPorts().getNumberOfPorts();    if (formerNumber == null || !newNumber.equals(formerNumber)) {      portChangedOperators.add(op);      model.setNumberOfPorts(op,newNumber);    }  }  if (!hoveredOperatorFound) {    setHoveringOperator(null);  }  if (!movedOperators.isEmpty()) {    model.fireOperatorsMoved(movedOperators);  } else   if (!portChangedOperators.isEmpty()) {    model.firePortsChanged(portChangedOperators);  }}  }
class C{  @Override public boolean isClosed(){  return _channel == null;}  }
class C{  public boolean isRefresh(){  return refresh;}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public void addEntry(int startPc,int length,int nameIndex,int descriptorIndex,int index){  int size=info.length;  byte[] newInfo=new byte[size + 10];  ByteArray.write16bit(tableLength() + 1,newInfo,0);  for (int i=2; i < size; ++i)   newInfo[i]=info[i];  ByteArray.write16bit(startPc,newInfo,size);  ByteArray.write16bit(length,newInfo,size + 2);  ByteArray.write16bit(nameIndex,newInfo,size + 4);  ByteArray.write16bit(descriptorIndex,newInfo,size + 6);  ByteArray.write16bit(index,newInfo,size + 8);  info=newInfo;}  }
class C{  public Settings indexSettings(){  return this.indexSettings;}  }
class C{  public boolean equals(final ArtifactCoordinates obj){  return this == obj || obj != null && groupId.equals(obj.groupId) && artifactId.equals(obj.artifactId) && version.equals(obj.version) && classifier.equals(obj.classifier);}  }
class C{  public String levelDataToString(){  return "Dummy level string";}  }
class C{  @Override public void doPost(final HttpServletRequest req,final HttpServletResponse res) throws ServletException, IOException {  process(req,res);}  }
class C{  protected static Boolean lock_DTLS(Object key){  TXLockService dtls=TXLockService.getDTLS();  boolean gotLock=((TXLockServiceImpl)dtls).getInternalDistributedLockService().lock(key,-1,-1);  logInfo("lock_LTLS gotLock (hopefully true): " + gotLock);  return Boolean.valueOf(gotLock);}  }
class C{  public String toString(){  return "AclEntry:" + princ.toString();}  }
class C{  static public int compareCanonicalVersions(String version) throws IllegalArgumentException {  return compareCanonicalVersions(version,getCanonicalVersion());}  }
class C{  public static ADNode makeADTree(int iNode,ArrayList<Integer> nRecords,Instances instances){  ADNode _ADNode=new ADNode();  _ADNode.m_nCount=nRecords.size();  _ADNode.m_nStartNode=iNode;  if (nRecords.size() < MIN_RECORD_SIZE) {    _ADNode.m_Instances=new Instance[nRecords.size()];    for (int iInstance=0; iInstance < nRecords.size(); iInstance++) {      _ADNode.m_Instances[iInstance]=instances.instance(nRecords.get(iInstance).intValue());    }  } else {    _ADNode.m_VaryNodes=new VaryNode[instances.numAttributes() - iNode];    for (int iNode2=iNode; iNode2 < instances.numAttributes(); iNode2++) {      _ADNode.m_VaryNodes[iNode2 - iNode]=makeVaryNode(iNode2,nRecords,instances);    }  }  return _ADNode;}  }
class C{  Map<String,Connector.Argument> connectorArguments(LaunchingConnector connector,String mainArgs){  Map<String,Connector.Argument> arguments=connector.defaultArguments();  Connector.Argument mainArg=(Connector.Argument)arguments.get("main");  if (mainArg == null) {    throw new Error("Bad launching connector");  }  mainArg.setValue(mainArgs);  if (watchFields) {    Connector.Argument optionArg=(Connector.Argument)arguments.get("options");    if (optionArg == null) {      throw new Error("Bad launching connector");    }    optionArg.setValue("-classic");  }  return arguments;}  }
class C{  public static List findEdgesIncidentOnOrigin(QuadEdge start){  List incEdge=new ArrayList();  QuadEdge qe=start;  do {    incEdge.add(qe);    qe=qe.oNext();  } while (qe != start);  return incEdge;}  }
class C{  public static List<String> split(String stringToSplit,String delimiter,boolean trim){  if (stringToSplit == null) {    return new ArrayList<String>();  }  if (delimiter == null) {    throw new IllegalArgumentException();  }  StringTokenizer tokenizer=new StringTokenizer(stringToSplit,delimiter,false);  List<String> splitTokens=new ArrayList<String>(tokenizer.countTokens());  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    if (trim) {      token=token.trim();    }    splitTokens.add(token);  }  return splitTokens;}  }
class C{  public LauncherScroller(Context context,Interpolator interpolator){  this(context,interpolator,context.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB);}  }
class C{  public Properties asProperties(PropsType propsType){  boolean propsForCache=propsType == PropsType.Cache;  Properties props=new Properties();  if (propsForCache)   props.setProperty("cacheName",id);  props.setProperty("maxIdleTime",Long.toString(getMaxIdleTime()));  props.setProperty("maxCacheTime",Long.toString(maxCacheTime));  props.setProperty("maxCacheTimeSpread",Long.toString(maxCacheTimeSpread));  props.setProperty("expectedMapSize",Integer.toString(expectedMapSize));  props.setProperty("concurrencyLevel",Integer.toString(concurrencyLevel));  props.setProperty("evictionPolicy",evictionPolicy.toString());  props.setProperty("hashMapClass",hashImplementation.toString());  props.setProperty("jamPolicy",jamPolicy.toString());  props.setProperty("statistics",Boolean.toString(statistics));  if (propsForCache)   props.setProperty("cacheLoaderClass",loader == null ? "null" : loader.getClass().getName());  props.setProperty("writeMode",writeMode.toString());  return props;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public TreeNode deserialize(String data){  this.data=data;  return desHelper();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.REQUIRED_RUNTIME_LIBRARIES__REQUIRED_RUNTIME_LIBRARIES:    return getRequiredRuntimeLibraries();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public final boolean post(@NonNull Runnable r){  return mExec.post(wrapRunnable(r));}  }
class C{  public final CC gapRight(String boundsSize){  hor.setGapAfter(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  public void clear(){  if (m_changeSupport != null) {    try {      m_changeSupport.fireVetoableChange(PROPERTYNAME,super.size(),0);    } catch (    Exception e) {      System.out.println("CCache.clear - " + e);      return;    }  }  super.clear();  if (m_expire != 0) {    long addMS=60000L * m_expire;    m_timeExp=System.currentTimeMillis() + addMS;  }  m_justReset=true;}  }
class C{  public Matrix arrayRightDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] / B.A[i][j];    }  }  return this;}  }
class C{  public void resizeCache(int max_size,int num_x_subframes,int num_y_subframes){  boolean destructive=false;  if (num_x_subframes > 0 && num_y_subframes > 0) {    numXSubframes=num_x_subframes;    numYSubframes=num_y_subframes;    destructive=true;    Debug.message("dted","DTEDFrameCache: destructive resizing");  } else {    Debug.message("dted","DTEDFrameCache: passive resizing");  }  CacheObject[] oldObjs=objs;  if (max_size != objs.length && max_size > 0) {    objs=new CacheObject[max_size];  }  for (int i=0; i < objs.length; i++) {    if (i >= oldObjs.length) {      break;    }    DTEDCacheObject dco=(DTEDCacheObject)oldObjs[i];    if (dco == null) {      objs[i]=null;      continue;    }    DTEDSubframedFrame frame=(DTEDSubframedFrame)(dco.obj);    dco.cachedTime=0;    if (frame == null) {      Debug.output("DTEDFrameCache: No Frame for key!");      continue;    }    if (destructive) {      frame.initSubframes(num_x_subframes,num_y_subframes);    } else {      if (oldObjs == objs) {        continue;      }    }    if (i < oldObjs.length) {      objs[i]=oldObjs[i];    } else {      objs[i]=null;    }  }  oldObjs=null;}  }
class C{  public void testLocalsAverageCorrectly(ConditionalTransferEntropyCalculator teCalc,int timeSteps,int k) throws Exception {  teCalc.initialise(k,1,1);  RandomGenerator rg=new RandomGenerator();  double[] sourceData=rg.generateNormalData(timeSteps,0,1);  double[] destData=rg.generateNormalData(timeSteps,0,1);  double[] condData=rg.generateNormalData(timeSteps,0,1);  teCalc.setObservations(sourceData,destData,condData);  double te=teCalc.computeAverageLocalOfObservations();  double[] teLocal=teCalc.computeLocalOfPreviousObservations();  System.out.printf("Average was %.5f\n",te);  assertEquals(te,MatrixUtils.mean(teLocal,k,timeSteps - k),0.00001);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public TileCacheRed(CachableRed cr,int tileWidth,int tileHeight){  super();  ColorModel cm=cr.getColorModel();  Rectangle bounds=cr.getBounds();  if (tileWidth > bounds.width)   tileWidth=bounds.width;  if (tileHeight > bounds.height)   tileHeight=bounds.height;  SampleModel sm=cm.createCompatibleSampleModel(tileWidth,tileHeight);  init(cr,bounds,cm,sm,cr.getTileGridXOffset(),cr.getTileGridYOffset(),null);}  }
class C{  final public SyntaxTreeNode SetExcept() throws ParseException {  SyntaxTreeNode tn;  Token t;  bpa("Set Except");  t=jj_consume_token(LWB);  addHeir(new SyntaxTreeNode(mn,t));  tn=Expression();  addHeir(tn);  t=jj_consume_token(EXCEPT);  addHeir(new SyntaxTreeNode(mn,t));  tn=SExceptSpec();  addHeir(tn);  label_42:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:      ;    break;default :  jj_la1[117]=jj_gen;break label_42;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));tn=SExceptSpec();addHeir(tn);}t=jj_consume_token(RWB);addHeir(new SyntaxTreeNode(mn,t));SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_SetExcept,sn);}throw new Error("Missing return statement in function");}  }
class C{  public boolean isIncludePayments(){  Object oo=get_Value(COLUMNNAME_IsIncludePayments);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CButton(String text,Icon icon){  super(text,icon);}  }
class C{  public static void verify(InputStream hashChainResultXml,HashChainReferenceResolver referenceResolver,Map<String,DigestValue> inputs) throws Exception {  new HashChainVerifier(hashChainResultXml,referenceResolver,inputs).verify();}  }
class C{  public void skipToNextByte(){  remainingBits=0;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 262) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override synchronized void pickNewConnection() throws SQLException {  if (this.isClosed && this.closedExplicitly) {    return;  }  if (this.currentConnection == null) {    this.currentConnection=this.balancer.pickConnection(this,Collections.unmodifiableList(this.hostList),Collections.unmodifiableMap(this.liveConnections),this.responseTimes.clone(),this.retriesAllDown);    return;  }  if (this.currentConnection.isClosed()) {    invalidateCurrentConnection();  }  int pingTimeout=this.currentConnection.getLoadBalancePingTimeout();  boolean pingBeforeReturn=this.currentConnection.getLoadBalanceValidateConnectionOnSwapServer();  for (int hostsTried=0, hostsToTry=this.hostList.size(); hostsTried < hostsToTry; hostsTried++) {    ConnectionImpl newConn=null;    try {      newConn=this.balancer.pickConnection(this,Collections.unmodifiableList(this.hostList),Collections.unmodifiableMap(this.liveConnections),this.responseTimes.clone(),this.retriesAllDown);      if (this.currentConnection != null) {        if (pingBeforeReturn) {          if (pingTimeout == 0) {            newConn.ping();          } else {            newConn.pingInternal(true,pingTimeout);          }        }        syncSessionState(this.currentConnection,newConn);      }      this.currentConnection=newConn;      return;    } catch (    SQLException e) {      if (shouldExceptionTriggerConnectionSwitch(e) && newConn != null) {        invalidateConnection(newConn);      }    }  }  this.isClosed=true;  this.closedReason="Connection closed after inability to pick valid new connection during load-balance.";}  }
class C{  @Override public boolean isSelectedIndex(int index){  for (int i=0; i < _positions.length; i++) {    if (_positions[i] == index) {      if (log.isDebugEnabled()) {        log.debug("isSelectedIndex(" + index + ") returned true");      }      return true;    }  }  if (log.isDebugEnabled()) {    log.debug("isSelectedIndex(" + index + ") returned false");  }  return false;}  }
class C{  public RepairFrontier(final String name,final GameData data){  super(name,data);}  }
class C{  public static void picture(double x,double y,String filename,double degrees){  Image image=getImage(filename);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth(null);  int hs=image.getHeight(null);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + filename + " is corrupt");  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  public static boolean slotOcclusionTest(PartSlot slot,Predicate<IMultipart> ignored,IMultipart... parts){  for (  IMultipart part : parts)   if ((ignored == null || !ignored.apply(part)) && ((part instanceof ISlottedPart && ((ISlottedPart)part).getSlotMask().contains(slot)) || part instanceof ISlotOccludingPart && ((ISlotOccludingPart)part).getOccludedSlots().contains(slot)))   return false;  return true;}  }
class C{  public HuberLoss(){  this(1);}  }
class C{  private void findPaddingMasks(){  for (int firstIVMask=0; firstIVMask < 2; firstIVMask++) {    byte[] tempIV=iv.clone();    tempIV[0]=(byte)(iv[0] ^ firstIVMask);    for (int b=0; b < 256; b++) {      tempIV[blockSize - 1]=(byte)(b ^ lastIvByteOriginal);      CBCOracleRequest req=new CBCOracleRequest(tempIV,c1);      OracleResponse resp=m_Oracle.queryOracle(req);      if (resp.getResult() == OracleResponse.Result.VALID) {        int pm=(b & 0xf0) >> 4;        paddingByteMasksFirst4Bits.add(pm);        firstIvValidByte=tempIV[0];        if (properties.getType() == FindIVMethodProperties.Type.DEFAULT) {          paddingByteMasksFirst4Bits.add(pm ^ 1);          LOG.info("padding bytes masks found (default oracle): " + paddingByteMasksFirst4Bits.toString());          return;        } else         if (properties.getType() == FindIVMethodProperties.Type.IBM_DATAPOWER) {          LOG.info("padding bytes masks found (datapower oracle): " + paddingByteMasksFirst4Bits.toString());          return;        }      }    }  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MovingAverageDataset)) {    return false;  }  MovingAverageDataset that=(MovingAverageDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public void readXML(WebRowSet caller,java.io.Reader reader) throws SQLException {  try {    InputSource is=new InputSource(reader);    DefaultHandler dh=new XmlErrorHandler();    XmlReaderContentHandler hndr=new XmlReaderContentHandler((RowSet)caller);    SAXParserFactory factory=SAXParserFactory.newInstance();    factory.setNamespaceAware(true);    factory.setValidating(true);    SAXParser parser=factory.newSAXParser();    parser.setProperty("http://java.sun.com/xml/jaxp/properties/schemaLanguage","http://www.w3.org/2001/XMLSchema");    XMLReader reader1=parser.getXMLReader();    reader1.setEntityResolver(new XmlResolver());    reader1.setContentHandler(hndr);    reader1.setErrorHandler(dh);    reader1.parse(is);  } catch (  SAXParseException err) {    System.out.println(MessageFormat.format(resBundle.handleGetObject("wrsxmlreader.parseerr").toString(),new Object[]{err.getMessage(),err.getLineNumber(),err.getSystemId()}));    err.printStackTrace();    throw new SQLException(err.getMessage());  }catch (  SAXException e) {    Exception x=e;    if (e.getException() != null)     x=e.getException();    x.printStackTrace();    throw new SQLException(x.getMessage());  }catch (  ArrayIndexOutOfBoundsException aie) {    throw new SQLException(resBundle.handleGetObject("wrsxmlreader.invalidcp").toString());  }catch (  Throwable e) {    throw new SQLException(MessageFormat.format(resBundle.handleGetObject("wrsxmlreader.readxml").toString(),e.getMessage()));  }}  }
class C{  public static void checkForHelp(String[] args){  for (int x=0; x < args.length; x++)   if (args[x].equals(A_HELP)) {    System.err.println(Version.message());    System.err.println("Format:\n\n" + "    java ec.Evolve -file FILE [-p PARAM=VALUE] [-p PARAM=VALUE] ...\n" + "    java ec.Evolve -from FILE [-p PARAM=VALUE] [-p PARAM=VALUE] ...\n"+ "    java ec.Evolve -from FILE -at CLASS [-p PARAM=VALUE] [-p PARAM=VALUE] ...\n"+ "    java ec.Evolve -checkpoint CHECKPOINT\n"+ "    java ec.Evolve -help\n\n"+ "-help                   Shows this message and exits.\n\n"+ "-file FILE              Launches ECJ using the provided parameter FILE.\n\n"+ "-from FILE              Launches ECJ using the provided parameter FILE\n"+ "                        which is defined relative to the directory\n"+ "                        holding the classfile ec/Evolve.class  If this\n"+ "                        class file is found inside a Jar file, then the\n"+ "                        FILE will also be assumed to be in that Jar file,\n"+ "                        at the proper relative location.\n\n"+ "-from FILE -at CLASS    Launches ECJ using the provided parameter FILE\n"+ "                        which is defined relative to the directory\n"+ "                        holding the classfile CLASS (for example,\n"+ "                        ec/ant/ant.class).  If this class file is found\n"+ "                        inside a Jar file, then the FILE will also be\n"+ "                        assumed to be in that Jar file, at the proper\n"+ "                        relative location.\n\n"+ "-p PARAM=VALUE          Overrides the parameter PARAM in the parameter\n"+ "                        file, setting it to the value VALUE instead.  You\n"+ "                        can override as many parameters as you like on\n"+ "                        the command line.\n\n"+ "-checkpoint CHECKPOINT  Launches ECJ from the provided CHECKPOINT file.\n");    System.exit(1);  }}  }
class C{  public TransitionSpecificationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public int hashCode(){  return address;}  }
class C{  <T>T reloadResource(T resource){  return ofy().load().entity(resource).now();}  }
class C{  public void insertBack(int x){  size+=1;  IntNode p=sentinel;  while (p.next != null) {    p=p.next;  }  p.next=new IntNode(x,null);}  }
class C{  @Override public SortedGraphNode buildRevTopSort(){  SortedGraphNode firstNode=super.buildRevTopSort();  if (firstNode != null) {    int sortMarker=firstNode.getSortMarker();    int sortNumber=firstNode.getBackwardSortNumber() - 1;    for (BasicBlock block=firstInCodeOrder(); block != null; block=block.nextBasicBlockInCodeOrder()) {      if (block.getSortMarker() != sortMarker) {        block.setSortMarker(sortMarker);        block.setBackwardSortNumber(sortNumber--);        block.setSortedNext(firstNode,false);        firstNode=block;      }    }  }  return firstNode;}  }
class C{  public void push(final Type value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {switch (value.getSort()) {case Type.BOOLEAN:      mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE",CLDESC);    break;case Type.CHAR:  mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Character","TYPE",CLDESC);break;case Type.BYTE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Byte","TYPE",CLDESC);break;case Type.SHORT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Short","TYPE",CLDESC);break;case Type.INT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Integer","TYPE",CLDESC);break;case Type.FLOAT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Float","TYPE",CLDESC);break;case Type.LONG:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Long","TYPE",CLDESC);break;case Type.DOUBLE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Double","TYPE",CLDESC);break;default :mv.visitLdcInsn(value);}}}  }
class C{  @Override public boolean supportsGroupBy(){  debugCodeCall("supportsGroupBy");  return true;}  }
class C{  public boolean isManagingComponent(Component c){  return scrConstrMap.containsKey(c);}  }
class C{  @Override public String toString(){  StringBuilder rval=new StringBuilder("");  for (  String token : refTokens) {    rval.append('/').append(escape(token));  }  return rval.toString();}  }
class C{  public static <T extends Object & Comparable<? super T>>T max(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (max.compareTo(next) < 0) {      max=next;    }  }  return max;}  }
class C{  public synchronized T read(String text) throws Exception {  Date date=DateType.getDate(text);  Long time=date.getTime();  return factory.getInstance(time);}  }
class C{  @NoInline public static Object invokeWithDotDotVarArg(int methodID,TypeReference expectReturnType) throws Exception {  MethodReference mr=MemberReference.getMethodRef(methodID);  if (VM.BuildForPower64ELF_ABI) {    Address varargAddress=pushVarArgToSpillArea(methodID,false);    Object[] argObjectArray=packageParameterFromVarArg(mr,varargAddress);    return callMethod(null,mr,argObjectArray,expectReturnType,true);  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForSVR4ABI);    Address glueFP=Magic.getCallerFramePointer(Magic.getCallerFramePointer(Magic.getCallerFramePointer(Magic.getFramePointer())));    Object[] argObjectArray=packageParameterFromDotArgSVR4(mr,glueFP,false);    return callMethod(null,mr,argObjectArray,expectReturnType,true);  }}  }
class C{  private static void copyToDomainAttributes(ConfigurationSetting domObj,VOConfigurationSetting voObj){  domObj.setInformationId(voObj.getInformationId());  domObj.setContextId(voObj.getContextId());  domObj.setValue(voObj.getValue());}  }
class C{  public void assertPathDoesNotExist(String message,Path path) throws IOException {  SwiftTestUtils.assertPathDoesNotExist(sFileSystem,message,path);}  }
class C{  public boolean isTransient(){  return Modifier.isTransient(getAccessFlags());}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>void transformStringMap(Map<String,String> original,Map<K,V> map,Class<K> keyClass,Class<V> valueClass) throws PreferenceException {  Method parseKeyMethod=findParseMethod(keyClass);  Method parseValueMethod=findParseMethod(valueClass);  if ((null != parseKeyMethod) && (null != parseValueMethod)) {    for (    Map.Entry<String,String> toTransformEntry : original.entrySet()) {      try {        Object transformedKey=parseKeyMethod.invoke(null,toTransformEntry.getKey());        Object transformedValue=parseValueMethod.invoke(null,toTransformEntry.getValue());        if (keyClass.isAssignableFrom(transformedKey.getClass()) && valueClass.isAssignableFrom(transformedValue.getClass())) {          map.put((K)transformedKey,(V)transformedValue);        }      } catch (      Exception e) {        throw new PreferenceException("Error transforming Map<java.lang.String, java.lang.String> to Map<" + keyClass.getName() + ", "+ valueClass.getName()+ ">.",e);      }    }  } else   if (null == parseKeyMethod) {    throw new PreferenceException("Error transforming Map<java.lang.String, java.lang.String> to Map<" + keyClass.getName() + ", "+ valueClass.getName()+ ">."+ "Parsing method can not be found in class "+ keyClass.getName()+ ".");  } else {    throw new PreferenceException("Error transforming Map<java.lang.String, java.lang.String> to Map<" + keyClass.getName() + ", "+ valueClass.getName()+ ">."+ "Parsing method can not be found in class "+ valueClass.getName()+ ".");  }}  }
class C{  public void run(){  while (true) {    try {      handleIncomingData();    } catch (    java.io.IOException e) {      log.warn("run: Exception: " + e.toString());    }  }}  }
class C{  private String cleanUpText(String value){  return value.replace("\r","").trim();}  }
class C{  private static boolean isStackCleared(final Instruction instruction){  return instruction.getType() == Instruction.InstructionType.RETURN || instruction.getType() == Instruction.InstructionType.THROW;}  }
class C{  @AfterMethod void afterMethod() throws Throwable {  serverCtx.close();}  }
class C{  private void initUi(final View view){  tvCellDescription=(TextView)view.findViewById(R.id.stats_cell_description);  tvCellStrength=(TextView)view.findViewById(R.id.stats_cell_strength);  tvWifiDescription=(TextView)view.findViewById(R.id.stats_wifi_description);  tvWifiStrength=(TextView)view.findViewById(R.id.stats_wifi_strength);  tvIgnored=(TextView)view.findViewById(R.id.stats_blacklisted);  tvFree=(TextView)view.findViewById(R.id.stats_free);  ivFree=(ImageView)view.findViewById(R.id.stats_icon_free);  ivAlert=(ImageView)view.findViewById(R.id.stats_icon_alert);  tvTechnology=(TextView)view.findViewById(R.id.tvTechnology);  gvGraph=(GraphView)view.findViewById(R.id.graph);  gvGraph.getViewport().setXAxisBoundsManual(true);  gvGraph.getViewport().setYAxisBoundsManual(true);  gvGraph.getViewport().setMinY(-100);  gvGraph.getViewport().setMaxY(-50);  gvGraph.setTitle(this.getString(R.string.graph_title));  gvGraph.getGridLabelRenderer().setVerticalAxisTitle(this.getString(R.string.dbm));  gvGraph.getGridLabelRenderer().setHorizontalLabelsVisible(false);  gvGraph.getGridLabelRenderer().setHighlightZeroLines(false);  gvGraph.getGridLabelRenderer().setGridStyle(GridLabelRenderer.GridStyle.HORIZONTAL);  gvGraph.getGridLabelRenderer().setNumVerticalLabels(3);  gvGraph.getViewport().setMinX(0);  gvGraph.getViewport().setMaxX(60);}  }
class C{  public short readShort(){  return (short)((data[position++] & 0xFF) << 8 | (data[position++] & 0xFF));}  }
class C{  static protected void runProctor(){  final long maxMemory=Runtime.getRuntime().maxMemory();  final OutOfMemoryError oome=new OutOfMemoryError(LocalizedStrings.SystemFailure_0_MEMORY_HAS_REMAINED_CHRONICALLY_BELOW_1_BYTES_OUT_OF_A_MAXIMUM_OF_2_FOR_3_SEC.toLocalizedString(new Object[]{PROCTOR_NAME,Long.valueOf(minimumMemoryThreshold),Long.valueOf(maxMemory),Integer.valueOf(WATCHDOG_WAIT)}));  logFine(PROCTOR_NAME,"Starting, threshold = " + minimumMemoryThreshold + "; max = "+ maxMemory);  for (; ; ) {    if (isCacheClosing) {      break;    }    if (stopping) {      return;    }    try {      try {        Thread.sleep(MEMORY_POLL_INTERVAL * 1000);      } catch (      InterruptedException e) {      }      if (stopping) {        return;      }      if (failureActionCompleted) {        return;      }      if (failure != null) {        notifyWatchDog();        logFine(PROCTOR_NAME,"Failure has been reported, exiting");        return;      }      if (!MONITOR_MEMORY) {        continue;      }      long totalMemory=Runtime.getRuntime().totalMemory();      if (totalMemory < maxMemory) {        if (DEBUG) {          logFine(PROCTOR_NAME,"totalMemory (" + totalMemory + ") < maxMemory ("+ maxMemory+ ")");        }        firstStarveTime=NEVER_STARVED;        continue;      }      if (lastTotalMemory < totalMemory) {        lastTotalMemory=totalMemory;        firstStarveTime=NEVER_STARVED;        continue;      }      lastTotalMemory=totalMemory;      long freeMemory=Runtime.getRuntime().freeMemory();      if (freeMemory == 0) {        new Object();        freeMemory=Runtime.getRuntime().freeMemory();      }      long curThreshold;      long lastStarveTime;synchronized (memorySync) {        curThreshold=minimumMemoryThreshold;        lastStarveTime=firstStarveTime;      }      if (freeMemory >= curThreshold || curThreshold == 0) {        if (DEBUG) {          logFine(PROCTOR_NAME,"Current free memory is: " + freeMemory);        }        if (lastStarveTime != NEVER_STARVED) {          logFine(PROCTOR_NAME,"...low memory has self-corrected.");        }synchronized (memorySync) {          firstStarveTime=NEVER_STARVED;        }        continue;      }      long now=System.currentTimeMillis();      if (lastStarveTime == NEVER_STARVED) {        if (DEBUG) {          logFine(PROCTOR_NAME,"Noting current memory " + freeMemory + " is less than threshold "+ curThreshold);        } else {          logWarning(PROCTOR_NAME,"Noting that current memory available is less than the currently designated threshold",null);        }synchronized (memorySync) {          firstStarveTime=now;        }        System.gc();        continue;      }      if (now - lastStarveTime < MEMORY_MAX_WAIT * 1000) {        if (DEBUG) {          logFine(PROCTOR_NAME,"...memory is still below threshold: " + freeMemory);        } else {          logWarning(PROCTOR_NAME,"Noting that current memory available is still below currently designated threshold",null);        }        continue;      }      logWarning(PROCTOR_NAME,"Memory is chronically low; setting failure!",null);      SystemFailure.setFailure(oome);      notifyWatchDog();      return;    } catch (    Throwable t) {      logWarning(PROCTOR_NAME,"thread encountered a problem",t);    }  }}  }
class C{  public boolean isRelative(){  if (relative == null) {    return false;  } else {    return relative;  }}  }
class C{  public static synchronized void loadExternalModules(File file){  if (file.isFile() && file.getName().endsWith(".jar")) {    try {      URLClassLoader loader=(URLClassLoader)ClassLoader.getSystemClassLoader();      URL url=file.toURI().toURL();      for (      URL it : Arrays.asList(loader.getURLs())) {        if (it.equals(url)) {          return;        }      }      Method method=URLClassLoader.class.getDeclaredMethod("addURL",new Class[]{URL.class});      method.setAccessible(true);      method.invoke(loader,new Object[]{url});      List<String> classes=new ArrayList<>();      try (JarFile jar=new JarFile(file)){        jar.stream().forEach(null);      }       for (      String clazz : classes) {        Class classInstance=Class.forName(clazz);        if (IModule.class.isAssignableFrom(classInstance)) {          addModuleClass(classInstance);        }      }    } catch (    NoSuchMethodException|IllegalAccessException|InvocationTargetException|IOException|ClassNotFoundException e) {      Discord4J.LOGGER.error(LogMarkers.MODULES,"Unable to load module " + file.getName() + "!",e);    }  }}  }
class C{  public AbstractNewResourceAction(String title,String description,@Nullable SVGResource svgIcon){  super(title,description,svgIcon);  fileNameValidator=new FileNameValidator();  folderNameValidator=new FolderNameValidator();  this.title=title;}  }
class C{  public boolean isClosed(){  return false;}  }
class C{  public void updateSelectedBackgroundVisibility(boolean isVisible){  bottomNavigation.setSelectedBackgroundVisible(isVisible);}  }
class C{  public ReverseDFSenumerateByFinish(Graph net,Enumeration<GraphNode> nodes){  super(net,nodes);}  }
class C{  void print(){  print("");}  }
class C{  public static List<org.oscm.vo.VORoleDefinition> convertToApiVORoleDefinition(List<org.oscm.internal.vo.VORoleDefinition> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VORoleDefinition> newVO=new ArrayList<org.oscm.vo.VORoleDefinition>();  for (  org.oscm.internal.vo.VORoleDefinition tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  @Override public Object clone(){  return new AttributeWeights(this);}  }
class C{  public Observable<Config> observeConfig(){  return configSubject;}  }
class C{  public String format(int number,int decimalPlaces){  StringBuilder sb=new StringBuilder();  int paddingRequired=decimalPlaces - (String.valueOf(number).length());  for (int x=0; x < paddingRequired; x++) {    sb.append("0");  }  sb.append(number);  return sb.toString();}  }
class C{  default Filterable<T> removeAll(final Stream<? extends T> stream){  final Set<T> set=stream.collect(Collectors.toSet());  return filterNot(null);}  }
class C{  boolean isLastRule(){  return isLastRule;}  }
class C{  private static <A,B>Entry<A,B> createEntry(A text,B field){  return new SimpleImmutableEntry<>(text,field);}  }
class C{  public void inflateViewStub(View view){  if (!mBinding.viewStub.isInflated()) {    mBinding.viewStub.getViewStub().inflate();  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;case main_region_C:return stateVector[0] == State.main_region_C;default :return false;}}  }
class C{  public static String removeNumeric(String str){  return removeRegex(str,"[\\d]");}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.142 -0500",hash_original_method="E16A5CBE2AF5641D1FC19A09E4EADBC9",hash_generated_method="E16A5CBE2AF5641D1FC19A09E4EADBC9") boolean isUsimDataDownload(){  return messageClass == MessageClass.CLASS_2 && (protocolIdentifier == 0x7f || protocolIdentifier == 0x7c);}  }
class C{  public void checkCloseOnCompletion(ResultSet resultSet) throws SQLException {  if (mustCloseOnCompletion && !closed && executionResult != null) {    if (resultSet.equals(executionResult.getResultSet())) {      close();    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void init(){}  }
class C{  private void performStartEndZoom(){  final double t1=getPositionValue(isHorizontal() ? start.x : start.y,false);  final double t2=getPositionValue(isHorizontal() ? end.x : end.y,false);  setRange(t1,t2,true);}  }
class C{  private char[] convertToCharArray(CharSequence charSequence){  if (charSequence == null) {    return null;  }  char[] charArray=new char[charSequence.length()];  for (int i=0; i < charSequence.length(); i++) {    charArray[i]=charSequence.charAt(i);  }  return charArray;}  }
class C{  public <T>T waitForState(Class<T> type,Predicate<T> predicate) throws Throwable {  return waitForState(this.serviceUri,type,predicate);}  }
class C{  MarshalledObjectOutputStream(OutputStream objOut,OutputStream locOut) throws IOException {  super(objOut);  this.useProtocolVersion(ObjectStreamConstants.PROTOCOL_VERSION_2);  this.locOut=new ObjectOutputStream(locOut);  hadAnnotations=false;}  }
class C{  AppMenu(Menu menu,int itemRowHeight,int itemDividerHeight,AppMenuHandler handler,Resources res){  mMenu=menu;  mItemRowHeight=itemRowHeight;  assert mItemRowHeight > 0;  mHandler=handler;  mItemDividerHeight=itemDividerHeight;  assert mItemDividerHeight >= 0;  mNegativeSoftwareVerticalOffset=res.getDimensionPixelSize(R.dimen.menu_negative_software_vertical_offset);  mVerticalFadeDistance=res.getDimensionPixelSize(R.dimen.menu_vertical_fade_distance);}  }
class C{  public static Operand create(final Module module,final OperandExpression root){  Preconditions.checkNotNull(module,"Error: Module argument can not be null");  Preconditions.checkNotNull(root,"Error: Root argument can not be null");  final COperandTree opTree=module.getNative().createOperand((COperandTreeNode)root.getNative());  return new Operand(opTree);}  }
class C{  public static void main(String[] args){  Ragdoll simulation=new Ragdoll();  simulation.run();}  }
class C{  public int restorePackage(String packageName,RestoreObserver observer){  int err=-1;  if (mObserver != null) {    Log.d(TAG,"restorePackage() called during active restore");    return -1;  }  mObserver=new RestoreObserverWrapper(mContext,observer);  try {    err=mBinder.restorePackage(packageName,mObserver);  } catch (  RemoteException e) {    Log.d(TAG,"Can't contact server to restore package");  }  return err;}  }
class C{  public static synchronized SSLClientSessionCache usingDirectory(File directory) throws IOException {  FileClientSessionCache.Impl cache=caches.get(directory);  if (cache == null) {    cache=new FileClientSessionCache.Impl(directory);    caches.put(directory,cache);  }  return cache;}  }
class C{  @After public void tearDown() throws Exception {  setLogLevel(Level.INFO);  if (!exec.isShutdown()) {    exec.shutdownNow();  }}  }
class C{  public EglCore(EGLContext sharedContext,int flags){  if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {    throw new RuntimeException("EGL already set up");  }  if (sharedContext == null) {    sharedContext=EGL14.EGL_NO_CONTEXT;  }  mEGLDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    throw new RuntimeException("unable to get EGL14 display");  }  int[] version=new int[2];  if (!EGL14.eglInitialize(mEGLDisplay,version,0,version,1)) {    mEGLDisplay=null;    throw new RuntimeException("unable to initialize EGL14");  }  if ((flags & FLAG_TRY_GLES3) != 0) {    EGLConfig config=getConfig(flags,3);    if (config != null) {      int[] attrib3_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,3,EGL14.EGL_NONE};      EGLContext context=EGL14.eglCreateContext(mEGLDisplay,config,sharedContext,attrib3_list,0);      if (EGL14.eglGetError() == EGL14.EGL_SUCCESS) {        mEGLConfig=config;        mEGLContext=context;        mGlVersion=3;      }    }  }  if (mEGLContext == EGL14.EGL_NO_CONTEXT) {    EGLConfig config=getConfig(flags,2);    if (config == null) {      throw new RuntimeException("Unable to find a suitable EGLConfig");    }    int[] attrib2_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};    EGLContext context=EGL14.eglCreateContext(mEGLDisplay,config,sharedContext,attrib2_list,0);    checkEglError("eglCreateContext");    mEGLConfig=config;    mEGLContext=context;    mGlVersion=2;  }  int[] values=new int[1];  EGL14.eglQueryContext(mEGLDisplay,mEGLContext,EGL14.EGL_CONTEXT_CLIENT_VERSION,values,0);  Log.d(TAG,"EGLContext created, client version " + values[0]);}  }
class C{  private static void restoreDatabase(Properties properties) throws IOException, TarMalformatException {  String backup=properties.getProperty("dhus.db.backup");  String location=properties.getProperty("dhus.db.location");  if (backup == null || location == null) {    throw new UnsupportedOperationException();  }  FileUtils.deleteDirectory(new File(location));  String[] args={"--extract",backup,location};  DbBackupMain.main(args);  logger.info("Database restored.");}  }
class C{  public void print(DocTree tree) throws IOException {  try {    if (tree == null)     print("/*missing*/"); else {      tree.accept(this,null);    }  } catch (  UncheckedIOException ex) {    throw new IOException(ex.getMessage(),ex);  }}  }
class C{  public void testTwoNodeSubmitQueryWithSequentialConsistency() throws Throwable {  testSubmitQuery(2,Query.ConsistencyLevel.SEQUENTIAL);}  }
class C{  private JPEGHelper(){}  }
class C{  public Builder resolveLinkTos(boolean resolveLinkTos){  this.resolveLinkTos=resolveLinkTos;  return this;}  }
class C{  public KeyStoreException(){  super();}  }
class C{  protected void addSimpleNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExecutionNode_simpleName_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExecutionNode_simpleName_feature","_UI_ExecutionNode_type"),SexecPackage.Literals.EXECUTION_NODE__SIMPLE_NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private static void restoreSolr4Index(Properties properties) throws IOException, SolrServerException {  String solr_home=properties.getProperty("dhus.solr.home");  String core_name=properties.getProperty("dhus.solr.core.name");  final String name=properties.getProperty("dhus.solr.backup.name");  final String location=properties.getProperty("dhus.solr.backup.location");  if (solr_home == null || core_name == null || name == null || location == null)   throw new UnsupportedOperationException();  System.setProperty("solr.solr.home",solr_home);  File index_path=new File(location,"snapshot." + name);  File target_path=Paths.get(solr_home,core_name,"data",name).toFile();  if (!index_path.exists())   throw new UnsupportedOperationException("solr source to restore not found (" + index_path + ").");  if (!target_path.exists())   throw new UnsupportedOperationException("solr restore path not found (" + target_path + ").");  FileUtils.cleanDirectory(target_path);  FileUtils.copyDirectory(index_path,target_path);  logger.info("SolR indexes restored.");}  }
class C{  private static void computeRegions(Rectangle sourceBounds,Dimension destSize,ImageWriteParam p){  ImageWriteParam param;  int periodX=1;  int periodY=1;  if (p != null) {    int[] sourceBands=p.getSourceBands();    if (sourceBands != null && (sourceBands.length != 1 || sourceBands[0] != 0)) {      throw new IllegalArgumentException("Cannot sub-band image!");    }    Rectangle sourceRegion=p.getSourceRegion();    if (sourceRegion != null) {      sourceRegion=sourceRegion.intersection(sourceBounds);      sourceBounds.setBounds(sourceRegion);    }    int gridX=p.getSubsamplingXOffset();    int gridY=p.getSubsamplingYOffset();    sourceBounds.x+=gridX;    sourceBounds.y+=gridY;    sourceBounds.width-=gridX;    sourceBounds.height-=gridY;    periodX=p.getSourceXSubsampling();    periodY=p.getSourceYSubsampling();  }  destSize.setSize((sourceBounds.width + periodX - 1) / periodX,(sourceBounds.height + periodY - 1) / periodY);  if (destSize.width <= 0 || destSize.height <= 0) {    throw new IllegalArgumentException("Empty source region!");  }}  }
class C{  public void cancel(){  mCancel=true;}  }
class C{  public String sampleSizeTipText(){  return "Size of the subsample (reservoir). i.e. the number of instances.";}  }
class C{  protected Vector<ExtensionFileFilter> filterNonCoreLoaderFileFilters(Vector<ExtensionFileFilter> list){  Vector<ExtensionFileFilter> result;  int i;  ExtensionFileFilter filter;  AbstractLoader loader;  if (!getCoreConvertersOnly()) {    result=list;  } else {    result=new Vector<ExtensionFileFilter>();    for (i=0; i < list.size(); i++) {      filter=list.get(i);      loader=ConverterUtils.getLoaderForExtension(filter.getExtensions()[0]);      if (ConverterUtils.isCoreFileLoader(loader.getClass().getName())) {        result.add(filter);      }    }  }  return result;}  }
class C{  public static int[] shuffle(int[] input){  List<Integer> vals=new ArrayList<Integer>(input.length);  for (int i=0; i < input.length; i++)   vals.add(input[i]);  Collections.shuffle(vals,SEEDED_RANDOM);  int[] copy=new int[input.length];  for (int i=0; i < input.length; i++)   copy[i]=vals.get(i);  return copy;}  }
class C{  protected void loadListFile(Client c){  loadListFile(c.getLocalPlayer());}  }
class C{  public static int countParameters(RVMMethod method){  int GPRs=0;  int FPRs=0;  int parameters=0;  int gp=NUM_PARAMETER_GPRS;  int fp=NUM_PARAMETER_FPRS;  if (!method.isStatic()) {    if (gp > 0) {      GPRs++;      gp--;    }    parameters++;  }  for (  TypeReference t : method.getParameterTypes()) {    if (t.isLongType()) {      if (gp > 0) {        GPRs++;        gp--;        if (VM.BuildFor32Addr && gp > 0) {          GPRs++;          gp--;        }      }      parameters+=2;    } else     if (t.isFloatType()) {      if (fp > 0) {        FPRs++;        fp--;      }      parameters++;    } else     if (t.isDoubleType()) {      if (fp > 0) {        FPRs++;        fp--;      }      parameters+=2;    } else {      if (gp > 0) {        GPRs++;        gp--;      }      parameters++;    }  }  return (parameters << (REFLECTION_FPRS_BITS + REFLECTION_GPRS_BITS)) | (FPRs << REFLECTION_GPRS_BITS) | GPRs;}  }
class C{  public boolean match(WhileStatement node,Object other){  if (!(other instanceof WhileStatement)) {    return false;  }  WhileStatement o=(WhileStatement)other;  return (safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeMatch(node.getBody(),o.getBody()));}  }
class C{  java.sql.Date toSqlDate(Calendar calendar){  return new java.sql.Date(getTimeInMillis(calendar));}  }
class C{  public void addArc(String sParent,String sChild) throws Exception {  int nParent=getNode(sParent);  int nChild=getNode(sChild);  addArc(nParent,nChild);}  }
class C{  public static double[] mult(double[][] mat,double[] vec){  int m=mat.length;  int n=mat[0].length;  double[] vecres=new double[m];  for (int i=0; i < m; ++i) {    vecres[i]=0.0f;    for (int j=0; j < n; ++j) {      vecres[i]+=mat[i][j] * vec[j];    }  }  return (vecres);}  }
class C{  public JobPrioritySupported(int value){  super(value,1,100);}  }
class C{  public DynamoDBTableScan(double rateLimit,AmazonDynamoDBClient client){  rateLimiter=RateLimiter.create(rateLimit);  this.client=client;}  }
class C{  public <C extends Collection<T>,T>C retrieveCollection(String key,Class<C> classCollection,Class<T> classData){  key=safetyKey(key);  try {    File file=new File(cacheDirectory,key);    Type typeCollection=jolyglot.newParameterizedType(classCollection,classData);    T data=jolyglot.fromJson(file,typeCollection);    return (C)data;  } catch (  Exception e) {    return null;  }}  }
class C{  public StatementPattern(Scope scope,Var subjVar,Var predVar,Var objVar,Var conVar){  setScope(scope);  setSubjectVar(subjVar);  setPredicateVar(predVar);  setObjectVar(objVar);  setContextVar(conVar);}  }
class C{  private boolean isMutualAttack(){  for (  AttackSprite sprite : this.boardView1.attackSprites) {    if ((sprite.getEntityId() == targetId) && (sprite.getTargetId() == entityId)) {      sprite.rebuildToHalvedPolygon();      return true;    }  }  return false;}  }
class C{  public String toString(){  return "PointD, x: " + x + ", y: "+ y;}  }
class C{  public Rectangle2D(double x,double y,double w,double h){  this.x=x;  this.y=y;  this.size=new Dimension2D(w,h);}  }
class C{  public String cTipText(){  return "The complexity parameter C.";}  }
class C{  public void addParameterValues(org.oscm.xsd.ServiceParameter param){  if (localParameterValues == null) {    localParameterValues=new org.oscm.xsd.ServiceParameter[]{};  }  localParameterValuesTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameterValues);  list.add(param);  this.localParameterValues=(org.oscm.xsd.ServiceParameter[])list.toArray(new org.oscm.xsd.ServiceParameter[list.size()]);}  }
class C{  private static boolean isGifHeader(final byte[] imageHeaderBytes,final int headerSize){  if (headerSize < GIF_HEADER_LENGTH) {    return false;  }  return matchBytePattern(imageHeaderBytes,0,GIF_HEADER_87A) || matchBytePattern(imageHeaderBytes,0,GIF_HEADER_89A);}  }
class C{  protected void scanData() throws Exception {  while ((!this.reader.atEOF()) && (this.builder.getResult() == null)) {    String str=XMLUtil.read(this.reader,'&');    char ch=str.charAt(0);    if (ch == '&') {      XMLUtil.processEntity(str,this.reader,this.entityResolver);      continue;    }switch (ch) {case '<':      this.scanSomeTag(false,null,new Properties());    break;case ' ':case '\t':case '\r':case '\n':  break;default :XMLUtil.errorInvalidInput(reader.getSystemID(),reader.getLineNr(),"`" + ch + "' (0x"+ Integer.toHexString((int)ch)+ ')');}}}  }
class C{  protected FactoryDto updateProjectInFactory(final FactoryDto factory,final String repositoryUrl,final String headBranch,final String headCommitId) throws ServerException {  return updateProjectInFactory(factory,repositoryUrl,headBranch,repositoryUrl,headCommitId);}  }
class C{  private String createFileName(){  String fileName=url.getPath();  if (fileName.startsWith("/%2F/")) {    fileName=fileName.substring(4);  } else   if (fileName.startsWith("/")) {    fileName=fileName.substring(1);  }  return fileName;}  }
class C{  default void afterStop(){}  }
class C{  public ObdCodeList(String resourceBundleName){  super(resourceBundleName);}  }
class C{  public static void realWrite(final OutputStream out,final double[] x,final int dp) throws IOException {  out.write((byte)'[');  for (int i=0; i < x.length; i++) {    if (i > 0) {      out.write(COMMA_BYTES);    }    realWrite(out,x[i],dp);  }  out.write((byte)']');}  }
class C{  public static void dump_grammar() throws internal_error {  int cnt;  Enumeration t, n, p;  production prod;  System.err.println("===== Terminals =====");  for (t=terminal.all(), cnt=0; t.hasMoreElements(); cnt++) {    System.err.print(((terminal)t.nextElement()).name() + " ");    if ((cnt + 1) % 5 == 0)     System.err.println();  }  System.err.println();  System.err.println();  System.err.println("===== Non terminals =====");  for (n=non_terminal.all(), cnt=0; n.hasMoreElements(); cnt++) {    System.err.print(((non_terminal)n.nextElement()).name() + " ");    if ((cnt + 1) % 5 == 0)     System.err.println();  }  System.err.println();  System.err.println();  System.err.println("===== Productions =====");  for (p=production.all(); p.hasMoreElements(); ) {    prod=(production)p.nextElement();    System.err.print(prod.lhs().the_symbol().name() + " ::= ");    for (int i=0; i < prod.rhs_length(); i++)     if (prod.rhs(i).is_action())     System.err.print("{action} "); else     System.err.print(((symbol_part)prod.rhs(i)).the_symbol().name() + " ");    System.err.println();  }  System.err.println();}  }
class C{  public boolean hasProject(){  return hasExtension(Project.class);}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  private boolean isItemUri(int code){switch (code) {case SYSTEM:case SECURE:case GLOBAL:    return false;case SYSTEM_ITEM_NAME:case SECURE_ITEM_NAME:case GLOBAL_ITEM_NAME:  return true;default :throw new IllegalArgumentException("Invalid uri match code: " + code);}}  }
class C{  @Override public void onCloseDocument(final PdfWriter writer,final Document document){  template.beginText();  template.setFontAndSize(bf,8);  template.showText(String.valueOf(writer.getPageNumber() - 1));  template.endText();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.304 -0500",hash_original_method="1C3B61A184019B571D3EC162646AADA1",hash_generated_method="08D480873CB522669215721714160554") @Deprecated public static boolean isSpace(char c){  return ((c) == 1);}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.menu_main,menu);  return true;}  }
class C{  public RowHandleSet(final int keylength,final ByteOrder objectOrder,final File file) throws IOException, SpaceExceededException {  this(keylength,objectOrder,(int)(file.length() / (keylength + 8)));  final InputStream is=new BufferedInputStream(new FileInputStream(file),1024 * 1024);  final byte[] a=new byte[keylength];  int c;  while (true) {    c=is.read(a);    if (c <= 0)     break;    this.index.addUnique(this.rowdef.newEntry(a));  }  is.close();  assert this.index.size() == file.length() / keylength;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(next);  if (!types.empty()) {    sb.append(' ');    sb.append(types.toString());  }  return sb.toString();}  }
class C{  public void showError(String string){  error="" + string;  Log.e(TAG,error);  showDialog(ERROR_DIALOG_ID);}  }
class C{  public int transform(CtClass clazz,int pos,CodeIterator iterator,ConstPool cp) throws CannotCompileException {  int index;  int c=iterator.byteAt(pos);  if (c == NEW) {    index=iterator.u16bitAt(pos + 1);    if (cp.getClassInfo(index).equals(classname)) {      if (iterator.byteAt(pos + 3) != DUP)       throw new CannotCompileException("NEW followed by no DUP was found");      iterator.writeByte(NOP,pos);      iterator.writeByte(NOP,pos + 1);      iterator.writeByte(NOP,pos + 2);      iterator.writeByte(NOP,pos + 3);      ++nested;      StackMapTable smt=(StackMapTable)iterator.get().getAttribute(StackMapTable.tag);      if (smt != null)       smt.removeNew(pos);      StackMap sm=(StackMap)iterator.get().getAttribute(StackMap.tag);      if (sm != null)       sm.removeNew(pos);    }  } else   if (c == INVOKESPECIAL) {    index=iterator.u16bitAt(pos + 1);    int typedesc=cp.isConstructor(classname,index);    if (typedesc != 0 && nested > 0) {      int methodref=computeMethodref(typedesc,cp);      iterator.writeByte(INVOKESTATIC,pos);      iterator.write16bit(methodref,pos + 1);      --nested;    }  }  return pos;}  }
class C{  public void sendPacket(byte[] packet,int repeats){  if (repeats > 9) {    repeats=9;  }  if (repeats < 0) {    log.error("repeat count out of range: " + repeats);    repeats=1;  }  EasyDccMessage m=new EasyDccMessage(4 + 3 * packet.length);  int i=0;  m.setElement(i++,'S');  m.setElement(i++,' ');  m.setElement(i++,'0');  m.setElement(i++,'0' + repeats);  for (int j=0; j < packet.length; j++) {    m.setElement(i++,' ');    String s=Integer.toHexString(packet[j] & 0xFF).toUpperCase();    if (s.length() == 1) {      m.setElement(i++,'0');      m.setElement(i++,s.charAt(0));    } else {      m.setElement(i++,s.charAt(0));      m.setElement(i++,s.charAt(1));    }  }  EasyDccTrafficController.instance().sendEasyDccMessage(m,null);}  }
class C{  public int capacity(){  return queue.capacity();}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,String pathDocumentFile,String pathDocAnnFile) throws Exception {  int sortOrder=m_documents.getNextSortOrder();  addDocument(name,parentDivId,fileExt,sortOrder,pathDocumentFile,pathDocAnnFile);}  }
class C{  @SuppressWarnings("unchecked") private static TreeUserObject createTreeUserObject(final String title,final Object data){  if (data instanceof StructView)   return new TreeUserObject(title,((StructView)data).getStruct());  if (data instanceof Pair)   return new TreeUserObject(title + " = " + ((Pair<String,Object>)data).value1,((Pair<String,Object>)data).value2);  return new TreeUserObject(data == null || data instanceof Map || data instanceof Object[] ? title : title + " = " + data,data);}  }
class C{  private void onBluetoothBroadcastRemoteUUID(Context context,Intent intent){  BluetoothDevice device=(BluetoothDevice)intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);  Parcelable[] uuids=intent.getParcelableArrayExtra(BluetoothDevice.EXTRA_UUID);  for (  Parcelable uuid : uuids) {  }}  }
class C{  void registerEventBuses(){  if (!eventsRegistered) {    Mvc.graph().inject(this);    eventBusV.register(androidComponent);    eventsRegistered=true;    logger.trace("+Event2V bus registered for view - '{}'.",androidComponent.getClass().getSimpleName());  } else {    logger.trace("!Event2V bus already registered for view - '{}' and its controllers.",androidComponent.getClass().getSimpleName());  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.MODIFIABLE_ELEMENT;}  }
class C{  public CalendarWeekDayFormatter(Calendar calendar){  calendar.get(Calendar.DAY_OF_WEEK);  this.calendar=calendar;}  }
class C{  public static BigdataSailRepository open(final Properties props){  if (props.getProperty(Journal.Options.FILE) == null) {    throw new IllegalArgumentException();  }  final BigdataSail sail=new BigdataSail(props);  final BigdataSailRepository repo=new BigdataSailRepository(sail);  Code.wrapThrow(null);  return repo;}  }
class C{  public int knotAt(int x){  for (int i=1; i < numKnots - 1; i++)   if (xKnots[i + 1] > x)   return i;  return 1;}  }
class C{  @Override public void flush() throws IOException {}  }
class C{  public static void writeSingleBest(Map<Integer,Sequence<IString>> translations,PrintStream singleBestWriter){  assert translations != null;  assert singleBestWriter != null;  String nl=System.getProperty("line.separator");  for (int i=0; i < translations.size(); ++i) {    assert translations.containsKey(i);    singleBestWriter.append(translations.get(i).toString() + nl);  }}  }
class C{  public NoSuchObjectException(final String msg){  super(msg);  LOGGER.error(msg);}  }
class C{  public void serialize(StringBuilder buf){  for (  CSSClass clss : store.values()) {    clss.appendCSSDefinition(buf);  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isExpanded(){  return expanded;}  }
class C{  public CommandLinkMultiFormITCase(String name){  super(name);  addExclusion(HtmlUnitFacesITCase.Container.TOMCAT6,"testMultiForm");  addExclusion(HtmlUnitFacesITCase.Container.TOMCAT7,"testMultiForm");  addExclusion(HtmlUnitFacesITCase.Container.WLS_10_3_4_NO_CLUSTER,"testMultiForm");}  }
class C{  private void parseCordovaConfigXml(){  if (chcpXmlConfig != null) {    return;  }  chcpXmlConfig=ChcpXmlConfig.loadFromCordovaConfig(cordova.getActivity());}  }
class C{  public static boolean isCoreFileLoader(String classname){  boolean result;  String[] classnames;  classnames=CORE_FILE_LOADERS.split(",");  result=(Arrays.binarySearch(classnames,classname) >= 0);  return result;}  }
class C{  public BrowserBookmarksAdapter(Context context){  super(context,null);  mInflater=LayoutInflater.from(context);  mContext=context;}  }
class C{  @Override public boolean acceptSource(final Object source){  if (source instanceof IList && ((IList)source).get(0) instanceof IList) {    return false;  }  return source instanceof IList && ((IList)source).getType().getContentType().isAssignableFrom(Types.GEOMETRY) || source instanceof GamaGeometryFile;}  }
class C{  public static boolean isDatabaseNameTooLongException(Exception e){  return e instanceof MySQLSyntaxErrorException && ((MySQLSyntaxErrorException)e).getErrorCode() == MYSQL_DB_NAME_TOO_LONG_ERROR_CODE;}  }
class C{  private Style createResolvedStyle(String selector){  SearchBuffer sb=SearchBuffer.obtainSearchBuffer();  Vector<String> elements=sb.getVector();  try {    boolean done;    int dotIndex=0;    int spaceIndex;    int poundIndex=0;    int lastIndex=0;    int length=selector.length();    while (lastIndex < length) {      if (dotIndex == lastIndex) {        dotIndex=selector.indexOf('.',lastIndex);      }      if (poundIndex == lastIndex) {        poundIndex=selector.indexOf('#',lastIndex);      }      spaceIndex=selector.indexOf(' ',lastIndex);      if (spaceIndex == -1) {        spaceIndex=length;      }      if (dotIndex != -1 && poundIndex != -1 && dotIndex < spaceIndex && poundIndex < spaceIndex) {        if (poundIndex < dotIndex) {          if (lastIndex == poundIndex) {            elements.addElement("");          } else {            elements.addElement(selector.substring(lastIndex,poundIndex));          }          if ((dotIndex + 1) < spaceIndex) {            elements.addElement(selector.substring(dotIndex + 1,spaceIndex));          } else {            elements.addElement(null);          }          if ((poundIndex + 1) == dotIndex) {            elements.addElement(null);          } else {            elements.addElement(selector.substring(poundIndex + 1,dotIndex));          }        } else         if (poundIndex < spaceIndex) {          if (lastIndex == dotIndex) {            elements.addElement("");          } else {            elements.addElement(selector.substring(lastIndex,dotIndex));          }          if ((dotIndex + 1) < poundIndex) {            elements.addElement(selector.substring(dotIndex + 1,poundIndex));          } else {            elements.addElement(null);          }          if ((poundIndex + 1) == spaceIndex) {            elements.addElement(null);          } else {            elements.addElement(selector.substring(poundIndex + 1,spaceIndex));          }        }        dotIndex=poundIndex=spaceIndex + 1;      } else       if (dotIndex != -1 && dotIndex < spaceIndex) {        if (dotIndex == lastIndex) {          elements.addElement("");        } else {          elements.addElement(selector.substring(lastIndex,dotIndex));        }        if ((dotIndex + 1) == spaceIndex) {          elements.addElement(null);        } else {          elements.addElement(selector.substring(dotIndex + 1,spaceIndex));        }        elements.addElement(null);        dotIndex=spaceIndex + 1;      } else       if (poundIndex != -1 && poundIndex < spaceIndex) {        if (poundIndex == lastIndex) {          elements.addElement("");        } else {          elements.addElement(selector.substring(lastIndex,poundIndex));        }        elements.addElement(null);        if ((poundIndex + 1) == spaceIndex) {          elements.addElement(null);        } else {          elements.addElement(selector.substring(poundIndex + 1,spaceIndex));        }        poundIndex=spaceIndex + 1;      } else {        elements.addElement(selector.substring(lastIndex,spaceIndex));        elements.addElement(null);        elements.addElement(null);      }      lastIndex=spaceIndex + 1;    }    int total=elements.size();    int numTags=total / 3;    String[] tags=new String[numTags];    String[] ids=new String[numTags];    String[] classes=new String[numTags];    for (int index=0, eIndex=total - 3; index < numTags; index++, eIndex-=3) {      tags[index]=elements.elementAt(eIndex);      classes[index]=elements.elementAt(eIndex + 1);      ids[index]=elements.elementAt(eIndex + 2);    }    return createResolvedStyle(selector,tags,ids,classes);  }  finally {    SearchBuffer.releaseSearchBuffer(sb);  }}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    VolleyLog.d(TAG,"Memory cache cleared");  }}  }
class C{  private void validateRequestAttributes(StunMessageEvent evt) throws IllegalArgumentException, StunException, IOException {  Message request=evt.getMessage();  UsernameAttribute unameAttr=(UsernameAttribute)request.getAttribute(Attribute.USERNAME);  String username=null;  if (unameAttr != null) {    username=LongTermCredential.toString(unameAttr.getUsername());    if (!validateUsername(username)) {      Response error=createCorrespondingErrorResponse(request.getMessageType(),ErrorCodeAttribute.UNAUTHORIZED,"unknown user " + username);      sendResponse(request.getTransactionID(),error,evt.getLocalAddress(),evt.getRemoteAddress());      throw new IllegalArgumentException("Non-recognized username: " + username);    }  }  MessageIntegrityAttribute msgIntAttr=(MessageIntegrityAttribute)request.getAttribute(Attribute.MESSAGE_INTEGRITY);  if (msgIntAttr != null) {    if (unameAttr == null) {      Response error=createCorrespondingErrorResponse(request.getMessageType(),ErrorCodeAttribute.BAD_REQUEST,"missing username");      sendResponse(request.getTransactionID(),error,evt.getLocalAddress(),evt.getRemoteAddress());      throw new IllegalArgumentException("Missing USERNAME in the presence of MESSAGE-INTEGRITY: ");    }    if (!validateMessageIntegrity(msgIntAttr,username,true,evt.getRawMessage())) {      Response error=createCorrespondingErrorResponse(request.getMessageType(),ErrorCodeAttribute.UNAUTHORIZED,"Wrong MESSAGE-INTEGRITY value");      sendResponse(request.getTransactionID(),error,evt.getLocalAddress(),evt.getRemoteAddress());      throw new IllegalArgumentException("Wrong MESSAGE-INTEGRITY value.");    }  } else   if (Boolean.getBoolean(StackProperties.REQUIRE_MESSAGE_INTEGRITY)) {    Response error=createCorrespondingErrorResponse(request.getMessageType(),ErrorCodeAttribute.UNAUTHORIZED,"Missing MESSAGE-INTEGRITY.");    sendResponse(request.getTransactionID(),error,evt.getLocalAddress(),evt.getRemoteAddress());    throw new IllegalArgumentException("Missing MESSAGE-INTEGRITY.");  }  List<Attribute> allAttributes=request.getAttributes();  StringBuffer sBuff=new StringBuffer();  for (  Attribute attr : allAttributes) {    if (attr instanceof OptionalAttribute && attr.getAttributeType() < Attribute.UNKNOWN_OPTIONAL_ATTRIBUTE)     sBuff.append(attr.getAttributeType());  }  if (sBuff.length() > 0) {    Response error=createCorrespondingErrorResponse(request.getMessageType(),ErrorCodeAttribute.UNKNOWN_ATTRIBUTE,"unknown attribute ",sBuff.toString().toCharArray());    sendResponse(request.getTransactionID(),error,evt.getLocalAddress(),evt.getRemoteAddress());    throw new IllegalArgumentException("Unknown attribute(s).");  }}  }
class C{  public XmlConfigUtils(String file){  this.file=file;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardDialRange)) {    return false;  }  StandardDialRange that=(StandardDialRange)obj;  if (this.scaleIndex != that.scaleIndex) {    return false;  }  if (this.lowerBound != that.lowerBound) {    return false;  }  if (this.upperBound != that.upperBound) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (this.innerRadius != that.innerRadius) {    return false;  }  if (this.outerRadius != that.outerRadius) {    return false;  }  return super.equals(obj);}  }
class C{  public CF8(int numberOfVariables){  super(numberOfVariables,3,1);}  }
class C{  protected Metric reduce(List<Metric> metrics){  SystemAssert.requireArgument(metrics != null,"Cannot transform empty metric/metrics");  MetricDistiller distiller=new MetricDistiller();  distiller.distill(metrics);  Map<Long,List<String>> collated=collate(metrics);  Map<Long,String> minDatapoints=reduce(collated,metrics);  String newMetricName=distiller.getMetric() == null ? defaultMetricName : distiller.getMetric();  Metric newMetric=new Metric(defaultScope,newMetricName);  newMetric.setDisplayName(distiller.getDisplayName());  newMetric.setUnits(distiller.getUnits());  newMetric.setTags(distiller.getTags());  newMetric.setDatapoints(minDatapoints);  return newMetric;}  }
class C{  public static CCSpeed action(CCIntervalAction action,float r){  return new CCSpeed(action,r);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 1 && args[0].equals("--version")) {    System.err.println(Main.class.getPackage().getImplementationVersion());    System.exit(0);  } else   if (args.length != 2) {    System.err.println("Usage: swiftproxy --properties FILE");    System.exit(1);  }  Properties properties=new Properties();  try (InputStream is=new FileInputStream(new File(args[1]))){    properties.load(is);  }   properties.putAll(System.getProperties());  String provider=properties.getProperty(Constants.PROPERTY_PROVIDER);  String identity=properties.getProperty(Constants.PROPERTY_IDENTITY);  String credential=properties.getProperty(Constants.PROPERTY_CREDENTIAL);  String endpoint=properties.getProperty(Constants.PROPERTY_ENDPOINT);  String proxyEndpoint=properties.getProperty(SwiftProxy.PROPERTY_ENDPOINT);  if (provider == null || identity == null || credential == null || proxyEndpoint == null) {    System.err.format("Properties file must contain:%n" + Constants.PROPERTY_PROVIDER + "%n"+ Constants.PROPERTY_IDENTITY+ "%n"+ Constants.PROPERTY_CREDENTIAL+ "%n"+ SwiftProxy.PROPERTY_ENDPOINT+ "%n");    System.exit(1);  }  if (provider.equals("google-cloud-storage")) {    File credentialFile=new File(credential);    if (credentialFile.exists()) {      credential=Files.toString(credentialFile,StandardCharsets.UTF_8);    }    properties.remove(Constants.PROPERTY_CREDENTIAL);  }  ContextBuilder builder=ContextBuilder.newBuilder(provider).credentials(identity,credential).modules(ImmutableList.<Module>of(new SLF4JLoggingModule())).overrides(properties);  if (endpoint != null) {    builder=builder.endpoint(endpoint);  }  BlobStoreContext context=builder.build(BlobStoreContext.class);  SwiftProxy proxy=SwiftProxy.Builder.builder().overrides(properties).endpoint(new URI(proxyEndpoint)).build();  proxy.start();  System.out.format("Swift proxy listening on port %d%n",proxy.getPort());  Thread.currentThread().join();}  }
class C{  public boolean implies(Permission permission){  return all_allowed;}  }
class C{  @Override protected void process(final DistributionManager dm){  boolean failed=false;  Throwable replyException=null;  try {    this.statStart=startGrantWait();    this.svc=DLockService.getInternalServiceNamed(this.serviceName);    if (this.svc == null) {      failed=false;      basicProcess(dm,false);    } else {      executeBasicProcess(dm);    }    failed=false;  } catch (  RuntimeException e) {    replyException=e;    throw e;  }catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    replyException=e;    throw e;  }catch (  Error e) {    SystemFailure.checkFailure();    replyException=e;    throw e;  } finally {    if (failed) {      if (logger.isTraceEnabled(LogMarker.DLS)) {        logger.trace(LogMarker.DLS,"DLockRequestMessage.process failed for <{}>",this);      }      this.response=createResponse();      this.response.setProcessorId(getProcessorId());      this.response.setRecipient(getSender());      this.response.serviceName=this.serviceName;      this.response.objectName=this.objectName;      this.response.lockId=this.lockId;      respondWithException(replyException);    }  }}  }
class C{  public static void debugHeapUsage(){  System.gc();  Runtime runtime=Runtime.getRuntime();  X.println('<' + DEBUG_DATE_FMT.format(new Date(System.currentTimeMillis())) + "><DEBUG><"+ Thread.currentThread().getName()+ "> Heap stats [free="+ runtime.freeMemory() / (1024 * 1024) + "M, total=" + runtime.totalMemory() / (1024 * 1024) + "M]");}  }
class C{  public void encodeOctetString(byte tb[],int tag) throws EncodeException {  encodeOctetString(tb,tag,0,tb.length);}  }
class C{  protected void append(T item){  if (item != null) {    this.list.add(item);    this.notifyDataSetChanged();  }}  }
class C{  private void changeColor(final int index,final boolean isSelected){  if (index != -1 && this.items.get(index).label != null) {    this.items.get(index).label.setBackground(isSelected ? getDisplay().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW) : getDisplay().getSystemColor(SWT.COLOR_WHITE));  }}  }
class C{  public SVGTextPathElementBridge(){}  }
class C{  public boolean isSetModuleCode(){  return this.moduleCode != null;}  }
class C{  private void serialize() throws IgniteCheckedException {  try (PlatformMemory mem=ctx.memory().allocate()){    PlatformInputStream in=mem.input();    boolean res=ctx.gateway().computeJobSerialize(ptr,mem.pointer()) == 1;    in.synchronize();    BinaryRawReaderEx reader=ctx.reader(in);    if (res)     job=reader.readObjectDetached(); else     throw new IgniteCheckedException(reader.readString());  } }  }
class C{  public static OperatorInfoBubble displayAttributeNotFoundParameterInformation(final AttributeNotFoundError error){  if (error == null) {    throw new IllegalArgumentException("error must not be null!");  }  if (error.getOperator() == null) {    throw new IllegalArgumentException("error operator must not be null!");  }  if (error.getKey() == null) {    throw new IllegalArgumentException("error parameter key must not be null!");  }  String key;switch (error.getCode()) {case AttributeNotFoundError.ATTRIBUTE_NOT_FOUND_IN_REGULAR:    key="process_regular_attribute_not_found_parameter";  break;case AttributeNotFoundError.ATTRIBUTE_NOT_FOUND:default :key="process_attribute_not_found_parameter";}return displayAttributeNotFoundParameterInformation(error,true,key,error.getAttributeName(),error.getKey());}  }
class C{  public static boolean isJavaVersionOrAbove(String version){  try {    Version java=new Version(getJavaVersion());    Version given=new Version(version);    return java.compareTo(given) >= 0;  } catch (  VersionFormatException vfe) {    return false;  }}  }
class C{  private void maybeSampleSyncParams(){  long playbackPositionUs=audioTrackUtil.getPlaybackHeadPositionUs();  if (playbackPositionUs == 0) {    return;  }  long systemClockUs=System.nanoTime() / 1000;  if (systemClockUs - lastPlayheadSampleTimeUs >= MIN_PLAYHEAD_OFFSET_SAMPLE_INTERVAL_US) {    playheadOffsets[nextPlayheadOffsetIndex]=playbackPositionUs - systemClockUs;    nextPlayheadOffsetIndex=(nextPlayheadOffsetIndex + 1) % MAX_PLAYHEAD_OFFSET_COUNT;    if (playheadOffsetCount < MAX_PLAYHEAD_OFFSET_COUNT) {      playheadOffsetCount++;    }    lastPlayheadSampleTimeUs=systemClockUs;    smoothedPlayheadOffsetUs=0;    for (int i=0; i < playheadOffsetCount; i++) {      smoothedPlayheadOffsetUs+=playheadOffsets[i] / playheadOffsetCount;    }  }  if (!isPassthrough() && systemClockUs - lastTimestampSampleTimeUs >= MIN_TIMESTAMP_SAMPLE_INTERVAL_US) {    audioTimestampSet=audioTrackUtil.updateTimestamp();    if (audioTimestampSet) {      long audioTimestampUs=audioTrackUtil.getTimestampNanoTime() / 1000;      long audioTimestampFramePosition=audioTrackUtil.getTimestampFramePosition();      if (audioTimestampUs < resumeSystemTimeUs) {        audioTimestampSet=false;      } else       if (Math.abs(audioTimestampUs - systemClockUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {        String message="Spurious audio timestamp (system clock mismatch): " + audioTimestampFramePosition + ", "+ audioTimestampUs+ ", "+ systemClockUs+ ", "+ playbackPositionUs;        if (failOnSpuriousAudioTimestamp) {          throw new InvalidAudioTrackTimestampException(message);        }        Log.w(TAG,message);        audioTimestampSet=false;      } else       if (Math.abs(framesToDurationUs(audioTimestampFramePosition) - playbackPositionUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {        String message="Spurious audio timestamp (frame position mismatch): " + audioTimestampFramePosition + ", "+ audioTimestampUs+ ", "+ systemClockUs+ ", "+ playbackPositionUs;        if (failOnSpuriousAudioTimestamp) {          throw new InvalidAudioTrackTimestampException(message);        }        Log.w(TAG,message);        audioTimestampSet=false;      }    }    if (getLatencyMethod != null) {      try {        latencyUs=(Integer)getLatencyMethod.invoke(audioTrack,(Object[])null) * 1000L - framesToDurationUs(bytesToFrames(bufferSize));        latencyUs=Math.max(latencyUs,0);        if (latencyUs > MAX_LATENCY_US) {          Log.w(TAG,"Ignoring impossibly large audio latency: " + latencyUs);          latencyUs=0;        }      } catch (      Exception e) {        getLatencyMethod=null;      }    }    lastTimestampSampleTimeUs=systemClockUs;  }}  }
class C{  private void initHeaderValues(){  configureDefaultHeaders(headersMap);  configureFromHeadersAsString();  LOG.debug("Header Values: {}",headersMap);}  }
class C{  public synchronized void updateQQPlot(QQPlot qqPlot){  if (qqPlot == null) {    throw new NullPointerException("The given q-q plot must not be null");  }  this.displayString=null;  this.qqPlot=qqPlot;  int topFreq=-1;  this.repaint();}  }
class C{  public DeleteRequest version(long version){  this.version=version;  return this;}  }
class C{  public XPathPatternContentSelector(ContentManager cm,XBLOMContentElement content,Element bound,String selector){  super(cm,content,bound);  expression=selector;  parse();}  }
class C{  public void createAsync(final FlavorCreateSpec flavorCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {  createObjectAsync(getBasePath(),serializeObjectAsJson(flavorCreateSpec),responseCallback);}  }
class C{  public SQLFeatureNotSupportedException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public AuthPermission(String name,String actions){  super("createLoginContext".equals(name) ? "createLoginContext.*" : name,actions);}  }
class C{  public void printPrologStackTrace(){  printPrologStackTrace(System.out);}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  @Override public synchronized String toString(){  if (elementCount == 0) {    return "[]";  }  int length=elementCount - 1;  StringBuffer buffer=new StringBuffer(elementCount * 16);  buffer.append('[');  for (int i=0; i < length; i++) {    if (elementData[i] == this) {      buffer.append("(this Collection)");    } else {      buffer.append(elementData[i]);    }    buffer.append(", ");  }  if (elementData[length] == this) {    buffer.append("(this Collection)");  } else {    buffer.append(elementData[length]);  }  buffer.append(']');  return buffer.toString();}  }
class C{  public void play(URL url){  AudioClip clip=getAudioClip(url);  if (clip != null) {    clip.play();  }}  }
class C{  protected Control(Type type){  this.type=type;}  }
class C{  private void eliminarCamposDocumento(DocDocumentoVO documento) throws Exception {  Properties campos=CargarCamposDocumento.getInstance().cargarCampos();  if (campos.containsKey(DocDocumentoVO.campoIdInterno)) {    String idCampoInterno=campos.getProperty(DocDocumentoVO.campoIdInterno);    int orden=getOrdenCampoTabla(documento.getIdObjeto(),idCampoInterno,documento.getIdFich());    String idTablaDesc=campos.getProperty(DocDocumentoVO.campoIdTablaDesc);    List camposTabla=getCamposDatoXIdTabla(idTablaDesc);    eliminarCampoDatoDocumento(camposTabla,documento.getIdObjeto(),orden);  } else {    throw new Exception("Error: No se encontro el Id Interno dentro del fichero de propiedades.");  }}  }
class C{  public AsyncLoader(Context context){  super(context);}  }
class C{  private synchronized boolean queriesBeforeRetryPrimaryHostIsMet(){  return this.queriesBeforeRetryPrimaryHost > 0 && this.queriesIssuedSinceFailover >= this.queriesBeforeRetryPrimaryHost;}  }
class C{  Logic(final Map map){  this.map=map;  viewBox=getDelegator().getLastBox();  mode=Mode.MODE_MOVE;  setSelectedBug(null);  setSelectedNode(null);  setSelectedWay(null);  setSelectedRelation(null);  map.setDelegator(getDelegator());  map.setViewBox(viewBox);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  AccessibleContext ac=getCurrentAccessibleContext();  if (ac != null) {    ac.addPropertyChangeListener(l);  } else {    super.addPropertyChangeListener(l);  }}  }
class C{  public Object read(InputNode node) throws Exception {  Instance type=factory.getInstance(node);  Object map=type.getInstance();  if (!type.isReference()) {    return populate(node,map);  }  return map;}  }
class C{  public synchronized Object pop(){  Object obj;  int len=size();  obj=peek();  removeElementAt(len - 1);  return obj;}  }
class C{  protected AnimatableValue[] parseValues(){  String valuesString=element.getAttributeNS(null,SVG_VALUES_ATTRIBUTE);  int len=valuesString.length();  if (len == 0) {    return null;  }  return parseValues(valuesString);}  }
class C{  protected String createExceptionDetails(String label,Object[] parameters,Exception exception){  StringBuilder temp=new StringBuilder();  addJamonLabelToDetails(temp,label);  addParameterInfoToDetails(temp,parameters);  addExceptionStackTraceToDetails(temp,exception);  return temp.toString();}  }
class C{  public static String escapeHTML(String html){  return HTMLEntities.escapeHTML(html);}  }
class C{  public ASN1Primitive toASN1Primitive(){  return time;}  }
class C{  private void declareExtensions(){  new CodeSearchFeed().declareExtensions(extProfile);}  }
class C{  public ColladaParserContext(XMLEventReader eventReader,String defaultNamespace){  super(eventReader,defaultNamespace != null ? defaultNamespace : ColladaConstants.COLLADA_NAMESPACE);}  }
class C{  public void close(){  filer.close();  if (discoveredProcs != null)   discoveredProcs.close();  discoveredProcs=null;}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(LegendRenderingOrder.STANDARD)) {    return LegendRenderingOrder.STANDARD;  } else   if (this.equals(LegendRenderingOrder.REVERSE)) {    return LegendRenderingOrder.REVERSE;  }  return null;}  }
class C{  public void charMBToAscii() throws IOException {  print("charMBToAscii",null);}  }
class C{  protected boolean afterDelete(boolean success){  if (success)   delete_Tree(MTree_Base.TREETYPE_Menu);  return success;}  }
class C{  @SuppressLint("MissingSuperCall") @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState,R.layout.activity_media_details);  mBackgroundUpdater.initialise(this,R.color.black);  Media media=getIntent().getParcelableExtra(EXTRA_ITEM);  updateBackground(media.headerImage);  if (VersionUtils.isLollipop()) {    postponeEnterTransition();  }  if (media instanceof Movie) {    getFragmentManager().beginTransaction().replace(R.id.fragment,PTVMovieDetailsFragment.newInstance(media)).commit();  } else {    getFragmentManager().beginTransaction().replace(R.id.fragment,PTVShowDetailsFragment.newInstance(media)).commit();  }  getFragmentManager().executePendingTransactions();  if (VersionUtils.isLollipop()) {    startPostponedEnterTransition();  }}  }
class C{  public BaseDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond){  this(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,ISOChronology.getInstance());}  }
class C{  public boolean pemEncode(){  return pemEncode;}  }
class C{  protected void handleReorderChange(PropertyChangeEvent evt){  refreshChildren();  refreshVisuals();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.637 -0500",hash_original_method="9C711BE19A8C0E0A7CB116A3F753C6F0",hash_generated_method="3E11F84AAB428D962C364CC48C7D950E") public String encodeBody(){  return optionTag;}  }
class C{  public TextLineEncoder(Charset charset,String delimiter){  this(charset,new LineDelimiter(delimiter));}  }
class C{  @Override public void clear(){  removeAllElements();}  }
class C{  public Digraph(String gName,int nNodes){  super(gName,nNodes);}  }
class C{  public void loadJarFile(String name){  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    fileText.setText("");    while ((entry=zin.getNextJarEntry()) != null) {      if (entry.getName().equals(name)) {        BufferedReader in=new BufferedReader(new InputStreamReader(zin));        String line;        while ((line=in.readLine()) != null) {          fileText.append(line);          fileText.append("\n");        }      }      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private static void testKey(Key key1,Key key2) throws Exception {  if (key2.getAlgorithm().equals("RSA") == false) {    throw new Exception("Algorithm not RSA");  }  if (key1 instanceof PublicKey) {    if (key2.getFormat().equals("X.509") == false) {      throw new Exception("Format not X.509");    }  } else   if (key1 instanceof PrivateKey) {    if (key2.getFormat().equals("PKCS#8") == false) {      throw new Exception("Format not PKCS#8");    }  }  if (key1.equals(key2) == false) {    throw new Exception("Keys not equal");  }  if (Arrays.equals(key1.getEncoded(),key2.getEncoded()) == false) {    throw new Exception("Encodings not equal");  }}  }
class C{  public int hashCode(){  return pattern.hashCode();}  }
class C{  public synchronized IntSetting createExpirableIntSetting(String key,int defaultValue){  IntSetting result=createIntSetting(key,defaultValue);  if (expired)   result.revertToDefault();  return result;}  }
class C{  @Override public void visitEnd(){  if (!subroutineHeads.isEmpty()) {    markSubroutines();    if (LOGGING) {      log(mainSubroutine.toString());      Iterator<BitSet> it=subroutineHeads.values().iterator();      while (it.hasNext()) {        BitSet sub=it.next();        log(sub.toString());      }    }    emitCode();  }  if (mv != null) {    accept(mv);  }}  }
class C{  @Override public int hashCode(){  int result=19;  result=37 * result + this.positionForAxisAtTop.hashCode();  result=37 * result + this.positionForAxisAtBottom.hashCode();  result=37 * result + this.positionForAxisAtLeft.hashCode();  result=37 * result + this.positionForAxisAtRight.hashCode();  return result;}  }
class C{  public Point2D linkShapes(GL2 gl,Point2D center1,Point2D center2,GLEntity shape1,GLEntity shape2,float deviation){  Vec2 c1=new Vec2(center1);  Vec2 c2=new Vec2(center2);  Vec2 dir=c2.minus(c1);  Vec2 norm=new Vec2(dir.y,-dir.x).mult(deviation);  Vec2 middle=c1.plus(c2).div(2.0f).plus(norm);  QuadCurve2D curve=new QuadCurve2D.Float(c1.x,c1.y,middle.x,middle.y,c2.x,c2.y);  QuadCurve2D last=new QuadCurve2D.Float();  if (dashed) {    gl.glEnable(GL2.GL_LINE_STIPPLE);    gl.glLineStipple(1,(short)0xf0f0);  }  boolean ok=drawCurve(gl,center1,center2,curve,shape1,shape2,last);  if (dashed) {    gl.glDisable(GL2.GL_LINE_STIPPLE);  }  if (ok) {    double x1=last.getP1().getX();    double y1=last.getP1().getY();    double x2=last.getP2().getX();    double y2=last.getP2().getY();    double slope=(y2 - y1) / (x2 - x1);    double angle=(float)Math.tanh(slope) - Math.PI / 2.0;    if (x2 < x1) {      angle+=Math.PI;    }    head.setTranslation((float)(last.getP2().getX()),(float)(last.getP2().getY()),0f);    head.setScale(8f,8f,8f);    head.setRotation(angle);    head.fill(gl);  }  QuadCurve2D left=new QuadCurve2D.Float();  QuadCurve2D right=new QuadCurve2D.Float();  curve.subdivide(left,right);  return right.getP1();}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  @Override public synchronized void processAuthorize(WebSocketChannel channel,String authorizeToken){  nextHandler.processAuthorize(channel,authorizeToken);}  }
class C{  public void addViews(List<ConfigurationPlugInView> configurationPlugInViews,List<ConfigurationPlugInVirtualDataWindow> configurationPlugInVirtualDW) throws ConfigurationException {  initViews(configurationPlugInViews);  initVirtualDW(configurationPlugInVirtualDW);}  }
class C{  public void removeAllListeners(){  clientgui.getClient().getGame().removeGameListener(this);  clientgui.getBoardView().removeBoardViewListener(this);}  }
class C{  private void generateParameterList(List<? extends VariableElement> parameters,StringBuilder stringBuilder,boolean methodDeclaration){  Iterator<? extends VariableElement> parametersIt;  VariableElement parameter;  parametersIt=parameters.iterator();  if (!parameters.isEmpty()) {    stringBuilder.append(", ");  }  while (parametersIt.hasNext()) {    parameter=parametersIt.next();    if (methodDeclaration) {      Set<Modifier> modifiers=parameter.getModifiers();      for (      Modifier m : modifiers) {        stringBuilder.append(m.toString());        stringBuilder.append(" ");      }      stringBuilder.append(parameter.asType().toString());      stringBuilder.append(" ");    }    stringBuilder.append(parameter.getSimpleName().toString());    if (parametersIt.hasNext()) {      stringBuilder.append(", ");    }  }}  }
class C{  public void clear(){  stateCount++;  firstItem=lastItem=null;  map.clear();  objectIndexes=null;}  }
class C{  private void addUpperPlotData(List<MemoryInformationData> memoryData){  for (  MemoryInformationData data : memoryData) {    long usedHeapMemoryAvg=(data.getTotalUsedHeapMemorySize() / data.getCount()) / 1024;    heapMemory.add(data.getTimeStamp().getTime(),usedHeapMemoryAvg,data.getMinUsedHeapMemorySize() / 1024.0d,data.getMaxUsedHeapMemorySize() / 1024.0d,false);  }  heapMemory.fireSeriesChanged();}  }
class C{  @Deprecated public DTLSFlight(){  this.messages=new ArrayList<Record>();  this.tries=0;  this.timeout=0;}  }
class C{  public boolean isHierarchyConnected(){  return true;}  }
class C{  private void canonicaliseMapEntry(Map<String,String> map,String longKey,String shortKey){  if (map.containsKey(longKey)) {    String value=map.remove(longKey);    map.put(shortKey,value);  }}  }
class C{  private static void copy(InputStream inputStream,OutputStream outputStream) throws IOException {  byte[] b=new byte[1024];  int len;  while ((len=inputStream.read(b)) != -1) {    outputStream.write(b,0,len);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  double weight=1;  int numPointsToUse=8;  int numPoints=0;  int lineNum=0;  int nlines=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double sumWeights;  double noData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  String attributeName=args[1];  firstLineHeader=Boolean.parseBoolean(args[2]);  outputHeader=args[3];  resolution=Double.parseDouble(args[4]);  weight=Double.parseDouble(args[5]);  if (!args[6].equalsIgnoreCase("not specified")) {    maxDist=Double.parseDouble(args[6]);  }  if (maxDist == Double.POSITIVE_INFINITY) {    showFeedback("Unspecified maximum distance.");    return;  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    if (maxDist < Double.POSITIVE_INFINITY) {      maxDist=maxDist * maxDist;    }    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      if (pointFiles[i].endsWith(".shp")) {        ShapeFile inputShape=new ShapeFile(pointFiles[i]);        for (int r=0; r < inputShape.getNumberOfRecords(); r++) {          double[][] points=inputShape.getRecord(r).getGeometry().getPoints();          numPoints+=points.length;        }      } else {        nlines=countLinesInFile(pointFiles[i]);        if (firstLineHeader) {          numPoints+=nlines - 1;        } else {          numPoints+=nlines;        }      }    }    if (numPoints < numPointsToUse) {      numPointsToUse=numPoints;    }    KdTree<Double> pointsTree=new KdTree.SqrEuclid<>(2,new Integer(numPoints));    nlines=0;    for (i=0; i < numPointFiles; i++) {      if (pointFiles[i].endsWith(".shp")) {        double[][] vertices;        ShapeFile inputShape=new ShapeFile(pointFiles[i]);        ShapeType shapeType=inputShape.getShapeType();        String[] attributeFieldNames=inputShape.getAttributeTableFields();        int fieldNum=-1;        for (int q=0; q < attributeFieldNames.length; q++) {          String str=attributeFieldNames[q];          if (str.toLowerCase().trim().equals(attributeName.toLowerCase().trim())) {            fieldNum=q;            break;          }        }        boolean useZ=false;        boolean useM=false;        if (fieldNum < 0) {          if (attributeName.toLowerCase().trim().equals("z") && shapeType.getDimension() == ShapeTypeDimension.Z) {            useZ=true;          } else           if (attributeName.toLowerCase().trim().equals("m") && shapeType.getDimension() == ShapeTypeDimension.M) {            useM=true;          }        }        for (        ShapeFileRecord record : inputShape.records) {          int recNumber=record.getRecordNumber();          double[] zArray=null;          double[] mArray=null;switch (shapeType) {case POINT:            whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());          vertices=recPoint.getPoints();        break;case POINTZ:      PointZ recPointZ=(PointZ)record.getGeometry();    vertices=recPointZ.getPoints();  zArray=new double[]{recPointZ.getZ()};break;case POINTM:PointM recPointM=(PointM)record.getGeometry();vertices=recPointM.getPoints();mArray=new double[]{recPointM.getM()};break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)record.getGeometry();vertices=recMultiPoint.getPoints();break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)record.getGeometry();vertices=recMultiPointZ.getPoints();zArray=recMultiPointZ.getzArray();break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)record.getGeometry();vertices=recMultiPointM.getPoints();mArray=recMultiPointM.getmArray();break;default :showFeedback("Invalid shape type for interpolation.");return;}if (!useZ && !useM) {Object[] rowData=inputShape.getAttributeTable().getRecord(recNumber - 1);z=(double)rowData[fieldNum];for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,z);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}} else if (useZ && zArray != null) {for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,zArray[p]);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}} else if (useM && mArray != null) {for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,mArray[p]);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}}}} else {DataInputStream in=null;BufferedReader br=null;try {FileInputStream fstream=new FileInputStream(pointFiles[i]);in=new DataInputStream(fstream);br=new BufferedReader(new InputStreamReader(in));String line;String[] str;lineNum=1;while ((line=br.readLine()) != null) {str=line.split(delimiter);if (str.length <= 1) {delimiter="\t";str=line.split(delimiter);if (str.length <= 1) {delimiter=" ";str=line.split(delimiter);if (str.length <= 1) {delimiter=",";str=line.split(delimiter);}}}if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {x=Double.parseDouble(str[0]);y=Double.parseDouble(str[1]);z=Double.parseDouble(str[2]);double[] entry={y,x};pointsTree.addPoint(entry,z);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}lineNum++;nlines++;progress=(int)(100d * nlines / numPoints);updateProgress("Reading point data:",progress);}in.close();br.close();} catch (java.io.IOException e) {System.err.println("Error: " + e.getMessage());} finally {try {if (in != null || br != null) {in.close();br.close();}} catch (java.io.IOException ex) {}}}}west=minX - 0.5 * resolution;north=maxY + 0.5 * resolution;nrows=(int)(Math.ceil((north - minY) / resolution));ncols=(int)(Math.ceil((maxX - west) / resolution));south=north - nrows * resolution;east=west + ncols * resolution;fw=new FileWriter(outputHeader,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(ncols);out.println(str1);str1="Rows:\t" + Integer.toString(nrows);out.println(str1);str1="Data Type:\t" + "float";out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\tcontinuous";out.println(str1);str1="Preferred Palette:\t" + "spectrum.pal";out.println(str1);str1="NoData:\t" + noData;out.println(str1);if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);out.close();WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");double northing, easting;double halfResolution=resolution / 2;double dist=0;for (row=0; row < nrows; row++) {for (col=0; col < ncols; col++) {easting=(col * resolution) + (west + halfResolution);northing=(north - halfResolution) - (row * resolution);double[] entry={northing,easting};results=pointsTree.neighborsWithinRange(entry,maxDist);sumWeights=0;for (i=0; i < results.size(); i++) {if ((results.get(i).distance > 0) && (results.get(i).distance < maxDist)) {dist=Math.pow(Math.sqrt(results.get(i).distance),weight);sumWeights+=1 / dist;} else if (results.get(i).distance == 0) {break;}}if (sumWeights > 0) {z=0;for (i=0; i < results.size(); i++) {if ((results.get(i).distance > 0) && (results.get(i).distance < maxDist)) {dist=1 / Math.pow(Math.sqrt(results.get(i).distance),weight);z+=(dist * results.get(i).value) / sumWeights;} else if (results.get(i).distance == 0) {z=results.get(i).value;break;}}image.setValue(row,col,z);} else {image.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (nrows - 1));updateProgress("Interpolating point data:",progress);}image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");image.addMetadataEntry("Created on " + new Date());image.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  static int[] roundSizes(float[] sizes){  int[] retInts=new int[sizes.length];  float posD=0;  for (int i=0; i < retInts.length; i++) {    int posI=(int)(posD + 0.5f);    posD+=sizes[i];    retInts[i]=(int)(posD + 0.5f) - posI;  }  return retInts;}  }
class C{  public static String buildSubpartsTable(HttpServletRequest request,SessionContext context,int limit,String uid,boolean createAsNew,boolean unlimitedEnroll,String durationColumnName) throws Exception {  boolean varLimits="y".equals(request.getParameter("varLimits"));  Vector sp=(Vector)context.getAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME);  boolean autoCalc=true;  if (!CommonValues.Yes.eq(UserProperty.ConfigAutoCalc.get(context.getUser())))   autoCalc=false;  Collection extDepts=(Collection)request.getAttribute(Department.EXTERNAL_DEPT_ATTR_NAME);  String extDeptsOption="<OPTION value='-1'>Department</OPTION>";  for (Iterator it=extDepts.iterator(); it.hasNext(); ) {    Department d=(Department)it.next();    extDeptsOption+="<OPTION value='" + d.getUniqueId().toString() + "'>"+ d.getManagingDeptLabel()+ "</OPTION>";  }  if (sp != null && sp.size() > 0) {    if (!varLimits) {      for (int i=0; i < sp.size(); i++) {        SimpleItypeConfig sic=(SimpleItypeConfig)sp.elementAt(i);        if (hasVarLimitsInSubpart(request,sic)) {          varLimits=true;          break;        }      }    }    WebTable tbl=new WebTable(9,"",new String[]{unlimitedEnroll ? "" : "<<00>>","&nbsp;",!varLimits ? "<<1>>" : MSG.columnSubpartMinLimitPerClass(),!varLimits ? "<<11>>" : MSG.columnSubpartMaxLimitPerClass(),MSG.columnSubpartNumberOfClasses(),"<span id='durationColumn' style='max-width:65px; display: inherit;'>" + durationColumnName + "</span>",MSG.columnSubpartNumberOfRooms(),MSG.columnSubpartRoomRatio(),MSG.columnSubpartManagingDepartment()},new String[]{"left","left","center","center","center","center","center","center","center"},null);    tbl.setSuppressRowHighlight(true);    for (int i=0; i < sp.size(); i++) {      SimpleItypeConfig sic=(SimpleItypeConfig)sp.elementAt(i);      setupSubpart(request,context,sic,1,tbl,i,sp.size(),-1,-1,limit,null,autoCalc,createAsNew,extDeptsOption,unlimitedEnroll,varLimits);    }    request.setAttribute("subpartsExist","true");    String varLimitsCheckBox="<input type='checkbox' name='varLimits' value='y' <<0>>" + (varLimits ? "checked" : "") + " onClick=\"doClick('multipleLimits', 0);\"> <small>Allow variable limits</small>";    String tblStr=tbl.printTable();    if (request.getAttribute("varLimits") != null) {      tblStr=tblStr.replaceAll("<<00>>",varLimitsCheckBox);      tblStr=tblStr.replaceAll("<<0>>","checked");      tblStr=tblStr.replaceAll("<<1>>",MSG.columnSubpartMinLimitPerClass());      tblStr=tblStr.replaceAll("<<11>>",MSG.columnSubpartMaxLimitPerClass());    } else {      if (CommonValues.Yes.eq(UserProperty.VariableClassLimits.get(context.getUser()))) {        tblStr=tblStr.replaceAll("<<00>>",varLimitsCheckBox);        tblStr=tblStr.replaceAll("<<0>>"," ");      } else       tblStr=tblStr.replaceAll("<<00>>"," ");      tblStr=tblStr.replaceAll("<<1>>"," ");      tblStr=tblStr.replaceAll("<<11>>",MSG.columnSubpartLimitPerClass());    }    return (tblStr);  } else {    request.setAttribute("subpartsExist","false");    return "";  }}  }
class C{  public Page copy(long version){  Page newPage=create(map,version,keys,values,children,totalCount,getMemory());  removePage();  newPage.cachedCompare=cachedCompare;  return newPage;}  }
class C{  public void open() throws IOException {  connection=new DatagramSocket();  connection.setSoTimeout(timeout);}  }
class C{  public void addObserver(Observer observer){  if (observer == null) {    throw new NullPointerException();  }synchronized (this) {    if (!observers.contains(observer))     observers.add(observer);  }}  }
class C{  public void hide(){  mFabExpandLayout.setVisibility(View.INVISIBLE);  mFabType=FAB_CIRCLE;}  }
class C{  public void initMapSelector(){  mapCombo=new ComboBox<>();  mapCombo.setEditable(true);  mapCombo.setPromptText("Type map name...");  mapCombo.valueProperty().addListener(getMapSelectionListener());}  }
class C{  public long minflt(){  return Long.parseLong(fields[9]);}  }
class C{  public static void eachFileRecurse(Path self,@ClosureParams(value=SimpleType.class,options="java.nio.file.Path") Closure closure) throws IOException {  eachFileRecurse(self,FileType.ANY,closure);}  }
class C{  public static Matrix linearGradientMatrix(ScalableGradientNode gradient,Rect pathBounds){  FXGMatrix matrix=new FXGMatrix();  MatrixNode mtxNode=gradient.getMatrixNode();  if (mtxNode != null) {    matrix.translate(GRADIENT_DIMENSION / 2.0,GRADIENT_DIMENSION / 2.0);    matrix.scale(1.0 / GRADIENT_DIMENSION,1.0 / GRADIENT_DIMENSION);    FXGMatrix nodeMatrix=new FXGMatrix(mtxNode);    matrix.concat(nodeMatrix);    return matrix.toSWFMatrix();  }  double width=(pathBounds.xMax - pathBounds.xMin) / (double)SwfConstants.TWIPS_PER_PIXEL;  double height=(pathBounds.yMax - pathBounds.yMin) / (double)SwfConstants.TWIPS_PER_PIXEL;  double scaleX=gradient.getScaleX();  double rotation=gradient.getRotation();  double tx=gradient.getX();  double ty=gradient.getY();  if (Double.isNaN(scaleX)) {    if (rotation % 90 != 0) {      double normalizedAngle=rotation % 360;      if (normalizedAngle < 0)       normalizedAngle+=360;      normalizedAngle%=180;      if (normalizedAngle > 90)       normalizedAngle=180 - normalizedAngle;      double side=width;      double hypotenuse=Math.sqrt(width * width + height * height);      double hypotenuseAngle=Math.acos(width / hypotenuse) * 180 / Math.PI;      if (normalizedAngle > hypotenuseAngle) {        normalizedAngle=90 - normalizedAngle;        side=height;      }      scaleX=side / Math.cos(normalizedAngle / 180 * Math.PI);    } else {      scaleX=(rotation % 180) == 0 ? width : height;    }  }  if (!Double.isNaN(tx) && Double.isNaN(ty))   ty=0;  if (Double.isNaN(tx) && !Double.isNaN(ty))   tx=0;  if (!Double.isNaN(tx) && !Double.isNaN(ty))   matrix.translate(SwfConstants.GRADIENT_SQUARE / (2.0 * SwfConstants.TWIPS_PER_PIXEL),SwfConstants.GRADIENT_SQUARE / (2.0 * SwfConstants.TWIPS_PER_PIXEL));  if (Math.abs(scaleX) < 2)   scaleX=(scaleX < 0) ? -2 : 2;  scaleX=(scaleX * SwfConstants.TWIPS_PER_PIXEL) / SwfConstants.GRADIENT_SQUARE;  matrix.scale(scaleX,1);  if (!Double.isNaN(rotation))   matrix.rotate(rotation);  if (Double.isNaN(tx))   tx=width / 2.0 + pathBounds.xMin / (double)SwfConstants.TWIPS_PER_PIXEL;  if (Double.isNaN(ty))   ty=height / 2.0 + +pathBounds.yMin / (double)SwfConstants.TWIPS_PER_PIXEL;  matrix.translate(tx,ty);  return matrix.toSWFMatrix();}  }
class C{  public Range(double min,double max){  this.min=min;  this.max=max;  checkRangeValidity(min,max);}  }
class C{  public <T>void addFactory(Class<T> type,PrefabValueFactory<T> factory){  factoryCache.put(type,factory);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  protected _AccessibleState(String key){  super(key);}  }
class C{  public boolean waitForBackupSync(long timeout,TimeUnit unit) throws InterruptedException {  return backupSyncLatch.await(timeout,unit);}  }
class C{  public void testSubtractMathContextDiffScalePosNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="-7.4723342916989754E+45";  int cScale=-29;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(17,RoundingMode.DOWN);  BigDecimal result=aNumber.subtract(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream out=new DerOutputStream();  out.putGeneralizedTime(this.toDate());  return out.toByteArray();}  }
class C{  private static void printStackTraceElement(StackTraceElement trace,PrintWriter out,ClassLoader loader){  try {    LineMap map=getScriptLineMap(trace.getClassName(),loader);    if (map != null) {      LineMap.Line line=map.getLine(trace.getLineNumber());      if (line != null) {        out.print(trace.getClassName() + "." + trace.getMethodName());        out.print("(" + line.getSourceFilename() + ":");        out.println(line.getSourceLine(trace.getLineNumber()) + ")");        return;      }    }  } catch (  Throwable e) {  }  out.println(trace);}  }
class C{  public static Hours standardHoursIn(ReadablePeriod period){  int amount=BaseSingleFieldPeriod.standardPeriodIn(period,DateTimeConstants.MILLIS_PER_HOUR);  return Hours.hours(amount);}  }
class C{  private HierarchicalConfiguration addHandler(String className) throws ConfigurationException {  HierarchicalConfiguration hConf=new DefaultConfigurationBuilder();  hConf.addProperty("[@class]",className);  return hConf;}  }
class C{  public JMenuItem insert(JMenuItem mi,int pos){  if (pos < 0) {    throw new IllegalArgumentException("index less than zero.");  }  ensurePopupMenuCreated();  popupMenu.insert(mi,pos);  return mi;}  }
class C{  public void addCrossReferences(String... accessions){  for (  String accession : accessions) {    addCrossReference(new ProteinXref(accession));  }}  }
class C{  public GPUImageSmoothToonFilter(){  blurFilter=new GPUImageGaussianBlurFilter();  addFilter(blurFilter);  toonFilter=new GPUImageToonFilter();  addFilter(toonFilter);  getFilters().add(blurFilter);  setBlurSize(0.5f);  setThreshold(0.2f);  setQuantizationLevels(10.0f);}  }
class C{  @Inline public static void markBlockMeta(ObjectReference ref){  getMetaAddress(VM.objectModel.refToAddress(ref)).plus(FL_META_OFFSET).store(Word.one());}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  NullValueHolder nvh=null;  try {    nvh=(NullValueHolder)digester.peek();  } catch (  Exception e) {    throw new IllegalStateException("No parent NullValueHolder on object stack");  }  nvh.setNullValue(true);  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[NullValueRule]{" + digester.getMatch() + "} Set");  }}  }
class C{  private static byte[] generateFrequencyToCode(int[] cumulativeFreq){  byte[] freqToCode=new byte[1 << SHIFT];  int x=0;  byte s=-1;  for (  int i : cumulativeFreq) {    while (x < i) {      freqToCode[x++]=s;    }    s++;  }  return freqToCode;}  }
class C{  @Override public boolean remove(Object o){  while (true) {    Object[] elements=array;    Object[] newElements=createArrayRemove(elements,o);    if (newElements == null) {      return false;    }    if (replaceArray(elements,newElements))     return true;  }}  }
class C{  public String checkAcceptanceInitially(final DigestURL url,final CrawlProfile profile){  final HarvestProcess dbocc=this.nextQueue.exists(url.hash());  if (dbocc != null) {    return "double in: " + dbocc.name();  }  String urlhash=ASCII.String(url.hash());  LoadTimeURL oldEntry=null;  try {    oldEntry=this.indexSegment.fulltext().getDefaultConnector().getLoadTimeURL(urlhash);  } catch (  IOException e) {    ConcurrentLog.logException(e);    return "exception during double-test: " + e.getMessage();  }  final int maxAllowedPagesPerDomain=profile.domMaxPages();  if (maxAllowedPagesPerDomain < Integer.MAX_VALUE && maxAllowedPagesPerDomain > 0) {    final AtomicInteger dp=profile.getCount(url.getHost());    if (dp != null && dp.get() >= maxAllowedPagesPerDomain) {      if (CrawlStacker.log.isFine())       CrawlStacker.log.fine("URL '" + url.toNormalform(false) + "' appeared too often in crawl stack, a maximum of "+ maxAllowedPagesPerDomain+ " is allowed.");      return "crawl stack domain counter exceeded (test by profile)";    }  }  final Long oldDate=oldEntry == null ? null : oldEntry.date;  if (oldDate == null) {    return null;  }  final boolean recrawl=profile.recrawlIfOlder() > oldDate.longValue();  final String urlstring=url.toNormalform(false);  if (recrawl) {    if (CrawlStacker.log.isFine())     CrawlStacker.log.fine("RE-CRAWL of URL '" + urlstring + "': this url was crawled "+ ((System.currentTimeMillis() - oldDate.longValue()) / 60000 / 60/ 24)+ " days ago.");  } else {    return "double in: local index, oldDate = " + oldDate.toString();  }  return null;}  }
class C{  private void cooldown(){  final TextView status=(TextView)findViewById(R.id.status);  if (mCooldown <= 0) {    mPasswordEntry.setEnabled(true);    setBackFunctionality(true);    status.setText(R.string.enter_password);  } else {    CharSequence template=getText(R.string.crypt_keeper_cooldown);    status.setText(TextUtils.expandTemplate(template,Integer.toString(mCooldown)));    mCooldown--;    mHandler.removeMessages(MESSAGE_COOLDOWN);    mHandler.sendEmptyMessageDelayed(MESSAGE_COOLDOWN,1000);  }}  }
class C{  public static ScannerFactory instance(Context context){  ScannerFactory instance=context.get(scannerFactoryKey);  if (instance == null)   instance=new ScannerFactory(context);  return instance;}  }
class C{  public void open(){  this.database=openHelper.getWritableDatabase();}  }
class C{  private static int calculateNumberOfRows(int m,int k,int c){  int r=((m + 1 + k) / c) + 1;  if (c * r >= (m + 1 + k+ c)) {    r--;  }  return r;}  }
class C{  public static boolean validateStream(String stream){  try {    return stream.matches("(?i)^" + USERNAME_REGEX + "$");  } catch (  PatternSyntaxException|NullPointerException ex) {    return false;  }}  }
class C{  public Builder map(String fullyQualifiedColumnNames,Class<ColumnMapper> mapperClass,Configuration config){  return map(fullyQualifiedColumnNames,instantiateMapper(mapperClass,config));}  }
class C{  @Override public Node insertChildAt(Node toInsert,int index){  if (toInsert instanceof Element && getDocumentElement() != null) {    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,"Only one root element allowed");  }  if (toInsert instanceof DocumentType && getDoctype() != null) {    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,"Only one DOCTYPE element allowed");  }  return super.insertChildAt(toInsert,index);}  }
class C{  @Override public IType<?> fromFacetType(){  return Types.NO_TYPE;}  }
class C{  public HostSelectionPolicyMinimumCorrelation(final HostSelectionPolicy fallbackPolicy){  super();  setFallbackPolicy(fallbackPolicy);}  }
class C{  public static boolean isCVSVersion(){  return IS_CVS_VERSION;}  }
class C{  public boolean isFatalError(){  return fSeverity == RefactoringStatus.FATAL;}  }
class C{  public synchronized MetaStore storeVote(int vote){  LOGGER.debug("Store vote {}",vote);  buffer.writeInt(8,vote).flush();  return this;}  }
class C{  private void residualReplace(ExampleSet exampleSet,Model model,boolean shrinkage) throws OperatorException {  ExampleSet resultSet=model.apply(exampleSet);  Attribute label=exampleSet.getAttributes().getLabel();  Iterator<Example> originalReader=exampleSet.iterator();  Iterator<Example> predictionReader=resultSet.iterator();  while ((originalReader.hasNext()) && (predictionReader.hasNext())) {    Example originalExample=originalReader.next();    Example predictionExample=predictionReader.next();    double prediction=predictionExample.getPredictedLabel();    if (shrinkage) {      prediction*=getParameterAsDouble(PARAMETER_SHRINKAGE);    }    double residual=originalExample.getLabel() - prediction;    originalExample.setValue(label,residual);  }  PredictionModel.removePredictedLabel(resultSet);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.019 -0400",hash_original_method="317B4445CD0CA27CAD8CF553156DB5CA",hash_generated_method="068A15FDDA9BB1D50DF58D0907EB22C2") public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public synchronized boolean isQuoted(){  return quoted;}  }
class C{  public static boolean deleteFile(String filePath,String filename){  if ((filePath == null) || filePath.isEmpty() || (filename == null)|| filename.isEmpty()) {    return false;  }  return deleteFile(filePath + File.separator + filename);}  }
class C{  public static void run(){  LocalForStringConstantArguments transformer=new LocalForStringConstantArguments();  for (  SootClass clz : Scene.v().getClasses()) {    if (Project.v().isSrcClass(clz.toString())) {      for (      SootMethod meth : clz.getMethods()) {        if (meth.isConcrete()) {          try {            transformer.transform(meth.retrieveActiveBody());          } catch (          Exception ex) {            logger.info("Exception retrieving method body {}",ex);            continue;          }        }      }    }  }}  }
class C{  public void addUtility(double newUtil){  utility+=newUtil;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(MultiHostConnectionTest.class);}  }
class C{  private static int encodeValueLenient(double x){  double planetMax=PlanetModel.WGS84.getMaximumMagnitude();  if (x > planetMax) {    x=planetMax;  } else   if (x < -planetMax) {    x=-planetMax;  }  return Geo3DUtil.encodeValue(x);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Class loadClass(String name) throws ClassNotFoundException {  try {    return loadClass(name,false);  } catch (  NoClassDefFoundError e) {    throw new ClassNotFoundException(name);  }}  }
class C{  @Override public Type STRING(){  return stringType;}  }
class C{  public static PortAttribute valueOfAttribute(String name){  PortAttribute[] portAtts=values();  for (int i=0; i < portAtts.length; i++) {    if (portAtts[i].getAttributeName().equals(name)) {      return portAtts[i];    }  }  return null;}  }
class C{  @Override public void buildClusterer(Instances data) throws Exception {  m_canopyClusters=null;  getCapabilities().testWithFail(data);  m_Iterations=0;  m_ReplaceMissingFilter=new ReplaceMissingValues();  Instances instances=new Instances(data);  instances.setClassIndex(-1);  if (!m_dontReplaceMissing) {    m_ReplaceMissingFilter.setInputFormat(instances);    instances=Filter.useFilter(instances,m_ReplaceMissingFilter);  }  m_FullMissingCounts=new int[instances.numAttributes()];  if (m_displayStdDevs) {    m_FullStdDevs=new double[instances.numAttributes()];  }  m_FullNominalCounts=new int[instances.numAttributes()][0];  m_FullMeansOrMediansOrModes=moveCentroid(0,instances,false,false);  for (int i=0; i < instances.numAttributes(); i++) {    m_FullMissingCounts[i]=instances.attributeStats(i).missingCount;    if (instances.attribute(i).isNumeric()) {      if (m_displayStdDevs) {        m_FullStdDevs[i]=Math.sqrt(instances.variance(i));      }      if (m_FullMissingCounts[i] == instances.numInstances()) {        m_FullMeansOrMediansOrModes[i]=Double.NaN;      }    } else {      m_FullNominalCounts[i]=instances.attributeStats(i).nominalCounts;      if (m_FullMissingCounts[i] > m_FullNominalCounts[i][Utils.maxIndex(m_FullNominalCounts[i])]) {        m_FullMeansOrMediansOrModes[i]=-1;      }    }  }  m_ClusterCentroids=new Instances(instances,m_NumClusters);  int[] clusterAssignments=new int[instances.numInstances()];  if (m_PreserveOrder) {    m_Assignments=clusterAssignments;  }  m_DistanceFunction.setInstances(instances);  Random RandomO=new Random(getSeed());  int instIndex;  HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();  DecisionTableHashKey hk=null;  Instances initInstances=null;  if (m_PreserveOrder) {    initInstances=new Instances(instances);  } else {    initInstances=instances;  }  if (m_speedUpDistanceCompWithCanopies) {    m_canopyClusters=new Canopy();    m_canopyClusters.setNumClusters(m_NumClusters);    m_canopyClusters.setSeed(getSeed());    m_canopyClusters.setT2(getCanopyT2());    m_canopyClusters.setT1(getCanopyT1());    m_canopyClusters.setMaxNumCandidateCanopiesToHoldInMemory(getCanopyMaxNumCanopiesToHoldInMemory());    m_canopyClusters.setPeriodicPruningRate(getCanopyPeriodicPruningRate());    m_canopyClusters.setMinimumCanopyDensity(getCanopyMinimumCanopyDensity());    m_canopyClusters.setDebug(getDebug());    m_canopyClusters.buildClusterer(initInstances);    m_centroidCanopyAssignments=new ArrayList<long[]>();    m_dataPointCanopyAssignments=new ArrayList<long[]>();  }  if (m_initializationMethod == KMEANS_PLUS_PLUS) {    kMeansPlusPlusInit(initInstances);    m_initialStartPoints=new Instances(m_ClusterCentroids);  } else   if (m_initializationMethod == CANOPY) {    canopyInit(initInstances);    m_initialStartPoints=new Instances(m_canopyClusters.getCanopies());  } else   if (m_initializationMethod == FARTHEST_FIRST) {    farthestFirstInit(initInstances);    m_initialStartPoints=new Instances(m_ClusterCentroids);  } else {    for (int j=initInstances.numInstances() - 1; j >= 0; j--) {      instIndex=RandomO.nextInt(j + 1);      hk=new DecisionTableHashKey(initInstances.instance(instIndex),initInstances.numAttributes(),true);      if (!initC.containsKey(hk)) {        m_ClusterCentroids.add(initInstances.instance(instIndex));        initC.put(hk,null);      }      initInstances.swap(j,instIndex);      if (m_ClusterCentroids.numInstances() == m_NumClusters) {        break;      }    }    m_initialStartPoints=new Instances(m_ClusterCentroids);  }  if (m_speedUpDistanceCompWithCanopies) {    for (int i=0; i < instances.numInstances(); i++) {      m_dataPointCanopyAssignments.add(m_canopyClusters.assignCanopies(instances.instance(i)));    }  }  m_NumClusters=m_ClusterCentroids.numInstances();  initInstances=null;  int i;  boolean converged=false;  int emptyClusterCount;  Instances[] tempI=new Instances[m_NumClusters];  m_squaredErrors=new double[m_NumClusters];  m_ClusterNominalCounts=new int[m_NumClusters][instances.numAttributes()][0];  m_ClusterMissingCounts=new int[m_NumClusters][instances.numAttributes()];  startExecutorPool();  while (!converged) {    if (m_speedUpDistanceCompWithCanopies) {      m_centroidCanopyAssignments.clear();      for (int kk=0; kk < m_ClusterCentroids.numInstances(); kk++) {        m_centroidCanopyAssignments.add(m_canopyClusters.assignCanopies(m_ClusterCentroids.instance(kk)));      }    }    emptyClusterCount=0;    m_Iterations++;    converged=true;    if (m_executionSlots <= 1 || instances.numInstances() < 2 * m_executionSlots) {      for (i=0; i < instances.numInstances(); i++) {        Instance toCluster=instances.instance(i);        int newC=clusterProcessedInstance(toCluster,false,true,m_speedUpDistanceCompWithCanopies ? m_dataPointCanopyAssignments.get(i) : null);        if (newC != clusterAssignments[i]) {          converged=false;        }        clusterAssignments[i]=newC;      }    } else {      converged=launchAssignToClusters(instances,clusterAssignments);    }    m_ClusterCentroids=new Instances(instances,m_NumClusters);    for (i=0; i < m_NumClusters; i++) {      tempI[i]=new Instances(instances,0);    }    for (i=0; i < instances.numInstances(); i++) {      tempI[clusterAssignments[i]].add(instances.instance(i));    }    if (m_executionSlots <= 1 || instances.numInstances() < 2 * m_executionSlots) {      for (i=0; i < m_NumClusters; i++) {        if (tempI[i].numInstances() == 0) {          emptyClusterCount++;        } else {          moveCentroid(i,tempI[i],true,true);        }      }    } else {      emptyClusterCount=launchMoveCentroids(tempI);    }    if (m_Iterations == m_MaxIterations) {      converged=true;    }    if (emptyClusterCount > 0) {      m_NumClusters-=emptyClusterCount;      if (converged) {        Instances[] t=new Instances[m_NumClusters];        int index=0;        for (int k=0; k < tempI.length; k++) {          if (tempI[k].numInstances() > 0) {            t[index]=tempI[k];            for (i=0; i < tempI[k].numAttributes(); i++) {              m_ClusterNominalCounts[index][i]=m_ClusterNominalCounts[k][i];            }            index++;          }        }        tempI=t;      } else {        tempI=new Instances[m_NumClusters];      }    }    if (!converged) {      m_ClusterNominalCounts=new int[m_NumClusters][instances.numAttributes()][0];    }  }  if (!m_FastDistanceCalc) {    for (i=0; i < instances.numInstances(); i++) {      clusterProcessedInstance(instances.instance(i),true,false,null);    }  }  if (m_displayStdDevs) {    m_ClusterStdDevs=new Instances(instances,m_NumClusters);  }  m_ClusterSizes=new int[m_NumClusters];  for (i=0; i < m_NumClusters; i++) {    if (m_displayStdDevs) {      double[] vals2=new double[instances.numAttributes()];      for (int j=0; j < instances.numAttributes(); j++) {        if (instances.attribute(j).isNumeric()) {          vals2[j]=Math.sqrt(tempI[i].variance(j));        } else {          vals2[j]=Utils.missingValue();        }      }      m_ClusterStdDevs.add(new DenseInstance(1.0,vals2));    }    m_ClusterSizes[i]=tempI[i].numInstances();  }  m_executorPool.shutdown();  m_DistanceFunction.clean();}  }
class C{  public Builder addX509Certificate(X509Certificate certificate){  certificates.add(certificate);  return this;}  }
class C{  private void print(Queue<Runnable> queue,IoEvent event){  StringBuilder sb=new StringBuilder();  sb.append("Adding event ").append(event.getType()).append(" to session ").append(event.getSession().getId());  boolean first=true;  sb.append("\nQueue : [");  for (  Runnable elem : queue) {    if (first) {      first=false;    } else {      sb.append(", ");    }    sb.append(((IoEvent)elem).getType()).append(", ");  }  sb.append("]\n");  LOGGER.debug(sb.toString());}  }
class C{  public static void append(Path file,Writer writer,String charset,boolean writeBom) throws IOException {  appendBuffered(file,writer,charset,writeBom);}  }
class C{  public void destroy(){  mListeners.clear();  mSpringSystem.deregisterSpring(this);}  }
class C{  TraceIntervalWalker(TraceLinearScan allocator,FixedInterval unhandledFixed,TraceInterval unhandledAny){  this.allocator=allocator;  unhandledAnyList=new AnyList(unhandledAny);  activeAnyList=new AnyList(TraceInterval.EndMarker);  activeFixedList=new FixedList(FixedInterval.EndMarker);  inactiveFixedList=new FixedList(unhandledFixed);  currentPosition=-1;}  }
class C{  public TCPMicroNetworkModule(String host,int port){  this.uri="socket://" + host + ":"+ port;}  }
class C{  public static Date stringToDate(String s,DateFormat formatter){  try {    return formatter.parse(s);  } catch (  ParseException e) {    return null;  }}  }
class C{  private void handleResponse(int response,ResponseData rawData){  mPolicy.processServerResponse(response,rawData);  if (mPolicy.allowAccess()) {    mCallback.allow(response);  } else {    mCallback.dontAllow(response);  }}  }
class C{  protected static void createFixedPartitionRegion(List<FixedPartitionAttributes> fpaList){  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  SystemManagementService service=(SystemManagementService)getManagementService();  PartitionAttributesFactory paf=new PartitionAttributesFactory();  paf.setRedundantCopies(2).setTotalNumBuckets(12);  for (  FixedPartitionAttributes fpa : fpaList) {    paf.addFixedPartitionAttributes(fpa);  }  paf.setPartitionResolver(new SingleHopQuarterPartitionResolver());  AttributesFactory attr=new AttributesFactory();  attr.setPartitionAttributes(paf.create());  fixedPrRegion=cache.createRegion(FIXED_PR_NAME,attr.create());  assertNotNull(fixedPrRegion);  LogWriterUtils.getLogWriter().info("Partitioned Region " + FIXED_PR_NAME + " created Successfully :"+ fixedPrRegion.toString());  RegionMXBean bean=service.getLocalRegionMBean(FIXED_PR_PATH);  RegionAttributes regAttrs=fixedPrRegion.getAttributes();  LogWriterUtils.getLogWriter().info("FixedPartitionAttribute From GemFire :" + regAttrs.getPartitionAttributes().getFixedPartitionAttributes());  RegionAttributesData data=bean.listRegionAttributes();  PartitionAttributesData parData=bean.listPartitionAttributes();  assertPartitionData(regAttrs,parData);  FixedPartitionAttributesData[] fixedPrData=bean.listFixedPartitionAttributes();  assertNotNull(fixedPrData);  assertEquals(3,fixedPrData.length);  for (int i=0; i < fixedPrData.length; i++) {    LogWriterUtils.getLogWriter().info("<ExpectedString> Fixed PR Data is " + fixedPrData[i] + "</ExpectedString> ");  }}  }
class C{  public float realAbsolute(){  return Math.abs(mLeft);}  }
class C{  public PeriodAxisLabelInfo(Class periodClass,DateFormat dateFormat){  this(periodClass,dateFormat,DEFAULT_INSETS,DEFAULT_FONT,DEFAULT_LABEL_PAINT,true,DEFAULT_DIVIDER_STROKE,DEFAULT_DIVIDER_PAINT);}  }
class C{  private void populate(IgniteCache<Integer,CacheValue> cache) throws Exception {  resetCounters();  for (int i=0; i < ENTRY_CNT; i++) {    cache.put(i,new CacheValue(i));    CacheValue val=cache.localPeek(i);    assert val != null;    assert val.value() == i;    GridCacheEntryEx entry=dht(cache).peekEx(i);    assert entry != null;    versions.put(i,entry.version());  }  assert swapCnt.get() == 0;  assert unswapCnt.get() == 0;}  }
class C{  @Override public int read() throws IOException {  if (_data == null) {    _data=new byte[1];  }  int result=_pageReader.read(_offset,_data,0,1);  if (result > 0) {    _offset++;    return _data[0] & 0xff;  } else {    return -1;  }}  }
class C{  public RenderedImage createScaledRendering(int w,int h,RenderingHints hints){  return getSource().createScaledRendering(w,h,hints);}  }
class C{  public AudioMetadata copyOf(){  AudioMetadata copy=new AudioMetadata(mSource,mSourceRecordable);  copy.mPriority=mPriority;  copy.mSelected=mSelected;  copy.mRecordable=mRecordable;  copy.mMetadata.putAll(mMetadata);  copy.mUpdated=mUpdated;  copy.mIdentifier=new String(mIdentifier);  mUpdated=false;  return copy;}  }
class C{  private byte[] twosComplement(){  prepareJavaRepresentation();  if (this.sign == 0) {    return new byte[]{0};  }  BigInteger temp=this;  int bitLen=bitLength();  int iThis=getFirstNonzeroDigit();  int bytesLen=(bitLen >> 3) + 1;  byte[] bytes=new byte[bytesLen];  int firstByteNumber=0;  int highBytes;  int bytesInInteger=4;  int hB;  if (bytesLen - (numberLength << 2) == 1) {    bytes[0]=(byte)((sign < 0) ? -1 : 0);    highBytes=4;    firstByteNumber++;  } else {    hB=bytesLen & 3;    highBytes=(hB == 0) ? 4 : hB;  }  int digitIndex=iThis;  bytesLen-=iThis << 2;  if (sign < 0) {    int digit=-temp.digits[digitIndex];    digitIndex++;    if (digitIndex == numberLength) {      bytesInInteger=highBytes;    }    for (int i=0; i < bytesInInteger; i++, digit>>=8) {      bytes[--bytesLen]=(byte)digit;    }    while (bytesLen > firstByteNumber) {      digit=~temp.digits[digitIndex];      digitIndex++;      if (digitIndex == numberLength) {        bytesInInteger=highBytes;      }      for (int i=0; i < bytesInInteger; i++, digit>>=8) {        bytes[--bytesLen]=(byte)digit;      }    }  } else {    while (bytesLen > firstByteNumber) {      int digit=temp.digits[digitIndex];      digitIndex++;      if (digitIndex == numberLength) {        bytesInInteger=highBytes;      }      for (int i=0; i < bytesInInteger; i++, digit>>=8) {        bytes[--bytesLen]=(byte)digit;      }    }  }  return bytes;}  }
class C{  public ERDOutlinePage(ScalableFreeformRootEditPart rootEditPart){  super();  this.rootEditPart=rootEditPart;}  }
class C{  public MappedBusWriter(String fileName,long fileSize,int recordSize,boolean append){  this.fileName=fileName;  this.fileSize=fileSize;  this.entrySize=recordSize + Length.RecordHeader;  this.append=append;}  }
class C{  public boolean onUpdateAnimation(long time,boolean jumpToEnd){  if (mContentAnimations == null)   return true;  boolean finished=true;  if (jumpToEnd) {    finished=mContentAnimations.finished();  } else {    finished=mContentAnimations.update(time);  }  if (jumpToEnd || finished)   finishAnimation();  return finished;}  }
class C{  public FixedByteArrayBuffer(final int capacity){  super(0,capacity);  this.buf=new byte[capacity];}  }
class C{  public static Number sin(Number a){  return Math.sin(a.doubleValue());}  }
class C{  public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  public static final void canEncodeImage(ImageWriter writer,ColorModel colorModel,SampleModel sampleModel) throws IIOException {  ImageTypeSpecifier type=null;  if (colorModel != null && sampleModel != null)   type=new ImageTypeSpecifier(colorModel,sampleModel);  canEncodeImage(writer,type);}  }
class C{  public static Double[] toReferenceType(double[] primArr){  Double[] refArr=new Double[primArr.length];  for (int i=0; i < primArr.length; i++)   refArr[i]=new Double(primArr[i]);  return refArr;}  }
class C{  private void heapifyDown(double cur,Object val){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    double best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best < twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur >= best) {      break;    }    twoheap[twopos]=best;    twovals[twopos]=twovals[bestchild];    twopos=bestchild;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.TEXT;}  }
class C{  public void clearTickMarkSections(){  tickMarkSections.clear();  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  public void create(AbstractKafkaInputOperator ownerOperator){  holdingBuffer=new ArrayBlockingQueue<>(ownerOperator.getHoldingBufferSize());  this.ownerOperator=ownerOperator;  logger.info("Create consumer wrapper with holding buffer size: {} ",ownerOperator.getHoldingBufferSize());  if (logger.isInfoEnabled()) {    logger.info("Assignments are {} ",Joiner.on('\n').join(ownerOperator.assignment()));  }}  }
class C{  public void parse() throws BadBytecode {  int n=numOfEntries;  int pos=2;  for (int i=0; i < n; i++)   pos=stackMapFrames(pos,i);}  }
class C{  private void cleanupDiscovery(StorageSystem system){  try {    system.setReachableStatus(false);    _dbClient.persistObject(system);  } catch (  DatabaseException e) {    _log.error("discoverStorage failed.  Failed to update discovery status to ERROR.",e);  }}  }
class C{  private void checkRestartLocked(){  if (restartNeeded) {    workerHandler.obtainMessage(MSG_CALL_MAYBE_START_FLOW,this).sendToTarget();  }}  }
class C{  private String renderString(View labels,TextAnnotation ta){  List<Constituent> constituents=new ArrayList<>(labels.getConstituents());  Collections.sort(constituents,TextAnnotationUtilities.constituentStartComparator);  StringBuilder sb=new StringBuilder();  String text=ta.getText();  int where=0;  for (  Constituent c : constituents) {    int start=c.getStartCharOffset();    String startstring=text.substring(where,start);    sb.append(startstring).append("[").append(c.getLabel()).append(" ").append(c.getTokenizedSurfaceForm()).append(" ] ");    where=c.getEndCharOffset();  }  return sb.toString();}  }
class C{  public InternalDistributedMember(InetAddress i,int p){  netMbr=MemberFactory.newNetMember(i,p);  defaultToCurrentHost();}  }
class C{  private void addItem(){  String item=editor.showDialog("Add entry:","",info);  item=format(item);  if (item != null && !item.isEmpty() && !data.contains(item)) {    int selectedIndex=list.getSelectedIndex();    if (selectedIndex != -1) {      data.add(selectedIndex + 1,item);      list.setSelectedValue(item,true);    } else {      data.addElement(item);    }    input.setText("");  }}  }
class C{  @Override public void writeData(CarbonMessage carbonMessage,Object entity,String mediaType,int chunkSize,CarbonCallback cb){  mediaType=(mediaType != null) ? mediaType : MediaType.WILDCARD;  ByteBuffer byteBuffer=BeanConverter.getConverter(mediaType).convertToMedia(entity);  carbonMessage.addMessageBody(byteBuffer);  carbonMessage.setEndOfMsgAdded(true);  if (chunkSize == Response.NO_CHUNK) {    carbonMessage.setHeader(Constants.HTTP_CONTENT_LENGTH,String.valueOf(byteBuffer.remaining()));  } else {    carbonMessage.setHeader(Constants.HTTP_TRANSFER_ENCODING,CHUNKED);  }  carbonMessage.setHeader(Constants.HTTP_CONTENT_TYPE,mediaType);  cb.done(carbonMessage);}  }
class C{  public static double[][] covarianceMatrix(double[][] data1,double[][] data2){  return covarianceMatrix(data1,data2,0);}  }
class C{  public void testBug18091639() throws SQLException {  String str=TimeUtil.formatNanos(1,true,false);  assertEquals("000000001",str);  str=TimeUtil.formatNanos(1,true,true);  assertEquals("0",str);  str=TimeUtil.formatNanos(1999,true,false);  assertEquals("000001999",str);  str=TimeUtil.formatNanos(1999,true,true);  assertEquals("000001",str);  str=TimeUtil.formatNanos(1000000010,true,false);  assertEquals("00000001",str);  str=TimeUtil.formatNanos(1000000010,true,true);  assertEquals("0",str);}  }
class C{  public void init(Config config,AlertStreamSchemaDAO dao){  if (!initialized) {synchronized (this) {      if (!initialized) {        if (LOG.isDebugEnabled())         LOG.debug("Initializing ...");        internalInit(config,dao);        initialized=true;        LOG.info("Successfully initialized");      }    }  } else {    LOG.info("Already initialized, skip");  }}  }
class C{  public static void checkExplanations(Query query,String defaultFieldName,IndexSearcher searcher,boolean deep) throws IOException {  searcher.search(query,new ExplanationAsserter(query,defaultFieldName,searcher,deep));}  }
class C{  @SuppressWarnings("rawtypes") @Test public void testColocatedPRQueryDuringRecoveryWithMissingColocatedChild() throws Exception {  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  setCacheInVMs(vm0,vm1);  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest#testColocatedPRBasicQuerying: Querying PR Test with DACK Started");  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest#testColocatedPRBasicQuerying: Creating the Accessor node in the PR");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForColocatedPRCreate(name,redundancy,PortfolioData.class,true));  vm0.invoke(PRQHelp.getCacheSerializableRunnableForLocalRegionCreation(localName,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest#testColocatedPRBasicQuerying: Successfully created the Accessor node in the PR");  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest:testColocatedPRBasicQuerying ----- Creating the Datastore node in the PR");  vm1.invoke(PRQHelp.getCacheSerializableRunnableForColocatedPRCreate(name,redundancy,PortfolioData.class,true));  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest#testColocatedPRBasicQuerying: Successfully Created the Datastore node in the PR");  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest#testColocatedPRBasicQuerying: Successfully Created PR's across all VM's");  final PortfolioData[] portfolio=createPortfolioData(cnt,cntDest);  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRPuts(name,portfolio,cnt,cntDest));  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRDuplicatePuts(name,portfolio,cnt,cntDest));  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest#testColocatedPRBasicQuerying: Inserted Portfolio data across PR's");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRPuts(localName,portfolio,cnt,cntDest));  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRDuplicatePuts(localName,portfolio,cnt,cntDest));  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRQueryAndCompareResults(name,localName));  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest#testColocatedPRBasicQuerying: Querying PR's 1st pass ENDED");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForCloseCache());  vm1.invoke(PRQHelp.getCacheSerializableRunnableForCloseCache());  setCacheInVMs(vm0,vm1);  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest#testColocatedPRBasicQuerying: Creating the Accessor node in the PR");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForColocatedParentCreate(name,redundancy,PortfolioData.class,true));  vm0.invoke(PRQHelp.getCacheSerializableRunnableForLocalRegionCreation(localName,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest#testColocatedPRBasicQuerying: Successfully created the Accessor node in the PR");  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest:testColocatedPRBasicQuerying ----- re-creating the Datastore node in the PR");  vm1.invoke(PRQHelp.getCacheSerializableRunnableForColocatedParentCreate(name,redundancy,PortfolioData.class,true));  try {    vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRQueryAndCompareResults(name,localName,true));    fail("Expected PartitionOfflineException when queryiong a region with offline colocated child");  } catch (  Exception e) {    if (!(e.getCause() instanceof PartitionOfflineException)) {      throw e;    }  }  LogWriterUtils.getLogWriter().info("PRQBasicQueryDUnitTest#testColocatedPRBasicQuerying: Querying PR's 2nd pass (after restarting regions) ENDED");}  }
class C{  protected RegionFactory(GemFireCacheImpl cache,RegionAttributes ra){  this.cache=cache;  this.attrsFactory=new AttributesFactory<K,V>(ra);}  }
class C{  static String packageNameOf(TypeElement type){  while (true) {    Element enclosing=type.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    type=(TypeElement)enclosing;  }}  }
class C{  private InputStream performTransforms(String uri,TransformsType transforms) throws Exception {  LOG.trace("performTransforms({}, {})",uri,transforms);  JAXBElement<TransformsType> transformsElement=new ObjectFactory().createTransforms(transforms);  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  DocumentBuilder db=dbf.newDocumentBuilder();  Document document=db.newDocument();  Marshaller marshaller=jaxbCtx.createMarshaller();  marshaller.marshal(transformsElement,document);  Transforms tr=new Transforms(document.getDocumentElement(),null);  XMLSignatureInput before=new XMLSignatureInput(referenceResolver.resolve(uri));  XMLSignatureInput after=tr.performTransforms(before);  return after.getOctetStream();}  }
class C{  public void enqueueLaunch(boolean incognito,int parentId,AsyncTabCreationParams asyncParams){  ThreadUtils.assertOnUiThread();  LaunchRunnable runnable=new LaunchRunnable(incognito,parentId,asyncParams);  if (mCurrentRunnable == null) {    mCurrentRunnable=runnable;    mCurrentRunnable.launch();  } else {    mQueue.add(runnable);  }}  }
class C{  public boolean isFocusable(){  return focusable && enabled && isVisible();}  }
class C{  private int handleAEIOUY(String value,DoubleMetaphoneResult result,int index){  if (index == 0) {    result.append('A');  }  return index + 1;}  }
class C{  public String baseModelId(){  return baseModelId;}  }
class C{  public static int calcDiff(int score,int nscore,int games){  return (int)Math.round(1.2 * Math.sqrt((nscore + score * 1.1 + 1) / (games + 1)));}  }
class C{  public Future<?> scheduleOneShot(long delay,Runnable runnable){  if (!Raptor.getInstance().isDisposed() && !isDisposed) {    try {      return executor.schedule(new RunnableExceptionDecorator(runnable),delay,TimeUnit.MILLISECONDS);    } catch (    RejectedExecutionException rej) {      if (!Raptor.getInstance().isDisposed()) {        LOG.error("Error executing runnable in scheduleOneShot: ",rej);        threadDump();        Raptor.getInstance().onError("ThreadServie has no more threads. A thread dump can be found at " + THREAD_DUMP_FILE_PATH);      }      return null;    }  } else {    if (LOG.isInfoEnabled())     LOG.info("Veoting runnable " + runnable + " raptor is disposed.");    return null;  }}  }
class C{  @HttpUrl(value="^/clientinfo/(*)/$",weight=-1) public void addClientFilterLast(int clientId,FilterChain chain) throws SQLException {}  }
class C{  private List<Statement> newObjectStatement(PolicyType policy,String prefix){  List<Statement> statements=new ArrayList<Statement>();  if (policy == PolicyType.NONE || bucketName == null || bucketName.isEmpty()) {    return statements;  }  Resources resources=new Resources(Constants.AWS_RESOURCE_PREFIX + bucketName + "/"+ prefix+ "*");  Statement statement=new Statement();  statement.setEffect("Allow");  statement.setPrincipal(new Principal("*"));  statement.setResources(resources);  statement.setSid("");  if (policy == PolicyType.READ_ONLY) {    statement.setActions(Constants.READ_ONLY_OBJECT_ACTIONS);  } else   if (policy == PolicyType.WRITE_ONLY) {    statement.setActions(Constants.WRITE_ONLY_OBJECT_ACTIONS);  } else   if (policy == PolicyType.READ_WRITE) {    statement.setActions(Constants.READ_WRITE_OBJECT_ACTIONS);  }  statements.add(statement);  return statements;}  }
class C{  @Override public void remove(int offset,int length) throws BadLocationException {  log.finest("Offset=" + offset + ",Length="+ length);  if (offset == 0 || length == 0) {    if (length >= m_mask.length() || length == 0)     super.remove(offset,length);    return;  }  if (offset - 1 >= 0 && offset - 1 < m_mask.length() && m_mask.charAt(offset - 1) == DELIMITER) {    if (offset - 2 >= 0)     m_tc.setCaretPosition(offset - 2); else     return;  } else   m_tc.setCaretPosition(offset - 1);}  }
class C{  public int readInt() throws IOException {  if (_readOffset + 4 < _readLength) {    return (((_readBuffer[_readOffset++] & 0xff) << 24) + ((_readBuffer[_readOffset++] & 0xff) << 16) + ((_readBuffer[_readOffset++] & 0xff) << 8)+ ((_readBuffer[_readOffset++] & 0xff)));  } else {    return ((read() << 24) + (read() << 16) + (read() << 8)+ (read()));  }}  }
class C{  public boolean swap(int fromR,int fromC,int toR,int toC){  if (!isAdjacentAndEmpty(fromR,fromC,toR,toC)) {    return false;  }  int tmp=board[toR][toC];  board[toR][toC]=board[fromR][fromC];  board[fromR][fromC]=tmp;  return true;}  }
class C{  public CancelResponse clone(){  CancelResponse result=new CancelResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.CancelCount=CancelCount;  return result;}  }
class C{  public boolean isInterface(){  return _rawClass.isAbstract();}  }
class C{  public void splitShard(String fromShardId,String toShardId) throws AdminException, InterruptedException {  Range<Integer> range=lookupSplitRange(fromShardId,toShardId);  assignBuckets(range.lowerEndpoint(),range.upperEndpoint(),fromShardId,toShardId);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  private int drawCharPerspectivePosition(Graphics g,char c,int x,int y){  if (imageCache == null) {    imageCache=new HashMap[PERSPECTIVES];    for (int iter=0; iter < PERSPECTIVES; iter++) {      if (iter != FRONT_ANGLE) {        imageCache[iter]=new HashMap<Character,Image>();      }    }  }  Character chr=new Character(c);  Image i=imageCache[perspective].get(chr);  if (i == null) {    Font f=getStyle().getFont();    int w=f.charWidth(c);    int h=f.getHeight();    i=Image.createImage(w,h,0);    g=i.getGraphics();    UIManager.getInstance().getLookAndFeel().setFG(g,this);    g.drawChar(c,0,0);    i=Effects.verticalPerspective(i,TOP_SCALE[perspective],BOTTOM_SCALE[perspective],VERTICAL_SHRINK[perspective]);    imageCache[perspective].put(chr,i);  }  g.drawImage(i,x,y);  return i.getWidth();}  }
class C{  public static void process(SsaMethod ssaMethod){  LiteralOpUpgrader dc;  dc=new LiteralOpUpgrader(ssaMethod);  dc.run();}  }
class C{  public void addResult(final Argument arg,final String[] paramValues){  List<String[]> list=values.get(arg);  if (list == null) {    list=new ArrayList<String[]>();    list.add(paramValues);    values.put(arg,list);  } else {    list.add(paramValues);  }}  }
class C{  private long calculateAbsTimeNeeded(long timeWanted){  return (long)(timeWanted / prefs.batteryGpsOnTimePercentage - timeWanted + 1);}  }
class C{  public static void makeCompactGrid(Container parent,int rows,int cols,int initialX,int initialY,int xPad,int yPad){  SpringLayout layout;  try {    layout=(SpringLayout)parent.getLayout();  } catch (  ClassCastException exc) {    System.err.println("The first argument to makeCompactGrid must use SpringLayout.");    return;  }  Spring x=Spring.constant(initialX);  for (int c=0; c < cols; c++) {    Spring width=Spring.constant(0);    for (int r=0; r < rows; r++) {      width=Spring.max(width,getConstraintsForCell(r,c,parent,cols).getWidth());    }    for (int r=0; r < rows; r++) {      SpringLayout.Constraints constraints=getConstraintsForCell(r,c,parent,cols);      constraints.setX(x);      constraints.setWidth(width);    }    x=Spring.sum(x,Spring.sum(width,Spring.constant(xPad)));  }  Spring y=Spring.constant(initialY);  for (int r=0; r < rows; r++) {    Spring height=Spring.constant(0);    for (int c=0; c < cols; c++) {      height=Spring.max(height,getConstraintsForCell(r,c,parent,cols).getHeight());    }    for (int c=0; c < cols; c++) {      SpringLayout.Constraints constraints=getConstraintsForCell(r,c,parent,cols);      constraints.setY(y);      constraints.setHeight(height);    }    y=Spring.sum(y,Spring.sum(height,Spring.constant(yPad)));  }  SpringLayout.Constraints pCons=layout.getConstraints(parent);  pCons.setConstraint(SpringLayout.SOUTH,y);  pCons.setConstraint(SpringLayout.EAST,x);}  }
class C{  public boolean hasListeners(String propertyName){  return this.map.hasListeners(propertyName);}  }
class C{  protected void rehash(){  int oldCapacity=table.length;  Entry[] oldMap=table;  int newCapacity=oldCapacity * 2 + 1;  Entry[] newMap=new Entry[newCapacity];  modCount++;  threshold=(int)(newCapacity * loadFactor);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldMap[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=(e.hash & 0x7FFFFFFF) % newCapacity;      e.next=newMap[index];      newMap[index]=e;    }  }}  }
class C{  public static void addPrecisionSawmillRecipe(ItemStack input,ItemStack primaryOutput,ItemStack secondaryOutput,double chance){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addPrecisionSawmillRecipe",ItemStack.class,ItemStack.class,ItemStack.class,Double.TYPE);    m.invoke(null,input,primaryOutput,secondaryOutput,chance);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public ClassificationDataSet(List<DataPoint> data,int predicting){  DataPoint tmp=data.get(0);  categories=new CategoricalData[tmp.numCategoricalValues() - 1];  for (int i=0; i < categories.length; i++) {    categories[i]=i >= predicting ? tmp.getCategoricalData()[i + 1] : tmp.getCategoricalData()[i];  }  numNumerVals=tmp.numNumericalValues();  this.predicting=tmp.getCategoricalData()[predicting];  datapoints=new ArrayList<DataPoint>(data.size());  category=new IntList(data.size());  for (  DataPoint dp : data) {    int[] newCats=new int[dp.numCategoricalValues() - 1];    int[] prevCats=dp.getCategoricalValues();    int k=0;    for (int i=0; i < prevCats.length; i++) {      if (i != predicting)       newCats[k++]=prevCats[i];    }    DataPoint newPoint=new DataPoint(dp.getNumericalValues(),newCats,categories,dp.getWeight());    datapoints.add(newPoint);    category.add(prevCats[predicting]);  }  generateGenericNumericNames();}  }
class C{  public Anonymous_complexAttribute_2_ createAnonymous_complexAttribute_2_(){  Anonymous_complexAttribute_2_Impl anonymous_complexAttribute_2_=new Anonymous_complexAttribute_2_Impl();  return anonymous_complexAttribute_2_;}  }
class C{  public static double safeSqrt(double x){  return (x < 0 ? -Math.sqrt(-x) : Math.sqrt(x));}  }
class C{  @Override protected SystemMemberCache createSystemMemberCache(GemFireVM vm) throws org.apache.geode.admin.AdminException {  if (managedSystemMemberCache == null) {    managedSystemMemberCache=new SystemMemberCacheJmxImpl(vm);  }  return managedSystemMemberCache;}  }
class C{  private void init(){  setTitle("New SOM Network");  somPanel=new SOMPropertiesPanel(networkPanel,SOMPropsPanelType.CREATE_NETWORK);  tabLogic.add(somPanel);  layoutPanel=new MainLayoutPanel(false,this);  layoutPanel.setCurrentLayout(SOMGroup.DEFAULT_LAYOUT);  tabLayout.add(layoutPanel);  tabbedPane.addTab("Logic",tabLogic);  tabbedPane.addTab("Layout",layoutPanel);  setContentPane(tabbedPane);  Action helpAction=new ShowHelpAction(somPanel.getHelpPath());  addButton(new JButton(helpAction));}  }
class C{  public void testSchemasIgnoreSubsetWithFile() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setFilePrefix("filter/testSchemasIgnoreSubsetWithFile");  filterHelper.setFilter(rf);  verifyStmtAccept(filterHelper,0,null,"create database foobar1");  verifyStmtAccept(filterHelper,1,"foo","drop table foo.test2");  verifyStmtAccept(filterHelper,2,"foo","delete from bar2.test where id=2");  verifyStmtIgnore(filterHelper,3,"foo","delete from foo.test where id=2");  verifyStmtIgnore(filterHelper,4,"foo","create table foobar2.foobar1 (id int)");  verifyStmtIgnore(filterHelper,5,"foo","drop database bar234");  filterHelper.done();}  }
class C{  private void handlePreparedStatementClusterError(Throwable e){  int hndNum=prepStatementHandlersCnt.incrementAndGet();  try {synchronized (prepStatementHandlersCnt) {      if (hndNum != 0) {        log.warning("Prepared statement cluster error detected, another thread already fixed the problem",e);        return;      }      log.warning("Prepared statement cluster error detected, refreshing Cassandra session",e);      refresh();      log.warning("Cassandra session refreshed");    }  }  finally {    if (hndNum == 0)     prepStatementHandlersCnt.set(-1);  }}  }
class C{  protected void importZipResult(final BuildTaskDescriptor descriptor,final BuildFinishedCallback buildFinishedCallback,final Notification notification,final String errorMessage){  Link downloadLink=null;  List<Link> links=descriptor.getLinks();  for (  Link link : links) {    if (link.getRel().equalsIgnoreCase("download result")) {      downloadLink=link;    }  }  if (downloadLink != null) {    ImportProject importProject=dtoFactory.createDto(ImportProject.class).withSource(dtoFactory.createDto(Source.class).withProject(dtoFactory.createDto(ImportSourceDescriptor.class).withLocation(downloadLink.getHref()).withType("zip")));    projectServiceClient.importProject(appContext.getCurrentProject().getProjectDescription().getPath(),true,importProject,new ImportResponseAsyncRequestCallback(buildFinishedCallback,descriptor,notification,errorMessage));  } else {    if (buildFinishedCallback != null) {      buildFinishedCallback.onFinished(descriptor.getStatus());    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.FEATURE_CALL__OWNER:    setOwner((Expression)newValue);  return;case ExpressionsPackage.FEATURE_CALL__FEATURE:setFeature((EObject)newValue);return;case ExpressionsPackage.FEATURE_CALL__OPERATION_CALL:setOperationCall((Boolean)newValue);return;case ExpressionsPackage.FEATURE_CALL__ARGS:getArgs().clear();getArgs().addAll((Collection<? extends Expression>)newValue);return;case ExpressionsPackage.FEATURE_CALL__ARRAY_SELECTOR:getArraySelector().clear();getArraySelector().addAll((Collection<? extends Expression>)newValue);return;case ExpressionsPackage.FEATURE_CALL__ARRAY_ACCESS:setArrayAccess((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public int lastIndexOfAnyBut(final CharSet s,final int from){  if (from < 0)   return -1;  final char[] a=array;  int i=length();  if (s.size() == 0)   return from < i ? from : i - 1;  if (from < i)   i=from + 1;  while (i-- > 0)   if (!s.contains(a[i]))   return i;  return -1;}  }
class C{  private IFolder createFolderHandle(IContainer container,String folderName){  return container.getFolder(new Path(folderName));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static String extractGroupName(LocoNetMessage m){  StringBuilder gr_name=new StringBuilder();  int gr_msb1;  int gr_msb2;  gr_msb1=m.getElement(4) & LnConstants.RE_DPLX_MAX_NOT_OPC;  gr_msb2=m.getElement(9) & LnConstants.RE_DPLX_MAX_NOT_OPC;  gr_name.append(Character.toString((char)((m.getElement(5) & LnConstants.RE_DPLX_MAX_NOT_OPC) + ((gr_msb1 & LnConstants.RE_DPLX_MSB1_BIT) << LnConstants.RE_DPLX_BUMP_MSB1_BIT))));  gr_name.append(Character.toString((char)((m.getElement(6) & LnConstants.RE_DPLX_MAX_NOT_OPC) + ((gr_msb1 & LnConstants.RE_DPLX_MSB2_BIT) << LnConstants.RE_DPLX_BUMP_MSB2_BIT))));  gr_name.append(Character.toString((char)((m.getElement(7) & LnConstants.RE_DPLX_MAX_NOT_OPC) + ((gr_msb1 & LnConstants.RE_DPLX_MSB3_BIT) << LnConstants.RE_DPLX_BUMP_MSB3_BIT))));  gr_name.append(Character.toString((char)((m.getElement(8) & LnConstants.RE_DPLX_MAX_NOT_OPC) + ((gr_msb1 & LnConstants.RE_DPLX_MSB4_BIT) << LnConstants.RE_DPLX_BUMP_MSB4_BIT))));  gr_name.append(Character.toString((char)((m.getElement(10) & LnConstants.RE_DPLX_MAX_NOT_OPC) + ((gr_msb2 & LnConstants.RE_DPLX_MSB1_BIT) << LnConstants.RE_DPLX_BUMP_MSB1_BIT))));  gr_name.append(Character.toString((char)((m.getElement(11) & LnConstants.RE_DPLX_MAX_NOT_OPC) + ((gr_msb2 & LnConstants.RE_DPLX_MSB2_BIT) << LnConstants.RE_DPLX_BUMP_MSB2_BIT))));  gr_name.append(Character.toString((char)((m.getElement(12) & LnConstants.RE_DPLX_MAX_NOT_OPC) + ((gr_msb2 & LnConstants.RE_DPLX_MSB3_BIT) << LnConstants.RE_DPLX_BUMP_MSB3_BIT))));  gr_name.append(Character.toString((char)((m.getElement(13) & LnConstants.RE_DPLX_MAX_NOT_OPC) + ((gr_msb2 & LnConstants.RE_DPLX_MSB4_BIT) << LnConstants.RE_DPLX_BUMP_MSB4_BIT))));  return gr_name.toString();}  }
class C{  public static synchronized TokenInfo createToken(TokenType tokenType){  Token token=new Token(tokenType.getModuleType(),tokenType.getId());  token.setModuleId(tokenType.getModuleType());  token.setReadOnly(tokenType.isReadOnly());  token.setSerialNumber(tokenType.getSerialNumber());  token.setLabel(tokenType.getLabel());  token.setSlotIndex(tokenType.getSlotIndex());  token.setFriendlyName(getDefaultFriendlyName(tokenType));  token.setBatchSigningEnabled(tokenType.isBatchSigningEnabled());  token.setAvailable(true);  currentTokens.add(token);  return token.toDTO();}  }
class C{  public static String decodeASCII(final byte[] key,final int off,final int len){  final byte[] b=new byte[len];  System.arraycopy(key,off,b,0,len);  for (int i=0; i < len; i++) {    b[i]=decodeByte(b[i]);  }  try {    return new String(b,"US-ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void frequencyChanged(FrequencyChangeEvent event){switch (event.getEvent()) {case NOTIFICATION_SAMPLE_RATE_CHANGE:    mBandwidth=event.getValue().intValue();  mLabelSizeMonitor.update();break;case NOTIFICATION_FREQUENCY_CHANGE:mFrequency=event.getValue().longValue();mLabelSizeMonitor.update();break;default :break;}mVisibleChannels.clear();mVisibleChannels.addAll(mChannelModel.getChannelsInFrequencyRange(getMinFrequency(),getMaxFrequency()));}  }
class C{  public GridItemView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  loadThemeAttributes(attrs,defStyleAttr,0);}  }
class C{  public final void mul(Quaternion q1){  this.mul(this,q1);}  }
class C{  @Override public void streamReply(WebSocket session,HeadersAmp headers,String to,long qid,int sequence,List<Object> values,Throwable exn,boolean isComplete) throws IOException {}  }
class C{  public static ContextInitializer newContext(){  return new ContextInitializer();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.TYPE_CAST_EXPRESSION__OPERAND:    return getOperand();case ExpressionsPackage.TYPE_CAST_EXPRESSION__TYPE:  if (resolve)   return getType();return basicGetType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isDocumentAllDeclarationsProcessed(int documentHandle){  return false;}  }
class C{  public int compare(String x,String y){  if (x == null && y == null)   return 0;  if (x == null && y != null)   return 1;  if (x != null && y == null)   return -1;  return x.compareTo(y);}  }
class C{  public boolean isDefault(){  return base.equals(BaseEnvironment.DEFAULT) && environmentChanges.isEmpty();}  }
class C{  public static boolean isSystemApplication(PackageManager packageManager,String packageName){  if (packageManager == null || packageName == null || packageName.length() == 0) {    return false;  }  try {    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);  } catch (  PackageManager.NameNotFoundException e) {    e.printStackTrace();  }  return false;}  }
class C{  public BroadcastJobListener(String name){  if (name == null) {    throw new IllegalArgumentException("Listener name cannot be null!");  }  this.name=name;  listeners=new LinkedList<JobListener>();}  }
class C{  public static void start(SystemComponent component){  component.lifecycle().start(component);}  }
class C{  public void testSpringConfig() throws Exception {  GridClientConfiguration cfg=new FileSystemXmlApplicationContext(GRID_CLIENT_SPRING_CONFIG.toString()).getBean(GridClientConfiguration.class);  assertEquals(Arrays.asList("127.0.0.1:11211"),new ArrayList<>(cfg.getServers()));  assertNull(cfg.getSecurityCredentialsProvider());  Collection<GridClientDataConfiguration> dataCfgs=cfg.getDataConfigurations();  assertEquals(1,dataCfgs.size());  GridClientDataConfiguration dataCfg=dataCfgs.iterator().next();  assertEquals("partitioned",dataCfg.getName());  assertNotNull(dataCfg.getPinnedBalancer());  assertEquals(GridClientRandomBalancer.class,dataCfg.getPinnedBalancer().getClass());  assertNotNull(dataCfg.getAffinity());  assertEquals(GridClientPartitionAffinity.class,dataCfg.getAffinity().getClass());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr()))   BigBrother.clearWatched(a);  return null;}  }
class C{  public int size(){  return super.size();}  }
class C{  public BlockingRequestSender(StunStack stunStack,TransportAddress localAddress){  this.stunStack=stunStack;  this.localAddress=localAddress;}  }
class C{  public static SimpleReact parallelBuilder(final int parallelism){  return SimpleReact.builder().executor(new ForkJoinPool(parallelism)).async(true).retrier(new RetryBuilder().parallelism(parallelism)).build();}  }
class C{  private void match(String token) throws ParserException, IOException {  match(StreamTokenizer.TT_WORD,token);}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public void addImage(String imagePath,Sector sector) throws IOException, WWRuntimeException {  AVList params=new AVListImpl();  if (null != sector)   params.setValue(AVKey.SECTOR,sector);  DataRaster raster=this.openDataRaster(imagePath,params);  final BufferedImage image=this.getBufferedImage(raster);  if (null != raster && image != null) {    Sector rasterSector=raster.getSector();    rasterSector=(null == rasterSector) ? sector : rasterSector;    addImage(imagePath,image,rasterSector);  } else {    String message=Logging.getMessage("generic.ImageReadFailed",imagePath);    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  protected void deliveryConnectClosed(){  if (mConnectListener != null)   mConnectListener.onConnectClosed(this);}  }
class C{  public Class<? extends INTValueConverter> bindINTValueConverter(){  return RegExINTValueConverter.class;}  }
class C{  public VNXeCommandResult attachLunSnap(String snapId){  _logger.info("attaching lun snap:",snapId);  LunSnapRequests req=new LunSnapRequests(_khClient);  return req.attachLunSnapSync(snapId);}  }
class C{  public void handleDecode(Result rawResult,Bundle bundle){  inactivityTimer.onActivity();  beepManager.playBeepSoundAndVibrate();  bundle.putInt("width",mCropRect.width());  bundle.putInt("height",mCropRect.height());  bundle.putString("result",rawResult.getText());  Intent intent=new Intent();  intent.putExtras(bundle);  setResult(RESULT_OK,intent);  finish();}  }
class C{  @Override protected TextBlock createLabel(Comparable category,float width,RectangleEdge edge,Graphics2D g2){  TextBlock label=super.createLabel(category,width,edge,g2);  String s=(String)this.sublabels.get(category);  if (s != null) {    if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {      TextLine line=new TextLine(s,this.sublabelFont,this.sublabelPaint);      label.addLine(line);    } else     if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {      TextLine line=label.getLastLine();      if (line != null) {        line.addFragment(new TextFragment("  " + s,this.sublabelFont,this.sublabelPaint));      }    }  }  return label;}  }
class C{  public void testSetF3(){  boolean f3=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF3(f3);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup1 needs to be implemented if invoked");}  }
class C{  public FactorAnalysisEditor(FactorAnalysisRunner runner){  super(runner,"Factor Analysis");}  }
class C{  @Override public void removeConnectionEventListener(ConnectionEventListener listener){  debugCode("removeConnectionEventListener(listener);");  listeners.remove(listener);}  }
class C{  public boolean isStayAlive(){  return stayAlive;}  }
class C{  private boolean rContainsRMInstruction(ProgramBlock pb,String varName){  if (pb instanceof WhileProgramBlock) {    WhileProgramBlock tmp=(WhileProgramBlock)pb;    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;  } else   if (pb instanceof IfProgramBlock) {    IfProgramBlock tmp=(IfProgramBlock)pb;    for (    ProgramBlock c : tmp.getChildBlocksIfBody())     if (rContainsRMInstruction(c,varName))     return true;    for (    ProgramBlock c : tmp.getChildBlocksElseBody())     if (rContainsRMInstruction(c,varName))     return true;  } else   if (pb instanceof ForProgramBlock) {    ForProgramBlock tmp=(ForProgramBlock)pb;    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;  } else   if (pb instanceof FunctionProgramBlock) {  } else {    for (    Instruction inst : pb.getInstructions()) {      String instStr=inst.toString();      if (instStr.contains("rmfilevar" + Lop.OPERAND_DELIMITOR + varName) || instStr.contains("rmvar" + Lop.OPERAND_DELIMITOR + varName)) {        return true;      }    }  }  return false;}  }
class C{  public void addChild(Edge v){  m_children.addElement(v);}  }
class C{  public void stop(){  final String methodName="stop";synchronized (lifecycle) {    log.fine(CLASS_NAME,methodName,"800");    if (running) {      running=false;      if (!Thread.currentThread().equals(sendThread)) {        try {          while (sendThread.isAlive()) {            clientState.notifyQueueLock();            sendThread.join(100);          }        } catch (        InterruptedException ex) {        }      }    }    sendThread=null;    log.fine(CLASS_NAME,methodName,"801");  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final boolean hasWaiters(ConditionObject condition){  if (!owns(condition))   throw new IllegalArgumentException("Not owner");  return condition.hasWaiters();}  }
class C{  public static float nearestSegmentPointSquareDistance(Vector3 nearest,Vector3 start,Vector3 end,Vector3 point){  nearest.set(start);  float abX=end.x - start.x;  float abY=end.y - start.y;  float abZ=end.z - start.z;  float abLen2=abX * abX + abY * abY + abZ * abZ;  if (abLen2 > 0) {    float t=((point.x - start.x) * abX + (point.y - start.y) * abY + (point.z - start.z) * abZ) / abLen2;    float s=MathUtils.clamp(t,0,1);    nearest.x+=abX * s;    nearest.y+=abY * s;    nearest.z+=abZ * s;  }  return nearest.dst2(point);}  }
class C{  public void speakButtonClicked(MenuItem menuItem){  startVoiceRecognitionActivity();}  }
class C{  public DefaultListCellRenderer(){  super("");  setCellRenderer(true);  setEndsWith3Points(false);  focusComponent.setUIID("ListRendererFocus");  focusComponent.setFocus(true);  setUIID("ListRenderer");}  }
class C{  public JMenuItem createJMenuItem(String name,String specialization) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JMenuItem result=new JMenuItem(getSpecializedString(name + TEXT_SUFFIX,specialization));  initializeJMenuItem(result,name,specialization);  return result;}  }
class C{  public boolean haveChangedSince(ReplicaSets priorState){  if (priorState.replicaSetCount() != this.replicaSetCount()) {    return true;  }  if (this.replicaSetsByName.size() != priorState.replicaSetsByName.size()) {    return true;  }  if (!this.replicaSetsByName.isEmpty()) {    if (!this.replicaSetsByName.keySet().equals(priorState.replicaSetsByName.keySet())) {      return true;    }  }  return this.nonReplicaSets.equals(priorState.nonReplicaSets) ? false : true;}  }
class C{  public boolean isStartConnected(){  return startConnected;}  }
class C{  public static boolean isOnVector(double x0,double y0,double x1,double y1,double x2,double y2){  double left=isLeftOfLine(x0,y0,x1,y1,x2,y2);  return left * left < EPSILON;}  }
class C{  private SettingsProvider(Context context){  mContext=context;  mPreferences=PreferenceManager.getDefaultSharedPreferences(context);}  }
class C{  public void write(boolean bytesOK,byte buf[],String str) throws IOException {  ensureOpen();  if (bufferSize == 0 && bytesOK) {    initByteOut();    if (implementsByteWriter) {      write(buf,0,buf.length);      return;    }  }  write(str);}  }
class C{  @Override public void axisChanged(AxisChangeEvent event){  Object source=event.getSource();  if (source.equals(this.rangeAxis) || source.equals(this.domainAxis)) {    ColorBar cba=this.colorBar;    if (this.colorBar.getAxis().isAutoRange()) {      cba.getAxis().configure();    }  }  super.axisChanged(event);}  }
class C{  protected String doIt() throws Exception {  MRfQ rfq=new MRfQ(getCtx(),p_C_RfQ_ID,get_TrxName());  if (rfq.get_ID() == 0)   throw new IllegalArgumentException("No RfQ found");  log.info("doIt - " + rfq);  if (rfq.getC_BPartner_ID() == 0 || rfq.getC_BPartner_Location_ID() == 0)   throw new Exception("No Business Partner/Location");  MBPartner bp=new MBPartner(getCtx(),rfq.getC_BPartner_ID(),get_TrxName());  MOrder order=new MOrder(getCtx(),0,get_TrxName());  order.setIsSOTrx(true);  if (p_C_DocType_ID != 0)   order.setC_DocTypeTarget_ID(p_C_DocType_ID); else   order.setC_DocTypeTarget_ID();  order.setBPartner(bp);  order.setC_BPartner_Location_ID(rfq.getC_BPartner_Location_ID());  order.setSalesRep_ID(rfq.getSalesRep_ID());  if (rfq.getDateWorkComplete() != null)   order.setDatePromised(rfq.getDateWorkComplete());  order.saveEx();  MRfQLine[] lines=rfq.getLines();  for (int i=0; i < lines.length; i++) {    MRfQLine line=lines[i];    MRfQLineQty[] qtys=line.getQtys();    for (int j=0; j < qtys.length; j++) {      MRfQLineQty qty=qtys[j];      if (qty.isActive() && qty.isOfferQty()) {        MOrderLine ol=new MOrderLine(order);        ol.setM_Product_ID(line.getM_Product_ID(),qty.getC_UOM_ID());        ol.setDescription(line.getDescription());        ol.setQty(qty.getQty());        BigDecimal price=qty.getOfferAmt();        if (price == null || price.signum() == 0) {          price=qty.getBestResponseAmt();          if (price == null || price.signum() == 0) {            price=Env.ZERO;            log.warning(" - BestResponse=0 - " + qty);          } else {            BigDecimal margin=qty.getMargin();            if (margin == null || margin.signum() == 0)             margin=rfq.getMargin();            if (margin != null && margin.signum() != 0) {              margin=margin.add(ONEHUNDRED);              price=price.multiply(margin).divide(ONEHUNDRED,2,BigDecimal.ROUND_HALF_UP);            }          }        }        ol.setPrice(price);        ol.saveEx();      }    }  }  rfq.setC_Order_ID(order.getC_Order_ID());  rfq.saveEx();  return order.getDocumentNo();}  }
class C{  public Vector3 prj(Matrix4 matrix){  float l_mat[]=matrix.val;  float l_w=x * l_mat[Matrix4.M30] + y * l_mat[Matrix4.M31] + z * l_mat[Matrix4.M32] + l_mat[Matrix4.M33];  return this.set((x * l_mat[Matrix4.M00] + y * l_mat[Matrix4.M01] + z * l_mat[Matrix4.M02] + l_mat[Matrix4.M03]) / l_w,(x * l_mat[Matrix4.M10] + y * l_mat[Matrix4.M11] + z * l_mat[Matrix4.M12] + l_mat[Matrix4.M13]) / l_w,(x * l_mat[Matrix4.M20] + y * l_mat[Matrix4.M21] + z * l_mat[Matrix4.M22] + l_mat[Matrix4.M23]) / l_w);}  }
class C{  public void bindConstants(Allocation a,int slot){  if (slot < 0 || slot >= mConstants.length) {    throw new IllegalArgumentException("Slot ID out of range.");  }  if (a != null && a.getType().getID(mRS) != mConstants[slot].getID(mRS)) {    throw new IllegalArgumentException("Allocation type does not match slot type.");  }  int id=a != null ? a.getID(mRS) : 0;  mRS.nProgramBindConstants(getID(mRS),slot,id);}  }
class C{  public static boolean isFileOlder(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileOlder(file,date.getTime());}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public AuthScope(final String host,int port){  this(host,port,ANY_REALM,ANY_SCHEME);}  }
class C{  public TaskList createSnapshotSessionOfApplication(URI id,VolumeGroupSnapshotSessionCreateParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_CREATE_SNAPSHOT_SESSION_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  public File positiveExamplesByClassName(String className){  return positiveExamplesByName.get(className);}  }
class C{  protected void deinitialize(){  super.deinitialize();  for (Enumeration e=accessKeys.keys(); e.hasMoreElements(); ) {    int keyCode=((Integer)e.nextElement()).intValue();    getComponentForm().removeKeyListener(keyCode,this);  }}  }
class C{  private void init(FileLocation loc,String defaultEnc) throws IOException {  if (loc == null) {    this.loc=FileLocation.create(DEFAULT_FILE_NAME);    charSet=defaultEnc == null ? getDefaultEncoding() : defaultEnc;    setLineSeparator(System.getProperty("line.separator"));  } else {    load(loc,defaultEnc);  }  if (this.loc.isLocalAndExists()) {    File file=new File(this.loc.getFileFullPath());    lastSaveOrLoadTime=file.lastModified();    setReadOnly(!file.canWrite());  } else {    lastSaveOrLoadTime=LAST_MODIFIED_UNKNOWN;    setReadOnly(false);  }  setDirty(false);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public boolean isData(){  return label.isData();}  }
class C{  public static void showError(final Component parent,final String msg){  CMessageBox.showError(parent,msg);}  }
class C{  @Override public V waitForValue() throws ExecutionException {  if (computedReference == UNSET) {    boolean interrupted=false;    try {synchronized (this) {        while (computedReference == UNSET) {          try {            wait();          } catch (          InterruptedException ie) {            interrupted=true;          }        }      }    }  finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }  return computedReference.waitForValue();}  }
class C{  public String globalInfo(){  return "Cluster data using the k means algorithm. Can use either " + "the Euclidean distance (default) or the Manhattan distance." + " If the Manhattan distance is used, then centroids are computed "+ "as the component-wise median rather than mean."+ " For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public ModelAndView(Map<String,Object> model,String view){  super();  this.model=model;  this.view=view;}  }
class C{  public boolean userExpanded(){  return NotificationData.getUserExpanded(row);}  }
class C{  public static void registerConfig(){  AbstractJMSProvider.registerConfig();  DefaultMessageFactory.registerConfig();  if (!Config.isInvalid()) {    Class<? extends Object> dfClazz=Config.parms.getClazz("df");    Config.registerAnother(dfClazz);    jmsProvider=AbstractJMSProvider.getInstance();  }}  }
class C{  public static void fillMatrix_1D(int N,double[] m){  Random r=new Random(2);  for (int i=0; i < N; i++) {    m[i]=r.nextDouble();  }}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length > 2) {    String modes=BaseHandler.mergeParams(params,2);    service.getConnection(server.getId()).setMode(params[1],modes);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  @HLEFunction(nid=0x74AE582A,version=150,checkInsideInterrupt=true) public int __sceSasGetEnvelopeHeight(int sasCore,int voice){  checkSasAndVoiceHandlesGood(sasCore,voice);  return voices[voice].getEnvelope().height;}  }
class C{  public JSONException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public void clearLevel(){  _started=false;  if (_levelController != null) {    unregisterUpdateHandler(_levelController);    _levelController.dispose();    _levelController=null;  }  if (_gameLevel != null) {    _gameLevel.dispose();    _gameLevel=null;  }  if (_orientationProvider != null) {    _orientationProvider.stop();  }  if (_physicsWorld != null) {    _physicsWorld.dispose();  }  detachChildren();  if (_ballSprite != null)   _ballSprite.dispose();  if (_timeText != null)   _timeText.dispose();  if (_timerBar != null)   _timerBar.dispose();  if (_sinkHole != null)   _sinkHole.dispose();  if (_spawnHole != null)   _spawnHole.dispose();  if (_flash != null)   _flash.dispose();  _flashAnimationCallback=null;  _spawnHoleAnimationCallback=null;  if (_background != null)   _background.getSprite().dispose();}  }
class C{  public TodoObject(){  super();}  }
class C{  public boolean supportsCrossJoin(){  return supportedJOINs[JoinRowSet.CROSS_JOIN];}  }
class C{  public static byte[] readBytesAndClose(InputStream in,int length) throws IOException {  try {    if (length <= 0) {      length=Integer.MAX_VALUE;    }    int block=Math.min(Constants.IO_BUFFER_SIZE,length);    ByteArrayOutputStream out=new ByteArrayOutputStream(block);    copy(in,out,length);    return out.toByteArray();  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    in.close();  }}  }
class C{  public void displayAvatar(MXSession session,ImageView imageView){  if (null != mAvatarBitmap) {    imageView.setImageBitmap(mAvatarBitmap);  } else {    if ((null != mUserId) && (android.util.Patterns.EMAIL_ADDRESS.matcher(mUserId).matches())) {      imageView.setImageBitmap(VectorUtils.getAvatar(imageView.getContext(),VectorUtils.getAvatarColor(mUserId),"@@",true));    } else {      if (TextUtils.isEmpty(mUserId)) {        VectorUtils.loadUserAvatar(imageView.getContext(),session,imageView,mAvatarUrl,mDisplayName,mDisplayName);      } else {        if (TextUtils.equals(mUserId,mDisplayName) || TextUtils.isEmpty(mAvatarUrl)) {          IMXStore store=session.getDataHandler().getStore();          if (null != store) {            User user=store.getUser(mUserId);            if (null != user) {              if (TextUtils.equals(mUserId,mDisplayName) && !TextUtils.isEmpty(user.displayname)) {                mDisplayName=user.displayname;              }              if (null == mAvatarUrl) {                mAvatarUrl=user.avatar_url;              }            }          }        }        VectorUtils.loadUserAvatar(imageView.getContext(),session,imageView,mAvatarUrl,mUserId,mDisplayName);      }    }  }}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply r){  ((Dcc4PcListener)client).reply((Dcc4PcReply)r);}  }
class C{  public double[] computeLocalEntropy2OfPreviousObservations(){  return computeLocalEntropyFromPreviousObservations(destObservations,2,true);}  }
class C{  public HttpReceiveSocket(Socket socket,InputStream in,OutputStream out) throws IOException {  super(socket,in,out);  this.in=new HttpInputStream(in != null ? in : socket.getInputStream());  this.out=(out != null ? out : socket.getOutputStream());}  }
class C{  private void activateChilds(){  for (  GridSynchronizer s : synchronizerList) {    s.activateChild();  }}  }
class C{  public int fillBuffer() throws IOException {  if (!readBuffer())   return -1; else   return _readLength;}  }
class C{  public static <T>Iterator<T> toUnique(Iterator<T> self){  return toUnique(self,(Comparator<T>)null);}  }
class C{  public SquarifiedTreeMapLayout(String group){  this(group,0);}  }
class C{  public List<String> finish() throws IOException {  List<String> response=new ArrayList<>();  writer.append(LINE_FEED).flush();  writer.append("--" + boundary + "--").append(LINE_FEED);  writer.close();  int status=httpConn.getResponseCode();  if (status == HttpURLConnection.HTTP_OK) {    BufferedReader reader=new BufferedReader(new InputStreamReader(httpConn.getInputStream()));    @SuppressWarnings("UnusedAssignment") String line=null;    while ((line=reader.readLine()) != null) {      response.add(line);    }    reader.close();    httpConn.disconnect();  } else {    throw new IOException("Server returned non-OK status: " + status);  }  return response;}  }
class C{  public boolean isUILocked(){  return m_isLocked;}  }
class C{  public static int hashObject(Object o){  return o == null ? 0 : o.hashCode();}  }
class C{  public StringMemberValue(String str,ConstPool cp){  super('s',cp);  setValue(str);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected AxisSpace calculateAxisSpace(Graphics2D g2,Rectangle2D plotArea){  AxisSpace space=new AxisSpace();  PlotOrientation orientation=getOrientation();  AxisSpace fixed=getFixedDomainAxisSpace();  if (fixed != null) {    if (orientation == PlotOrientation.HORIZONTAL) {      space.setLeft(fixed.getLeft());      space.setRight(fixed.getRight());    } else     if (orientation == PlotOrientation.VERTICAL) {      space.setTop(fixed.getTop());      space.setBottom(fixed.getBottom());    }  } else {    CategoryAxis categoryAxis=getDomainAxis();    RectangleEdge categoryEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);    if (categoryAxis != null) {      space=categoryAxis.reserveSpace(g2,this,plotArea,categoryEdge,space);    } else {      if (getDrawSharedDomainAxis()) {        space=getDomainAxis().reserveSpace(g2,this,plotArea,categoryEdge,space);      }    }  }  Rectangle2D adjustedPlotArea=space.shrink(plotArea,null);  int n=this.subplots.size();  int totalWeight=0;  for (int i=0; i < n; i++) {    CategoryPlot sub=(CategoryPlot)this.subplots.get(i);    totalWeight+=sub.getWeight();  }  this.subplotAreas=new Rectangle2D[n];  double x=adjustedPlotArea.getX();  double y=adjustedPlotArea.getY();  double usableSize=0.0;  if (orientation == PlotOrientation.HORIZONTAL) {    usableSize=adjustedPlotArea.getWidth() - this.gap * (n - 1);  } else   if (orientation == PlotOrientation.VERTICAL) {    usableSize=adjustedPlotArea.getHeight() - this.gap * (n - 1);  }  for (int i=0; i < n; i++) {    CategoryPlot plot=(CategoryPlot)this.subplots.get(i);    if (orientation == PlotOrientation.HORIZONTAL) {      double w=usableSize * plot.getWeight() / totalWeight;      this.subplotAreas[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());      x=x + w + this.gap;    } else     if (orientation == PlotOrientation.VERTICAL) {      double h=usableSize * plot.getWeight() / totalWeight;      this.subplotAreas[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);      y=y + h + this.gap;    }    AxisSpace subSpace=plot.calculateRangeAxisSpace(g2,this.subplotAreas[i],null);    space.ensureAtLeast(subSpace);  }  return space;}  }
class C{  public static byte[] encodeBase64Chunked(byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  public void addAttribute(TagMetaDataAttr attr){  attrs.add(attr);}  }
class C{  public FloatingActionButton createSubFAB(char icon,String text){  FloatingActionButton sub=new FloatingActionButton(icon,text,2.8f);  if (subMenu == null) {    subMenu=new ArrayList<FloatingActionButton>();  }  subMenu.add(sub);  return sub;}  }
class C{  public void reset(BNetwork network){  if (System.identityHashCode(this) != System.identityHashCode(network)) {    nodes.clear();    chanceNodes.clear();    utilityNodes.clear();    actionNodes.clear();    for (    BNode node : network.getNodes()) {      addNode(node);    }  }}  }
class C{  @Provides @Config("rdeUploadLockTimeout") public static Duration provideRdeUploadLockTimeout(){  return Duration.standardMinutes(30);}  }
class C{  public Boolean isNestedHVSupported(){  return nestedHVSupported;}  }
class C{  protected void creationFinished(Figure createdFigure){  if (createdFigure.isSelectable()) {    getView().addToSelection(createdFigure);  }  if (isToolDoneAfterCreation()) {    fireToolDone();  }}  }
class C{  public double eval(double params[]){  return (Math.exp(-Math.pow(params[0],2.0)));}  }
class C{  public LoggingFraction formatter(String name,String pattern){  patternFormatter(new PatternFormatter(name).pattern(pattern));  return this;}  }
class C{  protected Status nativeReadStatus() throws IOException {  Status status=readStatus();  if (status != null && !PureJavaMode.isPure() && !OSProcess.exists(status.pid)) {    status=createStatus(status,SHUTDOWN);  }  return status;}  }
class C{  private long completedSize(long target){  if (completed)   return thisNodeSize; else {    SliceTask<P_IN,P_OUT> left=leftChild;    SliceTask<P_IN,P_OUT> right=rightChild;    if (left == null || right == null) {      return thisNodeSize;    } else {      long leftSize=left.completedSize(target);      return (leftSize >= target) ? leftSize : leftSize + right.completedSize(target);    }  }}  }
class C{  @Override protected BitmapDrawable doInBackground(Void... params){  if (debug) {    Log.d(TAG,"doInBackground - starting work");  }  final String dataString=String.valueOf(mData) + "#width" + reqWidth+ "#height"+ reqHeight;  Bitmap bitmap=null;  BitmapDrawable drawable=null;synchronized (mPauseWorkLock) {    while (mPauseWork && !isCancelled()) {      try {        mPauseWorkLock.wait();      } catch (      InterruptedException e) {      }    }  }  if (mImageCache != null && !isCancelled() && getAttachedImageView() != null && !mExitTasksEarly) {    bitmap=mImageCache.getBitmapFromDiskCache(dataString);  }  if (bitmap == null && !isCancelled() && getAttachedImageView() != null && !mExitTasksEarly) {    bitmap=processBitmap((String)mData,reqWidth,reqHeight,imageDecodedListener);  }  if (bitmap != null) {    drawable=new BitmapDrawable(mResources,bitmap);    if (mImageCache != null) {      mImageCache.addBitmapToCache(dataString,drawable);    }  }  if (debug) {    Log.d(TAG,"doInBackground - finished work");  }  return drawable;}  }
class C{  private void initFilesList(){  this.fileToAdd.addAll(FilesUtils.searchrecursively(systemFolder,".apk"));  this.fileToAdd.addAll(FilesUtils.searchrecursively(systemFolder,".jar"));  bar.setMinimum(0);  bar.setMaximum(this.fileToAdd.size());}  }
class C{  public String objectName(){  return objectName;}  }
class C{  private void fireFocusSync(FocusListener[] array,Component c){  if (c.hasFocus()) {    int alen=array.length;    for (int iter=0; iter < alen; iter++) {      array[iter].focusGained(c);    }  } else {    int alen=array.length;    for (int iter=0; iter < alen; iter++) {      array[iter].focusLost(c);    }  }}  }
class C{  public void removeCustomParseFilter(ParseFilter filter){  validateParameterNonNull(filter,"filter");  this.customParseFilters.remove(filter);}  }
class C{  public boolean isGrumpy(){  return (grumpy != null);}  }
class C{  @Before public void registerIdlingResource(){  Espresso.registerIdlingResources(MyApplication.getInstance().getCountingIdlingResource());}  }
class C{  public void testBlockOnEvent() throws Throwable {  createServers(3);  AtomicLong index=new AtomicLong();  CopycatClient client=createClient();  client.onEvent("test",null);  client.submit(new TestEvent(true)).thenAccept(null);  await(10000,2);}  }
class C{  public final boolean addSymbol(UniqueString name,SymbolNode symbol){  SymbolNode currentBinding=resolveSymbol(name);  if (currentBinding == symbol) {    return true;  }  if (currentBinding == null) {    topContext.addSymbolToContext(name,symbol);    return true;  }  if (symbol.getKind() == FormalParamKind || symbol.getKind() == BoundSymbolKind || currentBinding.getKind() != symbol.getKind() || currentBinding.getArity() != symbol.getArity()) {    errors.addError(symbol.getTreeNode().getLocation(),"Multiply-defined symbol '" + name + "': this definition or declaration conflicts \nwith the one at "+ currentBinding.getTreeNode().getLocation().toString()+ ".");    return false;  }  if (currentBinding.getTreeNode().getLocation().source().equals("--TLA+ BUILTINS--")) {    errors.addError(symbol.getTreeNode().getLocation(),"Symbol " + name + " is a built-in operator, and cannot be redefined.");    return false;  }  if (symbol.sameOriginallyDefinedInModule(currentBinding)) {    return true;  }  errors.addWarning(symbol.getTreeNode().getLocation(),"Multiple declarations or definitions for symbol " + name + ".  \nThis duplicates the one at "+ currentBinding.getTreeNode().getLocation().toString()+ ".");  return true;}  }
class C{  public SimpleSelectZero(long[] bits,long length){  this(LongArrayBitVector.wrap(bits,length));}  }
class C{  public double nextDouble(){  return nextDouble(alpha,beta);}  }
class C{  public int format(long val,byte[] buf,int off,int len){  if (val == Long.MIN_VALUE) {    if (len > MAX_LONG_LENGTH) {      return format("-9223372036854775808",buf,off,len);    } else {      truncationFiller(buf,off,len);      return off + len;    }  }  long pos=Math.abs(val);  int ndig=1;  long dmax=ByteFormatter.NUMBER_BASE;  while (ndig < MAX_LONG_LENGTH && pos >= dmax) {    ndig++;    dmax*=ByteFormatter.NUMBER_BASE;  }  if (val < 0) {    ndig++;  }  if (ndig > len || ndig > buf.length - off) {    truncationFiller(buf,off,len);    return off + len;  }  off+=ndig;  int xoff=off - 1;  buf[xoff]=(byte)'0';  boolean last=pos == 0;  while (!last) {    int giga=(int)(pos % LONG_TO_INT_MODULO);    pos/=LONG_TO_INT_MODULO;    last=pos == 0;    for (int i=0; i < MAXIMUM_SINGLE_DIGIT_INTEGER; i++) {      buf[xoff]=ByteFormatter.DIGITS[giga % ByteFormatter.NUMBER_BASE];      xoff--;      giga/=ByteFormatter.NUMBER_BASE;      if (last && giga == 0) {        break;      }    }  }  if (val < 0) {    buf[xoff]=(byte)'-';  }  return off;}  }
class C{  void incUsage(){  incUsage(1);}  }
class C{  public PdfRendererBuilder withUri(String uri){  this._uri=uri;  return this;}  }
class C{  public KeyDestroyingDoor(final String key,final String clazz){  this(key,clazz,1);}  }
class C{  public InputStream openStreamRaw(Iterator mimeTypes) throws IOException {  return data.openStreamRaw(userAgent,mimeTypes);}  }
class C{  public XStreamException(final String message){  this(message,null);}  }
class C{  @Inject(method="addChatMessage",at=@At("RETURN")) public void addNewlines(ITextComponent component,CallbackInfo ci){  this.buffer.append('\n');}  }
class C{  public boolean isPassiva(){  String accountType=getAccountType();  return (ACCOUNTTYPE_Liability.equals(accountType) || ACCOUNTTYPE_OwnerSEquity.equals(accountType));}  }
class C{  @Override public int hashCode(){  return (this.getValue() == null) ? 17 : this.getValue().hashCode();}  }
class C{  public TermsByQueryRequest(String... indices){  super(indices);}  }
class C{  public void testResolver() throws Exception {  String delim="aaaaaaaa";  byte[] delimBytes=delim.getBytes(UTF8);  byte[] data=array(F.t(wrap(1),8),F.t(delimBytes,1),F.t(wrap(1),8));  assertSplit(0,4,0,16,data,delim);  assertSplit(0,8,0,16,data,delim);  assertSplit(0,12,0,16,data,delim);  assertSplit(0,16,0,16,data,delim);  assertSplit(0,20,0,24,data,delim);  assertSplit(0,24,0,24,data,delim);  assertSplitNull(2,2,data,delim);  assertSplitNull(2,6,data,delim);  assertSplitNull(2,10,data,delim);  assertSplitNull(2,14,data,delim);  assertSplit(2,18,16,8,data,delim);  assertSplit(2,22,16,8,data,delim);  assertSplitNull(8,4,data,delim);  assertSplitNull(8,8,data,delim);  assertSplit(8,12,16,8,data,delim);  assertSplit(8,16,16,8,data,delim);  assertSplitNull(10,2,data,delim);  assertSplitNull(10,6,data,delim);  assertSplit(10,10,16,8,data,delim);  assertSplit(10,14,16,8,data,delim);  assertSplit(16,4,16,8,data,delim);  assertSplit(16,8,16,8,data,delim);  assertSplitNull(18,2,data,delim);  assertSplitNull(18,6,data,delim);}  }
class C{  protected void continueOutputProcessingJoin(boolean doOutput,boolean forceUpdate){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".continueOutputProcessingJoin");  }  continueOutputProcessingView(doOutput,forceUpdate);}  }
class C{  public void advanceInputWatermark(Instant newInputWatermark) throws Exception {  timerInternals.advanceInputWatermark(TimerCallback.NO_OP,newInputWatermark);}  }
class C{  public static void createServerCache(Boolean enableWan,Boolean setPublisher,Boolean enableConflation,Boolean enableAsyncConflation) throws Exception {  NewRegionAttributesDUnitTest test=new NewRegionAttributesDUnitTest();  cache=test.createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  factory.setEnableConflation(enableConflation.booleanValue());  factory.setEnableAsyncConflation(enableAsyncConflation.booleanValue());  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);}  }
class C{  public Boolean isChecksumEnabled(){  return checksumEnabled;}  }
class C{  public static User parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  User object=new User();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"user".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (User)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","applicationUserId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setApplicationUserId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","email").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setEmail(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","locale").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setLocale(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","roleIdentifier").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setRoleIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","userFirstName").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setUserFirstName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","userId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setUserId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","userLastName").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setUserLastName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[ROUNDS + 1];  for (int i=ROUNDS; i > 0; i-=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i - 1];  }  xr^=P[0];  Bits32ToBytes(xr,dst,dstIndex);  Bits32ToBytes(xl,dst,dstIndex + 4);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public FastFloatBuffer append(float[] array){  return append(array,0,array.length);}  }
class C{  public void analyse(String folderXML,String folderMatrices,int maxActivities,int maxDuration){  withinMatrix=new SparseDoubleMatrix3D(24,maxActivities + 1,maxDuration + 1);  throughMatrix=new SparseDoubleMatrix3D(24,maxActivities + 1,maxDuration + 1);  log.info("Checking for the availability of chain characteristic matrices.");  File f1=new File(folderMatrices + "/" + studyArea+ "_WithinChainMatrix.txt");  File f2=new File(folderMatrices + "/" + studyArea+ "_ThroughChainMatrix.txt");  if (f1.exists() && f2.exists()) {    log.info("   Chain matrix files found.");    this.readMatrixFiles(folderMatrices,studyArea);  } else {    log.info("   No chain matrix files found. Analyse XML vehicle files.");    List<File> files=getFiles(folderXML);    log.info("Analysing vehicle chains from " + files.size() + " XML files.");    MyXmlConverter mxc=new MyXmlConverter(true);    int fileCounter=0;    int fileMultiplier=1;    for (    File file : files) {      CommercialVehicle v=null;      Object o=mxc.readObjectFromFile(file.getAbsolutePath());      if (o instanceof CommercialVehicle) {        v=(CommercialVehicle)o;      } else {        throw new RuntimeException("Could not convert XML source file " + file.getName() + " to type CommercialVehicle.");      }      SparseDoubleMatrix3D m=null;      if (withinList.contains(Integer.valueOf(v.getVehID()))) {        m=withinMatrix;      } else       if (throughList.contains(Integer.valueOf(v.getVehID()))) {        m=throughMatrix;      }      if (m != null) {        for (        Chain chain : v.getChains()) {          GregorianCalendar chainStartTime=chain.getActivities().get(0).getEndTime();          Integer chainStartHour=chainStartTime.get(Calendar.HOUR_OF_DAY);          if (chainStartHour == null) {            throw new RuntimeException("Finding index in 3D matrix: Chain start time is null.");          }          Integer numberOfActivities=Math.min(maxActivities,chain.getActivities().size() - 2);          if (numberOfActivities == null) {            throw new RuntimeException("Finding index in 3D matrix: Number of activities is null.");          }          GregorianCalendar chainEndTime=chain.getActivities().get(chain.getActivities().size() - 1).getStartTime();          Long durationMilliseconds=chainEndTime.getTimeInMillis() - chainStartTime.getTimeInMillis();          Integer durationHours=Math.min(maxDuration,(int)(durationMilliseconds / (1000 * 60 * 60)));          if (durationHours == null) {            throw new RuntimeException("Finding index in 3D matrix: Chain duration is null.");          }          double dummy=m.getQuick(chainStartHour,numberOfActivities,durationHours);          m.setQuick(chainStartHour,numberOfActivities,durationHours,dummy + 1);        }      }      if (++fileCounter == fileMultiplier) {        log.info("   Vehicles processed: " + fileCounter);        fileMultiplier*=2;      }    }    log.info("   Vehicles processed: " + fileCounter + " (Done)");    this.writeMatrixFile(folderMatrices + studyArea + "_WithinChainMatrix.txt",withinMatrix);    this.writeMatrixFile(folderMatrices + studyArea + "_ThroughChainMatrix.txt",throughMatrix);  }}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  private static Object castResult(Object result){  if (result == null) {    return null;  }  JsonNode node=JSONHelper.readJsonNode(result.toString());  return JSONHelper.transform(node.get("result"));}  }
class C{  public TemplateException(){  super();}  }
class C{  private static void from(Cursor c,Synced synced){  int col=c.getColumnIndex(_ID);  if (col >= 0) {    synced.localId=c.getLong(col);  }  col=c.getColumnIndex(GLOBAL_ID);  if (col >= 0) {    synced.globalId=c.getLong(col);  }  col=c.getColumnIndex(STATUS_ID);  if (col >= 0) {    synced.status=Status.get(c.getInt(col));  }  col=c.getColumnIndex(DIRTY);  if (col >= 0) {    synced.dirty=c.getInt(col) == 1;  }  col=c.getColumnIndex(VERSION);  if (col >= 0) {    synced.version=c.getLong(col);  }}  }
class C{  public void addMessages(List<? extends Message> messages){  if (SHOW_LOGS)   Logger.v(TAG,">> addMessages, lock " + messages);  mQueueLock.lock(TAG);  mPlayerMessagesQueue.addAll(messages);  mQueueLock.notify(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"<< addMessages, unlock " + messages);  mQueueLock.unlock(TAG);}  }
class C{  public void deleteKey(String key){  if (containsKey(key)) {    this.iter.setKey(key);    if (this.iter.hasNext()) {      this.iter.next();      this.iter.remove();    }  }}  }
class C{  public void addField(String name,String value) throws IOException {  if (name == null) {    throw new IllegalArgumentException("Name cannot be null or empty.");  }  if (formData.length() > 0) {    formData.append("&");  }  formData.append(name + "=");  if (value != null) {    formData.append(URLEncoder.encode(value,charset));  }}  }
class C{  @Nullable public static IgfsListingEntry readListingEntry(BinaryRawReader in){  if (in.readBoolean()) {    IgniteUuid id=BinaryUtils.readIgniteUuid(in);    boolean dir=in.readBoolean();    return new IgfsListingEntry(id,dir);  } else   return null;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();case VERSION:return isSetVersion();}throw new IllegalStateException();}  }
class C{  public List<IComment> appendComment(final String commentText) throws CouldntSaveDataException, CouldntLoadDataException {  List<IComment> comments=Lists.newArrayList();  try {    comments=m_instruction.appendGlobalComment(commentText);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }  for (  final IInstructionListener listener : m_listeners) {    listener.appendedComment(this,Iterables.getLast(comments));  }  return comments;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UserRecord rec=getUserRecord(stack);  return rec == null ? Pooler.EMPTY_STRING_ARRAY : rec.getNames();}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (!(object instanceof BoundedSize)) {    return false;  }  BoundedSize size=(BoundedSize)object;  return basis.equals(size.basis) && (lowerBound == null && size.lowerBound == null || lowerBound != null && lowerBound.equals(size.lowerBound)) && (upperBound == null && size.upperBound == null || upperBound != null && upperBound.equals(size.upperBound));}  }
class C{  public static BigDecimal bomPriceList(int p_M_Product_ID,int p_M_PriceList_Version_ID) throws SQLException {  return bomPrice(p_M_Product_ID,p_M_PriceList_Version_ID,"PriceList");}  }
class C{  @Override public boolean add(final T ref){  if (nscan > 0 && scanHead(nscan,ref)) {    return false;  }  return super.add(ref);}  }
class C{  @Override public String toString(){  return Arrays.toString(this.getArray());}  }
class C{  public void postCreate(Engine.Create create,Throwable ex){}  }
class C{  public void accountTimes(StatementMetricHandle handle,long cpu,long wall,int numInput){  StatementMetricArray array=groupMetrics[handle.getGroupNum()];  array.getRwLock().acquireReadLock();  try {    StatementMetric metric=array.getAddMetric(handle.getIndex());    metric.addCPUTime(cpu);    metric.addWallTime(wall);    metric.addNumInput(numInput);  }  finally {    array.getRwLock().releaseReadLock();  }}  }
class C{  public void disableCurlLogging(){  curlConfiguration=null;}  }
class C{  protected double findSplitNumericNumeric(int index) throws Exception {  double bestVal=Double.MAX_VALUE, currVal, currCutPoint;  int numMissing=0;  double[] sumsSquares=new double[3], sumOfWeights=new double[3];  double[][] bestDist=new double[3][1];  double totalSum=0, totalSumOfWeights=0;  for (int i=0; i < m_Instances.numInstances(); i++) {    Instance inst=m_Instances.instance(i);    if (!inst.isMissing(index)) {      m_Distribution[1][0]+=inst.classValue() * inst.weight();      sumsSquares[1]+=inst.classValue() * inst.classValue() * inst.weight();      sumOfWeights[1]+=inst.weight();    } else {      m_Distribution[2][0]+=inst.classValue() * inst.weight();      sumsSquares[2]+=inst.classValue() * inst.classValue() * inst.weight();      sumOfWeights[2]+=inst.weight();      numMissing++;    }    totalSumOfWeights+=inst.weight();    totalSum+=inst.classValue() * inst.weight();  }  if (totalSumOfWeights <= 0) {    return bestVal;  }  m_Instances.sort(index);  for (int i=0; i < m_Instances.numInstances() - (numMissing + 1); i++) {    Instance inst=m_Instances.instance(i);    Instance instPlusOne=m_Instances.instance(i + 1);    m_Distribution[0][0]+=inst.classValue() * inst.weight();    sumsSquares[0]+=inst.classValue() * inst.classValue() * inst.weight();    sumOfWeights[0]+=inst.weight();    m_Distribution[1][0]-=inst.classValue() * inst.weight();    sumsSquares[1]-=inst.classValue() * inst.classValue() * inst.weight();    sumOfWeights[1]-=inst.weight();    if (inst.value(index) < instPlusOne.value(index)) {      currCutPoint=(inst.value(index) + instPlusOne.value(index)) / 2.0;      currVal=variance(m_Distribution,sumsSquares,sumOfWeights);      if (currVal < bestVal) {        m_SplitPoint=currCutPoint;        bestVal=currVal;        for (int j=0; j < 3; j++) {          if (sumOfWeights[j] > 0) {            bestDist[j][0]=m_Distribution[j][0] / sumOfWeights[j];          } else {            bestDist[j][0]=totalSum / totalSumOfWeights;          }        }      }    }  }  m_Distribution=bestDist;  return bestVal;}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof Map.Entry == false) {    return false;  }  Map.Entry entry=(Map.Entry)obj;  Object entryKey=entry.getKey();  Object entryValue=entry.getValue();  if ((entryKey == null) || (entryValue == null)) {    return false;  }  return parent.isEqualKey(entryKey,getKey()) && parent.isEqualValue(entryValue,getValue());}  }
class C{  public XPathFactoryConfigurationException(String message){  super(message);}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public BatchFraction jdbcJobRepository(final String name,final DatasourcesFraction datasource){  return jdbcJobRepository(new JDBCJobRepository<>(name).dataSource(datasource.getKey()));}  }
class C{  public Key minKey(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  return keys[pq[d] + d];}  }
class C{  public String inlineCSS(){  StringBuilder buf=new StringBuilder();  for (  Pair<String,String> pair : statements) {    buf.append(pair.getFirst());    buf.append(':');    buf.append(pair.getSecond());    buf.append(';');  }  return buf.toString();}  }
class C{  public boolean write(IOFSwitch sw,OFMessage msg) throws IOException {  return write(sw,msg,false);}  }
class C{  public SVGInputFormat(){  this(new DefaultSVGFigureFactory());}  }
class C{  public static Byte[] toReferenceType(byte[] primArr){  Byte[] refArr=new Byte[primArr.length];  for (int i=0; i < primArr.length; i++)   refArr[i]=new Byte(primArr[i]);  return refArr;}  }
class C{  public ConstantSize(double value,Unit unit){  this.value=value;  this.unit=unit;}  }
class C{  @SafeVarargs public static <U>SimpleReactStream<U> firstOf(final SimpleReactStream<U>... futureStreams){  final List<Tuple2<SimpleReactStream<U>,QueueReader>> racers=Stream.of(futureStreams).map(null).collect(Collectors.toList());  while (true) {    for (    final Tuple2<SimpleReactStream<U>,Queue.QueueReader> q : racers) {      if (q.v2.notEmpty()) {        EagerFutureStreamFunctions.closeOthers(q.v2.getQueue(),racers.stream().map(null).collect(Collectors.toList()));        EagerFutureStreamFunctions.closeOthers(q.v1,racers.stream().map(null).collect(Collectors.toList()));        return q.v1.fromStream(q.v2.getQueue().stream(q.v1.getSubscription()));      }    }    LockSupport.parkNanos(1l);  }}  }
class C{  public NioDatagramConnector(int processorCount){  super(new DefaultDatagramSessionConfig(),NioProcessor.class,processorCount);}  }
class C{  public static void swap2Bytes(byte[] bytes,int offset){  swapBytesAt(bytes,offset + 0,offset + 1);}  }
class C{  public boolean canDisplayGivenName(String name){  for (int i=0; i < glyphNames.length; i++) {    if (glyphNames[i] != null && glyphNames[i].equals(name) && languageMatches(glyphLangs[i]) && orientationMatches(glyphOrientations[i])) {      return true;    }  }  return false;}  }
class C{  protected void append(Node n){  if (table == null) {    table=new Node[11];  } else   if (size == table.length - 1) {    Node[] t=new Node[table.length * 2 + 1];    System.arraycopy(table,0,t,0,size);    table=t;  }  table[size++]=n;}  }
class C{  public int hashCode(){  return getName().toUpperCase().hashCode();}  }
class C{  public static boolean processRunning(Process p){  try {    int exitVal=p.exitValue();    return false;  } catch (  IllegalThreadStateException e) {    return true;  }}  }
class C{  public static void tagView(final AbstractSQLProvider provider,final INaviView view,final CTag tag) throws CouldntSaveDataException {  checkArguments(provider,view);  Preconditions.checkNotNull(tag,"IE00615: Tag argument can not be null");  Preconditions.checkArgument(tag.inSameDatabase(provider),"IE00616: Tag is not part of this database");  final String query=String.format("insert into %s(view_id, tag_id) values(%d, %d)",CTableNames.TAGGED_VIEWS_TABLE,view.getConfiguration().getId(),tag.getId());  final CConnection connection=provider.getConnection();  try {    connection.executeUpdate(query,true);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public void stopMovie(){synchronized (simulation.state.schedule) {    if (movieMaker == null)     return;    canvas.stopCapturing();    if (!movieMaker.stop()) {      Object[] options={"Drat"};      JOptionPane.showOptionDialog(this,"Your movie did not write to disk\ndue to a spurious JMF movie generation bug.","JMF Movie Generation Bug",JOptionPane.OK_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);    }    movieMaker=null;    if (movieButton != null) {      movieButton.setIcon(Display2D.MOVIE_OFF_ICON);      movieButton.setPressedIcon(Display2D.MOVIE_OFF_ICON_P);    }  }}  }
class C{  private Validators(){}  }
class C{  public TimeTableXYDataset(){  this(TimeZone.getDefault(),Locale.getDefault());}  }
class C{  public boolean removeAgent(IMovingAgent agent){  boolean status=agents.remove(agent);  if (agent instanceof Hive)   hives.remove(agent);  if (agent instanceof FoodSource)   foodSources.remove(agent);  if (agent instanceof Obstacle)   obstacles.remove(agent);  if (status) {    double radius=agent.getSphereRadius();    if (radius >= maxAgentSphereRadius) {      maxAgentSphereRadius=computeMaxAgentSphereRadius();    }  }  return status;}  }
class C{  public CodesStar(){}  }
class C{  public ParameterTypeText(String key,String description,TextType type,boolean optional){  super(key,description,optional);  setTextType(type);}  }
class C{  public static void assertEqual(float expected,float actual,double maxRelativeError){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ")");  }  if (expected != actual) {    assertRelativeErrorNotExceeded(expected,actual,maxRelativeError);  }}  }
class C{  public static VMRequest fixedExtent(Extent extent,boolean top){  if (VM.HEAP_LAYOUT_64BIT) {    return common64Bit(top);  }  return new VMRequest(REQUEST_EXTENT,Address.zero(),extent,0f,top);}  }
class C{  boolean show(Container c,int x,int y,int w,int h){  return getPaintManager().show(c,x,y,w,h);}  }
class C{  protected String[] diff_halfMatch(String text1,String text2){  if (Diff_Timeout <= 0) {    return null;  }  String longtext=text1.length() > text2.length() ? text1 : text2;  String shorttext=text1.length() > text2.length() ? text2 : text1;  if (longtext.length() < 4 || shorttext.length() * 2 < longtext.length()) {    return null;  }  String[] hm1=diff_halfMatchI(longtext,shorttext,(longtext.length() + 3) / 4);  String[] hm2=diff_halfMatchI(longtext,shorttext,(longtext.length() + 1) / 2);  String[] hm;  if (hm1 == null && hm2 == null) {    return null;  } else   if (hm2 == null) {    hm=hm1;  } else   if (hm1 == null) {    hm=hm2;  } else {    hm=hm1[4].length() > hm2[4].length() ? hm1 : hm2;  }  if (text1.length() > text2.length()) {    return hm;  } else {    return new String[]{hm[2],hm[3],hm[0],hm[1],hm[4]};  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesDate1String=null;  String inputFilesDate2String=null;  String[] imageFilesDate1=null;  String[] imageFilesDate2=null;  String outputHeader=null;  String outputHeaderDirection=null;  WhiteboxRasterInfo[] date1Images=null;  WhiteboxRasterInfo[] date2Images=null;  int nCols=0;  int nRows=0;  double z;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data1;  double[][] data2;  double noData=-32768;  double dist, direction;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesDate1String=args[0];  inputFilesDate2String=args[1];  outputHeader=args[2];  outputHeaderDirection=args[3];  try {    imageFilesDate1=inputFilesDate1String.split(";");    imageFilesDate2=inputFilesDate2String.split(";");    numImages=imageFilesDate1.length;    if (imageFilesDate2.length != numImages) {      showFeedback("The number of specified images must be the same for both dates.");      return;    }    date1Images=new WhiteboxRasterInfo[numImages];    date2Images=new WhiteboxRasterInfo[numImages];    double[] date1NoDataValues=new double[numImages];    double[] date2NoDataValues=new double[numImages];    for (i=0; i < numImages; i++) {      date1Images[i]=new WhiteboxRasterInfo(imageFilesDate1[i]);      date2Images[i]=new WhiteboxRasterInfo(imageFilesDate2[i]);      if (i == 0) {        nCols=date1Images[i].getNumberColumns();        nRows=date1Images[i].getNumberRows();        noData=date1Images[i].getNoDataValue();        if (date2Images[i].getNumberColumns() != nCols || date2Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      } else {        if (date1Images[i].getNumberColumns() != nCols || date1Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }        if (date2Images[i].getNumberColumns() != nCols || date2Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      date1NoDataValues[i]=date1Images[i].getNoDataValue();      date2NoDataValues[i]=date2Images[i].getNoDataValue();    }    data1=new double[numImages][];    data2=new double[numImages][];    double[] directionArray=new double[numImages];    for (i=0; i < numImages; i++) {      directionArray[i]=Math.pow(2,i);    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFilesDate1[0],WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    WhiteboxRaster outputDir=new WhiteboxRaster(outputHeaderDirection,"rw",imageFilesDate1[0],WhiteboxRaster.DataType.INTEGER,0);    outputDir.setDataScale(DataScale.CATEGORICAL);    outputDir.setPreferredPalette("qual.pal");    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data1[i]=date1Images[i].getRowValues(row);        data2[i]=date2Images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        dist=0;        direction=0;        a=0;        for (i=0; i < numImages; i++) {          if (data1[i][col] != date1NoDataValues[i] && data2[i][col] != date2NoDataValues[i]) {            z=(data2[i][col] - data1[i][col]);            dist+=z * z;            a++;            if (z >= 0) {              direction+=directionArray[i];            }          }        }        if (a > 0) {          output.setValue(row,col,Math.sqrt(dist));          outputDir.setValue(row,col,direction);        } else {          output.setValue(row,col,noData);          outputDir.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    for (i=0; i < numImages; i++) {      date1Images[i].close();      date2Images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    outputDir.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputDir.addMetadataEntry("Created on " + new Date());    outputDir.close();    returnData(outputHeader);    returnData(outputHeaderDirection);    String ret="Key For Interpreting The CVA Direction Image:\n\n\tDirection of Change (+ or -)\nValue";    for (i=0; i < numImages; i++) {      ret+="\tBand" + (i + 1);    }    ret+="\n";    String line="";    for (a=0; a < (2 * Math.pow(2,(numImages - 1))); a++) {      line=a + "\t";      for (i=0; i < numImages; i++) {        if (BitOps.checkBit(a,i)) {          line+="+\t";        } else {          line+="-\t";        }      }      ret+=line + "\n";    }    returnData(ret);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ObjectName manageCache() throws AdminException, MalformedObjectNameException {  return Helper.manageCache(this);}  }
class C{  public ESResultSet parse(SearchHits hits,Heading head,long total,int rowLength,boolean useLateral,long offset,ESResultSet previous) throws SQLException {  Map<String,Heading> headMap=buildHeaders(head);  ESResultSet rs;  if (previous != null) {    rs=previous;  } else {    rs=new ESResultSet(head,(int)total,rowLength);    rs.setOffset((int)offset);  }  for (  SearchHit hit : hits) {    this.parse(hit.getSource(),hit,rs,useLateral,"",headMap);  }  if (useLateral) {    ArrayList<Column> tmpCols=new ArrayList<Column>();    for (    Column col : rs.getHeading().columns()) {      if (rs.getHeading().hasLabelStartingWith(col.getColumn() + ".")) {        tmpCols.add(col);      }    }    for (    Column col : tmpCols)     col.setVisible(false);  } else {    for (    Column col : rs.getHeading().columns())     if (col.getColumn().contains("."))     col.setVisible(false);  }  return rs;}  }
class C{  public static double volumeUnion(SpatialComparable box1,SpatialComparable box2){  final int dim=assertSameDimensionality(box1,box2);  double volume=1.;  for (int i=0; i < dim; i++) {    final double min=Math.min(box1.getMin(i),box2.getMin(i));    final double max=Math.max(box1.getMax(i),box2.getMax(i));    volume*=(max - min);  }  return volume;}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  public JSAValue(String re){  super(re);}  }
class C{  public static ObjectAnimator ofInt(Object target,String propertyName,int... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setIntValues(values);  return anim;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.593 -0500",hash_original_method="C7818769967A7B7D6BCF0765E44CE567",hash_generated_method="44AA204A9050B6BC0FC326F2F3444824") public void parent(String name,String parentName){  ElementType child=getElementType(name);  ElementType parent=getElementType(parentName);  if (child == null) {    throw new Error("No child " + name + " for parent "+ parentName);  }  if (parent == null) {    throw new Error("No parent " + parentName + " for child "+ name);  }  child.setParent(parent);}  }
class C{  public static ReferenceRegions regions(IOIterator<? extends SequenceNameLocus> reader) throws IOException {  final ReferenceRegions regions=new ReferenceRegions();  regions.add(reader);  return regions;}  }
class C{  private static List<ClassNode> keepLowestCommonInterfaces(List<ClassNode> fromA,List<ClassNode> fromB){  if (fromA == null || fromB == null)   return EMPTY_CLASSNODE_LIST;  Set<ClassNode> common=new HashSet<ClassNode>(fromA);  common.retainAll(fromB);  List<ClassNode> result=new ArrayList<ClassNode>(common.size());  for (  ClassNode classNode : common) {    addMostSpecificInterface(classNode,result);  }  return result;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.339 -0500",hash_original_method="FBBB3C346433F99D88D798BC2E1AE3CE",hash_generated_method="FBBB3C346433F99D88D798BC2E1AE3CE") void reportError(String message) throws SAXException {  if (errorHandler != null)   errorHandler.error(makeException(message));}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  static void addGetterIfAvaliable(Object obj,String getter,NamedList<Object> info){  try {    String n=Character.toUpperCase(getter.charAt(0)) + getter.substring(1);    Method m=obj.getClass().getMethod("get" + n);    m.setAccessible(true);    Object v=m.invoke(obj,(Object[])null);    if (v != null) {      info.add(getter,v);    }  } catch (  Exception ex) {  }}  }
class C{  public void loadArgs(final int arg,final int count){  int index=getArgIndex(arg);  for (int i=0; i < count; ++i) {    Type t=argumentTypes[arg + i];    loadInsn(t,index);    index+=t.getSize();  }}  }
class C{  public String toString(){  return "null";}  }
class C{  private void buildTree(PdfObject structTreeRootObj){  root=doc.createElement("TaggedPDF-doc");  doc.appendChild(root);  traverseContentTree(structTreeRootObj);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public EaseInOut(float a,float p){  this.a=a;  this.p=p;}  }
class C{  @Override protected void doAction(){  closeAllKeyStores();}  }
class C{  @Override public boolean updateData(){  setConnectedFlag(true);  Random r=new Random(System.currentTimeMillis());  totalHeapSize=(long)Math.abs(r.nextInt(3200 - 2048) + 2048);  usedHeapSize=(long)Math.abs(r.nextInt(2048));  writePerSec=Math.abs(r.nextInt(100));  subscriptionCount=Math.abs(r.nextInt(100));  registeredCQCount=(long)Math.abs(r.nextInt(100));  txnCommittedCount=Math.abs(r.nextInt(100));  txnRollbackCount=Math.abs(r.nextInt(100));  runningFunctionCount=Math.abs(r.nextInt(100));  clusterId=Math.abs(r.nextInt(100));  writePerSecTrend.add(writePerSec);  diskWritesRate=writePerSec;  garbageCollectionCount=(long)Math.abs(r.nextInt(100));  garbageCollectionTrend.add(garbageCollectionCount);  readPerSec=Math.abs(r.nextInt(100));  readPerSecTrend.add(readPerSec);  diskReadsRate=readPerSec;  queriesPerSec=Math.abs(r.nextInt(100));  queriesPerSecTrend.add(queriesPerSec);  loadPerSec=Math.abs(r.nextInt(100));  totalHeapSize=totalHeapSize;  totalBytesOnDisk=totalHeapSize;  totalBytesOnDiskTrend.add(totalBytesOnDisk);  memoryUsageTrend.add(usedHeapSize);  throughoutWritesTrend.add(writePerSec);  throughoutReadsTrend.add(readPerSec);  memberCount=0;  if (membersHMap.size() == 0) {    membersHMap.put("pnq-visitor1",initializeMember("pnq-visitor1(Launcher_Manager-1099-13-40-24-5368)-24357","pnq-visitor1",true,true,true,true));    for (int i=2; i <= 8; i++) {      if ((i % 2) == 0) {        membersHMap.put("pnq-visitor" + i,initializeMember("pnq-visitor" + i + "(Launcher_Server-1099-13-40-24-5368)-24357","pnq-visitor" + i,false,false,true,false));      } else {        if ((i % 3) == 0) {          membersHMap.put("pnq-visitor" + i,initializeMember("pnq-visitor" + i + "(Launcher_Server-1099-13-40-24-5368)-24357","pnq-visitor" + i,false,false,false,false));        } else {          membersHMap.put("pnq-visitor" + i,initializeMember("pnq-visitor" + i + "(Launcher_Server-1099-13-40-24-5368)-24357","pnq-visitor" + i,false,true,true,true));        }      }    }    for (    Entry<String,Member> memberSet : membersHMap.entrySet()) {      HashMap<String,Cluster.Region> memberRegions=new HashMap<String,Cluster.Region>();      HashMap<String,Cluster.Client> memberClientsHM=new HashMap<String,Cluster.Client>();      Random randomGenerator=new Random();      int randomInt=(randomGenerator.nextInt(15)) + 10;      int regionExists=0;      for (int y=0; y < randomInt; y++) {        Region region=initMemberRegion(y,memberSet.getValue().getName());        if (clusterRegionMap.entrySet().size() > 0) {          for (          Region clusterRegion : clusterRegionMap.values()) {            if ((region.name).equals(clusterRegion.name)) {              clusterRegion.memberName.add(memberSet.getValue().getName());              clusterRegion.memberCount=clusterRegion.memberCount + 1;              regionExists=1;              break;            }          }          if (regionExists == 0) {            addClusterRegion(region.getFullPath(),region);          }        } else {          addClusterRegion(region.getFullPath(),region);        }        memberRegions.put(region.getFullPath(),region);        totalRegionCount=clusterRegionMap.values().size();      }      membersHMap.get(memberSet.getKey()).setMemberRegions(memberRegions);      if (memberSet.getValue().isCache) {        Client client=initMemberClient(0,memberSet.getValue().getHost());        memberClientsHM.put(client.getId(),client);        randomInt=randomGenerator.nextInt(10);        for (int y=1; y < randomInt; y++) {          Client newClient=initMemberClient(y,memberSet.getValue().getHost());          memberClientsHM.put(newClient.getId(),newClient);        }        membersHMap.get(memberSet.getKey()).updateMemberClientsHMap(memberClientsHM);        clientConnectionCount=clientConnectionCount + membersHMap.get(memberSet.getKey()).getMemberClientsHMap().size();      }    }  }  for (  Entry<String,Member> memberSet : membersHMap.entrySet()) {    HashMap<String,Cluster.Region> memberRegions=new HashMap<String,Cluster.Region>();    Random randomGenerator=new Random();    int randomInt=(randomGenerator.nextInt(5)) + 5;    int regionExists=0;    for (int y=0; y < randomInt; y++) {      Region region=initMemberRegion(y,memberSet.getValue().getName());      if (clusterRegionMap.entrySet().size() > 0) {        for (        Region clusterRegion : clusterRegionMap.values()) {          if ((region.name).equals(clusterRegion.name)) {            clusterRegion.memberName.add(memberSet.getValue().getName());            clusterRegion.memberCount=clusterRegion.memberCount + 1;            regionExists=1;            break;          }        }        if (regionExists == 0) {          addClusterRegion(region.getFullPath(),region);        }      } else {        addClusterRegion(region.getFullPath(),region);      }      memberRegions.put(region.getFullPath(),region);      totalRegionCount=clusterRegionMap.values().size();    }    membersHMap.get(memberSet.getKey()).setMemberRegions(memberRegions);  }  wanInformation.clear();  int wanInfoSize=Math.abs(r.nextInt(10));  wanInfoSize++;  for (int i=0; i < wanInfoSize; i++) {    String name="Mock Cluster" + i;    Boolean value=false;    if (i % 2 == 0) {      value=true;    }    wanInformation.put(name,value);  }  memberCount=membersHMap.size();  totalHeapSize=(long)0;  for (  Entry<String,Member> memberSet : membersHMap.entrySet()) {    refresh(membersHMap.get(memberSet.getKey()));    Member member=membersHMap.get(memberSet.getKey());    totalHeapSize+=member.currentHeapSize;  }  for (  Region region : clusterRegionMap.values()) {    region.getsRate=(Math.abs(r.nextInt(100))) + 1;    region.putsRate=(Math.abs(r.nextInt(100))) + 1;    region.getsPerSecTrend.add(region.getsRate);    region.putsPerSecTrend.add(region.putsRate);    region.diskReadsRate=(Math.abs(r.nextInt(100))) + 1;    region.diskWritesRate=(Math.abs(r.nextInt(100))) + 1;    region.diskReadsPerSecTrend.add(region.diskReadsRate);    region.diskWritesPerSecTrend.add(region.diskWritesRate);  }  if (clusterStatementMap.size() < 500) {    for (int i=1; i <= 500; ++i) {      if (LOGGER.infoEnabled()) {        LOGGER.info("Adding statement = " + i);      }      updateClusterStatement(i);    }  } else   if (clusterStatementMap.size() == 510) {    for (Iterator itSt=clusterStatementMap.values().iterator(); itSt.hasNext(); ) {      Cluster.Statement statement=(Cluster.Statement)itSt.next();      statement.setNumTimesCompiled((statement.getNumTimesCompiled() + 5));      statement.setNumExecution((statement.getNumExecution() + 5));      statement.setNumExecutionsInProgress((statement.getNumExecutionsInProgress() + 5));      statement.setNumTimesGlobalIndexLookup((statement.getNumTimesGlobalIndexLookup() + 5));      statement.setNumRowsModified((statement.getNumRowsModified() + 5));    }  } else   if (clusterStatementMap.size() < 510) {    Cluster.Statement statement=new Cluster.Statement();    Random randomGenerator=new Random();    String statementDefinition="select * from member where member_name = member-510" + " and lastUpdatedTime = '" + new Date().toString() + "'";    Integer intVal=randomGenerator.nextInt(5);    statement.setQueryDefinition(statementDefinition);    statement.setNumTimesCompiled(intVal.longValue());    statement.setNumExecution(intVal.longValue());    statement.setNumExecutionsInProgress(intVal.longValue());    statement.setNumTimesGlobalIndexLookup(intVal.longValue());    statement.setNumRowsModified(intVal.longValue());    statement.setParseTime(randomGenerator.nextLong());    statement.setBindTime(randomGenerator.nextLong());    statement.setOptimizeTime(randomGenerator.nextLong());    statement.setRoutingInfoTime(randomGenerator.nextLong());    statement.setGenerateTime(randomGenerator.nextLong());    statement.setTotalCompilationTime(randomGenerator.nextLong());    statement.setExecutionTime(randomGenerator.nextLong());    statement.setProjectionTime(randomGenerator.nextLong());    statement.setTotalExecutionTime(randomGenerator.nextLong());    statement.setRowsModificationTime(randomGenerator.nextLong());    statement.setqNNumRowsSeen(intVal.longValue());    statement.setqNMsgSendTime(randomGenerator.nextLong());    statement.setqNMsgSerTime(randomGenerator.nextLong());    statement.setqNRespDeSerTime(randomGenerator.nextLong());    addClusterStatement(statementDefinition,statement);  }  return true;}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  Position line=node.getPosition();  String name=node.getName();  if (reader instanceof Repeater) {    Repeater repeat=(Repeater)reader;    return repeat.read(node,value);  }  throw new PersistenceException("Element '%s' is already used with %s at %s",name,label,line);}  }
class C{  public ThreeState isAuthenticatedFor(@NotNull VirtualFile vf,@Nullable ClientFactory factory){  final WorkingCopy wcCopy=myRootsToWorkingCopies.getWcRoot(vf);  if (wcCopy == null)   return ThreeState.UNSURE;  final boolean haveCancellation=getStateFor(wcCopy.getUrl());  if (haveCancellation)   return ThreeState.NO;  final Boolean keptResult=myCopiesPassiveResults.get(wcCopy.getUrl());  if (Boolean.TRUE.equals(keptResult))   return ThreeState.YES;  if (Boolean.FALSE.equals(keptResult))   return ThreeState.NO;  final boolean calculatedResult=factory == null ? passiveValidation(myVcs.getProject(),wcCopy.getUrl()) : passiveValidation(factory,wcCopy.getUrl());  myCopiesPassiveResults.put(wcCopy.getUrl(),calculatedResult);  return calculatedResult ? ThreeState.YES : ThreeState.NO;}  }
class C{  public static void removeUse(RegisterOperand regOp){  Register reg=regOp.getRegister();  if (SUPRESS_DU_FOR_PHYSICALS && reg.isPhysical())   return;  if (regOp == reg.useList) {    reg.useList=reg.useList.getNext();  } else {    RegisterOperand prev=reg.useList;    RegisterOperand curr=prev.getNext();    while (curr != regOp) {      prev=curr;      curr=curr.getNext();    }    prev.setNext(curr.getNext());  }  reg.useCount--;  if (DEBUG) {    VM.sysWrite("removed a use " + regOp.instruction + "\n");    printUses(reg);  }}  }
class C{  @Override public DefaultAsciiArray withTitle(String... columnsTitle){  this.titles=Arrays.asList(columnsTitle);  return this;}  }
class C{  public static Boolean is(final long type){  return (type & Mask) != 0;}  }
class C{  @Override public String toString(){  return ("name=" + name + ", "+ "value="+ value);}  }
class C{  public void newOrder(){  log.info("PosPanel.newOrder");  f_order.setC_BPartner_ID(0);  m_order=null;  m_order=PosOrderModel.createOrder(p_pos,f_order.getBPartner());  f_curLine.newLine();  f_curLine.f_name.requestFocusInWindow();  updateInfo();}  }
class C{  public static void writeln(ObjectReference o){  writeln(o,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.948 -0500",hash_original_method="5EBDBC89FA3BA8C18CA2B40A1EE5F87F",hash_generated_method="E2ADD2BD170BA1BBD2CA7F91DAFB9CE5") @DSVerified @DSSpec(DSCat.IO) public static byte[] sha(InputStream data) throws IOException {  return digest(getShaDigest(),data);}  }
class C{  public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);}  }
class C{  public object removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static boolean isDark(@NonNull Bitmap bitmap){  return isDark(bitmap,bitmap.getWidth() / 2,bitmap.getHeight() / 2);}  }
class C{  private boolean isDownloadInProgress(){  return UpgradeImageDownloader.getInstance(this).isDownloading();}  }
class C{  @SuppressWarnings("unchecked") @Test public void testSingleSchemaNodeProcessing() throws Exception {  ThroughputCounter<String,Integer> node=new ThroughputCounter<String,Integer>();  TestCountSink countSink=new TestCountSink();  node.count.setSink(countSink);  node.setRollingWindowCount(5);  node.setup(null);  node.beginWindow(0);  HashMap<String,Integer> input;  int aint=1000;  int bint=100;  Integer aval=aint;  Integer bval=bint;  long ntot=aint + bint;  long numtuples=1000;  long sentval=0;  for (long i=0; i < numtuples; i++) {    input=new HashMap<String,Integer>();    input.put("a",aval);    input.put("b",bval);    sentval+=2;    node.data.process(input);  }  node.endWindow();  log.info(String.format("\n*******************************************************\nGot average per sec(%d), count(got %d, expected " + "%d), numtuples(%d)",countSink.average,countSink.count,ntot * numtuples,sentval));}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case DatatypePackage.ENTITY:    return createEntity();case DatatypePackage.PROPERTY:  return createProperty();case DatatypePackage.PRIMITIVE_PROPERTY_TYPE:return createPrimitivePropertyType();case DatatypePackage.OBJECT_PROPERTY_TYPE:return createObjectPropertyType();case DatatypePackage.PRESENCE:return createPresence();case DatatypePackage.CONSTRAINT:return createConstraint();case DatatypePackage.ENUM:return createEnum();case DatatypePackage.ENUM_LITERAL:return createEnumLiteral();case DatatypePackage.TYPE:return createType();case DatatypePackage.PROPERTY_TYPE:return createPropertyType();case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE:return createBooleanPropertyAttribute();case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE:return createEnumLiteralPropertyAttribute();case DatatypePackage.CONSTRAINT_RULE:return createConstraintRule();case DatatypePackage.COMPLEX_PRIMITIVE_PROPERTY_TYPE:return createComplexPrimitivePropertyType();case DatatypePackage.DICTIONARY_PROPERTY_TYPE:return createDictionaryPropertyType();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public SdfWriterWrapper(File baseDir,SdfReaderWrapper reader,boolean forceCompression){  assert reader != null;  mReader=reader;  mIsPaired=reader.isPaired();  mHasQuality=reader.hasQualityData();  mHasNames=reader.hasNames();  if (mIsPaired) {    FileUtils.ensureOutputDirectory(baseDir);    mSingle=null;    mLeft=new SdfWriter(new File(baseDir,"left"),Constants.MAX_FILE_SIZE,reader.getPrereadType(),mHasQuality,mHasNames,forceCompression || reader.left().compressed(),reader.type());    mLeft.setPrereadArm(reader.left().getArm());    mLeft.setCommandLine(CommandLine.getCommandLine());    mRight=new SdfWriter(new File(baseDir,"right"),Constants.MAX_FILE_SIZE,reader.getPrereadType(),mHasQuality,mHasNames,forceCompression || reader.right().compressed(),reader.type());    mRight.setPrereadArm(reader.right().getArm());    mRight.setCommandLine(CommandLine.getCommandLine());    mRight.setSdfId(mLeft.getSdfId());  } else {    mLeft=null;    mRight=null;    mSingle=new SdfWriter(baseDir,Constants.MAX_FILE_SIZE,reader.getPrereadType(),mHasQuality,mHasNames,forceCompression || reader.single().compressed(),reader.type());    mSingle.setPrereadArm(reader.single().getArm());    mSingle.setCommandLine(CommandLine.getCommandLine());  }  setSdfId(new SdfId());}  }
class C{  @Override public void agentActed(Agent agent,Action action,Environment source){  Platform.runLater(null);}  }
class C{  void rediscoverStorageSystems(List<String> storageSystemNativeGuids) throws VPlexApiException {  List<VPlexStorageSystemInfo> storageSystemInfoList=getStorageSystemInfo();  Iterator<String> storageSystemIter=storageSystemNativeGuids.iterator();  while (storageSystemIter.hasNext()) {    boolean foundSystem=false;    String storageSystemNativeGuid=storageSystemIter.next();    for (    VPlexStorageSystemInfo storageSystemInfo : storageSystemInfoList) {      if (!storageSystemInfo.matches(storageSystemNativeGuid)) {        continue;      }      foundSystem=true;      ClientResponse response=null;      try {        URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_REDISCOVER_ARRAY);        s_logger.info("Rediscover storage system URI is {}",requestURI.toString());        Map<String,String> argsMap=new HashMap<String,String>();        argsMap.put(VPlexApiConstants.ARG_DASH_A,storageSystemInfo.getPath());        argsMap.put(VPlexApiConstants.ARG_DASH_C,storageSystemInfo.getClusterId());        JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);        s_logger.info("Rediscover system POST data is {}",postDataObject.toString());        response=_vplexApiClient.post(requestURI,postDataObject.toString());        String responseStr=response.getEntity(String.class);        s_logger.info("Rediscover response is {}",responseStr);        if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {          if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {            _vplexApiClient.waitForCompletion(response);          } else {            throw new VPlexApiException(String.format("Request to rediscover storage systems failed with Status: %s",response.getStatus()));          }        }      } catch (      VPlexApiException vae) {        throw vae;      }catch (      Exception e) {        throw new VPlexApiException(String.format("Exception redsicovering storage systems: %s",e.getMessage()),e);      } finally {        if (response != null) {          response.close();        }      }    }    if (!foundSystem) {      throw new VPlexApiException(String.format("Could not find storage system %s",storageSystemNativeGuid));    }  }}  }
class C{  public RecyclerViewMaterialAdapter(RecyclerView.Adapter adapter,int placeholderSize){  this.mAdapter=adapter;  mPlaceholderSize=placeholderSize;  registerAdapterObserver();}  }
class C{  private void updateItem(int slot){  ItemStack source=getItem(slot);  slots[slot]=source == null ? null : source.clone();}  }
class C{  public static View find(View convertView,int id){  if (convertView == null)   return null;  SparseArray<View> viewHolder=(SparseArray<View>)convertView.getTag();  if (viewHolder == null) {    viewHolder=new SparseArray<View>();    convertView.setTag(viewHolder);  }  View childView=viewHolder.get(id);  if (childView == null) {    childView=convertView.findViewById(id);    viewHolder.put(id,childView);  }  return childView;}  }
class C{  public static CsvKey emptyKey(){  return emptyKey;}  }
class C{  public List<Integer> emit(String streamId,List<Object> tuple){  return emit(streamId,(Collection<Tuple>)null,tuple);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:40.019 -0500",hash_original_method="4C0E39B4D7F909F8A60D019D87E845EA",hash_generated_method="93AC6FE7BD345972FD5C90793A5EB9C7") public static String bcdToString(byte[] data,int offset,int length){  StringBuilder ret=new StringBuilder(length * 2);  for (int i=offset; i < offset + length; i++) {    byte b;    int v;    v=data[i] & 0xf;    if (v > 9)     break;    ret.append((char)('0' + v));    v=(data[i] >> 4) & 0xf;    if (v == 0xf)     continue;    if (v > 9)     break;    ret.append((char)('0' + v));  }  return ret.toString();}  }
class C{  public void close() throws IOException {  try {    int bufferLength=this.buffer.length();    for (; ; ) {      String str="";      char ch;      if (this.bufferIndex >= bufferLength) {        str=XMLUtil.read(this.reader,'&');        ch=str.charAt(0);      } else {        ch=this.buffer.charAt(this.bufferIndex);        this.bufferIndex++;        continue;      }      if (ch == '<') {        this.reader.unread(ch);        break;      }      if ((ch == '&') && (str.length() > 1)) {        if (str.charAt(1) != '#') {          XMLUtil.processEntity(str,this.reader,this.resolver);        }      }    }  } catch (  XMLParseException e) {    throw new IOException(e.getMessage());  }}  }
class C{  private StringConstant parseStringConstant(int index) throws IOException {  int stringIndex=readShort();  return new StringConstant(_class.getConstantPool(),index,stringIndex);}  }
class C{  public void finish() throws IOException {  writer.append("--" + boundary + "--").append(LINE_BREAK);  writer.flush();  writer.close();  outputStream.flush();  outputStream.close();}  }
class C{  static public int[] parseInt(String what[],int missing){  int output[]=new int[what.length];  for (int i=0; i < what.length; i++) {    try {      output[i]=Integer.parseInt(what[i]);    } catch (    NumberFormatException e) {      output[i]=missing;    }  }  return output;}  }
class C{  public synchronized VisualTable addTable(String group){  VisualTable vt=new VisualTable(this,group);  addDataGroup(group,vt,null);  return vt;}  }
class C{  public Duration plusSeconds(long secondsToAdd){  return plus(secondsToAdd,0);}  }
class C{  public double variance(Attribute att){  return variance(att.index());}  }
class C{  public ManagedObjectReference vmByVMname(final String vmName,final ManagedObjectReference propCollectorRef) throws InvalidPropertyFaultMsg, RuntimeFaultFaultMsg {  init();  ManagedObjectReference retVal=null;  ManagedObjectReference rootFolder=this.serviceContent.getRootFolder();  TraversalSpec tSpec=getVMTraversalSpec();  PropertySpec propertySpec=new PropertySpecBuilder().all(Boolean.FALSE).pathSet("name").type("VirtualMachine");  ObjectSpec objectSpec=new ObjectSpecBuilder().obj(rootFolder).skip(Boolean.TRUE).selectSet(tSpec);  PropertyFilterSpec propertyFilterSpec=new PropertyFilterSpecBuilder().propSet(propertySpec).objectSet(objectSpec);  List<PropertyFilterSpec> listpfs=new ArrayList<PropertyFilterSpec>(1);  listpfs.add(propertyFilterSpec);  RetrieveOptions options=new RetrieveOptions();  List<ObjectContent> listobcont=this.vimPort.retrievePropertiesEx(propCollectorRef,listpfs,options).getObjects();  if (listobcont != null) {    for (    ObjectContent oc : listobcont) {      ManagedObjectReference mr=oc.getObj();      String vmnm=null;      List<DynamicProperty> dps=oc.getPropSet();      if (dps != null) {        for (        DynamicProperty dp : dps) {          vmnm=(String)dp.getVal();        }      }      if (vmnm != null && vmnm.equals(vmName)) {        retVal=mr;        break;      }    }  }  return retVal;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public UpdateActionCustom(final WorkspaceUpdater updater,final String script){  this.updater=updater;  this.scriptString=script;  init();}  }
class C{  private RawByteAllocator findRawByteAllocator(String key){  RawByteAllocator alloc=rawByteAllocatorCache.get(key);  if (alloc == null) {    throw new RuntimeException("Non-existence vector: key=" + key);  }  return alloc;}  }
class C{  public void warn(String msg){  log(Log.WARN,msg,null);}  }
class C{  static void testEqualsAndHashCode(){  Path thisFile=Paths.get("this");  Path thatFile=Paths.get("that");  assertTrue(thisFile.equals(thisFile));  assertTrue(!thisFile.equals(thatFile));  assertTrue(!thisFile.equals(null));  assertTrue(!thisFile.equals(new Object()));  Path likeThis=Paths.get("This");  if (isWindows) {    assertTrue(thisFile.equals(likeThis));    assertTrue(thisFile.hashCode() == likeThis.hashCode());  } else {    assertTrue(!thisFile.equals(likeThis));  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FORUM'";  db.execSQL(sql);}  }
class C{  private boolean matchesKind(GraphNode node){  for (  Class<? extends Element> nodeClass : nodeClasses) {    if (nodeClass.isInstance(node)) {      return true;    }  }  return false;}  }
class C{  public static String concatForPreparedSQL(String fieldName,ArrayList values){  String result="";  if ((values == null) || (values.size() == 0)) {    return " (1=1) ";  }  for (int i=0; i < values.size(); i++) {    result+="?,";  }  result=result.substring(0,result.length() - 1);  result=" " + fieldName + " in ( "+ result+ " ) ";  return result;}  }
class C{  public final int decrementAndGet(){  return unsafe.getAndAddInt(this,valueOffset,-1) - 1;}  }
class C{  void push(Register s,Operand name){  Stack<Operand> stack=get(s);  if (stack == null) {    stack=new Stack<Operand>();    put(s,stack);  }  stack.push(name);}  }
class C{  public void addHost(String port,MacAddress host){  this.portToMac.put(port,host);  return;}  }
class C{  public static int toIPv4Address(String ipAddress){  if (ipAddress == null)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  String[] octets=ipAddress.split("\\.");  if (octets.length != 4)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  int result=0;  for (int i=0; i < 4; ++i) {    int oct=Integer.valueOf(octets[i]);    if (oct > 255 || oct < 0)     throw new IllegalArgumentException("Octet values in specified" + " IPv4 address must be 0 <= value <= 255");    result|=oct << ((3 - i) * 8);  }  return result;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus deleteInstance(String instanceId,ProvisioningSettings settings) throws APPlatformException {  LOGGER.info("deleteInstance({})",LogAndExceptionConverter.getLogText(instanceId,settings));  try {    PropertyHandler ph=new PropertyHandler(settings);    ph.setState(FlowState.DELETION_REQUESTED);    InstanceStatus result=new InstanceStatus();    result.setChangedParameters(settings.getParameters());    return result;  } catch (  Exception t) {    throw LogAndExceptionConverter.createAndLogPlatformException(t,Context.DELETION);  }}  }
class C{  public VideoSharing shareVideo(ContactId contact,VideoPlayer player) throws RcsPersistentStorageException, RcsServiceNotRegisteredException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    VideoPlayerImpl videoPlayer=new VideoPlayerImpl(player);    IVideoSharing sharingIntf=mApi.shareVideo(contact,videoPlayer);    if (sharingIntf != null) {      return new VideoSharing(sharingIntf);    }    return null;  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void repaint(Layer layer){  super.setBufferDirty(true);  BufferedLayer.this.repaint();}  }
class C{  public static Object invokeA(String signature,boolean isNative,Object caller){  MethodListener i=sMethods.get(signature);  if (i != null) {    return i.onInvokeA(signature,isNative,caller);  } else   if (sDefaultListener != null) {    return sDefaultListener.onInvokeA(signature,isNative,caller);  }  return null;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new IdeaHelpContentViewUI((JHelpContentViewer)x);}  }
class C{  public X509Name(Vector oids,Vector values,X509NameEntryConverter converter){  this.converter=converter;  if (oids.size() != values.size()) {    throw new IllegalArgumentException("oids vector must be same length as values.");  }  for (int i=0; i < oids.size(); i++) {    this.ordering.addElement(oids.elementAt(i));    this.values.addElement(values.elementAt(i));    this.added.addElement(FALSE);  }}  }
class C{  protected void addRulesToCycle(Rule enclosingRule,Rule targetRule){  boolean foundCycle=false;  for (  Set<Rule> rulesInCycle : listOfRecursiveCycles) {    if (rulesInCycle.contains(targetRule)) {      rulesInCycle.add(enclosingRule);      foundCycle=true;    }    if (rulesInCycle.contains(enclosingRule)) {      rulesInCycle.add(targetRule);      foundCycle=true;    }  }  if (!foundCycle) {    Set<Rule> cycle=new OrderedHashSet<Rule>();    cycle.add(targetRule);    cycle.add(enclosingRule);    listOfRecursiveCycles.add(cycle);  }}  }
class C{  public static String durationToFormattedString(final Duration duration){  if (duration == null) {    return null;  }  return LocalTime.ofNanoOfDay(duration.toNanos()).format(DateTimeFormatter.ofPattern(DURATION_FORMAT));}  }
class C{  protected AbstractSelectionKey(){}  }
class C{  public VcfFormatDoubleAnnotator(AbstractDerivedFormatAnnotation annotation){  this(annotation,3);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.264 -0500",hash_original_method="52F4822F456F1C9559212854B99C1B20",hash_generated_method="5073F3D81BF13EE6AD09EC1D7AF1BEE0") public ExtendedKeyUsage(byte[] encoding){  super(encoding);}  }
class C{  public static void blur(Mat img,int amount){  Imgproc.GaussianBlur(img,img,new Size(2 * amount + 1,2 * amount + 1),0,0);}  }
class C{  public static long toLong(short[] shorts,int start){  return toLong(shorts[start],shorts[start + 1],shorts[start + 2],shorts[start + 3]);}  }
class C{  public static QueryTask.QuerySpecification generateHostQuerySpecification(String hostServiceLink,String usageTags){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(HostService.State.class));  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  if (hostServiceLink != null) {    QueryTask.Query nameClause=new QueryTask.Query().setTermPropertyName(HostService.State.FIELD_NAME_SELF_LINK).setTermMatchValue(hostServiceLink);    querySpecification.query.addBooleanClause(nameClause);  }  if (usageTags != null) {    QueryTask.Query usageTagClause=new QueryTask.Query().setTermPropertyName(QueryTask.QuerySpecification.buildCollectionItemName(HostService.State.FIELD_NAME_USAGE_TAGS)).setTermMatchValue(usageTags);    querySpecification.query.addBooleanClause(usageTagClause);  }  return querySpecification;}  }
class C{  @NotNull public static Query<PsiReference> search(@NotNull PsiElement element){  return search(element,GlobalSearchScope.allScope(PsiUtilCore.getProjectInReadAction(element)),false);}  }
class C{  public boolean isRawDiskMappingsSupported(){  return rawDiskMappingsSupported;}  }
class C{  public String toString(){  return '.' + getValue();}  }
class C{  private void createRequisition(){  int noReqs=0;  String info="";  MRequisition requisition=null;  MWarehouse wh=null;  X_T_Replenish[] replenishs=getReplenish("M_WarehouseSource_ID IS NULL AND C_BPartner_ID > 0");  for (int i=0; i < replenishs.length; i++) {    X_T_Replenish replenish=replenishs[i];    if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())     wh=MWarehouse.get(getCtx(),replenish.getM_Warehouse_ID());    if (requisition == null || requisition.getM_Warehouse_ID() != replenish.getM_Warehouse_ID()) {      requisition=new MRequisition(getCtx(),0,get_TrxName());      requisition.setAD_User_ID(getAD_User_ID());      requisition.setC_DocType_ID(p_C_DocType_ID);      requisition.setDescription(Msg.getMsg(getCtx(),"Replenishment"));      requisition.setAD_Org_ID(wh.getAD_Org_ID());      requisition.setM_Warehouse_ID(wh.getM_Warehouse_ID());      if (!requisition.save())       return;      log.fine(requisition.toString());      noReqs++;      info+=" - " + requisition.getDocumentNo();    }    MRequisitionLine line=new MRequisitionLine(requisition);    line.setM_Product_ID(replenish.getM_Product_ID());    line.setC_BPartner_ID(replenish.getC_BPartner_ID());    line.setQty(replenish.getQtyToOrder());    line.setPrice();    line.save();  }  m_info="#" + noReqs + info;  log.info(m_info);}  }
class C{  void stringConversion(Converter converter,String expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "' to String";  try {    Object result=converter.convert(String.class,value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public static RouteInfo selectBestRoute(Collection<RouteInfo> routes,InetAddress dest){  if ((routes == null) || (dest == null))   return null;  RouteInfo bestRoute=null;  for (  RouteInfo route : routes) {    if (NetworkUtils.addressTypeMatches(route.mDestination.getAddress(),dest)) {      if ((bestRoute != null) && (bestRoute.mDestination.getNetworkPrefixLength() >= route.mDestination.getNetworkPrefixLength())) {        continue;      }      if (route.matches(dest))       bestRoute=route;    }  }  return bestRoute;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String semanticpredicatevectorfile(){  return semanticpredicatevectorfile;}  }
class C{  public SetGenerator(){  super();}  }
class C{  public static int tryAddItemStacksToInvenotry(IInventory inventory,ItemStack[] items,int startSlot,int slotCount){  int itemsAdded=0;  for (  ItemStack item : items) {    itemsAdded+=addItemToInventory(inventory,item,startSlot,slotCount);  }  return itemsAdded;}  }
class C{  public void removeImage(PDFPage page,ImageInfo info){  removeImageRecord(page,info);}  }
class C{  public HCardParser(String html,String pageUrl){  this((pageUrl == null) ? Jsoup.parse(html) : Jsoup.parse(html,pageUrl),pageUrl);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  EventIncrementer oper=new EventIncrementer();  DataSink dataSink=new DataSink();  CountSink countSink=new CountSink();  oper.data.setSink(dataSink);  oper.count.setSink(countSink);  Sink seedSink=oper.seed.getSink();  Sink incrSink=oper.increment.getSink();  ArrayList<String> keys=new ArrayList<String>(2);  ArrayList<Double> low=new ArrayList<Double>(2);  ArrayList<Double> high=new ArrayList<Double>(2);  keys.add("x");  keys.add("y");  low.add(1.0);  low.add(1.0);  high.add(100.0);  high.add(100.0);  oper.setKeylimits(keys,low,high);  oper.setDelta(1);  oper.beginWindow(0);  HashMap<String,Object> stuple=new HashMap<String,Object>(1);  int numtuples=1000;  String seed1="a";  ArrayList val=new ArrayList();  val.add(10);  val.add(20);  stuple.put(seed1,val);  for (int i=0; i < numtuples; i++) {    seedSink.put(stuple);  }  oper.endWindow();  LOG.debug(String.format("\n*************************\nEmitted %d tuples, Processed %d tuples, Received %d tuples\n******************\n",numtuples,oper.tuple_count,dataSink.count));  for (  Map.Entry<String,String> e : dataSink.collectedTuples.entrySet()) {    LOG.debug(String.format("Got key (%s) and value (%s)",e.getKey(),e.getValue()));  }  oper.beginWindow(0);  HashMap<String,Object> ixtuple=new HashMap<String,Object>(1);  HashMap<String,Integer> ixval=new HashMap<String,Integer>(1);  ixval.put("x",10);  ixtuple.put("a",ixval);  HashMap<String,Object> iytuple=new HashMap<String,Object>(1);  HashMap<String,Integer> iyval=new HashMap<String,Integer>(1);  iyval.put("y",10);  iytuple.put("a",iyval);  for (int i=0; i < numtuples; i++) {    incrSink.put(ixtuple);    incrSink.put(iytuple);  }  oper.endWindow();  LOG.debug(String.format("\n*************************\nEmitted %d tuples, Processed %d tuples, Received %d tuples\n******************\n",numtuples * 2,oper.tuple_count,countSink.count));  for (  Map.Entry<String,String> e : dataSink.collectedTuples.entrySet()) {    LOG.debug(String.format("Got key (%s) and value (%s)",e.getKey(),e.getValue()));  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  Agent a=(Agent)stack.pop();  int newMask=a.getAgentMask();  if (s != null && s.length() > 0)   newMask=newMask | Agent.YEAR_MASK; else   newMask=newMask & (~Agent.YEAR_MASK);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,a.getTitle(),a.getCategory(),a.getSubCategory(),a.getPersonObj(),a.getRole(),a.getRated(),s,a.getPR(),a.getNetwork(),a.getChannelName(),a.getSlotType(),a.getTimeslots(),a.getKeyword());    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  public void mouseMoved(){}  }
class C{  public static int isSubdirectoryOf(String directory,VirtualFile[] directories){  File pathFile=FileUtil.openFile(directory);  String path=pathFile.toString();  for (int j=0, size=directories == null ? 0 : directories.length; j < size; j++) {    File dirFile=FileUtil.openFile(directories[j].getName());    String dir=dirFile.toString();    if (!pathFile.getParent().equals(dirFile.getParent()) && path.length() > dir.length() && path.startsWith(dir)) {      return j;    }  }  return -1;}  }
class C{  private static void sum(double[] a,int ai,final int len,KahanObject kbuff,KahanPlus kplus){  sumWithFn(a,ai,len,kbuff,kplus);}  }
class C{  public static boolean isControlStatementBody(StructuralPropertyDescriptor locationInParent){  return locationInParent == IfStatement.THEN_STATEMENT_PROPERTY || locationInParent == IfStatement.ELSE_STATEMENT_PROPERTY || locationInParent == ForStatement.BODY_PROPERTY || locationInParent == EnhancedForStatement.BODY_PROPERTY || locationInParent == WhileStatement.BODY_PROPERTY || locationInParent == DoStatement.BODY_PROPERTY;}  }
class C{  @Override public void stop(){}  }
class C{  public static Properties createOpenMapProperties(MapHandler mapHandler,PrintStream ps){  Properties createdProperties=new Properties();  if (mapHandler == null) {    logger.warning("can't create properties with null MapHandler");    return null;  }  Iterator it=mapHandler.iterator();  Object someObj;  logger.fine("Looking for objects in MapHandler");  MapBean mapBean=null;  LayerHandler layerHandler=null;  PropertyHandler propertyHandler=null;  InformationDelegator infoDelegator=null;  Vector otherComponents=new Vector();  while (it.hasNext()) {    someObj=it.next();    logger.fine("found " + someObj.getClass().getName());    if (someObj instanceof MapBean) {      mapBean=(MapBean)someObj;    } else     if (someObj instanceof LayerHandler) {      layerHandler=(LayerHandler)someObj;    } else     if (someObj instanceof Layer || someObj instanceof PlugIn) {    } else     if (someObj instanceof PropertyHandler) {      propertyHandler=(PropertyHandler)someObj;      if (infoDelegator != null) {        propertyHandler.addProgressListener(infoDelegator);      }    } else     if (someObj instanceof InformationDelegator) {      infoDelegator=(InformationDelegator)someObj;      if (propertyHandler != null) {        propertyHandler.addProgressListener((ProgressListener)someObj);      }    } else {      otherComponents.add(someObj);    }  }  if (mapBean == null || layerHandler == null) {    logger.warning("no MapBean(" + mapBean + ") or LayerHandler("+ layerHandler+ ") to use to write properties");    return null;  }  ps.println("######  OpenMap properties file ######");  ps.println("## Refer to original openmap.properties file\n## for instructions on how to modify this file.");  ps.println("######################################");  printMapProperties(mapBean,ps,createdProperties);  printComponentProperties(otherComponents,propertyHandler,ps,createdProperties);  printLayerProperties(layerHandler,propertyHandler,ps,createdProperties);  if (logger.isLoggable(Level.FINE) && createdProperties != null) {    System.out.println(createdProperties);  }  return createdProperties;}  }
class C{  public T caseTraceOptions_(TraceOptions_ object){  return null;}  }
class C{  @Override public XAConnection createXAConnection(final String userName,final String password) throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createXAConnection(" + userName + ", ****)");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.XA_CONNECTION);  s.setUserName(userName);  s.setPassword(password);  validateUser(s);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created connection: " + s);  }  return s;}  }
class C{  public void reset(){  undoList.clear();}  }
class C{  public void appendTextChild(String str){}  }
class C{  public PointsToSet reachingObjects(Context c,Local l,SootField f){  return reachingObjects(f);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static byte[] encodeDate(Date value){  ByteBuffer tBuf=ByteBuffer.allocate(4);  tBuf.putInt((int)(value.getTime() / 1000L));  return tBuf.array();}  }
class C{  protected NodeResult compareEntityRefs(final XNode xControl,final XNode xTest){  Differences differences=new Differences();  EntityReference control=(EntityReference)xControl.getNode();  EntityReference test=(EntityReference)xTest.getNode();  NodeResult nodeResult=new NodeResult(xControl,xTest,differences);  if (!XMLUtil.nodesEqual(control,test,isIgnoringWhitespace())) {    differences.add("Different Comment Node : Current Node " + xTest.getXPath() + " --> Golden Node "+ xControl.getXPath());  } else {    nodeResult.setIfExactMatch(true);  }  return nodeResult;}  }
class C{  private JMenuItem createMenuItem(String name,String action){  JMenuItem item=new VariableWidthMenuItem(name);  item.addActionListener(new CommandActionListener(action));  item.setBorder(null);  return item;}  }
class C{  public List<Map<String,String>> retrieveEmailDelegates(String user) throws IllegalArgumentException, IOException, ServiceException {  if (isBlankOrNullString(user)) {    throw new IllegalArgumentException();  }  logger.log(Level.INFO,"Getting email delegation settings for user " + user + " ...");  GenericFeed delegatesFeed=retrieveSettingsFeed(user,Constants.DELEGATION);  if (delegatesFeed != null) {    List<Map<String,String>> delegates=new ArrayList<Map<String,String>>();    List<GenericEntry> delegateEntries=delegatesFeed.getEntries();    for (    GenericEntry delegateEntry : delegateEntries) {      Map<String,String> delegateMap=new HashMap<String,String>();      delegateMap.put(Constants.DELEGATION_ID,delegateEntry.getProperty(Constants.DELEGATION_ID));      delegateMap.put(Constants.DELEGATE,delegateEntry.getProperty(Constants.DELEGATE));      delegateMap.put(Constants.ADDRESS,delegateEntry.getProperty(Constants.ADDRESS));      delegateMap.put(Constants.STATUS,delegateEntry.getProperty(Constants.STATUS));      delegates.add(delegateMap);    }    return delegates;  }  return null;}  }
class C{  public static void expandCallingConventions(IR ir){  for (Instruction inst=ir.firstInstructionInCodeOrder(); inst != null; inst=inst.nextInstructionInCodeOrder()) {    if (inst.isCall()) {      callExpand(inst,ir);    } else     if (inst.isReturn()) {      returnExpand(inst,ir);    }  }  expandPrologue(ir);}  }
class C{  @ObjectiveCName("changeNotificationsSoundPeer:withValue:") public void changeNotificationsSound(Peer peer,String val){  modules.getSettingsModule().changeNotificationPeerSound(peer,val);}  }
class C{  public MemoryImageSource(int w,int h,ColorModel cm,byte[] pix,int off,int scan,Hashtable<?,?> props){  initialize(w,h,cm,(Object)pix,off,scan,props);}  }
class C{  private void resetNotes2(){  if (errorInStatus2) {    if (editMode) {      statusText1.setText(editStatus2);    } else {      statusText2.setText(stdStatus2);    }    errorInStatus2=false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.308 -0500",hash_original_method="27D1704B3C4A5B83EAF9B6B6BE5CC0DE",hash_generated_method="30910A96A3F18BC661914F3F322BA981") public DOMSource(Node node,String systemID){  setNode(node);  setSystemId(systemID);}  }
class C{  public void target(Targetable t){  if (ce() == null) {    return;  }  final int weaponId=clientgui.mechD.wPan.getSelectedWeaponNum();  Mounted weapon=ce().getEquipment(weaponId);  if ((weapon != null) && weapon.getType().hasFlag(WeaponType.F_VGL)) {    int facing;    if (ce().isSecondaryArcWeapon(weaponId)) {      facing=ce().getSecondaryFacing();    } else {      facing=ce().getFacing();    }    facing=(facing + weapon.getFacing()) % 6;    Coords c=ce().getPosition().translated(facing);    IBoard board=clientgui.getClient().getGame().getBoard();    Targetable hexTarget=new HexTarget(c,board,Targetable.TYPE_HEX_CLEAR);    setIgnoringEvents(true);    clientgui.getBoardView().select(c);    setIgnoringEvents(false);    target=hexTarget;  } else {    target=t;  }  if ((target instanceof Entity) && Compute.isGroundToAir(ce(),target)) {    Coords targetPos=Compute.getClosestFlightPath(cen,ce().getPosition(),(Entity)target);    clientgui.getBoardView().cursor(targetPos);  }  ash.setAimingMode();  updateTarget();  ash.showDialog();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  int numPoints=0;  int lineNum=0;  int nlines=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  resolution=Double.parseDouble(args[3]);  if (!args[4].equalsIgnoreCase("not specified")) {    maxDist=Double.parseDouble(args[4]);  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    if (maxDist < Double.POSITIVE_INFINITY) {      maxDist=maxDist * maxDist;    }    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      nlines=countLinesInFile(pointFiles[i]);      if (firstLineHeader) {        numPoints+=nlines - 1;      } else {        numPoints+=nlines;      }    }    KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));    nlines=0;    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        lineNum=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            double[] entry={y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          lineNum++;          nlines++;          progress=(int)(100d * nlines / numPoints);          updateProgress("Reading point data:",progress);        }        in.close();        br.close();      } catch (      java.io.IOException e) {        System.err.println("Error: " + e.getMessage());      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    west=minX - 0.5 * resolution;    north=maxY + 0.5 * resolution;    nrows=(int)(Math.ceil((north - minY) / resolution));    ncols=(int)(Math.ceil((maxX - west) / resolution));    south=north - nrows * resolution;    east=west + ncols * resolution;    fw=new FileWriter(outputHeader,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(Integer.MAX_VALUE);    out.println(str1);    str1="Max:\t" + Double.toString(Integer.MIN_VALUE);    out.println(str1);    str1="North:\t" + Double.toString(north);    out.println(str1);    str1="South:\t" + Double.toString(south);    out.println(str1);    str1="East:\t" + Double.toString(east);    out.println(str1);    str1="West:\t" + Double.toString(west);    out.println(str1);    str1="Cols:\t" + Integer.toString(ncols);    out.println(str1);    str1="Rows:\t" + Integer.toString(nrows);    out.println(str1);    str1="Data Type:\t" + "float";    out.println(str1);    str1="Z Units:\t" + "not specified";    out.println(str1);    str1="XY Units:\t" + "not specified";    out.println(str1);    str1="Projection:\t" + "not specified";    out.println(str1);    str1="Data Scale:\tcontinuous";    out.println(str1);    str1="Preferred Palette:\t" + "spectrum.pal";    out.println(str1);    str1="NoData:\t" + noData;    out.println(str1);    if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {      str1="Byte Order:\t" + "LITTLE_ENDIAN";    } else {      str1="Byte Order:\t" + "BIG_ENDIAN";    }    out.println(str1);    out.close();    WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");    double halfResolution=resolution / 2;    for (row=0; row < nrows; row++) {      for (col=0; col < ncols; col++) {        easting=(col * resolution) + (west + halfResolution);        northing=(north - halfResolution) - (row * resolution);        double[] entry={northing,easting};        results=pointsTree.nearestNeighbor(entry,1,true);        if (results.get(0).distance < maxDist) {          image.setValue(row,col,results.get(0).value);        } else {          image.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nrows - 1));      updateProgress("Interpolating point data:",progress);    }    image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    image.addMetadataEntry("Created on " + new Date());    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public StartVisiblePredicate(){  super(VisualItem.STARTVISIBLE);}  }
class C{  public Session connect(int port,IProgress waitReporter) throws IOException {  final int waitTime=getPreference(PREF_CONNECT_WAIT_INTERVAL);  final int maxRetryAttempts=getPreference(PREF_CONNECT_RETRY_ATTEMPTS);  final int totalTimeout=getPreference(PREF_CONNECT_TIMEOUT);  final long timeForConnectStart=System.currentTimeMillis();  long elapsedTime=0;  int retryAttempts=-1;  PlayerSession session=null;  Socket s=null;  m_cancelConnect=false;  while (s == null) {    try {      InetSocketAddress localAddress=new InetSocketAddress(InetAddress.getByName(null),port);      s=new Socket();      m_connectSocket=s;      s.connect(localAddress,totalTimeout);    } catch (    IOException ste) {      if (ste instanceof SocketTimeoutException) {        abortConnect(ste);      }      safeCloseSocket(s);      s=null;      retryAttempts++;      elapsedTime=checkConnectTimeout(waitTime,maxRetryAttempts,totalTimeout,retryAttempts,timeForConnectStart,ste);    }    if (waitReporter != null)     waitReporter.setProgress((int)elapsedTime,totalTimeout);    if (s != null) {      session=PlayerSession.createFromSocketWithOptions(s,m_debuggerCallbacks,this);      session.setPreferences(m_prefs);      try {        session.bind();      } catch (      VersionException ex) {        session.unbind();        safeCloseSocket(s);        s=null;        retryAttempts++;        elapsedTime=checkConnectTimeout(waitTime,maxRetryAttempts,totalTimeout,retryAttempts,timeForConnectStart,new IOException(ex.getLocalizedMessage()));      }    }  }  m_connectSocket=null;  return session;}  }
class C{  public Byte[] toByte(){  Byte[] result=new Byte[value.length];  for (int i=0; i < value.length; i++) {    result[i]=new Byte(value[i]);  }  return result;}  }
class C{  private void unauthorizedAccess() throws Exception {  try {    createMarketingPermissions(tp1_ts1,Arrays.asList(supp1.getOrganizationId()),supp1_adminKey);    fail();  } catch (  SOAPFaultException e) {    assertTrue(e.getMessage().contains("AccessException"));  }  try {    removeMarketingPermissions(tp1_ts1,Arrays.asList(supp1.getOrganizationId()),supp1_adminKey);    fail();  } catch (  SOAPFaultException e) {    assertTrue(e.getMessage().contains("AccessException"));  }  try {    getPermittedSuppliers(tp1_ts1,supp1_adminKey);    fail();  } catch (  SOAPFaultException e) {    assertTrue(e.getMessage().contains("AccessException"));  }}  }
class C{  public void stopAll(){  for (  AmbienceSound sound : this.playingAmbiences) {    Minecraft.getMinecraft().getSoundHandler().stopSound(sound);    sound.stopImmediately();  }  for (  AmbienceSound sound : this.delayedAmbiences) {    Minecraft.getMinecraft().getSoundHandler().stopSound(sound);    sound.stopImmediately();  }  this.playingAmbiences.clear();  this.delayedAmbiences.clear();}  }
class C{  public void onShowSnackbar(Snackbar snackbar){  showSnackbar(snackbar);}  }
class C{  public static int lengthOfMonth(int year,int month){  return UmmalquraGregorianConverter.getDaysInMonth(year,month);}  }
class C{  public <T>T decrypt(byte[] key,Class<T> clazz) throws Exception {  byte[] decrypted=this.decrypt(key);  return Serializer.getInstance().deserialize(decrypted,clazz);}  }
class C{  public PriorityQueue<NeighbourNodeData> findKNearestNeighbours(int K,int sampleIndex,int dynCorrExclTime) throws Exception {  if (numObservations <= K + 2 * dynCorrExclTime) {    throw new Exception("Not enough data points for a K nearest neighbours search" + " with dynamic exclusion window of " + dynCorrExclTime + " points either side");  }  int indexInSortedArray=indicesInSortedArray[sampleIndex];  int lowerCandidate;  int indexOfLowerCandidate=-1;  for (lowerCandidate=indexInSortedArray - 1; lowerCandidate >= 0; lowerCandidate--) {    indexOfLowerCandidate=sortedArrayIndices[lowerCandidate];    if (Math.abs(sampleIndex - indexOfLowerCandidate) > dynCorrExclTime) {      break;    }  }  int upperCandidate;  int indexOfUpperCandidate=-1;  for (upperCandidate=indexInSortedArray + 1; upperCandidate <= numObservations - 1; upperCandidate++) {    indexOfUpperCandidate=sortedArrayIndices[upperCandidate];    if (Math.abs(sampleIndex - indexOfUpperCandidate) > dynCorrExclTime) {      break;    }  }  PriorityQueue<NeighbourNodeData> pq=new PriorityQueue<NeighbourNodeData>(K);  for (int k=0; k < K; k++) {    double normAbove=(upperCandidate == numObservations) ? Double.POSITIVE_INFINITY : norm(originalDataSet[sampleIndex],originalDataSet[indexOfUpperCandidate],normTypeToUse);    double normBelow=(lowerCandidate == -1) ? Double.POSITIVE_INFINITY : norm(originalDataSet[sampleIndex],originalDataSet[indexOfLowerCandidate],normTypeToUse);    NeighbourNodeData nextNearest;    if (normAbove < normBelow) {      nextNearest=new NeighbourNodeData(indexOfUpperCandidate,new double[]{normAbove},normAbove);      for (upperCandidate++; upperCandidate <= numObservations - 1; upperCandidate++) {        indexOfUpperCandidate=sortedArrayIndices[upperCandidate];        if (Math.abs(sampleIndex - indexOfUpperCandidate) > dynCorrExclTime) {          break;        }      }    } else {      nextNearest=new NeighbourNodeData(indexOfLowerCandidate,new double[]{normBelow},normBelow);      for (lowerCandidate--; lowerCandidate >= 0; lowerCandidate--) {        indexOfLowerCandidate=sortedArrayIndices[lowerCandidate];        if (Math.abs(sampleIndex - indexOfLowerCandidate) > dynCorrExclTime) {          break;        }      }    }    pq.add(nextNearest);  }  return pq;}  }
class C{  public boolean forEachKey(TDoubleProcedure procedure){  return forEach(procedure);}  }
class C{  public String mapIndex(int index){  if (index >= 0 && index < names.length) {    return names[index];  } else {    return null;  }}  }
class C{  public static final byte[] toByteArray(long l){  byte[] baTemp=new byte[8];  baTemp[7]=(byte)l;  baTemp[6]=(byte)(l >> 8);  baTemp[5]=(byte)(l >> 16);  baTemp[4]=(byte)(l >> 24);  baTemp[3]=(byte)(l >> 32);  baTemp[2]=(byte)(l >> 40);  baTemp[1]=(byte)(l >> 48);  baTemp[0]=(byte)(l >> 56);  return baTemp;}  }
class C{  public static byte[] hash(int idx,String val) throws NoSuchAlgorithmException {  MessageDigest sha=MessageDigest.getInstance("SHA-256");  byte[] retVal={};switch (idx) {case 1:case 2:    String val1=null;  for (int i=0; i < 9; ++i) {    val1=Integer.toString(idx) + Integer.toString(i + 1) + val;    sha.update(val1.getBytes());    retVal=concat(retVal,last128bit(sha.digest()));  }break;case 3:case 4:case 5:String val2=Integer.toString(idx) + Integer.toString(val.length()) + val+ val;sha.update(val2.getBytes());retVal=last128bit(sha.digest());break;default :throw new IllegalArgumentException("The hash index " + idx + " does not exist!");}return retVal;}  }
class C{  IMQEvaluator(IndexCreationHelper helper){  this.cache=helper.getCache();  this.fromIterators=helper.getIterators();  this.indexedExpr=helper.getCompiledIndexedExpression();  this.canonicalIterNames=((FunctionalIndexCreationHelper)helper).canonicalizedIteratorNames;  this.rgn=helper.getRegion();  isFirstItrOnEntry=((FunctionalIndexCreationHelper)helper).isFirstIteratorRegionEntry;  additionalProj=((FunctionalIndexCreationHelper)helper).additionalProj;  Object params1[]={new QRegion(rgn,false)};  initContext=new ExecutionContext(params1,cache);  if (isFirstItrOnEntry) {    this.indexInitIterators=this.fromIterators;  } else {    this.indexInitIterators=((FunctionalIndexCreationHelper)helper).indexInitIterators;    modifiedIndexExpr=((FunctionalIndexCreationHelper)helper).modifiedIndexExpr;    addnlProjType=((FunctionalIndexCreationHelper)helper).addnlProjType;  }  this.iteratorSize=this.indexInitIterators.size();  if (this.additionalProj instanceof CompiledPath) {    String tailId=((CompiledPath)this.additionalProj).getTailID();    if (tailId.equals("key")) {      indexOnRegionKeys=true;      indexStore.setIndexOnRegionKeys(true);    } else     if (!isFirstItrOnEntry) {      indexOnValues=true;      indexStore.setIndexOnValues(true);    }  }}  }
class C{  public void measure(int tag,int[] outputBuffer){  UiThreadUtil.assertOnUiThread();  View v=mTagsToViews.get(tag);  if (v == null) {    throw new NoSuchNativeViewException("No native view for " + tag + " currently exists");  }  View rootView=(View)RootViewUtil.getRootView(v);  if (rootView == null) {    throw new NoSuchNativeViewException("Native view " + tag + " is no longer on screen");  }  rootView.getLocationInWindow(outputBuffer);  int rootX=outputBuffer[0];  int rootY=outputBuffer[1];  v.getLocationInWindow(outputBuffer);  outputBuffer[0]=outputBuffer[0] - rootX;  outputBuffer[1]=outputBuffer[1] - rootY;  outputBuffer[2]=v.getWidth();  outputBuffer[3]=v.getHeight();}  }
class C{  @Override public void onPageSelected(int position){  Conversation conversation=adapter.getItem(position);  if (conversation != null && conversation.getType() != Conversation.TYPE_SERVER) {    StringBuilder sb=new StringBuilder();    sb.append(server.getTitle() + " - " + conversation.getName());    if (conversation.getType() == Conversation.TYPE_CHANNEL && !((Channel)conversation).getTopic().equals("")) {      sb.append(" - " + ((Channel)conversation).getTopic());    }    titleView.setText(sb.toString());  } else {    titleView.setText(server.getTitle());  }  if (conversation != null) {    Conversation previousConversation=server.getConversation(server.getSelectedConversation());    if (previousConversation != null) {      previousConversation.setStatus(Conversation.STATUS_DEFAULT);    }    if (conversation.getNewMentions() > 0) {      Intent i=new Intent(context,IRCService.class);      i.setAction(IRCService.ACTION_ACK_NEW_MENTIONS);      i.putExtra(IRCService.EXTRA_ACK_SERVERID,server.getId());      i.putExtra(IRCService.EXTRA_ACK_CONVTITLE,conversation.getName());      context.startService(i);    }    conversation.setStatus(Conversation.STATUS_SELECTED);    server.setSelectedConversation(conversation.getName());  }  indicator.invalidate();}  }
class C{  public boolean hasNext(){  return nextWpIndex < this.coords.size();}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public int size(){  return size;}  }
class C{  public void clearRecurrenceException(){  super.removeElement(RecurrenceException.KEY);}  }
class C{  private <T>XMLBuilder.Node showTaskRequest(final HttpServletRequest req,final HttpServletResponse resp,XMLBuilder.Node current,final TaskAndFutureTask<T> task,final boolean showQueryDetails) throws IOException {  final UUID queryId=task.task.uuid;  final long elapsedMillis=TimeUnit.NANOSECONDS.toMillis(task.getElapsedNanos());  current.node("h1","Task");{    current=current.node("FORM").attr("method","POST").attr("action","");    final String detailsURL=req.getRequestURL().append("?").append(SHOW_QUERIES).append("=").append(DETAILS).append("&").append(QUERY_ID).append("=").append(queryId.toString()).toString();    current.node("p").attr("class","task").text("elapsed=").node("span").attr("class","elapsed").text("" + elapsedMillis).close().text("ms").text(", ").node("a").attr("href",detailsURL).attr("class","details-url").text("details").close().close();    current=current.node("p");    current.node("INPUT").attr("type","hidden").attr("name","queryId").attr("value",queryId).close();    current.node("INPUT").attr("type","submit").attr("name",CANCEL_QUERY).attr("value","Cancel").close();    current=current.close();    current=current.close();  }{    final String queryString=task.task.toString();    if (queryString != null) {      current.node("h2","TASK");      current.node("p").attr("class","query-string").text(task.task.toString()).close();    }  }  return current;}  }
class C{  public void pick(MotionEvent event){  final int PICK_REGION_SIZE=40;  togglePickedObjectHighlights();  this.pickedObjects.clear();  PickedObjectList pickList=getWorldWindow().pickShapesInRect(event.getX() - PICK_REGION_SIZE / 2,event.getY() - PICK_REGION_SIZE / 2,PICK_REGION_SIZE,PICK_REGION_SIZE);  for (int i=0; i < pickList.count(); i++) {    if (pickList.pickedObjectAt(i).isOnTop()) {      this.pickedObjects.add(pickList.pickedObjectAt(i).getUserObject());    }  }  togglePickedObjectHighlights();}  }
class C{  private Object writeReplace(){  return new UnmodifiableList<E>(list);}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  public boolean addDominated(int objectId){  return this.dominated.add(objectId);}  }
class C{  private boolean isCompleted(final AsyncOperationStatus status){  return status.status.equalsIgnoreCase("completed");}  }
class C{  public static Matrix identity(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=(i == j ? 1.0 : 0.0);    }  }  return A;}  }
class C{  public IPackageBinding resolveBinding(){  return this.ast.getBindingResolver().resolvePackage(this);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VIDEO_CACHE'";  db.execSQL(sql);}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    showFeedback("This tool only operates on vector data.");  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  private void updateCatalogEntryVisibility(Product product,List<VOCatalogEntry> entries) throws ConcurrentModificationException {  HashMap<String,CatalogEntry> entryMap;  Query query=dm.createNamedQuery("CatalogEntry.findByService");  query.setParameter("service",product);  List<CatalogEntry> tempList=ParameterizedTypes.list(query.getResultList(),CatalogEntry.class);  entryMap=new HashMap<String,CatalogEntry>();  for (  CatalogEntry entry : tempList) {    if (entry.getMarketplace() != null) {      entryMap.put(entry.getMarketplace().getMarketplaceId(),entry);    } else {      entryMap.put(null,entry);    }  }  for (  VOCatalogEntry voEntry : entries) {    final VOMarketplace mp=voEntry.getMarketplace();    if (mp != null) {      CatalogEntry domEntry=entryMap.get(mp.getMarketplaceId());      if (domEntry == null) {        ConcurrentModificationException cme=new ConcurrentModificationException(voEntry);        logger.logError(Log4jLogger.SYSTEM_LOG,cme,LogMessageIdentifier.WARN_MARKETPLACE_MISMATCH_ON_SETTING_VISIBILITY,String.valueOf(product.getKey()));        throw cme;      }      domEntry.setVisibleInCatalog(voEntry.isVisibleInCatalog());    }  }}  }
class C{  public static void igniteUuidToBytes(IgniteUuid uuid,byte[] out,int off){  assert uuid != null;  longToBytes(uuid.globalId().getMostSignificantBits(),out,off);  longToBytes(uuid.globalId().getLeastSignificantBits(),out,off + 8);  longToBytes(uuid.localId(),out,off + 16);}  }
class C{  private void doLoadFile() throws Exception {  loadFile(this.getClass().getResource("sample-data.ttl").getFile(),RDFFormat.TURTLE);}  }
class C{  public SortClause(String item,String order){  this(item,ORDER.valueOf(order));}  }
class C{  public void handleResponse(StunMessageEvent evt){  lock.lock();  try {    TransactionID transactionID=getTransactionID();    logger.log(Level.FINE,"handleResponse tid " + transactionID);    if (!Boolean.getBoolean(StackProperties.KEEP_CRANS_AFTER_A_RESPONSE))     cancel();    responseCollector.processResponse(new StunResponseEvent(stackCallback,evt.getRawMessage(),(Response)evt.getMessage(),request,transactionID));  }  finally {    lock.unlock();  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public PSPProcessingException(String message){  super(message);}  }
class C{  public String toPattern(){  StringBuffer result=new StringBuffer();  for (int i=0; i < choiceLimits.length; ++i) {    if (i != 0) {      result.append('|');    }    double less=previousDouble(choiceLimits[i]);    double tryLessOrEqual=Math.abs(Math.IEEEremainder(choiceLimits[i],1.0d));    double tryLess=Math.abs(Math.IEEEremainder(less,1.0d));    if (tryLessOrEqual < tryLess) {      result.append("" + choiceLimits[i]);      result.append('#');    } else {      if (choiceLimits[i] == Double.POSITIVE_INFINITY) {        result.append("\u221E");      } else       if (choiceLimits[i] == Double.NEGATIVE_INFINITY) {        result.append("-\u221E");      } else {        result.append("" + less);      }      result.append('<');    }    String text=choiceFormats[i];    boolean needQuote=text.indexOf('<') >= 0 || text.indexOf('#') >= 0 || text.indexOf('\u2264') >= 0 || text.indexOf('|') >= 0;    if (needQuote)     result.append('\'');    if (text.indexOf('\'') < 0)     result.append(text); else {      for (int j=0; j < text.length(); ++j) {        char c=text.charAt(j);        result.append(c);        if (c == '\'')         result.append(c);      }    }    if (needQuote)     result.append('\'');  }  return result.toString();}  }
class C{  public XmlHandler fromXmlToAnnotation(Class<?>... classes){  try {    Map<String,List<Attribute>> xmlAttributes=xml.loadAttributes();    Map<String,Global> xmlGlobal=xml.loadGlobals();    List<String> simplyClasses=FilesManager.classesPath();    for (    Class<?> classe : classes) {      if (!xmlAttributes.containsKey(classe.getName()) && !xmlGlobal.containsKey(classe.getName()))       continue;      String path=getElement(simplyClasses,getClassPath(classe));      if (!FilesManager.isFileAnnotated(path,classe))       FilesManager.addConfigurationToClass(path,xmlGlobal.get(classe.getName()),xmlAttributes.get(classe.getName()),classe);    }  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public static double signum(double d){  return (d == 0.0 || Double.isNaN(d)) ? d : copySign(1.0,d);}  }
class C{  public Profile importProfile(Profile profile) throws BusinessException, JAXBException, IOException {  if (null == profile.getId()) {    throw new BusinessException("Import the profile '" + profile.getName() + "'.",ConfigurationInterfaceErrorCodeEnum.IMPORT_DATA_NOT_VALID);  }  profile.setImportDate(new Date());  if (existingProfiles.containsKey(profile.getId())) {    Profile old=existingProfiles.replace(profile.getId(),profile);    Files.deleteIfExists(pathResolver.getProfileFilePath(old));  } else {    existingProfiles.put(profile.getId(),profile);  }  saveProfile(profile);  return profile;}  }
class C{  @SafeVarargs public final void removeAllConstraints(@NonNull final Constraint<CharSequence>... constraints){  ensureNotNull(constraints,"The array may not be null");  removeAllConstraints(Arrays.asList(constraints));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public Certificate engineGenerateCertificate(InputStream is) throws CertificateException {  if (is == null) {    certCache.clear();    X509CertificatePair.clearCache();    throw new CertificateException("Missing input stream");  }  try {    byte[] encoding=readOneBlock(is);    if (encoding != null) {      X509CertImpl cert=getFromCache(certCache,encoding);      if (cert != null) {        return cert;      }      cert=new X509CertImpl(encoding);      addToCache(certCache,cert.getEncodedInternal(),cert);      return cert;    } else {      throw new IOException("Empty input");    }  } catch (  IOException ioe) {    throw new CertificateException("Could not parse certificate: " + ioe.toString(),ioe);  }}  }
class C{  public boolean isMember(String groupId,String memberId) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return doesEntityExist(groupId + "/member/" + memberId);}  }
class C{  public FixedMillisecond(Date time){  this(time.getTime());}  }
class C{  public static boolean isReadWriteTx(final long txId){  return txId < READ_COMMITTED;}  }
class C{  public <U extends T>OngoingMatchingC0<T,U> when(DecomposableMatchBuilder0<U> decomposableMatchBuilder){  return new OngoingMatchingC0<>(this,decomposableMatchBuilder.build());}  }
class C{  public ListModel(final Object[] items){  for (int i=0; i < items.length; ++i)   m_items.add(items[i]);}  }
class C{  public PrepareDownload(String path){  super();  addParameterToRequest("path",path);}  }
class C{  @Override public DriverTask discoverStorageSystem(StorageSystem storageSystem){  return discoveryHelper.discoverStorageSystem(storageSystem);}  }
class C{  private static <T>Supplier<T> memoizeForDuration(Supplier<T> original,Duration expiration){  return expiration.isEqual(ZERO) ? original : memoizeWithExpiration(original,expiration.getMillis(),MILLISECONDS);}  }
class C{  @Override public IMqttToken subscribe(String topic,int qos) throws MqttException, MqttSecurityException {  return subscribe(topic,qos,null,null);}  }
class C{  public BigInteger[] generateSignature(byte[] message){  DSAParameters params=key.getParameters();  BigInteger m=calculateE(params.getQ(),message);  BigInteger k;  int qBitLength=params.getQ().bitLength();  do {    k=new BigInteger(qBitLength,random);  } while (k.compareTo(params.getQ()) >= 0);  BigInteger r=params.getG().modPow(k,params.getP()).mod(params.getQ());  k=k.modInverse(params.getQ()).multiply(m.add(((DSAPrivateKeyParameters)key).getX().multiply(r)));  BigInteger s=k.mod(params.getQ());  BigInteger[] res=new BigInteger[2];  res[0]=r;  res[1]=s;  return res;}  }
class C{  private boolean checkMandatory(JTextField textField,String fieldName){  if (!textField.isEnabled()) {    return true;  }  String value=textField.getText();  if (value == null || value.trim().equals("")) {    JOptionPane.showMessageDialog(this,labelUtil.getString("gui.msg.err.mandatoryCheck",fieldName),labelUtil.getString("gui.msg.title.err"),JOptionPane.ERROR_MESSAGE);    textField.requestFocus();    return false;  }  return true;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  if (!newRecord && (is_ValueChanged("C_DocType_ID") || is_ValueChanged("Counter_C_DocType_ID")))   setIsValid(false);  if (!isValid())   validate();  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.595 -0500",hash_original_method="DECE161063975CD41C076FDB9612D509",hash_generated_method="F774B739C33D0D5630FC3BFA9F4F988D") private void replyHalfConnected(int status){  Message msg=mSrcHandler.obtainMessage(CMD_CHANNEL_HALF_CONNECTED);  msg.arg1=status;  msg.obj=this;  msg.replyTo=mDstMessenger;  mSrcHandler.sendMessage(msg);}  }
class C{  public boolean isDerivedFrom(String ns,String name,int method){  return false;}  }
class C{  public TypeMismatchException(final String propertyName){  super("property %s has an incompatible value",propertyName);}  }
class C{  public static void logout(TestNodeGroupManager nodeGroup){  nodeGroup.getAllHosts().forEach(null);}  }
class C{  private boolean updateDownloadFileInternal(DownloadFileInfo downloadFileInfo,boolean lockInternal,Type notifyType){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return false;  }  ContentDbDao dao=mDownloadFileDbHelper.getContentDbDao(DownloadFileInfo.Table.TABLE_NAME_OF_DOWNLOAD_FILE);  if (dao == null) {    return false;  }  ContentValues values=downloadFileInfo.getContentValues();  if (ContentValuesUtil.isEmpty(values)) {    return false;  }  String url=downloadFileInfo.getUrl();  if (lockInternal) {synchronized (mModifyLock) {      int result=dao.update(values,DownloadFileInfo.Table.COLUMN_NAME_OF_FIELD_ID + "= ?",new String[]{downloadFileInfo.getId() + ""});      if (result == 1) {        if (mDownloadFileInfoMap.containsKey(url)) {          DownloadFileInfo downloadFileInfoInMap=mDownloadFileInfoMap.get(url);          downloadFileInfoInMap.update(downloadFileInfo);        } else {          mDownloadFileInfoMap.put(url,downloadFileInfo);        }        notifyDownloadFileUpdated(downloadFileInfo,notifyType);        return true;      }    }  } else {    int result=dao.update(values,DownloadFileInfo.Table.COLUMN_NAME_OF_FIELD_ID + "= ?",new String[]{downloadFileInfo.getId() + ""});    if (result == 1) {      if (mDownloadFileInfoMap.containsKey(url)) {        DownloadFileInfo downloadFileInfoInMap=mDownloadFileInfoMap.get(url);        downloadFileInfoInMap.update(downloadFileInfo);      } else {        mDownloadFileInfoMap.put(url,downloadFileInfo);      }      notifyDownloadFileUpdated(downloadFileInfo,notifyType);      return true;    }  }  return false;}  }
class C{  public static int reindexToschema(final Switchboard sb){  BusyThread bt=sb.getThread(ReindexSolrBusyThread.THREAD_NAME);  if (bt != null) {    return bt.getJobCount();  }  boolean lukeCheckok=false;  Set<String> omitFields=new HashSet<String>(4);  omitFields.add(CollectionSchema.author_sxt.getSolrFieldName());  omitFields.add(CollectionSchema.coordinate_p_0_coordinate.getSolrFieldName());  omitFields.add(CollectionSchema.coordinate_p_1_coordinate.getSolrFieldName());  omitFields.add("_version_");  CollectionConfiguration colcfg=Switchboard.getSwitchboard().index.fulltext().getDefaultConfiguration();  ReindexSolrBusyThread reidx=new ReindexSolrBusyThread(null);  try {    Collection<FieldInfo> solrfields=Switchboard.getSwitchboard().index.fulltext().getDefaultEmbeddedConnector().getFields();    for (    FieldInfo solrfield : solrfields) {      if (!colcfg.contains(solrfield.getName()) && !omitFields.contains(solrfield.getName()) && !solrfield.getName().startsWith(CollectionSchema.VOCABULARY_PREFIX)) {        reidx.addSelectFieldname(solrfield.getName());      }    }    lukeCheckok=true;  } catch (  final SolrServerException ex) {    ConcurrentLog.logException(ex);  }  if (!lukeCheckok) {    Iterator<Entry> itcol=colcfg.entryIterator();    while (itcol.hasNext()) {      Entry etr=itcol.next();      if (!etr.enabled() && !omitFields.contains(etr.key())) {        reidx.addSelectFieldname(etr.key());      }    }    reidx.addSelectFieldname("author_s");    reidx.addSelectFieldname("css_tag_txt");    reidx.addSelectFieldname("css_url_txt");    reidx.addSelectFieldname("scripts_txt");    reidx.addSelectFieldname("images_tag_txt");    reidx.addSelectFieldname("images_urlstub_txt");    reidx.addSelectFieldname("canonical_t");    reidx.addSelectFieldname("frames_txt");    reidx.addSelectFieldname("iframes_txt");    reidx.addSelectFieldname("inboundlinks_tag_txt");    reidx.addSelectFieldname("inboundlinks_relflags_val");    reidx.addSelectFieldname("inboundlinks_name_txt");    reidx.addSelectFieldname("inboundlinks_rel_sxt");    reidx.addSelectFieldname("inboundlinks_text_txt");    reidx.addSelectFieldname("inboundlinks_text_chars_val");    reidx.addSelectFieldname("inboundlinks_text_words_val");    reidx.addSelectFieldname("inboundlinks_alttag_txt");    reidx.addSelectFieldname("outboundlinks_tag_txt");    reidx.addSelectFieldname("outboundlinks_relflags_val");    reidx.addSelectFieldname("outboundlinks_name_txt");    reidx.addSelectFieldname("outboundlinks_rel_sxt");    reidx.addSelectFieldname("outboundlinks_text_txt");    reidx.addSelectFieldname("outboundlinks_text_chars_val");    reidx.addSelectFieldname("outboundlinks_text_words_val");    reidx.addSelectFieldname("outboundlinks_alttag_txt");  }  sb.deployThread(ReindexSolrBusyThread.THREAD_NAME,"Reindex Solr","reindex documents with obsolete fields in embedded Solr index","/IndexReIndexMonitor_p.html",reidx,0);  return 0;}  }
class C{  public BatchFraction defaultJobRepository(final String name,final DatasourcesFraction datasource){  jdbcJobRepository(name,datasource);  return defaultJobRepository(name);}  }
class C{  public void testXADataSource() throws Exception {  MysqlXADataSource ds=new MysqlXADataSource();  ds.setUrl(dbUrl);  String name="XA";  this.ctx.rebind(name,ds);  Object result=this.ctx.lookup(name);  assertNotNull("XADataSource not bound into JNDI",result);}  }
class C{  private void hideOverlay(boolean fromUser){  if (mShowing) {    mHandler.removeMessages(FADE_OUT);    mHandler.removeMessages(SHOW_PROGRESS);    if (!fromUser && !mIsLocked) {      mOverlayProgress.startAnimation(AnimationUtils.loadAnimation(this,android.R.anim.fade_out));      mPlayPause.startAnimation(AnimationUtils.loadAnimation(this,android.R.anim.fade_out));      mLock.startAnimation(AnimationUtils.loadAnimation(this,android.R.anim.fade_out));      mEdit.startAnimation(AnimationUtils.loadAnimation(this,android.R.anim.fade_out));    } else     mSize.setVisibility(View.INVISIBLE);    mOverlayProgress.setVisibility(View.INVISIBLE);    mPlayPause.setVisibility(View.INVISIBLE);    mLock.setVisibility(View.INVISIBLE);    mEdit.setVisibility(View.INVISIBLE);    mShowing=false;    dimStatusBar(true);  } else   if (!fromUser) {    dimStatusBar(true);  }}  }
class C{  public boolean isResolved(){  for (  ImplicitIntentFields field : ImplicitIntentFields.values()) {    if (isInvalidated[field.i()])     return false;  }  return true;}  }
class C{  public void testTimeControl(){  TimeControl tc=new TimeControl();  TimeControlData tcData=new TimeControlData();  tcData.setTimeControl(2 * 60 * 1000,40,0);  tc.setTimeControl(tcData);  tc.setCurrentMove(1,true,0,0);  assertEquals(40,tc.getMovesToTC(true));  assertEquals(40,tc.getMovesToTC(false));  tc.setCurrentMove(1,false,0,0);  assertEquals(39,tc.getMovesToTC(true));  assertEquals(40,tc.getMovesToTC(false));  tc.setCurrentMove(2,true,0,0);  assertEquals(39,tc.getMovesToTC(true));  assertEquals(39,tc.getMovesToTC(false));  tc.setCurrentMove(40,true,0,0);  assertEquals(1,tc.getMovesToTC(true));  assertEquals(1,tc.getMovesToTC(false));  tc.setCurrentMove(40,false,0,0);  assertEquals(40,tc.getMovesToTC(true));  assertEquals(1,tc.getMovesToTC(false));  tc.setCurrentMove(41,true,0,0);  assertEquals(40,tc.getMovesToTC(true));  assertEquals(40,tc.getMovesToTC(false));  tc.setCurrentMove(80,true,0,0);  assertEquals(1,tc.getMovesToTC(true));  assertEquals(1,tc.getMovesToTC(false));  tc.setCurrentMove(80,false,0,0);  assertEquals(40,tc.getMovesToTC(true));  assertEquals(1,tc.getMovesToTC(false));  tc.setCurrentMove(81,true,0,0);  assertEquals(40,tc.getMovesToTC(true));  assertEquals(40,tc.getMovesToTC(false));}  }
class C{  private ContentValues unpackScreen(byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  Screen screen=unpackProto(new Screen(),buffer,dataSize);  ContentValues values=new ContentValues();  values.put(WorkspaceScreens._ID,screen.id);  values.put(WorkspaceScreens.SCREEN_RANK,screen.rank);  return values;}  }
class C{  public TermsRequestParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(mInputSource,this);    return this;  } catch (  IOException e) {    throw new ParseFailureException("Failed to parse input source!",e);  }}  }
class C{  public static void picture(double x,double y,String s,double degrees){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth(null);  int hs=image.getHeight(null);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  @Override public void visitEnd(){  if (mOrgWriter != null) {    mOrgWriter.visitEnd();  }  generateDelegateCode();}  }
class C{  public void test_writeSetIsolation() throws IOException {  final byte[] k3=i2k(3);  final byte[] k5=i2k(5);  final byte[] k7=i2k(7);  final byte[] v3a=new byte[]{3};  final byte[] v5a=new byte[]{5};  final byte[] v7a=new byte[]{7};  final byte[] v3b=new byte[]{3,1};  final byte[] v5b=new byte[]{5,1};  final byte[] v7b=new byte[]{7,1};  final Properties properties=new Properties();  properties.setProperty(Options.BUFFER_MODE,BufferMode.Transient.toString());  final Journal journal=new Journal(properties);  try {    final IndexMetadata md=new IndexMetadata(UUID.randomUUID());{      md.setBranchingFactor(3);      md.setDeleteMarkers(true);      md.setVersionTimestamps(true);    }    final long t1=journal.nextTimestamp();    final long t2=journal.nextTimestamp();    final long t3=journal.nextTimestamp();    final long startTime=journal.nextTimestamp();    final long t4=journal.nextTimestamp();    final BTree unisolatedIndex=BTree.create(journal,md);    unisolatedIndex.insert(k3,v3a,false,false,t1,null);    unisolatedIndex.insert(k7,null,true,false,t2,null);    final long addrCheckpoint1=unisolatedIndex.writeCheckpoint();    final BTree groundState=BTree.load(journal,addrCheckpoint1,false);    final BTree writeSet=BTree.create(journal,md.clone());    final IsolatedFusedView view=new IsolatedFusedView(startTime,new AbstractBTree[]{writeSet,groundState});    assertTrue(view.contains(k3));    assertFalse(view.contains(k7));    assertSameIterator(new byte[][]{v3a},view.rangeIterator(null,null));{      final ITupleIterator itr=view.rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.DELETED,null);      assertTrue(itr.hasNext());      ITuple tuple;      tuple=itr.next();      assertEquals(k3,tuple.getKey());      assertEquals(v3a,tuple.getValue());      assertFalse(tuple.isDeletedVersion());      assertEquals(t1,tuple.getVersionTimestamp());      assertTrue(itr.hasNext());      tuple=itr.next();      assertEquals(k7,tuple.getKey());      assertTrue(tuple.isDeletedVersion());      assertEquals(t2,tuple.getVersionTimestamp());    }    assertEquals(null,view.insert(k5,v5a));    assertEquals(v5a,view.lookup(k5));    assertEquals(v5a,writeSet.lookup(k5));    assertFalse(groundState.contains(k5));{      ITuple tuple=view.rangeIterator(k5,BytesUtil.successor(k5)).next();      assertEquals(k5,tuple.getKey());      assertEquals(v5a,tuple.getValue());      assertFalse(tuple.isDeletedVersion());      assertEquals(startTime,tuple.getVersionTimestamp());    }    assertEquals(v3a,view.insert(k3,v3b));    assertEquals(v3b,view.lookup(k3));    assertEquals(v3b,writeSet.lookup(k3));    assertEquals(v3a,groundState.lookup(k3));{      ITuple tuple=view.rangeIterator(k3,BytesUtil.successor(k3)).next();      assertEquals(k3,tuple.getKey());      assertEquals(v3b,tuple.getValue());      assertFalse(tuple.isDeletedVersion());      assertEquals(t1,tuple.getVersionTimestamp());    }    assertEquals(null,view.insert(k7,v7a));    assertEquals(v7a,view.lookup(k7));    assertEquals(v7a,writeSet.lookup(k7));    assertEquals(null,groundState.lookup(k7));{      ITuple tuple=view.rangeIterator(k7,BytesUtil.successor(k7)).next();      assertEquals(k7,tuple.getKey());      assertEquals(v7a,tuple.getValue());      assertFalse(tuple.isDeletedVersion());      assertEquals(t2,tuple.getVersionTimestamp());    }    assertEquals(v7a,view.insert(k7,v7b));    assertEquals(v7b,view.lookup(k7));    assertEquals(v7b,writeSet.lookup(k7));    assertEquals(null,groundState.lookup(k7));{      ITuple tuple=view.rangeIterator(k7,BytesUtil.successor(k7)).next();      assertEquals(k7,tuple.getKey());      assertEquals(v7b,tuple.getValue());      assertFalse(tuple.isDeletedVersion());      assertEquals(t2,tuple.getVersionTimestamp());    }  }  finally {    journal.destroy();  }}  }
class C{  void increment(){  count++;}  }
class C{  public int generate(int uc,int len,char[] da,int dp,int dl){  if (uc <= 0xffff) {    if (Surrogate.is(uc)) {      error=CoderResult.malformedForLength(len);      return -1;    }    if (dl - dp < 1) {      error=CoderResult.OVERFLOW;      return -1;    }    da[dp]=(char)uc;    error=null;    return 1;  }  if (uc < Surrogate.UCS4_MIN) {    error=CoderResult.malformedForLength(len);    return -1;  }  if (uc <= Surrogate.UCS4_MAX) {    if (dl - dp < 2) {      error=CoderResult.OVERFLOW;      return -1;    }    da[dp]=Surrogate.high(uc);    da[dp + 1]=Surrogate.low(uc);    error=null;    return 2;  }  error=CoderResult.unmappableForLength(len);  return -1;}  }
class C{  @Override public boolean supportsByteValues(){  return SUPPORTS_BYTE_VALUES;}  }
class C{  public static GenomeRelationships load(BufferedReader reader) throws IOException {  final GenomeRelationships ped=new GenomeRelationships();  String line;  while ((line=reader.readLine()) != null) {    line=line.trim();    if (line.startsWith("#") || line.matches("^\\s*$")) {      continue;    }    parsePedLine(ped,line);  }  return ped;}  }
class C{  public void addLoadConstant(long k){  add(ByteCode.LDC2_W,itsConstantPool.addConstant(k));}  }
class C{  public ObjectWriter withFilters(FilterProvider filterProvider){  if (filterProvider == _config.getFilterProvider()) {    return this;  }  return new ObjectWriter(this,_config.withFilters(filterProvider));}  }
class C{  public static String genUniquePathname(String format){  String ret=null;  if (null != format && !format.isEmpty()) {    ret=String.format(format,(new SimpleDateFormat("ddMMyy-hhmmss.SSS").format(new Date())));  }  return ret;}  }
class C{  public void addFirst(E e){  linkFirst(e);}  }
class C{  public static boolean equals(Object[] left,List right){  return coercedEquals(left,right);}  }
class C{  public void replaceObject(DatabaseObjectDefinition databaseDefinition) throws EclipseLinkException {  boolean fast=FAST_TABLE_CREATOR;  if (fast && (databaseDefinition instanceof TableDefinition)) {    session.executeNonSelectingSQL("DELETE FROM " + databaseDefinition.getName());  } else   if (fast && (databaseDefinition instanceof StoredProcedureDefinition)) {  } else {    boolean shouldLogExceptionStackTrace=getSession().getSessionLog().shouldLogExceptionStackTrace();    if (shouldLogExceptionStackTrace) {      getSession().getSessionLog().setShouldLogExceptionStackTrace(false);    }    try {      dropObject(databaseDefinition);    } catch (    DatabaseException exception) {    } finally {      if (shouldLogExceptionStackTrace) {        getSession().getSessionLog().setShouldLogExceptionStackTrace(true);      }    }    createObject(databaseDefinition);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private final void insert(Object text){  buf.insert(buf.length() - 1," ");  buf.insert(buf.length() - 1,text);}  }
class C{  @Override public String toString(){  String ivString=Base64.encodeToString(iv,BASE64_FLAGS);  String cipherTextString=Base64.encodeToString(cipherText,BASE64_FLAGS);  String macString=Base64.encodeToString(mac,BASE64_FLAGS);  return String.format(ivString + ":" + macString+ ":"+ cipherTextString);}  }
class C{  public PipelineConfigServlet(BaleenPipelineManager manager){  super("pipelines",manager,PipelineConfigServlet.class);}  }
class C{  public NoAvailableServersException(){}  }
class C{  public void animateFromZero(Integer endValue,Integer duration){  setDuration(duration);  animateText(0,endValue);}  }
class C{  public static DateTimeFormatter generateDefaultFormatterCE(Locale pickerLocale){  DateTimeFormatter formatCE=new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive().appendLocalized(FormatStyle.LONG,null).toFormatter(pickerLocale);  String language=pickerLocale.getLanguage();  if ("tr".equals(language)) {    formatCE=PickerUtilities.createFormatterFromPatternString("dd MMMM yyyy",pickerLocale);  }  return formatCE;}  }
class C{  public void fireStackStatus(boolean enableBackProjections,boolean enableForwardProjections){  ArrayList<ProjectionStackTrigger> targets=getTriggers();  if (triggers == null) {    return;  }  Iterator<ProjectionStackTrigger> iterator=targets.iterator();  while (iterator.hasNext()) {    ProjectionStackTrigger target=iterator.next();    if (Debug.debugging("projectionstack")) {      Debug.output("ProjectionStackSupport.fireStackStatus(): target is: " + target);    }    target.updateProjectionStackStatus(enableBackProjections,enableForwardProjections);  }}  }
class C{  public FileImageRecorder(File base_path,int starting_seq,String prefix,RecordingSuccessCallback callback){  super(base_path,starting_seq,prefix,callback);  this.activated=false;  executor=Executors.newFixedThreadPool(MAX_SAVING_THREADS);}  }
class C{  @RequestProcessing(value="/admin/comment/{commentId}",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void updateComment(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String commentId) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/comment.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  JSONObject comment=commentQueryService.getComment(commentId);  final Enumeration<String> parameterNames=request.getParameterNames();  while (parameterNames.hasMoreElements()) {    final String name=parameterNames.nextElement();    final String value=request.getParameter(name);    comment.put(name,value);  }  commentMgmtService.updateComment(commentId,comment);  comment=commentQueryService.getComment(commentId);  dataModel.put(Comment.COMMENT,comment);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  @DSVerified("Modeled Lifecycle Event") @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:47:59.620 -0500",hash_original_method="ABF3FC9B35FB67DA4650457E79D2DAE8",hash_generated_method="4A801EFBDC40FB7231D50804D2987BA1") public CharSequence onCreateDescription(){  return new String("<Activity.onCreateDescription>");}  }
class C{  public static <T>T checkNotNull(T reference,String message,Object... args){  if (reference == null) {    throw new IllegalArgumentException(String.format(message,args));  }  return reference;}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public void endClear(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(clearInProgressId,-1);  int endClearId;  if (timedOut) {    endClearId=clearTimedOutId;  } else   if (failed) {    endClearId=clearFailedId;  } else {    endClearId=clearId;  }  this.stats.incInt(endClearId,1);  this.stats.incLong(clearDurationId,duration);}  }
class C{  public static <T>T[] copyFrom(T[] array,int newLength){  T[] copy=createWithSameComponentType(newLength,array);  System.arraycopy(array,0,copy,0,Math.min(array.length,newLength));  return copy;}  }
class C{  private void testServerJoin(Member.Type type) throws Throwable {  createServers(3);  CopycatServer server=createServer(nextMember(type));  server.join(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  await(10000);}  }
class C{  public XTIFFDirectory createDirectory(SeekableStream stream,long ifd_offset) throws IOException {  return new XTIFFDirectory(stream,ifd_offset);}  }
class C{  public static DateTimeZone readFrom(InputStream in,String id) throws IOException {  if (in instanceof DataInput) {    return readFrom((DataInput)in,id);  } else {    return readFrom((DataInput)new DataInputStream(in),id);  }}  }
class C{  public static byte[] stringToUtf8Bytes(String string){  int len=string.length();  byte[] bytes=new byte[len * 3];  int outAt=0;  for (int i=0; i < len; i++) {    char c=string.charAt(i);    if ((c != 0) && (c < 0x80)) {      bytes[outAt]=(byte)c;      outAt++;    } else     if (c < 0x800) {      bytes[outAt]=(byte)(((c >> 6) & 0x1f) | 0xc0);      bytes[outAt + 1]=(byte)((c & 0x3f) | 0x80);      outAt+=2;    } else {      bytes[outAt]=(byte)(((c >> 12) & 0x0f) | 0xe0);      bytes[outAt + 1]=(byte)(((c >> 6) & 0x3f) | 0x80);      bytes[outAt + 2]=(byte)((c & 0x3f) | 0x80);      outAt+=3;    }  }  byte[] result=new byte[outAt];  System.arraycopy(bytes,0,result,0,outAt);  return result;}  }
class C{  public double manhattanDistance(final MutableInt2D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  return dx + dy;}  }
class C{  public TaskResourceRep sendAlert(String source,Integer eventId,List<String> nodeIds,List<String> nodeNames,List<String> logNames,Integer severity,String start,String end,String msgRegex,Integer maxCount,boolean multipleRequests,EventParameters eventParameters){  UriBuilder builder=client.uriBuilder(CALLHOME_ALERT_URL);  addQueryParam(builder,SOURCE_PARAM,source);  addQueryParam(builder,EVENT_ID_PARAM,eventId);  if ((nodeIds != null) && (!nodeIds.isEmpty())) {    addQueryParam(builder,NODE_ID_PARAM,nodeIds);  }  if ((nodeNames != null) && (!nodeNames.isEmpty())) {    addQueryParam(builder,NODE_NAME_PARAM,nodeNames);  }  addQueryParam(builder,LOG_NAME_PARAM,logNames);  addQueryParam(builder,SEVERITY_PARAM,severity);  addQueryParam(builder,START_TIME_PARAM,start);  addQueryParam(builder,END_TIME_PARAM,end);  addQueryParam(builder,MSG_REGEX_PARAM,msgRegex);  addQueryParam(builder,MAX_COUNT_PARAM,maxCount);  if (multipleRequests) {    addQueryParam(builder,FORCE_PARAM,FORCE);  }  return client.postURI(TaskResourceRep.class,eventParameters,builder.build());}  }
class C{  public static Set<ClassNode> collectAllInterfaces(ClassNode node){  HashSet<ClassNode> result=new HashSet<ClassNode>();  collectAllInterfaces(node,result);  return result;}  }
class C{  public boolean canGetInt(){  return canGet(int.class);}  }
class C{  public Collection<LocalCandidate> harvest(Component component){  logger.fine("starting " + component.toShortString() + " harvest for: "+ toString());  stunStack=component.getParentStream().getParentAgent().getStunStack();  for (  Candidate<?> cand : component.getLocalCandidates()) {    if ((cand instanceof HostCandidate) && (cand.getTransport() == stunServer.getTransport())) {      startResolvingCandidate((HostCandidate)cand);    }  }  waitForResolutionEnd();  Collection<LocalCandidate> candidates=new HashSet<>();synchronized (completedHarvests) {    for (    StunCandidateHarvest completedHarvest : completedHarvests) {      LocalCandidate[] completedHarvestCandidates=completedHarvest.getCandidates();      if ((completedHarvestCandidates != null) && (completedHarvestCandidates.length != 0)) {        candidates.addAll(Arrays.asList(completedHarvestCandidates));      }    }    completedHarvests.clear();  }  logger.finest("Completed " + component.toShortString() + " harvest: "+ toString()+ ". Found "+ candidates.size()+ " candidates: "+ listCandidates(candidates));  return candidates;}  }
class C{  @VisibleForTesting protected EmptyTabModel(){}  }
class C{  public void handleAxisFlags(){  if (minAxisFlag == AT_MAJOR_TICK_PLUS || minAxisFlag == AT_MINOR_TICK_PLUS) {    if (minAxis == minData) {      majorTickCount++;      minTick-=majorTick;      minAxis=minTick;    }  }  if (minAxisFlag == AT_MINOR_TICK_PLUS) {    if ((minAxis + minorTick) < minData) {      majorTickCount--;      minTick+=majorTick;      while ((minAxis + minorTick) < minData) {        minAxis+=minorTick;      }    }  } else   if (minAxisFlag == AT_MINOR_TICK) {    if ((minAxis + minorTick) <= minData) {      majorTickCount--;      minTick+=majorTick;      while ((minAxis + minorTick) <= minData) {        minAxis+=minorTick;      }    }  } else   if (minAxisFlag == AT_DATA) {    if (minTick < minData) {      majorTickCount--;      minTick+=majorTick;    }    minAxis=minData;  } else   if (minAxisFlag == AT_VALUE) {    if (minTick < minValue) {      majorTickCount--;      minTick+=majorTick;    }    minAxis=minValue;  } else   if (minAxisFlag == AT_ZERO) {    majorTickCount+=(int)(minTick / majorTick);    minTick=0;    minAxis=0;  }  if (maxAxisFlag == AT_MAJOR_TICK_PLUS || maxAxisFlag == AT_MINOR_TICK_PLUS) {    if (maxAxis == maxData) {      majorTickCount++;      maxTick+=majorTick;      maxAxis=maxTick;    }  }  if (maxAxisFlag == AT_MINOR_TICK_PLUS) {    if ((maxAxis - minorTick) > maxData) {      majorTickCount--;      maxTick-=majorTick;      while ((maxAxis - minorTick) > maxData) {        maxAxis-=minorTick;      }    }  } else   if (maxAxisFlag == AT_MINOR_TICK) {    if ((maxAxis - minorTick) >= maxData) {      majorTickCount--;      maxTick-=majorTick;      while ((maxAxis - minorTick) >= maxData) {        maxAxis-=minorTick;      }    }  } else   if (maxAxisFlag == AT_DATA) {    if (maxTick > maxData) {      majorTickCount--;      maxTick-=majorTick;    }    maxAxis=maxData;  } else   if (maxAxisFlag == AT_VALUE) {    if (maxTick > maxValue) {      majorTickCount--;      maxTick-=majorTick;    }    maxAxis=maxValue;  } else   if (maxAxisFlag == AT_ZERO) {    majorTickCount+=(int)(-maxTick / majorTick);    maxTick=0;    maxTick=0;  }}  }
class C{  public File monolingualCorpus(){  return monolingualCorpus;}  }
class C{  @Override public StreamMessage createStreamMessage() throws JMSException {  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createStreamMessage" + session);  }  return session.createStreamMessage();}  }
class C{  @Override public void paintBarShadow(Graphics2D g2,BarRenderer renderer,int row,int column,RectangularShape bar,RectangleEdge base,boolean pegShadow){  Paint itemPaint=renderer.getItemPaint(row,column);  if (itemPaint instanceof Color) {    Color c=(Color)itemPaint;    if (c.getAlpha() == 0) {      return;    }  }  RectangularShape shadow=createShadow(bar,renderer.getShadowXOffset(),renderer.getShadowYOffset(),base,pegShadow);  g2.setPaint(renderer.getShadowPaint());  g2.fill(shadow);}  }
class C{  public static void drawString(JComponent c,Graphics g,String text,int x,int y){  invokeSwingUtilities2StaticMethod("drawString",new Class[]{JComponent.class,Graphics.class,String.class,int.class,int.class},new Object[]{c,g,text,x,y});}  }
class C{  static public void updateSignalMastLogic(JmriJFrame frame,SignalMast oldMast,SignalMast newMast){  Object[] options={rb.getString("UpdateButton"),rb.getString("LeaveButton")};  int n=JOptionPane.showOptionDialog(frame,java.text.MessageFormat.format(rb.getString("UpdateLogic"),new Object[]{oldMast.getDisplayName(),newMast.getDisplayName()}),"Update Logic",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);  if (n == 0) {    InstanceManager.getDefault(jmri.SignalMastLogicManager.class).replaceSignalMast(oldMast,newMast);  }}  }
class C{  public final Integer executeIntQuery(String sql,boolean mandatory) throws AdeException {  return SpecialSqlQueries.executeIntQuery(sql,m_connection,mandatory);}  }
class C{  public int start(){  started.compareAndSet(false,true);  server.start();  return server.getServerPort();}  }
class C{  public String put(String request,String content) throws IOException {  HttpPut httpPut=new HttpPut(getBaseURL() + request);  httpPut.setEntity(new StringEntity(content,ContentType.create("application/json",StandardCharsets.UTF_8)));  return getResponse(httpPut);}  }
class C{  public void rmean(){  rmean(x);}  }
class C{  protected void symbolize(){  if (sage.Sage.DBG)   System.out.println("Modules: symbolize " + this);  sage.Widget[] wz=getWidgetz();  for (int i=0; i < wz.length; i++) {    if (wz[i].getModule() != this) {    } else {      sage.Widget[] conz=wz[i].contents();      for (int j=0; j < conz.length; j++) {        if (conz[j].getModule() != this && conz[j].symbol() == null) {          AbstractWidget aw=(AbstractWidget)conz[j];          aw.symbol=aw.module.name() + ":" + sage.Widget.TYPES[aw.type()]+ "-"+ aw.index();          aw.getModule().setChanged();        }      }    }  }}  }
class C{  public Boolean isEightPlusHostVmfsSharedAccessSupported(){  return eightPlusHostVmfsSharedAccessSupported;}  }
class C{  public ContentInfo(byte[] bytes){  DerValue octetString=new DerValue(DerValue.tag_OctetString,bytes);  this.contentType=DATA_OID;  this.content=octetString;}  }
class C{  public TSP2OptHeuristic(TSPInstance instance){  super();  this.instance=instance;}  }
class C{  public static boolean checkValidKeys(JSONObject jo,Collection<Fields> fieldsCollection){  return checkValidKeysHelper(jo,fieldsCollection);}  }
class C{  public static void assumeConnectivity(){  assumeConnectivity("zest.apache.org",80);}  }
class C{  private static short CallShortMethodA(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallShortMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Short,false);  return Reflection.unwrapShort(returnObj);}  }
class C{  public static Map<String,byte[]> readZipFromResource(String path) throws IOException {  ClassLoader cl=ClassLoader.getSystemClassLoader();  URL url=cl.getResource(path);  Validate.isTrue(url != null);  Map<String,byte[]> ret=new LinkedHashMap<>();  try (InputStream is=url.openStream();ZipArchiveInputStream zais=new ZipArchiveInputStream(is)){    ZipArchiveEntry entry;    while ((entry=zais.getNextZipEntry()) != null) {      ret.put(entry.getName(),IOUtils.toByteArray(zais));    }  }   return ret;}  }
class C{  public short[] toArray(){  int pos=0;  short[] array=new short[size];  if (currentBufferIndex == -1) {    return array;  }  for (int i=0; i < currentBufferIndex; i++) {    int len=buffers[i].length;    System.arraycopy(buffers[i],0,array,pos,len);    pos+=len;  }  System.arraycopy(buffers[currentBufferIndex],0,array,pos,offset);  return array;}  }
class C{  public void addCommand(Command cmd){  addCommand(cmd,0);}  }
class C{  public void init(){  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);}  }
class C{  private IvrZoneset createActiveIvrZoneset(MDSDialog dialog){  String zonesetName="IVR_Zoneset_" + dialog.showSwitchWwn().replace(':','_');  _log.info("Attempting to create active ivr zoneset: " + zonesetName);  try {    dialog.config();    dialog.ivrZonesetName(zonesetName,true);    dialog.exitToConfig();    if (dialog.isInSession()) {      dialog.ivrCommit();    }    dialog.endConfig();    return new IvrZoneset(zonesetName);  } catch (  NetworkDeviceControllerException ex) {    _log.info("Unable to create zoneset: " + zonesetName);    throw NetworkDeviceControllerException.exceptions.addZonesStrategyFailedNotFound(zonesetName,ex);  } finally {    if (dialog.isInSession()) {      dialog.endConfig();      dialog.config();      dialog.ivrAbort();      dialog.endConfig();    }  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case RegularExpressionPackage.DISJUNCTION__ELEMENTS:    return ((InternalEList<?>)getElements()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public OMRaster(double lt,double ln,int offset_x1,int offset_y1,int w,int h,int[] pix){  super(RENDERTYPE_OFFSET,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setColorModel(COLORMODEL_DIRECT);  lat=lt;  lon=ln;  x=offset_x1;  y=offset_y1;  width=w;  height=h;  pixels=pix;  if (pixels == null || pixels.length == 0) {    pixels=new int[height * width];  }}  }
class C{  private void fetchFlowEntry(){  this.allowSimpleKey=true;  removePossibleSimpleKey();  Mark startMark=reader.getMark();  reader.forward();  Mark endMark=reader.getMark();  Token token=new FlowEntryToken(startMark,endMark);  this.tokens.add(token);}  }
class C{  @KnownFailure("not supported") public void test_SelectRightOuterJoin() throws SQLException {  String sql="SELECT distinct s.snum as ssnum, c.snum as ccnum FROM " + DatabaseCreator.CUSTOMERS_TABLE + " c right outer join "+ DatabaseCreator.SALESPEOPLE_TABLE+ " s on s.snum=c.snum";  ResultSet result=statement.executeQuery(sql);  HashMap<Integer,Integer> value=new HashMap<Integer,Integer>();  value.put(1001,1001);  value.put(1002,1002);  value.put(1003,1003);  value.put(1004,1004);  value.put(1007,1007);  value.put(1013,null);  while (result.next()) {    int key=result.getInt("ssnum");    Object val=result.getObject("ccnum");    assertTrue("wrong value of ssnum field",value.containsKey(key));    assertEquals("wrong value of ccnum field",value.get(key),(Integer)val);    value.remove(key);  }  assertTrue("expected rows number doesn't equal actual rows number",value.isEmpty());  result.close();}  }
class C{  public static double mostToxicRow(Gate g){  return Collections.min(g.get_toxicity());}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  void scale(float xf,float yf,float zf){  xx*=xf;  xy*=xf;  xz*=xf;  xo*=xf;  yx*=yf;  yy*=yf;  yz*=yf;  yo*=yf;  zx*=zf;  zy*=zf;  zz*=zf;  zo*=zf;}  }
class C{  public void createControl(Composite parent){  Composite composite=new Composite(parent,SWT.NONE);{    GridLayout layout=new GridLayout();    layout.numColumns=1;    layout.verticalSpacing=12;    composite.setLayout(layout);    GridData data=new GridData();    data.verticalAlignment=GridData.FILL;    data.grabExcessVerticalSpace=true;    data.horizontalAlignment=GridData.FILL;    composite.setLayoutData(data);  }  Label containerLabel=new Label(composite,SWT.LEFT);{    containerLabel.setText(EipEditorPlugin.INSTANCE.getString("_UI_ModelObject"));    GridData data=new GridData();    data.horizontalAlignment=GridData.FILL;    containerLabel.setLayoutData(data);  }  initialObjectField=new Combo(composite,SWT.BORDER);{    GridData data=new GridData();    data.horizontalAlignment=GridData.FILL;    data.grabExcessHorizontalSpace=true;    initialObjectField.setLayoutData(data);  }  for (  String objectName : getInitialObjectNames()) {    initialObjectField.add(getLabel(objectName));  }  if (initialObjectField.getItemCount() == 1) {    initialObjectField.select(0);  }  initialObjectField.addModifyListener(validator);  Label encodingLabel=new Label(composite,SWT.LEFT);{    encodingLabel.setText(EipEditorPlugin.INSTANCE.getString("_UI_XMLEncoding"));    GridData data=new GridData();    data.horizontalAlignment=GridData.FILL;    encodingLabel.setLayoutData(data);  }  encodingField=new Combo(composite,SWT.BORDER);{    GridData data=new GridData();    data.horizontalAlignment=GridData.FILL;    data.grabExcessHorizontalSpace=true;    encodingField.setLayoutData(data);  }  for (  String encoding : getEncodings()) {    encodingField.add(encoding);  }  encodingField.select(0);  encodingField.addModifyListener(validator);  setPageComplete(validatePage());  setControl(composite);}  }
class C{  private void dynInit(){  ArrayList<KeyNamePair> clients=getClientList();  for (  KeyNamePair client : clients)   cbClient.addItem(client);  ArrayList<ValueNamePair> languages=getLanguageList();  for (  ValueNamePair language : languages)   cbLanguage.addItem(language);  ArrayList<ValueNamePair> tables=getTableList();  for (  ValueNamePair table : tables)   cbTable.addItem(table);  setStatusBar(statusBar);}  }
class C{  public static long sizeof(Class clazz,boolean roundResult){  Assert.assertTrue(!clazz.isArray());  long size;  if (unsafe != null) {    Field lastField=null;    long lastFieldOffset=0;    do {      Field[] fields=clazz.getDeclaredFields();      for (      Field field : fields) {        if (!Modifier.isStatic(field.getModifiers())) {          long offset=unsafe.fieldOffset(field);          if (offset >= lastFieldOffset) {            lastFieldOffset=offset;            lastField=field;          }        }      }      if (lastField != null) {        break;      }      clazz=clazz.getSuperclass();    } while (clazz != null);    if (lastField != null) {      size=lastFieldOffset + sizeType(lastField.getType());    } else {      size=OBJECT_SIZE;    }  } else {    size=OBJECT_SIZE;    do {      Field[] fields=clazz.getDeclaredFields();      for (      Field field : fields) {        if (!Modifier.isStatic(field.getModifiers())) {          size+=sizeType(field.getType());        }      }      clazz=clazz.getSuperclass();    } while (clazz != null);  }  if (roundResult) {    size=roundUpSize(size);  }  return size;}  }
class C{  private static void checkApiKey(WatsonService service,String apiKey){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public TableDataElement(String paramString,Element e){  super("td",paramString,e);}  }
class C{  public void selectDoNotFireEvent(final int index){  select(index,false);}  }
class C{  public void testSyncDistribution() throws Exception {  int loopSize=100;  int syncInterval=10;  TungstenProperties conf=generateConfig();  PluginContext context=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  for (int queueCount=1; queueCount < 10; queueCount++) {    ParallelQueueStore pqs=new ParallelQueueStore();    pqs.setPartitions(queueCount);    pqs.setMaxSize(200);    pqs.setSyncEnabled(true);    pqs.setSyncInterval(syncInterval);    pqs.configure(context);    pqs.prepare(context);    assertEquals("N partitions defined",queueCount,pqs.getPartitions());    logger.info("# of partitions: " + queueCount);    for (int i=0; i < loopSize; i++) {      ReplDBMSEvent event=createEvent(i);      pqs.put(0,event);    }    int expectedSyncEvents=loopSize / syncInterval;    int expectedEvents=loopSize + expectedSyncEvents;    assertEquals("Partition has generated plus events sync events",expectedEvents,pqs.size(0));    for (int i=0; i < loopSize; i++) {      ReplDBMSEvent event1=(ReplDBMSEvent)pqs.get(0);      assertEquals("First event has same seqno as loop counter",i,event1.getSeqno());      if ((i + 1) % syncInterval == 0) {        ReplEvent ctl=pqs.get(0);        assertTrue("Control event",ctl instanceof ReplControlEvent);        ReplDBMSHeader event2=((ReplControlEvent)ctl).getHeader();        assertEquals("Control event contains previous event",event1.getSeqno(),event2.getSeqno());      }    }    pqs.release(context);  }}  }
class C{  public CoapClient useNONs(){  this.type=Type.NON;  return this;}  }
class C{  protected void paintComponent(Graphics g){  if (isDragging) {    danger=true;  }  super.paintComponent(g);}  }
class C{  public static File rename(File src,String name){  File ret=new File(src.getParentFile(),name);  if (src.renameTo(ret))   return ret; else   return null;}  }
class C{  public ByteBuffer decode(ByteBuffer buf) throws IgniteCheckedException, SSLException {  inNetBuf.clear();  if (buf.limit() > inNetBuf.remaining()) {    inNetBuf=expandBuffer(inNetBuf,inNetBuf.capacity() + buf.limit() * 2);    appBuf=expandBuffer(appBuf,inNetBuf.capacity() * 2);    if (log.isDebugEnabled())     log.debug("Expanded buffers [inNetBufCapacity=" + inNetBuf.capacity() + ", appBufCapacity="+ appBuf.capacity()+ ']');  }  inNetBuf.put(buf);  if (!handshakeFinished)   handshake(); else   unwrapData();  if (isInboundDone()) {    int newPosition=buf.position() - inNetBuf.position();    if (newPosition >= 0) {      buf.position(newPosition);      if (buf.hasRemaining())       U.warn(log,"Got unread bytes after receiving close_notify message (will ignore).");    }    inNetBuf.clear();  }  appBuf.flip();  return appBuf;}  }
class C{  public CircuitBreakerBuilder counterSlidingWindowMillis(long counterSlidingWindowMillis){  counterSlidingWindow(Duration.ofMillis(counterSlidingWindowMillis));  return this;}  }
class C{  public static long parseXsDateTime(String value) throws ParseException {  Matcher matcher=XS_DATE_TIME_PATTERN.matcher(value);  if (!matcher.matches()) {    throw new ParseException("Invalid date/time format: " + value,0);  }  int timezoneShift;  if (matcher.group(9) == null) {    timezoneShift=0;  } else   if (matcher.group(9).equalsIgnoreCase("Z")) {    timezoneShift=0;  } else {    timezoneShift=((Integer.parseInt(matcher.group(12)) * 60 + Integer.parseInt(matcher.group(13))));    if (matcher.group(11).equals("-")) {      timezoneShift*=-1;    }  }  Calendar dateTime=new GregorianCalendar(TimeZone.getTimeZone("GMT"));  dateTime.clear();  dateTime.set(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)) - 1,Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)),Integer.parseInt(matcher.group(5)),Integer.parseInt(matcher.group(6)));  if (!TextUtils.isEmpty(matcher.group(8))) {    final BigDecimal bd=new BigDecimal("0." + matcher.group(8));    dateTime.set(Calendar.MILLISECOND,bd.movePointRight(3).intValue());  }  long time=dateTime.getTimeInMillis();  if (timezoneShift != 0) {    time-=timezoneShift * 60000;  }  return time;}  }
class C{  public void clear(String className,String methodName){  if (rawCFGs.containsKey(className))   rawCFGs.get(className).remove(methodName);  if (actualCFGs.containsKey(className))   actualCFGs.get(className).remove(methodName);  if (controlDependencies.containsKey(className))   controlDependencies.get(className).remove(methodName);}  }
class C{  public AsyncResult AddReferencesAsync(RequestHeader RequestHeader,AddReferencesItem... ReferencesToAdd){  AddReferencesRequest req=new AddReferencesRequest(RequestHeader,ReferencesToAdd);  return channel.serviceRequestAsync(req);}  }
class C{  public ExponentialLogisticModel(Parameter N0Parameter,Parameter logisticGrowthParameter,Parameter logisticShapeParameter,Parameter exponentialGrowthParameter,Parameter transitionTimeParameter,double alpha,Type units){  this(ExponentialLogisticModelParser.EXPONENTIAL_LOGISTIC_MODEL,N0Parameter,logisticGrowthParameter,logisticShapeParameter,exponentialGrowthParameter,transitionTimeParameter,alpha,units);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttribute;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  String attrValue;  doc=(Document)load("staff",true);  newAttribute=doc.createAttribute("district");  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(3);  domesticAttr=testEmployee.setAttributeNode(newAttribute);  attrValue=testEmployee.getAttribute("district");  assertEquals("elementGetElementEmptyAssert","",attrValue);}  }
class C{  public static void showNotification(Project project,MessageType type,String text){  StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);  JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text,type,null).setFadeoutTime(7500).createBalloon().show(RelativePoint.getCenterOf(statusBar.getComponent()),Balloon.Position.atRight);}  }
class C{  public static IgniteClosure<ClusterNode,UUID> node2id(){  return NODE2ID;}  }
class C{  public static void shuffle(List<?> list,Random random){  @SuppressWarnings("unchecked") final List<Object> objectList=(List<Object>)list;  if (list instanceof RandomAccess) {    for (int i=objectList.size() - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      objectList.set(index,objectList.set(i,objectList.get(index)));    }  } else {    Object[] array=objectList.toArray();    for (int i=array.length - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      Object temp=array[i];      array[i]=array[index];      array[index]=temp;    }    int i=0;    ListIterator<Object> it=objectList.listIterator();    while (it.hasNext()) {      it.next();      it.set(array[i++]);    }  }}  }
class C{  public MyRoutingModule(final Provider<RoutingModule> routingDelegate,final PopulationFactory populationFactory,final Facility station){  this.routingDelegate=routingDelegate;  this.populationFactory=populationFactory;  this.modeRouteFactory=((PopulationFactory)populationFactory).getRouteFactories();  this.station=station;}  }
class C{  public void pack(){  debugGui.pack();}  }
class C{  public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null)   throw new ParseException("JAIN-SIP Exception, some parameters are missing" + ", unable to create the response",0);  SIPResponse sipResponse=new SIPResponse();  sipResponse.setStatusCode(statusCode);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setMaxForwards(maxForwards);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  public boolean isTopicNameValid(String topicName){  return !StringUtils.isEmpty(topicName) && !topicName.contains("+") && !topicName.contains("#")&& (this.topicNamePattern == null || this.topicNamePattern.matcher(topicName).matches());}  }
