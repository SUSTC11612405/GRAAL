class C{  public void write(Color c,String s) throws IOException {  if (page != null) {    page.setColor(c);  }  write(s);  if (page != null) {    page.setColor(color);  }}  }
class C{  public PatternEveryDistinctExpr(List<Expression> expressions){  this.expressions=expressions;}  }
class C{  public static void sort(int[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isOutputFormatDefined()) {    Instance newInstance=(Instance)instance.copy();    for (int i=0; i < newInstance.numAttributes(); i++) {      if (newInstance.attribute(i).isString() && !newInstance.isMissing(i) && m_AttIndices.isInRange(i)) {        Attribute outAtt=getOutputFormat().attribute(newInstance.attribute(i).name());        String inVal=newInstance.stringValue(i);        int outIndex=outAtt.indexOfValue(inVal);        if (outIndex < 0) {          newInstance.setMissing(i);        } else {          newInstance.setValue(i,outIndex);        }      }    }    push(newInstance);    return true;  }  bufferInput(instance);  return false;}  }
class C{  protected void printWarning(final String message,final Object... args){  getGfsh().printAsWarning(String.format(message,args));}  }
class C{  public static byte[] decode(int[] freq,byte[] data,int length){  scaleFrequencies(freq,1 << SHIFT);  int[] cumulativeFreq=generateCumulativeFrequencies(freq);  byte[] freqToCode=generateFrequencyToCode(cumulativeFreq);  byte[] out=new byte[length];  decode(data,freq,cumulativeFreq,freqToCode,out);  return out;}  }
class C{  public StringBuffer insert(int index,float f){  return insert(index,Float.toString(f));}  }
class C{  public boolean isSetA_set2500(){  return this.a_set2500 != null;}  }
class C{  private void handleError(ImsError error){  if (sLogger.isActivated()) {    sLogger.info("Registration has failed: " + error.getErrorCode() + ", reason="+ error.getMessage());  }  mRegistered=false;  mReasonCode=ReasonCode.CONNECTION_LOST;  stopTimer();  resetDialogPath();  mCore.getListener().onRegistrationFailed(error);}  }
class C{  private static img createControlButtonImage(String name,String js_command,boolean enabled){  StringBuffer imgName=new StringBuffer("wf" + name);  if (!enabled)   imgName.append("D");  imgName.append("24.gif");  img img=new img(MobileEnv.getImageDirectory(imgName.toString()),name);  if (enabled)   img.setAlt(Msg.getMsg(AD_Language,name));  img.setID("imgButton");  if (js_command != null && js_command.length() > 0 && enabled) {    img.setOnClick("document." + FORM_NAME + "."+ M_Command+ ".value='"+ name+ "';"+ js_command);  }  return img;}  }
class C{  public boolean loadVSDecoderProfile(java.io.File f) throws java.io.IOException {  try {    VSDecoderPrefs prefs=new VSDecoderPrefs();    Element root=prefs.rootFromFile(f);    List<Element> profiles=root.getChildren("VSDecoder");    if ((profiles != null) && (profiles.size() > 0)) {      for (java.util.Iterator<Element> i=profiles.iterator(); i.hasNext(); ) {        Element e=i.next();        log.debug(e.toString());      }    }  } catch (  org.jdom2.JDOMException ex) {    log.warn("Loading VSDecoder Profile exception",ex);    return false;  }  return true;}  }
class C{  public Map parseCatalog(InputSource inputSource){  XMLReader xmlReader=XMLResource.newXMLReader();  CatalogContentHandler ch=new CatalogContentHandler();  addHandlers(xmlReader,ch);  setFeature(xmlReader,"http://xml.org/sax/features/validation",false);  try {    xmlReader.parse(inputSource);  } catch (  Exception ex) {    throw new RuntimeException("Failed on configuring SAX to DOM transformer.",ex);  }  return ch.getEntityMap();}  }
class C{  public VPlexVirtualVolumeInfo findVirtualVolumeAndUpdateInfo(String virtualVolumeName,VPlexApiDiscoveryManager discoveryMgr){  VPlexVirtualVolumeInfo virtualVolumeInfo=null;  if (null == discoveryMgr) {    discoveryMgr=_vplexApiClient.getDiscoveryManager();  }  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    String clusterName=clusterInfo.getName();    virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterName,virtualVolumeName,false);    if (virtualVolumeInfo != null) {      discoveryMgr.updateVirtualVolumeInfo(clusterName,virtualVolumeInfo);      break;    }  }  if (virtualVolumeInfo == null) {    throw VPlexApiException.exceptions.cantFindRequestedVolume(virtualVolumeName);  }  return virtualVolumeInfo;}  }
class C{  private void findNext(){  while (iterator != null) {    while (iterator.hasNext()) {      next=iterator.next();      if (next.isVisible()) {        return;      }    }    nextIterator();  }  if (next != null && !next.isVisible()) {    next=null;  }}  }
class C{  public void dispose(){  if (namedElementItemProvider != null)   namedElementItemProvider.dispose();  if (documentedElementItemProvider != null)   documentedElementItemProvider.dispose();  if (domainElementItemProvider != null)   domainElementItemProvider.dispose();}  }
class C{  public CSP(){  variables=new ArrayList<Variable>();  domains=new ArrayList<Domain>();  constraints=new ArrayList<Constraint>();  varIndexHash=new Hashtable<Variable,Integer>();  cnet=new Hashtable<Variable,List<Constraint>>();}  }
class C{  public boolean checkExpireTime(){  return !this.json.has("expires_on") || this.json.getLong("expires_on") > Instant.now().getEpochSecond();}  }
class C{  public void eFeature1Init(int y,int yp){  ftype=EDGE_FEATURE1;  idx=-1;  this.y=y;  this.yp=yp;  val=1;  wgt=0.0;  strId="e1_" + Integer.toString(y) + "_"+ Integer.toString(yp);}  }
class C{  public static PatchResult load(Context context,String apkPath,HashMap<String,Object> contentMap){  if (!new File(apkPath).exists()) {    return new PatchResult(false,PatchResult.FILE_NOT_FOUND,"FILE not found on " + apkPath);  }  PatchResult result=loadAllCallbacks(context,apkPath,context.getClassLoader());  if (!result.isSuccess()) {    return result;  }  if (loadedPatchCallbacks.getSize() == 0) {    return new PatchResult(false,PatchResult.NO_PATCH_CLASS_HANDLE,"No patch class to be handle");  }  PatchParam lpparam=new PatchParam(loadedPatchCallbacks);  lpparam.context=context;  lpparam.contentMap=contentMap;  return PatchCallback.callAll(lpparam);}  }
class C{  private void pruneAndReAddToDynamicActions(List<ComponentStruct> dynamicActionList,ComponentStruct struct){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletFullStateManagementStrategy.pruneAndReAddToDynamicActions");  }  int firstIndex=dynamicActionList.indexOf(struct);  if (firstIndex == -1) {    dynamicActionList.add(struct);  } else {    int lastIndex=dynamicActionList.lastIndexOf(struct);    if (lastIndex == -1 || lastIndex == firstIndex) {      dynamicActionList.add(struct);    } else {      if (ComponentStruct.ADD.equals(struct.action)) {        dynamicActionList.remove(lastIndex);        dynamicActionList.remove(firstIndex);        dynamicActionList.add(struct);      }      if (ComponentStruct.REMOVE.equals(struct.action)) {        dynamicActionList.remove(lastIndex);      }    }  }}  }
class C{  protected void handleTitle(char text[]){  handleText(text);}  }
class C{  public boolean containsTaskWithRequestId(String requestIdKey,String requestId) throws KeeperException, InterruptedException {  List<String> childNames=zookeeper.getChildren(dir,null,true);  stats.setQueueLength(childNames.size());  for (  String childName : childNames) {    if (childName != null && childName.startsWith(PREFIX)) {      try {        byte[] data=zookeeper.getData(dir + "/" + childName,null,null,true);        if (data != null) {          ZkNodeProps message=ZkNodeProps.load(data);          if (message.containsKey(requestIdKey)) {            LOG.debug(">>>> {}",message.get(requestIdKey));            if (message.get(requestIdKey).equals(requestId))             return true;          }        }      } catch (      KeeperException.NoNodeException e) {      }    }  }  return false;}  }
class C{  protected synchronized void fetchAd(){  Context context=mContext.get();  if (context != null) {    Log.i(TAG,"Fetching Ad now");    if (lockFetch.getAndSet(true))     return;    mFetchingAdsCnt++;    adLoader.loadAd(getAdRequest());  } else {    mFetchFailCount++;    Log.i(TAG,"Context is null, not fetching Ad");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RequestInputDataMultipart(String clientUrl,TestRequest testRequest,int attachmentSize){  super(clientUrl,testRequest);  this.attachmentSize=attachmentSize;}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  public JmDNSImpl(InetAddress address,String name) throws IOException {  super();  if (logger.isLoggable(Level.FINER)) {    logger.finer("JmDNS instance created");  }  _cache=new DNSCache(100);  _listeners=Collections.synchronizedList(new ArrayList<DNSListener>());  _serviceListeners=new ConcurrentHashMap<String,List<ServiceListenerStatus>>();  _typeListeners=Collections.synchronizedSet(new HashSet<ServiceTypeListenerStatus>());  _serviceCollectors=new ConcurrentHashMap<String,ServiceCollector>();  _services=new ConcurrentHashMap<String,ServiceInfo>(20);  _serviceTypes=new ConcurrentHashMap<String,ServiceTypeEntry>(20);  _localHost=HostInfo.newHostInfo(address,this,name);  _name=(name != null ? name : _localHost.getName());  this.openMulticastSocket(this.getLocalHost());  this.start(this.getServices().values());  this.startReaper();}  }
class C{  public Object lookup(String id){  return null;}  }
class C{  @SuppressWarnings("unchecked") public AdjacencyMatrix(Graph g,boolean trackCommonNeighbors){  rows=new ArrayList<TIntArrayList>(g.getVertices().size());  if (trackCommonNeighbors)   commonNeighbors=new ArrayList<TIntIntHashMap>(g.getVertices().size());  vertices=new ArrayList<V>(g.getVertices().size());  vertexIndicies=new TObjectIntHashMap<Vertex>();  int idx=0;  for (  Vertex v : g.getVertices()) {    vertexIndicies.put(v,idx);    vertices.add((V)v);    addVertex();    idx++;  }  for (  Edge e : g.getEdges()) {    Tuple<? extends Vertex,? extends Vertex> p=e.getVertices();    int i=-1;    if (vertexIndicies.contains(p.getFirst()))     i=vertexIndicies.get(p.getFirst());    int j=-1;    if (vertexIndicies.contains(p.getSecond()))     j=vertexIndicies.get(p.getSecond());    if (i > -1 && j > -1) {      addEdge(i,j);    } else {      throw new IllegalArgumentException(String.format("Indices i=%1$s, j=%2$s not allowed!",i,j));    }  }}  }
class C{  public static byte[] calculateDigest(DigestCalculator dc,byte[] data) throws IOException {  dc.getOutputStream().write(data);  dc.getOutputStream().close();  return dc.getDigest();}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {  writeLines(file,encoding,lines,null,false);}  }
class C{  public long stime(){  return Long.parseLong(fields[14]);}  }
class C{  @NotNull public PsiElement findAssignmentWord(){  if (assignmentWord == null) {    PsiElement element=findChildByType(accepted);    if (element != null) {      assignmentWord=element;    } else {      PsiElement firstChild=getFirstChild();      ASTNode childNode=firstChild != null ? firstChild.getNode() : null;      ASTNode node=childNode != null ? childNode.findChildByType(accepted) : null;      assignmentWord=(node != null) ? node.getPsi() : firstChild;    }  }  return assignmentWord;}  }
class C{  public noscript removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static char lowSurrogate(int c){  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);}  }
class C{  protected boolean isConsumed(SelectEvent event){  return event.isConsumed() || (event.getMouseEvent() != null && event.getMouseEvent().isConsumed());}  }
class C{  public void writeWithoutAlpha(OutStream out) throws IOException {  write(out);}  }
class C{  private boolean shouldValidateType(TypeDeclaration typeDecl){  if (typeDecl.isInterface()) {    return false;  }  IType ownerType=getType(typeDecl);  if (ownerType == null) {    return false;  }  if (!uiBinderToOwner.isOwnerType(ownerType.getFullyQualifiedName('.'))) {    return false;  }  if (typeDecl.resolveBinding() == null) {    GWTPluginLog.logWarning("Could not resolve binding for " + typeDecl.getName().getFullyQualifiedName());    return false;  }  return true;}  }
class C{  public Matrix3f scale(float xyz){  return scale(xyz,xyz,xyz);}  }
class C{  public static int longHi32(long lVal){  return (int)((lVal >>> 32));}  }
class C{  public Matrix3f rotationY(float ang){  float sin, cos;  if (ang == (float)Math.PI || ang == -(float)Math.PI) {    cos=-1.0f;    sin=0.0f;  } else   if (ang == (float)Math.PI * 0.5f || ang == -(float)Math.PI * 1.5f) {    cos=0.0f;    sin=1.0f;  } else   if (ang == (float)-Math.PI * 0.5f || ang == (float)Math.PI * 1.5f) {    cos=0.0f;    sin=-1.0f;  } else {    cos=(float)Math.cos(ang);    sin=(float)Math.sin(ang);  }  m00=cos;  m01=0.0f;  m02=-sin;  m10=0.0f;  m11=1.0f;  m12=0.0f;  m20=sin;  m21=0.0f;  m22=cos;  return this;}  }
class C{  public NbtTagFloat(String name,float value){  super(name);  this.value=value;}  }
class C{  public void runButtonActionPerformed(java.awt.event.ActionEvent e){  if (!mRunButton.isSelected()) {    return;  }  boolean ok=false;  for (int i=0; i < MAXSEQUENCE; i++) {    if (mUseField[i].isSelected()) {      ok=true;    }  }  if (!ok) {    mRunButton.setSelected(false);    return;  }  mNextSequenceElement=0;  sendNextItem();}  }
class C{  public GridDataGenerator(ContinuousDistribution noiseSource,Random rand,int... dimensions){  this.noiseSource=noiseSource;  this.rand=rand;  this.dimensions=dimensions;  for (int i=0; i < dimensions.length; i++)   if (dimensions[i] <= 0)   throw new ArithmeticException("The " + i + "'th dimensino contains the non positive value "+ dimensions[i]);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  boolean isInTransaction(CompositeTransaction ct){  boolean ret=false;  CompositeTransaction tx=transaction;  if (tx != null && ct != null) {    ret=tx.isSameTransaction(ct);  }  return ret;}  }
class C{  public static <K,V>Map<K,V> singletonMap(K key,V value){  return new SingletonMap<K,V>(key,value);}  }
class C{  public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false;  SIPResponse that=(SIPResponse)other;  return statusLine.equals(that.statusLine) && super.equals(other);}  }
class C{  private static TranslationResult processSimpleMemoryAccessLiteralOrRegisterLoad(ITranslationEnvironment environment,IOperandTreeNode segmentOverride,OperandSize size,boolean loadOperand,TranslationResult intermediateResult){  final OperandSize archSize=environment.getArchitectureSize();  final String childResult=intermediateResult.getRegister();  final String loadTarget=environment.getNextVariableString();  if (segmentOverride != null) {    final String pseudoRegister=getSegmentOverridePseudoRegister(segmentOverride);    final String nextVariableString=environment.getNextVariableString();    intermediateResult.addInstruction(ReilHelpers.createAdd(0,archSize,childResult,archSize,pseudoRegister,archSize,nextVariableString));    if (loadOperand) {      intermediateResult.addInstruction(ReilHelpers.createLdm(0,archSize,nextVariableString,size,loadTarget));      intermediateResult.updateResult(loadTarget,size,nextVariableString,TranslationResultType.MEMORY_ACCESS);    } else {      intermediateResult.updateResult(nextVariableString,size,nextVariableString,TranslationResultType.MEMORY_ACCESS);    }  } else {    if (loadOperand) {      intermediateResult.addInstruction(ReilHelpers.createLdm(0,archSize,childResult,size,loadTarget));      intermediateResult.updateResult(loadTarget,size,childResult,TranslationResultType.MEMORY_ACCESS);    } else {      intermediateResult.updateResult(intermediateResult.getRegister(),size,childResult,TranslationResultType.MEMORY_ACCESS);    }  }  return intermediateResult;}  }
class C{  public TimeEvent createTimeEvent(){  TimeEventImpl timeEvent=new TimeEventImpl();  return timeEvent;}  }
class C{  @Nullable public static byte[] decodeFromFile(String filename){  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      System.err.println("File is too big for this convenience method (" + file.length() + " bytes).");      return null;    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    System.err.println("Error decoding from file " + filename);  } finally {    try {      if (bis != null) {        bis.close();      }    } catch (    Exception e) {      e.printStackTrace();    }  }  return decodedData;}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,new int[]{},new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new int[]{6,18},new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new int[]{6,22},new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new int[]{6,26},new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new int[]{6,30},new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new int[]{6,34},new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new int[]{6,22,38},new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new int[]{6,24,42},new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new int[]{6,26,46},new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new int[]{6,28,50},new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new int[]{6,30,54},new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new int[]{6,32,58},new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new int[]{6,34,62},new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new int[]{6,26,46,66},new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new int[]{6,26,48,70},new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new int[]{6,26,50,74},new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new int[]{6,30,54,78},new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new int[]{6,30,56,82},new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new int[]{6,30,58,86},new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new int[]{6,34,62,90},new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new int[]{6,28,50,72,94},new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new int[]{6,26,50,74,98},new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new int[]{6,30,54,78,102},new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new int[]{6,28,54,80,106},new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new int[]{6,32,58,84,110},new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new int[]{6,30,58,86,114},new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new int[]{6,34,62,90,118},new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new int[]{6,26,50,74,98,122},new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new int[]{6,30,54,78,102,126},new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new int[]{6,26,52,78,104,130},new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new int[]{6,30,56,82,108,134},new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new int[]{6,34,60,86,112,138},new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new int[]{6,30,58,86,114,142},new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new int[]{6,34,62,90,118,146},new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new int[]{6,30,54,78,102,126,150},new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new int[]{6,24,50,76,102,128,154},new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new int[]{6,28,54,80,106,132,158},new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new int[]{6,32,58,84,110,136,162},new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new int[]{6,26,54,82,110,138,166},new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new int[]{6,30,58,86,114,142,170},new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16)))};}  }
class C{  public void serialize(OutputStream out,Object object,SerializationType serializationType) throws IOException {  writeHeader(out,serializationType);  serializationType.getBodySerializer().serialize(object,out);  out.flush();}  }
class C{  public static int numOfParameters(String desc){  int n=0;  int i=1;  for (; ; ) {    char c=desc.charAt(i);    if (c == ')')     break;    while (c == '[')     c=desc.charAt(++i);    if (c == 'L') {      i=desc.indexOf(';',i) + 1;      if (i <= 0)       throw new IndexOutOfBoundsException("bad descriptor");    } else     ++i;    ++n;  }  return n;}  }
class C{  public static String asString(Object field){  return new RecordWriter().append(field).toString();}  }
class C{  private void sendNotification(Object notification){  emitter.sendNotification((Notification)notification);}  }
class C{  public NTRUSigningKeyGenerationParameters(int N,int q,int d,int B,int basisType,double beta,double normBound,double keyNormBound,boolean primeCheck,boolean sparse,int keyGenAlg,Digest hashAlg){  super(new SecureRandom(),N);  this.N=N;  this.q=q;  this.d=d;  this.B=B;  this.basisType=basisType;  this.beta=beta;  this.normBound=normBound;  this.keyNormBound=keyNormBound;  this.primeCheck=primeCheck;  this.sparse=sparse;  this.keyGenAlg=keyGenAlg;  this.hashAlg=hashAlg;  polyType=NTRUParameters.TERNARY_POLYNOMIAL_TYPE_SIMPLE;  init();}  }
class C{  public Configuration apiKey(String apiKey){  this.apiKey=apiKey;  return this;}  }
class C{  public InterferenceGraph(int countRegs){  interference=new ArrayList<IntSet>(countRegs);  for (int i=0; i < countRegs; i++) {    interference.add(SetFactory.makeInterferenceSet(countRegs));  }}  }
class C{  public synchronized void drop(DropTargetDropEvent dtde){  isDraggingInside=false;  clearAutoscroll();  if (dtListener != null && active)   dtListener.drop(dtde); else {    dtde.rejectDrop();  }}  }
class C{  public static ApexStream<byte[]> fromKafka09(String brokers,String topic,Option... opts){  KafkaSinglePortInputOperator kafkaInput=new KafkaSinglePortInputOperator();  kafkaInput.setClusters(brokers);  kafkaInput.setTopics(topic);  ApexStreamImpl<String> newStream=new ApexStreamImpl<>();  return newStream.addOperator(kafkaInput,null,kafkaInput.outputPort,opts);}  }
class C{  private static void mergeWordCountsResponses(WordCountsResponse result,WordCountsResponse other){  other.wordCounts.forEach(null);  result.failedDocsCount+=other.failedDocsCount;}  }
class C{  private void addObjectToUnManagedConsistencyGroup(com.emc.storageos.db.client.model.StorageSystem storageSystem,String cgNativeId,UnManagedVolume unManagedVolume,Set<URI> allCurrentUnManagedCgURIs,Map<String,UnManagedConsistencyGroup> unManagedCGToUpdateMap,BlockStorageDriver driver,DbClient dbClient) throws Exception {  log.info("UnManaged storage object {} belongs to consistency group {} on the array",unManagedVolume.getLabel(),cgNativeId);  String unManagedCGNativeGuid=NativeGUIDGenerator.generateNativeGuidForCG(storageSystem.getNativeGuid(),cgNativeId);  log.info("UnManaged consistency group has nativeGuid {} ",unManagedCGNativeGuid);  UnManagedConsistencyGroup unManagedCG=null;  if (unManagedCGToUpdateMap.containsKey(unManagedCGNativeGuid)) {    unManagedCG=unManagedCGToUpdateMap.get(unManagedCGNativeGuid);    log.info("UnManaged consistency group {} was previously added to the unManagedCGToUpdateMap",unManagedCG.getNativeGuid());  } else {    unManagedCG=DiscoveryUtils.checkUnManagedCGExistsInDB(dbClient,unManagedCGNativeGuid);    if (null == unManagedCG) {      VolumeConsistencyGroup driverCG=driver.getStorageObject(storageSystem.getNativeId(),cgNativeId,VolumeConsistencyGroup.class);      if (driverCG != null) {        unManagedCG=createUnManagedCG(driverCG,storageSystem,dbClient);        log.info("Created unManaged consistency group: {} with nativeGuid {}",unManagedCG.getId().toString(),unManagedCG.getNativeGuid());      } else {        String msg=String.format("Driver VolumeConsistencyGroup with native id %s does not exist on storage system %s",cgNativeId,storageSystem.getNativeId());        log.error(msg);        throw new Exception(msg);      }    } else {      log.info("UnManaged consistency group {} was previously added to the database (by previous unManaged discovery).",unManagedCG.getNativeGuid());      log.info("Cleaning out unManaged object map from unManaged consistency group: {}",unManagedCG.getNativeGuid());      unManagedCG.getUnManagedVolumesMap().clear();    }  }  log.info("Adding unManaged storage object {} to unManaged consistency group {}",unManagedVolume.getLabel(),unManagedCG.getNativeGuid());  unManagedVolume.getVolumeCharacterstics().put(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),Boolean.TRUE.toString());  unManagedVolume.getVolumeInformation().remove(UnManagedVolume.SupportedVolumeInformation.UNMANAGED_CONSISTENCY_GROUP_URI.toString());  unManagedVolume.getVolumeInformation().put(UnManagedVolume.SupportedVolumeInformation.UNMANAGED_CONSISTENCY_GROUP_URI.toString(),unManagedCG.getId().toString());  unManagedCG.getUnManagedVolumesMap().put(unManagedVolume.getNativeGuid(),unManagedVolume.getId().toString());  unManagedCGToUpdateMap.put(unManagedCGNativeGuid,unManagedCG);  allCurrentUnManagedCgURIs.add(unManagedCG.getId());}  }
class C{  public boolean testVar(int varNumber){  long bit=(1L << varNumber);  if (varNumber >= VBITS) {    int i=(varNumber / VBITS - 1) * 2;    if (i >= x.length) {      return (x == fullX);    }    return (x[i] & bit) != 0;  } else {    return (vset & bit) != 0;  }}  }
class C{  public void restoreState(){  super.restoreState();}  }
class C{  public static double exp(double x){  return exp(x,0.0,null);}  }
class C{  public static void unset(final ASTNode n,final String key){  if (n != null)   n.setProperty(key,null);}  }
class C{  private void addValueInRefsTable(XPathContext xctxt,XMLString ref,int node){  XNodeSet nodes=(XNodeSet)m_refsTable.get(ref);  if (nodes == null) {    nodes=new XNodeSet(node,xctxt.getDTMManager());    nodes.nextNode();    m_refsTable.put(ref,nodes);  } else {    if (nodes.getCurrentNode() != node) {      nodes.mutableNodeset().addNode(node);      nodes.nextNode();    }  }}  }
class C{  public TraceList(final int id,final String name,final String description,final SQLProvider provider){  Preconditions.checkArgument(id >= 0,"IE00777: ID argument can not be null");  traceName=Preconditions.checkNotNull(name,"IE00778: Name can not be null");  traceDescription=Preconditions.checkNotNull(description,"IE00779: Comment can not be null");  sqlProvider=Preconditions.checkNotNull(provider,"IE00780: Provider argument can not be null");  this.id=id;}  }
class C{  protected void useInputStream(InputStream in) throws IOException {  try {    this.in=new ScannerInputReader(env,in);  } catch (  Exception e) {    env.setCharacterEncoding(null);    this.in=new ScannerInputReader(env,in);  }  ch=this.in.read();  prevPos=this.in.pos;  scan();}  }
class C{  public final LC height(String height){  setHeight(ConstraintParser.parseBoundSize(height,false,false));  return this;}  }
class C{  protected double[] calculateBarL0L1(double value){  double lclip=getLowerClip();  double uclip=getUpperClip();  double barLow=Math.min(this.base,value);  double barHigh=Math.max(this.base,value);  if (barHigh < lclip) {    return null;  }  if (barLow > uclip) {    return null;  }  barLow=Math.max(barLow,lclip);  barHigh=Math.min(barHigh,uclip);  return new double[]{barLow,barHigh};}  }
class C{  public static boolean prefixedWith(String a,String b){  if (a.equals(b)) {    return false;  }  return a.startsWith(b);}  }
class C{  public static final short BuildShortBE(byte bytevec[],int offset){  return (short)(((int)(bytevec[0 + offset]) << 8) | (signedToInt(bytevec[1 + offset])));}  }
class C{  public boolean isEmpty(){  long sum=0L;  final Segment<K,V>[] segments=this.segments;  for (int j=0; j < segments.length; ++j) {    Segment<K,V> seg=segmentAt(segments,j);    if (seg != null) {      if (seg.count != 0)       return false;      sum+=seg.modCount;    }  }  if (sum != 0L) {    for (int j=0; j < segments.length; ++j) {      Segment<K,V> seg=segmentAt(segments,j);      if (seg != null) {        if (seg.count != 0)         return false;        sum-=seg.modCount;      }    }    if (sum != 0L)     return false;  }  return true;}  }
class C{  public boolean isPrepareSplitDocument(){  Object oo=get_Value(COLUMNNAME_IsPrepareSplitDocument);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void add(long[] vals,int offset,int length){  ensureCapacity(_pos + length);  System.arraycopy(vals,offset,_data,_pos,length);  _pos+=length;}  }
class C{  public static void gluTessProperty(GLUtessellator tessellator,int which,double value){  GLUtessellatorImpl tess=(GLUtessellatorImpl)tessellator;  tess.gluTessProperty(which,value);}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Show results") == 0) {    showResults();  } else {    throw new IllegalArgumentException(request + " not supported (GraphViewer)");  }}  }
class C{  public BollingerBandsDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  public Set<UserParticipant> joinRoom(String userName,String roomName,boolean dataChannels,boolean webParticipant,KurentoClientSessionInfo kcSessionInfo,String participantId) throws RoomException {  log.debug("Request [JOIN_ROOM] user={}, room={}, web={} " + "kcSessionInfo.room={} ({})",userName,roomName,webParticipant,kcSessionInfo != null ? kcSessionInfo.getRoomName() : null,participantId);  Room room=rooms.get(roomName);  if (room == null && kcSessionInfo != null) {    createRoom(kcSessionInfo);  }  room=rooms.get(roomName);  if (room == null) {    log.warn("Room '{}' not found");    throw new RoomException(Code.ROOM_NOT_FOUND_ERROR_CODE,"Room '" + roomName + "' was not found, must be created before '"+ userName+ "' can join");  }  if (room.isClosed()) {    log.warn("'{}' is trying to join room '{}' but it is closing",userName,roomName);    throw new RoomException(Code.ROOM_CLOSED_ERROR_CODE,"'" + userName + "' is trying to join room '"+ roomName+ "' but it is closing");  }  Set<UserParticipant> existingParticipants=getParticipants(roomName);  room.join(participantId,userName,dataChannels,webParticipant);  return existingParticipants;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT:    setImportedElement((TExportableElement)null);  return;case N4JSPackage.NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT_AS_TEXT:setImportedElementAsText(IMPORTED_ELEMENT_AS_TEXT_EDEFAULT);return;case N4JSPackage.NAMED_IMPORT_SPECIFIER__ALIAS:setAlias(ALIAS_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static void i(String message,Throwable cause){  Log.i(LOG_TAG,"[" + message + "]",cause);}  }
class C{  public JIntegerField(Composite parent,int style,int value){  this(parent,style,value,true);}  }
class C{  @Override public void aggregateDimensionData(AbstractScannedResult scannedResult,MeasureAggregator[] aggeragtor){  byte[] dimensionData=scannedResult.getDimensionKey(blockIndex);  int surrogateKey=CarbonUtil.getSurrogateKey(dimensionData,buffer);  if (surrogateKey == 1) {    return;  }  String actualValue=columnDictionary.getDictionaryValueForKey(surrogateKey);  Object dataBasedOnDataType=null;  dataBasedOnDataType=DataTypeUtil.getDataBasedOnDataType(actualValue,dimensionAggeragtorInfo.getDim().getDataType());  if (null == dataBasedOnDataType) {    return;  }  if (DataType.DECIMAL == dimensionAggeragtorInfo.getDim().getDataType()) {    dataBasedOnDataType=((Decimal)dataBasedOnDataType).toJavaBigDecimal();  }  if (actualTypeAggregatorIndex.length > 0) {    for (int j=0; j < actualTypeAggregatorIndex.length; j++) {      aggeragtor[aggregatorStartIndex + actualTypeAggregatorIndex[j]].agg(dataBasedOnDataType);    }  }  if (numberTypeAggregatorIndex.length > 0) {    if (dimensionAggeragtorInfo.getDim().getDataType().equals(DataType.STRING)) {      dataBasedOnDataType=DataTypeUtil.getDataBasedOnDataType(actualValue,DataType.DOUBLE);    }    if (null == dataBasedOnDataType) {      return;    }    for (int j=0; j < numberTypeAggregatorIndex.length; j++) {      aggeragtor[aggregatorStartIndex + numberTypeAggregatorIndex[j]].agg(dataBasedOnDataType);    }  }}  }
class C{  @Nullable private static Long longValue(String key,Map<String,Object> params,Long dfltVal) throws IgniteCheckedException {  assert key != null;  String val=(String)params.get(key);  try {    return val == null ? dfltVal : Long.valueOf(val);  } catch (  NumberFormatException ignore) {    throw new IgniteCheckedException("Failed to parse parameter of Long type [" + key + "="+ val+ "]");  }}  }
class C{  public static void fill(byte[] a,byte val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  private String processScannedFiles(final String path,final String fileName) throws Exception {  if (!isError) {    if (scanMode == ScanModeConstants.SCAN_MODE_FILE) {      if ((tempFiles != null) && !tempFiles.isEmpty()) {        File file=(File)tempFiles.get(0);        File newFile=new File(path,this.prefix);        if (newFile.exists()) {          newFile.delete();        }        file.renameTo(newFile);        clearTempFiles();        return fileName;      } else {        return null;      }    } else     if ((scanMode == ScanModeConstants.SCAN_MODE_NATIVE) || (scanMode == ScanModeConstants.SCAN_MODE_MEMORY)) {      if ((tempFiles != null) && !tempFiles.isEmpty()) {        File newFile=new File(path,this.prefix);        if (newFile.exists()) {          newFile.delete();        }        FileOutputStream fos=null;        Document document=null;        try {          fos=new FileOutputStream(newFile);          document=new Document();          PdfWriter.getInstance(document,fos);          document.open();          File fileProperties=(File)tempFiles.get(0);          Image imageProperties=Image.getInstance(fileProperties.getPath());          document.setPageSize(imageProperties);          document.setMargins(0,0,0,0);          File file=null;          Image image=null;          Iterator it=tempFiles.iterator();          while (it.hasNext()) {            file=(File)it.next();            document.newPage();            image=Image.getInstance(file.getPath());            document.add(image);          }        } catch (        Exception e) {          throw e;        } finally {          if (document != null) {            document.close();          }          if (fos != null) {            fos.close();          }        }        clearTempFiles();        return newFile.getPath();      } else {        return null;      }    }  } else {    clearTempFiles();  }  return null;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void createBandwidthLabel(){  _bandwidthUsageDown=new LazyTooltip(GUIMediator.getThemeImage("downloading_small"));  _bandwidthUsageUp=new LazyTooltip(GUIMediator.getThemeImage("uploading_small"));  _bandwidthUsageDown.setMinimumSize(new Dimension(60,20));  _bandwidthUsageUp.setMinimumSize(new Dimension(60,20));  _bandwidthUsageDown.addMouseListener(STATUS_BAR_LISTENER);  _bandwidthUsageUp.addMouseListener(STATUS_BAR_LISTENER);}  }
class C{  protected void append(Node newNode) throws org.xml.sax.SAXException {  Node currentNode=m_currentNode;  if (null != currentNode) {    currentNode.appendChild(newNode);  } else   if (null != m_docFrag) {    m_docFrag.appendChild(newNode);  } else {    boolean ok=true;    short type=newNode.getNodeType();    if (type == Node.TEXT_NODE) {      String data=newNode.getNodeValue();      if ((null != data) && (data.trim().length() > 0)) {        throw new org.xml.sax.SAXException("Warning: can't output text before document element!  Ignoring...");      }      ok=false;    } else     if (type == Node.ELEMENT_NODE) {      if (m_doc.getDocumentElement() != null) {        throw new org.xml.sax.SAXException("Can't have more than one root on a DOM!");      }    }    if (ok)     m_doc.appendChild(newNode);  }}  }
class C{  public boolean isSorted(){  return super.isSorted() || SearchSettings.moveJunkToBottom();}  }
class C{  public static boolean isValid(String[] values){  try {    if (values[2].equalsIgnoreCase("getcsv")) {      if (values[3] != "")       return true;    } else     if (values[2].equalsIgnoreCase("getfiledata")) {      if (values[3] != "")       return true;    } else     if (values[2].equalsIgnoreCase("getssn")) {      return true;    }    return false;  } catch (  Exception ex) {    return false;  }}  }
class C{  private Army toArmy(Loadout loadout){  Army army=new Army();  List<Unit> units=new ArrayList<>();  List<Unit> spells=new ArrayList<>();  List<Unit> heroes=new ArrayList<>();  List<Unit> garrison=new ArrayList<>();  if (loadout.getArmy() != null) {    for (    LoadoutUnit loadoutUnit : loadout.getArmy()) {      Unit unit=toUnit("characters",loadoutUnit);      units.add(unit);    }  }  if (loadout.getSpells() != null) {    for (    LoadoutUnit loadoutUnit : loadout.getSpells()) {      Unit unit=toUnit("spells",loadoutUnit);      spells.add(unit);    }  }  Integer king=loadout.getKing();  if (king != null) {    heroes.add(new Unit(BARBARIAN_KING,1,king - 1));  }  Integer queen=loadout.getQueen();  if (queen != null) {    heroes.add(new Unit(ARCHER_QUEEN,1,queen - 1));  }  if (loadout.getGarrison() != null) {    for (    LoadoutUnit loadoutUnit : loadout.getGarrison()) {      Unit unit=toUnit("characters",loadoutUnit);      garrison.add(unit);    }  }  army.setUnits(units.toArray(new Unit[units.size()]));  army.setSpells(spells.toArray(new Unit[spells.size()]));  army.setHeroes(heroes.toArray(new Unit[heroes.size()]));  army.setGarrison(garrison.toArray(new Unit[garrison.size()]));  return army;}  }
class C{  public static byte[] readDataset(FileSystem fs,Path path,int len) throws IOException {  FSDataInputStream in=fs.open(path);  byte[] dest=new byte[len];  try {    in.readFully(0,dest);  }  finally {    in.close();  }  return dest;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("    DDFSubfieldDefn:\n");  buf.append("        Label = ").append(pszName).append("\n");  buf.append("        FormatString = ").append(pszFormatString).append("\n");  return buf.toString();}  }
class C{  public Type(String name,String extension){  this.name=name;  this.extension=extension;}  }
class C{  private String scriptFromDisk(String name){  name=name.replace('\\','/');  final char SEP=';';  String pkgPart="";  String pathPart="";  String namePart="";  int at=name.indexOf(SEP);  if (at > -1) {    int nextAt=name.indexOf(SEP,at + 1);    if (nextAt > -1) {      pathPart=name.substring(0,at);      pkgPart=name.substring(at + 1,nextAt);      namePart=name.substring(nextAt + 1);    } else {      pathPart=name.substring(0,at);      namePart=name.substring(at + 1);    }  } else {    at=name.lastIndexOf('/');    if (at > -1) {      int mx=name.lastIndexOf("/mx/");      if (mx > -1) {        pathPart=name.substring(0,mx);        pkgPart=name.substring(mx + 1,at);      } else {        pathPart=name.substring(0,at);      }      namePart=name.substring(at + 1);    } else {      pathPart=".";      namePart=name;    }  }  String script=null;  try {    Charset realEncoding=null;    Charset bomEncoding=null;    InputStream in=locateScriptFile(pathPart,pkgPart,namePart);    if (in != null) {      try {        BufferedInputStream bis=new BufferedInputStream(in);        bomEncoding=getEncodingFromBOM(bis);        script=pullInSource(bis,bomEncoding);        realEncoding=getEncodingFromXMLDirective(script);      }  finally {        try {          in.close();        } catch (        IOException e) {        }      }    }    if (realEncoding != null && !realEncoding.equals(bomEncoding)) {      in=locateScriptFile(pathPart,pkgPart,namePart);      if (in != null) {        try {          BufferedInputStream bis=new BufferedInputStream(in);          getEncodingFromBOM(bis);          script=pullInSource(bis,realEncoding);        }  finally {          try {            in.close();          } catch (          IOException e) {          }        }      }    }  } catch (  FileNotFoundException fnf) {    fnf.printStackTrace();  }  return script;}  }
class C{  private int flush(int offset){  try {    _os.write(_buffer,0,offset);    _offset=0;    return 0;  } catch (  IOException e) {    throw new H3ExceptionOut(e);  }}  }
class C{  public SoftReference(T referent){  super(referent);  this.timestamp=clock;}  }
class C{  private void loadNext(){  m_next=new Query(getCtx(),MWFNodeNext.Table_Name,"AD_WF_Node_ID=?",get_TrxName()).setParameters(new Object[]{get_ID()}).setOnlyActiveRecords(true).setOrderBy(MWFNodeNext.COLUMNNAME_SeqNo).list();  boolean splitAnd=SPLITELEMENT_AND.equals(getSplitElement());  for (  MWFNodeNext next : m_next) {    next.setFromSplitAnd(splitAnd);  }  log.fine("#" + m_next.size());}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  if (encryptedContent != null)   encryptedContent=encryptedContent.clone();  if (encodedParams != null)   encodedParams=encodedParams.clone();}  }
class C{  public static boolean visitInterfaces(ITypeBinding type,TypeBindingVisitor visitor){  return visitInterfaces(type,visitor,new HashSet<ITypeBinding>());}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public ProjectContext current(){  return currentProject;}  }
class C{  @Override @SuppressWarnings("rawtypes") public void restoreGroupClones(StorageSystem storage,List<URI> clones,TaskCompleter taskCompleter) throws DeviceControllerException {  _log.info("START restore group clone operation");  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,clones);    Volume clone=_dbClient.queryObject(Volume.class,clones.get(0));    Volume sourceVol=_dbClient.queryObject(Volume.class,clone.getAssociatedSourceVolume());    String consistencyGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(sourceVol,_dbClient);    String replicationGroupName=clone.getReplicationGroupInstance();    CIMObjectPath groupSynchronized=_cimPath.getGroupSynchronizedPath(storage,consistencyGroupName,replicationGroupName);    if (_helper.checkExists(storage,groupSynchronized,false,false) != null) {      CIMObjectPath cimJob=null;      CIMArgument[] restoreCGCloneInput=_helper.getRestoreFromReplicaInputArgumentsWithForce(groupSynchronized);      cimJob=_helper.callModifyReplica(storage,restoreCGCloneInput);      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisCloneRestoreJob(cimJob,storage.getId(),taskCompleter)));    } else {      ServiceError error=DeviceControllerErrors.smis.unableToFindSynchPath(consistencyGroupName);      taskCompleter.error(_dbClient,error);    }  } catch (  Exception e) {    String message=String.format("Exception when trying to restoring clones from consistency group on array %s",storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("restoreGroupClones",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  private void action_treeDeleteAll(){  log.info("");  if (FDialog.ask(m_WindowNo,null,"Remove all item(s) from tree?")) {    ListModel model=centerList.getModel();    int size=model.getSize();    int index=-1;    for (index=0; index < size; index++) {      ListItem item=(ListItem)model.getElementAt(index);      action_treeDelete(item);    }  }}  }
class C{  public WikibaseUris(String host){  root="http://" + host;  rootHttps="https://" + host;  entityData=root + "/wiki/Special:EntityData/";  entityDataHttps=rootHttps + "/wiki/Special:EntityData/";  entity=root + "/entity/";  statement=entity + "statement/";  value=root + "/value/";  reference=root + "/reference/";  prop=root + "/prop/";}  }
class C{  public List<FacetResult> runSearch() throws IOException {  index();  return facetsWithSearch();}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void test_differentIds(){  final long value=123456789;  final int id1=4;  final int id2=31;  MyInlineLocalNameIntegerURIHandler h1=new MyInlineLocalNameIntegerURIHandler("www.blazegraph.com",id1);  MyInlineLocalNameIntegerURIHandler h2=new MyInlineLocalNameIntegerURIHandler("www.blazegraph.com",id2);  final long packed1=h1.packValue(value);  final long packed2=h2.packValue(value);  assertTrue(packed1 != packed2);  final long unpacked1=h1.unpackValue(packed1);  final long unpacked2=h2.unpackValue(packed2);  assertTrue(unpacked1 == unpacked2);}  }
class C{  public ODataToken lookToken(){  if (this.currentODataToken >= this.tokens.size()) {    throw new NoSuchElementException();  }  return this.tokens.get(this.currentODataToken);}  }
class C{  public double[] computeLocalMarginalEntropyOfPreviousObservations(int variableIndex){  return computeLocalMarginalEntropyUsingPreviousObservations(observations,variableIndex,true);}  }
class C{  public byte[] embedMark(byte[] sig,String sigFileName,byte[] cover,String coverFileName,String stegoFileName) throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.WATERMARKING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_WM);  }  try {    return this.plugin.embedData(sig,sigFileName,cover,coverFileName,stegoFileName);  } catch (  OpenStegoException osEx) {    throw osEx;  }catch (  Exception ex) {    throw new OpenStegoException(ex);  }}  }
class C{  @Override public void stop(){  for (  Thread thread : threads) {    thread.interrupt();  }  try {    for (    Thread thread : threads) {      thread.join();    }  } catch (  InterruptedException e) {  }}  }
class C{  private E firstDataItem(){  for (Node p=head; p != null; p=succ(p)) {    Object item=p.item;    if (p.isData) {      if (item != null && item != p)       return LinkedTransferQueue.<E>cast(item);    } else     if (item == null)     return null;  }  return null;}  }
class C{  private void createInputAttributeUpdated(){  inputAttributeUpdater=new AttributeTracker();}  }
class C{  @BeforeClass public static void initializeWikipedia(){  DatabaseConfiguration dbConfig=new DatabaseConfiguration();  dbConfig.setDatabase("wikiapi_test");  dbConfig.setHost("bender.ukp.informatik.tu-darmstadt.de");  dbConfig.setLanguage(Language._test);  dbConfig.setPassword("student");  dbConfig.setUser("student");  try {    wiki=new Wikipedia(dbConfig);  } catch (  Exception e) {    assumeNoException(e);  }}  }
class C{  static List<Hue> randomHues(int n){  List<Hue> resultList=new ArrayList<>(n);  int huesAvailable=Hue.values().length - 1;  int maxDistance=huesAvailable / n;  Random random=new Random();  int starting=random.nextInt(huesAvailable);  List<Hue> hues=new ArrayList<>(huesAvailable);  for (int i=starting; i < huesAvailable; i++) {    if (Hue.values()[i] != Hue.Neutral) {      hues.add(Hue.values()[i]);    }  }  for (int i=0; i < starting; i++) {    if (Hue.values()[i] != Hue.Neutral) {      hues.add(Hue.values()[i]);    }  }  for (int j=0; j < huesAvailable && resultList.size() < n; j=j + maxDistance) {    resultList.add(hues.get(j));  }  return resultList;}  }
class C{  public static Kernel createKernel(int kernelType){switch (kernelType) {case KERNEL_RADIAL:    return new KernelRadial();case KERNEL_POLYNOMIAL:  return new KernelPolynomial();case KERNEL_NEURAL:return new KernelNeural();default :return new KernelDot();}}  }
class C{  public static void fill(short[] array,short value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public void refilter(){  if (m_body == null) {    return;  }  ContactEdge edge=m_body.getContactList();  while (edge != null) {    Contact contact=edge.contact;    Fixture fixtureA=contact.getFixtureA();    Fixture fixtureB=contact.getFixtureB();    if (fixtureA == this || fixtureB == this) {      contact.flagForFiltering();    }    edge=edge.next;  }  World world=m_body.getWorld();  if (world == null) {    return;  }  BroadPhase broadPhase=world.m_contactManager.m_broadPhase;  for (int i=0; i < m_proxyCount; ++i) {    broadPhase.touchProxy(m_proxies[i].proxyId);  }}  }
class C{  @SuppressWarnings("static-access") public static Options constructOptions(){  Options options=new Options();  options.addOption(OptionBuilder.withLongOpt(SOURCE_DIRECTORY_ARG).withDescription("Comma separated list of source directories").hasArg().withArgName("S").create());  options.addOption(OptionBuilder.withLongOpt(DESTINATION_DIRECTORY_ARG).withDescription("Copy destination directory").hasArg().withArgName("D").create());  options.addOption(OptionBuilder.withLongOpt(TEMP_DIRECTORY_ARG).withDescription("Copy temporary directory path").hasArg().withArgName("T").create());  options.addOption(OptionBuilder.withLongOpt(LOG_DIRECTORY_ARG).withDescription("Job logging output path").hasArg().withArgName("O").create());  options.addOption(OptionBuilder.withLongOpt(OPERATIONS_ARG).withDescription("checking options: comma separated option" + " including a(add), d(delete), u(update)").hasArg().withArgName("P").create());  options.addOption(OptionBuilder.withLongOpt(BLACKLIST_ARG).withDescription("Directory blacklist regex").hasArg().withArgName("B").create());  options.addOption(OptionBuilder.withLongOpt(DRY_RUN_ARG).withDescription("Dry run only").create());  return options;}  }
class C{  public void serve() throws InterruptedException {  try {    chain.onSessionOpened(ses);    InputStream in=endp.inputStream();    ByteBuffer readBuf=ByteBuffer.allocate(8 << 10);    readBuf.order(ByteOrder.nativeOrder());    assert readBuf.hasArray();    while (!Thread.interrupted()) {      int pos=readBuf.position();      int read=in.read(readBuf.array(),pos,readBuf.remaining());      if (read > 0) {        readBuf.position(0);        readBuf.limit(pos + read);        chain.onMessageReceived(ses,readBuf);        if (readBuf.hasRemaining())         readBuf.compact(); else         readBuf.clear();        CountDownLatch latch=latchRef.get();        if (latch != null)         latch.await();      } else       if (read < 0) {        endp.close();        break;      }    }    chain.onSessionClosed(ses);  } catch (  Exception e) {    chain.onExceptionCaught(ses,new IgniteCheckedException("Failed to read from IPC endpoint.",e));  }}  }
class C{  public static double normalizeMinusHalfPiHalfPiFast(double angle){  if ((angle >= -Math.PI / 2) && (angle <= Math.PI / 2)) {    return angle;  }  double angleMinusPiPiOrSo=remainderTwoPiFast(angle);  if (angleMinusPiPiOrSo < -Math.PI / 2) {    return angleMinusPiPiOrSo + Math.PI;  } else   if (angleMinusPiPiOrSo > Math.PI / 2) {    return angleMinusPiPiOrSo - Math.PI;  } else {    return angleMinusPiPiOrSo;  }}  }
class C{  protected boolean updateMouseMoved(MouseEvent e){  boolean ret=false;  OMGraphic omg=getGeometryUnder(e);  GeometryOfInterest goi=getMovementInterest();  boolean mouseOverCurrentGOI=(goi != null && goi.appliesTo(omg));  if (goi != null && !mouseOverCurrentGOI) {    mouseNotOver(goi.getGeometry());    setMovementInterest(null);  } else {    ret=(goi != null);  }  if (omg != null) {    if (!mouseOverCurrentGOI) {      setMovementInterest(new GeometryOfInterest(omg,e));      setNoTimerOverOMGraphic(!omg.shouldRenderFill() || omg instanceof OMPoint);      ret=mouseOver(omg,e);    }  } else {    ret=mouseOver(e);  }  ret=ret && consumeEvents;  if (ret) {    e.consume();  }  return ret;}  }
class C{  protected void assembleSystemMenu(){}  }
class C{  public final boolean isDebugEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);}  }
class C{  private void processElementNormal(GeneratorSingleCluster cluster,Node cur){  double mean=0.0;  double stddev=1.0;  String meanstr=((Element)cur).getAttribute(ATTR_MEAN);  if (meanstr != null && meanstr.length() > 0) {    mean=ParseUtil.parseDouble(meanstr);  }  String stddevstr=((Element)cur).getAttribute(ATTR_STDDEV);  if (stddevstr != null && stddevstr.length() > 0) {    stddev=ParseUtil.parseDouble(stddevstr);  }  Random random=cluster.getNewRandomGenerator();  Distribution generator=new NormalDistribution(mean,stddev,random);  cluster.addGenerator(generator);  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }}  }
class C{  protected void _skip7BitBinary() throws IOException, JsonParseException {  int origBytes=_readUnsignedVInt();  int chunks=origBytes / 7;  int encBytes=chunks * 8;  origBytes-=7 * chunks;  if (origBytes > 0) {    encBytes+=1 + origBytes;  }  _skipBytes(encBytes);}  }
class C{  @Override public String toString(){  return "!" + initCondition.toString();}  }
class C{  public File createPDF(File file){  ReportEngine re=ReportEngine.get(getCtx(),ReportEngine.ORDER,getC_Order_ID(),get_TrxName());  if (re == null)   return null;  return re.getPDF(file);}  }
class C{  public void addVoiceChannel(VoiceChannel channel){  voiceChannels.put(channel.getId(),channel);}  }
class C{  public RpfFrame(String framePath){  DEBUG_RPFDETAIL=Debug.debugging("rpfdetail");  DEBUG_RPFFRAME=Debug.debugging("rpfframe");  initFile(framePath);}  }
class C{  static void genTable(StringBuffer result,String name,long[] table,int extract,int bits,int size,boolean preshifted,int shift,boolean hexFormat,boolean properties,boolean hexComment){  String atype=bits == 1 ? (Csyntax ? "unsigned long" : "int") : bits == 2 ? (Csyntax ? "unsigned long" : "int") : bits == 4 ? (Csyntax ? "unsigned long" : "int") : bits == 8 ? (Csyntax ? "unsigned char" : "byte") : bits == 16 ? (Csyntax ? "unsigned short" : "char") : bits == 32 ? (Csyntax ? "unsigned long" : "int") : (Csyntax ? "int64" : "long");  long maxPosEntry=bits == 1 ? Integer.MAX_VALUE : bits == 2 ? Integer.MAX_VALUE : bits == 4 ? Integer.MAX_VALUE : bits == 8 ? Byte.MAX_VALUE : bits == 16 ? Short.MAX_VALUE : bits == 32 ? Integer.MAX_VALUE : Long.MAX_VALUE;  int entriesPerChar=bits <= 16 ? (16 / bits) : -(bits / 16);  boolean shiftEntries=preshifted && shift != 0;  if (bits == 8 && tableAsString && useCharForByte) {    atype="char";    maxPosEntry=Character.MAX_VALUE;    entriesPerChar=1;  }  boolean noConversion=atype.equals("char");  result.append(commentStart);  result.append(" The ").append(name).append(" table has ").append(table.length);  result.append(" entries for a total of ");  int sizeOfTable=((table.length * bits + 31) >> 5) << 2;  if (bits == 8 && useCharForByte) {    sizeOfTable*=2;  }  result.append(sizeOfTable);  result.append(" bytes.").append(commentEnd).append("\n\n");  if (Csyntax)   result.append("  static "); else   result.append("  static final ");  result.append(atype);  result.append(" ").append(name).append("[");  if (Csyntax)   result.append(table.length >> (bits == 1 ? 5 : bits == 2 ? 4 : bits == 4 ? 3 : 0));  if (tableAsString) {    if (noConversion) {      result.append("] = (\n");    } else {      result.append("] = new ").append(atype).append("[" + table.length + "];\n  ");      result.append("static final String ").append(name).append("_DATA =\n");    }    int CHARS_PER_LINE=8;    StringBuffer theString=new StringBuffer();    int entriesInCharSoFar=0;    char ch='\u0000';    int charsPerEntry=-entriesPerChar;    for (int j=0; j < table.length; ++j) {      long entry;      if ("A".equals(name))       entry=(table[j] & 0xffffffffL) >> extract; else       entry=(table[j] >> extract);      if (shiftEntries)       entry<<=shift;      if (entry >= (1L << bits)) {        FAIL("Entry too big");      }      if (entriesPerChar > 0) {        ch=(char)(((int)ch >> bits) | (entry << (entriesPerChar - 1) * bits));        ++entriesInCharSoFar;        if (entriesInCharSoFar == entriesPerChar) {          theString.append(ch);          entriesInCharSoFar=0;          ch='\u0000';        }      } else {        for (int k=0; k < charsPerEntry; ++k) {          ch=(char)(entry >> ((charsPerEntry - 1) * 16));          entry<<=16;          theString.append(ch);        }      }    }    if (entriesInCharSoFar > 0) {      while (entriesInCharSoFar < entriesPerChar) {        ch=(char)((int)ch >> bits);        ++entriesInCharSoFar;      }      theString.append(ch);      entriesInCharSoFar=0;    }    result.append(Utility.formatForSource(theString.toString(),"    "));    if (noConversion) {      result.append(").toCharArray()");    }    result.append(";\n\n  ");    if (!noConversion) {      addInitializer(name,atype,entriesPerChar,bits,table.length);    }  } else {    result.append("] = {");    boolean castEntries=shiftEntries && (bits < 32);    int printPerLine=hexFormat ? (bits == 1 ? 32 * 4 : bits == 2 ? 16 * 4 : bits == 4 ? 8 * 4 : bits == 8 ? 8 : bits == 16 ? 8 : bits == 32 ? 4 : 2) : (bits == 8 ? 8 : bits == 16 ? 8 : 4);    int printMask=properties ? 0 : Math.min(1 << size,printPerLine >> (castEntries ? (Csyntax ? 2 : 1) : 0)) - 1;    int commentShift=((1 << size) == table.length) ? 0 : size;    int commentMask=((1 << size) == table.length) ? printMask : (1 << size) - 1;    long val=0;    for (int j=0; j < table.length; j++) {      if ((j & printMask) == 0) {        while (result.charAt(result.length() - 1) == ' ')         result.setLength(result.length() - 1);        result.append("\n    ");      }      PRINT: {        if (castEntries)         result.append("(").append(atype).append(")(");        long entry=table[j] >> extract;        int packMask=((1 << (bits == 1 ? 5 : bits == 2 ? 4 : bits == 4 ? 3 : 2)) - 1);        int k=j & packMask;        if (bits >= 8)         val=entry; else         if (k == 0) {          val=entry;          break PRINT;        } else {          val|=(entry << (k * bits));          if (k != packMask)           break PRINT;        }        if (val > maxPosEntry && !Csyntax) {          result.append('-');          val=maxPosEntry + maxPosEntry + 2 - val;        }        if (hexFormat) {          result.append("0x");          if (bits == 8)           result.append(hex2((byte)val)); else           if (bits == 16)           result.append(hex4((short)val)); else           if (bits == 32 || bits < 8)           result.append(hex8((int)val)); else {            result.append(hex16(val));            if (!Csyntax)             result.append("L");          }        } else {          if (bits == 8)           result.append(dec3(val)); else           if (bits == 64) {            result.append(dec5(val));            if (!Csyntax)             result.append("L");          } else           result.append(dec5(val));        }        if (shiftEntries)         result.append("<<").append(shift);        if (castEntries)         result.append(")");        if (j < (table.length - 1))         result.append(", "); else         result.append("  ");        if ((j & printMask) == printMask) {          result.append(" ").append(commentStart).append(" ");          if (hexComment)           result.append("0x").append(hex4((j & ~commentMask) << (16 - size))); else           result.append(dec3((j & ~commentMask) >> commentShift));          if (properties)           propertiesComments(result,val);          result.append(commentEnd);        }      }    }    result.append("\n  };\n\n  ");  }}  }
class C{  protected double priority(){  return dists[secondary] - dists[primary];}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  @Override public boolean supportsResultSetHoldability(int holdability){  debugCodeCall("supportsResultSetHoldability",holdability);  return holdability == ResultSet.CLOSE_CURSORS_AT_COMMIT;}  }
class C{  public static ParameterizedTypeRef createTypeRef(Type declaredType,TypeArgument... typeArgs){  return createTypeRef(declaredType,TypingStrategy.DEFAULT,typeArgs);}  }
class C{  public void coordinate(@NonNull TextView textView,@NonNull EventCalendarView calendarView,@NonNull AgendaView agendaView){  if (mCalendarView != null) {    mCalendarView.setOnChangeListener(null);  }  if (mAgendaView != null) {    mAgendaView.setOnDateChangeListener(null);  }  mTextView=textView;  mCalendarView=calendarView;  mAgendaView=agendaView;  if (mSelectedDayMillis < 0) {    mSelectedDayMillis=CalendarUtils.today();  }  mCalendarView.setSelectedDay(mSelectedDayMillis);  agendaView.setSelectedDay(mSelectedDayMillis);  updateTitle(mSelectedDayMillis);  calendarView.setOnChangeListener(mCalendarListener);  agendaView.setOnDateChangeListener(mAgendaListener);}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  public boolean isForcePersistence(){  return forcePersistence;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.ARRAY;}  }
class C{  public static double radians(double degrees){  return Length.DECIMAL_DEGREE.toRadians(degrees);}  }
class C{  public static boolean isSuperCall(JCTree tree){  Name name=calledMethodName(tree);  if (name != null) {    Names names=name.table.names;    return name == names._super;  } else {    return false;  }}  }
class C{  public static final String composeFirstLine(String keyword,String label){  final String htmlLabel=label != null && !label.contains("<b>") ? "<b>" + label + "</b>" : label;  return "<span style=\"" + CSS_STYLE_KEYWORD + "\">"+ keyword+ "</span>"+ (htmlLabel != null ? " " + htmlLabel : "");}  }
class C{  public void testUnsizedDoublesCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.doubles().limit(size).parallel().forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public ServiceCall<VisualClassifier> createClassifier(ClassifierOptions options){  Validator.notNull(options," options cannot be null");  validateClassifierOptions(options);  Builder bodyBuilder=new MultipartBody.Builder().setType(MultipartBody.FORM);  bodyBuilder.addFormDataPart(PARAM_NAME,options.classifierName());  for (  String className : options.classNames()) {    String dataName=className + "_" + PARAM_POSITIVE_EXAMPLES;    RequestBody requestBody=RequestBody.create(HttpMediaType.BINARY_FILE,options.positiveExamplesByClassName(className));    bodyBuilder.addFormDataPart(dataName,options.positiveExamplesByClassName(className).getName(),requestBody);  }  if (options.negativeExamples() != null) {    RequestBody requestBody=RequestBody.create(HttpMediaType.BINARY_FILE,options.negativeExamples());    bodyBuilder.addFormDataPart(PARAM_NEGATIVE_EXAMPLES,options.negativeExamples().getName(),requestBody);  }  RequestBuilder requestBuilder=RequestBuilder.post(PATH_CLASSIFIERS);  requestBuilder.query(VERSION,versionDate).body(bodyBuilder.build());  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(VisualClassifier.class));}  }
class C{  public void makeClassNot(List<Interval> l,boolean caseless){  makeClass(new IntCharSet(l),caseless);}  }
class C{  protected void add(Node node){  nodes.put(node.getId(),node);}  }
class C{  private void createSubsample(){  int classI=getInputFormat().classIndex();  getInputFormat().sort(classI);  int[] classIndices=getClassIndices();  int[] counts=new int[getInputFormat().numClasses()];  double[] weights=new double[getInputFormat().numClasses()];  int min=-1;  for (int i=0; i < getInputFormat().numInstances(); i++) {    Instance current=getInputFormat().instance(i);    if (current.classIsMissing() == false) {      counts[(int)current.classValue()]++;      weights[(int)current.classValue()]+=current.weight();    }  }  for (int i=0; i < counts.length; i++) {    if (counts[i] > 0) {      weights[i]=weights[i] / counts[i];    }  }  int minIndex=-1;  for (int i=0; i < counts.length; i++) {    if ((min < 0) && (counts[i] > 0)) {      min=counts[i];      minIndex=i;    } else     if ((counts[i] < min) && (counts[i] > 0)) {      min=counts[i];      minIndex=i;    }  }  if (min < 0) {    System.err.println("SpreadSubsample: *warning* none of the classes have any values in them.");    return;  }  int[] new_counts=new int[getInputFormat().numClasses()];  for (int i=0; i < counts.length; i++) {    new_counts[i]=(int)Math.abs(Math.min(counts[i],min * m_DistributionSpread));    if (i == minIndex) {      if (m_DistributionSpread > 0 && m_DistributionSpread < 1.0) {        new_counts[i]=counts[i];      }    }    if (m_DistributionSpread == 0) {      new_counts[i]=counts[i];    }    if (m_MaxCount > 0) {      new_counts[i]=Math.min(new_counts[i],m_MaxCount);    }  }  Random random=new Random(m_RandomSeed);  Hashtable<String,String> t=new Hashtable<String,String>();  for (int j=0; j < new_counts.length; j++) {    double newWeight=1.0;    if (m_AdjustWeights && (new_counts[j] > 0)) {      newWeight=weights[j] * counts[j] / new_counts[j];    }    for (int k=0; k < new_counts[j]; k++) {      boolean ok=false;      do {        int index=classIndices[j] + (Math.abs(random.nextInt()) % (classIndices[j + 1] - classIndices[j]));        if (t.get("" + index) == null) {          t.put("" + index,"");          ok=true;          if (index >= 0) {            Instance newInst=(Instance)getInputFormat().instance(index).copy();            if (m_AdjustWeights) {              newInst.setWeight(newWeight);            }            push(newInst);          }        }      } while (!ok);    }  }}  }
class C{  public DefinedMethod(String methodName){  this(methodName,false,new ArrayList());}  }
class C{  public Location(Location other){  if (other.is_set_city()) {    this.city=other.city;  }  if (other.is_set_state()) {    this.state=other.state;  }  if (other.is_set_country()) {    this.country=other.country;  }}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    updateProgress("Finding network links:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue == 2) {                    flag=false;                    break;                  }                  output.setValue(y,x,output.getValue(y,x) + 1);                }              } else {                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Finding network links:",(int)progress);    }    updateProgress("Finding network nodes:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          if (pntr.getValue(row,col) == 0) {            output.setValue(row,col,5);          } else {            numNeighbouringStreamCells=0;            for (c=0; c < 8; c++) {              x=col + dX[c];              y=row + dY[c];              if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {                numNeighbouringStreamCells++;              }            }            if (numNeighbouringStreamCells == 0) {              output.setValue(row,col,3);            } else             if (numNeighbouringStreamCells > 1) {              output.setValue(row,col,4);            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Finding network nodes:",(int)progress);    }    String retData="Classification Key\n\n";    retData=retData + "Exterior Link\t1\n";    retData=retData + "Interior Link\t2\n";    retData=retData + "Source Node\t3\n";    retData=retData + "Link Node\t4\n";    retData=retData + "Sink Node\t5\n";    returnData(retData);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void incrementModCounts(){  if (externalMessageList != null) {    externalMessageList.incrementModCount();  }  if (externalBuilderList != null) {    externalBuilderList.incrementModCount();  }  if (externalMessageOrBuilderList != null) {    externalMessageOrBuilderList.incrementModCount();  }}  }
class C{  public boolean isMultiThreaded(){  return mode == DispatchMode.MULTI_THREAD;}  }
class C{  static void debugSelfTest(Princess owner){  final String METHOD_NAME="debugSelfTest()";  final String PASSED="passed";  final String FAILED="failed";  StringBuilder msg=new StringBuilder("Performing self test of geometry");  try {    Coords center=new Coords(4,6);    HexLine[] lines=new HexLine[6];    for (int i=0; i < 6; i++) {      lines[i]=new HexLine(center,i,owner);    }    msg.append("\n\tTesting that center lies in lines... ");    boolean passed=true;    for (int i=0; i < 6; i++) {      if (lines[i].judgePoint(center) != 0) {        passed=false;      }    }    msg.append(passed ? PASSED : FAILED);    msg.append("\n\tTesting more points that should lie on lines... ");    passed=true;    for (int i=0; i < 6; i++) {      if ((lines[i].judgePoint(center.translated(i)) != 0) || (lines[i].judgePoint(center.translated((i + 3) % 6)) != 0)) {        passed=false;      }    }    msg.append(passed ? PASSED : FAILED);    passed=true;    msg.append("\n\tTesting points to left and right of lines... ");    for (int i=0; i < 6; i++) {      if (-1 != lines[i].judgePoint(center.translated((i + 5) % 6))) {        passed=false;      }      if (-1 != lines[i].judgePoint(center.translated((i + 4) % 6))) {        passed=false;      }      if (1 != lines[i].judgePoint(center.translated((i + 1) % 6))) {        passed=false;      }      if (1 != lines[i].judgePoint(center.translated((i + 2) % 6))) {        passed=false;      }    }    msg.append(passed ? PASSED : FAILED);    passed=true;    Coords areapt1=new Coords(1,1);    Coords areapt2=new Coords(3,1);    Coords areapt3=new Coords(2,3);    ConvexBoardArea area=new ConvexBoardArea(owner);    area.expandToInclude(areapt1);    area.expandToInclude(areapt2);    area.expandToInclude(areapt3);    owner.log(BotGeometry.class,METHOD_NAME,"Checking area contains proper points... ");    msg.append("\n\tChecking area contains proper points... ");    if (!area.contains(new Coords(1,1))) {      passed=false;    }    if (!area.contains(new Coords(2,1))) {      passed=false;    }    if (!area.contains(new Coords(3,1))) {      passed=false;    }    if (!area.contains(new Coords(1,2))) {      passed=false;    }    if (!area.contains(new Coords(2,2))) {      passed=false;    }    if (!area.contains(new Coords(3,2))) {      passed=false;    }    if (!area.contains(new Coords(2,3))) {      passed=false;    }    msg.append(passed ? PASSED : FAILED);    passed=true;    msg.append("\n\tChecking area doesn't contain extra points... ");    if (area.contains(new Coords(0,1))) {      passed=false;    }    if (area.contains(new Coords(1,0))) {      passed=false;    }    if (area.contains(new Coords(2,0))) {      passed=false;    }    if (area.contains(new Coords(3,0))) {      passed=false;    }    if (area.contains(new Coords(4,1))) {      passed=false;    }    if (area.contains(new Coords(4,2))) {      passed=false;    }    if (area.contains(new Coords(4,3))) {      passed=false;    }    if (area.contains(new Coords(3,3))) {      passed=false;    }    if (area.contains(new Coords(2,4))) {      passed=false;    }    if (area.contains(new Coords(1,3))) {      passed=false;    }    if (area.contains(new Coords(0,3))) {      passed=false;    }    if (area.contains(new Coords(0,2))) {      passed=false;    }    msg.append(passed ? PASSED : FAILED);  }  finally {    owner.log(BotGeometry.class,METHOD_NAME,LogLevel.DEBUG,msg);  }}  }
class C{  public static int toInt(short a,short b){  return (b << SHORT_SIZE) | (a & SHORT_MASK);}  }
class C{  @Benchmark public void limitedConcurrentMap(){  run();}  }
class C{  public static long countNbOccurrences(String s,char c){  return s.chars().filter(null).count();}  }
class C{  public void stopMachine(String workspaceId,String machineId) throws NotFoundException, ServerException, ConflictException {  try (StripedLocks.ReadLock lock=stripedLocks.acquireReadLock(workspaceId)){    WorkspaceState workspaceState=workspaces.get(workspaceId);    if (workspaceState == null || workspaceState.status != RUNNING) {      throw new ConflictException(format("Environment of workspace '%s' is not running",workspaceId));    }  }   environmentEngine.stopMachine(workspaceId,machineId);}  }
class C{  public SecuredImpl(ArchiveBase<?> archive){  super(archive);  Node node=getArchive().as(JARArchive.class).get("WEB-INF/web.xml");  if (node == null) {    this.asset=new WebXmlAsset();    getArchive().as(JARArchive.class).add(this.asset);  } else {    Asset asset=node.getAsset();    if (!(asset instanceof WebXmlAsset)) {      this.asset=new WebXmlAsset(asset.openStream());      getArchive().as(JARArchive.class).add(this.asset);    } else {      this.asset=(WebXmlAsset)asset;    }  }  getArchive().as(JARArchive.class).addModule("org.wildfly.swarm.keycloak","deployment");  getArchive().as(JARArchive.class).addAsServiceProvider("io.undertow.servlet.ServletExtension","org.wildfly.swarm.keycloak.deployment.SecurityContextServletExtension");  InputStream keycloakJson=Thread.currentThread().getContextClassLoader().getResourceAsStream("keycloak.json");  if (keycloakJson == null) {    String appArtifact=System.getProperty(BootstrapProperties.APP_ARTIFACT);    if (appArtifact != null) {      try (InputStream in=ClassLoader.getSystemClassLoader().getResourceAsStream("_bootstrap/" + appArtifact)){        Archive tmpArchive=ShrinkWrap.create(JARArchive.class);        tmpArchive.as(ZipImporter.class).importFrom(in);        Node jsonNode=tmpArchive.get("keycloak.json");        if (jsonNode == null) {          jsonNode=tmpArchive.get("WEB-INF/keycloak.json");        }        if (jsonNode != null && jsonNode.getAsset() != null) {          keycloakJson=jsonNode.getAsset().openStream();        }      } catch (      IOException e) {      }    }  }  this.asset.setContextParam("resteasy.scan","true");  this.asset.setLoginConfig("KEYCLOAK","ignored");  if (keycloakJson != null) {    getArchive().as(JARArchive.class).add(createAsset(keycloakJson),"WEB-INF/keycloak.json");  } else {  }}  }
class C{  public void step(float timeStep,int velocityIterations,int positionIterations){  world.step(timeStep,velocityIterations,positionIterations);}  }
class C{  public String toString(){  return label;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character '%c' in array position %d",source[i],i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void dump(int counter,INode next){  if (!logger.isTraceEnabled()) {    return;  }  String leafText=leafText(next);  logger.trace(String.format("%4d: %90s - %s",counter,next.toString(),leafText));}  }
class C{  public void logKill(final DBTransaction transaction,final Entity killed,final Killer killer) throws SQLException {  String query="UPDATE kills SET cnt = cnt+1" + " WHERE killed = '[killed]' AND killed_type = '[killed_type]'" + " AND killer = '[killer]' AND killer_type = '[killer_type]'"+ " AND day = '[day]';";  Map<String,Object> params=new HashMap<String,Object>();  params.put("killed",killed.getName());  params.put("killed_type",entityToType(killed));  params.put("killer",killer.getName());  params.put("killer_type",entityToType(killer));  params.put("day",new SimpleDateFormat("yyyy-MM-dd").format(new Date()));  final int rowCount=transaction.execute(query,params);  if (rowCount == 0) {    query="INSERT INTO kills (killed, killed_type, killer, killer_type, day, cnt)" + " VALUES ('[killed]', '[killed_type]', '[killer]', '[killer_type]', '[day]', 1)";    transaction.execute(query,params);  }}  }
class C{  public static void main(String[] args){  Trees.PennTreeReader reader=new Trees.PennTreeReader(new StringReader("((S (NP (DT the) (JJ quick) (JJ (AA (BB (CC brown)))) (NN fox)) (VP (VBD jumped) (PP (IN over) (NP (DT the) (JJ lazy) (NN dog)))) (. .)))"));  Tree<String> tree=reader.next();  System.out.println("tree " + tree);  CollinsHeadFinder headFinder=new CollinsHeadFinder();  while (!tree.isLeaf()) {    Tree<String> head=headFinder.determineHead(tree);    System.out.println("head " + head);    tree=head;  }}  }
class C{  public static int OS2IP(byte[] input,int inOff){  int result=input[inOff++] & 0xff;  result|=(input[inOff++] & 0xff) << 8;  result|=(input[inOff++] & 0xff) << 16;  result|=(input[inOff] & 0xff) << 24;  return result;}  }
class C{  Object responseTopic(){  return resTopic;}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  private void emitSubroutine(final Instantiation instant,final List<Instantiation> worklist,final InsnList newInstructions,final List<TryCatchBlockNode> newTryCatchBlocks,final List<LocalVariableNode> newLocalVariables){  LabelNode duplbl=null;  if (LOGGING) {    log("--------------------------------------------------------");    log("Emitting instantiation of subroutine " + instant.subroutine);  }  for (int i=0, c=instructions.size(); i < c; i++) {    AbstractInsnNode insn=instructions.get(i);    Instantiation owner=instant.findOwner(i);    if (insn.getType() == AbstractInsnNode.LABEL) {      LabelNode ilbl=(LabelNode)insn;      LabelNode remap=instant.rangeLabel(ilbl);      if (LOGGING) {        log("Translating lbl #" + i + ':'+ ilbl+ " to "+ remap);      }      if (remap != duplbl) {        newInstructions.add(remap);        duplbl=remap;      }      continue;    }    if (owner != instant) {      continue;    }    if (LOGGING) {      log("Emitting inst #" + i);    }    if (insn.getOpcode() == RET) {      LabelNode retlabel=null;      for (Instantiation p=instant; p != null; p=p.previous) {        if (p.subroutine.get(i)) {          retlabel=p.returnLabel;        }      }      if (retlabel == null) {        throw new RuntimeException("Instruction #" + i + " is a RET not owned by any subroutine");      }      newInstructions.add(new JumpInsnNode(GOTO,retlabel));    } else     if (insn.getOpcode() == JSR) {      LabelNode lbl=((JumpInsnNode)insn).label;      BitSet sub=subroutineHeads.get(lbl);      Instantiation newinst=new Instantiation(instant,sub);      LabelNode startlbl=newinst.gotoLabel(lbl);      if (LOGGING) {        log(" Creating instantiation of subr " + sub);      }      newInstructions.add(new InsnNode(ACONST_NULL));      newInstructions.add(new JumpInsnNode(GOTO,startlbl));      newInstructions.add(newinst.returnLabel);      worklist.add(newinst);    } else {      newInstructions.add(insn.clone(instant));    }  }  for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {    TryCatchBlockNode trycatch=it.next();    if (LOGGING) {      log("try catch block original labels=" + trycatch.start + '-'+ trycatch.end+ "->"+ trycatch.handler);    }    final LabelNode start=instant.rangeLabel(trycatch.start);    final LabelNode end=instant.rangeLabel(trycatch.end);    if (start == end) {      if (LOGGING) {        log(" try catch block empty in this subroutine");      }      continue;    }    final LabelNode handler=instant.gotoLabel(trycatch.handler);    if (LOGGING) {      log(" try catch block new labels=" + start + '-'+ end+ "->"+ handler);    }    if (start == null || end == null || handler == null) {      throw new RuntimeException("Internal error!");    }    newTryCatchBlocks.add(new TryCatchBlockNode(start,end,handler,trycatch.type));  }  for (Iterator<LocalVariableNode> it=localVariables.iterator(); it.hasNext(); ) {    LocalVariableNode lvnode=it.next();    if (LOGGING) {      log("local var " + lvnode.name);    }    final LabelNode start=instant.rangeLabel(lvnode.start);    final LabelNode end=instant.rangeLabel(lvnode.end);    if (start == end) {      if (LOGGING) {        log("  local variable empty in this sub");      }      continue;    }    newLocalVariables.add(new LocalVariableNode(lvnode.name,lvnode.desc,lvnode.signature,start,end,lvnode.index));  }}  }
class C{  public static EgDemandDetails fromReasonAndAmounts(BigDecimal demandAmount,EgDemandReason egDemandReason,BigDecimal collectedAmount){  EgDemandDetails dd=new EgDemandDetails();  dd.setAmount(demandAmount);  dd.setEgDemandReason(egDemandReason);  dd.setAmtCollected(collectedAmount);  dd.setModifiedDate(new Date());  dd.setCreateDate(new Date());  return dd;}  }
class C{  public int gridDimension(){  return sequenceLength;}  }
class C{  protected Instances createInstances(Instances header,Element parent) throws Exception {  Instances result;  Vector<Element> list;  int i;  result=new Instances(header,0);  list=getChildTags(parent,TAG_INSTANCE);  for (i=0; i < list.size(); i++) {    result.add(createInstance(result,list.get(i)));  }  return result;}  }
class C{  private static void usage(String err){  if (err != null && err.length() > 0) {    System.err.println("==>" + err);  }  System.err.println("Usage: ... [url]");  System.exit(1);}  }
class C{  public static Long interpretLong(Object v){  if (v == null) {    return null;  } else   if (v instanceof Number) {    return ((Number)v).longValue();  } else   if (v instanceof String) {    return Longs.tryParse((String)v);  } else {    return null;  }}  }
class C{  public void batchAbandon(Project.NameKey project,CurrentUser user,Collection<ChangeControl> controls,String msgTxt,NotifyHandling notifyHandling) throws RestApiException, UpdateException {  if (controls.isEmpty()) {    return;  }  try (BatchUpdate u=batchUpdateFactory.create(dbProvider.get(),project,user,TimeUtil.nowTs())){    for (    ChangeControl control : controls) {      if (!project.equals(control.getProject().getNameKey())) {        throw new ResourceConflictException(String.format("Project name \"%s\" doesn't match \"%s\"",control.getProject().getNameKey().get(),project.get()));      }      u.addOp(control.getId(),new Op(msgTxt,notifyHandling));    }    u.execute();  } }  }
class C{  @Override public void insert(Blorp item,int position){  if (sentinel.next == null || position == 0) {    insertFront(item);    return;  }  Node currentNode=sentinel.next.next;  while (position > 1 && currentNode.next != null) {    position-=1;    currentNode=currentNode.next;  }  Node newNode=new Node(item,currentNode.next);  currentNode.next=newNode;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:52.178 -0500",hash_original_method="24F6BFACBC4EE2930906E276E667EC5B",hash_generated_method="5878DB62400B17AE30E78442CA39D73C") public void onDestroy(Activity activity){  mNfcState.remove(activity);}  }
class C{  public ProviderNotFoundException(String name){  this(name,null);}  }
class C{  public ProjectDescription(IProjectDescription projectDescription){  super();  this.projectDescription=projectDescription;}  }
class C{  protected BigDecimalNumericType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public static LineByLineFileInputOperator checkpoint(LineByLineFileInputOperator oper,ByteArrayOutputStream bos) throws Exception {  Kryo kryo=new Kryo();  Output loutput=new Output(bos);  kryo.writeObject(loutput,oper);  loutput.close();  Input lInput=new Input(bos.toByteArray());  @SuppressWarnings("unchecked") LineByLineFileInputOperator checkPointedOper=kryo.readObject(lInput,oper.getClass());  lInput.close();  return checkPointedOper;}  }
class C{  public static void compress(int format,Resource[] sources,Resource target,int mode) throws IOException {  if (format == FORMAT_ZIP)   compressZip(sources,target,null); else   if (format == FORMAT_TAR)   compressTar(sources,target,mode); else   if (format == FORMAT_TGZ)   compressTGZ(sources,target,mode); else   if (format == FORMAT_TBZ2)   compressTBZ2(sources,target,mode); else   throw new IOException("can't compress in given format");}  }
class C{  public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  if (!isPropertyChanged(oldProps,newProps,_propertyName)) {    return;  }  String newValue=newProps.getProperty(_propertyName);  ArgumentValidator.checkRange(Integer.parseInt(newValue),Constants.MIN_AUTH_LOCKOUT_TIME_IN_MINUTES,Constants.MAX_AUTH_LOCKOUT_TIME_IN_MINUTES,_propertyName);}  }
class C{  private boolean isProxyEnabled(){  return (this.properties.getProxy() != null && this.properties.getProxy().getHost() != null && this.properties.getProxy().getPort() > 0);}  }
class C{  @Override public String toString(){  return Boolean.toString(value);}  }
class C{  public static boolean hasSilkTouchModifier(EntityLivingBase entity){  ItemStack heldItem=entity.getHeldItemMainhand();  return heldItem != null && EnchantmentHelper.getEnchantmentLevel(Enchantments.SILK_TOUCH,heldItem) > 0;}  }
class C{  public AuthResult authenticate(AuthRequest who) throws AccountException, IOException {  who=realm.authenticate(who);  try {    try (ReviewDb db=schema.open()){      AccountExternalId.Key key=id(who);      AccountExternalId id=getAccountExternalId(db,key);      if (id == null) {        return create(db,who);      }      Account act=byIdCache.get(id.getAccountId()).getAccount();      if (!act.isActive()) {        throw new AccountException("Authentication error, account inactive");      }      update(db,who,id);      return new AuthResult(id.getAccountId(),key,false);    }   } catch (  OrmException e) {    throw new AccountException("Authentication error",e);  }}  }
class C{  private static Element addDomicilioFromDocumentAddress(Element persona,Document docAddress){  Element rootAddres=docAddress.getRootElement();  List listAdrres=rootAddres.selectNodes(XPATH_DOMICILIO_ROOT);  if ((listAdrres != null) && (listAdrres.size() > 0)) {    for (Iterator it=listAdrres.iterator(); it.hasNext(); ) {      Element direccion=(Element)it.next();      if (direccion != null) {        persona=getPreferredAdrres(persona,direccion,listAdrres.size());      }    }  }  return persona;}  }
class C{  @SuppressWarnings("deprecation") protected View onGLSurfaceViewCreated(GLSurfaceView glSurfaceView){  for (int i=0; i < kMaxTouches; i++)   mInternalTouches.add(new UITouch(glSurfaceView,new CGPoint(0.0f,0.0f)));  mContentLayout=new RelativeLayout(this);  mContentLayout.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT));  mContentLayout.addView(glSurfaceView,new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT));  LayoutParams progressBarLayoutParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);  progressBarLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);  mProgressBar=new ProgressBar(this);  mProgressBar.setIndeterminate(true);  mProgressBar.setVisibility(View.GONE);  mContentLayout.addView(mProgressBar,progressBarLayoutParams);  return this.onContentViewCreated(mContentLayout);}  }
class C{  public static void w(String tag,String msg){  w(tag,msg,null);}  }
class C{  public EventProcessorHost(final String hostName,final String eventHubPath,final String consumerGroupName,final String eventHubConnectionString,final String storageConnectionString,final String storageContainerName,final String storageBlobPrefix,final ExecutorService executorService){  this(hostName,eventHubPath,consumerGroupName,eventHubConnectionString,new AzureStorageCheckpointLeaseManager(storageConnectionString,storageContainerName,storageBlobPrefix),executorService);  this.initializeLeaseManager=true;}  }
class C{  protected void init(CollectorConfiguration config){  for (  String btxn : config.getBusinessTransactions().keySet()) {    BusinessTxnConfig btc=config.getBusinessTransactions().get(btxn);    init(btxn,btc);  }}  }
class C{  public static String loadStreamContent(InputStream stream) throws IOException {  StringBuilder content=new StringBuilder();  BufferedReader reader=new BufferedReader(new InputStreamReader(stream,"UTF-8"));  try {    char[] buff=new char[1024];    int i=0;    while ((i=reader.read(buff)) != -1) {      content.append(buff,0,i);    }  }  finally {    reader.close();  }  return content.toString();}  }
class C{  @Override public boolean isLocationProhibited(Coords c,int currElevation){  IHex hex=game.getBoard().getHex(c);  if (hex.containsTerrain(Terrains.IMPASSABLE)) {    return true;  }  if (hex.containsTerrain(Terrains.SPACE) && doomedInSpace()) {    return true;  }  if (isHidden()) {    if (hex.containsTerrain(Terrains.PAVEMENT) || hex.containsTerrain(Terrains.ROAD)) {      return true;    }    if ((hex.terrainLevel(Terrains.BRIDGE_ELEV) == currElevation) && hex.containsTerrain(Terrains.BRIDGE)) {      return true;    }    if (hex.containsTerrain(Terrains.WATER) && (currElevation == 0)) {      return true;    }  }  boolean hasFlotationHull=hasWorkingMisc(MiscType.F_FLOTATION_HULL);  boolean isAmphibious=hasWorkingMisc(MiscType.F_FULLY_AMPHIBIOUS);switch (movementMode) {case TRACKED:    if (!isSuperHeavy()) {      return (hex.terrainLevel(Terrains.WOODS) > 1) || ((hex.terrainLevel(Terrains.WATER) > 0) && !hex.containsTerrain(Terrains.ICE) && !hasFlotationHull&& !isAmphibious) || hex.containsTerrain(Terrains.JUNGLE)|| (hex.terrainLevel(Terrains.MAGMA) > 1)|| (hex.terrainLevel(Terrains.ROUGH) > 1)|| (hex.terrainLevel(Terrains.RUBBLE) > 5);    } else {      return (hex.terrainLevel(Terrains.WOODS) > 1) || ((hex.terrainLevel(Terrains.WATER) > 0) && !hex.containsTerrain(Terrains.ICE) && !hasFlotationHull&& !isAmphibious) || hex.containsTerrain(Terrains.JUNGLE)|| (hex.terrainLevel(Terrains.MAGMA) > 1);    }case WHEELED:  if (!isSuperHeavy()) {    return hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.ROUGH) || ((hex.terrainLevel(Terrains.WATER) > 0) && !hex.containsTerrain(Terrains.ICE) && !hasFlotationHull&& !isAmphibious)|| hex.containsTerrain(Terrains.RUBBLE)|| hex.containsTerrain(Terrains.MAGMA)|| hex.containsTerrain(Terrains.JUNGLE)|| (hex.terrainLevel(Terrains.SNOW) > 1)|| (hex.terrainLevel(Terrains.GEYSER) == 2);  } else {    return hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.ROUGH) || ((hex.terrainLevel(Terrains.WATER) > 0) && !hex.containsTerrain(Terrains.ICE) && !hasFlotationHull&& !isAmphibious)|| hex.containsTerrain(Terrains.RUBBLE)|| hex.containsTerrain(Terrains.MAGMA)|| hex.containsTerrain(Terrains.JUNGLE)|| (hex.terrainLevel(Terrains.GEYSER) == 2);  }case HOVER:if (!isSuperHeavy()) {  return hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.JUNGLE) || (hex.terrainLevel(Terrains.MAGMA) > 1)|| (hex.terrainLevel(Terrains.ROUGH) > 1)|| (hex.terrainLevel(Terrains.RUBBLE) > 5);} else {  return hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.JUNGLE) || (hex.terrainLevel(Terrains.MAGMA) > 1);}case NAVAL:case HYDROFOIL:return (hex.terrainLevel(Terrains.WATER) <= 0) || hex.containsTerrain(Terrains.ICE);case SUBMARINE:return (hex.terrainLevel(Terrains.WATER) <= 0);case WIGE:return (hex.containsTerrain(Terrains.WOODS) || (hex.containsTerrain(Terrains.BUILDING))) && !(currElevation > hex.maxTerrainFeatureElevation(game.getBoard().inAtmosphere()));default :return false;}}  }
class C{  public final void writeShort(int v) throws java.io.IOException {  return;}  }
class C{  private boolean looksLikeArrayInitializerIntro(){  nextToken();  if (fToken == Symbols.TokenEQUAL || skipBrackets()) {    return true;  }  return false;}  }
class C{  public void testCreatePasswordManager() throws ConfigurationException {  PasswordManager pwd=new PasswordManager("sample.security.properties");  assertTrue(true);  try {    pwd=new PasswordManager("sample.security.properties_DOES_NOT_EXIST");    AuthenticationInfo authenticationInfo=pwd.getAuthenticationInfo();    authenticationInfo.checkAndCleanAuthenticationInfo();  } catch (  ConfigurationException e) {    assertTrue(false);  }catch (  ServerRuntimeException sre) {    assertTrue(true);  }}  }
class C{  public boolean isSetNewNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NEWNODEID_ISSET_ID);}  }
class C{  public ConcurrentHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public Stats computeBlockStats() throws IOException {  Stats stats=new Stats(fr.parent.segment,fr.fieldInfo.name);  if (fr.index != null) {    stats.indexNumBytes=fr.index.ramBytesUsed();  }  currentFrame=staticFrame;  FST.Arc<BytesRef> arc;  if (fr.index != null) {    arc=fr.index.getFirstArc(arcs[0]);    assert arc.isFinal();  } else {    arc=null;  }  currentFrame=pushFrame(arc,fr.rootCode,0);  currentFrame.fpOrig=currentFrame.fp;  currentFrame.loadBlock();  validIndexPrefix=0;  stats.startBlock(currentFrame,!currentFrame.isLastInFloor);  allTerms:   while (true) {    while (currentFrame.nextEnt == currentFrame.entCount) {      stats.endBlock(currentFrame);      if (!currentFrame.isLastInFloor) {        currentFrame.loadNextFloorBlock();        stats.startBlock(currentFrame,true);        break;      } else {        if (currentFrame.ord == 0) {          break allTerms;        }        final long lastFP=currentFrame.fpOrig;        currentFrame=stack[currentFrame.ord - 1];        assert lastFP == currentFrame.lastSubFP;      }    }    while (true) {      if (currentFrame.next()) {        currentFrame=pushFrame(null,currentFrame.lastSubFP,term.length());        currentFrame.fpOrig=currentFrame.fp;        currentFrame.loadBlock();        stats.startBlock(currentFrame,!currentFrame.isLastInFloor);      } else {        stats.term(term.get());        break;      }    }  }  stats.finish();  currentFrame=staticFrame;  if (fr.index != null) {    arc=fr.index.getFirstArc(arcs[0]);    assert arc.isFinal();  } else {    arc=null;  }  currentFrame=pushFrame(arc,fr.rootCode,0);  currentFrame.rewind();  currentFrame.loadBlock();  validIndexPrefix=0;  term.clear();  return stats;}  }
class C{  public MailBuilder to(String name,String email){  return param("to",name + "<" + email+ ">");}  }
class C{  public static <U extends Key<?>>NameMatcher<U> nameStartsWith(String compareTo){  return new NameMatcher<U>(compareTo,StringOperatorName.STARTS_WITH);}  }
class C{  public NotificationChain basicSetRhs(Expression newRhs,NotificationChain msgs){  Expression oldRhs=rhs;  rhs=newRhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ASSIGNMENT_EXPRESSION__RHS,oldRhs,newRhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Catalog(String name){  super(name);  Item root=new Item("root");  getItemMap().put(0,root);}  }
class C{  public boolean drawImage(Image img,int x,int y,ImageObserver observer){  return g.drawImage(img,x,y,observer);}  }
class C{  public String resourcePath(){  return resourcePath;}  }
class C{  public void filterRows(){  if (m_parent == null)   return;  CascadedRowManager rowman=(CascadedRowManager)m_rows;  IntIterator crows=m_rows.rows();  while (crows.hasNext()) {    int crow=crows.nextInt();    if (!m_rowFilter.getBoolean(m_parent.getTuple(rowman.getParentRow(crow)))) {      removeCascadedRow(crow);    }  }  Iterator ptuples=m_parent.tuples(m_rowFilter);  while (ptuples.hasNext()) {    Tuple pt=(Tuple)ptuples.next();    int prow=pt.getRow();    if (rowman.getChildRow(prow) == -1)     addCascadedRow(prow);  }}  }
class C{  public SoftCache(int initialCapacity){  hash=new HashMap(initialCapacity);}  }
class C{  public void readData(DataInput din) throws IOException {  status=din.readUnsignedShort();  events=din.readUnsignedShort();}  }
class C{  protected void drawMarkHilighted(Graphics2D g2,float x,float y){  Rectangle2D bounds=mark.getBounds2D();  float w=(float)bounds.getWidth();  float h=(float)bounds.getHeight();  x=x - (w / 2);  y=y - (h / 2);  g2.translate(x,y);  if (hilightedMarkFillPaint != null) {    g2.setPaint(hilightedMarkFillPaint);    g2.fill(mark);  }  g2.setPaint(hilightedMarkPaint);  g2.setStroke(hilightedMarkStroke);  g2.draw(mark);  g2.translate(-x,-y);  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);  markBounds.add(rect);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public double eval(double params[]){  return (Math.min(params[0],params[1]));}  }
class C{  public JsonObject toJsonObject(){  JsonObject json=new JsonObject();  json.put("current",pageAsked);  json.put("next",pageAsked.equals(totalPages) ? null : pageAsked + 1);  json.put("last",pageAsked.equals(totalPages) ? null : totalPages);  json.put("prev",pageAsked.equals(1) ? null : pageAsked - 1);  json.put("first",pageAsked == 1 ? null : 1);  json.put("perPage",itemsPerPage);  json.put("total",totalPages);  return json;}  }
class C{  public void oldDispatch(Remote obj,RemoteCall call,int op) throws IOException {  long hash;  try {    ObjectInput in;    try {      in=call.getInputStream();      try {        Class<?> clazz=Class.forName("sun.rmi.transport.DGCImpl_Skel");        if (clazz.isAssignableFrom(skel.getClass())) {          ((MarshalInputStream)in).useCodebaseOnly();        }      } catch (      ClassNotFoundException ignore) {      }      hash=in.readLong();    } catch (    Exception readEx) {      throw new UnmarshalException("error unmarshalling call header",readEx);    }    logCall(obj,skel.getOperations()[op]);    unmarshalCustomCallData(in);    skel.dispatch(obj,call,op,hash);  } catch (  Throwable e) {    logCallException(e);    ObjectOutput out=call.getResultStream(false);    if (e instanceof Error) {      e=new ServerError("Error occurred in server thread",(Error)e);    } else     if (e instanceof RemoteException) {      e=new ServerException("RemoteException occurred in server thread",(Exception)e);    }    if (suppressStackTraces) {      clearStackTraces(e);    }    out.writeObject(e);  } finally {    call.releaseInputStream();    call.releaseOutputStream();  }}  }
class C{  @Override public String toString(){  final StringBuffer instructionString=new StringBuffer(String.format("%s  %s ",getAddress().toHexString(),getMnemonic()));  boolean addComma=false;  for (  final Operand operand : getOperands()) {    if (addComma) {      instructionString.append(", ");    }    addComma=true;    instructionString.append(operand.toString());  }  return instructionString.toString();}  }
class C{  private static String invoke16Method(Object obj,Class<?> type,String method,Class<?> retType){  if (!VersionUtils.isJava16OrAbove())   return "-1";  try {    Method m=type.getMethod(method);    Object ret=m.invoke(obj);    if (ret == null)     return "-7";    if (!(retType.isAssignableFrom(ret.getClass())))     return "-5";    return ret.toString();  } catch (  NoSuchMethodException bail) {    return "-2";  }catch (  IllegalAccessException bail) {    return "-3";  }catch (  InvocationTargetException bail) {    return "-4";  }catch (  Throwable bad) {    return "-6";  }}  }
class C{  public void start(){  if (readingFuture == null) {    readingFuture=executor.execute(null);  }}  }
class C{  public double weight(){  return weight;}  }
class C{  public AttributesImpl(){  length=0;  data=null;}  }
class C{  @Override public void promptLoop(){  lock.lock();  try {    while (true) {      try {        endOfShell.await();      } catch (      InterruptedException e) {      }      this.exitShellRequest=ExitShellRequest.NORMAL_EXIT;      setShellStatus(Status.SHUTTING_DOWN);      break;    }  }  finally {    lock.unlock();  }}  }
class C{  public static String[] extractNoDictionaryDimsArr(String noDictionaryDim){  if (null == noDictionaryDim || noDictionaryDim.isEmpty()) {    return new String[0];  }  String[] NoDictionary=noDictionaryDim.split(CarbonCommonConstants.COMA_SPC_CHARACTER);  List<String> list1=new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  for (int i=0; i < NoDictionary.length; i++) {    String[] dim=NoDictionary[i].split(CarbonCommonConstants.COLON_SPC_CHARACTER);    list1.add(dim[0]);  }  return list1.toArray(new String[list1.size()]);}  }
class C{  public void testIsValid(){  CoreIdRfidProtocol instance=new CoreIdRfidProtocol();  assertEquals(true,instance.isValid(msgStandalone));  assertEquals(false,instance.isValid(msgBadChkSumStandalone));  instance=new CoreIdRfidProtocol('A','H',1);  assertEquals(true,instance.isValid(msgConcentrator));  assertEquals(false,instance.isValid(msgBadChkSumConcentrator));}  }
class C{  private static Object appendOrPrepend(Object origVal,Object appendVal,boolean appendPlc) throws IgniteCheckedException {  if (appendVal instanceof String && origVal instanceof String)   return appendPlc ? origVal + (String)appendVal : (String)appendVal + origVal;  if (appendVal instanceof Map && origVal instanceof Map) {    Map<Object,Object> origMap=(Map<Object,Object>)origVal;    Map<Object,Object> appendMap=(Map<Object,Object>)appendVal;    Map<Object,Object> map=X.cloneObject(origMap,false,true);    if (appendPlc)     map.putAll(appendMap); else {      map.clear();      map.putAll(appendMap);      map.putAll(origMap);    }    for (    Map.Entry<Object,Object> e : appendMap.entrySet())     if (e.getValue() == null && map.get(e.getKey()) == null)     map.remove(e.getKey());    return map;  }  if (appendVal instanceof Collection<?> && origVal instanceof Collection<?>) {    Collection<Object> origCol=(Collection<Object>)origVal;    Collection<Object> appendCol=(Collection<Object>)appendVal;    Collection<Object> col=X.cloneObject(origCol,false,true);    if (appendPlc)     col.addAll(appendCol); else {      col.clear();      col.addAll(appendCol);      col.addAll(origCol);    }    return col;  }  throw new IgniteCheckedException("Incompatible types [appendVal=" + appendVal + ", old="+ origVal+ ']');}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.156 -0500",hash_original_method="B4C5BDF3B63061452DED86E729A4379E",hash_generated_method="E437A036D13E6AAE362166992D5D101B") public static void sort(long[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public static boolean unInline(final INaviView view,final INaviCodeNode node){  try {    final CInlinedNodes inlinedNodes=getInlinedNodes(node);    if (inlinedNodes == null) {      return false;    }    final List<INaviInstruction> instructions=Lists.newArrayList(inlinedNodes.getStartNode().getInstructions());    final boolean mergeBlocks=inlinedNodes.getEndNode().getIncomingEdges().size() == 1;    if (mergeBlocks) {      instructions.addAll(Lists.newArrayList(inlinedNodes.getEndNode().getInstructions()));    }    final CCodeNode combinedNode=view.getContent().createCodeNode(getParentFunction(inlinedNodes.getStartNode()),instructions);    combinedNode.setColor(inlinedNodes.getStartNode().getColor());    combinedNode.setBorderColor(inlinedNodes.getStartNode().getBorderColor());    removeTextNodes(view,inlinedNodes.getInlinedNodes());    view.getContent().deleteNodes(inlinedNodes.getInlinedNodes());    for (    final INaviEdge incomingEdge : inlinedNodes.getStartNode().getIncomingEdges()) {      view.getContent().createEdge(incomingEdge.getSource(),combinedNode,incomingEdge.getType());    }    if (mergeBlocks) {      for (      final INaviEdge outgoingEdge : inlinedNodes.getEndNode().getOutgoingEdges()) {        view.getContent().createEdge(combinedNode,outgoingEdge.getTarget(),outgoingEdge.getType());      }    } else {      view.getContent().createEdge(combinedNode,inlinedNodes.getEndNode(),EdgeType.JUMP_UNCONDITIONAL);    }    view.getContent().deleteNode(inlinedNodes.getStartNode());    if (mergeBlocks) {      view.getContent().deleteNode(inlinedNodes.getEndNode());    }    return true;  } catch (  final IllegalStateException exception) {    CUtilityFunctions.logException(exception);    return false;  }}  }
class C{  public void registerCommand(ClientCommand command){  commandsHash.put(command.getName(),command);}  }
class C{  public Matrix zoomOut(float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(0.7f,0.7f,x,y);  return save;}  }
class C{  public void createNewIO(boolean isForReconnect) throws SQLException {synchronized (getConnectionMutex()) {    Properties mergedProps=exposeAsProperties(this.props);    if (!getHighAvailability()) {      connectOneTryOnly(isForReconnect,mergedProps);      return;    }    connectWithRetries(isForReconnect,mergedProps);  }}  }
class C{  public static TimeOfDay hourAndMinuteOfDay(int hour,int minute){  return new TimeOfDay(hour,minute);}  }
class C{  private static boolean isNetworkProblem(Object error){  return (error instanceof NetworkError) || (error instanceof NoConnectionError);}  }
class C{  public static short[] remove(short[] buffer,int offset,int length){  int len2=buffer.length - length;  short temp[]=new short[len2];  System.arraycopy(buffer,0,temp,0,offset);  System.arraycopy(buffer,offset + length,temp,offset,len2 - offset);  return temp;}  }
class C{  public void remove(KeyStroke key){  super.remove(key);  if (getComponent() != null) {    getComponent().componentInputMapChanged(this);  }}  }
class C{  private void put(final Item i){  if (index > threshold) {    int oldCapacity=table.length;    Item oldMap[]=table;    int newCapacity=oldCapacity * 2 + 1;    Item newMap[]=new Item[newCapacity];    threshold=(int)(newCapacity * 0.75);    table=newMap;    for (int j=oldCapacity; j-- > 0; ) {      for (Item old=oldMap[j]; old != null; ) {        Item e=old;        old=old.next;        int index=(e.hashCode & 0x7FFFFFFF) % newCapacity;        e.next=newMap[index];        newMap[index]=e;      }    }  }  int index=(i.hashCode & 0x7FFFFFFF) % table.length;  i.next=table[index];  table[index]=i;}  }
class C{  public static void write(InputStream in,OutputStream out,boolean closeBoth) throws IOException {  byte[] buff=new byte[1024];  int read=0;  while ((read=in.read(buff)) > 0) {    out.write(buff,0,read);  }  out.flush();  if (closeBoth) {    safeCloseStreams(in,out);  }}  }
class C{  private Properties loadEnvPropertyFile(){  Properties properties=null;  InputStream in=null;  try {    in=getClass().getClassLoader().getResourceAsStream("env.properties");    if (in == null)     return null;    properties=new Properties();    properties.load(in);    in.close();  } catch (  Exception e) {  }  return properties;}  }
class C{  private boolean assignToNearestCluster(Relation<V> relation,double[][] means,List<ModifiableDBIDs> clusters,WritableIntegerDataStore assignment,double[] varsum,double[][] cdist,LongStatistic diststat){  assert (k == means.length);  long dists=0;  boolean changed=false;  Arrays.fill(varsum,0.);  for (  ModifiableDBIDs cluster : clusters) {    cluster.clear();  }  final NumberVectorDistanceFunction<?> df=getDistanceFunction();  double mult=(df instanceof SquaredEuclideanDistanceFunction) ? 4 : 2;  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    final int cur=assignment.intValue(iditer), ini=cur >= 0 ? cur : 0;    V fv=relation.get(iditer);    double mindist=df.distance(fv,DoubleVector.wrap(means[ini]));    ++dists;    final double thresh=mult * mindist;    int minIndex=ini;    for (int i=0; i < k; i++) {      if (i == ini || cdist[minIndex][i] >= thresh) {        continue;      }      double dist=df.distance(fv,DoubleVector.wrap(means[i]));      ++dists;      if (dist < mindist) {        minIndex=i;        mindist=dist;      }    }    varsum[minIndex]+=mindist;    clusters.get(minIndex).add(iditer);    changed|=assignment.putInt(iditer,minIndex) != minIndex;  }  if (diststat != null) {    diststat.increment(dists);  }  return changed;}  }
class C{  protected synchronized void begin(String msg){  if (mStartTime > 0) {    final long time=System.nanoTime() - mStartTime;    println(mNext + "\t" + time / 1000 + "us");    mTime.add(time);  }  if ((mDelays & 1) == 1) {    println("Wait");    final long time=System.nanoTime();    while (System.nanoTime() - time < 10 * 1000 * 1000) {    }  }  mDelays=mDelays >>> 1;  mNext=msg;  mStartTime=System.nanoTime();}  }
class C{  @Override protected int capacity(){  return _states.length;}  }
class C{  public boolean execute(String action,CordovaArgs args,CallbackContext callbackContext) throws JSONException {  return false;}  }
class C{  public void incEventsReceived(int delta){  this.stats.incInt(eventsReceivedId,delta);}  }
class C{  public boolean isSkipDayIfHourDoesNotExist(){  return skipDayIfHourDoesNotExist;}  }
class C{  public static byte[] shortToBytes(short value){  byte[] result=new byte[2];  result[0]=(byte)(value >> 8 & 0xff);  result[1]=(byte)(value & 0xff);  return result;}  }
class C{  public SaturationEffect(float scale){  this.scale=scale;}  }
class C{  public final boolean h1Castle(){  return (castleMask & (1 << H1_CASTLE)) != 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.450 -0400",hash_original_method="BEF7C8A36A61745EB3A28E57DD5A9FED",hash_generated_method="BC28DF8440C56DEF5BEC0854D5C512FB") private int handleD(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,2,"DG")) {    if (contains(value,index + 2,1,"I","E","Y")) {      result.append('J');      index+=3;    } else {      result.append("TK");      index+=2;    }  } else   if (contains(value,index,2,"DT","DD")) {    result.append('T');    index+=2;  } else {    result.append('T');    index++;  }  return index;}  }
class C{  public static Response createConnectionBindErrorResponse(char errorCode) throws IllegalArgumentException {  return createConnectionBindErrorResponse(errorCode,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void checkHexDigit(int c) throws IOException {  if (c >= '0' && c <= '9') {    return;  }  if (c >= 'a' && c <= 'f') {    return;  }  if (c >= 'A' && c <= 'F') {    return;  }  hasNextChar=true;  nextChar=c;  throw new IOException("Did not find four digit hex character code." + " line: " + lexer.getLine() + " col:"+ lexer.getColumn());}  }
class C{  public static Rect addJoint2Bounds(List<ShapeRecord> records,LineStyle ls,AbstractStrokeNode stroke,double halfWeight,Rect pathBBox){  Rect newRect=pathBBox;  int count=records.size();  int start=0;  int end=0;  int lastMoveX=0;  int lastMoveY=0;  int lastOpenSegment=0;  int x=0, y=0;  double miterLimit=stroke.miterLimit;  if (miterLimit < 1)   miterLimit=1;  int[][] cooridinates=getCoordinates(records);  while (true) {    while (start < count && !(records.get(start) instanceof StyleChangeRecord)) {      x=cooridinates[start - 1][0];      y=cooridinates[start - 1][1];      if (tangentIsValid(records.get(start),x,y))       break;      start++;    }    if (start >= count)     break;    ShapeRecord startSegment=records.get(start);    if (startSegment instanceof StyleChangeRecord) {      lastOpenSegment=start + 1;      lastMoveX=((StyleChangeRecord)startSegment).moveDeltaX;      lastMoveY=((StyleChangeRecord)startSegment).moveDeltaY;      start++;      continue;    }    int startSegmentX=cooridinates[start][0];    int startSegmentY=cooridinates[start][1];    if ((start == count - 1 || records.get(start + 1) instanceof StyleChangeRecord) && startSegmentX == lastMoveX && startSegmentY == lastMoveY) {      end=lastOpenSegment;    } else {      end=start + 1;    }    while (end < count && !(records.get(end) instanceof StyleChangeRecord)) {      if (tangentIsValid(records.get(end),startSegmentX,startSegmentY))       break;      end++;    }    if (end >= count)     break;    ShapeRecord endSegment=records.get(end);    if (!(endSegment instanceof StyleChangeRecord)) {      newRect=addMiterLimitStrokeToBounds(startSegment,endSegment,miterLimit,halfWeight,newRect,x,y,startSegmentX,startSegmentY);    }    start=start > end ? start + 1 : end;  }  return newRect;}  }
class C{  public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults){  for (  AttachmentSender sender : mAttachmentSenders) {    sender.onRequestPermissionsResult(requestCode,permissions,grantResults);  }}  }
class C{  public void writeBinarySimpleModel(XMLWriter writer,PartitionSubstitutionModel model){  String dataTypeDescription=model.getDataType().getDescription();  String prefix=model.getPrefix();  writer.writeComment("The Binary simple model (based on the general substitution model)");  writer.writeOpenTag(BinarySubstitutionModelParser.BINARY_SUBSTITUTION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + "bsimple")});  writer.writeOpenTag(GeneralSubstitutionModelParser.FREQUENCIES);  writer.writeOpenTag(FrequencyModelParser.FREQUENCY_MODEL,new Attribute[]{new Attribute.Default<String>("dataType",dataTypeDescription)});  writeAlignmentRefInFrequencies(writer,model,prefix,-1);  writeFrequencyModelBinary(writer,model,prefix);  writer.writeCloseTag(FrequencyModelParser.FREQUENCY_MODEL);  writer.writeCloseTag(GeneralSubstitutionModelParser.FREQUENCIES);  writer.writeCloseTag(BinarySubstitutionModelParser.BINARY_SUBSTITUTION_MODEL);}  }
class C{  public Tab(Context context){  mContext=context;  mItems=new ArrayList<>();  if (context != null)   mPackageName=mContext.getPackageName();}  }
class C{  public NutchDocument filter(NutchDocument doc,Parse parse,Text url,CrawlDatum datum,Inlinks inlinks) throws IndexingException {  if (conf != null)   this.setConf(conf);  if (urlMetaTags == null || doc == null)   return doc;  for (  String metatag : urlMetaTags) {    Text metadata=(Text)datum.getMetaData().get(new Text(metatag));    if (metadata != null)     doc.add(metatag,metadata.toString());  }  return doc;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.432 -0500",hash_original_method="A67ED2D6F45381C31C2891A6F92AFBC4",hash_generated_method="F57BCB0D6CB5F326A2C8616C413C919C") public void printStackTrace(java.io.PrintWriter s){  if (s == null) {    s=new java.io.PrintWriter(System.err,true);  }  try {    String locInfo=getLocationAsString();    if (null != locInfo) {      s.println(locInfo);    }    super.printStackTrace(s);  } catch (  Throwable e) {  }}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "INVALID CUmemAttach_flags: " + n;  }  String result="";  if ((n & CU_MEM_ATTACH_GLOBAL) != 0)   result+="CU_MEM_ATTACH_GLOBAL ";  if ((n & CU_MEM_ATTACH_HOST) != 0)   result+="CU_MEM_ATTACH_HOST ";  if ((n & CU_MEM_ATTACH_SINGLE) != 0)   result+="CU_MEM_ATTACH_SINGLE ";  return result;}  }
class C{  public THashPrimitiveIterator(TPrimitiveHash hash){  _hash=hash;  _expectedSize=_hash.size();  _index=_hash.capacity();}  }
class C{  public void skip(int nBytes){  this.offset+=nBytes;}  }
class C{  protected void clickOnView(int id){  solo.clickOnView(solo.getView(id));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public <T extends ServiceDocument>T sendPostAndWait(String url,Class<T> bodyType){  return sendAndWait(Operation.createPost(URI.create(url)),bodyType);}  }
class C{  public boolean usesXAResource(XAResource res){  return true;}  }
class C{  private void createPortland(final int HOME_END_TIME){  int currentId=1;  int duration=(int)(0.5 * 3600);  final int DEFAULT_CARS_PER_HOUR_PER_LANE=1000;  currentId=addCommodity("8","2",HOME_END_TIME,duration,(int)(0.22 * DEFAULT_CARS_PER_HOUR_PER_LANE),"4 3 2",currentId);  currentId=addCommodity("145","67",HOME_END_TIME,duration,(int)(0.7 * DEFAULT_CARS_PER_HOUR_PER_LANE),"1 7 13 19",currentId);  currentId=addCommodity("8","2",HOME_END_TIME,duration,(int)(0.1 * DEFAULT_CARS_PER_HOUR_PER_LANE),"4 3 2",currentId);  currentId=addCommodity("2","13",HOME_END_TIME,duration,(int)(0.19 * DEFAULT_CARS_PER_HOUR_PER_LANE),"1 7 8",currentId);  currentId=addCommodity("13","158",HOME_END_TIME,duration,(int)(0.25 * DEFAULT_CARS_PER_HOUR_PER_LANE),"9 10 4",currentId);  currentId=addCommodity("78","130",HOME_END_TIME,duration,(int)(0.1 * DEFAULT_CARS_PER_HOUR_PER_LANE),"20 14 13",currentId);  currentId=addCommodity("92","122",HOME_END_TIME,duration,(int)(0.18 * DEFAULT_CARS_PER_HOUR_PER_LANE),"4 3 2 1",currentId);  currentId=addCommodity("133","24",HOME_END_TIME,duration,(int)(0.15 * DEFAULT_CARS_PER_HOUR_PER_LANE),"19 20 21 22 16 15",currentId);  currentId=addCommodity("33","37",HOME_END_TIME,duration,(int)(0.25 * DEFAULT_CARS_PER_HOUR_PER_LANE),"21 22",currentId);  currentId=addCommodity("125","17",HOME_END_TIME,duration,(int)(0.7 * DEFAULT_CARS_PER_HOUR_PER_LANE),"7 8 9 10",currentId);  currentId=addCommodity("78","122",HOME_END_TIME,duration,(int)(0.34 * DEFAULT_CARS_PER_HOUR_PER_LANE),"20 14 8 2 1",currentId);  currentId=addCommodity("98","158",HOME_END_TIME,duration,(int)(0.7 * DEFAULT_CARS_PER_HOUR_PER_LANE),"22 16 10 4",currentId);  currentId=addCommodity("28","130",HOME_END_TIME,duration,(int)(0.24 * DEFAULT_CARS_PER_HOUR_PER_LANE),"16 15 14 13",currentId);}  }
class C{  public Container add(Component cmp){  addComponent(cmp);  return this;}  }
class C{  public void onDetach(){  if (!shownByMe && !dismissed) {    dismissed=true;  }}  }
class C{  public SurfaceManager(Surface surface){  mSurface=surface;  eglSetup();}  }
class C{  public static String attributeSingleQuoted(CharSequence value){  return encode(value,ATTR_SQ,LEN);}  }
class C{  public static void addElectrolyticSeparatorRecipe(FluidStack fluid,double energy,GasStack leftOutput,GasStack rightOutput){  addRecipe(Recipe.ELECTROLYTIC_SEPARATOR,new SeparatorRecipe(fluid,energy,leftOutput,rightOutput));}  }
class C{  public XTIFFField(int tag,int type,int count,Object data){  this.tag=tag;  this.type=type;  this.count=count;  this.data=data;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void execute(String dir,String db,boolean quiet){  new DeleteDbFiles().process(dir,db,quiet);}  }
class C{  @RequestMapping(value="/register",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> registerAccount(@Valid @RequestBody UserDTO userDTO,HttpServletRequest request){  return userRepository.findOneByLogin(userDTO.getLogin()).map(null).orElseGet(null);}  }
class C{  public static Object print(Context cx,Scriptable thisObj,Object[] args,Function funObj){  PrintStream out=getInstance(funObj).getOut();  for (int i=0; i < args.length; i++) {    if (i > 0)     out.print(" ");    String s=Context.toString(args[i]);    out.print(s);  }  out.println();  return Context.getUndefinedValue();}  }
class C{  @Override public void onPageFinished(WebView view,String url){  if (mLoadingFrame.getVisibility() == View.VISIBLE) {    mLoadingFrame.setVisibility(View.GONE);    mFlattrWebview.setVisibility(View.VISIBLE);  }}  }
class C{  public void testSmallSampleOnly(){  int rightFiles=20;  String rightExtension=".txt";  createFile(rightFiles,rightExtension);  int wrongFiles=20;  String wrongExtention=".abc";  createFile(wrongFiles,wrongExtention);  MyFileFilter txtFilter=new MyFileFilter(rightExtension);  MyFileSampler textSampler=new MyFileSampler(textInputFolder.getAbsolutePath());  int numberToSample=(int)Math.max(1,Math.round(0.5 * rightFiles));  List<File> files=textSampler.sampleFiles(numberToSample,txtFilter);  assertEquals("Incorrect number of files sampled.",numberToSample,files.size());  assertEquals("Files should not have been copied.",0,textOutputFolder.listFiles().length);}  }
class C{  private List<AttributedCharacterIterator> createFormattedLines(String text,Color textColor,int width){  AttributedString formattedString=formatLine(text.trim(),textColor);  return splitFormatted(formattedString,width);}  }
class C{  @JsonCreator public VectorClock(@JsonProperty("entries") List<ClockEntry> versions,@JsonProperty("timestamp") long timestamp){  this.versions=versions;  this.timestamp=timestamp;}  }
class C{  protected void addWarmupID(String id){  if (this.warmupIDs == null) {    this.warmupIDs=new HashSet<String>();  }  this.warmupIDs.add(id);}  }
class C{  public HostPort hostPort(boolean allowWS) throws ParseException {  if (debug)   dbg_enter("hostPort");  try {    Host host=this.host();    HostPort hp=new HostPort();    hp.setHost(host);    if (allowWS)     lexer.SPorHT();    if (lexer.hasMoreChars()) {      char la=lexer.lookAhead(0);switch (la) {case ':':        lexer.consume(1);      if (allowWS)       lexer.SPorHT();    try {      String port=lexer.number();      hp.setPort(Integer.parseInt(port));    } catch (    NumberFormatException nfe) {      throw new ParseException(lexer.getBuffer() + " :Error parsing port ",lexer.getPtr());    }  break;case ',':case ';':case '?':case '>':case ' ':case '\t':case '\r':case '\n':case '/':break;case '%':if (stripAddressScopeZones) {break;}default :if (!allowWS) {throw new ParseException(lexer.getBuffer() + " Illegal character in hostname:" + lexer.lookAhead(0),lexer.getPtr());}}}return hp;}  finally {if (debug) dbg_leave("hostPort");}}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST__DECLARED_NAME:    return getDeclaredName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void write(char[] plain) throws Exception {  buffer.write(result);  buffer.clear();  result.write(plain);}  }
class C{  protected void visitJSR(int pos,byte[] code) throws BadBytecode {}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(((Agent)stack.pop()).testAgentFlag(Agent.DELETE_AFTER_CONVERT_FLAG));}  }
class C{  public <T>T read(String name,Class<T> cls) throws XMLStreamException {  return _xml.get(name,cls);}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public ParamsRequestCondition(String... params){  this(parseExpressions(params));}  }
class C{  @Deprecated public boolean isFillBelowLine(){  return mFillBelowLine.size() > 0;}  }
class C{  public void includeAll(){  for (int i=0; i < m_Selected.length; i++) {    m_Selected[i]=true;  }  fireTableRowsUpdated(0,m_Selected.length);}  }
class C{  private boolean queryAppsServerInfo(){  log.finer(getAppsHost());  long start=System.currentTimeMillis();  m_okApps=false;  m_queryAppsServer=true;  m_appsException=null;  if (getAppsHost().equalsIgnoreCase("MyAppsServer")) {    log.warning(getAppsHost() + " ignored");    return m_okApps;  }  try {    Status status=(Status)lookup(Status.JNDI_NAME);    updateInfoFromServer(status);    m_okApps=true;  } catch (  CommunicationException ce) {    m_appsException=ce;    String connect=(String)m_env.get(Context.PROVIDER_URL);    if (connect == null || connect.trim().length() == 0)     connect=getAppsHost() + ":" + getAppsPort();    log.warning(connect + "\n - " + ce.toString()+ "\n - "+ m_env);    ce.printStackTrace();  }catch (  Exception e) {    m_appsException=e;    String connect=(String)m_env.get(Context.PROVIDER_URL);    if (connect == null || connect.trim().length() == 0)     connect=getAppsHost() + ":" + getAppsPort();    log.warning(connect + "\n - " + e.toString()+ "\n - "+ m_env);    e.printStackTrace();  }  log.fine("Success=" + m_okApps + " - "+ (System.currentTimeMillis() - start)+ "ms");  return m_okApps;}  }
class C{  public static void scaleImage(ImageView view,Context context){  try {    Drawable drawing=view.getDrawable();    if (drawing == null) {      return;    }    Bitmap bitmap=((BitmapDrawable)drawing).getBitmap();    int width=bitmap.getWidth();    int height=bitmap.getHeight();    int bounding=dpToPx(context,250);    Log.i("ImageResizer","original width = " + Integer.toString(width));    Log.i("ImageResizer","original height = " + Integer.toString(height));    Log.i("ImageResizer","bounding = " + Integer.toString(bounding));    float xScale=((float)bounding) / width;    float yScale=((float)bounding) / height;    float scale=(xScale <= yScale) ? xScale : yScale;    Log.i("ImageResizer","xScale = " + Float.toString(xScale));    Log.i("ImageResizer","yScale = " + Float.toString(yScale));    Log.i("ImageResizer","scale = " + Float.toString(scale));    Matrix matrix=new Matrix();    matrix.postScale(scale,scale);    Bitmap scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true);    width=scaledBitmap.getWidth();    height=scaledBitmap.getHeight();    BitmapDrawable result=new BitmapDrawable(scaledBitmap);    Log.i("ImageResizer","scaled width = " + Integer.toString(width));    Log.i("ImageResizer","scaled height = " + Integer.toString(height));    view.setImageDrawable(result);    Log.i("ImageResizer","done");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private Platform createPlatform(){  Platform platform;  try {    String osName=System.getProperty("os.name");    if (osName != null) {      osName=osName.toLowerCase();      logger.debug("os.name = {}",osName);      if (osName.contains("windows")) {        logger.debug("Detected Windows platform");        platform=new WindowsPlatform();      } else       if (osName.contains("solaris") || osName.contains("sunos") || osName.contains("linux")|| osName.contains("hp-ux")) {        if (isGnome()) {          logger.debug("Detected Gnome window manager on Posix platform");          platform=new PosixGnomePlatform();        } else         if (isKDE()) {          logger.debug("Detected KDE window manager on Posix platform");          platform=new PosixKDEPlatform();        } else {          logger.debug("Detected Posix platform");          platform=new PosixPlatform();        }      } else       if (osName.contains("mac os x") || osName.contains("macos") || osName.contains("darwin")|| System.getProperty("mrj.version") != null) {        logger.debug("Detected Mac OS X platform");        platform=new MacOSXPlatform();      } else {        logger.warn("Unrecognized operating system: '{}', falling back to default platform",osName);        platform=new DefaultPlatform();      }    } else {      logger.warn("System property 'os.name' is null, falling back to default platform");      platform=new DefaultPlatform();    }  } catch (  SecurityException e) {    logger.warn("Not allowed to read system property 'os.name', falling back to default platform",e);    platform=new DefaultPlatform();  }  return platform;}  }
class C{  public static InterpolationMethod parseInterpolationMethod(FXGNode node,String value,String name,InterpolationMethod defaultValue){  if (FXG_INTERPOLATION_RGB_VALUE.equals(value)) {    return InterpolationMethod.RGB;  } else   if (FXG_INTERPOLATION_LINEARRGB_VALUE.equals(value)) {    return InterpolationMethod.LINEAR_RGB;  } else {    if (((AbstractFXGNode)node).isVersionGreaterThanCompiler()) {      FXGLog.getLogger().log(FXGLogger.WARN,"DefaultAttributeValue",null,((AbstractFXGNode)node).getDocumentName(),node.getStartLine(),node.getStartColumn(),defaultValue,name);      return defaultValue;    } else {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"UnknownInterpolationMethod",value);    }  }}  }
class C{  public void forEachBlockDepthFirst(boolean reverse,SsaBasicBlock.Visitor v){  BitSet visited=new BitSet(blocks.size());  Stack<SsaBasicBlock> stack=new Stack<SsaBasicBlock>();  SsaBasicBlock rootBlock=reverse ? getExitBlock() : getEntryBlock();  if (rootBlock == null) {    return;  }  stack.add(null);  stack.add(rootBlock);  while (stack.size() > 0) {    SsaBasicBlock cur=stack.pop();    SsaBasicBlock parent=stack.pop();    if (!visited.get(cur.getIndex())) {      BitSet children=reverse ? cur.getPredecessors() : cur.getSuccessors();      for (int i=children.nextSetBit(0); i >= 0; i=children.nextSetBit(i + 1)) {        stack.add(cur);        stack.add(blocks.get(i));      }      visited.set(cur.getIndex());      v.visitBlock(cur,parent);    }  }}  }
class C{  public static void register(String algorithmURI,Class<? extends CanonicalizerSpi> implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException {  JavaUtils.checkRegisterPermission();  Class<? extends CanonicalizerSpi> registeredClass=canonicalizerHash.get(algorithmURI);  if (registeredClass != null) {    Object exArgs[]={algorithmURI,registeredClass};    throw new AlgorithmAlreadyRegisteredException("algorithm.alreadyRegistered",exArgs);  }  canonicalizerHash.put(algorithmURI,implementingClass);}  }
class C{  public StellungnahmeDSB(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public Type type(){  return type;}  }
class C{  public HasXAEmulationValidator(ConfigurationType type){  super(type,DatasourcePropertySet.TRANSACTION_SUPPORT);}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  protected void uninstallKeyboardActions(){  SwingUtilities.replaceUIInputMap(comboBox,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,null);  SwingUtilities.replaceUIActionMap(comboBox,null);}  }
class C{  public void testBuilder_RootOnConstruct_MultipleAppends(){  SQLException root=new SQLException();  List<SQLException> additionalExceptions=new ArrayList<SQLException>();  for (int count=1; count <= 3; count++) {    additionalExceptions.add(new SQLException(Integer.toString(count)));  }  SQLExceptionChainBuilder<SQLException> builder=new SQLExceptionChainBuilder<SQLException>(root);  for (  SQLException ex : additionalExceptions) {    builder.append(ex);  }  assertTrue("SQLExceptionChainBuilder has a exception",builder.hasException());  SQLException resultException=builder.getException();  assertSame("Expected root exception to be identical to returned exception",root,resultException);  checkExceptionChain(resultException,additionalExceptions);}  }
class C{  Request(String method,HttpHost host,HttpHost proxyHost,String path,InputStream bodyProvider,int bodyLength,EventHandler eventHandler,Map<String,String> headers){  mEventHandler=eventHandler;  mHost=host;  mProxyHost=proxyHost;  mPath=path;  mBodyProvider=bodyProvider;  mBodyLength=bodyLength;  if (bodyProvider == null && !"POST".equalsIgnoreCase(method)) {    mHttpRequest=new BasicHttpRequest(method,getUri());  } else {    mHttpRequest=new BasicHttpEntityEnclosingRequest(method,getUri());    if (bodyProvider != null) {      setBodyProvider(bodyProvider,bodyLength);    }  }  addHeader(HOST_HEADER,getHostPort());  addHeader(ACCEPT_ENCODING_HEADER,"gzip");  addHeaders(headers);}  }
class C{  public LoggingFilter(String name){  if (name == null) {    this.name=LoggingFilter.class.getName();  } else {    this.name=name;  }  logger=LoggerFactory.getLogger(this.name);}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (SerialAddress.validSystemNameFormat(systemName,'L'));}  }
class C{  MultistepExprHolder addInSortedOrder(ExpressionOwner exprOwner,int stepCount){  MultistepExprHolder first=this;  MultistepExprHolder next=this;  MultistepExprHolder prev=null;  while (null != next) {    if (stepCount >= next.m_stepCount) {      MultistepExprHolder newholder=new MultistepExprHolder(exprOwner,stepCount,next);      if (null == prev)       first=newholder; else       prev.m_next=newholder;      return first;    }    prev=next;    next=next.m_next;  }  prev.m_next=new MultistepExprHolder(exprOwner,stepCount,null);  return first;}  }
class C{  public String toString(){  String str="";  String followedBy="";  int lastType=-1;  String lastString="";  int singlesCount=0;  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {    FormatConstraint constraint=(FormatConstraint)e.nextElement();    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {      if (lastType != -1) {        if (lastType != constraint.type) {          str+=followedBy + singlesCount + lastString;          followedBy=" followed by ";          singlesCount=1;          lastType=constraint.type;          lastString=constraint.toString();        } else {          singlesCount++;        }      } else {        lastType=constraint.type;        lastString=constraint.toString();        singlesCount=1;      }    } else {      if (lastType != -1) {        str+=followedBy + singlesCount + lastString;        followedBy=" followed by ";        lastType=-1;        singlesCount=0;        lastString="";      }      str+=followedBy + constraint.toString();      followedBy=" followed by ";    }  }  if (lastType != -1) {    str+=followedBy + singlesCount + lastString;  }  return str;}  }
class C{  public void endEntity(String name) throws SAXException {  if (m_firstTagNotEmitted) {    emitFirstTag();  }  m_handler.endEntity(name);}  }
class C{  private boolean compute(){  double[] bx=new double[]{dest0.x,dest1.x,dest2.x};  double[] row0=solve(bx);  if (row0 == null)   return false;  m00=row0[0];  m01=row0[1];  m02=row0[2];  double[] by=new double[]{dest0.y,dest1.y,dest2.y};  double[] row1=solve(by);  if (row1 == null)   return false;  m10=row1[0];  m11=row1[1];  m12=row1[2];  return true;}  }
class C{  public String longestMatch(String input){  TrieNode node=root;  String result=null;  for (int i=input.length() - 1; i >= 0; i--) {    node=node.getChild(input.charAt(i));    if (node == null)     break;    if (node.isTerminal())     result=input.substring(i);  }  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.SCRIPT_IM;}  }
class C{  protected void flushCache() throws IOException {  if (this.cachePosition > 0) {    this.out.writeLine(Integer.toHexString(this.cachePosition));    this.out.write(this.cache,0,this.cachePosition);    this.out.writeLine("");    this.cachePosition=0;  }}  }
class C{  public static void sort(int[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  public String toString(){  return "(" + easting + ", "+ northing+ ")";}  }
class C{  public boolean verifyKey(final String apiKey,final String domainName){  final Akismet akismet=new Akismet(HttpClients.createDefault());  boolean result=false;  akismet.setApiKey(apiKey);  akismet.setApiConsumer(domainName);  try {    result=akismet.verifyKey();  } catch (  AkismetException e) {    LOGGER.error("Could not verify Akismet Key",e);  }  return result;}  }
class C{  public void testConstructorSetsPropertyDefaults() throws Exception {  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.ADMIN_USER),"weblogic");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.ADMIN_PWD),"weblogic");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.SERVER),"server");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.CONFIGURATION_VERSION),"9.2.3.0");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.DOMAIN_VERSION),"9.2.3.0");}  }
class C{  public MailImpl(Mail mail) throws MessagingException {  this(mail,newName(mail));}  }
class C{  public void removeSection(final TimeSection SECTION){  if (null == SECTION)   return;  sections.remove(SECTION);  Collections.sort(sections,new TimeSectionComparator());  fireUpdateEvent(SECTION_EVENT);}  }
class C{  public void onWakeUpStarted(){  if (DEBUG) {    Slog.d(TAG,"onWakeUpStarted");  }synchronized (mLock) {    if (mActualPowerState != POWER_STATE_AWAKE) {      mActualPowerState=POWER_STATE_AWAKE;      mPendingWakeUpBroadcast=true;      if (!mScreenOnBlockerAcquired) {        mScreenOnBlockerAcquired=true;        mScreenOnBlocker.acquire();      }      updatePendingBroadcastLocked();    }  }}  }
class C{  public boolean hasNext(){  return index < size;}  }
class C{  public void onBlueButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(BLUE_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_blue));      storeRequestId(requestId,BLUE_BUTTON);    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.bluebutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  public static String ASCIIString(int length){  int interval='~' - ' ' + 1;  byte[] buf=new byte[length];  random().nextBytes(buf);  for (int i=0; i < length; i++) {    if (buf[i] < 0) {      buf[i]=(byte)((-buf[i] % interval) + ' ');    } else {      buf[i]=(byte)((buf[i] % interval) + ' ');    }  }  return new String(buf);}  }
class C{  private List<String> removeDuplicate(List<String> possibleValues,List<String> autoCompleteValues){  List<String> values=new ArrayList<>();  if (possibleValues != null) {    values.addAll(possibleValues);  }  if (autoCompleteValues != null) {    if (values.isEmpty()) {      values.addAll(autoCompleteValues);    }    for (    String possibleValue : autoCompleteValues) {      if (!values.contains(possibleValue) && (!possibleValue.isEmpty() || !possibleValue.trim().isEmpty())) {        values.add(possibleValue);      }    }  }  if (values.contains("yes") && !values.contains("no")) {    values.add("no");  } else   if (values.contains("no") && !values.contains("yes")) {    values.add("yes");  }  return values;}  }
class C{  synchronized long updateSlice(DeleteSlice slice){  long seqNo=getNextSequenceNumber();  if (slice.sliceTail != tail) {    slice.sliceTail=tail;    seqNo=-seqNo;  }  return seqNo;}  }
class C{  private void reassignZoneNetworkSystem(FCZoneReference zone){  URI networkSystemURI=NullColumnValueGetter.getNullURI();  List<Network> networkList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,Network.class,AlternateIdConstraint.Factory.getConstraint(Network.class,"nativeId",zone.getFabricId()));  Iterator<Network> networkIter=networkList.iterator();  while (networkIter.hasNext() && networkSystemURI.equals(NullColumnValueGetter.getNullURI())) {    Network network=networkIter.next();    for (    String nsURI : network.getNetworkSystems()) {      if (!nsURI.equals(zone.getNetworkSystemUri().toString())) {        networkSystemURI=URI.create(nsURI);        break;      }    }  }  zone.setNetworkSystemUri(networkSystemURI);  _dbClient.persistObject(zone);}  }
class C{  public JButton createJButton(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  return buttonFactory.createJToolbarButton(name);}  }
class C{  private static void parseTraf(Track track,DefaultSampleValues extendsDefaults,ContainerAtom traf,TrackFragment out,int workaroundFlags,byte[] extendedTypeScratch){  LeafAtom tfdtAtom=traf.getLeafAtomOfType(Atom.TYPE_tfdt);  long decodeTime=tfdtAtom == null ? 0 : parseTfdt(traf.getLeafAtomOfType(Atom.TYPE_tfdt).data);  LeafAtom tfhd=traf.getLeafAtomOfType(Atom.TYPE_tfhd);  DefaultSampleValues fragmentHeader=parseTfhd(extendsDefaults,tfhd.data);  out.sampleDescriptionIndex=fragmentHeader.sampleDescriptionIndex;  LeafAtom trun=traf.getLeafAtomOfType(Atom.TYPE_trun);  parseTrun(track,fragmentHeader,decodeTime,workaroundFlags,trun.data,out);  LeafAtom saiz=traf.getLeafAtomOfType(Atom.TYPE_saiz);  if (saiz != null) {    TrackEncryptionBox trackEncryptionBox=track.sampleDescriptionEncryptionBoxes[fragmentHeader.sampleDescriptionIndex];    parseSaiz(trackEncryptionBox,saiz.data,out);  }  LeafAtom senc=traf.getLeafAtomOfType(Atom.TYPE_senc);  if (senc != null) {    parseSenc(senc.data,out);  }  int childrenSize=traf.leafChildren.size();  for (int i=0; i < childrenSize; i++) {    LeafAtom atom=traf.leafChildren.get(i);    if (atom.type == Atom.TYPE_uuid) {      parseUuid(atom.data,out,extendedTypeScratch);    }  }}  }
class C{  public DoubleIterator(double[] primitiveArray){  super(primitiveArray);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.WILDCARD__DECLARED_UPPER_BOUND:    setDeclaredUpperBound((TypeRef)newValue);  return;case TypeRefsPackage.WILDCARD__DECLARED_LOWER_BOUND:setDeclaredLowerBound((TypeRef)newValue);return;case TypeRefsPackage.WILDCARD__USING_IN_OUT_NOTATION:setUsingInOutNotation((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean isRegistered(Class<? extends Throwable> exception){  return CLASS_TO_ID.containsKey(exception);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void testTimedPollLast0() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(SIZE - i - 1,q.pollLast(0,MILLISECONDS));  }  assertNull(q.pollLast(0,MILLISECONDS));}  }
class C{  protected double numericDistribution(double[][] props,double[][][] dists,int att,int[] sortedIndices,double[] weights,double[][] subsetWeights,Instances data,double[] vals) throws Exception {  double splitPoint=Double.NaN;  Attribute attribute=data.attribute(att);  double[][] dist=null;  double[] sums=null;  double[] sumSquared=null;  double[] sumOfWeights=null;  double totalSum=0, totalSumSquared=0, totalSumOfWeights=0;  int i;  if (attribute.isNominal()) {    sums=new double[attribute.numValues()];    sumSquared=new double[attribute.numValues()];    sumOfWeights=new double[attribute.numValues()];    int attVal;    for (i=0; i < sortedIndices.length; i++) {      Instance inst=data.instance(sortedIndices[i]);      if (inst.isMissing(att)) {        break;      }      attVal=(int)inst.value(att);      sums[attVal]+=inst.classValue() * weights[i];      sumSquared[attVal]+=inst.classValue() * inst.classValue() * weights[i];      sumOfWeights[attVal]+=weights[i];    }    totalSum=Utils.sum(sums);    totalSumSquared=Utils.sum(sumSquared);    totalSumOfWeights=Utils.sum(sumOfWeights);  } else {    sums=new double[2];    sumSquared=new double[2];    sumOfWeights=new double[2];    double[] currSums=new double[2];    double[] currSumSquared=new double[2];    double[] currSumOfWeights=new double[2];    for (int j=0; j < sortedIndices.length; j++) {      Instance inst=data.instance(sortedIndices[j]);      if (inst.isMissing(att)) {        break;      }      currSums[1]+=inst.classValue() * weights[j];      currSumSquared[1]+=inst.classValue() * inst.classValue() * weights[j];      currSumOfWeights[1]+=weights[j];    }    totalSum=currSums[1];    totalSumSquared=currSumSquared[1];    totalSumOfWeights=currSumOfWeights[1];    sums[1]=currSums[1];    sumSquared[1]=currSumSquared[1];    sumOfWeights[1]=currSumOfWeights[1];    double currSplit=data.instance(sortedIndices[0]).value(att);    double currVal, bestVal=Double.MAX_VALUE;    for (i=0; i < sortedIndices.length; i++) {      Instance inst=data.instance(sortedIndices[i]);      if (inst.isMissing(att)) {        break;      }      if (inst.value(att) > currSplit) {        currVal=variance(currSums,currSumSquared,currSumOfWeights);        if (currVal < bestVal) {          bestVal=currVal;          splitPoint=(inst.value(att) + currSplit) / 2.0;          if (splitPoint <= currSplit) {            splitPoint=inst.value(att);          }          for (int j=0; j < 2; j++) {            sums[j]=currSums[j];            sumSquared[j]=currSumSquared[j];            sumOfWeights[j]=currSumOfWeights[j];          }        }      }      currSplit=inst.value(att);      double classVal=inst.classValue() * weights[i];      double classValSquared=inst.classValue() * classVal;      currSums[0]+=classVal;      currSumSquared[0]+=classValSquared;      currSumOfWeights[0]+=weights[i];      currSums[1]-=classVal;      currSumSquared[1]-=classValSquared;      currSumOfWeights[1]-=weights[i];    }  }  props[att]=new double[sums.length];  for (int k=0; k < props[att].length; k++) {    props[att][k]=sumOfWeights[k];  }  if (!(Utils.sum(props[att]) > 0)) {    for (int k=0; k < props[att].length; k++) {      props[att][k]=1.0 / props[att].length;    }  } else {    Utils.normalize(props[att]);  }  while (i < sortedIndices.length) {    Instance inst=data.instance(sortedIndices[i]);    for (int j=0; j < sums.length; j++) {      sums[j]+=props[att][j] * inst.classValue() * weights[i];      sumSquared[j]+=props[att][j] * inst.classValue() * inst.classValue()* weights[i];      sumOfWeights[j]+=props[att][j] * weights[i];    }    totalSum+=inst.classValue() * weights[i];    totalSumSquared+=inst.classValue() * inst.classValue() * weights[i];    totalSumOfWeights+=weights[i];    i++;  }  dist=new double[sums.length][data.numClasses()];  for (int j=0; j < sums.length; j++) {    if (sumOfWeights[j] > 0) {      dist[j][0]=sums[j] / sumOfWeights[j];    } else {      dist[j][0]=totalSum / totalSumOfWeights;    }  }  double priorVar=singleVariance(totalSum,totalSumSquared,totalSumOfWeights);  double var=variance(sums,sumSquared,sumOfWeights);  double gain=priorVar - var;  subsetWeights[att]=sumOfWeights;  dists[att]=dist;  vals[att]=gain;  return splitPoint;}  }
class C{  public void testCmp5CaseWKT() throws ParseException {  checkIntersection("LINESTRING (4348433.262114629 5552595.478385733, 4348440.849387404 5552599.272022122 )","LINESTRING (4348433.26211463  5552595.47838573,  4348440.8493874   5552599.27202212  )",1,new Coordinate[]{new Coordinate(4348440.8493874,5552599.27202212)},0);}  }
class C{  public static void printPartition(ITypedRegion region,IDocument document){  if (region == null) {    return;  }  try {    StringBuffer messageBuffer=new StringBuffer();    String location="[" + region.getOffset() + ":"+ region.getLength()+ "]";    if (region instanceof TLCRegion) {      TLCRegion tlcRegion=(TLCRegion)region;      messageBuffer.append("TLC:" + tlcRegion.getMessageCode() + " "+ tlcRegion.getSeverity()+ " "+ location);    } else {      int offset=region.getOffset();      int printLength=Math.min(region.getLength(),255);      String type=region.getType();      Assert.isTrue(type.equals(TagBasedTLCOutputTokenScanner.DEFAULT_CONTENT_TYPE));      String head=document.get(offset,printLength);      messageBuffer.append("OUTPUT:" + location + ": >"+ head+ "< ...");    }    TLCUIActivator.getDefault().logDebug(messageBuffer.toString());  } catch (  BadLocationException e) {    TLCUIActivator.getDefault().logError("Error printing partition",e);  }}  }
class C{  private String saveProject(){  EditText authorEditText=(EditText)findViewById(R.id.author_name);  EditText titleEditText=(EditText)findViewById(R.id.template_title);  assert findViewById(R.id.author_name) != null;  assert ((EditText)findViewById(R.id.author_name)) != null;  String author=((EditText)findViewById(R.id.author_name)).getText().toString();  assert findViewById(R.id.template_title) != null;  assert ((EditText)findViewById(R.id.template_title)) != null;  String title=((EditText)findViewById(R.id.template_title)).getText().toString();  if ("".equals(author)) {    assert authorEditText != null;    authorEditText.setError("Author name is required");  } else   if ("".equals(title)) {    assert titleEditText != null;    titleEditText.setError("Title is required");  } else {    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder docBuilder;    try {      docBuilder=docFactory.newDocumentBuilder();      Document doc=docBuilder.newDocument();      Element rootElement=doc.createElement("buildmlearn_application");      Attr attr=doc.createAttribute("type");      attr.setValue(getResources().getString(template.getType()));      rootElement.setAttributeNode(attr);      Element authorElement=doc.createElement("author");      rootElement.appendChild(authorElement);      Element nameElement=doc.createElement("name");      nameElement.appendChild(doc.createTextNode(author));      authorElement.appendChild(nameElement);      Element titleElement=doc.createElement("title");      titleElement.appendChild(doc.createTextNode(title));      rootElement.appendChild(titleElement);      doc.appendChild(rootElement);      Element dataElement=doc.createElement("data");      rootElement.appendChild(dataElement);      if (selectedTemplate.getItems(doc).size() == 0 || (selectedTemplate.getItems(doc).size() < 2 && (templateId == 5 || templateId == 7))) {        Toast.makeText(this,"Unable to perform action: No Data",Toast.LENGTH_SHORT).show();        return null;      }      for (      Element item : selectedTemplate.getItems(doc)) {        dataElement.appendChild(item);      }      if (oldFileName != null) {        File tempFile=new File(oldFileName);        tempFile.delete();        oldFileName=null;      }      String saveFileName=title + " by " + author+ ".buildmlearn";      saveFileName=saveFileName.replaceAll(" ","-");      FileUtils.saveXmlFile(toolkit.getSavedDir(),saveFileName,doc);      oldFileName=toolkit.getSavedDir() + saveFileName;      Toast.makeText(this,"Project Successfully Saved!",Toast.LENGTH_SHORT).show();      return oldFileName;    } catch (    ParserConfigurationException e) {      e.printStackTrace();    }  }  return null;}  }
class C{  public void transitionToSleep() throws InterruptedException {  nextState(S_SLEEPING);}  }
class C{  public void reverse(){  int[] newBits=new int[bits.length];  int len=((size - 1) / 32);  int oldBitsLen=len + 1;  for (int i=0; i < oldBitsLen; i++) {    long x=(long)bits[i];    x=((x >> 1) & 0x55555555L) | ((x & 0x55555555L) << 1);    x=((x >> 2) & 0x33333333L) | ((x & 0x33333333L) << 2);    x=((x >> 4) & 0x0f0f0f0fL) | ((x & 0x0f0f0f0fL) << 4);    x=((x >> 8) & 0x00ff00ffL) | ((x & 0x00ff00ffL) << 8);    x=((x >> 16) & 0x0000ffffL) | ((x & 0x0000ffffL) << 16);    newBits[len - i]=(int)x;  }  if (size != oldBitsLen * 32) {    int leftOffset=oldBitsLen * 32 - size;    int mask=1;    for (int i=0; i < 31 - leftOffset; i++) {      mask=(mask << 1) | 1;    }    int currentInt=(newBits[0] >> leftOffset) & mask;    for (int i=1; i < oldBitsLen; i++) {      int nextInt=newBits[i];      currentInt|=nextInt << (32 - leftOffset);      newBits[i - 1]=currentInt;      currentInt=(nextInt >> leftOffset) & mask;    }    newBits[oldBitsLen - 1]=currentInt;  }  bits=newBits;}  }
class C{  public void remove(int i){  individuals.remove(i);}  }
class C{  @Before public void onBefore(){  when(messageSource.getMessage(anyString(),new Object[]{anyObject()},any(Locale.class))).thenReturn("");}  }
class C{  public static Pair<Integer,Integer> streamReadBytes(ActiveMQBuffer buff,int remainingBytes,byte[] value){  if (remainingBytes == -1) {    return new Pair<>(0,-1);  } else   if (remainingBytes == 0) {    byte type=buff.readByte();    if (type != DataConstants.BYTES) {      throw new IllegalStateException("Invalid conversion");    }    remainingBytes=buff.readInt();  }  int read=Math.min(value.length,remainingBytes);  buff.readBytes(value,0,read);  remainingBytes-=read;  if (remainingBytes == 0) {    remainingBytes=-1;  }  return new Pair<>(remainingBytes,read);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  final String readString(String encoding,ExceptionInterceptor exceptionInterceptor) throws SQLException {  int i=this.position;  int len=0;  int maxLen=getBufLength();  while ((i < maxLen) && (this.byteBuffer[i] != 0)) {    len++;    i++;  }  try {    return StringUtils.toString(this.byteBuffer,this.position,len,encoding);  } catch (  UnsupportedEncodingException uEE) {    throw SQLError.createSQLException(Messages.getString("ByteArrayBuffer.1") + encoding + "'",SQLError.SQL_STATE_ILLEGAL_ARGUMENT,exceptionInterceptor);  } finally {    this.position+=(len + 1);  }}  }
class C{  private boolean firstPatternInSet(){  return ((getIteration() % bptt.getStepsPerSequences()) == 0);}  }
class C{  public boolean isLanguageAvailable(String localeAsStr){  return mTts.isLanguageAvailable(new Locale(localeAsStr)) >= 0;}  }
class C{  public static <E extends Comparable<E>>MinMaxPriorityQueue<E> create(){  return new Builder<Comparable>(Ordering.natural()).create();}  }
class C{  public static <A,B,C,D,T>T provideNew(Class<T> desiredObjectClass,A a,B b,C c,D d){  return createProvider(getFactory(desiredObjectClass,NO_NAME),a,b,c,d).call();}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  if (in == null) {    return -1;  } else   if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  do {    int n=in.read(b,off,len);    if (n > 0) {      return n;    }    nextStream();  } while (in != null);  return -1;}  }
class C{  public MutableLong(){  super();}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector dev=new ASN1EncodableVector();  dev.add(policyQualifierId);  dev.add(qualifier);  return new DERSequence(dev);}  }
class C{  protected int estimateHeaderElementLen(final HeaderElement elem){  if (elem == null)   return 0;  int result=elem.getName().length();  final String value=elem.getValue();  if (value != null) {    result+=3 + value.length();  }  final int parcnt=elem.getParameterCount();  if (parcnt > 0) {    for (int i=0; i < parcnt; i++) {      result+=2 + estimateNameValuePairLen(elem.getParameter(i));    }  }  return result;}  }
class C{  public static <T>Collection<T> unmodifiableCollection(Collection<? extends T> c){  return new UnmodifiableCollection<>(c);}  }
class C{  synchronized public void update(){  nextReadSlot=0;  readNextSlot();}  }
class C{  public void logging2(String msg){  System.out.print("    ");  System.out.println(msg);}  }
class C{  public boolean isResizing(){  return this.isDragging();}  }
class C{  public FDBScanTransactionOptions scanOptions(){  if (txnService.isTransactionActive(getSession()))   return getTransaction().getScanOptions();  return FDBScanTransactionOptions.NORMAL;}  }
class C{  public void deinstall(JTextComponent c){  component=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.475 -0500",hash_original_method="610737304108759554633F933F40913E",hash_generated_method="550FDCCC3D0D68E65A1A01B4F9B772A4") public boolean hasListeners(String propertyName){  for (  PropertyChangeListener p : listeners) {    if (!(p instanceof PropertyChangeListenerProxy) || Objects.equal(propertyName,((PropertyChangeListenerProxy)p).getPropertyName())) {      return true;    }  }  return false;}  }
class C{  public IPv6AddressValidator(@NonNull final CharSequence errorMessage){  super(errorMessage,REGEX);}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  public static String rtrim(String s){  if (s == null) {    return null;  }  int len=s.length();  int index=len;  while (index > 0 && Character.isWhitespace(s.charAt(index - 1))) {    index--;  }  return (index <= 0) ? "" : s.substring(0,index);}  }
class C{  public ObjectStateMachineFactory(StateMachineModel<S,E> defaultStateMachineModel,StateMachineModelFactory<S,E> stateMachineModelFactory){  super(defaultStateMachineModel,stateMachineModelFactory);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  if (null != m_argVec) {    int nArgs=m_argVec.size();    for (int i=0; i < nArgs; i++) {      Expression arg=(Expression)m_argVec.elementAt(i);      arg.fixupVariables(vars,globalsSize);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:58.680 -0400",hash_original_method="A580448BC11843D68965B5924130AA7D",hash_generated_method="8416EA58AB258F93C005DA79AA740733") public AsyncRunner(FilterContext context,Class schedulerClass){  super(context);  mSchedulerClass=schedulerClass;  mLogVerbose=Log.isLoggable(TAG,Log.VERBOSE);}  }
class C{  private boolean isSharedFolderReceiver(DirectoryHolder directoryHolder){  return directoryHolder instanceof MediaTypeSavedFilesDirectoryHolder || directoryHolder instanceof FileSettingDirectoryHolder;}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener l){  pcs.addPropertyChangeListener(l);}  }
class C{  public synchronized Enumeration keys(){  return getEnumeration(KEYS);}  }
class C{  public LookupTranslator(final CharSequence[]... lookup){  lookupMap=new HashMap<String,CharSequence>();  int _shortest=Integer.MAX_VALUE;  int _longest=0;  if (lookup != null) {    for (    final CharSequence[] seq : lookup) {      this.lookupMap.put(seq[0].toString(),seq[1]);      final int sz=seq[0].length();      if (sz < _shortest) {        _shortest=sz;      }      if (sz > _longest) {        _longest=sz;      }    }  }  shortest=_shortest;  longest=_longest;}  }
class C{  public StepBreakpointRemovedParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_BPS_REM_SUCCESS);}  }
class C{  public QLFDocument(List<F> list,String docno,Map<String,String> extraProps){  featureList=new MemoryLocalFeatureList<F>(list);  iterator=list.iterator();  if (extraProps != null)   props.putAll(extraProps);  props.put("docno",docno);}  }
class C{  public List<String> localText(){  List<String> answer=new ArrayList<String>();  for (Iterator iter=InvokerHelper.asIterator(value); iter.hasNext(); ) {    Object child=iter.next();    if (!(child instanceof Node)) {      answer.add(child.toString());    }  }  return answer;}  }
class C{  public static URI normalizeURI(URI path){  if (path.isFile()) {    return URI.createURI(path.toString().replaceAll("\\\\","/"));  }  return path;}  }
class C{  boolean isBaseHeader(){  return value == BASE_HEADER;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Burner.getGlobalBurner().isComplete()) {    if (Burner.getGlobalBurner().wasSuccessful())     return Boolean.TRUE; else     return "Error";  } else   return Burner.getGlobalBurner().getStatusMessage();}  }
class C{  public void updateCloneInfo(List<VolumeClone> clones){  for (  VolumeClone clone : clones) {    clone.setNativeId("clone-" + clone.getParentId() + clone.getDisplayName());    clone.setWwn(String.format("%s%s",clone.getStorageSystemId(),clone.getNativeId()));    clone.setReplicationState(VolumeClone.ReplicationState.SYNCHRONIZED);    clone.setProvisionedCapacity(clone.getRequestedCapacity());    clone.setAllocatedCapacity(clone.getRequestedCapacity());    clone.setDeviceLabel(clone.getNativeId());  }}  }
class C{  @Override public Object invoke(MethodInvocation invocation) throws Throwable {  Method method=invocation.getMethod();  Object[] args=invocation.getArguments();  try {    return super.invoke(invocation.getThis(),method,args);  } catch (  Exception e) {    logger.error(e);    throw e;  }}  }
class C{  public CRLFLineReader(Reader reader){  super(reader);}  }
class C{  public void testOfferFirstNull(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque();    q.offerFirst(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public boolean isRetainIntersection(){  return isRetainIntersection;}  }
class C{  public Builder servers(List<String> zkServers){  this.innerZkServers=zkServers;  return this;}  }
class C{  public void invalidateLayout(Container target){}  }
class C{  public void postIdle(final Runnable runnable){  post(new IdleRunnable(runnable));}  }
class C{  public Boolean isUpgradeSupported(){  return upgradeSupported;}  }
class C{  public static void fill(boolean[] array,boolean value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void attemptPaintSelection(){  Paint p=this.titlePaint.getPaint();  Color defaultColor=(p instanceof Color ? (Color)p : Color.blue);  Color c=JColorChooser.showDialog(this,localizationResources.getString("Title_Color"),defaultColor);  if (c != null) {    this.titlePaint.setPaint(c);  }}  }
class C{  public void addDependency(Dependency dependency){  if (dependencies == null) {    dependencies=new ArrayList<Dependency>();    nodeDependencies=new ArrayList<Node>();  }  dependencies.add(dependency);  if (!nodeDependencies.contains(dependency.node)) {    nodeDependencies.add(dependency.node);  }  Node dependencyNode=dependency.node;  if (dependencyNode.nodeDependents == null) {    dependencyNode.nodeDependents=new ArrayList<Node>();  }  dependencyNode.nodeDependents.add(this);}  }
class C{  public static TaskBuilder start(BasePlugin dioritePlugin,Runnable runnable){  return new TaskBuilder(dioritePlugin,runnable);}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  private void append(char ch) throws Exception {  buffer.append(ch);}  }
class C{  public void applyForceToCenter(Point2D force){  applyBodyForceToCenter(physicsWorld.toVector(force));}  }
class C{  public static AuthenticationTokensResponse parseAuthenticationTokensResponse(Map<String,String> parameterMap,RSAPublicKey publicKey,Issuer issuer,ClientID clientId,long clockToleranceSeconds) throws OIDCClientException, OIDCServerException, TokenValidationException {  Validate.notNull(parameterMap,"parameterMap");  Validate.notNull(publicKey,"publicKey");  Validate.notNull(issuer,"issuer");  Validate.notNull(clientId,"clientId");  return parseAuthenticationTokensResponse(httpRequestFromMap(parameterMap),publicKey,issuer,clientId,clockToleranceSeconds);}  }
class C{  @Before public void initOnePassengerTwoTripsInconsistentSequenceFixture(){  final Person driver=PopulationUtils.getFactory().createPerson(Id.createPersonId("Alain Prost"));  final Person passenger1=PopulationUtils.getFactory().createPerson(Id.createPersonId("Tintin"));  final Id<Link> link1=Id.create(1,Link.class);  final Id<Link> link2=Id.create(2,Link.class);  final Id<Link> link3=Id.create(3,Link.class);  final Map<Id<Person>,Plan> plans=new HashMap<>();  final Plan dPlan=PopulationUtils.createPlan(driver);  PopulationUtils.createAndAddActivityFromLinkId(dPlan,"home",link1);  PopulationUtils.createAndAddLeg(dPlan,TransportMode.walk);  PopulationUtils.createAndAddActivityFromLinkId(dPlan,JointActingTypes.INTERACTION,link2);  final Leg driverLeg1=PopulationUtils.createAndAddLeg(dPlan,JointActingTypes.DRIVER);  driverLeg1.setRoute(new DriverRoute(new LinkNetworkRouteImpl(link2,link3),Arrays.asList(passenger1.getId())));  PopulationUtils.createAndAddActivityFromLinkId(dPlan,JointActingTypes.INTERACTION,link3);  PopulationUtils.createAndAddLeg(dPlan,TransportMode.walk);  PopulationUtils.createAndAddActivityFromLinkId(dPlan,"home",link1);  PopulationUtils.createAndAddLeg(dPlan,TransportMode.walk);  PopulationUtils.createAndAddActivityFromLinkId(dPlan,JointActingTypes.INTERACTION,link3);  final Leg driverLeg2=PopulationUtils.createAndAddLeg(dPlan,JointActingTypes.DRIVER);  driverLeg2.setRoute(new DriverRoute(new LinkNetworkRouteImpl(link3,link2),Arrays.asList(passenger1.getId())));  PopulationUtils.createAndAddActivityFromLinkId(dPlan,JointActingTypes.INTERACTION,link2);  PopulationUtils.createAndAddLeg(dPlan,TransportMode.walk);  PopulationUtils.createAndAddActivityFromLinkId(dPlan,"home",link1);  plans.put(driver.getId(),dPlan);  final Plan pPlan=PopulationUtils.createPlan(passenger1);  PopulationUtils.createAndAddActivityFromLinkId(pPlan,"home",link1);  PopulationUtils.createAndAddLeg(pPlan,TransportMode.walk);  PopulationUtils.createAndAddActivityFromLinkId(pPlan,JointActingTypes.INTERACTION,link3);  final Leg passengerLeg1=PopulationUtils.createAndAddLeg(pPlan,JointActingTypes.PASSENGER);  final PassengerRoute passengerRoute1=new PassengerRoute(link3,link2);  passengerRoute1.setDriverId(driver.getId());  passengerLeg1.setRoute(passengerRoute1);  PopulationUtils.createAndAddActivityFromLinkId(pPlan,JointActingTypes.INTERACTION,link2);  PopulationUtils.createAndAddLeg(pPlan,TransportMode.walk);  PopulationUtils.createAndAddActivityFromLinkId(pPlan,"home",link1);  PopulationUtils.createAndAddLeg(pPlan,TransportMode.walk);  PopulationUtils.createAndAddActivityFromLinkId(pPlan,JointActingTypes.INTERACTION,link2);  final Leg passengerLeg2=PopulationUtils.createAndAddLeg(pPlan,JointActingTypes.PASSENGER);  final PassengerRoute passengerRoute2=new PassengerRoute(link2,link3);  passengerRoute2.setDriverId(driver.getId());  passengerLeg2.setRoute(passengerRoute2);  PopulationUtils.createAndAddActivityFromLinkId(pPlan,JointActingTypes.INTERACTION,link3);  PopulationUtils.createAndAddLeg(pPlan,TransportMode.walk);  PopulationUtils.createAndAddActivityFromLinkId(pPlan,"home",link1);  plans.put(passenger1.getId(),pPlan);  final DriverTrip driverTrip1=new DriverTrip(driver.getId());  driverTrip1.driverTrip.add(driverLeg1);  driverTrip1.passengerOrigins.put(passenger1.getId(),link2);  driverTrip1.passengerDestinations.put(passenger1.getId(),link3);  final DriverTrip driverTrip2=new DriverTrip(driver.getId());  driverTrip2.driverTrip.add(driverLeg2);  driverTrip2.passengerOrigins.put(passenger1.getId(),link3);  driverTrip2.passengerDestinations.put(passenger1.getId(),link2);  fixtures.add(new Fixture("one passenger, two trips with incorrect sequence",Arrays.asList(driverTrip1,driverTrip2),new JointTravelStructure(Arrays.asList(new JointTrip(driver.getId(),Arrays.asList(driverLeg1),passenger1.getId(),passengerLeg2),new JointTrip(driver.getId(),Arrays.asList(driverLeg2),passenger1.getId(),passengerLeg1))),new JointPlanFactory().createJointPlan(plans)));}  }
class C{  public void showOrHideBottomNavigation(boolean show){  if (show) {    bottomNavigation.restoreBottomNavigation(true);  } else {    bottomNavigation.hideBottomNavigation(true);  }}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="/{region}",consumes=MediaType.APPLICATION_JSON_VALUE,produces={MediaType.APPLICATION_JSON_VALUE}) @ApiOperation(value="create entry",notes="Create (put-if-absent) data in region",response=void.class) @ApiResponses({@ApiResponse(code=201,message="Created."),@ApiResponse(code=400,message="Data specified (JSON doc) in the request body is invalid."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="Region does not exist."),@ApiResponse(code=409,message="Key already exist in region."),@ApiResponse(code=500,message="GemFire throws an error or exception.")}) @PreAuthorize("@securityService.authorize('DATA', 'WRITE', #region)") public ResponseEntity<?> create(@PathVariable("region") String region,@RequestParam(value="key",required=false) String key,@RequestBody final String json){  key=generateKey(key);  logger.debug("Posting (creating/putIfAbsent) JSON document ({}) to Region ({}) with Key ({})...",json,region,key);  region=decode(region);  Object existingPdxObj=null;  final JSONTypes jsonType=validateJsonAndFindType(json);  if (JSONTypes.JSON_ARRAY.equals(jsonType)) {    existingPdxObj=postValue(region,key,convertJsonArrayIntoPdxCollection(json));  } else {    existingPdxObj=postValue(region,key,convert(json));  }  final HttpHeaders headers=new HttpHeaders();  headers.setLocation(toUri(region,key));  if (existingPdxObj != null) {    final RegionEntryData<Object> data=new RegionEntryData<Object>(region);    data.add(existingPdxObj);    headers.setContentType(MediaType.APPLICATION_JSON);    return new ResponseEntity<RegionEntryData<?>>(data,headers,HttpStatus.CONFLICT);  } else {    return new ResponseEntity<String>(headers,HttpStatus.CREATED);  }}  }
class C{  private void helpTestHashIndexForQuery(String query) throws Exception {  helpTestHashIndexForQuery(query,"p.ID","/portfolios p");}  }
class C{  public CCrossReferencesTableMenu(final CGraphWindow parent,final IViewContainer container,final INaviFunction function){  add(new COpenFunctionAction(parent,container,function));}  }
class C{  private String upperFirestChar(String src){  return src.substring(0,1).toUpperCase().concat(src.substring(1));}  }
class C{  public T caseTypeCastExpression(TypeCastExpression object){  return null;}  }
class C{  public static void writeln(char[] ca,int len){  writeln(ca,len,true);}  }
class C{  public void writeCollection(Collection<? extends XMLWriteable> collection){  for (  XMLWriteable obj : collection) {    write(obj);  }}  }
class C{  private E dequeue(){  int n=size - 1;  if (n < 0)   return null; else {    Object[] array=queue;    E result=(E)array[0];    E x=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(0,x,array,n); else     siftDownUsingComparator(0,x,array,n,cmp);    size=n;    return result;  }}  }
class C{  public ConsistencyCheckNotification(){  super(null);}  }
class C{  public static boolean prepareHelpMenuItem(Context context,MenuItem helpMenuItem,String helpUrlString){  if (TextUtils.isEmpty(helpUrlString)) {    helpMenuItem.setVisible(false);    return false;  } else {    final Uri fullUri=uriWithAddedParameters(context,Uri.parse(helpUrlString));    Intent intent=new Intent(Intent.ACTION_VIEW,fullUri);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);    helpMenuItem.setIntent(intent);    helpMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);    helpMenuItem.setVisible(true);    return true;  }}  }
class C{  public void inspectPropertyConsumer(PropertyConsumer propertyConsumer){  String prefix=propertyConsumer.getPropertyPrefix();  if (windowSupport != null) {    windowSupport.killWindow();    windowSupport=null;  }  JComponent comp=createPropertyGUI(propertyConsumer);  windowSupport=new WindowSupport(comp,i18n.get(Inspector.class,"Inspector","Inspector") + " - " + prefix);  windowSupport.setMaxSize(-1,500);  windowSupport.displayInWindow();}  }
class C{  private List<File> combine(List<File> listA,List<File> listB){  LinkedHashSet<File> combinedProjects=Sets.newLinkedHashSet(listA);  combinedProjects.addAll(listB);  return new ArrayList<>(combinedProjects);}  }
class C{  public double computeAverageMarginalEntropy(int variableIndex){  double entropy=0.0;  for (int b=0; b < totalObservations; b++) {    double prob=svkeMarginals[variableIndex].getProbability(observations[b][variableIndex],b);    double cont=0.0;    if (prob > 0.0) {      cont=-Math.log(prob);    }    entropy+=cont;    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ cont / Math.log(2.0) + " -> sum: " + (entropy / Math.log(2.0)));    }  }  return entropy / (double)totalObservations / Math.log(2.0);}  }
class C{  public static boolean sameDate(Calendar cal,Date selectedDate){  Calendar selectedCal=Calendar.getInstance();  selectedCal.setTime(selectedDate);  return cal.get(Calendar.MONTH) == selectedCal.get(Calendar.MONTH) && cal.get(Calendar.YEAR) == selectedCal.get(Calendar.YEAR) && cal.get(Calendar.DAY_OF_MONTH) == selectedCal.get(Calendar.DAY_OF_MONTH);}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  @SuppressWarnings({"ZeroLengthArrayAllocation"}) public static DiscretizationSpec serializableInstance(){  return new ContinuousDiscretizationSpec(new double[0],new ArrayList<String>());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Gfsh(boolean launchShell,String[] args,GfshConfig gfshConfig) throws ClassNotFoundException, IOException {  JLineLogHandler.setSuppressDuplicateMessages(false);  this.gfshConfig=gfshConfig;  this.gfshFileLogger=LogWrapper.getInstance();  this.gfshFileLogger.configure(this.gfshConfig);  this.ansiHandler=ANSIHandler.getInstance(this.gfshConfig.isANSISupported());  this.gfshFileLogger.info(Banner.getString(args));  this.gfshHistory=new GfshHistory();  this.commandManager=CommandManager.getInstance();  initializeEnvironment();  this.executionStrategy=new GfshExecutionStrategy(this);  this.parser=new GfshParser(commandManager);  setHistorySize(gfshConfig.getHistorySize());  String envProps=env.toString();  envProps=envProps.substring(1,envProps.length() - 1);  envProps=envProps.replaceAll(",",LINE_SEPARATOR);  this.gfshFileLogger.config("***** gfsh Environment ******" + LINE_SEPARATOR + envProps);  if (this.gfshFileLogger.fineEnabled()) {    String gfshConfigStr=this.gfshConfig.toString();    gfshConfigStr=gfshConfigStr.substring(0,gfshConfigStr.length() - 1);    gfshConfigStr=gfshConfigStr.replaceAll(",",LINE_SEPARATOR);    this.gfshFileLogger.fine("***** gfsh Configuration ******" + LINE_SEPARATOR + gfshConfigStr);  }  try {    ClassUtils.forName("sun.misc.Signal",new SunAPINotFoundException("WARNING!!! Not running a Sun JVM.  Could not find the sun.misc.Signal class; Signal handling disabled."));    signalHandler=(CliUtil.isGfshVM() ? new GfshSignalHandler() : new AbstractSignalNotificationHandler(){    });  } catch (  SunAPINotFoundException e) {    signalHandler=new AbstractSignalNotificationHandler(){    };    this.gfshFileLogger.warning(e.getMessage());  }  if (this.gfshConfig.isTestConfig()) {    instance=this;  }  this.isHeadlessMode=!launchShell;  if (this.isHeadlessMode) {    this.gfshFileLogger.config("Running in headless mode");    System.setProperty("jline.terminal",GfshUnsupportedTerminal.class.getName());    env.put(ENV_APP_QUIET_EXECUTION,String.valueOf(true));    redirectInternalJavaLoggers();    LogWrapper.getInstance().setParentFor(logger);  }}  }
class C{  @Override public int compareTo(LongsRef other){  if (this == other)   return 0;  final long[] aInts=this.longs;  int aUpto=this.offset;  final long[] bInts=other.longs;  int bUpto=other.offset;  final long aStop=aUpto + Math.min(this.length,other.length);  while (aUpto < aStop) {    long aInt=aInts[aUpto++];    long bInt=bInts[bUpto++];    if (aInt > bInt) {      return 1;    } else     if (aInt < bInt) {      return -1;    }  }  return this.length - other.length;}  }
class C{  public boolean equals(Object obj){  return compareTo(obj) == 0;}  }
class C{  public List<Boundary> populateLocations(final Long areaId){  List<Boundary> locationList=new LinkedList<Boundary>();  try {    locationList=boundaryService.getChildBoundariesByBoundaryId(areaId);  } catch (  final Exception e) {    LOGGER.error("Error while loading locations - locations." + e.getMessage());    throw new ApplicationRuntimeException("Unable to load location information",e);  }  LOGGER.info("***********Ajax locationList: " + locationList.toString());  return locationList;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case COUNT:  return isSetCount();}throw new IllegalStateException();}  }
class C{  private void initialize(){  this.registeredContainers=new DefaultContainerFactory().getContainerIds();  this.containerIds=new ArrayList<String>();  if (System.getProperty(SYSTEM_PROPERTY_CONTAINER_IDS) == null) {    throw new RuntimeException("System property \"" + SYSTEM_PROPERTY_CONTAINER_IDS + "\" must be defined.");  }  StringTokenizer tokens=new StringTokenizer(System.getProperty(SYSTEM_PROPERTY_CONTAINER_IDS),", ");  while (tokens.hasMoreTokens()) {    String token=tokens.nextToken();    this.containerIds.add(token);  }}  }
class C{  private void enter(){  this.stack.push(new ArrayList<>());}  }
class C{  private void join(int shardId,SocketAddress newHost,Set<SocketAddress> removedList){  SocketAddress oldHost=shardId2Address.put(shardId,newHost);  if (null != oldHost) {    address2ShardId.remove(oldHost);    circle.remove(shardId,oldHost);    removedList.add(oldHost);    logger.info("Shard {} ({}) left permanently.",shardId,oldHost);  }  address2ShardId.put(newHost,shardId);  circle.add(shardId,newHost);  logger.info("Shard {} ({}) joined to replace ({}).",new Object[]{shardId,newHost,oldHost});}  }
class C{  private void initStreamOutput() throws SAXException {  boolean firstElementIsHTML=isFirstElemHTML();  if (firstElementIsHTML) {    SerializationHandler oldHandler=m_handler;    Properties htmlProperties=OutputPropertiesFactory.getDefaultMethodProperties(Method.HTML);    Serializer serializer=SerializerFactory.getSerializer(htmlProperties);    m_handler=(SerializationHandler)serializer;    Writer writer=oldHandler.getWriter();    if (null != writer)     m_handler.setWriter(writer); else {      OutputStream os=oldHandler.getOutputStream();      if (null != os)       m_handler.setOutputStream(os);    }    m_handler.setVersion(oldHandler.getVersion());    m_handler.setDoctypeSystem(oldHandler.getDoctypeSystem());    m_handler.setDoctypePublic(oldHandler.getDoctypePublic());    m_handler.setMediaType(oldHandler.getMediaType());    m_handler.setTransformer(oldHandler.getTransformer());  }  if (m_needToCallStartDocument) {    m_handler.startDocument();    m_needToCallStartDocument=false;  }  m_wrapped_handler_not_initialized=false;}  }
class C{  public DNetscapeCaPolicyUrl(JDialog parent){  super(parent);  setTitle(res.getString("DNetscapeCaPolicyUrl.Title"));  initComponents();}  }
class C{  private void readImageFile(ZipInputStream zipInputStream,String fileName) throws IOException {  FileOutputStream fileOutputStream=null;  try {    if (importTrackId == -1L) {      return;    }    if (fileName.equals("")) {      return;    }    File dir=FileUtils.getPhotoDir(importTrackId);    FileUtils.ensureDirectoryExists(dir);    File file=new File(dir,fileName);    fileOutputStream=new FileOutputStream(file);    byte[] buffer=new byte[BUFFER_SIZE];    int count;    while ((count=zipInputStream.read(buffer)) != -1) {      fileOutputStream.write(buffer,0,count);    }    FileUtils.updateMediaScanner(context,Uri.fromFile(file));  }  finally {    if (fileOutputStream != null) {      fileOutputStream.close();    }  }}  }
class C{  @Override public HaltJobInfo execute(String[] params){  try {    HaltJobInfo haltJobInfo=new HaltJobInfo();    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String pid=commandLine.getOptionValue("process-id");    LOGGER.debug("processId is " + pid);    String batchMarking=commandLine.getOptionValue("batch-marking");    LOGGER.debug("Batch Marking is " + batchMarking);    haltJobInfo.setProcessId(Integer.parseInt(pid));    haltJobInfo.setBatchMarking(batchMarking);    jobDAO.haltJob(haltJobInfo.getProcessId(),haltJobInfo.getBatchMarking());    ProcessInfo processInfo=new ProcessInfo();    com.wipro.ats.bdre.md.dao.jpa.Process process=new com.wipro.ats.bdre.md.dao.jpa.Process();    process.setProcessId(Integer.parseInt(pid));    process=processDAO.get(Integer.parseInt(pid));    processInfo.setProcessName(process.getProcessName());    DateFormat dateFormat=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");    Date date=new Date();    String haltMessage=" --processId=" + haltJobInfo.getProcessId() + "  --stage=parent"+ "  --status=success"+ "  --processName="+ process.getProcessName()+ "  --endTs="+ (dateFormat.format(date)).toString();    try {      BasicConfigurator.configure();      StatusNotification statusNotification=new StatusNotification(haltMessage,MDConfig.getProperty("status-notification.halt-queue"));      LOGGER.info(statusNotification.toString());    } catch (    Exception e) {      LOGGER.error("Error occurred while notifying job status",e);    }    return haltJobInfo;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  protected GridClientMarshaller marshaller(GridNioSession ses){  GridClientMarshaller marsh=ses.meta(MARSHALLER.ordinal());  assert marsh != null;  return marsh;}  }
class C{  public Set<Entry<String,Value>> entrySet(){  buildIfNeededMap();  return map.entrySet();}  }
class C{  public int compareTo(Integer object){  return compare(value,object.value);}  }
class C{  @Override protected void updateFigure(PositionableShape p){  PositionablePolygon pos=(PositionablePolygon)p;  _editing=false;  _pShape.editing(false);  setPositionableParams(pos);}  }
class C{  public T caseFunctionBlockSource(FunctionBlockSource object){  return null;}  }
class C{  private void showAuthCommonErrorMessage(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_authentication_error),getResources().getString(R.string.error_for_all_unknown_authentication_failures),getResources().getString(R.string.button_ok),null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void dragGestureChanged(DragSourceDragEvent dsde){  System.out.println("[Source] dragGestureChanged");  changeCursor(dsde.getDragSourceContext(),dsde.getUserAction() & dsde.getDropAction());  dropAction=dsde.getUserAction() & dsde.getDropAction();  System.out.println("dropAction = " + dropAction);}  }
class C{  protected void writeNext(String[] nextLine,boolean applyQuotesToAll,Appendable appendable) throws IOException {  if (nextLine == null) {    return;  }  for (int i=0; i < nextLine.length; i++) {    if (i != 0) {      appendable.append(separator);    }    String nextElement=nextLine[i];    if (nextElement == null) {      continue;    }    Boolean stringContainsSpecialCharacters=stringContainsSpecialCharacters(nextElement);    if ((applyQuotesToAll || stringContainsSpecialCharacters) && quotechar != NO_QUOTE_CHARACTER) {      appendable.append(quotechar);    }    if (stringContainsSpecialCharacters) {      processLine(nextElement,appendable);    } else {      appendable.append(nextElement);    }    if ((applyQuotesToAll || stringContainsSpecialCharacters) && quotechar != NO_QUOTE_CHARACTER) {      appendable.append(quotechar);    }  }  appendable.append(lineEnd);  writer.write(appendable.toString());}  }
class C{  protected boolean isClose(Word w){  return isClosingBracket(w) || isClosingQuote(w);}  }
class C{  static void logFlagWarning(String message){  if (!flagWarningsEnabled)   return;  int cnt;synchronized (flagWarningsCntSync) {    cnt=flagWarningsCnt;    if (cnt < MAX_FLAG_WARNINGS_LOGGED) {      flagWarningsCnt++;    } else {      flagWarningsEnabled=false;      return;    }  }  message+=" This will be an error in some later FreeMarker version!";  if (cnt + 1 == MAX_FLAG_WARNINGS_LOGGED) {    message+=" [Will not log more regular expression flag problems until restart!]";  }  LOG.warn(message);}  }
class C{  private void loadDBSchema(){  s_logger.log(Level.FINE,"loadDBSchema",getDirection());  if (getSchema() == null) {    try {      DatabaseMetaData md=m_connection.getMetaData();      String url=md.getURL();      String user=md.getUserName();      ResultSet rs=md.getSchemas();      while (getResultSetNext(rs)) {        String s=rs.getString("TABLE_SCHEM");        if (user.equalsIgnoreCase(s) || url.toUpperCase().contains(s.toUpperCase())) {          setSchema(s);        }      }      releaseResultSet(rs);    } catch (    SQLException e) {      s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"loadDBSchemaError",new Object[]{getDirection(),e.getMessage()});    }  } else {    setSchema(s_dbEngine.getDBSchemaOrUser(getVendor(),getSchema(),getUser()));  }  s_logger.log(Level.FINE,"dbSchemaLoaded",new Object[]{getDirection(),getSchema()});  s_logger.flush();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ABSTRACT_METHOD_DECLARATION___TYPE_1:    return TYPE_1_EDEFAULT == null ? type_1 != null : !TYPE_1_EDEFAULT.equals(type_1);case UmplePackage.ABSTRACT_METHOD_DECLARATION___METHOD_DECLARATOR_1:  return methodDeclarator_1 != null && !methodDeclarator_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public List<TransLog> findByRegex(String regex){  return null;}  }
class C{  public CHelpSaveFormattedField(final AbstractFormatter formatter,final IHelpInformation information){  super(formatter);  m_information=information;}  }
class C{  protected Node newNode(){  return new SVGOMFEFuncAElement();}  }
class C{  public Node findTag(String tag,Node node){  return findTag(tag,null,node);}  }
class C{  public static long createFakeThreadIDForBulkOp(int bucketNumber,long originatingThreadId){  return (MAX_THREAD_PER_CLIENT * (bucketNumber + 1) + originatingThreadId);}  }
class C{  public static void putInt(byte[] arr,long off,int val){  if (UNALIGNED)   UNSAFE.putInt(arr,off,val); else   putIntByByte(arr,off,val,BIG_ENDIAN);}  }
class C{  private void writeLine(byte[] data){  int checksum=0;  try {    buffOut.write(':');    for (int i=0; i < data.length; i++) {      writeHexByte(data[i]);      checksum+=data[i];    }    checksum=checksum & 0xff;    if (checksum > 0) {      checksum=256 - checksum;    }    writeHexByte((byte)checksum);    buffOut.write('\n');  } catch (  IOException e) {  }}  }
class C{  public Builder backButtonNavigatesPages(boolean navigatesPages){  this.backButtonNavigatesPages=navigatesPages;  return this;}  }
class C{  public void appendInt(int val){  buf[pos++]=(byte)((val >>> 8) & 0xFF);  buf[pos++]=(byte)(val & 0xFF);}  }
class C{  public void testFourNodeEvents() throws Throwable {  testEvents(4);}  }
class C{  public Name paramName(int i){  return names.fromString("x" + i);}  }
class C{  @Override public void onCanceled(List<AppOpEntry> apps){  super.onCanceled(apps);  onReleaseResources(apps);}  }
class C{  public static String decode(byte[] data,String charset){  if (charset == null) {    return new String(decode(data));  }  try {    return new String(decode(data),charset);  } catch (  UnsupportedEncodingException ex) {    return new String(decode(data));  }}  }
class C{  public Matrix popMatrix(){  return this.matrixStack.pop();}  }
class C{  @Deprecated public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  public CActionShowPassword(final CSavePasswordField passwordField){  super("Show Password");  m_passwordField=passwordField;  m_originalCharacter=m_passwordField.getEchoChar();}  }
class C{  public static Face drawDown(MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){  Face down=new Face();  down.normal=Direction.DOWN.toVector();  down.drawVertex(new Vertex(maxX,minY,maxZ,textureCoordinates.getBottomMinU(),textureCoordinates.getBottomMinV()));  down.drawVertex(new Vertex(minX,minY,maxZ,textureCoordinates.getBottomMaxU(),textureCoordinates.getBottomMinV()));  down.drawVertex(new Vertex(minX,minY,minZ,textureCoordinates.getBottomMaxU(),textureCoordinates.getBottomMaxV()));  down.drawVertex(new Vertex(maxX,minY,minZ,textureCoordinates.getBottomMinU(),textureCoordinates.getBottomMaxV()));  model.drawFace(down);  return down;}  }
class C{  private void verifyGraphPattern(final AbstractTripleStore database,final GroupNodeBase<IGroupMemberNode> group,final ServiceParams serviceParams){  final Iterator<Map.Entry<URI,List<TermNode>>> it=serviceParams.iterator();  if (!serviceParams.contains(ValuesParams.VAR)) {    throw new RuntimeException("must provide a variable for: " + ValuesParams.VAR);  }  if (!serviceParams.contains(ValuesParams.VAL)) {    throw new RuntimeException("must provide at least one value for: " + ValuesParams.VAL);  }  while (it.hasNext()) {    final URI param=it.next().getKey();    if (ValuesParams.VAR.equals(param)) {      final List<TermNode> vars=serviceParams.get(param);      if (vars == null || vars.size() != 1 || vars.get(0).isConstant()) {        throw new RuntimeException("must provide exactly one variable for: " + param);      }    } else     if (ValuesParams.VAL.equals(param)) {      final List<TermNode> vals=serviceParams.get(param);      if (vals == null || vals.size() == 0) {        throw new RuntimeException("must provide at least one value for: " + param);      }      for (      TermNode val : vals) {        if (val.isVariable()) {          throw new RuntimeException("must provide constant values for: " + param);        }      }    } else {      throw new RuntimeException("unrecognized param: " + param);    }  }}  }
class C{  public void testFloatValueMinusZero(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E-400";  BigDecimal aNumber=new BigDecimal(a);  int minusZero=-2147483648;  float result=aNumber.floatValue();  assertTrue("incorrect value",Float.floatToIntBits(result) == minusZero);}  }
class C{  public static void ensureSPTextExists(Model model){  for (  Resource type : JenaUtil.getAllSubClasses(SP.Query.inModel(SP.getModel()))) {    for (    Resource instance : model.listSubjectsWithProperty(RDF.type,type).toList()) {      Command command=SPINFactory.asCommand(instance);      if (!instance.hasProperty(SP.text)) {        addSPText(command);      }    }  }}  }
class C{  protected void assertTextMessagesEqual(Message[] firstSet,Message[] secondSet) throws JMSException {  assertTextMessagesEqual("",firstSet,secondSet);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.839 -0500",hash_original_method="0BE493810C06D201F4519F1260F94FAA",hash_generated_method="6F181929656BA071E37B5E490E472B19") public String toString(){  if (exception != null) {    return exception.toString();  } else {    return super.toString();  }}  }
class C{  public void testManyShortRuns() throws Exception {  for (int i=0; i < 20; i++) {    doTest(10);  }}  }
class C{  private void compareEventIds(String e1,String e2,int expectedOutcome) throws Exception {  EventIdFactory factory=EventIdFactory.getInstance();  EventId eid1=factory.createEventId(e1);  EventId eid2=factory.createEventId(e2);  int outcome=eid1.compareTo(eid2);  Assert.assertEquals("Comparing: e1=" + e1 + " e2="+ e2,expectedOutcome,outcome);}  }
class C{  public JEditorIntegerPositive(){}  }
class C{  private int parseTimeExpression(String timeExpression,TimedTextObject tto,Document doc){  int mSeconds=0;  if (timeExpression.contains(":")) {    String[] parts=timeExpression.split(":");    if (parts.length == 3) {      int h, m;      float s;      h=Integer.parseInt(parts[0]);      m=Integer.parseInt(parts[1]);      s=Float.parseFloat(parts[2]);      mSeconds=h * 3600000 + m * 60000 + (int)(s * 1000);    } else     if (parts.length == 4) {      int h, m, s;      float f;      int frameRate=25;      Node n=doc.getElementsByTagName("ttp:frameRate").item(0);      if (n != null) {        String aux=n.getNodeValue();        try {          frameRate=Integer.parseInt(aux);        } catch (        NumberFormatException e) {        }      }      h=Integer.parseInt(parts[0]);      m=Integer.parseInt(parts[1]);      s=Integer.parseInt(parts[2]);      f=Float.parseFloat(parts[3]);      mSeconds=h * 3600000 + m * 60000 + s * 1000 + (int)(f * 1000 / frameRate);    } else {    }  } else {    String metric=timeExpression.substring(timeExpression.length() - 1);    timeExpression=timeExpression.substring(0,timeExpression.length() - 1).replace(',','.').trim();    double time;    try {      time=Double.parseDouble(timeExpression);      if (metric.equalsIgnoreCase("h"))       mSeconds=(int)(time * 3600000); else       if (metric.equalsIgnoreCase("m"))       mSeconds=(int)(time * 60000); else       if (metric.equalsIgnoreCase("s"))       mSeconds=(int)(time * 1000); else       if (metric.equalsIgnoreCase("ms"))       mSeconds=(int)time; else       if (metric.equalsIgnoreCase("f")) {        int frameRate;        Node n=doc.getElementsByTagName("ttp:frameRate").item(0);        if (n != null) {          String s=n.getNodeValue();          frameRate=Integer.parseInt(s);          mSeconds=(int)(time * 1000 / frameRate);        }      } else       if (metric.equalsIgnoreCase("t")) {        int tickRate;        Node n=doc.getElementsByTagName("ttp:tickRate").item(0);        if (n != null) {          String s=n.getNodeValue();          tickRate=Integer.parseInt(s);          mSeconds=(int)(time * 1000 / tickRate);        }      } else {      }    } catch (    NumberFormatException e) {    }  }  return mSeconds;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:43.856 -0500",hash_original_method="89F3D03C5156AFAF550D3AA0FD377E62",hash_generated_method="58233B713A68AFA01F3A12659B0F4385") @Override protected void run(final TestCase test){  startTest(test);  endTest(test);}  }
class C{  public PSTest(String name){  super(name);}  }
class C{  @Override void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_INVOKEDYNAMIC);  out.writeShort(_bootstrapMethodAttrIndex);  out.writeShort(_nameAndTypeIndex);}  }
class C{  public RotateLogEvent(String newLogFilename){  this.filename=newLogFilename;  this.filenameLength=-1;}  }
class C{  public int lastIndexOf(final StrMatcher matcher,int startIndex){  startIndex=(startIndex >= size ? size - 1 : startIndex);  if (matcher == null || startIndex < 0) {    return -1;  }  final char[] buf=buffer;  final int endIndex=startIndex + 1;  for (int i=startIndex; i >= 0; i--) {    if (matcher.isMatch(buf,i,0,endIndex) > 0) {      return i;    }  }  return -1;}  }
class C{  public void addObjectsToLocation(final Object[] objs,final int x,final int y,final int z){  if (objs == null)   return;  Bag[] fieldxy=field[x][y];  if (fieldxy[z] == null)   buildBag(fieldxy,z);  fieldxy[z].addAll(0,objs);}  }
class C{  private JSONObject chooseLatestPresence(JSONObject person) throws JSONException {  Iterator keys=person.keys();  JSONObject latestPresence=null;  while (keys.hasNext()) {    String key=(String)keys.next();    JSONObject presence=person.getJSONObject(key);    long timestamp=presence.getLong(TIMESTAMP);    String status=presence.getString(STATUS);    if (latestPresence == null) {      latestPresence=presence;    } else {      String latestStatus=latestPresence.getString(STATUS);      if (latestStatus == null) {        Log.wtf(STATUS_UPDATE,"Received presence information with no status");      } else       if (status == null) {        Log.wtf(STATUS_UPDATE,"Received presence information with no status");      } else {        if (status.equals(PresenceType.ACTIVE.toString())) {          if (latestStatus.equals(PresenceType.ACTIVE.toString())) {            if (latestPresence.getLong(TIMESTAMP) < timestamp) {              latestPresence=presence;            }          } else {            latestPresence=presence;          }        } else         if (status.equals(PresenceType.IDLE.toString()) && latestStatus.equals(PresenceType.IDLE.toString()) && latestPresence.getLong(TIMESTAMP) < timestamp) {          latestPresence=presence;        }      }    }  }  return latestPresence;}  }
class C{  @SuppressWarnings("unused") protected void writeBeginOutput() throws IOException {}  }
class C{  public boolean checkNoLongitudeBound(){  return noLongitudeBound;}  }
class C{  public long parentId(){  return parentId;}  }
class C{  private void sendSubscribe() throws PayloadException, NetworkException, ContactManagerException {  if (sLogger.isActivated()) {    sLogger.info("Send SUBSCRIBE request to " + mContact);  }  String contactUri=PhoneUtils.formatContactIdToUri(mContact).toString();  String callId=mImsModule.getSipManager().getSipStack().generateCallId();  String target=contactUri;  String localParty="sip:anonymous@".concat(ImsModule.getImsUserProfile().getHomeDomain());  String remoteParty=contactUri;  Vector<String> route=mImsModule.getSipManager().getSipStack().getServiceRoutePath();  mDialogPath=new SipDialogPath(mImsModule.getSipManager().getSipStack(),callId,1,target,localParty,remoteParty,route,mRcsSettings);  sendSubscribe(createSubscribe());}  }
class C{  public JTicket(BasicTicket t,int columns){  basict=t;  desktophints=(Map)Toolkit.getDefaultToolkit().getDesktopProperty("awt.font.desktophints");  this.columns=columns;  this.linewidth=columns * 7;  initComponents();}  }
class C{  @Override public boolean isSigned(int column) throws SQLException {  try {    debugCodeCall("isSigned",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void addComponent(URI includeNamespace){  namespaces.add(includeNamespace);}  }
class C{  public List<RawResultIterator> processTableBlocks() throws QueryExecutionException {  List<RawResultIterator> resultList=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  List<TableBlockInfo> list=null;  queryModel=prepareQueryModel(list);  for (  Map.Entry<String,TaskBlockInfo> taskMap : segmentMapping.entrySet()) {    String segmentId=taskMap.getKey();    List<DataFileFooter> listMetadata=dataFileMetadataSegMapping.get(segmentId);    int[] colCardinality=listMetadata.get(0).getSegmentInfo().getColumnCardinality();    SegmentProperties sourceSegProperties=new SegmentProperties(listMetadata.get(0).getColumnInTable(),colCardinality);    TaskBlockInfo taskBlockInfo=taskMap.getValue();    Set<String> taskBlockListMapping=taskBlockInfo.getTaskSet();    for (    String task : taskBlockListMapping) {      list=taskBlockInfo.getTableBlockInfoList(task);      Collections.sort(list);      LOGGER.info("for task -" + task + "-block size is -"+ list.size());      queryModel.setTableBlockInfos(list);      resultList.add(new RawResultIterator(executeBlockList(list),sourceSegProperties,destinationSegProperties));    }  }  return resultList;}  }
class C{  public void show(){  if (mNextView == null) {    throw new RuntimeException("View is not initialized");  }  mHandler.post(mShow);}  }
class C{  @Override public SnmpMibHandler addMib(SnmpMibAgent mib,SnmpOid[] oids) throws IllegalArgumentException {  if (mib == null) {    throw new IllegalArgumentException();  }  if (oids == null)   return addMib(mib);  if (!mibs.contains(mib))   mibs.addElement(mib);  for (int i=0; i < oids.length; i++) {    root.register(mib,oids[i].longValue());  }  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize1=3;  int filterSize2=3;  double n;  double sum;  int[] dX1;  int[] dX2;  int[] dY1;  int[] dY2;  double[] weights1;  double[] weights2;  int midPoint;  int numPixelsInFilter1;  int numPixelsInFilter2;  boolean reflectAtBorders=false;  double sigma1=0;  double sigma2=0;  double recipRoot2PiTimesSigma1;  double recipRoot2PiTimesSigma2;  double twoSigmaSqr1;  double twoSigmaSqr2;  double zN, zFinal_1, zFinal_2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigma1=Double.parseDouble(args[i]);    } else     if (i == 3) {      sigma2=Double.parseDouble(args[i]);    } else     if (i == 4) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigma1 < 0.5) {    sigma1=0.5;  } else   if (sigma1 > 20) {    sigma1=20;  }  if (sigma2 < 0.5) {    sigma2=0.5;  } else   if (sigma2 > 20) {    sigma2=20;  }  if (sigma1 == sigma2) {    showFeedback("The two standard deviations cannot be equal.");    return;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    recipRoot2PiTimesSigma1=1 / (Math.sqrt(2 * Math.PI) * sigma1);    twoSigmaSqr1=2 * sigma1 * sigma1;    recipRoot2PiTimesSigma2=1 / (Math.sqrt(2 * Math.PI) * sigma2);    twoSigmaSqr2=2 * sigma2 * sigma2;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma1 * Math.exp(-1 * (i * i) / twoSigmaSqr1);      if (weight <= 0.001) {        filterSize1=i * 2 + 1;        break;      }    }    if (filterSize1 % 2 == 0) {      filterSize1++;    }    if (filterSize1 < 3) {      filterSize1=3;    }    numPixelsInFilter1=filterSize1 * filterSize1;    dX1=new int[numPixelsInFilter1];    dY1=new int[numPixelsInFilter1];    weights1=new double[numPixelsInFilter1];    midPoint=(int)Math.floor(filterSize1 / 2) + 1;    a=0;    for (row=0; row < filterSize1; row++) {      for (col=0; col < filterSize1; col++) {        x=col - midPoint;        y=row - midPoint;        dX1[a]=x;        dY1[a]=y;        weight=recipRoot2PiTimesSigma1 * Math.exp(-1 * (x * x + y * y) / twoSigmaSqr1);        weights1[a]=weight;        a++;      }    }    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma2 * Math.exp(-1 * (i * i) / twoSigmaSqr2);      if (weight <= 0.001) {        filterSize2=i * 2 + 1;        break;      }    }    if (filterSize2 % 2 == 0) {      filterSize2++;    }    if (filterSize2 < 3) {      filterSize2=3;    }    numPixelsInFilter2=filterSize2 * filterSize2;    dX2=new int[numPixelsInFilter2];    dY2=new int[numPixelsInFilter2];    weights2=new double[numPixelsInFilter2];    midPoint=(int)Math.floor(filterSize2 / 2) + 1;    a=0;    for (row=0; row < filterSize2; row++) {      for (col=0; col < filterSize2; col++) {        x=col - midPoint;        y=row - midPoint;        dX2[a]=x;        dY2[a]=y;        weight=recipRoot2PiTimesSigma2 * Math.exp(-1 * (x * x + y * y) / twoSigmaSqr2);        weights2[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal_1=0;          for (a=0; a < numPixelsInFilter1; a++) {            x=col + dX1[a];            y=row + dY1[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights1[a];              zFinal_1+=weights1[a] * zN;            }          }          zFinal_1=zFinal_1 / sum;          sum=0;          zFinal_2=0;          for (a=0; a < numPixelsInFilter2; a++) {            x=col + dX2[a];            y=row + dY2[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights2[a];              zFinal_2+=weights2[a] * zN;            }          }          zFinal_2=zFinal_2 / sum;          outputFile.setValue(row,col,zFinal_1 - zFinal_2);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void speak(){  TextToSpeech textToSpeech=getMission().getService().getTextToSpeech();  textToSpeech.setOnUtteranceProgressListener(mUtteranceProgressListener);  textToSpeech.playSilence(SILENCE_LENGTH_MILLIS,TextToSpeech.QUEUE_ADD,null);  HashMap<String,String> map=new HashMap<>();  map.put(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID,mData.getMomentId());  textToSpeech.speak(mData.getTextToSpeak(),TextToSpeech.QUEUE_ADD,map);}  }
class C{  @Transactional(readOnly=false,propagation=Propagation.REQUIRED) public void createTmpUser(User user) throws RequiredFieldMissingException, RootNotModifiableException, EmailNotSentException {  checkRequiredFields(user);  checkRoot(user);  userDao.createTmpUser(user);}  }
class C{  public Month(int month,int year){  if ((month < 1) || (month > 12)) {    throw new IllegalArgumentException("Month outside valid range.");  }  this.month=month;  this.year=year;  peg(Calendar.getInstance());}  }
class C{  public static BigInteger[] decodeToBigIntegerArray(byte[] signature) throws IOException {  ASN1InputStream decoder=new ASN1InputStream(signature);  DLSequence seq=(DLSequence)decoder.readObject();  ASN1Integer r=(ASN1Integer)seq.getObjectAt(0);  ASN1Integer s=(ASN1Integer)seq.getObjectAt(1);  decoder.close();  BigInteger[] ret=new BigInteger[2];  ret[0]=r.getPositiveValue();  ret[1]=s.getPositiveValue();  return ret;}  }
class C{  public static ItemStack[] readInventory(List<CompoundTag> tagList,int start,int size){  ItemStack[] items=new ItemStack[size];  for (  CompoundTag tag : tagList) {    byte slot=tag.isByte("Slot") ? tag.getByte("Slot") : 0;    if (slot >= start && slot < start + size) {      items[slot - start]=readItem(tag);    }  }  return items;}  }
class C{  public XYSeries createCopy(int start,int end) throws CloneNotSupportedException {  XYSeries copy=(XYSeries)super.clone();  copy.data=new java.util.ArrayList();  if (this.data.size() > 0) {    for (int index=start; index <= end; index++) {      XYDataItem item=(XYDataItem)this.data.get(index);      XYDataItem clone=(XYDataItem)item.clone();      try {        copy.add(clone);      } catch (      SeriesException e) {        throw new RuntimeException("Unable to add cloned data item.",e);      }    }  }  return copy;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","ynu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static boolean removeRepositoryConfigs(Repository repository,String... repositoryIDs) throws RepositoryException, RepositoryConfigException {  boolean changed=false;  RepositoryConnection con=repository.getConnection();  try {    con.begin();    for (    String id : repositoryIDs) {      Resource context=getContext(con,id);      if (context != null) {        con.clear(context);        con.remove(context,RDF.TYPE,REPOSITORY_CONTEXT);        changed=true;      }    }    con.commit();  }  finally {    con.close();  }  return changed;}  }
class C{  public WebPage(String content){  browser=new javax.swing.JTextPane();  browser.setEditable(false);  browser.setMargin(null);  browser.setContentType("text/html");  browser.addHyperlinkListener(null);  browser.setText(content);  setViewportView(browser);}  }
class C{  public synchronized boolean hasModeratorRights(){  return isAdmin() || isBroadcaster() || isGlobalMod()|| isModerator()|| isStaff();}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static void writeString(final OutputStream output,final String s) throws IOException {  if (s == null) {    writeVarInt32(output,0);  } else {    writeBytes(output,s.getBytes(UTF_8));  }}  }
class C{  public void initUI(){  try {    FontMetrics fontMetrics=getFontMetrics(FontSizer.INSTANCE.getAdjustedDefaultFont());    int minimumHeight=fontMetrics.getHeight() * 8 + HEIGHT_DELTA;    int minimumWidth=Math.max(fontMetrics.stringWidth(controller.getLocaliser().getString("createNewReceivingAddressDialog.message")),fontMetrics.stringWidth(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.createdSuccessfullyShort",new Object[]{100}))) + WIDTH_DELTA;    setMinimumSize(new Dimension(minimumWidth,minimumHeight));    positionDialogRelativeToParent(this,0.5D,0.47D);  } catch (  NullPointerException npe) {  }  createNewReceivingAddressPanel=new CreateNewReceivingAddressPanel(this.bitcoinController,receiveBitcoinPanel,this);  setLayout(new BorderLayout());  add(createNewReceivingAddressPanel,BorderLayout.CENTER);}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public void writeTo(ChannelBuffer data){  super.writeTo(data);  data.writeByte(reportMirrorPorts);  data.writeByte(pad1);  data.writeByte(pad2);  data.writeByte(pad3);}  }
class C{  public OMGraphicList construct(){  logger.fine(getName() + "|LayerWorker.construct()");  fireStatusUpdate(LayerStatusEvent.START_WORKING);  String errorMsg=null;  try {    long start=System.currentTimeMillis();    OMGraphicList list=getRenderPolicy().prepare();    long stop=System.currentTimeMillis();    if (logger.isLoggable(Level.FINE)) {      logger.fine(getName() + "|LayerWorker.construct(): fetched " + (list == null ? "null list " : (list.size() + " graphics "))+ "in "+ (double)((stop - start) / 1000d)+ " seconds");    }    return list;  } catch (  OutOfMemoryError e) {    errorMsg=getName() + "|LayerWorker.construct(): " + e.getMessage();    if (logger.isLoggable(Level.FINER)) {      logger.fine(errorMsg);      e.printStackTrace();    } else {      logger.info(getName() + " layer ran out of memory, attempting to recover...");    }  }catch (  Throwable e) {    errorMsg=getName() + "|LayerWorker.construct(): " + e.getClass().getName()+ ", "+ e.getMessage();    logger.info(errorMsg);    e.printStackTrace();  }  if (errorMsg != null && logger.isLoggable(Level.FINE)) {    fireRequestMessage(new InfoDisplayEvent(this,errorMsg));  }  return null;}  }
class C{  protected void sequence_ThisTypeRefNominal_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public int[] valueArray(){  return valueArray(null);}  }
class C{  public Key(int privatekey,String description){  super(privatekey);  this.description=description;}  }
class C{  public boolean isIncludeInternalDTDDeclarations(){  return includeInternalDTDDeclarations;}  }
class C{  public void close() throws IOException {  try {    mem.unmap();  } catch (  Exception e) {    throw new IOException("Unable to close the file",e);  }}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster allocation=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    allocation.setPreferredPalette(image.getPreferredPalette());    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.isTemporaryFile=true;    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);          allocation.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}for (row=0; row < rows; row++) {data=image.getRowValues(row);for (col=0; col < cols; col++) {if (data[col] == noData) {allocation.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}allocation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");allocation.addMetadataEntry("Created on " + new Date());image.close();allocation.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static IsNullValue noKaboomNonNullValue(@Nonnull Location ins){  if (ins == null) {    throw new NullPointerException("ins cannot be null");  }  return new IsNullValue(NO_KABOOM_NN,ins);}  }
class C{  protected S_SpeciesImpl(){  super();}  }
class C{  public void centerMap(){  int width=getWidth();  int height=getHeight();  if (width == 0 || height == 0) {    requestCenterMap=true;  } else {    doCorrectPosition(true,isAnimationEnabled);    jumpTo(getOriginalMapWidth() / 2,getOriginalMapHeight() / 2);  }}  }
class C{  @SuppressWarnings("deprecation") private boolean stopOrSuspend(boolean suspend){  boolean suicide=false;  Thread us=Thread.currentThread();  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot=null;synchronized (this) {    checkAccess();    for (int i=0; i < nthreads; i++) {      if (threads[i] == us)       suicide=true; else       if (suspend)       threads[i].suspend(); else       threads[i].stop();    }    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    }  }  for (int i=0; i < ngroupsSnapshot; i++)   suicide=groupsSnapshot[i].stopOrSuspend(suspend) || suicide;  return suicide;}  }
class C{  public void inserir(Local local){  try {    String sql="INSERT INTO tb_local (nome, descricao, fk_setor) VALUES (?, ?, ?) ";    stm=conector.prepareStatement(sql);    stm.setString(1,local.getNome());    stm.setString(2,local.getDescricao());    stm.setInt(3,local.getSetor().getId());    stm.executeUpdate();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao inserir local na base de dados! \n" + ex);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getEditorials();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (namespace: ");  result.append(namespace);  result.append(')');  return result.toString();}  }
class C{  public void endElement(String elementName) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.endElement(elementName);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.COMPOUND_EXPR___STRING_EXPR_1:    return stringExpr_1 != null && !stringExpr_1.isEmpty();case UmplePackage.COMPOUND_EXPR___BOOL_EXPR_1:  return boolExpr_1 != null && !boolExpr_1.isEmpty();case UmplePackage.COMPOUND_EXPR___NUM_EXPR_1:return numExpr_1 != null && !numExpr_1.isEmpty();case UmplePackage.COMPOUND_EXPR___GEN_EXPR_1:return genExpr_1 != null && !genExpr_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static void writeCurve(String f,Estimator est,double min,double max,int numPoints) throws Exception {  PrintWriter output=null;  StringBuffer text=new StringBuffer("");  if (f.length() != 0) {    String name=f + ".curv";    output=new PrintWriter(new FileOutputStream(name));  } else {    return;  }  double diff=(max - min) / (numPoints - 1.0);  try {    text.append("" + min + " "+ est.getProbability(min)+ " \n");    for (double value=min + diff; value < max; value+=diff) {      text.append("" + value + " "+ est.getProbability(value)+ " \n");    }    text.append("" + max + " "+ est.getProbability(max)+ " \n");  } catch (  Exception ex) {    ex.printStackTrace();    System.out.println(ex.getMessage());  }  output.println(text.toString());  if (output != null) {    output.close();  }}  }
class C{  private void refreshEditControls(){  final MarkerMatch m=markerControl.getTable().getSelectedMarker();  if (m == null) {    currentlyEditing.setEnabled(false);    includeSubtypesButton.setEnabled(false);    markerTypeLabel.setEnabled(false);    markerTypeText.setEnabled(false);    commentLabel.setEnabled(false);    commentText.setEnabled(false);    priorityLabel.setEnabled(false);    severityLabel.setEnabled(false);    setButtonsEnabled(allButtons,false);    setItalicLabelsEnabled(false);    currentlyEditing.setText(Messages.getString("MarkerTabControl.NoMarkerSelected"));    markerTypeText.setText("");    includeSubtypesButton.setSelection(false);    commentText.setText("");    setButtons(allButtons,false);    return;  }  currentlyEditing.setEnabled(true);  includeSubtypesButton.setEnabled(true);  commentLabel.setEnabled(true);  commentText.setEnabled(true);  markerTypeLabel.setEnabled(true);  markerTypeText.setEnabled(true);  priorityLabel.setEnabled(true);  severityLabel.setEnabled(true);  setButtonsEnabled(allButtons,true);  setItalicLabelsEnabled(true);  currentlyEditing.setText(Messages.getString("MarkerTabControl.MarkerAttributes"));  markerTypeText.setText(getSelectedMarker().getMarkerType());  includeSubtypesButton.setSelection(getSelectedMarker().isIncludeSubtypes());  commentText.setText(getSelectedMarker().getComment());  setButtonsFromModel();}  }
class C{  private final boolean isConvex(double[] a,double[] b,double[] c){  double area=(b[0] - a[0]) * factor * (c[1] - a[1]) - (c[0] - a[0]) * factor * (b[1] - a[1]);  return (area == 0) ? (mdist(b,c) > mdist(a,b) + mdist(a,c)) : (area < 0);}  }
class C{  public void init(){  mainWindow.getShortcutMenu().setVisible(false);}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now " + "\"resumed\")");}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  private void readObject(){}  }
class C{  public boolean isSubstitute(){  return (lastAccepted.substitute != null);}  }
class C{  private boolean removeLinkFromStructure(Map<NodePortTuple,Set<Link>> s,Link l){  boolean result1=false, result2=false;  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  if (s.get(n1) != null) {    result1=s.get(n1).remove(l);    if (s.get(n1).isEmpty())     s.remove(n1);  }  if (s.get(n2) != null) {    result2=s.get(n2).remove(l);    if (s.get(n2).isEmpty())     s.remove(n2);  }  return result1 || result2;}  }
class C{  public static void validateTargetType(Object entity,ODataRequest request,EntityDataModel entityDataModel,ODataUri oDataUri) throws ODataProcessorException, ODataTargetTypeException {  if (!entityDataModel.getType(entity.getClass()).getFullyQualifiedName().equals(getTargetType(request,entityDataModel,oDataUri).typeName())) {    throw new ODataProcessorException(PROCESSOR_ERROR,"Entity to persist does not match specified Resource name");  }}  }
class C{  @Nonnull private Cube generateCube(int cubeX,int cubeY,int cubeZ,@Nonnull Column column){  ICubePrimer primer=cubeGen.generateCube(cubeX,cubeY,cubeZ);  Cube cube=new Cube(column,cubeY,primer);  this.worldServer.getFirstLightProcessor().initializeSkylight(cube);  onCubeLoaded(cube,column);  return cube;}  }
class C{  private String formatValue(BigDecimal data){  if (data == null)   return ""; else {    DecimalFormat frm=new DecimalFormat("###,###,###,##0.00");    return frm.format(data.setScale(2,BigDecimal.ROUND_HALF_UP));  }}  }
class C{  public static long waitForCompletion(Future<?>[] futures,LongLongFunction aggr){  int size=futures.length;  Long[] results=new Long[size];  long a=0;  try {    for (int j=0; j < size; j++) {      results[j]=(Long)futures[j].get();    }    a=results[0];    for (int j=1; j < size; j++) {      a=aggr.apply(a,results[j]);    }  } catch (  ExecutionException ex) {    ex.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return a;}  }
class C{  protected long deleteFromIndex(final int n,final byte[][] keys,final byte[][] vals){  throw new RuntimeException("implement me");}  }
class C{  @NotNull @ObjectiveCName("addTrustedKey:") public ConfigurationBuilder addTrustedKey(String trustedKey){  trustedKeys.add(new TrustedKey(trustedKey));  return this;}  }
class C{  @RabbitListener(queues="${hawkbit.device.simulator.amqp.receiverConnectorQueueFromSp}",containerFactory="listenerContainerFactory") public void recieveMessageSp(final Message message,@Header(MessageHeaderKey.TYPE) final String type,@Header(MessageHeaderKey.THING_ID) final String thingId){  checkContentTypeJson(message);  delegateMessage(message,type,thingId);}  }
class C{  public boolean hasOrderId(){  return super.hasAttribute(ORDER_ID);}  }
class C{  private void mapEmployeeName(List<Employee> employees){  Stream<String> empStream=employees.stream().map(null).map(null);  empStream.forEach(null);}  }
class C{  public Map<String,Map<String,String>> loadTranslationsLists(final File translationFile){  final Map<String,Map<String,String>> lists=new HashMap<String,Map<String,String>>();  Map<String,String> translationList=new LinkedHashMap<String,String>();  final List<String> list=FileUtils.getListArray(translationFile);  String forFile="";  for (  final String line : list) {    if (!line.isEmpty()) {      if (line.charAt(0) != '#') {        final String[] split=line.split("==",2);        if (split.length == 2) {          translationList.put(split[0],split[1]);        }      } else       if (line.startsWith("#File:")) {        if (!forFile.isEmpty()) {          lists.put(forFile,translationList);        }        forFile=line.substring(6).trim();        if (lists.containsKey(forFile)) {          translationList=lists.get(forFile);        } else {          translationList=new LinkedHashMap<String,String>();        }      }    }  }  lists.put(forFile,translationList);  return lists;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean writeEvidence(final byte[] data){  return writeEvidence(data,0,data.length);}  }
class C{  @SuppressWarnings("unchecked") public ArrayDeque(){  elements=(E[])new Object[16];}  }
class C{  public static String format(final Iterable<? extends NameValuePair> parameters,final Charset charset){  final StringBuilder result=new StringBuilder();  for (  final NameValuePair parameter : parameters) {    final String encodedName=encodeFormFields(parameter.getName(),charset);    final String encodedValue=encodeFormFields(parameter.getValue(),charset);    if (result.length() > 0) {      result.append(PARAMETER_SEPARATOR);    }    result.append(encodedName);    if (encodedValue != null) {      result.append(NAME_VALUE_SEPARATOR);      result.append(encodedValue);    }  }  return result.toString();}  }
class C{  @Override public CreditCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener){  mToolbarListener=toolbarListener;  return this;}  }
class C{  public void stop(BundleContext bundleContext) throws Exception {  FileOutputStream fos=new FileOutputStream("bundle-output.txt",false);  try {    fos.write("Goodbye, World".getBytes("UTF-8"));    fos.flush();  }  finally {    fos.close();  }}  }
class C{  @Override protected void drawNeedle(Graphics2D g2,Rectangle2D plotArea,Point2D rotate,double angle){  super.drawNeedle(g2,plotArea,rotate,angle);  if ((rotate != null) && (plotArea != null)) {    int spacing=getSize() * 3;    Rectangle2D newArea=new Rectangle2D.Double();    Point2D newRotate=rotate;    newArea.setRect(plotArea.getMinX() - spacing,plotArea.getMinY(),plotArea.getWidth(),plotArea.getHeight());    super.drawNeedle(g2,newArea,newRotate,angle);    newArea.setRect(plotArea.getMinX() + spacing,plotArea.getMinY(),plotArea.getWidth(),plotArea.getHeight());    super.drawNeedle(g2,newArea,newRotate,angle);  }}  }
class C{  public void printTree(){  printTree(header.right);}  }
class C{  public X509CertImpl(Certificate certificate){  this.certificate=certificate;  this.tbsCert=certificate.getTbsCertificate();  this.extensions=tbsCert.getExtensions();}  }
class C{  @Override public void readFrom(ChannelBuffer data,int length){  super.readFrom(data,length);}  }
class C{  public static void doSetup(){  new N4JSStandaloneSetup().createInjectorAndDoEMFRegistration();}  }
class C{  public PropertyPathUnionNode(){}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public boolean isValidFloor(int floor){  return floor >= this.floor;}  }
class C{  public void printString(String v) throws IOException {  int len=v.length();  for (int i=0; i < len; i++) {    char ch=v.charAt(i);switch (ch) {case '<':      print("&lt;");    break;case '&':  print("&amp;");break;case '\r':print("&#13;");break;default :if (ch < 0x80) os.write(ch); else if (ch < 0x800) {os.write(0xc0 + ((ch >> 6) & 0x1f));os.write(0x80 + (ch & 0x3f));} else {os.write(0xe0 + ((ch >> 12) & 0xf));os.write(0x80 + ((ch >> 6) & 0x3f));os.write(0x80 + (ch & 0x3f));}break;}}}  }
class C{  public static void main(final String[] args){  new CreateAccountDialog(null,null);}  }
class C{  @Provides @Config("whoisHttpExpires") public static Duration provideWhoisHttpExpires(){  return Duration.standardDays(1);}  }
class C{  @Override public void translate(float velocityX,float velocityY){  if ((velocityX * velocityX + velocityY * velocityY) < EPSILON)   return;  final float x=getX() + getWidth() / 2f;  final float y=getY() + getHeight() / 2f;  particleCollided=false;  startPoint.set(x,y);  endPoint.set(x + velocityX,y + velocityY);  if (world != null)   world.rayCast(rayCallBack,startPoint,endPoint);  if (particleCollided) {    angle=2f * normalAngle - angle - 180f;    angleCos=MathUtils.cosDeg(angle);    angleSin=MathUtils.sinDeg(angle);    velocityX*=angleCos;    velocityY*=angleSin;  }  super.translate(velocityX,velocityY);}  }
class C{  public EmployeeInfo(String id){  this.id=id;  this.name=null;}  }
class C{  public static int indexOfWhitespace(String string,int startindex,int endindex){  for (int i=startindex; i < endindex; i++) {    if (CharUtil.isWhitespace(string.charAt(i))) {      return i;    }  }  return -1;}  }
class C{  public boolean isPaused(){  return paused;}  }
class C{  public DefinedMethod(String methodName,String... paramTypes){  this(methodName,false,paramTypes);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(StatementRegressionTest.class);}  }
class C{  public boolean isUnitAdmin(){  return hasRole(UserRoleType.UNIT_ADMINISTRATOR);}  }
class C{  private void resetDrawerContent(Context ctx){  if (mDrawer != null) {    mDrawer.resetDrawerContent();  }  mAccountSwitcherArrow.clearAnimation();  ViewCompat.animate(mAccountSwitcherArrow).rotation(0).start();}  }
class C{  public static void renderPassThruAttributes(FacesContext context,ResponseWriter writer,UIComponent component,Attribute[] attributes) throws IOException {  assert (null != context);  assert (null != writer);  assert (null != component);  Map<String,List<ClientBehavior>> behaviors=null;  if (component instanceof ClientBehaviorHolder) {    behaviors=((ClientBehaviorHolder)component).getClientBehaviors();  }  if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) {    behaviors=null;  }  renderPassThruAttributes(context,writer,component,attributes,behaviors);}  }
class C{  public DProviderInfo(JFrame parent){  super(parent,ModalityType.DOCUMENT_MODAL);  initComponents();}  }
class C{  static float min(float red,float green,float blue){  float min=(red < green) ? red : green;  return (min < blue) ? min : blue;}  }
class C{  public RegressionDataSet asRegressionDataSet(int index){  if (index < 0)   throw new IllegalArgumentException("Index must be a non-negative value"); else   if (getNumNumericalVars() == 0)   throw new IllegalArgumentException("Dataset has no numeric variables, can not create regression dataset"); else   if (index >= getNumNumericalVars())   throw new IllegalArgumentException("Index " + index + " i larger than number of numeric features "+ getNumNumericalVars());  return new RegressionDataSet(this.dataPoints,index);}  }
class C{  protected void init(){  if (initialized)   return;  Map<String,Class<? extends FXGNode>> elementNodes=new HashMap<String,Class<? extends FXGNode>>(DEFAULT_FXG_1_0_NODES.size() + 4);  elementNodes.putAll(DEFAULT_FXG_1_0_NODES);  elementNodesByURI=new HashMap<String,Map<String,Class<? extends FXGNode>>>(1);  elementNodesByURI.put(FXG_NAMESPACE,elementNodes);  HashSet<String> skippedElements=new HashSet<String>(1);  skippedElements.add(FXG_PRIVATE_ELEMENT);  skippedElementsByURI=new HashMap<String,Set<String>>(1);  skippedElementsByURI.put(FXG_NAMESPACE,skippedElements);  initialized=true;}  }
class C{  private void executeQuery(ServerCommit commit,ServerSessionContext session,CompletableFuture<Result> future,ThreadContext context){  if (!log.isOpen()) {    context.executor().execute(null);    return;  }  if (!session.state().active()) {    context.executor().execute(null);    return;  }  long index=commit.index();  long eventIndex=session.getEventIndex();  executor.init(index,commit.time(),ServerStateMachineContext.Type.QUERY);  try {    Object result=executor.executeOperation(commit);    context.executor().execute(null);  } catch (  Exception e) {    context.executor().execute(null);  }}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 2) {    if (args[0].toLowerCase().equals("read")) {      if (args[0].equals("READ"))       DEBUG=true;      Properties props=read(args[1]);      System.out.println(toString(props,null));    } else     if (args[0].toLowerCase().equals("find")) {      if (args[0].equals("FIND"))       DEBUG=true;      URL[] urls=find(args[1]);      for (      URL url : urls)       System.out.println(url);    } else {      printUsage();    }  } else {    printUsage();  }}  }
class C{  public boolean equals(Object objectToCompare){  if (this == objectToCompare) {    return true;  }  if (objectToCompare == null) {    return false;  }  if (!(objectToCompare instanceof LookupQualifier)) {    return false;  }  LookupQualifier other=(LookupQualifier)objectToCompare;  if (toString().equals(other.toString())) {    return true;  }  return false;}  }
class C{  public void startAnimationToWorkspace(final Launcher.State fromState,final Workspace.State fromWorkspaceState,final Workspace.State toWorkspaceState,final int toWorkspacePage,final boolean animated,final Runnable onCompleteRunnable){  if (toWorkspaceState != Workspace.State.NORMAL && toWorkspaceState != Workspace.State.SPRING_LOADED && toWorkspaceState != Workspace.State.OVERVIEW) {    Log.e(TAG,"Unexpected call to startAnimationToWorkspace");  }  if (fromState == Launcher.State.APPS || fromState == Launcher.State.APPS_SPRING_LOADED) {    startAnimationToWorkspaceFromAllApps(fromWorkspaceState,toWorkspaceState,toWorkspacePage,animated,onCompleteRunnable);  } else {    startAnimationToWorkspaceFromWidgets(fromWorkspaceState,toWorkspaceState,toWorkspacePage,animated,onCompleteRunnable);  }}  }
class C{  public static void init(){  InitializeAsync.init();}  }
class C{  @Override final public Void visit(final ASTOptionalGraphPattern node,Object data) throws VisitorException {  final GroupGraphPattern parentGP=graphPattern;  graphPattern=new GroupGraphPattern(parentGP);  final Object tmp=super.visit(node,null);  final JoinGroupNode joinGroup=new JoinGroupNode();  joinGroup.setOptional(true);  if (tmp instanceof SubqueryRoot) {    joinGroup.addChild((SubqueryRoot)tmp);  } else {    @SuppressWarnings("rawtypes") final GroupNodeBase group=graphPattern.buildGroup(joinGroup);    assert group == joinGroup;  }  parentGP.add(joinGroup);  graphPattern=parentGP;  return null;}  }
class C{  private View fillLeft(int pos,int nextRight){  View selectedView=null;  int end=0;  while (nextRight > end && pos >= 0) {    boolean selected=pos == mSelectedPosition;    View child=makeAndAddView(pos,nextRight,false,mListPadding.top,selected);    nextRight=child.getLeft() - mDividerWidth;    if (selected) {      selectedView=child;    }    pos--;  }  mFirstPosition=pos + 1;  setVisibleRangeHint(mFirstPosition,mFirstPosition + getChildCount() - 1);  return selectedView;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MESSAGE_TYPE:    return isSetMessageType();case SW_PORT_TUPLE:  return isSetSwPortTuple();case DATA:return isSetData();}throw new IllegalStateException();}  }
class C{  public DoubleVector minus(double x){  return plus(-x);}  }
class C{  public PCAResult processEVD(EigenvalueDecomposition evd){  SortedEigenPairs eigenPairs=new SortedEigenPairs(evd,false);  return new PCAResult(eigenPairs);}  }
class C{  public void indent(int n) throws SAXException {}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  EntityReference entRef;  Element entElement;  CharacterData entElementText;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=(EntityReference)genderNode.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementText=(CharacterData)entElement.getFirstChild();  assertNotNull("entElementTextNotNull",entElementText);{    boolean success=false;    try {      entElementText.setNodeValue("newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.415 -0400",hash_original_method="1D18D807780183D4643AA5D10B7CFA5F",hash_generated_method="BB35A38A349491C1FEC1B265BE8A69F8") public static void writeSwappedShort(OutputStream output,short value) throws IOException {  output.write((byte)((value >> 0) & 0xff));  output.write((byte)((value >> 8) & 0xff));}  }
class C{  public void zip(JSONObject jsonobject) throws JSONException {  begin();  writeJSON(jsonobject);}  }
class C{  protected void closeProposalPopup(){  if (popup != null) {    popup.close();  }}  }
class C{  public String uploadId(){  return uploadId;}  }
class C{  public void testGcdFirstZero(){  byte aBytes[]={0};  byte bBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  int aSign=1;  int bSign=1;  byte rBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Override public ProjectSearchBuilder<T> search(){  return new ProjectSearchBuilder<T>(this);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.TEXT__TEXT:    return TEXT_EDEFAULT == null ? text != null : !TEXT_EDEFAULT.equals(text);}return super.eIsSet(featureID);}  }
class C{  public RepairableMetaBuilder start(final RepairableMeta meta){  return new RepairableMetaBuilder(meta);}  }
class C{  private NamedList rQuery(int expectedDocCount,String query,SolrServer server) throws Exception {  int timeSlept=0;  NamedList res=query(query,server);  while (expectedDocCount != numFound(res) && timeSlept < 30000) {    log.info("Waiting for " + expectedDocCount + " docs");    timeSlept+=100;    Thread.sleep(100);    res=query(query,server);  }  log.info("Waited for {}ms and found {} docs",timeSlept,numFound(res));  return res;}  }
class C{  @Override public void process(HashMap<K,ArrayList<V>> tuple){  for (  Map.Entry<K,ArrayList<V>> e : tuple.entrySet()) {    ArrayList<V> alist=e.getValue();    if (alist == null) {      continue;    }    for (    V val : alist) {      insert(val,cloneKey(e.getKey()));    }  }}  }
class C{  public void close(ClientCQ cq){  pool.getRITracker().removeCq(cq,cq.isDurable());  CloseCQOp.execute(this.pool,cq.getName());}  }
class C{  public void flush(){  this.stream=new ByteArrayOutputStream();  this.safeDelta();}  }
class C{  private void openPasswordSettings(){  Intent intent=new Intent(DevicePolicyManager.ACTION_SET_NEW_PASSWORD);  startActivity(intent);}  }
class C{  public String toString(){  return "[" + getLocalName() + "~=\""+ getValue()+ "\"]";}  }
class C{  public static CCColorLayer node(ccColor4B color,float w,float h){  return new CCColorLayer(color,w,h);}  }
class C{  public Layout(String group){  super(group);}  }
class C{  public boolean isPrimaryForDurableClient(String durableClientId){  DurableClientInfoResponse resp=(DurableClientInfoResponse)sendAndWait(DurableClientInfoRequest.create(durableClientId,DurableClientInfoRequest.IS_PRIMARY_FOR_DURABLE_CLIENT_REQUEST));  boolean result=resp.getResultBoolean();  return result;}  }
class C{  public void fireAnnotationSelected(WorkflowAnnotation anno){  List<WorkflowAnnotation> list=new LinkedList<>();  list.add(anno);  fireAnnotationsChanged(AnnotationEvent.SELECTED_ANNOTATION_CHANGED,list);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrgetvalue1.class,args);}  }
class C{  public static List<String> readStringSubKeys(int hkey,String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  if (hkey == HKEY_LOCAL_MACHINE) {    return readStringSubKeys(systemRoot,hkey,key);  } else   if (hkey == HKEY_CURRENT_USER) {    return readStringSubKeys(userRoot,hkey,key);  } else {    throw new IllegalArgumentException("hkey=" + hkey);  }}  }
class C{  Stylesheet popStylesheet(){  if (!m_stylesheetLocatorStack.isEmpty())   m_stylesheetLocatorStack.pop();  if (!m_stylesheets.isEmpty())   m_lastPoppedStylesheet=(Stylesheet)m_stylesheets.pop();  return m_lastPoppedStylesheet;}  }
class C{  public static String[][] ISO8859_1_ESCAPE(){  return ISO8859_1_ESCAPE.clone();}  }
class C{  protected void verifySystemAdminOrMonitorUser(){  if (!isSystemAdminOrMonitorUser()) {    throw APIException.forbidden.insufficientPermissionsForUser(getUserFromContext().getName());  }}  }
class C{  public static void putShortLE(long addr,short val){  if (UNALIGNED)   UNSAFE.putShort(addr,Short.reverseBytes(val)); else   putShortByByte(addr,val,false);}  }
class C{  Type coerce(Type etype,Type ttype){  if (etype.tsym.type == ttype.tsym.type)   return etype;  if (etype.isNumeric()) {    Object n=etype.constValue();switch (ttype.getTag()) {case BYTE:      return syms.byteType.constType(0 + (byte)intValue(n));case CHAR:    return syms.charType.constType(0 + (char)intValue(n));case SHORT:  return syms.shortType.constType(0 + (short)intValue(n));case INT:return syms.intType.constType(intValue(n));case LONG:return syms.longType.constType(longValue(n));case FLOAT:return syms.floatType.constType(floatValue(n));case DOUBLE:return syms.doubleType.constType(doubleValue(n));}}return ttype;}  }
class C{  public Iterator<T> iterator(){  throw new UnsupportedOperationException("Use getSearchResult and make sure you close it.");}  }
class C{  public Builder(){}  }
class C{  public static Future<Void> closeSequence(ExecutorService executorService,AsyncCloseable... closeables){  return closeSequence(executorService,false,closeables);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","szitu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private static String beforeSemicolon(String input){  int firstSemiColon=input.indexOf(';');  if (firstSemiColon == -1) {    return input.trim();  } else {    return input.substring(0,firstSemiColon).trim();  }}  }
class C{  public static <T>ObjectAnimator ofInt(T target,Property<T,Integer> property,int... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setIntValues(values);  return anim;}  }
class C{  private void initialize(){  java.awt.GridBagConstraints gridBagConstraints11=new GridBagConstraints();  this.setLayout(new GridBagLayout());  this.setSize(375,204);  this.setName("categoryPanel");  gridBagConstraints11.weightx=1.0;  gridBagConstraints11.weighty=1.0;  gridBagConstraints11.fill=java.awt.GridBagConstraints.BOTH;  gridBagConstraints11.gridx=0;  gridBagConstraints11.gridy=1;  gridBagConstraints11.insets=new java.awt.Insets(0,0,0,0);  gridBagConstraints11.anchor=java.awt.GridBagConstraints.NORTHWEST;  this.add(getJScrollPane(),gridBagConstraints11);}  }
class C{  public int end(String name){  return groups[getMatchedGroupIndex(name) * 2 + 1];}  }
class C{  protected CoreContainer createCoreContainer(Path solrHome,Properties extraProperties){  NodeConfig nodeConfig=loadNodeConfig(solrHome,extraProperties);  cores=new CoreContainer(nodeConfig,extraProperties,true);  cores.load();  return cores;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.STEREO_TYPE_TARGET__NAME:    setName((String)newValue);  return;case MappingPackage.STEREO_TYPE_TARGET__ATTRIBUTES:getAttributes().clear();getAttributes().addAll((Collection<? extends Attribute>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer){  configurer.enable();}  }
class C{  public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){  ContentValues values=new ContentValues(7);  values.put(ADDRESS,address);  if (date != null) {    values.put(DATE,date);  }  values.put(READ,read ? Integer.valueOf(1) : Integer.valueOf(0));  values.put(SUBJECT,subject);  values.put(BODY,body);  if (deliveryReport) {    values.put(STATUS,STATUS_PENDING);  }  if (threadId != -1L) {    values.put(THREAD_ID,threadId);  }  return resolver.insert(uri,values);}  }
class C{  public void backup(){  _backupCells=new Cell[_size][_size];  for (int j=0; j < _size; j++) {    for (int k=0; k < _size; k++) {      _backupCells[j][k]=new Cell();      _backupCells[j][k].setAlive(_cells[j][k].getAlive());    }  }}  }
class C{  public void loadIcons(Collection<String> keys){  if (keys == null || keys.isEmpty()) {    return;  }  updateImgSizes();  Map<String,BufferedImage> imageLoadingMap=new HashMap<String,BufferedImage>();  for (  String key : keys) {    if (key == null || key.isEmpty()) {      continue;    }    getIconMap().remove(key);    String resource=getResourceValue(key);    InputStream is=getResourceInputStream(resource);    if (is != null) {      BufferedImage img=getBufferedImage(is,resource);      if (img != null) {        imageLoadingMap.put(key,img);      }    }  }  for (  String key : getKeys(EntryType.FILE)) {    File f=getFileValue(key);    BufferedImage img=getBufferedImage(f);    if (img != null) {      imageLoadingMap.put(key,img);    }  }  BufferedImage frozenMask=imageLoadingMap.get(KEY_FROZEN_MASK);  for (  String key : imageLoadingMap.keySet()) {    BufferedImage img=imageLoadingMap.get(key);    if (SPECIAL_NAMES.contains(key)) {      continue;    } else {      if (frozenMask != null) {        getFrozenIconMap().put(key,getImageIconForImages(img,frozenMask,iconWidth,iconHeight));      }      getIconMap().put(key,getImageIconForImage(img,iconWidth,iconHeight));    }  }  if (imageLoadingMap.containsKey(KEY_CANDY)) {    BufferedImage img=imageLoadingMap.get(KEY_CANDY);    getIconMap().put(KEY_CANDY,getImageIconForImage(img,specialWidth,specialHeight));  }  if (imageLoadingMap.containsKey(KEY_SKILL_BOOSTER)) {    BufferedImage img=imageLoadingMap.get(KEY_SKILL_BOOSTER);    getIconMap().put(KEY_SKILL_BOOSTER,getImageIconForImage(img,specialWidth,specialHeight));  }}  }
class C{  public void npc(final String protagonist,final String text){  out.println("\t\tassertEquals(\"" + javaStringEscaper.escape(text) + "\", getReply(npc));");}  }
class C{  public boolean isDrawingBuffer(){  return buffer != null;}  }
class C{  private boolean exists(Object obj){  if (obj == null) {    return false;  }  if (obj instanceof String && StringUtils.isEmpty((String)obj)) {    return false;  }  return true;}  }
class C{  public ClassNode buildListType(ClassNode componentType){  return parameterizedType(ClassHelper.LIST_TYPE,componentType);}  }
class C{  public static <T>ReactiveSeq<T> stream(Publisher<T> pub){  return ReactiveSeq.fromStream(jdkStream(pub));}  }
class C{  public Duration toStandardDuration(){  long hours=getValue();  return new Duration(hours * DateTimeConstants.MILLIS_PER_HOUR);}  }
class C{  private Node<K,V> findNode(Object key){  if (key == null)   throw new NullPointerException();  Comparator<? super K> cmp=comparator;  outer:   for (; ; ) {    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {      Object v;      int c;      if (n == null)       break outer;      Node<K,V> f=n.next;      if (n != b.next)       break;      if ((v=n.value) == null) {        n.helpDelete(b,f);        break;      }      if (b.value == null || v == n)       break;      if ((c=cpr(cmp,key,n.key)) == 0)       return n;      if (c < 0)       break outer;      b=n;      n=f;    }  }  return null;}  }
class C{  @ApiOperation(value="Drop triggers on the single engine") @RequestMapping(value="engine/droptriggers",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postDropTriggers(){  dropTriggersImpl(getSymmetricEngine());}  }
class C{  public static boolean containsIntArray(int[] arr,int val){  assert arr != null;  if (arr.length == 0)   return false;  for (  int i : arr)   if (i == val)   return true;  return false;}  }
class C{  public Monument(){  super();}  }
class C{  void remove(){  active=false;}  }
class C{  public boolean isFullBST(){  return size == Math.pow(2,height()) - 1 ? true : false;}  }
class C{  public void testDoCheckWithEmptyElements(){  LOGGER.debug("doCheckWithEmptyElements");  TextEndsWithChecker instance=new TextEndsWithChecker(mockTextElementBuilder,EXTENSION_NOM_NAME,DETECTION_MSG);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  private void dumpBody(Part p) throws Exception {  printOut("=================================================================");  printOut("CONTENT-TYPE: " + p.getContentType());  if (p.isMimeType("text/plain")) {    printOut("Plain text ---------------------------");    printOut((String)p.getContent());  } else   if (p.getContentType().toUpperCase().startsWith("TEXT")) {    printOut("Other text ---------------------------");    printOut((String)p.getContent());  } else   if (p.isMimeType("multipart/*")) {    printOut("Multipart ---------------------------");    Multipart mp=(Multipart)p.getContent();    int count=mp.getCount();    for (int i=0; i < count; i++)     dumpBody(mp.getBodyPart(i));  } else   if (p.isMimeType("message/rfc822")) {    printOut("Nested ---------------------------");    dumpBody((Part)p.getContent());  } else {    Object o=p.getContent();    if (o instanceof String) {      printOut("This is a string ---------------------------");      printOut((String)o);    } else     if (o instanceof InputStream) {      printOut("This is just an input stream ---------------------------");    } else {      printOut("This is an unknown type ---------------------------");      printOut(o.toString());    }  }  printOut("=================================================================");}  }
class C{  private void waitDelayTime(){  try {    Thread.sleep(1500);  } catch (  InterruptedException e) {  }}  }
class C{  public void beginArray(){  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_BEGIN_ARRAY) {    push(JsonScope.EMPTY_ARRAY);    peeked=PEEKED_NONE;  } else {    throw createParseError("Expected BEGIN_ARRAY but was " + peek());  }}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  @Override public void render(){  Gdx.gl.glClearColor(0,0,0,1);  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  camera.update();  renderer.setProjectionMatrix(camera.combined);  renderer.begin(ShapeType.Filled);  renderer.setColor(Color.YELLOW);  renderer.circle(STAR_CENTER_X,STAR_CENTER_Y,STAR_RADIUS,SEGMENTS);  renderer.setColor(Color.GREEN);  renderer.circle(PLANET_CENTER_X,PLANET_CENTER_Y,PLANET_RADIUS,SEGMENTS);  renderer.setColor(Color.RED);  float halfSize=SATELLITE_SIZE / 2;  renderer.rect(SATELLITE_POSITION_X - halfSize,SATELLITE_POSITION_Y - halfSize,halfSize,halfSize,SATELLITE_SIZE,SATELLITE_SIZE,1,1,SATELLITE_ROTATION);  renderer.end();}  }
class C{  public static ApplicationMetaData loadApplicationMetaData(final CodeSource codeSource,final TimeProvider provider){  final CodeSourceFacade codeSourceFacade=new CodeSourceFacade(codeSource);  final JarFacade jarFacade=new JarFacade(codeSourceFacade.getLocation());  return new ApplicationMetaData(jarFacade.getTitle(),jarFacade.getVersion(),codeSourceFacade.getFirstCertificate(),provider);}  }
class C{  public void stateChanged(ChangeEvent e){  if (e == null) {    return;  }  if (myBar != null) {    Object newModelValue=myBar.getValue();    firePropertyChange(ACCESSIBLE_VALUE_PROPERTY,oldModelValue,newModelValue);    oldModelValue=newModelValue;  }}  }
class C{  private String determineEventTypeBasedOnOperationalStatus(Hashtable<String,String> notification,String[] descs,String[] codes,String evtOKType,String evtNOTOKType,List<String> propDescriptions,List<String> propCodes){  logMessage("Determiming Operational Status for Event",new Object[]{});  String evtType=null;  String[] values=descs;  if (values.length > 0) {    evtType=evtNOTOKType;    for (    String value : values) {      if (propDescriptions.contains(value)) {        evtType=evtOKType;        break;      }    }  } else {    values=codes;    if (values.length > 0) {      evtType=evtNOTOKType;      for (      String value : values) {        if (propCodes.contains(value)) {          evtType=evtOKType;          break;        }      }    } else {      logMessage("No Operational Status Values Found for this Event",new Object[]{});    }  }  return evtType;}  }
class C{  public LineNumberList(RTextArea textArea){  this(textArea,Color.GRAY);}  }
class C{  public static double logpdf(double x,double k,double lambda,double theta){  if (x <= theta || x == Double.POSITIVE_INFINITY) {    return Double.NEGATIVE_INFINITY;  }  double xl=(x - theta) / lambda;  return Math.log(k / lambda) + (k - 1) * Math.log(xl) - Math.pow(xl,k);}  }
class C{  public static int swapU16bitFromArray(byte[] value,int offset){  int v=0;  v|=((int)value[offset]) & 0x000000FF;  v|=(((int)value[offset + 1]) & 0x000000FF) << 8;  return v;}  }
class C{  public void end(String namespace,String name) throws Exception {  if (pushed) {    Object top=digester.pop();    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[FacesConfigRule]{" + digester.getMatch() + "} Pop "+ top.getClass());    }    if (!CLASS_NAME.equals(top.getClass().getName())) {      throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");    }  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[FacesConfigRule]{" + digester.getMatch() + "} Top "+ CLASS_NAME);    }  }}  }
class C{  public static byte[] convertHexStringToBytes(String hexString,int offset,int endIndex){  byte[] data;  String realHexString=hexString.substring(offset,endIndex).toLowerCase();  if ((realHexString.length() % 2) == 0)   data=new byte[realHexString.length() / 2]; else   data=new byte[(int)Math.ceil(realHexString.length() / 2d)];  int j=0;  char[] tmp;  for (int i=0; i < realHexString.length(); i+=2) {    try {      tmp=realHexString.substring(i,i + 2).toCharArray();    } catch (    StringIndexOutOfBoundsException siob) {      tmp=(realHexString.substring(i) + "0").toCharArray();    }    data[j]=(byte)((Arrays.binarySearch(hexChar,tmp[0]) & 0xf) << 4);    data[j++]|=(byte)(Arrays.binarySearch(hexChar,tmp[1]) & 0xf);  }  for (int i=realHexString.length(); i > 0; i-=2) {  }  return data;}  }
class C{  public CTagTreeNode(final JFrame parent,final ZyGraph graph,final ITagManager tagManager,final CTagsTreeModel model,final ITreeNode<CTag> tag){  super(tag.getObject().getId(),graph);  m_parent=Preconditions.checkNotNull(parent,"IE02328: Parent argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE02329: Tag argument can not be null");  m_tagManager=Preconditions.checkNotNull(tagManager,"IE01802: Tag manager can not be null");  m_model=Preconditions.checkNotNull(model,"IE01803: Treemodel can't be null.");  m_menuBuilder=new CTagTreeNodeMenuBuilder(parent,graph,tagManager,m_tag);  m_tagManager.addListener(m_tagManagerListener);  m_tag.getObject().addListener(m_tagListener);  createChildren();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String shapefile=null;  String inputFieldsString=null;  String[] fieldNames=null;  double z;  int numFields;  int progress=0;  int lastProgress=0;  int row;  int a, i, j;  double[] fieldAverages;  double[] fieldTotals;  boolean standardizedPCA=false;  int numberOfComponentsOutput=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFieldsString=args[0];  standardizedPCA=Boolean.parseBoolean(args[1]);  if (args[2].toLowerCase().contains("not")) {    numberOfComponentsOutput=0;  } else {    numberOfComponentsOutput=Integer.parseInt(args[2]);  }  try {    String[] inputs=inputFieldsString.split(";");    shapefile=inputs[0];    numFields=inputs.length - 1;    fieldNames=new String[numFields];    System.arraycopy(inputs,1,fieldNames,0,numFields);    AttributeTable table=new AttributeTable(shapefile.replace(".shp",".dbf"));    int numRecs=table.getNumberOfRecords();    DBFField[] fields=table.getAllFields();    ArrayList<Integer> PCAFields=new ArrayList<>();    for (j=0; j < fieldNames.length; j++) {      for (i=0; i < fields.length; i++) {        if (fields[i].getName().equals(fieldNames[j]) && (fields[i].getDataType() == DBFField.DBFDataType.NUMERIC || fields[i].getDataType() == DBFField.DBFDataType.FLOAT)) {          PCAFields.add(i);        }      }    }    if (numFields != PCAFields.size()) {      showFeedback("Not all of the specified database fields were found in the file or " + "a field of a non-numerical type was selected.");      return;    }    double[][] fieldArray=new double[numRecs][numFields];    Object[] rec;    for (i=0; i < numRecs; i++) {      rec=table.getRecord(i);      for (j=0; j < numFields; j++) {        fieldArray[i][j]=(Double)(rec[PCAFields.get(j)]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * i / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Reading data:",progress);      }      lastProgress=progress;    }    fieldAverages=new double[numFields];    fieldTotals=new double[numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotals[i]+=fieldArray[row][i];      }    }    for (i=0; i < numFields; i++) {      fieldAverages[i]=fieldTotals[i] / numRecs;    }    double[] fieldTotalDeviation=new double[numFields];    double[][] covariances=new double[numFields][numFields];    double[][] correlationMatrix=new double[numFields][numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotalDeviation[i]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][i] - fieldAverages[i]);        for (a=0; a < numFields; a++) {          covariances[i][a]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][a] - fieldAverages[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Calculating covariances:",progress);      }      lastProgress=progress;    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(fieldTotalDeviation[i] * fieldTotalDeviation[a]));      }    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        covariances[i][a]=covariances[i][a] / (numRecs - 1);      }    }    Matrix cov=null;    if (!standardizedPCA) {      cov=new Matrix(covariances);    } else {      cov=new Matrix(correlationMatrix);    }    EigenvalueDecomposition eigen=cov.eig();    double[] eigenvalues;    Matrix eigenvectors;    SortedSet<PrincipalComponent> principalComponents;    eigenvalues=eigen.getRealEigenvalues();    eigenvectors=eigen.getV();    double[][] vecs=eigenvectors.getArray();    int numComponents=eigenvectors.getColumnDimension();    principalComponents=new TreeSet<PrincipalComponent>();    for (i=0; i < numComponents; i++) {      double[] eigenvector=new double[numComponents];      for (j=0; j < numComponents; j++) {        eigenvector[j]=vecs[j][i];      }      principalComponents.add(new PrincipalComponent(eigenvalues[i],eigenvector));    }    double totalEigenvalue=0;    for (i=0; i < numComponents; i++) {      totalEigenvalue+=eigenvalues[i];    }    double[][] explainedVarianceArray=new double[numComponents][2];    j=0;    for (    PrincipalComponent pc : principalComponents) {      explainedVarianceArray[j][0]=pc.eigenValue / totalEigenvalue * 100.0;      if (j == 0) {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0];      } else {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0] + explainedVarianceArray[j - 1][1];      }      j++;    }    DecimalFormat df1=new DecimalFormat("0.00");    DecimalFormat df2=new DecimalFormat("0.0000");    DecimalFormat df3=new DecimalFormat("0.000000");    DecimalFormat df4=new DecimalFormat("0.000");    String ret="Principal Component Analysis Report:\n\n";    ret+="Component\tExplained Var.\tCum. %\tEigenvalue\tEigenvector\n";    j=0;    for (    PrincipalComponent pc : principalComponents) {      String explainedVariance=df1.format(explainedVarianceArray[j][0]);      String explainedCumVariance=df1.format(explainedVarianceArray[j][1]);      double[] eigenvector=pc.eigenVector.clone();      ret+=(j + 1) + "\t" + explainedVariance+ "\t"+ explainedCumVariance+ "\t"+ df2.format(pc.eigenValue)+ "\t";      String eigenvec="[";      for (i=0; i < numComponents; i++) {        if (i < numComponents - 1) {          eigenvec+=df3.format(eigenvector[i]) + ", ";        } else {          eigenvec+=df3.format(eigenvector[i]);        }      }      eigenvec+="]";      ret+=eigenvec + "\n";      if (j < numberOfComponentsOutput) {        DBFField field=new DBFField();        field=new DBFField();        field.setName("COMP" + (j + 1));        field.setDataType(DBFField.DBFDataType.NUMERIC);        field.setFieldLength(10);        field.setDecimalCount(4);        table.addField(field);        for (row=0; row < numRecs; row++) {          z=0;          for (i=0; i < numFields; i++) {            z+=fieldArray[row][i] * eigenvector[i];          }          Object[] recData=table.getRecord(row);          recData[recData.length - 1]=new Double(z);          table.updateRecord(row,recData);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (numRecs - 1));          if (progress != lastProgress) {            updateProgress("Outputing Component " + (j + 1) + ":",progress);          }          lastProgress=progress;        }      }      j++;    }    ret+="\nFactor Loadings:\n";    ret+="\t\tComponent\n\t";    for (i=0; i < numComponents; i++) {      ret+=(i + 1) + "\t";    }    ret+="\n";    double loading=0;    if (!standardizedPCA) {      for (i=0; i < numFields; i++) {        ret+="field " + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev)) / Math.sqrt(covariances[i][i]);          ret+=df4.format(loading) + "\t";        }        ret+="\n";      }    } else {      for (i=0; i < numFields; i++) {        ret+="field " + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev));          ret+=df4.format(loading) + "\t";        }        ret+="\n";      }    }    ret+="\n";    for (i=0; i < numFields; i++) {      ret+="field " + (i + 1) + "\t"+ fieldNames[i]+ "\n";    }    returnData(ret);    if (numberOfComponentsOutput > 0) {      returnData(table.getFileName());    }    ScreePlot plot=new ScreePlot(explainedVarianceArray);    returnData(plot);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void updateObject(int columnIndex,Object x) throws SQLException {  checkUpdatable();  getField(columnIndex).setObject(x);}  }
class C{  public static int nextInt(int min,int max){  return random.nextInt(max - min) + min;}  }
class C{  public static String swapCase(String str){  if (str == null) {    return null;  }  int sz=str.length();  StringBuilder buffer=new StringBuilder(sz);  boolean whitespace=false;  char ch;  char tmp;  for (int i=0; i < sz; i++) {    ch=str.charAt(i);    if (Character.isUpperCase(ch)) {      tmp=Character.toLowerCase(ch);    } else     if (Character.isTitleCase(ch)) {      tmp=Character.toLowerCase(ch);    } else     if (Character.isLowerCase(ch)) {      if (whitespace) {        tmp=Character.toTitleCase(ch);      } else {        tmp=Character.toUpperCase(ch);      }    } else {      tmp=ch;    }    buffer.append(tmp);    whitespace=Character.isWhitespace(ch);  }  return buffer.toString();}  }
class C{  private GuiInitializer(){}  }
class C{  public static int round(float a){  return Math.round(a);}  }
class C{  public void testEquals_equalObjectsHaveUnequalHashCodes(){  assertTestEqualsCausesException("Equal objects with unequal hash codes should cause an exception.",new EqualsTester().newEqualityGroup(new DefinedHashCodeObject(1),new DefinedHashCodeObject(2)));}  }
class C{  public TransformerConfigurationException(String msg){  super(msg);}  }
class C{  public void replaceFromToWithFrom(int from,int to,AbstractIntList other,int otherFrom){  if (!(other instanceof IntArrayList)) {    super.replaceFromToWithFrom(from,to,other,otherFrom);    return;  }  int length=to - from + 1;  if (length > 0) {    checkRangeFromTo(from,to,size());    checkRangeFromTo(otherFrom,otherFrom + length - 1,other.size());    System.arraycopy(((IntArrayList)other).elements,otherFrom,elements,from,length);  }}  }
class C{  public static boolean isLowerCase(String s){  return Pattern.matches("[a-z]*",s);}  }
class C{  @Override public String toString(){  return "O" + getOptLevel();}  }
class C{  public final static <T,C extends Collection<? super T>>Stream<C> groupedBySizeAndTime(final Stream<T> stream,final int size,final long time,final TimeUnit t,final Supplier<C> factory){  return new BatchByTimeAndSizeOperator<T,C>(stream,factory).batchBySizeAndTime(size,time,t);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addLink(Link link){  links.add(link);}  }
class C{  public void testSetFetchSize() throws Exception {  int oldFetchSize=this.stmt.getFetchSize();  try {    this.stmt.setFetchSize(10);  }  finally {    this.stmt.setFetchSize(oldFetchSize);  }}  }
class C{  public File suffixedFile(String suffix,boolean gzip){  return new File(mBaseFile.getParentFile(),mBaseFile.getName() + suffix + mExtension+ (gzip ? FileUtils.GZ_SUFFIX : ""));}  }
class C{  public void testReceive_UnconnectedReadonly() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_NORMAL).asReadOnlyBuffer();  assertTrue(dst.isReadOnly());  try {    this.channel1.receive(dst);    fail("Should throw an IllegalArgumentException here.");  } catch (  IllegalArgumentException e) {  }}  }
class C{  private static byte[] copy_buffer(byte[] buffer,int sOffset,int len){  byte[] newData=new byte[len];  System.arraycopy(buffer,sOffset,newData,0,len);  return newData;}  }
class C{  public CompilationUnitChange createChange(boolean generateGroups) throws CoreException {  return createChange(generateGroups,null);}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  private RealConnection findConnection(int connectTimeout,int readTimeout,int writeTimeout,boolean connectionRetryEnabled) throws IOException, RouteException {  Route selectedRoute;synchronized (connectionPool) {    if (released)     throw new IllegalStateException("released");    if (stream != null)     throw new IllegalStateException("stream != null");    if (canceled)     throw new IOException("Canceled");    RealConnection allocatedConnection=this.connection;    if (allocatedConnection != null && !allocatedConnection.noNewStreams) {      return allocatedConnection;    }    RealConnection pooledConnection=Internal.instance.get(connectionPool,address,this);    if (pooledConnection != null) {      this.connection=pooledConnection;      return pooledConnection;    }    selectedRoute=route;  }  if (selectedRoute == null) {    selectedRoute=routeSelector.next();synchronized (connectionPool) {      route=selectedRoute;    }  }  RealConnection newConnection=new RealConnection(selectedRoute);  acquire(newConnection);synchronized (connectionPool) {    Internal.instance.put(connectionPool,newConnection);    this.connection=newConnection;    if (canceled)     throw new IOException("Canceled");  }  newConnection.connect(connectTimeout,readTimeout,writeTimeout,address.connectionSpecs(),connectionRetryEnabled);  routeDatabase().connected(newConnection.route());  return newConnection;}  }
class C{  private void grow(int minCapacity){  int oldCapacity=elementData.length;  int newCapacity=oldCapacity + (oldCapacity >> 1);  if (newCapacity - minCapacity < 0)   newCapacity=minCapacity;  if (newCapacity - MAX_ARRAY_SIZE > 0)   newCapacity=hugeCapacity(minCapacity);  elementData=Arrays.copyOf(elementData,newCapacity);}  }
class C{  public void removeServiceConnectListener(final FileDownloadConnectListener listener){  FileDownloadEventPool.getImpl().removeListener(DownloadServiceConnectChangedEvent.ID,listener);}  }
class C{  public static int compareTo(double x,double y,double eps){  if (equals(x,y,eps)) {    return 0;  } else   if (x < y) {    return -1;  }  return 1;}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c == '=') {if (x.next() != '>') {x.back();}} else if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public void deploy(String path,URL war) throws TomcatManagerException, IOException {  deploy(path,war,false);}  }
class C{  static void loadActionMap(LazyActionMap map){  map.put(new Actions(Actions.HIDE));  map.put(new Actions(Actions.PAGE_DOWN));  map.put(new Actions(Actions.PAGE_UP));  map.put(new Actions(Actions.HOME));  map.put(new Actions(Actions.END));  map.put(new Actions(Actions.DOWN));  map.put(new Actions(Actions.DOWN_2));  map.put(new Actions(Actions.TOGGLE));  map.put(new Actions(Actions.TOGGLE_2));  map.put(new Actions(Actions.UP));  map.put(new Actions(Actions.UP_2));  map.put(new Actions(Actions.ENTER));}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(ADDRESS).setRequired(true);  builder.addAttribute(LABEL);  builder.addAttribute(PRIMARY);  builder.addAttribute(PROTOCOL);  builder.addAttribute(REL);}  }
class C{  public void appendToString(final StringBuffer buffer,final String toString){  if (toString != null) {    final int pos1=toString.indexOf(contentStart) + contentStart.length();    final int pos2=toString.lastIndexOf(contentEnd);    if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {      final String data=toString.substring(pos1,pos2);      if (fieldSeparatorAtStart) {        removeLastFieldSeparator(buffer);      }      buffer.append(data);      appendFieldSeparator(buffer);    }  }}  }
class C{  public ProtocolCodecSession(){}  }
class C{  public static Result warning(String messageKey,Object... args){  return new Result(Type.WARNING,Collections.singleton(new DiagMessage(messageKey,args)));}  }
class C{  protected FinalizableSoftReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static void constructModules(ProfilerSection section){  for (  ModuleContainer container : getContainers()) {    try {      log.debug("Constructing Module Container: " + container.getCandidate().getModuleFile());      ProfilerEntity entity=new ProfilerEntity().start();      container.construct();      entity.stop();      entity.setName("Construct");      section.section("Module").section(container.getName()).pushEntity(entity);      log.info("Module Loaded: " + container.getDetails());    } catch (    Exception e) {      log.debug("Could not Construct Module: " + container.getCandidate().getModuleFile());      log.debugException(e);    }  }}  }
class C{  public void dropTail(int n){  if (n > mLength) {    throw new IndexOutOfBoundsException("Trying to drop " + n + " items from array of length "+ mLength);  }  mLength-=n;}  }
class C{  public void start(){  if (output) {    System.setOut(new PrintStream(this));  } else {    System.setErr(new PrintStream(this));  }}  }
class C{  public synchronized Reference<? extends T> remove(long timeoutMillis) throws InterruptedException {  if (timeoutMillis < 0) {    throw new IllegalArgumentException("timeout < 0: " + timeoutMillis);  }  if (head != null) {    return poll();  }  if (timeoutMillis == 0 || (timeoutMillis > Long.MAX_VALUE / NANOS_PER_MILLI)) {    do {      wait(0);    } while (head == null);    return poll();  }  long nanosToWait=timeoutMillis * NANOS_PER_MILLI;  int timeoutNanos=0;  long startTime=System.nanoTime();  while (true) {    wait(timeoutMillis,timeoutNanos);    if (head != null) {      break;    }    long nanosElapsed=System.nanoTime() - startTime;    long nanosRemaining=nanosToWait - nanosElapsed;    if (nanosRemaining <= 0) {      break;    }    timeoutMillis=nanosRemaining / NANOS_PER_MILLI;    timeoutNanos=(int)(nanosRemaining - timeoutMillis * NANOS_PER_MILLI);  }  return poll();}  }
class C{  private void assertCompareFalse(Literal lit1,Literal lit2,CompareOp op,boolean strict) throws Exception {  assertFalse("Compare did not return false for " + lit1.toString() + op.getSymbol()+ lit2.toString(),QueryEvaluationUtil.compareLiterals(lit1,lit2,op,strict));}  }
class C{  private FloatConstant parseFloatConstant(int index) throws IOException {  int bits=readInt();  float value=Float.intBitsToFloat(bits);  return new FloatConstant(_class.getConstantPool(),index,value);}  }
class C{  public List<CompoundCurve3D> parseString(String pathString){  mPreviousPoint=new Vector3();  mStartPoint=new Vector3();  mPreviousControlPoint=new Vector3();  return pathStringToLine(pathString);}  }
class C{  public RandomLogWriter(PrintWriter pw){  super(ALL_LEVEL,pw);}  }
class C{  public void println(int x){  out.println(x);}  }
class C{  public CShowHotkeysAction(final JFrame parent){  super("Show Available Hotkeys");  m_parent=Preconditions.checkNotNull(parent,"IE02838: parent argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_SHOW_HOTKEYS_ACCELERATOR_KEY.getKeyStroke());}  }
class C{  public ExpressionColumn(Table table,Expression expr){  super(expr.getType(table.getSchema()));  m_table=table;  m_expr=expr;  m_lstnr=new Listener();  init();  int nrows=m_table.getRowCount();  m_cache=ColumnFactory.getColumn(getColumnType(),nrows);  m_valid=new BitSet(nrows);  m_expr.addExpressionListener(m_lstnr);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SuppressWarnings({"SameParameterValue","WeakerAccess"}) public AbstractScreen(TerminalSize initialSize,TextCharacter defaultCharacter){  this.frontBuffer=new ScreenBuffer(initialSize,defaultCharacter);  this.backBuffer=new ScreenBuffer(initialSize,defaultCharacter);  this.defaultCharacter=defaultCharacter;  this.cursorPosition=new TerminalPosition(0,0);  this.tabBehaviour=TabBehaviour.ALIGN_TO_COLUMN_4;  this.terminalSize=initialSize;  this.latestResizeRequest=null;}  }
class C{  public static void overrideGrowHeapSize(Extent size){  currentHeapSize=currentHeapSize.plus(size);  VM.events.heapSizeChanged(currentHeapSize);}  }
class C{  public AccessTokenConfiguration withGrantType(final String grantType){  checkLock();  this.grantType=Objects.notBlank("grantType",notNull("grantType",grantType));  return this;}  }
class C{  private void loadProperties(Path homePath){  Path propsPath=homePath.resolve("SDRTrunk.properties");  if (!Files.exists(propsPath)) {    try {      mLog.info("SDRTrunk - creating application properties file [" + propsPath.toAbsolutePath() + "]");      Files.createFile(propsPath);    } catch (    IOException e) {      mLog.error("SDRTrunk - couldn't create application properties " + "file [" + propsPath.toAbsolutePath(),e);    }  }  if (Files.exists(propsPath)) {    SystemProperties.getInstance().load(propsPath);  } else {    mLog.error("SDRTrunk - couldn't find or recreate the SDRTrunk " + "application properties file");  }}  }
class C{  public static void e(String message,Throwable cause){  Log.e(LOG_TAG,"[" + message + "]",cause);}  }
class C{  public static void parseChanges(Project project,VirtualFile vcsRoot,@Nullable GitRevisionNumber thisRevision,@Nullable GitRevisionNumber parentRevision,StringScanner s,Collection<Change> changes,final Set<String> ignoreNames) throws VcsException {  while (s.hasMoreData()) {    FileStatus status=null;    if (s.isEol()) {      s.nextLine();      continue;    }    if ("CADUMRT".indexOf(s.peek()) == -1) {      return;    }    String[] tokens=s.line().split("\t");    final ContentRevision before;    final ContentRevision after;    final String path=tokens[tokens.length - 1];switch (tokens[0].charAt(0)) {case 'C':case 'A':      before=null;    status=FileStatus.ADDED;  after=GitContentRevision.createRevision(vcsRoot,path,thisRevision,project,false,false,true);break;case 'U':status=FileStatus.MERGED_WITH_CONFLICTS;case 'M':if (status == null) {status=FileStatus.MODIFIED;}before=GitContentRevision.createRevision(vcsRoot,path,parentRevision,project,false,true,true);after=GitContentRevision.createRevision(vcsRoot,path,thisRevision,project,false,false,true);break;case 'D':status=FileStatus.DELETED;before=GitContentRevision.createRevision(vcsRoot,path,parentRevision,project,true,true,true);after=null;break;case 'R':status=FileStatus.MODIFIED;before=GitContentRevision.createRevision(vcsRoot,tokens[1],parentRevision,project,true,true,true);after=GitContentRevision.createRevision(vcsRoot,path,thisRevision,project,false,false,true);break;case 'T':status=FileStatus.MODIFIED;before=GitContentRevision.createRevision(vcsRoot,path,parentRevision,project,true,true,true);after=GitContentRevision.createRevisionForTypeChange(project,vcsRoot,path,thisRevision,true);break;default :throw new VcsException("Unknown file status: " + Arrays.asList(tokens));}if (ignoreNames == null || !ignoreNames.contains(path)) {changes.add(new Change(before,after,status));}}}  }
class C{  private Object[] newElementArray(int s){  return new Object[s];}  }
class C{  public mxCell(Object value,mxGeometry geometry,String style){  setValue(value);  setGeometry(geometry);  setStyle(style);}  }
class C{  static int debugComponentCount(){  DebugGraphicsInfo debugGraphicsInfo=info();  if (debugGraphicsInfo != null && debugGraphicsInfo.componentToDebug != null) {    return debugGraphicsInfo.componentToDebug.size();  } else {    return 0;  }}  }
class C{  private boolean runConfig(){  if (lineSeparator == null) {    logger.error("Set lineSeparator");    return false;  }  if (categoryIdentifers == null) {    logger.error("Set categoryIdentifers");    return false;  }  if (languageIdentifers == null) {    logger.error("Set languageIdentifers");    return false;  }  if (imageIdentifers == null) {    logger.error("Set imageIdentifers");    return false;  }  if (templateParser == null) {    logger.error("Set templateParser");    return false;  }  return true;}  }
class C{  public DefaultPseudoState(PseudoStateKind kind){  super(kind);}  }
class C{  public static VideoResponseModel mappingVideoResponseModelFrom(VideoBlockModel videoBlockModel){  VideoResponseModel model=new VideoResponseModel();  model.setCourseId(videoBlockModel.getCourseId());  SummaryModel summaryModel=mappingSummaryModelFrom(videoBlockModel);  model.setSummary(summaryModel);  model.videoBlockModel=videoBlockModel;  model.setSectionUrl(videoBlockModel.getParent().getBlockUrl());  model.setUnitUrl(videoBlockModel.getBlockUrl());  return model;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:49.519 -0500",hash_original_method="54173D46B73CE605A7C420967C72CF9C",hash_generated_method="4A017C2D04B7D7BF7D39E350F3E8682F") public int blockToSector(int blockIndex){  validateBlock(blockIndex);  if (blockIndex < 32 * 4) {    return blockIndex / 4;  } else {    return 32 + (blockIndex - 32 * 4) / 16;  }}  }
class C{  public void test_concurrentClients() throws InterruptedException {  final Properties properties=getProperties();  final Journal journal=new Journal(properties);  try {    if (false && journal.getBufferStrategy() instanceof MappedBufferStrategy) {      fail("Mapped buffer strategy may have problem with tx concurrency");    }    doConcurrentClientTest(journal,30,20,500,3,100,.10);  }  finally {    journal.destroy();  }}  }
class C{  public RepositoriesMetaData(RepositoryMetaData... repositories){  this.repositories=Arrays.asList(repositories);}  }
class C{  public GsonBuilder excludeFieldsWithModifiers(int... modifiers){  excluder=excluder.withModifiers(modifiers);  return this;}  }
class C{  public boolean isMultipleMode(){  return allowsMultipleSelections();}  }
class C{  public void close(){  toState(State.CLOSED);}  }
class C{  public boolean isModifiable(){  return this.modifiable;}  }
class C{  private static int parseHdlr(ParsableByteArray hdlr){  hdlr.setPosition(FULL_ATOM_HEADER_SIZE + 4);  return hdlr.readInt();}  }
class C{  public long readToByteChannel(WritableByteChannel dest,long offset,long nbytes) throws IOException {  if (fileChannel == null)   fileChannel=file.getChannel();  long need=nbytes;  while (need > 0) {    long count=fileChannel.transferTo(offset,need,dest);    need-=count;    offset+=count;  }  return nbytes - need;}  }
class C{  public final void popCurrentNode(){  m_currentNodes.quickPop(1);}  }
class C{  public void removeOrder(Order order){  try {    dataManager.removeNode(getOrderPath(uniqueId,order));  } catch (  Exception e) {    log.error("Error removing order " + order.getId() + " from EngineState",e);  }}  }
class C{  public void postOnWall(String userId,String message,ActionListener callback) throws IOException {  checkAuthentication();  FacebookRESTService con=new FacebookRESTService(token,userId,FacebookRESTService.FEED,true);  con.addArgument("message","" + message);  con.addResponseListener(new Listener(con,callback));  if (slider != null) {    SliderBridge.bindProgress(con,slider);  }  for (int i=0; i < responseCodeListeners.size(); i++) {    con.addResponseCodeListener((ActionListener)responseCodeListeners.elementAt(i));  }  current=con;  NetworkManager.getInstance().addToQueueAndWait(con);}  }
class C{  public MultiFPSet(final FPSetConfiguration fpSetConfiguration) throws RemoteException {  super(fpSetConfiguration);  int bits=fpSetConfiguration.getFpBits();  long fpMemSize=fpSetConfiguration.getMemoryInBytes();  Assert.check(bits > 0 && bits <= MAX_FPBITS,"Illegal number of FPSets found.");  if (fpMemSize == MEM_DEFAULT) {    fpMemSize=HeapBasedDiskFPSet.DefaultMaxTblCnt / 20;  }  this.sets=getNestedFPSets(fpSetConfiguration);  this.fpbits=64 - bits;}  }
class C{  public static File leftShift(File file,Object text) throws IOException {  append(file,text);  return file;}  }
class C{  private static <T extends Comparable<T>>int partition(List<T> a,int lower,int upper){  T x=a.get(upper);  int i=lower - 1;  for (int j=lower; j < upper; j++) {    if (a.get(j).compareTo(x) <= 0) {      i++;      exchange(a,i,j);    }  }  exchange(a,i + 1,upper);  return i + 1;}  }
class C{  public static boolean inheritsFromAndroidService(final SootClass cn){  if (cn.isInterface())   return false;  return Scene.v().getActiveHierarchy().isClassSubclassOfIncluding(cn,Scene.v().getSootClass(Components.SERVICE_CLASS));}  }
class C{  private byte mul0x2(int b){  if (b != 0) {    return aLogtable[25 + (logtable[b] & 0xff)];  } else {    return 0;  }}  }
class C{  public static final void discardEntityBytes(HttpResponse response){  HttpEntity entity=response.getEntity();  if (entity != null) {    try {      InputStream is=response.getEntity().getContent();      final long count=1024L;      while (is.skip(count) == count)       ;      is.close();    } catch (    IOException e) {      e.printStackTrace();    }catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  protected void prepareRemoteRepo(@NotNull GitRepository source){  final String target="parent.git";  final String targetName="origin";  Executor.cd(myProjectRoot);  GitExecutor.git("clone --bare '%s' %s",source.getRoot().getPath(),target);  GitExecutor.cd(source);  GitExecutor.git("remote add %s '%s'",targetName,myProjectRoot + "/" + target);}  }
class C{  public static String create() throws IdentityServiceException {  Date date=new Date();  UID hostUniqueId=new UID();  if (m_localHost == null) {    try {      m_localHost=InetAddress.getLocalHost();    } catch (    UnknownHostException e) {      throw new IdentityServiceException(e);    }  }  if (null == m_localHost) {    throw new IdentityServiceException("Unable to resolve hostname.  " + "Is your networking configured Properly?");  }  String hostName;  hostName=m_localHost.getHostName();  String identity;  identity="AT-" + date.toString() + "-"+ hostName+ "-"+ hostUniqueId.toString();  return (identity);}  }
class C{  public static String[] readArray(String text){  if (StringUtils.isBlank(text)) {    return null;  }  StringTokenizer st=new StringTokenizer(text);  List<String> v=new ArrayList<String>();  while (st.hasMoreTokens()) {    v.add(st.nextToken());  }  return v.toArray(new String[v.size()]);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tSets the attribute index (default last).","C",1,"-C <col>"));  newVector.addElement(new Option("\tSets the output date format string (default corresponds to ISO-8601).","F",1,"-F <value index>"));  return newVector.elements();}  }
class C{  public static int binarySearch(long[] array,long value){  return binarySearch(array,0,array.length,value);}  }
class C{  public void show(){}  }
class C{  public void handleResolutionRequest(Operation op){  ResolutionRequest resolutionRequest=op.getBody(ResolutionRequest.class);  Operation subscribeToCoordinator=Operation.createPost(UriUtils.buildSubscriptionUri(this.parent.getUri())).setCompletion(null).setReferer(getUri());  logInfo("Subscribing to transaction resolution on %s",this.parent.getSelfLink());  getHost().startSubscriptionService(subscribeToCoordinator,null);}  }
class C{  private void moveCenter(RectF rect,float x,float y,RectF bounds,int viewWidth,int viewHeight,float snapRadius){  float dx=x - rect.centerX();  float dy=y - rect.centerY();  if (rect.left + dx < 0 || rect.right + dx > viewWidth || rect.left + dx < bounds.left || rect.right + dx > bounds.right) {    dx/=1.05f;    mTouchOffset.x-=dx / 2;  }  if (rect.top + dy < 0 || rect.bottom + dy > viewHeight || rect.top + dy < bounds.top || rect.bottom + dy > bounds.bottom) {    dy/=1.05f;    mTouchOffset.y-=dy / 2;  }  rect.offset(dx,dy);  snapEdgesToBounds(rect,bounds,snapRadius);}  }
class C{  public List<NamedRelatedResourceRep> listContinuousCopies(URI id){  MirrorList response=client.get(MirrorList.class,getContinuousCopiesUrl(),id);  return defaultList(response.getMirrorList());}  }
class C{  public boolean isOfTextType(){  return TypeMap.isTextType(getMappedTypeCode());}  }
class C{  @Override public Action execute(Percept percept){  VacuumEnvironmentState state=(VacuumEnvironmentState)this.getPerceptToStateFunction().getState(percept);  if (state.getLocationState(VacuumEnvironment.LOCATION_A) == VacuumEnvironment.LocationState.Clean && state.getLocationState(VacuumEnvironment.LOCATION_B) == VacuumEnvironment.LocationState.Clean) {    return NoOpAction.NO_OP;  }  if (this.stack.size() < 1) {    if (this.contingencyPlan.size() < 1) {      return NoOpAction.NO_OP;    } else {      this.stack.push(this.getContingencyPlan().removeFirst());    }  }  Object currentStep=this.stack.peek();  if (currentStep instanceof Action) {    return (Action)this.stack.remove();  } else   if (currentStep instanceof Plan) {    Plan newPlan=(Plan)currentStep;    if (newPlan.size() > 0) {      this.stack.push(newPlan.removeFirst());    } else {      this.stack.remove();    }    return this.execute(percept);  } else   if (currentStep instanceof IfStateThenPlan) {    IfStateThenPlan conditional=(IfStateThenPlan)this.stack.remove();    this.stack.push(conditional.ifStateMatches(percept));    return this.execute(percept);  } else   if (currentStep == null) {    this.stack.remove();    return this.execute(percept);  } else {    throw new RuntimeException("Unrecognized contingency plan step.");  }}  }
class C{  @Override public void invalidate(){  if (!mIsDrawing && !mUpdateRequested) {    mInvalidator.invalidate();    mLastDrawTimeMillis=mClock.getTimeMillis();  }  mUpdateRequested=true;}  }
class C{  public static void scheduleFirstAccountReadyTimeoutAlarm(Context context,long timeout){  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + timeout,createFirstAccountReadyTimeoutPendingIntent(context));}  }
class C{  private SourceDir locateResource(String resource){  for (int i=0; i < sourceDirs.size(); i++) {    SourceDir src=sourceDirs.get(i);    if (new File(src.srcDir,resource).exists()) {      return src;    }  }  return null;}  }
class C{  private void initializePopulation(int populationSize){  if (problem.getNumberOfObjectives() == 2) {    initializePopulation2D(populationSize);  } else {    initializePopulationND(populationSize);  }}  }
class C{  public void compare(double threshold){  this.compare(null,1,threshold);}  }
class C{  public static String convertWWN(String wwn,WwnUtils.FORMAT format){  String ret="";  String norm=wwn.replaceAll(":","").replaceAll("-","");  if (format == FORMAT.NOMARKERS) {    return norm;  } else   if (format == FORMAT.DASH) {    String temp="" + norm.charAt(0) + norm.charAt(1)+ norm.charAt(2)+ norm.charAt(3)+ norm.charAt(4)+ norm.charAt(5)+ norm.charAt(6)+ norm.charAt(7)+ "-"+ norm.charAt(8)+ norm.charAt(9)+ norm.charAt(10)+ norm.charAt(11)+ "-"+ norm.charAt(12)+ norm.charAt(13)+ norm.charAt(14)+ norm.charAt(15);    ret=temp.toLowerCase(Locale.getDefault());  } else   if (format == FORMAT.COLON) {    String temp="" + norm.charAt(0) + norm.charAt(1)+ ":"+ norm.charAt(2)+ norm.charAt(3)+ ":"+ norm.charAt(4)+ norm.charAt(5)+ ":"+ norm.charAt(6)+ norm.charAt(7)+ ":"+ norm.charAt(8)+ norm.charAt(9)+ ":"+ norm.charAt(10)+ norm.charAt(11)+ ":"+ norm.charAt(12)+ norm.charAt(13)+ ":"+ norm.charAt(14)+ norm.charAt(15);    ret=temp.toUpperCase(Locale.getDefault());  } else   if (format == FORMAT.COMMA) {    String temp="" + norm.charAt(0) + norm.charAt(1)+ ","+ norm.charAt(2)+ norm.charAt(3)+ ","+ norm.charAt(4)+ norm.charAt(5)+ ","+ norm.charAt(6)+ norm.charAt(7)+ ","+ norm.charAt(8)+ norm.charAt(9)+ ","+ norm.charAt(10)+ norm.charAt(11)+ ","+ norm.charAt(12)+ norm.charAt(13)+ ","+ norm.charAt(14)+ norm.charAt(15);    ret=temp.toUpperCase(Locale.getDefault());  }  return (ret);}  }
class C{  private static BigDecimal average(BigDecimal first,BigDecimal second){  BigDecimal two=new BigDecimal("2");  return first.add(second).divide(two,2,BigDecimal.ROUND_HALF_UP);}  }
class C{  public static int ceilingHalf(int num){  if ((num & 1) == 1) {    return (num + 1) / 2;  } else {    return num / 2;  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.887 -0500",hash_original_method="3163E6492879DE65B32F21199BC78667",hash_generated_method="041FF0ED395DF69A64E905CDC1ADB194") public CircularRedirectException(){  super();}  }
class C{  protected JPanel createButtonsPanel(){  JPanel p=new JPanel(new FlowLayout(FlowLayout.RIGHT));  ButtonFactory bf=new ButtonFactory(bundle,this);  p.add(bf.createJButton("OKButton"));  p.add(bf.createJButton("CancelButton"));  return p;}  }
class C{  private CoreLoadingComponent loadingInjector(){  log.info("Building Loading Injector");  final ExecutorService executor;  final boolean managedExecutor;  if (this.executor.isPresent()) {    executor=this.executor.get();    managedExecutor=false;  } else {    executor=setupExecutor(Runtime.getRuntime().availableProcessors() * 2);    managedExecutor=true;  }  return DaggerCoreLoadingComponent.builder().loadingModule(new LoadingModule(executor,managedExecutor,this,params)).build();}  }
class C{  public void randomizeIncomingWeights(){  for (  Neuron neuron : this.getNeuronList()) {    neuron.randomizeFanIn();  }  getParentNetwork().fireSynapsesUpdated(getIncomingWeights());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.594 -0500",hash_original_method="1CDF6C9A1F9F2098201F4D7433D51EE7",hash_generated_method="3044714150AE11168217F638F9DD33EF") public SyncInfo addActiveSync(SyncManager.ActiveSyncContext activeSyncContext){  final SyncInfo syncInfo;synchronized (mAuthorities) {    if (Log.isLoggable(TAG,Log.VERBOSE)) {      Log.v(TAG,"setActiveSync: account=" + activeSyncContext.mSyncOperation.account + " auth="+ activeSyncContext.mSyncOperation.authority+ " src="+ activeSyncContext.mSyncOperation.syncSource+ " extras="+ activeSyncContext.mSyncOperation.extras);    }    AuthorityInfo authority=getOrCreateAuthorityLocked(activeSyncContext.mSyncOperation.account,activeSyncContext.mSyncOperation.authority,-1,true);    syncInfo=new SyncInfo(authority.ident,authority.account,authority.authority,activeSyncContext.mStartTime);    mCurrentSyncs.add(syncInfo);  }  reportActiveChange();  return syncInfo;}  }
class C{  public Advice lookup(int key){  int lo=0;  int hi=keys.length - 1;  while (lo <= hi) {    int mid=lo + (hi - lo) / 2;    if (key < keys[mid])     hi=mid - 1; else     if (key > keys[mid])     lo=mid + 1; else     return instances[mid];  }  return null;}  }
class C{  protected void releaseInternal(){  ContextTranslator.pts_1cfa_map=null;  ContextTranslator.objs_1cfa_map=null;}  }
class C{  @Override public void writeSparseDataFile(File dataFile,int format,int fractionDigits,boolean quoteNominal,boolean zipped,boolean append,Charset encoding) throws IOException {  PrintWriter out=null;  OutputStream outStream=null;  try {    if (zipped) {      outStream=new GZIPOutputStream(new FileOutputStream(dataFile,append));    } else {      outStream=new FileOutputStream(dataFile,append);    }    out=new PrintWriter(new OutputStreamWriter(outStream,encoding));    Iterator<Example> reader=iterator();    while (reader.hasNext()) {      out.println(reader.next().toSparseString(format,fractionDigits,quoteNominal));    }  } catch (  IOException e) {    throw e;  } finally {    if (out != null) {      out.close();    }    if (outStream != null) {      outStream.close();    }  }}  }
class C{  public synchronized void error(String msg,Exception ex,int code){  if (reported) {    return;  }  reported=true;  String text="java.util.logging.ErrorManager: " + code;  if (msg != null) {    text=text + ": " + msg;  }  System.err.println(text);  if (ex != null) {    ex.printStackTrace();  }}  }
class C{  public static void main(String[] args){  String input=args[0];  DigicorePathDependentNetworkReader_v2 nr=new DigicorePathDependentNetworkReader_v2();  nr.readFile(input);  nr.network.writeNetworkStatisticsToConsole();}  }
class C{  private Descriptor validDescriptor(final Descriptor in) throws RuntimeOperationsException {  Descriptor clone;  boolean defaulted=(in == null);  if (defaulted) {    clone=new DescriptorSupport();    MODELMBEAN_LOGGER.finer("Null Descriptor, creating new.");  } else {    clone=(Descriptor)in.clone();  }  if (defaulted && clone.getFieldValue("name") == null) {    clone.setField("name",this.getClassName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor name to " + this.getClassName());  }  if (defaulted && clone.getFieldValue("descriptorType") == null) {    clone.setField("descriptorType",MMB);    MODELMBEAN_LOGGER.finer("Defaulting descriptorType to \"" + MMB + "\"");  }  if (clone.getFieldValue("displayName") == null) {    clone.setField("displayName",this.getClassName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor displayName to " + this.getClassName());  }  if (clone.getFieldValue("persistPolicy") == null) {    clone.setField("persistPolicy","never");    MODELMBEAN_LOGGER.finer("Defaulting Descriptor persistPolicy to \"never\"");  }  if (clone.getFieldValue("log") == null) {    clone.setField("log","F");    MODELMBEAN_LOGGER.finer("Defaulting Descriptor \"log\" field to \"F\"");  }  if (clone.getFieldValue("visibility") == null) {    clone.setField("visibility","1");    MODELMBEAN_LOGGER.finer("Defaulting Descriptor visibility to 1");  }  if (!clone.isValid()) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The isValid() method of the Descriptor object itself returned false," + "one or more required fields are invalid. Descriptor:" + clone.toString());  }  if (!((String)clone.getFieldValue("descriptorType")).equalsIgnoreCase(MMB)) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"descriptorType\" field does not match the object described. " + " Expected: " + MMB + " , was: "+ clone.getFieldValue("descriptorType"));  }  return clone;}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View v=inflater.inflate(R.layout.hello_world,container,false);  View tv=v.findViewById(R.id.text);  ((TextView)tv).setText("Fragment #" + mNum);  tv.setBackgroundDrawable(getResources().getDrawable(android.R.drawable.gallery_thumb));  return v;}  }
class C{  public synchronized void deleteData(){  if (server == null) {    try {      IoUtil.delete(this.logsDir);    } catch (    IOException e) {      LOGGER.error("Unable to delete directory '{}'",this.logsDir,e);    }  }}  }
class C{  public static Marketplace ensureMarketplace(Organization owner,String marketplaceId,DataService ds) throws NonUniqueBusinessKeyException {  Assert.assertNotNull("Marketplace owner not defined",owner);  Marketplace mp=null;  try {    mp=findOneGlobalMarketplace(ds);  } catch (  AssertionError ex) {  }  if (mp == null) {    if (marketplaceId == null || marketplaceId.trim().length() == 0) {      marketplaceId=owner.getOrganizationId() + "_LOCAL";    }    mp=new Marketplace();    mp.setCreationDate(System.currentTimeMillis());    mp.setMarketplaceId(marketplaceId);    mp.setOrganization(owner);    mp.setCatalogEntries(new ArrayList<CatalogEntry>());    setDefaultLandingpage(mp);    createRevenueModels(mp,ds);    ds.persist(mp);    grantPublishing(owner,mp,ds,false);  }  return mp;}  }
class C{  public Builder(String displayName,Group group){  super(group);  addSchema(SCHEMA);  if (group != null) {    this.displayName=group.displayName;    members=group.members;  }  if (!Strings.isNullOrEmpty(displayName)) {    this.displayName=displayName;  }}  }
class C{  public HalfRegion(Match match,Vector origin,Vector normal){  super(RegionBounds.unbounded(match));  this.origin=origin;  this.normal=normal;}  }
class C{  private void changeVolume(String groupName,String volumeString){  try {    boolean groupExists=false;    for (    String name : ClientSingletonRepository.getSound().getGroupNames()) {      if (name.equals(groupName)) {        groupExists=true;        break;      }    }    if (groupExists) {      int volume=Integer.parseInt(volumeString);      SoundGroup group=ClientSingletonRepository.getSound().getGroup(groupName);      group.changeVolume(Numeric.intToFloat(volume,100.0f));      WtWindowManager.getInstance().setProperty("sound.volume." + groupName,Integer.toString(volume));    } else {      if (groupName.equals("master")) {        int volume=Integer.parseInt(volumeString);        ClientSingletonRepository.getSound().changeVolume(Numeric.intToFloat(volume,100.0f));        WtWindowManager.getInstance().setProperty("sound.volume." + groupName,Integer.toString(volume));      } else {        ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("No sound group \"" + groupName + "\" does exist"));        ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("Please type \"/volume show\" for a valid list of groups"));      }    }  } catch (  NumberFormatException exception) {    ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(volumeString + " is not a valid number",NotificationType.ERROR));  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new CompiereToolBarUI();}  }
class C{  @Description(summary="Clean all jar files, classes, and generated documentation.") public void clean(){  delete("temp");  delete("docs");  mkdir("docs");  mkdir("bin");  delete(files(".").keep("*/Thumbs.db"));}  }
class C{  public FastqSequenceDataSource(List<File> files,final FastQScoreType scoreType,boolean file,PrereadArm arm){  super(files,new DNAFastaSymbolTable(),file,arm);  mScoreType=scoreType;  if (scoreType != null) {    initQualityTable(scoreType);  }}  }
class C{  public static int intSub(int a,int b){  long sub=(long)a - (long)b;  if (sub < -K)   return -K; else   if (sub > K)   return K;  return (int)sub;}  }
class C{  public KmlFeature removeItem(int itemPosition){  return mItems.remove(itemPosition);}  }
class C{  public static void copyFile(String src,String dst) throws Exception {  BufferedReader inFile=null;  PrintWriter outFile=null;  String line;  try {    inFile=new BufferedReader(new FileReader(src));    outFile=new PrintWriter(new FileOutputStream(dst));    while ((line=inFile.readLine()) != null)     outFile.println(line);  }  finally {    if (inFile != null)     inFile.close();    if (outFile != null)     outFile.close();  }}  }
class C{  private int indexBetween(@Nullable Step lower,@Nullable Step higher){  return readStepsSafely(null);}  }
class C{  private OptionScanNode buildTreeFromNodeList(List<OptionScanNode> nodeList,int treeNodeType,OptionScanNode lastScanNode){  if (nodeList.size() == mDegree) {    nodeList.add(lastScanNode);    List<OptionScanNode> children=nodeList.subList(0,nodeList.size() - 2);    OptionScanNode lastChild=createTree(nodeList.subList(nodeList.size() - 2,nodeList.size()),treeNodeType);    children.add(lastChild);    return createTree(children,treeNodeType);  } else   if (nodeList.size() < mDegree) {    nodeList.add(lastScanNode);    return createTree(nodeList,treeNodeType);  } else {    List<OptionScanNode> subtrees=new ArrayList<>();    int elemNum=nodeList.size() / mDegree;    int elemRemainder=nodeList.size() % mDegree;    int startIndex=0, endIndex=0;    List<OptionScanNode> subtreeNodes;    while (startIndex < nodeList.size()) {      endIndex=(elemRemainder > 0) ? endIndex + elemNum + 1 : endIndex + elemNum;      elemRemainder--;      subtreeNodes=new ArrayList<>(nodeList.subList(startIndex,endIndex));      if ((subtreeNodes.size() == 1) && (endIndex < nodeList.size())) {        subtrees.add(subtreeNodes.get(0));      } else {        subtrees.add(buildTreeFromNodeList(subtreeNodes,treeNodeType,lastScanNode));      }      startIndex=endIndex;    }    return createTree(subtrees,treeNodeType);  }}  }
class C{  private void scanPath(String classPath){  if (classPath == null)   return;  String separator=System.getProperty("path.separator");  pathItems=new ArrayList<String>();  StringTokenizer st=new StringTokenizer(classPath,separator);  while (st.hasMoreTokens()) {    pathItems.add(st.nextToken());  }}  }
class C{  public String(int[] codePoints,int offset,int count){  super();  if (codePoints == null) {    throw new NullPointerException();  }  if (offset < 0 || count < 0 || (long)offset + (long)count > codePoints.length) {    throw new IndexOutOfBoundsException();  }  this.offset=0;  this.value=new char[count * 2];  int end=offset + count;  int c=0;  for (int i=offset; i < end; i++) {    c+=Character.toChars(codePoints[i],this.value,c);  }  this.count=c;}  }
class C{  protected int computeScrollXDeltaToGetChildRectOnScreen(Rect rect){  if (getChildCount() == 0)   return 0;  int width=getWidth();  int screenLeft=getScrollX();  int screenRight=screenLeft + width;  int fadingEdge=getHorizontalFadingEdgeLength();  if (rect.left > 0) {    screenLeft+=fadingEdge;  }  if (rect.right < getChildAt(0).getWidth()) {    screenRight-=fadingEdge;  }  int scrollXDelta=0;  if (rect.right > screenRight && rect.left > screenLeft) {    if (rect.width() > width) {      scrollXDelta+=(rect.left - screenLeft);    } else {      scrollXDelta+=(rect.right - screenRight);    }    int right=getChildAt(0).getRight();    int distanceToRight=right - screenRight;    scrollXDelta=Math.min(scrollXDelta,distanceToRight);  } else   if (rect.left < screenLeft && rect.right < screenRight) {    if (rect.width() > width) {      scrollXDelta-=(screenRight - rect.right);    } else {      scrollXDelta-=(screenLeft - rect.left);    }    scrollXDelta=Math.max(scrollXDelta,-getScrollX());  }  return scrollXDelta;}  }
class C{  public boolean isSocialPresenceSupported(){  return mSocialPresence;}  }
class C{  protected void uninstallListeners(){  removeParentPropertyChangeListener(this);}  }
class C{  public void onSelectionChanged(){  log.debug("onSelectionChanged");  updateToolBar();}  }
class C{  protected void createTypeMembers(IType newType,ImportRewrite imports) throws CoreException {}  }
class C{  public InterquartileRangeTest(String name){  super(name);}  }
class C{  private void handle200OkUnpublish(SipTransactionContext ctx){  if (sLogger.isActivated()) {    sLogger.info("200 OK response received");  }  SipResponse resp=ctx.getSipResponse();  saveEntityTag((SIPETagHeader)resp.getHeader(SIPETagHeader.NAME));}  }
class C{  @Override public int compareTo(final ConnegScore<E> o){  if (q < o.q)   return 1;  if (q > o.q)   return -1;  return 0;}  }
class C{  @Nullable public URL[] classPath(){  return clsPath;}  }
class C{  public MemoryDownloadTask(String uri){  super(uri);}  }
class C{  public static String contentAsString(Composite composite){  JSDocSerializer serializer=new JSDocSerializer();  serializer.appendContents(composite.getContents());  return serializer.strb.toString();}  }
class C{  public void testSharedMode() throws Exception {  processTest(DeploymentMode.SHARED);}  }
class C{  public void removeAllAddressBookListeners(){  listeners.clear();}  }
class C{  public static Bitmap loadBitmapFromAsset(GoogleApiClient googleApiClient,Asset asset){  if (asset == null) {    throw new IllegalArgumentException("Asset must be non-null");  }  InputStream assetInputStream=Wearable.DataApi.getFdForAsset(googleApiClient,asset).await().getInputStream();  if (assetInputStream == null) {    Log.w(TAG,"Requested an unknown Asset.");    return null;  }  return BitmapFactory.decodeStream(assetInputStream);}  }
class C{  private boolean isMultiStepNegotiationRequest(Credential clientCredential){  return clientCredential instanceof GSSCredential;}  }
class C{  @Override protected void initializeValues(){  super.initializeValues();  mQuadric=GLUES.gluNewQuadric();  GLUES.gluQuadricNormals(mQuadric,GLUES.GLU_SMOOTH);  GLUES.gluQuadricTexture(mQuadric,true);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testNestedFunctionMixed(){  check("func1(func2(field1), func3(field2))","{fn func1({fn func2(field1)}, {fn func3(field2)})}");  check("select func1(func2(field1), func3(field2)) from table;","select {fn func1({fn func2(field1)}, {fn func3(field2)})} from table;");  check("func1(func2(func3(field1))) func1(func2(field2))","{fn func1({fn func2({fn func3(field1)})})} {fn func1({fn func2(field2)})}");}  }
class C{  public SaaSSystemException(){}  }
class C{  public Cube removeCube(int cubeY){  return this.cubeMap.remove(cubeY);}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public boolean unregisterBuilderServer(BuilderServerLocation location) throws BuilderException {  checkStarted();  final String url=location.getUrl();  if (url == null) {    return false;  }  final RemoteBuilderServer builderServer=builderServices.remove(url);  return builderServer != null && doUnregisterBuilders(url);}  }
class C{  private boolean handleScroll(MotionEvent e1,MotionEvent e2,float distanceY){  if (!mHasDeterminedGestureOrientation && isDistanceGreaterThanTouchSlop(e1,e2)) {    determineGestureOrientation(e1,e2);  }  final boolean mayChangeEventTarget=mMayChangeEventTarget && e2.getPointerCount() == 1;  if (mHasDeterminedGestureOrientation && (!mHasDeterminedEventTarget || mayChangeEventTarget)) {    determineEventTarget(distanceY);  }  return false;}  }
class C{  private void initTargetName(String name){  if (name == null) {    throw new NullPointerException("auth.0E");  }  name=name.trim();  if (name.length() == 0) {    throw new IllegalArgumentException("auth.0F");  }  int beg=name.indexOf(' ');  if (beg == -1) {    throw new IllegalArgumentException("auth.10");  }  credentialClass=name.substring(0,beg);  beg++;  int count=0;  int nameLength=name.length();  for (int i, j=0; beg < nameLength; beg=j + 2, count++) {    i=name.indexOf(' ',beg);    j=name.indexOf('"',i + 2);    if (i == -1 || j == -1 || name.charAt(i + 1) != '"') {      throw new IllegalArgumentException("auth.10");    }  }  if (count < 1) {    throw new IllegalArgumentException("auth.10");  }  beg=name.indexOf(' ');  beg++;  String principalClass;  String principalName;  set=new CredOwner[count];  for (int index=0, i, j; index < count; beg=j + 2, index++) {    i=name.indexOf(' ',beg);    j=name.indexOf('"',i + 2);    principalClass=name.substring(beg,i);    principalName=name.substring(i + 2,j);    CredOwner element=new CredOwner(principalClass,principalName);    boolean found=false;    for (int ii=0; ii < offset; ii++) {      if (set[ii].equals(element)) {        found=true;        break;      }    }    if (!found) {      set[offset++]=element;    }  }}  }
class C{  public ResizingArrayStack(){  a=(Item[])new Object[2];  n=0;}  }
class C{  public static int reverseBytes(int i){  int b3=i >>> 24;  int b2=(i >>> 8) & 0xFF00;  int b1=(i & 0xFF00) << 8;  int b0=i << 24;  return (b0 | b1 | b2| b3);}  }
class C{  private void validateCompleteNoVariables(ResultFileReader reader) throws IOException {  population.clear();  population.add(new Solution(new double[]{0.0,1.0}));  population.add(new Solution(new double[]{1.0,0.0}));  Assert.assertTrue(reader.hasNext());  TestUtils.assertEquals(population,reader.next().getPopulation());  Assert.assertTrue(reader.hasNext());  TestUtils.assertEquals(population,reader.next().getPopulation());  Assert.assertFalse(reader.hasNext());  Assert.assertFalse(reader.hasNext());}  }
class C{  public void attachBone(Bone parent){  if (parentNode != null)   detachBone();  parentNode=parent;  parent.addChildBone(this);  offsetX=parent.offsetX;  offsetY=parent.offsetY;  offsetZ=parent.offsetZ;  resetOffset();}  }
class C{  public static void load(String url){  String driver=getDriver(url);  if (driver != null) {    loadUserClass(driver);  }}  }
class C{  public static void putFloat(Context context,String key,float value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putFloat(key,value);  editor.commit();}  }
class C{  protected static void makeVis(MatsimServices controler){  File driversLog=new File("./drivers.txt");  File visDir=new File("./output/vis");  File eventsFile=new File("./output/vis/events.txt");  if (driversLog.exists()) {    visDir.mkdir();    driversLog.renameTo(eventsFile);    Events2Snapshot events2Snapshot=new org.matsim.run.Events2Snapshot();    events2Snapshot.run(eventsFile,controler.getConfig(),controler.getScenario().getNetwork());    if (controler.getConfig().getParam("simulation","snapshotFormat").equalsIgnoreCase("netvis")) {      String[] visargs={"./output/vis/Snapshot"};    }  } else {    System.err.println("Couldn't find " + driversLog);    System.exit(0);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:16.657 -0500",hash_original_method="686D7BF75F67F22DBAC0E1E36B7A58EB",hash_generated_method="212251E1BC3E86E873859FCFE5219FB9") private ArrayList<Cookie> parseCookie(String host,String path,String cookieString){  ArrayList<Cookie> ret=new ArrayList<Cookie>();  int index=0;  int length=cookieString.length();  while (true) {    Cookie cookie=null;    if (index < 0 || index >= length) {      break;    }    if (cookieString.charAt(index) == WHITE_SPACE) {      index++;      continue;    }    int semicolonIndex=cookieString.indexOf(SEMICOLON,index);    int equalIndex=cookieString.indexOf(EQUAL,index);    cookie=new Cookie(host,path);    if ((semicolonIndex != -1 && (semicolonIndex < equalIndex)) || equalIndex == -1) {      if (semicolonIndex == -1) {        semicolonIndex=length;      }      cookie.name=cookieString.substring(index,semicolonIndex);      cookie.value=null;    } else {      cookie.name=cookieString.substring(index,equalIndex);      if ((equalIndex < length - 1) && (cookieString.charAt(equalIndex + 1) == QUOTATION)) {        index=cookieString.indexOf(QUOTATION,equalIndex + 2);        if (index == -1) {          break;        }      }      semicolonIndex=cookieString.indexOf(SEMICOLON,index);      if (semicolonIndex == -1) {        semicolonIndex=length;      }      if (semicolonIndex - equalIndex > MAX_COOKIE_LENGTH) {        cookie.value=cookieString.substring(equalIndex + 1,equalIndex + 1 + MAX_COOKIE_LENGTH);      } else       if (equalIndex + 1 == semicolonIndex || semicolonIndex < equalIndex) {        cookie.value="";      } else {        cookie.value=cookieString.substring(equalIndex + 1,semicolonIndex);      }    }    index=semicolonIndex;    while (true) {      if (index < 0 || index >= length) {        break;      }      if (cookieString.charAt(index) == WHITE_SPACE || cookieString.charAt(index) == SEMICOLON) {        index++;        continue;      }      if (cookieString.charAt(index) == COMMA) {        index++;        break;      }      if (length - index >= SECURE_LENGTH && cookieString.substring(index,index + SECURE_LENGTH).equalsIgnoreCase(SECURE)) {        index+=SECURE_LENGTH;        cookie.secure=true;        if (index == length)         break;        if (cookieString.charAt(index) == EQUAL)         index++;        continue;      }      if (length - index >= HTTP_ONLY_LENGTH && cookieString.substring(index,index + HTTP_ONLY_LENGTH).equalsIgnoreCase(HTTP_ONLY)) {        index+=HTTP_ONLY_LENGTH;        if (index == length)         break;        if (cookieString.charAt(index) == EQUAL)         index++;        continue;      }      equalIndex=cookieString.indexOf(EQUAL,index);      if (equalIndex > 0) {        String name=cookieString.substring(index,equalIndex).toLowerCase();        int valueIndex=equalIndex + 1;        while (valueIndex < length && cookieString.charAt(valueIndex) == WHITE_SPACE) {          valueIndex++;        }        if (name.equals(EXPIRES)) {          int comaIndex=cookieString.indexOf(COMMA,equalIndex);          if ((comaIndex != -1) && (comaIndex - valueIndex <= 10)) {            index=comaIndex + 1;          }        }        semicolonIndex=cookieString.indexOf(SEMICOLON,index);        int commaIndex=cookieString.indexOf(COMMA,index);        if (semicolonIndex == -1 && commaIndex == -1) {          index=length;        } else         if (semicolonIndex == -1) {          index=commaIndex;        } else         if (commaIndex == -1) {          index=semicolonIndex;        } else {          index=Math.min(semicolonIndex,commaIndex);        }        String value=cookieString.substring(valueIndex,index);        if (value.length() > 2 && value.charAt(0) == QUOTATION) {          int endQuote=value.indexOf(QUOTATION,1);          if (endQuote > 0) {            value=value.substring(1,endQuote);          }        }        if (name.equals(EXPIRES)) {          try {            cookie.expires=AndroidHttpClient.parseDate(value);          } catch (          IllegalArgumentException ex) {            Log.e(LOGTAG,"illegal format for expires: " + value);          }        } else         if (name.equals(MAX_AGE)) {          try {            cookie.expires=System.currentTimeMillis() + 1000 * Long.parseLong(value);          } catch (          NumberFormatException ex) {            Log.e(LOGTAG,"illegal format for max-age: " + value);          }        } else         if (name.equals(PATH)) {          if (value.length() > 0) {            cookie.path=value;          }        } else         if (name.equals(DOMAIN)) {          int lastPeriod=value.lastIndexOf(PERIOD);          if (lastPeriod == 0) {            cookie.domain=null;            continue;          }          try {            Integer.parseInt(value.substring(lastPeriod + 1));            if (!value.equals(host)) {              cookie.domain=null;            }            continue;          } catch (          NumberFormatException ex) {          }          value=value.toLowerCase();          if (value.charAt(0) != PERIOD) {            value=PERIOD + value;            lastPeriod++;          }          if (host.endsWith(value.substring(1))) {            int len=value.length();            int hostLen=host.length();            if (hostLen > (len - 1) && host.charAt(hostLen - len) != PERIOD) {              cookie.domain=null;              continue;            }            if ((len == lastPeriod + 3) && (len >= 6 && len <= 8)) {              String s=value.substring(1,lastPeriod);              if (Arrays.binarySearch(BAD_COUNTRY_2LDS,s) >= 0) {                cookie.domain=null;                continue;              }            }            cookie.domain=value;          } else {            cookie.domain=null;          }        }      } else {        index=length;      }    }    if (cookie != null && cookie.domain != null) {      ret.add(cookie);    }  }  return ret;}  }
class C{  public void step(SimState state){}  }
class C{  public URI(String scheme,String host,String path,String fragment) throws URISyntaxException {  this(scheme,null,host,-1,path,null,fragment);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeDouble(get());}  }
class C{  @Deprecated public boolean isStaleCheckingEnabled(){  return this.params.isStaleCheckingEnabled();}  }
class C{  public static TourGuide init(Activity activity){  return new TourGuide(activity);}  }
class C{  protected void serializeCDATASection(CDATASection node) throws SAXException {  if ((fFeatures & WELLFORMED) != 0) {    isCDATASectionWellFormed(node);  }  if ((fFeatures & CDATA) != 0) {    String nodeValue=node.getNodeValue();    int endIndex=nodeValue.indexOf("]]>");    if ((fFeatures & SPLITCDATA) != 0) {      if (endIndex >= 0) {        String relatedData=nodeValue.substring(0,endIndex + 2);        String msg=Utils.messages.createMessage(MsgKey.ER_CDATA_SECTIONS_SPLIT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_WARNING,msg,MsgKey.ER_CDATA_SECTIONS_SPLIT,null,relatedData,null));        }      }    } else {      if (endIndex >= 0) {        String relatedData=nodeValue.substring(0,endIndex + 2);        String msg=Utils.messages.createMessage(MsgKey.ER_CDATA_SECTIONS_SPLIT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_CDATA_SECTIONS_SPLIT));        }        return;      }    }    if (!applyFilter(node,NodeFilter.SHOW_CDATA_SECTION)) {      return;    }    if (fLexicalHandler != null) {      fLexicalHandler.startCDATA();    }    dispatachChars(node);    if (fLexicalHandler != null) {      fLexicalHandler.endCDATA();    }  } else {    dispatachChars(node);  }}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void resume(){synchronized (threadRefs) {    for (    Thread thread : threads) {      thread.resume();    }  }synchronized (groups) {    for (    ThreadGroup group : groups) {      group.resume();    }  }}  }
class C{  public void printHelp(){  System.out.println("This is the help:");  jumpLine();  jumpLine();  System.out.println(header);  System.out.println(help_message);  jumpLine();  System.out.println(help_message2);  jumpLine();  System.out.println(help_message3);  jumpLine();  System.out.println(help_message4);  jumpLine();  System.out.println(Reward);  jumpLine();  System.out.println(footer);}  }
class C{  @Override public int nextDoc() throws IOException {  int doc;  while ((doc=in.nextDoc()) != NO_MORE_DOCS) {    if ((doc % 2) == 1)     return doc;  }  return NO_MORE_DOCS;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void addResults(Map rslts){  for (  Object obj : rslts.entrySet()) {    Entry<String,Integer> ent=(Entry)obj;    this.results.put(ent.getKey(),ent.getValue());  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem())   return;  String s=new String(ch,start,length);  append(m_doc.createTextNode(s));}  }
class C{  public boolean areSubtypes(final Iterable<? extends AnnotatedTypeMirror> subtypes,final Iterable<? extends AnnotatedTypeMirror> supertypes){  final Iterator<? extends AnnotatedTypeMirror> subtypeIterator=subtypes.iterator();  final Iterator<? extends AnnotatedTypeMirror> supertypesIterator=supertypes.iterator();  while (subtypeIterator.hasNext() && supertypesIterator.hasNext()) {    final AnnotatedTypeMirror subtype=subtypeIterator.next();    final AnnotatedTypeMirror supertype=supertypesIterator.next();    if (!isSubtype(subtype,supertype)) {      return false;    }  }  if (subtypeIterator.hasNext() || supertypesIterator.hasNext()) {    ErrorReporter.errorAbort("Unbalanced set of type arguments.\n" + "  subtype=( " + PluginUtil.join(", ",subtypes) + ")\n"+ "  supertype=( "+ PluginUtil.join(", ",supertypes)+ ")");  }  return true;}  }
class C{  public Quaterniond rotationZYX(double angleZ,double angleY,double angleX){  double sx=Math.sin(angleX * 0.5);  double cx=Math.cos(angleX * 0.5);  double sy=Math.sin(angleY * 0.5);  double cy=Math.cos(angleY * 0.5);  double sz=Math.sin(angleZ * 0.5);  double cz=Math.cos(angleZ * 0.5);  double cycz=cy * cz;  double sysz=sy * sz;  double sycz=sy * cz;  double cysz=cy * sz;  w=cx * cycz + sx * sysz;  x=sx * cycz - cx * sysz;  y=cx * sycz + sx * cysz;  z=cx * cysz - sx * sycz;  return this;}  }
class C{  void unit(){  xo=0;  xx=1;  xy=0;  xz=0;  yo=0;  yx=0;  yy=1;  yz=0;  zo=0;  zx=0;  zy=0;  zz=1;}  }
class C{  public static boolean isMailTo(String url){  if (url != null && url.startsWith(MAILTO_SCHEME)) {    return true;  }  return false;}  }
class C{  public void testStringy() throws Exception {  String src="The quick brown fox\u00A0\u00FF" + "\uFFFC\uD7C5\uDC03bloof";  String[] enc=new String[]{"utf-8","us-ascii","iso-8859-1","utf-16be","utf-16le","utf-16"};  for (int i=0; i < enc.length; i++) {    byte[] ba=src.getBytes(enc[i]);    String s1=new String(ba,enc[i]);    ByteArrayInputStream bais=new ByteArrayInputStream(ba);    InputStreamReader r=new InputStreamReader(bais,enc[i]);    try {      char[] ca=new char[600];      int n=r.read(ca,0,600);      String s2=new String(ca,0,n);      assertEquals(s1,s2);    }  finally {      r.close();    }  }}  }
class C{  public SparseFloatArray(){  this(10);}  }
class C{  public int readShort(int index){  return ((this.readByte(index) << 8 | this.readUByte(index + 1)) << 16) >> 16;}  }
class C{  public void testGetters4(){  LayoutBuilder b=builder().setText("This is a longer test").setIncludePad(true).setWidth(50);  FontMetricsInt fmi=b.paint.getFontMetricsInt();  Layout l=b.build();  assertVertMetrics(l,fmi.top - fmi.ascent,fmi.bottom - fmi.descent,fmi.top,fmi.descent,fmi.ascent,fmi.descent,fmi.ascent,fmi.bottom);}  }
class C{  public CCheckBox(String text,Icon icon,boolean selected){  super(text,icon,selected);  init();}  }
class C{  @Override public <U>Eval<U> reduce(final U identity,final BiFunction<U,? super T,U> accumulator,final BinaryOperator<U> combiner){  return Eval.later(null);}  }
class C{  public static boolean hasFlash(Camera mCamera){  if (mCamera == null) {    return false;  }  Camera.Parameters parameters=mCamera.getParameters();  if (parameters.getFlashMode() == null) {    return false;  }  List<String> supportedFlashModes=parameters.getSupportedFlashModes();  if (supportedFlashModes == null || supportedFlashModes.isEmpty() || supportedFlashModes.size() == 1 && supportedFlashModes.get(0).equals(Camera.Parameters.FLASH_MODE_OFF)) {    return false;  }  return true;}  }
class C{  public void echoOutput(boolean echoOutput){  this.echoOutput=echoOutput;}  }
class C{  protected void pause(int H1) throws Exception {  if (stopRequested) {    throw new Exception("Sort Algorithm");  }  parent.pause(H1,parent.h2);}  }
class C{  public static int randomInt(){  return random.nextInt(Integer.MAX_VALUE - 1);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.901 -0400",hash_original_method="F5B14E56E9F55893C6E73E7F84E5B216",hash_generated_method="DDDED9E8EB076EC7E62CE11BE57C9D18") @Override public int read() throws IOException {  int b=readFirstBytes();  return b >= 0 ? b : in.read();}  }
class C{  protected void createNamespace(){  HttpPost post=new HttpPost(url("/namespace"));  post.setHeader(new BasicHeader("Content-Type","application/xml; charset=UTF-8"));  StringBuilder body=new StringBuilder();  body.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>");  body.append("<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">");  body.append("<properties>");  body.append("<entry key=\"com.bigdata.rdf.sail.namespace\">").append(namespace).append("</entry>");  body.append("<entry key=\"com.bigdata.rdf.store.AbstractTripleStore.textIndex\">false</entry>");  body.append("<entry key=\"com.bigdata.rdf.sail.truthMaintenance\">true</entry>");  body.append("<entry key=\"com.bigdata.rdf.store.AbstractTripleStore.quads\">false</entry>");  body.append("<entry key=\"com.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers\">false</entry>");  body.append("<entry key=\"com.bigdata.rdf.store.AbstractTripleStore.axiomsClass\">com.bigdata.rdf.axioms.NoAxioms</entry>");  body.append("</properties>");  post.setEntity(new StringEntity(body.toString(),"UTF-8"));  submit(post,201);}  }
class C{  private void index(Resource resource,ResourceDescriptionsData index){  final URI uri=resource.getURI();  if (isJsFile(uri)) {    IN4JSSourceContainer sourceContainer=n4jsCore.findN4JSSourceContainer(uri).orNull();    if (null == sourceContainer) {      return;    }  }  IResourceServiceProvider serviceProvider=IResourceServiceProvider.Registry.INSTANCE.getResourceServiceProvider(uri);  if (serviceProvider != null) {    IResourceDescription resourceDescription=serviceProvider.getResourceDescriptionManager().getResourceDescription(resource);    if (resourceDescription != null) {      if (createDebugOutput) {        println("Adding resource description for resource '" + uri + "' to index.");      }      index.addDescription(uri,resourceDescription);    }  }}  }
class C{  public Object remove(Object key){  if (key == null) {    return null;  }  purgeBeforeWrite();  return super.remove(key);}  }
class C{  public CRemoteFile(final String pathname,final boolean isDirectory){  super(pathname);  m_pathname=pathname;  m_isDirectory=isDirectory;}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public static Test suite(){  return (new TestSuite(IdRefITCase.class));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProductDownload[").append(get_ID()).append(",M_Product_ID=").append(getM_Product_ID()).append(",").append(getDownloadURL()).append("]");  return sb.toString();}  }
class C{  public SocialShare text(String text){  if (text == null)   throw new IllegalArgumentException("text == null");  this.text=text;  return this;}  }
class C{  public final int _exptype2(int identity){  if (identity < m_blocksize)   return m_exptype_map0[identity]; else   return m_exptype_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  public boolean showDialog(){  setVisible(true);  return continueQueue;}  }
class C{  public static void deleteLeftoverShardDirectory(ESLogger logger,NodeEnvironment env,ShardLock lock,Settings indexSettings) throws IOException {  final String indexUUID=indexSettings.get(IndexMetaData.SETTING_INDEX_UUID,IndexMetaData.INDEX_UUID_NA_VALUE);  final Path[] paths=env.availableShardPaths(lock.getShardId());  for (  Path path : paths) {    ShardStateMetaData load=ShardStateMetaData.FORMAT.loadLatestState(logger,path);    if (load != null) {      if (load.indexUUID.equals(indexUUID) == false && IndexMetaData.INDEX_UUID_NA_VALUE.equals(load.indexUUID) == false) {        logger.warn("{} deleting leftover shard on path: [{}] with a different index UUID",lock.getShardId(),path);        assert Files.isDirectory(path) : path + " is not a directory";        NodeEnvironment.acquireFSLockForPaths(indexSettings,paths);        IOUtils.rm(path);      }    }  }}  }
class C{  @LargeTest public void testSelectCurrentWord() throws Exception {  SpannableString textLower=new SpannableString("first second");  SpannableString textOther=new SpannableString("\u3042\3044\3046");  SpannableString textDash=new SpannableString("non-fiction");  SpannableString textPunctOther=new SpannableString("b&b");  SpannableString textSymbolOther=new SpannableString("Android\u00AE");  verifySelectCurrentWord(textLower,2,5,0,5);  verifySelectCurrentWord(textLower,2,6,0,12);  verifySelectCurrentWord(textOther,1,2,0,5);  verifySelectCurrentWord(textLower,2,2,0,5);  verifySelectCurrentWord(textDash,2,5,0,11);  verifySelectCurrentWord(textPunctOther,1,2,0,3);  verifySelectCurrentWord(textPunctOther,1,3,0,3);  verifySelectCurrentWord(textSymbolOther,2,7,0,7);  verifySelectCurrentWord(textSymbolOther,2,8,0,8);}  }
class C{  void bitNumChanged(Integer newColNum){  if (newColNum < 1 || newColNum > 5 || newColNum == bitNum) {    return;  }  bitNum=newColNum;  if (inEditMode == false) {    updateMatrixMastPanel();  }  validate();  if (getTopLevelAncestor() != null) {    ((jmri.util.JmriJFrame)getTopLevelAncestor()).setSize(((jmri.util.JmriJFrame)getTopLevelAncestor()).getPreferredSize());    ((jmri.util.JmriJFrame)getTopLevelAncestor()).pack();  }  repaint();}  }
class C{  public static Instances mergeAttributes(Instances i,int[] indexes) throws Exception {  StringBuilder name=new StringBuilder();  for (  int index : indexes) {    name.append("_" + i.attribute(index).name());  }  name.deleteCharAt(0);  System.out.println("\nMergeing the attributes into new attribue: " + name.toString() + " ...");  FastVector attValues=new FastVector();  HashSet<String> holder=new HashSet<String>();  for (int j=0; j < i.numInstances(); j++) {    StringBuilder value=new StringBuilder();    for (    int index : indexes)     value.append(" | " + i.instance(j).stringValue(index));    value.delete(0,3);    if (!holder.contains(value.toString())) {      attValues.addElement(value.toString());      holder.add(value.toString());    }  }  Attribute newAttr=new Attribute(name.toString(),attValues);  System.out.println(newAttr);  i.insertAttributeAt(newAttr,i.numAttributes());  for (int j=0; j < i.numInstances(); j++) {    StringBuilder value=new StringBuilder();    for (    int index : indexes)     value.append(" | " + i.instance(j).stringValue(index));    value.delete(0,3);    i.instance(j).setValue(i.numAttributes() - 1,value.toString());  }  return i;}  }
class C{  public boolean handleSyncOffer(String storeName,byte[] key,Iterable<VectorClock> versions) throws SyncException {  SynchronizingStorageEngine store=storeRegistry.get(storeName);  if (store == null)   return true;  List<Versioned<byte[]>> values=store.get(new ByteArray(key));  if (values == null || values.size() == 0)   return true;  for (  VectorClock vc : versions) {    for (    Versioned<byte[]> value : values) {      VectorClock existingVc=(VectorClock)value.getVersion();      if (!vc.compare(existingVc).equals(Occurred.BEFORE))       return true;    }  }  return false;}  }
class C{  private void updateTrackedViewsFastScrollFocusState(){  for (  BaseRecyclerViewFastScrollBar.FastScrollFocusableView v : mTrackedFastScrollViews) {    RecyclerView.ViewHolder viewHolder=mRv.getChildViewHolder((View)v);    int pos=(viewHolder != null) ? viewHolder.getPosition() : -1;    updateViewFastScrollFocusState(v,pos,true);  }}  }
class C{  public void paintRadioButtonMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public Element removeElementFromRegistry(Element element){  removeElementFromRegistry(Integer.toString(element.hashCode()));  return (this);}  }
class C{  public void execute(String[] rawArgs) throws IOException, InterruptedException {  this.execute(rawArgs,true);}  }
class C{  public JBossStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(ServletPropertySet.USERS,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.CONFIGURATION,Boolean.TRUE);  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_AJP_PORT,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_NAMING_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_INVOKER_POOL_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_CLASSLOADING_WEBSERVICE_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_JRMP_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_JMX_PORT,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_JRMP_INVOKER_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_HTTP_PORT,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_OSGI_HTTP_PORT,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_REMOTING_TRANSPORT_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_EJB3_REMOTING_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_TRANSACTION_RECOVERY_MANAGER_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_TRANSACTION_STATUS_MANAGER_PORT,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.TRANSACTION_SUPPORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.ALTERNATIVE_DEPLOYMENT_DIR,Boolean.FALSE);  this.propertySupportMap.put(JBossPropertySet.ALTERNATIVE_MODULES_DIR,Boolean.FALSE);}  }
class C{  public RegexpQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public FrequencyBand(int sampleRate,int start,int end,double amplitude,double ripple){  this((double)start / (double)sampleRate,(double)end / (double)sampleRate,amplitude,ripple);}  }
class C{  protected boolean containsTerminated(){  return registeredSessions.stream().anyMatch(null);}  }
class C{  public Board(int n){  board=new boolean[n][n];  this.n=n;}  }
class C{  public static String stringFor(int k){switch (k) {case cudaMemoryTypeHost:    return "cudaMemoryTypeHost";case cudaMemoryTypeDevice:  return "cudaMemoryTypeDevice";}return "INVALID cudaMemoryType: " + k;}  }
class C{  public static boolean isEmpty(String str){  if (str == null || str.length() == 0 || str.equalsIgnoreCase("null") || str.isEmpty() || str.equals("")) {    return true;  } else {    return false;  }}  }
class C{  public void drawGlyphVector(GlyphVector g,float x,float y){  mGraphics.drawGlyphVector(g,x,y);}  }
class C{  public static JSONArray toJSONArray(JSONTokener x) throws JSONException {  return toJSONArray(rowToJSONArray(x),x);}  }
class C{  private String retrieveAttributeValue(final StartElement element,final QName attributeQName){  return retrieveAttributeValue(element,attributeQName,false,null);}  }
class C{  public void replace(int index,Solution solution){  data.set(index,solution);}  }
class C{  public void testApplyPortOffset(){  AbstractLocalConfiguration configuration=new LocalConfigurationThatSupportsProperty(Arrays.asList(new String[]{GeneralPropertySet.PORT_OFFSET,GeneralPropertySet.RMI_PORT,ServletPropertySet.PORT}));  configuration.setProperty(GeneralPropertySet.PORT_OFFSET,"100");  configuration.setProperty(GeneralPropertySet.RMI_PORT,"1099");  configuration.setProperty(ServletPropertySet.PORT,"8080");  configuration.applyPortOffset();  assertEquals("1199",configuration.getPropertyValue(GeneralPropertySet.RMI_PORT));  assertEquals("8180",configuration.getPropertyValue(ServletPropertySet.PORT));  configuration.applyPortOffset();  assertEquals("1199",configuration.getPropertyValue(GeneralPropertySet.RMI_PORT));  assertEquals("8180",configuration.getPropertyValue(ServletPropertySet.PORT));}  }
class C{  public static <E>Set<E> synchronizedSet(Set<E> set){  if (set == null) {    throw new NullPointerException();  }  return new SynchronizedSet<E>(set);}  }
class C{  @Override public void close(){synchronized (buf) {    if (log.isInfoEnabled())     log.info("Closing temp store");    try {      if (!buf.isOpen())       throw new IllegalStateException();      buf.destroy();      nclose.incrementAndGet();    }  finally {    }  }}  }
class C{  @Override public boolean is(Class<? extends Transform<?,?>> transformer){  return steps.stream().anyMatch(null);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public boolean toStop(){  return toNextState(STOPPED);}  }
class C{  private void addInclude(Node parent,List files) throws JasperException {  if (files != null) {    Iterator iter=files.iterator();    while (iter.hasNext()) {      String file=(String)iter.next();      AttributesImpl attrs=new AttributesImpl();      attrs.addAttribute("","file","file","CDATA",file);      Node includeNode=new Node.IncludeDirective(attrs,reader.mark(),parent);      processIncludeDirective(file,includeNode);    }  }}  }
class C{  public boolean hasExtensions(){  return entry.hasExtensions();}  }
class C{  public double toDouble(){  return mNumerator / (double)mDenominator;}  }
class C{  private Batch batch(long batchStart){  long batchStop=min(batchStart + batchSize,stop + 1);  ImmutableList.Builder<Change> changes=ImmutableList.builder();  for (long id=batchStart; id < batchStop; id++) {    changes.add(new Change(String.format(Locale.ROOT,format,id),-1,null,id));  }  return new Batch(changes.build(),batchStop - batchStart,batchStop);}  }
class C{  @Override public boolean equals(Object that){  try {    if (that == null) {      return false;    }    RuleBasedBreakIterator other=(RuleBasedBreakIterator)that;    if (checksum != other.checksum) {      return false;    }    if (text == null) {      return other.text == null;    } else {      return text.equals(other.text);    }  } catch (  ClassCastException e) {    return false;  }}  }
class C{  public static Fixture parseFrom(String fileName){  return parseFrom(fileName,new YamlParser());}  }
class C{  public void start() throws PayloadException, NetworkException, ContactManagerException {  sendSubscribe();}  }
class C{  public long skipBytes(long n) throws IOException {  long count=0;  long gotsofar=0;  if (inputStream == null) {    reopen();    if (inputStream == null) {      reopen();      throw new IOException("Stream closed, can't be reopened");    }  }  while (count < n) {    gotsofar=inputStream.skip(n - count);    if (gotsofar == 0) {      Debug.error("StreamInputReader can't skip " + n + " bytes as instructed");      break;    }    count+=gotsofar;  }  count((int)count);  return count;}  }
class C{  private void addWindowsPath(int id,String path){  if (path == null || path.equals("")) {    return;  }  _sb.append(id);  _sb.append(" RCDATA BEGIN \"");  _sb.append(path.replaceAll("\\\\","\\\\\\\\").replaceAll("/","\\\\\\\\"));  _sb.append("\\0\" END\n");}  }
class C{  private static double rand(){  return random.nextDouble();}  }
class C{  public static void main(String[] args) throws IOException, GeneralSecurityException {  if (args.length > 1) {    System.err.println("Usage:");    System.err.printf("\tjava %s inputDirectory\n",TextApp.class.getCanonicalName());    System.exit(1);  }  JedisPool pool=Index.getJedisPool();  try {    Index index=new Index(new TokenizerME(Index.getEnglishTokenizerMeModel()),new SnowballStemmer(SnowballStemmer.ALGORITHM.ENGLISH),pool);    TextApp app=new TextApp(TextApp.getVisionService(),index);    if (args.length == 0) {      app.lookupWords();      return;    }    Path inputPath=Paths.get(args[0]);    app.indexDirectory(inputPath);  }  finally {    if (pool != null) {      pool.destroy();    }  }}  }
class C{  private void loadDraftComments(Account.Id author) throws OrmException {  if (draftCommentNotes == null || !author.equals(draftCommentNotes.getAuthor())) {    draftCommentNotes=new DraftCommentNotes(args,change,author,autoRebuild,rebuildResult);    draftCommentNotes.load();  }}  }
class C{  @Override public synchronized void updateBinaryStream(String columnName,java.io.InputStream x,int length) throws SQLException {  updateBinaryStream(findColumn(columnName),x,length);}  }
class C{  @Override public <A>CompletableFuture<A[]> toArray(final IntFunction<A[]> generator){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  protected void prepareSocket(Socket sock,HttpContext context,HttpParams params) throws IOException {  sock.setTcpNoDelay(HttpConnectionParams.getTcpNoDelay(params));  sock.setSoTimeout(HttpConnectionParams.getSoTimeout(params));  int linger=HttpConnectionParams.getLinger(params);  if (linger >= 0) {    sock.setSoLinger(linger > 0,linger);  }}  }
class C{  private static void fetchReferenceList(final IOperandTreeNode node,final INaviInstruction instruction,final List<Pair<INaviInstruction,INaviFunction>> functions){  final List<IReference> references=node.getReferences();  for (  final IReference reference : references) {    if (ReferenceType.isCodeReference(reference.getType())) {      final IAddress target=reference.getTarget();      final INaviFunction function=instruction.getModule().getContent().getFunctionContainer().getFunction(target);      if (function != null) {        functions.add(new Pair<INaviInstruction,INaviFunction>(instruction,function));      }    }  }  for (  final IOperandTreeNode child : node.getChildren()) {    fetchReferenceList(child,instruction,functions);  }}  }
class C{  public void handleLostCopnnections(){}  }
class C{  public FluentJdbcBuilder defaultFetchSize(Integer rows){  checkNotNull(rows,"rows");  checkArgument(rows >= 0,"Fetch size rows must be >= 0");  this.defaultFetchSize=Optional.of(rows);  return this;}  }
class C{  private boolean routeProfilesEqual(List<TransitRouteStop> routeProfile1,List<TransitRouteStop> routeProfile2){  if (routeProfile1.size() != routeProfile2.size())   return false;  for (int i=0; i < routeProfile1.size(); i++) {    if (!(routeProfile1.get(i).getStopFacility().getId().equals(routeProfile2.get(i).getStopFacility().getId())))     break;    if (i == routeProfile1.size() - 1)     return true;  }  return false;}  }
class C{  @Override protected void save(){  if (!this.getWorld().isRemote) {    for (    EnvironmentEvent event : this.environmentEventRegistry.getEvents().values()) {      event.writeToNBT(this.getData());    }    this.getData().setBoolean("eventsDisabled",this.environmentEventRegistry.isDisabled());    NBTTagCompound aspectData=new NBTTagCompound();    this.aspectManager.saveStaticAspects(aspectData);    this.getData().setTag("itemAspects",aspectData);  }}  }
class C{  public EnumState(S id,PseudoState<S,E> pseudoState){  super(id,pseudoState);}  }
class C{  public final boolean isInsideLocalOrAnonymous(){  return isLocal() || isAnonymous() || (outerClass != null && outerClass.isInsideLocalOrAnonymous());}  }
class C{  public static List<Node> searchPath(final Entity sourceEntity,StendhalRPZone zone,final int x,final int y,final Rectangle2D destination,final double maxDistance,final boolean withEntities){  if (zone == null) {    zone=sourceEntity.getZone();  }  final long startTime=System.currentTimeMillis();  final EntityPathfinder pathfinder=new EntityPathfinder(sourceEntity,zone,x,y,destination,maxDistance,withEntities);  final List<Node> resultPath=pathfinder.getPath();  if (logger.isDebugEnabled() && (pathfinder.getStatus() == EntityPathfinder.PATH_NOT_FOUND)) {    logger.debug("Pathfinding aborted: " + zone.getID() + " "+ sourceEntity.getTitle()+ " ("+ x+ ", "+ y+ ") "+ destination+ " Pathfinding time: "+ (System.currentTimeMillis() - startTime));  }  return resultPath;}  }
class C{  public Assignment(String label,String[] params,String right){  super(right);  this.label=label;  this.setParams(params);  if (this.label != null && right != null && this.label.equals(right)) {    setModelValue(true);  }}  }
class C{  private Zone findZoneByNameAndPort(String name,String portWwn,List<Zone> zones){  if (zones != null) {    for (    Zone zone : zones) {      if (zone.getName().equals(name)) {        for (        ZoneMember member : zone.getMembers()) {          if (member.getAddress() != null && member.getAddress().equals(portWwn)) {            _log.debug("Found a matching zone for name {} and port WWN {}",zone.getName(),portWwn);            return zone;          }        }      }    }  }  _log.debug("Could not find a matching zone for name {} and port WWN {}",name,portWwn);  return null;}  }
class C{  protected StunCandidateHarvest createHarvest(HostCandidate hostCandidate){  return new StunCandidateHarvest(this,hostCandidate);}  }
class C{  public void clearRect(int x,int y,int width,int height){  mGraphics.clearRect(x,y,width,height);}  }
class C{  public PointPlacemarkAttributes(PointPlacemarkAttributes attrs){  this.copy(attrs);}  }
class C{  public boolean isApplyBackgroundColor(){  return mApplyBackgroundColor;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  ServletContext context=config.getServletContext();  String descriptions=context.getInitParameter(TILE_SET_DESCRIPTION_ATTRIBUTE);  Logger logger=getLogger();  logger.info("Looking for Tile Set Descriptions at: " + descriptions);  if (descriptions != null) {    try {      URL descriptionFolder=PropUtils.getResourceOrFileOrURL(descriptions);      PropertiesWanderer wanderer=new PropertiesWanderer(new File(descriptionFolder.getFile()));    } catch (    MalformedURLException e) {      logger.warning("unable to open for Tile Set properties file given " + descriptions);    }catch (    NullPointerException npe) {      logger.warning("Can't find directory holding Tile Set properties files: " + descriptions);    }  }}  }
class C{  @Override public String toString(){  String ivString=Base64.encodeToString(iv,BASE64_FLAGS);  String cipherTextString=Base64.encodeToString(cipherText,BASE64_FLAGS);  String macString=Base64.encodeToString(mac,BASE64_FLAGS);  return ivString + ":" + macString+ ":"+ cipherTextString;}  }
class C{  public static boolean isEntityDread(EntityLivingBase par1){  return par1 instanceof IDreadEntity;}  }
class C{  public boolean hasNonAnonymousAuthentication(){  return !serverMechanisms.isEmpty() && (serverMechanisms.size() != 1 || !hasAnonymousAuthentication());}  }
class C{  public static String prepNAStrings(String na){  return na + DataExpression.DELIM_NA_STRING_SEP + "dummy";}  }
class C{  void resume(){synchronized (paused) {    paused.set(false);    paused.notifyAll();  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        addNullToken();        return firstToken;      }case 28:    break;case 4:{    addToken(Token.MARKUP_TAG_DELIMITER);    yybegin(INTAG);  }case 29:break;case 23:{int count=yylength();addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - (count - 2),zzMarkedPos - 1,Token.MARKUP_TAG_NAME);yybegin(INTAG);}case 30:break;case 17:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 31:break;case 10:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.FUNCTION);}case 32:break;case 24:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.COMMENT_MULTILINE);}case 33:break;case 14:{addToken(Token.MARKUP_TAG_DELIMITER);}case 34:break;case 5:{addToken(Token.WHITESPACE);}case 35:break;case 9:{addToken(start,zzStartRead - 1,Token.FUNCTION);return firstToken;}case 36:break;case 20:{start=zzMarkedPos - 2;yybegin(DTD);}case 37:break;case 2:{addToken(Token.IDENTIFIER);}case 38:break;case 27:{addToken(Token.DATA_TYPE);start=zzMarkedPos;yybegin(CDATA);}case 39:break;case 6:{addToken(Token.DATA_TYPE);}case 40:break;case 19:{int count=yylength();addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - (count - 1),zzMarkedPos - 1,Token.MARKUP_TAG_NAME);yybegin(INTAG);}case 41:break;case 26:{start=zzMarkedPos - 4;yybegin(COMMENT);}case 42:break;case 25:{int temp=zzStartRead;yybegin(YYINITIAL);addToken(start,zzStartRead - 1,Token.VARIABLE);addToken(temp,zzMarkedPos - 1,Token.DATA_TYPE);}case 43:break;case 21:{start=zzMarkedPos - 2;yybegin(PI);}case 44:break;case 16:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE);}case 45:break;case 13:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 46:break;case 12:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE);}case 47:break;case 8:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 48:break;case 18:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 49:break;case 22:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.PREPROCESSOR);}case 50:break;case 15:{addToken(Token.OPERATOR);}case 51:break;case 11:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 52:break;case 1:{}case 53:break;case 7:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 54:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case INTAG:{addToken(start,zzStartRead - 1,INTERNAL_INTAG);return firstToken;}case 57:break;case DTD:{addToken(start,zzStartRead - 1,Token.FUNCTION);return firstToken;}case 58:break;case INATTR_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 59:break;case YYINITIAL:{addNullToken();return firstToken;}case 60:break;case COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 61:break;case CDATA:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 62:break;case INATTR_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 63:break;case PI:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 64:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public boolean isRunning(){  return mRunning.get();}  }
class C{  static double[] calculateCoefficients(DesignGrid G,int Nc){  LagrangePolynomial LP=constructInterpolatingPolynomial(G,computeDelta(G));  int log2nfft=6;  int nfft=64;  while (nfft < Nc) {    nfft*=2;    log2nfft++;  }  double[] X=new double[nfft];  double[] x=new double[nfft];  for (int i=0; i <= nfft / 2; i++) {    X[i]=(double)LP.evaluate(Math.cos(2.0 * Math.PI * i / nfft));  }  RDFT dft=new RDFT(log2nfft);  dft.evaluateInverse(X,x);  return x;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("AdvertisementServlet.init");}  }
class C{  public static int toInt(byte[] bytes,int offset){  return toInt(bytes,offset,SIZEOF_INT);}  }
class C{  public Key select(int k){  if (k < 0 || k >= size())   throw new IllegalArgumentException();  Node x=select(root,k);  return x.key;}  }
class C{  public static OutputAnalyzer jps(List<String> vmArgs,List<String> toolArgs) throws Exception {  JDKToolLauncher launcher=JDKToolLauncher.createUsingTestJDK("jps");  if (vmArgs != null) {    for (    String vmArg : vmArgs) {      launcher.addVMArg(vmArg);    }  }  if (toolArgs != null) {    for (    String toolArg : toolArgs) {      launcher.addToolArg(toolArg);    }  }  ProcessBuilder processBuilder=new ProcessBuilder(launcher.getCommand());  System.out.println(Arrays.toString(processBuilder.command().toArray()).replace(",",""));  OutputAnalyzer output=new OutputAnalyzer(processBuilder.start());  System.out.println(output.getOutput());  return output;}  }
class C{  public CacheStatResource(String resourceIdentifier,CacheResource cacheResource){  super(resourceIdentifier);  this.cacheResource=cacheResource;  relativeCacheStats=cacheResource.getCacheStats();}  }
class C{  public SIMD384(){  super();}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getHomeChannelDBDao() : null;}  }
class C{  private Parent loadLayout(String layout) throws IOException {  FXMLLoader loader=new FXMLLoader();  loader.setLocation(getClass().getResource(layout));  Parent nodeLayout=loader.load();  controllers.put(layout,loader.getController());  return nodeLayout;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public Holder(){}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final TimeInstant instant){  serializer.writeInt(label,instant.getRawTime());}  }
class C{  private String trimText(String text){  if (text.length() > BUBBLE_TEXT_LENGTH) {    text=text.substring(0,BUBBLE_TEXT_LENGTH);    int n=text.lastIndexOf(' ');    n=Math.max(n,text.lastIndexOf('-'));    n=Math.max(n,text.lastIndexOf('.'));    n=Math.max(n,text.lastIndexOf(','));    if (n > 0) {      text=text.substring(0,n);    }    text+=" ...";  }  return text;}  }
class C{  protected int convertYToRow(int y0){  return convertLocationToRow(0,y0,false);}  }
class C{  @SuppressForbidden(reason="accesses fully qualified URLs to configure security") static void addClasspathPermissions(Permissions policy) throws IOException {  for (  URL url : JarHell.parseClassPath()) {    Path path;    try {      path=PathUtils.get(url.toURI());    } catch (    URISyntaxException e) {      throw new RuntimeException(e);    }    policy.add(new FilePermission(path.toString(),"read,readlink"));    if (Files.isDirectory(path)) {      policy.add(new FilePermission(path.toString() + path.getFileSystem().getSeparator() + "-","read,readlink"));    }  }}  }
class C{  public <T>Initializable<T> requestInjection(InjectorImpl injector,T instance,Object source,Set<InjectionPoint> injectionPoints){  checkNotNull(source);  if (instance == null || (injectionPoints.isEmpty() && !injector.membersInjectorStore.hasTypeListeners())) {    return Initializables.of(instance);  }  InjectableReference<T> initializable=new InjectableReference<>(injector,instance,source);  pendingInjection.put(instance,initializable);  return initializable;}  }
class C{  public static synchronized boolean isRecordingMacro(){  return recordingMacro;}  }
class C{  public static void addExperimentalFormatWarning(SolrQueryResponse rsp){  rsp.add("WARNING","This response format is experimental.  It is likely to change in the future.");}  }
class C{  private void rollOver(){  for (  Map<Integer,VariableReader> entryCP : variableVersionsPerCP) {    for (    Map.Entry<Integer,VariableReader> entry : entryCP.entrySet()) {      String name=entry.getValue().getVariableMetaData().getVariableName();      long timestamp=timeProvider.getTime();      VersionedValueList<Object> versionsOld=entry.getValue().getVersionsLow();      Object currentValue=versionsOld.getCurrentAndPriorValue().getCurrentVersion().getValue();      VersionedValueList<Object> versionsNew=new VersionedValueList<Object>(name,1,currentValue,timestamp,millisecondLifetimeOldVersions,readWriteLock.readLock(),HIGH_WATERMARK_VERSIONS,false);      entry.getValue().setVersionsHigh(versionsOld);      entry.getValue().setVersionsLow(versionsNew);    }  }}  }
class C{  protected void makeUnitWedge(int subdivisions,List<Geometry> meshes){  if (this.wedgeAngle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  float radius=1.0f;  Geometry dest;  GeometryBuilder gb=this.getGeometryBuilder();  gb.setOrientation(GeometryBuilder.OUTSIDE);  for (int index=0; index < getFaceCount(); index++) {    GeometryBuilder.IndexedTriangleBuffer itb=gb.tessellateWedgeBuffer(index,radius,subdivisions,this.wedgeAngle);    FloatBuffer normalBuffer=Buffers.newDirectFloatBuffer(3 * itb.getVertexCount());    gb.makeIndexedTriangleBufferNormals(itb,normalBuffer);    FloatBuffer textureCoordBuffer=Buffers.newDirectFloatBuffer(2 * itb.getVertexCount());    gb.makeUnitWedgeTextureCoordinates(index,textureCoordBuffer,subdivisions,this.wedgeAngle);    dest=new Geometry();    dest.setElementData(GL.GL_TRIANGLES,itb.getIndexCount(),itb.getIndices());    dest.setVertexData(itb.getVertexCount(),itb.getVertices());    dest.setNormalData(normalBuffer.limit(),normalBuffer);    dest.setTextureCoordData(textureCoordBuffer.limit(),textureCoordBuffer);    meshes.add(index,dest);  }}  }
class C{  @Override public void updateLong(int columnIndex,long x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateLong(" + columnIndex + ", "+ x+ "L);");    }    update(columnIndex,ValueLong.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean areAllSectionsValid(BaseAction action,Resource resource){  boolean problemsEncountered=false;  for (  MetadataSection section : MetadataSection.values()) {    validate(action,resource,section);    if ((action.hasActionErrors() || action.hasFieldErrors()) && !problemsEncountered) {      action.addActionError(action.getText("manage.failed",new String[]{action.getText("submenu." + section.getName())}));      problemsEncountered=true;    }  }  return !problemsEncountered;}  }
class C{  public StaticRequest(int s,Throwable t){  this(s,t,null);}  }
class C{  protected void paintCell(Graphics g,int row,Rectangle rowBounds,ListCellRenderer cellRenderer,ListModel dataModel,ListSelectionModel selModel,int leadIndex){  Object value=dataModel.getElementAt(row);  boolean cellHasFocus=list.hasFocus() && (row == leadIndex);  boolean isSelected=selModel.isSelectedIndex(row);  Component rendererComponent=cellRenderer.getListCellRendererComponent(list,value,row,isSelected,cellHasFocus);  int cx=rowBounds.x;  int cy=rowBounds.y;  int cw=rowBounds.width;  int ch=rowBounds.height;  if (isFileList) {    int w=Math.min(cw,rendererComponent.getPreferredSize().width + 4);    if (!isLeftToRight) {      cx+=(cw - w);    }    cw=w;  }  rendererPane.paintComponent(g,rendererComponent,list,cx,cy,cw,ch,true);}  }
class C{  public ClassNotFoundException(){  super((Throwable)null);}  }
class C{  public int lastIndexIn(char[] chars,int fromIndex){  for (int i=fromIndex; i >= 0; i--) {    if (contains(chars[i]))     return i;  }  return -1;}  }
class C{  public void testCreateIndex() throws IOException {  ChainedDocumentBuilder builder=(ChainedDocumentBuilder)getDocumentBuilder();  IndexWriter iw=LuceneUtils.createIndexWriter(indexPath + "-small",true);  for (  String identifier : testFiles) {    System.out.println("Indexing file " + identifier);    Document doc=builder.createDocument(new FileInputStream(testFilesPath + identifier),identifier);    iw.addDocument(doc);  }  iw.close();}  }
class C{  protected void sendTestMessage(SerialMessage m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,null);  return;}  }
class C{  public boolean isStatic(){  return this.isDeclaredStatic();}  }
class C{  @Override protected void onPreExecute(){  mCurrentDialog=IndeterminateProgressDialog.newInstance(R.string.wait_a_moment,false);  mCurrentDialog.show(getSupportFragmentManager(),WAIT_DIALOG_TAG);}  }
class C{  protected void process(HttpServletResponse response) throws IOException {  response.sendRedirect("./lcm.png");}  }
class C{  @Override protected String doIt() throws Exception {  MMigration migration=new MMigration(getCtx(),0,get_TrxName());  MTable table=MTable.get(getCtx(),tableId);  String whereClause;  List<PO> pos;  if (recordId > 0) {    pos=new ArrayList<PO>(1);    pos.add(table.getPO(recordId,get_TrxName()));  } else {    String where="EntityType = ?";    pos=table.createQuery(where,get_TrxName()).list();  }  for (  PO po : pos) {    POInfo info=POInfo.getPOInfo(getCtx(),tableId,get_TrxName());    MMigrationStep step=new MMigrationStep(migration,po,info,MMigrationStep.ACTION_Insert);  }  return "@OK@";}  }
class C{  public DBConnectionWrapper checkoutConnection(DBInstanceInfo dbinfo,DBCredential cred){synchronized (this) {    for (    DBConnectionWrapper conn : this.connections) {      if (dbinfo.getDbGroupName().equalsIgnoreCase(conn.getDb().getDbGroupName()) && dbinfo.getHostName().equalsIgnoreCase(conn.getDb().getHostName()) && !conn.isInuse()) {        conn.setInuse(true);        return conn;      }    }    if (cred == null)     return null;  }  if (cred != null && cred.getPassword() == null)   throw new RuntimeException("No credential provided fro DB " + dbinfo.getDbGroupName());  try {    return createConnectionInternal(dbinfo,cred);  } catch (  Exception ex) {    if (ex.getCause() != null) {      Throwable cause=ex.getCause();      String msg=cause.getMessage();      if (cause instanceof java.net.UnknownHostException || (cause instanceof java.net.ConnectException && msg != null && msg.indexOf("Connection refused") >= 0)) {        logger.log(Level.SEVERE,"Exception cause when connecting to (" + dbinfo + "): msg, no retry.");        throw new RuntimeException(Constants.CONN_MSG_NORETRY);      } else       logger.info("Ex: " + ex.getCause().getClass().getName() + ", "+ ex.getCause().getMessage());    }    logger.log(Level.SEVERE,"Exception when connecting to (" + dbinfo + ")",ex);    throw new RuntimeException(ex.getMessage());  }}  }
class C{  public final Identifier resolvePackageQualifiedName(Identifier name){  Identifier tail=null;  for (; ; ) {    if (classExists(name)) {      break;    }    if (!name.isQualified()) {      name=(tail == null) ? name : Identifier.lookup(name,tail);      tail=null;      break;    }    Identifier nm=name.getName();    tail=(tail == null) ? nm : Identifier.lookup(nm,tail);    name=name.getQualifier();  }  if (tail != null)   name=Identifier.lookupInner(name,tail);  return name;}  }
class C{  public static boolean saveAsTIFF(File file,ImageVO im,String extension,PerfilVO perfil){  return saveGeneric(file,im,extension,perfil);}  }
class C{  public void testKeyPairGenerator13(){  int[] keys={-1,-250,1,63,-512,-1024};  SecureRandom random=new SecureRandom();  KeyPairGenerator mKPG=new MyKeyPairGenerator2(null);  assertEquals("Algorithm must be null",mKPG.getAlgorithm(),MyKeyPairGenerator2.getResAlgorithm());  assertNull("genKeyPair() must return null",mKPG.genKeyPair());  assertNull("generateKeyPair() mut return null",mKPG.generateKeyPair());  for (int i=0; i < keys.length; i++) {    try {      mKPG.initialize(keys[i]);      fail("InvalidParameterException must be thrown (key: " + Integer.toString(keys[i]) + ")");    } catch (    InvalidParameterException e) {    }    try {      mKPG.initialize(keys[i],random);      fail("InvalidParameterException must be thrown (key: " + Integer.toString(keys[i]) + ")");    } catch (    InvalidParameterException e) {    }  }  try {    mKPG.initialize(64);  } catch (  InvalidParameterException e) {    fail("Unexpected InvalidParameterException was thrown");  }  try {    mKPG.initialize(64,null);  } catch (  InvalidParameterException e) {    fail("Unexpected InvalidParameterException was thrown");  }  try {    mKPG.initialize(null,random);  } catch (  UnsupportedOperationException e) {  }catch (  InvalidAlgorithmParameterException e) {    fail("Unexpected InvalidAlgorithmParameterException was thrown");  }}  }
class C{  public void addAnewarray(CtClass clazz,int length){  addIconst(length);  addOpcode(ANEWARRAY);  addIndex(constPool.addClassInfo(clazz));}  }
class C{  public boolean isExternalZoomEnabled(){  return mExternalZoomEnabled;}  }
class C{  private void animateView(final int position,@NonNull final View view,@NonNull final Animator[] animators){  if (mAnimationStartMillis == -1) {    mAnimationStartMillis=SystemClock.uptimeMillis();  }  ViewCompat.setAlpha(view,0);  AnimatorSet set=new AnimatorSet();  set.playTogether(animators);  set.setStartDelay(calculateAnimationDelay(position));  set.setDuration(mAnimationDurationMillis);  set.start();  mAnimators.put(view.hashCode(),set);}  }
class C{  public void put(String fieldName,byte[] v){  if (v == null) {    _put(fieldName,nullNode());  } else {    _put(fieldName,binaryNode(v));  }}  }
class C{  @action(name="inform",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with an 'inform' performative message.")) public Object primInform(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,INFORM,getContentArg(scope));}  }
class C{  public void addSlots(InventoryPlayer aPlayerInventory){}  }
class C{  private void appendPointText(Coordinate coordinate,int level,Writer writer,PrecisionModel precisionModel) throws IOException {  if (coordinate == null) {    writer.write("EMPTY");  } else {    writer.write("(");    appendCoordinate(coordinate,writer);    writer.write(")");  }}  }
class C{  protected AnimatableStringValue(AnimationTarget target){  super(target);}  }
class C{  @RequestMapping(method=GET,value="{name}/create") @ResponseBody public Object createStorage(@PathVariable String name) throws BusinessException {  if (StringUtils.isEmpty(name)) {    throw new BusinessException("Create a new storage via storage REST service.",StorageErrorCodeEnum.STORAGE_NAME_IS_NOT_PROVIDED);  }  StorageData storageData=new StorageData();  storageData.setName(name);  storageData=storageService.createAndOpenStorage(storageData);  Map<String,Object> resultMap=new HashMap<>();  resultMap.put("message","Storage successfully created.");  resultMap.put("storage",storageData);  return resultMap;}  }
class C{  public static ClassLoader findWorkableClassloader(Atom clazz){  for (  ClassLoader clx : TypeReference.getCLDict()) {    TypeReference tRef=TypeReference.findOrCreate(clx,clazz);    RVMClass cls=(RVMClass)tRef.peekType();    if (cls != null)     return clx; else {      try {        cls=tRef.resolve().asClass();        cls.resolve();        cls.instantiate();        cls.initialize();        return clx;      } catch (      NoClassDefFoundError cnf) {      }    }  }  return null;}  }
class C{  protected void fill() throws IOException {  checkClosed();  if (nativeEndBufSize > 0) {    ZipFile.RAFStream is=(ZipFile.RAFStream)in;    len=is.fill(inf,nativeEndBufSize);  } else {    if ((len=in.read(buf)) > 0) {      inf.setInput(buf,0,len);    }  }}  }
class C{  public static int[] betterCountingSort(int[] toSort){  return null;}  }
class C{  private void adjustFocus(boolean inWindow){  RTextArea textArea=getTextArea();  if ((textArea != null) && textArea.isEnabled() && textArea.isRequestFocusEnabled()) {    if (inWindow)     textArea.requestFocusInWindow(); else     textArea.requestFocus();  }}  }
class C{  public JonasExistingLocalConfigurationCapability(){  super();  this.propertySupportMap.remove(GeneralPropertySet.PROTOCOL);  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_SERVER_NAME,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_DOMAIN_NAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);}  }
class C{  private void computeContours() throws InterruptedException {  int ncont=cAttr.length;  int nx=0, ny=0;  if (xArray != null) {    ny=xArray.length;    nx=xArray[0].length;  } else {    nx=xArr1D.length;    ny=yArr1D.length;  }  pathbufxt=new double[kBufSize];  pathbufyt=new double[kBufSize];  pathbufia=new int[kBufSize * 3];  lnstrt=1;  ignext=0;  for (icont=0; icont < ncont; ++icont) {    if (isCanceled)     throw new InterruptedException(kCancelMsg);    cont=cAttr[icont].getLevel();    iss=1;    iee=nx;    jss=1;    jee=ny;    boolean subDivFlg=false;    do {      FlagContourPassings();      boolean L10flg=false;      do {        if (!L10flg) {          ima=1;          ibeg=iss - 1;          jbeg=jss;        }        imaLoop:         do {          if (!L10flg) {            boolean imb=false;            boolean doneFlg=false;            do {switch (ima) {case 1:                ++ibeg;              if (ibeg == iee)               ima=2;            break;case 2:          ++jbeg;        if (jbeg == jee)         ima=3;      break;case 3:    --ibeg;  if (ibeg == iss)   ima=4;break;case 4:--jbeg;if (jbeg == jss) ima=5;break;case 5:continue imaLoop;}if (funcArray[jbeg - 1][ibeg - 1] <= cont) {imb=true;doneFlg=false;} else if (imb == true) doneFlg=true;} while (!doneFlg);gi=ibeg;gj=jbeg;fij=funcArray[jbeg - 1][ibeg - 1];switch (ima) {case 1:Routine_L21();break;case 2:if (gj != jss) {if (!Routine_L31()) Routine_L21();} else Routine_L21();break;case 3:if (gi != iee) {if (!Routine_L41()) Routine_L21();} else {if (!Routine_L31()) Routine_L21();}break;case 4:if (gj != jee) {if (!Routine_L51()) Routine_L21();} else {if (!Routine_L41()) Routine_L21();}break;case 5:if (!Routine_L51()) Routine_L21();break;}}L10flg=false;lnstrt=1;ignext=0;accumContour(np,icont,pathbufxt,pathbufyt,cAttr[icont]);} while (ima != 5);if (iae != 0) {int ntmp3=iae;for (int iia=1; iia <= ntmp3; ++iia) {if (pathbufia[iia - 1] != 0) {gi=pathbufia[iia - 1] / 1000;gj=pathbufia[iia - 1] - gi * 1000;fij=funcArray[gj - 1][gi - 1];pathbufia[iia - 1]=0;Routine_L21();L10flg=true;break;}}}} while (L10flg);subDivFlg=false;if (iee == nx) {if (jee != ny) {jss=jee;jee=ny;subDivFlg=true;}} else {iss=iee;iee=nx;subDivFlg=true;}} while (subDivFlg);fracComplete=(float)(icont + 1) / (float)(ncont);}pathbufxt=null;pathbufyt=null;pathbufia=null;}  }
class C{  public void testDeadlocksMkdirs() throws Exception {  checkDeadlocksRepeat(5,2,2,2,0,0,0,MKDIRS_CNT,0);}  }
class C{  public void testBug72712() throws Exception {  if (!((MySQLConnection)this.conn).getServerVariable("character_set_server").equals("latin1")) {    return;  }  Properties p=new Properties();  p.setProperty("characterEncoding","cp1252");  p.setProperty("characterSetResults","cp1252");  p.setProperty("statementInterceptors",Bug72712StatementInterceptor.class.getName());  getConnectionWithProps(p);}  }
class C{  public boolean isFromSource(int source){  return (getSource() & source) == source;}  }
class C{  private boolean updateTextColors(final int[] stateSet){  final int newColor=mTextColors.getColorForState(stateSet,Color.WHITE);  if (mTextPaint.getColor() != newColor) {    mTextPaint.setColor(newColor);    return true;  }  return false;}  }
class C{  public boolean isDeclaredStatic(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.STATIC);}  }
class C{  public void test(String problem,String algorithm1,Properties properties1,String algorithm2,Properties properties2,boolean allowBetterPerformance,AlgorithmFactory factory){  Analyzer analyzer=new Analyzer().withProblem(problem).includeAllMetrics().showAggregate().showStatisticalSignificance();  Executor executor=new Executor().withProblem(problem).usingAlgorithmFactory(factory).distributeOnAllCores();  analyzer.addAll("A",executor.withAlgorithm(algorithm1).withProperties(properties1).withMaxEvaluations(10000).runSeeds(10));  analyzer.addAll("B",executor.withAlgorithm(algorithm2).withProperties(properties2).withMaxEvaluations(10000).runSeeds(10));  Analyzer.AnalyzerResults analyzerResults=analyzer.getAnalysis();  Analyzer.AlgorithmResult algorithmResult=analyzerResults.get("A");  int indifferences=0;  for (  String indicator : algorithmResult.getIndicators()) {    indifferences+=algorithmResult.get(indicator).getIndifferentAlgorithms().size();  }  if (indifferences < 5) {    if (allowBetterPerformance) {      int outperformance=0;      for (      String indicator : algorithmResult.getIndicators()) {        double value1=analyzerResults.get("A").get(indicator).getMedian();        double value2=analyzerResults.get("B").get(indicator).getMedian();        if (indicator.equals("Spacing") || indicator.equals("Hypervolume") || indicator.equals("Contribution")|| indicator.equals("R1Indicator")) {          if (value1 >= value2) {            outperformance++;          }        } else {          if (value1 <= value2) {            outperformance++;          }        }      }      if (outperformance < 5) {        Assert.fail("algorithms show different performance");      }    } else {      Assert.fail("algorithms show statistical difference");    }  }}  }
class C{  public void readBytes(byte[] bytes) throws IOException {  readBytes(bytes,0,bytes.length);}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  Averagable expected=(Averagable)expectedObj;  Averagable actual=(Averagable)actualObj;  assertDouble(message + " (average is not equal)",expected.getAverage(),actual.getAverage());  assertDouble(message + " (makro average is not equal)",expected.getMakroAverage(),actual.getMakroAverage());  assertDouble(message + " (mikro average is not equal)",expected.getMikroAverage(),actual.getMikroAverage());  assertDouble(message + " (average count is not equal)",expected.getAverageCount(),actual.getAverageCount());  assertDouble(message + " (makro standard deviation is not equal)",expected.getMakroStandardDeviation(),actual.getMakroStandardDeviation());  assertDouble(message + " (mikro standard deviation is not equal)",expected.getMikroStandardDeviation(),actual.getMikroStandardDeviation());  assertDouble(message + " (standard deviation is not equal)",expected.getStandardDeviation(),actual.getStandardDeviation());  assertDouble(message + " (makro variance is not equal)",expected.getMakroVariance(),actual.getMakroVariance());  assertDouble(message + " (mikro variance is not equal)",expected.getMikroVariance(),actual.getMikroVariance());  assertDouble(message + " (variance is not equal)",expected.getVariance(),actual.getVariance());}  }
class C{  @Override public void undeploy(Deployable deployable){  if (deployable.getType() != DeployableType.WAR) {    super.undeploy(deployable);    return;  }  WAR war=(WAR)deployable;  String fileName=getFileHandler().append(getDeployableDir(deployable),war.getContext() + ".war");  if (getFileHandler().exists(fileName)) {    getLogger().info("Undeploying [" + fileName + "]...",this.getClass().getName());    getFileHandler().delete(fileName);  }}  }
class C{  @LargeTest public void testPropertiesMP3AudioTrack() throws Exception {  final String audioFilename=INPUT_FILE_PATH + "MP3_48KHz_128kbps_s_1_17.mp3";  final int duration=77640;  final int audioBitrate=128000;  final int audioCodecType=MediaProperties.ACODEC_MP3;  final int audioSamplingFrequency=48000;  final int audioChannel=2;  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"a1",audioFilename);  validateAudioProperties(audioCodecType,duration,audioSamplingFrequency,audioChannel,audioBitrate,audioTrack);}  }
class C{  private boolean checkKey(){  if (this.flowLevel != 0) {    return true;  } else {    return Constant.NULL_BL_T_LINEBR.has(reader.peek(1));  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xF93C4669,version=271) public int sceUsbCamAutoImageReverseSW(boolean on){  autoImageReverseSW=on;  return 0;}  }
class C{  public boolean isAddColumnSupported(){  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.NAMESPACE___NAMESPACE_1:    setNamespace_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public DataSource createXtremIOClusterInitiatorGroupFolderNameDataSource(String clusterName,StorageSystem storageSystem){  Cluster cluster=new Cluster();  if (!Strings.isNullOrEmpty(clusterName)) {    cluster.setLabel(clusterName);  }  return createDataSource(CustomConfigConstants.XTREMIO_CLUSTER_INITIATOR_GROUP_FOLDER_NAME,new DataObject[]{cluster,storageSystem});}  }
class C{  public TableIterableBuilder withLocalUserTablesOnly(){  setIncludeNormalTables(true);  setIncludeSystemTables(false);  return setIncludeLinkedTables(false);}  }
class C{  public static void debug(final Throwable t){  if (JQuantLib.logger != null) {    JQuantLib.logger.debug(t.getMessage(),t);  } else {    System.err.printf("DEBUG: %s\n",t.getMessage());    System.err.println(t.getMessage());    t.printStackTrace(System.err);  }}  }
class C{  public static SourceLineAnnotation fromVisitedInstruction(ClassContext classContext,Method method,InstructionHandle handle){  return fromVisitedInstruction(classContext,method,handle.getPosition());}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.745 -0500",hash_original_method="A6A3EB653943D50370F97C74C514666D",hash_generated_method="5A7DA20B7A8733A9B9E3DB2FF5A670B8") public SparseBooleanArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new boolean[initialCapacity];  mSize=0;}  }
class C{  protected void createChildren(SourcePrinter out,WidgetCreatorContext context) throws CruxGeneratorException {  boolean useLazyLoadingStrategy=context.readBooleanWidgetProperty("useLazyLoadingStrategy",false);  if (useLazyLoadingStrategy) {    createChildrenLazily(out,context);  } else {    createChildrenEagerly(out,context);  }}  }
class C{  public void removeMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener){synchronized (changeListenerList) {    changeListenerList.remove(listener);  }}  }
class C{  protected String createSearchFilter(String defaultFilter,String searchFilter,String searchString){  if (searchString == null || searchString.isEmpty()) {    return defaultFilter;  } else {    return String.format(searchFilter,LdapFilterString.encode(searchString));  }}  }
class C{  private boolean isBlocked(World worldIn,BlockPos pos){  return this.isBelowSolidBlock(worldIn,pos) || this.isOcelotSittingOnChest(worldIn,pos);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void selectAllAccessibleSelection(){synchronized (List.this) {    for (int i=List.this.getItemCount() - 1; i >= 0; i--) {      List.this.select(i);    }  }}  }
class C{  private JavaScriptDefinitions(){}  }
class C{  public void delete(Settings settings){  mDaoSession.delete(settings);}  }
class C{  public static void saveEventValues(final CConnection connection,final TraceList trace) throws CouldntSaveDataException {  Preconditions.checkNotNull(connection,"IE02412: connection argument can not be null");  Preconditions.checkNotNull(trace,"IE02413: trace argument can not be null");  final String query="INSERT INTO " + CTableNames.TRACE_EVENT_VALUES_TABLE + "(trace_id, position, register_name, register_value, memory_value) VALUES "+ "(?, ?, ?, ?, ?)";  try {    final PreparedStatement preparedStatement=connection.getConnection().prepareStatement(query);    int position=0;    for (    final ITraceEvent traceEvent : trace) {      for (      final TraceRegister register : traceEvent.getRegisterValues()) {        preparedStatement.setInt(1,trace.getId());        preparedStatement.setInt(2,position);        preparedStatement.setString(3,register.getName());        preparedStatement.setLong(4,register.getValue().toLong());        preparedStatement.setBytes(5,register.getMemory());        preparedStatement.addBatch();      }      ++position;    }    preparedStatement.executeBatch();    preparedStatement.close();  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  void revisitNode(final Node n,final DijkstraNodeData data,final PseudoRemovePriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink){  pendingNodes.remove(n);  data.visit(outLink,cost,time,getIterationId());  pendingNodes.add(n,getPriority(data));}  }
class C{  protected synchronized void submitTask(SpiderTask task){  if (isStopped()) {    log.debug("Submitting task skipped (" + task + ") as the Spider process is stopped.");    return;  }  if (isTerminated()) {    log.debug("Submitting task skipped (" + task + ") as the Spider process is terminated.");    return;  }  this.tasksTotalCount++;  try {    this.threadPool.execute(task);  } catch (  RejectedExecutionException e) {    if (log.isDebugEnabled()) {      log.debug("Submitted task was rejected (" + task + "), spider state: [stopped="+ isStopped()+ ", terminated="+ isTerminated()+ "].");    }  }}  }
class C{  private static String removeUnuseful(String variable){  return variable.substring(1,variable.length() - 1);}  }
class C{  public static void register(ResourceResolverSpi resourceResolverSpi,boolean start){  JavaUtils.checkRegisterPermission();synchronized (resolverList) {    if (start) {      resolverList.add(0,new ResourceResolver(resourceResolverSpi));    } else {      resolverList.add(new ResourceResolver(resourceResolverSpi));    }  }  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Registered resolver: " + resourceResolverSpi.toString());  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  throw new InvalidObjectException("can't deserialize enum");}  }
class C{  public static DLSN deserialize(String dlsn){  byte[] data=Base64.decodeBase64(dlsn);  return deserializeBytes(data);}  }
class C{  public boolean isFileTransferAlreadyOngoing(String fileTransferId){  return getFileSharingSession(fileTransferId) != null;}  }
class C{  public static double[][] computeWeightMatrix(int bpp){  final int dim=bpp * bpp * bpp;  final double[][] m=new double[dim][dim];  final double max=3. * (bpp - 1.);  for (int x=0; x < dim; x++) {    final int rx=(x / bpp) / bpp;    final int gx=(x / bpp) % bpp;    final int bx=x % bpp;    for (int y=x; y < dim; y++) {      final int ry=(y / bpp) / bpp;      final int gy=(y / bpp) % bpp;      final int by=y % bpp;      final double dr=Math.abs(rx - ry);      final double dg=Math.abs(gx - gy);      final double db=Math.abs(bx - by);      final double val=1 - (dr + dg + db) / max;      m[x][y]=m[y][x]=val;    }  }  return m;}  }
class C{  public void processRequest(SIPRequest transactionRequest,MessageChannel sourceChannel){  boolean toTu=false;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("processRequest: " + transactionRequest.getFirstLine());    sipStack.getStackLogger().logDebug("tx state = " + this.getRealState());  }  try {    if (getRealState() == null) {      setOriginalRequest(transactionRequest);      this.setState(TransactionState.TRYING);      toTu=true;      this.setPassToListener();      if (isInviteTransaction() && this.isMapped) {        sendMessage(transactionRequest.createResponse(100,"Trying"));      }    } else     if (isInviteTransaction() && TransactionState.COMPLETED == getRealState() && transactionRequest.getMethod().equals(Request.ACK)) {      this.setState(TransactionState.CONFIRMED);      disableRetransmissionTimer();      if (!isReliable()) {        enableTimeoutTimer(TIMER_I);      } else {        this.setState(TransactionState.TERMINATED);      }      if (sipStack.isNon2XXAckPassedToListener()) {        requestOf.processRequest(transactionRequest,this);      } else {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("ACK received for server Tx " + this.getTransactionId() + " not delivering to application!");        }        this.semRelease();      }      return;    } else     if (transactionRequest.getMethod().equals(getOriginalRequest().getMethod())) {      if (TransactionState.PROCEEDING == getRealState() || TransactionState.COMPLETED == getRealState()) {        this.semRelease();        if (lastResponse != null) {          super.sendMessage(lastResponse);        }      } else       if (transactionRequest.getMethod().equals(Request.ACK)) {        if (requestOf != null)         requestOf.processRequest(transactionRequest,this); else         this.semRelease();      }      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("completed processing retransmitted request : " + transactionRequest.getFirstLine() + this+ " txState = "+ this.getState()+ " lastResponse = "+ this.getLastResponse());      return;    }    if (TransactionState.COMPLETED != getRealState() && TransactionState.TERMINATED != getRealState() && requestOf != null) {      if (getOriginalRequest().getMethod().equals(transactionRequest.getMethod())) {        if (toTu) {          requestOf.processRequest(transactionRequest,this);        } else         this.semRelease();      } else {        if (requestOf != null)         requestOf.processRequest(transactionRequest,this); else         this.semRelease();      }    } else {      if (((SIPTransactionStack)getSIPStack()).isDialogCreated(getOriginalRequest().getMethod()) && getRealState() == TransactionState.TERMINATED && transactionRequest.getMethod().equals(Request.ACK) && requestOf != null) {        SIPDialog thisDialog=(SIPDialog)this.dialog;        if (thisDialog == null || !thisDialog.ackProcessed) {          if (thisDialog != null) {            thisDialog.ackReceived(transactionRequest);            thisDialog.ackProcessed=true;          }          requestOf.processRequest(transactionRequest,this);        } else {          this.semRelease();        }      } else       if (transactionRequest.getMethod().equals(Request.CANCEL)) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logDebug("Too late to cancel Transaction");        this.semRelease();        try {          this.sendMessage(transactionRequest.createResponse(Response.OK));        } catch (        IOException ex) {        }      }      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dropping request " + getRealState());    }  } catch (  IOException e) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("IOException ",e);    this.semRelease();    this.raiseIOExceptionEvent();  }}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Class_info cu=(CONSTANT_Class_info)cp;  return ((CONSTANT_Utf8_info)(constant_pool[name_index])).compareTo(cp_constant_pool[cu.name_index]);}  }
class C{  void stopFading(){  mHandler.removeMessages(MSG_FADE);}  }
class C{  protected void parseList(ArrayList<String> list,String text){  list.clear();  StringTokenizer st=new StringTokenizer(text,"\n\r");  while (st.hasMoreElements()) {    String line=(String)st.nextElement();    list.add(line.trim());  }}  }
class C{  public void treeNodesChanged(TreeModelEvent e){  TreePath path=e.getTreePath();  updateSubTreeGreyness(path);  updateAncestorsGreyness(path);}  }
class C{  public static <T>boolean isEmpty(T[] array){  return (array == null || array.length == 0);}  }
class C{  public Point(){  this(0,0);}  }
class C{  void restoreMenu(){  menuBar.installMenuBar();}  }
class C{  public void executeAsync(SuperUserCommandCallback callback){  mCallback=callback;  if (mThread != null)   return;  mThread=new SuperUserCommandThread();  mThread.start();}  }
class C{  private static void sendPackets(PacketStreamer.Client client,short numPackets,OFMessageType ofType,boolean sync) throws TException {  while (numPackets-- > 0) {    Message msg=new Message();    Packet packet=new Packet();    List<String> sids=new ArrayList<String>();    sids.add("session1");    sids.add("session2");    msg.setSessionIDs(sids);    packet.setMessageType(ofType);    long sw_dpid=numPackets / 40 + 1;    packet.setSwPortTuple(new SwitchPortTuple(sw_dpid,(short)(numPackets - (sw_dpid - 1) * 40)));    String strData="New data, sequence " + numPackets;    packet.setData(strData.getBytes());    msg.setPacket(packet);    try {      if (sync) {        client.pushMessageSync(msg);        log.debug("Send packet sync: " + msg.toString());      } else {        client.pushMessageAsync(msg);        log.debug("Send packet sync: " + msg.toString());      }    } catch (    TTransportException e) {      log.error(e.toString());    }    try {      Thread.sleep(100);    } catch (    Exception e) {    }  }}  }
class C{  public boolean isLessThenOrEqualTo(Quantity quantity){  assertDefined();  Integer thisValue=notNull(this);  Integer parameter=notNull(quantity);  return (thisValue.compareTo(parameter) <= 0);}  }
class C{  protected boolean isTerminal(Word w){  return w.form.equals("Esq") || w.form.equals("Jr") || w.form.equals("Sr")|| w.form.equals("M.D")|| w.form.equals("Ph.D");}  }
class C{  public static String randomNCNameUUID(){  return "_" + UUID.randomUUID();}  }
class C{  public void loadJarFile(String name){  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    fileText.setText("");    while ((entry=zin.getNextJarEntry()) != null) {      if (entry.getName().equals(name)) {        BufferedReader in=new BufferedReader(new InputStreamReader(zin));        String line;        while ((line=in.readLine()) != null) {          fileText.append(line);          fileText.append("\n");        }      }      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private boolean removeColorPanel(){  if (colorOverlay != null && colorOverlay.isShowing()) {    colorOverlay.dispose();    return true;  }  return false;}  }
