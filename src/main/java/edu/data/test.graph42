class C{  public void updateComponents(@Nullable List<NlComponent> selectedComponents){  if (selectedComponents != null && !selectedComponents.isEmpty()) {    myComponent=selectedComponents.get(0);  } else   if (myComponent != null) {    myComponent=myComponent.getRoot();  } else   if (myDesignSurface != null) {    final ScreenView currentScreenView=myDesignSurface.getCurrentScreenView();    if (currentScreenView != null) {      final List<NlComponent> components=currentScreenView.getModel().getComponents();      myComponent=!components.isEmpty() ? components.get(0) : null;    }  }  myMiniMap.repaint();}  }
class C{  public ArrayAnimator(String group,String field){  super(group);  m_field=field;  m_start=PrefuseLib.getStartField(field);  m_end=PrefuseLib.getEndField(field);}  }
class C{  public final void log(){  if (this.values != null) {    for (    FilteredDataTagValue tagValue : values) {      tagValue.log();    }  }}  }
class C{  public Builder materialDesignInDisabledSteps(boolean materialDesignInDisabledSteps){  this.materialDesignInDisabledSteps=materialDesignInDisabledSteps;  return this;}  }
class C{  public TaggedValueIterator(final String aLine,final boolean attemptFirstWord,final String... tags){  this.aLine=aLine;  this.attemptFirstWord=attemptFirstWord;  this.tags=tags;  tagPos=0;  nextResult=getNextResult();  if (attemptFirstWord) {    int a=0;    while (a < aLine.length()) {      if (aLine.charAt(a) == '>' || aLine.charAt(a) == '@' || Character.isWhitespace(aLine.charAt(a)))       a++; else       break;    }    int b=a + 1;    while (b < aLine.length()) {      if (Character.isLetterOrDigit(aLine.charAt(b)) || aLine.charAt(b) == '_')       b++; else       break;    }    if (b - a > 4) {      nextResult=aLine.substring(a,b);    }    tagPos=b;  }}  }
class C{  private static ConstraintWidget nearestHorizontal(ConstraintWidget nextTo,ArrayList<ConstraintWidget> list){  int min=Integer.MAX_VALUE;  ConstraintWidget ret=null;  int nextToLeft=nextTo.getX();  int nextToRight=nextToLeft + nextTo.getWidth();  for (  ConstraintWidget widget : list) {    if (widget == nextTo) {      continue;    }    int left=widget.getX();    int right=left + widget.getWidth();    int dist=Math.abs(left - nextToLeft);    dist=Math.min(dist,Math.abs(left - nextToRight));    dist=Math.min(dist,Math.abs(right - nextToRight));    dist=Math.min(dist,Math.abs(right - nextToLeft));    if (dist < min) {      min=dist;      ret=widget;    }  }  return ret;}  }
class C{  public summarySingleFileEvaluator(String sDocumentModelClassName,String sComparatorClassName,int iMinNGramRank,int iMaxNGramRank,int iNGramDist){  DocumentModelClassName=sDocumentModelClassName;  ComparatorClassName=sComparatorClassName;  MinNGramRank=iMinNGramRank;  MaxNGramRank=iMaxNGramRank;  NGramDist=iNGramDist;}  }
class C{  public boolean isReadOnly(){  return m_readOnly;}  }
class C{  protected MarketGetQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PET_ABANDON_PET_COMPLETE(String value0){  return new SM_SYSTEM_MESSAGE(1400644,value0);}  }
class C{  public BindingConfig(@LayoutRes int layoutResource,int viewModelVariableName){  this.layoutResource=layoutResource;  this.viewModelVariableName=viewModelVariableName;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_END_A_TO_B(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200918,skillcaster,skillname);}  }
class C{  public static void checkNotNull(Object o,Localizable pattern,Object... args) throws NullArgumentException {  if (o == null) {    throw new NullArgumentException(pattern,args);  }}  }
class C{  public boolean supportsSaveAs(){  return false;}  }
class C{  public WidgetsGetPagesQuery order(String value){  return unsafeParam("order",value);}  }
class C{  public void put(String key,InputStream stream,String name,String contentType){  if (key != null && stream != null) {    streamParams.put(key,new StreamWrapper(stream,name,contentType));  }}  }
class C{  public void consistencyCheckForTests(){  RLOCK.lock();  try {    for (    Map.Entry<String,TaskID> entry : nameToId.entrySet()) {      if (!idToTask.containsKey(entry.getValue())) {        throw new IllegalStateException(String.format("idToTask is missing nameToId entry: %s",entry));      }    }    for (    Map.Entry<TaskID,TaskInfo> entry : idToTask.entrySet()) {      if (!nameToId.containsValue(entry.getKey())) {        throw new IllegalStateException(String.format("nameToId is missing idToTask entry: %s",entry));      }    }    for (    Map.Entry<TaskID,TaskStatus> entry : idToStatus.entrySet()) {      if (!nameToId.containsValue(entry.getKey())) {        throw new IllegalStateException(String.format("nameToId is missing idToStatus entry: %s",entry));      }    }    for (    Map.Entry<TaskID,TaskStatus> entry : idToStatus.entrySet()) {      if (!idToTask.containsKey(entry.getKey())) {        throw new IllegalStateException(String.format("nameToId is missing idToStatus entry: %s",entry));      }    }    Optional<FrameworkID> storeFrameworkId=store.fetchFrameworkId();    if (!storeFrameworkId.equals(frameworkId)) {      throw new IllegalStateException(String.format("Cache has frameworkId[%s] while storage has frameworkId[%s]",frameworkId,storeFrameworkId));    }    Set<String> storeNames=new HashSet<>(store.fetchTaskNames());    if (!storeNames.equals(nameToId.keySet())) {      throw new IllegalStateException(String.format("Cache has taskNames[%s] while storage has taskNames[%s]",nameToId.keySet(),storeNames));    }    Map<TaskID,TaskInfo> storeTasks=new HashMap<>();    for (    String taskName : storeNames) {      TaskInfo task=store.fetchTask(taskName).get();      storeTasks.put(task.getTaskId(),task);    }    if (!storeTasks.equals(idToTask)) {      throw new IllegalStateException(String.format("Cache has taskInfos[%s] while storage has taskInfos[%s]",idToTask,storeTasks));    }    Map<TaskID,TaskStatus> storeStatuses=new HashMap<>();    for (    String taskName : storeNames) {      Optional<TaskStatus> status=store.fetchStatus(taskName);      if (status.isPresent()) {        storeStatuses.put(status.get().getTaskId(),status.get());      }    }    if (!storeStatuses.equals(idToStatus)) {      throw new IllegalStateException(String.format("Cache has taskStatuses[%s] while storage has taskStatuses[%s]",idToStatus,storeStatuses));    }    Map<String,byte[]> storeProperties=new HashMap<>();    for (    String propertyKey : store.fetchPropertyKeys()) {      storeProperties.put(propertyKey,store.fetchProperty(propertyKey));    }    if (!storeProperties.keySet().equals(properties.keySet())) {      throw new IllegalStateException(String.format("Cache has properties[%s] while storage has properties[%s]",properties,storeProperties));    }    for (    Map.Entry<String,byte[]> propEntry : properties.entrySet()) {      byte[] storeVal=storeProperties.get(propEntry.getKey());      if (!Arrays.equals(propEntry.getValue(),storeVal)) {        throw new IllegalStateException(String.format("Cache property value[%s=%s] doesn't match storage property value[%s=%s]",propEntry.getKey(),propEntry.getValue(),propEntry.getKey(),new String(storeVal,Charset.defaultCharset())));      }    }  } catch (  Throwable e) {    StringBuilder stateDump=new StringBuilder();    stateDump.append("Consistency validation failure: ");    stateDump.append(e.getMessage());    stateDump.append("\nState dump:\n");    stateDump.append("- frameworkId: ");    stateDump.append(frameworkId);    stateDump.append("\n- nameToId: ");    stateDump.append(nameToId);    stateDump.append("\n- idToTask: ");    stateDump.append(idToTask);    stateDump.append("\n- idToStatus: ");    stateDump.append(idToStatus);    stateDump.append("\n- properties: ");    stateDump.append(properties);    stateDump.append('\n');    throw new IllegalStateException(stateDump.toString(),e);  } finally {    RLOCK.unlock();  }}  }
class C{  public void registerCustomizer(JmxConnectionCustomizer customizer){  JmxConnectionSupportImpl.registerCustomizer(customizer);}  }
class C{  public static long copySign(long magnitude,long sign) throws MathRuntimeException {  if ((magnitude >= 0 && sign >= 0) || (magnitude < 0 && sign < 0)) {    return magnitude;  } else   if (sign >= 0 && magnitude == Long.MIN_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW);  } else {    return -magnitude;  }}  }
class C{  private void initView(){  this.progressView=(CircularProgressView)findViewById(R.id.container_loading_view_mini_progressView);  this.retryButton=(Button)findViewById(R.id.container_loading_view_mini_retryButton);  retryButton.setOnClickListener(this);  retryButton.setVisibility(GONE);  this.refreshLayout=(BothWaySwipeRefreshLayout)findViewById(R.id.container_photo_list_swipeRefreshLayout);  if (Mysplash.getInstance().isLightTheme()) {    refreshLayout.setColorSchemeColors(ContextCompat.getColor(getContext(),R.color.colorTextContent_light));    refreshLayout.setProgressBackgroundColorSchemeResource(R.color.colorPrimary_light);  } else {    refreshLayout.setColorSchemeColors(ContextCompat.getColor(getContext(),R.color.colorTextContent_dark));    refreshLayout.setProgressBackgroundColorSchemeResource(R.color.colorPrimary_dark);  }  refreshLayout.setPermitRefresh(false);  refreshLayout.setVisibility(GONE);  this.recyclerView=(RecyclerView)findViewById(R.id.container_photo_list_recyclerView);  recyclerView.setLayoutManager(new LinearLayoutManager(getContext(),LinearLayoutManager.VERTICAL,false));  recyclerView.setAdapter(collectionsPresenter.getAdapter());  recyclerView.addOnScrollListener(scrollListener);}  }
class C{  protected AdsGetStatisticsQuery idsType(AdsGetStatisticsIdsType value){  return unsafeParam("ids_type",value);}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONArray response){}  }
class C{  @Override public void bindDisappearEvent(WXComponent component){  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getRef());  if (appearMap == null) {    appearMap=new ConcurrentHashMap<>();  }  AppearData appearData=appearMap.get(component.getRef());  if (appearData == null) {    appearData=new AppearData();  }  appearData.mAppearComponent=component;  appearData.hasDisappear=true;  appearMap.put(component.getRef(),appearData);  mAppearMap.put(getRef(),appearMap);}  }
class C{  public static void quitApplication(){  android.os.Process.killProcess(android.os.Process.myPid());  System.exit(0);}  }
class C{  void dumpBinary(DataOutputStream os) throws IOException {  Utilities.outString(os,name);  os.writeInt(start);  os.writeInt(count);}  }
class C{  @Override public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {}  }
class C{  public static boolean isItemRestrictedTo(Player player,Item item,byte storage){  StorageType type=StorageType.getStorageTypeById(storage);switch (type) {case REGULAR_WAREHOUSE:    if (!item.isStorableinWarehouse(player)) {      PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300418));      return true;    }  break;case ACCOUNT_WAREHOUSE:if (!item.isStorableinAccWarehouse(player)) {  PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1400356));  return true;}break;case LEGION_WAREHOUSE:if (!item.isStorableinLegWarehouse(player) || !LegionConfig.LEGION_WAREHOUSE) {PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1400355));return true;} else if (!player.isLegionMember() || !LegionService.getInstance().getLegionMember(player.getObjectId()).hasRights(LegionPermissionsMask.WH_DEPOSIT)) {PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300322));return true;}break;default :break;}return false;}  }
class C{  public int size(){  return numberElements;}  }
class C{  public static Drawable toDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(null,bitmap);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_INVITE_GUILD(String value0){  return new SM_SYSTEM_MESSAGE(1390118,value0);}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public String groupName(){  int i=name.indexOf(".");  if (i > 0) {    int j=name.indexOf(".",i + 1);    if (j > 0) {      return name.substring(0,j);    } else {      return name.substring(0,i);    }  }  return "access";}  }
class C{  public void destroy() throws Exception {}  }
class C{  public int code(){  return rawResponse.code();}  }
class C{  public Math_Vector add(double x,double y){  this.x+=x;  this.y+=y;  return this;}  }
class C{  private void createUI(){  readConfigFile(null,this,"FeatureTypeStyles.xml");}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  public static AstyanaxTable createUnknown(long uuid,Placement placement,@Nullable String name){  AstyanaxStorage storage=new AstyanaxStorage(uuid,RowKeyUtils.NUM_SHARDS_UNKNOWN,false,placement.getName(),Suppliers.ofInstance(placement));  return new AstyanaxTable(name != null ? name : "__unknown:" + TableUuidFormat.encode(uuid),new TableOptionsBuilder().setPlacement(placement.getName()).build(),ImmutableMap.<String,Object>of("~unknown",true,"uuid",uuid),null,storage,ImmutableList.of(storage),Suppliers.<Collection<DataCenter>>ofInstance(ImmutableList.<DataCenter>of()));}  }
class C{  public static void encode(InputStream inputStream,OutputStream outputStream) throws IOException {  encode(inputStream,outputStream,0);}  }
class C{  public final String toString(){  return (name + ((isSource == true) ? " source" : " target") + " port");}  }
class C{  public WidgetsGetPagesQuery widgetApiId(Integer value){  return unsafeParam("widget_api_id",value);}  }
class C{  protected void sendPacket(LsServerPacket msg){  getConnection().sendPacket(msg);}  }
class C{  public boolean contains(String key){  return myProperties.containsKey(key);}  }
class C{  public boolean processRow(StepMetaInterface smi,StepDataInterface sdi) throws KettleException {  try {    meta=(CarbonSliceMergerStepMeta)smi;    StandardLogService.setThreadName(StandardLogService.getPartitionID(meta.getTableName()),null);    data=(CarbonSliceMergerStepData)sdi;    Object[] row=getRow();    if (null == row) {      renameFolders();      LOGGER.info("Record Procerssed For table: " + meta.getTabelName());      String logMessage="Summary: Carbon Slice Merger Step: Read: " + readCounter + ": Write: "+ writeCounter;      LOGGER.info(logMessage);      setOutputDone();      return false;    }    if (first) {      first=false;      if (getInputRowMeta() != null) {        this.data.setOutputRowMeta((RowMetaInterface)getInputRowMeta().clone());        this.meta.getFields(data.getOutputRowMeta(),getStepname(),null,null,this);      }    }    readCounter++;  } catch (  Exception ex) {    LOGGER.error(ex);    throw new RuntimeException(ex);  }  return true;}  }
class C{  public static void mainMe(String args1,String arg2,String arg3) throws IOException {  IncrementalVisitor.main(new String[]{args1,arg2,arg3},VISITOR_BUILDER);}  }
class C{  public void recordThrowable(@NotNull Throwable throwable){  if (myTraces == null) {    myTraces=new ArrayList<Throwable>();  }  myTraces.add(throwable);}  }
class C{  public void reset(){  geometryFieldName=DEFAULT_GEOMETRY_FIELD_NAME;}  }
class C{  public static <T>JoinObservable<T> from(Observable<T> o){  return new JoinObservable<T>(RxJavaPlugins.onAssembly(o));}  }
class C{  public void endServiceRecording(boolean notifyRecordingEnded,String runId,String experimentTitle){  clearNotification(getApplicationContext(),NotificationIds.RECORDER_SERVICE);  if (notifyRecordingEnded) {    notifyRecordingEnded(runId,experimentTitle);  }  stopForeground(true);  stopSelf();}  }
class C{  public Patterns(String[] includes,String[] excludes){  this.origIncludes=includes;  this.origExcludes=excludes;}  }
class C{  public boolean isPathBetween(String sink,String source){  for (  ResultSinkInfo si : this.results.keySet())   if (si.getAccessPath().getPlainValue().toString().equals(sink)) {    Set<ResultSourceInfo> sources=this.results.get(si);    for (    ResultSourceInfo src : sources)     if (src.getSource().toString().contains(source))     return true;  }  return false;}  }
class C{  public void dump(){  dump(new OutputStreamWriter(System.out));}  }
class C{  public static byte[] ivCipherConcat(byte[] iv,byte[] cipherText){  byte[] combined=new byte[iv.length + cipherText.length];  System.arraycopy(iv,0,combined,0,iv.length);  System.arraycopy(cipherText,0,combined,iv.length,cipherText.length);  return combined;}  }
class C{  @Override public void onBindViewHolder(){  if (unbinder == null)   unbinder=ButterKnife.bind(this,itemView);}  }
class C{  public final void hideNavigationBar(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int uiOptions=View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY| View.SYSTEM_UI_FLAG_IMMERSIVE;    View decorView=getWindow().getDecorView();    decorView.setSystemUiVisibility(uiOptions);  } else {    WindowManager.LayoutParams lp=getWindow().getAttributes();    lp.flags|=WindowManager.LayoutParams.FLAG_FULLSCREEN;    getWindow().setAttributes(lp);  }}  }
class C{  public static void clearRecentFiles(){  String str=ProgramProperties.get(RECENTFILES,"");  if (str.length() != 0) {    ProgramProperties.put(RECENTFILES,"");    notifyListChange(RECENTFILES);  }}  }
class C{  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(Map<K,V> map){  Map<K,V> result=new LinkedHashMap<>();  Stream<Map.Entry<K,V>> st=map.entrySet().stream();  st.sorted(Map.Entry.comparingByValue()).forEachOrdered(null);  return result;}  }
class C{  private PacScriptMethods buildParser(){  PacScriptMethods result=new PacScriptMethods();  Calendar cal=Calendar.getInstance();  cal.set(Calendar.YEAR,1994);  cal.set(Calendar.MONTH,Calendar.DECEMBER);  cal.set(Calendar.DAY_OF_MONTH,15);  cal.set(Calendar.HOUR_OF_DAY,12);  cal.set(Calendar.MINUTE,00);  cal.set(Calendar.SECOND,00);  cal.set(Calendar.MILLISECOND,00);  result.setCurrentTime(cal);  return result;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void markNextPacket(){  mBuffers[mBufferIn][1]|=0x80;}  }
class C{  public VendorOptionVersion(Class<?> classType,VersionData minimumVersion,VersionData maximumVersion){  this.classType=classType;  this.minimumVersion=minimumVersion;  this.maximumVersion=maximumVersion;}  }
class C{  @Override public void afterConsumption(IReplicationInContext context,boolean successful,long lastProcessedKey){  if (_engine.getReplicationNode().getBlobStoreReplicationBulkConsumeHelper() != null) {    _engine.getReplicationNode().getBlobStoreReplicationBulkConsumeHelper().flushBulk(lastProcessedKey);    logFlushAfterConsumption(context,successful,lastProcessedKey,Level.FINE);  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public synchronized ZooKeeperClient build(){  if (null == cachedClient) {    cachedClient=buildClient();  }  return cachedClient;}  }
class C{  private static ResultPoint[] expandSquare(ResultPoint[] cornerPoints,float oldSide,float newSide){  float ratio=newSide / (2 * oldSide);  float dx=cornerPoints[0].getX() - cornerPoints[2].getX();  float dy=cornerPoints[0].getY() - cornerPoints[2].getY();  float centerx=(cornerPoints[0].getX() + cornerPoints[2].getX()) / 2.0f;  float centery=(cornerPoints[0].getY() + cornerPoints[2].getY()) / 2.0f;  ResultPoint result0=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result2=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  dx=cornerPoints[1].getX() - cornerPoints[3].getX();  dy=cornerPoints[1].getY() - cornerPoints[3].getY();  centerx=(cornerPoints[1].getX() + cornerPoints[3].getX()) / 2.0f;  centery=(cornerPoints[1].getY() + cornerPoints[3].getY()) / 2.0f;  ResultPoint result1=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result3=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  return new ResultPoint[]{result0,result1,result2,result3};}  }
class C{  protected boolean atAnyOfTokens(Set<TokenKind> kinds){  return kinds.contains(currentToken());}  }
class C{  public void pageLoadingStarted(){  mLoadTracker.pageLoadingStarted();}  }
class C{  protected soot.Value createLHS(polyglot.ast.Expr expr){  if (expr instanceof polyglot.ast.Local) {    return getLocal((polyglot.ast.Local)expr);  } else   if (expr instanceof polyglot.ast.ArrayAccess) {    return getArrayRefLocalLeft((polyglot.ast.ArrayAccess)expr);  } else   if (expr instanceof polyglot.ast.Field) {    return getFieldLocalLeft((polyglot.ast.Field)expr);  } else {    throw new RuntimeException("Unhandled LHS");  }}  }
class C{  public void config(Configuration config,String prefix,String name){  items=config.getPrefixPropertyList(prefix,name + ".Items");}  }
class C{  public boolean verbosegc(){  return soot.PhaseOptions.getBoolean(options,"verbosegc");}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathGreater(String path,Comparable<?> value){  return path(path,greater(value));}  }
class C{  public List<TextUnitDTOWithComments> enrichTextUnitDTOsWithComments(List<TextUnitDTO> textUnitDTOs){  int BATCH_SIZE=500;  List<TextUnitDTOWithComments> textUnitDTOsWithComments=new ArrayList<>();  List<TextUnitDTO> textUnitDTOsForBatch=new ArrayList<>();  List<Long> tmTextUnitVariantIdsForBatch=new ArrayList<>();  int count=1;  for (  TextUnitDTO textUnitDTO : textUnitDTOs) {    Long tmTextUnitVariantId=textUnitDTO.getTmTextUnitVariantId();    textUnitDTOsForBatch.add(textUnitDTO);    tmTextUnitVariantIdsForBatch.add(tmTextUnitVariantId);    if (count % BATCH_SIZE == 0) {      processTextUnitDTOsBatch(textUnitDTOsWithComments,textUnitDTOsForBatch,tmTextUnitVariantIdsForBatch);      textUnitDTOsForBatch=new ArrayList<>();      tmTextUnitVariantIdsForBatch=new ArrayList<>();    }  }  processTextUnitDTOsBatch(textUnitDTOsWithComments,textUnitDTOsForBatch,tmTextUnitVariantIdsForBatch);  return textUnitDTOsWithComments;}  }
class C{  public BoardGetTopicsQueryWithExtended(VkApiClient client,int groupId){  super(client,"board.getTopics",GetTopicsExtendedResponse.class);  groupId(groupId);  extended(true);}  }
class C{  public DataTagUpdate(final long changeId,final long dataTagId,final long equipmentId){  setChangeId(changeId);  this.dataTagId=dataTagId;  this.equipmentId=equipmentId;}  }
class C{  public boolean isEnabled(){  return false;}  }
class C{  private void addStringLiteral(char quot,boolean isRaw){  int oldPos=isRaw ? pos - 2 : pos - 1;  int start=pos;  if (skipTripleQuote(quot)) {    pos-=2;    escapedStringLiteral(quot,isRaw);    return;  }  while (pos < buffer.length) {    char c=buffer[pos++];switch (c) {case '\n':      error("unterminated string literal at eol",oldPos,pos);    addToken(TokenKind.STRING,oldPos,pos - 1,bufferSlice(start,pos - 1));  newline();return;case '\\':if (isRaw) {pos++;break;}pos=oldPos + 1;escapedStringLiteral(quot,false);return;case '\'':case '"':if (c == quot) {addToken(TokenKind.STRING,oldPos,pos,bufferSlice(start,pos - 1));return;}}}error("unterminated string literal at eof",oldPos,pos);addToken(TokenKind.STRING,oldPos,pos,bufferSlice(start,pos));}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPost(url),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_DODGED_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201103,skillcaster,skillname);}  }
class C{  public void loadData(Table t,String query,String keyField){  loadData(t,query,keyField,null,null);}  }
class C{  public Fraction(double value,int maxDenominator) throws MathIllegalStateException {  this(value,0,maxDenominator,100);}  }
class C{  public void shutDown() throws SAException {}  }
class C{  public static String removeNewlines(String string){  return string.replaceAll("\r",EMPTY).replaceAll("\n",EMPTY);}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  @Override public void onPrepared(MediaPlayer mp){  player.start();}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  public void reset(byte[] input,int length){  buffer.reset(input,0,length);}  }
class C{  public static Environment renderTemplate(Template template,Map<String,Object> context,Appendable outWriter) throws TemplateException, IOException {  Environment savedEnv=threadEnv.get();  threadEnv.set(null);  try {    context.remove("null");    Environment env=template.createProcessingEnvironment(context,(Writer)outWriter);    applyUserSettings(env,context);    env.process();    return env;  }  finally {    threadEnv.set(savedEnv);  }}  }
class C{  public DefaultScrollableDataIterator(String hQuery,SessionFactory sessionFactory,int fetchSize){  super(hQuery,sessionFactory,fetchSize);}  }
class C{  public static void main(String args[]){  if (args.length < 2) {    System.out.println("Error: Must have 2 parameters, one is config filename, " + "the other is the local filename to upload");    return;  }  System.out.println("java.version=" + System.getProperty("java.version"));  String conf_filename=args[0];  String local_filename=args[1];  String group_name;  try {    ClientGlobal.init(conf_filename);    System.out.println("network_timeout=" + ClientGlobal.g_network_timeout + "ms");    System.out.println("charset=" + ClientGlobal.g_charset);    String file_id;    TrackerClient tracker=new TrackerClient();    TrackerServer trackerServer=tracker.getConnection();    StorageServer storageServer=null;    StorageClient1 client=new StorageClient1(trackerServer,storageServer);    byte[] file_buff;    NameValuePair[] meta_list;    String master_file_id;    String prefix_name;    String file_ext_name;    String slave_file_id;    String generated_slave_file_id;    int errno;    group_name="group1";    StorageServer[] storageServers=tracker.getStoreStorages(trackerServer,group_name);    if (storageServers == null) {      System.err.println("get store storage servers fail, error code: " + tracker.getErrorCode());    } else {      System.err.println("store storage servers count: " + storageServers.length);      for (int k=0; k < storageServers.length; k++) {        System.err.println((k + 1) + ". " + storageServers[k].getInetSocketAddress().getAddress().getHostAddress()+ ":"+ storageServers[k].getInetSocketAddress().getPort());      }      System.err.println("");    }    meta_list=new NameValuePair[4];    meta_list[0]=new NameValuePair("width","800");    meta_list[1]=new NameValuePair("heigth","600");    meta_list[2]=new NameValuePair("bgcolor","#FFFFFF");    meta_list[3]=new NameValuePair("author","Mike");    file_buff="this is a test".getBytes(ClientGlobal.g_charset);    System.out.println("file length: " + file_buff.length);    file_id=client.upload_file1(file_buff,"txt",meta_list);    if (file_id == null) {      System.err.println("upload file fail, error code: " + client.getErrorCode());      return;    } else {      System.err.println("file_id: " + file_id);      System.err.println(client.get_file_info1(file_id));      ServerInfo[] servers=tracker.getFetchStorages1(trackerServer,file_id);      if (servers == null) {        System.err.println("get storage servers fail, error code: " + tracker.getErrorCode());      } else {        System.err.println("storage servers count: " + servers.length);        for (int k=0; k < servers.length; k++) {          System.err.println((k + 1) + ". " + servers[k].getIpAddr()+ ":"+ servers[k].getPort());        }        System.err.println("");      }      meta_list=new NameValuePair[4];      meta_list[0]=new NameValuePair("width","1024");      meta_list[1]=new NameValuePair("heigth","768");      meta_list[2]=new NameValuePair("bgcolor","#000000");      meta_list[3]=new NameValuePair("title","Untitle");      if ((errno=client.set_metadata1(file_id,meta_list,ProtoCommon.STORAGE_SET_METADATA_FLAG_MERGE)) == 0) {        System.err.println("set_metadata success");      } else {        System.err.println("set_metadata fail, error no: " + errno);      }      meta_list=client.get_metadata1(file_id);      if (meta_list != null) {        for (int i=0; i < meta_list.length; i++) {          System.out.println(meta_list[i].getName() + " " + meta_list[i].getValue());        }      }      file_buff=client.download_file1(file_id);      if (file_buff != null) {        System.out.println("file length:" + file_buff.length);        System.out.println((new String(file_buff)));      }      master_file_id=file_id;      prefix_name="-part1";      file_ext_name="txt";      file_buff="this is a slave buff.".getBytes(ClientGlobal.g_charset);      slave_file_id=client.upload_file1(master_file_id,prefix_name,file_buff,file_ext_name,meta_list);      if (slave_file_id != null) {        System.err.println("slave file_id: " + slave_file_id);        System.err.println(client.get_file_info1(slave_file_id));        generated_slave_file_id=ProtoCommon.genSlaveFilename(master_file_id,prefix_name,file_ext_name);        if (!generated_slave_file_id.equals(slave_file_id)) {          System.err.println("generated slave file: " + generated_slave_file_id + "\n != returned slave file: "+ slave_file_id);        }      }      if ((errno=client.delete_file1(file_id)) == 0) {        System.err.println("Delete file success");      } else {        System.err.println("Delete file fail, error no: " + errno);      }    }    if ((file_id=client.upload_file1(local_filename,null,meta_list)) != null) {      int ts;      String token;      String file_url;      InetSocketAddress inetSockAddr;      System.err.println("file_id: " + file_id);      System.err.println(client.get_file_info1(file_id));      inetSockAddr=trackerServer.getInetSocketAddress();      file_url="http://" + inetSockAddr.getAddress().getHostAddress();      if (ClientGlobal.g_tracker_http_port != 80) {        file_url+=":" + ClientGlobal.g_tracker_http_port;      }      file_url+="/" + file_id;      if (ClientGlobal.g_anti_steal_token) {        ts=(int)(System.currentTimeMillis() / 1000);        token=ProtoCommon.getToken(file_id,ts,ClientGlobal.g_secret_key);        file_url+="?token=" + token + "&ts="+ ts;      }      System.err.println("file url: " + file_url);      errno=client.download_file1(file_id,0,100,"c:\\" + file_id.replaceAll("/","_"));      if (errno == 0) {        System.err.println("Download file success");      } else {        System.err.println("Download file fail, error no: " + errno);      }      errno=client.download_file1(file_id,new DownloadFileWriter("c:\\" + file_id.replaceAll("/","-")));      if (errno == 0) {        System.err.println("Download file success");      } else {        System.err.println("Download file fail, error no: " + errno);      }      master_file_id=file_id;      prefix_name="-part2";      file_ext_name=null;      slave_file_id=client.upload_file1(master_file_id,prefix_name,local_filename,file_ext_name,meta_list);      if (slave_file_id != null) {        System.err.println("slave file_id: " + slave_file_id);        System.err.println(client.get_file_info1(slave_file_id));        generated_slave_file_id=ProtoCommon.genSlaveFilename(master_file_id,prefix_name,file_ext_name);        if (!generated_slave_file_id.equals(slave_file_id)) {          System.err.println("generated slave file: " + generated_slave_file_id + "\n != returned slave file: "+ slave_file_id);        }      }    }    File f;    f=new File(local_filename);    int nPos=local_filename.lastIndexOf('.');    if (nPos > 0 && local_filename.length() - nPos <= ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN + 1) {      file_ext_name=local_filename.substring(nPos + 1);    } else {      file_ext_name=null;    }    file_id=client.upload_file1(null,f.length(),new UploadLocalFileSender(local_filename),file_ext_name,meta_list);    if (file_id != null) {      System.out.println("file id: " + file_id);      System.out.println(client.get_file_info1(file_id));      master_file_id=file_id;      prefix_name="-part3";      slave_file_id=client.upload_file1(master_file_id,prefix_name,f.length(),new UploadLocalFileSender(local_filename),file_ext_name,meta_list);      if (slave_file_id != null) {        System.err.println("slave file_id: " + slave_file_id);        generated_slave_file_id=ProtoCommon.genSlaveFilename(master_file_id,prefix_name,file_ext_name);        if (!generated_slave_file_id.equals(slave_file_id)) {          System.err.println("generated slave file: " + generated_slave_file_id + "\n != returned slave file: "+ slave_file_id);        }      }    } else {      System.err.println("Upload file fail, error no: " + errno);    }    storageServer=tracker.getFetchStorage1(trackerServer,file_id);    if (storageServer == null) {      System.out.println("getFetchStorage fail, errno code: " + tracker.getErrorCode());      return;    }    System.out.println("active test to storage server: " + ProtoCommon.activeTest(storageServer.getSocket()));    storageServer.close();    System.out.println("active test to tracker server: " + ProtoCommon.activeTest(trackerServer.getSocket()));    trackerServer.close();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  protected void handleDirectoryStart(File directory,int depth,Collection<T> results) throws IOException {}  }
class C{  public KatharsisInvokerException(final int statusCode,Throwable nested){  super(nested);  this.statusCode=statusCode;}  }
class C{  public boolean canBeUsed(Context ctx,@Nullable Activity activity){  UserRecoverableErrorHandler errorHandler=activity != null ? new UserRecoverableErrorHandler.ModalDialog(activity) : new UserRecoverableErrorHandler.SystemNotification();  return ExternalAuthUtils.getInstance().canUseGooglePlayServices(ctx,errorHandler);}  }
class C{  public void deny(PermissionFlag flag,Identity<?> identity,Message message){  strictPermission.computeIfAbsent(flag,null).put(identity,new Status(message));}  }
class C{  public ReplicationFilterException(String message){  super(message);}  }
class C{  private static boolean validLabelLocation(StringLiteral element){  PsiElement parent=element.getParent();  if (parent instanceof Argument.Keyword) {    String argName=((Argument.Keyword)parent).getName();    if ("name".equals(argName)) {      return false;    }  }  return true;}  }
class C{  public DefaultJsonFeeder(Charset charset){  this(charset,1024);}  }
class C{  private void updateCities(WheelView city,List<VChartPeriod.PeriodsBean> list){  periodAdapter=new PeriodAdapter(getActivity(),list);  city.setViewAdapter(periodAdapter);  city.setCurrentItem(0);}  }
class C{  public static final double feetPerSecondToMetersPerSecond(double feetPerSecond){  return feetPerSecond * METER_TO_FOOT;}  }
class C{  public static Zmat ahib(Zltmat L,Zmat B) throws JampackException {  int i, j, k;  Z x=new Z();  L.getProperties();  B.getProperties();  if (L.nr != L.nc)   throw new JampackException("Rectangular matrix.");  if (L.nr != B.nr)   throw new JampackException("Inconsistent dimensions.");  Zmat X=new Zmat(B);  for (i=L.nr - 1; i >= 0; i--) {    if (L.re[i][i] == 0.0 && L.im[i][i] == 0.0)     throw new JampackException("Zero diagonal in solving triangular system");    for (j=0; j < B.nc; j++) {      X.put0(i,j,x.Div(X.get0(i,j),x.Conj(L.get0(i,i))));      for (k=0; k < i; k++) {        X.re[k][j]=X.re[k][j] - X.re[i][j] * L.re[i][k] - X.im[i][j] * L.im[i][k];        X.im[k][j]=X.im[k][j] + X.re[i][j] * L.im[i][k] - X.im[i][j] * L.re[i][k];      }    }  }  return X;}  }
class C{  public SkillTreeCursor querySkillTrees(){  return mHelper.querySkillTrees();}  }
class C{  public static boolean stopRunningService(Context context,String className){  Intent intent_service=null;  boolean ret=false;  try {    intent_service=new Intent(context,Class.forName(className));  } catch (  Exception e) {    e.printStackTrace();  }  if (intent_service != null) {    ret=context.stopService(intent_service);  }  return ret;}  }
class C{  public OutputFormat(Document doc,String encoding,boolean indenting){  this(doc);  setEncoding(encoding);  setIndenting(indenting);}  }
class C{  public void takeDown(){  if (!Silent)   System.err.println(this.getName() + ":" + "Finished.");}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0,0,0,0,0.00948199951485,0.432056525076,0.381648158697,0.354555726206,0.329513316888,0.298422824228};}  }
class C{  protected void drawBlurredBitmap(Canvas canvas,Bitmap blurredBitmap,int overlayColor){  if (blurredBitmap != null) {    mRectSrc.right=blurredBitmap.getWidth();    mRectSrc.bottom=blurredBitmap.getHeight();    mRectDst.right=getWidth();    mRectDst.bottom=getHeight();    canvas.drawBitmap(blurredBitmap,mRectSrc,mRectDst,null);  }  canvas.drawColor(overlayColor);}  }
class C{  public FastConcurrentSkipListMap<K,V> clone(){  FastConcurrentSkipListMap<K,V> clone=null;  try {    clone=(FastConcurrentSkipListMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  clone.initialize();  clone.buildFromSorted(this);  return clone;}  }
class C{  public void removeActivity(Activity activity){  if (activityStack == null) {    activityStack=new Stack<Activity>();  }  activityStack.remove(activity);}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public static void threadSleep(long millis){  try {    Thread.sleep(millis);  } catch (  InterruptedException ex) {    Log.e("Exception",StringUtils.exceptionStackTraceToString(ex));  }}  }
class C{  public static Direction directionForArrowKey(KeyEvent e){  int index=Math.max(0,Math.min(e.getKeyCode(),KeyEvent.VK_DOWN) - KeyEvent.VK_LEFT);  return Direction.values()[index];}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonServant_A_TO_B(String skillcaster,String value0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201037,skillcaster,value0,skilltarget,skillname);}  }
class C{  public static void createCarbonStore(){  try {    String factFilePath=new File("../hadoop/src/test/resources/data.csv").getCanonicalPath();    File storeDir=new File(absoluteTableIdentifier.getStorePath());    CarbonUtil.deleteFoldersAndFiles(storeDir);    CarbonProperties.getInstance().addProperty(CarbonCommonConstants.STORE_LOCATION_HDFS,absoluteTableIdentifier.getStorePath());    String kettleHomePath="../processing/carbonplugins";    CarbonTable table=createTable();    writeDictionary(factFilePath,table);    CarbonDataLoadSchema schema=new CarbonDataLoadSchema(table);    LoadModel loadModel=new LoadModel();    String partitionId="0";    loadModel.setSchema(schema);    loadModel.setDatabaseName(absoluteTableIdentifier.getCarbonTableIdentifier().getDatabaseName());    loadModel.setTableName(absoluteTableIdentifier.getCarbonTableIdentifier().getTableName());    loadModel.setTableName(absoluteTableIdentifier.getCarbonTableIdentifier().getTableName());    loadModel.setFactFilePath(factFilePath);    loadModel.setLoadMetadataDetails(new ArrayList<LoadMetadataDetails>());    executeGraph(loadModel,absoluteTableIdentifier.getStorePath(),kettleHomePath);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Object[] keys(){  Object[] keys=new Object[size()];  K[] k=(K[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != FREE && k[i] != REMOVED) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public static String removeDelimiter(String s,final char delim,final char openEscape,final char closeEscape){  StringBuilder t=new StringBuilder(s);  boolean escaped=false;  for (int i=0; i < t.length(); ++i) {    char c=t.charAt(i);    if (escaped) {      if (c == closeEscape) {        escaped=false;      }    } else     if (c == openEscape) {      escaped=true;    } else     if (c == delim) {      t.deleteCharAt(i--);    }  }  return t.toString();}  }
class C{  protected boolean isIdColumn(String columnName){  return "_id".equalsIgnoreCase(columnName) || "id".equalsIgnoreCase(columnName);}  }
class C{  public RepaintAction(){  super();}  }
class C{  public MessagesMarkAsImportantQuery(VkApiClient client,UserActor actor){  super(client,"messages.markAsImportant",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());}  }
class C{  public GSMapMessageImpl(GSSessionImpl session) throws JMSException {  this(session,null);}  }
class C{  public static List<? extends Element> childElementList(Element element,Set<String> childElementNames){  if (element == null)   return null;  List<Element> elements=new LinkedList<Element>();  if (childElementNames == null)   return elements;  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE && childElementNames.contains(node.getNodeName())) {        Element childElement=(Element)node;        elements.add(childElement);      }    } while ((node=node.getNextSibling()) != null);  }  return elements;}  }
class C{  public CommandTagRemove(){}  }
class C{  private UnivariatePointValuePair best(UnivariatePointValuePair a,UnivariatePointValuePair b,boolean isMinim){  if (a == null) {    return b;  }  if (b == null) {    return a;  }  if (isMinim) {    return a.getValue() <= b.getValue() ? a : b;  } else {    return a.getValue() >= b.getValue() ? a : b;  }}  }
class C{  @Override public int[] makeDensityTestPoints(){  return new int[]{-1,0,1,2,3,4,5,10,20};}  }
class C{  private void convertMultipleListsToFastList(){  FastList<MithraFastList<E>> localLists=this.lists;  if (localLists.size() > 1) {    final MithraFastList<E> newList=new MithraFastList<E>(this.size());    for (int i=0; i < localLists.size(); i++) {      newList.addAll(localLists.get(i));    }    FastList<MithraFastList<E>> newLists=new FastList<MithraFastList<E>>(2);    newLists.add(newList);    this.lists=newLists;  }}  }
class C{  private boolean isAssignableFrom(ServiceType[] ifaces){  for (int i=ifaces.length; --i >= 0; ) {    if (hash == ifaces[i].hash || isAssignableFrom(ifaces[i].interfaces))     return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200870,skillcaster,num0,skillname);}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200554,skilltarget,skillname);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public boolean isDetailsAreaShown(int location){  DisplayArea displayArea=getDisplayArea(location);  return displayArea != null ? displayArea.isVisible() : false;}  }
class C{  public Observable<Void> evictAll(){  return processorProviders.evictAll();}  }
class C{  public static Bitmap clipToCircle(Bitmap bitmap){  if (bitmap == null) {    return null;  }  final int width=bitmap.getWidth();  final int height=bitmap.getHeight();  final Bitmap outputBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  final Path path=new Path();  path.addCircle((float)(width / 2),(float)(height / 2),(float)Math.min(width,(height / 2)),Path.Direction.CCW);  final Canvas canvas=new Canvas(outputBitmap);  canvas.clipPath(path);  canvas.drawBitmap(bitmap,0,0,null);  return outputBitmap;}  }
class C{  public static AirMap init(Context context){  return init(context,"");}  }
class C{  public static FloatBuffer createFloatBuffer(int size){  FloatBuffer buf=ByteBuffer.allocateDirect(4 * size).order(ByteOrder.nativeOrder()).asFloatBuffer();  buf.clear();  if (trackDirectMemory) {    trackingHash.put(buf,ref);  }  return buf;}  }
class C{  public void ann(Object single){  assertNotNull(single);}  }
class C{  public float readFloat() throws IOException {  return dis.readFloat();}  }
class C{  public Bookmark addBookmark(Bookmark bookmark){  Assert.notNull(bookmark);  bookmarks.add(bookmark);  bookmark.setUser(this);  return bookmark;}  }
class C{  @Override public boolean accept(File dir,String name){  return pattern.matcher(name).matches();}  }
class C{  @Override public List<Class<? extends ConfigAspect>> mergeDependencies(){  return ImmutableList.of();}  }
class C{  public AdsGetSuggestionsQueryWithSchools q(String value){  return unsafeParam("q",value);}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));    }  }}  }
class C{  public NotesEditQuery edit(UserActor actor,int noteId,String title,String text){  return new NotesEditQuery(getClient(),actor,noteId,title,text);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PETITION_CHAT_ENDED_TO_USER(String value0){  return new SM_SYSTEM_MESSAGE(1300561,value0);}  }
class C{  public void writeChar(char a) throws IOException {  outs.write((byte)(a >> 8));  outs.write((byte)(a));  position+=2;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysNoResist_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200328,skillname);}  }
class C{  protected NotesCreateCommentQuery noteId(int value){  return unsafeParam("note_id",value);}  }
class C{  @Override protected void loadData() throws IOException {  sopModels=new HashMap<String,SoP>();  String nextLine, nextType;  String strContext="";  Scanner s=null;  try {    s=new Scanner(new BufferedReader(new InputStreamReader(dataStream,"UTF-8")));    while (s.hasNext()) {      nextLine=s.nextLine();      if (nextLine.trim().equals(""))       break; else       strContext+=nextLine + "\n";    }    FeatureDefinition sopFeatureDefinition=new FeatureDefinition(new BufferedReader(new StringReader(strContext)),false);    predictionFeatureNames=sopFeatureDefinition.getFeatureNames();    while (s.hasNext()) {      nextType=s.nextLine();      nextLine=s.nextLine();      if (nextType.startsWith("f0")) {        sopModels.put("f0",new SoP(nextLine,sopFeatureDefinition));      } else {        sopModels.put(nextType,new SoP(nextLine,sopFeatureDefinition));      }    }    s.close();  } catch (  Exception e) {    throw new IOException("Error reading SoP data",e);  }}  }
class C{  public String[] listAvailableVocalizations(){  FeatureDefinition featureDefinition=vSelector.getFeatureDefinition();  assert featureDefinition.hasFeature("name");  int nameIndex=featureDefinition.getFeatureIndex("name");  return featureDefinition.getPossibleValues(nameIndex);}  }
class C{  private void login(String username,String password) throws LoginFailedException, RemoteServerException {  Request get=new Request.Builder().url(LOGIN_URL).get().build();  Response getResponse;  try {    getResponse=client.newCall(get).execute();  } catch (  IOException e) {    throw new RemoteServerException("Failed to receive contents from server",e);  }  Moshi moshi=new Moshi.Builder().build();  PtcAuthJson ptcAuth;  try {    String response=getResponse.body().string();    ptcAuth=moshi.adapter(PtcAuthJson.class).fromJson(response);  } catch (  IOException e) {    throw new RemoteServerException("Looks like the servers are down",e);  }  HttpUrl url=HttpUrl.parse(LOGIN_URL).newBuilder().addQueryParameter("lt",ptcAuth.getLt()).addQueryParameter("execution",ptcAuth.getExecution()).addQueryParameter("_eventId","submit").addQueryParameter("username",username).addQueryParameter("password",password).build();  RequestBody reqBody=RequestBody.create(null,new byte[0]);  Request postRequest=new Request.Builder().url(url).method("POST",reqBody).build();  Response response;  try {    response=client.newBuilder().followRedirects(false).followSslRedirects(false).build().newCall(postRequest).execute();  } catch (  IOException e) {    throw new RemoteServerException("Network failure",e);  }  String body;  try {    body=response.body().string();  } catch (  IOException e) {    throw new RemoteServerException("Response body fetching failed",e);  }  if (body.length() > 0) {    PtcError ptcError;    try {      ptcError=moshi.adapter(PtcError.class).fromJson(body);    } catch (    IOException e) {      throw new RemoteServerException("Unmarshalling failure",e);    }    if (ptcError.getError() != null && ptcError.getError().length() > 0) {      throw new LoginFailedException(ptcError.getError());    }  }  String ticket=null;  for (  String location : response.headers("location")) {    String[] ticketArray=location.split("ticket=");    if (ticketArray.length > 1) {      ticket=ticketArray[1];    }  }  if (ticket == null) {    throw new LoginFailedException("Failed to fetch token, body:" + body);  }  url=HttpUrl.parse(LOGIN_OAUTH).newBuilder().addQueryParameter("client_id",CLIENT_ID).addQueryParameter("redirect_uri",REDIRECT_URI).addQueryParameter("client_secret",CLIENT_SECRET).addQueryParameter("grant_type","refreshToken").addQueryParameter("code",ticket).build();  postRequest=new Request.Builder().url(url).method("POST",reqBody).build();  try {    response=client.newCall(postRequest).execute();  } catch (  IOException e) {    throw new RemoteServerException("Network Failure ",e);  }  try {    body=response.body().string();  } catch (  IOException e) {    throw new RemoteServerException("Network failure",e);  }  String[] params;  try {    params=body.split("&");    this.tokenId=params[0].split("=")[1];    this.expiresTimestamp=time.currentTimeMillis() + (Integer.valueOf(params[1].split("=")[1]) * 1000 - REFRESH_TOKEN_BUFFER_TIME);  } catch (  Exception e) {    throw new LoginFailedException("Failed to fetch token, body:" + body);  }}  }
class C{  public void interrupt(){  if (waitingQuery) {    sendJson(Json.object(ACTION,ACTION_QUERY_ABORT));    waitingQuery=false;  } else {    System.exit(0);  }}  }
class C{  public static boolean isAccountOnAnyGameServer(Account acc){  for (  GameServerInfo gsi : getGameServers()) {    if (gsi.isAccountOnGameServer(acc.getId())) {      return true;    }  }  return false;}  }
class C{  protected void addRecognizedParamsAndSetDefaults(XMLComponent component){  String[] recognizedFeatures=component.getRecognizedFeatures();  addRecognizedFeatures(recognizedFeatures);  String[] recognizedProperties=component.getRecognizedProperties();  addRecognizedProperties(recognizedProperties);  if (recognizedFeatures != null) {    for (int i=0; i < recognizedFeatures.length; ++i) {      String featureId=recognizedFeatures[i];      Boolean state=component.getFeatureDefault(featureId);      if (state != null) {        if (!fFeatures.containsKey(featureId)) {          fFeatures.put(featureId,state);          fConfigUpdated=true;        }      }    }  }  if (recognizedProperties != null) {    for (int i=0; i < recognizedProperties.length; ++i) {      String propertyId=recognizedProperties[i];      Object value=component.getPropertyDefault(propertyId);      if (value != null) {        if (!fProperties.containsKey(propertyId)) {          fProperties.put(propertyId,value);          fConfigUpdated=true;        }      }    }  }}  }
class C{  public static JFrame showTreeWindow(Tree t,String labelField){  JPrefuseTree tree=new JPrefuseTree(t,labelField);  String title=t.toString();  if (t instanceof VisualTree) {    title=((VisualTree)t).getGroup() + " " + title;  }  JFrame frame=new JFrame(title);  frame.getContentPane().add(new JScrollPane(tree));  frame.pack();  frame.setVisible(true);  return frame;}  }
class C{  @Override @CallSuper public void onPause(){  running=false;}  }
class C{  public void removeNotificationListener(){  Listener=null;}  }
class C{  public boolean isApplicable(){  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX && getViewer().getPcoaTab().isIs3dMode();}  }
class C{  private static int read(InputStream input) throws IOException {  int value=input.read();  if (-1 == value) {    throw new EOFException("Unexpected EOF reached");  }  return value;}  }
class C{  public WorldMapNotExistException(){  super();}  }
class C{  public void normalize(){  normalizeTo(1.0);}  }
class C{  public static final String toString(Object obj){  if (obj == null)   return "null";  if (obj instanceof String) {    return toString((String)obj);  }  StringBuffer output=new StringBuffer();  toString(output,obj);  return output.toString();}  }
class C{  public void sinh(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  function[0]=FastMath.sinh(operand[operandOffset]);  if (order > 0) {    function[1]=FastMath.cosh(operand[operandOffset]);    for (int i=2; i <= order; ++i) {      function[i]=function[i - 2];    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public void add(Object e){  throw new UnsupportedOperationException();}  }
class C{  public void decreaseKinah(long amount,Player actor){  decreaseKinah(amount,ItemUpdateType.DEC_KINAH_BUY,actor);}  }
class C{  public boolean isDisplayed(final String bySelector,int timeout){  return isConditionMet(visibilityOfElementLocated(By.cssSelector(bySelector)),timeout);}  }
class C{  @Override public void onItemClick(AdapterView<?> adapter,View view,int position,long id){  FolderListEntry entry=(FolderListEntry)adapter.getItemAtPosition(position);  if (mIsCreatingFolder) {    BookmarkId selectedFolder=null;    if (entry.mType == FolderListEntry.TYPE_NORMAL) {      selectedFolder=entry.mId;    } else {      assert false : "New folder items should not be clickable in creating mode";    }    Intent intent=new Intent();    intent.putExtra(INTENT_SELECTED_FOLDER,selectedFolder.toString());    setResult(RESULT_OK,intent);    finish();  } else   if (entry.mType == FolderListEntry.TYPE_NEW_FOLDER) {    EnhancedBookmarkAddEditFolderActivity.startAddFolderActivity(this,mBookmarksToMove);  } else   if (entry.mType == FolderListEntry.TYPE_NORMAL) {    mEnhancedBookmarksModel.moveBookmarks(mBookmarksToMove,entry.mId);    finish();  }}  }
class C{  public static final void drawPolygon(GL2 gl,Polygon p,boolean points){  RenderUtilities.drawPolygon(gl,p.getVertices(),points);}  }
class C{  public boolean isComponentPresent(String cssClassName){  try {    wait.withTimeout(Timeouts.SMALL).until(ExpectedConditions.visibilityOf(currentScope.findElement(getComponentLocator(cssClassName))));    return true;  } catch (  NoSuchElementException e) {    LOG.debug(String.format("component located by: %s is not present",cssClassName),e);    return false;  }}  }
class C{  public static void sendBroadcast(Context context,String action,Bundle extras){  Intent intent=new Intent(action);  if (extras != null) {    intent.putExtras(extras);  }  LocalBroadcastManager.getInstance(context).sendBroadcast(intent);}  }
class C{  protected MarketReorderItemsQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  void Evenodd_decoding_1(int rs_disk1,int rs_disk2){  int i, j, stripe, k;  char[] tmp;  tmp=new char[p * block_size];  char[] tmp_for_s;  tmp_for_s=new char[block_size];  if (rs_disk1 < data_disk_nbr && rs_disk2 == data_disk_nbr) {    for (stripe=0; stripe < block_nbr + 1; stripe++) {      for (i=0; i < data_disk_nbr; i++) {        for (j=0; j < block_size; j++) {          k=(stripe + i + p) % p;          if (k < block_nbr)           tmp[stripe * block_size + j]^=check_data[i][k * block_size + j];        }      }    }    stripe=(p - rs_disk1 - 1) % p;    for (i=0; i < block_size; i++) {      if (stripe == p - 1)       tmp_for_s[i]=tmp[stripe * block_size + i]; else       tmp_for_s[i]=(char)(tmp[stripe * block_size + i] ^ check_data[data_disk_nbr + 2][stripe * block_size + i]);    }    for (i=0; i < block_nbr; i++) {      for (j=0; j < block_size; j++) {        tmp[i * block_size + j]^=(tmp_for_s[j] ^ check_data[data_disk_nbr + 2][i * block_size + j]);      }    }    for (i=0; i < block_size; i++)     tmp[block_nbr * block_size + i]^=tmp_for_s[i];    for (i=0; i < p; i++) {      j=(i + p + rs_disk1) % p;      if (j < p - 1) {        System.arraycopy(tmp,i * block_size,check_data[rs_disk1],j * block_size,block_size);      }    }    STAR_encoding_row();  }  if (rs_disk1 < data_disk_nbr && rs_disk2 < data_disk_nbr) {    for (i=0; i < block_nbr; i++) {      for (j=0; j < block_size; j++) {        tmp_for_s[j]^=check_data[data_disk_nbr][i * block_size + j];        tmp_for_s[j]^=check_data[data_disk_nbr + 2][i * block_size + j];      }    }    for (stripe=0; stripe < block_nbr + 1; stripe++) {      for (i=0; i < data_disk_nbr; i++) {        for (j=0; j < block_size; j++) {          k=(stripe + i + p) % p;          if (k < block_nbr)           tmp[stripe * block_size + j]^=check_data[i][k * block_size + j];        }      }    }    for (i=0; i < block_nbr; i++) {      for (j=0; j < block_size; j++) {        if (i < block_nbr)         tmp[i * block_size + j]^=(check_data[data_disk_nbr + 2][i * block_size + j] ^ tmp_for_s[j]);      }    }    for (j=0; j < block_size; j++)     tmp[block_nbr * block_size + j]^=tmp_for_s[j];    stripe=(p - rs_disk1 - 1) % p;    System.arraycopy(tmp,stripe * block_size,tmp_for_s,0,block_size);    while (true) {      k=(stripe + rs_disk2 + p) % p;      if (k == block_nbr) {        break;      }      System.arraycopy(tmp_for_s,0,check_data[rs_disk2],k * block_size,block_size);      for (i=0; i < block_size; i++) {        for (j=0; j <= data_disk_nbr; j++)         if (j != rs_disk1)         check_data[rs_disk1][k * block_size + i]^=check_data[j][k * block_size + i];      }      stripe=(k - rs_disk1 + p) % p;      for (i=0; i < block_size; i++) {        tmp_for_s[i]=(char)(check_data[rs_disk1][k * block_size + i] ^ tmp[stripe * block_size + i]);      }    }  }}  }
class C{  public MarketSearchQueryWithExtended rev(Boolean value){  return unsafeParam("rev",value);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  static protected boolean hasVowel(List phones){  for (int i=0; i < phones.size(); i++) {    if (isVowel((String)phones.get(i))) {      return true;    }  }  return false;}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  super.endElement(namespaceURI,localName,qName);  boolean inExtension=inExtensionNamespace();  int entryType=-1;  Vector entryArgs=new Vector();  if (namespaceURI != null && (extendedNamespaceName.equals(namespaceURI)) && !inExtension) {    String popURI=(String)baseURIStack.pop();    String baseURI=(String)baseURIStack.peek();    if (!baseURI.equals(popURI)) {      entryType=Catalog.BASE;      entryArgs.add(baseURI);      debug.message(4,"(reset) xml:base",baseURI);      try {        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);        catalog.addEntry(ce);      } catch (      CatalogException cex) {        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {          debug.message(1,"Invalid catalog entry type",localName);        } else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {          debug.message(1,"Invalid catalog entry (rbase)",localName);        }      }    }  }}  }
class C{  public void unknownEntry(Vector strings){  if (strings != null && strings.size() > 0) {    String keyword=(String)strings.elementAt(0);    catalogManager.debug.message(2,"Unrecognized token parsing catalog",keyword);  }}  }
class C{  public JSearchPanel(Visualization vis,String group,String field,boolean autoIndex,boolean monitorKeystrokes){  this(vis,group,Visualization.SEARCH_ITEMS,new String[]{field},autoIndex,true);}  }
class C{  @NotNull public TrainPersonGroupAction trainGroup(@NotNull String personGroupId){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  return new TrainPersonGroupAction(cognitiveContext,personGroupId);}  }
class C{  public void fill(double x){  BinInfo bin=findBin(x);  if (bin.isUnderflow) {    m_underflow++;  }  if (bin.isOverflow) {    m_overflow++;  }  if (bin.isInRange) {    m_hist[bin.index]++;  }  if (m_debug) {    System.out.println("debug: fill: value " + x + " # underflows "+ m_underflow+ " # overflows "+ m_overflow+ " bin index "+ bin.index);  }  m_entries++;}  }
class C{  @Override public final String readNullTerminatedAsciiString(){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  byte b;  while (true) {    b=readByte();    if (b == 0) {      break;    }    baos.write(b);  }  byte[] buf=baos.toByteArray();  char[] chrBuf=new char[buf.length];  for (int x=0; x < buf.length; x++) {    chrBuf[x]=(char)buf[x];  }  return String.valueOf(chrBuf);}  }
class C{  public synchronized static void stopLocalZkServer(final boolean deleteDataDir){  if (_zookeeperServerMain != null) {    try {      _zookeeperServerMain.shutdown();      _zookeeperServerMain=null;      if (deleteDataDir) {        org.apache.commons.io.FileUtils.deleteDirectory(new File(_zkDataDir));      }    } catch (    Exception e) {      LOGGER.warn("Caught exception while stopping ZK server",e);      throw new RuntimeException(e);    }  }}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  public void displaySearchTerm(String searchTerm){  cancelSearchTermResolutionAnimation();  getSearchBarControl().setSearchTerm(searchTerm);  resetSearchBarTermOpacity();}  }
class C{  public boolean more(){  return this.myIndex < this.mySource.length();}  }
class C{  public static Properties convertXML(InputStream is) throws SAXException, ParserConfigurationException, IOException {  return convertXML(is,true,null);}  }
class C{  void revalidateGrid(){  if (alignment != null) {    setSize((int)(cellWidth * (alignment.getGapColumnContractor().getLayoutLength()) + 0.5) + 3,(int)Math.max(20,cellHeight));  }  setPreferredSize(getSize());  revalidate();}  }
class C{  protected void checkIdentityFieldMatrix(FieldMatrix<Fraction> m){  for (int i=0; i < m.getRowDimension(); i++) {    for (int j=0; j < m.getColumnDimension(); j++) {      if (i == j) {        Assert.assertEquals(m.getEntry(i,j),Fraction.ONE);      } else {        Assert.assertEquals(m.getEntry(i,j),Fraction.ZERO);      }    }  }}  }
class C{  protected void diff_charsToLines(List<Diff> diffs,List<String> lineArray){  StringBuilder text;  for (  Diff diff : diffs) {    text=new StringBuilder();    for (int y=0; y < diff.text.length(); y++) {      text.append(lineArray.get(diff.text.charAt(y)));    }    diff.text=text.toString();  }}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)((float)Math.ceil(result));}  }
class C{  private ClassName className(TypeElement element){  if (element != null) {    return ClassName.get(element);  }  return null;}  }
class C{  public boolean has(String name){  return this.containsKey(name);}  }
class C{  public void verifyDecisionTablesDoNotShareKeys(Collection<DecisionTableEntity> decisionTables){  Set<String> keySet=new LinkedHashSet<String>();  for (  DecisionTableEntity decisionTable : decisionTables) {    if (keySet.contains(decisionTable.getKey())) {      throw new ActivitiDmnException("The deployment contains decision tables with the same key (decision id attribute), this is not allowed");    }    keySet.add(decisionTable.getKey());  }}  }
class C{  public JimpleBody toJimpleBody(){  ShimpleBody sBody=(ShimpleBody)this.clone();  sBody.eliminateNodes();  JimpleBody jBody=Jimple.v().newBody(sBody.getMethod());  jBody.importBodyContentsFrom(sBody);  return jBody;}  }
class C{  public MatchObject(List<String> subclasses,Map<Integer,List> grant,RuntimeException fault){  this.setSubclasses(subclasses);  this.setFault(fault);  int size=grant.size();  setValue(new List[size]);  setIndex(new int[size]);  int i=0;  for (  Map.Entry<Integer,List> entry : grant.entrySet()) {    getIndex()[i]=entry.getKey().intValue();    getValue()[i++]=entry.getValue();  }}  }
class C{  public static void computeAddresses(PhyloTree tree,Map<Integer,String> id2address,Map<String,Integer> address2id){  Node root=tree.getRoot();  if (root != null)   buildId2AddressRec(root,"",id2address,address2id);}  }
class C{  public String upload_appender_file1(String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String parts[]=this.upload_appender_file(group_name,local_filename,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  private static final void cleanupNamespaceNodes(ZooKeeper zkc,String root,String selfBrokerUrl) throws Exception {  for (  String node : zkc.getChildren(root,false)) {    String currentPath=root + "/" + node;    List<String> children=zkc.getChildren(currentPath,false);    if (children.size() == 0) {      cleanupSingleNamespaceNode(zkc,currentPath,selfBrokerUrl);    } else {      cleanupNamespaceNodes(zkc,currentPath,selfBrokerUrl);    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Exception cause;  try {    init(getName());    return;  } catch (  NullPointerException e) {    cause=e;  }catch (  IllegalArgumentException e) {    cause=e;  }  InvalidObjectException e=new InvalidObjectException(cause.getMessage());  e.initCause(cause);  throw e;}  }
class C{  public StandardParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,grammarPool,parentSettings);  final String[] recognizedFeatures={NORMALIZE_DATA,SCHEMA_ELEMENT_DEFAULT,SCHEMA_AUGMENT_PSVI,GENERATE_SYNTHETIC_ANNOTATIONS,VALIDATE_ANNOTATIONS,HONOUR_ALL_SCHEMALOCATIONS,NAMESPACE_GROWTH,TOLERATE_DUPLICATES,XMLSCHEMA_VALIDATION,XMLSCHEMA_FULL_CHECKING,IGNORE_XSI_TYPE,ID_IDREF_CHECKING,IDENTITY_CONSTRAINT_CHECKING,UNPARSED_ENTITY_CHECKING};  addRecognizedFeatures(recognizedFeatures);  setFeature(SCHEMA_ELEMENT_DEFAULT,true);  setFeature(NORMALIZE_DATA,true);  setFeature(SCHEMA_AUGMENT_PSVI,true);  setFeature(GENERATE_SYNTHETIC_ANNOTATIONS,false);  setFeature(VALIDATE_ANNOTATIONS,false);  setFeature(HONOUR_ALL_SCHEMALOCATIONS,false);  setFeature(NAMESPACE_GROWTH,false);  setFeature(TOLERATE_DUPLICATES,false);  setFeature(IGNORE_XSI_TYPE,false);  setFeature(ID_IDREF_CHECKING,true);  setFeature(IDENTITY_CONSTRAINT_CHECKING,true);  setFeature(UNPARSED_ENTITY_CHECKING,true);  final String[] recognizedProperties={SCHEMA_LOCATION,SCHEMA_NONS_LOCATION,ROOT_TYPE_DEF,ROOT_ELEMENT_DECL,SCHEMA_DV_FACTORY};  addRecognizedProperties(recognizedProperties);}  }
class C{  public void addInterface(CP ifc){  addCPItem(ifc);  interfaces.addElement(ifc);}  }
class C{  protected void hideModels(EpoxyModel<?>... models){  hideModels(Arrays.asList(models));}  }
class C{  private static int correctErrors(int[] codewords,int[] erasures,int numECCodewords) throws ChecksumException {  if (erasures != null && erasures.length > numECCodewords / 2 + MAX_ERRORS || numECCodewords < 0 || numECCodewords > MAX_EC_CODEWORDS) {    throw ChecksumException.getChecksumInstance();  }  return errorCorrection.decode(codewords,numECCodewords,erasures);}  }
class C{  public boolean fullScroll(int direction){  boolean right=direction == View.FOCUS_RIGHT;  int width=getWidth();  mTempRect.left=0;  mTempRect.right=width;  if (right) {    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      mTempRect.right=view.getRight() + getPaddingRight();      mTempRect.left=mTempRect.right - width;    }  }  return scrollAndFocus(direction,mTempRect.left,mTempRect.right);}  }
class C{  public static <T extends Bean>T load(String collection,Bson query,Class<T> clazz){  try {    return load(collection,query,clazz.newInstance());  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(e.getMessage(),e);  }  return null;}  }
class C{  void assignFieldToLocal(Stmt stmt,Local right,String field,Local left){  Set<PurityNode> esc=new HashSet<PurityNode>();  Set<PurityNode> escaping=getEscaping();  localsRemove(left);  Iterator itRight=locals.get(right).iterator();  while (itRight.hasNext()) {    PurityNode nodeRight=(PurityNode)itRight.next();    Iterator itEdges=edges.get(nodeRight).iterator();    while (itEdges.hasNext()) {      PurityEdge edge=(PurityEdge)itEdges.next();      if (edge.isInside() && edge.getField().equals(field))       localsPut(left,edge.getTarget());    }    if (escaping.contains(nodeRight))     esc.add(nodeRight);  }  if (!esc.isEmpty()) {    PurityNode loadNode=cacheNode(new PurityStmtNode(stmt,false));    nodes.add(loadNode);    Iterator<PurityNode> itEsc=esc.iterator();    while (itEsc.hasNext()) {      PurityNode node=itEsc.next();      PurityEdge edge=cacheEdge(new PurityEdge(node,field,loadNode,false));      if (edges.put(node,edge))       backEdges.put(loadNode,edge);    }    localsPut(left,loadNode);  }  if (doCheck)   sanityCheck();}  }
class C{  public Object proxy(){  return proxyObject;}  }
class C{  public IntArrayList data(){  return values;}  }
class C{  public static void picture(double x,double y,String filename,double scaledWidth,double scaledHeight){  Image image=getImage(filename);  if (scaledWidth < 0)   throw new IllegalArgumentException("width is negative: " + scaledWidth);  if (scaledHeight < 0)   throw new IllegalArgumentException("height is negative: " + scaledHeight);  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(scaledWidth);  double hs=factorY(scaledHeight);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + filename + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y); else {    offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  }  draw();}  }
class C{  public static final void sendItemUpdatePacket(Player player,StorageType storageType,Item item,ItemUpdateType updateType){switch (storageType) {case CUBE:    PacketSendUtility.sendPacket(player,new SM_INVENTORY_UPDATE_ITEM(player,item,updateType));  break;case LEGION_WAREHOUSE:if (item.getItemTemplate().isKinah()) {  PacketSendUtility.sendPacket(player,new SM_LEGION_EDIT(0x04,player.getLegion()));  break;}default :PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_UPDATE_ITEM(player,item,storageType.getId(),updateType));}}  }
class C{  public void insertBefore(Unit toInsert,Unit point){  if (point == mHead)   mHead=toInsert;  Chain<Unit> methodBody=mBody.getUnits();  methodBody.insertBefore(toInsert,point);}  }
class C{  public Builder traceTaskExecution(boolean trace){  this.traceTaskExecution=trace;  return this;}  }
class C{  public String serialize(){  return toLockId(socketAddress,shard);}  }
class C{  @Override public void close(){}  }
class C{  @Override protected int changes(){  return changes;}  }
class C{  final V doRemove(Object okey,Object value){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c < 0)       return null;      if (c > 0) {        b=n;        n=f;        continue;      }      if (value != null && !value.equals(v))       return null;      if (!n.casValue(v,null))       break;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key);        if (head.right == null)         tryReduceLevel();      }      return (V)v;    }  }}  }
class C{  public boolean isNone(){  return spaceMode == SpaceMode.NONE;}  }
class C{  @DataProvider public Object[][] ValidAuthProvider(){  String userName=appProperties.getProperty("user-name");  String password=appProperties.getProperty("password");  return new Object[][]{{userName,password}};}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private synchronized void invokeReadAheadCallback(){  if (null != readAheadCallback) {    if (LOG.isTraceEnabled()) {      LOG.trace("Cache has space, schedule the read ahead");    }    readAheadCallback.resumeReadAhead();    readAheadCallback=null;  }}  }
class C{  protected synchronized void recoverChecksumError(ClientCnx cnx,long sequenceId){  OpSendMsg op=pendingMessages.peek();  if (op == null) {    if (log.isDebugEnabled()) {      log.debug("[{}] [{}] Got send failure for timed out msg {}",topic,producerName,sequenceId);    }  } else {    long expectedSequenceId=op.sequenceId;    if (sequenceId == expectedSequenceId) {      boolean corrupted=!verifyLocalBufferIsNotCorrupted(op);      if (corrupted) {        pendingMessages.remove();        semaphore.release(op.numMessagesInBatch);        try {          op.callback.sendComplete(new PulsarClientException.ChecksumException("Checksum failded on corrupt message"));        } catch (        Throwable t) {          log.warn("[{}] [{}] Got exception while completing the callback for msg {}:",topic,producerName,sequenceId,t);        }        ReferenceCountUtil.safeRelease(op.cmd);        op.recycle();        return;      } else {        if (log.isDebugEnabled()) {          log.debug("[{}] [{}] Message is not corrupted, retry send-message with sequenceId {}",topic,producerName,sequenceId);        }      }    } else {      if (log.isDebugEnabled()) {        log.debug("[{}] [{}] Corrupt message is already timed out {}",topic,producerName,sequenceId);      }    }  }  resendMessages(cnx);}  }
class C{  private void format(){  Editable text=getText();  CharSequence formatted=WhatsappViewCompat.extractFlagsForEditText(text);  removeTextChangedListener(mEditTextWatcher);  int selectionEnd=getSelectionEnd();  int selectionStart=getSelectionStart();  setText(formatted);  setSelection(selectionStart,selectionEnd);  Editable formattedEditableText=getText();  sendAfterTextChanged(formattedEditableText);  addTextChangedListener(mEditTextWatcher);}  }
class C{  private boolean isIssueOnSource(Issue issue){  return !(issue.getSourceStart() == 0 && issue.getSourceEnd() == -1);}  }
class C{  public boolean takePhoto(){  this.thePhotoName="MagicalCamera";  this.anotherPhotoName="MagicalCamera";  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  Uri FileUri=getPhotoFileUri(this.thePhotoName,this.anotherPhotoName,this.activity);  if (FileUri != null) {    intent.putExtra(MediaStore.EXTRA_OUTPUT,FileUri);    if (intent.resolveActivity(this.activity.getPackageManager()) != null) {      this.activity.startActivityForResult(intent,TAKE_PHOTO);    }    return true;  } else {    return false;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTrap_ME_TO_B(String value0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200580,value0,skilltarget,skillname);}  }
class C{  @Override public int[] makeCumulativeTestPoints(){  return new int[]{-1,0,1,2,3,4,5,10,20};}  }
class C{  public void remove(IObjectInfo<T> oi){  if (_unidirectionalList)   throw new RuntimeException(" unidirectional-SL cannot support remove");  removeNode((ConcurrentSLObjectInfo)oi,false);  oi.setSubject(null);}  }
class C{  public static MLReader<CMMModel> read(){  return new CMMModelReader();}  }
class C{  @RequestMapping("/") public String login(){  return "user/login";}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_ITEM_MULTI(int num1,String value0s){  return new SM_SYSTEM_MESSAGE(1390005,num1,value0s);}  }
class C{  public TIntHashSet(int initialCapacity,float loadFactor,TIntHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public void updateLang(String locale,String langname,String text){  File f=new File(path + "/i18n/" + locale+ "/"+ langname);  if (f.exists()) {    PrintStream out=null;    try {      out=new PrintStream(new FileOutputStream(f));      out.println(text);      Language.clean();    } catch (    Exception e) {      log.error(e.getMessage(),e);    } finally {      if (out != null) {        out.close();      }    }  }}  }
class C{  public void createModule(boolean performGradleSync){  WizardPath path=myWizardState.getActiveWizardPath();  path.createModule();  if (performGradleSync && myProject != null) {    GradleProjectImporter.getInstance().requestProjectSync(myProject,null);  }}  }
class C{  public boolean isCancelable(){  return false;}  }
class C{  public boolean convertAndDetect(byte[] frame){  if (!initedNative)   return false;  if (frame == null)   return false;  if (!NativeInterface.arwAcceptVideoImage(frame,frameWidth,frameHeight,cameraIndex,cameraIsFrontFacing))   return false;  if (!NativeInterface.arwCapture())   return false;  return NativeInterface.arwUpdateAR();}  }
class C{  public void onStop(){}  }
class C{  public Pair<String,String> next(){  try {    currentHeaderPosition=nextHeaderPosition;    String readHeader=nextLine;    nextHeaderPosition+=readHeader.length() + endOfLineBytes;    readHeader=">" + readHeader.substring(1);    String readSequence=r.readLine();    nextHeaderPosition+=readSequence.length() + endOfLineBytes;    String comments=r.readLine();    nextHeaderPosition+=comments.length() + endOfLineBytes;    if (comments.startsWith("+")) {      String qualityValues=r.readLine();      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;    }    nextLine=r.readLine();    return new Pair<>(readHeader,readSequence);  } catch (  IOException e) {    Basic.caught(e);  }  return null;}  }
class C{  public ClassElemValPair(String name,char kind,String cval){  super(name,kind);  this.cval=new AsciiCP(cval);}  }
class C{  protected VideoEditQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  private void showLabel(boolean animate){  if (animate) {    mLabel.setVisibility(View.VISIBLE);    ViewCompat.setTranslationY(mLabel,mLabel.getHeight());    float scale=mEditText.getTextSize() / mLabel.getTextSize();    ViewCompat.setScaleX(mLabel,scale);    ViewCompat.setScaleY(mLabel,scale);    ViewCompat.animate(mLabel).translationY(0f).scaleY(1f).scaleX(1f).setDuration(ANIMATION_DURATION).setListener(null).setInterpolator(mInterpolator).start();  } else {    mLabel.setVisibility(VISIBLE);  }  mEditText.setHint(null);}  }
class C{  public void addInit(Expr node){  List<Expr> list=(parent == null || state == null) ? getInitListNoTransform() : getInitList();  list.addChild(node);}  }
class C{  private void rebuild(){  rebuild(true);}  }
class C{  @Override public void undo(Transaction tx){}  }
class C{  public Builder withDenyDialogMsg(String denyDialogMsg){  buildObj.denyDialogMsg=denyDialogMsg;  buildObj.showDenyDialog=true;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuff_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201254,skillcaster,skillname);}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  public boolean isDirty(CoordinatorLayout parent,V child){  return false;}  }
class C{  public boolean supportsRename(){  return false;}  }
class C{  public static ActivityAssigner instance(Context context){  ThreadUtils.assertOnUiThread();  if (sInstance == null) {    sInstance=new ActivityAssigner(context);  }  return sInstance;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public int storeByCondition(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fieldsToSet,EntityCondition condition) throws GenericEntityException {  if (modelEntity == null || condition == null) {    return 0;  }  return genericDAO.updateByCondition(delegator,modelEntity,fieldsToSet,condition);}  }
class C{  @SubscribeEvent public void walkingPenalty(LivingUpdateEvent event){  if (!(event.getEntityLiving() instanceof EntityPlayer))   return;  EntityPlayer player=(EntityPlayer)event.getEntityLiving();  if (!EntityPlayerExt.isSurvival(player))   return;  if (!(player.getFoodStats() instanceof BWMFoodStats))   return;  final UUID penaltySpeedUUID=UUID.fromString("c5595a67-9410-4fb2-826a-bcaf432c6a6f");  EntityPlayerExt.changeSpeed(player,penaltySpeedUUID,"Health speed penalty",EntityPlayerExt.getHealthAndExhaustionModifier(player));}  }
class C{  public boolean hasPermissionsByInternalId(String internalId,Permission... permissions){  return hasPermissionsByInternalId(internalId,Arrays.asList(permissions));}  }
class C{  public static Column mean(DataFrame dataFrame,String columnName){  return dataFrame.groupBy(columnName).agg(avg(columnName)).col(columnName);}  }
class C{  public static <T extends ConfigurationEntity>void validateIsUpdate(List<T> configurationObjects){  for (  T config : configurationObjects) {    if (!config.isUpdated()) {      throw new IllegalArgumentException(config.getClass() + " Created through the wrong builder pattern. " + "Please use the 'update' builder provided by the class of the object");    }  }}  }
class C{  private void clearListenerInViewGroup(ViewGroup viewGroup){  if (null == viewGroup) {    return;  }  int count=viewGroup.getChildCount();  for (int n=0; n < count; ++n) {    View childView=viewGroup.getChildAt(n);    if (childView instanceof Switch) {      final Switch switchView=(Switch)childView;      switchView.setOnCheckedChangeListener(null);      return;    } else     if (childView instanceof ViewGroup) {      ViewGroup childGroup=(ViewGroup)childView;      clearListenerInViewGroup(childGroup);    }  }}  }
class C{  public static double computeEntropy(Instances data) throws Exception {  double[] classCounts=new double[data.numClasses()];  Enumeration instEnum=data.enumerateInstances();  while (instEnum.hasMoreElements()) {    Instance inst=(Instance)instEnum.nextElement();    classCounts[(int)inst.classValue()]++;  }  double entropy=0;  for (int j=0; j < data.numClasses(); j++) {    if (classCounts[j] > 0) {      entropy-=classCounts[j] * Utils.log2(classCounts[j]);    }  }  entropy/=(double)data.numInstances();  return entropy + Utils.log2(data.numInstances());}  }
class C{  private BSPTree<Sphere1D> nextInternalNode(BSPTree<Sphere1D> node){  if (childAfter(node).getCut() != null) {    return leafAfter(node).getParent();  }  while (isAfterParent(node)) {    node=node.getParent();  }  return node.getParent();}  }
class C{  public LocalTypeSet(List<Local> locals,List<Type> types){  super(locals.size() * types.size());  this.locals=locals;  this.types=types;  if (!Scene.v().hasFastHierarchy()) {    Scene.v().setFastHierarchy(new FastHierarchy());  }}  }
class C{  private boolean mappingExists(String index,String type){  boolean indexPresent=cacheIndicesTypes.containsKey(index);  boolean typePresent=typeIsPresent(index,type);  return (indexPresent && typePresent);}  }
class C{  public void goToPreviousStep(){  goToStep(activeStep - 1,false);}  }
class C{  public static String formatAmount(double amount,Locale locale){  com.ibm.icu.text.NumberFormat nf=com.ibm.icu.text.NumberFormat.getInstance(locale);  nf.setMinimumFractionDigits(2);  nf.setMaximumFractionDigits(2);  return nf.format(amount);}  }
class C{  public Builder worldCopyJump(Boolean worldCopyJump){  this.worldCopyJump=worldCopyJump;  return this;}  }
class C{  public static Map<String,Object> returnSuccess(){  return returnMessage(ModelService.RESPOND_SUCCESS,null);}  }
class C{  public Response writeShort(short s){  writeByte((byte)((s >> 8) & 0xFF));  writeByte((byte)(s & 0xFF));  return this;}  }
class C{  void onContentCreated(){  int messageTopMargin=mMessageTextView != null ? mMargin / 4 : 0;  mMessageView.setLayoutParams(new LayoutParams(0,messageTopMargin,0,0));  mMainGroup=new Group(Group.filterNullViews(mIconView,mMessageView));  View[] buttons=Group.filterNullViews(mCustomButton,mTertiaryButton,mSecondaryButton,mPrimaryButton);  if (buttons.length != 0)   mButtonGroup=new Group(buttons);  for (  View v : mMainGroup.views)   addView(v);  if (mCustomGroup != null) {    for (    View v : mCustomGroup.views)     addView(v);  }  if (mButtonGroup != null) {    for (    View v : mButtonGroup.views)     addView(v);  }  addView(mCloseButton);}  }
class C{  public boolean isNonsingular(){  for (int j=0; j < n; j++) {    if (LU[j][j] == 0)     return false;  }  return true;}  }
class C{  private boolean inverted(){  return (mClosestDataSetToTouch == null && mChart.isAnyAxisInverted()) || (mClosestDataSetToTouch != null && mChart.isInverted(mClosestDataSetToTouch.getAxisDependency()));}  }
class C{  @NotNull public AddFaceToPersonAction addFaceToPerson(@NotNull String personGroupId,@NotNull String personId,@Nullable String userData,@NotNull InputStream imageInputStream){  return new AddFaceToPersonAction(cognitiveContext,personGroupId,personId,userData,imageInputStream);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"HOUR_FORE_CAST\" ("+ "\"AREAID\" TEXT,"+ "\"HOUR\" TEXT,"+ "\"WEATHER_CONDITION\" TEXT,"+ "\"TEMP\" INTEGER);");}  }
class C{  private void internal_updateSymbolEnumField(Map<String,String> options,FieldIdEnum field,String key){  ValueComboBoxData value=fieldConfigVisitor.getComboBox(field);  Object object=getDefaultFieldValue(field);  String defaultValue=null;  if (object instanceof TextSymbolizer.PolygonAlignOptions) {    TextSymbolizer.PolygonAlignOptions option=(PolygonAlignOptions)object;    defaultValue=option.toString();  } else {    defaultValue=(String)object;  }  if (defaultValue == null) {    ConsoleManager.getInstance().error(this,"Failed to find default for field : " + field);  } else   if (value.getKey().compareToIgnoreCase(defaultValue) != 0) {    options.put(key,value.getKey());  }}  }
class C{  public void transformValues(TLongFunction function){  byte[] states=_states;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public VideoPutTagQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static RasterSymbolizer createDefaultRasterSymbolizer(){  RasterSymbolizer rasterSymbolizer=styleFactory.createRasterSymbolizer();  return rasterSymbolizer;}  }
class C{  public void execute(final String command){  throw new RuntimeException("Internal error: OLD execute()");}  }
class C{  public FileWriterWithEncoding(String filename,CharsetEncoder encoding,boolean append) throws IOException {  this(new File(filename),encoding,append);}  }
class C{  public void put(Object pageObject,FramePath framePath){  frameMapping.put(pageObject,framePath);}  }
class C{  public static List<BigInteger> embeddedSelectorToPartitions(String selector,String type,DataPartitioner partitioner) throws PIRException {  List<BigInteger> parts;  int partitionBits=partitioner.getBits(type);  if (partitionBits > 32) {    int hashedSelector=KeyedHash.hash("aux",32,selector,"MD5");    parts=partitioner.toPartitions(hashedSelector,PrimitiveTypePartitioner.INT);  } else {    parts=partitioner.toPartitions(selector,type);  }  return parts;}  }
class C{  public static CarbonDimension findDimension(List<CarbonDimension> dimensions,String carbonDim){  CarbonDimension findDim=null;  for (  CarbonDimension dimension : dimensions) {    if (dimension.getColName().equalsIgnoreCase(carbonDim)) {      findDim=dimension;      break;    }  }  return findDim;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_INTRO(String value0){  return new SM_SYSTEM_MESSAGE(1300285,value0);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  synchronized public void clear(boolean clearPersistent) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {  if (clearPersistent) {    options.store.delete();  }  initTransientStore();  initPersistentStore();  initTrustManager();}  }
class C{  public void unsetPermission(Permission perm){  unsetPermission(perm.getName());}  }
class C{  protected MarketEditQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {  return String.format("%s\t0\t%s\t0\t255\t*\t*\t0\t0\t*\t*\tAS:i:%d\t",queryName,refName,Math.round(bitScore)) + String.format("AL:Z:%s\t",Basic.replaceSpaces(line,' '));}  }
class C{  public TreeIndex(Table t,RowManager rows,Column col,Comparator cmp) throws IncompatibleComparatorException {  m_table=t;  m_rows=rows;  m_col=col;  m_index=SortedMapFactory.getMap(col.getColumnType(),cmp,false);  index();  m_col.addColumnListener(this);  m_table.addTableListener(this);}  }
class C{  public byte[] toByteArray(){  try {    AxmlWriter aw=new AxmlWriter();    for (    AXmlNamespace ns : this.getDocument().getNamespaces())     aw.ns(ns.getPrefix(),ns.getUri(),ns.getLine());    writeNode(aw,this.getDocument().getRootNode());    return aw.toByteArray();  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public ConfigValue(String debugName,String value){  this.debugName=debugName;  this.value=value;}  }
class C{  public void disableDragItem(){  itemDragEnabled=false;  mItemTouchHelper=null;}  }
class C{  private void validateApplicationUri(String applicationUri,X509Certificate certificate) throws UaException {  try {    Collection<List<?>> subjectAltNames=certificate.getSubjectAlternativeNames();    if (subjectAltNames == null)     subjectAltNames=Collections.emptyList();    for (    List<?> idAndValue : subjectAltNames) {      if (idAndValue != null && idAndValue.size() == 2) {        if (idAndValue.get(0).equals(6)) {          String certificateUri=(String)idAndValue.get(1);          if (!applicationUri.equals(certificateUri)) {            String message=String.format("Certificate URI does not match. certificateUri=%s, applicationUri=%s",certificateUri,applicationUri);            logger.warn(message);            throw new UaException(StatusCodes.Bad_CertificateUriInvalid,message);          }          return;        }      }    }    String message="Certificate does not contain a SubjectAlternativeName URI entry.";    throw new UaException(StatusCodes.Bad_CertificateUriInvalid,message);  } catch (  CertificateParsingException e) {    logger.warn("Error parsing client certificate.",e);    throw new UaException(StatusCodes.Bad_CertificateInvalid);  }}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  OverlapsImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new OverlapsExtended();  } else {    filter=new OverlapsExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public void destroyView() throws CanceledException {  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());  dir.removeViewer(this);  frame.dispose();}  }
class C{  protected BooleanControl(Type type,boolean initialValue){  this(type,initialValue,"true","false");}  }
class C{  Delta newMoveRestart(Storage src,Storage dest){  Delta consistentMarker=dest.isConsistent() ? Deltas.conditional(Conditions.isUndefined(),Deltas.literal(now())) : Deltas.noop();  return Deltas.mapBuilder().update(STORAGE.key(),Deltas.mapBuilder().update(src.getUuidString(),Deltas.mapBuilder().put(Storage.MOVE_TO.key(),dest.getUuidString()).build()).update(dest.getUuidString(),Deltas.mapBuilder().update(StorageState.MIRROR_CONSISTENT.getMarkerAttribute().key(),consistentMarker).remove(Storage.MOVE_TO.key()).remove(Storage.PROMOTION_ID.key()).remove(StorageState.PRIMARY.getMarkerAttribute().key()).remove(StorageState.MIRROR_EXPIRING.getMarkerAttribute().key()).remove(StorageState.MIRROR_EXPIRED.getMarkerAttribute().key()).build()).build()).build();}  }
class C{  public static final void sort(int[] a,Object[] b,int[] abuf,Object[] bbuf,int begin,int end){  int length=end - begin;  if (length < SORT_THRESHOLD) {    insertionsort(a,b,begin,end - 1);    return;  }  for (int i=0, idx=begin; i < length; ++i, ++idx) {    abuf[i]=a[idx];    bbuf[i]=b[idx];  }  mergesort(abuf,a,bbuf,b,begin,end,-begin);}  }
class C{  private static List<FlexibleMapAccessor<String>> makeAccessorList(String accessorsStr){  String[] parts=accessorsStr.split(";");  List<FlexibleMapAccessor<String>> list=new ArrayList<FlexibleMapAccessor<String>>(parts.length);  for (  String part : parts) {    list.add(FlexibleMapAccessor.<String>getInstance(part));  }  return list;}  }
class C{  @Override public String uid(){  String ruid=UUID.randomUUID().toString();  int n=ruid.length();  return "cmmModel" + "_" + ruid.substring(n - 12,n);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ShapeChange_ME_TO_B(String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200559,skilltarget,value0,skillname);}  }
class C{  public void addListener(ISpaceModeListener listener){  _listeners.add(listener);}  }
class C{  public static final SupervisionEvent fromJson(final String json){  return getGson().fromJson(json,SupervisionEventImpl.class);}  }
class C{  public static byte[] readFileToByteArray(File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toByteArray(in,file.length());  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public static WKTGeometry createEmpty(WKTType wktType){  WKTGeometry wktGeometry=new WKTGeometry();  wktGeometry.setGeometryType(wktType);  return wktGeometry;}  }
class C{  public static boolean createMqttUsernameAndPasswordDialog(final Object owner,final String connectionName,final UserCredentials userCredentials){  final Pair<String,String> userInfo=new Pair<String,String>(userCredentials.getUsername(),BaseConfigurationUtils.decodePassword(userCredentials.getPassword()));  Optional<Pair<String,String>> response=DialogFactory.createUsernameAndPasswordDialog("MQTT user credentials","User credentials for connection " + connectionName,userInfo);  if (response.isPresent()) {    userCredentials.setUsername(response.get().getKey());    userCredentials.setPassword(BaseConfigurationUtils.encodePassword(response.get().getValue()));    return true;  }  return false;}  }
class C{  public boolean isTemplateOnTheList(String title,String template){  return grid.isTemplateOnList(title,template);}  }
class C{  public PagerManageObject(int initPosition){  this.pagePosition=initPosition;}  }
class C{  public static String checkEmpty(String string1,String string2,String string3){  if (UtilValidate.isNotEmpty(string1))   return string1; else   if (UtilValidate.isNotEmpty(string2))   return string2; else   if (UtilValidate.isNotEmpty(string3))   return string3; else   return "";}  }
class C{  public static void dump(String title,FloatList list){  System.out.println(title);  FloatList cur=list;  do {    System.out.println("Item: " + cur.value);    cur=cur.next;  } while (cur != list);}  }
class C{  protected DOMUtil(){}  }
class C{  public AccountGetCountersQuery filter(AccountGetCountersFilter... value){  return unsafeParam("filter",value);}  }
class C{  public Application createJmxApplicationInteractive(String connectionString,String displayName,EnvironmentProvider provider,boolean persistent){  return createJmxApplicationInteractive(connectionString,displayName,provider,persistent,false);}  }
class C{  public void tag(String inputFileName,String outputFileName,OutputFormat outputFormat){  List<String> sentences=jsc.textFile(inputFileName).collect();  tag(sentences,outputFileName,outputFormat);}  }
class C{  public String formatDecimal(long value){  return SimpleXYChartUtils.formatDecimal(value * chartFactor,customFormat);}  }
class C{  public int length(){  return length;}  }
class C{  private void updateSymbol(){  StandardData standardData=getStandardData();  Expression opacityExpression=fieldConfigVisitor.getExpression(FieldIdEnum.RASTER_OPACITY);  Expression gammaValueExpression=fieldConfigVisitor.getExpression(FieldIdEnum.RASTER_CONTRAST_GAMMAVALUE);  ContrastEnhancement contrastEnhancement=null;  GroupConfigInterface group=getGroup(GroupIdEnum.RASTER_CONTRAST);  if (group.isPanelEnabled()) {    String method=null;    group=getGroup(GroupIdEnum.RASTER_OVERALL_CONTRAST_METHOD);    if (group != null) {      MultiOptionGroup contrastNormalizeMethodGroup=(MultiOptionGroup)group;      OptionGroup selectedOption=contrastNormalizeMethodGroup.getSelectedOptionGroup();      if (selectedOption != null) {        method=selectedOption.getLabel();      }    }    contrastEnhancement=(ContrastEnhancement)getStyleFactory().contrastEnhancement(gammaValueExpression,method);  }  ColorMap colorMap=fieldConfigVisitor.getColourMap(FieldIdEnum.RASTER_COLOURMAP);  ValueComboBoxData colourMapType=fieldConfigVisitor.getComboBox(FieldIdEnum.RASTER_COLOURMAP_TYPE);  colorMap.setType(Integer.valueOf(colourMapType.getKey()));  Expression geometryField=ExtractGeometryField.getGeometryField(fieldConfigVisitor);  ChannelSelection channelSelection=null;  group=getGroup(GroupIdEnum.RASTER_CHANNELSELECTION);  if (group != null) {    if (group.isPanelEnabled()) {      MultiOptionGroup contrastEnhancementGroup=(MultiOptionGroup)group;      OptionGroup selectedOption=contrastEnhancementGroup.getSelectedOptionGroup();      if (selectedOption.getId() == GroupIdEnum.RASTER_GREY_CHANNEL_OPTION) {        SelectedChannelType greyChannel=extractContrastEnhancementGroup(GroupIdEnum.RASTER_GREY_CHANNEL,FieldIdEnum.RASTER_RGB_GREY_NAME,GroupIdEnum.RASTER_RGB_CHANNEL_GREY_CONTRAST,FieldIdEnum.RASTER_RGB_CHANNEL_GREY_CONTRAST_GAMMA,GroupIdEnum.RASTER_RGB_CHANNEL_GREY_CONTRAST_METHOD);        channelSelection=getStyleFactory().channelSelection(greyChannel);      } else {        SelectedChannelType redChannel=extractContrastEnhancementGroup(GroupIdEnum.RASTER_RGB_CHANNEL_RED,FieldIdEnum.RASTER_RGB_RED_NAME,GroupIdEnum.RASTER_RGB_CHANNEL_RED_CONTRAST,FieldIdEnum.RASTER_RGB_CHANNEL_RED_CONTRAST_GAMMA,GroupIdEnum.RASTER_RGB_CHANNEL_RED_CONTRAST_METHOD);        SelectedChannelType greenChannel=extractContrastEnhancementGroup(GroupIdEnum.RASTER_RGB_CHANNEL_GREEN,FieldIdEnum.RASTER_RGB_GREEN_NAME,GroupIdEnum.RASTER_RGB_CHANNEL_GREEN_CONTRAST,FieldIdEnum.RASTER_RGB_CHANNEL_GREEN_CONTRAST_GAMMA,GroupIdEnum.RASTER_RGB_CHANNEL_GREEN_CONTRAST_METHOD);        SelectedChannelType blueChannel=extractContrastEnhancementGroup(GroupIdEnum.RASTER_RGB_CHANNEL_BLUE,FieldIdEnum.RASTER_RGB_BLUE_NAME,GroupIdEnum.RASTER_RGB_CHANNEL_BLUE_CONTRAST,FieldIdEnum.RASTER_RGB_CHANNEL_BLUE_CONTRAST_GAMMA,GroupIdEnum.RASTER_RGB_CHANNEL_BLUE_CONTRAST_METHOD);        SelectedChannelType[] channels=new SelectedChannelType[3];        channels[0]=redChannel;        channels[1]=greenChannel;        channels[2]=blueChannel;        channelSelection=getStyleFactory().createChannelSelection(channels);      }    }  }  OverlapBehavior overlapBehavior=null;  group=getGroup(GroupIdEnum.RASTER_OVERLAP);  if (group.isPanelEnabled()) {    ValueComboBoxData overlapBehaviorValue=fieldConfigVisitor.getComboBox(FieldIdEnum.RASTER_OVERLAP_BEHAVIOUR);    overlapBehavior=OverlapBehavior.valueOf(overlapBehaviorValue.getKey());  }  ShadedRelief shadedRelief=null;  group=getGroup(GroupIdEnum.RASTER_SHADEDRELIEF);  if (group.isPanelEnabled()) {    shadedRelief=new ShadedReliefImpl();    shadedRelief.setBrightnessOnly(fieldConfigVisitor.getBoolean(FieldIdEnum.RASTER_SHADEDRELIEF_BRIGHTNESS));    shadedRelief.setReliefFactor(fieldConfigVisitor.getExpression(FieldIdEnum.RASTER_SHADEDRELIEF_FACTOR));  }  Symbolizer symbolizer=null;  RasterSymbolizer rasterSymbolizer=(RasterSymbolizer)getStyleFactory().rasterSymbolizer(standardData.name,geometryField,standardData.description,standardData.unit,opacityExpression,channelSelection,overlapBehavior,colorMap,contrastEnhancement,shadedRelief,symbolizer);  if (vendorOptionRasterFactory != null) {    vendorOptionRasterFactory.updateSymbol(rasterSymbolizer);  }  SelectedSymbol.getInstance().replaceSymbolizer(rasterSymbolizer);  this.fireUpdateSymbol();}  }
class C{  public int read() throws IOException {  throw new IllegalArgumentException("this method is not yet supported");}  }
class C{  private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public AbstractSpaceModeChangeEvent(IJSpace space,SpaceMode spaceMode){  super(space);  this.spaceMode=spaceMode;}  }
class C{  public void enableDragItem(@NonNull ItemTouchHelper itemTouchHelper){  enableDragItem(itemTouchHelper,NO_TOGGLE_VIEW,true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PET_CONDITION_UP_01(String value0){  return new SM_SYSTEM_MESSAGE(1400866,value0);}  }
class C{  protected DateTimeData parse(String str) throws SchemaDateTimeException {  DateTimeData date=new DateTimeData(str,this);  int len=str.length();  date.year=YEAR;  date.day=DAY;  if (str.charAt(0) != '-' || str.charAt(1) != '-') {    throw new SchemaDateTimeException("Invalid format for gMonth: " + str);  }  int stop=4;  date.month=parseInt(str,2,stop);  if (str.length() >= stop + 2 && str.charAt(stop) == '-' && str.charAt(stop + 1) == '-') {    stop+=2;  }  if (stop < len) {    if (!isNextCharUTCSign(str,stop,len)) {      throw new SchemaDateTimeException("Error in month parsing: " + str);    } else {      getTimeZone(str,date,stop,len);    }  }  validateDateTime(date);  saveUnnormalized(date);  if (date.utc != 0 && date.utc != 'Z') {    normalize(date);  }  date.position=1;  return date;}  }
class C{  @Override public void updateUndoRedoState(boolean undoAllowed,boolean redoAllowed){  menuItemUndo.setEnabled(undoAllowed);  menuItemRedo.setEnabled(redoAllowed);}  }
class C{  protected static char parseNextCharacter(final String source,final ParsePosition pos){  int index=pos.getIndex();  final int n=source.length();  char ret=0;  if (index < n) {    char c;    do {      c=source.charAt(index++);    } while (Character.isWhitespace(c) && index < n);    pos.setIndex(index);    if (index < n) {      ret=c;    }  }  return ret;}  }
class C{  public static String filenameEncode(String string){  if (string != null) {    string=string.replaceAll(ILLEGAL_FILENAME_CHARS_REGEX,"");    if (string.length() > 255) {      string=string.substring(0,255);    }  }  return string;}  }
class C{  public FeatureFileIndexingResult retrieve(FeatureVector v){  int level=0;  if (tree == null) {    throw new RuntimeException("Can't retrieve candidate units if a tree has not been built." + " (Run this.deepSort(int[]) or this.deepFill(MaryNode) first.)");  }  MaryNode n=tree;  MaryNode next=null;  while (!n.isLeaf()) {    next=n.getChild(v.getFeatureAsInt(n.getFeatureIndex()));    if (next != null) {      n=next;      level++;    } else     break;  }  FeatureFileIndexingResult qr=new FeatureFileIndexingResult(getFeatureVectors(n.from,n.to),level);  return (qr);}  }
class C{  public LeaseReaper(String threadName){  super(threadName);  this.setDaemon(true);  this.start();}  }
class C{  @Override public void accept(TestValueVisitor visitor,FieldIdEnum fieldId){  visitor.setTestValue(fieldId,this.value);}  }
class C{  public ArrayElemValPair(String name,char kind,ArrayList list){  super(name,kind);  this.list=list;}  }
class C{  void invokeMenuPath(@NotNull String... path){  JMenuItem menuItem=findActionMenuItem(path);  assertWithMessage("Menu path \"" + Joiner.on(" -> ").join(path) + "\" is not enabled").that(menuItem.isEnabled()).isTrue();  myRobot.click(menuItem);}  }
class C{  public RegulaFalsiSolver(){  super(DEFAULT_ABSOLUTE_ACCURACY,Method.REGULA_FALSI);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  public static String[] split(byte[] text,int offset,int end,byte splitChar){  while (Character.isWhitespace((char)text[offset]) && offset < end)   offset++;  int count=0;  for (int i=offset; i < end; i++) {    if (text[i] == splitChar)     count++;  }  String[] result=new String[count];  count=0;  for (int i=offset; i < end; i++) {    if (text[i] == splitChar) {      result[count++]=new String(text,offset,i - offset);      offset=i + 1;    }  }  return result;}  }
class C{  public int jdkver(){  return soot.PhaseOptions.getInt(options,"jdkver");}  }
class C{  public Location checkPoint(final double point,final double tolerance){  if (point < lower - tolerance || point > upper + tolerance) {    return Location.OUTSIDE;  } else   if (point > lower + tolerance && point < upper - tolerance) {    return Location.INSIDE;  } else {    return Location.BOUNDARY;  }}  }
class C{  @Override protected void addSubView(View child,int index){  if (child == null || getRealView() == null) {    return;  }  if (child instanceof WXBaseRefreshLayout) {    return;  }  int count=getRealView().getChildCount();  index=index >= count ? -1 : index;  if (index == -1) {    getRealView().addView(child);  } else {    getRealView().addView(child,index);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_MAGIC_TARGET(String skilltarget){  return new SM_SYSTEM_MESSAGE(1210227,skilltarget);}  }
class C{  public static void init(){  Registries.register(HorseArmorType.class);  registerHorseArmor(new ResourceLocation("none"),HorseArmorType.NONE);  registerHorseArmor(new ResourceLocation("iron"),HorseArmorType.IRON);  registerHorseArmor(new ResourceLocation("gold"),HorseArmorType.GOLD);  registerHorseArmor(new ResourceLocation("diamond"),HorseArmorType.DIAMOND);  Registries.register(WorldGenerator.class);}  }
class C{  public static ViewTapTarget forView(View view,CharSequence title,@Nullable CharSequence description){  return new ViewTapTarget(view,title,description);}  }
class C{  private static boolean isDebugEnabled(){  try {    String val=SecuritySupport.getSystemProperty("xerces.debug");    return (val != null && (!"false".equals(val)));  } catch (  SecurityException se) {  }  return false;}  }
class C{  public Builder(){}  }
class C{  public BlockingResourcePool(IResourceFactory<R> resourceFactory,int minResources,int maxResources){  this(resourceFactory,minResources,maxResources,null);}  }
class C{  static public void enrichLabels(NLPNode[] tree){  Set<String> subj=DSUtils.toHashSet(DEP_CSUBJ,DEP_NSUBJ);  List<NLPNode> list;  for (  NLPNode node : tree) {    if (node.isDependencyLabel(DEP_ADVMOD) && ENUtils.isNegation(node.getWordForm()))     node.setDependencyLabel(DEP_NEG);    if (node.containsDependentByLabel(DEP_AUXPASS)) {      for (      NLPNode child : node.getDependentListByLabel(subj))       child.setDependencyLabel(child.getDependencyLabel() + DEP_PASS);    }    if ((list=node.getDependentListByLabel(DEP_DOBJ)).size() > 1)     list.get(0).setDependencyLabel(DEP_DATIVE);  }}  }
class C{  public ValidEdgePredicate(Graph g){  m_g=g;}  }
class C{  public static int uniform(int a,int b){  if (b <= a)   throw new IllegalArgumentException("Invalid range");  if ((long)b - a >= Integer.MAX_VALUE)   throw new IllegalArgumentException("Invalid range");  return a + uniform(b - a);}  }
class C{  public GroupsEditManagerQuery editManager(UserActor actor,int groupId,int userId){  return new GroupsEditManagerQuery(getClient(),actor,groupId,userId);}  }
class C{  @Override public void performWriteRequest(InsertAllRequest request,String topic,Set<Schema> schemas){  InsertAllResponse writeResponse=bigQuery.insertAll(request);  if (writeResponse.hasErrors()) {    logger.warn("You may want to enable auto schema updates by specifying" + "{}=true in the properties file",BigQuerySinkTaskConfig.SCHEMA_UPDATE_CONFIG);    throw new BigQueryConnectException(writeResponse.insertErrors());  } else {    logger.debug("table insertion completed with no reported errors");  }}  }
class C{  public void init$Children(){}  }
class C{  public GroupsSetCallbackSettingsQuery boardPostRestore(Boolean value){  return unsafeParam("board_post_restore",value);}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  public void print(int w,int d){  print(new PrintWriter(System.out,true),w,d);}  }
class C{  public static DockerPortMapping fromString(String portMappingStr){  DockerPortMapping portMapping=new DockerPortMapping();  Matcher matcher=PORT_PATTERN.matcher(portMappingStr);  if (!matcher.matches()) {    throw new IllegalArgumentException("Invalid format for port mapping: " + portMappingStr);  }  portMapping.hostIp=matcher.group(1);  portMapping.hostPort=matcher.group(2);  portMapping.containerPort=matcher.group(3);  String protocolStr=matcher.group(5);  if (protocolStr != null) {    portMapping.protocol=Protocol.fromString(protocolStr);  } else {    portMapping.protocol=Protocol.TCP;  }  if ("".equals(portMapping.hostPort)) {    portMapping.hostPort=null;  }  return portMapping;}  }
class C{  public static void closeQuietly(LineIterator iterator){  if (iterator != null) {    iterator.close();  }}  }
class C{  public ClassPath(@Nonnull Iterable<DexFile> classPath,int api){  this(Lists.newArrayList(classPath),api == 17);}  }
class C{  @Override public final int readInt(){  final int byte1=bs.readByte();  final int byte2=bs.readByte();  final int byte3=bs.readByte();  final int byte4=bs.readByte();  return (byte4 << 24) + (byte3 << 16) + (byte2 << 8)+ byte1;}  }
class C{  public FST(InputStream inStream) throws IOException {  load(inStream);}  }
class C{  public int[] bestPath(){  if (score == null || score.length == 0)   return null;  int numLabels=score.length;  int n=score[0].length;  double[][] tabular=new double[numLabels][n];  for (int i=0; i < numLabels; i++)   tabular[i][0]=score[i][0];  int[] path=new int[n];  for (int j=1; j < n; j++) {    for (int i=0; i < numLabels; i++) {      double max=Double.NEGATIVE_INFINITY;      for (int k=0; k < numLabels; k++) {        double s=tabular[k][j - 1] + score[i][j];        if (s > max) {          max=s;        }      }      tabular[i][j]=max;    }  }  double max=Double.NEGATIVE_INFINITY;  for (int i=0; i < numLabels; i++) {    if (tabular[i][n - 1] > max) {      max=tabular[i][n - 1];      path[n - 1]=i;    }  }  for (int j=n - 2; j >= 0; j--) {    int u=path[j + 1];    for (int k=0; k < numLabels; k++) {      if (new Double(tabular[u][j + 1]).equals(new Double(tabular[k][j] + score[u][j + 1]))) {        path[j]=k;        break;      }    }  }  return path;}  }
class C{  private void newDrawableDialog(){  if (Utils.isWindows()) {    newDrawableDialogWindows();  } else {    newDrawableDialogVisUI();  }}  }
class C{  @Override public Schema schema(){  return tp.schema();}  }
class C{  public OAuth2AccessToken(){  super("stub","stub",0,"stub","stub","stub");  expirationDate=0;}  }
class C{  private void commitLocalTransaction() throws CommitFailedException {  if (_tx == null) {    return;  }  if (_logger.isLoggable(Level.FINEST)) {    _logger.log(Level.FINEST,"Committing local transaction: " + _tx);  }  try {    _tx.commit();  } catch (  Exception e) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Failed to commit local transaction: " + _tx,e);    }    throw new CommitFailedException(e);  }}  }
class C{  private LinkedList<Diff> diff_bisectSplit(String text1,String text2,int x,int y,long deadline){  String text1a=text1.substring(0,x);  String text2a=text2.substring(0,y);  String text1b=text1.substring(x);  String text2b=text2.substring(y);  LinkedList<Diff> diffs=diff_main(text1a,text2a,false,deadline);  LinkedList<Diff> diffsb=diff_main(text1b,text2b,false,deadline);  diffs.addAll(diffsb);  return diffs;}  }
class C{  public TestNavigatingActivityDelegate(@NonNull ActivityDelegateCallback callback,@NonNull NavigatingDelegateCallback navigatingCallback,@NonNull Activity delegatedActivity){  super(callback,navigatingCallback,delegatedActivity);}  }
class C{  public boolean isTail(){  return children.isEmpty();}  }
class C{  public void saveFolderInDB(){  if (mCreateFullPath && getStorageManager().getFileByPath(FileStorageUtils.getParentPath(mRemotePath)) == null) {    String[] subFolders=mRemotePath.split("/");    String composedRemotePath="/";    for (int i=0; i < subFolders.length; i++) {      String subFolder=subFolders[i];      if (!subFolder.isEmpty()) {        composedRemotePath=composedRemotePath + subFolder + "/";        mRemotePath=composedRemotePath;        saveFolderInDB();      }    }  } else {    OCFile newDir=new OCFile(mRemotePath);    newDir.setMimetype(MimeType.DIRECTORY);    long parentId=getStorageManager().getFileByPath(FileStorageUtils.getParentPath(mRemotePath)).getFileId();    newDir.setParentId(parentId);    newDir.setModificationTimestamp(System.currentTimeMillis());    getStorageManager().saveFile(newDir);    Log_OC.d(TAG,"Create directory " + mRemotePath + " in Database");  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void removeRepurchaseItems(Player player){  repurchaseItems.removeAll(player.getObjectId());}  }
class C{  @Deprecated public EventSessionConfig(String schemaName) throws IOException {  if (schemaName == null)   return;  ClassLoader cl=Thread.currentThread().getContextClassLoader();  if (cl == null)   cl=getClass().getClassLoader();  Properties props=new Properties();  props.load(cl.getResourceAsStream("config/" + schemaName + ".properties"));  loadFromProps(props);}  }
class C{  public void add(Comparator c){  if (c == null)   return;  if (m_cmp.length == m_size) {    Comparator[] cmp=new Comparator[m_size + INCREMENT];    System.arraycopy(m_cmp,0,cmp,0,m_size);    m_cmp=cmp;  }  m_cmp[m_size++]=c;}  }
class C{  @Override public void pcdata(Augmentations augs) throws XNIException {}  }
class C{  private boolean stillInterested(String[] regGroups,String[] desiredGroups){  if (desiredGroups == DiscoveryGroupManagement.ALL_GROUPS)   return true;  if (desiredGroups.length == 0)   return false;  for (int i=0; i < regGroups.length; i++) {    for (int j=0; j < desiredGroups.length; j++) {      if (regGroups[i].equals(desiredGroups[j]))       return true;    }  }  return false;}  }
class C{  public void addWorking(boolean working){  query.append(" +working:" + working);}  }
class C{  public boolean isClosed(){  return m_closed;}  }
class C{  public AccountSaveProfileInfoQuery bdate(String value){  return unsafeParam("bdate",value);}  }
class C{  public PlayerLevelUpRewards(final Status status){  this.status=status;  this.rewards=Collections.emptyList();  this.unlockedItems=Collections.emptyList();}  }
class C{  public boolean isParameter(){  if (o1 instanceof SootMethod && o2 instanceof Integer)   return true;  return false;}  }
class C{  private boolean imageOutline(DefaultMutableTreeNode node){  boolean isOutline=false;  if (node != null) {    DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)node.getParent();    if (parentNode != null) {      if (parentNode.getUserObject() instanceof RasterSymbolizer) {        isOutline=true;      }    }  }  return isOutline;}  }
class C{  protected boolean isEnabled() throws TeamException {  IResource[] resources=super.getSelectedResources();  if (resources.length == 0)   return false;  if (!isEnabledForMultipleResources() && resources.length != 1)   return false;  List folderPaths=new ArrayList();  List filePaths=new ArrayList();  for (int i=0; i < resources.length; i++) {    IResource resource=resources[i];    if ((!resource.isAccessible()) && (!isEnabledForInaccessibleResources()))     return false;    if (SVNWorkspaceRoot.isLinkedResource(resource))     return false;    if (RepositoryProvider.getProvider(resource.getProject(),SVNProviderPlugin.getTypeId()) == null) {      return false;    }    IPath resourceFullPath=resource.getFullPath();    if (resource.getType() == IResource.FILE) {      filePaths.add(resourceFullPath);    } else {      folderPaths.add(resourceFullPath);    }    ISVNLocalResource svnResource=SVNWorkspaceRoot.getSVNResourceFor(resource);    if (!isEnabledForSVNResource(svnResource)) {      return false;    }  }  if (!folderPaths.isEmpty()) {    for (Iterator fileIter=filePaths.iterator(); fileIter.hasNext(); ) {      IPath resourcePath=(IPath)fileIter.next();      for (Iterator it=folderPaths.iterator(); it.hasNext(); ) {        IPath folderPath=(IPath)it.next();        if (folderPath.isPrefixOf(resourcePath)) {          return false;        }      }    }  }  return true;}  }
class C{  public static IProgressMonitor subMonitorFor(IProgressMonitor monitor,int ticks){  if (monitor == null)   return new NullProgressMonitor();  if (monitor instanceof NullProgressMonitor)   return monitor;  return new SubProgressMonitor(monitor,ticks,SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX);  mScrollerY.fling(startY,velocityY,minY,maxY,overY);}  }
class C{  public GroupByKey(){}  }
class C{  public Builder discCacheExtraOptions(int maxImageWidthForDiscCache,int maxImageHeightForDiscCache,CompressFormat compressFormat,int compressQuality,BitmapProcessor processorForDiscCache){  this.maxImageWidthForDiscCache=maxImageWidthForDiscCache;  this.maxImageHeightForDiscCache=maxImageHeightForDiscCache;  this.imageCompressFormatForDiscCache=compressFormat;  this.imageQualityForDiscCache=compressQuality;  this.processorForDiscCache=processorForDiscCache;  return this;}  }
class C{  IVScanResult(Pokemon pokemon,double estimatedPokemonLevel,int pokemonCP,boolean tooManyPossibilities){  this.pokemon=pokemon;  this.estimatedPokemonLevel=estimatedPokemonLevel;  this.scannedCP=pokemonCP;  this.tooManyPossibilities=tooManyPossibilities;}  }
class C{  public static GenericValue create(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){  GenericValue newValue=new GenericValue();  newValue.init(delegator,modelEntity,singlePkValue);  return newValue;}  }
class C{  public boolean isTimeoutErr(){  return timeoutErr;}  }
class C{  public void insertPanel(FieldConfigBase fieldConfig,BasePanel panel,Box optionBox){  int fieldIndex=-1;  Box boxToUpdate=null;  if (optionBox != null) {    boxToUpdate=optionBox;  } else {    boxToUpdate=box;  }  if (boxToUpdate != null) {    for (int index=0; index < boxToUpdate.getComponentCount(); index++) {      Component component=boxToUpdate.getComponent(index);      if (fieldConfig.getPanel() == component) {        fieldIndex=index;        break;      }    }    if (panel != null) {      if (padding != null) {        padding.removePadding();      }      logger.debug(String.format("%s : %s -> %s",Localisation.getString(StandardPanel.class,"StandardPanel.addingPanel"),panel.getClass().getName(),this.getClass().getName()));      if (fieldIndex > -1) {        fieldIndex++;      }      boxToUpdate.add(panel.box,fieldIndex);      if (padding != null) {        padding.addPadding();      }    }  }}  }
class C{  public Property build(){  return build(null);}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public IDataProcessStatus makeCopy(){  IDataProcessStatus copy=new DataProcessTaskStatus();  copy.setTableName(this.tableName);  copy.setDataloadstatusid(this.dataloadstatusid);  copy.setDesc(this.desc);  copy.setKey(this.key);  copy.setDatabaseName(databaseName);  copy.setStatus(status);  return copy;}  }
class C{  public void writeByte(byte value) throws JMSException {  initializeWriting();  try {    this.dataOut.writeByte(value);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  protected void addFieldConfig(FieldConfigBase fieldConfig){  fieldConfigList.add(fieldConfig);}  }
class C{  public void showOverlapGraph(Director dir,ProgressListener progress) throws CanceledException {  final OverlapGraphViewer overlapGraphViewer=new OverlapGraphViewer(dir,overlapGraph,node2readName,paths);  overlapGraphViewer.apply(progress);}  }
class C{  @Override public void sendKeys(CharSequence... keysToSend){  String textBefore=getValue();  if (isKeys(keysToSend[0]) || isUploadField(element)) {    element.sendKeys(keysToSend);  } else {    for (int i=0; i < SEND_KEYS_RETRIES; i++) {      element.sendKeys(keysToSend);      boolean success=StringUtils.endsWith(getValue(),keysToSend[0]);      if (success) {        break;      } else {        element.clear();        this.sendKeys(textBefore);      }    }  }}  }
class C{  public UsersSearchQuery hasPhoto(Boolean value){  return unsafeParam("has_photo",value);}  }
class C{  public static PageRespJson buildFailureResponse(String errorMsg,Integer reqId){  PageRespJson respJson=new PageRespJson();  respJson.setCode(ResponseCode.FAILURE.getCode());  respJson.setMsg(errorMsg);  respJson.setReqId(reqId);  respJson.setRecordsTotal(0L);  respJson.setRecordsFiltered(0L);  return respJson;}  }
class C{  public static QuerySchema put(QuerySchema schema){  return registry.put(schema.getSchemaName(),schema);}  }
class C{  public void startPrefixMapping(String prefix,String uri,Augmentations augs) throws XNIException {}  }
class C{  public BigDecimal bigDecimalValue(){  return d;}  }
class C{  protected TinkerApplication(int tinkerFlags){  this(tinkerFlags,"com.tencent.tinker.loader.app.DefaultApplicationLike",TinkerLoader.class.getName(),false);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Comparable>T limit(final T min,final T value,final T max){  if (value.compareTo(min) < 0) {    return min;  }  if (value.compareTo(max) > 0) {    return max;  }  return value;}  }
class C{  public DocumentNGramGaussNormGraph(){  InitGraphs();}  }
class C{  public void validate(List<ValidationException> exceptionList){  super.validate(exceptionList);  final boolean runAllValidators=Options.v().debug() || Options.v().validate();  for (  BodyValidator validator : getValidators()) {    if (!validator.isBasicValidator() && !runAllValidators)     continue;    validator.validate(this,exceptionList);  }}  }
class C{  protected AudioGetByIdQuery audios(List<String> value){  return unsafeParam("audios",value);}  }
class C{  private ApiKeyAuthenticationInfo createAuthenticationInfo(ApiKey apiKey){  return new ApiKeyAuthenticationInfo(apiKey,getName());}  }
class C{  private boolean parentProcessStillRunning(){  long parentProcessId=getParentProcessId();  if (parentProcessId == 0)   return true;  String command;  if (Platform.OS_WIN32.equals(Platform.getOS())) {    command="cmd /c \"tasklist /FI \"PID eq " + parentProcessId + "\" | findstr "+ parentProcessId+ "\"";  } else {    command="ps -p " + parentProcessId;  }  try {    Process process=Runtime.getRuntime().exec(command);    int processResult=process.waitFor();    return processResult == 0;  } catch (  IOException|InterruptedException e) {    e.printStackTrace();    return true;  }}  }
class C{  public int model(){  return theType.model();}  }
class C{  public static Pair<Double,Double> computeCGContentAndCoverage(Alignment alignment,ProgressListener progressListener) throws CanceledException {  if (progressListener != null) {    progressListener.setTasks("Computing CG content and coverage","");    progressListener.setMaximum(alignment.getNumberOfSequences());    progressListener.setProgress(0);  }  int cgCount=0;  int atCount=0;  int otherLetterCount=0;  int firstCol=Integer.MAX_VALUE;  int lastCol=0;  for (int row=0; row < alignment.getNumberOfSequences(); row++) {    Lane lane=alignment.getLane(row);    firstCol=Math.min(firstCol,lane.getFirstNonGapPosition());    lastCol=Math.max(lastCol,lane.getLastNonGapPosition());    String block=lane.getBlock();    for (int i=0; i < block.length(); i++) {      int ch=Character.toUpperCase(block.charAt(i));      if (ch == 'C' || ch == 'G') {        cgCount++;      } else       if (ch == 'A' || ch == 'T' || ch == 'U') {        atCount++;      } else       if (Character.isLetter(ch))       otherLetterCount++;    }    if (progressListener != null)     progressListener.incrementProgress();  }  double totalCount=cgCount + atCount + otherLetterCount;  double cgContent=100 * (totalCount > 0 ? (double)cgCount / totalCount : 0);  double totalLength=lastCol - firstCol + 1;  double coverage=(firstCol <= lastCol ? totalCount / totalLength : 0);  return new Pair<>(cgContent,coverage);}  }
class C{  @SuppressWarnings("unused") private static void buildSinCosTables(double[] SINE_TABLE_A,double[] SINE_TABLE_B,double[] COSINE_TABLE_A,double[] COSINE_TABLE_B,int SINE_TABLE_LEN,double[] TANGENT_TABLE_A,double[] TANGENT_TABLE_B){  final double result[]=new double[2];  for (int i=0; i < 7; i++) {    double x=i / 8.0;    slowSin(x,result);    SINE_TABLE_A[i]=result[0];    SINE_TABLE_B[i]=result[1];    slowCos(x,result);    COSINE_TABLE_A[i]=result[0];    COSINE_TABLE_B[i]=result[1];  }  for (int i=7; i < SINE_TABLE_LEN; i++) {    double xs[]=new double[2];    double ys[]=new double[2];    double as[]=new double[2];    double bs[]=new double[2];    double temps[]=new double[2];    if ((i & 1) == 0) {      xs[0]=SINE_TABLE_A[i / 2];      xs[1]=SINE_TABLE_B[i / 2];      ys[0]=COSINE_TABLE_A[i / 2];      ys[1]=COSINE_TABLE_B[i / 2];      splitMult(xs,ys,result);      SINE_TABLE_A[i]=result[0] * 2.0;      SINE_TABLE_B[i]=result[1] * 2.0;      splitMult(ys,ys,as);      splitMult(xs,xs,temps);      temps[0]=-temps[0];      temps[1]=-temps[1];      splitAdd(as,temps,result);      COSINE_TABLE_A[i]=result[0];      COSINE_TABLE_B[i]=result[1];    } else {      xs[0]=SINE_TABLE_A[i / 2];      xs[1]=SINE_TABLE_B[i / 2];      ys[0]=COSINE_TABLE_A[i / 2];      ys[1]=COSINE_TABLE_B[i / 2];      as[0]=SINE_TABLE_A[i / 2 + 1];      as[1]=SINE_TABLE_B[i / 2 + 1];      bs[0]=COSINE_TABLE_A[i / 2 + 1];      bs[1]=COSINE_TABLE_B[i / 2 + 1];      splitMult(xs,bs,temps);      splitMult(ys,as,result);      splitAdd(result,temps,result);      SINE_TABLE_A[i]=result[0];      SINE_TABLE_B[i]=result[1];      splitMult(ys,bs,result);      splitMult(xs,as,temps);      temps[0]=-temps[0];      temps[1]=-temps[1];      splitAdd(result,temps,result);      COSINE_TABLE_A[i]=result[0];      COSINE_TABLE_B[i]=result[1];    }  }  for (int i=0; i < SINE_TABLE_LEN; i++) {    double xs[]=new double[2];    double ys[]=new double[2];    double as[]=new double[2];    as[0]=COSINE_TABLE_A[i];    as[1]=COSINE_TABLE_B[i];    splitReciprocal(as,ys);    xs[0]=SINE_TABLE_A[i];    xs[1]=SINE_TABLE_B[i];    splitMult(xs,ys,as);    TANGENT_TABLE_A[i]=as[0];    TANGENT_TABLE_B[i]=as[1];  }}  }
class C{  public static void main(String[] args){  Hashtable hSwitches=utils.parseCommandLineSwitches(args);  if (utils.getSwitch(hSwitches,"?","").length() > 0) {    printUsage();    System.exit(0);  }  int NMin, NMax, Dist;  String DocumentClass, ComparatorClass, SummaryFile, ModelDir, ModelFiles, PrependPerLine;  boolean Silent, Merge, bAvoidSelfComparison, bJack;  try {    Silent=utils.getSwitch(hSwitches,"s","FALSE").equals("TRUE");    NMin=Integer.valueOf(utils.getSwitch(hSwitches,"nMin","3"));    NMax=Integer.valueOf(utils.getSwitch(hSwitches,"nMax","3"));    Dist=Integer.valueOf(utils.getSwitch(hSwitches,"dist","3"));    DocumentClass=utils.getSwitch(hSwitches,"docClass",NGramSymWinDocument.class.getName());    ComparatorClass=utils.getSwitch(hSwitches,"compClass",StandardDocumentComparator.class.getName());    SummaryFile=utils.getSwitch(hSwitches,"summary","summary.txt");    ModelDir=utils.getSwitch(hSwitches,"modelDir","models" + System.getProperty("file.separator"));    ModelFiles=utils.getSwitch(hSwitches,"models","");    if (ModelFiles.length() > 0) {      if (!Silent)       System.err.println("Model files explicitly declared. Ignoring" + " model dir.");    }    Merge=utils.getSwitch(hSwitches,"merge","FALSE").equals("TRUE");    bAvoidSelfComparison=utils.getSwitch(hSwitches,"avoidSelfComparison","FALSE").equals("TRUE");    bJack=utils.getSwitch(hSwitches,"jack","FALSE").equals("TRUE");    PrependPerLine=utils.getSwitch(hSwitches,"prepend","");    if (bJack && bAvoidSelfComparison)     System.err.println("WARNING: Both jackknifing and self-comparison " + "avoidance have been requested.");    if (!Silent)     System.err.println("Using parameters:\n" + hSwitches);  } catch (  ClassCastException cce) {    System.err.println("Malformed switch:" + cce.getMessage() + ". Aborting...");    printUsage();    return;  }  summarySingleFileEvaluator ssfeEval=new summarySingleFileEvaluator(DocumentClass,ComparatorClass,NMin,NMax,Dist);  ssfeEval.AvoidSelfComparison=bAvoidSelfComparison;  ssfeEval.Jackknifing=bJack;  ssfeEval.Silent=Silent;  Set<String> ssModels;  double dRes=Double.NaN;  if (ModelFiles.length() == 0) {    DocumentSet dsModels=new DocumentSet(ModelDir,1.0);    dsModels.createSets(true);    ssModels=new TreeSet<String>(dsModels.toFilenameSet(DocumentSet.FROM_WHOLE_SET));  } else {    ssModels=new TreeSet<String>(Arrays.asList(ModelFiles.split(";")));    Iterator<String> iModels=ssModels.iterator();    while (iModels.hasNext()) {      String sCandModel=iModels.next();      if (sCandModel.trim().length() == 0) {        ssModels.remove(sCandModel);        iModels=ssModels.iterator();      }    }  }  if (!Merge)   dRes=ssfeEval.doCompare(SummaryFile,ssModels); else   dRes=ssfeEval.doGraphCompareToSet(SummaryFile,ssModels,DocumentClass,ComparatorClass,NMin,NMax,Dist);synchronized (System.out) {    System.out.println(String.format("%s\t%10.8f",PrependPerLine + new File(SummaryFile).getName(),dRes));  }}  }
class C{  protected final void writeS(String text,int size){  if (text == null) {    buf.put(new byte[size]);  } else {    final int len=text.length();    for (int i=0; i < len; i++) {      buf.putChar(text.charAt(i));    }    buf.put(new byte[size - (len * 2)]);  }}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  public Resource find(String type,String id){  try {    return _doc.find(type,id);  } catch (  ResourceNotFoundException e) {    return null;  }}  }
class C{  public static void create(FSTree tree,DefaultTreeModel model){  fileSystemTreeComponent=tree;  treeModel=model;}  }
class C{  @Override public TreeSet<DimensionRow> containsFilterOperation(TreeSet<DimensionRow> dimensionRows,ApiFilter filter){  TreeSet<DimensionRow> filteredDimensionRows=new TreeSet<>();  StringBuilder containsRegex=new StringBuilder(".*(");  for (  String filterValue : filter.getValues()) {    containsRegex.append(filterValue).append("|");  }  containsRegex.replace(containsRegex.length() - 1,containsRegex.length(),").*");  for (  DimensionRow dimensionRow : dimensionRows) {    String value=dimensionRow.get(filter.getDimensionField());    if (value.matches(containsRegex.toString())) {      filteredDimensionRows.add(dimensionRow);    }  }  return filteredDimensionRows;}  }
class C{  protected void initFileLocation(){  PathService pathService=CarbonCommonFactory.getPathService();  CarbonTablePath carbonTablePath=pathService.getCarbonTablePath(columnIdentifier,this.hdfsStorePath,carbonTableIdentifier);  this.columnDictionaryFilePath=carbonTablePath.getDictionaryFilePath(columnIdentifier.getColumnId());}  }
class C{  @Override public void lockPool(){synchronized (fGrammarPool) {    fGrammarPool.lockPool();  }}  }
class C{  public static double factorial(double n){  if (n == 1 || n == 0)   return 1;  for (double i=n; i > 0; i--, n*=(i > 0 ? i : 1)) {  }  return n;}  }
class C{  private void loadBinaryData(DataInputStream dis) throws IOException {  for (int f=0; f < numFrames; f++) {    times[f]=General.readFloat(dis,isBigEndian);    General.readFloat(dis,isBigEndian);    for (int c=0; c < numChannels; c++) {      frames[f][c]=General.readFloat(dis,isBigEndian);    }  }}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  mUsernameView.setError(null);  mPasswordView.setError(null);  username=mUsernameView.getText().toString();  password=mPasswordView.getText().toString();  if (password.length() > 15)   password=password.substring(0,15);  boolean cancel=false;  View focusView=null;  if (TextUtils.isEmpty(password)) {    mPasswordView.setError(getString(R.string.error_field_required));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(username)) {    mUsernameView.setError(getString(R.string.error_field_required));    focusView=mUsernameView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new LoginTask(username,password,this);    mAuthTask.execute((Void)null);  }}  }
class C{  protected boolean exists(final ISVNRemoteResource child,IProgressMonitor monitor) throws SVNException {  ISVNRemoteResource[] members;  try {    members=getMembers(monitor);  } catch (  SVNException e) {    if (e.getStatus().getCode() == SVNStatus.DOES_NOT_EXIST) {      return false;    } else {      throw e;    }  }  for (int i=0; i < members.length; i++) {    if (members[i].equals(child))     return true;  }  return false;}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public final boolean forall(P2SetVisitor v){  for (BitSetIterator it=bits.iterator(); it.hasNext(); ) {    v.visit((Node)pag.getAllocNodeNumberer().get(it.next()));  }  return v.getReturnValue();}  }
class C{  public Main(){}  }
class C{  public int size(){  return this.get().length;}  }
class C{  private static float calculateScore(final int[] playCounts){  if (playCounts == null) {    return 0;  }  float score=0;  for (int i=0; i < Math.min(playCounts.length,NUM_WEEKS); i++) {    score+=playCounts[i] * getScoreMultiplierForWeek(i);  }  return score;}  }
class C{  public SecureSetUserLevelQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public boolean moveItem(String uid,int position){  if (items == null || position < 0 || position > items.size()) {    return false;  }  int index=items.indexOf(new DashboardItem(uid));  if (index == -1 || index == position || (index + 1) == position) {    return false;  }  DashboardItem item=items.get(index);  index=position < index ? (index + 1) : index;  items.add(position,item);  items.remove(index);  return true;}  }
class C{  @Override public boolean isAlreadySorted(){  return true;}  }
class C{  public static String formatPercentage(BigDecimal percentage){  if (percentage == null)   return "";  return percentageDecimalFormat.format(percentage);}  }
class C{  public static List<EventQueryParams> convert(List<DataQueryParams> params){  List<EventQueryParams> eventParams=new ArrayList<>();  for (  DataQueryParams param : params) {    eventParams.add((EventQueryParams)param);  }  return eventParams;}  }
class C{  public boolean arePreviousStepsCompleted(int stepNumber){  boolean previousStepsAreCompleted=true;  for (int i=(stepNumber - 1); i >= 0 && previousStepsAreCompleted; i--) {    previousStepsAreCompleted=completedSteps[i];  }  return previousStepsAreCompleted;}  }
class C{  public void incrementValue(T v,long increment){  Long count=freqTable.getOrDefault(v,Long.valueOf(0));  freqTable.put(v,Long.valueOf(count.longValue() + increment));}  }
class C{  public static int[] shuffle(int[] intArray){  if (intArray == null) {    return null;  }  return shuffle(intArray,getRandom(intArray.length));}  }
class C{  @Override public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  writeText4Links();  writeEscUTF16(new String(ch),start,length,false);  super.ignorableWhitespace(ch,start,length);}  }
class C{  public AppsGetQuery appIds(String... value){  return unsafeParam("app_ids",value);}  }
class C{  @RequestMapping(value="/{id}",method=DELETE,produces=APPLICATION_JSON_VALUE) public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {  log.debug("Delete by id Project : {}",id);  try {    projectRepository.delete(id);    return ResponseEntity.ok().build();  } catch (  Exception x) {    return ResponseEntity.status(HttpStatus.CONFLICT).build();  }}  }
class C{  public static double[] lpcc2lpc(double[] c,int lpcOrder){  if (lpcOrder <= 0) {    throw new RuntimeException("The LPC order [" + lpcOrder + "] must be a positive integer.");  }  int k, m;  double acc;  double[] a=new double[lpcOrder + 1];  int cepstrumOrder=c.length - 1;  a[0]=1.0;  for (m=1; m <= lpcOrder; m++) {    if (m <= cepstrumOrder) {      acc=0.0;      for (k=1; k < m; k++)       acc+=((k) * a[m - k] * c[k]);      a[m]=c[m] - acc / (m);    } else {      acc=0.0;      for (k=1; k <= cepstrumOrder; k++)       acc+=((k) * a[m - k] * c[k]);      a[m]=-acc / (m);    }  }  return (a);}  }
class C{  public void destroyView() throws CanceledException {}  }
class C{  public static GeneratorOutput generate(GeneratorInput generatorInput){  List<DescriptionInput> goals=generatorInput.goals;  BuildersContext context=generatorInput.context;  return goals.stream().map(prepare(context)).map(process).collect(collectOutput(context));}  }
class C{  public WildcardFileFilter(String wildcard){  this(wildcard,null);}  }
class C{  public IncompatibleParent(){  super("Transaction incompatible with its parent transaction");}  }
class C{  private ValueHolder<K,V> createValueHolder(K key,V value){  return new ValueHolder<K,V>(key,value,_freeEntryQueue);}  }
class C{  public static boolean equals(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SENSITIVE);}  }
class C{  private void sendCrashLog2PM(String fileName){  if (!new File(fileName).exists()) {    return;  }  FileInputStream fis=null;  BufferedReader reader=null;  String s=null;  try {    fis=new FileInputStream(fileName);    reader=new BufferedReader(new InputStreamReader(fis,"GBK"));    while (true) {      s=reader.readLine();      if (s == null)       break;      Log.i("info",s.toString());    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    try {      reader.close();      fis.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public static String saltString(byte[] salt){  return Base64.encodeToString(salt,BASE64_FLAGS);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DECOMPOSE_ITEM_SUCCEED(int value0){  return new SM_SYSTEM_MESSAGE(1300449,new DescriptionId(value0));}  }
class C{  protected void withBoundRecorderService(final FallibleConsumer<RecorderService> c){  if (mServiceConnection == null) {    mServiceConnection=mConnectionSupplier.get();  }  mServiceConnection.runWithService(c);}  }
class C{  @Override public boolean isProhibitedSubstitution(short prohibited){  return (fBlock & prohibited) != 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeathBlow_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200346,num0,skillname);}  }
class C{  public RecyclerView.ViewHolder newInsertionViewHolder(ViewGroup vParent){  return HandyHolder.create(this,vParent,mBottomProgressLayoutId).set().isRecyclable(false).asyncInflating(false).rippleEffect(false).init();}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static String generateAutoTag(int stackOffset){  StackTraceElement[] currentStack=getCurrentStack();  StackTraceElement element=currentStack[stackOffset];  String className=element.getClassName();  String pkgPath[]=className.split("\\.");  if (pkgPath.length > 0) {    className=pkgPath[pkgPath.length - 1];  }  StringBuilder sbInnerClass=new StringBuilder();  int index;  String strLoop=className;  while ((index=strLoop.lastIndexOf("$")) != -1) {    String piece=strLoop.substring(index + 1);    sbInnerClass.insert(0,piece);    if (!piece.matches("[0-9$]+")) {      break;    }    sbInnerClass.insert(0,"$");    strLoop=strLoop.substring(0,index);  }  if (sbInnerClass.length() > 0 && sbInnerClass.charAt(0) == '$') {    sbInnerClass.deleteCharAt(0);  }  String innerClassName=sbInnerClass.toString();  if (TextUtils.isDigitsOnly(innerClassName)) {    innerClassName=null;  }  return TextUtils.isEmpty(innerClassName) ? className : innerClassName;}  }
class C{  public static boolean runSubOps(List<MethodOperation> methodOperations,MethodContext methodContext) throws MiniLangException {  Assert.notNull("methodOperations",methodOperations,"methodContext",methodContext);  for (  MethodOperation methodOperation : methodOperations) {    if (!methodOperation.exec(methodContext)) {      return false;    }  }  return true;}  }
class C{  public void checkCorrectChannelLayout() throws InvalidAudioChannelAssignmentException {  for (  SequenceUUID seqUuid : contextProvider.getSequenceContext().getUuids(SequenceType.AUDIO)) {    String channelLayout=null;    for (    SegmentUUID segmUuid : contextProvider.getSegmentContext().getUuids()) {      for (      ResourceUUID resUuid : contextProvider.getResourceContext().getUuids(ResourceKey.create(segmUuid,seqUuid,SequenceType.AUDIO))) {        ContextInfo contextInfo=new ContextInfoBuilder().setResourceUuid(resUuid).setSegmentUuid(segmUuid).setSequenceUuid(seqUuid).setSequenceType(SequenceType.AUDIO).build();        if (!contextProvider.getResourceContext().hasResourceParameter(ResourceContextParameters.CHANNELS_LAYOUT,contextInfo)) {          throw new InvalidAudioChannelAssignmentException("All resources within a sequence must have a channel layout set in the Essence Descriptor.");        }        String nextChannelLayout=contextProvider.getResourceContext().getParameterValue(ResourceContextParameters.CHANNELS_LAYOUT,contextInfo);        if (StringUtils.isEmpty(nextChannelLayout)) {          throw new InvalidAudioChannelAssignmentException("All resources within a sequence must have a channel layout set in the Essence Descriptor.");        }        if (channelLayout != null && !channelLayout.equals(nextChannelLayout)) {          throw new InvalidAudioChannelAssignmentException("All resources within a sequence must have the same channel layout.");        }        if (!contextProvider.getResourceContext().hasResourceParameter(ResourceContextParameters.CHANNELS_NUM,contextInfo)) {          throw new InvalidAudioChannelAssignmentException("All resources within a sequence must have a channels number set.");        }        Integer channelsCount=Integer.parseInt(contextProvider.getResourceContext().getParameterValue(ResourceContextParameters.CHANNELS_NUM,contextInfo));        if (FFmpegAudioChannels.toFFmpegAudioChannels(nextChannelLayout).length != channelsCount) {          throw new InvalidAudioChannelAssignmentException(String.format("A number of channels in channel layout (%s) must match real number of channels (%d)",nextChannelLayout,channelsCount));        }        channelLayout=nextChannelLayout;      }    }  }}  }
class C{  public synchronized boolean waitCompleted(){  while (!completed) {    try {      wait();    } catch (    InterruptedException ie) {      System.err.println("FreeTTSSpeakableImpl:Wait interrupted");      return false;    }  }  return !cancelled;}  }
class C{  public void action(){synchronized (myAgent) {    NGramDocumentComparatorAgent a=(NGramDocumentComparatorAgent)myAgent;    ACLMessage msg=new ACLMessage(ACLMessage.INFORM);    msg.setSender(a.getAID());    msg.addReceiver(a.ResultConsumer);    try {      msg.setContentObject(Result);    } catch (    IOException ex) {      System.err.println("Cannot add result to message. Sending empty message.");      ex.printStackTrace(System.err);    }    a.send(msg);  }}  }
class C{  public SimpleUnivariateValueChecker(final double relativeThreshold,final double absoluteThreshold,final int maxIter){  super(relativeThreshold,absoluteThreshold);  if (maxIter <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,maxIter,0);  }  maxIterationCount=maxIter;}  }
class C{  public PermissionCallOptions build(){  return buildObj;}  }
class C{  public void start(String tag,String name,String value){  tag(tag,name,value,false);}  }
class C{  @Override public int hashCode(){  return proxyID.hashCode();}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public SaveHttpResponse(final StatusLine statusline){  this(statusline,null,null);}  }
class C{  public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {}  }
class C{  public void restartSpaceComponents() throws SpaceComponentsInitializeException {  init();  SpaceMode newMode=_spaceMode;  _spaceMode=SpaceMode.NONE;  beforeSpaceModeChange(newMode);  afterSpaceModeChange(newMode);}  }
class C{  protected void drawLinearFill(Canvas c,ILineDataSet dataSet,Transformer trans,XBounds bounds){  final Path filled=mGenerateFilledPathBuffer;  final int startingIndex=bounds.minIndex;  final int endingIndex=bounds.indexRange + bounds.minIndex;  final int indexInterval=128;  int currentStartIndex=0;  int currentEndIndex=indexInterval;  int iterations=0;  do {    currentStartIndex=startingIndex + (iterations * indexInterval);    currentEndIndex=currentStartIndex + indexInterval;    currentEndIndex=currentEndIndex > endingIndex ? endingIndex : currentEndIndex;    if (currentStartIndex <= currentEndIndex) {      generateFilledPath(dataSet,currentStartIndex,currentEndIndex,filled);      trans.pathValueToPixel(filled);      final Drawable drawable=dataSet.getFillDrawable();      if (drawable != null) {        drawFilledPath(c,filled,drawable);      } else {        drawFilledPath(c,filled,dataSet.getFillColor(),dataSet.getFillAlpha());      }    }    iterations++;  } while (currentStartIndex <= currentEndIndex);}  }
class C{  public GroupsIsMemberQueryWithUserIdsExtended isMemberExtended(String groupId,Integer... userIds){  return new GroupsIsMemberQueryWithUserIdsExtended(getClient(),groupId,userIds);}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public Future<?> scheduleRestoreTask(CreatureLifeStats<? extends Creature> lifeStats){  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new HpMpRestoreTask(lifeStats),1700,DEFAULT_DELAY);}  }
class C{  private void escape(CharSequence text,int start,int end){  for (int i=start; i < end; i++) {    char c=text.charAt(i);    if (c == '\n') {      mOut.append(BR);    } else     if (c == '<') {      mOut.append(LT);    } else     if (c == '>') {      mOut.append(GT);    } else     if (c == '&') {      mOut.append(AMP);    } else     if (c == ' ') {      while (i + 1 < end && text.charAt(i + 1) == ' ') {        mOut.append(NBSP);        i++;      }      mOut.append(' ');    } else     if (c < ' ') {      mOut.append("&#" + ((int)c) + ";");    } else {      mOut.append(c);    }  }}  }
class C{  public void remove(int objIdOfPlayer){  blockedList.remove(objIdOfPlayer);}  }
class C{  public InvalidCopyDestination(final String message){  super(message);}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public void process(Link link,Transform transform1,Convex convex,Transform transform2,Penetration penetration){  Vector2 n=penetration.getNormal();  Vector2 c=transform2.getTransformed(convex.getCenter());  Vector2 p1=transform1.getTransformed(link.getPoint1());  Vector2 p2=transform1.getTransformed(link.getPoint2());  Vector2 p0=link.getPoint0() != null ? transform1.getTransformed(link.getPoint0()) : null;  Vector2 p3=link.getPoint3() != null ? transform1.getTransformed(link.getPoint3()) : null;  boolean convex1=false;  boolean convex2=false;  Vector2 edge0=null;  Vector2 edge1=null;  Vector2 edge2=null;  Vector2 normal0=null;  Vector2 normal1=null;  Vector2 normal2=null;  Vector2 normal=null;  Vector2 upper=null;  Vector2 lower=null;  double offset0=0;  double offset1=0;  double offset2=0;  edge1=p1.to(p2);  edge1.normalize();  normal1=edge1.getLeftHandOrthogonalVector();  offset1=normal1.dot(p1.to(c));  if (p0 != null) {    edge0=p0.to(p1);    edge0.normalize();    normal0=edge0.getLeftHandOrthogonalVector();    convex1=edge0.cross(edge1) >= 0;    offset0=normal0.dot(p0.to(c));  }  if (p3 != null) {    edge2=p2.to(p3);    edge2.normalize();    normal2=edge2.getLeftHandOrthogonalVector();    convex2=edge1.cross(edge2) >= 0;    offset2=normal2.dot(p2.to(c));  }  if (p0 != null && p3 != null) {    if (convex1 && convex2) {      boolean front=offset0 >= 0 || offset1 >= 0 || offset2 >= 0;      if (front) {        normal=normal1;        lower=normal0;        upper=normal2;      } else {        normal=normal1.getNegative();        lower=normal;        upper=normal;      }    } else     if (convex1) {      boolean front=offset0 >= 0 || (offset1 >= 0 && offset2 >= 0);      if (front) {        normal=normal1;        lower=normal0;        upper=normal1;      } else {        normal=normal1.getNegative();        lower=normal2.getNegative();        upper=normal1.getNegative();      }    } else     if (convex2) {      boolean front=offset2 >= 0 || (offset0 >= 0 && offset1 >= 0);      if (front) {        normal=normal1;        lower=normal1;        upper=normal2;      } else {        normal=normal1.getNegative();        lower=normal1.getNegative();        upper=normal0.getNegative();      }    } else {      boolean front=offset0 >= 0 && offset1 >= 0 && offset2 >= 0;      if (front) {        normal=normal1;        lower=normal1;        upper=normal1;      } else {        normal=normal1.getNegative();        lower=normal2.getNegative();        upper=normal0.getNegative();      }    }  } else   if (p0 != null) {    if (convex1) {      boolean front=offset0 >= 0 || offset1 >= 0;      if (front) {        normal=normal1;        lower=normal0;        upper=normal1.getNegative();      } else {        normal=normal1.getNegative();        lower=normal1;        upper=normal1.getNegative();      }    } else {      boolean front=offset0 >= 0 && offset1 >= 0;      if (front) {        normal=normal1;        lower=normal1;        upper=normal1.getNegative();      } else {        normal=normal1.getNegative();        lower=normal1;        upper=normal0.getNegative();      }    }  } else   if (p3 != null) {    if (convex2) {      boolean front=offset1 >= 0 || offset2 >= 0;      if (front) {        normal=normal1;        lower=normal1.getNegative();        upper=normal2;      } else {        normal=normal1.getNegative();        lower=normal1.getNegative();        upper=normal1;      }    } else {      boolean front=offset1 >= 0 && offset2 >= 0;      if (front) {        normal=normal1;        lower=normal1.getNegative();        upper=normal1;      } else {        normal=normal1.getNegative();        lower=normal2.getNegative();        upper=normal1;      }    }  } else {    boolean front=offset1 >= 0;    if (front) {      normal=normal1;      lower=normal1.getNegative();      upper=normal1.getNegative();    } else {      normal=normal1.getNegative();      lower=normal1;      upper=normal1;    }  }  Vector2 perp=normal.getRightHandOrthogonalVector();  if (n.dot(perp) >= 0) {    if (n.difference(upper).dot(normal) < 0) {      penetration.normal=upper;      penetration.depth=upper.dot(n) * penetration.depth;    }  } else {    if (n.difference(lower).dot(normal) < 0) {      penetration.normal=lower;      penetration.depth=lower.dot(n) * penetration.depth;    }  }}  }
class C{  private void checkConfiguration(){  if (configuration == null) {    throw new IllegalStateException(ERROR_NOT_INIT);  }}  }
class C{  private void changeColumnsType(List<ColumnModel> columnModelList){  LogUtil.d(TAG,"do changeColumnsType");  List<String> columnNames=new ArrayList<String>();  if (columnModelList != null && !columnModelList.isEmpty()) {    for (    ColumnModel columnModel : columnModelList) {      columnNames.add(columnModel.getColumnName());    }  }  removeColumns(columnNames);  addColumns(columnModelList);}  }
class C{  private static Map<FieldDescriptor,Object> maybeCombineOptionsWithDefault(boolean withDefaults,Map<FieldDescriptor,Object> explicitlySetOptions,List<FieldDescriptor> defaultOptions){  if (!withDefaults) {    return explicitlySetOptions;  }  Map<FieldDescriptor,Object> allOptions=Maps.newLinkedHashMap();  for (  FieldDescriptor descriptor : defaultOptions) {    allOptions.put(descriptor,descriptor.getDefaultValue());  }  allOptions.putAll(explicitlySetOptions);  return ImmutableMap.copyOf(allOptions);}  }
class C{  private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {  File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);  if (srcFiles == null) {    throw new IOException("Failed to list contents of " + srcDir);  }  if (destDir.exists()) {    if (destDir.isDirectory() == false) {      throw new IOException("Destination '" + destDir + "' exists but is not a directory");    }  } else {    if (!destDir.mkdirs() && !destDir.isDirectory()) {      throw new IOException("Destination '" + destDir + "' directory cannot be created");    }  }  if (destDir.canWrite() == false) {    throw new IOException("Destination '" + destDir + "' cannot be written to");  }  for (  File srcFile : srcFiles) {    File dstFile=new File(destDir,srcFile.getName());    if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {      if (srcFile.isDirectory()) {        doCopyDirectory(srcFile,dstFile,filter,preserveFileDate,exclusionList);      } else {        doCopyFile(srcFile,dstFile,preserveFileDate);      }    }  }  if (preserveFileDate) {    destDir.setLastModified(srcDir.lastModified());  }}  }
class C{  private double calculateExactPValue(final double Wmax,final int N){  final int m=1 << N;  int largerRankSums=0;  for (int i=0; i < m; ++i) {    int rankSum=0;    for (int j=0; j < N; ++j) {      if (((i >> j) & 1) == 1) {        rankSum+=j + 1;      }    }    if (rankSum >= Wmax) {      ++largerRankSums;    }  }  return 2 * ((double)largerRankSums) / m;}  }
class C{  public void print(NumberFormat format,int width){  print(new PrintWriter(System.out,true),format,width);}  }
class C{  @NotNull public static BufferedImage trim(@NotNull BufferedImage image){  BufferedImage cropped=ImageUtils.cropBlank(image,null,TYPE_INT_ARGB);  return cropped != null ? cropped : image;}  }
class C{  public void dumpBinary(ByteBuffer bb) throws IOException {  char[] nameArray=(name + "        ").toCharArray();  bb.putInt(MAGIC);  for (int i=0; i < NAME_LENGTH; i++) {    bb.putChar(nameArray[i]);  }  bb.putInt(midPoint);  bb.putInt(samples.length);  for (int i=0; i < samples.length; i++) {    samples[i].dumpBinary(bb);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static long elapsedMSec(long startMsecTime){  return (System.currentTimeMillis() - startMsecTime);}  }
class C{  protected List<Row> fetchRowsWithPage(Pageable pageable){  log.debug("Pageable.getPageNumber: {}",pageable.getPageNumber());  log.debug("Pageable.getPageSize: {}",pageable.getPageSize());  Statement findAllStmtPagingFetch=QueryBuilder.select().from(keyspace,tableName);  int pageNumber=pageable.getPageNumber() > 0 ? pageable.getPageNumber() : 1;  int pageSize=pageable.getPageSize() > 0 ? pageable.getPageSize() : 100;  ResultSet result=skipRows(findAllStmtPagingFetch,pageNumber,pageSize);  return getRows(result,pageNumber,pageSize);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200307,skillname);}  }
class C{  private static long dateStringToMSec(FieldDef fd,String s) throws ParseException {  assert fd.valueType == FieldDef.FieldValueType.DATE_TIME;  Calendar calendar=new GregorianCalendar(TimeZone.getTimeZone("UTC"),Locale.ROOT);  calendar.setLenient(false);  SimpleDateFormat dateTimeFormat=new SimpleDateFormat(fd.dateTimeFormat,Locale.ROOT);  dateTimeFormat.setCalendar(calendar);  ParsePosition pos=new ParsePosition(0);  Date date=dateTimeFormat.parse(s,pos);  if (pos.getErrorIndex() != -1) {    throw new ParseException("could not parse field \"" + fd.name + "\", value \""+ s+ "\" as date with format \""+ fd.dateTimeFormat+ "\"",pos.getErrorIndex());  }  if (pos.getIndex() != s.length()) {    throw new ParseException("could not parse field \"" + fd.name + "\", value \""+ s+ "\" as date with format \""+ fd.dateTimeFormat+ "\"",pos.getIndex());  }  return date.getTime();}  }
class C{  public TSDataOptimizerTask(@NonNull Path destDir){  this.destDir=destDir;  if (!Files.isDirectory(destDir))   throw new IllegalArgumentException(destDir + " is not a directory");}  }
class C{  public <R>R executeTransactionalCommandInSeparateThread(final TransactionalCommand<R> command) throws MithraBusinessException {  return this.executeTransactionalCommandInSeparateThread(command,this.defaultTransactionStyle);}  }
class C{  @Override public void close(){}  }
class C{  protected VideoPutTagQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  protected boolean remLink(String field,int len,int n,int e){  int[] array=(int[])m_links.get(n,field);  for (int i=0; i < len; ++i) {    if (array[i] == e) {      System.arraycopy(array,i + 1,array,i,len - i - 1);      return true;    }  }  return false;}  }
class C{  @Override public void parseXPointer(String part) throws XNIException {  fShortHandPointer=part;  fIsFragmentResolved=false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DELETE_ITEM_CHANGE_TO_PUBLIC(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400955,value0,value1);}  }
class C{  private static CopyState readCopyState(DataInput in) throws IOException {  byte[] infosBytes=new byte[in.readVInt()];  in.readBytes(infosBytes,0,infosBytes.length);  long gen=in.readVLong();  long version=in.readVLong();  Map<String,FileMetaData> files=CopyFilesHandler.readFilesMetaData(in);  int count=in.readVInt();  Set<String> completedMergeFiles=new HashSet<>();  for (int i=0; i < count; i++) {    completedMergeFiles.add(in.readString());  }  long primaryGen=in.readVLong();  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set nodeShape=square;");}  }
class C{  @Override public void delete(Constant key,RecordId dataRecordId,boolean doLogicalLogging){  if (tx.isReadOnly())   throw new UnsupportedOperationException();  search(ConstantRange.newInstance(key),DELETE);  if (doLogicalLogging)   tx.recoveryMgr().logLogicalStart();  leaf.delete(dataRecordId);  if (doLogicalLogging)   tx.recoveryMgr().logIndexDeletionEnd(ii.tableName(),ii.fieldName(),key,dataRecordId.block().number(),dataRecordId.id());}  }
class C{  public void shutdown() throws SAException {synchronized (_shutdownMonitor) {    _shouldDie=true;    _shutdownMonitor.notifyAll();  }  try {    this.join();  } catch (  InterruptedException ex) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,ex.toString(),ex);    }    throw new SAException("Failed shutting down " + getName(),ex);  }}  }
class C{  private static QueryTask buildRegistryQueryByGroup(String tenantLink){  Query groupClause=QueryUtil.addTenantGroupAndUserClause(tenantLink);  return buildRegistryQuery(groupClause);}  }
class C{  public static Field createAsExtension(MessageType parent,Extension extension,String path,String name){  Field field=new Field(parent,extension.getProto(),path,null,name);  field.getFile().addExtension(extension,field);  return field;}  }
class C{  public XHTMLSerializer(Writer writer,OutputFormat format){  super(true,format != null ? format : new OutputFormat(Method.XHTML,null,false));  setOutputCharStream(writer);}  }
class C{  public Matrix solveTranspose(Matrix B){  return transpose().solve(B.transpose());}  }
class C{  public Configuration(File config,File outputFile,File oldApkFile,File newApkFile) throws IOException, ParserConfigurationException, SAXException, TinkerPatchException {  mUsingGradle=false;  mSoFilePattern=new HashSet<>();  mDexFilePattern=new HashSet<>();  mDexLoaderPattern=new HashSet<>();  mResFilePattern=new HashSet<>();  mResRawPattern=new HashSet<>();  mResIgnoreChangePattern=new HashSet<>();  mPackageFields=new HashMap<>();  mOutFolder=outputFile.getAbsolutePath();  FileOperation.cleanDir(outputFile);  mOldApkFile=oldApkFile;  mOldApkPath=oldApkFile.getAbsolutePath();  mNewApkFile=newApkFile;  mNewApkPath=newApkFile.getAbsolutePath();  mLargeModSize=100;  readXmlConfig(config);  createTempDirectory();  checkInputPatternParameter();}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  protected VideoFacade(Context context){  this(new Bucket(context),new Video(context),new Thumbnail(context));}  }
class C{  public static boolean isFileNewer(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileNewer(file,date.getTime());}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.container_searching_view_large_feedbackBtn:    searchPresenter.initRefresh(getContext());  break;}}  }
class C{  private void powerPhaseIFFT(double[] pow,double[] ph){  toMagnitude(pow);  for (int i=0; i < pow.length; i++) {    double re=pow[i] * Math.cos(ph[i]);    ph[i]=pow[i] * Math.sin(ph[i]);    pow[i]=re;  }  fft(pow,ph,FFT_REVERSE);}  }
class C{  public DerParser(byte[] bytes) throws IOException {  this(new ByteArrayInputStream(bytes));}  }
class C{  public void onTimeOut(){  staticsManagerImpl.onScheduleTimeOut();}  }
class C{  public static long stringToMilliseconds(String formattedDate){  return stringToMilliseconds(formattedDate,SIMPLE_DATE_FORMAT);}  }
class C{  public ResizableDoubleArray copy(){  return new ResizableDoubleArray(this);}  }
class C{  protected void okPressed(){  if (searchAllButton.getSelection()) {    startDate=null;    endDate=null;    startRevision=null;    endRevision=null;  } else {    Date tempStartDate=null;    Date tempEndDate=null;    if (startDateText.getText().trim().length() == 0)     startDate=null; else {      tempStartDate=parseDate(startDateText.getText());      if (tempStartDate == null)       return;    }    if (endDateText.getText().trim().length() == 0)     endDate=null; else {      tempEndDate=parseDate(endDateText.getText());      if (tempEndDate == null)       return;    }    if (tempStartDate != null && tempEndDate != null) {      Calendar calendar=Calendar.getInstance();      calendar.setTime(tempEndDate);      calendar.set(Calendar.HOUR_OF_DAY,calendar.getActualMaximum(Calendar.HOUR_OF_DAY));      calendar.set(Calendar.MINUTE,calendar.getActualMaximum(Calendar.MINUTE));      calendar.set(Calendar.SECOND,calendar.getActualMaximum(Calendar.SECOND));      tempEndDate=calendar.getTime();      if (!tempEndDate.after(tempStartDate)) {        MessageDialog.openError(getShell(),Policy.bind("HistorySearchDialog.dateSequenceErrorTitle"),Policy.bind("HistorySearchDialog.dateSequenceErrorMessage"));        return;      }    }    endDate=tempEndDate;    startDate=tempStartDate;    if (startRevisionText.getText().trim().length() > 0) {      try {        startRevision=(SVNRevision.Number)SVNRevision.getRevision(startRevisionText.getText().trim());      } catch (      ParseException e) {        MessageDialog.openError(getShell(),Policy.bind("HistorySearchDialog.revisionParseErrorTitle"),Policy.bind("HistorySearchDialog.revisionParseErrorMessage"));        return;      }    } else     startRevision=null;    if (endRevisionText.getText().trim().length() > 0) {      try {        endRevision=(SVNRevision.Number)SVNRevision.getRevision(endRevisionText.getText().trim());      } catch (      ParseException e) {        MessageDialog.openError(getShell(),Policy.bind("HistorySearchDialog.revisionParseErrorTitle"),Policy.bind("HistorySearchDialog.revisionParseErrorMessage"));        return;      }    } else     endRevision=null;    if (startRevision != null && endRevision != null && startRevision.getNumber() > endRevision.getNumber()) {      MessageDialog.openError(getShell(),Policy.bind("HistorySearchDialog.revisionSequenceErrorTitle"),Policy.bind("HistorySearchDialog.revisionSequenceErrorMessage"));      return;    }  }  if (userText.getText().trim().length() > 0)   user=userText.getText(); else   user=null;  if (commentCombo.getText().trim().length() > 0)   comment=commentCombo.getText(); else   comment=null;  autoFetchLogs=fetchButton.getSelection();  searchAll=searchAllButton.getSelection();  regExp=regExpButton.getSelection();  if (comment != null && comment.trim().length() > 0) {    previousComments.add(comment);  }  revisionsChanged=!startRevisionText.getText().trim().equals(oldStartRevision) || !endRevisionText.getText().trim().equals(oldEndRevision);  super.okPressed();}  }
class C{  public void putSampleShape(String sampleName,String shape){  put(sampleName,HiddenAttribute.Shape,shape);}  }
class C{  public static void updateSigninManagerFirstRunCheckDone(Context context){  SigninManager manager=SigninManager.get(context);  if (manager.isSignInAllowed())   return;  if (!FirstRunStatus.getFirstRunFlowComplete(context))   return;  if (!getFirstRunFlowSignInComplete(context))   return;  manager.onFirstRunCheckDone();}  }
class C{  public void put(int ii1,int ii2,int jj1,int jj2,Zmat A){  dirty=true;  int nrow=ii2 - ii1 + 1;  int ncol=jj2 - jj1 + 1;  for (int i=0; i < nrow; i++)   for (int j=0; j < ncol; j++) {    re[i + ii1 - basex][j + jj1 - basex]=A.re[i][j];    im[i + ii1 - basex][j + jj1 - basex]=A.im[i][j];  }}  }
class C{  @Override public void flush() throws IOException {  if (writer != null) {    writer.flush();  }}  }
class C{  public final void testCloseInputStream(){  FallbackFileController fFileController=new FallbackFileController(PATH);  try {    fFileController.closeFallbackInputStream();  } catch (  DataFallbackException e) {    fail("The InputStream could not be closed");  }  assertNull(fFileController.getInput());}  }
class C{  public static <K,V>Map<K,V> makeImmutable(Map<K,V> mutableMap){  Map<K,V> newMap=new HashMap<>();  for (  Map.Entry<K,V> entry : mutableMap.entrySet()) {    newMap.put(entry.getKey(),Utils.makeImmutable(entry.getValue()));  }  return Collections.unmodifiableMap(newMap);}  }
class C{  public void render(URL templateUrl,Writer writer,Map<String,Object> parentContext) throws SurveyWrapperException {  String responseId=this.getThisResponseId();  GenericValue survey=this.getSurvey();  List<GenericValue> surveyQuestionAndAppls=this.getSurveyQuestionAndAppls();  Map<String,Object> results=this.getResults(surveyQuestionAndAppls);  Map<String,Object> currentAnswers=null;  if (responseId != null && canUpdate()) {    currentAnswers=this.getResponseAnswers(responseId);  } else {    currentAnswers=this.getResponseAnswers(null);  }  Map<String,Object> sqaaWithColIdListByMultiRespId=FastMap.newInstance();  for (  GenericValue surveyQuestionAndAppl : surveyQuestionAndAppls) {    String surveyMultiRespColId=surveyQuestionAndAppl.getString("surveyMultiRespColId");    if (UtilValidate.isNotEmpty(surveyMultiRespColId)) {      String surveyMultiRespId=surveyQuestionAndAppl.getString("surveyMultiRespId");      UtilMisc.addToListInMap(surveyQuestionAndAppl,sqaaWithColIdListByMultiRespId,surveyMultiRespId);    }  }  if (this.templateContext == null) {    this.templateContext=FastMap.newInstance();  }  Map<String,Object> templateContext=FastMap.newInstance();  if (parentContext != null) {    templateContext.putAll(parentContext);  }  templateContext.putAll(this.templateContext);  templateContext.put("partyId",partyId);  templateContext.put("survey",survey);  templateContext.put("surveyResults",results);  templateContext.put("surveyQuestionAndAppls",surveyQuestionAndAppls);  templateContext.put("sqaaWithColIdListByMultiRespId",sqaaWithColIdListByMultiRespId);  templateContext.put("alreadyShownSqaaPkWithColId",FastSet.newInstance());  templateContext.put("surveyAnswers",currentAnswers);  templateContext.put("surveyResponseId",responseId);  templateContext.put("sequenceSort",UtilMisc.toList("sequenceNum"));  templateContext.put("additionalFields",passThru);  templateContext.put("defaultValues",defaultValues);  templateContext.put("delegator",this.delegator);  templateContext.put("locale",Locale.getDefault());  Template template=this.getTemplate(templateUrl);  try {    FreeMarkerWorker.renderTemplate(template,templateContext,writer);  } catch (  TemplateException e) {    Debug.logError(e,"Error rendering Survey with template at [" + templateUrl.toExternalForm() + "]",module);  }catch (  IOException e) {    Debug.logError(e,"Error rendering Survey with template at [" + templateUrl.toExternalForm() + "]",module);  }}  }
class C{  public Builder integerMathOp(String column,MathOp mathOp,int scalar){  return transform(new IntegerMathOpTransform(column,mathOp,scalar));}  }
class C{  @SuppressWarnings("rawtypes") public static <T>T fromObject(Object json,Class<T> t){  if (json instanceof String) {    Gson g=new Gson();    return g.fromJson((String)json,t);  } else   if (json instanceof Reader) {    Gson g=new Gson();    return g.fromJson((Reader)json,t);  } else   if (json instanceof byte[]) {    Gson g=new Gson();    byte[] b1=(byte[])json;    return g.fromJson(new String(b1),t);  } else   if (json instanceof Map) {    try {      Map m=(Map)json;      T t1=t.newInstance();      Field[] fs=t.getDeclaredFields();      for (      Field f : fs) {        String name=f.getName();        if (m.containsKey(name)) {          f.setAccessible(true);          f.set(t1,m.get(name));        }      }      return t1;    } catch (    Exception e) {      log.error(json,e);    }  }  return null;}  }
class C{  public MutationBatch prepareMutationBatch(ConsistencyLevel consistency){  return _astyanaxKeyspace.prepareMutationBatch().setConsistencyLevel(clamp(consistency));}  }
class C{  public static float parseFloat(char[] chars,int start,int length) throws NumberFormatException {  return (float)parseDouble(chars,start,length);}  }
class C{  private void testClass(FilterConfigInterface objUnderTest){  assertNotNull(objUnderTest.getFilterConfiguration());  assertNotNull(objUnderTest.createFilter());  assertNull(objUnderTest.createLogicFilter(null));  GeometryFilterImpl filter=(GeometryFilterImpl)objUnderTest.createFilter(null);  assertNull(filter.getExpression1());  assertNull(filter.getExpression2());  List<Expression> parameterList=new ArrayList<Expression>();  parameterList.add(ff.literal("expr1"));  filter=(GeometryFilterImpl)objUnderTest.createFilter(parameterList);  assertNull(filter.getExpression1());  assertNull(filter.getExpression2());  parameterList.add(ff.literal("expr2"));  filter=(GeometryFilterImpl)objUnderTest.createFilter(parameterList);  assertNotNull(filter.getExpression1());  assertNotNull(filter.getExpression2());  System.out.println(filter.toString());}  }
class C{  public void toString(StringBuffer s){  super.toString(s);}  }
class C{  public static boolean shouldShowRequestPermissionRationale(Activity activity,String... permissions){  for (  String permission : permissions) {    if (ActivityCompat.shouldShowRequestPermissionRationale(activity,permission)) {      return true;    }  }  return false;}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  protected void resetXML11() throws XNIException {  int count=fXML11Components.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fXML11Components.get(i);    c.reset(this);  }}  }
class C{  public GroupsSetCallbackSettingsQuery marketCommentNew(Boolean value){  return unsafeParam("market_comment_new",value);}  }
class C{  private Preference createItem(String name,String[] prefixes,AttributeSet attrs) throws ClassNotFoundException, InflateException {  Constructor constructor=CONSTRUCTOR_MAP.get(name);  try {    if (constructor == null) {      final ClassLoader classLoader=mContext.getClassLoader();      Class<?> clazz=null;      if (prefixes == null || prefixes.length == 0) {        clazz=classLoader.loadClass(name);      } else {        ClassNotFoundException notFoundException=null;        for (        final String prefix : prefixes) {          try {            clazz=classLoader.loadClass(prefix + name);          } catch (          final ClassNotFoundException e) {            notFoundException=e;          }        }        if (clazz == null) {          if (notFoundException == null) {            throw new InflateException(attrs.getPositionDescription() + ": Error inflating class " + name);          } else {            throw notFoundException;          }        }      }      constructor=clazz.getConstructor(CONSTRUCTOR_SIGNATURE);      constructor.setAccessible(true);      CONSTRUCTOR_MAP.put(name,constructor);    }    Object[] args=mConstructorArgs;    args[1]=attrs;    return (Preference)constructor.newInstance(args);  } catch (  ClassNotFoundException e) {    throw e;  }catch (  Exception e) {    final InflateException ie=new InflateException(attrs.getPositionDescription() + ": Error inflating class " + name);    ie.initCause(e);    throw ie;  }}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new JSONTokener(string));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_CHANNEL_FLOODING_BLOCKED_2(String value0,String value1,String value2){  return new SM_SYSTEM_MESSAGE(1300937,value0,value1,value2);}  }
class C{  public DictionaryMap(DictionaryMap original){  for (  Int2ObjectMap.Entry<String> entry : original.keyToValue.int2ObjectEntrySet()) {    keyToValue.put(entry.getIntKey(),entry.getValue());    valueToKey.put(entry.getValue(),entry.getIntKey());  }  valueToKey.defaultReturnValue(-1);}  }
class C{  public BinaryBitmap crop(int left,int top,int width,int height){  LuminanceSource newSource=binarizer.getLuminanceSource().crop(left,top,width,height);  return new BinaryBitmap(binarizer.createBinarizer(newSource));}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0d,0d,0.341417152147,0.170708576074,0.113805717382,0.0853542880369,0.0682834304295,0.0569028586912,0.0487738788782,0.0426771440184,0.0379352391275,0.0341417152147,0};}  }
class C{  public RegisterReplicationNotificationResponseInfo(){}  }
class C{  public static final void sendItemDeletePacket(Player player,StorageType storageType,Item item,ItemDeleteType deleteType){switch (storageType) {case CUBE:    PacketSendUtility.sendPacket(player,new SM_DELETE_ITEM(item.getObjectId(),deleteType));  break;default :PacketSendUtility.sendPacket(player,new SM_DELETE_WAREHOUSE_ITEM(storageType.getId(),item.getObjectId(),deleteType));}PacketSendUtility.sendPacket(player,SM_CUBE_UPDATE.cubeSize(storageType,player));}  }
class C{  public int[] calculateAspectRatio(int origWidth,int origHeight){  int newWidth=this.targetWidth;  int newHeight=this.targetHeight;  if (newWidth <= 0 && newHeight <= 0) {    newWidth=origWidth;    newHeight=origHeight;  } else   if (newWidth > 0 && newHeight <= 0) {    newHeight=(newWidth * origHeight) / origWidth;  } else   if (newWidth <= 0 && newHeight > 0) {    newWidth=(newHeight * origWidth) / origHeight;  } else {    double newRatio=newWidth / (double)newHeight;    double origRatio=origWidth / (double)origHeight;    if (origRatio > newRatio) {      newHeight=(newWidth * origHeight) / origWidth;    } else     if (origRatio < newRatio) {      newWidth=(newHeight * origWidth) / origHeight;    }  }  int[] retval=new int[2];  retval[0]=newWidth;  retval[1]=newHeight;  return retval;}  }
class C{  private Player(PlayerCommonData plCommonData){  super(plCommonData.getPlayerObjId(),new PlayerController(),null,plCommonData,null);  this.playerCommonData=plCommonData;  this.playerAccount=new Account(0);  this.absStatsHolder=new AbsoluteStatOwner(this,0);}  }
class C{  public static Map<String,Object> alwaysFailProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPaymentTestAuthorizationAlwaysFailed",locale));}  }
class C{  public void waitUntilClosed() throws InterruptedException {  mutex.lock();  try {    while (state != State.Closed) {      isClosedCondition.await();    }  }  finally {    mutex.unlock();  }}  }
class C{  public boolean isEdgeUnit(int i){  return backchannelUnits[i].isEdgeUnit();}  }
class C{  public SootMethodAndClass parseSootMethodString(String parseString){  if (!parseString.startsWith("<") || !parseString.endsWith(">")) {    throw new IllegalArgumentException("Illegal format of " + parseString + " (should use soot method representation)");  }  String name="";  String className="";  String returnType="";  Pattern pattern=Pattern.compile("<(.*?):");  Matcher matcher=pattern.matcher(parseString);  if (matcher.find()) {    className=matcher.group(1);  }  pattern=Pattern.compile(": (.*?) ");  matcher=pattern.matcher(parseString);  if (matcher.find()) {    returnType=matcher.group(1);    parseString=parseString.substring(matcher.end(1));  }  pattern=Pattern.compile(" (.*?)\\(");  matcher=pattern.matcher(parseString);  if (matcher.find()) {    name=matcher.group(1);  }  List<String> paramList=new ArrayList<String>();  pattern=Pattern.compile("\\((.*?)\\)");  matcher=pattern.matcher(parseString);  if (matcher.find()) {    String params=matcher.group(1);    for (    String param : params.split(","))     paramList.add(param.trim());  }  return new SootMethodAndClass(name,className,returnType,paramList);}  }
class C{  @SuppressLint("NewApi") private String launchPing(String url) throws Exception {  Process p;  String command=String.format(PING_CMD_FORMMAT,ttl);  Log.e("TAG","The command is : " + command + url);  long startTime=System.nanoTime();  new TimeOutAsyncTask(this,ttl).execute();  p=Runtime.getRuntime().exec(command + url);  BufferedReader stdInput=new BufferedReader(new InputStreamReader(p.getInputStream()));  String s;  String res="";  while ((s=stdInput.readLine()) != null) {    res+=s + "\n";    if (s.contains(FROM_PING) || s.contains(SMALL_FROM_PING)) {      elapsedTime=(System.nanoTime() - startTime) / 1000000.0f;    }  }  p.destroy();  if (res.equals("")) {    throw new IllegalArgumentException();  }  if (ttl == 1) {    Log.e("TAG","ipToPings is : " + ipToPing + "res is:"+ res);    ipToPing=parseIpToPingFromPing(res);  }  Log.e("TAG","launch ping result is : " + res);  return res;}  }
class C{  private static void populate(){  geometryMap.put(Point.class,GeometryTypeEnum.POINT);  geometryMap.put(MultiPoint.class,GeometryTypeEnum.POINT);  geometryMap.put(LineString.class,GeometryTypeEnum.LINE);  geometryMap.put(MultiLineString.class,GeometryTypeEnum.LINE);  geometryMap.put(Polygon.class,GeometryTypeEnum.POLYGON);  geometryMap.put(MultiPolygon.class,GeometryTypeEnum.POLYGON);}  }
class C{  protected static boolean isValidConnectionString(String jmxurl){  boolean valid=false;  if (jmxurl != null) {    jmxurl=jmxurl.trim();    if (jmxurl.startsWith("service:jmx:")) {      if (jmxurl.length() > "service:jmx:".length()) {        valid=true;      }    } else {      try {        new URL("http://" + jmxurl);      } catch (      MalformedURLException ex) {        return false;      }      if (jmxurl.startsWith("[")) {        int index=jmxurl.indexOf("]:");        if (index != -1) {          try {            String portStr=jmxurl.substring(index + 2);            int port=Integer.parseInt(portStr);            if (port >= 0 && port <= 0xFFFF) {              valid=true;            }          } catch (          NumberFormatException ex) {            valid=false;          }        }      } else {        String[] s=jmxurl.split(":");        if (s.length == 2) {          try {            int port=Integer.parseInt(s[1]);            if (port >= 0 && port <= 0xFFFF) {              valid=true;            }          } catch (          NumberFormatException ex) {            valid=false;          }        }      }    }  }  return valid;}  }
class C{  public static RealMatrix inverse(RealMatrix matrix,double threshold) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(matrix);  if (!matrix.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());  }  if (matrix instanceof DiagonalMatrix) {    return ((DiagonalMatrix)matrix).inverse(threshold);  } else {    QRDecomposition decomposition=new QRDecomposition(matrix,threshold);    return decomposition.getSolver().getInverse();  }}  }
class C{  private void handleZWavePlusReport(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  zwPlusVersion=serialMessage.getMessagePayloadByte(offset + 0);  zwPlusRole=serialMessage.getMessagePayloadByte(offset + 1);  zwPlusNodeType=serialMessage.getMessagePayloadByte(offset + 2);  zwPlusInstallerIcon=(serialMessage.getMessagePayloadByte(offset + 3) << 8) | serialMessage.getMessagePayloadByte(offset + 4);  zwPlusDeviceType=(serialMessage.getMessagePayloadByte(offset + 5) << 8) | serialMessage.getMessagePayloadByte(offset + 6);  ZWavePlusDeviceType deviceType=ZWavePlusDeviceType.getZWavePlusDeviceType(zwPlusDeviceType);  if (deviceType != null) {    logger.debug("NODE {}: Adding mandatory command classes for ZWavePlus device type {}",getNode().getNodeId(),deviceType);    for (    CommandClass commandClass : deviceType.getMandatoryCommandClasses()) {      ZWaveCommandClass zwaveCommandClass=this.getNode().getCommandClass(commandClass);      if (zwaveCommandClass == null) {        zwaveCommandClass=ZWaveCommandClass.getInstance(commandClass.getKey(),getNode(),getController());        if (zwaveCommandClass != null) {          logger.debug(String.format("NODE %d: Adding command class %s (0x%02x)",getNode().getNodeId(),commandClass.getLabel(),commandClass.getKey()));          getNode().addCommandClass(zwaveCommandClass);        }      }    }  } else {    logger.info("NODE {}: unknown ZWavePlus device type: {}",getNode().getNodeId(),zwPlusDeviceType);  }  initialiseDone=true;}  }
class C{  private void sendPacketByNIC(MulticastSocket mcSocket,DatagramPacket[] packet) throws InterruptedIOException {switch (nicsToUse) {case NICS_USE_ALL:    for (int i=0; i < nics.length; i++) {      try {        mcSocket.setNetworkInterface(nics[i]);        sendPacket(mcSocket,packet);      } catch (      InterruptedIOException e) {        throw e;      }catch (      IOException e) {        if (logger.isLoggable(Levels.HANDLED)) {          LogRecord logRec=new LogRecord(Levels.HANDLED,"network interface is " + "bad or not configured for " + "multicast: {0}");          logRec.setParameters(new Object[]{nics[i]});          logRec.setThrown(e);          logger.log(logRec);        }      }catch (      Exception e) {        if (logger.isLoggable(Levels.HANDLED)) {          LogRecord logRec=new LogRecord(Levels.HANDLED,"exception while " + "sending packet through network " + "interface: {0}");          logRec.setParameters(new Object[]{nics[i]});          logRec.setThrown(e);          logger.log(logRec);        }      }    }  break;case NICS_USE_LIST:for (int i=0; i < nics.length; i++) {  try {    mcSocket.setNetworkInterface(nics[i]);    sendPacket(mcSocket,packet);  } catch (  InterruptedIOException e) {    throw e;  }catch (  IOException e) {    if (logger.isLoggable(Level.SEVERE)) {      LogRecord logRec=new LogRecord(Level.SEVERE,"network interface " + "is bad or not configured for " + "multicast: {0}");      logRec.setParameters(new Object[]{nics[i]});      logRec.setThrown(e);      logger.log(logRec);    }  }catch (  Exception e) {    if (logger.isLoggable(Level.SEVERE)) {      LogRecord logRec=new LogRecord(Level.SEVERE,"exception while " + "sending packet through network " + "interface: {0}");      logRec.setParameters(new Object[]{nics[i]});      logRec.setThrown(e);      logger.log(logRec);    }  }}break;case NICS_USE_SYS:try {sendPacket(mcSocket,packet);} catch (InterruptedIOException e) {throw e;}catch (IOException e) {if (logger.isLoggable(Level.SEVERE)) {logger.log(Level.SEVERE,"system default network " + "interface is bad or not configured " + "for multicast",e);}}catch (Exception e) {if (logger.isLoggable(Level.SEVERE)) {logger.log(Level.SEVERE,"exception while sending " + "packet through system default network " + "interface",e);}}break;case NICS_USE_NONE:break;default :throw new AssertionError("nicsToUse flag out of range (0-3): " + nicsToUse);}}  }
class C{  public double toDouble(){  if (isInfinite()) {    if (lessThan(getZero())) {      return Double.NEGATIVE_INFINITY;    } else {      return Double.POSITIVE_INFINITY;    }  }  if (isNaN()) {    return Double.NaN;  }  Dfp y=this;  boolean negate=false;  int cmp0=compare(this,getZero());  if (cmp0 == 0) {    return sign < 0 ? -0.0 : +0.0;  } else   if (cmp0 < 0) {    y=negate();    negate=true;  }  int exponent=(int)(y.intLog10() * 3.32);  if (exponent < 0) {    exponent--;  }  Dfp tempDfp=DfpMath.pow(getTwo(),exponent);  while (tempDfp.lessThan(y) || tempDfp.equals(y)) {    tempDfp=tempDfp.multiply(2);    exponent++;  }  exponent--;  y=y.divide(DfpMath.pow(getTwo(),exponent));  if (exponent > -1023) {    y=y.subtract(getOne());  }  if (exponent < -1074) {    return 0;  }  if (exponent > 1023) {    return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;  }  y=y.multiply(newInstance(4503599627370496l)).rint();  String str=y.toString();  str=str.substring(0,str.length() - 1);  long mantissa=Long.parseLong(str);  if (mantissa == 4503599627370496L) {    mantissa=0;    exponent++;  }  if (exponent <= -1023) {    exponent--;  }  while (exponent < -1023) {    exponent++;    mantissa>>>=1;  }  long bits=mantissa | ((exponent + 1023L) << 52);  double x=Double.longBitsToDouble(bits);  if (negate) {    x=-x;  }  return x;}  }
class C{  private void adjustLeft(RectF rect,float left,RectF bounds,float snapMargin,float aspectRatio,boolean topMoves,boolean bottomMoves){  float newLeft=left;  if (newLeft < 0) {    newLeft/=1.05f;    mTouchOffset.x-=newLeft / 1.1f;  }  if (newLeft < bounds.left) {    mTouchOffset.x-=(newLeft - bounds.left) / 2f;  }  if (newLeft - bounds.left < snapMargin) {    newLeft=bounds.left;  }  if (rect.right - newLeft < mMinCropWidth) {    newLeft=rect.right - mMinCropWidth;  }  if (rect.right - newLeft > mMaxCropWidth) {    newLeft=rect.right - mMaxCropWidth;  }  if (newLeft - bounds.left < snapMargin) {    newLeft=bounds.left;  }  if (aspectRatio > 0) {    float newHeight=(rect.right - newLeft) / aspectRatio;    if (newHeight < mMinCropHeight) {      newLeft=Math.max(bounds.left,rect.right - mMinCropHeight * aspectRatio);      newHeight=(rect.right - newLeft) / aspectRatio;    }    if (newHeight > mMaxCropHeight) {      newLeft=Math.max(bounds.left,rect.right - mMaxCropHeight * aspectRatio);      newHeight=(rect.right - newLeft) / aspectRatio;    }    if (topMoves && bottomMoves) {      newLeft=Math.max(newLeft,Math.max(bounds.left,rect.right - bounds.height() * aspectRatio));    } else {      if (topMoves && rect.bottom - newHeight < bounds.top) {        newLeft=Math.max(bounds.left,rect.right - (rect.bottom - bounds.top) * aspectRatio);        newHeight=(rect.right - newLeft) / aspectRatio;      }      if (bottomMoves && rect.top + newHeight > bounds.bottom) {        newLeft=Math.max(newLeft,Math.max(bounds.left,rect.right - (bounds.bottom - rect.top) * aspectRatio));      }    }  }  rect.left=newLeft;}  }
class C{  public static Iterable<Map<String,Object>> scan(DataStore dataStore,String table,ReadConsistency consistency){  return scan(dataStore,table,null,Long.MAX_VALUE,consistency);}  }
class C{  public ConnectionAbsoluteTime(long time){  this.time=time;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_STIGMA_GET_HIDDEN_SKILL(DescriptionId descriptionId,int skilllvl){  return new SM_SYSTEM_MESSAGE(1402891,descriptionId,skilllvl);}  }
class C{  public static void writePemStringToFile(File file,String pemDataToWrite){  try {    FileUtils.write(file,pemDataToWrite);  } catch (  IOException e) {    throw new ExportException("Unable to write PEM string to file: " + file.getName(),e);  }}  }
class C{  public boolean isAskForPassword(){  return askForPassword;}  }
class C{  public Set<K> keySet(){  return counterMap.keySet();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PETITION_CHAT_STARTED_TO_USER(String value0){  return new SM_SYSTEM_MESSAGE(1300560,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_PROTECT_SKILL_A_to_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201166,skilltarget,num0,skillcaster,skillname);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void resetTimeoutTimer(){  timeoutTimer.reset();}  }
class C{  public static boolean isMatchPattern(final String string,final String patternString){  boolean result=false;  if (string != null && patternString != null) {    if (patternString.indexOf(METCH_PATTERN) >= 0) {      String matchPattern=Constant.Symbol.XOR + patternString.replaceAll(METCH_PATTERN_REGEX,METCH_PATTERN_REPLACEMENT) + Constant.Symbol.DOLLAR;      result=isMatchRegex(string,matchPattern);    } else {      if (string.equals(patternString)) {        result=true;      }    }  }  return result;}  }
class C{  static <T>AnyVal<T> anyOptional(AnyVal<Optional<T>> value){  return new AnyOptional<>(null,value);}  }
class C{  protected PhotosGetByIdQuery photos(String... value){  return unsafeParam("photos",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200737,skillcaster,skillname);}  }
class C{  public static void initFileMgr(String dirName){  fileMgr=new FileMgr(dirName);}  }
class C{  public boolean isStatic(){  return kind.isStatic();}  }
class C{  public static boolean isDark(@NonNull Bitmap bitmap){  return isDark(bitmap,bitmap.getWidth() / 2,bitmap.getHeight() / 2);}  }
class C{  public void start(Activity activity,int requestCode){  activity.startActivityForResult(getIntent(activity),requestCode);}  }
class C{  public void updateView(){  Graphics2D gc=(Graphics2D)getGraphics();  Dimension size=new Dimension();  draw(gc,size);  setPreferredSize(size);  revalidate();}  }
class C{  public boolean merge_stringbuffer(){  return soot.PhaseOptions.getBoolean(options,"merge-stringbuffer");}  }
class C{  private void showSticky(){  WXCell headComponent=headComponentStack.pop();  headComponentStack.push(headComponent);  View headerView=headComponent.getRealView();  if (headerView == null)   return;  headerViewStack.push(headerView);  headComponent.removeSticky();  ((ViewGroup)getParent()).addView(headerView);}  }
class C{  public final boolean skipDeclSpaces() throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(skipDeclSpaces: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position];  if (XMLChar.isSpace(c)) {    boolean external=fCurrentEntity.isExternal();    do {      boolean entityChanged=false;      if (c == '\n' || (external && c == '\r')) {        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count - 1) {          fCurrentEntity.ch[0]=(char)c;          entityChanged=load(1,true);          if (!entityChanged) {            fCurrentEntity.position=0;            fCurrentEntity.startPosition=0;          }        }        if (c == '\r' && external) {          if (fCurrentEntity.ch[++fCurrentEntity.position] != '\n') {            fCurrentEntity.position--;          }        }      } else {        fCurrentEntity.columnNumber++;      }      if (!entityChanged)       fCurrentEntity.position++;      if (fCurrentEntity.position == fCurrentEntity.count) {        load(0,true);      }    } while (XMLChar.isSpace(c=fCurrentEntity.ch[fCurrentEntity.position]));    if (DEBUG_BUFFER) {      System.out.print(")skipDeclSpaces: ");      XMLEntityManager.print(fCurrentEntity);      System.out.println(" -> true");    }    return true;  }  if (DEBUG_BUFFER) {    System.out.print(")skipDeclSpaces: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> false");  }  return false;}  }
class C{  public static List<TimeZone> availableTimeZones(){  return TimeZoneHolder.availableTimeZoneList;}  }
class C{  private void extractElementNode(Element eElement,DataSchema schema) throws PIRException {  String name=eElement.getElementsByTagName("name").item(0).getTextContent().trim();  String type=eElement.getElementsByTagName("type").item(0).getTextContent().trim();  schema.getTypeMap().put(name,type);  Node isArrayNode=eElement.getElementsByTagName("isArray").item(0);  if (isArrayNode != null) {    String isArrayValue=isArrayNode.getTextContent().trim().toLowerCase();    String isArray=isArrayValue.isEmpty() ? "true" : isArrayValue;    if (isArray.equals("true")) {      schema.getArrayElements().add(name);    }  }  String partitionerTypeName=PrimitiveTypePartitioner.class.getName();  boolean isPrimitivePartitioner=true;  if (eElement.getElementsByTagName("partitioner").item(0) != null) {    partitionerTypeName=eElement.getElementsByTagName("partitioner").item(0).getTextContent().trim();    isPrimitivePartitioner=partitionerTypeName.equals(PrimitiveTypePartitioner.class.getName());  }  DataPartitioner partitioner;  if (isPrimitivePartitioner) {    validateIsPrimitiveType(type);    partitioner=new PrimitiveTypePartitioner();  } else {    partitioner=instantiatePartitioner(partitionerTypeName);  }  schema.getPartitionerTypeMap().put(name,partitionerTypeName);  schema.getPartitionerInstances().put(partitionerTypeName,partitioner);  logger.info("name = " + name + " javaType = "+ type+ " isArray = "+ schema.getArrayElements().contains(name)+ " partitioner "+ partitionerTypeName);}  }
class C{  public static int apply(final ViewerBase viewer,String method,final int threshold,final Distances distances) throws IOException {  System.err.println("Computing " + method + " distances");  for (int s=1; s <= distances.getNtax(); s++) {    for (int t=s + 1; t <= distances.getNtax(); t++) {      distances.set(s,t,0);    }  }  int countNodes=0;  for (Node v=viewer.getTree().getFirstNode(); v != null; v=v.getNext()) {    if (v.getOutDegree() != 1 && (Integer)v.getInfo() > 0) {      countNodes++;      final int[] counts=(v.getOutDegree() == 0 ? viewer.getNodeData(v).getSummarized() : viewer.getNodeData(v).getAssigned());      for (int s=1; s <= distances.getNtax(); s++) {        for (int t=s + 1; t <= distances.getNtax(); t++) {          if ((counts[s - 1] < threshold) != (counts[t - 1] < threshold))           distances.increment(s,t);        }      }    }  }  if (countNodes > 0) {    for (int s=1; s <= distances.getNtax(); s++) {      for (int t=s + 1; t <= distances.getNtax(); t++) {        distances.set(s,t,distances.get(s,t) / countNodes);      }    }  }  return countNodes;}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void adjustVideoFitTextureView(){  Matrix matrix=new Matrix();  getTransform(matrix);  matrix.setScale(1,1);  setTransform(matrix);}  }
class C{  private void internal_updateSymbolBooleanField(Map<String,String> options,FieldIdEnum field,String key){  boolean value=fieldConfigVisitor.getBoolean(field);  Boolean defaultValue=(Boolean)getDefaultFieldValue(field);  if (defaultValue == null) {    ConsoleManager.getInstance().error(this,"Failed to find default for field : " + field);  } else   if (value != defaultValue) {    options.put(key,String.valueOf(value));  }}  }
class C{  void checkNotationType(String refName,XSTypeDefinition typeDecl,Element elem){  if (typeDecl.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE && ((XSSimpleType)typeDecl).getVariety() == XSSimpleTypeDefinition.VARIETY_ATOMIC && ((XSSimpleType)typeDecl).getPrimitiveKind() == XSSimpleType.PRIMITIVE_NOTATION) {    if ((((XSSimpleType)typeDecl).getDefinedFacets() & XSSimpleTypeDefinition.FACET_ENUMERATION) == 0) {      reportSchemaError("enumeration-required-notation",new Object[]{typeDecl.getName(),refName,DOMUtil.getLocalName(elem)},elem);    }  }}  }
class C{  @Override public long nodeNumber(){  throw new UnsupportedOperationException("Unsupported operation");}  }
class C{  public final boolean add(Node n){  if (pag.getTypeManager().castNeverFails(n.getType(),type)) {    return s.add(n);  }  return false;}  }
class C{  private static BigDecimal sanitize(BigInteger value,int signum){  if (signum == 0 || value == null) {    return ZERO;  }  if (signum > 0) {    return new BigDecimal(value);  }  return new BigDecimal(value.negate());}  }
class C{  public Uri remapUri(Uri uri){  return null;}  }
class C{  public synchronized void insertAudio(String inputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext,byte[] audio) throws SQLException {  if (inputtype == null || locale == null || voice == null || inputtext == null) {    throw new NullPointerException("Null argument");  }  if (lookupAudio(inputtype,locale,voice,outputparams,style,effects,inputtext) != null) {    return;  }  String query="INSERT INTO MARYCACHE (inputtype, outputtype, locale, voice, outputparams, style, effects, inputtext, outputaudio) VALUES('" + inputtype + "','AUDIO','"+ locale+ "','"+ voice+ "','"+ outputparams+ "','"+ style+ "','"+ effects+ "',?,?)";  PreparedStatement st=connection.prepareStatement(query);  st.setString(1,inputtext);  st.setBytes(2,audio);  st.executeUpdate();  st.close();}  }
class C{  public Iterator edges(){  return m_edgeTuples.iterator(edgeRows());}  }
class C{  @Subscribe public void onEvent(ServerUnreachableEvent event){  Snackbar.make(findViewById(R.id.root),getString(R.string.toast_server_unreachable),Snackbar.LENGTH_LONG).show();  event.getE().printStackTrace();}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  private void loadProperties(String configFile) throws IOException {  try {    Properties properties=new Properties();    properties.load(new BufferedReader(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(configFile))));    appProperties=properties;    LOGGER.debug("Properties loaded: " + appProperties.toString());  } catch (  IOException e) {    LOGGER.error("Can not read config file " + configFile,e);    throw e;  }  setPropertyFromSystemProperty("api.server.protocol","api-server-protocol");  setPropertyFromSystemProperty("api.server.name","api-server-name");  setPropertyFromSystemProperty("api.version.string","api-version-string");  setPropertyFromSystemProperty("node.count","node-count");  setPropertyFromSystemProperty("user-name","user-name");  setPropertyFromSystemProperty("password","password");  setPropertyFromSystemProperty("user-lastname","user-lastname");  setPropertyFromSystemProperty("validTokenPattern","validTokenPattern");  setPropertyFromSystemProperty("user-email","user-email");  setPropertyFromSystemProperty("application.name","application-name");  setPropertyFromSystemProperty("experiment.prefix","experiment-prefix");  setPropertyFromSystemProperty("bucket.prefix","bucket-prefix");}  }
class C{  private void do_pts_interval_merge(){  for (  PtInsIntervalManager im : pt_objs.values()) {    im.mergeFigures(Parameters.max_pts_budget);  }}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static RemoteResourceStatus fromBytes(byte[] bytes) throws SVNException {  return ((bytes != null) && (bytes.length > 0)) ? new RemoteResourceStatus(bytes) : null;}  }
class C{  static private Node createTextNode(Document _doc,String tagName,String tagValue){  Element tag=_doc.createElement(tagName);  Text tagText=_doc.createTextNode(tagValue);  tag.appendChild(tagText);  return tag;}  }
class C{  public void cleanup(){  this.jumpFn.clear();  this.incoming.clear();  this.endSummary.clear();  this.val.clear();  this.cache.clear();}  }
class C{  private void detectFace(Bitmap bitmap,PointF centerOfAllFaces){  FaceDetector faceDetector=GlideFaceDetector.getFaceDetector();  if (!faceDetector.isOperational()) {    centerOfAllFaces.set(bitmap.getWidth() / 2,bitmap.getHeight() / 2);    return;  }  Frame frame=new Frame.Builder().setBitmap(bitmap).build();  SparseArray<Face> faces=faceDetector.detect(frame);  final int totalFaces=faces.size();  if (totalFaces > 0) {    float sumX=0f;    float sumY=0f;    for (int i=0; i < totalFaces; i++) {      PointF faceCenter=new PointF();      getFaceCenter(faces.get(faces.keyAt(i)),faceCenter);      sumX=sumX + faceCenter.x;      sumY=sumY + faceCenter.y;    }    centerOfAllFaces.set(sumX / totalFaces,sumY / totalFaces);    return;  }  centerOfAllFaces.set(bitmap.getWidth() / 2,bitmap.getHeight() / 2);}  }
class C{  @Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){  View view=inflater.inflate(R.layout.fragment_timeline_display,container,false);  displayImage=(ImageView)view.findViewById(R.id.pagerImage);  if (displayImage != null) {    setImage(imageURL);  }  return view;}  }
class C{  public FriendList(Player owner,Collection<Friend> newFriends){  this.friends=new ConcurrentLinkedQueue<Friend>(newFriends);  this.player=owner;}  }
class C{  public void removeAttribute(String name){  attributes.remove(name);}  }
class C{  public double slope(){  return beta;}  }
class C{  @Override public void stop(BundleContext bc) throws Exception {  context=null;  logger.debug("ZWave binding stopped.");}  }
class C{  void initOutputDirectory() throws CommandException {  if (outputDirectoryParam == null) {    outputDirectoryPath=Paths.get(nameParam);  } else {    outputDirectoryPath=Paths.get(outputDirectoryParam);  }  try {    java.nio.file.Files.createDirectories(outputDirectoryPath);  } catch (  IOException ioe) {    throw new CommandException("Error creating output directory",ioe);  }}  }
class C{  public static boolean hasJellyBeanMr2(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;}  }
class C{  public Well512a(int seed){  super(K,seed);}  }
class C{  protected boolean confirmRevert(IResource[] modifiedResources){  if (modifiedResources.length == 0) {    if (showNothingToRevertMessage) {      MessageDialog.openInformation(Display.getDefault().getActiveShell(),Policy.bind("RevertAction.0"),Policy.bind("RevertAction.1"));    }    return false;  }  revertPage=new SvnWizardRevertPage(modifiedResources,url,statusMap,false);  revertPage.setResourceRemoved(resourcesHidden);  SvnWizard wizard=new SvnWizard(revertPage);  SvnWizardDialog dialog=new SvnWizardDialog(getShell(),wizard);  boolean revert=(dialog.open() == SvnWizardDialog.OK);  url=null;  resourcesToRevert=revertPage.getSelectedResources();  return revert;}  }
class C{  public static int signedLeb128Size(int value){  int remaining=value >> 7;  int count=0;  boolean hasMore=true;  int end=((value & Integer.MIN_VALUE) == 0) ? 0 : -1;  while (hasMore) {    hasMore=(remaining != end) || ((remaining & 1) != ((value >> 6) & 1));    value=remaining;    remaining>>=7;    count++;  }  return count;}  }
class C{  public CMULexicon(URL compiledURL,URL addendaURL,URL letterToSoundURL,boolean binary){  setLexiconParameters(compiledURL,addendaURL,letterToSoundURL,binary);}  }
class C{  public static VersionNumber parseVersion(@Nonnull final String version){  return VersionParser.parseVersion(Check.notNull(version,"version"));}  }
class C{  public void removeIndexUserToExperiment(User.ID userID,Experiment.ID experimentID,Context context,Application.Name appName){  final String CQL="delete from user_experiment_index " + "where user_id = ? and experiment_id = ? and context = ? and app_name = ?";  try {    PreparedCqlQuery<Application.Name,String> query=driver.getKeyspace().prepareQuery(keyspace.userExperimentIndexCF()).withCql(CQL).asPreparedStatement().withByteBufferValue(userID,UserIDSerializer.get()).withByteBufferValue(experimentID,ExperimentIDSerializer.get()).withStringValue(context.getContext()).withByteBufferValue(appName,ApplicationNameSerializer.get());    query.execute();  } catch (  ConnectionException e) {    throw new RepositoryException("Could not remove index from user_experiment for user: " + userID + " to experiment: "+ experimentID,e);  }}  }
class C{  public final boolean equals(Object obj){  if (toString() == null) {    return (obj != null) && (obj.toString() == null);  }  if (obj instanceof Type) {    return toString().equals(obj.toString());  }  return false;}  }
class C{  private static long rangeCheck(long value) throws NumberFormatException {  if (value < MIN_VALUE || value > MAX_VALUE) {    throw new NumberFormatException("Value is out of range : " + value);  }  return value;}  }
class C{  public static double distanceSq(Vector2D p1,Vector2D p2){  return p1.distanceSq(p2);}  }
class C{  @Override public Boolean useProxy(){  return Boolean.parseBoolean((String)properties.get("export.rest.useProxy"));}  }
class C{  private void writeBitToHeader(Page page,int slotNum,byte value){  byte[] header=this.readPageHeader(page);  int byteOffset=slotNum / 8;  int bitOffset=7 - (slotNum % 8);  if (value == 0) {    byte mask=(byte)~((1 << bitOffset));    header[byteOffset]=(byte)(header[byteOffset] & mask);    page.writeBytes(0,this.pageHeaderSize,header);  } else {    byte mask=(byte)(1 << bitOffset);    header[byteOffset]=(byte)(header[byteOffset] | mask);  }  page.writeBytes(0,this.pageHeaderSize,header);}  }
class C{  public int diff_commonPrefix(String text1,String text2){  int n=Math.min(text1.length(),text2.length());  for (int i=0; i < n; i++) {    if (text1.charAt(i) != text2.charAt(i)) {      return i;    }  }  return n;}  }
class C{  protected boolean right(Vector2 a,Vector2 b,Vector2 p){  return Segment.getLocation(p,a,b) < 0;}  }
class C{  public boolean isLastSplit(){  return isLastSplit;}  }
class C{  public void increaseCounts(Map<String,Integer> eventCount,Predicate<String> predicate){  increaseEventCount(eventCount,predicate);  increaseActionCount(eventCount,predicate);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  try {    check();  } catch (  RuntimeException e) {    rethrow(e);  }}  }
class C{  @Override public Schema schema(){  return p.schema();}  }
class C{  public void addItems(List<Task> _model){  this.model.addAll(_model);  notifyDataSetChanged();}  }
class C{  public static boolean expressionIsTrue(double leftSide,Operator operator,double rightSide){  final String expression=leftSide + operator.getMathematicalOperator() + rightSide;  return expressionIsTrue(expression);}  }
class C{  public String toString(){  String eventClassName=(eventClass == null ? "<null>" : eventClass.getName());  String eventIDVal=(eventID == null ? "<null>" : eventID.toString());  return ("Class: " + eventClassName + ", eventID: "+ eventIDVal);}  }
class C{  public boolean isPreheatCache(){  return preheatCache == null ? true : preheatCache;}  }
class C{  public int updateName(long playlistId,String name){  ContentValues value=new ContentValues();  value.put(MediaStore.Audio.Playlists.NAME,name);  return resolver.update(MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,value,MediaStore.Audio.Playlists._ID + " = ?",new String[]{String.valueOf(playlistId)});}  }
class C{  public SimpleMqttConnectionRunnable(final BaseScriptManager scriptManager,final SimpleMqttConnection connection,final DaemonMqttConnectionDetails connectionSettings){  this.connection=connection;  this.connectionSettings=connectionSettings;  this.scriptManager=scriptManager;}  }
class C{  public boolean buildHostPart(Appendable buffer,String url,Boolean useSSL) throws WebAppConfigurationException, IOException {  return buildHostPart(buffer,url,useSSL,true);}  }
class C{  public void addSuperInterfaceId(Access node){  List<Access> list=(parent == null || state == null) ? getSuperInterfaceIdListNoTransform() : getSuperInterfaceIdList();  list.addChild(node);}  }
class C{  public static void main(String[] args){  ScaleToolPanel dlg=new ScaleToolPanel(null);  dlg.setVisible(true);}  }
class C{  public static double signum(final double a){  return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);}  }
class C{  @Override protected void checkFeature(String featureId) throws XMLConfigurationException {  if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {    final int suffixLength=featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();    if (suffixLength == Constants.DYNAMIC_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.DYNAMIC_VALIDATION_FEATURE)) {      return;    }    if (suffixLength == Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE.length() && featureId.endsWith(Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.VALIDATE_CONTENT_MODELS_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_CONTENT_MODELS_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.LOAD_DTD_GRAMMAR_FEATURE.length() && featureId.endsWith(Constants.LOAD_DTD_GRAMMAR_FEATURE)) {      return;    }    if (suffixLength == Constants.LOAD_EXTERNAL_DTD_FEATURE.length() && featureId.endsWith(Constants.LOAD_EXTERNAL_DTD_FEATURE)) {      return;    }    if (suffixLength == Constants.VALIDATE_DATATYPES_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_DATATYPES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }  }  super.checkFeature(featureId);}  }
class C{  @Override public void reset() throws XNIException {  super.reset();  fCreateEntityRefNodes=fConfiguration.getFeature(CREATE_ENTITY_REF_NODES);  fIncludeIgnorableWhitespace=fConfiguration.getFeature(INCLUDE_IGNORABLE_WHITESPACE);  fDeferNodeExpansion=fConfiguration.getFeature(DEFER_NODE_EXPANSION);  fNamespaceAware=fConfiguration.getFeature(NAMESPACES);  fIncludeComments=fConfiguration.getFeature(INCLUDE_COMMENTS_FEATURE);  fCreateCDATANodes=fConfiguration.getFeature(CREATE_CDATA_NODES_FEATURE);  setDocumentClassName((String)fConfiguration.getProperty(DOCUMENT_CLASS_NAME));  fDocument=null;  fDocumentImpl=null;  fStorePSVI=false;  fDocumentType=null;  fDocumentTypeIndex=-1;  fDeferredDocumentImpl=null;  fCurrentNode=null;  fStringBuffer.setLength(0);  fRoot=null;  fInDTD=false;  fInDTDExternalSubset=false;  fInCDATASection=false;  fFirstChunk=false;  fCurrentCDATASection=null;  fCurrentCDATASectionIndex=-1;  fBaseURIStack.removeAllElements();}  }
class C{  @Override public void write(int idx) throws IOException {  try {    beforeWrite(1);    out.write(idx);    afterWrite(1);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public String toString(cp_info constant_pool[]){  cp_info target=constant_pool[target_index];  return target.toString(constant_pool);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public static boolean isLegacyIdeaAndroidProject(@NotNull Project project){  ModuleManager moduleManager=ModuleManager.getInstance(project);  for (  Module module : moduleManager.getModules()) {    if (isLegacyIdeaAndroidModule(module)) {      return true;    }  }  return false;}  }
class C{  @Override public void splitNode(){  return;}  }
class C{  public void showSvnProperties(ISVNRemoteResource resource) throws SVNException {  this.remoteResource=resource;  this.resource=null;  if (remoteResource != null) {    if (remoteResource.getRevision() != null) {      setContentDescription(Policy.bind("SvnRevPropertiesView.titleWithTwoArguments",remoteResource.getRevision().toString(),remoteResource.getName()));    }  } else {    setContentDescription("");  }  updateStatus();}  }
class C{  protected double computeObjectiveValue(double x){  super.incrementEvaluationCount();  return function.value(x);}  }
class C{  public boolean add(LogicalMetric logicalMetric){  return this.put(logicalMetric.getName(),logicalMetric) == null;}  }
class C{  public InterpolatingMicrosphere copy(){  return new InterpolatingMicrosphere(this);}  }
class C{  private boolean parseUnescapedField(int fieldUpto) throws ParseException {  int fieldStart=bufferUpto;  while (bufferUpto < bytes.length) {    byte b=bytes[bufferUpto++];    if (b == delimChar) {      addOneField(fieldUpto,fieldStart,bufferUpto - fieldStart - 1);      return true;    } else     if (b == NEWLINE) {      addOneField(fieldUpto,fieldStart,bufferUpto - fieldStart - 1);      bufferUpto--;      return true;    }  }  return false;}  }
class C{  protected boolean isValidPath(String path){  if (path == null) {    return false;  }  if (!PATH_PATTERN.matcher(path).matches()) {    return false;  }  int slash2Count=countToken("//",path);  if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {    return false;  }  int slashCount=countToken("/",path);  int dot2Count=countToken("..",path);  if (dot2Count > 0 && (slashCount - slash2Count - 1) <= dot2Count) {    return false;  }  return true;}  }
class C{  public static boolean equals(@NonNull final Class first,@NonNull final Class second){  return first.getCanonicalName().equals(second.getCanonicalName());}  }
class C{  public Decoration findRealDecorationOfDummy(int pieceIndex,int decorationIndex){  if (getDecoration(pieceIndex,decorationIndex) != dummyDecoration) {    throw new IllegalArgumentException("The specified decoration must be a dummy!");  }  int i=decorationIndex;  while (getDecoration(pieceIndex,i) == dummyDecoration) {    i--;  }  return getDecoration(pieceIndex,i);}  }
class C{  public static <T>IStoredList<T> createConcurrentList(boolean segmented,boolean supportFifoPerSegment,Object StoredIndexValueInHashmap){  return new ConcurrentSegmentedStoredListHashmapEntry<T>(segmented,supportFifoPerSegment,StoredIndexValueInHashmap);}  }
class C{  public int valueAt(int index){  return mValues[index];}  }
class C{  @SuppressWarnings({"checkstyle:cyclomaticcomplexity","checkstyle:javadocstyle","checkstyle:javadocmethod"}) private Map parseObject(JsonLexer lexer){  Map content;  if (sortMaps) {    content=new TreeMap();  } else {    content=new LinkedHashMap();  }  JsonToken previousToken=null;  JsonToken currentToken=null;  for (; ; ) {    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected a String key on line: " + lexer.getReader().getLine() + ", "+ "column: "+ lexer.getReader().getColumn()+ ".\n"+ "But got an unterminated object.");    }    if (currentToken.getType() == CLOSE_CURLY) {      return content;    } else     if (currentToken.getType() != STRING) {      throw new JsonException("Expected " + STRING.getLabel() + " key "+ "on line: "+ currentToken.getStartLine()+ ", "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }    String mapKey=(String)currentToken.getValue();    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected a " + COLON.getLabel() + " "+ "on line: "+ lexer.getReader().getLine()+ ", "+ "column: "+ lexer.getReader().getColumn()+ ".\n"+ "But got an unterminated object.");    }    if (currentToken.getType() != COLON) {      throw new JsonException("Expected " + COLON.getLabel() + " "+ "on line: "+ currentToken.getStartLine()+ ", "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected a value " + "on line: " + lexer.getReader().getLine() + ", "+ "column: "+ lexer.getReader().getColumn()+ ".\n"+ "But got an unterminated object.");    }    if (currentToken.getType() == OPEN_CURLY) {      content.put(mapKey,parseObject(lexer));    } else     if (currentToken.getType() == OPEN_BRACKET) {      content.put(mapKey,parseArray(lexer));    } else     if (currentToken.getType().ordinal() >= NULL.ordinal()) {      content.put(mapKey,currentToken.getValue());    } else {      throw new JsonException("Expected a value, an array, or an object " + "on line: " + currentToken.getStartLine() + ", "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }    previousToken=currentToken;    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected " + CLOSE_CURLY.getLabel() + " or "+ COMMA.getLabel()+ " "+ "on line: "+ previousToken.getEndLine()+ ", "+ "column: "+ previousToken.getEndColumn()+ ".\n"+ "But got an unterminated object.");    }    if (currentToken.getType() == CLOSE_CURLY) {      break;    } else     if (currentToken.getType() != COMMA) {      throw new JsonException("Expected a value or " + CLOSE_CURLY.getLabel() + " "+ "on line: "+ currentToken.getStartLine()+ ", "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }  }  return content;}  }
class C{  public static boolean hasAliveTagIntervalChanged(final IEquipmentConfiguration equipmentConfiguration,final IEquipmentConfiguration oldEquipmentConfiguration){  return equipmentConfiguration.getAliveTagInterval() != oldEquipmentConfiguration.getAliveTagInterval();}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.KULCZYNSKI);}  }
class C{  public void updateAllUsers(){  plugin.doSync(null);}  }
class C{  private void handlePunctureRequest(Peer peer,PunctureRequest message) throws IOException, MessageException {  if (!peerExists(message.getPuncturePeer().getPeerId()))   sendPuncture(message.getPuncturePeer());}  }
class C{  public boolean isApplicable(){  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;}  }
class C{  public ResourcesPoet addStyle(String name,@Nullable String parentRef){  return addStyle(name,parentRef,null);}  }
class C{  static public byte[] decode(char[] data){  int tempLen=data.length;  for (int ix=0; ix < data.length; ix++) {    if ((data[ix] > 255) || codes[data[ix]] < 0)     --tempLen;  }  int len=(tempLen / 4) * 3;  if ((tempLen % 4) == 3)   len+=2;  if ((tempLen % 4) == 2)   len+=1;  byte[] out=new byte[len];  int shift=0;  int accum=0;  int index=0;  for (int ix=0; ix < data.length; ix++) {    int value=(data[ix] > 255) ? -1 : codes[data[ix]];    if (value >= 0) {      accum<<=6;      shift+=6;      accum|=value;      if (shift >= 8) {        shift-=8;        out[index++]=(byte)((accum >> shift) & 0xff);      }    }  }  if (index != out.length) {    throw new Error("Miscalculated data length (wrote " + index + " instead of "+ out.length+ ")");  }  return out;}  }
class C{  public static java.sql.Timestamp toTimestamp(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){  java.util.Date newDate=toDate(monthStr,dayStr,yearStr,hourStr,minuteStr,secondStr);  if (newDate != null) {    return new java.sql.Timestamp(newDate.getTime());  } else {    return null;  }}  }
class C{  void expandNodes(ProgressListener progressListener,int num_nodes,int ntax,Stack amalgs,NetNode netNodes,int[] ordering) throws CanceledException {  NetNode x, y, z, u, v, a;  x=netNodes.next;  y=x.next;  z=y.next;  z.next=x;  x.prev=z;  while (!amalgs.empty()) {    u=(NetNode)(amalgs.pop());    v=u.nbr;    x=u.ch1;    y=u.ch2;    z=v.ch2;    if (v != u.next) {      NetNode tmp=u;      u=v;      v=tmp;      tmp=x;      x=z;      z=tmp;    }    x.prev=u.prev;    x.prev.next=x;    x.next=y;    y.prev=x;    y.next=z;    z.prev=y;    z.next=v.next;    z.next.prev=z;    if (progressListener != null)     progressListener.checkForCancel();  }  while (x.id != 1) {    x=x.next;  }  a=x;  int t=0;  do {    ordering[++t]=a.id;    a=a.next;  } while (a != x);}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  public Builder cacheOnDisc(boolean cacheOnDisc){  this.cacheOnDisc=cacheOnDisc;  return this;}  }
class C{  @Override public void unlockPool(){synchronized (fGrammarPool) {    fGrammarPool.unlockPool();  }}  }
class C{  public void useItem(ItemId type) throws RemoteServerException, LoginFailedException {  if (type == ItemId.UNRECOGNIZED) {    throw new IllegalArgumentException("You cannot use item for UNRECOGNIZED");  }switch (type) {case ITEM_INCENSE_ORDINARY:case ITEM_INCENSE_SPICY:case ITEM_INCENSE_COOL:case ITEM_INCENSE_FLORAL:    useIncense(type);  break;default :break;}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201141,value0);}  }
class C{  public boolean subtractFrom(Rectangle bounds){  if (isEmpty()) {    return false;  }  bounds.x-=left;  bounds.width+=left;  bounds.y-=top;  bounds.height+=top;  bounds.width+=right;  bounds.height+=bottom;  return true;}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public JSONObject put(String key,Map<String,Object> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  public MultiFilterObject(Context c){  this.adapter=new PhotoAdapter(c,new ArrayList<Photo>());  this.service=PhotoService.getService();  this.searchQuery="";  this.searchUser="";  this.searchCategory=0;  this.searchOrientation="";  this.searchFeatured=false;  this.refreshing=false;  this.loading=false;  this.over=false;}  }
class C{  private void initView(){  this.container=(CoordinatorLayout)findViewById(R.id.activity_preview_photo_container);  PhotoView photoView=(PhotoView)findViewById(R.id.activity_preview_photo_photoView);  photoView.setMaxScale(calcMaxScale());  photoView.enable();  photoView.setOnClickListener(this);  Glide.with(this).load(photo.urls.regular).diskCacheStrategy(DiskCacheStrategy.SOURCE).into(photoView);  this.widgetContainer=(LinearLayout)findViewById(R.id.activity_preview_photo_widgetContainer);  this.iconContainer=(LinearLayout)findViewById(R.id.activity_preview_photo_iconContainer);}  }
class C{  public DBSCANClusterer(final double eps,final int minPts,final DistanceMeasure measure) throws MathIllegalArgumentException {  super(measure);  if (eps < 0.0d) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,eps,0);  }  if (minPts < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,minPts,0);  }  this.eps=eps;  this.minPts=minPts;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoReduceSpellATK_Instant_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201279,skillcaster,num0,skilltarget,skillname);}  }
class C{  public void zoomIn(){  PointF center=mViewPortHandler.getContentCenter();  Matrix save=mViewPortHandler.zoomIn(center.x,-center.y);  mViewPortHandler.refresh(save,this,false);  calculateOffsets();  postInvalidate();}  }
class C{  private AsyncObservable(){  throw new IllegalStateException("No instances!");}  }
class C{  public MidiEvent(MidiMessage message,long tick){  this.message=message;  this.tick=tick;}  }
class C{  protected void registerLangHandler(CreateSimpleLexer handler,List<String> fileExtensions) throws Exception {  for (int i=fileExtensions.size(); --i >= 0; ) {    String ext=fileExtensions.get(i);    if (langHandlerRegistry.get(ext) == null) {      langHandlerRegistry.put(ext,handler);    } else {      throw new Exception("cannot override language handler " + ext);    }  }}  }
class C{  public String loadFile(String sID){  return getDocumentText(sID,true);}  }
class C{  public static UInteger uint(int value){  return UInteger.valueOf(value);}  }
class C{  public void addMenuItem(String name,ActionListener listener){  int row=m_items.addRow();  m_items.set(row,LABEL,name);  m_items.set(row,ACTION,listener);}  }
class C{  public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  @Override public void endElement(QName element,Augmentations augs) throws XNIException {  if (fNamespaces) {    handleEndElement(element,augs,false);  } else   if (fDocumentHandler != null) {    fDocumentHandler.endElement(element,augs);  }}  }
class C{  public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode,boolean includeInternal,List<Object> errorMessages,TimeZone timeZone,Locale locale){  Map<String,Object> target=new HashMap<String,Object>();  if (source == null) {    return target;  }  if (!"IN".equals(mode) && !"OUT".equals(mode) && !"INOUT".equals(mode)) {    return target;  }  if (contextInfo.size() == 0) {    return target;  }  if (locale == null) {    if (source.containsKey("locale")) {      locale=(Locale)source.get("locale");    }    if (locale == null) {      locale=Locale.getDefault();    }  }  if (timeZone == null) {    if (source.containsKey("timeZone")) {      timeZone=(TimeZone)source.get("timeZone");    }    if (timeZone == null) {      timeZone=TimeZone.getDefault();    }  }  for (  ModelParam param : contextParamList) {    if (param.mode.equals("INOUT") || param.mode.equals(mode)) {      String key=param.name;      if (UtilValidate.isNotEmpty(param.stringMapPrefix) && !source.containsKey(key)) {        Map<String,Object> paramMap=this.makePrefixMap(source,param);        if (UtilValidate.isNotEmpty(paramMap)) {          target.put(key,paramMap);        }      } else       if (UtilValidate.isNotEmpty(param.stringListSuffix) && !source.containsKey(key)) {        List<Object> paramList=this.makeSuffixList(source,param);        if (UtilValidate.isNotEmpty(paramList)) {          target.put(key,paramList);        }      } else {        if (source.containsKey(key)) {          if ((param.internal && includeInternal) || (!param.internal)) {            Object value=source.get(key);            try {              value=ObjectType.simpleTypeConvert(value,param.type,null,timeZone,locale,false);            } catch (            GeneralException e) {              String errMsg="Type conversion of field [" + key + "] to type ["+ param.type+ "] failed for value \""+ value+ "\": "+ e.toString();              Debug.logWarning("[ModelService.makeValid] : " + errMsg,module);              if (errorMessages != null) {                errorMessages.add(errMsg);              }            }            target.put(key,value);          }        }      }    }  }  return target;}  }
class C{  public Builder addColumn(ColumnMetaData metaData){  columnMetaData.add(metaData);  return this;}  }
class C{  protected double populationStandardDeviation(double[] v){  double mean=StatUtils.mean(v);  double sum=0;  for (  double val : v) {    sum+=(val - mean) * (val - mean);  }  return FastMath.sqrt(sum / v.length);}  }
class C{  public JComponent createComponent(){  return createHorizontalRangeSlider();}  }
class C{  public boolean fixDuplicateCasting(Object castingId){  ConceptImpl concept=getConceptByBaseIdentifier(castingId);  if (concept == null || !concept.isCasting())   return false;  CastingImpl casting=concept.asCasting();  InstanceImpl rolePlayer=casting.getRolePlayer();  RoleType role=casting.getRole();  List<Vertex> castingVertices=getTinkerPopGraph().traversal().V(rolePlayer.getBaseIdentifier()).inE(Schema.EdgeLabel.ROLE_PLAYER.getLabel()).has(Schema.EdgeProperty.ROLE_TYPE.name(),role.getId()).otherV().toList();  Set<CastingImpl> castings=castingVertices.stream().map(null).collect(Collectors.toSet());  if (castings.size() < 2) {    return false;  }  castings.remove(casting);  Set<RelationImpl> duplicateRelations=mergeCastings(casting,castings);  deleteRelations(duplicateRelations);  return true;}  }
class C{  public void destroy(){  if (group.isDestroyed())   return;  int activeCount=group.activeCount();  Thread[] activeThreads=new Thread[activeCount];  int numThreads=group.enumerate(activeThreads);  for (int i=0; i < numThreads; i++) {    try {      if (activeThreads[i] instanceof PoolableThread)       ((PoolableThread)activeThreads[i]).cleanStop();      activeThreads[i].interrupt();    } catch (    Exception ex) {      logger.log(Level.WARNING,"Failed to stop active thread " + activeThreads[i].getId(),ex);      ex.printStackTrace();    }    remove(activeThreads[i]);  }  group.interrupt();  destroyChildGroup(group);  for (int i=0; group.activeCount() > 0 && i < 10; i++) {    try {      Thread.sleep(10);    } catch (    InterruptedException e) {      logger.log(Level.WARNING,"Interrupted while destroying latent Threads",e);    }  }  try {    if (!group.isDestroyed())     group.destroy();  } catch (  IllegalThreadStateException e) {    if (!group.isDestroyed()) {      logger.log(Level.WARNING,"IllegalThreadState destroying ThreadGroup",e);    }  }}  }
class C{  public AccountSaveProfileInfoQuery homeTown(String value){  return unsafeParam("home_town",value);}  }
class C{  @Override public void toggle(){  setChecked(!isChecked);}  }
class C{  private double calcAngularWidth(NodeItem n,int d){  if (d > m_maxDepth)   m_maxDepth=d;  double aw=0;  Rectangle2D bounds=n.getBounds();  double w=bounds.getWidth(), h=bounds.getHeight();  double diameter=d == 0 ? 0 : Math.sqrt(w * w + h * h) / d;  if (n.isExpanded() && n.getChildCount() > 0) {    Iterator childIter=n.children();    while (childIter.hasNext()) {      NodeItem c=(NodeItem)childIter.next();      aw+=calcAngularWidth(c,d + 1);    }    aw=Math.max(diameter,aw);  } else {    aw=diameter;  }  ((Params)n.get(PARAMS)).width=aw;  return aw;}  }
class C{  public boolean drain(){  return true;}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECT\"";  db.execSQL(sql);}  }
class C{  private static void check(double[] x,double[] y){  if (x.length == y.length) {    for (int i=0; i < x.length; i++) {      check(x[i],y[i]);    }  } else {    throw new RuntimeException("Attempt to compare vectors of different lengths");  }}  }
class C{  public boolean tryWriteLockOnKey(K id,Long timeout){  try {    return cache.tryWriteLockOnKey(id,timeout);  } catch (  InterruptedException e) {    LOGGER.debug("Thread interrupted for id=" + String.valueOf(id) + " ("+ this.getClass()+ ")");    return false;  }}  }
class C{  @Override public Optional<Object> provideValue(Object pageObject,Field field,PageObjectContext context){  AemDialogFieldResolver aemDialogFieldResolver=fieldResolverProvider.get();  DialogField dialogFieldAnnotation=field.getAnnotation(DialogField.class);  String searchBy;  Class<?> type=field.getType();  Object dialogField=null;  if (StringUtils.isNotEmpty(dialogFieldAnnotation.label())) {    searchBy=dialogFieldAnnotation.label();    dialogField=aemDialogFieldResolver.getField(searchBy,type);  } else   if (StringUtils.isNotEmpty(dialogFieldAnnotation.css())) {    searchBy=dialogFieldAnnotation.css();    dialogField=aemDialogFieldResolver.getFieldByCss(searchBy,type);  } else   if (StringUtils.isNotEmpty(dialogFieldAnnotation.name())) {    searchBy=dialogFieldAnnotation.name();    dialogField=aemDialogFieldResolver.getFieldByName(searchBy,type);  } else   if (StringUtils.isNotEmpty(dialogFieldAnnotation.xpath())) {    searchBy=dialogFieldAnnotation.xpath();    dialogField=aemDialogFieldResolver.getFieldByXpath(searchBy,type);  }  return Optional.ofNullable(dialogField);}  }
class C{  public void waiterNotify(Object notifier){synchronized (notifier) {    notifier.notifyAll();  }}  }
class C{  public static byte[] compressForGzip(String string){  ByteArrayOutputStream os=null;  GZIPOutputStream gos=null;  try {    os=new ByteArrayOutputStream(string.length());    gos=new GZIPOutputStream(os);    gos.write(string.getBytes("UTF-8"));    byte[] compressed=os.toByteArray();    return compressed;  } catch (  IOException e) {    e.printStackTrace();  } finally {    okhttp3.internal.Util.closeQuietly(gos);    okhttp3.internal.Util.closeQuietly(os);  }  return null;}  }
class C{  public void listen(@NotNull ObservableValue<?> src,@NotNull InvalidationListener listener){  myListeners.add(new ListenerPairing(src,listener));}  }
class C{  public void updateTime(int hourOfDay,int minuteOfHour){  mTimePicker.setCurrentHour(hourOfDay);  mTimePicker.setCurrentMinute(minuteOfHour);}  }
class C{  @Override public final void confirmEquipmentStateIncorrect(final String pDescription){  sendCommfaultTag(this.equipmentConfiguration.getCommFaultTagId(),equipmentConfiguration.getName(),this.equipmentConfiguration.getCommFaultTagValue(),pDescription);  Map<Long,SubEquipmentConfiguration> subEquipmentConfigurations=equipmentConfiguration.getSubEquipmentConfigurations();  for (  SubEquipmentConfiguration subEquipmentConfiguration : subEquipmentConfigurations.values()) {    sendCommfaultTag(subEquipmentConfiguration.getCommFaultTagId(),subEquipmentConfiguration.getName(),subEquipmentConfiguration.getCommFaultTagValue(),pDescription);  }}  }
class C{  public static void d(String tag,String msg){  d(tag,msg,null);}  }
class C{  public void putValue(@NotNull String key,@NotNull ObservableValue value){  myValues.put(key,value);}  }
class C{  public static boolean contentEqualsIgnoreEOL(File file1,File file2,String charsetName) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  Reader input1=null;  Reader input2=null;  try {    if (charsetName == null) {      input1=new InputStreamReader(new FileInputStream(file1));      input2=new InputStreamReader(new FileInputStream(file2));    } else {      input1=new InputStreamReader(new FileInputStream(file1),charsetName);      input2=new InputStreamReader(new FileInputStream(file2),charsetName);    }    return IOUtils.contentEqualsIgnoreEOL(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  public MultiSourceSingleFileReliableAsyncBacklogHandshakeRequest(){  super();}  }
class C{  private List<Object> parseArray(NodeList elements) throws ParseException {  ArrayList<Object> list=new ArrayList<Object>();  for (int i=0; i < elements.getLength(); i++) {    Node o=elements.item(i);    if (o.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    list.add(parseElementRaw(o));  }  return list;}  }
class C{  public int read(){  return (_position < _count) ? readUnsignedByte() : -1;}  }
class C{  @NonNull public static Observable<Integer> sum(@NonNull Observable<Integer> observable){  return Observable.just(0);}  }
class C{  protected PhotosRemoveTagQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DICE_CUSTOM_ME(int num0,int num1){  return new SM_SYSTEM_MESSAGE(1400126,num0,num1);}  }
class C{  public <T,SectionType extends Section<T>>Builder replace(@Nullable Section<T> section,SectionBuilder<T,SectionType> builder){  return replace(section,builder.build());}  }
class C{  public void removeModule(@NotNull Module module){  checkInitialized();  String moduleGradlePath=getModuleGradlePath(module);  if (moduleGradlePath != null) {    removeModule(moduleGradlePath);  }}  }
class C{  private static void handleEOD(EncoderContext context,CharSequence buffer){  try {    int count=buffer.length();    if (count == 0) {      return;    }    if (count == 1) {      context.updateSymbolInfo();      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      int remaining=context.getRemainingCharacters();      if (remaining == 0 && available <= 2) {        return;      }    }    if (count > 4) {      throw new IllegalStateException("Count must not exceed 4");    }    int restChars=count - 1;    String encoded=encodeToCodewords(buffer,0);    boolean endOfSymbolReached=!context.hasMoreCharacters();    boolean restInAscii=endOfSymbolReached && restChars <= 2;    if (restChars <= 2) {      context.updateSymbolInfo(context.getCodewordCount() + restChars);      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      if (available >= 3) {        restInAscii=false;        context.updateSymbolInfo(context.getCodewordCount() + encoded.length());      }    }    if (restInAscii) {      context.resetSymbolInfo();      context.pos-=restChars;    } else {      context.writeCodewords(encoded);    }  }  finally {    context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);  }}  }
class C{  public static Schema createSchema(final String[] resourceLocations) throws XMLException {  if (resourceLocations == null) {    throw new XMLException("Schema file locations not specified");  }  final SchemaFactory schemaFactory=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);  Schema schema=null;  final Source[] schemaSources=new Source[resourceLocations.length];  try {    String resourceLocation;    for (int i=0; i < resourceLocations.length; i++) {      resourceLocation=resourceLocations[i];      if (resourceLocation == null) {        throw new XMLException("Schema file location not specified");      }      final File file=new File(resourceLocation);      if (file.exists()) {        schemaSources[i]=new StreamSource(file);      } else {        final InputStream resourceAsStream=XMLSchemaUtils.class.getResourceAsStream(resourceLocation);        if (resourceAsStream == null) {          throw new XMLException("Cannot load the schema from file or classpath - fix the schema or amend the location: " + resourceLocation);        }        schemaSources[i]=new StreamSource(resourceAsStream);      }    }    schema=schemaFactory.newSchema(schemaSources);    return schema;  } catch (  final SAXException e) {    throw new XMLException("Cannot set the schema - fix the schema or the location",e);  }}  }
class C{  @Override public void readLayout(String folder){}  }
class C{  protected svm_node[] documentToNodeArray(SimpleTextDocument dDoc){  TreeSet tsNodes=new TreeSet();  DocumentNGramGraph dg=dDoc.getDocumentGraph();  for (int iCnt=dg.getMinSize(); iCnt <= dg.getMaxSize(); iCnt++) {    UniqueVertexGraph g=dg.getGraphLevelByNGramSize(iCnt);    Iterator edgeIter=g.getEdgeSet().iterator();    while (edgeIter.hasNext()) {      WeightedEdge we=(WeightedEdge)edgeIter.next();      if (dg.degredationDegree(we) > 3)       continue;      svm_ordered_node snCur=new svm_ordered_node();      String sData=(we.getVertexA().getLabel() + " " + we.getVertexB().getLabel());      if (!EdgeMapping.containsKey(sData))       EdgeMapping.put(sData,EdgeMapping.size() + 1);      snCur.index=((Integer)EdgeMapping.get(sData)).intValue();      snCur.value=we.getWeight();      tsNodes.add(snCur);    }  }  svm_node[] snaTemp=new svm_node[tsNodes.size()];  Iterator iIter=tsNodes.iterator();  int iCnt=0;  while (iIter.hasNext()) {    snaTemp[iCnt++]=(svm_node)iIter.next();  }  return snaTemp;}  }
class C{  public boolean periodTypeIsValid(){  PeriodType periodType=null;  for (  DataSet dataSet : getDataSets()) {    if (periodType != null && !periodType.equals(dataSet.getPeriodType())) {      return false;    }    periodType=dataSet.getPeriodType();  }  return true;}  }
class C{  public static JsonElement createRenderer(IFeatureRenderer renderer){  if (instance != null) {    return instance.internal_createRenderer(renderer);  }  return null;}  }
class C{  private boolean exist(String name){  for (  EnvVar envVar : envVarList) {    if (envVar.getName().compareTo(name) == 0) {      return true;    }  }  return false;}  }
class C{  public Leaves(final Material type,TreeSpecies species,boolean isDecayable){  super(type,species);  setDecayable(isDecayable);}  }
class C{  public CacheException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public static Geometry convertToGeometry(String wktString,String crsCode){  int srid=0;  if (crsCode != null) {    CoordinateReferenceSystem crs=CoordManager.getInstance().getCRS(crsCode);    String sridString=CRS.toSRS(crs,true);    srid=Integer.valueOf(sridString).intValue();  }  com.vividsolutions.jts.geom.GeometryFactory geometryFactory=new com.vividsolutions.jts.geom.GeometryFactory(new PrecisionModel(),srid);  WKTReader parser=new WKTReader(geometryFactory);  if (wktString.startsWith(WKT_PREFIX)) {    wktString=wktString.substring(WKT_PREFIX.length());  }  Geometry shape=null;  try {    shape=parser.read(wktString);  } catch (  com.vividsolutions.jts.io.ParseException e) {    ConsoleManager.getInstance().exception(WKTConversion.class,e);  }  return shape;}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public boolean isApplicationClass(){  return Scene.v().getApplicationClasses().contains(this);}  }
class C{  private TrustAnchor findTrustAnchorBySubjectAndPublicKey(X509Certificate cert){  TrustAnchor trustAnchor=trustedCertificateIndex.findBySubjectAndPublicKey(cert);  if (trustAnchor != null) {    return trustAnchor;  }  if (trustedCertificateStore == null) {    return null;  }  X509Certificate systemCert=trustedCertificateStore.getTrustAnchor(cert);  if (systemCert != null) {    return new TrustAnchor(systemCert,null);  }  return null;}  }
class C{  private boolean visitFieldAccess(int opcode,String owner,String name,String desc,AccessRight accessRight){  boolean useReflection=accessRight != AccessRight.PUBLIC;  if (!useReflection) {    useReflection=isConstructor && (owner.equals(visitedClassName));  }  if (useReflection) {switch (opcode) {case Opcodes.GETFIELD:      if (DEBUG) {        System.out.println("Get field");      }    visitLdcInsn(Type.getType("L" + owner + ";"));  push(name);invokeStatic(RUNTIME_TYPE,Method.getMethod("Object getPrivateField(Object, Class, String)"));ByteCodeUtils.unbox(this,Type.getType(desc));break;case Opcodes.PUTFIELD:if (DEBUG) {System.out.println("Set field");}box(Type.getType(desc));visitLdcInsn(Type.getType("L" + owner + ";"));push(name);invokeStatic(RUNTIME_TYPE,Method.getMethod("void setPrivateField(Object, Object, Class, String)"));break;default :throw new RuntimeException("VisitFieldAccess called with wrong opcode " + opcode);}return true;}return false;}  }
class C{  private String detectScriptUrlPerDHCP(){  Logger.log(getClass(),LogLevel.DEBUG,"Searching per DHCP not supported yet.");  return null;}  }
class C{  public void addProperty(String property,Character value){  add(property,createJsonElement(value));}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  public boolean putGrammar(SchemaGrammar grammar,boolean deep,boolean ignoreConflict){  if (!ignoreConflict) {    return putGrammar(grammar,deep);  }  SchemaGrammar sg=getGrammar(grammar.fTargetNamespace);  if (sg == null) {    putGrammar(grammar);  }  if (!deep) {    return true;  }  Vector currGrammars=grammar.getImportedGrammars();  if (currGrammars == null) {    return true;  }  Vector grammars=((Vector)currGrammars.clone());  SchemaGrammar sg1, sg2;  Vector gs;  for (int i=0; i < grammars.size(); i++) {    sg1=(SchemaGrammar)grammars.elementAt(i);    sg2=getGrammar(sg1.fTargetNamespace);    if (sg2 == null) {      gs=sg1.getImportedGrammars();      if (gs == null)       continue;      for (int j=gs.size() - 1; j >= 0; j--) {        sg2=(SchemaGrammar)gs.elementAt(j);        if (!grammars.contains(sg2))         grammars.addElement(sg2);      }    } else {      grammars.remove(sg1);    }  }  for (int i=grammars.size() - 1; i >= 0; i--) {    putGrammar((SchemaGrammar)grammars.elementAt(i));  }  return true;}  }
class C{  public void populateColourField(FieldIdEnum fieldId,Expression colour){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    fieldConfig.populateExpression(colour);  }}  }
class C{  public boolean isDataBindingEnabled(){  return myDataBindingEnabled;}  }
class C{  public void add(T item){  if (items.add(item)) {    notifyDataSetChanged();  }}  }
class C{  public static GenericValue create(ModelEntity modelEntity){  GenericValue newValue=new GenericValue();  newValue.init(modelEntity);  return newValue;}  }
class C{  public String toString(){  return ("ProxyTrustInvocationHandler[main: " + main + ", boot: "+ boot+ "]");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSpellAttackEffect_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200947,skilltarget,skillcaster,skillname);}  }
class C{  public ComplexFormat(NumberFormat format) throws NullArgumentException {  MathUtils.checkNotNull(format,LocalizedCoreFormats.IMAGINARY_FORMAT);  this.imaginaryCharacter=DEFAULT_IMAGINARY_CHARACTER;  this.imaginaryFormat=format;  this.realFormat=format;}  }
class C{  public void changeItemTextAtPosition(int itemIndex,String newText){  if (itemIndex < 0 || itemIndex > spaceItems.size()) {    throwArrayIndexOutOfBoundsException(itemIndex);  } else {    SpaceItem spaceItem=spaceItems.get(itemIndex);    RelativeLayout textAndIconContainer=(RelativeLayout)spaceItemList.get(itemIndex);    TextView spaceItemIcon=(TextView)textAndIconContainer.findViewById(R.id.space_text);    spaceItemIcon.setText(newText);    spaceItem.setItemName(newText);    changedItemAndIconHashMap.put(itemIndex,spaceItem);  }}  }
class C{  public static TimeStamp create(){  return new TimeStamp();}  }
class C{  public ShowHideOnScroll(View view,int animShow,int animHide){  super(view.getContext());  mView=view;  mShow=animShow;  mHide=animHide;}  }
class C{  @Override public boolean isHighlightFullBarEnabled(){  return mHighlightFullBarEnabled;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding,boolean append) throws IOException {  FileOutputStream out=null;  try {    out=openOutputStream(file,append);    final BufferedOutputStream buffer=new BufferedOutputStream(out);    IOUtils.writeLines(lines,lineEnding,buffer,encoding);    buffer.flush();    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  private void handleRemoveWaitingForInfoSA_EntryBased(Context context,IEntryHolder entry,ITemplateHolder template) throws SAException {  ILockObject entryLock=null;  _engine.getFifoGroupsHandler().handleRemoveWaitingForInfoSAFifoGroups_EntryBased(context,entry,template);  boolean need_unpin=false;  try {    entryLock=getEntryLockObject(entry);synchronized (entryLock) {      try {        if (entry.isOffHeapEntry()) {          need_unpin=true;          entry=((IOffHeapEntryHolder)entry).getLatestEntryVersion(_cacheManager,true,context);        }        if (template != null) {          handleRemoveWaitingForInfoSA_Template(context,entry,template);        } else {          Collection<ITemplateHolder> wf=entry.getCopyOfTemplatesWaitingForEntry();          if (wf == null)           return;          for (          ITemplateHolder th : wf) {            handleRemoveWaitingForInfoSA_Template(context,entry,th);          }        }      }  finally {        if (need_unpin)         _cacheManager.unpinIfNeeded(context,entry,null,null);      }    }  }  finally {    if (entryLock != null)     freeEntryLockObject(entryLock);  }}  }
class C{  Wave(AudioFormat audioFormat,byte[] samples){  this.audioFormat=audioFormat;  this.samples=samples;}  }
class C{  public static EntityManagerFactory createEntityManagerFactory(String persistenceUnitName){  EntityManagerFactory emf=Persistence.createEntityManagerFactory(persistenceUnitName,getDefaultTestProperties());  Utility.setEntityManagerFactory(emf);  return emf;}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public static void handleBOMUTF8(String[] vales,int i){  byte[] buf=vales[i].getBytes();  if (LOG.isDebugEnabled()) {    StringBuilder sb=new StringBuilder();    for (    byte b : buf) {      sb.append(Byte.toString(b));      sb.append(" ");    }    LOG.debug(vales[i]);    LOG.debug(sb.toString());  }  if (buf[0] == (byte)0xEF && buf[1] == (byte)0xBB && buf[2] == (byte)0xBF) {    vales[i]=new String(buf,3,buf.length - 3);  }}  }
class C{  public static void refreshAccessToken(RefreshTokenListener listener){  Auth.refreshAccessToken(getInstance().getContext(),listener);}  }
class C{  public PhotoCoverBehavior(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public static boolean isAtLeastJava15(){  return getMajorJavaVersion() >= JAVA_15;}  }
class C{  public static String extractDefaultMajorVersionFromRestName(String restName){  Preconditions.checkNotNull(restName);  String[] segs=restName.split("\\.");  if (segs.length == 0) {    return "v1";  }  Matcher matcher=MAJOR_VERSION_REGEX_PATTERN.matcher(segs[0]);  return matcher.find() ? matcher.group(1) : "v1";}  }
class C{  public EqCommandTagException(final int code){  super(code);}  }
class C{  public void testRetrieveVirtualFieldWithSort() throws Exception {  deleteAllDocs();  send("addDocument","{fields: {id: 0, boost: 1.0}}");  send("addDocument","{fields: {id: 1, boost: 2.0}}");  send("search","{query: MatchAllDocsQuery, sort: {fields: [{field: logboost}]}, retrieveFields: [id, logboost]}");  assertEquals(2,getInt("totalHits"));  assertEquals(0,getInt("hits[0].fields.id"));  assertEquals(1,getInt("hits[1].fields.id"));  assertEquals(0.0f,getFloat("hits[0].fields.logboost"),.0001f);  assertEquals(.6931f,getFloat("hits[1].fields.logboost"),.0001f);}  }
class C{  public static boolean isSuperInterface(Class child,String sup){  if (child == null)   return false;  if (child.getCanonicalName().equals(sup))   return true;  Class[] interfaces=child.getInterfaces();  for (  Class in : interfaces) {    if (in.getCanonicalName().equals(sup)) {      return true;    }  }  return false;}  }
class C{  private void pickWeakConstraints(ScoutWidget[] list){  Direction[] directions={Direction.NORTH,Direction.SOUTH,Direction.WEST,Direction.EAST};  ScoutWidget[][] candidates=new ScoutWidget[directions.length][];  ScoutWidget[] maxCandidate=new ScoutWidget[directions.length];  ScoutWidget centeredVertical=null;  ScoutWidget centeredHorizontal=null;  float[] maxDist={-1,-1,-1,-1};  for (int i=1; i < list.length; i++) {    ScoutWidget widget=list[i];    if (widget.isCentered(Direction.ORIENTATION_VERTICAL)) {      if (centeredVertical == null || centeredVertical.getHeight() > widget.getHeight()) {        centeredVertical=widget;      }    }    if (widget.isCentered(Direction.ORIENTATION_HORIZONTAL)) {      if (centeredHorizontal == null || centeredHorizontal.getWidth() > widget.getWidth()) {        centeredHorizontal=widget;      }    }  }  ScoutWidget[] centeredMax={centeredVertical,centeredVertical,centeredHorizontal,centeredHorizontal};  for (int j=0; j < directions.length; j++) {    Direction direction=directions[j];    ArrayList<ScoutWidget> tmp=new ArrayList<ScoutWidget>();    for (int i=1; i < list.length; i++) {      ScoutWidget widget=list[i];      if (widget.isGuideline()) {        continue;      }      if (!widget.isConnected(directions[j].getOpposite())) {        float dist=widget.connectedDistanceToRoot(list,direction);        if (!Float.isNaN(dist)) {          if (dist > maxDist[j]) {            maxDist[j]=dist;            maxCandidate[j]=widget;          }          tmp.add(widget);        }      }    }    candidates[j]=tmp.toArray(new ScoutWidget[tmp.size()]);    if (DEBUG) {      String s="[" + direction + "]";      s+="max=" + maxCandidate[j] + " ";      for (int i=0; i < candidates[j].length; i++) {        ScoutWidget c=candidates[j][i];        s+=" " + c + " "+ c.connectedDistanceToRoot(list,direction);      }      System.out.println(s);    }  }  for (int j=0; j < directions.length; j++) {    if ((candidates[j].length > 0) && (candidates[j ^ 1].length == 0)) {      int dirInt=directions[j].getOpposite().getDirection();      int rootDirInt=directions[j].getOpposite().getDirection();      ScoutWidget connect=list[0];      int connectSide=rootDirInt;      if (SUPPORT_WEAK_TO_CENTER) {        if (centeredMax[j] != null) {          float centerPos=centeredMax[j].getLocation(directions[j]);          float maxPos=maxCandidate[j].getLocation(directions[j].getOpposite());          float delta=centerPos - maxPos;          if (directions[j] == Direction.EAST || directions[j] == Direction.SOUTH) {            delta=-delta;          }          if (delta > 0) {            connectSide=directions[j].getDirection();            connect=centeredMax[j];          }        }      }      maxCandidate[j].setWeakConstraint(dirInt,connect,connectSide);      candidates[j]=new ScoutWidget[0];    }  }  for (int j=0; j < directions.length; j+=2) {    if ((candidates[j].length > 0) && (candidates[j + 1].length > 0)) {      Direction side=directions[j].getOpposite();      Direction otherSide=directions[j];      if (maxCandidate[j].getLocation(side) < maxCandidate[j + 1].getLocation(otherSide)) {        maxCandidate[j].setWeakConstraint(side.getDirection(),maxCandidate[j + 1],otherSide.getDirection());        candidates[j]=new ScoutWidget[0];        maxCandidate[j]=null;      }    }  }  for (int j=0; j < directions.length; j+=2) {    if ((candidates[j].length > 0) && (candidates[j + 1].length > 0)) {      Direction side=directions[j].getOpposite();      Direction otherSide=directions[j];      boolean clearToRoot1=maxCandidate[j].getNeighbor(otherSide,list).isRoot();      boolean clearToRoot2=maxCandidate[j].getNeighbor(side,list).isRoot();      if (clearToRoot1 && clearToRoot2) {        if (maxDist[j] > maxDist[j + 1]) {          maxCandidate[j].setWeakConstraint(side.getDirection(),list[0],side.getDirection());        } else {          maxCandidate[j + 1].setWeakConstraint(otherSide.getDirection(),list[0],otherSide.getDirection());        }      }    }  }}  }
class C{  public static int convertPxToSp(int pxSize){  return Math.round((float)pxSize * getDisplayDensity4Fonts());}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  protected void registerForSymbolUpdates(List<FieldConfigBase> fieldList,UpdateSymbolInterface obj){  for (  FieldConfigBase fieldConfig : fieldList) {    if (fieldConfig != null) {      fieldConfig.addDataChangedListener(obj);    }  }}  }
class C{  public GroupsEditLinkQuery text(String value){  return unsafeParam("text",value);}  }
class C{  public static Transformer createOutputTransformer(String encoding,boolean omitXmlDeclaration,boolean indent,int indentAmount) throws TransformerConfigurationException {  StringBuilder sb=new StringBuilder();  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");  sb.append("<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xalan=\"http://xml.apache.org/xslt\" version=\"1.0\">\n");  sb.append("<xsl:output method=\"xml\" encoding=\"");  sb.append(encoding == null ? "UTF-8" : encoding);  sb.append("\"");  if (omitXmlDeclaration) {    sb.append(" omit-xml-declaration=\"yes\"");  }  sb.append(" indent=\"");  sb.append(indent ? "yes" : "no");  sb.append("\"");  if (indent) {    sb.append(" xalan:indent-amount=\"");    sb.append(indentAmount <= 0 ? 4 : indentAmount);    sb.append("\"");  }  sb.append("/>\n<xsl:strip-space elements=\"*\"/>\n");  sb.append("<xsl:template match=\"@*|node()\">\n");  sb.append("<xsl:copy><xsl:apply-templates select=\"@*|node()\"/></xsl:copy>\n");  sb.append("</xsl:template>\n</xsl:stylesheet>\n");  ByteArrayInputStream bis=new ByteArrayInputStream(sb.toString().getBytes());  TransformerFactory transformerFactory=TransformerFactory.newInstance();  return transformerFactory.newTransformer(new StreamSource(bis));}  }
class C{  public final static String base64Encode(String str){  if (str == null) {    return null;  }  return new String(base64Encode(str.getBytes()));}  }
class C{  @SuppressWarnings("unchecked") public static Object evaluate(Map<String,? extends Object> context,String expression,Class expectedType){  ELContext elContext=new ReadOnlyContext(context);  ValueExpression ve=exprFactory.createValueExpression(elContext,expression,expectedType);  return ve.getValue(elContext);}  }
class C{  public S2LatLngRect intersection(S2LatLngRect other){  R1Interval intersectLat=lat.intersection(other.lat);  S1Interval intersectLng=lng.intersection(other.lng);  if (intersectLat.isEmpty() || intersectLng.isEmpty()) {    return empty();  }  return new S2LatLngRect(intersectLat,intersectLng);}  }
class C{  public NewsfeedSearchQuery search(UserActor actor){  return new NewsfeedSearchQuery(getClient(),actor);}  }
class C{  public static String identityToString(Object obj){  if (obj == null) {    return EMPTY_STRING;  }  return obj.getClass().getName() + "@" + getIdentityHexString(obj);}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public boolean isBintersects(BitSet H){  return B.intersects(H);}  }
class C{  public Builder fill(Boolean fill){  this.fill=fill;  return this;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  OpenCamera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open(requestedCameraId);    if (theCamera == null) {      throw new IOException("Camera.open() failed to return object from driver");    }    camera=theCamera;  }  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera cameraObject=theCamera.getCamera();  Camera.Parameters parameters=cameraObject.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    if (parametersFlattened != null) {      parameters=cameraObject.getParameters();      parameters.unflatten(parametersFlattened);      try {        cameraObject.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {      }    }  }  cameraObject.setPreviewDisplay(holder);}  }
class C{  public static boolean isValidSetId(DispatchContext ctx,Map<String,?> context){  GenericValue userLogin=(GenericValue)context.get("userLogin");  if (userLogin == null) {    return false;  }  String currentUserLoginId=userLogin.getString("userLoginId");  String userLoginIdArg=(String)context.get(LOGINID_PARAMETER_NAME);  if (!currentUserLoginId.equals(userLoginIdArg) && userLoginIdArg != null) {    Security security=ctx.getSecurity();    return security.hasPermission(ADMIN_PERMISSION,userLogin);  }  return true;}  }
class C{  public boolean hasActiveBody(){  return activeBody != null;}  }
class C{  public VideoCreateCommentQuery(VkApiClient client,UserActor actor,int videoId){  super(client,"video.createComment",Integer.class);  accessToken(actor.getAccessToken());  videoId(videoId);}  }
class C{  public static Method findMethodWith(Class<?> searchClass,Class<? extends Annotation> annotationClass){  Method foundMethod=null;  methodFinder:   while (searchClass != null && searchClass != Object.class) {    for (    Method method : searchClass.getDeclaredMethods()) {      if (method.isAnnotationPresent(annotationClass)) {        foundMethod=method;        break methodFinder;      }    }    searchClass=searchClass.getSuperclass();  }  return foundMethod;}  }
class C{  void clearCache(){synchronized (mCache) {    mCache.clear();  }}  }
class C{  private double[] calculateAbsoluteDifferences(final double[] z) throws MathIllegalArgumentException, NullArgumentException {  if (z == null) {    throw new NullArgumentException();  }  if (z.length == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NO_DATA);  }  final double[] zAbs=new double[z.length];  for (int i=0; i < z.length; ++i) {    zAbs[i]=FastMath.abs(z[i]);  }  return zAbs;}  }
class C{  private void shiftEnd(){  curPosition=(curPosition + 1) % diffs.length;}  }
class C{  public static File createUniqueFile(File targetFolder,String originalFile,boolean keepOriginal){  String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(originalFile);  return createUniqueFile(targetFolder,originalFile,mimeType,keepOriginal);}  }
class C{  public String toString(){  return "ClientMaxPrincipalType" + Constraint.toString(classes);}  }
class C{  public void screenshot(){  currentTest.get().screenshot();}  }
class C{  public static void createAllTables(Database db,boolean ifNotExists){  ChatMessageBeanDao.createTable(db,ifNotExists);}  }
class C{  private static String extractPropertyName(String methodName,String prefix){  final int prefixLength=prefix.length();  if (methodName.length() > prefixLength + 1 && Character.isUpperCase(methodName.charAt(prefixLength + 1)) && Character.isUpperCase(methodName.charAt(prefixLength)))   return methodName.substring(prefixLength);  return Character.toLowerCase(methodName.charAt(prefixLength)) + methodName.substring(prefixLength + 1);}  }
class C{  public boolean removeRow(int row){  if (m_rows.isValidRow(row)) {    fireTableEvent(row,row,TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE);    m_tuples.invalidate(row);    m_rows.releaseRow(row);    for (Iterator cols=getColumns(); cols.hasNext(); ) {      Column c=(Column)cols.next();      c.revertToDefault(row);    }    return true;  }  return false;}  }
class C{  public OutputStream openOutputStream(Uri uri,boolean append) throws IOException {  assertBackgroundThread();switch (getUriType(uri)) {case URI_TYPE_FILE:{      File localFile=new File(uri.getPath());      File parent=localFile.getParentFile();      if (parent != null) {        parent.mkdirs();      }      return new FileOutputStream(localFile,append);    }case URI_TYPE_CONTENT:case URI_TYPE_RESOURCE:{    AssetFileDescriptor assetFd=contentResolver.openAssetFileDescriptor(uri,append ? "wa" : "w");    return assetFd.createOutputStream();  }}throw new FileNotFoundException("URI not supported by CordovaResourceApi: " + uri);}  }
class C{  public Blast2Alignment(Document doc){  this.doc=doc;}  }
class C{  public void addDataPoint(double value,int series){  this.series.get(series).addDataPoint(value);}  }
class C{  public static WorkspaceRoot fromImportSettings(BlazeImportSettings blazeSettings){  return new WorkspaceRoot(new File(blazeSettings.getWorkspaceRoot()));}  }
class C{  public void removeEntrySA(Context context,IEntryHolder entry,IServerTypeDesc typeDesc,boolean fromReplication,boolean origin,EntryRemoveReasonCodes removeReason,boolean disableReplication,boolean disableProcessorCall,boolean disableSADelete) throws SAException {  removeEntrySA(context,entry,fromReplication,origin,typeDesc.getTypeDesc().isReplicable(),removeReason,disableReplication,disableProcessorCall,disableSADelete);}  }
class C{  @Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augs) throws XNIException {  if (fInternalSubset != null && !fInDTDExternalSubset) {    fInternalSubset.append("<!ATTLIST ");    fInternalSubset.append(elementName);    fInternalSubset.append(' ');    fInternalSubset.append(attributeName);    fInternalSubset.append(' ');    if (type.equals("ENUMERATION")) {      fInternalSubset.append('(');      for (int i=0; i < enumeration.length; i++) {        if (i > 0) {          fInternalSubset.append('|');        }        fInternalSubset.append(enumeration[i]);      }      fInternalSubset.append(')');    } else {      fInternalSubset.append(type);    }    if (defaultType != null) {      fInternalSubset.append(' ');      fInternalSubset.append(defaultType);    }    if (defaultValue != null) {      fInternalSubset.append(" '");      for (int i=0; i < defaultValue.length; i++) {        char c=defaultValue.ch[defaultValue.offset + i];        if (c == '\'') {          fInternalSubset.append("&apos;");        } else {          fInternalSubset.append(c);        }      }      fInternalSubset.append('\'');    }    fInternalSubset.append(">\n");  }  if (fDeferredDocumentImpl != null) {    if (defaultValue != null) {      int elementDefIndex=fDeferredDocumentImpl.lookupElementDefinition(elementName);      if (elementDefIndex == -1) {        elementDefIndex=fDeferredDocumentImpl.createDeferredElementDefinition(elementName);        fDeferredDocumentImpl.appendChild(fDocumentTypeIndex,elementDefIndex);      }      boolean nsEnabled=fNamespaceAware;      String namespaceURI=null;      if (nsEnabled) {        if (attributeName.startsWith("xmlns:") || attributeName.equals("xmlns")) {          namespaceURI=NamespaceContext.XMLNS_URI;        } else         if (attributeName.startsWith("xml:")) {          namespaceURI=NamespaceContext.XML_URI;        }      }      int attrIndex=fDeferredDocumentImpl.createDeferredAttribute(attributeName,namespaceURI,defaultValue.toString(),false);      if ("ID".equals(type)) {        fDeferredDocumentImpl.setIdAttribute(attrIndex);      }      fDeferredDocumentImpl.appendChild(elementDefIndex,attrIndex);    }  } else   if (fDocumentImpl != null) {    if (defaultValue != null) {      NamedNodeMap elements=((DocumentTypeImpl)fDocumentType).getElements();      ElementDefinitionImpl elementDef=(ElementDefinitionImpl)elements.getNamedItem(elementName);      if (elementDef == null) {        elementDef=fDocumentImpl.createElementDefinition(elementName);        ((DocumentTypeImpl)fDocumentType).getElements().setNamedItem(elementDef);      }      boolean nsEnabled=fNamespaceAware;      AttrImpl attr;      if (nsEnabled) {        String namespaceURI=null;        if (attributeName.startsWith("xmlns:") || attributeName.equals("xmlns")) {          namespaceURI=NamespaceContext.XMLNS_URI;        } else         if (attributeName.startsWith("xml:")) {          namespaceURI=NamespaceContext.XML_URI;        }        attr=(AttrImpl)fDocumentImpl.createAttributeNS(namespaceURI,attributeName);      } else {        attr=(AttrImpl)fDocumentImpl.createAttribute(attributeName);      }      attr.setValue(defaultValue.toString());      attr.setSpecified(false);      attr.setIdAttribute("ID".equals(type));      if (nsEnabled) {        elementDef.getAttributes().setNamedItemNS(attr);      } else {        elementDef.getAttributes().setNamedItem(attr);      }    }  }}  }
class C{  @Override public List<Class<? extends ConfigAspect>> mergeDependencies(){  return ImmutableList.of();}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mScrollerX.startScroll(startX,dx,duration);  mScrollerY.startScroll(startY,dy,duration);}  }
class C{  @Override public int intValue(){  return (int)doubleValue();}  }
class C{  public String toString(){  return this.mode == 'd' ? this.writer.toString() : null;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static List<JSON> fromObjects(Object jsons){  List list=null;  if (jsons instanceof List) {    list=(List)jsons;  } else   if (jsons instanceof String) {    Gson g=new Gson();    list=g.fromJson((String)jsons,List.class);  } else   if (jsons instanceof Reader) {    Gson g=new Gson();    list=g.fromJson((Reader)jsons,List.class);  } else   if (jsons instanceof byte[]) {    Gson g=new Gson();    byte[] b1=(byte[])jsons;    list=g.fromJson(new String(b1),List.class);  }  if (list != null) {    for (int i=0; i < list.size(); i++) {      Object o=list.get(i);      if (o instanceof List) {        list.set(i,fromObjects(o));      } else {        list.set(i,fromObject(o));      }    }  }  return list;}  }
class C{  public void shift(float from,float to,int microseconds){  if (from < minimum) {    throw new IllegalArgumentException("Requested value " + from + " smaller than allowable minimum value "+ minimum+ ".");  }  if (from > maximum) {    throw new IllegalArgumentException("Requested value " + from + " exceeds allowable maximum value "+ maximum+ ".");  }  setValue(to);}  }
class C{  static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {  int capacity=numDataBytes * 8;  if (bits.getSize() > capacity) {    throw new WriterException("data bits cannot fit in the QR Code" + bits.getSize() + " > "+ capacity);  }  for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {    bits.appendBit(false);  }  int numBitsInLastByte=bits.getSize() & 0x07;  if (numBitsInLastByte > 0) {    for (int i=numBitsInLastByte; i < 8; i++) {      bits.appendBit(false);    }  }  int numPaddingBytes=numDataBytes - bits.getSizeInBytes();  for (int i=0; i < numPaddingBytes; ++i) {    bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);  }  if (bits.getSize() != capacity) {    throw new WriterException("Bits size does not equal capacity");  }}  }
class C{  public long incrementAndGet(){  return addAndGet(1L);}  }
class C{  public final static double min(double Num1,double Num2){  return -max(-Num1,-Num2);}  }
class C{  @Override @ScheduleResult public int schedule(@NonNull Job job){  mContext.sendBroadcast(createScheduleRequest(job));  return FirebaseJobDispatcher.SCHEDULE_RESULT_SUCCESS;}  }
class C{  private TemplateDruidQuery buildInnerQuery(MetricField sourceMetric,TemplateDruidQuery innerDependentQuery){  Set<Aggregation> newInnerAggregations=convertSketchesToSketchMerges(innerDependentQuery.getAggregations());  Set<PostAggregation> newInnerPostAggregations=new LinkedHashSet<>();  if (sourceMetric instanceof PostAggregation) {    newInnerPostAggregations.add((PostAggregation)sourceMetric);  }  TemplateDruidQuery innerQuery=innerDependentQuery;  innerQuery=innerQuery.withAggregations(newInnerAggregations);  innerQuery=innerQuery.withPostAggregations(newInnerPostAggregations);  innerQuery=innerQuery.merge(buildTimeGrainCounterQuery());  return innerQuery;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  int readCorner1(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public boolean removeName(String name){  return m_names.remove(name);}  }
class C{  public void extractSamplesTo(Collection<String> samples,DataTable target){  Set<String> toDelete=new HashSet<>();  toDelete.addAll(sampleNames);  toDelete.removeAll(samples);  target.copy(this);  target.removeSamples(toDelete);}  }
class C{  private void fireSubEquipmentSupervisionUpdate(final SupervisionEvent supervisionEvent){  Set<SupervisionListener> listeners=subEquipmentSupervisionListeners.get(supervisionEvent.getEntityId());  if (listeners != null) {    for (    SupervisionListener listener : listeners) {      listener.onSupervisionUpdate(supervisionEvent);    }  }}  }
class C{  public Status(@NotNull Message message){  this.message=message;}  }
class C{  private boolean log(final T object){  boolean dbConnectionUp=true;  if (object == null) {    LOG.warn("log([IFallback]) : not logging null object.");    return dbConnectionUp;  }  try {    dbHandler.storeData(object);    alarmSender.dbUnavailable(DOWN,null,dbHandler.getDBInfo());  } catch (  IDBPersistenceException e) {    dbConnectionUp=false;synchronized (fallbackManager.getFallbackFileController()) {      List<T> temp=new ArrayList<>();      temp.add(object);      if (!writeToFallback(temp)) {        FALLBACK_LOG.debug(temp.get(0).toString());      }    }    LOG.error("Fallback object with id " + object.getId() + " could not be committed into the database: "+ e.getMessage());    alarmSender.dbUnavailable(ACTIVATED,e.getMessage(),dbHandler.getDBInfo());  }  return dbConnectionUp;}  }
class C{  public GenericValue currentGenericValue() throws GenericEntityException {  if (closed)   throw new GenericResultSetClosedException("This EntityListIterator has been closed, this operation cannot be performed");  GenericValue value=GenericValue.create(modelEntity);  value.setDelegator(this.delegator);  for (int j=0; j < selectFields.size(); j++) {    ModelField curField=selectFields.get(j);    SqlJdbcUtil.getValue(resultSet,j + 1,curField,value,modelFieldTypeReader);  }  value.synchronizedWithDatasource();  this.haveMadeValue=true;  return value;}  }
class C{  private void requestAudioPermissions(){  if (ActivityCompat.shouldShowRequestPermissionRationale(getActivity(),AUDIO_PERMS)) {    showPermissionRationale();  } else {    ActivityCompat.requestPermissions(this.getActivity(),new String[]{AUDIO_PERMS},REQUEST_AUDIO_PERMS);  }}  }
class C{  public int numHits(String query) throws ParseException, IOException {  Integer count;  if ((count=(Integer)m_hitCountCache.get(query)) == null) {    Hits hits=search(query);    count=new Integer(hits.length());    m_hitCountCache.put(query,count);  }  return count.intValue();}  }
class C{  public static String parseSvgToXml(File inputSVG,OutputStream outStream,int width,int height){  String errorLog=null;  try {    SvgTree svgTree=parse(inputSVG);    errorLog=svgTree.getErrorLog();    if (svgTree.canConvertToVectorDrawable()) {      writeFile(outStream,svgTree,width,height);    }  } catch (  Exception e) {    errorLog="EXCEPTION in parsing " + inputSVG.getName() + ":\n"+ e.getMessage();  }  return errorLog;}  }
class C{  public static void commit(boolean beganTransaction) throws GenericTransactionException {  if (beganTransaction) {    TransactionUtil.commit();  }}  }
class C{  public void java_lang_Class_getDeclaringClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public void invalidateAll(){  invalidate(ALL_ITEMS);}  }
class C{  protected AdsGetTargetingStatsQuery linkUrl(String value){  return unsafeParam("link_url",value);}  }
class C{  public static Bitmap blurNatively(Bitmap original,int radius,boolean canReuseInBitmap){  if (radius < 1) {    return null;  }  Bitmap bitmap=buildBitmap(original,canReuseInBitmap);  if (radius == 1) {    return bitmap;  }  blurBitmap(bitmap,radius);  return (bitmap);}  }
class C{  @Override public List<GenericValue> findAll(String entityName,boolean useCache) throws GenericEntityException {  return this.findList(entityName,null,null,null,null,useCache);}  }
class C{  public void reset() throws JMSException {  setBodyReadOnly(true);  if (this.dataOut != null) {    try {      this.dataOut.flush();      byte[] data=this.bytesOut.toByteArray();      Body=new ByteArray(data);      dataOut.close();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed: " + ioe.toString());      jmsEx.setLinkedException(ioe);      throw jmsEx;    }  }  this.bytesOut=null;  this.dataIn=null;  this.dataOut=null;}  }
class C{  private void debug(String s){  if (DEBUG) {    System.out.println("Clunit debug: " + s);  }}  }
class C{  @BeforeClass @Parameters({"configFile"}) protected void beforeClassTestWrapper(@Optional(Constants.DEFAULT_CONFIG_FILE) String configFile) throws IOException {  LOGGER.debug(this.getClass().getName() + "@BeforeClass");  loadProperties(configFile);  createAPIServerConnector();}  }
class C{  public VideoCreateCommentQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  private static void formatTimeZone(Calendar cal,StringBuilder buf){  TimeZone tz=cal.getTimeZone();  if (tz == null)   return;  int offset;  if (tz.inDaylightTime(cal.getTime())) {    offset=tz.getRawOffset() + (tz.useDaylightTime() ? 3600000 : 0);  } else {    offset=tz.getRawOffset();  }  if (offset == 0) {    buf.append('Z');    return;  }  if (offset >= 0)   buf.append('+'); else {    buf.append('-');    offset*=-1;  }  offset/=60 * 1000;  formatTwoDigits(offset / 60,buf);  buf.append(':');  formatTwoDigits(offset % 60,buf);}  }
class C{  public synchronized void increaseCurrentCounter(){  counters[currentCounter]=counters[currentCounter] + 1;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_NO_AVAILABLE_SLOT_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201091,skillcaster,skillname);}  }
class C{  public static void kickAccount(int accountId){synchronized (AccountController.class) {    for (    GameServerInfo gsi : GameServerTable.getGameServers()) {      if (gsi.isAccountOnGameServer(accountId)) {        gsi.getConnection().sendPacket(new SM_REQUEST_KICK_ACCOUNT(accountId));        break;      }    }    if (accountsOnLS.containsKey(accountId)) {      LoginConnection conn=accountsOnLS.remove(accountId);      conn.closeNow();    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_REJECT_INVITATION(String value0){  return new SM_SYSTEM_MESSAGE(1300190,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200836,skillcaster,skillname);}  }
class C{  public void fromAngleAxis(float angle,Vector3f axis){  Vector3f normAxis=axis.normalize();  fromAngleNormalAxis(angle,normAxis);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set showAminoAcids=false;");}  }
class C{  public PolygonsSet(final double tolerance){  super(tolerance);}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (other == null) {    return false;  }  try {    @SuppressWarnings("unchecked") FieldVector<T> rhs=(FieldVector<T>)other;    if (data.length != rhs.getDimension()) {      return false;    }    for (int i=0; i < data.length; ++i) {      if (!data[i].equals(rhs.getEntry(i))) {        return false;      }    }    return true;  } catch (  ClassCastException ex) {    return false;  }}  }
class C{  public Entry(final float x,final float y){  this.x=x;  this.y=y;}  }
class C{  private ConfigUtil(){  throw new AssertionError("com.sun.jini.config.ConfigUtil cannot be instantiated");}  }
class C{  public boolean isSaved(){  return baseObjId > 0;}  }
class C{  private Map<Unit,Collection<ExceptionDest>> addDestToMap(Map<Unit,Collection<ExceptionDest>> map,Unit u,Trap t,ThrowableSet caught){  Collection<ExceptionDest> dests=(map == null ? null : map.get(u));  if (dests == null) {    if (t == null) {      return map;    } else {      if (map == null) {        map=new LinkedHashMap<Unit,Collection<ExceptionDest>>(unitChain.size() * 2 + 1);      }      dests=new ArrayList<ExceptionDest>(3);      map.put(u,dests);    }  }  dests.add(new ExceptionDest(t,caught));  return map;}  }
class C{  public static void main(String[] args){  com.zlp.std.StdOut.print("Type a string: ");  String s=StdIn.readString();  com.zlp.std.StdOut.println("Your string was: " + s);  com.zlp.std.StdOut.println();  com.zlp.std.StdOut.print("Type an int: ");  int a=StdIn.readInt();  com.zlp.std.StdOut.println("Your int was: " + a);  com.zlp.std.StdOut.println();  com.zlp.std.StdOut.print("Type a boolean: ");  boolean b=StdIn.readBoolean();  com.zlp.std.StdOut.println("Your boolean was: " + b);  com.zlp.std.StdOut.println();  com.zlp.std.StdOut.print("Type a double: ");  double c=StdIn.readDouble();  com.zlp.std.StdOut.println("Your double was: " + c);  StdOut.println();}  }
class C{  public LogSubjects.LogSubject assertThat(){  return assertAbout(LogSubjects.CONSOLE_SUBJECT_FACTORY).that(this);}  }
class C{  public static Map<String,Object> reloadVisualThemeResources(DispatchContext dctx,Map<String,?> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  String singleVisualThemeId=(String)context.get("visualThemeId");  try {{      final String filename="component://common/data/CommonVisualThemeTypeData.xml";      List<String> messages=new ArrayList<String>();      Map<String,Object> servCtx=dctx.makeValidContext("entityImport",ModelService.IN_PARAM,context);      servCtx.put("filename",filename);      servCtx.put("isUrl","Y");      servCtx.put("messages",messages);      Map<String,Object> servResult=dispatcher.runSync("entityImport",servCtx);      if (ServiceUtil.isError(servResult)) {        return ServiceUtil.returnError("Could not import common visual theme type data from " + filename + ": "+ ServiceUtil.getErrorMessage(servResult));      }    }    delegator.clearCacheLine("EnumerationType");    delegator.clearCacheLine("Enumeration");    delegator.clearCacheLine("VisualThemeSet");    List<String> visualThemeIds=new ArrayList<String>();    if (singleVisualThemeId != null) {      GenericValue visualTheme=delegator.findOne("VisualTheme",false,UtilMisc.toMap("visualThemeId",singleVisualThemeId));      if (visualTheme != null) {        visualThemeIds.add(singleVisualThemeId);      } else {        return ServiceUtil.returnError("Could not find visual theme " + singleVisualThemeId);      }    } else {      List<GenericValue> visualThemes=delegator.findAll("VisualTheme",false);      if (visualThemes != null) {        for (        GenericValue visualTheme : visualThemes) {          visualThemeIds.add(visualTheme.getString("visualThemeId"));        }      }    }    if (!visualThemeIds.isEmpty()) {      int numReloaded=0;      for (      String visualThemeId : visualThemeIds) {        List<GenericValue> themeFileValues=delegator.findByAnd("VisualThemeResource",UtilMisc.toMap("visualThemeId",visualThemeId,"resourceTypeEnumId","VT_THEME_DATA_RES"),UtilMisc.toList("sequenceId"),false);        List<String> themeFileLocations=new ArrayList<String>();        if (themeFileValues != null) {          for (          GenericValue themeFileValue : themeFileValues) {            String themeFileLocation=themeFileValue.getString("resourceValue");            if (UtilValidate.isNotEmpty(themeFileLocation)) {              themeFileLocations.add(themeFileLocation);            }          }        }        if (UtilValidate.isNotEmpty(themeFileLocations)) {          delegator.removeByAnd("VisualThemeResource",UtilMisc.toMap("visualThemeId",visualThemeId));          for (          String themeFileLocation : themeFileLocations) {            List<String> messages=new ArrayList<String>();            Map<String,Object> servCtx=dctx.makeValidContext("entityImport",ModelService.IN_PARAM,context);            servCtx.put("filename",themeFileLocation);            servCtx.put("isUrl","Y");            servCtx.put("messages",messages);            Map<String,Object> servResult=dispatcher.runSync("entityImport",servCtx);            if (ServiceUtil.isError(servResult)) {              return ServiceUtil.returnError("Could not load visual theme " + visualThemeId + " resource data "+ themeFileLocations+ ": "+ ServiceUtil.getErrorMessage(servResult));            }          }          numReloaded++;        } else {          Debug.logWarning("Visual theme " + visualThemeId + " has no data files to reload from (VT_THEME_DATA_RES resource); skipping; "+ "consider updating the theme to specify VT_THEME_DATA_RES resources and "+ "performing an initial re-seed",visualThemeId);        }      }      delegator.clearCacheLine("VisualThemeSet");      delegator.clearCacheLine("VisualThemeResource");      delegator.clearCacheLine("VisualTheme");      final String msg="Reloaded " + numReloaded + "/"+ visualThemeIds.size()+ " visual theme(s)";      if (numReloaded >= visualThemeIds.size()) {        return ServiceUtil.returnSuccess(msg);      } else {        return ServiceUtil.returnFailure(msg);      }    } else {      return ServiceUtil.returnSuccess("No visual themes to reload");    }  } catch (  Exception e) {    final String errorMsg="Exception trying to reload visual theme(s)";    Debug.logError(e,errorMsg,module);    return ServiceUtil.returnError(errorMsg + ": " + e.getMessage());  }}  }
class C{  public void inc(Counter<KeyType> another){  for (  Entry<KeyType,Long> e : another.hash.entrySet()) {    inc(e.getKey(),e.getValue());  }}  }
class C{  public Matrix transpose(){  Matrix X=new Matrix(n,m);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[j][i]=A[i][j];    }  }  return X;}  }
class C{  private boolean isArrayType(HashSet<String> resolvedTypesSet){  return resolvedTypesSet.size() == 1 && resolvedTypesSet.contains(Types.strArray);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200524,skillcaster,skilltarget,skillname);}  }
class C{  private void encryptBlock(byte[] in,int off){  for (int i=0; i < BLOCK_LENGTH; i++) {    byte b=in[off + i];    work[BLOCK_LENGTH + i]=b;    work[BLOCK_LENGTH * 2 + i]=(byte)(work[i] ^ b);  }  byte t=0;  for (int i=0; i < 18; i++) {    for (int j=0; j < 3 * BLOCK_LENGTH; j++) {      t=(byte)(work[j] ^ PI[t & 0xFF]);      work[j]=t;    }    t=(byte)(t + i);  }}  }
class C{  public FSTreeCellRenderer(){}  }
class C{  public static void assertEquals(String msg,double expected,double actual,double delta){  if (Double.isNaN(expected)) {    Assert.assertTrue("" + actual + " is not NaN.",Double.isNaN(actual));  } else {    Assert.assertEquals(msg,expected,actual,delta);  }}  }
class C{  private void initLabel(){  JLabel label=new JLabel(myStep.getLabel());  Font font=label.getFont();  Font boldFont=new Font(font.getFontName(),Font.BOLD,font.getSize());  label.setFont(boldFont);  GridBagConstraints c=new GridBagConstraints();  c.gridx=1;  c.gridy=0;  c.weightx=1;  c.fill=GridBagConstraints.HORIZONTAL;  c.anchor=GridBagConstraints.NORTHWEST;  c.insets=new Insets(7,0,10,5);  add(label,c);}  }
class C{  public long value(){  return _map._values[_index];}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static SpaceIndex createPropertyIndex(String propertyName,SpaceIndexType indexType,boolean unique){  return createPathIndex_Impl(propertyName,indexType,unique);}  }
class C{  @Override public boolean canSwipeBack(int dir){  return SwipeBackLayout.canSwipeBack(recyclerView,dir);}  }
class C{  public VideoReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){  super(client,"video.reportComment",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  commentId(commentId);}  }
class C{  public void appendWhitespace(Appendable writer) throws IOException {  writer.append(whiteSpace);}  }
class C{  public static void main(String[] args){  Hashtable hSwitches=utils.parseCommandLineSwitches(args);  if (utils.getSwitch(hSwitches,"?","").length() > 0) {    System.exit(0);  }  int NMin, Levels;  double DistFactor;  String SummaryFile, ModelDir;  boolean Silent, Merge, bAvoidSelfComparison;  try {    NMin=Integer.valueOf(utils.getSwitch(hSwitches,"nMin","4"));    Levels=Integer.valueOf(utils.getSwitch(hSwitches,"levels","5"));    DistFactor=Double.valueOf(utils.getSwitch(hSwitches,"distFactor","2"));    SummaryFile=utils.getSwitch(hSwitches,"summary","summary.txt");    ModelDir=utils.getSwitch(hSwitches,"modelDir","models" + System.getProperty("file.separator"));    Silent=utils.getSwitch(hSwitches,"s","FALSE").equals("TRUE");    bAvoidSelfComparison=utils.getSwitch(hSwitches,"avoidSelfComparison","FALSE").equals("TRUE");    if (!Silent)     System.err.println("Using parameters:\n" + hSwitches);  } catch (  ClassCastException cce) {    System.err.println("Malformed switch:" + cce.getMessage() + ". Aborting...");    return;  }  summarySingleFileHierEvaluator ssfeEval=new summarySingleFileHierEvaluator(NMin,DistFactor,Levels,bAvoidSelfComparison);  DocumentSet dsModels=new DocumentSet(ModelDir,1.0);  dsModels.createSets(true);  double dRes=Double.NaN;  Set<String> ssModels=dsModels.toFilenameSet(DocumentSet.FROM_WHOLE_SET);  dRes=ssfeEval.doCompare(SummaryFile,ssModels);  System.out.println(String.format("%12.10f",dRes));}  }
class C{  public void cancelCalls(@NonNull Context context){  QueueManager.getInstance(context).getRequestQueue().cancelAll(context);}  }
class C{  public SimilarityBasedIndex(Set<NamedDocumentNGramGraph> sNamedObjects,SimilarityComparatorListener sclComparator,INSECTDB<DocumentNGramGraph> dbStorage){  Comparator=sclComparator;  NamedObjects=new HashSet<DocumentNGramGraph>(sNamedObjects);  if (dbStorage == null)   Storage=new INSECTMemoryDB(); else   Storage=dbStorage;  for (  NamedDocumentNGramGraph n : sNamedObjects) {    Storage.saveObject(n,n.getName(),CLUSTER_OBJECT_CATEGORY);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_ALLY(String value0){  return new SM_SYSTEM_MESSAGE(1300523,value0);}  }
class C{  @Override public void onRemoteOperationFinish(RemoteOperation operation,RemoteOperationResult result){  super.onRemoteOperationFinish(operation,result);  if (operation instanceof RemoveFileOperation) {    onRemoveFileOperationFinish((RemoveFileOperation)operation,result);  } else   if (operation instanceof RenameFileOperation) {    onRenameFileOperationFinish((RenameFileOperation)operation,result);  } else   if (operation instanceof SynchronizeFileOperation) {    onSynchronizeFileOperationFinish((SynchronizeFileOperation)operation,result);  } else   if (operation instanceof CreateFolderOperation) {    onCreateFolderOperationFinish((CreateFolderOperation)operation,result);  } else   if (operation instanceof MoveFileOperation) {    onMoveFileOperationFinish((MoveFileOperation)operation,result);  } else   if (operation instanceof CopyFileOperation) {    onCopyFileOperationFinish((CopyFileOperation)operation,result);  }}  }
class C{  public Configuration next(String transition){  if (transition.equals("SH")) {    stack.push(queue.remove());  } else   if (transition.equals("RE")) {    stack.pop();  } else   if (transition.startsWith("LA")) {    Integer u=stack.pop();    Integer v=queue.peek();    String label=transition.substring(3);    addDependency(new Dependency(v,u,label));  } else   if (transition.startsWith("RA")) {    Integer u=stack.peek();    Integer v=queue.remove();    stack.push(v);    String label=transition.substring(3);    addDependency(new Dependency(u,v,label));  }  return new Configuration(sentence,stack,queue,arcs);}  }
class C{  @Override public final Object put(String key,Object value){  return set(key,value);}  }
class C{  public GroupsSearchQuery type(String value){  return unsafeParam("type",value);}  }
class C{  private boolean updateDeviceClass(ZWaveEndpoint endpoint,int genericDeviceClass,int specificDeviceClass,boolean dynamic){  Basic basic=getNode().getDeviceClass().getBasicDeviceClass();  Generic generic=Generic.getGeneric(genericDeviceClass);  if (generic == null) {    logger.error(String.format("NODE %d: Endpoint %d has invalid device class. generic = 0x%02x, specific = 0x%02x.",getNode().getNodeId(),endpoint.getEndpointId(),genericDeviceClass,specificDeviceClass));    return false;  }  Specific specific=Specific.getSpecific(generic,specificDeviceClass);  if (specific == null) {    logger.error(String.format("NODE %d: Endpoint %d has invalid device class. generic = 0x%02x, specific = 0x%02x.",getNode().getNodeId(),endpoint.getEndpointId(),genericDeviceClass,specificDeviceClass));    return false;  }  logger.debug("NODE {}: Endpoint Id = {}",getNode().getNodeId(),endpoint.getEndpointId());  logger.debug("NODE {}: Endpoints is dynamic = {}",getNode().getNodeId(),dynamic ? "true" : false);  logger.debug(String.format("NODE %d: Basic = %s 0x%02x",getNode().getNodeId(),basic.getLabel(),basic.getKey()));  logger.debug(String.format("NODE %d: Generic = %s 0x%02x",getNode().getNodeId(),generic.getLabel(),generic.getKey()));  logger.debug(String.format("NODE %d: Specific = %s 0x%02x",getNode().getNodeId(),specific.getLabel(),specific.getKey()));  ZWaveDeviceClass deviceClass=endpoint.getDeviceClass();  deviceClass.setBasicDeviceClass(basic);  deviceClass.setGenericDeviceClass(generic);  deviceClass.setSpecificDeviceClass(specific);  return true;}  }
class C{  private void writeRawCounter(){  mPrefsManager.setContextualSearchTapTriggeredPromoCount(mCounter);}  }
class C{  private int indexOf(final int i,final int j){  return j < i ? i * (i + 1) / 2 + j : j * (j + 1) / 2 + i;}  }
class C{  public static String removePunctuationMarks(String text){  return removeExtraSpaces(allMarksPat.matcher(text).replaceAll(" "));}  }
class C{  public final void detach(){  if (isAttachedToRecycler) {    isAttachedToRecycler=false;    recyclerWantsTouch=false;    recyclerView.reset();    recyclerView=null;    layoutManager=null;  }}  }
class C{  private void isValidHelper(int node,int[] counts){  IntIterator edges=childEdgeRows(node);  int ncount=0;  while (edges.hasNext()) {    int edge=edges.nextInt();    ++ncount;    ++counts[0];    int c=getAdjacentNode(edge,node);    isValidHelper(c,counts);    if (counts[0] > counts[1])     return;  }}  }
class C{  @Override public synchronized void add(Vertex v) throws Exception {  if (UniqueVertices.containsKey(v.getLabel()))   return; else   super.add(v);  UniqueVertices.put(v.getLabel(),v);}  }
class C{  private Json convertFile(File file){  try {    return Json.read(file.toURI().toURL());  } catch (  MalformedURLException e) {    LOG.warn("Problem reading Json file " + file.getPath());    return Json.object();  }}  }
class C{  private File createTempFile(Context context,String ext,String name) throws IOException {  File externalCacheDir=context.getExternalCacheDir();  File internalCacheDir=context.getCacheDir();  File cacheDir;  if (externalCacheDir == null && internalCacheDir == null) {    throw new IOException("No cache directory available");  }  if (externalCacheDir == null) {    cacheDir=internalCacheDir;  } else   if (internalCacheDir == null) {    cacheDir=externalCacheDir;  } else {    cacheDir=externalCacheDir.getFreeSpace() > internalCacheDir.getFreeSpace() ? externalCacheDir : internalCacheDir;  }  String suffix="." + ext;  File tmpFile=File.createTempFile(TEMP_FILE_PREFIX,suffix,cacheDir);  if (name != null) {    File renamed=new File(cacheDir,name + suffix);    tmpFile.renameTo(renamed);    return renamed;  }  return tmpFile;}  }
class C{  public void train(String sUpdateText,boolean bResetExisting){  if (!bResetExisting)   FullTextDataString=FullTextDataString + sUpdateText; else   FullTextDataString=sUpdateText;  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistributionDocument dCur=DistroDocs.get(iCnt);    if (dCur != null)     if (!bResetExisting)     dCur.setDataString(sUpdateText,iCnt,bResetExisting); else     dCur.setDataString(FullTextDataString,iCnt,bResetExisting);  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistributionWordDocument dWordCur=DistroWordDocs.get(iCnt);    if (dWordCur != null)     if (!bResetExisting)     dWordCur.setDataString(sUpdateText,iCnt,bResetExisting); else     dWordCur.setDataString(FullTextDataString,iCnt,bResetExisting);  }}  }
class C{  private void startAutoNoopTimer(){  if (autoNoopTimeout > 0) {    autoNoopTimer=new AutoNoopTimer();    autoNoopTimer.start();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PvPZONE_HOSTILE_DEATH_TO_B(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1360002,value0,value1);}  }
class C{  public static Map<String,Object> updateShipGroupShipInfo(DispatchContext dctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=dctx.getDispatcher();  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderId=(String)context.get("orderId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  String contactMechId=(String)context.get("contactMechId");  String oldContactMechId=(String)context.get("oldContactMechId");  String shipmentMethod=(String)context.get("shipmentMethod");  ShoppingCart shoppingCart=null;  try {    shoppingCart=loadCartForUpdate(dispatcher,delegator,userLogin,orderId);  } catch (  GeneralException e) {    Debug.logError(e,module);  }  String message=null;  if (UtilValidate.isNotEmpty(shipGroupSeqId)) {    OrderReadHelper orh=new OrderReadHelper(delegator,orderId);    List<GenericValue> shippingMethods=null;    String shipmentMethodTypeId=null;    String carrierPartyId=null;    if (UtilValidate.isNotEmpty(shipmentMethod)) {      String[] arr=shipmentMethod.split("@");      shipmentMethodTypeId=arr[0];      carrierPartyId=arr[1];    } else {      GenericValue orderItemshipGroup=orh.getOrderItemShipGroup(shipGroupSeqId);      shipmentMethodTypeId=orderItemshipGroup.getString("shipmentMethodTypeId");      carrierPartyId=orderItemshipGroup.getString("carrierPartyId");    }    int groupIdx=Integer.parseInt(shipGroupSeqId);    if (UtilValidate.isNotEmpty(oldContactMechId) && oldContactMechId.equals(contactMechId)) {      shoppingCart.setShipmentMethodTypeId(groupIdx - 1,shipmentMethodTypeId);      shoppingCart.setCarrierPartyId(groupIdx - 1,carrierPartyId);    } else {      Map<String,BigDecimal> shippableItemFeatures=orh.getFeatureIdQtyMap(shipGroupSeqId);      BigDecimal shippableTotal=orh.getShippableTotal(shipGroupSeqId);      BigDecimal shippableWeight=orh.getShippableWeight(shipGroupSeqId);      List<BigDecimal> shippableItemSizes=orh.getShippableSizes(shipGroupSeqId);      GenericValue shippingAddress=null;      if (UtilValidate.isEmpty(shippingAddress)) {        shippingAddress=orh.getShippingAddress(shipGroupSeqId);      }      shippingMethods=ProductStoreWorker.getAvailableStoreShippingMethods(delegator,orh.getProductStoreId(),shippingAddress,shippableItemSizes,shippableItemFeatures,shippableWeight,shippableTotal);      boolean isShippingMethodAvailable=false;      for (      GenericValue shippingMethod : shippingMethods) {        isShippingMethodAvailable=shippingMethod.getString("partyId").equals(carrierPartyId) && shippingMethod.getString("shipmentMethodTypeId").equals(shipmentMethodTypeId);        if (isShippingMethodAvailable) {          shoppingCart.setShipmentMethodTypeId(groupIdx - 1,shipmentMethodTypeId);          shoppingCart.setCarrierPartyId(groupIdx - 1,carrierPartyId);          break;        }      }      if (!isShippingMethodAvailable) {        shoppingCart.setShipmentMethodTypeId(groupIdx - 1,shippingMethods.get(0).getString("shipmentMethodTypeId"));        shoppingCart.setCarrierPartyId(groupIdx - 1,shippingMethods.get(0).getString("carrierPartyId"));        String newShipMethTypeDesc=null;        String shipMethTypeDesc=null;        try {          shipMethTypeDesc=delegator.findOne("ShipmentMethodType",UtilMisc.toMap("shipmentMethodTypeId",shipmentMethodTypeId),false).getString("description");          newShipMethTypeDesc=delegator.findOne("ShipmentMethodType",UtilMisc.toMap("shipmentMethodTypeId",shippingMethods.get(0).getString("shipmentMethodTypeId")),false).getString("description");        } catch (        GenericEntityException e) {          Debug.logError(e,module);        }        message="Shipping Method " + carrierPartyId + " "+ shipMethTypeDesc+ " is not applicable to shipping address. "+ shippingMethods.get(0).getString("carrierPartyId")+ " "+ newShipMethTypeDesc+ " has been set for shipping address.";      }      shoppingCart.setShippingContactMechId(groupIdx - 1,contactMechId);    }  }  Map<String,Object> changeMap=new HashMap<String,Object>();  try {    saveUpdatedCartToOrder(dispatcher,delegator,shoppingCart,locale,userLogin,orderId,changeMap,true,false);  } catch (  GeneralException e) {    Debug.logError(e,module);  }  if (UtilValidate.isNotEmpty(message)) {    return ServiceUtil.returnSuccess(message);  } else {    return ServiceUtil.returnSuccess();  }}  }
class C{  private static void handlePhasePlugin(final PhasePluginDescription pluginDescription){  try {    Class<?> clazz=Class.forName(pluginDescription.getClassName());    Object instance=clazz.newInstance();    if (!(instance instanceof SootPhasePlugin)) {      throw new RuntimeException("The plugin class '" + pluginDescription.getClassName() + "' does not implement SootPhasePlugin.");    }    final SootPhasePlugin phasePlugin=(SootPhasePlugin)instance;    phasePlugin.setDescription(pluginDescription);    final String packName=getPackName(pluginDescription.getPhaseName());    Transform transform=new Transform(pluginDescription.getPhaseName(),phasePlugin.getTransformer());    transform.setDeclaredOptions(concat(appendEnabled(phasePlugin.getDeclaredOptions())));    transform.setDefaultOptions(concat(phasePlugin.getDefaultOptions()));    PackManager.v().getPack(packName).add(transform);  } catch (  final ClassNotFoundException e) {    throw new RuntimeException("Failed to load plugin class for " + pluginDescription + ".",e);  }catch (  final InstantiationException e) {    throw new RuntimeException("Failed to instanciate plugin class for " + pluginDescription + ".",e);  }catch (  final IllegalAccessException e) {    throw new RuntimeException("Not allowed to access plugin class for " + pluginDescription + ".",e);  }}  }
class C{  public static <T>T[] toArray(List<T> list){  return (T[])list.toArray();}  }
class C{  private Localisation(){}  }
class C{  final public boolean show(String viewname){  try {    this.set("path",this.path);    this.set("query",this.query);    File file=Module.home.getFile(viewname);    if (file != null && file.exists()) {      View.merge(file,this,viewname);    } else {      notfound();    }  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(viewname,e);  }  return false;}  }
class C{  public static void addIdPrefix(String idPrefix){  RequestLog current=RLOG.get();  String newId=idPrefix + getId();  current.info=current.info.withUuid(newId);  current.logId=newId;  MDC.put(ID_KEY,newId);}  }
class C{  public static final void sort(int[] a,int[] b,int begin,int end){  mergesort(a,b,begin,end - 1);}  }
class C{  public final String readMapleAsciiString(){  return readAsciiString(readShort());}  }
class C{  public static Ellipse computeEllipse(ArrayList<Point2D> points){  final double[][] array=new double[points.size()][2];  int i=0;  for (  Point2D aPoint : points) {    array[i][0]=aPoint.getX();    array[i++][1]=aPoint.getY();  }  final double[] dimensions=convertVariablesToDimension(apply(array));  return new Ellipse(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4]);}  }
class C{  private static void initialise(){  Hints hints=new Hints(Hints.CRS,DefaultGeographicCRS.WGS84);  PositionFactory positionFactory=GeometryFactoryFinder.getPositionFactory(hints);  GeometryFactory geometryFactory=GeometryFactoryFinder.getGeometryFactory(hints);  PrimitiveFactory primitiveFactory=GeometryFactoryFinder.getPrimitiveFactory(hints);  AggregateFactory aggregateFactory=GeometryFactoryFinder.getAggregateFactory(hints);  wktParser=new WKTParser(geometryFactory,primitiveFactory,positionFactory,aggregateFactory);  wktTypeList.add(new WKTType(WKT_POINT,false,1,"Point",false));  wktTypeList.add(new WKTType(WKT_MULTIPOINT,true,1,"Point",false));  wktTypeList.add(new WKTType(WKT_LINESTRING,false,2,"Line",false));  wktTypeList.add(new WKTType("LINEARRING",false,2,"Line",false));  wktTypeList.add(new WKTType(WKT_MULTILINESTRING,true,2,"Line",false));  wktTypeList.add(new WKTType(WKT_POLYGON,false,-1,"Polygon",true));  wktTypeList.add(new WKTType(WKT_MULTIPOLYGON,true,-1,"Polygon",true,true));  for (  WKTType wkyType : wktTypeList) {    wktTypeMap.put(wkyType.getName(),wkyType);  }}  }
class C{  protected Type(String name){  this.name=name;}  }
class C{  public DownloadImplementor(DownloadModel model){  this.model=model;}  }
class C{  public static void launchComparison(Director dir0,Director dir1,Director dir2,String methodName,String options) throws IOException, CanceledException {  IMethodItem item=null;  if (methodName.equals(ResamplingMethodItem.NAME)) {    item=new ResamplingMethodItem();  } else   NotificationsInSwing.showError("Unknown statistical method: " + methodName);  if (item != null) {    item.parseOptionString(options);    Map<Integer,Integer> input1=computeInputMapFromLeaves(dir1,item.getOptionUseInternal(),item.getOptionUseUnassigned());    System.err.println("Input map for " + dir1.getTitle() + ": "+ input1.keySet().size());    Map<Integer,Integer> input2=computeInputMapFromLeaves(dir2,item.getOptionUseInternal(),item.getOptionUseUnassigned());    System.err.println("Input map for " + dir2.getTitle() + ": "+ input2.keySet().size());    item.setInput(input1,input2);    item.apply(dir0.getDocument().getProgressListener());    Map<Integer,Double> result=item.getOutput();    ResamplingMethodItem.displayResult(result,dir1,dir2);  }}  }
class C{  public byte[] compress(long[] unCompInput){  try {    return Snappy.compress(unCompInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  public long optLong(int index,long defaultValue){  try {    return getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private String resolvePolicyProperty(LogManager manager,String property){  String propertyKey=SYSPROP_PROP_PREFIX + property;  return System.getProperty(propertyKey,manager.getProperty(propertyKey));}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {    if (ACTION_REQUEST_WITH_RESULT.equals(getIntent().getAction()) || ACTION_CHECK_WITH_RESULT.equals(getIntent().getAction())) {      finish();    }    return true;  }  return super.onKeyDown(keyCode,event);}  }
class C{  public int readLargeUleb128(){  return readUleb128(true);}  }
class C{  public VectorTool(SLDEditorInterface sldEditorInterface){  super();  this.sldEditorInterface=sldEditorInterface;  createUI();}  }
class C{  public void add(String string){  elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));}  }
class C{  @Override public boolean equals(final Object other){  if (other instanceof Dfp) {    final Dfp x=(Dfp)other;    if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {      return false;    }    return compare(this,x) == 0;  }  return false;}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_BEAN\"";  db.execSQL(sql);}  }
class C{  public static int min(final int a,final int b){  return (a <= b) ? a : b;}  }
class C{  private void addImports(CompletionItem item){  if (this.importRewrite != null) {    try {      TextEdit edit=this.importRewrite.rewriteImports(new NullProgressMonitor());      TextEditConverter converter=new TextEditConverter(this.compilationUnit,edit);      item.setAdditionalTextEdits(converter.convert());    } catch (    CoreException e) {      JavaLanguageServerPlugin.logException("Error adding imports",e);    }  }}  }
class C{  public DruidServiceConfig(String name,String url,Integer timeout,Integer priority){  this.name=name;  this.url=url;  this.timeout=timeout;  this.priority=priority;}  }
class C{  public static SecurityManagerBuilder create(){  return new SecurityManagerBuilder();}  }
class C{  public boolean decrementNumOfUsersAndIndicateEmpty(){  int val=decrementAndGet();  return (val == 0);}  }
class C{  public static boolean updateGradleDistributionUrl(@NotNull String gradleVersion,@NotNull File propertiesFile) throws IOException {  Properties properties=getProperties(propertiesFile);  String gradleDistributionUrl=getGradleDistributionUrl(gradleVersion,false);  String property=properties.getProperty(DISTRIBUTION_URL_PROPERTY);  if (property != null && (property.equals(gradleDistributionUrl) || property.equals(getGradleDistributionUrl(gradleVersion,true)))) {    return false;  }  properties.setProperty(DISTRIBUTION_URL_PROPERTY,gradleDistributionUrl);  savePropertiesToFile(properties,propertiesFile,null);  return true;}  }
class C{  public static String dateToStringWithTime(Date date){  return dateToString(date,DATETIME_PATTERN);}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  return expression;}  }
class C{  public ExportPermission(String name){  super(name);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("select nodes=");  String what=np.getWordMatchesIgnoringCase("all none leaves internal previous subTree leavesBelow subLeaves nodesAbove intermediate invert");  np.matchRespectCase(";");  final ViewerBase viewer;  if (getViewer() instanceof ViewerBase)   viewer=(ViewerBase)getViewer(); else   if (getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getGraphView() instanceof ViewerBase)   viewer=(ViewerBase)((ClusterViewer)getViewer()).getGraphView(); else   if (getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getTabbedIndex() == ClusterViewer.MATRIX_TAB_INDEX && what.equalsIgnoreCase("previous")) {    ((ClusterViewer)getViewer()).getMatrixTab().selectByLabels(ProjectManager.getPreviouslySelectedNodeLabels());    return;  } else   return;  if (what.equalsIgnoreCase("all"))   viewer.selectAllNodes(true); else   if (what.equals("none"))   viewer.selectAllNodes(false); else   if (what.equals("leaves"))   viewer.selectAllLeaves(); else   if (what.equals("internal"))   viewer.selectAllInternal(); else   if (what.equals("previous"))   viewer.selectNodesByLabels(ProjectManager.getPreviouslySelectedNodeLabels(),true); else   if (what.equalsIgnoreCase("subTree"))   viewer.selectSubTreeNodes(); else   if (what.equals("subLeaves") || what.equals("leavesBelow"))   viewer.selectLeavesBelow(); else   if (what.equals("nodesAbove"))   viewer.selectNodesAbove(); else   if (what.equals("intermediate"))   viewer.selectAllIntermediateNodes(); else   if (what.equals("invert"))   viewer.invertNodeSelection();  System.err.println("Number of nodes selected: " + viewer.getNumberSelectedNodes());  viewer.repaint();}  }
class C{  public void updateView(){  Graphics2D graphics=(Graphics2D)getGraphics();  Dimension size=new Dimension();  draw(graphics,size);  setPreferredSize(size);  revalidate();}  }
class C{  public SLDTestRunner(){  System.out.println("Operating system is : " + OSValidator.getOS());  colourFieldsList.add(FieldIdEnum.FILL_COLOUR);  colourFieldsList.add(FieldIdEnum.STROKE_FILL_COLOUR);  colourFieldsList.add(FieldIdEnum.STROKE_STROKE_COLOUR);  colourFieldsList.add(FieldIdEnum.HALO_COLOUR);  filenameList.add(FieldIdEnum.EXTERNAL_GRAPHIC);  filenameList.add(FieldIdEnum.TTF_SYMBOL);  sldEditor=SLDEditor.createAndShowGUI(null,null,true);}  }
class C{  public static <T>T resolveDefault(ResourceResolverFactory factory,String userId,ResolveCallback callback,T defaultValue){  try {    return resolve(factory,userId,callback);  } catch (  ResolveException e) {    LOG.error(RESOLVE_ERROR_MESSAGE,e);  }  return defaultValue;}  }
class C{  private void requestAllCollections(Context c,int page,boolean refresh){  page=refresh ? 1 : page + 1;  listener=new OnRequestCollectionsListener(c,page,refresh);  model.getService().requestAllCollections(page,Mysplash.DEFAULT_PER_PAGE,listener);}  }
class C{  public void run(){  ThreadingUtils.logThreadStarting("Script Health Detector");  while (script.getStatus().equals(ScriptRunningState.RUNNING)) {    if (logger.isTraceEnabled()) {      logger.trace("Checking script {} for responsiveness, last touch = {}, timeout = {}, current time = {}",script.getName(),script.getLastTouch(),script.getScriptTimeout(),TimeUtils.getMonotonicTime());    }    if (script.getLastTouch() + script.getScriptTimeout() < TimeUtils.getMonotonicTime()) {      logger.warn("Script {} detected as frozen, last touch = {}, current time = {}",script.getName(),script.getLastTouch(),TimeUtils.getMonotonicTime());      ScriptRunner.changeState(eventBus,script.getName(),ScriptRunningState.FROZEN,script,executor);    }    if (ThreadingUtils.sleep(1000)) {      break;    }  }  ThreadingUtils.logThreadEnding();}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void onNewIntent(Intent intent){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onNewIntent(intent);    }  }}  }
class C{  public boolean isApplicable(){  try {    return getViewer().isPCoATab() && getViewer().getPcoaTab().getPCoA().getEigenValues() != null;  } catch (  Exception ex) {    return false;  }}  }
class C{  public void onCompletion(MediaPlayer player){  Log.d(LOG_TAG,"on completion is calling stopped");  this.setState(STATE.MEDIA_STOPPED);}  }
class C{  @Override public void createUI(){  createFieldPanel(0,"");}  }
class C{  public String checkIDRefID(){  Iterator iter=fIdRefTable.keySet().iterator();  String key;  while (iter.hasNext()) {    key=(String)iter.next();    if (!fIdTable.containsKey(key)) {      return key;    }  }  return null;}  }
class C{  public static void clearCache(){  ourCache.clear();}  }
class C{  protected void stopZKCluster() throws Exception {  zkUtil.killServer();}  }
class C{  public static void showTimesShortTitle(String title){  String titleBar="# ----------------------------- " + title + "----------------------------------------------------------- ";  System.out.println(Utilities.pad(titleBar,78));  System.out.print(Utilities.pad("# Name",15) + " ");  System.out.print(Utilities.pad("Count",6));  System.out.print(Utilities.pad("CurTime",10));  System.out.print(Utilities.pad("MinTime",10));  System.out.print(Utilities.pad("MaxTime",10));  System.out.print(Utilities.pad("AvgTime",10));  System.out.print(Utilities.pad("TotTime",10));  System.out.print(Utilities.pad("% Total",8));  System.out.println();}  }
class C{  public static ServiceConfiguration create(String configFile) throws IOException, IllegalArgumentException {  checkNotNull(configFile);  return create(new FileInputStream(configFile));}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public Transaction(SQLiteDatabase database){  mDatabase=database;  mIsSuccess=true;  mDatabase.beginTransaction();}  }
class C{  public final void testCheckDataTagsFileDiscSpace(){  int nCheck=100;  try {    fFileManager.setNextCheckFallbackData(nCheck);    fFileManager.isDiskSpaceCheckDone(FallbackProperties.getInstance().getMinimunDiscFreeSpace());  } catch (  SystemDiskSpaceException e) {    fail(e.getMessage());  }  assertTrue(fFileManager.getNextCheckFallbackData() == nCheck);}  }
class C{  public UserAlreadyExistsException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected boolean insertPhraseNode(Element first,Element last){  Element encloseFromHere=first;  Element maybeBoundary=DomUtils.getPreviousSiblingElement(first);  if (maybeBoundary != null && maybeBoundary.getTagName().equals(MaryXML.BOUNDARY)) {    encloseFromHere=maybeBoundary;  }  Element encloseToHere=last;  maybeBoundary=DomUtils.getNextSiblingElement(last);  if (maybeBoundary != null && maybeBoundary.getTagName().equals(MaryXML.BOUNDARY)) {    encloseToHere=maybeBoundary;  }  Element phrase=DomUtils.encloseNodesWithNewElement(encloseFromHere,encloseToHere,MaryXML.PHRASE);  return phrase != null;}  }
class C{  public Object[] buildParameters(Object[] firstParameters,Method method,QueryAdapter queryAdapter,Class<? extends Annotation> annotationType){  int parametersLength=method.getParameterTypes().length;  if (firstParameters.length > 0 && parametersLength < 1) {    throw new RepositoryMethodException(String.format("Method with %s annotation should have at least one parameter.",annotationType));  }  int parametersToResolve=parametersLength - firstParameters.length;  Object[] additionalParameters=new Object[parametersToResolve];  for (int i=firstParameters.length; i < parametersLength; i++) {    Class<?> parameterType=method.getParameterTypes()[i];    if (QueryParams.class.equals(parameterType)) {      additionalParameters[i - firstParameters.length]=toQueryParams(queryAdapter);    } else     if (QuerySpec.class.equals(parameterType)) {      additionalParameters[i - firstParameters.length]=toQuerySpec(queryAdapter);    } else {      additionalParameters[i - firstParameters.length]=parameterProvider.provide(method,i);    }  }  return concatenate(firstParameters,additionalParameters);}  }
class C{  public boolean isListening(){  return listening;}  }
class C{  public ActivitiAppUser(org.activiti.idm.api.User user,String userId,Collection<? extends GrantedAuthority> authorities){  super(userId,user.getPassword() != null ? user.getPassword() : "",authorities);  this.userObject=user;}  }
class C{  @Override public Pair<Aggregation,Aggregation> nest(){  throw new UnsupportedOperationException("Cardinality aggregators cannot support dynamic nesting.");}  }
class C{  private void generateServiceLifecycle(Set<String> entryPoints,SootClass currentClass,JNopStmt endClassStmt,Local classLocal){  final boolean isGCMBaseIntentService=isGCMBaseIntentService(currentClass);  searchAndBuildMethod(AndroidEntryPointConstants.SERVICE_ONCREATE,currentClass,entryPoints,classLocal);  searchAndBuildMethod(AndroidEntryPointConstants.SERVICE_ONSTART1,currentClass,entryPoints,classLocal);  JNopStmt beforeStartCommand=new JNopStmt();  JNopStmt afterStartCommand=new JNopStmt();  body.getUnits().add(beforeStartCommand);  createIfStmt(afterStartCommand);  searchAndBuildMethod(AndroidEntryPointConstants.SERVICE_ONSTART2,currentClass,entryPoints,classLocal);  createIfStmt(beforeStartCommand);  body.getUnits().add(afterStartCommand);  JNopStmt startWhileStmt=new JNopStmt();  JNopStmt endWhileStmt=new JNopStmt();  body.getUnits().add(startWhileStmt);  createIfStmt(endWhileStmt);  boolean hasAdditionalMethods=false;  if (modelAdditionalMethods) {    for (    SootMethod currentMethod : currentClass.getMethods())     if (entryPoints.contains(currentMethod.toString()))     hasAdditionalMethods|=createPlainMethodCall(classLocal,currentMethod);  }  if (isGCMBaseIntentService)   for (  String sig : AndroidEntryPointConstants.getGCMIntentServiceMethods()) {    SootMethod sm=findMethod(currentClass,sig);    if (sm != null && !sm.getName().equals(AndroidEntryPointConstants.GCMBASEINTENTSERVICECLASS))     hasAdditionalMethods|=createPlainMethodCall(classLocal,sm);  }  addCallbackMethods(currentClass);  body.getUnits().add(endWhileStmt);  if (hasAdditionalMethods)   createIfStmt(startWhileStmt);  searchAndBuildMethod(AndroidEntryPointConstants.SERVICE_ONBIND,currentClass,entryPoints,classLocal);  JNopStmt beforemethodsStmt=new JNopStmt();  body.getUnits().add(beforemethodsStmt);  JNopStmt startWhile2Stmt=new JNopStmt();  JNopStmt endWhile2Stmt=new JNopStmt();  body.getUnits().add(startWhile2Stmt);  hasAdditionalMethods=false;  if (modelAdditionalMethods) {    for (    SootMethod currentMethod : currentClass.getMethods())     if (entryPoints.contains(currentMethod.toString()))     hasAdditionalMethods|=createPlainMethodCall(classLocal,currentMethod);  }  if (isGCMBaseIntentService)   for (  String sig : AndroidEntryPointConstants.getGCMIntentServiceMethods()) {    SootMethod sm=findMethod(currentClass,sig);    if (sm != null && !sm.getName().equals(AndroidEntryPointConstants.GCMBASEINTENTSERVICECLASS))     hasAdditionalMethods|=createPlainMethodCall(classLocal,sm);  }  addCallbackMethods(currentClass);  body.getUnits().add(endWhile2Stmt);  if (hasAdditionalMethods)   createIfStmt(startWhile2Stmt);  Stmt onDestroyStmt=Jimple.v().newNopStmt();  searchAndBuildMethod(AndroidEntryPointConstants.SERVICE_ONUNBIND,currentClass,entryPoints,classLocal);  createIfStmt(onDestroyStmt);  searchAndBuildMethod(AndroidEntryPointConstants.SERVICE_ONREBIND,currentClass,entryPoints,classLocal);  createIfStmt(beforemethodsStmt);  body.getUnits().add(onDestroyStmt);  searchAndBuildMethod(AndroidEntryPointConstants.SERVICE_ONDESTROY,currentClass,entryPoints,classLocal);}  }
class C{  public static void main(String[] args){  Hashtable hSwitches=utils.parseCommandLineSwitches(args);  if (utils.getSwitch(hSwitches,"?","").length() > 0) {    printUsage();    System.exit(0);  }  int NMin, NMax, Dist;  String DocumentClass, ComparatorClass, SummaryFile, ModelDir, ModelFiles, PrependPerLine;  boolean Silent, Merge, bAvoidSelfComparison, bJack;  try {    Silent=utils.getSwitch(hSwitches,"s","FALSE").equals("TRUE");    NMin=Integer.valueOf(utils.getSwitch(hSwitches,"nMin","3"));    NMax=Integer.valueOf(utils.getSwitch(hSwitches,"nMax","3"));    Dist=Integer.valueOf(utils.getSwitch(hSwitches,"dist","3"));    DocumentClass=utils.getSwitch(hSwitches,"docClass",NGramSymWinDocument.class.getName());    ComparatorClass=utils.getSwitch(hSwitches,"compClass",StandardDocumentComparator.class.getName());    SummaryFile=utils.getSwitch(hSwitches,"summary","summary.txt");    ModelDir=utils.getSwitch(hSwitches,"modelDir","models" + System.getProperty("file.separator"));    ModelFiles=utils.getSwitch(hSwitches,"models","");    if (ModelFiles.length() > 0) {      if (!Silent)       System.err.println("Model files explicitly declared. Ignoring" + " model dir.");    }    Merge=utils.getSwitch(hSwitches,"merge","FALSE").equals("TRUE");    bAvoidSelfComparison=utils.getSwitch(hSwitches,"avoidSelfComparison","FALSE").equals("TRUE");    bJack=utils.getSwitch(hSwitches,"jack","FALSE").equals("TRUE");    PrependPerLine=utils.getSwitch(hSwitches,"prepend","");    if (bJack && bAvoidSelfComparison)     System.err.println("WARNING: Both jackknifing and self-comparison " + "avoidance have been requested.");    if (!Silent)     System.err.println("Using parameters:\n" + hSwitches);  } catch (  ClassCastException cce) {    System.err.println("Malformed switch:" + cce.getMessage() + ". Aborting...");    printUsage();    return;  }  summarySingleFileEvaluator ssfeEval=new summarySingleFileEvaluator(DocumentClass,ComparatorClass,NMin,NMax,Dist);  ssfeEval.AvoidSelfComparison=bAvoidSelfComparison;  ssfeEval.Jackknifing=bJack;  ssfeEval.Silent=Silent;  Set<String> ssModels;  double dRes=Double.NaN;  if (ModelFiles.length() == 0) {    DocumentSet dsModels=new DocumentSet(ModelDir,1.0);    dsModels.createSets(true);    ssModels=new TreeSet<String>(dsModels.toFilenameSet(DocumentSet.FROM_WHOLE_SET));  } else {    ssModels=new TreeSet<String>(Arrays.asList(ModelFiles.split(";")));    Iterator<String> iModels=ssModels.iterator();    while (iModels.hasNext()) {      String sCandModel=iModels.next();      if (sCandModel.trim().length() == 0) {        ssModels.remove(sCandModel);        iModels=ssModels.iterator();      }    }  }  if (!Merge)   dRes=ssfeEval.doCompare(SummaryFile,ssModels); else   dRes=ssfeEval.doGraphCompareToSet(SummaryFile,ssModels,DocumentClass,ComparatorClass,NMin,NMax,Dist);synchronized (System.out) {    System.out.println(String.format("%s\t%10.8f",PrependPerLine + new File(SummaryFile).getName(),dRes));  }}  }
class C{  public boolean isPrimary(){  return spaceMode == SpaceMode.PRIMARY;}  }
class C{  public ShadowedSymbolTable(SymbolTable symbolTable){  fSymbolTable=symbolTable;}  }
class C{  public static void showProfile(Fragment fragment,@Nullable HashMap<String,String> extras){  showProfile(fragment,AirMap.getUserId(),extras);}  }
class C{  public boolean hasNext(){  return index < bits.length;}  }
class C{  private String buildKey(String accountName,String remotePath){  return accountName + remotePath;}  }
class C{  public void trimValuesToNull(){  if (attributes != null) {    for (    Attribute attribute : attributes) {      attribute.setValue(StringUtils.trimToNull(attribute.getValue()));    }  }}  }
class C{  public Builder addColumnString(String name){  return addColumn(new StringMetaData(name));}  }
class C{  public static void disableLogging(){  DISABLED=true;}  }
class C{  public static Result decodeImage(byte[] data,int width,int height){  Result result=null;  try {    Hashtable<DecodeHintType,Object> hints=new Hashtable<DecodeHintType,Object>();    hints.put(DecodeHintType.CHARACTER_SET,"utf-8");    hints.put(DecodeHintType.TRY_HARDER,Boolean.TRUE);    hints.put(DecodeHintType.POSSIBLE_FORMATS,BarcodeFormat.QR_CODE);    PlanarYUVLuminanceSource source=new PlanarYUVLuminanceSource(data,width,height,0,0,width,height,false);    BinaryBitmap bitmap1=new BinaryBitmap(new GlobalHistogramBinarizer(source));    QRCodeReader reader2=new QRCodeReader();    result=reader2.decode(bitmap1,hints);  } catch (  ReaderException e) {  }  return result;}  }
class C{  private int wordBack(int offset){  int x=wordBI.preceding(offset);  if (x < offset - 15) {    x=offset;  }  if (x < 0) {    x=0;  }  return x;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatUp_A_TO_B(String skilltarget,String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201030,skilltarget,value0,skillcaster,skillname);}  }
class C{  @NotNull private JComponent createSouthPanel(){  Action[] actions=createActions();  List<JButton> buttons=new ArrayList<JButton>();  JPanel panel=new JPanel(new BorderLayout());  final JPanel lrButtonsPanel=new JPanel(new GridBagLayout());  final Insets insets=SystemInfo.isMacOSLeopard ? JBUI.emptyInsets() : JBUI.insetsTop(8);  if (actions.length > 0) {    int gridX=0;    lrButtonsPanel.add(Box.createHorizontalGlue(),new GridBagConstraints(gridX++,0,1,1,1,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,insets,0,0));    if (actions.length > 0) {      JPanel buttonsPanel=createButtons(actions,buttons);      lrButtonsPanel.add(buttonsPanel,new GridBagConstraints(gridX,0,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.NONE,insets,0,0));    }  }  panel.add(lrButtonsPanel,BorderLayout.CENTER);  panel.setBorder(IdeBorderFactory.createEmptyBorder(WizardConstants.STUDIO_WIZARD_INSETS));  return panel;}  }
class C{  protected Type(String name){  this.name=name;}  }
class C{  public static Zmat bai(Zmat B,Zpsdmat A) throws JampackException {  Zchol CHOL;  A.getProperties();  B.getProperties();  if (A.nr != A.nc)   throw new JampackException("Rectangular matrix.");  if (A.nr != B.nc)   throw new JampackException("Inconsistent dimensions.");  if (Parameters.History) {    A.clean();    if (A.CHOL == null)     A.CHOL=new Zchol(A);    CHOL=A.CHOL;  } else   CHOL=new Zchol(A);  return Solve.bahi(Solve.bai(B,CHOL.R),CHOL.R);}  }
class C{  protected GroupsSetCallbackServerSettingsQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  @Override protected void matched(Object actualValue,short valueType,ShortList itemValueType,boolean isNil){  super.matched(actualValue,valueType,itemValueType,isNil);  if (isNil && (fIdentityConstraint.getCategory() == XSIDCDefinition.IC_KEY)) {    String code="KeyMatchesNillable";    fStore.reportError(code,new Object[]{fIdentityConstraint.getElementName(),fIdentityConstraint.getIdentityConstraintName()});  }  fStore.addValue(Field.this,fMayMatch,actualValue,convertToPrimitiveKind(valueType),convertToPrimitiveKind(itemValueType));  fMayMatch=false;}  }
class C{  public int addEntry(ConsoleEntry entry){  int entryType=entry.type;  if (entryType == LOG) {    ++logCount;  } else   if (entryType == WARNING) {    ++warningCount;  } else   if (isErrorType(entryType)) {    ++errorCount;  }  entries.addObject(entry);  if (isFiltering()) {    if (filterEntry(entry)) {      if (collapsed) {        ConsoleCollapsedEntry collapsedEntry=entryLookup.addEntry(entry);        if (collapsedEntry.index < filteredEntries.trimmedCount()) {          collapsedEntry.index=filteredEntries.totalCount();          filteredEntries.addObject(collapsedEntry);        }        return collapsedEntry.index - filteredEntries.trimmedCount();      }      filteredEntries.addObject(entry);      return filteredEntries.totalCount() - 1;    }    return -1;  }  return entries.totalCount() - 1;}  }
class C{  public ShortArrayList bottom(int n){  ShortArrayList bottom=new ShortArrayList();  short[] values=data.toShortArray();  ShortArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(values[i]);  }  return bottom;}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0.0689156576706,0.236735653193,0.364074131941,0.481570789649,0.595880479994,0.000133443915657,0.00286681303403,0.00969192007502,0.0242883861471,0.0605491314658};}  }
class C{  void renewXtn(ServerTransaction st,long time) throws LeaseDeniedException, UnknownLeaseException {  XtnEntry xtnEntry=getTransaction(st);  if (xtnEntry == null) {    if (time <= 0 || time == Lease.FOREVER || time == Lease.ANY)     getTransactionHandler().getTimedXtns().remove(st); else     getTransactionHandler().renewTransactionLease(st,time);    return;  }  xtnEntry.lock();  boolean decrementUsed=true;  try {    if (!xtnEntry.m_Active) {      decrementUsed=false;      throw new LeaseDeniedException("renew:transaction not active any more at space-server transaction= " + st);    }    if (!xtnEntry.addUsedIfPossible())     decrementUsed=false;    if (time <= 0 || time == Lease.FOREVER || time == Lease.ANY)     getTransactionHandler().getTimedXtns().remove(st); else     getTransactionHandler().renewTransactionLease(st,time);  }  finally {    if (decrementUsed)     xtnEntry.decrementUsed();    xtnEntry.unlock();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_ME_TO_B(String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1200460,skillname,skilltarget);}  }
class C{  public void cancelJobs(ISVNRepositoryLocation location){  if (manager != null) {    manager.cancel(location);  }}  }
class C{  public static Map<String,Object> updateUserLoginSecurity(DispatchContext ctx,Map<String,?> context){  Map<String,Object> result=new LinkedHashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue loggedInUserLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String userLoginId=(String)context.get("userLoginId");  String errMsg=null;  if (UtilValidate.isEmpty(userLoginId)) {    userLoginId=loggedInUserLogin.getString("userLoginId");  }  if (!security.hasEntityPermission("PARTYMGR","_UPDATE",loggedInUserLogin) && !security.hasEntityPermission("SECURITY","_UPDATE",loggedInUserLogin)) {    errMsg=UtilProperties.getMessage(resource,"loginservices.not_permission_update_security_info_for_user_login",locale);    return ServiceUtil.returnError(errMsg);  }  GenericValue userLoginToUpdate=null;  try {    userLoginToUpdate=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_read_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  if (userLoginToUpdate == null) {    Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_userlogin_with_id_not_exist",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  boolean wasEnabled=!"N".equals(userLoginToUpdate.get("enabled"));  if (context.containsKey("enabled")) {    userLoginToUpdate.set("enabled",context.get("enabled"),true);  }  if (context.containsKey("disabledDateTime")) {    userLoginToUpdate.set("disabledDateTime",context.get("disabledDateTime"),true);  }  if (context.containsKey("successiveFailedLogins")) {    userLoginToUpdate.set("successiveFailedLogins",context.get("successiveFailedLogins"),true);  }  if (context.containsKey("externalAuthId")) {    userLoginToUpdate.set("externalAuthId",context.get("externalAuthId"),true);  }  if (context.containsKey("userLdapDn")) {    userLoginToUpdate.set("userLdapDn",context.get("userLdapDn"),true);  }  if (context.containsKey("requirePasswordChange")) {    userLoginToUpdate.set("requirePasswordChange",context.get("requirePasswordChange"),true);  }  if (!wasEnabled && "Y".equals(context.get("enabled"))) {    userLoginToUpdate.set("disabledDateTime",null);  }  try {    userLoginToUpdate.store();  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_write_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  private DataQueryParams retainDataDimension(DataDimensionItemType itemType){  DimensionalObject dimension=getDimensionOrFilter(DATA_X_DIM_ID);  List<DimensionalItemObject> items=AnalyticsUtils.getByDataDimensionItemType(itemType,dimension.getItems());  dimension.getItems().clear();  dimension.getItems().addAll(items);  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoReduceSpellATK_Instant_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201275,num0,skillname);}  }
class C{  protected GroupExpression(){  m_group=null;}  }
class C{  public PhotosDeleteAlbumQuery deleteAlbum(UserActor actor,int albumId){  return new PhotosDeleteAlbumQuery(getClient(),actor,albumId);}  }
class C{  public static void deleteFlight(AirMapFlight flight,@Nullable AirMapCallback<Void> callback){  FlightService.deleteFlight(flight,callback);}  }
class C{  public RunnableDistributedTaskAdapter(Runnable runnable,T result,AsyncResultsReducer<T,R> reducer,AsyncResultFilter<T> filter) throws IllegalArgumentException {  super(runnable,result);  this.reducer=reducer;  this.filter=filter;}  }
class C{  public PascalDistribution(int r,double p) throws MathIllegalArgumentException {  if (r <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_SUCCESSES,r);  }  MathUtils.checkRangeInclusive(p,0,1);  numberOfSuccesses=r;  probabilityOfSuccess=p;  logProbabilityOfSuccess=FastMath.log(p);  log1mProbabilityOfSuccess=FastMath.log1p(-p);}  }
class C{  @Override public void addDataTag(final SourceDataTag sourceDataTag){  sourceDataTags.put(sourceDataTag.getId(),sourceDataTag);}  }
class C{  public void renderEndingBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  if (this.widgetCommentsEnabled) {    StringWriter sr=new StringWriter();    sr.append("<@formatBoundaryComment ");    sr.append(" boundaryType=");    sr.append(ftlFmt.makeStringLiteral("End"));    sr.append(" widgetType=");    sr.append(ftlFmt.makeStringLiteral(widgetType));    sr.append(" widgetName=");    sr.append(ftlFmt.makeStringLiteral(modelWidget.getBoundaryCommentName()));    sr.append(" />");    executeMacro(writer,sr.toString());  }}  }
class C{  public void identity(){  for (int j=0; j < size(); j++)   for (int i=0; i < size(); i++)   set(i,j,(i == j ? 1 : 0));}  }
class C{  private void updateHeaderViewSize(int dy,XRecyclerView view){  if (dy < 0) {    if (view.mHeaderView.getLayoutParams().height > view.mHeaderViewHeight) {      view.mHeaderView.getLayoutParams().height+=-dy / 5;    } else {      view.mHeaderView.getLayoutParams().height+=-dy / 2;    }  } else {    view.isLoadingMoreData=true;    view.mHeaderView.getLayoutParams().height-=dy;  }  view.mHeaderView.requestLayout();}  }
class C{  public int size(){  return events.size();}  }
class C{  public View(Class<T> type,String sqlExpression,QueryResultType queryResultType){  super(type,sqlExpression,queryResultType);}  }
class C{  protected Object resolve(){  GigaSpace gs=findGigaSpaceByName(this.name);  if (GigaSpace.class.isAssignableFrom(getMemberType())) {    if (!getMemberType().isInstance(gs)) {      throw new IllegalArgumentException("Cannot inject " + this.member + " with GigaSpaces ["+ this.name+ "]: type mismatch");    }    return gs;  } else {    throw new IllegalArgumentException("Failure to inject");  }}  }
class C{  @Deprecated public void onSuccess(String content){}  }
class C{  public SiteAdminGridRow selectPageByTitle(String title){  final SiteAdminGridRow row=getRowByTitle(title);  if (row != null) {    selectRow(row);  } else {    String msg=String.format("Could not find a page titled %s",title);    throw new IllegalArgumentException(msg);  }  return row;}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  private int pathPositionAtLevel(int orgUnitLevel){  return (orgUnitLevel - 1) * 12 + 2;}  }
class C{  @Override public Filter createFilter(){  return new BBoxExtended();}  }
class C{  private List<ColumnModel> findColumnTypesToChange(){  List<ColumnModel> columnsToChangeType=new ArrayList<ColumnModel>();  for (  ColumnModel columnModelDB : mTableModelDB.getColumnModels()) {    for (    ColumnModel columnModel : mTableModel.getColumnModels()) {      if (columnModelDB.getColumnName().equalsIgnoreCase(columnModel.getColumnName())) {        if (!columnModelDB.getColumnType().equalsIgnoreCase(columnModel.getColumnType())) {          columnsToChangeType.add(columnModel);        }        if (!hasConstraintChanged) {          LogUtil.d(TAG,"default value db is:" + columnModelDB.getDefaultValue() + ", default value is:"+ columnModel.getDefaultValue());          if (columnModelDB.isNullable() != columnModel.isNullable() || !columnModelDB.getDefaultValue().equalsIgnoreCase(columnModel.getDefaultValue()) || (columnModelDB.isUnique() && !columnModel.isUnique())) {            hasConstraintChanged=true;          }        }      }    }  }  return columnsToChangeType;}  }
class C{  public void writeStartGroup(String id,String resName,String resType){  if (!inFile) {    writeStartFile(original,dataType,skeletonPath,fwConfigId,fwInputEncoding,null);  }  writer.writeStartElement("group");  writer.writeAttributeString("id",id);  if (!Util.isEmpty(resName)) {    writer.writeAttributeString("resname",resName);  }  if (!Util.isEmpty(resType)) {    if (resType.startsWith("x-") || (RESTYPEVALUES.contains(";" + resType + ";"))) {      writer.writeAttributeString("restype",resType);    } else {      writer.writeAttributeString("restype","x-" + resType);    }  }  writeAnnotatorsRefIfNeeded();  writer.writeLineBreak();}  }
class C{  public static void clearCache(Context context){  cleanExternalCache(context);  cleanInternalCache(context);}  }
class C{  public boolean isRunning(){  return running;}  }
class C{  public AudioGetRecommendationsQuery(VkApiClient client,UserActor actor){  super(client,"audio.getRecommendations",Utils.buildParametrizedType(List.class,AudioFull.class));  accessToken(actor.getAccessToken());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_INTERVAL_HEAL_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201160,num0,skilltarget,skillname);}  }
class C{  private boolean canUpdateAnimation(long time,OverviewAnimationType type,int sourceIndex,boolean finishImmediately){  if (mAnimationFactory != null) {    if ((mOverviewAnimationType == OverviewAnimationType.DISCARD || mOverviewAnimationType == OverviewAnimationType.UNDISCARD || mOverviewAnimationType == OverviewAnimationType.DISCARD_ALL) && (type == OverviewAnimationType.DISCARD || type == OverviewAnimationType.UNDISCARD || type == OverviewAnimationType.DISCARD_ALL)) {      return true;    }  }  return false;}  }
class C{  public ProductConfigWrapper(){}  }
class C{  private void addEntry(){  model.addNewEntry();  removeButton.setEnabled(false);}  }
class C{  public MessagesSearchDialogsQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public PhotosSaveMarketPhotoQuery(VkApiClient client,UserActor actor,String photo,int server,String hash){  super(client,"photos.saveMarketPhoto",Utils.buildParametrizedType(List.class,Photo.class));  accessToken(actor.getAccessToken());  photo(photo);  server(server);  hash(hash);}  }
class C{  private void createInternalDataSource(){  if (internalDataSource == null) {    ConsoleManager.getInstance().error(this,"No internal data source creation object set");  } else {    List<DataSourceInfo> dataSourceInfoList=internalDataSource.connect(this.editorFileInterface);    if ((dataSourceInfoList != null) && (dataSourceInfoList.size() == 1)) {      dataSourceInfo=dataSourceInfoList.get(0);      dataSourceInfo.populateFieldMap();      notifyDataSourceLoaded();    }  }}  }
class C{  public static int readVInt(DataInput in) throws IOException {  return WritableUtils.readVInt(in);}  }
class C{  public static final void show(Window owner){  AboutDialog dialog=new AboutDialog(owner);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_TO_ME(int num0){  return new SM_SYSTEM_MESSAGE(1201073,num0);}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public static void debugInfo(String msg){  debugInfo("zhibo",msg);}  }
class C{  public static void buildLifeStats(JsonObject json,EntityPlayerMP player){  json.addProperty("Life",player.getHealth());  json.addProperty("Score",player.getScore());  json.addProperty("Food",player.getFoodStats().getFoodLevel());  json.addProperty("XP",player.experienceTotal);  json.addProperty("IsAlive",!player.isDead);  json.addProperty("Air",player.getAir());}  }
class C{  public WaitForAnyListener(int numberOfResults){  this(numberOfResults,null);}  }
class C{  @Override public String object2Relation(String fieldType){  if (fieldType != null) {    if (fieldType.equals("java.util.Date")) {      return "integer";    }  }  return null;}  }
class C{  public static final void fillCircle(GL2 gl,Circle c){  double r=c.getRadius();  Vector2 ce=c.getCenter();  double cx=ce.x;  double cy=ce.y;  RenderUtilities.fillCircleFromCenter(gl,r,cx,cy);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public MLSAFeatureFileReader(String fileName) throws IOException, MaryConfigurationException {  load(fileName);}  }
class C{  public static float floor(float fValue){  return (float)Math.floor(fValue);}  }
class C{  public boolean processActionRequired(){  return changeEvent != null;}  }
class C{  public Builder removeAllColumnsExceptFor(Collection<String> columnNames){  return removeAllColumnsExceptFor(columnNames.toArray(new String[columnNames.size()]));}  }
class C{  private static int readCode(boolean[] rawbits,int startIndex,int length){  int res=0;  for (int i=startIndex; i < startIndex + length; i++) {    res<<=1;    if (rawbits[i]) {      res|=0x01;    }  }  return res;}  }
class C{  public TransientMahaloImpl(String[] configArgs,LifeCycle lifeCycle) throws Exception {  super(configArgs,lifeCycle,false);}  }
class C{  public static int[] analyzeGraphGrid(TupleSet ts){  int m, n;  Iterator iter=ts.tuples();  iter.next();  for (n=2; iter.hasNext(); n++) {    Node nd=(Node)iter.next();    if (nd.getDegree() == 2)     break;  }  m=ts.getTupleCount() / n;  return new int[]{m,n};}  }
