class C{  public static <R>R persistSimpleResource(final R resource){  return persistSimpleResources(ImmutableList.of(resource)).get(0);}  }
class C{  @Override public String globalInfo(){  return "A filter for turning numeric attributes into nominal ones. Unlike " + "discretization, it just takes all numeric values and adds them to " + "the list of nominal values of that attribute. Useful after CSV "+ "imports, to enforce certain attributes to become nominal, e.g., "+ "the class attribute, containing values from 1 to 5.";}  }
class C{  private void display(PrintStream output){  output.println("Parameter	Sensitivity [Confidence]");  output.println("First-Order Effects");  for (int j=0; j < P; j++) {    double[] a0=new double[N];    double[] a1=new double[N];    double[] a2=new double[N];    for (int i=0; i < N; i++) {      a0[i]=A[i];      a1[i]=C_A[i][j];      a2[i]=B[i];    }    output.print("  ");    output.print(parameterFile.get(j).getName());    output.print(' ');    output.print(computeFirstOrder(a0,a1,a2,N));    output.print(" [");    output.print(computeFirstOrderConfidence(a0,a1,a2,N,resamples));    output.println(']');  }  output.println("Total-Order Effects");  for (int j=0; j < P; j++) {    double[] a0=new double[N];    double[] a1=new double[N];    double[] a2=new double[N];    for (int i=0; i < N; i++) {      a0[i]=A[i];      a1[i]=C_A[i][j];      a2[i]=B[i];    }    output.print("  ");    output.print(parameterFile.get(j).getName());    output.print(' ');    output.print(computeTotalOrder(a0,a1,a2,N));    output.print(" [");    output.print(computeTotalOrderConfidence(a0,a1,a2,N,resamples));    output.println(']');  }  output.println("Second-Order Effects");  for (int j=0; j < P; j++) {    for (int k=j + 1; k < P; k++) {      double[] a0=new double[N];      double[] a1=new double[N];      double[] a2=new double[N];      double[] a3=new double[N];      double[] a4=new double[N];      for (int i=0; i < N; i++) {        a0[i]=A[i];        a1[i]=C_B[i][j];        a2[i]=C_A[i][k];        a3[i]=C_A[i][j];        a4[i]=B[i];      }      output.print("  ");      output.print(parameterFile.get(j).getName());      output.print(" * ");      output.print(parameterFile.get(k).getName());      output.print(' ');      output.print(computeSecondOrder(a0,a1,a2,a3,a4,N));      output.print(" [");      output.print(computeSecondOrderConfidence(a0,a1,a2,a3,a4,N,resamples));      output.println(']');    }  }}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());}  }
class C{  @PUT @Path("/typedefs") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) @Experimental public AtlasTypesDef updateAtlasTypeDefs(final AtlasTypesDef typesDef) throws Exception {  AtlasTypesDef ret=null;  try {    ret=typeDefStore.updateTypesDef(typesDef);  } catch (  AtlasBaseException ex) {    throw new WebApplicationException(Servlets.getErrorResponse(ex,Response.Status.NOT_MODIFIED));  }  return ret;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(rotatedData,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public LeafNode(final int symbol){  this.symbol=symbol;}  }
class C{  public SnapshotException(){}  }
class C{  @Override public synchronized void plus(int value){  this.value+=value;}  }
class C{  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,final SSLTestConfig sslConfig) throws Exception {  final boolean ssl=sslConfig.isSSLMode();  List<JettySolrRunner> jettys=cluster.getJettySolrRunners();  for (  JettySolrRunner jetty : jettys) {    final String baseURL=jetty.getBaseUrl().toString();    assertTrue("WTF baseURL: " + baseURL,null != baseURL && 10 < baseURL.length());    assertEquals("http vs https: " + baseURL,ssl ? "https" : "http:",baseURL.substring(0,5));    try (HttpSolrClient client=getRandomizedHttpSolrClient(baseURL)){      assertEquals(0,CoreAdminRequest.getStatus(null,client).getStatus());    }     final HttpClient cloudClient=cluster.getSolrClient().getLbClient().getHttpClient();    try (HttpSolrClient client=getRandomizedHttpSolrClient(baseURL)){      assertEquals(0,CoreAdminRequest.getStatus(null,client).getStatus());    }     final String wrongBaseURL=baseURL.replaceFirst((ssl ? "https://" : "http://"),(ssl ? "http://" : "https://"));    expectThrows(SolrServerException.class,null);    if (!sslConfig.isClientAuthMode()) {      try (CloseableHttpClient client=getSslAwareClientWithNoClientCerts()){        final String wrongUrl=wrongBaseURL + "/admin/cores";        expectThrows(IOException.class,null);      }     }    if (ssl) {      try (CloseableHttpClient client=getSslAwareClientWithNoClientCerts()){        final String url=baseURL + "/admin/cores";        if (sslConfig.isClientAuthMode()) {          expectThrows(IOException.class,null);        } else {          assertEquals("Wrong status for head request (" + url + ") when clientAuth="+ sslConfig.isClientAuthMode(),200,doHeadRequest(client,url));        }      }     }  }}  }
class C{  public void commitTx(Transaction tx) throws VerificationException {  checkArgument(maybeCommitTx(tx),"commitTx called on the same transaction twice");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isWithinBounds(int start,int end){  return myStart >= start && myEnd <= end && myStart <= myEnd;}  }
class C{  public Boolean isStaticVRP(){  return staticVRP;}  }
class C{  protected DerivedAttribute_Impl(){  super();}  }
class C{  public EmptyMultipartRequest(){  requestFileName="empty.query";  requestContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  public void maximizeFrame(JInternalFrame f){  if (f.isIcon()) {    try {      f.setIcon(false);    } catch (    PropertyVetoException e2) {    }  } else {    f.setNormalBounds(f.getBounds());    Rectangle desktopBounds=f.getParent().getBounds();    setBoundsForFrame(f,0,0,desktopBounds.width,desktopBounds.height);  }  try {    f.setSelected(true);  } catch (  PropertyVetoException e2) {  }}  }
class C{  private void updateDatabase(){  final Session active=mDataHelper.loadActiveSession();  if (active != null) {    active.setWifisCount(mDataHelper.countWifis(active.getId()));    active.setCellsCount(mDataHelper.countCells(active.getId()));    active.setWaypointsCount(mDataHelper.countWaypoints(active.getId()));    mDataHelper.storeSession(active,false);  }  mDataHelper.invalidateActiveSessions();}  }
class C{  public static boolean instanceOf(Class<?> objectClass,String typeName){  return instanceOf(objectClass,typeName,null);}  }
class C{  public QueryFactory(String name){  this.mbeanClassName=name;}  }
class C{  public void treeExpanded(TreeExpansionEvent e){  fireVisibleDataPropertyChange();  TreePath path=e.getPath();  if (path != null) {    AccessibleJTreeNode node=new AccessibleJTreeNode(JTree.this,path,null);    PropertyChangeEvent pce=new PropertyChangeEvent(node,AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.COLLAPSED,AccessibleState.EXPANDED);    firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,pce);  }}  }
class C{  private boolean containsElements(final Collection<?> coll){  if (coll == null || coll.isEmpty()) {    return false;  }  for (  final Object name : coll) {    if (name != null) {      return true;    }  }  return false;}  }
class C{  public static final void init(Context context){  if (!isInit) {synchronized (Snowdream.class) {      if (context == null) {        throw new NullPointerException("The mContext is null.");      }      Snowdream.mContext=context;      isInit=true;      mIsdebug=BuildConfigUtil.isDebug(mContext);      Log.setEnabled(mIsdebug);      Log.setGlobalTag(TAG);      welcome();    }  } else {    Log.i("The FrameWork has been initialized.");  }}  }
class C{  private void createLoanEntity(){  System.out.println("---------------------------------NEW LOAN APPLICATION------------------------------------------");  final String loanApplicationJSON=new LoanApplicationTestBuilder().withPrincipal(loanPrincipalAmount).withLoanTermFrequency(numberOfRepayments).withLoanTermFrequencyAsMonths().withNumberOfRepayments(numberOfRepayments).withRepaymentEveryAfter("1").withRepaymentFrequencyTypeAsMonths().withAmortizationTypeAsEqualInstallments().withInterestCalculationPeriodTypeAsDays().withInterestRatePerPeriod(interestRatePerPeriod).withLoanTermFrequencyAsMonths().withSubmittedOnDate(dateString).withExpectedDisbursementDate(dateString).withPrincipalGrace("2").withInterestGrace("2").build(this.clientId.toString(),this.loanProductId.toString(),null);  this.loanId=this.loanTransactionHelper.getLoanId(loanApplicationJSON);  System.out.println("Sucessfully created loan (ID: " + this.loanId + ")");  this.approveLoanApplication();  this.disburseLoan();}  }
class C{  synchronized public void saveRobotList(List<RobotUser> robotList){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.delete(UserDao.ROBOT_TABLE_NAME,null,null);    for (    RobotUser item : robotList) {      ContentValues values=new ContentValues();      values.put(UserDao.ROBOT_COLUMN_NAME_ID,item.getUsername());      if (item.getNick() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_NICK,item.getNick());      if (item.getAvatar() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_AVATAR,item.getAvatar());      db.replace(UserDao.ROBOT_TABLE_NAME,null,values);    }  }}  }
class C{  public void clear(){synchronized (myDatabase) {    myDatabase.clear();  }}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  font=null;  super.changedUpdate(e,a,f);}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  SVGOMElement e=(SVGOMElement)n;  e.prefix=prefix;  e.initializeAllLiveAttributes();  return n;}  }
class C{  public boolean runTest(byte[] bitstring) throws RandomDataGenerationException {  if (bitstring.length != ranges.getBitstreamLength())   throw new RandomDataGenerationException("Invalid bitstring length");  int[] distribution0=new int[6];  int[] distribution1=new int[6];  int ctr=0;  boolean parity=false;  int nBits=ranges.getBitstreamLength() * 8;  for (int i=0; i < nBits; i++) {    int curBit=1 << (7 - (i % 8));    byte curByte=bitstring[(i / 8)];    if ((curBit & curByte) > 0) {      if (parity == false) {        if (i != 0) {          if (ctr < 6) {            distribution0[ctr - 1]++;          } else {            distribution0[5]++;          }        }        parity=true;        ctr=1;      } else       if (parity == true) {        ctr++;      }      if (i == (nBits - 1)) {        if (ctr < 6) {          distribution0[ctr - 1]++;        } else {          distribution0[5]++;        }      }    } else {      if (parity == true) {        if (i != 0) {          if (ctr < 6) {            distribution1[ctr - 1]++;          } else {            distribution1[5]++;          }        }        parity=false;        ctr=1;      } else       if (parity == false) {        ctr++;      }      if (i == (nBits - 1)) {        if (ctr < 6) {          distribution1[ctr - 1]++;        } else {          distribution1[5]++;        }      }    }  }  int[][] temp=new int[][]{distribution0,distribution1};  for (int i=0; i < temp.length; i++) {    int[] a=temp[0];    if ((a[0] < ranges.getRunsBorders()[0][0]) || (a[0] > ranges.getRunsBorders()[0][1]) || (a[1] < ranges.getRunsBorders()[1][0])|| (a[1] > ranges.getRunsBorders()[1][1])|| (a[2] < ranges.getRunsBorders()[2][0])|| (a[2] > ranges.getRunsBorders()[2][1])|| (a[3] < ranges.getRunsBorders()[3][0])|| (a[3] > ranges.getRunsBorders()[3][1])|| (a[4] < ranges.getRunsBorders()[4][0])|| (a[4] > ranges.getRunsBorders()[4][1])|| (a[5] < ranges.getRunsBorders()[5][0])|| (a[5] > ranges.getRunsBorders()[5][1]))     return false;  }  return true;}  }
class C{  boolean isKeepaliveAllowed(long connectionStartTime){  if (!_lifecycle.isActive()) {    return false;  } else   if (connectionStartTime + _keepaliveTimeMax < CurrentTime.currentTime()) {    return false;  } else   if (_keepaliveMax <= _keepaliveAllocateCount.get()) {    return false;  } else {    return true;  }}  }
class C{  public final void testIriWithCharSequenceParameter(){  assertNotNull(Validators.iri("foo"));}  }
class C{  void saveObject(Object obj){  if (dgcAckHandler == null) {    dgcAckHandler=new DGCAckHandler(ackID);  }  dgcAckHandler.add(obj);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void removePreferenceFromScreen(String key){  Preference pref=findPreference(key);  if (pref != null) {    getPreferenceScreen().removePreference(pref);  }}  }
class C{  public boolean mousePressed(MouseEvent e){  Debug.message("eomg","ScalingRasterStateMachine|undefined state|mousePressed = " + graphic.getGraphic().getRenderType());  graphic.getGrabPoint(EditableOMScalingRaster.NW_POINT_INDEX).set(e.getX(),e.getY());  GrabPoint gb;  gb=graphic.getGrabPoint(EditableOMScalingRaster.SE_POINT_INDEX);  gb.set(e.getX(),e.getY());  graphic.setMovingPoint(gb);  if (graphic.getGraphic().getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {    graphic.getStateMachine().setOffsetNeeded(true);    Debug.message("eomg","ScalingRasterStateMachine|undefined state| *offset needed*");  }  graphic.getStateMachine().setEdit();  graphic.fireEvent(EOMGEvent.EOMG_EDIT);  return getMapMouseListenerResponse();}  }
class C{  public ProfileVisit visitCount(int visitCount){  this.visitCount=visitCount;  return this;}  }
class C{  public static long convertToLong(byte[] b){  long result=0;  long value=0;  long power=0;  for (int i=(b.length - 1); i >= 0; i--) {    value=b[i];    if (value < 0) {      value+=256;    }    result=result | (value << power);    power+=8;  }  return result;}  }
class C{  public boolean hasFragment(){  return (_fragment != null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:38.215 -0500",hash_original_method="9E12D702FFAE2715567401C9ACEBCA90",hash_generated_method="8358D50C4B7C04EB808FFE375B4844F2") public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  int port=origin.getPort();  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PORT_ATTR)) {    if (!portMatch(port,cookie.getPorts())) {      throw new MalformedCookieException("Port attribute violates RFC 2965: " + "Request port not found in cookie's port list.");    }  }}  }
class C{  private static byte[] or(byte[] ip1,byte[] ip2){  byte[] temp=new byte[ip1.length];  for (int i=0; i < ip1.length; i++) {    temp[i]=(byte)(ip1[i] | ip2[i]);  }  return temp;}  }
class C{  public static String toString(long[] array){  if (array == null) {    return NULL;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0) {      sb.append(',');    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  public void reverse(){  Coordinate temp=p0;  p0=p1;  p1=temp;}  }
class C{  public final boolean at(CharSet charSet,CharSequence csq){  return index < csq.length() ? charSet.contains(csq.charAt(index)) : false;}  }
class C{  void insertComments(Node node,TreeSet<Comment> commentsToAttribute){  if (commentsToAttribute.isEmpty())   return;  if (node instanceof CompilationUnit) {    insertComments((CompilationUnit)node,commentsToAttribute);  }  List<Node> children=node.getChildrenNodes();  PositionUtils.sortByBeginPosition(children);  for (  Node child : children) {    TreeSet<Comment> commentsInsideChild=new TreeSet<>(NODE_BY_BEGIN_POSITION);    for (    Comment c : commentsToAttribute) {      if (PositionUtils.nodeContains(child,c,configuration.doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {        commentsInsideChild.add(c);      }    }    commentsToAttribute.removeAll(commentsInsideChild);    insertComments(child,commentsInsideChild);  }  List<Comment> attributedComments=new LinkedList<>();  for (  Comment comment : commentsToAttribute) {    if (comment.isLineComment()) {      for (      Node child : children) {        if (child.getEnd().line == comment.getBegin().line && attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {          attributedComments.add(comment);        }      }    }  }  Comment previousComment=null;  attributedComments=new LinkedList<>();  List<Node> childrenAndComments=new LinkedList<>();  childrenAndComments.addAll(children);  childrenAndComments.addAll(commentsToAttribute);  PositionUtils.sortByBeginPosition(childrenAndComments,configuration.doNotConsiderAnnotationsAsNodeStartForCodeAttribution);  for (  Node thing : childrenAndComments) {    if (thing instanceof Comment) {      previousComment=(Comment)thing;      if (!previousComment.isOrphan()) {        previousComment=null;      }    } else {      if (previousComment != null && !thing.hasComment()) {        if (!configuration.doNotAssignCommentsPrecedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {          thing.setComment(previousComment);          attributedComments.add(previousComment);          previousComment=null;        }      }    }  }  commentsToAttribute.removeAll(attributedComments);  for (  Comment c : commentsToAttribute) {    if (c.isOrphan()) {      node.addOrphanComment(c);    }  }}  }
class C{  public void clearConsole(){  setText("");  this.repaint();}  }
class C{  public CTagUpdater(final ZyGraph graph){  m_graph=graph;}  }
class C{  public void configureManagers(){  jmri.InstanceManager.setLightManager(new AcelaLightManager(this));  AcelaSensorManager s;  jmri.InstanceManager.setSensorManager(s=new AcelaSensorManager(this));  tc.setSensorManager(s);  AcelaTurnoutManager t;  jmri.InstanceManager.setTurnoutManager(t=new AcelaTurnoutManager(this));  AcelaTrafficController.instance().setTurnoutManager(t);}  }
class C{  public Binder build(){  if (getSource() == null || getDestination() == null)   throw new IllegalArgumentException("The parameters Source and Destination cannot be null. Please use the method setSource and setDestination to establish these.");  if (this.source instanceof ViewGroup)   this.bindDirection=Binder.DIRECTION_VIEWS_TO_OBJECT;  if (this.destination instanceof ViewGroup)   this.bindDirection=Binder.DIRECTION_OBJECT_TO_VIEWS;  if (this.bindDirection == Binder.DIRECTION_UNKNOW)   throw new IllegalArgumentException("The parameters Source or Destination not is an android.view.ViewGroup member.");  return new Binder(this);}  }
class C{  protected int _rank(int rank){  return zero + rank * stride;}  }
class C{  private void migrateCMSettingsForUser(int userId){synchronized (this) {    if (LOCAL_LOGV)     Log.d(TAG,"CM settings will be migrated for user id: " + userId);    int rowsMigrated=migrateCMSettingsForTable(userId,CMDatabaseHelper.CMTableNames.TABLE_SYSTEM,CMSettings.System.LEGACY_SYSTEM_SETTINGS);    if (LOCAL_LOGV)     Log.d(TAG,"Migrated " + rowsMigrated + " to CM system table");    rowsMigrated=migrateCMSettingsForTable(userId,CMDatabaseHelper.CMTableNames.TABLE_SECURE,CMSettings.Secure.LEGACY_SECURE_SETTINGS);    if (LOCAL_LOGV)     Log.d(TAG,"Migrated " + rowsMigrated + " to CM secure table");    rowsMigrated=migrateCMSettingsForTable(userId,CMDatabaseHelper.CMTableNames.TABLE_GLOBAL,CMSettings.Global.LEGACY_GLOBAL_SETTINGS);    if (LOCAL_LOGV)     Log.d(TAG,"Migrated " + rowsMigrated + " to CM global table");  }}  }
class C{  public static String toJSONString(Collection collection){  final StringWriter writer=new StringWriter();  try {    writeJSONString(collection,writer);    return writer.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void restoreSolr(File solrDumpZipFile){  EmbeddedInstance esc=this.solrInstances.getEmbedded();  File storagePath=esc.getContainerPath();synchronized (this.solrInstances) {    this.solrInstances.close();    try {      ZIPReader.unzip(solrDumpZipFile,storagePath);    } catch (    final IOException e) {      ConcurrentLog.logException(e);    } finally {      this.solrInstances=new InstanceMirror();      try {        this.connectLocalSolr();      } catch (      final IOException e) {        ConcurrentLog.logException(e);      }    }  }}  }
class C{  @SubscribeEvent public static void livingDeath(LivingDeathEvent event){  if (event.getEntity() instanceof EntityPlayer) {    final EntityPlayer player=(EntityPlayer)event.getEntity();    final BlockPos pos=player.getPosition();    player.addChatComponentMessage(new TextComponentTranslation("message.testmod3:death.coordinates",pos.getX(),pos.getY(),pos.getZ()));  }}  }
class C{  public static String read(File input,String toRead) throws IOException {  String raw=StringPrinter.buildString(Errors.rethrow().wrap(null));  return FileMisc.toUnixNewline(raw);}  }
class C{  public static double SSPNrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  int confusionMatrix[]=getConfusionMatrixValues(useTrainingData,ind,chromosomeNum);  int truePositives=confusionMatrix[0];  int falseNegatives=confusionMatrix[1];  int falsePositives=confusionMatrix[2];  int trueNegatives=confusionMatrix[3];  int TPplusFN=truePositives + falseNegatives;  int TNplusFP=trueNegatives + falsePositives;  if (TPplusFN == 0 || TNplusFP == 0)   return 0.0;  int TPplusFP=truePositives + falsePositives;  int TNplusFN=trueNegatives + falseNegatives;  if (TPplusFP == 0 || TNplusFN == 0)   return 0.0;  double PPV=(double)truePositives / (double)TPplusFP;  double NPV=(double)trueNegatives / (double)TNplusFN;  double SE=(double)truePositives / (double)TPplusFN;  double SP=(double)trueNegatives / (double)TNplusFP;  return (SE * SP * PPV* NPV);}  }
class C{  public boolean isIPAddressPresent(String vcenter,String datacenter,String cluster,String vlan,String ipAddress) throws Exception {  logger.debug("vcenter: " + vcenter + "  datacenter: "+ datacenter+ "  cluster: "+ cluster+ "  vlan: "+ vlan+ "  ipAddress: "+ ipAddress);  if (vcenter == null) {    throw new Exception("vCenter not defined");  }  if (datacenter == null) {    throw new Exception("datacenter not defined");  }  if (cluster == null) {    throw new Exception("cluster not defined");  }  if (vlan == null) {    throw new Exception("vlan not defined");  }  if (ipAddress == null) {    throw new Exception("ipaddress not defined");  }  boolean foundEntry=false;  String query1="SELECT TKEY from VLAN WHERE NAME = ? AND CLUSTER_TKEY = ?";  String query2="SELECT IN_USE FROM IPPOOL WHERE IP_ADDRESS = ? AND VLAN_TKEY = ?";  try (Connection con=getDatasource().getConnection()){    int cluster_tkey=getClusterTKey(con,vcenter,datacenter,cluster);    if (cluster_tkey == -1) {      logger.error("Failed to validate IP address. Unknown cluster " + cluster);      String message=Messages.get(locale,"error_db_validate_ip_unknown_cluster",cluster);      throw new Exception(message);    }    logger.debug("retrieved tkey " + cluster_tkey + " for cluster "+ cluster);    int vlan_tkey=-1;    try (PreparedStatement stmt=con.prepareStatement(query1)){      stmt.setString(1,vlan);      stmt.setInt(2,cluster_tkey);      ResultSet rs=stmt.executeQuery();      while (rs.next()) {        vlan_tkey=rs.getInt("TKEY");      }    }     if (vlan_tkey == -1) {      logger.error("Failed to validate IP address. Unknown VLAN " + vlan);      String message=Messages.get(locale,"error_db_validate_ip_unknown_vlan",vlan);      throw new Exception(message);    }    logger.debug("retrieved tkey " + vlan_tkey + " for VLAN "+ vlan);    try (PreparedStatement stmt=con.prepareStatement(query2)){      stmt.setString(1,ipAddress);      stmt.setInt(2,vlan_tkey);      ResultSet rs=stmt.executeQuery();      while (rs.next()) {        foundEntry=true;      }    }   }   logger.debug("IP address: " + ipAddress + " is present: "+ foundEntry);  return foundEntry;}  }
class C{  private void _setRefreshInterval(int refreshInterval){  boolean isRegistered=MBeanUtil.isRefreshNotificationRegistered(this,RefreshNotificationType.STATISTIC_RESOURCE_STATISTICS);  if (isRegistered && (getRefreshInterval() == refreshInterval))   return;  try {    MBeanUtil.registerRefreshNotification(this,getMBeanName(),RefreshNotificationType.STATISTIC_RESOURCE_STATISTICS,refreshInterval);    this.refreshInterval=refreshInterval;    timerInited=true;  } catch (  RuntimeException e) {    logger.warn(e.getMessage(),e);    this.refreshInterval=0;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    logger.error(e.getMessage(),e);    this.refreshInterval=0;  }}  }
class C{  public static Bitmap shrink(Bitmap src,int jpgCompression,long maxSize){  final float factor=0.5f;  ByteArrayOutputStream stream=new ByteArrayOutputStream();  src.compress(Bitmap.CompressFormat.JPEG,jpgCompression,stream);  while (maxSize != -1 && stream.size() > maxSize) {    int height=(int)(src.getHeight() * factor);    int width=(int)(src.getWidth() * factor);    stream.reset();    src=Bitmap.createScaledBitmap(src,width,height,false);    src.compress(Bitmap.CompressFormat.JPEG,90,stream);  }  return src;}  }
class C{  public boolean hasIndex(){  return (getIndex() > -1);}  }
class C{  public String createUrl(boolean createDB){  if (url == null) {    StringBuffer sb=new StringBuffer();    sb.append("jdbc:vertica://");    sb.append(host);    sb.append(":");    sb.append(port);    sb.append("/");    sb.append(databaseName);    return sb.toString();  } else {    return url;  }}  }
class C{  public String readFully(){  return "";}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if (length != 4) {    throw new StunException("length invalid");  }  rFlag=(attributeValue[0] & 0x80) > 0;}  }
class C{  @Override public String toString(){  if (m_Covariance == null) {    calculateCovariance();  }  String result="NN Conditional Estimator. " + m_CondValues.size() + " data points.  Mean = "+ Utils.doubleToString(m_ValueMean,4,2)+ "  Conditional mean = "+ Utils.doubleToString(m_CondMean,4,2);  result+="  Covariance Matrix: \n" + m_Covariance;  return result;}  }
class C{  private void sendFeaturesRequest() throws IOException {  OFFeaturesRequest m=factory.buildFeaturesRequest().setXid(handshakeTransactionIds--).build();  channel.write(Collections.singletonList(m));}  }
class C{  public int hashCode(){  return executable.hashCode() ^ index;}  }
class C{  public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass){  return param.isAnnotationPresent(annotationClass);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.672 -0400",hash_original_method="36CC05EFC6FFF5A71EED967857A4B132",hash_generated_method="74518A42848100A4BDB9D86EE55B7F92") @Override protected boolean doDelete(File fileToDelete) throws IOException {  FileUtils.forceDelete(fileToDelete);  return true;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public DbJmxClient(String host) throws IOException, InterruptedException {  this.host=host;  this.port=DEFAULTPORT;  connect();}  }
class C{  public static VOPricedOption findPricedOption(List<VOPricedOption> list,VOParameterOption option){  if (list == null || option == null) {    return null;  }  for (  VOPricedOption pricedOption : list) {    if (pricedOption.getParameterOptionKey() == option.getKey()) {      return pricedOption;    }  }  return null;}  }
class C{  public String degree(){  return degree;}  }
class C{  protected void paintDisabledText(final JLabel l,final Graphics g,final String s,final int textX,final int textY){  int accChar=l.getDisplayedMnemonicIndex();  if (AquaMnemonicHandler.isMnemonicHidden()) {    accChar=-1;  }  final Color background=l.getBackground();  if (background instanceof UIResource) {    g.setColor(getDisabledLabelColor(l));    SwingUtilities2.drawStringUnderlineCharAt(l,g,s,accChar,textX,textY);  } else {    super.paintDisabledText(l,g,s,textX,textY);  }}  }
class C{  protected int translateRow(int row){  if (enabled) {    return rowMap[row];  } else {    return row;  }}  }
class C{  private static int multAndCarryBy10(int[] src,int srcLen,int[] dst){  long carry=0;  for (int i=0; i < srcLen; i++) {    long product=(src[i] & LONG_MASK) * 10L + carry;    dst[i]=(int)product;    carry=product >>> 32;  }  return (int)carry;}  }
class C{  @Override public MovieViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  Context context=parent.getContext();  View view=LayoutInflater.from(context).inflate(R.layout.layout_item,parent,false);  MovieViewHolder viewHolder=new MovieViewHolder(view);  return viewHolder;}  }
class C{  public void plotTrainingData(){  Graphics2D osg=(Graphics2D)m_osi.getGraphics();  Graphics g=m_plotPanel.getGraphics();  osg.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  double xval=0;  double yval=0;  for (int i=0; i < m_trainingData.numInstances(); i++) {    if (!m_trainingData.instance(i).isMissing(m_xAttribute) && !m_trainingData.instance(i).isMissing(m_yAttribute)) {      if (m_trainingData.instance(i).isMissing(m_classIndex)) {        continue;      }      xval=m_trainingData.instance(i).value(m_xAttribute);      yval=m_trainingData.instance(i).value(m_yAttribute);      int panelX=convertToPanelX(xval);      int panelY=convertToPanelY(yval);      Color ColorToPlotWith=(m_Colors.get((int)m_trainingData.instance(i).value(m_classIndex) % m_Colors.size()));      if (ColorToPlotWith.equals(Color.white)) {        osg.setColor(Color.black);      } else {        osg.setColor(Color.white);      }      osg.fillOval(panelX - 3,panelY - 3,7,7);      osg.setColor(ColorToPlotWith);      osg.fillOval(panelX - 2,panelY - 2,5,5);    }  }  g.drawImage(m_osi,0,0,m_plotPanel);}  }
class C{  public static Collection<ResourceInputStream> loadJsonInputStreams(String rootDir,boolean fromFileSystem) throws URISyntaxException, IOException {  if (rootDir == null) {    throw new RuntimeException("rootDir cannot be null");  }  PathReference pathReference;  if (fromFileSystem) {    pathReference=new PathReference(Paths.get(rootDir),false);  } else {    pathReference=getPathFromResources(rootDir);  }  Collection<ResourceInputStream> inputStreams=new ArrayList<>();  Path filePath;  Stream<Path> walk=Files.walk(pathReference.path,DIR_LEVELS);  for (Iterator<Path> it=walk.iterator(); it.hasNext(); ) {    filePath=it.next();    if (!filePath.toString().endsWith("json"))     continue;    InputStream inputStream;    if (pathReference.fromJar) {      inputStream=Object.class.getResourceAsStream(filePath.toString());    } else {      inputStream=new FileInputStream(new File(filePath.toString()));    }    inputStreams.add(new ResourceInputStream(filePath.getFileName().toString(),inputStream,fromFileSystem));  }  walk.close();  return inputStreams;}  }
class C{  public static VoGatheredEvent parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  VoGatheredEvent object=new VoGatheredEvent();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"voGatheredEvent".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (VoGatheredEvent)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","actor").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setActor(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","eventId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setEventId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","multiplier").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setMultiplier(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","occurrenceTime").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setOccurrenceTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","uniqueId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setUniqueId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public IgniteBiTuple(@Nullable V1 val1,@Nullable V2 val2){  this.val1=val1;  this.val2=val2;}  }
class C{  public String globalInfo(){  return "Merges many values of a nominal attribute into one value.";}  }
class C{  public StrBuilder appendPadding(final int length,final char padChar){  if (length >= 0) {    ensureCapacity(size + length);    for (int i=0; i < length; i++) {      buffer[size++]=padChar;    }  }  return this;}  }
class C{  public static String convertToString(final Node document,final boolean includeXmlDeclaration) throws TransformerException {  DOMSource domSource=new DOMSource(document);  return convertToString(domSource,includeXmlDeclaration);}  }
class C{  public DefaultImageHandler(){}  }
class C{  public byte[] readLength(int length) throws IOException {  byte[] valueBuffer=new byte[length];  int remainingToRead=length;  int off=0;  do {    int count=inputStream.read(valueBuffer,off,remainingToRead);    if (count <= 0) {      throw new EOFException("unexpected end of stream, read " + (length - remainingToRead) + " bytes from "+ length);    }    remainingToRead-=count;    off+=count;  } while (remainingToRead > 0);  if (logger.isTraceEnabled()) {    logger.trace("read packet data(part):" + Utils.hexdump(valueBuffer,maxQuerySizeToLog));  }  return valueBuffer;}  }
class C{  public BindingKey(String key){  this.key=key;}  }
class C{  public void testLocalsAverageCorrectly(MutualInfoCalculatorMultiVariate miCalc,int dimensions,int timeSteps) throws Exception {  miCalc.initialise(dimensions,dimensions);  RandomGenerator rg=new RandomGenerator();  double[][] sourceData=rg.generateNormalData(timeSteps,dimensions,0,1);  double[][] destData=rg.generateNormalData(timeSteps,dimensions,0,1);  miCalc.setObservations(sourceData,destData);  double mi=miCalc.computeAverageLocalOfObservations();  lastResult=mi;  double[] miLocal=miCalc.computeLocalOfPreviousObservations();  System.out.printf("Average was %.5f\n",mi);  assertEquals(mi,MatrixUtils.mean(miLocal),0.00001);}  }
class C{  public void removeToTag(){  parameters.delete(ParameterNames.TO_TAG);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.047 -0500",hash_original_method="712C5AB3F2E44A74D99CC74A47C4F0D4",hash_generated_method="5D493C2C508F1F007BC26D2B80424BEC") @DSSafe(DSCat.SAFE_OTHERS) public static String sha384Hex(String data){  return Hex.encodeHexString(sha384(data));}  }
class C{  public byte[] data(){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    toData(bos);  } catch (  IOException e) {    throw new RuntimeException(e);  }  return bos.toByteArray();}  }
class C{  @Override public void finalizeAggregation() throws Exception {  m_Classifiers=m_classifiersCache.toArray(new Classifier[1]);  m_NumIterations=m_Classifiers.length;  m_classifiersCache=null;}  }
class C{  protected boolean intersectsFrustum(DrawContext dc,TextureTile tile){  Extent extent=tile.getExtent(dc);  if (extent == null)   return false;  if (dc.isPickingMode())   return dc.getPickFrustums().intersectsAny(extent);  return dc.getView().getFrustumInModelCoordinates().intersects(extent);}  }
class C{  public Where<T,ID> ge(String columnName,Object value) throws SQLException {  addClause(new SimpleComparison(columnName,findColumnFieldType(columnName),value,SimpleComparison.GREATER_THAN_EQUAL_TO_OPERATION));  return this;}  }
class C{  public void resetAllocator(){  freeDataOffset=Offset.zero();  freeCodeOffset=Offset.zero();}  }
class C{  public static int saturate(int c,float saturation){  float[] hsb=Color.RGBtoHSB(red(c),green(c),blue(c),null);  return ColorLib.hsb(hsb[0],saturation,hsb[2]);}  }
class C{  public void pauseQueueDownload() throws QueueDownloadNotStartedException {  if (qt != null) {    qt.pause();    qt=null;  } else {    throw new QueueDownloadNotStartedException();  }}  }
class C{  public final void clear(){  m_obj.clear();}  }
class C{  final boolean tryMatchData(){  Object x=item;  if (x != null && x != this && casItem(x,null)) {    LockSupport.unpark(waiter);    return true;  }  return false;}  }
class C{  public int turnoutAddr(){  int a1=getElement(1);  int a2=getElement(2);  return (((a2 & 0x0f) * 128) + (a1 & 0x7f)) + 1;}  }
class C{  public OutfitChangerBehaviour(final Map<String,Integer> priceList){  this(priceList,NEVER_WEARS_OFF,null);}  }
class C{  public static double distancePointLine(Coordinate p,Coordinate[] line){  if (line.length == 0)   throw new IllegalArgumentException("Line array must contain at least one vertex");  double minDistance=p.distance(line[0]);  for (int i=0; i < line.length - 1; i++) {    double dist=CGAlgorithms.distancePointLine(p,line[i],line[i + 1]);    if (dist < minDistance) {      minDistance=dist;    }  }  return minDistance;}  }
class C{  @Override public void changeTo(final String file,int page,final Object location,final Integer type,final boolean storeView){  if (file != null) {    try {      final org.jpedal.gui.GUIFactory gui=((GUIFactory)decode_pdf.getExternalHandler(Options.GUIContainer));      if (gui != null) {        gui.stopThumbnails();      }      if (file.startsWith("http://") || file.startsWith("ftp://") || file.startsWith("https:")) {        if (gui != null) {          gui.getCommand().executeCommand(Commands.OPENURL,new Object[]{file});        } else {          decode_pdf.openPdfFileFromURL(file,true);        }      } else {        if (gui != null) {          gui.getCommand().executeCommand(Commands.OPENFILE,new Object[]{file});        } else {          decode_pdf.openPdfFile(file);        }      }      if (page == -1) {        page=1;      }    } catch (    final Exception e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }  }  if (((page != -1) && (decode_pdf.getPageCount() != 1 && (decode_pdf.getDisplayView() != Display.SINGLE_PAGE || (decode_pdf.getDisplayView() == Display.SINGLE_PAGE && decode_pdf.getlastPageDecoded() != page)))) && (page > 0 && page < decode_pdf.getPageCount() + 1)) {    try {      final org.jpedal.PdfDecoderFX decode_pdf=(org.jpedal.PdfDecoderFX)this.decode_pdf;      if (decode_pdf.getDisplayView() == Display.CONTINUOUS || decode_pdf.getDisplayView() == Display.CONTINUOUS_FACING) {      }      this.decode_pdf.decodePage(page);      if (page != -1) {        gui.setPage(page);      }    } catch (    final Exception e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }    decode_pdf.setPageParameters(-1,page);  }  if (type != null) {    final Object gui=this.decode_pdf.getExternalHandler(org.jpedal.external.Options.GUIContainer);    if (gui != null) {      if (type < 0) {        ((org.jpedal.examples.viewer.gui.GUI)gui).setSelectedComboIndex(org.jpedal.examples.viewer.Commands.SCALING,type + 3);      } else {        ((org.jpedal.examples.viewer.gui.GUI)gui).setSelectedComboItem(org.jpedal.examples.viewer.Commands.SCALING,type.toString());      }    }  }  final org.jpedal.PdfDecoderFX decode_pdf=(org.jpedal.PdfDecoderFX)this.decode_pdf;  if (location != null) {  }  final GUIFactory javaFXGUI=((GUIFactory)decode_pdf.getExternalHandler(Options.GUIContainer));  if (javaFXGUI != null) {    javaFXGUI.scaleAndRotate();    if (storeView) {      javaFXGUI.getCommand().executeCommand(Commands.ADDVIEW,new Object[]{page,location,type});    }  }}  }
class C{  public synchronized int errorCount(){  return fErrors.size();}  }
class C{  BitSieve(BigInteger base,int searchLen){  bits=new long[(unitIndex(searchLen - 1) + 1)];  length=searchLen;  int start=0;  int step=smallSieve.sieveSearch(smallSieve.length,start);  int convertedStep=(step * 2) + 1;  MutableBigInteger b=new MutableBigInteger(base);  MutableBigInteger q=new MutableBigInteger();  do {    start=b.divideOneWord(convertedStep,q);    start=convertedStep - start;    if (start % 2 == 0)     start+=convertedStep;    sieveSingle(searchLen,(start - 1) / 2,convertedStep);    step=smallSieve.sieveSearch(smallSieve.length,step + 1);    convertedStep=(step * 2) + 1;  } while (step > 0);}  }
class C{  @SuppressWarnings("unused") private void computeNonLocals(){  nonLocalRegisters=new HashSet<Register>(20);  Enumeration<BasicBlock> blocks=ir.getBasicBlocks();  while (blocks.hasMoreElements()) {    HashSet<Register> killed=new HashSet<Register>(5);    BasicBlock block=blocks.nextElement();    Enumeration<Instruction> instrs=block.forwardRealInstrEnumerator();    while (instrs.hasMoreElements()) {      Instruction instr=instrs.nextElement();      Enumeration<Operand> uses=instr.getUses();      while (uses.hasMoreElements()) {        Operand op=uses.nextElement();        if (op instanceof RegisterOperand) {          if (!killed.contains(op.asRegister().getRegister())) {            nonLocalRegisters.add(op.asRegister().getRegister());          }        }      }      Enumeration<Operand> defs=instr.getDefs();      while (defs.hasMoreElements()) {        Operand op=defs.nextElement();        if (op instanceof RegisterOperand) {          killed.add(op.asRegister().getRegister());        }      }    }  }}  }
class C{  public boolean onInterceptTouchEvent(MotionEvent ev){  boolean hasChildren=(mSv.getChildCount() > 0);  if (!hasChildren) {    return false;  }  mInterceptedBySwipeHelper=mSwipeHelper.onInterceptTouchEvent(ev);  if (mInterceptedBySwipeHelper) {    return true;  }  boolean wasScrolling=mScroller.isScrolling() || (mScroller.mScrollAnimator != null && mScroller.mScrollAnimator.isRunning());  int action=ev.getAction();switch (action & MotionEvent.ACTION_MASK) {case MotionEvent.ACTION_DOWN:{      mInitialMotionX=mLastMotionX=(int)ev.getX();      mInitialMotionY=mLastMotionY=(int)ev.getY();      mInitialP=mLastP=mSv.mLayoutAlgorithm.screenYToCurveProgress(mLastMotionY);      mActivePointerId=ev.getPointerId(0);      mActiveTaskView=findViewAtPoint(mLastMotionX,mLastMotionY);      mScroller.stopScroller();      mScroller.stopBoundScrollAnimation();      initOrResetVelocityTracker();      mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));      mIsScrolling=mScroller.isScrolling();      break;    }case MotionEvent.ACTION_MOVE:{    if (mActivePointerId == INACTIVE_POINTER_ID)     break;    int activePointerIndex=ev.findPointerIndex(mActivePointerId);    int y=(int)ev.getY(activePointerIndex);    int x=(int)ev.getX(activePointerIndex);    if (Math.abs(y - mInitialMotionY) > mScrollTouchSlop) {      mIsScrolling=true;      initVelocityTrackerIfNotExists();      mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));      final ViewParent parent=mSv.getParent();      if (parent != null) {        parent.requestDisallowInterceptTouchEvent(true);      }    }    mLastMotionX=x;    mLastMotionY=y;    mLastP=mSv.mLayoutAlgorithm.screenYToCurveProgress(mLastMotionY);    break;  }case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:{  mScroller.animateBoundScroll();  mIsScrolling=false;  mActivePointerId=INACTIVE_POINTER_ID;  mActiveTaskView=null;  mTotalPMotion=0;  recycleVelocityTracker();  break;}}return wasScrolling || mIsScrolling;}  }
class C{  public boolean hasTunnels(){  return !tunnels.isEmpty();}  }
class C{  public void dontClone(final Class<?>... c){  for (  final Class<?> cl : c) {    ignored.add(cl);  }}  }
class C{  public ViewProductSkuInternalCommandImpl(final ShoppingCartCommandRegistry registry,final int maxProductHistory){  super(registry);  this.maxProductHistory=maxProductHistory;}  }
class C{  protected boolean beforeSave(boolean newRecord){  log.fine("New=" + newRecord);  if (getAD_Client_ID() != 0 || getAD_Org_ID() != 0) {    String configLevel=null;    String sql="SELECT ConfigurationLevel FROM AD_SysConfig WHERE Name=? AND AD_Client_ID = 0 AND AD_Org_ID = 0";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setString(1,getName());      rs=pstmt.executeQuery();      if (rs.next())       configLevel=rs.getString(1);    } catch (    SQLException e) {      s_log.log(Level.SEVERE,"getValue",e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }    if (configLevel == null) {      if (getAD_Org_ID() != 0) {        sql="SELECT ConfigurationLevel FROM AD_SysConfig WHERE Name=? AND AD_Client_ID = ? AND AD_Org_ID = 0";        try {          pstmt=DB.prepareStatement(sql,null);          pstmt.setString(1,getName());          pstmt.setInt(2,getAD_Client_ID());          rs=pstmt.executeQuery();          if (rs.next())           configLevel=rs.getString(1);        } catch (        SQLException e) {          s_log.log(Level.SEVERE,"getValue",e);        } finally {          DB.close(rs,pstmt);          rs=null;          pstmt=null;        }      }    }    if (configLevel != null) {      setConfigurationLevel(configLevel);      if (getAD_Org_ID() != 0 && (configLevel.equals(MSysConfig.CONFIGURATIONLEVEL_System) || configLevel.equals(MSysConfig.CONFIGURATIONLEVEL_Client))) {        log.saveError("Can't Save Org Level","This is a system or client parameter, you can't save it as organization parameter");        return false;      }      if (getAD_Client_ID() != 0 && configLevel.equals(MSysConfig.CONFIGURATIONLEVEL_System)) {        log.saveError("Can't Save Client Level","This is a system parameter, you can't save it as client parameter");        return false;      }    } else {      if (getAD_Org_ID() != 0)       setConfigurationLevel(CONFIGURATIONLEVEL_Organization); else       if (getAD_Client_ID() != 0 && getConfigurationLevel().equals(MSysConfig.CONFIGURATIONLEVEL_System))       setConfigurationLevel(CONFIGURATIONLEVEL_Client);    }  }  return true;}  }
class C{  public Iterator<String> stacks(){  return this.stacks.keySet().iterator();}  }
class C{  public void resetMetrics(){  execTasks.add(-execTasks.sum());}  }
class C{  public void pO(Object o) throws IOException {  pO();  p(o.toString());}  }
class C{  private static String attributeType(Method getter,Method setter) throws IntrospectionException {  Class<?> type=null;  if (getter != null) {    if (getter.getParameterTypes().length != 0) {      throw new IntrospectionException("bad getter arg count");    }    type=getter.getReturnType();    if (type == Void.TYPE) {      throw new IntrospectionException("getter " + getter.getName() + " returns void");    }  }  if (setter != null) {    Class<?> params[]=setter.getParameterTypes();    if (params.length != 1) {      throw new IntrospectionException("bad setter arg count");    }    if (type == null)     type=params[0]; else     if (type != params[0]) {      throw new IntrospectionException("type mismatch between " + "getter and setter");    }  }  if (type == null) {    throw new IntrospectionException("getter and setter cannot " + "both be null");  }  return type.getName();}  }
class C{  public Entity(String entity,String value,Integer[] location){  super();  this.entity=entity;  this.value=value;  this.location=location;}  }
class C{  static void showMessageDialog(String message){  showMessageDialog(message,"Message");}  }
class C{  public static void initNBT(ItemStack stack){  if (!detectNBT(stack))   injectNBT(stack,new NBTTagCompound());}  }
class C{  public void updateCharacterStream(int columnIndex,java.io.Reader x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public void treeErrors(){  if (m_isLeaf) {    m_numIncorrectTree=m_numIncorrectModel;  } else {    m_numIncorrectTree=0;    for (    LMTNode m_son : m_sons) {      m_son.treeErrors();      m_numIncorrectTree+=m_son.m_numIncorrectTree;    }  }}  }
class C{  public Result(final String ordernum,final String shippingnum,final String errorCode,final String errorMessage,final String localizationKey,final Object... localizedMessageParameters){  this.orderNum=ordernum;  this.shippingNum=shippingnum;  this.errorCode=errorCode;  this.localizationKey=localizationKey;  this.localizedMessageParameters=localizedMessageParameters;  this.errorMessage=errorMessage;}  }
class C{  public Criteria OR(){  return this.example.or();}  }
class C{  @Override public EquivalenceDistribution copy(){  return new EquivalenceDistribution(baseVar);}  }
class C{  public boolean isMasterCopy(){  return attribute.isMasterCopy();}  }
class C{  public GenericClass(Type type,Class<?> clazz){  this.type=type;  this.rawClass=clazz;  handleGenericArraySpecialCase(type);}  }
class C{  protected Object generateGroupKey(EventBean[] eventsPerStream,boolean isNewData){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qResultSetProcessComputeGroupKeys(isNewData,prototype.getGroupKeyNodeExpressions(),eventsPerStream);    Object keyObject;    if (prototype.getGroupKeyNode() != null) {      keyObject=prototype.getGroupKeyNode().evaluate(eventsPerStream,isNewData,agentInstanceContext);    } else {      Object[] keys=new Object[prototype.getGroupKeyNodes().length];      int count=0;      for (      ExprEvaluator exprNode : prototype.getGroupKeyNodes()) {        keys[count]=exprNode.evaluate(eventsPerStream,isNewData,agentInstanceContext);        count++;      }      keyObject=new MultiKeyUntyped(keys);    }    InstrumentationHelper.get().aResultSetProcessComputeGroupKeys(isNewData,keyObject);    return keyObject;  }  if (prototype.getGroupKeyNode() != null) {    return prototype.getGroupKeyNode().evaluate(eventsPerStream,isNewData,agentInstanceContext);  }  Object[] keys=new Object[prototype.getGroupKeyNodes().length];  int count=0;  for (  ExprEvaluator exprNode : prototype.getGroupKeyNodes()) {    keys[count]=exprNode.evaluate(eventsPerStream,isNewData,agentInstanceContext);    count++;  }  return new MultiKeyUntyped(keys);}  }
class C{  public static GoogleAccountCredential usingAudience(Context context,String audience){  Preconditions.checkArgument(audience.length() != 0);  String scope="audience:" + audience;  return new GoogleAccountCredential(context,scope);}  }
class C{  FormatToken parseFormatToken(int offset){  this.startIndex=offset;  this.i=offset;  return parseArgumentIndexAndFlags(new FormatToken());}  }
class C{  private int hash(String value){  final int h=value.hashCode();  final int index=Arrays.binarySearch(hashes,h);  final int[] pivots=this.pivots;  if (pivots == null || index < 0)   return index;  final int offset=offsets[index << 1];  if (offset == -1)   return index;  final int depth=pivots[(offset << 1)];  final int count=pivots[(offset << 1) + 1];  int i=0;  for (int d=0; d < depth; d++) {    final int t=(offset + (1 << d) + i) << 1;    final int part=pivots[t];    final int comp=pivots[t + 1];    final boolean right;    if (part == Integer.MIN_VALUE) {      right=false;    } else     if (part == -1) {      right=value.length() > comp;    } else {      right=value.charAt(part) > (char)comp;    }    i<<=1;    if (right)     i++;  }  return i >= count ? -1 : index + i - offsets[(index << 1) + 1];}  }
class C{  public void timeout(String channel,String name,long time,String reason){  if (onChannel(channel,true)) {    if (time <= 0) {      sendMessage(channel,".timeout " + name,"Trying to timeout " + name + "..");    } else {      String formatted=DateTime.duration(time * 1000,0,2,0);      String onlySeconds=time + "s";      String timeString=formatted.equals(onlySeconds) ? onlySeconds : onlySeconds + "/" + formatted;      if (reason == null || reason.isEmpty()) {        sendMessage(channel,".timeout " + name + " "+ time,"Trying to timeout " + name + " ("+ timeString+ ")");      } else {        sendMessage(channel,".timeout " + name + " "+ time+ " "+ reason,"Trying to timeout " + name + " ("+ timeString+ ", "+ reason+ ")");      }    }  }}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public boolean inConstructor(){  return true;}  }
class C{  public BufferedImage createBufferedImage(int width,int height){  try {    SampleModel sampleModel=getSampleModel(width,height);    WritableRaster raster=Raster.createWritableRaster(sampleModel,new Point(0,0));    return new BufferedImage(colorModel,raster,colorModel.isAlphaPremultiplied(),new Hashtable());  } catch (  NegativeArraySizeException e) {    throw new IllegalArgumentException("Array size > Integer.MAX_VALUE!");  }}  }
class C{  public String encryptString(String sPlainText,Random rndGen){  long lCBCIV=rndGen.nextLong();  return encStr(sPlainText,lCBCIV);}  }
class C{  private void stop(ShutdownModeAmp mode){  _shutdownMode=mode;  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(_classLoader);    if (!_lifecycle.toStopping()) {      return;    }    TreeSet<SubSystem> systems=new TreeSet<SubSystem>(new StopComparator());    systems.addAll(_systemMap.values());    for (    SubSystem system : systems) {      try {        thread.setContextClassLoader(_classLoader);        if (log.isLoggable(Level.FINEST)) {          log.finest(system + " stopping");        }        system.stop(mode);      } catch (      Throwable e) {        log.log(Level.WARNING,e.toString(),e);      }    }  }  finally {    _lifecycle.toStop();    thread.setContextClassLoader(oldLoader);  }}  }
class C{  @VisibleForTesting public void addController(Controller controller){  controllers.add(controller);}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public void write(final AbstractIndex index) throws IOException {  StringBuilder cmd;  while (index.size() > 0) {    System.out.println("Transmit Index [" + index + "]");    cmd=index.remove();    if (index instanceof ArticleIndex) {      articleIdxWriter.write(cmd.toString());    } else     if (index instanceof ChronoIndex) {      chronoIdxWriter.write(cmd.toString());    } else     if (index instanceof RevisionIndex) {      revisionIdxWriter.write(cmd.toString());    }  }  if (index instanceof ArticleIndex) {    articleIdxWriter.flush();  } else   if (index instanceof ChronoIndex) {    chronoIdxWriter.flush();  } else   if (index instanceof RevisionIndex) {    revisionIdxWriter.flush();  }}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  AnovaSignificanceTestResult expected=(AnovaSignificanceTestResult)expectedObj;  AnovaSignificanceTestResult actual=(AnovaSignificanceTestResult)actualObj;  message=message + " - ANOVA significance test result \"" + actual.getSource()+ "\" does not match the expected result";  Assert.assertEquals(message + " : alpha values are not equal",expected.getAlpha(),actual.getAlpha(),1E-15);  Assert.assertEquals(message + " : first degrees of freedom are equal",expected.getDf1(),actual.getDf1(),1E-15);  Assert.assertEquals(message + " : second degrees of freedom are equal",expected.getDf2(),actual.getDf2(),1E-15);  Assert.assertEquals(message + " : F-values are not equal",expected.getFValue(),actual.getFValue(),1E-15);  Assert.assertEquals(message + " : mean square residual values are not equal",expected.getMeanSquaresResiduals(),actual.getMeanSquaresResiduals(),1E-15);  Assert.assertEquals(message + " : mean square between values are not equal",expected.getMeanSquaresBetween(),actual.getMeanSquaresBetween(),1E-15);  Assert.assertEquals(message + " : probabilities are not equal",expected.getProbability(),actual.getProbability(),1E-15);  Assert.assertEquals(message + " : sum squares between values are not equal",expected.getSumSquaresBetween(),actual.getSumSquaresBetween(),1E-15);  Assert.assertEquals(message + " : sum squares residuals values are not equal",expected.getSumSquaresResiduals(),actual.getSumSquaresResiduals(),1E-15);}  }
class C{  private TestFilter parseExcludedTests(String excludedString){  TestFilter filter=new TestFilter();  if (excludedString != null) {    String[] testStrings=excludedString.split(TEST_DELIM);    for (    String testString : testStrings) {      String[] classMethodPair=testString.split(METHOD_DELIM);      if (classMethodPair.length == 2) {        filter.addExcludedTest(new TestIdentifier(classMethodPair[0],classMethodPair[1]));      } else {        filter.addExcludedClass(testString);      }    }  }  return filter;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tSpecifies if inverse of selection is to be output.\n","V",0,"-V"));  newVector.addElement(new Option("\tSpecifies number of folds dataset is split into. \n" + "\t(default 10)\n","N",1,"-N <number of folds>"));  newVector.addElement(new Option("\tSpecifies which fold is selected. (default 1)\n","F",1,"-F <fold>"));  newVector.addElement(new Option("\tSpecifies random number seed. (default 0, no randomizing)\n","S",1,"-S <seed>"));  return newVector.elements();}  }
class C{  public boolean validateSensor(String sensorName,LayoutBlock blk,Component openFrame){  if (sensorName.length() < 1) {    return false;  }  Sensor s=blk.validateSensor(sensorName,openFrame);  if (s == null) {    return false;  }  return true;}  }
class C{  public Message messageAt(int index){  return history.get(index);}  }
class C{  private void expectation(BayesIm inputBayesIm){  int numCases=mixedData.getNumRows();  int numVariables=allVariables.size();  RowSummingExactUpdater rseu=new RowSummingExactUpdater(inputBayesIm);  for (int j=0; j < numVariables; j++) {    DiscreteVariable var=(DiscreteVariable)allVariables.get(j);    String varName=var.getName();    Node varNode=graph.getNode(varName);    int varIndex=inputBayesIm.getNodeIndex(varNode);    int[] parentVarIndices=inputBayesIm.getParents(varIndex);    if (parentVarIndices.length == 0) {      for (int col=0; col < var.getNumCategories(); col++) {        estimatedCounts[j][0][col]=0.0;      }      for (int i=0; i < numCases; i++) {        if (mixedData.getInt(i,j) != -99) {          estimatedCounts[j][0][mixedData.getInt(i,j)]+=1.0;        } else {          Evidence evidenceThisCase=Evidence.tautology(inputBayesIm);          boolean existsEvidence=false;          for (int k=0; k < numVariables; k++) {            if (k == j) {              continue;            }            Node otherVar=allVariables.get(k);            if (mixedData.getInt(i,k) == -99) {              continue;            }            existsEvidence=true;            String otherVarName=otherVar.getName();            Node otherNode=graph.getNode(otherVarName);            int otherIndex=inputBayesIm.getNodeIndex(otherNode);            evidenceThisCase.getProposition().setCategory(otherIndex,mixedData.getInt(i,k));          }          if (!existsEvidence) {            continue;          }          rseu.setEvidence(evidenceThisCase);          for (int m=0; m < var.getNumCategories(); m++) {            estimatedCounts[j][0][m]+=rseu.getMarginal(varIndex,m);          }        }      }    } else {      int numRows=inputBayesIm.getNumRows(varIndex);      for (int row=0; row < numRows; row++) {        int[] parValues=inputBayesIm.getParentValues(varIndex,row);        estimatedCountsDenom[varIndex][row]=0.0;        for (int col=0; col < var.getNumCategories(); col++) {          estimatedCounts[varIndex][row][col]=0.0;        }        for (int i=0; i < numCases; i++) {          boolean parentMatch=true;          for (int p=0; p < parentVarIndices.length; p++) {            if (parValues[p] != mixedData.getInt(i,parentVarIndices[p]) && mixedData.getInt(i,parentVarIndices[p]) != -99) {              parentMatch=false;              break;            }          }          if (!parentMatch) {            continue;          }          boolean parentMissing=false;          for (          int parentVarIndice : parentVarIndices) {            if (mixedData.getInt(i,parentVarIndice) == -99) {              parentMissing=true;              break;            }          }          if (mixedData.getInt(i,j) != -99 && !parentMissing) {            estimatedCounts[j][row][mixedData.getInt(i,j)]+=1.0;            estimatedCountsDenom[j][row]+=1.0;            continue;          }          boolean existsEvidence=false;          Evidence evidenceThisCase=Evidence.tautology(inputBayesIm);          if (!existsEvidence) {            continue;          }          rseu.setEvidence(evidenceThisCase);          estimatedCountsDenom[j][row]+=rseu.getJointMarginal(parentVarIndices,parValues);          int[] parPlusChildIndices=new int[parentVarIndices.length + 1];          int[] parPlusChildValues=new int[parentVarIndices.length + 1];          parPlusChildIndices[0]=varIndex;          for (int pc=1; pc < parPlusChildIndices.length; pc++) {            parPlusChildIndices[pc]=parentVarIndices[pc - 1];            parPlusChildValues[pc]=parValues[pc - 1];          }          for (int m=0; m < var.getNumCategories(); m++) {            parPlusChildValues[0]=m;            estimatedCounts[j][row][m]+=rseu.getJointMarginal(parPlusChildIndices,parPlusChildValues);          }        }      }    }  }  BayesIm outputBayesIm=new MlBayesIm(bayesPm);  for (int j=0; j < nodes.length; j++) {    DiscreteVariable var=(DiscreteVariable)allVariables.get(j);    String varName=var.getName();    Node varNode=graph.getNode(varName);    int varIndex=inputBayesIm.getNodeIndex(varNode);    int numRows=inputBayesIm.getNumRows(j);    int numCols=inputBayesIm.getNumColumns(j);    if (numRows == 1) {      double sum=0.0;      for (int m=0; m < numCols; m++) {        sum+=estimatedCounts[j][0][m];      }      for (int m=0; m < numCols; m++) {        condProbs[j][0][m]=estimatedCounts[j][0][m] / sum;        outputBayesIm.setProbability(varIndex,0,m,condProbs[j][0][m]);      }    } else {      for (int row=0; row < numRows; row++) {        for (int m=0; m < numCols; m++) {          if (estimatedCountsDenom[j][row] != 0.0) {            condProbs[j][row][m]=estimatedCounts[j][row][m] / estimatedCountsDenom[j][row];          } else {            condProbs[j][row][m]=Double.NaN;          }          outputBayesIm.setProbability(varIndex,row,m,condProbs[j][row][m]);        }      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public List<RichTranslation<IString,String>> decode(Sequence<IString> source,int sourceInputId,int threadId,int numTranslations,List<Sequence<IString>> targets,InputProperties inputProperties){  Objects.requireNonNull(source);  if (threadId < 0 || threadId >= numThreads)   throw new IndexOutOfBoundsException("Thread id out of bounds: " + String.valueOf(threadId));  if (sourceInputId < 0)   throw new IndexOutOfBoundsException("Source id must be non-negative: " + String.valueOf(sourceInputId));  final TimeKeeper timer=TimingUtils.start();  if (wrapBoundary)   source=Sequences.wrapStartEnd(source,TokenUtils.START_TOKEN,TokenUtils.END_TOKEN);  final boolean targetsArePrefixes=inputProperties.containsKey(InputProperty.TargetPrefix) ? (boolean)inputProperties.get(InputProperty.TargetPrefix) : false;  final boolean allowIncompletePrefix=(inputProperties.containsKey(InputProperty.AllowIncompletePrefix)) ? (boolean)inputProperties.get(InputProperty.AllowIncompletePrefix) : false;  final OutputSpace<IString,String> outputSpace=OutputSpaceFactory.getOutputSpace(sourceInputId,targets,targetsArePrefixes,translationModel.maxLengthSource(),translationModel.maxLengthTarget(),wrapBoundary,allowIncompletePrefix);  if (inputProperties.containsKey(InputProperty.ForegroundTM)) {    final TranslationModel<IString,String> tm=(TranslationModel<IString,String>)inputProperties.get(InputProperty.ForegroundTM);    tm.setFeaturizer(featurizer);    tm.setName(TM_FOREGROUND_NAME);    logger.info("Configured foreground translation model for thread {}: {}",threadId,tm.getName());  }  if (inputProperties.containsKey(InputProperty.ModelWeights)) {    final Counter<String> weights=(Counter<String>)inputProperties.get(InputProperty.ModelWeights);    this.scorers.get(threadId).updateWeights(weights);    logger.info("Loaded decoder-local weights for thread {}",threadId);  } else {    this.scorers.get(threadId).updateWeights(this.globalModel);  }  if (!inputProperties.containsKey(InputProperty.RuleQueryLimit)) {    inputProperties.put(InputProperty.RuleQueryLimit,ruleQueryLimit);  }  timer.mark("setup");  List<RichTranslation<IString,String>> translations=new ArrayList<>(1);  if (numTranslations > 1) {    translations=inferers.get(threadId).nbest(source,sourceInputId,inputProperties,outputSpace,outputSpace.getAllowableSequences(),numTranslations,distinctNbest,nbestMode);    if (translations == null)     translations=Collections.emptyList();  } else {    final RichTranslation<IString,String> translation=inferers.get(threadId).translate(source,sourceInputId,inputProperties,outputSpace,outputSpace.getAllowableSequences());    if (translation != null)     translations.add(translation);  }  timer.mark("decode");  logger.info("Decode timing: {}",timer);  return translations;}  }
class C{  @Override public void start(){  super.start();  if (!m_needToInitialize) {    return;  }  if (games.strategy.triplea.Properties.getTriggers(getData())) {    final Match<TriggerAttachment> technologyDelegateTriggerMatch=new CompositeMatchAnd<>(AbstractTriggerAttachment.availableUses,AbstractTriggerAttachment.whenOrDefaultMatch(null,null),new CompositeMatchOr<TriggerAttachment>(TriggerAttachment.techAvailableMatch()));    final HashSet<TriggerAttachment> toFirePossible=TriggerAttachment.collectForAllTriggersMatching(new HashSet<>(Collections.singleton(m_player)),technologyDelegateTriggerMatch,m_bridge);    if (!toFirePossible.isEmpty()) {      final HashMap<ICondition,Boolean> testedConditions=TriggerAttachment.collectTestsForAllTriggers(toFirePossible,m_bridge);      final List<TriggerAttachment> toFireTestedAndSatisfied=Match.getMatches(toFirePossible,AbstractTriggerAttachment.isSatisfiedMatch(testedConditions));      TriggerAttachment.triggerAvailableTechChange(new HashSet<>(toFireTestedAndSatisfied),m_bridge,null,null,true,true,true,true);    }  }  m_needToInitialize=false;}  }
class C{  private boolean handleHtmlSpeedService(String uri,HttpServletResponse response) throws IOException, ServletException {  if (uri.equals("/htmlspeed.html")) {    response.setHeader("Content-Type","text/html");    response.setHeader("Content-Length",HTML_SPEED_HTML_BYTES.length + "");    response.setHeader("Cache-Control","max-age=86400");    response.setHeader("Etag","\"001.00\"");    response.setStatus(200);    response.getOutputStream().write(HTML_SPEED_HTML_BYTES);    return true;  } else   if (ConfigUtils.isGaliel && uri.startsWith("/htmlspeed/")) {    if (uri.startsWith("/htmlspeed/load/")) {      ConfigUtils.load(uri.substring("/htmlspeed/load/".length()),false);      return true;    }    if (uri.startsWith("/htmlspeed/clean/")) {      ConfigUtils.load(uri.substring("/htmlspeed/clean/".length()),true);      return true;    } else     if (uri.startsWith("/htmlspeed/init/")) {      ConfigUtils.configLock.readLock().unlock();      ConfigUtils.configLock.writeLock().lock();      try {        ConfigUtils.loadAllConfigFiles();      }  finally {        ConfigUtils.configLock.writeLock().unlock();        ConfigUtils.configLock.readLock().lock();      }      return true;    } else     if (!ConfigUtils.hostInfoFileExists) {      initHostInfo(uri);      String primeHost=ServiceUtils.getPrimeHost();      response.setHeader("Content-Type","text/html");      StringBuilder sb=new StringBuilder(4096);      sb.append("<html><body>Tested site changed to: ");      sb.append(primeHost);      sb.append(",&nbsp;Addresses: ");      sb.append(ServiceUtils.getAddresses());      sb.append(_isWithFirstPlus ? ",&nbsp;&nbsp;&nbsp;[with first-plus optimizations]&nbsp;" : "");      sb.append(_isWithIframe ? ",&nbsp;&nbsp;&nbsp;(with content-first optimizations)" : "");      sb.append("<br/><br/>");      sb.append("</body></html>");      String out=sb.toString();      response.setHeader("Content-Length",out.length() + "");      response.setStatus(200);      response.getOutputStream().write(out.getBytes());      return true;    }  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  StackSlot allocateRBPSpillSlot(){  assert spillSize == initialSpillSize : "RBP spill slot must be the first allocated stack slots";  rbpSpillSlot=allocateSpillSlot(LIRKind.value(AMD64Kind.QWORD));  assert asStackSlot(rbpSpillSlot).getRawOffset() == -16 : asStackSlot(rbpSpillSlot).getRawOffset();  return rbpSpillSlot;}  }
class C{  public long stop(){  if (isRunning) {    long time=_time() - start;    total+=time;    count++;    isRunning=false;    return time;  }  return 0;}  }
class C{  @Override public void emit(StructuredRecord value){  currentValues.add(value);}  }
class C{  public void filter(Predicate<T> predicate){  for (int i=0; i < content.size(); i++) {    T e=content.get(i);    if (e != null && !predicate.test(e)) {      content.set(i,null);    }  }}  }
class C{  private AddValueHandler(Attributes attrs) throws IOException, ParseException {  AttributeHelper helper=new AttributeHelper(attrs);  this.count=helper.consumeInteger("count",false,0);  helper.assertAllConsumed();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public Object value(InternalContextAdapter context) throws MethodInvocationException {  Object left=jjtGetChild(0).value(context);  Object right=jjtGetChild(1).value(context);  if (left == null || right == null) {    rsvc.error((left == null ? "Left" : "Right") + " side (" + jjtGetChild((left == null ? 0 : 1)).literal()+ ") of addition operation has null value."+ " Operation not possible. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  if (!(left instanceof Integer) || !(right instanceof Integer)) {    rsvc.error((!(left instanceof Integer) ? "Left" : "Right") + " side of addition operation is not a valid type. " + "Currently only integers (1,2,3...) and Integer type is supported. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  return new Integer(((Integer)left).intValue() + ((Integer)right).intValue());}  }
class C{  public byte[] toEntropy(List<String> words) throws MnemonicException.MnemonicLengthException, MnemonicException.MnemonicWordException, MnemonicException.MnemonicChecksumException {  if (words.size() % 3 > 0)   throw new MnemonicException.MnemonicLengthException("Word list size must be multiple of three words.");  if (words.size() == 0)   throw new MnemonicException.MnemonicLengthException("Word list is empty.");  int concatLenBits=words.size() * 11;  boolean[] concatBits=new boolean[concatLenBits];  int wordindex=0;  for (  String word : words) {    int ndx=Collections.binarySearch(this.wordList,word);    if (ndx < 0)     throw new MnemonicException.MnemonicWordException(word);    for (int ii=0; ii < 11; ++ii)     concatBits[(wordindex * 11) + ii]=(ndx & (1 << (10 - ii))) != 0;    ++wordindex;  }  int checksumLengthBits=concatLenBits / 33;  int entropyLengthBits=concatLenBits - checksumLengthBits;  byte[] entropy=new byte[entropyLengthBits / 8];  for (int ii=0; ii < entropy.length; ++ii)   for (int jj=0; jj < 8; ++jj)   if (concatBits[(ii * 8) + jj])   entropy[ii]|=1 << (7 - jj);  byte[] hash=Sha256Hash.hash(entropy);  boolean[] hashBits=bytesToBits(hash);  for (int i=0; i < checksumLengthBits; ++i)   if (concatBits[entropyLengthBits + i] != hashBits[i])   throw new MnemonicException.MnemonicChecksumException();  return entropy;}  }
class C{  public Map<Model,List<ModelEndpoint>> listEndpoints(Model model){  Map<Model,List<ModelEndpoint>> ret=new HashMap<>();  rwLock.readLock().lock();  try {    Query query=new Query(model);    for (    Map.Entry<Model,List<ModelEndpoint>> kv : state.entrySet()) {      if (query.match(kv.getKey())) {        ret.put(kv.getKey(),kv.getValue());      }    }    return ret;  }  finally {    rwLock.readLock().unlock();  }}  }
class C{  public boolean updateReadIndex(){  rawReadIndex=(rawReadIndex + 1) & (buffSizeMinusOne);  if (rawReadIndex == rawProcessIndex)   processDataOverflow=true;  return false;}  }
class C{  @Override public int read(byte[] buf,int offset,int len) throws IOException {  int available=_available;  if (available > 0) {    len=Math.min(len,available);    len=_next.read(buf,offset,len);    if (len > 0) {      _available-=len;    }  } else   if (available == 0) {    _available=readChunkLength();    if (_available > 0) {      len=Math.min(len,_available);      len=_next.read(buf,offset,len);      if (len > 0)       _available-=len;    } else {      _available=-1;      len=-1;    }  } else {    len=-1;  }  return len;}  }
class C{  protected AfterCode_Impl(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.692 -0400",hash_original_method="1D97F6B1ACCFDEF880E62EA3C5F540FF",hash_generated_method="3A0DEAC646F2AAD0946D9AAA7DF97B17") public CountingOutputStream(OutputStream out){  super(out);}  }
class C{  public void increaseKey(int i,Key key){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  if (greater(nodes[i].key,key))   throw new IllegalArgumentException("Calling with this argument would not increase the key");  delete(i);  insert(i,key);}  }
class C{  public boolean isDrawEdges(){  return drawEdges;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  private int estimateDist(AreaPanel ap1,AreaPanel ap2){  int yDist=Math.abs(ap1.getCenterY() - ap2.getCenterY());  int xDist=Math.abs(ap1.getCenterX() - ap2.getCenterX());  if (xDist < (yDist >> 1) || yDist < (xDist >> 1))   return xDist + yDist;  return (int)((xDist + yDist) * 7l / 10);}  }
class C{  public void updateFieldVisibility(NeuronUpdateRule rule){  boundsClippingPanel.updateFieldVisibility(rule);  if (rule != null) {    inputType.setSelectedItem(rule.getInputType().toString());  }}  }
class C{  private void formatResponseAsJson(SolrQueryRequest req){  ModifiableSolrParams params=new ModifiableSolrParams(req.getParams());  params.set("wt","json");  req.setParams(params);}  }
class C{  private String createSpokenTextMomentWithFictionalProgressXML(String momentId,String nextMomentId,String textToSpeak,String progressDescription){  String xml="";  xml+=createStartMomentXml("spoken_text",momentId);  xml+=createNextMomentXml(nextMomentId);  xml+="<text_to_speak>" + textToSpeak + "</text_to_speak>";  xml+=createFictionalProgressXml(progressDescription);  xml+=createEndMomentXml();  return xml;}  }
class C{  public Element store(Object o){  PositionableRectangle p=(PositionableRectangle)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("positionableRectangle");  storeCommonAttributes(p,element);  Element elem=new Element("size");  elem.setAttribute("width","" + p.getWidth());  elem.setAttribute("height","" + p.getHeight());  element.addContent(elem);  element.setAttribute("class","jmri.jmrit.display.controlPanelEditor.shape.configurexml.PositionableRectangleXml");  return element;}  }
class C{  public Object putNodeMetaData(Object key,Object value){  if (key == null)   throw new GroovyBugError("Tried to set meta data with null key on " + this + ".");  if (metaDataMap == null) {    metaDataMap=new ListHashMap();  }  return metaDataMap.put(key,value);}  }
class C{  public void testFilterIsolatedMode() throws Exception {  processFilterTest(DeploymentMode.ISOLATED);}  }
class C{  public static boolean isTopicFilter(List<String> topicLevels){  return topicLevels.contains("+") || topicLevels.get(topicLevels.size() - 2).equals("#");}  }
class C{  public UnsupportedDigestAlgorithmException(String message){  super(message);}  }
class C{  public LOCRecord(Name name,int dclass,long ttl,double latitude,double longitude,double altitude,double size,double hPrecision,double vPrecision){  super(name,Type.LOC,dclass,ttl);  this.latitude=(long)(latitude * 3600 * 1000 + (1L << 31));  this.longitude=(long)(longitude * 3600 * 1000 + (1L << 31));  this.altitude=(long)((altitude + 100000) * 100);  this.size=(long)(size * 100);  this.hPrecision=(long)(hPrecision * 100);  this.vPrecision=(long)(vPrecision * 100);}  }
class C{  public static Object withOutputStream(File file,@ClosureParams(value=SimpleType.class,options="java.io.OutputStream") Closure closure) throws IOException {  return IOGroovyMethods.withStream(newOutputStream(file),closure);}  }
class C{  private void sendLicenseExpiration(LicenseInfoExt licenseInfo) throws Exception {  _log.info("SendEventScheduler::validateAndSendLicenseExpiration() for {}",licenseInfo.getLicenseType());  _callHomeEventsFacade.sendExpirationEvent(licenseInfo,MediaType.APPLICATION_XML_TYPE);}  }
class C{  public void initTextEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,AbstractView viewArg,String dataArg){  initUIEvent(typeArg,canBubbleArg,cancelableArg,viewArg,0);  data=dataArg;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (mainFrame != null) {    mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  }  setEnabled(false);  try {    JFileChooser.setDefaultLocale(controller.getLocaliser().getLocale());    JFileChooser fileChooser=new JFileChooser();    fileChooser.setLocale(controller.getLocaliser().getLocale());    fileChooser.setDialogTitle(controller.getLocaliser().getString("showExportPrivateKeysPanel.filename.text.2"));    adjustedFont=FontSizer.INSTANCE.getAdjustedDefaultFont();    if (adjustedFont != null) {      setFileChooserFont(new Container[]{fileChooser});    }    String walletFilename=bitcoinController.getModel().getActiveWalletFilename();    fileChooser.applyComponentOrientation(ComponentOrientation.getOrientation(controller.getLocaliser().getLocale()));    if (walletFilename != null) {      fileChooser.setCurrentDirectory(new File(walletFilename));    }    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);    fileChooser.setFileFilter(new CsvFileFilter(controller));    String defaultFileName;    if (walletFilename != null) {      int suffixSeparatorLong=walletFilename.lastIndexOf('.');      String stem=walletFilename.substring(0,suffixSeparatorLong);      defaultFileName=stem + "." + BitcoinModel.CSV_FILE_EXTENSION;    } else {      defaultFileName=fileChooser.getCurrentDirectory().getAbsoluteFile() + File.separator + controller.getLocaliser().getString("saveWalletAsView.untitled")+ "."+ BitcoinModel.CSV_FILE_EXTENSION;    }    fileChooser.setSelectedFile(new File(defaultFileName));    fileChooser.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    int returnVal=fileChooser.showSaveDialog(mainFrame);    String exportTransactionsFilename=null;    if (returnVal == JFileChooser.APPROVE_OPTION) {      File file=fileChooser.getSelectedFile();      if (file != null) {        exportTransactionsFilename=file.getAbsolutePath();        exportTransactions(exportTransactionsFilename);      }    }  }  finally {    setEnabled(true);    if (mainFrame != null) {      mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    }  }}  }
class C{  @AssistedInject public SessionResource(@Assisted GuacamoleSession session){  this.session=session;}  }
class C{  public SynapseGroup connectNeuronGroups(NeuronGroup source,NeuronGroup target){  SynapseGroup newGroup=connectNeuronGroups(source,target,new AllToAll(true));  return newGroup;}  }
class C{  private void resetStatus(boolean adding){  if (front == rear) {    status=adding ? DequeStatus.Full : DequeStatus.Empty;  } else {    status=DequeStatus.Normal;  }}  }
class C{  private void createImage(final String mapName){  m_image=Toolkit.getDefaultToolkit().createImage(mapName);  Util.ensureImageLoaded(m_image);}  }
class C{  public static void main(String[] args){  runFilter(new NominalToString(),args);}  }
class C{  synchronized protected void timeout(){  layout_spd=-1;  setSpeedSetting(speedSetting);}  }
class C{  public void release(){}  }
class C{  private static void beginStartingService(Context context,Intent intent){synchronized (sStartingServiceSync) {    if (sStartingService == null) {      PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);      sStartingService=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"StartingDockService");    }    sStartingService.acquire();    if (context.startService(intent) == null) {      Log.e(TAG,"Can't start DockService");    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:06.130 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  @Override public float estimateCost(Rule rule){  if (rule != null && this.ownerID.equals(rule.getOwner()))   return weights.getDense(denseFeatureIndex) * getValue(rule.getLHS());  return 0.0f;}  }
class C{  public static void writeStringValue(int hkey,String key,String valueName,String value) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  if (hkey == HKEY_LOCAL_MACHINE) {    writeStringValue(systemRoot,hkey,key,valueName,value);  } else   if (hkey == HKEY_CURRENT_USER) {    writeStringValue(userRoot,hkey,key,valueName,value);  } else {    throw new IllegalArgumentException("hkey=" + hkey);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public NotNullValidator(@NonNull final CharSequence errorMessage){  super(errorMessage);}  }
class C{  public void fillFieldValues(List<SynapseUpdateRule> ruleList){  HebbianThresholdRule synapseRef=(HebbianThresholdRule)ruleList.get(0);  if (!NetworkUtils.isConsistent(ruleList,HebbianThresholdRule.class,"getLearningRate")) {    tfLearningRate.setText(SimbrainConstants.NULL_STRING);  } else {    tfLearningRate.setText(Double.toString(synapseRef.getLearningRate()));  }  if (!NetworkUtils.isConsistent(ruleList,HebbianThresholdRule.class,"getOutputThresholdMomentum")) {    tfOutputThresholdMomentum.setText(SimbrainConstants.NULL_STRING);  } else {    tfOutputThresholdMomentum.setText(Double.toString(synapseRef.getOutputThresholdMomentum()));  }  if (!NetworkUtils.isConsistent(ruleList,HebbianThresholdRule.class,"getOutputThreshold")) {    tfOutputThreshold.setText(SimbrainConstants.NULL_STRING);  } else {    tfOutputThreshold.setText(Double.toString(synapseRef.getOutputThreshold()));  }  if (!NetworkUtils.isConsistent(ruleList,HebbianThresholdRule.class,"getUseSlidingOutputThreshold")) {    isOutputThresholdSliding.setNull();  } else {    isOutputThresholdSliding.setSelected(synapseRef.getUseSlidingOutputThreshold());  }}  }
class C{  public void addSingular(String match,String rule){  addSingular(match,rule,true);}  }
class C{  private void draw(final ExecutionUnit process,final Graphics2D g2,final ProcessRendererModel rendererModel,final boolean printing){  if (!visualizer.isActive()) {    return;  }  List<Operator> selectedOperators=rendererModel.getSelectedOperators();  for (  Operator operator : process.getOperators()) {    if (selectedOperators.contains(operator)) {      continue;    }    drawOpAnno(operator,g2,rendererModel,printing);  }  for (  Operator selOp : selectedOperators) {    if (process.equals(selOp.getExecutionUnit())) {      drawOpAnno(selOp,g2,rendererModel,printing);    }  }}  }
class C{  public XYLocation south(){  return new XYLocation(xCoOrdinate,yCoOrdinate + 1);}  }
class C{  public static String toGizaString(int[][] f2e){  StringBuilder sb=new StringBuilder();  for (int i=0; i < f2e.length; ++i) {    for (    int j : f2e[i]) {      if (sb.length() > 0)       sb.append(" ");      sb.append(i).append("-").append(j);    }  }  return sb.toString();}  }
class C{  public void actionPerformed(ActionEvent e){  TreePath[] selected=getSelectedPaths();  if (selected != null && selected.length > 0) {    TreePath shallowest;    while ((shallowest=findShallowestPath(selected)) != null) {      removeSiblings(shallowest,selected);    }  }}  }
class C{  @Override public boolean accept(String category){  return "openfile".equals(category);}  }
class C{  public int transform(CtClass clazz,int pos,CodeIterator iterator,ConstPool cp) throws BadBytecode {  int c=iterator.byteAt(pos);  if (c == INVOKEINTERFACE || c == INVOKESPECIAL || c == INVOKESTATIC || c == INVOKEVIRTUAL) {    int index=iterator.u16bitAt(pos + 1);    String cname=cp.eqMember(methodname,methodDescriptor,index);    if (cname != null && matchClass(cname,clazz.getClassPool())) {      int ntinfo=cp.getMemberNameAndType(index);      pos=match(c,pos,iterator,cp.getNameAndTypeDescriptor(ntinfo),cp);    }  }  return pos;}  }
class C{  public double pdf(double x){  if (x <= min || x >= max)   return 0.0;  return 1.0 / (max - min);}  }
class C{  private void retrieveViews(){  loadingBar=(ProgressBar)findViewById(R.id.audio_player_loading);  artworkView=(ImageView)findViewById(R.id.audio_player_image);  currentPositionView=(TextView)findViewById(R.id.audio_player_position);  durationView=(TextView)findViewById(R.id.audio_player_duration);  seekBar=(SeekBar)findViewById(R.id.audio_player_seek);  previousButton=(ImageButton)findViewById(R.id.audio_player_previous);  playPauseButton=(ImageButton)findViewById(R.id.audio_player_play_pause);  nextButton=(ImageButton)findViewById(R.id.audio_player_next);}  }
class C{  public static void sort(long[] a){  sort1(a,0,a.length);}  }
class C{  protected short parseType(){  String typeString=element.getAttributeNS(null,SVG_TYPE_ATTRIBUTE);  if (typeString.equals("translate")) {    return SVGTransform.SVG_TRANSFORM_TRANSLATE;  } else   if (typeString.equals("scale")) {    return SVGTransform.SVG_TRANSFORM_SCALE;  } else   if (typeString.equals("rotate")) {    return SVGTransform.SVG_TRANSFORM_ROTATE;  } else   if (typeString.equals("skewX")) {    return SVGTransform.SVG_TRANSFORM_SKEWX;  } else   if (typeString.equals("skewY")) {    return SVGTransform.SVG_TRANSFORM_SKEWY;  }  throw new BridgeException(ctx,element,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_TYPE_ATTRIBUTE,typeString});}  }
class C{  public void configure(){  TamsTrafficController tc=new TamsTrafficController();  tc.connectPort(this);  this.getSystemConnectionMemo().setTamsTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().configureManagers();  sourceThread=new Thread(this);  sourceThread.setName("Tams Simulator");  sourceThread.setPriority(Thread.MIN_PRIORITY);  sourceThread.start();}  }
class C{  public TextCacheKey(String text,Font font){  if (text == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (font == null) {    String message=Logging.getMessage("nullValue.FontIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.text=text;  this.font=font;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MDDOrder[").append(get_ID()).append("-").append(getDocumentNo()).append(",IsSOTrx=").append(isSOTrx()).append(",C_DocType_ID=").append(getC_DocType_ID()).append("]");  return sb.toString();}  }
class C{  public synchronized long position(java.sql.Blob pattern,long start) throws SQLException {  checkClosed();  return position(pattern.getBytes(0,(int)pattern.length()),start);}  }
class C{  private static void runCommand(List<String> command) throws Exception {  log.info(StringUtils.join(command," "));  if (PRINT_STD_OUT) {    Process process=new ProcessBuilder().inheritIO().command(command).start();    process.waitFor();  } else {    File tmpOutLog=File.createTempFile("tmp.out.",".log");    ProcessBuilder processBuilder=new ProcessBuilder(command);    processBuilder.redirectError(tmpOutLog);    processBuilder.redirectOutput(tmpOutLog);    Process process=processBuilder.start();    process.waitFor();    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(tmpOutLog)));    String line;    while ((line=br.readLine()) != null) {      log.debug(line);    }    IOUtils.closeQuietly(br);    FileUtils.deleteQuietly(tmpOutLog);  }}  }
class C{  public boolean hasMorePages(){  boolean result=false;  if (!hasTotalCount()) {    result=true;  } else {    if (skipResults + pageSize <= totalCount) {      result=true;    }  }  return result;}  }
class C{  public static void untagView(final AbstractSQLProvider provider,final INaviView view,final CTag tag) throws CouldntSaveDataException {  checkArguments(provider,view);  Preconditions.checkNotNull(tag,"IE00617: Tag argument can not be null");  Preconditions.checkArgument(tag.inSameDatabase(provider),"IE00618: Tag is not part of this database");  final String query=String.format("delete from %s where view_id = %d and tag_id = %d",CTableNames.TAGGED_VIEWS_TABLE,view.getConfiguration().getId(),tag.getId());  try {    provider.getConnection().executeUpdate(query,true);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  void reset(){  for (Enumeration e=defaultValues.keys(); e.hasMoreElements(); ) {    Object input=e.nextElement();    if (input instanceof TextArea) {      String defVal=(String)defaultValues.get(input);      if (defVal == null) {        defVal="";      }      ((TextArea)input).setText(defVal);    } else     if (input instanceof ComboBox) {      OptionItem defVal=(OptionItem)defaultValues.get(input);      ComboBox combo=((ComboBox)input);      if (defVal != null) {        combo.setSelectedItem(defVal);      } else       if (combo.size() > 0) {        combo.setSelectedIndex(0);      }    }  }  for (Enumeration e=defaultCheckedButtons.elements(); e.hasMoreElements(); ) {    Button b=(Button)e.nextElement();    if (!b.isSelected()) {      setButton(b,true);    }  }  for (Enumeration e=defaultUncheckedButtons.elements(); e.hasMoreElements(); ) {    Button b=(Button)e.nextElement();    if (b.isSelected()) {      setButton(b,false);    }  }}  }
class C{  public static void reduceOpenFiles(IndexWriter w){  MergePolicy mp=w.getConfig().getMergePolicy();  mp.setNoCFSRatio(1.0);  if (mp instanceof LogMergePolicy) {    LogMergePolicy lmp=(LogMergePolicy)mp;    lmp.setMergeFactor(Math.min(5,lmp.getMergeFactor()));  } else   if (mp instanceof TieredMergePolicy) {    TieredMergePolicy tmp=(TieredMergePolicy)mp;    tmp.setMaxMergeAtOnce(Math.min(5,tmp.getMaxMergeAtOnce()));    tmp.setSegmentsPerTier(Math.min(5,tmp.getSegmentsPerTier()));  }  MergeScheduler ms=w.getConfig().getMergeScheduler();  if (ms instanceof ConcurrentMergeScheduler) {    ((ConcurrentMergeScheduler)ms).setMaxMergesAndThreads(3,2);  }}  }
class C{  private void addToken(int tokenType,boolean link){  int so=zzStartRead + offsetShift;  super.addToken(zzBuffer,zzStartRead,zzMarkedPos - 1,tokenType,so,link);  zzStartRead=zzMarkedPos;}  }
class C{  protected static HeaderCard saveNewHeaderCard(String key,String comment,boolean isString){  try {    return new HeaderCard(key,null,comment,false,isString);  } catch (  HeaderCardException e) {    LOG.log(Level.SEVERE,"Impossible Exception for internal card creation:" + key,e);    throw new IllegalStateException(e);  }}  }
class C{  private ListTranslationMemoriesCommand(){}  }
class C{  public void writeMessageSetExtension(final int fieldNumber,final MessageLite value) throws IOException {  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_START_GROUP);  writeUInt32(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber);  writeMessage(WireFormat.MESSAGE_SET_MESSAGE,value);  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_END_GROUP);}  }
class C{  public static void generateListOfModules(StringBuilder builder){  Iterator<String> entryIterator=EXTENSIONS_FQN.iterator();  while (entryIterator.hasNext()) {    String ginModuleFQN=entryIterator.next();    String hasComma=entryIterator.hasNext() ? "," : "";    builder.append(GeneratorUtils.TAB + ginModuleFQN + ".class "+ hasComma+ "\n");  }}  }
class C{  private static int choosePrime(Random rnd){  return Primes.FIRST_PRIMES[rnd.nextInt(10)];}  }
class C{  public PropertyGetterDeclaration createPropertyGetterDeclaration(){  PropertyGetterDeclarationImpl propertyGetterDeclaration=new PropertyGetterDeclarationImpl();  return propertyGetterDeclaration;}  }
class C{  public AABB merge(AABB other){  minX=Math.min(minX,other.minX);  maxX=Math.max(maxX,other.maxX);  minY=Math.min(minY,other.minY);  maxY=Math.max(maxY,other.maxY);  minZ=Math.min(minZ,other.minZ);  maxZ=Math.max(maxZ,other.maxZ);  return this;}  }
class C{  public boolean isFirst(){  return isFirst;}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  @Override public int hashCode(){  return this.getMBeanName().hashCode();}  }
class C{  public EnumLiteral basicGetValue(){  return value;}  }
class C{  String validateSensorReference(String name){  Sensor s=null;  if (name != null) {    if (name.length() > 0) {      s=InstanceManager.getDefault(jmri.SensorManager.class).getByUserName(name);      if (s != null) {        return name;      }    }    s=InstanceManager.getDefault(jmri.SensorManager.class).getBySystemName(name);  }  if (s == null) {    messageInvalidActionItemName(name,"Sensor");    return null;  }  return name;}  }
class C{  public void startMonitoring(Context context,Handler target){  if (DBG)   Log.d(TAG,"startMonitoring: target: " + target);  mContext=context;  mCsHandler=target;  if (VDBG)   Log.d(TAG,"startMonitoring: mCsHandler: " + mCsHandler);  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  if (adapter != null) {    adapter.getProfileProxy(mContext,mProfileServiceListener,BluetoothProfile.PAN);  }  mBtdtHandler=new BtdtHandler(target.getLooper(),this);}  }
class C{  private void handleTriggerProcess(TriggerProcess process) throws IOException, WSDLException, ParserConfigurationException, ObjectNotFoundException {  final TriggerDefinition td=process.getTriggerDefinition();  final TriggerType type=td.getType();  String orgLocale="en";  Organization org=td.getOrganization();  if (org != null && org.getLocale() != null && org.getLocale().length() > 0) {    orgLocale=org.getLocale();  }  LocalizerFacade facade=new LocalizerFacade(localizer,orgLocale);switch (type) {case START_BILLING_RUN:    handleBillingNotification(process);  break;case ACTIVATE_SERVICE:handleActivateProduct(process,facade);break;case DEACTIVATE_SERVICE:handleDeactivateProduct(process,facade);break;case UNSUBSCRIBE_FROM_SERVICE:handleUnsubscribeFromProduct(process,facade);break;case UPGRADE_SUBSCRIPTION:handleUpgradeSubscription(process,facade);break;case MODIFY_SUBSCRIPTION:handleModifySubscription(process,facade);break;case ADD_REVOKE_USER:handleAddRevokeUser(process,facade);break;case SAVE_PAYMENT_CONFIGURATION:handleSavePaymentConfigurations(process,facade);break;case REGISTER_CUSTOMER_FOR_SUPPLIER:handleRegisterCustomer(process,facade);break;case SUBSCRIBE_TO_SERVICE:handleSubscribeToProduct(process,facade);break;case SUBSCRIPTION_CREATION:handleSubscriptionCreation(process,facade);break;case SUBSCRIPTION_MODIFICATION:handleSubscriptionModification(process,facade);break;case SUBSCRIPTION_TERMINATION:handleSubscriptionTermination(process,facade);break;case REGISTER_OWN_USER:handleRegisterOwnUser(process,facade);break;default :handleUnsupportedTriggerProcessType(process);break;}}  }
class C{  public static Angle rhumbAzimuth(LatLon p1,LatLon p2){  if (p1 == null || p2 == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat1=p1.getLatitude().radians;  double lon1=p1.getLongitude().radians;  double lat2=p2.getLatitude().radians;  double lon2=p2.getLongitude().radians;  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;  double dLon=lon2 - lon1;  double dPhi=Math.log(Math.tan(lat2 / 2.0 + Math.PI / 4.0) / Math.tan(lat1 / 2.0 + Math.PI / 4.0));  if (Math.abs(dLon) > Math.PI) {    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  }  double azimuthRadians=Math.atan2(dLon,dPhi);  return Double.isNaN(azimuthRadians) ? Angle.ZERO : Angle.fromRadians(azimuthRadians);}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public boolean alreadyCopied(FeatureStructure aFS){  return mFsMap.containsKey(aFS);}  }
class C{  protected long computeSVUID() throws IOException {  ByteArrayOutputStream bos;  DataOutputStream dos=null;  long svuid=0;  try {    bos=new ByteArrayOutputStream();    dos=new DataOutputStream(bos);    dos.writeUTF(name.replace('/','.'));    dos.writeInt(access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_INTERFACE| Opcodes.ACC_ABSTRACT));    Arrays.sort(interfaces);    for (int i=0; i < interfaces.length; i++) {      dos.writeUTF(interfaces[i].replace('/','.'));    }    writeItems(svuidFields,dos,false);    if (hasStaticInitializer) {      dos.writeUTF("<clinit>");      dos.writeInt(Opcodes.ACC_STATIC);      dos.writeUTF("()V");    }    writeItems(svuidConstructors,dos,true);    writeItems(svuidMethods,dos,true);    dos.flush();    byte[] hashBytes=computeSHAdigest(bos.toByteArray());    for (int i=Math.min(hashBytes.length,8) - 1; i >= 0; i--) {      svuid=(svuid << 8) | (hashBytes[i] & 0xFF);    }  }  finally {    if (dos != null) {      dos.close();    }  }  return svuid;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private Element marshalProperty(VCardProperty property,VCard vcard){  VCardPropertyScribe scribe=index.getPropertyScribe(property);  Element propertyElement;  if (property instanceof Xml) {    Xml xml=(Xml)property;    Document propertyDocument=xml.getValue();    if (propertyDocument == null) {      throw new SkipMeException();    }    propertyElement=propertyDocument.getDocumentElement();    propertyElement=(Element)document.importNode(propertyElement,true);  } else {    QName qname=scribe.getQName();    propertyElement=createElement(qname);    scribe.writeXml(property,propertyElement);  }  VCardParameters parameters=scribe.prepareParameters(property,targetVersion,vcard);  if (!parameters.isEmpty()) {    Element parametersElement=marshalParameters(parameters);    Node firstChild=propertyElement.getFirstChild();    propertyElement.insertBefore(parametersElement,firstChild);  }  return propertyElement;}  }
class C{  @Override public void updateRef(String columnLabel,Ref x) throws SQLException {  throw unsupported("ref");}  }
class C{  public void compileOrederByClause(int numOfChildren){  List list=new ArrayList();  for (int i=0; i < numOfChildren; i++) {    CompiledSortCriterion csc=(CompiledSortCriterion)this.stack.pop();    list.add(0,csc);  }  push(list);}  }
class C{  @Override public void paint(final PPaintContext ppc){  final Paint paint=getPaint();  if (paint != null) {    final Graphics2D g2=ppc.getGraphics();    final PBounds bounds=getUnionOfChildrenBounds(null);    if (fillBackground) {      g2.setPaint(backgroundColor);      g2.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding);    }    if (drawOutline) {      g2.setPaint(lineColor);      g2.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);    }  }}  }
class C{  private double sin(double angle){  while (angle >= 180.0d) {    angle-=180.0d;  }  double value=(angle / 180.0d * Math.PI);  return Math.sin(value);}  }
class C{  public static ItemStack mergeStacksBang(ItemStack a,ItemStack b){  if (a == null && b == null) {    return null;  } else   if (a == null && b != null) {    final ItemStack result=b.copy();    b.stackSize=0;    return result;  } else   if (a != null && b == null) {    return a;  } else {    if (a.isItemEqual(b)) {      final int newSize=MathHelper.clamp_int(a.stackSize + b.stackSize,0,a.getMaxStackSize());      b.stackSize-=newSize - a.stackSize;      a.stackSize=newSize;      return a;    }  }  return null;}  }
class C{  @Override public void onClick(View v){  hide();}  }
class C{  private Volume prepareVolume(VolumeType volType,Volume volume,long size,long thinVolumePreAllocationSize,Project project,VirtualArray vArray,VirtualPool vPool,URI storageSystemURI,URI storagePoolURI,String label,BlockConsistencyGroup consistencyGroup,VirtualPoolCapabilityValuesWrapper capabilities){  VolumeRecommendation volRecomendation=new VolumeRecommendation(volType,size,vPool,vArray.getId());  volRecomendation.addStorageSystem(storageSystemURI);  volRecomendation.addStoragePool(storagePoolURI);  volume=StorageScheduler.prepareVolume(_dbClient,volume,size,thinVolumePreAllocationSize,project,vArray,vPool,volRecomendation,label,consistencyGroup,capabilities);  StringSet protocols=new StringSet();  protocols.add(StorageProtocol.Block.FC.name());  volume.setProtocol(protocols);  _dbClient.updateObject(volume);  return volume;}  }
class C{  protected void nominationConfirmed(CandidatePair nominatedPair){  nominatedPair.nominate();  Component parentComponent=nominatedPair.getParentComponent();  IceMediaStream parentStream=parentComponent.getParentStream();  CheckList checkList=parentStream.getCheckList();  if (checkList.getState() == CheckListState.RUNNING)   checkList.handleNominationConfirmed(nominatedPair);  if (parentStream.allComponentsHaveSelected() && checkList.getState() == CheckListState.RUNNING) {    checkList.setState(CheckListState.COMPLETED);  }}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  private Id<Link> findClosestLink(TransitStopFacility stopFacility){  Link nearestLink=NetworkUtils.getNearestLink(this.network,stopFacility.getCoord());  if (nearestLink.getAllowedModes().contains(this.networkMode) && NetworkUtils.getEuclideanDistance(stopFacility.getCoord(),nearestLink.getCoord()) <= this.searchRadius) {    return nearestLink.getId();  } else {    nearestLink=null;    double currentRadius=this.searchRadius;    for (    Link potentialLink : this.network.getLinks().values()) {      if (potentialLink.getAllowedModes().contains(this.networkMode) && NetworkUtils.getEuclideanDistance(stopFacility.getCoord(),potentialLink.getCoord()) < currentRadius) {        currentRadius=NetworkUtils.getEuclideanDistance(stopFacility.getCoord(),potentialLink.getCoord());        nearestLink=potentialLink;      }    }    if (nearestLink != null) {      return nearestLink.getId();    } else {      return null;    }  }}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public static int copyStreamContent(InputStream inputStream,OutputStream outputStream) throws IOException {  final byte[] buffer=new byte[10 * 1024];  int count;  int total=0;  while ((count=inputStream.read(buffer)) > 0) {    outputStream.write(buffer,0,count);    total+=count;  }  return total;}  }
class C{  @Override public void updateTask(){  theMinion.getLookHelper().setLookPositionWithEntity(theMinion.master,10.0F,(float)theMinion.getVerticalFaceSpeed());  if (shouldFollowMaster()) {    if (--updateTicker <= 0) {      updateTicker=30;      if (!petPathfinder.tryMoveToEntityLiving(theMinion.master,followSpeed)) {        if (theMinion.getDistanceSqToEntity(theMinion.master) >= followRangeSq) {          int x=MathHelper.floor_double(theMinion.master.posX) - 2;          int z=MathHelper.floor_double(theMinion.master.posZ) - 2;          int y=MathHelper.floor_double(theMinion.master.getEntityBoundingBox().minY);          for (int xIter=0; xIter <= 4; ++xIter) {            for (int zIter=0; zIter <= 4; ++zIter) {              if ((xIter < 1 || zIter < 1 || xIter > 3 || zIter > 3) && theMinion.worldObj.getBlockState(new BlockPos(x + xIter,y - 1,z + zIter)).getBlock().isNormalCube() && !theMinion.worldObj.getBlockState(new BlockPos(x + xIter,y,z + zIter)).getBlock().isNormalCube()&& !theMinion.worldObj.getBlockState(new BlockPos(x + xIter,y + 1,z + zIter)).getBlock().isNormalCube()) {                theMinion.setLocationAndAngles((double)(x + xIter) + 0.5D,(double)y,(double)(z + zIter) + 0.5D,theMinion.rotationYaw,theMinion.rotationPitch);                petPathfinder.clearPathEntity();                return;              }            }          }        }      }    }  }}  }
class C{  public ICalReader(String str,ICalVersion defaultVersion){  this(new StringReader(str),defaultVersion);}  }
class C{  protected void sequence_RegularExpressionLiteral(ISerializationContext context,RegularExpressionLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.REGULAR_EXPRESSION_LITERAL__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.REGULAR_EXPRESSION_LITERAL__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getRegularExpressionLiteralAccess().getValueREGEX_LITERALParserRuleCall_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  private void displayCommitA(@Nullable Revision revision){  if (revision == null) {    view.setCommitADate("");    view.setCommitARevision("");  } else {    view.setCommitADate(dateTimeFormatter.getFormattedDate(revision.getCommitTime()));    view.setCommitARevision(revision.getId());  }}  }
class C{  private void entryUpdateInSynchPersistTypeForIOExceptionCase(Region region) throws Exception {  region.create("key1","value1");  UninterruptibleFileChannel oplogFileChannel=((LocalRegion)region).getDiskRegion().testHook_getChild().getFileChannel();  oplogFileChannel.close();  try {    region.put("key1","value2");    fail("Should have encountered DiskAccessException");  } catch (  DiskAccessException dae) {  }  ((LocalRegion)region).getDiskStore().waitForClose();  assertTrue(cache.isClosed());  region=null;}  }
class C{  public void debug(Throwable t,String s){  if (isEnabled(TraceSystem.DEBUG)) {    traceWriter.write(TraceSystem.DEBUG,s,t);  }}  }
class C{  public SwcLibrary buildLibrary(String libname,LinkerConfiguration linkerConfiguration,SwcMovie movie) throws IOException {  int version=linkerConfiguration.getCompatibilityVersion();  forceLibraryVersion1=version < MxmlConfiguration.VERSION_3_0;  versions.setMinimumVersion(linkerConfiguration.getMinimumSupportedVersionString());  ByteArrayOutputStream swfOut=new ByteArrayOutputStream();  TagEncoder encoder=linkerConfiguration.generateSizeReport() ? new TagEncoderReporter() : new TagEncoder();  new MovieEncoder(encoder).export(movie,true);  encoder.writeTo(swfOut);  generateSizeReport(linkerConfiguration,movie,encoder);  swfOut.flush();  byte[] swf=swfOut.toByteArray();  swfOut.close();  String libPath=libname + ".swf";  SwcLibrary lib=new SwcLibrary(this,libPath);  VirtualFile swfFile=new InMemoryFile(swf,libPath,MimeMappings.getMimeType(libPath),new Date().getTime());  archive.putFile(swfFile);  libraries.put(libPath,lib);  if (linkerConfiguration.getComputeDigest()) {    Digest digest=new Digest();    digest.setSigned(false);    digest.setType(Digest.SHA_256);    digest.computeDigest(swf);    lib.setDigest(digest);  }  initMetadata(lib,linkerConfiguration);  Set<String> externs=lib.getExterns();  externs.addAll(linkerConfiguration.getUnresolved());  Set<SwcLibrary> librariesProcessed=new HashSet<SwcLibrary>();  for (  CompilationUnit unit : movie.getExportedUnits()) {    Source unitSource=unit.getSource();    SwcDependencySet depset=new SwcDependencySet();    addDeps(depset,SwcDependencySet.INHERITANCE,unit.inheritance);    addDeps(depset,SwcDependencySet.SIGNATURE,unit.types);    addDeps(depset,SwcDependencySet.NAMESPACE,unit.namespaces);    addDeps(depset,SwcDependencySet.EXPRESSION,unit.expressions);    addExtraClassesDeps(depset,unit.extraClasses);    Set<String> scriptDefs=unit.topLevelDefinitions.getStringSet();    checkDefs(scriptDefs,unitSource.getName());    String sourceName=NameFormatter.nameFromSource(unitSource);    SwcScript newScript=lib.addScript(sourceName,scriptDefs,depset,unitSource.getLastModified(),unit.getSignatureChecksum());    newScript.setCompilationUnit(unit);    addIcons(unit,sourceName);    if (unitSource.isSwcScriptOwner() && !unitSource.isInternal() && !PreLink.isCompilationUnitExternal(unit,externs)) {      SwcScript script=(SwcScript)unitSource.getOwner();      SwcLibrary library=script.getLibrary();      if (!librariesProcessed.contains(library)) {        librariesProcessed.add(library);        lib.addMetadata(script.getLibrary().getMetadata());      }    }  }  return lib;}  }
class C{  protected String buildIDToken(OAuthAuthzReqMessageContext request) throws IdentityOAuth2Exception {  String issuer=OAuth2Util.getIDTokenIssuer();  long lifetimeInMillis=OAuthServerConfiguration.getInstance().getApplicationAccessTokenValidityPeriodInSeconds() * 1000;  long curTimeInMillis=Calendar.getInstance().getTimeInMillis();  String subject=request.getAuthorizationReqDTO().getUser().getAuthenticatedSubjectIdentifier();  if (!StringUtils.isNotBlank(subject)) {    subject=request.getAuthorizationReqDTO().getUser().getUserName();  }  JWTClaimsSet jwtClaimsSet=new JWTClaimsSet();  jwtClaimsSet.setIssuer(issuer);  jwtClaimsSet.setSubject(subject);  jwtClaimsSet.setAudience(Arrays.asList(request.getAuthorizationReqDTO().getConsumerKey()));  jwtClaimsSet.setClaim(Constants.AUTHORIZATION_PARTY,request.getAuthorizationReqDTO().getConsumerKey());  jwtClaimsSet.setExpirationTime(new Date(curTimeInMillis + lifetimeInMillis));  jwtClaimsSet.setIssueTime(new Date(curTimeInMillis));  addUserClaims(jwtClaimsSet,request.getAuthorizationReqDTO().getUser());  if (JWSAlgorithm.NONE.getName().equals(signatureAlgorithm.getName())) {    return new PlainJWT(jwtClaimsSet).serialize();  }  return signJWT(jwtClaimsSet,request);}  }
class C{  static public byte[] createDummyData(int size){  byte[] dummy=new byte[size];  Random r=new Random();  r.nextBytes(dummy);  return dummy;}  }
class C{  public static Object fromXml(InputStream input){  return xstream.fromXML(input);}  }
class C{  private void createXmlResult(File reportFile,String startTimestamp,long elapsedTime){  String endTime=getTimestamp();  mResults.setDuration(TimeUtil.formatElapsedTime(elapsedTime));  OutputStream stream=null;  try {    stream=createOutputResultStream(reportFile);    KXmlSerializer serializer=new KXmlSerializer();    serializer.setOutput(stream,"UTF-8");    serializer.startDocument("UTF-8",false);    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);    serializer.processingInstruction("xml-stylesheet type=\"text/xsl\"  " + "href=\"result.xsl\"");    serializeResultsDoc(serializer,startTimestamp,endTime);    serializer.endDocument();    String msg=String.format("XML test result file generated at %s. Passed %d, " + "Failed %d, Not Executed %d",mReportDir.getName(),mResults.countTests(CtsTestStatus.PASS),mResults.countTests(CtsTestStatus.FAIL),mResults.countTests(CtsTestStatus.NOT_EXECUTED));    logResult(msg);    logResult("Time: %s",TimeUtil.formatElapsedTime(elapsedTime));  } catch (  IOException e) {    Log.e(LOG_TAG,"Failed to generate report data");  } finally {    StreamUtil.closeStream(stream);  }}  }
class C{  public boolean isLoaded(){  try {    int ps=unsafe.pageSize();    int pageCount=pageCount(ps,capacityBytes_);    Method method=MappedByteBuffer.class.getDeclaredMethod("isLoaded0",long.class,long.class,int.class);    method.setAccessible(true);    return (boolean)method.invoke(dummyMbbInstance_,nativeRawStartAddress_,capacityBytes_,pageCount);  } catch (  Exception e) {    throw new RuntimeException(String.format("Encountered %s exception while loading",e.getClass()));  }}  }
class C{  public int binarySearchFromTo(double key,int from,int to){  return cern.colt.Sorting.binarySearchFromTo(this.elements,key,from,to);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean hasLabel(){  return getLabel() != null;}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  @Override public UploadObject copy(){  return new UploadObject(this);}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return RegionStatisticsResponse.create(dm,this.getSender(),this.getRegion(dm.getSystem()));}  }
class C{  public boolean isDefaultGroup(){  return defaultGroup;}  }
class C{  @Override public void run(){  amIActive=true;  int numFiles;  String fileName;  File file;  int progress=0;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numFiles=imageFiles.length;  if (numFiles < 1) {    showFeedback("At least one file must be specified.");    return;  }  try {    updateProgress("Deleting files:",0);    for (a=0; a < numFiles; a++) {      fileName=imageFiles[a];      file=new File(fileName);      if (file.exists()) {        file.delete();      }      if (fileName.toLowerCase().endsWith(".dep")) {        file=new File(fileName.replace(".dep",".tas"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".dep",".wstat"));        if (file.exists()) {          file.delete();        }      } else       if (fileName.toLowerCase().endsWith(".shp")) {        file=new File(fileName.replace(".shp",".shx"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".dbf"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".prj"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".sbn"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".sbx"));        if (file.exists()) {          file.delete();        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * a / (numFiles - 1));      updateProgress(progress);    }    showFeedback("Operation complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private String make2UriKey(URI uri1,URI uri2){  String part1="null";  String part2="null";  if (uri1 != null) {    part1=uri1.toString();  }  if (uri2 != null) {    part2=uri2.toString();  }  return part1 + "+" + part2;}  }
class C{  public Segment pop(){  Segment result=next != this ? next : null;  prev.next=next;  next.prev=prev;  next=null;  prev=null;  return result;}  }
class C{  private String formatDate(final Object date){  return DateFormatUtils.format(((Date)date).getTime(),"yyyy-MM-dd") + "T" + DateFormatUtils.format(((Date)date).getTime(),"HH:mm:ss")+ "Z";}  }
class C{  public static double sampleVariance(int size,double sum,double sumOfSquares){  double mean=sum / size;  return (sumOfSquares - mean * sum) / (size - 1);}  }
class C{  public final void removeRows(int[] selectedRows){  int[] cols=new int[tetradMatrix.columns()];  for (int i=0; i < tetradMatrix.columns(); i++) {    cols[i]=i;  }  int[] retainedRows=new int[tetradMatrix.rows() - selectedRows.length];  int i=-1;  for (int j=0; j < tetradMatrix.rows(); j++) {    if (Arrays.binarySearch(selectedRows,j) < 0) {      retainedRows[++i]=j;    }  }  tetradMatrix=tetradMatrix.getSelection(retainedRows,cols).copy();  selection=new HashSet<>();  knowledge=knowledge.copy();}  }
class C{  private int shrink0(){  EvictableEntry<K,V> entry=queue.poll();  if (entry == null)   return -1;  int size=0;  Node<EvictableEntry<K,V>> meta=entry.removeMeta();  if (meta != null) {    size=entry.size();    memSize.add(-size);    if (!entry.evict())     touch(entry);  }  return size;}  }
class C{  public ServiceConfigurationError(String msg){  super(msg);}  }
class C{  public List<ExportGroupRestRep> findContainingHost(URI hostId){  return search().byHost(hostId).run();}  }
class C{  public String lookupPrefix(String uri){  String foundPrefix=null;  Enumeration prefixes=m_namespaces.keys();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    String uri2=lookupNamespace(prefix);    if (uri2 != null && uri2.equals(uri)) {      foundPrefix=prefix;      break;    }  }  return foundPrefix;}  }
class C{  public Encoder withoutPadding(){  if (!doPadding)   return this;  return new Encoder(isURL,newline,linemax,false);}  }
class C{  public void increment(TestStatusCounter other){  for (int i=0; i < count.length; i++)   count[i]+=other.count[i];}  }
class C{  public void testBeanAsObject() throws Exception {  ObjectMapper m=new ObjectMapper();  m.enableDefaultTyping();  String str=m.writeValueAsString(new Object[]{new StringBean("abc")});  _verifySerializationAsMap(str);  Object ob=m.readValue(str,Object[].class);  assertNotNull(ob);  Object[] result=(Object[])ob;  assertNotNull(result[0]);  assertEquals(StringBean.class,result[0].getClass());  assertEquals("abc",((StringBean)result[0]).name);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.362 -0500",hash_original_method="1F62AD2938072A93E19EAFFCDA555D07",hash_generated_method="E522C6EE17CC779935F0D04DE1F1F350") public NamespaceSupport(){  reset();}  }
class C{  public synchronized int capacity(){  return elementData.length;}  }
class C{  private void raster(){  glEnable(GL_DEPTH_TEST);  glUseProgram(rasterProgram);  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));  glUniformMatrix4fv(projectionMatrixUniform,false,projMatrix.get(matrixBuffer));  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glClearColor(0,0,0,0);  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  glBindVertexArray(vaoScene);  glDrawArrays(GL_TRIANGLES,0,mesh.numVertices);  glBindVertexArray(0);  glBindFramebuffer(GL_FRAMEBUFFER,0);  glUseProgram(0);}  }
class C{  public TemplateVariable(String type,String[] values,int[] offsets){  this(type,type,values,offsets);}  }
class C{  @Deprecated public static <T>T var(Var<T> var,T value){  return var.value=value;}  }
class C{  public void clearMutations(){  mutations.clear();}  }
class C{  public static TypeUseLocation[] validLocationsForUncheckedCodeDefaults(){  return validUncheckedCodeDefaultLocations;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public final R visitPrimitive(AnnotatedPrimitiveType type,P p){  return defaultAction(type,p);}  }
class C{  public boolean isUseBetaFunctions(){  Object oo=get_Value(COLUMNNAME_IsUseBetaFunctions);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public synchronized void free() throws SQLException {  this.binaryData=null;  this.isClosed=true;}  }
class C{  private static String translateZoneName(final String zoneName){  if (zoneNameMappings.get(zoneName) != null) {    return zoneNameMappings.get(zoneName);  }  String result="";  final Pattern p=Pattern.compile("^(-?[\\d]|int)_(.+)$");  final Matcher m=p.matcher(zoneName);  int levelValue=-1;  if (m.matches()) {    final String level=m.group(1);    String remainder=m.group(2);    if ("int".equals(level)) {      return "inside a building in " + Grammar.makeUpperCaseWord(getInteriorName(zoneName));    } else     if (level.startsWith("-")) {      try {        levelValue=Integer.parseInt(level);      } catch (      final NumberFormatException e) {        levelValue=0;      }      if (levelValue < -2) {        result="deep below ground level at ";      } else {        result="below ground level at ";      }    } else     if (level.matches("^\\d")) {      try {        levelValue=Integer.parseInt(level);      } catch (      final NumberFormatException e) {        levelValue=0;      }      if (levelValue != 0) {        if (levelValue > 1) {          result="high above the ground level at ";        } else {          result="above the ground level at ";        }      }    }    final StringBuilder sb=new StringBuilder();    final String[] directions=new String[]{".+_n\\d?e\\d?($|_).*","north east ","_n\\d?e\\d?($|_)","_",".+_n\\d?w\\d?($|_).*","north west ","_n\\d?w\\d?($|_)","_",".+_s\\d?e\\d?($|_).*","south east ","_s\\d?e\\d?($|_)","_",".+_s\\d?w\\d?($|_).*","south west ","_s\\d?w\\d?($|_)","_",".+_n\\d?($|_).*","north ","_n\\d?($|_)","_",".+_s\\d?($|_).*","south ","_s\\d?($|_)","_",".+_w\\d?($|_).*","west ","_w\\d?($|_)","_",".+_e\\d?($|_).*","east ","_e\\d?($|_)","_"};    for (int i=0; i < directions.length; i+=4) {      if (remainder.matches(directions[i])) {        sb.append(directions[i + 1]);        remainder=remainder.replaceAll(directions[i + 2],directions[i + 3]);      }    }    String direction=sb.toString();    if (direction.length() > 0) {      result+=direction + "of ";    } else     if (levelValue == 0) {      result=" in ";    }    result+=Grammar.makeUpperCaseWord(remainder.replaceAll("_"," "));  } else {    logger.warn("no match: " + zoneName);  }  if ("".equals(result)) {    return zoneName;  } else {    return result.trim();  }}  }
class C{  public static DigestEntry empty(){  return new DigestEntry("","");}  }
class C{  public void close(){  parser.close();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ERROR_CODE:    return isSetErrorCode();case STRUCT_THING:  return isSetStruct_thing();}throw new IllegalStateException();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return VERSIONS;default :return null;}}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public VertexPartition(Graph<V,E> g,Map<V,Set<V>> partition_map,Collection<Set<V>> vertex_sets){  this.vertex_partition_map=Collections.unmodifiableMap(partition_map);  this.vertex_sets=vertex_sets;  this.graph=g;}  }
class C{  public static void clear(){  CurrentTimeTest.clear();}  }
class C{  public int purge(){synchronized (impl) {    return impl.purge();  }}  }
class C{  public MessageBuilder withContent(String content,Styles styles){  this.content=styles.getMarkdown() + content + styles.getReverseMarkdown();  return this;}  }
class C{  public boolean isFresh(){  return (m_next == 0);}  }
class C{  public void invalidateAll(){  if (m_tuples == null)   return;  for (int i=0; i < m_tuples.length; ++i)   invalidate(i);}  }
class C{  public final boolean isSynchronized(){  return Modifier.isSynchronized(getModifiers());}  }
class C{  void addEntry(int hash,long key,VALUE value,int bucketIndex){  table[bucketIndex]=new LongEntry<>(hash,key,value,table[bucketIndex]);  if (size++ >= threshold)   resize(2 * table.length);}  }
class C{  public boolean isOrientationAligned(){  if (deviceOrientation == Configuration.ORIENTATION_LANDSCAPE) {    return isLandscape();  } else   if (deviceOrientation == Configuration.ORIENTATION_PORTRAIT) {    return isPortrait();  }  return true;}  }
class C{  public static void suppressLogsForTesting(boolean suppress){  sSuppressForTesting=suppress;}  }
class C{  public static boolean isPreloadable(LoadedClass clazz){  return clazz.systemClass && !EXCLUDED_CLASSES.contains(clazz.name);}  }
class C{  public Map<String,?> offset(){  return offsetUsingPosition(nextBinlogPosition);}  }
class C{  public static void registerStaticAttributeKey(Object key){  String ioFmt=key.getClass().getName() + "." + key.toString();  if (freezeKeyMap == null) {    freezeKeyMap=new Hashtable<Object,String>();    thawKeyMap=new Hashtable<String,Object>();  }  freezeKeyMap.put(key,ioFmt);  thawKeyMap.put(ioFmt,key);}  }
class C{  public void checkBlocksizeB(final int value){  if (value > blocksize_B) {    this.blocksize_B=value;  }  this.countB++;}  }
class C{  @Ignore @Test public void testFoolGreedyAlgorithm() throws Exception {  PartitionedRegionLoadModel model=new PartitionedRegionLoadModel(bucketOperator,1,50,getAddressComparor(false),Collections.<InternalDistributedMember>emptySet(),null);  InternalDistributedMember member1=new InternalDistributedMember(InetAddress.getByName("127.0.0.1"),1);  InternalDistributedMember member2=new InternalDistributedMember(InetAddress.getByName("127.0.0.1"),2);  InternalDistributedMember member3=new InternalDistributedMember(InetAddress.getByName("127.0.0.1"),3);  PartitionMemberInfoImpl details1=buildDetails(member1,500,500,new long[]{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},new long[]{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});  PartitionMemberInfoImpl details2=buildDetails(member2,500,500,new long[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},new long[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1});  PartitionMemberInfoImpl details3=buildDetails(member3,500,500,new long[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},new long[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});  model.addRegion("a",Arrays.asList(details1,details2,details3),new FakeOfflineDetails(),true);  doMoves(new CompositeDirector(true,true,false,false),model);  for (  PartitionMemberInfo details : model.getPartitionedMemberDetails("a")) {    assertEquals(20,details.getBucketCount());  }}  }
class C{  public CubeHash256(){}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  ConcurrentSkipListSet(ConcurrentNavigableMap<E,Object> m){  this.m=m;}  }
class C{  public static byte[] toBytes(final boolean b){  return new byte[]{b ? (byte)-1 : (byte)0};}  }
class C{  public void store(@Nonnull final String username,@Nonnull final String cursorName,final long value){  Objects.requireNonNull(username);  Preconditions.checkArgument(!username.isEmpty(),"username cannot be empty");  Objects.requireNonNull(cursorName);  Preconditions.checkArgument(!cursorName.isEmpty(),"cursorName cannot be empty");  final String key=getCursorKey(username,cursorName);  final CursorUpdate update=new CursorUpdate(key,value);  final Location location=new Location(NAMESPACE,key);  final UpdateValue updateValue=new UpdateValue.Builder(location).withUpdate(update).withStoreOption(StoreValue.Option.RETURN_BODY,false).build();  LOGGER.debug("Updating key ({}) to value (async): {}",location,value);  try (Timer.Context context=storeTimer.time()){    client.executeAsync(updateValue);  } }  }
class C{  public void addIssue(int reason,EObject obj,int featureId,String detail){  issues.add(new TransformationIssue(reason,obj,featureId,detail));}  }
class C{  public GeneralName(DerValue encName,boolean nameConstraint) throws IOException {  short tag=(byte)(encName.tag & 0x1f);switch (tag) {case GeneralNameInterface.NAME_ANY:    if (encName.isContextSpecific() && encName.isConstructed()) {      encName.resetTag(DerValue.tag_Sequence);      name=new OtherName(encName);    } else {      throw new IOException("Invalid encoding of Other-Name");    }  break;case GeneralNameInterface.NAME_RFC822:if (encName.isContextSpecific() && !encName.isConstructed()) {  encName.resetTag(DerValue.tag_IA5String);  name=new RFC822Name(encName);} else {  throw new IOException("Invalid encoding of RFC822 name");}break;case GeneralNameInterface.NAME_DNS:if (encName.isContextSpecific() && !encName.isConstructed()) {encName.resetTag(DerValue.tag_IA5String);name=new DNSName(encName);} else {throw new IOException("Invalid encoding of DNS name");}break;case GeneralNameInterface.NAME_URI:if (encName.isContextSpecific() && !encName.isConstructed()) {encName.resetTag(DerValue.tag_IA5String);name=(nameConstraint ? URIName.nameConstraint(encName) : new URIName(encName));} else {throw new IOException("Invalid encoding of URI");}break;case GeneralNameInterface.NAME_IP:if (encName.isContextSpecific() && !encName.isConstructed()) {encName.resetTag(DerValue.tag_OctetString);name=new IPAddressName(encName);} else {throw new IOException("Invalid encoding of IP address");}break;case GeneralNameInterface.NAME_OID:if (encName.isContextSpecific() && !encName.isConstructed()) {encName.resetTag(DerValue.tag_ObjectId);name=new OIDName(encName);} else {throw new IOException("Invalid encoding of OID name");}break;case GeneralNameInterface.NAME_DIRECTORY:if (encName.isContextSpecific() && encName.isConstructed()) {name=new X500Name(encName.getData());} else {throw new IOException("Invalid encoding of Directory name");}break;case GeneralNameInterface.NAME_EDI:if (encName.isContextSpecific() && encName.isConstructed()) {encName.resetTag(DerValue.tag_Sequence);name=new EDIPartyName(encName);} else {throw new IOException("Invalid encoding of EDI name");}break;default :throw new IOException("Unrecognized GeneralName tag, (" + tag + ")");}}  }
class C{  public CsvWriter createCsvWriter(Writer writer){  return createCsvWriter(new BufferedWriter(writer));}  }
class C{  public void clearHosts(){  this.portToMac.clear();}  }
class C{  @SuppressWarnings("unchecked") public Stack<Integer> readEmptyPages(RandomAccessFile file) throws IOException, ClassNotFoundException {  if (emptyPagesSize == 0) {    return new Stack<>();  }  byte[] bytes=new byte[emptyPagesSize];  file.seek(file.length() - emptyPagesSize);  file.read(bytes);  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);  ObjectInputStream ois=new ObjectInputStream(bais);  Stack<Integer> emptyPages=(Stack<Integer>)ois.readObject();  ois.close();  bais.close();  return emptyPages;}  }
class C{  public static DiagnosticPosition diagnosticPositionFor(final Symbol sym,final JCTree tree){  JCTree decl=declarationFor(sym,tree);  return ((decl != null) ? decl : tree).pos();}  }
class C{  public static MethodNoExceptionCoverageTestFitness createMethodTestFitness(String className,String method){  return new MethodNoExceptionCoverageTestFitness(className,method.substring(method.lastIndexOf(".") + 1));}  }
class C{  @Ignore @Test(timeout=10000) public void testEntityExpansionNoSecureProcessing() throws Exception {  QueryResultCollector handler=new QueryResultCollector();  ParseErrorCollector errorCollector=new ParseErrorCollector();  QueryResultParser aParser=QueryResultIO.createTupleParser(TupleQueryResultFormat.SPARQL).setQueryResultHandler(handler).set(XMLParserSettings.SECURE_PROCESSING,false).setParseErrorListener(errorCollector);  try {    aParser.parseQueryResult(this.getClass().getResourceAsStream("/sparqlxml/bad-entity-expansion-limit.srx"));    fail("Parser did not throw an exception");  } catch (  QueryResultParseException e) {  }  assertEquals(0,errorCollector.getWarnings().size());  assertEquals(0,errorCollector.getErrors().size());  assertEquals(1,errorCollector.getFatalErrors().size());}  }
class C{  public void startScanNode(SiteNode node){  Target target=new Target(node);  target.setRecurse(true);  this.startScan(target,null,null);}  }
class C{  private void encryptBlock(byte[] in,int inOff,byte[] out,int outOff){  X3=bytesToWord(in,inOff);  X2=bytesToWord(in,inOff + 4);  X1=bytesToWord(in,inOff + 8);  X0=bytesToWord(in,inOff + 12);  sb0(wKey[0] ^ X0,wKey[1] ^ X1,wKey[2] ^ X2,wKey[3] ^ X3);  LT();  sb1(wKey[4] ^ X0,wKey[5] ^ X1,wKey[6] ^ X2,wKey[7] ^ X3);  LT();  sb2(wKey[8] ^ X0,wKey[9] ^ X1,wKey[10] ^ X2,wKey[11] ^ X3);  LT();  sb3(wKey[12] ^ X0,wKey[13] ^ X1,wKey[14] ^ X2,wKey[15] ^ X3);  LT();  sb4(wKey[16] ^ X0,wKey[17] ^ X1,wKey[18] ^ X2,wKey[19] ^ X3);  LT();  sb5(wKey[20] ^ X0,wKey[21] ^ X1,wKey[22] ^ X2,wKey[23] ^ X3);  LT();  sb6(wKey[24] ^ X0,wKey[25] ^ X1,wKey[26] ^ X2,wKey[27] ^ X3);  LT();  sb7(wKey[28] ^ X0,wKey[29] ^ X1,wKey[30] ^ X2,wKey[31] ^ X3);  LT();  sb0(wKey[32] ^ X0,wKey[33] ^ X1,wKey[34] ^ X2,wKey[35] ^ X3);  LT();  sb1(wKey[36] ^ X0,wKey[37] ^ X1,wKey[38] ^ X2,wKey[39] ^ X3);  LT();  sb2(wKey[40] ^ X0,wKey[41] ^ X1,wKey[42] ^ X2,wKey[43] ^ X3);  LT();  sb3(wKey[44] ^ X0,wKey[45] ^ X1,wKey[46] ^ X2,wKey[47] ^ X3);  LT();  sb4(wKey[48] ^ X0,wKey[49] ^ X1,wKey[50] ^ X2,wKey[51] ^ X3);  LT();  sb5(wKey[52] ^ X0,wKey[53] ^ X1,wKey[54] ^ X2,wKey[55] ^ X3);  LT();  sb6(wKey[56] ^ X0,wKey[57] ^ X1,wKey[58] ^ X2,wKey[59] ^ X3);  LT();  sb7(wKey[60] ^ X0,wKey[61] ^ X1,wKey[62] ^ X2,wKey[63] ^ X3);  LT();  sb0(wKey[64] ^ X0,wKey[65] ^ X1,wKey[66] ^ X2,wKey[67] ^ X3);  LT();  sb1(wKey[68] ^ X0,wKey[69] ^ X1,wKey[70] ^ X2,wKey[71] ^ X3);  LT();  sb2(wKey[72] ^ X0,wKey[73] ^ X1,wKey[74] ^ X2,wKey[75] ^ X3);  LT();  sb3(wKey[76] ^ X0,wKey[77] ^ X1,wKey[78] ^ X2,wKey[79] ^ X3);  LT();  sb4(wKey[80] ^ X0,wKey[81] ^ X1,wKey[82] ^ X2,wKey[83] ^ X3);  LT();  sb5(wKey[84] ^ X0,wKey[85] ^ X1,wKey[86] ^ X2,wKey[87] ^ X3);  LT();  sb6(wKey[88] ^ X0,wKey[89] ^ X1,wKey[90] ^ X2,wKey[91] ^ X3);  LT();  sb7(wKey[92] ^ X0,wKey[93] ^ X1,wKey[94] ^ X2,wKey[95] ^ X3);  LT();  sb0(wKey[96] ^ X0,wKey[97] ^ X1,wKey[98] ^ X2,wKey[99] ^ X3);  LT();  sb1(wKey[100] ^ X0,wKey[101] ^ X1,wKey[102] ^ X2,wKey[103] ^ X3);  LT();  sb2(wKey[104] ^ X0,wKey[105] ^ X1,wKey[106] ^ X2,wKey[107] ^ X3);  LT();  sb3(wKey[108] ^ X0,wKey[109] ^ X1,wKey[110] ^ X2,wKey[111] ^ X3);  LT();  sb4(wKey[112] ^ X0,wKey[113] ^ X1,wKey[114] ^ X2,wKey[115] ^ X3);  LT();  sb5(wKey[116] ^ X0,wKey[117] ^ X1,wKey[118] ^ X2,wKey[119] ^ X3);  LT();  sb6(wKey[120] ^ X0,wKey[121] ^ X1,wKey[122] ^ X2,wKey[123] ^ X3);  LT();  sb7(wKey[124] ^ X0,wKey[125] ^ X1,wKey[126] ^ X2,wKey[127] ^ X3);  wordToBytes(wKey[131] ^ X3,out,outOff);  wordToBytes(wKey[130] ^ X2,out,outOff + 4);  wordToBytes(wKey[129] ^ X1,out,outOff + 8);  wordToBytes(wKey[128] ^ X0,out,outOff + 12);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public String toString(){  String string=getClass().getName();  string+="[" + paramString() + "]";  return string;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return ERROR;case 3:return TYPE;default :return null;}}  }
class C{  public DTMException(short code,String message){  super(code,message);}  }
class C{  public boolean isMethod(){  MemberType _memberType=this.getMemberType();  return Objects.equal(_memberType,MemberType.METHOD);}  }
class C{  static <T>ListIterator<T> cast(Iterator<T> iterator){  return (ListIterator<T>)iterator;}  }
class C{  public void put(String key,InputStream stream){  put(key,stream,null);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void removeDatasources(){  dsDefs.clear();}  }
class C{  public File downloadConfigDir(SolrZkClient zkClient,String configName,File dir) throws IOException, InterruptedException, KeeperException {  Preconditions.checkArgument(dir.exists());  Preconditions.checkArgument(dir.isDirectory());  ZkController.downloadConfigDir(zkClient,configName,dir);  File confDir=new File(dir,"conf");  if (!confDir.isDirectory()) {    confDir=new File(Files.createTempDir().getAbsolutePath(),"conf");    confDir.getParentFile().deleteOnExit();    Files.move(dir,confDir);    dir=confDir.getParentFile();  }  verifyConfigDir(confDir);  return dir;}  }
class C{  private void checkPruneData(SQLiteDatabase db){  db.execSQL("PRAGMA foreign_keys = ON;");  Cursor c=db.query(FREQ_TABLE_NAME,new String[]{FREQ_COLUMN_PAIR_ID},null,null,null,null,null);  try {    int totalRowCount=c.getCount();    if (totalRowCount > sMaxUserBigrams) {      int numDeleteRows=(totalRowCount - sMaxUserBigrams) + sDeleteUserBigrams;      int pairIdColumnId=c.getColumnIndex(FREQ_COLUMN_PAIR_ID);      c.moveToFirst();      int count=0;      while (count < numDeleteRows && !c.isAfterLast()) {        String pairId=c.getString(pairIdColumnId);        db.delete(MAIN_TABLE_NAME,MAIN_COLUMN_ID + "=?",new String[]{pairId});        c.moveToNext();        count++;      }    }  }  finally {    c.close();  }}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public boolean visitVariableRef(ExpressionOwner owner,Variable var){  m_isAbs=false;  return true;}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  public void start(){  if (!mRunning) {    mTriggerPercentage=0;    mStartTime=AnimationUtils.currentAnimationTimeMillis();    mRunning=true;    mParent.postInvalidate();  }}  }
class C{  public static Class<?> toClass(String className){  try {    return (Class.forName(className,true,Thread.currentThread().getContextClassLoader()));  } catch (  ClassNotFoundException e) {    try {      return Class.forName(className);    } catch (    Exception ignore) {      ignore=null;    }    throw new IllegalStateException(e);  }}  }
class C{  public static int lookupSymbol(String text){  return lookup(text,SYMBOL);}  }
class C{  public MixedRadixNumber(long value,List<Integer> radices){  this.value=value;  this.radices=new int[radices.size()];  for (int i=0; i < radices.size(); i++) {    this.radices[i]=radices.get(i);  }  calculateMaxValue();}  }
class C{  public ElementType(String name,int model,int memberOf,int flags,Schema schema){  theName=name;  theModel=model;  theMemberOf=memberOf;  theFlags=flags;  theAtts=new AttributesImpl();  theSchema=schema;  theNamespace=namespace(name,false);  theLocalName=localName(name);}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("Transition[").append(isGap() ? "Gap" : "Overlap").append(" at ").append(transition).append(offsetBefore).append(" to ").append(offsetAfter).append(']');  return buf.toString();}  }
class C{  @Override public void addHelpItems(JMenu m,Application app,@Nullable View v){}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newElement;  String newElementName;  int newElementType;  String newElementValue;  doc=(Document)load("hc_staff",true);  newElement=doc.createElement("acronym");  newElementName=newElement.getNodeName();  assertEqualsAutoCase("element","strong","acronym",newElementName);  newElementType=(int)newElement.getNodeType();  assertEquals("type",1,newElementType);  newElementValue=newElement.getNodeValue();  assertNull("valueInitiallyNull",newElementValue);}  }
class C{  synchronized SQLException interceptException(SQLException sqlEx,Connection conn,String groupName,String hostname,String portNumber) throws FabricCommunicationException {  if ((sqlEx.getSQLState() == null || !sqlEx.getSQLState().startsWith("08")) && !MySQLNonTransientConnectionException.class.isAssignableFrom(sqlEx.getClass()) && (JDBC4_NON_TRANSIENT_CONN_EXCEPTION == null || !JDBC4_NON_TRANSIENT_CONN_EXCEPTION.isAssignableFrom(sqlEx.getClass())) || sqlEx.getCause() != null && FabricCommunicationException.class.isAssignableFrom(sqlEx.getCause().getClass())) {    return null;  }  Server currentServer=this.serverGroup.getServer(hostname + ":" + portNumber);  if (currentServer == null) {    return null;  }  if (this.reportErrors) {    this.fabricConnection.getClient().reportServerError(currentServer,sqlEx.toString(),true);  }  if (replConnGroupLocks.add(this.serverGroup.getName())) {    try {      try {        this.fabricConnection.refreshStatePassive();        setCurrentServerGroup(this.serverGroup.getName());      } catch (      SQLException ex) {        return SQLError.createSQLException("Unable to refresh Fabric state. Failover impossible",SQLError.SQL_STATE_CONNECTION_FAILURE,ex,null);      }      try {        syncGroupServersToReplicationConnectionGroup(ReplicationConnectionGroupManager.getConnectionGroup(groupName));      } catch (      SQLException ex) {        return ex;      }    }  finally {      replConnGroupLocks.remove(this.serverGroup.getName());    }  } else {    return SQLError.createSQLException("Fabric state syncing already in progress in another thread.",SQLError.SQL_STATE_CONNECTION_FAILURE,sqlEx,null);  }  return null;}  }
class C{  @Override public Object annotationButton(final FormObject form){  final int subtype=form.getParameterConstant(PdfDictionary.Subtype);  if (subtype == PdfDictionary.Popup) {    return createAnnotationPopup(form);  }  if (!form.isAppearanceUsed()) {switch (subtype) {case PdfDictionary.Text:      return createAnnotationText(form);case PdfDictionary.FreeText:    return createAnnotationFreeText(form);case PdfDictionary.Highlight:  return createAnntoationHighlight(form);case PdfDictionary.Underline:return createAnnotationUnderline(form);case PdfDictionary.Ink:return createAnnotationInk(form);case PdfDictionary.StrickOut:return createAnnotationStrikeOut(form);}}return setupAnnotationButton(form);}  }
class C{  public static double info(int counts[]){  int total=0;  double x=0;  for (  int count : counts) {    x-=xlogx(count);    total+=count;  }  return x + xlogx(total);}  }
class C{  public void checkSchemaAdmin(){  if (!hasRight(null,Right.ALTER_ANY_SCHEMA)) {    throw DbException.get(ErrorCode.ADMIN_RIGHTS_REQUIRED);  }}  }
class C{  public static void sort(long[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  sort1(a,fromIndex,toIndex - fromIndex);}  }
class C{  public static void applyDecidedIconOrSetGone(ImageHolder imageHolder,ImageView imageView,int iconColor,boolean tint,int paddingDp){  if (imageHolder != null && imageView != null) {    Drawable drawable=ImageHolder.decideIcon(imageHolder,imageView.getContext(),iconColor,tint,paddingDp);    if (drawable != null) {      imageView.setImageDrawable(drawable);      imageView.setVisibility(View.VISIBLE);    } else     if (imageHolder.getBitmap() != null) {      imageView.setImageBitmap(imageHolder.getBitmap());      imageView.setVisibility(View.VISIBLE);    } else {      imageView.setVisibility(View.GONE);    }  } else   if (imageView != null) {    imageView.setVisibility(View.GONE);  }}  }
class C{  public static List<Long> STLESDTest(GeoTimeSerie gts,int buckets_per_period,int k,double alpha,Map<String,Object> params) throws WarpScriptException {  doubleCheck(gts);  List<Long> anomalous_ticks=new ArrayList<Long>();  if (!GTSHelper.isBucketized(gts)) {    throw new WarpScriptException("GTS must be bucketized");  }  if (null == params) {    params=new HashMap<String,Object>();  }  if (null != params.get(PERIOD_PARAM)) {    if (buckets_per_period != (int)params.get(PERIOD_PARAM)) {      throw new WarpScriptException("Incoherence between PERIOD parameter of test and PERIOD parameter of STL");    }  } else {    params.put(PERIOD_PARAM,buckets_per_period);  }  params.put(BANDWIDTH_S_PARAM,Math.min(gts.bucketcount,7));  params.put(PRECISION_PARAM,10);  params.put(ROBUSTNESS_PARAM,0);  List<GeoTimeSerie> stl_output=(List<GeoTimeSerie>)new STL("STL").doGtsOp(params,gts);  GeoTimeSerie seasonal=stl_output.get(0);  GeoTimeSerie trend=stl_output.get(1);  GeoTimeSerie remainder=seasonal;  int idx=0;  for (int i=0; i < gts.values; i++) {    idx=Arrays.binarySearch(seasonal.ticks,idx,seasonal.values,gts.ticks[i]);    if (idx < 0) {      throw new WarpScriptException("Internal bug method STLESDTest");    } else {      remainder.doubleValues[i]=gts.doubleValues[idx] - (seasonal.doubleValues[idx] + trend.doubleValues[idx]);    }  }  remainder.values=gts.values;  remainder.bucketcount=gts.bucketcount;  remainder.bucketspan=gts.bucketspan;  remainder.lastbucket=gts.lastbucket;  anomalous_ticks.addAll(ESDTest(remainder,k,true,alpha));  return anomalous_ticks;}  }
class C{  public Element insertBefore(NewElement newElement){  checkNotRemoved();  notPermittedOnRootElement();  requireNonNull(newElement,"Required not null new element");  if (previousElementNode(delegate) != null) {    getPreviousSibling().insertAfter(newElement);    return this;  }  final Node newNode=createNode(newElement);  final Element element=createElement(newNode);  delegate.getParentNode().insertBefore(newNode,delegate);  xmlTree.insertAfterParent(newElement,element,getParent());  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.798 -0500",hash_original_method="95CFCAABC583EA802C704015EAFBF308",hash_generated_method="4715350B322F100A8EEAF52C45524B48") public boolean isReplace(){  Log.w(LOG_TAG,"isReplace: is not supported in CDMA mode.");  return false;}  }
class C{  public static void putAt(DefaultTableModel self,int index,Object row){  if (row == null) {    self.insertRow(index,(Object[])null);    return;  }  self.insertRow(index,buildRowData(self,row));}  }
class C{  protected void rehash(final int newN){  final long key[]=this.key;  final long value[]=this.value;  final int mask=newN - 1;  final long newKey[]=new long[newN + 1];  final long newValue[]=new long[newN + 1];  int i=n, pos;  for (int j=realSize(); j-- != 0; ) {    while (((key[--i]) == (0)))     ;    if (!((newKey[pos=(int)it.unimi.dsi.fastutil.HashCommon.mix((key[i])) & mask]) == (0)))     while (!((newKey[pos=(pos + 1) & mask]) == (0)))     ;    newKey[pos]=key[i];    newValue[pos]=value[i];  }  newValue[newN]=value[n];  n=newN;  this.mask=mask;  maxFill=maxFill(n,f);  this.key=newKey;  this.value=newValue;}  }
class C{  public static String chompLast(String str){  return chompLast(str,"\n");}  }
class C{  public void testProcessMsg6(){  byte[] pdu=createPDU(1);  int headerLen=pdu.length - (mGsmHeader.length + mUserDataHeader.length + mMessageBody.length);  int pduType=6;  int tranId=0;  String originalPackageName=mPackageName;  String originalClassName=mClassName;  try {    mClassName="com.android.smspush.unitTests.NoReceiver";    IWapPushManager iwapman=getInterface();    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,WapPushManagerParams.APP_TYPE_ACTIVITY,false,false);    assertFalse((iwapman.processMessage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),createIntent(pduType,tranId)) & WapPushManagerParams.MESSAGE_HANDLED) == WapPushManagerParams.MESSAGE_HANDLED);    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,WapPushManagerParams.APP_TYPE_SERVICE,false,false);    assertFalse((iwapman.processMessage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),createIntent(pduType,tranId)) & WapPushManagerParams.MESSAGE_HANDLED) == WapPushManagerParams.MESSAGE_HANDLED);    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);  } catch (  RemoteException e) {    assertTrue(false);  }  mPackageName=originalPackageName;  mClassName=originalClassName;}  }
class C{  public MockVerifiableEntity(final Deserializer deserializer){  this(DeserializationOptions.VERIFIABLE,deserializer);}  }
class C{  public static char[] ensureCapacity(final char[] array,final int length){  if (length > array.length) {    final char t[]=new char[length];    System.arraycopy(array,0,t,0,array.length);    return t;  }  return array;}  }
class C{  protected int _rowOffset(int absRank){  return absRank;}  }
class C{  public RsFluent withBody(final byte[] body){  return new RsFluent(new RsWithBody(this,body));}  }
class C{  public static short[][][] convertArray(byte[][][] in){  short[][][] out=new short[in.length][in[0].length][in[0][0].length];  for (int i=0; i < in.length; i++) {    for (int j=0; j < in[0].length; j++) {      for (int k=0; k < in[0][0].length; k++) {        out[i][j][k]=(short)(in[i][j][k] & GF2Field.MASK);      }    }  }  return out;}  }
class C{  @Override public String toString(){  return "stack: " + list.toString();}  }
class C{  public static short toShortFromNibbles(byte[] nibbles,int start){  return toShort(nibbles[start],nibbles[start + 1],nibbles[start + 2],nibbles[start + 3]);}  }
class C{  public T caseArrayElement(ArrayElement object){  return null;}  }
class C{  @TargetApi(Build.VERSION_CODES.M) public boolean isOnNeverAskAgain(String permission){  return (!mActivity.shouldShowRequestPermissionRationale(permission));}  }
class C{  private PostgreSQLInstructionFunctions(){}  }
class C{  public void crossValidateModel(String classifierString,Instances data,int numFolds,String[] options,Random random) throws Exception {  m_delegate.crossValidateModel(classifierString,data,numFolds,options,random);}  }
class C{  public Tasks<VolumeRestRep> changeVirtualPool(VolumeVirtualPoolChangeParam input){  return postTasks(input,baseUrl + "/vpool-change");}  }
class C{  private FieldType findForeignFieldType(Class<?> clazz,Class<?> foreignClass,BaseDaoImpl<?,?> foreignDao) throws SQLException {  String foreignColumnName=fieldConfig.getForeignCollectionForeignFieldName();  for (  FieldType fieldType : foreignDao.getTableInfo().getFieldTypes()) {    if (fieldType.getType() == foreignClass && (foreignColumnName == null || fieldType.getField().getName().equals(foreignColumnName))) {      if (!fieldType.fieldConfig.isForeign() && !fieldType.fieldConfig.isForeignAutoRefresh()) {        throw new SQLException("Foreign collection object " + clazz + " for field '"+ field.getName()+ "' contains a field of class "+ foreignClass+ " but it's not foreign");      }      return fieldType;    }  }  StringBuilder sb=new StringBuilder();  sb.append("Foreign collection class ").append(clazz.getName());  sb.append(" for field '").append(field.getName()).append("' column-name does not contain a foreign field");  if (foreignColumnName != null) {    sb.append(" named '").append(foreignColumnName).append('\'');  }  sb.append(" of class ").append(foreignClass.getName());  throw new SQLException(sb.toString());}  }
class C{  public void addHandler(String target,AsynchronousCallback handler){  handlers.put(target,handler);}  }
class C{  public SafeAsyncTask(Handler handler){  this.handler=handler;  this.executor=DEFAULT_EXECUTOR;}  }
class C{  public static RelativeLayout.LayoutParams createRelativeLayoutParamsWM(){  return new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.MATCH_PARENT);}  }
class C{  public static AdUnit run(AdSenseHost service,String accountId,String adClientId,String adUnitId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Updating ad unit %s\n",adUnitId);  System.out.println("=================================================================");  AdUnit patchAdUnit=new AdUnit().setCustomStyle(new AdStyle().setColors(new Colors().setText("ff0000")));  AdUnit adUnit=service.accounts().adunits().patch(accountId,adClientId,adUnitId,patchAdUnit).execute();  System.out.printf("Ad unit with ID \"%s\" was updated with text color \"%s\".\n",adUnit.getId(),adUnit.getCustomStyle().getColors().getText());  System.out.println();  return adUnit;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public GroupInfo(GroupDescription.Basic a){  uuid=a.getGroupUUID();  name=a.getName();  url=a.getUrl();  if (a instanceof GroupDescription.Internal) {    AccountGroup group=((GroupDescription.Internal)a).getAccountGroup();    description=group.getDescription();  }}  }
class C{  static void writeRule(ZoneOffsetTransitionRule rule,DataOutput out) throws IOException {  int month=rule.month;  byte dom=rule.dom;  int dow=rule.dow;  LocalTime time=rule.time;  boolean timeEndOfDay=rule.timeEndOfDay;  TimeDefinition timeDefinition=rule.timeDefinition;  ZoneOffset standardOffset=rule.standardOffset;  ZoneOffset offsetBefore=rule.offsetBefore;  ZoneOffset offsetAfter=rule.offsetAfter;  int timeSecs=(timeEndOfDay ? 86400 : time.toSecondOfDay());  int stdOffset=standardOffset.getTotalSeconds();  int beforeDiff=offsetBefore.getTotalSeconds() - stdOffset;  int afterDiff=offsetAfter.getTotalSeconds() - stdOffset;  int timeByte=(timeSecs % 3600 == 0 ? (timeEndOfDay ? 24 : time.getHour()) : 31);  int stdOffsetByte=(stdOffset % 900 == 0 ? stdOffset / 900 + 128 : 255);  int beforeByte=(beforeDiff == 0 || beforeDiff == 1800 || beforeDiff == 3600 ? beforeDiff / 1800 : 3);  int afterByte=(afterDiff == 0 || afterDiff == 1800 || afterDiff == 3600 ? afterDiff / 1800 : 3);  int dowByte=(dow == -1 ? 0 : dow);  int b=(month << 28) + ((dom + 32) << 22) + (dowByte << 19)+ (timeByte << 14)+ (timeDefinition.ordinal() << 12)+ (stdOffsetByte << 4)+ (beforeByte << 2)+ afterByte;  out.writeInt(b);  if (timeByte == 31) {    out.writeInt(timeSecs);  }  if (stdOffsetByte == 255) {    out.writeInt(stdOffset);  }  if (beforeByte == 3) {    out.writeInt(offsetBefore.getTotalSeconds());  }  if (afterByte == 3) {    out.writeInt(offsetAfter.getTotalSeconds());  }}  }
class C{  public Source<T> describedAs(AsString<T> asString){  return new Source<>(this.prngToValue,this.shrink,asString);}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  private boolean linkAlreadyExists(final String location,final WorkItem linkingWorkItem){  for (  final Link existingLink : linkingWorkItem.getLinks()) {    if (existingLink.getLinkType().getName().equals(RegisteredLinkTypeNames.STORYBOARD)) {      final ArtifactID existingArtifactID=((ExternalLink)existingLink).getArtifactID();      if (existingArtifactID.getToolSpecificID().equalsIgnoreCase(location)) {        return true;      }    }  }  return false;}  }
class C{  public void addAllTracks(Collection<SoundCloudTrack> tracks){  mTracks.addAll(tracks);}  }
class C{  public void addToGlobalBlacklist(String host,long timeout){  if (isGlobalBlacklistEnabled()) {synchronized (globalBlacklist) {      globalBlacklist.put(host,timeout);    }  }}  }
class C{  public String nextParameterName(String base,List<String> usedNames){  if (this.graph.getNode(base) != null) {    throw new IllegalArgumentException(base + " is a variable name.");  }  int i=0;  int subscript=0;  if (parameterSubscript.containsKey(base)) {    subscript=parameterSubscript.get(base);  }  subscript++;  parameterSubscript.put(base,subscript);  return base + subscript;}  }
class C{  private void handleMotionEventStateTouchExploring(MotionEvent event,MotionEvent rawEvent,int policyFlags){  ReceivedPointerTracker receivedTracker=mReceivedPointerTracker;  final int activePointerCount=receivedTracker.getActivePointerCount();  mVelocityTracker.addMovement(rawEvent);  mDoubleTapDetector.onMotionEvent(event,policyFlags);switch (event.getActionMasked()) {case MotionEvent.ACTION_DOWN:    mAms.onTouchInteractionStart();  handleMotionEventGestureDetecting(rawEvent,policyFlags);case MotionEvent.ACTION_POINTER_DOWN:{switch (activePointerCount) {case 0:{      throw new IllegalStateException("The must always be one active pointer in" + "touch exploring state!");    }case 1:{    if (mSendHoverEnterDelayed.isPending()) {      mSendHoverEnterDelayed.remove();      mSendHoverExitDelayed.remove();    }    if (mSendTouchExplorationEndDelayed.isPending()) {      mSendTouchExplorationEndDelayed.forceSendAndRemove();    }    if (mSendTouchInteractionEndDelayed.isPending()) {      mSendTouchInteractionEndDelayed.forceSendAndRemove();    }    if (event.getPointerCount() == 1) {      sendAccessibilityEvent(AccessibilityEvent.TYPE_TOUCH_INTERACTION_START);    }    mPerformLongPressDelayed.remove();    if (mDoubleTapDetector.firstTapDetected()) {      mPerformLongPressDelayed.post(event,policyFlags);      break;    }    if (!mTouchExplorationInProgress) {      final int pointerId=receivedTracker.getPrimaryActivePointerId();      final int pointerIdBits=(1 << pointerId);      mSendHoverEnterDelayed.post(event,true,pointerIdBits,policyFlags);    }  }break;default :{}break;}}break;case MotionEvent.ACTION_MOVE:{final int pointerId=receivedTracker.getPrimaryActivePointerId();final int pointerIndex=event.findPointerIndex(pointerId);final int pointerIdBits=(1 << pointerId);switch (activePointerCount) {case 0:{}break;case 1:{if (mSendHoverEnterDelayed.isPending()) {handleMotionEventGestureDetecting(rawEvent,policyFlags);final float deltaX=receivedTracker.getReceivedPointerDownX(pointerId) - rawEvent.getX(pointerIndex);final float deltaY=receivedTracker.getReceivedPointerDownY(pointerId) - rawEvent.getY(pointerIndex);final double moveDelta=Math.hypot(deltaX,deltaY);if (moveDelta > mDoubleTapSlop) {mVelocityTracker.computeCurrentVelocity(1000);final float maxAbsVelocity=Math.max(Math.abs(mVelocityTracker.getXVelocity(pointerId)),Math.abs(mVelocityTracker.getYVelocity(pointerId)));if (maxAbsVelocity > mScaledGestureDetectionVelocity) {mCurrentState=STATE_GESTURE_DETECTING;mVelocityTracker.clear();mSendHoverEnterDelayed.remove();mSendHoverExitDelayed.remove();mPerformLongPressDelayed.remove();mExitGestureDetectionModeDelayed.post();sendAccessibilityEvent(AccessibilityEvent.TYPE_GESTURE_DETECTION_START);} else {mSendHoverEnterDelayed.forceSendAndRemove();mSendHoverExitDelayed.remove();mPerformLongPressDelayed.remove();sendMotionEvent(event,MotionEvent.ACTION_HOVER_MOVE,pointerIdBits,policyFlags);}break;}} else {if (mPerformLongPressDelayed.isPending()) {final float deltaX=receivedTracker.getReceivedPointerDownX(pointerId) - rawEvent.getX(pointerIndex);final float deltaY=receivedTracker.getReceivedPointerDownY(pointerId) - rawEvent.getY(pointerIndex);final double moveDelta=Math.hypot(deltaX,deltaY);if (moveDelta > mTouchSlop) {mPerformLongPressDelayed.remove();}}if (mDoubleTapDetector.firstTapDetected()) {break;}sendTouchExplorationGestureStartAndHoverEnterIfNeeded(policyFlags);sendMotionEvent(event,MotionEvent.ACTION_HOVER_MOVE,pointerIdBits,policyFlags);}}break;case 2:{if (mSendHoverEnterDelayed.isPending()) {mSendHoverEnterDelayed.remove();mSendHoverExitDelayed.remove();mPerformLongPressDelayed.remove();} else {mPerformLongPressDelayed.remove();final float deltaX=receivedTracker.getReceivedPointerDownX(pointerId) - rawEvent.getX(pointerIndex);final float deltaY=receivedTracker.getReceivedPointerDownY(pointerId) - rawEvent.getY(pointerIndex);final double moveDelta=Math.hypot(deltaX,deltaY);if (moveDelta < mDoubleTapSlop) {break;}sendHoverExitAndTouchExplorationGestureEndIfNeeded(policyFlags);}mStrokeBuffer.clear();if (isDraggingGesture(event)) {mCurrentState=STATE_DRAGGING;mDraggingPointerId=pointerId;event.setEdgeFlags(receivedTracker.getLastReceivedDownEdgeFlags());sendMotionEvent(event,MotionEvent.ACTION_DOWN,pointerIdBits,policyFlags);} else {mCurrentState=STATE_DELEGATING;sendDownForAllActiveNotInjectedPointers(event,policyFlags);}mVelocityTracker.clear();}break;default :{if (mSendHoverEnterDelayed.isPending()) {mSendHoverEnterDelayed.remove();mSendHoverExitDelayed.remove();mPerformLongPressDelayed.remove();} else {mPerformLongPressDelayed.remove();sendHoverExitAndTouchExplorationGestureEndIfNeeded(policyFlags);}mCurrentState=STATE_DELEGATING;sendDownForAllActiveNotInjectedPointers(event,policyFlags);mVelocityTracker.clear();}}}break;case MotionEvent.ACTION_UP:mAms.onTouchInteractionEnd();mStrokeBuffer.clear();case MotionEvent.ACTION_POINTER_UP:{final int pointerId=receivedTracker.getLastReceivedUpPointerId();final int pointerIdBits=(1 << pointerId);switch (activePointerCount) {case 0:{if (!receivedTracker.wasLastReceivedUpPointerActive()) {break;}mPerformLongPressDelayed.remove();if (mSendHoverEnterDelayed.isPending()) {mSendHoverExitDelayed.post(event,false,pointerIdBits,policyFlags);} else {sendHoverExitAndTouchExplorationGestureEndIfNeeded(policyFlags);}if (!mSendTouchInteractionEndDelayed.isPending()) {mSendTouchInteractionEndDelayed.post();}}break;}mVelocityTracker.clear();}break;case MotionEvent.ACTION_CANCEL:{clear(event,policyFlags);}break;}}  }
class C{  Set<Version> useVersions(String plugin,Set<Version> present){  if (present.size() == 1) {    if (resolvable.containsKey(plugin)) {      throw new IllegalArgumentException("Expected " + resolvable.get(plugin).accepts + " for '"+ plugin+ "', but had only "+ present);    } else {      return present;    }  } else   if (present.isEmpty()) {    throw new IllegalArgumentException("No such plugin: " + plugin);  } else {    Resolve mapping=resolvable.get(plugin);    if (mapping == null) {      throw new IllegalArgumentException("Conflicting versions for '" + plugin + "'!  Had "+ present+ ", call resolve(name, existingVersions).with(versionsToKeep)");    } else {      if (mapping.accepts.equals(present)) {        return mapping.takes;      } else {        throw new IllegalArgumentException("Conflicts don't match for '" + plugin + "'!  Suggested resolution was "+ mapping.accepts+ ", but available was "+ present);      }    }  }}  }
class C{  public MyHashSet(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  public boolean ignore_wrong_staticness(){  return soot.PhaseOptions.getBoolean(options,"ignore-wrong-staticness");}  }
class C{  public boolean isWriteable(){  return true;}  }
class C{  public Builder<K,V> valueType(DataType valueType){  this.valueType=valueType;  return this;}  }
class C{  public Vector4f(){  this.points[0]=0;  this.points[1]=0;  this.points[2]=0;  this.points[3]=0;}  }
class C{  public StringIdItem intern(CstString string){  return intern(new StringIdItem(string));}  }
class C{  private WifiAdmin(){}  }
class C{  protected int computeScrollDeltaToGetChildRectOnScreenX(Rect rect){  int width=getWidth();  int screenLeft=getScrollX();  int screenRight=screenLeft + width;  int fadingEdge=getHorizontalFadingEdgeLength();  if (rect.left > 0) {    screenLeft+=fadingEdge;  }  if (rect.right < getChildAt(0).getWidth()) {    screenRight-=fadingEdge;  }  int scrollXDelta=0;  if (localLOGV)   Log.v(TAG,"child=" + rect.toString() + " screenLeft="+ screenLeft+ " screenRight="+ screenRight+ " width="+ width);  if (rect.right > screenRight && rect.left > screenLeft) {    if (rect.width() > width) {      scrollXDelta+=(rect.left - screenLeft);    } else {      scrollXDelta+=(rect.right - screenRight);    }    int right=getChildAt(getChildCount() - 1).getRight();    int distanceToRight=right - screenRight;    if (localLOGV)     Log.v(TAG,"scrollXDelta=" + scrollXDelta + " distanceToRight="+ distanceToRight);    scrollXDelta=Math.min(scrollXDelta,distanceToRight);  } else   if (rect.left < screenLeft && rect.right < screenRight) {    if (rect.width() > width) {      scrollXDelta-=(screenRight - rect.right);    } else {      scrollXDelta-=(screenLeft - rect.left);    }    scrollXDelta=Math.max(scrollXDelta,-getScrollX());  }  return scrollXDelta;}  }
class C{  @Override protected Map<String,Object> readData(String[] properties,CellProcessor[] processors){  Map<String,Object> fieldValueMapping=null;  try {    fieldValueMapping=csvReader.read(properties,processors);  } catch (  IOException ex) {    DTThrowable.rethrow(ex);  }  return fieldValueMapping;}  }
class C{  final BlockLeaf copy(){  BlockLeaf block=new BlockLeaf(getId(),_buffer);  block._blobTail=_blobTail;  block._rowHead=_rowHead;  block._rowSortHead=_rowSortHead;  block._keyMinSort=_keyMinSort;  block._keyMaxSort=_keyMaxSort;  return block;}  }
class C{  public ActionFactory(DiagnosticTool frame,Controller controller){  super();  this.frame=frame;  this.controller=controller;  initialize();  controller.addControllerListener(this);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has(AMOUNT)) {    final int oldAmount=amount;    amount=changes.getInt(AMOUNT);    if (amount > oldAmount) {      playRandomSoundFromCategory(SoundLayer.AMBIENT_SOUND.groupName,"food");    }    fireChange(PROP_AMOUNT);  }}  }
class C{  public void addListener(final IOperandExpressionListener listener){  m_listeners.addListener(listener);}  }
class C{  public static TreeMaker instance(Context context){  TreeMaker instance=context.get(treeMakerKey);  if (instance == null)   instance=new TreeMaker(context);  return instance;}  }
class C{  public static void register(ActivityListener activityListener,Context context){  if (!(context instanceof ListenableActivity) && context instanceof ContextWrapper) {    context=((ContextWrapper)context).getBaseContext();  }  if (context instanceof ListenableActivity) {    ListenableActivity listenableActivity=(ListenableActivity)context;    Listener listener=new Listener(activityListener);    listenableActivity.addActivityListener(listener);  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  Object a=s.readFields().get("array",null);  if ((a == null) || !a.getClass().isArray()) {    throw new java.io.InvalidObjectException("Not array type");  }  if (a.getClass() != Object[].class) {    a=Arrays.copyOf((Object[])a,Array.getLength(a),Object[].class);  }  unsafe.putObjectVolatile(this,arrayFieldOffset,a);}  }
class C{  synchronized public void apply(final RDFParser p){  p.setDatatypeHandling(datatypeHandling);  p.setPreserveBNodeIDs(preserveBNodeIDs);  p.setStopAtFirstError(stopAtFirstError);  p.setVerifyData(verifyData);}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  public QDate(boolean isLocal){  this(isLocal ? _localTimeZone : _gmtTimeZone);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (derivedFeatureID) {case TypesPackage.PARAMETER__NAME:      return BasePackage.NAMED_ELEMENT__NAME;default :    return -1;}}if (baseClass == AnnotatableElement.class) {switch (derivedFeatureID) {case TypesPackage.PARAMETER__ANNOTATIONS:  return TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public PhoneNumberValidator(@NonNull final CharSequence errorMessage){  super(errorMessage,REGEX);}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public static void checkForType(final EvolutionState state,GPNode toBchecked,String type){  if (type.equalsIgnoreCase("L")) {    if (!(toBchecked instanceof LNode)) {      state.output.fatal("Not a LNode",null,null);    }  } else   if (type.equalsIgnoreCase("P")) {    if (!(toBchecked instanceof PNode)) {      state.output.fatal("Not a PNode",null,null);    }  } else   if (type.equalsIgnoreCase("I")) {    if (!(toBchecked instanceof IndexNode)) {      state.output.fatal("Not a IndexNode",null,null);    }  } else {    state.output.fatal("checkForType() called with wrong param: type must be either L/P/I",null,null);  }}  }
class C{  @SideOnly(Side.CLIENT) public void addSpecialItemTooltip(int xPos,int yPos,ItemStack stack,ArrayList<String> toolTips){  if (mouseX >= xPos && mouseY >= yPos && mouseX <= xPos + 16 && mouseY <= yPos + 16) {    if (stack != null) {      List<String> tooltipData=stack.getTooltip(Minecraft.getMinecraft().thePlayer,false);      List<String> parsedTooltip=new ArrayList();      boolean first=true;      for (      String tip : toolTips)       tooltipData.add(tip);      for (      String s : tooltipData) {        String s_=s;        if (!first)         s_=ChatFormatting.GRAY + s;        parsedTooltip.add(s_);        first=false;      }      renderTooltip(mouseX,mouseY,parsedTooltip,0xffffff,0xf0100010);    }  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x76D1363B,version=150,checkInsideInterrupt=true) public int sceHttpSaveSystemCookie(){  checkHttpInit();  if (!isSystemCookieLoaded) {    return SceKernelErrors.ERROR_HTTP_SYSTEM_COOKIE_NOT_LOADED;  }  return 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public IComment editComment(final IComment comment,final String commentText) throws CouldntSaveDataException {  IComment editedComment=null;  try {    editedComment=m_node.editLocalFunctionComment(comment,commentText);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }  for (  final IFunctionNodeListener listener : m_listeners) {    try {      listener.editedComment(this,editedComment);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  return editedComment;}  }
class C{  public void createMainGUI(Player player){  if (timeAuthorisedList(player)) {    Inventory guiInv=Bukkit.createInventory(null,getClosestGreaterMultipleOf9(AdvancedAchievements.MULTIPLE_ACHIEVEMENTS.length + AdvancedAchievements.NORMAL_ACHIEVEMENTS.length - plugin.getDisabledCategorySet().size()),ChatColor.translateAlternateColorCodes('&',plugin.getPluginLang().getString("list-gui-title","&5&lAchievements List")));    boolean hasReceivedInCategory=true;    int numberOfCategories=0;    YamlManager config=plugin.getPluginConfig();    for (int i=0; i < AdvancedAchievements.MULTIPLE_ACHIEVEMENTS.length; i++) {      if (multipleAchievementCategoryNames[i].length() != 0) {        String category=AdvancedAchievements.MULTIPLE_ACHIEVEMENTS[i];        if (plugin.getDisabledCategorySet().contains(category)) {          continue;        }        if (hideNotReceivedCategories) {          hasReceivedInCategory=false;          for (          String section : config.getConfigurationSection(category).getKeys(false)) {            for (            String ach : config.getConfigurationSection(category + '.' + section).getKeys(false)) {              if (plugin.getDb().hasPlayerAchievement(player,config.getString(category + '.' + section+ '.'+ ach+ ".Name",""))) {                hasReceivedInCategory=true;                break;              }            }            if (hasReceivedInCategory)             break;          }        }        ItemStack categoryItem;        ItemMeta categoryMeta;        if (hasReceivedInCategory || !hideNotReceivedCategories) {          categoryItem=multipleAchievementCategoryItems[i];          categoryMeta=categoryItem.getItemMeta();          categoryMeta.setDisplayName(ChatColor.translateAlternateColorCodes('&',"&8" + config.getString("ListAchievementFormat","%ICON% %NAME% %ICON%").replaceAll("%ICON%",plugin.getIcon()).replaceAll("%NAME%",multipleAchievementCategoryNames[i])));        } else {          categoryItem=new ItemStack(Material.BARRIER);          categoryMeta=categoryItem.getItemMeta();          categoryMeta.setDisplayName(ChatColor.translateAlternateColorCodes('&',"&8" + plugin.getPluginLang().getString("list-category-not-unlocked","You have not yet unlocked this category.")));        }        categoryItem.setItemMeta(categoryMeta);        guiInv.setItem(numberOfCategories,categoryItem);        numberOfCategories++;      }    }    for (int i=0; i < AdvancedAchievements.NORMAL_ACHIEVEMENTS.length; i++) {      if (normalAchievementCategoryNames[i].length() != 0) {        String category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[i];        if (plugin.getDisabledCategorySet().contains(category)) {          continue;        }        if (hideNotReceivedCategories) {          hasReceivedInCategory=false;          for (          String ach : config.getConfigurationSection(category).getKeys(false)) {            if (plugin.getDb().hasPlayerAchievement(player,config.getString(category + '.' + ach+ ".Name",""))) {              hasReceivedInCategory=true;              break;            }          }        }        ItemStack categoryItem;        ItemMeta categoryMeta;        if (hasReceivedInCategory || !hideNotReceivedCategories) {          categoryItem=normalAchievementCategoryItems[i];          categoryMeta=categoryItem.getItemMeta();          categoryMeta.setDisplayName(ChatColor.translateAlternateColorCodes('&',"&8" + config.getString("ListAchievementFormat","%ICON% %NAME% %ICON%").replaceAll("%ICON%",plugin.getIcon()).replaceAll("%NAME%",normalAchievementCategoryNames[i])));        } else {          categoryItem=new ItemStack(Material.BARRIER);          categoryMeta=categoryItem.getItemMeta();          categoryMeta.setDisplayName(ChatColor.translateAlternateColorCodes('&',"&8" + plugin.getPluginLang().getString("list-category-not-unlocked","You have not yet unlocked this category.")));        }        categoryItem.setItemMeta(categoryMeta);        guiInv.setItem(numberOfCategories,categoryItem);        numberOfCategories++;      }    }    player.openInventory(guiInv);  } else {    player.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("list-delay","You must wait TIME seconds between each list command!").replace("TIME",Integer.toString(listTime / 1000)));  }}  }
class C{  protected int addCascadedRow(int prow){  int r=m_rows.addRow();  ((CascadedRowManager)m_rows).put(r,prow);  updateRowCount();  fireTableEvent(r,r,TableModelEvent.ALL_COLUMNS,TableModelEvent.INSERT);  return r;}  }
class C{  SelfIteratorNoPredicate(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);}  }
class C{  public CircuitBreakerBuilder counterUpdateInterval(Duration counterUpdateInterval){  requireNonNull(counterUpdateInterval,"counterUpdateInterval");  if (counterUpdateInterval.isNegative() || counterUpdateInterval.isZero()) {    throw new IllegalArgumentException("counterUpdateInterval: " + counterUpdateInterval + " (expected: > 0)");  }  this.counterUpdateInterval=counterUpdateInterval;  return this;}  }
class C{  public static void shuffle(List<?> list){  shuffle(list,new java.util.Random());}  }
class C{  public Hierarchy(){  this.sc=Scene.v();  state=sc.getState();{    Chain allClasses=sc.getClasses();    classToSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);    interfaceToSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);    classToDirSubclasses=new HashMap<SootClass,List>(allClasses.size() * 2 + 1,0.7f);    interfaceToDirSubinterfaces=new HashMap<SootClass,List>(allClasses.size() * 2 + 1,0.7f);    interfaceToDirImplementers=new HashMap<SootClass,List>(allClasses.size() * 2 + 1,0.7f);    Iterator classesIt=allClasses.iterator();    while (classesIt.hasNext()) {      SootClass c=(SootClass)classesIt.next();      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;      if (c.isInterface()) {        interfaceToDirSubinterfaces.put(c,new ArrayList());        interfaceToDirImplementers.put(c,new ArrayList());      } else       classToDirSubclasses.put(c,new ArrayList());    }    classesIt=allClasses.iterator();    while (classesIt.hasNext()) {      SootClass c=(SootClass)classesIt.next();      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;      if (c.hasSuperclass()) {        if (c.isInterface()) {          Iterator subIt=c.getInterfaces().iterator();          while (subIt.hasNext()) {            SootClass i=(SootClass)subIt.next();            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;            List<SootClass> l=interfaceToDirSubinterfaces.get(i);            if (l != null)             l.add(c);          }        } else {          List<SootClass> l=classToDirSubclasses.get(c.getSuperclass());          l.add(c);          Iterator subIt=c.getInterfaces().iterator();          while (subIt.hasNext()) {            SootClass i=(SootClass)subIt.next();            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;            l=interfaceToDirImplementers.get(i);            if (l != null)             l.add(c);          }        }      }    }{      classesIt=allClasses.iterator();      while (classesIt.hasNext()) {        SootClass c=(SootClass)classesIt.next();        if (c.resolvingLevel() < SootClass.HIERARCHY)         continue;        if (c.isInterface()) {          List<SootClass> imp=interfaceToDirImplementers.get(c);          Set<SootClass> s=new ArraySet();          Iterator<SootClass> impIt=imp.iterator();          while (impIt.hasNext()) {            SootClass c0=impIt.next();            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;            s.addAll(getSubclassesOfIncluding(c0));          }          imp.clear();          imp.addAll(s);        }      }    }    classesIt=allClasses.iterator();    while (classesIt.hasNext()) {      SootClass c=(SootClass)classesIt.next();      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;      if (c.isInterface()) {        interfaceToDirSubinterfaces.put(c,Collections.unmodifiableList(interfaceToDirSubinterfaces.get(c)));        interfaceToDirImplementers.put(c,Collections.unmodifiableList(interfaceToDirImplementers.get(c)));      } else       classToDirSubclasses.put(c,Collections.unmodifiableList(classToDirSubclasses.get(c)));    }  }}  }
class C{  @Nullable public static File findInPath(@NotNull String fileBaseName,@Nullable FileFilter filter){  return findInPath(fileBaseName,false,filter);}  }
class C{  public ClasspathEntry(int contentKind,int entryKind,IPath path,IPath[] inclusionPatterns,IPath[] exclusionPatterns,IPath sourceAttachmentPath,IPath sourceAttachmentRootPath,IPath specificOutputLocation,IClasspathEntry referencingEntry,boolean isExported,IAccessRule[] accessRules,boolean combineAccessRules,IClasspathAttribute[] extraAttributes){  this.contentKind=contentKind;  this.entryKind=entryKind;  this.path=path;  this.inclusionPatterns=inclusionPatterns;  this.exclusionPatterns=exclusionPatterns;  this.referencingEntry=referencingEntry;  int length;  if (accessRules != null && (length=accessRules.length) > 0) {    AccessRule[] rules=new AccessRule[length];    System.arraycopy(accessRules,0,rules,0,length);    byte classpathEntryType;    String classpathEntryName;    JavaModelManager manager=JavaModelManager.getJavaModelManager();    if (this.entryKind == IClasspathEntry.CPE_PROJECT || this.entryKind == IClasspathEntry.CPE_SOURCE) {      classpathEntryType=AccessRestriction.PROJECT;      classpathEntryName=manager.intern(getPath().segment(0));    } else {      classpathEntryType=AccessRestriction.LIBRARY;      classpathEntryName=manager.intern(path.toOSString());    }    this.accessRuleSet=new AccessRuleSet(rules,classpathEntryType,classpathEntryName);  }  this.combineAccessRules=combineAccessRules;  this.extraAttributes=extraAttributes;  if (inclusionPatterns != INCLUDE_ALL && inclusionPatterns.length > 0) {    this.fullInclusionPatternChars=UNINIT_PATTERNS;  }  if (exclusionPatterns.length > 0) {    this.fullExclusionPatternChars=UNINIT_PATTERNS;  }  this.sourceAttachmentPath=sourceAttachmentPath;  this.sourceAttachmentRootPath=sourceAttachmentRootPath;  this.specificOutputLocation=specificOutputLocation;  this.isExported=isExported;}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  buf.append(WARC_VERSION);  buf.append(CR_LF);  for (  Map.Entry<String,String> field : fields.entrySet()) {    buf.append(field.getKey());    buf.append(": ");    buf.append(field.getValue());    buf.append(CR_LF);  }  return buf.toString();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UMLAL");  translateAll(environment,instruction,"UMLAL",instructions);}  }
class C{  public static Page read(PageDataIndex index,Data data,int pageId){  PageDataNode p=new PageDataNode(index,pageId,data);  p.read();  return p;}  }
class C{  static void write(SocketChannel chan,byte[] data,int length,int timeout) throws TimeoutException, IOException {  ByteBuffer buf=ByteBuffer.wrap(data,0,length != -1 ? length : data.length);  int numWaits=0;  while (buf.position() != buf.limit()) {    int count;    count=chan.write(buf);    if (count < 0) {      Log.d("ddms","write: channel EOF");      throw new IOException("channel EOF");    } else     if (count == 0) {      if (timeout != 0 && numWaits * WAIT_TIME > timeout) {        Log.d("ddms","write: timeout");        throw new TimeoutException();      }      try {        Thread.sleep(WAIT_TIME);      } catch (      InterruptedException ie) {        Thread.currentThread().interrupt();        throw new TimeoutException("Write interrupted with immediate timeout via interruption.");      }      numWaits++;    } else {      numWaits=0;    }  }}  }
class C{  private static boolean isHeadless(){  return GraphicsEnvironment.isHeadless();}  }
class C{  public IdGenerator(String prefix){synchronized (UNIQUE_STUB) {    this.seed=prefix + UNIQUE_STUB + (instanceCount++)+ ":";    this.length=this.seed.length() + ("" + Long.MAX_VALUE).length();  }}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public boolean isVoteExctnConf(){  return voteExctnConf;}  }
class C{  public void txContextReset(){  mvccMgr.contextReset();}  }
class C{  public void saveImageOnInternalStorage(String paymentProductId,Drawable image){  if (paymentProductId == null) {    throw new InvalidParameterException("Error saving drawable in cache, paymentProductId may not be null");  }  if (image == null) {    throw new InvalidParameterException("Error saving drawable in cache, image may not be null");  }  fileWriter.storeLogoOnInternalStorage(paymentProductId,image);}  }
class C{  int[] decodeEnd(BitArray row) throws NotFoundException {  row.reverse();  try {    int endStart=skipWhiteSpace(row);    int[] endPattern=findGuardPattern(row,endStart,END_PATTERN_REVERSED);    validateQuietZone(row,endPattern[0]);    int temp=endPattern[0];    endPattern[0]=row.getSize() - endPattern[1];    endPattern[1]=row.getSize() - temp;    return endPattern;  }  finally {    row.reverse();  }}  }
class C{  public void validateResponse(String idpResponse,String requestId,String tenantID) throws DigitalSignatureValidationException, AssertionValidationException, ParserConfigurationException, SAXException, IOException {  VerifierConfiguration config=new VerifierConfiguration(requestId,acsUrl,acsUrlHttps,Calendar.getInstance(),tenantID);  verifier=new AssertionContentVerifier(config);  Document document=XMLConverter.convertToDocument(idpResponse,true);  List<Element> assertions=XMLConverter.getElementsByTagNameNS(document,AssertionType.XMLNS,SamlXmlTags.NODE_ASSERTION);  for (  Element assertion : assertions) {    validateDigitalSignature(assertion);    validateAssertionContent(assertion);  }}  }
class C{  protected String composeEmergencyManagementSymCode(){  StringBuilder sb=new StringBuilder();  appendFieldValue(sb,this.getScheme(),1);  appendFieldValue(sb,this.getStandardIdentity(),1);  appendFieldValue(sb,this.getCategory(),1);  appendFieldValue(sb,this.getStatus(),1);  appendFieldValue(sb,this.getFunctionId(),6);  appendFieldValue(sb,this.getSymbolModifier(),2);  appendFieldValue(sb,this.getCountryCode(),2);  appendFieldValue(sb,this.getOrderOfBattle(),1);  return sb.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Map<String,String> parseBadges(String data){  if (data == null || data.isEmpty()) {    return EMPTY_BADGES;  }  LinkedHashMap<String,String> result=new LinkedHashMap<>();  String[] badges=data.split(",");  for (  String badge : badges) {    String[] split=badge.split("/");    if (split.length == 2) {      String id=split[0];      String version=split[1];      result.put(id,version);    }  }  return Collections.unmodifiableMap(result);}  }
class C{  @Override public void close(){}  }
class C{  public static Remote toStub(Remote obj) throws IOException {  if (proxy == null)   throw new NoSuchObjectException("Object not exported");  return proxy.toStub(obj);}  }
class C{  private CBreakpointFunctions(){}  }
class C{  public final int length(){  return _length;}  }
class C{  private static double[] computeExtend(int dim,double[][] data,int begin,int end){  double[] minmax=new double[dim << 1];  for (int d=0; d < minmax.length; ) {    minmax[d++]=Double.POSITIVE_INFINITY;    minmax[d++]=Double.NEGATIVE_INFINITY;  }  for (int i=begin; i < end; i++) {    double[] row=data[i];    for (int d=0, d2=0; d < dim; d++) {      final double v=row[d];      minmax[d2]=MathUtil.min(minmax[d2],v);      ++d2;      minmax[d2]=MathUtil.max(minmax[d2],v);      ++d2;    }  }  return minmax;}  }
class C{  public HtmlPolicyBuilder allowCommonBlockElements(){  return allowElements("p","div","h1","h2","h3","h4","h5","h6","ul","ol","li","blockquote");}  }
class C{  @Override public void IFLT(String className,String methName,int branchIndex,int p){  env.topFrame().operandStack.pushBv32(ExpressionFactory.ICONST_0);  IF_ICMPLT(className,methName,branchIndex,p,0);}  }
class C{  public static String copySelectedText(final PdfDecoderInt decode_pdf,final GUIFactory currentGUI,final Values commonValues){  if (!decode_pdf.isExtractionAllowed()) {    currentGUI.showMessageDialog("Not allowed");    return "";  }  StringBuilder returnValue=new StringBuilder("");  final int[][] highlights=decode_pdf.getTextLines().getHighlightedAreasAs2DArray(commonValues.getCurrentPage());  if (highlights == null) {    return "";  }  final boolean multipleAreas=(highlights.length > 1);  final PdfPageData page_data=decode_pdf.getPdfPageData();  final int cropX=page_data.getCropBoxX(commonValues.getCurrentPage());  final int cropY=page_data.getCropBoxY(commonValues.getCurrentPage());  final int cropW=page_data.getCropBoxWidth(commonValues.getCurrentPage());  final int cropH=page_data.getCropBoxHeight(commonValues.getCurrentPage());  if (highlights != null) {    for (int t=0; t != highlights.length; t++) {      highlights[t]=adjustHighlightForExtraction(highlights[t]);      int t_x1=highlights[t][0];      int t_x2=highlights[t][0] + highlights[t][2];      int t_y1=highlights[t][1] + highlights[t][3];      int t_y2=highlights[t][1];      if (t_y1 < t_y2) {        final int temp=t_y2;        t_y2=t_y1;        t_y1=temp;      }      if (t_x1 > t_x2) {        final int temp=t_x2;        t_x2=t_x1;        t_x1=temp;      }      if (t_x1 < cropX) {        t_x1=cropX;      }      if (t_x1 > cropW + cropX) {        t_x1=cropW + cropX;      }      if (t_x2 < cropX) {        t_x2=cropX;      }      if (t_x2 > cropW + cropX) {        t_x2=cropW + cropX;      }      if (t_y1 < cropY) {        t_y1=cropY;      }      if (t_y1 > cropH + cropY) {        t_y1=cropH + cropY;      }      if (t_y2 < cropY) {        t_y2=cropY;      }      if (t_y2 > cropH + cropY) {        t_y2=cropH + cropY;      }      String extractedText;      try {        final PdfGroupingAlgorithms currentGrouping=decode_pdf.getGroupingObject();        extractedText=currentGrouping.extractTextInRectangle(t_x1,t_y1,t_x2,t_y2,commonValues.getCurrentPage(),false,true);        if (extractedText == null || extractedText.isEmpty()) {          if (!multipleAreas) {            currentGUI.showMessageDialog(Messages.getMessage("PdfViewerMessage.NoTextFound"));          }        } else {          extractedText=Strip.stripXML(extractedText,decode_pdf.isXMLExtraction()).toString();        }        if (extractedText != null) {          returnValue.append(extractedText).append((char)0x0D).append((char)0x0A);        }      } catch (      final PdfException e) {        System.err.println("Exception " + e.getMessage() + " in file "+ commonValues.getSelectedFile());        e.printStackTrace();      }    }  }  if (returnValue.length() > 2) {    return returnValue.substring(0,returnValue.length() - 2);  } else {    return "";  }}  }
class C{  public ParseXMLTestCase(String name){  super(name);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private static byte[] readBytes(final ClientReader inputStream,final int length) throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final byte[] data=new byte[length];  int read=0;  while (read < length) {    final int retval=inputStream.read(data,0,length - read);    baos.write(data,0,retval);    read+=retval;  }  return baos.toByteArray();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.715 -0500",hash_original_method="4E618B69222EA698951005FED9FF9FA3",hash_generated_method="3E5BDE21AA2CFEDEC5F6B5AD711B6446") private byte[] generateDerivedKey(int bytesNeeded){  byte[] buf=new byte[digest.getDigestSize()];  byte[] key=new byte[bytesNeeded];  int offset=0;  for (; ; ) {    digest.update(password,0,password.length);    digest.update(salt,0,salt.length);    digest.doFinal(buf,0);    int len=(bytesNeeded > buf.length) ? buf.length : bytesNeeded;    System.arraycopy(buf,0,key,offset,len);    offset+=len;    bytesNeeded-=len;    if (bytesNeeded == 0) {      break;    }    digest.reset();    digest.update(buf,0,buf.length);  }  return key;}  }
class C{  private void callcc0(){  if (ctx != null) {    if (job == null)     job=ctx.job().activeJob(jobId);    if (job != null) {      job.execute();    }  }}  }
class C{  public TabbedPaneRightTabState(){  super("Right");}  }
class C{  public boolean isAdjusting(){  return adjusting;}  }
class C{  private Number toNumber(final Class sourceType,final Class targetType,final String value){  if (targetType.equals(Byte.class)) {    return new Byte(value);  }  if (targetType.equals(Short.class)) {    return new Short(value);  }  if (targetType.equals(Integer.class)) {    return new Integer(value);  }  if (targetType.equals(Long.class)) {    return new Long(value);  }  if (targetType.equals(Float.class)) {    return new Float(value);  }  if (targetType.equals(Double.class)) {    return new Double(value);  }  if (targetType.equals(BigDecimal.class)) {    return new BigDecimal(value);  }  if (targetType.equals(BigInteger.class)) {    return new BigInteger(value);  }  String msg=this.toString(this.getClass()) + " cannot handle conversion from '" + this.toString(sourceType)+ "' to '"+ this.toString(targetType)+ "'";  throw new ConversionException(msg);}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(ToggleButtonDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new ToggleButtonDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  private OrganizationReference retrieveOrgRef(Organization source,Organization target,OrganizationReferenceType refType){  OrganizationReference orgRef=new OrganizationReference(source,target,refType);  orgRef=(OrganizationReference)dm.find(orgRef);  if (orgRef == null) {    SaaSSystemException sse=new SaaSSystemException(String.format("Organization %s has no reference of type %s to organization %s",target,refType,source));    logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_ORGANIZATION_HAS_NO_REFERENCE_TYPE,String.valueOf(target),String.valueOf(refType),String.valueOf(source));    throw sse;  }  return orgRef;}  }
class C{  public boolean isGreater(final Priority other){  return m_priority > other.getValue();}  }
class C{  private boolean isCharacterEscapeCharacter(char c){  return c == escape;}  }
class C{  public String toString(Element node){  DOMImplementationLS implementation=(DOMImplementationLS)node.getOwnerDocument().getImplementation();  LSSerializer serializer=implementation.createLSSerializer();  serializer.getDomConfig().setParameter("format-pretty-print",true);  serializer.getDomConfig().setParameter("xml-declaration",false);  return serializer.writeToString(node);}  }
class C{  public void auditBlockConsistencyGroup(final OperationTypeEnum auditType,final String operationalStatus,final String operationStage,final Object... descparams){  _auditMgr.recordAuditLog(URI.create(getUserFromContext().getTenantId()),URI.create(getUserFromContext().getName()),"block",auditType,System.currentTimeMillis(),operationalStatus,operationStage,descparams);}  }
class C{  public static boolean isNumber(String data){  String expr="^[0-9]+$";  return data.matches(expr);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.407 -0500",hash_original_method="407E789BCFB8527B31EA0FCB2D45014F",hash_generated_method="3774031F4593083A8E0FF696530B2F86") private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.addTaint(getTaint());}  }
class C{  public void close() throws GraphIOException {  try {    document.clear();    if (xmlEventReader != null) {      xmlEventReader.close();    }    if (fileReader != null) {      fileReader.close();    }    if (inputStream != null) {      inputStream.close();    }  } catch (  IOException e) {    throw new GraphIOException(e);  }catch (  XMLStreamException e) {    throw new GraphIOException(e);  } finally {    fileReader=null;    inputStream=null;    xmlEventReader=null;    graphTransformer=null;    vertexTransformer=null;    edgeTransformer=null;    hyperEdgeTransformer=null;  }}  }
class C{  public boolean canDeserialize(JavaType type){  return _deserializerProvider.hasValueDeserializerFor(copyDeserializationConfig(),type);}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public static int d6(){  Roll roll=random.d6();  if (Server.getServerInstance() != null) {    if (Server.getServerInstance().getGame().getOptions().booleanOption("rng_log")) {      Server.getServerInstance().reportRoll(roll);    }  }  return roll.getIntValue();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:54.293 -0500",hash_original_method="BC145A1DE2472995676ED9A315FB0956",hash_generated_method="171409CD29A7B7D5AD18DD4C394534AC") private static boolean equalsHandlesNulls(Object a,Object b){  return (a == null) ? (b == null) : a.equals(b);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.904 -0400",hash_original_method="56B6CF5404852C2E1FA523B4DDC1E2FF",hash_generated_method="209C604B5C1640CFBD3CF7995BBB2E9A") @Override public long skip(long n) throws IOException {  while (n > 0 && readFirstBytes() >= 0) {    n--;  }  return in.skip(n);}  }
class C{  private String normalizeValue(Type type,String value){  if (type.equals(Type.GROUP)) {    return value.toUpperCase();  } else   if (type.equals(Type.SID)) {    return value.toLowerCase();  }  return value;}  }
class C{  private IntegerPolynomial multRecursive(IntegerPolynomial poly2){  int[] a=coeffs;  int[] b=poly2.coeffs;  int n=poly2.coeffs.length;  if (n <= 32) {    int cn=2 * n - 1;    IntegerPolynomial c=new IntegerPolynomial(new int[cn]);    for (int k=0; k < cn; k++) {      for (int i=Math.max(0,k - n + 1); i <= Math.min(k,n - 1); i++) {        c.coeffs[k]+=b[i] * a[k - i];      }    }    return c;  } else {    int n1=n / 2;    IntegerPolynomial a1=new IntegerPolynomial(Arrays.copyOf(a,n1));    IntegerPolynomial a2=new IntegerPolynomial(Arrays.copyOfRange(a,n1,n));    IntegerPolynomial b1=new IntegerPolynomial(Arrays.copyOf(b,n1));    IntegerPolynomial b2=new IntegerPolynomial(Arrays.copyOfRange(b,n1,n));    IntegerPolynomial A=(IntegerPolynomial)a1.clone();    A.add(a2);    IntegerPolynomial B=(IntegerPolynomial)b1.clone();    B.add(b2);    IntegerPolynomial c1=a1.multRecursive(b1);    IntegerPolynomial c2=a2.multRecursive(b2);    IntegerPolynomial c3=A.multRecursive(B);    c3.sub(c1);    c3.sub(c2);    IntegerPolynomial c=new IntegerPolynomial(2 * n - 1);    for (int i=0; i < c1.coeffs.length; i++) {      c.coeffs[i]=c1.coeffs[i];    }    for (int i=0; i < c3.coeffs.length; i++) {      c.coeffs[n1 + i]+=c3.coeffs[i];    }    for (int i=0; i < c2.coeffs.length; i++) {      c.coeffs[2 * n1 + i]+=c2.coeffs[i];    }    return c;  }}  }
class C{  public MarketService force(boolean force){  this.force=force;  return this;}  }
class C{  protected void addConstPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Property_const_feature"),getString("_UI_PropertyDescriptor_description","_UI_Property_const_feature","_UI_Property_type"),TypesPackage.Literals.PROPERTY__CONST,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  Object toType(String value,String pattern,Locale locale){  Calendar calendar=toCalendar(value,pattern,locale);  return toType(calendar);}  }
class C{  public StringTokenizer(String str,String delim,boolean returnDelims){  len=str.length();  this.str=str;  this.delim=delim;  this.retDelims=returnDelims;  this.pos=0;}  }
class C{  public void applyTheme(Resources.Theme t){}  }
class C{  public void testGetVersion24() throws Exception {  String xml=WEBAPP_24_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertEquals(WebXmlVersion.V2_4,webXml.getVersion());}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder description(String description){  this.description=description;  return this;}  }
class C{  @Override public void smoothScrollByOffset(int offset){  super.smoothScrollByOffset(offset);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void testNodeProcessing() throws InterruptedException {  SimpleMovingAverage<String,Double> oper=new SimpleMovingAverage<String,Double>();  CollectorTestSink sink=new CollectorTestSink();  CollectorTestSink sink2=new CollectorTestSink();  oper.doubleSMA.setSink(sink);  oper.integerSMA.setSink(sink2);  oper.setWindowSize(3);  double val=30;  double val2=51;  oper.beginWindow(0);  oper.data.process(new KeyValPair<String,Double>("a",++val));  oper.data.process(new KeyValPair<String,Double>("a",++val));  oper.data.process(new KeyValPair<String,Double>("b",++val2));  oper.data.process(new KeyValPair<String,Double>("b",++val2));  oper.endWindow();  Assert.assertEquals("number emitted tuples",2,sink.collectedTuples.size());  for (int i=0; i < 2; i++) {    KeyValPair<String,Double> pair=(KeyValPair<String,Double>)sink.collectedTuples.get(i);    if (pair.getKey().equals("a")) {      Assert.assertEquals("a SMA",31.5,pair.getValue(),0);    } else {      Assert.assertEquals("b SMA",52.5,pair.getValue(),0);    }  }  oper.beginWindow(1);  oper.data.process(new KeyValPair<String,Double>("a",++val));  oper.data.process(new KeyValPair<String,Double>("a",++val));  oper.data.process(new KeyValPair<String,Double>("b",++val2));  oper.data.process(new KeyValPair<String,Double>("b",++val2));  oper.endWindow();  Assert.assertEquals("number emitted tuples",4,sink.collectedTuples.size());  for (int i=2; i < 4; i++) {    KeyValPair<String,Double> pair=(KeyValPair<String,Double>)sink.collectedTuples.get(i);    if (pair.getKey().equals("a")) {      Assert.assertEquals("a SMA",32.5,pair.getValue(),0);    } else {      Assert.assertEquals("b SMA",53.5,pair.getValue(),0);    }  }  oper.beginWindow(2);  oper.data.process(new KeyValPair<String,Double>("a",++val));  oper.data.process(new KeyValPair<String,Double>("a",++val));  oper.data.process(new KeyValPair<String,Double>("b",++val2));  oper.data.process(new KeyValPair<String,Double>("b",++val2));  oper.endWindow();  Assert.assertEquals("number emitted tuples",6,sink.collectedTuples.size());  for (int i=4; i < 6; i++) {    KeyValPair<String,Double> pair=(KeyValPair<String,Double>)sink.collectedTuples.get(i);    if (pair.getKey().equals("a")) {      Assert.assertEquals("a SMA",33.5,pair.getValue(),0);    } else {      Assert.assertEquals("b SMA",54.5,pair.getValue(),0);    }  }  oper.beginWindow(3);  oper.data.process(new KeyValPair<String,Double>("a",++val));  oper.data.process(new KeyValPair<String,Double>("a",++val));  oper.data.process(new KeyValPair<String,Double>("b",++val2));  oper.data.process(new KeyValPair<String,Double>("b",++val2));  oper.endWindow();  Assert.assertEquals("number emitted tuples",8,sink.collectedTuples.size());  for (int i=6; i < 8; i++) {    KeyValPair<String,Double> pair=(KeyValPair<String,Double>)sink.collectedTuples.get(i);    if (pair.getKey().equals("a")) {      Assert.assertEquals("a SMA",35.5,pair.getValue(),0);    } else {      Assert.assertEquals("b SMA",56.5,pair.getValue(),0);    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.TRANSITION_ROOT__DEF:    setDef((TransitionSpecification)null);  return;}super.eUnset(featureID);}  }
class C{  public ColorSquareImageProducer(ColorSpace sys,int w,int h){  this(sys,w,h,false,false);}  }
class C{  public static void exit(final JFrame parent){  if (CMessageBox.showYesNoQuestion(parent,"Really close BinNavi?") != JOptionPane.YES_OPTION) {    return;  }  for (  final CGraphWindow window : CWindowManager.instance()) {    if (!window.close()) {      return;    }  }  saveSettings(parent);  System.exit(0);}  }
class C{  public ErrorWritingException(final String message){  super(message);  addData(message,null);}  }
class C{  public TagDispatcherBuilder enableReaderMode(boolean enableReaderMode){  this.enableReaderMode=enableReaderMode;  return this;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (dirichletBayesIm == null) {    throw new NullPointerException();  }}  }
class C{  public DefaultProgrammerManager(){  mProgrammer=null;}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  @Override public IndexableField createField(SchemaField field,Object value,float boost){  throw new UnsupportedOperationException("PointType uses multiple fields.  field=" + field.getName());}  }
class C{  public static String toString(final Object object){  return toString(object,null,false,false,null);}  }
class C{  public void handleConfiguration(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  if (mRetainedFragmentManager.firstTimeIn()) {    Log.d(TAG,"First time onCreate() call");    initialize(opsType,instance);  } else {    Log.d(TAG,"Second or subsequent onCreate() call");    mOpsInstance=mRetainedFragmentManager.get(opsType.getSimpleName());    if (mOpsInstance == null)     initialize(opsType,instance); else     mOpsInstance.onConfiguration(instance,false);  }}  }
class C{  public PasteSubgraphAction(GraphEditable graphEditor){  super("Paste Selected Graph");  if (graphEditor == null) {    throw new NullPointerException("Desktop must not be null.");  }  this.graphEditor=graphEditor;}  }
class C{  protected AbstractMatrix3D vStrides(int sliceStride,int rowStride,int columnStride){  if (sliceStride <= 0 || rowStride <= 0 || columnStride <= 0)   throw new IndexOutOfBoundsException("illegal strides: " + sliceStride + ", "+ rowStride+ ", "+ columnStride);  this.sliceStride*=sliceStride;  this.rowStride*=rowStride;  this.columnStride*=columnStride;  if (this.slices != 0)   this.slices=(this.slices - 1) / sliceStride + 1;  if (this.rows != 0)   this.rows=(this.rows - 1) / rowStride + 1;  if (this.columns != 0)   this.columns=(this.columns - 1) / columnStride + 1;  this.isNoView=false;  return this;}  }
class C{  public void apply(){  for (  int value : getValue()) {switch (value) {case 0:      break;default :{      org.mmtk.harness.lang.Trace.enable(options[value]);      break;    }}}}  }
class C{  public void remove(byte[] key){synchronized (myDatabase) {    myDatabase.remove(new ByteArrayWrapper(key));  }}  }
class C{  public MatFileWriter(WritableByteChannel channel,Collection<MLArray> data) throws IOException {  writeHeader(channel);  for (  MLArray matrix : data) {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    DataOutputStream dos=new DataOutputStream(baos);    writeMatrix(dos,matrix);    Deflater compresser=new Deflater();    byte[] input=baos.toByteArray();    ByteArrayOutputStream compressed=new ByteArrayOutputStream();    DataOutputStream dout=new DataOutputStream(new DeflaterOutputStream(compressed,compresser));    dout.write(input);    dout.close();    compressed.close();    byte[] compressedBytes=compressed.toByteArray();    ByteBuffer buf=ByteBuffer.allocateDirect(2 * 4 + compressedBytes.length);    buf.putInt(MatDataTypes.miCOMPRESSED);    buf.putInt(compressedBytes.length);    buf.put(compressedBytes);    buf.flip();    channel.write(buf);  }  channel.close();}  }
class C{  public boolean containsAttributes(AttributeSet attributes){  boolean result=true;  Enumeration names=attributes.getAttributeNames();  while (result && names.hasMoreElements()) {    Object name=names.nextElement();    result=attributes.getAttribute(name).equals(getAttribute(name));  }  return result;}  }
class C{  CstLiteral32(int bits){  this.bits=bits;}  }
class C{  public StrBuilder replace(final int startIndex,int endIndex,final String replaceStr){  endIndex=validateRange(startIndex,endIndex);  final int insertLen=(replaceStr == null ? 0 : replaceStr.length());  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);  return this;}  }
class C{  public Extension build(InputStream is) throws IOException, SAXException, ParserConfigurationException {  Digester digester=new Digester(saxf.newSAXParser());  digester.setRuleNamespaceURI(EXTENSION_NAMESPACE);  Extension e=new Extension();  digester.push(e);  digester.addCallMethod("*/extension","setTitle",1);  digester.addRule("*/extension",new CallParamNoNSRule(0,"title"));  digester.addCallMethod("*/extension","setName",1);  digester.addCallParam("*/extension",0,"name");  digester.addCallMethod("*/extension","setNamespace",1);  digester.addCallParam("*/extension",0,"namespace");  digester.addCallMethod("*/extension","setRowType",1);  digester.addCallParam("*/extension",0,"rowType");  digester.addCallMethod("*/extension","setIssuedDateAsString",1);  digester.addRule("*/extension",new CallParamNoNSRule(0,"issued"));  digester.addCallMethod("*/extension","setLink",1);  digester.addRule("*/extension",new CallParamNoNSRule(0,"relation"));  digester.addCallMethod("*/extension","setDescription",1);  digester.addRule("*/extension",new CallParamNoNSRule(0,"description"));  digester.addCallMethod("*/extension","setSubject",1);  digester.addRule("*/extension",new CallParamNoNSRule(0,"subject"));  digester.addObjectCreate("*/property",ExtensionProperty.class);  digester.addCallMethod("*/property","setQualname",1);  digester.addCallParam("*/property",0,"qualName");  digester.addCallMethod("*/property","setName",1);  digester.addCallParam("*/property",0,"name");  digester.addCallMethod("*/property","setNamespace",1);  digester.addCallParam("*/property",0,"namespace");  digester.addCallMethod("*/property","setGroup",1);  digester.addCallParam("*/property",0,"group");  digester.addCallMethod("*/property","setRequired",1);  digester.addCallParam("*/property",0,"required");  digester.addCallMethod("*/property","setLink",1);  digester.addRule("*/property",new CallParamNoNSRule(0,"relation"));  digester.addCallMethod("*/property","setDescription",1);  digester.addRule("*/property",new CallParamNoNSRule(0,"description"));  digester.addCallMethod("*/property","setExamples",1);  digester.addCallParam("*/property",0,"examples");  digester.addCallMethod("*/property","setType",1);  digester.addCallParam("*/property",0,"type");  digester.addRule("*/property",thesaurusRule);  digester.addSetNext("*/property","addProperty");  digester.parse(is);  return e;}  }
class C{  public void fatalError(TransformerException exception) throws TransformerException {  if (m_throwExceptionOnError)   throw exception; else {    PrintWriter pw=getErrorWriter();    printLocation(pw,exception);    pw.println(exception.getMessage());  }}  }
class C{  public Tuple addTuple(Tuple t){  throw new UnsupportedOperationException();}  }
class C{  private Instance makeInstance(double margin,int current,int cumulative){  int count=0;  double[] vals=new double[3];  vals[count++]=margin;  vals[count++]=current;  vals[count++]=cumulative;  return new DenseInstance(1.0,vals);}  }
class C{  public BloomFilter(final int n,final double p){  this(n,p,n * 2);}  }
class C{  public void testLastMessageAcked() throws JMSException {  connection.start();  Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  Queue queue=session.createQueue(getQueueName());  MessageProducer producer=session.createProducer(queue);  producer.send(session.createTextMessage("Hello"));  producer.send(session.createTextMessage("Hello2"));  producer.send(session.createTextMessage("Hello3"));  MessageConsumer consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNotNull(msg);  msg=consumer.receive(1000);  assertNotNull(msg);  msg=consumer.receive(1000);  assertNotNull(msg);  msg.acknowledge();  session.close();  session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  msg=consumer.receive(1000);  assertNull(msg);  session.close();}  }
class C{  public void requestPermission(@NonNull Fragment fragment,int requestCode,@NonNull String... permissions){  assertPermissionsNotGranted(permissions);  if (isTestEnvironment()) {    mMockSystemPermissions.requestPermissions(permissions);  } else {    fragment.requestPermissions(permissions,requestCode);  }}  }
class C{  public DoubleLinkedList<IMove> validMoves(){  DoubleLinkedList<IMove> list=new DoubleLinkedList<IMove>();  int br=-1, bc=-1;  outer:   for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      if (board[r][c] == EmptyMark) {        br=r;        bc=c;        break outer;      }    }  }  int deltas[][]={{+1,0},{0,-1},{-1,0},{0,1}};  for (int i=0; i < deltas.length; i++) {    int dr=deltas[i][0];    int dc=deltas[i][1];    if (0 <= br + dr && br + dr <= MaxR) {      if (0 <= bc + dc && bc + dc <= MaxC) {        list.insert(new SlideMove(board[br + dr][bc + dc],br + dr,bc + dc,br,bc));      }    }  }  return list;}  }
class C{  public void init(RemoteAuthenticatedUser user,ActiveConnectionRecord activeConnection,ModeledSharingProfile sharingProfile){  init(user,null,activeConnection.getConnection(),sharingProfile);  this.connectionID=activeConnection.getConnectionID();}  }
class C{  private void applyZoom(float scale){  if (!hasEditor()) {    return;  }  getEditor().setZoom(scale);}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public static byte[] buildNalUnit(byte[] data,int offset,int length){  byte[] nalUnit=new byte[length + NAL_START_CODE.length];  System.arraycopy(NAL_START_CODE,0,nalUnit,0,NAL_START_CODE.length);  System.arraycopy(data,offset,nalUnit,NAL_START_CODE.length,length);  return nalUnit;}  }
class C{  public <T>T waitForState(Class<T> type,Predicate<T> predicate) throws Throwable {  return waitForState(this.serviceUri,type,predicate);}  }
class C{  public Player createAndAddPlayer(Client client){  if (players.size() >= MAX_PLAYER_COUNT) {    throw new IllegalStateException("Maximum player count (" + MAX_PLAYER_COUNT + ") has been reached.");  }  Player p=new Player(this,client);  broadcastRoomMessage(MessageType.PLAYER_CHANGED,"+");  players.add(p);  if (activeBroadcastTimerTask == null) {    activeBroadcastTimerTask=createBroadcastTimerTask();    drawmessageBroadcastTimer.schedule(activeBroadcastTimerTask,TIMER_DELAY,TIMER_DELAY);  }  String content=String.valueOf(players.size());  p.sendRoomMessage(MessageType.IMAGE_MESSAGE,content);  ByteArrayOutputStream bout=new ByteArrayOutputStream();  try {    ImageIO.write(roomImage,"PNG",bout);  } catch (  IOException e) {  }  BinaryWebsocketMessage msg=new BinaryWebsocketMessage(ByteBuffer.wrap(bout.toByteArray()));  p.getClient().sendMessage(msg);  return p;}  }
class C{  @SmallTest public void testCreateSpeechRules_filteringByAllEventProperties() throws Exception {  final String strategy="<ss:rule>" + "   <ss:filter>" + "       <ss:addedCount>1</ss:addedCount>"+ "       <ss:beforeText>beforeText</ss:beforeText>"+ "       <ss:checked>true</ss:checked>"+ "       <ss:className>foo.bar.baz.Test</ss:className>"+ "       <ss:contentDescription>contentDescription</ss:contentDescription>"+ "       <ss:currentItemIndex>2</ss:currentItemIndex>"+ "       <ss:enabled>true</ss:enabled>"+ "       <ss:eventType>TYPE_NOTIFICATION_STATE_CHANGED</ss:eventType>"+ "       <ss:fromIndex>1</ss:fromIndex>"+ "       <ss:fullScreen>true</ss:fullScreen>"+ "       <ss:itemCount>10</ss:itemCount>"+ "       <ss:packageName>foo.bar.baz</ss:packageName>"+ "       <ss:password>true</ss:password>"+ "       <ss:removedCount>2</ss:removedCount>"+ "       <ss:contentDescriptionOrText>contentDescription</ss:contentDescriptionOrText>"+ "   </ss:filter>"+ "   <ss:formatter>"+ "       <ss:template>text template</ss:template>"+ "   </ss:formatter>"+ "</ss:rule>";  final AccessibilityEvent event=AccessibilityEvent.obtain();  event.setAddedCount(1);  event.setBeforeText("beforeText");  event.setChecked(true);  event.setClassName("foo.bar.baz.Test");  event.setContentDescription("contentDescription");  event.setCurrentItemIndex(2);  event.setEnabled(true);  event.setEventType(AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED);  event.setFromIndex(1);  event.setFullScreen(true);  event.setItemCount(10);  event.setPackageName("foo.bar.baz");  event.setPassword(true);  event.setRemovedCount(2);  event.getText().add("first blank second");  final EventSpeechRuleProcessor processor=createProcessorWithStrategy(strategy,1);  final Utterance utterance=new Utterance();  final boolean processed=processor.processEvent(event,utterance);  assertTrue("The event must match the filter",processed);  assertFalse("An utterance must be produced",TextUtils.isEmpty(StringBuilderUtils.getAggregateText(utterance.getSpoken())));  assertTrue("The utterance must contain the template text of the formatter",StringBuilderUtils.getAggregateText(utterance.getSpoken()).toString().contains("text template"));}  }
class C{  public BerInputStream(byte[] encoded,int offset,int expectedLength) throws IOException {  this.in=null;  this.buffer=encoded;  this.offset=offset;  next();  if (length != INDEFINIT_LENGTH && (offset + expectedLength) != (this.offset + this.length)) {    throw new ASN1Exception("Wrong content length");  }}  }
class C{  private void faultInFromCurrentOplog(){  put100Int();  putTillOverFlow(region);  region.put(new Integer(200),new Integer(200));  region.put(new Integer(201),new Integer(201));  if (!(region.get(new Integer(2)).equals(new Integer(2)))) {    fail(" fault in value not correct");  }}  }
class C{  public void updateInt(String columnName,int x) throws SQLException {  checkUpdatable();  getField(columnName).setInteger(x);}  }
class C{  @Override public StateConnection service(){  try {    StateConnection nextState=_state.service(this);    return nextState;  } catch (  Throwable e) {    log.warning(e.toString());    log.log(Level.FINER,e.toString(),e);    toClose();    return StateConnection.CLOSE_READ_A;  }}  }
class C{  public ProcessAnnotation(final String comment,final AnnotationStyle style,final ExecutionUnit process,final boolean wasResized,final boolean wasColored,final Rectangle2D location){  super(comment,style,wasResized,wasColored,location);  if (process == null) {    throw new IllegalArgumentException("process must not be null!");  }  if (location == null) {    throw new IllegalArgumentException("location must not be null!");  }  this.process=process;}  }
class C{  @Override public void startElement(String namespace,String localName,String qName,Attributes attrs) throws SAXException {  logger.fine("Start element " + qName);  ElementHandler parentHandler=curHandler;  if (curHandler == null) {    if (namespace.equals(rootNamespace) && localName.equals(rootElementName)) {      curHandler=rootHandler;    } else     if (rootElementName != null) {      throw new SAXException(new ParseException("Invalid root element, expected " + "(namespace uri:local name) of " + "(" + rootNamespace + ":"+ rootElementName+ ")"+ ", found ("+ namespace+ ":"+ localName));    }  } else   if (curHandler != null && unrecognizedElements == 0) {    try {      curHandler=curHandler.getChildHandler(createQName(qName,namespace,localName),attrs,elementNamespaces);    } catch (    ParseException e) {      throw new SAXException(e);    }catch (    IOException e) {      throw new SAXException(e);    }  }  if (curHandler != null && unrecognizedElements == 0) {    curHandler.parent=parentHandler;    curHandler.qName=qName;    if (parentHandler != null) {      curHandler.xmlLang=parentHandler.xmlLang;      curHandler.xmlBase=parentHandler.xmlBase;    }    try {      for (int i=0; i < attrs.getLength(); i++) {        String attrNamespace=attrs.getURI(i);        String attrLocalName=attrs.getLocalName(i);        String attrValue=attrs.getValue(i);        if (attrNamespace.equals("http://www.w3.org/XML/1998/namespace")) {          if (attrLocalName.equals("lang")) {            curHandler.xmlLang=attrValue;            logger.finer("xml:lang=" + attrValue);          } else           if (attrLocalName.equals("base")) {            curHandler.xmlBase=getCumulativeXmlBase(curHandler.xmlBase,attrValue);            logger.finer("xml:base=" + curHandler.xmlBase);          }        }      }      for (int i=0; i < attrs.getLength(); i++) {        String attrNamespace=attrs.getURI(i);        String attrQName=attrs.getQName(i);        String attrLocalName=attrs.getLocalName(i);        String attrValue=attrs.getValue(i);        logger.finer("Attribute " + attrLocalName + "='"+ attrValue+ "'");        curHandler.processAttribute(createQName(attrQName,attrNamespace,attrLocalName),attrValue);      }    } catch (    ParseException e) {      throw new SAXException(e);    }catch (    URISyntaxException e) {      throw new SAXException(new ParseException(e.getMessage()));    }catch (    NumberFormatException e) {      throw new SAXException(new ParseException("Invalid integer format. " + e.getMessage()));    }    curHandler.okToInitializeXmlBlob=false;    if (curHandler.xmlBlob != null) {      if (curHandler.xmlLang != null) {        curHandler.xmlBlob.setLang(curHandler.xmlLang);      }      if (curHandler.xmlBase != null) {        curHandler.xmlBlob.setBase(curHandler.xmlBase);      }    }  } else {    ++unrecognizedElements;    for (    XmlNamespace ns : elementNamespaces) {      Stack<NamespaceDecl> nsDecls=namespaceMap.get(ns.getAlias());      if (nsDecls != null && nsDecls.size() > 0) {        nsDecls.peek().inBlob=true;      }    }    if (curHandler == null) {      curHandler=parentHandler;    }    if (curHandler != null && curHandler.innerXml != null) {      ArrayList<XmlWriter.Attribute> attrList=new ArrayList<XmlWriter.Attribute>(attrs.getLength());      for (int i=attrs.getLength() - 1; i >= 0; --i) {        String qNameAttr=attrs.getQName(i);        ensureBlobNamespace(curHandler,qNameAttr);        String value=attrs.getValue(i);        XmlWriter.Attribute attr=new XmlWriter.Attribute(qNameAttr,value);        attrList.add(attr);        if (curHandler.fullTextIndex) {          curHandler.fullTextIndexWriter.write(value);          curHandler.fullTextIndexWriter.write(" ");        }      }      try {        ensureBlobNamespace(curHandler,qName);        curHandler.innerXml.startElement(null,qName,attrList,elementNamespaces);      } catch (      IOException e) {        throw new SAXException(e);      }    }  }  elementNamespaces.clear();}  }
class C{  public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);synchronized (dateFormat) {    return dateFormat.format(date);  }}  }
class C{  public XMLOptions(InputStream stream) throws Exception {  this();  getXMLDocument().read(stream);}  }
class C{  public CropFilter(int x,int y,int width,int height){  this.x=x;  this.y=y;  this.width=width;  this.height=height;}  }
class C{  public void testGridPolygonsNoHoleRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(10);  grid.setNumberRows(10);  Polygon[] pt=new Polygon[100];  STRUCT[] st=new STRUCT[100];  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setNumberPoints(10);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 100) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(Polygon)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  OraReader or=new OraReader();  i=0;  while (i < 100 && pt[i] != null) {    Polygon pt2=(Polygon)or.read(st[i]);    assertTrue("The input polygon is not the same as the output polygon",pt[i].equals(pt2));    i++;  }}  }
class C{  protected TypeVar pickFreshTypeVar(TypeVar var){  return var.pickFreshTypeVarInstance(this.staleToFresh);}  }
class C{  public static List<BlockletInfoColumnar> convertBlockletInfo(FileFooter footer) throws IOException {  List<BlockletInfoColumnar> listOfNodeInfo=new ArrayList<BlockletInfoColumnar>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  for (  BlockletInfo blockletInfo : footer.getBlocklet_info_list()) {    BlockletInfoColumnar blockletInfoColumnar=new BlockletInfoColumnar();    blockletInfoColumnar.setNumberOfKeys(blockletInfo.getNum_rows());    List<DataChunk> columnChunks=blockletInfo.getColumn_data_chunks();    List<DataChunk> dictChunks=new ArrayList<DataChunk>();    List<DataChunk> nonDictColChunks=new ArrayList<DataChunk>();    for (    DataChunk dataChunk : columnChunks) {      if (dataChunk.getEncoders().get(0).equals(Encoding.DICTIONARY)) {        dictChunks.add(dataChunk);      } else {        nonDictColChunks.add(dataChunk);      }    }    int[] keyLengths=new int[dictChunks.size()];    long[] keyOffSets=new long[dictChunks.size()];    long[] keyBlockIndexOffsets=new long[dictChunks.size()];    int[] keyBlockIndexLens=new int[dictChunks.size()];    long[] indexMapOffsets=new long[dictChunks.size()];    int[] indexMapLens=new int[dictChunks.size()];    boolean[] sortState=new boolean[dictChunks.size()];    int i=0;    for (    DataChunk dataChunk : dictChunks) {      keyLengths[i]=dataChunk.getData_page_length();      keyOffSets[i]=dataChunk.getData_page_offset();      keyBlockIndexOffsets[i]=dataChunk.getRowid_page_offset();      keyBlockIndexLens[i]=dataChunk.getRowid_page_length();      indexMapOffsets[i]=dataChunk.getRle_page_offset();      indexMapLens[i]=dataChunk.getRle_page_length();      sortState[i]=dataChunk.getSort_state().equals(SortState.SORT_EXPLICIT) ? true : false;      i++;    }    blockletInfoColumnar.setKeyLengths(keyLengths);    blockletInfoColumnar.setKeyOffSets(keyOffSets);    blockletInfoColumnar.setKeyBlockIndexOffSets(keyBlockIndexOffsets);    blockletInfoColumnar.setKeyBlockIndexLength(keyBlockIndexLens);    blockletInfoColumnar.setDataIndexMapOffsets(indexMapOffsets);    blockletInfoColumnar.setDataIndexMapLength(indexMapLens);    blockletInfoColumnar.setIsSortedKeyColumn(sortState);    int[] msrLens=new int[nonDictColChunks.size()];    long[] msrOffsets=new long[nonDictColChunks.size()];    ValueEncoderMeta[] encoderMetas=new ValueEncoderMeta[nonDictColChunks.size()];    i=0;    for (    DataChunk msrChunk : nonDictColChunks) {      msrLens[i]=msrChunk.getData_page_length();      msrOffsets[i]=msrChunk.getData_page_offset();      encoderMetas[i]=deserializeValueEncoderMeta(msrChunk.getEncoder_meta().get(0));      i++;    }    blockletInfoColumnar.setMeasureLength(msrLens);    blockletInfoColumnar.setMeasureOffset(msrOffsets);    blockletInfoColumnar.setCompressionModel(getValueCompressionModel(encoderMetas));    listOfNodeInfo.add(blockletInfoColumnar);  }  setBlockletIndex(footer,listOfNodeInfo);  return listOfNodeInfo;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  namespaceURI=namespaceURI.intern();  localPart=localPart.intern();  prefix=prefix.intern();}  }
class C{  public static String chomp(String str){  return chomp(str,"\n");}  }
class C{  @Override public boolean equals(Object o){  if ((o == null) || (o.getClass() != this.getClass()))   return false;  Move other=(Move)o;  if (from != other.from)   return false;  if (to != other.to)   return false;  if (promoteTo != other.promoteTo)   return false;  return true;}  }
class C{  private boolean isSimpleEndTagForHTML(){  if ("form".equalsIgnoreCase(m_tag)) {    return false;  }  return true;}  }
class C{  public Object load(Reader io){  return loadFromReader(new StreamReader(io),Object.class);}  }
class C{  public PaletteSliderThumbIcon(Icon e,Icon ep,Icon d,Icon i,Icon di){  super(new Icon[]{e,ep,d,i,di});}  }
class C{  public Dialog(Component parent,String title,String media){  super(JOptionPane.getFrameForComponent(parent),title);  listeners.put("OKButtonAction",new OKButtonAction());  listeners.put("CancelButtonAction",new CancelButtonAction());  CSSMediaPanel panel=new CSSMediaPanel();  panel.setMedia(media);  getContentPane().add(panel,BorderLayout.CENTER);  getContentPane().add(createButtonsPanel(),BorderLayout.SOUTH);}  }
class C{  public void recordProjectEvent(Project project,OperationTypeEnum opType,Boolean opStatus){  String type=opType.getEvType(opStatus);  String description=opType.getDescription();  _log.info("opType: {} detail: {}",opType.toString(),type + ':' + description);  RecordableBourneEvent event=new RecordableBourneEvent(type,project.getTenantOrg().getURI(),URI.create(getUserFromContext().getName()),project.getId(),null,EVENT_SERVICE_TYPE,project.getId(),description,System.currentTimeMillis(),"","",RecordType.Event.name(),EVENT_SERVICE_SOURCE,"","");  try {    _evtMgr.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}. Error: {}.",description,ex);  }}  }
class C{  public void clear(){  modCount++;  data.clear();}  }
class C{  public void addColumn(String name,int sqlType,String sqlTypeName,int precision,int scale){  if (rows != null && rows.size() > 0) {    throw new IllegalStateException("Cannot add a column after adding rows");  }  if (name == null) {    name="C" + (columns.size() + 1);  }  Column column=new Column();  column.name=name;  column.sqlType=sqlType;  column.precision=precision;  column.scale=scale;  column.sqlTypeName=sqlTypeName;  columns.add(column);}  }
class C{  public static byte[] encode(byte[] binaryData){  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  if (fewerThan24bits != 0) {    encodedData=new byte[(numberTriplets + 1) * 4];  } else {    encodedData=new byte[numberTriplets * 4];  }  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    encodedIndex=i * 4;    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];  }  dataIndex=i * 3;  encodedIndex=i * 4;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  return encodedData;}  }
class C{  public final boolean isImplicit(){  return this.implicit;}  }
class C{  private boolean validateElement(InputNode node) throws Exception {  Instance type=factory.getInstance(node);  if (!type.isReference()) {    type.setInstance(null);  }  return true;}  }
class C{  public void add(RegularTimePeriod period,BigDecimal cciAverage){  if (!this.isEmpty()) {    CommodityChannelIndexItem item0=(CommodityChannelIndexItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new CommodityChannelIndexItem(period,cciAverage),true);}  }
class C{  public void mapDatasetToRangeAxes(int index,List axisIndices){  ParamChecks.requireNonNegative(index,"index");  checkAxisIndices(axisIndices);  this.datasetToRangeAxesMap.put(index,new ArrayList(axisIndices));  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));}  }
class C{  public static Map<String,Object> deactivateContentAssoc(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  context.put("skipPermissionCheck",null);  Map<String,Object> result=deactivateContentAssocMethod(dctx,context);  return result;}  }
class C{  public boolean hasCurrentTopic(){synchronized (this.topicsQueue) {    return (this.currentTopic != null);  }}  }
class C{  private String convertToStoragePattern(String urlSegment){  return urlSegment.replace("/","+").replace(".","+").replace(":","+");}  }
class C{  private void handleActionBaz(String param1,String param2){  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  public void zero(){  indexA=0;  indexB=0;  typeA=0;  typeB=0;}  }
class C{  protected NumericalIntegration(){}  }
class C{  public static String persistDataResource(HttpServletRequest request,HttpServletResponse response){  Map<String,Object> result=null;  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);  String dataResourceId=(String)paramMap.get("dataResourceId");  GenericValue dataResource=delegator.makeValue("DataResource");  dataResource.setPKFields(paramMap);  dataResource.setNonPKFields(paramMap);  Map<String,Object> serviceInMap=UtilMisc.makeMapWritable(dataResource);  serviceInMap.put("userLogin",userLogin);  String mode=(String)paramMap.get("mode");  Locale locale=UtilHttp.getLocale(request);  if (mode != null && mode.equals("UPDATE")) {    try {      result=dispatcher.runSync("updateDataResource",serviceInMap);    } catch (    GenericServiceException e) {      String errMsg=UtilProperties.getMessage(DataEvents.err_resource,"dataEvents.error_call_update_service",locale);      String errorMsg="Error calling the updateDataResource service." + e.toString();      Debug.logError(e,errorMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg + e.toString());      return "error";    }  } else {    mode="CREATE";    try {      result=dispatcher.runSync("createDataResource",serviceInMap);    } catch (    GenericServiceException e) {      String errMsg=UtilProperties.getMessage(DataEvents.err_resource,"dataEvents.error_call_create_service",locale);      String errorMsg="Error calling the createDataResource service." + e.toString();      Debug.logError(e,errorMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg + e.toString());      return "error";    }    dataResourceId=(String)result.get("dataResourceId");    dataResource.set("dataResourceId",dataResourceId);  }  String returnStr="success";  if (mode.equals("CREATE")) {    request.setAttribute("dataResourceId",result.get("dataResourceId"));    String dataResourceTypeId=(String)serviceInMap.get("dataResourceTypeId");    if (dataResourceTypeId != null) {      if (dataResourceTypeId.equals("ELECTRONIC_TEXT") || dataResourceTypeId.equals("IMAGE_OBJECT")) {        returnStr=dataResourceTypeId;      }    }  }  return returnStr;}  }
class C{  public static String toString(boolean b){  return b ? "true" : "false";}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  protected Tree<String> traverseLocate(List<Tree<String>> daughterTrees,String[] how,boolean deflt){  int headIdx=0;  String childCat;  boolean found=false;  if (how[0].equals("left")) {    twoloop:     for (int i=1; i < how.length; i++) {      for (headIdx=0; headIdx < daughterTrees.size(); headIdx++) {        childCat=Trees.FunctionNodeStripper.transformLabel(daughterTrees.get(headIdx));        if (how[i].equals(childCat)) {          found=true;          break twoloop;        }      }    }    if (!found) {      if (deflt) {        headIdx=0;      } else {        return null;      }    }  } else   if (how[0].equals("leftdis")) {    twoloop:     for (headIdx=0; headIdx < daughterTrees.size(); headIdx++) {      childCat=Trees.FunctionNodeStripper.transformLabel(daughterTrees.get(headIdx));      for (int i=1; i < how.length; i++) {        if (how[i].equals(childCat)) {          found=true;          break twoloop;        }      }    }    if (!found) {      if (deflt) {        headIdx=0;      } else {        return null;      }    }  } else   if (how[0].equals("right")) {    twoloop:     for (int i=1; i < how.length; i++) {      for (headIdx=daughterTrees.size() - 1; headIdx >= 0; headIdx--) {        childCat=Trees.FunctionNodeStripper.transformLabel(daughterTrees.get(headIdx));        if (how[i].equals(childCat)) {          found=true;          break twoloop;        }      }    }    if (!found) {      if (deflt) {        headIdx=daughterTrees.size() - 1;      } else {        return null;      }    }  } else   if (how[0].equals("rightdis")) {    twoloop:     for (headIdx=daughterTrees.size() - 1; headIdx >= 0; headIdx--) {      childCat=Trees.FunctionNodeStripper.transformLabel(daughterTrees.get(headIdx));      for (int i=1; i < how.length; i++) {        if (DEBUG) {          System.err.println("Testing for whether " + how[i] + " == "+ childCat+ ": "+ ((how[i].equals(childCat)) ? "true" : "false"));        }        if (how[i].equals(childCat)) {          found=true;          break twoloop;        }      }    }    if (!found) {      if (deflt) {        headIdx=daughterTrees.size() - 1;      } else {        return null;      }    }  } else {    throw new RuntimeException("ERROR: invalid direction type to nonTerminalInfo map in AbstractCollinsHeadFinder.");  }  headIdx=postOperationFix(headIdx,daughterTrees);  return daughterTrees.get(headIdx);}  }
class C{  public void resetSynapseDiameters(){  for (  SynapseNode synapse : getSynapseNodes()) {    synapse.updateDiameter();  }  repaint();}  }
class C{  public boolean compareUIViewRoots(UIViewRoot one,UIViewRoot two){  if (null == one && null == two) {    return true;  }  if (null != one && null != two) {    if (null == one.getViewId() && null == two.getViewId()) {      return true;    }    if (null != one.getViewId() && null != two.getViewId()) {      return one.getViewId().equals(two.getViewId());    } else {      return false;    }  }  return false;}  }
class C{  @POST @Path("cron/{noteId}") @ZeppelinApi public Response registerCronJob(@PathParam("noteId") String noteId,String message) throws IOException, IllegalArgumentException {  LOG.info("Register cron job note={} request cron msg={}",noteId,message);  CronRequest request=gson.fromJson(message,CronRequest.class);  Note note=notebook.getNote(noteId);  if (note == null) {    return new JsonResponse<>(Status.NOT_FOUND,"note not found.").build();  }  if (!CronExpression.isValidExpression(request.getCronString())) {    return new JsonResponse<>(Status.BAD_REQUEST,"wrong cron expressions.").build();  }  Map<String,Object> config=note.getConfig();  config.put("cron",request.getCronString());  note.setConfig(config);  notebook.refreshCron(note.getId());  return new JsonResponse<>(Status.OK).build();}  }
class C{  @SuppressWarnings("unchecked") private void doTest(final LexiconRelation lex,final IV iv,final BigdataValue given){  try {    iv.getValue();    fail("Expecting: " + NotMaterializedException.class);  } catch (  NotMaterializedException e) {  }  final BigdataValue val;  if (!iv.isInline()) {    ((AbstractIV<BigdataValue,?>)iv).setValue(val=given);  } else {    val=iv.asValue(lex);  }  assertTrue(val == iv.getValue());  final IV<?,?> iv2=(IV<?,?>)SerializerUtil.deserialize(SerializerUtil.serialize(iv));  assertTrue(iv != iv2);{    final BigdataValue val2=iv2.getValue();    assertNotNull(val2);    assertTrue(val != val2);    assertTrue(val.getValueFactory() == val2.getValueFactory());    assertTrue(val.equals(val2));  }  if (iv.isInline()) {    assertTrue(val == iv.asValue(lex));    assertTrue(val == iv.getValue());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private int findClosestCenter(DoubleArrayListWritable[] clusterCenters,DoubleArrayListWritable value){  double minDistance=Double.MAX_VALUE;  double distanceFromI;  int clusterIndex=0;  for (int i=0; i < clusterCenters.length; i++) {    distanceFromI=euclideanDistance(clusterCenters[i],value,clusterCenters[i].size());    if (distanceFromI < minDistance) {      minDistance=distanceFromI;      clusterIndex=i;    }  }  return clusterIndex;}  }
class C{  public String replace(final StringBuffer source){  if (source == null) {    return null;  }  final StrBuilder buf=new StrBuilder(source.length()).append(source);  substitute(buf,0,buf.length());  return buf.toString();}  }
class C{  public void initializeSerialNode(SerialNode node){}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Logger.getLogger("com.google.api.client").setLevel(LOGGING_LEVEL);  GCMIntentService.register(getApplicationContext());  setContentView(R.layout.tasklist);  listView=(ListView)findViewById(R.id.list);  NoteApplication taskApplication=(NoteApplication)getApplication();  adapter=taskApplication.getAdapter(this);  listView.setAdapter(adapter);  registerForContextMenu(listView);  credential=GoogleAccountCredential.usingAudience(this,Ids.AUDIENCE);  SharedPreferences settings=getPreferences(Context.MODE_PRIVATE);  setAccountName(settings.getString(PREF_ACCOUNT_NAME,null));  Noteendpoint.Builder builder=new Noteendpoint.Builder(AndroidHttp.newCompatibleTransport(),new GsonFactory(),credential);  noteendpoint=Utils.updateBuilder(getResources(),builder).build();  if (credential.getAccountName() != null) {    fetchTasks();  }}  }
class C{  private void initiate(){  add(preview);  add(textField);  add(chooseColor);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void writeAttributes(Element element) throws IOException {  for (int i=0, size=element.attributeCount(); i < size; i++) {    Attribute attribute=element.attribute(i);    Namespace ns=attribute.getNamespace();    if ((ns != null) && (ns != Namespace.NO_NAMESPACE) && (ns != Namespace.XML_NAMESPACE)) {      String prefix=ns.getPrefix();      String uri=namespaceStack.getURI(prefix);      if (!ns.getURI().equals(uri)) {        writeNamespace(ns);        namespaceStack.push(ns);      }    }    String attName=attribute.getName();    if (attName.startsWith("xmlns:")) {      String prefix=attName.substring(6);      if (namespaceStack.getNamespaceForPrefix(prefix) == null) {        String uri=attribute.getValue();        namespaceStack.push(prefix,uri);        writeNamespace(prefix,uri);      }    } else     if (attName.equals("xmlns")) {      if (namespaceStack.getDefaultNamespace() == null) {        String uri=attribute.getValue();        namespaceStack.push(null,uri);        writeNamespace(null,uri);      }    } else {      char quote=format.getAttributeQuoteCharacter();      writer.write(" ");      writer.write(attribute.getQualifiedName());      writer.write("=");      writer.write(quote);      writeEscapeAttributeEntities(attribute.getValue());      writer.write(quote);    }  }}  }
class C{  public EchoBreakpointCollector(final BreakpointManager manager){  this.manager=manager;}  }
class C{  private void scheduleQueryManagementHosts(final State currentState){  QueryTask queryTask=QueryTask.create(currentState.hostQuerySpecification).setDirect(true);  sendRequest(HostUtils.getCloudStoreHelper(this).createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(queryTask).setCompletion(null));}  }
class C{  public XYLocation left(){  return west();}  }
class C{  public final boolean isPrivate(){  return Modifier.isPrivate(getModifiers());}  }
class C{  private int generatePermutationId(int[] data){  int permutationId=0;  for (int c=0; c < dimensions; c++) {    permutationId*=dimensions;    permutationId+=data[c];  }  return permutationId;}  }
class C{  @Override public String toString(){  return new String(buf,0,count);}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  String propName=evt.getPropertyName();  if (propName == MapBean.CursorProperty) {    fallbackMapBeanCursor=((Cursor)evt.getNewValue());  } else {    if (propName == MouseDelegator.ActiveModeProperty) {      MapMouseMode mmm=(MapMouseMode)evt.getNewValue();      setResetCursor(mmm.getModeCursor());    } else     if (propName == MapBean.LayersProperty) {      resetForLayers((Layer[])evt.getNewValue(),(Layer[])evt.getOldValue());    } else     if (propName != MapBean.ProjectionProperty) {      return;    }    setAllLabels(fudgeString);  }  initToolTip();}  }
class C{  public TaskDescriptionCompat(String label,Bitmap icon){  this(label,icon,0);}  }
class C{  public SyntaxScheme(boolean useDefaults){  styles=new Style[Token.NUM_TOKEN_TYPES];  if (useDefaults) {    restoreDefaults(null);  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  private FieldBean<T> introspectState(Class<?> assetClass){  if (assetClass == null) {    return new FieldNull<>();  }  for (  Field field : assetClass.getDeclaredFields()) {    if (Modifier.isStatic(field.getModifiers())) {      continue;    }    if (field.getType().equals(StateAsset.class)) {      return FieldBeanFactory.get(field);    }  }  return introspectState(assetClass.getSuperclass());}  }
class C{  public static double[] subtract(double[] first,double[] second) throws Exception {  if (first.length != second.length) {    throw new Exception("Lengths of arrays are not equal");  }  double[] returnValues=new double[first.length];  for (int i=0; i < returnValues.length; i++) {    returnValues[i]=first[i] - second[i];  }  return returnValues;}  }
class C{  private static int capAtMaximumSize(int queueSize,int maximumSize){  return Math.min(queueSize - 1,maximumSize) + 1;}  }
class C{  public int numProcessors(){  return m_processors;}  }
class C{  protected SentenceData09 preprocess(SentenceData09 instance){  if (lemmatizer != null) {    long start=System.currentTimeMillis();    lemmatizer.apply(instance);    lemmatizeTime+=System.currentTimeMillis() - start;  }  for (int i=0; i < instance.forms.length; i++) {    if (instance.forms[i].equals("-LRB-"))     instance.forms[i]="(";    if (instance.forms[i].equals("-RRB-"))     instance.forms[i]=")";  }  if (tagger != null) {    long start=System.currentTimeMillis();    tagger.apply(instance);    tagTime+=System.currentTimeMillis() - start;  }  if (mtagger != null) {    long start=System.currentTimeMillis();    mtagger.apply(instance);    for (int i=1; i < instance.pfeats.length; ++i) {      if (instance.pfeats[i] != null && !instance.pfeats[i].equals("_"))       instance.feats[i]=instance.pfeats[i].split("\\|");    }    mtagTime+=System.currentTimeMillis() - start;  } else {    instance.pfeats=new String[instance.forms.length];    Arrays.fill(instance.pfeats,"_");  }  if (parser != null) {synchronized (parser) {      long start=System.currentTimeMillis();      instance=parser.apply(instance);      dpTime+=System.currentTimeMillis() - start;    }  } else {    instance=new SentenceData09(instance);  }  return instance;}  }
class C{  @Override public byte[] convertIndexToRGB(final byte[] data){  isConverted=true;  if (componentCount == 4) {    return convert4Index(data);  } else {    return data;  }}  }
class C{  public int run(String[] args) throws Exception {  Options options=new Options();  Option helpOpts=OptionBuilder.withArgName("help").withDescription("show this help message").create("help");  Option webgraphOpts=OptionBuilder.withArgName("webgraphdb").hasArg().withDescription("the web graph db to use").create("webgraphdb");  options.addOption(helpOpts);  options.addOption(webgraphOpts);  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("help") || !line.hasOption("webgraphdb")) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("LinkRank",options);      return -1;    }    String webGraphDb=line.getOptionValue("webgraphdb");    analyze(new Path(webGraphDb));    return 0;  } catch (  Exception e) {    LOG.error("LinkAnalysis: " + StringUtils.stringifyException(e));    return -2;  }}  }
class C{  public boolean isTransactionPendingAck(SIPServerTransaction serverTransaction){  String branchId=((SIPRequest)serverTransaction.getRequest()).getTopmostVia().getBranch();  return this.terminatedServerTransactionsPendingAck.contains(branchId);}  }
class C{  public WETriangleMesh clear(){  super.clear();  edges.clear();  return this;}  }
class C{  public boolean moreWorkThan(StoredBlock other){  return chainWork.compareTo(other.chainWork) > 0;}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  private GeoMark reverse_geocode(final String text){  for (  String t : text.split(" ")) {    if (t.length() < 9)     continue;    String[] c=t.split(",");    if (c.length != 2)     continue;    try {      double lat=Double.parseDouble(c[0]);      double lon=Double.parseDouble(c[1]);      GeoMark mark=cityNear(lat,lon);      if (mark == null)       continue;      return mark;    } catch (    NumberFormatException e) {      continue;    }  }  return null;}  }
class C{  protected void onSlideAnimationEnd(){}  }
class C{  public static StatementSpecRaw compileEPL(String eplStatement,String eplStatementForErrorMsg,boolean addPleaseCheck,String statementName,EPServicesContext services,SelectClauseStreamSelectorEnum defaultStreamSelector){  return compileEPL(eplStatement,eplStatementForErrorMsg,addPleaseCheck,statementName,defaultStreamSelector,services.getEngineImportService(),services.getVariableService(),services.getSchedulingService(),services.getEngineURI(),services.getConfigSnapshot(),services.getPatternNodeFactory(),services.getContextManagementService(),services.getExprDeclaredService(),services.getTableService());}  }
class C{  public boolean isFinal(){  return this.isDeclaredFinal();}  }
class C{  public static String encodeString(String str){  try {    return URLEncoder.encode(str,"UTF-8");  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();    return str;  }}  }
class C{  public static boolean isLowerCase(Character self){  return Character.isLowerCase(self);}  }
class C{  @RequestProcessing(value="/admin/misc",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void updateMisc(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/misc.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  List<JSONObject> misc=new ArrayList<JSONObject>();  final Enumeration<String> parameterNames=request.getParameterNames();  while (parameterNames.hasMoreElements()) {    final String name=parameterNames.nextElement();    final String value=request.getParameter(name);    final JSONObject option=new JSONObject();    option.put(Keys.OBJECT_ID,name);    option.put(Option.OPTION_VALUE,value);    option.put(Option.OPTION_CATEGORY,Option.CATEGORY_C_MISC);    misc.add(option);  }  for (  final JSONObject option : misc) {    optionMgmtService.updateOption(option.getString(Keys.OBJECT_ID),option);  }  misc=optionQueryService.getMisc();  dataModel.put(Option.OPTIONS,misc);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public DNSInput(byte[] input){  array=input;  pos=0;  end=array.length;  saved_pos=-1;  saved_end=-1;}  }
class C{  public static boolean canDamage(Entity entity){  if (entity != null) {    if (!entity.isEntityInvulnerable() && entity.isEntityAlive()) {      if (entity instanceof EntityPlayer) {        if (((EntityPlayer)entity).capabilities.isCreativeMode) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public NotificationChain basicSetTypeArg(TypeArgument newTypeArg,NotificationChain msgs){  TypeArgument oldTypeArg=typeArg;  typeArg=newTypeArg;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypeRefsPackage.TYPE_VARIABLE_MAPPING__TYPE_ARG,oldTypeArg,newTypeArg);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private boolean init(){  manifestStorage=new ContentManifestStorage();  appConfigStorage=new ApplicationConfigStorage();  oldAppConfig=appConfigStorage.loadFromFolder(filesStructure.getWwwFolder());  if (oldAppConfig == null) {    setErrorResult(ChcpError.LOCAL_VERSION_OF_APPLICATION_CONFIG_NOT_FOUND,null);    return false;  }  oldManifest=manifestStorage.loadFromFolder(filesStructure.getWwwFolder());  if (oldManifest == null) {    setErrorResult(ChcpError.LOCAL_VERSION_OF_MANIFEST_NOT_FOUND,null);    return false;  }  return true;}  }
class C{  public void testTicket1363c(){  final JoinGroupNode jgn1a=new JoinGroupNode();  jgn1a.addChild(assignmentWithVar("z","x1"));  jgn1a.addChild(stmtPatternWithVar("x1"));  final JoinGroupNode jgn1b=new JoinGroupNode();  jgn1b.addChild(stmtPatternWithVar("x1"));  jgn1b.addChild(assignmentWithVar("z","x1"));  final JoinGroupNode jgn2a=new JoinGroupNode();  final JoinGroupNode jgn2b=new JoinGroupNode();  jgn2a.addChild(stmtPatternWithVar("x1"));  jgn2b.addChild(stmtPatternWithVar("x1"));  final UnionNode unA=new UnionNode();  unA.addChild(jgn1a);  unA.addChild(jgn2a);  final UnionNode unB=new UnionNode();  unB.addChild(jgn1b);  unB.addChild(jgn2b);  new Helper(){{      given=select(varNode(x),where(unA,subqueryWithVars("x1","x2")));      expected=select(varNode(x),where(unB,subqueryWithVars("x1","x2")));    }  }.test();}  }
class C{  public final double distanceToSphere(IMovingAgent agent,boolean useSphere){  double d=distance(agent);  if (useSphere)   d+=agent.getSphereRadius();  return d;}  }
class C{  protected boolean[] canHandleNClasses(AttrTypes attrTypes,int numClasses){  print("more than two class problems");  printAttributeSummary(attrTypes,Attribute.NOMINAL);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("number");  accepts.add("class");  int numTrain=getNumInstances(), numTest=getNumInstances(), missingLevel=0;  boolean attributeMissing=false, classMissing=false;  int numAttr=1, attrIndex=0;  return runBasicTest(attrTypes,numAttr,attrIndex,Attribute.NOMINAL,missingLevel,attributeMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  public int locateIndex(int index){  int min=0, max=m_Indices.length - 1;  if (max == -1) {    return -1;  }  while ((m_Indices[min] <= index) && (m_Indices[max] >= index)) {    int current=(max + min) / 2;    if (m_Indices[current] > index) {      max=current - 1;    } else     if (m_Indices[current] < index) {      min=current + 1;    } else {      return current;    }  }  if (m_Indices[max] < index) {    return max;  } else {    return min - 1;  }}  }
class C{  public final void removeHelperTextColorId(@ColorRes final int resourceId){  removeHelperTextColor(ContextCompat.getColor(getContext(),resourceId));}  }
class C{  public SyncProviderException(){  super();}  }
class C{  @Override public Generator<IPoint> construct(String[] args){  return new HorizontalLineGenerator(Double.valueOf(args[0]));}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static boolean isIconified(final Component c){  if ((c != null) && (c instanceof Frame)) {    return (((Frame)c).getExtendedState() & Frame.ICONIFIED) != 0;  }  return false;}  }
class C{  private boolean areNewPatchFilesAvailable() throws IOException {  String remoteHead=gitWrapper.getRemoteHead(binaryPatchRepoDirectory);  String localHead=gitWrapper.getLocalHead(binaryPatchRepoDirectory);  boolean needsPatching=!localHead.equals(remoteHead);  if (needsPatching) {    logger.info("New patch files are available ({})",remoteHead);  } else {    logger.info("Local patch repository is up to date ({})",remoteHead);  }  return needsPatching;}  }
class C{  public OscWorldComponent(final String name){  super(name);}  }
class C{  @Override public final boolean hasOutline(){  return res.hasOutline();}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  if (extensions == null)   return false;  return extensions.hasUnsupportedCriticalExtension();}  }
class C{  public Overlay disableClick(boolean yesNo){  mDisableClick=yesNo;  return this;}  }
class C{  public String toString(){  String result="KD Conditional Estimator. " + m_Estimators.length + " sub-estimators:\n";  for (int i=0; i < m_Estimators.length; i++) {    result+="Sub-estimator " + i + ": "+ m_Estimators[i];  }  return result;}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  public synchronized void reset(){  count=0;}  }
class C{  public Route<AsyncHandler<Response<ByteString>>> withResponsePayloadSizeHistogram(Route<AsyncHandler<Response<ByteString>>> route){  String endpointName=route.method() + ":" + route.uri();  return route.withMiddleware(responsePayloadSizeHistogram(endpointName));}  }
class C{  private BasicProperty updateBasicProperty(ViewPropertyDetails viewPropertyDetails,PropertyService propService) throws ParseException {  BasicProperty basicProperty=basicPropertyDAO.getBasicPropertyByPropertyID(viewPropertyDetails.getAssessmentNumber());  PropertyImpl oldProperty=(PropertyImpl)basicProperty.getProperty();  PropertyImpl propertyImpl=createPropertyWithBasicDetails(viewPropertyDetails.getPropertyTypeMaster());  Date propCompletionDate=null;  final PropertyTypeMaster propertyTypeMaster=getPropertyTypeMasterByCode(viewPropertyDetails.getPropertyTypeMaster());  propertyImpl.getPropertyDetail().setAppurtenantLandChecked(viewPropertyDetails.getIsExtentAppurtenantLand());  propertyImpl.getPropertyDetail().setEffectiveDate(convertStringToDate(viewPropertyDetails.getEffectiveDate()));  if (StringUtils.isNotBlank(viewPropertyDetails.getApartmentCmplx())) {    final Apartment apartment=getApartmentByCode(viewPropertyDetails.getApartmentCmplx());    propertyImpl.getPropertyDetail().setApartment(apartment);  }  propertyImpl.getPropertyDetail().setOccupancyCertificationNo(viewPropertyDetails.getOccupancyCertificationNo());  final PropertyMutationMaster propMutMstr=getPropertyMutationMaster(PROPERTY_MODIFY_REASON_ADD_OR_ALTER);  basicProperty.setPropertyMutationMaster(propMutMstr);  if (!propertyTypeMaster.getCode().equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND)) {    final FloorType floorType=floorTypeService.getFloorTypeById(Long.valueOf(viewPropertyDetails.getFloorType()));    final RoofType roofType=roofTypeService.getRoofTypeById(Long.valueOf(viewPropertyDetails.getRoofType()));    WallType wallType=null;    WoodType woodType=null;    if (StringUtils.isNotBlank(viewPropertyDetails.getWallType()))     wallType=wallTypeService.getWallTypeById(Long.valueOf(viewPropertyDetails.getWallType()));    if (StringUtils.isNotBlank(viewPropertyDetails.getWoodType()))     woodType=woodTypeService.getWoodTypeById(Long.valueOf(viewPropertyDetails.getWoodType()));    propertyImpl.getPropertyDetail().setFloorDetailsProxy(getFloorList(viewPropertyDetails.getFloorDetails()));    propertyImpl.getPropertyDetail().setLift(viewPropertyDetails.getHasLift());    propertyImpl.getPropertyDetail().setToilets(viewPropertyDetails.getHasToilet());    propertyImpl.getPropertyDetail().setWaterTap(viewPropertyDetails.getHasWaterTap());    propertyImpl.getPropertyDetail().setElectricity(viewPropertyDetails.getHasElectricity());    propertyImpl.getPropertyDetail().setAttachedBathRoom(viewPropertyDetails.getHasAttachedBathroom());    propertyImpl.getPropertyDetail().setWaterHarvesting(viewPropertyDetails.getHasWaterHarvesting());    propertyImpl.getPropertyDetail().setCable(viewPropertyDetails.getHasCableConnection());    propertyImpl.getPropertyDetail().setExtentSite(Double.valueOf(viewPropertyDetails.getExtentOfSite()));    propertyImpl=propService.createProperty(propertyImpl,viewPropertyDetails.getExtentOfSite(),propMutMstr.getCode(),propertyTypeMaster.getId().toString(),null,null,STATUS_WORKFLOW,propertyImpl.getDocNumber(),null,floorType != null ? floorType.getId() : null,roofType != null ? roofType.getId() : null,wallType != null ? wallType.getId() : null,woodType != null ? woodType.getId() : null,null);  } else {    propertyImpl.getPropertyDetail().setDateOfCompletion(convertStringToDate(viewPropertyDetails.getEffectiveDate()));    propertyImpl.getPropertyDetail().setCurrentCapitalValue(viewPropertyDetails.getCurrentCapitalValue());    propertyImpl.getPropertyDetail().setSurveyNumber(viewPropertyDetails.getSurveyNumber());    propertyImpl.getPropertyDetail().setPattaNumber(viewPropertyDetails.getPattaNumber());    final Area area=new Area();    area.setArea(viewPropertyDetails.getVacantLandArea());    propertyImpl.getPropertyDetail().setSitalArea(area);    propertyImpl.getPropertyDetail().setMarketValue(viewPropertyDetails.getMarketValue());    propertyImpl=propService.createProperty(propertyImpl,String.valueOf(viewPropertyDetails.getVacantLandArea()),propMutMstr.getCode(),propertyTypeMaster.getId().toString(),null,null,STATUS_WORKFLOW,propertyImpl.getDocNumber(),null,null,null,null,null,null);  }  if (!propertyTypeMaster.getCode().equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND))   propCompletionDate=propService.getLowestDtOfCompFloorWise(propertyImpl.getPropertyDetail().getFloorDetailsProxy()); else   propCompletionDate=propertyImpl.getPropertyDetail().getDateOfCompletion();  basicProperty.setPropOccupationDate(propCompletionDate);  propertyImpl.setPropertyModifyReason(PROPERTY_MODIFY_REASON_ADD_OR_ALTER);  propertyImpl.setBasicProperty(basicProperty);  propertyImpl.setEffectiveDate(propCompletionDate);  final Long oldPropTypeId=oldProperty.getPropertyDetail().getPropertyTypeMaster().getId();  final PropertyTypeMaster vacantPropTypeMstr=propertyTypeMasterDAO.getPropertyTypeMasterByCode(OWNERSHIP_TYPE_VAC_LAND);  if ((oldPropTypeId == vacantPropTypeMstr.getId() && propertyTypeMaster.getId() != vacantPropTypeMstr.getId() || oldPropTypeId != vacantPropTypeMstr.getId() && propertyTypeMaster.getId() == vacantPropTypeMstr.getId()) && !propertyImpl.getStatus().equals(STATUS_WORKFLOW))   if (vacantPropTypeMstr != null && vacantPropTypeMstr.getId() == propertyTypeMaster.getId())   changePropertyDetail(propertyImpl,new VacantProperty(),0); else   changePropertyDetail(propertyImpl,new BuiltUpProperty(),propertyImpl.getPropertyDetail().getNoofFloors());  Property modProperty=null;  try {    modProperty=propService.modifyDemand(propertyImpl,oldProperty);  } catch (  TaxCalculatorExeption e) {  }  if (modProperty != null && !modProperty.getDocuments().isEmpty())   propService.processAndStoreDocument(modProperty.getDocuments());  if (modProperty == null)   basicProperty.addProperty(propertyImpl); else   basicProperty.addProperty(modProperty);  return basicProperty;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private double calculateEMProposal(Tree tree,NodeRef node,ColourChangeMatrix mm,MetaPopulation mp,TreeColouring colouring){  double[] forward;  int colour;  BranchColouring history=null;  double logLikelihood=0.0;  if (tree.isRoot(node)) {    forward=mm.getEquilibrium();    colour=colouring.getNodeColour(node);    logLikelihood+=Math.log(forward[colour]);  } else {    int nodeNum=node.getNumber();    double[][] backward=nodePartialsEM[nodeNum];    int bottomInterval=node2Interval[nodeNum];    history=colouring.getBranchColouring(node);    for (int relinterval=backward.length - 1; relinterval >= 0; relinterval--) {      int interval=relinterval + bottomInterval;      double childHeight=interval2Height[interval];      double uppertime=interval2Height[interval + 1];      double time=uppertime - childHeight;      double[] mxElts=calculateMatrixElts(interval,node,tree,time,avgN0[interval],avgN1[interval],mm);      logLikelihood+=calculateConditionalBranchColouringEM(node,time,childHeight,mxElts,history);    }    colour=colouring.getNodeColour(node);  }  if (!tree.isExternal(node) && useNodeBias) {    double childTime=tree.getNodeHeight(node);    logLikelihood+=Math.log(mm.getEquilibrium(colour) / mp.getDemographic(childTime - tinyTime,colour));  }  for (int i=0; i < tree.getChildCount(node); i++) {    NodeRef child=tree.getChild(node,i);    logLikelihood+=calculateEMProposal(tree,child,mm,mp,colouring);  }  return logLikelihood;}  }
class C{  public long popLong(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Long value=(Long)wrapper.getValue();  return value.longValue();}  }
class C{  public DExtendedKeyUsage(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DExtendedKeyUsage.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public boolean hasInlinks(){  return fieldSetFlags()[2];}  }
class C{  private DistributionConfigImpl(){}  }
class C{  protected void restoreState(){  updateMatrix=true;}  }
class C{  public static <TK>List<Sequence<TK>> ngrams(Sequence<TK> sequence,int maxOrder){  int numNgrams=IntStream.range(0,maxOrder).map(null).reduce(null).getAsInt();  List<Sequence<TK>> ngrams=new ArrayList<>(numNgrams);  for (int i=0, sz=sequence.size(); i < sz; i++) {    for (int j=i + 1, jMax=Math.min(sz,i + maxOrder); j <= jMax; j++) {      Sequence<TK> ngram=sequence.subsequence(i,j);      ngrams.add(ngram);    }  }  return ngrams;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return KEYS;default :return null;}}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void run(final String inputNetworkFile,final String outputNetworkFile){  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=scenario.getNetwork();  new MatsimNetworkReader(scenario.getNetwork()).readFile(inputNetworkFile);  new org.matsim.core.network.algorithms.NetworkCleaner().run(network);  new NetworkWriter(network).write(outputNetworkFile);}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  public boolean up(){  if (isWithinCurrentMonth(mRow - 1,mColumn)) {    mRow--;    return false;  }  previousMonth();  mRow=5;  while (!isWithinCurrentMonth(mRow,mColumn)) {    mRow--;  }  return true;}  }
class C{  public void testConnect_BlockNoServer() throws IOException {  connectWithoutServer();  disconnectAfterConnected();}  }
class C{  public boolean isPrimitive(){  return (size() == 1 && getStatement(0).isPrimitiveInitialization());}  }
class C{  public boolean isReversed(){  return modifiers.contains(SGR.REVERSE);}  }
class C{  public static <T>int linearSearch(List<? extends T> list,Comparator<T> comparator,T key,int initialGuess){  int guess=initialGuess;  if (guess >= list.size()) {    guess=list.size() - 1;  }  int comparison=comparator.compare(list.get(guess),key);  if (comparison == 0) {    return guess;  }  if (comparison < 0) {    guess++;    while (guess < list.size()) {      comparison=comparator.compare(list.get(guess),key);      if (comparison == 0) {        return guess;      }      if (comparison > 0) {        return -(guess + 1);      }      guess++;    }    return -(list.size() + 1);  } else {    guess--;    while (guess >= 0) {      comparison=comparator.compare(list.get(guess),key);      if (comparison == 0) {        return guess;      }      if (comparison < 0) {        return -(guess + 2);      }      guess--;    }    return -1;  }}  }
class C{  public int length(){  if (isInMemory) {    return fontData.length;  } else {    return fullLength;  }}  }
class C{  public ExpandableHListConnector(ExpandableListAdapter expandableListAdapter){  mExpGroupMetadataList=new ArrayList<GroupMetadata>();  setExpandableListAdapter(expandableListAdapter);}  }
class C{  private static List<CReference> parseReferences(final int expressionId,final ICodeNodeProvider dataset) throws ParserException {  final List<CReference> references=new ArrayList<CReference>();  boolean hasReferences=false;  do {    final CReference reference=dataset.getReference();    if (reference == null) {      if (hasReferences) {        dataset.prev();      }      break;    }    hasReferences=true;    final int currentExpressionId=dataset.getExpressionTreeId();    if (expressionId != currentExpressionId) {      dataset.prev();      break;    }    references.add(reference);  } while (dataset.next());  return references;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public static boolean isEqual(Set<Feature> feats_1,Set<Feature> feats_2){  boolean isEqual=true;  if (feats_1.size() != feats_2.size())   return false;  Iterator<Feature> iter_1=feats_1.iterator();  Iterator<Feature> iter_2=feats_2.iterator();  while (iter_1.hasNext()) {    ArrayList<String> splited_1=new ArrayList(Arrays.asList(iter_1.next().getName().split(":")));    ArrayList<String> splited_2=new ArrayList(Arrays.asList(iter_2.next().getName().split(":")));    splited_1.removeAll(Collections.singleton(""));    splited_2.removeAll(Collections.singleton(""));    for (int i=1; i < splited_1.size(); i++) {      if (splited_1.get(i).equals(splited_2.get(i)))       continue; else       if (splited_1.get(i).equals("#word#") && splited_2.get(i).equals("#wd"))       continue; else       return false;    }  }  return isEqual;}  }
class C{  public DeleteSnapshotRequestBuilder(ElasticsearchClient client,DeleteSnapshotAction action,String repository,String snapshot){  super(client,action,new DeleteSnapshotRequest(repository,snapshot));}  }
class C{  public final void testRSAOtherPrimeInfo05(){  try {    new RSAOtherPrimeInfo(null,BigInteger.valueOf(2L),null);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  @Override public boolean isPoolable(){  debugCodeCall("isPoolable");  return false;}  }
class C{  @Override public void execute(){  try {    for (    final FileSet fileset : filesets) {      final DirectoryScanner ds=fileset.getDirectoryScanner(getProject());      final String[] includedFiles=ds.getIncludedFiles();      for (      final String filename : includedFiles) {        System.out.println(ds.getBasedir().getAbsolutePath() + File.separator + filename);        convert(ds.getBasedir().getAbsolutePath() + File.separator + filename);      }    }  } catch (  final Exception e) {    throw new BuildException(e);  }}  }
class C{  public static Animation loadAnimation(Context context,int anim,int duration){  Animation animation=AnimationUtils.loadAnimation(context,anim);  animation.setDuration(duration);  return animation;}  }
class C{  public synchronized void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){  if (listener == null) {    return;  }  if (changeSupport == null) {    changeSupport=new PropertyChangeSupport(this);  }  changeSupport.addPropertyChangeListener(propertyName,listener);}  }
class C{  public void quadTo(Object x1,Object y1,Object x2,Object y2){  if (size() == 0 || get(size() - 1).type == SegType.CLOSE) {    throw new IllegalPathStateException("quadTo is only allowed when a path segment is open");  }  add(new Segment(SegType.QUADTO,x1,y1,x2,y2));}  }
class C{  public static void writeFixInt32(final OutputStream output,final int val) throws IOException {  output.write((val >>> 24) & 0xFF);  output.write((val >>> 16) & 0xFF);  output.write((val >>> 8) & 0xFF);  output.write(val & 0xFF);}  }
class C{  public void cleanSnapshotsFromPredicateStatements(int currentSnapshot){  if (predicateStatements != null) {    predicateStatements.cleanSnapshots(currentSnapshot);    if (predicateStatements.isEmpty()) {      predicateStatements=null;    }  }}  }
class C{  public String reflection_log(){  return soot.PhaseOptions.getString(options,"reflection-log");}  }
class C{  public void fatal(Throwable throwable,String msg,Object arg0){  innerLog(Level.FATAL,throwable,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  @Override public int splitSegment(Point2D.Double split,double tolerance){  if (get(TRANSFORM) != null) {    try {      split=(Point2D.Double)get(TRANSFORM).inverseTransform(split,new Point2D.Double());    } catch (    NoninvertibleTransformException ex) {      System.err.println("Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.");    }  }  int i=getBezierPath().findSegment(split,tolerance);  if (i != -1) {    addNode(i + 1,new BezierPath.Node(split));  }  return i + 1;}  }
class C{  public static boolean checkIfAnyExportGroupsContainInitiatorAndBlockObject(DbClient dbClient,Set<URI> exportGroupURIs,Initiator initiator,BlockObject blockObject){  Iterator<ExportGroup> exportGroupIterator=dbClient.queryIterativeObjects(ExportGroup.class,exportGroupURIs,true);  while (exportGroupIterator.hasNext()) {    ExportGroup exportGroup=exportGroupIterator.next();    if (exportGroup.hasInitiator(initiator) && exportGroup.hasBlockObject(blockObject.getId())) {      return true;    }  }  return false;}  }
class C{  private static String join(Object[] array,String token){  if ((array != null) && (array.length > 0)) {    StringBuffer buffer=new StringBuffer();    for (int i=0; i < array.length; i++) {      if (i > 0)       buffer.append(token);      buffer.append(array[i].toString());    }    return buffer.toString();  }  return null;}  }
class C{  public static int indexOf(float[] array,float[] sub,int startIndex,int endIndex){  int sublen=sub.length;  if (sublen == 0) {    return startIndex;  }  int total=endIndex - sublen + 1;  float c=sub[0];  mainloop:   for (int i=startIndex; i < total; i++) {    if (Float.compare(array[i],c) != 0) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      if (Float.compare(sub[j],array[k]) != 0) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  protected void writeMessage(String message,PrintWriter outWriter) throws IOException {  System.out.println(message);  outWriter.println(message);}  }
class C{  private void extractParameters(Point[] bullEyeCornerPoints) throws NotFoundException {  boolean[] resab=sampleLine(bullEyeCornerPoints[0],bullEyeCornerPoints[1],2 * nbCenterLayers + 1);  boolean[] resbc=sampleLine(bullEyeCornerPoints[1],bullEyeCornerPoints[2],2 * nbCenterLayers + 1);  boolean[] rescd=sampleLine(bullEyeCornerPoints[2],bullEyeCornerPoints[3],2 * nbCenterLayers + 1);  boolean[] resda=sampleLine(bullEyeCornerPoints[3],bullEyeCornerPoints[0],2 * nbCenterLayers + 1);  if (resab[0] && resab[2 * nbCenterLayers]) {    shift=0;  } else   if (resbc[0] && resbc[2 * nbCenterLayers]) {    shift=1;  } else   if (rescd[0] && rescd[2 * nbCenterLayers]) {    shift=2;  } else   if (resda[0] && resda[2 * nbCenterLayers]) {    shift=3;  } else {    throw NotFoundException.getNotFoundInstance();  }  boolean[] parameterData;  boolean[] shiftedParameterData;  if (compact) {    shiftedParameterData=new boolean[28];    for (int i=0; i < 7; i++) {      shiftedParameterData[i]=resab[2 + i];      shiftedParameterData[i + 7]=resbc[2 + i];      shiftedParameterData[i + 14]=rescd[2 + i];      shiftedParameterData[i + 21]=resda[2 + i];    }    parameterData=new boolean[28];    for (int i=0; i < 28; i++) {      parameterData[i]=shiftedParameterData[(i + shift * 7) % 28];    }  } else {    shiftedParameterData=new boolean[40];    for (int i=0; i < 11; i++) {      if (i < 5) {        shiftedParameterData[i]=resab[2 + i];        shiftedParameterData[i + 10]=resbc[2 + i];        shiftedParameterData[i + 20]=rescd[2 + i];        shiftedParameterData[i + 30]=resda[2 + i];      }      if (i > 5) {        shiftedParameterData[i - 1]=resab[2 + i];        shiftedParameterData[i + 10 - 1]=resbc[2 + i];        shiftedParameterData[i + 20 - 1]=rescd[2 + i];        shiftedParameterData[i + 30 - 1]=resda[2 + i];      }    }    parameterData=new boolean[40];    for (int i=0; i < 40; i++) {      parameterData[i]=shiftedParameterData[(i + shift * 10) % 40];    }  }  correctParameterData(parameterData,compact);  getParameters(parameterData);}  }
class C{  protected boolean isTimeoutException(Throwable t,long startTime){  long elapsedTime=System.currentTimeMillis() - startTime + 10;  if (requestLogger.isLoggingEnabled()) {    requestLogger.log("ELAPSED TIME = " + elapsedTime + ", CT = "+ connectionTimeout+ ", RT = "+ readTimeout);  }  if (isConnected) {    return elapsedTime >= readTimeout;  } else {    return elapsedTime >= connectionTimeout;  }}  }
class C{  public static void removeLightSource(IDynamicLightSource lightToRemove){  if (lightToRemove != null && lightToRemove.getAttachmentEntity() != null) {    World world=lightToRemove.getAttachmentEntity().worldObj;    if (world != null) {      DynamicLightSourceContainer iterContainer=null;      ConcurrentLinkedQueue<DynamicLightSourceContainer> lightList=instance.worldLightsMap.get(world);      if (lightList != null) {        Iterator<DynamicLightSourceContainer> iter=lightList.iterator();        while (iter.hasNext()) {          iterContainer=iter.next();          if (iterContainer.getLightSource().equals(lightToRemove)) {            iter.remove();            break;          }        }        if (iterContainer != null) {          world.checkLightFor(EnumSkyBlock.BLOCK,new BlockPos(iterContainer.getX(),iterContainer.getY(),iterContainer.getZ()));        }      }    }  }}  }
class C{  protected boolean allAggregateFieldsAreNull(AbstractRecord databaseRow){  Vector fields=getReferenceFields();  int size=fields.size();  for (int index=0; index < size; index++) {    DatabaseField field=(DatabaseField)fields.get(index);    Object value=databaseRow.get(field);    if (value != null) {      return false;    }  }  return true;}  }
class C{  public static LiveVideoContent createGenericLiveVideoContent(){  return new LiveVideoContent("video/*");}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  public int count(){  return SQLiteUtils.intQuery(toCountSql(),getArguments());}  }
class C{  @SafeVarargs public DisjunctiveValidator(@NonNull final CharSequence errorMessage,@NonNull final Validator<Type>... validators){  super(errorMessage);  setValidators(validators);}  }
class C{  public FilterSpecRaw(){}  }
class C{  public boolean isFixedView(View v){{    ArrayList<FixedViewInfo> where=mHeaderViewInfos;    int len=where.size();    for (int i=0; i < len; ++i) {      FixedViewInfo info=where.get(i);      if (info.view == v) {        return true;      }    }  }{    ArrayList<FixedViewInfo> where=mFooterViewInfos;    int len=where.size();    for (int i=0; i < len; ++i) {      FixedViewInfo info=where.get(i);      if (info.view == v) {        return true;      }    }  }  return false;}  }
class C{  public JsonWriter(final Writer writer,final int mode){  this(writer,mode,new Format());}  }
class C{  public static S1Interval fullLng(){  return S1Interval.full();}  }
class C{  private void installMetaClassCreationHandle(){  try {    final Class customMetaClassHandle=Class.forName("groovy.runtime.metaclass.CustomMetaClassCreationHandle");    final Constructor customMetaClassHandleConstructor=customMetaClassHandle.getConstructor(new Class[]{});    this.metaClassCreationHandle=(MetaClassCreationHandle)customMetaClassHandleConstructor.newInstance();  } catch (  final ClassNotFoundException e) {    this.metaClassCreationHandle=new MetaClassCreationHandle();  }catch (  final Exception e) {    throw new GroovyRuntimeException("Could not instantiate custom Metaclass creation handle: " + e,e);  }}  }
class C{  public ActiveStateReferenceExpression createActiveStateReferenceExpression(){  ActiveStateReferenceExpressionImpl activeStateReferenceExpression=new ActiveStateReferenceExpressionImpl();  return activeStateReferenceExpression;}  }
class C{  public static Calendar convertFromGmt(Calendar calendar){  return addOrRemoveGmtOffset(calendar,false);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  @ConstructorProperties({"bevelType","highlightOuterColor","highlightInnerColor","shadowOuterColor","shadowInnerColor"}) public SoftBevelBorder(int bevelType,Color highlightOuterColor,Color highlightInnerColor,Color shadowOuterColor,Color shadowInnerColor){  super(bevelType,highlightOuterColor,highlightInnerColor,shadowOuterColor,shadowInnerColor);}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public void actionPerformed(final ActionEvent e){  Object o=e.getSource();  if (o == tsUseAdaptation) {    checkUsingAdaptation();  }}  }
class C{  private static long parseTfdt(ParsableByteArray tfdt){  tfdt.setPosition(ATOM_HEADER_SIZE);  int fullAtom=tfdt.readInt();  int version=parseFullAtomVersion(fullAtom);  return version == 1 ? tfdt.readUnsignedLongToLong() : tfdt.readUnsignedInt();}  }
class C{  public static TSetter createTSetter(String name,String fparName,TypeRef fparTypeRef){  final TSetter ph=TypesFactory.eINSTANCE.createTSetter();  ph.setName(name);  if (fparName != null || fparTypeRef != null) {    final TFormalParameter fpar=TypesFactory.eINSTANCE.createTFormalParameter();    fpar.setName(fparName);    fpar.setTypeRef(TypeUtils.copyIfContained(TypeRefsFactory.eINSTANCE.createUnknownTypeRef()));    ph.setFpar(fpar);  }  return ph;}  }
class C{  static boolean clean(File dir){  boolean ok=true;  for (  File f : dir.listFiles()) {    if (f.isDirectory())     ok&=clean(f);    ok&=f.delete();  }  return ok;}  }
class C{  public static void main(String[] args){  doLoop(TurkanaSouthModel.class,args);  System.exit(0);}  }
class C{  private void dropUpstreamFrom(long absolutePosition){  int relativePosition=(int)(absolutePosition - totalBytesDropped);  int allocationIndex=relativePosition / allocationLength;  int allocationOffset=relativePosition % allocationLength;  int allocationDiscardCount=dataQueue.size() - allocationIndex - 1;  if (allocationOffset == 0) {    allocationDiscardCount++;  }  for (int i=0; i < allocationDiscardCount; i++) {    allocator.release(dataQueue.removeLast());  }  lastAllocation=dataQueue.peekLast();  lastAllocationOffset=allocationOffset == 0 ? allocationLength : allocationOffset;}  }
class C{  public _BuildControllerUpdate(final _BuildControllerUpdate_Flag[] flags){  super(flags);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEToolBarUI();}  }
class C{  private void append(String plain) throws Exception {  buffer.append(plain);}  }
class C{  public boolean isReadWrite(){  return m_textArea.isEditable();}  }
class C{  protected void sequence_AwaitExpression(ISerializationContext context,AwaitExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.AWAIT_EXPRESSION__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.AWAIT_EXPRESSION__EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0(),semanticObject.getExpression());  feeder.finish();}  }
class C{  public static IBrowserDescriptor chooseBrowser(Shell shell,IBrowserDescriptor initialSelection){  ElementListSelectionDialog dialog=new BrowserSelectionDialog(shell,initialSelection);  if (dialog.open() == Window.OK) {    return (IBrowserDescriptor)dialog.getFirstResult();  }  return null;}  }
class C{  public static void print(final int[] program){  System.out.println("");  final String[] toPrint=getInstructionsAsStringArray(program);  for (  final String aToPrint : toPrint) {    System.out.println(aToPrint);  }  System.out.println("");  System.out.println("");}  }
class C{  public BadLocationException(String message){  super(message);}  }
class C{  public static void write(float latPoint,float lonPoint,float majorAxisSpan,float minorAxisSpan,int units,float rotationAngle,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.ELLIPSE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_ELLIPSE);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeFloat(latPoint);  dos.writeFloat(lonPoint);  dos.writeFloat(majorAxisSpan);  dos.writeFloat(minorAxisSpan);  dos.writeByte(units);  dos.writeFloat(rotationAngle);  properties.write(dos);}  }
class C{  public Long toLong(){  return new Long(value);}  }
class C{  public static boolean notNull(Object... objects){  for (  Object object : objects) {    if (object == null)     return false;  }  return true;}  }
class C{  void paintGlassImpl(Graphics g){  if (getParent() != null) {    super.paintGlassImpl(g);    return;  }  if (glassPane != null) {    int tx=g.getTranslateX();    int ty=g.getTranslateY();    g.translate(-tx,-ty);    glassPane.paint(g,getBounds());    g.translate(tx,ty);  }  paintGlass(g);  if (dragged != null && dragged.isDragAndDropInitialized()) {    int[] c=g.getClip();    g.setClip(0,0,getWidth(),getHeight());    dragged.drawDraggedImage(g);    g.setClip(c);  }}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  RpsPositionIcon l=new RpsPositionIcon(ed);  String name=element.getAttribute("active").getValue();  NamedIcon active=NamedIcon.getIconByName(name);  if (active == null) {    active=ed.loadFailed("RpsPositionIcon: icon \"active\" ",name);    if (active == null) {      log.info("RpsPositionIcon: icon \"active\" removed for url= " + name);      return;    }  }  l.setActiveIcon(active);  name=element.getAttribute("error").getValue();  NamedIcon error=NamedIcon.getIconByName(name);  if (error == null) {    error=ed.loadFailed("RpsPositionIcon: icon \"error\" ",name);    if (error == null) {      log.info("RpsPositionIcon: \"error\" removed for url= " + name);      return;    }  }  l.setErrorIcon(error);  try {    Attribute a=element.getAttribute("rotate");    if (a != null) {      int rotation=element.getAttribute("rotate").getIntValue();      active.setRotation(rotation,l);      error.setRotation(rotation,l);    }  } catch (  org.jdom2.DataConversionException e) {  }  Attribute a=element.getAttribute("momentary");  if ((a != null) && a.getValue().equals("true")) {    l.setMomentary(true);  } else {    l.setMomentary(false);  }  a=element.getAttribute("showid");  if ((a != null) && a.getValue().equals("true")) {    l.setShowID(true);  } else {    l.setShowID(false);  }  a=element.getAttribute("filter");  if (a != null) {    l.setFilter(a.getValue());  }  double sxScale=0.;  double syScale=0.;  int sxOrigin=0;  int syOrigin=0;  try {    sxScale=element.getAttribute("sxscale").getDoubleValue();    syScale=element.getAttribute("syscale").getDoubleValue();    sxOrigin=element.getAttribute("sxorigin").getIntValue();    syOrigin=element.getAttribute("syorigin").getIntValue();  } catch (  NullPointerException e1) {    log.error("missing transform attribute");  }catch (  org.jdom2.DataConversionException e2) {    log.error("failed to convert transform attributes");  }  l.setTransform(sxScale,syScale,sxOrigin,syOrigin);  NamedIcon icon=loadIcon(l,"active",element,"RpsPositionIcon ",ed);  if (icon != null) {    l.setActiveIcon(icon);  }  icon=loadIcon(l,"error",element,"RpsPositionIcon ",ed);  if (icon != null) {    l.setErrorIcon(icon);  }  ed.putItem(l);  loadCommonAttributes(l,Editor.SENSORS,element);}  }
class C{  public DelegationSpec(PrincipalId delegate,boolean delegable,DelegationHistory delegationHistory){  Validate.notNull(delegationHistory);  this.delegate=delegate;  this.delegable=delegable;  this.history=delegationHistory;}  }
class C{  public void dataRefresh(int row,boolean fireStatusEvent){  log.info("Row=" + row);  if (row < 0 || m_sort.size() == 0 || m_inserting)   return;  MSort sort=(MSort)m_sort.get(row);  Object[] rowData=getDataAtRow(row);  dataIgnore();  String where=getWhereClause(rowData);  if (where == null || where.length() == 0)   where="1=2";  String sql=m_SQL_Select + " WHERE " + where;  sort=(MSort)m_sort.get(row);  Object[] rowDataDB=null;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    if (rs.next())     rowDataDB=readData(rs);  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    fireTableRowsUpdated(row,row);    fireDataStatusEEvent("RefreshError",sql,true);    return;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  setDataAtRow(row,rowDataDB);  m_rowData=null;  m_changed=false;  m_rowChanged=-1;  m_inserting=false;  fireTableRowsUpdated(row,row);  if (fireStatusEvent)   fireDataStatusIEvent(DATA_REFRESH_MESSAGE,"");}  }
class C{  private int threshHoldExtractCluster(List<Integer> orderedFile,int[] designations){  int clustersFound=0;  OnLineStatistics stats=new OnLineStatistics();  for (  double r : reach_d)   if (!Double.isInfinite(r))   stats.add(r);  double thresh=stats.getMean() + stats.getStandardDeviation();  for (int i=0; i < orderedFile.size(); i++) {    if (reach_d[orderedFile.get(i)] >= thresh)     continue;    while (i < orderedFile.size() && reach_d[orderedFile.get(i)] < thresh)     designations[i++]=clustersFound;    while (i + 1 < orderedFile.size() && reach_d[orderedFile.get(i)] < reach_d[orderedFile.get(i + 1)])     designations[i++]=clustersFound;    clustersFound++;  }  return clustersFound;}  }
class C{  public static ComponentUI createUI(JComponent c){  return labelUI;}  }
class C{  public static <M>JsoArray<M> from(M... array){  JsoArray<M> result=JsoArray.create();  for (  M s : array) {    if (s != null)     result.add(s);  }  return result;}  }
class C{  public static Ordering desc(String propertyName,NullOrdering nullOrdering){  return new Ordering(propertyName,Order.DESCENDING,nullOrdering);}  }
class C{  public static ProgressDialog createSpinnerProgressDialog(Context context,int messageId,DialogInterface.OnCancelListener onCancelListener){  return createProgressDialog(true,context,messageId,onCancelListener);}  }
class C{  public EncryptedSageFile(SageFileSource sageFileSource,byte crypt[]) throws IOException {  if (getEncryptedRandomFile(sageFileSource) != null)   throw new IOException("Cannot layer the same encryption on top of itself.");  this.sageFileSource=sageFileSource;  cryptoKeys=crypt;}  }
class C{  @Override protected void parse(){  try {    maximumSearchResultsGUI=getConfig().getInt(PARAM_MAXIMUM_RESULTS_GUI,DEFAULT_MAXIMUM_RESULTS_GUI);  } catch (  ConversionException e) {    LOGGER.error("Failed to load the \"Maximum search results in GUI\" configuration: " + e.getMessage(),e);    maximumSearchResultsGUI=DEFAULT_MAXIMUM_RESULTS_GUI;  }}  }
class C{  public void read(final BufferedReader reader,final List<String> comments) throws IOException {  while (true) {    final String line=reader.readLine();    if (line == null) {      break;    }    if (line.startsWith("#")) {      if (comments != null) {        comments.add(line);      }    } else {      final StringTokenizer tk=new StringTokenizer(line);      if (!tk.hasMoreTokens()) {        continue;      }      String key=tk.nextToken();      key=trimWord(key);      final WordEntry entry=new WordEntry();      entry.setNormalized(key);      readEntryLine(key,tk,entry);      addEntry(key,entry);    }  }}  }
class C{  public static String debugUserAgentString(){  return UserAgentRuntimeProperties.get().getUserAgent();}  }
class C{  public void dequeueGroupChatMessage(ChatMessage msg) throws PayloadException, NetworkException, SessionNotEstablishedException {  final GroupChatSession session=mImService.getGroupChatSession(mChatId);  if (session == null) {    mImService.rejoinGroupChatAsPartOfSendOperation(mChatId);  } else   if (session.isMediaEstablished()) {    setChatMessageStatusAndTimestamp(msg,Status.SENDING);    sendChatMessageWithinSession(session,msg);  } else   if (session.isInitiatedByRemote()) {    if (sLogger.isActivated()) {      sLogger.debug("Group chat session with chatId '" + mChatId + "' is pending for acceptance, accept it.");    }    session.acceptSession();  } else {    throw new SessionNotEstablishedException("The existing group chat session with chatId '" + mChatId + "' is not established right now!");  }}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public static void showAlert(Context context,int title,int msg,int ok,int cancel,DialogInterface.OnClickListener lOk,DialogInterface.OnClickListener lCancel){  AlertDialog dialog=buildAlert(context,title,msg,ok,cancel,lOk,lCancel);  if (dialog != null) {    dialog.show();  }}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError("CodeTemplate implementation not Cloneable: " + getClass().getName());  }}  }
class C{  public static void touch(FileSystem fs,Path path) throws IOException {  fs.delete(path,true);  writeTextFile(fs,path,null,false);}  }
class C{  public Iterator<String> keys(){  return this.myHashMap.keySet().iterator();}  }
class C{  private TimestampEqualsRule(final String value){  super();  boolean dateFormatFound=false;  for (int i=0; i < DATE_FORMATS.length; i++) {    SimpleDateFormat df=DATE_FORMATS[i];    duration=DATE_DURATIONS[i];    try {      Date parse=df.parse(value);      timeStamp=parse.getTime();      dateFormatFound=true;      LOGGER.debug(String.format("Date format for %s detected: %s with duration %dms",value,df.toPattern(),duration));      break;    } catch (    ParseException pe) {    }  }  if (!dateFormatFound) {    for (int i=0; i < TIME_FORMATS.length; i++) {      SimpleDateFormat df=TIME_FORMATS[i];      duration=TIME_DURATIONS[i];      try {        Date parse=df.parse(value);        GregorianCalendar calendar=new GregorianCalendar();        calendar.setTime(parse);        GregorianCalendar todayCal=new GregorianCalendar();        todayCal.set(Calendar.HOUR_OF_DAY,calendar.get(Calendar.HOUR_OF_DAY));        todayCal.set(Calendar.MINUTE,calendar.get(Calendar.MINUTE));        todayCal.set(Calendar.SECOND,calendar.get(Calendar.SECOND));        todayCal.set(Calendar.MILLISECOND,calendar.get(Calendar.MILLISECOND));        timeStamp=todayCal.getTimeInMillis();        LOGGER.debug(String.format("Date format for %s detected: %s with duration %dms",value,df.toPattern(),duration));        dateFormatFound=true;        break;      } catch (      ParseException pe) {      }    }  }  if (!dateFormatFound) {    LOGGER.debug(String.format("Date format for %s is not found",value));    throw new IllegalArgumentException("Could not parse date: " + value);  }}  }
class C{  private void dialogChanged(){  IResource container=ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(getContainerName()));  String fileName=getFileName();  if (getContainerName().length() == 0) {    updateStatus("File container must be specified");    return;  }  if (container == null || (container.getType() & (IResource.PROJECT | IResource.FOLDER)) == 0) {    updateStatus("File container must exist");    return;  }  if (!container.isAccessible()) {    updateStatus("Project must be writable");    return;  }  if (fileName.length() == 0) {    updateStatus("File name must be specified");    return;  }  if (fileName.replace('\\','/').indexOf('/',1) > 0) {    updateStatus("File name must be valid");    return;  }  int dotLoc=fileName.lastIndexOf('.');  if (dotLoc != -1) {    String ext=fileName.substring(dotLoc + 1);    if (ext.equalsIgnoreCase("ump") == false) {      updateStatus("File extension must be \"ump\"");      return;    }  }  updateStatus(null);}  }
class C{  public Extensions generate(){  Extension[] exts=new Extension[extOrdering.size()];  for (int i=0; i != extOrdering.size(); i++) {    exts[i]=(Extension)extensions.get(extOrdering.elementAt(i));  }  return new Extensions(exts);}  }
class C{  @Override public void sendRequest(Exchange exchange,Request request){  if (exchange.getFailedTransmissionCount() > 0) {    super.sendRequest(exchange,request);  } else   if (processMessage(exchange,request)) {    checkAging(exchange);    super.sendRequest(exchange,request);  }}  }
class C{  @Override public void pause(boolean shouldBePaused){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else   if (myHost == null && progress != previousProgress) {    System.out.println(progress + "%");  }  previousProgress=progress;}  }
class C{  public void testGetName(){  String expectedReturn="XOR-ONLY";  String actualReturn=xorOnly.getName();  assertEquals("Is name correct",expectedReturn,actualReturn);}  }
class C{  public ProgressBar(){  this(0,100);}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public static void generateClass(StringBuilder builder){  builder.append("/**\n");  builder.append(" * THIS CLASS WILL BE OVERRIDDEN BY MAVEN BUILD. DON'T EDIT CLASS, IT WILL HAVE NO EFFECT.\n");  builder.append(" */\n");  builder.append("@Singleton\n");  builder.append("@SuppressWarnings(\"rawtypes\")\n");  builder.append("public class DtoFactoryVisitorRegistry\n");  builder.append("{\n");  builder.append("\n");  builder.append(GeneratorUtils.TAB + "/** Contains the map will all the DtoFactoryVisitor Providers <FullClassFQN, Provider>. */\n");  builder.append(GeneratorUtils.TAB + "protected final Map<String, Provider> providers = new HashMap<>();\n\n");  builder.append(GeneratorUtils.TAB + "/** Constructor that accepts all found DtoFactoryVisitor Providers. */\n");  builder.append(GeneratorUtils.TAB + "@Inject\n");  builder.append(GeneratorUtils.TAB + "public DtoFactoryVisitorRegistry(\n");  Iterator<Entry<String,String>> entryIterator=dtoFactoryVisitors.entrySet().iterator();  while (entryIterator.hasNext()) {    Entry<String,String> entry=entryIterator.next();    String hasComma=entryIterator.hasNext() ? "," : "";    String classFQN=String.format("Provider<%s>",entry.getKey());    String variableName=entry.getValue().toLowerCase();    builder.append(GeneratorUtils.TAB2 + classFQN + " "+ variableName+ hasComma+ "\n");  }  builder.append(GeneratorUtils.TAB + ")\n");  builder.append(GeneratorUtils.TAB + "{\n");  for (  Entry<String,String> entries : dtoFactoryVisitors.entrySet()) {    String fullFqn=entries.getKey();    String variableName=entries.getValue().toLowerCase();    String putStatement=String.format("this.providers.put(\"%s\", %s);%n",fullFqn,variableName);    builder.append(GeneratorUtils.TAB2 + putStatement);  }  builder.append(GeneratorUtils.TAB + "}\n\n");  builder.append(GeneratorUtils.TAB + "/** Returns  the map will all the DtoFactoryVisitor Providers <FullClassFQN, Provider>. */\n");  builder.append(GeneratorUtils.TAB + "public Map<String, Provider> getDtoFactoryVisitors()\n");  builder.append(GeneratorUtils.TAB + "{\n");  builder.append(GeneratorUtils.TAB2 + "return providers;\n");  builder.append(GeneratorUtils.TAB + "}\n");  builder.append("}\n");}  }
class C{  public void removeMenuDragMouseListener(MenuDragMouseListener l){  listenerList.remove(MenuDragMouseListener.class,l);}  }
class C{  protected SVGOMLineElement(){}  }
class C{  ServiceRefAmp lookup(String path,PodRef podCaller){  if (_linkServiceRef.address().startsWith("local:")) {    int p=path.indexOf('/',1);    if (p > 0) {      return (ServiceRefAmp)_rampManager.service(path.substring(p));    } else {      return (ServiceRefAmp)_rampManager.service(path);    }  } else {    ServiceRefAmp linkRef=getLinkServiceRef(podCaller);    return linkRef.onLookup(path);  }}  }
class C{  public boolean isMatchCase(){  return matchCase;}  }
class C{  private void refreshDisplay(){  boolean isConnected=Matrix.getInstance(getActivity()).isConnected();  PreferenceManager preferenceManager=getPreferenceManager();  UserAvatarPreference avatarPreference=(UserAvatarPreference)preferenceManager.findPreference("matrixId");  avatarPreference.refreshAvatar();  avatarPreference.setEnabled(isConnected);  final EditTextPreference displaynamePref=(EditTextPreference)preferenceManager.findPreference(getActivity().getResources().getString(R.string.settings_display_name));  displaynamePref.setSummary(mSession.getMyUser().displayname);  displaynamePref.setText(mSession.getMyUser().displayname);  displaynamePref.setEnabled(isConnected);  final EditTextPreference changePasswordPref=(EditTextPreference)preferenceManager.findPreference(getActivity().getResources().getString(R.string.settings_change_password));  changePasswordPref.setEnabled(isConnected);  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  BingRuleSet rules=mSession.getDataHandler().pushRules();  GcmRegistrationManager gcmMgr=Matrix.getInstance(getActivity()).getSharedGCMRegistrationManager();  for (  String resourceText : mPushesRuleByResourceId.keySet()) {    SwitchPreference switchPreference=(SwitchPreference)preferenceManager.findPreference(resourceText);    if (null != switchPreference) {      if (resourceText.equals(getResources().getString(R.string.settings_enable_this_device))) {        switchPreference.setChecked(gcmMgr.areDeviceNotificationsAllowed());      } else       if (resourceText.equals(getResources().getString(R.string.settings_turn_screen_on))) {        switchPreference.setChecked(gcmMgr.isScreenTurnedOn());      } else {        switchPreference.setEnabled((null != rules) && isConnected);        switchPreference.setChecked(preferences.getBoolean(resourceText,false));      }    }  }}  }
class C{  public void resetTimestamp(){  ts=System.currentTimeMillis();}  }
class C{  public void testDatabaseDriverPropertiesEmptyPasswordPropertySetsPasswordOnDataSource(){  String driverPropertyString="password=;CreateDatabase=create";  String propertyString=DatasourcePropertySet.CONNECTION_PROPERTIES + "=" + driverPropertyString;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals("",ds.getPassword());}  }
class C{  public static void exportToJPG(OutputStream os,NLPCanvasRenderer renderer,NLPInstance instance,double scaleFactor) throws IOException {  BufferedImage image=getImage(renderer,instance,scaleFactor);  ImageIO.write(image,"JPG",os);}  }
class C{  public OnlineAMM(double lambda,int classBudget){  setLambda(lambda);  setClassBudget(classBudget);  setPruneFrequency(DEFAULT_PRUNE_FREQUENCY);  setC(DEFAULT_PRUNE_CONSTANT);}  }
class C{  @Override public PatchResult applyPatch(PatchData patchData){  String typeName=patchData.getTypeName();  String applyVersion=patchData.getApplyToVersion();  TypesDef updatedTypeDef;  PatchResult result;  try {    if (checkIfTypeExists(typeName,metadataService)) {      TypesDef typesDef=getTypeDef(typeName);      String currentVersion=getTypeVersion(typeName);      if (currentVersion == null || currentVersion.equalsIgnoreCase(applyVersion) || currentVersion.startsWith(applyVersion + ".")) {        updatedTypeDef=updateTypesDef(typesDef,patchData);        if (updatedTypeDef != null) {          metadataService.updateType(TypesSerialization.toJson(updatedTypeDef));          LOG.info("updated " + patchData.getTypeName() + " type from version "+ patchData.getApplyToVersion()+ " to "+ patchData.getUpdateToVersion());          result=new PatchResult("patch applied successfully!",PatchStatus.SUCCESS);        } else {          LOG.error("failed to create updated typedef for type=" + typeName + "; applyToVersion="+ applyVersion+ "; updateToVersion="+ patchData.getUpdateToVersion());          result=new PatchResult("patch failed!",PatchStatus.FAILED);        }      } else {        LOG.info("patch skipped for " + patchData.getTypeName());        result=new PatchResult("patch skipped!",PatchStatus.SKIPPED);      }    } else {      LOG.error("failed to apply patch (typeName=" + typeName + "; applyToVersion="+ applyVersion+ "; updateToVersion="+ patchData.getUpdateToVersion()+ "): type doesn't exist");      result=new PatchResult("patch failed!",PatchStatus.FAILED);    }  } catch (  AtlasException e) {    LOG.error("error in updating type for " + patchData.getTypeName());    result=new PatchResult("unable to update type",PatchStatus.FAILED);  }catch (  JSONException e) {    LOG.error("error in updating typedef for  " + patchData.getTypeName());    result=new PatchResult("unable to update typedef",PatchStatus.FAILED);  }  return result;}  }
class C{  private void stackEdges(HalfEdge node){  HalfEdge e=node;  do {    if (!MarkHalfEdge.isMarked(e))     nodeEdgeStack.add(e);    e=e.oNext();  } while (e != node);}  }
class C{  protected boolean redirectToMpUrl(ServiceAccess serviceAccess,HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws IOException {  String uri=httpRequest.getRequestURI();  ConfigurationService cs=serviceAccess.getService(ConfigurationService.class);  if (httpRequest.getRequestURL() == null)   return false;  String requestUrl=httpRequest.getRequestURL().toString();  String queryString=httpRequest.getQueryString() == null ? "" : httpRequest.getQueryString();  String mpRedirect="";  if (ADMValidator.isHttpsScheme(requestUrl)) {    mpRedirect=getRedirectMpUrlHttps(cs);  } else {    mpRedirect=getRedirectMpUrlHttp(cs);  }  if (uri != null && !ADMStringUtils.isBlank(mpRedirect)) {    String suffix=mpRedirect.contains("?") ? mpRedirect.substring(mpRedirect.lastIndexOf('?') + 1) : "";    if (!mpRedirect.contains(uri.replaceFirst("/index.jsf","")) || !suffix.equals(queryString)) {      JSFUtils.sendRedirect(httpResponse,mpRedirect);      return true;    }  }  return false;}  }
class C{  public static Value PrintT(Value v1){  Value v1c=v1.deepCopy();  v1c.deepNormalize();  if (OUTPUT == null) {    String ppr=Value.ppr(v1c.toString());    ToolIO.out.println(ppr);  } else {    try {      OUTPUT.write(Value.ppr(v1c.toString("\n")));    } catch (    IOException e) {      MP.printError(EC.GENERAL,e);    }  }  return ValTrue;}  }
class C{  private static <V>void printQueryResults(String msg,Iterable<Cache.Entry<Integer,V>> res){  System.out.println(msg);  for (  Cache.Entry<?,?> e : res)   System.out.println("    " + e.getValue().toString());}  }
class C{  public void resume(){  activated=true;  mSensorManager.registerListener(this,mAccelerometer,READ_SPEED);  mSensorManager.registerListener(this,mMagneticField,READ_SPEED);}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.SDISPLAY__NAME:    setName(NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void testDelete1() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  statement.execute("DELETE FROM " + DatabaseCreator.PARENT_TABLE + " WHERE id = 3;");}  }
class C{  @Override public void write(Integer value){  if (testCommandAborted())   return;switch (state) {case RECEIVE_COMMAND:    currentCommand=value;switch (value) {case 0x28:    state=State.SEND_BYTES;  transferCount=command28Data.length;transferData=command28Data;break;case 0x40:state=State.SEND_BYTES;transferCount=command40Data.length;transferData=command40Data;break;case 0x41:state=State.SEND_BYTES;transferCount=command41Data.length;transferData=command41Data;break;case 0xC2:state=State.SEND_BYTES;transferCount=commandC2Data.length;transferData=commandC2Data;break;case 0xEA:state=State.RECEIVE_BYTES;transferCount=commandEAData.length;transferData=commandEAData;break;case 0xE7:state=State.RECEIVE_BYTES;transferCount=commandE7Data.length;transferData=commandE7Data;break;default :currentCommand=0;System.out.println("Lens do not support command:" + Format.asHex(value & 0xFF,2));}if (transferCount != 0) {timerCount=(baudRate == FAST_BAUD_RATE ? 28 : 17);masterClock.add(this,-1,true,false);}break;case RECEIVE_BYTES:transferData[transferData.length - (transferCount--)]=value;if (transferCount != 0) {timerCount=(baudRate == FAST_BAUD_RATE ? 5 : 7);masterClock.add(this,-1,true,false);} else {if (currentCommand == 0x40) baudRate=FAST_BAUD_RATE;state=State.IDLE;}}fMountCircuit.setPin2Value(1);}  }
class C{  public Object childrenAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  for (  Node childNode : children) {    data=childNode.jjtAccept(visitor,data);  }  return data;}  }
class C{  public int size(){  return size;}  }
class C{  @SuppressWarnings("UnusedReturnValue") public static int alert(final String cMsg){  if (showOutput) {    System.out.println("JSApp.alert(cMsg)");  }  return JOptionPane.showConfirmDialog(null,cMsg,"JavaScript",JOptionPane.DEFAULT_OPTION,JOptionPane.ERROR_MESSAGE);}  }
class C{  public static void printStatistics(){  printStatistics(System.out);}  }
class C{  public void renameDivider(int divId,String name) throws Exception {  m_fdr.getDocumentTree().renameDivider(divId,name);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.136 -0500",hash_original_method="5A4B1024EA76F961E6155B7F9E2B0909",hash_generated_method="879CE84D681F7773D6C675C97C27C330") public boolean onTouchEvent(MotionEvent event){  if (mCancelable && mShowing && mWindow.shouldCloseOnTouch(mContext,event)) {    cancel();    return true;  }  return false;}  }
class C{  protected void illegalMessageReceived(OFMessage m){  String msg=getSwitchStateMessage(m,"Switch should never send this message in the current state");  throw new SwitchStateException(msg);}  }
class C{  public void disAllowTeleport(int x,int y,int width,int height){  disallowIn(x,y,width,height);  disallowOut(x,y,width,height);}  }
class C{  public String globalInfo(){  return "Implementation of the voted perceptron algorithm by Freund and " + "Schapire. Globally replaces all missing values, and transforms " + "nominal attributes into binary ones.\n\n"+ "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public ConsulTopologyFraction(String url) throws MalformedURLException {  url(url);}  }
class C{  public static double nextInverseGaussian(double mu,double lambda){synchronized (random) {    double v=random.nextGaussian();    double y=v * v;    double x=mu + (mu * mu * y) / (2 * lambda) - (mu / (2 * lambda)) * Math.sqrt(4 * mu * lambda* y + mu * mu * y* y);    double test=MathUtils.nextDouble();    if (test <= (mu) / (mu + x)) {      return x;    } else {      return (mu * mu) / x;    }  }}  }
class C{  public BaseAdapterHelper linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void paint(Graphics g){  boolean dotLTR=true;  Position.Bias dotBias=Position.Bias.Forward;  if (isVisible()) {    try {      TextUI mapper=getComponent().getUI();      Rectangle r=mapper.modelToView(getComponent(),getDot(),dotBias);      Rectangle e=mapper.modelToView(getComponent(),getDot() + 1,dotBias);      g.setColor(Color.blue);      int cWidth=e.x - r.x;      int cHeight=4;      int cThick=2;      g.fillRect(r.x - 1,r.y,cWidth,cThick);      g.fillRect(r.x - 1,r.y,cThick,cHeight);      g.fillRect(r.x - 1 + cWidth,r.y,cThick,cHeight);      int yStart=r.y + r.height;      g.fillRect(r.x - 1,yStart - cThick,cWidth,cThick);      g.fillRect(r.x - 1,yStart - cHeight,cThick,cHeight);      g.fillRect(r.x - 1 + cWidth,yStart - cHeight,cThick,cHeight);    } catch (    BadLocationException e) {    }  }}  }
class C{  public Optional<String> startAsyncJob(String jobType){  try {    final JobRunnable jobRunnable=findJobRunnable(jobType);    JobInfo jobInfo=createJobInfo(jobType);    repository.markJobAsRunningIfPossible(jobInfo,mutexJobTypesFor(jobType));    repository.createOrUpdate(jobInfo);    return Optional.of(startAsync(metered(jobRunnable),jobInfo.getJobId()));  } catch (  JobBlockedException e) {    LOG.info(e.getMessage());    return Optional.empty();  }}  }
class C{  public static void sendEmail(String address,String subject,String content,Map<String,String> headers){  try {    sendEmailWithException(address,subject,content,headers);  } catch (  MailNotSentException e) {  }}  }
class C{  public boolean isInvalid(){  return STATUS_Invalid.equals(m_status);}  }
class C{  public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public Device(DeviceManagerImpl deviceManager,Long deviceKey,Entity entity,IEntityClass entityClass){  this.deviceManager=deviceManager;  this.deviceKey=deviceKey;  this.entities=new Entity[]{entity};  this.macAddressString=HexString.toHexString(entity.getMacAddress(),6);  this.entityClass=entityClass;  Arrays.sort(this.entities);  this.dhcpClientName=null;  this.oldAPs=null;  this.attachmentPoints=null;  if (entity.getSwitchDPID() != null && entity.getSwitchPort() != null) {    long sw=entity.getSwitchDPID();    short port=entity.getSwitchPort().shortValue();    if (deviceManager.isValidAttachmentPoint(sw,port)) {      AttachmentPoint ap;      ap=new AttachmentPoint(sw,port,entity.getLastSeenTimestamp().getTime());      this.attachmentPoints=new ArrayList<AttachmentPoint>();      this.attachmentPoints.add(ap);    }  }  vlanIds=computeVlandIds();}  }
class C{  private boolean changed(Address leader,Collection<Address> servers){  Assert.notNull(servers,"servers");  Assert.argNot(servers.isEmpty(),"servers list cannot be empty");  if (this.leader != null && leader == null) {    return true;  } else   if (this.leader == null && leader != null) {    Assert.arg(servers.contains(leader),"leader must be present in servers list");    return true;  } else   if (this.leader != null && !this.leader.equals(leader)) {    Assert.arg(servers.contains(leader),"leader must be present in servers list");    return true;  } else   if (!matches(this.servers,servers)) {    return true;  }  return false;}  }
class C{  @ObjectiveCName("checkCall:withAttempt:") public void checkCall(long callId,int attempt){  if (modules.getCallsModule() != null) {    modules.getCallsModule().checkCall(callId,attempt);  }}  }
class C{  public void add(double time){  data[count]=time;  count++;  if (null != cpuData) {    cpuData=null;  }}  }
class C{  public PSpecified(byte[] p){  super("PSpecified");  this.p=p.clone();}  }
class C{  private void publishEml(Resource resource,BigDecimal version) throws PublicationException {  if (isLocked(resource.getShortname())) {    throw new PublicationException(PublicationException.TYPE.LOCKED,"Resource " + resource.getShortname() + " is currently locked by another process");  }  updateAlternateIdentifierForRegistry(resource);  updateAlternateIdentifierForIPTURLToResource(resource);  resource.setEmlVersion(version);  resource.getEml().setPubDate(new Date());  if (resource.isCitationAutoGenerated()) {    URI homepage=cfg.getResourceVersionUri(resource.getShortname(),version);    String citation=resource.generateResourceCitation(version,homepage);    resource.getEml().getCitation().setCitation(citation);  }  saveEml(resource);  File trunkFile=dataDir.resourceEmlFile(resource.getShortname());  File versionedFile=dataDir.resourceEmlFile(resource.getShortname(),version);  try {    FileUtils.copyFile(trunkFile,versionedFile);  } catch (  IOException e) {    throw new PublicationException(PublicationException.TYPE.EML,"Can't publish eml file for resource " + resource.getShortname(),e);  }}  }
class C{  static void optimize(Movie m,Configuration configuration){  m.enableDebugger=null;  m.uuid=null;  PostLink postLink=(configuration != null) ? new PostLink(configuration) : new PostLink(false,true);  postLink.run(m);}  }
class C{  public void displayState(int state){  if (getNamedTurnout() == null) {    log.debug("Display state " + state + ", disconnected");  } else {    if (_status != null && _iconMaps != null) {      NamedIcon icon=getIcon(_status,state);      if (icon != null) {        super.setIcon(icon);      }    }  }  super.displayState(state);  updateSize();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.448 -0400",hash_original_method="B52C3DB451FF68ED0A74295B989A7EE9",hash_generated_method="C2319A717544B6B47E7E409882EE4494") public WildcardFileFilter(String[] wildcards,IOCase caseSensitivity){  if (wildcards == null) {    throw new IllegalArgumentException("The wildcard array must not be null");  }  this.wildcards=new String[wildcards.length];  System.arraycopy(wildcards,0,this.wildcards,0,wildcards.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public byte[] wrap(byte[] in,int inOff,int inLen){  if (!forWrapping) {    throw new IllegalStateException("Not initialized for wrapping");  }  int length=inLen + 1;  if ((length % 8) != 0) {    length+=8 - (length % 8);  }  byte keyToBeWrapped[]=new byte[length];  keyToBeWrapped[0]=(byte)inLen;  System.arraycopy(in,inOff,keyToBeWrapped,1,inLen);  byte[] pad=new byte[keyToBeWrapped.length - inLen - 1];  if (pad.length > 0) {    sr.nextBytes(pad);    System.arraycopy(pad,0,keyToBeWrapped,inLen + 1,pad.length);  }  byte[] CKS=calculateCMSKeyChecksum(keyToBeWrapped);  byte[] WKCKS=new byte[keyToBeWrapped.length + CKS.length];  System.arraycopy(keyToBeWrapped,0,WKCKS,0,keyToBeWrapped.length);  System.arraycopy(CKS,0,WKCKS,keyToBeWrapped.length,CKS.length);  byte TEMP1[]=new byte[WKCKS.length];  System.arraycopy(WKCKS,0,TEMP1,0,WKCKS.length);  int noOfBlocks=WKCKS.length / engine.getBlockSize();  int extraBytes=WKCKS.length % engine.getBlockSize();  if (extraBytes != 0) {    throw new IllegalStateException("Not multiple of block length");  }  engine.init(true,paramPlusIV);  for (int i=0; i < noOfBlocks; i++) {    int currentBytePos=i * engine.getBlockSize();    engine.processBlock(TEMP1,currentBytePos,TEMP1,currentBytePos);  }  byte[] TEMP2=new byte[this.iv.length + TEMP1.length];  System.arraycopy(this.iv,0,TEMP2,0,this.iv.length);  System.arraycopy(TEMP1,0,TEMP2,this.iv.length,TEMP1.length);  byte[] TEMP3=new byte[TEMP2.length];  for (int i=0; i < TEMP2.length; i++) {    TEMP3[i]=TEMP2[TEMP2.length - (i + 1)];  }  ParametersWithIV param2=new ParametersWithIV(this.param,IV2);  this.engine.init(true,param2);  for (int i=0; i < noOfBlocks + 1; i++) {    int currentBytePos=i * engine.getBlockSize();    engine.processBlock(TEMP3,currentBytePos,TEMP3,currentBytePos);  }  return TEMP3;}  }
class C{  public UnsupportedOperationException(@Nullable String message){  super(message);}  }
class C{  public static Object invokeWebserviceSync(WSDefinition def,Object... arguments) throws IOException {  WSConnection cr=new WSConnection(def,null,arguments);  NetworkManager.getInstance().addToQueueAndWait(cr);  if (cr.getResponseCode() != 200) {    throw new IOException("Server error: " + cr.getResponseCode());  }  return cr.returnValue;}  }
class C{  public boolean zoomIn(){  if (mCurrentZoomScaleIndex < ZOOM_SCALES.length - 1) {    updateScaleStep(mCurrentZoomScaleIndex + 1);    return true;  }  return false;}  }
class C{  public String switchToPaymentDetails() throws SaaSApplicationException {  paymentInfo=getPaymentInfo();  if (paymentInfo.getPaymentType() != null) {    try {      getPaymentRegistrationLink();      paymentTypeRegisterPage="paymentTypeInclude";    } catch (    Exception ex) {      PSPCommunicationException exc=new PSPCommunicationException();      exc.setMessageKey("ex.PSPProcessingException");      ExceptionHandler.execute(exc);    } finally {      resetCachedPaymentInfo();    }  }  return OUTCOME_NEXT;}  }
class C{  static void encode_base64(byte d[],int len,StringBuilder rs) throws IllegalArgumentException {  int off=0;  int c1, c2;  if (len <= 0 || len > d.length) {    throw new IllegalArgumentException("Invalid len");  }  while (off < len) {    c1=d[off++] & 0xff;    rs.append(base64_code[(c1 >> 2) & 0x3f]);    c1=(c1 & 0x03) << 4;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 4) & 0x0f;    rs.append(base64_code[c1 & 0x3f]);    c1=(c2 & 0x0f) << 2;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 6) & 0x03;    rs.append(base64_code[c1 & 0x3f]);    rs.append(base64_code[c2 & 0x3f]);  }}  }
class C{  public PathLoader(){}  }
class C{  public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {  if (bmap == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);  s.flush();}  }
class C{  public boolean visitVariableRef(ExpressionOwner owner,Variable var){  return true;}  }
class C{  private boolean isSameMemberWhenErased(Type type,MethodSymbol method,Type erasure){  return types.isSameType(erasure(types.memberType(type,method)),erasure);}  }
class C{  @Override public void onNext(Event dockerEvent){  String containerId=dockerEvent.getId();  DockerEvent eventDetails=getDockerEvent(containerId);  if (eventDetails != null) {    if (eventDetails.getPid() != 0 && !map.containsKey(containerId)) {      appendToFile(getCleanUpInfo(containerId,eventDetails.getPid()));      map.put(containerId,eventDetails);    }    if (eventDetails.getExitCode() != 0 && map.containsKey(containerId)) {      DockerEvent details=map.get(containerId);      details.setExitCode(eventDetails.getExitCode());      map.put(containerId,details);    }  }}  }
class C{  public String escapeAttributeValue(Object value){  String text=ScriptRuntime.toString(value);  if (text.length() == 0)   return "";  XmlObject xo=XmlObject.Factory.newInstance();  XmlCursor cursor=xo.newCursor();  cursor.toNextToken();  cursor.beginElement("a");  cursor.insertAttributeWithValue("a",text);  cursor.dispose();  String elementText=xo.toString();  int begin=elementText.indexOf('"');  int end=elementText.lastIndexOf('"');  return elementText.substring(begin + 1,end);}  }
class C{  public static MessageRange one(MessageUid uid){  return new MessageRange(Type.ONE,uid,uid);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private void moveTransitToQueue(final double now){  QVehicle veh;  List<QVehicle> departingTransitVehicles=null;  while ((veh=transitVehicleStopQueue.peek()) != null) {    if (veh.getEarliestLinkExitTime() > now) {      break;    }    if (departingTransitVehicles == null) {      departingTransitVehicles=new LinkedList<QVehicle>();    }    departingTransitVehicles.add(transitVehicleStopQueue.poll());  }  if (departingTransitVehicles != null) {    ListIterator<QVehicle> iter=departingTransitVehicles.listIterator(departingTransitVehicles.size());    while (iter.hasPrevious()) {      this.vehQueue.addFirst(iter.previous());    }  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected void cleanup(Context ctx) throws IOException, InterruptedException {  IntWritable i=new IntWritable();  Text txt=new Text();  while (!q.isEmpty()) {    Entry<Integer,String> e=q.removeFirst();    i.set(e.getKey());    txt.set(e.getValue());    ctx.write(txt,i);  }}  }
class C{  public InvitationProjectsObject(InvitationProjectsObject parent){  this.id=parent.getId();  this.invitationId=parent.getInvitationId();  this.projectId=parent.getProjectId();}  }
class C{  public static MobileDoc createPopup(String title){  MobileDoc doc=create(title);  doc.getHead().addElement(new link("iui/iui.css",link.REL_STYLESHEET,link.TYPE_CSS));  doc.getHead().addElement(new script((Element)null,MobileEnv.getBaseDirectory("iui/iui.js")));  doc.getHead().addElement(new script((Element)null,"js/window.js"));  doc.getHead().addElement(new link("images/AdempiereButton.png","apple-touch-icon-precomposed","image/png"));  doc.getHead().addElement(new link("images/AdempiereButton.png","shortcut icon","image/png"));  doc.getHead().addElement(new meta().setName("viewport").setContent("width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;"));  return doc;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.418 -0500",hash_original_method="DA67C78A7E91B7C25B2E6DD841A2A96C",hash_generated_method="3A2F7DCB6D495BDAC75EAF9113B49DE4") public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false; else {    TLSMessageChannel that=(TLSMessageChannel)other;    if (this.mySock != that.mySock)     return false; else     return true;  }}  }
class C{  public static KindName kindName(int kind){switch (kind) {case PCK:    return KindName.PACKAGE;case TYP:  return KindName.CLASS;case VAR:return KindName.VAR;case VAL:return KindName.VAL;case MTH:return KindName.METHOD;default :throw new AssertionError("Unexpected kind: " + kind);}}  }
class C{  public void readNetworkParameters(final int[] columnsIndices,final BufferedReader reader) throws IOException {  String line=reader.readLine();  while (line != null && line.length() > 0) {    line=reader.readLine();  }}  }
class C{  public void importCerts(String[] certFileNames,String aliasPrefix) throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {  if (certFileNames == null) {    return;  }  CertificateFactory certFactory=CertificateFactory.getInstance("X.509");  for (  String fn : certFileNames) {    InputStream inStream=new FileInputStream(fn);    X509Certificate cert=(X509Certificate)certFactory.generateCertificate(inStream);    inStream.close();    String alias=aliasPrefix == null ? fn : aliasPrefix + fn;    _keyStore.setCertificateEntry(alias,cert);  }}  }
class C{  public void fireForWatermark(AppliedPTransform<?,?,?> step,Instant watermark){  PriorityQueue<WatermarkCallback> callbackQueue=callbacks.get(step);  if (callbackQueue == null) {    return;  }synchronized (callbackQueue) {    while (!callbackQueue.isEmpty() && callbackQueue.peek().shouldFire(watermark)) {      executor.execute(callbackQueue.poll().getCallback());    }  }}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){  firePropertyChange(propertyName,Boolean.valueOf(oldValue),Boolean.valueOf(newValue));}  }
class C{  private HttpResponse handleCorsPreflight(HttpRequest req){  DefaultHttpResponse res=new DefaultHttpResponse();  HttpHeaders headers=HttpHeaders.of(HttpStatus.OK);  if (setCorsOrigin(req,headers)) {    setCorsAllowMethods(headers);    setCorsAllowHeaders(headers);    setCorsAllowCredentials(headers);    setCorsMaxAge(headers);    setPreflightHeaders(headers);  }  res.write(headers);  res.close();  return res;}  }
class C{  private void _writeLong(final long value) throws IOException {  this.outStream.writeLong(value,this.byteOrder);}  }
class C{  public static VolumeMount[] formatFlumeContainerVolumeMount(LogDraft logDraft){  List<VolumeMount> volumeMounts=new ArrayList<>();  int idxSuffix=1;  for (  LogItemDraft logItemDraft : logDraft.getLogItemDrafts()) {    if (logItemDraft.isAutoCollect() || logItemDraft.isAutoDelete()) {      VolumeMount volumeMount=new VolumeMount();      volumeMount.setName("data" + idxSuffix);      volumeMount.setMountPath(FLUME_MOUNT_PATH_PREFIX + idxSuffix);      volumeMounts.add(volumeMount);      idxSuffix++;    }  }  return volumeMounts.toArray(new VolumeMount[]{});}  }
class C{  public ButtonColumn(JTable table,Action action,int column){  this.table=table;  this.action=action;  renderButton=new JButton();  editButton=new JButton();  editButton.setFocusPainted(false);  editButton.addActionListener(this);  originalBorder=editButton.getBorder();  setFocusBorder(new LineBorder(Color.BLUE));  TableColumnModel columnModel=table.getColumnModel();  columnModel.getColumn(column).setCellRenderer(this);  columnModel.getColumn(column).setCellEditor(this);  table.addMouseListener(this);  table.setDefaultEditor(Action.class,this);  table.setDefaultRenderer(Action.class,this);}  }
class C{  public JobMediaSheetsSupported(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 0) {    throw new IllegalArgumentException("Job K octets value < 0 specified");  }}  }
class C{  public Map<String,Tuple<Version,String>> versions(){  return versions;}  }
class C{  public static Bitmap extractThumbnail(Bitmap source,int width,int height,int options){  if (source == null) {    return null;  }  float scale;  if (source.getWidth() < source.getHeight()) {    scale=width / (float)source.getWidth();  } else {    scale=height / (float)source.getHeight();  }  Matrix matrix=new Matrix();  matrix.setScale(scale,scale);  Bitmap thumbnail=transform(matrix,source,width,height,OPTIONS_SCALE_UP | options);  return thumbnail;}  }
class C{  public static ReilInstruction createXor(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize secondSize,final String secondValue,final OperandSize thirdSize,final String thirdValue){  return createTrinaryInstruction(ReilHelpers.OPCODE_XOR,new CAddress(offset),firstSize,firstValue,secondSize,secondValue,thirdSize,thirdValue);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) protected MethodTypeForm(MethodType erasedType){  this.erasedType=erasedType;  Class<?>[] ptypes=erasedType.ptypes();  int ptypeCount=ptypes.length;  int pslotCount=ptypeCount;  int rtypeCount=1;  int rslotCount=1;  int[] argToSlotTab=null, slotToArgTab=null;  int pac=0, lac=0, prc=0, lrc=0;  Class<?>[] epts=ptypes;  Class<?>[] bpts=epts;  for (int i=0; i < epts.length; i++) {    Class<?> pt=epts[i];    if (pt != Object.class) {      ++pac;      Wrapper w=Wrapper.forPrimitiveType(pt);      if (w.isDoubleWord())       ++lac;      if (w.isSubwordOrInt() && pt != int.class) {        if (bpts == epts)         bpts=bpts.clone();        bpts[i]=int.class;      }    }  }  pslotCount+=lac;  Class<?> rt=erasedType.returnType();  Class<?> bt=rt;  if (rt != Object.class) {    ++prc;    Wrapper w=Wrapper.forPrimitiveType(rt);    if (w.isDoubleWord())     ++lrc;    if (w.isSubwordOrInt() && rt != int.class)     bt=int.class;    if (rt == void.class)     rtypeCount=rslotCount=0; else     rslotCount+=lrc;  }  if (epts == bpts && bt == rt) {    this.basicType=erasedType;  } else {    this.basicType=MethodType.makeImpl(bt,bpts,true);    MethodTypeForm that=this.basicType.form();    assert (this != that);    this.primCounts=that.primCounts;    this.argCounts=that.argCounts;    this.argToSlotTable=that.argToSlotTable;    this.slotToArgTable=that.slotToArgTable;    this.methodHandles=null;    this.lambdaForms=null;    return;  }  if (lac != 0) {    int slot=ptypeCount + lac;    slotToArgTab=new int[slot + 1];    argToSlotTab=new int[1 + ptypeCount];    argToSlotTab[0]=slot;    for (int i=0; i < epts.length; i++) {      Class<?> pt=epts[i];      Wrapper w=Wrapper.forBasicType(pt);      if (w.isDoubleWord())       --slot;      --slot;      slotToArgTab[slot]=i + 1;      argToSlotTab[1 + i]=slot;    }    assert (slot == 0);  } else   if (pac != 0) {    assert (ptypeCount == pslotCount);    MethodTypeForm that=MethodType.genericMethodType(ptypeCount).form();    assert (this != that);    slotToArgTab=that.slotToArgTable;    argToSlotTab=that.argToSlotTable;  } else {    int slot=ptypeCount;    slotToArgTab=new int[slot + 1];    argToSlotTab=new int[1 + ptypeCount];    argToSlotTab[0]=slot;    for (int i=0; i < ptypeCount; i++) {      --slot;      slotToArgTab[slot]=i + 1;      argToSlotTab[1 + i]=slot;    }  }  this.primCounts=pack(lrc,prc,lac,pac);  this.argCounts=pack(rslotCount,rtypeCount,pslotCount,ptypeCount);  this.argToSlotTable=argToSlotTab;  this.slotToArgTable=slotToArgTab;  if (pslotCount >= 256)   throw newIllegalArgumentException("too many arguments");  assert (basicType == erasedType);  this.lambdaForms=new SoftReference[LF_LIMIT];  this.methodHandles=new SoftReference[MH_LIMIT];}  }
class C{  public static Number count(boolean[] self,Object value){  return count(InvokerHelper.asIterator(self),value);}  }
class C{  public boolean isFixedRotation(){  return body.isFixedRotation();}  }
class C{  private void update(Status status){  ContentValues vals=new ContentValues(2);  vals.put(Columns.STATUS_ID,status.id);  if (mDirty) {    vals.put(Columns.DIRTY,1);  }  ContentResolver cr=cr();  for (  long id : mIds) {    cr.update(ContentUris.withAppendedId(mContentUri,id),vals,null,null);  }  onUpdate(mContentUri,mIds,status);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.join);  ((Button)findViewById(R.id.join)).setOnClickListener(this);  ((EditText)findViewById(R.id.channel)).setSelection(1);}  }
class C{  public static double distance(double lat0,double lon0,double lat1,double lon1){  double theta0=FastMath.toRadians(lat0);  double theta1=FastMath.toRadians(lat1);  double lambda0=FastMath.toRadians(lon0);  double lambda1=FastMath.toRadians(lon1);  double thetaComb=(theta1 - theta0) / 2;  double lambdaComb=(lambda1 - lambda0) / 2;  double sin2theta=FastMath.pow(FastMath.sin(thetaComb),2);  double sin2lambda=FastMath.pow(FastMath.sin(lambdaComb),2);  double underRadical=sin2theta + FastMath.cos(theta0) * FastMath.cos(theta1) * sin2lambda;  return 2 * RADIUS_OF_EARTH_M * FastMath.asin(FastMath.sqrt(underRadical));}  }
class C{  @Override public boolean isNumerical(){  return true;}  }
class C{  public static String fromTag(ShortTag tag){  return String.valueOf(tag.getValue()) + MojangsonToken.SHORT_SUFFIX;}  }
class C{  OrganizedOperands organizeOperands(ExecutionContext context) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  List evalOperands=new ArrayList(_operands.length);  int indexCount=0;  List compositeIterOperands=new ArrayList(_operands.length);  Map compositeFilterOpsMap=new LinkedHashMap();  Map iterToOperands=new HashMap();  CompiledValue operand=null;  boolean isJunctionNeeded=false;  boolean indexExistsOnNonJoinOp=false;  for (int i=0; i < _operands.length; i++) {    operand=this._operands[i];    if (!operand.isDependentOnCurrentScope(context)) {      indexCount++;      evalOperands.add(0,operand);    } else     if (operand instanceof CompiledJunction) {      if (operand.getPlanInfo(context).evalAsFilter) {        evalOperands.add(indexCount++,operand);      } else {        evalOperands.add(operand);      }    } else {      CompiledValue expandedOperands[]=null;      if (operand.getType() == LIKE && this._operator == OQLLexerTokenTypes.LITERAL_and && ((CompiledLike)operand).getOperator() != OQLLexerTokenTypes.TOK_NE) {        expandedOperands=((CompiledLike)operand).getExpandedOperandsWithIndexInfoSetIfAny(context);      } else {        expandedOperands=new CompiledValue[]{operand};      }      for (      CompiledValue expndOperand : expandedOperands) {        boolean operandEvalAsFilter=expndOperand.getPlanInfo(context).evalAsFilter;        isJunctionNeeded=isJunctionNeeded || operandEvalAsFilter;        Set set=QueryUtils.getCurrentScopeUltimateRuntimeIteratorsIfAny(expndOperand,context);        if (set.size() != 1) {          if (operandEvalAsFilter) {            Support.Assert(set.size() == 2," The no of independent iterators should be equal to 2");            compositeFilterOpsMap.put(expndOperand,set);          } else {            compositeIterOperands.add(expndOperand);          }        } else {          Support.Assert(set.size() == 1,"The size has to be 1 & cannot be zero as that would mean it is independent");          RuntimeIterator rIter=(RuntimeIterator)set.iterator().next();          List operandsList=(List)iterToOperands.get(rIter);          if (operandsList == null) {            operandsList=new ArrayList();            iterToOperands.put(rIter,operandsList);          }          if (operandEvalAsFilter && _operator == LITERAL_and) {            indexExistsOnNonJoinOp=true;          }          operandsList.add(expndOperand);        }      }    }  }  if (isJunctionNeeded) {    Filter junction=createJunction(compositeIterOperands,compositeFilterOpsMap,iterToOperands,context,indexCount,evalOperands,indexExistsOnNonJoinOp);    evalOperands.add(indexCount++,junction);  } else {    if (!compositeIterOperands.isEmpty()) {      evalOperands.addAll(compositeIterOperands);    }    Iterator itr=iterToOperands.values().iterator();    while (itr.hasNext()) {      evalOperands.addAll((List)itr.next());    }  }  OrganizedOperands result=new OrganizedOperands();  Filter filterOperands=null;  Support.Assert(indexCount > 0);  if (indexCount == 1) {    filterOperands=(Filter)evalOperands.get(0);    result.isSingleFilter=true;  } else {    CompiledValue[] newOperands=new CompiledValue[indexCount];    for (int i=0; i < indexCount; i++)     newOperands[i]=(CompiledValue)evalOperands.get(i);    filterOperands=new CompiledJunction(newOperands,_operator);  }  CompiledValue iterateOperands=null;  int numIterating=evalOperands.size() - indexCount;  Support.Assert(_operator == LITERAL_and || numIterating == 0);  if (numIterating > 0) {    if (numIterating == 1)     iterateOperands=(CompiledValue)evalOperands.get(indexCount); else {      CompiledValue[] newOperands=new CompiledValue[numIterating];      for (int i=0; i < numIterating; i++)       newOperands[i]=(CompiledValue)evalOperands.get(i + indexCount);      iterateOperands=new CompiledJunction(newOperands,_operator);    }  }  result.filterOperand=filterOperands;  result.iterateOperand=iterateOperands;  return result;}  }
class C{  public SortingNode<T> build(){  Builder<T> rootBuilder=this;  while (rootBuilder.parentBuilder != null) {    rootBuilder=rootBuilder.parentBuilder;  }  return rootBuilder.deepBuild(null);}  }
class C{  private List<PricedParameter> convertAndValidateParameters(long voPriceModelKey,List<VOPricedParameter> voPricedParameters,List<Parameter> productParams,PriceModel priceModel,boolean priceModelCreatedInTransaction,Organization targetCustomer,Subscription subscription,boolean isTemplateExistsForCustomer) throws OperationNotPermittedException, ValidationException, ConcurrentModificationException {  Map<Long,PricedParameter> pricedParameterMap=new HashMap<Long,PricedParameter>();  Map<Parameter,PricedParameter> paramToPricedParam=new HashMap<Parameter,PricedParameter>();  for (  PricedParameter pricedParameter : priceModel.getSelectedParameters()) {    pricedParameterMap.put(Long.valueOf(pricedParameter.getKey()),pricedParameter);    paramToPricedParam.put(pricedParameter.getParameter(),pricedParameter);  }  Map<Long,Parameter> parameters=new LinkedHashMap<Long,Parameter>();  for (  Parameter parameter : productParams) {    parameters.put(Long.valueOf(parameter.getParameterDefinition().getKey()),parameter);  }  List<PricedParameter> result=new ArrayList<PricedParameter>();  for (  VOPricedParameter voPricedParameter : voPricedParameters) {    PricedParameterChecks.validateParamDefSet(voPricedParameter);    long paramDefKey=voPricedParameter.getVoParameterDef().getKey();    Parameter parameter=parameters.remove(Long.valueOf(paramDefKey));    Product product=priceModel.getProduct();    if (parameter == null) {      OperationNotPermittedException onp=new OperationNotPermittedException("Specified parameter '" + voPricedParameter.getKey() + "' for parameter definition'"+ paramDefKey+ "' is not defined for the current product '"+ product.getKey()+ "'.");      logger.logWarn(Log4jLogger.SYSTEM_LOG,onp,LogMessageIdentifier.WARN_PARAMETER_FOR_PRICE_MODEL_INVALID);      throw onp;    }    if (!parameter.isConfigurable()) {      OperationNotPermittedException onp=new OperationNotPermittedException("Priced Parameter lined up to be saved, is not marked as configurable");      logger.logWarn(Log4jLogger.SYSTEM_LOG,onp,LogMessageIdentifier.WARN_NOT_CONFIGURABLE_PARAMETER_PASSED_TO_PRICE_MODEL,Long.toString(parameter.getKey()),Long.toString(product.getKey()));      throw onp;    }    PricedParameterChecks.isValidBaseParam(parameter,voPricedParameter);    PricedParameter pricedParameter=null;    if (pricedParameterMap.containsKey(Long.valueOf(voPricedParameter.getKey()))) {      pricedParameter=pricedParameterMap.remove(Long.valueOf(voPricedParameter.getKey()));      pricedParameter=handleParameterUpdate(voPricedParameter,pricedParameter,priceModelCreatedInTransaction);      pricedParameterMap.remove(Long.valueOf(voPricedParameter.getKey()));    } else {      PricedParameter existingPricedParam=paramToPricedParam.remove(parameter);      validateDomainObjectKey(voPricedParameter,existingPricedParam,priceModelCreatedInTransaction);      pricedParameter=createPricedParameter(voPricedParameter,parameter,priceModel);    }    validateAndSetRolePricesForParam(voPriceModelKey,priceModel,voPricedParameter,pricedParameter,priceModelCreatedInTransaction,targetCustomer,subscription,isTemplateExistsForCustomer);    List<SteppedPrice> steppedPrices=convertAndValidateSteppedPrices(voPriceModelKey,voPricedParameter.getSteppedPrices(),priceModel,null,pricedParameter,priceModelCreatedInTransaction);    if (!steppedPrices.isEmpty() && BigDecimal.ZERO.compareTo(pricedParameter.getPricePerSubscription()) != 0) {      ValidationException ve=new ValidationException(ValidationException.ReasonEnum.STEPPED_PARAMETER_PRICING,"pricePerSubscription",new Object[]{pricedParameter.getParameter().getParameterDefinition().getParameterId()});      logger.logWarn(Log4jLogger.SYSTEM_LOG,ve,LogMessageIdentifier.WARN_STEPPED_PRICING_MIXED_WITH_BASEPRICE,priceModel.getProduct().getProductId(),"priced parameter",String.valueOf(pricedParameter.getKey()));      throw ve;    }    result.add(pricedParameter);  }  removePricedParameters(voPriceModelKey,pricedParameterMap.values(),priceModel);  return result;}  }
class C{  public int length(){  return values.size();}  }
class C{  public final double readDouble() throws java.io.IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  public void testConnect_Null() throws IOException {  assertFalse(this.channel1.isConnected());  try {    this.channel1.connect(null);    fail("Should throw an IllegalArgumentException here.");  } catch (  IllegalArgumentException e) {  }}  }
class C{  static void clear(Iterator<?> iterator){  checkNotNull(iterator);  while (iterator.hasNext()) {    iterator.next();    iterator.remove();  }}  }
class C{  @RequestMapping(value="/mail-feedback",method=RequestMethod.POST) public void mailFeedback(HttpServletRequest request) throws IOException {  String messageType=Optional.ofNullable(request.getHeader("x-amz-sns-message-type")).map(null).orElse(NO_SUCH_FIELD);switch (messageType) {case "SubscriptionConfirmation":    handleSubscriptionConfirmation(request);  break;case "Notification":handleNotification(request);break;default :logger.warn("receive unknown sns, headers:\n" + dumpHeaders(request) + "\nbody:\n"+ inputToString(request.getInputStream()));break;}}  }
class C{  private static String createXMLMix(String xmlPfis,String xmlPjur,int firstRow,int numPFIS,int numPJUR,int rDefault,int maxResults) throws Exception {  String result=null;  if (xmlPfis != null || xmlPjur != null) {    List nodes=null;    Document document=DocumentHelper.createDocument();    Element root=document.addElement(PersonKeys.XML_PERSONAS_TEXT);    root.addAttribute(PersonKeys.XML_INICIO_TEXT,Integer.toString(firstRow));    if ((firstRow + rDefault) > (numPFIS + numPJUR)) {      root.addAttribute(PersonKeys.XML_FIN_TEXT,Integer.toString(numPFIS + numPJUR));    } else {      root.addAttribute(PersonKeys.XML_FIN_TEXT,Integer.toString(firstRow + rDefault));    }    root.addAttribute(PersonKeys.XML_TOTAL_TEXT,Integer.toString(numPFIS + numPJUR));    root.addAttribute(PersonKeys.XML_RANGO_TEXT,Integer.toString(rDefault));    root.addAttribute(PersonKeys.XML_RESULT_MAX_TEXT,Integer.toString(maxResults));    if (xmlPfis != null) {      Document docPfis=XMLPersons.createFromStringText(xmlPfis);      nodes=docPfis.selectNodes(PersonKeys.XPATH_PERSONAS_PERSONA);      for (Iterator it=nodes.iterator(); it.hasNext(); ) {        Node node=(Node)it.next();        node.setParent(null);        root.add(node);      }    }    if (xmlPjur != null) {      Document docPJur=XMLPersons.createFromStringText(xmlPjur);      nodes=docPJur.selectNodes(PersonKeys.XPATH_PERSONAS_PERSONA);      for (Iterator it=nodes.iterator(); it.hasNext(); ) {        Node node=(Node)it.next();        node.setParent(null);        root.add(node);      }    }    result=document.asXML();  }  return result;}  }
class C{  public int findMin(int[] num){  if (num == null || num.length == 0)   return 0;  int l=0;  int r=num.length - 1;  while (l <= r) {    int k=l;    while (k <= r && num[k] == num[r])     k++;    if (k > r)     return num[l];    l=k;    if (num[l] < num[r])     return num[l];    int mid=l + (r - l) / 2;    if (num[mid] >= num[l])     l=mid + 1; else     r=mid;  }  return l;}  }
class C{  public static EvictionPolicy readEvictionPolicy(BinaryRawReader in){  byte plcTyp=in.readByte();switch (plcTyp) {case 0:    break;case 1:{    FifoEvictionPolicy p=new FifoEvictionPolicy();    p.setBatchSize(in.readInt());    p.setMaxSize(in.readInt());    p.setMaxMemorySize(in.readLong());    return p;  }case 2:{  LruEvictionPolicy p=new LruEvictionPolicy();  p.setBatchSize(in.readInt());  p.setMaxSize(in.readInt());  p.setMaxMemorySize(in.readLong());  return p;}default :assert false;}return null;}  }
class C{  public static FlexibleSpaceWithImageFragment newInstance(){  return new FlexibleSpaceWithImageFragment();}  }
class C{  public void waitTransformThread() throws SAXException {  Thread transformThread=this.getTransformThread();  if (null != transformThread) {    try {      ThreadControllerWrapper.waitThread(transformThread,this);      if (!this.hasTransformThreadErrorCatcher()) {        Exception e=this.getExceptionThrown();        if (null != e) {          e.printStackTrace();          throw new org.xml.sax.SAXException(e);        }      }      this.setTransformThread(null);    } catch (    InterruptedException ie) {    }  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"TST");  translateAll(environment,instruction,"TST",instructions);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static int deleteOrphans(EntityManager em){  requireArgument(em != null,"Entity manager cannot be null.");  Query query=em.createNamedQuery("Audit.cullOrphans");  return query.executeUpdate();}  }
class C{  public String calcOutOfBagTipText(){  return "Whether the out-of-bag error is calculated.";}  }
class C{  public void scrollOnce(){  PagerAdapter adapter=getAdapter();  int currentItem=getCurrentItem();  int totalCount;  if (adapter == null || (totalCount=adapter.getCount()) <= 1) {    return;  }  int nextItem=(direction == LEFT) ? --currentItem : ++currentItem;  if (nextItem < 0) {    if (isCycle) {      setCurrentItem(totalCount - 1,isBorderAnimation);    }  } else   if (nextItem == totalCount) {    if (isCycle) {      setCurrentItem(0,isBorderAnimation);    }  } else {    setCurrentItem(nextItem,true);  }}  }
class C{  private static long writeLogSegment(DistributedLogManager dlm,int numRecords,long startTxId,int flushPerNumRecords,boolean emptyRecord) throws IOException {  long txid=startTxId;  LogWriter writer=dlm.startLogSegmentNonPartitioned();  for (long j=1; j <= numRecords; j++) {    if (emptyRecord) {      writer.write(DLMTestUtil.getEmptyLogRecordInstance(txid++));    } else {      writer.write(DLMTestUtil.getLargeLogRecordInstance(txid++));    }    if (j % flushPerNumRecords == 0) {      writer.setReadyToFlush();      writer.flushAndSync();    }  }  writer.setReadyToFlush();  writer.flushAndSync();  writer.close();  return txid;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  protected String vertex(){  return (VERT_UNIFS + VERT_ATTRS + VERT_VARS+ "void main(void) {\n"+ VERT_EXTRACTDATA+ VERT_SETPOS+ VERT_SETTEX+ VERT_SETCOLOR+ "}");}  }
class C{  public String toString(){  return name;}  }
class C{  private void createKey(){  try {    KeyStore keyStore=KeyStore.getInstance("AndroidKeyStore");    keyStore.load(null);    KeyGenerator keyGenerator=KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES,"AndroidKeyStore");    keyGenerator.init(new KeyGenParameterSpec.Builder(KEY_NAME,KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT).setBlockModes(KeyProperties.BLOCK_MODE_CBC).setUserAuthenticationRequired(true).setUserAuthenticationValidityDurationSeconds(AUTHENTICATION_DURATION_SECONDS).setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7).build());    keyGenerator.generateKey();  } catch (  NoSuchAlgorithmException|NoSuchProviderException|InvalidAlgorithmParameterException|KeyStoreException|CertificateException|IOException e) {    throw new RuntimeException("Failed to create a symmetric key",e);  }}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int parentWidth=MeasureSpec.getSize(widthMeasureSpec);  int parentHeight=MeasureSpec.getSize(heightMeasureSpec);  final Resources resources=getContext().getResources();  float titleHeight=resources.getFraction(R.dimen.setup_title_height,1,1);  float sideMargin=resources.getFraction(R.dimen.setup_border_width,1,1);  int bottom=resources.getDimensionPixelSize(R.dimen.setup_margin_bottom);  setPaddingRelative((int)(parentWidth * sideMargin),0,(int)(parentWidth * sideMargin),bottom);  View title=findViewById(R.id.title_area);  if (title != null) {    title.setMinimumHeight((int)(parentHeight * titleHeight));  }  super.onMeasure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void start(Class<? extends SourceConnector> connectorClass,Configuration connectorConfig,CompletionCallback callback){  Configuration config=Configuration.copy(connectorConfig).with(EmbeddedEngine.ENGINE_NAME,"testing-connector").with(EmbeddedEngine.CONNECTOR_CLASS,connectorClass.getName()).with(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH).with(EmbeddedEngine.OFFSET_FLUSH_INTERVAL_MS,0).build();  latch=new CountDownLatch(1);  CompletionCallback wrapperCallback=null;  engine=EmbeddedEngine.create().using(config).notifying(null).using(this.getClass().getClassLoader()).using(wrapperCallback).build();  assertThat(executor).isNull();  executor=Executors.newFixedThreadPool(1);  executor.execute(null);}  }
class C{  public TemplateList(){  super();}  }
class C{  protected ObjectValue(ObjectValue ov){  builder=ov.builder;  _proto_=ov._proto_;  var_count=ov.var_count;  numberUsage=ov.numberUsage;  activation=ov.activation;  this.type=ov.type;  method_info=ov.method_info;  flags=ov.flags;  value=ov.value;  names=ov.names;  slots=ov.slots;  base_objs=ov.base_objs;  protected_ns=ov.protected_ns;  base_protected_ns=ov.base_protected_ns;}  }
class C{  protected void removeChildListeners(){}  }
class C{  public void clearAccounting(MAcctSchema accountSchema,MTransaction transaction){  if (transaction.getM_InOutLine_ID() > 0) {    MInOutLine line=(MInOutLine)transaction.getM_InOutLine();    if (!clearAccounting(accountSchema,accountSchema.getM_CostType(),line.getParent(),line.getDateAcct()))     return;    List<MMatchPO> orderMatches=MMatchPO.getInOutLine(line);    for (    MMatchPO match : orderMatches) {      if (!clearAccounting(accountSchema,accountSchema.getM_CostType(),match,line.getDateAcct()))       return;    }    List<MMatchInv> invoiceMatches=MMatchInv.getInOutLine(line);    for (    MMatchInv match : invoiceMatches) {      if (!clearAccounting(accountSchema,accountSchema.getM_CostType(),match,line.getDateAcct()))       return;    }  } else   if (transaction.getC_ProjectIssue_ID() > 0) {    MProjectIssue line=(MProjectIssue)transaction.getC_ProjectIssue();    if (!clearAccounting(accountSchema,accountSchema.getM_CostType(),line.getParent(),line.getMovementDate()))     return;  } else   if (transaction.getM_InventoryLine_ID() > 0) {    MInventoryLine line=(MInventoryLine)transaction.getM_InventoryLine();    if (!clearAccounting(accountSchema,accountSchema.getM_CostType(),line.getParent(),line.getDateAcct()))     return;  } else   if (transaction.getM_MovementLine_ID() > 0) {    MMovementLine line=(MMovementLine)transaction.getM_MovementLine();    if (!clearAccounting(accountSchema,accountSchema.getM_CostType(),line.getParent(),line.getDateAcct()))     return;  } else   if (transaction.getM_ProductionLine_ID() > 0) {    MProductionLine line=(MProductionLine)transaction.getM_ProductionLine();    MProduction production=(MProduction)line.getM_ProductionPlan().getM_Production();    if (!clearAccounting(accountSchema,accountSchema.getM_CostType(),production,production.getMovementDate()))     return;  } else   if (transaction.getPP_Cost_Collector_ID() > 0) {    MPPCostCollector costCollector=(MPPCostCollector)transaction.getPP_Cost_Collector();    if (!clearAccounting(accountSchema,accountSchema.getM_CostType(),costCollector,costCollector.getDateAcct()))     ;    return;  } else {    System.out.println("Document does not exist :" + transaction);  }}  }
class C{  protected void changeAnnId(int annId){  m_annId=annId;}  }
class C{  public void transformSummaryToHTML(Writer htmlWriter) throws IOException, TransformerException {  ByteArrayOutputStream summaryOut=new ByteArrayOutputStream(8096);  reportSummary(summaryOut);  StreamSource in=new StreamSource(new ByteArrayInputStream(summaryOut.toByteArray()));  StreamResult out=new StreamResult(htmlWriter);  InputStream xslInputStream=this.getClass().getClassLoader().getResourceAsStream("summary.xsl");  if (xslInputStream == null) {    throw new IOException("Could not load summary stylesheet");  }  StreamSource xsl=new StreamSource(xslInputStream);  TransformerFactory tf=TransformerFactory.newInstance();  Transformer transformer=tf.newTransformer(xsl);  transformer.transform(in,out);  Reader rdr=in.getReader();  if (rdr != null) {    rdr.close();  }  htmlWriter.close();  InputStream is=xsl.getInputStream();  if (is != null) {    is.close();  }}  }
class C{  private static void catalogUpdated(String categoryId,String messageKey,Object... args){  String tenantId=Models.currentAdminTenant();  flash.success(Messages.get(messageKey,args));  catalogModified(tenantId);  showCategory(tenantId,categoryId);}  }
class C{  public byte[] decryptDataIntegrity(final byte[] cyphered) throws CryptoException {  byte[] plainSha;  try {    plainSha=crypto.decrypt(cyphered,0,cyphered.length);  } catch (  Exception e) {    if (Cfg.DEBUG) {      Check.log(TAG + " (decryptDataIntegrity) Error: " + e);    }    return null;  }  final byte[] plain=ByteArray.copy(plainSha,0,plainSha.length - DIGEST_LENGTH);  final byte[] sha=ByteArray.copy(plainSha,plainSha.length - DIGEST_LENGTH,DIGEST_LENGTH);  final byte[] calculatedSha=Digest.SHA1(plainSha,0,plainSha.length - DIGEST_LENGTH);  if (Cfg.DEBUG) {    Check.asserts(plain.length + DIGEST_LENGTH == plainSha.length,"plain.length");  }  if (Cfg.DEBUG) {    Check.asserts(sha.length == DIGEST_LENGTH,"sha.length");  }  if (Cfg.DEBUG) {    Check.asserts(calculatedSha.length == DIGEST_LENGTH,"calculatedSha.length");  }  if (Arrays.equals(calculatedSha,sha)) {    return plain;  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: decryptDataIntegrity: sha error!");    }    throw new CryptoException();  }}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T readValue(JsonParser jp,TypeReference<?> valueTypeRef) throws IOException, JsonParseException, JsonMappingException {  return (T)_readValue(copyDeserializationConfig(),jp,_typeFactory.constructType(valueTypeRef));}  }
class C{  public static void equippedByNPC(final Player player,final Item item){  if (!(item instanceof StackableItem)) {    process(player,TutorialEventType.FIRST_EQUIPPED);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.293 -0500",hash_original_method="321DCA737B51074721765C9DBE3DB18C",hash_generated_method="5FAC7568D6F34C6CC0CF3C57502A9AD0") public Intent cloneFilter(){  return new Intent(this,false);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private main(){}  }
class C{  private void swapBlocks(int from,int second,int to){  int len1=second - from, len2=to - second + 1;  if (len1 == 0 || len2 == 0) {    return;  }  if (len1 < temp.length) {    System.arraycopy(data,from,temp,0,len1);    System.arraycopy(data,second,data,from,len2);    System.arraycopy(temp,0,data,from + len2,len1);    return;  } else   if (len2 < temp.length) {    System.arraycopy(data,second,temp,0,len2);    System.arraycopy(data,from,data,from + len2,len1);    System.arraycopy(temp,0,data,from,len2);    return;  }  reverseBlock(from,second - 1);  reverseBlock(second,to);  reverseBlock(from,to);}  }
class C{  public void notifyDataChanged(){  init();}  }
class C{  protected void sequence_TypeVariableWithDefSiteVariance(ISerializationContext context,TypeVariable semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private static Matrix aTy(Matrix a,Matrix y){  double[][] A=a.getArray();  double[][] Y=y.getArray();  Matrix x=new Matrix(a.getColumnDimension(),1);  double[][] X=x.getArray();  for (int row=0; row < A.length; row++) {    double[] Arow=A[row];    double[] Yrow=Y[row];    for (int col=0; col < Arow.length; col++) {      X[col][0]+=Arow[col] * Yrow[0];    }  }  return x;}  }
class C{  public void deleteRow(int selectedRow){  String type=((org.trade.dictionary.valuetype.IndicatorSeries)this.getValueAt(selectedRow,1)).getCode();  String name=(String)this.getValueAt(selectedRow,2);  for (  final IndicatorSeries element : getData().getIndicatorSeries()) {    if (CoreUtils.nullSafeComparator(element.getName(),name) == 0 && CoreUtils.nullSafeComparator(element.getType(),type) == 0) {      getData().getIndicatorSeries().remove(element);      getData().setDirty(true);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }  }}  }
class C{  public Vector2 abs(){  x=Math.abs(x);  z=Math.abs(z);  return this;}  }
class C{  public void info(String format,Object arg){  formatAndLog(Log.INFO,format,arg);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        addToken(Token.IDENTIFIER);      }case 37:    break;case 32:{    addToken(Token.LITERAL_BOOLEAN);  }case 38:break;case 13:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);return firstToken;}case 39:break;case 18:{addToken(Token.ERROR_CHAR);}case 40:break;case 15:{addToken(Token.ERROR_NUMBER_FORMAT);}case 41:break;case 4:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 42:break;case 19:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 43:break;case 30:{addToken(Token.FUNCTION);}case 44:break;case 6:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 45:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 46:break;case 35:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 47:break;case 25:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.PREPROCESSOR);start=zzMarkedPos;}case 48:break;case 10:{addToken(Token.VARIABLE);}case 49:break;case 34:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_DOCUMENTATION);start=zzMarkedPos;}case 50:break;case 26:{addToken(Token.LITERAL_CHAR);}case 51:break;case 17:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 52:break;case 21:{start=zzMarkedPos - 2;yybegin(MLC);}case 53:break;case 7:{addToken(Token.WHITESPACE);}case 54:break;case 24:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_DOCUMENTATION);}case 55:break;case 29:{addToken(Token.DATA_TYPE);}case 56:break;case 23:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 57:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 58:break;case 28:{start=zzMarkedPos - 3;yybegin(DOCCOMMENT);}case 59:break;case 22:{addToken(Token.RESERVED_WORD);}case 60:break;case 33:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 61:break;case 14:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 62:break;case 9:{addToken(Token.SEPARATOR);}case 63:break;case 5:{addNullToken();return firstToken;}case 64:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 65:break;case 8:{addToken(Token.OPERATOR);}case 66:break;case 16:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 67:break;case 36:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 68:break;case 20:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 69:break;case 31:{addToken(Token.COMMENT_MULTILINE);}case 70:break;case 11:{}case 71:break;case 27:{addToken(Token.ERROR_STRING_DOUBLE);}case 72:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 959:break;case DOCCOMMENT:{yybegin(YYINITIAL);addToken(start,zzEndRead,Token.COMMENT_DOCUMENTATION);return firstToken;}case 960:break;case YYINITIAL:{addNullToken();return firstToken;}case 961:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 962:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static boolean isLower(double[] a,double[] b){  for (int i=0; i < a.length; i++) {    if (a[i] > b[i]) {      return false;    }  }  return true;}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    AppLog.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  private static void addMirrorToVolume(Volume volume,BlockMirror mirror,DbClient dbClient){  StringSet mirrors=volume.getMirrors();  if (mirrors == null) {    mirrors=new StringSet();  }  mirrors.add(mirror.getId().toString());  volume.setMirrors(mirrors);  dbClient.persistObject(volume);}  }
class C{  public static int explicitCutoff(final byte cutoffByte){  return (cutoffByte & EXPLICIT_CUTOFF_MASK);}  }
class C{  public static double[] randomDoubleArray(int len){  return randomDoubleArray(len,new Random());}  }
class C{  final public static double normalize_value(double val){  val%=60f;  if (val < 0f) {    val+=60f;  }  return val;}  }
class C{  public void saveData(String fn){  logger.info("saving volume data...");  try {    DataOutputStream ds=new DataOutputStream(new FileOutputStream(fn));    for (    float element : data) {      ds.writeFloat(element);    }    ds.flush();    ds.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.266 -0500",hash_original_method="60E245C2A53AD4DE6244FC5F357660C8",hash_generated_method="78945C81B34F3347D4044B647EE36D37") private static void onBinderStrictModePolicyChange(int newPolicy){  setBlockGuardPolicy(newPolicy);}  }
class C{  static Class<?>[] typesToClasses(TypeReference[] types){  Class<?>[] classes=new Class[types.length];  for (int i=0; i < types.length; i++) {    classes[i]=types[i].resolve().getClassForType();  }  return classes;}  }
class C{  @Override public double evaluateAttribute(int attribute) throws Exception {  return m_InfoGains[attribute];}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mNum=getArguments() != null ? getArguments().getInt("num") : 1;}  }
class C{  public void writeObject(Object object) throws IOException {  if (object == null) {    writeNull();    return;  }  Serializer serializer;  serializer=_serializerFactory.getSerializer(object.getClass());  serializer.writeObject(object,this);}  }
class C{  public Packager createPackager(String packagerName){  if (packagerName == null) {    throw new IllegalArgumentException("Packager name should not be null.");  }  if (packagerName.equalsIgnoreCase("PHP")) {    return new PherializePackager();  } else   if (packagerName.equalsIgnoreCase("JSON")) {    return new JsonPackager();  } else   if (packagerName.equalsIgnoreCase("MSGPACK")) {    return new MsgpackPackager();  } else {    throw new IllegalArgumentException("Unknown packager type " + packagerName + ".");  }}  }
class C{  public boolean isDeclaredProvidedByRuntime(){  return declaredProvidedByRuntime;}  }
class C{  public static String toUpperCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('a' <= ch && 'z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'a' + 'A');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.808 -0500",hash_original_method="552F6B1597CA5ECF686CDEE0458B0DC7",hash_generated_method="65EA165C625CAA01135A48B79EA80832") public HttpRoute(HttpHost target,InetAddress local,HttpHost[] proxies,boolean secure,TunnelType tunnelled,LayerType layered){  this(local,target,toChain(proxies),secure,tunnelled,layered);}  }
class C{  public GetMovies(ListType.Limits limits,String... properties){  super();  addParameterToRequest("properties",properties);  addParameterToRequest("limits",limits);}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,ImageObserver observer){  return mGraphics.drawImage(img,x,y,width,height,observer);}  }
class C{  void initTitleBarStatus(){  if (shouldPaintStatusBar()) {    if (((BorderLayout)titleArea.getLayout()).getNorth() == null) {      titleArea.addComponent(BorderLayout.NORTH,createStatusBar());    }  }}  }
class C{  public boolean isModification(){  return getAddedCount() == getRemovedCount();}  }
class C{  @Override public void introspect(ContextH3 context){}  }
class C{  void checkVariablePressed(ActionEvent e){  for (int i=0; i < _variableList.size(); i++) {    _variableList.get(i).evaluate();  }  _variableTableModel.fireTableDataChanged();}  }
class C{  public Node parent(){  return this.parent;}  }
class C{  protected void visitNode(final Node n,final DijkstraNodeData data,final PseudoRemovePriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink){  data.visit(outLink,cost,time,getIterationId());  pendingNodes.add(n,getPriority(data));}  }
class C{  public void evaluate(double[] xr,double[] xi,double[] Xr,double[] Xi){  this.yr=Xr;  this.yi=Xi;  dft.link(xr,xi,Xr,Xi);  arraysUnlinked=false;  dft.evaluate();}  }
class C{  public final void testNotNullWithCharSequenceParameter(){  assertNotNull(Validators.notNull("foo"));}  }
class C{  public void submitVmList(List<? extends Vm> list){  getVmList().addAll(list);}  }
class C{  private static void waitForRecoveriesToFinish(CloudSolrClient server,String collection) throws KeeperException, InterruptedException {  ZkStateReader zkStateReader=server.getZkStateReader();  try {    boolean cont=true;    while (cont) {      boolean sawLiveRecovering=false;      zkStateReader.updateClusterState();      ClusterState clusterState=zkStateReader.getClusterState();      Map<String,Slice> slices=clusterState.getSlicesMap(collection);      Preconditions.checkNotNull("Could not find collection:" + collection,slices);      for (      Map.Entry<String,Slice> entry : slices.entrySet()) {        Map<String,Replica> shards=entry.getValue().getReplicasMap();        for (        Map.Entry<String,Replica> shard : shards.entrySet()) {          String state=shard.getValue().getStr(ZkStateReader.STATE_PROP);          if ((state.equals(Replica.State.RECOVERING) || state.equals(Replica.State.DOWN)) && clusterState.liveNodesContain(shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP))) {            sawLiveRecovering=true;          }        }      }      if (!sawLiveRecovering) {        cont=false;      } else {        Thread.sleep(1000);      }    }  }  finally {    logger.info("Exiting solr wait");  }}  }
class C{  public boolean isStopMethod(MethodReference ref){  if ((ref.getTypeNameString().equals("java.io.File") && ref.getMethod().equals("delete")) || (ref.getTypeNameString().equals("javax.naming.InitialContext") && ref.getMethod().equals("lookup")) || (ref.getTypeNameString().equals("java.lang.reflect.Method") && ref.getMethod().equals("invoke"))|| (ref.getTypeNameString().equals("java.lang.invoke.MethodHandle") && ref.getMethod().startsWith("invoke"))|| (ref.getTypeNameString().equals("sun.rmi.transport.tcp.TCPTransport") && ref.getMethod().equals("listen"))|| (ref.getTypeNameString().endsWith(".TemplatesImpl") && ref.getMethod().equals("newTransformer"))|| (ref.getTypeNameString().equals("java.net.URLClassLoader") && ref.getMethod().equals("newInstance"))|| ref.getMethod().equals("halt")) {    return true;  }  return false;}  }
class C{  public List<Entry> createIndex(String inFile){  String shpFile=null;  List<Entry> entries=new ArrayList<Entry>();  if (inFile.endsWith(".shp")) {    shpFile=inFile;  } else {    logger.warning("can't create spatial index entries from non-shape file: " + inFile);    return entries;  }  byte fileHeader[]=new byte[SHAPE_FILE_HEADER_LENGTH];  BufferedInputStream shp=null;  int shapeType;  try {    URL shpURL=PropUtils.getResourceOrFileOrURL(shpFile);    if (shpURL == null) {      return entries;    }    if (logger.isLoggable(Level.FINE)) {      logger.fine("creating spatial index entries for " + inFile);    }    shp=new BufferedInputStream(shpURL.openStream());    shp.read(fileHeader,0,SHAPE_FILE_HEADER_LENGTH);    shapeType=readLEInt(fileHeader,32);switch (shapeType) {case SHAPE_TYPE_NULL:      indexNulls(shp,SHAPE_FILE_HEADER_LENGTH,entries);    break;case SHAPE_TYPE_POINT:case SHAPE_TYPE_POINTZ:case SHAPE_TYPE_POINTM:  indexPoints(shp,SHAPE_FILE_HEADER_LENGTH,entries);break;case SHAPE_TYPE_MULTIPOINT:case SHAPE_TYPE_MULTIPOINTZ:case SHAPE_TYPE_MULTIPOINTM:case SHAPE_TYPE_POLYLINE:case SHAPE_TYPE_POLYLINEZ:case SHAPE_TYPE_POLYLINEM:case SHAPE_TYPE_POLYGON:case SHAPE_TYPE_POLYGONZ:case SHAPE_TYPE_POLYGONM:indexPolygons(shp,SHAPE_FILE_HEADER_LENGTH,entries);break;default :logger.warning("Unknown shape type: " + shapeType);}} catch (java.io.IOException e) {e.printStackTrace();} finally {try {if (shp != null) shp.close();} catch (java.io.IOException e) {}}return entries;}  }
class C{  public static boolean isPrimitive(Value v){  v=safeValue(v,Isolate.DEFAULT_ID);  Object o=v.getValueAsObject();  return (o == Value.UNDEFINED || o == null || o instanceof Boolean || o instanceof Double || o instanceof String);}  }
class C{  public boolean checkAtMostOne(String... flags){  if (flags.length < 2) {    throw new IllegalArgumentException("checkOneOrNone requires at least two parameters");  }  final StringBuilder sb=new StringBuilder();  boolean isset=false;  for (  final String flag : flags) {    final Flag aFlag=getFlag(flag);    if ((aFlag != null) && aFlag.isSet()) {      if (!isset) {        isset=true;      } else {        setParseMessage("Cannot set both " + sb.toString() + " and "+ LONG_FLAG_PREFIX+ flag);        return false;      }      sb.append(LONG_FLAG_PREFIX).append(flag);    }  }  return true;}  }
class C{  public void doBreak(){  dim.setBreak();}  }
class C{  public static int binarySearch(byte[] array,int startIndex,int endIndex,byte value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  public static boolean isHexDigit(char c){  return (c >= '0' && c <= '9') || ((c >= 'a') && (c <= 'f')) || ((c >= 'A') && (c <= 'F'));}  }
class C{  public void concatenate(SIPObjectList otherList,boolean topFlag){  super.concatenate(otherList,topFlag);}  }
class C{  public ActiveEntity(final RPObject object){  super(object);  direction=Direction.STOP;  speed=0.0;  stepsTaken=0;  update();}  }
class C{  protected void rescaleImage(int width,int height,int hint){  bgImage=getRTextAreaBase().createVolatileImage(width,height);  if (bgImage != null)   renderImage(width,height,hint);}  }
class C{  public void close() throws SQLException {  if (resultSet != null) {    resultSet.close();  }}  }
class C{  public DoubleMetaphoneFilter(TokenStream input,int maxCodeLength,boolean inject){  super(input);  this.encoder.setMaxCodeLen(maxCodeLength);  this.inject=inject;}  }
class C{  public boolean forEachValue(TIntProcedure procedure){  Object[] keys=_set;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  private static void showTableEditorsDemoButtonClicked(){  TableEditorsDemo.createAndShowTableDemoFrame();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.147 -0500",hash_original_method="9A8DBFCDD6673580DBBCEDB8AE69733A",hash_generated_method="E318F5A382F6DD3A6D9B9ED0A805C948") public void startPrefixMapping(String prefix,String uri) throws SAXException {}  }
class C{  public static <T>T instantiate(Class<T> type,String className) throws ClassInstantiationException {  try {    try {      return type.cast(loader.loadClass(className).newInstance());    } catch (    ClassNotFoundException e) {      return type.cast(loader.loadClass(type.getPackage().getName() + "." + className).newInstance());    }  } catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|ClassCastException e) {    throw new ClassInstantiationException(e);  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.titlePaint,stream);  SerialUtilities.writePaint(this.subtitlePaint,stream);  SerialUtilities.writePaint(this.chartBackgroundPaint,stream);  SerialUtilities.writePaint(this.legendBackgroundPaint,stream);  SerialUtilities.writePaint(this.legendItemPaint,stream);  SerialUtilities.writePaint(this.plotBackgroundPaint,stream);  SerialUtilities.writePaint(this.plotOutlinePaint,stream);  SerialUtilities.writePaint(this.labelLinkPaint,stream);  SerialUtilities.writePaint(this.baselinePaint,stream);  SerialUtilities.writePaint(this.domainGridlinePaint,stream);  SerialUtilities.writePaint(this.rangeGridlinePaint,stream);  SerialUtilities.writePaint(this.crosshairPaint,stream);  SerialUtilities.writePaint(this.axisLabelPaint,stream);  SerialUtilities.writePaint(this.tickLabelPaint,stream);  SerialUtilities.writePaint(this.itemLabelPaint,stream);  SerialUtilities.writePaint(this.shadowPaint,stream);  SerialUtilities.writePaint(this.thermometerPaint,stream);  SerialUtilities.writePaint(this.wallPaint,stream);  SerialUtilities.writePaint(this.errorIndicatorPaint,stream);  SerialUtilities.writePaint(this.gridBandPaint,stream);  SerialUtilities.writePaint(this.gridBandAlternatePaint,stream);}  }
class C{  public static Integer appendGroupNodeComment(final SQLProvider provider,final INaviGroupNode groupNode,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02449: provider argument can not be null");  Preconditions.checkNotNull(groupNode,"IE02450: groupNode argument can not be null");  Preconditions.checkNotNull(commentText,"IE02451: commentText argument can not be null");  Preconditions.checkNotNull(userId,"IE02452: userId argument can not be null");  Preconditions.checkArgument(groupNode.getId() > 0,"Error: group node is not saved.");  final String function=" { ? = call append_group_node_comment(?, ?, ?) } ";  try {    final CallableStatement appendCommentFunction=provider.getConnection().getConnection().prepareCall(function);    try {      appendCommentFunction.registerOutParameter(1,Types.INTEGER);      appendCommentFunction.setInt(2,groupNode.getId());      appendCommentFunction.setInt(3,userId);      appendCommentFunction.setString(4,commentText);      appendCommentFunction.execute();      final Integer commentId=appendCommentFunction.getInt(1);      if (appendCommentFunction.wasNull()) {        throw new CouldntSaveDataException("Error: Got an comment id of null from the database");      }      return commentId;    }  finally {      appendCommentFunction.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public BlockingObservableAssert<T> failsWithError(Class<? extends Throwable> errorType){  isNotNull();  fails();  assertThat(getBlockingObservableExecutor().getError()).isInstanceOf(errorType);  return this;}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public static float buildFloat(int mant,int exp){  if (exp < -125 || mant == 0) {    return 0.0f;  }  if (exp >= 128) {    return (mant > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;  }  if (exp == 0) {    return mant;  }  if (mant >= (1 << 26)) {    mant++;  }  return (float)((exp > 0) ? mant * pow10[exp] : mant / pow10[-exp]);}  }
class C{  public static ClientTombstoneMessage gc(LocalRegion region,Map<VersionSource,Long> regionGCVersions,EventID eventId){  return new ClientTombstoneMessage(TOperation.GC,region,regionGCVersions,eventId);}  }
class C{  public Vector(int capacity,int capacityIncrement){  if (capacity < 0) {    throw new IllegalArgumentException();  }  elementData=newElementArray(capacity);  elementCount=0;  this.capacityIncrement=capacityIncrement;}  }
class C{  public Object clone(){  SIPRequest retval=(SIPRequest)super.clone();  retval.transactionPointer=null;  if (this.requestLine != null)   retval.requestLine=(RequestLine)this.requestLine.clone();  return retval;}  }
class C{  public TypeCheckerBuilder addSrcDirectory(VirtualFile srcDirectory){  srcDirectories.add(srcDirectory);  return this;}  }
class C{  public PatternReplaceCharFilterFactory(Map<String,String> args){  super(args);  pattern=getPattern(args,"pattern");  replacement=get(args,"replacement","");  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void prepare(){}  }
class C{  public Date parseDateLenient(String s,SolrQueryRequest req) throws ParseException {  try {    return fmtThreadLocal.get().parse(s);  } catch (  Exception e) {    return DateUtil.parseDate(s);  }}  }
class C{  public boolean hasDecodedObject(){  return (decoderState == DECODER_OK);}  }
class C{  void printProgress(long offset){  current+=offset;  long now=System.currentTimeMillis();  if (now - lastTime > 3000) {    String msg=(low + (high - low) * current / total) + "% ";    if (pos > 80) {      System.out.println();      pos=0;    }    System.out.print(msg);    pos+=msg.length();    lastTime=now;  }}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public final boolean isInnerClass(){  return outerClass != null;}  }
class C{  public static String md5Hex(byte[] data){  return HexUtil.toHexString(md5(data));}  }
class C{  public Transform(Vector2 position,float angle){  setPosition(position);  setRotation(angle);}  }
class C{  private void calculateMenuItemPosition(){  float itemRadius=(expandedRadius + collapsedRadius) / 2, f;  RectF area=new RectF(center.x - itemRadius,center.y - itemRadius,center.x + itemRadius,center.y + itemRadius);  Path path=new Path();  path.addArc(area,(float)fromAngle,(float)(toAngle - fromAngle));  PathMeasure measure=new PathMeasure(path,false);  float len=measure.getLength();  int divisor=getChildCount();  float divider=len / divisor;  for (int i=0; i < getChildCount(); i++) {    float[] coords=new float[2];    measure.getPosTan(i * divider + divider * .5f,coords,null);    FilterMenu.Item item=(FilterMenu.Item)getChildAt(i).getTag();    item.setX((int)coords[0] - item.getView().getMeasuredWidth() / 2);    item.setY((int)coords[1] - item.getView().getMeasuredHeight() / 2);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.658 -0400",hash_original_method="0F98CEE5769F2D254ED7C2ED79018DD6",hash_generated_method="2BE1FE74C79C5C68C6CD84831DB7FE3F") @Override public String toString(){  return super.toString() + "(" + filter.toString()+ ")";}  }
class C{  @Override public Struct createStruct(String typeName,Object[] attributes) throws SQLException {  throw unsupported("Struct");}  }
class C{  protected void doPrintClassification(Classifier classifier,Instance inst,int index) throws Exception {  double[] d=classifier.distributionForInstance(inst);  doPrintClassification(d,inst,index);}  }
class C{  public boolean add(final double[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public void notifyNowPlaying(){  Timber.i("notifyNowPlaying called");  if (musicPlayer.getNowPlaying() == null) {    Timber.i("Not showing notification -- nothing is playing");    return;  }  MediaSessionCompat mediaSession=musicPlayer.getMediaSession();  NotificationCompat.Builder builder=MediaStyleHelper.from(this,mediaSession);  setupNotificationActions(builder);  builder.setSmallIcon(getNotificationIcon()).setDeleteIntent(getStopIntent()).setStyle(new NotificationCompat.MediaStyle().setShowActionsInCompactView(1,2).setShowCancelButton(true).setCancelButtonIntent(getStopIntent()).setMediaSession(musicPlayer.getMediaSession().getSessionToken()));  showNotification(builder.build());}  }
class C{  public DefaultBackup(){  super("backups");}  }
class C{  UnicodeVersion(String version,EnumMap<DataFileType,URL> dataFiles){  this.dataFiles=dataFiles;  setVersions(version,dataFiles.get(DataFileType.UNICODE_DATA));}  }
class C{  public static Builder builder(SortedMap<LockDescriptor,LockMode> lockMap){  return new Builder(lockMap);}  }
class C{  public void run(){  super.run();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void doInterpolation(){  double func=funcArray[gj - 1][gi - 1];  double xyf=(cont - func) / (fij - func);  if (xyf == 0)   ++ignext;  double wxx=0, wyy=0;  double xVal=0, yVal=0;  if (xArray != null) {    xVal=xArray[gj - 1][gi - 1];    yVal=yArray[gj - 1][gi - 1];switch (idir) {case 1:      wxx=xVal + xyf * (xArray[gj - 1][gi + 1 - 1] - xVal);    wyy=yVal + xyf * (yArray[gj - 1][gi + 1 - 1] - yVal);  break;case 2:wxx=xVal + xyf * (xArray[gj + 1 - 1][gi - 1] - xVal);wyy=yVal + xyf * (yArray[gj + 1 - 1][gi - 1] - yVal);break;case 3:wxx=xVal + xyf * (xArray[gj - 1][gi - 1 - 1] - xVal);wyy=yVal + xyf * (yArray[gj - 1][gi - 1 - 1] - yVal);break;case 4:wxx=xVal + xyf * (xArray[gj - 1 - 1][gi - 1] - xVal);wyy=yVal + xyf * (yArray[gj - 1 - 1][gi - 1] - yVal);break;}} else {xVal=xArr1D[gi - 1];yVal=yArr1D[gj - 1];switch (idir) {case 1:wxx=xVal + xyf * (xArr1D[gi + 1 - 1] - xVal);wyy=yVal;break;case 2:wxx=xVal;wyy=yVal + xyf * (yArr1D[gj + 1 - 1] - yVal);break;case 3:wxx=xVal + xyf * (xArr1D[gi - 1 - 1] - xVal);wyy=yVal;break;case 4:wxx=xVal;wyy=yVal + xyf * (yArr1D[gj - 1 - 1] - yVal);break;}}if (DEBUG) {System.out.println("i, j = " + gi + ","+ gj);System.out.println("cont = " + (float)cont + ",  fij = "+ (float)fij+ ",  func = "+ (float)func+ ",  xyf = "+ (float)xyf);System.out.println("xVal = " + (float)xVal + ",  yVal = "+ (float)yVal);System.out.println("wxx = " + (float)wxx + ",  wyy = "+ (float)wyy);}if (lnstrt == 1) {np=1;pathbufxt[np - 1]=wxx;pathbufyt[np - 1]=wyy;wx=wxx;wy=wyy;lnstrt=0;} else {boolean skipFlg=false;if (ignext == 2) {if (wxx == pathbufxt[np - 1] && wyy == pathbufyt[np - 1]) {ignext=0;skipFlg=true;} else ignext=1;}if (!skipFlg) {++np;pathbufxt[np - 1]=wxx;pathbufyt[np - 1]=wyy;if (np == kBufSize) {accumContour(np,icont,pathbufxt,pathbufyt,cAttr[icont]);pathbufxt[0]=pathbufxt[np - 1];pathbufyt[0]=pathbufyt[np - 1];np=1;}if (wxx == wx && wyy == wy) return;}}switch (idir) {case 1:++gi;if (!Routine_L51()) Routine_L21();break;case 2:++gj;Routine_L21();break;case 3:--gi;if (!Routine_L31()) Routine_L21();break;case 4:--gj;if (!Routine_L41()) Routine_L21();break;}return;}  }
class C{  public static void register(){  CommandCenter.register("storemessage",new StoreMessageAction());}  }
class C{  public final void addElements(int value,int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  for (int i=0; i < numberOfElements; i++) {    m_map[m_firstFree]=value;    m_firstFree++;  }}  }
class C{  public Bundler putInt(String key,int value){  bundle.putInt(key,value);  return this;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public boolean startsWith(java.lang.String prefix,int toffset){  return false;}  }
class C{  public EventStream makeEventStream(){  List<EventMapping> mappingList=eventMappingRepository.findAll();  EventStream es=new DefaultEventStream();  es.setJobExecutor(jobExecutor);  for (  EventMapping mapping : mappingList) {    if (!mapping.getActive() || mapping.getActions() == null || mapping.getActions().isEmpty()) {      continue;    }    es.registerEventChecker(new EventChecker(mapping,es));  }  return es;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean containsMapping(Object key,Object value){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k)     return tab[i + 1] == value;    if (item == null)     return false;    i=nextKeyIndex(i,len);  }}  }
class C{  private static Random random(){  return RandomizedContext.current().getRandom();}  }
class C{  public ClientBuilder defaultWriteTimeoutMillis(long defaultWriteTimeoutMillis){  return option(ClientOption.DEFAULT_WRITE_TIMEOUT_MILLIS,defaultWriteTimeoutMillis);}  }
class C{  public void start(String tag,String name,String value){  tag(tag,name,value,false);}  }
class C{  protected void buildJMSResources() throws Exception {  super.buildJMSResources();}  }
class C{  private void doOptimize() throws SearchException, PageException {  required("collection",action,"collection",collection);  getCollection().optimize();}  }
class C{  public static void list(){  NetworksDataTable dataTable=new NetworksDataTable();  render(dataTable);}  }
class C{  public void emitCodePrefix(ResolvedJavaMethod installedCodeOwner,CompilationResultBuilder crb,AMD64MacroAssembler asm,RegisterConfig regConfig,Label verifiedEntry){  HotSpotProviders providers=getProviders();  if (installedCodeOwner != null && !installedCodeOwner.isStatic()) {    crb.recordMark(config.MARKID_UNVERIFIED_ENTRY);    CallingConvention cc=regConfig.getCallingConvention(HotSpotCallingConventionType.JavaCallee,null,new JavaType[]{providers.getMetaAccess().lookupJavaType(Object.class)},this);    Register inlineCacheKlass=rax;    Register receiver=asRegister(cc.getArgument(0));    AMD64Address src=new AMD64Address(receiver,config.hubOffset);    if (config.useCompressedClassPointers) {      Register register=r10;      AMD64HotSpotMove.decodeKlassPointer(asm,register,providers.getRegisters().getHeapBaseRegister(),src,config.getKlassEncoding());      if (config.narrowKlassBase != 0) {        asm.movq(providers.getRegisters().getHeapBaseRegister(),config.narrowOopBase);      }      asm.cmpq(inlineCacheKlass,register);    } else {      asm.cmpq(inlineCacheKlass,src);    }    AMD64Call.directConditionalJmp(crb,asm,getForeignCalls().lookupForeignCall(IC_MISS_HANDLER),ConditionFlag.NotEqual);  }  asm.align(config.codeEntryAlignment);  crb.recordMark(config.MARKID_OSR_ENTRY);  asm.bind(verifiedEntry);  crb.recordMark(config.MARKID_VERIFIED_ENTRY);}  }
class C{  public static int degree(long p){  int result=0;  while (p != 0) {    result++;    p>>>=1;  }  return result - 1;}  }
class C{  protected void removeListener(){  try {    getDistributionManager().removeMembershipListener(this);  } catch (  DistributedSystemDisconnectedException e) {  }}  }
class C{  public static void outputLog(Writer writer){  if (loggingEnabled()) {    try {synchronized (times) {        for (int i=0; i < times.size(); ++i) {          TimeData td=times.get(i);          if (td != null) {            writer.write(i + " " + td.getMessage()+ ": "+ (td.getTime() - baseTime)+ "\n");          }        }      }      writer.flush();    } catch (    Exception e) {      System.out.println(e + ": Writing performance log to " + writer);    }  }}  }
class C{  public boolean rejectIt(){  log.info(toString());  setIsApproved(false);  return true;}  }
class C{  public void rotateZ(double degrees){  Transform3D other=new Transform3D();  other.rotZ(degrees * Math.PI / 180);  transform(other);}  }
class C{  public StringAttributeRule(String name,String description,String example){  this(name,description,example,false);}  }
class C{  protected static Point2D[] locateArrowHeads(int arrowDirection,int arrowLocation,OMAbstractLine line){  if (line.xpoints == null || line.xpoints.length == 0 || line.xpoints[0].length == 0) {    return null;  }  int pointIndex=line.xpoints[0].length - 1;  if (Debug.debugging("arrowheads")) {    Debug.output("createArrowHeads(): Number of points = " + pointIndex);  }  int drawingLinetype=OMLine.STRAIGHT_LINE;  if (pointIndex > 1) {    drawingLinetype=OMLine.CURVED_LINE;  }  int[] end=new int[2];  int[] start=new int[2];  end[0]=pointIndex;  start[0]=0;  end[1]=0;  start[1]=pointIndex;  int origEnd=pointIndex;  int origStart=0;  int numArrows=1;  if (arrowDirection == OMArrowHead.ARROWHEAD_DIRECTION_BOTH) {    numArrows=2;  }  Point2D sPoint1=new Point2D.Float();  Point2D ePoint1=new Point2D.Float();  Point2D sPoint2=new Point2D.Float();  Point2D ePoint2=new Point2D.Float();  if (line instanceof OMLine) {    OMLine omLine=(OMLine)line;    if (omLine.arc != null && omLine.arc.getReversed() == true) {      if (arrowDirection == OMArrowHead.ARROWHEAD_DIRECTION_FORWARD) {        arrowDirection=OMArrowHead.ARROWHEAD_DIRECTION_BACKWARD;      } else       if (arrowDirection == OMArrowHead.ARROWHEAD_DIRECTION_BACKWARD) {        arrowDirection=OMArrowHead.ARROWHEAD_DIRECTION_FORWARD;      }    }  }  List<Point2D> pointVec=new Vector<Point2D>();  for (int lineNum=0; lineNum < line.xpoints.length; lineNum++) {    float[] xpoints=line.xpoints[lineNum];    float[] ypoints=line.ypoints[lineNum];switch (drawingLinetype) {case OMLine.STRAIGHT_LINE:      Debug.message("arrowheads","createArrowHeads(): Inside x-y space");    float newEndX;  float newEndY;float dx;float dy;float dd;if (needBackwardArrow(arrowDirection)) {newEndX=xpoints[origStart];newEndY=ypoints[origStart];if (arrowLocation != 100) {dx=xpoints[origStart] - xpoints[origEnd];dy=ypoints[origStart] - ypoints[origEnd];int offset=0;if (dx == 0) {newEndX=xpoints[origEnd];offset=(int)((float)dy * (arrowLocation / 100.0f));newEndY=ypoints[origEnd] + offset;} else {dd=Math.abs((float)dy / (float)dx);if (Math.abs(dx) > Math.abs(dy)) {  newEndX=xpoints[origEnd] + (int)((float)dx * (arrowLocation / 100.0));  newEndY=ypoints[origEnd];  offset=(int)((float)Math.abs(xpoints[origEnd] - newEndX) * dd);  if (dy < 0) {    newEndY-=offset;  } else {    newEndY+=offset;  }} else {  newEndY=ypoints[origEnd] + (int)((float)dy * (arrowLocation / 100.0));  newEndX=xpoints[origEnd];  offset=(int)((float)Math.abs(ypoints[origEnd] - newEndY) / dd);  if (dx < 0) {    newEndX-=offset;  } else {    newEndX+=offset;  }}}}if (start[1] < 0) {start[1]=0;}if (numArrows == 2) {sPoint2.setLocation(xpoints[origEnd],ypoints[origEnd]);ePoint2.setLocation(newEndX,newEndY);} else {sPoint1.setLocation(xpoints[origEnd],ypoints[origEnd]);ePoint1.setLocation(newEndX,newEndY);}}if (needForwardArrow(arrowDirection)) {newEndX=xpoints[origEnd];newEndY=ypoints[origEnd];if (arrowLocation != 100) {dx=xpoints[origEnd] - xpoints[origStart];dy=ypoints[origEnd] - ypoints[origStart];int offset=0;if (dx == 0) {newEndX=xpoints[origStart];offset=(int)((float)dy * (arrowLocation / 100.0f));newEndY=ypoints[origStart] + offset;} else {dd=Math.abs((float)dy / (float)dx);if (Math.abs(dx) > Math.abs(dy)) {newEndX=xpoints[origStart] + (int)((float)dx * (arrowLocation / 100.0f));newEndY=ypoints[origStart];offset=(int)((float)Math.abs(xpoints[origStart] - newEndX) * dd);if (dy < 0) {  newEndY-=offset;} else {  newEndY+=offset;}} else {newEndY=ypoints[origStart] + (int)((float)dy * (arrowLocation / 100.0));newEndX=xpoints[origStart];offset=(int)((float)Math.abs(ypoints[origStart] - newEndY) / dd);if (dx < 0) {  newEndX-=offset;} else {  newEndX+=offset;}}}}sPoint1.setLocation(xpoints[origStart],ypoints[origStart]);ePoint1.setLocation(newEndX,newEndY);}break;case OMLine.CURVED_LINE:Debug.message("arrowheads","createArrowHeads(): Curved line arrowhead");if (needBackwardArrow(arrowDirection)) {Debug.message("arrowheads","createArrowHeads(): direction backward and");int bindex=pointIndex - (int)((float)pointIndex * (float)(arrowLocation / 100.0));if (bindex == 0) {bindex=1;}if (numArrows == 2) {sPoint2.setLocation(xpoints[bindex],ypoints[bindex]);ePoint2.setLocation(xpoints[bindex - 1],ypoints[bindex - 1]);} else {sPoint1.setLocation(xpoints[bindex],ypoints[bindex]);ePoint1.setLocation(xpoints[bindex - 1],ypoints[bindex - 1]);}}if (needForwardArrow(arrowDirection)) {int findex=(int)((float)pointIndex * (float)(arrowLocation / 100.0));if (findex == pointIndex) {findex=findex - 1;}if (findex > xpoints.length - 2) {findex=xpoints.length - 2;}sPoint1.setLocation(xpoints[findex],ypoints[findex]);ePoint1.setLocation(xpoints[findex + 1],ypoints[findex + 1]);}break;}pointVec.add((Point2D)sPoint1.clone());pointVec.add((Point2D)ePoint1.clone());if (numArrows > 1) {pointVec.add((Point2D)sPoint2.clone());pointVec.add((Point2D)ePoint2.clone());}}Point2D[] ret=new Point2D[pointVec.size()];int i=0;for (Point2D point : pointVec) {ret[i++]=point;}return ret;}  }
class C{  public static IPackageFragmentRoot addSourceContainer(IJavaProject jproject,String containerName) throws CoreException {  return addSourceContainer(jproject,containerName,new Path[0]);}  }
class C{  void visitAttemptRecover(AttemptBlock attemptBlock,TemplateElement attemptedSection,RecoveryBlock recoverySection) throws TemplateException, IOException {  Writer prevOut=this.out;  StringWriter sw=new StringWriter();  this.out=sw;  TemplateException thrownException=null;  boolean lastFIRE=setFastInvalidReferenceExceptions(false);  boolean lastInAttemptBlock=inAttemptBlock;  try {    inAttemptBlock=true;    visit(attemptedSection);  } catch (  TemplateException te) {    thrownException=te;  } finally {    inAttemptBlock=lastInAttemptBlock;    setFastInvalidReferenceExceptions(lastFIRE);    this.out=prevOut;  }  if (thrownException != null) {    if (ATTEMPT_LOGGER.isDebugEnabled()) {      ATTEMPT_LOGGER.debug("Error in attempt block " + attemptBlock.getStartLocationQuoted(),thrownException);    }    try {      recoveredErrorStack.add(thrownException);      visit(recoverySection);    }  finally {      recoveredErrorStack.remove(recoveredErrorStack.size() - 1);    }  } else {    out.write(sw.toString());  }}  }
class C{  public QLFInMemoryCollection(List<QLFDocument<F>> docs){  this.docs=docs;}  }
class C{  public boolean hasDefaultMIMEType(String mimeType){  return getDefaultMIMEType().equalsIgnoreCase(mimeType);}  }
class C{  public void colorize(final int level,final long offset,final int size,final Color color,final Color bgcolor){  Preconditions.checkArgument(offset >= 0,"Error: offset argument must be greater or equal to zero");  Preconditions.checkArgument(size >= 0,"Error: size argument must be greater or equal to zero");  Preconditions.checkArgument((level >= 0) && (level < m_coloredRanges.length),"Error: level argument must be greater or equal to zero");  m_coloredRanges[level].addRange(new ColoredRange(offset,size,color,bgcolor));  repaint();}  }
class C{  public static String readTextFile(File file) throws IOException {  FileInputStream inStream=new FileInputStream(file);  boolean useFallback=false;  try {    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();    Document processXmlDocument=documentBuilder.parse(inStream);    XPathFactory xPathFactory=XPathFactory.newInstance();    XPath xPath=xPathFactory.newXPath();    String versionString=xPath.evaluate("/process/@version",processXmlDocument);    VersionNumber version=new VersionNumber(versionString);    if (version.isAtMost(5,2,8)) {      useFallback=true;    }  } catch (  XPathExpressionException e) {    useFallback=true;  }catch (  SAXException e) {    useFallback=true;  }catch (  ParserConfigurationException e) {    useFallback=true;  }catch (  IOException e) {    useFallback=true;  }catch (  NumberFormatException e) {    useFallback=true;  }  InputStreamReader reader=null;  try {    inStream=new FileInputStream(file);    if (useFallback) {      reader=new InputStreamReader(inStream);    } else {      reader=new InputStreamReader(inStream,XMLImporter.PROCESS_FILE_CHARSET);    }    return readTextFile(reader);  }  finally {    try {      inStream.close();    } catch (    IOException e) {    }    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public synchronized void close(){  if (!done) {    if (serverSocket != null && !serverSocket.isClosed()) {      try {        serverSocket.close();        done=true;      } catch (      IOException e) {        logger.warn(e.getMessage());      }    } else {      logger.warn("Unable to close server socket (null or already closed)");    }  }}  }
class C{  public int containedParsersCount(){  return _parsers.length;}  }
class C{  private EntitySpec buildEntitySpec(StaticDefinitions staticDefs,Class<?> entityDefinitionClass){  if (!inprogress.add(entityDefinitionClass)) {    return null;  }  try {    EntitySpec spec=new EntitySpec();    if (staticDefs.extendsEntity(entityDefinitionClass)) {      EntitySpec superSpec=getSuperEntitySpec(spec,staticDefs,entityDefinitionClass);      spec.setParentEntitySpec(superSpec);    }    spec.setAbstractEntity(staticDefs.isAstract(entityDefinitionClass));    spec.setClassName(staticDefs.createFullyQualifiedModelClassName(entityDefinitionClass));    spec.setQueryClassName(staticDefs.createFullyQualifiedQueryClassName(entityDefinitionClass));    spec.setTableName(staticDefs.getTableName(entityDefinitionClass));    entitySpecByStaticKey.put(entityDefinitionClass,spec);    addInterfaceNodeSpecs(staticDefs,spec,entityDefinitionClass);    addOwnNodeSpecs(staticDefs,spec,entityDefinitionClass);    addInterfaceConstraints(staticDefs,spec,entityDefinitionClass);    addOwnConstraints(staticDefs,spec,entityDefinitionClass,false);    return spec;  }  finally {    inprogress.remove(entityDefinitionClass);  }}  }
class C{  public Namespace pop(){  return remove(namespaceStack.size() - 1);}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  map.put(k4,v4);  map.put(k5,v5);  map.put(k6,v6);  return map;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.TYPE_REF__NULL_MODIFIER:    setNullModifier((NullModifier)newValue);  return;case TypeRefsPackage.TYPE_REF__UNDEF_MODIFIER:setUndefModifier((UndefModifier)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isRespectingAspectRatio(){  return _respectAspectRatio;}  }
class C{  public boolean isSelected(){  return isSelected;}  }
class C{  public void reset(LinkedList<Operator> operators){  if (this.activated) {    this.routeHashes=new TreeSet<>();    for (    Operator operator : operators) {      Set<String> routesHashesOfOperator=new TreeSet<>();      for (      PPlan plan : operator.getAllPlans()) {        String routeHash=generateRouteHash(plan);        if (this.routeHashes.contains(routeHash)) {          if (routesHashesOfOperator.contains(routeHash)) {            log.warn("Operator " + operator.getId() + " offers the same plan twice. Plan: "+ plan.getId()+ " managed to circumvent the franchise system with route "+ routeHash);          } else {            log.warn("Operator " + operator.getId() + " with plan "+ plan.getId()+ " managed to circumvent the franchise system with route "+ routeHash);          }        }        this.routeHashes.add(routeHash);        routesHashesOfOperator.add(routeHash);      }    }  }}  }
class C{  private Element createIDPSSODescriptor(boolean exportPrivateData) throws Exception {  Element idpssoD=doc.createElement(SAMLNames.IDPSSODESCRIPTOR);  idpssoD.setAttribute(SAMLNames.PSE,SAMLNames.REQUIREDPROTOCAL);  idpssoD.setAttribute(SAMLNames.WANTSIGNED,SAMLNames.FALSE);  if (exportPrivateData) {    setExtensionAttributes(idpssoD);    Element extEle=createExtensionEle();    if (extEle != null) {      idpssoD.appendChild(extEle);    }  }  Element keyD=createKeyDescriptor(exportPrivateData);  if (keyD != null) {    idpssoD.appendChild(keyD);  }  Element sloEle=createSingleLogOutForCastleAsIDP(SAMLNames.HTTP_REDIRECT_BINDING);  idpssoD.appendChild(sloEle);  sloEle=createSingleLogOutForCastleAsIDP(SAMLNames.SOAP_BINDING);  idpssoD.appendChild(sloEle);  createNameIDFormats(idpssoD,true);  String ssoLocationStr=convertToIPV6ShortForm(idmClient.getEntityID(tenantName));  if (ssoLocationStr == null) {    ssoLocationStr=tenantName;  }  ssoLocationStr=ssoLocationStr.replaceAll("/Metadata/","/SSO/");  Element ssos=createEndPoint(SAMLNames.SSOS,SAMLNames.HTTP_REDIRECT_BINDING,ssoLocationStr,null);  idpssoD.appendChild(ssos);  createAttributesEle(idpssoD);  return idpssoD;}  }
class C{  public static void copy(Resource in,Resource out) throws IOException {  in.copyTo(out,false);}  }
class C{  ForkJoinWorkerThread(ForkJoinPool pool,ThreadGroup threadGroup,AccessControlContext acc){  super(threadGroup,NAME_PLACEHOLDER);  TLRandom.setInheritedAccessControlContext(this,acc);  TLRandom.eraseThreadLocals(this);  this.pool=pool;  this.workQueue=pool.registerWorker(this);}  }
class C{  protected boolean isError(Node that,Message message){  return !(message instanceof UsageWarning);}  }
class C{  public static void sort(short[] a){  DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private CSSElement[] sortSelectorsBySpecificity(CSSElement[] css){  Vector sortedSelectors=new Vector();  for (int s=0; s < css.length; s++) {    CSSElement cssRoot=css[s];    String cssPageURL=cssRoot.getAttributeById(CSSElement.CSS_PAGEURL);    DocumentInfo cssDocInfo=null;    if (cssPageURL != null) {      cssDocInfo=new DocumentInfo(cssPageURL);    }    for (int iter=0; iter < cssRoot.getNumChildren(); iter++) {      CSSElement currentSelector=cssRoot.getCSSChildAt(iter);      if (cssPageURL != null) {        for (int i=0; i < URL_ATTRIBUTES.length; i++) {          String imageURL=getCSSUrl(currentSelector.getAttributeById(URL_ATTRIBUTES[i]));          if (imageURL != null) {            imageURL=cssDocInfo.convertURL(imageURL);            currentSelector.setAttribute(currentSelector.getAttributeName(new Integer(URL_ATTRIBUTES[i])),"url(" + imageURL + ")");          }        }      }      int i=0;      int specificity=currentSelector.getSelectorSpecificity();      while ((i < sortedSelectors.size()) && (specificity >= ((CSSElement)sortedSelectors.elementAt(i)).getSelectorSpecificity())) {        i++;      }      sortedSelectors.insertElementAt(currentSelector,i);    }  }  css=new CSSElement[sortedSelectors.size()];  for (int i=0; i < sortedSelectors.size(); i++) {    css[i]=(CSSElement)sortedSelectors.elementAt(i);  }  return css;}  }
class C{  public void recycle(){  checkClass=null;  type=null;  message=null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean handleSingleTapUp(MotionEvent e){  setEventTarget(mSearchPanel.isCoordinateInsideSearchContentView(e.getX() * mPxToDp,e.getY() * mPxToDp) ? EventTarget.SEARCH_CONTENT_VIEW : EventTarget.SEARCH_PANEL);  return false;}  }
class C{  public static String pwd() throws IOException {  return (new File(".")).getCanonicalPath();}  }
class C{  public void increment(int index,short value){  data[index]+=value;}  }
class C{  private static boolean isAssignableFrom(Type from,GenericArrayType to){  Type toGenericComponentType=to.getGenericComponentType();  if (toGenericComponentType instanceof ParameterizedType) {    Type t=from;    if (from instanceof GenericArrayType) {      t=((GenericArrayType)from).getGenericComponentType();    } else     if (from instanceof Class) {      Class<?> classType=(Class<?>)from;      while (classType.isArray()) {        classType=classType.getComponentType();      }      t=classType;    }    return isAssignableFrom(t,(ParameterizedType)toGenericComponentType,new HashMap<String,Type>());  }  return true;}  }
class C{  public List<ShoppingCartItem> findAllCartItems(String productId){  return this.findAllCartItems(productId,null);}  }
class C{  @Uninterruptible("Objects on the stack won't be recognized by GC, therefore don't allow GC") @Entrypoint public void entryToJNI(int encodedReferenceOffsets){  savedTRreg=Magic.getThreadRegister();  Address callersFP=Magic.getCallerFramePointer(Magic.getFramePointer());  basePointerOnEntryToNative=callersFP;  JNITopJavaFP=callersFP;  if (VM.traceJNI) {    RVMMethod m=CompiledMethods.getCompiledMethod(Magic.getCompiledMethodID(callersFP)).getMethod();    VM.sysWrite("calling JNI from ");    VM.sysWrite(m.getDeclaringClass().getDescriptor());    VM.sysWrite(" ");    VM.sysWrite(m.getName());    VM.sysWrite(m.getDescriptor());    VM.sysWriteln();  }  if (JNIRefsTop > 0) {    uninterruptiblePushJNIRef(Address.fromIntSignExtend(JNIRefsSavedFP),false);    JNIRefsSavedFP=JNIRefsTop;  }  Address fp=Magic.getFramePointer();  Offset argOffset=Offset.fromIntSignExtend(5 * BYTES_IN_ADDRESS);  fp.store(uninterruptiblePushJNIRef(fp.loadAddress(argOffset),true),argOffset);  while (encodedReferenceOffsets != 0) {    argOffset=argOffset.plus(BYTES_IN_ADDRESS);    if ((encodedReferenceOffsets & 1) != 0) {      fp.store(uninterruptiblePushJNIRef(fp.loadAddress(argOffset),true),argOffset);    }    encodedReferenceOffsets>>>=1;  }  RVMThread.enterJNIFromCallIntoNative();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void resumeController(){}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<E> p=first(); p != null; p=succ(p)) {    Object item=p.item;    if (item != null)     s.writeObject(item);  }  s.writeObject(null);}  }
class C{  public Map<String,String> metadata(){  if (metadata == null) {    return null;  }  Map<String,String> copy=new HashMap<String,String>();  copy.putAll(metadata);  return copy;}  }
class C{  protected static void marshalValue(Class<?> type,Object value,ObjectOutput out) throws IOException {  if (type.isPrimitive()) {    if (type == int.class) {      out.writeInt(((Integer)value).intValue());    } else     if (type == boolean.class) {      out.writeBoolean(((Boolean)value).booleanValue());    } else     if (type == byte.class) {      out.writeByte(((Byte)value).byteValue());    } else     if (type == char.class) {      out.writeChar(((Character)value).charValue());    } else     if (type == short.class) {      out.writeShort(((Short)value).shortValue());    } else     if (type == long.class) {      out.writeLong(((Long)value).longValue());    } else     if (type == float.class) {      out.writeFloat(((Float)value).floatValue());    } else     if (type == double.class) {      out.writeDouble(((Double)value).doubleValue());    } else {      throw new Error("Unrecognized primitive type: " + type);    }  } else {    out.writeObject(value);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.170 -0500",hash_original_method="A07D6B0AFBCC00CEA34DA7A028A542EA",hash_generated_method="F7AAA2725238842B4BAAE8F843C26F96") public void rotate(float x,float y,float z){  addTaint(x);  addTaint(y);  addTaint(z);}  }
class C{  public HTMLSchema(){  setURI("http://www.w3.org/1999/xhtml");  setPrefix("html");  elementType("<pcdata>",M_EMPTY,M_PCDATA,0);  elementType("<root>",M_ROOT,M_EMPTY,0);  elementType("a",M_PCDATA | M_NOLINK,M_INLINE,0);  elementType("abbr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("acronym",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("address",M_PCDATA | M_INLINE | M_P,M_BLOCK,0);  elementType("applet",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("area",M_EMPTY,M_AREA,0);  elementType("b",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("base",M_EMPTY,M_HEAD,0);  elementType("basefont",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("bdo",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("bgsound",M_EMPTY,M_HEAD,0);  elementType("big",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blink",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blockquote",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("body",M_PCDATA | M_INLINE | M_BLOCK,M_HTML | M_BODY,0);  elementType("br",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("button",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("canvas",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("caption",M_PCDATA | M_INLINE,M_TABULAR,0);  elementType("center",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("cite",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("code",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("col",M_EMPTY,M_COL | M_TABULAR,0);  elementType("colgroup",M_COL,M_TABULAR,0);  elementType("comment",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("dd",M_PCDATA | M_INLINE | M_BLOCK,M_DEF,0);  elementType("del",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCKINLINE | M_BLOCK,F_RESTART);  elementType("dfn",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("dir",M_LI,M_BLOCK,0);  elementType("div",M_LI | M_PCDATA | M_INLINE| M_BLOCK,M_LI | M_BLOCK,0);  elementType("dl",M_DEF,M_BLOCK,0);  elementType("dt",M_PCDATA | M_INLINE,M_DEF,0);  elementType("em",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("fieldset",M_PCDATA | M_LEGEND | M_INLINE| M_BLOCK,M_BLOCK,0);  elementType("font",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("form",M_PCDATA | M_INLINE | M_NOLINK| M_BLOCK| M_TR| M_CELL,M_BLOCK | M_FORM,F_NOFORCE);  elementType("frame",M_EMPTY,M_FRAME,0);  elementType("frameset",M_FRAME,M_FRAME | M_HTML,0);  elementType("h1",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h2",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h3",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h4",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h5",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h6",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("head",M_HEAD,M_HTML,0);  elementType("hr",M_EMPTY,M_BLOCK,0);  elementType("html",M_HTML,M_ROOT,0);  elementType("i",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("iframe",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("img",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("input",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("ins",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCK,F_RESTART);  elementType("isindex",M_EMPTY,M_HEAD,0);  elementType("kbd",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("label",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("legend",M_PCDATA | M_INLINE,M_LEGEND,0);  elementType("li",M_PCDATA | M_INLINE | M_BLOCK,M_LI,0);  elementType("link",M_EMPTY,M_HEAD | M_INLINE,0);  elementType("listing",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("map",M_BLOCK | M_AREA,M_INLINE,0);  elementType("marquee",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("menu",M_LI,M_BLOCK,0);  elementType("meta",M_EMPTY,M_HEAD,0);  elementType("nobr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("noframes",M_BODY | M_BLOCK | M_INLINE,M_BLOCK | M_HTML | M_FRAME,0);  elementType("noscript",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("object",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_HEAD | M_INLINE | M_NOLINK,0);  elementType("ol",M_LI | M_INLINE | M_BLOCK,M_LI | M_BLOCK,0);  elementType("optgroup",M_OPTIONS,M_OPTIONS,0);  elementType("option",M_PCDATA,M_OPTION | M_OPTIONS,0);  elementType("p",M_PCDATA | M_INLINE | M_TABLE,M_BLOCK | M_P,0);  elementType("param",M_EMPTY,M_PARAM,0);  elementType("pre",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("q",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rb",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rbc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rtc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ruby",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("s",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("samp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("script",M_PCDATA,M_ANY & ~M_ROOT,F_CDATA);  elementType("select",M_OPTIONS,M_INLINE,0);  elementType("small",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("span",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("strike",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("strong",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("style",M_PCDATA,M_HEAD | M_INLINE,F_CDATA);  elementType("sub",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("sup",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("table",M_FORM | M_TABULAR,M_BLOCK | M_TABLE,F_NOFORCE);  elementType("tbody",M_TR,M_TABULAR,0);  elementType("td",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("textarea",M_PCDATA,M_INLINE,0);  elementType("tfoot",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("th",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("thead",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("title",M_PCDATA,M_HEAD,0);  elementType("tr",M_FORM | M_CELL,M_TR | M_TABULAR,0);  elementType("tt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("u",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ul",M_LI | M_INLINE | M_BLOCK,M_LI | M_BLOCK,0);  elementType("var",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("wbr",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("xmp",M_PCDATA | M_INLINE,M_BLOCK,0);  parent("<pcdata>","body");  parent("html","<root>");  parent("a","body");  parent("abbr","body");  parent("acronym","body");  parent("address","body");  parent("applet","body");  parent("area","map");  parent("b","body");  parent("base","head");  parent("basefont","body");  parent("bdo","body");  parent("bgsound","head");  parent("big","body");  parent("blink","body");  parent("blockquote","body");  parent("body","html");  parent("br","body");  parent("button","form");  parent("canvas","body");  parent("caption","table");  parent("center","body");  parent("cite","body");  parent("code","body");  parent("col","table");  parent("colgroup","table");  parent("comment","body");  parent("dd","dl");  parent("del","body");  parent("dfn","body");  parent("dir","body");  parent("div","body");  parent("dl","body");  parent("dt","dl");  parent("em","body");  parent("fieldset","form");  parent("font","body");  parent("form","body");  parent("frame","frameset");  parent("frameset","html");  parent("h1","body");  parent("h2","body");  parent("h3","body");  parent("h4","body");  parent("h5","body");  parent("h6","body");  parent("head","html");  parent("hr","body");  parent("i","body");  parent("iframe","body");  parent("img","body");  parent("input","form");  parent("ins","body");  parent("isindex","head");  parent("kbd","body");  parent("label","form");  parent("legend","fieldset");  parent("li","ul");  parent("link","head");  parent("listing","body");  parent("map","body");  parent("marquee","body");  parent("menu","body");  parent("meta","head");  parent("nobr","body");  parent("noframes","html");  parent("noscript","body");  parent("object","body");  parent("ol","body");  parent("optgroup","select");  parent("option","select");  parent("p","body");  parent("param","object");  parent("pre","body");  parent("q","body");  parent("rb","body");  parent("rbc","body");  parent("rp","body");  parent("rt","body");  parent("rtc","body");  parent("ruby","body");  parent("s","body");  parent("samp","body");  parent("script","html");  parent("select","form");  parent("small","body");  parent("span","body");  parent("strike","body");  parent("strong","body");  parent("style","head");  parent("sub","body");  parent("sup","body");  parent("table","body");  parent("tbody","table");  parent("td","tr");  parent("textarea","form");  parent("tfoot","table");  parent("th","tr");  parent("thead","table");  parent("title","head");  parent("tr","tbody");  parent("tt","body");  parent("u","body");  parent("ul","body");  parent("var","body");  parent("wbr","body");  parent("xmp","body");  attribute("a","hreflang","NMTOKEN",null);  attribute("a","shape","CDATA","rect");  attribute("a","tabindex","NMTOKEN",null);  attribute("applet","align","NMTOKEN",null);  attribute("area","nohref","BOOLEAN",null);  attribute("area","shape","CDATA","rect");  attribute("area","tabindex","NMTOKEN",null);  attribute("br","clear","CDATA","none");  attribute("button","disabled","BOOLEAN",null);  attribute("button","tabindex","NMTOKEN",null);  attribute("button","type","CDATA","submit");  attribute("caption","align","NMTOKEN",null);  attribute("col","align","NMTOKEN",null);  attribute("col","span","CDATA","1");  attribute("col","valign","NMTOKEN",null);  attribute("colgroup","align","NMTOKEN",null);  attribute("colgroup","span","CDATA","1");  attribute("colgroup","valign","NMTOKEN",null);  attribute("dir","compact","BOOLEAN",null);  attribute("div","align","NMTOKEN",null);  attribute("dl","compact","BOOLEAN",null);  attribute("form","enctype","CDATA","application/x-www-form-urlencoded");  attribute("form","method","CDATA","get");  attribute("frame","frameborder","CDATA","1");  attribute("frame","noresize","BOOLEAN",null);  attribute("frame","scrolling","CDATA","auto");  attribute("h1","align","NMTOKEN",null);  attribute("h2","align","NMTOKEN",null);  attribute("h3","align","NMTOKEN",null);  attribute("h4","align","NMTOKEN",null);  attribute("h5","align","NMTOKEN",null);  attribute("h6","align","NMTOKEN",null);  attribute("hr","align","NMTOKEN",null);  attribute("hr","noshade","BOOLEAN",null);  attribute("iframe","align","NMTOKEN",null);  attribute("iframe","frameborder","CDATA","1");  attribute("iframe","scrolling","CDATA","auto");  attribute("img","align","NMTOKEN",null);  attribute("img","ismap","BOOLEAN",null);  attribute("input","align","NMTOKEN",null);  attribute("input","checked","BOOLEAN",null);  attribute("input","disabled","BOOLEAN",null);  attribute("input","ismap","BOOLEAN",null);  attribute("input","maxlength","NMTOKEN",null);  attribute("input","readonly","BOOLEAN",null);  attribute("input","tabindex","NMTOKEN",null);  attribute("input","type","CDATA","text");  attribute("label","for","IDREF",null);  attribute("legend","align","NMTOKEN",null);  attribute("li","value","NMTOKEN",null);  attribute("link","hreflang","NMTOKEN",null);  attribute("marquee","width","NMTOKEN",null);  attribute("menu","compact","BOOLEAN",null);  attribute("meta","http-equiv","NMTOKEN",null);  attribute("meta","name","NMTOKEN",null);  attribute("object","align","NMTOKEN",null);  attribute("object","declare","BOOLEAN",null);  attribute("object","tabindex","NMTOKEN",null);  attribute("ol","compact","BOOLEAN",null);  attribute("ol","start","NMTOKEN",null);  attribute("optgroup","disabled","BOOLEAN",null);  attribute("option","disabled","BOOLEAN",null);  attribute("option","selected","BOOLEAN",null);  attribute("p","align","NMTOKEN",null);  attribute("param","valuetype","CDATA","data");  attribute("pre","width","NMTOKEN",null);  attribute("rt","rbspan","CDATA","1");  attribute("script","defer","BOOLEAN",null);  attribute("select","disabled","BOOLEAN",null);  attribute("select","multiple","BOOLEAN",null);  attribute("select","size","NMTOKEN",null);  attribute("select","tabindex","NMTOKEN",null);  attribute("table","align","NMTOKEN",null);  attribute("table","frame","NMTOKEN",null);  attribute("table","rules","NMTOKEN",null);  attribute("tbody","align","NMTOKEN",null);  attribute("tbody","valign","NMTOKEN",null);  attribute("td","align","NMTOKEN",null);  attribute("td","colspan","CDATA","1");  attribute("td","headers","IDREFS",null);  attribute("td","nowrap","BOOLEAN",null);  attribute("td","rowspan","CDATA","1");  attribute("td","scope","NMTOKEN",null);  attribute("td","valign","NMTOKEN",null);  attribute("textarea","cols","NMTOKEN",null);  attribute("textarea","disabled","BOOLEAN",null);  attribute("textarea","readonly","BOOLEAN",null);  attribute("textarea","rows","NMTOKEN",null);  attribute("textarea","tabindex","NMTOKEN",null);  attribute("tfoot","align","NMTOKEN",null);  attribute("tfoot","valign","NMTOKEN",null);  attribute("th","align","NMTOKEN",null);  attribute("th","colspan","CDATA","1");  attribute("th","headers","IDREFS",null);  attribute("th","nowrap","BOOLEAN",null);  attribute("th","rowspan","CDATA","1");  attribute("th","scope","NMTOKEN",null);  attribute("th","valign","NMTOKEN",null);  attribute("thead","align","NMTOKEN",null);  attribute("thead","valign","NMTOKEN",null);  attribute("tr","align","NMTOKEN",null);  attribute("tr","valign","NMTOKEN",null);  attribute("ul","compact","BOOLEAN",null);  attribute("ul","type","NMTOKEN",null);  attribute("xmp","width","NMTOKEN",null);  attribute("a","class","NMTOKEN",null);  attribute("abbr","class","NMTOKEN",null);  attribute("acronym","class","NMTOKEN",null);  attribute("address","class","NMTOKEN",null);  attribute("applet","class","NMTOKEN",null);  attribute("area","class","NMTOKEN",null);  attribute("b","class","NMTOKEN",null);  attribute("base","class","NMTOKEN",null);  attribute("basefont","class","NMTOKEN",null);  attribute("bdo","class","NMTOKEN",null);  attribute("bgsound","class","NMTOKEN",null);  attribute("big","class","NMTOKEN",null);  attribute("blink","class","NMTOKEN",null);  attribute("blockquote","class","NMTOKEN",null);  attribute("body","class","NMTOKEN",null);  attribute("br","class","NMTOKEN",null);  attribute("button","class","NMTOKEN",null);  attribute("canvas","class","NMTOKEN",null);  attribute("caption","class","NMTOKEN",null);  attribute("center","class","NMTOKEN",null);  attribute("cite","class","NMTOKEN",null);  attribute("code","class","NMTOKEN",null);  attribute("col","class","NMTOKEN",null);  attribute("colgroup","class","NMTOKEN",null);  attribute("comment","class","NMTOKEN",null);  attribute("dd","class","NMTOKEN",null);  attribute("del","class","NMTOKEN",null);  attribute("dfn","class","NMTOKEN",null);  attribute("dir","class","NMTOKEN",null);  attribute("div","class","NMTOKEN",null);  attribute("dl","class","NMTOKEN",null);  attribute("dt","class","NMTOKEN",null);  attribute("em","class","NMTOKEN",null);  attribute("fieldset","class","NMTOKEN",null);  attribute("font","class","NMTOKEN",null);  attribute("form","class","NMTOKEN",null);  attribute("frame","class","NMTOKEN",null);  attribute("frameset","class","NMTOKEN",null);  attribute("h1","class","NMTOKEN",null);  attribute("h2","class","NMTOKEN",null);  attribute("h3","class","NMTOKEN",null);  attribute("h4","class","NMTOKEN",null);  attribute("h5","class","NMTOKEN",null);  attribute("h6","class","NMTOKEN",null);  attribute("head","class","NMTOKEN",null);  attribute("hr","class","NMTOKEN",null);  attribute("html","class","NMTOKEN",null);  attribute("i","class","NMTOKEN",null);  attribute("iframe","class","NMTOKEN",null);  attribute("img","class","NMTOKEN",null);  attribute("input","class","NMTOKEN",null);  attribute("ins","class","NMTOKEN",null);  attribute("isindex","class","NMTOKEN",null);  attribute("kbd","class","NMTOKEN",null);  attribute("label","class","NMTOKEN",null);  attribute("legend","class","NMTOKEN",null);  attribute("li","class","NMTOKEN",null);  attribute("link","class","NMTOKEN",null);  attribute("listing","class","NMTOKEN",null);  attribute("map","class","NMTOKEN",null);  attribute("marquee","class","NMTOKEN",null);  attribute("menu","class","NMTOKEN",null);  attribute("meta","class","NMTOKEN",null);  attribute("nobr","class","NMTOKEN",null);  attribute("noframes","class","NMTOKEN",null);  attribute("noscript","class","NMTOKEN",null);  attribute("object","class","NMTOKEN",null);  attribute("ol","class","NMTOKEN",null);  attribute("optgroup","class","NMTOKEN",null);  attribute("option","class","NMTOKEN",null);  attribute("p","class","NMTOKEN",null);  attribute("param","class","NMTOKEN",null);  attribute("pre","class","NMTOKEN",null);  attribute("q","class","NMTOKEN",null);  attribute("rb","class","NMTOKEN",null);  attribute("rbc","class","NMTOKEN",null);  attribute("rp","class","NMTOKEN",null);  attribute("rt","class","NMTOKEN",null);  attribute("rtc","class","NMTOKEN",null);  attribute("ruby","class","NMTOKEN",null);  attribute("s","class","NMTOKEN",null);  attribute("samp","class","NMTOKEN",null);  attribute("script","class","NMTOKEN",null);  attribute("select","class","NMTOKEN",null);  attribute("small","class","NMTOKEN",null);  attribute("span","class","NMTOKEN",null);  attribute("strike","class","NMTOKEN",null);  attribute("strong","class","NMTOKEN",null);  attribute("style","class","NMTOKEN",null);  attribute("sub","class","NMTOKEN",null);  attribute("sup","class","NMTOKEN",null);  attribute("table","class","NMTOKEN",null);  attribute("tbody","class","NMTOKEN",null);  attribute("td","class","NMTOKEN",null);  attribute("textarea","class","NMTOKEN",null);  attribute("tfoot","class","NMTOKEN",null);  attribute("th","class","NMTOKEN",null);  attribute("thead","class","NMTOKEN",null);  attribute("title","class","NMTOKEN",null);  attribute("tr","class","NMTOKEN",null);  attribute("tt","class","NMTOKEN",null);  attribute("u","class","NMTOKEN",null);  attribute("ul","class","NMTOKEN",null);  attribute("var","class","NMTOKEN",null);  attribute("wbr","class","NMTOKEN",null);  attribute("xmp","class","NMTOKEN",null);  attribute("a","dir","NMTOKEN",null);  attribute("abbr","dir","NMTOKEN",null);  attribute("acronym","dir","NMTOKEN",null);  attribute("address","dir","NMTOKEN",null);  attribute("applet","dir","NMTOKEN",null);  attribute("area","dir","NMTOKEN",null);  attribute("b","dir","NMTOKEN",null);  attribute("base","dir","NMTOKEN",null);  attribute("basefont","dir","NMTOKEN",null);  attribute("bdo","dir","NMTOKEN",null);  attribute("bgsound","dir","NMTOKEN",null);  attribute("big","dir","NMTOKEN",null);  attribute("blink","dir","NMTOKEN",null);  attribute("blockquote","dir","NMTOKEN",null);  attribute("body","dir","NMTOKEN",null);  attribute("br","dir","NMTOKEN",null);  attribute("button","dir","NMTOKEN",null);  attribute("canvas","dir","NMTOKEN",null);  attribute("caption","dir","NMTOKEN",null);  attribute("center","dir","NMTOKEN",null);  attribute("cite","dir","NMTOKEN",null);  attribute("code","dir","NMTOKEN",null);  attribute("col","dir","NMTOKEN",null);  attribute("colgroup","dir","NMTOKEN",null);  attribute("comment","dir","NMTOKEN",null);  attribute("dd","dir","NMTOKEN",null);  attribute("del","dir","NMTOKEN",null);  attribute("dfn","dir","NMTOKEN",null);  attribute("dir","dir","NMTOKEN",null);  attribute("div","dir","NMTOKEN",null);  attribute("dl","dir","NMTOKEN",null);  attribute("dt","dir","NMTOKEN",null);  attribute("em","dir","NMTOKEN",null);  attribute("fieldset","dir","NMTOKEN",null);  attribute("font","dir","NMTOKEN",null);  attribute("form","dir","NMTOKEN",null);  attribute("frame","dir","NMTOKEN",null);  attribute("frameset","dir","NMTOKEN",null);  attribute("h1","dir","NMTOKEN",null);  attribute("h2","dir","NMTOKEN",null);  attribute("h3","dir","NMTOKEN",null);  attribute("h4","dir","NMTOKEN",null);  attribute("h5","dir","NMTOKEN",null);  attribute("h6","dir","NMTOKEN",null);  attribute("head","dir","NMTOKEN",null);  attribute("hr","dir","NMTOKEN",null);  attribute("html","dir","NMTOKEN",null);  attribute("i","dir","NMTOKEN",null);  attribute("iframe","dir","NMTOKEN",null);  attribute("img","dir","NMTOKEN",null);  attribute("input","dir","NMTOKEN",null);  attribute("ins","dir","NMTOKEN",null);  attribute("isindex","dir","NMTOKEN",null);  attribute("kbd","dir","NMTOKEN",null);  attribute("label","dir","NMTOKEN",null);  attribute("legend","dir","NMTOKEN",null);  attribute("li","dir","NMTOKEN",null);  attribute("link","dir","NMTOKEN",null);  attribute("listing","dir","NMTOKEN",null);  attribute("map","dir","NMTOKEN",null);  attribute("marquee","dir","NMTOKEN",null);  attribute("menu","dir","NMTOKEN",null);  attribute("meta","dir","NMTOKEN",null);  attribute("nobr","dir","NMTOKEN",null);  attribute("noframes","dir","NMTOKEN",null);  attribute("noscript","dir","NMTOKEN",null);  attribute("object","dir","NMTOKEN",null);  attribute("ol","dir","NMTOKEN",null);  attribute("optgroup","dir","NMTOKEN",null);  attribute("option","dir","NMTOKEN",null);  attribute("p","dir","NMTOKEN",null);  attribute("param","dir","NMTOKEN",null);  attribute("pre","dir","NMTOKEN",null);  attribute("q","dir","NMTOKEN",null);  attribute("rb","dir","NMTOKEN",null);  attribute("rbc","dir","NMTOKEN",null);  attribute("rp","dir","NMTOKEN",null);  attribute("rt","dir","NMTOKEN",null);  attribute("rtc","dir","NMTOKEN",null);  attribute("ruby","dir","NMTOKEN",null);  attribute("s","dir","NMTOKEN",null);  attribute("samp","dir","NMTOKEN",null);  attribute("script","dir","NMTOKEN",null);  attribute("select","dir","NMTOKEN",null);  attribute("small","dir","NMTOKEN",null);  attribute("span","dir","NMTOKEN",null);  attribute("strike","dir","NMTOKEN",null);  attribute("strong","dir","NMTOKEN",null);  attribute("style","dir","NMTOKEN",null);  attribute("sub","dir","NMTOKEN",null);  attribute("sup","dir","NMTOKEN",null);  attribute("table","dir","NMTOKEN",null);  attribute("tbody","dir","NMTOKEN",null);  attribute("td","dir","NMTOKEN",null);  attribute("textarea","dir","NMTOKEN",null);  attribute("tfoot","dir","NMTOKEN",null);  attribute("th","dir","NMTOKEN",null);  attribute("thead","dir","NMTOKEN",null);  attribute("title","dir","NMTOKEN",null);  attribute("tr","dir","NMTOKEN",null);  attribute("tt","dir","NMTOKEN",null);  attribute("u","dir","NMTOKEN",null);  attribute("ul","dir","NMTOKEN",null);  attribute("var","dir","NMTOKEN",null);  attribute("wbr","dir","NMTOKEN",null);  attribute("xmp","dir","NMTOKEN",null);  attribute("a","id","ID",null);  attribute("abbr","id","ID",null);  attribute("acronym","id","ID",null);  attribute("address","id","ID",null);  attribute("applet","id","ID",null);  attribute("area","id","ID",null);  attribute("b","id","ID",null);  attribute("base","id","ID",null);  attribute("basefont","id","ID",null);  attribute("bdo","id","ID",null);  attribute("bgsound","id","ID",null);  attribute("big","id","ID",null);  attribute("blink","id","ID",null);  attribute("blockquote","id","ID",null);  attribute("body","id","ID",null);  attribute("br","id","ID",null);  attribute("button","id","ID",null);  attribute("canvas","id","ID",null);  attribute("caption","id","ID",null);  attribute("center","id","ID",null);  attribute("cite","id","ID",null);  attribute("code","id","ID",null);  attribute("col","id","ID",null);  attribute("colgroup","id","ID",null);  attribute("comment","id","ID",null);  attribute("dd","id","ID",null);  attribute("del","id","ID",null);  attribute("dfn","id","ID",null);  attribute("dir","id","ID",null);  attribute("div","id","ID",null);  attribute("dl","id","ID",null);  attribute("dt","id","ID",null);  attribute("em","id","ID",null);  attribute("fieldset","id","ID",null);  attribute("font","id","ID",null);  attribute("form","id","ID",null);  attribute("frame","id","ID",null);  attribute("frameset","id","ID",null);  attribute("h1","id","ID",null);  attribute("h2","id","ID",null);  attribute("h3","id","ID",null);  attribute("h4","id","ID",null);  attribute("h5","id","ID",null);  attribute("h6","id","ID",null);  attribute("head","id","ID",null);  attribute("hr","id","ID",null);  attribute("html","id","ID",null);  attribute("i","id","ID",null);  attribute("iframe","id","ID",null);  attribute("img","id","ID",null);  attribute("input","id","ID",null);  attribute("ins","id","ID",null);  attribute("isindex","id","ID",null);  attribute("kbd","id","ID",null);  attribute("label","id","ID",null);  attribute("legend","id","ID",null);  attribute("li","id","ID",null);  attribute("link","id","ID",null);  attribute("listing","id","ID",null);  attribute("map","id","ID",null);  attribute("marquee","id","ID",null);  attribute("menu","id","ID",null);  attribute("meta","id","ID",null);  attribute("nobr","id","ID",null);  attribute("noframes","id","ID",null);  attribute("noscript","id","ID",null);  attribute("object","id","ID",null);  attribute("ol","id","ID",null);  attribute("optgroup","id","ID",null);  attribute("option","id","ID",null);  attribute("p","id","ID",null);  attribute("param","id","ID",null);  attribute("pre","id","ID",null);  attribute("q","id","ID",null);  attribute("rb","id","ID",null);  attribute("rbc","id","ID",null);  attribute("rp","id","ID",null);  attribute("rt","id","ID",null);  attribute("rtc","id","ID",null);  attribute("ruby","id","ID",null);  attribute("s","id","ID",null);  attribute("samp","id","ID",null);  attribute("script","id","ID",null);  attribute("select","id","ID",null);  attribute("small","id","ID",null);  attribute("span","id","ID",null);  attribute("strike","id","ID",null);  attribute("strong","id","ID",null);  attribute("style","id","ID",null);  attribute("sub","id","ID",null);  attribute("sup","id","ID",null);  attribute("table","id","ID",null);  attribute("tbody","id","ID",null);  attribute("td","id","ID",null);  attribute("textarea","id","ID",null);  attribute("tfoot","id","ID",null);  attribute("th","id","ID",null);  attribute("thead","id","ID",null);  attribute("title","id","ID",null);  attribute("tr","id","ID",null);  attribute("tt","id","ID",null);  attribute("u","id","ID",null);  attribute("ul","id","ID",null);  attribute("var","id","ID",null);  attribute("wbr","id","ID",null);  attribute("xmp","id","ID",null);  attribute("a","lang","NMTOKEN",null);  attribute("abbr","lang","NMTOKEN",null);  attribute("acronym","lang","NMTOKEN",null);  attribute("address","lang","NMTOKEN",null);  attribute("applet","lang","NMTOKEN",null);  attribute("area","lang","NMTOKEN",null);  attribute("b","lang","NMTOKEN",null);  attribute("base","lang","NMTOKEN",null);  attribute("basefont","lang","NMTOKEN",null);  attribute("bdo","lang","NMTOKEN",null);  attribute("bgsound","lang","NMTOKEN",null);  attribute("big","lang","NMTOKEN",null);  attribute("blink","lang","NMTOKEN",null);  attribute("blockquote","lang","NMTOKEN",null);  attribute("body","lang","NMTOKEN",null);  attribute("br","lang","NMTOKEN",null);  attribute("button","lang","NMTOKEN",null);  attribute("canvas","lang","NMTOKEN",null);  attribute("caption","lang","NMTOKEN",null);  attribute("center","lang","NMTOKEN",null);  attribute("cite","lang","NMTOKEN",null);  attribute("code","lang","NMTOKEN",null);  attribute("col","lang","NMTOKEN",null);  attribute("colgroup","lang","NMTOKEN",null);  attribute("comment","lang","NMTOKEN",null);  attribute("dd","lang","NMTOKEN",null);  attribute("del","lang","NMTOKEN",null);  attribute("dfn","lang","NMTOKEN",null);  attribute("dir","lang","NMTOKEN",null);  attribute("div","lang","NMTOKEN",null);  attribute("dl","lang","NMTOKEN",null);  attribute("dt","lang","NMTOKEN",null);  attribute("em","lang","NMTOKEN",null);  attribute("fieldset","lang","NMTOKEN",null);  attribute("font","lang","NMTOKEN",null);  attribute("form","lang","NMTOKEN",null);  attribute("frame","lang","NMTOKEN",null);  attribute("frameset","lang","NMTOKEN",null);  attribute("h1","lang","NMTOKEN",null);  attribute("h2","lang","NMTOKEN",null);  attribute("h3","lang","NMTOKEN",null);  attribute("h4","lang","NMTOKEN",null);  attribute("h5","lang","NMTOKEN",null);  attribute("h6","lang","NMTOKEN",null);  attribute("head","lang","NMTOKEN",null);  attribute("hr","lang","NMTOKEN",null);  attribute("html","lang","NMTOKEN",null);  attribute("i","lang","NMTOKEN",null);  attribute("iframe","lang","NMTOKEN",null);  attribute("img","lang","NMTOKEN",null);  attribute("input","lang","NMTOKEN",null);  attribute("ins","lang","NMTOKEN",null);  attribute("isindex","lang","NMTOKEN",null);  attribute("kbd","lang","NMTOKEN",null);  attribute("label","lang","NMTOKEN",null);  attribute("legend","lang","NMTOKEN",null);  attribute("li","lang","NMTOKEN",null);  attribute("link","lang","NMTOKEN",null);  attribute("listing","lang","NMTOKEN",null);  attribute("map","lang","NMTOKEN",null);  attribute("marquee","lang","NMTOKEN",null);  attribute("menu","lang","NMTOKEN",null);  attribute("meta","lang","NMTOKEN",null);  attribute("nobr","lang","NMTOKEN",null);  attribute("noframes","lang","NMTOKEN",null);  attribute("noscript","lang","NMTOKEN",null);  attribute("object","lang","NMTOKEN",null);  attribute("ol","lang","NMTOKEN",null);  attribute("optgroup","lang","NMTOKEN",null);  attribute("option","lang","NMTOKEN",null);  attribute("p","lang","NMTOKEN",null);  attribute("param","lang","NMTOKEN",null);  attribute("pre","lang","NMTOKEN",null);  attribute("q","lang","NMTOKEN",null);  attribute("rb","lang","NMTOKEN",null);  attribute("rbc","lang","NMTOKEN",null);  attribute("rp","lang","NMTOKEN",null);  attribute("rt","lang","NMTOKEN",null);  attribute("rtc","lang","NMTOKEN",null);  attribute("ruby","lang","NMTOKEN",null);  attribute("s","lang","NMTOKEN",null);  attribute("samp","lang","NMTOKEN",null);  attribute("script","lang","NMTOKEN",null);  attribute("select","lang","NMTOKEN",null);  attribute("small","lang","NMTOKEN",null);  attribute("span","lang","NMTOKEN",null);  attribute("strike","lang","NMTOKEN",null);  attribute("strong","lang","NMTOKEN",null);  attribute("style","lang","NMTOKEN",null);  attribute("sub","lang","NMTOKEN",null);  attribute("sup","lang","NMTOKEN",null);  attribute("table","lang","NMTOKEN",null);  attribute("tbody","lang","NMTOKEN",null);  attribute("td","lang","NMTOKEN",null);  attribute("textarea","lang","NMTOKEN",null);  attribute("tfoot","lang","NMTOKEN",null);  attribute("th","lang","NMTOKEN",null);  attribute("thead","lang","NMTOKEN",null);  attribute("title","lang","NMTOKEN",null);  attribute("tr","lang","NMTOKEN",null);  attribute("tt","lang","NMTOKEN",null);  attribute("u","lang","NMTOKEN",null);  attribute("ul","lang","NMTOKEN",null);  attribute("var","lang","NMTOKEN",null);  attribute("wbr","lang","NMTOKEN",null);  attribute("xmp","lang","NMTOKEN",null);  entity("aacgr",0x03AC);  entity("Aacgr",0x0386);  entity("aacute",0x00E1);  entity("Aacute",0x00C1);  entity("abreve",0x0103);  entity("Abreve",0x0102);  entity("ac",0x223E);  entity("acd",0x223F);  entity("acirc",0x00E2);  entity("Acirc",0x00C2);  entity("acute",0x00B4);  entity("acy",0x0430);  entity("Acy",0x0410);  entity("aelig",0x00E6);  entity("AElig",0x00C6);  entity("af",0x2061);  entity("afr",0x1D51E);  entity("Afr",0x1D504);  entity("agr",0x03B1);  entity("Agr",0x0391);  entity("agrave",0x00E0);  entity("Agrave",0x00C0);  entity("alefsym",0x2135);  entity("aleph",0x2135);  entity("alpha",0x03B1);  entity("Alpha",0x0391);  entity("amacr",0x0101);  entity("Amacr",0x0100);  entity("amalg",0x2A3F);  entity("amp",0x0026);  entity("and",0x2227);  entity("And",0x2A53);  entity("andand",0x2A55);  entity("andd",0x2A5C);  entity("andslope",0x2A58);  entity("andv",0x2A5A);  entity("ang",0x2220);  entity("ange",0x29A4);  entity("angle",0x2220);  entity("angmsd",0x2221);  entity("angmsdaa",0x29A8);  entity("angmsdab",0x29A9);  entity("angmsdac",0x29AA);  entity("angmsdad",0x29AB);  entity("angmsdae",0x29AC);  entity("angmsdaf",0x29AD);  entity("angmsdag",0x29AE);  entity("angmsdah",0x29AF);  entity("angrt",0x221F);  entity("angrtvb",0x22BE);  entity("angrtvbd",0x299D);  entity("angsph",0x2222);  entity("angst",0x212B);  entity("angzarr",0x237C);  entity("aogon",0x0105);  entity("Aogon",0x0104);  entity("aopf",0x1D552);  entity("Aopf",0x1D538);  entity("ap",0x2248);  entity("apacir",0x2A6F);  entity("ape",0x224A);  entity("apE",0x2A70);  entity("apid",0x224B);  entity("apos",0x0027);  entity("ApplyFunction",0x2061);  entity("approx",0x2248);  entity("approxeq",0x224A);  entity("aring",0x00E5);  entity("Aring",0x00C5);  entity("ascr",0x1D4B6);  entity("Ascr",0x1D49C);  entity("Assign",0x2254);  entity("ast",0x002A);  entity("asymp",0x2248);  entity("asympeq",0x224D);  entity("atilde",0x00E3);  entity("Atilde",0x00C3);  entity("auml",0x00E4);  entity("Auml",0x00C4);  entity("awconint",0x2233);  entity("awint",0x2A11);  entity("b.alpha",0x1D6C2);  entity("b.beta",0x1D6C3);  entity("b.chi",0x1D6D8);  entity("b.delta",0x1D6C5);  entity("b.Delta",0x1D6AB);  entity("b.epsi",0x1D6C6);  entity("b.epsiv",0x1D6DC);  entity("b.eta",0x1D6C8);  entity("b.gamma",0x1D6C4);  entity("b.Gamma",0x1D6AA);  entity("b.gammad",0x1D7CB);  entity("b.Gammad",0x1D7CA);  entity("b.iota",0x1D6CA);  entity("b.kappa",0x1D6CB);  entity("b.kappav",0x1D6DE);  entity("b.lambda",0x1D6CC);  entity("b.Lambda",0x1D6B2);  entity("b.mu",0x1D6CD);  entity("b.nu",0x1D6CE);  entity("b.omega",0x1D6DA);  entity("b.Omega",0x1D6C0);  entity("b.phi",0x1D6D7);  entity("b.Phi",0x1D6BD);  entity("b.phiv",0x1D6DF);  entity("b.pi",0x1D6D1);  entity("b.Pi",0x1D6B7);  entity("b.piv",0x1D6E1);  entity("b.psi",0x1D6D9);  entity("b.Psi",0x1D6BF);  entity("b.rho",0x1D6D2);  entity("b.rhov",0x1D6E0);  entity("b.sigma",0x1D6D4);  entity("b.Sigma",0x1D6BA);  entity("b.sigmav",0x1D6D3);  entity("b.tau",0x1D6D5);  entity("b.Theta",0x1D6AF);  entity("b.thetas",0x1D6C9);  entity("b.thetav",0x1D6DD);  entity("b.upsi",0x1D6D6);  entity("b.Upsi",0x1D6BC);  entity("b.xi",0x1D6CF);  entity("b.Xi",0x1D6B5);  entity("b.zeta",0x1D6C7);  entity("backcong",0x224C);  entity("backepsilon",0x03F6);  entity("backprime",0x2035);  entity("backsim",0x223D);  entity("backsimeq",0x22CD);  entity("Backslash",0x2216);  entity("Barv",0x2AE7);  entity("barvee",0x22BD);  entity("barwed",0x2305);  entity("Barwed",0x2306);  entity("barwedge",0x2305);  entity("bbrk",0x23B5);  entity("bbrktbrk",0x23B6);  entity("bcong",0x224C);  entity("bcy",0x0431);  entity("Bcy",0x0411);  entity("bdquo",0x201E);  entity("becaus",0x2235);  entity("because",0x2235);  entity("bemptyv",0x29B0);  entity("bepsi",0x03F6);  entity("bernou",0x212C);  entity("Bernoullis",0x212C);  entity("beta",0x03B2);  entity("Beta",0x0392);  entity("beth",0x2136);  entity("between",0x226C);  entity("bfr",0x1D51F);  entity("Bfr",0x1D505);  entity("bgr",0x03B2);  entity("Bgr",0x0392);  entity("bigcap",0x22C2);  entity("bigcirc",0x25EF);  entity("bigcup",0x22C3);  entity("bigodot",0x2A00);  entity("bigoplus",0x2A01);  entity("bigotimes",0x2A02);  entity("bigsqcup",0x2A06);  entity("bigstar",0x2605);  entity("bigtriangledown",0x25BD);  entity("bigtriangleup",0x25B3);  entity("biguplus",0x2A04);  entity("bigvee",0x22C1);  entity("bigwedge",0x22C0);  entity("bkarow",0x290D);  entity("blacklozenge",0x29EB);  entity("blacksquare",0x25AA);  entity("blacktriangle",0x25B4);  entity("blacktriangledown",0x25BE);  entity("blacktriangleleft",0x25C2);  entity("blacktriangleright",0x25B8);  entity("blank",0x2423);  entity("blk12",0x2592);  entity("blk14",0x2591);  entity("blk34",0x2593);  entity("block",0x2588);  entity("bnot",0x2310);  entity("bNot",0x2AED);  entity("bopf",0x1D553);  entity("Bopf",0x1D539);  entity("bot",0x22A5);  entity("bottom",0x22A5);  entity("bowtie",0x22C8);  entity("boxbox",0x29C9);  entity("boxdl",0x2510);  entity("boxdL",0x2555);  entity("boxDl",0x2556);  entity("boxDL",0x2557);  entity("boxdr",0x250C);  entity("boxdR",0x2552);  entity("boxDr",0x2553);  entity("boxDR",0x2554);  entity("boxh",0x2500);  entity("boxH",0x2550);  entity("boxhd",0x252C);  entity("boxhD",0x2565);  entity("boxHd",0x2564);  entity("boxHD",0x2566);  entity("boxhu",0x2534);  entity("boxhU",0x2568);  entity("boxHu",0x2567);  entity("boxHU",0x2569);  entity("boxminus",0x229F);  entity("boxplus",0x229E);  entity("boxtimes",0x22A0);  entity("boxul",0x2518);  entity("boxuL",0x255B);  entity("boxUl",0x255C);  entity("boxUL",0x255D);  entity("boxur",0x2514);  entity("boxuR",0x2558);  entity("boxUr",0x2559);  entity("boxUR",0x255A);  entity("boxv",0x2502);  entity("boxV",0x2551);  entity("boxvh",0x253C);  entity("boxvH",0x256A);  entity("boxVh",0x256B);  entity("boxVH",0x256C);  entity("boxvl",0x2524);  entity("boxvL",0x2561);  entity("boxVl",0x2562);  entity("boxVL",0x2563);  entity("boxvr",0x251C);  entity("boxvR",0x255E);  entity("boxVr",0x255F);  entity("boxVR",0x2560);  entity("bprime",0x2035);  entity("breve",0x02D8);  entity("brvbar",0x00A6);  entity("bscr",0x1D4B7);  entity("Bscr",0x212C);  entity("bsemi",0x204F);  entity("bsim",0x223D);  entity("bsime",0x22CD);  entity("bsol",0x005C);  entity("bsolb",0x29C5);  entity("bull",0x2022);  entity("bullet",0x2022);  entity("bump",0x224E);  entity("bumpe",0x224F);  entity("bumpE",0x2AAE);  entity("bumpeq",0x224F);  entity("Bumpeq",0x224E);  entity("cacute",0x0107);  entity("Cacute",0x0106);  entity("cap",0x2229);  entity("Cap",0x22D2);  entity("capand",0x2A44);  entity("capbrcup",0x2A49);  entity("capcap",0x2A4B);  entity("capcup",0x2A47);  entity("capdot",0x2A40);  entity("CapitalDifferentialD",0x2145);  entity("caret",0x2041);  entity("caron",0x02C7);  entity("Cayleys",0x212D);  entity("ccaps",0x2A4D);  entity("ccaron",0x010D);  entity("Ccaron",0x010C);  entity("ccedil",0x00E7);  entity("Ccedil",0x00C7);  entity("ccirc",0x0109);  entity("Ccirc",0x0108);  entity("Cconint",0x2230);  entity("ccups",0x2A4C);  entity("ccupssm",0x2A50);  entity("cdot",0x010B);  entity("Cdot",0x010A);  entity("cedil",0x00B8);  entity("Cedilla",0x00B8);  entity("cemptyv",0x29B2);  entity("cent",0x00A2);  entity("centerdot",0x00B7);  entity("cfr",0x1D520);  entity("Cfr",0x212D);  entity("chcy",0x0447);  entity("CHcy",0x0427);  entity("check",0x2713);  entity("checkmark",0x2713);  entity("chi",0x03C7);  entity("Chi",0x03A7);  entity("cir",0x25CB);  entity("circ",0x02C6);  entity("circeq",0x2257);  entity("circlearrowleft",0x21BA);  entity("circlearrowright",0x21BB);  entity("circledast",0x229B);  entity("circledcirc",0x229A);  entity("circleddash",0x229D);  entity("CircleDot",0x2299);  entity("circledR",0x00AE);  entity("circledS",0x24C8);  entity("CircleMinus",0x2296);  entity("CirclePlus",0x2295);  entity("CircleTimes",0x2297);  entity("cire",0x2257);  entity("cirE",0x29C3);  entity("cirfnint",0x2A10);  entity("cirmid",0x2AEF);  entity("cirscir",0x29C2);  entity("ClockwiseContourIntegral",0x2232);  entity("CloseCurlyDoubleQuote",0x201D);  entity("CloseCurlyQuote",0x2019);  entity("clubs",0x2663);  entity("clubsuit",0x2663);  entity("colon",0x003A);  entity("Colon",0x2237);  entity("colone",0x2254);  entity("Colone",0x2A74);  entity("coloneq",0x2254);  entity("comma",0x002C);  entity("commat",0x0040);  entity("comp",0x2201);  entity("compfn",0x2218);  entity("complement",0x2201);  entity("complexes",0x2102);  entity("cong",0x2245);  entity("congdot",0x2A6D);  entity("Congruent",0x2261);  entity("conint",0x222E);  entity("Conint",0x222F);  entity("ContourIntegral",0x222E);  entity("copf",0x1D554);  entity("Copf",0x2102);  entity("coprod",0x2210);  entity("Coproduct",0x2210);  entity("copy",0x00A9);  entity("copysr",0x2117);  entity("CounterClockwiseContourIntegral",0x2233);  entity("crarr",0x21B5);  entity("cross",0x2717);  entity("Cross",0x2A2F);  entity("cscr",0x1D4B8);  entity("Cscr",0x1D49E);  entity("csub",0x2ACF);  entity("csube",0x2AD1);  entity("csup",0x2AD0);  entity("csupe",0x2AD2);  entity("ctdot",0x22EF);  entity("cudarrl",0x2938);  entity("cudarrr",0x2935);  entity("cuepr",0x22DE);  entity("cuesc",0x22DF);  entity("cularr",0x21B6);  entity("cularrp",0x293D);  entity("cup",0x222A);  entity("Cup",0x22D3);  entity("cupbrcap",0x2A48);  entity("cupcap",0x2A46);  entity("CupCap",0x224D);  entity("cupcup",0x2A4A);  entity("cupdot",0x228D);  entity("cupor",0x2A45);  entity("curarr",0x21B7);  entity("curarrm",0x293C);  entity("curlyeqprec",0x22DE);  entity("curlyeqsucc",0x22DF);  entity("curlyvee",0x22CE);  entity("curlywedge",0x22CF);  entity("curren",0x00A4);  entity("curvearrowleft",0x21B6);  entity("curvearrowright",0x21B7);  entity("cuvee",0x22CE);  entity("cuwed",0x22CF);  entity("cwconint",0x2232);  entity("cwint",0x2231);  entity("cylcty",0x232D);  entity("dagger",0x2020);  entity("Dagger",0x2021);  entity("daleth",0x2138);  entity("darr",0x2193);  entity("dArr",0x21D3);  entity("Darr",0x21A1);  entity("dash",0x2010);  entity("dashv",0x22A3);  entity("Dashv",0x2AE4);  entity("dbkarow",0x290F);  entity("dblac",0x02DD);  entity("dcaron",0x010F);  entity("Dcaron",0x010E);  entity("dcy",0x0434);  entity("Dcy",0x0414);  entity("dd",0x2146);  entity("DD",0x2145);  entity("ddagger",0x2021);  entity("ddarr",0x21CA);  entity("DDotrahd",0x2911);  entity("ddotseq",0x2A77);  entity("deg",0x00B0);  entity("Del",0x2207);  entity("delta",0x03B4);  entity("Delta",0x0394);  entity("demptyv",0x29B1);  entity("dfisht",0x297F);  entity("dfr",0x1D521);  entity("Dfr",0x1D507);  entity("dgr",0x03B4);  entity("Dgr",0x0394);  entity("dHar",0x2965);  entity("dharl",0x21C3);  entity("dharr",0x21C2);  entity("DiacriticalAcute",0x00B4);  entity("DiacriticalDot",0x02D9);  entity("DiacriticalDoubleAcute",0x02DD);  entity("DiacriticalGrave",0x0060);  entity("DiacriticalTilde",0x02DC);  entity("diam",0x22C4);  entity("diamond",0x22C4);  entity("diamondsuit",0x2666);  entity("diams",0x2666);  entity("die",0x00A8);  entity("DifferentialD",0x2146);  entity("digamma",0x03DD);  entity("disin",0x22F2);  entity("div",0x00F7);  entity("divide",0x00F7);  entity("divideontimes",0x22C7);  entity("divonx",0x22C7);  entity("djcy",0x0452);  entity("DJcy",0x0402);  entity("dlcorn",0x231E);  entity("dlcrop",0x230D);  entity("dollar",0x0024);  entity("dopf",0x1D555);  entity("Dopf",0x1D53B);  entity("dot",0x02D9);  entity("Dot",0x00A8);  entity("doteq",0x2250);  entity("doteqdot",0x2251);  entity("DotEqual",0x2250);  entity("dotminus",0x2238);  entity("dotplus",0x2214);  entity("dotsquare",0x22A1);  entity("doublebarwedge",0x2306);  entity("DoubleContourIntegral",0x222F);  entity("DoubleDot",0x00A8);  entity("DoubleDownArrow",0x21D3);  entity("DoubleLeftArrow",0x21D0);  entity("DoubleLeftRightArrow",0x21D4);  entity("DoubleLeftTee",0x2AE4);  entity("DoubleLongLeftArrow",0x27F8);  entity("DoubleLongLeftRightArrow",0x27FA);  entity("DoubleLongRightArrow",0x27F9);  entity("DoubleRightArrow",0x21D2);  entity("DoubleRightTee",0x22A8);  entity("DoubleUpArrow",0x21D1);  entity("DoubleUpDownArrow",0x21D5);  entity("DoubleVerticalBar",0x2225);  entity("downarrow",0x2193);  entity("Downarrow",0x21D3);  entity("DownArrowBar",0x2913);  entity("DownArrowUpArrow",0x21F5);  entity("downdownarrows",0x21CA);  entity("downharpoonleft",0x21C3);  entity("downharpoonright",0x21C2);  entity("DownLeftRightVector",0x2950);  entity("DownLeftTeeVector",0x295E);  entity("DownLeftVector",0x21BD);  entity("DownLeftVectorBar",0x2956);  entity("DownRightTeeVector",0x295F);  entity("DownRightVector",0x21C1);  entity("DownRightVectorBar",0x2957);  entity("DownTee",0x22A4);  entity("DownTeeArrow",0x21A7);  entity("drbkarow",0x2910);  entity("drcorn",0x231F);  entity("drcrop",0x230C);  entity("dscr",0x1D4B9);  entity("Dscr",0x1D49F);  entity("dscy",0x0455);  entity("DScy",0x0405);  entity("dsol",0x29F6);  entity("dstrok",0x0111);  entity("Dstrok",0x0110);  entity("dtdot",0x22F1);  entity("dtri",0x25BF);  entity("dtrif",0x25BE);  entity("duarr",0x21F5);  entity("duhar",0x296F);  entity("dwangle",0x29A6);  entity("dzcy",0x045F);  entity("DZcy",0x040F);  entity("dzigrarr",0x27FF);  entity("eacgr",0x03AD);  entity("Eacgr",0x0388);  entity("eacute",0x00E9);  entity("Eacute",0x00C9);  entity("easter",0x2A6E);  entity("ecaron",0x011B);  entity("Ecaron",0x011A);  entity("ecir",0x2256);  entity("ecirc",0x00EA);  entity("Ecirc",0x00CA);  entity("ecolon",0x2255);  entity("ecy",0x044D);  entity("Ecy",0x042D);  entity("eDDot",0x2A77);  entity("edot",0x0117);  entity("eDot",0x2251);  entity("Edot",0x0116);  entity("ee",0x2147);  entity("eeacgr",0x03AE);  entity("EEacgr",0x0389);  entity("eegr",0x03B7);  entity("EEgr",0x0397);  entity("efDot",0x2252);  entity("efr",0x1D522);  entity("Efr",0x1D508);  entity("eg",0x2A9A);  entity("egr",0x03B5);  entity("Egr",0x0395);  entity("egrave",0x00E8);  entity("Egrave",0x00C8);  entity("egs",0x2A96);  entity("egsdot",0x2A98);  entity("el",0x2A99);  entity("Element",0x2208);  entity("elinters",0x23E7);  entity("ell",0x2113);  entity("els",0x2A95);  entity("elsdot",0x2A97);  entity("emacr",0x0113);  entity("Emacr",0x0112);  entity("empty",0x2205);  entity("emptyset",0x2205);  entity("EmptySmallSquare",0x25FB);  entity("emptyv",0x2205);  entity("EmptyVerySmallSquare",0x25AB);  entity("emsp",0x2003);  entity("emsp13",0x2004);  entity("emsp14",0x2005);  entity("eng",0x014B);  entity("ENG",0x014A);  entity("ensp",0x2002);  entity("eogon",0x0119);  entity("Eogon",0x0118);  entity("eopf",0x1D556);  entity("Eopf",0x1D53C);  entity("epar",0x22D5);  entity("eparsl",0x29E3);  entity("eplus",0x2A71);  entity("epsi",0x03F5);  entity("epsilon",0x03B5);  entity("Epsilon",0x0395);  entity("epsiv",0x03B5);  entity("eqcirc",0x2256);  entity("eqcolon",0x2255);  entity("eqsim",0x2242);  entity("eqslantgtr",0x2A96);  entity("eqslantless",0x2A95);  entity("Equal",0x2A75);  entity("equals",0x003D);  entity("EqualTilde",0x2242);  entity("equest",0x225F);  entity("Equilibrium",0x21CC);  entity("equiv",0x2261);  entity("equivDD",0x2A78);  entity("eqvparsl",0x29E5);  entity("erarr",0x2971);  entity("erDot",0x2253);  entity("escr",0x212F);  entity("Escr",0x2130);  entity("esdot",0x2250);  entity("esim",0x2242);  entity("Esim",0x2A73);  entity("eta",0x03B7);  entity("Eta",0x0397);  entity("eth",0x00F0);  entity("ETH",0x00D0);  entity("euml",0x00EB);  entity("Euml",0x00CB);  entity("euro",0x20AC);  entity("excl",0x0021);  entity("exist",0x2203);  entity("Exists",0x2203);  entity("expectation",0x2130);  entity("exponentiale",0x2147);  entity("fallingdotseq",0x2252);  entity("fcy",0x0444);  entity("Fcy",0x0424);  entity("female",0x2640);  entity("ffilig",0xFB03);  entity("fflig",0xFB00);  entity("ffllig",0xFB04);  entity("ffr",0x1D523);  entity("Ffr",0x1D509);  entity("filig",0xFB01);  entity("FilledSmallSquare",0x25FC);  entity("FilledVerySmallSquare",0x25AA);  entity("flat",0x266D);  entity("fllig",0xFB02);  entity("fltns",0x25B1);  entity("fnof",0x0192);  entity("fopf",0x1D557);  entity("Fopf",0x1D53D);  entity("forall",0x2200);  entity("fork",0x22D4);  entity("forkv",0x2AD9);  entity("Fouriertrf",0x2131);  entity("fpartint",0x2A0D);  entity("frac12",0x00BD);  entity("frac13",0x2153);  entity("frac14",0x00BC);  entity("frac15",0x2155);  entity("frac16",0x2159);  entity("frac18",0x215B);  entity("frac23",0x2154);  entity("frac25",0x2156);  entity("frac34",0x00BE);  entity("frac35",0x2157);  entity("frac38",0x215C);  entity("frac45",0x2158);  entity("frac56",0x215A);  entity("frac58",0x215D);  entity("frac78",0x215E);  entity("frasl",0x2044);  entity("frown",0x2322);  entity("fscr",0x1D4BB);  entity("Fscr",0x2131);  entity("gacute",0x01F5);  entity("gamma",0x03B3);  entity("Gamma",0x0393);  entity("gammad",0x03DD);  entity("Gammad",0x03DC);  entity("gap",0x2A86);  entity("gbreve",0x011F);  entity("Gbreve",0x011E);  entity("Gcedil",0x0122);  entity("gcirc",0x011D);  entity("Gcirc",0x011C);  entity("gcy",0x0433);  entity("Gcy",0x0413);  entity("gdot",0x0121);  entity("Gdot",0x0120);  entity("ge",0x2265);  entity("gE",0x2267);  entity("gel",0x22DB);  entity("gEl",0x2A8C);  entity("geq",0x2265);  entity("geqq",0x2267);  entity("geqslant",0x2A7E);  entity("ges",0x2A7E);  entity("gescc",0x2AA9);  entity("gesdot",0x2A80);  entity("gesdoto",0x2A82);  entity("gesdotol",0x2A84);  entity("gesles",0x2A94);  entity("gfr",0x1D524);  entity("Gfr",0x1D50A);  entity("gg",0x226B);  entity("Gg",0x22D9);  entity("ggg",0x22D9);  entity("ggr",0x03B3);  entity("Ggr",0x0393);  entity("gimel",0x2137);  entity("gjcy",0x0453);  entity("GJcy",0x0403);  entity("gl",0x2277);  entity("gla",0x2AA5);  entity("glE",0x2A92);  entity("glj",0x2AA4);  entity("gnap",0x2A8A);  entity("gnapprox",0x2A8A);  entity("gne",0x2A88);  entity("gnE",0x2269);  entity("gneq",0x2A88);  entity("gneqq",0x2269);  entity("gnsim",0x22E7);  entity("gopf",0x1D558);  entity("Gopf",0x1D53E);  entity("grave",0x0060);  entity("GreaterEqual",0x2265);  entity("GreaterEqualLess",0x22DB);  entity("GreaterFullEqual",0x2267);  entity("GreaterGreater",0x2AA2);  entity("GreaterLess",0x2277);  entity("GreaterSlantEqual",0x2A7E);  entity("GreaterTilde",0x2273);  entity("gscr",0x210A);  entity("Gscr",0x1D4A2);  entity("gsim",0x2273);  entity("gsime",0x2A8E);  entity("gsiml",0x2A90);  entity("gt",0x003E);  entity("Gt",0x226B);  entity("gtcc",0x2AA7);  entity("gtcir",0x2A7A);  entity("gtdot",0x22D7);  entity("gtlPar",0x2995);  entity("gtquest",0x2A7C);  entity("gtrapprox",0x2A86);  entity("gtrarr",0x2978);  entity("gtrdot",0x22D7);  entity("gtreqless",0x22DB);  entity("gtreqqless",0x2A8C);  entity("gtrless",0x2277);  entity("gtrsim",0x2273);  entity("Hacek",0x02C7);  entity("hairsp",0x200A);  entity("half",0x00BD);  entity("hamilt",0x210B);  entity("hardcy",0x044A);  entity("HARDcy",0x042A);  entity("harr",0x2194);  entity("hArr",0x21D4);  entity("harrcir",0x2948);  entity("harrw",0x21AD);  entity("Hat",0x005E);  entity("hbar",0x210F);  entity("hcirc",0x0125);  entity("Hcirc",0x0124);  entity("hearts",0x2665);  entity("heartsuit",0x2665);  entity("hellip",0x2026);  entity("hercon",0x22B9);  entity("hfr",0x1D525);  entity("Hfr",0x210C);  entity("HilbertSpace",0x210B);  entity("hksearow",0x2925);  entity("hkswarow",0x2926);  entity("hoarr",0x21FF);  entity("homtht",0x223B);  entity("hookleftarrow",0x21A9);  entity("hookrightarrow",0x21AA);  entity("hopf",0x1D559);  entity("Hopf",0x210D);  entity("horbar",0x2015);  entity("HorizontalLine",0x2500);  entity("hscr",0x1D4BD);  entity("Hscr",0x210B);  entity("hslash",0x210F);  entity("hstrok",0x0127);  entity("Hstrok",0x0126);  entity("HumpDownHump",0x224E);  entity("HumpEqual",0x224F);  entity("hybull",0x2043);  entity("hyphen",0x2010);  entity("iacgr",0x03AF);  entity("Iacgr",0x038A);  entity("iacute",0x00ED);  entity("Iacute",0x00CD);  entity("ic",0x2063);  entity("icirc",0x00EE);  entity("Icirc",0x00CE);  entity("icy",0x0438);  entity("Icy",0x0418);  entity("idiagr",0x0390);  entity("idigr",0x03CA);  entity("Idigr",0x03AA);  entity("Idot",0x0130);  entity("iecy",0x0435);  entity("IEcy",0x0415);  entity("iexcl",0x00A1);  entity("iff",0x21D4);  entity("ifr",0x1D526);  entity("Ifr",0x2111);  entity("igr",0x03B9);  entity("Igr",0x0399);  entity("igrave",0x00EC);  entity("Igrave",0x00CC);  entity("ii",0x2148);  entity("iiiint",0x2A0C);  entity("iiint",0x222D);  entity("iinfin",0x29DC);  entity("iiota",0x2129);  entity("ijlig",0x0133);  entity("IJlig",0x0132);  entity("Im",0x2111);  entity("imacr",0x012B);  entity("Imacr",0x012A);  entity("image",0x2111);  entity("ImaginaryI",0x2148);  entity("imagline",0x2110);  entity("imagpart",0x2111);  entity("imath",0x0131);  entity("imof",0x22B7);  entity("imped",0x01B5);  entity("Implies",0x21D2);  entity("in",0x2208);  entity("incare",0x2105);  entity("infin",0x221E);  entity("infintie",0x29DD);  entity("inodot",0x0131);  entity("int",0x222B);  entity("Int",0x222C);  entity("intcal",0x22BA);  entity("integers",0x2124);  entity("Integral",0x222B);  entity("intercal",0x22BA);  entity("Intersection",0x22C2);  entity("intlarhk",0x2A17);  entity("intprod",0x2A3C);  entity("InvisibleComma",0x2063);  entity("InvisibleTimes",0x2062);  entity("iocy",0x0451);  entity("IOcy",0x0401);  entity("iogon",0x012F);  entity("Iogon",0x012E);  entity("iopf",0x1D55A);  entity("Iopf",0x1D540);  entity("iota",0x03B9);  entity("Iota",0x0399);  entity("iprod",0x2A3C);  entity("iquest",0x00BF);  entity("iscr",0x1D4BE);  entity("Iscr",0x2110);  entity("isin",0x2208);  entity("isindot",0x22F5);  entity("isinE",0x22F9);  entity("isins",0x22F4);  entity("isinsv",0x22F3);  entity("isinv",0x2208);  entity("it",0x2062);  entity("itilde",0x0129);  entity("Itilde",0x0128);  entity("iukcy",0x0456);  entity("Iukcy",0x0406);  entity("iuml",0x00EF);  entity("Iuml",0x00CF);  entity("jcirc",0x0135);  entity("Jcirc",0x0134);  entity("jcy",0x0439);  entity("Jcy",0x0419);  entity("jfr",0x1D527);  entity("Jfr",0x1D50D);  entity("jmath",0x0237);  entity("jopf",0x1D55B);  entity("Jopf",0x1D541);  entity("jscr",0x1D4BF);  entity("Jscr",0x1D4A5);  entity("jsercy",0x0458);  entity("Jsercy",0x0408);  entity("jukcy",0x0454);  entity("Jukcy",0x0404);  entity("kappa",0x03BA);  entity("Kappa",0x039A);  entity("kappav",0x03F0);  entity("kcedil",0x0137);  entity("Kcedil",0x0136);  entity("kcy",0x043A);  entity("Kcy",0x041A);  entity("kfr",0x1D528);  entity("Kfr",0x1D50E);  entity("kgr",0x03BA);  entity("Kgr",0x039A);  entity("kgreen",0x0138);  entity("khcy",0x0445);  entity("KHcy",0x0425);  entity("khgr",0x03C7);  entity("KHgr",0x03A7);  entity("kjcy",0x045C);  entity("KJcy",0x040C);  entity("kopf",0x1D55C);  entity("Kopf",0x1D542);  entity("kscr",0x1D4C0);  entity("Kscr",0x1D4A6);  entity("lAarr",0x21DA);  entity("lacute",0x013A);  entity("Lacute",0x0139);  entity("laemptyv",0x29B4);  entity("lagran",0x2112);  entity("lambda",0x03BB);  entity("Lambda",0x039B);  entity("lang",0x2329);  entity("Lang",0x27EA);  entity("langd",0x2991);  entity("langle",0x2329);  entity("lap",0x2A85);  entity("Laplacetrf",0x2112);  entity("laquo",0x00AB);  entity("larr",0x2190);  entity("lArr",0x21D0);  entity("Larr",0x219E);  entity("larrb",0x21E4);  entity("larrbfs",0x291F);  entity("larrfs",0x291D);  entity("larrhk",0x21A9);  entity("larrlp",0x21AB);  entity("larrpl",0x2939);  entity("larrsim",0x2973);  entity("larrtl",0x21A2);  entity("lat",0x2AAB);  entity("latail",0x2919);  entity("lAtail",0x291B);  entity("late",0x2AAD);  entity("lbarr",0x290C);  entity("lBarr",0x290E);  entity("lbbrk",0x2997);  entity("lbrace",0x007B);  entity("lbrack",0x005B);  entity("lbrke",0x298B);  entity("lbrksld",0x298F);  entity("lbrkslu",0x298D);  entity("lcaron",0x013E);  entity("Lcaron",0x013D);  entity("lcedil",0x013C);  entity("Lcedil",0x013B);  entity("lceil",0x2308);  entity("lcub",0x007B);  entity("lcy",0x043B);  entity("Lcy",0x041B);  entity("ldca",0x2936);  entity("ldquo",0x201C);  entity("ldquor",0x201E);  entity("ldrdhar",0x2967);  entity("ldrushar",0x294B);  entity("ldsh",0x21B2);  entity("le",0x2264);  entity("lE",0x2266);  entity("LeftAngleBracket",0x2329);  entity("leftarrow",0x2190);  entity("Leftarrow",0x21D0);  entity("LeftArrowBar",0x21E4);  entity("LeftArrowRightArrow",0x21C6);  entity("leftarrowtail",0x21A2);  entity("LeftCeiling",0x2308);  entity("LeftDoubleBracket",0x27E6);  entity("LeftDownTeeVector",0x2961);  entity("LeftDownVector",0x21C3);  entity("LeftDownVectorBar",0x2959);  entity("LeftFloor",0x230A);  entity("leftharpoondown",0x21BD);  entity("leftharpoonup",0x21BC);  entity("leftleftarrows",0x21C7);  entity("leftrightarrow",0x2194);  entity("Leftrightarrow",0x21D4);  entity("leftrightarrows",0x21C6);  entity("leftrightharpoons",0x21CB);  entity("leftrightsquigarrow",0x21AD);  entity("LeftRightVector",0x294E);  entity("LeftTee",0x22A3);  entity("LeftTeeArrow",0x21A4);  entity("LeftTeeVector",0x295A);  entity("leftthreetimes",0x22CB);  entity("LeftTriangle",0x22B2);  entity("LeftTriangleBar",0x29CF);  entity("LeftTriangleEqual",0x22B4);  entity("LeftUpDownVector",0x2951);  entity("LeftUpTeeVector",0x2960);  entity("LeftUpVector",0x21BF);  entity("LeftUpVectorBar",0x2958);  entity("LeftVector",0x21BC);  entity("LeftVectorBar",0x2952);  entity("leg",0x22DA);  entity("lEg",0x2A8B);  entity("leq",0x2264);  entity("leqq",0x2266);  entity("leqslant",0x2A7D);  entity("les",0x2A7D);  entity("lescc",0x2AA8);  entity("lesdot",0x2A7F);  entity("lesdoto",0x2A81);  entity("lesdotor",0x2A83);  entity("lesges",0x2A93);  entity("lessapprox",0x2A85);  entity("lessdot",0x22D6);  entity("lesseqgtr",0x22DA);  entity("lesseqqgtr",0x2A8B);  entity("LessEqualGreater",0x22DA);  entity("LessFullEqual",0x2266);  entity("LessGreater",0x2276);  entity("lessgtr",0x2276);  entity("LessLess",0x2AA1);  entity("lesssim",0x2272);  entity("LessSlantEqual",0x2A7D);  entity("LessTilde",0x2272);  entity("lfisht",0x297C);  entity("lfloor",0x230A);  entity("lfr",0x1D529);  entity("Lfr",0x1D50F);  entity("lg",0x2276);  entity("lgE",0x2A91);  entity("lgr",0x03BB);  entity("Lgr",0x039B);  entity("lHar",0x2962);  entity("lhard",0x21BD);  entity("lharu",0x21BC);  entity("lharul",0x296A);  entity("lhblk",0x2584);  entity("ljcy",0x0459);  entity("LJcy",0x0409);  entity("ll",0x226A);  entity("Ll",0x22D8);  entity("llarr",0x21C7);  entity("llcorner",0x231E);  entity("Lleftarrow",0x21DA);  entity("llhard",0x296B);  entity("lltri",0x25FA);  entity("lmidot",0x0140);  entity("Lmidot",0x013F);  entity("lmoust",0x23B0);  entity("lmoustache",0x23B0);  entity("lnap",0x2A89);  entity("lnapprox",0x2A89);  entity("lne",0x2A87);  entity("lnE",0x2268);  entity("lneq",0x2A87);  entity("lneqq",0x2268);  entity("lnsim",0x22E6);  entity("loang",0x27EC);  entity("loarr",0x21FD);  entity("lobrk",0x27E6);  entity("longleftarrow",0x27F5);  entity("Longleftarrow",0x27F8);  entity("longleftrightarrow",0x27F7);  entity("Longleftrightarrow",0x27FA);  entity("longmapsto",0x27FC);  entity("longrightarrow",0x27F6);  entity("Longrightarrow",0x27F9);  entity("looparrowleft",0x21AB);  entity("looparrowright",0x21AC);  entity("lopar",0x2985);  entity("lopf",0x1D55D);  entity("Lopf",0x1D543);  entity("loplus",0x2A2D);  entity("lotimes",0x2A34);  entity("lowast",0x2217);  entity("lowbar",0x005F);  entity("LowerLeftArrow",0x2199);  entity("LowerRightArrow",0x2198);  entity("loz",0x25CA);  entity("lozenge",0x25CA);  entity("lozf",0x29EB);  entity("lpar",0x0028);  entity("lparlt",0x2993);  entity("lrarr",0x21C6);  entity("lrcorner",0x231F);  entity("lrhar",0x21CB);  entity("lrhard",0x296D);  entity("lrm",0x200E);  entity("lrtri",0x22BF);  entity("lsaquo",0x2039);  entity("lscr",0x1D4C1);  entity("Lscr",0x2112);  entity("lsh",0x21B0);  entity("lsim",0x2272);  entity("lsime",0x2A8D);  entity("lsimg",0x2A8F);  entity("lsqb",0x005B);  entity("lsquo",0x2018);  entity("lsquor",0x201A);  entity("lstrok",0x0142);  entity("Lstrok",0x0141);  entity("lt",0x003C);  entity("Lt",0x226A);  entity("ltcc",0x2AA6);  entity("ltcir",0x2A79);  entity("ltdot",0x22D6);  entity("lthree",0x22CB);  entity("ltimes",0x22C9);  entity("ltlarr",0x2976);  entity("ltquest",0x2A7B);  entity("ltri",0x25C3);  entity("ltrie",0x22B4);  entity("ltrif",0x25C2);  entity("ltrPar",0x2996);  entity("lurdshar",0x294A);  entity("luruhar",0x2966);  entity("macr",0x00AF);  entity("male",0x2642);  entity("malt",0x2720);  entity("maltese",0x2720);  entity("map",0x21A6);  entity("Map",0x2905);  entity("mapsto",0x21A6);  entity("mapstodown",0x21A7);  entity("mapstoleft",0x21A4);  entity("mapstoup",0x21A5);  entity("marker",0x25AE);  entity("mcomma",0x2A29);  entity("mcy",0x043C);  entity("Mcy",0x041C);  entity("mdash",0x2014);  entity("mDDot",0x223A);  entity("measuredangle",0x2221);  entity("MediumSpace",0x205F);  entity("Mellintrf",0x2133);  entity("mfr",0x1D52A);  entity("Mfr",0x1D510);  entity("mgr",0x03BC);  entity("Mgr",0x039C);  entity("mho",0x2127);  entity("micro",0x00B5);  entity("mid",0x2223);  entity("midast",0x002A);  entity("midcir",0x2AF0);  entity("middot",0x00B7);  entity("minus",0x2212);  entity("minusb",0x229F);  entity("minusd",0x2238);  entity("minusdu",0x2A2A);  entity("MinusPlus",0x2213);  entity("mlcp",0x2ADB);  entity("mldr",0x2026);  entity("mnplus",0x2213);  entity("models",0x22A7);  entity("mopf",0x1D55E);  entity("Mopf",0x1D544);  entity("mp",0x2213);  entity("mscr",0x1D4C2);  entity("Mscr",0x2133);  entity("mstpos",0x223E);  entity("mu",0x03BC);  entity("Mu",0x039C);  entity("multimap",0x22B8);  entity("mumap",0x22B8);  entity("nabla",0x2207);  entity("nacute",0x0144);  entity("Nacute",0x0143);  entity("nap",0x2249);  entity("napos",0x0149);  entity("napprox",0x2249);  entity("natur",0x266E);  entity("natural",0x266E);  entity("naturals",0x2115);  entity("nbsp",0x00A0);  entity("ncap",0x2A43);  entity("ncaron",0x0148);  entity("Ncaron",0x0147);  entity("ncedil",0x0146);  entity("Ncedil",0x0145);  entity("ncong",0x2247);  entity("ncup",0x2A42);  entity("ncy",0x043D);  entity("Ncy",0x041D);  entity("ndash",0x2013);  entity("ne",0x2260);  entity("nearhk",0x2924);  entity("nearr",0x2197);  entity("neArr",0x21D7);  entity("nearrow",0x2197);  entity("NegativeMediumSpace",0x200B);  entity("NegativeThickSpace",0x200B);  entity("NegativeThinSpace",0x200B);  entity("NegativeVeryThinSpace",0x200B);  entity("nequiv",0x2262);  entity("nesear",0x2928);  entity("NestedGreaterGreater",0x226B);  entity("NestedLessLess",0x226A);  entity("NewLine",0x000A);  entity("nexist",0x2204);  entity("nexists",0x2204);  entity("nfr",0x1D52B);  entity("Nfr",0x1D511);  entity("nge",0x2271);  entity("ngeq",0x2271);  entity("ngr",0x03BD);  entity("Ngr",0x039D);  entity("ngsim",0x2275);  entity("ngt",0x226F);  entity("ngtr",0x226F);  entity("nharr",0x21AE);  entity("nhArr",0x21CE);  entity("nhpar",0x2AF2);  entity("ni",0x220B);  entity("nis",0x22FC);  entity("nisd",0x22FA);  entity("niv",0x220B);  entity("njcy",0x045A);  entity("NJcy",0x040A);  entity("nlarr",0x219A);  entity("nlArr",0x21CD);  entity("nldr",0x2025);  entity("nle",0x2270);  entity("nleftarrow",0x219A);  entity("nLeftarrow",0x21CD);  entity("nleftrightarrow",0x21AE);  entity("nLeftrightarrow",0x21CE);  entity("nleq",0x2270);  entity("nless",0x226E);  entity("nlsim",0x2274);  entity("nlt",0x226E);  entity("nltri",0x22EA);  entity("nltrie",0x22EC);  entity("nmid",0x2224);  entity("NoBreak",0x2060);  entity("NonBreakingSpace",0x00A0);  entity("nopf",0x1D55F);  entity("Nopf",0x2115);  entity("not",0x00AC);  entity("Not",0x2AEC);  entity("NotCongruent",0x2262);  entity("NotCupCap",0x226D);  entity("NotDoubleVerticalBar",0x2226);  entity("NotElement",0x2209);  entity("NotEqual",0x2260);  entity("NotExists",0x2204);  entity("NotGreater",0x226F);  entity("NotGreaterEqual",0x2271);  entity("NotGreaterLess",0x2279);  entity("NotGreaterTilde",0x2275);  entity("notin",0x2209);  entity("notinva",0x2209);  entity("notinvb",0x22F7);  entity("notinvc",0x22F6);  entity("NotLeftTriangle",0x22EA);  entity("NotLeftTriangleEqual",0x22EC);  entity("NotLess",0x226E);  entity("NotLessEqual",0x2270);  entity("NotLessGreater",0x2278);  entity("NotLessTilde",0x2274);  entity("notni",0x220C);  entity("notniva",0x220C);  entity("notnivb",0x22FE);  entity("notnivc",0x22FD);  entity("NotPrecedes",0x2280);  entity("NotPrecedesSlantEqual",0x22E0);  entity("NotReverseElement",0x220C);  entity("NotRightTriangle",0x22EB);  entity("NotRightTriangleEqual",0x22ED);  entity("NotSquareSubsetEqual",0x22E2);  entity("NotSquareSupersetEqual",0x22E3);  entity("NotSubsetEqual",0x2288);  entity("NotSucceeds",0x2281);  entity("NotSucceedsSlantEqual",0x22E1);  entity("NotSupersetEqual",0x2289);  entity("NotTilde",0x2241);  entity("NotTildeEqual",0x2244);  entity("NotTildeFullEqual",0x2247);  entity("NotTildeTilde",0x2249);  entity("NotVerticalBar",0x2224);  entity("npar",0x2226);  entity("nparallel",0x2226);  entity("npolint",0x2A14);  entity("npr",0x2280);  entity("nprcue",0x22E0);  entity("nprec",0x2280);  entity("nrarr",0x219B);  entity("nrArr",0x21CF);  entity("nrightarrow",0x219B);  entity("nRightarrow",0x21CF);  entity("nrtri",0x22EB);  entity("nrtrie",0x22ED);  entity("nsc",0x2281);  entity("nsccue",0x22E1);  entity("nscr",0x1D4C3);  entity("Nscr",0x1D4A9);  entity("nshortmid",0x2224);  entity("nshortparallel",0x2226);  entity("nsim",0x2241);  entity("nsime",0x2244);  entity("nsimeq",0x2244);  entity("nsmid",0x2224);  entity("nspar",0x2226);  entity("nsqsube",0x22E2);  entity("nsqsupe",0x22E3);  entity("nsub",0x2284);  entity("nsube",0x2288);  entity("nsubseteq",0x2288);  entity("nsucc",0x2281);  entity("nsup",0x2285);  entity("nsupe",0x2289);  entity("nsupseteq",0x2289);  entity("ntgl",0x2279);  entity("ntilde",0x00F1);  entity("Ntilde",0x00D1);  entity("ntlg",0x2278);  entity("ntriangleleft",0x22EA);  entity("ntrianglelefteq",0x22EC);  entity("ntriangleright",0x22EB);  entity("ntrianglerighteq",0x22ED);  entity("nu",0x03BD);  entity("Nu",0x039D);  entity("num",0x0023);  entity("numero",0x2116);  entity("numsp",0x2007);  entity("nvdash",0x22AC);  entity("nvDash",0x22AD);  entity("nVdash",0x22AE);  entity("nVDash",0x22AF);  entity("nvHarr",0x2904);  entity("nvinfin",0x29DE);  entity("nvlArr",0x2902);  entity("nvrArr",0x2903);  entity("nwarhk",0x2923);  entity("nwarr",0x2196);  entity("nwArr",0x21D6);  entity("nwarrow",0x2196);  entity("nwnear",0x2927);  entity("oacgr",0x03CC);  entity("Oacgr",0x038C);  entity("oacute",0x00F3);  entity("Oacute",0x00D3);  entity("oast",0x229B);  entity("ocir",0x229A);  entity("ocirc",0x00F4);  entity("Ocirc",0x00D4);  entity("ocy",0x043E);  entity("Ocy",0x041E);  entity("odash",0x229D);  entity("odblac",0x0151);  entity("Odblac",0x0150);  entity("odiv",0x2A38);  entity("odot",0x2299);  entity("odsold",0x29BC);  entity("oelig",0x0153);  entity("OElig",0x0152);  entity("ofcir",0x29BF);  entity("ofr",0x1D52C);  entity("Ofr",0x1D512);  entity("ogon",0x02DB);  entity("ogr",0x03BF);  entity("Ogr",0x039F);  entity("ograve",0x00F2);  entity("Ograve",0x00D2);  entity("ogt",0x29C1);  entity("ohacgr",0x03CE);  entity("OHacgr",0x038F);  entity("ohbar",0x29B5);  entity("ohgr",0x03C9);  entity("OHgr",0x03A9);  entity("ohm",0x2126);  entity("oint",0x222E);  entity("olarr",0x21BA);  entity("olcir",0x29BE);  entity("olcross",0x29BB);  entity("oline",0x203E);  entity("olt",0x29C0);  entity("omacr",0x014D);  entity("Omacr",0x014C);  entity("omega",0x03C9);  entity("Omega",0x03A9);  entity("omicron",0x03BF);  entity("Omicron",0x039F);  entity("omid",0x29B6);  entity("ominus",0x2296);  entity("oopf",0x1D560);  entity("Oopf",0x1D546);  entity("opar",0x29B7);  entity("OpenCurlyDoubleQuote",0x201C);  entity("OpenCurlyQuote",0x2018);  entity("operp",0x29B9);  entity("oplus",0x2295);  entity("or",0x2228);  entity("Or",0x2A54);  entity("orarr",0x21BB);  entity("ord",0x2A5D);  entity("order",0x2134);  entity("orderof",0x2134);  entity("ordf",0x00AA);  entity("ordm",0x00BA);  entity("origof",0x22B6);  entity("oror",0x2A56);  entity("orslope",0x2A57);  entity("orv",0x2A5B);  entity("oS",0x24C8);  entity("oscr",0x2134);  entity("Oscr",0x1D4AA);  entity("oslash",0x00F8);  entity("Oslash",0x00D8);  entity("osol",0x2298);  entity("otilde",0x00F5);  entity("Otilde",0x00D5);  entity("otimes",0x2297);  entity("Otimes",0x2A37);  entity("otimesas",0x2A36);  entity("ouml",0x00F6);  entity("Ouml",0x00D6);  entity("ovbar",0x233D);  entity("OverBar",0x00AF);  entity("OverBrace",0xFE37);  entity("OverBracket",0x23B4);  entity("OverParenthesis",0xFE35);  entity("par",0x2225);  entity("para",0x00B6);  entity("parallel",0x2225);  entity("parsim",0x2AF3);  entity("parsl",0x2AFD);  entity("part",0x2202);  entity("PartialD",0x2202);  entity("pcy",0x043F);  entity("Pcy",0x041F);  entity("percnt",0x0025);  entity("period",0x002E);  entity("permil",0x2030);  entity("perp",0x22A5);  entity("pertenk",0x2031);  entity("pfr",0x1D52D);  entity("Pfr",0x1D513);  entity("pgr",0x03C0);  entity("Pgr",0x03A0);  entity("phgr",0x03C6);  entity("PHgr",0x03A6);  entity("phi",0x03D5);  entity("Phi",0x03A6);  entity("phiv",0x03C6);  entity("phmmat",0x2133);  entity("phone",0x260E);  entity("pi",0x03C0);  entity("Pi",0x03A0);  entity("pitchfork",0x22D4);  entity("piv",0x03D6);  entity("planck",0x210F);  entity("planckh",0x210E);  entity("plankv",0x210F);  entity("plus",0x002B);  entity("plusacir",0x2A23);  entity("plusb",0x229E);  entity("pluscir",0x2A22);  entity("plusdo",0x2214);  entity("plusdu",0x2A25);  entity("pluse",0x2A72);  entity("PlusMinus",0x00B1);  entity("plusmn",0x00B1);  entity("plussim",0x2A26);  entity("plustwo",0x2A27);  entity("pm",0x00B1);  entity("Poincareplane",0x210C);  entity("pointint",0x2A15);  entity("popf",0x1D561);  entity("Popf",0x2119);  entity("pound",0x00A3);  entity("pr",0x227A);  entity("Pr",0x2ABB);  entity("prap",0x2AB7);  entity("prcue",0x227C);  entity("pre",0x2AAF);  entity("prE",0x2AB3);  entity("prec",0x227A);  entity("precapprox",0x2AB7);  entity("preccurlyeq",0x227C);  entity("Precedes",0x227A);  entity("PrecedesEqual",0x2AAF);  entity("PrecedesSlantEqual",0x227C);  entity("PrecedesTilde",0x227E);  entity("preceq",0x2AAF);  entity("precnapprox",0x2AB9);  entity("precneqq",0x2AB5);  entity("precnsim",0x22E8);  entity("precsim",0x227E);  entity("prime",0x2032);  entity("Prime",0x2033);  entity("primes",0x2119);  entity("prnap",0x2AB9);  entity("prnE",0x2AB5);  entity("prnsim",0x22E8);  entity("prod",0x220F);  entity("Product",0x220F);  entity("profalar",0x232E);  entity("profline",0x2312);  entity("profsurf",0x2313);  entity("prop",0x221D);  entity("Proportion",0x2237);  entity("Proportional",0x221D);  entity("propto",0x221D);  entity("prsim",0x227E);  entity("prurel",0x22B0);  entity("pscr",0x1D4C5);  entity("Pscr",0x1D4AB);  entity("psgr",0x03C8);  entity("PSgr",0x03A8);  entity("psi",0x03C8);  entity("Psi",0x03A8);  entity("puncsp",0x2008);  entity("qfr",0x1D52E);  entity("Qfr",0x1D514);  entity("qint",0x2A0C);  entity("qopf",0x1D562);  entity("Qopf",0x211A);  entity("qprime",0x2057);  entity("qscr",0x1D4C6);  entity("Qscr",0x1D4AC);  entity("quaternions",0x210D);  entity("quatint",0x2A16);  entity("quest",0x003F);  entity("questeq",0x225F);  entity("quot",0x0022);  entity("rAarr",0x21DB);  entity("race",0x29DA);  entity("racute",0x0155);  entity("Racute",0x0154);  entity("radic",0x221A);  entity("raemptyv",0x29B3);  entity("rang",0x232A);  entity("Rang",0x27EB);  entity("rangd",0x2992);  entity("range",0x29A5);  entity("rangle",0x232A);  entity("raquo",0x00BB);  entity("rarr",0x2192);  entity("rArr",0x21D2);  entity("Rarr",0x21A0);  entity("rarrap",0x2975);  entity("rarrb",0x21E5);  entity("rarrbfs",0x2920);  entity("rarrc",0x2933);  entity("rarrfs",0x291E);  entity("rarrhk",0x21AA);  entity("rarrlp",0x21AC);  entity("rarrpl",0x2945);  entity("rarrsim",0x2974);  entity("rarrtl",0x21A3);  entity("Rarrtl",0x2916);  entity("rarrw",0x219D);  entity("ratail",0x291A);  entity("rAtail",0x291C);  entity("ratio",0x2236);  entity("rationals",0x211A);  entity("rbarr",0x290D);  entity("rBarr",0x290F);  entity("RBarr",0x2910);  entity("rbbrk",0x2998);  entity("rbrace",0x007D);  entity("rbrack",0x005D);  entity("rbrke",0x298C);  entity("rbrksld",0x298E);  entity("rbrkslu",0x2990);  entity("rcaron",0x0159);  entity("Rcaron",0x0158);  entity("rcedil",0x0157);  entity("Rcedil",0x0156);  entity("rceil",0x2309);  entity("rcub",0x007D);  entity("rcy",0x0440);  entity("Rcy",0x0420);  entity("rdca",0x2937);  entity("rdldhar",0x2969);  entity("rdquo",0x201D);  entity("rdquor",0x201D);  entity("rdsh",0x21B3);  entity("Re",0x211C);  entity("real",0x211C);  entity("realine",0x211B);  entity("realpart",0x211C);  entity("reals",0x211D);  entity("rect",0x25AD);  entity("reg",0x00AE);  entity("ReverseElement",0x220B);  entity("ReverseEquilibrium",0x21CB);  entity("ReverseUpEquilibrium",0x296F);  entity("rfisht",0x297D);  entity("rfloor",0x230B);  entity("rfr",0x1D52F);  entity("Rfr",0x211C);  entity("rgr",0x03C1);  entity("Rgr",0x03A1);  entity("rHar",0x2964);  entity("rhard",0x21C1);  entity("rharu",0x21C0);  entity("rharul",0x296C);  entity("rho",0x03C1);  entity("Rho",0x03A1);  entity("rhov",0x03F1);  entity("RightAngleBracket",0x232A);  entity("rightarrow",0x2192);  entity("Rightarrow",0x21D2);  entity("RightArrowBar",0x21E5);  entity("RightArrowLeftArrow",0x21C4);  entity("rightarrowtail",0x21A3);  entity("RightCeiling",0x2309);  entity("RightDoubleBracket",0x27E7);  entity("RightDownTeeVector",0x295D);  entity("RightDownVector",0x21C2);  entity("RightDownVectorBar",0x2955);  entity("RightFloor",0x230B);  entity("rightharpoondown",0x21C1);  entity("rightharpoonup",0x21C0);  entity("rightleftarrows",0x21C4);  entity("rightleftharpoons",0x21CC);  entity("rightrightarrows",0x21C9);  entity("rightsquigarrow",0x219D);  entity("RightTee",0x22A2);  entity("RightTeeArrow",0x21A6);  entity("RightTeeVector",0x295B);  entity("rightthreetimes",0x22CC);  entity("RightTriangle",0x22B3);  entity("RightTriangleBar",0x29D0);  entity("RightTriangleEqual",0x22B5);  entity("RightUpDownVector",0x294F);  entity("RightUpTeeVector",0x295C);  entity("RightUpVector",0x21BE);  entity("RightUpVectorBar",0x2954);  entity("RightVector",0x21C0);  entity("RightVectorBar",0x2953);  entity("ring",0x02DA);  entity("risingdotseq",0x2253);  entity("rlarr",0x21C4);  entity("rlhar",0x21CC);  entity("rlm",0x200F);  entity("rmoust",0x23B1);  entity("rmoustache",0x23B1);  entity("rnmid",0x2AEE);  entity("roang",0x27ED);  entity("roarr",0x21FE);  entity("robrk",0x27E7);  entity("ropar",0x2986);  entity("ropf",0x1D563);  entity("Ropf",0x211D);  entity("roplus",0x2A2E);  entity("rotimes",0x2A35);  entity("RoundImplies",0x2970);  entity("rpar",0x0029);  entity("rpargt",0x2994);  entity("rppolint",0x2A12);  entity("rrarr",0x21C9);  entity("Rrightarrow",0x21DB);  entity("rsaquo",0x203A);  entity("rscr",0x1D4C7);  entity("Rscr",0x211B);  entity("rsh",0x21B1);  entity("rsqb",0x005D);  entity("rsquo",0x2019);  entity("rsquor",0x2019);  entity("rthree",0x22CC);  entity("rtimes",0x22CA);  entity("rtri",0x25B9);  entity("rtrie",0x22B5);  entity("rtrif",0x25B8);  entity("rtriltri",0x29CE);  entity("RuleDelayed",0x29F4);  entity("ruluhar",0x2968);  entity("rx",0x211E);  entity("sacute",0x015B);  entity("Sacute",0x015A);  entity("sbquo",0x201A);  entity("sc",0x227B);  entity("Sc",0x2ABC);  entity("scap",0x2AB8);  entity("scaron",0x0161);  entity("Scaron",0x0160);  entity("sccue",0x227D);  entity("sce",0x2AB0);  entity("scE",0x2AB4);  entity("scedil",0x015F);  entity("Scedil",0x015E);  entity("scirc",0x015D);  entity("Scirc",0x015C);  entity("scnap",0x2ABA);  entity("scnE",0x2AB6);  entity("scnsim",0x22E9);  entity("scpolint",0x2A13);  entity("scsim",0x227F);  entity("scy",0x0441);  entity("Scy",0x0421);  entity("sdot",0x22C5);  entity("sdotb",0x22A1);  entity("sdote",0x2A66);  entity("searhk",0x2925);  entity("searr",0x2198);  entity("seArr",0x21D8);  entity("searrow",0x2198);  entity("sect",0x00A7);  entity("semi",0x003B);  entity("seswar",0x2929);  entity("setminus",0x2216);  entity("setmn",0x2216);  entity("sext",0x2736);  entity("sfgr",0x03C2);  entity("sfr",0x1D530);  entity("Sfr",0x1D516);  entity("sfrown",0x2322);  entity("sgr",0x03C3);  entity("Sgr",0x03A3);  entity("sharp",0x266F);  entity("shchcy",0x0449);  entity("SHCHcy",0x0429);  entity("shcy",0x0448);  entity("SHcy",0x0428);  entity("ShortDownArrow",0x2193);  entity("ShortLeftArrow",0x2190);  entity("shortmid",0x2223);  entity("shortparallel",0x2225);  entity("ShortRightArrow",0x2192);  entity("ShortUpArrow",0x2191);  entity("shy",0x00AD);  entity("sigma",0x03C3);  entity("Sigma",0x03A3);  entity("sigmaf",0x03C2);  entity("sigmav",0x03C2);  entity("sim",0x223C);  entity("simdot",0x2A6A);  entity("sime",0x2243);  entity("simeq",0x2243);  entity("simg",0x2A9E);  entity("simgE",0x2AA0);  entity("siml",0x2A9D);  entity("simlE",0x2A9F);  entity("simne",0x2246);  entity("simplus",0x2A24);  entity("simrarr",0x2972);  entity("slarr",0x2190);  entity("SmallCircle",0x2218);  entity("smallsetminus",0x2216);  entity("smashp",0x2A33);  entity("smeparsl",0x29E4);  entity("smid",0x2223);  entity("smile",0x2323);  entity("smt",0x2AAA);  entity("smte",0x2AAC);  entity("softcy",0x044C);  entity("SOFTcy",0x042C);  entity("sol",0x002F);  entity("solb",0x29C4);  entity("solbar",0x233F);  entity("sopf",0x1D564);  entity("Sopf",0x1D54A);  entity("spades",0x2660);  entity("spadesuit",0x2660);  entity("spar",0x2225);  entity("sqcap",0x2293);  entity("sqcup",0x2294);  entity("Sqrt",0x221A);  entity("sqsub",0x228F);  entity("sqsube",0x2291);  entity("sqsubset",0x228F);  entity("sqsubseteq",0x2291);  entity("sqsup",0x2290);  entity("sqsupe",0x2292);  entity("sqsupset",0x2290);  entity("sqsupseteq",0x2292);  entity("squ",0x25A1);  entity("square",0x25A1);  entity("SquareIntersection",0x2293);  entity("SquareSubset",0x228F);  entity("SquareSubsetEqual",0x2291);  entity("SquareSuperset",0x2290);  entity("SquareSupersetEqual",0x2292);  entity("SquareUnion",0x2294);  entity("squarf",0x25AA);  entity("squf",0x25AA);  entity("srarr",0x2192);  entity("sscr",0x1D4C8);  entity("Sscr",0x1D4AE);  entity("ssetmn",0x2216);  entity("ssmile",0x2323);  entity("sstarf",0x22C6);  entity("star",0x2606);  entity("Star",0x22C6);  entity("starf",0x2605);  entity("straightepsilon",0x03F5);  entity("straightphi",0x03D5);  entity("strns",0x00AF);  entity("sub",0x2282);  entity("Sub",0x22D0);  entity("subdot",0x2ABD);  entity("sube",0x2286);  entity("subE",0x2AC5);  entity("subedot",0x2AC3);  entity("submult",0x2AC1);  entity("subne",0x228A);  entity("subnE",0x2ACB);  entity("subplus",0x2ABF);  entity("subrarr",0x2979);  entity("subset",0x2282);  entity("Subset",0x22D0);  entity("subseteq",0x2286);  entity("subseteqq",0x2AC5);  entity("SubsetEqual",0x2286);  entity("subsetneq",0x228A);  entity("subsetneqq",0x2ACB);  entity("subsim",0x2AC7);  entity("subsub",0x2AD5);  entity("subsup",0x2AD3);  entity("succ",0x227B);  entity("succapprox",0x2AB8);  entity("succcurlyeq",0x227D);  entity("Succeeds",0x227B);  entity("SucceedsEqual",0x2AB0);  entity("SucceedsSlantEqual",0x227D);  entity("SucceedsTilde",0x227F);  entity("succeq",0x2AB0);  entity("succnapprox",0x2ABA);  entity("succneqq",0x2AB6);  entity("succnsim",0x22E9);  entity("succsim",0x227F);  entity("SuchThat",0x220B);  entity("sum",0x2211);  entity("sung",0x266A);  entity("sup",0x2283);  entity("Sup",0x22D1);  entity("sup1",0x00B9);  entity("sup2",0x00B2);  entity("sup3",0x00B3);  entity("supdot",0x2ABE);  entity("supdsub",0x2AD8);  entity("supe",0x2287);  entity("supE",0x2AC6);  entity("supedot",0x2AC4);  entity("Superset",0x2283);  entity("SupersetEqual",0x2287);  entity("suphsub",0x2AD7);  entity("suplarr",0x297B);  entity("supmult",0x2AC2);  entity("supne",0x228B);  entity("supnE",0x2ACC);  entity("supplus",0x2AC0);  entity("supset",0x2283);  entity("Supset",0x22D1);  entity("supseteq",0x2287);  entity("supseteqq",0x2AC6);  entity("supsetneq",0x228B);  entity("supsetneqq",0x2ACC);  entity("supsim",0x2AC8);  entity("supsub",0x2AD4);  entity("supsup",0x2AD6);  entity("swarhk",0x2926);  entity("swarr",0x2199);  entity("swArr",0x21D9);  entity("swarrow",0x2199);  entity("swnwar",0x292A);  entity("szlig",0x00DF);  entity("Tab",0x0009);  entity("target",0x2316);  entity("tau",0x03C4);  entity("Tau",0x03A4);  entity("tbrk",0x23B4);  entity("tcaron",0x0165);  entity("Tcaron",0x0164);  entity("tcedil",0x0163);  entity("Tcedil",0x0162);  entity("tcy",0x0442);  entity("Tcy",0x0422);  entity("telrec",0x2315);  entity("tfr",0x1D531);  entity("Tfr",0x1D517);  entity("tgr",0x03C4);  entity("Tgr",0x03A4);  entity("there4",0x2234);  entity("therefore",0x2234);  entity("theta",0x03B8);  entity("Theta",0x0398);  entity("thetasym",0x03D1);  entity("thetav",0x03D1);  entity("thgr",0x03B8);  entity("THgr",0x0398);  entity("thickapprox",0x2248);  entity("thicksim",0x223C);  entity("thinsp",0x2009);  entity("ThinSpace",0x2009);  entity("thkap",0x2248);  entity("thksim",0x223C);  entity("thorn",0x00FE);  entity("THORN",0x00DE);  entity("tilde",0x02DC);  entity("Tilde",0x223C);  entity("TildeEqual",0x2243);  entity("TildeFullEqual",0x2245);  entity("TildeTilde",0x2248);  entity("times",0x00D7);  entity("timesb",0x22A0);  entity("timesbar",0x2A31);  entity("timesd",0x2A30);  entity("tint",0x222D);  entity("toea",0x2928);  entity("top",0x22A4);  entity("topbot",0x2336);  entity("topcir",0x2AF1);  entity("topf",0x1D565);  entity("Topf",0x1D54B);  entity("topfork",0x2ADA);  entity("tosa",0x2929);  entity("tprime",0x2034);  entity("trade",0x2122);  entity("triangle",0x25B5);  entity("triangledown",0x25BF);  entity("triangleleft",0x25C3);  entity("trianglelefteq",0x22B4);  entity("triangleq",0x225C);  entity("triangleright",0x25B9);  entity("trianglerighteq",0x22B5);  entity("tridot",0x25EC);  entity("trie",0x225C);  entity("triminus",0x2A3A);  entity("triplus",0x2A39);  entity("trisb",0x29CD);  entity("tritime",0x2A3B);  entity("trpezium",0x23E2);  entity("tscr",0x1D4C9);  entity("Tscr",0x1D4AF);  entity("tscy",0x0446);  entity("TScy",0x0426);  entity("tshcy",0x045B);  entity("TSHcy",0x040B);  entity("tstrok",0x0167);  entity("Tstrok",0x0166);  entity("twixt",0x226C);  entity("twoheadleftarrow",0x219E);  entity("twoheadrightarrow",0x21A0);  entity("uacgr",0x03CD);  entity("Uacgr",0x038E);  entity("uacute",0x00FA);  entity("Uacute",0x00DA);  entity("uarr",0x2191);  entity("uArr",0x21D1);  entity("Uarr",0x219F);  entity("Uarrocir",0x2949);  entity("ubrcy",0x045E);  entity("Ubrcy",0x040E);  entity("ubreve",0x016D);  entity("Ubreve",0x016C);  entity("ucirc",0x00FB);  entity("Ucirc",0x00DB);  entity("ucy",0x0443);  entity("Ucy",0x0423);  entity("udarr",0x21C5);  entity("udblac",0x0171);  entity("Udblac",0x0170);  entity("udhar",0x296E);  entity("udiagr",0x03B0);  entity("udigr",0x03CB);  entity("Udigr",0x03AB);  entity("ufisht",0x297E);  entity("ufr",0x1D532);  entity("Ufr",0x1D518);  entity("ugr",0x03C5);  entity("Ugr",0x03A5);  entity("ugrave",0x00F9);  entity("Ugrave",0x00D9);  entity("uHar",0x2963);  entity("uharl",0x21BF);  entity("uharr",0x21BE);  entity("uhblk",0x2580);  entity("ulcorn",0x231C);  entity("ulcorner",0x231C);  entity("ulcrop",0x230F);  entity("ultri",0x25F8);  entity("umacr",0x016B);  entity("Umacr",0x016A);  entity("uml",0x00A8);  entity("UnderBrace",0xFE38);  entity("UnderBracket",0x23B5);  entity("UnderParenthesis",0xFE36);  entity("Union",0x22C3);  entity("UnionPlus",0x228E);  entity("uogon",0x0173);  entity("Uogon",0x0172);  entity("uopf",0x1D566);  entity("Uopf",0x1D54C);  entity("uparrow",0x2191);  entity("Uparrow",0x21D1);  entity("UpArrowBar",0x2912);  entity("UpArrowDownArrow",0x21C5);  entity("updownarrow",0x2195);  entity("Updownarrow",0x21D5);  entity("UpEquilibrium",0x296E);  entity("upharpoonleft",0x21BF);  entity("upharpoonright",0x21BE);  entity("uplus",0x228E);  entity("UpperLeftArrow",0x2196);  entity("UpperRightArrow",0x2197);  entity("upsi",0x03C5);  entity("Upsi",0x03D2);  entity("upsih",0x03D2);  entity("upsilon",0x03C5);  entity("Upsilon",0x03A5);  entity("UpTee",0x22A5);  entity("UpTeeArrow",0x21A5);  entity("upuparrows",0x21C8);  entity("urcorn",0x231D);  entity("urcorner",0x231D);  entity("urcrop",0x230E);  entity("uring",0x016F);  entity("Uring",0x016E);  entity("urtri",0x25F9);  entity("uscr",0x1D4CA);  entity("Uscr",0x1D4B0);  entity("utdot",0x22F0);  entity("utilde",0x0169);  entity("Utilde",0x0168);  entity("utri",0x25B5);  entity("utrif",0x25B4);  entity("uuarr",0x21C8);  entity("uuml",0x00FC);  entity("Uuml",0x00DC);  entity("uwangle",0x29A7);  entity("vangrt",0x299C);  entity("varepsilon",0x03B5);  entity("varkappa",0x03F0);  entity("varnothing",0x2205);  entity("varphi",0x03C6);  entity("varpi",0x03D6);  entity("varpropto",0x221D);  entity("varr",0x2195);  entity("vArr",0x21D5);  entity("varrho",0x03F1);  entity("varsigma",0x03C2);  entity("vartheta",0x03D1);  entity("vartriangleleft",0x22B2);  entity("vartriangleright",0x22B3);  entity("vBar",0x2AE8);  entity("Vbar",0x2AEB);  entity("vBarv",0x2AE9);  entity("vcy",0x0432);  entity("Vcy",0x0412);  entity("vdash",0x22A2);  entity("vDash",0x22A8);  entity("Vdash",0x22A9);  entity("VDash",0x22AB);  entity("Vdashl",0x2AE6);  entity("vee",0x2228);  entity("Vee",0x22C1);  entity("veebar",0x22BB);  entity("veeeq",0x225A);  entity("vellip",0x22EE);  entity("verbar",0x007C);  entity("Verbar",0x2016);  entity("vert",0x007C);  entity("Vert",0x2016);  entity("VerticalBar",0x2223);  entity("VerticalLine",0x007C);  entity("VerticalSeparator",0x2758);  entity("VerticalTilde",0x2240);  entity("VeryThinSpace",0x200A);  entity("vfr",0x1D533);  entity("Vfr",0x1D519);  entity("vltri",0x22B2);  entity("vopf",0x1D567);  entity("Vopf",0x1D54D);  entity("vprop",0x221D);  entity("vrtri",0x22B3);  entity("vscr",0x1D4CB);  entity("Vscr",0x1D4B1);  entity("Vvdash",0x22AA);  entity("vzigzag",0x299A);  entity("wcirc",0x0175);  entity("Wcirc",0x0174);  entity("wedbar",0x2A5F);  entity("wedge",0x2227);  entity("Wedge",0x22C0);  entity("wedgeq",0x2259);  entity("weierp",0x2118);  entity("wfr",0x1D534);  entity("Wfr",0x1D51A);  entity("wopf",0x1D568);  entity("Wopf",0x1D54E);  entity("wp",0x2118);  entity("wr",0x2240);  entity("wreath",0x2240);  entity("wscr",0x1D4CC);  entity("Wscr",0x1D4B2);  entity("xcap",0x22C2);  entity("xcirc",0x25EF);  entity("xcup",0x22C3);  entity("xdtri",0x25BD);  entity("xfr",0x1D535);  entity("Xfr",0x1D51B);  entity("xgr",0x03BE);  entity("Xgr",0x039E);  entity("xharr",0x27F7);  entity("xhArr",0x27FA);  entity("xi",0x03BE);  entity("Xi",0x039E);  entity("xlarr",0x27F5);  entity("xlArr",0x27F8);  entity("xmap",0x27FC);  entity("xnis",0x22FB);  entity("xodot",0x2A00);  entity("xopf",0x1D569);  entity("Xopf",0x1D54F);  entity("xoplus",0x2A01);  entity("xotime",0x2A02);  entity("xrarr",0x27F6);  entity("xrArr",0x27F9);  entity("xscr",0x1D4CD);  entity("Xscr",0x1D4B3);  entity("xsqcup",0x2A06);  entity("xuplus",0x2A04);  entity("xutri",0x25B3);  entity("xvee",0x22C1);  entity("xwedge",0x22C0);  entity("yacute",0x00FD);  entity("Yacute",0x00DD);  entity("yacy",0x044F);  entity("YAcy",0x042F);  entity("ycirc",0x0177);  entity("Ycirc",0x0176);  entity("ycy",0x044B);  entity("Ycy",0x042B);  entity("yen",0x00A5);  entity("yfr",0x1D536);  entity("Yfr",0x1D51C);  entity("yicy",0x0457);  entity("YIcy",0x0407);  entity("yopf",0x1D56A);  entity("Yopf",0x1D550);  entity("yscr",0x1D4CE);  entity("Yscr",0x1D4B4);  entity("yucy",0x044E);  entity("YUcy",0x042E);  entity("yuml",0x00FF);  entity("Yuml",0x0178);  entity("zacute",0x017A);  entity("Zacute",0x0179);  entity("zcaron",0x017E);  entity("Zcaron",0x017D);  entity("zcy",0x0437);  entity("Zcy",0x0417);  entity("zdot",0x017C);  entity("Zdot",0x017B);  entity("zeetrf",0x2128);  entity("ZeroWidthSpace",0x200B);  entity("zeta",0x03B6);  entity("Zeta",0x0396);  entity("zfr",0x1D537);  entity("Zfr",0x2128);  entity("zgr",0x03B6);  entity("Zgr",0x0396);  entity("zhcy",0x0436);  entity("ZHcy",0x0416);  entity("zigrarr",0x21DD);  entity("zopf",0x1D56B);  entity("Zopf",0x2124);  entity("zscr",0x1D4CF);  entity("Zscr",0x1D4B5);  entity("zwj",0x200D);  entity("zwnj",0x200C);}  }
class C{  protected void addAllTransitiveJars(WarArchiveMerger wam) throws MojoExecutionException {  DependencyCalculator dc=new DependencyCalculator(artifactFactory,resolver,localRepository,remoteRepositories,mavenProject,mavenProjectBuilder,installer,container);  try {    for (    File f : dc.execute()) {      wam.addMergeItem(f);    }  } catch (  Exception ex) {    throw new MojoExecutionException("Problem merging dependent JAR files",ex);  }}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  private void printPoolRecommendations(List<Recommendation> poolRecommendations){  StringBuffer buf=new StringBuffer();  buf.append(String.format("%n Recommended Pools: %n"));  for (  Recommendation poolRec : poolRecommendations) {    StoragePool pool=dbClient.queryObject(StoragePool.class,poolRec.getSourceStoragePool());    buf.append(String.format("Storage Pool : [%s] - Free Capacity : [%s] KB %n",pool.getLabel(),pool.getFreeCapacity()));  }  buf.append(String.format("---------------------------------------- %n"));  _log.info(buf.toString());}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  protected void determineActiveAttributes(){  this.activeSymbolAttributes.copy(defaultSymbolAttributes);  if (this.isHighlighted()) {    TacticalGraphicAttributes highlightAttributes=this.getHighlightAttributes();    if (highlightAttributes != null) {      this.applyAttributesToSymbol(highlightAttributes,this.activeSymbolAttributes);    }  } else {    TacticalGraphicAttributes normalAttributes=this.getAttributes();    if (normalAttributes != null) {      this.applyAttributesToSymbol(normalAttributes,this.activeSymbolAttributes);    }  }}  }
class C{  public boolean loading(){  return loading.get();}  }
class C{  public static void undefinedMapping(Field destinationField,Class<?> destinationClass,Field sourceField,Class<?> sourceClass){  throw new UndefinedMappingException(MSG.INSTANCE.message(undefinedMappingException,destinationField.getName(),destinationClass.getSimpleName(),sourceField.getName(),sourceClass.getSimpleName()));}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String upSlopeHeader=null;  String creekHeader=null;  String localInHeader=null;  double mdInfPower=1;  String outputType=null;  boolean logTransform=false;  int numRows;  int numCols;  int row;  int col;  int x;  int y;  double z;  int i;  int c;  double noData;  float progress=0;  if (args.length == 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  upSlopeHeader=args[1];  creekHeader=args[2];  localInHeader=args[3];  mdInfPower=Double.parseDouble(args[4]);  outputType=args[5].toLowerCase();  logTransform=Boolean.parseBoolean(args[6]);  if (!args[7].toLowerCase().equals("not specified")) {    caThreshold=Double.parseDouble(args[7]);  } else {    caThreshold=-9999;  }  if ((demHeader == null) || (upSlopeHeader == null) || (creekHeader == null)|| (localInHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    upSlope=new WhiteboxRaster(upSlopeHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    upSlope.setPreferredPalette("blueyellow.pal");    upSlope.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    upSlope.setZUnits("dimensionless");    creek=new WhiteboxRaster(creekHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    creek.setPreferredPalette("blueyellow.pal");    creek.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    creek.setZUnits("dimensionless");    localIn=new WhiteboxRaster(localInHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    localIn.setPreferredPalette("blueyellow.pal");    localIn.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    localIn.setZUnits("dimensionless");    tmpArea=new WhiteboxRaster(upSlopeHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpArea.isTemporaryFile=true;    tmpCount=new WhiteboxRaster(upSlopeHeader.replace(".dep","_tmp2.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpCount.isTemporaryFile=true;    updateProgress("Loop 1 of 4:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        z=dem.getValue(row,col);        if (z != noData) {          i=0;          for (c=0; c < 8; c++) {            x=col + xd[c];            y=row + yd[c];            if (z < dem.getValue(y,x)) {              i++;            }          }          tmpCount.setValue(row,col,i);          tmpArea.setValue(row,col,1);          upSlope.setValue(row,col,0);          creek.setValue(row,col,0);          localIn.setValue(row,col,0);        } else {          tmpArea.setValue(row,col,noData);          upSlope.setValue(row,col,noData);          creek.setValue(row,col,noData);          localIn.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          if (tmpCount.getValue(row,col) == 0) {            MDInfAccum(row,col,mdInfPower,noData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    updateProgress("Loop 3 of 4:",0);switch (outputType) {case "specific catchment area (sca)":      for (row=0; row < numRows; row++) {        for (col=0; col < numCols; col++) {          if (upSlope.getValue(row,col) != noData) {            upSlope.setValue(row,col,upSlope.getValue(row,col) * gridRes);          }          if (creek.getValue(row,col) != noData) {            creek.setValue(row,col,creek.getValue(row,col) * gridRes);          }          if (localIn.getValue(row,col) != noData) {            localIn.setValue(row,col,localIn.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (numRows - 1));        updateProgress("Loop 3 of 4:",(int)progress);      }    break;case "total catchment area":  double gridCellArea=gridRes * gridRes;for (row=0; row < numRows; row++) {  for (col=0; col < numCols; col++) {    if (upSlope.getValue(row,col) != noData) {      upSlope.setValue(row,col,upSlope.getValue(row,col) * gridCellArea);    }    if (creek.getValue(row,col) != noData) {      creek.setValue(row,col,creek.getValue(row,col) * gridCellArea);    }    if (localIn.getValue(row,col) != noData) {      localIn.setValue(row,col,localIn.getValue(row,col) * gridCellArea);    }  }  if (cancelOp) {    cancelOperation();    return;  }  progress=(float)(100f * row / (numRows - 1));  updateProgress("Loop 3 of 4:",(int)progress);}break;}updateProgress("Loop 4 of 4:",0);if (logTransform) {for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {if (upSlope.getValue(row,col) != noData) {  upSlope.setValue(row,col,Math.log(upSlope.getValue(row,col)));}if (creek.getValue(row,col) != noData) {  creek.setValue(row,col,Math.log(creek.getValue(row,col)));}if (localIn.getValue(row,col) != noData) {  localIn.setValue(row,col,Math.log(localIn.getValue(row,col)));}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 4 of 4:",(int)progress);}} else {upSlope.setNonlinearity(0.2);}upSlope.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");upSlope.addMetadataEntry("Created on " + new Date());creek.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");creek.addMetadataEntry("Created on " + new Date());localIn.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");localIn.addMetadataEntry("Created on " + new Date());dem.close();upSlope.close();creek.close();localIn.close();tmpArea.close();tmpCount.close();returnData(upSlopeHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override public void addInstanceListener(InstanceListener dsl){  m_instanceListeners.add(dsl);}  }
class C{  public void init() throws Exception {  ri.init();}  }
class C{  @Override public double[] projectScaledToRender(double[] v){  return proj.apply(v);}  }
class C{  public boolean isChanged(){  return m_Changed;}  }
class C{  public String nodeLabel(){  return "node-label";}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (sampleSize < 1) {    throw new IllegalStateException("Sample size < 1: " + sampleSize);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
