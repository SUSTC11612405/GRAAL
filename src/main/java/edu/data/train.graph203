class C{  private void notifyOtherPlayers(final UserActionAttachment uaa,final String notification){  if (!"NONE".equals(notification)) {    final Collection<PlayerID> currentPlayer=new ArrayList<>();    currentPlayer.add(m_player);    final Collection<PlayerID> otherPlayers=getData().getPlayerList().getPlayers();    otherPlayers.removeAll(currentPlayer);    this.getDisplay().reportMessageToPlayers(otherPlayers,currentPlayer,notification,notification);  }}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  public TermFirstPassGroupingCollector(String groupField,Sort groupSort,int topNGroups) throws IOException {  super(groupSort,topNGroups);  this.groupField=groupField;}  }
class C{  public void updatePreferences(boolean isEnabled){  if (mIsEnabled == isEnabled)   return;  getPreferenceScreen().removeAll();  createDataReductionSwitch(isEnabled);  if (isEnabled) {    addPreferencesFromResource(R.xml.data_reduction_preferences);    updateReductionStatistics();  } else {    addPreferencesFromResource(R.xml.data_reduction_preferences_off);    if (!DataReductionProxySettings.getInstance().isIncludedInAltFieldTrial()) {      getPreferenceScreen().removePreference(findPreference("data_reduction_experiment_text"));      getPreferenceScreen().removePreference(findPreference("data_reduction_experiment_link"));    }  }  mIsEnabled=isEnabled;}  }
class C{  public boolean isHasVariables(){  return hasVariables;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tApplies a Markov Blanket correction to the network structure, \n" + "\tafter a network structure is learned. This ensures that all \n" + "\tnodes in the network are part of the Markov blanket of the \n"+ "\tclassifier node.","mbc",0,"-mbc"));  newVector.addElement(new Option("\tScore type (LOO-CV,k-Fold-CV,Cumulative-CV)","S",1,"-S [LOO-CV|k-Fold-CV|Cumulative-CV]"));  newVector.addElement(new Option("\tUse probabilistic or 0/1 scoring.\n\t(default probabilistic scoring)","Q",0,"-Q"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public boolean hasFreq(){  return hasFreq;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZRULES,this);}  }
class C{  protected boolean isSwingClass(Component c){  String packageName=c.getClass().getPackage().getName();  boolean swing=packageName.equals("javax.swing");  return swing;}  }
class C{  public String[] list() throws IOException {  ArrayList<String> list=new ArrayList<String>();  String pathname=_pathname;  if (pathname.startsWith("/"))   pathname="." + pathname;  ArrayList<PathImpl> pathList=((MergePath)_root)._pathList;  for (int i=0; i < pathList.size(); i++) {    PathImpl path=pathList.get(i);    path=path.lookup(pathname);    if (path.isDirectory()) {      String[] subList=path.list();      for (int j=0; subList != null && j < subList.length; j++) {        if (!list.contains(subList[j]))         list.add(subList[j]);      }    }  }  return (String[])list.toArray(new String[list.size()]);}  }
class C{  @Nullable public GridCacheMvccCandidate localCandidate(long threadId){  return localCandidate(threadId,false);}  }
class C{  private SerializerReadDate(){}  }
class C{  @SuppressWarnings({"unchecked"}) protected Notify decodeNotifyOrInvoke(Notify notify,IoBuffer in,Header header,RTMP rtmp){  int start=in.position();  Input input;  byte tmp=in.get();  in.position(start);  if (rtmp.getEncoding() == Encoding.AMF3 && tmp == AMF.TYPE_AMF3_OBJECT) {    input=new org.red5.io.amf3.Input(in);  } else {    input=new org.red5.io.amf.Input(in);  }  String action=deserializer.deserialize(input,String.class);  if (action == null) {    throw new RuntimeException("Action was null");  }  if (!(notify instanceof Invoke) && rtmp != null && rtmp.getMode() == RTMP.MODE_SERVER && header != null && header.getStreamId() != 0 && !isStreamCommand(action)) {    in.position(start);    notify.setData(in.asReadOnlyBuffer());    return notify;  }  if (header == null || header.getStreamId() == 0) {    int invokeId=deserializer.<Number>deserialize(input,Number.class).intValue();    notify.setInvokeId(invokeId);  }  if (rtmp.getEncoding() == Encoding.AMF3) {    input=new org.red5.io.amf3.Input(in);  } else {    input=new org.red5.io.amf.Input(in);  }  Object[] params=new Object[]{};  if (in.hasRemaining()) {    List<Object> paramList=new ArrayList<Object>();    final Object obj=deserializer.deserialize(input,Object.class);    if (obj instanceof Map) {      final Map<String,Object> connParams=(Map<String,Object>)obj;      notify.setConnectionParams(connParams);    } else     if (obj != null) {      paramList.add(obj);    }    while (in.hasRemaining()) {      paramList.add(deserializer.deserialize(input,Object.class));    }    params=paramList.toArray();  }  final int dotIndex=action.lastIndexOf('.');  String serviceName=(dotIndex == -1) ? null : action.substring(0,dotIndex);  if (serviceName != null && (serviceName.startsWith("@") || serviceName.startsWith("|"))) {    serviceName=serviceName.substring(1);  }  String serviceMethod=(dotIndex == -1) ? action : action.substring(dotIndex + 1,action.length());  if (serviceMethod.startsWith("@") || serviceMethod.startsWith("|")) {    serviceMethod=serviceMethod.substring(1);  }  if (notify instanceof Invoke) {    PendingCall call=new PendingCall(serviceName,serviceMethod,params);    ((Invoke)notify).setCall(call);  } else {    Call call=new Call(serviceName,serviceMethod,params);    notify.setCall(call);  }  return notify;}  }
class C{  @Override public double update(V v){  if (!cumulative)   return super.update(v);  collectDisappearingPotential(v);  double v_input=0;  for (  E e : graph.getInEdges(v)) {    int incident_count=getAdjustedIncidentCount(e);    for (    V w : graph.getIncidentVertices(e)) {      if (!w.equals(v) || hyperedges_are_self_loops)       v_input+=(getCurrentValue(w) * getEdgeWeight(w,e).doubleValue() / incident_count);    }  }  double new_value=alpha > 0 ? v_input * (1 - alpha) + getVertexPrior(v) * alpha : v_input;  setOutputValue(v,new_value + getCurrentValue(v));  return Math.abs(getCurrentValue(v) - new_value);}  }
class C{  @Override public String toString(){  Map<Assignment,Double> sortedTable=InferenceUtils.getNBest(getTable(),table.size());  String str="";  for (  Entry<Assignment,Double> entry : sortedTable.entrySet()) {    str+="U(" + entry.getKey() + "):="+ StringUtils.getShortForm(entry.getValue())+ "\n";  }  return (str.length() > 0) ? str.substring(0,str.length() - 1) : "";}  }
class C{  public BinaryRefAddr(String addrType,byte[] src,int offset,int count){  super(addrType);  buf=new byte[count];  System.arraycopy(src,offset,buf,0,count);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>(1);  result.addElement(new Option("\tThe index of the class attribute. Index starts with 1, 'first'\n" + "\tand 'last' are accepted, '0' unsets the class index.\n" + "\t(default: last)","C",1,"-C <num|first|last|0>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public String[] preferenceNames(){  Set<String> set=properties.stringPropertyNames();  return set.toArray(new String[set.size()]);}  }
class C{  public String indexColumnFamilyName(ColumnDefinition info){  return cfName + Directories.SECONDARY_INDEX_NAME_SEPARATOR + (info.getIndexName() == null ? ByteBufferUtil.bytesToHex(info.name.bytes) : info.getIndexName());}  }
class C{  public void error(XPathContext xctxt,int sourceNode,String msg,Object[] args) throws javax.xml.transform.TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);  ErrorListener ehandler=xctxt.getErrorListener();  if (null != ehandler) {    ehandler.fatalError(new TransformerException(fmsg,(SAXSourceLocator)xctxt.getSAXLocator()));  } else {    SourceLocator slocator=xctxt.getSAXLocator();    System.out.println(fmsg + "; file " + slocator.getSystemId()+ "; line "+ slocator.getLineNumber()+ "; column "+ slocator.getColumnNumber());  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.INFERENCE_VARIABLE;}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (!validation.validateAndInformPlayer(player,action)) {    return;  }  String message=QuoteSpecials.quote(action.get(TEXT));  DBCommand command=new StoreMessageCommand(player.getName(),action.get(TARGET),message,"P");  DBCommandQueue.get().enqueueAndAwaitResult(command,handle);  TurnNotifier.get().notifyInTurns(0,new TurnListenerDecorator(this));}  }
class C{  public Templates newTemplates(Source source) throws TransformerConfigurationException {  String baseID=source.getSystemId();  if (null != baseID) {    baseID=SystemIDResolver.getAbsoluteURI(baseID);  }  if (source instanceof DOMSource) {    DOMSource dsource=(DOMSource)source;    Node node=dsource.getNode();    if (null != node)     return processFromNode(node,baseID); else {      String messageStr=XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_DOMSOURCE_INPUT,null);      throw new IllegalArgumentException(messageStr);    }  }  TemplatesHandler builder=newTemplatesHandler();  builder.setSystemId(baseID);  try {    InputSource isource=SAXSource.sourceToInputSource(source);    isource.setSystemId(baseID);    XMLReader reader=null;    if (source instanceof SAXSource)     reader=((SAXSource)source).getXMLReader();    if (null == reader) {      try {        javax.xml.parsers.SAXParserFactory factory=javax.xml.parsers.SAXParserFactory.newInstance();        factory.setNamespaceAware(true);        if (m_isSecureProcessing) {          try {            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);          } catch (          org.xml.sax.SAXException se) {          }        }        javax.xml.parsers.SAXParser jaxpParser=factory.newSAXParser();        reader=jaxpParser.getXMLReader();      } catch (      javax.xml.parsers.ParserConfigurationException ex) {        throw new org.xml.sax.SAXException(ex);      }catch (      javax.xml.parsers.FactoryConfigurationError ex1) {        throw new org.xml.sax.SAXException(ex1.toString());      }catch (      NoSuchMethodError ex2) {      }catch (      AbstractMethodError ame) {      }    }    if (null == reader)     reader=XMLReaderFactory.createXMLReader();    reader.setContentHandler(builder);    reader.parse(isource);  } catch (  org.xml.sax.SAXException se) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(new TransformerException(se));      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    } else {      throw new TransformerConfigurationException(se.getMessage(),se);    }  }catch (  Exception e) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(new TransformerException(e));        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    } else {      throw new TransformerConfigurationException(e.getMessage(),e);    }  }  return builder.getTemplates();}  }
class C{  private void unswapAll(IgniteCache<Integer,CacheValue> cache,int lowerBound,int upperBound) throws Exception {  resetCounters();  Set<Integer> keys=new HashSet<>();  for (int i=lowerBound; i < upperBound; i++) {    assert cache.localPeek(i,CachePeekMode.ONHEAP) == null;    keys.add(i);  }  cache.localPromote(keys);  assert swapCnt.get() == 0;  assert unswapCnt.get() == upperBound - lowerBound;  checkEntries(cache,lowerBound,upperBound);  assert swapCnt.get() == 0;  assert unswapCnt.get() == upperBound - lowerBound;}  }
class C{  public TokenToVectorPanel(final ReaderWorld world){  super("<html><p>These entries produce vector outputs. " + "When they are 'activated', the " + "associated vector is sent to any coupled consumers "+ "(e.g. a neuron group).");  this.world=world;  table=SimbrainJTable.createTable(new VectorDictionaryTable(world.getTokenToVectorDict()));  initPanel(table);}  }
class C{  public static int min(int x,int y){  return (x < y) ? x : y;}  }
class C{  protected Task<T> deleteTaskURI(URI uri){  TaskResourceRep task=client.deleteURI(TaskResourceRep.class,uri);  return new Task<T>(client,task,resourceClass);}  }
class C{  public void java_io_ObjectInputStream_allocateNewObject(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:19.771 -0500",hash_original_method="9676D8694A6D1EC55F8FB5E1D9DC6D95",hash_generated_method="03BD07DEFCF254DA0DD3FE825F1CB381") public SpannableStringBuilder(CharSequence text){  this(text,0,text.length());}  }
class C{  public boolean isCombining(){  return gm.isCombining();}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  static private String BYTE_Max(){  byte tempValue=Byte.MAX_VALUE;  return String.valueOf(tempValue);}  }
class C{  public PriorityParser(String priority){  super(priority);}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public static AddStatListenerRequest create(StatResource observedResource,Stat observedStat){  AddStatListenerRequest m=new AddStatListenerRequest();  m.resourceId=observedResource.getResourceUniqueID();  m.statName=observedStat.getName();  return m;}  }
class C{  @Override public void scheduledMonitoring(){  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  try {synchronized (cacheLock) {      stopMonitoringStaleSystem();      handleActivePassiveMonitoringChanges();    }  } catch (  Exception e) {    _logger.error(e.getMessage(),e);  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  public PhantomReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);}  }
class C{  public SnapshotException(Throwable cause){  super(cause);}  }
class C{  private synchronized boolean addProvisionedSlave(DockerSlaveTemplate template) throws Exception {  final DockerContainerLifecycle dockerCreateContainer=template.getDockerContainerLifecycle();  String dockerImageName=dockerCreateContainer.getImage();  int templateCapacity=template.getMaxCapacity();  int estimatedTotalSlaves=countCurrentDockerSlaves(null);  int estimatedAmiSlaves=countCurrentDockerSlaves(template);synchronized (provisionedImages) {    int currentProvisioning=0;    if (provisionedImages.containsKey(template)) {      currentProvisioning=provisionedImages.get(template);    }    for (    int amiCount : provisionedImages.values()) {      estimatedTotalSlaves+=amiCount;    }    estimatedAmiSlaves+=currentProvisioning;    if (estimatedTotalSlaves >= getContainerCap()) {      LOG.info("Not Provisioning '{}'; Server '{}' full with '{}' container(s)",dockerImageName,name,getContainerCap());      return false;    }    if (templateCapacity != 0 && estimatedAmiSlaves >= templateCapacity) {      LOG.info("Not Provisioning '{}'. Instance limit of '{}' reached on server '{}'",dockerImageName,templateCapacity,name);      return false;    }    LOG.info("Provisioning '{}' number '{}' on '{}'; Total containers: '{}'",dockerImageName,estimatedAmiSlaves,name,estimatedTotalSlaves);    provisionedImages.put(template,currentProvisioning + 1);    return true;  }}  }
class C{  private void updateBackground(){  try {    Picasso.with(mActivity).load(DEFAULT_BACKGROUND_RES_ID).resize(mMetrics.widthPixels,mMetrics.heightPixels).centerCrop().error(mDefaultBackground).into(mBackgroundTarget);  } catch (  Exception e) {    Log.e(TAG,e.toString());  }}  }
class C{  public float nextFloat(boolean includeZero,boolean includeOne){  float d=0.0f;  do {    d=nextFloat();    if (includeOne && nextBoolean())     d+=1.0f;  } while ((d > 1.0f) || (!includeZero && d == 0.0f));  return d;}  }
class C{  protected static Pair<String,String> lsrRegister(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){  final String shifterOperand=environment.getNextVariableString();  final String shifterCarryOut=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar11=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  final String tmpVar4=environment.getNextVariableString();  final String tmpVar5=environment.getNextVariableString();  final String tmpVar6=environment.getNextVariableString();  final String tmpVar7=environment.getNextVariableString();  final String isZeroCondition=environment.getNextVariableString();  final String shifterCarryOutTmp1=environment.getNextVariableString();  final String shifterCarryOutTmp2=environment.getNextVariableString();  final String shifterCarryOutTmp3=environment.getNextVariableString();  final String shifterCarryOutTmp4=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,registerNodeValue2,dWordSize,String.valueOf(0x000000FFL),dWordSize,tmpVar1));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,String.valueOf(0),dWordSize,tmpVar1,dWordSize,tmpVar11));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,tmpVar11,dWordSize,tmpVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar2,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpVar11,byteSize,isZeroCondition));  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,isZeroCondition,byteSize,"C",byteSize,shifterCarryOutTmp1));  instructions.add(ReilHelpers.createXor(baseOffset++,dWordSize,tmpVar11,wordSize,String.valueOf(0x20L),dWordSize,tmpVar3));  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpVar3,byteSize,isZeroCondition));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,thirtyOneSet,byteSize,tmpVar4));  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,isZeroCondition,byteSize,tmpVar4,byteSize,shifterCarryOutTmp2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar11,dWordSize,notThirtyOneSet,dWordSize,tmpVar5));  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpVar5,byteSize,isZeroCondition));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,tmpVar11,dWordSize,oneSet,dWordSize,tmpVar6));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,zeroSet,dWordSize,tmpVar6,dWordSize,tmpVar6));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,tmpVar6,byteSize,tmpVar7));  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,isZeroCondition,byteSize,tmpVar7,byteSize,shifterCarryOutTmp3));  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,shifterCarryOutTmp1,byteSize,shifterCarryOutTmp2,byteSize,shifterCarryOutTmp4));  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,shifterCarryOutTmp3,byteSize,shifterCarryOutTmp4,byteSize,shifterCarryOut));  return new Pair<String,String>(shifterOperand,shifterCarryOut);}  }
class C{  public static FlakeId startOf(long epochMilli){  long sequenceTime=sequenceTimeFromEpochMilli(epochMilli);  return new FlakeId(sequenceTime,MIN_NODE_ID);}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  processBytes(in,inOff,blockSize,out,outOff);  return blockSize;}  }
class C{  public static boolean overlaps(long s1,long s2){  return ((s1 & s2) != 0);}  }
class C{  public void add(int objectToAdd,long[][] hashFunctions){  for (  long[] h : hashFunctions) {    int i=hash(h,(long)objectToAdd);    bitSet.set(i);  }}  }
class C{  public IntList(){  this(0,null);}  }
class C{  public static long[] toLongArray(char[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(long)array[i];  }  return result;}  }
class C{  public void validateStorageFiles(List<StorageFile> expectedStorageFiles,List<StorageFile> actualStorageFiles){  assertEquals(expectedStorageFiles.size(),actualStorageFiles.size());  for (int i=0; i < expectedStorageFiles.size(); i++) {    StorageFile expectedStorageFile=expectedStorageFiles.get(i);    StorageFile actualStorageFile=actualStorageFiles.get(i);    assertEquals(expectedStorageFile.getFilePath(),actualStorageFile.getFilePath());    assertEquals(expectedStorageFile.getFileSizeBytes(),actualStorageFile.getFileSizeBytes());    assertEquals(expectedStorageFile.getRowCount(),actualStorageFile.getRowCount());  }}  }
class C{  @Override public final String rightSide(int index,Instances data){  StringBuffer text;  text=new StringBuffer();  if (data.attribute(m_attIndex).isNominal()) {    text.append(" = " + data.attribute(m_attIndex).value(index));  } else   if (index == 0) {    text.append(" <= " + Utils.doubleToString(m_splitPoint,6));  } else {    text.append(" > " + Utils.doubleToString(m_splitPoint,6));  }  return text.toString();}  }
class C{  private void handlePossibleCancellationInterrupt(int s){  if (s == INTERRUPTING)   while (state == INTERRUPTING)   Thread.yield();}  }
class C{  private Pair<Key,List<Equation<Key,Value>>> processMethod(final MethodNode methodNode,boolean jsr){  ProgressManager.checkCanceled();  final Type[] argumentTypes=Type.getArgumentTypes(methodNode.desc);  final Type resultType=Type.getReturnType(methodNode.desc);  final boolean isReferenceResult=ASMUtils.isReferenceType(resultType);  final boolean isBooleanResult=ASMUtils.isBooleanType(resultType);  final boolean isInterestingResult=isReferenceResult || isBooleanResult;  final Method method=new Method(className,methodNode.name,methodNode.desc);  final boolean stable=stableClass || (methodNode.access & STABLE_FLAGS) != 0 || "<init>".equals(methodNode.name);  Key primaryKey=new Key(method,Out,stable);  List<Equation<Key,Value>> equations=new ArrayList<Equation<Key,Value>>(argumentTypes.length * 4 + 3);  equations.add(PurityAnalysis.analyze(method,methodNode,stable));  if (argumentTypes.length == 0 && !isInterestingResult) {    return Pair.create(primaryKey,equations);  }  try {    final ControlFlowGraph graph=ControlFlowGraph.build(className,methodNode,jsr);    if (graph.transitions.length > 0) {      final DFSTree dfs=DFSTree.build(graph.transitions,graph.edgeCount);      boolean branching=!dfs.back.isEmpty();      if (!branching) {        for (        int[] transition : graph.transitions) {          if (transition != null && transition.length > 1) {            branching=true;            break;          }        }      }      if (branching) {        RichControlFlow richControlFlow=new RichControlFlow(graph,dfs);        if (richControlFlow.reducible()) {          processBranchingMethod(method,methodNode,richControlFlow,argumentTypes,isReferenceResult,isInterestingResult,stable,jsr,equations);          return Pair.create(primaryKey,equations);        }        LOG.debug(method + ": CFG is not reducible");      } else {        processNonBranchingMethod(method,argumentTypes,graph,isReferenceResult,isBooleanResult,stable,equations);        return Pair.create(primaryKey,equations);      }    }    return Pair.create(primaryKey,topEquations(method,argumentTypes,isReferenceResult,isInterestingResult,stable));  } catch (  ProcessCanceledException e) {    throw e;  }catch (  Throwable e) {    LOG.debug("Unexpected Error during processing of " + method + " in "+ presentableUrl,e);    return Pair.create(primaryKey,topEquations(method,argumentTypes,isReferenceResult,isInterestingResult,stable));  }}  }
class C{  public void fireControlerIterationEndsEvent(final int iteration){  IterationEndsEvent event=new IterationEndsEvent(this.controler,iteration);{    IterationEndsListener[] listener=this.coreListenerList.getListeners(IterationEndsListener.class);    for (    IterationEndsListener aListener : listener) {      log.info("calling notifyIterationEnds on " + aListener.getClass().getCanonicalName());      aListener.notifyIterationEnds(event);    }  }{    IterationEndsListener[] listener=this.listenerList.getListeners(IterationEndsListener.class);    for (    IterationEndsListener aListener : listener) {      log.info("calling notifyIterationEnds on " + aListener.getClass().getCanonicalName());      aListener.notifyIterationEnds(event);    }  }  log.info("[it." + iteration + "] all ControlerIterationEndsListeners called.");}  }
class C{  public static String toString(Float arg){  return toString("%f",arg);}  }
class C{  public T caseIdentifierRef(IdentifierRef object){  return null;}  }
class C{  public JsonUUIDAdapter(){  this(true);}  }
class C{  public static String toInitialCase(String str){  return toInitialCase(str,new char[]{'-','\''});}  }
class C{  private void adaptDragSensitivity(){  if (rootView != null) {    rootView.setDragSensitivity(calculateDragSensitivity());  }}  }
class C{  public void testVocabulary() throws Exception {  assertVocabulary(a,getDataPath("kstemTestData.zip"),"kstem_examples.txt");}  }
class C{  public boolean isUseFileAppender(){  return this.useFileAppender;}  }
class C{  public static byte[] hash(byte[] data){  try {    MessageDigest md=MessageDigest.getInstance("SHA-256");    md.update(data);    return md.digest();  } catch (  Exception e) {    throw new RuntimeException("Unable to compute hash while signing request: " + e.getMessage(),e);  }}  }
class C{  public void testAbnormalForkTimedGet(){  testAbnormalForkTimedGet(mainPool());}  }
class C{  private void onTrigger1(){  addInstruction(R.string.accessibility_tutorial_lesson_5_text_2,true);  mEditText.setOnTouchListener(mEditTextOnTouchListener);  mLayout.setAccessibilityDelegate(mEditTextClickDelegate);}  }
class C{  public ValidationMessage[] validate(PageData thePage){  TagLibraryValidator tlv=getTagLibraryValidator();  if (tlv == null)   return null;  String uri=getURI();  if (uri.startsWith("/")) {    uri=URN_JSPTLD + uri;  }  ValidationMessage[] messages=tlv.validate(getPrefixString(),uri,thePage);  tlv.release();  return messages;}  }
class C{  public static GeoTimeSerie isonormalize(GeoTimeSerie gts){  if ((TYPE.DOUBLE != gts.getType() && TYPE.LONG != gts.getType()) || 0 == gts.values) {    return gts.clone();  }  double sum=0.0D;  double dmin=Double.POSITIVE_INFINITY;  double dmax=Double.NEGATIVE_INFINITY;  long lmin=Long.MAX_VALUE;  long lmax=Long.MIN_VALUE;  if (TYPE.LONG == gts.getType()) {    for (int i=0; i < gts.values; i++) {      long value=(long)GTSHelper.valueAtIndex(gts,i);      if (value > lmax) {        lmax=value;      }      if (value < lmin) {        lmin=value;      }      sum+=value;    }  } else {    for (int i=0; i < gts.values; i++) {      double value=(double)GTSHelper.valueAtIndex(gts,i);      if (value > dmax) {        dmax=value;      }      if (value < dmin) {        dmin=value;      }      sum+=value;    }  }  boolean constant=false;  if (lmin == lmax || dmin == dmax) {    constant=true;  }  GeoTimeSerie isonormalized=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,gts.values);  isonormalized.setName(gts.getName());  isonormalized.setLabels(gts.getLabels());  double mean=sum / gts.values;  for (int i=0; i < gts.values; i++) {    Object value;    if (constant) {      value=1.0D;    } else     if (TYPE.LONG == gts.getType()) {      value=((long)GTSHelper.valueAtIndex(gts,i) - mean) / (double)(lmax - lmin);    } else {      value=((double)GTSHelper.valueAtIndex(gts,i) - mean) / (double)(dmax - dmin);    }    GTSHelper.setValue(isonormalized,gts.ticks[i],GTSHelper.locationAtIndex(gts,i),GTSHelper.elevationAtIndex(gts,i),value,false);  }  return isonormalized;}  }
class C{  @Override public void playShowAnimation(){  showAnimation.play();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.260 -0500",hash_original_method="39111F1C858A6D228BD34A5A0563D24D",hash_generated_method="BFEEB739496400E432F0DC548F518493") public void scale(float scale){  scale(scale,null);}  }
class C{  @Override public final void write(final DataOutput output) throws IOException {  output.writeInt(size());  for (  SemiCluster c : this) {    c.write(output);  }}  }
class C{  protected void init(String str){  int len=str.length();  text=new char[len];  lcText=new char[len];  for (int i=0; i < len; i++) {    char c=str.charAt(i);    text[i]=c;    if (c == '\n' || c == '\r' || c == '\t') {      lcText[i]=' ';    } else     lcText[i]=((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) ? c : Character.toLowerCase(c);  }}  }
class C{  public void parseOperatorByteCode(DataOutputStream dataStream,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  String next=stream.nextWord();  next=next.toLowerCase();  if (!OPERATORS.contains(next)) {    throw new SelfParseException("Invalid operator: '" + next + "' valid operators are: "+ OPERATORS,stream);  }  String last=next.toLowerCase();  if (next.equals(NOT)) {    next="not";  }  Vertex operator=network.createVertex(new Primitive(next));  dataStream.writeLong(operator.getId());  if (last.equals(IF)) {    int arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,0,stream,elements,false,debug,network);    ensureArguments(IF,1,arguments,stream);    stream.skipWhitespace();    ensureNext('{',stream);    parseArgumentsByteCode(dataStream,Primitive.THEN,0,stream,elements,true,debug,network);    stream.skipWhitespace();    ensureNext('}',stream);    next=lower(stream.peekWord());    boolean elseif=true;    while (elseif) {      elseif=false;      if (ELSE.equals(next)) {        stream.nextWord();        next=lower(stream.peekWord());        if (IF.equals(next)) {          elseif=true;          dataStream.writeLong(network.createVertex(Primitive.ELSEIF).getId());          parseElementByteCode(stream,dataStream,elements,debug,network);          dataStream.writeLong(0l);        } else {          stream.skipWhitespace();          ensureNext('{',stream);          parseArgumentsByteCode(dataStream,Primitive.ELSE,0,stream,elements,true,debug,network);          stream.skipWhitespace();          ensureNext('}',stream);        }      }    }  } else   if (last.equals(WHILE)) {    int arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,0,stream,elements,false,debug,network);    ensureArguments(WHILE,1,arguments,stream);    stream.skipWhitespace();    ensureNext('{',stream);    parseArgumentsByteCode(dataStream,Primitive.DO,0,stream,elements,true,debug,network);    stream.skipWhitespace();    ensureNext('}',stream);  } else   if (last.equals(DO) || last.equals(THINK)) {    stream.skipWhitespace();    ensureNext('{',stream);    parseArgumentsByteCode(dataStream,Primitive.DO,0,stream,elements,true,debug,network);    stream.skipWhitespace();    ensureNext('}',stream);  } else   if (last.equals(FOR)) {    stream.skipWhitespace();    ensureNext('(',stream);    boolean more=true;    dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());    while (more) {      parseElementByteCode(stream,dataStream,elements,debug,network);      stream.skipWhitespace();      ensureNext("in",stream);      parseElementByteCode(stream,dataStream,elements,debug,network);      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        more=false;      }    }    dataStream.writeLong(0l);    ensureNext(')',stream);    stream.skipWhitespace();    ensureNext('{',stream);    parseArgumentsByteCode(dataStream,Primitive.DO,0,stream,elements,true,debug,network);    stream.skipWhitespace();    ensureNext('}',stream);  } else   if (last.equals(NEW)) {    stream.skipWhitespace();    if (Character.isUpperCase(stream.peek())) {      int position=stream.getPosition();      String type=stream.nextWord();      if (stream.peek() == '(') {        stream.skip();        stream.skipWhitespace();        ensureNext(')',stream);        dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());        dataStream.writeLong(network.createVertex(new Primitive(type.toLowerCase())).getId());        dataStream.writeLong(0l);      } else {        stream.setPosition(position);        parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,0,stream,elements,false,debug,network);      }    } else {      parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,0,stream,elements,false,debug,network);    }  } else {    parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,0,stream,elements,false,debug,network);  }  dataStream.writeLong(0l);}  }
class C{  public void add(boolean value) throws BitSetFullException {  if (!isFull()) {    this.set(mPointer++,value);  } else {    throw new BitSetFullException("bitset is full -- contains " + (mPointer + 1) + " bits");  }}  }
class C{  public boolean isShowLevelProperties(){  return propertiesRequired;}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){}  }
class C{  public GifDrawable(@NonNull byte[] bytes) throws IOException {  this(GifInfoHandle.openByteArray(bytes,false),null,null,true);}  }
class C{  public static void printNodeMap(AccessibilityNodeInfo nodeInfo){  if (!ABotConst.DEBUG) {    return;  }  List<AccessibilityNodeInfoSpec> list=new ArrayList<AccessibilityNodeInfoSpec>();  if (nodeInfo != null) {    list.add(new AccessibilityNodeInfoSpec(0,nodeInfo.getClassName()));  }  printAllChildren(nodeInfo,list);}  }
class C{  public int compareTo(Object o){  ObjectStreamField f=(ObjectStreamField)o;  boolean thisPrimitive=this.isPrimitive();  boolean fPrimitive=f.isPrimitive();  if (thisPrimitive != fPrimitive) {    return thisPrimitive ? -1 : 1;  }  return this.getName().compareTo(f.getName());}  }
class C{  private File writeXmlReport(Project project,Report report) throws IOException {  Renderer xmlRenderer=new XMLRenderer();  Writer stringwriter=new StringWriter();  xmlRenderer.setWriter(stringwriter);  xmlRenderer.start();  xmlRenderer.renderFileReport(report);  xmlRenderer.end();  File xmlReport=new File(delphiProjectHelper.workDir().getAbsolutePath(),"pmd-report.xml");  DelphiUtils.LOG.info("PMD output report: " + xmlReport.getAbsolutePath());  FileUtils.writeStringToFile(xmlReport,stringwriter.toString());  return xmlReport;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  Point theScreenResolution=new Point();  theScreenResolution=getDisplaySize(display);  screenResolution=theScreenResolution;  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  @Override public boolean conditionOk(Example e){  Iterator<AttributeValueFilterSingleCondition> i=conditions.iterator();  while (i.hasNext()) {    AttributeValueFilterSingleCondition condition=i.next();    if (combinationMode == AND) {      if (!condition.conditionOk(e)) {        return false;      }    } else {      if (condition.conditionOk(e)) {        return true;      }    }  }  if (combinationMode == AND) {    return true;  } else {    return false;  }}  }
class C{  public void debug(String s,Object... params){  if (isEnabled(TraceSystem.DEBUG)) {    s=MessageFormat.format(s,params);    traceWriter.write(TraceSystem.DEBUG,module,s,null);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:04.169 -0500",hash_original_method="35D638E960413F452190EF441C98A34C",hash_generated_method="5CD84E1ED88608B4AC68B8A630BD6A44") public String toPattern(){  return pattern;}  }
class C{  protected Object allocateArray(int len){  return new char[len];}  }
class C{  public MultiLineLabel(String s){  setEditable(false);  setLineWrap(true);  setWrapStyleWord(true);  setHighlighter(null);  setText(s);}  }
class C{  @Override protected void reset(){  super.reset();  m_ActualClassifier=null;  m_SerializedHeader=null;}  }
class C{  public Object storedData(){  return stored;}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  static void luBacksubstitution(double[] matrix1,int[] row_perm,double[] matrix2){  int i, ii, ip, j, k;  int rp;  int cv, rv;  rp=0;  for (k=0; k < 3; k++) {    cv=k;    ii=-1;    for (i=0; i < 3; i++) {      double sum;      ip=row_perm[rp + i];      sum=matrix2[cv + 3 * ip];      matrix2[cv + 3 * ip]=matrix2[cv + 3 * i];      if (ii >= 0) {        rv=i * 3;        for (j=ii; j <= i - 1; j++) {          sum-=matrix1[rv + j] * matrix2[cv + 3 * j];        }      } else       if (sum != 0.0) {        ii=i;      }      matrix2[cv + 3 * i]=sum;    }    rv=2 * 3;    matrix2[cv + 3 * 2]/=matrix1[rv + 2];    rv-=3;    matrix2[cv + 3 * 1]=(matrix2[cv + 3 * 1] - matrix1[rv + 2] * matrix2[cv + 3 * 2]) / matrix1[rv + 1];    rv-=3;    matrix2[cv + 4 * 0]=(matrix2[cv + 3 * 0] - matrix1[rv + 1] * matrix2[cv + 3 * 1] - matrix1[rv + 2] * matrix2[cv + 3 * 2]) / matrix1[rv + 0];  }}  }
class C{  void notifyMemberLeft(Contact contact){  if (mMembers.remove(contact.getAddress().getAddress()) != null) {    for (    GroupMemberListener listener : mMemberListeners) {      listener.onMemberLeft(this,contact);    }  }}  }
class C{  public void deleteButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  if (javax.swing.JOptionPane.OK_OPTION == javax.swing.JOptionPane.showConfirmDialog(this,rb.getString("ConfirmDelete1") + " " + nodeAddress+ "?",rb.getString("ConfirmDeleteTitle"),javax.swing.JOptionPane.OK_CANCEL_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE)) {    SerialTrafficController.instance().deleteNode(nodeAddress);    resetNotes();    statusText1.setText(rb.getString("FeedBackDelete") + " " + Integer.toString(nodeAddress));    errorInStatus1=true;    changedNode=true;  } else {    resetNotes();  }}  }
class C{  public void createGraphic(GraphicAttributes ga){  init();  stateMachine.setUndefined();  int renderType=OMGraphic.RENDERTYPE_UNKNOWN;  int lineType=OMGraphic.LINETYPE_GREATCIRCLE;  if (ga != null) {    renderType=ga.getRenderType();    lineType=ga.getLineType();  }  if (Debug.debugging("eoml")) {    Debug.output("EditableOMLine.createGraphic(): rendertype = " + renderType);  }  if (lineType == OMGraphic.LINETYPE_UNKNOWN) {    lineType=OMGraphic.LINETYPE_GREATCIRCLE;    if (ga != null)     ga.setLineType(OMGraphic.LINETYPE_GREATCIRCLE);  }switch (renderType) {case (OMGraphic.RENDERTYPE_LATLON):    line=new OMLine(90f,-180f,90f,-180f,lineType);  break;case (OMGraphic.RENDERTYPE_OFFSET):line=new OMLine(90d,-180d,0,0,0,0);break;default :line=new OMLine(-1,-1,-1,-1);}if (ga != null) {ga.setTo(line,true);}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void writeElementList(XMLOutput xmlOutput,String tagName,Iterator<String> listValueIterator) throws IOException {  while (listValueIterator.hasNext()) {    xmlOutput.openTag(tagName);    xmlOutput.writeText(listValueIterator.next());    xmlOutput.closeTag(tagName);  }}  }
class C{  public boolean forEachKey(TIntProcedure procedure){  return forEach(procedure);}  }
class C{  public static int randInt(int min,int max){  Random rand=new Random();  int randomNum=rand.nextInt((max - min) + 1) + min;  return randomNum;}  }
class C{  private float dpToPx(float dp){  return DensityConverter.dpToPx(getContext(),dp);}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.510 -0500",hash_original_method="3F155E9B232579FD3DCD2D3FAECEA79F",hash_generated_method="D2DFE2902C91701683C6C77CD1D801AB") public Intent putExtra(String name,double[] value){  mExtras.put(name,value);  return this;}  }
class C{  @Override public String toString(){  return this.cubeX + "," + this.cubeY+ ","+ this.cubeZ;}  }
class C{  public static void assertScript(final String script) throws Exception {  GroovyShell shell=new GroovyShell();  shell.evaluate(script,genericScriptName());}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    expression.visit(v);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (!m_doneEval) {    this.m_transformer.getMsgMgr().error(xctxt.getSAXLocator(),XSLTErrorResources.ER_REFERENCING_ITSELF,new Object[]{((ElemVariable)this.object()).getName().getLocalName()});  }  VariableStack vars=xctxt.getVarStack();  int currentFrame=vars.getStackFrame();  ElemVariable velem=(ElemVariable)m_obj;  try {    m_doneEval=false;    if (-1 != velem.m_frameSize)     vars.link(velem.m_frameSize);    XObject var=velem.getValue(m_transformer,m_context);    m_doneEval=true;    return var;  }  finally {    if (-1 != velem.m_frameSize)     vars.unlink(currentFrame);  }}  }
class C{  @Override public void onPause(){  super.onPause();  mActiveListAdapter.cleanup();}  }
class C{  boolean isSpacePreserve(){  return m_spacePreserveStack.peek();}  }
class C{  private void sanityCheck(RouterSpec spec){  Set<String> totalRequestedSlots=new HashSet<>();  for (  StreamRouterSpec s : spec.getRouterSpecs()) {    for (    PolicyWorkerQueue q : s.getTargetQueue()) {      List<String> workers=new ArrayList<>();      q.getWorkers().forEach(null);      totalRequestedSlots.addAll(workers);    }  }  if (totalRequestedSlots.size() > getOutputStreamIds().size()) {    String error=String.format("Requested slots are not consistent with provided slots, %s, %s",totalRequestedSlots,getOutputStreamIds());    LOG.error(error);    throw new IllegalStateException(error);  }}  }
class C{  private void restoreDynamicAdd(FacesContext context,Map<String,Object> state,ComponentStruct struct){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletPartialStateManagementStrategy.restoreDynamicAdd");  }  UIComponent parent=locateComponentByClientId(context,context.getViewRoot(),struct.parentClientId);  if (parent != null) {    UIComponent child=locateComponentByClientId(context,parent,struct.clientId);    if (child != null) {      if (struct.facetName == null) {        parent.getChildren().remove(child);      } else {        parent.getFacets().remove(struct.facetName);      }    }    if (child == null) {      StateHolderSaver saver=(StateHolderSaver)state.get(struct.clientId);      if (saver != null) {        child=(UIComponent)saver.restore(context);      }    }    StateContext stateContext=StateContext.getStateContext(context);    if (child == null) {      child=stateContext.getDynamicComponents().get(struct.clientId);    }    if (child != null) {      if (struct.facetName != null) {        parent.getFacets().put(struct.facetName,child);      } else {        int childIndex=-1;        if (child.getAttributes().containsKey(DYNAMIC_COMPONENT)) {          childIndex=(Integer)child.getAttributes().get(DYNAMIC_COMPONENT);        }        child.setId(struct.id);        if (childIndex >= parent.getChildCount() || childIndex == -1) {          parent.getChildren().add(child);        } else {          parent.getChildren().add(childIndex,child);        }        child.getClientId();      }      child.getAttributes().put(DYNAMIC_COMPONENT,child.getParent().getChildren().indexOf(child));      stateContext.getDynamicComponents().put(struct.clientId,child);    }  }}  }
class C{  public static ImmutableSet<RegistrarContact> update(Registrar existingRegistrarObj,Registrar.Builder builder,Map<String,?> args){  builder.setWhoisServer(RegistrarFormFields.WHOIS_SERVER_FIELD.extractUntyped(args).orNull());  builder.setReferralUrl(RegistrarFormFields.REFERRAL_URL_FIELD.extractUntyped(args).orNull());  for (  String email : RegistrarFormFields.EMAIL_ADDRESS_FIELD.extractUntyped(args).asSet()) {    builder.setEmailAddress(email);  }  builder.setPhoneNumber(RegistrarFormFields.PHONE_NUMBER_FIELD.extractUntyped(args).orNull());  builder.setFaxNumber(RegistrarFormFields.FAX_NUMBER_FIELD.extractUntyped(args).orNull());  builder.setLocalizedAddress(RegistrarFormFields.L10N_ADDRESS_FIELD.extractUntyped(args).orNull());  builder.setIpAddressWhitelist(RegistrarFormFields.IP_ADDRESS_WHITELIST_FIELD.extractUntyped(args).or(ImmutableList.<CidrAddressBlock>of()));  for (  String certificate : RegistrarFormFields.CLIENT_CERTIFICATE_FIELD.extractUntyped(args).asSet()) {    builder.setClientCertificate(certificate,ofy().getTransactionTime());  }  for (  String certificate : RegistrarFormFields.FAILOVER_CLIENT_CERTIFICATE_FIELD.extractUntyped(args).asSet()) {    builder.setFailoverClientCertificate(certificate,ofy().getTransactionTime());  }  builder.setUrl(RegistrarFormFields.URL_FIELD.extractUntyped(args).orNull());  builder.setReferralUrl(RegistrarFormFields.REFERRAL_URL_FIELD.extractUntyped(args).orNull());  ImmutableSet.Builder<RegistrarContact> contacts=new ImmutableSet.Builder<>();  for (  RegistrarContact.Builder contactBuilder : concat(RegistrarFormFields.CONTACTS_FIELD.extractUntyped(args).asSet())) {    contacts.add(contactBuilder.setParent(existingRegistrarObj).build());  }  return contacts.build();}  }
class C{  public boolean reduce(TypeArgument left,TypeArgument right,Variance variance){  if (DEBUG) {    log("reducing: " + TypeConstraint.toString(left,right,variance));  }  if (left == null || right == null) {    if (DEBUG) {      log("ignoring constraint due to null values");    }    return false;  }  if ((left instanceof TypeRef) && (right instanceof TypeRef)) {    return reduceTypeRef((TypeRef)left,(TypeRef)right,variance);  }  if ((left instanceof Wildcard) && (right instanceof Wildcard)) {    return reduceWildcard((Wildcard)left,(Wildcard)right,variance);  }  return giveUp(left,right,variance);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Ifne2(){  super("ifne2",2);}  }
class C{  private PlatformDotNetSessionData copyWithoutLockInfo(){  PlatformDotNetSessionData res=new PlatformDotNetSessionData();  res.staticObjects=staticObjects;  res.items=items;  res.timeout=timeout;  return res;}  }
class C{  public String globalInfo(){  return "Class for building and using a 0-R classifier. Predicts the mean " + "(for a numeric class) or the mode (for a nominal class).";}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.NOTEQUALS_OP___NOTEQUALS_OP_1:    setNotequalsOp_1(NOTEQUALS_OP_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static EvolutionState possiblyRestoreFromCheckpoint(String[] args){  for (int x=0; x < args.length - 1; x++)   if (args[x].equals(A_CHECKPOINT)) {    System.err.println("Restoring from Checkpoint " + args[x + 1]);    try {      return Checkpoint.restoreFromCheckpoint(args[x + 1]);    } catch (    Exception e) {      Output.initialError("An exception was generated upon starting up from a checkpoint.\nFor help, try:  java ec.Evolve -help\n\n" + e);    }  }  return null;}  }
class C{  protected void checkColumnIndexes(int[] indexes){  for (int i=indexes.length; --i >= 0; ) {    int index=indexes[i];    if (index < 0 || index >= columns)     checkColumn(index);  }}  }
class C{  public GetArtists(ListType.Limits limits,boolean albumartistsonly,String... properties){  super();  addParameterToRequest("limits",limits);  addParameterToRequest("albumartistsonly",albumartistsonly);  addParameterToRequest("properties",properties);}  }
class C{  public void loadThis(){  if ((access & Opcodes.ACC_STATIC) != 0) {    throw new IllegalStateException("no 'this' pointer within static method");  }  mv.visitVarInsn(Opcodes.ALOAD,0);}  }
class C{  public FileTransfer transferFileToGroupChat(String chatId,Uri file,Disposition disposition,boolean attachFileIcon) throws RcsPermissionDeniedException, RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    tryToGrantUriPermissionToStackServices(file);    IFileTransfer ftIntf=mApi.transferFileToGroupChat2(chatId,file,disposition.toInt(),attachFileIcon);    if (ftIntf != null) {      return new FileTransfer(ftIntf);    }    return null;  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPermissionDeniedException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public synchronized void connect(boolean useRtuOverTcp) throws Exception {  if (!isConnected()) {    logger.debug("connect()");    socket=new Socket();    socket.setReuseAddress(true);    socket.setSoLinger(true,1);    socket.setKeepAlive(true);    setTimeout(timeout);    socket.connect(new InetSocketAddress(address,port),timeout);    prepareTransport(useRtuOverTcp);    connected=true;  }}  }
class C{  public Suite(String suiteName,String suiteInstance,String suiteOptions) throws Exception {  super();  try {    this.pointer=CocoJNI.cocoGetSuite(suiteName,suiteInstance,suiteOptions);    this.name=suiteName;  } catch (  Exception e) {    throw new Exception("Suite constructor failed.\n" + e.toString());  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (!(other instanceof AlertLevel))   return false;  final AlertLevel that=(AlertLevel)other;  if (this.severity != that.severity)   return false;  if (this.name != null && !this.name.equals(that.name))   return false;  return true;}  }
class C{  public Path cassandraRun(){  return bin().resolve("cassandra");}  }
class C{  public DebugGrid build(Application application){  return new DebugGrid(application,lines);}  }
class C{  public void testSetF27(){  boolean f27=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF27(f27);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F21-F28 since no command station defined");}  }
class C{  public boolean isConnected(){  return isConnected;}  }
class C{  private void updateEverything(){  if (myShowDialog && myCreateRepositoryForTheRadioButton.isSelected()) {    enableOKAction();    mySelectedDir=myProject.getBaseDir();  } else {    final VirtualFile vf=VcsUtil.getVirtualFile(myTextFieldBrowser.getText());    if (vf == null) {      disableOKAction();      mySelectedDir=null;      return;    }    vf.refresh(false,false);    if (vf.exists() && vf.isValid() && vf.isDirectory()) {      enableOKAction();      mySelectedDir=vf;    } else {      disableOKAction();      mySelectedDir=null;    }  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @SuppressWarnings("unchecked") private void evaluateEventFees(Node nodePriceModel,RDOPriceModel priceModel){  RDOEventFees eventFees=priceModel.getEventFees();  eventFees.setParentEntryNr(priceModel.getEntryNr());  eventFees.setEntryNr(sequence.nextValue());  List<RDOEvent> eventList=new ArrayList<RDOEvent>();  Node nodeGatheredEvents=XMLConverter.getLastChildNode(nodePriceModel,BillingResultXMLTags.GATHERED_EVENTS_NODE_NAME);  if (nodeGatheredEvents != null) {    NodeList events=nodeGatheredEvents.getChildNodes();    for (int index=0; index < events.getLength(); index++) {      Node nodeEvent=events.item(index);      if (BillingResultXMLTags.EVENT_NODE_NAME.equals(nodeEvent.getNodeName())) {        RDOEvent event=new RDOEvent();        event.setParentEntryNr(eventFees.getEntryNr());        event.setEntryNr(sequence.nextValue());        event.setId(XMLConverter.getStringAttValue(nodeEvent,BillingResultXMLTags.ID_ATTRIBUTE_NAME));        Node occurencesNode=XMLConverter.getLastChildNode(nodeEvent,BillingResultXMLTags.NUMBER_OF_OCCURRENCE_NODE_NAME);        ListPriceResult result=getSteppedPrices(nodeEvent,formatter,event.getId(),event.getEntryNr(),true);        event.setSteppedPrices((List<RDOSteppedPrice>)result.list);        if (event.getSteppedPrices().isEmpty()) {          event.setNumberOfOccurences(XMLConverter.getStringAttValue(occurencesNode,BillingResultXMLTags.AMOUNT_ATTRIBUTE_NAME));          Node basePrice=XMLConverter.getLastChildNode(nodeEvent,BillingResultXMLTags.SINGLE_COST_NODE_NAME);          event.setBasePrice(formatter.getValueToDisplay(parseBigDecimal(basePrice,BillingResultXMLTags.AMOUNT_ATTRIBUTE_NAME),true));          Node price=XMLConverter.getLastChildNode(nodeEvent,BillingResultXMLTags.COST_FOR_EVENT_TYPE_NODE_NAME);          if (price != null) {            final BigDecimal amount=parseBigDecimal(price,BillingResultXMLTags.AMOUNT_ATTRIBUTE_NAME);            event.setPrice(ValueRounder.roundValue(formatter,amount,new BigDecimal[0]));          }        }        eventList.add(event);      }    }  }  eventFees.setEvents(eventList);  if (nodeGatheredEvents != null) {    eventFees.setSubtotalAmount(XMLConverter.getStringAttValue(XMLConverter.getLastChildNode(nodeGatheredEvents,BillingResultXMLTags.GATHERED_EVENTS_COSTS_NODE_NAME),"amount"));  }  if (eventFees.getEvents().isEmpty()) {    eventFees.setHideEventFees(true);  }}  }
class C{  protected Float wrapKey(float k){  return new Float(k);}  }
class C{  public boolean isSpritePause(){  return mSpritePause;}  }
class C{  void stop(){  if (mRunning) {    mTriggerPercentage=0;    mFinishTime=AnimationUtils.currentAnimationTimeMillis();    mRunning=false;    mParent.postInvalidate();  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static void printMetadataEntry(GoogleBaseEntry entry){  MetadataEntryExtension metadata=entry.getGoogleBaseMetadata();  AttributeHistogram attributeHistogram=metadata.getAttributeHistogram();  System.out.println(attributeHistogram.getAttributeName() + " (" + attributeHistogram.getAttributeType().getName()+ "): "+ "valueCount="+ attributeHistogram.getTotalValueCount()+ " - "+ entry.getId());  for (  UniqueValue value : attributeHistogram.getValues()) {    System.out.println(value.getValueAsString() + " count=" + value.getCount());  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 6:{        start=zzMarkedPos - 1;        yybegin(CHAR_LITERAL);      }case 22:    break;case 20:{    yybegin(YYINITIAL);    addToken(start,zzStartRead + 2,Token.COMMENT_DOCUMENTATION);  }case 23:break;case 19:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 24:break;case 11:{addToken(start,zzStartRead - 1,Token.ERROR_CHAR);addNullToken();return firstToken;}case 25:break;case 21:{start=zzMarkedPos - 4;yybegin(CD_COMMENT);}case 26:break;case 3:{addToken(Token.WHITESPACE);}case 27:break;case 10:{addToken(start,zzStartRead,Token.LITERAL_CHAR);yybegin(YYINITIAL);}case 28:break;case 4:{addToken(Token.SEPARATOR);}case 29:break;case 16:{addToken(Token.VARIABLE);}case 30:break;case 1:{addToken(Token.IDENTIFIER);}case 31:break;case 8:{addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);yybegin(YYINITIAL);}case 32:break;case 14:{addToken(Token.FUNCTION);}case 33:break;case 15:{addToken(Token.DATA_TYPE);}case 34:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);return firstToken;}case 35:break;case 17:{start=zzMarkedPos - 2;yybegin(C_STYLE_COMMENT);}case 36:break;case 5:{start=zzMarkedPos - 1;yybegin(STRING);}case 37:break;case 18:{addToken(Token.OPERATOR);}case 38:break;case 2:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 39:break;case 7:{}case 40:break;case 13:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 41:break;case 9:{addToken(start,zzStartRead - 1,Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 42:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case CD_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);return firstToken;}case 84:break;case STRING:{addToken(start,zzStartRead - 1,Token.ERROR_STRING_DOUBLE);return firstToken;}case 85:break;case CHAR_LITERAL:{addToken(start,zzStartRead - 1,Token.ERROR_CHAR);return firstToken;}case 86:break;case YYINITIAL:{addNullToken();return firstToken;}case 87:break;case C_STYLE_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 88:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tSpecify list of columns that specify a unique\n" + "\tdataset.\n" + "\tFirst and last are valid indexes. (default none)","D",1,"-D <index,index2-index4,...>"));  newVector.addElement(new Option("\tSet the index of the column containing the run number","R",1,"-R <index>"));  newVector.addElement(new Option("\tSet the index of the column containing the fold number","F",1,"-F <index>"));  newVector.addElement(new Option("\tSpecify list of columns that specify a unique\n" + "\t'result generator' (eg: classifier name and options).\n" + "\tFirst and last are valid indexes. (default none)","G",1,"-G <index1,index2-index4,...>"));  newVector.addElement(new Option("\tSet the significance level for comparisons (default 0.05)","S",1,"-S <significance level>"));  newVector.addElement(new Option("\tShow standard deviations","V",0,"-V"));  newVector.addElement(new Option("\tProduce table comparisons in Latex table format","L",0,"-L"));  newVector.addElement(new Option("\tProduce table comparisons in CSV table format","csv",0,"-csv"));  newVector.addElement(new Option("\tProduce table comparisons in HTML table format","html",0,"-html"));  newVector.addElement(new Option("\tProduce table comparisons with only the significance values","significance",0,"-significance"));  newVector.addElement(new Option("\tProduce table comparisons output suitable for GNUPlot","gnuplot",0,"-gnuplot"));  return newVector.elements();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void run(){  try {    loadU10(repo);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public ElementRule(String name,Class type){  this.name=name;  this.rules=new XMLSyntaxRule[]{new ElementRule(type)};}  }
class C{  @HLEFunction(nid=0xE175EF66,version=150,checkInsideInterrupt=true) public int __sceSasGetOutputmode(int sasCore){  checkSasHandleGood(sasCore);  return getOutputMode();}  }
class C{  protected void appendPayload(byte[] payloadarr){  int oldpayloadsize=this.payload.length;  byte[] oldpayload=this.payload;  this.payload=new byte[oldpayloadsize + payloadarr.length];  System.arraycopy(oldpayload,0,this.payload,0,oldpayloadsize);  System.arraycopy(payloadarr,0,this.payload,oldpayloadsize,payloadarr.length);}  }
class C{  public TextDrawable(TextView tv,String s){  this(tv,s,false,false);}  }
class C{  public TlvITCase(String name){  super(name);}  }
class C{  @Override public int compareTo(ModuleSpec o){  int cmp=this.name.compareTo(o.name);  if (cmp == 0) {    if (this.version != null) {      cmp=this.version.compareTo(o.version);    } else {      cmp=o.version == null ? 0 : -1;    }  }  return cmp;}  }
class C{  public void testMoveDirectorySourceParentRootSourceMissing() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW,dir),null);  create(igfs,paths(DIR_NEW,SUBDIR_NEW),null);  igfs.rename(dir,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,dir);}  }
class C{  @Override public synchronized Restlet createInboundRoot(){  Router router=new Router(getContext());  router.attachDefault(DefaultResource.class);  ModelerServicesInit.attachResources(router);  DiagramServicesInit.attachResources(router);  JsonpFilter jsonpFilter=new JsonpFilter(getContext());  jsonpFilter.setNext(router);  return jsonpFilter;}  }
class C{  @SuppressWarnings("unused") @Test public void testSiblingRegionExitFromSourceState(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      Entry r_entry=_createEntry(EntryKind.INITIAL,null,r);      State s1=_createState("s1",r);{        Region r2=_createRegion("r2",s1);{          Entry r2_entry=_createEntry(EntryKind.INITIAL,null,r2);          State s2=_createState("s2",r2);          _createTransition(r2_entry,s2);          State s2b=_createState("s2b",r2);        }        Region r3=_createRegion("r3",s1);{          Entry r3_entry=_createEntry(EntryKind.INITIAL,null,r3);          State s3=_createState("s3",r3);          _createTransition(r3_entry,s3);        }        Region r4=_createRegion("r4",s1);{          Entry r4_entry=_createEntry(EntryKind.INITIAL,null,r4);          State s4=_createState("s4",r4);          _createTransition(r4_entry,s4);          State s4b=_createState("s4b",r4);        }      }      _createTransition(r_entry,s1);      State s5=_createState("s5",r);      _createTransition(findState(sc,"s3"),s5);    }  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  ExecutionState _s2=flow.getStates().get(1);  assertEquals("sc.r.s1.r2.s2",_s2.getName());  ExecutionState _s2b=flow.getStates().get(2);  assertEquals("sc.r.s1.r2.s2b",_s2b.getName());  ExecutionState _s3=flow.getStates().get(3);  assertEquals("sc.r.s1.r3.s3",_s3.getName());  ExecutionState _s4=flow.getStates().get(4);  assertEquals("sc.r.s1.r4.s4",_s4.getName());  ExecutionState _s4b=flow.getStates().get(5);  assertEquals("sc.r.s1.r4.s4b",_s4b.getName());  ExecutionState _s5=flow.getStates().get(6);  assertEquals("sc.r.s5",_s5.getName());  Reaction _t=_s3.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertEquals(2,_effect.getSteps().size());  assertedOrder(_effect,Lists.newArrayList(_s2b,_s3,_s4b),Lists.newArrayList(new StepLeaf(_s2b.getExitSequence()),new StepLeaf(_s3.getExitSequence()),new StepLeaf(_s4b.getExitSequence())));  assertCall(_effect,1,_s5.getEnterSequences().get(0));}  }
class C{  public GroupEntity(){}  }
class C{  private boolean checkOSBuildArchitecture(ComputeImage os){  return os.getOsBuild() != null && os.getOsArchitecture() != null && os.getOsArchitecture().equals("x86_64");}  }
class C{  public void bindY(DoubleProperty yProperty){  minYWorld.bind(yProperty.add(getMinY()));  maxYWorld.bind(minYWorld.add(getHeight()));}  }
class C{  private static void print(Iterable<?> col){  for (  Object next : col)   System.out.println(">>>     " + next);}  }
class C{  public CombinedCoordPanel(){  this(null);}  }
class C{  private void boundsCheckHelper(Offset index,Offset arrayRef){  stackMoveHelper(T0,index);  if (VM.BuildFor64Addr) {    asm.emitAND_Reg_Reg(T0,T0);  }  stackMoveHelper(S0,arrayRef);  genBoundsCheck(asm,T0,S0);}  }
class C{  public void benchHasParentMatchAll(){  QueryBuilder lookupQuery=matchAllQuery();  QueryBuilder mainQuery=matchAllQuery();  FilterJoinBuilder stringFilter=QueryBuilders.filterJoin("pid").indices(PARENT_INDEX).types(PARENT_TYPE).path("id").query(lookupQuery).termsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  FilterJoinBuilder longFilter=QueryBuilders.filterJoin("num").indices(PARENT_INDEX).types(PARENT_TYPE).path("num").query(lookupQuery).termsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  FilterJoinBuilder intFilter=QueryBuilders.filterJoin("num").indices(PARENT_INDEX).types(PARENT_TYPE).path("num").query(lookupQuery).termsEncoding(TermsByQueryRequest.TermsEncoding.INTEGER);  FilterJoinBuilder bloomNumFilter=QueryBuilders.filterJoin("num").indices(PARENT_INDEX).types(PARENT_TYPE).path("num").query(lookupQuery).termsEncoding(TermsByQueryRequest.TermsEncoding.BLOOM);  FilterJoinBuilder bloomStringFilter=QueryBuilders.filterJoin("pid").indices(PARENT_INDEX).types(PARENT_TYPE).path("id").query(lookupQuery).termsEncoding(TermsByQueryRequest.TermsEncoding.BLOOM);  long tookString=0;  long tookLong=0;  long tookInt=0;  long tookBloomNum=0;  long tookBloomString=0;  long expected=NUM_CHILDREN_PER_PARENT * NUM_PARENTS;  warmFieldData("id","pid");  warmFieldData("num","num");  log("==== HAS PARENT MATCH-ALL ====");  for (int i=0; i < NUM_QUERIES; i++) {    tookString+=runQuery("string",i,CHILD_INDEX,expected,filteredQuery(mainQuery,stringFilter));    tookLong+=runQuery("long",i,CHILD_INDEX,expected,filteredQuery(mainQuery,longFilter));    tookInt+=runQuery("int",i,CHILD_INDEX,expected,filteredQuery(mainQuery,intFilter));    tookBloomNum+=runQuery("bloom_num",i,CHILD_INDEX,expected,filteredQuery(mainQuery,bloomNumFilter));    tookBloomString+=runQuery("bloom_string",i,CHILD_INDEX,expected,filteredQuery(mainQuery,bloomStringFilter));  }  log("string: " + (tookString / NUM_QUERIES) + "ms avg");  log("long  : " + (tookLong / NUM_QUERIES) + "ms avg");  log("int   : " + (tookInt / NUM_QUERIES) + "ms avg");  log("bloom_num   : " + (tookBloomNum / NUM_QUERIES) + "ms avg");  log("bloom_string   : " + (tookBloomString / NUM_QUERIES) + "ms avg");  log("");}  }
class C{  public void close() throws IOException {  if (datagramConnection != null) {    datagramConnection.close();  }}  }
class C{  public MulticastReceiverConfigurationImpl(InetAddress group,int port){  this(group,port,640);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.764 -0500",hash_original_method="DFF1A943D13A30E770B3B1EA5D85E01F",hash_generated_method="792B9E4F49D4AF98885AAB773350BCF4") public static Bitmap decodeByteArray(byte[] data,int offset,int length){  return decodeByteArray(data,offset,length,null);}  }
class C{  public String write(Object value) throws Exception {  int length=Array.getLength(value);  return write(value,length);}  }
class C{  private Base64(){}  }
class C{  public void addToOriginalCourseOfferings(CourseOffering co){  this.originalOfferings+=" " + co.getUniqueId().toString();}  }
class C{  private static void println(StringBuilder stringBuilder,String msg){  stringBuilder.append(msg);  stringBuilder.append("\n");}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  if (object.hasSlot("content")) {    content=object.getSlot("content");  } else {    content=null;  }}  }
class C{  public ClusterRerouteRequestBuilder add(AllocationCommand... commands){  request.add(commands);  return this;}  }
class C{  public boolean isAllowLogging(){  Object oo=get_Value(COLUMNNAME_IsAllowLogging);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean hasKey(ECKey key){  keyChainGroupLock.lock();  try {    return keyChainGroup.hasKey(key);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected ExifTag addTag(ExifTag tag,int ifdId){  if (tag != null && ExifTag.isValidIfd(ifdId)) {    IfdData ifdData=getOrCreateIfdData(ifdId);    return ifdData.setTag(tag);  }  return null;}  }
class C{  public static void fastScrollToTop(RecyclerView recyclerView,int threshold,int lastScroll,long scrollToPositionDelay){  new FastScrollToTop(recyclerView,threshold,lastScroll,scrollToPositionDelay);}  }
class C{  public JTree(Vector<?> value){  this(createTreeModel(value));  this.setRootVisible(false);  this.setShowsRootHandles(true);  expandRoot();}  }
class C{  public boolean isACH(){  Object oo=get_Value(COLUMNNAME_IsACH);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean saveFile(File file,NBTTagCompound data){  try {    File tempFile=new File(file.getParent(),file.getName() + "_tmp.dat");    CompressedStreamTools.writeCompressed(data,new FileOutputStream(tempFile));    if (file.exists()) {      file.delete();    }    tempFile.renameTo(file);    return true;  } catch (  Exception e) {    System.out.println("Failed to queueSave " + file.getName() + ".dat!");    e.printStackTrace();    return false;  }}  }
class C{  public Builder resultType(ResultType resultType){  this.resultType=resultType.type;  return this;}  }
class C{  private Stream createStream(IProcessingItem sourcePi){  Stream stream=this.componentFactory.createStream(sourcePi);  this.topology.addStream(stream);  return stream;}  }
class C{  public int size(){  return dataColumn.size();}  }
class C{  public static void main(String[] args){  StackOfIntegers stack=new StackOfIntegers();  for (int i=2; i < 120; i++) {    if (isPrime(i))     stack.push(i);  }  System.out.println("\nAll the prime numbers less than 120 in decreasing order:");  while (!stack.empty()) {    System.out.print(stack.pop() + " ");  }  System.out.println();}  }
class C{  public boolean profiling(){  return soot.PhaseOptions.getBoolean(options,"profiling");}  }
class C{  public boolean isPresenceDiscovery(){  return mPresenceDiscovery;}  }
class C{  public static CodedInputStream newInstance(final byte[] buf){  return newInstance(buf,0,buf.length);}  }
class C{  public DistinctNumberList(long[] distinctValues,int initialCapacity){  setUp(distinctValues,initialCapacity);}  }
class C{  public void testPerf3StreamUnidirectionalKeyAndRange(){  epService.getEPAdministrator().createEPL("create window SBR.win:keepall() as SupportBeanRange");  epService.getEPAdministrator().createEPL("@Name('I1') insert into SBR select * from SupportBeanRange");  epService.getEPAdministrator().createEPL("create window ST1.win:keepall() as SupportBean_ST1");  epService.getEPAdministrator().createEPL("@Name('I2') insert into ST1 select * from SupportBean_ST1");  log.info("Preloading events");  epService.getEPRuntime().sendEvent(new SupportBeanRange("ST1","G",4000,4004));  for (int i=0; i < 10000; i++) {    epService.getEPRuntime().sendEvent(new SupportBean_ST1("ST1","G",i));  }  log.info("Done preloading");  String epl="select * from SupportBean_ST0 st0 unidirectional, SBR a, ST1 st1 " + "where st0.key0 = a.key and st1.key1 = a.key and " + "st1.p10 between rangeStart and rangeEnd";  EPStatement stmt=epService.getEPAdministrator().createEPL(epl);  stmt.addListener(listener);  log.info("Querying");  long startTime=System.currentTimeMillis();  for (int i=0; i < 500; i++) {    epService.getEPRuntime().sendEvent(new SupportBean_ST0("ST0","G",-1));    assertEquals(5,listener.getAndResetLastNewData().length);  }  log.info("Done Querying");  long delta=System.currentTimeMillis() - startTime;  log.info("delta=" + delta);  assertTrue("delta=" + delta,delta < 500);  stmt.destroy();}  }
class C{  private MetadataFeaturesData(InputStream stream){  super(stream);}  }
class C{  public static Computer serial(){  return new Computer();}  }
class C{  protected static void loadLaunchableBundles(Small.OnCompleteListener listener){  Context context=Small.getContext();  boolean synchronous=(listener == null);  if (synchronous) {    sLoading=true;  }  if (sThread == null) {    sThread=new LoadBundleThread(context);    sHandler=new LoadBundleHandler(listener);    sThread.start();  }  if (synchronous) {    while (sLoading) {      try {        Thread.sleep(100);      } catch (      InterruptedException e) {        e.printStackTrace();      }    }    if (sUIActions != null) {      for (      Runnable action : sUIActions) {        action.run();      }      sUIActions=null;    }  }}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    VNXeCommandJob job=vnxeApiClient.getJob(getJobIds().get(0));    if (_status == JobStatus.SUCCESS || _status == JobStatus.FAILED) {      VNXeJob.updateStoragePoolCapacity(dbClient,vnxeApiClient,_storagePool,null);    }    URI fsId=getTaskCompleter().getId();    FileShare fsObj=dbClient.queryObject(FileShare.class,fsId);    if (_status == JobStatus.SUCCESS && fsObj != null) {      _isSuccess=true;      updateFS(fsObj,dbClient,job,logMsgBuilder,vnxeApiClient);    } else     if (_status == JobStatus.FAILED && fsObj != null) {      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s failed to create file system: %s",opId,fsId.toString()));      fsObj.setInactive(true);      dbClient.persistObject(fsObj);    } else {      logMsgBuilder.append(String.format("The file system: %s is not found anymore",fsId));    }    _logger.info(logMsgBuilder.toString());    FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.CREATE_FILE_SYSTEM,_isSuccess,"","",fsObj);  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeCreateFileSystemJob",e);    setErrorStatus("Encountered an internal error during file system create job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public boolean isRegularExpressionEnabled(){  return m_RegExpEnabled;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  @SuppressWarnings("unchecked") public ListIterator<AbstractInsnNode> iterator(int index){  return new InsnListIterator(index);}  }
class C{  private ResultList filterResultList(ResultList rList,HttpServletRequest req){  try {    String rf=req.getParameter("rf");    if (rf == null || rf.isEmpty())     return rList;    int idx=rList.getColumnIndex(rf);    if (idx < 0)     return rList;    String[] filtered_vals=req.getParameterValues("rfv");    if (filtered_vals == null || filtered_vals.length == 0)     return rList;    Set<String> filteredSet=new HashSet<String>(filtered_vals.length);    for (    String s : filtered_vals)     filteredSet.add(s.toLowerCase());    ResultList newList=new ResultList();    newList.setColumnDescriptor(rList.getColumnDescriptor());    for (    ResultRow row : rList.getRows()) {      String v=row.getColumns().get(idx);      if (v != null && filteredSet.contains(v.toLowerCase()))       newList.addRow(row);    }    return newList;  } catch (  Exception ex) {    logger.log(Level.INFO,"Failed to filter data",ex);  }  return rList;}  }
class C{  public CargoProject(MavenProject project,Log log){  this(project.getPackaging(),project.getGroupId(),project.getArtifactId(),project.getBuild().getDirectory(),project.getBuild().getFinalName(),project.getArtifact(),project.getAttachedArtifacts(),project.getArtifacts(),log);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void updateControllerConnections(IOFSwitchBackend sw,OFControllerRole role1,OFBsnControllerConnectionState state1,String uri1,OFControllerRole role2,OFBsnControllerConnectionState state2,String uri2){  OFBsnControllerConnection connection1=factory.buildBsnControllerConnection().setAuxiliaryId(OFAuxId.MAIN).setRole(role1).setState(state1).setUri(uri1).build();  OFBsnControllerConnection connection2=factory.buildBsnControllerConnection().setAuxiliaryId(OFAuxId.MAIN).setRole(role2).setState(state2).setUri(uri2).build();  List<OFBsnControllerConnection> connections=new ArrayList<OFBsnControllerConnection>();  connections.add(connection1);  connections.add(connection2);  OFBsnControllerConnectionsReply reply=factory.buildBsnControllerConnectionsReply().setConnections(connections).build();  sw.updateControllerConnections(reply);}  }
class C{  public QuantileLayerPlot(Plot p,int a,double[] q,double r,boolean _symetric){  super(r + " quantile of " + p.name,p);  if (q != null)   Array.checkLength(q,p.getData().length);  Q=q;  axe=a;  quantileRate=r;  symetric=_symetric;}  }
class C{  @Override public void process(ArrayList<HashMap<K,Integer>> tuples){  for (  HashMap<K,Integer> tuple : tuples) {    if (mergedTuple.isEmpty()) {      mergedTuple.putAll(tuple);      for (      Map.Entry<K,Integer> e : tuple.entrySet()) {        lval=e.getValue();        break;      }    } else {      for (      Map.Entry<K,Integer> e : tuple.entrySet()) {        if ((least && (e.getValue() < lval)) || (!least && (e.getValue() > lval))) {          mergedTuple.clear();          mergedTuple.put(e.getKey(),e.getValue());          break;        }      }    }  }}  }
class C{  private AvailabilityRating mergeFactionAvailability(String faction,List<AvailabilityRating> list){  if (list.size() == 0) {    return null;  }  double totalWt=0;  int totalAdj=0;  for (  AvailabilityRating ar : list) {    totalWt+=AvailabilityRating.calcWeight(ar.availability);    totalAdj+=ar.ratingAdjustment;  }  AvailabilityRating retVal=list.get(0).makeCopy(faction);  retVal.availability=(int)(AvailabilityRating.calcAvRating(totalWt / list.size()));  if (totalAdj < 0) {    retVal.ratingAdjustment=(int)((totalAdj - 1) / list.size());  } else {    retVal.ratingAdjustment=(int)((totalAdj + 1) / list.size());  }  return retVal;}  }
class C{  private History(){}  }
class C{  public static boolean isNullOrEmpty(String str){  return str == null || str.trim().length() == 0;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.222 -0500",hash_original_method="E16C5D29E703AEBAB6CAF17A68A08F6B",hash_generated_method="9EB7EFD517B4F19AFC5BCF612FA2F8F9") public void close(){  isSimplePath=false;}  }
class C{  private ArrayList<Segment10> tableSegments(TableEntry10 table){  ArrayList<Segment10> tableSegments=new ArrayList<>();  for (  Segment10 segment : _segments) {    if (Arrays.equals(segment.key(),table.key())) {      tableSegments.add(segment);    }  }  Collections.sort(tableSegments,null);  return tableSegments;}  }
class C{  private static int uariminLt(double value,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ixMin=1;  if (value < bv[0] || value >= bv[bv.length - 1])   return ixMin;  int ix=Arrays.binarySearch(bv,value);  if (ix < 0)   ix=Math.abs(ix) - 2;  ixMin=bvi[ix] + 1;  return ixMin;}  }
class C{  private List cloneSequence(){  if (markerSequence == null) {    return null;  }  List retval=new ArrayList(markerSequence.size());  Iterator iter=markerSequence.iterator();  while (iter.hasNext()) {    MarkerSegment seg=(MarkerSegment)iter.next();    retval.add(seg.clone());  }  return retval;}  }
class C{  Stroker(final RendererContext rdrCtx){  this.rdrCtx=rdrCtx;  this.reverse=new PolyStack(rdrCtx);  this.curve=rdrCtx.curve;}  }
class C{  public static boolean isAlphanumeric(String s){  if (isEmpty(s))   return defaultEmptyOK;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (!isLetterOrDigit(c))     return false;  }  return true;}  }
class C{  private boolean isOwner(){  return _nodeRoot.isServerOwner(getServerSelf());}  }
class C{  private boolean basicModify(DiskEntry entry,ValueWrapper value,byte userBits,boolean async) throws IOException, InterruptedException {  DiskId id=entry.getDiskId();  long startPosForSynchOp=-1L;  OverflowOplog emptyOplog=null;synchronized (this.crf) {    initOpState(entry,value,userBits);    int adjustment=getOpStateSize();    assert adjustment > 0;    int oldOplogId;    startPosForSynchOp=writeOpLogBytes(async);    if (startPosForSynchOp == -1) {      return false;    } else {      if (logger.isTraceEnabled()) {        logger.trace("Oplog::basicModify:Released ByteBuffer with data for Disk ID = {}",id);      }synchronized (id) {        oldOplogId=(int)id.setOplogId(getOplogId());        id.setOffsetInOplog(startPosForSynchOp);        if (EntryBits.isNeedsValue(userBits)) {          id.setValueLength(value.getLength());        } else {          id.setValueLength(0);        }        id.setUserBits(userBits);      }      if (oldOplogId > 0) {        OverflowOplog oldOplog=this.getOplogSet().getChild(oldOplogId);        if (oldOplog != null) {          if (oldOplog.rmLive(entry)) {            if (oldOplogId != getOplogId()) {              emptyOplog=oldOplog;            }          }        }      }      addLive(entry);    }    clearOpState();  }  if (LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER) {    CacheObserverHolder.getInstance().afterSettingOplogOffSet(startPosForSynchOp);  }  if (emptyOplog != null && (!emptyOplog.isCompacting() || emptyOplog.calledByCompactorThread())) {    if (emptyOplog.calledByCompactorThread() && emptyOplog.hasNoLiveValues()) {      flushAll();    }    emptyOplog.handleNoLiveValues();  }  return true;}  }
class C{  private void attemptLogin(){  mEmailView.setError(null);  mPasswordView.setError(null);  String email=mEmailView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mUserManager.login(email,password,loginListener());  }}  }
class C{  private void enrichMapWithShop(final Map<String,Object> map){  map.put(SHOP,shopService.getShopByCode((String)map.get(SHOP_CODE)));}  }
class C{  public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public PropertyChangeEdit(Object source,String propertyName,Object oldValue,Object newValue){  this(source,propertyName,propertyNameToPresentationName(propertyName),oldValue,newValue);}  }
class C{  public static boolean isValidNmtoken(String nmtoken){  if (nmtoken.length() == 0)   return false;  for (int i=0; i < nmtoken.length(); i++) {    char ch=nmtoken.charAt(i);    if (!isName(ch)) {      return false;    }  }  return true;}  }
class C{  public byte[] readObjectData(final PdfObject pdfObject){  final String objectRef=pdfObject.getObjectRefAsString();  final int id=pdfObject.getObjectRefID();  if (pdfObject.isDataExternal()) {    final byte[] data=readObjectAsByteArray(pdfObject,false,id,0);    if (data == null) {      pdfObject.setFullyResolved(false);      LogWriter.writeLog("[Linearized] " + pdfObject.getObjectRefAsString() + " not yet available (15)");      return data;    }  }  final boolean debug=false;  if (debug) {    System.err.println("reading objectRef=" + objectRef + "< isCompressed="+ offset.isCompressed(id));  }  final boolean isCompressed=offset.isCompressed(id);  pdfObject.setCompressedStream(isCompressed);  final byte[] raw;  if (isCompressed) {    raw=readCompressedObjectData(pdfObject,offset);  } else {    movePointer(offset.elementAt(id));    if (objectRef.charAt(0) == '<') {      raw=objectReader.readObjectData(-1,pdfObject);    } else {      if (ObjLengthTable == null || offset.isRefTableInvalid()) {        if (getPointer() == 0) {          raw=new byte[0];        } else {          raw=objectReader.readObjectData(-1,pdfObject);        }      } else       if (id > ObjLengthTable.length || ObjLengthTable[id] == 0) {        LogWriter.writeLog(objectRef + " cannot have offset 0");        raw=new byte[0];      } else {        raw=objectReader.readObjectData(ObjLengthTable[id],pdfObject);      }    }  }  return raw;}  }
class C{  public static void beginWrapper(Writer writer) throws IOException {  writer.write("(function(define) { define(function(require, ex$, module) {\n");}  }
class C{  private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {synchronized (principals) {    oos.defaultWriteObject();  }}  }
class C{  public InvalidObjectPrefixException(String objectPrefix,String message){  super(message);  this.objectPrefix=objectPrefix;}  }
class C{  public InvocationPlugin lookupInvocation(ResolvedJavaMethod method){  if (parent != null) {    InvocationPlugin plugin=parent.lookupInvocation(method);    if (plugin != null) {      return plugin;    }  }  return get(method);}  }
class C{  public static boolean methodCallArgsParse(PsiBuilder builder,GroovyParser parser){  PsiBuilder.Marker marker=builder.mark();  if (ParserUtils.getToken(builder,GroovyTokenTypes.mLPAREN,GroovyBundle.message("lparen.expected"))) {    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);    ArgumentList.parseArgumentList(builder,GroovyTokenTypes.mRPAREN,parser);    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);    ParserUtils.getToken(builder,GroovyTokenTypes.mRPAREN,GroovyBundle.message("rparen.expected"));  }  marker.done(GroovyElementTypes.ARGUMENTS);  return true;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E peek(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public void clear(Graphics2D g){  checkPaint(g.getBackground());}  }
class C{  public long nswap(){  return Long.parseLong(fields[35]);}  }
class C{  @Override public boolean resume(){  if (mDBApi.getSession().authenticationSuccessful()) {    try {      mDBApi.getSession().finishAuthentication();      String accessToken=mDBApi.getSession().getOAuth2AccessToken();      settings.setDropboxAuthToken(accessToken);      settings.writeChanges();      return true;    } catch (    IllegalStateException e) {      Log.d(String.valueOf(R.string.app_name),"Error Authenticating...");      return false;    }  } else   return false;}  }
class C{  protected void onArrayStart(final Object obj,final Field field,final Bin annotation,final int length){}  }
class C{  public E removeLRUEntry(){  if (isEmpty())   return null;  Iterator<E> i=iterator();  E value=i.next();  i.remove();  return value;}  }
class C{  final void deliverNewIntentLocked(int callingUid,Intent intent){  boolean sent=false;  service.grantUriPermissionFromIntentLocked(callingUid,packageName,intent,getUriPermissionsLocked());  if ((state == ActivityState.RESUMED || (service.mSleeping && stack.topRunningActivityLocked(null) == this)) && app != null && app.thread != null) {    try {      ArrayList<Intent> ar=new ArrayList<Intent>();      intent=new Intent(intent);      ar.add(intent);      app.thread.scheduleNewIntent(ar,appToken);      sent=true;    } catch (    RemoteException e) {      Slog.w(ActivityManagerService.TAG,"Exception thrown sending new intent to " + this,e);    }catch (    NullPointerException e) {      Slog.w(ActivityManagerService.TAG,"Exception thrown sending new intent to " + this,e);    }  }  if (!sent) {    addNewIntentLocked(new Intent(intent));  }}  }
class C{  public Entry next(){  while (this.next == null && this.index < table.length) {    if (table[index] != null) {      this.next=table[index];    }    this.index++;  }  Entry oldNext=this.next;  if (oldNext != null) {    this.next=oldNext.next;  }  return oldNext;}  }
class C{  public void shutdown(){  for (  ScheduledFuture<?> future : futures) {    future.cancel(false);  }}  }
class C{  public Collection<Cube> all(){  return Collections.unmodifiableCollection(cubes);}  }
class C{  @Override public void initialize(){  if (withMetrics) {    Kamon.start();  }  Config config=ConfigFactory.load(configName);  system=ActorSystem.create(actorSystemName,config);  final ActorRef deadLetterActor=system.actorOf(Props.create(DeadLetterActor.class));  system.eventStream().subscribe(deadLetterActor,DeadLetter.class);  this.isInitialised=true;}  }
class C{  public void makeBackupFile(String name){  File file=findFile(name);  if (file == null) {    log.info("No " + name + " file to backup");  } else   if (file.canWrite()) {    String backupName=backupFileName(file.getAbsolutePath());    File backupFile=findFile(backupName);    if (backupFile != null) {      if (backupFile.delete()) {        log.debug("deleted backup file " + backupName);      }    }    if (file.renameTo(new File(backupName))) {      log.debug("created new backup file " + backupName);    } else {      log.error("could not create backup file " + backupName);    }  }}  }
class C{  protected void assertWriteMode() throws ReplicatorException, InterruptedException {  if (mode != AccessMode.write) {    close();    openWrite();  }}  }
class C{  public void addRange(ValueRange newRange){  for (  String var : newRange.getVariables()) {    addValues(var,newRange.getValues(var));  }}  }
class C{  @Override public void show(){  if (!isKeyInPrefs(getContext(),mPrefsKey)) {    super.show();    markShown();  }}  }
class C{  public static void main(final String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Verifies the given class.");    System.err.println("Usage: CheckClassAdapter " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[0].endsWith(".class")) {    cr=new ClassReader(new FileInputStream(args[0]));  } else {    cr=new ClassReader(args[0]);  }  verify(cr,false,new PrintWriter(System.err));}  }
class C{  private static boolean isServerProblem(Object error){  return (error instanceof ServerError) || (error instanceof AuthFailureError);}  }
class C{  private void expect(char... expectedSymbols) throws ParseException {  if (!accept(expectedSymbols)) {    StringBuilder excString=new StringBuilder();    excString.append("Expected '").append(expectedSymbols[0]).append("'");    for (int i=1; i < expectedSymbols.length; i++) {      excString.append(" or '").append(expectedSymbols[i]).append("'");    }    excString.append(" but found '").append((char)data[index]).append("'");    throw new ParseException(excString.toString(),index);  }}  }
class C{  public void saveLockPattern(List<LockPatternView.Cell> pattern){  final byte[] hash=ShortLockPatternUtils.patternToHash(pattern);  try {    RandomAccessFile raf=new RandomAccessFile(sLockPatternFilename,"rwd");    if (pattern == null) {      raf.setLength(0);    } else {      raf.write(hash,0,hash.length);    }    raf.close();  } catch (  FileNotFoundException fnfe) {    Log.e(TAG,"Unable to save lock pattern to " + sLockPatternFilename);  }catch (  IOException ioe) {    Log.e(TAG,"Unable to save lock pattern to " + sLockPatternFilename);  }}  }
class C{  public static DateTimeFormatter hourMinuteSecondMillis(){  if (hmsl == null) {    hmsl=new DateTimeFormatterBuilder().append(hourElement()).append(minuteElement()).append(secondElement()).appendLiteral('.').appendFractionOfSecond(3,3).toFormatter();  }  return hmsl;}  }
class C{  public static void main(String... args) throws SQLException {  new ConvertTraceFile().runTool(args);}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  public void removePacketWriterListener(PacketListener packetListener){  removePacketSendingListener(packetListener);}  }
class C{  @Override public boolean isEndOfStreamMarked() throws IOException {  checkClosedOrInError("isEndOfStreamMarked");  long lastTxId=FutureUtils.result(getLastLogRecordAsyncInternal(false,true)).getTransactionId();  return lastTxId == DistributedLogConstants.MAX_TXID;}  }
class C{  public void unblockRequestOnBuckets(Range<Integer> splitRange){  trace("[{}] Unblock requests on buckets : {}",gondola.getHostId(),splitRange);  CountDownLatch lock=bucketLocks.remove(splitRange);  if (lock != null) {    lock.countDown();  }}  }
class C{  public void paintRadioButtonMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.325 -0500",hash_original_method="B1B69215498581680849253AEA19542C",hash_generated_method="138FAB472E897503CC0DB6167736C36C") public void enableCurlLogging(String name,int level){  if (name == null) {    throw new NullPointerException("name");  }  if (level < Log.VERBOSE || level > Log.ASSERT) {    throw new IllegalArgumentException("Level is out of range [" + Log.VERBOSE + ".."+ Log.ASSERT+ "]");  }  curlConfiguration=new LoggingConfiguration(name,level);}  }
class C{  public void enableAllAttributes(){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (cap.isAttribute()) {      enable(cap);    }  }}  }
class C{  public ScriptedMetricBuilder params(Map<String,Object> params){  this.params=params;  return this;}  }
class C{  public static void createImageToStorage(String url,Component targetList,ListModel model,int targetOffset,String targetKey,String cacheId,Image placeholderImage,byte priority){  createImageToStorage(url,targetList,model,targetOffset,targetKey,cacheId,false,null,priority,placeholderImage,defaultMaintainAspectRatio);}  }
class C{  private void refresh(){  final View refreshingView=findViewById(R.id.profile_mask);  refreshingView.setVisibility(View.GONE);  mMatrixIdTextView.setText(mMemberId);  this.setTitle(mMember.displayname);  this.refreshProfileThumbnail();  ArrayList<String> buttonTitles=new ArrayList<String>();  PowerLevels powerLevels=mRoom.getLiveState().getPowerLevels();  int userPowerLevel=powerLevels.getUserPowerLevel(mMemberId);  int myPowerLevel=powerLevels.getUserPowerLevel(mFromUserId);  if (mMemberId.equals(mFromUserId)) {    buttonTitles.add(getResources().getString(R.string.leave));    if (userPowerLevel >= powerLevels.stateDefault) {      buttonTitles.add(getResources().getString(R.string.set_power_level));    }  } else {    if ((RoomMember.MEMBERSHIP_JOIN.equals(mMember.membership)) || (RoomMember.MEMBERSHIP_INVITE.equals(mMember.membership))) {      if ((myPowerLevel >= powerLevels.kick) && (myPowerLevel >= userPowerLevel)) {        buttonTitles.add(getResources().getString(R.string.kick));      }      if ((myPowerLevel >= powerLevels.ban) && (myPowerLevel >= userPowerLevel)) {        buttonTitles.add(getResources().getString(R.string.ban));      }    } else     if (RoomMember.MEMBERSHIP_LEAVE.equals(mMember.membership)) {      if (myPowerLevel >= powerLevels.invite) {        buttonTitles.add(getResources().getString(R.string.invite));      }      if (myPowerLevel >= powerLevels.ban) {        buttonTitles.add(getResources().getString(R.string.ban));      }    } else     if (RoomMember.MEMBERSHIP_BAN.equals(mMember.membership)) {      if (myPowerLevel >= powerLevels.ban) {        buttonTitles.add(getResources().getString(R.string.unban));      }    }    if (myPowerLevel >= powerLevels.stateDefault) {      buttonTitles.add(getResources().getString(R.string.set_power_level));    }    if (mRoom.getMembers().size() > 2) {      buttonTitles.add(getResources().getString(R.string.chat));    }  }  int buttonIndex=0;  for (; buttonIndex < buttonTitles.size(); buttonIndex++) {    Button button=mButtonsList.get(buttonIndex);    button.setVisibility(View.VISIBLE);    button.setEnabled(true);    button.setText(buttonTitles.get(buttonIndex));  }  for (; buttonIndex < mButtonsList.size(); buttonIndex++) {    Button button=mButtonsList.get(buttonIndex);    button.setVisibility(View.INVISIBLE);  }  updatePresenceInfo();}  }
class C{  public Matrix(int m,int n){  this.rows=m;  this.cols=n;  data=new double[m][n];}  }
class C{  public static AISMerge newForAddTable(AISCloner aisCloner,NameGenerator generator,AkibanInformationSchema sourceAIS,Table newTable){  return new AISMerge(aisCloner,generator,copyAISForAdd(aisCloner,sourceAIS),newTable,MergeType.ADD_TABLE,null,null,null,null);}  }
class C{  public final void println(long l) throws IOException {  print(l);  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline) {    flush();  }}  }
class C{  public static Population createPopulation(Config config,Network network){  return createPopulation(config.plans(),network);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return MESSAGE_TYPE;case 2:  return SW_PORT_TUPLE;case 3:return DATA;default :return null;}}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private void storeVoteValue(CachedVote.Type type,long itemId,Vote vote){  checkNotMainThread();  CachedVote.quickSave(database.value(),type,itemId,vote);}  }
class C{  public boolean isAppletAvailable(String applet,String binaryPath){  try {    for (    String aplet : getBusyBoxApplets(binaryPath)) {      if (aplet.equals(applet)) {        return true;      }    }    return false;  } catch (  Exception e) {    RootTools.log(e.toString());    return false;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void addNotAvailableBusinessObjectDataStatuses(List<BusinessObjectDataStatus> notAvailableStatuses,List<StorageUnitEntity> storageUnitEntities,Set<BusinessObjectDataEntity> archivedBusinessObjectDataEntities){  for (  StorageUnitEntity storageUnitEntity : storageUnitEntities) {    notAvailableStatuses.add(createNotAvailableBusinessObjectDataStatus(storageUnitEntity,archivedBusinessObjectDataEntities));  }}  }
class C{  public Task<HostRestRep> deactivate(URI id,boolean detachStorage){  URI deactivateUri=client.uriBuilder(getDeactivateUrl()).queryParam("detach_storage",detachStorage).build(id);  return postTaskURI(deactivateUri);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int a;  float progress;  int range;  boolean blnTextOutput=false;  double z;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    range=(int)(image.getMaximumValue());    long[][] proportionData=new long[3][range + 1];    double[] proportion=new double[range + 1];    int cN, rN;    double zN;    boolean edge;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        z=image.getValue(row,col);        if (z > 0) {          a=(int)(z);          proportionData[0][a]++;          edge=false;          for (i=0; i < 8; i++) {            cN=col + dX[i];            rN=row + dY[i];            zN=image.getValue(rN,cN);            if (zN != z) {              edge=true;              break;            }          }          if (edge) {            proportionData[1][a]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (a=0; a <= range; a++) {      if (proportionData[1][a] > 1) {        proportion[a]=(double)proportionData[1][a] / proportionData[0][a];      }    }    double[] data=null;    updateProgress("Loop 2 of 2:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col]);          output.setValue(row,col,proportion[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      DecimalFormat df;      df=new DecimalFormat("0.0000");      String retstr="Edge Proportion\nPatch ID\tValue";      for (a=0; a <= range; a++) {        if (proportionData[1][a] > 0) {          retstr=retstr + "\n" + a+ "\t"+ df.format(proportion[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SamplingAlgorithm(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:37.886 -0400",hash_original_method="EA468D4C5448BAE97D968ABD02B259FA",hash_generated_method="EA468D4C5448BAE97D968ABD02B259FA") void handleAlgorithm(ParsedDirective pd) throws SaslException {  if (null != m_algorithm)   throw new SaslException("Too many algorithm directives.");  m_algorithm=pd.getValue();  if (!"md5-sess".equals(m_algorithm))   throw new SaslException("Invalid algorithm directive value: " + m_algorithm);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return INTEGERLIST;default :  return null;}}  }
class C{  public URLBlobContainer(URLBlobStore blobStore,BlobPath blobPath,URL path){  super(blobPath);  this.blobStore=blobStore;  this.path=path;}  }
class C{  public MovieSetRemoveAction(boolean withTitle){  if (withTitle) {    putValue(NAME,BUNDLE.getString("movieset.remove.desc"));  }  putValue(LARGE_ICON_KEY,IconManager.LIST_REMOVE);  putValue(SMALL_ICON,IconManager.LIST_REMOVE);  putValue(SHORT_DESCRIPTION,BUNDLE.getString("movieset.remove.desc"));}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  int sdkVersion=getSdkVersion();  if ((sdkVersion < VERSION_CODE_JELLY_BEAN) || (sdkVersion > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  public void calcGraph(int panelWidth,int panelHeight){synchronized (m_locker) {    m_threadRun=true;    if (m_as.nominalWeights != null) {      m_hc=new BarCalc(panelWidth,panelHeight);      m_hc.setPriority(Thread.MIN_PRIORITY);      m_hc.start();    } else     if (m_as.numericStats != null) {      m_hc=new HistCalc();      m_hc.setPriority(Thread.MIN_PRIORITY);      m_hc.start();    } else {      m_histBarCounts=null;      m_histBarClassCounts=null;      m_doneCurrentAttribute=true;      m_threadRun=false;      this.repaint();    }  }}  }
class C{  public IOUtils(){  super();}  }
class C{  public static String bytesToHex(byte[] bytes){  char[] hexChars=new char[bytes.length * 2];  for (int j=0; j < bytes.length; j++) {    int v=bytes[j] & 0xFF;    hexChars[j * 2]=hexArray[v >>> 4];    hexChars[j * 2 + 1]=hexArray[v & 0x0F];  }  return new String(hexChars);}  }
class C{  public AltEncrypter(String passPhrase){  try {    SecureRandom sr=SecureRandom.getInstance("SHA1PRNG");    sr.setSeed(passPhrase.getBytes("UTF8"));    KeyGenerator kGen=KeyGenerator.getInstance("DESEDE");    kGen.init(168,sr);    Key key=kGen.generateKey();    cipherEncrypt=Cipher.getInstance("DESEDE/ECB/PKCS5Padding");    cipherEncrypt.init(Cipher.ENCRYPT_MODE,key);    cipherDecrypt=Cipher.getInstance("DESEDE/ECB/PKCS5Padding");    cipherDecrypt.init(Cipher.DECRYPT_MODE,key);  } catch (  UnsupportedEncodingException|NoSuchPaddingException|NoSuchAlgorithmException|InvalidKeyException e) {  }}  }
class C{  public SortClause(String item,ORDER order){  this.item=item;  this.order=order;}  }
class C{  public ProxyBucketRegion(int bid,PartitionedRegion partitionedRegion,InternalRegionArguments internalRegionArgs){  this.serialNumber=DistributionAdvisor.createSerialNumber();  this.bid=bid;  this.partitionedRegion=partitionedRegion;  this.advisor=BucketAdvisor.createBucketAdvisor(this,internalRegionArgs.getPartitionedRegionAdvisor());  this.bucketLock=this.partitionedRegion.getBucketLock(this.bid);  if (this.partitionedRegion.getDataPolicy().withPersistence()) {    String regionPath=getFullPath();    PersistentMemberManager memberManager=partitionedRegion.getGemFireCache().getPersistentMemberManager();    DiskRegionStats diskStats=partitionedRegion.getDiskRegionStats();    DistributedLockService dl=partitionedRegion.getGemFireCache().getPartitionedRegionLockService();    DiskStoreImpl ds=partitionedRegion.getDiskStore();    EvictionAttributes ea=partitionedRegion.getAttributes().getEvictionAttributes();    EnumSet<DiskRegionFlag> diskFlags=EnumSet.noneOf(DiskRegionFlag.class);    if (partitionedRegion.getConcurrencyChecksEnabled()) {      diskFlags.add(DiskRegionFlag.IS_WITH_VERSIONING);    }    boolean overflowEnabled=ea != null && ea.getAction().isOverflowToDisk();    int startingBucketID=-1;    String partitionName=NO_FIXED_PARTITION_NAME;    List<FixedPartitionAttributesImpl> fpaList=partitionedRegion.getFixedPartitionAttributesImpl();    if (fpaList != null) {      for (      FixedPartitionAttributesImpl fpa : fpaList) {        if (fpa.hasBucket(bid)) {          startingBucketID=fpa.getStartingBucketID();          partitionName=fpa.getPartitionName();          break;        }      }    }    this.diskRegion=DiskRegion.create(ds,regionPath,true,partitionedRegion.getPersistBackup(),overflowEnabled,partitionedRegion.isDiskSynchronous(),partitionedRegion.getDiskRegionStats(),partitionedRegion.getCancelCriterion(),partitionedRegion,partitionedRegion.getAttributes(),diskFlags,partitionName,startingBucketID,partitionedRegion.getCompressor(),partitionedRegion.getOffHeap());    if (fpaList != null) {      for (      FixedPartitionAttributesImpl fpa : fpaList) {        if (fpa.getPartitionName().equals(this.diskRegion.getPartitionName()) && this.diskRegion.getStartingBucketId() != -1) {          fpa.setStartingBucketID(this.diskRegion.getStartingBucketId());          partitionedRegion.getPartitionsMap().put(fpa.getPartitionName(),new Integer[]{fpa.getStartingBucketID(),fpa.getNumBuckets()});        }      }    }    this.persistenceAdvisor=new BucketPersistenceAdvisor(advisor,dl,diskRegion,regionPath,diskStats,memberManager,bucketLock,this);  } else {    this.diskRegion=null;    this.persistenceAdvisor=null;  }}  }
class C{  public void xorOff(){  offscreen.setPaintMode();}  }
class C{  private OrderedCollection<PortChangeEvent> compareAndUpdatePorts(Collection<OFPortDesc> newPorts,boolean doUpdate){  if (newPorts == null) {    throw new NullPointerException("newPortsList must not be null");  }  lock.writeLock().lock();  try {    OrderedCollection<PortChangeEvent> events=new LinkedHashSetWrapper<PortChangeEvent>();    Map<OFPort,OFPortDesc> newPortsByNumber=new HashMap<OFPort,OFPortDesc>();    Map<String,OFPortDesc> newPortsByName=new HashMap<String,OFPortDesc>();    List<OFPortDesc> newEnabledPortList=new ArrayList<OFPortDesc>();    List<OFPort> newEnabledPortNumbers=new ArrayList<OFPort>();    List<OFPortDesc> newPortsList=new ArrayList<OFPortDesc>(newPorts);    for (    OFPortDesc p : newPortsList) {      if (p == null) {        throw new NullPointerException("portList must not " + "contain null values");      }      OFPortDesc duplicatePort;      duplicatePort=newPortsByNumber.put(p.getPortNo(),p);      if (duplicatePort != null) {        String msg=String.format("Cannot have two ports " + "with the same number: %s <-> %s",String.format("%s (%d)",p.getName(),p.getPortNo().getPortNumber()),String.format("%s (%d)",duplicatePort.getName(),duplicatePort.getPortNo().getPortNumber()));        throw new IllegalArgumentException(msg);      }      duplicatePort=newPortsByName.put(p.getName().toLowerCase(),p);      if (duplicatePort != null) {        String msg=String.format("Cannot have two ports " + "with the same name: %s <-> %s",String.format("%s (%d)",p.getName(),p.getPortNo().getPortNumber()),String.format("%s (%d)",duplicatePort.getName(),duplicatePort.getPortNo().getPortNumber()));        throw new IllegalArgumentException(msg);      }      if (!p.getConfig().contains(OFPortConfig.PORT_DOWN) && !p.getState().contains(OFPortState.LINK_DOWN)) {        newEnabledPortList.add(p);        newEnabledPortNumbers.add(p.getPortNo());      }      events.addAll(getSinglePortChanges(p));    }    for (    OFPortDesc oldPort : this.portList) {      if (!newPortsByNumber.containsKey(oldPort.getPortNo())) {        PortChangeEvent ev=new PortChangeEvent(oldPort,PortChangeType.DELETE);        events.add(ev);      }    }    if (doUpdate) {      portsByName=Collections.unmodifiableMap(newPortsByName);      portsByNumber=Collections.unmodifiableMap(newPortsByNumber);      enabledPortList=Collections.unmodifiableList(newEnabledPortList);      enabledPortNumbers=Collections.unmodifiableList(newEnabledPortNumbers);      portList=Collections.unmodifiableList(newPortsList);    }    return events;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public static void copyStream(InputStream is,OutputStream os){  copyStream(is,os,-1,null);}  }
class C{  @Override protected void startup(){  ri=new ResourceEditorView(this,fileToLoad);  show(ri);  Image large=Toolkit.getDefaultToolkit().createImage(getClass().getResource("/application64.png"));  Image small=Toolkit.getDefaultToolkit().createImage(getClass().getResource("/application48.png"));  try {    getMainFrame().setIconImages(Arrays.asList(new Image[]{large,small}));  } catch (  Throwable err) {    getMainFrame().setIconImage(small);  }}  }
class C{  public static boolean interfaceOf(Object obj,Class<?> interfaceClass){  Class<?> objectClass=obj.getClass();  return interfaceOf(objectClass,interfaceClass);}  }
class C{  public long readLongBE() throws IOException {  return inputStream.readLong();}  }
class C{  @Override public int compareTo(Prefix o){  return o.value.compareTo(value);}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public UniformCostSearch(QueueSearch impl){  super(impl,createPathCostComparator());}  }
class C{  public SourceCode subCFMLString(int start,int count){  return new SourceCode(String.valueOf(text,start,count),writeLog,dialect);}  }
class C{  private void readObject(){}  }
class C{  public void addDominatedNetSize(long size){  dominatedNetSize+=size;}  }
class C{  @Override public void put(double[] val){  assert (val.length == elements.length);  wsum+=1.0;  for (int i=BitsUtil.nextSetBit(dims,0); i >= 0; i=BitsUtil.nextSetBit(dims,i + 1)) {    final double delta=val[i] - elements[i];    elements[i]+=delta / wsum;  }}  }
class C{  public boolean handles(Capability c){  return m_Capabilities.handles(c);}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public static boolean isNumeric(String number){  if (isNullOrEmpty(number)) {    return false;  }  try {    Double.parseDouble(number);    return true;  } catch (  NumberFormatException ex) {    return false;  }}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public void rejectedExecution(Runnable r,java.util.concurrent.ThreadPoolExecutor e){}  }
class C{  public static List executeOn(Connection conn,ExecutablePool pool,String region,List keys,InterestResultPolicy policy,boolean isDurable,boolean receiveUpdatesAsInvalidates,byte regionDataPolicy){  AbstractOp op=new RegisterInterestListOpImpl(region,keys,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  return (List)pool.executeOn(conn,op);}  }
class C{  public void test_ticket_1202e() throws Exception {  new TestHelper("ticket-1202-group03-modified2","ticket-1202-group03-modified2.rq","ticket-1202-group03-modified2.ttl","ticket-1202-group03-modified2.srx").runTest();}  }
class C{  public static int findOrCreateObjectLiteral(Object literal){  int off=findObjectLiteral(literal);  if (off != 0) {    return off;  } else {    Offset newOff=allocateReferenceSlot(false);    setSlotContents(newOff,literal);synchronized (objectLiterals) {      objectLiterals.put(literal,newOff.toInt());    }    return newOff.toInt();  }}  }
class C{  public VariationSelection(List<SelectionEntry> list){  super(new JFrame(),true);  this.list=list;  setLocationRelativeTo(null);  initComponents();  updateView();}  }
class C{  protected String computedFQCN(String className){  return "o.c.c.c" + className.substring(className.substring(0,className.lastIndexOf(".")).lastIndexOf("."));}  }
class C{  void addDummy(){  addDummyByte=true;}  }
class C{  public ImageView(Element elem){  super(elem);  fBounds=new Rectangle();  imageObserver=new ImageHandler();  state=RELOAD_FLAG | RELOAD_IMAGE_FLAG;}  }
class C{  public String nextLine(){  if (!hasNext()) {    throw new NoSuchElementException("No more lines");  }  String currentLine=cachedLine;  cachedLine=null;  return currentLine;}  }
class C{  protected Solution selectLeader(){  Solution leader1=leaders.get(PRNG.nextInt(leaders.size()));  Solution leader2=leaders.get(PRNG.nextInt(leaders.size()));  int flag=leaderComparator.compare(leader1,leader2);  if (flag < 0) {    return leader1;  } else   if (flag > 0) {    return leader2;  } else   if (PRNG.nextBoolean()) {    return leader1;  } else {    return leader2;  }}  }
class C{  protected void printAndSpace(final List<String> output){  print(output);  console.print("");}  }
class C{  public static DoubleMatrix2D minus(DoubleMatrix2D A,DoubleMatrix2D B){  return A.assign(B,F.minus);}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  try {    completeElement();    out.write(normalize(ch,start,length));  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  @Override public void paintBarShadow(Graphics2D g2,XYBarRenderer renderer,int row,int column,RectangularShape bar,RectangleEdge base,boolean pegShadow){  Paint itemPaint=renderer.getItemPaint(row,column);  if (itemPaint instanceof Color) {    Color c=(Color)itemPaint;    if (c.getAlpha() == 0) {      return;    }  }  RectangularShape shadow=createShadow(bar,renderer.getShadowXOffset(),renderer.getShadowYOffset(),base,pegShadow);  g2.setPaint(Color.gray);  g2.fill(shadow);}  }
class C{  public String addWorkflowStepsToAddBackendVolumes(Workflow workflow,String dependantStepId,ExportGroup exportGroup,ExportMask exportMask,Map<URI,Volume> volumeMap,URI varrayURI,StorageSystem vplex,StorageSystem array){  boolean isMaskingFirst=isMaskingFirst(array);  boolean isOpenStack=isOpenStack(array);  Map<URI,Integer> volumeLunIdMap=createVolumeMap(array.getId(),exportGroup,volumeMap);  _dbClient.persistObject(exportGroup);  String zoningStep=null;  String maskStepId=workflow.createStepId();  String reValidateExportMaskStep=workflow.createStepId();  ExportMaskAddVolumeCompleter createCompleter=new ExportMaskAddVolumeCompleter(exportGroup.getId(),exportMask.getId(),volumeLunIdMap,maskStepId);  List<URI> volumeList=new ArrayList<URI>();  volumeList.addAll(volumeLunIdMap.keySet());  ExportTaskCompleter rollbackCompleter=new ExportMaskOnlyRemoveVolumeCompleter(exportGroup.getId(),exportMask.getId(),volumeList,maskStepId);  String previousStepId=dependantStepId;  String zoningDependentStep=((isMaskingFirst && isOpenStack) ? reValidateExportMaskStep : ((isMaskingFirst && !isOpenStack) ? maskStepId : previousStepId));  if (exportMask.getCreatedBySystem()) {    _log.info(String.format("Creating zone references for Backend ExportMask %s",exportMask.getMaskName()));    List<URI> maskURIs=Collections.singletonList(exportMask.getId());    List<NetworkZoningParam> zoningParams=NetworkZoningParam.convertExportMasksToNetworkZoningParam(exportGroup.getId(),maskURIs,_dbClient);    HashSet<URI> volumes=new HashSet<URI>(volumeLunIdMap.keySet());    Workflow.Method zoneCreateMethod=_networkDeviceController.zoneExportAddVolumesMethod(exportGroup.getId(),maskURIs,volumes);    Workflow.Method zoneDeleteMethod=_networkDeviceController.zoneExportRemoveVolumesMethod(zoningParams,volumes);    zoningStep=workflow.createStep(ZONING_STEP,String.format("Adding zones for ExportMask %s",exportMask.getMaskName()),zoningDependentStep,nullURI,"network-system",_networkDeviceController.getClass(),zoneCreateMethod,zoneDeleteMethod,null);    if (!isMaskingFirst) {      previousStepId=zoningStep;    }  }  List<URI> initiatorURIs=new ArrayList<>();  if (exportMask.getInitiators() != null) {    initiatorURIs=new ArrayList<URI>(Collections2.transform(exportMask.getInitiators(),CommonTransformerFunctions.FCTN_STRING_TO_URI));  }  VplexBackEndMaskingOrchestrator orca=getOrch(array);  Workflow.Method updateMaskMethod=orca.createOrAddVolumesToExportMaskMethod(array.getId(),exportGroup.getId(),exportMask.getId(),volumeLunIdMap,initiatorURIs,createCompleter);  Workflow.Method rollbackMaskMethod=orca.deleteOrRemoveVolumesFromExportMaskMethod(array.getId(),exportGroup.getId(),exportMask.getId(),volumeList,initiatorURIs,rollbackCompleter);  workflow.createStep(EXPORT_STEP,"createOrAddVolumesToExportMask: " + exportMask.getMaskName(),previousStepId,array.getId(),array.getSystemType(),orca.getClass(),updateMaskMethod,rollbackMaskMethod,maskStepId);  if (isOpenStack) {    Workflow.Method updatezoningAndvalidateMaskMethod=((VplexCinderMaskingOrchestrator)orca).updateZoningMapAndValidateExportMaskMethod(varrayURI,_initiatorPortMap,exportMask.getId(),_directorToInitiatorIds,_idToInitiatorMap,_portWwnToClusterMap,vplex,array,_cluster);    workflow.createStep(REVALIDATE_MASK,"updatezoningAndrevalidateExportMask: " + exportMask.getMaskName(),maskStepId,array.getId(),array.getSystemType(),orca.getClass(),updatezoningAndvalidateMaskMethod,rollbackMaskMethod,reValidateExportMaskStep);  }  _log.info(String.format("VPLEX ExportGroup %s (%s) vplex %s varray %s",exportGroup.getLabel(),exportGroup.getId(),vplex.getId(),exportGroup.getVirtualArray()));  return (isMaskingFirst && zoningStep != null) ? zoningStep : maskStepId;}  }
class C{  public SingleLogoutService(String location,String responseLocation,String binding){  this.location=location;  this.responseLocation=responseLocation;  this.binding=binding;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'THREAD' ("+ "'TID' TEXT,"+ "'TITLE' TEXT,"+ "'PUID' TEXT,"+ "'FID' TEXT,"+ "'REPLIES' TEXT,"+ "'USER_NAME' TEXT,"+ "'TIME' TEXT,"+ "'FORUM_NAME' TEXT,"+ "'LIGHT_REPLY' INTEGER,"+ "'TYPE' INTEGER);");}  }
class C{  private static String handleServerError(Object err,Context context){  VolleyError error=(VolleyError)err;  NetworkResponse response=error.networkResponse;  if (response != null) {switch (response.statusCode) {case 404:case 422:case 401:      try {        HashMap<String,String> result=new Gson().fromJson(new String(response.data),new TypeToken<Map<String,String>>(){        }.getType());        if (result != null && result.containsKey("error")) {          return result.get("error");        }      } catch (      Exception e) {        e.printStackTrace();      }    return context.getResources().getString(R.string.general_error);default :  return context.getResources().getString(R.string.general_server_down);}}return context.getResources().getString(R.string.general_error);}  }
class C{  public AdempiereSystemError(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void removeEntity(final IEntity entity){  if (mapObjects.remove(entity) != null) {    needsRefresh=true;  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void validateEvaluationOrderAndName(List<Group> groups) throws AdeUsageException {  int maxEvalOrder=0;  HashSet<Integer> evalOrders=new HashSet<Integer>();  HashSet<String> usedNames=new HashSet<String>();  for (  Group group : groups) {    if (group.getEvaluationOrder() > maxEvalOrder) {      maxEvalOrder=group.getEvaluationOrder();    }    if (!evalOrders.add(group.getEvaluationOrder())) {      throw new AdeUsageException("Attempted to add/update groups to have duplicate evaluation orders");    }    if (!usedNames.add(group.getName().toUpperCase())) {      throw new AdeUsageException("Attempted to add/update group of type " + group.getGroupType().name() + " to have duplicate names");    }  }  if (evalOrders.size() != maxEvalOrder) {    throw new AdeUsageException("Attempted to add/update groups that have non-consecutive evaluation orders");  }}  }
class C{  public void addArrowHead(int directionType,int location,int tipWidth,int arrowLength){  setArrowHead(new OMArrowHead(directionType,location,tipWidth,arrowLength));}  }
class C{  public static long toPeriod(String value) throws ConfigException {  return toPeriod(value,1000);}  }
class C{  public QName(String qname,PrefixResolver resolver){  this(qname,resolver,false);}  }
class C{  @Override protected ShardsIterator shards(ClusterState clusterState,IndicesStatsRequest request,String[] concreteIndices){  return clusterState.routingTable().allShards(concreteIndices);}  }
class C{  protected void selectInsertUpdateValue(Connection connection,Object[] keys,Object[] values){  boolean exists=isExistsKey(connection,keys);  if (!exists) {    insertValue(connection,keys,values);  } else {    updateValue(connection,keys,values);  }}  }
class C{  @FromString public static Minutes parseMinutes(String periodStr){  if (periodStr == null) {    return Minutes.ZERO;  }  Period p=PARSER.parsePeriod(periodStr);  return Minutes.minutes(p.getMinutes());}  }
class C{  public static SparseBitmap createEmpty(){  return new SparseBitmap(EWAHCompressedBitmap.bitmapOf());}  }
class C{  public static void silentCloseOutputStream(OutputStream os){  try {    if (os != null) {      os.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  static void checkIdentifier(final String name,final int start,final int end,final String msg){  if (name == null || (end == -1 ? name.length() <= start : end <= start)) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (!Character.isJavaIdentifierStart(name.charAt(start))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);  }  int max=end == -1 ? name.length() : end;  for (int i=start + 1; i < max; ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);    }  }}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  public IndexMaintenanceException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static void main(String[] args){  runFilter(new AddExpression(),args);}  }
class C{  public Date sub(final int days){  return new Date(this.serialNumber - days);}  }
class C{  public T caseDeclaration(Declaration object){  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.310 -0400",hash_original_method="C7EC27F6C535E2F7646C4BA491ACC443",hash_generated_method="12A90F56CF900ACFEF3FEE04D7E1202E") public boolean allowIncomingProfileConnect(BluetoothDevice device,boolean allow){  mContext.enforceCallingOrSelfPermission(BLUETOOTH_ADMIN_PERM,"Need BLUETOOTH_ADMIN permission");  String address=device.getAddress();  if (!BluetoothAdapter.checkBluetoothAddress(address)) {    return false;  }  Integer data=getAuthorizationAgentRequestData(address);  if (data == null) {    Log.w(TAG,"allowIncomingProfileConnect(" + device + ") called but no native data available");    return false;  }  if (DBG)   log("allowIncomingProfileConnect: " + device + " : "+ allow+ " : "+ data);  return setAuthorizationNative(address,allow,data.intValue());}  }
class C{  public Builder notificationBody(String value){  notificationParams.put("body",value);  return this;}  }
class C{  protected void visitPrimitiveFieldAssertion(PrimitiveFieldAssertion assertion){  VariableReference source=assertion.getSource();  Object value=assertion.getValue();  Field field=assertion.getField();  String target="";  if (Modifier.isStatic(field.getModifiers())) {    target=getClassName(field.getDeclaringClass()) + "." + field.getName();  } else {    target=getVariableName(source) + "." + field.getName();  }  if (value == null) {    testCode+="assertNull(" + target + ");";  } else   if (value.getClass().equals(Long.class)) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ target+ ");";  } else   if (value.getClass().equals(Float.class)) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ target+ ", "+ NumberFormatter.getNumberString(Properties.FLOAT_PRECISION)+ ");";  } else   if (value.getClass().equals(Double.class)) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ target+ ", "+ NumberFormatter.getNumberString(Properties.DOUBLE_PRECISION)+ ");";  } else   if (value.getClass().equals(Character.class)) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ target+ ");";  } else   if (value.getClass().equals(String.class)) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ target+ ");";  } else   if (value.getClass().equals(Boolean.class)) {    Boolean flag=(Boolean)value;    if (flag) {      testCode+="assertTrue(";    } else {      testCode+="assertFalse(";    }    testCode+="" + target + ");";  } else   if (value.getClass().isEnum()) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ target+ ");";    getClassName(value.getClass());  } else   testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ target+ ");";}  }
class C{  public void disallowOut(int x,int y,int width,int height){  teleRules.disallowOut(x,y,width,height);}  }
class C{  public synchronized boolean isClosed(){  return closed;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:34.927 -0500",hash_original_method="F7CF19656BE8328A59A7894CA6394ACC",hash_generated_method="0B3728CF8B8DA8C27F7F140B7B7A8341") public X509Principal(boolean reverse,Hashtable lookUp,String dirName){  super(reverse,lookUp,dirName);}  }
class C{  public WritableRaster createCompatibleWritableRaster(){  return createCompatibleWritableRaster(width,height);}  }
class C{  private void checkOp(WritableRaster wr1,WritableRaster wr2,RasterOp op){  System.out.println("Checking " + op + " with rasters: \n    "+ wr1+ "\n    "+ wr2);  try {    WritableRaster r1=op.filter(fillRaster(wr1),null);    WritableRaster r2=op.filter(fillRaster(wr2),null);    compareRasters(r1,r2);  } catch (  ImagingOpException e) {    System.out.println("    Skip: Op is not supported: " + e);  }}  }
class C{  public static long copy(File src,long amount,File dst){  final int BUFFER_SIZE=1024;  long amountToRead=amount;  InputStream in=null;  OutputStream out=null;  try {    in=new BufferedInputStream(new FileInputStream(src));    out=new BufferedOutputStream(new FileOutputStream(dst));    byte[] buf=new byte[BUFFER_SIZE];    while (amountToRead > 0) {      int read=in.read(buf,0,(int)Math.min(BUFFER_SIZE,amountToRead));      if (read == -1)       break;      amountToRead-=read;      out.write(buf,0,read);    }  } catch (  IOException e) {  } finally {    IOUtils.closeQuietly(in);    if (out != null) {      try {        out.flush();      } catch (      IOException ignored) {      }    }    IOUtils.closeQuietly(out);  }  return amount - amountToRead;}  }
class C{  @Override public String push(final Request entry,CrawlProfile profile,final RobotsTxt robots) throws IOException, SpaceExceededException {  assert entry != null;  final byte[] hash=entry.url().hash();synchronized (this) {    if (this.double_push_check.has(hash))     return "double occurrence in double_push_check";    if (this.urlFileIndex.has(hash))     return "double occurrence in urlFileIndex";    if (this.double_push_check.size() > MAX_DOUBLE_PUSH_CHECK || MemoryControl.shortStatus())     this.double_push_check.clear();    this.double_push_check.put(hash);    if (profile != null && profile.domMaxPages() != Integer.MAX_VALUE && profile.domMaxPages() > 0) {      profile.domInc(entry.url().getHost());    }    final int s=this.urlFileIndex.size();    this.urlFileIndex.put(entry.toRow());    assert s < this.urlFileIndex.size() : "hash = " + ASCII.String(hash) + ", s = "+ s+ ", size = "+ this.urlFileIndex.size();    assert this.urlFileIndex.has(hash) : "hash = " + ASCII.String(hash);  }  robots.ensureExist(entry.url(),profile.getAgent(),true);  return null;}  }
class C{  public static StaticBipartiteGraph buildSmallTestBipartiteGraph(){  Long2ObjectMap<LongList> leftSideGraph=new Long2ObjectOpenHashMap<LongList>(3);  leftSideGraph.put(1,new LongArrayList(new long[]{2,3,4,5}));  leftSideGraph.put(2,new LongArrayList(new long[]{5,6,10}));  leftSideGraph.put(3,new LongArrayList(new long[]{7,8,5,9,2,10,11,1}));  Long2ObjectMap<LongList> rightSideGraph=new Long2ObjectOpenHashMap<LongList>(10);  rightSideGraph.put(1,new LongArrayList(new long[]{3}));  rightSideGraph.put(2,new LongArrayList(new long[]{1,3}));  rightSideGraph.put(3,new LongArrayList(new long[]{1}));  rightSideGraph.put(4,new LongArrayList(new long[]{1}));  rightSideGraph.put(5,new LongArrayList(new long[]{1,2,3}));  rightSideGraph.put(6,new LongArrayList(new long[]{2}));  rightSideGraph.put(7,new LongArrayList(new long[]{3}));  rightSideGraph.put(8,new LongArrayList(new long[]{3}));  rightSideGraph.put(9,new LongArrayList(new long[]{3}));  rightSideGraph.put(10,new LongArrayList(new long[]{2,3}));  rightSideGraph.put(11,new LongArrayList(new long[]{3}));  return new StaticBipartiteGraph(leftSideGraph,rightSideGraph);}  }
class C{  public static boolean equals(int[] array1,int[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  private void linkedModeLeft(){  fgActiveLinkedMode=null;  if (fInfoPopup != null) {    fInfoPopup.close();  }  ISourceViewer viewer=fEditor.getViewer();  if (viewer instanceof IEditingSupportRegistry) {    IEditingSupportRegistry registry=(IEditingSupportRegistry)viewer;    registry.unregister(fFocusEditingSupport);  }}  }
class C{  public long toLong(){  return value.toLongZeroExtend();}  }
class C{  public void init(HandlerInfo arg){  info=arg;}  }
class C{  public void resetComments(String project,String repository,String pullRequestId,StashDiffReport diffReport,StashUser sonarUser,StashClient stashClient){  try {    for (    StashComment comment : diffReport.getComments()) {      if (sonarUser.getId() != comment.getAuthor().getId()) {        continue;      } else       if (comment.containsPermanentTasks()) {        LOGGER.debug("Comment \"{}\" (path:\"{}\", line:\"{}\")" + "CANNOT be deleted because one of its tasks is not deletable.",comment.getId(),comment.getPath(),comment.getLine());        continue;      }      for (      StashTask task : comment.getTasks()) {        stashClient.deleteTaskOnComment(task);      }      stashClient.deletePullRequestComment(project,repository,pullRequestId,comment);    }    LOGGER.info("SonarQube issues reported to Stash by user \"{}\" have been reset",sonarUser.getName());  } catch (  StashClientException e) {    LOGGER.error("Unable to reset comment list",e);  }}  }
class C{  public boolean visitLocationPath(ExpressionOwner owner,LocPathIterator path){  return true;}  }
class C{  public static DefaultChainedExecutable createBatchCubingJob(CubeSegment newSegment,String submitter){  return batchEngine(newSegment).createBatchCubingJob(newSegment,submitter);}  }
class C{  public void repaintPanel(){  removeAll();  initializeLayout();  repaint();}  }
class C{  public Stacking(int folds,Regressor aggregatingRegressor,List<Regressor> baseRegressors){  setFolds(folds);  this.aggregatingRegressor=aggregatingRegressor;  this.baseRegressors=baseRegressors;  boolean allClassifiers=aggregatingRegressor instanceof Classifier;  for (  Regressor reg : baseRegressors)   if (!(reg instanceof Classifier))   allClassifiers=false;  if (allClassifiers) {    aggregatingClassifier=(Classifier)aggregatingRegressor;    baseClassifiers=(List)baseRegressors;  }}  }
class C{  public Entry entry() throws IOException {  checkKey();  return new Entry();}  }
class C{  public void testSelectOneInvalidValue() throws Exception {  HtmlPage page=getPage("/faces/jsp/selectOneInvalidValue.jsp");  List list=getAllElementsOfGivenClass(page,null,HtmlSubmitInput.class);  HtmlSubmitInput button=(HtmlSubmitInput)list.get(0);  list=getAllElementsOfGivenClass(page,null,HtmlRadioButtonInput.class);  HtmlRadioButtonInput radio=(HtmlRadioButtonInput)list.get(0);  radio.setChecked(true);  page=(HtmlPage)button.click();  ResourceBundle messages=ResourceBundle.getBundle("javax.faces.Messages");  String message=messages.getString("javax.faces.component.UIInput.REQUIRED");  assertTrue(-1 == page.asText().indexOf(message));}  }
class C{  public static ServiceCommandError notSupported(){  return new NotSupportedServiceCommandError();}  }
class C{  public void java_lang_Class_getMethod0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getMethodObject());}  }
class C{  public static byte[] toByteArray(File file) throws IOException {  FileInputStream in=null;  try {    in=new FileInputStream(file);    return readFile(in,in.getChannel().size());  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  private boolean strictRRpolicy(Map<Integer,List<InstanceId>> allocation,ArrayList<Container> containers,InstanceId instanceId,Resource instanceResource){  if (placeResourceCompliantRRInstance(containers,containerId,new PackingPlan.InstancePlan(instanceId,instanceResource))) {    allocation.get(containerId).add(instanceId);    containerId=(containerId == numContainers) ? 1 : containerId + 1;    return true;  } else {    containerId=1;    return false;  }}  }
class C{  public static void addPedigreeFields(VcfHeader vcf,GenomeRelationships gr,String[] outputSamples){  final Relationship[] derived=gr.relationships(Relationship.RelationshipType.ORIGINAL_DERIVED);  if (derived.length > 0 && derived.length == 1 && gr.genomes().length == 2 && derived[0].getProperty("contamination") != null) {    final Sex sex=gr.getSex(derived[0].first());    String sexStr="";    if (sex == Sex.FEMALE || sex == Sex.MALE) {      sexStr=",Sex=" + sex.toString();    }    vcf.addLine(VcfHeader.SAMPLE_STRING + "=<ID=" + derived[0].first()+ ",Genomes="+ derived[0].first()+ ",Mixture=1.0"+ sexStr+ ",Description=\"Original genome\">");    final double con=Double.parseDouble(derived[0].getProperty("contamination"));    final String mixture=Utils.realFormat(con,2) + VcfUtils.VALUE_SEPARATOR + Utils.realFormat(1 - con,2);    vcf.addLine(VcfHeader.SAMPLE_STRING + "=<ID=" + derived[0].second()+ ",Genomes="+ derived[0].first()+ VcfUtils.VALUE_SEPARATOR+ derived[0].second()+ ",Mixture="+ mixture+ sexStr+ ",Description=\"Original genome;Derived genome\">");    vcf.addLine(VcfHeader.PEDIGREE_STRING + "=<Derived=" + derived[0].second()+ ",Original="+ derived[0].first()+ ">");  } else {    final StringBuilder diseased=new StringBuilder();    for (    final String genome : outputSamples) {      final Sex sex=gr.getSex(genome);      if (sex == Sex.FEMALE || sex == Sex.MALE) {        vcf.addLine(VcfHeader.SAMPLE_STRING + "=<ID=" + genome+ ",Sex="+ sex.toString()+ ">");      }      if (gr.isDiseased(genome)) {        diseased.append(",").append(genome);      }    }    if (diseased.length() > 0) {      vcf.addLine(VcfHeader.META_STRING + "diseased=" + diseased.substring(1));    }    if (gr.relationships(Relationship.RelationshipType.PARENT_CHILD).length > 0) {      final Set<Family> families=Family.getFamilies(gr,true,null);      for (      final Family f : families) {        for (        final String child : f.getChildren()) {          if (isOutputGenome(outputSamples,child) || isOutputGenome(outputSamples,f.getMother()) || isOutputGenome(outputSamples,f.getFather())) {            vcf.addLine(VcfHeader.PEDIGREE_STRING + "=<Child=" + child+ ",Mother="+ f.getMother()+ ",Father="+ f.getFather()+ ">");          }        }      }      for (      String child : gr.genomes()) {        final Relationship[] relations=gr.relationships(new RelationshipTypeFilter(RelationshipType.PARENT_CHILD),new SecondInRelationshipFilter(child));        if (relations.length == 1) {          final String parent=relations[0].first();          if (isOutputGenome(outputSamples,child) || isOutputGenome(outputSamples,parent)) {            if (gr.getSex(parent) == Sex.FEMALE) {              vcf.addLine(VcfHeader.PEDIGREE_STRING + "=<Child=" + child+ ",Mother="+ parent+ ">");            } else {              vcf.addLine(VcfHeader.PEDIGREE_STRING + "=<Child=" + child+ ",Father="+ parent+ ">");            }          }        }      }    }    for (    Relationship od : derived) {      if (isOutputGenome(outputSamples,od.first()) || isOutputGenome(outputSamples,od.second())) {        vcf.addLine(VcfHeader.PEDIGREE_STRING + "=<Derived=" + od.second()+ ",Original="+ od.first()+ ">");      }    }  }}  }
class C{  public SizeSequence(int numEntries,int value){  this();  insertEntries(0,numEntries,value);}  }
class C{  public boolean isFull(){  return map.isFull();}  }
class C{  @Override public void actionPerformed(ActionEvent e){  try {    if (e.getActionCommand().equals("z")) {      if (undo != null && undo.canUndo()) {        undo.undo();      }    } else     if (e.getActionCommand().equals("y")) {      if (undo != null && undo.canRedo()) {        undo.redo();      }    }  } catch (  CannotUndoException|CannotRedoException ex) {  }}  }
class C{  private void deleteKVTable(){  execNonQuery(SQL_DELETE_TABLE,new String[]{TABLE_NAME});}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("filighttestdata.zip"),"filight.txt");}  }
class C{  private int guessCurrencyTotal(ArrayList<Card> list){  int money=0;  for (  Card card : list) {    if (card instanceof TreasureCard) {      money+=((TreasureCard)card).getValue();    }    if (card instanceof ActionCard) {      ActionCard ac=(ActionCard)card;      money+=ac.getAddGold();    }    if (card.equals(Cards.venture)) {      money+=1;    }    if (card.equals(Cards.philosophersStone)) {      money+=(list.size() / 20);    }    if (card.equals(Cards.bank)) {      money+=2;    }    if (card.equals(Cards.foolsGold)) {      money+=(Util.getCardCount(list,Cards.foolsGold) - 1);    }  }  if (this.strategy == StrategyOption.Minion) {    money+=Math.round(1.6 * Util.getCardCount(list,Cards.minion));  }  return money;}  }
class C{  private static void addAllComplexTypeChildren(CarbonDimension dimension,StringBuilder dimString,String parent){  dimString.append(dimension.getColName() + CarbonCommonConstants.COLON_SPC_CHARACTER + dimension.getDataType()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ parent+ CarbonCommonConstants.COLON_SPC_CHARACTER+ dimension.getColumnId()+ CarbonCommonConstants.HASH_SPC_CHARACTER);  for (int i=0; i < dimension.getNumberOfChild(); i++) {    CarbonDimension childDim=dimension.getListOfChildDimensions().get(i);    if (childDim.getNumberOfChild() > 0) {      addAllComplexTypeChildren(childDim,dimString,dimension.getColName());    } else {      dimString.append(childDim.getColName() + CarbonCommonConstants.COLON_SPC_CHARACTER + childDim.getDataType()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ dimension.getColName()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ childDim.getColumnId()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ childDim.getOrdinal()+ CarbonCommonConstants.HASH_SPC_CHARACTER);    }  }}  }
class C{  public String namespace(){  return theType.namespace();}  }
class C{  static Instruction arrayStoreCheck(Instruction s,IR ir,boolean couldBeNull){  RegisterOperand guardResult=StoreCheck.getGuardResult(s);  Operand arrayRef=StoreCheck.getClearRef(s);  Operand elemRef=StoreCheck.getClearVal(s);  Operand guard=StoreCheck.getClearGuard(s);  if (elemRef instanceof NullConstantOperand) {    Instruction continueAt=s.prevInstructionInCodeOrder();    s.remove();    return continueAt;  }  BasicBlock myBlock=s.getBasicBlock();  BasicBlock contBlock=myBlock.splitNodeAt(s,ir);  BasicBlock trapBlock=myBlock.createSubBlock(s.getBytecodeIndex(),ir,.0001f);  BasicBlock curBlock=myBlock;  Move.mutate(s,GUARD_MOVE,guardResult,new TrueGuardOperand());  Instruction trap=Trap.create(TRAP,null,TrapCodeOperand.StoreCheck());  trap.copyPosition(s);  trapBlock.appendInstruction(trap);  ir.cfg.addLastInCodeOrder(trapBlock);  Operand rhsGuard=guard;  if (couldBeNull) {    rhsGuard=ir.regpool.makeTempValidation();    contBlock.prependInstruction(Binary.create(GUARD_COMBINE,guardResult.copyRO(),guardResult.copyRO(),rhsGuard.copy()));    curBlock.appendInstruction(IfCmp.create(REF_IFCMP,rhsGuard.asRegister(),elemRef,new NullConstantOperand(),ConditionOperand.EQUAL(),contBlock.makeJumpTarget(),new BranchProfileOperand()));    curBlock.insertOut(contBlock);    curBlock=advanceBlock(s.getBytecodeIndex(),curBlock,ir);  }  RVMType compType=arrayRef.getType().peekType();  if (compType != null && !compType.isJavaLangObjectType()) {    if (compType.getDimensionality() == 1) {      RVMClass etc=(RVMClass)compType.asArray().getElementType();      if (etc.isResolved() && etc.isFinal()) {        if (VM.VerifyAssertions)         VM._assert(!etc.isInterface());        Operand rhsTIB=getTIB(curBlock.lastInstruction(),ir,elemRef.copy(),rhsGuard.copy());        Operand etTIB=getTIB(curBlock.lastInstruction(),ir,etc);        curBlock.appendInstruction(IfCmp.create(REF_IFCMP,guardResult.copyRO(),rhsTIB,etTIB,ConditionOperand.NOT_EQUAL(),trapBlock.makeJumpTarget(),BranchProfileOperand.never()));        curBlock.insertOut(trapBlock);        curBlock.insertOut(contBlock);        ir.cfg.linkInCodeOrder(curBlock,contBlock);        return curBlock.lastInstruction();      }    }    Operand lhsTIB=getTIB(curBlock.lastInstruction(),ir,arrayRef,guard);    if (((arrayRef instanceof RegisterOperand) && ((RegisterOperand)arrayRef).isDeclaredType()) || compType == RVMType.JavaLangObjectArrayType) {      Operand declTIB=getTIB(curBlock.lastInstruction(),ir,compType);      curBlock.appendInstruction(IfCmp.create(REF_IFCMP,guardResult.copyRO(),declTIB,lhsTIB,ConditionOperand.EQUAL(),contBlock.makeJumpTarget(),new BranchProfileOperand()));      curBlock.insertOut(contBlock);      curBlock=advanceBlock(s.getBytecodeIndex(),curBlock,ir);    }    Operand rhsTIB=getTIB(curBlock.lastInstruction(),ir,elemRef.copy(),rhsGuard.copy());    RegisterOperand lhsElemTIB=InsertUnary(curBlock.lastInstruction(),ir,GET_ARRAY_ELEMENT_TIB_FROM_TIB,TypeReference.TIB,lhsTIB.copy());    curBlock.appendInstruction(IfCmp.create(REF_IFCMP,guardResult.copyRO(),rhsTIB,lhsElemTIB,ConditionOperand.EQUAL(),contBlock.makeJumpTarget(),new BranchProfileOperand()));    curBlock.insertOut(contBlock);    curBlock=advanceBlock(s.getBytecodeIndex(),curBlock,ir);    if (compType.getDimensionality() == 1) {      RVMClass etc=(RVMClass)compType.asArray().getElementType();      if (etc.isResolved() && !etc.isInterface() && !etc.isJavaLangObjectType()) {        RegisterOperand lhsElemType=InsertUnary(curBlock.lastInstruction(),ir,GET_TYPE_FROM_TIB,TypeReference.Type,lhsElemTIB.copyU2U());        RegisterOperand rhsSuperclassIds=InsertUnary(curBlock.lastInstruction(),ir,GET_SUPERCLASS_IDS_FROM_TIB,TypeReference.ShortArray,rhsTIB.copy());        RegisterOperand lhsElemDepth=getField(curBlock.lastInstruction(),ir,lhsElemType,Entrypoints.depthField,TG());        RegisterOperand rhsSuperclassIdsLength=InsertGuardedUnary(curBlock.lastInstruction(),ir,ARRAYLENGTH,TypeReference.Int,rhsSuperclassIds.copyD2U(),TG());        curBlock.appendInstruction(IfCmp.create(INT_IFCMP,guardResult.copyRO(),lhsElemDepth,rhsSuperclassIdsLength,ConditionOperand.GREATER_EQUAL(),trapBlock.makeJumpTarget(),BranchProfileOperand.never()));        curBlock.insertOut(trapBlock);        curBlock=advanceBlock(s.getBytecodeIndex(),curBlock,ir);        RegisterOperand lhsElemId=getField(curBlock.lastInstruction(),ir,lhsElemType.copyD2U(),Entrypoints.idField,TG());        RegisterOperand refCandidate=ir.regpool.makeTemp(TypeReference.Short);        LocationOperand loc=new LocationOperand(TypeReference.Short);        if (LOWER_ARRAY_ACCESS) {          RegisterOperand lhsDepthOffset=insertBinary(curBlock.lastInstruction(),ir,INT_SHL,TypeReference.Int,lhsElemDepth.copyD2U(),IC(1));          lhsDepthOffset=InsertUnary(curBlock.lastInstruction(),ir,INT_2ADDRZerExt,TypeReference.Offset,lhsDepthOffset.copy());          curBlock.appendInstruction(Load.create(USHORT_LOAD,refCandidate,rhsSuperclassIds,lhsDepthOffset,loc,TG()));        } else {          curBlock.appendInstruction(ALoad.create(USHORT_ALOAD,refCandidate,rhsSuperclassIds,lhsElemDepth.copyRO(),loc,TG()));        }        curBlock.appendInstruction(IfCmp.create(INT_IFCMP,guardResult.copyRO(),refCandidate.copyD2U(),lhsElemId,ConditionOperand.NOT_EQUAL(),trapBlock.makeJumpTarget(),BranchProfileOperand.never()));        curBlock.insertOut(trapBlock);        curBlock.insertOut(contBlock);        ir.cfg.linkInCodeOrder(curBlock,contBlock);        return curBlock.lastInstruction();      }    }  }  RVMMethod target=Entrypoints.checkstoreMethod;  Instruction call=Call.create2(CALL,null,AC(target.getOffset()),MethodOperand.STATIC(target),rhsGuard.copy(),arrayRef.copy(),elemRef.copy());  call.copyPosition(s);  curBlock.appendInstruction(call);  curBlock.insertOut(contBlock);  ir.cfg.linkInCodeOrder(curBlock,contBlock);  return callHelper(call,ir);}  }
class C{  private void addBefore(Entry existingEntry){  after=existingEntry;  before=existingEntry.before;  before.after=this;  after.before=this;}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.CHARACTER_CLASS_ELEMENT;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.603 -0500",hash_original_method="DC558EBD989E1315B12793B36376A79E",hash_generated_method="A454123B2928F5DAF408E04F1BFD9C75") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onCellLocationChanged(CellLocation location){}  }
class C{  public void go(Writer writer) throws IOException {  go(new JCalWriter(writer,wrapInArray()));}  }
class C{  private GrantEntry parseGrantEntry(Hashtable<String,Vector<String>> processedPermissions) throws ParsingException, IOException {  GrantEntry e=new GrantEntry();  match("grant");  match("{");  while (!peek("}")) {    if (peek("Permission")) {      CryptoPermissionEntry pe=parsePermissionEntry(processedPermissions);      e.add(pe);      match(";");    } else {      throw new ParsingException(st.lineno(),"expected permission entry");    }  }  match("}");  return e;}  }
class C{  public boolean hasIdleExpired(long now,long timeoutNanos){synchronized (this) {    if (isActive()) {      return false;    } else {      return remainingIdle(now,timeoutNanos) <= 0;    }  }}  }
class C{  public List<PropertySpec> buildInventoryPropertySpec(){  PropertySpec pSpecDatacenter=new PropertySpec();  pSpecDatacenter.setType("Datacenter");  pSpecDatacenter.getPathSet().add("hostFolder");  PropertySpec pSpecHost=new PropertySpec();  pSpecHost.setType("HostSystem");  pSpecHost.getPathSet().add("name");  pSpecHost.getPathSet().add("datastore");  pSpecHost.getPathSet().add("runtime.connectionState");  pSpecHost.getPathSet().add("runtime.powerState");  pSpecHost.getPathSet().add("runtime.healthSystemRuntime");  pSpecHost.getPathSet().add("summary.hardware.cpuMhz");  pSpecHost.getPathSet().add("summary.hardware.memorySize");  pSpecHost.getPathSet().add("summary.hardware.numCpuCores");  pSpecHost.getPathSet().add("summary.quickStats.distributedCpuFairness");  pSpecHost.getPathSet().add("summary.quickStats.distributedMemoryFairness");  pSpecHost.getPathSet().add("summary.quickStats.overallCpuUsage");  pSpecHost.getPathSet().add("summary.quickStats.overallMemoryUsage");  PropertySpec pSpecVM=new PropertySpec();  pSpecVM.setType("VirtualMachine");  pSpecVM.getPathSet().add("name");  pSpecVM.getPathSet().add("runtime.host");  pSpecVM.getPathSet().add("summary.config.template");  pSpecVM.getPathSet().add("summary.config.numCpu");  pSpecVM.getPathSet().add("summary.config.memorySizeMB");  PropertySpec pSpecDataStore=new PropertySpec();  pSpecDataStore.setType("Datastore");  pSpecDataStore.getPathSet().add("host");  pSpecDataStore.getPathSet().add("summary.name");  pSpecDataStore.getPathSet().add("summary.capacity");  pSpecDataStore.getPathSet().add("summary.freeSpace");  ArrayList<PropertySpec> result=new ArrayList<PropertySpec>();  result.add(pSpecDatacenter);  result.add(pSpecHost);  result.add(pSpecVM);  result.add(pSpecDataStore);  return result;}  }
class C{  public void paint(Graphics g,Shape a){  load();  super.paint(g,a);}  }
class C{  public TopologyAPI.Topology trimTopology(TopologyAPI.Topology topology){  TopologyAPI.Topology.Builder builder=TopologyAPI.Topology.newBuilder().mergeFrom(topology);  for (  TopologyAPI.Spout.Builder spout : builder.getSpoutsBuilderList()) {    spout.getCompBuilder().clearSerializedObject();  }  for (  TopologyAPI.Bolt.Builder bolt : builder.getBoltsBuilderList()) {    bolt.getCompBuilder().clearSerializedObject();  }  return builder.build();}  }
class C{  public World loadWorld(@NonNull String worldName,@NonNull World.Environment environment){  try {    return loadWorld(null,worldName,environment);  } catch (  WorldDoesNotExistException e) {    throw new RuntimeException("null loader resulted in WorldDoesNotExist?! Impossible.",e);  }}  }
class C{  public static PaymentInformationException convertToApi(org.oscm.internal.types.exception.PaymentInformationException oldEx){  return convertExceptionToApi(oldEx,PaymentInformationException.class);}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset){  if (dataset == null) {    return null;  }  boolean allItemsNull=true;  double minimum=0.0;  double maximum=0.0;  int columnCount=dataset.getColumnCount();  for (int row=0; row < dataset.getRowCount(); row++) {    double runningTotal=0.0;    for (int column=0; column <= columnCount - 1; column++) {      Number n=dataset.getValue(row,column);      if (n != null) {        allItemsNull=false;        double value=n.doubleValue();        if (column == columnCount - 1) {          runningTotal=value;        } else {          runningTotal=runningTotal + value;        }        minimum=Math.min(minimum,runningTotal);        maximum=Math.max(maximum,runningTotal);      }    }  }  if (!allItemsNull) {    return new Range(minimum,maximum);  } else {    return null;  }}  }
class C{  public void testIntValue(){  LongAccumulator ai=new LongAccumulator(null,0L);  assertEquals(0,ai.intValue());  ai.accumulate(1);  assertEquals(1,ai.intValue());}  }
class C{  public BasicEntity(final Animation anim,final OdorWorld world){  super(anim,world);}  }
class C{  protected int addPoints(ShapefileRecord record,ByteBuffer buffer,int numPoints){  DoubleBuffer pointBuffer;  int pos=buffer.position();  int limit=buffer.position() + 2 * WWBufferUtil.SIZEOF_DOUBLE * numPoints;  try {    buffer.limit(limit);    pointBuffer=this.readPoints(record,buffer);  }  finally {    buffer.clear();    buffer.position(limit);  }  if (this.mappedShpBuffer != null) {    if (this.pointBuffer == null) {      ByteBuffer buf=this.mappedShpBuffer.duplicate();      buf.order(ByteOrder.LITTLE_ENDIAN);      buf.clear();      this.pointBuffer=new VecBufferBlocks(2,AVKey.FLOAT64,buf);    }    return ((VecBufferBlocks)this.pointBuffer).addBlock(pos,limit - 1);  } else {    if (this.pointBuffer == null) {      int totalPointsEstimate=this.computeNumberOfPointsEstimate();      DoubleBuffer doubleBuffer;      try {        doubleBuffer=Buffers.newDirectDoubleBuffer(2 * totalPointsEstimate);      } catch (      OutOfMemoryError e) {        throw new WWRuntimeException(Logging.getMessage("SHP.OutOfMemoryAllocatingPointBuffer",this.getStringValue(AVKey.DISPLAY_NAME)),e);      }      this.pointBuffer=new VecBufferSequence(new VecBuffer(2,new BufferWrapper.DoubleBufferWrapper(doubleBuffer)));    }    VecBuffer vecBuffer=new VecBuffer(2,new BufferWrapper.DoubleBufferWrapper(pointBuffer));    return ((VecBufferSequence)this.pointBuffer).append(vecBuffer);  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public static Color stringToColor(String value){  try {    if (!value.equals("")) {      String[] s=value.split(",");      if (s.length == 3) {        int red=Integer.parseInt(s[0]);        int green=Integer.parseInt(s[1]);        int blue=Integer.parseInt(s[2]);        return new Color(red,green,blue);      }    }  } catch (  NumberFormatException ex) {    return null;  }catch (  IllegalArgumentException ex) {    return null;  }  return null;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DefaultHeatMapDataset)) {    return false;  }  DefaultHeatMapDataset that=(DefaultHeatMapDataset)obj;  if (this.xSamples != that.xSamples) {    return false;  }  if (this.ySamples != that.ySamples) {    return false;  }  if (this.minX != that.minX) {    return false;  }  if (this.maxX != that.maxX) {    return false;  }  if (this.minY != that.minY) {    return false;  }  if (this.maxY != that.maxY) {    return false;  }  if (!DataUtilities.equal(this.zValues,that.zValues)) {    return false;  }  return true;}  }
class C{  public void removeSelectionPaths(TreePath[] paths){  this.getSelectionModel().removeSelectionPaths(paths);}  }
class C{  public static boolean shuffle(Object[] objArray){  if (objArray == null) {    return false;  }  return shuffle(objArray,getRandom(objArray.length));}  }
class C{  public static boolean isInRange(long value,Long minValue,Long maxValue){  return !((minValue != null && value < minValue.longValue()) || (maxValue != null && value > maxValue.longValue()));}  }
class C{  public static synchronized void resetHostNameCache(){  hostNames.clear();}  }
class C{  public void postOpenInit(){  if (persistentData.isEmpty()) {    return;  }  vectorToTokenDict=new NTree(persistentData.get(0).getDimension());  for (  DataPoint point : persistentData) {    vectorToTokenDict.add(point);  }}  }
class C{  final V remove(Object key,int hash,Object value){  if (!tryLock())   scanAndLock(key,hash);  V oldValue=null;  try {    HashEntry<K,V>[] tab=table;    int index=(tab.length - 1) & hash;    HashEntry<K,V> e=entryAt(tab,index);    HashEntry<K,V> pred=null;    while (e != null) {      K k;      HashEntry<K,V> next=e.next;      if ((k=e.key) == key || (e.hash == hash && key.equals(k))) {        V v=e.value;        if (value == null || value == v || value.equals(v)) {          if (pred == null)           setEntryAt(tab,index,next); else           pred.setNext(next);          ++modCount;          --count;          oldValue=v;        }        break;      }      pred=e;      e=next;    }  }  finally {    unlock();  }  return oldValue;}  }
class C{  public EntityMigrationBuilder addAssociation(String association,String defaultReference){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new AddAssociation(association,defaultReference)));  return this;}  }
class C{  public ScoreSet scores(int[] features,double[] values){  return null;}  }
class C{  @Override public String toString(){  StringBuilder sRep=new StringBuilder();  sRep.append('(');  sRep.append(articleID);  sRep.append(", ");  sRep.append(revisionCounter);  sRep.append(", ");  sRep.append(timeStamp);  sRep.append(", ");  sRep.append(revisionId);  if (revisionText != null) {    sRep.append(", ");    sRep.append(revisionText.length());  }  sRep.append(')');  return sRep.toString();}  }
class C{  private static void arrayToString(final StringBuilder sb,final Object fieldObj,final Class<?> fieldClass,final String prefix){  final Class<?> componentClass=fieldClass.getComponentType();  final int length=Array.getLength(fieldObj);  sb.append(prefix).append("[").append(length).append("]");  if (componentClass.isPrimitive()) {    for (int i=0; i < length; i++) {      if (i % 10 == 0) {        sb.append(LS).append(prefix).append("[").append(i).append("] ");      } else {        sb.append(", ");      }      final Object objC=Array.get(fieldObj,i);      if (componentClass == Double.TYPE) {        final Double objD=(Double)objC;        sb.append(Utils.realFormat(objD,4));      } else       if (componentClass == Float.TYPE) {        final Float objF=(Float)objC;        sb.append(Utils.realFormat(objF,4));      } else {        sb.append(objC);      }    }  } else {    for (int i=0; i < length; i++) {      sb.append(LS).append(prefix).append("[").append(i).append("] ");      final Object obj=Array.get(fieldObj,i);      if (obj == null) {        sb.append("null");        continue;      }      final Class<?> clazz=obj.getClass();      if (toStringDeclared(clazz)) {        sb.append(prefix);        sb.append(obj.toString());        continue;      }      toString(obj,sb,prefix + "  ");    }  }}  }
class C{  public int findColumn(String columnName) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.699 -0400",hash_original_method="01C3313BC37C00736B149DF30B7D5941",hash_generated_method="A0FFC05DE73F23FB5C1C61C551AC1D19") final void forgetNext(){  UNSAFE.putObject(this,nextOffset,this);}  }
class C{  public void checkAndSetupStreamsDrawer(){  setupListViewAdapter();}  }
class C{  public CommandLine clear(){  line.clear();  return this;}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public boolean isStandalone(){  return standalone;}  }
class C{  public static int lineCountFor(String s){  int i=0;  int lineNum=0;  int length=s.length();  char c='\0';  while (i < length) {    c=s.charAt(i++);    if (c == '\n' || c == '\r') {      lineNum++;      if (c == '\r' && i < length && s.charAt(i) == '\n')       i++;    }  }  return lineNum;}  }
class C{  public Parameterization(Parameterization copyFrom){  this.name=copyFrom.name;  this.args=new LinkedList<>(copyFrom.args);  this.expectedToPass=copyFrom.expectedToPass;}  }
class C{  public boolean equivalent(INode n){  if (n == null) {    return false;  }  FreeCellNode state=(FreeCellNode)n;  for (int i=0; i < 4; i++) {    if (state.freeEncoding[i] != freeEncoding[i])     return false;    if (state.foundationEncoding[i] != foundationEncoding[i])     return false;  }  for (int i=0; i < 8; i++) {    if (state.cols[order[i]].cards[0] != cols[order[i]].cards[0]) {      return false;    }  }  short[] key1=(short[])state.key();  short[] key2=(short[])this.key();  for (int i=0; i < key1.length; i++) {    if (key1[i] != key2[i]) {      return false;    }  }  return true;}  }
class C{  @Override public boolean needScratch(Register r,Instruction s){  if (s.operator() == YIELDPOINT_OSR)   return false;  return true;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMLAW");  translateAll(environment,instruction,"SMLAW",instructions);}  }
class C{  @Override public DummyBuilderClient builder(){  return builderClient;}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  SwitchStatement s=(SwitchStatement)clone();  s.expr=expr.copyInline(ctx);  s.args=new Statement[args.length];  for (int i=0; i < args.length; i++) {    if (args[i] != null) {      s.args[i]=args[i].copyInline(ctx,valNeeded);    }  }  return s;}  }
class C{  public static <T>Future<T> submit(Callable<T> task){  if (THREAD_POOL.isShutdown() || THREAD_POOL.isTerminated()) {    THREAD_POOL=Executors.newCachedThreadPool(new CustomThreadFactory(new CustomExceptionHandler()));  }  return THREAD_POOL.submit(task);}  }
class C{  public URLRasterLocation(double latitude,double longitude,String name,URL iconURL){  super(latitude,longitude,name,getIconRaster(latitude,longitude,iconURL));  if (location instanceof OMRaster) {    setHorizontalLabelBuffer((((OMRaster)location).getWidth() / 2) + SPACING);  }}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  protected TagValue addValue(Tag tag,String key,ContentNode contents){  return addValue(tag,key,Collections.singleton(contents));}  }
class C{  public static boolean isAtApiLevel(int apiLevel){  return Build.VERSION.SDK_INT >= apiLevel;}  }
class C{  public void addClassNodeToCompile(ClassNode node,SourceUnit location){  classesToCompile.put(node.getName(),node);  classNameToSource.put(node.getName(),location);}  }
class C{  protected void processMessage(Message message){}  }
class C{  public static void remove(HeartbeatListener artery){  aorta.removeConcurrent(artery);}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public void handleDoubleTap(float lastTouchX,float lastTouchY){  mInitialZoomOverview=false;  WebSettingsClassic settings=mWebView.getSettings();  if (!isDoubleTapEnabled()) {    return;  }  setZoomCenter(lastTouchX,lastTouchY);  mAnchorX=mWebView.viewToContentX((int)lastTouchX + mWebView.getScrollX());  mAnchorY=mWebView.viewToContentY((int)lastTouchY + mWebView.getScrollY());  settings.setDoubleTapToastCount(0);  dismissZoomPicker();  final float newTextWrapScale;  if (settings.getUseFixedViewport()) {    newTextWrapScale=Math.max(mActualScale,getReadingLevelScale());  } else {    newTextWrapScale=mActualScale;  }  final boolean firstTimeReflow=!exceedsMinScaleIncrement(mActualScale,mTextWrapScale);  if (firstTimeReflow || mInZoomOverview) {    mTextWrapScale=newTextWrapScale;  }  if (settings.isNarrowColumnLayout() && exceedsMinScaleIncrement(mTextWrapScale,newTextWrapScale) && !firstTimeReflow&& !mInZoomOverview) {    mTextWrapScale=newTextWrapScale;    refreshZoomScale(true);  } else   if (!mInZoomOverview && willScaleTriggerZoom(getZoomOverviewScale())) {    if (mTextWrapScale > getReadingLevelScale()) {      mTextWrapScale=getReadingLevelScale();      refreshZoomScale(true);    }    zoomToOverview();  } else {    zoomToReadingLevel();  }}  }
class C{  public static MirrorType fromOrdinal(int ordinal){  return VALUES[ordinal];}  }
class C{  protected void doReshapeShape(ControlPointMarker controlPoint,Position terrainPosition){  if (this.getShape() instanceof Arrow)   this.reshapeArrow(controlPoint,terrainPosition); else   super.doReshapeShape(controlPoint,terrainPosition);}  }
class C{  protected final void unexpectedEndOfInput(){  if (cacheRequest != null) {    cacheRequest.abort();  }  httpEngine.release(true);}  }
class C{  public Vector3f add(float addX,float addY,float addZ){  return new Vector3f(x + addX,y + addY,z + addZ);}  }
class C{  public Result init(long timeout){  Result result=acquireLock(timeout);  if (result != null) {    return result;  }  HardwareConfig hardwareConfig=mParams.getHardwareConfig();  DisplayMetrics metrics=new DisplayMetrics();  metrics.densityDpi=metrics.noncompatDensityDpi=hardwareConfig.getDensity().getDpiValue();  metrics.density=metrics.noncompatDensity=metrics.densityDpi / (float)DisplayMetrics.DENSITY_DEFAULT;  metrics.scaledDensity=metrics.noncompatScaledDensity=metrics.density;  metrics.widthPixels=metrics.noncompatWidthPixels=hardwareConfig.getScreenWidth();  metrics.heightPixels=metrics.noncompatHeightPixels=hardwareConfig.getScreenHeight();  metrics.xdpi=metrics.noncompatXdpi=hardwareConfig.getXdpi();  metrics.ydpi=metrics.noncompatYdpi=hardwareConfig.getYdpi();  RenderResources resources=mParams.getResources();  mContext=new BridgeContext(mParams.getProjectKey(),metrics,resources,mParams.getProjectCallback(),getConfiguration(),mParams.getTargetSdkVersion());  setUp();  return SUCCESS.createResult();}  }
class C{  private EveningActivityControlSystem(int id){  eveningActivityNodes=new HashMap<Integer,EveningActivityMovement>();}  }
class C{  private void explodeBOM(){  String where="AND IsActive='Y' AND EXISTS " + "(SELECT * FROM M_Product p WHERE C_InvoiceLine.M_Product_ID=p.M_Product_ID" + " AND	p.IsBOM='Y' AND p.IsVerified='Y' AND p.IsStocked='N')";  String sql="SELECT COUNT(*) FROM C_InvoiceLine " + "WHERE C_Invoice_ID=? " + where;  int count=DB.getSQLValueEx(get_TrxName(),sql,getC_Invoice_ID());  while (count != 0) {    renumberLines(100);    MInvoiceLine[] lines=getLines(where);    for (int i=0; i < lines.length; i++) {      MInvoiceLine line=lines[i];      MProduct product=MProduct.get(getCtx(),line.getM_Product_ID());      log.fine(product.getName());      int lineNo=line.getLine();      MPPProductBOM bom=MPPProductBOM.get(product,getAD_Org_ID(),getDateInvoiced(),get_TrxName());      if (bom != null) {        MPPProductBOMLine[] bomlines=bom.getLines(getDateInvoiced());        for (int j=0; j < bomlines.length; j++) {          MPPProductBOMLine bomline=bomlines[j];          MInvoiceLine newLine=new MInvoiceLine(this);          newLine.setLine(++lineNo);          newLine.setM_Product_ID(bomline.getM_Product_ID());          newLine.setC_UOM_ID(bomline.getC_UOM_ID());          newLine.setQty(line.getQtyInvoiced().multiply(bomline.getQtyBOM()));          if (bomline.getDescription() != null)           newLine.setDescription(bomline.getDescription());          newLine.setPrice();          newLine.saveEx(get_TrxName());        }      }      line.setM_Product_ID(0);      line.setM_AttributeSetInstance_ID(0);      line.setPriceEntered(Env.ZERO);      line.setPriceActual(Env.ZERO);      line.setPriceLimit(Env.ZERO);      line.setPriceList(Env.ZERO);      line.setLineNetAmt(Env.ZERO);      String description=product.getName();      if (product.getDescription() != null)       description+=" " + product.getDescription();      if (line.getDescription() != null)       description+=" " + line.getDescription();      line.setDescription(description);      line.saveEx(get_TrxName());    }    m_lines=null;    count=DB.getSQLValue(get_TrxName(),sql,getC_Invoice_ID());    renumberLines(10);  }}  }
class C{  private WChar(){}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View v=inflater.inflate(R.layout.hello_world,container,false);  View tv=v.findViewById(R.id.text);  ((TextView)tv).setText(mLabel != null ? mLabel : "(no label)");  tv.setBackgroundDrawable(getResources().getDrawable(android.R.drawable.gallery_thumb));  return v;}  }
class C{  @Override public void layoutChildren(){  if (this.getVisible() && !networkPanel.isRunning()) {    interactionBox.setOffset(outlinedObjects.getFullBounds().getX() + OutlinedObjects.ROUNDING_WIDTH_HEIGHT / 2,outlinedObjects.getFullBounds().getY() - interactionBox.getFullBounds().getHeight() + 1);  }}  }
class C{  public InlineQueryResultLocation.InlineQueryResultLocationBuilder thumbUrl(URL thumbUrl){  this.thumb_url=thumbUrl;  return this;}  }
class C{  public static String toJSONString(Object value){  final StringWriter writer=new StringWriter();  try {    writeJSONString(value,writer);    return writer.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void addIdentities(Collection<Identity> identitiesToAdd){  if (identitiesToAdd == null)   return;synchronized (identities) {    identities.addAll(identitiesToAdd);  }}  }
class C{  public boolean contains(Object value){  if (value == null) {    throw new NullPointerException();  }  Entry tab[]=table;  for (int i=tab.length; i-- > 0; ) {    for (Entry e=tab[i]; e != null; e=e.next) {      if (e.value.equals(value)) {        return true;      }    }  }  return false;}  }
class C{  public synchronized void refreshNamespaces(){  if (this.namespaceCache == null) {    this.namespaceCache=new TreeMap<String,Namespace>();    Node[] nodes=client.getNodes();    for (    Node node : nodes) {      try {        String namespaceString=Info.request(getInfoPolicy(),node,"namespaces");        if (!namespaceString.isEmpty()) {          String[] namespaceList=namespaceString.split(";");          for (          String namespace : namespaceList) {            Namespace ns=this.namespaceCache.get(namespace);            if (ns == null) {              ns=new Namespace(namespace);              this.namespaceCache.put(namespace,ns);            }            refreshNamespaceData(node,ns);          }        }      } catch (      AerospikeException e) {        log.error("Error geting Namespaces ",e);      }    }  }}  }
class C{  public LongRangeField(String name,final long[] min,final long[] max){  super(name,getType(min.length));  setRangeValues(min,max);}  }
class C{  public void calculateExclusiveMin(double min){  if (exclusiveMin == -1) {    exclusiveMin=min;  } else {    exclusiveMin=Math.min(exclusiveMin,min);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:03.117 -0500",hash_original_method="54F21AAA256E1C615958DA1382F121C5",hash_generated_method="3B0FD0BAFEA6252F801DC513665ED3E6") protected void decrement(){  indentation--;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.INLINE_ASSOCIATION_END___MULTIPLICITY_1:    return multiplicity_1 != null && !multiplicity_1.isEmpty();case UmplePackage.INLINE_ASSOCIATION_END___IS_SORTED_1:  return isSorted_1 != null && !isSorted_1.isEmpty();case UmplePackage.INLINE_ASSOCIATION_END___ROLE_NAME_1:return ROLE_NAME_1_EDEFAULT == null ? roleName_1 != null : !ROLE_NAME_1_EDEFAULT.equals(roleName_1);}return super.eIsSet(featureID);}  }
class C{  public BillingAdapterConnectionException(){}  }
class C{  public static Properties loadConfigurationProperties(File file,Properties defaults) throws IOException {  Properties result=null;  if (file.exists()) {    result=IOUtil.readProperties(file,defaults);  } else {    result=new Properties(defaults);  }  return result;}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}labels[label].line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  return (p1 >= p2) ? p1 : p2;}  }
class C{  private void initializeLiveAttributes(){  x1=createLiveAnimatedLength(null,SVG_X1_ATTRIBUTE,SVG_LINEAR_GRADIENT_X1_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y1=createLiveAnimatedLength(null,SVG_Y1_ATTRIBUTE,SVG_LINEAR_GRADIENT_Y1_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  x2=createLiveAnimatedLength(null,SVG_X2_ATTRIBUTE,SVG_LINEAR_GRADIENT_X2_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y2=createLiveAnimatedLength(null,SVG_Y2_ATTRIBUTE,SVG_LINEAR_GRADIENT_Y2_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);}  }
class C{  public static NavYalantisFragment newInstance(){  NavYalantisFragment fragment=new NavYalantisFragment();  return fragment;}  }
class C{  public static ImageDecodeOptions defaults(){  return DEFAULTS;}  }
class C{  public final AssertSubscriber<T> assertFuseableSource(){  if (qs == null) {    throw new AssertionError("Upstream was not Fuseable");  }  return this;}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (countBuddies(player) > 500) {    player.sendPrivateText(NotificationType.ERROR,"Sorry, you have already too many buddies");    return;  }  final String who=action.get(TARGET);  DBCommand command=new QueryCanonicalCharacterNamesCommand(player,Arrays.asList(who));  DBCommandQueue.get().enqueueAndAwaitResult(command,handle);  TurnNotifier.get().notifyInTurns(0,new TurnListenerDecorator(this));}  }
class C{  private void updateTickLabelMaxLength(){  int maxLength=0;  for (int i=0; i < labels.length; i++) {    Dimension p=FigureUtilities.getTextExtents(labels[i],scale.getFont());    if (p.width > maxLength) {      maxLength=p.width;    }  }  tickLabelMaxLength=maxLength;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected void validate_return(java.lang.String[] param){}  }
class C{  public DtoProdTypeAttributeViewGroupServiceImpl(final DtoFactory dtoFactory,final GenericService<ProdTypeAttributeViewGroup> prodTypeAttributeViewGroupGenericService,final AdaptersRepository adaptersRepository,final GenericService<ProductType> productTypeService){  super(dtoFactory,prodTypeAttributeViewGroupGenericService,adaptersRepository);  this.productTypeService=productTypeService;}  }
class C{  public synchronized void addConsumer(ImageConsumer ic){  if (!ics.contains(ic)) {    ics.addElement(ic);  }}  }
class C{  public T caseTraceRecord_(TraceRecord_ object){  return null;}  }
class C{  public void scan(JSONArray args){  Intent intentScan=new Intent(SCAN_INTENT);  intentScan.addCategory(Intent.CATEGORY_DEFAULT);  if (args.length() > 0) {    JSONObject obj;    JSONArray names;    String key;    Object value;    for (int i=0; i < args.length(); i++) {      try {        obj=args.getJSONObject(i);      } catch (      JSONException e) {        Log.i("CordovaLog",e.getLocalizedMessage());        continue;      }      names=obj.names();      for (int j=0; j < names.length(); j++) {        try {          key=names.getString(j);          value=obj.get(key);          if (value instanceof Integer) {            intentScan.putExtra(key,(Integer)value);          } else           if (value instanceof String) {            intentScan.putExtra(key,(String)value);          }        } catch (        JSONException e) {          Log.i("CordovaLog",e.getLocalizedMessage());          continue;        }      }    }  }  intentScan.setPackage(this.cordova.getActivity().getApplicationContext().getPackageName());  this.cordova.startActivityForResult((CordovaPlugin)this,intentScan,REQUEST_CODE);}  }
class C{  private String createQuery(){  StringBuffer sb=new StringBuffer();  String s=serNoField.getComponent().getText();  if (s != null && s.length() > 0) {    sb.append(" AND asi.SerNo");    if (s.indexOf('%') == -1 && s.indexOf('_') == 1)     sb.append("="); else     sb.append(" LIKE ");    sb.append(DB.TO_STRING(s));  }  s=lotField.getComponent().getText();  if (s != null && s.length() > 0) {    sb.append(" AND asi.Lot");    if (s.indexOf('%') == -1 && s.indexOf('_') == 1)     sb.append("="); else     sb.append(" LIKE ");    sb.append(DB.TO_STRING(s));  }  ListItem li=lotSelection.getSelectedItem();  if (li != null && li.getValue() != null) {    KeyNamePair pp=(KeyNamePair)li.getValue();    if (pp != null && pp.getKey() != -1) {      int ID=pp.getKey();      sb.append(" AND asi.M_Lot_ID=").append(ID);    }  }  Timestamp ts=(Timestamp)guaranteeDateField.getValue();  if (ts != null) {    sb.append(" AND TRUNC(asi.GuaranteeDate, 'DD')");    int index=guaranteeDateSelection.getSelectedIndex();    if (index == 0)     sb.append("<"); else     if (index == 1)     sb.append("="); else     sb.append(">");    sb.append(DB.TO_DATE(ts,true));  }  for (int i=0; i < m_instanceEditors.size(); i++) {    StringBuffer iAttr=new StringBuffer();    Component c=(Component)m_instanceEditors.get(i);    Component cTo=(Component)m_instanceEditorsTo.get(i);    int M_Attribute_ID=Integer.parseInt(c.getId());    if (c instanceof Listbox) {      Listbox field=(Listbox)c;      li=field.getSelectedItem();      if (li != null && li.getValue() != null) {        KeyNamePair pp=(KeyNamePair)li.getValue();        if (pp != null && pp.getKey() != -1) {          iAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND M_AttributeValue_ID=").append(pp.getKey());        }      }    } else     if (c instanceof NumberBox) {      NumberBox field=(NumberBox)c;      BigDecimal value=(BigDecimal)field.getValue();      NumberBox fieldTo=(NumberBox)cTo;      BigDecimal valueTo=(BigDecimal)fieldTo.getValue();      if (value != null || valueTo != null) {        iAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND ValueNumber");        if (value != null && valueTo == null)         iAttr.append("=").append(value); else         if (value == null && valueTo != null)         iAttr.append("<=").append(valueTo); else         if (value != null && valueTo != null)         iAttr.append(" BETWEEN ").append(value).append(" AND ").append(valueTo);      }    } else {      Textbox field=(Textbox)c;      String value=field.getText();      if (value != null && value.length() > 0) {        iAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND Value");        if (value.indexOf('%') == -1 && value.indexOf('_') == -1)         iAttr.append("="); else         iAttr.append(" LIKE ");        iAttr.append(DB.TO_STRING(value));      }    }    if (iAttr.length() > 0)     sb.append(" AND asi.M_AttributeSetInstance_ID IN " + "(SELECT M_AttributeSetInstance_ID FROM M_AttributeInstance " + "WHERE ").append(iAttr).append(")");  }  if (sb.length() > 0) {    sb.insert(0," AND EXISTS (SELECT * FROM M_Storage s" + " INNER JOIN M_AttributeSetInstance asi ON (s.M_AttributeSetInstance_ID=asi.M_AttributeSetInstance_ID) " + "WHERE s.M_Product_ID=p.M_Product_ID");    sb.append(")");  }  for (int i=0; i < m_productEditors.size(); i++) {    StringBuffer pAttr=new StringBuffer();    Component c=(Component)m_productEditors.get(i);    Component cTo=(Component)m_productEditorsTo.get(i);    int M_Attribute_ID=Integer.parseInt(c.getId());    if (c instanceof Listbox) {      Listbox field=(Listbox)c;      li=field.getSelectedItem();      if (li != null && li.getValue() != null) {        KeyNamePair pp=(KeyNamePair)li.getValue();        if (pp != null && pp.getKey() != -1) {          pAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND M_AttributeValue_ID=").append(pp.getKey());        }      }    } else     if (c instanceof NumberBox) {      NumberBox field=(NumberBox)c;      BigDecimal value=(BigDecimal)field.getValue();      NumberBox fieldTo=(NumberBox)cTo;      BigDecimal valueTo=(BigDecimal)fieldTo.getValue();      if (value != null || valueTo != null) {        pAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND ValueNumber");        if (value != null && valueTo == null)         pAttr.append("=").append(value); else         if (value == null && valueTo != null)         pAttr.append("<=").append(valueTo); else         if (value != null && valueTo != null)         pAttr.append(" BETWEEN ").append(value).append(" AND ").append(valueTo);      }    } else {      Textbox field=(Textbox)c;      String value=field.getText();      if (value != null && value.length() > 0) {        pAttr.append("M_Attribute_ID=").append(M_Attribute_ID).append(" AND Value");        if (value.indexOf('%') == -1 && value.indexOf('_') == -1)         pAttr.append("="); else         pAttr.append(" LIKE ");        pAttr.append(DB.TO_STRING(value));      }    }    if (pAttr.length() > 0)     sb.append(" AND p.M_AttributeSetInstance_ID IN " + "(SELECT M_AttributeSetInstance_ID " + "FROM M_AttributeInstance WHERE ").append(pAttr).append(")");  }  m_query=null;  if (sb.length() > 0)   m_query=sb.toString();  log.config(m_query);  return m_query;}  }
class C{  @Override protected IStatus run(IProgressMonitor monitor){  IStatus jobStatus=Status.OK_STATUS;  try {    jobStatus=unzip.run(monitor);  } catch (  InvocationTargetException e) {    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,"Invocation Target Exception",e);  }  setProperty(IProgressConstants.KEEP_PROPERTY,Boolean.TRUE);  setProperty(IProgressConstants.ACTION_PROPERTY,getViewStatusAction(jobStatus));  maybeFireCompletedAction(jobStatus);  monitor.done();  return jobStatus;}  }
class C{  public static int cs_scatter(Scs A,int j,float beta,int[] w,float[] x,int mark,Scs C,int nz){  int i, p;  int Ap[], Ai[], Ci[];  float[] Ax;  if (!Scs_util.CS_CSC(A) || w == null || !Scs_util.CS_CSC(C))   return (-1);  Ap=A.p;  Ai=A.i;  Ax=A.x;  Ci=C.i;  for (p=Ap[j]; p < Ap[j + 1]; p++) {    i=Ai[p];    if (w[i] < mark) {      w[i]=mark;      Ci[nz++]=i;      if (x != null)       x[i]=beta * Ax[p];    } else     if (x != null)     x[i]+=beta * Ax[p];  }  return nz;}  }
class C{  public boolean isDrawCirclesEnabled(){  return mDrawCircles;}  }
class C{  private static String filterExampleXml(String examplXml){  int begin=0;  int end=examplXml.length();  if (examplXml.startsWith(Constants.EXAMLE_XML_HEADER)) {    begin=Constants.EXAMLE_XML_HEADER.length() - 1;  }  if (examplXml.endsWith(Constants.EXAMLE_XML_TAILER)) {    end=end - Constants.EXAMLE_XML_TAILER.length();  }  return examplXml.substring(begin,end);}  }
class C{  @Override public int distanceTo(final IType<?> t){  return t.getType().distanceTo(type) + t.getContentType().distanceTo(contentsType) + t.getKeyType().distanceTo(keyType);}  }
class C{  public boolean isSetRenameToDb(){  return this.renameToDb != null;}  }
class C{  public static Hop deepCopyHopsDag(Hop hops) throws HopsException {  Hop ret=null;  try {    HashMap<Long,Hop> memo=new HashMap<Long,Hop>();    ret=rDeepCopyHopsDag(hops,memo);  } catch (  Exception ex) {    throw new HopsException(ex);  }  return ret;}  }
class C{  public byte[] encrypt(byte[] iv,byte[] data) throws IntegrityException {  if (data.length % blockSize != 0) {    throw new IntegrityException("Incorrect data size");  }  if (iv.length != blockSize) {    throw new IntegrityException("Incorrect iv size");  }  byte[] res=new byte[data.length];  encrypt(iv,data,res);  return res;}  }
class C{  public int indexOf(E e,int index){  Object[] elements=array;  return indexOf(e,elements,index,elements.length);}  }
class C{  public void testProcessMsg1(){  byte[] pdu=createPDU(1);  int headerLen=pdu.length - (mGsmHeader.length + mUserDataHeader.length + mMessageBody.length);  int pduType=6;  int tranId=0;  String originalPackageName=mPackageName;  String originalClassName=mClassName;  try {    mClassName="com.android.smspush.unitTests.ReceiverActivity";    IWapPushManager iwapman=getInterface();    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,WapPushManagerParams.APP_TYPE_ACTIVITY,false,false);    assertTrue((iwapman.processMessage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),createIntent(pduType,tranId)) & WapPushManagerParams.MESSAGE_HANDLED) == WapPushManagerParams.MESSAGE_HANDLED);    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);  } catch (  RemoteException e) {    assertTrue(false);  }  mPackageName=originalPackageName;  mClassName=originalClassName;}  }
class C{  public static double variance(double shape,double scale){  return scale * scale * shape;}  }
class C{  public Builder exclude(String exclude){  if (this.exclude == null) {    this.exclude=new ArrayList<String>();  }  this.exclude.add(exclude);  return this;}  }
class C{  public List<ResultSet> query(String table,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy){  Cursor cursor=null;  try {    openDB();    cursor=mSQLiteDatabase.query(table,columns,selection,selectionArgs,groupBy,having,orderBy);    if (cursor.getCount() < 1) {      return null;    } else {      List<ResultSet> resultList=new ArrayList<ResultSet>();      parseCursorToResult(cursor,resultList);      return resultList;    }  } catch (  Exception ex) {    ex.printStackTrace();    return null;  } finally {    if (cursor != null)     cursor.close();  }}  }
class C{  protected static XRSurfaceData cacheToTmpSurface(SurfaceData src,XRSurfaceData dst,int w,int h,int sx,int sy){  SunVolatileImage vImg;  SurfaceType vImgSurfaceType;  if (src.getTransparency() == Transparency.OPAQUE) {    vImg=rgbTmpPM.get();    vImgSurfaceType=SurfaceType.IntRgb;  } else {    vImg=argbTmpPM.get();    vImgSurfaceType=SurfaceType.IntArgbPre;  }  if (vImg == null || vImg.getWidth() < w || vImg.getHeight() < h || !(vImg.getDestSurface() instanceof XRSurfaceData)) {    if (vImg != null) {      vImg.flush();    }    vImg=(SunVolatileImage)dst.getGraphicsConfig().createCompatibleVolatileImage(w,h,src.getTransparency());    vImg.setAccelerationPriority(1.0f);    if (src.getTransparency() == SurfaceData.OPAQUE) {      rgbTmpPM=new WeakReference<SunVolatileImage>(vImg);    } else {      argbTmpPM=new WeakReference<SunVolatileImage>(vImg);    }  }  Blit swToSurfaceBlit=Blit.getFromCache(src.getSurfaceType(),CompositeType.SrcNoEa,vImgSurfaceType);  if (!(vImg.getDestSurface() instanceof XRSurfaceData)) {    throw new InvalidPipeException("wrong surface data type: " + vImg.getDestSurface());  }  XRSurfaceData vImgSurface=(XRSurfaceData)vImg.getDestSurface();  swToSurfaceBlit.Blit(src,vImgSurface,AlphaComposite.Src,null,sx,sy,0,0,w,h);  return vImgSurface;}  }
class C{  private WebResourceStatistics computeTestStatisticsFromDb(WebResourceStatistics wrStatistics){  for (  Test test : testSet) {    TestStatistics testStatistics=testStatisticsDataService.create();    testStatistics.setTest(test);    int nbOfFailed=testStatisticsDataService.getResultCountByResultTypeAndTest(webResource,TestSolution.FAILED,test).intValue();    testStatistics.setNbOfFailed(nbOfFailed);    int nbOfPassed=testStatisticsDataService.getResultCountByResultTypeAndTest(webResource,TestSolution.PASSED,test).intValue();    testStatistics.setNbOfPassed(nbOfPassed);    int nbOfNmi=testStatisticsDataService.getResultCountByResultTypeAndTest(webResource,TestSolution.NEED_MORE_INFO,test).intValue();    testStatistics.setNbOfNmi(nbOfNmi);    int nbOfNa=testStatisticsDataService.getResultCountByResultTypeAndTest(webResource,TestSolution.NOT_APPLICABLE,test).intValue();    testStatistics.setNbOfNa(nbOfNa);    testStatistics.setNbOfNotTested(nbOfWr - nbOfFailed - nbOfPassed- nbOfNmi- nbOfNa);    wrStatistics.addTestStatistics(testStatistics);  }  return wrStatistics;}  }
class C{  protected NodeResult compareAttributes(final XNode xControl,final XNode xTest){  Differences differences=new Differences();  NodeResult nodeResult=new NodeResult(xControl,xTest,differences);  return nodeResult;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public SubjectParser(String subject){  super(subject);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void insert(int offset,long[] values){  insert(offset,values,0,values.length);}  }
class C{  public static IStatus validateFieldName(String name){  return validateIdentifier(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public String str(){  if (null == m_strCache) {    m_strCache=fsb().getString(m_start,m_length);  }  return m_strCache;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.189 -0500",hash_original_method="2CADB18C95425230AEE84C8462CF6B5E",hash_generated_method="2CADB18C95425230AEE84C8462CF6B5E") LocalSocket(LocalSocketImpl impl){  this.impl=impl;  this.isConnected=false;  this.isBound=false;}  }
class C{  protected void doPreRender(KMLTraversalContext tc,DrawContext dc){}  }
class C{  public JEditorPane(String url) throws IOException {  this();  setPage(url);}  }
class C{  public boolean tableExistsCaseSensitive(DatabaseMetaData dbMetaData,String tableName) throws SQLException {  ResultSet rsTables=dbMetaData.getTables(null,null,tableName,null);  try {    return rsTables.next();  }  finally {    closeJDBCResultSet(rsTables);  }}  }
class C{  public Object clone(){  try {    IdentityHashMap t=(IdentityHashMap)super.clone();    t.entrySet=null;    t.table=(Object[])(table.clone());    return t;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public boolean isOtherOnly(){  return otherOnly;}  }
class C{  public String toString(){  String prettyText=this.text.replace('\n','\u00b6');  return "Diff(" + this.operation + ",\""+ prettyText+ "\")";}  }
class C{  private static CellProcessor addDoubleMinMax(Double minValue,Double maxValue){  Double min=minValue == null ? DMinMax.MIN_DOUBLE : minValue;  Double max=maxValue == null ? DMinMax.MAX_DOUBLE : maxValue;  return new DMinMax(min,max);}  }
class C{  public void load(Path propertiesPath){  if (propertiesPath != null) {    mPropertiesPath=propertiesPath;    InputStream in=null;    try {      in=new FileInputStream(propertiesPath.toString());    } catch (    FileNotFoundException e) {      mLog.error("SDRTrunk - exception while opening inputstream on " + "application properties file",e);    }    if (in != null) {      try {        mProperties.load(in);      } catch (      IOException e) {        mLog.error("SDRTrunk - exception while loading properties " + "inputstream into SystemProperties",e);      } finally {        try {          in.close();        } catch (        IOException e) {        }      }    }  }  mLog.info("SystemProperties - loaded [" + propertiesPath.toString() + "]");}  }
class C{  private void showProcessing(boolean inProgress){  view.setLoaderVisibility(inProgress);  view.setInputsEnableState(!inProgress);}  }
class C{  public Category(String scheme,String term){  this(scheme,term,null);}  }
class C{  public static int extractSegmentOffsetPart(long segmentedPosition){  return AdaptersSet.extractSegmentOffset(segmentedPosition);}  }
class C{  TileBlock(int occX,int occY,int occW,int occH,boolean[] occupied,int xOff,int yOff,int w,int h){  this.occX=occX;  this.occY=occY;  this.occW=occW;  this.occH=occH;  this.xOff=xOff;  this.yOff=yOff;  this.w=w;  this.h=h;  this.occupied=occupied;  for (int y=0; y < h; y++)   for (int x=0; x < w; x++)   if (!occupied[x + xOff + occW * (y + yOff)])   benefit++;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  yy_reader=reader;  yy_atBOL=true;  yy_atEOF=false;  yy_endRead=yy_startRead=0;  yy_currentPos=yy_markedPos=yy_pushbackPos=0;  yyline=yychar=yycolumn=0;  yy_lexical_state=YYINITIAL;}  }
class C{  public SequenceResource(Iterable<Resource> resources){  super(getMimeType(resources));  this.resources=resources;}  }
class C{  public void removeCredentials(HomeserverConnectionConfig config){  if (null != config && config.getCredentials() != null) {    Log.d(LOG_TAG,"Removing account: " + config.getCredentials().userId);    SharedPreferences prefs=mContext.getSharedPreferences(PREFS_LOGIN,Context.MODE_PRIVATE);    SharedPreferences.Editor editor=prefs.edit();    ArrayList<HomeserverConnectionConfig> configs=getCredentialsList();    ArrayList<JSONObject> serialized=new ArrayList<>(configs.size());    boolean found=false;    try {      for (      HomeserverConnectionConfig c : configs) {        if (c.getCredentials().userId.equals(config.getCredentials().userId)) {          found=true;        } else {          serialized.add(c.toJson());        }      }    } catch (    JSONException e) {      throw new RuntimeException("Failed to serialize connection config");    }    if (!found)     return;    String ser=new JSONArray(serialized).toString();    Log.d(LOG_TAG,"Storing " + serialized.size() + " credentials");    editor.putString(PREFS_KEY_CONNECTION_CONFIGS,ser);    editor.apply();  }}  }
class C{  public static short nextShort(){  return (short)(random.nextInt(2 * 32767) - 32767);}  }
class C{  public AccountHeaderBuilder withHeightPx(int heightPx){  this.mHeight=DimenHolder.fromPixel(heightPx);  return this;}  }
class C{  protected void releaseConnection(){  try {    managedConn.releaseConnection();  } catch (  IOException ignored) {    this.log.debug("IOException releasing connection",ignored);  }  managedConn=null;}  }
class C{  private static void addNoCacheHeaders(final Map<String,String> map){  map.put(HttpHeader.PRAGMA.toString(),"no-cache");  map.put(HttpHeader.CACHE_CONTROL.toString(),"no-cache");  map.put(HttpHeader.EXPIRES.toString(),"0");}  }
class C{  @SuppressWarnings("unused") @android.webkit.JavascriptInterface public void visitRequestCompleted(String visitIdentifier){  TurbolinksLog.d("visitRequestCompleted called");  if (TextUtils.equals(visitIdentifier,currentVisitIdentifier)) {    runJavascript("webView.loadResponseForVisitWithIdentifier",visitIdentifier);  }}  }
class C{  protected void putEventInHARegion(Conflatable event,Long position){  if (event instanceof HAEventWrapper) {    HAEventWrapper haEventWrapper=(HAEventWrapper)event;    if (this.isQueueInitialized()) {      if (haEventWrapper.getIsRefFromHAContainer()) {        putEntryConditionallyIntoHAContainer(haEventWrapper);      } else {        boolean entryFound;        HAEventWrapper original=null;        do {          ClientUpdateMessageImpl old=(ClientUpdateMessageImpl)((HAContainerWrapper)this.haContainer).putIfAbsent(haEventWrapper,haEventWrapper.getClientUpdateMessage());          if (old != null) {            original=(HAEventWrapper)((HAContainerWrapper)this.haContainer).getKey(haEventWrapper);            if (original == null) {              continue;            }synchronized (original) {              if (((HAContainerWrapper)this.haContainer).getKey(original) != null) {                original.incAndGetReferenceCount();                addClientCQsAndInterestList(old,haEventWrapper,this.haContainer,this.regionName);                haEventWrapper=original;              } else {                original=null;              }            }          } else {synchronized (haEventWrapper) {              haEventWrapper.incAndGetReferenceCount();              haEventWrapper.setHAContainer(this.haContainer);              if (!haEventWrapper.getPutInProgress()) {                haEventWrapper.setClientUpdateMessage(null);              }              haEventWrapper.setIsRefFromHAContainer(true);            }            break;          }        } while (original == null);      }    }    this.region.put(position,haEventWrapper);  } else {    this.region.put(position,event);  }}  }
class C{  public static XMLTreeLocation inTheBegin(){  return new XMLTreeLocation(LocationType.BEGIN,"");}  }
class C{  public String toString(){  return description;}  }
class C{  public void testMvccFinishKeys() throws Exception {  IgniteCache<String,Integer> cache=grid(0).cache(null);  try (Transaction tx=grid(0).transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){    final String key="key";    cache.get(key);    GridCacheAdapter<String,Integer> internal=grid.internalCache();    KeyCacheObject cacheKey=internal.context().toCacheKeyObject(key);    IgniteInternalFuture<?> nearFut=internal.context().mvcc().finishKeys(Collections.singletonList(cacheKey),internal.context().cacheId(),new AffinityTopologyVersion(2));    IgniteInternalFuture<?> dhtFut=internal.context().near().dht().context().mvcc().finishKeys(Collections.singletonList(cacheKey),internal.context().cacheId(),new AffinityTopologyVersion(2));    assert !nearFut.isDone();    assert !dhtFut.isDone();    tx.commit();  } }  }
class C{  public static void main(String[] args){  Adempiere.startupEnvironment(true);  EMailProcessor m=new EMailProcessor("admin","test","testadempiere");  m.processMessages();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("AD_Client_ID"))     m_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeleteOldImported"))     m_deleteOldImported="Y".equals(para[i].getParameter()); else     if (name.equals("M_PriceList_Version_ID"))     p_M_PriceList_Version_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (m_DateValue == null)   m_DateValue=new Timestamp(System.currentTimeMillis());}  }
class C{  public static byte[] parseBssid2bytes(String bssid){  String bssidSplits[]=bssid.split(":");  byte[] result=new byte[bssidSplits.length];  for (int i=0; i < bssidSplits.length; i++) {    result[i]=(byte)Integer.parseInt(bssidSplits[i],16);  }  return result;}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public static QueryLanguage register(String name){  QueryLanguage ql=new QueryLanguage(name);  register(ql);  return ql;}  }
class C{  protected void compareDatasets(Instances data1,Instances data2) throws Exception {  if (!(data2.numInstances() == data1.numInstances())) {    throw new Exception("number of instances has changed");  }  for (int i=0; i < data2.numInstances(); i++) {    Instance orig=data1.instance(i);    Instance copy=data2.instance(i);    for (int j=0; j < orig.numAttributes(); j++) {      if (orig.isMissing(j)) {        if (!copy.isMissing(j)) {          throw new Exception("instances have changed");        }      } else       if (orig.value(j) != copy.value(j)) {        throw new Exception("instances have changed");      }      if (orig.weight() != copy.weight()) {        throw new Exception("instance weights have changed");      }    }  }}  }
class C{  public String push(final StackType stackType,final Request entry,CrawlProfile profile,final RobotsTxt robots){  try {switch (stackType) {case LOCAL:      return this.coreStack.push(entry,profile,robots);case GLOBAL:    return this.limitStack.push(entry,profile,robots);case REMOTE:{    if (this.remoteStack == null) {      this.initRemoteStack();    }    return (this.remoteStack != null) ? this.remoteStack.push(entry,profile,robots) : "remote crawler stack deactivated";  }case NOLOAD:return this.noloadStack.push(entry,profile,robots);default :return "stack type unknown";}} catch (final Exception er) {ConcurrentLog.logException(er);return "error pushing onto the crawl stack: " + er.getMessage();}}  }
class C{  private Set<String> returnRemotePoolsAssociatedWithRemoteCopySettings(Map<String,List<String>> remoteCopySettings,Set<String> poolUris){  Set<String> remotePoolUris=new HashSet<String>();  for (  Entry<String,List<String>> entry : remoteCopySettings.entrySet()) {    VirtualPool vPool=_objectCache.queryObject(VirtualPool.class,URI.create(entry.getKey()));    if (null == vPool) {      remotePoolUris.addAll(poolUris);    } else     if (null != vPool.getUseMatchedPools() && vPool.getUseMatchedPools()) {      if (null != vPool.getMatchedStoragePools()) {        remotePoolUris.addAll(vPool.getMatchedStoragePools());      }    } else     if (null != vPool.getAssignedStoragePools()) {      remotePoolUris.addAll(vPool.getAssignedStoragePools());    }  }  return remotePoolUris;}  }
class C{  public SQLClientInfoException(Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  private void injectNullCheckVars(AbstractBinaryJoinOperator joinOp){  LogicalVariable assignVar=context.newVar();  ILogicalOperator assignOp=new AssignOperator(assignVar,new MutableObject<ILogicalExpression>(ConstantExpression.TRUE));  assignOp.getInputs().add(joinOp.getInputs().get(1));  joinOp.getInputs().set(1,new MutableObject<ILogicalOperator>(assignOp));  nullCheckVars.add(assignVar);}  }
class C{  private static String toIdentifierString(Entity entity) throws EntityException {switch (entity.getType()) {case DATABASE:    return entity.getDatabase().getName();case TABLE:  return String.format("%s.%s",entity.getTable().getDbName(),entity.getTable().getTableName());case PARTITION:case DUMMYPARTITION:return String.format("%s.%s/%s",entity.getPartition().getTPartition().getDbName(),entity.getPartition().getTPartition().getTableName(),entity.getPartition().getName());case LOCAL_DIR:case DFS_DIR:try {return entity.getLocation().toString();} catch (Exception e) {throw new EntityException(e);}default :throw new EntityException("Unhandled type: " + entity.getType() + " entity: "+ entity);}}  }
class C{  private ArrayList<ColumnSpec> generateSpec(OneRowChange oneRowChange){  ArrayList<ColumnSpec> spec=new ArrayList<ColumnSpec>(3);  ColumnSpec c1=oneRowChange.new ColumnSpec();  c1.setIndex(1);  c1.setName("c1");  c1.setType(Types.INTEGER);  spec.add(c1);  ColumnSpec c2=oneRowChange.new ColumnSpec();  c2.setIndex(2);  c2.setName("c2");  c2.setType(Types.CHAR);  c2.setLength(10);  spec.add(c2);  ColumnSpec c3=oneRowChange.new ColumnSpec();  c3.setIndex(3);  c3.setName("c3");  c3.setType(Types.VARCHAR);  c3.setLength(32);  spec.add(c3);  return spec;}  }
class C{  private QueryBuilder buildSort(){  QueryBuilder builder=new QueryBuilder();  Iterator<String> sortIterator=sortingOrderList.iterator();  while (sortIterator.hasNext()) {    builder.append(sortIterator.next());    if (sortIterator.hasNext())     builder.append(", ");  }  return builder;}  }
class C{  public JsonNode toJsonObject(JsonApiDocument jsonApiDocument){  return mapper.convertValue(jsonApiDocument,JsonNode.class);}  }
class C{  public void printMultiLn(String s){  int index=0;  while ((index=s.indexOf('\n',index)) > -1) {    javaLine++;    index++;  }  writer.print(s);}  }
class C{  public void close() throws IOException {  try {    interrupt();  } catch (  Exception e) {  }  if (datagramConnection != null) {    datagramConnection.close();    datagramConnection=null;  }}  }
class C{  @Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){  super.onCreateOptionsMenu(menu,inflater);  inflater.inflate(R.menu.print_panel_menu,menu);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void addRecord(CarpoolingInfo carpoolingInfo,Subscriber<ResponseBody> subscriber){  SupportModelUtils.toSubscribe(mService.addRecord(carpoolingInfo),subscriber);}  }
class C{  public Item(Uri uri){  mText=null;  mHtmlText=null;  mIntent=null;  mUri=uri;}  }
class C{  void savePreferences(Preferences prefs){  try {    prefs.putInt(DRAW_GRIDS_KEY,useNoBuffer.isSelected() ? 0 : useBuffer.isSelected() ? 1 : 2);    prefs.putDouble(X_OFFSET_KEY,xOffsetField.getValue());    prefs.putDouble(Y_OFFSET_KEY,yOffsetField.getValue());    prefs.putBoolean(ANTIALIAS_KEY,antialias.isSelected());    prefs.putBoolean(BETTER_TRANSPARENCY_KEY,alphaInterpolation.isSelected());    prefs.putBoolean(INTERPOLATION_KEY,interpolation.isSelected());    prefs.putBoolean(TOOLTIPS_KEY,tooltips.isSelected());    prefs.putBoolean(PRECISE_KEY,preciseDrawing.isSelected());    if (!Prefs.save(prefs))     Utilities.inform("Preferences Cannot be Saved","Your Java system can't save preferences.  Perhaps this is an applet?",this);  } catch (  java.security.AccessControlException e) {  }}  }
class C{  public void addIssue(int reason,EObject obj,int featureId){  issues.add(new TransformationIssue(reason,obj,featureId,null));}  }
class C{  protected void handleUnloadAction(SolrQueryRequest req,SolrQueryResponse rsp) throws SolrException {  SolrParams params=req.getParams();  String cname=params.get(CoreAdminParams.CORE);  boolean deleteIndexDir=params.getBool(CoreAdminParams.DELETE_INDEX,false);  boolean deleteDataDir=params.getBool(CoreAdminParams.DELETE_DATA_DIR,false);  boolean deleteInstanceDir=params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR,false);  coreContainer.unload(cname,deleteIndexDir,deleteDataDir,deleteInstanceDir);}  }
class C{  public static void singleValue(String name,long value,String units){  openMinorTag("stat");  attribute("name",name);  attribute("value",value);  if (units != null)   attribute("units",units);  closeMinorTag();}  }
class C{  public SubInlineMenuButtonBuilder<T> menuButton(String text){  return new SubInlineMenuButtonBuilder<>(this,buttons().size(),text);}  }
class C{  public boolean isMute() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  if (mVolumeType == VolumeType.STREAM) {    checkRemoteMediaPlayerAvailable();    return mRemoteMediaPlayer.getMediaStatus().isMute();  } else {    return Cast.CastApi.isMute(mApiClient);  }}  }
class C{  protected void error(String msg) throws javax.xml.transform.TransformerException {  error(msg,null);}  }
class C{  public boolean supportsCatalogsInPrivilegeDefinitions() throws SQLException {  return false;}  }
class C{  public void addField(String field,int orderNum,boolean descending){  fields.add(new T2<>(field,orderNum));  if (descending) {    if (descendings == null)     descendings=new HashSet<>();    descendings.add(field);  }}  }
class C{  List<EffectSettings> isEffectandOverlayOverlapping(MediaItem m,ClipSettings clipSettings,int clipNo){  List<Effect> effects;  List<Overlay> overlays;  List<EffectSettings> effectSettings=new ArrayList<EffectSettings>();  EffectSettings tmpEffectSettings;  overlays=m.getAllOverlays();  for (  Overlay overlay : overlays) {    tmpEffectSettings=mNativeHelper.getOverlaySettings((OverlayFrame)overlay);    mNativeHelper.adjustEffectsStartTimeAndDuration(tmpEffectSettings,clipSettings.beginCutTime,clipSettings.endCutTime);    if (tmpEffectSettings.duration != 0) {      effectSettings.add(tmpEffectSettings);    }  }  effects=m.getAllEffects();  for (  Effect effect : effects) {    if (effect instanceof EffectColor) {      tmpEffectSettings=mNativeHelper.getEffectSettings((EffectColor)effect);      mNativeHelper.adjustEffectsStartTimeAndDuration(tmpEffectSettings,clipSettings.beginCutTime,clipSettings.endCutTime);      if (tmpEffectSettings.duration != 0) {        if (m instanceof MediaVideoItem) {          tmpEffectSettings.fiftiesFrameRate=mNativeHelper.GetClosestVideoFrameRate(((MediaVideoItem)m).getFps());        }        effectSettings.add(tmpEffectSettings);      }    }  }  return effectSettings;}  }
class C{  private void appendSortedMethods(Map<String,PsiMethod> sortedMethods){switch (mSortPosition) {case START:    appendToStart(sortedMethods);  break;case END:appendToEnd(sortedMethods);break;default :appendToStart(sortedMethods);break;}}  }
class C{  @Override public ChatEvent parse(String text){  if (text.length() < 600) {    RaptorStringTokenizer stringtokenizer=new RaptorStringTokenizer(text," ");    if (stringtokenizer.hasMoreTokens()) {      String s1=stringtokenizer.nextToken();      if (stringtokenizer.hasMoreTokens()) {        String s2=stringtokenizer.nextToken();        if (s2.equals("kibitzes:")) {          int j=text.indexOf('[') + 1;          int k=text.indexOf(']');          try {            return new ChatEvent(IcsUtils.stripTitles(s1).trim(),ChatType.KIBITZ,text.trim(),text.substring(j,k));          } catch (          Exception exception) {            exception.printStackTrace();          }        }      }    }    return null;  }  return null;}  }
class C{  public String globalInfo(){  return "Class for building and using a multinomial Naive Bayes classifier. " + "For more information see,\n\n" + getTechnicalInformation().toString() + "\n\n"+ "The core equation for this classifier:\n\n"+ "P[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)\n\n"+ "where Ci is class i and D is a document.";}  }
class C{  public void addScoreModule(Match match,PlayingPlayerContainer container){  PlayerContainerScore score=getScore(match,container);  if (score == null) {    scores.get(match).add(new PlayerContainerScore(container,rules.get(match)));  }}  }
class C{  private void updateInfoFromServer(Status svr) throws Exception {  if (svr == null)   throw new IllegalArgumentException("AppsServer was NULL");  setType(svr.getDbType());  setDbHost(svr.getDbHost());  setDbPort(svr.getDbPort());  setDbName(svr.getDbName());  setDbUid(svr.getDbUid());  setDbPwd(svr.getDbPwd());  setBequeath(false);  setFwHost(svr.getFwHost());  setFwPort(svr.getFwPort());  if (getFwHost().length() == 0)   setViaFirewall(false);  m_version=svr.getDateVersion();  log.config("Server=" + getDbHost() + ", DB="+ getDbName());}  }
class C{  public static MethodOperand SPECIAL(MethodReference ref,RVMMethod target){  return new MethodOperand(ref,target,SPECIAL);}  }
class C{  private static Set<VirtualFile> fileSetFromPaths(Collection<? extends Object> paths,boolean recurse,Set mimeTypes,Set<VirtualFile> fileSet,Collection<? extends Object> excludedPaths) throws ConfigurationException {  boolean topLevel;  if (topLevel=(fileSet == null)) {    fileSet=new HashSet<VirtualFile>(paths.size());  }  for (Iterator<? extends Object> iter=paths.iterator(); iter.hasNext(); ) {    Object next=iter.next();    VirtualFile file;    if (next instanceof VirtualFile) {      file=(VirtualFile)next;    } else {      String path=(next instanceof File) ? ((File)next).getAbsolutePath() : (String)next;      file=getVirtualFile(path);      if (excludedPaths != null && excludedPaths.contains(file)) {        excludedPaths.remove(file);        file=null;      }    }    if (file != null) {      if (recurse && file.isDirectory()) {        File dir=FileUtil.openFile(file.getName());        if (dir == null) {          throw new ConfigurationException.IOError(file.getName());        }        fileSetFromPaths(Arrays.asList(dir.listFiles()),true,mimeTypes,fileSet,excludedPaths);      } else       if (topLevel || mimeTypes == null || mimeTypes.contains(file.getMimeType())) {        fileSet.add(file);      }    }  }  return fileSet;}  }
class C{  public void updatePoint(){  mP1=mFollowCircle.commonTangentIntersections(mTouchCircle)[0];  mP2=mFollowCircle.commonTangentIntersections(mTouchCircle)[1];  mP3=mFollowCircle.commonTangentIntersections(mTouchCircle)[2];  mP4=mFollowCircle.commonTangentIntersections(mTouchCircle)[3];  mCP1=new PointF((mP1.x + mP4.x) / 2,(mP1.y + mP4.y) / 2);  mCP2=new PointF((mP2.x + mP3.x) / 2,(mP2.y + mP3.y) / 2);}  }
class C{  public final LC width(String width){  setWidth(ConstraintParser.parseBoundSize(width,false,true));  return this;}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.467 -0500",hash_original_method="32D4E331D0F655A9205640C19ABF2B58",hash_generated_method="8F57D9890D036571C1D1866F6CF386C5") public void putLong(String key,long value){  unparcel();  mMap.put(key,value);}  }
class C{  public static boolean containsInstance(Collection collection,Object element){  if (collection != null) {    for (Iterator it=collection.iterator(); it.hasNext(); ) {      Object candidate=it.next();      if (candidate == element) {        return true;      }    }  }  return false;}  }
class C{  public AlbumDataSource(PlayMusicManager playMusicManager){  super(playMusicManager);}  }
class C{  public BinarySearchTree(){  this.root=null;  this.size=0;  this.selfBalancing=false;}  }
class C{  public DeleteDescriptor(){  super(IJavaRefactorings.DELETE);}  }
class C{  @Override public boolean isGhost(){  return has(GHOSTMODE);}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ValuePreference.NAME)) {    if (MRole.getDefault().isShowPreference())     ValuePreference.start(m_mField,getValue(),getDisplay());    return;  } else   if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND)) {    FieldRecordInfo.start(m_mField);    return;  }  if (e.getSource() == m_button) {    m_button.setEnabled(false);    setValue(startCalendar(this,getTimestamp(),m_format,m_displayType,m_title));    try {      fireVetoableChange(m_columnName,m_oldText,getValue());    } catch (    PropertyVetoException pve) {    }    m_button.setEnabled(true);    m_text.requestFocus();  }}  }
class C{  public void readExif(InputStream inStream) throws IOException {  if (inStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  ExifData d=null;  try {    d=new ExifReader(this).read(inStream);  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }  mData=d;}  }
class C{  public static Notifications create(){  return new Notifications();}  }
class C{  public static void printException(Exception e){  if (DBG && e != null) {    e.printStackTrace();  }}  }
class C{  public static void main(String... args) throws Exception {  testFile("rw",false);  testFile("rwd",false);  testFile("rws",false);  testFile("rw",true);  testFile("rwd",true);  testFile("rws",true);  testDatabase("org.h2.Driver","jdbc:h2:test","sa","");  testDatabase("org.hsqldb.jdbcDriver","jdbc:hsqldb:test4","sa","");  testDatabase("org.apache.derby.jdbc.EmbeddedDriver","jdbc:derby:test;create=true","sa","");  testDatabase("com.mysql.jdbc.Driver","jdbc:mysql://localhost/test","sa","sa");  testDatabase("org.postgresql.Driver","jdbc:postgresql:test","sa","sa");}  }
class C{  public CProjectLoaderOperation(final INaviProject project){  m_project=project;  CGlobalProgressManager.instance().add(this);  project.addListener(m_listener);}  }
class C{  public UnaryValueOperator(){}  }
class C{  private boolean puedeSerModificada(PrevisionVO prevision){  boolean puedeSerModificada=false;  if (prevision.getEstado() == EstadoPrevision.ACEPTADA.getIdentificador())   puedeSerModificada=true;  return puedeSerModificada;}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    extensionId=PKIXExtensions.AuthorityKey_Id;    critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  @Override public Object createConnectionFactory() throws ResourceException {  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.debug("createConnectionFactory()");  }  return createConnectionFactory(new ActiveMQRAConnectionManager());}  }
class C{  public static MInOut copyFrom(MInOut from,Timestamp dateDoc,Timestamp dateAcct,int C_DocType_ID,boolean isSOTrx,boolean counter,String trxName,boolean setOrder){  MInOut to=new MInOut(from.getCtx(),0,null);  to.set_TrxName(trxName);  copyValues(from,to,from.getAD_Client_ID(),from.getAD_Org_ID());  to.set_ValueNoCheck("M_InOut_ID",I_ZERO);  to.set_ValueNoCheck("DocumentNo",null);  to.setDocStatus(DOCSTATUS_Drafted);  to.setDocAction(DOCACTION_Complete);  to.setC_DocType_ID(C_DocType_ID);  to.setIsSOTrx(isSOTrx);  if (counter) {    MDocType docType=MDocType.get(from.getCtx(),C_DocType_ID);    if (MDocType.DOCBASETYPE_MaterialDelivery.equals(docType.getDocBaseType())) {      to.setMovementType(isSOTrx ? MOVEMENTTYPE_CustomerShipment : MOVEMENTTYPE_VendorReturns);    } else     if (MDocType.DOCBASETYPE_MaterialReceipt.equals(docType.getDocBaseType())) {      to.setMovementType(isSOTrx ? MOVEMENTTYPE_CustomerReturns : MOVEMENTTYPE_VendorReceipts);    }  }  to.setDateOrdered(dateDoc);  to.setDateAcct(dateAcct);  to.setMovementDate(dateDoc);  to.setDatePrinted(null);  to.setIsPrinted(false);  to.setDateReceived(null);  to.setNoPackages(0);  to.setShipDate(null);  to.setPickDate(null);  to.setIsInTransit(false);  to.setIsApproved(false);  to.setC_Invoice_ID(0);  to.setTrackingNo(null);  to.setIsInDispute(false);  to.setPosted(false);  to.setProcessed(false);  to.setProcessing(false);  to.setC_Order_ID(0);  to.setM_RMA_ID(0);  if (counter) {    to.setC_Order_ID(0);    to.setRef_InOut_ID(from.getM_InOut_ID());    if (from.getC_Order_ID() != 0) {      MOrder peer=new MOrder(from.getCtx(),from.getC_Order_ID(),from.get_TrxName());      if (peer.getRef_Order_ID() != 0)       to.setC_Order_ID(peer.getRef_Order_ID());    }    if (from.getC_Invoice_ID() != 0) {      MInvoice peer=new MInvoice(from.getCtx(),from.getC_Invoice_ID(),from.get_TrxName());      if (peer.getRef_Invoice_ID() != 0)       to.setC_Invoice_ID(peer.getRef_Invoice_ID());    }    if (from.getM_RMA_ID() != 0) {      MRMA peer=new MRMA(from.getCtx(),from.getM_RMA_ID(),from.get_TrxName());      if (peer.getRef_RMA_ID() > 0)       to.setM_RMA_ID(peer.getRef_RMA_ID());    }  } else {    to.setRef_InOut_ID(0);    if (setOrder) {      to.setC_Order_ID(from.getC_Order_ID());      to.setM_RMA_ID(from.getM_RMA_ID());    }  }  if (!to.save(trxName))   throw new IllegalStateException("Could not create Shipment");  if (counter)   from.setRef_InOut_ID(to.getM_InOut_ID());  if (to.copyLinesFrom(from,counter,setOrder) <= 0)   throw new IllegalStateException("Could not create Shipment Lines");  return to;}  }
class C{  public static void printNode(Node node,Writer pw) throws IOException {  printNode(node,new StreamResult(pw));  pw.write('\n');  pw.flush();}  }
class C{  public static void main(String[] args){  Locale.setDefault(Locale.US);  RoutePlannerApp demo=new RoutePlannerApp(args);  demo.getFrame().readMap(DataResource.getULMFileResource());  demo.showFrame();}  }
class C{  public static Iterator<GetQueryResultsResponse> run(final String projectId,final String queryString,final long waitTime,final boolean useLegacySql) throws IOException {  Bigquery bigquery=BigQueryServiceFactory.getService();  QueryResponse query=bigquery.jobs().query(projectId,new QueryRequest().setTimeoutMs(waitTime).setQuery(queryString).setUseLegacySql(useLegacySql)).execute();  GetQueryResults getRequest=bigquery.jobs().getQueryResults(query.getJobReference().getProjectId(),query.getJobReference().getJobId());  return BigQueryUtils.getPages(getRequest);}  }
class C{  public boolean addNeighbour(Triangle triangle){  return getNeighbours().add(triangle);}  }
class C{  public static Deck merge(Deck d1,Deck d2){  return null;}  }
class C{  static public void assertEquals(String message,double expected,double actual,double delta){  if (Double.isInfinite(expected)) {    if (!(expected == actual))     failNotEquals(message,new Double(expected),new Double(actual));  } else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Double(expected),new Double(actual));}  }
class C{  @Override public void json(String json){  if (TextUtils.isEmpty(json)) {    d("Empty/Null json content");    return;  }  try {    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(message);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(message);    }  } catch (  JSONException e) {    e(e.getCause().getMessage() + "\n" + json);  }}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  ArrayList<String> allEntries=new ArrayList<String>(jarEntries.keySet().size());  allEntries.addAll(jarEntries.keySet());  Collections.sort(allEntries);  for (  String entry : allEntries) {    result.append(entry);    result.append(" [");    if (jarEntriesToAdd.containsKey(entry)) {      result.append(jarEntriesToAdd.get(entry).length + " (bytes)");    } else {      result.append(jarFile.getAbsolutePath());    }    result.append("]\n");  }  return result.toString();}  }
class C{  private static Boolean isLatestVersion(Context c){  Boolean result=false;  String f=PrefStore.getEnvDir(c) + "/version";  BufferedReader br=null;  try {    br=new BufferedReader(new FileReader(f));    String line=br.readLine();    if (PrefStore.getVersion(c).equals(line))     result=true;  } catch (  IOException e) {    e.printStackTrace();  } finally {    close(br);  }  return result;}  }
class C{  private static boolean isUnOrderList(CharSequence s,int next,boolean hasKey){  if (next + 1 > s.length()) {    return false;  }  if (hasKey) {    char c=s.charAt(next);    if (c == ' ') {      return true;    } else {      return false;    }  } else {    char c=s.charAt(next);    if (c == '+' || c == '-' || c == '*') {      return isUnOrderList(s,next + 1,true);    } else     if (c == ' ') {      return isUnOrderList(s,next + 1,false);    } else {      return false;    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TN4_CLASSIFIER__DECLARED_TYPE_ACCESS_MODIFIER:    setDeclaredTypeAccessModifier((TypeAccessModifier)newValue);  return;case TypesPackage.TN4_CLASSIFIER__DECLARED_PROVIDED_BY_RUNTIME:setDeclaredProvidedByRuntime((Boolean)newValue);return;case TypesPackage.TN4_CLASSIFIER__DYNAMIZABLE:setDynamizable((Boolean)newValue);return;case TypesPackage.TN4_CLASSIFIER__TYPING_STRATEGY:setTypingStrategy((TypingStrategy)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void main(String[] args){  parseArgs(args);  setupStreams();  if (list) {    listConfig();  } else {    setupHarness();    setupReporter();    if (exitOnTimer) {      setupTimer(testDurationSeconds);      do {        runBenchmarks();      } while (!exitRequested);    } else {      runBenchmarks();    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.EVENT_SOURCE__EVENT:    return event != null;case MappingPackage.EVENT_SOURCE__EVENT_PROPERTY:  return eventProperty != null;}return super.eIsSet(featureID);}  }
class C{  public Vertex nextMostConscious(Primitive type,Set<Vertex> ignoring){  return nextMostConscious(this.network.createVertex(type),ignoring,0f,false);}  }
class C{  public SunCertPathBuilderException(){  super();}  }
class C{  public StyledParagraph(AttributedCharacterIterator aci,char[] chars){  int start=aci.getBeginIndex();  int end=aci.getEndIndex();  length=end - start;  int index=start;  aci.first();  do {    final int nextRunStart=aci.getRunLimit();    final int localIndex=index - start;    Map<? extends Attribute,?> attributes=aci.getAttributes();    attributes=addInputMethodAttrs(attributes);    Decoration d=Decoration.getDecoration(attributes);    addDecoration(d,localIndex);    Object f=getGraphicOrFont(attributes);    if (f == null) {      addFonts(chars,attributes,localIndex,nextRunStart - start);    } else {      addFont(f,localIndex);    }    aci.setIndex(nextRunStart);    index=nextRunStart;  } while (index < end);  if (decorations != null) {    decorationStarts=addToVector(this,length,decorations,decorationStarts);  }  if (fonts != null) {    fontStarts=addToVector(this,length,fonts,fontStarts);  }}  }
class C{  public static String convertMethodSignature(MethodDescriptor methodDescriptor){  return convertMethodSignature(methodDescriptor.getClassDescriptor().toDottedClassName(),methodDescriptor.getName(),methodDescriptor.getSignature());}  }
class C{  @Override public int size(){  return vectors.size();}  }
class C{  public void fill(int fromIndex,int toIndex,int val){  if (toIndex > _pos) {    ensureCapacity(toIndex);    _pos=toIndex;  }  Arrays.fill(_data,fromIndex,toIndex,val);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  @Override public boolean addAll(Collection<? extends E> c){  if (null == c) {    throw new NullPointerException();  }  if (this == c) {    throw new IllegalArgumentException();  }  return super.addAll(c);}  }
class C{  void dismiss(){  mHandler.appMenuDismissed();  if (isShowing()) {    mPopup.dismiss();  }}  }
class C{  public void loadAIML(String text,String name,boolean createStates,boolean mergeState,boolean indexStatic){  long start=System.currentTimeMillis();  Network network=getBot().memory().newMemory();  Vertex stateMachine=null;  Vertex language=network.createVertex(getPrimitive());  if (mergeState) {    stateMachine=language.lastRelationship(Primitive.STATE);  }  if (stateMachine == null) {    stateMachine=network.createInstance(Primitive.STATE);    stateMachine.addRelationship(Primitive.LANGUAGE,network.createVertex(Primitive.AIML));    stateMachine.setName(name);    language.addRelationship(Primitive.STATE,stateMachine);    TextData data=new TextData();    data.setText(text);    stateMachine.addRelationship(Primitive.SOURCECODE,network.createVertex(data));    Vertex sourceCode=stateMachine.getRelationship(Primitive.SOURCECODE);    if (sourceCode != null) {      sourceCode.setPinned(true);    }  }  stateMachine=AIMLParser.parser().parseAIML(text,true,createStates,false,indexStatic,stateMachine,network);  SelfCompiler.getCompiler().pin(stateMachine);  network.save();  log("AIML parsing time",Level.INFO,System.currentTimeMillis() - start);}  }
class C{  public MessageProcessingException(String message){  super(message);}  }
class C{  public static void main(String[] args) throws IOException, GeneralSecurityException {  if (args.length != 1) {    System.err.println("Missing imagePath argument.");    System.err.println("Usage:");    System.err.printf("\tjava %s imagePath\n",LabelApp.class.getCanonicalName());    System.exit(1);  }  Path imagePath=Paths.get(args[0]);  LabelApp app=new LabelApp(getVisionService());  printLabels(System.out,imagePath,app.labelImage(imagePath,MAX_LABELS));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println(progress + "%");  }  previousProgress=progress;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public DiskStoreFactory createDiskStoreFactory(){  return new DiskStoreFactoryImpl(this);}  }
class C{  public void teleopInit(){}  }
class C{  private boolean isFirstTab(){  return m_curWinTab.getSelectedIndex() == 0;}  }
class C{  private void errorOnLeftOvers(String section,NamedList<Object> leftovers){  if (null == leftovers || 0 == leftovers.size())   return;  List<String> unknownElements=new ArrayList<String>(leftovers.size());  for (  Map.Entry<String,Object> unknownElement : leftovers) {    log.error("Unknown config parameter in {} section of solr.xml: {} -> {}",section,unknownElement.getKey(),unknownElement.getValue());    unknownElements.add(unknownElement.getKey());  }  if (!unknownElements.isEmpty()) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,String.format(Locale.ROOT,"%s section of solr.xml contains %d unknown config parameter(s): %s",section,unknownElements.size(),unknownElements));  }}  }
class C{  public void nextRandomEvent(CtsXmlResultReporter ctsXmlResultReporter){  MonkeyEvent ev=mEventSource.getNextEvent();  if (ev != null) {    ctsXmlResultReporter.addMonkeyEvent(ev);    ev.fireEvent(mDevice);  }}  }
class C{  public static boolean parseBoolean(String cadena,boolean defaultValue){  boolean bool=defaultValue;  if (StringUtils.isNotBlank(cadena)) {    bool=Boolean.parseBoolean(cadena);  }  return bool;}  }
class C{  public Element next(){  return theNext;}  }
class C{  public boolean coordinatesInRadius(Coord coordinateA,Coord coordinateB){  double distance=CoordUtils.calcEuclideanDistance(coordinateA,coordinateB);  boolean withinRadius=(distance <= radius);  return withinRadius;}  }
class C{  public boolean teardown(){  setDetailedState(NetworkInfo.DetailedState.DISCONNECTING,"disabled",null);  setDetailedState(NetworkInfo.DetailedState.DISCONNECTED,"disabled",null);  return true;}  }
class C{  private void validateParameters(PropertyHandler newParams) throws APPlatformException {  if (newParams.getEMail() == null || newParams.getEMail().length() < 5)   throw new APPlatformException(Messages.getAll("error_missing_email"));  if (newParams.getMessage() == null || newParams.getMessage().length() < 5)   throw new APPlatformException(Messages.getAll("error_missing_message"));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"stc");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a stc instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  instructions.add(ReilHelpers.createStr(baseOffset,OperandSize.BYTE,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));}  }
class C{  protected void auditClass(Audit.Action action,ChangeSpec changeSpec){  Audit[] annotations=getResourceClass().getAnnotationsByType(Audit.class);  if (annotations == null) {    return;  }  for (  Audit annotation : annotations) {    for (    Audit.Action auditAction : annotation.action()) {      if (auditAction == action) {        LogMessage message=new LogMessage(annotation,this,Optional.ofNullable(changeSpec));        getRequestScope().getAuditLogger().log(message);      }    }  }}  }
class C{  private void persistKey(SecretKey key) throws Exception {  ConfigurationImpl config=new ConfigurationImpl();  config.setKind(CONFIG_KIND);  config.setId(_encryptId);  config.setConfig(CONFIG_KIND,new String(Base64.encodeBase64(key.getEncoded()),UTF_8));  _coordinator.persistServiceConfiguration(config);  _key=key;}  }
class C{  protected void convertInstance(Instance instance) throws Exception {  double[] newVals=new double[getOutputFormat().numAttributes()];  if (m_ASEvaluator instanceof AttributeTransformer) {    Instance tempInstance=((AttributeTransformer)m_ASEvaluator).convertInstance(instance);    for (int i=0; i < m_SelectedAttributes.length; i++) {      int current=m_SelectedAttributes[i];      newVals[i]=tempInstance.value(current);    }  } else {    for (int i=0; i < m_SelectedAttributes.length; i++) {      int current=m_SelectedAttributes[i];      newVals[i]=instance.value(current);    }  }  if (instance instanceof SparseInstance) {    push(new SparseInstance(instance.weight(),newVals));  } else {    push(new DenseInstance(instance.weight(),newVals));  }}  }
class C{  public NegMaxEvaluation(int ply){  this.ply=ply;}  }
class C{  private boolean canOpen(){  for (  final INaviProject project : m_projects) {    if (project.isLoaded()) {      return false;    }  }  return true;}  }
class C{  public PendingResult<DataApi.DataItemResult> onConfigurationAddedOrEdited(final long id,final UartConfiguration configuration){  if (mGoogleApiClient == null || !mGoogleApiClient.isConnected())   return null;  final PutDataMapRequest mapRequest=PutDataMapRequest.create(Constants.UART.CONFIGURATIONS + "/" + id);  final DataMap map=mapRequest.getDataMap();  map.putString(Constants.UART.Configuration.NAME,configuration.getName());  final ArrayList<DataMap> commands=new ArrayList<>(UartConfiguration.COMMANDS_COUNT);  for (  Command command : configuration.getCommands()) {    if (command != null && command.isActive()) {      final DataMap item=new DataMap();      item.putInt(Constants.UART.Configuration.Command.ICON_ID,command.getIconIndex());      item.putString(Constants.UART.Configuration.Command.MESSAGE,command.getCommand());      item.putInt(Constants.UART.Configuration.Command.EOL,command.getEolIndex());      commands.add(item);    }  }  map.putDataMapArrayList(Constants.UART.Configuration.COMMANDS,commands);  final PutDataRequest request=mapRequest.asPutDataRequest();  return Wearable.DataApi.putDataItem(mGoogleApiClient,request);}  }
class C{  public void test_syntax_update_39() throws MalformedQueryException {  final String query="BASE <http://example/>\n# Otherwise empty\n";  parseOperation(query);}  }
class C{  public String pickupEngine(Engine engine){  StringBuilder builder=new StringBuilder();  for (  String attribute : Setup.getPickupEngineMessageFormat()) {    builder.append(getEngineAttribute(engine,attribute,PICKUP));  }  return builder.toString();}  }
class C{  public ChannelDialog(java.awt.Frame parent,boolean modal,JmeAnimation jmeAnim){  super(parent,modal);  this.jmeAnim=jmeAnim;  initComponents();  jTextField1.setText(jmeAnim.getAnimSpeed() + "");  jComboBox1.setSelectedItem(jmeAnim.getAnimLoopMode().toString());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public MarketingPermissionNotFoundException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public boolean isActive(){  return getLifecycle().isActive();}  }
class C{  @SuppressLint("InlinedApi") private void testADTS() throws IllegalStateException, IOException {  setAudioEncoder(MediaRecorder.AudioEncoder.AAC);  try {    Field name=MediaRecorder.OutputFormat.class.getField("AAC_ADTS");    setOutputFormat(name.getInt(null));  } catch (  Exception ignore) {    setOutputFormat(6);  }  int i=0;  for (; i < AUDIO_SAMPLING_RATES.length; i++) {    if (AUDIO_SAMPLING_RATES[i] == mQuality.samplingRate) {      break;    }  }  if (i > 12) {    Log.e(TAG,"Not a valid sampling rate: " + mQuality.samplingRate);    mQuality.samplingRate=16000;  }  if (mSettings != null) {    String savedKey=savedADTSKey();    if (mSettings.contains(savedKey)) {      String[] s=mSettings.getString(savedKey,"").split(",");      mActualSamplingRate=Integer.valueOf(s[0]);      mConfig=Integer.valueOf(s[1]);      mChannel=Integer.valueOf(s[2]);      Log.i(TAG,"Read ADTS config(" + savedKey + "):"+ mActualSamplingRate+ ","+ mConfig+ ","+ mChannel);      return;    }  }  final String TESTFILE=Environment.getExternalStorageDirectory().getPath() + "/adtsstream-test.adts";  if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    throw new IllegalStateException("No external storage or external storage not ready !");  }  byte[] buffer=new byte[9];  mMediaRecorder=new MediaRecorder();  mMediaRecorder.setAudioSource(mAudioSource);  mMediaRecorder.setOutputFormat(mOutputFormat);  mMediaRecorder.setAudioEncoder(mAudioEncoder);  mMediaRecorder.setAudioChannels(2);  mMediaRecorder.setAudioSamplingRate(mQuality.samplingRate);  mMediaRecorder.setAudioEncodingBitRate(mQuality.bitRate);  mMediaRecorder.setOutputFile(TESTFILE);  mMediaRecorder.setMaxDuration(1000);  mMediaRecorder.prepare();  mMediaRecorder.start();  try {    Thread.sleep(2000);  } catch (  InterruptedException e) {  }  try {    mMediaRecorder.stop();  } catch (  Exception e) {  }  mMediaRecorder.reset();  mMediaRecorder.release();  mMediaRecorder=null;  File file=new File(TESTFILE);  RandomAccessFile raf=new RandomAccessFile(file,"r");  while (true) {    if ((raf.readByte() & 0xFF) == 0xFF) {      buffer[0]=raf.readByte();      if ((buffer[0] & 0xF0) == 0xF0)       break;    }  }  raf.read(buffer,1,5);  mSamplingRateIndex=(buffer[1] & 0x3C) >> 2;  mProfile=((buffer[1] & 0xC0) >> 6) + 1;  mChannel=(buffer[1] & 0x01) << 2 | (buffer[2] & 0xC0) >> 6;  mActualSamplingRate=AUDIO_SAMPLING_RATES[mSamplingRateIndex];  mConfig=mProfile << 11 | mSamplingRateIndex << 7 | mChannel << 3;  Log.i(TAG,"MPEG VERSION: " + ((buffer[0] & 0x08) >> 3));  Log.i(TAG,"PROTECTION: " + (buffer[0] & 0x01));  Log.i(TAG,"PROFILE: " + AUDIO_OBJECT_TYPES[mProfile]);  Log.i(TAG,"SAMPLING FREQUENCY: " + mActualSamplingRate);  Log.i(TAG,"CHANNEL: " + mChannel);  raf.close();  if (mSettings != null) {    Editor editor=mSettings.edit();    editor.putString(savedADTSKey(),mActualSamplingRate + "," + mConfig+ ","+ mChannel);    editor.commit();  }  if (!file.delete()) {    Log.e(TAG,"Temp file could not be erased");  }}  }
class C{  public Builder withMaxFrameSize(int maxFrameSize){  properties.setProperty(NettyOptions.MAX_FRAME_SIZE,String.valueOf(Assert.argNot(maxFrameSize,maxFrameSize <= 0,"maximum frame size must be positive")));  return this;}  }
class C{  @Override public String toString(){  return printNodeLinearModel();}  }
class C{  public void add(T actual,T predicted){  add(actual,predicted,1);}  }
class C{  @GET @Path("{projectPath}") public Map<String,String> countLinesPerFile(@PathParam("projectPath") String projectPath) throws ServerException, NotFoundException, ForbiddenException {  Map<String,String> linesPerFile=new LinkedHashMap<>();  RegisteredProject project=projectManager.getProject(projectPath);  for (  FileEntry child : project.getBaseFolder().getChildFiles()) {    if (isJsonFile(child)) {      linesPerFile.put(child.getName(),Integer.toString(countLines(child)));    }  }  return linesPerFile;}  }
class C{  @Override public Phase initialPhase(){  return left;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static <T>int distance(final List<T> values,int first,int last){  int size=last - first;  return size;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static boolean startsWith(byte[] bytes,byte[] prefix){  return bytes != null && prefix != null && bytes.length >= prefix.length && compareTo(bytes,0,prefix.length,prefix,0,prefix.length) == 0;}  }
class C{  public Quaternion mul(float scalar){  this.x*=scalar;  this.y*=scalar;  this.z*=scalar;  this.w*=scalar;  return this;}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public static <A>int[] toPrimitiveIntegerArray(A array,NumberArrayAdapter<?,? super A> adapter){  int[] ret=new int[adapter.size(array)];  for (int i=0; i < ret.length; i++) {    ret[i]=adapter.getInteger(array,i);  }  return ret;}  }
class C{  public void close() throws IOException {  byte[] buffer;  while ((buffer=buf) != null) {    if (bufUpdater.compareAndSet(this,buffer,null)) {      InputStream input=in;      in=null;      if (input != null)       input.close();      return;    }  }}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public static double[][] transpose(double[][] M){  double[][] tM=new double[M[0].length][M.length];  for (int i=0; i < tM.length; i++)   for (int j=0; j < tM[0].length; j++)   tM[i][j]=M[j][i];  return tM;}  }
class C{  public boolean checkRemainingOptions(){  boolean result;  String[] options;  print("Remaining options...");  options=getUserOptions();  try {    getDefaultHandler().setOptions(options);    if (getDebug()) {      println("\n  remaining: " + printOptions(options));    }    println("yes");    result=true;  } catch (  Exception e) {    println("no");    result=false;    if (getDebug()) {      println(e);    }  }  return result;}  }
class C{  private void processImages(SolrVector doc,boolean allAttr,LinkedHashMap<DigestURL,String> inboundLinks,LinkedHashMap<DigestURL,String> outboundLinks,List<ImageEntry> images){  final ArrayList<String> imgprots=new ArrayList<String>(images.size());  final Integer[] imgheights=new Integer[images.size()];  final Integer[] imgwidths=new Integer[images.size()];  final Integer[] imgpixels=new Integer[images.size()];  final String[] imgstubs=new String[images.size()];  final String[] imgalts=new String[images.size()];  int withalt=0;  int i=0;  LinkedHashSet<String> images_text_map=new LinkedHashSet<String>();  for (  final ImageEntry ie : images) {    final MultiProtocolURL uri=ie.url();    inboundLinks.remove(uri);    outboundLinks.remove(uri);    imgheights[i]=ie.height();    imgwidths[i]=ie.width();    imgpixels[i]=ie.height() < 0 || ie.width() < 0 ? -1 : ie.height() * ie.width();    String protocol=uri.getProtocol();    imgprots.add(protocol);    imgstubs[i]=uri.toString().substring(protocol.length() + 3);    imgalts[i]=ie.alt();    for (    String it : CommonPattern.SPACE.split(uri.toTokens()))     images_text_map.add(it);    if (ie.alt() != null && ie.alt().length() > 0) {      SentenceReader sr=new SentenceReader(ie.alt());      while (sr.hasNext())       images_text_map.add(sr.next().toString());      withalt++;    }    i++;  }  StringBuilder images_text=new StringBuilder(images_text_map.size() * 6 + 1);  for (  String s : images_text_map)   images_text.append(s.trim()).append(' ');  if (allAttr || contains(CollectionSchema.imagescount_i))   add(doc,CollectionSchema.imagescount_i,images.size());  if (allAttr || contains(CollectionSchema.images_protocol_sxt))   add(doc,CollectionSchema.images_protocol_sxt,protocolList2indexedList(imgprots));  if (allAttr || contains(CollectionSchema.images_urlstub_sxt))   add(doc,CollectionSchema.images_urlstub_sxt,imgstubs);  if (allAttr || contains(CollectionSchema.images_alt_sxt))   add(doc,CollectionSchema.images_alt_sxt,imgalts);  if (allAttr || contains(CollectionSchema.images_height_val))   add(doc,CollectionSchema.images_height_val,imgheights);  if (allAttr || contains(CollectionSchema.images_width_val))   add(doc,CollectionSchema.images_width_val,imgwidths);  if (allAttr || contains(CollectionSchema.images_pixel_val))   add(doc,CollectionSchema.images_pixel_val,imgpixels);  if (allAttr || contains(CollectionSchema.images_withalt_i))   add(doc,CollectionSchema.images_withalt_i,withalt);  if (allAttr || contains(CollectionSchema.images_text_t))   add(doc,CollectionSchema.images_text_t,images_text.toString().trim());}  }
class C{  @Override protected void buildSprites(Door entity,final Map<Object,Sprite> map){  final String name=entity.getEntityClass();  final SpriteStore store=SpriteStore.get();  if (name == null) {    width=IGameScreen.SIZE_UNIT_PIXELS;    height=IGameScreen.SIZE_UNIT_PIXELS;    final Sprite emptySprite=store.getEmptySprite(width,height);    map.put(STATE_OPEN,emptySprite);    map.put(STATE_CLOSED,emptySprite);  } else {    ZoneInfo info=ZoneInfo.get();    final Sprite tiles=store.getModifiedSprite(translate(name),info.getZoneColor(),info.getColorMethod());    width=tiles.getWidth();    height=tiles.getHeight() / 2;    map.put(STATE_OPEN,store.getTile(tiles,0,0,width,height));    map.put(STATE_CLOSED,store.getTile(tiles,0,height,width,height));  }  calculateOffset(entity,width,height);}  }
class C{  @Override public NdefMessage createNdefMessage(NfcEvent event){  Log.v(TAG,"createNdefMessage()");  AbstractIdentity idToSend=panbox.getIdentity();  Log.v(TAG,"identity null? " + idToSend);  if (idToSend == null) {    return null;  }  ByteArrayOutputStream baos=new ByteArrayOutputStream();  AbstractIdentityManager idm=IdentityManagerAndroid.getInstance(context);  idm.exportMyIdentity(idToSend,baos);  try {    baos.flush();    baos.close();  } catch (  IOException e1) {    e1.printStackTrace();  }  byte[] idFileData=baos.toByteArray();  NdefRecord record=new NdefRecord(NdefRecord.TNF_MIME_MEDIA,MIME_TYPE.getBytes(Charset.forName("US-ASCII")),new byte[0],idFileData);  NdefMessage msg=new NdefMessage(new NdefRecord[]{record});  return msg;}  }
class C{  public static Typeface ostrichRounded(Context context){  return FontSourceProcessor.process(R.raw.ostrich_rounded,context);}  }
class C{  public void free_frame_buffer(AVFrame pic){  release_buffer(pic);}  }
class C{  public SampleVcpcRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  private boolean isCheckpointTableExists(Connection conn){  Statement st=null;  ResultSet rs=null;  try {    st=conn.createStatement();    rs=st.executeQuery(chkTblExistsSql);    return true;  } catch (  SQLException ignored) {    return false;  } finally {    U.close(rs,log);    U.close(st,log);  }}  }
class C{  private TypeArgumentProposal[] computeTypeArgumentProposals(){  if (fTypeArgumentProposals == null) {    String signature=getTypeGenerycSignature(new String(Signature.toCharArray(fProposal.getSignature())));    if (signature == null) {      return new TypeArgumentProposal[0];    }    signature=signature.replaceAll("/",".");    String[] parameters=Signature.getTypeParameters(signature);    if (parameters.length == 0) {      return new TypeArgumentProposal[0];    }    TypeArgumentProposal[] arguments=new TypeArgumentProposal[parameters.length];    for (int i=0; i < arguments.length; i++) {      if (arguments[i] == null) {        arguments[i]=computeTypeProposal(parameters[i]);      }    }    fTypeArgumentProposals=arguments;  }  return fTypeArgumentProposals;}  }
class C{  public Class<?>[] findSignatureClasses(String signature[],ClassLoader loader) throws ReflectionException {  if (signature == null)   return null;  final ClassLoader aLoader=loader;  final int length=signature.length;  final Class<?> tab[]=new Class<?>[length];  if (length == 0)   return tab;  try {    for (int i=0; i < length; i++) {      final Class<?> primCla=primitiveClasses.get(signature[i]);      if (primCla != null) {        tab[i]=primCla;        continue;      }      ReflectUtil.checkPackageAccess(signature[i]);      if (aLoader != null) {        tab[i]=Class.forName(signature[i],false,aLoader);      } else {        tab[i]=findClass(signature[i],this.getClass().getClassLoader());      }    }  } catch (  ClassNotFoundException e) {    if (MBEANSERVER_LOGGER.isLoggable(Level.FINEST)) {      MBEANSERVER_LOGGER.logp(Level.FINEST,MBeanInstantiator.class.getName(),"findSignatureClasses","The parameter class could not be found",e);    }    throw new ReflectionException(e,"The parameter class could not be found");  }catch (  RuntimeException e) {    if (MBEANSERVER_LOGGER.isLoggable(Level.FINEST)) {      MBEANSERVER_LOGGER.logp(Level.FINEST,MBeanInstantiator.class.getName(),"findSignatureClasses","Unexpected exception",e);    }    throw e;  }  return tab;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditem.class,args);}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public JCVariableDecl Param(Name name,Type argtype,Symbol owner){  return VarDef(new VarSymbol(PARAMETER,name,argtype,owner),null);}  }
class C{  public static MapWayAttFilter createCarWayFilter(){  MapWayAttFilter filter=new MapWayAttFilter("highway");  filter.setAccepted("motorway");  filter.setAccepted("motorway_link");  filter.setAccepted("trunk");  filter.setAccepted("trunk_link");  filter.setAccepted("primary");  filter.setAccepted("primary_link");  filter.setAccepted("secondary");  filter.setAccepted("tertiary");  filter.setAccepted("road");  filter.setAccepted("residential");  filter.setAccepted("living_street");  filter.setAccepted("service");  filter.setAccepted("unclassified");  return filter;}  }
class C{  @Override public String toString(){  return this.getClass().getName() + '(' + getName()+ ':'+ getTypeInternal()+ ')';}  }
class C{  public long run(String[] args) throws Exception {  int depth=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  Node[] trees=genTrees(depth,ncycles);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,trees,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,trees,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public void subscribeToResellerServiceTerminate() throws Exception {  VendorData supplierData=setupNewSupplier("2013-03-01 08:00:00");  setDateFactory("2013-03-02 20:00:00");  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForReseller2");  updateOperatorRevenueShare(5.0D,supplService.getKey());  updatePartnerRevenueShares(12.0D,15.0D,supplService);  VendorData resellerData=setupNewReseller("2013-03-03 08:10:00");  setCutOffDay(resellerData.getAdminKey(),2);  CustomerData resellerCustomerData=registerCustomer(resellerData,"resellerCustomer");  updateMarketplaceRevenueShare(10.0D,resellerData.getMarketplaceId(0));  VOServiceDetails resellerService=grantResalePermission(supplierData,supplService,resellerData);  resellerService=publishActivateService(resellerData,resellerService);  VOSubscriptionDetails resellerSub=subscribe(resellerCustomerData.getAdminUser(),"resellerSubWithTerminate",resellerService,"2013-04-02 00:00:00","ADMIN");  unsubscribe(resellerCustomerData.getAdminKey(),resellerSub.getSubscriptionId(),"2013-04-30 00:00:00");  resetCutOffDay(resellerData.getAdminKey());  cacheTestData("subscribeToResellerServiceTerminate",new TestData(supplierData,resellerData));}  }
class C{  public SnapshotListResponse listSnapshots(){  _log.info("CinderApi - start listSnapshots");  SnapshotListResponse listRes=null;  String listSnapshotsUri=endPoint.getBaseUri() + String.format(CinderConstants.URI_LIST_SNAPSHOTS,new Object[]{endPoint.getCinderTenantId()});  ClientResponse js_response=getClient().get(URI.create(listSnapshotsUri));  _log.debug("uri {} : Response status {}",listSnapshotsUri,String.valueOf(js_response.getStatus()));  if (js_response.getStatus() == ClientResponse.Status.OK.getStatusCode()) {    String jsonString=js_response.getEntity(String.class);    listRes=new Gson().fromJson(SecurityUtils.sanitizeJsonString(jsonString),SnapshotListResponse.class);  }  _log.info("CinderApi - end listSnapshots");  return listRes;}  }
class C{  public static void resetMap(){synchronized (nameToRackMap) {    nameToRackMap.clear();  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case A:    return isSetA();case B:  return isSetB();case C:return isSetC();case SHORT_SET:return isSetShortSet();case INT_SET:return isSetIntSet();case MIX_STRUCTLIST:return isSetMixStructlist();case SHORT_LIST:return isSetShortList();case ORDERED_STRUCT_MAP:return isSetOrderedStructMap();case MIX_STRUCT_MAP:return isSetMixStructMap();case ORDER_ENUM:return isSetOrderEnum();case BIN:return isSetBin();}throw new IllegalStateException();}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (!isOrderBy()) {    setSortNo(0);    setIsGroupBy(false);    setIsPageBreak(false);  }  if (isRelativePosition()) {    setXPosition(0);    setYPosition(0);  } else {    setXSpace(0);    setYSpace(0);  }  if (isImageField()) {    setImageIsAttached(false);    setImageURL(null);  }  return true;}  }
class C{  public void close() throws IOException {  socket.close();}  }
class C{  public SignedSoftwareCertificate clone(){  SignedSoftwareCertificate result=new SignedSoftwareCertificate();  result.CertificateData=CertificateData;  result.Signature=Signature;  return result;}  }
class C{  public PublishRequest clone(){  PublishRequest result=new PublishRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  if (SubscriptionAcknowledgements != null) {    result.SubscriptionAcknowledgements=new SubscriptionAcknowledgement[SubscriptionAcknowledgements.length];    for (int i=0; i < SubscriptionAcknowledgements.length; i++)     result.SubscriptionAcknowledgements[i]=SubscriptionAcknowledgements[i].clone();  }  return result;}  }
class C{  public boolean isOfNumericType(){  return TypeMap.isNumericType(getMappedTypeCode());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setDisableSWDecoding(evalBool(stack.pop()));  return null;}  }
class C{  public boolean complete(){  try {    buildURL();  } catch (  MalformedURLException mue) {    return false;  }  return true;}  }
class C{  int read(){  return pos < data.length ? (data[pos++] & 255) : -1;}  }
class C{  public void transformValues(TLongFunction function){  Object[] keys=_set;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  private ArrayList<String> findUnAskedPermissions(ArrayList<String> wanted){  ArrayList<String> result=new ArrayList<String>();  for (  String perm : wanted) {    if (!hasPermission(perm) && shouldWeAsk(perm)) {      result.add(perm);    }  }  return result;}  }
class C{  @Override public Spliterator<Map.Entry<K,V>> spliterator(){  return inner.spliterator();}  }
class C{  @Override protected void initializeValues(){  int previewTiles=this.getPreviewTilesNumber(), tiles=this.getTilesNumber();  mPreviewTextures=new PLITexture[previewTiles];  mTextures=new PLITexture[tiles];  for (int i=0; i < previewTiles; i++)   mPreviewTextures[i]=null;  for (int i=0; i < tiles; i++)   mTextures[i]=null;  mHotspots=new ArrayList<PLIHotspot>();  super.initializeValues();}  }
class C{  public static DateTimeFormatter basicWeekDate(){  return Constants.bwd;}  }
class C{  public IgniteCheckedException(){}  }
class C{  @Provides @Singleton ServletContext provideMockServlet(){  return new MockServletContext();}  }
class C{  public FBXid(Xid xid){  formatId=xid.getFormatId();  globalId=xid.getGlobalTransactionId();  branchId=xid.getBranchQualifier();  firebirdTransactionId=0;}  }
class C{  private JButton createAndAddIconToToolbar(final Action action,final String defaultIconPath,final String rolloverIconPath,final String pressedIconPath){  final JButton button=add(CActionProxy.proxy(action));  button.setBorder(new EmptyBorder(0,0,0,0));  button.setIcon(new ImageIcon(CMain.class.getResource(defaultIconPath)));  button.setRolloverIcon(new ImageIcon(CMain.class.getResource(rolloverIconPath)));  button.setPressedIcon(new ImageIcon(CMain.class.getResource(pressedIconPath)));  return button;}  }
class C{  public IntroductionBuilder(@NonNull Activity context){  this.context=context;  this.slides=new ArrayList<>();}  }
class C{  public static boolean equalsIgnoreCase(String str1,String str2){  return (str1 == null ? str2 == null : str1.equalsIgnoreCase(str2));}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Stop") == 0) {    stop();  } else {    throw new IllegalArgumentException(request + " not supported (Associator)");  }}  }
class C{  public void testGetOwnerDocument() throws Throwable {  Document doc;  DocumentType ownerDocument;  doc=(Document)load("staff",builder);  ownerDocument=(DocumentType)doc.getOwnerDocument();  assertNull("throw_Null",ownerDocument);}  }
class C{  public void testBug57808() throws Exception {  try {    createTable("bug57808","(ID INT(3) NOT NULL PRIMARY KEY, ADate DATE NOT NULL)");    Properties props=new Properties();    if (versionMeetsMinimum(5,7,4)) {      props.put("jdbcCompliantTruncation","false");    }    if (versionMeetsMinimum(5,7,5)) {      String sqlMode=getMysqlVariable("sql_mode");      if (sqlMode.contains("STRICT_TRANS_TABLES")) {        sqlMode=removeSqlMode("STRICT_TRANS_TABLES",sqlMode);        props.put("sessionVariables","sql_mode='" + sqlMode + "'");      }    }    props.put("zeroDateTimeBehavior","convertToNull");    Connection conn1=null;    conn1=getConnectionWithProps(props);    this.stmt=conn1.createStatement();    this.stmt.executeUpdate("INSERT INTO bug57808(ID, ADate) VALUES(1, 0000-00-00)");    this.rs=this.stmt.executeQuery("SELECT ID, ADate FROM bug57808 WHERE ID = 1");    if (this.rs.first()) {      Date theDate=this.rs.getDate("ADate");      if (theDate == null) {        assertTrue("wasNull is FALSE",this.rs.wasNull());      } else {        fail("Original date was not NULL!");      }    }  }  finally {  }}  }
class C{  private void readObject(){}  }
class C{  private void parseCursorToResult(Cursor cursor,List<ResultSet> resultList){  int columnCount;  int columnType;  Object columnVal=null;  while (cursor.moveToNext()) {    columnCount=cursor.getColumnCount();    ResultSet result=new ResultSet();    for (int index=0; index < columnCount; ++index) {      columnType=cursor.getType(index);switch (columnType) {case Cursor.FIELD_TYPE_BLOB:        columnVal=cursor.getBlob(index);      break;case Cursor.FIELD_TYPE_FLOAT:    columnVal=cursor.getDouble(index);  break;case Cursor.FIELD_TYPE_INTEGER:columnVal=cursor.getLong(index);break;case Cursor.FIELD_TYPE_NULL:columnVal=null;break;default :columnVal=cursor.getString(index);break;}result.setValue(cursor.getColumnName(index),columnVal);}resultList.add(result);}}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.LOCAL_ARGUMENTS_VARIABLE;}  }
class C{  public boolean isCallConnected(){  return (State.CONNECTED == callState);}  }
class C{  @Override public float scaleToVisible(final float left,final float right,final float top,final float bottom){  float scaling;  final float width;  final float height;  width=(float)pageContainer.getWidth() * 0.95f;  height=(float)pageContainer.getHeight() * 0.95f;  final float widthScaling=(right - left) / width;  final float heightScaling=(top - bottom) / height;  if (widthScaling > heightScaling) {    scaling=widthScaling;  } else {    scaling=heightScaling;  }  scaling=decode_pdf.getDPIFactory().adjustScaling(scaling);  return scaling;}  }
class C{  public static void open(String url) throws InterruptedException, IOException {  String cmd=null;  if (isWindows()) {    cmd=("rundll32 url.dll,FileProtocolHandler " + maybeFixupURLForWindows(url));    Runtime.getRuntime().exec(cmd);  } else {    if (System.getenv("BROWSER") != null) {      cmd=System.getenv("BROWSER") + " " + url;    } else {      cmd="firefox -remote openURL(" + url + ")";    }    Process p=Runtime.getRuntime().exec(cmd);    int exitcode=p.waitFor();    if (exitcode != 0) {      cmd="firefox " + url;      Runtime.getRuntime().exec(cmd);    }  }}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  log.debug("Selected button: {}",e.getActionCommand());  for (  ProgrammingMode mode : buttonMap.keySet()) {    if (mode.toString().equals(e.getActionCommand())) {      log.debug("      set mode {} on {}",mode.toString(),getProgrammer());      if (getProgrammer() != null) {        getProgrammer().setMode(mode);      }      return;    }  }}  }
class C{  public VcfEvalParamsBuilder useAllRecords(final boolean useAllRecords){  mUseAllRecords=useAllRecords;  return self();}  }
class C{  synchronized Set<Long> keySet(){  HashSet<Long> set=new HashSet<Long>();  for (Entry<V> e=stack.stackNext; e != stack; e=e.stackNext) {    set.add(e.key);  }  for (Entry<V> e=queue.queueNext; e != queue; e=e.queueNext) {    set.add(e.key);  }  return set;}  }
class C{  public boolean isFound(){  return found;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException, ClassNotFoundException {  ObjectOutputStream.PutField fields=s.putFields();  fields.put("buf",buf);  fields.put("len",len);  fields.put("origLen",origLen);  fields.put("clob",clob instanceof Serializable ? clob : null);  s.writeFields();}  }
class C{  public synchronized void stop(){  isRunning=false;  try {    sock.close();  } catch (  IOException e) {    e.printStackTrace();  }  Collection en=tcpMessageChannels.values();  for (Iterator it=en.iterator(); it.hasNext(); ) {    TCPMessageChannel next=(TCPMessageChannel)it.next();    next.close();  }  for (Iterator incomingMCIterator=incomingTcpMessageChannels.iterator(); incomingMCIterator.hasNext(); ) {    TCPMessageChannel next=(TCPMessageChannel)incomingMCIterator.next();    next.close();  }  this.notify();}  }
class C{  public boolean readBoolean() throws SQLException {  Boolean attrib=(Boolean)getNextAttribute();  return (attrib == null) ? false : attrib.booleanValue();}  }
class C{  public Builder(VmPolicy base){  mMask=base.mask;  mClassInstanceLimitNeedCow=true;  mClassInstanceLimit=base.classInstanceLimit;}  }
class C{  public static boolean hasComponentOfType(Component component,Class<?>... types){  for (  Class<?> type : types) {    if (type.isAssignableFrom(component.getClass())) {      return true;    }  }  if (component instanceof Container) {    Container container=(Container)component;    for (int i=0; i < container.getComponentCount(); i++) {      if (hasComponentOfType(container.getComponent(i),types)) {        return true;      }    }  }  return false;}  }
class C{  public Matrix invert(){  if (isSingular())   throw new IllegalStateException("Cannot invert singular matrix!");  return new Matrix(invert(cloneValues()));}  }
class C{  public static Date truncate(final Object date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  if (date instanceof Date) {    return truncate((Date)date,field);  } else   if (date instanceof Calendar) {    return truncate((Calendar)date,field).getTime();  } else {    throw new ClassCastException("Could not truncate " + date);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static String registerKind(Class<?> type,String kind){  return KINDS.put(type.getCanonicalName(),kind);}  }
class C{  public static CacheConfigRequest create(CacheInfo c,int attCode,int v){  CacheConfigRequest m=new CacheConfigRequest();  m.attributeCode=(byte)attCode;  m.newValue=v;  m.cacheId=c.getId();  return m;}  }
class C{  public boolean isStartsWithMode(){  return filter.isStartsWithMode();}  }
class C{  @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.505 -0500",hash_original_method="C0D588953F48F0F49E401C0010BD067A",hash_generated_method="FDD5257AB5E7A1CD3E9757215A6BF545") public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  public World createWorldFromSeed(WorldSeed worldSeed,WorldType worldType) throws IllegalStateException, MinecraftInterfaceException {  MinecraftInterface minecraftInterface=this.minecraftInterface;  if (minecraftInterface != null) {    return worldBuilder.fromSeed(minecraftInterface,worldSeed,worldType);  } else {    throw new IllegalStateException("cannot create a world without a minecraft interface");  }}  }
class C{  public UCrop withAspectRatio(@IntRange(from=1) int x,@IntRange(from=1) int y){  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_SET,true);  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_X,x);  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_Y,y);  return this;}  }
class C{  public long accumulateObject(Object o,long shallowSize,Map<Field,Object> fieldValues,Collection<Object> queue){  for (  Object value : fieldValues.values()) {    queue.add(value);  }  return shallowSize;}  }
class C{  public static CreatePlatformSessionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreatePlatformSessionResponse object=new CreatePlatformSessionResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"createPlatformSessionResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (CreatePlatformSessionResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  static void registerRefreshNotification(NotificationListener client,Object userData,RefreshNotificationType type,int refreshInterval){  if (client == null) {    throw new IllegalArgumentException(LocalizedStrings.MBeanUtil_NOTIFICATIONLISTENER_IS_REQUIRED.toLocalizedString());  }  if (type == null) {    throw new IllegalArgumentException(LocalizedStrings.MBeanUtil_REFRESHNOTIFICATIONTYPE_IS_REQUIRED.toLocalizedString());  }  if (refreshTimerObjectName == null || refreshTimer == null) {    throw new IllegalStateException(LocalizedStrings.MBeanUtil_REFRESHTIMER_HAS_NOT_BEEN_PROPERLY_INITIALIZED.toLocalizedString());  }  try {    Map<RefreshNotificationType,Integer> notifications=null;synchronized (refreshClients) {      notifications=(Map<RefreshNotificationType,Integer>)refreshClients.get(client);    }    if (notifications == null) {      if (refreshInterval <= 0) {        return;      }      notifications=new HashMap<RefreshNotificationType,Integer>();synchronized (refreshClients) {        refreshClients.put(client,notifications);      }      validateRefreshTimer();      try {        mbeanServer.addNotificationListener(refreshTimerObjectName,client,null,new Object());      } catch (      InstanceNotFoundException e) {        logStackTrace(Level.WARN,e,LocalizedStrings.MBeanUtil_COULD_NOT_FIND_REGISTERED_REFRESHTIMER_INSTANCE.toLocalizedString());      }    }    Integer timerNotificationId=(Integer)notifications.get(type);    if (timerNotificationId != null) {      try {        refreshTimer.removeNotification(timerNotificationId);      } catch (      InstanceNotFoundException e) {      } finally {        notifications.put(type,null);      }    }    if (refreshInterval > 0) {      timerNotificationId=refreshTimer.addNotification(type.getType(),type.getMessage(),userData,new Date(System.currentTimeMillis() + refreshInterval * 1000),refreshInterval * 1000);      notifications.put(type,timerNotificationId);    } else {    }  } catch (  java.lang.RuntimeException e) {    logStackTrace(Level.WARN,e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  java.lang.Error e) {    SystemFailure.checkFailure();    logStackTrace(Level.ERROR,e);    throw e;  }}  }
class C{  @Override public void nodeChanged(){  log.info("Site info changed. Waking up the vdc manager...");  wakeup();}  }
class C{  public TLongArrayList grep(TLongProcedure condition){  TLongArrayList list=new TLongArrayList();  for (int i=0; i < _pos; i++) {    if (condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  public void typeOf() throws IOException {  print("typeOf",null);}  }
class C{  public String toString(){  return mUri + " (" + mSize+ " bytes)";}  }
class C{  @Override public OFMatch clone(){  try {    OFMatch ret=(OFMatch)super.clone();    ret.dataLayerDestination=this.dataLayerDestination.clone();    ret.dataLayerSource=this.dataLayerSource.clone();    return ret;  } catch (  CloneNotSupportedException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public String toString(){  return this.originalSql;}  }
class C{  private boolean isCustomConfigurationPath(){  return !this.configurationPath.equals("Path to file '/Users/user/desktop/config.xml'");}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static void recursivelyDelete(String name){  File curFile=new File(name);  File subFile=null;  int i=0;  try {    if (curFile.exists()) {      if (curFile.isDirectory()) {        String[] arrFiles=curFile.list();        for (i=0; i < Array.getLength(arrFiles); ++i) {          subFile=new File(curFile + File.separator + arrFiles[i]);          recursivelyDelete(subFile.getCanonicalPath());        }      }      if (!curFile.delete()) {      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  NodeList childNodes;  Node retval;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  childNodes=titleAttr.getChildNodes();  textNode=doc.createTextNode("terday");  retval=titleAttr.appendChild(textNode);  assertSize("childNodesSize",2,childNodes);  textNode=(Text)childNodes.item(0);  value=textNode.getNodeValue();  assertEquals("child1IsYes","Yes",value);  textNode=(Text)childNodes.item(1);  value=textNode.getNodeValue();  assertEquals("child2IsTerday","terday",value);  textNode=(Text)childNodes.item(2);  assertNull("thirdItemIsNull",textNode);}  }
class C{  public boolean isPageAligned(int addr){  return (addr % PAGE_SIZE) == 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.569 -0500",hash_original_method="68DB825828DE5D87C3617DBC5932D86C",hash_generated_method="FD3C3179A18A690F4B8C089C764C35E4") public void unregisterAll(){synchronized (mObservers) {    mObservers.clear();  }}  }
class C{  protected void consumeMessage(Message message,List<Message> messageList){  if (verbose) {    LOG.info("Received message: " + message);  }  messageList.add(message);  if (messageList.size() >= data.length) {synchronized (lock) {      lock.notifyAll();    }  }}  }
class C{  public static void saveSdCardInfo(Context context,@Nullable final Uri uri){  SharedPreferences.Editor editor=PreferenceUtil.getInstance(context).getEditor();  editor.putString(context.getString(R.string.preference_internal_uri_extsdcard_photos),uri == null ? null : uri.toString());  editor.putString("sd_card_path",ContentHelper.getSdcardPath(context));  editor.commit();}  }
class C{  private void notifyNoValidAction(final PoliticalActionAttachment paa){  sendNotification("This action isn't available anymore (this shouldn't happen!?!)");}  }
class C{  public void swap(int pos1,int pos2){  double[] dummyA=atts[pos1];  atts[pos1]=atts[pos2];  atts[pos2]=dummyA;  int[] dummyI=index[pos1];  index[pos1]=index[pos2];  index[pos2]=dummyI;  double dummyd=alphas[pos1];  alphas[pos1]=alphas[pos2];  alphas[pos2]=dummyd;  dummyd=ys[pos1];  ys[pos1]=ys[pos2];  ys[pos2]=dummyd;}  }
class C{  public boolean isRequired(){  return label.isRequired();}  }
class C{  public CompiledIteratorDef(String name,ObjectType elementType,CompiledValue collectionExpr){  this.name=name;  this.elementType=elementType == null ? TypeUtils.OBJECT_TYPE : elementType;  this.collectionExpr=collectionExpr;}  }
class C{  public StateMachineEnsembleException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static double[][] reorderDataForVariables(double[][] inputValues,int[][] reordering){  int rows=inputValues.length;  int columns=inputValues[0].length;  boolean reorderingFirstColumn=(reordering.length == columns);  double[][] data=new double[rows][columns];  for (int r=0; r < rows; r++) {    int reorderIndex=0;    if (reorderingFirstColumn) {      data[r][0]=inputValues[reordering[reorderIndex++][r]][0];    } else {      data[r][0]=inputValues[r][0];    }    for (int c=1; c < columns; c++) {      data[r][c]=inputValues[reordering[reorderIndex++][r]][c];    }  }  return data;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public InvalidPasswordException(Throwable cause){  super(cause);}  }
class C{  @Override public boolean isConnectionBased(){  return true;}  }
class C{  public boolean isNotificationRequired(int row){  if (row < 0)   throw new IllegalArgumentException("illegal row: " + row);  int rowBand=-1;  for (int band=0; band < ROW_BAND.length; band++) {    if (row < ROW_BAND[band]) {      rowBand=band - 1;      break;    }  }  if (rowBand == -1) {    return false;  } else   if ((row % ROW_BAND_SAMPLE_FREQUENCY[rowBand]) != 0) {    return false;  } else {    return true;  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void testVerifyWeblogicHomeWhenEmptyDirectory() throws Exception {  this.fsManager.resolveFile(WL_HOME + "/server/lib").createFolder();  this.container.setFileHandler(this.fileHandler);  try {    this.container.verifyWeblogicHome();    fail("Should have thrown an exception here");  } catch (  ContainerException expected) {    assertEquals("Invalid WebLogic installation. The [" + WL_HOME + "/server/lib] directory is empty "+ "and it shouldn't be. Make sure the WL_HOME directory you have specified "+ "points to the right location (It's currently pointing to ["+ WL_HOME+ "])",expected.getMessage());  }}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof NormalDistributionFunction2D)) {    return false;  }  NormalDistributionFunction2D that=(NormalDistributionFunction2D)obj;  if (this.mean != that.mean) {    return false;  }  if (this.std != that.std) {    return false;  }  return true;}  }
class C{  boolean isNamed(){  return name == null;}  }
class C{  public void externalEntityDecl(String name,String publicId,String sysId) throws SAXException {  ExternalEntityDecl declaration=new ExternalEntityDecl(name,publicId,sysId);  if (internalDTDsubset) {    if (includeInternalDTDDeclarations) {      addDTDDeclaration(declaration);    }  } else {    if (includeExternalDTDDeclarations) {      addExternalDTDDeclaration(declaration);    }  }}  }
class C{  public void beforeFirst() throws SQLException {  checkCursorMove();  fbFetcher.beforeFirst();  notifyRowUpdater();}  }
class C{  public void addDeparture(double departureTime){  this.travelTimes.put(departureTime,Double.NaN);}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[2]) - stateCount[1] / 2.0f;}  }
class C{  public void unmarshal(CacheObjectContext ctx,Marshaller marsh) throws IgniteCheckedException {  unmarshalKey(ctx,marsh);  if (val == null && valBytes != null) {    val=marsh.unmarshal(valBytes,U.resolveClassLoader(ctx.kernalContext().config()));    val.finishUnmarshal(ctx,null);  }}  }
class C{  public boolean fullScroll(int direction){  boolean moved=false;  if (direction == FOCUS_UP) {    int position=lookForSelectablePosition(0,true);    if (position >= 0) {      mLayoutMode=LAYOUT_FORCE_TOP;      invokeOnItemScrollListener();      moved=true;    }  } else   if (direction == FOCUS_DOWN) {    int position=lookForSelectablePosition(mItemCount - 1,true);    if (position >= 0) {      mLayoutMode=LAYOUT_FORCE_BOTTOM;      invokeOnItemScrollListener();    }    moved=true;  }  if (moved && !awakenScrollBars()) {    awakenScrollBars();    invalidate();  }  return moved;}  }
class C{  public void testLongerObjects() throws Exception {  JsonFactory jf=new JsonFactory();  for (int i=0; i < 2; ++i) {    boolean useChars=(i == 0);    JsonGenerator jgen;    ByteArrayOutputStream bout=new ByteArrayOutputStream(200);    if (useChars) {      jgen=jf.createJsonGenerator(new OutputStreamWriter(bout,"UTF-8"));    } else {      jgen=jf.createJsonGenerator(bout,JsonEncoding.UTF8);    }    jgen.writeStartObject();    for (int rounds=0; rounds < 1500; ++rounds) {      for (int letter='a'; letter <= 'z'; ++letter) {        for (int index=0; index < 20; ++index) {          String name;          if (letter > 'f') {            name="X" + letter + index;          } else           if (letter > 'p') {            name="" + letter + index;          } else {            name="__" + index + letter;          }          jgen.writeFieldName(name);          jgen.writeNumber(index - 1);        }        jgen.writeRaw('\n');      }    }    jgen.writeEndObject();    jgen.close();    byte[] json=bout.toByteArray();    JsonParser jp=jf.createJsonParser(json);    assertToken(JsonToken.START_OBJECT,jp.nextToken());    for (int rounds=0; rounds < 1500; ++rounds) {      for (int letter='a'; letter <= 'z'; ++letter) {        for (int index=0; index < 20; ++index) {          assertToken(JsonToken.FIELD_NAME,jp.nextToken());          String name;          if (letter > 'f') {            name="X" + letter + index;          } else           if (letter > 'p') {            name="" + letter + index;          } else {            name="__" + index + letter;          }          assertEquals(name,jp.getCurrentName());          assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());          assertEquals(index - 1,jp.getIntValue());        }      }    }    assertToken(JsonToken.END_OBJECT,jp.nextToken());  }}  }
class C{  private static void verify(String name,int type){  if ((type < HARD) || (type > WEAK)) {    throw new IllegalArgumentException(name + " must be HARD, SOFT, WEAK.");  }}  }
class C{  private Schema createSubSchema(boolean isAttributesSchema) throws IOException, IncorrectSchemaException, SAXException {  PropertyMap requestedProperties=md.options.toPropertyMap();  Schema schema=sr.createChildSchema(resolver.resolve(md.schemaUriRef,md.schemaUriBase),md.schemaType,requestedProperties,isAttributesSchema);  PropertyMap actualProperties=schema.getProperties();  for (Enumeration e=md.mustSupportOptions.elements(); e.hasMoreElements(); ) {    MustSupportOption mso=(MustSupportOption)e.nextElement();    Object actualValue=actualProperties.get(mso.pid);    if (actualValue == null)     error("unsupported_option",mso.name,mso.locator); else     if (!actualValue.equals(requestedProperties.get(mso.pid)))     error("unsupported_option_arg",mso.name,mso.locator);  }  return schema;}  }
class C{  public Pool(final GenericObjectPool.Config poolConfig,PoolableObjectFactory factory){  this.internalPool=new GenericObjectPool(factory,poolConfig);}  }
class C{  private void initWindowIcon(){  if (OSUtils.isMacOSX()) {    return;  }  for (  Window w : getWindows()) {    if (w.getParent() == null && w instanceof LimeJFrame) {      List<Image> iconImages=w.getIconImages();      if (iconImages.size() > 0) {        Image image=iconImages.get(0);        setIconImage(image);        return;      }    }  }}  }
class C{  @Override public DriverTask createConsistencyGroupClone(VolumeConsistencyGroup volumeConsistencyGroup,List<VolumeClone> volumes,List<CapabilityInstance> capabilities){  LOG.info("Creating consistency group clone for group {}",volumeConsistencyGroup.getDisplayName());  return cloneHelper.createVolumeClone(volumes);}  }
class C{  public String maxKTipText(){  return "The maximum number of alterations to the perceptron.";}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/metrics/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  public static BufferedImage toBufferedImage(Image image){  return ImageTransform.toBufferedImage(image,BufferedImage.TYPE_INT_ARGB_PRE);}  }
class C{  public final CC sizeGroup(String... xy){switch (xy.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + xy.length);case 2:  sizeGroupY(xy[1]);case 1:sizeGroupX(xy[0]);}return this;}  }
class C{  public ColCount(){}  }
class C{  @Override public boolean shouldVisit(Page referringPage,WebURL url){  String href=url.getURL().toLowerCase();  return !FILTERS.matcher(href).matches() && href.startsWith("http://www.ics.uci.edu/");}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  private void sendSelfPatch(State s){  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(s);  sendRequest(patch);}  }
class C{  public <T>T read(Class<? extends T> type,InputNode node,boolean strict) throws Exception {  Session session=manager.open(strict);  try {    return read(type,node,session);  }  finally {    manager.close();  }}  }
class C{  public Collective(String name,Observer o,Controller c){  this(name,o,null,c);}  }
class C{  public ZDT1(){  this(30);}  }
class C{  @SuppressWarnings("unchecked") protected void notifyTrainingSetAvailable(TrainingSetEvent e){  Vector<TrainingSetListener> l;synchronized (this) {    l=(Vector<TrainingSetListener>)m_trainingSetListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptTrainingSet(e);    }  }}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState.stage != startState.taskState.stage) {    ServiceUtils.logInfo(this,"Moving to stage %s",patchState.taskState.stage);    startState.taskState=patchState.taskState;  }  return startState;}  }
class C{  public static GeohashCellQuery.Builder geoHashCellQuery(String name,GeoPoint point){  return new GeohashCellQuery.Builder(name,point);}  }
class C{  @Override public void onCompletion(MediaPlayer player){  LogUtils.d(TAG,"onCompletion from MediaPlayer");  if (mCallback != null) {    mCallback.onCompletion();  }}  }
class C{  public LinkedList<Hypothesis> prune(LinkedList<Hypothesis> hypoList,double minUtility,double totalWeight,double totalPositiveWeight,double delta_p){  double delta_hp=delta_p / hypoList.size();  ListIterator it=hypoList.listIterator();  while (it.hasNext()) {    Hypothesis hypo=(Hypothesis)it.next();    double upperBound=theUtility.getUpperBound(totalWeight,totalPositiveWeight,hypo,delta_hp);    if (upperBound < minUtility) {      it.remove();    }  }  return hypoList;}  }
class C{  public ProgressEvent(ProgressSource source,URL url,String method,String contentType,ProgressSource.State state,long progress,long expected){  super(source);  this.url=url;  this.method=method;  this.contentType=contentType;  this.progress=progress;  this.expected=expected;  this.state=state;}  }
class C{  public void testBooleanOptions() throws Exception {  DatabaseMetaData dbmd=con.getMetaData();  assertTrue("locatorsUpdateCopy",dbmd.locatorsUpdateCopy());  assertTrue("supportsGetGeneratedKeys",dbmd.supportsGetGeneratedKeys());  assertTrue("supportsMultipleOpenResults",dbmd.supportsMultipleOpenResults());  assertTrue("supportsNamedParameters",dbmd.supportsNamedParameters());  assertFalse("supportsResultSetHoldability",dbmd.supportsResultSetHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT));  assertFalse("supportsResultSetHoldability",dbmd.supportsResultSetHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT));  assertTrue("supportsSavepoints",dbmd.supportsSavepoints());  assertTrue("supportsStatementPooling",dbmd.supportsStatementPooling());}  }
class C{  public MessageTokenizer(IMessage message){  this(message.getClient(),message.getContent());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.STATE_CASE__STATE:    if (resolve)     return getState();  return basicGetState();case SexecPackage.STATE_CASE__STEP:return getStep();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void init(){  status=STATUS_OK;  frameCount=0;  framePointer=-1;  frames=new ArrayList<GifFrame>();  gct=null;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (importFrom: ");  result.append(importFrom);  result.append(')');  return result.toString();}  }
class C{  public static IJavaElement create(String handleIdentifier,WorkingCopyOwner owner,JavaProject project){  if (handleIdentifier == null) {    return null;  }  if (owner == null)   owner=DefaultWorkingCopyOwner.PRIMARY;  MementoTokenizer memento=new MementoTokenizer(handleIdentifier);  return project.getHandleFromMemento(memento,owner);}  }
class C{  public double trace(DoubleMatrix2D A){  double sum=0;  for (int i=Math.min(A.rows(),A.columns()); --i >= 0; ) {    sum+=A.getQuick(i,i);  }  return sum;}  }
class C{  public Signer(final DsaSigner signer){  this.signer=signer;}  }
class C{  public MoveHandle(Figure owner,Locator locator){  super(owner,locator);}  }
class C{  public static byte[] gzip(String input){  FastByteArrayOutputStream baos=new FastByteArrayOutputStream();  PGZIPOutputStream gzos=null;  try {    gzos=new PGZIPOutputStream(baos);    gzos.write(input.getBytes("UTF-8"));  } catch (  IOException e) {    MainUtil.handleError(e);  } finally {    if (gzos != null)     try {      gzos.close();    } catch (    IOException ignore) {    }  }  return baos.toByteArray();}  }
class C{  public void vmDestroy(Vm vm){  if (vm != null) {    vmDeallocate(vm);    getVmList().remove(vm);    vm.setHost(null);  }}  }
class C{  public static String decompile(String source,int flags,UintMap properties){  int length=source.length();  if (length == 0) {    return "";  }  int indent=properties.getInt(INITIAL_INDENT_PROP,0);  if (indent < 0)   throw new IllegalArgumentException();  int indentGap=properties.getInt(INDENT_GAP_PROP,4);  if (indentGap < 0)   throw new IllegalArgumentException();  int caseGap=properties.getInt(CASE_GAP_PROP,2);  if (caseGap < 0)   throw new IllegalArgumentException();  StringBuffer result=new StringBuffer();  boolean justFunctionBody=(0 != (flags & Decompiler.ONLY_BODY_FLAG));  boolean toSource=(0 != (flags & Decompiler.TO_SOURCE_FLAG));  if (printSource) {    System.err.println("length:" + length);    for (int i=0; i < length; ++i) {      String tokenname=null;      if (Token.printNames) {        tokenname=Token.name(source.charAt(i));      }      if (tokenname == null) {        tokenname="---";      }      String pad=tokenname.length() > 7 ? "\t" : "\t\t";      System.err.println(tokenname + pad + (int)source.charAt(i)+ "\t'"+ ScriptRuntime.escapeString(source.substring(i,i + 1))+ "'");    }    System.err.println();  }  int braceNesting=0;  boolean afterFirstEOL=false;  int i=0;  int topFunctionType;  if (source.charAt(i) == Token.SCRIPT) {    ++i;    topFunctionType=-1;  } else {    topFunctionType=source.charAt(i + 1);  }  if (!toSource) {    result.append('\n');    for (int j=0; j < indent; j++)     result.append(' ');  } else {    if (topFunctionType == FunctionNode.FUNCTION_EXPRESSION) {      result.append('(');    }  }  while (i < length) {switch (source.charAt(i)) {case Token.GET:case Token.SET:      result.append(source.charAt(i) == Token.GET ? "get " : "set ");    ++i;  i=printSourceString(source,i + 1,false,result);++i;break;case Token.NAME:case Token.REGEXP:i=printSourceString(source,i + 1,false,result);continue;case Token.STRING:i=printSourceString(source,i + 1,true,result);continue;case Token.NUMBER:i=printSourceNumber(source,i + 1,result);continue;case Token.TRUE:result.append("true");break;case Token.FALSE:result.append("false");break;case Token.NULL:result.append("null");break;case Token.THIS:result.append("this");break;case Token.FUNCTION:++i;result.append("function ");break;case FUNCTION_END:break;case Token.COMMA:result.append(", ");break;case Token.LC:++braceNesting;if (Token.EOL == getNext(source,length,i)) indent+=indentGap;result.append('{');break;case Token.RC:{--braceNesting;if (justFunctionBody && braceNesting == 0) break;result.append('}');switch (getNext(source,length,i)) {case Token.EOL:case FUNCTION_END:indent-=indentGap;break;case Token.WHILE:case Token.ELSE:indent-=indentGap;result.append(' ');break;}break;}case Token.LP:result.append('(');break;case Token.RP:result.append(')');if (Token.LC == getNext(source,length,i)) result.append(' ');break;case Token.LB:result.append('[');break;case Token.RB:result.append(']');break;case Token.EOL:{if (toSource) break;boolean newLine=true;if (!afterFirstEOL) {afterFirstEOL=true;if (justFunctionBody) {result.setLength(0);indent-=indentGap;newLine=false;}}if (newLine) {result.append('\n');}if (i + 1 < length) {int less=0;int nextToken=source.charAt(i + 1);if (nextToken == Token.CASE || nextToken == Token.DEFAULT) {less=indentGap - caseGap;} else if (nextToken == Token.RC) {less=indentGap;} else if (nextToken == Token.NAME) {int afterName=getSourceStringEnd(source,i + 2);if (source.charAt(afterName) == Token.COLON) less=indentGap;}for (; less < indent; less++) result.append(' ');}break;}case Token.DOT:result.append('.');break;case Token.NEW:result.append("new ");break;case Token.DELPROP:result.append("delete ");break;case Token.IF:result.append("if ");break;case Token.ELSE:result.append("else ");break;case Token.FOR:result.append("for ");break;case Token.IN:result.append(" in ");break;case Token.WITH:result.append("with ");break;case Token.WHILE:result.append("while ");break;case Token.DO:result.append("do ");break;case Token.TRY:result.append("try ");break;case Token.CATCH:result.append("catch ");break;case Token.FINALLY:result.append("finally ");break;case Token.THROW:result.append("throw ");break;case Token.SWITCH:result.append("switch ");break;case Token.BREAK:result.append("break");if (Token.NAME == getNext(source,length,i)) result.append(' ');break;case Token.CONTINUE:result.append("continue");if (Token.NAME == getNext(source,length,i)) result.append(' ');break;case Token.CASE:result.append("case ");break;case Token.DEFAULT:result.append("default");break;case Token.RETURN:result.append("return");if (Token.SEMI != getNext(source,length,i)) result.append(' ');break;case Token.VAR:result.append("var ");break;case Token.SEMI:result.append(';');if (Token.EOL != getNext(source,length,i)) {result.append(' ');}break;case Token.ASSIGN:result.append(" = ");break;case Token.ASSIGN_ADD:result.append(" += ");break;case Token.ASSIGN_SUB:result.append(" -= ");break;case Token.ASSIGN_MUL:result.append(" *= ");break;case Token.ASSIGN_DIV:result.append(" /= ");break;case Token.ASSIGN_MOD:result.append(" %= ");break;case Token.ASSIGN_BITOR:result.append(" |= ");break;case Token.ASSIGN_BITXOR:result.append(" ^= ");break;case Token.ASSIGN_BITAND:result.append(" &= ");break;case Token.ASSIGN_LSH:result.append(" <<= ");break;case Token.ASSIGN_RSH:result.append(" >>= ");break;case Token.ASSIGN_URSH:result.append(" >>>= ");break;case Token.HOOK:result.append(" ? ");break;case Token.OBJECTLIT:result.append(':');break;case Token.COLON:if (Token.EOL == getNext(source,length,i)) result.append(':'); else result.append(" : ");break;case Token.OR:result.append(" || ");break;case Token.AND:result.append(" && ");break;case Token.BITOR:result.append(" | ");break;case Token.BITXOR:result.append(" ^ ");break;case Token.BITAND:result.append(" & ");break;case Token.SHEQ:result.append(" === ");break;case Token.SHNE:result.append(" !== ");break;case Token.EQ:result.append(" == ");break;case Token.NE:result.append(" != ");break;case Token.LE:result.append(" <= ");break;case Token.LT:result.append(" < ");break;case Token.GE:result.append(" >= ");break;case Token.GT:result.append(" > ");break;case Token.INSTANCEOF:result.append(" instanceof ");break;case Token.LSH:result.append(" << ");break;case Token.RSH:result.append(" >> ");break;case Token.URSH:result.append(" >>> ");break;case Token.TYPEOF:result.append("typeof ");break;case Token.VOID:result.append("void ");break;case Token.CONST:result.append("const ");break;case Token.NOT:result.append('!');break;case Token.BITNOT:result.append('~');break;case Token.POS:result.append('+');break;case Token.NEG:result.append('-');break;case Token.INC:result.append("++");break;case Token.DEC:result.append("--");break;case Token.ADD:result.append(" + ");break;case Token.SUB:result.append(" - ");break;case Token.MUL:result.append(" * ");break;case Token.DIV:result.append(" / ");break;case Token.MOD:result.append(" % ");break;case Token.COLONCOLON:result.append("::");break;case Token.DOTDOT:result.append("..");break;case Token.DOTQUERY:result.append(".(");break;case Token.XMLATTR:result.append('@');break;default :throw new RuntimeException("Token: " + Token.name(source.charAt(i)));}++i;}if (!toSource) {if (!justFunctionBody) result.append('\n');} else {if (topFunctionType == FunctionNode.FUNCTION_EXPRESSION) {result.append(')');}}return result.toString();}  }
class C{  public VisualRecognition(String versionDate,String apiKey){  this(versionDate);  setApiKey(apiKey);}  }
class C{  public static final File createTempFile(final Class<?> classObj,final String name) throws IOException {  String parserClassName=classObj.getName();  int idx=parserClassName.lastIndexOf('.');  if (idx != -1) {    parserClassName=parserClassName.substring(idx + 1);  }  idx=name.lastIndexOf('/');  final String fileName=(idx != -1) ? name.substring(idx + 1) : name;  idx=fileName.lastIndexOf('.');  final String fileExt=(idx > -1) ? fileName.substring(idx + 1) : "";  final File tempFile=File.createTempFile(parserClassName + "_" + ((idx > -1) ? fileName.substring(0,idx) : fileName),(!fileExt.isEmpty()) ? "." + fileExt : fileExt);  return tempFile;}  }
class C{  public static String[] filterMechs(String[] mechs,int[] policies,Map<String,?> props){  if (props == null) {    return mechs.clone();  }  boolean[] passed=new boolean[mechs.length];  int count=0;  for (int i=0; i < mechs.length; i++) {    if (passed[i]=checkPolicy(policies[i],props)) {      ++count;    }  }  String[] answer=new String[count];  for (int i=0, j=0; i < mechs.length; i++) {    if (passed[i]) {      answer[j++]=mechs[i];    }  }  return answer;}  }
class C{  public long diff(){  if (running)   return System.currentTimeMillis() - startTime; else   return stopTime - startTime;}  }
class C{  public static List<TimeSynchronizationSample> createTimeSynchronizationSamplesWithDifferentKeyPairs(final int startValue,final int count){  final List<TimeSynchronizationSample> samples=new ArrayList<>();  for (int i=0; i < count; i++) {    samples.add(createTimeSynchronizationSampleWithKeyPair(new KeyPair(),startValue + i));  }  return samples;}  }
class C{  @SuppressWarnings("unchecked") public final void testAddAllConstraintsFromArray(){  Constraint<CharSequence> constraint1=Constraints.containsNumber();  Constraint<CharSequence> constraint2=Constraints.containsLetter();  Constraint<CharSequence>[] constraints1=new Constraint[2];  constraints1[0]=constraint1;  constraints1[1]=constraint2;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllConstraints(constraints1);  passwordEditText.addAllConstraints(constraints1);  Collection<Constraint<CharSequence>> constraints2=passwordEditText.getConstraints();  assertEquals(constraints1.length,constraints2.size());  Iterator<Constraint<CharSequence>> iterator=constraints2.iterator();  assertEquals(constraint1,iterator.next());  assertEquals(constraint2,iterator.next());}  }
class C{  IMethodBinding resolveMethod(MethodDeclaration method){  return null;}  }
class C{  protected Path createPath(List<Position> positions){  Path path=new Path(positions);  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ARGUMENT__SPREAD:    return isSpread();case N4JSPackage.ARGUMENT__EXPRESSION:  return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void addBackupsToBackupRequestBuffer(FbService service,ServiceRequestBuffer backupSPB){  backupSPB.addArgument(isc_spb_bkp_file,"stdout");}  }
class C{  private void createModeShareHistoryChart(String title,String filePath,BenchmarkDataReader data,String xLabel,String yLabel,BenchmarkDataReader surveyData){  String[] newCategories=new String[data.getCategories().length + 2];  for (int p=0; p < data.getCategories().length; p++)   newCategories[p]=data.getCategories()[p];  newCategories[newCategories.length - 2]="";  newCategories[newCategories.length - 1]="Survey";  StackedBarChart stackedBarChart=new StackedBarChart(title,xLabel,yLabel,newCategories);  double[] modeShareArray=new double[newCategories.length];  int modeCount=0;  for (  String mode : data.getModes()) {    int i=0;    for (    Integer key : data.getDataMap().keySet()) {      Integer[] shares=data.getDataMap().get(key);      modeShareArray[i]=shares[modeCount] / data.getTotalTripsMap().get(key) * 100;      i++;    }    System.out.println(mode + "," + surveyData.getTripsPerModeMap().get(mode)+ ","+ surveyData.getTotalTrips());    modeShareArray[modeShareArray.length - 2]=0.0;    modeShareArray[modeShareArray.length - 1]=surveyData.getTripsPerModeMap().get(mode) / (double)surveyData.getTotalTrips() * 100;    stackedBarChart.addSeries(mode,modeShareArray);    modeCount++;  }  GraphEditor stackedBarChartEdit=new GraphEditor(stackedBarChart,10,0.0,100.0,commonColorScheme);  stackedBarChartEdit.stackedBarRenderer();  stackedBarChart.saveAsPng(filePath,1024,768);}  }
class C{  @Override public void paintComponent(Graphics g){  try {    super.paintComponent(g);  } catch (  NullPointerException e) {    log.fine("cannot repaint state viewer, waiting for next update: ");    e.printStackTrace();    isUpdating=false;  }}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int count=getChildCount();  mLeftWidth=0;  mRightWidth=0;  int maxHeight=0;  int maxWidth=0;  int childState=0;  for (int i=0; i < count; i++) {    final View child=getChildAt(i);    if (child.getVisibility() != GONE) {      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);      final LayoutParams lp=(LayoutParams)child.getLayoutParams();      if (lp.position == LayoutParams.POSITION_LEFT) {        mLeftWidth+=Math.max(maxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);      } else       if (lp.position == LayoutParams.POSITION_RIGHT) {        mRightWidth+=Math.max(maxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);      } else {        maxWidth=Math.max(maxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);      }      maxHeight=Math.max(maxHeight,child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);      childState=combineMeasuredStates(childState,child.getMeasuredState());    }  }  maxWidth+=mLeftWidth + mRightWidth;  maxHeight=Math.max(maxHeight,getSuggestedMinimumHeight());  maxWidth=Math.max(maxWidth,getSuggestedMinimumWidth());  setMeasuredDimension(resolveSizeAndState(maxWidth,widthMeasureSpec,childState),resolveSizeAndState(maxHeight,heightMeasureSpec,childState << MEASURED_HEIGHT_STATE_SHIFT));}  }
class C{  public static boolean isUrl(String url){  return URLUtil.isValidUrl(url) && !"http://".equals(url);}  }
class C{  String checkAllGuesses(Entity shooter,IGame game){  if (!LogLevel.DEBUG.equals(owner.getVerbosity())) {    return null;  }  String ret="";  List<Targetable> enemies=getTargetableEnemyEntities(shooter,game);  for (  Targetable enemy : enemies) {    for (    Mounted weapon : shooter.getWeaponList()) {      String shootingCheck=checkGuess(shooter,enemy,weapon,game);      if (shootingCheck != null) {        ret+=shootingCheck;      }    }    String physicalCheck;    physicalCheck=checkGuessPhysical(shooter,enemy,PhysicalAttackType.RIGHT_KICK,game);    if (physicalCheck != null) {      ret+=physicalCheck;    }    physicalCheck=checkGuessPhysical(shooter,enemy,PhysicalAttackType.LEFT_KICK,game);    if (physicalCheck != null) {      ret+=physicalCheck;    }    physicalCheck=checkGuessPhysical(shooter,enemy,PhysicalAttackType.RIGHT_PUNCH,game);    if (physicalCheck != null) {      ret+=physicalCheck;    }    physicalCheck=checkGuessPhysical(shooter,enemy,PhysicalAttackType.LEFT_PUNCH,game);    if (physicalCheck != null) {      ret+=physicalCheck;    }  }  if (StringUtil.isNullOrEmpty(ret)) {    return null;  }  return ret;}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean connect(String userName,String password){  File file=new File(dirName);  try {    file=file.getCanonicalFile();    return (file.exists());  } catch (  Exception e) {    e.printStackTrace();    return (false);  }}  }
class C{  public UpdateEventDetails clone(){  UpdateEventDetails result=new UpdateEventDetails();  result.NodeId=NodeId;  result.PerformInsertReplace=PerformInsertReplace;  result.Filter=Filter == null ? null : Filter.clone();  if (EventData != null) {    result.EventData=new HistoryEventFieldList[EventData.length];    for (int i=0; i < EventData.length; i++)     result.EventData[i]=EventData[i].clone();  }  return result;}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public long timestamp(){  return ts;}  }
class C{  private String extractUserNamePart(String uri){  int indexOfSipHeader=uri.indexOf(PhoneUtils.SIP_URI_HEADER);  if (indexOfSipHeader != -1) {    int startIndexOfUriAddress=uri.indexOf("@",indexOfSipHeader);    return uri.substring(indexOfSipHeader + PhoneUtils.SIP_URI_HEADER.length(),startIndexOfUriAddress);  }  return uri;}  }
class C{  public void writeFile(String name,String mimeType,String fileName,InputStream is) throws IOException {  if (is == null) {    throw new IllegalArgumentException("Input stream cannot be null.");  }  if (fileName == null || fileName.isEmpty()) {    throw new IllegalArgumentException("File name cannot be null or empty.");  }  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(NEWLINE);  out.writeBytes("Content-Disposition: form-data; name=\"" + name + "\"; filename=\""+ fileName+ "\"");  out.writeBytes(NEWLINE);  if (mimeType != null) {    out.writeBytes("Content-Type: " + mimeType);    out.writeBytes(NEWLINE);  }  out.writeBytes(NEWLINE);  byte[] data=new byte[1024];  int r=0;  while ((r=is.read(data,0,data.length)) != -1) {    out.write(data,0,r);  }  is.close();  out.writeBytes(NEWLINE);  out.flush();}  }
class C{  public void start(){  if (!started) {    stunStack.addRequestListener(this);    started=true;  }}  }
class C{  protected void onPreProcess(String what,String[] oldPathNames,String[] newPathNames,int opCode){}  }
class C{  public boolean isLastPOPrice(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_LastPOPrice);}  }
class C{  public boolean isAcceptAllFileFilterUsed(){  return useAcceptAllFileFilter;}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case UmplePackage.MODEL:    return createModel();case UmplePackage.PROGRAM_:  return createProgram_();case UmplePackage.ANONYMOUS_PROGRAM_1:return createAnonymous_program_1_();case UmplePackage.DIRECTIVE_:return createDirective_();case UmplePackage.GLOSSARY_:return createGlossary_();case UmplePackage.WORD_:return createWord_();case UmplePackage.STRICTNESS_:return createStrictness_();case UmplePackage.ANONYMOUS_STRICTNESS_1:return createAnonymous_strictness_1_();case UmplePackage.GENERATE_:return createGenerate_();case UmplePackage.GENERATE_PATH_:return createGenerate_path_();case UmplePackage.USE_STATEMENT_:return createUseStatement_();case UmplePackage.NAMESPACE_:return createNamespace_();case UmplePackage.ENTITY_:return createEntity_();case UmplePackage.COMMENT_:return createComment_();case UmplePackage.INLINE_COMMENT_:return createInlineComment_();case UmplePackage.MULTILINE_COMMENT_:return createMultilineComment_();case UmplePackage.DEBUG_:return createDebug_();case UmplePackage.ABSTRACT_:return createAbstract_();case UmplePackage.CLASS_DEFINITION_:return createClassDefinition_();case UmplePackage.EXTERNAL_DEFINITION_:return createExternalDefinition_();case UmplePackage.INTERFACE_DEFINITION_:return createInterfaceDefinition_();case UmplePackage.ASSOCIATION_DEFINITION_:return createAssociationDefinition_();case UmplePackage.ASSOCIATION_CLASS_DEFINITION_:return createAssociationClassDefinition_();case UmplePackage.CLASS_CONTENT_:return createClassContent_();case UmplePackage.ASSOCIATION_CLASS_CONTENT_:return createAssociationClassContent_();case UmplePackage.INTERFACE_BODY_:return createInterfaceBody_();case UmplePackage.INTERFACE_MEMBER_DECLARATION_:return createInterfaceMemberDeclaration_();case UmplePackage.CONSTANT_DECLARATION_:return createConstantDeclaration_();case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1:return createAnonymous_constantDeclaration_1_();case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_2:return createAnonymous_constantDeclaration_2_();case UmplePackage.MORE_CODE_:return createMoreCode_();case UmplePackage.ANONYMOUS_MORE_CODE_1:return createAnonymous_moreCode_1_();case UmplePackage.CODE_LANGS_:return createCodeLangs_();case UmplePackage.ANONYMOUS_CODE_LANGS_1:return createAnonymous_codeLangs_1_();case UmplePackage.CODE_LANG_:return createCodeLang_();case UmplePackage.METHOD_BODY_:return createMethodBody_();case UmplePackage.ANONYMOUS_METHOD_BODY_1:return createAnonymous_methodBody_1_();case UmplePackage.ANONYMOUS_METHOD_BODY_2:return createAnonymous_methodBody_2_();case UmplePackage.CONCRETE_METHOD_DECLARATION_:return createConcreteMethodDeclaration_();case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1:return createAnonymous_concreteMethodDeclaration_1_();case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_2:return createAnonymous_concreteMethodDeclaration_2_();case UmplePackage.ABSTRACT_METHOD_DECLARATION_:return createAbstractMethodDeclaration_();case UmplePackage.METHOD_DECLARATOR_:return createMethodDeclarator_();case UmplePackage.PARAMETER_LIST_:return createParameterList_();case UmplePackage.ANONYMOUS_PARAMETER_LIST_1:return createAnonymous_parameterList_1_();case UmplePackage.PARAMETER_:return createParameter_();case UmplePackage.ANONYMOUS_PARAMETER_1:return createAnonymous_parameter_1_();case UmplePackage.ASSOCIATION_:return createAssociation_();case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION_:return createSymmetricReflexiveAssociation_();case UmplePackage.INLINE_ASSOCIATION_:return createInlineAssociation_();case UmplePackage.INLINE_ASSOCIATION_END_:return createInlineAssociationEnd_();case UmplePackage.SINGLE_ASSOCIATION_END_:return createSingleAssociationEnd_();case UmplePackage.ASSOCIATION_END_:return createAssociationEnd_();case UmplePackage.MULTIPLICITY_:return createMultiplicity_();case UmplePackage.IS_SORTED_:return createIsSorted_();case UmplePackage.ATTRIBUTE_:return createAttribute_();case UmplePackage.SIMPLE_ATTRIBUTE_:return createSimpleAttribute_();case UmplePackage.AUTOUNIQUE_ATTRIBUTE_:return createAutouniqueAttribute_();case UmplePackage.DERIVED_ATTRIBUTE_:return createDerivedAttribute_();case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1:return createAnonymous_derivedAttribute_1_();case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2:return createAnonymous_derivedAttribute_2_();case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_3:return createAnonymous_derivedAttribute_3_();case UmplePackage.COMPLEX_ATTRIBUTE_:return createComplexAttribute_();case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1:return createAnonymous_complexAttribute_1_();case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_2:return createAnonymous_complexAttribute_2_();case UmplePackage.KEY_:return createKey_();case UmplePackage.ANONYMOUS_KEY_1:return createAnonymous_key_1_();case UmplePackage.DEPEND_:return createDepend_();case UmplePackage.EXTRA_CODE_:return createExtraCode_();case UmplePackage.SOFTWARE_PATTERN_:return createSoftwarePattern_();case UmplePackage.IS_A:return createIsA_();case UmplePackage.SINGLE_IS_A:return createSingleIsA_();case UmplePackage.ANONYMOUS_SINGLE_IS_A1:return createAnonymous_singleIsA_1_();case UmplePackage.MULTIPLE_IS_A:return createMultipleIsA_();case UmplePackage.ANONYMOUS_MULTIPLE_IS_A1:return createAnonymous_multipleIsA_1_();case UmplePackage.SINGLETON_:return createSingleton_();case UmplePackage.IMMUTABLE_:return createImmutable_();case UmplePackage.KEY_DEFINITION_:return createKeyDefinition_();case UmplePackage.CODE_INJECTION_:return createCodeInjection_();case UmplePackage.BEFORE_CODE_:return createBeforeCode_();case UmplePackage.ANONYMOUS_BEFORE_CODE_1:return createAnonymous_beforeCode_1_();case UmplePackage.ANONYMOUS_BEFORE_CODE_2:return createAnonymous_beforeCode_2_();case UmplePackage.AFTER_CODE_:return createAfterCode_();case UmplePackage.ANONYMOUS_AFTER_CODE_1:return createAnonymous_afterCode_1_();case UmplePackage.ANONYMOUS_AFTER_CODE_2:return createAnonymous_afterCode_2_();case UmplePackage.STATE_MACHINE_DEFINITION_:return createStateMachineDefinition_();case UmplePackage.STATE_MACHINE_:return createStateMachine_();case UmplePackage.ACTIVE_DEFINITION_:return createActiveDefinition_();case UmplePackage.INLINE_STATE_MACHINE_:return createInlineStateMachine_();case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1:return createAnonymous_inlineStateMachine_1_();case UmplePackage.REFERENCED_STATE_MACHINE_:return createReferencedStateMachine_();case UmplePackage.EXTENDED_STATE_MACHINE_:return createExtendedStateMachine_();case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1:return createAnonymous_extendedStateMachine_1_();case UmplePackage.ENUM_:return createEnum_();case UmplePackage.ANONYMOUS_ENUM_1:return createAnonymous_enum_1_();case UmplePackage.STATE_:return createState_();case UmplePackage.ANONYMOUS_STATE_1:return createAnonymous_state_1_();case UmplePackage.STATE_INTERNAL_:return createStateInternal_();case UmplePackage.STATE_ENTITY_:return createStateEntity_();case UmplePackage.AUTO_TRANSITION_:return createAutoTransition_();case UmplePackage.AUTO_TRANSITION_BLOCK_:return createAutoTransitionBlock_();case UmplePackage.TRANSITION_:return createTransition_();case UmplePackage.EVENT_DEFINITION_:return createEventDefinition_();case UmplePackage.ANONYMOUS_EVENT_DEFINITION_1:return createAnonymous_eventDefinition_1_();case UmplePackage.AFTER_EVERY_EVENT_:return createAfterEveryEvent_();case UmplePackage.AFTER_EVENT_:return createAfterEvent_();case UmplePackage.ACTION_:return createAction_();case UmplePackage.ANONYMOUS_ACTION_1:return createAnonymous_action_1_();case UmplePackage.ANONYMOUS_ACTION_2:return createAnonymous_action_2_();case UmplePackage.ENTRY_OR_EXIT_ACTION_:return createEntryOrExitAction_();case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1:return createAnonymous_entryOrExitAction_1_();case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_2:return createAnonymous_entryOrExitAction_2_();case UmplePackage.ACTIVITY_:return createActivity_();case UmplePackage.ANONYMOUS_ACTIVITY_1:return createAnonymous_activity_1_();case UmplePackage.ANONYMOUS_ACTIVITY_2:return createAnonymous_activity_2_();case UmplePackage.MORE_GUARDS_:return createMoreGuards_();case UmplePackage.ANONYMOUS_MORE_GUARDS_1:return createAnonymous_moreGuards_1_();case UmplePackage.GUARD_:return createGuard_();case UmplePackage.ANONYMOUS_GUARD_1:return createAnonymous_guard_1_();case UmplePackage.ANONYMOUS_GUARD_2:return createAnonymous_guard_2_();case UmplePackage.TRACE_TYPE_:return createTraceType_();case UmplePackage.ANONYMOUS_TRACE_TYPE_1:return createAnonymous_traceType_1_();case UmplePackage.ANONYMOUS_TRACE_TYPE_2:return createAnonymous_traceType_2_();case UmplePackage.TRACE_:return createTrace_();case UmplePackage.TRACE_DIRECTIVE_:return createTraceDirective_();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1:return createAnonymous_traceDirective_1_();case UmplePackage.TRACE_ITEM_:return createTraceItem_();case UmplePackage.TRACE_ENTITY_:return createTraceEntity_();case UmplePackage.ANONYMOUS_TRACE_ENTITY_1:return createAnonymous_traceEntity_1_();case UmplePackage.TRACE_OPTIONS_:return createTraceOptions_();case UmplePackage.ANONYMOUS_TRACE_OPTIONS_1:return createAnonymous_traceOptions_1_();case UmplePackage.TRACE_OPTION_:return createTraceOption_();case UmplePackage.PRE_OR_POST_CONDITION_:return createPreOrPostCondition_();case UmplePackage.EXECUTE_CLAUSE_:return createExecuteClause_();case UmplePackage.TRACE_WHEN_:return createTraceWhen_();case UmplePackage.TRACE_FOR_:return createTraceFor_();case UmplePackage.TRACE_LEVEL_:return createTraceLevel_();case UmplePackage.TRACE_PERIOD_:return createTracePeriod_();case UmplePackage.TRACE_DURING_:return createTraceDuring_();case UmplePackage.TRACE_RECORD_:return createTraceRecord_();case UmplePackage.RECORD_ENTITY_:return createRecordEntity_();case UmplePackage.ANONYMOUS_RECORD_ENTITY_2:return createAnonymous_recordEntity_2_();case UmplePackage.TRACE_CONDITION_:return createTraceCondition_();case UmplePackage.CONDITION_RHS_:return createConditionRHS_();case UmplePackage.TRACE_CASE_:return createTraceCase_();case UmplePackage.TRACE_CASE_DEF_:return createTraceCaseDef_();case UmplePackage.TRACE_CASE_ACTIVATION_:return createTraceCaseActivation_();case UmplePackage.TRACE_CASE_DEACTIVATION_:return createTraceCaseDeactivation_();case UmplePackage.DE_ACTIVATE_FOR_:return createDeActivateFor_();case UmplePackage.PRECONDITION_:return createPrecondition_();case UmplePackage.POSTCONDITION_:return createPostcondition_();case UmplePackage.INVARIANT_:return createInvariant_();case UmplePackage.ANONYMOUS_INVARIANT_1:return createAnonymous_invariant_1_();case UmplePackage.ANONYMOUS_INVARIANT_2:return createAnonymous_invariant_2_();case UmplePackage.CONSTRAINT_TOKEN_:return createConstraintToken_();case UmplePackage.CONSTRAINT_:return createConstraint_();case UmplePackage.ANONYMOUS_CONSTRAINT_1:return createAnonymous_constraint_1_();case UmplePackage.NEGATIVE_CONSTRAINT_:return createNegativeConstraint_();case UmplePackage.CONSTRAINT_BODY_:return createConstraintBody_();case UmplePackage.ANONYMOUS_CONSTRAINT_BODY_1:return createAnonymous_constraintBody_1_();case UmplePackage.LINKING_OP_:return createLinkingOp_();case UmplePackage.ANONYMOUS_LINKING_OP_1:return createAnonymous_linkingOp_1_();case UmplePackage.ANONYMOUS_LINKING_OP_2:return createAnonymous_linkingOp_2_();case UmplePackage.ANONYMOUS_LINKING_OP_3:return createAnonymous_linkingOp_3_();case UmplePackage.CONSTRAINT_EXPR_:return createConstraintExpr_();case UmplePackage.ANONYMOUS_CONSTRAINT_EXPR_1:return createAnonymous_constraintExpr_1_();case UmplePackage.COMPOUND_EXPR_:return createCompoundExpr_();case UmplePackage.BOOL_EXPR_:return createBoolExpr_();case UmplePackage.STRING_EXPR_:return createStringExpr_();case UmplePackage.STRING_LIT_:return createStringLit_();case UmplePackage.GEN_EXPR_:return createGenExpr_();case UmplePackage.ANONYMOUS_GEN_EXPR_1:return createAnonymous_genExpr_1_();case UmplePackage.ANONYMOUS_GEN_EXPR_2:return createAnonymous_genExpr_2_();case UmplePackage.NUM_EXPR_:return createNumExpr_();case UmplePackage.ANONYMOUS_NUM_EXPR_1:return createAnonymous_numExpr_1_();case UmplePackage.ANONYMOUS_NUM_EXPR_2:return createAnonymous_numExpr_2_();case UmplePackage.ANONYMOUS_NUM_EXPR_3:return createAnonymous_numExpr_3_();case UmplePackage.ANONYMOUS_NUM_EXPR_4:return createAnonymous_numExpr_4_();case UmplePackage.EQUALITY_OP_:return createEqualityOp_();case UmplePackage.EQUALS_OP_:return createEqualsOp_();case UmplePackage.NOTEQUALS_OP_:return createNotequalsOp_();case UmplePackage.ORDINAL_OP_:return createOrdinalOp_();case UmplePackage.GREATER_OP_:return createGreaterOp_();case UmplePackage.LESS_OP_:return createLessOp_();case UmplePackage.MORE_OP_:return createMoreOp_();case UmplePackage.SMALLER_OP_:return createSmallerOp_();case UmplePackage.POSITION_:return createPosition_();case UmplePackage.ELEMENT_POSITION_:return createElementPosition_();case UmplePackage.ASSOCIATION_POSITION_:return createAssociationPosition_();case UmplePackage.COORDINATE_:return createCoordinate_();case UmplePackage.DISPLAY_COLOR_:return createDisplayColor_();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) public void updateClasspath(@QueryParam("projectpath") String projectPath,List<ClasspathEntryDto> entries) throws JavaModelException, ServerException, ForbiddenException, ConflictException, NotFoundException, IOException {  IJavaProject javaProject=model.getJavaProject(projectPath);  javaProject.setRawClasspath(createModifiedEntry(entries),javaProject.getOutputLocation(),new NullProgressMonitor());  updateProjectConfig(projectPath);}  }
class C{  public static Integer changeRegister(final JFrame parent,final IDebugger debugger,final JRegisterView registerView,final long currentTid,final int registerIndex,final BigInteger value){  try {    registerView.setEnabled(false);    return debugger.setRegister(currentTid,registerIndex,value);  } catch (  final DebugExceptionWrapper exception) {    registerView.setEnabled(true);    CUtilityFunctions.logException(exception);    final String innerMessage="E00105: " + "Could not send register change request";    final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the request to change the register value to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The value of the register did not change."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);    return null;  }}  }
class C{  public ContentSettingException(int type,String pattern,String setting,String source){  mContentSettingType=type;  mPattern=pattern;  mSetting=setting;  mSource=source;}  }
class C{  public synchronized void add(String category,double value){  mCategories.add(category);  mValues.add(value);}  }
class C{  public IllegalThreadStateException(){}  }
class C{  public SimpleClassifierAdapter(){  this.learner=((org.apache.samoa.moa.classifiers.Classifier)this.learnerOption.getValue()).copy();  this.isInit=false;}  }
class C{  public static List<MethodNode> chooseBestMethod(final ClassNode receiver,Collection<MethodNode> methods,ClassNode... args){  if (methods.isEmpty())   return Collections.emptyList();  if (isUsingUncheckedGenerics(receiver)) {    ClassNode raw=makeRawType(receiver);    return chooseBestMethod(raw,methods,args);  }  List<MethodNode> bestChoices=new LinkedList<MethodNode>();  int bestDist=Integer.MAX_VALUE;  Collection<MethodNode> choicesLeft=removeCovariantsAndInterfaceEquivalents(methods);  for (  MethodNode candidateNode : choicesLeft) {    ClassNode declaringClassForDistance=candidateNode.getDeclaringClass();    ClassNode actualReceiverForDistance=receiver != null ? receiver : candidateNode.getDeclaringClass();    MethodNode safeNode=candidateNode;    ClassNode[] safeArgs=args;    boolean isExtensionMethodNode=candidateNode instanceof ExtensionMethodNode;    if (isExtensionMethodNode) {      safeArgs=new ClassNode[args.length + 1];      System.arraycopy(args,0,safeArgs,1,args.length);      safeArgs[0]=receiver;      safeNode=((ExtensionMethodNode)candidateNode).getExtensionMethodNode();    }    Parameter[] params=makeRawTypes(safeNode.getParameters());    int dist=measureParametersAndArgumentsDistance(params,safeArgs);    if (dist >= 0) {      dist+=getClassDistance(declaringClassForDistance,actualReceiverForDistance);      dist+=getExtensionDistance(isExtensionMethodNode);      if (dist < bestDist) {        bestChoices.clear();        bestChoices.add(candidateNode);        bestDist=dist;      } else       if (dist == bestDist) {        bestChoices.add(candidateNode);      }    }  }  if (bestChoices.size() > 1) {    List<MethodNode> onlyExtensionMethods=new LinkedList<MethodNode>();    for (    MethodNode choice : bestChoices) {      if (choice instanceof ExtensionMethodNode) {        onlyExtensionMethods.add(choice);      }    }    if (onlyExtensionMethods.size() == 1) {      return onlyExtensionMethods;    }  }  return bestChoices;}  }
class C{  public void push(int state_num){  vstack.push(new Integer(state_num));}  }
class C{  protected void sequence_MemberExpression_IndexedAccessExpression_1_3_3_0_0_ParameterizedPropertyAccessExpression_1_3_3_1_0_TaggedTemplateString_1_3_3_2_0(ISerializationContext context,TaggedTemplateString semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TARGET) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TARGET));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TEMPLATE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TEMPLATE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),semanticObject.getTarget());  feeder.accept(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0(),semanticObject.getTemplate());  feeder.finish();}  }
class C{  @Deprecated public static Component findFocusOwner(Component c){  Component focusOwner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  for (Component temp=focusOwner; temp != null; temp=(temp instanceof Window) ? null : temp.getParent()) {    if (temp == c) {      return focusOwner;    }  }  return null;}  }
class C{  public void notifyDataSetChanged(){  super.removeAllViews();  layout.removeAllViews();  final Point s=new Point();  getDisplay().getSize(s);  int screen_width=s.x;  final int last_item=tabs.size() - 1;  int tabWidth=screen_width / tabs.size() - (borderEdge ? (int)(borderwidth * density) : 0);  LinearLayout.LayoutParams params=genlayoutParams(tabWidth);  if (!scrollable) {    for (int i=0; i < tabs.size(); i++) {      MaterialTab t=tabs.get(i);      if (!outterBorderEnable && borderEdge && i == last_item) {        params=genlayoutParams(tabWidth + (int)density);      }      layout.addView(t.getView(),params);      if (borderEdge && i < last_item && !outterBorderEnable)       layout.addView(prepareBorderView());      if (borderEdge && outterBorderEnable)       layout.addView(prepareBorderView());    }  } else {    if (!isTablet) {      for (int i=0; i < tabs.size(); i++) {        MaterialTab tab=tabs.get(i);        tabWidth=(int)(tab.getTabMinWidth() + (24 * density));        if (i == 0) {          View view=new View(layout.getContext());          view.setMinimumWidth((int)(60 * density));          layout.addView(view);        }        params=genlayoutParams(tabWidth);        if (!outterBorderEnable && borderEdge && i == last_item) {          params=genlayoutParams(tabWidth + (int)density);        }        layout.addView(tab.getView(),params);        if (borderEdge && i < last_item && !outterBorderEnable)         layout.addView(prepareBorderView());        if (borderEdge && outterBorderEnable)         layout.addView(prepareBorderView());        if (i == tabs.size() - 1) {          View view=new View(layout.getContext());          view.setMinimumWidth((int)(60 * density));          layout.addView(view);        }      }    } else {      for (int i=0; i < tabs.size(); i++) {        MaterialTab tab=tabs.get(i);        tabWidth=(int)(tab.getTabMinWidth() + (48 * density));        params=genlayoutParams(tabWidth);        if (!outterBorderEnable && borderEdge && i == last_item) {          params=genlayoutParams(tabWidth + (int)density);        }        layout.addView(tab.getView(),params);        if (borderEdge && i < last_item && !outterBorderEnable)         layout.addView(prepareBorderView());        if (borderEdge && outterBorderEnable)         layout.addView(prepareBorderView());      }    }  }  if (isTablet && scrollable) {    Resources res=getResources();    left=new ImageButton(this.getContext());    left.setId(R.id.left);    left.setImageDrawable(res.getDrawable(R.drawable.left_arrow));    left.setBackgroundColor(Color.TRANSPARENT);    left.setOnClickListener(this);    RelativeLayout.LayoutParams paramsLeft=new LayoutParams((int)(56 * density),(int)(48 * density));    paramsLeft.addRule(RelativeLayout.ALIGN_PARENT_LEFT);    paramsLeft.addRule(RelativeLayout.ALIGN_PARENT_TOP);    paramsLeft.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);    this.addView(left,paramsLeft);    right=new ImageButton(this.getContext());    right.setId(R.id.right);    right.setImageDrawable(res.getDrawable(R.drawable.right_arrow));    right.setBackgroundColor(Color.TRANSPARENT);    right.setOnClickListener(this);    RelativeLayout.LayoutParams paramsRight=new LayoutParams((int)(56 * density),(int)(48 * density));    paramsRight.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);    paramsRight.addRule(RelativeLayout.ALIGN_PARENT_TOP);    paramsRight.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);    this.addView(right,paramsRight);    RelativeLayout.LayoutParams paramsScroll=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);    paramsScroll.addRule(RelativeLayout.LEFT_OF,R.id.right);    paramsScroll.addRule(RelativeLayout.RIGHT_OF,R.id.left);    this.addView(scrollView,paramsScroll);  } else {    RelativeLayout.LayoutParams paramsScroll=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);    this.addView(scrollView,paramsScroll);  }  this.setSelectedNavigationItem(tabSelected);}  }
class C{  public Encrypted(byte[] data){  this.encrypted=data;}  }
class C{  private void assertNotBefore(final long t1,final long t2){  try {    assertBefore(t1,t2);    fail("Not expecting t1(" + t1 + ") to be 'before' t2("+ t2+ ")");  } catch (  ClocksNotSynchronizedException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  private void fciOrientbk(IKnowledge bk,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=bk.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.CIRCLE);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=bk.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  public void pattern(String pattern){  for (int i=0; i < m_Selected.length; i++) {    m_Selected[i]=Pattern.matches(pattern,m_Instances.attribute(i).name());  }  fireTableRowsUpdated(0,m_Selected.length);}  }
class C{  public <T>void putObject(String key,T value){  Gson gson=new Gson();  sharedPreferences.edit().putString(key,gson.toJson(value)).apply();}  }
class C{  private void reset(){  changeSet=null;}  }
class C{  private static byte[] cleanseKeyData(byte[] keyData) throws IOException {  StringBuilder sb=new StringBuilder();  String[] lines=new String(keyData).split("\n");  String[] skips=new String[]{"-----BEGIN","-----END",": "};  for (  String line : lines) {    boolean skipLine=false;    for (    String skip : skips) {      if (line.contains(skip)) {        skipLine=true;      }    }    if (!skipLine) {      sb.append(line.trim());    }  }  return Base64.decode(sb.toString());}  }
class C{  private JSONObject fetchJSONFromUrl(String urlString) throws JSONException {  BufferedReader reader=null;  try {    URLConnection urlConnection=new URL(urlString).openConnection();    reader=new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"iso-8859-1"));    StringBuilder sb=new StringBuilder();    String line;    while ((line=reader.readLine()) != null) {      sb.append(line);    }    return new JSONObject(sb.toString());  } catch (  JSONException e) {    throw e;  }catch (  Exception e) {    LogHelper.e(TAG,"Failed to parse the json for media list",e);    return null;  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  try {    if (fDeclHandler != null) {      String publicId=identifier.getPublicId();      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();      fDeclHandler.externalEntityDecl(name,publicId,systemId);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public static int unsafeArrayOffset(ByteBuffer b){  return ((ByteArrayBuffer)b).arrayOffset;}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public void awaitConnectionToReplicationCluster() throws InterruptedException {  replicationClusterConnectedLatch.await();}  }
class C{  protected void writeLocalFileHeader(JBZipEntry ze) throws IOException {  ze.setHeaderOffset(written);  writeOut(LFH_SIG);  writeOutShort(10);  writeOutShort(0);  writeOutShort(ze.getMethod());  writeOutLong(DosTime.javaToDosTime(ze.getTime()));  writeOutLong(ze.getCrc());  writeOutLong(ze.getCompressedSize());  writeOutLong(ze.getSize());  byte[] name=getBytes(ze.getName());  writeOutShort(name.length);  byte[] extra=ze.getLocalFileDataExtra();  writeOutShort(extra.length);  writeOut(name);  writeOut(extra);}  }
class C{  @Override public <T>List<Binding<T>> bindings(Key<T> key){  BindingSet<T> set=(BindingSet)_bindingSetMap.get(key.rawClass());  if (set != null) {    return set.bindings(key);  } else {    return Collections.EMPTY_LIST;  }}  }
class C{  public static <I,A>Parser<I,A> safeRetn(Supplier<A> supplier,String expected){  return null;}  }
class C{  public double precision(){  return pairconfuse[0] / (double)(pairconfuse[0] + pairconfuse[2]);}  }
class C{  public static long currentTimeMillis(){  return 0l;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.REF_PARAM__TYPE:    setType((Type)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private PresentationDirection(int value){  super(value);}  }
class C{  public void tagDefineBitsJPEG2(int id,InputStream jpegImage) throws IOException {  startTag(TAG_DEFINEBITSJPEG2,id,true);  out.writeUI8(0xff);  out.writeUI8(0xd9);  out.writeUI8(0xff);  out.writeUI8(0xd8);  int read=0;  byte[] bytes=new byte[10000];  while ((read=jpegImage.read(bytes)) >= 0) {    out.write(bytes,0,read);  }  jpegImage.close();  completeTag();}  }
class C{  public static String formatMillisToSeconds(long time){  double sec=time / 1000d;  return millisFormat.format(sec) + " s";}  }
class C{  public Object nextValue(){  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuffer sb=new StringBuffer();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw new RuntimeException("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  private Coords tryToBuildBridge(Coords start,int direction){  if (!board.contains(start))   return null;  Vector<Coords> hexes=new Vector<Coords>(7);  Coords end=null;  Coords next=start.translated(direction);  while (hexes.size() < 6) {    if (!board.contains(next)) {      break;    }    if (!hexNeedsBridge(board.getHex(next))) {      end=next;      break;    }    hexes.add(next);    next=next.translated(direction);  }  if (end != null) {    if (hexes.size() == 0)     return null;    int elev1=board.getHex(start).getLevel();    int elev2=board.getHex(end).getLevel();    int elevBridge=board.getHex(end).terrainLevel(Terrains.BRIDGE);    if (elevBridge >= 0) {      if (Math.abs(elev2 + elevBridge - elev1) > 2)       return null;      elev1=elev2 + elevBridge;    } else {      if (Math.abs(elev1 - elev2) > 4) {        return null;      }      elev1=(elev1 + elev2) / 2;    }    int exits=(1 << direction) | (1 << ((direction + 3) % 6));    int cf=mapSettings.getCityMinCF() + Compute.randomInt(1 + mapSettings.getCityMaxCF() - mapSettings.getCityMinCF());    for (Enumeration<Coords> e=hexes.elements(); e.hasMoreElements(); ) {      Coords c=e.nextElement();      addBridge(board.getHex(c),exits,elev1,cf);    }    connectHexes(start,hexes.firstElement(),1);    connectHexes(end,hexes.lastElement(),1);  }  return end;}  }
class C{  public void addPutstatic(CtClass c,String name,String desc){  addPutstatic0(c,null,name,desc);}  }
class C{  public void toMatrix(float[] matrix){  float xx=x * x;  float xy=x * y;  float xz=x * z;  float xw=x * w;  float yy=y * y;  float yz=y * z;  float yw=y * w;  float zz=z * z;  float zw=z * w;  matrix[Matrix4.M00]=1 - 2 * (yy + zz);  matrix[Matrix4.M01]=2 * (xy - zw);  matrix[Matrix4.M02]=2 * (xz + yw);  matrix[Matrix4.M03]=0;  matrix[Matrix4.M10]=2 * (xy + zw);  matrix[Matrix4.M11]=1 - 2 * (xx + zz);  matrix[Matrix4.M12]=2 * (yz - xw);  matrix[Matrix4.M13]=0;  matrix[Matrix4.M20]=2 * (xz - yw);  matrix[Matrix4.M21]=2 * (yz + xw);  matrix[Matrix4.M22]=1 - 2 * (xx + yy);  matrix[Matrix4.M23]=0;  matrix[Matrix4.M30]=0;  matrix[Matrix4.M31]=0;  matrix[Matrix4.M32]=0;  matrix[Matrix4.M33]=1;}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  public String toString(){switch (type) {case UNKNOWN:    return "unknown";case NXDOMAIN:  return "NXDOMAIN";case NXRRSET:return "NXRRSET";case DELEGATION:return "delegation: " + data;case CNAME:return "CNAME: " + data;case DNAME:return "DNAME: " + data;case SUCCESSFUL:return "successful";default :throw new IllegalStateException();}}  }
class C{  public void addFeature(GlobalFeature feature){  listOfFeatures.add(feature);}  }
class C{  public boolean isSessionEstablished(){  return mSessionEstablished;}  }
class C{  MessageProcessor(NetAccessManager netAccessManager) throws IllegalArgumentException {  if (netAccessManager == null)   throw new NullPointerException("netAccessManager");  BlockingQueue<RawMessage> messageQueue=netAccessManager.getMessageQueue();  if (messageQueue == null) {    throw new IllegalArgumentException("The message queue may not be null");  }  MessageEventHandler messageEventHandler=netAccessManager.getMessageEventHandler();  if (messageEventHandler == null) {    throw new IllegalArgumentException("The message event handler may not be null");  }  this.netAccessManager=netAccessManager;  this.messageQueue=messageQueue;  this.messageEventHandler=messageEventHandler;  this.errorHandler=netAccessManager;}  }
class C{  PageParamInfo(Type type,String pagePattern,List<PageInfo> allPageInfo,LinearFormula formula,String nextPagingUrl){  mType=type;  mPagePattern=pagePattern;  mAllPageInfo=allPageInfo;  mFormula=formula;  mNextPagingUrl=nextPagingUrl;}  }
class C{  @Override public void check(Certificate cert,Collection<String> unresCritExts) throws CertPathValidatorException {  X509Certificate currCert=(X509Certificate)cert;  remainingCerts--;  if (remainingCerts == 0) {    if (targetConstraints != null && targetConstraints.match(currCert) == false) {      throw new CertPathValidatorException("target certificate " + "constraints check failed");    }  } else {    verifyCAKeyUsage(currCert);  }  if (unresCritExts != null && !unresCritExts.isEmpty()) {    unresCritExts.remove(KeyUsage_Id.toString());    unresCritExts.remove(ExtendedKeyUsage_Id.toString());    unresCritExts.remove(SubjectAlternativeName_Id.toString());  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x112CC951,version=150) public int sceUsbGetDrvState(PspString driverName){  return 0;}  }
class C{  public static FetchDistLockInfoResponse create(DistributionManager dm,InternalDistributedMember recipient){  FetchDistLockInfoResponse m=new FetchDistLockInfoResponse();  InternalDistributedMember id=dm.getDistributionManagerId();  Set entries=DLockService.snapshotAllServices().entrySet();  List infos=new ArrayList();  Iterator iter=entries.iterator();  while (iter.hasNext()) {    Map.Entry entry=(Map.Entry)iter.next();    String serviceName=entry.getKey().toString();    DLockService service=(DLockService)entry.getValue();    Set serviceEntries=service.snapshotService().entrySet();    Iterator iter1=serviceEntries.iterator();    while (iter1.hasNext()) {      Map.Entry token=(Map.Entry)iter1.next();      infos.add(new RemoteDLockInfo(serviceName,token.getKey().toString(),(DLockToken)token.getValue(),id));    }  }  m.lockInfos=(DLockInfo[])infos.toArray(new DLockInfo[0]);  m.setRecipient(recipient);  return m;}  }
class C{  private void checkItems(){  if (mChooserAdapter.getCount() == 0)   mGetStartedText.setVisibility(View.VISIBLE); else   mGetStartedText.setVisibility(View.GONE);}  }
class C{  public Years plus(int years){  if (years == 0) {    return this;  }  return Years.years(FieldUtils.safeAdd(getValue(),years));}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public float svgToUserSpace(float v,short type,short pcInterp){  if (unitContext == null) {    unitContext=new UnitContext();  }  if (pcInterp == PERCENTAGE_FONT_SIZE && type == SVGLength.SVG_LENGTHTYPE_PERCENTAGE) {    return 0f;  } else {    return UnitProcessor.svgToUserSpace(v,type,(short)(3 - pcInterp),unitContext);  }}  }
class C{  public static <T>Subscriber<T> create(Subscriber<T> actual){  return new SerializedSubscriber<>(actual);}  }
class C{  private void filterRemoteInitiators(StorageSystem system,URI varray,Map<URI,List<Initiator>> net2InitiatorsMap,Map<URI,NetworkLite> networkMap){  Set<URI> localNetworks=getStorageSystemLocalNetworks(system,varray.toString());  Map<URI,Map<URI,List<Initiator>>> hostInitiatorsMap=getHostInitiatorsMap(net2InitiatorsMap);  Iterator<URI> itr=net2InitiatorsMap.keySet().iterator();  while (itr.hasNext()) {    URI key=itr.next();    for (    URI hostURI : hostInitiatorsMap.keySet()) {      Collection<URI> hostNetworks=getHostFilteredNetworks(localNetworks,hostInitiatorsMap.get(hostURI).keySet());      if (!hostNetworks.contains(key)) {        if (hostInitiatorsMap.get(hostURI).get(key) != null) {          _log.info("Removing initiators {} for host {} because they have routed access " + " to the storage system while other initiators have local access.",hostInitiatorsMap.get(hostURI).get(key),hostURI);          net2InitiatorsMap.get(key).removeAll(hostInitiatorsMap.get(hostURI).get(key));        }      }    }    if (net2InitiatorsMap.get(key).isEmpty()) {      itr.remove();      networkMap.remove(key);    }  }}  }
class C{  public TungstenProperties(boolean sorted){  properties=new HashMap<String,Object>();  this.sorted=sorted;}  }
class C{  public static Map<String,String> convertObjectMapToStringMap(Object obj){  final Map<Object,Object> map=(Map<Object,Object>)obj;  final Map<String,String> metadata=new HashMap<>();  for (  Map.Entry<Object,Object> entry : map.entrySet()) {    metadata.put(String.valueOf(entry.getKey()),String.valueOf(entry.getValue()));  }  return metadata;}  }
class C{  public String property(String name,Properties props){  return props.getProperty(name);}  }
class C{  public String shardName(){  return shardName;}  }
class C{  public void stop(){  stop(true);}  }
class C{  public LagrangePolynomial(double[] x,double[] y){  if (x.length != y.length)   throw new IllegalArgumentException("Lengths of x and y arrays do not match");  this.x=x.clone();  this.y=y.clone();  order=x.length - 1;  weights=BarycentricWeights(x);}  }
class C{  public void step(SimState state){  MessagePropagationSimulation sim=(MessagePropagationSimulation)state;  double time=sim.schedule.getTime();  String author;  boolean popularAuthor;  if (sim.schedule.getSteps() == 0) {    try {      author=((ProximitySimulation)sim).messageAuthor;      popularAuthor=((ProximitySimulation)sim).popularAuthor;    } catch (    ClassCastException e) {      author=((StAndrewsSimulation)sim).messageAuthor;      popularAuthor=((StAndrewsSimulation)sim).popularAuthor;    }    if (author == ProximitySimulation.POPULAR_AUTHOR) {      if (popularAuthor) {        System.err.println("Message from a popular person.");      } else {        System.err.println("Message from an unpopular person.");      }      authorMessagePopular(popularAuthor);    } else     if (author == ProximitySimulation.ADVERSARIAL_AUTHOR) {      authorMessageAdversarial();      System.err.println("Message from an adversary.");    } else {      System.err.println("Message from an average person.");      authorMessage();    }  }  Bag people=sim.socialNetwork.getAllNodes();  int seenTrackedMessageCount=0;  for (int i=0; i < people.numObjs; i++) {    Person person=(Person)people.objs[i];    if (person.queueHasMessageWithContent(trackedMessage)) {      seenTrackedMessageCount++;    }  }  if (seenTrackedMessageCount > maxPropagationSeen && time != 0) {    timestepToPropagation.put(time,seenTrackedMessageCount);    maxPropagationSeen=seenTrackedMessageCount;  }  if (time > maxTimeSeen) {    maxTimeSeen=time;  }  if (time < minTimeSeen && time != 0) {    minTimeSeen=time;  }  double hours=(time - minTimeSeen) / 1000 / 60/ 60;  if (seenTrackedMessageCount == ProximitySimulation.NUMBER_OF_PEOPLE || (hours > ProximitySimulation.MAX_RUNTIME && ProximitySimulation.MAX_RUNTIME > 0)) {    sim.schedule.clear();  }}  }
class C{  private WeakReferenceElement(E reft,ReferenceQueue<? super E> queue){  super(reft,queue);  hashCode=reft != null ? reft.hashCode() : 0;}  }
class C{  public void send(Object message,boolean sent) throws RemotingException {  if (closed) {    throw new RemotingException(this.getLocalAddress(),null,"Failed to send message " + message + ", cause: The server "+ getLocalAddress()+ " is closed!");  }  server.send(message,sent);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.094 -0400",hash_original_method="7F7FAA4BD379FD5B7B024567C1869B85",hash_generated_method="13CF782AFB733F50D45620274C50E190") @Override public boolean onCreatePanelMenu(int featureId,Menu menu){  if (featureId == Window.FEATURE_OPTIONS_PANEL) {    boolean show=super.onCreatePanelMenu(featureId,menu);    show|=mFragments.dispatchCreateOptionsMenu(menu,getMenuInflater());    if (android.os.Build.VERSION.SDK_INT >= HONEYCOMB) {      return show;    }    return true;  }  return super.onCreatePanelMenu(featureId,menu);}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((SerialListener)client).reply((SerialReply)m);}  }
class C{  public void testSetScaleRoundFloor(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_FLOOR);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public void acceptChanges() throws SyncProviderException {  if (onInsertRow == true) {    throw new SyncProviderException(resBundle.handleGetObject("cachedrowsetimpl.invalidop").toString());  }  int saveCursorPos=cursorPos;  boolean success=false;  boolean conflict=false;  try {    if (rowSetWriter != null) {      saveCursorPos=cursorPos;      conflict=rowSetWriter.writeData((RowSetInternal)this);      cursorPos=saveCursorPos;    }    if (tXWriter) {      if (!conflict) {        tWriter=(TransactionalWriter)rowSetWriter;        tWriter.rollback();        success=false;      } else {        tWriter=(TransactionalWriter)rowSetWriter;        if (tWriter instanceof CachedRowSetWriter) {          ((CachedRowSetWriter)tWriter).commit(this,updateOnInsert);        } else {          tWriter.commit();        }        success=true;      }    }    if (success == true) {      setOriginal();    } else     if (!(success)) {      throw new SyncProviderException(resBundle.handleGetObject("cachedrowsetimpl.accfailed").toString());    }  } catch (  SyncProviderException spe) {    throw spe;  }catch (  SQLException e) {    e.printStackTrace();    throw new SyncProviderException(e.getMessage());  }catch (  SecurityException e) {    throw new SyncProviderException(e.getMessage());  }}  }
class C{  private Map<Port,Set<Port>> expandInternalTopology(TopologyTree root,Map<Port,Set<Port>> inputMap){  int thisSize=0;  int nextSize=getChangeHash(inputMap);  Map<Port,Set<Port>> returnMap=new HashMap<>(inputMap);  while (nextSize != thisSize) {    thisSize=nextSize;    returnMap.entrySet().forEach(null);    returnMap.entrySet().removeIf(null);    nextSize=getChangeHash(returnMap);  }  return returnMap;}  }
class C{  public ElementCreator build(ElementKey<?,?> element){  return build(null,element,null);}  }
class C{  public void removeDataSource(){  Integer lastSeriesIndex=dataset.getSeriesCount() - 1;  if (lastSeriesIndex >= 0) {    this.fireDataSourceRemoved(lastSeriesIndex);    dataset.removeSeries(lastSeriesIndex);  }}  }
class C{  public String toString(){  return "Count number of misplaced tiles.";}  }
class C{  private static boolean verifySourcePositionReceivers(NodeSourcePosition start){  NodeSourcePosition pos=start;  while (pos != null) {    if (pos.getReceiver() != null) {      assert ((HotSpotObjectConstant)pos.getReceiver()).asObject(pos.getMethod().getDeclaringClass()) != null;    }    pos=pos.getCaller();  }  return true;}  }
class C{  public String genRandomPassword(final int length){  byte[] bytes=new byte[length];  pwGenerator.nextBytes(bytes);  return Digest.encodeMD5Hex(bytes);}  }
class C{  public NokiaGroupGraphic(OtaBitmap otaBitmap){  this(otaBitmap.getBytes());}  }
class C{  private Map<String,ExecutableElement> makeSetterMap(Map<ExecutableElement,String> getterToPropertyName){  Map<String,TypeMirror> getterMap=new TreeMap<String,TypeMirror>();  for (  Map.Entry<ExecutableElement,String> entry : getterToPropertyName.entrySet()) {    getterMap.put(entry.getValue(),entry.getKey().getReturnType());  }  Map<String,ExecutableElement> noPrefixMap=Maps.newLinkedHashMap();  Map<String,ExecutableElement> prefixMap=Maps.newLinkedHashMap();  boolean ok=true;  for (  ExecutableElement setter : setters) {    Map<String,ExecutableElement> map=noPrefixMap;    String name=setter.getSimpleName().toString();    TypeMirror type=getterMap.get(name);    if (type == null && name.startsWith("set")) {      name=Introspector.decapitalize(name.substring(3));      type=getterMap.get(name);      map=prefixMap;    }    if (type == null) {      errorReporter.reportError("Method does not correspond to a property of " + autoValueClass,setter);      ok=false;    } else {      VariableElement parameter=Iterables.getOnlyElement(setter.getParameters());      if (TYPE_EQUIVALENCE.equivalent(type,parameter.asType())) {        getterMap.remove(name);        map.put(name,setter);      } else {        errorReporter.reportError("Parameter type should be " + type,parameter);        ok=false;      }    }  }  if (!ok) {    return null;  }  boolean prefixing=!prefixMap.isEmpty();  if (prefixing && !noPrefixMap.isEmpty()) {    errorReporter.reportError("If any setter methods use the setFoo convention then all must",noPrefixMap.values().iterator().next());    return null;  }  if (!getterMap.isEmpty()) {    for (    Map.Entry<String,TypeMirror> entry : getterMap.entrySet()) {      String setterName=prefixing ? prefixWithSet(entry.getKey()) : entry.getKey();      String error=String.format("Expected a method with this signature: %s%s %s(%s)",builderTypeElement,TypeSimplifier.actualTypeParametersString(builderTypeElement),setterName,entry.getValue());      errorReporter.reportError(error,builderTypeElement);    }    return null;  }  return noPrefixMap.isEmpty() ? prefixMap : noPrefixMap;}  }
class C{  protected int hmdu(int N,int M,int n,MersenneTwisterFast randomGenerator){  int I, K;  double p, nu, c, d, U;  if (N != N_last || M != M_last || n != n_last) {    N_last=N;    M_last=M;    n_last=n;    Mp=(double)(M + 1);    np=(double)(n + 1);    N_Mn=N - M - n;    p=Mp / (N + 2.0);    nu=np * p;    if ((m=(int)nu) == nu && p == 0.5) {      mp=m--;    } else {      mp=m + 1;    }    fm=Math.exp(Arithmetic.logFactorial(N - M) - Arithmetic.logFactorial(N_Mn + m) - Arithmetic.logFactorial(n - m) + Arithmetic.logFactorial(M) - Arithmetic.logFactorial(M - m) - Arithmetic.logFactorial(m) - Arithmetic.logFactorial(N) + Arithmetic.logFactorial(N - n) + Arithmetic.logFactorial(n));    b=(int)(nu + 11.0 * Math.sqrt(nu * (1.0 - p) * (1.0 - n / (double)N) + 1.0));    if (b > n)     b=n;  }  for (; ; ) {    if ((U=randomGenerator.nextDouble() - fm) <= 0.0)     return (m);    c=d=fm;    for (I=1; I <= m; I++) {      K=mp - I;      c*=(double)K / (np - K) * ((double)(N_Mn + K) / (Mp - K));      if ((U-=c) <= 0.0)       return (K - 1);      K=m + I;      d*=(np - K) / (double)K * ((Mp - K) / (double)(N_Mn + K));      if ((U-=d) <= 0.0)       return (K);    }    for (K=mp + m; K <= b; K++) {      d*=(np - K) / (double)K * ((Mp - K) / (double)(N_Mn + K));      if ((U-=d) <= 0.0)       return (K);    }  }}  }
class C{  public static final double sum(final double[] v1){  double acc=0.;  for (int row=0; row < v1.length; row++) {    acc+=v1[row];  }  return acc;}  }
class C{  public static boolean bytesEqual(byte[] a1,byte[] a2){  if (a1 == a2) {    return true;  } else   if (a1 == null || a2 == null) {    return false;  } else   if (a1.length != a2.length) {    return false;  } else {    for (int i=0; i < a1.length; i++)     if (a1[i] != a2[i])     return false;  }  return true;}  }
class C{  public LongTermCredential(String username,String password){  this(getBytes(username),getBytes(password));}  }
class C{  public void updateCurrentPageElementsCount(int pageElementsCount){  assert totalCount >= 0;  this.pageElementsCount=pageElementsCount;}  }
class C{  private void update(){  getDiff();  ProjectDescriptor project=appContext.getCurrentProject().getRootProject();  getCommitsLog(project);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @Override protected void detach(){  super.detach();  poolEntry=null;}  }
class C{  @Override public void reconcileFlow(OFMatchReconcile ofmRcIn,EventPriority priority){  if (ofmRcIn == null)   return;  OFMatchReconcile myOfmRc=new OFMatchReconcile(ofmRcIn);  flowQueue.offer(myOfmRc,priority);  ctrFlowReconcileRequest.updateCounterWithFlush();  Date currTime=new Date();  long delay=0;  if (currTime.after(new Date(lastReconcileTime.getTime() + 1000))) {    delay=0;  } else {    delay=FLOW_RECONCILE_DELAY_MILLISEC;  }  flowReconcileTask.reschedule(delay,TimeUnit.MILLISECONDS);  if (logger.isTraceEnabled()) {    logger.trace("Reconciling flow: {}, total: {}",myOfmRc.toString(),flowQueue.size());  }}  }
class C{  public void fireEntityRemoved(final OdorWorldEntity entity){  for (  WorldListener listener : listenerList) {    listener.entityRemoved(entity);  }}  }
class C{  private Set<BreakpointAddress> enforceBreakpointHierarchy(final Set<BreakpointAddress> addresses,final BreakpointType type){  final SetView<BreakpointAddress> alreadyRegularBreakpoints=Sets.intersection(addresses,indexedBreakpointStorage.getBreakPointAddresses());  final SetView<BreakpointAddress> alreadySteppingBreakpoints=Sets.intersection(addresses,stepBreakpointStorage.getBreakPointAddresses());  final SetView<BreakpointAddress> alreadyEchoBreakpoints=Sets.intersection(addresses,echoBreakpointStorage.getBreakPointAddresses());  Set<BreakpointAddress> addressesSet=null;switch (type) {case REGULAR:    final SetView<BreakpointAddress> notInRegularBreakpoints=Sets.difference(addresses,indexedBreakpointStorage.getBreakPointAddresses());  removeBreakpoints(alreadySteppingBreakpoints,stepBreakpointStorage);removeBreakpoints(alreadyEchoBreakpoints,echoBreakpointStorage);addressesSet=notInRegularBreakpoints;break;case STEP:final SetView<BreakpointAddress> notInSteppingBreakpoints=Sets.difference(addresses,stepBreakpointStorage.getBreakPointAddresses());removeBreakpoints(alreadyEchoBreakpoints,echoBreakpointStorage);addressesSet=Sets.difference(notInSteppingBreakpoints,alreadyRegularBreakpoints);break;case ECHO:final SetView<BreakpointAddress> notInEchoBreakPoints=Sets.difference(addresses,echoBreakpointStorage.getBreakPointAddresses());addressesSet=Sets.difference(notInEchoBreakPoints,Sets.union(alreadySteppingBreakpoints,alreadyRegularBreakpoints));break;default :throw new IllegalStateException("IE00722: Breakpoint of invalid type");}return addressesSet;}  }
class C{  private void applyConnectionParams(final HttpMethod method) throws IOException {  int timeout=0;  Object param=method.getParams().getParameter(HttpMethodParams.SO_TIMEOUT);  if (param == null) {    param=conn.getParams().getParameter(HttpConnectionParams.SO_TIMEOUT);  }  if (param != null) {    timeout=((Integer)param).intValue();  }  conn.setSocketTimeout(timeout);}  }
class C{  public Bundler putByte(String key,byte value){  bundle.putByte(key,value);  return this;}  }
class C{  private void stopRecording(){  if (isRecording == false) {    return;  }  final long recordEndedTime=System.currentTimeMillis();  isRecording=false;  final Collection<MidiEvent> eventToRemoval=new HashSet<MidiEvent>();  for (  final Track track : sequence.getTracks()) {    final Set<Integer> recordEnableChannels=recordEnable.get(track);    eventToRemoval.clear();    for (int trackIndex=0; trackIndex < track.size(); trackIndex++) {      final MidiEvent midiEvent=track.get(trackIndex);      if (isRecordable(recordEnableChannels,midiEvent) && midiEvent.getTick() >= recordingStartedTime && midiEvent.getTick() <= recordEndedTime) {        eventToRemoval.add(midiEvent);      }    }    for (    final MidiEvent event : eventToRemoval) {      track.remove(event);    }    for (int eventIndex=0; eventIndex < recordingTrack.size(); eventIndex++) {      if (isRecordable(recordEnableChannels,recordingTrack.get(eventIndex))) {        track.add(recordingTrack.get(eventIndex));      }    }    TrackUtils.sortEvents(track);  }  needRefreshPlayingTrack=true;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof SystemMemberCacheJmxImpl)) {    return false;  }  SystemMemberCacheJmxImpl other=(SystemMemberCacheJmxImpl)obj;  return this.getMBeanName().equals(other.getMBeanName());}  }
class C{  public void writeAnnotations(Writer out,byte[] data) throws IOException {  int rightWidth=getAnnotationWidth();  int leftWidth=outputWidth - rightWidth - 1;  String padding=Strings.repeat(" ",1000);  TwoColumnOutput twoc=new TwoColumnOutput(out,leftWidth,rightWidth,"|");  Integer[] keys=new Integer[annotatations.size()];  keys=annotatations.keySet().toArray(keys);  AnnotationEndpoint[] values=new AnnotationEndpoint[annotatations.size()];  values=annotatations.values().toArray(values);  for (int i=0; i < keys.length - 1; i++) {    int rangeStart=keys[i];    int rangeEnd=keys[i + 1];    AnnotationEndpoint annotations=values[i];    for (    AnnotationItem pointAnnotation : annotations.pointAnnotations) {      String paddingSub=padding.substring(0,pointAnnotation.indentLevel * 2);      twoc.write("",paddingSub + pointAnnotation.annotation);    }    String right;    AnnotationItem rangeAnnotation=annotations.rangeAnnotation;    if (rangeAnnotation != null) {      right=padding.substring(0,rangeAnnotation.indentLevel * 2);      right+=rangeAnnotation.annotation;    } else {      right="";    }    String left=Hex.dump(data,rangeStart,rangeEnd - rangeStart,rangeStart,hexCols,6);    twoc.write(left,right);  }  int lastKey=keys[keys.length - 1];  if (lastKey < data.length) {    String left=Hex.dump(data,lastKey,data.length - lastKey,lastKey,hexCols,6);    twoc.write(left,"");  }}  }
class C{  public void testThreeNodeSubmitQueryWithSequentialConsistency() throws Throwable {  testSubmitQuery(3,Query.ConsistencyLevel.SEQUENTIAL);}  }
class C{  public CSVParser(char separator,char quotechar,char escape){  this(separator,quotechar,escape,DEFAULT_STRICT_QUOTES);}  }
class C{  private String searchCharSet(String key){  if ((key != null) && (key.length() > 0)) {    Map<String,String> mapper;    String charset;    for (int i=0; i < mappers.length; i++) {      mapper=mappers[i];      if (mapper != null) {        charset=mapper.get(key);        if (charset != null) {          if (i > MAP_CACHE) {            mappers[MAP_CACHE].put(key,charset);          }          return charset;        }      }    }    mappers[MAP_CACHE].put(key,"");  }  return "";}  }
class C{  static public boolean releaseUid(int uid,Object purpose){  SceUid found=uidMap.get(uid);  if (found == null) {    Emulator.log.warn("Attempt to release unknown SceUID (purpose='" + purpose.toString() + "')");    return false;  }  if (purpose.equals(found.getPurpose())) {    uidMap.remove(uid);  } else {    Emulator.log.error("Attempt to release SceUID for different purpose (purpose='" + purpose.toString() + "',original='"+ found.getPurpose().toString()+ "')");    return false;  }  return true;}  }
class C{  public BandPassBuilder sampleRate(int sampleRate){  mSampleRate=sampleRate;  return this;}  }
class C{  @Override public long cardinality(){switch (format) {case NORMAL:    double registerSum=0;  int count=registerSet.count;double zeros=0;for (int j=0; j < registerSet.count; j++) {int val=registerSet.get(j);registerSum+=1.0 / (1 << val);if (val == 0) {  zeros++;}}double estimate=alphaMM * (1 / registerSum);double estimatePrime=estimate;if (estimate <= (5 * m)) {estimatePrime=estimate - getEstimateBias(estimate,p);}double H;if (zeros > 0) {H=HyperLogLog.linearCounting(count,zeros);} else {H=estimatePrime;}if ((p <= 18 && H < thresholdData[p - 4]) || (p > 18 && estimate <= 5 * m)) {return Math.round(H);} else {return Math.round(estimatePrime);}case SPARSE:mergeTempList();return Math.round(HyperLogLog.linearCounting(sm,(sm - sparseSet.length)));}return 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public JDialog showDialog(){  return showDialog(800,600);}  }
class C{  public static String stringFor(int n){switch (n) {case CU_JIT_INPUT_CUBIN:    return "CU_JIT_INPUT_CUBIN";case CU_JIT_INPUT_PTX:  return "CU_JIT_INPUT_PTX";case CU_JIT_INPUT_FATBINARY:return "CU_JIT_INPUT_FATBINARY";case CU_JIT_INPUT_OBJECT:return "CU_JIT_INPUT_OBJECT";case CU_JIT_INPUT_LIBRARY:return "CU_JIT_INPUT_LIBRARY";}return "INVALID CUjitInputType: " + n;}  }
class C{  static public boolean resolveIP(boolean doResolve){  boolean old=doResolveIP;  doResolveIP=doResolve;  return old;}  }
class C{  public void eliminar(String entidad) throws Exception {  HitosHistoricoTabla table=new HitosHistoricoTabla();  DbConnection dbConn=new DbConnection();  logger.debug("eliminar");  try {    dbConn.open(DBSessionManager.getSession(entidad));    DbDeleteFns.delete(dbConn,table.getNombreTabla(),table.getClausulaPorNumeroExpediente(getNumeroExpediente()));  } catch (  Exception exc) {  } finally {    if (dbConn.existConnection())     dbConn.close();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  try {    return sage.locator.LocatorLookupClient.lookupIPForGuid(getString(stack));  } catch (  Exception e) {    return null;  }}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public boolean canReadChars(int numberChars){  return _content.length >= _index + numberChars;}  }
class C{  public List<? extends Club> clubs(){  return service.query(AutoValueClasses.CLUB);}  }
class C{  public static GroupMatcher<TriggerKey> anyTriggerGroup(){  return GroupMatcher.anyGroup();}  }
class C{  public void writeEPL(StringWriter writer){  writer.append("{");  if (single != null) {    single.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  } else {    if (low != null) {      low.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    }    writer.append(",");    if (high != null) {      high.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    }  }  writer.append("}");}  }
class C{  protected void finalize(){  m_eventNotifier.setEnabled(false);  m_eventNotifier=null;  closeAllQueries();}  }
class C{  public static Vector3 matrixVectorMultiply(Matrix33 m,Vector3 v){  return new Vector3(m.xx * v.x + m.xy * v.y + m.xz * v.z,m.yx * v.x + m.yy * v.y + m.yz * v.z,m.zx * v.x + m.zy * v.y + m.zz * v.z);}  }
class C{  protected void writeJson(MListTable<?> table,OutputStream outputStream) throws IOException {  final List<?> list=table.getList();  TransportFormatAdapter.writeJson((Serializable)list,outputStream);}  }
class C{  public void start(){  if (mState == State.RUNNING) {    throw new IllegalStateException();  }  mStart=System.nanoTime();  mState=State.RUNNING;  mStartCount++;}  }
class C{  public boolean contains(L leftValue,R rightValue){  if (leftValue == rightValue)   return true;  if (leftValue == null || rightValue == null)   return false;  R right=tableLeft.get(leftValue);  if (right == rightValue)   return true;  return tableLeft.get(leftValue).equals(right);}  }
class C{  public void addAll(PairedStats values){  if (values.count() == 0) {    return;  }  xStats.addAll(values.xStats());  if (yStats.count() == 0) {    sumOfProductsOfDeltas=values.sumOfProductsOfDeltas();  } else {    sumOfProductsOfDeltas+=values.sumOfProductsOfDeltas() + (values.xStats().mean() - xStats.mean()) * (values.yStats().mean() - yStats.mean()) * values.count();  }  yStats.addAll(values.yStats());}  }
class C{  @SuppressWarnings("unused") private void dump(){  for (  Map.Entry<String,List<AssetOptionsMethodInfo>> entry : supportedAssetTypes.entrySet()) {    System.out.println("*" + entry.getKey());    for (    AssetOptionsMethodInfo info : entry.getValue()) {      System.out.println("--" + info.javaMethod.getName());      System.out.println("-- Requires:");      for (      String parentAsset : info.assetDependencies) {        System.out.println("-----" + parentAsset);      }    }  }}  }
class C{  public HookHandler(Vertx vertx,HttpClient selfClient,final ResourceStorage storage,LoggingResourceManager loggingResourceManager,MonitoringHandler monitoringHandler,String userProfilePath,String hookRootUri){  this(vertx,selfClient,storage,loggingResourceManager,monitoringHandler,userProfilePath,hookRootUri,new QueueClient(vertx,monitoringHandler));}  }
class C{  public void addReply(final String trigger,final String text){  add(ConversationStates.ATTENDING,trigger,null,ConversationStates.ATTENDING,text,null);}  }
class C{  @Override public void acceptResult(ResultProducer rp,Object[] key,Object[] result) throws Exception {  if (m_RP != rp) {    throw new Error("Unrecognized ResultProducer sending results!!");  }  Instance newInst=new DenseInstance(m_AttributeTypes.length);  for (int i=0; i < m_AttributeTypes.length; i++) {    Object val=null;    if (i < key.length) {      val=key[i];    } else {      val=result[i - key.length];    }    if (val == null) {      newInst.setValue(i,Utils.missingValue());    } else {switch (m_AttributeTypes[i]) {case Attribute.NOMINAL:        String str=(String)val;      Double index=m_NominalIndexes[i].get(str);    if (index == null) {      index=new Double(m_NominalStrings[i].size());      m_NominalIndexes[i].put(str,index);      m_NominalStrings[i].add(str);    }  newInst.setValue(i,index.doubleValue());break;case Attribute.NUMERIC:double dou=((Double)val).doubleValue();newInst.setValue(i,dou);break;default :newInst.setValue(i,Utils.missingValue());}}}m_Instances.add(newInst);}  }
class C{  public final void endElement(final String namespaceURI,final String localName,final String name) throws org.xml.sax.SAXException {  if (m_cdataTagOpen)   closeCDATA();  if (null != namespaceURI && namespaceURI.length() > 0) {    super.endElement(namespaceURI,localName,name);    return;  }  try {    ElemContext elemContext=m_elemContext;    final ElemDesc elemDesc=elemContext.m_elementDesc;    final int elemFlags=elemDesc.getFlags();    final boolean elemEmpty=(elemFlags & ElemDesc.EMPTY) != 0;    if (m_doIndent) {      final boolean isBlockElement=(elemFlags & ElemDesc.BLOCK) != 0;      boolean shouldIndent=false;      if (m_ispreserve) {        m_ispreserve=false;      } else       if (m_doIndent && (!m_inBlockElem || isBlockElement)) {        m_startNewLine=true;        shouldIndent=true;      }      if (!elemContext.m_startTagOpen && shouldIndent)       indent(elemContext.m_currentElemDepth - 1);      m_inBlockElem=!isBlockElement;    }    final java.io.Writer writer=m_writer;    if (!elemContext.m_startTagOpen) {      writer.write("</");      writer.write(name);      writer.write('>');    } else {      if (m_tracer != null)       super.fireStartElem(name);      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        processAttributes(m_writer,nAttrs);        m_attributes.clear();      }      if (!elemEmpty) {        writer.write("></");        writer.write(name);        writer.write('>');      } else {        writer.write('>');      }    }    if ((elemFlags & ElemDesc.WHITESPACESENSITIVE) != 0)     m_ispreserve=true;    m_isprevtext=false;    if (m_tracer != null)     super.fireEndElem(name);    if (elemEmpty) {      m_elemContext=elemContext.m_prev;      return;    }    if (!elemContext.m_startTagOpen) {      if (m_doIndent && !m_preserves.isEmpty())       m_preserves.pop();    }    m_elemContext=elemContext.m_prev;  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.470 -0500",hash_original_method="89C8C4B82DB5AC36CAD55D59C7A76E33",hash_generated_method="1F9346CADD06FBFF3294E9C4A4C60388") public int connectSrcHandlerToPackageSync(Context srcContext,Handler srcHandler,String dstPackageName,String dstClassName){  if (DBG)   log("connect srcHandler to dst Package & class E");  mConnection=new AsyncChannelConnection();  mSrcContext=srcContext;  mSrcHandler=srcHandler;  mSrcMessenger=new Messenger(srcHandler);  mDstMessenger=null;  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.setClassName(dstPackageName,dstClassName);  boolean result=srcContext.bindService(intent,mConnection,Context.BIND_AUTO_CREATE);  if (DBG)   log("connect srcHandler to dst Package & class X result=" + result);  return result ? STATUS_SUCCESSFUL : STATUS_BINDING_UNSUCCESSFUL;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYSplineRenderer)) {    return false;  }  XYSplineRenderer that=(XYSplineRenderer)obj;  if (this.precision != that.precision) {    return false;  }  if (this.fillType != that.fillType) {    return false;  }  if (!ObjectUtilities.equal(this.gradientPaintTransformer,that.gradientPaintTransformer)) {    return false;  }  return super.equals(obj);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String rawOutputTipText(){  return "Save raw output (useful for debugging). If set, then output is " + "sent to the destination specified by outputFile";}  }
class C{  public static GlobalSearchScope excludeSdkTestsScope(Project project){  final Sdk sdk=ProjectRootManager.getInstance(project).getProjectSdk();  GlobalSearchScope scope=excludeSdkTestsScope(project,sdk);  return scope != null ? ProjectScope.getAllScope(project).intersectWith(scope) : ProjectScope.getAllScope(project);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected Point limitPointToWorldWindow(Point point){  Rectangle viewport=this.getWwd().getView().getViewport();  int x=point.x;  if (x < viewport.x)   x=viewport.x;  if (x > viewport.x + viewport.width)   x=viewport.x + viewport.width;  int y=point.y;  if (y < viewport.y)   y=viewport.y;  if (y > viewport.y + viewport.height)   y=viewport.y + viewport.height;  return new Point(x,y);}  }
class C{  public void notifyTransactionTerminated(CompositeTransaction ct){  boolean notifyOfTerminatedEvent=false;synchronized (this) {    boolean alreadyTerminated=isTerminated();    Iterator<TransactionContext> it=allContexts.iterator();    while (it.hasNext()) {      TransactionContext b=it.next();      b.transactionTerminated(ct);    }    if (isTerminated() && !alreadyTerminated)     notifyOfTerminatedEvent=true;  }  if (notifyOfTerminatedEvent) {    if (LOGGER.isTraceEnabled())     LOGGER.logTrace(this + ": all contexts terminated, firing TerminatedEvent for " + this);    fireTerminatedEvent();  }}  }
class C{  public void skippedEntity(String name) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#skippedEntity: " + name);  if (m_contentHandler != null) {    m_contentHandler.skippedEntity(name);  }}  }
class C{  public static void copyTo(Attributes from,Attributes to){  for (int i=0; i < from.keys.length; i++) {    to.putAttribute(from.keys[i],from.values[i]);  }}  }
class C{  public SVGPath relativeSmoothQuadTo(double x,double y){  append(PATH_SMOOTH_QUAD_TO_RELATIVE,x,y);  return this;}  }
class C{  public void writeUint8(long n){  check(1);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  private void addToZone(){  if (count == 0) {    ent.pathnotifier.addObserver(this);    ent.pathnotifier.notifyObservers();  }  int x=route.get(count).get().second().get(0).getX();  int y=route.get(count).get().second().get(0).getY();  ent.setPosition(x,y);  StendhalRPZone zone=route.get(count).get().first();  ent.setPath(new FixedPath(route.get(count).get().second(),false));  if (ent.getZone() != null) {    ent.getZone().remove(ent);  }  zone.add(ent);}  }
class C{  public AtomicReferenceArray(int length){  array=new Object[length];}  }
class C{  public Mesh createPolygon(){  tessellator=new Tessellator();  Mesh poly=new Mesh("_polygon");  poly.setModelBound(new BoundingBox());  poly.getSceneHints().setRenderBucketType(RenderBucketType.Transparent);  poly.getSceneHints().setCullHint(CullHint.Always);  poly.getSceneHints().setPickingHint(PickingHint.Pickable,false);  poly.getSceneHints().setCastsShadows(false);  return (poly);}  }
class C{  public Rectangle geoToPixel(Rectangle2D rectangle){  Point2D minGeo=new Point2D.Double(rectangle.getX(),rectangle.getY());  Point2D maxGeo=new Point2D.Double(rectangle.getX() + rectangle.getWidth(),rectangle.getY() + rectangle.getHeight());  Point2D minPoint=this.visualizer.getActiveMapRenderLayer().geoToPixel(minGeo);  Point2D maxPoint=this.visualizer.getActiveMapRenderLayer().geoToPixel(maxGeo);  int x=(int)minPoint.getX();  int y=(int)minPoint.getY();  int w=(int)maxPoint.getX() - (int)minPoint.getX();  int h=(int)maxPoint.getY() - (int)minPoint.getY();  if (h < 0) {    y+=h;    h=h * -1;  }  if (w < 0) {    x+=w;    w=w * -1;  }  Rectangle newRect=new Rectangle(x,y,w,h);  return newRect;}  }
class C{  public BOSHClientConfig build(){  String lang;  if (bLang == null) {    lang="en";  } else {    lang=bLang;  }  int port;  if (bProxyHost == null) {    port=0;  } else {    port=bProxyPort;  }  boolean compression;  if (bCompression == null) {    compression=false;  } else {    compression=bCompression.booleanValue();  }  return new BOSHClientConfig(bURI,bDomain,bFrom,lang,bRoute,bProxyHost,port,bSSLContext,compression);}  }
class C{  public final void testAddHelperTextColorId(){  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addHelperTextColorId(android.R.color.black);  passwordEditText.addHelperTextColorId(android.R.color.black);  assertEquals(1,passwordEditText.getHelperTextColors().size());  assertEquals(getContext().getResources().getColor(android.R.color.black),(int)passwordEditText.getHelperTextColors().iterator().next());}  }
class C{  public boolean isAllowedToInviteParticipants() throws RcsPersistentStorageException, RcsGenericException {  try {    return mGroupChatInf.isAllowedToInviteParticipants();  } catch (  Exception e) {    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void truncate(final long len) throws SQLException {  this.blobContent=Utils.copyWithLength(this.blobContent,(int)len);  this.actualSize=(int)len;}  }
class C{  @Override public void initialize() throws ReplicatorException, InterruptedException {}  }
class C{  public double distanceSq(final Double3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  void drawChars(Graphics g,char[] data,int offset,int length,int x,int y){  if (Display.getInstance().isBidiAlgorithm()) {    for (int i=offset; i < length; i++) {      if (Display.getInstance().isRTL(data[i])) {        String s=Display.getInstance().convertBidiLogicalToVisual(new String(data,offset,length));        data=s.toCharArray();        offset=0;        length=s.length();        break;      }    }  }  initColor(g);  int clipX=g.getClipX();  int clipY=g.getClipY();  int clipWidth=g.getClipWidth();  int clipHeight=g.getClipHeight();  if (clipY <= y + getHeight() && clipY + clipHeight >= y) {    char c;    for (int i=0; i < length; i++) {      c=data[offset + i];      int position=charsets.indexOf(c);      if (position < 0) {        continue;      }      g.clipRect(x,y,charWidth[position],imageHeight);      if (g.getClipWidth() > 0 && g.getClipHeight() > 0) {        g.drawImage(cache,x - cutOffsets[position],y);      }      x+=charWidth[position];      g.setClip(clipX,clipY,clipWidth,clipHeight);    }  }}  }
class C{  public ImageViewerPaneItem(){  super(TITLE,LABEL);  _viewerField=new SizedTextField(25,SizePolicy.RESTRICT_HEIGHT);  LabeledComponent comp=new LabeledComponent(OPTION_LABEL,_viewerField);  add(comp.getComponent());}  }
class C{  public void deallocatePesForVm(Vm vm){  getVmScheduler().deallocatePesForVm(vm);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:51:01.316 -0400",hash_original_method="93D5EA71D57AAC89A68536A4AED77A20",hash_generated_method="B31B447F69047C7829C96CD8A2337BBA") public PrintJobId(){  this(UUID.randomUUID().toString());}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  public HadoopIgfsCommunicationException(String msg){  super(msg);}  }
class C{  public CoapEndpoint(final Connector connector,final NetworkConfig config){  this(connector,config,null);}  }
class C{  public Message verify(ParameterList requestParams){  _log.info("Processing verification request...");  boolean isVersion2=true;  try {    VerifyRequest vrfyReq=VerifyRequest.createVerifyRequest(requestParams);    isVersion2=vrfyReq.isVersion2();    String handle=vrfyReq.getHandle();    boolean verified=false;    Association assoc=_privateAssociations.load(handle);    if (_checkPrivateSharedAssociations && _sharedAssociations.load(handle) != null) {      _log.warn("association for handle: " + handle + " expected to be private "+ "but was found in shared association store, denying direct verification request; "+ "please configure different association store/instances for private vs shared associations");    } else     if (assoc != null) {      _log.info("Loaded private association; handle: " + handle);      verified=assoc.verifySignature(vrfyReq.getSignedText(),vrfyReq.getSignature());      _privateAssociations.remove(handle);    }    VerifyResponse vrfyResp=VerifyResponse.createVerifyResponse(!vrfyReq.isVersion2());    vrfyResp.setSignatureVerified(verified);    if (verified) {      String invalidateHandle=vrfyReq.getInvalidateHandle();      if (invalidateHandle != null && _sharedAssociations.load(invalidateHandle) == null) {        _log.info("Confirming shared association invalidate handle: " + invalidateHandle);        vrfyResp.setInvalidateHandle(invalidateHandle);      }    } else     _log.error("Signature verification failed, handle: " + handle);    _log.info("Responding with " + (verified ? "positive" : "negative") + " verification response");    return vrfyResp;  } catch (  OpenIDException e) {    _log.error("Error processing verification request; " + "responding with verification error.",e);    return DirectError.createDirectError(e,!isVersion2);  }}  }
class C{  @Override protected final int nextIndex(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  Object[] set=_map._set;  int i=_index;  while (i-- > 0 && (set[i] == null || set[i] == TObjectHash.REMOVED))   ;  return i;}  }
class C{  private Log discoverLogImplementation(String logCategory) throws LogConfigurationException {  if (isDiagnosticsEnabled()) {    logDiagnostic("Discovering a Log implementation...");  }  initConfiguration();  Log result=null;  String specifiedLogClassName=findUserSpecifiedLogClassName();  if (specifiedLogClassName != null) {    if (isDiagnosticsEnabled()) {      logDiagnostic("Attempting to load user-specified log class '" + specifiedLogClassName + "'...");    }    result=createLogFromClass(specifiedLogClassName,logCategory,true);    if (result == null) {      StringBuffer messageBuffer=new StringBuffer("User-specified log class '");      messageBuffer.append(specifiedLogClassName);      messageBuffer.append("' cannot be found or is not useable.");      if (specifiedLogClassName != null) {        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LOG4J_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_JDK14_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LUMBERJACK_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_SIMPLE_LOGGER);      }      throw new LogConfigurationException(messageBuffer.toString());    }    return result;  }  if (isDiagnosticsEnabled()) {    logDiagnostic("No user-specified Log implementation; performing discovery" + " using the standard supported logging implementations...");  }  for (int i=0; (i < classesToDiscover.length) && (result == null); ++i) {    result=createLogFromClass(classesToDiscover[i],logCategory,true);  }  if (result == null) {    throw new LogConfigurationException("No suitable Log implementation");  }  return result;}  }
class C{  public ButtonPanel(){  this(ComponentOrientation.RIGHT_TO_LEFT);}  }
class C{  protected boolean validatePendingRemove(Object child){  return true;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == GamlDefinition.class) {switch (baseFeatureID) {case GamlPackage.GAML_DEFINITION__NAME:      return GamlPackage.SEQUATIONS__NAME;default :    return -1;}}if (baseClass == EquationDefinition.class) {switch (baseFeatureID) {default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  protected void processMetaOptions(String[] options) throws Exception {  String classifierString=Utils.getOption('M',options);  String[] classifierSpec=Utils.splitOptions(classifierString);  String classifierName;  if (classifierSpec.length == 0) {    classifierName="weka.classifiers.rules.ZeroR";  } else {    classifierName=classifierSpec[0];    classifierSpec[0]="";  }  setMetaClassifier(AbstractClassifier.forName(classifierName,classifierSpec));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_2__MORE_CODE_1:    return getMoreCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected boolean isDataFlavorSupported(DataFlavor df){  return getCurrentDataFlavorsAsList().contains(df);}  }
class C{  private DimIProxy(Dim dim,int type){  this.dim=dim;  this.type=type;}  }
class C{  public void deleteNode(String nodeId) throws XMPPException {  sendPubsubPacket(Type.SET,new NodeExtension(PubSubElementType.DELETE,nodeId),PubSubElementType.DELETE.getNamespace());  nodeMap.remove(nodeId);}  }
class C{  private Base64(){}  }
class C{  public void add(Shape3D shape){  addChild(shape);}  }
class C{  boolean isPrefixIndex(String fieldName){  DbIndex index=getIndex(fieldName);  return (index != null && index instanceof PrefixDbIndex);}  }
class C{  public T caseClassContent_(ClassContent_ object){  return null;}  }
class C{  public boolean isStandardImageMetadataFormatSupported(){  return supportsStandardImageMetadataFormat;}  }
class C{  @Override public boolean isStandalone(){  return standalone;}  }
class C{  public ViPRPortalClient withAuthToken(String token){  setAuthToken(token);  return this;}  }
class C{  public boolean isSetInt_set_list(){  return this.int_set_list != null;}  }
class C{  public static boolean stateSetMatches(int[] stateSpec,int[] stateSet){  if (stateSet == null) {    return (stateSpec == null || isWildCard(stateSpec));  }  int stateSpecSize=stateSpec.length;  int stateSetSize=stateSet.length;  for (int i=0; i < stateSpecSize; i++) {    int stateSpecState=stateSpec[i];    if (stateSpecState == 0) {      return true;    }    final boolean mustMatch;    if (stateSpecState > 0) {      mustMatch=true;    } else {      mustMatch=false;      stateSpecState=-stateSpecState;    }    boolean found=false;    for (int j=0; j < stateSetSize; j++) {      final int state=stateSet[j];      if (state == 0) {        if (mustMatch) {          return false;        } else {          break;        }      }      if (state == stateSpecState) {        if (mustMatch) {          found=true;          break;        } else {          return false;        }      }    }    if (mustMatch && !found) {      return false;    }  }  return true;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_GL_DEVICE_LIST_ALL:    return "CU_GL_DEVICE_LIST_ALL";case CU_GL_DEVICE_LIST_CURRENT_FRAME:  return "CU_GL_DEVICE_LIST_CURRENT_FRAME";case CU_GL_DEVICE_LIST_NEXT_FRAME:return "CU_GL_DEVICE_LIST_NEXT_FRAME";}return "INVALID CUfunction_attribute: " + n;}  }
class C{  public UserActionAttachment waitForUserActionAction(final boolean firstRun,final IUserActionDelegate iUserActionDelegate){  return m_userActionPanel.waitForUserActionAction(firstRun,iUserActionDelegate);}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.LINE_TAG;}  }
class C{  public QuantumFluxLoader(Context context,Select<T> select,int cacheSize){  this(context,select);  enableCursorCache(cacheSize);}  }
class C{  public static void visualizeWeightsAsLanes(Network network,Map<Id<Link>,Double> weightMap){  for (  Map.Entry<Id<Link>,Double> w : weightMap.entrySet()) {    network.getLinks().get(w.getKey()).setNumberOfLanes(w.getValue());  }}  }
class C{  public List<String> mget(final String... keys){  checkIsInMulti();  client.mget(keys);  return client.getMultiBulkReply();}  }
class C{  public String numIterationsTipText(){  return "Number of iterations to be performed.";}  }
class C{  public SVGOMFEImageElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public PrivateKeyEncryptedException(Throwable causeThrowable){  super(causeThrowable);}  }
class C{  public lr_item_core shift_core() throws internal_error {  if (dot_at_end())   throw new internal_error("Attempt to shift past end of an lr_item_core");  return new lr_item_core(_the_production,_dot_pos + 1);}  }
class C{  void apMessage(AnnotationProcessingError ex){  log.printLines(PrefixKind.JAVAC,"msg.proc.annotation.uncaught.exception");  ex.getCause().printStackTrace(log.getWriter(WriterKind.NOTICE));}  }
class C{  @RequestProcessing(value="/users/load-names",method=HTTPRequestMethod.GET) public void loadUserNames(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String key=Symphonys.get("keyOfSymphony");  if (!key.equals(request.getParameter("key"))) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  userQueryService.loadUserNames();  response.setStatus(HttpServletResponse.SC_OK);}  }
class C{  private float calculateScrambleImageHeightMultiplier(float multiplier){switch (currentPuzzle) {case PuzzleUtils.TYPE_777:case PuzzleUtils.TYPE_666:case PuzzleUtils.TYPE_555:case PuzzleUtils.TYPE_222:case PuzzleUtils.TYPE_444:case PuzzleUtils.TYPE_333:    return (multiplier / 4) * 3;case PuzzleUtils.TYPE_CLOCK:  return multiplier / 2;case PuzzleUtils.TYPE_MEGA:return (multiplier / 2);case PuzzleUtils.TYPE_PYRA:return (float)(multiplier / Math.sqrt(1.25));case PuzzleUtils.TYPE_SKEWB:return (multiplier / 4) * 3;case PuzzleUtils.TYPE_SQUARE1:return multiplier;}return multiplier;}  }
class C{  public InhibitAnyPolicy(byte[] encoding) throws IOException {  super(encoding);  this.skipCerts=new BigInteger((byte[])ASN1Integer.getInstance().decode(encoding)).intValue();}  }
class C{  public FiltersAggregationBuilder otherBucket(boolean otherBucket){  this.otherBucket=otherBucket;  return this;}  }
class C{  public static long multiplyCap(long a,long b){  long u=a * b;  if (((a | b) >>> 31) != 0) {    if (b != 0L && (u / b != a)) {      u=Long.MAX_VALUE;    }  }  return u;}  }
class C{  public void put(String metadataCategory,String metadataValue){  metadata.put(metadataCategory,StringEscapeUtils.unescapeJava(metadataValue));}  }
class C{  public static int[] createHashes(byte[] data,int hashes,MessageDigest digestFunction){  int[] result=new int[hashes];  int k=0;  byte salt=0;  while (k < hashes) {    byte[] digest;    digestFunction.update(salt);    salt++;    digest=digestFunction.digest(data);    for (int i=0; i < digest.length / 4 && k < hashes; i++) {      int h=0;      for (int j=(i * 4); j < (i * 4) + 4; j++) {        h<<=8;        h|=((int)digest[j]) & 0xFF;      }      result[k]=h;      k++;    }  }  return result;}  }
class C{  private void createOperatorPriceModel(Organization org,BigDecimal operatorRevenueShare) throws NonUniqueBusinessKeyException {  RevenueShareModel operatorPriceModel=new RevenueShareModel();  operatorPriceModel.setRevenueShare(operatorRevenueShare);  operatorPriceModel.setRevenueShareModelType(RevenueShareModelType.OPERATOR_REVENUE_SHARE);  org.setOperatorPriceModel(operatorPriceModel);  dm.persist(operatorPriceModel);}  }
class C{  public static int showSaveDialog(SVGPlot plot,int width,int height){  double quality=1.0;  int ret=-1;  JFileChooser fc=new JFileChooser(new File("."));  fc.setDialogTitle(DEFAULT_TITLE);  SaveOptionsPanel optionsPanel=new SaveOptionsPanel(fc,width,height);  fc.setAccessory(optionsPanel);  ret=fc.showSaveDialog(null);  fc.setDialogTitle("Saving... Please wait.");  if (ret == JFileChooser.APPROVE_OPTION) {    File file=fc.getSelectedFile();    String format=optionsPanel.getSelectedFormat();    width=optionsPanel.getSelectedWidth();    height=optionsPanel.getSelectedHeight();    if (format == null || AUTOMAGIC_FORMAT.equals(format)) {      format=guessFormat(file.getName());    }    try {      if (format == null) {        showError(fc,"Error saving image.","File format not recognized.");      } else       if ("jpeg".equals(format) || "jpg".equals(format)) {        quality=optionsPanel.getJPEGQuality();        plot.saveAsJPEG(file,width,height,quality);      } else       if ("png".equals(format)) {        plot.saveAsPNG(file,width,height);      } else       if ("ps".equals(format)) {        plot.saveAsPS(file);      } else       if ("eps".equals(format)) {        plot.saveAsEPS(file);      } else       if ("pdf".equals(format)) {        plot.saveAsPDF(file);      } else       if ("svg".equals(format)) {        plot.saveAsSVG(file);      } else {        showError(fc,"Error saving image.","Unsupported format: " + format);      }    } catch (    java.lang.IncompatibleClassChangeError e) {      showError(fc,"Error saving image.","It seems that your Java version is incompatible with this version of Batik and Jpeg writing. Sorry.");    }catch (    ClassNotFoundException e) {      showError(fc,"Error saving image.","A class was not found when saving this image. Maybe installing Apache FOP will help (for PDF, PS and EPS output).\n" + e.toString());    }catch (    TransformerFactoryConfigurationError|Exception e) {      LOG.exception(e);      showError(fc,"Error saving image.",e.toString());    }  } else   if (ret == JFileChooser.ERROR_OPTION) {    showError(fc,"Error in file dialog.","Unknown Error.");  } else   if (ret == JFileChooser.CANCEL_OPTION) {  }  return ret;}  }
class C{  @Override public void insert(DBIDRef id){  insertLeaf(createNewLeafEntry(id));}  }
class C{  public LogEventReplWriter(THLEvent event,Serializer serializer,boolean checkCRC,File file) throws ReplicatorException {  this.event=event;  this.serializer=serializer;  this.checkCRC=checkCRC;  this.file=file;}  }
class C{  void recordRemoval(MyIdentityHashMap<K,V> m){}  }
class C{  @SuppressWarnings("deprecation") static boolean isSameDay(long nowMillis,long lastUpdateMillis){  if (lastUpdateMillis != 0) {    Date now=new Date(nowMillis);    Date lastUpdate=new Date(lastUpdateMillis);    if (now.getMonth() == lastUpdate.getMonth() && now.getDate() == lastUpdate.getDate() && now.getYear() == lastUpdate.getYear()) {      return true;    }  }  return false;}  }
class C{  public Breakpoint(final com.google.security.zynamics.binnavi.debug.models.breakpoints.Breakpoint breakpoint){  m_breakpoint=breakpoint;}  }
class C{  public static LostEvent parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  LostEvent object=new LostEvent();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"LostEvent".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (LostEvent)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","Exception").equals(reader.getName())) {      object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,ExtensionMapper.class));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected BasicArchImpl(int id,String name){  _id=id;  _name=name;}  }
class C{  public static JsonObject addRoutingRuleHooks(JsonObject rules){  JsonObject nullForwarder=createRoutingRule(ImmutableMap.of("description","Null destination"));  rules=addRoutingRule(rules,AbstractTest.SERVER_ROOT + "/null/?.*",nullForwarder);  JsonObject hooks=createRoutingRule(ImmutableMap.of("description","Null destination"));  rules=addRoutingRule(rules,AbstractTest.SERVER_ROOT + "/hooks/v1/listeners/?.*",hooks);  return rules;}  }
class C{  private static void d_uaColSumLtGe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumRowSumGtLeColSumLtGe(0.0,bv,bOp);  int m=in.clen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(0,i);    int cnt=(ai == 0) ? agg0 : sumRowSumGtLeColSumLtGe(ai,bv,bOp);    out.quickSetValue(0,i,cnt);  }}  }
class C{  public double distanceSq(final MutableInt3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public SAXModifier(){}  }
class C{  public MutableByte(final byte value){  super();  this.value=value;}  }
class C{  @Override public void onDragStart(DragStartEvent event){  log("onDragStart: " + event,GREEN);}  }
class C{  LocoNetMessage createSetPacket(String s){  int data=Integer.parseInt(s);  LocoNetMessage m=new LocoNetMessage(6);  m.setElement(0,0xDF);  m.setElement(1,0x40);  m.setElement(2,0x1F);  m.setElement(3,data);  m.setElement(4,0x00);  return m;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEComponentTransferElement(prefix,(AbstractDocument)doc);}  }
class C{  void encrypt(long id,int len,byte[] data,int offset){  byte[] tweak=initTweak(id);  int i=0;  for (; i + CIPHER_BLOCK_SIZE <= len; i+=CIPHER_BLOCK_SIZE) {    if (i > 0) {      updateTweak(tweak);    }    xorTweak(data,i + offset,tweak);    cipher.encrypt(data,i + offset,CIPHER_BLOCK_SIZE);    xorTweak(data,i + offset,tweak);  }  if (i < len) {    updateTweak(tweak);    swap(data,i + offset,i - CIPHER_BLOCK_SIZE + offset,len - i);    xorTweak(data,i - CIPHER_BLOCK_SIZE + offset,tweak);    cipher.encrypt(data,i - CIPHER_BLOCK_SIZE + offset,CIPHER_BLOCK_SIZE);    xorTweak(data,i - CIPHER_BLOCK_SIZE + offset,tweak);  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getA_Parent_Asset_ID() <= 0) {    setA_Parent_Asset_ID(getA_Asset_ID());  }  String invNo=getInventoryNo();  if (invNo == null || invNo.trim().length() == 0 || invNo.equals("0")) {    invNo="" + get_ID();    setInventoryNo(invNo);  }  if (invNo != null) {    setInventoryNo(invNo.trim());  }  log.fine("InventoryNo=" + getInventoryNo());  if (getA_Asset_Group_ID() <= 0) {    setA_Asset_Group_ID(MAssetGroup.getDefault_ID(SetGetUtil.wrap(this)));  }  if (!getA_Asset_Group().equals(getM_Product().getM_Product_Category().getA_Asset_Group())) {    throw new AssetCheckDocumentException("Asset Group and Product's Asset Group are different");  }  if (getA_Asset_Group_ID() > 0) {    List<MAssetGroupAcct> assetGrpAcct=MAssetGroupAcct.forA_Asset_Group_ID(getCtx(),getA_Asset_Group_ID());    if (assetGrpAcct.size() == 0) {      log.saveError("Create Asset Error: ",Msg.translate(getCtx(),"No Asset Group Account"));      return false;    }  }  if (is_ValueChanged(COLUMNNAME_C_BPartner_Location_ID) && getC_BPartner_Location_ID() > 0) {    SetGetUtil.copyValues(SetGetUtil.wrap(this),MBPartnerLocation.Table_Name,getC_BPartner_Location_ID(),new String[]{MBPartnerLocation.COLUMNNAME_C_Location_ID});  }  if (getM_Product_ID() > 0 && getM_AttributeSetInstance_ID() <= 0) {    MProduct product=MProduct.get(getCtx(),getM_Product_ID());    MAttributeSetInstance asi=new MAttributeSetInstance(getCtx(),0,product.getM_AttributeSet_ID(),get_TrxName());    asi.setSerNo(getSerNo());    asi.setDescription();    asi.saveEx();    setM_AttributeSetInstance_ID(asi.getM_AttributeSetInstance_ID());  }  updateStatus();  return true;}  }
class C{  public static TemplateQueryBuilder templateQuery(String template,ScriptService.ScriptType templateType,Map<String,Object> vars){  return new TemplateQueryBuilder(template,templateType,vars);}  }
class C{  private static String removeBlob(String subject){  int i=0;  char lastChar=Character.UNASSIGNED;  for (int a=0; a < subject.length(); a++) {    char c=subject.charAt(a);    lastChar=c;    if ((a != 0 && c == OPEN_SQUARE_BRACKED) || c == CLOSE_SQUARE_BRACKED) {      break;    }    i++;  }  if (lastChar != CLOSE_SQUARE_BRACKED) {    return subject;  } else {    i++;    return subject.substring(i);  }}  }
class C{  public static ShortBuffer createShortBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 2);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asShortBuffer();}  }
class C{  public void addDuration(double duration){  this.duration+=duration;}  }
class C{  protected static void invert(Problem problem,Solution solution){  for (int j=0; j < problem.getNumberOfObjectives(); j++) {    double value=solution.getObjective(j);    if (value < 0.0) {      value=0.0;    } else     if (value > 1.0) {      value=1.0;    }    solution.setObjective(j,1.0 - value);  }}  }
class C{  @Override public CarbonDictionaryColumnMetaChunk readLastEntryOfDictionaryMetaChunk() throws IOException {  ColumnDictionaryChunkMeta dictionaryChunkMeta=null;  openThriftReader();  while (dictionaryMetadataFileReader.hasNext()) {    dictionaryChunkMeta=(ColumnDictionaryChunkMeta)dictionaryMetadataFileReader.read();  }  CarbonDictionaryColumnMetaChunk columnMetaChunkForLastSegment=getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);  return columnMetaChunkForLastSegment;}  }
class C{  public void handleCacheServerStart(CacheServer cacheServer){  if (!isServiceInitialised("handleCacheServerStart")) {    return;  }  CacheServerBridge cacheServerBridge=new CacheServerBridge(cacheServer,cacheImpl);  cacheServerBridge.setMemberMBeanBridge(memberMBeanBridge);  CacheServerMBean cacheServerMBean=new CacheServerMBean(cacheServerBridge);  ObjectName cacheServerMBeanName=MBeanJMXAdapter.getClientServiceMBeanName(cacheServer.getPort(),cacheImpl.getDistributedSystem().getDistributedMember());  ObjectName changedMBeanName=service.registerInternalMBean((CacheServerMXBean)cacheServerMBean,cacheServerMBeanName);  ClientMembershipListener managementClientListener=new CacheServerMembershipListenerAdapter(cacheServerMBean,memberLevelNotifEmitter,changedMBeanName);  ClientMembership.registerClientMembershipListener(managementClientListener);  cacheServerBridge.setClientMembershipListener(managementClientListener);  service.federate(changedMBeanName,CacheServerMXBean.class,true);  Notification notification=new Notification(JMXNotificationType.CACHE_SERVER_STARTED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.CACHE_SERVER_STARTED_PREFIX);  memberLevelNotifEmitter.sendNotification(notification);  memberMBeanBridge.setCacheServer(true);}  }
class C{  public double rawFitness(){  return standardizedFitness();}  }
class C{  private void deleteFilesInDir(File dir){  for (  File child : dir.listFiles()) {    child.delete();  }}  }
